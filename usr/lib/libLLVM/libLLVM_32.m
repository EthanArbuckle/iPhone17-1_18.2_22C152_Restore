unsigned __int8 *sub_1CC7A5930(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  const llvm::APInt *v13;
  llvm::Value *v14;
  llvm::ConstantInt *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  const llvm::APInt *v19;
  llvm::Instruction *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  llvm::CastInst **v26;
  llvm::CastInst **v27;
  llvm::DataLayout *v28;
  char v29;
  llvm::CastInst *v30;
  llvm::CastInst *v31;
  _DWORD **v32;
  uint64_t v33;
  int v34;
  int64_t v35;
  BOOL v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  const llvm::APInt *v42;
  uint64_t v43;
  llvm::ConstantInt *v44;
  unsigned int v45;
  unint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t **v49;
  uint64_t **v50;
  llvm::CastInst *v51;
  llvm::Type ***v52;
  llvm::Instruction *v53;
  llvm::Type *v54;
  llvm::Constant *AggregateElement;
  BOOL v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int *v59;
  uint64_t v60;
  int v61;
  BOOL v62;
  const char *v63;
  const llvm::APInt *v64;
  char Alignment;
  uint64_t v66;
  llvm::ConstantInt *v67;
  unsigned int v68;
  unint64_t v69;
  void *v70;
  llvm::Instruction *v71;
  uint64_t v72;
  unsigned __int8 *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  llvm::Type *v77;
  llvm::Constant *v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int *v81;
  uint64_t v82;
  int v83;
  BOOL v84;
  const char *v85;
  char v86;
  unint64_t v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int64_t v93;
  unint64_t v94;
  int v95;
  int v96;
  int64_t v97;
  unint64_t v98;
  int v99;
  unsigned int v100;
  llvm::Type *v101;
  llvm::Constant *v102;
  unsigned int *v103;
  unsigned int *v104;
  unsigned int *v105;
  uint64_t v106;
  int v107;
  BOOL v108;
  const char *v109;
  char v110;
  unint64_t v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  unsigned __int8 *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unsigned __int8 *v123;
  unint64_t v124;
  llvm::Instruction *v125;
  uint64_t **v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  unint64_t v130;
  unsigned __int8 *v132;
  llvm::ConstantInt ***v133;
  uint64_t Declaration;
  unint64_t v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int v138;
  unint64_t v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int v142;
  BOOL v143[8];
  unsigned int v144;
  unint64_t v145;
  unsigned int v146;
  unint64_t v147;
  unsigned int v148;
  llvm::CastInst **v149;
  uint64_t v150;
  BOOL v151;
  unsigned __int8 *v152;
  unsigned int v153;
  BOOL v154;
  unsigned __int8 *v155;
  llvm::Instruction *v156;
  __int16 v157;
  unsigned __int8 **v158;
  unsigned int v159;
  __int16 v160;
  void *v161[2];
  void v162[6];
  uint64_t v163;
  void **v164;
  void *v165;
  uint64_t v166;
  int v167;
  __int16 v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  void v173[3];

  v10 = 0;
  v173[1] = *MEMORY[0x1E4F143B8];
  v11 = **a1;
  v161[0] = v162;
  v161[1] = (void *)0x200000000;
  v163 = v11;
  v164 = &v172;
  v165 = v173;
  v166 = 0;
  v167 = 0;
  v168 = 512;
  v169 = 7;
  v170 = 0;
  v171 = 0;
  v172 = &unk_1F2616E88;
  v173[0] = &unk_1F2617008;
  v12 = (unsigned __int8 *)a1[6];
  v162[4] = a1[5];
  v162[5] = a1 + 3;
  v155 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track((uint64_t)&v155, v12, 2);
    v10 = (uint64_t)v155;
  }
  sub_1CB8461A4((uint64_t)v161, 0, v10);
  if (!v155) {
    goto LABEL_4;
  }
  v128 = *v155;
  if ((v128 - 4) > 0x1E)
  {
    if ((v128 - 3) >= 0xFFFFFFFE) {
      v132 = v155;
    }
    else {
      v132 = 0;
    }
    if ((v128 - 3) < 0xFFFFFFFE)
    {
      if (v128 == 3) {
        *((void *)v155 + 1) = 0;
      }
      goto LABEL_4;
    }
    v130 = (unint64_t)(v132 + 8);
  }
  else
  {
    if ((v155[1] & 0x7F) != 2 && !*((_DWORD *)v155 + 3)) {
      goto LABEL_4;
    }
    v129 = *((void *)v155 + 2);
    if ((v129 & 4) == 0) {
      goto LABEL_4;
    }
    v130 = v129 & 0xFFFFFFFFFFFFFFF8;
    if (!v130) {
      goto LABEL_4;
    }
  }
  v158 = &v155;
  sub_1CC5FA668(v130 + 16, &v158);
LABEL_4:
  v14 = *(llvm::Value **)a2;
  if (!*(void *)a2 || *(void *)(a2 + 8))
  {
    v15 = *(llvm::ConstantInt **)(*(void *)v163 + 1960);
    v16 = *(_DWORD *)(*(void *)v163 + 1968);
    v159 = v16 >> 8;
    if (v16 >> 8 >= 0x41) {
      operator new[]();
    }
    v158 = 0;
    v17 = (unsigned __int8 *)llvm::ConstantInt::get(v15, (llvm::LLVMContext *)&v158, v13);
    if (v159 >= 0x41)
    {
      v18 = (unsigned __int8 *)v158;
      if (v158) {
        goto LABEL_236;
      }
    }
    goto LABEL_237;
  }
  if (a5)
  {
    v158 = (unsigned __int8 **)(*(void *)v163 + 1960);
    Declaration = llvm::Intrinsic::getDeclaration(a3, 2681, (uint64_t)&v158, 1);
  }
  else
  {
    Declaration = 0;
  }
  v153 = 32;
  v152 = 0;
  v151 = 0;
  v17 = 0;
  if (sub_1CC7A84A8((llvm::Value **)a2)) {
    v17 = (unsigned __int8 *)sub_1CC7A5930(a1, a2, a3, a4, a5);
  }
  v21 = 24;
  if (*((unsigned char *)v14 + 16) == 62) {
    v21 = 64;
  }
  v22 = *(void *)((char *)v14 + v21);
  v23 = *((_DWORD *)v14 + 5);
  if ((v23 & 0x40000000) != 0)
  {
    v26 = (llvm::CastInst **)(*((void *)v14 - 1) + 32);
    v149 = v26;
    v150 = v22 | 4;
    v25 = (char *)*((void *)v14 - 1);
    v24 = v23 & 0x7FFFFFF;
  }
  else
  {
    v24 = v23 & 0x7FFFFFF;
    v25 = (char *)v14 - 32 * v24;
    v26 = (llvm::CastInst **)(v25 + 32);
    v149 = (llvm::CastInst **)(v25 + 32);
    v150 = v22 | 4;
  }
  v27 = (llvm::CastInst **)&v25[32 * v24];
  if (v26 == v27)
  {
LABEL_219:
    v125 = (llvm::Instruction *)llvm::ConstantInt::get(**(llvm::ConstantInt ***)v14, (llvm::LLVMContext *)&v152, v19);
    if (v17)
    {
      if (a5)
      {
        if (Declaration) {
          v126 = *(uint64_t ***)(Declaration + 24);
        }
        else {
          v126 = 0;
        }
        v155 = v17;
        v156 = v125;
        v160 = 257;
        v127 = sub_1CB845BAC((uint64_t *)v161, v126, (uint64_t **)Declaration, (uint64_t *)&v155, 2, (uint64_t)&v158, 0);
      }
      else
      {
        v160 = 257;
        v127 = (uint64_t)sub_1CB844A3C((uint64_t)v161, v17, (uint64_t)v125, (uint64_t)&v158, 0, 0);
      }
      v17 = (unsigned __int8 *)v127;
    }
    else
    {
      v17 = (unsigned __int8 *)v125;
    }
    goto LABEL_234;
  }
  v133 = (llvm::ConstantInt ***)v14;
  v28 = (llvm::DataLayout *)(a3 + 34);
  v29 = 1;
  do
  {
    v30 = *v26;
    if (*((unsigned char *)v30 + 16) == 16) {
      v31 = v30;
    }
    else {
      v31 = 0;
    }
    if (!v31)
    {
      if (v29) {
        v17 = (unsigned __int8 *)llvm::ConstantInt::get(**v133, (llvm::LLVMContext *)&v152, v19);
      }
LABEL_42:
      if ((v150 & 4) != 0 || (v150 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
        v51 = *v149;
        v52 = (llvm::Type ***)(*(void *)v163 + 1960);
        v160 = 257;
        v53 = sub_1CBF56614((uint64_t)v161, v51, v52, (llvm::Type *)1, (uint64_t)&v158, v20);
        v54 = (llvm::Type *)(v150 & 0xFFFFFFFFFFFFFFF8);
        if ((v150 & 4) == 0 || !v54)
        {
          AggregateElement = *v149;
          if (*v149) {
            v56 = *((unsigned char *)*v149 + 16) == 16;
          }
          else {
            v56 = 0;
          }
          if (!v56) {
            AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement(AggregateElement, 0);
          }
          v59 = (unsigned int *)*((void *)AggregateElement + 3);
          v57 = (unsigned int *)((char *)AggregateElement + 24);
          v58 = v59;
          if (v57[2] < 0x41) {
            v58 = v57;
          }
          v54 = *(llvm::Type **)(*((void *)v54 + 2) + 8 * *v58);
        }
        v60 = sub_1CB83544C((uint64_t)v28, (uint64_t)v54);
        v62 = v61 == 1;
        Alignment = llvm::DataLayout::getAlignment(v28, v54, 1);
        if (v62) {
        v66 = ((((1 << Alignment) + ((unint64_t)(v60 + 7) >> 3) - 1) & -(1 << Alignment))
        }
                           / a4);
        v67 = *(llvm::ConstantInt **)(*(void *)v163 + 1960);
        v68 = *(_DWORD *)(*(void *)v163 + 1968);
        LODWORD(v156) = v68 >> 8;
        if (v68 >> 8 > 0x40) {
          operator new[]();
        }
        if (v68 <= 0xFF) {
          v69 = 0;
        }
        else {
          v69 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v68) + 63);
        }
        v155 = (unsigned __int8 *)(v69 & v66);
        v70 = llvm::ConstantInt::get(v67, (llvm::LLVMContext *)&v155, v64);
        if (v156 >= 0x41 && v155) {
          MEMORY[0x1D25D9CB0](v155, 0x1000C8000313F17);
        }
        v157 = 257;
        v71 = sub_1CC09A1EC((uint64_t)v161, (uint64_t)v53, (uint64_t)v70, (uint64_t)&v155, 0, 1);
        if (v17[16] == 16)
        {
          v72 = *((unsigned int *)v17 + 8);
          if (v72 > 0x40)
          {
            v92 = 0;
            v93 = (unint64_t)(v72 + 63) >> 6;
            do
            {
              v36 = v93-- < 1;
              if (v36) {
                break;
              }
              v94 = *(void *)(*((void *)v17 + 3) + 8 * v93);
              v92 += __clz(v94);
            }
            while (!v94);
            v95 = v72 | 0xFFFFFFC0;
            if ((v72 & 0x3F) == 0) {
              v95 = 0;
            }
            if (v92 + v95 == v72)
            {
LABEL_108:
              v29 = 0;
              v17 = (unsigned __int8 *)v71;
              goto LABEL_198;
            }
          }
          else if (!*((void *)v17 + 3))
          {
            goto LABEL_108;
          }
        }
        if (a5)
        {
          v49 = (uint64_t **)Declaration;
          if (Declaration) {
            v50 = *(uint64_t ***)(Declaration + 24);
          }
          else {
            v50 = 0;
          }
          v155 = v17;
          v156 = v71;
          goto LABEL_150;
        }
        v160 = 257;
        v73 = v17;
        v74 = (uint64_t)v71;
      }
      else
      {
        v40 = (unsigned int *)((char *)v31 + 24);
        if (*((_DWORD *)v31 + 8) >= 0x41u) {
          v40 = *(unsigned int **)v40;
        }
        v41 = *v40;
        v43 = (*((void *)llvm::DataLayout::getStructLayout(v28, (llvm::StructType *)(v150 & 0xFFFFFFFFFFFFFFF8))+ v41+ 2)/ (unint64_t)a4);
        v44 = *(llvm::ConstantInt **)(*(void *)v163 + 1960);
        v45 = *(_DWORD *)(*(void *)v163 + 1968);
        v159 = v45 >> 8;
        if (v45 >> 8 > 0x40) {
          operator new[]();
        }
        if (v45 <= 0xFF) {
          v46 = 0;
        }
        else {
          v46 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v45) + 63);
        }
        v158 = (unsigned __int8 **)(v46 & v43);
        v47 = (unsigned __int8 *)llvm::ConstantInt::get(v44, (llvm::LLVMContext *)&v158, v42);
        if (v159 >= 0x41 && v158) {
          MEMORY[0x1D25D9CB0](v158, 0x1000C8000313F17);
        }
        if (v17[16] == 16)
        {
          v48 = *((unsigned int *)v17 + 8);
          if (v48 > 0x40)
          {
            v96 = 0;
            v97 = (unint64_t)(v48 + 63) >> 6;
            do
            {
              v36 = v97-- < 1;
              if (v36) {
                break;
              }
              v98 = *(void *)(*((void *)v17 + 3) + 8 * v97);
              v96 += __clz(v98);
            }
            while (!v98);
            v99 = v48 | 0xFFFFFFC0;
            if ((v48 & 0x3F) == 0) {
              v99 = 0;
            }
            if (v96 + v99 == v48)
            {
LABEL_115:
              v29 = 0;
              v17 = v47;
              goto LABEL_198;
            }
          }
          else if (!*((void *)v17 + 3))
          {
            goto LABEL_115;
          }
        }
        if (a5)
        {
          v49 = (uint64_t **)Declaration;
          if (Declaration) {
            v50 = *(uint64_t ***)(Declaration + 24);
          }
          else {
            v50 = 0;
          }
          v155 = v17;
          v156 = (llvm::Instruction *)v47;
LABEL_150:
          v160 = 257;
          v75 = sub_1CB845BAC((uint64_t *)v161, v50, v49, (uint64_t *)&v155, 2, (uint64_t)&v158, 0);
          goto LABEL_151;
        }
        v160 = 257;
        v73 = v17;
        v74 = (uint64_t)v47;
      }
      v75 = (uint64_t)sub_1CB844A3C((uint64_t)v161, v73, v74, (uint64_t)&v158, 0, 1);
LABEL_151:
      v17 = (unsigned __int8 *)v75;
      v29 = 0;
      goto LABEL_198;
    }
    v32 = (_DWORD **)((char *)v31 + 24);
    v33 = *((unsigned int *)v31 + 8);
    if (v33 > 0x40)
    {
      v34 = 0;
      v35 = (unint64_t)(v33 + 63) >> 6;
      do
      {
        v36 = v35-- < 1;
        if (v36) {
          break;
        }
        v37 = *(void *)&(*v32)[2 * v35];
        v34 += __clz(v37);
      }
      while (!v37);
      v38 = v33 | 0xFFFFFFC0;
      if ((v33 & 0x3F) == 0) {
        v38 = 0;
      }
      if (v34 + v38 != v33)
      {
LABEL_37:
        if ((v29 & 1) == 0) {
          goto LABEL_42;
        }
        if ((v150 & 4) == 0 && (v150 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if (v33 > 0x40) {
            LODWORD(v39) = **v32;
          }
          else {
            v39 = (uint64_t)((void)*v32 << -(char)v33) >> -(char)v33;
          }
          v112 = (char *)llvm::DataLayout::getStructLayout(v28, (llvm::StructType *)(v150 & 0xFFFFFFFFFFFFFFF8)) + 16;
          if (a5)
          {
            v113 = *(void *)&v112[8 * v39];
            v148 = v153;
            if (v153 > 0x40) {
              operator new[]();
            }
            if (v153) {
              v114 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v153;
            }
            else {
              v114 = 0;
            }
            v147 = v114 & (v113 / a4);
            v143[0] = 0;
            llvm::APInt::sadd_ov((llvm::APInt *)&v152, (const llvm::APInt *)&v147, v143, (uint64_t)&v158);
            if (v143[0])
            {
              v115 = &v152[8 * ((v153 - 1) >> 6)];
              if (v153 < 0x41) {
                v115 = (unsigned __int8 *)&v152;
              }
              v116 = 1 << (v153 - 1);
              v117 = *(void *)v115;
              LODWORD(v156) = v153;
              if ((v116 & v117) != 0)
              {
                if (v153 > 0x40) {
                  operator new[]();
                }
                v155 = 0;
                v118 = (unsigned __int8 *)(1 << (v153 - 1));
              }
              else
              {
                if (v153 > 0x40) {
                  operator new[]();
                }
                if (v153) {
                  v124 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v153;
                }
                else {
                  v124 = 0;
                }
                v155 = (unsigned __int8 *)v124;
                v118 = (unsigned __int8 *)(v124 & ~v116);
              }
              v155 = v118;
              if (v159 >= 0x41 && v158) {
                MEMORY[0x1D25D9CB0](v158, 0x1000C8000313F17);
              }
            }
            else
            {
              LODWORD(v156) = v159;
              v155 = (unsigned __int8 *)v158;
            }
          }
          else
          {
            v119 = *(void *)&v112[8 * v39];
            v146 = v153;
            if (v153 > 0x40) {
              operator new[]();
            }
            if (v153) {
              v120 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v153;
            }
            else {
              v120 = 0;
            }
            v145 = v120 & (v119 / a4);
            llvm::APInt::sadd_ov((llvm::APInt *)&v152, (const llvm::APInt *)&v145, &v151, (uint64_t)&v155);
          }
          if (v153 >= 0x41 && v152) {
            MEMORY[0x1D25D9CB0](v152, 0x1000C8000313F17);
          }
          v152 = v155;
          v153 = v156;
          LODWORD(v156) = 0;
          if (a5)
          {
            if (v148 < 0x41) {
              goto LABEL_197;
            }
            v123 = (unsigned __int8 *)v147;
            if (!v147) {
              goto LABEL_197;
            }
          }
          else
          {
            if (v146 < 0x41) {
              goto LABEL_197;
            }
            v123 = (unsigned __int8 *)v145;
            if (!v145) {
              goto LABEL_197;
            }
          }
LABEL_196:
          MEMORY[0x1D25D9CB0](v123, 0x1000C8000313F17);
LABEL_197:
          v29 = 1;
          goto LABEL_198;
        }
        llvm::APInt::sextOrTrunc((uint64_t)v32, v153, (uint64_t)&v155);
        if (a5)
        {
          v76 = v153;
          v77 = (llvm::Type *)(v150 & 0xFFFFFFFFFFFFFFF8);
          if ((v150 & 4) == 0 || !v77)
          {
            v78 = *v149;
            if (!*v149 || *((unsigned char *)v78 + 16) != 16) {
              v78 = (llvm::Constant *)llvm::Constant::getAggregateElement(v78, 0);
            }
            v81 = (unsigned int *)*((void *)v78 + 3);
            v79 = (unsigned int *)((char *)v78 + 24);
            v80 = v81;
            if (v79[2] < 0x41) {
              v80 = v79;
            }
            v77 = *(llvm::Type **)(*((void *)v77 + 2) + 8 * *v80);
          }
          v82 = sub_1CB83544C((uint64_t)v28, (uint64_t)v77);
          v84 = v83 == 1;
          v86 = llvm::DataLayout::getAlignment(v28, v77, 1);
          if (v84) {
          v140 = v76;
          }
          if (v76 > 0x40) {
            operator new[]();
          }
          v87 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v76;
          if (!v76) {
            v87 = 0;
          }
          v139 = v87 & ((((1 << v86) + ((unint64_t)(v82 + 7) >> 3) - 1) & -(1 << v86)) / a4);
          llvm::APInt::operator*((uint64_t)&v155, &v139, (uint64_t)&v141);
          v154 = 0;
          llvm::APInt::sadd_ov((llvm::APInt *)&v152, (const llvm::APInt *)&v141, &v154, (uint64_t)&v158);
          if (v154)
          {
            v88 = &v152[8 * ((v153 - 1) >> 6)];
            if (v153 < 0x41) {
              v88 = (unsigned __int8 *)&v152;
            }
            v89 = 1 << (v153 - 1);
            v90 = *(void *)v88;
            v144 = v153;
            if ((v89 & v90) != 0)
            {
              if (v153 > 0x40) {
                operator new[]();
              }
              *(void *)v143 = 0;
              v91 = 1 << (v153 - 1);
            }
            else
            {
              if (v153 > 0x40) {
                operator new[]();
              }
              if (v153) {
                v121 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v153;
              }
              else {
                v121 = 0;
              }
              *(void *)v143 = v121;
              v91 = v121 & ~v89;
            }
            *(void *)v143 = v91;
            if (v159 >= 0x41 && v158) {
              MEMORY[0x1D25D9CB0](v158, 0x1000C8000313F17);
            }
          }
          else
          {
            v144 = v159;
            *(void *)v143 = v158;
          }
        }
        else
        {
          v100 = v153;
          v101 = (llvm::Type *)(v150 & 0xFFFFFFFFFFFFFFF8);
          if ((v150 & 4) == 0 || !v101)
          {
            v102 = *v149;
            if (!*v149 || *((unsigned char *)v102 + 16) != 16) {
              v102 = (llvm::Constant *)llvm::Constant::getAggregateElement(v102, 0);
            }
            v105 = (unsigned int *)*((void *)v102 + 3);
            v103 = (unsigned int *)((char *)v102 + 24);
            v104 = v105;
            if (v103[2] < 0x41) {
              v104 = v103;
            }
            v101 = *(llvm::Type **)(*((void *)v101 + 2) + 8 * *v104);
          }
          v106 = sub_1CB83544C((uint64_t)v28, (uint64_t)v101);
          v108 = v107 == 1;
          v110 = llvm::DataLayout::getAlignment(v28, v101, 1);
          if (v108) {
          v136 = v100;
          }
          if (v100 > 0x40) {
            operator new[]();
          }
          v111 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v100;
          if (!v100) {
            v111 = 0;
          }
          v135 = v111 & ((((1 << v110) + ((unint64_t)(v106 + 7) >> 3) - 1) & -(1 << v110)) / a4);
          llvm::APInt::operator*((uint64_t)&v155, &v135, (uint64_t)&v137);
          llvm::APInt::sadd_ov((llvm::APInt *)&v152, (const llvm::APInt *)&v137, &v151, (uint64_t)v143);
        }
        if (v153 >= 0x41 && v152) {
          MEMORY[0x1D25D9CB0](v152, 0x1000C8000313F17);
        }
        v152 = *(unsigned __int8 **)v143;
        v153 = v144;
        v144 = 0;
        if (a5)
        {
          if (v142 >= 0x41 && v141) {
            MEMORY[0x1D25D9CB0](v141, 0x1000C8000313F17);
          }
          if (v140 < 0x41) {
            goto LABEL_177;
          }
          v122 = v139;
          if (!v139) {
            goto LABEL_177;
          }
        }
        else
        {
          if (v138 >= 0x41 && v137) {
            MEMORY[0x1D25D9CB0](v137, 0x1000C8000313F17);
          }
          if (v136 < 0x41 || (v122 = v135) == 0)
          {
LABEL_177:
            if (v156 < 0x41) {
              goto LABEL_197;
            }
            v123 = v155;
            if (!v155) {
              goto LABEL_197;
            }
            goto LABEL_196;
          }
        }
        MEMORY[0x1D25D9CB0](v122, 0x1000C8000313F17);
        goto LABEL_177;
      }
    }
    else if (*v32)
    {
      goto LABEL_37;
    }
LABEL_198:
    sub_1CB8460E4((uint64_t)&v149);
    v26 = v149;
  }
  while (v149 != v27);
  v14 = (llvm::Value *)v133;
  if (v29) {
    goto LABEL_219;
  }
LABEL_234:
  if (v153 >= 0x41)
  {
    v18 = v152;
    if (v152) {
LABEL_236:
    }
      MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
  }
LABEL_237:
  if (v161[0] != v162) {
    free(v161[0]);
  }
  return v17;
}

llvm::Instruction *sub_1CC7A6EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a4 + 48);
  uint64_t v8 = *(void *)(a4 + 56);
  v10 = (void *)(a4 + 48);
  v11 = *(uint64_t ***)(a2 + 40);
  v12 = (uint64_t *)(a1 + 32);
  unint64_t v70 = *(void *)a3;
  v73 = 0;
  if (sub_1CC077838((uint64_t *)(a1 + 32), &v70, &v73)
    && v73 != (const char *)(*(void *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 48)))
  {
    v14 = (llvm::ValueAsMetadata *)*((void *)v73 + 1);
    goto LABEL_4;
  }
  uint64_t v24 = *(void *)(a3 + 8);
  if (v24 != -1)
  {
    uint64_t v55 = **v11;
    v56 = *(llvm::ConstantInt **)(v55 + 1960);
    unint64_t v57 = *(unsigned int *)(v55 + 1968);
    LODWORD(v74) = v57 >> 8;
    if (v57 >> 8 > 0x40) {
      operator new[]();
    }
    if (v57 <= 0xFF) {
      unint64_t v58 = 0;
    }
    else {
      unint64_t v58 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v57) + 63);
    }
    v73 = (const char *)(v58 & v24);
    v14 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v56, (llvm::LLVMContext *)&v73, v13);
    if (v74 >= 0x41 && v73) {
      MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
    }
    goto LABEL_40;
  }
  size_t v66 = v8;
  v25 = (char *)operator new(0x78uLL);
  v14 = (llvm::ValueAsMetadata *)(v25 + 32);
  *((_DWORD *)v25 + 13) = *((_DWORD *)v25 + 13) & 0x38000000 | 1;
  *(void *)v25 = 0;
  *((void *)v25 + 1) = 0;
  *((void *)v25 + 2) = 0;
  *((void *)v25 + 3) = v25 + 32;
  v26 = *(llvm::PointerType **)(a1 + 264);
  v73 = "mtl.buffer_len";
  __int16 v76 = 259;
  llvm::GlobalVariable::GlobalVariable((unint64_t *)v25 + 4, (uint64_t)v11, v26, 1, 0, 0, &v73, 0, 0, (llvm::Type *)0x100000040, 0);
  v27 = llvm::UniqueStringSaver::save(***((void ***)v25 + 4) + 2136, "driver_parameters", 0x11uLL);
  v29 = v27;
  uint64_t v30 = ***((void ***)v25 + 4);
  v73 = v25 + 32;
  int v31 = *(_DWORD *)(v30 + 2520);
  if (!v31)
  {
    v65 = v27;
    v69 = v28;
    v63 = 0;
LABEL_53:
    v35 = sub_1CC5BF31C(v30 + 2504, (uint64_t)&v73, (uint64_t *)&v73, v63);
    v64 = v73;
    v35[1] = 0;
    v35[2] = 0;
    void *v35 = v64;
    v28 = v69;
    v29 = v65;
    goto LABEL_20;
  }
  uint64_t v32 = *(void *)(v30 + 2504);
  int v33 = v31 - 1;
  unsigned int v34 = v33 & ((v14 >> 4) ^ (v14 >> 9));
  v35 = (void *)(v32 + 24 * v34);
  v36 = (void *)*v35;
  if ((llvm::ValueAsMetadata *)*v35 != v14)
  {
    v59 = 0;
    int v60 = 1;
    while (v36 != (void *)-4096)
    {
      if (v59) {
        BOOL v61 = 0;
      }
      else {
        BOOL v61 = v36 == (void *)-8192;
      }
      if (v61) {
        v59 = v35;
      }
      unsigned int v62 = v34 + v60++;
      unsigned int v34 = v62 & v33;
      v35 = (void *)(v32 + 24 * v34);
      v36 = (void *)*v35;
      if ((llvm::ValueAsMetadata *)*v35 == v14) {
        goto LABEL_20;
      }
    }
    v65 = v29;
    v69 = v28;
    if (v59) {
      v63 = v59;
    }
    else {
      v63 = v35;
    }
    goto LABEL_53;
  }
LABEL_20:
  v35[1] = v29;
  v35[2] = v28;
  *((_DWORD *)v25 + 16) = *((_DWORD *)v25 + 16) & 0xFFBFFFFF | ((v28 != 0) << 22);
  v68 = *v11;
  v73 = (const char *)llvm::ValueAsMetadata::get(v14, v28);
  uint64_t v38 = **v11;
  v39 = *(llvm::ConstantInt **)(v38 + 1960);
  unint64_t v40 = *(unsigned int *)(v38 + 1968);
  unsigned int v71 = v40 >> 8;
  if (v40 >> 8 > 0x40) {
    operator new[]();
  }
  if (v40 <= 0xFF) {
    char v41 = 0;
  }
  else {
    char v41 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v40) + 63);
  }
  unint64_t v70 = v41 & 0x6D;
  uint64_t v8 = v66;
  v42 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v39, (llvm::LLVMContext *)&v70, v37);
  if (v71 >= 0x41 && v70)
  {
    size_t v67 = (size_t)v42;
    MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
    v42 = (llvm::ValueAsMetadata *)v67;
  }
  uint64_t v74 = llvm::ValueAsMetadata::get(v42, v42);
  uint64_t v44 = **v11;
  uint64_t v45 = *(int *)(a3 + 16);
  v46 = *(llvm::ConstantInt **)(v44 + 1960);
  unint64_t v47 = *(unsigned int *)(v44 + 1968);
  unsigned int v71 = v47 >> 8;
  if (v47 >> 8 > 0x40) {
    operator new[]();
  }
  if (v47 <= 0xFF) {
    unint64_t v48 = 0;
  }
  else {
    unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v47) + 63);
  }
  unint64_t v70 = v48 & v45;
  v50 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v46, (llvm::LLVMContext *)&v70, v43);
  if (v71 >= 0x41 && v70) {
    MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
  }
  uint64_t v75 = llvm::ValueAsMetadata::get(v50, v49);
  Impl = llvm::MDTuple::getImpl((uint64_t)v68, &v73, 3, 0, 1);
  unsigned int v52 = *(_DWORD *)(a1 + 160);
  if (v52 >= *(_DWORD *)(a1 + 164)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 152) + 8 * v52) = Impl;
  ++*(_DWORD *)(a1 + 160);
LABEL_40:
  sub_1CD49F0C0(v12, (void *)a3)[1] = v14;
LABEL_4:
  if (*(_DWORD *)(a3 + 20))
  {
    uint64_t v15 = *(void *)(a2 + 80);
    if (v15) {
      uint64_t v16 = v15 - 24;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(void *)(v16 + 48);
  }
  else
  {
    uint64_t v17 = *(void *)(*(void *)a3 + 32);
    uint64_t v16 = *(void *)(*(void *)a3 + 40);
  }
  sub_1CBF5385C(a4, v16, v17);
  if (*((unsigned char *)v14 + 16) == 16)
  {
    v18 = v14;
  }
  else
  {
    v19 = (llvm::Type *)*((void *)v14 + 3);
    __int16 v72 = 257;
    char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(a4 + 48) + 56) + 40) + 272), v19, 1);
    v21 = operator new(0x60uLL);
    v21[13] = v21[13] & 0x38000000 | 1;
    v18 = (llvm::Instruction *)(v21 + 8);
    *(void *)v21 = 0;
    *((void *)v21 + 1) = 0;
    *((void *)v21 + 2) = 0;
    *((void *)v21 + 3) = v21 + 8;
    __int16 v76 = 257;
    llvm::LoadInst::LoadInst((llvm::Value *)(v21 + 8), (uint64_t)v19, (uint64_t)v14, &v73, 0, Alignment, 0);
    (*(void (**)(void, llvm::Instruction *, unint64_t *, void, void))(**(void **)(a4 + 80)
                                                                                            + 16))(*(void *)(a4 + 80), v18, &v70, *(void *)(a4 + 48), *(void *)(a4 + 56));
    uint64_t v22 = *(unsigned int *)(a4 + 8);
    if (v22)
    {
      uint64_t v53 = *(void *)a4;
      uint64_t v54 = *(void *)a4 + 16 * v22;
      do
      {
        llvm::Instruction::setMetadata(v18, *(_DWORD *)v53, *(llvm::MDNode **)(v53 + 8));
        v53 += 16;
      }
      while (v53 != v54);
    }
  }
  if (v9)
  {
    sub_1CBF5385C(a4, v9, v8);
  }
  else
  {
    void *v10 = 0;
    v10[1] = 0;
  }
  return v18;
}

uint64_t sub_1CC7A75DC(uint64_t a1, uint64_t **a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t result = *(void *)(a1 + 248);
  if (result) {
    return result;
  }
  v5 = (char *)operator new(0x78uLL);
  v6 = v5 + 32;
  *((_DWORD *)v5 + 13) = *((_DWORD *)v5 + 13) & 0x38000000 | 1;
  *(void *)v5 = 0;
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *((void *)v5 + 3) = v5 + 32;
  v7 = (llvm::PointerType *)llvm::PointerType::get(*(llvm::PointerType **)(a1 + 264), (llvm::Type *)1);
  v44[0] = "mtl.reporting_data";
  __int16 v45 = 259;
  llvm::GlobalVariable::GlobalVariable((unint64_t *)v5 + 4, (uint64_t)a2, v7, 1, 0, 0, v44, 0, 0, (llvm::Type *)0x100000040, 0);
  *(void *)(a1 + 248) = v5 + 32;
  uint64_t v9 = llvm::UniqueStringSaver::save(***((void ***)v5 + 4) + 2136, "buffer_bindings", 0xFuLL);
  v10 = v8;
  uint64_t v11 = ***((void ***)v5 + 4);
  v44[0] = v5 + 32;
  int v12 = *(_DWORD *)(v11 + 2520);
  if (!v12)
  {
    unint64_t v40 = 0;
LABEL_27:
    uint64_t v16 = sub_1CC5BF31C(v11 + 2504, (uint64_t)v44, (uint64_t *)v44, v40);
    char v41 = v44[0];
    v16[1] = 0;
    v16[2] = 0;
    *uint64_t v16 = v41;
    goto LABEL_4;
  }
  uint64_t v13 = *(void *)(v11 + 2504);
  int v14 = v12 - 1;
  unsigned int v15 = v14 & ((v6 >> 4) ^ (v6 >> 9));
  uint64_t v16 = (void *)(v13 + 24 * v15);
  uint64_t v17 = *v16;
  if ((char *)*v16 != v6)
  {
    v36 = 0;
    int v37 = 1;
    while (v17 != -4096)
    {
      if (v36) {
        BOOL v38 = 0;
      }
      else {
        BOOL v38 = v17 == -8192;
      }
      if (v38) {
        v36 = v16;
      }
      unsigned int v39 = v15 + v37++;
      unsigned int v15 = v39 & v14;
      uint64_t v16 = (void *)(v13 + 24 * v15);
      uint64_t v17 = *v16;
      if ((char *)*v16 == v6) {
        goto LABEL_4;
      }
    }
    if (v36) {
      unint64_t v40 = v36;
    }
    else {
      unint64_t v40 = v16;
    }
    goto LABEL_27;
  }
LABEL_4:
  v16[1] = v9;
  v16[2] = v10;
  *((_DWORD *)v5 + 16) = *((_DWORD *)v5 + 16) & 0xFFBFFFFF | ((v10 != 0) << 22);
  v18 = *a2;
  v44[0] = (const char *)llvm::ValueAsMetadata::get(*(llvm::ValueAsMetadata **)(a1 + 248), v8);
  uint64_t v20 = **a2;
  v21 = *(llvm::ConstantInt **)(v20 + 1960);
  unsigned int v22 = *(_DWORD *)(v20 + 1968);
  unsigned int v43 = v22 >> 8;
  if (v22 >> 8 > 0x40) {
    operator new[]();
  }
  unint64_t v23 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v22) + 63);
  if (v22 <= 0xFF) {
    LOBYTE(v23) = 0;
  }
  unint64_t v42 = v23 & 5;
  v25 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v21, (llvm::LLVMContext *)&v42, v19);
  if (v43 >= 0x41 && v42) {
    MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
  }
  v44[1] = (const char *)llvm::ValueAsMetadata::get(v25, v24);
  uint64_t v27 = **a2;
  uint64_t v28 = *(unsigned int *)(a1 + 232);
  v29 = *(llvm::ConstantInt **)(v27 + 1960);
  unsigned int v30 = *(_DWORD *)(v27 + 1968);
  unsigned int v43 = v30 >> 8;
  if (v30 >> 8 > 0x40) {
    operator new[]();
  }
  unint64_t v31 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v30) + 63);
  if (v30 <= 0xFF) {
    unint64_t v31 = 0;
  }
  unint64_t v42 = v31 & v28;
  int v33 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v29, (llvm::LLVMContext *)&v42, v26);
  if (v43 >= 0x41 && v42) {
    MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
  }
  v44[2] = (const char *)llvm::ValueAsMetadata::get(v33, v32);
  Impl = llvm::MDTuple::getImpl((uint64_t)v18, v44, 3, 0, 1);
  unsigned int v35 = *(_DWORD *)(a1 + 160);
  if (v35 >= *(_DWORD *)(a1 + 164)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 152) + 8 * v35) = Impl;
  ++*(_DWORD *)(a1 + 160);
  return *(void *)(a1 + 248);
}

llvm::Instruction *sub_1CC7A7A10(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (a2[5])
  {
    if (a1) {
      uint64_t v5 = a1 - 24;
    }
    else {
      uint64_t v5 = 0;
    }
    sub_1CBF5385C(a3, v5, *(void *)(v5 + 48));
    uint64_t v6 = *(void *)a2;
    v7 = *(llvm::Type **)(*(void *)a2 + 24);
    v15[16] = 257;
    char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(a3 + 48) + 56) + 40) + 272), v7, 1);
    uint64_t v9 = operator new(0x60uLL);
    v9[13] = v9[13] & 0x38000000 | 1;
    v10 = (llvm::Instruction *)(v9 + 8);
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = 0;
    *((void *)v9 + 3) = v9 + 8;
    __int16 v17 = 257;
    llvm::LoadInst::LoadInst((llvm::Value *)(v9 + 8), (uint64_t)v7, v6, &v16, 0, Alignment, 0);
    (*(void (**)(void, llvm::Instruction *, _WORD *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v10, v15, *(void *)(a3 + 48), *(void *)(a3 + 56));
    uint64_t v11 = *(unsigned int *)(a3 + 8);
    if (v11)
    {
      uint64_t v12 = *(void *)a3;
      uint64_t v13 = v12 + 16 * v11;
      do
      {
        llvm::Instruction::setMetadata(v10, *(_DWORD *)v12, *(llvm::MDNode **)(v12 + 8));
        v12 += 16;
      }
      while (v12 != v13);
    }
  }
  else
  {
    sub_1CBF5385C(a3, *(void *)(*(void *)a2 + 40), *(void *)(*(void *)a2 + 32));
    return *(llvm::Instruction **)a2;
  }
  return v10;
}

llvm::Instruction *sub_1CC7A7B60(uint64_t a1, _DWORD *a2, const char *a3)
{
  v46[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)a2;
  uint64_t v8 = a1 + 56;
  uint64_t v7 = *(void *)(a1 + 56);
  unint64_t v31 = 0;
  if (sub_1CD553C1C(v7, *(_DWORD *)(v8 + 16), v6, (uint64_t)a3, &v31)) {
    BOOL v9 = v31 == (void *)(*(void *)v8 + 24 * *(unsigned int *)(v8 + 16));
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9) {
    return (llvm::Instruction *)*((void *)v31 + 2);
  }
  uint64_t v12 = **(void **)a3;
  unint64_t v31 = v33;
  uint64_t v32 = 0x200000000;
  uint64_t v36 = v12;
  int v37 = &v45;
  BOOL v38 = v46;
  uint64_t v39 = 0;
  int v40 = 0;
  __int16 v41 = 512;
  char v42 = 7;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  __int16 v45 = &unk_1F2616E88;
  v46[0] = &unk_1F2617008;
  uint64_t v13 = (unsigned __int8 *)sub_1CC7A7A10(*((void *)a3 + 10), a2, (uint64_t)&v31);
  int v14 = (unsigned __int8 *)sub_1CC7A6EE8(a1, (uint64_t)a3, (uint64_t)a2, (uint64_t)&v31);
  uint64_t v15 = *(void *)(a1 + 256);
  __int16 v28 = 257;
  if (*(void *)v13 != v15)
  {
    if (v13[16] <= 0x14u)
    {
      uint64_t v18 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v37 + 28))(v37, 47, v13, v15);
      uint64_t v13 = (unsigned __int8 *)v18;
      if (v18)
      {
        if (*(unsigned __int8 *)(v18 + 16) >= 0x1Cu)
        {
          (*(void (**)(void *, uint64_t, unsigned char *, uint64_t, uint64_t))(*v38 + 16))(v38, v18, v27, v34, v35);
          if (v32)
          {
            v25 = (llvm::MDNode **)v31;
            v26 = (llvm::MDNode **)((char *)v31 + 16 * v32);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v13, *(_DWORD *)v25, v25[1]);
              v25 += 2;
            }
            while (v25 != v26);
          }
        }
      }
    }
    else
    {
      __int16 v30 = 257;
      uint64_t v13 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v13, v15, v29, 0);
      (*(void (**)(void *, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*v38 + 16))(v38, v13, v27, v34, v35);
      if (v32)
      {
        uint64_t v16 = (llvm::MDNode **)v31;
        __int16 v17 = (llvm::MDNode **)((char *)v31 + 16 * v32);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v13, *(_DWORD *)v16, v16[1]);
          v16 += 2;
        }
        while (v16 != v17);
      }
    }
  }
  uint64_t v19 = *(void *)(a1 + 256);
  __int16 v28 = 257;
  if (*(void *)v14 != v19)
  {
    if (v14[16] <= 0x14u)
    {
      int v14 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v37 + 28))(v37, 39, v14, v19);
      if (v14) {
        BOOL v22 = v14[16] >= 0x1Cu;
      }
      else {
        BOOL v22 = 0;
      }
      if (v22)
      {
        (*(void (**)(void *, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*v38 + 16))(v38, v14, v27, v34, v35);
        if (v32)
        {
          unint64_t v23 = (llvm::MDNode **)v31;
          uint64_t v24 = (llvm::MDNode **)((char *)v31 + 16 * v32);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v14, *(_DWORD *)v23, v23[1]);
            v23 += 2;
          }
          while (v23 != v24);
        }
      }
    }
    else
    {
      __int16 v30 = 257;
      int v14 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v14, v19, v29, 0);
      (*(void (**)(void *, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*v38 + 16))(v38, v14, v27, v34, v35);
      if (v32)
      {
        uint64_t v20 = (llvm::MDNode **)v31;
        v21 = (llvm::MDNode **)((char *)v31 + 16 * v32);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v14, *(_DWORD *)v20, v20[1]);
          v20 += 2;
        }
        while (v20 != v21);
      }
    }
  }
  __int16 v30 = 257;
  v10 = sub_1CB844A3C((uint64_t)&v31, v13, (uint64_t)v14, (uint64_t)v29, 0, 0);
  v29[0] = *(const char **)a2;
  v29[1] = a3;
  sub_1CD55B4F4(v8, (uint64_t *)v29)[2] = v10;
  if (v31 != v33) {
    free(v31);
  }
  return v10;
}

uint64_t sub_1CC7A7FD4(llvm::Module *a1, llvm::MDNode **a2, uint64_t a3)
{
  v20[0] = "agx.driver_bindings";
  __int16 v21 = 259;
  uint64_t result = llvm::Module::getNamedMetadata(a1, v20);
  if (result)
  {
    if (a3)
    {
      __int16 v17 = (llvm::NamedMDNode *)result;
      uint64_t v18 = 8 * a3;
      do
      {
        uint64_t v19 = *a2++;
        uint64_t result = (uint64_t)llvm::NamedMDNode::addOperand(v17, v19);
        v18 -= 8;
      }
      while (v18);
    }
  }
  else
  {
    v20[0] = "agx.compute_driver_bindings";
    __int16 v21 = 259;
    uint64_t result = llvm::Module::getNamedMetadata(a1, v20);
    if (result)
    {
      uint64_t v7 = result;
      uint64_t v8 = *(unsigned int *)(*(void *)(result + 48) + 8);
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 8 * v8;
        do
        {
          uint64_t v11 = *(llvm::MDNode **)(**(void **)(v7 + 48) + v9);
          uint64_t v12 = *((void *)v11 + 2);
          uint64_t v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFF8);
          if ((v12 & 4) != 0) {
            uint64_t v13 = (void *)*v13;
          }
          Impl = llvm::MDTuple::getImpl((uint64_t)v13, a2, a3, 0, 1);
          uint64_t v16 = (unsigned __int8 *)llvm::MDNode::concatenate(v11, Impl, v15);
          uint64_t result = (uint64_t)sub_1CC19E068((unsigned __int8 **)(**(void **)(v7 + 48) + v9), v16);
          v9 += 8;
        }
        while (v10 != v9);
      }
    }
  }
  return result;
}

void *sub_1CC7A80F0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD63CF78(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1CC7A81C0()
{
}

void *sub_1CC7A81D4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F261E388;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC7A821C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F261E388;
  a2[1] = v2;
  return result;
}

void sub_1CC7A8248(uint64_t a1, uint64_t *a2)
{
  if (*(_DWORD *)(*(void *)(a1 + 8) + 8) > 0x20u) {
    return;
  }
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(*a2 - 8 * *(unsigned int *)(*a2 + 8));
  if (!v3) {
    return;
  }
  unint64_t v4 = *(void *)(v3 + 128);
  if ((*(unsigned char *)(v4 + 34) & 0x40) == 0) {
    return;
  }
  uint64_t v6 = ***(void ***)v4;
  v35.n128_u64[0] = v4;
  int v7 = *(_DWORD *)(v6 + 2520);
  if (!v7)
  {
    uint64_t v32 = 0;
LABEL_37:
    uint64_t v11 = sub_1CC5BF31C(v6 + 2504, (uint64_t)&v35, (uint64_t *)&v35, v32);
    unint64_t v33 = v35.n128_u64[0];
    v11[1] = 0;
    v11[2] = 0;
    *uint64_t v11 = v33;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(v6 + 2504);
  int v9 = v7 - 1;
  unsigned int v10 = v9 & ((v4 >> 4) ^ (v4 >> 9));
  uint64_t v11 = (void *)(v8 + 24 * v10);
  uint64_t v12 = *v11;
  if (*v11 != v4)
  {
    uint64_t v27 = 0;
    int v28 = 1;
    while (v12 != -4096)
    {
      if (v27) {
        BOOL v29 = 0;
      }
      else {
        BOOL v29 = v12 == -8192;
      }
      if (v29) {
        uint64_t v27 = v11;
      }
      unsigned int v30 = v10 + v28++;
      unsigned int v10 = v30 & v9;
      uint64_t v11 = (void *)(v8 + 24 * v10);
      uint64_t v12 = *v11;
      if (*v11 == v4) {
        goto LABEL_6;
      }
    }
    if (v27) {
      uint64_t v32 = v27;
    }
    else {
      uint64_t v32 = v11;
    }
    goto LABEL_37;
  }
LABEL_6:
  if (v11[2] == 15)
  {
    uint64_t v13 = (uint64_t *)v11[1];
    uint64_t v14 = *v13;
    uint64_t v15 = *(uint64_t *)((char *)v13 + 7);
    if (v14 == 0x625F726566667562 && v15 == 0x73676E69646E6962)
    {
      uint64_t v17 = *(void *)(v4 + 72);
      if (!v17
        || (v35.n128_u64[0] = (unint64_t)"oob_check_enable",
            v35.n128_u64[1] = 16,
            uint64_t v38 = 0,
            !sub_1CC5122C8((uint64_t *)(v17 + 24), (uint64_t)&v35, &v38))
        || (uint64_t Attribute = llvm::AttributeSet::getAttribute((uint64_t *)(v4 + 72), (uint64_t)"oob_check_enable", 16)) != 0
        && *(_DWORD *)(Attribute + 16) == 1
        && *(unsigned char *)(Attribute + *(unsigned int *)(Attribute + 12) + 25) == 49)
      {
        uint64_t v18 = *(unsigned int *)(v2 + 8);
        uint64_t v19 = v2 - 8 * v18;
        uint64_t v20 = *(void *)(*(void *)(v19 + 16) + 128);
        __int16 v21 = (void *)(v20 + 24);
        if (*(_DWORD *)(v20 + 32) >= 0x41u) {
          __int16 v21 = (void *)*v21;
        }
        int v22 = *(_DWORD *)v21;
        if (v22 <= 31)
        {
          if (v18 == 4
            && (uint64_t v23 = *(void *)(v19 + 24), *(unsigned char *)v23 == 1)
            && (uint64_t v24 = *(void *)(v23 + 128), *(unsigned char *)(v24 + 16) == 16))
          {
            v25 = (unint64_t *)(v24 + 24);
            if (*(_DWORD *)(v24 + 32) >= 0x41u) {
              v25 = (unint64_t *)*v25;
            }
            unint64_t v26 = *v25;
          }
          else
          {
            unint64_t v26 = -1;
          }
          uint64_t v31 = *(void *)(a1 + 8);
          v35.n128_u64[0] = v4;
          v35.n128_u64[1] = v26;
          int v36 = v22;
          int v37 = *(_DWORD *)(*(void *)(v4 + 24) + 8) >> 8;
          sub_1CBC0D590(v31, &v35);
        }
      }
    }
  }
}

uint64_t sub_1CC7A84A8(llvm::Value **a1)
{
  uint64_t v2 = *a1;
  if (!v2 || !a1[1])
  {
    int v4 = *((unsigned __int8 *)v2 + 16);
    if (v4 != 62)
    {
      if (v4 != 5) {
        goto LABEL_11;
      }
      if (*((_WORD *)v2 + 9) != 34) {
        goto LABEL_15;
      }
    }
    int v5 = *((_DWORD *)v2 + 5);
    if ((v5 & 0x40000000) != 0) {
      uint64_t v6 = (llvm::Value **)*((void *)v2 - 1);
    }
    else {
      uint64_t v6 = (llvm::Value **)((char *)v2 - 32 * (v5 & 0x7FFFFFF));
    }
    uint64_t v2 = llvm::Value::stripPointerCasts(*v6);
    int v4 = *((unsigned __int8 *)v2 + 16);
LABEL_11:
    if (v4 == 62 || v4 == 5 && *((_WORD *)v2 + 9) == 34)
    {
      *a1 = v2;
      return 1;
    }
LABEL_15:
    uint64_t v3 = 0;
    a1[1] = v2;
    return v3;
  }
  return 0;
}

BOOL sub_1CC7A8558(int a1)
{
  return (a1 - 2376) < 0x20 || a1 == 2142;
}

BOOL sub_1CC7A857C(int a1)
{
  return (a1 - 2630) < 0x20 || a1 == 2144;
}

void sub_1CC7A85A0()
{
}

uint64_t sub_1CC7A863C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDB300;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261E3D0;
  *(void *)(a1 + 32) = a1 + 64;
  *(void *)(a1 + 40) = a1 + 64;
  *(void *)(a1 + 48) = 2;
  *(_DWORD *)(a1 + 56) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB308, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC7A85A0;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCDB308, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC7A8704()
{
}

void sub_1CC7A8740(llvm::Pass *this)
{
  *(void *)this = &unk_1F261E3D0;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2 != *((void **)this + 4)) {
    free(v2);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC7A87A4(llvm::Pass *this)
{
  *(void *)this = &unk_1F261E3D0;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2 != *((void **)this + 4)) {
    free(v2);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC7A881C()
{
  return "Bounds check after LoadStoreVectorizer pass";
}

BOOL sub_1CC7A882C(llvm::SmallPtrSetImplBase *this, uint64_t a2)
{
  v114[6] = *MEMORY[0x1E4F143B8];
  int v4 = *(llvm::Module **)(a2 + 40);
  uint64_t v6 = (void **)((char *)this + 32);
  int v5 = (void *)*((void *)this + 4);
  *((unsigned char *)this + 28) = 0;
  int v7 = (void *)*((void *)this + 5);
  if (v7 != v5)
  {
    uint64_t v102 = *((unsigned int *)this + 12);
    if (v102 >= 0x21 && 4 * (*((_DWORD *)this + 13) - *((_DWORD *)this + 14)) < v102)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear(v6);
      goto LABEL_3;
    }
    memset(v7, 255, 8 * v102);
  }
  *((_DWORD *)this + 13) = 0;
  *((_DWORD *)this + 14) = 0;
LABEL_3:
  v109 = v111;
  uint64_t v110 = 0x400000000;
  v106 = v108;
  uint64_t v107 = 0x400000000;
  unint64_t v8 = sub_1CD10A3A4(v4);
  uint64_t v9 = a2 + 72;
  uint64_t v10 = *(void *)(a2 + 80);
  if (v10 != a2 + 72)
  {
    unint64_t v11 = v8;
    do
    {
      uint64_t v12 = v10 - 24;
      if (!v10) {
        uint64_t v12 = 0;
      }
      uint64_t v13 = v12 + 40;
      for (uint64_t i = *(void *)(v12 + 48); i != v13; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v15 = i - 24;
        if (i) {
          uint64_t v16 = i - 24;
        }
        else {
          uint64_t v16 = 0;
        }
        int v17 = *(unsigned __int8 *)(v16 + 16);
        if (v17 == 84)
        {
          uint64_t v18 = *(void *)(v16 - 32);
          if (v18
            && !*(unsigned char *)(v18 + 16)
            && *(void *)(v18 + 24) == *(void *)(v16 + 72)
            && (*(unsigned char *)(v18 + 33) & 0x20) != 0
            && *(_DWORD *)(*(void *)(i - 56) + 36) == 2768)
          {
            uint64_t v19 = *(void *)(v15 - 32 * (*(_DWORD *)(i - 4) & 0x7FFFFFF));
            uint64_t v20 = *((void *)this + 5);
            uint64_t v21 = *((unsigned int *)this + 13);
            if (v20 == *((void *)this + 4))
            {
              if (v21)
              {
                int v22 = 0;
                uint64_t v23 = 8 * v21;
                uint64_t v24 = (void *)*((void *)this + 5);
                while (*v24 != v19)
                {
                  if (*v24 == -2) {
                    int v22 = v24;
                  }
                  ++v24;
                  v23 -= 8;
                  if (!v23)
                  {
                    if (!v22) {
                      goto LABEL_26;
                    }
                    *int v22 = v19;
                    --*((_DWORD *)this + 14);
                    goto LABEL_56;
                  }
                }
                goto LABEL_56;
              }
LABEL_26:
              unsigned int v25 = *((_DWORD *)this + 12);
              if (v21 < v25)
              {
                *((_DWORD *)this + 13) = v21 + 1;
                *(void *)(v20 + 8 * v21) = v19;
LABEL_56:
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)(i - 24), *(llvm::Value **)(v15 - 32 * (*(_DWORD *)(i - 4) & 0x7FFFFFF)), (llvm::Value *)1);
                uint64_t v26 = v107;
                if (v107 >= (unint64_t)HIDWORD(v107)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v27 = &v106;
LABEL_32:
                *((void *)*v27 + v26) = v15;
                ++*((_DWORD *)v27 + 2);
                continue;
              }
            }
            else
            {
              unsigned int v25 = *((_DWORD *)this + 12);
            }
            if (3 * v25 <= 4 * ((int)v21 - *((_DWORD *)this + 14)))
            {
              if (v25 >= 0x40) {
                v25 *= 2;
              }
              else {
                unsigned int v25 = 128;
              }
            }
            else if (v25 - v21 >= v25 >> 3)
            {
              goto LABEL_37;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v6, v25);
            unsigned int v25 = *((_DWORD *)this + 12);
            uint64_t v20 = *((void *)this + 5);
LABEL_37:
            unsigned int v28 = v25 - 1;
            unsigned int v29 = (v25 - 1) & ((v19 >> 4) ^ (v19 >> 9));
            unsigned int v30 = (void *)(v20 + 8 * v29);
            uint64_t v31 = *v30;
            if (*v30 == -1)
            {
              uint64_t v32 = 0;
LABEL_49:
              if (v32) {
                int v36 = v32;
              }
              else {
                int v36 = v30;
              }
              if (*v36 != v19)
              {
                if (*v36 == -2) {
                  --*((_DWORD *)this + 14);
                }
                else {
                  ++*((_DWORD *)this + 13);
                }
                void *v36 = v19;
              }
            }
            else
            {
              uint64_t v32 = 0;
              int v33 = 1;
              while (v31 != v19)
              {
                if (v32) {
                  BOOL v34 = 0;
                }
                else {
                  BOOL v34 = v31 == -2;
                }
                if (v34) {
                  uint64_t v32 = v30;
                }
                unsigned int v35 = v29 + v33++;
                unsigned int v29 = v35 & v28;
                unsigned int v30 = (void *)(v20 + 8 * (v35 & v28));
                uint64_t v31 = *v30;
                if (*v30 == -1) {
                  goto LABEL_49;
                }
              }
            }
            goto LABEL_56;
          }
        }
        else if ((v11 & 0x800000000) != 0 && (v17 & 0xFE) == 0x3C)
        {
          uint64_t v26 = v110;
          if (v110 >= (unint64_t)HIDWORD(v110)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v27 = &v109;
          goto LABEL_32;
        }
      }
      uint64_t v10 = *(void *)(v10 + 8);
    }
    while (v10 != v9);
  }
  if (v107)
  {
    LODWORD(v107) = v107 - 1;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  if (!sub_1CD112054((uint64_t)v4)) {
    goto LABEL_182;
  }
  unsigned int v37 = v110;
  if (!v110) {
    goto LABEL_182;
  }
  do
  {
    uint64_t v38 = *((void *)v109 + --v37);
    LODWORD(v110) = v37;
    int v39 = *(unsigned __int8 *)(v38 + 16);
    int v40 = (uint64_t *)v38;
    if (v39 != 60)
    {
      if (v39 != 61) {
        continue;
      }
      int v40 = *(uint64_t **)(v38 - 64);
    }
    uint64_t v41 = *(void *)(v38 - 32);
    if ((*(_DWORD *)(*(void *)v41 + 8) & 0xFFFFFF00) != 0x500) {
      goto LABEL_178;
    }
    uint64_t v42 = *(void *)(*(void *)(*(void *)(v38 + 40) + 56) + 40);
    uint64_t v43 = (llvm::DataLayout *)(v42 + 272);
    uint64_t v46 = sub_1CB83544C(v42 + 272, *v40);
    if (v44 == 1) {
    unint64_t v47 = (unint64_t)(v46 + 7) >> 3;
    }
    if (v47 > 0x1000)
    {
      sub_1CC7A91C4(v38);
      *((unsigned char *)this + 28) = 1;
      goto LABEL_178;
    }
    uint64_t v48 = *(unsigned int *)(v42 + 512);
    uint64_t v49 = *(void *)(v42 + 504);
    if (v48)
    {
      uint64_t v49 = *(void *)(v42 + 504);
      unint64_t v50 = *(unsigned int *)(v42 + 512);
      do
      {
        unint64_t v51 = v50 >> 1;
        uint64_t v52 = v49 + 16 * (v50 >> 1);
        unsigned int v53 = *(_DWORD *)(v52 + 8);
        uint64_t v54 = v52 + 16;
        v50 += ~(v50 >> 1);
        if (v53 < 5) {
          uint64_t v49 = v54;
        }
        else {
          unint64_t v50 = v51;
        }
      }
      while (v50);
    }
    if (v49 == *(void *)(v42 + 504) + 16 * v48 || *(_DWORD *)(v49 + 8) != 5) {
      uint64_t v49 = *(void *)(v42 + 504);
    }
    unsigned int v105 = *(_DWORD *)(v49 + 12);
    if (v105 > 0x40) {
      operator new[]();
    }
    v104 = 0;
    unint64_t v55 = (4096 - v47);
    do
    {
      uint64_t v56 = v105;
      if (v105 < 0x41)
      {
        unint64_t v57 = v104;
        if ((((void)v104 << -(char)v105) & 0x8000000000000000) != 0) {
          goto LABEL_115;
        }
        goto LABEL_92;
      }
      v89 = v104;
      unsigned int v90 = v105 - 64;
      if ((v104[(v105 - 1) >> 6] >> (v105 - 1)))
      {
        if (v90 - llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v104) < 0xFFFFFFBF) {
          goto LABEL_115;
        }
LABEL_162:
        if ((*v89 & 0x8000000000000000) != 0) {
          goto LABEL_115;
        }
        int64_t v92 = (unint64_t)(v56 + 63) >> 6;
        goto LABEL_164;
      }
      int v91 = 0;
      int64_t v92 = ((unint64_t)v105 + 63) >> 6;
      uint64_t v93 = v92;
      do
      {
        BOOL v94 = v93-- < 1;
        if (v94) {
          break;
        }
        unint64_t v95 = v104[v93];
        v91 += __clz(v95);
      }
      while (!v95);
      unsigned int v96 = v105 | 0xFFFFFFC0;
      if ((v105 & 0x3F) == 0) {
        unsigned int v96 = 0;
      }
      if (v90 - v91 - v96 >= 0xFFFFFFBF) {
        goto LABEL_162;
      }
LABEL_164:
      int v97 = 0;
      do
      {
        BOOL v94 = v92-- < 1;
        if (v94) {
          break;
        }
        unint64_t v98 = v89[v92];
        v97 += __clz(v98);
      }
      while (!v98);
      int v99 = v56 | 0xFFFFFFC0;
      if ((v56 & 0x3F) == 0) {
        int v99 = 0;
      }
      if ((v56 - v97 - v99) > 0x40) {
        goto LABEL_115;
      }
      unint64_t v57 = (void *)*v89;
LABEL_92:
      if ((unint64_t)v57 <= v55)
      {
        uint64_t v59 = *((void *)this + 4);
        uint64_t v58 = *((void *)this + 5);
        if (v58 == v59)
        {
          uint64_t v60 = *((unsigned int *)this + 13);
          BOOL v61 = (void *)(v58 + 8 * v60);
          if (v60)
          {
            uint64_t v62 = 0;
            uint64_t v63 = 8 * v60;
            while (*(void *)(v58 + v62) != v41)
            {
              v62 += 8;
              if (v63 == v62) {
                goto LABEL_111;
              }
            }
            BOOL v61 = (void *)(v58 + v62);
          }
LABEL_111:
          uint64_t v59 = *((void *)this + 5);
        }
        else
        {
          uint64_t v64 = *((unsigned int *)this + 12);
          int v65 = v64 - 1;
          unsigned int v66 = (v64 - 1) & ((v41 >> 4) ^ (v41 >> 9));
          BOOL v61 = (void *)(v58 + 8 * v66);
          uint64_t v67 = *v61;
          if (*v61 == -1)
          {
            v68 = 0;
LABEL_148:
            if (v68) {
              BOOL v61 = v68;
            }
            if (*v61 != v41) {
              BOOL v61 = (void *)(v58 + 8 * v64);
            }
          }
          else
          {
            v68 = 0;
            int v69 = 1;
            while (v67 != v41)
            {
              if (v68) {
                BOOL v70 = 0;
              }
              else {
                BOOL v70 = v67 == -2;
              }
              if (v70) {
                v68 = v61;
              }
              unsigned int v71 = v66 + v69++;
              unsigned int v66 = v71 & v65;
              BOOL v61 = (void *)(v58 + 8 * (v71 & v65));
              uint64_t v67 = *v61;
              if (*v61 == -1) {
                goto LABEL_148;
              }
            }
          }
        }
        BOOL v34 = v58 == v59;
        __int16 v72 = (char *)this + 48;
        if (v34) {
          __int16 v72 = (char *)this + 52;
        }
        if (v61 != (void *)(v58 + 8 * *(unsigned int *)v72)) {
          goto LABEL_175;
        }
      }
LABEL_115:
      int v73 = *(unsigned __int8 *)(v41 + 16);
      if (v73 != 62)
      {
        if (v73 != 5) {
          goto LABEL_133;
        }
        int v74 = *(unsigned __int16 *)(v41 + 18);
        if (v74 != 34) {
          goto LABEL_141;
        }
      }
      int v75 = *(_DWORD *)(v41 + 20);
      if ((v75 & 0x40000000) != 0)
      {
        uint64_t v77 = *(void *)(v41 - 8);
        uint64_t v76 = v75 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v76 = v75 & 0x7FFFFFF;
        uint64_t v77 = v41 - 32 * v76;
      }
      v112 = v114;
      uint64_t v113 = 0x600000000;
      unint64_t v78 = 32 * v76 - 32;
      if (v78 >= 0xC1) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v79 = (llvm::Constant **)v114;
      if (v76 != 1)
      {
        v80 = (uint64_t *)(v77 + 32);
        v81 = v114;
        uint64_t v82 = 32 * v76 - 32;
        do
        {
          uint64_t v83 = *v80;
          v80 += 4;
          *v81++ = v83;
          v82 -= 32;
        }
        while (v82);
        v79 = (llvm::Constant **)v112;
      }
      LODWORD(v113) = v78 >> 5;
      BOOL v84 = *(unsigned char *)(v41 + 16) != 62 || v41 == 0;
      uint64_t v85 = 64;
      if (v84) {
        uint64_t v85 = 24;
      }
      int v86 = llvm::GEPOperator::accumulateConstantOffset(*(void *)(v41 + v85), v79, (v78 >> 5), v43, (llvm::APInt *)&v104, 0, v45);
      if (v112 == v114)
      {
        if (!v86) {
          break;
        }
        goto LABEL_132;
      }
      free(v112);
      if (!v86) {
        break;
      }
LABEL_132:
      int v73 = *(unsigned __int8 *)(v41 + 16);
LABEL_133:
      if (v73 > 76)
      {
        if (v73 != 77)
        {
          if (v73 != 78) {
            break;
          }
          v87 = (uint64_t *)(v41 - 32);
          goto LABEL_145;
        }
      }
      else if (v73 == 5)
      {
        int v74 = *(unsigned __int16 *)(v41 + 18);
        if (v74 != 34)
        {
LABEL_141:
          if (v74 != 49) {
            break;
          }
        }
      }
      else if (v73 != 62)
      {
        break;
      }
      int v88 = *(_DWORD *)(v41 + 20);
      if ((v88 & 0x40000000) != 0) {
        v87 = *(uint64_t **)(v41 - 8);
      }
      else {
        v87 = (uint64_t *)(v41 - 32 * (v88 & 0x7FFFFFF));
      }
LABEL_145:
      uint64_t v41 = *v87;
    }
    while (*v87);
    sub_1CC7A91C4(v38);
    *((unsigned char *)this + 28) = 1;
    LODWORD(v56) = v105;
LABEL_175:
    if (v56 >= 0x41 && v104) {
      MEMORY[0x1D25D9CB0](v104, 0x1000C8000313F17);
    }
LABEL_178:
    unsigned int v37 = v110;
  }
  while (v37);
LABEL_182:
  int v100 = *((unsigned __int8 *)this + 28);
  if (v106 != v108) {
    free(v106);
  }
  if (v109 != v111) {
    free(v109);
  }
  return v100 != 0;
}

void sub_1CC7A91C4(uint64_t a1)
{
  v93[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 56);
  int v3 = *(unsigned __int8 *)(a1 + 16);
  int v4 = (uint64_t *)a1;
  if (v3 != 60)
  {
    if (v3 != 61) {
      return;
    }
    int v4 = *(uint64_t **)(a1 - 64);
  }
  uint64_t v6 = (llvm::Value **)(a1 - 32);
  int v5 = *(llvm::Value **)(a1 - 32);
  uint64_t v8 = sub_1CB83544C(*(void *)(v2 + 40) + 272, *v4);
  if (v7 == 1) {
  uint64_t v9 = *(void *)(v2 + 40);
  }
  uint64_t v10 = *(uint64_t **)v9;
  unint64_t v78 = v80;
  uint64_t v79 = 0x200000000;
  uint64_t v83 = v10;
  BOOL v84 = &v92;
  uint64_t v85 = v93;
  uint64_t v86 = 0;
  int v87 = 0;
  __int16 v88 = 512;
  char v89 = 7;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  int64_t v92 = &unk_1F2616E88;
  v93[0] = &unk_1F2617008;
  uint64_t v11 = *(void *)v5;
  unsigned int v12 = *((unsigned __int8 *)v5 + 16);
  if (v12 == 83)
  {
    for (uint64_t i = *(void **)(*((void *)v5 + 5) + 48); ; uint64_t i = (void *)i[1])
    {
      uint64_t v14 = i - 3;
      if (!i) {
        uint64_t v14 = 0;
      }
      if (*((unsigned char *)v14 + 16) != 83) {
        break;
      }
    }
    uint64_t v81 = i[2];
    uint64_t v82 = i;
    int v17 = (unsigned __int8 *)i[3];
    v73[0] = v17;
    if (!v17)
    {
      uint64_t v18 = 0;
      goto LABEL_26;
    }
    goto LABEL_79;
  }
  if (v12 < 0x1C)
  {
    uint64_t v15 = *(void *)(v2 + 80);
    if (v15) {
      uint64_t v16 = v15 - 24;
    }
    else {
      uint64_t v16 = 0;
    }
    sub_1CBF5385C((uint64_t)&v78, v16, *(void *)(v16 + 48));
    goto LABEL_27;
  }
  uint64_t v18 = 0;
  uint64_t v19 = *((void *)v5 + 4);
  if (v19) {
    BOOL v20 = v19 == *((void *)v5 + 5) + 40;
  }
  else {
    BOOL v20 = 1;
  }
  if (v20) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v19 - 24;
  }
  uint64_t v81 = *(void *)(v21 + 40);
  uint64_t v82 = (void *)(v21 + 24);
  int v17 = *(unsigned __int8 **)(v21 + 48);
  v73[0] = v17;
  if (v17)
  {
LABEL_79:
    llvm::MetadataTracking::track((uint64_t)v73, v17, 2);
    uint64_t v18 = v73[0];
  }
LABEL_26:
  sub_1CB8461A4((uint64_t)&v78, 0, v18);
  if (v73[0])
  {
    int v63 = *(unsigned __int8 *)v73[0];
    if ((v63 - 4) > 0x1E)
    {
      if ((v63 - 3) >= 0xFFFFFFFE) {
        uint64_t v66 = v73[0];
      }
      else {
        uint64_t v66 = 0;
      }
      if ((v63 - 3) < 0xFFFFFFFE)
      {
        if (v63 == 3) {
          *(void *)(v73[0] + 8) = 0;
        }
        goto LABEL_27;
      }
      unint64_t v65 = v66 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v73[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v73[0] + 12)) {
        goto LABEL_27;
      }
      uint64_t v64 = *(void *)(v73[0] + 16);
      if ((v64 & 4) == 0) {
        goto LABEL_27;
      }
      unint64_t v65 = v64 & 0xFFFFFFFFFFFFFFF8;
      if (!v65) {
        goto LABEL_27;
      }
    }
    int v75 = (const char *)v73;
    sub_1CC5FA668(v65 + 16, &v75);
  }
LABEL_27:
  unsigned int v22 = *(_DWORD *)(v11 + 8);
  if ((v22 & 0xFE) == 0x12) {
    unsigned int v22 = *(_DWORD *)(**(void **)(v11 + 16) + 8);
  }
  if (v22 < 0x100) {
    goto LABEL_38;
  }
  unsigned int v23 = v22 >> 8;
  uint64_t v24 = *(unsigned int *)(v9 + 512);
  uint64_t v25 = *(void *)(v9 + 504);
  if (v24)
  {
    uint64_t v25 = *(void *)(v9 + 504);
    unint64_t v26 = *(unsigned int *)(v9 + 512);
    do
    {
      unint64_t v27 = v26 >> 1;
      uint64_t v28 = v25 + 16 * (v26 >> 1);
      unsigned int v29 = *(_DWORD *)(v28 + 8);
      uint64_t v30 = v28 + 16;
      v26 += ~(v26 >> 1);
      if (v29 < v23) {
        uint64_t v25 = v30;
      }
      else {
        unint64_t v26 = v27;
      }
    }
    while (v26);
  }
  if (v25 == *(void *)(v9 + 504) + 16 * v24 || *(_DWORD *)(v25 + 8) != v23) {
LABEL_38:
  }
    uint64_t v25 = *(void *)(v9 + 504);
  uint64_t v31 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v11, (llvm::LLVMContext *)*(unsigned int *)(v25 + 4));
  uint64_t v32 = (uint64_t)v31;
  if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
  {
    uint64_t v67 = (llvm::Type *)*(unsigned int *)(v11 + 32);
    if (*(_DWORD *)(v11 + 8) == 19) {
      llvm::ScalableVectorType::get(v31, v67);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v31, v67);
    }
    uint64_t v32 = v68;
  }
  unint64_t v33 = v8 + 7;
  __int16 v74 = 257;
  if (*(void *)v5 != v32)
  {
    if (*((unsigned __int8 *)v5 + 16) <= 0x14u)
    {
      int v5 = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, llvm::Value *, uint64_t))*v84 + 28))(v84, 47, v5, v32);
      if (v5) {
        BOOL v36 = *((unsigned __int8 *)v5 + 16) >= 0x1Cu;
      }
      else {
        BOOL v36 = 0;
      }
      if (v36)
      {
        (*(void (**)(void *, llvm::Value *, void *, uint64_t, void *))(*v85 + 16))(v85, v5, v73, v81, v82);
        if (v79)
        {
          int v69 = (llvm::MDNode **)v78;
          BOOL v70 = (llvm::MDNode **)((char *)v78 + 16 * v79);
          do
          {
            llvm::Instruction::setMetadata(v5, *(_DWORD *)v69, v69[1]);
            v69 += 2;
          }
          while (v69 != v70);
        }
      }
    }
    else
    {
      __int16 v77 = 257;
      int v5 = llvm::CastInst::Create(47, (uint64_t)v5, v32, &v75, 0);
      (*(void (**)(void *, llvm::Value *, void *, uint64_t, void *))(*v85 + 16))(v85, v5, v73, v81, v82);
      if (v79)
      {
        BOOL v34 = (llvm::MDNode **)v78;
        unsigned int v35 = (llvm::MDNode **)((char *)v78 + 16 * v79);
        do
        {
          llvm::Instruction::setMetadata(v5, *(_DWORD *)v34, v34[1]);
          v34 += 2;
        }
        while (v34 != v35);
      }
    }
  }
  llvm::Intrinsic::getType(*(uint64_t **)v9, 2811, 0, 0);
  Type = (llvm::PointerType *)llvm::Intrinsic::getType(*(uint64_t **)v9, 2811, 0, 0);
  llvm::Module::getOrInsertFunction(v9, "llvm.agx3.ray.data.user.lowerbound", (const char *)0x22, Type, 0);
  int v39 = (uint64_t **)v38;
  if (v38) {
    uint64_t v38 = *(void *)(v38 + 24);
  }
  __int16 v77 = 257;
  int v40 = (llvm::Value *)sub_1CB845BAC((uint64_t *)&v78, (uint64_t **)v38, v39, 0, 0, (uint64_t)&v75, 0);
  llvm::Intrinsic::getType(*(uint64_t **)v9, 2812, 0, 0);
  uint64_t v41 = (llvm::PointerType *)llvm::Intrinsic::getType(*(uint64_t **)v9, 2812, 0, 0);
  llvm::Module::getOrInsertFunction(v9, "llvm.agx3.ray.data.user.upperbound", (const char *)0x22, v41, 0);
  uint64_t v43 = (uint64_t **)v42;
  if (v42) {
    uint64_t v42 = *(void *)(v42 + 24);
  }
  __int16 v77 = 257;
  uint64_t v45 = (llvm::Value *)sub_1CB845BAC((uint64_t *)&v78, (uint64_t **)v42, v43, 0, 0, (uint64_t)&v75, 0);
  if ((v33 >> 3) > 0x1000)
  {
    uint64_t v46 = (v33 >> 3);
    unint64_t v47 = *(llvm::ConstantInt **)(*v83 + 1960);
    unsigned int v48 = *(_DWORD *)(*v83 + 1968);
    unsigned int v76 = v48 >> 8;
    if (v48 >> 8 > 0x40) {
      operator new[]();
    }
    if (v48 <= 0xFF) {
      unint64_t v49 = 0;
    }
    else {
      unint64_t v49 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v48) + 63);
    }
    int v75 = (const char *)(v49 & v46);
    unint64_t v50 = llvm::ConstantInt::get(v47, (llvm::LLVMContext *)&v75, v44);
    if (v76 >= 0x41 && v75) {
      MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
    }
    __int16 v77 = 257;
    uint64_t v45 = sub_1CB84494C((uint64_t)&v78, (uint64_t)v45, (uint64_t)v50, (uint64_t)&v75, 0, 0);
  }
  __int16 v77 = 257;
  unint64_t v51 = sub_1CB845F20((uint64_t)&v78, 37, v5, (uint64_t)v45, (uint64_t)&v75);
  __int16 v77 = 257;
  Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v78, v51, v5, v45, (const llvm::Twine *)&v75, 0);
  __int16 v77 = 257;
  unsigned int v53 = sub_1CB845F20((uint64_t)&v78, 35, Select, (uint64_t)v40, (uint64_t)&v75);
  __int16 v77 = 257;
  uint64_t v54 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v78, v53, Select, v40, (const llvm::Twine *)&v75, 0);
  unint64_t v55 = v54;
  __int16 v74 = 257;
  if (*(void *)v54 != v11)
  {
    if (*((unsigned __int8 *)v54 + 16) <= 0x14u)
    {
      uint64_t v58 = (*((uint64_t (**)(void **, uint64_t, llvm::Value *, uint64_t))*v84 + 28))(v84, 48, v54, v11);
      unint64_t v55 = (llvm::Value *)v58;
      if (v58)
      {
        if (*(unsigned __int8 *)(v58 + 16) >= 0x1Cu)
        {
          (*(void (**)(void *, uint64_t, void *, uint64_t, void *))(*v85 + 16))(v85, v58, v73, v81, v82);
          if (v79)
          {
            unsigned int v71 = (llvm::MDNode **)v78;
            __int16 v72 = (llvm::MDNode **)((char *)v78 + 16 * v79);
            do
            {
              llvm::Instruction::setMetadata(v55, *(_DWORD *)v71, v71[1]);
              v71 += 2;
            }
            while (v71 != v72);
          }
        }
      }
    }
    else
    {
      __int16 v77 = 257;
      unint64_t v55 = llvm::CastInst::Create(48, (uint64_t)v54, v11, &v75, 0);
      (*(void (**)(void *, llvm::Value *, void *, uint64_t, void *))(*v85 + 16))(v85, v55, v73, v81, v82);
      if (v79)
      {
        uint64_t v56 = (llvm::MDNode **)v78;
        unint64_t v57 = (llvm::MDNode **)((char *)v78 + 16 * v79);
        do
        {
          llvm::Instruction::setMetadata(v55, *(_DWORD *)v56, v56[1]);
          v56 += 2;
        }
        while (v56 != v57);
      }
    }
  }
  if (v78 != v80) {
    free(v78);
  }
  if (*v6)
  {
    **(void **)(a1 - 16) = *(void *)(a1 - 24);
    uint64_t v59 = *(void *)(a1 - 24);
    if (v59) {
      *(void *)(v59 + 16) = *(void *)(a1 - 16);
    }
  }
  char *v6 = v55;
  if (v55)
  {
    uint64_t v62 = *((void *)v55 + 1);
    BOOL v61 = (llvm::Value ***)((char *)v55 + 8);
    uint64_t v60 = v62;
    *(void *)(a1 - 24) = v62;
    if (v62) {
      *(void *)(v60 + 16) = a1 - 24;
    }
    *(void *)(a1 - 16) = v61;
    *BOOL v61 = v6;
  }
}

void sub_1CC7A9AD4(uint64_t a1)
{
}

void sub_1CC7A9B7C()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t sub_1CC7A9CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (unsigned char *)(a1 + 4888);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDB310;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261E470;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a1 + 80;
  *(void *)(a1 + 72) = 0x1000000000;
  uint64_t v7 = 152;
  *(void *)(a1 + 144) = 1;
  do
  {
    *(void *)(a1 + v7) = -4096;
    v7 += 16;
  }
  while (v7 != 408);
  *(void *)(a1 + 408) = 1;
  for (uint64_t i = 416; i != 928; i += 32)
    *(void *)(a1 + i) = -4096;
  *(void *)(a1 + 928) = a1 + 944;
  *(void *)(a1 + 936) = 0x2000000000;
  *(void *)(a1 + 2480) = a1 + 2496;
  *(void *)(a1 + 2488) = 0x2000000000;
  *(void *)(a1 + 4544) = a1 + 4560;
  *(void *)(a1 + 4552) = 0x600000000;
  *(_DWORD *)(a1 + 4608) = 0;
  *(void *)(a1 + 4616) = 0;
  *(_OWORD *)(a1 + 4624) = 0u;
  *(_DWORD *)(a1 + 4640) = 0;
  *(_OWORD *)(a1 + 4648) = 0u;
  *(_DWORD *)(a1 + 4664) = 0;
  *(_OWORD *)(a1 + 4672) = 0u;
  *(_DWORD *)(a1 + 4688) = 0;
  uint64_t v9 = -64;
  *(void *)(a1 + 4696) = 1;
  do
  {
    *(void *)(a1 + v9 + 4768) = -4096;
    v9 += 16;
  }
  while (v9);
  *(void *)(a1 + 4768) = a1 + 4800;
  *(void *)(a1 + 4776) = a1 + 4800;
  *(void *)(a1 + 4784) = 8;
  *(_DWORD *)(a1 + 4792) = 0;
  *(_DWORD *)(a1 + 4880) = 128;
  uint64_t v10 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  *(void *)(a1 + 4864) = v10;
  *(void *)(a1 + 4872) = 0;
  p_atomic_ullong PassRegistry = 2;
  unsigned int v35 = 0;
  uint64_t v36 = -4096;
  uint64_t v37 = 0;
  unint64_t v33 = (uint64_t (*)())&unk_1F2615EC8;
  uint64_t v11 = *(unsigned int *)(a1 + 4880);
  if (v11)
  {
    uint64_t v12 = 0;
    uint64_t v13 = v11 << 6;
    uint64_t v14 = v10 + 16;
    do
    {
      uint64_t v15 = p_PassRegistry;
      uint64_t v16 = v36;
      *(v14 - 1) = p_PassRegistry & 6;
      void *v14 = 0;
      v14[1] = v16;
      if (v16 != -4096 && v16 != -8192 && v16 != 0)
      {
        void *v14 = *(void *)(v15 & 0xFFFFFFFFFFFFFFF8);
        *(void *)(v15 & 0xFFFFFFFFFFFFFFF8) = v14 - 1;
        *(v14 - 1) = v15 & 0xFFFFFFFFFFFFFFFELL;
        if (*v14) {
          *(void *)void *v14 = *(void *)*v14 & 7 | (unint64_t)(v10 + 16);
        }
        uint64_t v12 = v37;
      }
      *(v14 - 2) = &unk_1F2615EC8;
      v14[2] = v12;
      v14 += 8;
      v10 += 64;
      v13 -= 64;
    }
    while (v13);
    if (v36 != -8192 && v36 != -4096 && v36)
    {
      unint64_t v20 = p_PassRegistry & 0xFFFFFFFFFFFFFFF8;
      *(void *)(p_PassRegistry & 0xFFFFFFFFFFFFFFF8) = v35;
      if (v35)
      {
        unint64_t *v35 = *v35 & 7 | v20;
      }
      else
      {
        uint64_t v21 = v36;
        unsigned int v22 = ***(int32x2_t ****)v36;
        unint64_t v23 = (unint64_t)v22[303];
        if (v23 <= v20)
        {
          uint64_t v24 = v22[305].u32[0];
          if (v23 + 16 * v24 > v20)
          {
            unsigned int v25 = v24 - 1;
            LODWORD(v26) = v25 & ((v36 >> 4) ^ (v36 >> 9));
            unint64_t v27 = (uint64_t *)(v23 + 16 * v26);
            uint64_t v28 = *v27;
            if (v36 == *v27)
            {
LABEL_33:
              uint64_t *v27 = -8192;
              v22[304] = vadd_s32(v22[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v21 = v36;
            }
            else
            {
              int v29 = 1;
              while (v28 != -4096)
              {
                int v30 = v26 + v29++;
                uint64_t v26 = v30 & v25;
                uint64_t v28 = *(void *)(v23 + 16 * v26);
                if (v36 == v28)
                {
                  unint64_t v27 = (uint64_t *)(v23 + 16 * v26);
                  goto LABEL_33;
                }
              }
            }
            *(unsigned char *)(v21 + 17) &= ~1u;
          }
        }
      }
    }
  }
  unsigned char *v6 = 0;
  v6[24] = 0;
  *(_OWORD *)(a1 + 4928) = 0u;
  *(_DWORD *)(a1 + 4944) = 0;
  *(void *)(a1 + 4960) = 0;
  *(void *)(a1 + 4952) = 0;
  *(_DWORD *)(a1 + 4968) = 0;
  *(void *)(a1 + 4976) = a1 + 5008;
  *(void *)(a1 + 4984) = a1 + 5008;
  *(void *)(a1 + 4992) = 4;
  *(_DWORD *)(a1 + 5000) = 0;
  *(void *)(a1 + 5040) = a1 + 5056;
  *(void *)(a1 + 5048) = 0x200000000;
  *(void *)(a1 + 5216) = a1 + 5232;
  *(void *)(a1 + 5224) = 0x200000000;
  sub_1CB93141C(a1 + 5392, a2);
  uint64_t v18 = (llvm::PassRegistry *)sub_1CB93141C(a1 + 5424, a3);
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v18);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB318, memory_order_acquire) != -1)
  {
    unint64_t v33 = sub_1CC7A9AD4;
    p_atomic_ullong PassRegistry = (uint64_t)&PassRegistry;
    uint64_t v32 = &v33;
    std::__call_once(&qword_1EBCDB318, &v32, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC7AA128()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CC7AA274(uint64_t a1)
{
  *(void *)a1 = &unk_1F261E470;
  uint64_t v2 = a1 + 5424;
  uint64_t v3 = *(void *)(a1 + 5448);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 5416);
  if (v4 == a1 + 5392)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 5392) + 32))(a1 + 5392);
  }
  else if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  sub_1CC7AF5D4(*(void *)(a1 + 5216), *(void *)(a1 + 5216) + 80 * *(unsigned int *)(a1 + 5224));
  int v5 = *(void **)(a1 + 5216);
  if (v5 != (void *)(a1 + 5232)) {
    free(v5);
  }
  sub_1CC7AF5D4(*(void *)(a1 + 5040), *(void *)(a1 + 5040) + 80 * *(unsigned int *)(a1 + 5048));
  uint64_t v6 = *(void **)(a1 + 5040);
  if (v6 != (void *)(a1 + 5056)) {
    free(v6);
  }
  uint64_t v7 = *(void **)(a1 + 4984);
  if (v7 != *(void **)(a1 + 4976)) {
    free(v7);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 4952), 8);
  sub_1CC13D5A8(a1 + 4928);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 4928), 8);
  if (*(unsigned char *)(a1 + 4912))
  {
    sub_1CC009394(a1 + 4888);
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 4888), 8);
    *(unsigned char *)(a1 + 4912) = 0;
  }
  sub_1CC4D021C((void *)(a1 + 4864));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 4864), 8);
  uint64_t v8 = *(void **)(a1 + 4776);
  if (v8 != *(void **)(a1 + 4768)) {
    free(v8);
  }
  if ((*(unsigned char *)(a1 + 4696) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 4704), 8);
  }
  uint64_t v9 = *(unsigned int *)(a1 + 4688);
  uint64_t v10 = *(void *)(a1 + 4672);
  if (v9)
  {
    uint64_t v11 = 120 * v9;
    uint64_t v12 = (void *)(v10 + 104);
    do
    {
      if ((*(v12 - 13) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v13 = (void *)*(v12 - 2);
        if (v12 != v13) {
          free(v13);
        }
        if ((*(unsigned char *)(v12 - 5) & 1) == 0) {
          MEMORY[0x1D25D9CD0](*(v12 - 4), 8);
        }
        uint64_t v14 = (char *)*(v12 - 9);
        if (v12 - 7 != (void *)v14) {
          free(v14);
        }
        if ((*(unsigned char *)(v12 - 12) & 1) == 0) {
          MEMORY[0x1D25D9CD0](*(v12 - 11), 8);
        }
      }
      v12 += 15;
      v11 -= 120;
    }
    while (v11);
    uint64_t v10 = *(void *)(a1 + 4672);
  }
  MEMORY[0x1D25D9CD0](v10, 8);
  sub_1CC13D5A8(a1 + 4648);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 4648), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 4624), 8);
  uint64_t v15 = *(void **)(a1 + 4544);
  if (v15 != (void *)(a1 + 4560)) {
    free(v15);
  }
  sub_1CD63D720((char **)(a1 + 2480));
  sub_1CD63D7B8(a1 + 64);

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC7AA58C(uint64_t a1)
{
  sub_1CC7AA274(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC7AA5C4(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1CC7AA658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  if (!byte_1EBCDB3A0)
  {
    uint64_t v7 = v5;
    uint64_t v8 = (void *)v4;
    uint64_t v9 = *(void *)(v4 + 5416);
    uint64_t v21 = v8;
    if (!v9
      || (v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 48))(v9, v5), uint64_t v8 = v21, (v10 & 1) == 0))
    {
      uint64_t v11 = 2;
      uint64_t v12 = v7 + 72;
      do
      {
        uint64_t v12 = *(void *)(v12 + 8);
        --v11;
      }
      while (v12 != v7 + 72);
      if (v11)
      {
        v8[4] = v7;
        *((_DWORD *)v8 + 10) = -1;
        uint64_t v13 = (uint64_t *)v8[1];
        uint64_t v14 = *v13;
        uint64_t v15 = v13[1];
        if (v14 == v15)
        {
LABEL_11:
          uint64_t v16 = 0;
        }
        else
        {
          while (*(_UNKNOWN **)v14 != &llvm::DominatorTreeWrapperPass::ID)
          {
            v14 += 16;
            if (v14 == v15) {
              goto LABEL_11;
            }
          }
          uint64_t v16 = *(void *)(v14 + 8);
        }
        v21[6] = (*(uint64_t (**)(uint64_t, void *))(*(void *)v16 + 96))(v16, &llvm::DominatorTreeWrapperPass::ID)+ 32;
        int v17 = (uint64_t *)v21[1];
        uint64_t v18 = *v17;
        uint64_t v19 = v17[1];
        if (v18 == v19)
        {
LABEL_16:
          uint64_t v20 = 0;
        }
        else
        {
          while (*(_UNKNOWN **)v18 != &llvm::LoopInfoWrapperPass::ID)
          {
            v18 += 16;
            if (v18 == v19) {
              goto LABEL_16;
            }
          }
          uint64_t v20 = *(void *)(v18 + 8);
        }
        v21[7] = (*(uint64_t (**)(uint64_t, void *))(*(void *)v20 + 96))(v20, &llvm::LoopInfoWrapperPass::ID)+ 32;
        sub_1CD10FEF8(v7);
      }
    }
  }
  return 0;
}

void *sub_1CC7AF35C(void *a1, unsigned int a2)
{
  if (a2 <= 0x10)
  {
    *a1 = 1;
LABEL_3:
    uint64_t result = a1 + 1;
    uint64_t v4 = a1 + 33;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  uint64_t v5 = a2;
  uint64_t result = operator new(16 * a2, (std::align_val_t)8uLL);
  a1[1] = result;
  a1[2] = v5;
  int v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if (v6) {
    goto LABEL_3;
  }
  uint64_t v4 = &result[2 * v5];
  do
  {
LABEL_4:
    *uint64_t result = -4096;
    result += 2;
  }
  while (result != v4);
  return result;
}

char *sub_1CC7AF3E0(char *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *((_DWORD *)result + 4) = v4;
    uint64_t result = (char *)operator new((unint64_t)v4 << 6, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = *((unsigned int *)v2 + 4);
    if (v5)
    {
      uint64_t v6 = v5 << 6;
      uint64_t v7 = result + 16;
      do
      {
        *(v7 - 1) = 2;
        void *v7 = 0;
        v7[1] = -4096;
        v7[2] = 0;
        *(v7 - 2) = &unk_1F2615EC8;
        v7 += 8;
        result += 64;
        v6 -= 64;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    *((_DWORD *)result + 4) = 0;
  }
  return result;
}

void *sub_1CC7AF4A4(void *result)
{
  result[1] = 0;
  v10[0] = 2;
  v10[1] = 0;
  uint64_t v11 = -4096;
  uint64_t v12 = 0;
  uint64_t v1 = *((unsigned int *)result + 4);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t result = v10;
    uint64_t v3 = *v2;
    uint64_t v4 = v1 << 6;
    uint64_t v5 = (void *)(*v2 + 16);
    do
    {
      uint64_t v6 = v10[0] & 6;
      *(v5 - 1) = v6;
      void *v5 = 0;
      uint64_t v7 = v11;
      v5[1] = v11;
      if (v7 != -4096 && v7 != -8192 && v7 != 0)
      {
        unint64_t v9 = v10[0] & 0xFFFFFFFFFFFFFFF8;
        void *v5 = *(void *)(v10[0] & 0xFFFFFFFFFFFFFFF8);
        *(void *)unint64_t v9 = v5 - 1;
        *(v5 - 1) = v9 | v6;
        if (*v5) {
          *(void *)void *v5 = *(void *)*v5 & 7 | (v3 + 16);
        }
      }
      *(v5 - 2) = &unk_1F2615EC8;
      void v5[2] = v12;
      v5 += 8;
      v3 += 64;
      v4 -= 64;
    }
    while (v4);
    if (v11 != -8192 && v11 != -4096)
    {
      if (v11) {
        return llvm::ValueHandleBase::RemoveFromUseList(v10);
      }
    }
  }
  return result;
}

void sub_1CC7AF5D4(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v4 = *(void **)(v2 - 40);
      if (v4 != *(void **)(v2 - 48)) {
        free(v4);
      }
      uint64_t v5 = *(void **)(v2 - 80);
      if ((void *)(v2 - 64) != v5) {
        free(v5);
      }
      v2 -= 80;
    }
    while (v2 != a1);
  }
}

void sub_1CC7AF634(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = a1 + 8;
    uint64_t v1 = 16;
  }
  else
  {
    uint64_t v1 = *(unsigned int *)(a1 + 16);
    if (!v1) {
      return;
    }
    uint64_t v2 = *(void *)(a1 + 8);
  }
  uint64_t v3 = 32 * v1;
  uint64_t v4 = (void *)(v2 + 24);
  do
  {
    uint64_t v5 = *(v4 - 3);
    if (v5 != -4096 && v5 != -8192)
    {
      uint64_t v6 = (void *)*(v4 - 2);
      if (v4 != v6)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v3;
        free(v6);
        uint64_t v4 = v7;
        uint64_t v3 = v8;
      }
    }
    v4 += 4;
    v3 -= 32;
  }
  while (v3);
}

void sub_1CC7AF6B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  v21[24] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = v21;
  uint64_t v20 = 0x800000000;
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t v17 = *v5;
      long long v18 = *(_OWORD *)(v17 + 8);
      unint64_t v6 = sub_1CD41C4F0((uint64_t)&v19, (unint64_t)&v17, 1);
      uint64_t v7 = (char *)v19 + 24 * v20;
      long long v8 = *(_OWORD *)v6;
      *((void *)v7 + 2) = *(void *)(v6 + 16);
      *(_OWORD *)uint64_t v7 = v8;
      BOOL v9 = __CFADD__(v20, 1);
      unsigned int v10 = v20 + 1;
      LODWORD(v20) = v20 + 1;
      if (!v9)
      {
        do
        {
          uint64_t v11 = (char *)v19 + 24 * v10;
          uint64_t v12 = (uint64_t *)*((void *)v11 - 2);
          if (v12 == *((uint64_t **)v11 - 1))
          {
            uint64_t v17 = *((void *)v11 - 3);
            uint64_t v13 = *(void *)(a3 + 24);
            if (!v13)
            {
              sub_1CB920400();
              sub_1CC7AF878();
              return;
            }
            (*(void (**)(uint64_t, uint64_t *))(*(void *)v13 + 48))(v13, &v17);
            unsigned int v10 = v20 - 1;
          }
          else
          {
            *((void *)v11 - 2) = v12 + 1;
            uint64_t v17 = *v12;
            long long v18 = *(_OWORD *)(*v12 + 8);
            unint64_t v14 = sub_1CD41C4F0((uint64_t)&v19, (unint64_t)&v17, 1);
            uint64_t v15 = (char *)v19 + 24 * v20;
            long long v16 = *(_OWORD *)v14;
            *((void *)v15 + 2) = *(void *)(v14 + 16);
            *(_OWORD *)uint64_t v15 = v16;
            unsigned int v10 = v20 + 1;
          }
          LODWORD(v20) = v10;
        }
        while (v10);
      }
      ++v5;
    }
    while (v5 != a2);
    if (v19 != v21) {
      free(v19);
    }
  }
}

void sub_1CC7AF878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = a3;
  uint64_t v4 = a1;
  v940[8] = *MEMORY[0x1E4F143B8];
  v865 = (unsigned char *)(a1 + 4912);
  if (a3)
  {
    v912 = 0;
    if (sub_1CC7B58C8(a1 + 144, a3, &v912))
    {
      uint64_t v5 = v912;
    }
    else
    {
      if (*(unsigned char *)(v4 + 144))
      {
        uint64_t v850 = a1 + 152;
        uint64_t v851 = 16;
      }
      else
      {
        uint64_t v850 = *(void *)(a1 + 152);
        uint64_t v851 = *(unsigned int *)(a1 + 160);
      }
      uint64_t v5 = (_DWORD *)(v850 + 16 * v851);
      uint64_t v4 = a1;
      unsigned int v3 = a3;
    }
    unsigned int v6 = v5[2];
  }
  else
  {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = *(unsigned int *)(v7 + 4 * v6);
  unsigned int v9 = v6 + 1;
  unsigned int v10 = (int *)(v7 + 4 * v9);
  if (v9 >= *(_DWORD *)(v4 + 72)) {
    uint64_t v11 = (int *)(v4 + 936);
  }
  else {
    uint64_t v11 = v10;
  }
  int v885 = *v11;
  v915 = v917;
  uint64_t v916 = 0x1000000000;
  v912 = v914;
  v914[0] = v8;
  uint64_t v913 = 0x1000000001;
  v920 = &v921.u64[1];
  v921.i64[0] = 0x1000000000;
  uint64_t v929 = 0;
  v928 = 0;
  v927 = &v928;
  unsigned int v12 = 1;
  do
  {
    while (1)
    {
      uint64_t v13 = v912;
      unint64_t v14 = (char *)v912 + 8 * v12;
      unsigned int v15 = *((_DWORD *)v14 - 2);
      uint64_t v16 = *(void *)(a1 + 928);
      uint64_t v17 = *(v14 - 4);
      uint64_t v18 = v16 + 48 * v15;
      if (*(_DWORD *)(v18 + 32) == v17) {
        break;
      }
      uint64_t v19 = *(void *)(v18 + 24);
      uint64_t v20 = *(unsigned int *)(v19 + 4 * v17);
      LODWORD(v909) = *(_DWORD *)(v19 + 4 * v17);
      *(v14 - 4) = v17 + 1;
      if (v929)
      {
        for (uint64_t i = v928; i; uint64_t i = (void *)*i)
        {
          unsigned int v22 = *((_DWORD *)i + 7);
          if (v20 >= v22)
          {
            if (v22 >= v20) {
              goto LABEL_29;
            }
            ++i;
          }
        }
      }
      else if (v921.i32[0])
      {
        unint64_t v23 = v920;
        uint64_t v24 = 4 * v921.u32[0];
        while (*v23 != v20)
        {
          ++v23;
          v24 -= 4;
          if (!v24) {
            goto LABEL_27;
          }
        }
        if (v24) {
          goto LABEL_29;
        }
      }
LABEL_27:
      if (v12 >= HIDWORD(v913)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v13[v12] = v20;
      LODWORD(v913) = v913 + 1;
LABEL_29:
      sub_1CC7527EC((uint64_t)&v920, (unsigned int *)&v909);
      unsigned int v12 = v913;
      if (!v913) {
        goto LABEL_33;
      }
    }
    if (v916 >= (unint64_t)HIDWORD(v916)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v915 + v916) = *(void *)(v16 + 48 * v15 + 16);
    LODWORD(v916) = v916 + 1;
    unsigned int v12 = v913 - 1;
    LODWORD(v913) = v12;
  }
  while (v12);
LABEL_33:
  sub_1CB833A08((uint64_t)&v927, v928);
  if (v920 != &v921.u64[1]) {
    free(v920);
  }
  uint64_t v25 = a1;
  if (v912 != v914) {
    free(v912);
  }
  uint64_t v26 = v916;
  if (v916)
  {
    unint64_t v27 = (char *)v915 + 8 * v916 - 8;
    if (v915 < v27)
    {
      uint64_t v28 = (char *)v915 + 8;
      do
      {
        uint64_t v29 = *((void *)v28 - 1);
        *((void *)v28 - 1) = *(void *)v27;
        *(void *)unint64_t v27 = v29;
        v27 -= 8;
        BOOL v89 = v28 >= v27;
        v28 += 8;
      }
      while (!v89);
    }
  }
  v855 = (void *)(a1 + 4648);
  v880 = (void *)(a1 + 4672);
  if (v8 != v885)
  {
    while (1)
    {
      int v30 = v8;
      uint64_t v31 = *(void *)(v25 + 2480);
      uint64_t v32 = sub_1CC7B5BD0((uint64_t)v880, (uint64_t *)(*(void *)(v25 + 928) + 48 * v8 + 16));
      uint64_t v33 = v31 + ((unint64_t)v8 << 6);
      uint64_t v34 = *(unsigned int *)(v33 + 16);
      if (v34)
      {
        unsigned int v35 = *(unsigned int **)(v33 + 8);
        uint64_t v36 = &v35[2 * v34];
        do
        {
          uint64_t v37 = (void *)(*(void *)(a1 + 928) + 48 * *v35 + 16);
          if (*(unsigned char *)v32)
          {
            int v38 = 2;
            uint64_t v39 = v32 + 8;
          }
          else
          {
            int v38 = *(_DWORD *)(v32 + 16);
            if (!v38)
            {
              unsigned int v48 = 0;
LABEL_62:
              *sub_1CC0BE7D8(v32, *(void *)(a1 + 928) + 48 * *v35 + 16, (void *)(*(void *)(a1 + 928) + 48 * *v35 + 16), v48) = *v37;
              uint64_t v49 = *v37;
              unint64_t v50 = *(unsigned int *)(v32 + 32);
              if (v50 >= *(unsigned int *)(v32 + 36)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(v32 + 24) + 8 * v50) = v49;
              ++*(_DWORD *)(v32 + 32);
              goto LABEL_64;
            }
            uint64_t v39 = *(void *)(v32 + 8);
          }
          int v40 = v38 - 1;
          unsigned int v41 = ((*v37 >> 4) ^ (*v37 >> 9)) & v40;
          uint64_t v42 = (void *)(v39 + 8 * v41);
          uint64_t v43 = *v42;
          if (*v37 != *v42)
          {
            uint64_t v44 = 0;
            int v45 = 1;
            while (v43 != -4096)
            {
              if (v44) {
                BOOL v46 = 0;
              }
              else {
                BOOL v46 = v43 == -8192;
              }
              if (v46) {
                uint64_t v44 = v42;
              }
              unsigned int v47 = v41 + v45++;
              unsigned int v41 = v47 & v40;
              uint64_t v42 = (void *)(v39 + 8 * v41);
              uint64_t v43 = *v42;
              if (*v37 == *v42) {
                goto LABEL_64;
              }
            }
            if (v44) {
              unsigned int v48 = v44;
            }
            else {
              unsigned int v48 = v42;
            }
            goto LABEL_62;
          }
LABEL_64:
          v35 += 2;
        }
        while (v35 != v36);
      }
      uint64_t v51 = *(unsigned int *)(v33 + 48);
      if (v51) {
        break;
      }
LABEL_93:
      LODWORD(v8) = v8 + 1;
      uint64_t v25 = a1;
      if (v30 + 1 == v885)
      {
        uint64_t v26 = v916;
        unsigned int v3 = a3;
        goto LABEL_95;
      }
    }
    uint64_t v52 = *(unsigned int **)(v33 + 40);
    unsigned int v53 = &v52[v51];
    while (2)
    {
      uint64_t v54 = (void *)(*(void *)(a1 + 928) + 48 * *v52 + 16);
      if (*(unsigned char *)(v32 + 56))
      {
        int v55 = 2;
        uint64_t v56 = v32 + 64;
        goto LABEL_74;
      }
      int v55 = *(_DWORD *)(v32 + 72);
      if (v55)
      {
        uint64_t v56 = *(void *)(v32 + 64);
LABEL_74:
        int v57 = v55 - 1;
        unsigned int v58 = ((*v54 >> 4) ^ (*v54 >> 9)) & v57;
        uint64_t v59 = (void *)(v56 + 8 * v58);
        uint64_t v60 = *v59;
        if (*v54 != *v59)
        {
          BOOL v61 = 0;
          int v62 = 1;
          while (v60 != -4096)
          {
            if (v61) {
              BOOL v63 = 0;
            }
            else {
              BOOL v63 = v60 == -8192;
            }
            if (v63) {
              BOOL v61 = v59;
            }
            unsigned int v64 = v58 + v62++;
            unsigned int v58 = v64 & v57;
            uint64_t v59 = (void *)(v56 + 8 * v58);
            uint64_t v60 = *v59;
            if (*v54 == *v59) {
              goto LABEL_89;
            }
          }
          if (v61) {
            unint64_t v65 = v61;
          }
          else {
            unint64_t v65 = v59;
          }
LABEL_87:
          *sub_1CC0BE7D8(v32 + 56, *(void *)(a1 + 928) + 48 * *v52 + 16, (void *)(*(void *)(a1 + 928) + 48 * *v52 + 16), v65) = *v54;
          uint64_t v66 = *v54;
          unint64_t v67 = *(unsigned int *)(v32 + 88);
          if (v67 >= *(unsigned int *)(v32 + 92)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v32 + 80) + 8 * v67) = v66;
          ++*(_DWORD *)(v32 + 88);
        }
LABEL_89:
        if (++v52 == v53) {
          goto LABEL_93;
        }
        continue;
      }
      break;
    }
    unint64_t v65 = 0;
    goto LABEL_87;
  }
LABEL_95:
  v912 = v914;
  uint64_t v913 = 0x1000000000;
  v909 = v911;
  uint64_t v910 = 0x1000000000;
  v906 = v908;
  uint64_t v907 = 0x1000000000;
  v896 = v900;
  __b = v900;
  uint64_t v898 = 16;
  int v899 = 0;
  v891 = v895;
  v892 = v895;
  uint64_t v893 = 16;
  int v894 = 0;
  v903 = v905;
  uint64_t v904 = 0x800000000;
  if (v26)
  {
    uint64_t v68 = v915;
    v856 = (char *)v915 + 8 * v26;
    uint64_t v69 = v25 + 4928;
    BOOL v70 = (llvm::SmallPtrSetImplBase *)(v25 + 4976);
    v873 = (unsigned int *)(v25 + 4992);
    v874 = v865 + 84;
    v867 = (_DWORD *)(v25 + 4952);
    v866 = (uint64_t *)(v25 + 5040);
    uint64_t v861 = v25 + 5216;
    v883 = (char *)(v25 + 4864);
    v872 = (void *)(v25 + 4696);
    v875 = (void **)(v25 + 4704);
    int v863 = (v3 >> 4) ^ (v3 >> 9);
    v854 = (void *)(v25 + 4888);
    uint64_t v862 = v25 + 4768;
    int64x2_t v871 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    uint64_t v869 = v25 + 4928;
    v859 = (llvm::SmallPtrSetImplBase *)(v25 + 4976);
    while (1)
    {
      uint64_t v71 = *v68;
      if (!HIDWORD(v904)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)v903 = v71;
      unsigned int v72 = v904 + 1;
      LODWORD(v904) = v904 + 1;
      uint64_t v73 = *(void *)(v25 + 4648);
      unsigned int v74 = *(_DWORD *)(v25 + 4664);
      if (!v74) {
        goto LABEL_104;
      }
      unsigned int v75 = (v74 - 1) & ((v71 >> 4) ^ (v71 >> 9));
      unsigned int v76 = (uint64_t *)(v73 + 40 * v75);
      uint64_t v77 = *v76;
      if (*v76 != v71) {
        break;
      }
LABEL_105:
      v857 = v68;
      if ((uint64_t *)(v73 + 40 * v74) != v76)
      {
        uint64_t v80 = *((unsigned int *)v76 + 4);
        if (v80 + (unint64_t)v72 > HIDWORD(v904)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v80)
        {
          memcpy((char *)v903 + 8 * v72, (const void *)v76[1], 8 * v80);
          unsigned int v72 = v904;
        }
        v72 += v80;
        LODWORD(v904) = v72;
      }
      uint64_t v81 = a1 + 4672;
      if (v72)
      {
        uint64_t v82 = (uint64_t *)v903;
        uint64_t v83 = (uint64_t *)((char *)v903 + 8 * v72);
        v858 = (char *)v83;
LABEL_112:
        uint64_t v84 = *v82;
        uint64_t v890 = *v82;
        if (*(_DWORD *)(sub_1CC7B5BD0(v81, &v890) + 32) < 2u) {
          goto LABEL_1347;
        }
        uint64_t v85 = *(uint64_t **)(v25 + 56);
        uint64_t v902 = v84;
        for (uint64_t j = *(void *)(v84 + 8); j; uint64_t j = *(void *)(j + 8))
        {
          uint64_t v87 = *(void *)(j + 24);
          unsigned int v88 = *(unsigned __int8 *)(v87 + 16);
          if (v87) {
            BOOL v89 = v88 >= 0x1C;
          }
          else {
            BOOL v89 = 0;
          }
          if (v89 && v88 - 29 < 0xB) {
            break;
          }
        }
        v920 = &v921.u64[1];
        v921.i64[0] = 0x800000000;
        sub_1CBF846A4((uint64_t)&v920, j, 0);
        uint64_t v91 = sub_1CC7B5BD0(v81, &v902);
        uint64_t v92 = v91;
        uint64_t v93 = *(unsigned int *)(v91 + 32);
        unint64_t v95 = v873;
        BOOL v94 = v865 + 84;
        if (v93)
        {
          unsigned int v96 = *(const void ***)(v91 + 24);
          int v97 = &v96[v93];
          do
          {
            uint64_t v98 = *(void *)(v25 + 4984);
            int v99 = *v96;
            if (v98 != *(void *)(v25 + 4976)) {
              goto LABEL_135;
            }
            uint64_t v100 = *v94;
            if (v100)
            {
              v101 = 0;
              uint64_t v102 = 8 * v100;
              v103 = *(void **)(v25 + 4984);
              while ((const void *)*v103 != v99)
              {
                if (*v103 == -2) {
                  v101 = v103;
                }
                ++v103;
                v102 -= 8;
                if (!v102)
                {
                  if (!v101) {
                    goto LABEL_133;
                  }
                  void *v101 = v99;
                  --*(_DWORD *)(v25 + 5000);
                  goto LABEL_136;
                }
              }
              goto LABEL_136;
            }
LABEL_133:
            if (v100 < *v95)
            {
              *BOOL v94 = v100 + 1;
              *(void *)(v98 + 8 * v100) = v99;
            }
            else
            {
LABEL_135:
              llvm::SmallPtrSetImplBase::insert_imp_big(v70, v99);
              unint64_t v95 = v873;
              BOOL v94 = v865 + 84;
            }
LABEL_136:
            ++v96;
          }
          while (v96 != v97);
        }
        int v104 = *((_DWORD *)v85 + 4);
        v860 = v82;
        uint64_t v877 = v92;
        if (v104)
        {
          uint64_t v105 = *v85;
          unsigned int v106 = v104 - 1;
          uint64_t v107 = (v104 - 1) & ((v84 >> 4) ^ (v84 >> 9));
          uint64_t v108 = *(void *)(*v85 + 16 * v107);
          if (v84 != v108)
          {
            int v109 = 1;
            while (v108 != -4096)
            {
              int v110 = v107 + v109++;
              uint64_t v107 = v110 & v106;
              uint64_t v108 = *(void *)(v105 + 16 * v107);
              if (v84 == v108) {
                goto LABEL_144;
              }
            }
            goto LABEL_145;
          }
LABEL_144:
          uint64_t v111 = *(void *)(v105 + 16 * v107 + 8);
        }
        else
        {
LABEL_145:
          uint64_t v111 = 0;
        }
        if (!v921.i32[0]) {
          goto LABEL_436;
        }
        v112 = (void **)v920;
        uint64_t v113 = (void **)((char *)v920 + 8 * v921.u32[0]);
        v114 = (void *)a3;
        while (2)
        {
          v115 = *v112;
          __src = v115;
          uint64_t v116 = *v85;
          int v117 = *((_DWORD *)v85 + 4);
          unsigned int v118 = v115 >> 4;
          if (v117)
          {
            uint64_t v119 = (v118 ^ (v115 >> 9)) & (v117 - 1);
            v120 = *(void **)(v116 + 16 * v119);
            if (v115 != v120)
            {
              int v121 = 1;
              while (v120 != (void *)-4096)
              {
                int v122 = v119 + v121++;
                uint64_t v119 = v122 & (v117 - 1);
                v120 = *(void **)(v116 + 16 * v119);
                if (v115 == v120) {
                  goto LABEL_153;
                }
              }
              goto LABEL_155;
            }
LABEL_153:
            v123 = *(void **)(v116 + 16 * v119 + 8);
            if (!v111)
            {
LABEL_157:
              if (!v117) {
                goto LABEL_164;
              }
              unsigned int v124 = v118 ^ (v115 >> 9);
              unsigned int v125 = v117 - 1;
              uint64_t v126 = v124 & (v117 - 1);
              v127 = *(void **)(v116 + 16 * v126);
              if (v115 == v127)
              {
LABEL_162:
                v130 = *(void **)(v116 + 16 * v126 + 8);
                if (v114) {
                  goto LABEL_165;
                }
              }
              else
              {
                int v128 = 1;
                while (v127 != (void *)-4096)
                {
                  int v129 = v126 + v128++;
                  uint64_t v126 = v129 & v125;
                  v127 = *(void **)(v116 + 16 * v126);
                  if (v115 == v127) {
                    goto LABEL_162;
                  }
                }
LABEL_164:
                v130 = 0;
                if (v114)
                {
LABEL_165:
                  if (v130 != v114)
                  {
                    v131 = v114;
                    while (v131)
                    {
                      v131 = (void *)*v131;
                      if (v131 == v130) {
                        goto LABEL_179;
                      }
                    }
                    goto LABEL_170;
                  }
LABEL_179:
                  sub_1CC7B6110(v69, (uint64_t *)&__src);
                  uint64_t v135 = v134;
                  uint64_t v136 = *(void *)(a1 + 4984);
                  uint64_t v137 = *(void *)(a1 + 4976);
                  if (v136 == v137)
                  {
                    v138 = v873;
                    v139 = (unsigned int *)(v865 + 84);
                    uint64_t v140 = *(unsigned int *)v874;
                    v141 = (void **)(v136 + 8 * v140);
                    if (v140)
                    {
                      uint64_t v142 = 0;
                      uint64_t v143 = 8 * v140;
                      while (*(void **)(v136 + v142) != v115)
                      {
                        v142 += 8;
                        if (v143 == v142) {
                          goto LABEL_200;
                        }
                      }
                      v141 = (void **)(v136 + v142);
                    }
LABEL_200:
                    uint64_t v137 = *(void *)(a1 + 4984);
                  }
                  else
                  {
                    v138 = v873;
                    v139 = (unsigned int *)(v865 + 84);
                    uint64_t v144 = *v873;
                    int v145 = v144 - 1;
                    unsigned int v146 = (v144 - 1) & ((v115 >> 4) ^ (v115 >> 9));
                    v141 = (void **)(v136 + 8 * v146);
                    v147 = *v141;
                    v148 = 0;
                    if (*v141 == (void *)-1)
                    {
LABEL_195:
                      if (v148) {
                        v141 = v148;
                      }
                      if (*v141 != v115) {
                        v141 = (void **)(v136 + 8 * v144);
                      }
                    }
                    else
                    {
                      int v149 = 1;
                      while (v147 != v115)
                      {
                        if (v148) {
                          BOOL v150 = 0;
                        }
                        else {
                          BOOL v150 = v147 == (void *)-2;
                        }
                        if (v150) {
                          v148 = v141;
                        }
                        unsigned int v151 = v146 + v149++;
                        unsigned int v146 = v151 & v145;
                        v141 = (void **)(v136 + 8 * (v151 & v145));
                        v147 = *v141;
                        if (*v141 == (void *)-1) {
                          goto LABEL_195;
                        }
                      }
                    }
                  }
                  if (v136 == v137) {
                    v152 = v139;
                  }
                  else {
                    v152 = v138;
                  }
                  if (v141 == (void **)(v136 + 8 * *v152))
                  {
                    *(void *)&long long v930 = 0;
                    if (sub_1CC7B5D00(*(void *)(a1 + 4672), *(_DWORD *)(a1 + 4688), (uint64_t)v115, &v930)) {
                      uint64_t v154 = v930;
                    }
                    else {
                      uint64_t v154 = *(void *)(a1 + 4672) + 120 * *(unsigned int *)(a1 + 4688);
                    }
                    v155 = *(const void **)(v154 + 32);
                    uint64_t v156 = *(unsigned int *)(v154 + 40);
                    *(void *)&long long v930 = &v931;
                    *((void *)&v930 + 1) = 0x800000000;
                    if (v156 >= 9) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    if (v156)
                    {
                      memcpy(&v931, v155, 8 * v156);
                      int v157 = DWORD2(v930);
                    }
                    else
                    {
                      int v157 = 0;
                    }
                    unsigned int v158 = v157 + v156;
                    DWORD2(v930) = v158;
                    v159 = v873;
                    for (k = (unsigned int *)(v865 + 84); v158; DWORD2(v930) = v158)
                    {
                      while (1)
                      {
                        uint64_t v161 = *(void *)(v930 + 8 * v158 - 8);
                        DWORD2(v930) = v158 - 1;
                        *(void *)&long long v918 = v161;
                        uint64_t v162 = *(void *)(a1 + 4984);
                        uint64_t v163 = *(void *)(a1 + 4976);
                        if (v162 == v163)
                        {
                          uint64_t v164 = *k;
                          v165 = (void *)(v162 + 8 * v164);
                          if (v164)
                          {
                            uint64_t v166 = 0;
                            uint64_t v167 = 8 * v164;
                            while (*(void *)(v162 + v166) != v161)
                            {
                              v166 += 8;
                              if (v167 == v166) {
                                goto LABEL_232;
                              }
                            }
                            v165 = (void *)(v162 + v166);
                          }
LABEL_232:
                          uint64_t v163 = *(void *)(a1 + 4984);
                        }
                        else
                        {
                          uint64_t v168 = *v159;
                          int v169 = v168 - 1;
                          unsigned int v170 = (v168 - 1) & ((v161 >> 4) ^ (v161 >> 9));
                          v165 = (void *)(v162 + 8 * v170);
                          uint64_t v171 = *v165;
                          if (*v165 == -1)
                          {
                            v172 = 0;
LABEL_246:
                            if (v172) {
                              v165 = v172;
                            }
                            if (*v165 != v161) {
                              v165 = (void *)(v162 + 8 * v168);
                            }
                          }
                          else
                          {
                            v172 = 0;
                            int v173 = 1;
                            while (v171 != v161)
                            {
                              if (v172) {
                                BOOL v174 = 0;
                              }
                              else {
                                BOOL v174 = v171 == -2;
                              }
                              if (v174) {
                                v172 = v165;
                              }
                              unsigned int v175 = v170 + v173++;
                              unsigned int v170 = v175 & v169;
                              v165 = (void *)(v162 + 8 * (v175 & v169));
                              uint64_t v171 = *v165;
                              if (*v165 == -1) {
                                goto LABEL_246;
                              }
                            }
                          }
                        }
                        v176 = v162 == v163 ? k : v159;
                        if (v165 == (void *)(v162 + 8 * *v176)) {
                          break;
                        }
                        unint64_t v177 = *(unsigned int *)(v135 + 16);
                        if (v177 >= *(unsigned int *)(v135 + 20)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *(void *)(*(void *)(v135 + 8) + 8 * v177) = v161;
                        ++*(_DWORD *)(v135 + 16);
                        unsigned int v158 = DWORD2(v930);
                        if (!DWORD2(v930)) {
                          goto LABEL_252;
                        }
                      }
                      uint64_t v178 = sub_1CC7B5BD0((uint64_t)v880, (uint64_t *)&v918);
                      uint64_t v179 = *(unsigned int *)(v178 + 32);
                      int v180 = DWORD2(v930);
                      if ((unint64_t)DWORD2(v930) + v179 > HIDWORD(v930)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      if (v179)
                      {
                        memcpy((void *)(v930 + 8 * DWORD2(v930)), *(const void **)(v178 + 24), 8 * v179);
                        int v180 = DWORD2(v930);
                      }
                      v159 = v873;
                      k = (unsigned int *)(v865 + 84);
                      unsigned int v158 = v180 + v179;
                    }
LABEL_252:
                    if ((long long *)v930 != &v931) {
                      free((void *)v930);
                    }
                    v114 = (void *)a3;
                    uint64_t v69 = v869;
                  }
                  else
                  {
                    unint64_t v153 = *(unsigned int *)(v135 + 16);
                    if (v153 >= *(unsigned int *)(v135 + 20)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    v114 = (void *)a3;
                    uint64_t v69 = v869;
                    *(void *)(*(void *)(v135 + 8) + 8 * v153) = v115;
                    ++*(_DWORD *)(v135 + 16);
                  }
LABEL_255:
                  if (++v112 != v113) {
                    continue;
                  }
                  if (v921.i32[0])
                  {
                    v181 = (uint64_t *)v920;
                    v886 = (uint64_t *)((char *)v920 + 8 * v921.u32[0]);
                    while (2)
                    {
                      uint64_t v182 = *v181;
                      uint64_t v901 = *v181;
                      sub_1CC7B6110(v69, &v901);
                      uint64_t v184 = *(unsigned int *)(v183 + 16);
                      if (!v184) {
                        goto LABEL_430;
                      }
                      uint64_t v185 = v183;
                      v186 = *(void ***)(v183 + 8);
                      uint64_t v187 = *(void *)(a1 + 4952);
                      uint64_t v188 = *(unsigned int *)(a1 + 4968);
                      v189 = &v186[v184];
                      unsigned int v190 = v188 - 1;
                      v191 = v186;
                      while (1)
                      {
                        if (v188)
                        {
                          v192 = *v191;
                          unsigned int v193 = (*v191 >> 4) ^ (*v191 >> 9);
                          LODWORD(v194) = v193 & v190;
                          uint64_t v195 = v187 + 16 * (v193 & v190);
                          v196 = *(void **)v195;
                          if (*v191 != *(void **)v195)
                          {
                            int v197 = 1;
                            do
                            {
                              if (v196 == (void *)-4096) {
                                goto LABEL_275;
                              }
                              int v198 = v194 + v197++;
                              uint64_t v194 = v198 & v190;
                              v196 = *(void **)(v187 + 16 * v194);
                            }
                            while (v192 != v196);
                            uint64_t v195 = v187 + 16 * v194;
                          }
                          if (v195 != v187 + 16 * v188) {
                            break;
                          }
                        }
LABEL_275:
                        if (++v191 == v189) {
                          goto LABEL_294;
                        }
                      }
                      if (v192)
                      {
                        unsigned int v199 = *(_DWORD *)(v195 + 8);
                        uint64_t v200 = *v866;
                        uint64_t v201 = *v866 + 80 * v199;
                        unint64_t v202 = *(unsigned int *)(v201 + 8);
                        uint64_t v881 = v201;
                        if (v202 >= *(unsigned int *)(v201 + 12)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *(void *)(*(void *)v201 + 8 * v202) = v182;
                        ++*(_DWORD *)(v201 + 8);
                        uint64_t v203 = v200 + 80 * v199 + 32;
                        v204 = (const void **)v186;
                        while (2)
                        {
                          uint64_t v205 = *(void *)(v203 + 8);
                          v206 = *v204;
                          if (v205 != *(void *)v203) {
                            goto LABEL_290;
                          }
                          uint64_t v207 = *(unsigned int *)(v203 + 20);
                          if (v207)
                          {
                            v208 = 0;
                            uint64_t v209 = 8 * v207;
                            v210 = *(void **)(v203 + 8);
                            do
                            {
                              if ((const void *)*v210 == v206) {
                                goto LABEL_291;
                              }
                              if (*v210 == -2) {
                                v208 = v210;
                              }
                              ++v210;
                              v209 -= 8;
                            }
                            while (v209);
                            if (v208)
                            {
                              void *v208 = v206;
                              --*(_DWORD *)(v203 + 24);
                              goto LABEL_291;
                            }
                          }
                          if (v207 < *(_DWORD *)(v203 + 16))
                          {
                            *(_DWORD *)(v203 + 20) = v207 + 1;
                            *(void *)(v205 + 8 * v207) = v206;
                          }
                          else
                          {
LABEL_290:
                            llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)v203, v206);
                          }
LABEL_291:
                          if (++v204 != (const void **)v189) {
                            continue;
                          }
                          break;
                        }
                        while (2)
                        {
                          __src = 0;
                          v244 = *v186;
                          __src = v244;
                          uint64_t v245 = *(void *)(a1 + 4952);
                          uint64_t v246 = *(unsigned int *)(a1 + 4968);
                          if (v244 != v192)
                          {
                            if (!v246) {
                              goto LABEL_381;
                            }
                            LODWORD(v247) = (v246 - 1) & ((v244 >> 4) ^ (v244 >> 9));
                            uint64_t v248 = v245 + 16 * v247;
                            v249 = *(void **)v248;
                            if (v244 != *(void **)v248)
                            {
                              int v250 = 1;
                              while (v249 != (void *)-4096)
                              {
                                int v251 = v247 + v250++;
                                uint64_t v247 = v251 & (v246 - 1);
                                v249 = *(void **)(v245 + 16 * v247);
                                if (v244 == v249)
                                {
                                  uint64_t v248 = v245 + 16 * v247;
                                  goto LABEL_382;
                                }
                              }
LABEL_381:
                              uint64_t v248 = v245 + 16 * v246;
                            }
LABEL_382:
                            if (v245 + 16 * v246 != v248)
                            {
                              unsigned int v261 = *(_DWORD *)(v248 + 8);
                              if (v261 != v199)
                              {
                                uint64_t v262 = *v866;
                                uint64_t v263 = *v866 + 80 * v261;
                                v264 = *(const void **)v263;
                                uint64_t v879 = v263;
                                uint64_t v265 = *(unsigned int *)(v263 + 8);
                                uint64_t v266 = v881;
                                uint64_t v267 = *(unsigned int *)(v881 + 8);
                                if (v267 + v265 > (unint64_t)*(unsigned int *)(v881 + 12)) {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                }
                                if (v265)
                                {
                                  v878 = v181;
                                  uint64_t v268 = *v866;
                                  memcpy((void *)(*(void *)v881 + 8 * v267), v264, 8 * v265);
                                  uint64_t v262 = v268;
                                  v181 = v878;
                                  uint64_t v266 = v881;
                                  LODWORD(v267) = *(_DWORD *)(v881 + 8);
                                }
                                *(_DWORD *)(v266 + 8) = v267 + v265;
                                uint64_t v269 = v262 + 80 * v261;
                                v272 = *(uint64_t **)(v269 + 32);
                                v270 = *(uint64_t **)(v269 + 40);
                                uint64_t v271 = v269 + 32;
                                BOOL v46 = v270 == v272;
                                uint64_t v273 = 16;
                                if (v46) {
                                  uint64_t v273 = 20;
                                }
                                uint64_t v274 = *(unsigned int *)(v271 + v273);
                                v275 = &v270[v274];
                                if (v274)
                                {
                                  uint64_t v277 = 8 * v274;
                                  uint64_t v276 = v879;
                                  while ((unint64_t)*v270 >= 0xFFFFFFFFFFFFFFFELL)
                                  {
                                    ++v270;
                                    v277 -= 8;
                                    if (!v277)
                                    {
                                      v270 = v275;
                                      break;
                                    }
                                  }
                                }
                                else
                                {
                                  uint64_t v276 = v879;
                                }
                                sub_1CD63F044((llvm::SmallPtrSetImplBase *)v203, v270, v275, v275);
                                *(_DWORD *)(v248 + 8) = v199;
                                uint64_t v278 = *(unsigned int *)(v276 + 8);
                                if (v278)
                                {
                                  v279 = *(uint64_t **)v276;
                                  v280 = &v279[v278];
                                  while (1)
                                  {
                                    *(void *)&long long v930 = 0;
                                    uint64_t v281 = *v279;
                                    *(void *)&long long v930 = *v279;
                                    int v282 = *(_DWORD *)(a1 + 4968);
                                    if (!v282) {
                                      break;
                                    }
                                    uint64_t v283 = *(void *)(a1 + 4952);
                                    int v284 = v282 - 1;
                                    unsigned int v285 = ((v281 >> 4) ^ (v281 >> 9)) & v284;
                                    v286 = (void *)(v283 + 16 * v285);
                                    uint64_t v287 = *v286;
                                    if (v281 != *v286)
                                    {
                                      v288 = 0;
                                      int v289 = 1;
                                      while (v287 != -4096)
                                      {
                                        if (v288) {
                                          BOOL v290 = 0;
                                        }
                                        else {
                                          BOOL v290 = v287 == -8192;
                                        }
                                        if (v290) {
                                          v288 = v286;
                                        }
                                        unsigned int v291 = v285 + v289++;
                                        unsigned int v285 = v291 & v284;
                                        v286 = (void *)(v283 + 16 * v285);
                                        uint64_t v287 = *v286;
                                        if (v281 == *v286) {
                                          goto LABEL_414;
                                        }
                                      }
                                      if (v288) {
                                        v292 = v288;
                                      }
                                      else {
                                        v292 = v286;
                                      }
                                      goto LABEL_413;
                                    }
LABEL_414:
                                    *((_DWORD *)v286 + 2) = v199;
                                    if (++v279 == v280) {
                                      goto LABEL_384;
                                    }
                                  }
                                  v292 = 0;
LABEL_413:
                                  v286 = sub_1CBFAF8D8((uint64_t)v867, (uint64_t)&v930, (uint64_t *)&v930, v292);
                                  void *v286 = v930;
                                  *((_DWORD *)v286 + 2) = 0;
                                  goto LABEL_414;
                                }
                              }
                            }
LABEL_384:
                            if (++v186 == v189) {
                              goto LABEL_430;
                            }
                            continue;
                          }
                          break;
                        }
                        if (v246)
                        {
                          int v252 = v246 - 1;
                          unsigned int v253 = v252 & v193;
                          v254 = (void *)(v245 + 16 * (v252 & v193));
                          uint64_t v255 = *v254;
                          if (v192 != (void *)*v254)
                          {
                            v256 = 0;
                            int v257 = 1;
                            while (v255 != -4096)
                            {
                              if (v256) {
                                BOOL v258 = 0;
                              }
                              else {
                                BOOL v258 = v255 == -8192;
                              }
                              if (v258) {
                                v256 = v254;
                              }
                              unsigned int v259 = v253 + v257++;
                              unsigned int v253 = v259 & v252;
                              v254 = (void *)(v245 + 16 * v253);
                              uint64_t v255 = *v254;
                              if (v192 == (void *)*v254) {
                                goto LABEL_380;
                              }
                            }
                            if (v256) {
                              v260 = v256;
                            }
                            else {
                              v260 = v254;
                            }
LABEL_379:
                            v254 = sub_1CBFAF8D8((uint64_t)v867, (uint64_t)&__src, (uint64_t *)&__src, v260);
                            void *v254 = __src;
                            *((_DWORD *)v254 + 2) = 0;
                          }
LABEL_380:
                          *((_DWORD *)v254 + 2) = v199;
                          goto LABEL_384;
                        }
                        v260 = 0;
                        goto LABEL_379;
                      }
LABEL_294:
                      int v211 = *(_DWORD *)(a1 + 5048);
LABEL_295:
                      *(void *)&long long v930 = 0;
                      v212 = *v186;
                      *(void *)&long long v930 = *v186;
                      int v213 = *(_DWORD *)(a1 + 4968);
                      if (v213)
                      {
                        uint64_t v214 = *(void *)(a1 + 4952);
                        int v215 = v213 - 1;
                        unsigned int v216 = ((v212 >> 4) ^ (v212 >> 9)) & v215;
                        v217 = (void *)(v214 + 16 * v216);
                        uint64_t v218 = *v217;
                        if (v212 != (void *)*v217)
                        {
                          v219 = 0;
                          int v220 = 1;
                          while (v218 != -4096)
                          {
                            if (v219) {
                              BOOL v221 = 0;
                            }
                            else {
                              BOOL v221 = v218 == -8192;
                            }
                            if (v221) {
                              v219 = v217;
                            }
                            unsigned int v222 = v216 + v220++;
                            unsigned int v216 = v222 & v215;
                            v217 = (void *)(v214 + 16 * v216);
                            uint64_t v218 = *v217;
                            if (v212 == (void *)*v217) {
                              goto LABEL_310;
                            }
                          }
                          if (v219) {
                            v223 = v219;
                          }
                          else {
                            v223 = v217;
                          }
LABEL_309:
                          v217 = sub_1CBFAF8D8((uint64_t)v867, (uint64_t)&v930, (uint64_t *)&v930, v223);
                          void *v217 = v930;
                          *((_DWORD *)v217 + 2) = 0;
                        }
LABEL_310:
                        *((_DWORD *)v217 + 2) = v211;
                        if (++v186 == v189)
                        {
                          *(void *)&long long v918 = v919;
                          *((void *)&v918 + 1) = 0x200000000;
                          sub_1CB91FBE0((uint64_t)&v918, 1uLL, v182);
                          v224 = *(uint64_t **)(v185 + 8);
                          uint64_t v225 = *(unsigned int *)(v185 + 16);
                          v226 = v940;
                          __src = v940;
                          v937 = v940;
                          uint64_t v938 = 2;
                          v227 = v940;
                          int v939 = 0;
                          if (v225)
                          {
                            unsigned int v228 = 2;
                            v226 = v940;
                            v227 = v940;
                            v229 = &v224[v225];
                            while (2)
                            {
                              uint64_t v230 = *v224;
                              uint64_t v231 = HIDWORD(v938);
                              if (v226 == v227)
                              {
                                if (HIDWORD(v938))
                                {
                                  v232 = 0;
                                  uint64_t v233 = 8 * HIDWORD(v938);
                                  v234 = v227;
                                  while (*v234 != v230)
                                  {
                                    if (*v234 == -2) {
                                      v232 = v234;
                                    }
                                    ++v234;
                                    v233 -= 8;
                                    if (!v233)
                                    {
                                      if (!v232) {
                                        goto LABEL_323;
                                      }
                                      void *v232 = v230;
                                      --v939;
                                      goto LABEL_345;
                                    }
                                  }
                                  goto LABEL_345;
                                }
LABEL_323:
                                if (HIDWORD(v938) < v228)
                                {
                                  ++HIDWORD(v938);
                                  v227[v231] = v230;
                                  goto LABEL_345;
                                }
                              }
                              if (3 * v228 <= 4 * (HIDWORD(v938) - v939))
                              {
                                if (v228 >= 0x40) {
                                  v228 *= 2;
                                }
                                else {
                                  unsigned int v228 = 128;
                                }
                              }
                              else if (v228 - HIDWORD(v938) >= v228 >> 3)
                              {
                                goto LABEL_327;
                              }
                              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&__src, v228);
                              unsigned int v228 = v938;
                              v226 = v937;
LABEL_327:
                              unsigned int v235 = v228 - 1;
                              unsigned int v236 = (v228 - 1) & ((v230 >> 4) ^ (v230 >> 9));
                              v237 = &v226[v236];
                              uint64_t v238 = *v237;
                              if (*v237 == -1)
                              {
                                v239 = 0;
LABEL_339:
                                if (v239) {
                                  v237 = v239;
                                }
                                if (*v237 != v230)
                                {
                                  if (*v237 == -2) {
                                    --v939;
                                  }
                                  else {
                                    ++HIDWORD(v938);
                                  }
                                  void *v237 = v230;
                                }
                              }
                              else
                              {
                                v239 = 0;
                                int v240 = 1;
                                while (v238 != v230)
                                {
                                  if (v239) {
                                    BOOL v241 = 0;
                                  }
                                  else {
                                    BOOL v241 = v238 == -2;
                                  }
                                  if (v241) {
                                    v239 = v237;
                                  }
                                  unsigned int v242 = v236 + v240++;
                                  unsigned int v236 = v242 & v235;
                                  v237 = &v226[v242 & v235];
                                  uint64_t v238 = *v237;
                                  if (*v237 == -1) {
                                    goto LABEL_339;
                                  }
                                }
                              }
LABEL_345:
                              v226 = v937;
                              v227 = __src;
                              if (++v224 == v229) {
                                break;
                              }
                              continue;
                            }
                          }
                          *(void *)&long long v930 = &v931;
                          *((void *)&v930 + 1) = 0x200000000;
                          int v243 = DWORD2(v918);
                          if (DWORD2(v918))
                          {
                            if ((unsigned char *)v918 == v919)
                            {
                              if (DWORD2(v918) >= 3uLL) {
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                              }
                              memcpy(&v931, v919, 8 * DWORD2(v918));
                              DWORD2(v930) = v243;
                              v226 = v937;
                              v227 = __src;
                            }
                            else
                            {
                              long long v930 = v918;
                              *(void *)&long long v918 = v919;
                              HIDWORD(v918) = 0;
                            }
                            DWORD2(v918) = 0;
                          }
                          *(void *)&long long v932 = v935;
                          if (v226 == v227)
                          {
                            *((void *)&v932 + 1) = v935;
                            unsigned int v293 = HIDWORD(v938);
                            if (HIDWORD(v938)) {
                              memmove(v935, v227, 8 * HIDWORD(v938));
                            }
                          }
                          else
                          {
                            *((void *)&v932 + 1) = v226;
                            v937 = v227;
                            unsigned int v293 = HIDWORD(v938);
                          }
                          v933 = (void *)__PAIR64__(v293, v938);
                          LODWORD(v934) = v939;
                          uint64_t v938 = 2;
                          int v939 = 0;
                          sub_1CC7B5F88((uint64_t)v866, (unint64_t)&v930);
                          if (*((void *)&v932 + 1) != (void)v932) {
                            free(*((void **)&v932 + 1));
                          }
                          if ((long long *)v930 != &v931) {
                            free((void *)v930);
                          }
                          if (v937 != __src) {
                            free(v937);
                          }
                          if ((unsigned char *)v918 != v919) {
                            free((void *)v918);
                          }
LABEL_430:
                          ++v181;
                          uint64_t v69 = v869;
                          if (v181 == v886) {
                            goto LABEL_436;
                          }
                          continue;
                        }
                        goto LABEL_295;
                      }
                      break;
                    }
                    v223 = 0;
                    goto LABEL_309;
                  }
LABEL_436:
                  *(void *)&long long v930 = &v931;
                  *((void *)&v930 + 1) = 0x800000000;
                  v934 = 0;
                  v935[0] = 0;
                  v933 = &v934;
                  uint64_t v294 = *(unsigned int *)(v877 + 32);
                  if (v294)
                  {
                    v295 = *(void ***)(v877 + 24);
                    v296 = &v295[v294];
                    uint64_t v25 = a1;
                    v297 = (void *)a3;
                    while (1)
                    {
                      __src = 0;
                      v298 = *v295;
                      __src = *v295;
                      LODWORD(v918) = 0;
                      int v299 = *(_DWORD *)(a1 + 4968);
                      if (!v299) {
                        break;
                      }
                      uint64_t v300 = *(void *)(a1 + 4952);
                      int v301 = v299 - 1;
                      unsigned int v302 = v301 & ((v298 >> 4) ^ (v298 >> 9));
                      v303 = (void *)(v300 + 16 * v302);
                      v304 = (void *)*v303;
                      if (v298 != (void *)*v303)
                      {
                        v305 = 0;
                        int v306 = 1;
                        while (v304 != (void *)-4096)
                        {
                          if (v305) {
                            BOOL v307 = 0;
                          }
                          else {
                            BOOL v307 = v304 == (void *)-8192;
                          }
                          if (v307) {
                            v305 = v303;
                          }
                          unsigned int v308 = v302 + v306++;
                          unsigned int v302 = v308 & v301;
                          v303 = (void *)(v300 + 16 * v302);
                          v304 = (void *)*v303;
                          if (v298 == (void *)*v303) {
                            goto LABEL_453;
                          }
                        }
                        if (v305) {
                          v309 = v305;
                        }
                        else {
                          v309 = v303;
                        }
                        goto LABEL_452;
                      }
LABEL_453:
                      LODWORD(v918) = *((_DWORD *)v303 + 2);
                      if ((sub_1CB913D18((uint64_t)&v930, (unsigned int *)&v918) & 0x100000000) != 0) {
                        sub_1CC7B5F88(v861, *v866 + 80 * v918);
                      }
                      if (++v295 == v296)
                      {
                        v310 = v934;
                        goto LABEL_459;
                      }
                    }
                    v309 = 0;
LABEL_452:
                    v303 = sub_1CBFAF8D8((uint64_t)v867, (uint64_t)&__src, (uint64_t *)&__src, v309);
                    void *v303 = __src;
                    *((_DWORD *)v303 + 2) = 0;
                    goto LABEL_453;
                  }
                  v310 = 0;
                  uint64_t v25 = a1;
                  v297 = (void *)a3;
LABEL_459:
                  sub_1CB833A08((uint64_t)&v933, v310);
                  BOOL v70 = v859;
                  if ((long long *)v930 != &v931) {
                    free((void *)v930);
                  }
                  if (v920 != &v921.u64[1]) {
                    free(v920);
                  }
                  if (*(_DWORD *)(v25 + 5224) < 2u) {
                    goto LABEL_1320;
                  }
                  uint64_t v311 = v890;
                  if (v910 >= (unint64_t)HIDWORD(v910)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  v312 = (void *)v861;
                  v313 = (char *)v909 + 16 * v910;
                  void *v313 = v890;
                  v313[1] = 0;
                  BOOL v89 = __CFADD__(v910, 1);
                  unsigned int v314 = v910 + 1;
                  LODWORD(v910) = v910 + 1;
                  if (v89) {
                    goto LABEL_467;
                  }
                  while (1)
                  {
LABEL_542:
                    v350 = (char *)v909 + 16 * v314;
                    uint64_t v351 = *((void *)v350 - 2);
                    uint64_t v352 = *(void *)(v351 + 40);
                    if (v352 == v351 + 40)
                    {
                      uint64_t v354 = 0;
                    }
                    else
                    {
                      uint64_t v353 = v352 ? v352 - 24 : 0;
                      uint64_t v354 = *(unsigned __int8 *)(v353 + 16) - 29 >= 0xB ? 0 : v353;
                    }
                    if (*(unsigned char *)(v354 + 16) == 30)
                    {
                      int v355 = (*(_DWORD *)(v354 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
                    }
                    else
                    {
                      int v355 = 0;
                      switch(*(unsigned char *)(v354 + 16))
                      {
                        case 0x1E:
LABEL_1492:
                          __break(1u);
                          return;
                        case 0x1F:
                          int v355 = (*(_DWORD *)(v354 + 20) >> 1) & 0x3FFFFFF;
                          break;
                        case 0x20:
                        case 0x26:
                          int v355 = (*(_DWORD *)(v354 + 20) & 0x7FFFFFF) - 1;
                          break;
                        case 0x21:
                          int v355 = 2;
                          break;
                        case 0x24:
                          int v355 = *(_WORD *)(v354 + 18) & 1;
                          break;
                        case 0x25:
                          int v355 = 1;
                          break;
                        case 0x27:
                          int v355 = *(_DWORD *)(v354 + 80) + 1;
                          break;
                        default:
                          break;
                      }
                    }
                    unsigned int v356 = *(v350 - 8);
                    if (v355 != v356) {
                      break;
                    }
                    if (v907 >= (unint64_t)HIDWORD(v907)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v906 + v907) = *((void *)v350 - 2);
                    LODWORD(v907) = v907 + 1;
                    unsigned int v314 = v910 - 1;
                    LODWORD(v910) = v314;
                    if (!v314) {
                      goto LABEL_467;
                    }
                  }
                  Successor = (const void *)llvm::Instruction::getSuccessor((llvm::Instruction *)v354, v356);
                  v920 = 0;
                  if (sub_1CBC5D2B4(*(void *)(v25 + 4624), *(_DWORD *)(v25 + 4640), (uint64_t)Successor, &v920))BOOL v358 = v920 == (void *)(*(void *)(v25 + 4624) + 16 * *(unsigned int *)(v25 + 4640)); {
                  else
                  }
                    BOOL v358 = 1;
                  uint64_t v359 = (uint64_t)Successor;
                  if (!v358) {
                    uint64_t v359 = *((void *)v920 + 1);
                  }
                  ++*(v350 - 8);
                  v360 = *(uint64_t **)(a1 + 56);
                  int v361 = *((_DWORD *)v360 + 4);
                  if (v361)
                  {
                    uint64_t v362 = *v360;
                    unsigned int v363 = v361 - 1;
                    uint64_t v364 = (v361 - 1) & ((v359 >> 4) ^ (v359 >> 9));
                    uint64_t v365 = *(void *)(v362 + 16 * v364);
                    if (v359 != v365)
                    {
                      int v366 = 1;
                      while (v365 != -4096)
                      {
                        int v367 = v364 + v366++;
                        uint64_t v364 = v367 & v363;
                        uint64_t v365 = *(void *)(v362 + 16 * v364);
                        if (v359 == v365) {
                          goto LABEL_568;
                        }
                      }
                      goto LABEL_569;
                    }
LABEL_568:
                    v368 = *(void **)(v362 + 16 * v364 + 8);
                  }
                  else
                  {
LABEL_569:
                    v368 = 0;
                  }
                  if ((sub_1CC7B5D00(*(void *)(a1 + 4672), *(_DWORD *)(a1 + 4688), v359, &v920) & 1) == 0)
                  {
                    uint64_t v25 = a1;
                    if (!v297) {
                      goto LABEL_641;
                    }
                    while (1)
                    {
                      if (v368 == v297) {
                        goto LABEL_641;
                      }
                      if (!v368) {
                        goto LABEL_679;
                      }
                      v368 = (void *)*v368;
                    }
                  }
                  *(void *)&long long v930 = &v931;
                  *((void *)&v930 + 1) = 0xA00000000;
                  sub_1CB91FBE0((uint64_t)&v930, 1uLL, v359);
                  v369 = &v923;
                  v920 = &v923;
                  v921.i64[0] = (uint64_t)&v923;
                  LODWORD(v922) = 0;
                  v921.i64[1] = 0x100000010;
                  uint64_t v923 = v359;
                  unsigned int v370 = DWORD2(v930);
                  if (!DWORD2(v930))
                  {
                    BOOL v398 = 0;
                    v312 = (void *)v861;
                    goto LABEL_638;
                  }
                  unsigned int v371 = 1;
                  int v372 = 16;
                  v373 = &v923;
                  v374 = &v923;
                  while (2)
                  {
                    uint64_t v375 = *(void *)(v930 + 8 * v370-- - 8);
                    DWORD2(v930) = v370;
                    __src = 0;
                    if (sub_1CC7B5D00(*(void *)(a1 + 4672), *(_DWORD *)(a1 + 4688), v375, &__src))
                    {
                      v376 = (unsigned int *)__src;
                      uint64_t v377 = *(void *)(a1 + 4672);
                      unsigned int v378 = *(_DWORD *)(a1 + 4688);
                    }
                    else
                    {
                      uint64_t v377 = *(void *)(a1 + 4672);
                      unsigned int v378 = *(_DWORD *)(a1 + 4688);
                      v376 = (unsigned int *)(v377 + 120 * v378);
                    }
                    if (v376 != (unsigned int *)(v377 + 120 * v378))
                    {
                      uint64_t v379 = v376[10];
                      if (v379)
                      {
                        v380 = (const void **)*((void *)v376 + 4);
                        v381 = &v380[v379];
                        while (1)
                        {
                          v382 = *v380;
                          if (*v380 == (const void *)v311)
                          {
                            BOOL v398 = v311 != 0;
                            v297 = (void *)a3;
                            goto LABEL_635;
                          }
                          if (v374 == v369)
                          {
                            v383 = &v369[v371];
                            if (v371)
                            {
                              uint64_t v384 = 8 * v371;
                              while ((const void *)*v369 != v382)
                              {
                                ++v369;
                                v384 -= 8;
                                if (!v384) {
                                  goto LABEL_607;
                                }
                              }
                              v383 = v369;
                            }
                          }
                          else
                          {
                            int v372 = v921.i32[2];
                            int v385 = v921.i32[2] - 1;
                            v374 = (uint64_t *)v921.i64[0];
                            unsigned int v386 = (v921.i32[2] - 1) & ((v382 >> 4) ^ (v382 >> 9));
                            v383 = (uint64_t *)(v921.i64[0] + 8 * v386);
                            v387 = (const void *)*v383;
                            if (*v383 == -1)
                            {
                              v388 = 0;
LABEL_600:
                              if (v388) {
                                v383 = v388;
                              }
                              v373 = (uint64_t *)v920;
                              unsigned int v371 = v921.u32[3];
                              if ((const void *)*v383 != v382)
                              {
                                if ((void *)v921.i64[0] == v920) {
                                  unsigned __int32 v392 = v921.u32[3];
                                }
                                else {
                                  unsigned __int32 v392 = v921.u32[2];
                                }
                                v383 = (uint64_t *)(v921.i64[0] + 8 * v392);
                              }
                            }
                            else
                            {
                              v388 = 0;
                              int v389 = 1;
                              while (v387 != v382)
                              {
                                if (v388) {
                                  BOOL v390 = 0;
                                }
                                else {
                                  BOOL v390 = v387 == (const void *)-2;
                                }
                                if (v390) {
                                  v388 = v383;
                                }
                                unsigned int v391 = v386 + v389++;
                                unsigned int v386 = v391 & v385;
                                v383 = (uint64_t *)(v921.i64[0] + 8 * (v391 & v385));
                                v387 = (const void *)*v383;
                                if (*v383 == -1) {
                                  goto LABEL_600;
                                }
                              }
                              v373 = (uint64_t *)v920;
                              unsigned int v371 = v921.u32[3];
                            }
                          }
LABEL_607:
                          unsigned int v393 = v374 == v373 ? v371 : v372;
                          if (v383 == &v374[v393]) {
                            break;
                          }
LABEL_624:
                          ++v380;
                          v369 = v373;
                          if (v380 == v381)
                          {
                            unsigned int v370 = DWORD2(v930);
                            v369 = v373;
                            v297 = (void *)a3;
                            goto LABEL_628;
                          }
                        }
                        if (DWORD2(v930) >= (unint64_t)HIDWORD(v930)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *(void *)(v930 + 8 * DWORD2(v930)) = v382;
                        ++DWORD2(v930);
                        if ((void *)v921.i64[0] != v920) {
                          goto LABEL_622;
                        }
                        uint64_t v394 = v921.u32[3];
                        if (v921.i32[3])
                        {
                          v395 = 0;
                          uint64_t v396 = 8 * v921.u32[3];
                          v397 = (void *)v921.i64[0];
                          while ((const void *)*v397 != v382)
                          {
                            if (*v397 == -2) {
                              v395 = v397;
                            }
                            ++v397;
                            v396 -= 8;
                            if (!v396)
                            {
                              if (!v395) {
                                goto LABEL_620;
                              }
                              void *v395 = v382;
                              LODWORD(v922) = v922 - 1;
                              goto LABEL_623;
                            }
                          }
                          goto LABEL_623;
                        }
LABEL_620:
                        if (v921.i32[3] < (unsigned __int32)v921.i32[2])
                        {
                          ++v921.i32[3];
                          *(void *)(v921.i64[0] + 8 * v394) = v382;
                        }
                        else
                        {
LABEL_622:
                          llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v920, v382);
                        }
LABEL_623:
                        v374 = (uint64_t *)v921.i64[0];
                        v373 = (uint64_t *)v920;
                        unsigned int v371 = v921.u32[3];
                        int v372 = v921.i32[2];
                        goto LABEL_624;
                      }
                    }
LABEL_628:
                    if (v370) {
                      continue;
                    }
                    break;
                  }
                  BOOL v398 = 0;
LABEL_635:
                  BOOL v46 = v374 == v373;
                  v312 = (void *)v861;
                  if (!v46) {
                    free(v374);
                  }
LABEL_638:
                  uint64_t v25 = a1;
                  if ((long long *)v930 != &v931) {
                    free((void *)v930);
                  }
                  if (v398)
                  {
LABEL_641:
                    v399 = v891;
                    v400 = v892;
                    if (v892 == v891)
                    {
                      int v401 = HIDWORD(v893);
                      v402 = &v892[8 * HIDWORD(v893)];
                      if (HIDWORD(v893))
                      {
                        uint64_t v403 = 0;
                        while (*(const void **)&v892[v403] != Successor)
                        {
                          v403 += 8;
                          if (8 * HIDWORD(v893) == v403) {
                            goto LABEL_662;
                          }
                        }
                        v402 = &v892[v403];
                      }
LABEL_662:
                      v399 = v892;
                    }
                    else
                    {
                      int v404 = v893 - 1;
                      unsigned int v405 = (v893 - 1) & ((Successor >> 4) ^ (Successor >> 9));
                      v402 = &v892[8 * v405];
                      v406 = *(const void **)v402;
                      if (*(void *)v402 == -1)
                      {
                        v407 = 0;
LABEL_682:
                        if (v407) {
                          v402 = v407;
                        }
                        int v401 = HIDWORD(v893);
                        if (*(const void **)v402 != Successor) {
                          v402 = &v892[8 * v893];
                        }
                      }
                      else
                      {
                        v407 = 0;
                        int v408 = 1;
                        while (v406 != Successor)
                        {
                          if (v407) {
                            BOOL v409 = 0;
                          }
                          else {
                            BOOL v409 = v406 == (const void *)-2;
                          }
                          if (v409) {
                            v407 = v402;
                          }
                          unsigned int v410 = v405 + v408++;
                          unsigned int v405 = v410 & v404;
                          v402 = &v892[8 * (v410 & v404)];
                          v406 = *(const void **)v402;
                          if (*(void *)v402 == -1) {
                            goto LABEL_682;
                          }
                        }
                        int v401 = HIDWORD(v893);
                      }
                    }
                    int v411 = v893;
                    if (v892 == v399) {
                      int v411 = v401;
                    }
                    if (v402 == &v892[8 * v411])
                    {
                      if (v910 >= (unint64_t)HIDWORD(v910)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      v412 = (char *)v909 + 16 * v910;
                      void *v412 = Successor;
                      v412[1] = 0;
                      LODWORD(v910) = v910 + 1;
                      v399 = v891;
                      v400 = v892;
                    }
                    if (v400 == v399)
                    {
                      uint64_t v413 = HIDWORD(v893);
                      if (HIDWORD(v893))
                      {
                        v414 = 0;
                        uint64_t v415 = 8 * HIDWORD(v893);
                        v416 = v399;
                        while (*(const void **)v416 != Successor)
                        {
                          if (*(void *)v416 == -2) {
                            v414 = v416;
                          }
                          v416 += 8;
                          v415 -= 8;
                          if (!v415)
                          {
                            if (!v414) {
                              goto LABEL_676;
                            }
                            *(void *)v414 = Successor;
                            --v894;
                            goto LABEL_679;
                          }
                        }
                        goto LABEL_679;
                      }
LABEL_676:
                      if (HIDWORD(v893) < v893)
                      {
                        ++HIDWORD(v893);
                        *(void *)&v399[8 * v413] = Successor;
                        goto LABEL_679;
                      }
                    }
                    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v891, Successor);
                  }
LABEL_679:
                  unsigned int v314 = v910;
                  if (v910) {
                    goto LABEL_542;
                  }
LABEL_467:
                  uint64_t v315 = v907;
                  v316 = (char *)v906 + 8 * v907 - 8;
                  if (v907) {
                    BOOL v317 = v906 >= v316;
                  }
                  else {
                    BOOL v317 = 1;
                  }
                  if (!v317)
                  {
                    v318 = (char *)v906 + 8;
                    do
                    {
                      uint64_t v319 = *((void *)v318 - 1);
                      *((void *)v318 - 1) = *(void *)v316;
                      *(void *)v316 = v319;
                      v316 -= 8;
                      BOOL v89 = v318 >= v316;
                      v318 += 8;
                    }
                    while (!v89);
                  }
                  uint64_t v320 = *(unsigned int *)(v25 + 5224);
                  if ((int)v320 >= 1)
                  {
                    for (uint64_t m = 0; m != v320; ++m)
                    {
                      uint64_t v322 = *v312 + 80 * m;
                      v920 = &v921.u64[1];
                      v921.i64[0] = 0x200000000;
                      unint64_t v323 = *(unsigned int *)(v322 + 8);
                      if (&v920 != (void **)v322 && v323 != 0)
                      {
                        if (*(void *)v322 == v322 + 16)
                        {
                          if (v323 >= 3) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          memcpy(&v921.u64[1], *(const void **)v322, 8 * *(unsigned int *)(v322 + 8));
                          v921.i32[0] = v323;
                        }
                        else
                        {
                          v920 = *(void **)v322;
                          v921.i32[0] = v323;
                          v921.i32[1] = *(_DWORD *)(v322 + 12);
                          *(void *)uint64_t v322 = v322 + 16;
                          *(_DWORD *)(v322 + 12) = 0;
                        }
                        *(_DWORD *)(v322 + 8) = 0;
                      }
                      uint64_t v923 = (uint64_t)v926;
                      uint64_t v325 = *(void *)(v322 + 32);
                      if (*(void *)(v322 + 40) == v325)
                      {
                        v924[0] = v926;
                        uint64_t v326 = *(unsigned int *)(v322 + 52);
                        if (v326) {
                          memmove(v926, *(const void **)(v322 + 40), 8 * v326);
                        }
                      }
                      else
                      {
                        v924[0] = *(void **)(v322 + 40);
                        *(void *)(v322 + 40) = v325;
                      }
                      v924[1] = *(void **)(v322 + 48);
                      int v925 = *(_DWORD *)(v322 + 56);
                      *(void *)(v322 + 48) = 2;
                      *(_DWORD *)(v322 + 56) = 0;
                      int v327 = v913;
                      v328 = (char *)v912;
                      if (v913 >= HIDWORD(v913))
                      {
                        unint64_t v330 = v913 + 1;
                        BOOL v332 = v912 <= &v920 && (char *)v912 + 80 * v913 > (char *)&v920;
                        if (v332) {
                          unint64_t v333 = 0xCCCCCCCCCCCCCCCDLL * (((char *)&v920 - (unsigned char *)v912) >> 4);
                        }
                        else {
                          unint64_t v333 = -1;
                        }
                        if (v913 == -1) {
                          sub_1CD0A88F0(v330);
                        }
                        if (HIDWORD(v913) == -1) {
                          sub_1CD0A89A8(0xFFFFFFFFuLL);
                        }
                        unint64_t v334 = (2 * HIDWORD(v913)) | 1;
                        if (v334 <= v330) {
                          unint64_t v334 = v913 + 1;
                        }
                        if (v334 >= 0xFFFFFFFF) {
                          uint64_t v335 = 0xFFFFFFFFLL;
                        }
                        else {
                          uint64_t v335 = v334;
                        }
                        v336 = (char *)malloc_type_malloc(80 * v335, 0x4065EBACuLL);
                        if (!v336) {
                          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
                        }
                        v328 = v336;
                        v337 = (char *)v912;
                        if (v913)
                        {
                          uint64_t v338 = 80 * v913;
                          do
                          {
                            uint64_t v339 = sub_1CC7B6370((uint64_t)v336, (uint64_t)v337);
                            v337 += 80;
                            v336 = (char *)(v339 + 80);
                            v338 -= 80;
                          }
                          while (v338);
                          v337 = (char *)v912;
                          int v340 = v913;
                        }
                        else
                        {
                          int v340 = 0;
                        }
                        sub_1CC7AF5D4((uint64_t)v337, (uint64_t)&v337[80 * v340]);
                        if (v912 != v914) {
                          free(v912);
                        }
                        v912 = v328;
                        HIDWORD(v913) = v335;
                        if (v332) {
                          v329 = (void **)&v328[80 * v333];
                        }
                        else {
                          v329 = &v920;
                        }
                        int v327 = v913;
                        v312 = (void *)v861;
                      }
                      else
                      {
                        v329 = &v920;
                      }
                      sub_1CC7B6370((uint64_t)&v328[80 * v327], (uint64_t)v329);
                      LODWORD(v913) = v913 + 1;
                      if (v924[0] != (void *)v923) {
                        free(v924[0]);
                      }
                      if (v920 != &v921.u64[1]) {
                        free(v920);
                      }
                    }
                    uint64_t v315 = v907;
                  }
                  v341 = (char *)v906;
                  if (v315)
                  {
                    v342 = (char *)v906 + 8 * v315;
                    v343 = __b;
                    while (1)
                    {
                      v344 = *(const void **)v341;
                      if (v343 != (void *)v896) {
                        goto LABEL_538;
                      }
                      uint64_t v345 = HIDWORD(v898);
                      if (HIDWORD(v898))
                      {
                        v346 = 0;
                        uint64_t v347 = 8 * HIDWORD(v898);
                        v348 = v343;
                        while ((const void *)*v348 != v344)
                        {
                          if (*v348 == -2) {
                            v346 = v348;
                          }
                          ++v348;
                          v347 -= 8;
                          if (!v347)
                          {
                            if (!v346) {
                              goto LABEL_536;
                            }
                            void *v346 = v344;
                            --v899;
                            goto LABEL_539;
                          }
                        }
                        goto LABEL_539;
                      }
LABEL_536:
                      if (HIDWORD(v898) < v898)
                      {
                        ++HIDWORD(v898);
                        v343[v345] = v344;
                      }
                      else
                      {
LABEL_538:
                        llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v896, v344);
                      }
LABEL_539:
                      v343 = __b;
                      v341 += 8;
                      if (v341 == v342)
                      {
                        v341 = (char *)v906;
                        uint64_t v349 = v907;
                        goto LABEL_696;
                      }
                    }
                  }
                  uint64_t v349 = 0;
LABEL_696:
                  unsigned int v417 = v913;
                  if (v865[544]) {
                    goto LABEL_697;
                  }
                  if (v913 < 2)
                  {
LABEL_1315:
                    BOOL v70 = v859;
                    if (v892 == v891) {
                      goto LABEL_1316;
                    }
                    if (v893 < 0x21 || 4 * (HIDWORD(v893) - v894) >= v893)
                    {
                      memset(v892, 255, 8 * v893);
LABEL_1316:
                      int v894 = 0;
                      HIDWORD(v893) = 0;
                    }
                    else
                    {
                      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v891);
                    }
                    uint64_t v25 = a1;
                    if (__b == v896)
                    {
LABEL_1318:
                      int v899 = 0;
                      HIDWORD(v898) = 0;
                    }
                    else
                    {
                      if (v898 < 0x21 || 4 * (HIDWORD(v898) - v899) >= v898)
                      {
                        memset(__b, 255, 8 * v898);
                        goto LABEL_1318;
                      }
                      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v896);
                    }
                    LODWORD(v907) = 0;
                    sub_1CC7AF5D4((uint64_t)v912, (uint64_t)v912 + 80 * v913);
                    LODWORD(v913) = 0;
LABEL_1320:
                    unsigned int v784 = *(_DWORD *)(v25 + 4936);
                    uint64_t v69 = v869;
                    uint64_t v82 = v860;
                    uint64_t v83 = (uint64_t *)v858;
                    if (v784 || *(_DWORD *)(v25 + 4940))
                    {
                      uint64_t v785 = *(unsigned int *)(v25 + 4944);
                      if (v785 <= 4 * v784 || v785 < 0x41)
                      {
                        if (v785)
                        {
                          uint64_t v792 = *(void *)v869 + 24;
                          uint64_t v793 = 40 * v785;
                          do
                          {
                            uint64_t v794 = *(void *)(v792 - 24);
                            if (v794 != -4096)
                            {
                              if (v794 != -8192)
                              {
                                v795 = *(void **)(v792 - 16);
                                if ((void *)v792 != v795) {
                                  free(v795);
                                }
                              }
                              *(void *)(v792 - 24) = -4096;
                            }
                            v792 += 40;
                            v793 -= 40;
                          }
                          while (v793);
                        }
                        *(void *)(v25 + 4936) = 0;
                      }
                      else
                      {
                        sub_1CC13D5A8(v869);
                        if (v784)
                        {
                          int v786 = 1 << (33 - __clz(v784 - 1));
                          if (v786 <= 64) {
                            unsigned int v784 = 64;
                          }
                          else {
                            unsigned int v784 = v786;
                          }
                        }
                        if (v784 == *(_DWORD *)(v25 + 4944))
                        {
                          *(void *)(v25 + 4936) = 0;
                          if (v784)
                          {
                            v815 = *(void **)(v25 + 4928);
                            uint64_t v816 = 40 * v784;
                            do
                            {
                              void *v815 = -4096;
                              v815 += 5;
                              v816 -= 40;
                            }
                            while (v816);
                          }
                        }
                        else
                        {
                          MEMORY[0x1D25D9CD0](*(void *)v869, 8);
                          if (v784)
                          {
                            unint64_t v787 = (4 * v784 / 3 + 1) | ((unint64_t)(4 * v784 / 3 + 1) >> 1);
                            unint64_t v788 = v787 | (v787 >> 2) | ((v787 | (v787 >> 2)) >> 4);
                            LODWORD(v788) = (((v788 | (v788 >> 8)) >> 16) | v788 | (v788 >> 8)) + 1;
                            *(_DWORD *)(v25 + 4944) = v788;
                            v789 = operator new(40 * v788, (std::align_val_t)8uLL);
                            *(void *)(v25 + 4928) = v789;
                            *(void *)(v25 + 4936) = 0;
                            uint64_t v790 = *(unsigned int *)(v25 + 4944);
                            if (v790)
                            {
                              uint64_t v791 = 40 * v790;
                              do
                              {
                                void *v789 = -4096;
                                v789 += 5;
                                v791 -= 40;
                              }
                              while (v791);
                            }
                          }
                          else
                          {
                            *(void *)uint64_t v869 = 0;
                            *(void *)(v869 + 8) = 0;
                            *(_DWORD *)(v869 + 16) = 0;
                          }
                        }
                      }
                    }
                    sub_1CC0A1FD4(v867);
                    v796 = *(void **)(v25 + 4984);
                    uint64_t v81 = a1 + 4672;
                    if (v796 == *(void **)(v25 + 4976))
                    {
LABEL_1345:
                      void *v874 = 0;
                    }
                    else
                    {
                      uint64_t v797 = *(unsigned int *)(v25 + 4992);
                      if (v797 < 0x21
                        || 4 * (*(_DWORD *)(v25 + 4996) - *(_DWORD *)(v25 + 5000)) >= v797)
                      {
                        memset(v796, 255, 8 * v797);
                        goto LABEL_1345;
                      }
                      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)v70);
                    }
                    sub_1CC7AF5D4(*(void *)(v25 + 5040), *(void *)(v25 + 5040) + 80 * *(unsigned int *)(v25 + 5048));
                    *(_DWORD *)(v25 + 5048) = 0;
                    sub_1CC7AF5D4(*(void *)(v25 + 5216), *(void *)(v25 + 5216) + 80 * *(unsigned int *)(v25 + 5224));
                    *(_DWORD *)(v25 + 5224) = 0;
LABEL_1347:
                    if (++v82 == v83) {
                      goto LABEL_1399;
                    }
                    goto LABEL_112;
                  }
                  unsigned int v799 = *(_DWORD *)(a1 + 40);
                  if (v799 == -1)
                  {
                    *(_DWORD *)(a1 + 40) = 0;
                    uint64_t v800 = *(void *)(a1 + 32);
                    uint64_t v801 = v800 + 72;
                    uint64_t v802 = *(void *)(v800 + 80);
                    if (v802 == v800 + 72)
                    {
                      unsigned int v799 = 0;
                    }
                    else
                    {
                      unsigned int v799 = 0;
                      do
                      {
                        uint64_t v803 = v802 - 24;
                        if (!v802) {
                          uint64_t v803 = 0;
                        }
                        uint64_t v804 = v803 + 40;
                        --v799;
                        uint64_t v805 = v804;
                        do
                        {
                          uint64_t v805 = *(void *)(v805 + 8);
                          ++v799;
                        }
                        while (v805 != v804);
                        uint64_t v802 = *(void *)(v802 + 8);
                      }
                      while (v802 != v801);
                      *(_DWORD *)(a1 + 40) = v799;
                    }
                  }
                  if (v349)
                  {
                    unsigned int v807 = 0;
                    unsigned int v808 = v799 >> 2;
                    v809 = &v341[8 * v349];
                    do
                    {
                      uint64_t v810 = *(void *)v341 + 40;
                      v807 -= v417;
                      uint64_t v811 = v810;
                      do
                      {
                        uint64_t v811 = *(void *)(v811 + 8);
                        v807 += v417;
                      }
                      while (v811 != v810);
                      if (v808 < v807) {
                        goto LABEL_1315;
                      }
                      for (uint64_t n = *(void *)(*(void *)v341 + 48); n != v810; uint64_t n = *(void *)(n + 8))
                      {
                        if (n) {
                          uint64_t v813 = n - 24;
                        }
                        else {
                          uint64_t v813 = 0;
                        }
                        if (*(unsigned char *)(v813 + 16) == 84)
                        {
                          uint64_t v814 = *(void *)(v813 + 64);
                          if (v814)
                          {
                            if ((*(unsigned char *)(v814 + 12) & 0x40) != 0) {
                              goto LABEL_1315;
                            }
                          }
                          if (llvm::CallBase::hasFnAttrOnCalledFunction(v813, 6)) {
                            goto LABEL_1315;
                          }
                        }
                      }
                      v341 += 8;
                    }
                    while (v341 != v809);
                    unsigned int v417 = v913;
                  }
LABEL_697:
                  v418 = (char *)v912;
                  v419 = (char *)v912 + 80 * v417 - 80;
                  v864 = v419;
                  while (2)
                  {
                    if (v418 == v419) {
                      goto LABEL_1315;
                    }
                    v420 = v906;
                    int v876 = v907;
                    uint64_t v421 = *(void *)v418;
                    v870 = v418;
                    uint64_t v422 = *((unsigned int *)v418 + 2);
                    uint64_t v902 = a3;
                    v920 = &v921.u64[1];
                    v921.i64[0] = 0x2000000000;
                    uint64_t v887 = v422;
                    if (*(unsigned char *)v872)
                    {
                      int v423 = 4;
                      v424 = v875;
                      uint64_t v425 = a1;
                      goto LABEL_701;
                    }
                    uint64_t v425 = a1;
                    int v423 = *(_DWORD *)(a1 + 4712);
                    if (!v423)
                    {
                      v434 = 0;
                      goto LABEL_714;
                    }
                    v424 = *(void ***)(a1 + 4704);
LABEL_701:
                    int v426 = v423 - 1;
                    unsigned int v427 = v426 & v863;
                    v428 = &v424[2 * (v426 & v863)];
                    uint64_t v429 = *v428;
                    if (*v428 != a3)
                    {
                      v430 = 0;
                      int v431 = 1;
                      while (v429 != -4096)
                      {
                        if (v430) {
                          BOOL v432 = 0;
                        }
                        else {
                          BOOL v432 = v429 == -8192;
                        }
                        if (v432) {
                          v430 = v428;
                        }
                        unsigned int v433 = v427 + v431++;
                        unsigned int v427 = v433 & v426;
                        v428 = &v424[2 * v427];
                        uint64_t v429 = *v428;
                        if (*v428 == a3) {
                          goto LABEL_715;
                        }
                      }
                      if (v430) {
                        v434 = v430;
                      }
                      else {
                        v434 = v428;
                      }
LABEL_714:
                      v428 = sub_1CC7B653C((uint64_t)v872, (uint64_t)&v902, &v902, v434);
                      void *v428 = v902;
                      v428[1] = 0;
                    }
LABEL_715:
                    v428[1] = a3;
                    v882 = v420;
                    if (v876)
                    {
                      uint64_t v435 = *v420;
                      __src = 0;
                      v436 = *(uint64_t **)(v425 + 56);
                      int v437 = *((_DWORD *)v436 + 4);
                      if (!v437) {
                        goto LABEL_722;
                      }
                      uint64_t v438 = *v436;
                      unsigned int v439 = v437 - 1;
                      uint64_t v440 = (v437 - 1) & ((v435 >> 4) ^ (v435 >> 9));
                      uint64_t v441 = *(void *)(*v436 + 16 * v440);
                      if (v435 == v441)
                      {
LABEL_721:
                        v444 = *(void **)(v438 + 16 * v440 + 8);
                      }
                      else
                      {
                        int v442 = 1;
                        while (v441 != -4096)
                        {
                          int v443 = v440 + v442++;
                          uint64_t v440 = v443 & v439;
                          uint64_t v441 = *(void *)(v438 + 16 * v440);
                          if (v435 == v441) {
                            goto LABEL_721;
                          }
                        }
LABEL_722:
                        v444 = 0;
                      }
                      __src = v444;
                      int v445 = *(_DWORD *)v872;
                      if (*(_DWORD *)v872)
                      {
                        int v446 = 4;
                        v447 = v875;
LABEL_725:
                        int v448 = v446 - 1;
                        LODWORD(v449) = (v446 - 1) & ((v444 >> 4) ^ (v444 >> 9));
                        v450 = (void **)&v447[2 * v449];
                        v451 = *v450;
                        if (*v450 == v444)
                        {
                          if ((v445 & 1) == 0) {
                            goto LABEL_727;
                          }
                          goto LABEL_736;
                        }
                        int v454 = 1;
                        while (v451 != (void *)-4096)
                        {
                          int v455 = v449 + v454++;
                          uint64_t v449 = v455 & v448;
                          v451 = v447[2 * v449];
                          if (v451 == v444)
                          {
                            v450 = (void **)&v447[2 * v449];
                            if ((v445 & 1) == 0)
                            {
LABEL_727:
                              v452 = *(void ***)(v425 + 4704);
                              uint64_t v453 = *(unsigned int *)(v425 + 4712);
                              goto LABEL_737;
                            }
LABEL_736:
                            v452 = v875;
                            uint64_t v453 = 4;
LABEL_737:
                            if (&v452[2 * v453] != (void **)v450)
                            {
                              v457 = v450[1];
                              goto LABEL_813;
                            }
                            v436[16] += 152;
                            uint64_t v458 = v436[6];
                            if (((v458 + 7) & 0xFFFFFFFFFFFFFFF8) - v458 + 152 > v436[7] - v458)
                            {
                              unsigned int v507 = *((_DWORD *)v436 + 18) >> 7;
                              if (v507 >= 0x1E) {
                                LOBYTE(v507) = 30;
                              }
                              uint64_t v508 = 4096 << v507;
                              v457 = operator new(4096 << v507, (std::align_val_t)8uLL);
                              unint64_t v509 = *((unsigned int *)v436 + 18);
                              if (v509 >= *((unsigned int *)v436 + 19)) {
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                              }
                              *(void *)(v436[8] + 8 * v509) = v457;
                              ++*((_DWORD *)v436 + 18);
                              v436[7] = (uint64_t)v457 + v508;
                              uint64_t v425 = a1;
                            }
                            else
                            {
                              v457 = (void *)((v458 + 7) & 0xFFFFFFFFFFFFFFF8);
                            }
                            v436[6] = (uint64_t)(v457 + 19);
                            v457[18] = 0;
                            *((_OWORD *)v457 + 7) = 0u;
                            *((_OWORD *)v457 + 8) = 0u;
                            *((_OWORD *)v457 + 5) = 0u;
                            *((_OWORD *)v457 + 6) = 0u;
                            *((_OWORD *)v457 + 3) = 0u;
                            *((_OWORD *)v457 + 4) = 0u;
                            *((_OWORD *)v457 + 1) = 0u;
                            *((_OWORD *)v457 + 2) = 0u;
                            *(_OWORD *)v457 = 0u;
                            v457[7] = v457 + 11;
                            v457[8] = v457 + 11;
                            *((_DWORD *)v457 + 18) = 8;
                            if (*(unsigned char *)v872)
                            {
                              int v459 = 4;
                              v460 = v875;
                              goto LABEL_743;
                            }
                            int v459 = *(_DWORD *)(v425 + 4712);
                            if (!v459)
                            {
                              v470 = 0;
                              goto LABEL_756;
                            }
                            v460 = *(void ***)(v425 + 4704);
LABEL_743:
                            v461 = (uint64_t *)__src;
                            int v462 = v459 - 1;
                            unsigned int v463 = ((__src >> 4) ^ (__src >> 9)) & v462;
                            v464 = &v460[2 * v463];
                            v465 = (void *)*v464;
                            if (__src != (void *)*v464)
                            {
                              v466 = 0;
                              int v467 = 1;
                              while (v465 != (void *)-4096)
                              {
                                if (v466) {
                                  BOOL v468 = 0;
                                }
                                else {
                                  BOOL v468 = v465 == (void *)-8192;
                                }
                                if (v468) {
                                  v466 = v464;
                                }
                                unsigned int v469 = v463 + v467++;
                                unsigned int v463 = v469 & v462;
                                v464 = &v460[2 * v463];
                                v465 = (void *)*v464;
                                if (__src == (void *)*v464) {
                                  goto LABEL_757;
                                }
                              }
                              if (v466) {
                                v470 = v466;
                              }
                              else {
                                v470 = v464;
                              }
LABEL_756:
                              v464 = sub_1CC7B653C((uint64_t)v872, (uint64_t)&__src, &__src, v470);
                              void *v464 = __src;
                              v464[1] = 0;
                              v461 = (uint64_t *)__src;
                            }
LABEL_757:
                            v464[1] = v457;
                            *(void *)&long long v930 = 0;
                            uint64_t v471 = *v461;
                            *(void *)&long long v930 = v471;
                            if (v471)
                            {
                              if (*(unsigned char *)v872)
                              {
                                int v472 = 4;
                                v473 = v875;
                                goto LABEL_760;
                              }
                              int v472 = *(_DWORD *)(v425 + 4712);
                              if (!v472)
                              {
                                v492 = 0;
                                goto LABEL_784;
                              }
                              v473 = *(void ***)(v425 + 4704);
LABEL_760:
                              int v474 = v472 - 1;
                              unsigned int v475 = v474 & ((v471 >> 4) ^ (v471 >> 9));
                              v476 = &v473[2 * v475];
                              uint64_t v477 = *v476;
                              if (v471 != *v476)
                              {
                                v478 = 0;
                                int v479 = 1;
                                while (v477 != -4096)
                                {
                                  if (v478) {
                                    BOOL v480 = 0;
                                  }
                                  else {
                                    BOOL v480 = v477 == -8192;
                                  }
                                  if (v480) {
                                    v478 = v476;
                                  }
                                  unsigned int v481 = v475 + v479++;
                                  unsigned int v475 = v481 & v474;
                                  v476 = &v473[2 * v475];
                                  uint64_t v477 = *v476;
                                  if (v471 == *v476) {
                                    goto LABEL_785;
                                  }
                                }
                                if (v478) {
                                  v492 = v478;
                                }
                                else {
                                  v492 = v476;
                                }
LABEL_784:
                                v476 = sub_1CC7B653C((uint64_t)v872, (uint64_t)&v930, &v930, v492);
                                void *v476 = v930;
                                v476[1] = 0;
                              }
LABEL_785:
                              v493 = (void *)v476[1];
                              void *v457 = v493;
                              v495 = (void *)v493[2];
                              unint64_t v494 = v493[3];
                              if ((unint64_t)v495 < v494)
                              {
                                void *v495 = v457;
                                v496 = v495 + 1;
                                goto LABEL_804;
                              }
                              v497 = (void *)v493[1];
                              uint64_t v498 = v495 - v497;
                              unint64_t v499 = v498 + 1;
                              if (!((unint64_t)(v498 + 1) >> 61))
                              {
                                uint64_t v500 = v494 - (void)v497;
                                if (v500 >> 2 > v499) {
                                  unint64_t v499 = v500 >> 2;
                                }
                                if ((unint64_t)v500 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v501 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v501 = v499;
                                }
                                if (!v501)
                                {
                                  v502 = 0;
                                  goto LABEL_799;
                                }
                                if (!(v501 >> 61))
                                {
                                  v502 = (char *)operator new(8 * v501);
LABEL_799:
                                  v503 = &v502[8 * v498];
                                  *(void *)v503 = v457;
                                  v496 = v503 + 8;
                                  if (v495 != v497)
                                  {
                                    do
                                    {
                                      uint64_t v504 = *--v495;
                                      *((void *)v503 - 1) = v504;
                                      v503 -= 8;
                                    }
                                    while (v495 != v497);
                                    v495 = (void *)v493[1];
                                  }
                                  v493[1] = v503;
                                  v493[2] = v496;
                                  v493[3] = &v502[8 * v501];
                                  if (v495) {
                                    operator delete(v495);
                                  }
LABEL_804:
                                  v493[2] = v496;
LABEL_813:
                                  __src = v457;
                                  *(void *)&long long v930 = ".duplicated";
                                  LOWORD(v932) = 259;
                                  llvm::CloneBasicBlock();
                                }
LABEL_1491:
                                sub_1CB833614();
                              }
LABEL_1490:
                              abort();
                            }
                            v482 = *(void **)(v425 + 56);
                            v484 = (void *)v482[4];
                            unint64_t v483 = v482[5];
                            if ((unint64_t)v484 >= v483)
                            {
                              v486 = (void *)v482[3];
                              uint64_t v487 = v484 - v486;
                              unint64_t v488 = v487 + 1;
                              if ((unint64_t)(v487 + 1) >> 61) {
                                goto LABEL_1490;
                              }
                              uint64_t v489 = v483 - (void)v486;
                              if (v489 >> 2 > v488) {
                                unint64_t v488 = v489 >> 2;
                              }
                              if ((unint64_t)v489 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v490 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v490 = v488;
                              }
                              if (v490)
                              {
                                if (v490 >> 61) {
                                  goto LABEL_1491;
                                }
                                v491 = (char *)operator new(8 * v490);
                              }
                              else
                              {
                                v491 = 0;
                              }
                              v505 = &v491[8 * v487];
                              *(void *)v505 = v457;
                              v485 = v505 + 8;
                              if (v484 != v486)
                              {
                                do
                                {
                                  uint64_t v506 = *--v484;
                                  *((void *)v505 - 1) = v506;
                                  v505 -= 8;
                                }
                                while (v484 != v486);
                                v484 = (void *)v482[3];
                              }
                              v482[3] = v505;
                              v482[4] = v485;
                              v482[5] = &v491[8 * v490];
                              if (v484) {
                                operator delete(v484);
                              }
                            }
                            else
                            {
                              void *v484 = v457;
                              v485 = v484 + 1;
                            }
                            v482[4] = v485;
                            goto LABEL_813;
                          }
                        }
                        if (v445)
                        {
                          v447 = v875;
                          uint64_t v456 = 4;
                        }
                        else
                        {
                          v447 = *(void ***)(v425 + 4704);
                          uint64_t v456 = *(unsigned int *)(v425 + 4712);
                        }
                      }
                      else
                      {
                        v447 = *(void ***)(v425 + 4704);
                        int v446 = *(_DWORD *)(v425 + 4712);
                        if (v446) {
                          goto LABEL_725;
                        }
                        uint64_t v456 = 0;
                      }
                      v450 = (void **)&v447[2 * v456];
                      if ((v445 & 1) == 0) {
                        goto LABEL_727;
                      }
                      goto LABEL_736;
                    }
                    v510 = v420;
                    if (v887)
                    {
                      uint64_t v888 = v421 + 8 * v887;
                      do
                      {
                        uint64_t v511 = *(void *)(*(void *)v421 + 40);
                        if (v511 == *(void *)v421 + 40)
                        {
                          uint64_t v513 = 0;
                        }
                        else
                        {
                          if (v511) {
                            uint64_t v512 = v511 - 24;
                          }
                          else {
                            uint64_t v512 = 0;
                          }
                          if (*(unsigned __int8 *)(v512 + 16) - 29 >= 0xB) {
                            uint64_t v513 = 0;
                          }
                          else {
                            uint64_t v513 = v512;
                          }
                        }
                        if (*(unsigned char *)(v513 + 16) != 30)
                        {
                          int v514 = 2;
                          switch(*(unsigned char *)(v513 + 16))
                          {
                            case 0x1E:
                              goto LABEL_1492;
                            case 0x1F:
                              int v514 = (*(_DWORD *)(v513 + 20) >> 1) & 0x3FFFFFF;
                              goto LABEL_904;
                            case 0x20:
                            case 0x26:
                              int v514 = (*(_DWORD *)(v513 + 20) & 0x7FFFFFF) - 1;
                              goto LABEL_904;
                            case 0x21:
                              goto LABEL_839;
                            case 0x24:
                              int v514 = *(_WORD *)(v513 + 18) & 1;
                              goto LABEL_904;
                            case 0x25:
                              int v514 = 1;
                              goto LABEL_839;
                            case 0x27:
                              int v514 = *(_DWORD *)(v513 + 80) + 1;
LABEL_904:
                              if (!v514) {
                                goto LABEL_901;
                              }
                              goto LABEL_839;
                            default:
                              goto LABEL_901;
                          }
                        }
                        if ((*(_DWORD *)(v513 + 20) & 0x7FFFFFF) == 3) {
                          int v514 = 2;
                        }
                        else {
                          int v514 = 1;
                        }
LABEL_839:
                        for (iuint64_t i = 0; ii != v514; ++ii)
                        {
                          uint64_t v516 = llvm::Instruction::getSuccessor((llvm::Instruction *)v513, ii);
                          if (*v510 != v516) {
                            continue;
                          }
                          uint64_t v517 = v516;
                          llvm::Instruction::setSuccessor(v513, ii, *(llvm::BasicBlock **)v920);
                          if (*(unsigned char *)(v513 + 16) != 32) {
                            continue;
                          }
                          int v519 = *(_DWORD *)(v513 + 20);
                          if ((v519 & 0x40000000) != 0) {
                            v520 = *(uint64_t **)(v513 - 8);
                          }
                          else {
                            v520 = (uint64_t *)(v513 - 32 * (v519 & 0x7FFFFFF));
                          }
                          v521 = *(llvm::BasicBlock **)v920;
                          uint64_t v522 = *v520;
                          if (v522) {
                            BOOL v523 = *(unsigned char *)(v522 + 16) == 4;
                          }
                          else {
                            BOOL v523 = 0;
                          }
                          if (v523)
                          {
                            sub_1CD5AB76C(v513, 0, *(void *)v920);
                            continue;
                          }
                          __src = &v938;
                          HIDWORD(v937) = 10;
                          uint64_t v938 = v522;
                          *(void *)&long long v930 = &v932;
                          *((void *)&v930 + 1) = &v932;
                          *(void *)&long long v931 = 16;
                          unsigned int v524 = 1;
                          DWORD2(v931) = 0;
                          do
                          {
                            uint64_t v525 = *((void *)__src + --v524);
                            LODWORD(v937) = v524;
                            if (v525) {
                              BOOL v526 = *(unsigned __int8 *)(v525 + 16) >= 0x1Cu;
                            }
                            else {
                              BOOL v526 = 0;
                            }
                            if (v526)
                            {
                              int v527 = *(_DWORD *)(v525 + 20);
                              uint64_t v528 = v527 & 0x7FFFFFF;
                              if ((v527 & 0x7FFFFFF) != 0)
                              {
                                uint64_t v529 = 0;
                                while (1)
                                {
                                  int v530 = *(_DWORD *)(v525 + 20);
                                  if ((v530 & 0x40000000) != 0) {
                                    uint64_t v531 = *(void *)(v525 - 8);
                                  }
                                  else {
                                    uint64_t v531 = v525 - 32 * (v530 & 0x7FFFFFF);
                                  }
                                  v532 = *(unsigned char **)(v531 + 32 * v529);
                                  if (v532) {
                                    BOOL v533 = v532[16] == 4;
                                  }
                                  else {
                                    BOOL v533 = 0;
                                  }
                                  if (v533)
                                  {
                                    if (*((void *)v532 - 4) != v517) {
                                      goto LABEL_887;
                                    }
                                    v538 = llvm::BlockAddress::get(*((llvm::BlockAddress **)v521 + 7), v521, v518);
                                    int v539 = *(_DWORD *)(v525 + 20);
                                    if ((v539 & 0x40000000) != 0) {
                                      uint64_t v540 = *(void *)(v525 - 8);
                                    }
                                    else {
                                      uint64_t v540 = v525 - 32 * (v539 & 0x7FFFFFF);
                                    }
                                    uint64_t v541 = v540 + 32 * v529;
                                    if (*(void *)v541)
                                    {
                                      **(void **)(v541 + 16) = *(void *)(v541 + 8);
                                      uint64_t v542 = *(void *)(v541 + 8);
                                      if (v542) {
                                        *(void *)(v542 + 16) = *(void *)(v541 + 16);
                                      }
                                    }
                                    *(void *)uint64_t v541 = v538;
                                    if (v538)
                                    {
                                      uint64_t v545 = *((void *)v538 + 1);
                                      v543 = (void *)((char *)v538 + 8);
                                      uint64_t v544 = v545;
                                      uint64_t v546 = v540 + 32 * v529;
                                      *(void *)(v546 + 8) = v545;
                                      if (v545) {
                                        *(void *)(v544 + 16) = v546 + 8;
                                      }
                                      *(void *)(v546 + 16) = v543;
                                      void *v543 = v541;
                                    }
                                  }
                                  if (*((void *)&v930 + 1) == (void)v930)
                                  {
                                    uint64_t v534 = DWORD1(v931);
                                    if (DWORD1(v931))
                                    {
                                      v535 = 0;
                                      uint64_t v536 = 8 * DWORD1(v931);
                                      v537 = (void *)*((void *)&v930 + 1);
                                      while ((unsigned char *)*v537 != v532)
                                      {
                                        if (*v537 == -2) {
                                          v535 = v537;
                                        }
                                        ++v537;
                                        v536 -= 8;
                                        if (!v536)
                                        {
                                          if (!v535) {
                                            goto LABEL_872;
                                          }
                                          void *v535 = v532;
                                          --DWORD2(v931);
                                          goto LABEL_885;
                                        }
                                      }
                                      goto LABEL_887;
                                    }
LABEL_872:
                                    if (DWORD1(v931) < v931)
                                    {
                                      ++DWORD1(v931);
                                      *(void *)(*((void *)&v930 + 1) + 8 * v534) = v532;
LABEL_885:
                                      if (v937 >= (unint64_t)HIDWORD(v937)) {
                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                      }
                                      *((void *)__src + v937) = v532;
                                      LODWORD(v937) = v937 + 1;
                                      goto LABEL_887;
                                    }
                                  }
                                  llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v930, v532);
                                  if (v547) {
                                    goto LABEL_885;
                                  }
LABEL_887:
                                  if (++v529 == v528)
                                  {
                                    unsigned int v524 = v937;
                                    break;
                                  }
                                }
                              }
                            }
                          }
                          while (v524);
                          if (*((void *)&v930 + 1) != (void)v930) {
                            free(*((void **)&v930 + 1));
                          }
                          v510 = v882;
                          if (__src != &v938) {
                            free(__src);
                          }
                        }
LABEL_901:
                        v421 += 8;
                        uint64_t v425 = a1;
                      }
                      while (v421 != v888);
                    }
                    long long v931 = 0u;
                    long long v932 = 0u;
                    long long v930 = 0u;
                    llvm::SSAUpdater::~SSAUpdater((void **)&v930);
                    int v548 = *(_DWORD *)v872;
                    v549 = v883;
                    if (*(_DWORD *)v872 <= 1u && !*(_DWORD *)(v425 + 4700))
                    {
LABEL_919:
                      if (v920 != &v921.u64[1]) {
                        free(v920);
                      }
                      if (!v907)
                      {
LABEL_1304:
                        sub_1CC7B6DC8(v549);
                        if (*v865)
                        {
                          sub_1CC009394((uint64_t)v854);
                          MEMORY[0x1D25D9CD0](*v854, 8);
                          unsigned char *v865 = 0;
                        }
                        v418 = (char *)(v870 + 10);
                        v419 = v864;
                        continue;
                      }
                      v554 = (uint64_t *)v906;
                      v555 = (uint64_t *)((char *)v906 + 8 * v907);
                      v889 = v555;
                      while (2)
                      {
                        if (!sub_1CC7B5D00(*(void *)(v425 + 4672), *(_DWORD *)(v425 + 4688), *v554, &v920))goto LABEL_1271; {
                        *(void *)&long long v918 = 0;
                        }
                        v556 = (void *)*v554;
                        int64x2_t v921 = (int64x2_t)2uLL;
                        v922 = v556;
                        if (v556 != (void *)-8192 && v556 != (void *)-4096 && v556 != 0) {
                          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v921);
                        }
                        v920 = &unk_1F2615EC8;
                        uint64_t v923 = (uint64_t)v549;
                        v558 = sub_1CC4CFF80((uint64_t)v549, &v920);
                        if (v922 != (void *)-8192 && v922 != (void *)-4096 && v922)
                        {
                          unint64_t v559 = v921.i64[0] & 0xFFFFFFFFFFFFFFF8;
                          *(void *)(v921.i64[0] & 0xFFFFFFFFFFFFFFF8) = v921.i64[1];
                          if (v921.i64[1])
                          {
                            *(void *)v921.i64[1] = *(void *)v921.i64[1] & 7 | v559;
                          }
                          else
                          {
                            v560 = v922;
                            v561 = ***(int32x2_t ****)v922;
                            unint64_t v562 = (unint64_t)v561[303];
                            if (v562 <= v559)
                            {
                              uint64_t v563 = v561[305].u32[0];
                              if (v562 + 16 * v563 > v559)
                              {
                                unsigned int v564 = v563 - 1;
                                LODWORD(v565) = v564 & ((v922 >> 4) ^ (v922 >> 9));
                                v566 = (void **)(v562 + 16 * v565);
                                v567 = *v566;
                                if (v922 == *v566)
                                {
LABEL_941:
                                  *v566 = (void *)-8192;
                                  v561[304] = vadd_s32(v561[304], (int32x2_t)0x1FFFFFFFFLL);
                                  v560 = v922;
                                }
                                else
                                {
                                  int v568 = 1;
                                  while (v567 != (void *)-4096)
                                  {
                                    int v569 = v565 + v568++;
                                    uint64_t v565 = v569 & v564;
                                    v567 = *(void **)(v562 + 16 * v565);
                                    if (v922 == v567)
                                    {
                                      v566 = (void **)(v562 + 16 * v565);
                                      goto LABEL_941;
                                    }
                                  }
                                }
                                v560[17] &= ~1u;
                              }
                            }
                          }
                        }
                        *(void *)&long long v918 = v558[7];
                        uint64_t v570 = *v554;
                        v920 = 0;
                        if (sub_1CBC5D2B4(*(void *)(v425 + 4624), *(_DWORD *)(v425 + 4640), v570, &v920)&& v920 != (void *)(*(void *)(v425 + 4624) + 16 * *(unsigned int *)(v425 + 4640)))
                        {
                          uint64_t v570 = *((void *)v920 + 1);
                        }
                        unsigned int v571 = *(_DWORD *)(v425 + 4664);
                        if (!v571)
                        {
                          v574 = 0;
                          goto LABEL_960;
                        }
                        uint64_t v572 = *(void *)(v425 + 4648);
                        unsigned int v573 = ((v570 >> 4) ^ (v570 >> 9)) & (v571 - 1);
                        v574 = (uint64_t *)(v572 + 40 * v573);
                        uint64_t v575 = *v574;
                        if (v570 != *v574)
                        {
                          v576 = 0;
                          int v577 = 1;
                          while (v575 != -4096)
                          {
                            if (v576) {
                              BOOL v578 = 0;
                            }
                            else {
                              BOOL v578 = v575 == -8192;
                            }
                            if (v578) {
                              v576 = v574;
                            }
                            unsigned int v579 = v573 + v577++;
                            unsigned int v573 = v579 & (v571 - 1);
                            v574 = (uint64_t *)(v572 + 40 * v573);
                            uint64_t v575 = *v574;
                            if (v570 == *v574) {
                              goto LABEL_966;
                            }
                          }
                          if (v576) {
                            v574 = v576;
                          }
LABEL_960:
                          int v580 = *(_DWORD *)(v425 + 4656);
                          if (4 * v580 + 4 >= 3 * v571)
                          {
                            sub_1CC7B6A18((uint64_t)v855, 2 * v571);
                            uint64_t v768 = *(void *)(v425 + 4648);
                            int v769 = *(_DWORD *)(v425 + 4664) - 1;
                            unsigned int v770 = v769 & ((v570 >> 4) ^ (v570 >> 9));
                            v574 = (uint64_t *)(v768 + 40 * v770);
                            uint64_t v771 = *v574;
                            if (*v574 == v570)
                            {
LABEL_1286:
                              uint64_t v581 = v570;
                            }
                            else
                            {
                              v772 = 0;
                              int v773 = 1;
                              while (v771 != -4096)
                              {
                                if (v772) {
                                  BOOL v774 = 0;
                                }
                                else {
                                  BOOL v774 = v771 == -8192;
                                }
                                if (v774) {
                                  v772 = v574;
                                }
                                unsigned int v775 = v770 + v773++;
                                unsigned int v770 = v775 & v769;
                                v574 = (uint64_t *)(v768 + 40 * v770);
                                uint64_t v771 = *v574;
                                if (*v574 == v570) {
                                  goto LABEL_1286;
                                }
                              }
                              if (v772) {
                                v574 = v772;
                              }
LABEL_962:
                              uint64_t v581 = *v574;
                            }
                          }
                          else
                          {
                            if (v571 + ~v580 - *(_DWORD *)(v425 + 4660) > v571 >> 3) {
                              goto LABEL_962;
                            }
                            sub_1CC7B6A18((uint64_t)v855, v571);
                            uint64_t v776 = *(void *)(v425 + 4648);
                            int v777 = *(_DWORD *)(v425 + 4664) - 1;
                            unsigned int v778 = v777 & ((v570 >> 4) ^ (v570 >> 9));
                            v574 = (uint64_t *)(v776 + 40 * v778);
                            uint64_t v779 = *v574;
                            if (*v574 != v570)
                            {
                              v780 = 0;
                              int v781 = 1;
                              while (v779 != -4096)
                              {
                                if (v780) {
                                  BOOL v782 = 0;
                                }
                                else {
                                  BOOL v782 = v779 == -8192;
                                }
                                if (v782) {
                                  v780 = v574;
                                }
                                unsigned int v783 = v778 + v781++;
                                unsigned int v778 = v783 & v777;
                                v574 = (uint64_t *)(v776 + 40 * v778);
                                uint64_t v779 = *v574;
                                if (*v574 == v570) {
                                  goto LABEL_1300;
                                }
                              }
                              if (v780) {
                                v574 = v780;
                              }
                              uint64_t v425 = a1;
                              goto LABEL_962;
                            }
LABEL_1300:
                            uint64_t v581 = v570;
                            uint64_t v425 = a1;
                          }
                          ++*(_DWORD *)(v425 + 4656);
                          if (v581 != -4096) {
                            --*(_DWORD *)(v425 + 4660);
                          }
                          uint64_t *v574 = v570;
                          v574[1] = (uint64_t)(v574 + 3);
                          v574[2] = 0x200000000;
                        }
LABEL_966:
                        unint64_t v582 = *((unsigned int *)v574 + 4);
                        if (v582 >= *((unsigned int *)v574 + 5)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *(void *)(v574[1] + 8 * v582) = v918;
                        ++*((_DWORD *)v574 + 4);
                        uint64_t v583 = sub_1CC7B5BD0((uint64_t)v880, (uint64_t *)&v918);
                        v584 = (_DWORD *)sub_1CC7B5BD0((uint64_t)v880, v554);
                        v585 = v584;
                        if (v906 != v554)
                        {
                          v920 = (void *)1;
                          int64x2_t v921 = v871;
                          int v586 = *v584;
                          if ((*v584 & 1) != 0 || (uint64_t v587 = v584[4], v587 <= 2))
                          {
                            int v588 = v584[1];
                            LODWORD(v920) = v586 | 1;
                            HIDWORD(v920) = v588;
                            v589 = &v921;
                            size_t v590 = 16;
                          }
                          else
                          {
                            LODWORD(v920) = 0;
                            v589 = operator new(8 * v587, (std::align_val_t)8uLL);
                            v921.i64[0] = (uint64_t)v589;
                            v921.i64[1] = v587;
                            int v586 = *v585;
                            int v767 = v585[1];
                            BOOL v46 = (v920 & 1) == 0;
                            LODWORD(v920) = v920 & 1 | *v585 & 0xFFFFFFFE;
                            HIDWORD(v920) = v767;
                            if (v46)
                            {
                              size_t v590 = 8 * v587;
                            }
                            else
                            {
                              v589 = &v921;
                              size_t v590 = 16;
                            }
                          }
                          if (v586) {
                            v591 = v585 + 2;
                          }
                          else {
                            v591 = (const void *)*((void *)v585 + 1);
                          }
                          memcpy(v589, v591, v590);
                          v922 = v924;
                          uint64_t v923 = 0x200000000;
                          if (v585[8])
                          {
                            sub_1CBB08064((uint64_t)&v922, (uint64_t)(v585 + 6));
                            if (v923)
                            {
                              v592 = (char *)v922;
                              v593 = (char *)v922 + 8 * v923;
                              do
                              {
                                uint64_t v594 = *(void *)v592;
                                v595 = v896;
                                if (__b == v896)
                                {
                                  unsigned int v596 = HIDWORD(v898);
                                  v597 = (char *)__b + 8 * HIDWORD(v898);
                                  if (HIDWORD(v898))
                                  {
                                    uint64_t v598 = 0;
                                    while (*(void *)((char *)__b + v598) != v594)
                                    {
                                      v598 += 8;
                                      if (8 * HIDWORD(v898) == v598) {
                                        goto LABEL_996;
                                      }
                                    }
                                    v597 = (char *)__b + v598;
                                  }
LABEL_996:
                                  v595 = __b;
                                }
                                else
                                {
                                  int v599 = v898 - 1;
                                  unsigned int v600 = (v898 - 1) & ((v594 >> 4) ^ (v594 >> 9));
                                  v597 = (char *)__b + 8 * v600;
                                  uint64_t v601 = *(void *)v597;
                                  if (*(void *)v597 == -1)
                                  {
                                    v602 = 0;
LABEL_1049:
                                    if (v602) {
                                      v597 = v602;
                                    }
                                    unsigned int v596 = HIDWORD(v898);
                                    if (*(void *)v597 != v594) {
                                      v597 = (char *)__b + 8 * v898;
                                    }
                                  }
                                  else
                                  {
                                    v602 = 0;
                                    int v603 = 1;
                                    while (v601 != v594)
                                    {
                                      if (v602) {
                                        BOOL v604 = 0;
                                      }
                                      else {
                                        BOOL v604 = v601 == -2;
                                      }
                                      if (v604) {
                                        v602 = v597;
                                      }
                                      unsigned int v605 = v600 + v603++;
                                      unsigned int v600 = v605 & v599;
                                      v597 = (char *)__b + 8 * (v605 & v599);
                                      uint64_t v601 = *(void *)v597;
                                      if (*(void *)v597 == -1) {
                                        goto LABEL_1049;
                                      }
                                    }
                                    unsigned int v596 = HIDWORD(v898);
                                  }
                                }
                                if (__b == v595) {
                                  unsigned int v606 = v596;
                                }
                                else {
                                  unsigned int v606 = v898;
                                }
                                if (v597 == (char *)__b + 8 * v606) {
                                  goto LABEL_1046;
                                }
                                uint64_t v607 = *(void *)(a1 + 4864);
                                uint64_t v608 = *(unsigned int *)(a1 + 4880);
                                if (v608)
                                {
                                  uint64_t v609 = (v608 - 1) & ((v594 >> 4) ^ (v594 >> 9));
                                  uint64_t v610 = v607 + (v609 << 6);
                                  uint64_t v611 = *(void *)(v610 + 24);
                                  if (v594 == v611) {
                                    goto LABEL_1008;
                                  }
                                  int v612 = 1;
                                  while (v611 != -4096)
                                  {
                                    int v613 = v609 + v612++;
                                    uint64_t v609 = v613 & (v608 - 1);
                                    uint64_t v610 = v607 + (v609 << 6);
                                    uint64_t v611 = *(void *)(v610 + 24);
                                    if (v594 == v611) {
                                      goto LABEL_1008;
                                    }
                                  }
                                }
                                uint64_t v610 = v607 + (v608 << 6);
LABEL_1008:
                                uint64_t v614 = *(void *)(v610 + 56);
                                *(void *)&long long v930 = v614;
                                if (*(unsigned char *)v583)
                                {
                                  int v615 = 2;
                                  uint64_t v616 = v583 + 8;
                                }
                                else
                                {
                                  int v615 = *(_DWORD *)(v583 + 16);
                                  if (!v615)
                                  {
                                    v625 = 0;
                                    goto LABEL_1025;
                                  }
                                  uint64_t v616 = *(void *)(v583 + 8);
                                }
                                int v617 = v615 - 1;
                                unsigned int v618 = v617 & ((v614 >> 4) ^ (v614 >> 9));
                                v619 = (void *)(v616 + 8 * v618);
                                uint64_t v620 = *v619;
                                if (v614 == *v619) {
                                  goto LABEL_1027;
                                }
                                v621 = 0;
                                int v622 = 1;
                                while (v620 != -4096)
                                {
                                  if (v621) {
                                    BOOL v623 = 0;
                                  }
                                  else {
                                    BOOL v623 = v620 == -8192;
                                  }
                                  if (v623) {
                                    v621 = v619;
                                  }
                                  unsigned int v624 = v618 + v622++;
                                  unsigned int v618 = v624 & v617;
                                  v619 = (void *)(v616 + 8 * v618);
                                  uint64_t v620 = *v619;
                                  if (v614 == *v619) {
                                    goto LABEL_1027;
                                  }
                                }
                                if (v621) {
                                  v625 = v621;
                                }
                                else {
                                  v625 = v619;
                                }
LABEL_1025:
                                v626 = sub_1CC0BE7D8(v583, (uint64_t)&v930, &v930, v625);
                                void *v626 = v930;
                                unint64_t v627 = *(unsigned int *)(v583 + 32);
                                if (v627 >= *(unsigned int *)(v583 + 36)) {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                }
                                *(void *)(*(void *)(v583 + 24) + 8 * v627) = v930;
                                ++*(_DWORD *)(v583 + 32);
LABEL_1027:
                                uint64_t v628 = sub_1CC7B5BD0((uint64_t)v880, (uint64_t *)&v930);
                                if (*(unsigned char *)(v628 + 56))
                                {
                                  uint64_t v629 = v628 + 64;
                                  int v630 = 2;
                                }
                                else
                                {
                                  int v630 = *(_DWORD *)(v628 + 72);
                                  if (!v630)
                                  {
                                    v639 = 0;
LABEL_1044:
                                    v640 = sub_1CC0BE7D8(v628 + 56, (uint64_t)&v918, &v918, v639);
                                    void *v640 = v918;
                                    unint64_t v641 = *(unsigned int *)(v628 + 88);
                                    if (v641 >= *(unsigned int *)(v628 + 92)) {
                                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                                    }
                                    *(void *)(*(void *)(v628 + 80) + 8 * v641) = v918;
                                    ++*(_DWORD *)(v628 + 88);
                                    goto LABEL_1046;
                                  }
                                  uint64_t v629 = *(void *)(v628 + 64);
                                }
                                int v631 = v630 - 1;
                                unsigned int v632 = ((v918 >> 4) ^ (v918 >> 9)) & v631;
                                v633 = (void *)(v629 + 8 * v632);
                                uint64_t v634 = *v633;
                                if ((void)v918 != *v633)
                                {
                                  v635 = 0;
                                  int v636 = 1;
                                  while (v634 != -4096)
                                  {
                                    if (v635) {
                                      BOOL v637 = 0;
                                    }
                                    else {
                                      BOOL v637 = v634 == -8192;
                                    }
                                    if (v637) {
                                      v635 = v633;
                                    }
                                    unsigned int v638 = v632 + v636++;
                                    unsigned int v632 = v638 & v631;
                                    v633 = (void *)(v629 + 8 * v632);
                                    uint64_t v634 = *v633;
                                    if ((void)v918 == *v633) {
                                      goto LABEL_1046;
                                    }
                                  }
                                  if (v635) {
                                    v639 = v635;
                                  }
                                  else {
                                    v639 = v633;
                                  }
                                  goto LABEL_1044;
                                }
LABEL_1046:
                                v592 += 8;
                              }
                              while (v592 != v593);
                            }
                          }
                          *(void *)&long long v930 = v918;
                          uint64_t v642 = v585[22];
                          if (v642)
                          {
                            v643 = (void **)*((void *)v585 + 10);
                            v644 = &v643[v642];
                            do
                            {
                              v645 = *v643;
                              __src = *v643;
                              v646 = v896;
                              if (__b == v896)
                              {
                                unsigned int v647 = HIDWORD(v898);
                                v648 = (char *)__b + 8 * HIDWORD(v898);
                                if (HIDWORD(v898))
                                {
                                  uint64_t v649 = 0;
                                  while (*(void **)((char *)__b + v649) != v645)
                                  {
                                    v649 += 8;
                                    if (8 * HIDWORD(v898) == v649) {
                                      goto LABEL_1079;
                                    }
                                  }
                                  v648 = (char *)__b + v649;
                                }
LABEL_1079:
                                v646 = __b;
                              }
                              else
                              {
                                int v650 = v898 - 1;
                                unsigned int v651 = (v898 - 1) & ((v645 >> 4) ^ (v645 >> 9));
                                v648 = (char *)__b + 8 * v651;
                                v652 = *(void **)v648;
                                if (*(void *)v648 == -1)
                                {
                                  v653 = 0;
LABEL_1125:
                                  if (v653) {
                                    v648 = v653;
                                  }
                                  unsigned int v647 = HIDWORD(v898);
                                  if (*(void **)v648 != v645) {
                                    v648 = (char *)__b + 8 * v898;
                                  }
                                }
                                else
                                {
                                  v653 = 0;
                                  int v654 = 1;
                                  while (v652 != v645)
                                  {
                                    if (v653) {
                                      BOOL v655 = 0;
                                    }
                                    else {
                                      BOOL v655 = v652 == (void *)-2;
                                    }
                                    if (v655) {
                                      v653 = v648;
                                    }
                                    unsigned int v656 = v651 + v654++;
                                    unsigned int v651 = v656 & v650;
                                    v648 = (char *)__b + 8 * (v656 & v650);
                                    v652 = *(void **)v648;
                                    if (*(void *)v648 == -1) {
                                      goto LABEL_1125;
                                    }
                                  }
                                  unsigned int v647 = HIDWORD(v898);
                                }
                              }
                              if (__b == v646) {
                                unsigned int v657 = v647;
                              }
                              else {
                                unsigned int v657 = v898;
                              }
                              if (v648 != (char *)__b + 8 * v657) {
                                goto LABEL_1122;
                              }
                              if (*(unsigned char *)(v583 + 56))
                              {
                                int v658 = 2;
                                uint64_t v659 = v583 + 64;
                              }
                              else
                              {
                                int v658 = *(_DWORD *)(v583 + 72);
                                if (!v658)
                                {
                                  v668 = 0;
                                  goto LABEL_1101;
                                }
                                uint64_t v659 = *(void *)(v583 + 64);
                              }
                              int v660 = v658 - 1;
                              unsigned int v661 = v660 & ((v645 >> 4) ^ (v645 >> 9));
                              v662 = (void *)(v659 + 8 * v661);
                              v663 = (void *)*v662;
                              if (v645 == (void *)*v662) {
                                goto LABEL_1103;
                              }
                              v664 = 0;
                              int v665 = 1;
                              while (v663 != (void *)-4096)
                              {
                                if (v664) {
                                  BOOL v666 = 0;
                                }
                                else {
                                  BOOL v666 = v663 == (void *)-8192;
                                }
                                if (v666) {
                                  v664 = v662;
                                }
                                unsigned int v667 = v661 + v665++;
                                unsigned int v661 = v667 & v660;
                                v662 = (void *)(v659 + 8 * v661);
                                v663 = (void *)*v662;
                                if (v645 == (void *)*v662) {
                                  goto LABEL_1103;
                                }
                              }
                              if (v664) {
                                v668 = v664;
                              }
                              else {
                                v668 = v662;
                              }
LABEL_1101:
                              v669 = sub_1CC0BE7D8(v583 + 56, (uint64_t)&__src, &__src, v668);
                              void *v669 = __src;
                              unint64_t v670 = *(unsigned int *)(v583 + 88);
                              if (v670 >= *(unsigned int *)(v583 + 92)) {
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                              }
                              *(void *)(*(void *)(v583 + 80) + 8 * v670) = __src;
                              ++*(_DWORD *)(v583 + 88);
LABEL_1103:
                              uint64_t v671 = sub_1CC7B5BD0((uint64_t)v880, (uint64_t *)&__src);
                              uint64_t v672 = v671;
                              uint64_t v673 = v671 + 8;
                              if (*(unsigned char *)v671)
                              {
                                int v674 = 2;
                              }
                              else
                              {
                                int v674 = *(_DWORD *)(v671 + 16);
                                if (!v674)
                                {
                                  v683 = 0;
LABEL_1120:
                                  v684 = sub_1CC0BE7D8(v671, (uint64_t)&v930, &v930, v683);
                                  void *v684 = v930;
                                  unint64_t v685 = *(unsigned int *)(v672 + 32);
                                  if (v685 >= *(unsigned int *)(v672 + 36)) {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                                  }
                                  *(void *)(*(void *)(v672 + 24) + 8 * v685) = v930;
                                  ++*(_DWORD *)(v672 + 32);
                                  goto LABEL_1122;
                                }
                                uint64_t v673 = *(void *)(v671 + 8);
                              }
                              int v675 = v674 - 1;
                              unsigned int v676 = ((v930 >> 4) ^ (v930 >> 9)) & v675;
                              v677 = (void *)(v673 + 8 * v676);
                              uint64_t v678 = *v677;
                              if ((void)v930 != *v677)
                              {
                                v679 = 0;
                                int v680 = 1;
                                while (v678 != -4096)
                                {
                                  if (v679) {
                                    BOOL v681 = 0;
                                  }
                                  else {
                                    BOOL v681 = v678 == -8192;
                                  }
                                  if (v681) {
                                    v679 = v677;
                                  }
                                  unsigned int v682 = v676 + v680++;
                                  unsigned int v676 = v682 & v675;
                                  v677 = (void *)(v673 + 8 * v676);
                                  uint64_t v678 = *v677;
                                  if ((void)v930 == *v677) {
                                    goto LABEL_1122;
                                  }
                                }
                                if (v679) {
                                  v683 = v679;
                                }
                                else {
                                  v683 = v677;
                                }
                                goto LABEL_1120;
                              }
LABEL_1122:
                              ++v643;
                            }
                            while (v643 != v644);
                          }
                          if (v922 != v924) {
                            free(v922);
                          }
                          v549 = v883;
                          uint64_t v425 = a1;
                          v555 = v889;
                          if ((v920 & 1) == 0) {
                            MEMORY[0x1D25D9CD0](v921.i64[0], 8);
                          }
LABEL_1271:
                          if (++v554 == v555) {
                            goto LABEL_1304;
                          }
                          continue;
                        }
                        break;
                      }
                      uint64_t v686 = v870[5];
                      uint64_t v687 = 48;
                      if (v686 == v870[4]) {
                        uint64_t v687 = 52;
                      }
                      uint64_t v688 = *(unsigned int *)((char *)v870 + v687);
                      if (v688)
                      {
                        uint64_t v689 = 8 * v688;
                        v690 = (unint64_t *)v870[5];
                        while (*v690 >= 0xFFFFFFFFFFFFFFFELL)
                        {
                          ++v690;
                          v689 -= 8;
                          if (!v689) {
                            goto LABEL_1194;
                          }
                        }
                      }
                      else
                      {
                        v690 = (unint64_t *)v870[5];
                      }
                      v691 = (unint64_t *)(v686 + 8 * v688);
                      if (v690 != v691)
                      {
                        v692 = (void *)*v690;
LABEL_1148:
                        uint64_t v693 = *v554;
                        v920 = v692;
                        *(void *)&long long v930 = v693;
                        __src = (void *)v918;
                        uint64_t v694 = sub_1CC7B5BD0((uint64_t)v880, (uint64_t *)&v920);
                        if (*(unsigned char *)v583)
                        {
                          int v695 = 2;
                          uint64_t v696 = v583 + 8;
                          goto LABEL_1152;
                        }
                        int v695 = *(_DWORD *)(v583 + 16);
                        if (!v695)
                        {
                          v705 = 0;
                          goto LABEL_1165;
                        }
                        uint64_t v696 = *(void *)(v583 + 8);
LABEL_1152:
                        int v697 = v695 - 1;
                        unsigned int v698 = ((v920 >> 4) ^ (v920 >> 9)) & v697;
                        v699 = (void *)(v696 + 8 * v698);
                        v700 = (void *)*v699;
                        if (v920 != (void *)*v699)
                        {
                          v701 = 0;
                          int v702 = 1;
                          while (v700 != (void *)-4096)
                          {
                            if (v701) {
                              BOOL v703 = 0;
                            }
                            else {
                              BOOL v703 = v700 == (void *)-8192;
                            }
                            if (v703) {
                              v701 = v699;
                            }
                            unsigned int v704 = v698 + v702++;
                            unsigned int v698 = v704 & v697;
                            v699 = (void *)(v696 + 8 * v698);
                            v700 = (void *)*v699;
                            if (v920 == (void *)*v699) {
                              goto LABEL_1167;
                            }
                          }
                          if (v701) {
                            v705 = v701;
                          }
                          else {
                            v705 = v699;
                          }
LABEL_1165:
                          v706 = sub_1CC0BE7D8(v583, (uint64_t)&v920, &v920, v705);
                          void *v706 = v920;
                          unint64_t v707 = *(unsigned int *)(v583 + 32);
                          if (v707 >= *(unsigned int *)(v583 + 36)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *(void *)(*(void *)(v583 + 24) + 8 * v707) = v920;
                          ++*(_DWORD *)(v583 + 32);
                        }
LABEL_1167:
                        sub_1CC7B6CD0(v585, (uint64_t *)&v920);
                        if (*(unsigned char *)(v694 + 56))
                        {
                          uint64_t v708 = v694 + 64;
                          int v709 = 2;
                          goto LABEL_1171;
                        }
                        int v709 = *(_DWORD *)(v694 + 72);
                        if (!v709)
                        {
                          v718 = 0;
                          goto LABEL_1184;
                        }
                        uint64_t v708 = *(void *)(v694 + 64);
LABEL_1171:
                        int v710 = v709 - 1;
                        unsigned int v711 = ((__src >> 4) ^ (__src >> 9)) & v710;
                        v712 = (void *)(v708 + 8 * v711);
                        v713 = (void *)*v712;
                        if (__src != (void *)*v712)
                        {
                          v714 = 0;
                          int v715 = 1;
                          while (v713 != (void *)-4096)
                          {
                            if (v714) {
                              BOOL v716 = 0;
                            }
                            else {
                              BOOL v716 = v713 == (void *)-8192;
                            }
                            if (v716) {
                              v714 = v712;
                            }
                            unsigned int v717 = v711 + v715++;
                            unsigned int v711 = v717 & v710;
                            v712 = (void *)(v708 + 8 * v711);
                            v713 = (void *)*v712;
                            if (__src == (void *)*v712) {
                              goto LABEL_1186;
                            }
                          }
                          if (v714) {
                            v718 = v714;
                          }
                          else {
                            v718 = v712;
                          }
LABEL_1184:
                          v719 = sub_1CC0BE7D8(v694 + 56, (uint64_t)&__src, &__src, v718);
                          void *v719 = __src;
                          unint64_t v720 = *(unsigned int *)(v694 + 88);
                          if (v720 >= *(unsigned int *)(v694 + 92)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *(void *)(*(void *)(v694 + 80) + 8 * v720) = __src;
                          ++*(_DWORD *)(v694 + 88);
                        }
LABEL_1186:
                        sub_1CC7B6CD0((_DWORD *)(v694 + 56), (uint64_t *)&v930);
                        v721 = v690 + 1;
                        while (v721 != v691)
                        {
                          unint64_t v722 = *v721++;
                          v692 = (void *)v722;
                          if (v722 <= 0xFFFFFFFFFFFFFFFDLL)
                          {
                            v690 = v721 - 1;
                            goto LABEL_1148;
                          }
                        }
                      }
LABEL_1194:
                      v920 = (void *)v918;
                      uint64_t v723 = v585[22];
                      if (!v723)
                      {
LABEL_1270:
                        v549 = v883;
                        uint64_t v425 = a1;
                        v555 = v889;
                        goto LABEL_1271;
                      }
                      v724 = (uint64_t *)*((void *)v585 + 10);
                      v725 = &v724[v723];
                      while (2)
                      {
                        uint64_t v726 = *v724;
                        *(void *)&long long v930 = *v724;
                        v727 = v896;
                        if (__b == v896)
                        {
                          unsigned int v728 = HIDWORD(v898);
                          v729 = (char *)__b + 8 * HIDWORD(v898);
                          if (HIDWORD(v898))
                          {
                            uint64_t v730 = 0;
                            while (*(void *)((char *)__b + v730) != v726)
                            {
                              v730 += 8;
                              if (8 * HIDWORD(v898) == v730) {
                                goto LABEL_1215;
                              }
                            }
                            v729 = (char *)__b + v730;
                          }
LABEL_1215:
                          v727 = __b;
                        }
                        else
                        {
                          int v731 = v898 - 1;
                          unsigned int v732 = (v898 - 1) & ((v726 >> 4) ^ (v726 >> 9));
                          v729 = (char *)__b + 8 * v732;
                          uint64_t v733 = *(void *)v729;
                          if (*(void *)v729 == -1)
                          {
                            v734 = 0;
LABEL_1261:
                            if (v734) {
                              v729 = v734;
                            }
                            unsigned int v728 = HIDWORD(v898);
                            if (*(void *)v729 != v726) {
                              v729 = (char *)__b + 8 * v898;
                            }
                          }
                          else
                          {
                            v734 = 0;
                            int v735 = 1;
                            while (v733 != v726)
                            {
                              if (v734) {
                                BOOL v736 = 0;
                              }
                              else {
                                BOOL v736 = v733 == -2;
                              }
                              if (v736) {
                                v734 = v729;
                              }
                              unsigned int v737 = v732 + v735++;
                              unsigned int v732 = v737 & v731;
                              v729 = (char *)__b + 8 * (v737 & v731);
                              uint64_t v733 = *(void *)v729;
                              if (*(void *)v729 == -1) {
                                goto LABEL_1261;
                              }
                            }
                            unsigned int v728 = HIDWORD(v898);
                          }
                        }
                        if (__b == v727) {
                          unsigned int v738 = v728;
                        }
                        else {
                          unsigned int v738 = v898;
                        }
                        if (v729 == (char *)__b + 8 * v738)
                        {
                          if (*(unsigned char *)(v583 + 56))
                          {
                            int v739 = 2;
                            uint64_t v740 = v583 + 64;
                            goto LABEL_1224;
                          }
                          int v739 = *(_DWORD *)(v583 + 72);
                          if (!v739)
                          {
                            v749 = 0;
                            goto LABEL_1237;
                          }
                          uint64_t v740 = *(void *)(v583 + 64);
LABEL_1224:
                          int v741 = v739 - 1;
                          unsigned int v742 = v741 & ((v726 >> 4) ^ (v726 >> 9));
                          v743 = (void *)(v740 + 8 * v742);
                          uint64_t v744 = *v743;
                          if (v726 != *v743)
                          {
                            v745 = 0;
                            int v746 = 1;
                            while (v744 != -4096)
                            {
                              if (v745) {
                                BOOL v747 = 0;
                              }
                              else {
                                BOOL v747 = v744 == -8192;
                              }
                              if (v747) {
                                v745 = v743;
                              }
                              unsigned int v748 = v742 + v746++;
                              unsigned int v742 = v748 & v741;
                              v743 = (void *)(v740 + 8 * v742);
                              uint64_t v744 = *v743;
                              if (v726 == *v743) {
                                goto LABEL_1239;
                              }
                            }
                            if (v745) {
                              v749 = v745;
                            }
                            else {
                              v749 = v743;
                            }
LABEL_1237:
                            v750 = sub_1CC0BE7D8(v583 + 56, (uint64_t)&v930, &v930, v749);
                            void *v750 = v930;
                            unint64_t v751 = *(unsigned int *)(v583 + 88);
                            if (v751 >= *(unsigned int *)(v583 + 92)) {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            *(void *)(*(void *)(v583 + 80) + 8 * v751) = v930;
                            ++*(_DWORD *)(v583 + 88);
                          }
LABEL_1239:
                          uint64_t v752 = sub_1CC7B5BD0((uint64_t)v880, (uint64_t *)&v930);
                          uint64_t v753 = v752;
                          uint64_t v754 = v752 + 8;
                          if (*(unsigned char *)v752)
                          {
                            int v755 = 2;
                            goto LABEL_1243;
                          }
                          int v755 = *(_DWORD *)(v752 + 16);
                          if (!v755)
                          {
                            v764 = 0;
                            goto LABEL_1256;
                          }
                          uint64_t v754 = *(void *)(v752 + 8);
LABEL_1243:
                          int v756 = v755 - 1;
                          unsigned int v757 = ((v920 >> 4) ^ (v920 >> 9)) & v756;
                          v758 = (void *)(v754 + 8 * v757);
                          v759 = (void *)*v758;
                          if (v920 != (void *)*v758)
                          {
                            v760 = 0;
                            int v761 = 1;
                            while (v759 != (void *)-4096)
                            {
                              if (v760) {
                                BOOL v762 = 0;
                              }
                              else {
                                BOOL v762 = v759 == (void *)-8192;
                              }
                              if (v762) {
                                v760 = v758;
                              }
                              unsigned int v763 = v757 + v761++;
                              unsigned int v757 = v763 & v756;
                              v758 = (void *)(v754 + 8 * v757);
                              v759 = (void *)*v758;
                              if (v920 == (void *)*v758) {
                                goto LABEL_1258;
                              }
                            }
                            if (v760) {
                              v764 = v760;
                            }
                            else {
                              v764 = v758;
                            }
LABEL_1256:
                            v765 = sub_1CC0BE7D8(v752, (uint64_t)&v920, &v920, v764);
                            void *v765 = v920;
                            unint64_t v766 = *(unsigned int *)(v753 + 32);
                            if (v766 >= *(unsigned int *)(v753 + 36)) {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            *(void *)(*(void *)(v753 + 24) + 8 * v766) = v920;
                            ++*(_DWORD *)(v753 + 32);
                          }
                        }
LABEL_1258:
                        if (++v724 == v725) {
                          goto LABEL_1270;
                        }
                        continue;
                      }
                    }
                    break;
                  }
                  uint64_t v550 = v862;
                  v551 = v875;
                  if (v548)
                  {
                    do
                    {
LABEL_916:
                      void *v551 = -4096;
                      v551 += 2;
                    }
                    while (v551 != (void *)v550);
                    int v553 = *(_DWORD *)v872 & 1;
                  }
                  else
                  {
                    uint64_t v552 = *(unsigned int *)(v425 + 4712);
                    if (((2 * v548) & 0xFFFFFFFC) < v552 && v552 >= 0x41)
                    {
                      sub_1CD63F0BC(v872);
                      goto LABEL_919;
                    }
                    if (v552)
                    {
                      v551 = *v875;
                      uint64_t v550 = (uint64_t)&(*v875)[2 * v552];
                      goto LABEL_916;
                    }
                    int v553 = 0;
                  }
                  *(_DWORD *)(v425 + 4696) = v553;
                  *(_DWORD *)(v425 + 4700) = 0;
                  goto LABEL_919;
                }
              }
LABEL_170:
              if (v130 && v130 != v114)
              {
                do
                {
                  v132 = v130;
                  v130 = (void *)*v130;
                  if (v130) {
                    BOOL v133 = v130 == v114;
                  }
                  else {
                    BOOL v133 = 1;
                  }
                }
                while (!v133);
                if (v132 != v130) {
                  v115 = *(void **)v132[4];
                }
              }
              goto LABEL_179;
            }
          }
          else
          {
LABEL_155:
            v123 = 0;
            if (!v111) {
              goto LABEL_157;
            }
          }
          break;
        }
        if (**(void **)(v111 + 32) != v84) {
          goto LABEL_157;
        }
        while (v123 != (void *)v111)
        {
          if (!v123) {
            goto LABEL_157;
          }
          v123 = (void *)*v123;
        }
        goto LABEL_255;
      }
LABEL_1399:
      LODWORD(v904) = 0;
      uint64_t v68 = v857 + 1;
      if (v857 + 1 == (void *)v856)
      {
        if (v903 != v905) {
          free(v903);
        }
        goto LABEL_1405;
      }
    }
    int v78 = 1;
    while (v77 != -4096)
    {
      unsigned int v79 = v75 + v78++;
      unsigned int v75 = v79 & (v74 - 1);
      unsigned int v76 = (uint64_t *)(v73 + 40 * v75);
      uint64_t v77 = *v76;
      if (*v76 == v71) {
        goto LABEL_105;
      }
    }
LABEL_104:
    unsigned int v76 = (uint64_t *)(v73 + 40 * v74);
    goto LABEL_105;
  }
LABEL_1405:
  if (v892 != v891) {
    free(v892);
  }
  if (__b != v896) {
    free(__b);
  }
  if (v906 != v908) {
    free(v906);
  }
  if (v909 != v911) {
    free(v909);
  }
  sub_1CC7AF5D4((uint64_t)v912, (uint64_t)v912 + 80 * v913);
  if (v912 != v914) {
    free(v912);
  }
  int v817 = *(_DWORD *)(v25 + 4680);
  if (v817 || *(_DWORD *)(v25 + 4684))
  {
    uint64_t v818 = *(unsigned int *)(v25 + 4688);
    uint64_t v819 = *(void *)(v25 + 4672);
    if (v818 > 4 * v817 && v818 >= 0x41)
    {
      uint64_t v820 = 120 * v818;
      v821 = (void *)(v819 + 104);
      do
      {
        if ((*(v821 - 13) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v822 = (void *)*(v821 - 2);
          if (v821 != v822) {
            free(v822);
          }
          if ((*(unsigned char *)(v821 - 5) & 1) == 0) {
            MEMORY[0x1D25D9CD0](*(v821 - 4), 8);
          }
          v823 = (char *)*(v821 - 9);
          if (v821 - 7 != (void *)v823) {
            free(v823);
          }
          if ((*(unsigned char *)(v821 - 12) & 1) == 0) {
            MEMORY[0x1D25D9CD0](*(v821 - 11), 8);
          }
        }
        v821 += 15;
        v820 -= 120;
      }
      while (v820);
      int v829 = 1 << (33 - __clz(v817 - 1));
      if (v829 <= 64) {
        int v829 = 64;
      }
      if (v817) {
        uint64_t v830 = v829;
      }
      else {
        uint64_t v830 = 0;
      }
      if (v830 == *(_DWORD *)(v25 + 4688))
      {
        *(void *)(v25 + 4680) = 0;
        if (v830)
        {
          v831 = *(void **)(v25 + 4672);
          uint64_t v832 = 120 * v830;
          do
          {
            void *v831 = -4096;
            v831 += 15;
            v832 -= 120;
          }
          while (v832);
        }
      }
      else
      {
        MEMORY[0x1D25D9CD0](*v880, 8);
        if (v830)
        {
          unint64_t v833 = (4 * (int)v830 / 3u + 1) | ((unint64_t)(4 * (int)v830 / 3u + 1) >> 1);
          unint64_t v834 = v833 | (v833 >> 2) | ((v833 | (v833 >> 2)) >> 4);
          LODWORD(v834) = (((v834 | (v834 >> 8)) >> 16) | v834 | (v834 >> 8)) + 1;
          *(_DWORD *)(v25 + 4688) = v834;
          v835 = operator new(120 * v834, (std::align_val_t)8uLL);
          *(void *)(v25 + 4672) = v835;
          *(void *)(v25 + 4680) = 0;
          uint64_t v836 = *(unsigned int *)(v25 + 4688);
          if (v836)
          {
            uint64_t v837 = 120 * v836;
            do
            {
              void *v835 = -4096;
              v835 += 15;
              v837 -= 120;
            }
            while (v837);
          }
        }
        else
        {
          void *v880 = 0;
          *(void *)(a1 + 4680) = 0;
          *(_DWORD *)(a1 + 4688) = 0;
        }
      }
      goto LABEL_1462;
    }
    if (!v818)
    {
LABEL_1445:
      *(void *)(v25 + 4680) = 0;
      goto LABEL_1462;
    }
    uint64_t v824 = 120 * v818;
    v825 = (void *)(v819 + 104);
    while (2)
    {
      uint64_t v826 = *(v825 - 13);
      if (v826 == -8192)
      {
LABEL_1443:
        *(v825 - 13) = -4096;
      }
      else if (v826 != -4096)
      {
        v827 = (void *)*(v825 - 2);
        if (v825 != v827) {
          free(v827);
        }
        if ((*(unsigned char *)(v825 - 5) & 1) == 0) {
          MEMORY[0x1D25D9CD0](*(v825 - 4), 8);
        }
        v828 = (char *)*(v825 - 9);
        if (v825 - 7 != (void *)v828) {
          free(v828);
        }
        if ((*(unsigned char *)(v825 - 12) & 1) == 0) {
          MEMORY[0x1D25D9CD0](*(v825 - 11), 8);
        }
        goto LABEL_1443;
      }
      v825 += 15;
      v824 -= 120;
      if (!v824) {
        goto LABEL_1445;
      }
      continue;
    }
  }
LABEL_1462:
  unsigned int v838 = *(_DWORD *)(v25 + 4656);
  if (v838 || *(_DWORD *)(v25 + 4660))
  {
    uint64_t v839 = *(unsigned int *)(v25 + 4664);
    if (v839 <= 4 * v838 || v839 < 0x41)
    {
      if (v839)
      {
        uint64_t v846 = *v855 + 24;
        uint64_t v847 = 40 * v839;
        do
        {
          uint64_t v848 = *(void *)(v846 - 24);
          if (v848 != -4096)
          {
            if (v848 != -8192)
            {
              v849 = *(void **)(v846 - 16);
              if ((void *)v846 != v849) {
                free(v849);
              }
            }
            *(void *)(v846 - 24) = -4096;
          }
          v846 += 40;
          v847 -= 40;
        }
        while (v847);
      }
      *(void *)(v25 + 4656) = 0;
    }
    else
    {
      sub_1CC13D5A8((uint64_t)v855);
      if (v838)
      {
        int v840 = 1 << (33 - __clz(v838 - 1));
        if (v840 <= 64) {
          unsigned int v838 = 64;
        }
        else {
          unsigned int v838 = v840;
        }
      }
      if (v838 == *(_DWORD *)(v25 + 4664))
      {
        *(void *)(v25 + 4656) = 0;
        if (v838)
        {
          v852 = *(void **)(v25 + 4648);
          uint64_t v853 = 40 * v838;
          do
          {
            void *v852 = -4096;
            v852 += 5;
            v853 -= 40;
          }
          while (v853);
        }
      }
      else
      {
        MEMORY[0x1D25D9CD0](*v855, 8);
        if (v838)
        {
          unint64_t v841 = (4 * v838 / 3 + 1) | ((unint64_t)(4 * v838 / 3 + 1) >> 1);
          unint64_t v842 = v841 | (v841 >> 2) | ((v841 | (v841 >> 2)) >> 4);
          LODWORD(v842) = (((v842 | (v842 >> 8)) >> 16) | v842 | (v842 >> 8)) + 1;
          *(_DWORD *)(v25 + 4664) = v842;
          v843 = operator new(40 * v842, (std::align_val_t)8uLL);
          *(void *)(v25 + 4648) = v843;
          *(void *)(v25 + 4656) = 0;
          uint64_t v844 = *(unsigned int *)(v25 + 4664);
          if (v844)
          {
            uint64_t v845 = 40 * v844;
            do
            {
              void *v843 = -4096;
              v843 += 5;
              v845 -= 40;
            }
            while (v845);
          }
        }
        else
        {
          void *v855 = 0;
          *(void *)(a1 + 4656) = 0;
          *(_DWORD *)(a1 + 4664) = 0;
        }
      }
    }
  }
  if (v915 != v917) {
    free(v915);
  }
}

void sub_1CC7B50F8()
{
}

void *sub_1CC7B510C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F261E510;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC7B5154(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F261E510;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC7B5180(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  unsigned int v3 = *(_DWORD *)(v2 + 8);
  if (v3 >= *(_DWORD *)(v2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v2 + 8 * v3) = *a2;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

unsigned int *sub_1CC7B51E0(unsigned int *result, unsigned int *a2)
{
  unsigned int v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  int v3 = result[1];
  *uint64_t result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  unsigned int v4 = *a2;
  if (*result)
  {
    if ((v4 & 1) == 0)
    {
      unsigned int v6 = a2;
      goto LABEL_7;
    }
    uint64_t v9 = 0;
    while (1)
    {
      unsigned int v10 = (int *)&result[v9];
      uint64_t v11 = (int *)&a2[v9];
      uint64_t v12 = *(void *)&result[v9 + 2];
      uint64_t v13 = *(void *)&a2[v9 + 2];
      if (v12 == -4096 || v12 == -8192 || v13 == -4096 || v13 == -8192)
      {
        *((void *)v10 + 1) = v13;
        *((void *)v11 + 1) = v12;
        if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unsigned int v15 = (int *)&a2[v9];
          uint64_t v16 = (int *)&result[v9];
          goto LABEL_22;
        }
        if ((v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unsigned int v15 = (int *)&result[v9];
          uint64_t v16 = (int *)&a2[v9];
LABEL_22:
          *((unsigned char *)v15 + 16) = *((unsigned char *)v16 + 16);
        }
      }
      else
      {
        char v14 = result[v9 + 4];
        *((void *)v10 + 1) = v13;
        LOBYTE(result[v9 + 4]) = a2[v9 + 4];
        *((void *)v11 + 1) = v12;
        LOBYTE(a2[v9 + 4]) = v14;
      }
      v9 += 4;
      if (v9 == 256) {
        return result;
      }
    }
  }
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = *((void *)result + 1);
    *((void *)result + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v5;
    LODWORD(v5) = result[4];
    result[4] = a2[4];
    a2[4] = v5;
    return result;
  }
  unsigned int v4 = *result;
  unsigned int v6 = result;
  uint64_t result = a2;
LABEL_7:
  uint64_t v7 = 0;
  long long v17 = *(_OWORD *)(v6 + 2);
  unsigned int *v6 = v4 | 1;
  do
  {
    uint64_t v8 = *(void *)&result[v7 + 2];
    *(void *)&v6[v7 + 2] = v8;
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      LOBYTE(v6[v7 + 4]) = result[v7 + 4];
    }
    v7 += 4;
  }
  while (v7 != 256);
  *result &= ~1u;
  *(_OWORD *)(result + 2) = v17;
  return result;
}

void *sub_1CC7B5360(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v13 = 0;
LABEL_17:
      uint64_t v7 = sub_1CC7B54D4(a1, a2, v13);
      void *v7 = *a2;
      v7[1] = v7 + 3;
      v7[2] = 0x200000000;
      return v7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  uint64_t v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 32 * v6);
  uint64_t v8 = *v7;
  if (*a2 != *v7)
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      int v12 = v6 + v10++;
      uint64_t v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 32 * v6);
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        return v7;
      }
    }
    if (v9) {
      uint64_t v13 = v9;
    }
    else {
      uint64_t v13 = v7;
    }
    goto LABEL_17;
  }
  return v7;
}

uint64_t sub_1CC7B543C(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = result + 8;
  if (*(unsigned char *)result)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(result + 8);
  }
  int v5 = v4 - 1;
  uint64_t v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 32 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      int v12 = v6 + v10++;
      uint64_t v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 32 * v6);
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_16;
      }
    }
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

void *sub_1CC7B54D4(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)a1;
  int v6 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v7 = 16;
  }
  else {
    unsigned int v7 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CC7B564C(a1, 2 * v7);
    uint64_t v10 = a1 + 8;
    int v5 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v11 = 16;
    }
    else
    {
      int v11 = *(_DWORD *)(a1 + 16);
      if (!v11)
      {
        int v8 = 0;
        a3 = 0;
        goto LABEL_7;
      }
      uint64_t v10 = *(void *)(a1 + 8);
    }
    int v8 = *(_DWORD *)a1 & 1;
    int v12 = v11 - 1;
    uint64_t v13 = ((*a2 >> 4) ^ (*a2 >> 9)) & v12;
    a3 = (void *)(v10 + 32 * v13);
    uint64_t v14 = *a3;
    if (*a2 != *a3)
    {
      unsigned int v15 = 0;
      int v16 = 1;
      while (v14 != -4096)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v14 == -8192;
        }
        if (v17) {
          unsigned int v15 = a3;
        }
        int v18 = v13 + v16++;
        uint64_t v13 = v18 & v12;
        a3 = (void *)(v10 + 32 * v13);
        uint64_t v14 = *a3;
        if (*a2 == *a3) {
          goto LABEL_7;
        }
      }
      if (v15) {
        a3 = v15;
      }
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 4) <= v7 >> 3)
    {
      sub_1CC7B564C(a1, v7);
      uint64_t v19 = 0;
      sub_1CC7B543C(a1, *a2, &v19);
      a3 = v19;
      int v5 = *(_DWORD *)a1;
    }
    int v8 = v5 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v5 & 0xFFFFFFFE | v8) + 2;
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a3;
}

void sub_1CC7B564C(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2;
  v18[64] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x11)
  {
    unint64_t v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    int v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40) {
      unsigned int v2 = v6 + 1;
    }
    else {
      unsigned int v2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v7 = *(uint64_t **)(a1 + 8);
    uint64_t v8 = *(unsigned int *)(a1 + 16);
    if (v2 <= 0x10)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      *(void *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v2;
    }
    sub_1CBBF2454((int *)a1, v7, &v7[4 * v8]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v9 = 0;
  uint64_t v10 = v18;
  do
  {
    uint64_t v11 = a1 + v9;
    uint64_t v12 = *(void *)(a1 + v9 + 8);
    if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10[1] = (uint64_t)(v10 + 3);
      uint64_t *v10 = v12;
      void v10[2] = 0x200000000;
      unsigned int v13 = *(_DWORD *)(v11 + 24);
      uint64_t v14 = *(void **)(v11 + 16);
      if (v13) {
        BOOL v15 = a1 + v9 + 8 == (void)v10;
      }
      else {
        BOOL v15 = 1;
      }
      if (!v15)
      {
        uint64_t v16 = a1 + v9;
        uint64_t v17 = a1 + v9 + 32;
        if ((void *)v17 == v14)
        {
          if (v13 >= 3) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v10 + 3, v14, 4 * *(unsigned int *)(v11 + 24));
          *((_DWORD *)v10 + 4) = v13;
          uint64_t v14 = *(void **)(v11 + 16);
        }
        else
        {
          v10[1] = (uint64_t)v14;
          *((_DWORD *)v10 + 4) = v13;
          *((_DWORD *)v10 + 5) = *(_DWORD *)(v16 + 28);
          *(void *)(v11 + 16) = v17;
          *(_DWORD *)(v16 + 28) = 0;
          uint64_t v14 = (void *)(a1 + v9 + 32);
        }
        *(_DWORD *)(v11 + 24) = 0;
      }
      v10 += 4;
      if ((void *)(a1 + v9 + 32) != v14) {
        free(v14);
      }
    }
    v9 += 32;
  }
  while (v9 != 512);
  if (v2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    *(void *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v2;
  }
  sub_1CBBF2454((int *)a1, v18, v10);
}

uint64_t sub_1CC7B58C8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      uint64_t result = 0;
      goto LABEL_9;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      unsigned int v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_9;
      }
    }
    uint64_t result = 0;
    if (v9) {
      unsigned int v7 = v9;
    }
  }
LABEL_9:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC7B5974(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x11)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x10)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v8 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v8;
    }
    sub_1CC7B5B0C(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v9 = 0;
  int v10 = v14;
  do
  {
    uint64_t v11 = *(void *)(a1 + v9 + 8);
    if ((v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)int v10 = v11;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a1 + v9 + 16);
      v10 += 16;
    }
    v9 += 16;
  }
  while (v9 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v12 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v12;
  }
  return sub_1CC7B5B0C(a1, (uint64_t)v14, (uint64_t)v10);
}

uint64_t sub_1CC7B5B0C(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 264);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v12 = 0;
      uint64_t result = sub_1CC7B58C8((uint64_t)v5, v10, &v12);
      uint64_t v11 = v12;
      void *v12 = *(void *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1CC7B5BD0(uint64_t a1, uint64_t *a2)
{
  uint64_t v10 = 0;
  char v4 = sub_1CC7B5D00(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v10);
  uint64_t v5 = v10;
  if (v4) {
    return v5 + 8;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1CC7B5D98(a1, v7);
    uint64_t v10 = 0;
    sub_1CC7B5D00(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v10);
    uint64_t v5 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)v5 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)uint64_t v5 = *a2;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(void *)(v5 + 112) = 0;
  int64x2_t v8 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(void *)(v5 + 8) = 1;
  *(int64x2_t *)(v5 + 16) = v8;
  *(_OWORD *)(v5 + 32) = 0u;
  *(void *)(v5 + 32) = v5 + 48;
  *(void *)(v5 + 40) = 0x200000000;
  *(void *)(v5 + 64) = 1;
  *(int64x2_t *)(v5 + 72) = v8;
  *(void *)(v5 + 88) = v5 + 104;
  *(void *)(v5 + 96) = 0x200000000;
  return v5 + 8;
}

uint64_t sub_1CC7B5D00(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v6 = (void *)(a1 + 120 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        int v6 = (void *)(a1 + 120 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        int v6 = v10;
      }
    }
  }
  else
  {
    int v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *sub_1CC7B5D98(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(120 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 120 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 15;
        v11 -= 120;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 120 * v3;
      do
      {
        uint64_t v14 = *(void *)(v4 + v12);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v21 = 0;
          sub_1CC7B5D00(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v21);
          uint64_t v15 = v21;
          uint64_t v16 = v21;
          uint64_t *v21 = v14;
          sub_1CC0BE57C((unsigned int *)v16 + 2, (unsigned int *)(v4 + v12 + 8));
          sub_1CC0BE57C((unsigned int *)v15 + 16, (unsigned int *)(v4 + v12 + 64));
          ++*(_DWORD *)(a1 + 8);
          uint64_t v17 = *(void **)(v4 + v12 + 88);
          if ((void *)(v4 + v12 + 104) != v17) {
            free(v17);
          }
          if ((*(unsigned char *)(v4 + v12 + 64) & 1) == 0) {
            MEMORY[0x1D25D9CD0](*(void *)(v4 + v12 + 72), 8);
          }
          int v18 = *(void **)(v4 + v12 + 32);
          if ((void *)(v4 + v12 + 48) != v18) {
            free(v18);
          }
          if ((*(unsigned char *)(v4 + v12 + 8) & 1) == 0) {
            MEMORY[0x1D25D9CD0](*(void *)(v4 + v12 + 16), 8);
          }
        }
        v12 += 120;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v19 = *(unsigned int *)(a1 + 16);
  if (v19)
  {
    uint64_t v20 = 120 * v19;
    do
    {
      *uint64_t result = -4096;
      result += 15;
      v20 -= 120;
    }
    while (v20);
  }
  return result;
}

uint64_t sub_1CC7B5F88(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  int64_t v6 = *(void *)a1;
  if (v4 >= v5)
  {
    unint64_t v8 = v4 + 1;
    BOOL v10 = v6 <= a2 && v6 + 80 * (unint64_t)v4 > a2;
    if (v10) {
      unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v6) >> 4);
    }
    else {
      unint64_t v11 = -1;
    }
    if (v4 == -1) {
      sub_1CD0A88F0(v8);
    }
    if (v5 == -1) {
      sub_1CD0A89A8(0xFFFFFFFFuLL);
    }
    unint64_t v12 = (2 * v5) | 1;
    if (v12 <= v8) {
      unint64_t v12 = v8;
    }
    if (v12 >= 0xFFFFFFFF) {
      uint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v12;
    }
    uint64_t v14 = malloc_type_malloc(80 * v13, 0x4065EBACuLL);
    if (!v14) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    int64_t v6 = (int64_t)v14;
    uint64_t v15 = *(void *)a1;
    uint64_t v16 = *(unsigned int *)(a1 + 8);
    if (v16)
    {
      uint64_t v17 = 80 * v16;
      do
      {
        uint64_t v18 = sub_1CC7B6370((uint64_t)v14, v15);
        v15 += 80;
        uint64_t v14 = (void *)(v18 + 80);
        v17 -= 80;
      }
      while (v17);
      uint64_t v15 = *(void *)a1;
      unsigned int v19 = *(_DWORD *)(a1 + 8);
    }
    else
    {
      unsigned int v19 = 0;
    }
    sub_1CC7AF5D4(v15, v15 + 80 * v19);
    if (*(void *)a1 != a1 + 16) {
      free(*(void **)a1);
    }
    *(void *)a1 = v6;
    *(_DWORD *)(a1 + 12) = v13;
    if (v10) {
      uint64_t v2 = v6 + 80 * v11;
    }
    LODWORD(v4) = *(_DWORD *)(a1 + 8);
  }
  uint64_t result = sub_1CC7B6370(v6 + 80 * v4, v2);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

double sub_1CC7B6110(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = 0;
  char v4 = sub_1CC7B6200(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  int64_t v6 = v9;
  if (v4) {
    return result;
  }
  int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    sub_1CC7B6298(a1, v8);
    uint64_t v9 = 0;
    sub_1CC7B6200(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    int64_t v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*v6 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  uint64_t *v6 = *a2;
  v6[1] = (uint64_t)(v6 + 3);
  *(void *)&double result = 0x200000000;
  v6[2] = 0x200000000;
  return result;
}

uint64_t sub_1CC7B6200(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int64_t v6 = (void *)(a1 + 40 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v10 = 1;
    }
    else
    {
      unsigned int v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          unsigned int v8 = v6;
        }
        unsigned int v13 = v5 + v9++;
        unsigned int v5 = v13 & v4;
        int64_t v6 = (void *)(a1 + 40 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v10 = 1;
        if (*v6 == a3) {
          goto LABEL_9;
        }
      }
      uint64_t v10 = 0;
      if (v8) {
        int64_t v6 = v8;
      }
    }
  }
  else
  {
    int64_t v6 = 0;
    uint64_t v10 = 0;
  }
LABEL_9:
  *a4 = v6;
  return v10;
}

void *sub_1CC7B6298(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD63EF50(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 40 * v10;
    do
    {
      *double result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC7B6370(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x200000000;
  if (a1 != a2)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (v4)
    {
      unint64_t v5 = *(const void **)a2;
      if (*(void *)a2 == a2 + 16)
      {
        if (v4 >= 3) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(a1 + 16), v5, 8 * *(unsigned int *)(a2 + 8));
        *(_DWORD *)(a1 + 8) = v4;
      }
      else
      {
        *(void *)a1 = v5;
        int v11 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 8) = v4;
        *(_DWORD *)(a1 + 12) = v11;
        *(void *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
      }
      *(_DWORD *)(a2 + 8) = 0;
    }
  }
  unint64_t v6 = (void *)(a1 + 64);
  *(void *)(a1 + 32) = a1 + 64;
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  if (v7 == v8)
  {
    *(void *)(a1 + 40) = v6;
    uint64_t v9 = *(unsigned int *)(a2 + 52);
    if (v9) {
      memmove(v6, *(const void **)(a2 + 40), 8 * v9);
    }
  }
  else
  {
    *(void *)(a1 + 40) = v7;
    *(void *)(a2 + 40) = v8;
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a2 + 48) = 2;
  *(_DWORD *)(a2 + 56) = 0;
  return a1;
}

uint64_t sub_1CC7B648C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_5;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_5;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void *sub_1CC7B653C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 4;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1CC7B66B4(a1, 2 * v8);
    uint64_t v11 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v12 = 4;
    }
    else
    {
      int v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        int v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      uint64_t v11 = *(void *)(a1 + 8);
    }
    int v9 = *(_DWORD *)a1 & 1;
    int v13 = v12 - 1;
    unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (void *)(v11 + 16 * v14);
    uint64_t v15 = *a4;
    if (*a3 != *a4)
    {
      uint64_t v16 = 0;
      int v17 = 1;
      while (v15 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -8192;
        }
        if (v18) {
          uint64_t v16 = a4;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        a4 = (void *)(v11 + 16 * v14);
        uint64_t v15 = *a4;
        if (*a3 == *a4) {
          goto LABEL_7;
        }
      }
      if (v16) {
        a4 = v16;
      }
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1CC7B66B4(a1, v8);
      uint64_t v20 = 0;
      sub_1CC7B648C(a1, a3, &v20);
      a4 = v20;
      int v6 = *(_DWORD *)a1;
    }
    int v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

int *sub_1CC7B66B4(uint64_t a1, unsigned int a2)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CC7B6840((int *)a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t *v7 = v8;
      v7[1] = *(void *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC7B6840((int *)a1, v14, v7);
}

int *sub_1CC7B6840(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    uint64_t v6 = result + 18;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    uint64_t v6 = &v5[2 * v4];
  }
  do
  {
    void *v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v8 = 4;
        uint64_t v9 = result + 2;
      }
      else
      {
        uint64_t v9 = (int *)*((void *)result + 1);
        int v8 = result[4];
      }
      int v10 = v8 - 1;
      unsigned int v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v12 = &v9[4 * v11];
      uint64_t v13 = *(void *)v12;
      if (v7 != *(void *)v12)
      {
        unsigned int v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            unsigned int v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          uint64_t v12 = &v9[4 * (v17 & v10)];
          uint64_t v13 = *(void *)v12;
          if (v7 == *(void *)v12) {
            goto LABEL_10;
          }
        }
        if (v14) {
          uint64_t v12 = v14;
        }
      }
LABEL_10:
      *(void *)uint64_t v12 = v7;
      *((void *)v12 + 1) = a2[1];
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

void *sub_1CC7B694C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD4308DC(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void *sub_1CC7B6A18(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC7B6AF0(a1, v4, &v4[5 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 40 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

void sub_1CC7B6AF0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = 40 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v10 = *(_DWORD *)(a1 + 16) - 1;
        unsigned int v11 = v10 & ((v9 >> 4) ^ (v9 >> 9));
        uint64_t v12 = *(void *)a1 + 40 * v11;
        uint64_t v13 = *(void *)v12;
        if (v9 != *(void *)v12)
        {
          uint64_t v14 = 0;
          int v15 = 1;
          while (v13 != -4096)
          {
            if (v14) {
              BOOL v20 = 0;
            }
            else {
              BOOL v20 = v13 == -8192;
            }
            if (v20) {
              uint64_t v14 = v12;
            }
            unsigned int v21 = v11 + v15++;
            unsigned int v11 = v21 & v10;
            uint64_t v12 = *(void *)a1 + 40 * v11;
            uint64_t v13 = *(void *)v12;
            if (v9 == *(void *)v12) {
              goto LABEL_11;
            }
          }
          if (v14) {
            uint64_t v12 = v14;
          }
        }
LABEL_11:
        *(void *)(v12 + 8) = v12 + 24;
        *(void *)uint64_t v12 = v9;
        *(void *)(v12 + 16) = 0x200000000;
        unsigned int v16 = *((_DWORD *)v4 + 4);
        unsigned int v17 = (uint64_t *)v4[1];
        if ((uint64_t *)v12 != v4 && v16 != 0)
        {
          if (v17 == v4 + 3)
          {
            if (v16 >= 3) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy((void *)(v12 + 24), v17, 8 * *((unsigned int *)v4 + 4));
            *(_DWORD *)(v12 + 16) = v16;
            unsigned int v17 = (uint64_t *)v4[1];
          }
          else
          {
            *(void *)(v12 + 8) = v17;
            int v19 = *((_DWORD *)v4 + 5);
            *(_DWORD *)(v12 + 16) = v16;
            *(_DWORD *)(v12 + 20) = v19;
            v4[1] = (uint64_t)(v4 + 3);
            *((_DWORD *)v4 + 5) = 0;
            unsigned int v17 = v4 + 3;
          }
          *((_DWORD *)v4 + 4) = 0;
        }
        ++*(_DWORD *)(a1 + 8);
        if (v17 != v4 + 3) {
          free(v17);
        }
      }
      v4 += 5;
    }
    while (v4 != a3);
  }
}

_DWORD *sub_1CC7B6CD0(_DWORD *result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *a2;
  uint64_t v4 = (char *)(result + 2);
  if (*(unsigned char *)result)
  {
    int v5 = 2;
  }
  else
  {
    int v5 = result[4];
    if (!v5) {
      return result;
    }
    uint64_t v4 = (char *)*((void *)result + 1);
  }
  int v6 = v5 - 1;
  LODWORD(v7) = (v5 - 1) & ((v3 >> 4) ^ (v3 >> 9));
  uint64_t v8 = &v4[8 * v7];
  uint64_t v9 = *(void *)v8;
  if (*(void *)v8 == v3)
  {
LABEL_11:
    *(void *)uint64_t v8 = -8192;
    int v12 = result[1] + 1;
    *result -= 2;
    result[1] = v12;
    uint64_t result = (_DWORD *)*((void *)result + 3);
    uint64_t v13 = v2[8];
    uint64_t v14 = (char *)&result[2 * v13];
    if (v13)
    {
      uint64_t v15 = 8 * v13;
      while (*(void *)result != *a2)
      {
        result += 2;
        v15 -= 8;
        if (!v15)
        {
          uint64_t result = v14;
          break;
        }
      }
    }
    if (v14 != (char *)(result + 2))
    {
      uint64_t result = memmove(result, result + 2, v14 - (char *)(result + 2));
      LODWORD(v13) = v2[8];
    }
    v2[8] = v13 - 1;
  }
  else
  {
    int v10 = 1;
    while (v9 != -4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & v6;
      uint64_t v9 = *(void *)&v4[8 * v7];
      if (v9 == v3)
      {
        uint64_t v8 = &v4[8 * v7];
        goto LABEL_11;
      }
    }
  }
  return result;
}

char *sub_1CC7B6DC8(char *result)
{
  int v1 = *((_DWORD *)result + 2);
  if (v1 || *((_DWORD *)result + 3))
  {
    uint64_t v2 = *((unsigned int *)result + 4);
    if (v2 > 4 * v1 && v2 >= 0x41)
    {
      return sub_1CC7B7144(result);
    }
    else
    {
      v43[0] = 2;
      v43[1] = 0;
      uint64_t v44 = -4096;
      uint64_t v45 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = &unk_1F2615EC8;
      v39[0] = 2;
      v39[1] = 0;
      uint64_t v40 = -8192;
      if (v2)
      {
        uint64_t v3 = *(void **)result;
        uint64_t v4 = (void *)(*(void *)result + (v2 << 6));
        do
        {
          uint64_t v5 = v3[3];
          uint64_t v6 = v44;
          if (v5 != v44)
          {
            if (v5 != v40)
            {
              uint64_t v7 = v3[7];
              if (v7)
              {
                if (v7 != -8192 && v7 != -4096)
                {
                  unint64_t v8 = v3[5] & 0xFFFFFFFFFFFFFFF8;
                  *(void *)unint64_t v8 = v3[6];
                  uint64_t v9 = (unint64_t *)v3[6];
                  if (v9)
                  {
                    *uint64_t v9 = *v9 & 7 | v8;
                  }
                  else
                  {
                    uint64_t v10 = v3[7];
                    int v11 = ***(int32x2_t ****)v10;
                    unint64_t v12 = (unint64_t)v11[303];
                    if (v12 <= v8)
                    {
                      uint64_t v13 = v11[305].u32[0];
                      if (v12 + 16 * v13 > v8)
                      {
                        unsigned int v14 = v13 - 1;
                        LODWORD(v15) = v14 & ((v10 >> 4) ^ (v10 >> 9));
                        unsigned int v16 = (uint64_t *)(v12 + 16 * v15);
                        uint64_t v17 = *v16;
                        if (v10 == *v16)
                        {
LABEL_23:
                          *unsigned int v16 = -8192;
                          v11[304] = vadd_s32(v11[304], (int32x2_t)0x1FFFFFFFFLL);
                          uint64_t v10 = v3[7];
                        }
                        else
                        {
                          int v18 = 1;
                          while (v17 != -4096)
                          {
                            int v19 = v15 + v18++;
                            uint64_t v15 = v19 & v14;
                            uint64_t v17 = *(void *)(v12 + 16 * v15);
                            if (v10 == v17)
                            {
                              unsigned int v16 = (uint64_t *)(v12 + 16 * v15);
                              goto LABEL_23;
                            }
                          }
                        }
                        *(unsigned char *)(v10 + 17) &= ~1u;
                      }
                    }
                  }
                  uint64_t v5 = v3[3];
                  uint64_t v6 = v44;
                }
              }
            }
            if (v5 != v6)
            {
              BOOL v20 = v5 == -4096 || v5 == 0;
              if (!v20 && v5 != -8192)
              {
                unint64_t v25 = v3[1] & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v25 = v3[2];
                uint64_t v26 = (unint64_t *)v3[2];
                if (v26)
                {
                  unint64_t *v26 = *v26 & 7 | v25;
                }
                else
                {
                  uint64_t v27 = v3[3];
                  uint64_t v28 = ***(int32x2_t ****)v27;
                  unint64_t v29 = (unint64_t)v28[303];
                  if (v29 <= v25)
                  {
                    uint64_t v30 = v28[305].u32[0];
                    if (v29 + 16 * v30 > v25)
                    {
                      unsigned int v31 = v30 - 1;
                      LODWORD(v32) = v31 & ((v27 >> 4) ^ (v27 >> 9));
                      uint64_t v33 = (uint64_t *)(v29 + 16 * v32);
                      uint64_t v34 = *v33;
                      if (v27 == *v33)
                      {
LABEL_50:
                        *uint64_t v33 = -8192;
                        v28[304] = vadd_s32(v28[304], (int32x2_t)0x1FFFFFFFFLL);
                        uint64_t v27 = v3[3];
                      }
                      else
                      {
                        int v35 = 1;
                        while (v34 != -4096)
                        {
                          int v36 = v32 + v35++;
                          uint64_t v32 = v36 & v31;
                          uint64_t v34 = *(void *)(v29 + 16 * v32);
                          if (v27 == v34)
                          {
                            uint64_t v33 = (uint64_t *)(v29 + 16 * v32);
                            goto LABEL_50;
                          }
                        }
                      }
                      *(unsigned char *)(v27 + 17) &= ~1u;
                    }
                  }
                }
                uint64_t v6 = v44;
              }
              v3[3] = v6;
              if (v6 != -4096 && v6 != -8192 && v6 != 0)
              {
                uint64_t v22 = v43[0];
                unint64_t v23 = (void *)(v43[0] & 0xFFFFFFFFFFFFFFF8);
                v3[2] = *(void *)(v43[0] & 0xFFFFFFFFFFFFFFF8);
                *unint64_t v23 = v3 + 1;
                v3[1] = v22 & 0xFFFFFFFFFFFFFFF8 | v3[1] & 7;
                uint64_t v24 = (unint64_t *)v3[2];
                if (v24) {
                  *uint64_t v24 = *v24 & 7 | (unint64_t)(v3 + 2);
                }
              }
            }
            v3[4] = v45;
          }
          v3 += 8;
        }
        while (v3 != v4);
        uint64_t v37 = v40;
        *((void *)result + 1) = 0;
        if (v37 != -8192 && v37 != -4096 && v37 != 0) {
          uint64_t result = (char *)llvm::ValueHandleBase::RemoveFromUseList(v39);
        }
      }
      else
      {
        *((void *)result + 1) = 0;
      }
      if (v44 != -4096 && v44 != -8192)
      {
        if (v44) {
          return (char *)llvm::ValueHandleBase::RemoveFromUseList(v43);
        }
      }
    }
  }
  return result;
}

char *sub_1CC7B7144(void *a1)
{
  int v2 = *((_DWORD *)a1 + 2);
  sub_1CC4D021C(a1);
  int v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64) {
    int v3 = 64;
  }
  if (v2) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  if (v4 == *((_DWORD *)a1 + 4))
  {
    return (char *)sub_1CC7AF4A4(a1);
  }
  else
  {
    MEMORY[0x1D25D9CD0](*a1, 8);
    return sub_1CC7AF3E0((char *)a1, v4);
  }
}

void sub_1CC7B71EC()
{
}

void *sub_1CC7B7200(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F261E558;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC7B7248(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F261E558;
  a2[1] = v2;
  return result;
}

void sub_1CC7B7274()
{
}

void *sub_1CC7B7398(void *result)
{
  int v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  unsigned int v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 == 28) {
    int v4 = 64;
  }
  else {
    int v4 = 1 << (33 - v3);
  }
  if (v2 >= 2) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if ((v2 & 1) != 0 && v5 < 0x11)
  {
    uint64_t v7 = result + 33;
    *uint64_t result = 1;
    uint64_t v6 = result + 1;
    goto LABEL_18;
  }
  if ((v2 & 1) == 0)
  {
    if (v5 != *((_DWORD *)result + 4))
    {
      MEMORY[0x1D25D9CD0](result[1], 8);
      goto LABEL_12;
    }
    *uint64_t result = 0;
    if (!v5) {
      return result;
    }
    uint64_t v6 = (void *)result[1];
    uint64_t v7 = &v6[2 * v5];
    do
    {
LABEL_18:
      void *v6 = -4096;
      v6 += 2;
    }
    while (v6 != v7);
    return result;
  }
LABEL_12:

  return sub_1CC7AF35C(v1, v5);
}

uint64_t sub_1CC7B746C()
{
  int v4 = 1;
  char v2 = 0;
  unsigned int v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable trying to structure the CFG.";
  v1.n128_u64[1] = 36;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCDB320, "disable-cfg-structure", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDB320, &dword_1CB82C000);
  int v4 = 1;
  char v2 = 0;
  unsigned int v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Perform full structurization of the CFG";
  v1.n128_u64[1] = 39;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCDB3E0, "precisecfg", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDB3E0, &dword_1CB82C000);
}

void sub_1CC7B755C()
{
}

uint64_t sub_1CC7B75F8(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDB4A0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261E5A0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB4A8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC7B755C;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCDB4A8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC7B76A8()
{
}

void sub_1CC7B76E8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC7B7720()
{
  return "Conservative Local Memory Fencing";
}

void sub_1CC7B7730(llvm::PassRegistry *a1, uint64_t a2)
{
  v3[0] = &unk_1F2617E40;
  v3[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v3);
}

BOOL sub_1CC7B777C(uint64_t a1, uint64_t a2)
{
  v73[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a2 + 112);
  if (!v2) {
    return 0;
  }
  if (!*(_DWORD *)(v2 + 8)) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 40);
  if (!v3) {
    return 0;
  }
  int v4 = *(_DWORD *)(v3 + 40);
  if (!v4) {
    return 0;
  }
  unsigned int v5 = (uint64_t ***)a2;
  uint64_t v6 = *(void *)(v3 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v66 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v66 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v66;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  uint64_t v7 = __ROR8__(qword_1EBCBE580 ^ 0x1432D53F0B35DBA3, 30);
  unint64_t v8 = 0x9DDFEA08EB382D69
     * ((qword_1EBCBE580 + 0x1759DE5FCD247749) ^ ((0x9DDFEA08EB382D69
                                                   * ((v7 - 0x64A37863B26C7621) ^ (qword_1EBCBE580
                                                                                   + 0x1759DE5FCD247749))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v7 - 0x64A37863B26C7621) ^ (qword_1EBCBE580 + 0x1759DE5FCD247749))));
  unsigned int v9 = -348639895 * ((v8 >> 47) ^ v8);
  for (int i = 1; ; ++i)
  {
    unsigned int v11 = v9 & (v4 - 1);
    uint64_t v12 = v6 + 24 * v11;
    uint64_t v13 = *(void **)v12;
    if (*(void *)v12 == -1)
    {
      if ("conservativelmfencing" == (char *)-1) {
        goto LABEL_23;
      }
      goto LABEL_9;
    }
    if (v13 != (void *)-2) {
      break;
    }
    if ("conservativelmfencing" == (char *)-2) {
      goto LABEL_23;
    }
LABEL_9:
    if (v13 == (void *)-1) {
      return 0;
    }
    unsigned int v9 = i + v11;
  }
  if (*(void *)(v12 + 8) != 21) {
    goto LABEL_9;
  }
  BOOL v14 = *v13 == 0x61767265736E6F63 && v13[1] == 0x65666D6C65766974;
  if (!v14 || *(void *)((char *)v13 + 13) != 0x676E69636E65666DLL) {
    goto LABEL_9;
  }
LABEL_23:
  unsigned int v16 = (uint64_t ***)v5[10];
  unint64_t v67 = v5 + 9;
  if (v16 != v5 + 9)
  {
    int v17 = 0;
    uint64_t v69 = v5;
    while (1)
    {
      int v18 = v16 - 3;
      uint64_t v68 = v16;
      if (!v16) {
        int v18 = 0;
      }
      int v19 = (uint64_t *)(v18 + 5);
      BOOL v20 = (uint64_t *)v18[6];
      if (v20 != (uint64_t *)(v18 + 5)) {
        break;
      }
LABEL_87:
      unsigned int v16 = (uint64_t ***)v68[1];
      if (v16 == v67) {
        return v17 != 0;
      }
    }
    char v21 = 0;
    uint64_t v22 = 1;
    while (2)
    {
      if (v20) {
        unint64_t v23 = v20 - 3;
      }
      else {
        unint64_t v23 = 0;
      }
      int v24 = *((unsigned __int8 *)v23 + 16);
      BOOL v25 = v24 != 60 || v20 == 0;
      if (!v25)
      {
        uint64_t v30 = *(void *)*(v23 - 4);
        int v31 = *(_DWORD *)(v30 + 8);
        if ((v31 & 0xFE) == 0x12) {
          int v31 = *(_DWORD *)(**(void **)(v30 + 16) + 8);
        }
        unsigned int v32 = v31 & 0xFFFFFF00;
        BOOL v14 = v32 == 768;
        BOOL v33 = v32 == 768;
        uint64_t v29 = (v32 != 768) & v22;
        v21 |= v33;
        if (v14 && ((v22 ^ 1) & 1) == 0)
        {
          char v21 = 1;
          goto LABEL_49;
        }
        goto LABEL_74;
      }
      if (v20 && v24 == 61)
      {
        uint64_t v26 = *(void *)*(v23 - 4);
        int v27 = *(_DWORD *)(v26 + 8);
        if ((v27 & 0xFE) == 0x12) {
          int v27 = *(_DWORD *)(**(void **)(v26 + 16) + 8);
        }
        if ((v27 & 0xFFFFFF00) == 0x300)
        {
          char v28 = v21 | v22;
          char v21 = 0;
          if ((v28 & 1) == 0)
          {
            uint64_t v29 = 1;
            goto LABEL_74;
          }
LABEL_49:
          uint64_t v34 = *(uint64_t ***)(*(void *)(v23[5] + 56) + 40);
          llvm::Intrinsic::getType(*v34, 2622, 0, 0);
          Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v34, 2622, 0, 0);
          llvm::Module::getOrInsertFunction((uint64_t)v34, "llvm.agx2.simdgroup.barrier.with.scope", (const char *)0x26, Type, 0);
          int v38 = (uint64_t **)v36;
          if (v36) {
            uint64_t v39 = *(uint64_t ***)(v36 + 24);
          }
          else {
            uint64_t v39 = 0;
          }
          uint64_t v43 = ***v5;
          uint64_t v44 = *(llvm::ConstantInt **)(v43 + 1936);
          unint64_t v45 = *(unsigned int *)(v43 + 1944);
          unsigned int v71 = v45 >> 8;
          if (v45 >> 8 > 0x40) {
            operator new[]();
          }
          if (v45 <= 0xFF) {
            LOBYTE(v46) = 0;
          }
          else {
            unint64_t v46 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v45) + 63);
          }
          BOOL v70 = (const char *)(v46 & 2);
          unsigned int v48 = llvm::ConstantInt::get(v44, (llvm::LLVMContext *)&v70, v37);
          if (v71 >= 0x41 && v70) {
            MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
          }
          v73[0] = (uint64_t)v48;
          uint64_t v49 = ***v5;
          unint64_t v50 = *(llvm::ConstantInt **)(v49 + 1936);
          unint64_t v51 = *(unsigned int *)(v49 + 1944);
          unsigned int v71 = v51 >> 8;
          if (v51 >> 8 > 0x40) {
            operator new[]();
          }
          if (v51 <= 0xFF) {
            LOBYTE(v52) = 0;
          }
          else {
            unint64_t v52 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v51) + 63);
          }
          BOOL v70 = (const char *)(v52 & 4);
          unsigned int v53 = llvm::ConstantInt::get(v50, (llvm::LLVMContext *)&v70, v47);
          if (v71 >= 0x41 && v70) {
            MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
          }
          v73[1] = (uint64_t)v53;
          __int16 v72 = 257;
          uint64_t v54 = (char *)operator new(0xB0uLL);
          int v55 = v54;
          uint64_t v56 = 0;
          int v57 = (llvm::Value *)(v54 + 96);
          *((_DWORD *)v54 + 29) = *((_DWORD *)v54 + 29) & 0x38000000 | 3;
          do
          {
            unsigned int v58 = &v54[v56];
            *(void *)unsigned int v58 = 0;
            *((void *)v58 + 1) = 0;
            *((void *)v58 + 2) = 0;
            *((void *)v58 + 3) = v57;
            v56 += 32;
          }
          while (v56 != 96);
          uint64_t v59 = *v39[2];
          *(_OWORD *)(v54 + 120) = 0u;
          uint64_t v60 = v54 + 120;
          *((void *)v54 + 12) = v59;
          *((void *)v54 + 13) = 0;
          v54[112] = 84;
          v54[113] = 0;
          *((_WORD *)v54 + 57) = 0;
          *((_DWORD *)v54 + 29) = *((_DWORD *)v54 + 29) & 0xC0000000 | 3;
          *(_OWORD *)(v54 + 136) = 0u;
          *((_DWORD *)v54 + 38) = 0;
          if (v20)
          {
            uint64_t v61 = v23[5];
            *((void *)v54 + 17) = v61;
            *(_WORD *)(v61 + 18) &= ~0x8000u;
            if ((v54[119] & 0x10) != 0)
            {
              uint64_t v63 = *(void *)(v61 + 56);
              if (v63)
              {
                unsigned int v64 = *(llvm::ValueSymbolTable **)(v63 + 104);
                if (v64) {
                  llvm::ValueSymbolTable::reinsertValue(v64, v57);
                }
              }
            }
            uint64_t v62 = *v20;
            v55[15] = *v20;
            v55[16] = v20;
            *(void *)(v62 + 8) = v60;
            *BOOL v20 = (uint64_t)v60;
          }
          v55[20] = 0;
          llvm::CallInst::init((uint64_t ***)v57, v39, v38, v73, 2, 0, 0, &v70);
          int v17 = 1;
          uint64_t v29 = v25;
          unsigned int v5 = v69;
LABEL_74:
          BOOL v20 = (uint64_t *)v20[1];
          uint64_t v22 = v29;
          if (v20 == v19) {
            goto LABEL_87;
          }
          continue;
        }
      }
      else if (v20 && v24 == 65)
      {
        uint64_t v40 = *(void *)*(v23 - 8);
        int v41 = *(_DWORD *)(v40 + 8);
        if ((v41 & 0xFE) == 0x12) {
          int v41 = *(_DWORD *)(**(void **)(v40 + 16) + 8);
        }
        if ((v41 & 0xFFFFFF00) == 0x300)
        {
          char v42 = v21 | v22;
          char v21 = 1;
          uint64_t v29 = 1;
          if (v42) {
            goto LABEL_49;
          }
          goto LABEL_74;
        }
      }
      break;
    }
    uint64_t v29 = v22;
    goto LABEL_74;
  }
  return 0;
}

void sub_1CC7B7E6C()
{
}

void sub_1CC7B7F08()
{
}

void sub_1CC7B7F68(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC7B7FA0(llvm::PassRegistry *a1, uint64_t a2)
{
  v3[0] = &unk_1F2617E40;
  v3[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v3);
}

uint64_t sub_1CC7B7FEC(uint64_t a1, uint64_t a2)
{
  v80[10] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a2 + 8;
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3 != a2 + 8)
  {
    int v4 = 0;
    uint64_t v58 = a2 + 272;
    uint64_t v56 = a2 + 8;
    while (1)
    {
      if (v3) {
        uint64_t v5 = v3 - 56;
      }
      else {
        uint64_t v5 = 0;
      }
      if ((*(_DWORD *)(*(void *)v5 + 8) & 0xFFFFFF00) != 0x200) {
        goto LABEL_33;
      }
      uint64_t v6 = *(void *)(v5 + 24);
      if (*(unsigned char *)(v6 + 8) != 17 || *(_DWORD *)(v6 + 32) > 4u) {
        goto LABEL_33;
      }
      uint64_t v59 = **(void **)(v6 + 16);
      if ((*(_DWORD *)(v59 + 8) & 0xFE) != 0x12)
      {
        unsigned int v7 = *(_DWORD *)(v59 + 8);
        BOOL v8 = v7 > 0x15;
        int v9 = (1 << v7) & 0x20AC7F;
        if (v8 || v9 == 0) {
          goto LABEL_33;
        }
      }
      if (v3 && *(unsigned char *)(v5 + 16) == 3)
      {
        if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 0) {
          goto LABEL_33;
        }
      }
      else if (!*(unsigned char *)(v5 + 16) && *(void *)(v5 + 72) == v5 + 72 && (*(unsigned char *)(v5 + 34) & 0x80) == 0)
      {
        goto LABEL_33;
      }
      if ((*(unsigned char *)(v5 + 80) & 2) == 0) {
        break;
      }
LABEL_33:
      uint64_t v3 = *(void *)(v3 + 8);
      if (v3 == v2) {
        return v4 & 1;
      }
    }
    unsigned int v11 = *(llvm::Module **)(v5 + 40);
    unint64_t v65 = v67;
    uint64_t v66 = 0x800000000;
    llvm::Module::getModuleFlagsMetadata(v11, (uint64_t)&v65);
    if (v66)
    {
      uint64_t v12 = (uint64_t *)((char *)v65 + 16);
      uint64_t v13 = 24 * v66;
      while (1)
      {
        uint64_t v14 = *(void *)(*(v12 - 1) + 8);
        if (*(void *)v14 == 9)
        {
          uint64_t v15 = *(void *)(v14 + 24);
          uint64_t v16 = *(unsigned __int8 *)(v14 + 32);
          if (*(void *)"PIC Level" == v15 && aPicLevel[8] == v16) {
            break;
          }
        }
        v12 += 3;
        v13 -= 24;
        if (!v13) {
          goto LABEL_35;
        }
      }
      uint64_t v18 = *v12;
    }
    else
    {
LABEL_35:
      uint64_t v18 = 0;
    }
    if (v65 == v67)
    {
      if (!v18) {
        goto LABEL_38;
      }
    }
    else
    {
      free(v65);
      if (!v18) {
        goto LABEL_38;
      }
    }
    uint64_t v53 = *(void *)(v18 + 128);
    uint64_t v54 = (void *)(v53 + 24);
    if (*(_DWORD *)(v53 + 32) >= 0x41u) {
      uint64_t v54 = (void *)*v54;
    }
    if (*(_DWORD *)v54 && llvm::Constant::getRelocationInfo(*(llvm::Constant **)(v5 - 32)) == 2)
    {
LABEL_102:
      uint64_t v2 = v56;
      goto LABEL_33;
    }
LABEL_38:
    int v57 = v4;
    uint64_t v19 = *(void *)(v5 + 8);
    while (v19)
    {
      uint64_t v20 = *(void *)(v19 + 24);
      uint64_t v19 = *(void *)(v19 + 8);
      if (v20 && *(unsigned char *)(v20 + 16) == 62)
      {
        uint64_t v60 = v19;
        if ((*(_DWORD *)(v20 + 20) & 0x7FFFFFF) == 3)
        {
          uint64_t v21 = *(void *)(v20 - 64);
          if (*(unsigned __int8 *)(v21 + 16) <= 0x14u)
          {
            uint64_t v22 = (void *)(v21 + 24);
            if (*(_DWORD *)(v21 + 32) >= 0x41u) {
              uint64_t v22 = (void *)*v22;
            }
            if (!*v22)
            {
              uint64_t v23 = *(void *)(v20 + 8);
              if (v23)
              {
                while (1)
                {
                  uint64_t v24 = *(void *)(v23 + 24);
                  uint64_t v23 = *(void *)(v23 + 8);
                  if (v24)
                  {
                    if (*(unsigned char *)(v24 + 16) == 60)
                    {
                      BOOL v25 = (uint64_t *)v59;
                      if (*(void *)v24 == v59) {
                        goto LABEL_61;
                      }
                      uint64_t v26 = sub_1CB83544C(v58, *(void *)v24);
                      uint64_t v27 = v23;
                      int v29 = v28;
                      BOOL v31 = v26 == sub_1CB83544C(v58, v59) && v29 == v30;
                      uint64_t v23 = v27;
                      if (v31) {
                        break;
                      }
                    }
                  }
                  if (!v23) {
                    goto LABEL_46;
                  }
                }
                BOOL v25 = *(uint64_t **)v24;
LABEL_61:
                uint64_t v32 = 0;
                uint64_t v33 = *(unsigned int *)(*(void *)(v5 + 24) + 32);
                uint64_t v34 = *v25;
                unint64_t v65 = v67;
                uint64_t v66 = 0x200000000;
                uint64_t v70 = v34;
                unsigned int v71 = &v79;
                __int16 v72 = v80;
                uint64_t v73 = 0;
                int v74 = 0;
                __int16 v75 = 512;
                char v76 = 7;
                uint64_t v68 = 0;
                uint64_t v69 = 0;
                uint64_t v77 = 0;
                uint64_t v78 = 0;
                unsigned int v79 = &unk_1F2616E88;
                v80[0] = &unk_1F2617008;
                uint64_t v68 = *(void *)(v24 + 40);
                uint64_t v69 = v24 + 24;
                int v35 = *(unsigned __int8 **)(v24 + 48);
                v61[0] = v35;
                if (v35)
                {
                  llvm::MetadataTracking::track((uint64_t)v61, v35, 2);
                  uint64_t v32 = v61[0];
                }
                sub_1CB8461A4((uint64_t)&v65, 0, v32);
                if (!v61[0])
                {
LABEL_64:
                  uint64_t v36 = *(llvm::ConstantInt ***)(v20 + 64 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF));
                  uint64_t v37 = *(llvm::Constant **)(v5 - 32);
                  AggregateElement = (unsigned __int8 *)llvm::Constant::getAggregateElement(v37, 0);
                  if ((v33 & 0xFFFFFFFE) != 0)
                  {
                    unint64_t v39 = 1;
                    do
                    {
                      uint64_t v40 = llvm::ConstantInt::get(*v36, v39, 0);
                      __int16 v64 = 257;
                      int v41 = sub_1CB845F20((uint64_t)&v65, 32, v36, (uint64_t)v40, (uint64_t)v63);
                      char v42 = (llvm::Value *)llvm::Constant::getAggregateElement(v37, (llvm::Type *)v39);
                      __int16 v64 = 257;
                      AggregateElement = (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v65, v41, v42, (llvm::Value *)AggregateElement, (const llvm::Twine *)v63, 0);
                      ++v39;
                    }
                    while (v33 != v39);
                  }
                  uint64_t v43 = *(void *)v24;
                  if (*(void *)AggregateElement != *(void *)v24)
                  {
                    __int16 v62 = 257;
                    if (AggregateElement[16] <= 0x14u)
                    {
                      AggregateElement = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v71
                                                             + 28))(v71, 49, AggregateElement, v43);
                      if (AggregateElement) {
                        BOOL v46 = AggregateElement[16] >= 0x1Cu;
                      }
                      else {
                        BOOL v46 = 0;
                      }
                      if (v46)
                      {
                        (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v72 + 16))(v72, AggregateElement, v61, v68, v69);
                        if (v66)
                        {
                          unint64_t v51 = (llvm::MDNode **)v65;
                          unint64_t v52 = (llvm::MDNode **)((char *)v65 + 16 * v66);
                          do
                          {
                            llvm::Instruction::setMetadata((llvm::Instruction *)AggregateElement, *(_DWORD *)v51, v51[1]);
                            v51 += 2;
                          }
                          while (v51 != v52);
                        }
                      }
                    }
                    else
                    {
                      __int16 v64 = 257;
                      AggregateElement = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)AggregateElement, v43, v63, 0);
                      (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v72 + 16))(v72, AggregateElement, v61, v68, v69);
                      if (v66)
                      {
                        uint64_t v44 = (llvm::MDNode **)v65;
                        unint64_t v45 = (llvm::MDNode **)((char *)v65 + 16 * v66);
                        do
                        {
                          llvm::Instruction::setMetadata((llvm::Instruction *)AggregateElement, *(_DWORD *)v44, v44[1]);
                          v44 += 2;
                        }
                        while (v44 != v45);
                      }
                    }
                  }
                  if (v65 != v67) {
                    free(v65);
                  }
                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v24, (llvm::Value *)AggregateElement, (llvm::Value *)1);
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                }
                int v47 = *(unsigned __int8 *)v61[0];
                if ((v47 - 4) > 0x1E)
                {
                  if ((v47 - 3) >= 0xFFFFFFFE) {
                    uint64_t v50 = v61[0];
                  }
                  else {
                    uint64_t v50 = 0;
                  }
                  if ((v47 - 3) < 0xFFFFFFFE)
                  {
                    if (v47 == 3) {
                      *(void *)(v61[0] + 8) = 0;
                    }
                    goto LABEL_64;
                  }
                  unint64_t v49 = v50 + 8;
                }
                else
                {
                  if ((*(unsigned char *)(v61[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v61[0] + 12)) {
                    goto LABEL_64;
                  }
                  uint64_t v48 = *(void *)(v61[0] + 16);
                  if ((v48 & 4) == 0) {
                    goto LABEL_64;
                  }
                  unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFF8;
                  if (!v49) {
                    goto LABEL_64;
                  }
                }
                v63[0] = (const char *)v61;
                sub_1CC5FA668(v49 + 16, v63);
                goto LABEL_64;
              }
            }
          }
        }
LABEL_46:
        if (!*(void *)(v20 + 8)) {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        uint64_t v19 = v60;
      }
    }
    int v4 = v57;
    goto LABEL_102;
  }
  LOBYTE(v4) = 0;
  return v4 & 1;
}

void sub_1CC7B8750(uint64_t a1)
{
}

void sub_1CC7B87F0()
{
}

void sub_1CC7B88BC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC7B88F4(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 112;
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, v3, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1CC7B8988(llvm::LoopPass *a1, const llvm::Loop *a2)
{
  if ((llvm::LoopPass::skipLoop(a1, a2) & 1) == 0)
  {
    uint64_t v3 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    if (v4 == v5)
    {
LABEL_5:
      uint64_t v6 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v4 != &llvm::DominatorTreeWrapperPass::ID)
      {
        v4 += 16;
        if (v4 == v5) {
          goto LABEL_5;
        }
      }
      uint64_t v6 = *(void *)(v4 + 8);
    }
    (*(void (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::DominatorTreeWrapperPass::ID);
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
  }
  return 0;
}

void sub_1CC7B8E10()
{
}

uint64_t sub_1CC7B8EB0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDB4C8;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261E790;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 96;
  *(void *)(a1 + 88) = 0x2000000000;
  *(void *)(a1 + 352) = a1 + 368;
  *(void *)(a1 + 360) = 0x2000000000;
  *(void *)(a1 + 880) = a1 + 896;
  *(void *)(a1 + 888) = 0x2000000000;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB4D0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC7B8E10;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCDB4D0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC7B8F9C()
{
}

void sub_1CC7B8FD8(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F261E790;
  uint64_t v2 = (void *)*((void *)a1 + 110);
  if (v2 != (void *)((char *)a1 + 896)) {
    free(v2);
  }
  uint64_t v3 = (void *)*((void *)a1 + 44);
  if (v3 != (void *)((char *)a1 + 368)) {
    free(v3);
  }
  uint64_t v4 = (void *)*((void *)a1 + 10);
  if (v4 != (void *)((char *)a1 + 96)) {
    free(v4);
  }
  MEMORY[0x1D25D9CD0](*((void *)a1 + 7), 8);
  MEMORY[0x1D25D9CD0](*((void *)a1 + 4), 8);

  llvm::Pass::~Pass(a1);
}

void sub_1CC7B907C(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F261E790;
  uint64_t v2 = (void *)*((void *)a1 + 110);
  if (v2 != (void *)((char *)a1 + 896)) {
    free(v2);
  }
  uint64_t v3 = (void *)*((void *)a1 + 44);
  if (v3 != (void *)((char *)a1 + 368)) {
    free(v3);
  }
  uint64_t v4 = (void *)*((void *)a1 + 10);
  if (v4 != (void *)((char *)a1 + 96)) {
    free(v4);
  }
  MEMORY[0x1D25D9CD0](*((void *)a1 + 7), 8);
  MEMORY[0x1D25D9CD0](*((void *)a1 + 4), 8);
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC7B9134(llvm::PassRegistry *a1, uint64_t a2)
{
  v3[0] = &unk_1F2617E40;
  v3[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v3);
}

BOOL sub_1CC7B9180(_DWORD *a1, uint64_t a2)
{
  uint64_t v421 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t *)(a1 + 8);
  sub_1CC6FE80C(a1 + 8);
  int v4 = a1[16];
  if (v4 || a1[17])
  {
    uint64_t v362 = a1 + 14;
    uint64_t v363 = a1[18];
    if (v363 > 4 * v4 && v363 >= 0x41)
    {
      sub_1CD3C8060(v362);
    }
    else
    {
      if (v363)
      {
        uint64_t v364 = *(void **)v362;
        uint64_t v365 = 16 * v363;
        do
        {
          *uint64_t v364 = -4096;
          v364 += 2;
          v365 -= 16;
        }
        while (v365);
      }
      *((void *)a1 + 8) = 0;
    }
  }
  int v366 = v3;
  uint64_t v5 = 0;
  a1[22] = 0;
  uint64_t v368 = (uint64_t)(a1 + 88);
  a1[90] = 0;
  uint64_t v376 = (uint64_t)a1;
  a1[222] = 0;
  do
  {
    __p = v5;
    uint64_t v6 = off_1E684AA40[(void)v5];
    uint64_t v7 = *(void *)(a2 + 40);
    if (!v6)
    {
      int v9 = *(uint64_t **)(v7 + 112);
      unsigned int v13 = *((_DWORD *)v9 + 2);
      if (!v13) {
        goto LABEL_44;
      }
      size_t v12 = 0;
LABEL_22:
      int v16 = 0;
      BOOL v14 = 1;
      goto LABEL_23;
    }
    size_t v8 = strlen(off_1E684AA40[(void)v5]);
    int v9 = *(uint64_t **)(v7 + 112);
    size_t v10 = *((unsigned int *)v9 + 8);
    if (v10 <= 1) {
      unint64_t v11 = 1;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v8 < v11) {
      unint64_t v11 = v8;
    }
    if (v8 <= v10) {
      unint64_t v11 = v8;
    }
    if ((v10 & 0x80000000) == 0) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v8;
    }
    unsigned int v13 = *((_DWORD *)v9 + 2);
    if (!v13) {
      goto LABEL_44;
    }
    BOOL v14 = v12 == 0;
    if (!v12) {
      goto LABEL_22;
    }
    uint64_t v15 = 0;
    int v16 = 0;
    do
      int v16 = 33 * v16 + v6[v15++];
    while (v12 != v15);
LABEL_23:
    unsigned int v17 = v13 - 1;
    uint64_t v18 = *v9;
    uint64_t v370 = v13;
    uint64_t v19 = *v9 + 8 * v13 + 8;
    int v20 = 1;
    int v21 = v16;
    while (1)
    {
      uint64_t v22 = v21 & v17;
      uint64_t v23 = *(void **)(v18 + 8 * v22);
      if (v23 != (void *)-8)
      {
        if (!v23) {
          goto LABEL_44;
        }
        if (*(_DWORD *)(v19 + 4 * v22) == v16
          && v12 == *v23
          && (v14 || !memcmp(v6, (char *)v23 + *((unsigned int *)v9 + 5), v12)))
        {
          break;
        }
      }
      int v21 = v20 + v22;
      ++v20;
    }
    if (v22 != -1 && (int)v22 != v370)
    {
      uint64_t v24 = *(void *)(*(void *)(v18 + 8 * (int)v22) + 8);
      if (v24)
      {
        if (!*(unsigned char *)(v24 + 16))
        {
          for (uint64_t i = *(void *)(v24 + 8); i; uint64_t i = *(void *)(i + 8))
          {
            uint64_t v26 = *(void *)(i + 24);
            if (v26) {
              BOOL v27 = *(unsigned __int8 *)(v26 + 16) >= 0x1Cu;
            }
            else {
              BOOL v27 = 0;
            }
            if (v27 && *(void *)(*(void *)(v26 + 40) + 56) == a2) {
              sub_1CC7BB5A8(v368, v26, 0);
            }
          }
        }
      }
    }
LABEL_44:
    uint64_t v5 = __p + 1;
  }
  while (__p != (char *)8);
  uint64_t v28 = v376;
  int v367 = *(_DWORD *)(v376 + 360);
  if (!v367) {
    return v367 != 0;
  }
  unsigned int v29 = *(_DWORD *)(v376 + 360);
  int v30 = v366;
  uint64_t v31 = v368;
  while (2)
  {
    uint64_t v32 = *(void *)(v28 + 352) + 16 * v29;
    uint64_t v34 = *(int **)(v32 - 16);
    uint64_t v33 = *(void *)(v32 - 8);
    *(_DWORD *)(v28 + 360) = v29 - 1;
    __b = v34;
    BOOL v398 = 0;
    if (sub_1CBA0E618((uint64_t)v30, &__b, &v398)) {
      goto LABEL_446;
    }
    if (v33)
    {
      int v35 = 0;
      uint64_t v36 = **(void **)v34;
      __b = v404;
      uint64_t v403 = 0x200000000;
      uint64_t v407 = v36;
      int v408 = &v416;
      BOOL v409 = v417;
      uint64_t v410 = 0;
      int v411 = 0;
      __int16 v412 = 512;
      char v413 = 7;
      unsigned int v405 = 0;
      v406 = 0;
      uint64_t v414 = 0;
      uint64_t v415 = 0;
      v416 = &unk_1F2616E88;
      v417[0] = &unk_1F2617008;
      unsigned int v405 = (void **)*((void *)v34 + 5);
      v406 = (void ***)(v34 + 6);
      uint64_t v37 = (void **)*((void *)v34 + 6);
      v380 = v37;
      if (v37)
      {
        llvm::MetadataTracking::track((uint64_t)&v380, (unsigned __int8 *)v37, 2);
        int v35 = v380;
      }
      sub_1CB8461A4((uint64_t)&__b, 0, (uint64_t)v35);
      if (v380)
      {
        int v119 = *(unsigned __int8 *)v380;
        if ((v119 - 4) > 0x1E)
        {
          if ((v119 - 3) >= 0xFFFFFFFE) {
            uint64_t v182 = v380;
          }
          else {
            uint64_t v182 = 0;
          }
          if ((v119 - 3) < 0xFFFFFFFE)
          {
            if (v119 == 3) {
              *((void *)v380 + 1) = 0;
            }
            goto LABEL_52;
          }
          unint64_t v121 = (unint64_t)v182 + 8;
        }
        else
        {
          if ((*((unsigned char *)v380 + 1) & 0x7F) != 2 && !*((_DWORD *)v380 + 3)) {
            goto LABEL_52;
          }
          uint64_t v120 = *((void *)v380 + 2);
          if ((v120 & 4) == 0) {
            goto LABEL_52;
          }
          unint64_t v121 = v120 & 0xFFFFFFFFFFFFFFF8;
          if (!v121) {
            goto LABEL_52;
          }
        }
        BOOL v398 = &v380;
        sub_1CC5FA668(v121 + 16, &v398);
      }
LABEL_52:
      if (*((unsigned char *)v34 + 16) == 83)
      {
        unint64_t v38 = sub_1CC7BB62C(v28, *(void *)v34);
        int v39 = v34[5];
        if ((v39 & 0x10000000) != 0)
        {
          uint64_t v40 = ***(void ***)v34;
          uint64_t v41 = *(void *)(v40 + 152);
          uint64_t v42 = *(unsigned int *)(v40 + 168);
          if (v42)
          {
            LODWORD(v43) = (v42 - 1) & ((v34 >> 4) ^ (v34 >> 9));
            uint64_t v44 = (int **)(v41 + 16 * v43);
            unint64_t v45 = *v44;
            if (*v44 != v34)
            {
              int v46 = 1;
              do
              {
                if (v45 == (int *)-4096) {
                  goto LABEL_154;
                }
                int v47 = v43 + v46++;
                uint64_t v43 = v47 & (v42 - 1);
                unint64_t v45 = *(int **)(v41 + 16 * v43);
              }
              while (v45 != v34);
              uint64_t v44 = (int **)(v41 + 16 * v43);
            }
          }
          else
          {
LABEL_154:
            uint64_t v44 = (int **)(v41 + 16 * v42);
          }
          uint64_t v113 = v44[1];
          uint64_t v116 = *(void *)v113;
          v115 = (char *)(v113 + 4);
          uint64_t v114 = v116;
        }
        else
        {
          uint64_t v114 = 0;
          v115 = &byte_1CFBCE98E;
        }
        __int16 v401 = 261;
        BOOL v398 = v115;
        uint64_t v399 = v114;
        int v117 = sub_1CB93113C((uint64_t)&__b, v38, v39 & 0x7FFFFFF, (uint64_t)&v398);
        goto LABEL_157;
      }
      if (!sub_1CC7BB938(v28, (uint64_t)v34)) {
        goto LABEL_153;
      }
      int v83 = 0;
      uint64_t v84 = 0;
      unsigned int v85 = *((unsigned __int8 *)v34 + 16);
      if (v85 <= 0x4C)
      {
        if (v85 != 60)
        {
          if (v85 == 61)
          {
            uint64_t v86 = sub_1CC7BB818(v28, *((void *)v34 - 8));
            uint64_t v87 = v28;
            unsigned int v88 = v86;
            BOOL v89 = sub_1CC7BB818(v87, *((void *)v34 - 4));
            __int16 v90 = *((_WORD *)v34 + 9);
            uint64_t v91 = (char *)operator new(0x80uLL);
            *((_DWORD *)v91 + 21) = *((_DWORD *)v91 + 21) & 0x38000000 | 2;
            *(void *)uint64_t v91 = 0;
            *((void *)v91 + 2) = 0;
            *((void *)v91 + 1) = 0;
            *((void *)v91 + 5) = 0;
            *((void *)v91 + 6) = 0;
            *((void *)v91 + 4) = 0;
            uint64_t v92 = (llvm::detail::IEEEFloat **)(v91 + 32);
            *((void *)v91 + 8) = ***(void ***)v88 + 1576;
            uint64_t v84 = (unsigned __int8 *)(v91 + 64);
            *((void *)v91 + 3) = v91 + 64;
            *((void *)v91 + 7) = v91 + 64;
            *((void *)v91 + 9) = 0;
            v91[80] = 61;
            v91[81] = 0;
            *((_WORD *)v91 + 41) = 0;
            *((_DWORD *)v91 + 21) = 2;
            *(_OWORD *)(v91 + 88) = 0u;
            *(_OWORD *)(v91 + 104) = 0u;
            *((_DWORD *)v91 + 30) = 0;
            *(void *)uint64_t v91 = v88;
            uint64_t v95 = *((void *)v88 + 1);
            BOOL v94 = (void *)((char *)v88 + 8);
            uint64_t v93 = v95;
            *((void *)v91 + 1) = v95;
            if (v95) {
              *(void *)(v93 + 16) = v91 + 8;
            }
            *((void *)v91 + 2) = v94;
            *BOOL v94 = v91;
            if (*((void *)v91 + 4))
            {
              **((void **)v91 + 6) = *((void *)v91 + 5);
              uint64_t v314 = *((void *)v91 + 5);
              if (v314) {
                *(void *)(v314 + 16) = *((void *)v91 + 6);
              }
            }
            *uint64_t v92 = v89;
            uint64_t v28 = v376;
            if (v89)
            {
              uint64_t v98 = *((void *)v89 + 1);
              int v97 = (llvm::detail::IEEEFloat ***)((char *)v89 + 8);
              uint64_t v96 = v98;
              *((void *)v91 + 5) = v98;
              if (v98) {
                *(void *)(v96 + 16) = v91 + 40;
              }
              *((void *)v91 + 6) = v97;
              *int v97 = v92;
            }
            *((_WORD *)v91 + 41) = v90 & 0x7F;
            v91[124] = 1;
            __int16 v401 = 257;
            (*(void (**)(void *, unsigned __int8 *, void **, void **, void ***))(*v409 + 16))(v409, v84, &v398, v405, v406);
            if (v403)
            {
              int v99 = (llvm::MDNode **)__b;
              uint64_t v100 = (llvm::MDNode **)((char *)__b + 16 * v403);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v84, *(_DWORD *)v99, v99[1]);
                v99 += 2;
              }
              while (v99 != v100);
            }
            goto LABEL_158;
          }
          if (v85 == 59)
          {
            v141 = (llvm::Type *)sub_1CC7BB62C(v28, *((void *)v34 + 8));
            uint64_t v142 = *(uint64_t ***)v34;
            if ((*((unsigned char *)v34 + 23) & 0x10) != 0)
            {
              uint64_t v143 = **v142;
              uint64_t v144 = *(void *)(v143 + 152);
              uint64_t v145 = *(unsigned int *)(v143 + 168);
              if (v145)
              {
                LODWORD(v146) = (v145 - 1) & ((v34 >> 4) ^ (v34 >> 9));
                v147 = (int **)(v144 + 16 * v146);
                v148 = *v147;
                if (*v147 != v34)
                {
                  int v149 = 1;
                  do
                  {
                    if (v148 == (int *)-4096) {
                      goto LABEL_312;
                    }
                    int v150 = v146 + v149++;
                    uint64_t v146 = v150 & (v145 - 1);
                    v148 = *(int **)(v144 + 16 * v146);
                  }
                  while (v148 != v34);
                  v147 = (int **)(v144 + 16 * v146);
                }
              }
              else
              {
LABEL_312:
                v147 = (int **)(v144 + 16 * v145);
              }
              int v215 = v147[1];
              uint64_t v218 = *(void *)v215;
              v217 = (char *)(v215 + 4);
              uint64_t v216 = v218;
            }
            else
            {
              uint64_t v216 = 0;
              v217 = &byte_1CFBCE98E;
            }
            v219 = (llvm::Type *)(*((_DWORD *)v142 + 2) >> 8);
            int v220 = (void *)*((void *)v34 - 4);
            __int16 v401 = 261;
            BOOL v398 = v217;
            uint64_t v399 = v216;
            int v117 = sub_1CD63F438((uint64_t)&__b, v141, v219, v220, (uint64_t)&v398);
LABEL_157:
            uint64_t v84 = (unsigned __int8 *)v117;
LABEL_158:
            int v83 = 1;
          }
          goto LABEL_159;
        }
        unint64_t v131 = sub_1CC7BB62C(v28, *(void *)v34);
        v132 = sub_1CC7BB818(v28, *((void *)v34 - 4));
        if ((*((unsigned char *)v34 + 23) & 0x10) != 0)
        {
          uint64_t v133 = ***(void ***)v34;
          uint64_t v134 = *(void *)(v133 + 152);
          uint64_t v135 = *(unsigned int *)(v133 + 168);
          if (v135)
          {
            LODWORD(v136) = (v135 - 1) & ((v34 >> 4) ^ (v34 >> 9));
            uint64_t v137 = (int **)(v134 + 16 * v136);
            v138 = *v137;
            if (*v137 != v34)
            {
              int v139 = 1;
              do
              {
                if (v138 == (int *)-4096) {
                  goto LABEL_288;
                }
                int v140 = v136 + v139++;
                uint64_t v136 = v140 & (v135 - 1);
                v138 = *(int **)(v134 + 16 * v136);
              }
              while (v138 != v34);
              uint64_t v137 = (int **)(v134 + 16 * v136);
            }
          }
          else
          {
LABEL_288:
            uint64_t v137 = (int **)(v134 + 16 * v135);
          }
          unsigned int v190 = v137[1];
          uint64_t v193 = *(void *)v190;
          v192 = (char *)(v190 + 4);
          uint64_t v191 = v193;
        }
        else
        {
          uint64_t v191 = 0;
          v192 = &byte_1CFBCE98E;
        }
        unint64_t v194 = *((unsigned __int16 *)v34 + 9);
        __int16 v195 = *((_WORD *)v34 + 9) & 1;
        v384[0] = 261;
        v380 = v192;
        uint64_t v381 = v191;
        uint64_t v196 = (v194 >> 1) & 0x3F;
        int v197 = (char *)operator new(0x60uLL);
        *((_DWORD *)v197 + 13) = *((_DWORD *)v197 + 13) & 0x38000000 | 1;
        uint64_t v84 = (unsigned __int8 *)(v197 + 32);
        *(void *)int v197 = 0;
        *((void *)v197 + 1) = 0;
        *((void *)v197 + 2) = 0;
        *((void *)v197 + 3) = v197 + 32;
        __int16 v401 = 257;
        llvm::LoadInst::LoadInst((llvm::Value *)(v197 + 32), v131, (uint64_t)v132, (const char **)&v398, v195, v196, 0);
        (*(void (**)(void *, unsigned __int8 *, void **, void **, void ***))(*v409 + 16))(v409, v84, &v380, v405, v406);
        if (v403)
        {
          uint64_t v209 = (llvm::MDNode **)__b;
          v210 = (llvm::MDNode **)((char *)__b + 16 * v403);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v84, *(_DWORD *)v209, v209[1]);
            v209 += 2;
          }
          while (v209 != v210);
        }
        int v83 = 1;
LABEL_292:
        uint64_t v28 = v376;
        uint64_t v31 = v368;
        goto LABEL_159;
      }
      if (v85 == 77)
      {
        uint64_t v84 = (unsigned __int8 *)sub_1CC7BB818(v28, *((void *)v34 - 4));
        unint64_t v122 = sub_1CC7BB62C(v28, *(void *)v34);
        if ((*((unsigned char *)v34 + 23) & 0x10) != 0)
        {
          uint64_t v123 = ***(void ***)v34;
          uint64_t v124 = *(void *)(v123 + 152);
          uint64_t v125 = *(unsigned int *)(v123 + 168);
          if (v125)
          {
            LODWORD(v126) = (v125 - 1) & ((v34 >> 4) ^ (v34 >> 9));
            v127 = (int **)(v124 + 16 * v126);
            int v128 = *v127;
            if (*v127 != v34)
            {
              int v129 = 1;
              do
              {
                if (v128 == (int *)-4096) {
                  goto LABEL_273;
                }
                int v130 = v126 + v129++;
                uint64_t v126 = v130 & (v125 - 1);
                int v128 = *(int **)(v124 + 16 * v126);
              }
              while (v128 != v34);
              v127 = (int **)(v124 + 16 * v126);
            }
          }
          else
          {
LABEL_273:
            v127 = (int **)(v124 + 16 * v125);
          }
          uint64_t v183 = v127[1];
          uint64_t v186 = *(void *)v183;
          uint64_t v185 = (char *)(v183 + 4);
          uint64_t v184 = v186;
        }
        else
        {
          uint64_t v184 = 0;
          uint64_t v185 = &byte_1CFBCE98E;
        }
        v384[0] = 261;
        v380 = v185;
        uint64_t v381 = v184;
        if (*(void *)v84 != v122)
        {
          if (v84[16] <= 0x14u)
          {
            uint64_t v84 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v408
                                      + 28))(v408, 49, v84, v122);
            if (v84) {
              BOOL v189 = v84[16] >= 0x1Cu;
            }
            else {
              BOOL v189 = 0;
            }
            if (v189)
            {
              (*(void (**)(void *, unsigned __int8 *, void **, void **, void ***))(*v409 + 16))(v409, v84, &v380, v405, v406);
              if (v403)
              {
                BOOL v317 = (llvm::MDNode **)__b;
                v318 = (llvm::MDNode **)((char *)__b + 16 * v403);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v84, *(_DWORD *)v317, v317[1]);
                  v317 += 2;
                }
                while (v317 != v318);
              }
              uint64_t v28 = v376;
              int v30 = v366;
              uint64_t v31 = v368;
            }
          }
          else
          {
            __int16 v401 = 257;
            uint64_t v84 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v84, v122, (const char **)&v398, 0);
            (*(void (**)(void *, unsigned __int8 *, void **, void **, void ***))(*v409 + 16))(v409, v84, &v380, v405, v406);
            if (v403)
            {
              uint64_t v187 = (llvm::MDNode **)__b;
              uint64_t v188 = (llvm::MDNode **)((char *)__b + 16 * v403);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v84, *(_DWORD *)v187, v187[1]);
                v187 += 2;
              }
              while (v187 != v188);
            }
          }
        }
        goto LABEL_158;
      }
      if (v85 == 91)
      {
        int v101 = v34[18];
        if ((v101 & 1) == 0)
        {
          uint64_t v102 = *((void *)v34 - 8);
          if ((*(unsigned char *)(*(void *)v102 + 32) & 1) != 0
            || (uint64_t v103 = *((void *)v34 - 4), (*(unsigned char *)(*(void *)v103 + 32) & 1) != 0))
          {
            uint64_t v84 = 0;
            int v83 = 0;
            uint64_t v28 = v376;
            goto LABEL_159;
          }
          int v104 = (void **)*((void *)v34 + 8);
          BOOL v398 = v400;
          uint64_t v399 = 0x800000000;
          if (v101 >= 1)
          {
            unsigned int v105 = 0;
            uint64_t v106 = 0;
            do
            {
              uint64_t v107 = (int *)&v104[v106];
              int v108 = *v107;
              int v109 = v107[1];
              if (v108 == -1 && v109 == -1)
              {
                unsigned int v112 = HIDWORD(v399);
                int v111 = -1;
              }
              else
              {
                int v83 = 0;
                uint64_t v84 = 0;
                if ((v108 & 1) != 0 || v109 != v108 + 1) {
                  goto LABEL_310;
                }
                int v111 = v108 / 2;
                unsigned int v112 = HIDWORD(v399);
              }
              if (v105 >= v112) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v398 + v105) = v111;
              unsigned int v105 = v399 + 1;
              LODWORD(v399) = v399 + 1;
              ++v106;
            }
            while (v101 > (int)(v106 * 2));
          }
          uint64_t v198 = v103;
          unsigned int v199 = sub_1CC7BB818(v376, v102);
          uint64_t v200 = sub_1CC7BB818(v376, v198);
          if ((*((unsigned char *)v34 + 23) & 0x10) != 0)
          {
            uint64_t v201 = ***(void ***)v34;
            uint64_t v202 = *(void *)(v201 + 152);
            uint64_t v203 = *(unsigned int *)(v201 + 168);
            if (v203)
            {
              LODWORD(v204) = (v203 - 1) & ((v34 >> 4) ^ (v34 >> 9));
              uint64_t v205 = (int **)(v202 + 16 * v204);
              v206 = *v205;
              if (*v205 != v34)
              {
                int v207 = 1;
                do
                {
                  if (v206 == (int *)-4096) {
                    goto LABEL_307;
                  }
                  int v208 = v204 + v207++;
                  uint64_t v204 = v208 & (v203 - 1);
                  v206 = *(int **)(v202 + 16 * v204);
                }
                while (v206 != v34);
                uint64_t v205 = (int **)(v202 + 16 * v204);
              }
            }
            else
            {
LABEL_307:
              uint64_t v205 = (int **)(v202 + 16 * v203);
            }
            int v211 = v205[1];
            uint64_t v214 = *(void *)v211;
            int v213 = (char *)(v211 + 4);
            uint64_t v212 = v214;
          }
          else
          {
            uint64_t v212 = 0;
            int v213 = &byte_1CFBCE98E;
          }
          v384[0] = 261;
          v380 = v213;
          uint64_t v381 = v212;
          uint64_t v84 = (unsigned __int8 *)sub_1CB935A74((uint64_t)&__b, (uint64_t)v199, (uint64_t)v200, v398, (llvm::Type *)v399, (uint64_t)&v380);
          int v83 = 1;
LABEL_310:
          if (v398 != v400) {
            free(v398);
          }
          goto LABEL_292;
        }
LABEL_153:
        uint64_t v84 = 0;
        int v83 = 0;
      }
LABEL_159:
      if (__b == v404)
      {
        if (v83) {
          goto LABEL_161;
        }
LABEL_369:
        int v252 = 0;
        uint64_t v253 = **(void **)v34;
        __b = v404;
        uint64_t v403 = 0x200000000;
        uint64_t v407 = v253;
        int v408 = &v416;
        BOOL v409 = v417;
        uint64_t v410 = 0;
        int v411 = 0;
        __int16 v412 = 512;
        char v413 = 7;
        unsigned int v405 = 0;
        v406 = 0;
        uint64_t v414 = 0;
        uint64_t v415 = 0;
        v416 = &unk_1F2616E88;
        v417[0] = &unk_1F2617008;
        unsigned int v405 = (void **)*((void *)v34 + 5);
        v406 = (void ***)(v34 + 6);
        v254 = (void **)*((void *)v34 + 6);
        v380 = v254;
        if (v254)
        {
          llvm::MetadataTracking::track((uint64_t)&v380, (unsigned __int8 *)v254, 2);
          int v252 = v380;
        }
        sub_1CB8461A4((uint64_t)&__b, 0, (uint64_t)v252);
        if (v380)
        {
          int v310 = *(unsigned __int8 *)v380;
          if ((v310 - 4) > 0x1E)
          {
            if ((v310 - 3) >= 0xFFFFFFFE) {
              v313 = v380;
            }
            else {
              v313 = 0;
            }
            if ((v310 - 3) < 0xFFFFFFFE)
            {
              if (v310 == 3) {
                *((void *)v380 + 1) = 0;
              }
              goto LABEL_372;
            }
            unint64_t v312 = (unint64_t)v313 + 8;
          }
          else
          {
            if ((*((unsigned char *)v380 + 1) & 0x7F) != 2 && !*((_DWORD *)v380 + 3)) {
              goto LABEL_372;
            }
            uint64_t v311 = *((void *)v380 + 2);
            if ((v311 & 4) == 0) {
              goto LABEL_372;
            }
            unint64_t v312 = v311 & 0xFFFFFFFFFFFFFFF8;
            if (!v312) {
              goto LABEL_372;
            }
          }
          BOOL v398 = &v380;
          sub_1CC5FA668(v312 + 16, &v398);
        }
LABEL_372:
        int v255 = v34[5];
        uint64_t v256 = v255 & 0x7FFFFFF;
        if ((v255 & 0x7FFFFFF) != 0)
        {
          uint64_t v257 = 0;
          do
          {
            int v258 = v34[5];
            if ((v258 & 0x40000000) != 0) {
              unsigned int v259 = (int *)*((void *)v34 - 1);
            }
            else {
              unsigned int v259 = &v34[-8 * (v258 & 0x7FFFFFF)];
            }
            uint64_t v260 = *(void *)&v259[8 * v257];
            int v261 = sub_1CC7BB8D4(v376, v260);
            uint64_t v262 = sub_1CC7BB818(v376, v260);
            uint64_t v263 = v262;
            if (v261)
            {
              v264 = *(uint64_t ***)v260;
              if ((*(unsigned char *)(v260 + 23) & 0x10) != 0)
              {
                uint64_t v265 = **v264;
                uint64_t v266 = *(void *)(v265 + 152);
                uint64_t v267 = *(unsigned int *)(v265 + 168);
                if (v267)
                {
                  LODWORD(v268) = (v267 - 1) & ((v260 >> 4) ^ (v260 >> 9));
                  uint64_t v269 = (uint64_t *)(v266 + 16 * v268);
                  uint64_t v270 = *v269;
                  if (*v269 != v260)
                  {
                    int v271 = 1;
                    do
                    {
                      if (v270 == -4096) {
                        goto LABEL_385;
                      }
                      int v272 = v268 + v271++;
                      uint64_t v268 = v272 & (v267 - 1);
                      uint64_t v270 = *(void *)(v266 + 16 * v268);
                    }
                    while (v270 != v260);
                    uint64_t v269 = (uint64_t *)(v266 + 16 * v268);
                  }
                }
                else
                {
LABEL_385:
                  uint64_t v269 = (uint64_t *)(v266 + 16 * v267);
                }
                uint64_t v273 = (void *)v269[1];
                uint64_t v276 = *v273;
                v275 = (char *)(v273 + 2);
                uint64_t v274 = v276;
              }
              else
              {
                uint64_t v274 = 0;
                v275 = &byte_1CFBCE98E;
              }
              v384[0] = 773;
              v380 = v275;
              uint64_t v381 = v274;
              uint64_t v382 = (uint64_t)".bitcast";
              if (*(uint64_t ***)v262 != v264)
              {
                if (*((unsigned __int8 *)v262 + 16) <= 0x14u)
                {
                  uint64_t v263 = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, llvm::detail::IEEEFloat *, uint64_t **))*v408
                                         + 28))(v408, 49, v262, v264);
                  if (v263) {
                    BOOL v279 = *((unsigned __int8 *)v263 + 16) >= 0x1Cu;
                  }
                  else {
                    BOOL v279 = 0;
                  }
                  if (v279)
                  {
                    (*(void (**)(void *, llvm::Value *, void **, void **, void ***))(*v409 + 16))(v409, v263, &v380, v405, v406);
                    if (v403)
                    {
                      v288 = (llvm::MDNode **)__b;
                      int v289 = (llvm::MDNode **)((char *)__b + 16 * v403);
                      do
                      {
                        llvm::Instruction::setMetadata(v263, *(_DWORD *)v288, v288[1]);
                        v288 += 2;
                      }
                      while (v288 != v289);
                    }
                    int v30 = v366;
                    uint64_t v31 = v368;
                  }
                }
                else
                {
                  __int16 v401 = 257;
                  uint64_t v263 = llvm::CastInst::Create(49, (uint64_t)v262, (uint64_t)v264, (const char **)&v398, 0);
                  (*(void (**)(void *, llvm::Value *, void **, void **, void ***))(*v409 + 16))(v409, v263, &v380, v405, v406);
                  if (v403)
                  {
                    uint64_t v277 = (llvm::MDNode **)__b;
                    uint64_t v278 = (llvm::MDNode **)((char *)__b + 16 * v403);
                    do
                    {
                      llvm::Instruction::setMetadata(v263, *(_DWORD *)v277, v277[1]);
                      v277 += 2;
                    }
                    while (v277 != v278);
                  }
                }
              }
            }
            int v280 = v34[5];
            if ((v280 & 0x40000000) != 0) {
              uint64_t v281 = (int *)*((void *)v34 - 1);
            }
            else {
              uint64_t v281 = &v34[-8 * (v280 & 0x7FFFFFF)];
            }
            int v282 = (llvm::Value **)&v281[8 * v257];
            if (*v282)
            {
              *(void *)v282[2] = v282[1];
              uint64_t v283 = v282[1];
              if (v283) {
                *((void *)v283 + 2) = v282[2];
              }
            }
            *int v282 = v263;
            if (v263)
            {
              v286 = (void **)*((void *)v263 + 1);
              unsigned int v285 = (llvm::Value ***)((char *)v263 + 8);
              int v284 = v286;
              uint64_t v287 = &v281[8 * v257];
              *((void *)v287 + 1) = v286;
              if (v286) {
                v284[2] = v287 + 2;
              }
              *((void *)v287 + 2) = v285;
              *unsigned int v285 = v282;
            }
            ++v257;
          }
          while (v257 != v256);
        }
        uint64_t v28 = v376;
        if (sub_1CC7BB62C(v376, *(void *)v34) == *(void *)v34)
        {
          BOOL v398 = v34;
          sub_1CC080DE0(v30, &v398)[1] = v34;
        }
        else
        {
          sub_1CBF5385C((uint64_t)&__b, *((void *)v34 + 5), *((void *)v34 + 4));
          unint64_t v290 = sub_1CC7BB62C(v376, *(void *)v34);
          if ((*((unsigned char *)v34 + 23) & 0x10) != 0)
          {
            uint64_t v291 = ***(void ***)v34;
            uint64_t v292 = *(void *)(v291 + 152);
            uint64_t v293 = *(unsigned int *)(v291 + 168);
            if (v293)
            {
              LODWORD(v294) = (v293 - 1) & ((v34 >> 4) ^ (v34 >> 9));
              v295 = (int **)(v292 + 16 * v294);
              v296 = *v295;
              if (*v295 != v34)
              {
                int v297 = 1;
                do
                {
                  if (v296 == (int *)-4096) {
                    goto LABEL_424;
                  }
                  int v298 = v294 + v297++;
                  uint64_t v294 = v298 & (v293 - 1);
                  v296 = *(int **)(v292 + 16 * v294);
                }
                while (v296 != v34);
                v295 = (int **)(v292 + 16 * v294);
              }
            }
            else
            {
LABEL_424:
              v295 = (int **)(v292 + 16 * v293);
            }
            int v299 = v295[1];
            uint64_t v302 = *(void *)v299;
            int v301 = (char *)(v299 + 4);
            uint64_t v300 = v302;
          }
          else
          {
            uint64_t v300 = 0;
            int v301 = &byte_1CFBCE98E;
          }
          v384[0] = 773;
          v380 = v301;
          uint64_t v381 = v300;
          uint64_t v382 = (uint64_t)".bitcast";
          if (*(void *)v34 == v290)
          {
            v303 = (unsigned __int8 *)v34;
          }
          else if (*((unsigned __int8 *)v34 + 16) <= 0x14u)
          {
            v303 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, int *, unint64_t))*v408 + 28))(v408, 49, v34, v290);
            if (v303) {
              BOOL v306 = v303[16] >= 0x1Cu;
            }
            else {
              BOOL v306 = 0;
            }
            if (v306)
            {
              (*(void (**)(void *, unsigned __int8 *, void **, void **, void ***))(*v409 + 16))(v409, v303, &v380, v405, v406);
              if (v403)
              {
                uint64_t v315 = (llvm::MDNode **)__b;
                v316 = (llvm::MDNode **)((char *)__b + 16 * v403);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v303, *(_DWORD *)v315, v315[1]);
                  v315 += 2;
                }
                while (v315 != v316);
              }
              uint64_t v28 = v376;
              int v30 = v366;
              uint64_t v31 = v368;
            }
          }
          else
          {
            __int16 v401 = 257;
            v303 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v34, v290, (const char **)&v398, 0);
            (*(void (**)(void *, unsigned __int8 *, void **, void **, void ***))(*v409 + 16))(v409, v303, &v380, v405, v406);
            if (v403)
            {
              v304 = (llvm::MDNode **)__b;
              v305 = (llvm::MDNode **)((char *)__b + 16 * v403);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v303, *(_DWORD *)v304, v304[1]);
                v304 += 2;
              }
              while (v304 != v305);
            }
          }
          BOOL v398 = v34;
          sub_1CC080DE0(v30, &v398)[1] = v303;
        }
        if (__b != v404) {
          free(__b);
        }
      }
      else
      {
        free(__b);
        if (!v83) {
          goto LABEL_369;
        }
LABEL_161:
        __b = v34;
        sub_1CC080DE0(v30, &__b)[1] = v84;
        unint64_t v118 = *(unsigned int *)(v28 + 88);
        if (v118 >= *(unsigned int *)(v28 + 92)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v28 + 80) + 8 * v118) = v34;
        ++*(_DWORD *)(v28 + 88);
        if (v84[16] >= 0x1Cu && v84) {
          llvm::Instruction::copyMetadata((uint64_t)v84, (uint64_t)v34, 0, 0);
        }
      }
      for (uint64_t j = (void **)*((void *)v34 + 1); j; uint64_t j = (void **)j[1])
      {
        unsigned int v308 = j[3];
        __b = v34;
        if (v308 != (void *)sub_1CC080DE0(v30, &__b)[1])
        {
          unint64_t v309 = *(unsigned int *)(v28 + 888);
          if (v309 >= *(unsigned int *)(v28 + 892)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v28 + 880) + 8 * v309) = v308;
          ++*(_DWORD *)(v28 + 888);
        }
      }
      goto LABEL_446;
    }
LABEL_62:
    if (!v34 || *((unsigned char *)v34 + 16) != 90 || *(unsigned char *)(*(void *)v34 + 8) == 19) {
      goto LABEL_68;
    }
    int v49 = v34[5];
    uint64_t v50 = (v49 & 0x40000000) != 0 ? (int *)*((void *)v34 - 1) : &v34[-8 * (v49 & 0x7FFFFFF)];
    unint64_t v51 = (void *)*((void *)v50 + 4);
    if (*((unsigned char *)v51 + 16) != 89) {
      goto LABEL_68;
    }
    int v151 = *((_DWORD *)v51 + 5);
    v152 = (v151 & 0x40000000) != 0
         ? (llvm::PoisonValue ***)*(v51 - 1)
         : (llvm::PoisonValue ***)&v51[-4 * (v151 & 0x7FFFFFF)];
    unint64_t v153 = *v152;
    if (!*v152) {
      goto LABEL_68;
    }
    uint64_t v154 = *(unsigned int *)(*(void *)v34 + 32);
    __b = v404;
    HIDWORD(v403) = 256;
    if (v154 > 0x100)
    {
      LODWORD(v403) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v154) {
      memset(v404, 255, 4 * v154);
    }
    LODWORD(v403) = v154;
    BOOL v398 = v400;
    char v155 = 90;
    unsigned __int8 v156 = 79;
    uint64_t v399 = 0x1000000000;
    uint64_t v157 = (uint64_t)v34;
    while (2)
    {
      if (v156 >= 0xFDu)
      {
        v380 = v384;
        uint64_t v381 = (uint64_t)v384;
        uint64_t v382 = 8;
        int v383 = 0;
        v418 = (void ***)v420;
        uint64_t v419 = 0x800000000;
        unsigned int v378 = &v380;
        uint64_t v379 = (void **)&v418;
        BOOL v171 = 0;
        if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v378, v157))
        {
          while (1)
          {
            BOOL v171 = v419 == 0;
            if (!v419) {
              break;
            }
            uint64_t v173 = (uint64_t)v418[v419 - 1];
            LODWORD(v419) = v419 - 1;
            uint64_t v28 = v376;
            int v30 = v366;
            uint64_t v31 = v368;
            if ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v378, v173) & 1) == 0) {
              goto LABEL_224;
            }
          }
          uint64_t v28 = v376;
          int v30 = v366;
          uint64_t v31 = v368;
        }
LABEL_224:
        if (v418 != (void ***)v420) {
          free(v418);
        }
        if ((void *)v381 == v380)
        {
          if (v171) {
            break;
          }
        }
        else
        {
          free((void *)v381);
          if (v171) {
            break;
          }
        }
        char v155 = *(unsigned char *)(v157 + 16);
      }
      uint64_t v377 = 0;
      if (v155 != 90
        || ((int v158 = *(_DWORD *)(v157 + 20), (v158 & 0x40000000) != 0)
          ? (v159 = *(uint64_t **)(v157 - 8))
          : (v159 = (uint64_t *)(v157 - 32 * (v158 & 0x7FFFFFF))),
            (uint64_t v160 = *v159) == 0
         || (uint64_t v161 = v159[4], (v162 = *(void *)(v161 + 8)) == 0)
         || *(void *)(v162 + 8)
         || ((v158 & 0x40000000) != 0 ? (uint64_t v163 = *(void *)(v157 - 8)) : (uint64_t v163 = v157 - 32 * (v158 & 0x7FFFFFF)),
             (uint64_t v164 = *(void *)(v163 + 64)) == 0 || *(unsigned char *)(v164 + 16) != 16)))
      {
LABEL_256:
        int v180 = 0;
        char v181 = 1;
        uint64_t v28 = v376;
        uint64_t v31 = v368;
        goto LABEL_257;
      }
      v165 = (void *)(v164 + 24);
      uint64_t v166 = *(unsigned int *)(v164 + 32);
      if (v166 >= 0x41)
      {
        int v175 = 0;
        int64_t v176 = (unint64_t)(v166 + 63) >> 6;
        do
        {
          if (v176-- < 1) {
            break;
          }
          unint64_t v178 = *(void *)(*v165 + 8 * v176);
          v175 += __clz(v178);
        }
        while (!v178);
        int v179 = v166 | 0xFFFFFFC0;
        if ((v166 & 0x3F) == 0) {
          int v179 = 0;
        }
        int v30 = v366;
        if ((v166 - v175 - v179) > 0x40) {
          goto LABEL_256;
        }
        v165 = (void *)*v165;
      }
      uint64_t v167 = (void *)*v165;
      v380 = v153;
      uint64_t v381 = (uint64_t)&v377;
      if (!sub_1CD63F4FC((uint64_t)&v380, v161)) {
        goto LABEL_256;
      }
      unsigned int v168 = (*(unsigned char *)(v160 + 16) - 11);
      if (v168 >= 2)
      {
        if (v168 < 0xFD) {
          goto LABEL_217;
        }
        v380 = v384;
        uint64_t v381 = (uint64_t)v384;
        uint64_t v382 = 8;
        int v383 = 0;
        v418 = (void ***)v420;
        uint64_t v419 = 0x800000000;
        unsigned int v378 = &v380;
        uint64_t v379 = (void **)&v418;
        BOOL v172 = 0;
        if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v378, v160))
        {
          while (1)
          {
            BOOL v172 = v419 == 0;
            if (!v419) {
              break;
            }
            uint64_t v174 = (uint64_t)v418[v419 - 1];
            LODWORD(v419) = v419 - 1;
            int v30 = v366;
            if ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v378, v174) & 1) == 0) {
              goto LABEL_230;
            }
          }
          int v30 = v366;
        }
LABEL_230:
        if (v418 != (void ***)v420) {
          free(v418);
        }
        if ((void *)v381 == v380)
        {
          if (v172) {
            goto LABEL_219;
          }
LABEL_217:
          uint64_t v169 = *(void *)(v160 + 8);
          if (!v169 || *(void *)(v169 + 8)) {
            goto LABEL_256;
          }
        }
        else
        {
          free((void *)v381);
          if (!v172) {
            goto LABEL_217;
          }
        }
      }
LABEL_219:
      if (v399 >= (unint64_t)HIDWORD(v399)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v398 + v399) = v157;
      unsigned int v170 = v399 + 1;
      LODWORD(v399) = v170;
      if (v170 >= HIDWORD(v399)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v398 + v170) = v161;
      LODWORD(v399) = v399 + 1;
      uint64_t v28 = v376;
      *((_DWORD *)__b + (void)v167) = v377;
      char v155 = *(unsigned char *)(v160 + 16);
      unsigned __int8 v156 = v155 - 11;
      uint64_t v157 = v160;
      uint64_t v31 = v368;
      if ((v155 - 11) > 1u) {
        continue;
      }
      break;
    }
    BOOL v221 = 0;
    uint64_t v222 = **(void **)v34;
    v380 = &v382;
    uint64_t v381 = 0x200000000;
    uint64_t v387 = v222;
    v388 = &v396;
    int v389 = &v397;
    uint64_t v390 = 0;
    int v391 = 0;
    __int16 v392 = 512;
    char v393 = 7;
    int v385 = 0;
    unsigned int v386 = 0;
    uint64_t v394 = 0;
    uint64_t v395 = 0;
    uint64_t v396 = &unk_1F2616E88;
    v397 = &unk_1F2617008;
    int v385 = (void **)*((void *)v34 + 5);
    unsigned int v386 = (void ***)(v34 + 6);
    v223 = (llvm::SmallPtrSetImplBase *)*((void *)v34 + 6);
    unsigned int v378 = (void **)v223;
    if (v223)
    {
      llvm::MetadataTracking::track((uint64_t)&v378, (unsigned __int8 *)v223, 2);
      BOOL v221 = (llvm::SmallPtrSetImplBase *)v378;
    }
    sub_1CB8461A4((uint64_t)&v380, 0, (uint64_t)v221);
    if (!v378) {
      goto LABEL_319;
    }
    int v248 = *(unsigned __int8 *)v378;
    if ((v248 - 4) > 0x1E)
    {
      if ((v248 - 3) >= 0xFFFFFFFE) {
        int v251 = v378;
      }
      else {
        int v251 = 0;
      }
      if ((v248 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v250 = (unint64_t)(v251 + 1);
        goto LABEL_365;
      }
      if (v248 == 3) {
        v378[1] = 0;
      }
    }
    else if ((*((unsigned char *)v378 + 1) & 0x7F) == 2 || *((_DWORD *)v378 + 3))
    {
      unint64_t v249 = (unint64_t)v378[2];
      if ((v249 & 4) != 0)
      {
        unint64_t v250 = v249 & 0xFFFFFFFFFFFFFFF8;
        if (v250)
        {
LABEL_365:
          v418 = &v378;
          sub_1CC5FA668(v250 + 16, &v418);
        }
      }
    }
LABEL_319:
    uint64_t v225 = __b;
    v226 = (llvm::Type *)v403;
    v420[8] = 257;
    v227 = llvm::PoisonValue::get(*v153, v224);
    int v180 = (unsigned __int8 *)sub_1CB935A74((uint64_t)&v380, (uint64_t)v153, (uint64_t)v227, v225, v226, (uint64_t)&v418);
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v34, (llvm::Value *)v180, (llvm::Value *)1);
    if (v399)
    {
      uint64_t v228 = v28;
      uint64_t v229 = *(void *)v398;
      uint64_t v230 = *(void *)(v228 + 352);
      uint64_t v231 = *(unsigned int *)(v228 + 360);
      if (v231)
      {
        v232 = (void *)(v230 + 16 * v231);
        uint64_t v233 = 16 * v231;
        v234 = *(void **)(v228 + 352);
        unsigned int v235 = v234;
        while (1)
        {
          uint64_t v236 = *v235;
          v235 += 2;
          if (v229 == v236) {
            break;
          }
          v234 = v235;
          v233 -= 16;
          if (!v233) {
            goto LABEL_333;
          }
        }
        uint64_t v237 = v233 - 16;
        if (v237)
        {
          unint64_t v238 = 0;
          v232 = v234;
          do
          {
            uint64_t v239 = v234[v238 / 8 + 2];
            if (v229 != v239)
            {
              void *v232 = v239;
              *((unsigned char *)v232 + 8) = v234[v238 / 8 + 3];
              v232 += 2;
            }
            v238 += 16;
          }
          while (v237 != v238);
        }
        else
        {
          v232 = v234;
        }
      }
      else
      {
        v232 = *(void **)(v228 + 352);
      }
LABEL_333:
      *(_DWORD *)(v376 + 360) = ((unint64_t)v232 - v230) >> 4;
      int v240 = *(void **)(v376 + 880);
      uint64_t v241 = *(unsigned int *)(v376 + 888);
      unsigned int v242 = v240;
      if (v241)
      {
        uint64_t v243 = 8 * v241;
        unsigned int v242 = *(void **)(v376 + 880);
        do
        {
          if (*v242 == v229) {
            goto LABEL_338;
          }
          ++v242;
          v243 -= 8;
        }
        while (v243);
        unsigned int v242 = &v240[v241];
      }
LABEL_338:
      uint64_t v244 = v242 - v240;
      uint64_t v245 = v242 + 1;
      if (v244 != v241 && v245 != &v240[v241])
      {
        uint64_t v247 = 8 * v241 - 8 * v244 - 8;
        do
        {
          if (*v245 != v229) {
            *v242++ = *v245;
          }
          ++v245;
          v247 -= 8;
        }
        while (v247);
        int v240 = *(void **)(v376 + 880);
      }
      *(_DWORD *)(v376 + 888) = (unint64_t)((char *)v242 - (char *)v240) >> 3;
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    if (v380 != &v382) {
      free(v380);
    }
    char v181 = 0;
    uint64_t v28 = v376;
LABEL_257:
    if (v398 != v400) {
      free(v398);
    }
    if (__b != v404) {
      free(__b);
    }
    if ((v181 & 1) != 0 || v180 && (uint64_t v34 = (int *)v180, v180[16] >= 0x1Cu))
    {
LABEL_68:
      sub_1CC7BB5A8(v31, (uint64_t)v34, 1);
      int v52 = v34[5];
      if ((v52 & 0x40000000) != 0)
      {
        uint64_t v54 = (void **)*((void *)v34 - 1);
        uint64_t v53 = v52 & 0x7FFFFFF;
        if (!v53) {
          goto LABEL_446;
        }
      }
      else
      {
        uint64_t v53 = v52 & 0x7FFFFFF;
        uint64_t v54 = (void **)&v34[-8 * v53];
        if (!v53) {
          goto LABEL_446;
        }
      }
      int v55 = &v54[4 * v53];
      do
      {
        uint64_t v56 = (unint64_t *)*v54;
        if (*((unsigned char *)v34 + 16) == 83)
        {
          uint64_t v57 = *(unsigned int *)(v28 + 360);
          if (v57)
          {
            uint64_t v58 = *(unint64_t ***)(v28 + 352);
            uint64_t v59 = 16 * v57;
            while (*v58 != v56)
            {
              v58 += 2;
              v59 -= 16;
              if (!v59) {
                goto LABEL_78;
              }
            }
            goto LABEL_96;
          }
        }
LABEL_78:
        unsigned int v60 = *((unsigned __int8 *)v56 + 16);
        if (v60 < 0x1C || v56 == 0)
        {
          if (v60 == 21)
          {
            __b = *v54;
            BOOL v398 = 0;
            if ((sub_1CBA0E618((uint64_t)v30, &__b, &v398) & 1) == 0)
            {
              __b = v56;
              sub_1CC080DE0(v30, &__b)[1] = v56;
              if (sub_1CC7BB62C(v28, *v56) != *v56)
              {
                __int16 v62 = *(void **)(v56[3] + 80);
                if (v62) {
                  uint64_t v63 = (uint64_t **)(v62 - 3);
                }
                else {
                  uint64_t v63 = 0;
                }
                sub_1CBF537B4((uint64_t)&__b, v63, (uint64_t)v63[6], 0, 0, 0);
                unint64_t v64 = sub_1CC7BB62C(v28, *v56);
                if ((*((unsigned char *)v56 + 23) & 0x10) != 0)
                {
                  uint64_t v65 = **(void **)*v56;
                  uint64_t v66 = *(void *)(v65 + 152);
                  uint64_t v67 = *(unsigned int *)(v65 + 168);
                  if (!v67) {
                    goto LABEL_98;
                  }
                  LODWORD(v68) = (v67 - 1) & ((v56 >> 4) ^ (v56 >> 9));
                  uint64_t v69 = (unint64_t **)(v66 + 16 * v68);
                  uint64_t v70 = *v69;
                  if (*v69 != v56)
                  {
                    int v71 = 1;
                    while (v70 != (unint64_t *)-4096)
                    {
                      int v72 = v68 + v71++;
                      uint64_t v68 = v72 & (v67 - 1);
                      uint64_t v70 = *(unint64_t **)(v66 + 16 * v68);
                      if (v70 == v56)
                      {
                        uint64_t v69 = (unint64_t **)(v66 + 16 * v68);
                        goto LABEL_99;
                      }
                    }
LABEL_98:
                    uint64_t v69 = (unint64_t **)(v66 + 16 * v67);
                  }
LABEL_99:
                  uint64_t v73 = v69[1];
                  uint64_t v76 = *v73;
                  __int16 v75 = (char *)(v73 + 2);
                  uint64_t v74 = v76;
                }
                else
                {
                  uint64_t v74 = 0;
                  __int16 v75 = &byte_1CFBCE98E;
                }
                v384[0] = 773;
                v380 = v75;
                uint64_t v381 = v74;
                uint64_t v382 = (uint64_t)".bitcast";
                uint64_t v77 = (unsigned __int8 *)v56;
                if (*v56 != v64)
                {
                  if (*((unsigned __int8 *)v56 + 16) <= 0x14u)
                  {
                    uint64_t v77 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unint64_t *, unint64_t))*v408
                                              + 28))(v408, 49, v56, v64);
                    if (v77) {
                      BOOL v78 = v77[16] >= 0x1Cu;
                    }
                    else {
                      BOOL v78 = 0;
                    }
                    if (v78)
                    {
                      (*(void (**)(void *, unsigned __int8 *, void **, void **, void ***))(*v409 + 16))(v409, v77, &v380, v405, v406);
                      if (v403)
                      {
                        uint64_t v81 = (llvm::MDNode **)__b;
                        uint64_t v82 = (llvm::MDNode **)((char *)__b + 16 * v403);
                        do
                        {
                          llvm::Instruction::setMetadata((llvm::Instruction *)v77, *(_DWORD *)v81, v81[1]);
                          v81 += 2;
                        }
                        while (v81 != v82);
                      }
                      uint64_t v28 = v376;
                      int v30 = v366;
                      uint64_t v31 = v368;
                    }
                  }
                  else
                  {
                    __int16 v401 = 257;
                    uint64_t v77 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v56, v64, (const char **)&v398, 0);
                    (*(void (**)(void *, unsigned __int8 *, void **, void **, void ***))(*v409 + 16))(v409, v77, &v380, v405, v406);
                    if (v403)
                    {
                      unsigned int v79 = (llvm::MDNode **)__b;
                      uint64_t v80 = (llvm::MDNode **)((char *)__b + 16 * v403);
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v77, *(_DWORD *)v79, v79[1]);
                        v79 += 2;
                      }
                      while (v79 != v80);
                    }
                  }
                }
                BOOL v398 = v56;
                sub_1CC080DE0(v30, &v398)[1] = v77;
                if (__b != v404) {
                  free(__b);
                }
              }
            }
          }
        }
        else
        {
          sub_1CC7BB5A8(v31, (uint64_t)*v54, 0);
        }
LABEL_96:
        v54 += 4;
      }
      while (v54 != v55);
    }
LABEL_446:
    unsigned int v29 = *(_DWORD *)(v28 + 360);
    if (v29) {
      continue;
    }
    break;
  }
  uint64_t v48 = *(unsigned int *)(v28 + 888);
  if (v48)
  {
    uint64_t v34 = *(int **)(*(void *)(v28 + 880) + 8 * v48 - 8);
    *(_DWORD *)(v28 + 888) = v48 - 1;
    __b = v34;
    BOOL v398 = 0;
    if (sub_1CBA0E618((uint64_t)v30, &__b, &v398)) {
      goto LABEL_446;
    }
    goto LABEL_62;
  }
  uint64_t v319 = *(void *)(v28 + 32);
  uint64_t v320 = *(unsigned int *)(v28 + 48);
  v321 = (uint64_t *)(v319 + 16 * v320);
  if (*(_DWORD *)(v28 + 40))
  {
    if (v320)
    {
      uint64_t v322 = 16 * v320;
      unint64_t v323 = *(uint64_t **)(v28 + 32);
      while ((*v323 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v323 += 2;
        v322 -= 16;
        if (!v322) {
          goto LABEL_481;
        }
      }
    }
    else
    {
      unint64_t v323 = *(uint64_t **)(v28 + 32);
    }
  }
  else
  {
LABEL_481:
    unint64_t v323 = (uint64_t *)(v319 + 16 * v320);
  }
  v324 = (uint64_t *)(v319 + 16 * v320);
  if (v323 != v324)
  {
    v369 = (uint64_t *)(v319 + 16 * v320);
    while (1)
    {
      uint64_t v325 = *v323;
      if (*v323)
      {
        if (*(unsigned char *)(v325 + 16) == 83) {
          break;
        }
      }
LABEL_532:
      v360 = v323 + 2;
      unint64_t v323 = v321;
      if (v360 != v321)
      {
        unint64_t v323 = v360;
        while ((*v323 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v323 += 2;
          if (v323 == v321)
          {
            unint64_t v323 = v321;
            break;
          }
        }
      }
      if (v323 == v324) {
        goto LABEL_538;
      }
    }
    if (*(unsigned char *)(v323[1] + 16) == 83) {
      uint64_t v326 = v323[1];
    }
    else {
      uint64_t v326 = 0;
    }
    int v327 = *(_DWORD *)(v325 + 20);
    if ((v327 & 0x40000000) != 0)
    {
      uint64_t v329 = *(void *)(v325 - 8);
      uint64_t v328 = v327 & 0x7FFFFFF;
      if (!v328) {
        goto LABEL_529;
      }
    }
    else
    {
      uint64_t v328 = v327 & 0x7FFFFFF;
      uint64_t v329 = v325 - 32 * v328;
      if (!v328)
      {
LABEL_529:
        if (v328)
        {
          unsigned int v359 = v328 + 1;
          do
          {
            llvm::PHINode::removeIncomingValue((llvm::PHINode *)v325, v359 - 2, 0);
            --v359;
          }
          while (v359 > 1);
        }
        goto LABEL_532;
      }
    }
    unint64_t v330 = (uint64_t *)(v329 + 32 * *(unsigned int *)(v325 + 60));
    v331 = &v330[v328];
    unsigned int v371 = v331;
    do
    {
      uint64_t v332 = *v330;
      uint64_t v333 = sub_1CBF73380(v325, *v330);
      unint64_t v334 = sub_1CC7BB818(v28, v333);
      int v335 = *(_DWORD *)(v326 + 20);
      uint64_t v336 = v335 & 0x7FFFFFF;
      if ((v335 & 0x7FFFFFF) == *(_DWORD *)(v326 + 60))
      {
        unsigned int v349 = v336 + (v336 >> 1);
        if (v349 <= 2) {
          uint64_t v350 = 2;
        }
        else {
          uint64_t v350 = v349;
        }
        *(_DWORD *)(v326 + 60) = v350;
        if ((v335 & 0x40000000) != 0) {
          uint64_t v351 = *(uint64_t **)(v326 - 8);
        }
        else {
          uint64_t v351 = (uint64_t *)(v326 - 32 * v336);
        }
        __pa = v351;
        uint64_t v352 = operator new(40 * v350);
        uint64_t v373 = v350;
        *(void *)(v326 - 8) = v352;
        uint64_t v353 = v352;
        do
        {
          *uint64_t v353 = 0;
          v353[1] = 0;
          v353[2] = 0;
          v353[3] = v326;
          v353 += 4;
        }
        while (v353 != &v352[4 * v350]);
        int v354 = *(_DWORD *)(v326 + 20);
        if ((v354 & 0x40000000) != 0) {
          uint64_t v355 = (uint64_t)v352;
        }
        else {
          uint64_t v355 = v326 - 32 * (v354 & 0x7FFFFFF);
        }
        sub_1CC5E4108((uint64_t)&__b, __pa, &__pa[4 * v336], v355);
        if (v336)
        {
          memmove((void *)(v355 + 32 * v373), &__pa[4 * v336], 8 * v336);
          uint64_t v356 = 4 * v336;
          do
          {
            v357 = &__pa[v356];
            if (__pa[v356 - 4])
            {
              *(void *)*(v357 - 2) = *(v357 - 3);
              uint64_t v358 = *(v357 - 3);
              if (v358) {
                *(void *)(v358 + 16) = *(v357 - 2);
              }
            }
            v356 -= 4;
          }
          while (v356 * 8);
        }
        operator delete(__pa);
        int v335 = *(_DWORD *)(v326 + 20);
        uint64_t v28 = v376;
        v331 = v371;
      }
      uint64_t v337 = (v335 + 1) & 0x7FFFFFF;
      *(_DWORD *)(v326 + 20) = v335 & 0xF8000000 | (v335 + 1) & 0x7FFFFFF;
      if ((v335 & 0x40000000) != 0) {
        uint64_t v338 = *(void *)(v326 - 8);
      }
      else {
        uint64_t v338 = v326 - 32 * v337;
      }
      uint64_t v339 = (v337 - 1);
      uint64_t v340 = v338 + 32 * v339;
      if (*(void *)v340)
      {
        **(void **)(v340 + 16) = *(void *)(v340 + 8);
        uint64_t v348 = *(void *)(v340 + 8);
        if (v348) {
          *(void *)(v348 + 16) = *(void *)(v340 + 16);
        }
      }
      *(void *)uint64_t v340 = v334;
      if (v334)
      {
        uint64_t v343 = *((void *)v334 + 1);
        v342 = (void *)((char *)v334 + 8);
        uint64_t v341 = v343;
        uint64_t v344 = v338 + 32 * v339;
        *(void *)(v344 + 8) = v343;
        if (v343) {
          *(void *)(v341 + 16) = v344 + 8;
        }
        *(void *)(v344 + 16) = v342;
        void *v342 = v340;
      }
      int v345 = *(_DWORD *)(v326 + 20);
      uint64_t v346 = v345 & 0x7FFFFFF;
      if ((v345 & 0x40000000) != 0) {
        uint64_t v347 = *(void *)(v326 - 8);
      }
      else {
        uint64_t v347 = v326 - 32 * v346;
      }
      *(void *)(v347 + 32 * *(unsigned int *)(v326 + 60) + 8 * (v346 - 1)) = v332;
      ++v330;
    }
    while (v330 != v331);
    LODWORD(v328) = *(_DWORD *)(v325 + 20) & 0x7FFFFFF;
    v324 = v369;
    v321 = v369;
    goto LABEL_529;
  }
LABEL_538:
  if (*(_DWORD *)(v28 + 88)) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  return v367 != 0;
}

uint64_t sub_1CC7BB5A8(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v4 = *(void *)result + 16 * v3;
  *(void *)uint64_t v4 = a2;
  *(unsigned char *)(v4 + 8) = a3;
  *(_DWORD *)(result + 8) = v3 + 1;
  return result;
}

unint64_t sub_1CC7BB62C(uint64_t a1, unint64_t a2)
{
  unint64_t v33 = a2;
  uint64_t v5 = a1 + 56;
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v6 = *(unsigned int *)(a1 + 72);
  unsigned int v7 = a2 >> 4;
  if (!v6) {
    goto LABEL_9;
  }
  LODWORD(v8) = (v6 - 1) & (v7 ^ (a2 >> 9));
  int v9 = (uint64_t *)(v4 + 16 * v8);
  uint64_t v10 = *v9;
  if (*v9 != a2)
  {
    int v12 = 1;
    while (v10 != -4096)
    {
      int v13 = v8 + v12++;
      uint64_t v8 = v13 & (v6 - 1);
      uint64_t v10 = *(void *)(v4 + 16 * v8);
      if (v10 == a2)
      {
        int v9 = (uint64_t *)(v4 + 16 * v8);
        goto LABEL_3;
      }
    }
LABEL_9:
    int v14 = *(unsigned __int8 *)(a2 + 8);
    if (a2 && v14 == 15)
    {
      unint64_t v11 = a2;
      if (!*(void *)(a2 + 24)) {
        goto LABEL_20;
      }
      uint64_t v15 = (llvm::PointerType *)sub_1CC7BB62C(a1, **(void **)(a2 + 16));
      unint64_t v16 = llvm::PointerType::get(v15, (llvm::Type *)(*(_DWORD *)(a2 + 8) >> 8));
    }
    else
    {
      unint64_t v11 = a2;
      if (!a2
        || (unint64_t v11 = a2, (v14 & 0xFE) != 0x12)
        || (uint64_t v17 = **(void **)a2, v11 = a2, *(void *)(a2 + 24) != v17 + 1912)
        || (v18 = *(_DWORD *)(a2 + 32), unint64_t v11 = a2, (v18 & 1) != 0))
      {
LABEL_20:
        int v21 = *(_DWORD *)(a1 + 72);
        if (v21)
        {
          uint64_t v22 = *(void *)(a1 + 56);
          int v23 = v21 - 1;
          unsigned int v24 = v23 & (v7 ^ (a2 >> 9));
          BOOL v25 = (void *)(v22 + 16 * v24);
          uint64_t v26 = *v25;
          if (*v25 == a2)
          {
LABEL_30:
            v25[1] = v11;
            return v11;
          }
          BOOL v27 = 0;
          int v28 = 1;
          while (v26 != -4096)
          {
            if (v27) {
              BOOL v29 = 0;
            }
            else {
              BOOL v29 = v26 == -8192;
            }
            if (v29) {
              BOOL v27 = v25;
            }
            unsigned int v30 = v24 + v28++;
            unsigned int v24 = v30 & v23;
            BOOL v25 = (void *)(v22 + 16 * v24);
            uint64_t v26 = *v25;
            if (*v25 == a2) {
              goto LABEL_30;
            }
          }
          if (v27) {
            uint64_t v32 = v27;
          }
          else {
            uint64_t v32 = v25;
          }
        }
        else
        {
          uint64_t v32 = 0;
        }
        BOOL v25 = sub_1CC7BBA58(v5, (uint64_t)&v33, &v33, v32);
        void *v25 = v33;
        v25[1] = 0;
        goto LABEL_30;
      }
      uint64_t v19 = (uint64_t **)(v17 + 1936);
      int v20 = (llvm::Type *)(v18 >> 1);
      if (v14 == 19) {
        llvm::ScalableVectorType::get(v19, v20);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v19, v20);
      }
    }
    unint64_t v11 = v16;
    goto LABEL_20;
  }
LABEL_3:
  if (v9 == (uint64_t *)(v4 + 16 * v6)) {
    goto LABEL_9;
  }
  return v9[1];
}

llvm::detail::IEEEFloat *sub_1CC7BB818(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v8 = a2;
  unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
  if (!a2 || v4 > 0x14) {
    goto LABEL_9;
  }
  if ((sub_1CC7BB8D4(a1, a2) & 1) == 0)
  {
    unsigned int v4 = *(unsigned __int8 *)(v2 + 16);
LABEL_9:
    if (v4 == 21 || v4 >= 0x1C) {
      return (llvm::detail::IEEEFloat *)sub_1CC27AF70((uint64_t *)(a1 + 32), &v8)[1];
    }
    return (llvm::detail::IEEEFloat *)v2;
  }
  uint64_t v5 = (llvm::Constant *)sub_1CC7BB62C(a1, *(void *)v2);
  if (*(llvm::Constant **)v2 == v5) {
    return (llvm::detail::IEEEFloat *)v2;
  }

  return sub_1CC56C0C0((llvm *)0x31, (llvm::detail::IEEEFloat *)v2, v5, 0);
}

uint64_t sub_1CC7BB8D4(uint64_t a1, uint64_t a2)
{
  if (!a2 || *(unsigned char *)(a2 + 16) != 5) {
    return sub_1CC7BB62C(a1, *(void *)a2) != *(void *)a2;
  }

  return sub_1CC7BB938(a1, a2);
}

uint64_t sub_1CC7BB938(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
  {
    uint64_t v6 = *(void **)(a2 - 8);
    uint64_t v5 = v4 & 0x7FFFFFF;
    if (!v5) {
      return sub_1CC7BB62C(a1, *(void *)a2) != *(void *)a2;
    }
  }
  else
  {
    uint64_t v5 = v4 & 0x7FFFFFF;
    uint64_t v6 = (void *)(a2 - 32 * v5);
    if (!v5) {
      return sub_1CC7BB62C(a1, *(void *)a2) != *(void *)a2;
    }
  }
  uint64_t v7 = 32 * v5;
  while ((sub_1CC7BB8D4(a1, *v6) & 1) == 0)
  {
    v6 += 4;
    v7 -= 32;
    if (!v7) {
      return sub_1CC7BB62C(a1, *(void *)a2) != *(void *)a2;
    }
  }
  return 1;
}

uint64_t sub_1CC7BB9C8(void **a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a2 && *(unsigned char *)(a2 + 16) == 16)
  {
    uint64_t v3 = (void *)(a2 + 24);
    unsigned int v4 = *(_DWORD *)(a2 + 32);
    if (v4 >= 0x41)
    {
      uint64_t v6 = (void **)(a2 + 24);
      uint64_t v7 = a1;
      if (v4 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a2 + 24)) > 0x40) {
        return 0;
      }
      a1 = v7;
      uint64_t v3 = *v6;
    }
    **a1 = *v3;
    return 1;
  }
  return v2;
}

void *sub_1CC7BBA58(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC702C90(a1, v7);
  int v9 = 0;
  sub_1CB915048((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void sub_1CC7BBB0C()
{
}

uint64_t sub_1CC7BBBA4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDB4D8;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F261E830;
  *(void *)(a1 + 32) = a2;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB4E0, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CC7BBB0C;
    v6[1] = &PassRegistry;
    uint64_t v5 = v6;
    std::__call_once(&qword_1EBCDB4E0, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC7BBC58()
{
}

void sub_1CC7BBC9C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC7BBCD4()
{
  return "Extend Memory References";
}

void sub_1CC7BBCE4(llvm::PassRegistry *a1, uint64_t a2)
{
  v3[0] = &unk_1F2617E40;
  v3[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v3);
}

uint64_t sub_1CC7BBD30(uint64_t a1, void *a2)
{
  v167[4] = *MEMORY[0x1E4F143B8];
  __int16 v156 = 0;
  uint64_t v4 = (uint64_t)(a2 + 34);
  __int16 v157 = 0;
  int v158 = v160;
  long long v159 = xmmword_1CD96EEC0;
  v160[1] = &v161;
  v160[2] = 0x1000000000;
  long long v162 = 0uLL;
  uint64_t v163 = 0;
  uint64_t v164 = v166;
  uint64_t v165 = 0x800000000;
  v166[16] = 0;
  v166[17] = v167;
  v166[18] = 0x800000000;
  sub_1CB94E404((uint64_t)&v155, (uint64_t)(a2 + 34));
  uint64_t v5 = *(void *)(a1 + 32);
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = HIBYTE(v163) & 0x7F;
  if (v163 < 0) {
    uint64_t v6 = *((void *)&v162 + 1);
  }
  if (!v6)
  {
    __int16 v137 = 0;
    __int16 v138 = 0;
    long long v140 = xmmword_1CD96EEC0;
    int v139 = &v141;
    uint64_t v142 = v144;
    uint64_t v143 = 0x1000000000;
    uint64_t v145 = 0;
    uint64_t v146 = 0;
    uint64_t v147 = 0;
    v148 = v150;
    uint64_t v149 = 0x800000000;
    uint64_t v151 = 0;
    v152 = v154;
    uint64_t v153 = 0x800000000;
    sub_1CB94E404((uint64_t)&v136, v5 + 16);
    sub_1CB94E404(v4, (uint64_t)&v136);
    llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v136);
    goto LABEL_9;
  }
  if (llvm::DataLayout::operator==((unsigned __int8 *)(v5 + 16), &v155))
  {
LABEL_9:
    LOBYTE(v7) = 0;
    goto LABEL_10;
  }
  if (SHIBYTE(v163) < 0)
  {
    sub_1CB8BDF7C((uint64_t)__p, (const void *)v162, *((unint64_t *)&v162 + 1));
  }
  else
  {
    *(_OWORD *)__p = v162;
    uint64_t v91 = v163;
  }
  if (v91 >= 0) {
    int v9 = __p;
  }
  else {
    int v9 = (void **)__p[0];
  }
  if (v91 >= 0) {
    unint64_t v10 = HIBYTE(v91) & 0x7F;
  }
  else {
    unint64_t v10 = (unint64_t)__p[1];
  }
  __int16 v137 = 0;
  __int16 v138 = 0;
  long long v140 = xmmword_1CD96EEC0;
  int v139 = &v141;
  uint64_t v142 = v144;
  uint64_t v143 = 0x1000000000;
  uint64_t v145 = 0;
  uint64_t v146 = 0;
  uint64_t v147 = 0;
  v148 = v150;
  uint64_t v149 = 0x800000000;
  uint64_t v151 = 0;
  v152 = v154;
  uint64_t v153 = 0x800000000;
  llvm::DataLayout::reset((uint64_t)&v136, v9, v10);
  uint64_t v11 = *(void *)(a1 + 32) + 16;
  LOWORD(v119) = 0;
  v120[2] = 0;
  unint64_t v121 = &v123;
  long long v122 = xmmword_1CD96EEC0;
  uint64_t v124 = v126;
  uint64_t v125 = 0x1000000000;
  memset(&v133[10], 0, 24);
  v133[13] = v134;
  v133[14] = 0x800000000;
  v134[16] = 0;
  v134[17] = &v135;
  v134[18] = 0x800000000;
  sub_1CB94E404((uint64_t)&v118, v11);
  sub_1CB94E404(v4, (uint64_t)&v118);
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v118);
  sub_1CB94E404((uint64_t)&v155, v4);
  int v12 = (void *)*a2;
  unint64_t v118 = v120;
  uint64_t v119 = 0x200000000;
  uint64_t v124 = v12;
  uint64_t v125 = (uint64_t)&v132;
  v126[0] = v133;
  v126[1] = 0;
  int v127 = 0;
  __int16 v128 = 512;
  char v129 = 7;
  uint64_t v123 = 0;
  *((void *)&v122 + 1) = 0;
  uint64_t v131 = 0;
  uint64_t v130 = 0;
  v132 = &unk_1F2616E88;
  v133[0] = &unk_1F2617008;
  int v13 = (void *)a2[4];
  unsigned int v79 = a2 + 3;
  if (v13 == a2 + 3)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    int v7 = 0;
    do
    {
      int v14 = v13 - 7;
      uint64_t v80 = v13;
      if (!v13) {
        int v14 = 0;
      }
      uint64_t v15 = (void *)v14[10];
      for (i = v14 + 9; v15 != i; uint64_t v15 = (void *)v89[1])
      {
        unint64_t v16 = v15 - 3;
        BOOL v89 = v15;
        if (!v15) {
          unint64_t v16 = 0;
        }
        uint64_t v17 = v16 + 5;
        for (uint64_t j = (void *)v16[6]; j != v17; uint64_t j = (void *)j[1])
        {
          uint64_t v19 = j - 3;
          if (!j) {
            uint64_t v19 = 0;
          }
          int v20 = *((unsigned __int8 *)v19 + 16);
          if (v20 == 61) {
            int v21 = v19;
          }
          else {
            int v21 = 0;
          }
          if (j && v20 == 61)
          {
            __int16 v108 = 0;
            __int16 v109 = 0;
            int v110 = v112;
            long long v111 = xmmword_1CD96EEC0;
            v112[1] = v113;
            v112[2] = 0x1000000000;
            memset(&v113[128], 0, 24);
            uint64_t v114 = v116;
            uint64_t v115 = 0x800000000;
            v116[16] = 0;
            v116[17] = &v117;
            v116[18] = 0x800000000;
            sub_1CB94E404((uint64_t)&v107, (uint64_t)&v155);
            __int16 v97 = 0;
            __int16 v98 = 0;
            int v99 = v101;
            long long v100 = xmmword_1CD96EEC0;
            v101[1] = v102;
            v101[2] = 0x1000000000;
            memset(&v102[128], 0, 24);
            uint64_t v103 = v105;
            uint64_t v104 = 0x800000000;
            v105[16] = 0;
            v105[17] = &v106;
            v105[18] = 0x800000000;
            sub_1CB94E404((uint64_t)&v96, (uint64_t)&v136);
            uint64_t v22 = v21 - 4;
            uint64_t v23 = *(void *)*(v21 - 4);
            unsigned int v24 = *(_DWORD *)(v23 + 8);
            if ((v24 & 0xFE) == 0x12) {
              unsigned int v24 = *(_DWORD *)(**(void **)(v23 + 16) + 8);
            }
            if ((v24 & 0xFFFFBF00) == 0x100)
            {
              uint64_t v26 = v21 - 8;
              BOOL v25 = (uint64_t *)*(v21 - 8);
              uint64_t v27 = *v25;
              int v28 = *(_DWORD *)(*v25 + 8);
              if (v28 != 15) {
                goto LABEL_82;
              }
              if ((v28 & 0xFE) == 0x12) {
                int v28 = *(_DWORD *)(**(void **)(v27 + 16) + 8);
              }
              if ((v28 & 0xFFFFFF00) != 0x300) {
                goto LABEL_82;
              }
              BOOL v29 = v114;
              if (v115)
              {
                BOOL v29 = v114;
                unint64_t v30 = v115;
                do
                {
                  unint64_t v31 = v30 >> 1;
                  uint64_t v32 = &v29[2 * (v30 >> 1)];
                  unsigned int v33 = *((_DWORD *)v32 + 2);
                  uint64_t v34 = v32 + 2;
                  v30 += ~(v30 >> 1);
                  if (v33 < 3) {
                    BOOL v29 = v34;
                  }
                  else {
                    unint64_t v30 = v31;
                  }
                }
                while (v30);
              }
              if (v29 == &v114[2 * v115] || *((_DWORD *)v29 + 2) != 3) {
                BOOL v29 = v114;
              }
              int v35 = v103;
              if (v104)
              {
                int v35 = v103;
                unint64_t v36 = v104;
                do
                {
                  unint64_t v37 = v36 >> 1;
                  unint64_t v38 = &v35[2 * (v36 >> 1)];
                  unsigned int v39 = *((_DWORD *)v38 + 2);
                  uint64_t v40 = v38 + 2;
                  v36 += ~(v36 >> 1);
                  if (v39 < 3) {
                    int v35 = v40;
                  }
                  else {
                    unint64_t v36 = v37;
                  }
                }
                while (v36);
              }
              if (v35 == &v103[2 * v104] || *((_DWORD *)v35 + 2) != 3) {
                int v35 = v103;
              }
              if ((((unint64_t)*((unsigned int *)v29 + 1) + 7) >> 3) < (((unint64_t)*((unsigned int *)v35 + 1) + 7) >> 3))
              {
                uint64_t v82 = *(v21 - 8);
                *((void *)&v122 + 1) = v21[5];
                uint64_t v123 = (uint64_t)(v21 + 3);
                uint64_t v41 = (unsigned __int8 *)v21[6];
                v92[0] = v41;
                if (v41)
                {
                  llvm::MetadataTracking::track((uint64_t)v92, v41, 2);
                  uint64_t v42 = v92[0];
                }
                else
                {
                  uint64_t v42 = 0;
                }
                sub_1CB8461A4((uint64_t)&v118, 0, v42);
                if (!v92[0]) {
                  goto LABEL_63;
                }
                int v70 = *(unsigned __int8 *)v92[0];
                if ((v70 - 4) <= 0x1E)
                {
                  if ((*(unsigned char *)(v92[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v92[0] + 12)) {
                    goto LABEL_63;
                  }
                  uint64_t v71 = *(void *)(v92[0] + 16);
                  if ((v71 & 4) == 0) {
                    goto LABEL_63;
                  }
                  unint64_t v72 = v71 & 0xFFFFFFFFFFFFFFF8;
                  if (!v72) {
                    goto LABEL_63;
                  }
LABEL_132:
                  v94[0] = (const char *)v92;
                  sub_1CC5FA668(v72 + 16, v94);
                  goto LABEL_63;
                }
                if ((v70 - 3) >= 0xFFFFFFFE) {
                  uint64_t v75 = v92[0];
                }
                else {
                  uint64_t v75 = 0;
                }
                if ((v70 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v72 = v75 + 8;
                  goto LABEL_132;
                }
                if (v70 == 3) {
                  *(void *)(v92[0] + 8) = 0;
                }
LABEL_63:
                uint64_t v85 = *v22;
                unsigned int v43 = *(_DWORD *)(v27 + 8);
                if ((v43 & 0xFE) == 0x12) {
                  unsigned int v43 = *(_DWORD *)(**(void **)(v27 + 16) + 8);
                }
                if (v43 < 0x100) {
                  goto LABEL_74;
                }
                unsigned int v44 = v43 >> 8;
                unint64_t v45 = v103;
                if (v104)
                {
                  unint64_t v45 = v103;
                  unint64_t v46 = v104;
                  do
                  {
                    unint64_t v47 = v46 >> 1;
                    uint64_t v48 = &v45[2 * (v46 >> 1)];
                    unsigned int v49 = *((_DWORD *)v48 + 2);
                    uint64_t v50 = v48 + 2;
                    v46 += ~(v46 >> 1);
                    if (v49 < v44) {
                      unint64_t v45 = v50;
                    }
                    else {
                      unint64_t v46 = v47;
                    }
                  }
                  while (v46);
                }
                if (v45 == &v103[2 * v104] || *((_DWORD *)v45 + 2) != v44) {
LABEL_74:
                }
                  unint64_t v45 = v103;
                int v88 = v7;
                unint64_t v51 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v27, (llvm::LLVMContext *)*((unsigned int *)v45 + 1));
                int v52 = v51;
                if ((*(_DWORD *)(v27 + 8) & 0xFE) == 0x12)
                {
                  llvm::VectorType::get(v51, (llvm::Type *)(*(unsigned int *)(v27 + 32) | ((unint64_t)(*(_DWORD *)(v27 + 8) == 19) << 32)));
                  int v52 = v76;
                }
                unint64_t v53 = llvm::PointerType::get(v52, (llvm::Type *)(v24 >> 8));
                __int16 v93 = 257;
                uint64_t v54 = v82;
                if (*(llvm::PointerType **)v82 == v52) {
                  goto LABEL_89;
                }
                if (*(unsigned __int8 *)(v82 + 16) > 0x14u)
                {
                  __int16 v95 = 257;
                  int v55 = llvm::CastInst::Create(47, v82, (uint64_t)v52, v94, 0);
                  (*(void (**)(void))(*(void *)v126[0] + 16))(v126[0]);
                  if (v119)
                  {
                    uint64_t v73 = (llvm::MDNode **)v118;
                    int v83 = (llvm::MDNode **)((char *)v118 + 16 * v119);
                    do
                    {
                      llvm::Instruction::setMetadata(v55, *(_DWORD *)v73, v73[1]);
                      v73 += 2;
                    }
                    while (v73 != v83);
                  }
                  goto LABEL_80;
                }
                uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::PointerType *))(*(void *)v125 + 224))(v125, 47, v82, v52);
                if (v54 && *(unsigned __int8 *)(v54 + 16) >= 0x1Cu)
                {
                  int v55 = (llvm::Instruction *)v54;
                  (*(void (**)(void, uint64_t, void *, void, void *))(*(void *)v126[0] + 16))(v126[0], v54, v92, *((void *)&v122 + 1), (void *)v123);
                  if (v119)
                  {
                    uint64_t v77 = (llvm::MDNode **)v118;
                    uint64_t v84 = (llvm::MDNode **)((char *)v118 + 16 * v119);
                    do
                    {
                      llvm::Instruction::setMetadata(v55, *(_DWORD *)v77, v77[1]);
                      v77 += 2;
                    }
                    while (v77 != v84);
                  }
LABEL_80:
                  int v7 = v88;
                  uint64_t v54 = (uint64_t)v55;
                }
                else
                {
LABEL_89:
                  int v7 = v88;
                }
                uint64_t v58 = v85;
                __int16 v93 = 257;
                if (*(void *)v85 != v53)
                {
                  uint64_t v59 = v54;
                  if (*(unsigned __int8 *)(v85 + 16) > 0x14u)
                  {
                    __int16 v95 = 257;
                    unsigned int v60 = llvm::CastInst::Create(49, v85, v53, v94, 0);
                    (*(void (**)(void))(*(void *)v126[0] + 16))(v126[0]);
                    if (v119)
                    {
                      uint64_t v74 = (llvm::MDNode **)v118;
                      uint64_t v86 = (llvm::MDNode **)((char *)v118 + 16 * v119);
                      do
                      {
                        llvm::Instruction::setMetadata(v60, *(_DWORD *)v74, v74[1]);
                        v74 += 2;
                      }
                      while (v74 != v86);
                    }
                    goto LABEL_93;
                  }
                  uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)v125 + 224))(v125, 49, v85, v53);
                  if (v58) {
                    BOOL v61 = *(unsigned __int8 *)(v58 + 16) >= 0x1Cu;
                  }
                  else {
                    BOOL v61 = 0;
                  }
                  if (v61)
                  {
                    unsigned int v60 = (llvm::Instruction *)v58;
                    (*(void (**)(void, uint64_t, void *, void, void *))(*(void *)v126[0] + 16))(v126[0], v58, v92, *((void *)&v122 + 1), (void *)v123);
                    if (v119)
                    {
                      BOOL v78 = (llvm::MDNode **)v118;
                      uint64_t v87 = (llvm::MDNode **)((char *)v118 + 16 * v119);
                      do
                      {
                        llvm::Instruction::setMetadata(v60, *(_DWORD *)v78, v78[1]);
                        v78 += 2;
                      }
                      while (v78 != v87);
                    }
LABEL_93:
                    int v7 = v88;
                    uint64_t v54 = v59;
                    uint64_t v58 = (uint64_t)v60;
                  }
                  else
                  {
                    uint64_t v54 = v59;
                  }
                }
                if (*v22)
                {
                  *(void *)*(v21 - 2) = *(v21 - 3);
                  uint64_t v62 = *(v21 - 3);
                  if (v62) {
                    *(void *)(v62 + 16) = *(v21 - 2);
                  }
                }
                *uint64_t v22 = v58;
                if (v58)
                {
                  uint64_t v65 = *(void *)(v58 + 8);
                  unint64_t v64 = (uint64_t **)(v58 + 8);
                  uint64_t v63 = v65;
                  *(v21 - 3) = v65;
                  if (v65) {
                    *(void *)(v63 + 16) = v21 - 3;
                  }
                  *(v21 - 2) = v64;
                  llvm::ValueSymbolTable *v64 = v22;
                }
                if (*v26)
                {
                  *(void *)*(v21 - 6) = *(v21 - 7);
                  uint64_t v66 = *(v21 - 7);
                  if (v66) {
                    *(void *)(v66 + 16) = *(v21 - 6);
                  }
                }
                uint64_t *v26 = v54;
                if (v54)
                {
                  uint64_t v69 = *(void *)(v54 + 8);
                  uint64_t v68 = (uint64_t **)(v54 + 8);
                  uint64_t v67 = v69;
                  *(v21 - 7) = v69;
                  if (v69) {
                    *(void *)(v67 + 16) = v21 - 7;
                  }
                  *(v21 - 6) = v68;
                  void *v68 = v26;
                }
                int v56 = 1;
              }
              else
              {
LABEL_82:
                int v56 = 0;
              }
            }
            else
            {
              int v56 = 0;
            }
            v7 |= v56;
            llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v96);
            llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v107);
            continue;
          }
        }
      }
      int v13 = (void *)v80[1];
    }
    while (v13 != v79);
    if (v118 != v120) {
      free(v118);
    }
  }
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v136);
  if (SHIBYTE(v91) < 0) {
    operator delete(__p[0]);
  }
LABEL_10:
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v155);
  return v7 & 1;
}

void sub_1CC7BC934()
{
}

uint64_t sub_1CC7BC9D0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDB4E8;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261E8D0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB4F0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC7BC934;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCDB4F0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC7BCA80()
{
}

void sub_1CC7BCAC0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC7BCAF8()
{
  return "Dynamic alloca expander";
}

void sub_1CC7BCB08(llvm::PassRegistry *a1, uint64_t a2)
{
  v3[0] = &unk_1F2617E40;
  v3[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v3);
}

uint64_t sub_1CC7BCB54(uint64_t a1, uint64_t a2)
{
  v496[19] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 40);
  if (*(char *)(v3 + 239) < 0) {
    sub_1CB8BDF7C((uint64_t)&v451, *(const void **)(v3 + 216), *(void *)(v3 + 224));
  }
  else {
    std::string v451 = *(std::string *)(v3 + 216);
  }
  if (!std::string::compare(&v451, 0, 4uLL, "agx1"))
  {
    int v8 = 27;
  }
  else if (!std::string::compare(&v451, 0, 4uLL, "agx2"))
  {
    int v8 = 28;
  }
  else if (!std::string::compare(&v451, 0, 4uLL, "agx3"))
  {
    int v8 = 29;
  }
  else
  {
    int v8 = 0;
  }
  int v403 = v8;
  if (SHIBYTE(v451.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v451.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = *(void *)(a2 + 40);
  int v10 = v403 & 0x1E;
  uint64_t v11 = *(void *)(a2 + 80);
  v478 = v480;
  if (v11) {
    uint64_t v12 = v11 - 24;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v10 == 28) {
    int v13 = 256;
  }
  else {
    int v13 = 512;
  }
  unsigned int v407 = v13;
  uint64_t v479 = 0x800000000;
  unsigned int v475 = v477;
  uint64_t v476 = 0x2000000000;
  int v446 = v450;
  v447 = v450;
  uint64_t v448 = 8;
  int v449 = 0;
  uint64_t v15 = *(void *)(v12 + 40);
  uint64_t v14 = *(void *)(v12 + 48);
  if (v10 == 28) {
    int v16 = 32;
  }
  else {
    int v16 = 4;
  }
  unsigned int v404 = v16;
  if (v14 != v15)
  {
    unsigned int v17 = 0;
    unsigned int v18 = (llvm::DataLayout *)(v9 + 272);
    do
    {
      uint64_t v19 = v14 - 24;
      if (!v14) {
        uint64_t v19 = 0;
      }
      int v20 = *(unsigned __int8 *)(v19 + 16);
      if (v20 == 59) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = 0;
      }
      if (v14 && v20 == 59 && (*(_DWORD *)(*(void *)(v21 + 64) + 8) & 0xFE) == 0x10)
      {
        if (v17 >= HIDWORD(v479)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v478 + v17) = v21;
        unsigned int v17 = v479 + 1;
        LODWORD(v479) = v479 + 1;
      }
      uint64_t v14 = *(void *)(v14 + 8);
    }
    while (v14 != v15);
    if (v17)
    {
      char v420 = 0;
      uint64_t v22 = (char *)v478;
      int v408 = (char *)v478 + 8 * v17;
      uint64_t v406 = (uint64_t)v18;
      while (1)
      {
        uint64_t j = *(uint64_t **)v22;
        uint64_t v24 = *(void *)(*(void *)v22 + 64);
        int v472 = v474;
        uint64_t v473 = 0x2000000000;
        uint64_t v427 = *(void *)(*j + 24);
        BOOL v409 = v22;
        if (v427)
        {
          for (uint64_t i = j[1]; i; uint64_t i = *(void *)(i + 8))
          {
            uint64_t v26 = *(void *)(i + 24);
            if (v26 && *(unsigned char *)(v26 + 16) == 77)
            {
              char v27 = sub_1CC7BFE54(*j, *(void *)v26, (uint64_t)v18);
              uint64_t v28 = *(void *)(v26 + 8);
              if (v27)
              {
LABEL_43:
                if (v28)
                {
                  unsigned int v29 = v473;
                  do
                  {
                    if (v29 >= HIDWORD(v473)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v472 + v29) = *(void *)(v28 + 24);
                    unsigned int v29 = v473 + 1;
                    LODWORD(v473) = v473 + 1;
                    uint64_t v28 = *(void *)(v28 + 8);
                  }
                  while (v28);
                }
              }
              else
              {
                uint64_t v30 = v28;
                if (v28)
                {
                  while (1)
                  {
                    uint64_t v31 = *(void *)(v30 + 24);
                    if (*(unsigned char *)(v31 + 16) != 84) {
                      break;
                    }
                    uint64_t v32 = *(void *)(v31 - 32);
                    if (!v32
                      || *(unsigned char *)(v32 + 16)
                      || *(void *)(v32 + 24) != *(void *)(v31 + 72)
                      || (*(unsigned char *)(v32 + 33) & 0x20) == 0
                      || (*(_DWORD *)(v32 + 36) - 167) >= 2)
                    {
                      break;
                    }
                    uint64_t v30 = *(void *)(v30 + 8);
                    if (!v30) {
                      goto LABEL_43;
                    }
                  }
                }
              }
            }
            else
            {
              if (v473 >= (unint64_t)HIDWORD(v473)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v472 + v473) = v26;
              LODWORD(v473) = v473 + 1;
            }
          }
          goto LABEL_126;
        }
        *(void *)&long long v481 = &__p;
        *((void *)&v481 + 1) = 0x2000000000;
        uint64_t v33 = j[1];
        if (v33)
        {
          unint64_t v34 = -1;
          uint64_t v35 = j[1];
          do
          {
            uint64_t v35 = *(void *)(v35 + 8);
            ++v34;
          }
          while (v35);
          unsigned int v36 = v34 + 1;
          if (v34 >= 0x20) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          p_p = &__p;
          do
          {
            *(void *)p_p = *(void *)(v33 + 24);
            p_p = (long long *)((char *)p_p + 8);
            uint64_t v33 = *(void *)(v33 + 8);
          }
          while (v33);
        }
        else
        {
          unsigned int v36 = 0;
        }
        unsigned int v38 = v36;
        DWORD2(v481) = v36;
        if (v36) {
          break;
        }
LABEL_124:
        if ((long long *)v481 != &__p) {
          free((void *)v481);
        }
LABEL_126:
        v445[0] = 0;
        v445[1] = 0;
        v444 = (uint64_t *)v445;
        char v413 = j;
        if (!v473)
        {
          LODWORD(v52) = 0;
          LOBYTE(v56) = 1;
          goto LABEL_283;
        }
        uint64_t v424 = v24;
        LODWORD(v52) = 0;
        unint64_t v53 = (unint64_t *)v472;
        uint64_t v54 = (unint64_t *)((char *)v472 + 8 * v473);
        LOBYTE(v55) = 1;
        uint64_t v56 = 1;
        while ((v55 & 1) != 0)
        {
          unint64_t v57 = *v53;
          int v58 = *(unsigned __int8 *)(*v53 + 16);
          if (v58 == 84)
          {
            uint64_t v59 = *(void *)(v57 - 32);
            if (!v59
              || *(unsigned char *)(v59 + 16)
              || *(void *)(v59 + 24) != *(void *)(v57 + 72)
              || (*(unsigned char *)(v59 + 33) & 0x20) == 0
              || (*(_DWORD *)(v59 + 36) - 167) > 1)
            {
              break;
            }
            unsigned int v60 = (char *)v447;
            uint64_t v61 = HIDWORD(v448);
            if (v447 != v446)
            {
              unsigned int v65 = v448;
LABEL_176:
              if (3 * v65 <= 4 * (HIDWORD(v448) - v449))
              {
                if (v65 >= 0x40) {
                  v65 *= 2;
                }
                else {
                  unsigned int v65 = 128;
                }
              }
              else if (v65 - HIDWORD(v448) >= v65 >> 3)
              {
                goto LABEL_178;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v446, v65);
              unsigned int v65 = v448;
              unsigned int v60 = (char *)v447;
LABEL_178:
              unsigned int v80 = v65 - 1;
              unsigned int v81 = (v65 - 1) & ((v57 >> 4) ^ (v57 >> 9));
              uint64_t v82 = &v60[8 * v81];
              unint64_t v83 = *(void *)v82;
              if (*(void *)v82 == -1)
              {
                uint64_t v84 = 0;
LABEL_197:
                if (v84) {
                  __int16 v93 = v84;
                }
                else {
                  __int16 v93 = (unint64_t *)v82;
                }
                if (*v93 != v57)
                {
                  if (*v93 == -2) {
                    --v449;
                  }
                  else {
                    ++HIDWORD(v448);
                  }
                  *__int16 v93 = v57;
                }
              }
              else
              {
                uint64_t v84 = 0;
                int v85 = 1;
                while (v83 != v57)
                {
                  if (v84) {
                    BOOL v86 = 0;
                  }
                  else {
                    BOOL v86 = v83 == -2;
                  }
                  if (v86) {
                    uint64_t v84 = (unint64_t *)v82;
                  }
                  unsigned int v87 = v81 + v85++;
                  unsigned int v81 = v87 & v80;
                  uint64_t v82 = &v60[8 * (v87 & v80)];
                  unint64_t v83 = *(void *)v82;
                  if (*(void *)v82 == -1) {
                    goto LABEL_197;
                  }
                }
              }
              goto LABEL_269;
            }
            if (HIDWORD(v448))
            {
              uint64_t v62 = 0;
              uint64_t v63 = 8 * HIDWORD(v448);
              unint64_t v64 = (unint64_t *)v447;
              while (*v64 != v57)
              {
                if (*v64 == -2) {
                  uint64_t v62 = v64;
                }
                ++v64;
                v63 -= 8;
                if (!v63)
                {
                  if (!v62) {
                    goto LABEL_143;
                  }
                  *uint64_t v62 = v57;
                  --v449;
                  goto LABEL_269;
                }
              }
              goto LABEL_269;
            }
LABEL_143:
            unsigned int v65 = v448;
            if (HIDWORD(v448) >= v448) {
              goto LABEL_176;
            }
            ++HIDWORD(v448);
            *((void *)v447 + v61) = v57;
          }
          else
          {
            if ((v58 & 0xFE) != 0x3C)
            {
              if (v58 != 62) {
                break;
              }
              int v66 = v52;
              uint64_t v67 = v56;
              int v68 = *(_DWORD *)(v57 + 20);
              unint64_t v69 = v57 + 32;
              unint64_t v70 = -1;
              do
              {
                uint64_t v71 = v68 & 0x7FFFFFF;
                unint64_t v72 = (v71 - 1);
                if (++v70 >= v72) {
                  break;
                }
                uint64_t v73 = *(void *)(v69 - 32 * v71);
                if (v73) {
                  BOOL v74 = *(unsigned __int8 *)(v73 + 16) >= 0x1Cu;
                }
                else {
                  BOOL v74 = 0;
                }
                if (v74)
                {
                  uint64_t v75 = llvm::ConstantFoldInstruction(v73, v18, 0, v4, v5, v6, v7);
                  if (v75)
                  {
                    char v420 = 1;
                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v73, v75, (llvm::Value *)1);
                    if (!*(void *)(v73 + 8))
                    {
                      if (llvm::wouldInstructionBeTriviallyDead(v73, 0)) {
                        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                      }
                      char v420 = 1;
                    }
                  }
                }
                int v68 = *(_DWORD *)(v57 + 20);
                unint64_t v76 = v69 - 32 * (v68 & 0x7FFFFFF);
                v69 += 32;
              }
              while (*(unsigned __int8 *)(*(void *)v76 + 16) < 0x15u);
              if (v70 < v72) {
                LODWORD(v52) = v66;
              }
              else {
                LODWORD(v52) = v66 + 1;
              }
              if (v427)
              {
                uint64_t v77 = *(void *)(v57 + 8);
                for (j = v413; v77; uint64_t v77 = *(void *)(v77 + 8))
                {
                  uint64_t v78 = *(void *)(v77 + 24);
                  if (v78 && *(unsigned char *)(v78 + 16) == 77)
                  {
                    if (sub_1CC7BFE54(*(void *)v78, *(void *)v57, (uint64_t)v18))
                    {
                      while (1)
                      {
                        uint64_t v78 = *(void *)(v78 + 8);
                        if (!v78) {
                          break;
                        }
                        uint64_t v79 = *(void *)(v78 + 24);
                        *(void *)&long long v481 = v57;
                        *((void *)&v481 + 1) = v79;
                        sub_1CC7BFE98(&v444, &v481);
                      }
                    }
                  }
                  else
                  {
                    *(void *)&long long v481 = v57;
                    *((void *)&v481 + 1) = v78;
                    sub_1CC7BFE98(&v444, &v481);
                  }
                }
                goto LABEL_252;
              }
              *(void *)&long long v481 = &__p;
              *((void *)&v481 + 1) = 0x2000000000;
              uint64_t v88 = *(void *)(v57 + 8);
              uint64_t j = v413;
              if (v88)
              {
                unint64_t v89 = -1;
                uint64_t v90 = *(void *)(v57 + 8);
                do
                {
                  uint64_t v90 = *(void *)(v90 + 8);
                  ++v89;
                }
                while (v90);
                unsigned int v91 = v89 + 1;
                if (v89 >= 0x20) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v92 = &__p;
                do
                {
                  *(void *)uint64_t v92 = *(void *)(v88 + 24);
                  uint64_t v92 = (long long *)((char *)v92 + 8);
                  uint64_t v88 = *(void *)(v88 + 8);
                }
                while (v88);
              }
              else
              {
                unsigned int v91 = 0;
              }
              unsigned int v94 = v91;
              DWORD2(v481) = v91;
              if (!v91)
              {
LABEL_250:
                if ((long long *)v481 != &__p) {
                  free((void *)v481);
                }
LABEL_252:
                char v107 = sub_1CC7BFF50((uint64_t)&v444, v57);
                if (v107 == v108)
                {
                  int v55 = 1;
                  uint64_t v56 = v67;
                }
                else
                {
                  uint64_t v56 = v67;
                  while (1)
                  {
                    uint64_t v109 = v107[5];
                    int v110 = *(unsigned __int8 *)(v109 + 16);
                    if ((v110 & 0xFE) != 0x3C) {
                      break;
                    }
                    if (v110 == 61)
                    {
                      int v111 = *(_DWORD *)(v109 + 20);
                      if ((v111 & 0x40000000) != 0) {
                        unsigned int v112 = *(uint64_t **)(v109 - 8);
                      }
                      else {
                        unsigned int v112 = (uint64_t *)(v109 - 32 * (v111 & 0x7FFFFFF));
                      }
                      uint64_t v113 = *v112;
                      if (v113 == v57) {
                        break;
                      }
                      if (*(unsigned __int8 *)(v113 + 16) >= 0x15u) {
                        uint64_t v56 = 0;
                      }
                      else {
                        uint64_t v56 = v56;
                      }
                    }
                    uint64_t v114 = (void *)v107[1];
                    if (v114)
                    {
                      do
                      {
                        uint64_t v115 = v114;
                        uint64_t v114 = (void *)*v114;
                      }
                      while (v114);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v115 = (void *)v107[2];
                        BOOL v47 = *v115 == (void)v107;
                        char v107 = v115;
                      }
                      while (!v47);
                    }
                    char v107 = v115;
                    if (v115 == v108) {
                      goto LABEL_269;
                    }
                  }
                  int v55 = 0;
                }
                goto LABEL_270;
              }
              while (2)
              {
                while (1)
                {
                  uint64_t v95 = *(void *)(v481 + 8 * v94 - 8);
                  uint64_t v96 = v94 - 1;
                  DWORD2(v481) = v96;
                  int v97 = *(unsigned __int8 *)(v95 + 16);
                  if (!v95 || v97 != 77) {
                    break;
                  }
                  uint64_t v98 = *(void *)(v95 + 8);
                  if (v98)
                  {
                    uint64_t v99 = 0;
                    uint64_t v100 = v98;
                    do
                    {
                      ++v99;
                      uint64_t v100 = *(void *)(v100 + 8);
                    }
                    while (v100);
                  }
                  else
                  {
                    uint64_t v99 = 0;
                  }
                  if (v99 + (unint64_t)v96 > HIDWORD(v481)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v98)
                  {
                    uint64_t v102 = (void *)(v481 + 8 * v96);
                    do
                    {
                      *v102++ = *(void *)(v98 + 24);
                      uint64_t v98 = *(void *)(v98 + 8);
                    }
                    while (v98);
                  }
                  unsigned int v94 = v96 + v99;
                  DWORD2(v481) = v94;
                  if (!v94) {
                    goto LABEL_250;
                  }
                }
                if (!v95 || (int v101 = (uint64_t *)v95, v97 != 60))
                {
                  if (v95 && v97 == 61)
                  {
LABEL_216:
                    int v101 = *(uint64_t **)(v95 - 64);
                    break;
                  }
                  if (v95 && v97 == 65)
                  {
                    int v101 = *(uint64_t **)(v95 - 32);
                    break;
                  }
                  if (v95 && v97 == 64) {
                    goto LABEL_216;
                  }
                  if (v97 == 62)
                  {
LABEL_232:
                    BOOL v103 = v97 != 62 || v95 == 0;
                    uint64_t v104 = 64;
                    if (v103) {
                      uint64_t v104 = 24;
                    }
                    int v101 = (uint64_t *)(v95 + v104);
                  }
                  else
                  {
                    if (v97 == 5)
                    {
                      if (*(_WORD *)(v95 + 18) == 34) {
                        goto LABEL_232;
                      }
LABEL_242:
                      uint64_t v106 = 0;
LABEL_245:
                      if (sub_1CC7BFCE4(v106, *(void *)(v57 + 72), (uint64_t)v18))
                      {
                        *(void *)&long long v454 = v57;
                        *((void *)&v454 + 1) = v95;
                        sub_1CC7BFE98(&v444, &v454);
                      }
                      unsigned int v94 = DWORD2(v481);
                      if (!DWORD2(v481)) {
                        goto LABEL_250;
                      }
                      continue;
                    }
                    if (v95) {
                      BOOL v105 = v97 == 3;
                    }
                    else {
                      BOOL v105 = 0;
                    }
                    if (!v105) {
                      goto LABEL_242;
                    }
                    int v101 = (uint64_t *)(v95 + 24);
                  }
                }
                break;
              }
              uint64_t v106 = *v101;
              goto LABEL_245;
            }
            LODWORD(v52) = v52 + 1;
          }
LABEL_269:
          int v55 = 1;
LABEL_270:
          if (++v53 == v54)
          {
            uint64_t v24 = v424;
            if (!v55)
            {
LABEL_606:
              uint64_t v116 = v409;
              goto LABEL_607;
            }
LABEL_283:
            int v117 = *(_DWORD *)(v24 + 8);
            if ((*(_DWORD *)(v24 + 8) & 0xFE) == 0x12) {
              uint64_t v118 = v24;
            }
            else {
              uint64_t v118 = 0;
            }
            if (v24) {
              BOOL v119 = v117 == 17;
            }
            else {
              BOOL v119 = 0;
            }
            char v120 = !v119;
            if (!v119
              || ((uint64_t v121 = *(void *)(v24 + 24),
                   unsigned int v122 = *(_DWORD *)(v121 + 8),
                   (*(_DWORD *)(v121 + 8) & 0xFE) != 0x12)
                ? (BOOL v123 = v122 > 0x15)
                : (BOOL v123 = 1),
                  (int v124 = (1 << v122) & 0x20AC7F, !v123) ? (v125 = v124 == 0) : (v125 = 1),
                  v125))
            {
              if (!v118) {
                goto LABEL_349;
              }
              unsigned int v126 = *(_DWORD *)(*(void *)(v118 + 24) + 8);
              BOOL v127 = (v126 & 0xFE) == 0x12 || v126 > 0x15;
              int v128 = (1 << v126) & 0x20AC7F;
              if (v127 || v128 == 0) {
                goto LABEL_349;
              }
              if (v120)
              {
                if (!v24 || v117 != 18)
                {
                  unint64_t v134 = v402 & 0xFFFFFFFFFFFFFF00;
                  goto LABEL_326;
                }
                uint64_t v130 = *(unsigned int *)(v24 + 32);
                uint64_t v121 = *(void *)(v24 + 24);
LABEL_318:
                int v132 = sub_1CB83544C((uint64_t)v18, v121);
                if (v131 == 1) {
                LODWORD(v133) = (v132 + 7) >> 3;
                }
                if (v133 <= 2) {
                  LODWORD(v133) = 2;
                }
                if (v132 == -8) {
                  uint64_t v133 = 2;
                }
                else {
                  uint64_t v133 = v133;
                }
                unint64_t v134 = v130 | (v133 << 32);
LABEL_326:
                long long __p = 0u;
                long long v481 = 0u;
                int v483 = 1065353216;
                sub_1CC7BFFE8((float *)&v481, HIDWORD(v134), SHIDWORD(v134));
                unsigned int v135 = 32;
                char v136 = (void *)__p;
                if (!v52 && *((void *)&__p + 1) <= 1uLL)
                {
                  if (*(_DWORD *)(__p + 16) >= 3u) {
                    unsigned int v135 = 16;
                  }
                  else {
                    unsigned int v135 = 32;
                  }
                }
                unint64_t v137 = (HIDWORD(v134) * v134);
                if ((_BYTE)v56) {
                  unsigned int v135 = v404;
                }
                unint64_t v138 = 4 * v404;
                if (!(_BYTE)v56) {
                  unint64_t v138 = 128;
                }
                unint64_t v402 = v134;
                BOOL v141 = v135 >= v134 && v138 >= v137 && v407 >= v137;
                if ((void)__p)
                {
                  do
                  {
                    uint64_t v142 = (void *)*v136;
                    operator delete(v136);
                    char v136 = v142;
                  }
                  while (v142);
                }
                uint64_t v143 = (void *)v481;
                *(void *)&long long v481 = 0;
                if (v143) {
                  operator delete(v143);
                }
                if (!v141) {
                  goto LABEL_606;
                }
LABEL_349:
                long long v441 = 0u;
                long long v442 = 0u;
                int v443 = 1065353216;
                long long v438 = 0u;
                long long v439 = 0u;
                float v440 = 1.0;
                *(_OWORD *)uint64_t v435 = 0u;
                *(_OWORD *)v436 = 0u;
                float v437 = 1.0;
                *(_OWORD *)BOOL v432 = 0u;
                *(_OWORD *)unsigned int v433 = 0u;
                int v434 = 1065353216;
                if (!v473)
                {
                  int v233 = 0;
                  if (!v24) {
                    goto LABEL_588;
                  }
                  goto LABEL_582;
                }
                uint64_t v425 = v24;
                unint64_t v418 = 0;
                uint64_t v144 = (unint64_t *)v472;
                uint64_t v145 = (char *)v472 + 8 * v473;
                unsigned int v414 = -1;
                char v416 = v56;
                unsigned int v428 = v52;
                uint64_t v422 = v145;
LABEL_351:
                unint64_t v146 = *v144;
                if (!*v144 || *(unsigned char *)(v146 + 16) != 62) {
                  goto LABEL_544;
                }
                uint64_t v147 = *(void *)(v146 + 64);
                int v148 = *(_DWORD *)(v146 + 20);
                if ((v148 & 0x40000000) != 0)
                {
                  *(void *)&long long v481 = *(void *)(v146 - 8) + 32;
                  *((void *)&v481 + 1) = v147 | 4;
                  unint64_t v150 = *(void *)(v146 - 8);
                  uint64_t v149 = v148 & 0x7FFFFFF;
                }
                else
                {
                  uint64_t v149 = v148 & 0x7FFFFFF;
                  unint64_t v150 = v146 - 32 * v149;
                  *(void *)&long long v481 = v150 + 32;
                  *((void *)&v481 + 1) = v147 | 4;
                }
                v410 &= 0xFFFFFF00;
                *(void *)&long long v454 = 0;
                if (v149 == 1) {
                  goto LABEL_544;
                }
                unint64_t v151 = 0;
                unint64_t v152 = 0;
                int v153 = 0;
                uint64_t v154 = 0;
                unsigned __int8 v155 = (llvm::Constant **)(v150 + 32 * v149);
                unint64_t v156 = v146 + 32;
                __int16 v157 = v155;
                while (1)
                {
                  uint64_t v158 = *(void *)(v156 - 32 * v149);
                  unsigned int v159 = *(unsigned __int8 *)(v158 + 16);
                  if (v159 > 0x14)
                  {
                    if (v153) {
                      goto LABEL_578;
                    }
                    if (v157 == v155 || (unint64_t v152 = v154 & 0xFFFFFFFFFFFFFFF8, (v154 & 4) != 0) && v152)
                    {
                      char v162 = 0;
                    }
                    else
                    {
                      AggregateElement = *v157;
                      if (!*v157 || *((unsigned char *)AggregateElement + 16) != 16) {
                        AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement(AggregateElement, 0);
                      }
                      char v162 = 0;
                      uint64_t v166 = (unsigned int *)*((void *)AggregateElement + 3);
                      uint64_t v164 = (unsigned int *)((char *)AggregateElement + 24);
                      uint64_t v165 = v166;
                      if (v164[2] < 0x41) {
                        uint64_t v165 = v164;
                      }
                      unint64_t v152 = *(void *)(*(void *)(v152 + 16) + 8 * *v165);
                    }
                    int v153 = 1;
                    int v410 = v151;
                    goto LABEL_380;
                  }
                  if (v159 == 16)
                  {
                    uint64_t v160 = (unint64_t *)(v158 + 24);
                    if (*(_DWORD *)(v158 + 32) >= 0x41u) {
                      uint64_t v160 = (unint64_t *)*v160;
                    }
                    if (!v153)
                    {
                      unint64_t v161 = *v160;
                      if (v161 > 0x3E) {
                        goto LABEL_578;
                      }
                      goto LABEL_379;
                    }
                  }
                  else if (!v153)
                  {
                    unint64_t v161 = 0;
LABEL_379:
                    int v153 = 0;
                    *(void *)&long long v454 = v161 + ((void)v454 << 6) + 1;
                    char v162 = 1;
                    goto LABEL_380;
                  }
                  char v162 = 0;
                  int v153 = 1;
LABEL_380:
                  ++v151;
                  uint64_t v154 = *((void *)&v481 + 1);
                  __int16 v157 = (llvm::Constant **)v481;
                  sub_1CB8460E4((uint64_t)&v481);
                  LODWORD(v149) = *(_DWORD *)(v146 + 20) & 0x7FFFFFF;
                  v156 += 32;
                  if (v151 >= (v149 - 1))
                  {
                    uint64_t j = v413;
                    unint64_t v52 = v428;
                    uint64_t v145 = v422;
                    if (v162)
                    {
                      unsigned int v18 = (llvm::DataLayout *)v406;
                      LOBYTE(v56) = v416;
                      goto LABEL_544;
                    }
                    if ((v410 - 12) < 0xFFFFFFF5
                      || !v152
                      || (*(_DWORD *)(v152 + 8) & 0xFE) != 0x12 && *(_DWORD *)(v152 + 8) != 17)
                    {
LABEL_578:
                      unsigned int v18 = (llvm::DataLayout *)v406;
                      uint64_t v24 = v425;
                      goto LABEL_579;
                    }
                    if (sub_1CC7C03C0(&v441, (unint64_t *)&v454))
                    {
                      unsigned int v18 = (llvm::DataLayout *)v406;
                      LOBYTE(v56) = v416;
                    }
                    else
                    {
                      int v167 = *(unsigned __int8 *)(v152 + 8);
                      unsigned int v18 = (llvm::DataLayout *)v406;
                      LOBYTE(v56) = v416;
                      if (v167 == 18)
                      {
                        uint64_t v170 = *(unsigned int *)(v152 + 32);
                        int v176 = sub_1CB83544C(v406, *(void *)(v152 + 24));
                        unint64_t v168 = v418;
                        int v169 = v414;
                        if (v175 == 1) {
                        LODWORD(v177) = (v176 + 7) >> 3;
                        }
                        if (v177 <= 2) {
                          LODWORD(v177) = 2;
                        }
                        if (v176 == -8) {
                          uint64_t v177 = 2;
                        }
                        else {
                          uint64_t v177 = v177;
                        }
                        unint64_t v174 = v170 | (v177 << 32);
                      }
                      else
                      {
                        unint64_t v168 = v418;
                        int v169 = v414;
                        if (v167 == 17)
                        {
                          uint64_t v170 = *(unsigned int *)(v152 + 32);
                          int v172 = sub_1CB83544C(v406, *(void *)(v152 + 24));
                          if (v171 == 1) {
                          LODWORD(v173) = (v172 + 7) >> 3;
                          }
                          if (v173 <= 2) {
                            LODWORD(v173) = 2;
                          }
                          if (v172 == -8) {
                            uint64_t v173 = 2;
                          }
                          else {
                            uint64_t v173 = v173;
                          }
                          unint64_t v174 = v170 | (v173 << 32);
                        }
                        else
                        {
                          unint64_t v174 = v401 & 0xFFFFFFFFFFFFFF00;
                          LODWORD(v170) = v401 & 0xFFFFFF00;
                        }
                      }
                      if (v169 <= (int)v170) {
                        int v169 = v170;
                      }
                      unsigned int v414 = v169;
                      unint64_t v178 = HIDWORD(v174);
                      unint64_t v179 = v174;
                      sub_1CC7BFFE8((float *)v432, HIDWORD(v174), SHIDWORD(v174));
                      unint64_t v401 = v179;
                      unint64_t v418 = (v178 * v179) + v168;
                      sub_1CC7C0480((uint64_t)&v441, (unint64_t *)&v454, &v454);
                      uint64_t v145 = v422;
                    }
                    unint64_t v180 = 0x9DDFEA08EB382D69 * (((8 * v146) + 8) ^ HIDWORD(v146));
                    unint64_t v181 = 0x9DDFEA08EB382D69 * (HIDWORD(v146) ^ (v180 >> 47) ^ v180);
                    unint64_t v182 = 0x9DDFEA08EB382D69 * (v181 ^ (v181 >> 47));
                    unint64_t v183 = *((void *)&v438 + 1);
                    if (*((void *)&v438 + 1))
                    {
                      uint8x8_t v184 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v438 + 8));
                      v184.i16[0] = vaddlv_u8(v184);
                      if (v184.u32[0] > 1uLL)
                      {
                        unint64_t v52 = 0x9DDFEA08EB382D69 * (v181 ^ (v181 >> 47));
                        if (v182 >= *((void *)&v438 + 1)) {
                          unint64_t v52 = v182 % *((void *)&v438 + 1);
                        }
                      }
                      else
                      {
                        unint64_t v52 = (*((void *)&v438 + 1) - 1) & v182;
                      }
                      uint64_t v185 = *(void ***)(v438 + 8 * v52);
                      if (v185)
                      {
                        uint64_t v186 = *v185;
                        if (*v185)
                        {
                          do
                          {
                            unint64_t v187 = v186[1];
                            if (v187 == v182)
                            {
                              if (v186[2] == v146) {
                                goto LABEL_478;
                              }
                            }
                            else
                            {
                              if (v184.u32[0] > 1uLL)
                              {
                                if (v187 >= *((void *)&v438 + 1)) {
                                  v187 %= *((void *)&v438 + 1);
                                }
                              }
                              else
                              {
                                v187 &= *((void *)&v438 + 1) - 1;
                              }
                              if (v187 != v52) {
                                break;
                              }
                            }
                            uint64_t v186 = (void *)*v186;
                          }
                          while (v186);
                        }
                      }
                    }
                    uint64_t v186 = operator new(0x20uLL);
                    *uint64_t v186 = 0;
                    v186[1] = v182;
                    v186[2] = v146;
                    *((_DWORD *)v186 + 6) = 0;
                    float v188 = (float)(unint64_t)(*((void *)&v439 + 1) + 1);
                    if (!v183 || (float)(v440 * (float)v183) < v188)
                    {
                      BOOL v189 = (v183 & (v183 - 1)) != 0;
                      if (v183 < 3) {
                        BOOL v189 = 1;
                      }
                      unint64_t v190 = v189 | (2 * v183);
                      unint64_t v191 = vcvtps_u32_f32(v188 / v440);
                      if (v190 <= v191) {
                        int8x8_t prime = (int8x8_t)v191;
                      }
                      else {
                        int8x8_t prime = (int8x8_t)v190;
                      }
                      if (*(void *)&prime == 1)
                      {
                        int8x8_t prime = (int8x8_t)2;
                      }
                      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
                      {
                        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
                        unint64_t v183 = *((void *)&v438 + 1);
                      }
                      if (*(void *)&prime <= v183)
                      {
                        if (*(void *)&prime < v183)
                        {
                          unint64_t v197 = vcvtps_u32_f32((float)*((unint64_t *)&v439 + 1) / v440);
                          if (v183 < 3
                            || (uint8x8_t v198 = (uint8x8_t)vcnt_s8((int8x8_t)v183),
                                v198.i16[0] = vaddlv_u8(v198),
                                v198.u32[0] > 1uLL))
                          {
                            unint64_t v197 = std::__next_prime(v197);
                          }
                          else
                          {
                            uint64_t v199 = 1 << -(char)__clz(v197 - 1);
                            if (v197 >= 2) {
                              unint64_t v197 = v199;
                            }
                          }
                          if (*(void *)&prime <= v197) {
                            int8x8_t prime = (int8x8_t)v197;
                          }
                          if (*(void *)&prime >= v183)
                          {
                            unint64_t v183 = *((void *)&v438 + 1);
                          }
                          else
                          {
                            if (prime) {
                              goto LABEL_441;
                            }
                            uint64_t v200 = (void *)v438;
                            *(void *)&long long v438 = 0;
                            if (v200) {
                              operator delete(v200);
                            }
                            unint64_t v183 = 0;
                            *((void *)&v438 + 1) = 0;
                            unsigned int v18 = (llvm::DataLayout *)v406;
                            LOBYTE(v56) = v416;
                            uint64_t v145 = v422;
                          }
                        }
                      }
                      else
                      {
LABEL_441:
                        if (*(void *)&prime >> 61) {
                          goto LABEL_876;
                        }
                        uint64_t v193 = operator new(8 * *(void *)&prime);
                        unint64_t v194 = (void *)v438;
                        *(void *)&long long v438 = v193;
                        if (v194) {
                          operator delete(v194);
                        }
                        uint64_t v195 = 0;
                        *((int8x8_t *)&v438 + 1) = prime;
                        do
                          *(void *)(v438 + 8 * v195++) = 0;
                        while (*(void *)&prime != v195);
                        uint64_t v196 = (void **)v439;
                        if ((void)v439)
                        {
                          unint64_t v225 = *(void *)(v439 + 8);
                          uint8x8_t v226 = (uint8x8_t)vcnt_s8(prime);
                          v226.i16[0] = vaddlv_u8(v226);
                          if (v226.u32[0] <= 1uLL)
                          {
                            v225 &= *(void *)&prime - 1;
                          }
                          else if (v225 >= *(void *)&prime)
                          {
                            v225 %= *(void *)&prime;
                          }
                          *(void *)(v438 + 8 * v225) = &v439;
                          v227 = *v196;
                          if (*v196)
                          {
                            while (2)
                            {
                              unint64_t v228 = v227[1];
                              if (v226.u32[0] <= 1uLL)
                              {
                                v228 &= *(void *)&prime - 1;
                              }
                              else if (v228 >= *(void *)&prime)
                              {
                                v228 %= *(void *)&prime;
                              }
                              if (v228 != v225)
                              {
                                if (!*(void *)(v438 + 8 * v228))
                                {
                                  *(void *)(v438 + 8 * v228) = v196;
                                  goto LABEL_558;
                                }
                                void *v196 = (void *)*v227;
                                void *v227 = **(void **)(v438 + 8 * v228);
                                **(void **)(v438 + 8 * v228) = v227;
                                v227 = v196;
                              }
                              unint64_t v228 = v225;
LABEL_558:
                              uint64_t v196 = (void **)v227;
                              v227 = (void *)*v227;
                              unint64_t v225 = v228;
                              if (!v227) {
                                break;
                              }
                              continue;
                            }
                          }
                        }
                        unint64_t v183 = (unint64_t)prime;
                      }
                      if ((v183 & (v183 - 1)) != 0)
                      {
                        if (v182 >= v183) {
                          unint64_t v52 = v182 % v183;
                        }
                        else {
                          unint64_t v52 = v182;
                        }
                      }
                      else
                      {
                        unint64_t v52 = (v183 - 1) & v182;
                      }
                    }
                    uint64_t v201 = v438;
                    uint64_t v202 = *(void **)(v438 + 8 * v52);
                    if (v202)
                    {
                      *uint64_t v186 = *v202;
                      goto LABEL_476;
                    }
                    *uint64_t v186 = v439;
                    *(void *)&long long v439 = v186;
                    *(void *)(v201 + 8 * v52) = &v439;
                    if (*v186)
                    {
                      unint64_t v203 = *(void *)(*v186 + 8);
                      if ((v183 & (v183 - 1)) != 0)
                      {
                        if (v203 >= v183) {
                          v203 %= v183;
                        }
                      }
                      else
                      {
                        v203 &= v183 - 1;
                      }
                      uint64_t v202 = (void *)(v438 + 8 * v203);
LABEL_476:
                      *uint64_t v202 = v186;
                    }
                    ++*((void *)&v439 + 1);
LABEL_478:
                    *((_DWORD *)v186 + 6) = v410;
                    unint64_t v204 = (unint64_t)v435[1];
                    if (v435[1])
                    {
                      uint8x8_t v205 = (uint8x8_t)vcnt_s8((int8x8_t)v435[1]);
                      v205.i16[0] = vaddlv_u8(v205);
                      if (v205.u32[0] > 1uLL)
                      {
                        unint64_t v183 = v182;
                        if ((void *)v182 >= v435[1]) {
                          unint64_t v183 = v182 % (unint64_t)v435[1];
                        }
                      }
                      else
                      {
                        unint64_t v183 = ((unint64_t)v435[1] - 1) & v182;
                      }
                      v206 = (void **)*((void *)v435[0] + v183);
                      if (v206)
                      {
                        for (k = *v206; k; k = (void *)*k)
                        {
                          unint64_t v208 = k[1];
                          if (v208 == v182)
                          {
                            if (k[2] == v146)
                            {
                              uint64_t j = v413;
                              goto LABEL_543;
                            }
                          }
                          else
                          {
                            if (v205.u32[0] > 1uLL)
                            {
                              if ((void *)v208 >= v435[1]) {
                                v208 %= (unint64_t)v435[1];
                              }
                            }
                            else
                            {
                              v208 &= (unint64_t)v435[1] - 1;
                            }
                            if (v208 != v183) {
                              break;
                            }
                          }
                        }
                      }
                    }
                    k = operator new(0x20uLL);
                    void *k = 0;
                    k[1] = v182;
                    k[2] = v146;
                    k[3] = 0;
                    float v209 = (float)((unint64_t)v436[1] + 1);
                    if (!v204 || (float)(v437 * (float)v204) < v209)
                    {
                      BOOL v210 = (v204 & (v204 - 1)) != 0;
                      if (v204 < 3) {
                        BOOL v210 = 1;
                      }
                      unint64_t v211 = v210 | (2 * v204);
                      unint64_t v212 = vcvtps_u32_f32(v209 / v437);
                      if (v211 <= v212) {
                        int8x8_t v213 = (int8x8_t)v212;
                      }
                      else {
                        int8x8_t v213 = (int8x8_t)v211;
                      }
                      if (*(void *)&v213 == 1)
                      {
                        int8x8_t v213 = (int8x8_t)2;
                      }
                      else if ((*(void *)&v213 & (*(void *)&v213 - 1)) != 0)
                      {
                        int8x8_t v213 = (int8x8_t)std::__next_prime(*(void *)&v213);
                        unint64_t v204 = (unint64_t)v435[1];
                      }
                      if (*(void *)&v213 <= v204)
                      {
                        if (*(void *)&v213 < v204)
                        {
                          unint64_t v218 = vcvtps_u32_f32((float)(unint64_t)v436[1] / v437);
                          if (v204 < 3
                            || (uint8x8_t v219 = (uint8x8_t)vcnt_s8((int8x8_t)v204),
                                v219.i16[0] = vaddlv_u8(v219),
                                v219.u32[0] > 1uLL))
                          {
                            unint64_t v218 = std::__next_prime(v218);
                          }
                          else
                          {
                            uint64_t v220 = 1 << -(char)__clz(v218 - 1);
                            if (v218 >= 2) {
                              unint64_t v218 = v220;
                            }
                          }
                          if (*(void *)&v213 <= v218) {
                            int8x8_t v213 = (int8x8_t)v218;
                          }
                          if (*(void *)&v213 >= v204)
                          {
                            unint64_t v204 = (unint64_t)v435[1];
                          }
                          else
                          {
                            if (v213) {
                              goto LABEL_506;
                            }
                            BOOL v221 = v435[0];
                            v435[0] = 0;
                            if (v221) {
                              operator delete(v221);
                            }
                            unint64_t v204 = 0;
                            v435[1] = 0;
                            unsigned int v18 = (llvm::DataLayout *)v406;
                            LOBYTE(v56) = v416;
                            uint64_t v145 = v422;
                          }
                        }
                      }
                      else
                      {
LABEL_506:
                        if (*(void *)&v213 >> 61) {
LABEL_876:
                        }
                          sub_1CB833614();
                        uint64_t v214 = operator new(8 * *(void *)&v213);
                        int v215 = v435[0];
                        v435[0] = v214;
                        if (v215) {
                          operator delete(v215);
                        }
                        uint64_t v216 = 0;
                        v435[1] = (void *)v213;
                        do
                          *((void *)v435[0] + v216++) = 0;
                        while (*(void *)&v213 != v216);
                        v217 = (void **)v436[0];
                        if (v436[0])
                        {
                          unint64_t v229 = *((void *)v436[0] + 1);
                          uint8x8_t v230 = (uint8x8_t)vcnt_s8(v213);
                          v230.i16[0] = vaddlv_u8(v230);
                          if (v230.u32[0] <= 1uLL)
                          {
                            v229 &= *(void *)&v213 - 1;
                          }
                          else if (v229 >= *(void *)&v213)
                          {
                            v229 %= *(void *)&v213;
                          }
                          *((void *)v435[0] + v229) = v436;
                          uint64_t v231 = *v217;
                          if (*v217)
                          {
                            while (2)
                            {
                              unint64_t v232 = v231[1];
                              if (v230.u32[0] <= 1uLL)
                              {
                                v232 &= *(void *)&v213 - 1;
                              }
                              else if (v232 >= *(void *)&v213)
                              {
                                v232 %= *(void *)&v213;
                              }
                              if (v232 != v229)
                              {
                                if (!*((void *)v435[0] + v232))
                                {
                                  *((void *)v435[0] + v232) = v217;
                                  goto LABEL_573;
                                }
                                char *v217 = (void *)*v231;
                                *uint64_t v231 = **((void **)v435[0] + v232);
                                **((void **)v435[0] + v232) = v231;
                                uint64_t v231 = v217;
                              }
                              unint64_t v232 = v229;
LABEL_573:
                              v217 = (void **)v231;
                              uint64_t v231 = (void *)*v231;
                              unint64_t v229 = v232;
                              if (!v231) {
                                break;
                              }
                              continue;
                            }
                          }
                        }
                        unint64_t v204 = (unint64_t)v213;
                      }
                      if ((v204 & (v204 - 1)) != 0)
                      {
                        if (v182 >= v204) {
                          unint64_t v183 = v182 % v204;
                        }
                        else {
                          unint64_t v183 = v182;
                        }
                      }
                      else
                      {
                        unint64_t v183 = (v204 - 1) & v182;
                      }
                    }
                    uint64_t v222 = v435[0];
                    v223 = (void *)*((void *)v435[0] + v183);
                    uint64_t j = v413;
                    if (v223)
                    {
                      void *k = *v223;
                      goto LABEL_541;
                    }
                    void *k = v436[0];
                    v436[0] = k;
                    v222[v183] = v436;
                    if (*k)
                    {
                      unint64_t v224 = *(void *)(*k + 8);
                      if ((v204 & (v204 - 1)) != 0)
                      {
                        if (v224 >= v204) {
                          v224 %= v204;
                        }
                      }
                      else
                      {
                        v224 &= v204 - 1;
                      }
                      v223 = (char *)v435[0] + 8 * v224;
LABEL_541:
                      void *v223 = k;
                    }
                    ++v436[1];
LABEL_543:
                    k[3] = v152;
                    LODWORD(v52) = v428;
LABEL_544:
                    if (++v144 == (unint64_t *)v145)
                    {
                      uint64_t v24 = v425;
                      if (*((void *)&v439 + 1))
                      {
                        int v249 = 32;
                        if (v52)
                        {
                          unint64_t v250 = v418;
                        }
                        else
                        {
                          unint64_t v250 = v418;
                          if (v433[1] <= (void *)1)
                          {
                            if (*((_DWORD *)v433[0] + 4) >= 3u) {
                              int v249 = 16;
                            }
                            else {
                              int v249 = 32;
                            }
                          }
                        }
                        unsigned int v251 = v404;
                        if (!(_BYTE)v56) {
                          unsigned int v251 = v249;
                        }
                        unint64_t v252 = 4 * v404;
                        if (!(_BYTE)v56) {
                          unint64_t v252 = 128;
                        }
                        if (v251 >= v414 && v252 >= v250 && v250 <= v407)
                        {
                          if (v425 && *(unsigned char *)(v425 + 8) == 16)
                          {
                            unsigned int v254 = sub_1CB83544C((uint64_t)v18, v425);
                            if (v253 == 1) {
                            unsigned int v255 = v407 - (v254 >> 3);
                            }
                            if (v407 < v254 >> 3) {
                              unsigned int v255 = 0;
                            }
                          }
                          else
                          {
                            unsigned int v255 = v407 - v250;
                          }
                          unsigned int v407 = v255;
                          for (uint64_t m = (uint64_t *)v439; m; uint64_t m = (uint64_t *)*m)
                          {
                            if (!v435[1]) {
                              goto LABEL_875;
                            }
                            unint64_t v257 = m[2];
                            unint64_t v429 = v257;
                            uint64_t v258 = ((8 * v257) + 8) ^ HIDWORD(v257);
                            unint64_t v259 = 0x9DDFEA08EB382D69
                                 * (HIDWORD(v257) ^ ((0x9DDFEA08EB382D69 * v258) >> 47) ^ (0x9DDFEA08EB382D69 * v258));
                            unint64_t v260 = 0x9DDFEA08EB382D69 * (v259 ^ (v259 >> 47));
                            uint8x8_t v261 = (uint8x8_t)vcnt_s8((int8x8_t)v435[1]);
                            v261.i16[0] = vaddlv_u8(v261);
                            if (v261.u32[0] > 1uLL) {
                              uint64_t v262 = (void *)v260 < v435[1] ? v260 : v260 % (unint64_t)v435[1];
                            }
                            else {
                              uint64_t v262 = v260 & ((unint64_t)v435[1] - 1);
                            }
                            uint64_t v263 = (void *)*((void *)v435[0] + v262);
                            if (!v263 || (v264 = (void *)*v263) == 0) {
LABEL_875:
                            }
                              abort();
                            uint64_t v426 = *((unsigned int *)m + 6);
                            while (1)
                            {
                              unint64_t v265 = v264[1];
                              if (v265 == v260) {
                                break;
                              }
                              if (v261.u32[0] > 1uLL)
                              {
                                if ((void *)v265 >= v435[1]) {
                                  v265 %= (unint64_t)v435[1];
                                }
                              }
                              else
                              {
                                v265 &= (unint64_t)v435[1] - 1;
                              }
                              if (v265 != v262) {
                                goto LABEL_875;
                              }
LABEL_644:
                              v264 = (void *)*v264;
                              if (!v264) {
                                goto LABEL_875;
                              }
                            }
                            if (v264[2] != v429) {
                              goto LABEL_644;
                            }
                            uint64_t v266 = v264[3];
                            int v267 = *(unsigned __int8 *)(v266 + 8);
                            if (v266) {
                              BOOL v268 = v267 == 17;
                            }
                            else {
                              BOOL v268 = 0;
                            }
                            if (v268 || v266 && v267 == 18)
                            {
                              uint64_t v269 = *(unsigned int *)(v266 + 32);
                              int v271 = sub_1CB83544C((uint64_t)v18, *(void *)(v266 + 24));
                              if (v270 == 1) {
                              LODWORD(v272) = (v271 + 7) >> 3;
                              }
                              if (v272 <= 2) {
                                LODWORD(v272) = 2;
                              }
                              if (v271 == -8) {
                                uint64_t v272 = 2;
                              }
                              else {
                                uint64_t v272 = v272;
                              }
                              unint64_t v273 = v269 | (v272 << 32);
                            }
                            else
                            {
                              unint64_t v273 = v412 & 0xFFFFFFFFFFFFFF00;
                            }
                            unint64_t v412 = v273;
                            unsigned int v469 = v471;
                            uint64_t v470 = 0x400000000;
                            unsigned int v274 = *(_DWORD *)(v429 + 20) & 0x7FFFFFF;
                            v275 = v471;
                            if (v274 != 1)
                            {
                              unsigned int v276 = 0;
                              unint64_t v277 = 0;
                              unint64_t v278 = v429 + 32;
                              do
                              {
                                if (v276 >= HIDWORD(v470)) {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                }
                                ++v277;
                                *((void *)v469 + v276) = *(void *)(v278 - 32 * v274);
                                unsigned int v276 = v470 + 1;
                                LODWORD(v470) = v470 + 1;
                                unsigned int v274 = *(_DWORD *)(v429 + 20) & 0x7FFFFFF;
                                v278 += 32;
                              }
                              while (v277 < v274 - 1);
                              v275 = v469;
                            }
                            BOOL v279 = *(llvm::Value **)&v275[8 * v426];
                            if ((v403 & 0x1E) == 0x1C || v403 == 27 && (HIDWORD(v412) < 3 || v412 >= 5))
                            {
                              uint64_t v280 = ***(void ***)v279;
                              uint64_t v281 = *(llvm::Value **)&v275[8 * v426];
                              unint64_t v282 = v429;
                              if (*(_DWORD *)(*(void *)v279 + 8) >> 8 >= 0x11u)
                              {
                                uint64_t v283 = operator new(0x60uLL);
                                v283[13] = v283[13] & 0x38000000 | 1;
                                uint64_t v281 = (llvm::Value *)(v283 + 8);
                                *(void *)uint64_t v283 = 0;
                                *((void *)v283 + 1) = 0;
                                *((void *)v283 + 2) = 0;
                                *((void *)v283 + 3) = v283 + 8;
                                LOWORD(v483) = 257;
                                llvm::TruncInst::TruncInst((llvm::TruncInst *)(v283 + 8), v279, (llvm::Type *)(v280 + 1936), (const char **)&v481, 0);
                                sub_1CC5C6C08((void *)(*(void *)(v429 + 40) + 40), v429 + 24, v281);
                                unint64_t v282 = (unint64_t)v281;
                              }
                              int v284 = operator new(0x60uLL);
                              v284[13] = v284[13] & 0x38000000 | 1;
                              unsigned int v285 = (llvm::Value *)(v284 + 8);
                              *(void *)int v284 = 0;
                              *((void *)v284 + 1) = 0;
                              *((void *)v284 + 2) = 0;
                              *((void *)v284 + 3) = v284 + 8;
                              LOWORD(v483) = 257;
                              llvm::UIToFPInst::UIToFPInst((llvm::UIToFPInst *)(v284 + 8), v281, (llvm::Type *)(v280 + 1624), (const char **)&v481, 0);
                              sub_1CC5C6C08((void *)(*(void *)(v282 + 40) + 40), v282 + 24, v285);
                              int v415 = 1;
                            }
                            else
                            {
                              int v415 = 0;
                              unsigned int v285 = *(llvm::Value **)&v275[8 * v426];
                            }
                            v286 = 0;
                            uint64_t v287 = **(void **)v429;
                            *(void *)&long long v481 = &__p;
                            *((void *)&v481 + 1) = 0x200000000;
                            uint64_t v486 = v287;
                            uint64_t v487 = &v495;
                            unint64_t v488 = v496;
                            uint64_t v489 = 0;
                            int v490 = 0;
                            __int16 v491 = 512;
                            char v492 = 7;
                            uint64_t v484 = 0;
                            unint64_t v485 = 0;
                            uint64_t v493 = 0;
                            uint64_t v494 = 0;
                            v495 = &unk_1F2616E88;
                            v496[0] = &unk_1F2617008;
                            uint64_t v484 = *(void *)(v429 + 40);
                            unint64_t v485 = v429 + 24;
                            v288 = *(char **)(v429 + 48);
                            v452[0] = v288;
                            if (v288)
                            {
                              llvm::MetadataTracking::track((uint64_t)v452, (unsigned __int8 *)v288, 2);
                              v286 = v452[0];
                            }
                            sub_1CB8461A4((uint64_t)&v481, 0, (uint64_t)v286);
                            if (v452[0])
                            {
                              int v390 = *v452[0];
                              if ((v390 - 4) > 0x1E)
                              {
                                if ((v390 - 3) >= 0xFFFFFFFE) {
                                  char v393 = v452[0];
                                }
                                else {
                                  char v393 = 0;
                                }
                                if ((v390 - 3) < 0xFFFFFFFE)
                                {
                                  if (v390 == 3) {
                                    *((void *)v452[0] + 1) = 0;
                                  }
                                  goto LABEL_682;
                                }
                                unint64_t v392 = (unint64_t)(v393 + 8);
                              }
                              else
                              {
                                if ((v452[0][1] & 0x7F) != 2 && !*((_DWORD *)v452[0] + 3)) {
                                  goto LABEL_682;
                                }
                                uint64_t v391 = *((void *)v452[0] + 2);
                                if ((v391 & 4) == 0) {
                                  goto LABEL_682;
                                }
                                unint64_t v392 = v391 & 0xFFFFFFFFFFFFFFF8;
                                if (!v392) {
                                  goto LABEL_682;
                                }
                              }
                              *(void *)&long long v454 = v452;
                              sub_1CC5FA668(v392 + 16, &v454);
                            }
LABEL_682:
                            uint64_t v289 = **(void **)(v429 - 32 * (*(_DWORD *)(v429 + 20) & 0x7FFFFFF));
                            __int16 v453 = 257;
                            unint64_t v290 = (llvm::Instruction *)j;
                            unsigned int v417 = v285;
                            uint64_t v419 = v279;
                            if (*j != v289)
                            {
                              if (*((unsigned __int8 *)j + 16) <= 0x14u)
                              {
                                uint64_t v293 = (*((uint64_t (**)(void **, uint64_t, uint64_t *, uint64_t))*v487 + 28))(v487, 49, j, v289);
                                unint64_t v290 = (llvm::Instruction *)v293;
                                if (v293 && *(unsigned __int8 *)(v293 + 16) >= 0x1Cu)
                                {
                                  (*(void (**)(void *, uint64_t, const char **, uint64_t, unint64_t))(*v488 + 16))(v488, v293, v452, v484, v485);
                                  if (DWORD2(v481))
                                  {
                                    uint64_t v394 = v481;
                                    uint64_t v395 = v481 + 16 * DWORD2(v481);
                                    do
                                    {
                                      llvm::Instruction::setMetadata(v290, *(_DWORD *)v394, *(llvm::MDNode **)(v394 + 8));
                                      v394 += 16;
                                    }
                                    while (v394 != v395);
                                  }
                                  uint64_t j = v413;
                                }
                              }
                              else
                              {
                                v455[8] = 257;
                                unint64_t v290 = llvm::CastInst::Create(49, (uint64_t)j, v289, (const char **)&v454, 0);
                                (*(void (**)(void *, llvm::Instruction *, const char **, uint64_t, unint64_t))(*v488 + 16))(v488, v290, v452, v484, v485);
                                if (DWORD2(v481))
                                {
                                  uint64_t v291 = v481;
                                  uint64_t v292 = v481 + 16 * DWORD2(v481);
                                  do
                                  {
                                    llvm::Instruction::setMetadata(v290, *(_DWORD *)v291, *(llvm::MDNode **)(v291 + 8));
                                    v291 += 16;
                                  }
                                  while (v291 != v292);
                                }
                              }
                            }
                            uint64_t v423 = *(void *)(v429 + 64);
                            uint64_t v294 = sub_1CC7BFF50((uint64_t)&v444, v429);
                            int v411 = v295;
                            if (v294 != v295)
                            {
                              v296 = v294;
                              unsigned int v405 = m;
                              uint64_t v421 = (uint64_t *)v290;
                              while (1)
                              {
                                uint64_t v297 = 0;
                                int v298 = (llvm::Type **)v296[5];
                                uint64_t v299 = *(void *)*v298;
                                *(void *)&long long v454 = v455;
                                *((void *)&v454 + 1) = 0x200000000;
                                uint64_t v458 = v299;
                                int v459 = &v467;
                                v460 = &v468;
                                uint64_t v461 = 0;
                                int v462 = 0;
                                __int16 v463 = 512;
                                char v464 = 7;
                                uint64_t v456 = 0;
                                v457 = 0;
                                uint64_t v465 = 0;
                                uint64_t v466 = 0;
                                int v467 = &unk_1F2616E88;
                                BOOL v468 = &unk_1F2617008;
                                uint64_t v456 = (uint64_t *)v298[5];
                                v457 = (uint64_t **)(v298 + 3);
                                uint64_t v300 = (unsigned __int8 *)v298[6];
                                v430[0] = v300;
                                if (v300)
                                {
                                  llvm::MetadataTracking::track((uint64_t)v430, v300, 2);
                                  uint64_t v297 = v430[0];
                                }
                                sub_1CB8461A4((uint64_t)&v454, 0, v297);
                                if (!v430[0]) {
                                  goto LABEL_695;
                                }
                                int v382 = *(unsigned __int8 *)v430[0];
                                if ((v382 - 4) > 0x1E)
                                {
                                  if ((v382 - 3) >= 0xFFFFFFFE) {
                                    uint64_t v387 = v430[0];
                                  }
                                  else {
                                    uint64_t v387 = 0;
                                  }
                                  if ((v382 - 3) < 0xFFFFFFFE)
                                  {
                                    if (v382 == 3) {
                                      *(void *)(v430[0] + 8) = 0;
                                    }
                                    goto LABEL_695;
                                  }
                                  unint64_t v384 = v387 + 8;
                                }
                                else
                                {
                                  if ((*(unsigned char *)(v430[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v430[0] + 12)) {
                                    goto LABEL_695;
                                  }
                                  uint64_t v383 = *(void *)(v430[0] + 16);
                                  if ((v383 & 4) == 0) {
                                    goto LABEL_695;
                                  }
                                  unint64_t v384 = v383 & 0xFFFFFFFFFFFFFFF8;
                                  if (!v384) {
                                    goto LABEL_695;
                                  }
                                }
                                v452[0] = (const char *)v430;
                                sub_1CC5FA668(v384 + 16, v452);
LABEL_695:
                                if (*((unsigned char *)v298 + 16) == 60)
                                {
                                  uint64_t v302 = *v298;
                                  v303 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v279, 0, 0);
                                  *((void *)v469 + v426) = v303;
                                  char v304 = *(unsigned char *)(v429 + 17);
                                  __int16 v453 = 257;
                                  uint64_t v305 = sub_1CC27CEC0((uint64_t *)&v454, v423, (uint64_t *)v290, (uint64_t *)v469, v470, (uint64_t)v452);
                                  BOOL v306 = (llvm::Instruction *)v305;
                                  if (v305 && *(unsigned char *)(v305 + 16) == 62) {
                                    *(unsigned char *)(v305 + 17) = *(unsigned char *)(v305 + 17) & 0xFD | v304 & 2;
                                  }
                                  int v307 = *((_DWORD *)v298 + 5);
                                  if ((v307 & 0x40000000) != 0) {
                                    unsigned int v308 = (uint64_t **)*(v298 - 1);
                                  }
                                  else {
                                    unsigned int v308 = (uint64_t **)&v298[-4 * (v307 & 0x7FFFFFF)];
                                  }
                                  uint64_t v349 = **v308;
                                  if (*(void *)v305 != v349)
                                  {
                                    __int16 v431 = 257;
                                    if (*(unsigned __int8 *)(v305 + 16) <= 0x14u)
                                    {
                                      uint64_t v352 = (*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v459 + 28))(v459, 49, v305, v349);
                                      BOOL v306 = (llvm::Instruction *)v352;
                                      if (v352 && *(unsigned __int8 *)(v352 + 16) >= 0x1Cu)
                                      {
                                        (*((void (**)(void **, uint64_t, void *, uint64_t *, uint64_t **))*v460
                                         + 2))(v460, v352, v430, v456, v457);
                                        if (DWORD2(v454))
                                        {
                                          uint64_t v388 = v454;
                                          uint64_t v389 = v454 + 16 * DWORD2(v454);
                                          do
                                          {
                                            llvm::Instruction::setMetadata(v306, *(_DWORD *)v388, *(llvm::MDNode **)(v388 + 8));
                                            v388 += 16;
                                          }
                                          while (v388 != v389);
                                        }
                                        unsigned int v285 = v417;
                                        BOOL v279 = v419;
                                      }
                                    }
                                    else
                                    {
                                      __int16 v453 = 257;
                                      BOOL v306 = llvm::CastInst::Create(49, v305, v349, v452, 0);
                                      (*((void (**)(void **, llvm::Instruction *, void *, uint64_t *, uint64_t **))*v460
                                       + 2))(v460, v306, v430, v456, v457);
                                      if (DWORD2(v454))
                                      {
                                        uint64_t v350 = v454;
                                        uint64_t v351 = v454 + 16 * DWORD2(v454);
                                        do
                                        {
                                          llvm::Instruction::setMetadata(v306, *(_DWORD *)v350, *(llvm::MDNode **)(v350 + 8));
                                          v350 += 16;
                                        }
                                        while (v350 != v351);
                                      }
                                    }
                                  }
                                  __int16 v431 = 257;
                                  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v456[7] + 40) + 272), v302, 1);
                                  int v354 = operator new(0x60uLL);
                                  v354[13] = v354[13] & 0x38000000 | 1;
                                  Select = (llvm::Instruction *)(v354 + 8);
                                  *(void *)int v354 = 0;
                                  *((void *)v354 + 1) = 0;
                                  *((void *)v354 + 2) = 0;
                                  *((void *)v354 + 3) = v354 + 8;
                                  __int16 v453 = 257;
                                  llvm::LoadInst::LoadInst((llvm::Value *)(v354 + 8), (uint64_t)v302, (uint64_t)v306, v452, 0, Alignment, 0);
                                  (*((void (**)(void **, llvm::Instruction *, void *, uint64_t *, uint64_t **))*v460
                                   + 2))(v460, Select, v430, v456, v457);
                                  if (DWORD2(v454))
                                  {
                                    uint64_t v385 = v454;
                                    uint64_t v386 = v454 + 16 * DWORD2(v454);
                                    do
                                    {
                                      llvm::Instruction::setMetadata(Select, *(_DWORD *)v385, *(llvm::MDNode **)(v385 + 8));
                                      v385 += 16;
                                    }
                                    while (v385 != v386);
                                  }
                                  if (v412 >= 2)
                                  {
                                    unint64_t v357 = 1;
                                    do
                                    {
                                      uint64_t v358 = *(llvm::ConstantFP ***)v285;
                                      if (v415)
                                      {
                                        unsigned int v359 = llvm::ConstantFP::get(v358, v356, (double)v357);
                                        __int16 v453 = 257;
                                        FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v454, 1, (uint64_t)v285, (uint64_t)v359, (uint64_t)v452, 0, 0);
                                      }
                                      else
                                      {
                                        int v361 = llvm::ConstantInt::get((llvm::ConstantInt *)v358, v357, 0);
                                        __int16 v453 = 257;
                                        FCmpHelper = sub_1CB845F20((uint64_t)&v454, 32, v285, (uint64_t)v361, (uint64_t)v452);
                                      }
                                      uint64_t v362 = FCmpHelper;
                                      uint64_t v363 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v279, v357, 0);
                                      *((void *)v469 + v426) = v363;
                                      char v364 = *(unsigned char *)(v429 + 17);
                                      __int16 v453 = 257;
                                      uint64_t v365 = sub_1CC27CEC0((uint64_t *)&v454, v423, v421, (uint64_t *)v469, v470, (uint64_t)v452);
                                      int v366 = (unsigned __int8 *)v365;
                                      if (v365 && *(unsigned char *)(v365 + 16) == 62) {
                                        *(unsigned char *)(v365 + 17) = *(unsigned char *)(v365 + 17) & 0xFD | v364 & 2;
                                      }
                                      int v367 = *((_DWORD *)v298 + 5);
                                      if ((v367 & 0x40000000) != 0) {
                                        uint64_t v368 = (uint64_t **)*(v298 - 1);
                                      }
                                      else {
                                        uint64_t v368 = (uint64_t **)&v298[-4 * (v367 & 0x7FFFFFF)];
                                      }
                                      uint64_t v369 = **v368;
                                      if (*(void *)v365 != v369)
                                      {
                                        __int16 v431 = 257;
                                        if (*(unsigned __int8 *)(v365 + 16) <= 0x14u)
                                        {
                                          int v366 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v459
                                                                     + 28))(v459, 49, v365, v369);
                                          if (v366) {
                                            BOOL v370 = v366[16] >= 0x1Cu;
                                          }
                                          else {
                                            BOOL v370 = 0;
                                          }
                                          if (v370)
                                          {
                                            (*((void (**)(void **, unsigned __int8 *, void *, uint64_t *, uint64_t **))*v460
                                             + 2))(v460, v366, v430, v456, v457);
                                            if (DWORD2(v454))
                                            {
                                              uint64_t v378 = v454;
                                              uint64_t v379 = v454 + 16 * DWORD2(v454);
                                              do
                                              {
                                                llvm::Instruction::setMetadata((llvm::Instruction *)v366, *(_DWORD *)v378, *(llvm::MDNode **)(v378 + 8));
                                                v378 += 16;
                                              }
                                              while (v378 != v379);
                                            }
                                          }
                                        }
                                        else
                                        {
                                          __int16 v453 = 257;
                                          int v366 = (unsigned __int8 *)llvm::CastInst::Create(49, v365, v369, v452, 0);
                                          (*((void (**)(void **, unsigned __int8 *, void *, uint64_t *, uint64_t **))*v460
                                           + 2))(v460, v366, v430, v456, v457);
                                          if (DWORD2(v454))
                                          {
                                            uint64_t v376 = v454;
                                            uint64_t v377 = v454 + 16 * DWORD2(v454);
                                            do
                                            {
                                              llvm::Instruction::setMetadata((llvm::Instruction *)v366, *(_DWORD *)v376, *(llvm::MDNode **)(v376 + 8));
                                              v376 += 16;
                                            }
                                            while (v376 != v377);
                                          }
                                        }
                                      }
                                      __int16 v431 = 257;
                                      char v371 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v456[7] + 40) + 272), v302, 1);
                                      int v372 = operator new(0x60uLL);
                                      v372[13] = v372[13] & 0x38000000 | 1;
                                      uint64_t v373 = (llvm::Instruction *)(v372 + 8);
                                      *(void *)int v372 = 0;
                                      *((void *)v372 + 1) = 0;
                                      *((void *)v372 + 2) = 0;
                                      *((void *)v372 + 3) = v372 + 8;
                                      __int16 v453 = 257;
                                      llvm::LoadInst::LoadInst((llvm::Value *)(v372 + 8), (uint64_t)v302, (uint64_t)v366, v452, 0, v371, 0);
                                      (*((void (**)(void **, llvm::Instruction *, void *, uint64_t *, uint64_t **))*v460
                                       + 2))(v460, v373, v430, v456, v457);
                                      if (DWORD2(v454))
                                      {
                                        uint64_t v374 = v454;
                                        uint64_t v375 = v454 + 16 * DWORD2(v454);
                                        do
                                        {
                                          llvm::Instruction::setMetadata(v373, *(_DWORD *)v374, *(llvm::MDNode **)(v374 + 8));
                                          v374 += 16;
                                        }
                                        while (v374 != v375);
                                      }
                                      __int16 v453 = 257;
                                      Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v454, v362, v373, Select, (const llvm::Twine *)v452, 0);
                                      ++v357;
                                      unsigned int v285 = v417;
                                      BOOL v279 = v419;
                                    }
                                    while (v357 != v412);
                                  }
                                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v298, Select, (llvm::Value *)1);
                                  unint64_t v290 = (llvm::Instruction *)v421;
                                }
                                else if (v412)
                                {
                                  unint64_t v309 = 0;
                                  do
                                  {
                                    if (v415)
                                    {
                                      int v310 = llvm::ConstantFP::get(*(llvm::ConstantFP ***)v285, v301, (double)v309);
                                      __int16 v453 = 257;
                                      uint64_t v311 = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v454, 1, (uint64_t)v285, (uint64_t)v310, (uint64_t)v452, 0, 0);
                                    }
                                    else
                                    {
                                      unint64_t v312 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v279, v309, 0);
                                      __int16 v453 = 257;
                                      uint64_t v311 = sub_1CB845F20((uint64_t)&v454, 32, v285, (uint64_t)v312, (uint64_t)v452);
                                    }
                                    v313 = v311;
                                    uint64_t v314 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v279, v309, 0);
                                    *((void *)v469 + v426) = v314;
                                    char v315 = *(unsigned char *)(v429 + 17);
                                    __int16 v453 = 257;
                                    uint64_t v316 = sub_1CC27CEC0((uint64_t *)&v454, v423, (uint64_t *)v290, (uint64_t *)v469, v470, (uint64_t)v452);
                                    BOOL v317 = (llvm::Value *)v316;
                                    if (v316 && *(unsigned char *)(v316 + 16) == 62) {
                                      *(unsigned char *)(v316 + 17) = *(unsigned char *)(v316 + 17) & 0xFD | v315 & 2;
                                    }
                                    int v318 = *((_DWORD *)v298 + 5);
                                    if ((v318 & 0x40000000) != 0) {
                                      uint64_t v319 = (uint64_t *)*((void *)*(v298 - 1) + 4);
                                    }
                                    else {
                                      uint64_t v319 = (uint64_t *)v298[-4 * (v318 & 0x7FFFFFF) + 4];
                                    }
                                    uint64_t v320 = *v319;
                                    if (*(void *)v316 != v320)
                                    {
                                      __int16 v431 = 257;
                                      if (*(unsigned __int8 *)(v316 + 16) <= 0x14u)
                                      {
                                        BOOL v317 = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v459
                                                               + 28))(v459, 49, v316, v320);
                                        if (v317) {
                                          BOOL v321 = *((unsigned __int8 *)v317 + 16) >= 0x1Cu;
                                        }
                                        else {
                                          BOOL v321 = 0;
                                        }
                                        if (v321)
                                        {
                                          (*((void (**)(void **, llvm::Value *, void *, uint64_t *, uint64_t **))*v460
                                           + 2))(v460, v317, v430, v456, v457);
                                          if (DWORD2(v454))
                                          {
                                            uint64_t v347 = v454;
                                            uint64_t v348 = v454 + 16 * DWORD2(v454);
                                            do
                                            {
                                              llvm::Instruction::setMetadata(v317, *(_DWORD *)v347, *(llvm::MDNode **)(v347 + 8));
                                              v347 += 16;
                                            }
                                            while (v347 != v348);
                                          }
                                        }
                                      }
                                      else
                                      {
                                        __int16 v453 = 257;
                                        BOOL v317 = llvm::CastInst::Create(49, v316, v320, v452, 0);
                                        (*((void (**)(void **, llvm::Value *, void *, uint64_t *, uint64_t **))*v460
                                         + 2))(v460, v317, v430, v456, v457);
                                        if (DWORD2(v454))
                                        {
                                          uint64_t v344 = v454;
                                          uint64_t v345 = v454 + 16 * DWORD2(v454);
                                          do
                                          {
                                            llvm::Instruction::setMetadata(v317, *(_DWORD *)v344, *(llvm::MDNode **)(v344 + 8));
                                            v344 += 16;
                                          }
                                          while (v344 != v345);
                                        }
                                      }
                                    }
                                    uint64_t v322 = *(llvm::Type **)*(v298 - 8);
                                    __int16 v431 = 257;
                                    char v323 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v456[7] + 40) + 272), v322, 1);
                                    v324 = operator new(0x60uLL);
                                    v324[13] = v324[13] & 0x38000000 | 1;
                                    uint64_t v325 = (llvm::Instruction *)(v324 + 8);
                                    *(void *)v324 = 0;
                                    *((void *)v324 + 1) = 0;
                                    *((void *)v324 + 2) = 0;
                                    *((void *)v324 + 3) = v324 + 8;
                                    __int16 v453 = 257;
                                    llvm::LoadInst::LoadInst((llvm::Value *)(v324 + 8), (uint64_t)v322, (uint64_t)v317, v452, 0, v323, 0);
                                    (*((void (**)(void **, llvm::Instruction *, void *, uint64_t *, uint64_t **))*v460
                                     + 2))(v460, v325, v430, v456, v457);
                                    if (DWORD2(v454))
                                    {
                                      uint64_t v340 = v454;
                                      uint64_t v341 = v454 + 16 * DWORD2(v454);
                                      do
                                      {
                                        llvm::Instruction::setMetadata(v325, *(_DWORD *)v340, *(llvm::MDNode **)(v340 + 8));
                                        v340 += 16;
                                      }
                                      while (v340 != v341);
                                    }
                                    int v326 = *((_DWORD *)v298 + 5);
                                    if ((v326 & 0x40000000) != 0) {
                                      int v327 = (llvm::Value **)*(v298 - 1);
                                    }
                                    else {
                                      int v327 = &v298[-4 * (v326 & 0x7FFFFFF)];
                                    }
                                    BOOL v279 = v419;
                                    uint64_t v328 = *v327;
                                    __int16 v453 = 257;
                                    uint64_t v329 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v454, v313, v328, v325, (const llvm::Twine *)v452, 0);
                                    char v330 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v456[7] + 40) + 272), *(llvm::Type **)v329, 1);
                                    v331 = (char *)operator new(0x80uLL);
                                    *((_DWORD *)v331 + 21) = *((_DWORD *)v331 + 21) & 0x38000000 | 2;
                                    *(void *)v331 = 0;
                                    *((void *)v331 + 2) = 0;
                                    *((void *)v331 + 1) = 0;
                                    *((void *)v331 + 5) = 0;
                                    *((void *)v331 + 6) = 0;
                                    *((void *)v331 + 4) = 0;
                                    uint64_t v332 = (llvm::Value **)(v331 + 32);
                                    *((void *)v331 + 8) = ***(void ***)v329 + 1576;
                                    uint64_t v333 = (llvm::Instruction *)(v331 + 64);
                                    *((void *)v331 + 3) = v331 + 64;
                                    *((void *)v331 + 7) = v331 + 64;
                                    *((void *)v331 + 9) = 0;
                                    v331[80] = 61;
                                    v331[81] = 0;
                                    *((_WORD *)v331 + 41) = 0;
                                    *((_DWORD *)v331 + 21) = 2;
                                    *(_OWORD *)(v331 + 88) = 0u;
                                    *(_OWORD *)(v331 + 104) = 0u;
                                    *((_DWORD *)v331 + 30) = 0;
                                    *(void *)v331 = v329;
                                    uint64_t v336 = *((void *)v329 + 1);
                                    int v335 = (void *)((char *)v329 + 8);
                                    uint64_t v334 = v336;
                                    *((void *)v331 + 1) = v336;
                                    if (v336) {
                                      *(void *)(v334 + 16) = v331 + 8;
                                    }
                                    *((void *)v331 + 2) = v335;
                                    *int v335 = v331;
                                    if (*((void *)v331 + 4))
                                    {
                                      **((void **)v331 + 6) = *((void *)v331 + 5);
                                      uint64_t v346 = *((void *)v331 + 5);
                                      if (v346) {
                                        *(void *)(v346 + 16) = *((void *)v331 + 6);
                                      }
                                    }
                                    *uint64_t v332 = v317;
                                    if (v317)
                                    {
                                      uint64_t v339 = *((void *)v317 + 1);
                                      uint64_t v338 = (llvm::Value ***)((char *)v317 + 8);
                                      uint64_t v337 = v339;
                                      *((void *)v331 + 5) = v339;
                                      if (v339) {
                                        *(void *)(v337 + 16) = v331 + 40;
                                      }
                                      *((void *)v331 + 6) = v338;
                                      *uint64_t v338 = v332;
                                    }
                                    *((_WORD *)v331 + 41) = 2 * (v330 & 0x3F);
                                    v331[124] = 1;
                                    __int16 v453 = 257;
                                    (*((void (**)(void **, llvm::Instruction *, const char **, uint64_t *, uint64_t **))*v460
                                     + 2))(v460, v333, v452, v456, v457);
                                    if (DWORD2(v454))
                                    {
                                      uint64_t v342 = v454;
                                      uint64_t v343 = v454 + 16 * DWORD2(v454);
                                      do
                                      {
                                        llvm::Instruction::setMetadata(v333, *(_DWORD *)v342, *(llvm::MDNode **)(v342 + 8));
                                        v342 += 16;
                                      }
                                      while (v342 != v343);
                                    }
                                    ++v309;
                                    unsigned int v285 = v417;
                                    unint64_t v290 = (llvm::Instruction *)v421;
                                  }
                                  while (v309 != v412);
                                }
                                if (v476 >= (unint64_t)HIDWORD(v476)) {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                }
                                *((void *)v475 + v476) = v298;
                                LODWORD(v476) = v476 + 1;
                                uint64_t j = v413;
                                if ((_WORD *)v454 != v455) {
                                  free((void *)v454);
                                }
                                v380 = (void *)v296[1];
                                if (v380)
                                {
                                  do
                                  {
                                    uint64_t v381 = v380;
                                    v380 = (void *)*v380;
                                  }
                                  while (v380);
                                }
                                else
                                {
                                  do
                                  {
                                    uint64_t v381 = (void *)v296[2];
                                    BOOL v47 = *v381 == (void)v296;
                                    v296 = v381;
                                  }
                                  while (!v47);
                                }
                                v296 = v381;
                                if (v381 == v411)
                                {
                                  char v420 = 1;
                                  uint64_t m = v405;
                                  break;
                                }
                              }
                            }
                            if ((long long *)v481 != &__p) {
                              free((void *)v481);
                            }
                            unsigned int v18 = (llvm::DataLayout *)v406;
                            if (v469 != v471) {
                              free(v469);
                            }
                          }
                        }
LABEL_590:
                        uint64_t v237 = v433[0];
                        if (v433[0])
                        {
                          do
                          {
                            unint64_t v238 = (void *)*v237;
                            operator delete(v237);
                            uint64_t v237 = v238;
                          }
                          while (v238);
                        }
                        uint64_t v239 = v432[0];
                        v432[0] = 0;
                        if (v239) {
                          operator delete(v239);
                        }
                        int v240 = v436[0];
                        if (v436[0])
                        {
                          do
                          {
                            uint64_t v241 = (void *)*v240;
                            operator delete(v240);
                            int v240 = v241;
                          }
                          while (v241);
                        }
                        unsigned int v242 = v435[0];
                        v435[0] = 0;
                        if (v242) {
                          operator delete(v242);
                        }
                        uint64_t v243 = (void *)v439;
                        if ((void)v439)
                        {
                          do
                          {
                            uint64_t v244 = (void *)*v243;
                            operator delete(v243);
                            uint64_t v243 = v244;
                          }
                          while (v244);
                        }
                        uint64_t v245 = (void *)v438;
                        *(void *)&long long v438 = 0;
                        if (v245) {
                          operator delete(v245);
                        }
                        uint64_t v246 = (void *)v442;
                        if ((void)v442)
                        {
                          do
                          {
                            uint64_t v247 = (void *)*v246;
                            operator delete(v246);
                            uint64_t v246 = v247;
                          }
                          while (v247);
                        }
                        int v248 = (void *)v441;
                        *(void *)&long long v441 = 0;
                        if (v248) {
                          operator delete(v248);
                        }
                        goto LABEL_606;
                      }
LABEL_579:
                      int v233 = v418;
                      if (!v24)
                      {
LABEL_588:
                        unsigned int v236 = v407 - v233;
                        goto LABEL_589;
                      }
LABEL_582:
                      if (*(unsigned char *)(v24 + 8) != 16) {
                        goto LABEL_588;
                      }
                      unsigned int v235 = sub_1CB83544C((uint64_t)v18, v24);
                      if (v234 == 1) {
                      unsigned int v236 = v407 - (v235 >> 3);
                      }
                      if (v407 < v235 >> 3) {
                        unsigned int v236 = 0;
                      }
LABEL_589:
                      unsigned int v407 = v236;
                      goto LABEL_590;
                    }
                    goto LABEL_351;
                  }
                }
              }
              uint64_t v121 = *(void *)(v24 + 24);
            }
            uint64_t v130 = *(unsigned int *)(v24 + 32);
            goto LABEL_318;
          }
        }
        uint64_t v116 = v409;
LABEL_607:
        sub_1CD40B1BC(v445[0]);
        if (v472 != v474) {
          free(v472);
        }
        uint64_t v22 = v116 + 8;
        if (v22 == v408) {
          goto LABEL_855;
        }
      }
      while (1)
      {
        while (1)
        {
          uint64_t v39 = *(void *)(v481 + 8 * v38 - 8);
          uint64_t v40 = v38 - 1;
          DWORD2(v481) = v40;
          int v41 = *(unsigned __int8 *)(v39 + 16);
          if (!v39 || v41 != 77) {
            break;
          }
          uint64_t v42 = *(void *)(v39 + 8);
          if (v42)
          {
            uint64_t v43 = 0;
            uint64_t v44 = v42;
            do
            {
              ++v43;
              uint64_t v44 = *(void *)(v44 + 8);
            }
            while (v44);
          }
          else
          {
            uint64_t v43 = 0;
          }
          if (v43 + (unint64_t)v40 > HIDWORD(v481)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v42)
          {
            unint64_t v46 = (void *)(v481 + 8 * v40);
            do
            {
              *v46++ = *(void *)(v42 + 24);
              uint64_t v42 = *(void *)(v42 + 8);
            }
            while (v42);
          }
          unsigned int v38 = v40 + v43;
          DWORD2(v481) = v38;
          if (!v38) {
            goto LABEL_124;
          }
        }
        if (v39)
        {
          unint64_t v45 = (uint64_t *)v39;
          if (v41 == 60) {
            goto LABEL_110;
          }
        }
        if (v39 && v41 == 61) {
          goto LABEL_82;
        }
        if (v39 && v41 == 65)
        {
          unint64_t v45 = *(uint64_t **)(v39 - 32);
          goto LABEL_110;
        }
        if (v39 && v41 == 64)
        {
LABEL_82:
          unint64_t v45 = *(uint64_t **)(v39 - 64);
        }
        else
        {
          if (v41 == 62) {
            goto LABEL_98;
          }
          if (v41 == 5)
          {
            if (*(_WORD *)(v39 + 18) != 34) {
              goto LABEL_108;
            }
LABEL_98:
            BOOL v47 = v41 != 62 || v39 == 0;
            uint64_t v48 = 64;
            if (v47) {
              uint64_t v48 = 24;
            }
            unint64_t v45 = (uint64_t *)(v39 + v48);
            goto LABEL_110;
          }
          if (v39) {
            BOOL v49 = v41 == 3;
          }
          else {
            BOOL v49 = 0;
          }
          if (!v49)
          {
LABEL_108:
            uint64_t v50 = 0;
            goto LABEL_111;
          }
          unint64_t v45 = (uint64_t *)(v39 + 24);
        }
LABEL_110:
        uint64_t v50 = *v45;
LABEL_111:
        if ((sub_1CC7BFCE4(v50, j[8], (uint64_t)v18) & 1) != 0
          || *(unsigned char *)(v39 + 16) == 84
          && (uint64_t v51 = *(void *)(v39 - 32)) != 0
          && !*(unsigned char *)(v51 + 16)
          && *(void *)(v51 + 24) == *(void *)(v39 + 72)
          && (*(unsigned char *)(v51 + 33) & 0x20) != 0
          && (*(_DWORD *)(v51 + 36) - 167) <= 1)
        {
          if (v473 >= (unint64_t)HIDWORD(v473)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v472 + v473) = v39;
          LODWORD(v473) = v473 + 1;
        }
        unsigned int v38 = DWORD2(v481);
        if (!DWORD2(v481)) {
          goto LABEL_124;
        }
      }
    }
  }
  char v420 = 0;
LABEL_855:
  if (v447 == v446) {
    uint64_t v396 = (uint64_t *)((char *)&v448 + 4);
  }
  else {
    uint64_t v396 = &v448;
  }
  uint64_t v397 = *(unsigned int *)v396;
  if (v397)
  {
    uint64_t v398 = 8 * v397;
    uint64_t v399 = v447;
    while (*v399 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v399;
      v398 -= 8;
      if (!v398) {
        goto LABEL_866;
      }
    }
  }
  else
  {
    uint64_t v399 = v447;
  }
  if (v399 != (void *)((char *)v447 + 8 * v397)) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
LABEL_866:
  if (v476) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  if (v447 != v446) {
    free(v447);
  }
  if (v475 != v477) {
    free(v475);
  }
  if (v478 != v480) {
    free(v478);
  }
  return v420 & 1;
}

uint64_t sub_1CC7BFCE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0;
  if (!a1) {
    return result;
  }
  uint64_t v5 = a2;
  if (!a2) {
    return result;
  }
  unsigned int v7 = *(unsigned __int8 *)(a1 + 8);
  if (v7 > 0x11) {
    goto LABEL_21;
  }
  if (((1 << v7) & 0xAC7F) != 0) {
    goto LABEL_5;
  }
  if (((1 << v7) & 0x30000) == 0)
  {
LABEL_21:
    if ((v7 & 0xFE) != 0x12 && v7 != 21) {
      return 0;
    }
  }
  uint64_t result = llvm::Type::isSizedDerivedType(a1, 0);
  if (!result) {
    return result;
  }
LABEL_5:
  unsigned int v8 = *(unsigned __int8 *)(v5 + 8);
  if (v8 > 0x11) {
    goto LABEL_31;
  }
  if (((1 << v8) & 0xAC7F) == 0)
  {
    if (((1 << v8) & 0x30000) != 0) {
      goto LABEL_29;
    }
LABEL_31:
    if ((v8 & 0xFE) == 0x12 || v8 == 21)
    {
LABEL_29:
      uint64_t result = llvm::Type::isSizedDerivedType(v5, 0);
      if (!result) {
        return result;
      }
      goto LABEL_7;
    }
    return 0;
  }
LABEL_7:
  uint64_t v9 = sub_1CB83544C(a3, a1);
  int v11 = v10;
  uint64_t v13 = sub_1CB83544C(a3, v5);
  uint64_t result = 0;
  if (v9 == v13 && v11 == v12)
  {
    if (*(unsigned char *)(a1 + 8) == 17) {
      a1 = **(void **)(a1 + 16);
    }
    if (*(unsigned char *)(v5 + 8) == 17) {
      uint64_t v5 = **(void **)(v5 + 16);
    }
    uint64_t v14 = sub_1CB83544C(a3, a1);
    int v16 = v15;
    return v14 == sub_1CB83544C(a3, v5) && v16 == v17;
  }
  return result;
}

uint64_t sub_1CC7BFE54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 8) != 15 || *(unsigned char *)(a2 + 8) != 15) {
    return 0;
  }
  if (*(void *)(a1 + 24)) {
    return sub_1CC7BFCE4(**(void **)(a1 + 16), **(void **)(a2 + 16), a3);
  }
  return 1;
}

uint64_t *sub_1CC7BFE98(uint64_t **a1, _OWORD *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x30uLL);
  uint64_t v5 = v4;
  *((_OWORD *)v4 + 2) = *a2;
  uint64_t v6 = a1 + 1;
  unsigned int v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v7;
        if (v4[4] >= (unint64_t)v7[4]) {
          break;
        }
        unsigned int v7 = (uint64_t *)*v7;
        unsigned int v8 = v6;
        if (!*v6) {
          goto LABEL_7;
        }
      }
      unsigned int v7 = (uint64_t *)v7[1];
    }
    while (v7);
    unsigned int v8 = v6 + 1;
  }
  else
  {
    unsigned int v8 = a1 + 1;
  }
LABEL_7:
  uint64_t *v4 = 0;
  v4[1] = 0;
  v4[2] = (uint64_t)v6;
  *unsigned int v8 = v4;
  uint64_t v9 = (uint64_t *)**a1;
  if (v9)
  {
    *a1 = v9;
    uint64_t v5 = *v8;
  }
  uint64_t result = sub_1CB8358B8(a1[1], v5);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void *sub_1CC7BFF50(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  while (1)
  {
    unint64_t v4 = v3[4];
    if (v4 <= a2) {
      break;
    }
    uint64_t v2 = v3;
LABEL_4:
    uint64_t v3 = (void *)*v3;
    if (!v3) {
      return v2;
    }
  }
  if (v4 < a2)
  {
    ++v3;
    goto LABEL_4;
  }
  uint64_t v5 = (void *)*v3;
  uint64_t result = v3;
  if (*v3)
  {
    uint64_t result = v3;
    do
    {
      unint64_t v9 = v5[4];
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        int v11 = v5;
      }
      else {
        int v11 = v5 + 1;
      }
      if (v10) {
        uint64_t result = v5;
      }
      uint64_t v5 = (void *)*v11;
    }
    while (*v11);
  }
  unsigned int v7 = (void *)v3[1];
  if (v7)
  {
    do
    {
      if (v7[4] <= a2) {
        unsigned int v8 = v7 + 1;
      }
      else {
        unsigned int v8 = v7;
      }
      unsigned int v7 = (void *)*v8;
    }
    while (*v8);
  }
  return result;
}

void sub_1CC7BFFE8(float *a1, unsigned int a2, int a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  int v12 = operator new(0x18uLL);
  void *v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  float v13 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v14 = a1[8];
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      int8x8_t prime = (int8x8_t)v17;
    }
    else {
      int8x8_t prime = (int8x8_t)v16;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (*(void *)&prime <= v23) {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            sub_1CB833614();
          }
          uint64_t v19 = operator new(8 * *(void *)&prime);
          int v20 = *(void **)a1;
          *(void *)a1 = v19;
          if (v20) {
            operator delete(v20);
          }
          uint64_t v21 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v21++) = 0;
          while (*(void *)&prime != v21);
          uint64_t v22 = (void *)*((void *)a1 + 2);
          if (v22)
          {
            unint64_t v30 = v22[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] <= 1uLL)
            {
              v30 &= *(void *)&prime - 1;
            }
            else if (v30 >= *(void *)&prime)
            {
              v30 %= *(void *)&prime;
            }
            *(void *)(*(void *)a1 + 8 * v30) = a1 + 4;
            uint64_t v32 = (void *)*v22;
            if (*v22)
            {
              while (1)
              {
                unint64_t v33 = v32[1];
                if (v31.u32[0] <= 1uLL)
                {
                  v33 &= *(void *)&prime - 1;
                }
                else if (v33 >= *(void *)&prime)
                {
                  v33 %= *(void *)&prime;
                }
                if (v33 == v30) {
                  goto LABEL_81;
                }
                if (*(void *)(*(void *)a1 + 8 * v33)) {
                  break;
                }
                *(void *)(*(void *)a1 + 8 * v33) = v22;
LABEL_77:
                uint64_t v22 = v32;
                uint64_t v32 = (void *)*v32;
                unint64_t v30 = v33;
                if (!v32) {
                  goto LABEL_36;
                }
              }
              *uint64_t v22 = *v32;
              *uint64_t v32 = **(void **)(*(void *)a1 + 8 * v33);
              **(void **)(*(void *)a1 + 8 * v33) = v32;
              uint64_t v32 = v22;
LABEL_81:
              unint64_t v33 = v30;
              goto LABEL_77;
            }
          }
LABEL_36:
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_52;
        }
        uint64_t v26 = *(void **)a1;
        *(void *)a1 = 0;
        if (v26) {
          operator delete(v26);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_52:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  char v27 = *(void **)a1;
  uint64_t v28 = *(void **)(*(void *)a1 + 8 * v3);
  if (v28)
  {
    void *v12 = *v28;
LABEL_65:
    void *v28 = v12;
    goto LABEL_66;
  }
  void *v12 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v12;
  v27[v3] = a1 + 4;
  if (*v12)
  {
    unint64_t v29 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v29 >= v7) {
        v29 %= v7;
      }
    }
    else
    {
      v29 &= v7 - 1;
    }
    uint64_t v28 = (void *)(*(void *)a1 + 8 * v29);
    goto LABEL_65;
  }
LABEL_66:
  ++*((void *)a1 + 3);
}

void *sub_1CC7C03C0(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v4 = *a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL) {
    uint64_t v6 = v4 < *(void *)&v2 ? *a2 : v4 % *(void *)&v2;
  }
  else {
    uint64_t v6 = (*(void *)&v2 - 1) & v4;
  }
  unint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  uint8x8_t v8 = (void *)*v7;
  if (!v8) {
    return 0;
  }
  while (1)
  {
    unint64_t v9 = v8[1];
    if (v4 == v9) {
      break;
    }
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v2) {
        v9 %= *(void *)&v2;
      }
    }
    else
    {
      v9 &= *(void *)&v2 - 1;
    }
    if (v9 != v6) {
      return 0;
    }
LABEL_15:
    uint64_t result = 0;
    uint8x8_t v8 = (void *)*v8;
    if (!v8) {
      return result;
    }
  }
  if (v8[2] != v4) {
    goto LABEL_15;
  }
  return v8;
}

void *sub_1CC7C0480(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_1CC7C0688(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    void *v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1CC7C0688(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_1CC7C0778(a1, prime);
    }
  }
}

void sub_1CC7C0778(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1CB833614();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] <= 1uLL)
      {
        v8 &= a2 - 1;
      }
      else if (v8 >= a2)
      {
        v8 %= a2;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      BOOL v10 = (void *)*v7;
      if (*v7)
      {
        while (1)
        {
          unint64_t v11 = v10[1];
          if (v9.u32[0] <= 1uLL)
          {
            v11 &= a2 - 1;
          }
          else if (v11 >= a2)
          {
            v11 %= a2;
          }
          if (v11 == v8) {
            goto LABEL_27;
          }
          if (*(void *)(*(void *)a1 + 8 * v11)) {
            break;
          }
          *(void *)(*(void *)a1 + 8 * v11) = v7;
LABEL_19:
          uint64_t v7 = v10;
          BOOL v10 = (void *)*v10;
          unint64_t v8 = v11;
          if (!v10) {
            return;
          }
        }
        void *v7 = *v10;
        void *v10 = **(void **)(*(void *)a1 + 8 * v11);
        **(void **)(*(void *)a1 + 8 * v11) = v10;
        BOOL v10 = v7;
LABEL_27:
        unint64_t v11 = v8;
        goto LABEL_19;
      }
    }
  }
  else
  {
    float v12 = *(void **)a1;
    *(void *)a1 = 0;
    if (v12) {
      operator delete(v12);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_1CC7C08D8(uint64_t a1, uint64_t **a2, const llvm::APInt *a3)
{
  int v93 = (int)a3;
  v130[1] = *MEMORY[0x1E4F143B8];
  int8x8_t v4 = *(uint64_t ***)(a2[5][7] + 40);
  uint64_t v95 = (uint64_t *)**a2;
  unint64_t v5 = *(llvm::ConstantInt **)(*v95 + 1888);
  uint64_t v92 = *v95;
  unsigned int v6 = *(_DWORD *)(*v95 + 1896);
  LODWORD(v116) = v6 >> 8;
  if (v6 >> 8 >= 0x41) {
    operator new[]();
  }
  uint64_t v115 = 0;
  unint64_t v8 = (llvm::Instruction *)llvm::ConstantInt::get(v5, (llvm::LLVMContext *)&v115, a3);
  if (v116 >= 0x41 && v115) {
    MEMORY[0x1D25D9CB0](v115, 0x1000C8000313F17);
  }
  uint8x8_t v9 = *(llvm::ConstantInt **)(v92 + 1936);
  unsigned int v10 = *(_DWORD *)(v92 + 1944);
  LODWORD(v116) = v10 >> 8;
  if (v10 >> 8 >= 0x41) {
    operator new[]();
  }
  uint64_t v115 = 0;
  int v97 = llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v115, v7);
  if (v116 >= 0x41 && v115) {
    MEMORY[0x1D25D9CB0](v115, 0x1000C8000313F17);
  }
  unint64_t v11 = 0;
  uint64_t v12 = **a2;
  uint64_t v115 = (llvm::MDNode **)v117;
  uint64_t v116 = 0x200000000;
  uint64_t v120 = v12;
  uint64_t v121 = &v129;
  unsigned int v122 = v130;
  uint64_t v123 = 0;
  int v124 = 0;
  __int16 v125 = 512;
  char v126 = 7;
  uint64_t v127 = 0;
  uint64_t v128 = 0;
  char v129 = &unk_1F2616E88;
  v130[0] = &unk_1F2617008;
  float v13 = a2[6];
  uint64_t v118 = a2[5];
  BOOL v119 = a2 + 3;
  char v107 = v13;
  if (v13)
  {
    llvm::MetadataTracking::track((uint64_t)&v107, (unsigned __int8 *)v13, 2);
    unint64_t v11 = v107;
  }
  sub_1CB8461A4((uint64_t)&v115, 0, (uint64_t)v11);
  if (v107)
  {
    int v79 = *(unsigned __int8 *)v107;
    if ((v79 - 4) > 0x1E)
    {
      if ((v79 - 3) >= 0xFFFFFFFE) {
        int v85 = v107;
      }
      else {
        int v85 = 0;
      }
      if ((v79 - 3) < 0xFFFFFFFE)
      {
        if (v79 == 3) {
          *((void *)v107 + 1) = 0;
        }
        goto LABEL_8;
      }
      unint64_t v81 = (unint64_t)v85 + 8;
    }
    else
    {
      if ((*((unsigned char *)v107 + 1) & 0x7F) != 2 && !*((_DWORD *)v107 + 3)) {
        goto LABEL_8;
      }
      uint64_t v80 = *((void *)v107 + 2);
      if ((v80 & 4) == 0) {
        goto LABEL_8;
      }
      unint64_t v81 = v80 & 0xFFFFFFFFFFFFFFF8;
      if (!v81) {
        goto LABEL_8;
      }
    }
    int v111 = &v107;
    sub_1CC5FA668(v81 + 16, &v111);
  }
LABEL_8:
  int v15 = *((_DWORD *)a2 + 5);
  if ((v15 & 0x40000000) != 0) {
    unint64_t v16 = *(a2 - 1);
  }
  else {
    unint64_t v16 = (uint64_t *)&a2[-4 * (v15 & 0x7FFFFFF)];
  }
  uint64_t v17 = *v16;
  char v107 = "flg";
  __int16 v110 = 259;
  if (*(void *)v17 != v92 + 1936)
  {
    if (*(unsigned __int8 *)(v17 + 16) > 0x14u)
    {
      __int16 v114 = 257;
      uint64_t v18 = llvm::CastInst::Create(38, v17, v92 + 1936, (const char **)&v111, 0);
      (*(void (**)(void *))(*v122 + 16))(v122);
      if (v116)
      {
        unint64_t v83 = v115;
        uint64_t v84 = (char *)&v115[2 * v116];
        do
        {
          llvm::Instruction::setMetadata(v18, *(_DWORD *)v83, v83[1]);
          v83 += 2;
        }
        while (v83 != (llvm::MDNode **)v84);
      }
LABEL_14:
      uint64_t v17 = (uint64_t)v18;
      goto LABEL_17;
    }
    uint64_t v19 = (*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v121 + 28))(v121, 38, v17, v92 + 1936);
    uint64_t v17 = v19;
    if (v19 && *(unsigned __int8 *)(v19 + 16) >= 0x1Cu)
    {
      uint64_t v18 = (llvm::Instruction *)v19;
      (*(void (**)(void *, uint64_t, void **, uint64_t *, void **))(*v122 + 16))(v122, v19, &v107, v118, v119);
      if (v116)
      {
        uint64_t v88 = v115;
        unint64_t v89 = (char *)&v115[2 * v116];
        do
        {
          llvm::Instruction::setMetadata(v18, *(_DWORD *)v88, v88[1]);
          v88 += 2;
        }
        while (v88 != (llvm::MDNode **)v89);
      }
      goto LABEL_14;
    }
  }
LABEL_17:
  uint64_t v90 = v17;
  if (v93)
  {
    int v20 = *((_DWORD *)a2 + 5);
    if ((v20 & 0x40000000) != 0) {
      uint64_t v21 = (uint64_t **)*(a2 - 1);
    }
    else {
      uint64_t v21 = &a2[-4 * (v20 & 0x7FFFFFF)];
    }
    uint8x8_t v24 = v21[4];
    char v27 = v21 + 8;
    int v28 = 2421;
  }
  else
  {
    uint64_t v22 = *(llvm::ConstantInt **)(v92 + 1936);
    unsigned int v23 = *(_DWORD *)(v92 + 1944);
    LODWORD(v112) = v23 >> 8;
    if (v23 >> 8 >= 0x41) {
      operator new[]();
    }
    int v111 = 0;
    uint8x8_t v24 = llvm::ConstantInt::get(v22, (llvm::LLVMContext *)&v111, v14);
    if (v112 >= 0x41 && v111) {
      MEMORY[0x1D25D9CB0](v111, 0x1000C8000313F17);
    }
    int v25 = *((_DWORD *)a2 + 5);
    if ((v25 & 0x40000000) != 0) {
      uint64_t v26 = (uint64_t **)*(a2 - 1);
    }
    else {
      uint64_t v26 = &a2[-4 * (v25 & 0x7FFFFFF)];
    }
    char v27 = v26 + 4;
    if (*((_DWORD *)*(a2 - 4) + 9) == 2664) {
      int v28 = 2668;
    }
    else {
      int v28 = 2622;
    }
  }
  size_t v94 = (size_t)v24;
  unsigned int v91 = *v27;
  llvm::Intrinsic::getType(*v4, v28, 0, 0);
  unint64_t v29 = (unsigned __int8 *)off_1E6830B58[v28];
  if (v29) {
    unint64_t v30 = (const char *)strlen(off_1E6830B58[v28]);
  }
  else {
    unint64_t v30 = 0;
  }
  Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v4, v28, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)v4, v29, v30, Type, 0);
  if (*(unsigned char *)(v94 + 16) == 16 && *((unsigned char *)v91 + 16) == 16 && *(unsigned char *)(v90 + 16) == 16)
  {
    uint64_t v34 = v32;
    uint64_t v35 = v91 + 3;
    if (*((_DWORD *)v91 + 8) >= 0x41u) {
      uint64_t v35 = (void *)*v35;
    }
    if (*(unsigned char *)(a1 + 28) && *v35 == 2)
    {
      unsigned int v36 = *(llvm::ConstantInt **)(v92 + 1936);
      unsigned int v37 = *(_DWORD *)(v92 + 1944);
      LODWORD(v112) = v37 >> 8;
      if (v37 >> 8 > 0x40) {
        operator new[]();
      }
      if (v37 <= 0xFF) {
        LOBYTE(v38) = 0;
      }
      else {
        unint64_t v38 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v37) + 63);
      }
      int v111 = (void *)(v38 & 3);
      unsigned int v91 = llvm::ConstantInt::get(v36, (llvm::LLVMContext *)&v111, v33);
      if (v112 >= 0x41 && v111) {
        MEMORY[0x1D25D9CB0](v111, 0x1000C8000313F17);
      }
    }
    uint64_t v39 = (void *)(v90 + 24);
    if (*(_DWORD *)(v90 + 32) >= 0x41u) {
      uint64_t v39 = (void *)*v39;
    }
    uint64_t v40 = (void *)*v39;
    if (v40)
    {
      uint64_t v41 = 0;
      uint64_t v42 = ~v40;
      do
      {
        uint64_t v43 = dword_1CFB27054[v41];
        if ((v42 & v43) == 0)
        {
          uint64_t v44 = *(llvm::ConstantInt **)(v92 + 1936);
          unsigned int v45 = *(_DWORD *)(v92 + 1944);
          LODWORD(v112) = v45 >> 8;
          if (v45 >> 8 > 0x40) {
            operator new[]();
          }
          if (v45 <= 0xFF) {
            unint64_t v46 = 0;
          }
          else {
            unint64_t v46 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v45) + 63);
          }
          int v111 = (void *)(v46 & v43);
          BOOL v47 = llvm::ConstantInt::get(v44, (llvm::LLVMContext *)&v111, v33);
          if (v112 >= 0x41 && v111) {
            MEMORY[0x1D25D9CB0](v111, 0x1000C8000313F17);
          }
          if (v93)
          {
            if (v34) {
              uint64_t v48 = *(uint64_t ***)(v34 + 24);
            }
            else {
              uint64_t v48 = 0;
            }
            char v107 = v47;
            uint64_t v108 = v94;
            v109[0] = v91;
            __int16 v114 = 257;
            BOOL v49 = (uint64_t **)v34;
            uint64_t v50 = 3;
          }
          else
          {
            if (v34) {
              uint64_t v48 = *(uint64_t ***)(v34 + 24);
            }
            else {
              uint64_t v48 = 0;
            }
            char v107 = v47;
            uint64_t v108 = (uint64_t)v91;
            __int16 v114 = 257;
            BOOL v49 = (uint64_t **)v34;
            uint64_t v50 = 2;
          }
          sub_1CB845BAC((uint64_t *)&v115, v48, v49, (uint64_t *)&v107, v50, (uint64_t)&v111, 0);
        }
        ++v41;
      }
      while (v41 != 4);
    }
    else
    {
      if (v93)
      {
        if (v34) {
          uint64_t v82 = *(uint64_t ***)(v34 + 24);
        }
        else {
          uint64_t v82 = 0;
        }
        char v107 = (void *)v90;
        uint64_t v108 = v94;
        v109[0] = v91;
        __int16 v114 = 257;
        BOOL v86 = (uint64_t **)v34;
        uint64_t v87 = 3;
      }
      else
      {
        if (v34) {
          uint64_t v82 = *(uint64_t ***)(v34 + 24);
        }
        else {
          uint64_t v82 = 0;
        }
        char v107 = (void *)v90;
        uint64_t v108 = (uint64_t)v91;
        __int16 v114 = 257;
        BOOL v86 = (uint64_t **)v34;
        uint64_t v87 = 2;
      }
      sub_1CB845BAC((uint64_t *)&v115, v82, v86, (uint64_t *)&v107, v87, (uint64_t)&v111, 0);
    }
  }
  else
  {
    uint64_t v51 = 0;
    int v111 = v113;
    uint64_t v112 = 0x400000000;
    do
    {
      uint64_t v52 = dword_1CFB27054[v51];
      uint64_t v99 = 0;
      unint64_t v53 = *(llvm::ConstantInt **)(v92 + 1936);
      unsigned int v54 = *(_DWORD *)(v92 + 1944);
      LODWORD(v108) = v54 >> 8;
      if (v54 >> 8 > 0x40) {
        operator new[]();
      }
      if (v54 <= 0xFF) {
        unint64_t v55 = 0;
      }
      else {
        unint64_t v55 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v54) + 63);
      }
      char v107 = (void *)(v55 & v52);
      uint64_t v56 = (const char *)llvm::ConstantInt::get(v53, (llvm::LLVMContext *)&v107, v33);
      if (v108 >= 0x41 && v107) {
        MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
      }
      uint64_t v99 = v56;
      uint64_t v102 = 0;
      __int16 v110 = 257;
      unint64_t v57 = sub_1CBF52474((uint64_t)&v115, (void *)v90, (uint64_t)v56, (uint64_t)&v107);
      BOOL v103 = "flgCmp";
      __int16 v106 = 259;
      uint64_t v102 = sub_1CB845F20((uint64_t)&v115, 33, v57, (uint64_t)v97, (uint64_t)&v103);
      if (v102 != v8) {
        sub_1CBAF10A8((uint64_t)&v111, &v99, (uint64_t *)&v102);
      }
      ++v51;
    }
    while (v51 != 4);
    uint64_t v58 = 0;
    char v107 = v109;
    uint64_t v108 = 0x400000000;
    do
    {
      uint64_t v59 = dword_1CFB2703C[v58];
      uint64_t v99 = 0;
      unsigned int v60 = *(llvm::ConstantInt **)(v92 + 1936);
      unsigned int v61 = *(_DWORD *)(v92 + 1944);
      LODWORD(v104) = v61 >> 8;
      if (v61 >> 8 > 0x40) {
        operator new[]();
      }
      if (v61 <= 0xFF) {
        unint64_t v62 = 0;
      }
      else {
        unint64_t v62 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v61) + 63);
      }
      BOOL v103 = (void *)(v62 & v59);
      uint64_t v63 = (const char *)llvm::ConstantInt::get(v60, (llvm::LLVMContext *)&v103, v33);
      if (v104 >= 0x41 && v103) {
        MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
      }
      uint64_t v99 = v63;
      uint64_t v102 = 0;
      BOOL v103 = "ordcmp";
      __int16 v106 = 259;
      uint64_t v102 = sub_1CB845F20((uint64_t)&v115, 32, (void *)v94, (uint64_t)v63, (uint64_t)&v103);
      if (v102 != v8) {
        sub_1CBAF10A8((uint64_t)&v107, &v99, (uint64_t *)&v102);
      }
      ++v58;
    }
    while (v58 != 6);
    uint64_t v64 = 0;
    BOOL v103 = v105;
    uint64_t v104 = 0x400000000;
    do
    {
      uint64_t v65 = dword_1CFB27064[v64];
      uint64_t v102 = 0;
      int v66 = *(llvm::ConstantInt **)(v92 + 1936);
      unsigned int v67 = *(_DWORD *)(v92 + 1944);
      unsigned int v100 = v67 >> 8;
      if (v67 >> 8 > 0x40) {
        operator new[]();
      }
      if (v67 <= 0xFF) {
        unint64_t v68 = 0;
      }
      else {
        unint64_t v68 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v67) + 63);
      }
      uint64_t v99 = (const char *)(v68 & v65);
      unint64_t v69 = (llvm::Instruction *)llvm::ConstantInt::get(v66, (llvm::LLVMContext *)&v99, v33);
      if (v100 >= 0x41 && v99) {
        MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
      }
      uint64_t v102 = v69;
      uint64_t v98 = 0;
      uint64_t v99 = "scpcmp";
      __int16 v101 = 259;
      uint64_t v98 = sub_1CB845F20((uint64_t)&v115, 32, v91, (uint64_t)v69, (uint64_t)&v99);
      if (v98 != v8)
      {
        unint64_t v70 = v102;
        uint64_t v71 = (void *)((char *)v102 + 24);
        if (*((_DWORD *)v102 + 8) >= 0x41u) {
          uint64_t v71 = (void *)*v71;
        }
        if (*(unsigned char *)(a1 + 28) && *v71 == 2)
        {
          unint64_t v72 = *(llvm::ConstantInt **)(v92 + 1936);
          unsigned int v73 = *(_DWORD *)(v92 + 1944);
          unsigned int v100 = v73 >> 8;
          if (v73 >> 8 > 0x40) {
            operator new[]();
          }
          if (v73 <= 0xFF) {
            LOBYTE(v74) = 0;
          }
          else {
            unint64_t v74 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v73) + 63);
          }
          uint64_t v99 = (const char *)(v74 & 3);
          unint64_t v70 = (llvm::Instruction *)llvm::ConstantInt::get(v72, (llvm::LLVMContext *)&v99, v33);
          if (v100 >= 0x41 && v99) {
            MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
          }
        }
        uint64_t v102 = v70;
        sub_1CBAF10A8((uint64_t)&v103, &v102, (uint64_t *)&v98);
      }
      ++v64;
    }
    while (v64 != 5);
    uint64_t v75 = (uint64_t)a2[5];
    if (v112)
    {
      uint64_t v99 = "afterMemFlag";
      __int16 v101 = 259;
      llvm::BasicBlock::splitBasicBlock(v75, (uint64_t)v119, (uint64_t)&v99, 0);
    }
    if ((v93 & 1) == 0)
    {
      unint64_t v76 = *(llvm::ConstantInt **)(v92 + 1936);
      unsigned int v77 = *(_DWORD *)(v92 + 1944);
      unsigned int v100 = v77 >> 8;
      if (v77 >> 8 < 0x41)
      {
        uint64_t v99 = 0;
        uint64_t v78 = llvm::ConstantInt::get(v76, (llvm::LLVMContext *)&v99, v33);
        if (v100 >= 0x41 && v99) {
          MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
        }
        __int16 v101 = 257;
        sub_1CB845F20((uint64_t)&v115, 32, (void *)v90, (uint64_t)v78, (uint64_t)&v99);
        uint64_t v99 = "fenceAfter";
        __int16 v101 = 259;
        llvm::BasicBlock::splitBasicBlock(v75, (uint64_t)v119, (uint64_t)&v99, 0);
      }
      operator new[]();
    }
    if (v103 != v105) {
      free(v103);
    }
    if (v107 != v109) {
      free(v107);
    }
    if (v111 != v113) {
      free(v111);
    }
  }
  if (v115 != (llvm::MDNode **)v117) {
    free(v115);
  }
}

void sub_1CC7C2514()
{
}

uint64_t sub_1CC7C25B0(uint64_t a1, uint64_t a2)
{
  v18[8] = *(llvm::Instruction **)MEMORY[0x1E4F143B8];
  int8x8_t v2 = v18;
  unsigned int v17 = 0;
  uint64_t v3 = a2 + 24;
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4 == a2 + 24)
  {
    char v6 = 0;
  }
  else
  {
    int v5 = 0;
    char v6 = 0;
    do
    {
      uint64_t v7 = v4 - 56;
      if (!v4) {
        uint64_t v7 = 0;
      }
      if ((*(unsigned char *)(v7 + 33) & 0x20) != 0)
      {
        int v8 = *(_DWORD *)(v7 + 36);
        if (v8 == 2422 || v8 == 2664 || v8 == 2577)
        {
          int v16 = *(_DWORD *)(v7 + 36);
          uint64_t v10 = *(void *)(v7 + 8);
          if (v10)
          {
            uint64_t v14 = v4;
            int v15 = v2;
            uint64_t v12 = a1;
            uint64_t v13 = v3;
            do
            {
              unint64_t v11 = *(uint64_t ***)(v10 + 24);
              sub_1CC7C08D8(a1, v11, (const llvm::APInt *)(v16 == 2422));
              if (v17 >= 8uLL) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v18[v17] = (llvm::Instruction *)v11;
              int v5 = ++v17;
              uint64_t v10 = *(void *)(v10 + 8);
              char v6 = 1;
              uint64_t v4 = v14;
              int8x8_t v2 = v15;
              a1 = v12;
              uint64_t v3 = v13;
            }
            while (v10);
          }
        }
      }
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != v3);
    if (v5) {
      llvm::Instruction::eraseFromParent(v18[0]);
    }
    if (v18 != v2) {
      free(v18);
    }
  }
  return v6 & 1;
}

uint64_t sub_1CC7C2744()
{
  *(void *)&long long v3 = "HW has multiple L2 caches";
  *((void *)&v3 + 1) = 25;
  char v1 = 0;
  int8x8_t v2 = &v1;
  sub_1CD63F8C4(&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, qword_1EBCDB508, &dword_1CB82C000);
}

void sub_1CC7C27AC(uint64_t a1)
{
}

void sub_1CC7C2858()
{
}

void sub_1CC7C294C(llvm::Pass *this)
{
  *(void *)this = &unk_1F261EA10;
  int8x8_t v2 = (void *)*((void *)this + 6);
  if (v2 != *((void **)this + 5)) {
    free(v2);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC7C29B0(llvm::Pass *this)
{
  *(void *)this = &unk_1F261EA10;
  int8x8_t v2 = (void *)*((void *)this + 6);
  if (v2 != *((void **)this + 5)) {
    free(v2);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC7C2A28(llvm::PassRegistry *a1, uint64_t a2)
{
  v4[0] = &unk_1F2617E40;
  v4[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v4);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::ScalarEvolutionWrapperPass::ID);
}

uint64_t sub_1CC7C2ADC(uint64_t a1, llvm::Function *a2)
{
  v428[24] = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCDB5E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCDB5E0))
  {
    __cxa_guard_release(&qword_1EBCDB5E0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCDB5E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCDB5E8))
  {
    __cxa_guard_release(&qword_1EBCDB5E8);
  }
  unint64_t v4 = -1;
  int v5 = (void *)((char *)a2 + 72);
  do
  {
    int v5 = (void *)v5[1];
    ++v4;
  }
  while (v5 != (void *)((char *)a2 + 72));
  if (v4 < 2)
  {
    char v6 = 0;
    return v6 & 1;
  }
  uint64_t v7 = (llvm::Module *)*((void *)a2 + 5);
  *(void *)(a1 + 32) = (char *)v7 + 272;
  int v8 = *(uint64_t **)(a1 + 8);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (v9 == v10)
  {
LABEL_10:
    uint64_t v11 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v9 != &llvm::LoopInfoWrapperPass::ID)
    {
      v9 += 16;
      if (v9 == v10) {
        goto LABEL_10;
      }
    }
    uint64_t v11 = *(void *)(v9 + 8);
  }
  *(void *)(a1 + 136) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v11 + 96))(v11, &llvm::LoopInfoWrapperPass::ID)+ 32;
  uint64_t v12 = *(uint64_t **)(a1 + 8);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (v13 == v14)
  {
LABEL_15:
    uint64_t v15 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v13 != &llvm::ScalarEvolutionWrapperPass::ID)
    {
      v13 += 16;
      if (v13 == v14) {
        goto LABEL_15;
      }
    }
    uint64_t v15 = *(void *)(v13 + 8);
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v15 + 96))(v15, &llvm::ScalarEvolutionWrapperPass::ID);
  uint64_t v18 = (uint64_t *)(a1 + 40);
  unsigned int v17 = *(void **)(a1 + 40);
  *(void *)(a1 + 144) = *(void *)(v16 + 32);
  uint64_t v19 = *(void **)(a1 + 48);
  if (v19 != v17)
  {
    uint64_t v328 = *(unsigned int *)(a1 + 56);
    if (v328 >= 0x21 && 4 * (*(_DWORD *)(a1 + 60) - *(_DWORD *)(a1 + 64)) < v328)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(a1 + 40));
      goto LABEL_19;
    }
    memset(v19, 255, 8 * v328);
  }
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
LABEL_19:
  sub_1CD10929C(v7, a1 + 40, 0);
  int v20 = *(uint64_t **)(a1 + 8);
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  if (v21 == v22)
  {
LABEL_22:
    uint64_t v23 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v21 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v21 += 16;
      if (v21 == v22) {
        goto LABEL_22;
      }
    }
    uint64_t v23 = *(void *)(v21 + 8);
  }
  uint64_t v24 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v23 + 96))(v23, &llvm::DominatorTreeWrapperPass::ID)
      + 32;
  int v25 = *(uint64_t **)(a1 + 8);
  uint64_t v26 = *v25;
  uint64_t v27 = v25[1];
  if (v26 == v27)
  {
LABEL_27:
    uint64_t v28 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v26 != &llvm::PostDominatorTreeWrapperPass::ID)
    {
      v26 += 16;
      if (v26 == v27) {
        goto LABEL_27;
      }
    }
    uint64_t v28 = *(void *)(v26 + 8);
  }
  uint64_t v341 = a1;
  uint64_t v29 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v28 + 96))(v28, &llvm::PostDominatorTreeWrapperPass::ID);
  uint64_t v380 = 1;
  for (uint64_t i = 8; i != 520; i += 32)
    *(uint64_t *)((char *)&v380 + i) = -4096;
  uint64_t v31 = v29 + 32;
  sub_1CD10AFA4(v7, (uint64_t)&v380);
  uint64_t v342 = v346;
  uint64_t v343 = v346;
  uint64_t v344 = 8;
  int v345 = 0;
  sub_1CD10C594(v7, (uint64_t)&v342);
  uint64_t v32 = *(const llvm::DataLayout **)(a1 + 32);
  v358[0] = &unk_1F261E150;
  v358[1] = sub_1CD114134;
  unsigned int v359 = v358;
  llvm::DivergenceTracker::DivergenceTracker((uint64_t)&v360, a2, v24, v31, v32, (uint64_t)&v380, (uint64_t)v358, 0, (uint64_t)&v342);
  if (v359 == v358)
  {
    (*(void (**)(void *))(v358[0] + 32))(v358);
  }
  else if (v359)
  {
    (*(void (**)(void))(*v359 + 40))();
  }
  uint64_t v353 = v357;
  int v354 = v357;
  uint64_t v355 = 32;
  int v356 = 0;
  uint64_t v348 = v352;
  uint64_t v349 = v352;
  uint64_t v350 = 32;
  int v351 = 0;
  uint64_t v33 = a1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCDB5F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCDB5F0))
  {
    dword_1EBCDB5CC = 15;
    __cxa_guard_release(&qword_1EBCDB5F0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCDB5F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCDB5F8))
  {
    dword_1EBCDB5D0 = 50;
    __cxa_guard_release(&qword_1EBCDB5F8);
  }
  char v347 = 1;
  uint64_t v34 = *((void *)a2 + 10);
  if (v34) {
    uint64_t v35 = (void *)(v34 - 24);
  }
  else {
    uint64_t v35 = 0;
  }
  uint64_t v398 = v35;
  sub_1CC08CA3C((uint64_t *)&v398, (uint64_t)&v412);
  unsigned int v36 = v401;
  uint64_t v398 = v401;
  unsigned int v37 = __src;
  if (__src == v412)
  {
    uint64_t v399 = v401;
    unint64_t v38 = __src;
  }
  else
  {
    unsigned int v329 = v414;
    unsigned int v36 = malloc_type_malloc(8 * v414, 0x4065EBACuLL);
    if (!v36)
    {
      if (v329) {
        goto LABEL_723;
      }
      unsigned int v36 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      uint64_t v33 = v341;
      if (!v36) {
        goto LABEL_723;
      }
    }
    uint64_t v399 = v36;
    unint64_t v38 = v412;
    unsigned int v37 = __src;
  }
  unsigned int v39 = v415;
  v400[0] = v414;
  if (v37 == v38) {
    unsigned int v40 = v415;
  }
  else {
    unsigned int v40 = v414;
  }
  if (v40)
  {
    memmove(v36, v37, 8 * v40);
    unsigned int v39 = v415;
  }
  int v41 = v419;
  v400[1] = v39;
  v400[2] = v416;
  unsigned int v407 = &v409;
  uint64_t v408 = 0x800000000;
  if (v419)
  {
    if (v419 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(&v409, v418, 24 * v419);
    LODWORD(v408) = v41;
  }
  uint64_t v42 = v394;
  uint64_t v389 = (unsigned __int8 **)v394;
  uint64_t v43 = v422;
  if (v422 == v421)
  {
    int v390 = v394;
    uint64_t v44 = v422;
  }
  else
  {
    unsigned int v330 = v423;
    uint64_t v42 = malloc_type_malloc(8 * v423, 0x4065EBACuLL);
    if (!v42)
    {
      if (v330) {
        goto LABEL_723;
      }
      uint64_t v42 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      uint64_t v33 = v341;
      if (!v42) {
        goto LABEL_723;
      }
    }
    int v390 = v42;
    uint64_t v44 = v421;
    uint64_t v43 = v422;
  }
  unsigned int v391 = v423;
  unsigned int v45 = v424;
  if (v43 == v44) {
    unsigned int v46 = v424;
  }
  else {
    unsigned int v46 = v423;
  }
  if (v46)
  {
    memmove(v42, v43, 8 * v46);
    unsigned int v45 = v424;
  }
  unsigned int v392 = v45;
  int v393 = v425;
  uint64_t v395 = v397;
  uint64_t v396 = 0x800000000;
  uint64_t v47 = v427;
  if (v427)
  {
    if (v427 >= 9uLL) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v397, v426, 24 * v427);
    LODWORD(v396) = v47;
  }
  int v48 = 0;
  char v340 = 0;
  while (1)
  {
    if (v408 != v47) {
      goto LABEL_71;
    }
    if (!v47) {
      break;
    }
    BOOL v49 = v395;
    uint64_t v50 = v407;
    while (*(void *)v50 == *(void *)v49 && v50[4] == v49[4])
    {
      v50 += 6;
      v49 += 6;
      if (v50 == (_DWORD *)((char *)v407 + 24 * v47)) {
        goto LABEL_403;
      }
    }
LABEL_71:
    uint64_t v52 = (llvm::BasicBlock *)*((void *)v407 + 3 * v408 - 3);
    uint64_t SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v52);
    if (SinglePredecessor)
    {
      unsigned int v54 = *(uint64_t **)(v33 + 136);
      int v55 = *((_DWORD *)v54 + 4);
      if (!v55) {
        goto LABEL_726;
      }
      uint64_t v56 = *v54;
      unsigned int v57 = v55 - 1;
      uint64_t v58 = v57 & ((v52 >> 4) ^ (v52 >> 9));
      uint64_t v59 = *(llvm::BasicBlock **)(v56 + 16 * v58);
      if (v52 == v59)
      {
LABEL_77:
        uint64_t v62 = *(void *)(v56 + 16 * v58 + 8);
      }
      else
      {
        int v60 = 1;
        while (v59 != (llvm::BasicBlock *)-4096)
        {
          int v61 = v58 + v60++;
          uint64_t v58 = v61 & v57;
          uint64_t v59 = *(llvm::BasicBlock **)(v56 + 16 * v58);
          if (v52 == v59) {
            goto LABEL_77;
          }
        }
        uint64_t v62 = 0;
      }
      uint64_t v63 = v57 & ((SinglePredecessor >> 4) ^ (SinglePredecessor >> 9));
      uint64_t v64 = *(void *)(v56 + 16 * v63);
      if (SinglePredecessor == v64)
      {
LABEL_83:
        uint64_t v67 = *(void *)(v56 + 16 * v63 + 8);
      }
      else
      {
        int v65 = 1;
        while (v64 != -4096)
        {
          int v66 = v63 + v65++;
          uint64_t v63 = v66 & v57;
          uint64_t v64 = *(void *)(v56 + 16 * v63);
          if (SinglePredecessor == v64) {
            goto LABEL_83;
          }
        }
        uint64_t v67 = 0;
      }
      if (v62 == v67)
      {
LABEL_726:
        uint64_t v68 = *((void *)v52 + 6);
        uint64_t v69 = v68 ? v68 - 24 : 0;
        if ((llvm::BasicBlock *)SinglePredecessor != v52 && *(unsigned char *)(v69 + 16) != 83)
        {
          uint64_t v71 = (void *)(SinglePredecessor + 40);
          uint64_t v70 = *(void *)(SinglePredecessor + 40);
          if (v70 != SinglePredecessor + 40)
          {
            uint64_t v72 = v70 - 24;
            if (!v70) {
              uint64_t v72 = 0;
            }
            unsigned int v73 = *(unsigned __int8 *)(v72 + 16) - 40;
            if (v73 < 0xFFFFFFF5) {
              uint64_t v72 = 0;
            }
            if (v70)
            {
              BOOL v74 = *(unsigned char *)(v72 + 16) == 30 && v73 >= 0xFFFFFFF5;
              if (v74 && (*(_DWORD *)(v72 + 20) & 0x7FFFFFF) == 3)
              {
                uint64_t v335 = (uint64_t)a2;
                uint64_t v75 = *(void *)(v72 - 96);
                if (!v75 || *(unsigned char *)(v75 + 16) != 81) {
                  goto LABEL_197;
                }
                int v76 = *(_WORD *)(v75 + 18) & 0x3F;
                if (v76 == 33)
                {
                  unsigned int v77 = *(llvm::BasicBlock **)(v72 - 32);
                }
                else
                {
                  if (v76 != 32) {
                    goto LABEL_197;
                  }
                  unsigned int v77 = *(llvm::BasicBlock **)(v72 - 64);
                }
                if (v77 != v52)
                {
LABEL_197:
                  a2 = (llvm::Function *)v335;
                  goto LABEL_86;
                }
                uint64_t v78 = *(void *)(v75 - 32);
                uint64_t v79 = v376;
                if (v377 == v376)
                {
                  unsigned int v80 = v379;
                  unint64_t v81 = (void *)(v377 + 8 * v379);
                  if (v379)
                  {
                    uint64_t v82 = 0;
                    while (*(void *)(v377 + v82) != v78)
                    {
                      v82 += 8;
                      if (8 * v379 == v82) {
                        goto LABEL_132;
                      }
                    }
                    unint64_t v81 = (void *)(v377 + v82);
                  }
LABEL_132:
                  uint64_t v90 = v377;
                }
                else
                {
                  unsigned int v83 = v378 - 1;
                  unsigned int v84 = (v378 - 1) & ((v78 >> 4) ^ (v78 >> 9));
                  unint64_t v81 = (void *)(v377 + 8 * v84);
                  uint64_t v85 = *v81;
                  if (*v81 == -1)
                  {
                    BOOL v86 = 0;
LABEL_134:
                    if (!v86) {
                      BOOL v86 = v81;
                    }
                    unsigned int v80 = v379;
                    if (*v86 == v78) {
                      unint64_t v81 = v86;
                    }
                    else {
                      unint64_t v81 = (void *)(v377 + 8 * v378);
                    }
                  }
                  else
                  {
                    BOOL v86 = 0;
                    int v87 = 1;
                    while (v85 != v78)
                    {
                      if (v86) {
                        BOOL v88 = 0;
                      }
                      else {
                        BOOL v88 = v85 == -2;
                      }
                      if (v88) {
                        BOOL v86 = v81;
                      }
                      unsigned int v89 = v84 + v87++;
                      unsigned int v84 = v89 & v83;
                      unint64_t v81 = (void *)(v377 + 8 * (v89 & v83));
                      uint64_t v85 = *v81;
                      if (*v81 == -1) {
                        goto LABEL_134;
                      }
                    }
                    unsigned int v80 = v379;
                  }
                  uint64_t v90 = v376;
                }
                if (v377 == v90) {
                  unsigned int v91 = v80;
                }
                else {
                  unsigned int v91 = v378;
                }
                uint64_t v92 = (void *)(v377 + 8 * v91);
                uint64_t v93 = *(void *)(v75 - 64);
                if (v81 != v92)
                {
                  unsigned int v94 = v80;
                  goto LABEL_145;
                }
                if (v377 == v90)
                {
                  int v97 = (void *)(v377 + 8 * v80);
                  if (v80)
                  {
                    uint64_t v98 = 0;
                    while (*(void *)(v377 + v98) != v93)
                    {
                      v98 += 8;
                      if (8 * v80 == v98) {
                        goto LABEL_182;
                      }
                    }
                    int v97 = (void *)(v377 + v98);
LABEL_182:
                    unsigned int v94 = v80;
                  }
                  else
                  {
                    unsigned int v94 = 0;
                  }
                  uint64_t v90 = v377;
                }
                else
                {
                  unsigned int v107 = v378 - 1;
                  unsigned int v108 = (v378 - 1) & ((v93 >> 4) ^ (v93 >> 9));
                  int v97 = (void *)(v377 + 8 * v108);
                  uint64_t v109 = *v97;
                  if (*v97 == -1)
                  {
                    __int16 v110 = 0;
LABEL_249:
                    if (v110) {
                      int v97 = v110;
                    }
                    if (*v97 != v93)
                    {
                      if (v377 == v376) {
                        unsigned int v137 = v80;
                      }
                      else {
                        unsigned int v137 = v378;
                      }
                      int v97 = (void *)(v377 + 8 * v137);
                    }
                  }
                  else
                  {
                    __int16 v110 = 0;
                    int v111 = 1;
                    while (v109 != v93)
                    {
                      if (v110) {
                        BOOL v112 = 0;
                      }
                      else {
                        BOOL v112 = v109 == -2;
                      }
                      if (v112) {
                        __int16 v110 = v97;
                      }
                      unsigned int v113 = v108 + v111++;
                      unsigned int v108 = v113 & v107;
                      int v97 = (void *)(v377 + 8 * (v113 & v107));
                      uint64_t v109 = *v97;
                      if (*v97 == -1) {
                        goto LABEL_249;
                      }
                    }
                  }
                  unsigned int v94 = v80;
                  uint64_t v90 = v376;
                }
                if (v377 == v90) {
                  unsigned int v138 = v94;
                }
                else {
                  unsigned int v138 = v378;
                }
                if (v97 == (void *)(v377 + 8 * v138))
                {
LABEL_145:
                  if (v377 == v90)
                  {
                    uint64_t v95 = (void *)(v377 + 8 * v94);
                    if (v94)
                    {
                      uint64_t v96 = 0;
                      while (*(void *)(v377 + v96) != v93)
                      {
                        v96 += 8;
                        if (8 * v94 == v96) {
                          goto LABEL_169;
                        }
                      }
                      uint64_t v95 = (void *)(v377 + v96);
                    }
LABEL_169:
                    uint64_t v106 = v377;
                  }
                  else
                  {
                    unsigned int v99 = v378 - 1;
                    unsigned int v100 = (v378 - 1) & ((v93 >> 4) ^ (v93 >> 9));
                    uint64_t v95 = (void *)(v377 + 8 * v100);
                    uint64_t v101 = *v95;
                    if (*v95 == -1)
                    {
                      uint64_t v102 = 0;
LABEL_185:
                      if (v102) {
                        uint64_t v95 = v102;
                      }
                      if (*v95 != v93)
                      {
                        if (v377 == v376) {
                          unsigned int v114 = v80;
                        }
                        else {
                          unsigned int v114 = v378;
                        }
                        uint64_t v95 = (void *)(v377 + 8 * v114);
                      }
                    }
                    else
                    {
                      uint64_t v102 = 0;
                      int v103 = 1;
                      while (v101 != v93)
                      {
                        if (v102) {
                          BOOL v104 = 0;
                        }
                        else {
                          BOOL v104 = v101 == -2;
                        }
                        if (v104) {
                          uint64_t v102 = v95;
                        }
                        unsigned int v105 = v100 + v103++;
                        unsigned int v100 = v105 & v99;
                        uint64_t v95 = (void *)(v377 + 8 * (v105 & v99));
                        uint64_t v101 = *v95;
                        if (*v95 == -1) {
                          goto LABEL_185;
                        }
                      }
                    }
                    unsigned int v94 = v80;
                    uint64_t v106 = v376;
                  }
                  if (v377 == v106) {
                    unsigned int v115 = v94;
                  }
                  else {
                    unsigned int v115 = v378;
                  }
                  if (v95 != (void *)(v377 + 8 * v115)) {
                    goto LABEL_197;
                  }
                  if (v377 == v106)
                  {
                    uint64_t v116 = (void *)(v377 + 8 * v94);
                    if (v94)
                    {
                      uint64_t v117 = 0;
                      while (*(void *)(v377 + v117) != v78)
                      {
                        v117 += 8;
                        if (8 * v94 == v117) {
                          goto LABEL_216;
                        }
                      }
                      uint64_t v116 = (void *)(v377 + v117);
LABEL_216:
                      unsigned int v80 = v94;
                    }
                    else
                    {
                      unsigned int v80 = 0;
                    }
                    uint64_t v79 = v377;
                  }
                  else
                  {
                    unsigned int v118 = v378 - 1;
                    unsigned int v119 = (v378 - 1) & ((v78 >> 4) ^ (v78 >> 9));
                    uint64_t v116 = (void *)(v377 + 8 * v119);
                    uint64_t v120 = *v116;
                    if (*v116 == -1)
                    {
                      uint64_t v121 = 0;
LABEL_384:
                      if (v121) {
                        uint64_t v116 = v121;
                      }
                      if (*v116 != v78)
                      {
                        if (v377 == v376) {
                          unsigned int v195 = v80;
                        }
                        else {
                          unsigned int v195 = v378;
                        }
                        uint64_t v116 = (void *)(v377 + 8 * v195);
                      }
                    }
                    else
                    {
                      uint64_t v121 = 0;
                      int v122 = 1;
                      while (v120 != v78)
                      {
                        if (v121) {
                          BOOL v123 = 0;
                        }
                        else {
                          BOOL v123 = v120 == -2;
                        }
                        if (v123) {
                          uint64_t v121 = v116;
                        }
                        unsigned int v124 = v119 + v122++;
                        unsigned int v119 = v124 & v118;
                        uint64_t v116 = (void *)(v377 + 8 * (v124 & v118));
                        uint64_t v120 = *v116;
                        if (*v116 == -1) {
                          goto LABEL_384;
                        }
                      }
                    }
                  }
                  unsigned int v125 = v377 == v79 ? v80 : v378;
                  if (v116 == (void *)(v377 + 8 * v125)) {
                    goto LABEL_197;
                  }
                  if (!v48)
                  {
                    sub_1CC7C4B00(v33, v335, (uint64_t)&v360, (llvm::SmallPtrSetImplBase *)&v353, 2365, &v347);
                    sub_1CC7C4B00(v33, v335, (uint64_t)&v360, (llvm::SmallPtrSetImplBase *)&v348, 2408, &v347);
                    uint64_t v78 = *(void *)(v75 - 32);
                  }
                  char v126 = v353;
                  if (v354 == v353)
                  {
                    int v127 = HIDWORD(v355);
                    uint64_t v128 = (char *)&v354[8 * HIDWORD(v355)];
                    a2 = (llvm::Function *)v335;
                    if (HIDWORD(v355))
                    {
                      uint64_t v129 = 0;
                      while (*(void *)&v354[v129] != v78)
                      {
                        v129 += 8;
                        if (8 * HIDWORD(v355) == v129) {
                          goto LABEL_314;
                        }
                      }
                      uint64_t v128 = (char *)&v354[v129];
                    }
LABEL_314:
                    char v126 = v354;
                  }
                  else
                  {
                    int v130 = v355 - 1;
                    unsigned int v131 = (v355 - 1) & ((v78 >> 4) ^ (v78 >> 9));
                    uint64_t v128 = (char *)&v354[8 * v131];
                    uint64_t v132 = *(void *)v128;
                    a2 = (llvm::Function *)v335;
                    uint64_t v133 = 0;
                    if (*(void *)v128 == -1)
                    {
LABEL_240:
                      if (v133) {
                        uint64_t v128 = v133;
                      }
                      int v127 = HIDWORD(v355);
                      if (*(void *)v128 != v78) {
                        uint64_t v128 = (char *)&v354[8 * v355];
                      }
                    }
                    else
                    {
                      int v134 = 1;
                      while (v132 != v78)
                      {
                        if (v133) {
                          BOOL v135 = 0;
                        }
                        else {
                          BOOL v135 = v132 == -2;
                        }
                        if (v135) {
                          uint64_t v133 = v128;
                        }
                        unsigned int v136 = v131 + v134++;
                        unsigned int v131 = v136 & v130;
                        uint64_t v128 = (char *)&v354[8 * (v136 & v130)];
                        uint64_t v132 = *(void *)v128;
                        if (*(void *)v128 == -1) {
                          goto LABEL_240;
                        }
                      }
                      int v127 = HIDWORD(v355);
                    }
                  }
                  int v166 = v355;
                  if (v354 == v126) {
                    int v166 = v127;
                  }
                  int v167 = v348;
                  if (v349 == v348)
                  {
                    int v168 = HIDWORD(v350);
                    int v169 = &v349[8 * HIDWORD(v350)];
                    if (HIDWORD(v350))
                    {
                      uint64_t v170 = 0;
                      while (*(void *)&v349[v170] != v78)
                      {
                        v170 += 8;
                        if (8 * HIDWORD(v350) == v170) {
                          goto LABEL_336;
                        }
                      }
                      int v169 = &v349[v170];
                    }
LABEL_336:
                    int v167 = v349;
                  }
                  else
                  {
                    int v171 = v350 - 1;
                    unsigned int v172 = (v350 - 1) & ((v78 >> 4) ^ (v78 >> 9));
                    int v169 = &v349[8 * v172];
                    uint64_t v173 = *(void *)v169;
                    if (*(void *)v169 == -1)
                    {
                      unint64_t v174 = 0;
LABEL_398:
                      if (v174) {
                        int v169 = v174;
                      }
                      int v168 = HIDWORD(v350);
                      if (*(void *)v169 != v78) {
                        int v169 = &v349[8 * v350];
                      }
                    }
                    else
                    {
                      unint64_t v174 = 0;
                      int v175 = 1;
                      while (v173 != v78)
                      {
                        if (v174) {
                          BOOL v176 = 0;
                        }
                        else {
                          BOOL v176 = v173 == -2;
                        }
                        if (v176) {
                          unint64_t v174 = v169;
                        }
                        unsigned int v177 = v172 + v175++;
                        unsigned int v172 = v177 & v171;
                        int v169 = &v349[8 * (v177 & v171)];
                        uint64_t v173 = *(void *)v169;
                        if (*(void *)v169 == -1) {
                          goto LABEL_398;
                        }
                      }
                      int v168 = HIDWORD(v350);
                    }
                  }
                  int v178 = v350;
                  if (v349 == v167) {
                    int v178 = v168;
                  }
                  BOOL v164 = v169 != &v349[8 * v178];
                  uint64_t v165 = &dword_1EBCDB5D0;
                  if (v128 == (char *)&v354[8 * v166]) {
                    goto LABEL_340;
                  }
                }
                else
                {
                  if (!v48)
                  {
                    sub_1CC7C4B00(v33, v335, (uint64_t)&v360, (llvm::SmallPtrSetImplBase *)&v353, 2365, &v347);
                    sub_1CC7C4B00(v33, v335, (uint64_t)&v360, (llvm::SmallPtrSetImplBase *)&v348, 2408, &v347);
                    uint64_t v93 = *(void *)(v75 - 64);
                  }
                  int v139 = v353;
                  if (v354 == v353)
                  {
                    int v140 = HIDWORD(v355);
                    BOOL v141 = (char *)&v354[8 * HIDWORD(v355)];
                    a2 = (llvm::Function *)v335;
                    if (HIDWORD(v355))
                    {
                      uint64_t v142 = 0;
                      while (*(void *)&v354[v142] != v93)
                      {
                        v142 += 8;
                        if (8 * HIDWORD(v355) == v142) {
                          goto LABEL_286;
                        }
                      }
                      BOOL v141 = (char *)&v354[v142];
                    }
LABEL_286:
                    int v139 = v354;
                  }
                  else
                  {
                    int v143 = v355 - 1;
                    unsigned int v144 = (v355 - 1) & ((v93 >> 4) ^ (v93 >> 9));
                    BOOL v141 = (char *)&v354[8 * v144];
                    uint64_t v145 = *(void *)v141;
                    a2 = (llvm::Function *)v335;
                    unint64_t v146 = 0;
                    if (*(void *)v141 == -1)
                    {
LABEL_279:
                      if (v146) {
                        BOOL v141 = v146;
                      }
                      int v140 = HIDWORD(v355);
                      if (*(void *)v141 != v93) {
                        BOOL v141 = (char *)&v354[8 * v355];
                      }
                    }
                    else
                    {
                      int v147 = 1;
                      while (v145 != v93)
                      {
                        if (v146) {
                          BOOL v148 = 0;
                        }
                        else {
                          BOOL v148 = v145 == -2;
                        }
                        if (v148) {
                          unint64_t v146 = v141;
                        }
                        unsigned int v149 = v144 + v147++;
                        unsigned int v144 = v149 & v143;
                        BOOL v141 = (char *)&v354[8 * (v149 & v143)];
                        uint64_t v145 = *(void *)v141;
                        if (*(void *)v141 == -1) {
                          goto LABEL_279;
                        }
                      }
                      int v140 = HIDWORD(v355);
                    }
                  }
                  int v150 = v355;
                  if (v354 == v139) {
                    int v150 = v140;
                  }
                  unint64_t v151 = v348;
                  if (v349 == v348)
                  {
                    int v152 = HIDWORD(v350);
                    int v153 = &v349[8 * HIDWORD(v350)];
                    if (HIDWORD(v350))
                    {
                      uint64_t v154 = 0;
                      while (*(void *)&v349[v154] != v93)
                      {
                        v154 += 8;
                        if (8 * HIDWORD(v350) == v154) {
                          goto LABEL_308;
                        }
                      }
                      int v153 = &v349[v154];
                    }
LABEL_308:
                    unint64_t v151 = v349;
                  }
                  else
                  {
                    int v155 = v350 - 1;
                    unsigned int v156 = (v350 - 1) & ((v93 >> 4) ^ (v93 >> 9));
                    int v153 = &v349[8 * v156];
                    uint64_t v157 = *(void *)v153;
                    if (*(void *)v153 == -1)
                    {
                      uint64_t v158 = 0;
LABEL_392:
                      if (v158) {
                        int v153 = v158;
                      }
                      int v152 = HIDWORD(v350);
                      if (*(void *)v153 != v93) {
                        int v153 = &v349[8 * v350];
                      }
                    }
                    else
                    {
                      uint64_t v158 = 0;
                      int v159 = 1;
                      while (v157 != v93)
                      {
                        if (v158) {
                          BOOL v160 = 0;
                        }
                        else {
                          BOOL v160 = v157 == -2;
                        }
                        if (v160) {
                          uint64_t v158 = v153;
                        }
                        unsigned int v161 = v156 + v159++;
                        unsigned int v156 = v161 & v155;
                        int v153 = &v349[8 * (v161 & v155)];
                        uint64_t v157 = *(void *)v153;
                        if (*(void *)v153 == -1) {
                          goto LABEL_392;
                        }
                      }
                      int v152 = HIDWORD(v350);
                    }
                  }
                  char v162 = (char *)&v354[8 * v150];
                  int v163 = v350;
                  if (v349 == v151) {
                    int v163 = v152;
                  }
                  BOOL v164 = v153 != &v349[8 * v163];
                  uint64_t v165 = &dword_1EBCDB5D0;
                  if (v141 == v162)
                  {
LABEL_340:
                    BOOL v179 = !v164 || v347 == 0;
                    uint64_t v165 = &dword_1EBCDB5CC;
                    if (v179)
                    {
                      int v48 = 1;
                      goto LABEL_86;
                    }
                  }
                }
                unint64_t v180 = *v165;
                *(_DWORD *)(v33 + 152) = v180;
                unint64_t v181 = (void *)((char *)v52 + 40);
                unint64_t v182 = (void *)*((void *)v52 + 6);
                if (v182 == (void *)((char *)v52 + 40))
                {
                  unint64_t v183 = 0;
                }
                else
                {
                  unint64_t v183 = 0;
                  uint64_t v184 = (uint64_t)(v182 - 3);
                  if (v182) {
                    uint64_t v185 = v182 - 3;
                  }
                  else {
                    uint64_t v185 = 0;
                  }
                  if (*((unsigned __int8 *)v185 + 16) - 29 >= 0xB)
                  {
                    unint64_t v183 = 0;
                    do
                    {
                      v183 += sub_1CD1098E0(v184, *(void *)(v341 + 32), v18, 1);
                      unint64_t v180 = *(unsigned int *)(v341 + 152);
                      if (v183 >= v180) {
                        break;
                      }
                      unint64_t v182 = (void *)v182[1];
                      if (v182 == v181) {
                        break;
                      }
                      uint64_t v184 = (uint64_t)(v182 - 3);
                      uint64_t v186 = v182 ? (uint64_t)(v182 - 3) : 0;
                    }
                    while (*(unsigned __int8 *)(v186 + 16) - 29 >= 0xB);
                  }
                }
                if (v183 >= v180)
                {
                  char v190 = 0;
                  a2 = (llvm::Function *)v335;
                }
                else
                {
                  unint64_t v187 = (void *)*((void *)v52 + 6);
                  a2 = (llvm::Function *)v335;
                  if (v187 == v181
                    || ((float v188 = (llvm::Instruction *)(v187 - 3), v187) ? (v189 = v187 - 3) : (v189 = 0),
                        *((unsigned __int8 *)v189 + 16) - 29 < 0xB))
                  {
                    char v190 = 0;
                  }
                  else
                  {
                    do
                    {
                      unint64_t v191 = (void *)*v71;
                      if ((void *)*v71 == v71)
                      {
                        uint64_t v193 = 0;
                      }
                      else
                      {
                        if (v191) {
                          v192 = (unsigned __int8 *)(v191 - 3);
                        }
                        else {
                          v192 = 0;
                        }
                        if (v192[16] - 29 >= 0xB) {
                          uint64_t v193 = 0;
                        }
                        else {
                          uint64_t v193 = (llvm::Instruction *)v192;
                        }
                      }
                      unint64_t v187 = (void *)v187[1];
                      llvm::Instruction::moveBefore(v188, v193);
                      if (v187 == v181) {
                        break;
                      }
                      float v188 = (llvm::Instruction *)(v187 - 3);
                      uint64_t v194 = v187 ? (uint64_t)(v187 - 3) : 0;
                    }
                    while (*(unsigned __int8 *)(v194 + 16) - 29 >= 0xB);
                    char v190 = 1;
                  }
                }
                v340 |= v190;
                int v48 = 1;
                uint64_t v33 = v341;
              }
            }
          }
        }
      }
    }
LABEL_86:
    LODWORD(v408) = v408 - 1;
    if (v408) {
      sub_1CC08D090((llvm::SmallPtrSetImplBase *)&v398);
    }
    uint64_t v47 = v396;
  }
LABEL_403:
  if (v395 != v397) {
    free(v395);
  }
  if (v390 != v389) {
    free(v390);
  }
  if (v407 != &v409) {
    free(v407);
  }
  if (v399 != v398) {
    free(v399);
  }
  if (v426 != v428) {
    free(v426);
  }
  if (v422 != v421) {
    free(v422);
  }
  if (v418 != v420) {
    free(v418);
  }
  if (__src != v412) {
    free(__src);
  }
  if (v349 != v348) {
    free(v349);
  }
  if (v354 != v353) {
    free(v354);
  }
  sub_1CC79BE3C((uint64_t)&v360);
  if (v343 != v342) {
    free(v343);
  }
  if ((v380 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v381, 8);
  }
  uint64_t v196 = *((void *)a2 + 10);
  if (v196) {
    uint64_t v197 = v196 - 24;
  }
  else {
    uint64_t v197 = 0;
  }
  unint64_t v412 = (unsigned char *)v197;
  sub_1CC08CA3C((uint64_t *)&v412, (uint64_t)&v360);
  uint8x8_t v198 = v417;
  unint64_t v412 = v417;
  uint64_t v199 = v361;
  if (v361 == v360)
  {
    __src = v417;
    uint64_t v200 = v361;
    goto LABEL_432;
  }
  unsigned int v331 = v362;
  uint8x8_t v198 = malloc_type_malloc(8 * v362, 0x4065EBACuLL);
  if (!v198 && (v331 || (uint8x8_t v198 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
LABEL_723:
  }
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  __src = v198;
  uint64_t v200 = v360;
  uint64_t v199 = v361;
LABEL_432:
  unsigned int v201 = v363;
  unsigned int v414 = v362;
  if (v199 == v200) {
    unsigned int v202 = v363;
  }
  else {
    unsigned int v202 = v362;
  }
  if (v202)
  {
    memmove(v198, v199, 8 * v202);
    unsigned int v201 = v363;
  }
  unsigned int v203 = v366;
  unsigned int v415 = v201;
  int v416 = v364;
  unint64_t v204 = v420;
  unint64_t v418 = v420;
  uint64_t v419 = 0x800000000;
  if (v366)
  {
    if (v366 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v420, v365, 24 * v366);
    LODWORD(v419) = v203;
  }
  uint8x8_t v205 = v385;
  uint64_t v380 = (uint64_t)v385;
  v206 = v369;
  if (v369 == v368)
  {
    uint64_t v381 = v385;
    int v207 = v369;
  }
  else
  {
    unsigned int v332 = v370;
    uint8x8_t v205 = malloc_type_malloc(8 * v370, 0x4065EBACuLL);
    if (!v205)
    {
      if (v332) {
        goto LABEL_723;
      }
      uint8x8_t v205 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v205) {
        goto LABEL_723;
      }
    }
    uint64_t v381 = v205;
    int v207 = v368;
    v206 = v369;
  }
  unsigned int v382 = v370;
  unsigned int v208 = v371;
  if (v206 == v207) {
    unsigned int v209 = v371;
  }
  else {
    unsigned int v209 = v370;
  }
  if (v209)
  {
    memmove(v205, v206, 8 * v209);
    unsigned int v208 = v371;
  }
  unsigned int v383 = v208;
  int v384 = v372;
  BOOL v210 = v388;
  uint64_t v386 = v388;
  uint64_t v387 = 0x800000000;
  uint64_t v211 = v374;
  if (v374)
  {
    if (v374 >= 9uLL) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v388, v373, 24 * v374);
    LODWORD(v387) = v211;
  }
  int v212 = 0;
  int8x8_t v213 = &v410;
  uint64_t v214 = &v411;
  while (2)
  {
    if (v419 != v211)
    {
LABEL_461:
      unint64_t v218 = (llvm::BasicBlock *)*((void *)v418 + 3 * v419 - 3);
      uint64_t v219 = *((void *)a2 + 10);
      if (v219) {
        uint64_t v220 = (llvm::BasicBlock *)(v219 - 24);
      }
      else {
        uint64_t v220 = 0;
      }
      if (v218 == v220) {
        goto LABEL_666;
      }
      BOOL v221 = (void *)*((void *)v218 + 5);
      if (v221 == (void *)((char *)v218 + 40)) {
        goto LABEL_666;
      }
      uint64_t v222 = v221 - 3;
      if (!v221) {
        uint64_t v222 = 0;
      }
      unsigned int v223 = *((unsigned __int8 *)v222 + 16) - 40;
      if (v223 < 0xFFFFFFF5) {
        uint64_t v222 = 0;
      }
      if (!v221) {
        goto LABEL_666;
      }
      BOOL v224 = *((unsigned char *)v222 + 16) == 30 && v223 >= 0xFFFFFFF5;
      if (!v224 || (*((_DWORD *)v222 + 5) & 0x7FFFFFF) != 1) {
        goto LABEL_666;
      }
      uint64_t v339 = v204;
      FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(v218, 1);
      int v226 = FirstNonPHIOrDbg[16];
      if ((v226 - 29) < 0xB) {
        goto LABEL_665;
      }
      uint64_t v338 = FirstNonPHIOrDbg;
      uint64_t v227 = *((void *)v218 + 1);
      if (v227)
      {
        while (1)
        {
          uint64_t v228 = *(void *)(v227 + 24);
          unsigned int v229 = *(unsigned __int8 *)(v228 + 16);
          BOOL v230 = v228 && v229 >= 0x1C;
          if (v230 && v229 - 29 < 0xB) {
            break;
          }
          uint64_t v227 = *(void *)(v227 + 8);
          if (!v227) {
            goto LABEL_488;
          }
        }
        unsigned int v251 = *(llvm::BasicBlock **)(v228 + 40);
        if (v251 != v218)
        {
          unint64_t v252 = *(uint64_t **)(v341 + 136);
          uint64_t v253 = *v252;
          int v254 = *((_DWORD *)v252 + 4);
          unsigned int v255 = v254 - 1;
          uint64_t v256 = (llvm::BasicBlock **)(v253
                                     + 16 * ((v254 - 1) & ((v218 >> 4) ^ (v218 >> 9))));
          while (1)
          {
            if (!v254) {
              goto LABEL_537;
            }
            uint64_t v257 = v255 & ((v251 >> 4) ^ (v251 >> 9));
            uint64_t v258 = *(llvm::BasicBlock **)(v253 + 16 * v257);
            if (v251 == v258)
            {
LABEL_528:
              uint64_t v261 = *(void *)(v253 + 16 * v257 + 8);
            }
            else
            {
              int v259 = 1;
              while (v258 != (llvm::BasicBlock *)-4096)
              {
                int v260 = v257 + v259++;
                uint64_t v257 = v260 & v255;
                uint64_t v258 = *(llvm::BasicBlock **)(v253 + 16 * v257);
                if (v251 == v258) {
                  goto LABEL_528;
                }
              }
              uint64_t v261 = 0;
            }
            uint64_t v262 = *v256;
            uint64_t v263 = v255 & ((v218 >> 4) ^ (v218 >> 9));
            if (v218 == *v256)
            {
LABEL_534:
              uint64_t v266 = *(void *)(v253 + 16 * v263 + 8);
            }
            else
            {
              int v264 = 1;
              LODWORD(v263) = v255 & ((v218 >> 4) ^ (v218 >> 9));
              while (v262 != (llvm::BasicBlock *)-4096)
              {
                int v265 = v263 + v264++;
                uint64_t v263 = v265 & v255;
                uint64_t v262 = *(llvm::BasicBlock **)(v253 + 16 * v263);
                if (v218 == v262) {
                  goto LABEL_534;
                }
              }
              uint64_t v266 = 0;
            }
            if (v261 != v266) {
              break;
            }
            do
            {
LABEL_537:
              uint64_t v227 = *(void *)(v227 + 8);
              if (!v227) {
                goto LABEL_488;
              }
              uint64_t v267 = *(void *)(v227 + 24);
              unsigned int v268 = *(unsigned __int8 *)(v267 + 16);
              if (v267) {
                BOOL v269 = v268 >= 0x1C;
              }
              else {
                BOOL v269 = 0;
              }
            }
            while (!v269 || v268 - 29 > 0xA);
            unsigned int v251 = *(llvm::BasicBlock **)(v267 + 40);
            if (v251 == v218) {
              goto LABEL_665;
            }
          }
        }
        goto LABEL_665;
      }
LABEL_488:
      int v337 = v212;
      unint64_t v232 = FirstNonPHIOrDbg + 24;
      uint64_t v333 = FirstNonPHIOrDbg + 24;
      if ((v226 - 41) > 0x11)
      {
LABEL_549:
        int v271 = v232 - 24;
        if (!v232) {
          int v271 = 0;
        }
        if (v271[16] - 29 > 0xA)
        {
          unint64_t v204 = v339;
          int v212 = v337;
LABEL_666:
          LODWORD(v419) = v419 - 1;
          if (v419) {
            sub_1CC08D090((llvm::SmallPtrSetImplBase *)&v412);
          }
          uint64_t v211 = v387;
          continue;
        }
        int v272 = v337;
        uint64_t v334 = v210;
        *(void *)uint64_t v336 = a2;
        if ((v226 - 59) >= 0xFFFFFFEE) {
          uint64_t v273 = (uint64_t)v338;
        }
        else {
          uint64_t v273 = 0;
        }
        if ((v226 - 59) < 0xFFFFFFEE)
        {
          int v326 = v333;
        }
        else
        {
          int v274 = *(unsigned __int8 *)(v273 + 16);
          if (v274 > 0x39 || ((1 << v274) & 0x300220000000000) == 0)
          {
            int v326 = v333;
            int v272 = v337;
          }
          else
          {
            uint64_t v276 = *(void *)(v273 - 64);
            if (*(unsigned __int8 *)(v276 + 16) <= 0x1Bu) {
              uint64_t v277 = 0;
            }
            else {
              uint64_t v277 = *(void *)(v273 - 64);
            }
            uint64_t v278 = *(void *)(v273 - 32);
            if (*(unsigned __int8 *)(v278 + 16) <= 0x1Bu) {
              uint64_t v279 = 0;
            }
            else {
              uint64_t v279 = *(void *)(v273 - 32);
            }
            if (v277) {
              BOOL v280 = v279 == 0;
            }
            else {
              BOOL v280 = 1;
            }
            if (v280)
            {
              int v326 = v333;
            }
            else
            {
              uint64_t v281 = *(void *)(v277 + 40);
              uint64_t v282 = *(void *)(v273 + 40);
              if (v281 == v282)
              {
                uint64_t v283 = *(void *)(v277 + 40);
              }
              else if (sub_1CC7C5D6C(v279))
              {
                uint64_t v283 = v282;
                if (*(void *)(v279 + 40) == v282)
                {
                  int v284 = (llvm::Value *)v278;
                  uint64_t v278 = v276;
LABEL_581:
                  int v287 = *((_DWORD *)v284 + 5);
                  unsigned int v288 = v287 & 0x7FFFFFF;
                  if ((v287 & 0x7FFFFFF) == 0)
                  {
LABEL_649:
                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v273, v284, (llvm::Value *)1);
                    int v320 = *(_DWORD *)(v273 + 20);
                    if ((v320 & 0x40000000) != 0)
                    {
                      uint64_t v322 = *(void *)(v273 - 8);
                      uint64_t v321 = v320 & 0x7FFFFFF;
                    }
                    else
                    {
                      uint64_t v321 = v320 & 0x7FFFFFF;
                      uint64_t v322 = v273 - 32 * v321;
                    }
                    if (v321)
                    {
                      uint64_t v323 = 32 * v321;
                      v324 = (void **)(v322 + 16);
                      do
                      {
                        if (*(v324 - 2))
                        {
                          *_DWORD *v324 = *(v324 - 1);
                          uint64_t v325 = (uint64_t)*(v324 - 1);
                          if (v325) {
                            *(void *)(v325 + 16) = *v324;
                          }
                        }
                        *(v324 - 2) = 0;
                        v324 += 4;
                        v323 -= 32;
                      }
                      while (v323);
                    }
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                  }
                  int v289 = 0;
                  unint64_t v290 = (void *)(v278 + 8);
                  while (2)
                  {
                    if ((v287 & 0x40000000) != 0) {
                      uint64_t v291 = (_DWORD *)*((void *)v284 - 1);
                    }
                    else {
                      uint64_t v291 = (_DWORD *)((char *)v284 - 32 * v288);
                    }
                    uint64_t v292 = *(void *)&v291[8 * v289];
                    uint64_t v293 = (void *)(v292 + 24);
                    if (*(_DWORD *)(v292 + 32) >= 0x41u) {
                      uint64_t v293 = (void *)*v293;
                    }
                    uint64_t v294 = (void *)*v293;
                    if (v294)
                    {
                      if (v274 != 45 || v294 != (void *)1)
                      {
                        if ((v287 & 0x40000000) != 0) {
                          v295 = (_DWORD *)*((void *)v284 - 1);
                        }
                        else {
                          v295 = (_DWORD *)((char *)v284 - 32 * v288);
                        }
                        uint64_t v299 = 0;
                        uint64_t v300 = *(uint64_t ***)&v295[8 * *((unsigned int *)v284 + 15) + 2 * v289];
                        uint64_t v301 = **v300;
                        uint64_t v398 = v400;
                        uint64_t v399 = (void *)0x200000000;
                        uint64_t v403 = v301;
                        unsigned int v404 = v213;
                        unsigned int v405 = v214;
                        uint64_t v406 = 0;
                        LODWORD(v407) = 0;
                        WORD2(v407) = 512;
                        BYTE6(v407) = 7;
                        uint64_t v408 = 0;
                        uint64_t v409 = 0;
                        int v410 = &unk_1F2616E88;
                        int v411 = &unk_1F2617008;
                        unint64_t v402 = v300 + 5;
                        uint64_t v302 = v300[5];
                        if (v302) {
                          v303 = v302 - 3;
                        }
                        else {
                          v303 = 0;
                        }
                        if (*((unsigned __int8 *)v303 + 16) - 29 >= 0xB) {
                          v303 = 0;
                        }
                        v401[2] = v303[5];
                        unint64_t v402 = (uint64_t **)(v303 + 3);
                        char v304 = (unsigned __int8 *)v303[6];
                        uint64_t v353 = v304;
                        if (v304)
                        {
                          llvm::MetadataTracking::track((uint64_t)&v353, v304, 2);
                          uint64_t v299 = (uint64_t)v353;
                        }
                        sub_1CB8461A4((uint64_t)&v398, 0, v299);
                        if (v353)
                        {
                          int v316 = *v353;
                          if ((v316 - 4) > 0x1E)
                          {
                            if ((v316 - 3) >= 0xFFFFFFFE) {
                              uint64_t v319 = v353;
                            }
                            else {
                              uint64_t v319 = 0;
                            }
                            if ((v316 - 3) < 0xFFFFFFFE)
                            {
                              if (v316 == 3) {
                                *((void *)v353 + 1) = 0;
                              }
                              goto LABEL_614;
                            }
                            unint64_t v318 = (unint64_t)(v319 + 8);
                          }
                          else
                          {
                            if ((v353[1] & 0x7F) != 2 && !*((_DWORD *)v353 + 3)) {
                              goto LABEL_614;
                            }
                            uint64_t v317 = *((void *)v353 + 2);
                            if ((v317 & 4) == 0) {
                              goto LABEL_614;
                            }
                            unint64_t v318 = v317 & 0xFFFFFFFFFFFFFFF8;
                            if (!v318) {
                              goto LABEL_614;
                            }
                          }
                          uint64_t v389 = &v353;
                          sub_1CC5FA668(v318 + 16, &v389);
                        }
LABEL_614:
                        int v305 = *((_DWORD *)v284 + 5);
                        if ((v305 & 0x40000000) != 0) {
                          BOOL v306 = (_DWORD *)*((void *)v284 - 1);
                        }
                        else {
                          BOOL v306 = (_DWORD *)((char *)v284 - 32 * (v305 & 0x7FFFFFF));
                        }
                        uint64_t v307 = *(void *)&v306[8 * v289];
                        v394[0] = 257;
                        unsigned int v308 = sub_1CB844E98((uint64_t)&v398, (v274 - 28), v278, v307, (uint64_t)&v389, 0);
                        int v309 = *((_DWORD *)v284 + 5);
                        if ((v309 & 0x40000000) != 0) {
                          int v310 = (_DWORD *)*((void *)v284 - 1);
                        }
                        else {
                          int v310 = (_DWORD *)((char *)v284 - 32 * (v309 & 0x7FFFFFF));
                        }
                        uint64_t v311 = &v310[8 * v289];
                        if (*(void *)v311)
                        {
                          **((void **)v311 + 2) = *((void *)v311 + 1);
                          uint64_t v315 = *((void *)v311 + 1);
                          if (v315) {
                            *(void *)(v315 + 16) = *((void *)v311 + 2);
                          }
                        }
                        *(void *)uint64_t v311 = v308;
                        if (v308)
                        {
                          uint64_t v312 = *((void *)v308 + 1);
                          v313 = &v310[8 * v289];
                          *((void *)v313 + 1) = v312;
                          if (v312) {
                            *(void *)(v312 + 16) = v313 + 2;
                          }
                          *((void *)v313 + 2) = (char *)v308 + 8;
                          *((void *)v308 + 1) = v311;
                          if (*((unsigned __int8 *)v308 + 16) >= 0x1Cu) {
                            llvm::Instruction::copyIRFlags((uint64_t)v308, v273, 1);
                          }
                        }
                        if (v398 != v400) {
                          free(v398);
                        }
LABEL_627:
                        ++v289;
                        int v287 = *((_DWORD *)v284 + 5);
                        unsigned int v288 = v287 & 0x7FFFFFF;
                        if (v289 == (v287 & 0x7FFFFFF)) {
                          goto LABEL_649;
                        }
                        continue;
                      }
                    }
                    else if (v274 > 55)
                    {
                      if (v274 == 56) {
                        goto LABEL_627;
                      }
                      if (v274 != 57) {
                        goto LABEL_660;
                      }
                    }
                    else if (v274 != 41)
                    {
                      if (v274 != 45) {
                        goto LABEL_660;
                      }
                      goto LABEL_627;
                    }
                    break;
                  }
                  if ((v287 & 0x40000000) != 0) {
                    v296 = (_DWORD *)*((void *)v284 - 1);
                  }
                  else {
                    v296 = (_DWORD *)((char *)v284 - 32 * v288);
                  }
                  uint64_t v297 = &v296[8 * v289];
                  if (*(void *)v297)
                  {
                    **((void **)v297 + 2) = *((void *)v297 + 1);
                    uint64_t v314 = *((void *)v297 + 1);
                    if (v314) {
                      *(void *)(v314 + 16) = *((void *)v297 + 2);
                    }
                  }
                  *(void *)uint64_t v297 = v278;
                  uint64_t v298 = *(void *)(v278 + 8);
                  *((void *)v297 + 1) = v298;
                  if (v298) {
                    *(void *)(v298 + 16) = v297 + 2;
                  }
                  *(void *)&v296[8 * v289 + 4] = v290;
                  *unint64_t v290 = v297;
                  goto LABEL_627;
                }
              }
              else
              {
                uint64_t v283 = v282;
              }
              if (*(void *)(v279 + 40) != v283)
              {
                BOOL v285 = sub_1CC7C5D6C(v277);
                BOOL v286 = v281 != v282 || !v285;
                int v284 = (llvm::Value *)v276;
                if (!v286) {
                  goto LABEL_581;
                }
              }
LABEL_660:
              int v326 = v333;
              BOOL v210 = v334;
              a2 = *(llvm::Function **)v336;
            }
            int v272 = v337;
          }
        }
        int v212 = (v333 != v326) | v272;
LABEL_665:
        unint64_t v204 = v339;
        goto LABEL_666;
      }
      LOBYTE(v233) = FirstNonPHIOrDbg[16];
      v234 = FirstNonPHIOrDbg;
      unint64_t v232 = FirstNonPHIOrDbg + 24;
      while (1)
      {
        if (v233 > 0x39u || ((1 << v233) & 0x300220000000000) == 0) {
          goto LABEL_549;
        }
        unsigned int v235 = v214;
        unsigned int v236 = v213;
        uint64_t v237 = v210;
        int v238 = *((_DWORD *)v234 + 5);
        uint64_t v239 = a2;
        if ((v238 & 0x40000000) != 0) {
          int v240 = (uint64_t *)*((void *)v234 - 1);
        }
        else {
          int v240 = (uint64_t *)&v234[-32 * (v238 & 0x7FFFFFF)];
        }
        if (*(unsigned __int8 *)(*v240 + 16) <= 0x1Bu) {
          uint64_t v241 = 0;
        }
        else {
          uint64_t v241 = *v240;
        }
        uint64_t v242 = v240[4];
        if (*(unsigned __int8 *)(v242 + 16) <= 0x1Bu) {
          uint64_t v243 = 0;
        }
        else {
          uint64_t v243 = v242;
        }
        if (v241) {
          BOOL v244 = v243 == 0;
        }
        else {
          BOOL v244 = 1;
        }
        if (v244)
        {
          BOOL v210 = v237;
          int8x8_t v213 = v236;
          uint64_t v214 = v235;
          goto LABEL_549;
        }
        uint64_t v245 = *(void *)(v241 + 40);
        uint64_t v246 = *((void *)v234 + 5);
        if (v245 == v246)
        {
          uint64_t v247 = *(void *)(v241 + 40);
        }
        else if (sub_1CC7C5D6C(v243))
        {
          uint64_t v247 = v246;
          if (*(void *)(v243 + 40) == v246) {
            goto LABEL_516;
          }
        }
        else
        {
          uint64_t v247 = v246;
        }
        if (*(void *)(v243 + 40) == v247
          || ((BOOL v248 = sub_1CC7C5D6C(v241), v245 == v246) ? (v249 = !v248) : (v249 = 1), v249))
        {
          a2 = v239;
          BOOL v210 = v237;
          int8x8_t v213 = v236;
          uint64_t v214 = v235;
          goto LABEL_549;
        }
LABEL_516:
        unint64_t v232 = (char *)*((void *)v232 + 1);
        v234 = v232 - 24;
        if (v232) {
          unint64_t v250 = v232 - 24;
        }
        else {
          unint64_t v250 = 0;
        }
        int v233 = v250[16];
        a2 = v239;
        BOOL v210 = v237;
        int8x8_t v213 = v236;
        uint64_t v214 = v235;
        if ((v233 - 41) >= 0x12) {
          goto LABEL_549;
        }
      }
    }
    break;
  }
  if (v211)
  {
    int v215 = v386;
    uint64_t v216 = v418;
    while (*(void *)v216 == *(void *)v215 && v216[4] == v215[4])
    {
      v216 += 6;
      v215 += 6;
      if (v216 == (_DWORD *)((char *)v418 + 24 * v211)) {
        goto LABEL_670;
      }
    }
    goto LABEL_461;
  }
LABEL_670:
  if (v386 != v210) {
    free(v386);
  }
  if (v381 != (void *)v380) {
    free(v381);
  }
  if (v418 != v204) {
    free(v418);
  }
  if (__src != v412) {
    free(__src);
  }
  if (v373 != &v375) {
    free(v373);
  }
  if (v369 != v368) {
    free(v369);
  }
  if (v365 != &v367) {
    free(v365);
  }
  if (v361 != v360) {
    free(v361);
  }
  char v6 = v340 | v212;
  return v6 & 1;
}

void sub_1CC7C4B00(uint64_t a1, uint64_t a2, uint64_t a3, llvm::SmallPtrSetImplBase *this, int a5, unsigned char *a6)
{
  v246[10] = *MEMORY[0x1E4F143B8];
  BOOL v244 = v246;
  uint64_t v245 = 0xA00000000;
  unsigned int v229 = v233;
  BOOL v230 = v233;
  uint64_t v231 = 32;
  int v232 = 0;
  uint64_t v6 = a2 + 72;
  uint64_t v7 = *(void *)(a2 + 80);
  if (v7 == a2 + 72) {
    goto LABEL_465;
  }
  while (1)
  {
    uint64_t v12 = v7 - 24;
    if (!v7) {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(void *)(v12 + 48);
    if (v13 != v12 + 40) {
      break;
    }
    uint64_t v7 = *(void *)(v7 + 8);
    if (v7 == v6) {
      goto LABEL_465;
    }
  }
  unsigned int v14 = 0;
  uint64_t v228 = a1;
  while (1)
  {
    if (v13) {
      uint64_t v15 = v13 - 24;
    }
    else {
      uint64_t v15 = 0;
    }
    if (*(unsigned char *)(v15 + 16) != 84) {
      goto LABEL_53;
    }
    uint64_t v16 = *(void *)(v15 - 32);
    if (!v16
      || *(unsigned char *)(v16 + 16)
      || *(void *)(v16 + 24) != *(void *)(v15 + 72)
      || (*(unsigned char *)(v16 + 33) & 0x20) == 0)
    {
      goto LABEL_53;
    }
    int v17 = *(_DWORD *)(*(void *)(v13 - 56) + 36);
    if (v17 == a5)
    {
      uint64_t v18 = *((void *)this + 1);
      uint64_t v19 = *((unsigned int *)this + 5);
      if (v18 == *(void *)this)
      {
        if (v19)
        {
          int v20 = 0;
          uint64_t v21 = 8 * v19;
          uint64_t v22 = (void *)*((void *)this + 1);
          while (*v22 != v15)
          {
            if (*v22 == -2) {
              int v20 = v22;
            }
            ++v22;
            v21 -= 8;
            if (!v21)
            {
              if (!v20) {
                goto LABEL_25;
              }
              *int v20 = v15;
              --*((_DWORD *)this + 6);
              goto LABEL_49;
            }
          }
          goto LABEL_49;
        }
LABEL_25:
        unsigned int v23 = *((_DWORD *)this + 4);
        if (v19 < v23)
        {
          *((_DWORD *)this + 5) = v19 + 1;
          *(void *)(v18 + 8 * v19) = v15;
LABEL_49:
          if (v245 >= (unint64_t)HIDWORD(v245)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v244[v245] = v15;
          unsigned int v14 = v245 + 1;
          LODWORD(v245) = v245 + 1;
          int v17 = *(_DWORD *)(*(void *)(v13 - 56) + 36);
          goto LABEL_51;
        }
      }
      else
      {
        unsigned int v23 = *((_DWORD *)this + 4);
      }
      if (3 * v23 <= 4 * ((int)v19 - *((_DWORD *)this + 6)))
      {
        if (v23 >= 0x40) {
          v23 *= 2;
        }
        else {
          unsigned int v23 = 128;
        }
      }
      else if (v23 - v19 >= v23 >> 3)
      {
        goto LABEL_30;
      }
      llvm::SmallPtrSetImplBase::Grow(this, v23);
      a1 = v228;
      unsigned int v23 = *((_DWORD *)this + 4);
      uint64_t v18 = *((void *)this + 1);
LABEL_30:
      unsigned int v24 = v23 - 1;
      unsigned int v25 = (v23 - 1) & ((v15 >> 4) ^ (v15 >> 9));
      uint64_t v26 = (void *)(v18 + 8 * v25);
      uint64_t v27 = *v26;
      if (*v26 == -1)
      {
        uint64_t v28 = 0;
LABEL_42:
        if (v28) {
          uint64_t v32 = v28;
        }
        else {
          uint64_t v32 = v26;
        }
        if (*v32 != v15)
        {
          if (*v32 == -2) {
            --*((_DWORD *)this + 6);
          }
          else {
            ++*((_DWORD *)this + 5);
          }
          *uint64_t v32 = v15;
        }
      }
      else
      {
        uint64_t v28 = 0;
        int v29 = 1;
        while (v27 != v15)
        {
          if (v28) {
            BOOL v30 = 0;
          }
          else {
            BOOL v30 = v27 == -2;
          }
          if (v30) {
            uint64_t v28 = v26;
          }
          unsigned int v31 = v25 + v29++;
          unsigned int v25 = v31 & v24;
          uint64_t v26 = (void *)(v18 + 8 * (v31 & v24));
          uint64_t v27 = *v26;
          if (*v26 == -1) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_49;
    }
LABEL_51:
    if ((v17 - 2409) <= 1) {
      *a6 = 0;
    }
LABEL_53:
    uint64_t v13 = *(void *)(v13 + 8);
    uint64_t v33 = v7 - 24;
    if (!v7) {
      uint64_t v33 = 0;
    }
    if (v13 == v33 + 40) {
      break;
    }
LABEL_60:
    if (v7 == v6) {
      goto LABEL_69;
    }
  }
  while (1)
  {
    uint64_t v7 = *(void *)(v7 + 8);
    if (v7 == v6) {
      break;
    }
    uint64_t v34 = v7 - 24;
    if (!v7) {
      uint64_t v34 = 0;
    }
    uint64_t v13 = *(void *)(v34 + 48);
    if (v13 != v34 + 40) {
      goto LABEL_60;
    }
  }
LABEL_69:
  if (!v14) {
    goto LABEL_465;
  }
  while (2)
  {
    uint64_t v35 = v244[--v14];
    LODWORD(v245) = v14;
    uint64_t v36 = *(void *)(v35 + 8);
    if (!v36) {
      goto LABEL_464;
    }
    while (2)
    {
      unint64_t v37 = *(void *)(v36 + 24);
      unsigned int v38 = *(unsigned __int8 *)(v37 + 16);
      if (v37) {
        BOOL v39 = v38 >= 0x1C;
      }
      else {
        BOOL v39 = 0;
      }
      if (v39)
      {
        BOOL v40 = v38 - 41 > 0x2A || ((1 << (v38 - 41)) & 0x40000000005) == 0;
        if (!v40 || v38 - 66 <= 0xC)
        {
          int v41 = v230;
          uint64_t v42 = HIDWORD(v231);
          if (v230 == v229)
          {
            if (HIDWORD(v231))
            {
              uint64_t v43 = 0;
              uint64_t v44 = 8 * HIDWORD(v231);
              unsigned int v45 = (unint64_t *)v230;
              while (*v45 != v37)
              {
                if (*v45 == -2) {
                  uint64_t v43 = v45;
                }
                ++v45;
                v44 -= 8;
                if (!v44)
                {
                  if (!v43) {
                    goto LABEL_89;
                  }
                  unint64_t *v43 = v37;
                  --v232;
                  goto LABEL_115;
                }
              }
              goto LABEL_75;
            }
LABEL_89:
            unsigned int v46 = v231;
            if (HIDWORD(v231) < v231)
            {
              ++HIDWORD(v231);
              *(void *)&v230[8 * v42] = v37;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v46 = v231;
          }
          if (3 * v46 <= 4 * (HIDWORD(v231) - v232))
          {
            if (v46 >= 0x40) {
              v46 *= 2;
            }
            else {
              unsigned int v46 = 128;
            }
          }
          else if (v46 - HIDWORD(v231) >= v46 >> 3)
          {
            goto LABEL_94;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v229, v46);
          a1 = v228;
          unsigned int v46 = v231;
          int v41 = v230;
LABEL_94:
          unsigned int v47 = v46 - 1;
          unsigned int v48 = (v46 - 1) & ((v37 >> 4) ^ (v37 >> 9));
          BOOL v49 = &v41[8 * v48];
          uint64_t v50 = *(void *)v49;
          if (*(void *)v49 != -1)
          {
            uint64_t v51 = 0;
            int v52 = 1;
            while (v50 != v37)
            {
              if (v51) {
                BOOL v53 = 0;
              }
              else {
                BOOL v53 = v50 == -2;
              }
              if (v53) {
                uint64_t v51 = v49;
              }
              unsigned int v54 = v48 + v52++;
              unsigned int v48 = v54 & v47;
              BOOL v49 = &v41[8 * (v54 & v47)];
              uint64_t v50 = *(void *)v49;
              if (*(void *)v49 == -1) {
                goto LABEL_108;
              }
            }
            goto LABEL_75;
          }
          uint64_t v51 = 0;
LABEL_108:
          int v55 = (unint64_t *)(v51 ? v51 : v49);
          if (*v55 != v37)
          {
            if (*v55 == -2) {
              --v232;
            }
            else {
              ++HIDWORD(v231);
            }
            *int v55 = v37;
            unsigned int v38 = *(unsigned __int8 *)(v37 + 16);
LABEL_115:
            if (v38 == 83)
            {
              uint64_t v56 = *(uint64_t **)(a1 + 136);
              int v57 = *((_DWORD *)v56 + 4);
              if (!v57) {
                goto LABEL_131;
              }
              uint64_t v58 = *(void *)(v37 + 40);
              uint64_t v59 = *v56;
              unsigned int v60 = v57 - 1;
              uint64_t v61 = ((v58 >> 4) ^ (v58 >> 9)) & (v57 - 1);
              uint64_t v62 = *(void *)(v59 + 16 * v61);
              if (v58 != v62)
              {
                int v63 = 1;
                while (v62 != -4096)
                {
                  int v64 = v61 + v63++;
                  uint64_t v61 = v64 & v60;
                  uint64_t v62 = *(void *)(v59 + 16 * v61);
                  if (v58 == v62) {
                    goto LABEL_121;
                  }
                }
LABEL_131:
                int v72 = *(_DWORD *)(v37 + 20);
                uint64_t v73 = v72 & 0x7FFFFFF;
                if ((v72 & 0x7FFFFFF) == 0) {
                  goto LABEL_75;
                }
                unsigned int v74 = 0;
                uint64_t v76 = *(void *)this;
                uint64_t v75 = *((void *)this + 1);
                uint64_t v77 = *((unsigned int *)this + 4);
                uint64_t v78 = *((unsigned int *)this + 5);
                int v79 = v77 - 1;
                do
                {
                  while (1)
                  {
                    unint64_t v80 = v37 - 32 * v73;
                    if ((v72 & 0x40000000) != 0) {
                      unint64_t v80 = *(void *)(v37 - 8);
                    }
                    uint64_t v81 = *(void *)(v80 + 32 * v74++);
                    if (v81 == v35) {
                      break;
                    }
                    if (v75 == v76)
                    {
                      if (v78)
                      {
                        uint64_t v82 = 0;
                        while (*(void *)(v75 + v82) != v81)
                        {
                          v82 += 8;
                          if (8 * *((unsigned int *)this + 5) == v82)
                          {
                            unsigned int v83 = *((_DWORD *)this + 5);
                            goto LABEL_158;
                          }
                        }
                        uint64_t v92 = (void *)(v75 + v82);
                        unsigned int v83 = *((_DWORD *)this + 5);
                        uint64_t v93 = *((void *)this + 1);
                      }
                      else
                      {
                        unsigned int v83 = 0;
LABEL_158:
                        uint64_t v93 = *((void *)this + 1);
                        uint64_t v92 = (void *)(v75 + 8 * v78);
                      }
                    }
                    else
                    {
                      unsigned int v84 = v79 & ((v81 >> 4) ^ (v81 >> 9));
                      uint64_t v85 = (void *)(v75 + 8 * v84);
                      uint64_t v86 = *v85;
                      if (*v85 == -1)
                      {
                        int v87 = 0;
LABEL_160:
                        if (v87) {
                          uint64_t v85 = v87;
                        }
                        uint64_t v91 = *v85;
                      }
                      else
                      {
                        int v87 = 0;
                        int v88 = 1;
                        while (v86 != v81)
                        {
                          if (v87) {
                            BOOL v89 = 0;
                          }
                          else {
                            BOOL v89 = v86 == -2;
                          }
                          if (v89) {
                            int v87 = v85;
                          }
                          unsigned int v90 = v84 + v88++;
                          unsigned int v84 = v90 & v79;
                          uint64_t v85 = (void *)(v75 + 8 * (v90 & v79));
                          uint64_t v86 = *v85;
                          if (*v85 == -1) {
                            goto LABEL_160;
                          }
                        }
                        uint64_t v91 = v81;
                      }
                      if (v91 == v81) {
                        uint64_t v92 = v85;
                      }
                      else {
                        uint64_t v92 = (void *)(v75 + 8 * v77);
                      }
                      unsigned int v83 = *((_DWORD *)this + 5);
                      uint64_t v93 = *(void *)this;
                    }
                    if (v75 != v93) {
                      unsigned int v83 = *((_DWORD *)this + 4);
                    }
                    if (v92 == (void *)(v75 + 8 * v83) || v74 == v73)
                    {
                      if (!v74) {
                        goto LABEL_75;
                      }
                      goto LABEL_228;
                    }
                  }
                }
                while (v74 != v73);
                unsigned int v74 = v72 & 0x7FFFFFF;
                if (!v73) {
                  goto LABEL_75;
                }
LABEL_228:
                if (v74 != v73) {
                  goto LABEL_75;
                }
                if (v75 == v76)
                {
                  if (v78)
                  {
                    uint64_t v120 = 0;
                    uint64_t v121 = 8 * v78;
                    int v122 = (unint64_t *)*((void *)this + 1);
                    while (*v122 != v37)
                    {
                      if (*v122 == -2) {
                        uint64_t v120 = v122;
                      }
                      ++v122;
                      v121 -= 8;
                      if (!v121)
                      {
                        if (!v120) {
                          goto LABEL_237;
                        }
                        unint64_t *v120 = v37;
                        goto LABEL_307;
                      }
                    }
                    goto LABEL_279;
                  }
LABEL_237:
                  if (v77 > v78)
                  {
                    *((_DWORD *)this + 5) = v78 + 1;
                    *(void *)(v75 + 8 * v78) = v37;
                    goto LABEL_279;
                  }
                }
                if (3 * (int)v77 <= (4 * (v78 - *((_DWORD *)this + 6))))
                {
                  if (v77 >= 0x40) {
                    LODWORD(v77) = 2 * v77;
                  }
                  else {
                    LODWORD(v77) = 128;
                  }
                }
                else if ((int)v77 - (int)v78 >= v77 >> 3)
                {
                  goto LABEL_255;
                }
                llvm::SmallPtrSetImplBase::Grow(this, v77);
                a1 = v228;
                uint64_t v75 = *((void *)this + 1);
                int v79 = *((_DWORD *)this + 4) - 1;
LABEL_255:
                unsigned int v131 = v79 & ((v37 >> 4) ^ (v37 >> 9));
                uint64_t v132 = (unint64_t *)(v75 + 8 * v131);
                unint64_t v133 = *v132;
                if (*v132 != -1)
                {
                  int v134 = 0;
                  int v135 = 1;
                  while (v133 != v37)
                  {
                    if (v134) {
                      BOOL v136 = 0;
                    }
                    else {
                      BOOL v136 = v133 == -2;
                    }
                    if (v136) {
                      int v134 = v132;
                    }
                    unsigned int v137 = v131 + v135++;
                    unsigned int v131 = v137 & v79;
                    uint64_t v132 = (unint64_t *)(v75 + 8 * (v137 & v79));
                    unint64_t v133 = *v132;
                    if (*v132 == -1) {
                      goto LABEL_272;
                    }
                  }
                  goto LABEL_279;
                }
                int v134 = 0;
LABEL_272:
                if (v134) {
                  unsigned int v138 = v134;
                }
                else {
                  unsigned int v138 = v132;
                }
LABEL_275:
                if (*v138 != v37)
                {
                  if (*v138 == -2) {
                    --*((_DWORD *)this + 6);
                  }
                  else {
                    ++*((_DWORD *)this + 5);
                  }
                  unint64_t *v138 = v37;
                }
                goto LABEL_279;
              }
LABEL_121:
              int v65 = *(const llvm::Loop **)(v59 + 16 * v61 + 8);
              if (!v65) {
                goto LABEL_131;
              }
              unsigned int v235 = 0;
              unsigned int v236 = 0;
              int v237 = 0;
              uint64_t v239 = 0;
              uint64_t v240 = 0;
              int v238 = 0;
              uint64_t v234 = 6;
              uint64_t v241 = v243;
              uint64_t v242 = 0x200000000;
              if (!llvm::InductionDescriptor::isInductionPHI(v37, (uint64_t)v65, *(void *)(a1 + 144), (uint64_t)&v234, 0))goto LABEL_441; {
              int v66 = *(_DWORD *)(v37 + 20);
              }
              if ((v66 & 0x7FFFFFF) != 2) {
                goto LABEL_441;
              }
              if (!v236) {
                goto LABEL_441;
              }
              uint64_t v67 = v239;
              if (!v239) {
                goto LABEL_441;
              }
              uint64_t v68 = (v66 & 0x40000000) != 0 ? *(void *)(v37 - 8) : v37 - 64;
              uint64_t v139 = 0;
              while (*(int32x2_t *****)(v68 + v139) != v236)
              {
                v139 += 32;
                if (v139 == 64) {
                  goto LABEL_441;
                }
              }
              uint64_t v140 = (v66 & 0x40000000) != 0 ? *(void *)(v37 - 8) : v37 - 64;
              uint64_t v141 = 0;
              while (*(void *)(v140 + v141) != v239)
              {
                v141 += 32;
                if (v141 == 64) {
                  goto LABEL_441;
                }
              }
              if (v236 != (int32x2_t ****)v35)
              {
                uint64_t v143 = *(void *)this;
                uint64_t v142 = *((void *)this + 1);
                if (v142 == *(void *)this)
                {
                  uint64_t v144 = *((unsigned int *)this + 5);
                  uint64_t v145 = (int32x2_t *****)(v142 + 8 * v144);
                  if (v144)
                  {
                    uint64_t v146 = 0;
                    while (*(int32x2_t *****)(v142 + v146) != v236)
                    {
                      v146 += 8;
                      if (8 * v144 == v146) {
                        goto LABEL_330;
                      }
                    }
                    uint64_t v145 = (int32x2_t *****)(v142 + v146);
                  }
LABEL_330:
                  uint64_t v143 = *((void *)this + 1);
                }
                else
                {
                  uint64_t v147 = *((unsigned int *)this + 4);
                  int v148 = v147 - 1;
                  unsigned int v149 = (v147 - 1) & ((v236 >> 4) ^ (v236 >> 9));
                  uint64_t v145 = (int32x2_t *****)(v142 + 8 * v149);
                  int v150 = *v145;
                  if (*v145 == (int32x2_t ****)-1)
                  {
                    unint64_t v151 = 0;
LABEL_369:
                    if (v151) {
                      uint64_t v145 = v151;
                    }
                    LODWORD(v144) = *((_DWORD *)this + 5);
                    if (*v145 != v236) {
                      uint64_t v145 = (int32x2_t *****)(v142 + 8 * v147);
                    }
                  }
                  else
                  {
                    unint64_t v151 = 0;
                    int v152 = 1;
                    while (v150 != v236)
                    {
                      if (v151) {
                        BOOL v153 = 0;
                      }
                      else {
                        BOOL v153 = v150 == (int32x2_t ****)-2;
                      }
                      if (v153) {
                        unint64_t v151 = v145;
                      }
                      unsigned int v154 = v149 + v152++;
                      unsigned int v149 = v154 & v148;
                      uint64_t v145 = (int32x2_t *****)(v142 + 8 * (v154 & v148));
                      int v150 = *v145;
                      if (*v145 == (int32x2_t ****)-1) {
                        goto LABEL_369;
                      }
                    }
                    LODWORD(v144) = *((_DWORD *)this + 5);
                  }
                }
                unsigned int v155 = *((_DWORD *)this + 4);
                if (v142 == v143) {
                  unsigned int v155 = v144;
                }
                if (v145 == (int32x2_t *****)(v142 + 8 * v155)) {
                  goto LABEL_441;
                }
              }
              uint64_t v227 = v238;
              if (llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)(v228 + 144), v238, v65) != 1)goto LABEL_441; {
              int v156 = *(_DWORD *)(v67 + 20);
              }
              if ((v156 & 0x40000000) != 0) {
                uint64_t v157 = *(unint64_t **)(v67 - 8);
              }
              else {
                uint64_t v157 = (unint64_t *)(v67 - 32 * (v156 & 0x7FFFFFF));
              }
              uint64_t v158 = v228;
              uint64_t v159 = *(void *)(v228 + 144);
              unint64_t v160 = *v157;
              uint64_t v161 = *(void *)(v159 + 104);
              unsigned int v162 = *(_DWORD *)(v159 + 120);
              if (!v162) {
                goto LABEL_344;
              }
              unsigned int v163 = ((v160 >> 4) ^ (v160 >> 9)) & (v162 - 1);
              uint64_t v164 = v161 + 48 * v163;
              uint64_t v165 = *(void *)(v164 + 24);
              if (v165 != v160)
              {
                int v166 = 1;
                while (v165 != -4096)
                {
                  unsigned int v167 = v163 + v166++;
                  unsigned int v163 = v167 & (v162 - 1);
                  uint64_t v164 = v161 + 48 * v163;
                  uint64_t v165 = *(void *)(v164 + 24);
                  if (v165 == v160) {
                    goto LABEL_345;
                  }
                }
LABEL_344:
                uint64_t v164 = v161 + 48 * v162;
              }
LABEL_345:
              if (v164 == v161 + 48 * v162 || (int v168 = *(llvm::SCEV **)(v164 + 40)) == 0)
              {
                uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v159, v160);
                uint64_t v158 = v228;
                int v168 = (llvm::SCEV *)SCEVIter;
              }
              if (v168 != v227)
              {
                int v170 = *(_DWORD *)(v67 + 20);
                if ((v170 & 0x40000000) != 0) {
                  uint64_t v171 = *(void *)(v67 - 8);
                }
                else {
                  uint64_t v171 = v67 - 32 * (v170 & 0x7FFFFFF);
                }
                uint64_t v174 = *(void *)(v158 + 144);
                unint64_t v175 = *(void *)(v171 + 32);
                uint64_t v176 = *(void *)(v174 + 104);
                unsigned int v177 = *(_DWORD *)(v174 + 120);
                if (!v177) {
                  goto LABEL_360;
                }
                unsigned int v178 = ((v175 >> 4) ^ (v175 >> 9)) & (v177 - 1);
                uint64_t v179 = v176 + 48 * v178;
                uint64_t v180 = *(void *)(v179 + 24);
                if (v180 != v175)
                {
                  int v181 = 1;
                  while (v180 != -4096)
                  {
                    unsigned int v182 = v178 + v181++;
                    unsigned int v178 = v182 & (v177 - 1);
                    uint64_t v179 = v176 + 48 * v178;
                    uint64_t v180 = *(void *)(v179 + 24);
                    if (v180 == v175) {
                      goto LABEL_361;
                    }
                  }
LABEL_360:
                  uint64_t v179 = v176 + 48 * v177;
                }
LABEL_361:
                if (v179 == v176 + 48 * v177 || (uint64_t v183 = *(void *)(v179 + 40)) == 0) {
                  uint64_t v183 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v174, v175);
                }
                if ((llvm::SCEV *)v183 == v227)
                {
                  int v184 = *(_DWORD *)(v67 + 20);
                  if ((v184 & 0x40000000) != 0) {
                    uint64_t v185 = *(void *)(v67 - 8);
                  }
                  else {
                    uint64_t v185 = v67 - 32 * (v184 & 0x7FFFFFF);
                  }
                  uint64_t v173 = (uint64_t *)(v185 + 32);
                  goto LABEL_376;
                }
                goto LABEL_441;
              }
              int v172 = *(_DWORD *)(v67 + 20);
              if ((v172 & 0x40000000) != 0) {
                uint64_t v173 = *(uint64_t **)(v67 - 8);
              }
              else {
                uint64_t v173 = (uint64_t *)(v67 - 32 * (v172 & 0x7FFFFFF));
              }
LABEL_376:
              uint64_t v186 = *v173;
              if (!*v173) {
                goto LABEL_441;
              }
              uint64_t v187 = *(void *)(a3 + 536);
              uint64_t v188 = *(void *)(a3 + 528);
              if (v187 == v188)
              {
                uint64_t v189 = *(unsigned int *)(a3 + 548);
                char v190 = (void *)(v187 + 8 * v189);
                if (v189)
                {
                  uint64_t v191 = 0;
                  while (*(void *)(v187 + v191) != v186)
                  {
                    v191 += 8;
                    if (8 * v189 == v191) {
                      goto LABEL_397;
                    }
                  }
                  char v190 = (void *)(v187 + v191);
                }
LABEL_397:
                uint64_t v188 = *(void *)(a3 + 536);
              }
              else
              {
                uint64_t v192 = *(unsigned int *)(a3 + 544);
                int v193 = v192 - 1;
                unsigned int v194 = (v192 - 1) & ((v186 >> 4) ^ (v186 >> 9));
                char v190 = (void *)(v187 + 8 * v194);
                uint64_t v195 = *v190;
                if (*v190 == -1)
                {
                  uint64_t v196 = 0;
LABEL_426:
                  if (v196) {
                    char v190 = v196;
                  }
                  LODWORD(v189) = *(_DWORD *)(a3 + 548);
                  if (*v190 != v186) {
                    char v190 = (void *)(v187 + 8 * v192);
                  }
                }
                else
                {
                  uint64_t v196 = 0;
                  int v197 = 1;
                  while (v195 != v186)
                  {
                    if (v196) {
                      BOOL v198 = 0;
                    }
                    else {
                      BOOL v198 = v195 == -2;
                    }
                    if (v198) {
                      uint64_t v196 = v190;
                    }
                    unsigned int v199 = v194 + v197++;
                    unsigned int v194 = v199 & v193;
                    char v190 = (void *)(v187 + 8 * (v199 & v193));
                    uint64_t v195 = *v190;
                    if (*v190 == -1) {
                      goto LABEL_426;
                    }
                  }
                  LODWORD(v189) = *(_DWORD *)(a3 + 548);
                }
              }
              unsigned int v200 = *(_DWORD *)(a3 + 544);
              if (v187 == v188) {
                unsigned int v200 = v189;
              }
              if (v190 != (void *)(v187 + 8 * v200))
              {
LABEL_441:
                if (v241 != v243) {
                  free(v241);
                }
                a1 = v228;
                if (v236 && v236 != (int32x2_t ****)-8192 && v236 != (int32x2_t ****)-4096)
                {
                  unint64_t v216 = v234 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)(v234 & 0xFFFFFFFFFFFFFFF8) = v235;
                  if (v235)
                  {
                    *unsigned int v235 = *v235 & 7 | v216;
                  }
                  else
                  {
                    v217 = v236;
                    unint64_t v218 = ***v236;
                    unint64_t v219 = (unint64_t)v218[303];
                    if (v219 <= v216)
                    {
                      uint64_t v220 = v218[305].u32[0];
                      if (v219 + 16 * v220 > v216)
                      {
                        unsigned int v221 = v220 - 1;
                        LODWORD(v222) = v221 & ((v236 >> 4) ^ (v236 >> 9));
                        unsigned int v223 = (int32x2_t *****)(v219 + 16 * v222);
                        BOOL v224 = *v223;
                        if (v236 == *v223)
                        {
LABEL_454:
                          void *v223 = (int32x2_t ****)-8192;
                          v218[304] = vadd_s32(v218[304], (int32x2_t)0x1FFFFFFFFLL);
                          v217 = v236;
                        }
                        else
                        {
                          int v225 = 1;
                          while (v224 != (int32x2_t ****)-4096)
                          {
                            int v226 = v222 + v225++;
                            uint64_t v222 = v226 & v221;
                            BOOL v224 = *(int32x2_t *****)(v219 + 16 * v222);
                            if (v236 == v224)
                            {
                              unsigned int v223 = (int32x2_t *****)(v219 + 16 * v222);
                              goto LABEL_454;
                            }
                          }
                        }
                        *((unsigned char *)v217 + 17) &= ~1u;
                      }
                    }
                  }
                }
                goto LABEL_75;
              }
              uint64_t v201 = *((void *)this + 1);
              uint64_t v202 = *((unsigned int *)this + 5);
              if (v201 == *(void *)this)
              {
                if (v202)
                {
                  unsigned int v203 = 0;
                  uint64_t v204 = 8 * v202;
                  uint8x8_t v205 = (unint64_t *)*((void *)this + 1);
                  while (*v205 != v37)
                  {
                    if (*v205 == -2) {
                      unsigned int v203 = v205;
                    }
                    ++v205;
                    v204 -= 8;
                    if (!v204)
                    {
                      if (!v203) {
                        goto LABEL_409;
                      }
                      *unsigned int v203 = v37;
                      --*((_DWORD *)this + 6);
                      goto LABEL_439;
                    }
                  }
                  goto LABEL_439;
                }
LABEL_409:
                unsigned int v206 = *((_DWORD *)this + 4);
                if (v202 < v206)
                {
                  *((_DWORD *)this + 5) = v202 + 1;
                  *(void *)(v201 + 8 * v202) = v37;
LABEL_439:
                  if (v245 >= (unint64_t)HIDWORD(v245)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  v244[v245] = v37;
                  LODWORD(v245) = v245 + 1;
                  goto LABEL_441;
                }
              }
              else
              {
                unsigned int v206 = *((_DWORD *)this + 4);
              }
              if (3 * v206 <= 4 * ((int)v202 - *((_DWORD *)this + 6)))
              {
                if (v206 >= 0x40) {
                  v206 *= 2;
                }
                else {
                  unsigned int v206 = 128;
                }
              }
              else if (v206 - v202 >= v206 >> 3)
              {
                goto LABEL_414;
              }
              llvm::SmallPtrSetImplBase::Grow(this, v206);
              unsigned int v206 = *((_DWORD *)this + 4);
              uint64_t v201 = *((void *)this + 1);
LABEL_414:
              unsigned int v207 = v206 - 1;
              unsigned int v208 = (v206 - 1) & ((v37 >> 4) ^ (v37 >> 9));
              unsigned int v209 = (unint64_t *)(v201 + 8 * v208);
              unint64_t v210 = *v209;
              if (*v209 == -1)
              {
                uint64_t v211 = 0;
LABEL_432:
                if (v211) {
                  int v215 = v211;
                }
                else {
                  int v215 = v209;
                }
                if (*v215 != v37)
                {
                  if (*v215 == -2) {
                    --*((_DWORD *)this + 6);
                  }
                  else {
                    ++*((_DWORD *)this + 5);
                  }
                  *int v215 = v37;
                }
              }
              else
              {
                uint64_t v211 = 0;
                int v212 = 1;
                while (v210 != v37)
                {
                  if (v211) {
                    BOOL v213 = 0;
                  }
                  else {
                    BOOL v213 = v210 == -2;
                  }
                  if (v213) {
                    uint64_t v211 = v209;
                  }
                  unsigned int v214 = v208 + v212++;
                  unsigned int v208 = v214 & v207;
                  unsigned int v209 = (unint64_t *)(v201 + 8 * (v214 & v207));
                  unint64_t v210 = *v209;
                  if (*v209 == -1) {
                    goto LABEL_432;
                  }
                }
              }
              goto LABEL_439;
            }
            int v69 = *(_DWORD *)(v37 + 20);
            if ((v69 & 0x40000000) != 0)
            {
              uint64_t v71 = *(uint64_t **)(v37 - 8);
              uint64_t v70 = v69 & 0x7FFFFFF;
              if (!v70) {
                goto LABEL_75;
              }
            }
            else
            {
              uint64_t v70 = v69 & 0x7FFFFFF;
              uint64_t v71 = (uint64_t *)(v37 - 32 * v70);
              if (!v70) {
                goto LABEL_75;
              }
            }
            uint64_t v95 = &v71[4 * v70];
            uint64_t v96 = *(void *)(a3 + 536);
            uint64_t v97 = *(unsigned int *)(a3 + 544);
            int v98 = v97 - 1;
            uint64_t v99 = *(unsigned int *)(a3 + 548);
            char v100 = 1;
            do
            {
              while (1)
              {
                uint64_t v101 = *v71;
                if (*v71 != v35)
                {
                  if (v96 == *(void *)(a3 + 528))
                  {
                    if (v99)
                    {
                      uint64_t v102 = 0;
                      while (*(void *)(v96 + v102) != v101)
                      {
                        v102 += 8;
                        if (8 * v99 == v102)
                        {
                          unsigned int v103 = *(_DWORD *)(a3 + 548);
                          goto LABEL_199;
                        }
                      }
                      BOOL v112 = (void *)(v96 + v102);
                      unsigned int v103 = *(_DWORD *)(a3 + 548);
                      uint64_t v113 = *(void *)(a3 + 536);
                    }
                    else
                    {
                      unsigned int v103 = 0;
LABEL_199:
                      uint64_t v113 = *(void *)(a3 + 536);
                      BOOL v112 = (void *)(v96 + 8 * v99);
                    }
                  }
                  else
                  {
                    unsigned int v104 = v98 & ((v101 >> 4) ^ (v101 >> 9));
                    unsigned int v105 = (void *)(v96 + 8 * v104);
                    uint64_t v106 = *v105;
                    if (*v105 == -1)
                    {
                      unsigned int v107 = 0;
LABEL_201:
                      if (v107) {
                        unsigned int v105 = v107;
                      }
                      uint64_t v111 = *v105;
                    }
                    else
                    {
                      unsigned int v107 = 0;
                      int v108 = 1;
                      while (v106 != v101)
                      {
                        if (v107) {
                          BOOL v109 = 0;
                        }
                        else {
                          BOOL v109 = v106 == -2;
                        }
                        if (v109) {
                          unsigned int v107 = v105;
                        }
                        unsigned int v110 = v104 + v108++;
                        unsigned int v104 = v110 & v98;
                        unsigned int v105 = (void *)(v96 + 8 * (v110 & v98));
                        uint64_t v106 = *v105;
                        if (*v105 == -1) {
                          goto LABEL_201;
                        }
                      }
                      uint64_t v111 = *v71;
                    }
                    BOOL v112 = v111 == v101 ? v105 : (void *)(v96 + 8 * v97);
                    unsigned int v103 = *(_DWORD *)(a3 + 548);
                    uint64_t v113 = *(void *)(a3 + 528);
                  }
                  if (v96 != v113) {
                    unsigned int v103 = *(_DWORD *)(a3 + 544);
                  }
                  if (v112 == (void *)(v96 + 8 * v103)) {
                    break;
                  }
                }
                if ((v100 & 1) == 0) {
                  goto LABEL_75;
                }
                char v100 = 0;
                v71 += 4;
                if (v71 == v95) {
                  goto LABEL_217;
                }
              }
              v71 += 4;
            }
            while (v71 != v95);
            if (v100) {
              goto LABEL_75;
            }
LABEL_217:
            uint64_t v114 = *((void *)this + 1);
            uint64_t v115 = *((unsigned int *)this + 5);
            if (v114 == *(void *)this)
            {
              if (v115)
              {
                uint64_t v116 = 0;
                uint64_t v117 = 8 * v115;
                unsigned int v118 = (unint64_t *)*((void *)this + 1);
                while (*v118 != v37)
                {
                  if (*v118 == -2) {
                    uint64_t v116 = v118;
                  }
                  ++v118;
                  v117 -= 8;
                  if (!v117)
                  {
                    if (!v116) {
                      goto LABEL_225;
                    }
                    *uint64_t v116 = v37;
LABEL_307:
                    --*((_DWORD *)this + 6);
                    goto LABEL_279;
                  }
                }
                goto LABEL_279;
              }
LABEL_225:
              unsigned int v119 = *((_DWORD *)this + 4);
              if (v115 < v119)
              {
                *((_DWORD *)this + 5) = v115 + 1;
                *(void *)(v114 + 8 * v115) = v37;
LABEL_279:
                if (v245 >= (unint64_t)HIDWORD(v245)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v244[v245] = v37;
                LODWORD(v245) = v245 + 1;
                goto LABEL_75;
              }
            }
            else
            {
              unsigned int v119 = *((_DWORD *)this + 4);
            }
            if (3 * v119 <= 4 * ((int)v115 - *((_DWORD *)this + 6)))
            {
              if (v119 >= 0x40) {
                v119 *= 2;
              }
              else {
                unsigned int v119 = 128;
              }
            }
            else if (v119 - v115 >= v119 >> 3)
            {
LABEL_242:
              unsigned int v123 = v119 - 1;
              unsigned int v124 = (v119 - 1) & ((v37 >> 4) ^ (v37 >> 9));
              unsigned int v125 = (unint64_t *)(v114 + 8 * v124);
              unint64_t v126 = *v125;
              if (*v125 != -1)
              {
                int v127 = 0;
                int v128 = 1;
                while (v126 != v37)
                {
                  if (v127) {
                    BOOL v129 = 0;
                  }
                  else {
                    BOOL v129 = v126 == -2;
                  }
                  if (v129) {
                    int v127 = v125;
                  }
                  unsigned int v130 = v124 + v128++;
                  unsigned int v124 = v130 & v123;
                  unsigned int v125 = (unint64_t *)(v114 + 8 * (v130 & v123));
                  unint64_t v126 = *v125;
                  if (*v125 == -1) {
                    goto LABEL_268;
                  }
                }
                goto LABEL_279;
              }
              int v127 = 0;
LABEL_268:
              if (v127) {
                unsigned int v138 = v127;
              }
              else {
                unsigned int v138 = v125;
              }
              goto LABEL_275;
            }
            llvm::SmallPtrSetImplBase::Grow(this, v119);
            a1 = v228;
            unsigned int v119 = *((_DWORD *)this + 4);
            uint64_t v114 = *((void *)this + 1);
            goto LABEL_242;
          }
        }
      }
LABEL_75:
      uint64_t v36 = *(void *)(v36 + 8);
      if (v36) {
        continue;
      }
      break;
    }
    unsigned int v14 = v245;
LABEL_464:
    if (v14) {
      continue;
    }
    break;
  }
LABEL_465:
  if (v230 != v229) {
    free(v230);
  }
  if (v244 != v246) {
    free(v244);
  }
}

BOOL sub_1CC7C5D6C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) != 83) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  int v2 = 1;
  do
  {
    uint64_t v1 = *(void *)(v1 + 8);
    --v2;
  }
  while (v1);
  if (v2) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 20);
  if ((v4 & 0x40000000) == 0)
  {
    uint64_t v5 = v4 & 0x7FFFFFF;
    uint64_t v6 = (uint64_t *)(a1 - 32 * v5);
    if (v5) {
      goto LABEL_9;
    }
    return 1;
  }
  uint64_t v6 = *(uint64_t **)(a1 - 8);
  uint64_t v5 = v4 & 0x7FFFFFF;
  if (!v5) {
    return 1;
  }
LABEL_9:
  uint64_t v7 = 32 * v5 - 32;
  do
  {
    uint64_t v8 = *v6;
    v6 += 4;
    int v9 = *(unsigned __int8 *)(v8 + 16);
    BOOL result = v9 == 16;
    BOOL v10 = v9 != 16 || v7 == 0;
    v7 -= 32;
  }
  while (!v10);
  return result;
}

void sub_1CC7C5DEC()
{
}

uint64_t sub_1CC7C5E88(uint64_t a1, int a2, int a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDB600;
  *(_DWORD *)(a1 + 24) = 2;
  *(_DWORD *)(a1 + 28) = a2;
  *(void *)a1 = &unk_1F261EAB0;
  *(_DWORD *)(a1 + 32) = a3;
  *(void *)(a1 + 48) = a1 + 80;
  *(void *)(a1 + 56) = a1 + 80;
  *(void *)(a1 + 64) = 8;
  *(_DWORD *)(a1 + 72) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB608, memory_order_acquire) != -1)
  {
    v7[0] = sub_1CC7C5DEC;
    v7[1] = &PassRegistry;
    uint64_t v6 = v7;
    std::__call_once(&qword_1EBCDB608, &v6, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC7C5F54()
{
}

void sub_1CC7C5FA0(llvm::Pass *this)
{
  *(void *)this = &unk_1F261EAB0;
  int v2 = (void *)*((void *)this + 7);
  if (v2 != *((void **)this + 6)) {
    free(v2);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC7C6004(llvm::Pass *this)
{
  *(void *)this = &unk_1F261EAB0;
  int v2 = (void *)*((void *)this + 7);
  if (v2 != *((void **)this + 6)) {
    free(v2);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC7C607C(llvm::SmallPtrSetImplBase *this, uint64_t a2)
{
  v280[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2 + 72;
  unint64_t v4 = -1;
  uint64_t v5 = a2 + 72;
  do
  {
    uint64_t v5 = *(void *)(v5 + 8);
    ++v4;
  }
  while (v5 != v3);
  if (v4 < 2) {
    goto LABEL_495;
  }
  uint64_t v6 = (void *)*((void *)this + 6);
  *((void *)this + 5) = *(void *)(a2 + 40) + 272;
  uint64_t v7 = (void *)*((void *)this + 7);
  if (v7 == v6) {
    goto LABEL_5;
  }
  uint64_t v230 = *((unsigned int *)this + 16);
  if (v230 < 0x21 || 4 * (*((_DWORD *)this + 17) - *((_DWORD *)this + 18)) >= v230)
  {
    memset(v7, 255, 8 * v230);
LABEL_5:
    *((_DWORD *)this + 17) = 0;
    *((_DWORD *)this + 18) = 0;
    goto LABEL_6;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)this + 6);
LABEL_6:
  sub_1CD10929C(*(llvm::Module **)(a2 + 40), (uint64_t)this + 48, 0);
  uint64_t v8 = *(void *)(a2 + 80);
  if (v8 == v3)
  {
LABEL_495:
    char v9 = 0;
    return v9 & 1;
  }
  uint64_t v234 = this;
  char v9 = 0;
  uint64_t v238 = v3;
LABEL_8:
  char v235 = v9;
  do
  {
    if (v8) {
      BOOL v10 = (void *)(v8 - 24);
    }
    else {
      BOOL v10 = 0;
    }
    if (llvm::ConstantFoldTerminator((llvm::BasicBlock *)v10, 0, 0, 0)) {
      goto LABEL_488;
    }
    BOOL v11 = v8 == 0;
    uint64_t v12 = *(void *)(v10[7] + 80);
    if (v12) {
      BOOL v11 = v12 - 24 == (void)v10;
    }
    if (!v11)
    {
      uint64_t v23 = v10[1];
      if (!v23)
      {
LABEL_487:
        llvm::DeleteDeadBlock((llvm *)v10, 0, 0);
LABEL_488:
        uint64_t v8 = *(void *)(a2 + 80);
        char v9 = 1;
        if (v8 == v3) {
          return v9 & 1;
        }
        goto LABEL_8;
      }
      while (1)
      {
        uint64_t v24 = *(void *)(v23 + 24);
        unsigned int v25 = *(unsigned __int8 *)(v24 + 16);
        BOOL v26 = v24 && v25 >= 0x1C;
        if (v26 && v25 - 29 < 0xB) {
          break;
        }
        uint64_t v23 = *(void *)(v23 + 8);
        if (!v23) {
          goto LABEL_487;
        }
      }
    }
    if (sub_1CC7C7A84((llvm::BasicBlock *)v10)) {
      llvm::MergeBasicBlockIntoOnlyPred((unint64_t)v10, 0, v13);
    }
    unsigned int v14 = (void *)v10[5];
    uint64_t v245 = v8;
    uint64_t v246 = v10 + 5;
    if (v14 == v10 + 5)
    {
      unsigned int v251 = v253;
      uint64_t v252 = 0x200000000;
      goto LABEL_274;
    }
    if (v14) {
      uint64_t v15 = v14 - 3;
    }
    else {
      uint64_t v15 = 0;
    }
    unsigned int v16 = *((unsigned __int8 *)v15 + 16) - 40;
    if (v16 >= 0xFFFFFFF5) {
      int v17 = v15;
    }
    else {
      int v17 = 0;
    }
    if (v14)
    {
      BOOL v18 = *((unsigned char *)v17 + 16) == 30 && v16 >= 0xFFFFFFF5;
      if (v18 && (*((_DWORD *)v17 + 5) & 0x7FFFFFF) == 3)
      {
        uint64_t v19 = (llvm::BasicBlock *)*(v17 - 4);
        int v20 = (void *)((char *)v19 + 40);
        uint64_t v21 = (void *)*((void *)v19 + 5);
        if (v21 == (void *)((char *)v19 + 40))
        {
          uint64_t v22 = 0;
        }
        else
        {
          uint64_t v22 = v21 - 3;
          if (!v21) {
            uint64_t v22 = 0;
          }
          if (*((unsigned __int8 *)v22 + 16) - 29 >= 0xB) {
            uint64_t v22 = 0;
          }
        }
        uint64_t v28 = (llvm::BasicBlock *)*(v17 - 8);
        if (*((unsigned char *)v22 + 16) == 30) {
          int v29 = v22;
        }
        else {
          int v29 = 0;
        }
        unsigned int v31 = (void *)((char *)v28 + 40);
        BOOL v30 = (void *)*((void *)v28 + 5);
        if (v30 == (void *)((char *)v28 + 40))
        {
          uint64_t v32 = 0;
        }
        else
        {
          uint64_t v32 = v30 - 3;
          if (!v30) {
            uint64_t v32 = 0;
          }
          if (*((unsigned __int8 *)v32 + 16) - 29 >= 0xB) {
            uint64_t v32 = 0;
          }
        }
        if (*((unsigned char *)v32 + 16) == 30) {
          uint64_t v33 = v32;
        }
        else {
          uint64_t v33 = 0;
        }
        if (v29 && (llvm::BasicBlock *)*(v29 - 4) == v28)
        {
          if (v21 == v20)
          {
            uint64_t v34 = 0;
          }
          else
          {
            uint64_t v34 = v21 - 3;
            if (!v21) {
              uint64_t v34 = 0;
            }
            if (*((unsigned __int8 *)v34 + 16) - 29 >= 0xB) {
              uint64_t v34 = 0;
            }
          }
          if (*((unsigned char *)v34 + 16) != 30)
          {
            switch(*((unsigned char *)v34 + 16))
            {
              case 0x1E:
LABEL_501:
                __break(1u);
                JUMPOUT(0x1CC7C79A8);
              case 0x1F:
                int v40 = (*((_DWORD *)v34 + 5) >> 1) & 0x3FFFFFF;
                goto LABEL_80;
              case 0x20:
              case 0x26:
                int v40 = (*((_DWORD *)v34 + 5) & 0x7FFFFFF) - 1;
                goto LABEL_80;
              case 0x24:
                int v40 = *((_WORD *)v34 + 9) & 1;
                goto LABEL_80;
              case 0x25:
                goto LABEL_74;
              case 0x27:
                int v40 = *((_DWORD *)v34 + 20) + 1;
LABEL_80:
                if (v40 != 1) {
                  goto LABEL_81;
                }
                goto LABEL_74;
              default:
                goto LABEL_81;
            }
          }
          if ((*((_DWORD *)v34 + 5) & 0x7FFFFFF) != 3)
          {
LABEL_74:
            uint64_t v35 = v19;
            uint64_t v241 = v19;
            uint64_t v36 = v28;
            uint64_t SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v35);
            uint64_t v28 = v36;
            uint64_t v19 = v241;
            if (SinglePredecessor)
            {
              unsigned int v38 = *((_DWORD *)v234 + 7);
              uint64_t v3 = v238;
              uint64_t v39 = v245;
              if (sub_1CC7C8654((uint64_t)v234, (uint64_t)v241, v38) >= v38
                && !sub_1CC7C7B94((uint64_t)v241))
              {
                goto LABEL_315;
              }
              uint64_t v227 = v241;
              uint64_t v228 = 0;
LABEL_492:
              int v226 = 0;
              goto LABEL_494;
            }
          }
        }
LABEL_81:
        if (v33)
        {
          int v41 = (llvm::BasicBlock *)*(v33 - 4);
          if (v41 == v19)
          {
            if (v30 == v31)
            {
              uint64_t v42 = 0;
            }
            else
            {
              uint64_t v42 = v30 - 3;
              if (!v30) {
                uint64_t v42 = 0;
              }
              if (*((unsigned __int8 *)v42 + 16) - 29 >= 0xB) {
                uint64_t v42 = 0;
              }
            }
            if (*((unsigned char *)v42 + 16) != 30)
            {
              switch(*((unsigned char *)v42 + 16))
              {
                case 0x1E:
                  goto LABEL_501;
                case 0x1F:
                  int v47 = (*((_DWORD *)v42 + 5) >> 1) & 0x3FFFFFF;
                  goto LABEL_98;
                case 0x20:
                case 0x26:
                  int v47 = (*((_DWORD *)v42 + 5) & 0x7FFFFFF) - 1;
                  goto LABEL_98;
                case 0x24:
                  int v47 = *((_WORD *)v42 + 9) & 1;
                  goto LABEL_98;
                case 0x25:
                  goto LABEL_92;
                case 0x27:
                  int v47 = *((_DWORD *)v42 + 20) + 1;
LABEL_98:
                  if (v47 != 1) {
                    goto LABEL_99;
                  }
                  goto LABEL_92;
                default:
                  goto LABEL_99;
              }
            }
            if ((*((_DWORD *)v42 + 5) & 0x7FFFFFF) != 3)
            {
LABEL_92:
              uint64_t v242 = v19;
              uint64_t v43 = v28;
              uint64_t v44 = llvm::BasicBlock::getSinglePredecessor(v28);
              uint64_t v28 = v43;
              uint64_t v19 = v242;
              if (v44)
              {
                unsigned int v45 = *((_DWORD *)v234 + 7);
                uint64_t v46 = (uint64_t)v28;
                uint64_t v3 = v238;
                uint64_t v39 = v245;
                if (sub_1CC7C8654((uint64_t)v234, (uint64_t)v28, v45) >= v45
                  && !sub_1CC7C7B94(v46))
                {
                  goto LABEL_315;
                }
                uint64_t v227 = (void *)v46;
                uint64_t v228 = 0;
                int v226 = 1;
LABEL_494:
                sub_1CC7C8154(v227, v228, v226);
              }
            }
          }
LABEL_99:
          if (v29 && v41 == (llvm::BasicBlock *)*(v29 - 4))
          {
            if (v21 == v20)
            {
              unsigned int v48 = 0;
            }
            else
            {
              unsigned int v48 = v21 - 3;
              if (!v21) {
                unsigned int v48 = 0;
              }
              if (*((unsigned __int8 *)v48 + 16) - 29 >= 0xB) {
                unsigned int v48 = 0;
              }
            }
            if (*((unsigned char *)v48 + 16) != 30)
            {
              switch(*((unsigned char *)v48 + 16))
              {
                case 0x1E:
                  goto LABEL_501;
                case 0x1F:
                  int v54 = (*((_DWORD *)v48 + 5) >> 1) & 0x3FFFFFF;
                  goto LABEL_127;
                case 0x20:
                case 0x26:
                  int v54 = (*((_DWORD *)v48 + 5) & 0x7FFFFFF) - 1;
                  goto LABEL_127;
                case 0x24:
                  int v54 = *((_WORD *)v48 + 9) & 1;
                  goto LABEL_127;
                case 0x25:
                  goto LABEL_110;
                case 0x27:
                  int v54 = *((_DWORD *)v48 + 20) + 1;
LABEL_127:
                  if (v54 != 1) {
                    goto LABEL_132;
                  }
                  goto LABEL_110;
                default:
                  goto LABEL_132;
              }
            }
            if ((*((_DWORD *)v48 + 5) & 0x7FFFFFF) != 3)
            {
LABEL_110:
              BOOL v49 = v28;
              if (llvm::BasicBlock::getSinglePredecessor(v19))
              {
                if (v30 == v31)
                {
                  uint64_t v50 = 0;
                }
                else
                {
                  uint64_t v50 = v30 - 3;
                  if (!v30) {
                    uint64_t v50 = 0;
                  }
                  if (*((unsigned __int8 *)v50 + 16) - 29 >= 0xB) {
                    uint64_t v50 = 0;
                  }
                }
                if (*((unsigned char *)v50 + 16) != 30)
                {
                  switch(*((unsigned char *)v50 + 16))
                  {
                    case 0x1E:
                      goto LABEL_501;
                    case 0x1F:
                      int v55 = (*((_DWORD *)v50 + 5) >> 1) & 0x3FFFFFF;
                      goto LABEL_131;
                    case 0x20:
                    case 0x26:
                      int v55 = (*((_DWORD *)v50 + 5) & 0x7FFFFFF) - 1;
                      goto LABEL_131;
                    case 0x24:
                      int v55 = *((_WORD *)v50 + 9) & 1;
                      goto LABEL_131;
                    case 0x25:
                      goto LABEL_120;
                    case 0x27:
                      int v55 = *((_DWORD *)v50 + 20) + 1;
LABEL_131:
                      if (v55 != 1) {
                        goto LABEL_132;
                      }
                      goto LABEL_120;
                    default:
                      goto LABEL_132;
                  }
                }
                if ((*((_DWORD *)v50 + 5) & 0x7FFFFFF) != 3)
                {
LABEL_120:
                  if (llvm::BasicBlock::getSinglePredecessor(v49))
                  {
                    unsigned int v51 = *((_DWORD *)v234 + 7);
                    unsigned int v52 = sub_1CC7C8654((uint64_t)v234, (uint64_t)v19, v51);
                    BOOL v18 = v51 >= v52;
                    unsigned int v53 = v51 - v52;
                    uint64_t v3 = v238;
                    uint64_t v39 = v245;
                    if (v53 == 0 || !v18 || sub_1CC7C8654((uint64_t)v234, (uint64_t)v49, v53) >= v53) {
                      goto LABEL_315;
                    }
                    uint64_t v227 = v19;
                    uint64_t v228 = v49;
                    goto LABEL_492;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_132:
    unsigned int v251 = v253;
    uint64_t v252 = 0x200000000;
    unsigned int v56 = *((unsigned __int8 *)v15 + 16) - 40;
    if (v56 >= 0xFFFFFFF5) {
      int v57 = v15;
    }
    else {
      int v57 = 0;
    }
    if (!v14) {
      goto LABEL_274;
    }
    if (*((unsigned char *)v57 + 16) != 31 || v56 < 0xFFFFFFF5) {
      goto LABEL_274;
    }
    int v59 = *((_DWORD *)v57 + 5);
    if ((v59 & 0x40000000) != 0) {
      unsigned int v60 = (void *)*(v57 - 1);
    }
    else {
      unsigned int v60 = &v57[-4 * (v59 & 0x7FFFFFF)];
    }
    uint64_t v61 = (llvm::Value *)v60[4];
    uint64_t v263 = v267;
    int v264 = v267;
    int v266 = 0;
    uint64_t v265 = 0x100000004;
    v267[0] = v61;
    uint64_t v239 = ((*((_DWORD *)v57 + 5) >> 1) & 0x3FFFFFFu) - 1;
    uint64_t v243 = v61;
    if (((*((_DWORD *)v57 + 5) >> 1) & 0x3FFFFFF) == 1)
    {
      uint64_t v99 = (uint64_t)v234;
      char v100 = v10 + 5;
      goto LABEL_236;
    }
    uint64_t v62 = 0;
    do
    {
      int v63 = *((_DWORD *)v57 + 5);
      if ((v63 & 0x40000000) != 0) {
        int v64 = (void *)*(v57 - 1);
      }
      else {
        int v64 = &v57[-4 * (v63 & 0x7FFFFFF)];
      }
      uint64_t v65 = v62 + 1;
      int v66 = (llvm::BasicBlock *)v64[4 * (2 * (v62 + 1)) + 4];
      uint64_t v67 = (void *)*((void *)v66 + 5);
      if (v67 == (void *)((char *)v66 + 40))
      {
        uint64_t v71 = (char *)v264;
LABEL_272:
        if (v71 != v263) {
          free(v71);
        }
LABEL_274:
        if (llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)v10))
        {
          uint64_t v121 = (void *)*v246;
          if ((void *)*v246 == v246)
          {
            int v122 = 0;
          }
          else
          {
            if (v121) {
              int v122 = v121 - 3;
            }
            else {
              int v122 = 0;
            }
            if (*((unsigned __int8 *)v122 + 16) - 29 >= 0xB) {
              int v122 = 0;
            }
          }
          uint64_t v3 = v238;
          if (*((unsigned char *)v122 + 16) != 30)
          {
            char v106 = 0;
            switch(*((unsigned char *)v122 + 16))
            {
              case 0x1E:
                goto LABEL_501;
              case 0x1F:
                int v134 = (*((_DWORD *)v122 + 5) >> 1) & 0x3FFFFFF;
                goto LABEL_310;
              case 0x20:
              case 0x26:
                int v134 = (*((_DWORD *)v122 + 5) & 0x7FFFFFF) - 1;
                goto LABEL_310;
              case 0x24:
                int v134 = *((_WORD *)v122 + 9) & 1;
                goto LABEL_310;
              case 0x25:
                goto LABEL_287;
              case 0x27:
                int v134 = *((_DWORD *)v122 + 20) + 1;
LABEL_310:
                if (v134 != 1) {
                  goto LABEL_311;
                }
                goto LABEL_287;
              default:
                goto LABEL_312;
            }
          }
          if ((*((_DWORD *)v122 + 5) & 0x7FFFFFF) != 3)
          {
LABEL_287:
            unsigned int v123 = *((_DWORD *)v234 + 8);
            if (v123 > sub_1CC7C8654((uint64_t)v234, (uint64_t)v10, v123))
            {
              uint64_t v124 = llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)v10);
              uint64_t v125 = *(void *)(v124 + 40);
              if (v125 != v124 + 40)
              {
                char v106 = 0;
                if (v125) {
                  uint64_t v126 = v125 - 24;
                }
                else {
                  uint64_t v126 = 0;
                }
                unsigned int v127 = *(unsigned __int8 *)(v126 + 16) - 40;
                if (v127 >= 0xFFFFFFF5) {
                  uint64_t v128 = v126;
                }
                else {
                  uint64_t v128 = 0;
                }
                if (!v125) {
                  goto LABEL_312;
                }
                if (*(unsigned char *)(v128 + 16) != 30 || v127 < 0xFFFFFFF5) {
                  goto LABEL_312;
                }
                unsigned int v130 = (llvm::Value *)v124;
                unsigned int v131 = (void *)*v246;
                if ((void *)*v246 == v246)
                {
                  unint64_t v133 = 0;
                }
                else
                {
                  if (v131) {
                    uint64_t v132 = (unsigned __int8 *)(v131 - 3);
                  }
                  else {
                    uint64_t v132 = 0;
                  }
                  if (v132[16] - 29 >= 0xB) {
                    unint64_t v133 = 0;
                  }
                  else {
                    unint64_t v133 = (llvm::Instruction *)v132;
                  }
                }
                uint64_t Successor = llvm::Instruction::getSuccessor(v133, 0);
                unsigned int v214 = *(void **)(v128 - 64);
                unsigned int v215 = v214 == v10;
                BOOL v216 = v214 != v10;
                uint64_t v263 = &v265;
                int v264 = (void *)0x800000000;
                sub_1CC7C86FC(Successor, (uint64_t)&v263);
                sub_1CC7C87A8((uint64_t)v130, v10, *(llvm::Value **)(v128 - 96), (uint64_t)v263, v264, v216);
                uint64_t v217 = llvm::Instruction::getSuccessor(v133, 0);
                sub_1CC5C92A0(v128, v215, v217);
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v10, v130, (llvm::Value *)1);
                llvm::BasicBlock::eraseFromParent((llvm::BasicBlock *)v10);
                if (v263 != &v265) {
                  free(v263);
                }
                char v106 = 1;
                goto LABEL_283;
              }
            }
          }
LABEL_311:
          char v106 = 0;
          goto LABEL_312;
        }
        char v106 = 0;
LABEL_283:
        uint64_t v3 = v238;
        goto LABEL_312;
      }
      if (v67) {
        uint64_t v68 = v67 - 3;
      }
      else {
        uint64_t v68 = 0;
      }
      unsigned int v69 = *((unsigned __int8 *)v68 + 16) - 40;
      if (v69 >= 0xFFFFFFF5) {
        uint64_t v70 = v68;
      }
      else {
        uint64_t v70 = 0;
      }
      uint64_t v71 = (char *)v264;
      if (!v67) {
        goto LABEL_272;
      }
      if (*((unsigned char *)v70 + 16) != 30 || v69 < 0xFFFFFFF5) {
        goto LABEL_272;
      }
      uint64_t v73 = (char *)v263;
      if (v264 == v263)
      {
        unsigned int v74 = HIDWORD(v265);
        uint64_t v75 = (char *)v264 + 8 * HIDWORD(v265);
        if (HIDWORD(v265))
        {
          uint64_t v76 = 0;
          while (*(llvm::BasicBlock **)((char *)v264 + v76) != v66)
          {
            v76 += 8;
            if (8 * HIDWORD(v265) == v76) {
              goto LABEL_181;
            }
          }
          uint64_t v75 = (char *)v264 + v76;
        }
LABEL_181:
        unsigned int v84 = v264;
      }
      else
      {
        int v77 = v265 - 1;
        unsigned int v78 = (v265 - 1) & ((v66 >> 4) ^ (v66 >> 9));
        uint64_t v75 = (char *)v264 + 8 * v78;
        int v79 = *(llvm::BasicBlock **)v75;
        if (*(void *)v75 == -1)
        {
          unint64_t v80 = 0;
LABEL_183:
          if (v80) {
            uint64_t v75 = v80;
          }
          unsigned int v74 = HIDWORD(v265);
          if (*(llvm::BasicBlock **)v75 != v66) {
            uint64_t v75 = (char *)v264 + 8 * v265;
          }
        }
        else
        {
          unint64_t v80 = 0;
          int v81 = 1;
          while (v79 != v66)
          {
            if (v80) {
              BOOL v82 = 0;
            }
            else {
              BOOL v82 = v79 == (llvm::BasicBlock *)-2;
            }
            if (v82) {
              unint64_t v80 = v75;
            }
            unsigned int v83 = v78 + v81++;
            unsigned int v78 = v83 & v77;
            uint64_t v75 = (char *)v264 + 8 * (v83 & v77);
            int v79 = *(llvm::BasicBlock **)v75;
            if (*(void *)v75 == -1) {
              goto LABEL_183;
            }
          }
          unsigned int v74 = HIDWORD(v265);
        }
        unsigned int v84 = v263;
      }
      unsigned int v85 = v265;
      unsigned int v86 = v264 == v84 ? v74 : v265;
      if (v75 != (char *)v264 + 8 * v86
        || !llvm::BasicBlock::getSinglePredecessor(v66)
        || (*((_DWORD *)v70 + 5) & 0x7FFFFFF) == 3
        || (llvm::Value *)*(v70 - 4) != v243)
      {
        goto LABEL_272;
      }
      if (v71 != v73) {
        goto LABEL_205;
      }
      if (!v74)
      {
LABEL_203:
        if (v85 > v74)
        {
          HIDWORD(v265) = v74 + 1;
          *(void *)&v71[8 * v74] = v66;
          goto LABEL_225;
        }
LABEL_205:
        if (3 * v85 <= 4 * (v74 - v266))
        {
          if (v85 >= 0x40) {
            v85 *= 2;
          }
          else {
            unsigned int v85 = 128;
          }
        }
        else if (v85 - v74 >= v85 >> 3)
        {
          goto LABEL_207;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v263, v85);
        unsigned int v85 = v265;
        uint64_t v71 = (char *)v264;
LABEL_207:
        unsigned int v90 = v85 - 1;
        unsigned int v91 = (v85 - 1) & ((v66 >> 4) ^ (v66 >> 9));
        uint64_t v92 = &v71[8 * v91];
        uint64_t v93 = *(llvm::BasicBlock **)v92;
        if (*(void *)v92 == -1)
        {
          unsigned int v94 = 0;
LABEL_219:
          if (v94) {
            uint64_t v92 = v94;
          }
          if (*(llvm::BasicBlock **)v92 != v66)
          {
            if (*(void *)v92 == -2) {
              --v266;
            }
            else {
              ++HIDWORD(v265);
            }
            *(void *)uint64_t v92 = v66;
          }
        }
        else
        {
          unsigned int v94 = 0;
          int v95 = 1;
          while (v93 != v66)
          {
            if (v94) {
              BOOL v96 = 0;
            }
            else {
              BOOL v96 = v93 == (llvm::BasicBlock *)-2;
            }
            if (v96) {
              unsigned int v94 = v92;
            }
            unsigned int v97 = v91 + v95++;
            unsigned int v91 = v97 & v90;
            uint64_t v92 = &v71[8 * (v97 & v90)];
            uint64_t v93 = *(llvm::BasicBlock **)v92;
            if (*(void *)v92 == -1) {
              goto LABEL_219;
            }
          }
        }
        goto LABEL_225;
      }
      int v87 = 0;
      uint64_t v88 = 8 * v74;
      BOOL v89 = (llvm::BasicBlock **)v71;
      while (*v89 != v66)
      {
        if (*v89 == (llvm::BasicBlock *)-2) {
          int v87 = v89;
        }
        ++v89;
        v88 -= 8;
        if (!v88)
        {
          if (!v87) {
            goto LABEL_203;
          }
          void *v87 = v66;
          --v266;
          break;
        }
      }
LABEL_225:
      if (v252 >= (unint64_t)HIDWORD(v252)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v98 = (char *)v251 + 16 * v252;
      *int v98 = v57;
      v98[1] = v62;
      LODWORD(v252) = v252 + 1;
      ++v62;
    }
    while (v65 != v239);
    uint64_t v99 = (uint64_t)v234;
    char v100 = v10 + 5;
    if (v264 != v263) {
      free(v264);
    }
LABEL_236:
    uint64_t v101 = (void *)*v100;
    if ((void *)*v100 == v100)
    {
      uint64_t v102 = 0;
    }
    else
    {
      if (v101) {
        uint64_t v102 = (uint64_t **)(v101 - 3);
      }
      else {
        uint64_t v102 = 0;
      }
      if (*((unsigned __int8 *)v102 + 16) - 29 >= 0xB) {
        uint64_t v102 = 0;
      }
    }
    if (*((unsigned char *)v102 + 16) == 31) {
      unsigned int v103 = v102;
    }
    else {
      unsigned int v103 = 0;
    }
    int v260 = v262;
    uint64_t v261 = 0x800000000;
    int v104 = *((_DWORD *)v103 + 5);
    if ((v104 & 0x40000000) != 0) {
      unsigned int v105 = (uint64_t **)*(v103 - 1);
    }
    else {
      unsigned int v105 = &v103[-4 * (v104 & 0x7FFFFFF)];
    }
    sub_1CC7C86FC((uint64_t)v105[4], (uint64_t)&v260);
    uint64_t v257 = v259;
    uint64_t v258 = 0x300000000;
    int v254 = v256;
    uint64_t v255 = 0x300000000;
    if (v252 <= dword_1EBCDB810)
    {
      if (v252)
      {
        LODWORD(v107) = 0;
        int v108 = (char *)v251;
        BOOL v109 = (char *)v251 + 16 * v252;
        do
        {
          uint64_t v110 = *(void *)v108;
          int v111 = *(_DWORD *)(*(void *)v108 + 20);
          if ((v111 & 0x40000000) != 0) {
            uint64_t v112 = *(void *)(v110 - 8);
          }
          else {
            uint64_t v112 = v110 - 32 * (v111 & 0x7FFFFFF);
          }
          uint64_t v113 = *((void *)v108 + 1);
          if (v113 == -2) {
            uint64_t v114 = 1;
          }
          else {
            uint64_t v114 = (2 * v113 + 3);
          }
          if (v107 >= HIDWORD(v255)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v254 + v107) = *(void *)(v112 + 32 * v114);
          uint64_t v107 = (v255 + 1);
          LODWORD(v255) = v255 + 1;
          v108 += 16;
        }
        while (v108 != v109);
        if (v107)
        {
          uint64_t v115 = (uint64_t *)v254;
          unsigned int v116 = *(_DWORD *)(v99 + 28);
          uint64_t v117 = 8 * v107;
          do
          {
            unsigned int v118 = sub_1CC7C8654(v99, *v115, v116);
            BOOL v18 = v116 >= v118;
            v116 -= v118;
            if (v116 == 0 || !v18) {
              goto LABEL_251;
            }
            ++v115;
            v117 -= 8;
          }
          while (v117);
        }
      }
      unsigned int v119 = *((_DWORD *)v103 + 5);
      unsigned int v231 = v119;
      if ((v119 & 0x40000000) != 0) {
        uint64_t v120 = (uint64_t **)*(v103 - 1);
      }
      else {
        uint64_t v120 = &v103[-4 * (v119 & 0x7FFFFFF)];
      }
      uint64_t v135 = 0;
      BOOL v136 = v260;
      unint64_t v247 = v261;
      unsigned int v137 = (llvm::BasicBlock *)v103[5];
      int v237 = *v120;
      uint64_t v138 = (uint64_t)v120[12];
      uint64_t v139 = *(void *)(v138 + 40);
      if (v139) {
        uint64_t v140 = (uint64_t **)(v139 - 24);
      }
      else {
        uint64_t v140 = 0;
      }
      if (*((unsigned __int8 *)v140 + 16) - 29 >= 0xB) {
        uint64_t v140 = 0;
      }
      uint64_t v141 = **v140;
      uint64_t v263 = &v265;
      int v264 = (void *)0x200000000;
      uint64_t v270 = v141;
      int v271 = &v279;
      int v272 = v280;
      uint64_t v273 = 0;
      int v274 = 0;
      __int16 v275 = 512;
      char v276 = 7;
      unsigned int v268 = 0;
      BOOL v269 = 0;
      uint64_t v277 = 0;
      uint64_t v278 = 0;
      uint64_t v279 = &unk_1F2616E88;
      v280[0] = &unk_1F2617008;
      unsigned int v268 = v140[5];
      BOOL v269 = v140 + 3;
      uint64_t v142 = (unsigned __int8 *)v140[6];
      unint64_t v250 = v142;
      if (v142)
      {
        llvm::MetadataTracking::track((uint64_t)&v250, v142, 2);
        uint64_t v135 = (uint64_t)v250;
      }
      sub_1CB8461A4((uint64_t)&v263, 0, v135);
      if (!v250) {
        goto LABEL_326;
      }
      int v218 = *v250;
      if ((v218 - 4) > 0x1E)
      {
        if ((v218 - 3) >= 0xFFFFFFFE) {
          BOOL v224 = v250;
        }
        else {
          BOOL v224 = 0;
        }
        if ((v218 - 3) < 0xFFFFFFFE)
        {
          if (v218 == 3) {
            *((void *)v250 + 1) = 0;
          }
          goto LABEL_326;
        }
        unint64_t v220 = (unint64_t)(v224 + 8);
      }
      else
      {
        if ((v250[1] & 0x7F) != 2 && !*((_DWORD *)v250 + 3)) {
          goto LABEL_326;
        }
        uint64_t v219 = *((void *)v250 + 2);
        if ((v219 & 4) == 0) {
          goto LABEL_326;
        }
        unint64_t v220 = v219 & 0xFFFFFFFFFFFFFFF8;
        if (!v220) {
          goto LABEL_326;
        }
      }
      v248[0] = &v250;
      sub_1CC5FA668(v220 + 16, v248);
LABEL_326:
      int v143 = *((_DWORD *)v103 + 5);
      if ((v143 & 0x40000000) != 0) {
        uint64_t v144 = (uint64_t **)*(v103 - 1);
      }
      else {
        uint64_t v144 = &v103[-4 * (v143 & 0x7FFFFFF)];
      }
      uint64_t v145 = (uint64_t)v144[8];
      v248[0] = "switchcmp";
      __int16 v249 = 259;
      uint64_t v240 = (uint64_t)v136;
      BOOL v244 = sub_1CB845F20((uint64_t)&v263, 32, v237, v145, (uint64_t)v248);
      if (v247)
      {
        uint64_t v146 = 0;
        int v232 = v103;
        do
        {
          uint64_t v147 = (_DWORD *)v136[v146];
          int v148 = (llvm::Value *)sub_1CBF73380((uint64_t)v147, (uint64_t)v137);
          unsigned int v149 = (llvm::Value *)sub_1CBF73380((uint64_t)v147, v138);
          __int16 v249 = 257;
          Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v263, v244, v149, v148, (const llvm::Twine *)v248, 0);
          int v151 = v147[5];
          uint64_t v152 = v151 & 0x7FFFFFF;
          if ((v151 & 0x7FFFFFF) != 0)
          {
            uint64_t v153 = 0;
            while (1)
            {
              unsigned int v154 = &v147[-8 * v152];
              if ((v151 & 0x40000000) != 0) {
                unsigned int v154 = (_DWORD *)*((void *)v147 - 1);
              }
              if (*(llvm::BasicBlock **)&v154[8 * v147[15] + 2 * v153] == v137) {
                break;
              }
              if (v152 == ++v153) {
                goto LABEL_337;
              }
            }
          }
          else
          {
LABEL_337:
            LODWORD(v153) = -1;
          }
          llvm::PHINode::removeIncomingValue((llvm::PHINode *)v147, v153, 1);
          int v155 = v147[5];
          uint64_t v156 = v155 & 0x7FFFFFF;
          if ((v155 & 0x7FFFFFF) != 0)
          {
            uint64_t v157 = 0;
            while (1)
            {
              uint64_t v158 = &v147[-8 * v156];
              if ((v155 & 0x40000000) != 0) {
                uint64_t v158 = (_DWORD *)*((void *)v147 - 1);
              }
              if (*(void *)&v158[8 * v147[15] + 2 * v157] == v138) {
                break;
              }
              if (v156 == ++v157) {
                goto LABEL_344;
              }
            }
          }
          else
          {
LABEL_344:
            LODWORD(v157) = -1;
          }
          llvm::PHINode::removeIncomingValue((llvm::PHINode *)v147, v157, 1);
          int v159 = v147[5];
          uint64_t v160 = v159 & 0x7FFFFFF;
          if ((v159 & 0x7FFFFFF) == v147[15])
          {
            unsigned int v173 = v160 + (v160 >> 1);
            if (v173 <= 2) {
              uint64_t v174 = 2;
            }
            else {
              uint64_t v174 = v173;
            }
            v147[15] = v174;
            if ((v159 & 0x40000000) != 0) {
              unint64_t v175 = (uint64_t *)*((void *)v147 - 1);
            }
            else {
              unint64_t v175 = (uint64_t *)&v147[-8 * v160];
            }
            long long __p = v175;
            uint64_t v176 = operator new(40 * v174);
            *((void *)v147 - 1) = v176;
            unsigned int v177 = v176;
            do
            {
              *unsigned int v177 = 0;
              v177[1] = 0;
              v177[2] = 0;
              v177[3] = v147;
              v177 += 4;
            }
            while (v177 != &v176[4 * v174]);
            int v178 = v147[5];
            if ((v178 & 0x40000000) != 0) {
              uint64_t v179 = (uint64_t)v176;
            }
            else {
              uint64_t v179 = (uint64_t)&v147[-8 * (v178 & 0x7FFFFFF)];
            }
            sub_1CC5E4108((uint64_t)v248, __p, &__p[4 * v160], v179);
            if (v160)
            {
              memmove((void *)(v179 + 32 * v174), &__p[4 * v160], 8 * v160);
              uint64_t v180 = 4 * v160;
              do
              {
                int v181 = &__p[v180];
                if (__p[v180 - 4])
                {
                  *(void *)*(v181 - 2) = *(v181 - 3);
                  uint64_t v182 = *(v181 - 3);
                  if (v182) {
                    *(void *)(v182 + 16) = *(v181 - 2);
                  }
                }
                v180 -= 4;
              }
              while (v180 * 8);
            }
            operator delete(__p);
            int v159 = v147[5];
            unsigned int v103 = v232;
            BOOL v136 = (void *)v240;
          }
          uint64_t v161 = (v159 + 1) & 0x7FFFFFF;
          v147[5] = v159 & 0xF8000000 | (v159 + 1) & 0x7FFFFFF;
          if ((v159 & 0x40000000) != 0) {
            unsigned int v162 = (_DWORD *)*((void *)v147 - 1);
          }
          else {
            unsigned int v162 = &v147[-8 * v161];
          }
          uint64_t v163 = (v161 - 1);
          uint64_t v164 = &v162[8 * v163];
          if (*(void *)v164)
          {
            **((void **)v164 + 2) = *((void *)v164 + 1);
            uint64_t v172 = *((void *)v164 + 1);
            if (v172) {
              *(void *)(v172 + 16) = *((void *)v164 + 2);
            }
          }
          *(void *)uint64_t v164 = Select;
          if (Select)
          {
            uint64_t v167 = *((void *)Select + 1);
            int v166 = (void *)((char *)Select + 8);
            uint64_t v165 = v167;
            int v168 = &v162[8 * v163];
            *((void *)v168 + 1) = v167;
            if (v167) {
              *(void *)(v165 + 16) = v168 + 2;
            }
            *((void *)v168 + 2) = v166;
            *int v166 = v164;
          }
          int v169 = v147[5];
          uint64_t v170 = v169 & 0x7FFFFFF;
          if ((v169 & 0x40000000) != 0) {
            uint64_t v171 = (_DWORD *)*((void *)v147 - 1);
          }
          else {
            uint64_t v171 = &v147[-8 * v170];
          }
          *(void *)&v171[8 * v147[15] + 2 * (v170 - 1)] = v138;
          ++v146;
        }
        while (v146 != v247);
      }
      if (v258 >= (unint64_t)HIDWORD(v258)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v183 = ((v231 >> 1) & 0x3FFFFFF) - 1;
      *((void *)v257 + v258) = v138;
      LODWORD(v258) = v258 + 1;
      uint64_t v184 = ((v231 >> 1) & 0x3FFFFFF) != 1;
      if (v184 == v183)
      {
LABEL_381:
        if (v263 != &v265) {
          free(v263);
        }
        uint64_t v186 = *(void *)v251;
        uint64_t v185 = *((void *)v251 + 1);
        int v187 = *(_DWORD *)(*(void *)v251 + 20);
        if ((v187 & 0x40000000) != 0) {
          uint64_t v188 = *(void *)(v186 - 8);
        }
        else {
          uint64_t v188 = v186 - 32 * (v187 & 0x7FFFFFF);
        }
        uint64_t v205 = 0;
        if (v185 == -2) {
          uint64_t v206 = 1;
        }
        else {
          uint64_t v206 = (2 * v185 + 3);
        }
        uint64_t v207 = *(void *)(v188 + 32 * v206);
        uint64_t v208 = **v103;
        uint64_t v263 = &v265;
        int v264 = (void *)0x200000000;
        uint64_t v270 = v208;
        int v271 = &v279;
        int v272 = v280;
        uint64_t v273 = 0;
        int v274 = 0;
        __int16 v275 = 512;
        char v276 = 7;
        unsigned int v268 = 0;
        BOOL v269 = 0;
        uint64_t v277 = 0;
        uint64_t v278 = 0;
        uint64_t v279 = &unk_1F2616E88;
        v280[0] = &unk_1F2617008;
        unsigned int v268 = v103[5];
        BOOL v269 = v103 + 3;
        unsigned int v209 = (unsigned __int8 *)v103[6];
        unint64_t v250 = v209;
        if (v209)
        {
          llvm::MetadataTracking::track((uint64_t)&v250, v209, 2);
          uint64_t v205 = (uint64_t)v250;
        }
        sub_1CB8461A4((uint64_t)&v263, 0, v205);
        if (!v250)
        {
LABEL_427:
          unint64_t v210 = (char *)operator new(0x60uLL);
          *((_DWORD *)v210 + 13) = *((_DWORD *)v210 + 13) & 0x38000000 | 1;
          *(void *)unint64_t v210 = 0;
          *((void *)v210 + 2) = 0;
          *((void *)v210 + 1) = 0;
          *((void *)v210 + 4) = ***(void ***)v207 + 1576;
          *((void *)v210 + 3) = v210 + 32;
          *((void *)v210 + 5) = 0;
          v210[48] = 30;
          v210[49] = 0;
          *((_WORD *)v210 + 25) = 0;
          *((_DWORD *)v210 + 13) = 1;
          *(_OWORD *)(v210 + 56) = 0u;
          *(_OWORD *)(v210 + 72) = 0u;
          *((_DWORD *)v210 + 22) = 0;
          *(void *)unint64_t v210 = v207;
          uint64_t v211 = (void *)(v207 + 8);
          uint64_t v212 = *(void *)(v207 + 8);
          *((void *)v210 + 1) = v212;
          if (v212) {
            *(void *)(v212 + 16) = v210 + 8;
          }
          *((void *)v210 + 2) = v211;
          *uint64_t v211 = v210;
          __int16 v249 = 257;
          sub_1CB844E0C((uint64_t *)&v263, (llvm::Instruction *)(v210 + 32), (uint64_t)v248);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        int v221 = *v250;
        if ((v221 - 4) > 0x1E)
        {
          if ((v221 - 3) >= 0xFFFFFFFE) {
            int v225 = v250;
          }
          else {
            int v225 = 0;
          }
          if ((v221 - 3) < 0xFFFFFFFE)
          {
            if (v221 == 3) {
              *((void *)v250 + 1) = 0;
            }
            goto LABEL_427;
          }
          unint64_t v223 = (unint64_t)(v225 + 8);
        }
        else
        {
          if ((v250[1] & 0x7F) != 2 && !*((_DWORD *)v250 + 3)) {
            goto LABEL_427;
          }
          uint64_t v222 = *((void *)v250 + 2);
          if ((v222 & 4) == 0) {
            goto LABEL_427;
          }
          unint64_t v223 = v222 & 0xFFFFFFFFFFFFFFF8;
          if (!v223) {
            goto LABEL_427;
          }
        }
        v248[0] = &v250;
        sub_1CC5FA668(v223 + 16, v248);
        goto LABEL_427;
      }
      int v189 = 2 * v184 + 2;
      while (1)
      {
        int v190 = *((_DWORD *)v103 + 5);
        if ((v190 & 0x40000000) != 0) {
          uint64_t v191 = (uint64_t **)*(v103 - 1);
        }
        else {
          uint64_t v191 = &v103[-4 * (v190 & 0x7FFFFFF)];
        }
        uint64_t v192 = (v189 + 1);
        if (v184 == -2) {
          uint64_t v192 = 1;
        }
        if ((v190 & 0x40000000) != 0) {
          int v193 = (uint64_t **)*(v103 - 1);
        }
        else {
          int v193 = &v103[-4 * (v190 & 0x7FFFFFF)];
        }
        uint64_t v194 = 0;
        uint64_t v195 = (llvm::Type *)v191[4 * v192];
        uint64_t v196 = (uint64_t)v193[4 * (v189 & 0xFFFFFFFE)];
        uint64_t v197 = *((void *)v195 + 5);
        if (v197) {
          uint64_t v198 = v197 - 24;
        }
        else {
          uint64_t v198 = 0;
        }
        if (*(unsigned __int8 *)(v198 + 16) - 29 >= 0xB) {
          uint64_t v198 = 0;
        }
        unsigned int v268 = *(uint64_t **)(v198 + 40);
        BOOL v269 = (uint64_t **)(v198 + 24);
        unsigned int v199 = *(unsigned __int8 **)(v198 + 48);
        unint64_t v250 = v199;
        if (v199)
        {
          llvm::MetadataTracking::track((uint64_t)&v250, v199, 2);
          uint64_t v194 = (uint64_t)v250;
        }
        sub_1CB8461A4((uint64_t)&v263, 0, v194);
        if (!v250) {
          goto LABEL_402;
        }
        int v201 = *v250;
        if ((v201 - 4) > 0x1E)
        {
          if ((v201 - 3) >= 0xFFFFFFFE) {
            uint64_t v204 = v250;
          }
          else {
            uint64_t v204 = 0;
          }
          if ((v201 - 3) < 0xFFFFFFFE)
          {
            if (v201 == 3) {
              *((void *)v250 + 1) = 0;
            }
            goto LABEL_402;
          }
          unint64_t v203 = (unint64_t)(v204 + 8);
        }
        else
        {
          if ((v250[1] & 0x7F) != 2 && !*((_DWORD *)v250 + 3)) {
            goto LABEL_402;
          }
          uint64_t v202 = *((void *)v250 + 2);
          if ((v202 & 4) == 0) {
            goto LABEL_402;
          }
          unint64_t v203 = v202 & 0xFFFFFFFFFFFFFFF8;
          if (!v203) {
            goto LABEL_402;
          }
        }
        v248[0] = &v250;
        sub_1CC5FA668(v203 + 16, v248);
LABEL_402:
        v248[0] = "switchcmp";
        __int16 v249 = 259;
        unsigned int v200 = sub_1CB845F20((uint64_t)&v263, 32, v237, v196, (uint64_t)v248);
        sub_1CC7C87A8(v138, v195, v200, v240, v247, 1);
        llvm::BasicBlock::removePredecessor(v195, v137, 0);
        if (v258 >= (unint64_t)HIDWORD(v258)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v257 + v258) = v195;
        LODWORD(v258) = v258 + 1;
        ++v184;
        v189 += 2;
        if (v183 == v184) {
          goto LABEL_381;
        }
      }
    }
LABEL_251:
    char v106 = 0;
    uint64_t v3 = v238;
    if (v254 != v256) {
      free(v254);
    }
    if (v257 != v259) {
      free(v257);
    }
    if (v260 != v262) {
      free(v260);
    }
LABEL_312:
    if (v251 != v253) {
      free(v251);
    }
    uint64_t v39 = v245;
    if (v106) {
      goto LABEL_488;
    }
LABEL_315:
    uint64_t v8 = *(void *)(v39 + 8);
  }
  while (v8 != v3);
  char v9 = v235;
  return v9 & 1;
}

uint64_t sub_1CC7C7A84(llvm::BasicBlock *a1)
{
  uint64_t result = llvm::BasicBlock::getSinglePredecessor(a1);
  if (result)
  {
    uint64_t v2 = *(void *)(result + 40);
    if (v2 == result + 40)
    {
      uint64_t v4 = 0;
    }
    else
    {
      if (v2) {
        uint64_t v3 = v2 - 24;
      }
      else {
        uint64_t v3 = 0;
      }
      if (*(unsigned __int8 *)(v3 + 16) - 29 >= 0xB) {
        uint64_t v4 = 0;
      }
      else {
        uint64_t v4 = v3;
      }
    }
    if (*(unsigned char *)(v4 + 16) == 30)
    {
      if ((*(_DWORD *)(v4 + 20) & 0x7FFFFFF) == 3) {
        int v5 = 2;
      }
      else {
        int v5 = 1;
      }
    }
    else
    {
      int v5 = 0;
      switch(*(unsigned char *)(v4 + 16))
      {
        case 0x1E:
          __break(1u);
          goto LABEL_19;
        case 0x1F:
          int v5 = (*(_DWORD *)(v4 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 0x20:
        case 0x26:
          int v5 = (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) - 1;
          break;
        case 0x21:
          int v5 = 2;
          break;
        case 0x24:
LABEL_19:
          int v5 = *(_WORD *)(v4 + 18) & 1;
          break;
        case 0x25:
          int v5 = 1;
          break;
        case 0x27:
          int v5 = *(_DWORD *)(v4 + 80) + 1;
          break;
        default:
          return v5 == 1;
      }
    }
    return v5 == 1;
  }
  return result;
}

uint64_t sub_1CC7C7B94(uint64_t a1)
{
  v60[4] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1 == a1 + 40)
  {
    uint64_t v2 = 0;
  }
  else
  {
    if (v1) {
      uint64_t v2 = v1 - 24;
    }
    else {
      uint64_t v2 = 0;
    }
    if (*(unsigned __int8 *)(v2 + 16) - 29 >= 0xB) {
      uint64_t v2 = 0;
    }
  }
  if (*(unsigned char *)(v2 + 16) != 30) {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(void *)(v2 - 32);
  uint64_t v4 = v3 + 40;
  uint64_t v5 = *(void *)(v3 + 48);
  if (v5 == v4) {
    return 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = v5 ? v5 - 24 : 0;
    int v8 = *(unsigned __int8 *)(v7 + 16);
    BOOL v9 = v8 == 83;
    uint64_t v10 = v8 == 83 ? v7 : 0;
    if (!v5 || !v9) {
      break;
    }
    int v11 = *(_DWORD *)(v10 + 20);
    uint64_t v12 = v11 & 0x7FFFFFF;
    if ((v11 & 0x7FFFFFF) != 0)
    {
      uint64_t v13 = 0;
      while (1)
      {
        uint64_t v14 = v10 - 32 * v12;
        if ((v11 & 0x40000000) != 0) {
          uint64_t v14 = *(void *)(v10 - 8);
        }
        if (*(void *)(v14 + 32 * *(unsigned int *)(v10 + 60) + 8 * v13) == a1) {
          break;
        }
        if (v12 == ++v13) {
          goto LABEL_28;
        }
      }
    }
    else
    {
LABEL_28:
      LODWORD(v13) = -1;
    }
    if ((v11 & 0x40000000) != 0) {
      uint64_t v15 = *(void *)(v10 - 8);
    }
    else {
      uint64_t v15 = v10 - 32 * v12;
    }
    if (*(unsigned __int8 *)(*(void *)(v15 + 32 * (v13 == 0)) + 16) - 11 >= 2)
    {
      if (v6) {
        return 0;
      }
    }
    else
    {
      uint64_t v7 = v6;
    }
    uint64_t v5 = *(void *)(v5 + 8);
    uint64_t v6 = v7;
    if (v5 == v4)
    {
      if (!v7) {
        return 0;
      }
      goto LABEL_39;
    }
  }
  uint64_t v7 = v6;
  if (!v6) {
    return 0;
  }
LABEL_39:
  uint64_t v16 = *(void *)(v7 + 8);
  if (!v16) {
    return 0;
  }
  if (*(void *)(v16 + 8)) {
    return 0;
  }
  uint64_t v17 = *(void *)(v16 + 24);
  if (*(unsigned char *)(v17 + 16) != 84) {
    return 0;
  }
  uint64_t v18 = *(void *)(v17 - 32);
  if (!v18) {
    return 0;
  }
  if (*(unsigned char *)(v18 + 16)) {
    return 0;
  }
  if (*(void *)(v18 + 24) != *(void *)(v17 + 72)) {
    return 0;
  }
  if ((*(unsigned char *)(v18 + 33) & 0x20) == 0) {
    return 0;
  }
  int v21 = *(_DWORD *)(v18 + 36);
  if ((v21 - 1992) >= 2 && v21 != 2470 && v21 != 1838) {
    return 0;
  }
  int v22 = *(_DWORD *)(v7 + 20);
  uint64_t v23 = v22 & 0x7FFFFFF;
  if ((v22 & 0x7FFFFFF) != 0)
  {
    uint64_t v24 = 0;
    while (1)
    {
      uint64_t v25 = v7 - 32 * v23;
      if ((v22 & 0x40000000) != 0) {
        uint64_t v25 = *(void *)(v7 - 8);
      }
      if (*(void *)(v25 + 32 * *(unsigned int *)(v7 + 60) + 8 * v24) == a1) {
        break;
      }
      if (v23 == ++v24) {
        goto LABEL_57;
      }
    }
  }
  else
  {
LABEL_57:
    LODWORD(v24) = -1;
  }
  if ((v22 & 0x40000000) != 0) {
    uint64_t v26 = *(void *)(v7 - 8);
  }
  else {
    uint64_t v26 = v7 - 32 * v23;
  }
  uint64_t v27 = *(void *)(v26 + 32 * (v24 == 0));
  uint64_t v28 = sub_1CBF73380(v7, a1);
  uint64_t v58 = v60;
  uint64_t v59 = 0x400000000;
  unsigned int v55 = 0;
  int v29 = *(unsigned __int8 *)(v17 + 16);
  if (v29 == 84)
  {
    uint64_t v30 = 0;
  }
  else if (v29 == 39)
  {
    uint64_t v30 = (*(_DWORD *)(v17 + 80) + 1);
  }
  else
  {
    uint64_t v30 = 2;
  }
  int v31 = *(_DWORD *)(v17 + 20);
  if (v31 < 0 && (uint64_t v53 = v17 - 32 * (v31 & 0x7FFFFFF), v54 = *(void *)(v53 - 8), (v54 & 0xFFFFFFFF0) != 0))
  {
    uint64_t v33 = -(uint64_t)(v31 & 0x7FFFFFF);
    uint64_t v32 = (*(_DWORD *)(v53 - 12) - *(_DWORD *)(v53 - v54));
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v33 = -(uint64_t)(v31 & 0x7FFFFFF);
  }
  unint64_t v34 = -32 * v30 - 32 * v32 - 32 * v33 - 32;
  if ((v34 & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v35 = -(uint64_t)(v34 >> 5);
    uint64_t v36 = v17;
    do
    {
      uint64_t v37 = *(void *)(v36 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
      if (v37 == v7)
      {
        if (v59 >= (unint64_t)HIDWORD(v59)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v58 + v59) = v27;
        LODWORD(v59) = v59 + 1;
        unint64_t v38 = v55;
        uint64_t v37 = v28;
      }
      else
      {
        if (v59 >= (unint64_t)HIDWORD(v59)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v58 + v59) = v37;
        LODWORD(v59) = v59 + 1;
        unint64_t v38 = v55;
      }
      if (v38 >= 4) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(&v56 + v38) = v37;
      ++v55;
      v36 += 32;
    }
    while (!__CFADD__(v35++, 1));
    int v40 = v58;
  }
  else
  {
    int v40 = v60;
  }
  int v41 = *(_DWORD *)(*(void *)(v17 - 32) + 36);
  if (v41 != 2470)
  {
    if (v41 == 1993)
    {
      uint64_t v19 = 0;
      uint64_t v45 = v40[1];
      if (*(unsigned char *)(*v40 + 16) == 16) {
        uint64_t v46 = *v40;
      }
      else {
        uint64_t v46 = 0;
      }
      uint64_t v47 = v56;
      uint64_t v48 = v57;
      if (*(unsigned char *)(v56 + 16) != 16) {
        uint64_t v47 = 0;
      }
      if (*(unsigned char *)(v57 + 16) != 16) {
        uint64_t v48 = 0;
      }
      if (!v45 || *(unsigned char *)(v45 + 16) != 16) {
        goto LABEL_112;
      }
      BOOL v49 = (void *)(v45 + 24);
      if (*(_DWORD *)(v45 + 32) >= 0x41u) {
        BOOL v49 = (void *)*v49;
      }
      uint64_t v19 = 0;
      if (*v49 || !v46) {
        goto LABEL_112;
      }
      uint64_t v50 = (void *)(v46 + 24);
      if (*(_DWORD *)(v46 + 32) >= 0x41u) {
        uint64_t v50 = (void *)*v50;
      }
      if (!*v50)
      {
        uint64_t v19 = 0;
        if (!v48 || !v47) {
          goto LABEL_112;
        }
        unsigned int v51 = (void *)(v48 + 24);
        if (*(_DWORD *)(v48 + 32) >= 0x41u) {
          unsigned int v51 = (void *)*v51;
        }
        if (*v51) {
          goto LABEL_94;
        }
        unsigned int v52 = (void *)(v47 + 24);
        if (*(_DWORD *)(v47 + 32) >= 0x41u) {
          unsigned int v52 = (void *)*v52;
        }
        if (*v52) {
          goto LABEL_94;
        }
      }
    }
    else if (v41 == 1992)
    {
      goto LABEL_83;
    }
LABEL_111:
    uint64_t v19 = 0;
    goto LABEL_112;
  }
LABEL_83:
  uint64_t v19 = 0;
  uint64_t v42 = *v40;
  if (*v40 && *(unsigned char *)(v42 + 16) == 16)
  {
    uint64_t v43 = (void *)(v42 + 24);
    if (*(_DWORD *)(v42 + 32) >= 0x41u) {
      uint64_t v43 = (void *)*v43;
    }
    if (*v43) {
      BOOL v44 = 0;
    }
    else {
      BOOL v44 = *(unsigned char *)(v56 + 16) == 16;
    }
    if (v44 && (v41 != 2470 || sub_1CD0FF278(v17)))
    {
LABEL_94:
      uint64_t v19 = 1;
      goto LABEL_112;
    }
    goto LABEL_111;
  }
LABEL_112:
  if (v40 != v60) {
    free(v40);
  }
  return v19;
}

void sub_1CC7C8154(void *a1, llvm::Type *a2, int a3)
{
  v50[8] = *MEMORY[0x1E4F143B8];
  uint64_t SinglePredecessor = (llvm::BasicBlock *)llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)a1);
  uint64_t v7 = (void *)a1[5];
  if (v7 == a1 + 5)
  {
    BOOL v9 = 0;
  }
  else
  {
    if (v7) {
      int v8 = (unsigned __int8 *)(v7 - 3);
    }
    else {
      int v8 = 0;
    }
    if (v8[16] - 29 >= 0xB) {
      BOOL v9 = 0;
    }
    else {
      BOOL v9 = (llvm::Instruction *)v8;
    }
  }
  uint64_t Successor = llvm::Instruction::getSuccessor(v9, 0);
  uint64_t v11 = Successor;
  uint64_t v12 = (void *)*((void *)SinglePredecessor + 5);
  if (v12 == (void *)((char *)SinglePredecessor + 40))
  {
    uint64_t v13 = 0;
  }
  else
  {
    if (v12) {
      uint64_t v13 = (uint64_t **)(v12 - 3);
    }
    else {
      uint64_t v13 = 0;
    }
    if (*((unsigned __int8 *)v13 + 16) - 29 >= 0xB) {
      uint64_t v13 = 0;
    }
  }
  if (*((unsigned char *)v13 + 16) == 30) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v48 = v50;
  uint64_t v49 = 0x800000000;
  sub_1CC7C86FC(Successor, (uint64_t)&v48);
  if (a2)
  {
    uint64_t v15 = (uint64_t)a1;
    uint64_t v16 = a2;
    int v17 = a3;
  }
  else
  {
    int v17 = a3 ^ 1;
    uint64_t v15 = (uint64_t)SinglePredecessor;
    uint64_t v16 = (llvm::Type *)a1;
  }
  sub_1CC7C87A8(v15, v16, (llvm::Value *)*(v14 - 12), (uint64_t)v48, v49, v17);
  uint64_t v18 = 0;
  uint64_t v19 = **v14;
  v39[1] = (void *)0x200000000;
  v40[6] = v19;
  v40[7] = &v46;
  v40[8] = &v47;
  v40[9] = 0;
  int v41 = 0;
  __int16 v42 = 512;
  char v43 = 7;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = &unk_1F2616E88;
  uint64_t v47 = &unk_1F2617008;
  v40[4] = v14[5];
  v40[5] = v14 + 3;
  int v20 = (unsigned __int8 *)v14[6];
  unint64_t v38 = v20;
  v39[0] = v40;
  if (v20)
  {
    llvm::MetadataTracking::track((uint64_t)&v38, v20, 2);
    uint64_t v18 = (uint64_t)v38;
  }
  sub_1CB8461A4((uint64_t)v39, 0, v18);
  if (!v38)
  {
LABEL_26:
    if (a2)
    {
      llvm::BasicBlock::removePredecessor(a2, SinglePredecessor, 0);
      int v21 = (char *)operator new(0x60uLL);
      *((_DWORD *)v21 + 13) = *((_DWORD *)v21 + 13) & 0x38000000 | 1;
      *(void *)int v21 = 0;
      *((void *)v21 + 2) = 0;
      *((void *)v21 + 1) = 0;
      int v22 = v21 + 8;
      *((void *)v21 + 4) = **(void **)*a1 + 1576;
      uint64_t v23 = (llvm::Instruction *)(v21 + 32);
      *((void *)v21 + 3) = v21 + 32;
      *((void *)v21 + 5) = 0;
      v21[48] = 30;
      v21[49] = 0;
      *((_WORD *)v21 + 25) = 0;
      *((_DWORD *)v21 + 13) = 1;
      *((_DWORD *)v21 + 22) = 0;
      *(_OWORD *)(v21 + 72) = 0u;
      *(_OWORD *)(v21 + 56) = 0u;
      uint64_t v24 = a1 + 1;
      uint64_t v25 = a1[1];
      *(void *)int v21 = a1;
    }
    else
    {
      llvm::BasicBlock::removePredecessor((llvm::Type *)a1, SinglePredecessor, 0);
      int v21 = (char *)operator new(0x60uLL);
      *((_DWORD *)v21 + 13) = *((_DWORD *)v21 + 13) & 0x38000000 | 1;
      *(void *)int v21 = 0;
      *((void *)v21 + 2) = 0;
      *((void *)v21 + 1) = 0;
      int v22 = v21 + 8;
      *((void *)v21 + 4) = ***(void ***)v11 + 1576;
      uint64_t v23 = (llvm::Instruction *)(v21 + 32);
      *((void *)v21 + 3) = v21 + 32;
      *((void *)v21 + 5) = 0;
      v21[48] = 30;
      v21[49] = 0;
      *((_WORD *)v21 + 25) = 0;
      *((_DWORD *)v21 + 13) = 1;
      *(_OWORD *)(v21 + 56) = 0u;
      *(_OWORD *)(v21 + 72) = 0u;
      *((_DWORD *)v21 + 22) = 0;
      *(void *)int v21 = v11;
      uint64_t v24 = (void *)(v11 + 8);
      uint64_t v25 = *(void *)(v11 + 8);
    }
    *int v22 = v25;
    if (v25) {
      *(void *)(v25 + 16) = v22;
    }
    *((void *)v21 + 2) = v24;
    *uint64_t v24 = v21;
    __int16 v37 = 257;
    sub_1CB844E0C((uint64_t *)v39, v23, (uint64_t)v36);
    int v26 = *((_DWORD *)v14 + 5);
    if ((v26 & 0x40000000) != 0)
    {
      uint64_t v28 = (uint64_t **)*(v14 - 1);
      uint64_t v27 = v26 & 0x7FFFFFF;
      if (!v27) {
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v27 = v26 & 0x7FFFFFF;
      uint64_t v28 = &v14[-4 * v27];
      if (!v27) {
        goto LABEL_38;
      }
    }
    uint64_t v29 = 32 * v27;
    uint64_t v30 = v28 + 2;
    do
    {
      if (*(v30 - 2))
      {
        **uint64_t v30 = *(v30 - 1);
        uint64_t v31 = (uint64_t)*(v30 - 1);
        if (v31) {
          *(void *)(v31 + 16) = *v30;
        }
      }
      *(v30 - 2) = 0;
      v30 += 4;
      v29 -= 32;
    }
    while (v29);
LABEL_38:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  int v32 = *v38;
  if ((v32 - 4) > 0x1E)
  {
    if ((v32 - 3) >= 0xFFFFFFFE) {
      uint64_t v35 = v38;
    }
    else {
      uint64_t v35 = 0;
    }
    if ((v32 - 3) < 0xFFFFFFFE)
    {
      if (v32 == 3) {
        *((void *)v38 + 1) = 0;
      }
      goto LABEL_26;
    }
    unint64_t v34 = (unint64_t)(v35 + 8);
  }
  else
  {
    if ((v38[1] & 0x7F) != 2 && !*((_DWORD *)v38 + 3)) {
      goto LABEL_26;
    }
    uint64_t v33 = *((void *)v38 + 2);
    if ((v33 & 4) == 0) {
      goto LABEL_26;
    }
    unint64_t v34 = v33 & 0xFFFFFFFFFFFFFFF8;
    if (!v34) {
      goto LABEL_26;
    }
  }
  v36[0] = &v38;
  sub_1CC5FA668(v34 + 16, v36);
  goto LABEL_26;
}

uint64_t sub_1CC7C8654(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = a2 + 40;
  uint64_t v4 = *(void *)(a2 + 48);
  if (v4 == a2 + 40) {
    return 0;
  }
  unint64_t v6 = 0;
  uint64_t v7 = (uint64_t *)(a1 + 48);
  unint64_t v8 = a3;
  do
  {
    uint64_t v9 = v4 ? v4 - 24 : 0;
    if (*(unsigned __int8 *)(v9 + 16) - 29 < 0xB) {
      break;
    }
    v6 += sub_1CD1098E0(v9, *(void *)(a1 + 40), v7, 0);
    if (v6 >= v8) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v4 = *(void *)(v4 + 8);
  }
  while (v4 != v3);
  return v6;
}

uint64_t sub_1CC7C86FC(uint64_t result, uint64_t a2)
{
  for (uint64_t i = *(void *)(result + 48); i != result + 40; ++*(_DWORD *)(a2 + 8))
  {
    if (i) {
      uint64_t v3 = i - 24;
    }
    else {
      uint64_t v3 = 0;
    }
    if (!i || *(unsigned char *)(v3 + 16) != 83) {
      break;
    }
    uint64_t i = *(void *)(i + 8);
    unint64_t v4 = *(unsigned int *)(a2 + 8);
    if (v4 >= *(unsigned int *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a2 + 8 * v4) = v3;
  }
  return result;
}

void sub_1CC7C87A8(uint64_t a1, void *a2, llvm::Value *a3, uint64_t a4, unint64_t a5, int a6)
{
  int v6 = a6;
  unint64_t v7 = a5;
  uint64_t v8 = a4;
  v168[1] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = (void *)a2[6];
  uint64_t v12 = (llvm::ValueAsMetadata *)(v11 - 3);
  if (v11) {
    uint64_t v13 = v11 - 3;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v11 && *((unsigned char *)v13 + 16) == 83)
  {
    int v14 = *((_DWORD *)v11 - 1);
    if ((v14 & 0x40000000) != 0) {
      uint64_t v15 = (llvm::Value **)*(v11 - 4);
    }
    else {
      uint64_t v15 = (llvm::Value **)((char *)v12 - 32 * (v14 & 0x7FFFFFF));
    }
    llvm::Value::doRAUW(v12, *v15, (llvm::Value *)1);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  uint64_t v16 = *(void *)(a1 + 40);
  if (v16 == a1 + 40)
  {
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = v16 - 24;
    if (!v16) {
      uint64_t v17 = 0;
    }
    if (*(unsigned __int8 *)(v17 + 16) - 29 >= 0xB) {
      uint64_t v17 = 0;
    }
  }
  uint64_t v18 = (void *)a2[5];
  if (v18 == a2 + 5)
  {
    uint64_t v19 = 0;
  }
  else
  {
    if (v18) {
      uint64_t v19 = v18 - 3;
    }
    else {
      uint64_t v19 = 0;
    }
    if (*((unsigned __int8 *)v19 + 16) - 29 >= 0xB) {
      uint64_t v19 = 0;
    }
  }
  int v20 = v19 + 3;
  if (v11 != v19 + 3 && (void *)v17 != v19)
  {
    int v21 = (uint64_t *)(v17 + 24);
    *(_WORD *)(a1 + 18) &= ~0x8000u;
    if ((void *)a1 == a2)
    {
LABEL_37:
      uint64_t v28 = *v20;
      uint64_t v29 = *v11;
      *(void *)(v29 + 8) = v20;
      *int v20 = v29;
      uint64_t v30 = *v21;
      *(void *)(v28 + 8) = v21;
      *uint64_t v11 = v30;
      *(void *)(v30 + 8) = v11;
      uint64_t *v21 = v28;
      uint64_t v16 = *(void *)(a1 + 40);
      uint64_t v8 = a4;
      goto LABEL_38;
    }
    uint64_t v22 = *(void *)(a1 + 56);
    if (v22) {
      uint64_t v23 = *(llvm::ValueSymbolTable **)(v22 + 104);
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v24 = a2[7];
    if (v24) {
      uint64_t v25 = *(llvm::ValueSymbolTable **)(v24 + 104);
    }
    else {
      uint64_t v25 = 0;
    }
    if (v23 == v25)
    {
      int v26 = v11;
      do
      {
        uint64_t v27 = v26 - 3;
        if (!v26) {
          uint64_t v27 = 0;
        }
        v27[5] = a1;
        int v26 = (uint64_t *)v26[1];
      }
      while (v26 != v20);
      goto LABEL_37;
    }
    uint64_t v139 = v11;
    while (1)
    {
      unsigned int v118 = (llvm::Value *)(v139 - 3);
      if (!v139) {
        unsigned int v118 = 0;
      }
      uint64_t v141 = v118;
      int v137 = *((_DWORD *)v118 + 5) & 0x10000000;
      if (v25)
      {
        if (v137) {
          break;
        }
      }
LABEL_215:
      *((void *)v141 + 5) = a1;
      if (v23 && v137) {
        llvm::ValueSymbolTable::reinsertValue(v23, v141);
      }
      uint64_t v139 = (uint64_t *)v139[1];
      int v6 = a6;
      unint64_t v7 = a5;
      if (v139 == v20) {
        goto LABEL_37;
      }
    }
    uint64_t v119 = ***(void ***)v118;
    uint64_t v120 = *(void *)(v119 + 152);
    uint64_t v121 = *(unsigned int *)(v119 + 168);
    if (v121)
    {
      LODWORD(v122) = (v121 - 1) & ((v141 >> 4) ^ (v141 >> 9));
      unsigned int v123 = (llvm::Value **)(v120 + 16 * v122);
      uint64_t v124 = *v123;
      if (*v123 == v141) {
        goto LABEL_202;
      }
      int v125 = 1;
      while (v124 != (llvm::Value *)-4096)
      {
        int v126 = v122 + v125++;
        uint64_t v122 = v126 & (v121 - 1);
        uint64_t v124 = *(llvm::Value **)(v120 + 16 * v122);
        if (v124 == v141)
        {
          unsigned int v123 = (llvm::Value **)(v120 + 16 * v122);
          goto LABEL_202;
        }
      }
    }
    unsigned int v123 = (llvm::Value **)(v120 + 16 * v121);
LABEL_202:
    uint64_t v127 = *((unsigned int *)v25 + 2);
    if (v127)
    {
      uint64_t v128 = (size_t *)v123[1];
      uint64_t v136 = *((unsigned int *)v25 + 5);
      __s1 = (unsigned __int8 *)v128 + v136;
      __uint64_t n = *v128;
      if (*v128)
      {
        int v147 = 0;
        size_t v129 = *v128;
        unsigned int v130 = __s1;
        do
        {
          int v131 = *v130++;
          int v147 = 33 * v147 + v131;
          --v129;
        }
        while (v129);
      }
      else
      {
        int v147 = 0;
      }
      unsigned int v142 = v127 - 1;
      uint64_t v143 = *(void *)v25;
      uint64_t v140 = *(void *)v25 + 8 * v127 + 8;
      int v132 = 1;
      int v133 = v147;
      while (1)
      {
        uint64_t v134 = v133 & v142;
        uint64_t v135 = *(void **)(v143 + 8 * v134);
        if (v135 != (void *)-8)
        {
          if (!v135) {
            goto LABEL_215;
          }
          if (*(_DWORD *)(v140 + 4 * v134) == v147 && __n == *v135 && (!__n || !memcmp(__s1, (char *)v135 + v136, __n))) {
            break;
          }
        }
        int v133 = v132 + v134;
        ++v132;
      }
      *(void *)(v143 + 8 * (int)v134) = -8;
      *(int32x2_t *)((char *)v25 + 12) = vadd_s32(*(int32x2_t *)((char *)v25 + 12), (int32x2_t)0x1FFFFFFFFLL);
    }
    goto LABEL_215;
  }
LABEL_38:
  uint64_t v31 = 0;
  if (v16) {
    int v32 = (uint64_t **)(v16 - 24);
  }
  else {
    int v32 = 0;
  }
  if (*((unsigned __int8 *)v32 + 16) - 29 >= 0xB) {
    int v32 = 0;
  }
  uint64_t v33 = **v32;
  v154[0] = v155;
  v154[1] = (void *)0x200000000;
  uint64_t v158 = v33;
  int v159 = &v167;
  uint64_t v160 = v168;
  uint64_t v161 = 0;
  int v162 = 0;
  __int16 v163 = 512;
  char v164 = 7;
  uint64_t v156 = 0;
  uint64_t v157 = 0;
  uint64_t v165 = 0;
  uint64_t v166 = 0;
  uint64_t v167 = &unk_1F2616E88;
  v168[0] = &unk_1F2617008;
  uint64_t v156 = v32[5];
  uint64_t v157 = v32 + 3;
  unint64_t v34 = (unsigned __int8 *)v32[6];
  uint64_t v153 = v34;
  if (v34)
  {
    llvm::MetadataTracking::track((uint64_t)&v153, v34, 2);
    uint64_t v31 = (uint64_t)v153;
  }
  sub_1CB8461A4((uint64_t)v154, 0, v31);
  uint64_t v35 = a3;
  if (v153)
  {
    int v114 = *v153;
    if ((v114 - 4) > 0x1E)
    {
      if ((v114 - 3) >= 0xFFFFFFFE) {
        uint64_t v117 = v153;
      }
      else {
        uint64_t v117 = 0;
      }
      if ((v114 - 3) < 0xFFFFFFFE)
      {
        if (v114 == 3) {
          *((void *)v153 + 1) = 0;
        }
        goto LABEL_46;
      }
      unint64_t v116 = (unint64_t)(v117 + 8);
    }
    else
    {
      if ((v153[1] & 0x7F) != 2 && !*((_DWORD *)v153 + 3)) {
        goto LABEL_46;
      }
      uint64_t v115 = *((void *)v153 + 2);
      if ((v115 & 4) == 0) {
        goto LABEL_46;
      }
      unint64_t v116 = v115 & 0xFFFFFFFFFFFFFFF8;
      if (!v116) {
        goto LABEL_46;
      }
    }
    v151[0] = &v153;
    sub_1CC5FA668(v116 + 16, v151);
  }
LABEL_46:
  if (v7)
  {
    uint64_t v36 = 0;
    unsigned int v37 = 0;
    int v145 = v6;
    do
    {
      unint64_t v38 = *(_DWORD **)(v8 + 8 * v36);
      int v39 = v38[5];
      uint64_t v40 = v39 & 0x7FFFFFF;
      if ((v39 & 0x7FFFFFF) != 0)
      {
        uint64_t v41 = 0;
        uint64_t v42 = 8 * v38[15];
        while (1)
        {
          char v43 = &v38[-8 * v40];
          if ((v39 & 0x40000000) != 0) {
            char v43 = (_DWORD *)*((void *)v38 - 1);
          }
          if (*(void *)&v43[2 * v41 + v42] == a1) {
            break;
          }
          if (v40 == ++v41)
          {
            uint64_t v41 = 0xFFFFFFFFLL;
            goto LABEL_57;
          }
        }
        uint64_t v41 = v41;
LABEL_57:
        uint64_t v44 = 0;
        while (1)
        {
          uint64_t v45 = &v38[-8 * v40];
          if ((v39 & 0x40000000) != 0) {
            uint64_t v45 = (_DWORD *)*((void *)v38 - 1);
          }
          if (*(void **)&v45[2 * v44 + v42] == a2) {
            break;
          }
          if (v40 == ++v44) {
            goto LABEL_62;
          }
        }
        uint64_t v46 = v44;
      }
      else
      {
        uint64_t v41 = 0xFFFFFFFFLL;
LABEL_62:
        uint64_t v46 = 0xFFFFFFFFLL;
      }
      if (((v46 | v41) & 0x80000000) == 0)
      {
        if ((v39 & 0x40000000) != 0) {
          uint64_t v47 = (_DWORD *)*((void *)v38 - 1);
        }
        else {
          uint64_t v47 = &v38[-8 * v40];
        }
        uint64_t v48 = *(llvm::Value **)&v47[8 * v41];
        uint64_t v49 = *(llvm::Value **)&v47[8 * v46];
        if (v6) {
          uint64_t v50 = v49;
        }
        else {
          uint64_t v50 = v48;
        }
        if (v6) {
          unsigned int v51 = v48;
        }
        else {
          unsigned int v51 = v49;
        }
        __int16 v152 = 257;
        Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)v154, v35, v50, v51, (const llvm::Twine *)v151, 0);
        int v53 = v38[5];
        uint64_t v54 = v53 & 0x7FFFFFF;
        if ((v53 & 0x7FFFFFF) == 2)
        {
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v38, Select, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        if (v54)
        {
          uint64_t v55 = v53 & 0x7FFFFFF;
          uint64_t v56 = 8 * v38[15];
          while (1)
          {
            uint64_t v57 = &v38[-8 * v54];
            if ((v53 & 0x40000000) != 0) {
              uint64_t v57 = (_DWORD *)*((void *)v38 - 1);
            }
            if (*(void *)&v57[v56] == a1) {
              break;
            }
            v56 += 2;
            if (!--v55) {
              goto LABEL_90;
            }
          }
          uint64_t v58 = 0;
          while (1)
          {
            uint64_t v59 = &v38[-8 * v54];
            if ((v53 & 0x40000000) != 0) {
              uint64_t v59 = (_DWORD *)*((void *)v38 - 1);
            }
            if (*(void *)&v59[8 * v38[15] + 2 * v58] == a1) {
              break;
            }
            if (v54 == ++v58)
            {
              LODWORD(v58) = -1;
              break;
            }
          }
          llvm::PHINode::removeIncomingValue((llvm::PHINode *)v38, v58, 1);
          int v53 = v38[5];
          LODWORD(v54) = v53 & 0x7FFFFFF;
        }
LABEL_90:
        if (v54 == v38[15])
        {
          uint64_t v92 = v53 & 0x7FFFFFF;
          unsigned int v93 = v92 + (v92 >> 1);
          if (v93 <= 2) {
            uint64_t v94 = 2;
          }
          else {
            uint64_t v94 = v93;
          }
          v38[15] = v94;
          if ((v53 & 0x40000000) != 0) {
            int v95 = (uint64_t *)*((void *)v38 - 1);
          }
          else {
            int v95 = (uint64_t *)&v38[-8 * v92];
          }
          BOOL v96 = operator new(40 * v94);
          *((void *)v38 - 1) = v96;
          unsigned int v97 = v96;
          do
          {
            *unsigned int v97 = 0;
            v97[1] = 0;
            v97[2] = 0;
            v97[3] = v38;
            v97 += 4;
          }
          while (v97 != &v96[4 * v94]);
          int v98 = v38[5];
          if ((v98 & 0x40000000) != 0) {
            uint64_t v99 = (uint64_t)v96;
          }
          else {
            uint64_t v99 = (uint64_t)&v38[-8 * (v98 & 0x7FFFFFF)];
          }
          sub_1CC5E4108((uint64_t)v151, v95, &v95[4 * v92], v99);
          if (v92)
          {
            memmove((void *)(v99 + 32 * v94), &v95[4 * v92], 8 * v92);
            uint64_t v100 = 4 * v92;
            do
            {
              uint64_t v101 = &v95[v100];
              if (v95[v100 - 4])
              {
                *(void *)*(v101 - 2) = *(v101 - 3);
                uint64_t v102 = *(v101 - 3);
                if (v102) {
                  *(void *)(v102 + 16) = *(v101 - 2);
                }
              }
              v100 -= 4;
            }
            while (v100 * 8);
          }
          operator delete(v95);
          int v53 = v38[5];
          int v6 = v145;
          unint64_t v7 = a5;
          uint64_t v8 = a4;
          uint64_t v35 = a3;
        }
        uint64_t v60 = (v53 + 1) & 0x7FFFFFF;
        v38[5] = v53 & 0xF8000000 | (v53 + 1) & 0x7FFFFFF;
        if ((v53 & 0x40000000) != 0) {
          uint64_t v61 = (_DWORD *)*((void *)v38 - 1);
        }
        else {
          uint64_t v61 = &v38[-8 * v60];
        }
        uint64_t v62 = (v60 - 1);
        int v63 = &v61[8 * v62];
        if (*(void *)v63)
        {
          **((void **)v63 + 2) = *((void *)v63 + 1);
          uint64_t v90 = *((void *)v63 + 1);
          if (v90) {
            *(void *)(v90 + 16) = *((void *)v63 + 2);
          }
        }
        *(void *)int v63 = Select;
        if (Select)
        {
          int v64 = (void *)((char *)Select + 8);
          uint64_t v65 = *((void *)Select + 1);
          int v66 = &v61[8 * v62];
          *((void *)v66 + 1) = v65;
          if (v65) {
            *(void *)(v65 + 16) = v66 + 2;
          }
          *((void *)v66 + 2) = v64;
          void *v64 = v63;
        }
        int v67 = v38[5];
        uint64_t v68 = v67 & 0x7FFFFFF;
        if ((v67 & 0x40000000) != 0) {
          unsigned int v69 = (_DWORD *)*((void *)v38 - 1);
        }
        else {
          unsigned int v69 = &v38[-8 * v68];
        }
        uint64_t v70 = v38[15];
        *(void *)&v69[8 * v70 + 2 * (v68 - 1)] = a1;
        int v71 = v38[5];
        uint64_t v72 = v71 & 0x7FFFFFF;
        if ((v71 & 0x7FFFFFF) != 0)
        {
          uint64_t v73 = 8 * v70;
          uint64_t v74 = v71 & 0x7FFFFFF;
          uint64_t v75 = 8 * v70;
          while (1)
          {
            uint64_t v76 = &v38[-8 * v72];
            if ((v71 & 0x40000000) != 0) {
              uint64_t v76 = (_DWORD *)*((void *)v38 - 1);
            }
            if (*(void **)&v76[v75] == a2) {
              break;
            }
            v75 += 2;
            if (!--v74) {
              goto LABEL_114;
            }
          }
          uint64_t v77 = 0;
          while (1)
          {
            unsigned int v78 = &v38[-8 * v72];
            if ((v71 & 0x40000000) != 0) {
              unsigned int v78 = (_DWORD *)*((void *)v38 - 1);
            }
            if (*(void **)&v78[2 * v77 + v73] == a2) {
              break;
            }
            if (v72 == ++v77)
            {
              LODWORD(v77) = -1;
              break;
            }
          }
          llvm::PHINode::removeIncomingValue((llvm::PHINode *)v38, v77, 1);
          int v71 = v38[5];
          LODWORD(v70) = v38[15];
          LODWORD(v72) = v71 & 0x7FFFFFF;
        }
LABEL_114:
        if (v72 == v70)
        {
          uint64_t v103 = v71 & 0x7FFFFFF;
          unsigned int v104 = v103 + (v103 >> 1);
          if (v104 <= 2) {
            uint64_t v105 = 2;
          }
          else {
            uint64_t v105 = v104;
          }
          v38[15] = v105;
          if ((v71 & 0x40000000) != 0) {
            char v106 = (uint64_t *)*((void *)v38 - 1);
          }
          else {
            char v106 = (uint64_t *)&v38[-8 * v103];
          }
          uint64_t v107 = operator new(40 * v105);
          *((void *)v38 - 1) = v107;
          int v108 = v107;
          do
          {
            *int v108 = 0;
            v108[1] = 0;
            v108[2] = 0;
            v108[3] = v38;
            v108 += 4;
          }
          while (v108 != &v107[4 * v105]);
          int v109 = v38[5];
          if ((v109 & 0x40000000) != 0) {
            uint64_t v110 = (uint64_t)v107;
          }
          else {
            uint64_t v110 = (uint64_t)&v38[-8 * (v109 & 0x7FFFFFF)];
          }
          sub_1CC5E4108((uint64_t)v151, v106, &v106[4 * v103], v110);
          if (v103)
          {
            memmove((void *)(v110 + 32 * v105), &v106[4 * v103], 8 * v103);
            uint64_t v111 = 4 * v103;
            do
            {
              uint64_t v112 = &v106[v111];
              if (v106[v111 - 4])
              {
                *(void *)*(v112 - 2) = *(v112 - 3);
                uint64_t v113 = *(v112 - 3);
                if (v113) {
                  *(void *)(v113 + 16) = *(v112 - 2);
                }
              }
              v111 -= 4;
            }
            while (v111 * 8);
          }
          operator delete(v106);
          int v71 = v38[5];
          int v6 = v145;
          unint64_t v7 = a5;
          uint64_t v8 = a4;
          uint64_t v35 = a3;
        }
        uint64_t v79 = (v71 + 1) & 0x7FFFFFF;
        v38[5] = v71 & 0xF8000000 | (v71 + 1) & 0x7FFFFFF;
        if ((v71 & 0x40000000) != 0) {
          unint64_t v80 = (_DWORD *)*((void *)v38 - 1);
        }
        else {
          unint64_t v80 = &v38[-8 * v79];
        }
        uint64_t v81 = (v79 - 1);
        BOOL v82 = &v80[8 * v81];
        if (*(void *)v82)
        {
          **((void **)v82 + 2) = *((void *)v82 + 1);
          uint64_t v91 = *((void *)v82 + 1);
          if (v91) {
            *(void *)(v91 + 16) = *((void *)v82 + 2);
          }
        }
        *(void *)BOOL v82 = Select;
        if (Select)
        {
          uint64_t v85 = *((void *)Select + 1);
          unsigned int v84 = (void *)((char *)Select + 8);
          uint64_t v83 = v85;
          unsigned int v86 = &v80[8 * v81];
          *((void *)v86 + 1) = v85;
          if (v85) {
            *(void *)(v83 + 16) = v86 + 2;
          }
          *((void *)v86 + 2) = v84;
          *unsigned int v84 = v82;
        }
        int v87 = v38[5];
        uint64_t v88 = v87 & 0x7FFFFFF;
        if ((v87 & 0x40000000) != 0) {
          BOOL v89 = (_DWORD *)*((void *)v38 - 1);
        }
        else {
          BOOL v89 = &v38[-8 * v88];
        }
        *(void *)&v89[8 * v38[15] + 2 * (v88 - 1)] = a2;
      }
      uint64_t v36 = ++v37;
    }
    while (v7 > v37);
  }
  if (v154[0] != v155) {
    free(v154[0]);
  }
}

void sub_1CC7C92F4(uint64_t *a1)
{
  uint64_t UniquePredecessor = llvm::BasicBlock::getUniquePredecessor((llvm::BasicBlock *)a1);
  uint64_t v4 = a1[7];
  uint64_t v5 = *(void *)(v4 + 80);
  if (v5) {
    uint64_t v6 = v5 - 24;
  }
  else {
    uint64_t v6 = 0;
  }
  if (UniquePredecessor == v6) {
    sub_1CC19E208(*(void *)(UniquePredecessor + 56) + 72, (uint64_t *)(UniquePredecessor + 24), v4 + 72, a1 + 3);
  }

  llvm::MergeBasicBlockIntoOnlyPred((unint64_t)a1, 0, v3);
}

uint64_t sub_1CC7C9368()
{
  uint64_t v3 = &v2;
  int v1 = 1;
  int v2 = 32;
  sub_1CD63FC0C(&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCDB610, &dword_1CB82C000);
  int v1 = 1;
  int v2 = 4;
  uint64_t v3 = &v2;
  sub_1CD63FD28(&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCDB6D0, &dword_1CB82C000);
  int v1 = 1;
  int v2 = 8;
  uint64_t v3 = &v2;
  sub_1CD63FE44(&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCDB790, &dword_1CB82C000);
  int v1 = 1;
  int v2 = -1;
  uint64_t v3 = &v2;
  sub_1CD581AF0((uint64_t)&unk_1EBCDB850, "flatten-cutoff", &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCDB850, &dword_1CB82C000);
}

void sub_1CC7C9474(uint64_t a1)
{
}

uint64_t sub_1CC7C9510(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDB910;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261EB50;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB918, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC7C9474;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCDB918, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC7C95C0()
{
}

void sub_1CC7C9600(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC7C9638()
{
  return "SW emulation of float atomics";
}

void sub_1CC7C9648(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

uint64_t sub_1CC7C969C(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v25 = 0;
  uint64_t v2 = *(void *)(a2 + 80);
  if (v2 == a2 + 72) {
    return 0;
  }
  unsigned int v3 = 0;
  do
  {
    uint64_t v4 = v2 - 24;
    if (!v2) {
      uint64_t v4 = 0;
    }
    uint64_t v5 = v4 + 40;
    uint64_t v6 = *(void *)(v4 + 48);
    while (v6 != v5)
    {
      uint64_t v7 = v6;
      uint64_t v6 = *(void *)(v6 + 8);
      uint64_t v8 = v7 - 24;
      if (!v7) {
        uint64_t v8 = 0;
      }
      int v9 = *(unsigned __int8 *)(v8 + 16);
      if (v9 == 65) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = 0;
      }
      if (v7 && v9 == 65 && (*(_WORD *)(v10 + 18) >> 4) - 11 <= 1)
      {
        if (v3 >= 0x10) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v26[v3] = v10;
        unsigned int v3 = ++v25;
      }
    }
    uint64_t v2 = *(void *)(v2 + 8);
  }
  while (v2 != a2 + 72);
  if (v3)
  {
    uint64_t v11 = *(void *)(v26[0] + 40);
    if ((*(unsigned char *)(v11 + 23) & 0x10) != 0)
    {
      uint64_t v12 = ***(void ***)v11;
      uint64_t v13 = *(void *)(v12 + 152);
      uint64_t v14 = *(unsigned int *)(v12 + 168);
      if (v14)
      {
        LODWORD(v15) = (v14 - 1) & ((v11 >> 4) ^ (v11 >> 9));
        uint64_t v16 = (uint64_t *)(v13 + 16 * v15);
        uint64_t v17 = *v16;
        if (*v16 != v11)
        {
          int v18 = 1;
          do
          {
            if (v17 == -4096) {
              goto LABEL_27;
            }
            int v19 = v15 + v18++;
            uint64_t v15 = v19 & (v14 - 1);
            uint64_t v17 = *(void *)(v13 + 16 * v15);
          }
          while (v17 != v11);
          uint64_t v16 = (uint64_t *)(v13 + 16 * v15);
        }
      }
      else
      {
LABEL_27:
        uint64_t v16 = (uint64_t *)(v13 + 16 * v14);
      }
      int v20 = (void *)v16[1];
      uint64_t v23 = *v20;
      uint64_t v22 = (char *)(v20 + 2);
      uint64_t v21 = v23;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = &byte_1CFBCE98E;
    }
    __int16 v28 = 773;
    v27[0] = v22;
    v27[1] = v21;
    v27[2] = ".post.atomic.emu";
    llvm::BasicBlock::splitBasicBlock(v11, v26[0] + 24, (uint64_t)v27, 0);
  }
  return 0;
}

void sub_1CC7CA8A4()
{
}

uint64_t sub_1CC7CA940(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDB920;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261EBF0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB928, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC7CA8A4;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCDB928, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC7CA9F0()
{
}

void sub_1CC7CAA30(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC7CAA68(uint64_t a1, uint64_t a2)
{
}

void sub_1CC7CAA78(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(char **)v4 != llvm::TargetLibraryInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v6 + 96))(v6, llvm::TargetLibraryInfoWrapperPass::ID);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  LODWORD(v30) = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  int v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  int v36 = 0;
  uint64_t v8 = v7 + 32;
  if (!*(unsigned char *)(v7 + 232))
  {
    int v9 = (void *)(*(void *)(a2 + 40) + 216);
    __int16 v25 = 260;
    uint64_t v24 = v9;
    llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)&v24);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    LODWORD(v20) = 0;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    *(void *)&long long v10 = -1;
    *((void *)&v10 + 1) = -1;
    *(_OWORD *)__src = v10;
    *(_OWORD *)uint64_t v12 = v10;
    long long v13 = v10;
    long long v14 = v10;
    long long v15 = v10;
    long long v16 = v10;
    *(_OWORD *)uint64_t v17 = v10;
    *(void *)&v17[13] = -1;
    sub_1CC153974((uint64_t)__src, (int *)&__p);
    sub_1CD4D04B8(v8, (uint64_t)__src);
    sub_1CD4CFA4C((uint64_t *)__src);
    if (v27 < 0) {
      operator delete(__p);
    }
  }
  sub_1CC1569E8(__src, v8);
}

void *sub_1CC7CBACC(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CC7CBC00(a1, v7);
      uint64_t v17 = 0;
      sub_1CBA0E618(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CC7CBC00(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    long long v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        long long v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 16 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC7CBC00(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC7CBCCC(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC7CBCCC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    uint64_t v4 = *(void **)result;
    uint64_t v5 = 16 * v3;
    do
    {
      void *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    int v6 = 0;
    int v7 = v3 - 1;
    do
    {
      uint64_t v8 = *a2;
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unsigned int v9 = ((v8 >> 4) ^ (v8 >> 9)) & v7;
        uint64_t v10 = *(void *)result + 16 * v9;
        uint64_t v11 = *(void *)v10;
        if (v8 != *(void *)v10)
        {
          uint64_t v12 = 0;
          int v13 = 1;
          while (v11 != -4096)
          {
            if (v12) {
              BOOL v14 = 0;
            }
            else {
              BOOL v14 = v11 == -8192;
            }
            if (v14) {
              uint64_t v12 = v10;
            }
            unsigned int v15 = v9 + v13++;
            unsigned int v9 = v15 & v7;
            uint64_t v10 = *(void *)result + 16 * (v15 & v7);
            uint64_t v11 = *(void *)v10;
            if (v8 == *(void *)v10) {
              goto LABEL_19;
            }
          }
          if (v12) {
            uint64_t v10 = v12;
          }
        }
LABEL_19:
        *(void *)uint64_t v10 = v8;
        *(unsigned char *)(v10 + 8) = *((unsigned char *)a2 + 8);
        *(_DWORD *)(result + 8) = ++v6;
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t sub_1CC7CBD9C(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    unsigned int v3 = *(unsigned __int8 *)(result + 16);
    if (v3 >= 0x1C)
    {
      if (v3 - 41 <= 0x11) {
        *(unsigned char *)(result + 17) |= *(unsigned char *)(a2 + 17) & 0xFE;
      }
      uint64_t v4 = *(unsigned __int8 **)(a2 + 48);
      unsigned int v16 = v4;
      if (v4) {
        uint64_t result = llvm::MetadataTracking::track((uint64_t)&v16, v4, 2);
      }
      uint64_t v5 = (unsigned __int8 **)(v2 + 48);
      if (&v16 != v5)
      {
        int v6 = *v5;
        if (*v5)
        {
          int v8 = *v6;
          if ((v8 - 4) > 0x1E)
          {
            if ((v8 - 3) >= 0xFFFFFFFE) {
              uint64_t v11 = *v5;
            }
            else {
              uint64_t v11 = 0;
            }
            if ((v8 - 3) < 0xFFFFFFFE)
            {
              if (v8 == 3) {
                *((void *)v6 + 1) = 0;
              }
              goto LABEL_9;
            }
            unint64_t v10 = (unint64_t)(v11 + 8);
          }
          else
          {
            if ((v6[1] & 0x7F) != 2 && !*((_DWORD *)v6 + 3)) {
              goto LABEL_9;
            }
            uint64_t v9 = *((void *)v6 + 2);
            if ((v9 & 4) == 0) {
              goto LABEL_9;
            }
            unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFF8;
            if (!v10) {
              goto LABEL_9;
            }
          }
          uint64_t v17 = v5;
          uint64_t result = sub_1CC5FA668(v10 + 16, &v17);
        }
LABEL_9:
        int v7 = v16;
        void *v5 = v16;
        if (v7) {
          return llvm::MetadataTracking::retrack((uint64_t)&v16, v7, (uint64_t)v5);
        }
        return result;
      }
      if (!v16) {
        return result;
      }
      int v12 = *v16;
      if ((v12 - 4) > 0x1E)
      {
        if ((v12 - 3) >= 0xFFFFFFFE) {
          unsigned int v15 = v16;
        }
        else {
          unsigned int v15 = 0;
        }
        if ((v12 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v14 = (unint64_t)(v15 + 8);
LABEL_38:
          uint64_t v17 = &v16;
          return sub_1CC5FA668(v14 + 16, &v17);
        }
        if (v12 == 3) {
          *((void *)v16 + 1) = 0;
        }
      }
      else if ((v16[1] & 0x7F) == 2 || *((_DWORD *)v16 + 3))
      {
        uint64_t v13 = *((void *)v16 + 2);
        if ((v13 & 4) != 0)
        {
          unint64_t v14 = v13 & 0xFFFFFFFFFFFFFFF8;
          if (v14) {
            goto LABEL_38;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC7CBF38()
{
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Limit the fma-contraction pass";
  v3.n128_u64[1] = 30;
  int v1 = -1;
  uint64_t v2 = &v1;
  sub_1CD6400C0(&v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCDB930, &dword_1CB82C000);
}

void sub_1CC7CBFB0(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDBAB8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7CC024;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDBAB8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC7CC024(uint64_t a1)
{
}

void sub_1CC7CC0C4()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t sub_1CC7CC1BC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDBAB0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261EC90;
  __n128 v3 = (llvm::PassRegistry *)sub_1CB93141C(a1 + 56, a2);
  *(void *)(a1 + 88) = a1 + 104;
  *(void *)(a1 + 96) = 0x1000000000;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDBAB8, memory_order_acquire) != -1)
  {
    v7[0] = sub_1CC7CC024;
    v7[1] = &PassRegistry;
    int v6 = v7;
    std::__call_once(&qword_1EBCDBAB8, &v6, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC7CC284()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CC7CC364(llvm::Pass *this)
{
  *(void *)this = &unk_1F261EC90;
  uint64_t v2 = (char *)*((void *)this + 11);
  unsigned int v3 = *((_DWORD *)this + 24);
  if (v3)
  {
    uint64_t v4 = 88 * v3;
    do
    {
      uint64_t v5 = *(char **)&v2[v4 - 48];
      if (&v2[v4 - 32] != v5) {
        free(v5);
      }
      v4 -= 88;
    }
    while (v4);
    uint64_t v2 = (char *)*((void *)this + 11);
  }
  if (v2 != (char *)this + 104) {
    free(v2);
  }
  int v6 = (llvm::Pass *)*((void *)this + 10);
  if (v6 == (llvm::Pass *)((char *)this + 56))
  {
    (*(void (**)(char *))(*((void *)this + 7) + 32))((char *)this + 56);
  }
  else if (v6)
  {
    (*(void (**)(llvm::Pass *))(*(void *)v6 + 40))(v6);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC7CC46C(llvm::Pass *this)
{
  *(void *)this = &unk_1F261EC90;
  uint64_t v2 = (char *)*((void *)this + 11);
  unsigned int v3 = *((_DWORD *)this + 24);
  if (v3)
  {
    uint64_t v4 = 88 * v3;
    do
    {
      uint64_t v5 = *(char **)&v2[v4 - 48];
      if (&v2[v4 - 32] != v5) {
        free(v5);
      }
      v4 -= 88;
    }
    while (v4);
    uint64_t v2 = (char *)*((void *)this + 11);
  }
  if (v2 != (char *)this + 104) {
    free(v2);
  }
  int v6 = (llvm::Pass *)*((void *)this + 10);
  if (v6 == (llvm::Pass *)((char *)this + 56))
  {
    (*(void (**)(char *))(*((void *)this + 7) + 32))((char *)this + 56);
  }
  else if (v6)
  {
    (*(void (**)(llvm::Pass *))(*(void *)v6 + 40))(v6);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC7CC588(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1CC7CC5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  v57[16] = *MEMORY[0x1E4F143B8];
  if (byte_1EBCDBA70) {
    return 0;
  }
  uint64_t v7 = v5;
  uint64_t v8 = v4;
  uint64_t v9 = *(void *)(v4 + 80);
  if (v9)
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 48))(v9, v5)) {
      return 0;
    }
  }
  uint64_t v10 = 2;
  uint64_t v11 = v7 + 72;
  uint64_t v12 = v7 + 72;
  do
  {
    uint64_t v12 = *(void *)(v12 + 8);
    --v10;
  }
  while (v12 != v7 + 72);
  if (!v10) {
    return 0;
  }
  uint64_t v13 = *(uint64_t **)(v8 + 8);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (v14 == v15)
  {
LABEL_11:
    uint64_t v16 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v14 != &llvm::AAResultsWrapperPass::ID)
    {
      v14 += 16;
      if (v14 == v15) {
        goto LABEL_11;
      }
    }
    uint64_t v16 = *(void *)(v14 + 8);
  }
  *(void *)(v8 + 48) = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v16 + 96))(v16, &llvm::AAResultsWrapperPass::ID)+ 32);
  uint64_t v17 = *(uint64_t **)(v8 + 8);
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  if (v18 == v19)
  {
LABEL_16:
    uint64_t v20 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v18 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v18 += 16;
      if (v18 == v19) {
        goto LABEL_16;
      }
    }
    uint64_t v20 = *(void *)(v18 + 8);
  }
  *(void *)(v8 + 40) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v20 + 96))(v20, &llvm::DominatorTreeWrapperPass::ID)+ 32;
  long long v21 = *(uint64_t **)(v8 + 8);
  uint64_t v22 = *v21;
  uint64_t v23 = v21[1];
  if (v22 == v23)
  {
LABEL_21:
    uint64_t v24 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v22 != &llvm::LoopInfoWrapperPass::ID)
    {
      v22 += 16;
      if (v22 == v23) {
        goto LABEL_21;
      }
    }
    uint64_t v24 = *(void *)(v22 + 8);
  }
  *(void *)(v8 + 32) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v24 + 96))(v24, &llvm::LoopInfoWrapperPass::ID)+ 32;
  unint64_t v25 = -1;
  uint64_t v26 = 88;
  uint64_t v27 = v7 + 72;
  do
  {
    uint64_t v11 = *(void *)(v11 + 8);
    v26 -= 88;
    ++v25;
  }
  while (v11 != v7 + 72);
  uint64_t v28 = (uint64_t *)(v8 + 88);
  unint64_t v29 = *(unsigned int *)(v8 + 96);
  if (v29 != v25)
  {
    if (v25 >= v29)
    {
      if (v25 > *(unsigned int *)(v8 + 100))
      {
        sub_1CC7D29B4((char **)(v8 + 88), v25);
        unint64_t v29 = *(unsigned int *)(v8 + 96);
      }
      if (v29 != v25)
      {
        uint64_t v32 = *v28 - v26;
        uint64_t v33 = *v28 + 88 * v29;
        do
        {
          *(void *)uint64_t v33 = 0;
          *(void *)(v33 + 8) = -1;
          *(unsigned char *)(v33 + 16) = 0;
          *(void *)(v33 + 24) = 0;
          *(_DWORD *)(v33 + 32) = -1;
          *(unsigned char *)(v33 + 36) = 0;
          *(void *)(v33 + 40) = v33 + 56;
          *(void *)(v33 + 48) = 0x200000000;
          v33 += 88;
        }
        while (v32 != v33);
      }
    }
    else
    {
      uint64_t v30 = (void **)(*v28 + 88 * v29 - 48);
      uint64_t v31 = -88 * v29 - v26;
      do
      {
        if (v30 + 2 != *v30) {
          free(*v30);
        }
        v30 -= 11;
        v31 += 88;
      }
      while (v31);
    }
    *(_DWORD *)(v8 + 96) = v25;
    uint64_t v27 = v7 + 72;
  }
  uint64_t v34 = *(void *)(v7 + 80);
  if (v34 != v27)
  {
    unsigned int v35 = 0;
    uint64_t v36 = *v28;
    do
    {
      uint64_t v37 = v34 - 24;
      if (!v34) {
        uint64_t v37 = 0;
      }
      *(void *)(v36 + 88 * v35++) = v37;
      uint64_t v34 = *(void *)(v34 + 8);
    }
    while (v34 != v27);
  }
  long long v54 = 0u;
  memset(v53, 0, sizeof(v53));
  uint64_t v38 = *(void *)(v8 + 32);
  uint64_t v40 = *(void **)(v38 + 24);
  int v39 = *(void **)(v38 + 32);
  if (v40 != v39)
  {
    do
      sub_1CC08E690(v53, v40++);
    while (v40 != v39);
    if (*((void *)&v54 + 1))
    {
      uint64_t v41 = *(void *)(v8 + 88);
      unsigned int v42 = *(_DWORD *)(v8 + 96);
      if (v42)
      {
        char v43 = (void *)(v41 + 88 * v42);
        uint64_t v44 = 88 * v42;
        uint64_t v45 = *(void **)(v8 + 88);
        do
        {
          if (*v45 == **(void **)(*(void *)(*(void *)(*((void *)&v53[0] + 1)
                                                           + (((unint64_t)(*((void *)&v54 + 1) + v54 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                               + 8 * ((*((void *)&v54 + 1) + v54 - 1) & 0x1FF))
                                   + 32))
            goto LABEL_52;
          v45 += 11;
          v44 -= 88;
        }
        while (v44);
        uint64_t v45 = v43;
      }
      else
      {
        uint64_t v45 = *(void **)(v8 + 88);
      }
LABEL_52:
      uint64_t v46 = v41 + 0xFFFFFFE800000008 * (((unint64_t)v45 - v41) >> 3);
      uint64_t v48 = *(void *)(v46 + 24);
      uint64_t v47 = (void *)(v46 + 24);
      if (v48)
      {
        uint64_t v55 = v57;
        uint64_t v56 = 0x800000000;
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitEdges();
      }
      *uint64_t v47 = *(void *)(*(void *)(*((void *)&v53[0] + 1)
                                   + (((unint64_t)(*((void *)&v54 + 1) + v54 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((void *)&v54 + 1) + v54 - 1) & 0x1FF));
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getNumBackEdges();
    }
  }
  sub_1CC7CF46C((void *)v8, v7, 0);
  unsigned int v49 = *(_DWORD *)(v8 + 96);
  if (v49)
  {
    uint64_t v50 = *(void *)(v8 + 88);
    uint64_t v51 = 88 * v49;
    do
    {
      unsigned int v52 = *(void **)(v50 + v51 - 48);
      if ((void *)(v50 + v51 - 32) != v52) {
        free(v52);
      }
      v51 -= 88;
    }
    while (v51);
  }
  *(_DWORD *)(v8 + 96) = 0;
  sub_1CC08E90C((void **)v53);
  return 1;
}

uint64_t sub_1CC7CF1D8(void *a1, unsigned int a2, int a3, int a4)
{
  v33[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1[11] + 88 * a2);
  uint64_t v6 = *(void *)(v5 + 8);
  if (v6)
  {
    while (1)
    {
      uint64_t v7 = *(void *)(v6 + 24);
      unsigned int v8 = *(unsigned __int8 *)(v7 + 16);
      BOOL v9 = v7 && v8 >= 0x1C;
      if (v9 && v8 - 29 <= 0xA) {
        break;
      }
      uint64_t v6 = *(void *)(v6 + 8);
      if (!v6) {
        goto LABEL_11;
      }
    }
    int v12 = 0;
LABEL_13:
    ++v12;
    while (1)
    {
      uint64_t v6 = *(void *)(v6 + 8);
      if (!v6) {
        break;
      }
      uint64_t v13 = *(void *)(v6 + 24);
      unsigned int v14 = *(unsigned __int8 *)(v13 + 16);
      if (v13) {
        BOOL v15 = v14 >= 0x1C;
      }
      else {
        BOOL v15 = 0;
      }
      if (v15 && v14 - 29 < 0xB) {
        goto LABEL_13;
      }
    }
    BOOL v11 = (v12 & 0xFFFFFFFE) == 0;
    if (!a3) {
      goto LABEL_25;
    }
  }
  else
  {
LABEL_11:
    BOOL v11 = 1;
    if (!a3) {
      goto LABEL_25;
    }
  }
  if (v11) {
    return 0;
  }
LABEL_25:
  uint64_t v17 = *(void *)(v5 + 40);
  if (v17 == v5 + 40)
  {
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v18 = v17 - 24;
    if (!v17) {
      uint64_t v18 = 0;
    }
    if (*(unsigned __int8 *)(v18 + 16) - 29 >= 0xB) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = v18;
    }
  }
  if (*(unsigned char *)(v19 + 16) == 30)
  {
    if ((*(_DWORD *)(v19 + 20) & 0x7FFFFFF) == 3) {
      unsigned int v20 = 2;
    }
    else {
      unsigned int v20 = 1;
    }
  }
  else
  {
    unsigned int v20 = 0;
    switch(*(unsigned char *)(v19 + 16))
    {
      case 0x1E:
        __break(1u);
        break;
      case 0x1F:
        unsigned int v20 = (*(_DWORD *)(v19 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_36;
      case 0x20:
      case 0x26:
        break;
      case 0x21:
        goto LABEL_41;
      case 0x24:
        unsigned int v20 = *(_WORD *)(v19 + 18) & 1;
        goto LABEL_36;
      case 0x25:
        unsigned int v20 = 1;
        goto LABEL_36;
      case 0x27:
        unsigned int v20 = *(_DWORD *)(v19 + 80) + 1;
        goto LABEL_36;
      default:
        goto LABEL_36;
    }
    unsigned int v20 = (*(_DWORD *)(v19 + 20) & 0x7FFFFFF) - 1;
  }
LABEL_36:
  if (a4 && v20 < 2) {
    return 0;
  }
LABEL_41:
  uint64_t v23 = (void *)sub_1CC7D2C40((uint64_t)a1);
  uint64_t v24 = (uint64_t ***)(a1[11] + 88 * a2);
  for (uint64_t i = (uint64_t)(*v24)[1]; i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v26 = *(void *)(i + 24);
    unsigned int v27 = *(unsigned __int8 *)(v26 + 16);
    if (v26) {
      BOOL v28 = v27 >= 0x1C;
    }
    else {
      BOOL v28 = 0;
    }
    if (v28 && v27 - 29 < 0xB) {
      break;
    }
  }
  uint64_t v31 = v33;
  *(void *)uint64_t v32 = 0x200000000;
  sub_1CBF846A4((uint64_t)&v31, i, 0);
  uint64_t v30 = sub_1CD1271B8(*v24, (int)v31, v32[0], "Split", 0, a1[5], a1[4], 0, 0);
  *uint64_t v23 = *v24;
  *uint64_t v24 = (uint64_t **)v30;
  if (v31 != v33) {
    free(v31);
  }
  return 1;
}

void **sub_1CC7CF46C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a1;
  uint64_t v195 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    uint64_t v9 = *(void *)(a2 + 80);
    if (v9) {
      uint64_t v10 = v9 - 24;
    }
    else {
      uint64_t v10 = 0;
    }
LABEL_12:
    uint64_t v172 = v10;
    goto LABEL_16;
  }
  uint64_t v5 = a1[4];
  uint64_t v172 = **(void **)(a3 + 32);
  uint64_t v6 = *(void *)(v172 + 40);
  if (v6 == v172 + 40)
  {
    uint64_t v8 = 0;
  }
  else
  {
    if (v6) {
      uint64_t v7 = v6 - 24;
    }
    else {
      uint64_t v7 = 0;
    }
    if (*(unsigned __int8 *)(v7 + 16) - 29 >= 0xB) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = v7;
    }
  }
  if (*(unsigned char *)(v8 + 16) != 30)
  {
    switch(*(unsigned char *)(v8 + 16))
    {
      case 0x1E:
LABEL_231:
        __break(1u);
        goto LABEL_232;
      case 0x1F:
        int v157 = (*(_DWORD *)(v8 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_216;
      case 0x20:
      case 0x26:
LABEL_232:
        int v157 = (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_216;
      case 0x24:
        int v157 = *(_WORD *)(v8 + 18) & 1;
        goto LABEL_216;
      case 0x25:
        goto LABEL_217;
      case 0x27:
        int v157 = *(_DWORD *)(v8 + 80) + 1;
LABEL_216:
        if (v157 == 1) {
          goto LABEL_217;
        }
        goto LABEL_16;
      default:
        goto LABEL_16;
    }
  }
  if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) == 3) {
    goto LABEL_16;
  }
LABEL_217:
  uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v8, 0);
  int v159 = *(_DWORD *)(v5 + 16);
  if (v159)
  {
    uint64_t v160 = *(void *)v5;
    unsigned int v161 = v159 - 1;
    uint64_t v162 = ((Successor >> 4) ^ (Successor >> 9)) & (v159 - 1);
    uint64_t v163 = *(void *)(*(void *)v5 + 16 * v162);
    if (Successor != v163)
    {
      int v164 = 1;
      while (v163 != -4096)
      {
        int v165 = v162 + v164++;
        uint64_t v162 = v165 & v161;
        uint64_t v163 = *(void *)(v160 + 16 * v162);
        if (Successor == v163) {
          goto LABEL_222;
        }
      }
      goto LABEL_16;
    }
LABEL_222:
    uint64_t v166 = *(void *)(v160 + 16 * v162 + 8);
    if (v166)
    {
      if (**(void **)(v166 + 32) == Successor)
      {
        uint64_t v167 = v4[11];
        unsigned int v168 = *((_DWORD *)v4 + 24);
        if (v168)
        {
          int v169 = (void *)(v167 + 88 * v168);
          uint64_t v170 = 88 * v168;
          uint64_t v171 = (void *)v4[11];
          while (*v171 != v172)
          {
            v171 += 11;
            v170 -= 88;
            if (!v170)
            {
              uint64_t v171 = v169;
              break;
            }
          }
        }
        else
        {
          uint64_t v171 = (void *)v4[11];
        }
        sub_1CC7CF1D8(v4, -1171354717 * (((unint64_t)v171 - v167) >> 3), 0, 0);
        uint64_t v10 = **(void **)(v3 + 32);
        goto LABEL_12;
      }
    }
  }
LABEL_16:
  uint64_t v11 = v4[11];
  unsigned int v12 = *((_DWORD *)v4 + 24);
  uint64_t v174 = v3;
  if (v12)
  {
    uint64_t v13 = (void *)(v11 + 88 * v12);
    uint64_t v14 = 88 * v12;
    BOOL v15 = (void *)v4[11];
    while (*v15 != v172)
    {
      v15 += 11;
      v14 -= 88;
      if (!v14)
      {
        BOOL v15 = v13;
        break;
      }
    }
  }
  else
  {
    BOOL v15 = (void *)v4[11];
  }
  uint64_t v16 = ((uint64_t)v15 - v11) >> 3;
  long long v184 = 0u;
  unsigned long long v185 = 0u;
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * v16;
  unsigned int v17 = -1171354717 * v16;
  long long v183 = 0u;
  sub_1CC28F9E8((uint64_t)&v183);
  uint64_t v18 = *((void *)&v185 + 1);
  *(_DWORD *)(*(void *)(*((void *)&v183 + 1) + ((((void)v185 + *((void *)&v185 + 1)) >> 7) & 0x1FFFFFFFFFFFFF8))
            + 4 * ((v185 + *((void *)&v185 + 1)) & 0x3FF)) = v3;
  *((void *)&v185 + 1) = v18 + 1;
  *(unsigned char *)(v11 + 88 * v17 + 36) = 1;
  uint64_t v176 = v4;
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = *(unsigned int *)(*(void *)(*((void *)&v183 + 1) + (((unint64_t)v185 >> 7) & 0x1FFFFFFFFFFFFF8))
                             + 4 * (v185 & 0x3FF));
        uint64_t v8 = v4[11];
        uint64_t v19 = v8 + 88 * v5;
        uint64_t v20 = *(void *)(*(void *)v19 + 40);
        if (v20 == *(void *)v19 + 40)
        {
          uint64_t v22 = 0;
        }
        else
        {
          uint64_t v21 = v20 ? v20 - 24 : 0;
          uint64_t v22 = *(unsigned __int8 *)(v21 + 16) - 29 >= 0xB ? 0 : v21;
        }
        if (*(unsigned char *)(v22 + 16) == 30)
        {
          uint64_t v23 = (*(_DWORD *)(v22 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
        }
        else
        {
          uint64_t v23 = 0;
          switch(*(unsigned char *)(v22 + 16))
          {
            case 0x1E:
              goto LABEL_231;
            case 0x1F:
              uint64_t v23 = (*(_DWORD *)(v22 + 20) >> 1) & 0x3FFFFFF;
              break;
            case 0x20:
            case 0x26:
              uint64_t v23 = (*(_DWORD *)(v22 + 20) & 0x7FFFFFFu) - 1;
              break;
            case 0x21:
              uint64_t v23 = 2;
              break;
            case 0x24:
              uint64_t v23 = *(_WORD *)(v22 + 18) & 1;
              break;
            case 0x25:
              uint64_t v23 = 1;
              break;
            case 0x27:
              uint64_t v23 = (*(_DWORD *)(v22 + 80) + 1);
              break;
            default:
              break;
          }
        }
        uint64_t v24 = v8 + 88 * v5;
        uint64_t v26 = *(void *)(v24 + 40);
        uint64_t v3 = v24 + 40;
        uint64_t v25 = v26;
        uint64_t v27 = *(unsigned int *)(v3 + 8);
        int v28 = 0;
        if (v27)
        {
          unint64_t v29 = (unsigned __int8 *)(v25 + 13);
          uint64_t v30 = 16 * v27;
          do
          {
            int v31 = *v29;
            v29 += 16;
            v28 += v31;
            v30 -= 16;
          }
          while (v30);
        }
        int v32 = v27 - v28;
        unsigned int v175 = *(_DWORD *)(*(void *)(*((void *)&v183 + 1) + (((unint64_t)v185 >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * (v185 & 0x3FF));
        if (!v32) {
          break;
        }
        if (v32 == 1)
        {
          uint64_t v182 = (void *)(v8 + 88 * v5);
          *((_DWORD *)v182 + 3) = *(_DWORD *)(v25 + 8);
          char v46 = *(unsigned char *)(v25 + 12);
          goto LABEL_98;
        }
        if (!v27) {
          goto LABEL_57;
        }
        unsigned int v33 = 0;
        uint64_t v34 = 16 * v27 - 16;
        int v35 = 1;
        uint64_t v36 = v25 + 16 * v27;
        while (1)
        {
          uint64_t v37 = v25 + 16;
          if (!*(unsigned char *)(v25 + 13) && v37 != v36) {
            break;
          }
LABEL_47:
          ++v33;
          ++v35;
          v34 -= 16;
          v25 += 16;
          if (v37 == v36) {
            goto LABEL_57;
          }
        }
        uint64_t v39 = 0;
        unsigned int v40 = v35;
        while (*(unsigned char *)(v25 + v39 + 29) || *(_DWORD *)(v25 + 8) != *(_DWORD *)(v25 + v39 + 24))
        {
          ++v40;
          v39 += 16;
          if (v34 == v39) {
            goto LABEL_47;
          }
        }
        if (v33 == -1)
        {
LABEL_57:
          sub_1CC7D2C40((uint64_t)v176);
          unsigned int v188 = 128;
          uint64_t v47 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
          uint64_t v186 = v47;
          uint64_t v187 = 0;
          v191[1] = (void *)2;
          uint64_t v192 = 0;
          uint64_t v193 = -4096;
          v191[0] = &unk_1F2615EC8;
          *(void *)&long long v194 = 0;
          if (v188)
          {
            uint64_t v48 = 0;
            unint64_t v49 = (unint64_t)v188 << 6;
            uint64_t v50 = v47 + 16;
            do
            {
              unint64_t v51 = (unint64_t)v191[1];
              uint64_t v52 = v193;
              *(v50 - 1) = (uint64_t)v191[1] & 6;
              void *v50 = 0;
              v50[1] = v52;
              if (v52 != -4096 && v52 != -8192 && v52 != 0)
              {
                void *v50 = *(void *)(v51 & 0xFFFFFFFFFFFFFFF8);
                *(void *)(v51 & 0xFFFFFFFFFFFFFFF8) = v50 - 1;
                *(v50 - 1) = v51 & 0xFFFFFFFFFFFFFFFELL;
                if (*v50) {
                  *(void *)void *v50 = *(void *)*v50 & 7 | (unint64_t)(v47 + 16);
                }
                uint64_t v48 = v194;
              }
              *(v50 - 2) = &unk_1F2615EC8;
              v50[2] = v48;
              v50 += 8;
              v47 += 64;
              v49 -= 64;
            }
            while (v49);
            if (v193 != -8192 && v193 != -4096 && v193)
            {
              unint64_t v145 = (unint64_t)v191[1] & 0xFFFFFFFFFFFFFFF8;
              *(void *)((unint64_t)v191[1] & 0xFFFFFFFFFFFFFFF8) = v192;
              if (v192)
              {
                unint64_t *v192 = *v192 & 7 | v145;
              }
              else
              {
                uint64_t v146 = v193;
                int v147 = ***(int32x2_t ****)v193;
                unint64_t v148 = (unint64_t)v147[303];
                if (v148 <= v145)
                {
                  uint64_t v149 = v147[305].u32[0];
                  if (v148 + 16 * v149 > v145)
                  {
                    unsigned int v150 = v149 - 1;
                    LODWORD(v151) = v150 & ((v193 >> 4) ^ (v193 >> 9));
                    __int16 v152 = (uint64_t *)(v148 + 16 * v151);
                    uint64_t v153 = *v152;
                    if (v193 != *v152)
                    {
                      int v154 = 1;
                      do
                      {
                        if (v153 == -4096) {
                          goto LABEL_207;
                        }
                        int v155 = v151 + v154++;
                        uint64_t v151 = v155 & v150;
                        uint64_t v153 = *(void *)(v148 + 16 * v151);
                      }
                      while (v193 != v153);
                      __int16 v152 = (uint64_t *)(v148 + 16 * v151);
                    }
                    uint64_t *v152 = -8192;
                    v147[304] = vadd_s32(v147[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v146 = v193;
LABEL_207:
                    *(unsigned char *)(v146 + 17) &= ~1u;
                  }
                }
              }
            }
          }
          LOBYTE(v189) = 0;
          char v190 = 0;
          v191[0] = ".duppred";
          LOWORD(v194) = 259;
          llvm::CloneBasicBlock();
        }
        uint64_t v41 = v33;
        if (v32 == 2)
        {
          uint64_t v42 = v23;
          uint64_t v43 = v22;
          uint64_t v182 = (void *)(v8 + 88 * v5);
          uint64_t v44 = v8;
          uint64_t v4 = v176;
          LODWORD(v5) = *(_DWORD *)(*(void *)(*((void *)&v183 + 1)
                                              + (((unint64_t)v185 >> 7) & 0x1FFFFFFFFFFFFF8))
                                  + 4 * (v185 & 0x3FF));
          if ((sub_1CC7CF1D8(v176, v175, 1, 1) & 1) == 0)
          {
            uint64_t v45 = v176[11] + 88 * *(unsigned int *)(*(void *)v3 + 16 * v41 + 8);
            uint64_t v8 = v44;
            *(_DWORD *)(v44 + 88 * v175 + 12) = *(_DWORD *)(v45 + 12);
            char v46 = *(unsigned char *)(v45 + 16);
            uint64_t v22 = v43;
            uint64_t v23 = v42;
            goto LABEL_98;
          }
        }
        else
        {
          uint64_t v54 = v40;
          uint64_t v55 = sub_1CC7D2C40((uint64_t)v176);
          uint64_t v56 = v176[11];
          uint64_t v57 = v56 + 88 * v175;
          uint64_t v60 = *(void *)(v57 + 40);
          uint64_t v58 = (uint64_t *)(v57 + 40);
          uint64_t v59 = v60;
          uint64_t v61 = v60 + 16 * v33;
          uint64_t v62 = (void **)(v60 + 16 * v40);
          if (*(unsigned char *)(v61 + 12)) {
            int v63 = v62;
          }
          else {
            int v63 = (void **)v61;
          }
          if (*(unsigned char *)(v61 + 12))
          {
            uint64_t v54 = v33;
            int v64 = (void **)v61;
          }
          else
          {
            int v64 = v62;
          }
          v191[1] = 0;
          v191[0] = 0;
          v191[0] = *v64;
          v191[1] = *v63;
          *(void *)uint64_t v55 = sub_1CD1271B8(*(uint64_t ***)(v56 + 88 * v175), (int)v191, 2, "Join", 0, v176[5], v176[4], 0, 0);
          uint64_t v65 = v176[11] + 88 * *((unsigned int *)v64 + 2);
          *(_DWORD *)(v55 + 12) = *(_DWORD *)(v65 + 12);
          *(unsigned char *)(v55 + 16) = *(unsigned char *)(v65 + 16);
          unint64_t v66 = *(unsigned int *)(v55 + 48);
          if (v66 >= *(unsigned int *)(v55 + 52)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_OWORD *)(*(void *)(v55 + 40) + 16 * v66) = *(_OWORD *)(v59 + 16 * v54);
          unsigned int v67 = *(_DWORD *)(v55 + 52);
          unsigned int v68 = *(_DWORD *)(v55 + 48) + 1;
          *(_DWORD *)(v55 + 48) = v68;
          if (v68 >= v67) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_OWORD *)(*(void *)(v55 + 40) + 16 * v68) = *(_OWORD *)v63;
          ++*(_DWORD *)(v55 + 48);
          *(_DWORD *)(v55 + 8) = 1;
          if (v33 <= v40) {
            unsigned int v69 = v40;
          }
          else {
            unsigned int v69 = v33;
          }
          uint64_t v70 = *v58;
          uint64_t v71 = *v58 + 16 * v69;
          uint64_t v72 = *((unsigned int *)v58 + 2);
          uint64_t v73 = *v58 + 16 * v72 - (v71 + 16);
          if (v73)
          {
            memmove((void *)v71, (const void *)(v71 + 16), v73 - 2);
            LODWORD(v72) = *((_DWORD *)v58 + 2);
            uint64_t v70 = *v58;
          }
          unsigned int v74 = v72 - 1;
          *((_DWORD *)v58 + 2) = v74;
          if (v40 >= v33) {
            unsigned int v75 = v33;
          }
          else {
            unsigned int v75 = v40;
          }
          uint64_t v76 = v70 + 16 * v75;
          uint64_t v77 = 16 * v74 - (16 * v75 + 16);
          if (v77)
          {
            memmove((void *)v76, (const void *)(v76 + 16), v77 - 2);
            unsigned int v74 = *((_DWORD *)v58 + 2);
          }
          uint64_t v4 = v176;
          *((_DWORD *)v58 + 2) = v74 - 1;
          uint64_t v78 = *(void *)v55;
          uint64_t v79 = *(unsigned int *)(v55 + 12);
          uint64_t v3 = *(unsigned __int8 *)(v55 + 16);
          if (v74 - 1 >= *((_DWORD *)v58 + 3)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unint64_t v80 = (void *)(*v58 + 16 * (v74 - 1));
          void *v80 = v78;
          v80[1] = v79 | (v3 << 32);
          ++*((_DWORD *)v58 + 2);
        }
      }
      uint64_t v182 = (void *)(v8 + 88 * v5);
      uint64_t v3 = v4[11];
      if (!sub_1CC7CF1D8(v4, v5, 1, 1)) {
        break;
      }
      uint64_t v172 = *(void *)(v4[11] + 88 * v5);
    }
    char v46 = 0;
    uint64_t v8 = v3;
    *(_DWORD *)(v3 + 88 * v5 + 12) = v5;
LABEL_98:
    *(unsigned char *)(v8 + 88 * v5 + 16) = v46;
    uint64_t v177 = v8;
    if (v23 >= 2)
    {
      uint64_t v3 = 0;
      while (1)
      {
        uint64_t v81 = llvm::Instruction::getSuccessor((llvm::Instruction *)v22, v3);
        uint64_t v82 = v4[11];
        unsigned int v83 = *((_DWORD *)v4 + 24);
        if (v83)
        {
          unsigned int v84 = (void *)(v82 + 88 * v83);
          uint64_t v85 = (void *)v4[11];
          uint64_t v86 = 88 * v83;
          while (*v85 != v81)
          {
            v85 += 11;
            v86 -= 88;
            if (!v86)
            {
              uint64_t v85 = v84;
              break;
            }
          }
        }
        else
        {
          uint64_t v85 = (void *)v4[11];
        }
        if (*(void *)(v82 + 0xFFFFFFE800000008 * (((unint64_t)v85 - v82) >> 3) + 24)) {
          goto LABEL_118;
        }
        if (v174) {
          break;
        }
LABEL_116:
        uint64_t v3 = (v3 + 1);
        if (v3 == v23)
        {
          int v180 = 1;
          goto LABEL_119;
        }
      }
      int v87 = (uint64_t *)v4[4];
      int v88 = *((_DWORD *)v87 + 4);
      if (v88)
      {
        uint64_t v89 = *v87;
        unsigned int v90 = v88 - 1;
        uint64_t v91 = (v88 - 1) & ((v81 >> 4) ^ (v81 >> 9));
        uint64_t v92 = *(void *)(v89 + 16 * v91);
        if (v81 == v92)
        {
LABEL_113:
          uint64_t v95 = *(void *)(v89 + 16 * v91 + 8);
          goto LABEL_115;
        }
        int v93 = 1;
        while (v92 != -4096)
        {
          int v94 = v91 + v93++;
          uint64_t v91 = v94 & v90;
          uint64_t v92 = *(void *)(v89 + 16 * v91);
          if (v81 == v92) {
            goto LABEL_113;
          }
        }
      }
      uint64_t v95 = 0;
LABEL_115:
      if (v95 != v174) {
        goto LABEL_118;
      }
      goto LABEL_116;
    }
LABEL_118:
    int v180 = 0;
LABEL_119:
    uint64_t v96 = v174;
    if (v23)
    {
      int v181 = (llvm::Instruction *)v22;
      unsigned int v97 = 0;
      uint64_t v98 = v177 + 88 * v175;
      uint64_t v179 = (llvm::Value *)(v98 + 12);
      int v178 = (unsigned char *)(v98 + 16);
      while (1)
      {
        uint64_t v99 = llvm::Instruction::getSuccessor(v181, v97);
        if (v99 != v172) {
          break;
        }
LABEL_177:
        if (++v97 == v23) {
          goto LABEL_190;
        }
      }
      uint64_t v100 = v99;
      uint64_t v101 = (uint64_t *)v4[4];
      int v102 = *((_DWORD *)v101 + 4);
      if (v102)
      {
        uint64_t v103 = *v101;
        unsigned int v104 = v102 - 1;
        uint64_t v105 = (v102 - 1) & ((v99 >> 4) ^ (v99 >> 9));
        uint64_t v106 = *(void *)(v103 + 16 * v105);
        if (v99 != v106)
        {
          int v107 = 1;
          while (v106 != -4096)
          {
            int v108 = v105 + v107++;
            uint64_t v105 = v108 & v104;
            uint64_t v106 = *(void *)(v103 + 16 * v105);
            if (v99 == v106) {
              goto LABEL_127;
            }
          }
          goto LABEL_131;
        }
LABEL_127:
        uint64_t v109 = *(void *)(v103 + 16 * v105 + 8);
        if (v109 && **(void **)(v109 + 32) == v100) {
          llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getUniqueExitBlock();
        }
      }
      else
      {
LABEL_131:
        uint64_t v109 = 0;
      }
      uint64_t v3 = v109 != v96;
      uint64_t v110 = v4[11];
      unsigned int v111 = *((_DWORD *)v4 + 24);
      if (v111)
      {
        uint64_t v112 = (void *)(v110 + 88 * v111);
        uint64_t v113 = (void *)v4[11];
        uint64_t v114 = 88 * v111;
        uint64_t v115 = v182;
        while (*v113 != v100)
        {
          v113 += 11;
          v114 -= 88;
          if (!v114)
          {
            uint64_t v113 = v112;
            break;
          }
        }
      }
      else
      {
        uint64_t v113 = (void *)v4[11];
        uint64_t v115 = v182;
      }
      uint64_t v116 = v23;
      unsigned int v117 = -1171354717 * (((uint64_t)v113 - v110) >> 3);
      uint64_t v118 = v110 + 88 * v117;
      if (v180) {
        uint64_t v119 = v175;
      }
      else {
        uint64_t v119 = *(unsigned int *)v179;
      }
      if (v180) {
        BOOL v120 = v97 == 0;
      }
      else {
        BOOL v120 = *v178 != 0;
      }
      uint64_t v182 = v115;
      if (v120) {
        uint64_t v121 = 0x100000000;
      }
      else {
        uint64_t v121 = 0;
      }
      if (v109 == v96) {
        uint64_t v122 = 0;
      }
      else {
        uint64_t v122 = 0x10000000000;
      }
      unint64_t v123 = *(unsigned int *)(v118 + 48);
      if (v123 >= *(unsigned int *)(v118 + 52)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v124 = v122 | v173 & 0xFFFF000000000000 | v119 | v121;
      int v125 = (void *)(*(void *)(v118 + 40) + 16 * v123);
      *int v125 = *v115;
      v125[1] = v124;
      unsigned int v126 = *(_DWORD *)(v118 + 48) + 1;
      *(_DWORD *)(v118 + 48) = v126;
      uint64_t v127 = *(void *)(v118 + 24);
      if (v127) {
        uint64_t v127 = *(unsigned int *)(v118 + 32);
      }
      uint64_t v23 = v116;
      unint64_t v173 = v124;
      if (v3)
      {
        BOOL v128 = 0;
        uint64_t v96 = v174;
      }
      else
      {
        uint64_t v129 = *(void *)(v100 + 8);
        if (v129)
        {
          uint64_t v96 = v174;
          while (1)
          {
            uint64_t v130 = *(void *)(v129 + 24);
            unsigned int v131 = *(unsigned __int8 *)(v130 + 16);
            BOOL v132 = v130 && v131 >= 0x1C;
            if (v132 && v131 - 29 <= 0xA) {
              break;
            }
            uint64_t v129 = *(void *)(v129 + 8);
            if (!v129)
            {
              int v138 = 0;
              goto LABEL_168;
            }
          }
          int v138 = 0;
LABEL_179:
          ++v138;
          while (1)
          {
            uint64_t v129 = *(void *)(v129 + 8);
            if (!v129) {
              break;
            }
            uint64_t v139 = *(void *)(v129 + 24);
            unsigned int v140 = *(unsigned __int8 *)(v139 + 16);
            if (v139) {
              BOOL v141 = v140 >= 0x1C;
            }
            else {
              BOOL v141 = 0;
            }
            if (v141 && v140 - 29 < 0xB) {
              goto LABEL_179;
            }
          }
        }
        else
        {
          int v138 = 0;
          uint64_t v96 = v174;
        }
LABEL_168:
        BOOL v128 = v127 + v126 == v138;
      }
      if (v128)
      {
        uint64_t v134 = *((void *)&v183 + 1);
        if ((void)v184 == *((void *)&v183 + 1)) {
          uint64_t v135 = 0;
        }
        else {
          uint64_t v135 = (((void)v184 - *((void *)&v183 + 1)) << 7) - 1;
        }
        uint64_t v136 = *((void *)&v185 + 1);
        unint64_t v137 = *((void *)&v185 + 1) + v185;
        if (v135 == *((void *)&v185 + 1) + (void)v185)
        {
          sub_1CC28F9E8((uint64_t)&v183);
          uint64_t v136 = *((void *)&v185 + 1);
          uint64_t v134 = *((void *)&v183 + 1);
          unint64_t v137 = v185 + *((void *)&v185 + 1);
        }
        *(_DWORD *)(*(void *)(v134 + ((v137 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v137 & 0x3FF)) = v117;
        *((void *)&v185 + 1) = v136 + 1;
        *(unsigned char *)(v118 + 36) = 1;
        uint64_t v4 = v176;
      }
      else
      {
        uint64_t v4 = v176;
      }
      goto LABEL_177;
    }
LABEL_190:
    *(_DWORD *)(v177 + 88 * v175 + 8) = 1;
    uint64_t v143 = *((void *)&v185 + 1) - 1;
    unint64_t v144 = v185 + 1;
    unsigned long long v185 = __PAIR128__(*((unint64_t *)&v185 + 1), (uint64_t)v185 + 1) + __PAIR128__(-1, 0);
    if (v144 >= 0x800)
    {
      operator delete(**((void ***)&v183 + 1));
      *((void *)&v183 + 1) += 8;
      *(void *)&unsigned long long v185 = v185 - 1024;
      uint64_t v143 = *((void *)&v185 + 1);
    }
    *(unsigned char *)(v177 + 88 * v175 + 36) = 0;
  }
  while (v143);
  return sub_1CC28F5F0((void **)&v183);
}

void sub_1CC7D29B4(char **a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *((unsigned int *)a1 + 3);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = (char *)malloc_type_malloc(88 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a1 + 2);
  if (v9)
  {
    uint64_t v10 = &v8[88 * v9];
    uint64_t v11 = v6 + 40;
    uint64_t v12 = (uint64_t)(v8 + 40);
    do
    {
      long long v13 = *(_OWORD *)(v12 - 40);
      long long v14 = *(_OWORD *)(v12 - 24);
      *(void *)((char *)v11 - 11) = *(void *)(v12 - 11);
      *(_OWORD *)(v11 - 3) = v14;
      *(_OWORD *)(v11 - 5) = v13;
      *uint64_t v11 = v11 + 2;
      v11[1] = 0x200000000;
      if (*(_DWORD *)(v12 + 8)) {
        uint64_t v11 = (void *)sub_1CC7D2B1C((uint64_t)v11, v12);
      }
      uint64_t v15 = v12 - 40;
      v11 += 11;
      v12 += 88;
    }
    while ((char *)(v15 + 88) != v10);
    uint64_t v8 = *a1;
    unsigned int v16 = *((_DWORD *)a1 + 2);
    if (v16)
    {
      uint64_t v17 = 88 * v16;
      do
      {
        uint64_t v18 = *(char **)&v8[v17 - 48];
        if (&v8[v17 - 32] != v18) {
          free(v18);
        }
        v17 -= 88;
      }
      while (v17);
      uint64_t v8 = *a1;
    }
  }
  if (v8 != (char *)(a1 + 2)) {
    free(v8);
  }
  *a1 = v7;
  *((_DWORD *)a1 + 3) = v5;
}

uint64_t sub_1CC7D2B1C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = (const void *)(a2 + 16);
    unint64_t v4 = *(const void **)a2;
    if (v4 == v5)
    {
      uint64_t v7 = (_DWORD *)(a2 + 8);
      uint64_t v8 = *(unsigned int *)(a2 + 8);
      uint64_t v9 = *(unsigned int *)(a1 + 8);
      if (v9 >= v8)
      {
        if (v8) {
          memmove(*(void **)a1, v4, 16 * v8 - 2);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v8)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v9) {
          memmove(*(void **)a1, v4, 16 * v9 - 2);
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *v7;
        if (v9 != v10) {
          memcpy((void *)(*(void *)a1 + 16 * v9), (const void *)(*(void *)a2 + 16 * v9), *(void *)a2 + 16 * v10 - (*(void *)a2 + 16 * v9));
        }
      }
      *(_DWORD *)(a1 + 8) = v8;
    }
    else
    {
      uint64_t v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        unint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      uint64_t v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    _DWORD *v7 = 0;
  }
  return a1;
}

uint64_t sub_1CC7D2C40(uint64_t a1)
{
  v23[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (unint64_t *)(a1 + 88);
  unint64_t v2 = *(void *)(a1 + 88);
  v16[0] = 0;
  v16[1] = -1;
  char v17 = 0;
  uint64_t v18 = 0;
  int v19 = -1;
  char v20 = 0;
  unint64_t v4 = (char *)v16;
  uint64_t v21 = v23;
  uint64_t v22 = 0x200000000;
  uint64_t v5 = *(unsigned int *)(a1 + 96);
  if (v5 >= *(_DWORD *)(a1 + 100))
  {
    unint64_t v13 = v5 + 1;
    BOOL v14 = v2 + 88 * v5 > (unint64_t)v16;
    if (v2 <= (unint64_t)v16 && v14)
    {
      uint64_t v15 = (char *)v16 - v2;
      sub_1CC7D29B4((char **)(a1 + 88), v13);
      unint64_t v2 = *v3;
      unint64_t v4 = &v15[*v3];
    }
    else
    {
      sub_1CC7D29B4((char **)(a1 + 88), v13);
      unint64_t v2 = *v3;
      unint64_t v4 = (char *)v16;
    }
  }
  uint64_t v6 = v2 + 88 * *(unsigned int *)(a1 + 96);
  long long v7 = *(_OWORD *)v4;
  long long v8 = *((_OWORD *)v4 + 1);
  *(void *)(v6 + 29) = *(void *)(v4 + 29);
  *(_OWORD *)uint64_t v6 = v7;
  *(_OWORD *)(v6 + 16) = v8;
  *(void *)(v6 + 48) = 0x200000000;
  *(void *)(v6 + 40) = v6 + 56;
  uint64_t v9 = v6 + 40;
  if (*((_DWORD *)v4 + 12)) {
    sub_1CC7D2B1C(v9, (uint64_t)(v4 + 40));
  }
  unsigned int v10 = *(_DWORD *)(a1 + 96) + 1;
  *(_DWORD *)(a1 + 96) = v10;
  uint64_t v11 = *(void *)(a1 + 88);
  if (v21 != v23) {
    free(v21);
  }
  return v11 + 88 * v10 - 88;
}

void sub_1CC7D2DA4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 32);
  *(void *)(v8 + 128) += 152;
  uint64_t v9 = *(void *)(v8 + 48);
  if (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) - v9 + 152 > *(void *)(v8 + 56) - v9)
  {
    unsigned int v65 = *(_DWORD *)(v8 + 72) >> 7;
    if (v65 >= 0x1E) {
      LOBYTE(v65) = 30;
    }
    uint64_t v66 = 4096 << v65;
    unint64_t v10 = (unint64_t)operator new(4096 << v65, (std::align_val_t)8uLL);
    unsigned int v67 = *(_DWORD *)(v8 + 72);
    if (v67 >= *(_DWORD *)(v8 + 76)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v8 + 64) + 8 * v67) = v10;
    ++*(_DWORD *)(v8 + 72);
    *(void *)(v8 + 56) = v10 + v66;
  }
  else
  {
    unint64_t v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v8 + 48) = v10 + 152;
  *(void *)(v10 + 144) = 0;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)unint64_t v10 = 0u;
  *(void *)(v10 + 56) = v10 + 88;
  *(void *)(v10 + 64) = v10 + 88;
  *(_DWORD *)(v10 + 72) = 8;
  if (a3)
  {
    *(void *)unint64_t v10 = a3;
    uint64_t v12 = (unint64_t *)a3[2];
    unint64_t v11 = a3[3];
    if ((unint64_t)v12 < v11)
    {
      unint64_t *v12 = v10;
      unint64_t v13 = v12 + 1;
LABEL_32:
      a3[2] = v13;
      goto LABEL_40;
    }
    uint64_t v18 = (void *)a3[1];
    uint64_t v19 = v12 - v18;
    unint64_t v20 = v19 + 1;
    if (!((unint64_t)(v19 + 1) >> 61))
    {
      uint64_t v21 = v11 - (void)v18;
      if (v21 >> 2 > v20) {
        unint64_t v20 = v21 >> 2;
      }
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v20;
      }
      if (!v22)
      {
        uint64_t v23 = 0;
        goto LABEL_27;
      }
      if (!(v22 >> 61))
      {
        uint64_t v23 = (char *)operator new(8 * v22);
LABEL_27:
        uint64_t v30 = (unint64_t *)&v23[8 * v19];
        *uint64_t v30 = v10;
        unint64_t v13 = v30 + 1;
        if (v12 != v18)
        {
          do
          {
            unint64_t v31 = *--v12;
            *--uint64_t v30 = v31;
          }
          while (v12 != v18);
          uint64_t v12 = (unint64_t *)a3[1];
        }
        a3[1] = v30;
        a3[2] = v13;
        a3[3] = &v23[8 * v22];
        if (v12) {
          operator delete(v12);
        }
        goto LABEL_32;
      }
LABEL_84:
      sub_1CB833614();
    }
LABEL_83:
    abort();
  }
  BOOL v14 = *(void **)(a1 + 32);
  unsigned int v16 = (unint64_t *)v14[4];
  unint64_t v15 = v14[5];
  if ((unint64_t)v16 >= v15)
  {
    uint64_t v24 = (void *)v14[3];
    uint64_t v25 = v16 - v24;
    unint64_t v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 61) {
      goto LABEL_83;
    }
    uint64_t v27 = v15 - (void)v24;
    if (v27 >> 2 > v26) {
      unint64_t v26 = v27 >> 2;
    }
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v26;
    }
    if (v28)
    {
      if (v28 >> 61) {
        goto LABEL_84;
      }
      unint64_t v29 = (char *)operator new(8 * v28);
    }
    else
    {
      unint64_t v29 = 0;
    }
    int v32 = (unint64_t *)&v29[8 * v25];
    *int v32 = v10;
    char v17 = v32 + 1;
    if (v16 != v24)
    {
      do
      {
        unint64_t v33 = *--v16;
        *--int v32 = v33;
      }
      while (v16 != v24);
      unsigned int v16 = (unint64_t *)v14[3];
    }
    v14[3] = v32;
    v14[4] = v17;
    v14[5] = &v29[8 * v28];
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *unsigned int v16 = v10;
    char v17 = v16 + 1;
  }
  v14[4] = v17;
LABEL_40:
  uint64_t v34 = *(int32x2_t ******)(a2 + 32);
  int v35 = *(int32x2_t ******)(a2 + 40);
  if (v35 == v34)
  {
LABEL_71:
    uint64_t v58 = **(void **)(v10 + 32);
    uint64_t v59 = *(void *)(a1 + 88);
    unsigned int v60 = *(_DWORD *)(a1 + 96);
    if (v60)
    {
      uint64_t v61 = (void *)(v59 + 88 * v60);
      uint64_t v62 = 88 * v60;
      int v63 = *(void **)(a1 + 88);
      do
      {
        if (*v63 == v58) {
          goto LABEL_77;
        }
        v63 += 11;
        v62 -= 88;
      }
      while (v62);
      int v63 = v61;
    }
    else
    {
      int v63 = *(void **)(a1 + 88);
    }
LABEL_77:
    int v64 = (void *)(v59 + 0xFFFFFFE800000008 * (((unint64_t)v63 - v59) >> 3));
    void *v64 = v58;
    v64[3] = v10;
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getNumBackEdges();
  }
  while (1)
  {
    uint64_t v36 = *(uint64_t **)(a1 + 32);
    uint64_t v37 = *v34;
    int v38 = *((_DWORD *)v36 + 4);
    if (!v38) {
      goto LABEL_47;
    }
    uint64_t v39 = *v36;
    unsigned int v40 = v38 - 1;
    uint64_t v41 = ((v37 >> 4) ^ (v37 >> 9)) & (v38 - 1);
    uint64_t v42 = *(int32x2_t *****)(v39 + 16 * v41);
    if (v37 != v42) {
      break;
    }
LABEL_46:
    uint64_t v45 = *(void *)(v39 + 16 * v41 + 8);
LABEL_48:
    if (v45 == a2)
    {
      uint64_t v69 = 2;
      uint64_t v70 = 0;
      uint64_t v71 = v37;
      if (v37 != (int32x2_t ****)-8192 && v37 != (int32x2_t ****)-4096 && v37 != 0) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v69);
      }
      unsigned int v68 = &unk_1F2615EC8;
      uint64_t v72 = a4;
      sub_1CC4CFF80(a4, &v68);
      if (v71 != (int32x2_t ****)-8192 && v71 != (int32x2_t ****)-4096 && v71)
      {
        unint64_t v47 = v69 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v69 & 0xFFFFFFFFFFFFFFF8) = v70;
        if (v70)
        {
          *uint64_t v70 = *v70 & 7 | v47;
        }
        else
        {
          uint64_t v48 = v71;
          unint64_t v49 = ***v71;
          unint64_t v50 = (unint64_t)v49[303];
          if (v50 <= v47)
          {
            uint64_t v51 = v49[305].u32[0];
            if (v50 + 16 * v51 > v47)
            {
              unsigned int v52 = v51 - 1;
              LODWORD(v53) = v52 & ((v71 >> 4) ^ (v71 >> 9));
              uint64_t v54 = (int32x2_t *****)(v50 + 16 * v53);
              uint64_t v55 = *v54;
              if (v71 != *v54)
              {
                int v56 = 1;
                do
                {
                  if (v55 == (int32x2_t ****)-4096) {
                    goto LABEL_67;
                  }
                  int v57 = v53 + v56++;
                  uint64_t v53 = v57 & v52;
                  uint64_t v55 = *(int32x2_t *****)(v50 + 16 * v53);
                }
                while (v71 != v55);
                uint64_t v54 = (int32x2_t *****)(v50 + 16 * v53);
              }
              *uint64_t v54 = (int32x2_t ****)-8192;
              v49[304] = vadd_s32(v49[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v48 = v71;
LABEL_67:
              *((unsigned char *)v48 + 17) &= ~1u;
            }
          }
        }
      }
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop();
    }
    if (++v34 == v35) {
      goto LABEL_71;
    }
  }
  int v43 = 1;
  while (v42 != (int32x2_t ****)-4096)
  {
    int v44 = v41 + v43++;
    uint64_t v41 = v44 & v40;
    uint64_t v42 = *(int32x2_t *****)(v39 + 16 * v41);
    if (v37 == v42) {
      goto LABEL_46;
    }
  }
LABEL_47:
  uint64_t v45 = 0;
  goto LABEL_48;
}

uint64_t sub_1CC7D32D0()
{
  int v4 = 1;
  char v2 = 0;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable trying to fixup the CFG to nested form.";
  v1.n128_u64[1] = 47;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCDB9F0, "disable-cfg-nesting", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDB9F0, &dword_1CB82C000);
}

void sub_1CC7D335C()
{
}

uint64_t sub_1CC7D33F8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDBAC0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261ED30;
  *(void *)(a1 + 32) = a2;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDBAC8, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CC7D335C;
    v6[1] = &PassRegistry;
    uint64_t v5 = v6;
    std::__call_once(&qword_1EBCDBAC8, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC7D34AC()
{
}

void sub_1CC7D34F0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC7D3528()
{
  return "GPU-specific code gen preparation";
}

void sub_1CC7D3538(llvm::PassRegistry *a1, uint64_t a2)
{
  v3[0] = &unk_1F2617E40;
  v3[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v3);
}

uint64_t sub_1CC7D3584(uint64_t a1, uint64_t a2)
{
  v149[8] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 40);
  if (*(char *)(v3 + 239) < 0) {
    sub_1CB8BDF7C((uint64_t)&v125, *(const void **)(v3 + 216), *(void *)(v3 + 224));
  }
  else {
    std::string v125 = *(std::string *)(v3 + 216);
  }
  if (!std::string::compare(&v125, 0, 4uLL, "agx1"))
  {
    unsigned int v123 = 0;
  }
  else
  {
    if (!std::string::compare(&v125, 0, 4uLL, "agx2"))
    {
      int v5 = 1;
    }
    else if (!std::string::compare(&v125, 0, 4uLL, "agx3"))
    {
      int v5 = 2;
    }
    else
    {
      int v5 = -27;
    }
    unsigned int v123 = v5;
  }
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = a2 + 72;
  uint64_t v7 = *(void *)(a2 + 80);
  uint64_t v122 = a2;
  uint64_t v124 = a2 + 72;
  if (v7 != a2 + 72)
  {
    while (1)
    {
      uint64_t v8 = v7 ? v7 - 24 : 0;
      unint64_t v145 = v149;
      uint64_t v146 = v149;
      uint64_t v147 = 8;
      int v148 = 0;
      uint64_t v9 = *(void *)(v8 + 48);
      if (v9 != v8 + 40) {
        break;
      }
LABEL_135:
      uint64_t v7 = *(void *)(v7 + 8);
      uint64_t v6 = a2 + 72;
      if (v7 == v124)
      {
        uint64_t v57 = *(void *)(a2 + 80);
        goto LABEL_138;
      }
    }
    while (1)
    {
      uint64_t v10 = v9 - 24;
      BOOL v33 = v9 == 0;
      uint64_t v9 = *(void *)(v9 + 8);
      unint64_t v11 = v33 ? 0 : (llvm::Instruction *)v10;
      int v12 = *((unsigned __int8 *)v11 + 16);
      if ((v12 - 47) > 1) {
        break;
      }
      unint64_t v13 = v146;
      uint64_t v14 = HIDWORD(v147);
      if (v146 != v145)
      {
        uint64_t v4 = v147;
LABEL_56:
        if (3 * (int)v4 <= (4 * (HIDWORD(v147) - v148)))
        {
          if (v4 >= 0x40) {
            LODWORD(v4) = 2 * v4;
          }
          else {
            LODWORD(v4) = 128;
          }
        }
        else if ((int)v4 - HIDWORD(v147) >= v4 >> 3)
        {
          goto LABEL_58;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v145, v4);
        uint64_t v4 = v147;
        unint64_t v13 = v146;
LABEL_58:
        int v27 = v4 - 1;
        unsigned int v28 = (v4 - 1) & ((v11 >> 4) ^ (v11 >> 9));
        unint64_t v29 = (char *)&v13[v28];
        uint64_t v30 = *(llvm::Instruction **)v29;
        if (*(void *)v29 == -1)
        {
          unint64_t v31 = 0;
LABEL_70:
          if (v31) {
            int v35 = (llvm::Instruction **)v31;
          }
          else {
            int v35 = (llvm::Instruction **)v29;
          }
          if (*v35 != v11)
          {
            if (*v35 == (llvm::Instruction *)-2) {
              --v148;
            }
            else {
              ++HIDWORD(v147);
            }
            llvm::Value *v35 = v11;
          }
        }
        else
        {
          unint64_t v31 = 0;
          int v32 = 1;
          while (v30 != v11)
          {
            if (v31) {
              BOOL v33 = 0;
            }
            else {
              BOOL v33 = v30 == (llvm::Instruction *)-2;
            }
            if (v33) {
              unint64_t v31 = v29;
            }
            unsigned int v34 = v28 + v32++;
            unsigned int v28 = v34 & v27;
            unint64_t v29 = (char *)&v13[v34 & v27];
            uint64_t v30 = *(llvm::Instruction **)v29;
            if (*(void *)v29 == -1) {
              goto LABEL_70;
            }
          }
        }
        goto LABEL_77;
      }
      if (HIDWORD(v147))
      {
        unint64_t v15 = 0;
        uint64_t v16 = 8 * HIDWORD(v147);
        char v17 = v146;
        while ((llvm::Instruction *)*v17 != v11)
        {
          if (*v17 == -2) {
            unint64_t v15 = (llvm::Instruction **)v17;
          }
          ++v17;
          v16 -= 8;
          if (!v16)
          {
            if (!v15) {
              goto LABEL_30;
            }
            *unint64_t v15 = v11;
            --v148;
            goto LABEL_77;
          }
        }
        goto LABEL_77;
      }
LABEL_30:
      uint64_t v4 = v147;
      if (HIDWORD(v147) >= v147) {
        goto LABEL_56;
      }
      ++HIDWORD(v147);
      v146[v14] = (uint64_t)v11;
LABEL_77:
      if (v9 == v8 + 40)
      {
        if (v146 != v145) {
          free(v146);
        }
        goto LABEL_135;
      }
    }
    int v18 = v12 - 28;
    if (((v12 - 28) & 0xFFFFFFFE) != 0x16) {
      goto LABEL_77;
    }
    if ((v12 - 41) >= 0x12) {
      unint64_t v11 = 0;
    }
    uint64_t v19 = *((void *)v11 - 8);
    uint64_t v20 = *(void *)(v19 + 8);
    if (!v20) {
      goto LABEL_77;
    }
    uint64_t v21 = *((void *)v11 - 4);
    while (1)
    {
      uint64_t v22 = *(void *)(v20 + 24);
      unsigned int v23 = *(unsigned __int8 *)(v22 + 16);
      if (v22) {
        BOOL v24 = v23 >= 0x1C;
      }
      else {
        BOOL v24 = 0;
      }
      if (!v24 || v23 - 59 < 0xFFFFFFEE) {
        goto LABEL_53;
      }
      unsigned int v26 = v23 - 28;
      if (v26 == 20)
      {
        if (v18 != 23) {
          goto LABEL_53;
        }
      }
      else if (v18 != 22 || v26 != 19)
      {
        goto LABEL_53;
      }
      if (v19 == *(void *)(v22 - 64) && v21 == *(void *)(v22 - 32) && *(void *)(v22 + 40) == v8)
      {
        uint64_t v36 = v145;
        if (v146 == v145)
        {
          int v37 = HIDWORD(v147);
          int v38 = &v146[HIDWORD(v147)];
          if (HIDWORD(v147))
          {
            uint64_t v39 = 0;
            while (v146[v39] != v22)
            {
              if (HIDWORD(v147) == ++v39) {
                goto LABEL_104;
              }
            }
            int v38 = &v146[v39];
          }
LABEL_104:
          uint64_t v36 = v146;
        }
        else
        {
          int v40 = v147 - 1;
          unsigned int v41 = (v147 - 1) & ((v22 >> 4) ^ (v22 >> 9));
          int v38 = &v146[v41];
          uint64_t v42 = *v38;
          if (*v38 == -1)
          {
            int v43 = 0;
LABEL_115:
            if (v43) {
              int v38 = (uint64_t *)v43;
            }
            int v37 = HIDWORD(v147);
            if (*v38 != v22) {
              int v38 = &v146[v147];
            }
          }
          else
          {
            int v43 = 0;
            int v44 = 1;
            while (v42 != v22)
            {
              if (v43) {
                BOOL v45 = 0;
              }
              else {
                BOOL v45 = v42 == -2;
              }
              if (v45) {
                int v43 = (char *)v38;
              }
              unsigned int v46 = v41 + v44++;
              unsigned int v41 = v46 & v40;
              int v38 = &v146[v46 & v40];
              uint64_t v42 = *v38;
              if (*v38 == -1) {
                goto LABEL_115;
              }
            }
            int v37 = HIDWORD(v147);
          }
        }
        if (v146 == v36) {
          int v47 = v37;
        }
        else {
          int v47 = v147;
        }
        if (v38 == &v146[v47]) {
          llvm::Instruction::moveBefore((llvm::Instruction *)v22, v11);
        }
        uint64_t v48 = 0;
        uint64_t v49 = **(void **)v11;
        uint64_t v129 = v131;
        uint64_t v130 = 0x200000000;
        uint64_t v134 = v49;
        uint64_t v135 = &v143;
        uint64_t v136 = &v144;
        uint64_t v137 = 0;
        int v138 = 0;
        __int16 v139 = 512;
        char v140 = 7;
        BOOL v132 = 0;
        int v133 = 0;
        uint64_t v141 = 0;
        uint64_t v142 = 0;
        uint64_t v143 = &unk_1F2616E88;
        unint64_t v144 = &unk_1F2617008;
        BOOL v132 = (void *)*((void *)v11 + 5);
        int v133 = (void **)((char *)v11 + 24);
        unint64_t v50 = (unsigned __int8 *)*((void *)v11 + 6);
        BOOL v128 = v50;
        if (v50)
        {
          llvm::MetadataTracking::track((uint64_t)&v128, v50, 2);
          uint64_t v48 = (uint64_t)v128;
        }
        sub_1CB8461A4((uint64_t)&v129, 0, v48);
        if (!v128)
        {
LABEL_113:
          __int16 v127 = 257;
          uint64_t v51 = sub_1CC09A1EC((uint64_t)&v129, v22, v21, (uint64_t)v126, 0, 0);
          __int16 v127 = 257;
          unsigned int v52 = sub_1CB84494C((uint64_t)&v129, v19, (uint64_t)v51, (uint64_t)v126, 0, 0);
          llvm::Value::doRAUW(v11, v52, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        int v53 = *v128;
        if ((v53 - 4) > 0x1E)
        {
          if ((v53 - 3) >= 0xFFFFFFFE) {
            int v56 = v128;
          }
          else {
            int v56 = 0;
          }
          if ((v53 - 3) < 0xFFFFFFFE)
          {
            if (v53 == 3) {
              *((void *)v128 + 1) = 0;
            }
            goto LABEL_113;
          }
          unint64_t v55 = (unint64_t)(v56 + 8);
        }
        else
        {
          if ((v128[1] & 0x7F) != 2 && !*((_DWORD *)v128 + 3)) {
            goto LABEL_113;
          }
          uint64_t v54 = *((void *)v128 + 2);
          if ((v54 & 4) == 0) {
            goto LABEL_113;
          }
          unint64_t v55 = v54 & 0xFFFFFFFFFFFFFFF8;
          if (!v55) {
            goto LABEL_113;
          }
        }
        v126[0] = &v128;
        sub_1CC5FA668(v55 + 16, v126);
        goto LABEL_113;
      }
LABEL_53:
      uint64_t v20 = *(void *)(v20 + 8);
      if (!v20) {
        goto LABEL_77;
      }
    }
  }
  uint64_t v57 = a2 + 72;
LABEL_138:
  if (v123 > 2) {
    goto LABEL_239;
  }
  if (v57 != v6)
  {
    while (1)
    {
      uint64_t v58 = v57 - 24;
      if (!v57) {
        uint64_t v58 = 0;
      }
      uint64_t v59 = v58 + 40;
      uint64_t v60 = *(void *)(v58 + 48);
      while (v60 != v59)
      {
        uint64_t v61 = v60;
        uint64_t v60 = *(void *)(v60 + 8);
        uint64_t v62 = v61 - 24;
        if (!v61) {
          uint64_t v62 = 0;
        }
        unsigned int v63 = *(unsigned __int8 *)(v62 + 16) - 59;
        if (v63 >= 0xFFFFFFEE) {
          uint64_t v64 = v62;
        }
        else {
          uint64_t v64 = 0;
        }
        if (v61 && v63 >= 0xFFFFFFEE && *(unsigned char *)(v64 + 16) == 46)
        {
          uint64_t v65 = *(void *)(v64 - 64);
          uint64_t v66 = *(void *)(v64 - 32);
          unint64_t v145 = 0;
          uint64_t v129 = &v145;
          int v67 = sub_1CC0488B8((void **)&v129, v66);
          if (v67) {
            uint64_t v68 = v66;
          }
          else {
            uint64_t v68 = v65;
          }
          if (v67) {
            uint64_t v69 = v65;
          }
          else {
            uint64_t v69 = v66;
          }
          if ((~*(unsigned __int8 *)(v64 + 17) & 0x1C) == 0
            || (uint64_t v70 = *(unsigned __int8 *)(v69 + 16), v70 == 17)
            && (*(_UNKNOWN **)(v69 + 32) == &unk_1CFB2E344
              ? (char v74 = *(unsigned char *)(*(void *)(v69 + 40) + 28))
              : (char v74 = *(unsigned char *)(v69 + 52)),
                uint64_t v70 = v74 & 7,
                v70 > 1))
          {
            uint64_t v129 = &v145;
            if (sub_1CC0488B8((void **)&v129, v68))
            {
              uint64_t v71 = v145;
              uint64_t v70 = *(unsigned int *)(*v145 + 8);
              if ((*(_DWORD *)(*v145 + 8) & 0xFE) == 0x12) {
                uint64_t v70 = *(unsigned int *)(**(void **)(*v145 + 16) + 8);
              }
              if (v70 == 269)
              {
                uint64_t v72 = v69;
                int v73 = 1;
                goto LABEL_180;
              }
            }
          }
          uint64_t v129 = (void *)0x3FF0000000000000;
          uint64_t v130 = (uint64_t)&v145;
          BOOL v75 = sub_1CC7D4424((uint64_t)&v129, v66, v70);
          if (v75) {
            uint64_t v4 = v66;
          }
          else {
            uint64_t v4 = v65;
          }
          if (v75) {
            uint64_t v66 = v65;
          }
          uint64_t v76 = *(unsigned __int8 *)(v64 + 17);
          if ((~v76 & 0x1C) == 0
            || *(unsigned char *)(v66 + 16) == 17
            && (*(_UNKNOWN **)(v66 + 32) == &unk_1CFB2E344
              ? (char v90 = *(unsigned char *)(*(void *)(v66 + 40) + 28))
              : (char v90 = *(unsigned char *)(v66 + 52)),
                uint64_t v76 = v90 & 7,
                v76 > 1))
          {
            uint64_t v129 = (void *)0x3FF0000000000000;
            uint64_t v130 = (uint64_t)&v145;
            if (sub_1CC7D4424((uint64_t)&v129, v4, v76))
            {
              uint64_t v71 = v145;
              int v77 = *(_DWORD *)(*v145 + 8);
              if ((v77 & 0xFE) == 0x12) {
                int v77 = *(_DWORD *)(**(void **)(*v145 + 16) + 8);
              }
              if (v77 == 269)
              {
                uint64_t v72 = v66;
                int v73 = 0;
LABEL_180:
                uint64_t v78 = sub_1CC7D4340((uint64_t)v71, v72, v73);
                uint64_t v79 = v78;
                if (v78)
                {
                  unsigned int v80 = *((unsigned __int8 *)v78 + 16);
                  uint64_t v81 = v80 <= 0x1B ? 0 : v78;
                  if (v78 != (llvm::Value *)v64)
                  {
                    uint64_t v82 = *(unsigned __int8 **)(v64 + 48);
                    if (v82) {
                      BOOL v83 = v80 >= 0x1C;
                    }
                    else {
                      BOOL v83 = 0;
                    }
                    if (!v83) {
                      goto LABEL_194;
                    }
                    v126[0] = *(void *)(v64 + 48);
                    llvm::MetadataTracking::track((uint64_t)v126, v82, 2);
                    unsigned int v84 = (unsigned __int8 **)((char *)v81 + 48);
                    if (v126 != v84)
                    {
                      uint64_t v85 = *v84;
                      if (!*v84) {
                        goto LABEL_192;
                      }
                      int v91 = *v85;
                      if ((v91 - 4) <= 0x1E)
                      {
                        if ((v85[1] & 0x7F) != 2 && !*((_DWORD *)v85 + 3)) {
                          goto LABEL_192;
                        }
                        uint64_t v92 = *((void *)v85 + 2);
                        if ((v92 & 4) == 0) {
                          goto LABEL_192;
                        }
                        unint64_t v93 = v92 & 0xFFFFFFFFFFFFFFF8;
                        if (!v93) {
                          goto LABEL_192;
                        }
                        goto LABEL_218;
                      }
                      if ((v91 - 3) >= 0xFFFFFFFE) {
                        uint64_t v96 = *v84;
                      }
                      else {
                        uint64_t v96 = 0;
                      }
                      if ((v91 - 3) >= 0xFFFFFFFE)
                      {
                        unint64_t v93 = (unint64_t)(v96 + 8);
LABEL_218:
                        uint64_t v129 = v84;
                        sub_1CC5FA668(v93 + 16, &v129);
                        goto LABEL_192;
                      }
                      if (v91 == 3) {
                        *((void *)v85 + 1) = 0;
                      }
LABEL_192:
                      uint64_t v86 = (unsigned __int8 *)v126[0];
                      *unsigned int v84 = (unsigned __int8 *)v126[0];
                      if (v86)
                      {
                        llvm::MetadataTracking::retrack((uint64_t)v126, v86, (uint64_t)v84);
                        v126[0] = 0;
                      }
LABEL_194:
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v64, v79, (llvm::Value *)1);
                      llvm::Value::takeName((int32x2_t ****)v79, (llvm::Value *)v64);
                      if (v80 >= 0x1C)
                      {
                        uint64_t v87 = *(void *)(v64 + 40);
                        *((void *)v79 + 5) = v87;
                        *(_WORD *)(v87 + 18) &= ~0x8000u;
                        if ((*((unsigned char *)v79 + 23) & 0x10) != 0)
                        {
                          uint64_t v94 = *(void *)(v87 + 56);
                          if (v94)
                          {
                            uint64_t v95 = *(llvm::ValueSymbolTable **)(v94 + 104);
                            if (v95) {
                              llvm::ValueSymbolTable::reinsertValue(v95, v79);
                            }
                          }
                        }
                        uint64_t v88 = *(void *)(v64 + 24);
                        *((void *)v79 + 3) = v88;
                        *((void *)v79 + 4) = v64 + 24;
                        uint64_t v89 = (char *)v79 + 24;
                        *(void *)(v88 + 8) = v89;
                        *(void *)(v64 + 24) = v89;
                      }
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                    }
                    if (!v126[0]) {
                      goto LABEL_194;
                    }
                    int v97 = *(unsigned __int8 *)v126[0];
                    if ((v97 - 4) > 0x1E)
                    {
                      if ((v97 - 3) >= 0xFFFFFFFE) {
                        uint64_t v100 = v126[0];
                      }
                      else {
                        uint64_t v100 = 0;
                      }
                      if ((v97 - 3) < 0xFFFFFFFE)
                      {
                        if (v97 == 3) {
                          *(void *)(v126[0] + 8) = 0;
                        }
                        goto LABEL_194;
                      }
                      unint64_t v99 = v100 + 8;
                    }
                    else
                    {
                      if ((*(unsigned char *)(v126[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v126[0] + 12)) {
                        goto LABEL_194;
                      }
                      uint64_t v98 = *(void *)(v126[0] + 16);
                      if ((v98 & 4) == 0) {
                        goto LABEL_194;
                      }
                      unint64_t v99 = v98 & 0xFFFFFFFFFFFFFFF8;
                      if (!v99) {
                        goto LABEL_194;
                      }
                    }
                    uint64_t v129 = v126;
                    sub_1CC5FA668(v99 + 16, &v129);
                    goto LABEL_194;
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v57 = *(void *)(v57 + 8);
      if (v57 == v124)
      {
        uint64_t v57 = *(void *)(a2 + 80);
        uint64_t v6 = a2 + 72;
        goto LABEL_239;
      }
    }
  }
  uint64_t v57 = v6;
LABEL_239:
  if (v57 != v6)
  {
    while (1)
    {
      uint64_t v101 = v57 - 24;
      if (!v57) {
        uint64_t v101 = 0;
      }
      uint64_t v129 = v131;
      uint64_t v130 = 0x500000000;
      uint64_t v102 = v101 + 40;
      uint64_t v103 = *(void *)(v101 + 48);
      if (v103 != v101 + 40) {
        break;
      }
LABEL_283:
      uint64_t v57 = *(void *)(v57 + 8);
      if (v57 == v6) {
        goto LABEL_284;
      }
    }
LABEL_243:
    if (v103) {
      uint64_t v104 = v103 - 24;
    }
    else {
      uint64_t v104 = 0;
    }
    if (*(unsigned char *)(v104 + 16) != 84) {
      goto LABEL_278;
    }
    uint64_t v105 = *(void *)(v104 - 32);
    if (!v105
      || *(unsigned char *)(v105 + 16)
      || *(void *)(v105 + 24) != *(void *)(v104 + 72)
      || (*(unsigned char *)(v105 + 33) & 0x20) == 0
      || *(_DWORD *)(*(void *)(v103 - 56) + 36) != 1275)
    {
      goto LABEL_278;
    }
    unint64_t v145 = &v147;
    HIDWORD(v146) = 2;
    unsigned int v106 = 1;
    uint64_t v147 = v103 - 24;
    while (1)
    {
      uint64_t v107 = v145[v106 - 1];
      unsigned int v108 = v106 - 1;
      LODWORD(v146) = v106 - 1;
      for (uint64_t i = *(void *)(v107 + 8); i; uint64_t i = *(void *)(i + 8))
      {
        if (v108 >= HIDWORD(v146)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v145[v108] = *(void *)(i + 24);
        unsigned int v108 = v146 + 1;
        LODWORD(v146) = v146 + 1;
      }
      int v110 = *(_DWORD *)(v107 + 20);
      if ((v110 & 0x40000000) != 0)
      {
        uint64_t v112 = *(void *)(v107 - 8);
        uint64_t v111 = v110 & 0x7FFFFFF;
        if (v111)
        {
LABEL_262:
          uint64_t v113 = 32 * v111;
          uint64_t v114 = (void **)(v112 + 8);
          do
          {
            uint64_t v115 = (llvm::UndefValue **)(v114 - 1);
            uint64_t v116 = llvm::UndefValue::get((llvm::UndefValue *)**(v114 - 1), (llvm::Type *)v4);
            if (*(v114 - 1))
            {
              *v114[1] = *v114;
              if (*v114) {
                (*v114)[2] = v114[1];
              }
            }
            void *v115 = v116;
            if (v116)
            {
              uint64_t v119 = (void *)*((void *)v116 + 1);
              unsigned int v117 = (llvm::UndefValue ***)((char *)v116 + 8);
              uint64_t v118 = v119;
              void *v114 = v119;
              if (v119) {
                v118[2] = v114;
              }
              v114[1] = v117;
              *unsigned int v117 = v115;
            }
            v114 += 4;
            v113 -= 32;
          }
          while (v113);
        }
      }
      else
      {
        uint64_t v111 = v110 & 0x7FFFFFF;
        uint64_t v112 = v107 - 32 * v111;
        if (v111) {
          goto LABEL_262;
        }
      }
      if (v130 >= (unint64_t)HIDWORD(v130)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v129 + v130) = v107;
      LODWORD(v130) = v130 + 1;
      unsigned int v106 = v146;
      if (!v146)
      {
        if (v145 != &v147) {
          free(v145);
        }
        uint64_t v6 = a2 + 72;
LABEL_278:
        uint64_t v103 = *(void *)(v103 + 8);
        if (v103 == v102)
        {
          if (v130) {
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          if (v129 != v131) {
            free(v129);
          }
          goto LABEL_283;
        }
        goto LABEL_243;
      }
    }
  }
LABEL_284:
  char v120 = 0;
  if (v123 <= 2) {
    char v120 = sub_1CD1063EC(v122);
  }
  return v120 & 1;
}

llvm::Value *sub_1CC7D4340(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a2 + 16) == 17
    && (*(_UNKNOWN **)(a2 + 32) == &unk_1CFB2E344
      ? (char v6 = *(unsigned char *)(*(void *)(a2 + 40) + 28))
      : (char v6 = *(unsigned char *)(a2 + 52)),
        (v6 & 7) == 3))
  {
    uint64_t v7 = *(llvm::ConstantFP ***)a2;
    double v8 = -0.0;
    if ((v6 & 8) == 0) {
      double v8 = 0.0;
    }
    return llvm::ConstantFP::get(v7, (llvm::Type *)a2, v8);
  }
  else
  {
    uint64_t v10 = llvm::ConstantFP::get(*(llvm::ConstantFP ***)a2, (llvm::Type *)a2, 0.0);
    if (a3) {
      unint64_t v11 = (uint64_t *)a2;
    }
    else {
      unint64_t v11 = (uint64_t *)v10;
    }
    if (a3) {
      uint64_t v12 = (uint64_t)v10;
    }
    else {
      uint64_t v12 = a2;
    }
    __int16 v14 = 257;
    return sub_1CC199EFC(a1, v11, v12, &v13, 0, 0);
  }
}

BOOL sub_1CC7D4424@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 != 44)
  {
    if (v5 == 5)
    {
      if (*(_WORD *)(a2 + 18) == 16
        && sub_1CD6404D8((double *)a1, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))))
      {
        LOBYTE(a3) = 0;
        uint64_t v11 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
        unsigned int v12 = *(unsigned __int8 *)(v11 + 16);
        unsigned int v13 = v12 - 28;
        BOOL v15 = v12 < 0x1C && v12 != 5;
        if (!v11 || v15) {
          return (v5 == 5) & a3;
        }
        if (v12 <= 0x1B) {
          unsigned int v13 = *(unsigned __int16 *)(v11 + 18);
        }
        if (v13 == 43)
        {
          int v16 = *(_DWORD *)(v11 + 20);
          if ((v16 & 0x40000000) != 0) {
            char v17 = *(uint64_t **)(v11 - 8);
          }
          else {
            char v17 = (uint64_t *)(v11 - 32 * (v16 & 0x7FFFFFF));
          }
          a3 = *v17;
          if (a3)
          {
            **(void **)(a1 + 8) = a3;
            LOBYTE(a3) = 1;
          }
          return (v5 == 5) & a3;
        }
      }
      LOBYTE(a3) = 0;
    }
    return (v5 == 5) & a3;
  }
  SplatValue = *(unsigned __int8 **)(a2 - 64);
  unsigned int v7 = SplatValue[16];
  if (SplatValue) {
    BOOL v8 = v7 == 17;
  }
  else {
    BOOL v8 = 0;
  }
  BOOL result = (v8
         || (v7 <= 0x14 ? (BOOL v9 = (*(_DWORD *)(*(void *)SplatValue + 8) & 0xFE) == 18) : (BOOL v9 = 0),
             v9
          && (SplatValue = (unsigned __int8 *)llvm::Constant::getSplatValue((llvm::Constant *)SplatValue, 0)) != 0
          && SplatValue[16] == 17))
        && sub_1CB844168((uint64_t)SplatValue, *(double *)a1)
        && (sub_1CC0488B8((void **)(a1 + 8), *(void *)(a2 - 32)) & 1) != 0;
  return result;
}

void sub_1CC7D457C(uint64_t a1)
{
}

uint64_t sub_1CC7D461C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDBAD0;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F261EDD0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDBAD8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC7D457C;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCDBAD8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC7D46CC()
{
}

void sub_1CC7D470C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC7D4744(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

uint64_t sub_1CC7D4794(uint64_t a1, uint64_t a2)
{
  uint64_t v472 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 239) < 0) {
    sub_1CB8BDF7C((uint64_t)&v445, *(const void **)(a2 + 216), *(void *)(a2 + 224));
  }
  else {
    std::string v445 = *(std::string *)(a2 + 216);
  }
  if (!std::string::compare(&v445, 0, 4uLL, "agx1"))
  {
    unsigned int v4 = 27;
  }
  else if (!std::string::compare(&v445, 0, 4uLL, "agx2"))
  {
    unsigned int v4 = 28;
  }
  else if (!std::string::compare(&v445, 0, 4uLL, "agx3"))
  {
    unsigned int v4 = 29;
  }
  else
  {
    unsigned int v4 = 0;
  }
  if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v445.__r_.__value_.__l.__data_);
  }
  if (v4 <= 0x1B)
  {
    uint64_t v426 = "Target triple must be set to agx2/agx3";
    goto LABEL_906;
  }
  for (uint64_t i = *(void *)(a2 + 32); i != a2 + 24; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      uint64_t v6 = i - 56;
    }
    else {
      uint64_t v6 = 0;
    }
    sub_1CD108A9C(v6);
  }
  unsigned int v7 = *(uint64_t **)(a1 + 8);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (v8 == v9)
  {
LABEL_22:
    uint64_t v10 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v8 != &llvm::FunctionGroupInfoWrapperPass::ID)
    {
      v8 += 16;
      if (v8 == v9) {
        goto LABEL_22;
      }
    }
    uint64_t v10 = *(void *)(v8 + 8);
  }
  uint64_t v11 = *(_DWORD ***)((*(uint64_t (**)(uint64_t, void *))(*(void *)v10 + 96))(v10, &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  (*((void (**)(_DWORD **, uint64_t))*v11 + 2))(v11, a2);
  unsigned int v431 = v4;
  int v12 = *(_DWORD *)((*((uint64_t (**)(_DWORD **))*v11 + 8))(v11) + 12);
  unsigned int v427 = v11;
  unint64_t v438 = *(unsigned int *)((*((uint64_t (**)(void))*v11 + 8))() + 4);
  v462[0] = 1;
  for (uint64_t j = 1; j != 49; j += 12)
    v462[j] = -4096;
  if ((v12 - 1) >= 0x105FF) {
    int v14 = 67072;
  }
  else {
    int v14 = v12;
  }
  unsigned int v430 = v14;
  v440[0] = 0;
  v440[1] = 0;
  int v441 = 0;
  int v443 = 0;
  uint64_t v444 = 0;
  long long __p = 0;
  sub_1CD0FEC94((llvm::Module *)a2, (uint64_t)v440);
  sub_1CD0FEFC4((llvm::Module *)a2, (uint64_t)v440, 0);
  __int16 v463 = v465;
  uint64_t v464 = 0x1000000000;
  std::string v451 = v455;
  v452 = v455;
  uint64_t v453 = 8;
  int v454 = 0;
  uint64_t v15 = *(void *)(a2 + 16);
  uint64_t v433 = a2 + 8;
  if (v15 != a2 + 8)
  {
    while (1)
    {
      if (v15) {
        int v16 = (uint64_t ***)(v15 - 56);
      }
      else {
        int v16 = 0;
      }
      if (v464 >= (unint64_t)HIDWORD(v464)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v463 + v464) = v16;
      LODWORD(v464) = v464 + 1;
      unsigned int v17 = v16 >> 4;
      if ((*((unsigned char *)v16 + 23) & 0x10) == 0) {
        goto LABEL_83;
      }
      uint64_t v18 = ***v16;
      uint64_t v19 = *(void *)(v18 + 152);
      uint64_t v20 = *(unsigned int *)(v18 + 168);
      if (!v20) {
        goto LABEL_41;
      }
      LODWORD(v21) = (v20 - 1) & (v17 ^ (v16 >> 9));
      uint64_t v22 = (uint64_t ****)(v19 + 16 * v21);
      unsigned int v23 = *v22;
      if (*v22 != v16) {
        break;
      }
LABEL_42:
      unsigned int v26 = v22[1];
      if ((unint64_t)*v26 < 0x11) {
        goto LABEL_83;
      }
      int v27 = v26[2];
      unsigned int v28 = v26[3];
      int v29 = *((unsigned __int8 *)v26 + 32);
      BOOL v30 = v27 == (uint64_t **)0x706D61732E636761 && v28 == (uint64_t **)0x706165685F72656CLL;
      if (!v30 || v29 != 46) {
        goto LABEL_83;
      }
      int v32 = v452;
      uint64_t v33 = HIDWORD(v453);
      if (v452 != v451)
      {
        unsigned int v37 = v453;
        goto LABEL_62;
      }
      if (!HIDWORD(v453))
      {
LABEL_59:
        unsigned int v37 = v453;
        if (HIDWORD(v453) < v453)
        {
          ++HIDWORD(v453);
          *(void *)&v452[8 * v33] = v16;
          goto LABEL_83;
        }
LABEL_62:
        if (3 * v37 <= 4 * (HIDWORD(v453) - v454))
        {
          if (v37 >= 0x40) {
            v37 *= 2;
          }
          else {
            unsigned int v37 = 128;
          }
        }
        else if (v37 - HIDWORD(v453) >= v37 >> 3)
        {
          goto LABEL_64;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v451, v37);
        unsigned int v37 = v453;
        int v32 = v452;
LABEL_64:
        unsigned int v38 = v37 - 1;
        unsigned int v39 = (v37 - 1) & (v17 ^ (v16 >> 9));
        int v40 = &v32[8 * v39];
        unsigned int v41 = *(uint64_t ****)v40;
        if (*(void *)v40 == -1)
        {
          uint64_t v42 = 0;
LABEL_76:
          if (v42) {
            unsigned int v46 = v42;
          }
          else {
            unsigned int v46 = v40;
          }
          if (*(uint64_t ****)v46 != v16)
          {
            if (*(void *)v46 == -2) {
              --v454;
            }
            else {
              ++HIDWORD(v453);
            }
            *(void *)unsigned int v46 = v16;
          }
        }
        else
        {
          uint64_t v42 = 0;
          int v43 = 1;
          while (v41 != v16)
          {
            if (v42) {
              BOOL v44 = 0;
            }
            else {
              BOOL v44 = v41 == (uint64_t ***)-2;
            }
            if (v44) {
              uint64_t v42 = v40;
            }
            unsigned int v45 = v39 + v43++;
            unsigned int v39 = v45 & v38;
            int v40 = &v32[8 * (v45 & v38)];
            unsigned int v41 = *(uint64_t ****)v40;
            if (*(void *)v40 == -1) {
              goto LABEL_76;
            }
          }
        }
        goto LABEL_83;
      }
      unsigned int v34 = 0;
      uint64_t v35 = 8 * HIDWORD(v453);
      uint64_t v36 = (uint64_t ****)v452;
      while (*v36 != v16)
      {
        if (*v36 == (uint64_t ***)-2) {
          unsigned int v34 = v36;
        }
        ++v36;
        v35 -= 8;
        if (!v35)
        {
          if (!v34) {
            goto LABEL_59;
          }
          *unsigned int v34 = v16;
          --v454;
          break;
        }
      }
LABEL_83:
      if (v16 != (uint64_t ***)sub_1CD112198(a2)) {
        goto LABEL_116;
      }
      int v47 = v452;
      uint64_t v48 = HIDWORD(v453);
      if (v452 != v451)
      {
        unsigned int v52 = v453;
        goto LABEL_95;
      }
      if (!HIDWORD(v453))
      {
LABEL_92:
        unsigned int v52 = v453;
        if (HIDWORD(v453) < v453)
        {
          ++HIDWORD(v453);
          *(void *)&v452[8 * v48] = v16;
          goto LABEL_116;
        }
LABEL_95:
        if (3 * v52 <= 4 * (HIDWORD(v453) - v454))
        {
          if (v52 >= 0x40) {
            v52 *= 2;
          }
          else {
            unsigned int v52 = 128;
          }
        }
        else if (v52 - HIDWORD(v453) >= v52 >> 3)
        {
          goto LABEL_97;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v451, v52);
        unsigned int v52 = v453;
        int v47 = v452;
LABEL_97:
        unsigned int v53 = v52 - 1;
        unsigned int v54 = (v52 - 1) & (v17 ^ (v16 >> 9));
        unint64_t v55 = &v47[8 * v54];
        int v56 = *(uint64_t ****)v55;
        if (*(void *)v55 == -1)
        {
          uint64_t v57 = 0;
LABEL_109:
          if (v57) {
            uint64_t v61 = v57;
          }
          else {
            uint64_t v61 = v55;
          }
          if (*(uint64_t ****)v61 != v16)
          {
            if (*(void *)v61 == -2) {
              --v454;
            }
            else {
              ++HIDWORD(v453);
            }
            *(void *)uint64_t v61 = v16;
          }
        }
        else
        {
          uint64_t v57 = 0;
          int v58 = 1;
          while (v56 != v16)
          {
            if (v57) {
              BOOL v59 = 0;
            }
            else {
              BOOL v59 = v56 == (uint64_t ***)-2;
            }
            if (v59) {
              uint64_t v57 = v55;
            }
            unsigned int v60 = v54 + v58++;
            unsigned int v54 = v60 & v53;
            unint64_t v55 = &v47[8 * (v60 & v53)];
            int v56 = *(uint64_t ****)v55;
            if (*(void *)v55 == -1) {
              goto LABEL_109;
            }
          }
        }
        goto LABEL_116;
      }
      uint64_t v49 = 0;
      uint64_t v50 = 8 * HIDWORD(v453);
      uint64_t v51 = (uint64_t ****)v452;
      while (*v51 != v16)
      {
        if (*v51 == (uint64_t ***)-2) {
          uint64_t v49 = v51;
        }
        ++v51;
        v50 -= 8;
        if (!v50)
        {
          if (!v49) {
            goto LABEL_92;
          }
          int32x2_t *v49 = v16;
          --v454;
          break;
        }
      }
LABEL_116:
      if (v16 == (uint64_t ***)sub_1CD1124FC(a2))
      {
        uint64_t v62 = v452;
        uint64_t v63 = HIDWORD(v453);
        if (v452 != v451)
        {
          unsigned int v67 = v453;
LABEL_128:
          if (3 * v67 <= 4 * (HIDWORD(v453) - v454))
          {
            if (v67 >= 0x40) {
              v67 *= 2;
            }
            else {
              unsigned int v67 = 128;
            }
          }
          else if (v67 - HIDWORD(v453) >= v67 >> 3)
          {
            goto LABEL_130;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v451, v67);
          unsigned int v67 = v453;
          uint64_t v62 = v452;
LABEL_130:
          unsigned int v68 = v67 - 1;
          unsigned int v69 = (v67 - 1) & (v17 ^ (v16 >> 9));
          uint64_t v70 = &v62[8 * v69];
          uint64_t v71 = *(uint64_t ****)v70;
          if (*(void *)v70 == -1)
          {
            uint64_t v72 = 0;
LABEL_142:
            if (v72) {
              uint64_t v76 = v72;
            }
            else {
              uint64_t v76 = v70;
            }
            if (*(uint64_t ****)v76 != v16)
            {
              if (*(void *)v76 == -2) {
                --v454;
              }
              else {
                ++HIDWORD(v453);
              }
              *(void *)uint64_t v76 = v16;
            }
          }
          else
          {
            uint64_t v72 = 0;
            int v73 = 1;
            while (v71 != v16)
            {
              if (v72) {
                BOOL v74 = 0;
              }
              else {
                BOOL v74 = v71 == (uint64_t ***)-2;
              }
              if (v74) {
                uint64_t v72 = v70;
              }
              unsigned int v75 = v69 + v73++;
              unsigned int v69 = v75 & v68;
              uint64_t v70 = &v62[8 * (v75 & v68)];
              uint64_t v71 = *(uint64_t ****)v70;
              if (*(void *)v70 == -1) {
                goto LABEL_142;
              }
            }
          }
          goto LABEL_149;
        }
        if (HIDWORD(v453))
        {
          uint64_t v64 = 0;
          uint64_t v65 = 8 * HIDWORD(v453);
          uint64_t v66 = (uint64_t ****)v452;
          while (*v66 != v16)
          {
            if (*v66 == (uint64_t ***)-2) {
              uint64_t v64 = v66;
            }
            ++v66;
            v65 -= 8;
            if (!v65)
            {
              if (!v64) {
                goto LABEL_125;
              }
              void *v64 = v16;
              --v454;
              goto LABEL_149;
            }
          }
          goto LABEL_149;
        }
LABEL_125:
        unsigned int v67 = v453;
        if (HIDWORD(v453) >= v453) {
          goto LABEL_128;
        }
        ++HIDWORD(v453);
        *(void *)&v452[8 * v63] = v16;
      }
LABEL_149:
      uint64_t v15 = *(void *)(v15 + 8);
      if (v15 == v433) {
        goto LABEL_170;
      }
    }
    int v24 = 1;
    while (v23 != (uint64_t ***)-4096)
    {
      int v25 = v21 + v24++;
      uint64_t v21 = v25 & (v20 - 1);
      unsigned int v23 = *(uint64_t ****)(v19 + 16 * v21);
      if (v23 == v16)
      {
        uint64_t v22 = (uint64_t ****)(v19 + 16 * v21);
        goto LABEL_42;
      }
    }
LABEL_41:
    uint64_t v22 = (uint64_t ****)(v19 + 16 * v20);
    goto LABEL_42;
  }
LABEL_170:
  BOOL v468 = "agx.dylib_bindings";
  __int16 v471 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata((llvm::Module *)a2, (const char **)&v468);
  if (NamedMetadata)
  {
    uint64_t v78 = NamedMetadata;
    uint64_t v79 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
    if (v79)
    {
      uint64_t v80 = 0;
      while (1)
      {
        uint64_t v81 = *(void *)(**(void **)(v78 + 48) + 8 * v80);
        uint64_t v82 = *(void *)(v81 - 8 * *(unsigned int *)(v81 + 8));
        if (*(unsigned char *)v82 == 1)
        {
          uint64_t v83 = *(void *)(v82 + 128);
          uint64_t v84 = *(unsigned char *)(v83 + 16) == 3 ? v83 : 0;
        }
        else
        {
          uint64_t v84 = 0;
        }
        uint64_t v85 = v452;
        uint64_t v86 = HIDWORD(v453);
        if (v452 != v451) {
          break;
        }
        if (HIDWORD(v453))
        {
          uint64_t v87 = 0;
          uint64_t v88 = 8 * HIDWORD(v453);
          uint64_t v89 = (uint64_t *)v452;
          while (*v89 != v84)
          {
            if (*v89 == -2) {
              uint64_t v87 = v89;
            }
            ++v89;
            v88 -= 8;
            if (!v88)
            {
              if (!v87) {
                goto LABEL_186;
              }
              uint64_t *v87 = v84;
              --v454;
              goto LABEL_210;
            }
          }
          goto LABEL_210;
        }
LABEL_186:
        unsigned int v90 = v453;
        if (HIDWORD(v453) >= v453) {
          goto LABEL_189;
        }
        ++HIDWORD(v453);
        *(void *)&v452[8 * v86] = v84;
LABEL_210:
        if (++v80 == v79) {
          goto LABEL_218;
        }
      }
      unsigned int v90 = v453;
LABEL_189:
      if (3 * v90 <= 4 * (HIDWORD(v453) - v454))
      {
        if (v90 >= 0x40) {
          v90 *= 2;
        }
        else {
          unsigned int v90 = 128;
        }
      }
      else if (v90 - HIDWORD(v453) >= v90 >> 3)
      {
        goto LABEL_191;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v451, v90);
      unsigned int v90 = v453;
      uint64_t v85 = v452;
LABEL_191:
      unsigned int v91 = v90 - 1;
      unsigned int v92 = (v90 - 1) & ((v84 >> 4) ^ (v84 >> 9));
      unint64_t v93 = &v85[8 * v92];
      uint64_t v94 = *(void *)v93;
      if (*(void *)v93 == -1)
      {
        uint64_t v95 = 0;
LABEL_203:
        if (v95) {
          unint64_t v99 = v95;
        }
        else {
          unint64_t v99 = v93;
        }
        if (*(void *)v99 != v84)
        {
          if (*(void *)v99 == -2) {
            --v454;
          }
          else {
            ++HIDWORD(v453);
          }
          *(void *)unint64_t v99 = v84;
        }
      }
      else
      {
        uint64_t v95 = 0;
        int v96 = 1;
        while (v94 != v84)
        {
          if (v95) {
            BOOL v97 = 0;
          }
          else {
            BOOL v97 = v94 == -2;
          }
          if (v97) {
            uint64_t v95 = v93;
          }
          unsigned int v98 = v92 + v96++;
          unsigned int v92 = v98 & v91;
          unint64_t v93 = &v85[8 * (v98 & v91)];
          uint64_t v94 = *(void *)v93;
          if (*(void *)v93 == -1) {
            goto LABEL_203;
          }
        }
      }
      goto LABEL_210;
    }
  }
LABEL_218:
  if (v464)
  {
    uint64_t v100 = (int8x16_t *)v463;
    uint64_t v101 = (char *)v463 + 8 * v464;
    uint64_t v102 = 8 * v464;
    while ((sub_1CC7D7FB4(*(void *)(v100->i64[0] + 8)) & 1) != 0)
    {
      uint64_t v100 = (int8x16_t *)((char *)v100 + 8);
      v102 -= 8;
      if (!v102) {
        goto LABEL_237;
      }
    }
    while (1)
    {
      v102 -= 8;
      if (!v102) {
        break;
      }
      uint64_t v103 = (uint64_t *)(v101 - 8);
      int v104 = sub_1CC7D7FB4(*(void *)(*((void *)v101 - 1) + 8));
      v101 -= 8;
      if (v104)
      {
        if (v102 < 17)
        {
LABEL_233:
          uint64_t v109 = 0;
          unint64_t v105 = 0;
        }
        else
        {
          if ((v102 >> 3) + 1 >= 0xFFFFFFFFFFFFFFFLL) {
            unint64_t v105 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v105 = (v102 >> 3) + 1;
          }
          unsigned int v106 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
          while (1)
          {
            uint64_t v107 = (uint64_t *)operator new(8 * v105, v106);
            if (v107) {
              break;
            }
            BOOL v108 = v105 > 1;
            v105 >>= 1;
            if (!v108) {
              goto LABEL_233;
            }
          }
          uint64_t v109 = v107;
        }
        sub_1CC7D81E8(v100, v103, (v102 >> 3) + 1, v109, v105);
        if (v109) {
          operator delete(v109);
        }
        break;
      }
    }
  }
LABEL_237:
  BOOL v468 = "agx.interpolations";
  __int16 v471 = 259;
  uint64_t v110 = llvm::Module::getNamedMetadata((llvm::Module *)a2, (const char **)&v468);
  uint64_t v111 = (uint64_t)v427;
  unint64_t v112 = v438;
  if (v110)
  {
    uint64_t v113 = *(uint64_t **)(v110 + 48);
    uint64_t v114 = *((unsigned int *)v113 + 2);
    if (v114)
    {
      uint64_t v115 = *v113;
      while (1)
      {
        uint64_t v116 = (uint64_t *)(*(void *)v115 - 8 * *(unsigned int *)(*(void *)v115 + 8));
        uint64_t v117 = *v116;
        if (*v116)
        {
          uint64_t v118 = v116[1];
          if (*(unsigned char *)v118 == 4) {
            uint64_t v118 = *(void *)(v118 - 8 * *(unsigned int *)(v118 + 8));
          }
          uint64_t v119 = *(void *)(v118 + 128);
          char v120 = (void *)(v119 + 24);
          if (*(_DWORD *)(v119 + 32) >= 0x41u) {
            char v120 = (void *)*v120;
          }
          if (*v120 == 11) {
            break;
          }
        }
        v115 += 8;
        if (!--v114) {
          goto LABEL_283;
        }
      }
      if (*(unsigned char *)(*(void *)(v117 + 128) + 16) == 3) {
        uint64_t v121 = *(void *)(v117 + 128);
      }
      else {
        uint64_t v121 = 0;
      }
      uint64_t v122 = v452;
      uint64_t v123 = HIDWORD(v453);
      if (v452 == v451)
      {
        if (HIDWORD(v453))
        {
          uint64_t v124 = 0;
          uint64_t v125 = 8 * HIDWORD(v453);
          unsigned int v126 = v452;
          while (*v126 != v121)
          {
            if (*v126 == -2) {
              uint64_t v124 = v126;
            }
            ++v126;
            v125 -= 8;
            if (!v125)
            {
              if (!v124) {
                goto LABEL_259;
              }
              *uint64_t v124 = v121;
              --v454;
              goto LABEL_283;
            }
          }
          goto LABEL_283;
        }
LABEL_259:
        unsigned int v127 = v453;
        if (HIDWORD(v453) < v453)
        {
          ++HIDWORD(v453);
          *(void *)&v452[8 * v123] = v121;
          goto LABEL_283;
        }
      }
      else
      {
        unsigned int v127 = v453;
      }
      if (3 * v127 <= 4 * (HIDWORD(v453) - v454))
      {
        if (v127 >= 0x40) {
          v127 *= 2;
        }
        else {
          unsigned int v127 = 128;
        }
      }
      else if (v127 - HIDWORD(v453) >= v127 >> 3)
      {
        goto LABEL_264;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v451, v127);
      unsigned int v127 = v453;
      uint64_t v122 = v452;
LABEL_264:
      unsigned int v128 = v127 - 1;
      unsigned int v129 = (v127 - 1) & ((v121 >> 4) ^ (v121 >> 9));
      uint64_t v130 = &v122[8 * v129];
      uint64_t v131 = *(void *)v130;
      if (*(void *)v130 == -1)
      {
        BOOL v132 = 0;
LABEL_276:
        if (v132) {
          uint64_t v136 = v132;
        }
        else {
          uint64_t v136 = v130;
        }
        if (*(void *)v136 != v121)
        {
          if (*(void *)v136 == -2) {
            --v454;
          }
          else {
            ++HIDWORD(v453);
          }
          *(void *)uint64_t v136 = v121;
        }
      }
      else
      {
        BOOL v132 = 0;
        int v133 = 1;
        while (v131 != v121)
        {
          if (v132) {
            BOOL v134 = 0;
          }
          else {
            BOOL v134 = v131 == -2;
          }
          if (v134) {
            BOOL v132 = v130;
          }
          unsigned int v135 = v129 + v133++;
          unsigned int v129 = v135 & v128;
          uint64_t v130 = &v122[8 * (v135 & v128)];
          uint64_t v131 = *(void *)v130;
          if (*(void *)v130 == -1) {
            goto LABEL_276;
          }
        }
      }
    }
  }
LABEL_283:
  long long v439 = (llvm::Module *)a2;
  if (!v464) {
    goto LABEL_582;
  }
  uint64_t v137 = (char *)v463;
  v436 = (char *)v463 + 8 * v464;
  do
  {
    int v138 = *(uint64_t ****)v137;
    int v446 = &v450;
    v447 = &v450;
    uint64_t v448 = 1;
    int v449 = 0;
    __int16 v139 = v451;
    if (v452 == v451)
    {
      int v140 = HIDWORD(v453);
      uint64_t v141 = &v452[8 * HIDWORD(v453)];
      if (HIDWORD(v453))
      {
        uint64_t v142 = 0;
        while (*(uint64_t ****)&v452[v142] != v138)
        {
          v142 += 8;
          if (8 * HIDWORD(v453) == v142) {
            goto LABEL_304;
          }
        }
        uint64_t v141 = &v452[v142];
      }
LABEL_304:
      __int16 v139 = v452;
    }
    else
    {
      int v143 = v453 - 1;
      unsigned int v144 = (v453 - 1) & ((v138 >> 4) ^ (v138 >> 9));
      uint64_t v141 = &v452[8 * v144];
      unint64_t v145 = *(uint64_t ****)v141;
      if (*(void *)v141 == -1)
      {
        uint64_t v146 = 0;
LABEL_577:
        if (v146) {
          uint64_t v141 = v146;
        }
        int v140 = HIDWORD(v453);
        if (*(uint64_t ****)v141 != v138) {
          uint64_t v141 = &v452[8 * v453];
        }
      }
      else
      {
        uint64_t v146 = 0;
        int v147 = 1;
        while (v145 != v138)
        {
          if (v146) {
            BOOL v148 = 0;
          }
          else {
            BOOL v148 = v145 == (uint64_t ***)-2;
          }
          if (v148) {
            uint64_t v146 = v141;
          }
          unsigned int v149 = v144 + v147++;
          unsigned int v144 = v149 & v143;
          uint64_t v141 = &v452[8 * (v149 & v143)];
          unint64_t v145 = *(uint64_t ****)v141;
          if (*(void *)v141 == -1) {
            goto LABEL_577;
          }
        }
        int v140 = HIDWORD(v453);
      }
    }
    if (v452 == v139) {
      int v150 = v140;
    }
    else {
      int v150 = v453;
    }
    if (v141 != &v452[8 * v150])
    {
      uint64_t v151 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v111 + 48))(v111);
      uint64_t v152 = (*(uint64_t (**)(uint64_t))(*(void *)v111 + 56))(v111);
      if (v151 == (uint64_t *)v152) {
        goto LABEL_382;
      }
      uint64_t v153 = (uint64_t *)v152;
      int v154 = v447;
      while (1)
      {
        uint64_t v155 = *v151;
        uint64_t v156 = HIDWORD(v448);
        if (v154 != v446) {
          break;
        }
        if (HIDWORD(v448))
        {
          int v157 = 0;
          uint64_t v158 = 8 * HIDWORD(v448);
          int v159 = v154;
          while (*v159 != v155)
          {
            if (*v159 == -2) {
              int v157 = v159;
            }
            ++v159;
            v158 -= 8;
            if (!v158)
            {
              if (!v157) {
                goto LABEL_319;
              }
              *int v157 = v155;
              --v449;
              goto LABEL_343;
            }
          }
          goto LABEL_343;
        }
LABEL_319:
        unsigned int v160 = v448;
        if (HIDWORD(v448) >= v448) {
          goto LABEL_322;
        }
        ++HIDWORD(v448);
        v154[v156] = v155;
LABEL_343:
        int v154 = v447;
        if (++v151 == v153) {
          goto LABEL_382;
        }
      }
      unsigned int v160 = v448;
LABEL_322:
      if (3 * v160 <= 4 * (HIDWORD(v448) - v449))
      {
        if (v160 >= 0x40) {
          v160 *= 2;
        }
        else {
          unsigned int v160 = 128;
        }
      }
      else if (v160 - HIDWORD(v448) >= v160 >> 3)
      {
        goto LABEL_324;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v446, v160);
      unsigned int v160 = v448;
      int v154 = v447;
LABEL_324:
      unsigned int v161 = v160 - 1;
      unsigned int v162 = (v160 - 1) & ((v155 >> 4) ^ (v155 >> 9));
      uint64_t v163 = &v154[v162];
      uint64_t v164 = *v163;
      if (*v163 == -1)
      {
        int v165 = 0;
LABEL_336:
        if (v165) {
          int v169 = v165;
        }
        else {
          int v169 = v163;
        }
        if (*v169 != v155)
        {
          if (*v169 == -2) {
            --v449;
          }
          else {
            ++HIDWORD(v448);
          }
          *int v169 = v155;
        }
      }
      else
      {
        int v165 = 0;
        int v166 = 1;
        while (v164 != v155)
        {
          if (v165) {
            BOOL v167 = 0;
          }
          else {
            BOOL v167 = v164 == -2;
          }
          if (v167) {
            int v165 = v163;
          }
          unsigned int v168 = v162 + v166++;
          unsigned int v162 = v168 & v161;
          uint64_t v163 = &v154[v168 & v161];
          uint64_t v164 = *v163;
          if (*v163 == -1) {
            goto LABEL_336;
          }
        }
      }
      goto LABEL_343;
    }
    uint64_t v170 = (void (**)(uint64_t *))&unk_1F261EE70;
    v466[0] = (uint64_t)&unk_1F261EE70;
    v466[1] = (uint64_t)&v446;
    v466[2] = v111;
    int v467 = v466;
    uint64_t v171 = v138[1];
    if (!v171) {
      goto LABEL_381;
    }
    do
    {
      uint64_t v172 = v171[3];
      BOOL v468 = v470;
      HIDWORD(v469) = 16;
      v470[0] = v172;
      unsigned int v173 = 1;
      do
      {
        uint64_t v174 = *((void *)v468 + --v173);
        LODWORD(v469) = v173;
        unsigned int v175 = *(unsigned __int8 *)(v174 + 16);
        if (v175 > 0xA || ((1 << v175) & 0x728) == 0)
        {
          if (v175 < 0x1C) {
            continue;
          }
          uint64_t v180 = (*(uint64_t (**)(uint64_t, void))(*(void *)v111 + 24))(v111, *(void *)(*(void *)(v174 + 40) + 56));
          if (!v467)
          {
            sub_1CB920400();
LABEL_895:
            uint64_t v426 = "Expect a global variable with an initializer or an external global variable declaration.";
LABEL_906:
            llvm::report_fatal_error((llvm *)v426, (const llvm::Twine *)1);
          }
          (*(void (**)(uint64_t *, uint64_t))(*v467 + 48))(v467, v180);
          unsigned int v173 = v469;
        }
        else
        {
          for (uint64_t k = *(void *)(v174 + 8); k; uint64_t k = *(void *)(k + 8))
          {
            uint64_t v178 = *(void *)(k + 24);
            if (*(unsigned char *)(v178 + 16) == 84)
            {
              uint64_t v179 = *(void *)(v178 - 32);
              if (v179)
              {
                if (!*(unsigned char *)(v179 + 16)
                  && *(void *)(v179 + 24) == *(void *)(v178 + 72)
                  && (*(unsigned char *)(v179 + 33) & 0x20) != 0
                  && sub_1CB859A14(*(_DWORD *)(v179 + 36))
                  && !*(void *)(v178 + 8))
                {
                  continue;
                }
              }
            }
            if (v173 >= HIDWORD(v469)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v468 + v173) = v178;
            unsigned int v173 = v469 + 1;
            LODWORD(v469) = v469 + 1;
          }
        }
      }
      while (v173);
      if (v468 != v470) {
        free(v468);
      }
      uint64_t v171 = (uint64_t **)v171[1];
    }
    while (v171);
    if (v467 == v466)
    {
      uint64_t v170 = (void (**)(uint64_t *))v466[0];
LABEL_381:
      v170[4](v466);
      goto LABEL_382;
    }
    if (v467) {
      (*(void (**)(void))(*v467 + 40))();
    }
LABEL_382:
    uint64_t v182 = v446;
    int v181 = v447;
    long long v183 = (uint64_t *)((char *)&v448 + 4);
    if (v447 != v446) {
      long long v183 = &v448;
    }
    uint64_t v184 = *(unsigned int *)v183;
    unsigned long long v185 = (void **)v447;
    unint64_t v112 = v438;
    if (v184)
    {
      uint64_t v186 = 0;
      while ((unint64_t)v447[v186] >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (v184 == ++v186) {
          goto LABEL_572;
        }
      }
      unsigned long long v185 = (void **)&v447[v186];
    }
    uint64_t v187 = (void **)&v447[v184];
    if (v185 == v187) {
      goto LABEL_572;
    }
    unsigned int v435 = (v138 >> 4) ^ (v138 >> 9);
    unsigned int v188 = *v185;
LABEL_392:
    uint64_t v189 = *v138;
    if ((*((unsigned char *)v138 + 34) & 0x40) != 0)
    {
      uint64_t v192 = **v189;
      BOOL v468 = v138;
      int v193 = *(_DWORD *)(v192 + 2520);
      if (v193)
      {
        uint64_t v194 = *(void *)(v192 + 2504);
        int v195 = v193 - 1;
        unsigned int v196 = v195 & v435;
        uint64_t v197 = (uint64_t ****)(v194 + 24 * (v195 & v435));
        uint64_t v198 = *v197;
        if (*v197 == v138)
        {
LABEL_396:
          char v190 = v197[1];
          uint64_t v191 = v197[2];
          uint64_t v189 = *v138;
          goto LABEL_397;
        }
        uint64_t v205 = 0;
        int v206 = 1;
        while (v198 != (uint64_t ***)-4096)
        {
          if (v205) {
            BOOL v207 = 0;
          }
          else {
            BOOL v207 = v198 == (uint64_t ***)-8192;
          }
          if (v207) {
            uint64_t v205 = v197;
          }
          unsigned int v208 = v196 + v206++;
          unsigned int v196 = v208 & v195;
          uint64_t v197 = (uint64_t ****)(v194 + 24 * v196);
          uint64_t v198 = *v197;
          if (*v197 == v138) {
            goto LABEL_396;
          }
        }
        if (v205) {
          BOOL v224 = v205;
        }
        else {
          BOOL v224 = v197;
        }
      }
      else
      {
        BOOL v224 = 0;
      }
      uint64_t v197 = (uint64_t ****)sub_1CC5BF31C(v192 + 2504, (uint64_t)&v468, (uint64_t *)&v468, v224);
      int v225 = (uint64_t ***)v468;
      v197[1] = 0;
      v197[2] = 0;
      *uint64_t v197 = v225;
      goto LABEL_396;
    }
    char v190 = 0;
    uint64_t v191 = 0;
LABEL_397:
    int v199 = *((_DWORD *)v189 + 2) >> 8;
    switch(v199)
    {
      case 0:
      case 5:
        goto LABEL_565;
      case 1:
      case 4:
        goto LABEL_907;
      case 2:
        if (*((unsigned char *)v138 + 16))
        {
          if (*((unsigned char *)v138 + 16) != 3 || (*((_DWORD *)v138 + 5) & 0x7FFFFFF) != 0) {
            goto LABEL_427;
          }
          int v200 = *((_DWORD *)v138 + 8);
        }
        else
        {
          if (v138[9] != (uint64_t **)(v138 + 9)) {
            goto LABEL_427;
          }
          int v200 = *((_DWORD *)v138 + 8);
          if ((v200 & 0x800000) != 0) {
            goto LABEL_427;
          }
        }
        if ((v200 & 0xF) != 0 || v191) {
          goto LABEL_565;
        }
LABEL_427:
        BOOL v468 = v188;
        unsigned int v209 = sub_1CC7D8ADC(v462, &v468);
        char v210 = *((unsigned char *)v209 + 8);
        v466[0] = (uint64_t)v138;
        if (v210)
        {
          uint64_t v211 = v209 + 2;
          int v212 = 4;
        }
        else
        {
          int v212 = *((_DWORD *)v209 + 6);
          if (!v212)
          {
            int v221 = 0;
            goto LABEL_442;
          }
          uint64_t v211 = (void *)v209[2];
        }
        int v213 = v212 - 1;
        unsigned int v214 = v213 & v435;
        unsigned int v215 = (uint64_t ****)&v211[v213 & v435];
        BOOL v216 = *v215;
        if (v138 == *v215) {
          goto LABEL_565;
        }
        uint64_t v217 = 0;
        int v218 = 1;
        while (v216 != (uint64_t ***)-4096)
        {
          if (v217) {
            BOOL v219 = 0;
          }
          else {
            BOOL v219 = v216 == (uint64_t ***)-8192;
          }
          if (v219) {
            uint64_t v217 = v215;
          }
          unsigned int v220 = v214 + v218++;
          unsigned int v214 = v220 & v213;
          unsigned int v215 = (uint64_t ****)&v211[v214];
          BOOL v216 = *v215;
          if (v138 == *v215) {
            goto LABEL_565;
          }
        }
        if (v217) {
          int v221 = v217;
        }
        else {
          int v221 = v215;
        }
LABEL_442:
        uint64_t v222 = sub_1CC0101A4((uint64_t)(v209 + 1), (uint64_t)v466, v466, v221);
        *uint64_t v222 = v466[0];
        unint64_t v223 = *((unsigned int *)v209 + 14);
        if (v223 >= *((unsigned int *)v209 + 15)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(v209[6] + 8 * v223) = v466[0];
        ++*((_DWORD *)v209 + 14);
        uint64_t v111 = (uint64_t)v427;
        goto LABEL_565;
      case 3:
        switch((unint64_t)v191)
        {
          case 8uLL:
            if (*v190 != (uint64_t **)0x6C61636F6C5F6C63) {
              goto LABEL_484;
            }
            uint64_t v204 = 12;
            goto LABEL_564;
          case 0xAuLL:
            int v233 = (uint64_t)*v190;
            int v234 = *((unsigned __int16 *)v190 + 4);
            if (v233 != 0x69727261625F6C63 || v234 != 29285) {
              goto LABEL_484;
            }
            uint64_t v231 = (uint64_t)v188;
            uint64_t v232 = 20;
            goto LABEL_560;
          case 0xDuLL:
            if (*v190 == (uint64_t **)0x70756F72675F6C63
              && *(uint64_t ***)((char *)v190 + 5) == (uint64_t **)0x785F64695F70756FLL)
            {
              uint64_t v231 = (uint64_t)v188;
              uint64_t v232 = 21;
            }
            else if (*v190 == (uint64_t **)0x70756F72675F6C63 {
                   && *(uint64_t ***)((char *)v190 + 5) == (uint64_t **)0x795F64695F70756FLL)
            }
            {
              uint64_t v231 = (uint64_t)v188;
              uint64_t v232 = 22;
            }
            else
            {
              uint64_t v228 = (uint64_t)*v190;
              uint64_t v229 = *(uint64_t *)((char *)v190 + 5);
              if (v228 != 0x70756F72675F6C63 || v229 != 0x7A5F64695F70756FLL)
              {
LABEL_484:
                uint64_t v204 = 9;
                goto LABEL_564;
              }
              uint64_t v231 = (uint64_t)v188;
              uint64_t v232 = 23;
            }
LABEL_560:
            llvm::FunctionGroup::setGlobalResource(v231, v232, (uint64_t)v138);
            break;
          case 0x11uLL:
            unsigned int v236 = (uint64_t)*v190;
            int v237 = (uint64_t)v190[1];
            int v238 = *((unsigned __int8 *)v190 + 16);
            if (v236 != 0x6C61636F6C5F6C63 || v237 != 0x616E7265746E695FLL || v238 != 108) {
              goto LABEL_484;
            }
            uint64_t v204 = 13;
            goto LABEL_564;
          case 0x13uLL:
            uint64_t v241 = (uint64_t)*v190;
            uint64_t v242 = (uint64_t)v190[1];
            uint64_t v243 = *(uint64_t *)((char *)v190 + 11);
            if (v241 != 0x6C61636F6C5F6C63 || v242 != 0x7268745F7265705FLL || v243 != 0x6461657268745F72) {
              goto LABEL_484;
            }
            uint64_t v204 = 14;
            goto LABEL_564;
          default:
            goto LABEL_484;
        }
        goto LABEL_565;
      default:
        if (v199 == 75) {
          goto LABEL_565;
        }
        if (v199 != 64)
        {
LABEL_907:
          v460[0] = (uint64_t)"Global variables in address space ";
          __int16 v461 = 259;
          __int16 v459 = 264;
          LODWORD(v458) = v199;
          sub_1CD3E3950(v460, &v458, (uint64_t)v466);
          uint64_t v456 = " are not valid.";
          __int16 v457 = 259;
          sub_1CD3E3950(v466, (uint64_t *)&v456, (uint64_t)&v468);
          llvm::report_fatal_error((llvm *)&v468, (const llvm::Twine *)1);
        }
        return result;
    }
    switch((unint64_t)v191)
    {
      case 0xBuLL:
        int v201 = (uint64_t)*v190;
        uint64_t v202 = *(uint64_t *)((char *)v190 + 3);
        if (v201 != 0x74735F6567616D69 || v202 != 0x65746174735F6567) {
          goto LABEL_908;
        }
        uint64_t v204 = 0;
        goto LABEL_564;
      case 0xCuLL:
        unint64_t v250 = (uint64_t)*v190;
        int v251 = *((_DWORD *)v190 + 2);
        if (v250 != 0x635F79726F6D656DLL || v251 != 1701340001) {
          goto LABEL_908;
        }
        uint64_t v204 = 6;
        goto LABEL_564;
      case 0xDuLL:
        int v260 = (uint64_t)*v190;
        uint64_t v261 = *(uint64_t *)((char *)v190 + 5);
        if (v260 != 0x5F72656C706D6173 || v261 != 0x65746174735F7265) {
          goto LABEL_908;
        }
        uint64_t v204 = 1;
        goto LABEL_564;
      case 0xFuLL:
        if (*v190 == (uint64_t **)0x625F726566667562
          && *(uint64_t ***)((char *)v190 + 7) == (uint64_t **)0x73676E69646E6962)
        {
          uint64_t v204 = 3;
          goto LABEL_564;
        }
        int v264 = (uint64_t)*v190;
        uint64_t v265 = *(uint64_t *)((char *)v190 + 7);
        if (v264 != 0x746E6174736E6F63 || v265 != 0x7265766972645F74) {
          goto LABEL_908;
        }
        BOOL v468 = v138;
        uint64_t v267 = sub_1CC782500(v440, &v468);
        if (!v267)
        {
          if (!sub_1CD1134B8((uint64_t)v138, 1)) {
            goto LABEL_565;
          }
LABEL_562:
          if (v431 != 29)
          {
            uint64_t v204 = 2;
            goto LABEL_564;
          }
          goto LABEL_565;
        }
        unsigned int v268 = (uint64_t *)(v267 - 8 * *(unsigned int *)(v267 + 8));
        uint64_t v270 = *v268;
        uint64_t v269 = v268[1];
        if (*(unsigned char *)(*(void *)(*(void *)(v270 + 128) + 24) + 8) != 17) {
          goto LABEL_537;
        }
        if (*(unsigned char *)v269 != 1 || (uint64_t v271 = *(void *)(v269 + 128), *(unsigned char *)(v271 + 16) != 16))
        {
          uint64_t v269 = *(void *)(v269 - 8 * *(unsigned int *)(v269 + 8));
LABEL_537:
          uint64_t v271 = *(void *)(v269 + 128);
        }
        int v272 = (void *)(v271 + 24);
        if (*(_DWORD *)(v271 + 32) >= 0x41u) {
          int v272 = (void *)*v272;
        }
        int v273 = *(_DWORD *)v272;
        int v274 = sub_1CD1134B8((uint64_t)v138, 1);
        if (v273 == 18) {
          int v275 = 1;
        }
        else {
          int v275 = v274;
        }
        if (v275) {
          uint64_t v204 = 2;
        }
        else {
          uint64_t v204 = 4;
        }
        BOOL v276 = v275 == 1 && v431 == 29;
        uint64_t v111 = (uint64_t)v427;
        if (v276) {
          goto LABEL_565;
        }
        goto LABEL_564;
      case 0x10uLL:
        if (*v190 == (uint64_t **)0x746E6174736E6F63 && v190[1] == (uint64_t **)0x72656C706D61735FLL) {
          goto LABEL_562;
        }
        unint64_t v247 = (uint64_t)*v190;
        BOOL v248 = (uint64_t)v190[1];
        if (v247 != 0x695F646165726874 || v248 != 0x746E61697261766ELL) {
          goto LABEL_908;
        }
        uint64_t v204 = 7;
        goto LABEL_564;
      case 0x11uLL:
        if (*v190 == (uint64_t **)0x705F726576697264
          && v190[1] == (uint64_t **)0x726574656D617261
          && *((unsigned char *)v190 + 16) == 115)
        {
          uint64_t v204 = 5;
        }
        else
        {
          uint64_t v255 = (uint64_t)*v190;
          uint64_t v256 = (uint64_t)v190[1];
          int v257 = *((unsigned __int8 *)v190 + 16);
          if (v255 != 0x746E6174736E6F63 || v256 != 0x6C61726574696C5FLL || v257 != 115)
          {
LABEL_908:
            uint64_t v426 = "Unknown section on a global variable";
            goto LABEL_906;
          }
          uint64_t v204 = 8;
        }
LABEL_564:
        (*(void (**)(void *, uint64_t, uint64_t ***))(*(void *)v188 + 144))(v188, v204, v138);
LABEL_565:
        uint64_t v277 = (unint64_t *)(v185 + 1);
        break;
      default:
        goto LABEL_908;
    }
    while (v277 != (unint64_t *)v187)
    {
      unint64_t v278 = *v277++;
      unsigned int v188 = (void *)v278;
      if (v278 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        unsigned long long v185 = (void **)(v277 - 1);
        goto LABEL_392;
      }
    }
    uint64_t v182 = v446;
    int v181 = v447;
    unint64_t v112 = v438;
LABEL_572:
    if (v181 != v182) {
      free(v181);
    }
    v137 += 8;
  }
  while (v137 != v436);
LABEL_582:
  if (v452 != v451) {
    free(v452);
  }
  uint64_t v279 = (llvm::Module *)a2;
  if (v463 != v465) {
    free(v463);
  }
  BOOL v280 = (uint64_t *)(*((uint64_t (**)(_DWORD **))*v427 + 6))(v427);
  uint64_t v429 = (*((uint64_t (**)(_DWORD **))*v427 + 7))(v427);
  if (v280 == (uint64_t *)v429) {
    goto LABEL_885;
  }
  uint64_t v281 = a2 + 272;
  unint64_t v428 = v112 >> 2;
  uint64_t v437 = a2 + 272;
  while (2)
  {
    uint64_t v282 = *v280;
    sub_1CC7D90BC(0, *v280, v281, 0, 0);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v282 + 440))(v282) > v112)
    {
      uint64_t v426 = "Ran out of shared registers after textures";
      goto LABEL_906;
    }
    sub_1CC7D90BC(1, v282, v281, 1, 0);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v282 + 440))(v282) > v112)
    {
      uint64_t v426 = "Ran out of shared registers after samplers";
      goto LABEL_906;
    }
    BOOL v468 = v470;
    uint64_t v469 = 0x800000000;
    llvm::Module::getModuleFlagsMetadata(v279, (uint64_t)&v468);
    if (v469)
    {
      uint64_t v283 = (uint64_t *)((char *)v468 + 16);
      uint64_t v284 = 24 * v469;
      while (1)
      {
        uint64_t v285 = *(void *)(*(v283 - 1) + 8);
        if (*(void *)v285 == 9)
        {
          uint64_t v286 = *(void *)(v285 + 24);
          uint64_t v287 = *(unsigned __int8 *)(v285 + 32);
          if (*(void *)"PIC Level" == v286 && aPicLevel[8] == v287) {
            break;
          }
        }
        v283 += 3;
        v284 -= 24;
        if (!v284) {
          goto LABEL_601;
        }
      }
      uint64_t v289 = *v283;
    }
    else
    {
LABEL_601:
      uint64_t v289 = 0;
    }
    if (v468 != v470)
    {
      free(v468);
      if (v289) {
        goto LABEL_823;
      }
      goto LABEL_604;
    }
    if (!v289) {
      goto LABEL_604;
    }
LABEL_823:
    uint64_t v403 = *(void *)(v289 + 128);
    unsigned int v404 = (void *)(v403 + 24);
    if (*(_DWORD *)(v403 + 32) >= 0x41u) {
      unsigned int v404 = (void *)*v404;
    }
    if (!*(_DWORD *)v404) {
LABEL_604:
    }
      sub_1CC7D90BC(2, v282, v281, 2, 0);
    BOOL v432 = v280;
    if ((*(unsigned int (**)(uint64_t))(*(void *)v282 + 440))(v282) > v112) {
      goto LABEL_896;
    }
    unint64_t v290 = (uint64_t *)*((void *)v279 + 14);
    unsigned int v291 = *((_DWORD *)v290 + 8);
    if (v291 <= 1) {
      uint64_t v292 = 1;
    }
    else {
      uint64_t v292 = v291;
    }
    if (v291 <= 0xD) {
      size_t v293 = v292;
    }
    else {
      size_t v293 = 14;
    }
    uint64_t v434 = *((unsigned int *)v290 + 2);
    if (!v434) {
      goto LABEL_625;
    }
    uint64_t v294 = 0;
    int v295 = 0;
    do
      int v295 = 33 * v295 + aAgcDylibBase_0[v294++];
    while (v293 != v294);
    uint64_t v296 = *v290;
    uint64_t v297 = *v290 + 8 * v434 + 8;
    int v298 = 1;
    int v299 = v295;
    while (1)
    {
      uint64_t v300 = v299 & (v434 - 1);
      uint64_t v301 = *(void **)(v296 + 8 * v300);
      if (v301 != (void *)-8)
      {
        if (!v301) {
          goto LABEL_625;
        }
        if (*(_DWORD *)(v297 + 4 * v300) == v295
          && v293 == *v301
          && !memcmp("agc.dylib_base", (char *)v301 + *((unsigned int *)v290 + 5), v293))
        {
          break;
        }
      }
      int v299 = v298 + v300;
      ++v298;
    }
    if (v300 == -1
      || (int)v300 == v434
      || (uint64_t v302 = *(void *)(*(void *)(v296 + 8 * (int)v300) + 8)) == 0
      || *(unsigned char *)(v302 + 16) != 3
      || (*(_DWORD *)(v302 + 32) & 0xFu) - 7 <= 1)
    {
LABEL_625:
      uint64_t v302 = 0;
    }
    __int16 v463 = v465;
    uint64_t v464 = 0x800000000;
    BOOL v468 = "agx.dylib_bindings";
    __int16 v471 = 259;
    uint64_t v303 = llvm::Module::getNamedMetadata(v439, (const char **)&v468);
    BOOL v468 = v470;
    uint64_t v469 = 0x800000000;
    llvm::Module::getModuleFlagsMetadata(v439, (uint64_t)&v468);
    if (v469)
    {
      char v304 = (uint64_t *)((char *)v468 + 16);
      uint64_t v305 = 24 * v469;
      while (1)
      {
        uint64_t v306 = *(void *)(*(v304 - 1) + 8);
        if (*(void *)v306 == 9)
        {
          uint64_t v307 = *(void *)(v306 + 24);
          uint64_t v308 = *(unsigned __int8 *)(v306 + 32);
          if (*(void *)"PIC Level" == v307 && aPicLevel[8] == v308) {
            break;
          }
        }
        v304 += 3;
        v305 -= 24;
        if (!v305) {
          goto LABEL_637;
        }
      }
      uint64_t v310 = *v304;
    }
    else
    {
LABEL_637:
      uint64_t v310 = 0;
    }
    if (v468 == v470)
    {
      if (!v310) {
        goto LABEL_640;
      }
LABEL_828:
      uint64_t v405 = *(void *)(v310 + 128);
      uint64_t v406 = (void *)(v405 + 24);
      if (*(_DWORD *)(v405 + 32) >= 0x41u) {
        uint64_t v406 = (void *)*v406;
      }
      int v311 = *(_DWORD *)v406;
    }
    else
    {
      free(v468);
      if (v310) {
        goto LABEL_828;
      }
LABEL_640:
      int v311 = 0;
    }
    if (v311) {
      BOOL v312 = 0;
    }
    else {
      BOOL v312 = v302 == 0;
    }
    if (!v312 && !v303)
    {
      uint64_t v426 = "MD node agx.dylib_bindings must exist for dylib or kernel calling dylibs.";
      goto LABEL_906;
    }
    if (v303)
    {
      uint64_t v313 = *(unsigned int *)(*(void *)(v303 + 48) + 8);
      if (v313)
      {
        uint64_t v314 = 0;
        uint64_t v315 = 8 * v313;
        do
        {
          uint64_t v316 = *(void *)(**(void **)(v303 + 48) + v314);
          uint64_t v317 = (uint64_t *)(v316 - 8 * *(unsigned int *)(v316 + 8));
          uint64_t v318 = *v317;
          if (*v317)
          {
            if (*(unsigned char *)v318 == 1)
            {
              uint64_t v319 = *(void *)(v318 + 128);
              if (*(unsigned char *)(v319 + 16) == 3)
              {
                uint64_t v320 = *(void *)(v317[1] + 128);
                uint64_t v321 = (void *)(v320 + 24);
                if (*(_DWORD *)(v320 + 32) >= 0x41u) {
                  uint64_t v321 = (void *)*v321;
                }
                uint64_t v322 = (void *)*v321;
                unsigned int v323 = *v321 + 1;
                if (v323 > (unint64_t)v464)
                {
                  if (v323 > (unint64_t)HIDWORD(v464)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v323 != (unint64_t)v464) {
                    bzero((char *)v463 + 8 * v464, 8 * (v323 - (unint64_t)v464));
                  }
                  LODWORD(v464) = v323;
                }
                *((void *)v463 + v322) = v319;
              }
            }
          }
          v314 += 8;
        }
        while (v315 != v314);
      }
    }
    v324 = (uint64_t *)v463;
    if (v464)
    {
      uint64_t v325 = 8 * v464;
      unsigned int v326 = v431;
      uint64_t v327 = (uint64_t)v439 + 272;
      LODWORD(v112) = v438;
      do
      {
        uint64_t v328 = *v324++;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v282 + 504))(v282, v328, v437, 4);
        v325 -= 8;
      }
      while (v325);
      v324 = (uint64_t *)v463;
    }
    else
    {
      unsigned int v326 = v431;
      uint64_t v327 = (uint64_t)v439 + 272;
      LODWORD(v112) = v438;
    }
    if (v324 != (uint64_t *)v465) {
      free(v324);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v282 + 440))(v282) > v112)
    {
      uint64_t v426 = "Ran out of shared registers after MSAA address";
      goto LABEL_906;
    }
    sub_1CC7D90BC(3, v282, v327, 4, 0);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v282 + 440))(v282) > v112)
    {
      uint64_t v426 = "Ran out of shared registers after bindings";
      goto LABEL_906;
    }
    if (v326 == 29)
    {
      for (uint64_t m = *((void *)v439 + 2); m != v433; uint64_t m = *(void *)(m + 8))
      {
        if (m) {
          uint64_t v330 = m - 56;
        }
        else {
          uint64_t v330 = 0;
        }
        if (sub_1CD1134B8(v330, 0))
        {
          (**(void (***)(uint64_t, uint64_t, void, void, uint64_t))v282)(v282, 3, 0, 0, 1);
          if (!v331) {
            (*(void (**)(uint64_t))(*(void *)v282 + 512))(v282);
          }
          break;
        }
      }
    }
    sub_1CC7D90BC(4, v282, v327, 3, 0);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v282 + 440))(v282) > v112)
    {
LABEL_896:
      uint64_t v426 = "Ran out of shared registers after driver constants";
      goto LABEL_906;
    }
    sub_1CC7D90BC(5, v282, v327, 5, 0);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v282 + 440))(v282) > v112)
    {
      uint64_t v426 = "Ran out of shared registers after parameters";
      goto LABEL_906;
    }
    uint64_t v332 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v282 + 176))(v282, 17);
    if (v332)
    {
      if (v332 == 1)
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v282 + 128))(&v468, v282, 17);
        uint64_t v409 = *(void *)(*(uint64_t (**)(void *))(*(void *)v468 + 32))(v468);
        int v410 = v468;
        BOOL v468 = 0;
        if (v410) {
          (*(void (**)(void *))(*(void *)v410 + 8))(v410);
        }
        if (!v409) {
          goto LABEL_685;
        }
      }
      else
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v282 + 128))(&v468, v282, 17);
        uint64_t v409 = *(void *)(*(uint64_t (**)(void *))(*(void *)v468 + 32))(v468);
        char v420 = v468;
        BOOL v468 = 0;
        if (v420) {
          (*(void (**)(void *))(*(void *)v420 + 8))(v420);
        }
        unsigned int v326 = v431;
        uint64_t v327 = (uint64_t)v439 + 272;
        LODWORD(v112) = v438;
        if (!v409) {
          goto LABEL_685;
        }
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v282 + 496))(v282, v409, v327, 5);
    }
LABEL_685:
    sub_1CC7D90BC(7, v282, v327, 8, 0);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v282 + 440))(v282) > v112)
    {
      uint64_t v426 = "Ran out of shared registers after invariants";
      goto LABEL_906;
    }
    sub_1CC7D90BC(6, v282, v327, 7, 0);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v282 + 440))(v282) > v112)
    {
      uint64_t v426 = "Ran out of shared registers after promoted buffers";
      goto LABEL_906;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, void, void, uint64_t))(*(void *)v282 + 8))(v282, 19, v428, 1, 0, 0, 5);
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, void, void, uint64_t))(*(void *)v282 + 8))(v282, 20, v428, 1, 0, 0, 5);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v282 + 128))(&v463, v282, 8);
    (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(void *)v282 + 136))(&v451, v282, 8);
    if (v463)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v463 + 16))(&v468);
      uint64_t v333 = v468;
    }
    else
    {
      uint64_t v333 = 0;
    }
    if (((*(uint64_t (**)(void *, char *))(*(void *)v333 + 24))(v333, v451) & 1) == 0)
    {
      do
      {
        uint64_t v344 = (void **)(*(uint64_t (**)(void *))(*(void *)v333 + 32))(v333);
        int v345 = *v344;
        if (!*v344) {
          goto LABEL_725;
        }
        if (v345[16])
        {
          if (v345[16] != 3 || (*((_DWORD *)v345 + 5) & 0x7FFFFFF) != 0) {
            goto LABEL_717;
          }
          int v346 = *((_DWORD *)v345 + 8);
        }
        else
        {
          if (*((unsigned char **)v345 + 9) != v345 + 72) {
            goto LABEL_717;
          }
          int v346 = *((_DWORD *)v345 + 8);
          if ((v346 & 0x800000) != 0) {
            goto LABEL_717;
          }
        }
        if ((v346 & 0xF) != 0) {
          goto LABEL_895;
        }
        if ((v346 & 0x400000) != 0)
        {
          uint64_t v347 = ***(void ***)v345;
          BOOL v468 = *v344;
          int v348 = *(_DWORD *)(v347 + 2520);
          if (v348)
          {
            uint64_t v349 = *(void *)(v347 + 2504);
            int v350 = v348 - 1;
            unsigned int v351 = v350 & ((v345 >> 4) ^ (v345 >> 9));
            uint64_t v352 = (void *)(v349 + 24 * v351);
            uint64_t v353 = (unsigned char *)*v352;
            if ((unsigned char *)*v352 == v345) {
              goto LABEL_716;
            }
            uint64_t v355 = 0;
            int v356 = 1;
            while (v353 != (unsigned char *)-4096)
            {
              if (v355) {
                BOOL v357 = 0;
              }
              else {
                BOOL v357 = v353 == (unsigned char *)-8192;
              }
              if (v357) {
                uint64_t v355 = v352;
              }
              unsigned int v358 = v351 + v356++;
              unsigned int v351 = v358 & v350;
              uint64_t v352 = (void *)(v349 + 24 * v351);
              uint64_t v353 = (unsigned char *)*v352;
              if ((unsigned char *)*v352 == v345) {
                goto LABEL_716;
              }
            }
            if (v355) {
              unsigned int v359 = v355;
            }
            else {
              unsigned int v359 = v352;
            }
          }
          else
          {
            unsigned int v359 = 0;
          }
          uint64_t v352 = sub_1CC5BF31C(v347 + 2504, (uint64_t)&v468, (uint64_t *)&v468, v359);
          v360 = v468;
          v352[1] = 0;
          v352[2] = 0;
          *uint64_t v352 = v360;
LABEL_716:
          if (v352[2]) {
            goto LABEL_895;
          }
        }
LABEL_717:
        uint64_t v354 = (*(uint64_t (**)(uint64_t))(*(void *)v282 + 312))(v282);
        (*(void (**)(uint64_t, unsigned char *, uint64_t, void, uint64_t))(*(void *)v282 + 416))(v282, v345, v354, 0, 9);
        if (v345[16])
        {
          if (v345[16] != 3 || (*((_DWORD *)v345 + 5) & 0x7FFFFFF) != 0) {
            goto LABEL_724;
          }
        }
        else if (*((unsigned char **)v345 + 9) != v345 + 72 || (v345[34] & 0x80) != 0)
        {
LABEL_724:
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)v282 + 544))(v282, *((void *)v345 - 4), v327);
          goto LABEL_725;
        }
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v282 + 552))(v282, v345);
LABEL_725:
        (*(void (**)(void *))(*(void *)v333 + 40))(v333);
      }
      while (!(*(unsigned int (**)(void *, char *))(*(void *)v333 + 24))(v333, v451));
    }
    (*(void (**)(void *))(*(void *)v333 + 8))(v333);
    uint64_t v334 = v451;
    std::string v451 = 0;
    if (v334) {
      (*(void (**)(char *))(*(void *)v334 + 8))(v334);
    }
    uint64_t v335 = v463;
    __int16 v463 = 0;
    uint64_t v279 = v439;
    if (v335) {
      (*(void (**)(void *))(*(void *)v335 + 8))(v335);
    }
    int v336 = (*(uint64_t (**)(uint64_t))(*(void *)v282 + 440))(v282);
    BOOL v468 = v470;
    uint64_t v469 = 0x800000000;
    llvm::Module::getModuleFlagsMetadata(v439, (uint64_t)&v468);
    if (v469)
    {
      int v337 = (uint64_t *)((char *)v468 + 16);
      uint64_t v338 = 24 * v469;
      while (1)
      {
        uint64_t v339 = *(void *)(*(v337 - 1) + 8);
        if (*(void *)v339 == 9)
        {
          uint64_t v340 = *(void *)(v339 + 24);
          uint64_t v341 = *(unsigned __int8 *)(v339 + 32);
          if (*(void *)"PIC Level" == v340 && aPicLevel[8] == v341) {
            break;
          }
        }
        v337 += 3;
        v338 -= 24;
        if (!v338) {
          goto LABEL_741;
        }
      }
      uint64_t v343 = *v337;
    }
    else
    {
LABEL_741:
      uint64_t v343 = 0;
    }
    if (v468 != v470)
    {
      free(v468);
      if (v343) {
        goto LABEL_832;
      }
      goto LABEL_744;
    }
    if (!v343) {
      goto LABEL_744;
    }
LABEL_832:
    uint64_t v407 = *(void *)(v343 + 128);
    uint64_t v408 = (void *)(v407 + 24);
    if (*(_DWORD *)(v407 + 32) >= 0x41u) {
      uint64_t v408 = (void *)*v408;
    }
    if (!*(_DWORD *)v408)
    {
LABEL_744:
      if (v326 != 29) {
        goto LABEL_749;
      }
      BOOL v468 = "agx.may_be_called_from_intersection_function";
      __int16 v471 = 259;
      uint64_t v361 = llvm::Module::getNamedMetadata(v439, (const char **)&v468);
      if (!v361) {
        goto LABEL_749;
      }
      uint64_t v362 = *(void *)(*(void *)(***(void ***)(v361 + 48)
                                   - 8 * *(unsigned int *)(***(void ***)(v361 + 48) + 8))
                       + 128);
      unsigned int v363 = (void *)(v362 + 24);
      if (*(_DWORD *)(v362 + 32) >= 0x41u) {
        unsigned int v363 = (void *)*v363;
      }
      if (!*v363)
      {
LABEL_749:
        v466[0] = v282;
        int v364 = (void **)sub_1CC7D8ADC(v462, v466)[6];
        v460[0] = v282;
        uint64_t v365 = sub_1CC7D8ADC(v462, v460);
        uint64_t v366 = v365[6] + 8 * *((unsigned int *)v365 + 14);
        while (2)
        {
          if (v364 == (void **)v366)
          {
            uint64_t v279 = v439;
            goto LABEL_787;
          }
          uint64_t v367 = *v364;
          if (!*v364) {
            goto LABEL_771;
          }
          if (*((unsigned char *)v367 + 16))
          {
            if (*((unsigned char *)v367 + 16) == 3 && (v367[5] & 0x7FFFFFF) == 0)
            {
              int v368 = v367[8];
              goto LABEL_758;
            }
            goto LABEL_763;
          }
          if (*((_DWORD **)v367 + 9) != v367 + 18) {
            goto LABEL_763;
          }
          int v368 = v367[8];
          if ((v368 & 0x800000) != 0) {
            goto LABEL_763;
          }
LABEL_758:
          if ((v368 & 0xF) != 0) {
            goto LABEL_895;
          }
          if ((v368 & 0x400000) == 0)
          {
LABEL_763:
            uint64_t v376 = (*(uint64_t (**)(uint64_t))(*(void *)v282 + 312))(v282);
            (*(void (**)(uint64_t, _DWORD *, uint64_t, void, uint64_t))(*(void *)v282 + 416))(v282, v367, v376, 0, 9);
            if (*((unsigned char *)v367 + 16))
            {
              if (*((unsigned char *)v367 + 16) == 3 && (v367[5] & 0x7FFFFFF) == 0) {
                goto LABEL_769;
              }
            }
            else if (*((_DWORD **)v367 + 9) == v367 + 18 && (*((unsigned char *)v367 + 34) & 0x80) == 0)
            {
LABEL_769:
              (*(void (**)(uint64_t, _DWORD *))(*(void *)v282 + 552))(v282, v367);
              goto LABEL_771;
            }
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)v282 + 544))(v282, *((void *)v367 - 4), v327);
LABEL_771:
            ++v364;
            continue;
          }
          break;
        }
        uint64_t v369 = ***(void ***)v367;
        BOOL v468 = *v364;
        int v370 = *(_DWORD *)(v369 + 2520);
        if (v370)
        {
          uint64_t v371 = *(void *)(v369 + 2504);
          int v372 = v370 - 1;
          unsigned int v373 = v372 & ((v367 >> 4) ^ (v367 >> 9));
          unsigned int v374 = (void *)(v371 + 24 * v373);
          uint64_t v375 = (_DWORD *)*v374;
          if ((_DWORD *)*v374 == v367) {
            goto LABEL_762;
          }
          uint64_t v377 = 0;
          int v378 = 1;
          while (v375 != (_DWORD *)-4096)
          {
            if (v377) {
              BOOL v379 = 0;
            }
            else {
              BOOL v379 = v375 == (_DWORD *)-8192;
            }
            if (v379) {
              uint64_t v377 = v374;
            }
            unsigned int v380 = v373 + v378++;
            unsigned int v373 = v380 & v372;
            unsigned int v374 = (void *)(v371 + 24 * v373);
            uint64_t v375 = (_DWORD *)*v374;
            if ((_DWORD *)*v374 == v367) {
              goto LABEL_762;
            }
          }
          if (v377) {
            uint64_t v381 = v377;
          }
          else {
            uint64_t v381 = v374;
          }
        }
        else
        {
          uint64_t v381 = 0;
        }
        unsigned int v374 = sub_1CC5BF31C(v369 + 2504, (uint64_t)&v468, (uint64_t *)&v468, v381);
        unsigned int v382 = v468;
        v374[1] = 0;
        v374[2] = 0;
        void *v374 = v382;
LABEL_762:
        if (v374[2]) {
          goto LABEL_895;
        }
        goto LABEL_763;
      }
    }
LABEL_787:
    int v383 = (*(uint64_t (**)(uint64_t))(*(void *)v282 + 440))(v282);
    (*(void (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*(void *)v282 + 8))(v282, 7, (v383 - v336), 1, 0, 1, 3);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v282 + 440))(v282) > v112)
    {
      uint64_t v426 = "Ran out of shared registers after constant literals";
      goto LABEL_906;
    }
    uint64_t v384 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v282 + 176))(v282, 21);
    if (v384)
    {
      if (v384 == 1)
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v282 + 128))(&v468, v282, 21);
        uint64_t v411 = *(void *)(*(uint64_t (**)(void *))(*(void *)v468 + 32))(v468);
        unint64_t v412 = v468;
        BOOL v468 = 0;
        if (v412) {
          (*(void (**)(void *))(*(void *)v412 + 8))(v412);
        }
        if (!v411) {
          goto LABEL_789;
        }
      }
      else
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v282 + 128))(&v468, v282, 21);
        uint64_t v411 = *(void *)(*(uint64_t (**)(void *))(*(void *)v468 + 32))(v468);
        uint64_t v421 = v468;
        BOOL v468 = 0;
        if (v421) {
          (*(void (**)(void *))(*(void *)v421 + 8))(v421);
        }
        uint64_t v279 = v439;
        uint64_t v327 = (uint64_t)v439 + 272;
        LODWORD(v112) = v438;
        if (!v411) {
          goto LABEL_789;
        }
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v282 + 496))(v282, v411, v327, 11);
    }
LABEL_789:
    uint64_t v385 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v282 + 176))(v282, 22);
    if (v385)
    {
      if (v385 == 1)
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v282 + 128))(&v468, v282, 22);
        uint64_t v413 = *(void *)(*(uint64_t (**)(void *))(*(void *)v468 + 32))(v468);
        unsigned int v414 = v468;
        BOOL v468 = 0;
        if (v414) {
          (*(void (**)(void *))(*(void *)v414 + 8))(v414);
        }
        if (!v413) {
          goto LABEL_790;
        }
      }
      else
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v282 + 128))(&v468, v282, 22);
        uint64_t v413 = *(void *)(*(uint64_t (**)(void *))(*(void *)v468 + 32))(v468);
        uint64_t v422 = v468;
        BOOL v468 = 0;
        if (v422) {
          (*(void (**)(void *))(*(void *)v422 + 8))(v422);
        }
        uint64_t v279 = v439;
        uint64_t v327 = (uint64_t)v439 + 272;
        LODWORD(v112) = v438;
        if (!v413) {
          goto LABEL_790;
        }
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v282 + 496))(v282, v413, v327, 12);
    }
LABEL_790:
    uint64_t v386 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v282 + 176))(v282, 23);
    if (v386)
    {
      if (v386 == 1)
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v282 + 128))(&v468, v282, 23);
        uint64_t v415 = *(void *)(*(uint64_t (**)(void *))(*(void *)v468 + 32))(v468);
        int v416 = v468;
        BOOL v468 = 0;
        if (v416) {
          (*(void (**)(void *))(*(void *)v416 + 8))(v416);
        }
        if (!v415) {
          goto LABEL_791;
        }
      }
      else
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v282 + 128))(&v468, v282, 23);
        uint64_t v415 = *(void *)(*(uint64_t (**)(void *))(*(void *)v468 + 32))(v468);
        unsigned int v423 = v468;
        BOOL v468 = 0;
        if (v423) {
          (*(void (**)(void *))(*(void *)v423 + 8))(v423);
        }
        uint64_t v279 = v439;
        uint64_t v327 = (uint64_t)v439 + 272;
        LODWORD(v112) = v438;
        if (!v415) {
          goto LABEL_791;
        }
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v282 + 496))(v282, v415, v327, 13);
    }
LABEL_791:
    uint64_t v387 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v282 + 176))(v282, 20);
    if (v387)
    {
      if (v387 == 1)
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v282 + 128))(&v468, v282, 20);
        uint64_t v417 = *(void *)(*(uint64_t (**)(void *))(*(void *)v468 + 32))(v468);
        unint64_t v418 = v468;
        BOOL v468 = 0;
        if (v418) {
          (*(void (**)(void *))(*(void *)v418 + 8))(v418);
        }
        if (!v417) {
          goto LABEL_792;
        }
      }
      else
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v282 + 128))(&v468, v282, 20);
        uint64_t v417 = *(void *)(*(uint64_t (**)(void *))(*(void *)v468 + 32))(v468);
        unsigned int v424 = v468;
        BOOL v468 = 0;
        if (v424) {
          (*(void (**)(void *))(*(void *)v424 + 8))(v424);
        }
        uint64_t v279 = v439;
        uint64_t v327 = (uint64_t)v439 + 272;
        LODWORD(v112) = v438;
        if (!v417) {
          goto LABEL_792;
        }
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v282 + 496))(v282, v417, v327, 14);
    }
LABEL_792:
    BOOL v468 = "agx.interpolations";
    __int16 v471 = 259;
    uint64_t v388 = llvm::Module::getNamedMetadata(v279, (const char **)&v468);
    if (!v388 || (uint64_t v389 = v388, v390 = *(unsigned int *)(*(void *)(v388 + 48) + 8), !v390))
    {
      uint64_t v393 = 0;
      unint64_t v402 = v432;
      goto LABEL_818;
    }
    uint64_t v391 = 0;
    uint64_t v392 = 0;
    uint64_t v393 = 0;
    uint64_t v394 = 8 * v390;
    while (2)
    {
      uint64_t v395 = *(void *)(**(void **)(v389 + 48) + v391);
      uint64_t v396 = *(void *)(v395 - 8 * *(unsigned int *)(v395 + 8));
      if (v396)
      {
        uint64_t v397 = *(void *)(v396 + 128);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v282 + 184))(v282, 9, v397))
        {
          uint64_t v398 = *(void *)(v395 - 8 * *(unsigned int *)(v395 + 8) + 8);
          if (*(unsigned char *)v398 == 4) {
            uint64_t v398 = *(void *)(v398 - 8 * *(unsigned int *)(v398 + 8));
          }
          uint64_t v399 = *(void *)(v398 + 128);
          if (*(_DWORD *)(v399 + 32) > 0x40u)
          {
            uint64_t v400 = **(void **)(v399 + 24);
            if (v400) {
              goto LABEL_801;
            }
          }
          else
          {
            uint64_t v400 = *(void *)(v399 + 24);
            if (v400)
            {
LABEL_801:
              if (v400 == 11) {
                uint64_t v392 = v397;
              }
              goto LABEL_806;
            }
          }
          uint64_t v393 = v397;
LABEL_806:
          if (v393) {
            BOOL v401 = v392 == 0;
          }
          else {
            BOOL v401 = 1;
          }
          if (!v401) {
            goto LABEL_813;
          }
        }
      }
      v391 += 8;
      if (v394 != v391) {
        continue;
      }
      break;
    }
    if (!v393) {
      goto LABEL_814;
    }
LABEL_813:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v282 + 496))(v282, v393, v437, 15);
    llvm::FunctionGroup::setGlobalResource(v282, 18, v393);
LABEL_814:
    LODWORD(v112) = v438;
    unint64_t v402 = v432;
    if (v392) {
      llvm::FunctionGroup::setGlobalResource(v282, 19, v392);
    }
    uint64_t v279 = v439;
LABEL_818:
    uint64_t v281 = (uint64_t)v439 + 272;
    sub_1CC7D90BC(9, v282, v437, 16, v393);
    sub_1CC7D90BC(12, v282, v437, 17, 0);
    sub_1CC7D90BC(13, v282, v437, 17, 0);
    sub_1CC7D90BC(14, v282, v437, 17, 0);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v282 + 448))(v282) > v430)
    {
      uint64_t v419 = *(void *)v279;
      BOOL v468 = "Coefficient registers overflow";
      __int16 v471 = 259;
      llvm::LLVMContext::emitError(v419, (uint64_t)&v468);
    }
    BOOL v280 = v402 + 1;
    if (v280 != (uint64_t *)v429) {
      continue;
    }
    break;
  }
LABEL_885:
  llvm::GPUFunctionInfoCache::releaseMemory(v427[1]);
  if (__p)
  {
    int v443 = __p;
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v440[0], 8);
  sub_1CC7D935C((uint64_t)v462);
  return 0;
}

uint64_t sub_1CC7D7FB4(uint64_t a1)
{
  uint64_t v1 = a1;
  v15[16] = *MEMORY[0x1E4F143B8];
  unsigned int v13 = v15;
  uint64_t v14 = 0x1000000000;
  if (a1)
  {
    unsigned int v2 = 0;
    do
    {
      if (v2 >= HIDWORD(v14)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v13 + v2) = v1;
      unsigned int v2 = v14 + 1;
      LODWORD(v14) = v14 + 1;
      uint64_t v1 = *(void *)(v1 + 8);
    }
    while (v1);
    if (v2)
    {
      do
      {
        while (1)
        {
          uint64_t v3 = (void *)*((void *)v13 + --v2);
          LODWORD(v14) = v2;
          uint64_t v4 = v3[3];
          int v5 = *(unsigned __int8 *)(v4 + 16);
          if (v4) {
            BOOL v6 = v5 == 5;
          }
          else {
            BOOL v6 = 0;
          }
          if (v6)
          {
            int v7 = *(unsigned __int16 *)(v4 + 18);
            if (v7 != 49 && v7 != 34) {
              goto LABEL_29;
            }
            uint64_t v8 = *(void *)(v4 + 8);
            if (!v8) {
              goto LABEL_29;
            }
            do
            {
              if (v2 >= HIDWORD(v14)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v13 + v2) = v8;
              unsigned int v2 = v14 + 1;
              LODWORD(v14) = v14 + 1;
              uint64_t v8 = *(void *)(v8 + 8);
            }
            while (v8);
            int v5 = *(unsigned __int8 *)(v4 + 16);
          }
          if (v5 == 84)
          {
            uint64_t v9 = *(void *)(v4 - 32);
            if (v9)
            {
              if (!*(unsigned char *)(v9 + 16)
                && *(void *)(v9 + 24) == *(void *)(v4 + 72)
                && (*(unsigned char *)(v9 + 33) & 0x20) != 0)
              {
                break;
              }
            }
          }
LABEL_29:
          if (!v2) {
            goto LABEL_33;
          }
        }
        int v10 = *(_DWORD *)(v9 + 36);
        if (!sub_1CB859A14(v10) && (v10 - 1682) > 0x8B)
        {
          uint64_t v1 = 1;
          if (v10 == 1281 || (v10 - 2177) < 0x80) {
            goto LABEL_34;
          }
          goto LABEL_29;
        }
        uint64_t v1 = 1;
        llvm::SampleInfo::SampleInfo((uint64_t)v12, v10, 1);
        if (*(void *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) + 32 * v12[8]) == *v3) {
          goto LABEL_34;
        }
        unsigned int v2 = v14;
      }
      while (v14);
    }
LABEL_33:
    uint64_t v1 = 0;
  }
LABEL_34:
  if (v13 != v15) {
    free(v13);
  }
  return v1;
}

uint64_t *sub_1CC7D81E8(int8x16_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  int v5 = a2;
  BOOL v6 = a1;
  if (a3 == 3)
  {
    if (!sub_1CC7D7FB4(*(void *)(a1->i64[1] + 8)))
    {
      uint64_t v16 = v6->i64[1];
      v6->i64[1] = *v5;
      uint64_t *v5 = v16;
      int8x16_t *v6 = vextq_s8(*v6, *v6, 8uLL);
      return &v6->i64[1];
    }
    uint64_t v8 = v6->i64[0];
    v6->i64[0] = v6->i64[1];
    v6->i64[1] = v8;
    v6->i64[1] = *v5;
    goto LABEL_6;
  }
  if (a3 == 2)
  {
    uint64_t v8 = a1->i64[0];
    a1->i64[0] = *a2;
LABEL_6:
    uint64_t *v5 = v8;
    return v5;
  }
  if (a5 >= a3)
  {
    unsigned int v17 = &a1->i64[1];
    *a4 = a1->i64[0];
    uint64_t v18 = a4 + 1;
    if (&a1->u64[1] == (unint64_t *)a2)
    {
      a1->i64[0] = *a2;
    }
    else
    {
      do
      {
        int v19 = sub_1CC7D7FB4(*(void *)(*v17 + 8));
        uint64_t v20 = *v17;
        if (v19)
        {
          v6->i64[0] = v20;
          BOOL v6 = (int8x16_t *)((char *)v6 + 8);
        }
        else
        {
          *v18++ = v20;
        }
        ++v17;
      }
      while (v17 != v5);
      v6->i64[0] = *v5;
      int v5 = &v6->i64[1];
      if (v18 <= a4) {
        return v5;
      }
    }
    uint64_t v25 = 0;
    do
    {
      v5[v25] = a4[v25];
      ++v25;
    }
    while (&a4[v25] < v18);
    return v5;
  }
  if (a3 >= 0) {
    uint64_t v11 = a3;
  }
  else {
    uint64_t v11 = a3 + 1;
  }
  uint64_t v12 = v11 >> 1;
  unsigned int v13 = &a1->i8[8 * (v11 >> 1)];
  uint64_t v14 = v13 - 8;
  if (sub_1CC7D7FB4(*(void *)(*((void *)v13 - 1) + 8)))
  {
    uint64_t v15 = v12;
LABEL_25:
    int v24 = (uint64_t *)sub_1CC7D81E8(v6, v14, v15, a4, a5);
  }
  else
  {
    uint64_t v21 = 8 - 8 * v12;
    uint64_t v22 = v12;
    while (v21)
    {
      uint64_t v15 = v22 - 1;
      int v23 = sub_1CC7D7FB4(*(void *)(v6[-1].i64[v22] + 8));
      v21 += 8;
      uint64_t v22 = v15;
      if (v23)
      {
        uint64_t v14 = &v6->i8[-v21];
        goto LABEL_25;
      }
    }
    int v24 = (uint64_t *)v6;
  }
  uint64_t v26 = a3 - v12;
  if (sub_1CC7D7FB4(*(void *)(v6->i64[v12] + 8)))
  {
    int v27 = (char *)(v5 + 1);
    unsigned int v28 = &v6->i64[v12 + 1];
    while (v28 != v5)
    {
      --v26;
      uint64_t v29 = *v28++;
      if ((sub_1CC7D7FB4(*(void *)(v29 + 8)) & 1) == 0)
      {
        BOOL v30 = (char *)(v28 - 1);
        goto LABEL_37;
      }
    }
  }
  else
  {
    BOOL v30 = v13;
LABEL_37:
    int v27 = (char *)sub_1CC7D81E8(v30, v5, v26, a4, a5);
  }
  if (v24 == (uint64_t *)v13) {
    return (uint64_t *)v27;
  }
  if (v13 == v27) {
    return v24;
  }
  if (v24 + 1 == (uint64_t *)v13)
  {
    uint64_t v32 = *v24;
    memmove(v24, v13, v27 - v13);
    int v5 = (uint64_t *)((char *)v24 + v27 - v13);
    uint64_t *v5 = v32;
    return v5;
  }
  if (v13 + 8 == v27)
  {
    uint64_t v33 = *((void *)v27 - 1);
    int v5 = v24 + 1;
    if (v27 - 8 != (char *)v24) {
      memmove(v24 + 1, v24, v27 - 8 - (char *)v24);
    }
    *int v24 = v33;
    return v5;
  }

  return sub_1CC057214(v24, v13, v27);
}

void sub_1CC7D84DC()
{
}

__n128 sub_1CC7D84F0(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x18uLL);
  *(void *)unsigned int v2 = &unk_1F261EE70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC7D853C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F261EE70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CC7D856C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 8);
  uint64_t v6 = *(unsigned int *)(v4 + 20);
  if (v5 != *(void *)v4)
  {
    unsigned int v10 = *(_DWORD *)(v4 + 16);
    goto LABEL_12;
  }
  if (!v6)
  {
LABEL_9:
    unsigned int v10 = *(_DWORD *)(v4 + 16);
    if (v6 < v10)
    {
      *(_DWORD *)(v4 + 20) = v6 + 1;
      *(void *)(v5 + 8 * v6) = a2;
      goto LABEL_33;
    }
LABEL_12:
    if (3 * v10 <= 4 * ((int)v6 - *(_DWORD *)(v4 + 24)))
    {
      if (v10 >= 0x40) {
        v10 *= 2;
      }
      else {
        unsigned int v10 = 128;
      }
    }
    else if (v10 - v6 >= v10 >> 3)
    {
      goto LABEL_14;
    }
    llvm::SmallPtrSetImplBase::Grow(*(llvm::SmallPtrSetImplBase **)(a1 + 8), v10);
    unsigned int v10 = *(_DWORD *)(v4 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
LABEL_14:
    unsigned int v11 = v10 - 1;
    unsigned int v12 = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v13 = (void *)(v5 + 8 * v12);
    uint64_t v14 = *v13;
    if (*v13 == -1)
    {
      uint64_t v15 = 0;
LABEL_26:
      if (v15) {
        int v19 = v15;
      }
      else {
        int v19 = v13;
      }
      if (*v19 != a2)
      {
        if (*v19 == -2) {
          --*(_DWORD *)(v4 + 24);
        }
        else {
          ++*(_DWORD *)(v4 + 20);
        }
        void *v19 = a2;
      }
    }
    else
    {
      uint64_t v15 = 0;
      int v16 = 1;
      while (v14 != a2)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v14 == -2;
        }
        if (v17) {
          uint64_t v15 = v13;
        }
        unsigned int v18 = v12 + v16++;
        unsigned int v12 = v18 & v11;
        unsigned int v13 = (void *)(v5 + 8 * (v18 & v11));
        uint64_t v14 = *v13;
        if (*v13 == -1) {
          goto LABEL_26;
        }
      }
    }
    goto LABEL_33;
  }
  int v7 = 0;
  uint64_t v8 = 8 * v6;
  uint64_t v9 = *(void **)(v4 + 8);
  while (*v9 != a2)
  {
    if (*v9 == -2) {
      int v7 = v9;
    }
    ++v9;
    v8 -= 8;
    if (!v8)
    {
      if (!v7) {
        goto LABEL_9;
      }
      void *v7 = a2;
      --*(_DWORD *)(v4 + 24);
      break;
    }
  }
LABEL_33:
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 72))(&v45, a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 80))(&v44, a2);
  uint64_t v21 = v44;
  uint64_t v20 = v45;
  if (v45)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v45 + 16))(&v45, v45);
    uint64_t v22 = v45;
    if (v21)
    {
LABEL_35:
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v21 + 16))(&v45, v21);
      uint64_t v23 = v45;
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v22 = 0;
    if (v44) {
      goto LABEL_35;
    }
  }
  uint64_t v23 = 0;
LABEL_36:
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v22 + 24))(v22, v23) & 1) == 0)
  {
    while (1)
    {
      uint64_t v25 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v22 + 32))(v22);
      uint64_t v26 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16), *v25);
      uint64_t v27 = v26;
      uint64_t v28 = *(void *)(a1 + 8);
      uint64_t v29 = *(void *)(v28 + 8);
      uint64_t v30 = *(unsigned int *)(v28 + 20);
      if (v29 != *(void *)v28) {
        break;
      }
      if (v30)
      {
        unint64_t v31 = 0;
        uint64_t v32 = 8 * v30;
        uint64_t v33 = *(uint64_t **)(v28 + 8);
        while (*v33 != v26)
        {
          if (*v33 == -2) {
            unint64_t v31 = v33;
          }
          ++v33;
          v32 -= 8;
          if (!v32)
          {
            if (!v31) {
              goto LABEL_52;
            }
            *unint64_t v31 = v26;
            --*(_DWORD *)(v28 + 24);
            goto LABEL_76;
          }
        }
        goto LABEL_76;
      }
LABEL_52:
      unsigned int v34 = *(_DWORD *)(v28 + 16);
      if (v30 >= v34) {
        goto LABEL_55;
      }
      *(_DWORD *)(v28 + 20) = v30 + 1;
      *(void *)(v29 + 8 * v30) = v26;
LABEL_76:
      (*(void (**)(uint64_t))(*(void *)v22 + 40))(v22);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v22 + 24))(v22, v23)) {
        goto LABEL_37;
      }
    }
    unsigned int v34 = *(_DWORD *)(v28 + 16);
LABEL_55:
    if (3 * v34 <= 4 * ((int)v30 - *(_DWORD *)(v28 + 24)))
    {
      if (v34 >= 0x40) {
        v34 *= 2;
      }
      else {
        unsigned int v34 = 128;
      }
    }
    else if (v34 - v30 >= v34 >> 3)
    {
      goto LABEL_57;
    }
    llvm::SmallPtrSetImplBase::Grow(*(llvm::SmallPtrSetImplBase **)(a1 + 8), v34);
    unsigned int v34 = *(_DWORD *)(v28 + 16);
    uint64_t v29 = *(void *)(v28 + 8);
LABEL_57:
    unsigned int v35 = v34 - 1;
    unsigned int v36 = (v34 - 1) & ((v27 >> 4) ^ (v27 >> 9));
    unsigned int v37 = (uint64_t *)(v29 + 8 * v36);
    uint64_t v38 = *v37;
    if (*v37 == -1)
    {
      unsigned int v39 = 0;
LABEL_69:
      if (v39) {
        int v43 = v39;
      }
      else {
        int v43 = v37;
      }
      if (*v43 != v27)
      {
        if (*v43 == -2) {
          --*(_DWORD *)(v28 + 24);
        }
        else {
          ++*(_DWORD *)(v28 + 20);
        }
        uint64_t *v43 = v27;
      }
    }
    else
    {
      unsigned int v39 = 0;
      int v40 = 1;
      while (v38 != v27)
      {
        if (v39) {
          BOOL v41 = 0;
        }
        else {
          BOOL v41 = v38 == -2;
        }
        if (v41) {
          unsigned int v39 = v37;
        }
        unsigned int v42 = v36 + v40++;
        unsigned int v36 = v42 & v35;
        unsigned int v37 = (uint64_t *)(v29 + 8 * (v42 & v35));
        uint64_t v38 = *v37;
        if (*v37 == -1) {
          goto LABEL_69;
        }
      }
    }
    goto LABEL_76;
  }
LABEL_37:
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 8))(v22);
  if (v21) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  if (v20) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  return result;
}

void *sub_1CC7D8ADC(_DWORD *a1, void *a2)
{
  uint64_t v8 = 0;
  char v4 = sub_1CC7D8B78((uint64_t)a1, a2, &v8);
  uint64_t v5 = v8;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CC7D8C2C(a1, (uint64_t)a2, a2, v8);
    void *v5 = *a2;
    *((_OWORD *)v5 + 3) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    v5[1] = 1;
    int64x2_t v6 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    *((int64x2_t *)v5 + 1) = v6;
    *((int64x2_t *)v5 + 2) = v6;
    v5[6] = v5 + 8;
    v5[7] = 0x400000000;
  }
  return v5;
}

uint64_t sub_1CC7D8B78(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_10;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  int v7 = (void *)(v3 + 96 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      int v7 = (void *)(v3 + 96 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_10;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_10:
  *a3 = v7;
  return result;
}

void *sub_1CC7D8C2C(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1CC7D8CF0((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CC7D8B78((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

void sub_1CC7D8CF0(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    int v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40) {
      unsigned int v2 = v6 + 1;
    }
    else {
      unsigned int v2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v12 = *(void *)(a1 + 8);
    unsigned int v13 = *(_DWORD *)(a1 + 16);
    if (v2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      *(void *)(a1 + 8) = operator new(96 * v2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v2;
    }
    sub_1CC7D8F54(a1, v12, v12 + 96 * v13);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v7 = 0;
  uint64_t v8 = (int64x2_t *)v15;
  int64x2_t v14 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    uint64_t v9 = a1 + v7;
    uint64_t v10 = *(void *)(a1 + v7 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v8->i64[0] = v10;
      v8->i64[1] = 1;
      v8[1] = v14;
      v8[2] = v14;
      sub_1CC008030(&v8->u32[2], (unsigned int *)(v9 + 16));
      v8[3].i64[0] = (uint64_t)v8[4].i64;
      v8[3].i64[1] = 0x400000000;
      if (*(_DWORD *)(v9 + 64)) {
        sub_1CBA6E388((uint64_t)v8[3].i64, (const void **)(a1 + v7 + 56));
      }
      unsigned int v11 = *(void **)(a1 + v7 + 56);
      if ((void *)(a1 + v7 + 72) != v11) {
        free(v11);
      }
      v8 += 6;
      if ((*(unsigned char *)(v9 + 16) & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)(a1 + v7 + 24), 8);
      }
    }
    v7 += 96;
  }
  while (v7 != 384);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(void *)(a1 + 8) = operator new(96 * v2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v2;
  }
  sub_1CC7D8F54(a1, (uint64_t)v15, (uint64_t)v8);
}

void sub_1CC7D8F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  int v6 = *(_DWORD *)a1;
  *(void *)a1 = *(_DWORD *)a1 & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(a1 + 8);
    uint64_t v9 = (void *)(a1 + 392);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    if (!v7) {
      goto LABEL_5;
    }
    uint64_t v8 = *(void **)(a1 + 8);
    uint64_t v9 = &v8[12 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 12;
  }
  while (v8 != v9);
LABEL_5:
  if (a2 != a3)
  {
    int64x2_t v13 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      if ((*(void *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int64x2_t v14 = 0;
        sub_1CC7D8B78(a1, (void *)v4, &v14);
        uint64_t v10 = v14;
        v14->i64[0] = *(void *)v4;
        v10->i64[1] = 1;
        v10[1] = v13;
        void v10[2] = v13;
        sub_1CC008030(&v10->u32[2], (unsigned int *)(v4 + 8));
        v10[3].i64[0] = (uint64_t)v10[4].i64;
        uint64_t i64 = (uint64_t)v10[3].i64;
        *(void *)(i64 + 8) = 0x400000000;
        if (*(_DWORD *)(v4 + 56)) {
          sub_1CBA6E388(i64, (const void **)(v4 + 48));
        }
        *(_DWORD *)a1 += 2;
        uint64_t v12 = *(void **)(v4 + 48);
        if ((void *)(v4 + 64) != v12) {
          free(v12);
        }
        if ((*(unsigned char *)(v4 + 8) & 1) == 0) {
          MEMORY[0x1D25D9CD0](*(void *)(v4 + 16), 8);
        }
      }
      v4 += 96;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1CC7D90BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 128))(&v17, a2, a1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 136))(&v16, a2, a1);
  uint64_t v11 = v16;
  uint64_t v10 = v17;
  if (v17)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v17 + 16))(&v17, v17);
    uint64_t v12 = v17;
    if (v11)
    {
LABEL_3:
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v11 + 16))(&v17, v11);
      uint64_t v13 = v17;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = 0;
    if (v16) {
      goto LABEL_3;
    }
  }
  uint64_t v13 = 0;
LABEL_9:
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 24))(v12, v13) & 1) == 0)
  {
    uint64_t v14 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12);
    if (v14 != a5) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 496))(a2, v14, a3, a4);
    }
    (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
  }
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
  if (v11) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  if (v10) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return result;
}

uint64_t sub_1CC7D935C(uint64_t a1)
{
  if ((*(unsigned char *)a1 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 8), 8);
  }
  return a1;
}

void sub_1CC7D939C(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v1 = a1 + 8;
    uint64_t v2 = 4;
  }
  else
  {
    uint64_t v2 = *(unsigned int *)(a1 + 16);
    if (!v2) {
      return;
    }
    uint64_t v1 = *(void *)(a1 + 8);
  }
  uint64_t v3 = 96 * v2;
  uint64_t v4 = (void *)(v1 + 64);
  do
  {
    uint64_t v5 = *(v4 - 8);
    if (v5 != -4096 && v5 != -8192)
    {
      int v6 = (void *)*(v4 - 2);
      if (v4 != v6) {
        free(v6);
      }
      if ((*(unsigned char *)(v4 - 7) & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(v4 - 6), 8);
      }
    }
    v4 += 12;
    v3 -= 96;
  }
  while (v3);
}

void sub_1CC7D9434(uint64_t a1)
{
}

uint64_t sub_1CC7D94D4(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDBAE0;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F261EEB8;
  *(unsigned char *)(a1 + 28) = a2;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDBAE8, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CC7D9434;
    v6[1] = &PassRegistry;
    uint64_t v5 = v6;
    std::__call_once(&qword_1EBCDBAE8, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC7D9588()
{
}

void sub_1CC7D95CC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC7D9604(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

uint64_t sub_1CC7D9654(uint64_t a1, uint64_t a2)
{
  uint64_t v335 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 239) < 0) {
    sub_1CB8BDF7C((uint64_t)&v314, *(const void **)(a2 + 216), *(void *)(a2 + 224));
  }
  else {
    std::string v314 = *(std::string *)(a2 + 216);
  }
  if (!std::string::compare(&v314, 0, 4uLL, "agx1"))
  {
    int v4 = 27;
  }
  else if (!std::string::compare(&v314, 0, 4uLL, "agx2"))
  {
    int v4 = 28;
  }
  else if (!std::string::compare(&v314, 0, 4uLL, "agx3"))
  {
    int v4 = 29;
  }
  else
  {
    int v4 = 0;
  }
  if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v314.__r_.__value_.__l.__data_);
  }
  if (v4 != 27)
  {
    uint64_t v300 = "Target triple must be set to agx0/agx1";
LABEL_635:
    llvm::report_fatal_error((llvm *)v300, (const llvm::Twine *)1);
  }
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  char v304 = (llvm::Module *)a2;
  if (v6 == v7)
  {
LABEL_16:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::FunctionGroupInfoWrapperPass::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_16;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  uint64_t v9 = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  (*(void (**)(uint64_t, llvm::Module *))(*(void *)v9 + 16))(v9, v304);
  if (*(unsigned char *)(a1 + 28)) {
    unsigned int v10 = 0x4000;
  }
  else {
    unsigned int v10 = 16416;
  }
  unsigned int v11 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v9 + 64))(v9) + 12);
  unint64_t v12 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(void *)v9 + 64))(v9) + 4);
  v327[0] = 1;
  for (uint64_t i = 1; i != 49; i += 12)
    v327[i] = -4096;
  if (v11 >= v10 || v11 == 0) {
    unsigned int v15 = v10;
  }
  else {
    unsigned int v15 = v11;
  }
  unsigned int v303 = v15;
  v309[0] = 0;
  v309[1] = 0;
  int v310 = 0;
  BOOL v312 = 0;
  uint64_t v313 = 0;
  long long __p = 0;
  sub_1CD0FEC94(v304, (uint64_t)v309);
  sub_1CD0FEFC4(v304, (uint64_t)v309, 0);
  uint64_t v328 = v330;
  uint64_t v329 = 0x1000000000;
  uint64_t v16 = (void *)*((void *)v304 + 2);
  unsigned int v306 = v12;
  if (v16 != (void *)((char *)v304 + 8))
  {
    unsigned int v17 = 0;
    do
    {
      if (v16) {
        unsigned int v18 = v16 - 7;
      }
      else {
        unsigned int v18 = 0;
      }
      if (v17 >= HIDWORD(v329)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v328 + v17) = v18;
      unsigned int v17 = v329 + 1;
      LODWORD(v329) = v329 + 1;
      uint64_t v16 = (void *)v16[1];
    }
    while (v16 != (void *)((char *)v304 + 8));
    int v19 = v328;
    if (v17)
    {
      uint64_t v301 = (char *)v328 + 8 * v17;
      while (1)
      {
        uint64_t v305 = v19;
        uint64_t v20 = (uint64_t ***)*v19;
        uint64_t v315 = &v319;
        uint64_t v316 = &v319;
        uint64_t v317 = 1;
        int v318 = 0;
        uint64_t v307 = v20;
        unsigned int v302 = v20 >> 4;
        if ((*((unsigned char *)v20 + 23) & 0x10) == 0) {
          goto LABEL_68;
        }
        uint64_t v21 = ***v20;
        uint64_t v22 = *(void *)(v21 + 152);
        uint64_t v23 = *(unsigned int *)(v21 + 168);
        if (v23)
        {
          LODWORD(v24) = (v23 - 1) & ((v20 >> 4) ^ (v20 >> 9));
          uint64_t v25 = (uint64_t ****)(v22 + 16 * v24);
          uint64_t v26 = *v25;
          if (*v25 != v20)
          {
            int v27 = 1;
            do
            {
              if (v26 == (uint64_t ***)-4096) {
                goto LABEL_47;
              }
              int v28 = v24 + v27++;
              uint64_t v24 = v28 & (v23 - 1);
              uint64_t v26 = *(uint64_t ****)(v22 + 16 * v24);
            }
            while (v26 != v20);
            uint64_t v25 = (uint64_t ****)(v22 + 16 * v24);
          }
        }
        else
        {
LABEL_47:
          uint64_t v25 = (uint64_t ****)(v22 + 16 * v23);
        }
        uint64_t v29 = (uint64_t *)v25[1];
        uint64_t v32 = *v29;
        uint64_t v30 = v29 + 2;
        uint64_t v31 = v32;
        if (v32 <= 21)
        {
          if (v31 == 14)
          {
            if (*v30 != 0x696C79642E636761 || *(void *)((char *)v30 + 6) != 0x657361625F62696CLL) {
              goto LABEL_68;
            }
LABEL_371:
            uint64_t v182 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
            uint64_t v183 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 56))(v9);
            uint64_t v38 = v316;
            while (2)
            {
              if (v182 == (uint64_t *)v183) {
                goto LABEL_186;
              }
              uint64_t v184 = *v182;
              uint64_t v185 = HIDWORD(v317);
              if (v38 == v315)
              {
                if (HIDWORD(v317))
                {
                  uint64_t v186 = 0;
                  uint64_t v187 = 8 * HIDWORD(v317);
                  unsigned int v188 = v38;
                  while (*v188 != v184)
                  {
                    if (*v188 == -2) {
                      uint64_t v186 = v188;
                    }
                    ++v188;
                    v187 -= 8;
                    if (!v187)
                    {
                      if (!v186) {
                        goto LABEL_381;
                      }
                      *uint64_t v186 = v184;
                      --v318;
                      goto LABEL_404;
                    }
                  }
                  goto LABEL_404;
                }
LABEL_381:
                unsigned int v189 = v317;
                if (HIDWORD(v317) < v317)
                {
                  ++HIDWORD(v317);
                  v38[v185] = v184;
LABEL_404:
                  uint64_t v38 = v316;
                  ++v182;
                  continue;
                }
              }
              else
              {
                unsigned int v189 = v317;
              }
              break;
            }
            if (3 * v189 <= 4 * (HIDWORD(v317) - v318))
            {
              if (v189 >= 0x40) {
                v189 *= 2;
              }
              else {
                unsigned int v189 = 128;
              }
            }
            else if (v189 - HIDWORD(v317) >= v189 >> 3)
            {
              goto LABEL_386;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v315, v189);
            unsigned int v189 = v317;
            uint64_t v38 = v316;
LABEL_386:
            unsigned int v190 = v189 - 1;
            unsigned int v191 = (v189 - 1) & ((v184 >> 4) ^ (v184 >> 9));
            uint64_t v192 = &v38[v191];
            uint64_t v193 = *v192;
            if (*v192 == -1)
            {
              uint64_t v194 = 0;
LABEL_398:
              if (v194) {
                uint64_t v192 = v194;
              }
              if (*v192 != v184)
              {
                if (*v192 == -2) {
                  --v318;
                }
                else {
                  ++HIDWORD(v317);
                }
                uint64_t *v192 = v184;
              }
            }
            else
            {
              uint64_t v194 = 0;
              int v195 = 1;
              while (v193 != v184)
              {
                if (v194) {
                  BOOL v196 = 0;
                }
                else {
                  BOOL v196 = v193 == -2;
                }
                if (v196) {
                  uint64_t v194 = v192;
                }
                unsigned int v197 = v191 + v195++;
                unsigned int v191 = v197 & v190;
                uint64_t v192 = &v38[v197 & v190];
                uint64_t v193 = *v192;
                if (*v192 == -1) {
                  goto LABEL_398;
                }
              }
            }
            goto LABEL_404;
          }
          if (v31 != 21) {
            goto LABEL_68;
          }
          uint64_t v33 = *(void *)((char *)v30 + 13);
          BOOL v34 = *v30 == 0x747865742E636761 && v30[1] == 0x706165685F657275;
          uint64_t v35 = 0x646165722E706165;
        }
        else
        {
          if (v31 != 22)
          {
            if (v31 == 26)
            {
              if (*v30 == 0x706D61732E636761
                && v30[1] == 0x64726F775F72656CLL
                && v30[2] == 0x657269646E695F73
                && *((_WORD *)v30 + 12) == 29795)
              {
                goto LABEL_371;
              }
            }
            else if (v31 == 38 && !memcmp(v30, "agc.texture_heap.texture_buffer_length", 0x26uLL))
            {
              goto LABEL_371;
            }
            goto LABEL_68;
          }
          uint64_t v33 = *(void *)((char *)v30 + 14);
          BOOL v34 = *v30 == 0x747865742E636761 && v30[1] == 0x706165685F657275;
          uint64_t v35 = 0x65746972772E7061;
        }
        if (v34 && v33 == v35) {
          goto LABEL_371;
        }
LABEL_68:
        unsigned int v37 = v20[1];
        uint64_t v38 = &v319;
        if (!v37) {
          goto LABEL_186;
        }
        do
        {
          unsigned int v39 = v37[3];
          char v331 = v333;
          HIDWORD(v332) = 16;
          v333[0] = v39;
          unsigned int v40 = 1;
          do
          {
            uint64_t v41 = *((void *)v331 + --v40);
            LODWORD(v332) = v40;
            unsigned int v42 = *(unsigned __int8 *)(v41 + 16);
            if (v42 <= 0xA && ((1 << v42) & 0x728) != 0)
            {
              for (uint64_t j = *(void *)(v41 + 8); j; uint64_t j = *(void *)(j + 8))
              {
                uint64_t v45 = *(void *)(j + 24);
                if (*(unsigned char *)(v45 + 16) != 84
                  || (uint64_t v46 = *(void *)(v45 - 32)) == 0
                  || *(unsigned char *)(v46 + 16)
                  || *(void *)(v46 + 24) != *(void *)(v45 + 72)
                  || (*(unsigned char *)(v46 + 33) & 0x20) == 0
                  || (int v47 = *(_DWORD *)(v46 + 36), (v47 - 1282) >= 0x190)
                  && (v47 - 2824) > 0xB
                  || *(void *)(v45 + 8))
                {
                  if (v40 >= HIDWORD(v332)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v331 + v40) = v45;
                  unsigned int v40 = v332 + 1;
                  LODWORD(v332) = v332 + 1;
                }
              }
              goto LABEL_171;
            }
            if (v42 >= 0x1C)
            {
              uint64_t v48 = (*(uint64_t (**)(uint64_t, void))(*(void *)v9 + 24))(v9, *(void *)(*(void *)(v41 + 40) + 56));
              uint64_t v49 = v48;
              uint64_t v50 = v316;
              uint64_t v51 = HIDWORD(v317);
              if (v316 != v315)
              {
                unsigned int v55 = v317;
                goto LABEL_101;
              }
              if (HIDWORD(v317))
              {
                unsigned int v52 = 0;
                uint64_t v53 = 8 * HIDWORD(v317);
                unsigned int v54 = v316;
                do
                {
                  if (*v54 == v48) {
                    goto LABEL_122;
                  }
                  if (*v54 == -2) {
                    unsigned int v52 = v54;
                  }
                  ++v54;
                  v53 -= 8;
                }
                while (v53);
                if (v52)
                {
                  *unsigned int v52 = v48;
                  --v318;
                  goto LABEL_122;
                }
              }
              unsigned int v55 = v317;
              if (HIDWORD(v317) < v317)
              {
                ++HIDWORD(v317);
                v316[v51] = v48;
                goto LABEL_122;
              }
LABEL_101:
              if (3 * v55 <= 4 * (HIDWORD(v317) - v318))
              {
                if (v55 >= 0x40) {
                  v55 *= 2;
                }
                else {
                  unsigned int v55 = 128;
                }
              }
              else if (v55 - HIDWORD(v317) >= v55 >> 3)
              {
LABEL_103:
                unsigned int v56 = v55 - 1;
                unsigned int v57 = (v55 - 1) & ((v49 >> 4) ^ (v49 >> 9));
                int v58 = &v50[v57];
                uint64_t v59 = *v58;
                if (*v58 == -1)
                {
                  unsigned int v60 = 0;
LABEL_115:
                  if (v60) {
                    uint64_t v64 = v60;
                  }
                  else {
                    uint64_t v64 = v58;
                  }
                  if (*v64 != v49)
                  {
                    if (*v64 == -2) {
                      --v318;
                    }
                    else {
                      ++HIDWORD(v317);
                    }
                    uint64_t *v64 = v49;
                  }
                }
                else
                {
                  unsigned int v60 = 0;
                  int v61 = 1;
                  while (v59 != v49)
                  {
                    if (v60) {
                      BOOL v62 = 0;
                    }
                    else {
                      BOOL v62 = v59 == -2;
                    }
                    if (v62) {
                      unsigned int v60 = v58;
                    }
                    unsigned int v63 = v57 + v61++;
                    unsigned int v57 = v63 & v56;
                    int v58 = &v50[v63 & v56];
                    uint64_t v59 = *v58;
                    if (*v58 == -1) {
                      goto LABEL_115;
                    }
                  }
                }
LABEL_122:
                (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v49 + 72))(v326, v49);
                (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v49 + 80))(v324, v49);
                uint64_t v65 = v326[0];
                uint64_t v66 = v324[0];
                if (v326[0])
                {
                  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v326[0] + 16))(v326, v326[0]);
                  uint64_t v67 = v326[0];
                  if (v66)
                  {
LABEL_124:
                    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v66 + 16))(v326, v66);
                    uint64_t v68 = v326[0];
                    goto LABEL_125;
                  }
                }
                else
                {
                  uint64_t v67 = 0;
                  if (v324[0]) {
                    goto LABEL_124;
                  }
                }
                uint64_t v68 = 0;
LABEL_125:
                if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v67 + 24))(v67, v68))
                {
                  if (v68) {
                    (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
                  }
                  (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
                  if (v66) {
                    (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
                  }
                  if (v65) {
                    (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
                  }
LABEL_171:
                  unsigned int v40 = v332;
                  continue;
                }
                unsigned int v69 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v67 + 32))(v67);
                uint64_t v70 = (*(uint64_t (**)(uint64_t, void))(*(void *)v9 + 24))(v9, *v69);
                uint64_t v71 = v70;
                uint64_t v72 = v316;
                uint64_t v73 = HIDWORD(v317);
                if (v316 == v315)
                {
                  if (HIDWORD(v317))
                  {
                    BOOL v74 = 0;
                    uint64_t v75 = 8 * HIDWORD(v317);
                    uint64_t v76 = v316;
                    while (*v76 != v70)
                    {
                      if (*v76 == -2) {
                        BOOL v74 = v76;
                      }
                      ++v76;
                      v75 -= 8;
                      if (!v75)
                      {
                        if (!v74) {
                          goto LABEL_134;
                        }
                        *BOOL v74 = v70;
                        --v318;
                        goto LABEL_158;
                      }
                    }
                    goto LABEL_158;
                  }
LABEL_134:
                  unsigned int v77 = v317;
                  if (HIDWORD(v317) < v317)
                  {
                    ++HIDWORD(v317);
                    v316[v73] = v70;
LABEL_158:
                    (*(void (**)(uint64_t))(*(void *)v67 + 40))(v67);
                    goto LABEL_125;
                  }
                }
                else
                {
                  unsigned int v77 = v317;
                }
                if (3 * v77 <= 4 * (HIDWORD(v317) - v318))
                {
                  if (v77 >= 0x40) {
                    v77 *= 2;
                  }
                  else {
                    unsigned int v77 = 128;
                  }
                }
                else if (v77 - HIDWORD(v317) >= v77 >> 3)
                {
                  goto LABEL_139;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v315, v77);
                unsigned int v77 = v317;
                uint64_t v72 = v316;
LABEL_139:
                unsigned int v78 = v77 - 1;
                unsigned int v79 = (v77 - 1) & ((v71 >> 4) ^ (v71 >> 9));
                uint64_t v80 = &v72[v79];
                uint64_t v81 = *v80;
                if (*v80 == -1)
                {
                  uint64_t v82 = 0;
LABEL_151:
                  if (v82) {
                    uint64_t v86 = v82;
                  }
                  else {
                    uint64_t v86 = v80;
                  }
                  if (*v86 != v71)
                  {
                    if (*v86 == -2) {
                      --v318;
                    }
                    else {
                      ++HIDWORD(v317);
                    }
                    *uint64_t v86 = v71;
                  }
                }
                else
                {
                  uint64_t v82 = 0;
                  int v83 = 1;
                  while (v81 != v71)
                  {
                    if (v82) {
                      BOOL v84 = 0;
                    }
                    else {
                      BOOL v84 = v81 == -2;
                    }
                    if (v84) {
                      uint64_t v82 = v80;
                    }
                    unsigned int v85 = v79 + v83++;
                    unsigned int v79 = v85 & v78;
                    uint64_t v80 = &v72[v85 & v78];
                    uint64_t v81 = *v80;
                    if (*v80 == -1) {
                      goto LABEL_151;
                    }
                  }
                }
                goto LABEL_158;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v315, v55);
              unsigned int v55 = v317;
              uint64_t v50 = v316;
              goto LABEL_103;
            }
          }
          while (v40);
          if (v331 != v333) {
            free(v331);
          }
          unsigned int v37 = (uint64_t **)v37[1];
        }
        while (v37);
        uint64_t v38 = v316;
LABEL_186:
        uint64_t v87 = v315;
        uint64_t v88 = (uint64_t *)((char *)&v317 + 4);
        if (v38 != v315) {
          uint64_t v88 = &v317;
        }
        uint64_t v89 = *(unsigned int *)v88;
        unsigned int v90 = (void **)v38;
        if (v89)
        {
          uint64_t v91 = 0;
          while ((unint64_t)v38[v91] >= 0xFFFFFFFFFFFFFFFELL)
          {
            if (v89 == ++v91) {
              goto LABEL_356;
            }
          }
          unsigned int v90 = (void **)&v38[v91];
        }
        unsigned int v92 = (void **)&v38[v89];
        if (v90 == v92) {
          goto LABEL_356;
        }
        unint64_t v93 = v307;
        unsigned int v94 = v302 ^ (v307 >> 9);
        uint64_t v95 = *v90;
LABEL_196:
        int v96 = *v93;
        if ((*((unsigned char *)v93 + 34) & 0x40) == 0)
        {
          BOOL v97 = 0;
          uint64_t v98 = 0;
          goto LABEL_201;
        }
        uint64_t v99 = **v96;
        char v331 = v93;
        int v100 = *(_DWORD *)(v99 + 2520);
        if (!v100)
        {
          unsigned int v175 = 0;
LABEL_336:
          int v104 = sub_1CC5BF31C(v99 + 2504, (uint64_t)&v331, (uint64_t *)&v331, v175);
          uint64_t v176 = v331;
          v104[1] = 0;
          v104[2] = 0;
          void *v104 = v176;
          goto LABEL_200;
        }
        uint64_t v101 = *(void *)(v99 + 2504);
        int v102 = v100 - 1;
        unsigned int v103 = v102 & v94;
        int v104 = (void *)(v101 + 24 * (v102 & v94));
        unint64_t v105 = (void *)*v104;
        if ((uint64_t ***)*v104 != v93)
        {
          unsigned int v127 = 0;
          int v128 = 1;
          while (v105 != (void *)-4096)
          {
            if (v127) {
              BOOL v129 = 0;
            }
            else {
              BOOL v129 = v105 == (void *)-8192;
            }
            if (v129) {
              unsigned int v127 = v104;
            }
            unsigned int v130 = v103 + v128++;
            unsigned int v103 = v130 & v102;
            int v104 = (void *)(v101 + 24 * v103);
            unint64_t v105 = (void *)*v104;
            if ((uint64_t ***)*v104 == v307) {
              goto LABEL_200;
            }
          }
          if (v127) {
            unsigned int v175 = v127;
          }
          else {
            unsigned int v175 = v104;
          }
          goto LABEL_336;
        }
LABEL_200:
        BOOL v97 = (uint64_t *)v104[1];
        uint64_t v98 = v104[2];
        int v96 = *v307;
LABEL_201:
        int v106 = *((_DWORD *)v96 + 2) >> 8;
        if (v106 != 2)
        {
          if (v106 == 3)
          {
            switch(v98)
            {
              case 8:
                if (*v97 != 0x6C61636F6C5F6C63) {
                  goto LABEL_275;
                }
                uint64_t v110 = 12;
                goto LABEL_348;
              case 10:
                uint64_t v138 = *v97;
                int v139 = *((unsigned __int16 *)v97 + 4);
                if (v138 != 0x69727261625F6C63 || v139 != 29285) {
                  goto LABEL_275;
                }
                uint64_t v136 = (uint64_t)v95;
                uint64_t v137 = 20;
                goto LABEL_345;
              case 13:
                if (*v97 == 0x70756F72675F6C63 && *(uint64_t *)((char *)v97 + 5) == 0x785F64695F70756FLL)
                {
                  uint64_t v136 = (uint64_t)v95;
                  uint64_t v137 = 21;
                }
                else if (*v97 == 0x70756F72675F6C63 && *(uint64_t *)((char *)v97 + 5) == 0x795F64695F70756FLL)
                {
                  uint64_t v136 = (uint64_t)v95;
                  uint64_t v137 = 22;
                }
                else
                {
                  uint64_t v133 = *v97;
                  uint64_t v134 = *(uint64_t *)((char *)v97 + 5);
                  if (v133 != 0x70756F72675F6C63 || v134 != 0x7A5F64695F70756FLL)
                  {
LABEL_275:
                    uint64_t v110 = 9;
                    goto LABEL_348;
                  }
                  uint64_t v136 = (uint64_t)v95;
                  uint64_t v137 = 23;
                }
LABEL_345:
                llvm::FunctionGroup::setGlobalResource(v136, v137, (uint64_t)v307);
                break;
              case 17:
                uint64_t v141 = *v97;
                uint64_t v142 = v97[1];
                int v143 = *((unsigned __int8 *)v97 + 16);
                if (v141 != 0x6C61636F6C5F6C63 || v142 != 0x616E7265746E695FLL || v143 != 108) {
                  goto LABEL_275;
                }
                uint64_t v110 = 13;
                goto LABEL_348;
              default:
                goto LABEL_275;
            }
          }
          else
          {
            if (v106 != 64)
            {
              v324[0] = (uint64_t)"Global variables in address space ";
              __int16 v325 = 259;
              __int16 v323 = 264;
              LODWORD(v322[0]) = v106;
              sub_1CD3E3950(v324, v322, (uint64_t)v326);
              uint64_t v320 = " are not valid.";
              __int16 v321 = 259;
              sub_1CD3E3950(v326, (uint64_t *)&v320, (uint64_t)&v331);
              llvm::report_fatal_error((llvm *)&v331, (const llvm::Twine *)1);
            }
            switch(v98)
            {
              case 11:
                uint64_t v107 = *v97;
                uint64_t v108 = *(uint64_t *)((char *)v97 + 3);
                if (v107 != 0x74735F6567616D69 || v108 != 0x65746174735F6567) {
                  goto LABEL_636;
                }
                uint64_t v110 = 0;
                goto LABEL_348;
              case 12:
                uint64_t v149 = *v97;
                int v150 = *((_DWORD *)v97 + 2);
                if (v149 != 0x635F79726F6D656DLL || v150 != 1701340001) {
                  goto LABEL_636;
                }
                uint64_t v110 = 6;
                goto LABEL_348;
              case 13:
                uint64_t v159 = *v97;
                uint64_t v160 = *(uint64_t *)((char *)v97 + 5);
                if (v159 != 0x5F72656C706D6173 || v160 != 0x65746174735F7265) {
                  goto LABEL_636;
                }
                uint64_t v110 = 1;
                goto LABEL_348;
              case 15:
                if (*v97 == 0x625F726566667562 && *(uint64_t *)((char *)v97 + 7) == 0x73676E69646E6962)
                {
                  uint64_t v110 = 3;
                  goto LABEL_348;
                }
                uint64_t v163 = *v97;
                uint64_t v164 = *(uint64_t *)((char *)v97 + 7);
                if (v163 != 0x746E6174736E6F63 || v164 != 0x7265766972645F74) {
                  goto LABEL_636;
                }
                char v331 = v307;
                uint64_t v166 = sub_1CC782500(v309, &v331);
                if (v166)
                {
                  BOOL v167 = (uint64_t *)(v166 - 8 * *(unsigned int *)(v166 + 8));
                  uint64_t v169 = *v167;
                  uint64_t v168 = v167[1];
                  if (*(unsigned char *)(*(void *)(*(void *)(v169 + 128) + 24) + 8) != 17) {
                    goto LABEL_324;
                  }
                  if (*(unsigned char *)v168 != 1 || (uint64_t v170 = *(void *)(v168 + 128), *(unsigned char *)(v170 + 16) != 16))
                  {
                    uint64_t v168 = *(void *)(v168 - 8 * *(unsigned int *)(v168 + 8));
LABEL_324:
                    uint64_t v170 = *(void *)(v168 + 128);
                  }
                  uint64_t v171 = (void *)(v170 + 24);
                  if (*(_DWORD *)(v170 + 32) >= 0x41u) {
                    uint64_t v171 = (void *)*v171;
                  }
                  int v172 = *(_DWORD *)v171;
                  int v173 = sub_1CD1134B8((uint64_t)v307, 1);
                  if (v172 != 18 && v173 == 0)
                  {
                    uint64_t v110 = 4;
                    goto LABEL_348;
                  }
                  goto LABEL_347;
                }
                if ((sub_1CD1134B8((uint64_t)v307, 1) & 1) == 0) {
                  goto LABEL_349;
                }
LABEL_347:
                uint64_t v110 = 2;
                goto LABEL_348;
              case 16:
                uint64_t v147 = *v97;
                uint64_t v146 = v97[1];
                if (v147 != 0x695F646165726874 || v146 != 0x746E61697261766ELL) {
                  goto LABEL_636;
                }
                uint64_t v110 = 7;
                goto LABEL_348;
              case 17:
                if (*v97 == 0x705F726576697264 && v97[1] == 0x726574656D617261 && *((unsigned char *)v97 + 16) == 115)
                {
                  uint64_t v110 = 5;
                }
                else
                {
                  uint64_t v154 = *v97;
                  uint64_t v155 = v97[1];
                  int v156 = *((unsigned __int8 *)v97 + 16);
                  if (v154 != 0x746E6174736E6F63 || v155 != 0x6C61726574696C5FLL || v156 != 115)
                  {
LABEL_636:
                    uint64_t v300 = "Unknown section on a global variable";
                    goto LABEL_635;
                  }
                  uint64_t v110 = 8;
                }
LABEL_348:
                (*(void (**)(void *, uint64_t, uint64_t ***))(*(void *)v95 + 144))(v95, v110, v307);
                break;
              default:
                goto LABEL_636;
            }
          }
          goto LABEL_349;
        }
        if (*((unsigned char *)v307 + 16))
        {
          if (*((unsigned char *)v307 + 16) == 3 && (*((_DWORD *)v307 + 5) & 0x7FFFFFF) == 0)
          {
            int v111 = *((_DWORD *)v307 + 8);
            goto LABEL_220;
          }
LABEL_222:
          char v331 = v95;
          unint64_t v112 = sub_1CC7D8ADC(v327, &v331);
          char v113 = *((unsigned char *)v112 + 8);
          v326[0] = (uint64_t)v307;
          if (v113)
          {
            uint64_t v114 = v112 + 2;
            int v115 = 4;
            goto LABEL_224;
          }
          int v115 = *((_DWORD *)v112 + 6);
          if (!v115)
          {
            uint64_t v124 = 0;
            goto LABEL_237;
          }
          uint64_t v114 = (void *)v112[2];
LABEL_224:
          int v116 = v115 - 1;
          unsigned int v117 = v116 & v94;
          uint64_t v118 = &v114[v116 & v94];
          uint64_t v119 = (void *)*v118;
          if (v307 != (uint64_t ***)*v118)
          {
            char v120 = 0;
            int v121 = 1;
            while (v119 != (void *)-4096)
            {
              if (v120) {
                BOOL v122 = 0;
              }
              else {
                BOOL v122 = v119 == (void *)-8192;
              }
              if (v122) {
                char v120 = v118;
              }
              unsigned int v123 = v117 + v121++;
              unsigned int v117 = v123 & v116;
              uint64_t v118 = &v114[v117];
              uint64_t v119 = (void *)*v118;
              if (v307 == (uint64_t ***)*v118) {
                goto LABEL_349;
              }
            }
            if (v120) {
              uint64_t v124 = v120;
            }
            else {
              uint64_t v124 = v118;
            }
LABEL_237:
            uint64_t v125 = sub_1CC0101A4((uint64_t)(v112 + 1), (uint64_t)v326, v326, v124);
            *uint64_t v125 = v326[0];
            unint64_t v126 = *((unsigned int *)v112 + 14);
            if (v126 >= *((unsigned int *)v112 + 15)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(v112[6] + 8 * v126) = v326[0];
            ++*((_DWORD *)v112 + 14);
          }
        }
        else
        {
          if (v307[9] != (uint64_t **)(v307 + 9)) {
            goto LABEL_222;
          }
          int v111 = *((_DWORD *)v307 + 8);
          if ((v111 & 0x800000) != 0) {
            goto LABEL_222;
          }
LABEL_220:
          if ((v111 & 0xF) == 0 && !v98) {
            goto LABEL_222;
          }
        }
LABEL_349:
        uint64_t v177 = (unint64_t *)(v90 + 1);
        while (v177 != (unint64_t *)v92)
        {
          unint64_t v178 = *v177++;
          uint64_t v95 = (void *)v178;
          if (v178 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            unsigned int v90 = (void **)(v177 - 1);
            unint64_t v93 = v307;
            goto LABEL_196;
          }
        }
        uint64_t v87 = v315;
        uint64_t v38 = v316;
LABEL_356:
        if (v38 != v87) {
          free(v38);
        }
        int v19 = v305 + 1;
        if (v305 + 1 == (void *)v301)
        {
          int v19 = v328;
          break;
        }
      }
    }
    if (v19 != (void *)v330) {
      free(v19);
    }
  }
  int v199 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
  uint64_t v308 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 56))(v9);
  int v200 = v304;
  if (v199 != (uint64_t *)v308)
  {
    uint64_t v201 = (uint64_t)v304 + 272;
    unint64_t v202 = v12 >> 2;
    do
    {
      uint64_t v203 = *v199;
      sub_1CC7D90BC(0, *v199, v201, 0, 0);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v203 + 440))(v203) > v12)
      {
        uint64_t v300 = "Ran out of shared registers after textures";
        goto LABEL_635;
      }
      sub_1CC7D90BC(1, v203, v201, 1, 0);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v203 + 440))(v203) > v12)
      {
        uint64_t v300 = "Ran out of shared registers after samplers";
        goto LABEL_635;
      }
      char v331 = v333;
      uint64_t v332 = 0x800000000;
      llvm::Module::getModuleFlagsMetadata(v200, (uint64_t)&v331);
      if (v332)
      {
        uint64_t v204 = (uint64_t *)((char *)v331 + 16);
        uint64_t v205 = 24 * v332;
        while (1)
        {
          uint64_t v206 = *(void *)(*(v204 - 1) + 8);
          if (*(void *)v206 == 9)
          {
            uint64_t v207 = *(void *)(v206 + 24);
            uint64_t v208 = *(unsigned __int8 *)(v206 + 32);
            if (*(void *)"PIC Level" == v207 && aPicLevel[8] == v208) {
              break;
            }
          }
          v204 += 3;
          v205 -= 24;
          if (!v205) {
            goto LABEL_434;
          }
        }
        uint64_t v210 = *v204;
      }
      else
      {
LABEL_434:
        uint64_t v210 = 0;
      }
      if (v331 == v333)
      {
        if (!v210) {
          goto LABEL_437;
        }
      }
      else
      {
        free(v331);
        if (!v210) {
          goto LABEL_437;
        }
      }
      uint64_t v259 = *(void *)(v210 + 128);
      int v260 = (void *)(v259 + 24);
      if (*(_DWORD *)(v259 + 32) >= 0x41u) {
        int v260 = (void *)*v260;
      }
      if (!*(_DWORD *)v260) {
LABEL_437:
      }
        sub_1CC7D90BC(2, v203, v201, 2, 0);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v203 + 440))(v203) > v12
        || (sub_1CC7D90BC(4, v203, v201, 3, 0),
            (*(unsigned int (**)(uint64_t))(*(void *)v203 + 440))(v203) > v12))
      {
        uint64_t v300 = "Ran out of shared registers after driver constants";
        goto LABEL_635;
      }
      sub_1CC7DC460(v200, v203, v12, v201);
      sub_1CC7D90BC(5, v203, v201, 5, 0);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v203 + 440))(v203) > v12)
      {
        uint64_t v300 = "Ran out of shared registers after parameters";
        goto LABEL_635;
      }
      uint64_t v211 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v203 + 176))(v203, 17);
      if (v211)
      {
        if (v211 == 1)
        {
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v203 + 128))(&v331, v203, 17);
          uint64_t v281 = *(void *)(*(uint64_t (**)(void *))(*(void *)v331 + 32))(v331);
          uint64_t v282 = v331;
          char v331 = 0;
          if (v282) {
            (*(void (**)(void *))(*(void *)v282 + 8))(v282);
          }
          if (v281) {
            goto LABEL_576;
          }
        }
        else
        {
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v203 + 128))(&v331, v203, 17);
          uint64_t v281 = *(void *)(*(uint64_t (**)(void *))(*(void *)v331 + 32))(v331);
          size_t v293 = v331;
          char v331 = 0;
          if (v293) {
            (*(void (**)(void *))(*(void *)v293 + 8))(v293);
          }
          int v200 = v304;
          LODWORD(v12) = v306;
          if (v281) {
LABEL_576:
          }
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v203 + 496))(v203, v281, v201, 5);
        }
      }
      sub_1CC7D90BC(7, v203, v201, 8, 0);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v203 + 440))(v203) > v12)
      {
        uint64_t v300 = "Ran out of shared registers after invariants";
        goto LABEL_635;
      }
      sub_1CC7D90BC(6, v203, v201, 7, 0);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v203 + 440))(v203) > v12)
      {
        uint64_t v300 = "Ran out of shared registers after promoted buffers";
        goto LABEL_635;
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, void, void, uint64_t))(*(void *)v203 + 8))(v203, 19, v202, 1, 0, 0, 5);
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, void, void, uint64_t))(*(void *)v203 + 8))(v203, 20, v202, 1, 0, 0, 5);
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v203 + 128))(&v328, v203, 8);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v203 + 136))(v326, v203, 8);
      if (v328)
      {
        (*(void (**)(void **__return_ptr))(*(void *)v328 + 16))(&v331);
        int v212 = v331;
      }
      else
      {
        int v212 = 0;
      }
      if (((*(uint64_t (**)(void *, uint64_t))(*(void *)v212 + 24))(v212, v326[0]) & 1) == 0)
      {
        do
        {
          unint64_t v223 = (void **)(*(uint64_t (**)(void *))(*(void *)v212 + 32))(v212);
          BOOL v224 = *v223;
          if (!*v223) {
            goto LABEL_482;
          }
          if (v224[16])
          {
            if (v224[16] != 3 || (*((_DWORD *)v224 + 5) & 0x7FFFFFF) != 0) {
              goto LABEL_474;
            }
            int v225 = *((_DWORD *)v224 + 8);
          }
          else
          {
            if (*((unsigned char **)v224 + 9) != v224 + 72) {
              goto LABEL_474;
            }
            int v225 = *((_DWORD *)v224 + 8);
            if ((v225 & 0x800000) != 0) {
              goto LABEL_474;
            }
          }
          if ((v225 & 0xF) != 0) {
            goto LABEL_627;
          }
          if ((v225 & 0x400000) != 0)
          {
            uint64_t v226 = ***(void ***)v224;
            char v331 = *v223;
            int v227 = *(_DWORD *)(v226 + 2520);
            if (v227)
            {
              uint64_t v228 = *(void *)(v226 + 2504);
              int v229 = v227 - 1;
              unsigned int v230 = v229 & ((v224 >> 4) ^ (v224 >> 9));
              uint64_t v231 = (void *)(v228 + 24 * v230);
              uint64_t v232 = (unsigned char *)*v231;
              if ((unsigned char *)*v231 == v224) {
                goto LABEL_473;
              }
              int v234 = 0;
              int v235 = 1;
              while (v232 != (unsigned char *)-4096)
              {
                if (v234) {
                  BOOL v236 = 0;
                }
                else {
                  BOOL v236 = v232 == (unsigned char *)-8192;
                }
                if (v236) {
                  int v234 = v231;
                }
                unsigned int v237 = v230 + v235++;
                unsigned int v230 = v237 & v229;
                uint64_t v231 = (void *)(v228 + 24 * v230);
                uint64_t v232 = (unsigned char *)*v231;
                if ((unsigned char *)*v231 == v224) {
                  goto LABEL_473;
                }
              }
              if (v234) {
                int v238 = v234;
              }
              else {
                int v238 = v231;
              }
            }
            else
            {
              int v238 = 0;
            }
            uint64_t v231 = sub_1CC5BF31C(v226 + 2504, (uint64_t)&v331, (uint64_t *)&v331, v238);
            uint64_t v239 = v331;
            v231[1] = 0;
            v231[2] = 0;
            *uint64_t v231 = v239;
LABEL_473:
            if (v231[2])
            {
LABEL_627:
              uint64_t v300 = "Expect a global variable with an initializer or an external global variable declaration.";
              goto LABEL_635;
            }
          }
LABEL_474:
          uint64_t v233 = (*(uint64_t (**)(uint64_t))(*(void *)v203 + 312))(v203);
          (*(void (**)(uint64_t, unsigned char *, uint64_t, void, uint64_t))(*(void *)v203 + 416))(v203, v224, v233, 0, 9);
          if (v224[16])
          {
            if (v224[16] != 3 || (*((_DWORD *)v224 + 5) & 0x7FFFFFF) != 0) {
              goto LABEL_481;
            }
          }
          else if (*((unsigned char **)v224 + 9) != v224 + 72 || (v224[34] & 0x80) != 0)
          {
LABEL_481:
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)v203 + 544))(v203, *((void *)v224 - 4), v201);
            goto LABEL_482;
          }
          (*(void (**)(uint64_t, unsigned char *))(*(void *)v203 + 552))(v203, v224);
LABEL_482:
          (*(void (**)(void *))(*(void *)v212 + 40))(v212);
        }
        while (!(*(unsigned int (**)(void *, uint64_t))(*(void *)v212 + 24))(v212, v326[0]));
      }
      (*(void (**)(void *))(*(void *)v212 + 8))(v212);
      uint64_t v213 = v326[0];
      v326[0] = 0;
      if (v213) {
        (*(void (**)(uint64_t))(*(void *)v213 + 8))(v213);
      }
      unsigned int v214 = v328;
      uint64_t v328 = 0;
      if (v214) {
        (*(void (**)(void *))(*(void *)v214 + 8))(v214);
      }
      int v215 = (*(uint64_t (**)(uint64_t))(*(void *)v203 + 440))(v203);
      char v331 = v333;
      uint64_t v332 = 0x800000000;
      llvm::Module::getModuleFlagsMetadata(v200, (uint64_t)&v331);
      if (v332)
      {
        BOOL v216 = (uint64_t *)((char *)v331 + 16);
        uint64_t v217 = 24 * v332;
        while (1)
        {
          uint64_t v218 = *(void *)(*(v216 - 1) + 8);
          if (*(void *)v218 == 9)
          {
            uint64_t v219 = *(void *)(v218 + 24);
            uint64_t v220 = *(unsigned __int8 *)(v218 + 32);
            if (*(void *)"PIC Level" == v219 && aPicLevel[8] == v220) {
              break;
            }
          }
          v216 += 3;
          v217 -= 24;
          if (!v217) {
            goto LABEL_498;
          }
        }
        uint64_t v222 = *v216;
      }
      else
      {
LABEL_498:
        uint64_t v222 = 0;
      }
      if (v331 == v333)
      {
        if (!v222) {
          goto LABEL_501;
        }
      }
      else
      {
        free(v331);
        if (!v222) {
          goto LABEL_501;
        }
      }
      uint64_t v261 = *(void *)(v222 + 128);
      uint64_t v262 = (void *)(v261 + 24);
      if (*(_DWORD *)(v261 + 32) >= 0x41u) {
        uint64_t v262 = (void *)*v262;
      }
      if (!*(_DWORD *)v262)
      {
LABEL_501:
        v324[0] = v203;
        uint64_t v240 = (void **)sub_1CC7D8ADC(v327, v324)[6];
        v322[0] = v203;
        uint64_t v241 = sub_1CC7D8ADC(v327, v322);
        uint64_t v242 = v241[6] + 8 * *((unsigned int *)v241 + 14);
        while (v240 != (void **)v242)
        {
          uint64_t v243 = *v240;
          if (!*v240) {
            goto LABEL_523;
          }
          if (v243[16])
          {
            if (v243[16] != 3 || (*((_DWORD *)v243 + 5) & 0x7FFFFFF) != 0) {
              goto LABEL_515;
            }
            int v244 = *((_DWORD *)v243 + 8);
          }
          else
          {
            if (*((unsigned char **)v243 + 9) != v243 + 72) {
              goto LABEL_515;
            }
            int v244 = *((_DWORD *)v243 + 8);
            if ((v244 & 0x800000) != 0) {
              goto LABEL_515;
            }
          }
          if ((v244 & 0xF) != 0) {
            goto LABEL_627;
          }
          if ((v244 & 0x400000) != 0)
          {
            uint64_t v245 = ***(void ***)v243;
            char v331 = *v240;
            int v246 = *(_DWORD *)(v245 + 2520);
            if (v246)
            {
              uint64_t v247 = *(void *)(v245 + 2504);
              int v248 = v246 - 1;
              unsigned int v249 = v248 & ((v243 >> 4) ^ (v243 >> 9));
              unint64_t v250 = (void *)(v247 + 24 * v249);
              int v251 = (unsigned char *)*v250;
              if ((unsigned char *)*v250 == v243) {
                goto LABEL_514;
              }
              uint64_t v253 = 0;
              int v254 = 1;
              while (v251 != (unsigned char *)-4096)
              {
                if (v253) {
                  BOOL v255 = 0;
                }
                else {
                  BOOL v255 = v251 == (unsigned char *)-8192;
                }
                if (v255) {
                  uint64_t v253 = v250;
                }
                unsigned int v256 = v249 + v254++;
                unsigned int v249 = v256 & v248;
                unint64_t v250 = (void *)(v247 + 24 * v249);
                int v251 = (unsigned char *)*v250;
                if ((unsigned char *)*v250 == v243) {
                  goto LABEL_514;
                }
              }
              if (v253) {
                int v257 = v253;
              }
              else {
                int v257 = v250;
              }
            }
            else
            {
              int v257 = 0;
            }
            unint64_t v250 = sub_1CC5BF31C(v245 + 2504, (uint64_t)&v331, (uint64_t *)&v331, v257);
            uint64_t v258 = v331;
            v250[1] = 0;
            v250[2] = 0;
            *unint64_t v250 = v258;
LABEL_514:
            if (v250[2]) {
              goto LABEL_627;
            }
          }
LABEL_515:
          uint64_t v252 = (*(uint64_t (**)(uint64_t))(*(void *)v203 + 312))(v203);
          (*(void (**)(uint64_t, unsigned char *, uint64_t, void, uint64_t))(*(void *)v203 + 416))(v203, v243, v252, 0, 9);
          if (v243[16])
          {
            if (v243[16] == 3 && (*((_DWORD *)v243 + 5) & 0x7FFFFFF) == 0) {
              goto LABEL_521;
            }
          }
          else if (*((unsigned char **)v243 + 9) == v243 + 72 && (v243[34] & 0x80) == 0)
          {
LABEL_521:
            (*(void (**)(uint64_t, unsigned char *))(*(void *)v203 + 552))(v203, v243);
            goto LABEL_523;
          }
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)v203 + 544))(v203, *((void *)v243 - 4), v201);
LABEL_523:
          ++v240;
        }
      }
      int v263 = (*(uint64_t (**)(uint64_t))(*(void *)v203 + 440))(v203);
      (*(void (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*(void *)v203 + 8))(v203, 7, (v263 - v215), 1, 0, 1, 3);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v203 + 440))(v203) > v306)
      {
        uint64_t v300 = "Ran out of shared registers after constant literals";
        goto LABEL_635;
      }
      uint64_t v264 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v203 + 176))(v203, 21);
      if (v264)
      {
        if (v264 == 1)
        {
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v203 + 128))(&v331, v203, 21);
          uint64_t v283 = *(void *)(*(uint64_t (**)(void *))(*(void *)v331 + 32))(v331);
          uint64_t v284 = v331;
          char v331 = 0;
          if (v284) {
            (*(void (**)(void *))(*(void *)v284 + 8))(v284);
          }
          if (v283) {
            goto LABEL_581;
          }
        }
        else
        {
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v203 + 128))(&v331, v203, 21);
          uint64_t v283 = *(void *)(*(uint64_t (**)(void *))(*(void *)v331 + 32))(v331);
          uint64_t v294 = v331;
          char v331 = 0;
          if (v294) {
            (*(void (**)(void *))(*(void *)v294 + 8))(v294);
          }
          int v200 = v304;
          if (v283) {
LABEL_581:
          }
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v203 + 496))(v203, v283, v201, 11);
        }
      }
      uint64_t v265 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v203 + 176))(v203, 22);
      if (!v265) {
        goto LABEL_550;
      }
      if (v265 == 1)
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v203 + 128))(&v331, v203, 22);
        uint64_t v285 = *(void *)(*(uint64_t (**)(void *))(*(void *)v331 + 32))(v331);
        uint64_t v286 = v331;
        char v331 = 0;
        if (v286) {
          (*(void (**)(void *))(*(void *)v286 + 8))(v286);
        }
        if (v285) {
          goto LABEL_586;
        }
      }
      else
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v203 + 128))(&v331, v203, 22);
        uint64_t v285 = *(void *)(*(uint64_t (**)(void *))(*(void *)v331 + 32))(v331);
        int v295 = v331;
        char v331 = 0;
        if (v295) {
          (*(void (**)(void *))(*(void *)v295 + 8))(v295);
        }
        int v200 = v304;
        if (v285) {
LABEL_586:
        }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v203 + 496))(v203, v285, v201, 12);
      }
LABEL_550:
      uint64_t v266 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v203 + 176))(v203, 23);
      if (!v266) {
        goto LABEL_551;
      }
      if (v266 == 1)
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v203 + 128))(&v331, v203, 23);
        uint64_t v287 = *(void *)(*(uint64_t (**)(void *))(*(void *)v331 + 32))(v331);
        unsigned int v288 = v331;
        char v331 = 0;
        if (v288) {
          (*(void (**)(void *))(*(void *)v288 + 8))(v288);
        }
        if (v287) {
          goto LABEL_591;
        }
      }
      else
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v203 + 128))(&v331, v203, 23);
        uint64_t v287 = *(void *)(*(uint64_t (**)(void *))(*(void *)v331 + 32))(v331);
        uint64_t v296 = v331;
        char v331 = 0;
        if (v296) {
          (*(void (**)(void *))(*(void *)v296 + 8))(v296);
        }
        int v200 = v304;
        if (v287) {
LABEL_591:
        }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v203 + 496))(v203, v287, v201, 13);
      }
LABEL_551:
      uint64_t v267 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v203 + 176))(v203, 20);
      if (v267)
      {
        if (v267 == 1)
        {
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v203 + 128))(&v331, v203, 20);
          uint64_t v289 = *(void *)(*(uint64_t (**)(void *))(*(void *)v331 + 32))(v331);
          unint64_t v290 = v331;
          char v331 = 0;
          if (v290) {
            (*(void (**)(void *))(*(void *)v290 + 8))(v290);
          }
          if (v289) {
            goto LABEL_596;
          }
        }
        else
        {
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v203 + 128))(&v331, v203, 20);
          uint64_t v289 = *(void *)(*(uint64_t (**)(void *))(*(void *)v331 + 32))(v331);
          uint64_t v297 = v331;
          char v331 = 0;
          if (v297) {
            (*(void (**)(void *))(*(void *)v297 + 8))(v297);
          }
          int v200 = v304;
          if (v289) {
LABEL_596:
          }
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v203 + 496))(v203, v289, v201, 14);
        }
      }
      char v331 = "agx.interpolations";
      __int16 v334 = 259;
      uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v200, (const char **)&v331);
      if (NamedMetadata)
      {
        uint64_t v269 = NamedMetadata;
        uint64_t v270 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
        if (v270)
        {
          uint64_t v271 = 0;
          uint64_t v272 = 8 * v270;
          while (1)
          {
            uint64_t v273 = *(void *)(**(void **)(v269 + 48) + v271);
            uint64_t v274 = *(void *)(v273 - 8 * *(unsigned int *)(v273 + 8));
            if (v274)
            {
              uint64_t v275 = *(void *)(v274 + 128);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v203 + 184))(v203, 9, v275))
              {
                uint64_t v276 = *(void *)(v273 - 8 * *(unsigned int *)(v273 + 8) + 8);
                if (*(unsigned char *)v276 == 4) {
                  uint64_t v276 = *(void *)(v276 - 8 * *(unsigned int *)(v276 + 8));
                }
                uint64_t v277 = *(void *)(v276 + 128);
                unint64_t v278 = (void *)(v277 + 24);
                if (*(_DWORD *)(v277 + 32) >= 0x41u) {
                  unint64_t v278 = (void *)*v278;
                }
                if (!*v278) {
                  break;
                }
              }
            }
            v271 += 8;
            if (v272 == v271) {
              goto LABEL_565;
            }
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v203 + 496))(v203, v275, v201, 15);
          llvm::FunctionGroup::setGlobalResource(v203, 18, v275);
        }
      }
LABEL_565:
      uint64_t v279 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v203 + 176))(v203, 18);
      if (v279)
      {
        LODWORD(v12) = v306;
        if (v279 == 1)
        {
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v203 + 128))(&v331, v203, 18);
          uint64_t v280 = *(void *)(*(uint64_t (**)(void *))(*(void *)v331 + 32))(v331);
          unsigned int v291 = v331;
          char v331 = 0;
          if (v291) {
            (*(void (**)(void *))(*(void *)v291 + 8))(v291);
          }
          int v200 = v304;
          goto LABEL_568;
        }
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v203 + 128))(&v331, v203, 18);
        uint64_t v280 = *(void *)(*(uint64_t (**)(void *))(*(void *)v331 + 32))(v331);
        int v298 = v331;
        char v331 = 0;
        if (v298) {
          (*(void (**)(void *))(*(void *)v298 + 8))(v298);
        }
      }
      else
      {
        uint64_t v280 = 0;
      }
      int v200 = v304;
      LODWORD(v12) = v306;
LABEL_568:
      sub_1CC7D90BC(9, v203, v201, 16, v280);
      sub_1CC7D90BC(12, v203, v201, 17, 0);
      sub_1CC7D90BC(13, v203, v201, 17, 0);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v203 + 448))(v203) > v303)
      {
        uint64_t v292 = *(void *)v200;
        char v331 = "Coefficient registers overflow";
        __int16 v334 = 259;
        llvm::LLVMContext::emitError(v292, (uint64_t)&v331);
      }
      ++v199;
    }
    while (v199 != (uint64_t *)v308);
  }
  if (__p)
  {
    BOOL v312 = __p;
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v309[0], 8);
  sub_1CC7D935C((uint64_t)v327);
  return 0;
}

uint64_t sub_1CC7DC460(llvm::Module *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  v79[24] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t *)*((void *)a1 + 14);
  unsigned int v6 = *((_DWORD *)v5 + 8);
  if (v6 <= 1) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = v6;
  }
  unsigned int v75 = *((_DWORD *)v5 + 8);
  if (v6 <= 0xD) {
    size_t v8 = v7;
  }
  else {
    size_t v8 = 14;
  }
  uint64_t v76 = *((unsigned int *)v5 + 2);
  if (!v76) {
    goto LABEL_20;
  }
  uint64_t v9 = 0;
  int v10 = 0;
  do
    int v10 = 33 * v10 + aAgcDylibBase[v9++];
  while (v8 != v9);
  uint64_t v11 = *v5;
  uint64_t v12 = *v5 + 8 * v76 + 8;
  int v13 = 1;
  int v14 = v10;
  while (1)
  {
    uint64_t v15 = v14 & (v76 - 1);
    uint64_t v16 = *(void **)(v11 + 8 * v15);
    if (v16 != (void *)-8)
    {
      if (!v16) {
        goto LABEL_20;
      }
      if (*(_DWORD *)(v12 + 4 * v15) == v10
        && v8 == *v16
        && !memcmp("agc.dylib_base", (char *)v16 + *((unsigned int *)v5 + 5), v8))
      {
        break;
      }
    }
    int v14 = v13 + v15;
    ++v13;
  }
  if (v15 == -1
    || (int)v15 == v76
    || (uint64_t v17 = *(void *)(*(void *)(v11 + 8 * (int)v15) + 8)) == 0
    || *(unsigned char *)(v17 + 16) != 3
    || (*(_DWORD *)(v17 + 32) & 0xFu) - 7 <= 1)
  {
LABEL_20:
    uint64_t v17 = 0;
  }
  uint64_t v72 = v17;
  if (v75 <= 1) {
    uint64_t v18 = 1;
  }
  else {
    uint64_t v18 = v75;
  }
  if (v75 <= 0x14) {
    size_t v19 = v18;
  }
  else {
    size_t v19 = 21;
  }
  if (!v76) {
    goto LABEL_40;
  }
  uint64_t v20 = 0;
  int v21 = 0;
  do
    int v21 = 33 * v21 + aAgcTextureHeap[v20++];
  while (v19 != v20);
  uint64_t v22 = *v5;
  uint64_t v23 = *v5 + 8 * v76 + 8;
  int v24 = 1;
  int v25 = v21;
  while (1)
  {
    uint64_t v26 = v25 & (v76 - 1);
    int v27 = *(void **)(v22 + 8 * v26);
    if (v27 != (void *)-8)
    {
      if (!v27) {
        goto LABEL_40;
      }
      if (*(_DWORD *)(v23 + 4 * v26) == v21
        && v19 == *v27
        && !memcmp("agc.texture_heap.read", (char *)v27 + *((unsigned int *)v5 + 5), v19))
      {
        break;
      }
    }
    int v25 = v24 + v26;
    ++v24;
  }
  if (v26 == -1
    || (int)v26 == v76
    || (uint64_t v28 = *(void *)(*(void *)(v22 + 8 * (int)v26) + 8)) == 0
    || *(unsigned char *)(v28 + 16) != 3
    || (*(_DWORD *)(v28 + 32) & 0xFu) - 7 <= 1)
  {
LABEL_40:
    uint64_t v28 = 0;
  }
  uint64_t v70 = (void *)v28;
  if (v75 <= 1) {
    uint64_t v29 = 1;
  }
  else {
    uint64_t v29 = v75;
  }
  if (v75 <= 0x15) {
    size_t v30 = v29;
  }
  else {
    size_t v30 = 22;
  }
  if (!v76) {
    goto LABEL_60;
  }
  uint64_t v31 = 0;
  int v32 = 0;
  do
    int v32 = 33 * v32 + aAgcTextureHeap_0[v31++];
  while (v30 != v31);
  uint64_t v33 = *v5;
  uint64_t v34 = *v5 + 8 * v76 + 8;
  int v35 = 1;
  int v36 = v32;
  while (1)
  {
    uint64_t v37 = v36 & (v76 - 1);
    uint64_t v38 = *(void **)(v33 + 8 * v37);
    if (v38 != (void *)-8)
    {
      if (!v38) {
        goto LABEL_60;
      }
      if (*(_DWORD *)(v34 + 4 * v37) == v32
        && v30 == *v38
        && !memcmp("agc.texture_heap.write", (char *)v38 + *((unsigned int *)v5 + 5), v30))
      {
        break;
      }
    }
    int v36 = v35 + v37;
    ++v35;
  }
  if (v37 == -1
    || (int)v37 == v76
    || (uint64_t v39 = *(void *)(*(void *)(v33 + 8 * (int)v37) + 8)) == 0
    || *(unsigned char *)(v39 + 16) != 3
    || (*(_DWORD *)(v39 + 32) & 0xFu) - 7 <= 1)
  {
LABEL_60:
    uint64_t v39 = 0;
  }
  uint64_t v69 = v39;
  if (v75 <= 1) {
    uint64_t v40 = 1;
  }
  else {
    uint64_t v40 = v75;
  }
  if (v75 <= 0x25) {
    size_t v41 = v40;
  }
  else {
    size_t v41 = 38;
  }
  if (!v76) {
    goto LABEL_80;
  }
  uint64_t v42 = 0;
  int v43 = 0;
  do
    int v43 = 33 * v43 + aAgcTextureHeap_1[v42++];
  while (v41 != v42);
  uint64_t v44 = *v5;
  uint64_t v45 = *v5 + 8 * v76 + 8;
  int v46 = 1;
  int v47 = v43;
  while (1)
  {
    uint64_t v48 = v47 & (v76 - 1);
    uint64_t v49 = *(void **)(v44 + 8 * v48);
    if (v49 != (void *)-8)
    {
      if (!v49) {
        goto LABEL_80;
      }
      if (*(_DWORD *)(v45 + 4 * v48) == v43
        && v41 == *v49
        && !memcmp("agc.texture_heap.texture_buffer_length", (char *)v49 + *((unsigned int *)v5 + 5), v41))
      {
        break;
      }
    }
    int v47 = v46 + v48;
    ++v46;
  }
  if (v48 == -1
    || (int)v48 == v76
    || (uint64_t v50 = *(void *)(*(void *)(v44 + 8 * (int)v48) + 8)) == 0
    || *(unsigned char *)(v50 + 16) != 3
    || (*(_DWORD *)(v50 + 32) & 0xFu) - 7 <= 1)
  {
LABEL_80:
    uint64_t v50 = 0;
  }
  unsigned int v77 = v79;
  uint64_t v78 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(a1, (uint64_t)&v77);
  if (v78)
  {
    uint64_t v51 = (uint64_t *)((char *)v77 + 16);
    uint64_t v52 = 24 * v78;
    uint64_t v53 = a4;
    while (1)
    {
      uint64_t v54 = *(void *)(*(v51 - 1) + 8);
      if (*(void *)v54 == 9)
      {
        uint64_t v55 = *(void *)(v54 + 24);
        uint64_t v56 = *(unsigned __int8 *)(v54 + 32);
        if (*(void *)"PIC Level" == v55 && aPicLevel[8] == v56) {
          break;
        }
      }
      v51 += 3;
      v52 -= 24;
      if (!v52)
      {
        uint64_t v58 = 0;
        goto LABEL_92;
      }
    }
    uint64_t v58 = *v51;
  }
  else
  {
    uint64_t v58 = 0;
    uint64_t v53 = a4;
  }
LABEL_92:
  if (v77 == v79)
  {
    if (!v58) {
      goto LABEL_94;
    }
  }
  else
  {
    free(v77);
    if (!v58) {
      goto LABEL_94;
    }
  }
  uint64_t v65 = *(void *)(v58 + 128);
  uint64_t v66 = (void *)(v65 + 24);
  if (*(_DWORD *)(v65 + 32) >= 0x41u) {
    uint64_t v66 = (void *)*v66;
  }
  if (*(_DWORD *)v66)
  {
    unsigned int v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 504))(a2, v72, v53, 4);
    (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, 5, v67, 1, 0xFFFFFFFFLL, 1, 1);
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a2 + 504))(a2, v70, v53, 4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 504))(a2, v69, v53, 4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 504))(a2, v50, v53, 4);
    goto LABEL_101;
  }
LABEL_94:
  if (v72)
  {
    uint64_t v59 = 4;
    unsigned int v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 504))(a2, v72, v53, 4);
    (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, 5, v60, 1, 0xFFFFFFFFLL, 1, 1);
    unsigned int v77 = v70;
    uint64_t v78 = v69;
    v79[0] = v50;
    while (1)
    {
      uint64_t v61 = v59 - 1;
      if (v59 == 1) {
        break;
      }
      if (*(&v77 + (v59-- - 2)))
      {
        if ((int)v61 >= 1)
        {
          uint64_t v63 = 0;
          do
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)a2 + 504))(a2, *(&v77 + v63++), v53, 4);
          while (v61 != v63);
        }
        break;
      }
    }
  }
LABEL_101:
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 440))(a2) > a3)
  {
    uint64_t v68 = "Ran out of shared registers after MSAA address";
    goto LABEL_124;
  }
  sub_1CC7D90BC(3, a2, v53, 4, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 440))(a2);
  if (result > a3)
  {
    uint64_t v68 = "Ran out of shared registers after bindings";
LABEL_124:
    llvm::report_fatal_error((llvm *)v68, (const llvm::Twine *)1);
  }
  return result;
}

llvm *sub_1CC7DCD20(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*(void *)a1 - 8 * *(unsigned int *)(*(void *)a1 + 8)) + 128) + 40);
  uint64_t v3 = llvm::dbgs((llvm *)a1);
  int v4 = v3;
  uint64_t v5 = *((void *)v3 + 4);
  if ((unint64_t)(*((void *)v3 + 3) - v5) > 0x11)
  {
    *(_WORD *)(v5 + 16) = 8306;
    *(_OWORD *)uint64_t v5 = *(_OWORD *)"  Buffer info for ";
    *((void *)v3 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(v3, "  Buffer info for ", 0x12uLL);
  }
  llvm::Value::print(*(llvm::Value **)(*(void *)(*(void *)a1 - 8 * *(unsigned int *)(*(void *)a1 + 8)) + 128), v4, 0);
  uint64_t v7 = (_WORD *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v7 > 1uLL)
  {
    _WORD *v7 = 2618;
    *((void *)v4 + 4) += 2;
  }
  else
  {
    unsigned int v6 = llvm::raw_ostream::write(v4, ":\n", 2uLL);
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 16);
  int v10 = llvm::dbgs(v6);
  uint64_t v11 = (void *)*((void *)v10 + 4);
  if (*((void *)v10 + 3) - (void)v11 > 0xEuLL)
  {
    qmemcpy(v11, "    Intervals:\n", 15);
    *((void *)v10 + 4) += 15;
    if (!v9) {
      goto LABEL_7;
    }
  }
  else
  {
    int v10 = llvm::raw_ostream::write(v10, "    Intervals:\n", 0xFuLL);
    if (!v9) {
      goto LABEL_7;
    }
  }
  uint64_t v36 = v2 + 272;
  uint64_t v37 = 32 * v9;
  uint64_t v38 = (unint64_t *)(v8 + 24);
  do
  {
    if (*v38)
    {
      uint64_t v39 = (uint64_t *)*(v38 - 3);
      if (v39)
      {
        int v10 = (llvm::raw_ostream *)sub_1CB83544C(v36, *v39);
        unint64_t v40 = ((unint64_t)v10 + 7) >> 3;
        if (v41 == 1) {
      }
        }
      else
      {
        unint64_t v40 = 0;
      }
      uint64_t v42 = llvm::dbgs(v10);
      int v43 = (_DWORD *)*((void *)v42 + 4);
      if (*((void *)v42 + 3) - (void)v43 > 6uLL)
      {
        *(_DWORD *)((char *)v43 + 3) = 1528832032;
        _DWORD *v43 = 538976288;
        *((void *)v42 + 4) += 7;
      }
      else
      {
        uint64_t v42 = llvm::raw_ostream::write(v42, "      [", 7uLL);
      }
      uint64_t v44 = llvm::raw_ostream::operator<<(v42, *(v38 - 1));
      uint64_t v45 = (_WORD *)*((void *)v44 + 4);
      if (*((void *)v44 + 3) - (void)v45 > 1uLL)
      {
        *uint64_t v45 = 8236;
        *((void *)v44 + 4) += 2;
      }
      else
      {
        uint64_t v44 = llvm::raw_ostream::write(v44, ", ", 2uLL);
      }
      int v46 = llvm::raw_ostream::operator<<(v44, *v38);
      int v47 = (unsigned char *)*((void *)v46 + 4);
      if (*((unsigned char **)v46 + 3) == v47)
      {
        int v46 = llvm::raw_ostream::write(v46, ")", 1uLL);
      }
      else
      {
        *int v47 = 41;
        ++*((void *)v46 + 4);
      }
      uint64_t v48 = llvm::dbgs(v46);
      uint64_t v49 = (void *)*((void *)v48 + 4);
      if (*((void *)v48 + 3) - (void)v49 > 0xCuLL)
      {
        qmemcpy(v49, ",\taccessing [", 13);
        *((void *)v48 + 4) += 13;
      }
      else
      {
        uint64_t v48 = llvm::raw_ostream::write(v48, ",\taccessing [", 0xDuLL);
      }
      uint64_t v50 = llvm::raw_ostream::operator<<(v48, *(v38 - 2));
      uint64_t v51 = (_WORD *)*((void *)v50 + 4);
      if (*((void *)v50 + 3) - (void)v51 > 1uLL)
      {
        *uint64_t v51 = 8236;
        *((void *)v50 + 4) += 2;
      }
      else
      {
        uint64_t v50 = llvm::raw_ostream::write(v50, ", ", 2uLL);
      }
      uint64_t v52 = llvm::dbgs(v50);
      if (v39)
      {
        uint64_t v52 = sub_1CD098D14(v52, *(v38 - 2) + v40, 0, 0, 0);
      }
      else
      {
        uint64_t v53 = (unsigned char *)*((void *)v52 + 4);
        if (*((unsigned char **)v52 + 3) == v53)
        {
          uint64_t v52 = llvm::raw_ostream::write(v52, "?", 1uLL);
        }
        else
        {
          *uint64_t v53 = 63;
          ++*((void *)v52 + 4);
        }
      }
      uint64_t v54 = llvm::dbgs(v52);
      uint64_t v55 = *((void *)v54 + 4);
      if ((unint64_t)(*((void *)v54 + 3) - v55) > 2)
      {
        *(unsigned char *)(v55 + 2) = 40;
        *(_WORD *)uint64_t v55 = 2345;
        *((void *)v54 + 4) += 3;
      }
      else
      {
        uint64_t v54 = llvm::raw_ostream::write(v54, ")\t(", 3uLL);
      }
      uint64_t v56 = llvm::dbgs(v54);
      if (v39)
      {
        uint64_t v56 = sub_1CD098D14(v56, v40, 0, 0, 0);
      }
      else
      {
        unsigned int v57 = (unsigned char *)*((void *)v56 + 4);
        if (*((unsigned char **)v56 + 3) == v57)
        {
          uint64_t v56 = llvm::raw_ostream::write(v56, "?", 1uLL);
        }
        else
        {
          *unsigned int v57 = 63;
          ++*((void *)v56 + 4);
        }
      }
      uint64_t v58 = llvm::dbgs(v56);
      uint64_t v59 = (_DWORD *)*((void *)v58 + 4);
      if (*((void *)v58 + 3) - (void)v59 > 6uLL)
      {
        *(_DWORD *)((char *)v59 + 3) = 695428468;
        _DWORD *v59 = 1954112032;
        *((void *)v58 + 4) += 7;
      }
      else
      {
        uint64_t v58 = llvm::raw_ostream::write(v58, " bytes)", 7uLL);
      }
      unsigned int v60 = llvm::dbgs(v58);
      uint64_t v61 = *((void *)v60 + 4);
      if ((unint64_t)(*((void *)v60 + 3) - v61) > 0x10)
      {
        *(unsigned char *)(v61 + 16) = 32;
        *(_OWORD *)uint64_t v61 = *(_OWORD *)",\tinterval size: ";
        *((void *)v60 + 4) += 17;
      }
      else
      {
        unsigned int v60 = llvm::raw_ostream::write(v60, ",\tinterval size: ", 0x11uLL);
      }
      BOOL v62 = llvm::raw_ostream::operator<<(v60, *v38 - *(v38 - 1));
      uint64_t v63 = *((void *)v62 + 4);
      if ((unint64_t)(*((void *)v62 + 3) - v63) > 8)
      {
        *(unsigned char *)(v63 + 8) = 9;
        *(void *)uint64_t v63 = *(void *)",\tvalue:\t";
        *((void *)v62 + 4) += 9;
      }
      else
      {
        BOOL v62 = llvm::raw_ostream::write(v62, ",\tvalue:\t", 9uLL);
      }
      uint64_t v64 = *(v38 - 3);
      uint64_t v65 = llvm::dbgs(v62);
      if (v64)
      {
        llvm::Value::print((llvm::Value *)*(v38 - 3), v65, 0);
      }
      else
      {
        uint64_t v66 = *((void *)v65 + 4);
        if ((unint64_t)(*((void *)v65 + 3) - v66) > 0x10)
        {
          *(unsigned char *)(v66 + 16) = 41;
          *(_OWORD *)uint64_t v66 = *(_OWORD *)"nullptr (dynamic)";
          *((void *)v65 + 4) += 17;
        }
        else
        {
          uint64_t v65 = llvm::raw_ostream::write(v65, "nullptr (dynamic)", 0x11uLL);
        }
      }
      int v10 = llvm::dbgs(v65);
      unsigned int v67 = (unsigned char *)*((void *)v10 + 4);
      if (*((unsigned char **)v10 + 3) == v67)
      {
        int v10 = llvm::raw_ostream::write(v10, "\n", 1uLL);
      }
      else
      {
        *unsigned int v67 = 10;
        ++*((void *)v10 + 4);
      }
    }
    v38 += 4;
    v37 -= 32;
  }
  while (v37);
LABEL_7:
  uint64_t v12 = llvm::dbgs(v10);
  uint64_t v13 = *((void *)v12 + 4);
  if ((unint64_t)(*((void *)v12 + 3) - v13) > 9)
  {
    *(_WORD *)(v13 + 8) = 8250;
    *(void *)uint64_t v13 = *(void *)"    Type: ";
    *((void *)v12 + 4) += 10;
  }
  else
  {
    uint64_t v12 = llvm::raw_ostream::write(v12, "    Type: ", 0xAuLL);
  }
  uint64_t v14 = *(void *)(a1 + 1112);
  uint64_t v15 = llvm::dbgs(v12);
  uint64_t v16 = v15;
  if (v14)
  {
    uint64_t v15 = (llvm::raw_ostream *)llvm::Type::print(*(llvm::Type **)(a1 + 1112), v15, 0, 0);
    uint64_t v20 = (unsigned char *)*((void *)v16 + 4);
    if (*((unsigned char **)v16 + 3) == v20)
    {
      uint64_t v18 = "\n";
      uint64_t v15 = v16;
      size_t v19 = 1;
      goto LABEL_14;
    }
    *uint64_t v20 = 10;
    uint64_t v69 = *((void *)v16 + 4) + 1;
  }
  else
  {
    uint64_t v17 = *((void *)v15 + 4);
    if ((unint64_t)(*((void *)v15 + 3) - v17) <= 9)
    {
      uint64_t v18 = "(nullptr)\n";
      size_t v19 = 10;
LABEL_14:
      uint64_t v15 = llvm::raw_ostream::write(v15, v18, v19);
      goto LABEL_15;
    }
    *(_WORD *)(v17 + 8) = 2601;
    *(void *)uint64_t v17 = *(void *)"(nullptr)\n";
    uint64_t v69 = *((void *)v15 + 4) + 10;
  }
  *((void *)v16 + 4) = v69;
LABEL_15:
  int v21 = llvm::dbgs(v15);
  uint64_t v22 = *((void *)v21 + 4);
  if ((unint64_t)(*((void *)v21 + 3) - v22) > 9)
  {
    *(_WORD *)(v22 + 8) = 8250;
    *(void *)uint64_t v22 = *(void *)"    Size: ";
    *((void *)v21 + 4) += 10;
  }
  else
  {
    int v21 = llvm::raw_ostream::write(v21, "    Size: ", 0xAuLL);
  }
  int v23 = *(_DWORD *)(a1 + 1120);
  int v24 = llvm::dbgs(v21);
  int v25 = v24;
  if (v23 == -1)
  {
    uint64_t v26 = (_OWORD *)*((void *)v24 + 4);
    if (*((void *)v24 + 3) - (void)v26 <= 0xFuLL)
    {
      int v27 = "(uninitialized)\n";
      size_t v28 = 16;
LABEL_22:
      int v24 = llvm::raw_ostream::write(v24, v27, v28);
      goto LABEL_23;
    }
    _OWORD *v26 = *(_OWORD *)"(uninitialized)\n";
    uint64_t v70 = *((void *)v24 + 4) + 16;
  }
  else
  {
    int v24 = sub_1CD098D14(v24, *(unsigned int *)(a1 + 1120), 0, 0, 0);
    uint64_t v29 = (unsigned char *)*((void *)v25 + 4);
    if (*((unsigned char **)v25 + 3) == v29)
    {
      int v27 = "\n";
      int v24 = v25;
      size_t v28 = 1;
      goto LABEL_22;
    }
    unsigned char *v29 = 10;
    uint64_t v70 = *((void *)v25 + 4) + 1;
  }
  *((void *)v25 + 4) = v70;
LABEL_23:
  int v30 = *(unsigned __int8 *)(a1 + 1125);
  uint64_t result = llvm::dbgs(v24);
  int v32 = (char *)*((void *)result + 4);
  unint64_t v33 = *((void *)result + 3) - (void)v32;
  if (!v30)
  {
    if (v33 <= 0x16)
    {
      uint64_t v34 = " (all promotable uses)\n";
      size_t v35 = 23;
      goto LABEL_28;
    }
    qmemcpy(v32, " (all promotable uses)\n", 23);
    uint64_t v68 = *((void *)result + 4) + 23;
LABEL_97:
    *((void *)result + 4) = v68;
    return result;
  }
  if (v33 > 0x14)
  {
    qmemcpy(v32, " (unpromotable uses)\n", 21);
    uint64_t v68 = *((void *)result + 4) + 21;
    goto LABEL_97;
  }
  uint64_t v34 = " (unpromotable uses)\n";
  size_t v35 = 21;
LABEL_28:

  return llvm::raw_ostream::write(result, v34, v35);
}

void sub_1CC7DD554(uint64_t a1)
{
}

void sub_1CC7DD5F4()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t sub_1CC7DD6F4(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDBBB0;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F261EF58;
  uint64_t v5 = (llvm::PassRegistry *)sub_1CB93141C(a1 + 56, a2);
  *(unsigned char *)(a1 + 88) = a3;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v5);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDBBB8, memory_order_acquire) != -1)
  {
    v9[0] = sub_1CC7DD554;
    v9[1] = &PassRegistry;
    uint64_t v8 = v9;
    std::__call_once(&qword_1EBCDBBB8, &v8, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC7DD7B8()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CC7DD89C(llvm::Pass *this)
{
  *(void *)this = &unk_1F261EF58;
  uint64_t v2 = (char *)this + 56;
  uint64_t v3 = (char *)*((void *)this + 10);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC7DD950(llvm::Pass *this)
{
  *(void *)this = &unk_1F261EF58;
  uint64_t v2 = (char *)this + 56;
  uint64_t v3 = (char *)*((void *)this + 10);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC7DDA18(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

BOOL sub_1CC7DDA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v1169 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  v1271[5] = *MEMORY[0x1E4F143B8];
  v1150 = v4;
  *(void *)(v1169 + 32) = (char *)v4 + 272;
  uint64_t v5 = *(uint64_t **)(v1169 + 8);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_4:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::FunctionGroupInfoWrapperPass::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_4;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  uint64_t v1151 = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  if (*((char *)v1150 + 239) < 0) {
    sub_1CB8BDF7C((uint64_t)&v1203, *((const void **)v1150 + 27), *((void *)v1150 + 28));
  }
  else {
    std::string v1203 = *(std::string *)((unsigned char *)v1150 + 9);
  }
  if (!std::string::compare(&v1203, 0, 4uLL, "agx1"))
  {
    int v9 = 27;
  }
  else if (!std::string::compare(&v1203, 0, 4uLL, "agx2"))
  {
    int v9 = 28;
  }
  else if (!std::string::compare(&v1203, 0, 4uLL, "agx3"))
  {
    int v9 = 29;
  }
  else
  {
    int v9 = 0;
  }
  uint64_t v10 = v1169;
  *(_DWORD *)(v1169 + 40) = v9;
  if (SHIBYTE(v1203.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v1203.__r_.__value_.__l.__data_);
    uint64_t v10 = v1169;
    int v9 = *(_DWORD *)(v1169 + 40);
  }
  if (v9 == 29) {
    int v11 = 8;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(v10 + 44) = 4;
  *(_DWORD *)(v10 + 48) = v11;
  unint64_t v1133 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(void *)v1151 + 64))(v1151) + 4);
  if (byte_1EBCDBB70)
  {
    char v1137 = 0;
LABEL_22:
    char v12 = 0;
LABEL_23:
    uint64_t v13 = v1150;
  }
  else
  {
    uint64_t v13 = v1150;
    uint64_t v38 = (void *)*((void *)v1150 + 4);
    if (v38 != (void *)((char *)v1150 + 24))
    {
      char v1137 = 0;
      unint64_t v1196 = (unint64_t)v1209;
      uint64_t v39 = v1169;
      while (1)
      {
        if (v38) {
          unint64_t v40 = v38 - 7;
        }
        else {
          unint64_t v40 = 0;
        }
        if (v38 && *((unsigned char *)v40 + 16) == 3)
        {
          if ((*((_DWORD *)v40 + 5) & 0x7FFFFFF) != 0) {
            goto LABEL_48;
          }
        }
        else if (*((unsigned char *)v40 + 16) || (void *)v40[9] != v40 + 9 || (*((unsigned char *)v40 + 34) & 0x80) != 0)
        {
LABEL_48:
          v1134 = v38;
          uint64_t v41 = *(void *)(v39 + 80);
          if (!v41 || ((*(uint64_t (**)(uint64_t, void *))(*(void *)v41 + 48))(v41, v40) & 1) == 0)
          {
            uint64_t v42 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v1151 + 24))(v1151, v40);
            int v43 = sub_1CD11373C(v1151, v42, (uint64_t)v1150);
            int v44 = *(_DWORD *)(v1169 + 40);
            uint64_t v45 = *(void *)(v1169 + 32);
            unint64_t v46 = *(void *)(v1169 + 44);
            int v47 = (llvm::Module *)v40[5];
            v1218 = v1220;
            uint64_t v1219 = 0x800000000;
            llvm::Module::getModuleFlagsMetadata(v47, (uint64_t)&v1218);
            if (v1219)
            {
              uint64_t v48 = (uint64_t *)((char *)v1218 + 16);
              uint64_t v49 = 24 * v1219;
              while (1)
              {
                uint64_t v50 = *(void *)(*(v48 - 1) + 8);
                if (*(void *)v50 == 9)
                {
                  uint64_t v51 = *(void *)(v50 + 24);
                  uint64_t v52 = *(unsigned __int8 *)(v50 + 32);
                  BOOL v53 = *(void *)"PIC Level" == v51 && aPicLevel[8] == v52;
                  if (v53) {
                    break;
                  }
                }
                v48 += 3;
                v49 -= 24;
                if (!v49) {
                  goto LABEL_61;
                }
              }
              uint64_t v54 = *v48;
            }
            else
            {
LABEL_61:
              uint64_t v54 = 0;
            }
            if (v1218 != v1220) {
              free(v1218);
            }
            uint64_t v39 = v1169;
            if (!v54) {
              goto LABEL_65;
            }
            uint64_t v264 = *(void *)(v54 + 128);
            uint64_t v265 = (void *)(v264 + 24);
            if (*(_DWORD *)(v264 + 32) >= 0x41u) {
              uint64_t v265 = (void *)*v265;
            }
            if (*(_DWORD *)v265)
            {
              int v1136 = 0;
            }
            else
            {
LABEL_65:
              if (v44 == 29)
              {
                uint64_t v55 = (llvm::Module *)v40[5];
                v1218 = "agx.may_be_called_from_intersection_function";
                __int16 v1221 = 259;
                uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v55, (const char **)&v1218);
                if (NamedMetadata)
                {
                  uint64_t v57 = *(void *)(*(void *)(***(void ***)(NamedMetadata + 48)
                                              - 8 * *(unsigned int *)(***(void ***)(NamedMetadata + 48) + 8))
                                  + 128);
                  uint64_t v58 = (void *)(v57 + 24);
                  if (*(_DWORD *)(v57 + 32) >= 0x41u) {
                    uint64_t v58 = (void *)*v58;
                  }
                  uint64_t v39 = v1169;
                  BOOL v59 = *v58 != 0;
                }
                else
                {
                  BOOL v59 = 0;
                  uint64_t v39 = v1169;
                }
                int v1136 = !v59;
              }
              else
              {
                int v1136 = 1;
              }
            }
            unsigned int v60 = (void *)v40[10];
            v1142 = v40 + 9;
            if (v60 == v40 + 9)
            {
              LOBYTE(v61) = 0;
              goto LABEL_513;
            }
            unsigned int v1148 = v43 & -HIDWORD(v46);
            uint64_t v61 = 0;
            unsigned int v1138 = v44 & 0xFFFFFFFE;
            unsigned int v62 = v44 - 27;
            uint64_t v1146 = HIDWORD(v46) - 1;
            unint64_t v1147 = HIDWORD(v46);
            unsigned int v1135 = ((4128768 - (__clz(HIDWORD(v46)) << 16)) & 0xFF0000) + 0x10000;
            v1141 = (llvm::DataLayout *)v45;
            unsigned int v1140 = v44 - 27;
            while (1)
            {
              uint64_t v63 = v61;
              uint64_t v64 = v60 - 3;
              if (!v60) {
                uint64_t v64 = 0;
              }
              v1218 = v1220;
              uint64_t v1219 = 0x2000000000;
              uint64_t v65 = v64 + 5;
              uint64_t v66 = (void *)v64[6];
              if (v66 == v64 + 5)
              {
                uint64_t v61 = v63;
                goto LABEL_510;
              }
              unsigned int v67 = 0;
              do
              {
                uint64_t v68 = v66 - 3;
                if (!v66) {
                  uint64_t v68 = 0;
                }
                if (*((unsigned char *)v68 + 16) == 59) {
                  uint64_t v69 = v68;
                }
                else {
                  uint64_t v69 = 0;
                }
                if (v62 <= 2 && v69)
                {
                  if (v67 >= HIDWORD(v1219)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v1218 + v67) = v69;
                  unsigned int v67 = v1219 + 1;
                  LODWORD(v1219) = v1219 + 1;
                }
                uint64_t v66 = (void *)v66[1];
              }
              while (v66 != v65);
              uint64_t v70 = (void **)v1218;
              if (!v67)
              {
                uint64_t v61 = v63;
                goto LABEL_508;
              }
              v1139 = v60;
              v1184 = (char *)v1218 + 8 * v67;
              LODWORD(v61) = v63;
              do
              {
                v1193 = (llvm::ValueAsMetadata *)v70;
                v1247 = *v70;
                v1248 = &v1250;
                uint64_t v1249 = 0x800000000;
                v1257 = v1259;
                uint64_t v1258 = 0x1000000000;
                uint64_t v71 = *((void *)v1247 + 8);
                if (llvm::AllocaInst::isArrayAllocation((llvm::AllocaInst *)v1247)) {
                  goto LABEL_103;
                }
                int v72 = *(unsigned __int8 *)(v71 + 8);
                if (v72 == 17)
                {
                  unsigned int v73 = 1;
                  uint64_t v1171 = 1;
                }
                else
                {
                  if (v72 != 16) {
                    goto LABEL_103;
                  }
                  if (*(_DWORD *)(v71 + 12) > 1u) {
                    goto LABEL_103;
                  }
                  uint64_t v71 = **(void **)(v71 + 16);
                  if (*(unsigned char *)(v71 + 8) != 17) {
                    goto LABEL_103;
                  }
                  uint64_t v1171 = 2;
                  unsigned int v73 = 2;
                }
                int v1180 = v61;
                uint64_t v61 = sub_1CB83544C(v45, v71);
                BOOL v75 = v74 == 1;
                char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)v45, (llvm::Type *)v71, 1);
                if (v75) {
                unsigned int v79 = (v1146
                }
                     + (unint64_t)(-(1 << Alignment) & ((1 << Alignment)
                                                             - 1
                                                             + ((unint64_t)(v61 + 7) >> 3))))
                    / v1147
                    * v1147;
                unsigned int v80 = v1148 - v79;
                LODWORD(v61) = v1180;
                if (v1148 < v79)
                {
LABEL_103:
                  int v81 = 0;
                  unsigned __int8 v1262 = 0;
                  goto LABEL_104;
                }
                v1244[0] = &v1245;
                v1244[1] = (void *)0x1000000000;
                unint64_t v83 = *(void *)(v71 + 32);
                NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(v71 + 24), (llvm::Type *)v76, v77);
                if (v83 != LODWORD(v1244[1]))
                {
                  if (v83 >= LODWORD(v1244[1])) {
                    sub_1CBFC6AA8((uint64_t)v1244, v83 - LODWORD(v1244[1]), (uint64_t)NullValue);
                  }
                  else {
                    LODWORD(v1244[1]) = v83;
                  }
                }
                v1239 = &v1241;
                v1240 = (void *)0x800000000;
                unsigned int v85 = v1247;
                uint64_t v86 = *((void *)v1247 + 1);
                if (!v86)
                {
                  char v255 = 0;
                  goto LABEL_311;
                }
                char v1164 = 0;
                size_t v1165 = v73 + 1;
                unsigned int v1176 = v73 + 2;
                uint64_t v87 = v73;
                unsigned int v1188 = v73;
LABEL_116:
                uint64_t v88 = *(void *)(v86 + 24);
                int v89 = *(unsigned __int8 *)(v88 + 16);
                if (!v88 || v89 != 62)
                {
                  if (!v88 || v89 != 77)
                  {
                    if (v88 && v89 == 61)
                    {
                      uint64_t v1161 = v87;
                      BOOL v132 = *(uint64_t **)(v88 - 64);
                      unsigned int v133 = *((unsigned __int8 *)v132 + 16);
                      if (v132) {
                        BOOL v134 = v133 == 13;
                      }
                      else {
                        BOOL v134 = 0;
                      }
                      if (v134) {
                        goto LABEL_290;
                      }
                      if (v132) {
                        BOOL v135 = v133 > 0x14;
                      }
                      else {
                        BOOL v135 = 1;
                      }
                      if (v135
                        || v133 == 5
                        && (*((_WORD *)v132 + 9) != 48
                         || *(unsigned char *)(v132[-4 * (*((_DWORD *)v132 + 5) & 0x7FFFFFF)] + 16) != 16))
                      {
                        goto LABEL_338;
                      }
                      uint64_t v136 = *(llvm::Type ***)v1244[0];
                      uint64_t v137 = *v132;
                      uint64_t v138 = **(void **)v1244[0];
                      if (*v132 == v138)
                      {
                        *(void *)v1244[0] = v132;
                        goto LABEL_290;
                      }
                      if (v137) {
                        BOOL v139 = (*(_DWORD *)(v137 + 8) & 0xFE) == 18;
                      }
                      else {
                        BOOL v139 = 0;
                      }
                      if (!v139)
                      {
                        if (MEMORY[0x18] == v138)
                        {
                          if (MEMORY[0x20])
                          {
                            int v140 = 0;
                            do
                            {
                              AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v132, v140);
                              *((void *)v1244[0] + (void)v140) = AggregateElement;
                              int v140 = (llvm::Type *)((char *)v140 + 1);
                            }
                            while ((unint64_t)v140 < MEMORY[0x20]);
                          }
                          goto LABEL_290;
                        }
LABEL_504:
                        int v256 = 0;
                        goto LABEL_342;
                      }
                      uint64_t v1154 = sub_1CB83544C((uint64_t)v1141, *v132);
                      if (v154 == 1) {
                      unint64_t v156 = sub_1CC5CA218(v1141, *v136);
                      }
                      if (v155 == 1) {
                      if (!(((v1154 + 7) & 0xFFFFFFFFFFFFFFF8) % v156) && *(_DWORD *)(v137 + 32))
                      }
                      {
                        uint64_t v160 = 0;
                        do
                        {
                          v1222 = (void *)*((void *)v1244[0] + (void)v160);
                          unsigned int v161 = (llvm::Type *)llvm::Constant::getAggregateElement((llvm::Constant *)v132, v160);
                          if (!sub_1CC7E5958(0, v161, (const llvm::APFloat *)&v1222, 0, (uint64_t)v1141)) {
                            goto LABEL_504;
                          }
                          *((void *)v1244[0] + (void)v160) = v1222;
                          uint64_t v160 = (llvm::Type *)((char *)v160 + 1);
                        }
                        while ((unint64_t)v160 < *(unsigned int *)(v137 + 32));
                      }
LABEL_290:
                      if (v1249 >= (unint64_t)HIDWORD(v1249)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v1248 + v1249) = v88;
                      LODWORD(v1249) = v1249 + 1;
LABEL_292:
                      uint64_t v87 = v1161;
                      goto LABEL_293;
                    }
                    if (v89 == 84)
                    {
                      uint64_t v145 = *(void *)(v88 - 32);
                      if (v145)
                      {
                        if (!*(unsigned char *)(v145 + 16)
                          && *(void *)(v145 + 24) == *(void *)(v88 + 72)
                          && (*(unsigned char *)(v145 + 33) & 0x20) != 0
                          && (*(_DWORD *)(v145 + 36) - 167) < 2)
                        {
                          goto LABEL_293;
                        }
                      }
                    }
LABEL_336:
                    int v256 = 0;
                    goto LABEL_342;
                  }
                  uint64_t v119 = *(void *)(v88 + 8);
                  if (!v119) {
                    goto LABEL_293;
                  }
                  unsigned int v1153 = v80;
                  int v120 = 0;
                  while (1)
                  {
                    uint64_t v121 = *(void *)(v119 + 24);
                    int v122 = *(unsigned __int8 *)(v121 + 16);
                    if (v121 && v122 == 61)
                    {
                      uint64_t v123 = *(void *)(v88 + 8);
                      if (v123)
                      {
                        int v124 = 0;
                        do
                        {
                          ++v124;
                          uint64_t v123 = *(void *)(v123 + 8);
                        }
                        while (v123);
                      }
                      else
                      {
                        int v124 = 0;
                      }
                      if (*(unsigned __int8 *)(*(void *)(v121 - 64) + 16) >= 0x15u) {
                        unint64_t v126 = 0;
                      }
                      else {
                        unint64_t v126 = *(llvm::Constant **)(v121 - 64);
                      }
                      if (v124 == 1 && v126)
                      {
                        uint64_t v127 = *(void *)v126;
                        BOOL v128 = *(void *)v126 && (*(_DWORD *)(*(void *)v126 + 8) & 0xFE) == 18;
                        if (v128 && *(void *)(v127 + 24) == **(void **)v1244[0])
                        {
                          int v1162 = v120;
                          uint64_t v129 = v87;
                          if (*(_DWORD *)(v127 + 32))
                          {
                            unsigned int v130 = 0;
                            do
                            {
                              uint64_t v131 = llvm::Constant::getAggregateElement(v126, v130);
                              *((void *)v1244[0] + (void)v130) = v131;
                              unsigned int v130 = (llvm::Type *)((char *)v130 + 1);
                            }
                            while ((unint64_t)v130 < *(unsigned int *)(v127 + 32));
                          }
                          if (v1249 >= (unint64_t)HIDWORD(v1249)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          uint64_t v87 = v129;
                          int v120 = v1162;
                          *((void *)v1248 + v1249) = v121;
                          LODWORD(v1249) = v1249 + 1;
                        }
                      }
                    }
                    else
                    {
                      if (v122 != 84)
                      {
                        if (v122 != 60) {
                          goto LABEL_339;
                        }
                        uint64_t v119 = *(void *)(v119 + 8);
                        int v120 = 1;
                        if (!v119) {
                          goto LABEL_281;
                        }
                        continue;
                      }
                      uint64_t v125 = *(void *)(v121 - 32);
                      if (!v125
                        || *(unsigned char *)(v125 + 16)
                        || *(void *)(v125 + 24) != *(void *)(v121 + 72)
                        || (*(unsigned char *)(v125 + 33) & 0x20) == 0)
                      {
LABEL_339:
                        int v256 = 0;
                        goto LABEL_342;
                      }
                      if ((*(_DWORD *)(v125 + 36) - 167) > 1)
                      {
                        int v256 = 0;
                        goto LABEL_342;
                      }
                    }
                    uint64_t v119 = *(void *)(v119 + 8);
                    unsigned int v73 = v1188;
                    if (!v119)
                    {
                      if (v120)
                      {
LABEL_281:
                        if (v1240 >= (unint64_t)HIDWORD(v1240)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        unsigned int v80 = v1153;
                        *((void *)v1239 + v1240) = v88;
                        LODWORD(v1240) = v1240 + 1;
                      }
                      else
                      {
                        unsigned int v80 = v1153;
                      }
LABEL_293:
                      uint64_t v86 = *(void *)(v86 + 8);
                      if (!v86)
                      {
                        unsigned int v85 = v1247;
                        uint64_t v45 = (uint64_t)v1141;
                        char v255 = v1164;
LABEL_311:
                        uint64_t v162 = (*(uint64_t (**)(uint64_t, void))(*(void *)v1151 + 24))(v1151, *(void *)(v85[5] + 56));
                        uint64_t v163 = llvm::ConstantArray::get((llvm::PoisonValue *)v71, (llvm::Type *)v1244[0], LODWORD(v1244[1]));
                        if (v1138 == 28 && (v255 & 1) != 0)
                        {
                          uint64_t v164 = *(unsigned int *)(v45 + 240);
                          uint64_t v165 = *(void *)(v45 + 232);
                          if (v164)
                          {
                            uint64_t v165 = *(void *)(v45 + 232);
                            unint64_t v166 = *(unsigned int *)(v45 + 240);
                            do
                            {
                              unint64_t v167 = v166 >> 1;
                              uint64_t v168 = v165 + 16 * (v166 >> 1);
                              unsigned int v169 = *(_DWORD *)(v168 + 8);
                              uint64_t v170 = v168 + 16;
                              v166 += ~(v166 >> 1);
                              if (v169 < 2) {
                                uint64_t v165 = v170;
                              }
                              else {
                                unint64_t v166 = v167;
                              }
                            }
                            while (v166);
                          }
                          if (v165 == *(void *)(v45 + 232) + 16 * v164 || *(_DWORD *)(v165 + 8) != 2) {
                            uint64_t v165 = *(void *)(v45 + 232);
                          }
                          uint64_t v171 = *(void *)(*(void *)(*((void *)v1247 + 5) + 56) + 40);
                          for (uint64_t i = *(void *)(v171 + 16); i != v171 + 8; uint64_t i = *(void *)(i + 8))
                          {
                            uint64_t v173 = i - 56;
                            if (!i) {
                              uint64_t v173 = 0;
                            }
                            if ((*(_DWORD *)(*(void *)v173 + 8) & 0xFFFFFF00) == 0x200
                              && (*(unsigned char *)(v173 + 80) & 2) == 0)
                            {
                              if (i && *(unsigned char *)(v173 + 16) == 3)
                              {
                                if ((*(_DWORD *)(v173 + 20) & 0x7FFFFFF) != 0) {
                                  goto LABEL_343;
                                }
                              }
                              else if (*(unsigned char *)(v173 + 16) {
                                     || *(void *)(v173 + 72) != v173 + 72
                              }
                                     || (*(unsigned char *)(v173 + 34) & 0x80) != 0)
                              {
                                goto LABEL_343;
                              }
                            }
                          }
                          if (v1148 < (((unint64_t)*(unsigned int *)(v165 + 4) + 7) >> 3)) {
                            goto LABEL_341;
                          }
LABEL_343:
                          unsigned int v175 = (char *)operator new(0x78uLL);
                          *((_DWORD *)v175 + 13) = *((_DWORD *)v175 + 13) & 0x38000000 | 1;
                          *(void *)unsigned int v175 = 0;
                          *((void *)v175 + 1) = 0;
                          *((void *)v175 + 2) = 0;
                          *((void *)v175 + 3) = v175 + 32;
                          v1222 = "promotedConstantAlloca";
                          __int16 v1225 = 259;
                          v1155 = (uint64_t *)(v175 + 32);
                          llvm::GlobalVariable::GlobalVariable((unint64_t *)v175 + 4, v171, (llvm::PointerType *)v71, 1, 7, (unint64_t)v163, (const char **)&v1222, 0, 0, (llvm::Type *)0x100000002, 0);
                          if (v1136)
                          {
                            uint64_t v176 = (*(uint64_t (**)(uint64_t))(*(void *)v162 + 312))(v162);
                            (*(void (**)(uint64_t, uint64_t *, uint64_t, void, uint64_t))(*(void *)v162
                                                                                                 + 416))(v162, v1155, v176, 0, 9);
                            int v177 = (*(uint64_t (**)(uint64_t))(*(void *)v162 + 440))(v162);
                            (*(void (**)(uint64_t, void, uint64_t))(*(void *)v162 + 544))(v162, *(void *)v175, v45);
                            int v178 = (*(uint64_t (**)(uint64_t))(*(void *)v162 + 440))(v162);
                            (*(void (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*(void *)v162 + 8))(v162, 7, (v178 - v177), 1, 0, 1, 3);
                          }
                          *((_DWORD *)v175 + 16) = *((_DWORD *)v175 + 16) & 0xFFC0FFFF | v1135;
LABEL_349:
                          LODWORD(v61) = v1180;
                          if (!v1240)
                          {
LABEL_462:
                            int v256 = 1;
                            goto LABEL_463;
                          }
                          uint64_t v194 = (llvm::Type *)(*(_DWORD *)(*v1155 + 8) >> 8);
                          v1166 = (char *)v1239 + 8 * v1240;
                          int v195 = v1239;
                          while (2)
                          {
                            BOOL v196 = 0;
                            v1177 = v195;
                            unsigned int v197 = (uint64_t **)*v195;
                            uint64_t v1228 = **v197;
                            v1229 = &v1237;
                            v1230 = &v1238;
                            uint64_t v1231 = 0;
                            int v1232 = 0;
                            __int16 v1233 = 512;
                            char v1234 = 7;
                            v1226 = 0;
                            v1227 = 0;
                            uint64_t v1235 = 0;
                            uint64_t v1236 = 0;
                            v1237 = &unk_1F2616E88;
                            v1238 = &unk_1F2617008;
                            v1226 = v197[5];
                            v1227 = v197 + 3;
                            v1222 = &v1224;
                            uint64_t v1223 = 0x200000000;
                            uint64_t v198 = v197[6];
                            v1213 = v198;
                            if (v198)
                            {
                              llvm::MetadataTracking::track((uint64_t)&v1213, (unsigned __int8 *)v198, 2);
                              BOOL v196 = v1213;
                            }
                            sub_1CB8461A4((uint64_t)&v1222, 0, (uint64_t)v196);
                            if (v1213)
                            {
                              int v241 = *(unsigned __int8 *)v1213;
                              if ((v241 - 4) > 0x1E)
                              {
                                if ((v241 - 3) >= 0xFFFFFFFE) {
                                  int v244 = v1213;
                                }
                                else {
                                  int v244 = 0;
                                }
                                if ((v241 - 3) < 0xFFFFFFFE)
                                {
                                  if (v241 == 3) {
                                    *((void *)v1213 + 1) = 0;
                                  }
                                  goto LABEL_354;
                                }
                                unint64_t v243 = (unint64_t)v244 + 8;
                              }
                              else
                              {
                                if ((*((unsigned char *)v1213 + 1) & 0x7F) != 2 && !*((_DWORD *)v1213 + 3)) {
                                  goto LABEL_354;
                                }
                                uint64_t v242 = *((void *)v1213 + 2);
                                if ((v242 & 4) == 0) {
                                  goto LABEL_354;
                                }
                                unint64_t v243 = v242 & 0xFFFFFFFFFFFFFFF8;
                                if (!v243) {
                                  goto LABEL_354;
                                }
                              }
                              v1207 = &v1213;
                              sub_1CC5FA668(v243 + 16, &v1207);
                            }
LABEL_354:
                            int v199 = (uint64_t *)*v1177;
                            int v200 = *(unsigned __int8 *)(*v1177 + 16);
                            if (*v1177 && v200 == 62)
                            {
                              uint64_t v201 = *((_DWORD *)v199 + 5) & 0x7FFFFFF;
                              v1213 = &v1215;
                              v1214 = (void *)0x100000000;
                              unint64_t v202 = -(-32 * v201 + 32 * v1171);
                              if (v202 >= 0x21) {
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                              }
                              uint64_t v203 = &v1215;
                              if (&v199[4 * v1171 + -4 * v201] != v199)
                              {
                                uint64_t v204 = &v1215;
                                uint64_t v205 = 32 * v1171 - 32 * v201;
                                do
                                {
                                  *v204++ = *(uint64_t *)((char *)v199 + v205);
                                  v205 += 32;
                                }
                                while (v205);
                                uint64_t v203 = (uint64_t *)v1213;
                              }
                              uint64_t v211 = (v202 >> 5);
                              LODWORD(v1214) = v202 >> 5;
                              uint64_t v212 = v1155[3];
                              if ((*((unsigned char *)v199 + 17) & 2) != 0)
                              {
                                __int16 v1210 = 257;
                                uint64_t v213 = sub_1CC57EEA0((uint64_t *)&v1222, v212, v1155, v203, v211, (uint64_t)&v1207);
                              }
                              else
                              {
                                __int16 v1210 = 257;
                                uint64_t v213 = sub_1CC27CEC0((uint64_t *)&v1222, v212, v1155, v203, v211, (uint64_t)&v1207);
                              }
                              uint64_t v207 = (unsigned __int8 *)v213;
                              if (v1213 != &v1215) {
                                free(v1213);
                              }
                              goto LABEL_378;
                            }
                            if (v199 && v200 == 77)
                            {
                              uint64_t v206 = *v199;
                              if (!*v199
                                || *(unsigned char *)(v206 + 8) != 15
                                || (uint64_t v207 = (unsigned __int8 *)v1155, *(void *)(v206 + 24)))
                              {
                                unint64_t v208 = llvm::PointerType::get(**(llvm::PointerType ***)(v206 + 16), v194);
                                v1217[0] = 257;
                                uint64_t v207 = (unsigned __int8 *)v1155;
                                if (*v1155 != v208)
                                {
                                  if (*((unsigned __int8 *)v1155 + 16) <= 0x14u)
                                  {
                                    uint64_t v240 = (*((uint64_t (**)(void **, uint64_t, uint64_t *, unint64_t))*v1229
                                            + 28))(v1229, 49, v1155, v208);
                                    uint64_t v207 = (unsigned __int8 *)v240;
                                    if (v240)
                                    {
                                      if (*(unsigned __int8 *)(v240 + 16) >= 0x1Cu)
                                      {
                                        (*((void (**)(void **, uint64_t, void **, uint64_t *, uint64_t **))*v1230
                                         + 2))(v1230, v240, &v1213, v1226, v1227);
                                        if (v1223)
                                        {
                                          uint64_t v245 = (llvm::MDNode **)v1222;
                                          int v246 = (llvm::MDNode **)((char *)v1222 + 16 * v1223);
                                          do
                                          {
                                            llvm::Instruction::setMetadata((llvm::Instruction *)v207, *(_DWORD *)v245, v245[1]);
                                            v245 += 2;
                                          }
                                          while (v245 != v246);
                                        }
                                      }
                                    }
                                  }
                                  else
                                  {
                                    __int16 v1210 = 257;
                                    uint64_t v207 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v1155, v208, (const char **)&v1207, 0);
                                    (*((void (**)(void **, unsigned __int8 *, void **, uint64_t *, uint64_t **))*v1230
                                     + 2))(v1230, v207, &v1213, v1226, v1227);
                                    if (v1223)
                                    {
                                      unsigned int v209 = (llvm::MDNode **)v1222;
                                      uint64_t v210 = (llvm::MDNode **)((char *)v1222 + 16 * v1223);
                                      do
                                      {
                                        llvm::Instruction::setMetadata((llvm::Instruction *)v207, *(_DWORD *)v209, v209[1]);
                                        v209 += 2;
                                      }
                                      while (v209 != v210);
                                    }
                                  }
                                }
                              }
LABEL_378:
                              unsigned int v214 = (uint64_t *)*v1177;
                              uint64_t v215 = *(void *)(*v1177 + 8);
                              if (v215)
                              {
                                v1189 = (llvm::ConstantInt *)(v207 + 8);
                                do
                                {
                                  uint64_t v216 = *(void *)(v215 + 24);
                                  int v217 = *(unsigned __int8 *)(v216 + 16);
                                  if (v217 == 77)
                                  {
                                    v1207 = v1209;
                                    uint64_t v1208 = 0x800000000;
                                    uint64_t v218 = *(void *)(v216 + 8);
                                    if (v218)
                                    {
                                      unsigned int v219 = 0;
                                      do
                                      {
                                        uint64_t v220 = *(void *)(v218 + 24);
                                        if (*(unsigned char *)(v220 + 16) == 60)
                                        {
                                          if (v219 >= HIDWORD(v1208)) {
                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                          }
                                          *((void *)v1207 + v219) = v220;
                                          unsigned int v219 = v1208 + 1;
                                          LODWORD(v1208) = v1208 + 1;
                                        }
                                        uint64_t v218 = *(void *)(v218 + 8);
                                      }
                                      while (v218);
                                      if (v219)
                                      {
                                        int v225 = (llvm::PointerType ***)v1207;
                                        uint64_t v226 = (llvm::PointerType ***)((char *)v1207 + 8 * v219);
                                        do
                                        {
                                          int v227 = *v225;
                                          unint64_t v228 = llvm::PointerType::get(**v225, v194);
                                          __int16 v1267 = 257;
                                          int v229 = (llvm::Value *)v207;
                                          if (*(void *)v207 != v228)
                                          {
                                            if (v207[16] <= 0x14u)
                                            {
                                              int v229 = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v1229
                                                                     + 28))(v1229, 49, v207, v228);
                                              if (v229) {
                                                BOOL v230 = *((unsigned __int8 *)v229 + 16) >= 0x1Cu;
                                              }
                                              else {
                                                BOOL v230 = 0;
                                              }
                                              if (v230)
                                              {
                                                (*((void (**)(void **, llvm::Value *, long long *, uint64_t *, uint64_t **))*v1230
                                                 + 2))(v1230, v229, &v1265, v1226, v1227);
                                                if (v1223)
                                                {
                                                  int v238 = (llvm::MDNode **)v1222;
                                                  uint64_t v239 = (llvm::MDNode **)((char *)v1222 + 16 * v1223);
                                                  do
                                                  {
                                                    llvm::Instruction::setMetadata(v229, *(_DWORD *)v238, v238[1]);
                                                    v238 += 2;
                                                  }
                                                  while (v238 != v239);
                                                }
                                              }
                                            }
                                            else
                                            {
                                              v1217[0] = 257;
                                              int v229 = llvm::CastInst::Create(49, (uint64_t)v207, v228, (const char **)&v1213, 0);
                                              (*((void (**)(void **, llvm::Value *, long long *, uint64_t *, uint64_t **))*v1230
                                               + 2))(v1230, v229, &v1265, v1226, v1227);
                                              if (v1223)
                                              {
                                                BOOL v236 = (llvm::MDNode **)v1222;
                                                unsigned int v237 = (llvm::MDNode **)((char *)v1222 + 16 * v1223);
                                                do
                                                {
                                                  llvm::Instruction::setMetadata(v229, *(_DWORD *)v236, v236[1]);
                                                  v236 += 2;
                                                }
                                                while (v236 != v237);
                                              }
                                            }
                                          }
                                          uint64_t v231 = v227 - 4;
                                          if (*(v227 - 4))
                                          {
                                            *(void *)*(v227 - 2) = *(v227 - 3);
                                            uint64_t v232 = (uint64_t)*(v227 - 3);
                                            if (v232) {
                                              *(void *)(v232 + 16) = *(v227 - 2);
                                            }
                                          }
                                          *uint64_t v231 = v229;
                                          if (v229)
                                          {
                                            int v235 = (llvm::PointerType *)*((void *)v229 + 1);
                                            int v234 = (llvm::Value *)((char *)v229 + 8);
                                            uint64_t v233 = v235;
                                            *(v227 - 3) = v235;
                                            if (v235) {
                                              *((void *)v233 + 2) = v227 - 3;
                                            }
                                            *(v227 - 2) = v234;
                                            *(void *)int v234 = v231;
                                          }
                                          ++v225;
                                        }
                                        while (v225 != v226);
                                      }
                                    }
                                    if (v1249 >= (unint64_t)HIDWORD(v1249)) {
                                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                                    }
                                    *((void *)v1248 + v1249) = v216;
                                    LODWORD(v1249) = v1249 + 1;
                                    uint64_t v215 = *(void *)(v215 + 8);
                                    if (v1207 != v1209) {
                                      free(v1207);
                                    }
                                  }
                                  else if (v217 == 61)
                                  {
                                    uint64_t v215 = *(void *)(v215 + 8);
                                  }
                                  else
                                  {
                                    if (v217 == 60) {
                                      uint64_t v221 = *(void *)(v215 + 24);
                                    }
                                    else {
                                      uint64_t v221 = 0;
                                    }
                                    uint64_t v215 = *(void *)(v215 + 8);
                                    uint64_t v222 = (unsigned __int8 **)(v221 - 32);
                                    if (*(void *)(v221 - 32))
                                    {
                                      **(void **)(v221 - 16) = *(void *)(v221 - 24);
                                      uint64_t v223 = *(void *)(v221 - 24);
                                      if (v223) {
                                        *(void *)(v223 + 16) = *(void *)(v221 - 16);
                                      }
                                    }
                                    *uint64_t v222 = v207;
                                    if (v207)
                                    {
                                      uint64_t v224 = *(void *)v1189;
                                      *(void *)(v221 - 24) = *(void *)v1189;
                                      if (v224) {
                                        *(void *)(v224 + 16) = v221 - 24;
                                      }
                                      *(void *)(v221 - 16) = v1189;
                                      *(void *)v1189 = v222;
                                    }
                                  }
                                }
                                while (v215);
                                unsigned int v214 = (uint64_t *)*v1177;
                              }
                              if (v1249 >= (unint64_t)HIDWORD(v1249)) {
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                              }
                              *((void *)v1248 + v1249) = v214;
                              LODWORD(v1249) = v1249 + 1;
                            }
                            if (v1222 != &v1224) {
                              free(v1222);
                            }
                            int v195 = v1177 + 1;
                            LODWORD(v61) = v1180;
                            if (v1177 + 1 == (void *)v1166) {
                              goto LABEL_462;
                            }
                            continue;
                          }
                        }
                        int v174 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))v162)(v162, 9, 0, 1, 3);
                        if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v1151 + 64))(v1151) + 8) == v174) {
                          goto LABEL_338;
                        }
                        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)v162 + 8))(v162, 9, 1, 1, 0, 1, 3);
                        uint64_t v179 = v1247;
                        uint64_t v180 = (char *)operator new(0x78uLL);
                        int v181 = v180 + 32;
                        *((_DWORD *)v180 + 13) = *((_DWORD *)v180 + 13) & 0x38000000 | 1;
                        *(void *)uint64_t v180 = 0;
                        *((void *)v180 + 1) = 0;
                        *((void *)v180 + 2) = 0;
                        *((void *)v180 + 3) = v180 + 32;
                        uint64_t v182 = *(void *)(*(void *)(v179[5] + 56) + 40);
                        v1222 = "promotedConstantAlloca";
                        __int16 v1225 = 259;
                        llvm::GlobalVariable::GlobalVariable((unint64_t *)v180 + 4, v182, (llvm::PointerType *)v71, 1, 0, (unint64_t)v163, (const char **)&v1222, 0, 0, (llvm::Type *)0x100000040, 0);
                        uint64_t v183 = llvm::UniqueStringSaver::save(***((void ***)v180 + 4) + 2136, "constant_literals", 0x11uLL);
                        uint64_t v185 = v184;
                        uint64_t v186 = ***((void ***)v180 + 4);
                        v1222 = v180 + 32;
                        int v187 = *(_DWORD *)(v186 + 2520);
                        v1155 = (uint64_t *)(v180 + 32);
                        if (v187)
                        {
                          uint64_t v188 = *(void *)(v186 + 2504);
                          int v189 = v187 - 1;
                          unsigned int v190 = v189 & ((v181 >> 4) ^ (v181 >> 9));
                          unsigned int v191 = (char **)(v188 + 24 * v190);
                          uint64_t v192 = *v191;
                          if (*v191 == v181)
                          {
LABEL_348:
                            v191[1] = v183;
                            v191[2] = v185;
                            *((_DWORD *)v180 + 16) = *((_DWORD *)v180 + 16) & 0xFFBFFFFF | ((v185 != 0) << 22);
                            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v162 + 144))(v162, 8, v1155);
                            uint64_t v193 = (*(uint64_t (**)(uint64_t))(*(void *)v162 + 312))(v162);
                            (*(void (**)(uint64_t, uint64_t *, uint64_t, void, uint64_t))(*(void *)v162
                                                                                                 + 416))(v162, v1155, v193, 0, 9);
                            (*(void (**)(uint64_t, void, uint64_t))(*(void *)v162 + 544))(v162, *(void *)v180, v45);
                            unsigned int v1148 = v80;
                            goto LABEL_349;
                          }
                          int v257 = 0;
                          int v258 = 1;
                          while (v192 != (char *)-4096)
                          {
                            if (v257) {
                              BOOL v259 = 0;
                            }
                            else {
                              BOOL v259 = v192 == (char *)-8192;
                            }
                            if (v259) {
                              int v257 = v191;
                            }
                            unsigned int v260 = v190 + v258++;
                            unsigned int v190 = v260 & v189;
                            unsigned int v191 = (char **)(v188 + 24 * v190);
                            uint64_t v192 = *v191;
                            if (*v191 == (char *)v1155) {
                              goto LABEL_348;
                            }
                          }
                          if (v257) {
                            uint64_t v261 = v257;
                          }
                          else {
                            uint64_t v261 = v191;
                          }
                        }
                        else
                        {
                          uint64_t v261 = 0;
                        }
                        unsigned int v191 = (char **)sub_1CC5BF31C(v186 + 2504, (uint64_t)&v1222, (uint64_t *)&v1222, v261);
                        uint64_t v262 = (char *)v1222;
                        v191[1] = 0;
                        v191[2] = 0;
                        *unsigned int v191 = v262;
                        goto LABEL_348;
                      }
                      goto LABEL_116;
                    }
                  }
                }
                uint64_t v90 = *(_DWORD *)(v88 + 20) & 0x7FFFFFF;
                if ((int)v90 - 1 <= v73) {
                  goto LABEL_336;
                }
                uint64_t v91 = v88 - 32 * v90;
                if (v90 != 1)
                {
                  unsigned int v92 = 1;
                  while (*(unsigned char *)(*(void *)(v91 + 32 * v92) + 16) == 16)
                  {
                    if (v90 == ++v92) {
                      goto LABEL_123;
                    }
                  }
                  for (uint64_t j = *(void *)(v88 + 8); j; uint64_t j = *(void *)(j + 8))
                  {
                    uint64_t v143 = *(void *)(j + 24);
                    int v144 = *(unsigned __int8 *)(v143 + 16);
                    if (v143 && v144 == 77)
                    {
                      while (1)
                      {
                        uint64_t v143 = *(void *)(v143 + 8);
                        if (!v143) {
                          break;
                        }
                        if (*(unsigned char *)(*(void *)(v143 + 24) + 16) != 60) {
                          goto LABEL_336;
                        }
                      }
                    }
                    else if (v144 != 60)
                    {
                      goto LABEL_336;
                    }
                  }
                  if (v1240 >= (unint64_t)HIDWORD(v1240)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v1239 + v1240) = v88;
                  LODWORD(v1240) = v1240 + 1;
                  char v1164 = 1;
                  goto LABEL_293;
                }
LABEL_123:
                uint64_t v93 = *(void *)(v91 + 32 * v87);
                if (!v93 || *(unsigned char *)(v93 + 16) != 16) {
                  goto LABEL_336;
                }
                uint64_t v95 = (void *)(v93 + 24);
                if (*(_DWORD *)(v93 + 32) >= 0x41u) {
                  uint64_t v95 = (void *)*v95;
                }
                if (*v95) {
                  goto LABEL_336;
                }
                uint64_t v96 = *(void *)(v88 + 8);
                if (!v96) {
                  goto LABEL_293;
                }
                uint64_t v97 = 0;
                char v98 = 0;
                while (2)
                {
                  uint64_t v99 = *(void *)(v96 + 24);
                  int v100 = *(unsigned __int8 *)(v99 + 16);
                  if (v100 == 60) {
                    goto LABEL_141;
                  }
                  if (v100 != 77)
                  {
                    BOOL v105 = v100 == 61 && v97 == 0;
                    uint64_t v97 = *(void *)(v96 + 24);
                    if (!v105) {
                      goto LABEL_341;
                    }
                    goto LABEL_152;
                  }
                  uint64_t v101 = *(void *)(v99 + 8);
                  if (!v101)
                  {
LABEL_141:
                    char v98 = 1;
                    goto LABEL_152;
                  }
                  unsigned int v102 = 0;
                  uint64_t v103 = v101;
                  do
                  {
                    ++v102;
                    uint64_t v103 = *(void *)(v103 + 8);
                  }
                  while (v103);
                  uint64_t v104 = v101;
                  while (*(unsigned char *)(*(void *)(v104 + 24) + 16) == 60)
                  {
                    uint64_t v104 = *(void *)(v104 + 8);
                    if (!v104) {
                      goto LABEL_141;
                    }
                  }
                  if (v102 > 1) {
                    goto LABEL_341;
                  }
                  uint64_t v106 = *(void *)(v101 + 24);
                  if (*(unsigned char *)(v106 + 16) != 61) {
                    uint64_t v106 = 0;
                  }
                  if (v106) {
                    uint64_t v97 = v106;
                  }
LABEL_152:
                  uint64_t v96 = *(void *)(v96 + 8);
                  if (v96) {
                    continue;
                  }
                  break;
                }
                if (v98)
                {
                  if (v1240 >= (unint64_t)HIDWORD(v1240)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v1239 + v1240) = v88;
                  LODWORD(v1240) = v1240 + 1;
                }
                if (!v97) {
                  goto LABEL_293;
                }
                uint64_t v107 = *(_WORD **)(v97 - 64);
                if (!v107) {
                  goto LABEL_341;
                }
                unsigned int v108 = *((unsigned __int8 *)v107 + 16);
                if (v108 > 0x14) {
                  goto LABEL_341;
                }
                uint64_t v109 = *(void *)(v88 - 32 * (*(_DWORD *)(v88 + 20) & 0x7FFFFFF) + 32 * v1165);
                BOOL v110 = v109 && *(unsigned char *)(v109 + 16) == 16;
                if (!v110
                  || v108 == 5
                  && (v107[9] != 48
                   || *(unsigned char *)(*(void *)&v107[-16 * (*((_DWORD *)v107 + 5) & 0x7FFFFFF)] + 16) != 16))
                {
                  goto LABEL_341;
                }
                int v111 = (void *)(v109 + 24);
                if (*(_DWORD *)(v109 + 32) >= 0x41u) {
                  int v111 = (void *)*v111;
                }
                unint64_t v112 = (void *)*v111;
                if (*v111 >= *(void *)(v71 + 32))
                {
LABEL_341:
                  int v256 = 0;
                  goto LABEL_342;
                }
                uint64_t v1161 = v87;
                unsigned int v1152 = v80;
                char v113 = (llvm::Type **)*((void *)v1244[0] + (void)v112);
                v1222 = v113;
                uint64_t v114 = (llvm::Type *)v107;
                if (*(llvm::Type **)v107 == *v113) {
                  goto LABEL_260;
                }
                uint64_t v116 = sub_1CB83544C((uint64_t)v1141, *(void *)v107);
                if (v115 == 1) {
                uint64_t v118 = sub_1CB83544C((uint64_t)v1141, (uint64_t)*v113);
                }
                if (v117 == 1) {
                uint64_t v107 = v114;
                }
                if (((v116 + 7) & 0xFFFFFFFFFFFFFFF8) > ((v118 + 7) & 0xFFFFFFFFFFFFFFF8)
                  || (*(_DWORD *)(v88 + 20) & 0x7FFFFFFu) - 1 <= v1165)
                {
LABEL_260:
                  uint64_t v146 = *(void *)v107;
                  uint64_t v147 = *v113;
                  if (*(llvm::Type **)v107 == *v113 && (*(_DWORD *)(v88 + 20) & 0x7FFFFFF) == v1176)
                  {
LABEL_262:
                    *((void *)v1244[0] + (void)v112) = v107;
                  }
                  else
                  {
                    if (!v146 || (*(_DWORD *)(v146 + 8) & 0xFE) != 0x12) {
                      goto LABEL_338;
                    }
                    if ((*(_DWORD *)(v88 + 20) & 0x7FFFFFFu) - 1 > v1165)
                    {
                      uint64_t v1144 = sub_1CB83544C((uint64_t)v1141, *(void *)v107);
                      if (v148 == 1) {
                      unint64_t v150 = sub_1CC5CA218(v1141, *v113);
                      }
                      if (v149 == 1) {
                      uint64_t v107 = v114;
                      }
                      if (!(((v1144 + 7) & 0xFFFFFFFFFFFFFFF8) % v150))
                      {
                        if (*(_DWORD *)(v146 + 32))
                        {
                          unint64_t v157 = 0;
                          uint64_t v158 = 8 * (void)v112;
                          while (1)
                          {
                            v1207 = *(void **)((char *)v1244[0] + 8 * v157 + v158);
                            uint64_t v159 = (llvm::Type *)llvm::Constant::getAggregateElement((llvm::Constant *)v107, (llvm::Type *)v157);
                            if (!sub_1CC7E5958(v88, v159, (const llvm::APFloat *)&v1207, v1176, (uint64_t)v1141))goto LABEL_338; {
                            *(void *)((char *)v1244[0] + 8 * v157++ + v158) = v1207;
                            }
                            uint64_t v107 = v114;
                            if (v157 >= *(unsigned int *)(v146 + 32)) {
                              goto LABEL_277;
                            }
                          }
                        }
                        goto LABEL_277;
                      }
                      uint64_t v147 = *v113;
                    }
                    if (*(llvm::Type **)(v146 + 24) != v147 || (*(_DWORD *)(v88 + 20) & 0x7FFFFFF) != v1176) {
                      goto LABEL_338;
                    }
                    if (*(_DWORD *)(v146 + 32))
                    {
                      unint64_t v151 = 0;
                      uint64_t v152 = 8 * (void)v112;
                      do
                      {
                        uint64_t v153 = llvm::Constant::getAggregateElement((llvm::Constant *)v107, (llvm::Type *)v151);
                        uint64_t v107 = v114;
                        *(void *)((char *)v1244[0] + 8 * v151++ + v152) = v153;
                      }
                      while (v151 < *(unsigned int *)(v146 + 32));
                    }
                  }
LABEL_277:
                  if (v1249 >= (unint64_t)HIDWORD(v1249)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  unsigned int v80 = v1152;
                  *((void *)v1248 + v1249) = v97;
                  LODWORD(v1249) = v1249 + 1;
                  unsigned int v73 = v1188;
                  goto LABEL_292;
                }
                if (sub_1CC7E5958(v88, v114, (const llvm::APFloat *)&v1222, v1176, (uint64_t)v1141))
                {
                  uint64_t v107 = v1222;
                  goto LABEL_262;
                }
LABEL_338:
                int v256 = 0;
LABEL_342:
                LODWORD(v61) = v1180;
LABEL_463:
                if (v1239 != &v1241) {
                  free(v1239);
                }
                if (v1244[0] != &v1245) {
                  free(v1244[0]);
                }
                unsigned __int8 v1262 = v256;
                uint64_t v45 = (uint64_t)v1141;
                if (v256)
                {
                  unsigned int v247 = v1249;
                  if (v1249)
                  {
                    do
                    {
                      uint64_t v250 = *((void *)v1248 + v247 - 1);
                      LODWORD(v1249) = v247 - 1;
                      if (v250 && *(unsigned char *)(v250 + 16) == 61)
                      {
                        int v251 = *(_DWORD *)(v250 + 20);
                        if ((v251 & 0x40000000) != 0)
                        {
                          uint64_t v248 = *(void *)(v250 - 8);
                          uint64_t v249 = v251 & 0x7FFFFFF;
                        }
                        else
                        {
                          uint64_t v249 = v251 & 0x7FFFFFF;
                          uint64_t v248 = v250 - 32 * v249;
                        }
                        if (v249)
                        {
                          uint64_t v252 = 32 * v249;
                          uint64_t v253 = (void **)(v248 + 16);
                          do
                          {
                            if (*(v253 - 2))
                            {
                              **uint64_t v253 = *(v253 - 1);
                              uint64_t v254 = (uint64_t)*(v253 - 1);
                              if (v254) {
                                *(void *)(v254 + 16) = *v253;
                              }
                            }
                            *(v253 - 2) = 0;
                            v253 += 4;
                            v252 -= 32;
                          }
                          while (v252);
                        }
                        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                      }
                      v1242 = 0;
                      llvm::RecursivelyDeleteTriviallyDeadInstructions(v250, 0, 0, (uint64_t)&v1239);
                      if (v1242 == &v1239)
                      {
                        (*((void (**)(void **))v1239 + 4))(&v1239);
                        LODWORD(v61) = v1180;
                      }
                      else
                      {
                        LODWORD(v61) = v1180;
                        if (v1242) {
                          (*((void (**)(void **))*v1242 + 5))(v1242);
                        }
                      }
                      unsigned int v247 = v1249;
                    }
                    while (v1249);
                    int v81 = v1262;
                  }
                  else
                  {
                    int v81 = 1;
                  }
                }
                else
                {
                  int v81 = 0;
                }
LABEL_104:
                BOOL v82 = v81 != 0;
                if (v1257 != v1259) {
                  free(v1257);
                }
                if (v1248 != &v1250) {
                  free(v1248);
                }
                uint64_t v61 = v61 | v82;
                uint64_t v70 = (void **)((char *)v1193 + 8);
              }
              while ((char *)v1193 + 8 != v1184);
              uint64_t v70 = (void **)v1218;
              uint64_t v39 = v1169;
              unsigned int v60 = v1139;
              unsigned int v62 = v1140;
LABEL_508:
              if (v70 != (void **)v1220)
              {
                int v263 = v60;
                free(v70);
                unsigned int v62 = v1140;
                unsigned int v60 = v263;
                uint64_t v39 = v1169;
              }
LABEL_510:
              unsigned int v60 = (void *)v60[1];
              if (v60 == v1142)
              {
LABEL_513:
                v1137 |= v61 & 1;
                uint64_t v38 = v1134;
                goto LABEL_514;
              }
            }
          }
          char v12 = 1;
          goto LABEL_23;
        }
LABEL_514:
        uint64_t v38 = (void *)v38[1];
        if (v38 == (void *)((char *)v1150 + 24)) {
          goto LABEL_22;
        }
      }
    }
    char v1137 = 0;
    char v12 = 0;
  }
  uint64_t v1160 = *(void *)v13;
  uint64_t inserted = llvm::Module::getOrInsertNamedMetadata(v13, "agx.common_store_dma", 0x14uLL);
  if (*(_DWORD *)(v1169 + 40) != 29) {
    goto LABEL_29;
  }
  v1218 = "agx.may_be_called_from_intersection_function";
  __int16 v1221 = 259;
  uint64_t v14 = llvm::Module::getNamedMetadata(v1150, (const char **)&v1218);
  if (!v14) {
    goto LABEL_29;
  }
  uint64_t v15 = *(void *)(*(void *)(***(void ***)(v14 + 48) - 8 * *(unsigned int *)(***(void ***)(v14 + 48) + 8))
                  + 128);
  uint64_t v16 = (void *)(v15 + 24);
  if (*(_DWORD *)(v15 + 32) >= 0x41u) {
    uint64_t v16 = (void *)*v16;
  }
  if (!*v16)
  {
LABEL_29:
    uint64_t v17 = *(void *)(v1169 + 32);
    unint64_t v18 = *(void *)(v1169 + 44);
    v1222 = &v1224;
    uint64_t v1223 = 0x300000000;
    v1239 = v1243;
    v1240 = v1243;
    uint64_t v1241 = 1;
    LODWORD(v1242) = 0;
    v1218 = (void *)1;
    for (uint64_t k = 8; k != 232; k += 56)
      *(void **)((char *)&v1218 + k) = (void *)-4096;
    LODWORD(v1265) = 0;
    if (!sub_1CD114510(v1150, v1151, (uint64_t)&v1222, (uint64_t)&v1239, (int *)&v1218, &v1265))
    {
LABEL_648:
      sub_1CC7E5E14((uint64_t)&v1218);
      if (v1240 != v1239) {
        free(v1240);
      }
      if (v1222 != &v1224) {
        free(v1222);
      }
      goto LABEL_652;
    }
    char v1170 = v12;
    v1183 = (llvm::PointerType *)(**(void **)v1150 + 1912);
    uint64_t v20 = (llvm::PointerType *)llvm::PointerType::get(v1183, (llvm::Type *)2);
    int v21 = (char *)operator new(0x78uLL);
    *((_DWORD *)v21 + 13) = *((_DWORD *)v21 + 13) & 0x38000000 | 1;
    uint64_t v22 = v21 + 32;
    *(void *)int v21 = 0;
    *((void *)v21 + 1) = 0;
    *((void *)v21 + 2) = 0;
    *((void *)v21 + 3) = v21 + 32;
    unint64_t v23 = HIDWORD(v18);
    v1247 = "literalsbuffer";
    __int16 v1251 = 259;
    llvm::GlobalVariable::GlobalVariable((unint64_t *)v21 + 4, (uint64_t)v1150, v20, 1, 0, 0, (const char **)&v1247, 0, 0, (llvm::Type *)0x100000040, 0);
    int v24 = (llvm::ValueAsMetadata *)llvm::UniqueStringSaver::save(***((void ***)v21 + 4) + 2136, "literals_buffer", 0xFuLL);
    uint64_t v26 = v25;
    v1187 = (llvm::ConstantInt *)v21;
    v1192 = (llvm::ValueAsMetadata *)(v21 + 32);
    uint64_t v27 = ***((void ***)v21 + 4);
    v1247 = v21 + 32;
    int v28 = *(_DWORD *)(v27 + 2520);
    if (v28)
    {
      uint64_t v29 = *(void *)(v27 + 2504);
      int v30 = v28 - 1;
      unsigned int v31 = v30 & ((v22 >> 4) ^ (v22 >> 9));
      int v32 = (llvm::ValueAsMetadata **)(v29 + 24 * v31);
      unint64_t v33 = *v32;
      if (*v32 == (llvm::ValueAsMetadata *)v22)
      {
LABEL_34:
        v32[1] = v24;
        int v32[2] = v26;
        *((_DWORD *)v21 + 16) = (((4128768 - (__clz(v23) << 16)) & 0xFF0000) + 0x10000) | ((v26 != 0) << 22) | *((_DWORD *)v21 + 16) & 0xFF80FFFF;
        v1247 = "agx.driver_bindings";
        __int16 v1251 = 259;
        uint64_t v34 = llvm::Module::getNamedMetadata(v1150, (const char **)&v1247);
        if (v34)
        {
          uint64_t v36 = v34;
          BOOL v37 = 0;
        }
        else
        {
          v1247 = "agx.compute_driver_bindings";
          __int16 v1251 = 259;
          uint64_t v36 = llvm::Module::getNamedMetadata(v1150, (const char **)&v1247);
          BOOL v37 = v36 != 0;
        }
        uint64_t v266 = *(void *)v1150;
        v1247 = &v1249;
        v1248 = (void *)0x200000000;
        uint64_t v1254 = v266;
        v1255 = &v1260;
        v1256 = &v1261;
        v1257 = 0;
        LODWORD(v1258) = 0;
        WORD2(v1258) = 512;
        BYTE6(v1258) = 7;
        uint64_t v1253 = 0;
        uint64_t v1252 = 0;
        v1259[1] = 0;
        v1259[0] = 0;
        v1260 = &unk_1F2616E88;
        v1261 = &unk_1F2617008;
        if (v36)
        {
          *(_OWORD *)v1244 = 0u;
          long long v1245 = 0u;
          v1244[0] = (void *)llvm::ValueAsMetadata::get(v1192, v35);
          unsigned int v268 = *(llvm::ConstantInt **)(*(void *)v1254 + 1960);
          unsigned int v269 = *(_DWORD *)(*(void *)v1254 + 1968);
          LODWORD(v1208) = v269 >> 8;
          if (v269 >> 8 > 0x40) {
            operator new[]();
          }
          if (v269 <= 0xFF) {
            LOBYTE(v270) = 0;
          }
          else {
            unint64_t v270 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v269) + 63);
          }
          v1207 = (void *)(v270 & 6);
          uint64_t v272 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v268, (llvm::LLVMContext *)&v1207, v267);
          if (v1208 >= 0x41 && v1207) {
            MEMORY[0x1D25D9CB0](v1207, 0x1000C8000313F17);
          }
          v1244[1] = (void *)llvm::ValueAsMetadata::get(v272, v271);
          uint64_t v274 = *(llvm::ConstantInt **)(*(void *)v1254 + 1960);
          unsigned int v275 = *(_DWORD *)(*(void *)v1254 + 1968);
          LODWORD(v1208) = v275 >> 8;
          if (v275 >> 8 >= 0x41) {
            operator new[]();
          }
          v1207 = 0;
          uint64_t v277 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v274, (llvm::LLVMContext *)&v1207, v273);
          if (v1208 >= 0x41 && v1207) {
            MEMORY[0x1D25D9CB0](v1207, 0x1000C8000313F17);
          }
          *(void *)&long long v1245 = llvm::ValueAsMetadata::get(v277, v276);
          uint64_t v279 = *(llvm::ConstantInt **)(*(void *)v1254 + 1960);
          unsigned int v280 = *(_DWORD *)(*(void *)v1254 + 1968);
          LODWORD(v1208) = v280 >> 8;
          if (v280 >> 8 > 0x40) {
            operator new[]();
          }
          if (v280 <= 0xFF) {
            LODWORD(v281) = 0;
          }
          else {
            unint64_t v281 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v280) + 63);
          }
          v1207 = (void *)(v281 & v1265);
          uint64_t v283 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v279, (llvm::LLVMContext *)&v1207, v278);
          if (v1208 >= 0x41 && v1207) {
            MEMORY[0x1D25D9CB0](v1207, 0x1000C8000313F17);
          }
          *((void *)&v1245 + 1) = llvm::ValueAsMetadata::get(v283, v282);
          Impl = llvm::MDTuple::getImpl(*(void *)v1150, v1244, 4, 0, 1);
          if (v37)
          {
            uint64_t v285 = *(void *)v1150;
            v1207 = Impl;
            Impl = llvm::MDTuple::getImpl(v285, &v1207, 1, 0, 1);
          }
          v1207 = Impl;
          uint64_t v286 = *(void *)(v36 + 48);
          uint64_t v287 = *(unsigned int *)(v286 + 8);
          if (v287 >= *(_DWORD *)(v286 + 12))
          {
            sub_1CC608328(v286, (unsigned __int8 **)&v1207);
          }
          else
          {
            unsigned int v288 = (llvm::MDNode **)(*(void *)v286 + 8 * v287);
            void *v288 = Impl;
            if (Impl)
            {
              llvm::MetadataTracking::track((uint64_t)v288, (unsigned __int8 *)Impl, 2);
              LODWORD(v287) = *(_DWORD *)(v286 + 8);
            }
            *(_DWORD *)(v286 + 8) = v287 + 1;
          }
        }
        if (v1240 == v1239) {
          uint64_t v289 = (uint64_t *)((char *)&v1241 + 4);
        }
        else {
          uint64_t v289 = &v1241;
        }
        uint64_t v290 = *(unsigned int *)v289;
        if (v290)
        {
          uint64_t v291 = 8 * v290;
          uint64_t v292 = (uint64_t *)v1240;
          while ((unint64_t)*v292 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v292;
            v291 -= 8;
            if (!v291) {
              goto LABEL_554;
            }
          }
        }
        else
        {
          uint64_t v292 = (uint64_t *)v1240;
        }
        size_t v293 = (unint64_t *)((char *)v1240 + 8 * v290);
        if (v292 != (uint64_t *)v293)
        {
          uint64_t v294 = *v292;
LABEL_550:
          (*(void (**)(uint64_t, llvm::ValueAsMetadata *, uint64_t, uint64_t))(*(void *)v294 + 496))(v294, v1192, v17, 10);
          llvm::FunctionGroup::setGlobalResource(v294, 24, (uint64_t)v1192);
          int v295 = (unint64_t *)(v292 + 1);
          while (v295 != v293)
          {
            unint64_t v296 = *v295++;
            uint64_t v294 = v296;
            if (v296 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              uint64_t v292 = (uint64_t *)(v295 - 1);
              goto LABEL_550;
            }
          }
        }
LABEL_554:
        if (v1223)
        {
          uint64_t v297 = (uint64_t *)v1222;
          int v298 = (uint64_t *)((char *)v1222 + 8 * v1223);
          v1173 = v298;
          do
          {
            uint64_t v299 = *v297;
            uint64_t v300 = sub_1CC7E5CD8((uint64_t)&v1218, *v297);
            uint64_t v301 = &v1219;
            if ((v1218 & 1) == 0) {
              uint64_t v301 = (uint64_t *)v1219;
            }
            unsigned int v302 = v1220[0];
            if (v1218) {
              unsigned int v302 = 4;
            }
            if (&v301[7 * v302] != (uint64_t *)v300)
            {
              uint64_t v303 = *(unsigned int *)(v300 + 40);
              if (v303)
              {
                char v304 = *(void **)(v300 + 32);
                uint64_t v305 = &v304[v303];
                v1196 &= 0xFFFFFFFF00000000;
                while (1)
                {
                  uint64_t v306 = *v304;
                  uint64_t v307 = (*(uint64_t (**)(uint64_t, void))(*(void *)v1151 + 24))(v1151, *v304);
                  unsigned int v308 = sub_1CD1117B0((llvm::GlobalValue *)v299, 0, v307, 1);
                  uint64_t v309 = *(void *)(v306 + 80);
                  if (v309) {
                    uint64_t v310 = v309 - 24;
                  }
                  else {
                    uint64_t v310 = 0;
                  }
                  sub_1CBF5385C((uint64_t)&v1247, v310, *(void *)(v310 + 48));
                  int v311 = (llvm::Type *)*((void *)v1187 + 7);
                  __int16 v1210 = 257;
                  char v312 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v1252 + 56) + 40) + 272), v311, 1);
                  uint64_t v313 = operator new(0x60uLL);
                  v313[13] = v313[13] & 0x38000000 | 1;
                  std::string v314 = (llvm::Instruction *)(v313 + 8);
                  *(void *)uint64_t v313 = 0;
                  *((void *)v313 + 1) = 0;
                  *((void *)v313 + 2) = 0;
                  *((void *)v313 + 3) = v313 + 8;
                  __int16 v1246 = 257;
                  llvm::LoadInst::LoadInst((llvm::Value *)(v313 + 8), (uint64_t)v311, (uint64_t)v1192, (const char **)v1244, 0, v312, 0);
                  (*((void (**)(void **, llvm::Instruction *, void **, uint64_t, uint64_t))*v1256 + 2))(v1256, v314, &v1207, v1252, v1253);
                  if (v1248)
                  {
                    uint64_t v332 = (llvm::MDNode **)v1247;
                    uint64_t v333 = (llvm::MDNode **)((char *)v1247 + 16 * v1248);
                    do
                    {
                      llvm::Instruction::setMetadata(v314, *(_DWORD *)v332, v332[1]);
                      v332 += 2;
                    }
                    while (v332 != v333);
                  }
                  v1213 = 0;
                  uint64_t v316 = v308;
                  uint64_t v317 = *(llvm::ConstantInt **)(*(void *)v1254 + 1960);
                  unsigned int v318 = *(_DWORD *)(*(void *)v1254 + 1968);
                  LODWORD(v1244[1]) = v318 >> 8;
                  if (v318 >> 8 > 0x40) {
                    operator new[]();
                  }
                  if (v318 <= 0xFF) {
                    unint64_t v319 = 0;
                  }
                  else {
                    unint64_t v319 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v318) + 63);
                  }
                  v1244[0] = (void *)(v319 & v316);
                  uint64_t v320 = llvm::ConstantInt::get(v317, (llvm::LLVMContext *)v1244, v315);
                  if (LODWORD(v1244[1]) >= 0x41 && v1244[0]) {
                    MEMORY[0x1D25D9CB0](v1244[0], 0x1000C8000313F17);
                  }
                  v1213 = v320;
                  __int16 v1246 = 257;
                  uint64_t v321 = sub_1CC27CEC0((uint64_t *)&v1247, (uint64_t)v1183, (uint64_t *)v314, (uint64_t *)&v1213, 1, (uint64_t)v1244);
                  uint64_t v322 = (unsigned __int8 *)v321;
                  if (v299 && *(unsigned char *)(v299 + 16) == 3)
                  {
                    __int16 v323 = *(llvm::PointerType **)v299;
                    if ((*(_DWORD *)(v299 + 20) & 0x7FFFFFF) != 0) {
                      goto LABEL_584;
                    }
                  }
                  else
                  {
                    if (*(unsigned char *)(v299 + 16) || *(void *)(v299 + 72) != v299 + 72)
                    {
                      __int16 v323 = *(llvm::PointerType **)v299;
LABEL_584:
                      __int16 v1210 = 257;
                      if (*(llvm::PointerType **)v321 != v323)
                      {
                        if (*(unsigned __int8 *)(v321 + 16) <= 0x14u)
                        {
                          uint64_t v329 = (*((uint64_t (**)(void **, uint64_t, uint64_t, llvm::PointerType *))*v1255 + 28))(v1255, 49, v321, v323);
                          uint64_t v322 = (unsigned __int8 *)v329;
                          if (v329)
                          {
                            if (*(unsigned __int8 *)(v329 + 16) >= 0x1Cu)
                            {
                              (*((void (**)(void **, uint64_t, void **, uint64_t, uint64_t))*v1256 + 2))(v1256, v329, &v1207, v1252, v1253);
                              if (v1248)
                              {
                                uint64_t v347 = (llvm::MDNode **)v1247;
                                int v348 = (llvm::MDNode **)((char *)v1247 + 16 * v1248);
                                do
                                {
                                  llvm::Instruction::setMetadata((llvm::Instruction *)v322, *(_DWORD *)v347, v347[1]);
                                  v347 += 2;
                                }
                                while (v347 != v348);
                              }
                            }
                          }
                        }
                        else
                        {
                          __int16 v1246 = 257;
                          uint64_t v322 = (unsigned __int8 *)llvm::CastInst::Create(49, v321, (uint64_t)v323, (const char **)v1244, 0);
                          (*((void (**)(void **, unsigned __int8 *, void **, uint64_t, uint64_t))*v1256 + 2))(v1256, v322, &v1207, v1252, v1253);
                          if (v1248)
                          {
                            uint64_t v327 = (llvm::MDNode **)v1247;
                            uint64_t v328 = (llvm::MDNode **)((char *)v1247 + 16 * v1248);
                            do
                            {
                              llvm::Instruction::setMetadata((llvm::Instruction *)v322, *(_DWORD *)v327, v327[1]);
                              v327 += 2;
                            }
                            while (v327 != v328);
                          }
                        }
                      }
                      uint64_t v330 = (llvm::Instruction *)v322;
                      goto LABEL_603;
                    }
                    __int16 v323 = *(llvm::PointerType **)v299;
                    if ((*(unsigned char *)(v299 + 34) & 0x80) != 0) {
                      goto LABEL_584;
                    }
                  }
                  unint64_t v324 = llvm::PointerType::get(v323, (llvm::Type *)2);
                  __int16 v1210 = 257;
                  if (*(void *)v322 != v324)
                  {
                    if (v322[16] <= 0x14u)
                    {
                      uint64_t v331 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v1255
                              + 28))(v1255, 49, v322, v324);
                      uint64_t v322 = (unsigned __int8 *)v331;
                      if (v331)
                      {
                        if (*(unsigned __int8 *)(v331 + 16) >= 0x1Cu)
                        {
                          (*((void (**)(void **, uint64_t, void **, uint64_t, uint64_t))*v1256 + 2))(v1256, v331, &v1207, v1252, v1253);
                          if (v1248)
                          {
                            uint64_t v349 = (llvm::MDNode **)v1247;
                            int v350 = (llvm::MDNode **)((char *)v1247 + 16 * v1248);
                            do
                            {
                              llvm::Instruction::setMetadata((llvm::Instruction *)v322, *(_DWORD *)v349, v349[1]);
                              v349 += 2;
                            }
                            while (v349 != v350);
                          }
                        }
                      }
                    }
                    else
                    {
                      __int16 v1246 = 257;
                      uint64_t v322 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v322, v324, (const char **)v1244, 0);
                      (*((void (**)(void **, unsigned __int8 *, void **, uint64_t, uint64_t))*v1256 + 2))(v1256, v322, &v1207, v1252, v1253);
                      if (v1248)
                      {
                        __int16 v325 = (llvm::MDNode **)v1247;
                        unsigned int v326 = (llvm::MDNode **)((char *)v1247 + 16 * v1248);
                        do
                        {
                          llvm::Instruction::setMetadata((llvm::Instruction *)v322, *(_DWORD *)v325, v325[1]);
                          v325 += 2;
                        }
                        while (v325 != v326);
                      }
                    }
                  }
                  __int16 v334 = *(llvm::Type **)v299;
                  __int16 v1210 = 257;
                  char v335 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v1252 + 56) + 40) + 272), v334, 1);
                  int v336 = operator new(0x60uLL);
                  v336[13] = v336[13] & 0x38000000 | 1;
                  uint64_t v330 = (llvm::Instruction *)(v336 + 8);
                  *(void *)int v336 = 0;
                  *((void *)v336 + 1) = 0;
                  *((void *)v336 + 2) = 0;
                  *((void *)v336 + 3) = v336 + 8;
                  __int16 v1246 = 257;
                  llvm::LoadInst::LoadInst((llvm::Value *)(v336 + 8), (uint64_t)v334, (uint64_t)v322, (const char **)v1244, 0, v335, 0);
                  (*((void (**)(void **, llvm::Instruction *, void **, uint64_t, uint64_t))*v1256 + 2))(v1256, v330, &v1207, v1252, v1253);
                  if (v1248)
                  {
                    int v345 = (llvm::MDNode **)v1247;
                    int v346 = (llvm::MDNode **)((char *)v1247 + 16 * v1248);
                    do
                    {
                      llvm::Instruction::setMetadata(v330, *(_DWORD *)v345, v345[1]);
                      v345 += 2;
                    }
                    while (v345 != v346);
                  }
LABEL_603:
                  sub_1CD10EC30(v299);
                  uint64_t v337 = *(void *)(v299 + 8);
                  if (v337)
                  {
                    uint64_t v338 = (uint64_t *)((char *)v330 + 8);
                    do
                    {
                      uint64_t v339 = v337;
                      uint64_t v340 = (uint64_t *)(v337 + 8);
                      uint64_t v337 = *(void *)(v337 + 8);
                      uint64_t v341 = v340[2];
                      if (v341) {
                        BOOL v342 = *(unsigned __int8 *)(v341 + 16) >= 0x1Cu;
                      }
                      else {
                        BOOL v342 = 0;
                      }
                      if (v342 && *(void *)(*(void *)(v341 + 40) + 56) == v306)
                      {
                        if (*(void *)v339)
                        {
                          **(void **)(v339 + 16) = v337;
                          uint64_t v343 = *(void *)(v339 + 8);
                          if (v343) {
                            *(void *)(v343 + 16) = *(void *)(v339 + 16);
                          }
                        }
                        *(void *)uint64_t v339 = v330;
                        if (v330)
                        {
                          uint64_t v344 = *v338;
                          *uint64_t v340 = *v338;
                          if (v344) {
                            *(void *)(v344 + 16) = v340;
                          }
                          *(void *)(v339 + 16) = v338;
                          *uint64_t v338 = v339;
                        }
                      }
                    }
                    while (v337);
                  }
                  if (++v304 == v305)
                  {
                    int v298 = v1173;
                    break;
                  }
                }
              }
              if (v299 && *(unsigned char *)(v299 + 16) == 3)
              {
                if ((*(_DWORD *)(v299 + 20) & 0x7FFFFFF) != 0) {
                  goto LABEL_642;
                }
              }
              else if (*(unsigned char *)(v299 + 16) {
                     || *(void *)(v299 + 72) != v299 + 72
              }
                     || (*(unsigned char *)(v299 + 34) & 0x80) != 0)
              {
LABEL_642:
                unsigned int v351 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v1151 + 48))(v1151);
                uint64_t v352 = (*(uint64_t (**)(uint64_t))(*(void *)v1151 + 56))(v1151);
                while (v351 != (uint64_t *)v352)
                {
                  uint64_t v353 = *v351++;
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v353 + 576))(v353, v299);
                }
                llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v299);
              }
            }
            ++v297;
          }
          while (v297 != v298);
        }
        char v12 = v1170;
        if (v1247 != &v1249) {
          free(v1247);
        }
        goto LABEL_648;
      }
      v1127 = 0;
      int v1128 = 1;
      while (v33 != (llvm::ValueAsMetadata *)-4096)
      {
        if (v1127) {
          BOOL v1129 = 0;
        }
        else {
          BOOL v1129 = v33 == (llvm::ValueAsMetadata *)-8192;
        }
        if (v1129) {
          v1127 = v32;
        }
        unsigned int v1130 = v31 + v1128++;
        unsigned int v31 = v1130 & v30;
        int v32 = (llvm::ValueAsMetadata **)(v29 + 24 * v31);
        unint64_t v33 = *v32;
        if (*v32 == v1192) {
          goto LABEL_34;
        }
      }
      if (v1127) {
        v1131 = v1127;
      }
      else {
        v1131 = v32;
      }
    }
    else
    {
      v1131 = 0;
    }
    int v32 = (llvm::ValueAsMetadata **)sub_1CC5BF31C(v27 + 2504, (uint64_t)&v1247, (uint64_t *)&v1247, v1131);
    v1132 = (llvm::ValueAsMetadata *)v1247;
    v32[1] = 0;
    int v32[2] = 0;
    *int v32 = v1132;
    goto LABEL_34;
  }
LABEL_652:
  sub_1CD10A3A4(v1150);
  if (v12 & 1 | HIWORD(v354) & 1)
  {
    char v355 = v1137;
    return v355 != 0;
  }
  v1218 = v1220;
  uint64_t v1219 = 0x800000000;
  v1213 = v1217;
  v1214 = v1217;
  uint64_t v1215 = 16;
  int v1216 = 0;
  v1247 = "agx.dylib_bindings";
  __int16 v1251 = 259;
  uint64_t v356 = llvm::Module::getNamedMetadata(v1150, (const char **)&v1247);
  if (v356)
  {
    uint64_t v357 = v356;
    uint64_t v358 = *(unsigned int *)(*(void *)(v356 + 48) + 8);
    if (v358)
    {
      for (uint64_t m = 0; m != v358; ++m)
      {
        uint64_t v360 = *(void *)(**(void **)(v357 + 48) + 8 * m);
        uint64_t v361 = *(void *)(v360 - 8 * *(unsigned int *)(v360 + 8));
        if (v361)
        {
          if (*(unsigned char *)v361 == 1)
          {
            uint64_t v362 = *(void *)(v361 + 128);
            if (*(unsigned char *)(v362 + 16) == 3)
            {
              unsigned int v363 = (char *)v1214;
              uint64_t v364 = HIDWORD(v1215);
              if (v1214 != v1213)
              {
                unsigned int v368 = v1215;
LABEL_671:
                if (3 * v368 <= 4 * (HIDWORD(v1215) - v1216))
                {
                  if (v368 >= 0x40) {
                    v368 *= 2;
                  }
                  else {
                    unsigned int v368 = 128;
                  }
                }
                else if (v368 - HIDWORD(v1215) >= v368 >> 3)
                {
                  goto LABEL_673;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1213, v368);
                unsigned int v368 = v1215;
                unsigned int v363 = (char *)v1214;
LABEL_673:
                unsigned int v369 = v368 - 1;
                unsigned int v370 = (v368 - 1) & ((v362 >> 4) ^ (v362 >> 9));
                uint64_t v371 = &v363[8 * v370];
                uint64_t v372 = *(void *)v371;
                if (*(void *)v371 == -1)
                {
                  unsigned int v373 = 0;
LABEL_685:
                  if (v373) {
                    uint64_t v377 = v373;
                  }
                  else {
                    uint64_t v377 = v371;
                  }
                  if (*(void *)v377 != v362)
                  {
                    if (*(void *)v377 == -2) {
                      --v1216;
                    }
                    else {
                      ++HIDWORD(v1215);
                    }
                    *(void *)uint64_t v377 = v362;
                  }
                }
                else
                {
                  unsigned int v373 = 0;
                  int v374 = 1;
                  while (v372 != v362)
                  {
                    if (v373) {
                      BOOL v375 = 0;
                    }
                    else {
                      BOOL v375 = v372 == -2;
                    }
                    if (v375) {
                      unsigned int v373 = v371;
                    }
                    unsigned int v376 = v370 + v374++;
                    unsigned int v370 = v376 & v369;
                    uint64_t v371 = &v363[8 * (v376 & v369)];
                    uint64_t v372 = *(void *)v371;
                    if (*(void *)v371 == -1) {
                      goto LABEL_685;
                    }
                  }
                }
                continue;
              }
              if (HIDWORD(v1215))
              {
                uint64_t v365 = 0;
                uint64_t v366 = 8 * HIDWORD(v1215);
                uint64_t v367 = v1214;
                while (*v367 != v362)
                {
                  if (*v367 == -2) {
                    uint64_t v365 = v367;
                  }
                  ++v367;
                  v366 -= 8;
                  if (!v366)
                  {
                    if (!v365) {
                      goto LABEL_668;
                    }
                    *uint64_t v365 = v362;
                    --v1216;
                    goto LABEL_692;
                  }
                }
                continue;
              }
LABEL_668:
              unsigned int v368 = v1215;
              if (HIDWORD(v1215) >= v1215) {
                goto LABEL_671;
              }
              ++HIDWORD(v1215);
              *((void *)v1214 + v364) = v362;
            }
          }
        }
LABEL_692:
        ;
      }
    }
  }
  int v378 = operator new(0x30uLL);
  *int v378 = &unk_1F261EFF8;
  v378[1] = &v1218;
  v378[2] = v1150;
  v378[3] = v1151;
  v378[4] = &v1213;
  v378[5] = v1169;
  v1212 = v378;
  int v379 = sub_1CC7A5654(v1150, (uint64_t)v1211);
  if (v1212 != v1211)
  {
    if (v1212) {
      (*(void (**)(void))(*v1212 + 40))();
    }
    if (v379) {
      goto LABEL_704;
    }
LABEL_1821:
    char v355 = v1137;
    goto LABEL_1827;
  }
  (*(void (**)(void *))(v1211[0] + 32))(v1211);
  if (!v379) {
    goto LABEL_1821;
  }
LABEL_704:
  uint64_t v380 = v1169;
  BOOL v381 = (*(_DWORD *)(v1169 + 40) & 0xFFFFFFFE) != 28;
  v1247 = &v1249;
  v1248 = (void *)0x2000000000;
  unint64_t v382 = v1219;
  if (v1219)
  {
    unsigned int v383 = 0;
    unint64_t v384 = 0;
    unint64_t v385 = 32 * v381;
    do
    {
      uint64_t v386 = (char *)v1218 + 1128 * v384;
      int v387 = *((_DWORD *)v386 + 4);
      if (v387 != 1)
      {
        uint64_t v388 = 0;
        int v389 = 0;
        uint64_t v390 = v386 + 8;
        uint64_t v391 = *((void *)v386 + 1);
        for (int n = 1; n != v387; ++n)
        {
          uint64_t v393 = *v390 + v388;
          uint64_t v394 = *(void *)(v393 + 48);
          uint64_t v395 = *(void *)(v391 + 24);
          BOOL v135 = v394 <= v395;
          uint64_t v396 = (void *)(v394 - v395);
          if (v135)
          {
            uint64_t v399 = *(void *)(v393 + 56);
            if (v399 > v395) {
              *(void *)(v391 + 24) = v399;
            }
            *(void *)(v393 + 56) = 0;
          }
          else if ((unint64_t)v396 <= v385)
          {
            uint64_t v400 = *v390 + v388;
            *(void *)(v391 + 24) = *(void *)(v400 + 56);
            *(void *)(v400 + 56) = 0;
          }
          else
          {
            v1244[0] = v396;
            v1244[1] = (void *)__PAIR64__(v389, v384);
            LODWORD(v1245) = n;
            if (v383 >= HIDWORD(v1248))
            {
              BOOL v401 = (char *)v1247 + 24 * v383 > (char *)v1244;
              if (v1247 > v1244 || !v401) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v391 = v393 + 32;
            uint64_t v397 = (char *)v1247 + 24 * v1248;
            long long v398 = *(_OWORD *)v1244;
            *((void *)v397 + 2) = v1245;
            *(_OWORD *)uint64_t v397 = v398;
            unsigned int v383 = v1248 + 1;
            LODWORD(v1248) = v1248 + 1;
            int v389 = n;
          }
          v388 += 32;
        }
        unint64_t v382 = v1219;
      }
      ++v384;
    }
    while (v384 < v382);
    unint64_t v402 = (uint64_t *)v1247;
    if (v383 >= 0x10)
    {
      sub_1CC7E86E4((unint64_t)v1247 + 24 * v383, (char *)v1247 + 24 * v383, (uint64_t)v1247, (unint64_t)v1247, 126 - 2 * __clz(v383), 1);
      uint64_t v403 = v1248;
      unint64_t v402 = (uint64_t *)v1247;
      if (v1248 >= 0x10)
      {
        unsigned int v404 = v1218;
        uint64_t v405 = 24 * (v1248 - 1);
        do
        {
          unint64_t v406 = 0;
          uint64_t v407 = &v402[3 * v403];
          unsigned int v408 = *((_DWORD *)v407 - 4);
          uint64_t v409 = *((unsigned int *)v407 - 3);
          uint64_t v410 = *((unsigned int *)v407 - 2);
          LODWORD(v1248) = --v403;
          uint64_t v411 = v404[141 * v408 + 1];
          uint64_t v412 = v411 + 32 * v410;
          *(void *)(v411 + 32 * v409 + 24) = *(void *)(v412 + 24);
          *(void *)(v412 + 24) = 0;
          do
          {
            uint64_t v413 = &v402[v406 / 8];
            if (LODWORD(v402[v406 / 8 + 1]) == v408 && *((_DWORD *)v413 + 3) == v410) {
              *((_DWORD *)v413 + 3) = v409;
            }
            v406 += 24;
          }
          while (v405 != v406);
          v405 -= 24;
        }
        while (v403 >= 0x10);
      }
      uint64_t v380 = v1169;
    }
    if (v402 != &v1249)
    {
      free(v402);
      uint64_t v380 = v1169;
    }
    if (v1219 >= 2)
    {
      v1247 = (void *)v1169;
      sub_1CC7E9544((uint64_t)v1218, (uint64_t *)v1218 + 141 * v1219, (uint64_t)&v1247, 126 - 2 * __clz(v1219), 1);
      uint64_t v380 = v1169;
    }
  }
  v1201[0] = 0;
  v1201[1] = 0;
  int v1202 = 0;
  v1207 = v1209;
  uint64_t v1208 = 0xA00000000;
  v1199[0] = 0;
  v1199[1] = 0;
  int v1200 = 0;
  if ((*(_DWORD *)(v380 + 40) & 0xFFFFFFFE) == 0x1C) {
    sub_1CD10B93C(v1150, (uint64_t)v1201, (uint64_t)&v1207, (uint64_t)v1199);
  }
  if (v1219)
  {
    unsigned int v414 = 0;
    uint64_t v415 = (char *)v1218;
    v1143 = (char *)v1218 + 1128 * v1219;
    while (1)
    {
      v1197[0] = 0;
      v1197[1] = 0;
      unsigned int v1198 = 0;
      sub_1CBA9B7F4((uint64_t)v1197, (uint64_t)v1201);
      v1163 = *(void **)(*(void *)(*(void *)v415 - 8 * *(unsigned int *)(*(void *)v415 + 8)) + 128);
      v1247 = &v1249;
      v1248 = (void *)0x2000000000;
      uint64_t v416 = *((void *)v415 + 132);
      if (v416 == *((void *)v415 + 131)) {
        uint64_t v417 = (unsigned int *)(v415 + 1068);
      }
      else {
        uint64_t v417 = (unsigned int *)(v415 + 1064);
      }
      uint64_t v418 = *v417;
      if (v418)
      {
        uint64_t v419 = 8 * v418;
        char v420 = (uint64_t *)*((void *)v415 + 132);
        uint64_t v421 = v1169;
        while ((unint64_t)*v420 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v420;
          v419 -= 8;
          if (!v419) {
            goto LABEL_758;
          }
        }
      }
      else
      {
        char v420 = (uint64_t *)*((void *)v415 + 132);
        uint64_t v421 = v1169;
      }
      uint64_t v422 = (void *)(v416 + 8 * v418);
      if (v420 == v422)
      {
LABEL_758:
        unsigned int v424 = -1;
      }
      else
      {
        uint64_t v423 = *v420;
        unsigned int v424 = -1;
LABEL_752:
        unsigned int v425 = sub_1CD11373C(v1151, v423, (uint64_t)v1150);
        if (v425 < v424) {
          unsigned int v424 = v425;
        }
        uint64_t v426 = (unint64_t *)(v420 + 1);
        uint64_t v421 = v1169;
        while (v426 != v422)
        {
          unint64_t v427 = *v426++;
          uint64_t v423 = v427;
          if (v427 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            char v420 = (uint64_t *)(v426 - 1);
            goto LABEL_752;
          }
        }
      }
      unint64_t v428 = *((void *)v415 + 1);
      v1174 = v415 + 8;
      uint64_t v429 = *((unsigned int *)v415 + 4);
      if (v429)
      {
        unint64_t v430 = 0;
        char v431 = 0;
        int64_t v432 = v424 & -*(_DWORD *)(v421 + 48);
        uint64_t v433 = 32 * v429;
        while (1)
        {
          uint64_t v434 = *(void *)(v428 + 24);
          if (!v434) {
            break;
          }
          LODWORD(v430) = (v430 + *(unsigned int *)(v421 + 48) - 1)
                        / *(unsigned int *)(v421 + 48)
                        * *(_DWORD *)(v421 + 48);
          if (v434 - *(void *)(v428 + 16) + v430 <= v432)
          {
            sub_1CB8BBE7C((unint64_t *)&v1247, v428);
            uint64_t v421 = v1169;
            unint64_t v430 = (*(_DWORD *)(v428 + 24) + v430 - *(_DWORD *)(v428 + 16));
LABEL_767:
            char v431 = 1;
            goto LABEL_769;
          }
          char v431 = 0;
          unint64_t v430 = v430;
          v415[1125] = 1;
LABEL_769:
          v428 += 32;
          v433 -= 32;
          if (!v433) {
            goto LABEL_772;
          }
        }
        if ((v431 & 1) == 0)
        {
          char v431 = 0;
          goto LABEL_769;
        }
        sub_1CB8BBE7C((unint64_t *)&v1247, v428);
        uint64_t v421 = v1169;
        goto LABEL_767;
      }
      unint64_t v430 = 0;
LABEL_772:
      if (v1248) {
        BOOL v435 = v430 > v1133;
      }
      else {
        BOOL v435 = 1;
      }
      if (v435)
      {
        if (v1247 != &v1249) {
          free(v1247);
        }
        goto LABEL_1808;
      }
      sub_1CBC19ED8((uint64_t)v1174, (uint64_t)&v1247);
      if (v1247 != &v1249) {
        free(v1247);
      }
      uint64_t v436 = *((unsigned int *)v415 + 4);
      if (v436)
      {
        int v437 = 0;
        uint64_t v438 = 32 * v436;
        long long v439 = (uint64_t *)(*((void *)v415 + 1) + 24);
        uint64_t v440 = v1169;
        do
        {
          uint64_t v441 = *v439;
          v439 += 4;
          if (v441) {
            ++v437;
          }
          v438 -= 32;
        }
        while (v438);
      }
      else
      {
        int v437 = 0;
        uint64_t v440 = v1169;
      }
      uint64_t v442 = *((void *)v415 + 132);
      if (v442 == *((void *)v415 + 131)) {
        int v443 = (unsigned int *)(v415 + 1068);
      }
      else {
        int v443 = (unsigned int *)(v415 + 1064);
      }
      uint64_t v444 = *v443;
      if (v444)
      {
        uint64_t v445 = 8 * v444;
        int v446 = (unint64_t *)*((void *)v415 + 132);
        while (*v446 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v446;
          v445 -= 8;
          if (!v445) {
            goto LABEL_805;
          }
        }
      }
      else
      {
        int v446 = (unint64_t *)*((void *)v415 + 132);
      }
      v447 = (unint64_t *)(v442 + 8 * v444);
      if (v446 != v447)
      {
        uint64_t v448 = (llvm::FunctionGroup *)*v446;
        while (1)
        {
          int v449 = (**(uint64_t (***)(llvm::FunctionGroup *, uint64_t, void, uint64_t, uint64_t))v448)(v448, 9, 0, 1, 3);
          if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v1151 + 64))(v1151) + 8) == v449
            || llvm::FunctionGroup::calcDMAListSize(v448, 1) + v437 > 0x20)
          {
            goto LABEL_1808;
          }
          (*(void (**)(llvm::FunctionGroup *, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)v448 + 8))(v448, 9, 1, 1, 0, 1, 3);
          uint64_t v450 = v446 + 1;
          uint64_t v440 = v1169;
          do
          {
            if (v450 == v447) {
              goto LABEL_805;
            }
            unint64_t v451 = *v450++;
            uint64_t v448 = (llvm::FunctionGroup *)v451;
          }
          while (v451 > 0xFFFFFFFFFFFFFFFDLL);
          int v446 = v450 - 1;
        }
      }
LABEL_805:
      v1244[0] = (void *)1;
      for (iuint64_t i = 1; ii != 65; ii += 2)
        v1244[ii] = (void *)-4096;
      uint64_t v453 = *((unsigned int *)v415 + 4);
      if (v453)
      {
        int v454 = (uint64_t *)*((void *)v415 + 1);
        int v455 = &v454[4 * v453];
        while (1)
        {
          v1239 = 0;
          char v456 = sub_1CC7EBD20((uint64_t)v1244, *v454, &v1239);
          __int16 v457 = v1239;
          if ((v456 & 1) == 0) {
            break;
          }
          uint64_t v440 = v1169;
LABEL_819:
          v457[1] = v454;
          v454 += 4;
          if (v454 == v455) {
            goto LABEL_839;
          }
        }
        v1222 = v1239;
        int v458 = (int)v1244[0];
        uint64_t v459 = v1245;
        int v460 = LODWORD(v1244[0]) >> 1;
        int v461 = (uint64_t)v1244[0] & 1;
        if ((uint64_t)v1244[0]) {
          unsigned int v462 = 32;
        }
        else {
          unsigned int v462 = v1245;
        }
        if (4 * v460 + 4 >= 3 * v462)
        {
          v462 *= 2;
        }
        else
        {
          uint64_t v440 = v1169;
          if (v462 + ~v460 - HIDWORD(v1244[0]) > v462 >> 3)
          {
LABEL_816:
            LODWORD(v1244[0]) = ((v458 & 0xFFFFFFFE) + 2) | v461;
            if (*v457 != -4096) {
              --HIDWORD(v1244[0]);
            }
            void *v457 = *v454;
            v457[1] = 0;
            goto LABEL_819;
          }
        }
        if (v462 >= 0x21)
        {
          unint64_t v463 = (v462 - 1) | ((unint64_t)(v462 - 1) >> 1);
          unint64_t v464 = v463 | (v463 >> 2) | ((v463 | (v463 >> 2)) >> 4);
          int v465 = ((v464 | (v464 >> 8)) >> 16) | v464 | (v464 >> 8);
          if ((v465 + 1) > 0x40) {
            unsigned int v462 = v465 + 1;
          }
          else {
            unsigned int v462 = 64;
          }
        }
        if ((uint64_t)v1244[0])
        {
          uint64_t v467 = 0;
          BOOL v468 = (uint64_t *)&v1247;
          do
          {
            uint64_t v469 = (uint64_t)v1244[v467 + 1];
            if ((v469 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              uint64_t v470 = v1244[v467 + 2];
              *BOOL v468 = v469;
              v468[1] = (uint64_t)v470;
              v468 += 2;
            }
            v467 += 2;
          }
          while (v467 != 64);
          if (v462 > 0x20)
          {
            LODWORD(v1244[0]) &= ~1u;
            uint64_t v471 = v462;
            v1244[1] = operator new(16 * v462, (std::align_val_t)8uLL);
            *(void *)&long long v1245 = v471;
          }
          sub_1CC7EBDCC((uint64_t)v1244, (uint64_t *)&v1247, v468);
        }
        else
        {
          uint64_t v466 = (uint64_t *)v1244[1];
          if (v462 > 0x20)
          {
            uint64_t v472 = v462;
            v1244[1] = operator new(16 * v462, (std::align_val_t)8uLL);
            *(void *)&long long v1245 = v472;
          }
          else
          {
            LODWORD(v1244[0]) |= 1u;
          }
          sub_1CC7EBDCC((uint64_t)v1244, v466, &v466[2 * v459]);
          MEMORY[0x1D25D9CD0](v466, 8);
        }
        sub_1CC7EBD20((uint64_t)v1244, *v454, &v1222);
        int v458 = (int)v1244[0];
        __int16 v457 = v1222;
        int v461 = (uint64_t)v1244[0] & 1;
        uint64_t v440 = v1169;
        goto LABEL_816;
      }
LABEL_839:
      v1239 = &v1241;
      v1240 = (void *)0x2000000000;
      uint64_t v473 = 8;
      v1222 = (void *)1;
      do
      {
        *(void **)((char *)&v1222 + v473) = (void *)-4096;
        v473 += 16;
      }
      while (v473 != 520);
      v1247 = &v1249;
      v1248 = (void *)0x2000000000;
      if (v415[1124]) {
        BOOL v1145 = (*(_DWORD *)(v440 + 40) - 30) < 0xFFFFFFFE;
      }
      else {
        BOOL v1145 = 0;
      }
      v1168 = **(llvm::ConstantInt ***)(*(void *)(*(void *)v415 - 8 * *(unsigned int *)(*(void *)v415 + 8) + 8)
                                      + 128);
      unint64_t v474 = v1197[0];
      if (!v1198) {
        goto LABEL_851;
      }
      uint64_t v475 = (v1198 - 1) & ((v1163 >> 4) ^ (v1163 >> 9));
      unint64_t v1185 = v1197[0] + (v475 << 6);
      uint64_t v476 = *(void **)v1185;
      if (v1163 != *(void **)v1185) {
        break;
      }
LABEL_852:
      size_t v1167 = (size_t)v415;
      uint64_t v1172 = *((unsigned int *)v415 + 4);
      if (v1172)
      {
        uint64_t v479 = 0;
        ElementPtr = 0;
        int v481 = v1145;
        if (!v415[1124]) {
          int v481 = 1;
        }
        int v1156 = v481;
        while (1)
        {
          v482 = (void *)(*v1174 + 32 * v479);
          uint64_t v484 = v482 + 3;
          uint64_t v483 = v482[3];
          if (v483) {
            break;
          }
          void *v482 = *(void *)(*v1174 + 32 * (v479 - 1));
LABEL_977:
          if (++v479 == v1172) {
            goto LABEL_996;
          }
        }
        uint64_t v1178 = *v1174 + 32 * v479;
        uint64_t v486 = v482 + 2;
        uint64_t v485 = v482[2];
        uint64_t v487 = v483 - v485;
        uint64_t v488 = *(unsigned int *)(v440 + 44);
        v1175 = (llvm::ConstantInt *)v485;
        uint64_t v489 = v485 % v488;
        uint64_t v490 = v487 % v488;
        if (v489) {
          uint64_t v491 = v487 % v488;
        }
        else {
          uint64_t v491 = 0;
        }
        v1190 = (llvm::ConstantInt *)v491;
        uint64_t v492 = v488 - v490;
        if (!v490) {
          uint64_t v492 = 0;
        }
        uint64_t v493 = llvm::ArrayType::get((llvm::ArrayType *)(*(void *)v1160 + 1912), (llvm::Type *)(v492 + v487));
        uint64_t v494 = (char *)operator new(0x78uLL);
        *((_DWORD *)v494 + 13) = *((_DWORD *)v494 + 13) & 0x38000000 | 1;
        ElementPtr = (unint64_t *)(v494 + 32);
        *(void *)uint64_t v494 = 0;
        *((void *)v494 + 1) = 0;
        *((void *)v494 + 2) = 0;
        *((void *)v494 + 3) = v494 + 32;
        v1194 = (llvm::ValueAsMetadata *)v494;
        if (v414)
        {
          unint64_t v495 = v414;
          v496 = (char *)&v1266 + 5;
          do
          {
            *--v496 = (v495 % 0xA) | 0x30;
            BOOL v135 = v495 > 9;
            v495 /= 0xAuLL;
          }
          while (v135);
        }
        else
        {
          BYTE4(v1266) = 48;
          v496 = (char *)&v1266 + 4;
        }
        sub_1CC028D80(&v1205, v496, (char *)&v1266 + 5, (char *)&v1266 + 5 - v496);
        v497 = std::string::insert(&v1205, 0, "memorycache");
        uint64_t v498 = v497->__r_.__value_.__r.__words[2];
        long long v1268 = *(_OWORD *)&v497->__r_.__value_.__l.__data_;
        uint64_t v1269 = v498;
        v497->__r_.__value_.__l.__size_ = 0;
        v497->__r_.__value_.__r.__words[2] = 0;
        v497->__r_.__value_.__r.__words[0] = 0;
        __int16 v1267 = 260;
        *(void *)&long long v1265 = &v1268;
        llvm::GlobalVariable::GlobalVariable(ElementPtr, (uint64_t)v1150, v493, 1, 0, 0, (const char **)&v1265, 0, 0, (llvm::Type *)0x100000040, 0);
        if (SHIBYTE(v1269) < 0) {
          operator delete((void *)v1268);
        }
        if (SHIBYTE(v1205.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1205.__r_.__value_.__l.__data_);
        }
        *((_DWORD *)v1194 + 16) = (((2031616 - (__clz(*(_DWORD *)(v1169 + 48)) << 16)) & 0xFF0000) + 0x10000) | *((_DWORD *)v1194 + 16) & 0xFFC0FFFF;
        uint64_t v500 = (unint64_t *)llvm::UniqueStringSaver::save(***((void ***)v1194 + 4) + 2136, "memory_cache", 0xCuLL);
        unint64_t v501 = v499;
        uint64_t v502 = ***((void ***)v1194 + 4);
        *(void *)&long long v1265 = ElementPtr;
        int v503 = *(_DWORD *)(v502 + 2520);
        if (v503)
        {
          uint64_t v504 = *(void *)(v502 + 2504);
          int v505 = v503 - 1;
          unsigned int v506 = v505 & ((ElementPtr >> 4) ^ (ElementPtr >> 9));
          unsigned int v507 = (unint64_t **)(v504 + 24 * v506);
          uint64_t v508 = *v507;
          if (*v507 == ElementPtr) {
            goto LABEL_874;
          }
          size_t v590 = 0;
          int v591 = 1;
          while (v508 != (unint64_t *)-4096)
          {
            if (v590) {
              BOOL v592 = 0;
            }
            else {
              BOOL v592 = v508 == (unint64_t *)-8192;
            }
            if (v592) {
              size_t v590 = v507;
            }
            unsigned int v593 = v506 + v591++;
            unsigned int v506 = v593 & v505;
            unsigned int v507 = (unint64_t **)(v504 + 24 * v506);
            uint64_t v508 = *v507;
            if (*v507 == ElementPtr) {
              goto LABEL_874;
            }
          }
          if (v590) {
            uint64_t v594 = v590;
          }
          else {
            uint64_t v594 = v507;
          }
        }
        else
        {
          uint64_t v594 = 0;
        }
        unsigned int v507 = (unint64_t **)sub_1CC5BF31C(v502 + 2504, (uint64_t)&v1265, (uint64_t *)&v1265, v594);
        v595 = (unint64_t *)v1265;
        v507[1] = 0;
        v507[2] = 0;
        *unsigned int v507 = v595;
LABEL_874:
        uint64_t v1181 = v479;
        v507[1] = v500;
        v507[2] = (unint64_t *)v501;
        *((_DWORD *)v1194 + 16) = *((_DWORD *)v1194 + 16) & 0xFFBFFFFF | ((v501 != 0) << 22);
        if (v1185 != v1197[0] + ((unint64_t)v1198 << 6) && *(_DWORD *)(v1185 + 40))
        {
          unsigned int v1157 = v414;
          uint64_t v509 = *v486;
          v510 = (llvm::ValueAsMetadata *)ElementPtr;
          uint64_t v511 = *v484;
          uint64_t v512 = *(uint64_t **)v1150;
          v1149 = (unint64_t *)v510;
          uint64_t v513 = llvm::ValueAsMetadata::get(v510, v499);
          *(void *)&long long v1265 = &v1266;
          *((void *)&v1265 + 1) = 0x400000000;
          sub_1CB90CB08((uint64_t)&v1265, 1uLL, v513);
          uint64_t v515 = *(unsigned int *)(v1185 + 40);
          if (v515)
          {
            uint64_t v516 = 6 * v515;
            uint64_t v517 = (unsigned __int16 *)(*(void *)(v1185 + 32) + 4);
            do
            {
              uint64_t v518 = *(v517 - 1);
              uint64_t v519 = *v517 + v518;
              if (v509 < v519 && v511 > v518)
              {
                unint64_t v521 = *((unsigned __int8 *)v517 - 4);
                *(void *)&long long v1268 = &v1269;
                *((void *)&v1268 + 1) = 0x400000000;
                uint64_t v522 = (int)((v518 - v509) & ~((v518 - v509) >> 63));
                BOOL v523 = *(llvm::ConstantInt **)(*v512 + 1960);
                unsigned int v524 = *(_DWORD *)(*v512 + 1968);
                LODWORD(v1205.__r_.__value_.__r.__words[1]) = v524 >> 8;
                if (v524 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v524 <= 0xFF) {
                  unint64_t v525 = 0;
                }
                else {
                  unint64_t v525 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v524) + 63);
                }
                v1205.__r_.__value_.__r.__words[0] = v525 & v522;
                int v527 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v523, (llvm::LLVMContext *)&v1205, v514);
                if (LODWORD(v1205.__r_.__value_.__r.__words[1]) >= 0x41 && v1205.__r_.__value_.__r.__words[0]) {
                  MEMORY[0x1D25D9CB0](v1205.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                }
                uint64_t v529 = llvm::ValueAsMetadata::get(v527, v526);
                if (DWORD2(v1268) >= (unint64_t)HIDWORD(v1268)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(v1268 + 8 * DWORD2(v1268)) = v529;
                ++DWORD2(v1268);
                uint64_t v530 = (int)v519 - (int)v509;
                uint64_t v531 = *(llvm::ConstantInt **)(*v512 + 1960);
                unsigned int v532 = *(_DWORD *)(*v512 + 1968);
                LODWORD(v1205.__r_.__value_.__r.__words[1]) = v532 >> 8;
                if (v532 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v532 <= 0xFF) {
                  unint64_t v533 = 0;
                }
                else {
                  unint64_t v533 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v532) + 63);
                }
                v1205.__r_.__value_.__r.__words[0] = v533 & v530;
                v535 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v531, (llvm::LLVMContext *)&v1205, v528);
                if (LODWORD(v1205.__r_.__value_.__r.__words[1]) >= 0x41 && v1205.__r_.__value_.__r.__words[0]) {
                  MEMORY[0x1D25D9CB0](v1205.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                }
                uint64_t v536 = llvm::ValueAsMetadata::get(v535, v534);
                if (DWORD2(v1268) >= (unint64_t)HIDWORD(v1268)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(v1268 + 8 * DWORD2(v1268)) = v536;
                ++DWORD2(v1268);
                v538 = llvm::MDString::get(v512, "read_prid", 9uLL);
                if (DWORD2(v1268) >= (unint64_t)HIDWORD(v1268)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(v1268 + 8 * DWORD2(v1268)) = v538;
                ++DWORD2(v1268);
                int v539 = *(llvm::ConstantInt **)(*v512 + 1960);
                unsigned int v540 = *(_DWORD *)(*v512 + 1968);
                LODWORD(v1205.__r_.__value_.__r.__words[1]) = v540 >> 8;
                if (v540 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v540 <= 0xFF) {
                  LOBYTE(v541) = 0;
                }
                else {
                  unint64_t v541 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v540) + 63);
                }
                v1205.__r_.__value_.__r.__words[0] = v541 & v521 & 0xFu;
                v543 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v539, (llvm::LLVMContext *)&v1205, v537);
                if (LODWORD(v1205.__r_.__value_.__r.__words[1]) >= 0x41 && v1205.__r_.__value_.__r.__words[0]) {
                  MEMORY[0x1D25D9CB0](v1205.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                }
                uint64_t v544 = llvm::ValueAsMetadata::get(v543, v542);
                if (DWORD2(v1268) >= (unint64_t)HIDWORD(v1268)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(v1268 + 8 * DWORD2(v1268)) = v544;
                ++DWORD2(v1268);
                uint64_t v546 = llvm::MDString::get(v512, "write_prid", 0xAuLL);
                if (DWORD2(v1268) >= (unint64_t)HIDWORD(v1268)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(v1268 + 8 * DWORD2(v1268)) = v546;
                unint64_t v547 = v521 >> 4;
                ++DWORD2(v1268);
                int v548 = *(llvm::ConstantInt **)(*v512 + 1960);
                unsigned int v549 = *(_DWORD *)(*v512 + 1968);
                LODWORD(v1205.__r_.__value_.__r.__words[1]) = v549 >> 8;
                if (v549 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v549 <= 0xFF) {
                  unint64_t v550 = 0;
                }
                else {
                  unint64_t v550 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v549) + 63);
                }
                v1205.__r_.__value_.__r.__words[0] = v550 & v547;
                uint64_t v552 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v548, (llvm::LLVMContext *)&v1205, v545);
                if (LODWORD(v1205.__r_.__value_.__r.__words[1]) >= 0x41 && v1205.__r_.__value_.__r.__words[0]) {
                  MEMORY[0x1D25D9CB0](v1205.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                }
                uint64_t v553 = llvm::ValueAsMetadata::get(v552, v551);
                if (DWORD2(v1268) >= (unint64_t)HIDWORD(v1268)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(v1268 + 8 * DWORD2(v1268)) = v553;
                ++DWORD2(v1268);
                v554 = llvm::MDTuple::getImpl(*(void *)v1150, (void *)v1268, DWORD2(v1268), 0, 1);
                if (DWORD2(v1265) >= (unint64_t)HIDWORD(v1265)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(v1265 + 8 * DWORD2(v1265)) = v554;
                ++DWORD2(v1265);
                if ((uint64_t *)v1268 != &v1269) {
                  free((void *)v1268);
                }
              }
              v517 += 3;
              v516 -= 6;
            }
            while (v516);
          }
          unsigned int v414 = v1157;
          uint64_t v415 = (char *)v1167;
          ElementPtr = v1149;
          if (DWORD2(v1265) > 1)
          {
            uint64_t v555 = llvm::Module::getOrInsertNamedMetadata(v1150, "agx.prid", 8uLL);
            v556 = llvm::MDTuple::getImpl(*(void *)v1150, (void *)v1265, DWORD2(v1265), 0, 1);
            *(void *)&long long v1268 = v556;
            uint64_t v557 = *(void *)(v555 + 48);
            uint64_t v558 = *(unsigned int *)(v557 + 8);
            if (v558 >= *(_DWORD *)(v557 + 12))
            {
              sub_1CC608328(v557, (unsigned __int8 **)&v1268);
            }
            else
            {
              unint64_t v499 = v556;
              unint64_t v559 = (llvm::Value **)(*(void *)v557 + 8 * v558);
              *unint64_t v559 = v499;
              if (v499)
              {
                llvm::MetadataTracking::track((uint64_t)v559, (unsigned __int8 *)v499, 2);
                LODWORD(v558) = *(_DWORD *)(v557 + 8);
              }
              *(_DWORD *)(v557 + 8) = v558 + 1;
            }
          }
          if ((long long *)v1265 != &v1266) {
            free((void *)v1265);
          }
        }
        uint64_t v560 = *((void *)v415 + 132);
        if (v560 == *((void *)v415 + 131)) {
          v561 = (unsigned int *)(v415 + 1068);
        }
        else {
          v561 = (unsigned int *)(v415 + 1064);
        }
        uint64_t v562 = *v561;
        if (v562)
        {
          uint64_t v563 = 8 * v562;
          unsigned int v564 = (unint64_t *)*((void *)v415 + 132);
          while (*v564 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v564;
            v563 -= 8;
            if (!v563) {
              goto LABEL_970;
            }
          }
        }
        else
        {
          unsigned int v564 = (unint64_t *)*((void *)v415 + 132);
        }
        uint64_t v565 = (unint64_t *)(v560 + 8 * v562);
        if (v564 != v565)
        {
          unsigned int v566 = v414;
          unint64_t v567 = *v564;
LABEL_951:
          (*(void (**)(unint64_t, uint64_t, unint64_t *))(*(void *)v567 + 144))(v567, 6, ElementPtr);
          int v568 = ElementPtr;
          (*(void (**)(unint64_t, unint64_t *, void, uint64_t))(*(void *)v567 + 496))(v567, ElementPtr, *(void *)(v1169 + 32), 7);
          int v569 = v1156;
          if (v415[1126] | v415[1125]) {
            int v569 = 0;
          }
          if (v569 == 1)
          {
            if (!(*(unsigned int (**)(unint64_t, void *))(*(void *)v567 + 408))(v567, v1163)) {
              goto LABEL_965;
            }
            uint64_t v570 = (void *)(*(uint64_t (**)(unint64_t))(*(void *)v567 + 616))(v567);
            if (*v570 == v570[1]
              || (uint64_t v571 = (*(uint64_t (**)(unint64_t))(*(void *)v567 + 336))(v567),
                  uint64_t v572 = (*(uint64_t (**)(uint64_t))(*(void *)v571 + 8))(v571),
                  unint64_t v573 = (*(uint64_t (**)(unint64_t, void *))(*(void *)v567 + 400))(v567, v1163),
                  (*(unsigned int (**)(uint64_t))(*(void *)v571 + 16))(v571) != v572)
              || (unsigned int v574 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v571 + 48))(v571, v572),
                  uint64_t v575 = (*(uint64_t (**)(unint64_t))(*(void *)v567 + 616))(v567),
                  v576 = *(unsigned int **)v575,
                  int v577 = *(unsigned int **)(v575 + 8),
                  *(unsigned int **)v575 == v577))
            {
LABEL_965:
              (*(void (**)(unint64_t, uint64_t, void *))(*(void *)v567 + 152))(v567, 3, v1163);
            }
            else
            {
              unsigned int v578 = (v574 >> 1) * v573;
              while (*v576 < v578 || *v576 > v578 + (v573 >> 33))
              {
                if (++v576 == v577) {
                  goto LABEL_965;
                }
              }
            }
          }
          int v580 = v564 + 1;
          unsigned int v414 = v566;
          uint64_t v415 = (char *)v1167;
          ElementPtr = v568;
          while (v580 != v565)
          {
            unint64_t v581 = *v580++;
            unint64_t v567 = v581;
            if (v581 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              unsigned int v564 = v580 - 1;
              goto LABEL_951;
            }
          }
        }
LABEL_970:
        long long v1266 = 0u;
        long long v1265 = 0u;
        *(void *)&long long v1265 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)ElementPtr, v499);
        *((void *)&v1265 + 1) = *(void *)(*(void *)v415 - 8 * *(unsigned int *)(*(void *)v415 + 8) + 8);
        *(void *)&long long v1266 = *(void *)(*(void *)v415 - 8 * *(unsigned int *)(*(void *)v415 + 8) + 16);
        unint64_t v582 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v1168, v1175 - v1190, 0);
        *((void *)&v1266 + 1) = llvm::ValueAsMetadata::get(v582, v583);
        v584 = llvm::MDTuple::getImpl(*(void *)v1150, &v1265, 4, 0, 1);
        *(void *)&long long v1268 = v584;
        uint64_t v585 = *(void *)(inserted + 48);
        uint64_t v586 = *(unsigned int *)(v585 + 8);
        if (v586 >= *(_DWORD *)(v585 + 12))
        {
          sub_1CC608328(*(void *)(inserted + 48), (unsigned __int8 **)&v1268);
          v589 = (void *)v1178;
          uint64_t v479 = v1181;
        }
        else
        {
          uint64_t v587 = (unsigned __int8 *)v584;
          int v588 = (unsigned __int8 **)(*(void *)v585 + 8 * v586);
          *int v588 = v587;
          v589 = (void *)v1178;
          uint64_t v479 = v1181;
          if (v587)
          {
            llvm::MetadataTracking::track((uint64_t)v588, v587, 2);
            LODWORD(v586) = *(_DWORD *)(v585 + 8);
          }
          *(_DWORD *)(v585 + 8) = v586 + 1;
        }
        if (v1175 != v1190)
        {
          long long v1268 = 0uLL;
          *(void *)&long long v1268 = llvm::ConstantInt::get(v1168, 0, 0);
          *((void *)&v1268 + 1) = llvm::ConstantInt::get(v1168, v1190 - v1175, 0);
          ElementPtr = (unint64_t *)llvm::ConstantExpr::getGetElementPtr(*((void *)v1194 + 7), (uint64_t *)ElementPtr, (uint64_t)&v1268, 2, 0, 0, 0);
        }
        uint64_t v440 = v1169;
        ++v414;
        void *v589 = ElementPtr;
        goto LABEL_977;
      }
      ElementPtr = 0;
LABEL_996:
      if (!v1145)
      {
        unsigned int v596 = (llvm::ConstantPointerNull *)llvm::PointerType::get(*((llvm::PointerType **)v415 + 139), (llvm::Type *)0x40);
        ElementPtr = llvm::ConstantPointerNull::get(v596, v597);
      }
      unsigned int v1158 = v414;
      sub_1CC7EB800(v1163, v1151, (unsigned int *)&v1247, (uint64_t)&v1239, (uint64_t)&v1222, (llvm::detail::IEEEFloat *)ElementPtr);
      int v598 = *(_DWORD *)(v1169 + 40);
      uint64_t v599 = *(void *)(*(void *)v415 + 16);
      unsigned int v600 = (void *)(v599 & 0xFFFFFFFFFFFFFFF8);
      if ((v599 & 4) != 0) {
        unsigned int v600 = (void *)*v600;
      }
      uint64_t v601 = (void *)*v600;
      int v1182 = v415[1124];
      int v1186 = v415[1125];
      *(void *)&long long v1268 = v1271;
      *((void *)&v1268 + 1) = v1271;
      uint64_t v1269 = 4;
      int v1270 = 0;
      unsigned int v602 = v1240;
      if (v1240)
      {
        v1191 = (llvm::ConstantInt *)(v601 + 245);
        if (v1182) {
          char v603 = v1145;
        }
        else {
          char v603 = 1;
        }
        if (v1186) {
          BOOL v604 = 0;
        }
        else {
          BOOL v604 = v1145;
        }
        BOOL v1179 = v604;
        if (v1186) {
          char v605 = 0;
        }
        else {
          char v605 = v603;
        }
        unsigned int v1195 = v598 & 0xFFFFFFFE;
        do
        {
          unsigned int v606 = (uint64_t ***)*((void *)v1239 + v602 - 1);
          LODWORD(v1240) = v602 - 1;
          uint64_t v607 = *v606;
          int v608 = *((unsigned __int8 *)v606 + 16);
          if (v608 == 77)
          {
            if (v607[3])
            {
              unint64_t v627 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType *)*v607[2], (llvm::Type *)0x40);
              if (v605)
              {
                uint64_t v629 = (uint64_t *)(v606 - 4);
                uint64_t v628 = (uint64_t)*(v606 - 4);
                *(void *)&long long v1265 = v628;
                if (v1222)
                {
                  int v630 = 32;
                  int v631 = &v1223;
                  goto LABEL_1033;
                }
                int v630 = v1224;
                if (!v1224)
                {
                  uint64_t v779 = 0;
                  goto LABEL_1269;
                }
                int v631 = (uint64_t *)v1223;
LABEL_1033:
                int v632 = v630 - 1;
                unsigned int v633 = v632 & ((v628 >> 4) ^ (v628 >> 9));
                uint64_t v634 = &v631[2 * v633];
                uint64_t v635 = *v634;
                if (v628 != *v634)
                {
                  int v636 = 0;
                  int v637 = 1;
                  while (v635 != -4096)
                  {
                    if (v636) {
                      BOOL v638 = 0;
                    }
                    else {
                      BOOL v638 = v635 == -8192;
                    }
                    if (v638) {
                      int v636 = v634;
                    }
                    unsigned int v639 = v633 + v637++;
                    unsigned int v633 = v639 & v632;
                    uint64_t v634 = &v631[2 * v633];
                    uint64_t v635 = *v634;
                    if (v628 == *v634) {
                      goto LABEL_1270;
                    }
                  }
                  if (v636) {
                    uint64_t v779 = v636;
                  }
                  else {
                    uint64_t v779 = v634;
                  }
LABEL_1269:
                  uint64_t v634 = sub_1CC7EBF40((uint64_t)&v1222, (uint64_t)&v1265, &v1265, v779);
                  *uint64_t v634 = v1265;
                  v634[1] = 0;
                }
LABEL_1270:
                uint64_t v780 = v634[1];
                if (*v629)
                {
                  **(v606 - 2) = (uint64_t *)*(v606 - 3);
                  uint64_t v781 = (uint64_t)*(v606 - 3);
                  if (v781) {
                    *(void *)(v781 + 16) = *(v606 - 2);
                  }
                }
                *uint64_t v629 = v780;
                if (v780)
                {
                  unsigned int v784 = *(void ***)(v780 + 8);
                  BOOL v782 = (uint64_t **)(v780 + 8);
                  unsigned int v783 = v784;
                  *(v606 - 3) = v784;
                  if (v784) {
                    v783[2] = v606 - 3;
                  }
                  *(v606 - 2) = v782;
                  *BOOL v782 = v629;
                }
                *unsigned int v606 = (uint64_t **)v627;
                *(void *)&long long v1265 = v606;
                if (v1222)
                {
                  int v785 = 32;
                  int v786 = &v1223;
                  goto LABEL_1279;
                }
                int v785 = v1224;
                if (!v1224)
                {
                  uint64_t v805 = 0;
                  goto LABEL_1303;
                }
                int v786 = (uint64_t *)v1223;
LABEL_1279:
                int v787 = v785 - 1;
                unsigned int v788 = v787 & ((v606 >> 4) ^ (v606 >> 9));
                v789 = &v786[2 * v788];
                uint64_t v790 = (void ***)*v789;
                if (v606 != (uint64_t ***)*v789)
                {
                  uint64_t v791 = 0;
                  int v792 = 1;
                  while (v790 != (void ***)-4096)
                  {
                    if (v791) {
                      BOOL v793 = 0;
                    }
                    else {
                      BOOL v793 = v790 == (void ***)-8192;
                    }
                    if (v793) {
                      uint64_t v791 = v789;
                    }
                    unsigned int v794 = v788 + v792++;
                    unsigned int v788 = v794 & v787;
                    v789 = &v786[2 * v788];
                    uint64_t v790 = (void ***)*v789;
                    if (v606 == (uint64_t ***)*v789) {
                      goto LABEL_1304;
                    }
                  }
                  if (v791) {
                    uint64_t v805 = v791;
                  }
                  else {
                    uint64_t v805 = v789;
                  }
LABEL_1303:
                  v789 = sub_1CC7EBF40((uint64_t)&v1222, (uint64_t)&v1265, &v1265, v805);
                  uint64_t *v789 = v1265;
                  v789[1] = 0;
                }
LABEL_1304:
                v789[1] = (uint64_t)v606;
LABEL_1305:
                long long v1265 = 4uLL;
                *(void *)&long long v1266 = v606;
                if (v606 != (uint64_t ***)-8192 && v606 != (uint64_t ***)-4096 && v606) {
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v1265);
                }
                v806 = (char *)v1247;
                if (v1248 >= HIDWORD(v1248))
                {
                  unint64_t v1047 = v1248 + 1;
                  if (v1247 <= &v1265 && (char *)v1247 + 24 * v1248 > (char *)&v1265)
                  {
                    int64_t v1052 = (char *)&v1265 - (unsigned char *)v1247;
                    sub_1CC0BD844((unsigned int *)&v1247, v1047);
                    v806 = (char *)v1247;
                    unsigned int v807 = (long long *)((char *)v1247 + v1052);
                  }
                  else
                  {
                    sub_1CC0BD844((unsigned int *)&v1247, v1047);
                    unsigned int v807 = &v1265;
                    v806 = (char *)v1247;
                  }
                }
                else
                {
                  unsigned int v807 = &v1265;
                }
                int v808 = (int)v1248;
                v809 = (unint64_t *)&v806[24 * v1248];
                unint64_t *v809 = 4;
                v809[1] = 0;
                unint64_t v810 = *((void *)v807 + 2);
                v809[2] = v810;
                if (v810 != -8192 && v810 != -4096)
                {
                  if (v810)
                  {
                    unint64_t v811 = *(void *)v807 & 0xFFFFFFFFFFFFFFF8;
                    v809[1] = *(void *)v811;
                    *(void *)unint64_t v811 = v809;
                    unint64_t *v809 = v811 | 4;
                    v812 = (unint64_t *)v809[1];
                    if (v812) {
                      unint64_t *v812 = *v812 & 7 | (unint64_t)(v809 + 1);
                    }
                  }
                }
                LODWORD(v1248) = v808 + 1;
                if ((void)v1266 != -8192 && (void)v1266 != -4096 && (void)v1266)
                {
                  unint64_t v813 = v1265 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)(v1265 & 0xFFFFFFFFFFFFFFF8) = *((void *)&v1265 + 1);
                  if (*((void *)&v1265 + 1))
                  {
                    **((void **)&v1265 + 1) = **((void **)&v1265 + 1) & 7 | v813;
                  }
                  else
                  {
                    uint64_t v814 = v1266;
                    v815 = ***(int32x2_t ****)v1266;
                    unint64_t v816 = (unint64_t)v815[303];
                    if (v816 <= v813)
                    {
                      uint64_t v817 = v815[305].u32[0];
                      if (v816 + 16 * v817 > v813)
                      {
                        unsigned int v818 = v817 - 1;
                        LODWORD(v819) = v818 & ((v1266 >> 4) ^ (v1266 >> 9));
                        uint64_t v820 = (uint64_t *)(v816 + 16 * v819);
                        uint64_t v821 = *v820;
                        if ((void)v1266 == *v820)
                        {
LABEL_1327:
                          *uint64_t v820 = -8192;
                          v815[304] = vadd_s32(v815[304], (int32x2_t)0x1FFFFFFFFLL);
                          uint64_t v814 = v1266;
                        }
                        else
                        {
                          int v822 = 1;
                          while (v821 != -4096)
                          {
                            int v823 = v819 + v822++;
                            uint64_t v819 = v823 & v818;
                            uint64_t v821 = *(void *)(v816 + 16 * v819);
                            if ((void)v1266 == v821)
                            {
                              uint64_t v820 = (uint64_t *)(v816 + 16 * v819);
                              goto LABEL_1327;
                            }
                          }
                        }
                        *(unsigned char *)(v814 + 17) &= ~1u;
                      }
                    }
                  }
                }
                v873 = v606[1];
                if (!v873) {
                  goto LABEL_1607;
                }
                unsigned int v602 = v1240;
                do
                {
                  if (v602 >= HIDWORD(v1240)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v1239 + v602) = v873[3];
                  unsigned int v602 = v1240 + 1;
                  LODWORD(v1240) = v1240 + 1;
                  v873 = (uint64_t **)v873[1];
                }
                while (v873);
                continue;
              }
              int v709 = operator new(0x60uLL);
              int v710 = (llvm::BitCastInst *)(v709 + 8);
              v709[13] = v709[13] & 0x38000000 | 1;
              *(void *)int v709 = 0;
              *((void *)v709 + 1) = 0;
              *((void *)v709 + 2) = 0;
              *((void *)v709 + 3) = v709 + 8;
              std::string::size_type v711 = (std::string::size_type)*(v606 - 4);
              v1205.__r_.__value_.__r.__words[0] = v711;
              if (v1222)
              {
                int v712 = 32;
                v713 = &v1223;
                goto LABEL_1180;
              }
              int v712 = v1224;
              if (!v1224)
              {
                v795 = 0;
                goto LABEL_1292;
              }
              v713 = (uint64_t *)v1223;
LABEL_1180:
              int v714 = v712 - 1;
              unsigned int v715 = v714 & ((v711 >> 4) ^ (v711 >> 9));
              BOOL v716 = &v713[2 * v715];
              uint64_t v717 = *v716;
              if (v711 != *v716)
              {
                v718 = 0;
                int v719 = 1;
                while (v717 != -4096)
                {
                  if (v718) {
                    BOOL v720 = 0;
                  }
                  else {
                    BOOL v720 = v717 == -8192;
                  }
                  if (v720) {
                    v718 = v716;
                  }
                  unsigned int v721 = v715 + v719++;
                  unsigned int v715 = v721 & v714;
                  BOOL v716 = &v713[2 * v715];
                  uint64_t v717 = *v716;
                  if (v711 == *v716) {
                    goto LABEL_1293;
                  }
                }
                if (v718) {
                  v795 = v718;
                }
                else {
                  v795 = v716;
                }
LABEL_1292:
                BOOL v716 = sub_1CC7EBF40((uint64_t)&v1222, (uint64_t)&v1205, &v1205, v795);
                *BOOL v716 = v1205.__r_.__value_.__r.__words[0];
                v716[1] = 0;
              }
LABEL_1293:
              v796 = (llvm::Value *)v716[1];
              if ((*((unsigned char *)v606 + 23) & 0x10) != 0)
              {
                uint64_t v797 = ***v606;
                uint64_t v798 = *(void *)(v797 + 152);
                uint64_t v799 = *(unsigned int *)(v797 + 168);
                if (!v799) {
                  goto LABEL_1401;
                }
                LODWORD(v800) = (v799 - 1) & ((v606 >> 4) ^ (v606 >> 9));
                uint64_t v801 = (uint64_t ****)(v798 + 16 * v800);
                uint64_t v802 = *v801;
                if (*v801 != v606)
                {
                  int v803 = 1;
                  while (v802 != (uint64_t ***)-4096)
                  {
                    int v804 = v800 + v803++;
                    uint64_t v800 = v804 & (v799 - 1);
                    uint64_t v802 = *(uint64_t ****)(v798 + 16 * v800);
                    if (v802 == v606)
                    {
                      uint64_t v801 = (uint64_t ****)(v798 + 16 * v800);
                      goto LABEL_1402;
                    }
                  }
LABEL_1401:
                  uint64_t v801 = (uint64_t ****)(v798 + 16 * v799);
                }
LABEL_1402:
                v874 = v801[1];
                uint64_t v877 = *v874;
                int v876 = (char *)(v874 + 2);
                v875 = v877;
              }
              else
              {
                v875 = 0;
                int v876 = &byte_1CFBCE98E;
              }
              __int16 v1267 = 261;
              *(void *)&long long v1265 = v876;
              *((void *)&v1265 + 1) = v875;
              llvm::BitCastInst::BitCastInst(v710, v796, v627, (const char **)&v1265, (llvm::Instruction *)v606);
              *(void *)&long long v1265 = v606;
              if (v1222)
              {
                int v878 = 32;
                uint64_t v879 = &v1223;
                goto LABEL_1405;
              }
              int v878 = v1224;
              if (v1224)
              {
                uint64_t v879 = (uint64_t *)v1223;
LABEL_1405:
                int v880 = v878 - 1;
                unsigned int v881 = v880 & ((v606 >> 4) ^ (v606 >> 9));
                v882 = &v879[2 * v881];
                v883 = (void ***)*v882;
                if (v606 != (uint64_t ***)*v882)
                {
                  v884 = 0;
                  int v885 = 1;
                  while (v883 != (void ***)-4096)
                  {
                    if (v884) {
                      BOOL v886 = 0;
                    }
                    else {
                      BOOL v886 = v883 == (void ***)-8192;
                    }
                    if (v886) {
                      v884 = v882;
                    }
                    unsigned int v887 = v881 + v885++;
                    unsigned int v881 = v887 & v880;
                    v882 = &v879[2 * v881];
                    v883 = (void ***)*v882;
                    if (v606 == (uint64_t ***)*v882) {
                      goto LABEL_1419;
                    }
                  }
                  if (v884) {
                    uint64_t v888 = v884;
                  }
                  else {
                    uint64_t v888 = v882;
                  }
LABEL_1418:
                  v882 = sub_1CC7EBF40((uint64_t)&v1222, (uint64_t)&v1265, &v1265, v888);
                  uint64_t *v882 = v1265;
                  v882[1] = 0;
                }
LABEL_1419:
                v882[1] = (uint64_t)v710;
                long long v1265 = 4uLL;
                *(void *)&long long v1266 = v710;
                if (v710 != (llvm::BitCastInst *)-8192 && v710 != (llvm::BitCastInst *)-4096 && v710) {
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v1265);
                }
                v889 = (char *)v1247;
                if (v1248 >= HIDWORD(v1248))
                {
                  unint64_t v1049 = v1248 + 1;
                  if (v1247 <= &v1265 && (char *)v1247 + 24 * v1248 > (char *)&v1265)
                  {
                    int64_t v1054 = (char *)&v1265 - (unsigned char *)v1247;
                    sub_1CC0BD844((unsigned int *)&v1247, v1049);
                    v889 = (char *)v1247;
                    uint64_t v890 = (long long *)((char *)v1247 + v1054);
                  }
                  else
                  {
                    sub_1CC0BD844((unsigned int *)&v1247, v1049);
                    uint64_t v890 = &v1265;
                    v889 = (char *)v1247;
                  }
                }
                else
                {
                  uint64_t v890 = &v1265;
                }
                int v891 = (int)v1248;
                v892 = (unint64_t *)&v889[24 * v1248];
                unint64_t *v892 = 4;
                v892[1] = 0;
                unint64_t v893 = *((void *)v890 + 2);
                v892[2] = v893;
                if (v893 != -8192 && v893 != -4096)
                {
                  if (v893)
                  {
                    unint64_t v894 = *(void *)v890 & 0xFFFFFFFFFFFFFFF8;
                    v892[1] = *(void *)v894;
                    *(void *)unint64_t v894 = v892;
                    unint64_t *v892 = v894 | 4;
                    v895 = (unint64_t *)v892[1];
                    if (v895) {
                      unint64_t *v895 = *v895 & 7 | (unint64_t)(v892 + 1);
                    }
                  }
                }
                LODWORD(v1248) = v891 + 1;
                if ((void)v1266 != -8192 && (void)v1266 != -4096 && (void)v1266)
                {
                  unint64_t v896 = v1265 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)(v1265 & 0xFFFFFFFFFFFFFFF8) = *((void *)&v1265 + 1);
                  if (*((void *)&v1265 + 1))
                  {
                    **((void **)&v1265 + 1) = **((void **)&v1265 + 1) & 7 | v896;
                  }
                  else
                  {
                    uint64_t v897 = v1266;
                    uint64_t v898 = ***(int32x2_t ****)v1266;
                    unint64_t v899 = (unint64_t)v898[303];
                    if (v899 <= v896)
                    {
                      uint64_t v900 = v898[305].u32[0];
                      if (v899 + 16 * v900 > v896)
                      {
                        unsigned int v901 = v900 - 1;
                        LODWORD(v902) = v901 & ((v1266 >> 4) ^ (v1266 >> 9));
                        v903 = (uint64_t *)(v899 + 16 * v902);
                        uint64_t v904 = *v903;
                        if ((void)v1266 == *v903)
                        {
LABEL_1441:
                          uint64_t *v903 = -8192;
                          v898[304] = vadd_s32(v898[304], (int32x2_t)0x1FFFFFFFFLL);
                          uint64_t v897 = v1266;
                        }
                        else
                        {
                          int v905 = 1;
                          while (v904 != -4096)
                          {
                            int v906 = v902 + v905++;
                            uint64_t v902 = v906 & v901;
                            uint64_t v904 = *(void *)(v899 + 16 * v902);
                            if ((void)v1266 == v904)
                            {
                              v903 = (uint64_t *)(v899 + 16 * v902);
                              goto LABEL_1441;
                            }
                          }
                        }
                        *(unsigned char *)(v897 + 17) &= ~1u;
                      }
                    }
                  }
                }
                goto LABEL_1305;
              }
              uint64_t v888 = 0;
              goto LABEL_1418;
            }
            uint64_t v685 = (uint64_t)*(v606 - 4);
            *(void *)&long long v1265 = v685;
            char v686 = (char)v1222;
            if (v1222)
            {
              int v687 = 32;
              uint64_t v688 = &v1223;
              goto LABEL_1155;
            }
            int v687 = v1224;
            if (!v1224)
            {
              int v731 = 0;
              goto LABEL_1206;
            }
            uint64_t v688 = (uint64_t *)v1223;
LABEL_1155:
            int v689 = v687 - 1;
            unsigned int v690 = v689 & ((v685 >> 4) ^ (v685 >> 9));
            v691 = &v688[2 * v690];
            uint64_t v692 = *v691;
            if (v685 != *v691)
            {
              uint64_t v693 = 0;
              int v694 = 1;
              while (v692 != -4096)
              {
                if (v693) {
                  BOOL v695 = 0;
                }
                else {
                  BOOL v695 = v692 == -8192;
                }
                if (v695) {
                  uint64_t v693 = v691;
                }
                unsigned int v696 = v690 + v694++;
                unsigned int v690 = v696 & v689;
                v691 = &v688[2 * v690];
                uint64_t v692 = *v691;
                if (v685 == *v691) {
                  goto LABEL_1207;
                }
              }
              if (v693) {
                int v731 = v693;
              }
              else {
                int v731 = v691;
              }
LABEL_1206:
              v691 = sub_1CC7EBF40((uint64_t)&v1222, (uint64_t)&v1265, &v1265, v731);
              uint64_t *v691 = v1265;
              v691[1] = 0;
              char v686 = (char)v1222;
            }
LABEL_1207:
            uint64_t v732 = v691[1];
            v1205.__r_.__value_.__r.__words[0] = (std::string::size_type)v606;
            if (v686)
            {
              int v733 = 32;
              v734 = &v1223;
              goto LABEL_1209;
            }
            int v733 = v1224;
            if (v1224)
            {
              v734 = (uint64_t *)v1223;
LABEL_1209:
              int v735 = v733 - 1;
              unsigned int v736 = v735 & ((v606 >> 4) ^ (v606 >> 9));
              unsigned int v737 = &v734[2 * v736];
              unsigned int v738 = (void ***)*v737;
              if (v606 != (uint64_t ***)*v737)
              {
                int v739 = 0;
                int v740 = 1;
                while (v738 != (void ***)-4096)
                {
                  if (v739) {
                    BOOL v741 = 0;
                  }
                  else {
                    BOOL v741 = v738 == (void ***)-8192;
                  }
                  if (v741) {
                    int v739 = v737;
                  }
                  unsigned int v742 = v736 + v740++;
                  unsigned int v736 = v742 & v735;
                  unsigned int v737 = &v734[2 * v736];
                  unsigned int v738 = (void ***)*v737;
                  if (v606 == (uint64_t ***)*v737) {
                    goto LABEL_1223;
                  }
                }
                if (v739) {
                  v743 = v739;
                }
                else {
                  v743 = v737;
                }
LABEL_1222:
                unsigned int v737 = sub_1CC7EBF40((uint64_t)&v1222, (uint64_t)&v1205, &v1205, v743);
                *unsigned int v737 = v1205.__r_.__value_.__r.__words[0];
                v737[1] = 0;
              }
LABEL_1223:
              v737[1] = v732;
              goto LABEL_1305;
            }
            v743 = 0;
            goto LABEL_1222;
          }
          if (v608 != 62)
          {
            if (v608 == 60)
            {
              uint64_t v609 = *v607;
              *(void *)&long long v1265 = 0;
              if (sub_1CC7EBD20((uint64_t)v1244, (uint64_t)v606, &v1265))
              {
                uint64_t v610 = (void **)v1265;
                uint64_t v611 = (void **)v1244[1];
                unsigned int v612 = v1245;
                int v613 = (uint64_t)v1244[0] & 1;
              }
              else
              {
                int v613 = (uint64_t)v1244[0] & 1;
                uint64_t v611 = (void **)v1244[1];
                if ((uint64_t)v1244[0]) {
                  v677 = &v1244[1];
                }
                else {
                  v677 = (void **)v1244[1];
                }
                unsigned int v612 = v1245;
                if ((uint64_t)v1244[0]) {
                  unsigned int v678 = 32;
                }
                else {
                  unsigned int v678 = v1245;
                }
                uint64_t v610 = &v677[2 * v678];
              }
              if (v613)
              {
                uint64_t v611 = &v1244[1];
                unsigned int v679 = 32;
              }
              else
              {
                unsigned int v679 = v612;
              }
              if (v610 != &v611[2 * v679])
              {
                int v680 = *(llvm::detail::IEEEFloat **)v610[1];
                BOOL v681 = (llvm::PointerType *)(*v609 + 1912);
                unsigned int v682 = (llvm::Constant *)llvm::PointerType::get(v681, (llvm::Type *)0x40);
                if (*(llvm::Constant **)v680 != v682) {
                  int v680 = sub_1CC56C0C0((llvm *)0x31, v680, v682, 0);
                }
                *(void *)&long long v1265 = 0;
                *(void *)&long long v1265 = llvm::ConstantInt::get(v1191, *((void *)v610[1] + 1), 0);
                v683 = (uint64_t **)llvm::ConstantExpr::getGetElementPtr((uint64_t)v681, (uint64_t *)v680, (uint64_t)&v1265, 1, 0, 0, 0);
                v684 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)*v606, (llvm::Type *)0x40);
                if (*v683 != (uint64_t *)v684) {
                  v683 = (uint64_t **)sub_1CC56C0C0((llvm *)0x31, (llvm::detail::IEEEFloat *)v683, v684, 0);
                }
                goto LABEL_1334;
              }
              if (!v1179) {
                goto LABEL_1607;
              }
              uint64_t v697 = (uint64_t)*(v606 - 4);
              *(void *)&long long v1265 = v697;
              if (v1222)
              {
                int v698 = 32;
                v699 = &v1223;
                goto LABEL_1168;
              }
              int v698 = v1224;
              if (v1224)
              {
                v699 = (uint64_t *)v1223;
LABEL_1168:
                int v700 = v698 - 1;
                unsigned int v701 = v700 & ((v697 >> 4) ^ (v697 >> 9));
                int v702 = &v699[2 * v701];
                uint64_t v703 = *v702;
                if (v697 != *v702)
                {
                  unsigned int v704 = 0;
                  int v705 = 1;
                  while (v703 != -4096)
                  {
                    if (v704) {
                      BOOL v706 = 0;
                    }
                    else {
                      BOOL v706 = v703 == -8192;
                    }
                    if (v706) {
                      unsigned int v704 = v702;
                    }
                    unsigned int v707 = v701 + v705++;
                    unsigned int v701 = v707 & v700;
                    int v702 = &v699[2 * v701];
                    uint64_t v703 = *v702;
                    if (v697 == *v702) {
                      goto LABEL_1333;
                    }
                  }
                  if (v704) {
                    uint64_t v824 = v704;
                  }
                  else {
                    uint64_t v824 = v702;
                  }
LABEL_1332:
                  int v702 = sub_1CC7EBF40((uint64_t)&v1222, (uint64_t)&v1265, &v1265, v824);
                  *int v702 = v1265;
                  v702[1] = 0;
                }
LABEL_1333:
                v683 = (uint64_t **)v702[1];
LABEL_1334:
                v825 = v606 - 4;
                if (*(v606 - 4))
                {
                  **(v606 - 2) = (uint64_t *)*(v606 - 3);
                  uint64_t v826 = (uint64_t)*(v606 - 3);
                  if (v826) {
                    *(void *)(v826 + 16) = *(v606 - 2);
                  }
                }
                void *v825 = v683;
                if (v683)
                {
                  int v829 = v683[1];
                  v828 = v683 + 1;
                  v827 = v829;
                  *(v606 - 3) = (uint64_t **)v829;
                  if (v829) {
                    v827[2] = (uint64_t)(v606 - 3);
                  }
                  *(v606 - 2) = v828;
                  char *v828 = (uint64_t *)v825;
                }
                goto LABEL_1607;
              }
              uint64_t v824 = 0;
              goto LABEL_1332;
            }
            if (v608 != 85) {
              unsigned int v606 = 0;
            }
            if (v1195 == 28) {
              goto LABEL_1607;
            }
            if (!v606) {
              goto LABEL_1607;
            }
            v640 = (llvm::UndefValue *)llvm::PointerType::get((llvm::PointerType *)*(*v606)[2], (llvm::Type *)0x40);
            if (sub_1CD640748((uint64_t)&v1222, (uint64_t)v606, &v1265)) {
              goto LABEL_1607;
            }
            char v641 = 0;
            unsigned int v642 = (v606 >> 4) ^ (v606 >> 9);
            uint64_t v643 = 1;
LABEL_1049:
            while (2)
            {
              v1205.__r_.__value_.__r.__words[0] = 0;
              v644 = (unsigned __int8 *)v606[4 * v643 - 12];
              v1205.__r_.__value_.__r.__words[0] = (std::string::size_type)v644;
              int v645 = v644[16];
              if ((v645 - 11) <= 1)
              {
                v646 = llvm::UndefValue::get(v640, (llvm::Type *)v644);
                goto LABEL_1053;
              }
              if (v645 == 19)
              {
                v646 = llvm::ConstantPointerNull::get(v640, (llvm::PointerType *)v644);
LABEL_1053:
                sub_1CD6407F4((uint64_t)&v1222, &v1205)[1] = v646;
              }
              else if ((sub_1CD640748((uint64_t)&v1222, (uint64_t)v644, &v1265) & 1) == 0)
              {
                uint64_t v647 = *((void *)&v1268 + 1);
                uint64_t v648 = v1268;
                if (*((void *)&v1268 + 1) == (void)v1268)
                {
                  unsigned int v649 = HIDWORD(v1269);
                  int v650 = (uint64_t ****)(*((void *)&v1268 + 1) + 8 * HIDWORD(v1269));
                  if (HIDWORD(v1269))
                  {
                    uint64_t v651 = 0;
                    while (*(uint64_t ****)(*((void *)&v1268 + 1) + v651) != v606)
                    {
                      v651 += 8;
                      if (8 * HIDWORD(v1269) == v651) {
                        goto LABEL_1077;
                      }
                    }
                    int v650 = (uint64_t ****)(*((void *)&v1268 + 1) + v651);
                  }
LABEL_1077:
                  uint64_t v648 = *((void *)&v1268 + 1);
                }
                else
                {
                  int v652 = v1269 - 1;
                  unsigned int v653 = (v1269 - 1) & v642;
                  int v650 = (uint64_t ****)(*((void *)&v1268 + 1) + 8 * v653);
                  int v654 = *v650;
                  if (*v650 == (uint64_t ***)-1)
                  {
                    BOOL v655 = 0;
LABEL_1121:
                    if (v655) {
                      int v650 = v655;
                    }
                    unsigned int v649 = HIDWORD(v1269);
                    if (*v650 != v606) {
                      int v650 = (uint64_t ****)(*((void *)&v1268 + 1) + 8 * v1269);
                    }
                  }
                  else
                  {
                    BOOL v655 = 0;
                    int v656 = 1;
                    while (v654 != v606)
                    {
                      if (v655) {
                        BOOL v657 = 0;
                      }
                      else {
                        BOOL v657 = v654 == (uint64_t ***)-2;
                      }
                      if (v657) {
                        BOOL v655 = v650;
                      }
                      unsigned int v658 = v653 + v656++;
                      unsigned int v653 = v658 & v652;
                      int v650 = (uint64_t ****)(*((void *)&v1268 + 1) + 8 * (v658 & v652));
                      int v654 = *v650;
                      if (*v650 == (uint64_t ***)-1) {
                        goto LABEL_1121;
                      }
                    }
                    unsigned int v649 = HIDWORD(v1269);
                  }
                }
                unsigned int v659 = v1269;
                if (*((void *)&v1268 + 1) == v648) {
                  unsigned int v660 = v649;
                }
                else {
                  unsigned int v660 = v1269;
                }
                if (v650 == (uint64_t ****)(*((void *)&v1268 + 1) + 8 * v660))
                {
                  if (v1186 && !v1240) {
                    goto LABEL_1607;
                  }
                }
                else if (v1186)
                {
                  goto LABEL_1607;
                }
                if (*((void *)&v1268 + 1) == v648)
                {
                  if (v649)
                  {
                    unsigned int v661 = 0;
                    uint64_t v662 = 8 * v649;
                    v663 = (uint64_t ****)*((void *)&v1268 + 1);
                    while (*v663 != v606)
                    {
                      if (*v663 == (uint64_t ***)-2) {
                        unsigned int v661 = v663;
                      }
                      ++v663;
                      v662 -= 8;
                      if (!v662)
                      {
                        if (!v661) {
                          goto LABEL_1094;
                        }
                        *unsigned int v661 = v606;
                        --v1270;
                        break;
                      }
                    }
LABEL_1117:
                    *(void *)&long long v1265 = v606;
                    sub_1CD48B518((uint64_t *)&v1239, (uint64_t)v1239, &v1265);
                    char v641 = 1;
                    BOOL v53 = v643 == 2;
                    uint64_t v643 = 2;
                    if (v53) {
                      goto LABEL_1607;
                    }
                    continue;
                  }
LABEL_1094:
                  if (v1269 > v649)
                  {
                    HIDWORD(v1269) = v649 + 1;
                    *(void *)(*((void *)&v1268 + 1) + 8 * v649) = v606;
                    goto LABEL_1117;
                  }
                }
                if (3 * (int)v1269 <= 4 * (v649 - v1270))
                {
                  if (v1269 >= 0x40) {
                    unsigned int v659 = 2 * v1269;
                  }
                  else {
                    unsigned int v659 = 128;
                  }
                }
                else if (v1269 - v649 >= v1269 >> 3)
                {
                  goto LABEL_1098;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1268, v659);
                unsigned int v659 = v1269;
                uint64_t v647 = *((void *)&v1268 + 1);
LABEL_1098:
                unsigned int v664 = v659 - 1;
                unsigned int v665 = (v659 - 1) & v642;
                BOOL v666 = (uint64_t ****)(v647 + 8 * v665);
                unsigned int v667 = *v666;
                if (*v666 == (uint64_t ***)-1)
                {
                  v668 = 0;
LABEL_1110:
                  if (v668) {
                    uint64_t v672 = v668;
                  }
                  else {
                    uint64_t v672 = v666;
                  }
                  if (*v672 != v606)
                  {
                    if (*v672 == (uint64_t ***)-2) {
                      --v1270;
                    }
                    else {
                      ++HIDWORD(v1269);
                    }
                    *uint64_t v672 = v606;
                  }
                }
                else
                {
                  v668 = 0;
                  int v669 = 1;
                  while (v667 != v606)
                  {
                    if (v668) {
                      BOOL v670 = 0;
                    }
                    else {
                      BOOL v670 = v667 == (uint64_t ***)-2;
                    }
                    if (v670) {
                      v668 = v666;
                    }
                    unsigned int v671 = v665 + v669++;
                    unsigned int v665 = v671 & v664;
                    BOOL v666 = (uint64_t ****)(v647 + 8 * (v671 & v664));
                    unsigned int v667 = *v666;
                    if (*v666 == (uint64_t ***)-1) {
                      goto LABEL_1110;
                    }
                  }
                }
                goto LABEL_1117;
              }
              break;
            }
            BOOL v53 = v643 == 2;
            uint64_t v643 = 2;
            if (v53)
            {
              if (v641) {
                goto LABEL_1607;
              }
              if (v605)
              {
                v927 = (uint64_t *)(v606 - 8);
                uint64_t v926 = (uint64_t)*(v606 - 8);
                *(void *)&long long v1265 = v926;
                if (v1222)
                {
                  int v928 = 32;
                  uint64_t v929 = &v1223;
                  goto LABEL_1493;
                }
                int v928 = v1224;
                if (!v1224)
                {
                  v953 = 0;
                  goto LABEL_1526;
                }
                uint64_t v929 = (uint64_t *)v1223;
LABEL_1493:
                int v930 = v928 - 1;
                unsigned int v931 = v930 & ((v926 >> 4) ^ (v926 >> 9));
                long long v932 = &v929[2 * v931];
                uint64_t v933 = *v932;
                if (v926 != *v932)
                {
                  v934 = 0;
                  int v935 = 1;
                  while (v933 != -4096)
                  {
                    if (v934) {
                      BOOL v936 = 0;
                    }
                    else {
                      BOOL v936 = v933 == -8192;
                    }
                    if (v936) {
                      v934 = v932;
                    }
                    unsigned int v937 = v931 + v935++;
                    unsigned int v931 = v937 & v930;
                    long long v932 = &v929[2 * v931];
                    uint64_t v933 = *v932;
                    if (v926 == *v932) {
                      goto LABEL_1527;
                    }
                  }
                  if (v934) {
                    v953 = v934;
                  }
                  else {
                    v953 = v932;
                  }
LABEL_1526:
                  long long v932 = sub_1CC7EBF40((uint64_t)&v1222, (uint64_t)&v1265, &v1265, v953);
                  *long long v932 = v1265;
                  v932[1] = 0;
                }
LABEL_1527:
                uint64_t v954 = v932[1];
                if (*v927)
                {
                  **(v606 - 6) = (uint64_t *)*(v606 - 7);
                  uint64_t v955 = (uint64_t)*(v606 - 7);
                  if (v955) {
                    *(void *)(v955 + 16) = *(v606 - 6);
                  }
                }
                uint64_t *v927 = v954;
                if (v954)
                {
                  v958 = *(void ***)(v954 + 8);
                  v956 = (uint64_t **)(v954 + 8);
                  v957 = v958;
                  *(v606 - 7) = v958;
                  if (v958) {
                    v957[2] = v606 - 7;
                  }
                  *(v606 - 6) = v956;
                  *v956 = v927;
                }
                v960 = (uint64_t *)(v606 - 4);
                uint64_t v959 = (uint64_t)*(v606 - 4);
                *(void *)&long long v1265 = v959;
                if (v1222)
                {
                  int v961 = 32;
                  v962 = &v1223;
                  goto LABEL_1536;
                }
                int v961 = v1224;
                if (!v1224)
                {
                  v984 = 0;
                  goto LABEL_1565;
                }
                v962 = (uint64_t *)v1223;
LABEL_1536:
                int v963 = v961 - 1;
                unsigned int v964 = v963 & ((v959 >> 4) ^ (v959 >> 9));
                v965 = &v962[2 * v964];
                uint64_t v966 = *v965;
                if (v959 != *v965)
                {
                  v967 = 0;
                  int v968 = 1;
                  while (v966 != -4096)
                  {
                    if (v967) {
                      BOOL v969 = 0;
                    }
                    else {
                      BOOL v969 = v966 == -8192;
                    }
                    if (v969) {
                      v967 = v965;
                    }
                    unsigned int v970 = v964 + v968++;
                    unsigned int v964 = v970 & v963;
                    v965 = &v962[2 * v964];
                    uint64_t v966 = *v965;
                    if (v959 == *v965) {
                      goto LABEL_1566;
                    }
                  }
                  if (v967) {
                    v984 = v967;
                  }
                  else {
                    v984 = v965;
                  }
LABEL_1565:
                  v965 = sub_1CC7EBF40((uint64_t)&v1222, (uint64_t)&v1265, &v1265, v984);
                  uint64_t *v965 = v1265;
                  v965[1] = 0;
                }
LABEL_1566:
                uint64_t v985 = v965[1];
                if (*v960)
                {
                  **(v606 - 2) = (uint64_t *)*(v606 - 3);
                  uint64_t v986 = (uint64_t)*(v606 - 3);
                  if (v986) {
                    *(void *)(v986 + 16) = *(v606 - 2);
                  }
                }
                uint64_t *v960 = v985;
                if (v985)
                {
                  v989 = *(void ***)(v985 + 8);
                  v987 = (uint64_t **)(v985 + 8);
                  v988 = v989;
                  *(v606 - 3) = v989;
                  if (v989) {
                    v988[2] = v606 - 3;
                  }
                  *(v606 - 2) = v987;
                  *v987 = v960;
                }
                *unsigned int v606 = (uint64_t **)**(v606 - 8);
                *(void *)&long long v1265 = v606;
                if (v1222)
                {
                  int v990 = 32;
                  v991 = &v1223;
                  goto LABEL_1575;
                }
                int v990 = v1224;
                if (!v1224)
                {
                  v1010 = 0;
                  goto LABEL_1599;
                }
                v991 = (uint64_t *)v1223;
LABEL_1575:
                int v992 = v990 - 1;
                unsigned int v993 = v992 & v642;
                v994 = &v991[2 * (v992 & v642)];
                v995 = (void ***)*v994;
                if (v606 != (uint64_t ***)*v994)
                {
                  v996 = 0;
                  int v997 = 1;
                  while (v995 != (void ***)-4096)
                  {
                    if (v996) {
                      BOOL v998 = 0;
                    }
                    else {
                      BOOL v998 = v995 == (void ***)-8192;
                    }
                    if (v998) {
                      v996 = v994;
                    }
                    unsigned int v999 = v993 + v997++;
                    unsigned int v993 = v999 & v992;
                    v994 = &v991[2 * v993];
                    v995 = (void ***)*v994;
                    if (v606 == (uint64_t ***)*v994) {
                      goto LABEL_1600;
                    }
                  }
                  if (v996) {
                    v1010 = v996;
                  }
                  else {
                    v1010 = v994;
                  }
LABEL_1599:
                  v994 = sub_1CC7EBF40((uint64_t)&v1222, (uint64_t)&v1265, &v1265, v1010);
                  uint64_t *v994 = v1265;
                  v994[1] = 0;
                }
LABEL_1600:
                v994[1] = (uint64_t)v606;
LABEL_1601:
                v1011 = v606[1];
                if (v1011)
                {
                  unsigned int v602 = v1240;
                  do
                  {
                    if (v602 >= HIDWORD(v1240)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v1239 + v602) = v1011[3];
                    unsigned int v602 = v1240 + 1;
                    LODWORD(v1240) = v1240 + 1;
                    v1011 = (uint64_t **)v1011[1];
                  }
                  while (v1011);
                  continue;
                }
LABEL_1607:
                unsigned int v602 = v1240;
                continue;
              }
              uint64_t v940 = (uint64_t)*(v606 - 12);
              std::string::size_type v941 = (std::string::size_type)*(v606 - 8);
              v1205.__r_.__value_.__r.__words[0] = v941;
              char v942 = (char)v1222;
              if (v1222)
              {
                int v943 = 32;
                v944 = &v1223;
                goto LABEL_1513;
              }
              int v943 = v1224;
              if (!v1224)
              {
                v971 = 0;
                goto LABEL_1549;
              }
              v944 = (uint64_t *)v1223;
LABEL_1513:
              int v945 = v943 - 1;
              unsigned int v946 = v945 & ((v941 >> 4) ^ (v941 >> 9));
              v947 = &v944[2 * v946];
              uint64_t v948 = *v947;
              if (v941 != *v947)
              {
                v949 = 0;
                int v950 = 1;
                while (v948 != -4096)
                {
                  if (v949) {
                    BOOL v951 = 0;
                  }
                  else {
                    BOOL v951 = v948 == -8192;
                  }
                  if (v951) {
                    v949 = v947;
                  }
                  unsigned int v952 = v946 + v950++;
                  unsigned int v946 = v952 & v945;
                  v947 = &v944[2 * v946];
                  uint64_t v948 = *v947;
                  if (v941 == *v947) {
                    goto LABEL_1550;
                  }
                }
                if (v949) {
                  v971 = v949;
                }
                else {
                  v971 = v947;
                }
LABEL_1549:
                v947 = sub_1CC7EBF40((uint64_t)&v1222, (uint64_t)&v1205, &v1205, v971);
                uint64_t *v947 = v1205.__r_.__value_.__r.__words[0];
                v947[1] = 0;
                char v942 = (char)v1222;
              }
LABEL_1550:
              v972 = (uint64_t *)v947[1];
              uint64_t v973 = (uint64_t)*(v606 - 4);
              uint64_t v1204 = v973;
              if (v942)
              {
                int v974 = 32;
                v975 = &v1223;
                goto LABEL_1552;
              }
              int v974 = v1224;
              if (!v1224)
              {
                v1000 = 0;
                goto LABEL_1588;
              }
              v975 = (uint64_t *)v1223;
LABEL_1552:
              int v976 = v974 - 1;
              unsigned int v977 = v976 & ((v973 >> 4) ^ (v973 >> 9));
              v978 = &v975[2 * v977];
              uint64_t v979 = *v978;
              if (v973 != *v978)
              {
                v980 = 0;
                int v981 = 1;
                while (v979 != -4096)
                {
                  if (v980) {
                    BOOL v982 = 0;
                  }
                  else {
                    BOOL v982 = v979 == -8192;
                  }
                  if (v982) {
                    v980 = v978;
                  }
                  unsigned int v983 = v977 + v981++;
                  unsigned int v977 = v983 & v976;
                  v978 = &v975[2 * v977];
                  uint64_t v979 = *v978;
                  if (v973 == *v978) {
                    goto LABEL_1589;
                  }
                }
                if (v980) {
                  v1000 = v980;
                }
                else {
                  v1000 = v978;
                }
LABEL_1588:
                v978 = sub_1CC7EBF40((uint64_t)&v1222, (uint64_t)&v1204, &v1204, v1000);
                uint64_t *v978 = v1204;
                v978[1] = 0;
              }
LABEL_1589:
              uint64_t v1001 = v978[1];
              if ((*((unsigned char *)v606 + 23) & 0x10) != 0)
              {
                uint64_t v1002 = ***v606;
                uint64_t v1003 = *(void *)(v1002 + 152);
                uint64_t v1004 = *(unsigned int *)(v1002 + 168);
                if (!v1004) {
                  goto LABEL_1610;
                }
                LODWORD(v1005) = (v1004 - 1) & v642;
                v1006 = (uint64_t ****)(v1003 + 16 * v1005);
                v1007 = *v1006;
                if (*v1006 != v606)
                {
                  int v1008 = 1;
                  while (v1007 != (uint64_t ***)-4096)
                  {
                    int v1009 = v1005 + v1008++;
                    uint64_t v1005 = v1009 & (v1004 - 1);
                    v1007 = *(uint64_t ****)(v1003 + 16 * v1005);
                    if (v1007 == v606)
                    {
                      v1006 = (uint64_t ****)(v1003 + 16 * v1005);
                      goto LABEL_1611;
                    }
                  }
LABEL_1610:
                  v1006 = (uint64_t ****)(v1003 + 16 * v1004);
                }
LABEL_1611:
                v1012 = v1006[1];
                v1015 = *v1012;
                v1014 = (char *)(v1012 + 2);
                v1013 = v1015;
              }
              else
              {
                v1013 = 0;
                v1014 = &byte_1CFBCE98E;
              }
              __int16 v1267 = 261;
              *(void *)&long long v1265 = v1014;
              *((void *)&v1265 + 1) = v1013;
              v1016 = sub_1CC199EFC(v940, v972, v1001, (const char **)&v1265, (uint64_t)v606, 0);
              *(void *)&long long v1265 = v606;
              if (v1222)
              {
                int v1017 = 32;
                v1018 = &v1223;
                goto LABEL_1614;
              }
              int v1017 = v1224;
              if (v1224)
              {
                v1018 = (uint64_t *)v1223;
LABEL_1614:
                int v1019 = v1017 - 1;
                unsigned int v1020 = v1019 & v642;
                v1021 = &v1018[2 * (v1019 & v642)];
                v1022 = (void ***)*v1021;
                if (v606 != (uint64_t ***)*v1021)
                {
                  v1023 = 0;
                  int v1024 = 1;
                  while (v1022 != (void ***)-4096)
                  {
                    if (v1023) {
                      BOOL v1025 = 0;
                    }
                    else {
                      BOOL v1025 = v1022 == (void ***)-8192;
                    }
                    if (v1025) {
                      v1023 = v1021;
                    }
                    unsigned int v1026 = v1020 + v1024++;
                    unsigned int v1020 = v1026 & v1019;
                    v1021 = &v1018[2 * v1020];
                    v1022 = (void ***)*v1021;
                    if (v606 == (uint64_t ***)*v1021) {
                      goto LABEL_1628;
                    }
                  }
                  if (v1023) {
                    v1027 = v1023;
                  }
                  else {
                    v1027 = v1021;
                  }
LABEL_1627:
                  v1021 = sub_1CC7EBF40((uint64_t)&v1222, (uint64_t)&v1265, &v1265, v1027);
                  uint64_t *v1021 = v1265;
                  v1021[1] = 0;
                }
LABEL_1628:
                v1021[1] = (uint64_t)v1016;
                long long v1265 = 4uLL;
                *(void *)&long long v1266 = v1016;
                if (v1016 != (llvm::Value *)-8192 && v1016 != (llvm::Value *)-4096 && v1016) {
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v1265);
                }
                v1028 = (char *)v1247;
                if (v1248 >= HIDWORD(v1248))
                {
                  unint64_t v1050 = v1248 + 1;
                  if (v1247 <= &v1265 && (char *)v1247 + 24 * v1248 > (char *)&v1265)
                  {
                    int64_t v1055 = (char *)&v1265 - (unsigned char *)v1247;
                    sub_1CC0BD844((unsigned int *)&v1247, v1050);
                    v1028 = (char *)v1247;
                    v1029 = (long long *)((char *)v1247 + v1055);
                  }
                  else
                  {
                    sub_1CC0BD844((unsigned int *)&v1247, v1050);
                    v1029 = &v1265;
                    v1028 = (char *)v1247;
                  }
                }
                else
                {
                  v1029 = &v1265;
                }
                int v1030 = (int)v1248;
                v1031 = (unint64_t *)&v1028[24 * v1248];
                unint64_t *v1031 = 4;
                v1031[1] = 0;
                unint64_t v1032 = *((void *)v1029 + 2);
                v1031[2] = v1032;
                if (v1032 != -8192 && v1032 != -4096)
                {
                  if (v1032)
                  {
                    unint64_t v1033 = *(void *)v1029 & 0xFFFFFFFFFFFFFFF8;
                    v1031[1] = *(void *)v1033;
                    *(void *)unint64_t v1033 = v1031;
                    unint64_t *v1031 = v1033 | 4;
                    v1034 = (unint64_t *)v1031[1];
                    if (v1034) {
                      unint64_t *v1034 = *v1034 & 7 | (unint64_t)(v1031 + 1);
                    }
                  }
                }
                LODWORD(v1248) = v1030 + 1;
                if ((void)v1266 != -8192 && (void)v1266 != -4096 && (void)v1266)
                {
                  unint64_t v1035 = v1265 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)(v1265 & 0xFFFFFFFFFFFFFFF8) = *((void *)&v1265 + 1);
                  if (*((void *)&v1265 + 1))
                  {
                    **((void **)&v1265 + 1) = **((void **)&v1265 + 1) & 7 | v1035;
                  }
                  else
                  {
                    uint64_t v1036 = v1266;
                    v1037 = ***(int32x2_t ****)v1266;
                    unint64_t v1038 = (unint64_t)v1037[303];
                    if (v1038 <= v1035)
                    {
                      uint64_t v1039 = v1037[305].u32[0];
                      if (v1038 + 16 * v1039 > v1035)
                      {
                        unsigned int v1040 = v1039 - 1;
                        LODWORD(v1041) = v1040 & ((v1266 >> 4) ^ (v1266 >> 9));
                        v1042 = (uint64_t *)(v1038 + 16 * v1041);
                        uint64_t v1043 = *v1042;
                        if ((void)v1266 == *v1042)
                        {
LABEL_1650:
                          uint64_t *v1042 = -8192;
                          v1037[304] = vadd_s32(v1037[304], (int32x2_t)0x1FFFFFFFFLL);
                          uint64_t v1036 = v1266;
                        }
                        else
                        {
                          int v1044 = 1;
                          while (v1043 != -4096)
                          {
                            int v1045 = v1041 + v1044++;
                            uint64_t v1041 = v1045 & v1040;
                            uint64_t v1043 = *(void *)(v1038 + 16 * v1041);
                            if ((void)v1266 == v1043)
                            {
                              v1042 = (uint64_t *)(v1038 + 16 * v1041);
                              goto LABEL_1650;
                            }
                          }
                        }
                        *(unsigned char *)(v1036 + 17) &= ~1u;
                      }
                    }
                  }
                }
                goto LABEL_1601;
              }
              v1027 = 0;
              goto LABEL_1627;
            }
            goto LABEL_1049;
          }
          if ((v605 & 1) == 0)
          {
            *(void *)&long long v1265 = &v1266;
            *((void *)&v1265 + 1) = 0x800000000;
            int v673 = *((_DWORD *)v606 + 5);
            uint64_t v674 = v673 & 0x7FFFFFF;
            if (&v606[-4 * v674 + 4] == v606)
            {
              unsigned int v675 = 0;
              uint64_t v708 = -v674;
            }
            else
            {
              unsigned int v675 = 0;
              uint64_t v676 = 32 - 32 * v674;
              do
              {
                if (v675 >= HIDWORD(v1265)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(v1265 + 8 * v675) = *(uint64_t ***)((char *)v606 + v676);
                unsigned int v675 = ++DWORD2(v1265);
                v676 += 32;
              }
              while (v676);
              int v673 = *((_DWORD *)v606 + 5);
              uint64_t v708 = -(uint64_t)(v673 & 0x7FFFFFF);
            }
            std::string::size_type v744 = (std::string::size_type)v606[4 * v708];
            v1205.__r_.__value_.__r.__words[0] = v744;
            if (v1222)
            {
              int v745 = 32;
              int v746 = &v1223;
              goto LABEL_1227;
            }
            int v745 = v1224;
            if (!v1224)
            {
              int v755 = 0;
              goto LABEL_1240;
            }
            int v746 = (uint64_t *)v1223;
LABEL_1227:
            int v747 = v745 - 1;
            unsigned int v748 = v747 & ((v744 >> 4) ^ (v744 >> 9));
            v749 = &v746[2 * v748];
            uint64_t v750 = *v749;
            if (v744 != *v749)
            {
              unint64_t v751 = 0;
              int v752 = 1;
              while (v750 != -4096)
              {
                if (v751) {
                  BOOL v753 = 0;
                }
                else {
                  BOOL v753 = v750 == -8192;
                }
                if (v753) {
                  unint64_t v751 = v749;
                }
                unsigned int v754 = v748 + v752++;
                unsigned int v748 = v754 & v747;
                v749 = &v746[2 * v748];
                uint64_t v750 = *v749;
                if (v744 == *v749) {
                  goto LABEL_1241;
                }
              }
              if (v751) {
                int v755 = v751;
              }
              else {
                int v755 = v749;
              }
LABEL_1240:
              v749 = sub_1CC7EBF40((uint64_t)&v1222, (uint64_t)&v1205, &v1205, v755);
              uint64_t *v749 = v1205.__r_.__value_.__r.__words[0];
              v749[1] = 0;
              unsigned int v675 = DWORD2(v1265);
              int v673 = *((_DWORD *)v606 + 5);
            }
LABEL_1241:
            int v756 = (uint64_t *)v749[1];
            uint64_t v757 = (uint64_t)v606[8];
            unsigned int v758 = v606 >> 4;
            v759 = (uint64_t *)v1265;
            if ((v673 & 0x10000000) != 0)
            {
              uint64_t v760 = ***v606;
              uint64_t v761 = *(void *)(v760 + 152);
              uint64_t v762 = *(unsigned int *)(v760 + 168);
              if (!v762) {
                goto LABEL_1341;
              }
              LODWORD(v763) = (v762 - 1) & (v758 ^ (v606 >> 9));
              v764 = (uint64_t ****)(v761 + 16 * v763);
              v765 = *v764;
              if (*v764 != v606)
              {
                int v766 = 1;
                while (v765 != (uint64_t ***)-4096)
                {
                  int v767 = v763 + v766++;
                  uint64_t v763 = v767 & (v762 - 1);
                  v765 = *(uint64_t ****)(v761 + 16 * v763);
                  if (v765 == v606)
                  {
                    v764 = (uint64_t ****)(v761 + 16 * v763);
                    goto LABEL_1342;
                  }
                }
LABEL_1341:
                v764 = (uint64_t ****)(v761 + 16 * v762);
              }
LABEL_1342:
              uint64_t v830 = v764[1];
              std::string::size_type v833 = (std::string::size_type)*v830;
              uint64_t v832 = (char *)(v830 + 2);
              std::string::size_type v831 = v833;
            }
            else
            {
              std::string::size_type v831 = 0;
              uint64_t v832 = &byte_1CFBCE98E;
            }
            uint64_t v834 = v675;
            __int16 v1206 = 261;
            v1205.__r_.__value_.__r.__words[0] = (std::string::size_type)v832;
            v1205.__r_.__value_.__l.__size_ = v831;
            uint64_t v835 = v675 + 1;
            BOOL v836 = v675 == -1;
            uint64_t v837 = operator new(32 * v835 + 80);
            std::string::size_type v838 = (std::string::size_type)&v837[4 * v835];
            *(_DWORD *)(v838 + 20) = *(_DWORD *)(v838 + 20) & 0x38000000 | v835 & 0x7FFFFFF;
            if (!v836)
            {
              do
              {
                *uint64_t v837 = 0;
                v837[1] = 0;
                v837[2] = 0;
                v837[3] = v838;
                v837 += 4;
              }
              while (v837 != (void *)v838);
            }
            sub_1CB845A7C(v757, v756, (uint64_t)v759, v834);
            *(void *)std::string::size_type v838 = v839;
            *(void *)(v838 + 8) = 0;
            int v840 = *(_DWORD *)(v838 + 20) & 0xC0000000 | v835 & 0x7FFFFFF;
            *(_DWORD *)(v838 + 16) = 62;
            *(_DWORD *)(v838 + 20) = v840;
            *(_OWORD *)(v838 + 24) = 0u;
            unint64_t v841 = (uint64_t *)(v838 + 24);
            *(_OWORD *)(v838 + 40) = 0u;
            *(_DWORD *)(v838 + 56) = 0;
            unint64_t v842 = v606[5];
            *(void *)(v838 + 40) = v842;
            *((_WORD *)v842 + 9) &= ~0x8000u;
            if ((*(unsigned char *)(v838 + 23) & 0x10) != 0)
            {
              uint64_t v938 = v842[7];
              if (v938)
              {
                int v939 = (llvm::ValueSymbolTable *)v938[13];
                if (v939) {
                  llvm::ValueSymbolTable::reinsertValue(v939, (llvm::Value *)v838);
                }
              }
            }
            v843 = v606[3];
            *(void *)(v838 + 24) = v843;
            *(void *)(v838 + 32) = v606 + 3;
            v843[1] = v841;
            v606[3] = (uint64_t **)v841;
            *(void *)(v838 + 64) = v757;
            *(void *)(v838 + 72) = llvm::GetElementPtrInst::getIndexedType(v757, (uint64_t)v759, v834);
            llvm::GetElementPtrInst::init((uint64_t ***)v838, (uint64_t **)v756, v759, v834, (const char **)&v1205.__r_.__value_.__l.__data_);
            *(unsigned char *)(v838 + 17) = *(unsigned char *)(v838 + 17) & 0xFD | *((unsigned char *)v606 + 17) & 2;
            v1205.__r_.__value_.__r.__words[0] = (std::string::size_type)v606;
            if (v1222)
            {
              int v844 = 32;
              uint64_t v845 = &v1223;
              goto LABEL_1348;
            }
            int v844 = v1224;
            if (v1224)
            {
              uint64_t v845 = (uint64_t *)v1223;
LABEL_1348:
              int v846 = v844 - 1;
              unsigned int v847 = v846 & (v758 ^ (v606 >> 9));
              uint64_t v848 = &v845[2 * v847];
              v849 = (void ***)*v848;
              if (v606 != (uint64_t ***)*v848)
              {
                uint64_t v850 = 0;
                int v851 = 1;
                while (v849 != (void ***)-4096)
                {
                  if (v850) {
                    BOOL v852 = 0;
                  }
                  else {
                    BOOL v852 = v849 == (void ***)-8192;
                  }
                  if (v852) {
                    uint64_t v850 = v848;
                  }
                  unsigned int v853 = v847 + v851++;
                  unsigned int v847 = v853 & v846;
                  uint64_t v848 = &v845[2 * v847];
                  v849 = (void ***)*v848;
                  if (v606 == (uint64_t ***)*v848) {
                    goto LABEL_1362;
                  }
                }
                if (v850) {
                  v854 = v850;
                }
                else {
                  v854 = v848;
                }
LABEL_1361:
                uint64_t v848 = sub_1CC7EBF40((uint64_t)&v1222, (uint64_t)&v1205, &v1205, v854);
                *uint64_t v848 = v1205.__r_.__value_.__r.__words[0];
                v848[1] = 0;
              }
LABEL_1362:
              v848[1] = v838;
              *(_OWORD *)&v1205.__r_.__value_.__l.__data_ = 4uLL;
              v1205.__r_.__value_.__r.__words[2] = v838;
              if (v838 != -8192 && v838 != -4096 && v838) {
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v1205);
              }
              v855 = (char *)v1247;
              if (v1248 >= HIDWORD(v1248))
              {
                unint64_t v1048 = v1248 + 1;
                if (v1247 <= &v1205 && (char *)v1247 + 24 * v1248 > (char *)&v1205)
                {
                  int64_t v1053 = (char *)&v1205 - (unsigned char *)v1247;
                  sub_1CC0BD844((unsigned int *)&v1247, v1048);
                  v855 = (char *)v1247;
                  v856 = (std::string *)((char *)v1247 + v1053);
                }
                else
                {
                  sub_1CC0BD844((unsigned int *)&v1247, v1048);
                  v856 = &v1205;
                  v855 = (char *)v1247;
                }
              }
              else
              {
                v856 = &v1205;
              }
              int v857 = (int)v1248;
              v858 = (unint64_t *)&v855[24 * v1248];
              unint64_t *v858 = 4;
              v858[1] = 0;
              unint64_t v859 = v856->__r_.__value_.__r.__words[2];
              v858[2] = v859;
              if (v859 != -8192 && v859 != -4096)
              {
                if (v859)
                {
                  unint64_t v860 = v856->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
                  v858[1] = *(void *)v860;
                  *(void *)unint64_t v860 = v858;
                  unint64_t *v858 = v860 | 4;
                  uint64_t v861 = (unint64_t *)v858[1];
                  if (v861) {
                    *uint64_t v861 = *v861 & 7 | (unint64_t)(v858 + 1);
                  }
                }
              }
              LODWORD(v1248) = v857 + 1;
              if (v1205.__r_.__value_.__r.__words[2] != -8192
                && v1205.__r_.__value_.__r.__words[2] != -4096
                && v1205.__r_.__value_.__r.__words[2])
              {
                std::string::size_type v862 = v1205.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
                *(void *)(v1205.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) = v1205.__r_.__value_.__l.__size_;
                if (v1205.__r_.__value_.__l.__size_)
                {
                  *(void *)v1205.__r_.__value_.__l.__size_ = *(void *)v1205.__r_.__value_.__l.__size_ & 7 | v862;
                }
                else
                {
                  std::string::size_type v863 = v1205.__r_.__value_.__r.__words[2];
                  v864 = ***(int32x2_t ****)v1205.__r_.__value_.__r.__words[2];
                  std::string::size_type v865 = (std::string::size_type)v864[303];
                  if (v865 <= v862)
                  {
                    uint64_t v866 = v864[305].u32[0];
                    if (v865 + 16 * v866 > v862)
                    {
                      unsigned int v867 = v866 - 1;
                      LODWORD(v868) = v867 & ((LODWORD(v1205.__r_.__value_.__r.__words[2]) >> 4) ^ (LODWORD(v1205.__r_.__value_.__r.__words[2]) >> 9));
                      uint64_t v869 = (uint64_t *)(v865 + 16 * v868);
                      uint64_t v870 = *v869;
                      if (v1205.__r_.__value_.__r.__words[2] == *v869)
                      {
LABEL_1384:
                        *uint64_t v869 = -8192;
                        v864[304] = vadd_s32(v864[304], (int32x2_t)0x1FFFFFFFFLL);
                        std::string::size_type v863 = v1205.__r_.__value_.__r.__words[2];
                      }
                      else
                      {
                        int v871 = 1;
                        while (v870 != -4096)
                        {
                          int v872 = v868 + v871++;
                          uint64_t v868 = v872 & v867;
                          uint64_t v870 = *(void *)(v865 + 16 * v868);
                          if (v1205.__r_.__value_.__r.__words[2] == v870)
                          {
                            uint64_t v869 = (uint64_t *)(v865 + 16 * v868);
                            goto LABEL_1384;
                          }
                        }
                      }
                      *(unsigned char *)(v863 + 17) &= ~1u;
                    }
                  }
                }
              }
              if ((long long *)v1265 != &v1266) {
                free((void *)v1265);
              }
              goto LABEL_1458;
            }
            v854 = 0;
            goto LABEL_1361;
          }
          uint64_t v614 = *((_DWORD *)v606 + 5) & 0x7FFFFFF;
          int v615 = v606[-4 * v614];
          *(void *)&long long v1265 = v615;
          if (v1222)
          {
            int v616 = 32;
            int v617 = &v1223;
          }
          else
          {
            int v616 = v1224;
            if (!v1224)
            {
              unint64_t v722 = 0;
LABEL_1193:
              v621 = sub_1CC7EBF40((uint64_t)&v1222, (uint64_t)&v1265, &v1265, v722);
              uint64_t *v621 = v1265;
              v621[1] = 0;
              uint64_t v618 = -(uint64_t)(*((_DWORD *)v606 + 5) & 0x7FFFFFF);
              goto LABEL_1194;
            }
            int v617 = (uint64_t *)v1223;
          }
          uint64_t v618 = -v614;
          int v619 = v616 - 1;
          unsigned int v620 = v619 & ((v615 >> 4) ^ (v615 >> 9));
          v621 = &v617[2 * v620];
          uint64_t v622 = *v621;
          if (v615 != (uint64_t **)*v621)
          {
            BOOL v623 = 0;
            int v624 = 1;
            while (v622 != -4096)
            {
              if (v623) {
                BOOL v625 = 0;
              }
              else {
                BOOL v625 = v622 == -8192;
              }
              if (v625) {
                BOOL v623 = v621;
              }
              unsigned int v626 = v620 + v624++;
              unsigned int v620 = v626 & v619;
              v621 = &v617[2 * v620];
              uint64_t v622 = *v621;
              if (v615 == (uint64_t **)*v621) {
                goto LABEL_1194;
              }
            }
            if (v623) {
              unint64_t v722 = v623;
            }
            else {
              unint64_t v722 = v621;
            }
            goto LABEL_1193;
          }
LABEL_1194:
          uint64_t v723 = (unint64_t *)v621[1];
          v724 = *v606;
          v725 = (unint64_t **)&v606[4 * v618];
          if (*v725)
          {
            *v725[2] = (unint64_t)v725[1];
            uint64_t v726 = v725[1];
            if (v726) {
              v726[2] = (unint64_t)v725[2];
            }
          }
          uint64_t *v725 = v723;
          if (v723)
          {
            v727 = (unint64_t ***)(v723 + 1);
            unint64_t v728 = v723[1];
            v729 = &v606[4 * v618];
            v729[1] = (uint64_t **)v728;
            if (v728) {
              *(void *)(v728 + 16) = v729 + 1;
            }
            v729[2] = (uint64_t **)v727;
            void *v727 = v725;
          }
          if (v724[3]) {
            unint64_t v730 = llvm::PointerType::get((llvm::PointerType *)*v724[2], (llvm::Type *)0x40);
          }
          else {
            unint64_t v730 = *v723;
          }
          *unsigned int v606 = (uint64_t **)v730;
          *(void *)&long long v1265 = v606;
          if (v1222)
          {
            int v768 = 32;
            int v769 = &v1223;
          }
          else
          {
            int v768 = v1224;
            if (!v1224)
            {
              unsigned int v778 = 0;
LABEL_1264:
              v772 = sub_1CC7EBF40((uint64_t)&v1222, (uint64_t)&v1265, &v1265, v778);
              uint64_t *v772 = v1265;
              v772[1] = 0;
              goto LABEL_1265;
            }
            int v769 = (uint64_t *)v1223;
          }
          int v770 = v768 - 1;
          unsigned int v771 = v770 & ((v606 >> 4) ^ (v606 >> 9));
          v772 = &v769[2 * v771];
          int v773 = (void ***)*v772;
          if (v606 != (uint64_t ***)*v772)
          {
            BOOL v774 = 0;
            int v775 = 1;
            while (v773 != (void ***)-4096)
            {
              if (v774) {
                BOOL v776 = 0;
              }
              else {
                BOOL v776 = v773 == (void ***)-8192;
              }
              if (v776) {
                BOOL v774 = v772;
              }
              unsigned int v777 = v771 + v775++;
              unsigned int v771 = v777 & v770;
              v772 = &v769[2 * v771];
              int v773 = (void ***)*v772;
              if (v606 == (uint64_t ***)*v772) {
                goto LABEL_1265;
              }
            }
            if (v774) {
              unsigned int v778 = v774;
            }
            else {
              unsigned int v778 = v772;
            }
            goto LABEL_1264;
          }
LABEL_1265:
          v772[1] = (uint64_t)v606;
LABEL_1458:
          long long v1265 = 4uLL;
          *(void *)&long long v1266 = v606;
          if (v606 != (uint64_t ***)-8192 && v606 != (uint64_t ***)-4096 && v606) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v1265);
          }
          uint64_t v907 = (char *)v1247;
          if (v1248 >= HIDWORD(v1248))
          {
            unint64_t v1046 = v1248 + 1;
            if (v1247 <= &v1265 && (char *)v1247 + 24 * v1248 > (char *)&v1265)
            {
              int64_t v1051 = (char *)&v1265 - (unsigned char *)v1247;
              sub_1CC0BD844((unsigned int *)&v1247, v1046);
              uint64_t v907 = (char *)v1247;
              v908 = (long long *)((char *)v1247 + v1051);
            }
            else
            {
              sub_1CC0BD844((unsigned int *)&v1247, v1046);
              v908 = &v1265;
              uint64_t v907 = (char *)v1247;
            }
          }
          else
          {
            v908 = &v1265;
          }
          int v909 = (int)v1248;
          uint64_t v910 = (unint64_t *)&v907[24 * v1248];
          *uint64_t v910 = 4;
          v910[1] = 0;
          unint64_t v911 = *((void *)v908 + 2);
          v910[2] = v911;
          if (v911 != -8192 && v911 != -4096)
          {
            if (v911)
            {
              unint64_t v912 = *(void *)v908 & 0xFFFFFFFFFFFFFFF8;
              v910[1] = *(void *)v912;
              *(void *)unint64_t v912 = v910;
              *uint64_t v910 = v912 | 4;
              uint64_t v913 = (unint64_t *)v910[1];
              if (v913) {
                *uint64_t v913 = *v913 & 7 | (unint64_t)(v910 + 1);
              }
            }
          }
          LODWORD(v1248) = v909 + 1;
          if ((void)v1266 != -8192 && (void)v1266 != -4096 && (void)v1266)
          {
            unint64_t v914 = v1265 & 0xFFFFFFFFFFFFFFF8;
            *(void *)(v1265 & 0xFFFFFFFFFFFFFFF8) = *((void *)&v1265 + 1);
            if (*((void *)&v1265 + 1))
            {
              **((void **)&v1265 + 1) = **((void **)&v1265 + 1) & 7 | v914;
            }
            else
            {
              uint64_t v915 = v1266;
              uint64_t v916 = ***(int32x2_t ****)v1266;
              unint64_t v917 = (unint64_t)v916[303];
              if (v917 <= v914)
              {
                uint64_t v918 = v916[305].u32[0];
                if (v917 + 16 * v918 > v914)
                {
                  unsigned int v919 = v918 - 1;
                  LODWORD(v920) = v919 & ((v1266 >> 4) ^ (v1266 >> 9));
                  int64x2_t v921 = (uint64_t *)(v917 + 16 * v920);
                  uint64_t v922 = *v921;
                  if ((void)v1266 == *v921)
                  {
LABEL_1480:
                    *int64x2_t v921 = -8192;
                    v916[304] = vadd_s32(v916[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v915 = v1266;
                  }
                  else
                  {
                    int v923 = 1;
                    while (v922 != -4096)
                    {
                      int v924 = v920 + v923++;
                      uint64_t v920 = v924 & v919;
                      uint64_t v922 = *(void *)(v917 + 16 * v920);
                      if ((void)v1266 == v922)
                      {
                        int64x2_t v921 = (uint64_t *)(v917 + 16 * v920);
                        goto LABEL_1480;
                      }
                    }
                  }
                  *(unsigned char *)(v915 + 17) &= ~1u;
                }
              }
            }
          }
          int v925 = v606[1];
          if (!v925) {
            goto LABEL_1607;
          }
          unsigned int v602 = v1240;
          do
          {
            if (v602 >= HIDWORD(v1240)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v1239 + v602) = v925[3];
            unsigned int v602 = v1240 + 1;
            LODWORD(v1240) = v1240 + 1;
            int v925 = (uint64_t **)v925[1];
          }
          while (v925);
        }
        while (v602);
      }
      unsigned int v1056 = v1248;
      if (v1186 | v1182)
      {
        for (; v1248; unsigned int v1056 = v1248)
        {
          v1057 = (char *)v1247;
          v1058 = (char *)v1247 + 24 * v1056;
          long long v1265 = 4uLL;
          uint64_t v1059 = *((void *)v1058 - 1);
          *(void *)&long long v1266 = v1059;
          if (v1059 && v1059 != -8192 && v1059 != -4096)
          {
            unint64_t v1060 = *((void *)v1058 - 3) & 0xFFFFFFFFFFFFFFF8;
            *((void *)&v1265 + 1) = *(void *)v1060;
            *(void *)unint64_t v1060 = &v1265;
            *(void *)&long long v1265 = v1060 | 4;
            if (*((void *)&v1265 + 1)) {
              **((void **)&v1265 + 1) = **((void **)&v1265 + 1) & 7 | ((unint64_t)&v1265 + 8);
            }
            unsigned int v1056 = v1248;
            v1057 = (char *)v1247;
          }
          LODWORD(v1248) = v1056 - 1;
          v1061 = &v1057[24 * v1056 - 24];
          uint64_t v1062 = *((void *)v1061 + 2);
          if (v1062 && v1062 != -8192 && v1062 != -4096)
          {
            unint64_t v1063 = *(void *)v1061 & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1063 = *((void *)v1061 + 1);
            v1064 = (unint64_t *)*((void *)v1061 + 1);
            if (v1064)
            {
              unint64_t *v1064 = *v1064 & 7 | v1063;
            }
            else
            {
              uint64_t v1065 = *((void *)v1061 + 2);
              v1066 = ***(int32x2_t ****)v1065;
              unint64_t v1067 = (unint64_t)v1066[303];
              if (v1067 <= v1063)
              {
                uint64_t v1068 = v1066[305].u32[0];
                if (v1067 + 16 * v1068 > v1063)
                {
                  unsigned int v1069 = v1068 - 1;
                  LODWORD(v1070) = v1069 & ((v1065 >> 4) ^ (v1065 >> 9));
                  v1071 = (uint64_t *)(v1067 + 16 * v1070);
                  uint64_t v1072 = *v1071;
                  if (v1065 == *v1071)
                  {
LABEL_1722:
                    uint64_t *v1071 = -8192;
                    v1066[304] = vadd_s32(v1066[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v1065 = *((void *)v1061 + 2);
                  }
                  else
                  {
                    int v1073 = 1;
                    while (v1072 != -4096)
                    {
                      int v1074 = v1070 + v1073++;
                      uint64_t v1070 = v1074 & v1069;
                      uint64_t v1072 = *(void *)(v1067 + 16 * v1070);
                      if (v1065 == v1072)
                      {
                        v1071 = (uint64_t *)(v1067 + 16 * v1070);
                        goto LABEL_1722;
                      }
                    }
                  }
                  *(unsigned char *)(v1065 + 17) &= ~1u;
                }
              }
            }
          }
          if ((void)v1266)
          {
            if (*(unsigned __int8 *)(v1266 + 16) <= 0x1Bu) {
              uint64_t v1075 = 0;
            }
            else {
              uint64_t v1075 = v1266;
            }
          }
          else
          {
            uint64_t v1075 = 0;
          }
          if ((void)v1266 != -8192 && (void)v1266 != -4096 && (void)v1266 != 0)
          {
            unint64_t v1077 = v1265 & 0xFFFFFFFFFFFFFFF8;
            *(void *)(v1265 & 0xFFFFFFFFFFFFFFF8) = *((void *)&v1265 + 1);
            if (*((void *)&v1265 + 1))
            {
              **((void **)&v1265 + 1) = **((void **)&v1265 + 1) & 7 | v1077;
            }
            else
            {
              uint64_t v1078 = v1266;
              v1079 = ***(int32x2_t ****)v1266;
              unint64_t v1080 = (unint64_t)v1079[303];
              if (v1080 <= v1077)
              {
                uint64_t v1081 = v1079[305].u32[0];
                if (v1080 + 16 * v1081 > v1077)
                {
                  unsigned int v1082 = v1081 - 1;
                  LODWORD(v1083) = v1082 & ((v1266 >> 4) ^ (v1266 >> 9));
                  v1084 = (uint64_t *)(v1080 + 16 * v1083);
                  uint64_t v1085 = *v1084;
                  if ((void)v1266 == *v1084)
                  {
LABEL_1748:
                    uint64_t *v1084 = -8192;
                    v1079[304] = vadd_s32(v1079[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v1078 = v1266;
                  }
                  else
                  {
                    int v1086 = 1;
                    while (v1085 != -4096)
                    {
                      int v1087 = v1083 + v1086++;
                      uint64_t v1083 = v1087 & v1082;
                      uint64_t v1085 = *(void *)(v1080 + 16 * v1083);
                      if ((void)v1266 == v1085)
                      {
                        v1084 = (uint64_t *)(v1080 + 16 * v1083);
                        goto LABEL_1748;
                      }
                    }
                  }
                  *(unsigned char *)(v1078 + 17) &= ~1u;
                }
              }
            }
          }
          if (v1075)
          {
            v1264 = 0;
            llvm::RecursivelyDeleteTriviallyDeadInstructions(v1075, 0, 0, (uint64_t)v1263);
            if (v1264 == v1263)
            {
              (*(void (**)(void *))(v1263[0] + 32))(v1263);
            }
            else if (v1264)
            {
              (*(void (**)(void))(*v1264 + 40))();
            }
          }
        }
      }
      else if (v1248)
      {
        v1088 = (char *)v1247;
        v1089 = (char *)v1247 + 24 * v1248;
        long long v1265 = 4uLL;
        uint64_t v1090 = *((void *)v1089 - 1);
        *(void *)&long long v1266 = v1090;
        if (v1090 && v1090 != -8192 && v1090 != -4096)
        {
          unint64_t v1091 = *((void *)v1089 - 3) & 0xFFFFFFFFFFFFFFF8;
          *((void *)&v1265 + 1) = *(void *)v1091;
          *(void *)unint64_t v1091 = &v1265;
          *(void *)&long long v1265 = v1091 | 4;
          if (*((void *)&v1265 + 1)) {
            **((void **)&v1265 + 1) = **((void **)&v1265 + 1) & 7 | ((unint64_t)&v1265 + 8);
          }
          unsigned int v1056 = v1248;
          v1088 = (char *)v1247;
        }
        LODWORD(v1248) = v1056 - 1;
        v1092 = &v1088[24 * v1056 - 24];
        uint64_t v1093 = *((void *)v1092 + 2);
        if (v1093 && v1093 != -8192 && v1093 != -4096)
        {
          unint64_t v1094 = *(void *)v1092 & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v1094 = *((void *)v1092 + 1);
          v1095 = (unint64_t *)*((void *)v1092 + 1);
          if (v1095)
          {
            unint64_t *v1095 = *v1095 & 7 | v1094;
          }
          else
          {
            uint64_t v1096 = *((void *)v1092 + 2);
            v1097 = ***(int32x2_t ****)v1096;
            unint64_t v1098 = (unint64_t)v1097[303];
            if (v1098 <= v1094)
            {
              uint64_t v1099 = v1097[305].u32[0];
              if (v1098 + 16 * v1099 > v1094)
              {
                unsigned int v1100 = v1099 - 1;
                LODWORD(v1101) = v1100 & ((v1096 >> 4) ^ (v1096 >> 9));
                v1102 = (uint64_t *)(v1098 + 16 * v1101);
                uint64_t v1103 = *v1102;
                if (v1096 != *v1102)
                {
                  int v1104 = 1;
                  do
                  {
                    if (v1103 == -4096) {
                      goto LABEL_1772;
                    }
                    int v1105 = v1101 + v1104++;
                    uint64_t v1101 = v1105 & v1100;
                    uint64_t v1103 = *(void *)(v1098 + 16 * v1101);
                  }
                  while (v1096 != v1103);
                  v1102 = (uint64_t *)(v1098 + 16 * v1101);
                }
                uint64_t *v1102 = -8192;
                v1097[304] = vadd_s32(v1097[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v1096 = *((void *)v1092 + 2);
LABEL_1772:
                *(unsigned char *)(v1096 + 17) &= ~1u;
              }
            }
          }
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      if (*((void *)&v1268 + 1) == (void)v1268)
      {
        v1106 = (uint64_t *)v1247;
        unsigned int v414 = v1158;
        uint64_t v415 = (char *)v1167;
      }
      else
      {
        free(*((void **)&v1268 + 1));
        v1106 = (uint64_t *)v1247;
        unsigned int v414 = v1158;
        uint64_t v415 = (char *)v1167;
        if (v1248)
        {
          v1107 = (uint64_t *)((char *)v1247 + 24 * v1248);
          do
          {
            uint64_t v1108 = *(v1107 - 1);
            if (v1108 != -8192 && v1108 != -4096 && v1108 != 0)
            {
              unint64_t v1110 = *(v1107 - 3) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v1110 = *(v1107 - 2);
              v1111 = (unint64_t *)*(v1107 - 2);
              if (v1111)
              {
                unint64_t *v1111 = *v1111 & 7 | v1110;
              }
              else
              {
                uint64_t v1112 = *(v1107 - 1);
                v1113 = ***(int32x2_t ****)v1112;
                unint64_t v1114 = (unint64_t)v1113[303];
                if (v1114 <= v1110)
                {
                  uint64_t v1115 = v1113[305].u32[0];
                  if (v1114 + 16 * v1115 > v1110)
                  {
                    unsigned int v1116 = v1115 - 1;
                    LODWORD(v1117) = v1116 & ((v1112 >> 4) ^ (v1112 >> 9));
                    v1118 = (uint64_t *)(v1114 + 16 * v1117);
                    uint64_t v1119 = *v1118;
                    if (v1112 == *v1118)
                    {
LABEL_1795:
                      uint64_t *v1118 = -8192;
                      v1113[304] = vadd_s32(v1113[304], (int32x2_t)0x1FFFFFFFFLL);
                      uint64_t v1112 = *(v1107 - 1);
                    }
                    else
                    {
                      int v1120 = 1;
                      while (v1119 != -4096)
                      {
                        int v1121 = v1117 + v1120++;
                        uint64_t v1117 = v1121 & v1116;
                        uint64_t v1119 = *(void *)(v1114 + 16 * v1117);
                        if (v1112 == v1119)
                        {
                          v1118 = (uint64_t *)(v1114 + 16 * v1117);
                          goto LABEL_1795;
                        }
                      }
                    }
                    *(unsigned char *)(v1112 + 17) &= ~1u;
                  }
                }
              }
            }
            v1107 -= 3;
          }
          while (v1107 != v1106);
          v1106 = (uint64_t *)v1247;
          unsigned int v414 = v1158;
          uint64_t v415 = (char *)v1167;
        }
      }
      if (v1106 != &v1249) {
        free(v1106);
      }
      if ((v1222 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v1223, 8);
      }
      if (v1239 != &v1241) {
        free(v1239);
      }
      if (((uint64_t)v1244[0] & 1) == 0) {
        MEMORY[0x1D25D9CD0](v1244[1], 8);
      }
      char v1137 = 1;
LABEL_1808:
      sub_1CBA6598C((uint64_t)v1197);
      MEMORY[0x1D25D9CD0](v1197[0], 8);
      v415 += 1128;
      if (v415 == v1143) {
        goto LABEL_1811;
      }
    }
    int v477 = 1;
    while (v476 != (void *)-4096)
    {
      int v478 = v475 + v477++;
      uint64_t v475 = v478 & (v1198 - 1);
      uint64_t v476 = *(void **)(v1197[0] + ((unint64_t)v475 << 6));
      if (v1163 == v476)
      {
        unint64_t v474 = v1197[0] + (v475 << 6);
        goto LABEL_851;
      }
    }
    unint64_t v474 = v1197[0] + ((unint64_t)v1198 << 6);
LABEL_851:
    unint64_t v1185 = v474;
    goto LABEL_852;
  }
LABEL_1811:
  MEMORY[0x1D25D9CD0](v1199[0], 4);
  v1122 = v1207;
  if (v1208)
  {
    uint64_t v1123 = 16 * v1208;
    v1124 = (char *)v1207 - 16;
    char v355 = v1137;
    do
    {
      v1125 = *(void ***)&v1124[v1123];
      if ((v1125 & 1) == 0 && v1125)
      {
        if (*v1125 != v1125 + 2) {
          free(*v1125);
        }
        MEMORY[0x1D25D9CE0](v1125, 0x1080C40EF38A13ELL);
      }
      v1123 -= 16;
    }
    while (v1123);
    v1122 = v1207;
  }
  else
  {
    char v355 = v1137;
  }
  if (v1122 != v1209) {
    free(v1122);
  }
  sub_1CBA6598C((uint64_t)v1201);
  MEMORY[0x1D25D9CD0](v1201[0], 8);
LABEL_1827:
  if (v1214 != v1213) {
    free(v1214);
  }
  sub_1CC7E8680((uint64_t)v1218, (uint64_t)v1218 + 1128 * v1219);
  if (v1218 != v1220) {
    free(v1218);
  }
  return v355 != 0;
}

uint64_t sub_1CC7E5958(uint64_t a1, llvm::Type *a2, const llvm::APFloat *a3, unsigned int a4, uint64_t a5)
{
  Cast = (uint64_t *)a2;
  v43[3] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    unsigned int v10 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
    BOOL v11 = v10 > a4 && a4 >= 3;
    BOOL v12 = !v11 || v10 - 1 > 4;
    if (v12) {
      goto LABEL_65;
    }
  }
  uint64_t v13 = *(uint64_t **)a3;
  uint64_t v14 = **(void **)a3;
  if (*(unsigned char *)(v14 + 8) != 16) {
    goto LABEL_65;
  }
  unsigned int v15 = *((unsigned __int8 *)v13 + 16);
  BOOL v12 = v15 > 0xD;
  int v16 = (1 << v15) & 0x3A00;
  if (v12 || v16 == 0) {
    goto LABEL_65;
  }
  uint64_t v41 = v43;
  uint64_t v42 = 0x300000000;
  if (*(_DWORD *)(v14 + 12))
  {
    uint64_t v18 = 0;
    unsigned int v19 = 0;
    unint64_t v20 = 0;
    do
    {
      if (*((unsigned __int8 *)v13 + 16) - 11 > 2)
      {
        NullValue = (llvm::Value *)v13[v18 + -4 * (*((_DWORD *)v13 + 5) & 0x7FFFFFF)];
      }
      else
      {
        NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(*(void *)(v14 + 16) + 8 * v20), a2, a3);
        unsigned int v19 = v42;
      }
      if (v19 >= HIDWORD(v42)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v41 + v19) = NullValue;
      unsigned int v19 = v42 + 1;
      LODWORD(v42) = v42 + 1;
      ++v20;
      uint64_t v13 = *(uint64_t **)a3;
      uint64_t v14 = **(void **)a3;
      v18 += 4;
    }
    while (v20 < *(unsigned int *)(v14 + 12));
  }
  if (a1)
  {
    uint64_t v22 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * a4);
    if (v22) {
      BOOL v23 = *(unsigned char *)(v22 + 16) == 16;
    }
    else {
      BOOL v23 = 0;
    }
    if (!v23)
    {
      int v24 = 1;
      goto LABEL_62;
    }
    uint64_t v26 = (void *)(v22 + 24);
    if (*(_DWORD *)(v22 + 32) >= 0x41u) {
      uint64_t v26 = (void *)*v26;
    }
    int v25 = (void *)*v26;
  }
  else
  {
    int v25 = 0;
  }
  uint64_t v27 = (uint64_t *)*((void *)v41 + (void)v25);
  if (*(unsigned char *)(v14 + 8) != 16) {
    uint64_t v14 = 0;
  }
  uint64_t v39 = (llvm::PoisonValue *)v14;
  unint64_t v40 = (uint64_t *)*((void *)v41 + (void)v25);
  uint64_t v28 = *Cast;
  uint64_t v29 = *v27;
  if (*Cast != *v27)
  {
    uint64_t v30 = sub_1CB83544C(a5, *Cast);
    BOOL v32 = v31 != 1;
    if (((sub_1CB83544C(a5, v29) + 7) ^ (unint64_t)(v30 + 7)) > 7 || v32 == (v33 == 1))
    {
      LOBYTE(a5) = sub_1CC7E5958(a1, Cast, &v40, a4 + 1, a5);
      Cast = v40;
LABEL_60:
      *((void *)v41 + (void)v25) = Cast;
      *(void *)a3 = llvm::ConstantStruct::get(v39, (llvm::Type *)v41, v42);
      goto LABEL_61;
    }
  }
  if (a1 && (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) - 1 != a4) {
    goto LABEL_50;
  }
  if (v28 == v29)
  {
LABEL_59:
    LOBYTE(a5) = 1;
    goto LABEL_60;
  }
  if ((*(_DWORD *)(v28 + 8) & 0xFE) == 0x12 || (*(_DWORD *)(v29 + 8) & 0xFE) == 0x12) {
    goto LABEL_50;
  }
  int v35 = *(_DWORD *)(v28 + 8);
  int v36 = *(_DWORD *)(v29 + 8);
  if (v35 != 15 || v36 != 15)
  {
    if (v35 == 15)
    {
      if (v36 != 13) {
        goto LABEL_57;
      }
      uint64_t v37 = 47;
    }
    else
    {
      if (v35 != 13 || v36 != 15) {
        goto LABEL_57;
      }
      uint64_t v37 = 48;
    }
LABEL_58:
    Cast = (uint64_t *)llvm::ConstantExpr::getCast((llvm::ConstantExpr *)v37, (llvm::ConstantExpr *)Cast, (llvm::Constant ***)v29, 0);
    goto LABEL_59;
  }
  if ((*(_DWORD *)(v29 + 8) ^ *(_DWORD *)(v28 + 8)) < 0x100)
  {
LABEL_57:
    uint64_t v37 = 49;
    goto LABEL_58;
  }
LABEL_50:
  LOBYTE(a5) = 0;
LABEL_61:
  int v24 = 0;
LABEL_62:
  if (v41 != v43) {
    free(v41);
  }
  if (v24) {
LABEL_65:
  }
    LOBYTE(a5) = 0;
  return a5 & 1;
}

uint64_t sub_1CC7E5CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v8 = 0;
  int v3 = sub_1CC7E5D60(a1, &v7, &v8);
  uint64_t v4 = a1 + 8;
  if (v3) {
    return v8;
  }
  if (*(_DWORD *)a1)
  {
    unsigned int v6 = 4;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    unsigned int v6 = *(_DWORD *)(a1 + 16);
  }
  return v4 + 56 * v6;
}

uint64_t sub_1CC7E5D60(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_5;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 56 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    unsigned int v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        unsigned int v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 56 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_5;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_5:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC7E5E14(uint64_t a1)
{
  if ((*(unsigned char *)a1 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 8), 8);
  }
  return a1;
}

void sub_1CC7E5E54(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v1 = a1 + 8;
    uint64_t v2 = 4;
  }
  else
  {
    uint64_t v2 = *(unsigned int *)(a1 + 16);
    if (!v2) {
      return;
    }
    uint64_t v1 = *(void *)(a1 + 8);
  }
  uint64_t v3 = (void *)(v1 + 48);
  uint64_t v4 = 56 * v2;
  do
  {
    uint64_t v5 = *(v3 - 6);
    if (v5 != -4096 && v5 != -8192)
    {
      unsigned int v6 = (void *)*(v3 - 2);
      if (v3 != v6) {
        free(v6);
      }
      if ((*(unsigned char *)(v3 - 5) & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(v3 - 4), 8);
      }
    }
    v3 += 7;
    v4 -= 56;
  }
  while (v4);
}

void sub_1CC7E5EEC()
{
}

__n128 sub_1CC7E5F00(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F261EFF8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1CC7E5F5C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F261EFF8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CC7E5F9C(void *a1, uint64_t *a2)
{
  v273[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = a1[5];
  uint64_t v253 = v255;
  uint64_t v254 = 0x2000000000;
  int v256 = v260;
  int v257 = v260;
  uint64_t v258 = 4;
  int v259 = 0;
  uint64_t v261 = 0;
  int v262 = -1;
  __int16 v263 = 0;
  char v264 = 0;
  uint64_t v4 = *(void *)(v2 - 8 * *(unsigned int *)(v2 + 8));
  if (!v4) {
    goto LABEL_399;
  }
  uint64_t v6 = a1[3];
  uint64_t v252 = v2;
  uint64_t v7 = *(uint64_t ****)(v4 + 128);
  if (((*v7)[1] & 0xFFFFFF00) != 0x4000 || (*((unsigned char *)v7 + 34) & 0x40) == 0) {
    goto LABEL_399;
  }
  uint64_t v8 = ***v7;
  uint64_t v265 = *(void **)(v4 + 128);
  int v9 = *(_DWORD *)(v8 + 2520);
  unsigned int v10 = v7 >> 4;
  if (!v9)
  {
    uint64_t v52 = 0;
LABEL_60:
    uint64_t v14 = sub_1CC5BF31C(v8 + 2504, (uint64_t)&v265, (uint64_t *)&v265, v52);
    BOOL v53 = v265;
    v14[1] = 0;
    v14[2] = 0;
    void *v14 = v53;
    goto LABEL_6;
  }
  uint64_t v11 = *(void *)(v8 + 2504);
  int v12 = v9 - 1;
  unsigned int v13 = v12 & (v10 ^ (v7 >> 9));
  uint64_t v14 = (void *)(v11 + 24 * v13);
  unsigned int v15 = (void ***)*v14;
  if ((uint64_t ***)*v14 != v7)
  {
    int v35 = 0;
    int v36 = 1;
    while (v15 != (void ***)-4096)
    {
      if (v35) {
        BOOL v37 = 0;
      }
      else {
        BOOL v37 = v15 == (void ***)-8192;
      }
      if (v37) {
        int v35 = v14;
      }
      unsigned int v38 = v13 + v36++;
      unsigned int v13 = v38 & v12;
      uint64_t v14 = (void *)(v11 + 24 * v13);
      unsigned int v15 = (void ***)*v14;
      if ((uint64_t ***)*v14 == v7) {
        goto LABEL_6;
      }
    }
    if (v35) {
      uint64_t v52 = v35;
    }
    else {
      uint64_t v52 = v14;
    }
    goto LABEL_60;
  }
LABEL_6:
  if (v14[2] == 15)
  {
    int v16 = (uint64_t *)v14[1];
    uint64_t v17 = *v16;
    uint64_t v18 = *(uint64_t *)((char *)v16 + 7);
    BOOL v19 = v17 == 0x625F726566667562 && v18 == 0x73676E69646E6962;
    if (v19) {
      goto LABEL_20;
    }
  }
  if ((*((unsigned char *)v7 + 34) & 0x40) == 0) {
    goto LABEL_399;
  }
  uint64_t v20 = ***v7;
  uint64_t v265 = v7;
  int v21 = *(_DWORD *)(v20 + 2520);
  if (!v21)
  {
    uint64_t v54 = 0;
LABEL_64:
    int v25 = sub_1CC5BF31C(v20 + 2504, (uint64_t)&v265, (uint64_t *)&v265, v54);
    uint64_t v55 = v265;
    v25[1] = 0;
    v25[2] = 0;
    void *v25 = v55;
    goto LABEL_14;
  }
  uint64_t v22 = *(void *)(v20 + 2504);
  int v23 = v21 - 1;
  unsigned int v24 = v23 & (v10 ^ (v7 >> 9));
  int v25 = (void *)(v22 + 24 * v24);
  uint64_t v26 = (void ***)*v25;
  if ((uint64_t ***)*v25 != v7)
  {
    uint64_t v39 = 0;
    int v40 = 1;
    while (v26 != (void ***)-4096)
    {
      if (v39) {
        BOOL v41 = 0;
      }
      else {
        BOOL v41 = v26 == (void ***)-8192;
      }
      if (v41) {
        uint64_t v39 = v25;
      }
      unsigned int v42 = v24 + v40++;
      unsigned int v24 = v42 & v23;
      int v25 = (void *)(v22 + 24 * v24);
      uint64_t v26 = (void ***)*v25;
      if ((uint64_t ***)*v25 == v7) {
        goto LABEL_14;
      }
    }
    if (v39) {
      uint64_t v54 = v39;
    }
    else {
      uint64_t v54 = v25;
    }
    goto LABEL_64;
  }
LABEL_14:
  if (v25[2] != 15) {
    goto LABEL_399;
  }
  uint64_t v27 = (uint64_t *)v25[1];
  uint64_t v28 = *v27;
  uint64_t v29 = *(uint64_t *)((char *)v27 + 7);
  if (v28 != 0x736C61726574696CLL || v29 != 0x7265666675625F73) {
    goto LABEL_399;
  }
LABEL_20:
  int v31 = v7[3];
  if (*((unsigned char *)v31 + 8) != 15) {
    int v31 = 0;
  }
  uint64_t v261 = v31;
  if (!v31 || (v31[1] & 0xFFFFFF00) != 0x200) {
    goto LABEL_399;
  }
  if (*(_DWORD *)(v252 + 8) == 4
    && (uint64_t v32 = *(void *)(v252 - 8), *(unsigned char *)v32 == 1)
    && (uint64_t v33 = *(void *)(v32 + 128), *(unsigned char *)(v33 + 16) == 16))
  {
    if (*(_DWORD *)(v33 + 32) > 0x40u) {
      unint64_t v34 = **(void **)(v33 + 24);
    }
    else {
      unint64_t v34 = *(void *)(v33 + 24);
    }
    if (HIDWORD(v34)) {
      goto LABEL_399;
    }
  }
  else
  {
    LODWORD(v34) = -1;
  }
  if (!sub_1CC7E74BC((uint64_t)v7)) {
    goto LABEL_399;
  }
  BOOL v230 = &v253;
  int v43 = *(llvm::DataLayout **)(v3 + 32);
  int v231 = *(_DWORD *)(v3 + 40);
  unint64_t v44 = *(void *)(v3 + 44);
  int v235 = *(unsigned __int8 *)(v3 + 88);
  uint64_t v265 = v267;
  uint64_t v266 = 0x1000000000;
  uint64_t v242 = v246;
  unint64_t v243 = v246;
  uint64_t v244 = 4;
  int v245 = 0;
  int v45 = sub_1CC7E7570((uint64_t)v7, (unint64_t *)&v265, v6, (uint64_t)&v242, (uint64_t)&v252);
  int v47 = v242;
  unint64_t v46 = v243;
  if (!v45)
  {
    BOOL v56 = 0;
    goto LABEL_333;
  }
  uint64_t v233 = v43;
  int v229 = v34;
  uint64_t v48 = (uint64_t *)((char *)&v244 + 4);
  if (v243 != v242) {
    uint64_t v48 = &v244;
  }
  uint64_t v49 = *(unsigned int *)v48;
  if (v49)
  {
    uint64_t v50 = 8 * v49;
    uint64_t v51 = (unint64_t *)v243;
    while (*v51 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v51;
      v50 -= 8;
      if (!v50) {
        goto LABEL_111;
      }
    }
  }
  else
  {
    uint64_t v51 = (unint64_t *)v243;
  }
  uint64_t v57 = (unint64_t *)&v243[8 * v49];
  if (v51 == v57) {
    goto LABEL_111;
  }
  unint64_t v58 = *v51;
LABEL_69:
  uint64_t v59 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v6 + 24))(v6, v58);
  uint64_t v60 = v59;
  uint64_t v61 = (char *)v257;
  uint64_t v62 = HIDWORD(v258);
  if (v257 != v256)
  {
    unsigned int v66 = v258;
    goto LABEL_80;
  }
  if (HIDWORD(v258))
  {
    uint64_t v63 = 0;
    uint64_t v64 = 8 * HIDWORD(v258);
    uint64_t v65 = (uint64_t *)v257;
    while (*v65 != v59)
    {
      if (*v65 == -2) {
        uint64_t v63 = v65;
      }
      ++v65;
      v64 -= 8;
      if (!v64)
      {
        if (!v63) {
          goto LABEL_77;
        }
        uint64_t *v63 = v59;
        --v259;
        goto LABEL_101;
      }
    }
    goto LABEL_101;
  }
LABEL_77:
  unsigned int v66 = v258;
  if (HIDWORD(v258) >= v258)
  {
LABEL_80:
    if (3 * v66 <= 4 * (HIDWORD(v258) - v259))
    {
      if (v66 >= 0x40) {
        v66 *= 2;
      }
      else {
        unsigned int v66 = 128;
      }
    }
    else if (v66 - HIDWORD(v258) >= v66 >> 3)
    {
      goto LABEL_82;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v256, v66);
    unsigned int v66 = v258;
    uint64_t v61 = (char *)v257;
LABEL_82:
    unsigned int v67 = v66 - 1;
    unsigned int v68 = (v66 - 1) & ((v60 >> 4) ^ (v60 >> 9));
    uint64_t v69 = &v61[8 * v68];
    uint64_t v70 = *(void *)v69;
    if (*(void *)v69 == -1)
    {
      uint64_t v71 = 0;
LABEL_94:
      if (v71) {
        BOOL v75 = v71;
      }
      else {
        BOOL v75 = (uint64_t *)v69;
      }
      if (*v75 != v60)
      {
        if (*v75 == -2) {
          --v259;
        }
        else {
          ++HIDWORD(v258);
        }
        *BOOL v75 = v60;
      }
    }
    else
    {
      uint64_t v71 = 0;
      int v72 = 1;
      while (v70 != v60)
      {
        if (v71) {
          BOOL v73 = 0;
        }
        else {
          BOOL v73 = v70 == -2;
        }
        if (v73) {
          uint64_t v71 = (uint64_t *)v69;
        }
        unsigned int v74 = v68 + v72++;
        unsigned int v68 = v74 & v67;
        uint64_t v69 = &v61[8 * (v74 & v67)];
        uint64_t v70 = *(void *)v69;
        if (*(void *)v69 == -1) {
          goto LABEL_94;
        }
      }
    }
    goto LABEL_101;
  }
  ++HIDWORD(v258);
  *((void *)v257 + v62) = v59;
LABEL_101:
  uint64_t v76 = v51 + 1;
  while (v76 != v57)
  {
    unint64_t v77 = *v76++;
    unint64_t v58 = v77;
    if (v77 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v51 = v76 - 1;
      goto LABEL_69;
    }
  }
LABEL_111:
  unsigned int v237 = v241;
  int v238 = v241;
  uint64_t v239 = 8;
  int v240 = 0;
  unsigned int v78 = v266;
  if (!v266) {
    goto LABEL_330;
  }
  unint64_t v79 = HIDWORD(v44);
  if (v44 > HIDWORD(v44)) {
    LODWORD(v79) = v44;
  }
  uint64_t v228 = -(int)v79;
  unint64_t v227 = v44 + 0xFFFFFFFF;
  uint64_t v226 = -(int)v44;
  unsigned int v232 = v231 & 0xFFFFFFFE;
  unsigned int v80 = v233;
  do
  {
    int v81 = (char *)v265 + 32 * v78;
    uint64_t v82 = *((void *)v81 - 4);
    uint64_t v83 = *((void *)v81 - 2);
    LODWORD(v266) = v78 - 1;
    int v84 = *(unsigned __int8 *)(v82 + 16);
    if (v82 && v84 == 60)
    {
      if ((*(_WORD *)(v82 + 18) & 0x381) != 0) {
        goto LABEL_230;
      }
      if (!v235) {
        goto LABEL_216;
      }
      uint64_t v271 = v273;
      uint64_t v272 = 0x400000000;
      uint64_t v85 = *(void *)(v82 + 8);
      if (v85)
      {
        unsigned int v86 = 0;
        do
        {
          if (v86 >= HIDWORD(v272)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v271[v86] = v85;
          unsigned int v86 = v272 + 1;
          LODWORD(v272) = v272 + 1;
          uint64_t v85 = *(void *)(v85 + 8);
        }
        while (v85);
      }
      char v96 = 0;
      unsigned int v268 = v270;
      uint64_t v269 = 0x400000000;
      while (1)
      {
        if (!v272)
        {
LABEL_210:
          if (v268 != v270) {
            free(v268);
          }
          if (v271 != v273) {
            free(v271);
          }
          if (v96)
          {
            HIBYTE(v263) = 1;
            unsigned int v80 = v233;
            goto LABEL_231;
          }
LABEL_216:
          unsigned int v80 = v233;
          uint64_t v115 = sub_1CB83544C((uint64_t)v233, *(void *)v82);
          if (v116 == 1)
          {
            uint64_t v153 = v115;
            uint64_t v115 = v153;
          }
          uint64_t v117 = ((unint64_t)(v115 + 7) >> 3) + v83;
          if (v117 >= 0)
          {
            if (v231 != 27) {
              goto LABEL_228;
            }
            uint64_t v118 = *(void *)v82;
            if ((*(_DWORD *)(*(void *)v82 + 8) & 0xFE) != 0x12) {
              goto LABEL_228;
            }
            if (*(_DWORD *)(*(void *)v82 + 8) == 18
              && *(_DWORD *)(*(void *)(v118 + 24) + 8) == 2061)
            {
              BOOL v119 = *(_DWORD *)(v118 + 32) == 2 && (v83 & 1) == 0;
              if (v119 || (v83 & 3) == 0)
              {
LABEL_228:
                uint64_t v247 = v82;
                uint64_t v248 = v83;
                uint64_t v249 = v83 & v228;
                uint64_t v250 = v226 & (v227 + v117);
                sub_1CB8BBE7C((unint64_t *)&v253, (unint64_t)&v247);
                goto LABEL_231;
              }
            }
            else if ((v83 & 3) == 0)
            {
              goto LABEL_228;
            }
          }
LABEL_230:
          HIBYTE(v263) = 1;
          goto LABEL_231;
        }
        uint64_t v97 = (void *)v271[v272 - 1];
        unsigned int v98 = v272 - 1;
        LODWORD(v272) = v272 - 1;
        uint64_t v99 = v97[3];
        unsigned int v100 = *(unsigned __int8 *)(v99 + 16);
        if (v100 >= 0x1C && v100 - 66 <= 0xC) {
          break;
        }
        if (v100 < 0x1C || v100 - 41 > 0x11) {
          goto LABEL_184;
        }
        if (v100 != 56) {
          goto LABEL_209;
        }
        uint64_t v103 = *(void *)(v99 - 32);
        if (*(unsigned char *)(v103 + 16) != 16) {
          goto LABEL_209;
        }
        uint64_t v104 = (void *)(v103 + 24);
        if (*(_DWORD *)(v103 + 32) >= 0x41u) {
          uint64_t v104 = (void *)*v104;
        }
        BOOL v105 = (void *)*v104;
        if (*v104 == 0xFFFFFFFFLL || v105 == (void *)0xFFFF)
        {
          for (uint64_t i = *(void *)(v99 + 8); i; uint64_t i = *(void *)(i + 8))
          {
            if (v98 >= HIDWORD(v272)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v271[v98] = i;
            unsigned int v98 = v272 + 1;
            LODWORD(v272) = v272 + 1;
          }
          if (v269 >= (unint64_t)HIDWORD(v269)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v110 = 0;
          *(void *)&v268[8 * v269] = v99;
          LODWORD(v269) = v269 + 1;
          int v109 = 2;
        }
        else
        {
          int v109 = 0;
          int v110 = 1;
        }
        if (v105 != (void *)0xFFFFFFFFLL && v105 != (void *)0xFFFF)
        {
LABEL_209:
          char v96 = 0;
          goto LABEL_210;
        }
        if (v110)
        {
          unsigned int v100 = *(unsigned __int8 *)(v99 + 16);
LABEL_184:
          if (v100 == 84)
          {
            uint64_t v113 = *(void *)(v99 - 32);
            if (!v113) {
              goto LABEL_209;
            }
            if (*(unsigned char *)(v113 + 16)) {
              goto LABEL_209;
            }
            if (*(void *)(v113 + 24) != *(void *)(v99 + 72)) {
              goto LABEL_209;
            }
            if ((*(unsigned char *)(v113 + 33) & 0x20) == 0) {
              goto LABEL_209;
            }
            int v114 = *(_DWORD *)(v113 + 36);
            if ((v114 - 1282) >= 0x190
              && (v114 - 2824) >= 0xC
              && (v114 - 1682) > 0x8B)
            {
              goto LABEL_209;
            }
            char v96 = 1;
            llvm::SampleInfo::SampleInfo((uint64_t)&v247, v114, 1);
            if (*(void *)(v99 - 32 * (*(_DWORD *)(v99 + 20) & 0x7FFFFFF) + 32 * v251) != *v97) {
              goto LABEL_209;
            }
          }
          else
          {
            if (v100 != 89) {
              goto LABEL_209;
            }
            uint64_t v111 = *(void *)(v99 + 8);
            if (v111)
            {
              unsigned int v112 = v272;
              do
              {
                if (v112 >= HIDWORD(v272)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v271[v112] = v111;
                unsigned int v112 = v272 + 1;
                LODWORD(v272) = v272 + 1;
                uint64_t v111 = *(void *)(v111 + 8);
              }
              while (v111);
            }
LABEL_192:
            if (v269 >= (unint64_t)HIDWORD(v269)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)&v268[8 * v269] = v99;
            LODWORD(v269) = v269 + 1;
          }
          int v109 = 2;
        }
        if (v109 != 2) {
          goto LABEL_209;
        }
      }
      for (uint64_t j = *(void *)(v99 + 8); j; uint64_t j = *(void *)(j + 8))
      {
        if (v98 >= HIDWORD(v272)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v271[v98] = j;
        unsigned int v98 = v272 + 1;
        LODWORD(v272) = v272 + 1;
      }
      goto LABEL_192;
    }
    if (v82 && v84 == 62)
    {
      uint64_t v87 = sub_1CD10C828(v82, v80);
      if (BYTE4(v87)) {
        uint64_t v88 = 0;
      }
      else {
        uint64_t v88 = v83 + (int)v87;
      }
      if ((v87 & 0xFF0000000000) != 0 && BYTE4(v87) == 0) {
        goto LABEL_230;
      }
      LOBYTE(v263) = v263 | BYTE4(v87);
      if (v232 == 28)
      {
        if (BYTE4(v87)) {
          goto LABEL_230;
        }
      }
      for (uint64_t k = *(void *)(v82 + 8); k; uint64_t k = *(void *)(k + 8))
      {
        uint64_t v247 = *(void *)(k + 24);
        uint64_t v248 = v88;
        uint64_t v249 = v88;
        uint64_t v250 = 0;
        sub_1CB8BBE7C((unint64_t *)&v265, (unint64_t)&v247);
      }
      goto LABEL_231;
    }
    if (v84 == 77) {
      goto LABEL_303;
    }
    if (v84 != 85) {
      goto LABEL_230;
    }
    LOBYTE(v263) = 1;
    if (v232 == 28) {
      goto LABEL_231;
    }
    unsigned int v92 = v237;
    uint64_t v91 = v238;
    if (v238 == v237)
    {
      unsigned int v93 = HIDWORD(v239);
      unsigned int v94 = &v238[8 * HIDWORD(v239)];
      if (HIDWORD(v239))
      {
        uint64_t v95 = 0;
        while (*(void *)&v238[v95] != v82)
        {
          v95 += 8;
          if (8 * HIDWORD(v239) == v95) {
            goto LABEL_246;
          }
        }
        unsigned int v94 = &v238[v95];
      }
LABEL_246:
      uint64_t v127 = v238;
    }
    else
    {
      int v120 = v239 - 1;
      unsigned int v121 = (v239 - 1) & ((v82 >> 4) ^ (v82 >> 9));
      unsigned int v94 = &v238[8 * v121];
      uint64_t v122 = *(void *)v94;
      if (*(void *)v94 == -1)
      {
        uint64_t v123 = 0;
LABEL_248:
        if (v123) {
          unsigned int v94 = v123;
        }
        unsigned int v93 = HIDWORD(v239);
        if (*(void *)v94 != v82) {
          unsigned int v94 = &v238[8 * v239];
        }
      }
      else
      {
        uint64_t v123 = 0;
        int v124 = 1;
        while (v122 != v82)
        {
          if (v123) {
            BOOL v125 = 0;
          }
          else {
            BOOL v125 = v122 == -2;
          }
          if (v125) {
            uint64_t v123 = v94;
          }
          unsigned int v126 = v121 + v124++;
          unsigned int v121 = v126 & v120;
          unsigned int v94 = &v238[8 * (v126 & v120)];
          uint64_t v122 = *(void *)v94;
          if (*(void *)v94 == -1) {
            goto LABEL_248;
          }
        }
        unsigned int v93 = HIDWORD(v239);
      }
      uint64_t v127 = v237;
    }
    unsigned int v128 = v239;
    if (v238 == v127) {
      int v129 = v93;
    }
    else {
      int v129 = v239;
    }
    if (v94 != &v238[8 * v129])
    {
      if (v238 == v127)
      {
        unsigned int v130 = &v238[8 * v93];
        if (v93)
        {
          uint64_t v131 = 0;
          while (*(void *)&v238[v131] != v82)
          {
            v131 += 8;
            if (8 * v93 == v131) {
              goto LABEL_298;
            }
          }
          unsigned int v130 = &v238[v131];
        }
LABEL_298:
        unsigned int v92 = v238;
      }
      else
      {
        int v135 = v239 - 1;
        unsigned int v136 = (v239 - 1) & ((v82 >> 4) ^ (v82 >> 9));
        unsigned int v130 = &v238[8 * v136];
        uint64_t v137 = *(void *)v130;
        if (*(void *)v130 == -1)
        {
          uint64_t v138 = 0;
LABEL_307:
          if (v138) {
            unsigned int v130 = v138;
          }
          if (*(void *)v130 != v82)
          {
            if (v238 == v237) {
              int v151 = v93;
            }
            else {
              int v151 = v239;
            }
            unsigned int v130 = &v238[8 * v151];
          }
        }
        else
        {
          uint64_t v138 = 0;
          int v139 = 1;
          while (v137 != v82)
          {
            if (v138) {
              BOOL v140 = 0;
            }
            else {
              BOOL v140 = v137 == -2;
            }
            if (v140) {
              uint64_t v138 = v130;
            }
            unsigned int v141 = v136 + v139++;
            unsigned int v136 = v141 & v135;
            unsigned int v130 = &v238[8 * (v141 & v135)];
            uint64_t v137 = *(void *)v130;
            if (*(void *)v130 == -1) {
              goto LABEL_307;
            }
          }
        }
      }
      if (v238 != v92) {
        unsigned int v93 = v239;
      }
      if (v130 != &v238[8 * v93])
      {
        *(void *)unsigned int v130 = -2;
        ++v240;
      }
LABEL_303:
      for (uint64_t m = *(void *)(v82 + 8); m; uint64_t m = *(void *)(m + 8))
      {
        uint64_t v247 = *(void *)(m + 24);
        uint64_t v248 = v83;
        uint64_t v249 = v83;
        uint64_t v250 = 0;
        sub_1CB8BBE7C((unint64_t *)&v265, (unint64_t)&v247);
      }
      goto LABEL_231;
    }
    if (v238 == v127)
    {
      if (v93)
      {
        BOOL v132 = 0;
        uint64_t v133 = 8 * v93;
        BOOL v134 = (uint64_t *)v238;
        do
        {
          if (*v134 == v82) {
            goto LABEL_231;
          }
          if (*v134 == -2) {
            BOOL v132 = v134;
          }
          ++v134;
          v133 -= 8;
        }
        while (v133);
        if (v132)
        {
          uint64_t *v132 = v82;
          --v240;
          goto LABEL_231;
        }
      }
      if (v239 > v93)
      {
        HIDWORD(v239) = v93 + 1;
        *(void *)&v238[8 * v93] = v82;
        goto LABEL_231;
      }
    }
    if (3 * (int)v239 <= 4 * (v93 - v240))
    {
      if (v239 >= 0x40) {
        unsigned int v128 = 2 * v239;
      }
      else {
        unsigned int v128 = 128;
      }
LABEL_327:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v237, v128);
      unsigned int v128 = v239;
      uint64_t v91 = v238;
      goto LABEL_286;
    }
    if (v239 - v93 < v239 >> 3) {
      goto LABEL_327;
    }
LABEL_286:
    unsigned int v142 = v128 - 1;
    unsigned int v143 = (v128 - 1) & ((v82 >> 4) ^ (v82 >> 9));
    int v144 = &v91[8 * v143];
    uint64_t v145 = *(void *)v144;
    if (*(void *)v144 == -1)
    {
      uint64_t v146 = 0;
    }
    else
    {
      uint64_t v146 = 0;
      int v147 = 1;
      do
      {
        if (v145 == v82) {
          goto LABEL_231;
        }
        if (v146) {
          BOOL v148 = 0;
        }
        else {
          BOOL v148 = v145 == -2;
        }
        if (v148) {
          uint64_t v146 = (uint64_t *)v144;
        }
        unsigned int v149 = v143 + v147++;
        unsigned int v143 = v149 & v142;
        int v144 = &v91[8 * (v149 & v142)];
        uint64_t v145 = *(void *)v144;
      }
      while (*(void *)v144 != -1);
    }
    if (v146) {
      uint64_t v152 = v146;
    }
    else {
      uint64_t v152 = (uint64_t *)v144;
    }
    if (*v152 != v82)
    {
      if (*v152 == -2) {
        --v240;
      }
      else {
        ++HIDWORD(v239);
      }
      uint64_t *v152 = v82;
    }
LABEL_231:
    unsigned int v78 = v266;
  }
  while (v266);
  if (HIDWORD(v239) != v240) {
    HIBYTE(v263) = 1;
  }
LABEL_330:
  BOOL v56 = (v254 | v263) != 0;
  LODWORD(v34) = v229;
  if (v238 != v237) {
    free(v238);
  }
  int v47 = v242;
  unint64_t v46 = v243;
LABEL_333:
  if (v46 != v47) {
    free(v46);
  }
  if (v265 != v267) {
    free(v265);
  }
  if (v56)
  {
    if (v254)
    {
      sub_1CC7E7854((unint64_t)v253, (long long *)v253 + 2 * v254, 126 - 2 * __clz(v254), 1);
      uint64_t v154 = *((void *)v253 + 2);
      if ((v154 & 0x8000000000000000) == 0)
      {
        uint64_t v155 = *((void *)v253 + 4 * v254 - 1);
        BOOL v156 = __OFSUB__(v155, v154);
        uint64_t v157 = v155 - v154;
        if (!((v157 < 0) ^ v156 | (v157 == 0)))
        {
          if ((_BYTE)v263)
          {
            if (v157 > v34) {
              goto LABEL_399;
            }
            if ((v231 - 30) >= 0xFFFFFFFE
              || (LODWORD(v254) = 0,
                  uint64_t v266 = 0,
                  uint64_t v265 = 0,
                  v267[0] = 0,
                  v267[1] = v34,
                  sub_1CB8BBE7C((unint64_t *)&v253, (unint64_t)&v265),
                  (_BYTE)v263))
            {
              if (*(_DWORD *)(v252 + 8) < 4u) {
                goto LABEL_399;
              }
            }
          }
          else if (v155 > v34)
          {
            goto LABEL_399;
          }
          if (v254)
          {
            int v158 = 0;
            uint64_t v159 = 32 * v254;
            uint64_t v160 = (char *)v253 + 24;
            do
            {
              if (*v160) {
                v158 += *v160 - *((_DWORD *)v160 - 2);
              }
              v160 += 4;
              v159 -= 32;
            }
            while (v159);
          }
          else
          {
            int v158 = 0;
          }
          int v262 = v158;
          unsigned int v161 = (uint64_t *)a1[4];
          uint64_t v162 = v252;
          uint64_t v163 = *(void *)(*(void *)(v252 - 8 * *(unsigned int *)(v252 + 8)) + 128);
          uint64_t v165 = *v161;
          uint64_t v164 = v161[1];
          if (v164 == *v161)
          {
            uint64_t v166 = *((unsigned int *)v161 + 5);
            unint64_t v167 = (void *)(v164 + 8 * v166);
            if (v166)
            {
              uint64_t v168 = 0;
              uint64_t v169 = 8 * v166;
              while (*(void *)(v164 + v168) != v163)
              {
                v168 += 8;
                if (v169 == v168) {
                  goto LABEL_378;
                }
              }
              unint64_t v167 = (void *)(v164 + v168);
            }
LABEL_378:
            uint64_t v165 = v161[1];
          }
          else
          {
            uint64_t v170 = *((unsigned int *)v161 + 4);
            int v171 = v170 - 1;
            unsigned int v172 = (v170 - 1) & ((v163 >> 4) ^ (v163 >> 9));
            unint64_t v167 = (void *)(v164 + 8 * v172);
            uint64_t v173 = *v167;
            if (*v167 == -1)
            {
              int v174 = 0;
LABEL_405:
              if (v174) {
                unint64_t v167 = v174;
              }
              if (*v167 != v163) {
                unint64_t v167 = (void *)(v164 + 8 * v170);
              }
            }
            else
            {
              int v174 = 0;
              int v175 = 1;
              while (v173 != v163)
              {
                if (v174) {
                  BOOL v176 = 0;
                }
                else {
                  BOOL v176 = v173 == -2;
                }
                if (v176) {
                  int v174 = v167;
                }
                unsigned int v177 = v172 + v175++;
                unsigned int v172 = v177 & v171;
                unint64_t v167 = (void *)(v164 + 8 * (v177 & v171));
                uint64_t v173 = *v167;
                if (*v167 == -1) {
                  goto LABEL_405;
                }
              }
            }
          }
          BOOL v19 = v164 == v165;
          uint64_t v178 = 16;
          if (v19) {
            uint64_t v178 = 20;
          }
          if (v167 != (void *)(v164 + 8 * *(unsigned int *)((char *)v161 + v178))) {
            HIBYTE(v263) = 1;
          }
          uint64_t v179 = (unsigned int *)&v254;
          uint64_t v180 = a1[1];
          uint64_t v182 = *(unsigned int *)(v180 + 8);
          uint64_t v181 = *(unsigned int *)(v180 + 12);
          uint64_t v183 = *(uint64_t **)v180;
          uint64_t v184 = &v252;
          if (v182 >= v181)
          {
            unint64_t v200 = v182 + 1;
            BOOL v202 = v183 <= &v252 && &v183[141 * v182] > &v252;
            uint64_t v203 = -1;
            BOOL v236 = v202;
            if (v202) {
              uint64_t v203 = 0x70913F8BCD29C245 * (&v252 - v183);
            }
            uint64_t v234 = v203;
            if (v182 == -1) {
              sub_1CD0A88F0(v200);
            }
            if (v181 == -1) {
              sub_1CD0A89A8(0xFFFFFFFFuLL);
            }
            unint64_t v204 = (2 * v181) | 1;
            if (v204 <= v200) {
              unint64_t v204 = v182 + 1;
            }
            if (v204 >= 0xFFFFFFFF) {
              uint64_t v205 = 0xFFFFFFFFLL;
            }
            else {
              uint64_t v205 = v204;
            }
            uint64_t v206 = (uint64_t *)malloc_type_malloc(1128 * v205, 0x4065EBACuLL);
            if (v206)
            {
              uint64_t v183 = v206;
              uint64_t v207 = *(void *)v180;
              unsigned int v208 = *(_DWORD *)(v180 + 8);
              if (v208)
              {
                unint64_t v209 = 0;
                uint64_t v210 = 1128 * v208;
                do
                {
                  unint64_t v211 = v207 + v209;
                  uint64_t v212 = &v183[v209 / 8];
                  uint64_t *v212 = *(void *)(v207 + v209);
                  v183[v209 / 8 + 1] = (uint64_t)&v183[v209 / 8 + 3];
                  v212[2] = 0x2000000000;
                  if (*(_DWORD *)(v207 + v209 + 16)) {
                    sub_1CBC19ED8((uint64_t)&v183[v209 / 8 + 1], v211 + 8);
                  }
                  uint64_t v213 = v212 + 135;
                  v212[131] = (uint64_t)(v212 + 135);
                  uint64_t v214 = *(void *)(v211 + 1056);
                  uint64_t v215 = *(void *)(v211 + 1048);
                  if (v214 == v215)
                  {
                    v212[132] = (uint64_t)v213;
                    uint64_t v216 = *(unsigned int *)(v207 + v209 + 1068);
                    if (v216) {
                      memmove(v213, *(const void **)(v211 + 1056), 8 * v216);
                    }
                  }
                  else
                  {
                    v212[132] = v214;
                    *(void *)(v211 + 1056) = v215;
                  }
                  unint64_t v217 = v207 + v209;
                  uint64_t v218 = (char *)&v183[v209 / 8];
                  *((void *)v218 + 133) = *(void *)(v207 + v209 + 1064);
                  *((_DWORD *)v218 + 268) = *(_DWORD *)(v207 + v209 + 1072);
                  *(void *)(v217 + 1064) = 4;
                  *(_DWORD *)(v217 + 1072) = 0;
                  uint64_t v219 = *(void *)(v207 + v209 + 1112);
                  *(uint64_t *)((char *)&v183[v209 / 8 + 139] + 7) = *(void *)(v207 + v209 + 1119);
                  *((void *)v218 + 139) = v219;
                  v209 += 1128;
                }
                while (v210 != v209);
                uint64_t v207 = *(void *)v180;
                unsigned int v220 = *(_DWORD *)(v180 + 8);
              }
              else
              {
                unsigned int v220 = 0;
              }
              sub_1CC7E8680(v207, v207 + 1128 * v220);
              if (*(void *)v180 != v180 + 16) {
                free(*(void **)v180);
              }
              *(void *)uint64_t v180 = v183;
              *(_DWORD *)(v180 + 12) = v205;
              uint64_t v221 = (char *)&v183[141 * v234];
              if (v236) {
                uint64_t v184 = &v183[141 * v234];
              }
              else {
                uint64_t v184 = &v252;
              }
              uint64_t v222 = (void **)(v221 + 8);
              uint64_t v223 = (unsigned int *)(v221 + 16);
              if (v236) {
                uint64_t v179 = v223;
              }
              uint64_t v224 = &v253;
              if (v236) {
                uint64_t v224 = v222;
              }
              BOOL v230 = v224;
              LODWORD(v182) = *(_DWORD *)(v180 + 8);
              uint64_t v162 = *v184;
              goto LABEL_384;
            }
            int v225 = "Allocation failed";
LABEL_454:
            llvm::report_bad_alloc_error((llvm *)v225, (const char *)1);
          }
LABEL_384:
          uint64_t v185 = &v183[141 * v182];
          *uint64_t v185 = v162;
          uint64_t v186 = v185 + 3;
          v185[1] = (uint64_t)(v185 + 3);
          BOOL v19 = v185 == v184;
          v185[2] = 0x2000000000;
          int v187 = (unsigned int *)(v185 + 2);
          unsigned int v188 = *v179;
          if (!v19 && v188 != 0)
          {
            if (v188 >= 0x21)
            {
              *int v187 = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v186, *v230, 32 * *v179);
            *int v187 = v188;
          }
          unsigned int v190 = (char *)&v183[141 * v182];
          unsigned int v191 = v190 + 1048;
          uint64_t v192 = v190 + 1080;
          *((void *)v190 + 131) = v190 + 1080;
          uint64_t v193 = (const void *)v184[132];
          if (v193 == (const void *)v184[131])
          {
            *((void *)v191 + 1) = v192;
            goto LABEL_393;
          }
          uint64_t v199 = *((unsigned int *)v184 + 266);
          uint64_t v192 = malloc_type_malloc(8 * v199, 0x4065EBACuLL);
          if (!v192 && (v199 || (uint64_t v192 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
          {
            int v225 = "Allocation failed";
            goto LABEL_454;
          }
          *((void *)v191 + 1) = v192;
          uint64_t v193 = (const void *)v184[131];
LABEL_393:
          *((_DWORD *)v191 + 4) = *((_DWORD *)v184 + 266);
          uint64_t v194 = (const void *)v184[132];
          int v195 = *((_DWORD *)v184 + 267);
          if (v194 == v193) {
            unsigned int v196 = *((_DWORD *)v184 + 267);
          }
          else {
            unsigned int v196 = *((_DWORD *)v184 + 266);
          }
          if (v196)
          {
            memmove(v192, v194, 8 * v196);
            int v195 = *((_DWORD *)v184 + 267);
          }
          *((_DWORD *)v191 + 5) = v195;
          *((_DWORD *)v191 + 6) = *((_DWORD *)v184 + 268);
          unsigned int v197 = &v183[141 * v182 + 139];
          uint64_t v198 = *(uint64_t *)((char *)v184 + 1119);
          *unsigned int v197 = v184[139];
          *(uint64_t *)((char *)v197 + 7) = v198;
          ++*(_DWORD *)(v180 + 8);
        }
      }
    }
  }
LABEL_399:
  if (v257 != v256) {
    free(v257);
  }
  if (v253 != v255) {
    free(v253);
  }
}

uint64_t sub_1CC7E74BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 1;
  }
  while (1)
  {
    uint64_t v2 = *(uint64_t **)(v1 + 24);
    int v3 = *((unsigned __int8 *)v2 + 16);
    if (v3 != 77)
    {
      if (v3 == 60) {
        goto LABEL_15;
      }
      if (v3 != 5 || *((_WORD *)v2 + 9) != 49) {
        return 0;
      }
    }
    uint64_t v4 = *v2;
    BOOL v5 = *v2 && *(unsigned char *)(*v2 + 8) == 15;
    if (!v5 || *(void *)(v4 + 24)) {
      break;
    }
    if ((sub_1CC7E74BC() & 1) == 0) {
      return 0;
    }
LABEL_15:
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      return 1;
    }
  }
  uint64_t v6 = 0;
  uint64_t v7 = **(void **)(v4 + 16);
  if (!v7 || *(_DWORD *)(v7 + 8) != 527) {
    return v6;
  }
  if (sub_1CC7E74BC()) {
    goto LABEL_15;
  }
  return 0;
}

uint64_t sub_1CC7E7570(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = 1;
  if (v5)
  {
    while (1)
    {
      uint64_t v11 = *(void *)(v5 + 24);
      int v12 = *(unsigned __int8 *)(v11 + 16);
      if (v12 == 77) {
        goto LABEL_6;
      }
      if (v12 != 60) {
        break;
      }
      if ((*(_WORD *)(v11 + 18) & 0x381) != 0) {
        return 0;
      }
      uint64_t v13 = *(void *)(*(void *)(v11 + 40) + 56);
      uint64_t v14 = *(void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 24))(a3, v13);
      if ((*(uint64_t (**)(void))(v14 + 592))() != v13)
      {
        uint64_t v15 = *(void *)(a4 + 8);
        uint64_t v16 = *(unsigned int *)(a4 + 20);
        if (v15 == *(void *)a4)
        {
          if (v16)
          {
            uint64_t v17 = 0;
            uint64_t v18 = 8 * v16;
            BOOL v19 = *(void **)(a4 + 8);
            while (*v19 != v13)
            {
              if (*v19 == -2) {
                uint64_t v17 = v19;
              }
              ++v19;
              v18 -= 8;
              if (!v18)
              {
                if (!v17) {
                  goto LABEL_18;
                }
                *uint64_t v17 = v13;
                --*(_DWORD *)(a4 + 24);
                goto LABEL_45;
              }
            }
            goto LABEL_45;
          }
LABEL_18:
          unsigned int v20 = *(_DWORD *)(a4 + 16);
          if (v16 < v20)
          {
            *(_DWORD *)(a4 + 20) = v16 + 1;
            *(void *)(v15 + 8 * v16) = v13;
LABEL_45:
            while (1)
            {
              uint64_t v11 = *(void *)(v11 + 8);
              if (!v11) {
                break;
              }
              v31[0] = *(void *)(v11 + 24);
              memset(&v31[1], 0, 24);
              sub_1CB8BBE7C(a2, (unint64_t)v31);
            }
            goto LABEL_46;
          }
        }
        else
        {
          unsigned int v20 = *(_DWORD *)(a4 + 16);
        }
        if (3 * v20 <= 4 * ((int)v16 - *(_DWORD *)(a4 + 24)))
        {
          if (v20 >= 0x40) {
            v20 *= 2;
          }
          else {
            unsigned int v20 = 128;
          }
        }
        else if (v20 - v16 >= v20 >> 3)
        {
          goto LABEL_24;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v20);
        unsigned int v20 = *(_DWORD *)(a4 + 16);
        uint64_t v15 = *(void *)(a4 + 8);
LABEL_24:
        unsigned int v21 = v20 - 1;
        unsigned int v22 = (v20 - 1) & ((v13 >> 4) ^ (v13 >> 9));
        int v23 = (void *)(v15 + 8 * v22);
        uint64_t v24 = *v23;
        if (*v23 == -1)
        {
          int v25 = 0;
LABEL_36:
          if (v25) {
            uint64_t v29 = v25;
          }
          else {
            uint64_t v29 = v23;
          }
          if (*v29 != v13)
          {
            if (*v29 == -2) {
              --*(_DWORD *)(a4 + 24);
            }
            else {
              ++*(_DWORD *)(a4 + 20);
            }
            void *v29 = v13;
          }
        }
        else
        {
          int v25 = 0;
          int v26 = 1;
          while (v24 != v13)
          {
            if (v25) {
              BOOL v27 = 0;
            }
            else {
              BOOL v27 = v24 == -2;
            }
            if (v27) {
              int v25 = v23;
            }
            unsigned int v28 = v22 + v26++;
            unsigned int v22 = v28 & v21;
            int v23 = (void *)(v15 + 8 * (v28 & v21));
            uint64_t v24 = *v23;
            if (*v23 == -1) {
              goto LABEL_36;
            }
          }
        }
        goto LABEL_45;
      }
      *(unsigned char *)(a5 + 1126) = 1;
LABEL_46:
      uint64_t v5 = *(void *)(v5 + 8);
      if (!v5) {
        return 1;
      }
    }
    if (v12 != 5 || *(_WORD *)(v11 + 18) != 49) {
      return 0;
    }
LABEL_6:
    if ((sub_1CC7E7570(*(void *)(v5 + 24), a2, a3, a4, a5) & 1) == 0) {
      return 0;
    }
    goto LABEL_46;
  }
  return v6;
}

void sub_1CC7E7854(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          uint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 5;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                uint64_t v73 = *((void *)a2 - 2);
                uint64_t v74 = *(void *)(v10 + 16);
                BOOL v5 = v73 == v74;
                BOOL v75 = v73 < v74;
                if (v5) {
                  BOOL v75 = *((void *)a2 - 1) < *(void *)(v10 + 24);
                }
                if (v75)
                {
                  long long v184 = *(_OWORD *)v10;
                  long long v193 = *(_OWORD *)(v10 + 16);
                  long long v76 = *(a2 - 1);
                  *(_OWORD *)unint64_t v10 = *(a2 - 2);
                  *(_OWORD *)(v10 + 16) = v76;
                  *(a2 - 2) = v184;
                  *(a2 - 1) = v193;
                }
                break;
              case 3:
                sub_1CC7E81FC((long long *)v10, (long long *)(v10 + 32), a2 - 2);
                break;
              case 4:
                sub_1CC7E85A4(v10, v10 + 32, v10 + 64, (uint64_t)(a2 - 2));
                break;
              case 5:
                unint64_t v77 = (long long *)(v10 + 32);
                unsigned int v78 = (long long *)(v10 + 64);
                unint64_t v79 = (long long *)(v10 + 96);
                sub_1CC7E85A4(v10, v10 + 32, v10 + 64, v10 + 96);
                uint64_t v80 = *((void *)a2 - 2);
                uint64_t v81 = *(void *)(v10 + 112);
                BOOL v5 = v80 == v81;
                BOOL v82 = v80 < v81;
                if (v5) {
                  BOOL v82 = *((void *)a2 - 1) < *(void *)(v10 + 120);
                }
                if (v82)
                {
                  long long v83 = *v79;
                  long long v194 = *(_OWORD *)(v10 + 112);
                  long long v84 = *(a2 - 1);
                  *unint64_t v79 = *(a2 - 2);
                  *(_OWORD *)(v10 + 112) = v84;
                  *(a2 - 2) = v83;
                  *(a2 - 1) = v194;
                  uint64_t v85 = *(void *)(v10 + 112);
                  uint64_t v86 = *(void *)(v10 + 80);
                  BOOL v5 = v85 == v86;
                  BOOL v87 = v85 < v86;
                  if (v5) {
                    BOOL v87 = *(void *)(v10 + 120) < *(void *)(v10 + 88);
                  }
                  if (v87)
                  {
                    long long v89 = *v78;
                    long long v88 = *(_OWORD *)(v10 + 80);
                    long long v90 = *(_OWORD *)(v10 + 112);
                    *unsigned int v78 = *v79;
                    *(_OWORD *)(v10 + 80) = v90;
                    *unint64_t v79 = v89;
                    *(_OWORD *)(v10 + 112) = v88;
                    uint64_t v91 = *(void *)(v10 + 80);
                    uint64_t v92 = *(void *)(v10 + 48);
                    BOOL v5 = v91 == v92;
                    BOOL v93 = v91 < v92;
                    if (v5) {
                      BOOL v93 = *(void *)(v10 + 88) < *(void *)(v10 + 56);
                    }
                    if (v93)
                    {
                      long long v95 = *v77;
                      long long v94 = *(_OWORD *)(v10 + 48);
                      long long v96 = *(_OWORD *)(v10 + 80);
                      *unint64_t v77 = *v78;
                      *(_OWORD *)(v10 + 48) = v96;
                      *unsigned int v78 = v95;
                      *(_OWORD *)(v10 + 80) = v94;
                      uint64_t v97 = *(void *)(v10 + 48);
                      uint64_t v98 = *(void *)(v10 + 16);
                      BOOL v5 = v97 == v98;
                      BOOL v99 = v97 < v98;
                      if (v5) {
                        BOOL v99 = *(void *)(v10 + 56) < *(void *)(v10 + 24);
                      }
                      if (v99)
                      {
                        long long v185 = *(_OWORD *)v10;
                        long long v195 = *(_OWORD *)(v10 + 16);
                        long long v100 = *(_OWORD *)(v10 + 48);
                        *(_OWORD *)unint64_t v10 = *v77;
                        *(_OWORD *)(v10 + 16) = v100;
                        *unint64_t v77 = v185;
                        *(_OWORD *)(v10 + 48) = v195;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 767)
          {
            uint64_t v101 = (long long *)(v10 + 32);
            BOOL v103 = (long long *)v10 == a2 || v101 == a2;
            if (a4)
            {
              if (!v103)
              {
                uint64_t v104 = 0;
                unint64_t v105 = v10;
                do
                {
                  uint64_t v106 = *(void *)(v105 + 48);
                  uint64_t v107 = *(void *)(v105 + 56);
                  uint64_t v108 = *(void *)(v105 + 16);
                  uint64_t v109 = *(void *)(v105 + 24);
                  unint64_t v105 = (unint64_t)v101;
                  BOOL v110 = v107 < v109;
                  BOOL v5 = v106 == v108;
                  BOOL v111 = v106 < v108;
                  if (!v5) {
                    BOOL v110 = v111;
                  }
                  if (v110)
                  {
                    long long v186 = *(_OWORD *)v105;
                    uint64_t v112 = v104;
                    while (1)
                    {
                      uint64_t v113 = v10 + v112;
                      long long v114 = *(_OWORD *)(v10 + v112 + 16);
                      *(_OWORD *)(v113 + 32) = *(_OWORD *)(v10 + v112);
                      *(_OWORD *)(v113 + 48) = v114;
                      if (!v112) {
                        break;
                      }
                      uint64_t v115 = *(void *)(v113 - 16);
                      BOOL v116 = v107 < *(void *)(v113 - 8);
                      BOOL v5 = v106 == v115;
                      BOOL v117 = v106 < v115;
                      if (!v5) {
                        BOOL v116 = v117;
                      }
                      v112 -= 32;
                      if (!v116)
                      {
                        uint64_t v118 = v10 + v112 + 32;
                        goto LABEL_121;
                      }
                    }
                    uint64_t v118 = v10;
LABEL_121:
                    *(_OWORD *)uint64_t v118 = v186;
                    *(void *)(v118 + 16) = v106;
                    *(void *)(v118 + 24) = v107;
                  }
                  uint64_t v101 = (long long *)(v105 + 32);
                  v104 += 32;
                }
                while ((long long *)(v105 + 32) != a2);
              }
            }
            else if (!v103)
            {
              do
              {
                uint64_t v166 = *(void *)(a1 + 48);
                uint64_t v167 = *(void *)(a1 + 56);
                uint64_t v168 = *(void *)(a1 + 16);
                uint64_t v169 = *(void *)(a1 + 24);
                a1 = (unint64_t)v101;
                BOOL v170 = v167 < v169;
                BOOL v5 = v166 == v168;
                BOOL v171 = v166 < v168;
                if (!v5) {
                  BOOL v170 = v171;
                }
                if (v170)
                {
                  long long v189 = *(_OWORD *)a1;
                  unint64_t v172 = a1;
                  do
                  {
                    long long v173 = *(_OWORD *)(v172 - 16);
                    *(_OWORD *)unint64_t v172 = *(_OWORD *)(v172 - 32);
                    *(_OWORD *)(v172 + 16) = v173;
                    uint64_t v174 = *(void *)(v172 - 48);
                    uint64_t v175 = *(void *)(v172 - 40);
                    v172 -= 32;
                    BOOL v176 = v167 < v175;
                    BOOL v5 = v166 == v174;
                    BOOL v177 = v166 < v174;
                    if (v5) {
                      BOOL v177 = v176;
                    }
                  }
                  while (v177);
                  *(_OWORD *)unint64_t v172 = v189;
                  *(void *)(v172 + 16) = v166;
                  *(void *)(v172 + 24) = v167;
                }
                uint64_t v101 = (long long *)(a1 + 32);
              }
              while ((long long *)(a1 + 32) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)v10 != a2)
            {
              int64_t v119 = (unint64_t)(v12 - 2) >> 1;
              int64_t v120 = v119;
              do
              {
                int64_t v121 = v120;
                if (v119 >= v120)
                {
                  uint64_t v122 = (2 * v120) | 1;
                  unint64_t v123 = v10 + 32 * v122;
                  if (2 * v121 + 2 < v12)
                  {
                    uint64_t v125 = *(void *)(v123 + 16);
                    uint64_t v124 = *(void *)(v123 + 48);
                    BOOL v5 = v125 == v124;
                    LODWORD(v125) = v125 < v124;
                    uint64_t v125 = v5 ? *(void *)(v123 + 24) < *(void *)(v123 + 56) : v125;
                    v123 += 32 * v125;
                    if (v125) {
                      uint64_t v122 = 2 * v121 + 2;
                    }
                  }
                  unint64_t v126 = v10 + 32 * v121;
                  uint64_t v127 = *(void *)(v123 + 16);
                  uint64_t v129 = *(void *)(v126 + 16);
                  uint64_t v128 = *(void *)(v126 + 24);
                  BOOL v5 = v127 == v129;
                  BOOL v130 = v127 < v129;
                  if (v5) {
                    BOOL v130 = *(void *)(v123 + 24) < v128;
                  }
                  if (!v130)
                  {
                    unint64_t v131 = v10 + 32 * v121;
                    long long v187 = *(_OWORD *)v131;
                    do
                    {
                      BOOL v132 = (_OWORD *)v131;
                      unint64_t v131 = v123;
                      long long v133 = *(_OWORD *)(v123 + 16);
                      _OWORD *v132 = *(_OWORD *)v123;
                      v132[1] = v133;
                      if (v119 < v122) {
                        break;
                      }
                      uint64_t v134 = (2 * v122) | 1;
                      unint64_t v123 = v10 + 32 * v134;
                      uint64_t v135 = 2 * v122 + 2;
                      if (v135 < v12)
                      {
                        uint64_t v137 = *(void *)(v123 + 16);
                        uint64_t v136 = *(void *)(v123 + 48);
                        BOOL v5 = v137 == v136;
                        LODWORD(v137) = v137 < v136;
                        uint64_t v137 = v5 ? *(void *)(v123 + 24) < *(void *)(v123 + 56) : v137;
                        v123 += 32 * v137;
                        if (v137) {
                          uint64_t v134 = v135;
                        }
                      }
                      uint64_t v138 = *(void *)(v123 + 16);
                      BOOL v139 = *(void *)(v123 + 24) < v128;
                      BOOL v5 = v138 == v129;
                      BOOL v140 = v138 < v129;
                      if (!v5) {
                        BOOL v139 = v140;
                      }
                      uint64_t v122 = v134;
                    }
                    while (!v139);
                    *(_OWORD *)unint64_t v131 = v187;
                    *(void *)(v131 + 16) = v129;
                    *(void *)(v131 + 24) = v128;
                  }
                }
                int64_t v120 = v121 - 1;
              }
              while (v121);
              do
              {
                uint64_t v141 = 0;
                long long v188 = *(_OWORD *)v10;
                long long v196 = *(_OWORD *)(v10 + 16);
                unsigned int v142 = (_OWORD *)v10;
                do
                {
                  unsigned int v143 = &v142[2 * v141 + 2];
                  uint64_t v144 = (2 * v141) | 1;
                  uint64_t v145 = 2 * v141 + 2;
                  if (v145 < v12)
                  {
                    uint64_t v147 = *((void *)v143 + 2);
                    uint64_t v146 = *((void *)v143 + 6);
                    BOOL v5 = v147 == v146;
                    LODWORD(v147) = v147 < v146;
                    uint64_t v147 = v5 ? *((void *)v143 + 3) < *((void *)v143 + 7) : v147;
                    v143 += 2 * v147;
                    if (v147) {
                      uint64_t v144 = v145;
                    }
                  }
                  long long v148 = v143[1];
                  *unsigned int v142 = *v143;
                  v142[1] = v148;
                  unsigned int v142 = v143;
                  uint64_t v141 = v144;
                }
                while (v144 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                a2 -= 2;
                if (v143 == a2)
                {
                  *unsigned int v143 = v188;
                  v143[1] = v196;
                }
                else
                {
                  long long v149 = a2[1];
                  *unsigned int v143 = *a2;
                  v143[1] = v149;
                  *a2 = v188;
                  a2[1] = v196;
                  uint64_t v150 = (uint64_t)v143 - v10 + 32;
                  if (v150 >= 33)
                  {
                    unint64_t v151 = (((unint64_t)v150 >> 5) - 2) >> 1;
                    unint64_t v152 = v10 + 32 * v151;
                    uint64_t v153 = *(void *)(v152 + 16);
                    uint64_t v154 = *((void *)v143 + 2);
                    BOOL v155 = *(void *)(v152 + 24) < *((void *)v143 + 3);
                    BOOL v5 = v153 == v154;
                    BOOL v156 = v153 < v154;
                    if (!v5) {
                      BOOL v155 = v156;
                    }
                    if (v155)
                    {
                      long long v180 = *v143;
                      uint64_t v157 = *((void *)v143 + 2);
                      uint64_t v158 = *((void *)v143 + 3);
                      do
                      {
                        uint64_t v159 = v143;
                        unsigned int v143 = (long long *)(v10 + 32 * v151);
                        long long v160 = v143[1];
                        long long *v159 = *v143;
                        v159[1] = v160;
                        if (!v151) {
                          break;
                        }
                        unint64_t v151 = (v151 - 1) >> 1;
                        unint64_t v161 = v10 + 32 * v151;
                        uint64_t v162 = *(void *)(v161 + 16);
                        BOOL v163 = *(void *)(v161 + 24) < v158;
                        BOOL v5 = v162 == v157;
                        BOOL v164 = v162 < v157;
                        if (!v5) {
                          BOOL v163 = v164;
                        }
                      }
                      while (v163);
                      *unsigned int v143 = v180;
                      *((void *)v143 + 2) = v157;
                      *((void *)v143 + 3) = v158;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = (long long *)(v10 + 32 * ((unint64_t)v12 >> 1));
          if ((unint64_t)v11 > 0x1000)
          {
            sub_1CC7E81FC((long long *)a1, (long long *)(a1 + 32 * ((unint64_t)v12 >> 1)), a2 - 2);
            sub_1CC7E81FC((long long *)(a1 + 32), v14 - 2, a2 - 4);
            sub_1CC7E81FC((long long *)(a1 + 64), (long long *)(a1 + 32 + 32 * v13), a2 - 6);
            sub_1CC7E81FC(v14 - 2, v14, (long long *)(a1 + 32 + 32 * v13));
            long long v181 = *(_OWORD *)a1;
            long long v190 = *(_OWORD *)(a1 + 16);
            long long v15 = v14[1];
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v15;
            long long *v14 = v181;
            v14[1] = v190;
          }
          else
          {
            sub_1CC7E81FC((long long *)(a1 + 32 * ((unint64_t)v12 >> 1)), (long long *)a1, a2 - 2);
          }
          --a3;
          if (a4)
          {
            uint64_t v16 = *(void *)(a1 + 16);
            uint64_t v17 = *(void *)(a1 + 24);
            break;
          }
          uint64_t v18 = *(void *)(a1 - 16);
          uint64_t v16 = *(void *)(a1 + 16);
          uint64_t v17 = *(void *)(a1 + 24);
          BOOL v5 = v18 == v16;
          BOOL v19 = v18 < v16;
          if (v5) {
            BOOL v19 = *(void *)(a1 - 8) < v17;
          }
          if (v19) {
            break;
          }
          long long v179 = *(_OWORD *)a1;
          uint64_t v47 = *((void *)a2 - 2);
          BOOL v5 = v16 == v47;
          BOOL v48 = v16 < v47;
          if (v5) {
            BOOL v48 = v17 < *((void *)a2 - 1);
          }
          if (v48)
          {
            unint64_t v49 = a1;
            do
            {
              unint64_t v10 = v49 + 32;
              uint64_t v50 = *(void *)(v49 + 48);
              BOOL v51 = v17 < *(void *)(v49 + 56);
              BOOL v5 = v16 == v50;
              BOOL v52 = v16 < v50;
              if (v5) {
                BOOL v52 = v51;
              }
              unint64_t v49 = v10;
            }
            while (!v52);
          }
          else
          {
            unint64_t v53 = a1 + 32;
            do
            {
              unint64_t v10 = v53;
              if (v53 >= (unint64_t)a2) {
                break;
              }
              uint64_t v54 = *(void *)(v53 + 16);
              BOOL v55 = v17 < *(void *)(v10 + 24);
              BOOL v5 = v16 == v54;
              BOOL v56 = v16 < v54;
              if (!v5) {
                BOOL v55 = v56;
              }
              unint64_t v53 = v10 + 32;
            }
            while (!v55);
          }
          uint64_t v57 = a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v58 = a2;
            do
            {
              uint64_t v57 = v58 - 2;
              uint64_t v59 = *((void *)v58 - 2);
              BOOL v60 = v17 < *((void *)v58 - 1);
              BOOL v5 = v16 == v59;
              BOOL v61 = v16 < v59;
              if (v5) {
                BOOL v61 = v60;
              }
              unint64_t v58 = v57;
            }
            while (v61);
          }
          while (v10 < (unint64_t)v57)
          {
            long long v183 = *(_OWORD *)v10;
            long long v192 = *(_OWORD *)(v10 + 16);
            long long v62 = v57[1];
            *(_OWORD *)unint64_t v10 = *v57;
            *(_OWORD *)(v10 + 16) = v62;
            *uint64_t v57 = v183;
            v57[1] = v192;
            do
            {
              uint64_t v63 = *(void *)(v10 + 48);
              uint64_t v64 = *(void *)(v10 + 56);
              v10 += 32;
              BOOL v65 = v17 < v64;
              BOOL v5 = v16 == v63;
              BOOL v66 = v16 < v63;
              if (v5) {
                BOOL v66 = v65;
              }
            }
            while (!v66);
            do
            {
              uint64_t v67 = *((void *)v57 - 2);
              uint64_t v68 = *((void *)v57 - 1);
              v57 -= 2;
              BOOL v69 = v17 < v68;
              BOOL v5 = v16 == v67;
              BOOL v70 = v16 < v67;
              if (v5) {
                BOOL v70 = v69;
              }
            }
            while (v70);
          }
          uint64_t v71 = (long long *)(v10 - 32);
          BOOL v4 = v10 - 32 >= a1;
          BOOL v5 = v10 - 32 == a1;
          if (v10 - 32 != a1)
          {
            long long v72 = *(_OWORD *)(v10 - 16);
            *(_OWORD *)a1 = *v71;
            *(_OWORD *)(a1 + 16) = v72;
          }
          a4 = 0;
          *uint64_t v71 = v179;
          *(void *)(v10 - 16) = v16;
          *(void *)(v10 - 8) = v17;
        }
        uint64_t v20 = 0;
        long long v178 = *(_OWORD *)a1;
        do
        {
          uint64_t v21 = *(void *)(a1 + v20 + 48);
          BOOL v22 = *(void *)(a1 + v20 + 56) < v17;
          BOOL v5 = v21 == v16;
          BOOL v23 = v21 < v16;
          if (!v5) {
            BOOL v22 = v23;
          }
          v20 += 32;
        }
        while (v22);
        unint64_t v24 = a1 + v20;
        int v25 = a2;
        if (v20 == 32)
        {
          uint64_t v30 = a2;
          while (v24 < (unint64_t)v30)
          {
            int v26 = v30 - 2;
            uint64_t v31 = *((void *)v30 - 2);
            BOOL v32 = *((void *)v30 - 1) < v17;
            BOOL v5 = v31 == v16;
            BOOL v33 = v31 < v16;
            if (v5) {
              BOOL v33 = v32;
            }
            uint64_t v30 = v26;
            if (v33) {
              goto LABEL_30;
            }
          }
          int v26 = v30;
        }
        else
        {
          do
          {
            int v26 = v25 - 2;
            uint64_t v27 = *((void *)v25 - 2);
            BOOL v28 = *((void *)v25 - 1) < v17;
            BOOL v5 = v27 == v16;
            BOOL v29 = v27 < v16;
            if (v5) {
              BOOL v29 = v28;
            }
            int v25 = v26;
          }
          while (!v29);
        }
LABEL_30:
        unint64_t v10 = v24;
        if (v24 < (unint64_t)v26)
        {
          unint64_t v34 = v26;
          do
          {
            long long v182 = *(_OWORD *)v10;
            long long v191 = *(_OWORD *)(v10 + 16);
            long long v35 = v34[1];
            *(_OWORD *)unint64_t v10 = *v34;
            *(_OWORD *)(v10 + 16) = v35;
            *unint64_t v34 = v182;
            v34[1] = v191;
            do
            {
              uint64_t v36 = *(void *)(v10 + 48);
              uint64_t v37 = *(void *)(v10 + 56);
              v10 += 32;
              BOOL v38 = v37 < v17;
              BOOL v5 = v36 == v16;
              BOOL v39 = v36 < v16;
              if (v5) {
                BOOL v39 = v38;
              }
            }
            while (v39);
            do
            {
              uint64_t v40 = *((void *)v34 - 2);
              uint64_t v41 = *((void *)v34 - 1);
              v34 -= 2;
              BOOL v42 = v41 < v17;
              BOOL v5 = v40 == v16;
              BOOL v43 = v40 < v16;
              if (v5) {
                BOOL v43 = v42;
              }
            }
            while (!v43);
          }
          while (v10 < (unint64_t)v34);
        }
        unint64_t v44 = (long long *)(v10 - 32);
        if (v10 - 32 != a1)
        {
          long long v45 = *(_OWORD *)(v10 - 16);
          *(_OWORD *)a1 = *v44;
          *(_OWORD *)(a1 + 16) = v45;
        }
        *unint64_t v44 = v178;
        *(void *)(v10 - 16) = v16;
        *(void *)(v10 - 8) = v17;
        if (v24 >= (unint64_t)v26) {
          break;
        }
LABEL_45:
        sub_1CC7E7854(a1, v10 - 32, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v46 = sub_1CC7E82E4(a1, v10 - 32);
      if (sub_1CC7E82E4(v10, (uint64_t)a2)) {
        break;
      }
      if (!v46) {
        goto LABEL_45;
      }
    }
    a2 = (long long *)(v10 - 32);
    if (!v46) {
      continue;
    }
    break;
  }
}

long long *sub_1CC7E81FC(long long *result, long long *a2, long long *a3)
{
  uint64_t v3 = *((void *)a2 + 2);
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)result + 2);
  BOOL v6 = v3 == v5;
  BOOL v7 = v3 < v5;
  if (v6) {
    BOOL v7 = v4 < *((void *)result + 3);
  }
  uint64_t v8 = *((void *)a3 + 2);
  BOOL v9 = *((void *)a3 + 3) < v4;
  BOOL v6 = v8 == v3;
  BOOL v10 = v8 < v3;
  if (v6) {
    BOOL v10 = v9;
  }
  if (v7)
  {
    if (v10)
    {
      long long v12 = *result;
      long long v11 = result[1];
      long long v13 = a3[1];
      *__n128 result = *a3;
      result[1] = v13;
LABEL_17:
      *a3 = v12;
      a3[1] = v11;
      return result;
    }
    long long v24 = *result;
    long long v23 = result[1];
    long long v25 = a2[1];
    *__n128 result = *a2;
    result[1] = v25;
    *a2 = v24;
    a2[1] = v23;
    uint64_t v26 = *((void *)a3 + 2);
    uint64_t v27 = *((void *)a2 + 2);
    BOOL v6 = v26 == v27;
    BOOL v28 = v26 < v27;
    if (v6) {
      BOOL v28 = *((void *)a3 + 3) < *((void *)a2 + 3);
    }
    if (v28)
    {
      long long v12 = *a2;
      long long v11 = a2[1];
      long long v29 = a3[1];
      *a2 = *a3;
      a2[1] = v29;
      goto LABEL_17;
    }
  }
  else if (v10)
  {
    long long v15 = *a2;
    long long v14 = a2[1];
    long long v16 = a3[1];
    *a2 = *a3;
    a2[1] = v16;
    *a3 = v15;
    a3[1] = v14;
    uint64_t v17 = *((void *)a2 + 2);
    uint64_t v18 = *((void *)result + 2);
    BOOL v6 = v17 == v18;
    BOOL v19 = v17 < v18;
    if (v6) {
      BOOL v19 = *((void *)a2 + 3) < *((void *)result + 3);
    }
    if (v19)
    {
      long long v21 = *result;
      long long v20 = result[1];
      long long v22 = a2[1];
      *__n128 result = *a2;
      result[1] = v22;
      *a2 = v21;
      a2[1] = v20;
    }
  }
  return result;
}

BOOL sub_1CC7E82E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(void *)(a2 - 16);
      uint64_t v7 = *(void *)(a1 + 16);
      BOOL v8 = v6 == v7;
      BOOL v9 = v6 < v7;
      if (v8) {
        BOOL v9 = *(void *)(a2 - 8) < *(void *)(a1 + 24);
      }
      if (v9)
      {
        long long v11 = *(_OWORD *)a1;
        long long v10 = *(_OWORD *)(a1 + 16);
        long long v12 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 16) = v12;
        *(_OWORD *)(a2 - 32) = v11;
        *(_OWORD *)(a2 - 16) = v10;
      }
      return result;
    case 3:
      sub_1CC7E81FC((long long *)a1, (long long *)(a1 + 32), (long long *)(a2 - 32));
      return 1;
    case 4:
      sub_1CC7E85A4(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      BOOL v28 = (long long *)(a1 + 32);
      long long v29 = (long long *)(a1 + 64);
      uint64_t v30 = (long long *)(a1 + 96);
      sub_1CC7E85A4(a1, a1 + 32, a1 + 64, a1 + 96);
      uint64_t v31 = *(void *)(a2 - 16);
      uint64_t v32 = *(void *)(a1 + 112);
      BOOL v8 = v31 == v32;
      BOOL v33 = v31 < v32;
      if (v8) {
        BOOL v33 = *(void *)(a2 - 8) < *(void *)(a1 + 120);
      }
      if (v33)
      {
        long long v35 = *v30;
        long long v34 = *(_OWORD *)(a1 + 112);
        long long v36 = *(_OWORD *)(a2 - 16);
        *uint64_t v30 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 112) = v36;
        *(_OWORD *)(a2 - 32) = v35;
        *(_OWORD *)(a2 - 16) = v34;
        uint64_t v37 = *(void *)(a1 + 112);
        uint64_t v38 = *(void *)(a1 + 80);
        BOOL v8 = v37 == v38;
        BOOL v39 = v37 < v38;
        if (v8) {
          BOOL v39 = *(void *)(a1 + 120) < *(void *)(a1 + 88);
        }
        if (v39)
        {
          long long v41 = *v29;
          long long v40 = *(_OWORD *)(a1 + 80);
          long long v42 = *(_OWORD *)(a1 + 112);
          long long *v29 = *v30;
          *(_OWORD *)(a1 + 80) = v42;
          *uint64_t v30 = v41;
          *(_OWORD *)(a1 + 112) = v40;
          uint64_t v43 = *(void *)(a1 + 80);
          uint64_t v44 = *(void *)(a1 + 48);
          BOOL v8 = v43 == v44;
          BOOL v45 = v43 < v44;
          if (v8) {
            BOOL v45 = *(void *)(a1 + 88) < *(void *)(a1 + 56);
          }
          if (v45)
          {
            long long v47 = *v28;
            long long v46 = *(_OWORD *)(a1 + 48);
            long long v48 = *(_OWORD *)(a1 + 80);
            long long *v28 = *v29;
            *(_OWORD *)(a1 + 48) = v48;
            long long *v29 = v47;
            *(_OWORD *)(a1 + 80) = v46;
            uint64_t v49 = *(void *)(a1 + 48);
            uint64_t v50 = *(void *)(a1 + 16);
            BOOL v8 = v49 == v50;
            BOOL v51 = v49 < v50;
            if (v8) {
              BOOL v51 = *(void *)(a1 + 56) < *(void *)(a1 + 24);
            }
            if (v51)
            {
              long long v53 = *(_OWORD *)a1;
              long long v52 = *(_OWORD *)(a1 + 16);
              long long v54 = *(_OWORD *)(a1 + 48);
              *(_OWORD *)a1 = *v28;
              *(_OWORD *)(a1 + 16) = v54;
              long long *v28 = v53;
              *(_OWORD *)(a1 + 48) = v52;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v13 = a1 + 64;
      sub_1CC7E81FC((long long *)a1, (long long *)(a1 + 32), (long long *)(a1 + 64));
      uint64_t v14 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (1)
  {
    uint64_t v17 = *(void *)(v14 + 16);
    uint64_t v18 = *(void *)(v14 + 24);
    uint64_t v19 = *(void *)(v13 + 16);
    BOOL v8 = v17 == v19;
    BOOL v20 = v17 < v19;
    if (v8) {
      BOOL v20 = v18 < *(void *)(v13 + 24);
    }
    if (v20)
    {
      long long v55 = *(_OWORD *)v14;
      uint64_t v21 = v15;
      while (1)
      {
        uint64_t v22 = a1 + v21;
        long long v23 = *(_OWORD *)(a1 + v21 + 80);
        *(_OWORD *)(v22 + 96) = *(_OWORD *)(a1 + v21 + 64);
        *(_OWORD *)(v22 + 112) = v23;
        if (v21 == -64) {
          break;
        }
        uint64_t v24 = *(void *)(v22 + 48);
        BOOL v25 = v18 < *(void *)(v22 + 56);
        BOOL v8 = v17 == v24;
        BOOL v26 = v17 < v24;
        if (!v8) {
          BOOL v25 = v26;
        }
        v21 -= 32;
        if (!v25)
        {
          uint64_t v27 = a1 + v21 + 96;
          goto LABEL_19;
        }
      }
      uint64_t v27 = a1;
LABEL_19:
      *(_OWORD *)uint64_t v27 = v55;
      *(void *)(v27 + 16) = v17;
      *(void *)(v27 + 24) = v18;
      if (++v16 == 8) {
        return v14 + 32 == a2;
      }
    }
    uint64_t v13 = v14;
    v15 += 32;
    v14 += 32;
    if (v14 == a2) {
      return 1;
    }
  }
}

__n128 sub_1CC7E85A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1CC7E81FC((long long *)a1, (long long *)a2, (long long *)a3);
  uint64_t v9 = *(void *)(a4 + 16);
  uint64_t v10 = *(void *)(a3 + 16);
  BOOL v11 = v9 == v10;
  BOOL v12 = v9 < v10;
  if (v11) {
    BOOL v12 = *(void *)(a4 + 24) < *(void *)(a3 + 24);
  }
  if (v12)
  {
    long long v13 = *(_OWORD *)a3;
    __n128 result = *(__n128 *)(a3 + 16);
    long long v14 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v14;
    *(_OWORD *)a4 = v13;
    *(__n128 *)(a4 + 16) = result;
    uint64_t v15 = *(void *)(a3 + 16);
    uint64_t v16 = *(void *)(a2 + 16);
    BOOL v11 = v15 == v16;
    BOOL v17 = v15 < v16;
    if (v11) {
      BOOL v17 = *(void *)(a3 + 24) < *(void *)(a2 + 24);
    }
    if (v17)
    {
      long long v18 = *(_OWORD *)a2;
      __n128 result = *(__n128 *)(a2 + 16);
      long long v19 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v19;
      *(_OWORD *)a3 = v18;
      *(__n128 *)(a3 + 16) = result;
      uint64_t v20 = *(void *)(a2 + 16);
      uint64_t v21 = *(void *)(a1 + 16);
      BOOL v11 = v20 == v21;
      BOOL v22 = v20 < v21;
      if (v11) {
        BOOL v22 = *(void *)(a2 + 24) < *(void *)(a1 + 24);
      }
      if (v22)
      {
        long long v23 = *(_OWORD *)a1;
        __n128 result = *(__n128 *)(a1 + 16);
        long long v24 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v24;
        *(_OWORD *)a2 = v23;
        *(__n128 *)(a2 + 16) = result;
      }
    }
  }
  return result;
}

void sub_1CC7E8680(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v4 = *(void **)(v2 - 72);
      if (v4 != *(void **)(v2 - 80)) {
        free(v4);
      }
      uint64_t v5 = *(void **)(v2 - 1120);
      if ((void *)(v2 - 1104) != v5) {
        free(v5);
      }
      v2 -= 1128;
    }
    while (v2 != a1);
  }
}

void sub_1CC7E86E4(unint64_t a1, char *i, uint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  do
  {
    unint64_t v12 = (unint64_t)i;
    while (2)
    {
      while (2)
      {
        uint64_t v98 = a1;
        uint64_t v13 = a1;
        for (uint64_t i = (char *)v12; ; uint64_t i = (char *)v25)
        {
          uint64_t v14 = (uint64_t)&i[-a4];
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&i[-a4] >> 3);
          if (v7 || !v6)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                unint64_t v46 = *((void *)i - 3);
                BOOL v45 = i - 24;
                if (*(void *)a4 < v46)
                {
                  uint64_t v117 = *((void *)v45 + 2);
                  long long v105 = *(_OWORD *)v45;
                  long long v47 = *(_OWORD *)a4;
                  *((_DWORD *)v45 + 4) = *(_DWORD *)(a4 + 16);
                  *(_OWORD *)BOOL v45 = v47;
                  *(_OWORD *)a4 = v105;
                  *(_DWORD *)(a4 + 16) = v117;
                }
                break;
              case 3uLL:
                sub_1CC7E90A8(v98, (uint64_t)i, (uint64_t)(i - 24), (uint64_t)(i - 24), a3, a4 + 24);
                break;
              case 4uLL:
                sub_1CC7E9474(v98, (uint64_t)i, (uint64_t)(i - 24), (uint64_t)(i - 24), (uint64_t)(i - 48), (uint64_t)(i - 48), a3, a4 + 24);
                break;
              case 5uLL:
                long long v48 = i - 24;
                uint64_t v49 = i - 48;
                uint64_t v50 = i - 72;
                sub_1CC7E9474(v98, (uint64_t)i, (uint64_t)(i - 24), (uint64_t)(i - 24), (uint64_t)(i - 48), (uint64_t)(i - 48), (uint64_t)(i - 72), (uint64_t)(i - 72));
                unint64_t v52 = *((void *)i - 12);
                BOOL v51 = i - 96;
                if (*(void *)a4 < v52)
                {
                  uint64_t v118 = *((void *)v51 + 2);
                  long long v106 = *(_OWORD *)v51;
                  long long v53 = *(_OWORD *)a4;
                  *((_DWORD *)v51 + 4) = *(_DWORD *)(a4 + 16);
                  *(_OWORD *)BOOL v51 = v53;
                  *(_OWORD *)a4 = v106;
                  *(_DWORD *)(a4 + 16) = v118;
                  if (*(void *)v51 < *(void *)v50)
                  {
                    uint64_t v119 = *((void *)v50 + 2);
                    long long v107 = *(_OWORD *)v50;
                    *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
                    *((_DWORD *)v50 + 4) = *((_DWORD *)v51 + 4);
                    *((_DWORD *)v51 + 4) = v119;
                    *(_OWORD *)BOOL v51 = v107;
                    if (*(void *)v50 < *(void *)v49)
                    {
                      uint64_t v120 = *((void *)v49 + 2);
                      long long v108 = *(_OWORD *)v49;
                      *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
                      *((_DWORD *)v49 + 4) = *((_DWORD *)v50 + 4);
                      *((_DWORD *)v50 + 4) = v120;
                      *(_OWORD *)uint64_t v50 = v108;
                      if (*(void *)v49 < *(void *)v48)
                      {
                        uint64_t v121 = *((void *)v48 + 2);
                        long long v109 = *(_OWORD *)v48;
                        *(_OWORD *)long long v48 = *(_OWORD *)v49;
                        *((_DWORD *)v48 + 4) = *((_DWORD *)v49 + 4);
                        *((_DWORD *)v49 + 4) = v121;
                        *(_OWORD *)uint64_t v49 = v109;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v14 <= 575)
          {
            long long v54 = i - 24;
            BOOL v56 = i == (char *)a4 || v54 == (char *)a4;
            if (a6)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = i - 24;
                do
                {
                  unint64_t v60 = *((void *)v58 - 3);
                  v58 -= 24;
                  unint64_t v59 = v60;
                  if (v60 < *(void *)v54)
                  {
                    long long v110 = *((_OWORD *)v54 - 1);
                    uint64_t v61 = v57;
                    do
                    {
                      long long v62 = &i[v61];
                      *((_OWORD *)v62 - 3) = *(_OWORD *)&i[v61 - 24];
                      *((_DWORD *)v62 - 8) = *(_DWORD *)&i[v61 - 8];
                      if (!v61) {
                        break;
                      }
                      v61 += 24;
                    }
                    while (v59 < *(void *)v62);
                    *((void *)v62 - 3) = v59;
                    *((_DWORD *)v62 - 2) = DWORD2(v110);
                    *((void *)v62 - 2) = v110;
                  }
                  v57 -= 24;
                  long long v54 = v58;
                }
                while (v58 != (char *)a4);
              }
            }
            else if (!v56)
            {
              uint64_t v91 = i - 48;
              uint64_t v92 = i - 24;
              do
              {
                unint64_t v94 = *((void *)v92 - 3);
                v92 -= 24;
                unint64_t v93 = v94;
                if (v94 < *(void *)v54)
                {
                  long long v113 = *((_OWORD *)v54 - 1);
                  long long v95 = v91;
                  do
                  {
                    *(_OWORD *)long long v95 = *(_OWORD *)(v95 + 24);
                    *((_DWORD *)v95 + 4) = *((_DWORD *)v95 + 10);
                    unint64_t v96 = *((void *)v95 + 6);
                    v95 += 24;
                  }
                  while (v93 < v96);
                  *(void *)long long v95 = v93;
                  *((_DWORD *)v95 + 4) = DWORD2(v113);
                  *((void *)v95 + 1) = v113;
                }
                v91 -= 24;
                long long v54 = v92;
              }
              while (v92 != (char *)a4);
            }
            return;
          }
          if (!a5)
          {
            if (i != (char *)a4)
            {
              int64_t v63 = (v15 - 2) >> 1;
              int64_t v64 = v63;
              do
              {
                int64_t v65 = v64;
                int64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((24 * v64) >> 3);
                if (v63 >= v66)
                {
                  uint64_t v67 = 2 * v66;
                  uint64_t v68 = (2 * v66) | 1;
                  BOOL v69 = &i[-24 * v68];
                  uint64_t v70 = v67 + 2;
                  if (v70 < (uint64_t)v15 && *((void *)v69 - 3) < *((void *)v69 - 6))
                  {
                    v69 -= 24;
                    uint64_t v68 = v70;
                  }
                  uint64_t v71 = &i[-24 * v65];
                  unint64_t v72 = *((void *)v71 - 3);
                  if (*((void *)v69 - 3) >= v72)
                  {
                    long long v111 = *((_OWORD *)v71 - 1);
                    do
                    {
                      uint64_t v73 = v71;
                      uint64_t v71 = v69;
                      long long v74 = *(_OWORD *)(v69 - 24);
                      *((_DWORD *)v73 - 2) = *((_DWORD *)v69 - 2);
                      *(_OWORD *)(v73 - 24) = v74;
                      if (v63 < v68) {
                        break;
                      }
                      uint64_t v75 = (2 * v68) | 1;
                      BOOL v69 = &i[-24 * v75];
                      uint64_t v76 = 2 * v68 + 2;
                      if (v76 < (uint64_t)v15 && *((void *)v69 - 3) < *((void *)v69 - 6))
                      {
                        v69 -= 24;
                        uint64_t v75 = v76;
                      }
                      uint64_t v68 = v75;
                    }
                    while (*((void *)v69 - 3) >= v72);
                    *((void *)v71 - 3) = v72;
                    *((_DWORD *)v71 - 2) = DWORD2(v111);
                    *((void *)v71 - 2) = v111;
                  }
                }
                int64_t v64 = v65 - 1;
              }
              while (v65);
              do
              {
                uint64_t v77 = 0;
                uint64_t v122 = *((void *)i - 1);
                long long v112 = *(_OWORD *)(i - 24);
                unsigned int v78 = i;
                do
                {
                  unint64_t v79 = &v78[24 * ~v77];
                  uint64_t v80 = (2 * v77) | 1;
                  uint64_t v81 = 2 * v77 + 2;
                  if (v81 < (uint64_t)v15 && *((void *)v79 - 3) < *((void *)v79 - 6))
                  {
                    v79 -= 24;
                    uint64_t v80 = v81;
                  }
                  long long v82 = *(_OWORD *)(v79 - 24);
                  *((_DWORD *)v78 - 2) = *((_DWORD *)v79 - 2);
                  *(_OWORD *)(v78 - 24) = v82;
                  unsigned int v78 = v79;
                  uint64_t v77 = v80;
                }
                while (v80 <= (uint64_t)((v15 - 2) >> 1));
                long long v83 = v79 - 24;
                if (v79 == (char *)(a4 + 24))
                {
                  *((_DWORD *)v79 - 2) = v122;
                  *(_OWORD *)long long v83 = v112;
                }
                else
                {
                  long long v84 = *(_OWORD *)a4;
                  *((_DWORD *)v79 - 2) = *(_DWORD *)(a4 + 16);
                  *(_OWORD *)long long v83 = v84;
                  *(_DWORD *)(a4 + 16) = v122;
                  *(_OWORD *)a4 = v112;
                  if (i - v83 >= 25)
                  {
                    unint64_t v85 = ((i - v83) / 0x18uLL - 2) >> 1;
                    uint64_t v86 = &i[-24 * v85];
                    unint64_t v87 = *(void *)v83;
                    if (*((void *)v86 - 3) < v87)
                    {
                      long long v101 = *((_OWORD *)v79 - 1);
                      do
                      {
                        long long v88 = v79;
                        unint64_t v79 = v86;
                        long long v89 = *(_OWORD *)(v86 - 24);
                        *((_DWORD *)v88 - 2) = *((_DWORD *)v86 - 2);
                        *(_OWORD *)(v88 - 24) = v89;
                        if (!v85) {
                          break;
                        }
                        unint64_t v85 = (v85 - 1) >> 1;
                        uint64_t v86 = &i[-24 * v85];
                      }
                      while (*((void *)v86 - 3) < v87);
                      *((void *)v79 - 3) = v87;
                      *((_DWORD *)v79 - 2) = DWORD2(v101);
                      *((void *)v79 - 2) = v101;
                    }
                  }
                }
                a4 += 24;
              }
              while ((uint64_t)v15-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          uint64_t v17 = (uint64_t)&i[-24 * (v15 >> 1)];
          if ((unint64_t)v14 >= 0xC01)
          {
            sub_1CC7E90A8(v13, (uint64_t)i, (uint64_t)&i[-24 * (v15 >> 1)], (uint64_t)&i[-24 * (v15 >> 1)], a4 + 24, a4 + 24);
            uint64_t v18 = (uint64_t)&i[-24 * v16 + 24];
            sub_1CC7E90A8((uint64_t)(i - 24), (uint64_t)(i - 24), v18, v18, a4 + 48, a4 + 48);
            uint64_t v19 = (uint64_t)&i[24 * ~v16];
            sub_1CC7E90A8((uint64_t)(i - 48), (uint64_t)(i - 48), v19, v19, a4 + 72, a4 + 72);
            sub_1CC7E90A8(v18, v18, v17, v17, v19, v19);
            uint64_t v114 = *((void *)i - 1);
            long long v102 = *(_OWORD *)(i - 24);
            int v20 = *(_DWORD *)(v17 - 8);
            *(_OWORD *)(i - 24) = *(_OWORD *)(v17 - 24);
            *((_DWORD *)i - 2) = v20;
            *(_DWORD *)(v17 - 8) = v114;
            *(_OWORD *)(v17 - 24) = v102;
          }
          else
          {
            sub_1CC7E90A8((uint64_t)&i[-24 * (v15 >> 1)], (uint64_t)&i[-24 * (v15 >> 1)], v13, (uint64_t)i, a4 + 24, a4 + 24);
          }
          --a5;
          uint64_t v21 = i - 24;
          if (a6) {
            break;
          }
          unint64_t v22 = *((void *)i - 3);
          if (*(void *)i < v22) {
            goto LABEL_30;
          }
          long long v99 = *((_OWORD *)i - 1);
          long long v23 = i - 24;
          if (v22 >= *(void *)a4)
          {
            do
            {
              unint64_t v25 = (unint64_t)v23;
              if ((unint64_t)v23 <= a4) {
                break;
              }
              v23 -= 24;
            }
            while (v22 >= *(void *)(v25 - 24));
          }
          else
          {
            long long v24 = i;
            do
            {
              unint64_t v25 = (unint64_t)(v24 - 24);
              unint64_t v26 = *((void *)v24 - 6);
              v24 -= 24;
            }
            while (v22 >= v26);
          }
          uint64_t v27 = (unint64_t *)a4;
          if (v25 > a4)
          {
            uint64_t v27 = (unint64_t *)a4;
            do
            {
              unint64_t v28 = *v27;
              v27 += 3;
            }
            while (v22 < v28);
          }
          while (v25 > (unint64_t)v27)
          {
            uint64_t v115 = *(void *)(v25 - 8);
            long long v103 = *(_OWORD *)(v25 - 24);
            long long v29 = *(_OWORD *)(v27 - 3);
            *(_DWORD *)(v25 - 8) = *((_DWORD *)v27 - 2);
            *(_OWORD *)(v25 - 24) = v29;
            *((_DWORD *)v27 - 2) = v115;
            *(_OWORD *)(v27 - 3) = v103;
            do
            {
              unint64_t v30 = *(void *)(v25 - 48);
              v25 -= 24;
            }
            while (v22 >= v30);
            do
            {
              unint64_t v31 = *v27;
              v27 += 3;
            }
            while (v22 < v31);
          }
          BOOL v6 = v25 + 24 >= (unint64_t)i;
          BOOL v7 = v25 + 24 == (void)i;
          if ((char *)(v25 + 24) != i)
          {
            long long v32 = *(_OWORD *)v25;
            *((_DWORD *)i - 2) = *(_DWORD *)(v25 + 16);
            *(_OWORD *)uint64_t v21 = v32;
          }
          a6 = 0;
          *(void *)unint64_t v25 = v22;
          *(void *)(v25 + 8) = v99;
          *(_DWORD *)(v25 + 16) = DWORD2(v99);
        }
        unint64_t v22 = *(void *)v21;
LABEL_30:
        uint64_t v33 = 0;
        long long v100 = *((_OWORD *)i - 1);
        do
        {
          unint64_t v34 = *(void *)&i[v33 - 48];
          v33 -= 24;
        }
        while (v34 < v22);
        long long v35 = &i[v33];
        long long v36 = (char *)a4;
        if (v33 == -24)
        {
          long long v36 = (char *)a4;
          do
          {
            if (v35 <= v36) {
              break;
            }
            unint64_t v38 = *(void *)v36;
            v36 += 24;
          }
          while (v38 >= v22);
        }
        else
        {
          do
          {
            unint64_t v37 = *(void *)v36;
            v36 += 24;
          }
          while (v37 >= v22);
        }
        unint64_t v12 = (unint64_t)&i[v33];
        if (v35 > v36)
        {
          BOOL v39 = v36;
          do
          {
            uint64_t v116 = *(void *)(v12 - 8);
            long long v104 = *(_OWORD *)(v12 - 24);
            long long v40 = *(_OWORD *)(v39 - 24);
            *(_DWORD *)(v12 - 8) = *((_DWORD *)v39 - 2);
            *(_OWORD *)(v12 - 24) = v40;
            *((_DWORD *)v39 - 2) = v116;
            *(_OWORD *)(v39 - 24) = v104;
            do
            {
              unint64_t v41 = *(void *)(v12 - 48);
              v12 -= 24;
            }
            while (v41 < v22);
            do
            {
              unint64_t v42 = *(void *)v39;
              v39 += 24;
            }
            while (v42 >= v22);
          }
          while (v12 > (unint64_t)v39);
        }
        if ((char *)(v12 + 24) != i)
        {
          long long v43 = *(_OWORD *)v12;
          *((_DWORD *)i - 2) = *(_DWORD *)(v12 + 16);
          *(_OWORD *)uint64_t v21 = v43;
        }
        *(void *)unint64_t v12 = v22;
        *(void *)(v12 + 8) = v100;
        *(_DWORD *)(v12 + 16) = DWORD2(v100);
        if (v35 > v36)
        {
LABEL_49:
          sub_1CC7E86E4(v13, i, v12 + 24, v12 + 24, a5, a6 & 1);
          a6 = 0;
          a1 = v12 + 24;
          continue;
        }
        break;
      }
      BOOL v44 = sub_1CC7E9198(v13, (uint64_t)i, v12 + 24, v12 + 24);
      if (!sub_1CC7E9198(v12, v12, a3, a4))
      {
        a1 = v12 + 24;
        if (v44) {
          continue;
        }
        goto LABEL_49;
      }
      break;
    }
    a3 = v12 + 24;
    a4 = v12 + 24;
    a1 = v98;
  }
  while (!v44);
}

void sub_1CC7E90A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8 = *(void *)(a4 - 24);
  BOOL v6 = (long long *)(a4 - 24);
  unint64_t v7 = v8;
  unint64_t v11 = *(void *)(a2 - 24);
  uint64_t v9 = (long long *)(a2 - 24);
  unint64_t v10 = v11;
  unint64_t v14 = *(void *)(a6 - 24);
  unint64_t v12 = (long long *)(a6 - 24);
  unint64_t v13 = v14;
  if (v7 >= v10)
  {
    if (v13 < v7)
    {
      long long v18 = *v6;
      uint64_t v19 = *((void *)v6 + 2);
      int v20 = *((_DWORD *)v12 + 4);
      long long *v6 = *v12;
      *((_DWORD *)v6 + 4) = v20;
      *((_DWORD *)v12 + 4) = v19;
      long long *v12 = v18;
      if (*(void *)v6 < *(void *)v9)
      {
        long long v21 = *v9;
        uint64_t v22 = *((void *)v9 + 2);
        int v23 = *((_DWORD *)v6 + 4);
        *uint64_t v9 = *v6;
        *((_DWORD *)v9 + 4) = v23;
        *((_DWORD *)v6 + 4) = v22;
        long long *v6 = v21;
      }
    }
  }
  else
  {
    if (v13 >= v7)
    {
      long long v24 = *v9;
      uint64_t v25 = *((void *)v9 + 2);
      int v26 = *((_DWORD *)v6 + 4);
      *uint64_t v9 = *v6;
      *((_DWORD *)v9 + 4) = v26;
      *((_DWORD *)v6 + 4) = v25;
      long long *v6 = v24;
      if (*(void *)v12 >= *(void *)v6) {
        return;
      }
      long long v15 = *v6;
      uint64_t v16 = *((void *)v6 + 2);
      int v27 = *((_DWORD *)v12 + 4);
      long long *v6 = *v12;
      *((_DWORD *)v6 + 4) = v27;
    }
    else
    {
      long long v15 = *v9;
      uint64_t v16 = *((void *)v9 + 2);
      int v17 = *((_DWORD *)v12 + 4);
      *uint64_t v9 = *v12;
      *((_DWORD *)v9 + 4) = v17;
    }
    *((_DWORD *)v12 + 4) = v16;
    long long *v12 = v15;
  }
}

BOOL sub_1CC7E9198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - a4) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v8 = (long long *)(a2 - 24);
      if (*(void *)a4 < *(void *)(a2 - 24))
      {
        long long v9 = *v8;
        uint64_t v10 = *(void *)(a2 - 8);
        int v11 = *(_DWORD *)(a4 + 16);
        *unint64_t v8 = *(_OWORD *)a4;
        *(_DWORD *)(a2 - 8) = v11;
        *(_DWORD *)(a4 + 16) = v10;
        *(_OWORD *)a4 = v9;
      }
      return result;
    case 3uLL:
      sub_1CC7E90A8(a1, a2, a2 - 24, a2 - 24, a3, a4 + 24);
      return 1;
    case 4uLL:
      sub_1CC7E9474(a1, a2, a2 - 24, a2 - 24, a2 - 48, a2 - 48, a3, a4 + 24);
      return 1;
    case 5uLL:
      uint64_t v22 = a2 - 24;
      uint64_t v23 = a2 - 48;
      uint64_t v24 = a2 - 72;
      sub_1CC7E9474(a1, a2, a2 - 24, a2 - 24, a2 - 48, a2 - 48, a2 - 72, a2 - 72);
      unint64_t v26 = *(void *)(a2 - 96);
      uint64_t v25 = a2 - 96;
      if (*(void *)a4 < v26)
      {
        long long v27 = *(_OWORD *)v25;
        uint64_t v28 = *(void *)(v25 + 16);
        int v29 = *(_DWORD *)(a4 + 16);
        *(_OWORD *)uint64_t v25 = *(_OWORD *)a4;
        *(_DWORD *)(v25 + 16) = v29;
        *(_DWORD *)(a4 + 16) = v28;
        *(_OWORD *)a4 = v27;
        if (*(void *)v25 < *(void *)v24)
        {
          uint64_t v30 = *(void *)(v24 + 16);
          long long v31 = *(_OWORD *)v24;
          *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
          *(_DWORD *)(v24 + 16) = *(_DWORD *)(v25 + 16);
          *(_OWORD *)uint64_t v25 = v31;
          *(_DWORD *)(v25 + 16) = v30;
          if (*(void *)v24 < *(void *)v23)
          {
            uint64_t v32 = *(void *)(v23 + 16);
            long long v33 = *(_OWORD *)v23;
            *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
            *(_DWORD *)(v23 + 16) = *(_DWORD *)(v24 + 16);
            *(_OWORD *)uint64_t v24 = v33;
            *(_DWORD *)(v24 + 16) = v32;
            if (*(void *)v23 < *(void *)v22)
            {
              uint64_t v34 = *(void *)(v22 + 16);
              long long v35 = *(_OWORD *)v22;
              *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
              *(_DWORD *)(v22 + 16) = *(_DWORD *)(v23 + 16);
              *(_OWORD *)uint64_t v23 = v35;
              *(_DWORD *)(v23 + 16) = v34;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v12 = a2 - 48;
      sub_1CC7E90A8(a1, a2, a2 - 24, a2 - 24, a2 - 48, a2 - 48);
      uint64_t v13 = a2 - 72;
      if (a2 - 72 == a4) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      uint64_t v16 = a2 - 72;
      break;
  }
  while (1)
  {
    unint64_t v18 = *(void *)(v16 - 24);
    v16 -= 24;
    unint64_t v17 = v18;
    if (v18 < *(void *)(v12 - 24))
    {
      long long v36 = *(_OWORD *)(v13 - 16);
      uint64_t v19 = v14;
      while (1)
      {
        uint64_t v20 = a2 + v19;
        *(_OWORD *)(v20 - 96) = *(_OWORD *)(a2 + v19 - 72);
        *(_DWORD *)(v20 - 80) = *(_DWORD *)(a2 + v19 - 56);
        if (v19 == 48) {
          break;
        }
        v19 += 24;
        if (v17 >= *(void *)(v20 - 48))
        {
          uint64_t v21 = a2 + v19 - 72;
          goto LABEL_13;
        }
      }
      uint64_t v21 = a2;
LABEL_13:
      *(void *)(v20 - 72) = v17;
      *(void *)(v21 - 16) = v36;
      *(_DWORD *)(v21 - 8) = DWORD2(v36);
      if (++v15 == 8) {
        return v16 == a4;
      }
    }
    v14 -= 24;
    uint64_t v12 = v13;
    uint64_t v13 = v16;
    if (v16 == a4) {
      return 1;
    }
  }
}

__n128 sub_1CC7E9474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1CC7E90A8(a1, a2, a3, a4, a5, a6);
  unint64_t v15 = *(void *)(a8 - 24);
  uint64_t v14 = (__n128 *)(a8 - 24);
  unint64_t v13 = v15;
  unint64_t v17 = *(void *)(a6 - 24);
  uint64_t v16 = (__n128 *)(a6 - 24);
  if (v13 < v17)
  {
    __n128 result = *v16;
    unint64_t v18 = v16[1].n128_u64[0];
    unsigned __int32 v19 = v14[1].n128_u32[0];
    *uint64_t v16 = *v14;
    v16[1].n128_u32[0] = v19;
    v14[1].n128_u32[0] = v18;
    __n128 *v14 = result;
    unint64_t v21 = *(void *)(a4 - 24);
    uint64_t v20 = (__n128 *)(a4 - 24);
    if (v16->n128_u64[0] < v21)
    {
      __n128 result = *v20;
      unint64_t v22 = v20[1].n128_u64[0];
      unsigned __int32 v23 = v16[1].n128_u32[0];
      *uint64_t v20 = *v16;
      v20[1].n128_u32[0] = v23;
      v16[1].n128_u32[0] = v22;
      *uint64_t v16 = result;
      unint64_t v25 = *(void *)(a2 - 24);
      uint64_t v24 = (__n128 *)(a2 - 24);
      if (v20->n128_u64[0] < v25)
      {
        __n128 result = *v24;
        unint64_t v26 = v24[1].n128_u64[0];
        unsigned __int32 v27 = v20[1].n128_u32[0];
        *uint64_t v24 = *v20;
        v24[1].n128_u32[0] = v27;
        v20[1].n128_u32[0] = v26;
        *uint64_t v20 = result;
      }
    }
  }
  return result;
}

void sub_1CC7E9544(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_1CC7E999C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1CC7EB3AC(a1, a2, a3, a4, a6);
  unsigned int v12 = *(_DWORD *)(a5 + 1120);
  unsigned int v13 = *(_DWORD *)(a4 + 1120);
  if ((*(_DWORD *)(*(void *)a6 + 40) & 0xFFFFFFFE) == 0x1C)
  {
    if (v12 <= v13) {
      return;
    }
  }
  else if (v12 >= v13)
  {
    return;
  }
  sub_1CC7EB1E0((uint64_t *)a4, (uint64_t *)a5);
  unsigned int v14 = *(_DWORD *)(a4 + 1120);
  unsigned int v15 = *(_DWORD *)(a3 + 1120);
  if ((*(_DWORD *)(*(void *)a6 + 40) & 0xFFFFFFFE) == 0x1C)
  {
    if (v14 <= v15) {
      return;
    }
  }
  else if (v14 >= v15)
  {
    return;
  }
  sub_1CC7EB1E0((uint64_t *)a3, (uint64_t *)a4);
  unsigned int v16 = *(_DWORD *)(a3 + 1120);
  unsigned int v17 = *(_DWORD *)(a2 + 1120);
  if ((*(_DWORD *)(*(void *)a6 + 40) & 0xFFFFFFFE) == 0x1C)
  {
    if (v16 <= v17) {
      return;
    }
  }
  else if (v16 >= v17)
  {
    return;
  }
  sub_1CC7EB1E0((uint64_t *)a2, (uint64_t *)a3);
  unsigned int v18 = *(_DWORD *)(a2 + 1120);
  unsigned int v19 = *(_DWORD *)(a1 + 1120);
  if ((*(_DWORD *)(*(void *)a6 + 40) & 0xFFFFFFFE) == 0x1C)
  {
    if (v18 <= v19) {
      return;
    }
  }
  else if (v18 >= v19)
  {
    return;
  }

  sub_1CC7EB1E0((uint64_t *)a1, (uint64_t *)a2);
}

void sub_1CC7E9AF4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a1 == a2) {
    return;
  }
  uint64_t v4 = a1 + 141;
  if (a1 + 141 == a2) {
    return;
  }
  uint64_t v6 = 0;
  unint64_t v7 = a1;
  unsigned int v18 = a2;
  do
  {
    unint64_t v8 = v7;
    unint64_t v7 = v4;
    unsigned int v9 = *((_DWORD *)v8 + 562);
    unsigned int v10 = *((_DWORD *)v8 + 280);
    if ((*(_DWORD *)(*(void *)a3 + 40) & 0xFFFFFFFE) == 0x1C)
    {
      if (v9 <= v10) {
        goto LABEL_29;
      }
    }
    else if (v9 >= v10)
    {
      goto LABEL_29;
    }
    uint64_t v19 = *v7;
    v20[0] = v21;
    v20[1] = (void *)0x2000000000;
    if (*((_DWORD *)v8 + 286)) {
      sub_1CBC19ED8((uint64_t)v20, (uint64_t)(v8 + 142));
    }
    unsigned int v22 = v26;
    unint64_t v11 = (const void *)v8[273];
    unsigned int v12 = (const void *)v8[272];
    if (v11 == v12)
    {
      unsigned int v23 = v26;
      uint64_t v13 = *((unsigned int *)v8 + 549);
      if (v13) {
        memmove(v26, v11, 8 * v13);
      }
    }
    else
    {
      unsigned int v23 = (void *)v8[273];
      v8[273] = v12;
    }
    uint64_t v24 = v8[274];
    int v25 = *((_DWORD *)v8 + 550);
    v8[274] = 4;
    *((_DWORD *)v8 + 550) = 0;
    *(void *)unsigned int v27 = v8[280];
    *(void *)&v27[7] = *(void *)((char *)v8 + 2247);
    for (uint64_t i = v6; ; i -= 1128)
    {
      unsigned int v15 = (char *)a1 + i;
      *(void *)((char *)a1 + i + 1128) = *(void *)((char *)a1 + i);
      sub_1CBC19ED8((uint64_t)a1 + i + 1136, (uint64_t)a1 + i + 8);
      llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v15 + 2176), 4, (double *)v15 + 131);
      *((void *)v15 + 280) = *((void *)v15 + 139);
      *(void *)(v15 + 2247) = *(void *)(v15 + 1119);
      if (!i)
      {
        unsigned int v17 = a1;
        goto LABEL_22;
      }
      unsigned int v16 = *((_DWORD *)v15 - 2);
      if ((*(_DWORD *)(*(void *)a3 + 40) & 0xFFFFFFFE) != 0x1C) {
        break;
      }
      if (*(_DWORD *)&v27[8] <= v16) {
        goto LABEL_21;
      }
LABEL_19:
      ;
    }
    if (*(_DWORD *)&v27[8] < v16) {
      goto LABEL_19;
    }
LABEL_21:
    unsigned int v17 = (void *)((char *)a1 + i);
LABEL_22:
    *unsigned int v17 = v19;
    sub_1CBC19ED8((uint64_t)a1 + i + 8, (uint64_t)v20);
    if (&v19 != v17) {
      llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v17 + 131), 4, (double *)&v22);
    }
    *(void *)((char *)a1 + i + 1112) = *(void *)v27;
    *(void *)((char *)a1 + i + 1119) = *(void *)&v27[7];
    if (v23 != v22) {
      free(v23);
    }
    if (v20[0] != v21) {
      free(v20[0]);
    }
    a2 = v18;
LABEL_29:
    uint64_t v4 = v7 + 141;
    v6 += 1128;
  }
  while (v7 + 141 != a2);
}

void sub_1CC7E9D8C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a1 == a2) {
    return;
  }
  uint64_t v3 = a1;
  uint64_t v4 = a1 + 141;
  if (a1 + 141 == a2) {
    return;
  }
  uint64_t v6 = a1 + 280;
  unsigned int v16 = a2;
  do
  {
    unint64_t v7 = v3;
    uint64_t v3 = v4;
    unsigned int v8 = *((_DWORD *)v7 + 562);
    unsigned int v9 = *((_DWORD *)v7 + 280);
    if ((*(_DWORD *)(*(void *)a3 + 40) & 0xFFFFFFFE) == 0x1C)
    {
      if (v8 <= v9) {
        goto LABEL_26;
      }
    }
    else if (v8 >= v9)
    {
      goto LABEL_26;
    }
    uint64_t v17 = *v3;
    v18[0] = v19;
    v18[1] = (void *)0x2000000000;
    if (*((_DWORD *)v7 + 286)) {
      sub_1CBC19ED8((uint64_t)v18, (uint64_t)(v7 + 142));
    }
    uint64_t v20 = v24;
    unsigned int v10 = (const void *)v7[273];
    unint64_t v11 = (const void *)v7[272];
    if (v10 == v11)
    {
      uint64_t v21 = v24;
      uint64_t v12 = *((unsigned int *)v7 + 549);
      if (v12) {
        memmove(v24, v10, 8 * v12);
      }
    }
    else
    {
      uint64_t v21 = (void *)v7[273];
      v7[273] = v11;
    }
    uint64_t v22 = v7[274];
    int v23 = *((_DWORD *)v7 + 550);
    v7[274] = 4;
    *((_DWORD *)v7 + 550) = 0;
    *(void *)int v25 = v7[280];
    *(void *)&v25[7] = *(void *)((char *)v7 + 2247);
    for (uint64_t i = v6; ; i -= 141)
    {
      unsigned int v14 = i - 280;
      *(i - 139) = *(i - 280);
      sub_1CBC19ED8((uint64_t)(i - 138), (uint64_t)(i - 279));
      llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(i - 8), 4, (double *)i - 149);
      *(void *)((char *)i + 7) = *(void *)((char *)i - 1121);
      *uint64_t i = *(i - 141);
      unsigned int v15 = *((_DWORD *)i - 562);
      if ((*(_DWORD *)(*(void *)a3 + 40) & 0xFFFFFFFE) != 0x1C) {
        break;
      }
      if (*(_DWORD *)&v25[8] <= v15) {
        goto LABEL_19;
      }
LABEL_18:
      ;
    }
    if (*(_DWORD *)&v25[8] < v15) {
      goto LABEL_18;
    }
LABEL_19:
    uint64_t *v14 = v17;
    sub_1CBC19ED8((uint64_t)(i - 279), (uint64_t)v18);
    if (v14 != &v17) {
      llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(i - 149), 4, (double *)&v20);
    }
    *(i - 141) = *(void *)v25;
    *(void *)((char *)i - 1121) = *(void *)&v25[7];
    if (v21 != v20) {
      free(v21);
    }
    if (v18[0] != v19) {
      free(v18[0]);
    }
    a2 = v16;
LABEL_26:
    uint64_t v4 = v3 + 141;
    v6 += 141;
  }
  while (v3 + 141 != a2);
}

void sub_1CC7EA018(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 1128;
    if ((uint64_t)a2 - a1 >= 1129)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t *)(a1 + 1128 * v10);
      do
      {
        sub_1CC7EB4C4(a1, a4, v9, v12);
        v12 -= 141;
        --v11;
      }
      while (v11);
    }
    if (v6 != a3)
    {
      uint64_t v13 = v6;
      while (1)
      {
        unsigned int v14 = *((_DWORD *)v13 + 280);
        unsigned int v15 = *(_DWORD *)(a1 + 1120);
        if ((*(_DWORD *)(*(void *)a4 + 40) & 0xFFFFFFFE) == 0x1C) {
          break;
        }
        if (v14 < v15) {
          goto LABEL_11;
        }
LABEL_12:
        v13 += 141;
        if (v13 == a3) {
          goto LABEL_13;
        }
      }
      if (v14 <= v15) {
        goto LABEL_12;
      }
LABEL_11:
      sub_1CC7EB1E0(v13, (uint64_t *)a1);
      sub_1CC7EB4C4(a1, a4, v9, (uint64_t *)a1);
      goto LABEL_12;
    }
LABEL_13:
    if (v8 >= 1129)
    {
      do
      {
        uint64_t v50 = *(void *)a1;
        v51[0] = v52;
        v51[1] = (void *)0x2000000000;
        if (*(_DWORD *)(a1 + 16)) {
          sub_1CBC19ED8((uint64_t)v51, a1 + 8);
        }
        long long v53 = v58;
        unsigned int v16 = *(const void **)(a1 + 1056);
        uint64_t v17 = *(const void **)(a1 + 1048);
        long long v48 = v6;
        if (v16 == v17)
        {
          long long v54 = v58;
          uint64_t v18 = *(unsigned int *)(a1 + 1068);
          if (v18) {
            memmove(v58, v16, 8 * v18);
          }
        }
        else
        {
          long long v54 = *(void **)(a1 + 1056);
          *(void *)(a1 + 1056) = v17;
          LODWORD(v18) = *(_DWORD *)(a1 + 1068);
        }
        uint64_t v19 = 0;
        int v55 = *(_DWORD *)(a1 + 1064);
        int v56 = v18;
        int v57 = *(_DWORD *)(a1 + 1072);
        *(void *)(a1 + 1064) = 4;
        v59[0] = *(void *)(a1 + 1112);
        *(void *)((char *)v59 + 7) = *(void *)(a1 + 1119);
        uint64_t v20 = (uint64_t *)a1;
        *(_DWORD *)(a1 + 1072) = 0;
        do
        {
          uint64_t v21 = v19 + 1;
          uint64_t v22 = &v20[141 * v19 + 141];
          uint64_t v23 = 2 * v19;
          uint64_t v19 = (2 * v19) | 1;
          if (v23 + 2 < v9)
          {
            unsigned int v24 = v20[141 * v21 + 140];
            unsigned int v25 = *((_DWORD *)v22 + 562);
            BOOL v26 = v24 >= v25;
            BOOL v27 = v24 > v25;
            int v28 = !v26;
            if ((*(_DWORD *)(*(void *)a4 + 40) & 0xFFFFFFFE) != 0x1C) {
              BOOL v27 = v28;
            }
            v22 += 141 * v27;
            if (v27) {
              uint64_t v19 = v23 + 2;
            }
          }
          *uint64_t v20 = *v22;
          sub_1CBC19ED8((uint64_t)(v20 + 1), (uint64_t)(v22 + 1));
          if (v22 != v20) {
            llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v20 + 131), 4, (double *)v22 + 131);
          }
          int v29 = v22 + 139;
          uint64_t v30 = v22[139];
          *(uint64_t *)((char *)v20 + 1119) = *(uint64_t *)((char *)v22 + 1119);
          v20[139] = v30;
          uint64_t v20 = v22;
        }
        while (v19 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
        v6 -= 141;
        if (v22 == v48 - 141)
        {
          *uint64_t v22 = v50;
          sub_1CBC19ED8((uint64_t)(v22 + 1), (uint64_t)v51);
          if (&v50 != v22) {
            llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v22 + 131), 4, (double *)&v53);
          }
          uint64_t v37 = v59[0];
          *(uint64_t *)((char *)v22 + 1119) = *(void *)((char *)v59 + 7);
          uint64_t *v29 = v37;
        }
        else
        {
          *uint64_t v22 = *v6;
          sub_1CBC19ED8((uint64_t)(v22 + 1), (uint64_t)(v48 - 140));
          uint64_t v47 = (uint64_t)(v48 - 10);
          llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v22 + 131), 4, (double *)v48 - 10);
          uint64_t v32 = *(v48 - 2);
          long long v31 = v48 - 2;
          *(uint64_t *)((char *)v22 + 1119) = *(uint64_t *)((char *)v48 - 9);
          uint64_t *v29 = v32;
          uint64_t *v6 = v50;
          sub_1CBC19ED8((uint64_t)(v48 - 140), (uint64_t)v51);
          uint64_t v49 = v48 - 141;
          if (&v50 != v6) {
            llvm::SmallPtrSetImplBase::MoveFrom(v47, 4, (double *)&v53);
          }
          *long long v31 = v59[0];
          *(uint64_t *)((char *)v31 + 7) = *(void *)((char *)v59 + 7);
          uint64_t v33 = (uint64_t)v22 - a1 + 1128;
          if (v33 >= 1129)
          {
            unint64_t v34 = (v33 / 0x468uLL - 2) >> 1;
            unsigned int v35 = *(_DWORD *)(a1 + 1128 * v34 + 1120);
            unsigned int v36 = *((_DWORD *)v22 + 280);
            if ((*(_DWORD *)(*(void *)a4 + 40) & 0xFFFFFFFE) == 0x1C)
            {
              if (v35 > v36) {
                goto LABEL_42;
              }
            }
            else if (v35 < v36)
            {
LABEL_42:
              uint64_t v60 = *v22;
              v61[0] = v62;
              v61[1] = (void *)0x2000000000;
              if (*((_DWORD *)v22 + 4)) {
                sub_1CBC19ED8((uint64_t)v61, (uint64_t)(v22 + 1));
              }
              int64_t v63 = v67;
              uint64_t v38 = v22[131];
              if (v22[132] == v38)
              {
                int64_t v64 = v67;
                uint64_t v39 = *((unsigned int *)v22 + 267);
                if (v39) {
                  memmove(v67, (const void *)v22[132], 8 * v39);
                }
              }
              else
              {
                int64_t v64 = (void *)v22[132];
                v22[132] = v38;
              }
              uint64_t v65 = v22[133];
              int v66 = *((_DWORD *)v22 + 268);
              v22[133] = 4;
              *((_DWORD *)v22 + 268) = 0;
              uint64_t v40 = *v29;
              *(void *)&v68[7] = *(uint64_t *)((char *)v22 + 1119);
              *(void *)uint64_t v68 = v40;
              while (1)
              {
                unint64_t v41 = v34;
                unint64_t v42 = (uint64_t *)(a1 + 1128 * v34);
                *uint64_t v22 = *v42;
                sub_1CBC19ED8((uint64_t)(v22 + 1), (uint64_t)(v42 + 1));
                if (v42 != v22) {
                  llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v22 + 131), 4, (double *)(a1 + 1128 * v34 + 1048));
                }
                long long v43 = (uint64_t *)(a1 + 1128 * v34 + 1112);
                uint64_t v44 = *v43;
                *(uint64_t *)((char *)v22 + 1119) = *(void *)(a1 + 1128 * v34 + 1119);
                v22[139] = v44;
                if (!v34) {
                  break;
                }
                unint64_t v34 = (v34 - 1) >> 1;
                unsigned int v45 = *(_DWORD *)(a1 + 1128 * v34 + 1120);
                uint64_t v22 = v42;
                if ((*(_DWORD *)(*(void *)a4 + 40) & 0xFFFFFFFE) == 0x1C)
                {
                  if (v45 <= *(_DWORD *)&v68[8]) {
                    break;
                  }
                }
                else if (v45 >= *(_DWORD *)&v68[8])
                {
                  break;
                }
              }
              uint64_t *v42 = v60;
              sub_1CBC19ED8((uint64_t)(v42 + 1), (uint64_t)v61);
              if (&v60 != v42) {
                llvm::SmallPtrSetImplBase::MoveFrom(a1 + 1128 * v41 + 1048, 4, (double *)&v63);
              }
              uint64_t *v43 = *(void *)v68;
              *(void *)(a1 + 1128 * v41 + 1119) = *(void *)&v68[7];
              if (v64 != v63) {
                free(v64);
              }
              uint64_t v6 = v49;
              if (v61[0] != v62) {
                free(v61[0]);
              }
            }
          }
        }
        if (v54 != v53) {
          free(v54);
        }
        if (v51[0] != v52) {
          free(v51[0]);
        }
      }
      while (v9-- > 2);
    }
  }
}

void sub_1CC7EA654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  unsigned int v8 = *(_DWORD *)(a2 + 1120);
  unsigned int v9 = *(_DWORD *)(a1 + 1120);
  unsigned int v10 = *(_DWORD *)(a3 + 1120);
  if ((*(_DWORD *)(*(void *)a4 + 40) & 0xFFFFFFFE) == 0x1C)
  {
    if (v8 > v9)
    {
      if (v10 <= v8)
      {
LABEL_4:
        sub_1CC7EB1E0((uint64_t *)a1, (uint64_t *)a2);
        unsigned int v11 = *(_DWORD *)(a3 + 1120);
        unsigned int v12 = *(_DWORD *)(a2 + 1120);
        if ((*(_DWORD *)(*(void *)a4 + 40) & 0xFFFFFFFE) == 0x1C)
        {
          if (v11 <= v12) {
            return;
          }
        }
        else if (v11 >= v12)
        {
          return;
        }
        a1 = a2;
      }
LABEL_18:
      unsigned int v15 = (uint64_t *)a3;
      goto LABEL_21;
    }
    if (v10 <= v8) {
      return;
    }
  }
  else
  {
    if (v8 < v9)
    {
      if (v10 >= v8) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
    if (v10 >= v8) {
      return;
    }
  }
  sub_1CC7EB1E0((uint64_t *)a2, (uint64_t *)a3);
  unsigned int v13 = *(_DWORD *)(a2 + 1120);
  unsigned int v14 = *(_DWORD *)(v7 + 1120);
  if ((*(_DWORD *)(*(void *)a4 + 40) & 0xFFFFFFFE) == 0x1C)
  {
    if (v13 <= v14) {
      return;
    }
  }
  else if (v13 >= v14)
  {
    return;
  }
  a1 = v7;
  unsigned int v15 = (uint64_t *)a2;
LABEL_21:

  sub_1CC7EB1E0((uint64_t *)a1, v15);
}

unint64_t sub_1CC7EA790(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = *a1;
  v26[0] = v27;
  v26[1] = (void *)0x2000000000;
  if (*((_DWORD *)a1 + 4)) {
    sub_1CBC19ED8((uint64_t)v26, (uint64_t)(a1 + 1));
  }
  int v28 = v33;
  uint64_t v6 = (const void *)a1[132];
  uint64_t v7 = (const void *)a1[131];
  if (v6 == v7)
  {
    int v29 = v33;
    uint64_t v8 = *((unsigned int *)a1 + 267);
    if (v8) {
      memmove(v33, v6, 8 * v8);
    }
  }
  else
  {
    int v29 = (void *)a1[132];
    a1[132] = (uint64_t)v7;
    LODWORD(v8) = *((_DWORD *)a1 + 267);
  }
  int v30 = *((_DWORD *)a1 + 266);
  int v31 = v8;
  int v32 = *((_DWORD *)a1 + 268);
  a1[133] = 4;
  *((_DWORD *)a1 + 268) = 0;
  *(void *)&v34[7] = *(uint64_t *)((char *)a1 + 1119);
  *(void *)unint64_t v34 = a1[139];
  unsigned int v9 = *(_DWORD *)(*(void *)a3 + 40) & 0xFFFFFFFE;
  unsigned int v10 = *((_DWORD *)a2 - 2);
  if (v9 == 28)
  {
    if (*(_DWORD *)&v34[8] <= v10) {
      goto LABEL_8;
    }
LABEL_16:
    unint64_t v13 = (unint64_t)(a1 + 141);
    do
    {
      while (1)
      {
        unint64_t i = v13;
        unsigned int v14 = *(_DWORD *)(v13 + 1120);
        v13 += 1128;
        if (v9 != 28) {
          break;
        }
        if (*(_DWORD *)&v34[8] > v14) {
          goto LABEL_21;
        }
      }
    }
    while (*(_DWORD *)&v34[8] >= v14);
    goto LABEL_21;
  }
  if (*(_DWORD *)&v34[8] < v10) {
    goto LABEL_16;
  }
LABEL_8:
  for (unint64_t i = (unint64_t)(a1 + 141); i < (unint64_t)a2; i += 1128)
  {
    unsigned int v12 = *(_DWORD *)(i + 1120);
    if (v9 == 28)
    {
      if (*(_DWORD *)&v34[8] > v12) {
        break;
      }
    }
    else if (*(_DWORD *)&v34[8] < v12)
    {
      break;
    }
  }
LABEL_21:
  if (i >= (unint64_t)a2) {
    goto LABEL_39;
  }
  unsigned int v15 = a2 - 142;
  while (v9 == 28)
  {
    if (*(_DWORD *)&v34[8] <= v10) {
      goto LABEL_28;
    }
LABEL_27:
    unsigned int v10 = *(_DWORD *)v15;
    v15 -= 141;
  }
  if (*(_DWORD *)&v34[8] < v10) {
    goto LABEL_27;
  }
LABEL_28:
  a2 = v15 + 1;
LABEL_39:
  while (i < (unint64_t)a2)
  {
    sub_1CC7EB1E0((uint64_t *)i, a2);
    unsigned int v16 = *(_DWORD *)(*(void *)a3 + 40) & 0xFFFFFFFE;
    unint64_t v17 = i + 1128;
    do
    {
      while (1)
      {
        unint64_t i = v17;
        unsigned int v18 = *(_DWORD *)(v17 + 1120);
        v17 += 1128;
        if (v16 != 28) {
          break;
        }
        if (*(_DWORD *)&v34[8] > v18) {
          goto LABEL_34;
        }
      }
    }
    while (*(_DWORD *)&v34[8] >= v18);
LABEL_34:
    uint64_t v19 = a2 - 141;
    do
    {
      while (1)
      {
        a2 = v19;
        unsigned int v20 = *((_DWORD *)v19 + 280);
        v19 -= 141;
        if (v16 != 28) {
          break;
        }
        if (*(_DWORD *)&v34[8] <= v20) {
          goto LABEL_39;
        }
      }
    }
    while (*(_DWORD *)&v34[8] < v20);
  }
  uint64_t v21 = (uint64_t *)(i - 1128);
  if ((uint64_t *)(i - 1128) != a1)
  {
    *a1 = *v21;
    sub_1CBC19ED8((uint64_t)(a1 + 1), i - 1120);
    llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(a1 + 131), 4, (double *)(i - 80));
    uint64_t v22 = *(void *)(i - 16);
    *(uint64_t *)((char *)a1 + 1119) = *(void *)(i - 9);
    a1[139] = v22;
  }
  uint64_t *v21 = v25;
  sub_1CBC19ED8(i - 1120, (uint64_t)v26);
  if (&v25 != v21) {
    llvm::SmallPtrSetImplBase::MoveFrom(i - 80, 4, (double *)&v28);
  }
  uint64_t v23 = *(void *)v34;
  *(void *)(i - 9) = *(void *)&v34[7];
  *(void *)(i - 16) = v23;
  if (v29 != v28) {
    free(v29);
  }
  if (v26[0] != v27) {
    free(v26[0]);
  }
  return i;
}

uint64_t *sub_1CC7EAAAC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v30 = *(void *)a1;
  v31[0] = v32;
  v31[1] = (void *)0x2000000000;
  if (*(_DWORD *)(a1 + 16)) {
    sub_1CBC19ED8((uint64_t)v31, a1 + 8);
  }
  uint64_t v33 = v38;
  uint64_t v6 = *(const void **)(a1 + 1056);
  uint64_t v7 = *(const void **)(a1 + 1048);
  if (v6 == v7)
  {
    unint64_t v34 = v38;
    uint64_t v8 = *(unsigned int *)(a1 + 1068);
    if (v8) {
      memmove(v38, v6, 8 * v8);
    }
  }
  else
  {
    unint64_t v34 = *(void **)(a1 + 1056);
    *(void *)(a1 + 1056) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 1068);
  }
  uint64_t v9 = 0;
  int v35 = *(_DWORD *)(a1 + 1064);
  int v36 = v8;
  int v37 = *(_DWORD *)(a1 + 1072);
  *(void *)(a1 + 1064) = 4;
  *(_DWORD *)(a1 + 1072) = 0;
  *(void *)&v39[7] = *(void *)(a1 + 1119);
  *(void *)uint64_t v39 = *(void *)(a1 + 1112);
  unsigned int v10 = *(_DWORD *)(*(void *)a3 + 40) & 0xFFFFFFFE;
  while (1)
  {
    unsigned int v11 = *(_DWORD *)(a1 + v9 + 2248);
    if (v10 != 28) {
      break;
    }
    if (v11 <= *(_DWORD *)&v39[8]) {
      goto LABEL_12;
    }
LABEL_11:
    v9 += 1128;
  }
  if (v11 < *(_DWORD *)&v39[8]) {
    goto LABEL_11;
  }
LABEL_12:
  unint64_t v12 = a1 + v9 + 1128;
  if (v9)
  {
    unint64_t v13 = a2 - 141;
    do
    {
      while (1)
      {
        a2 = v13;
        unsigned int v14 = *((_DWORD *)v13 + 280);
        v13 -= 141;
        if (v10 != 28) {
          break;
        }
        if (v14 > *(_DWORD *)&v39[8]) {
          goto LABEL_33;
        }
      }
    }
    while (v14 >= *(_DWORD *)&v39[8]);
  }
  else if (v12 < (unint64_t)a2)
  {
    unsigned int v15 = a2 - 141;
    do
    {
      while (1)
      {
        a2 = v15;
        unsigned int v16 = *((_DWORD *)v15 + 280);
        v15 -= 141;
        if (v10 != 28) {
          break;
        }
        if (v16 > *(_DWORD *)&v39[8] || v12 >= (unint64_t)a2) {
          goto LABEL_33;
        }
      }
    }
    while (v16 >= *(_DWORD *)&v39[8] && v12 < (unint64_t)a2);
  }
LABEL_33:
  uint64_t v19 = (uint64_t *)v12;
  if (v12 < (unint64_t)a2)
  {
    unsigned int v20 = a2;
    do
    {
      sub_1CC7EB1E0(v19, v20);
      unsigned int v21 = *(_DWORD *)(*(void *)a3 + 40) & 0xFFFFFFFE;
      uint64_t v22 = v19 + 141;
      do
      {
        while (1)
        {
          uint64_t v19 = v22;
          unsigned int v23 = *((_DWORD *)v22 + 280);
          v22 += 141;
          if (v21 != 28) {
            break;
          }
          if (v23 <= *(_DWORD *)&v39[8]) {
            goto LABEL_40;
          }
        }
      }
      while (v23 < *(_DWORD *)&v39[8]);
LABEL_40:
      unsigned int v24 = v20 - 141;
      do
      {
        while (1)
        {
          unsigned int v20 = v24;
          unsigned int v25 = *((_DWORD *)v24 + 280);
          v24 -= 141;
          if (v21 != 28) {
            break;
          }
          if (v25 > *(_DWORD *)&v39[8]) {
            goto LABEL_45;
          }
        }
      }
      while (v25 >= *(_DWORD *)&v39[8]);
LABEL_45:
      ;
    }
    while (v19 < v20);
  }
  BOOL v26 = v19 - 141;
  if (v19 - 141 != (uint64_t *)a1)
  {
    *(void *)a1 = *v26;
    sub_1CBC19ED8(a1 + 8, (uint64_t)(v19 - 140));
    llvm::SmallPtrSetImplBase::MoveFrom(a1 + 1048, 4, (double *)v19 - 10);
    uint64_t v27 = *(v19 - 2);
    *(void *)(a1 + 1119) = *(uint64_t *)((char *)v19 - 9);
    *(void *)(a1 + 1112) = v27;
  }
  uint64_t *v26 = v30;
  sub_1CBC19ED8((uint64_t)(v19 - 140), (uint64_t)v31);
  if (&v30 != v26) {
    llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v19 - 10), 4, (double *)&v33);
  }
  uint64_t v28 = *(void *)v39;
  *(uint64_t *)((char *)v19 - 9) = *(void *)&v39[7];
  *(v19 - 2) = v28;
  if (v34 != v33) {
    free(v34);
  }
  if (v31[0] != v32) {
    free(v31[0]);
  }
  return v19 - 141;
}

BOOL sub_1CC7EADD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x70913F8BCD29C245 * v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v8 = *(_DWORD *)(a2 - 8);
      unsigned int v9 = *(_DWORD *)(a1 + 1120);
      if ((*(_DWORD *)(*(void *)a3 + 40) & 0xFFFFFFFE) == 0x1C)
      {
        if (v8 <= v9) {
          return result;
        }
LABEL_38:
        sub_1CC7EB1E0((uint64_t *)a1, (uint64_t *)(a2 - 1128));
        return 1;
      }
      if (v8 < v9) {
        goto LABEL_38;
      }
      return result;
    case 3:
      sub_1CC7EA654(a1, a1 + 1128, a2 - 1128, a3);
      return 1;
    case 4:
      sub_1CC7EB3AC(a1, a1 + 1128, a1 + 2256, a2 - 1128, a3);
      return 1;
    case 5:
      sub_1CC7E999C(a1, a1 + 1128, a1 + 2256, a1 + 3384, a2 - 1128, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2256;
      sub_1CC7EA654(a1, a1 + 1128, a1 + 2256, a3);
      uint64_t v11 = a1 + 3384;
      if (a1 + 3384 == v4) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      uint64_t v14 = 4432;
      uint64_t v24 = v4;
      while (2)
      {
        unsigned int v15 = *(_DWORD *)(v11 + 1120);
        unsigned int v16 = *(_DWORD *)(v10 + 1120);
        if ((*(_DWORD *)(*(void *)a3 + 40) & 0xFFFFFFFE) == 0x1C)
        {
          if (v15 <= v16) {
            goto LABEL_31;
          }
        }
        else if (v15 >= v16)
        {
          goto LABEL_31;
        }
        uint64_t v27 = *(void *)v11;
        v28[0] = v29;
        v28[1] = (void *)0x2000000000;
        if (*(_DWORD *)(v11 + 16)) {
          sub_1CBC19ED8((uint64_t)v28, v11 + 8);
        }
        uint64_t v30 = v35;
        unint64_t v17 = *(const void **)(v11 + 1056);
        unsigned int v18 = *(const void **)(v11 + 1048);
        int v25 = v13;
        if (v17 == v18)
        {
          int v31 = v35;
          uint64_t v19 = *(unsigned int *)(v11 + 1068);
          if (v19) {
            memmove(v35, v17, 8 * v19);
          }
        }
        else
        {
          int v31 = *(void **)(v11 + 1056);
          *(void *)(v11 + 1056) = v18;
          LODWORD(v19) = *(_DWORD *)(v11 + 1068);
        }
        int v32 = *(_DWORD *)(v11 + 1064);
        int v33 = v19;
        int v34 = *(_DWORD *)(v11 + 1072);
        *(void *)(v11 + 1064) = 4;
        *(_DWORD *)(v11 + 1072) = 0;
        *(void *)int v36 = *(void *)(v11 + 1112);
        *(void *)&v36[7] = *(void *)(v11 + 1119);
        uint64_t v20 = v14;
        uint64_t v26 = v12;
        while (1)
        {
          uint64_t v21 = a1 + v12;
          *(void *)(a1 + v12 + 3384) = *(void *)(a1 + v12 + 2256);
          sub_1CBC19ED8(a1 + v12 + 3392, a1 + v12 + 2264);
          llvm::SmallPtrSetImplBase::MoveFrom(a1 + v20, 4, (double *)(a1 + v12 + 3304));
          uint64_t v22 = (void *)(a1 + v12 + 3368);
          *(void *)(v21 + 4496) = *(void *)(v21 + 3368);
          *(void *)(v21 + 4503) = *(void *)(v21 + 3375);
          if (v12 == -2256) {
            break;
          }
          unsigned int v23 = *(_DWORD *)(v21 + 2248);
          if ((*(_DWORD *)(*(void *)a3 + 40) & 0xFFFFFFFE) == 0x1C)
          {
            if (*(_DWORD *)&v36[8] <= v23)
            {
              uint64_t v10 = a1 + v12 + 2256;
              goto LABEL_24;
            }
          }
          else if (*(_DWORD *)&v36[8] >= v23)
          {
            goto LABEL_24;
          }
          v10 -= 1128;
          v12 -= 1128;
          v20 -= 1128;
        }
        uint64_t v10 = a1;
LABEL_24:
        *(void *)uint64_t v10 = v27;
        sub_1CBC19ED8(a1 + v12 + 2264, (uint64_t)v28);
        uint64_t v4 = v24;
        uint64_t v12 = v26;
        if (&v27 != (uint64_t *)v10) {
          llvm::SmallPtrSetImplBase::MoveFrom(v10 + 1048, 4, (double *)&v30);
        }
        *uint64_t v22 = *(void *)v36;
        *(void *)((char *)v22 + 7) = *(void *)&v36[7];
        if (v31 != v30) {
          free(v31);
        }
        if (v28[0] != v29) {
          free(v28[0]);
        }
        int v13 = v25 + 1;
        if (v25 == 7) {
          return v11 + 1128 == v24;
        }
LABEL_31:
        uint64_t v10 = v11;
        v12 += 1128;
        v14 += 1128;
        v11 += 1128;
        if (v11 == v4) {
          return 1;
        }
        continue;
      }
  }
}

void sub_1CC7EB1E0(uint64_t *a1, uint64_t *a2)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  v9[0] = v10;
  v9[1] = (void *)0x2000000000;
  if (*((_DWORD *)a1 + 4)) {
    sub_1CBC19ED8((uint64_t)v9, (uint64_t)(a1 + 1));
  }
  uint64_t v11 = v16;
  uint64_t v4 = (const void *)a1[132];
  char v5 = (const void *)a1[131];
  if (v4 == v5)
  {
    uint64_t v12 = v16;
    uint64_t v6 = *((unsigned int *)a1 + 267);
    if (v6) {
      memmove(v16, v4, 8 * v6);
    }
  }
  else
  {
    uint64_t v12 = (void *)a1[132];
    a1[132] = (uint64_t)v5;
    LODWORD(v6) = *((_DWORD *)a1 + 267);
  }
  int v13 = *((_DWORD *)a1 + 266);
  int v14 = v6;
  int v15 = *((_DWORD *)a1 + 268);
  a1[133] = 4;
  *((_DWORD *)a1 + 268) = 0;
  *(void *)((char *)v17 + 7) = *(uint64_t *)((char *)a1 + 1119);
  v17[0] = a1[139];
  *a1 = *a2;
  sub_1CBC19ED8((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  if (a2 != a1) {
    llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(a1 + 131), 4, (double *)a2 + 131);
  }
  uint64_t v7 = a2[139];
  *(uint64_t *)((char *)a1 + 1119) = *(uint64_t *)((char *)a2 + 1119);
  a1[139] = v7;
  *a2 = v8;
  sub_1CBC19ED8((uint64_t)(a2 + 1), (uint64_t)v9);
  if (&v8 != a2) {
    llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(a2 + 131), 4, (double *)&v11);
  }
  a2[139] = v17[0];
  *(uint64_t *)((char *)a2 + 1119) = *(void *)((char *)v17 + 7);
  if (v12 != v11) {
    free(v12);
  }
  if (v9[0] != v10) {
    free(v9[0]);
  }
}

void sub_1CC7EB3AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1CC7EA654(a1, a2, a3, a5);
  unsigned int v10 = *(_DWORD *)(a4 + 1120);
  unsigned int v11 = *(_DWORD *)(a3 + 1120);
  if ((*(_DWORD *)(*(void *)a5 + 40) & 0xFFFFFFFE) == 0x1C)
  {
    if (v10 <= v11) {
      return;
    }
  }
  else if (v10 >= v11)
  {
    return;
  }
  sub_1CC7EB1E0((uint64_t *)a3, (uint64_t *)a4);
  unsigned int v12 = *(_DWORD *)(a3 + 1120);
  unsigned int v13 = *(_DWORD *)(a2 + 1120);
  if ((*(_DWORD *)(*(void *)a5 + 40) & 0xFFFFFFFE) == 0x1C)
  {
    if (v12 <= v13) {
      return;
    }
  }
  else if (v12 >= v13)
  {
    return;
  }
  sub_1CC7EB1E0((uint64_t *)a2, (uint64_t *)a3);
  unsigned int v14 = *(_DWORD *)(a2 + 1120);
  unsigned int v15 = *(_DWORD *)(a1 + 1120);
  if ((*(_DWORD *)(*(void *)a5 + 40) & 0xFFFFFFFE) == 0x1C)
  {
    if (v14 <= v15) {
      return;
    }
  }
  else if (v14 >= v15)
  {
    return;
  }

  sub_1CC7EB1E0((uint64_t *)a1, (uint64_t *)a2);
}

void sub_1CC7EB4C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v33 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x70913F8BCD29C245 * (((uint64_t)a4 - a1) >> 3))
    {
      uint64_t v9 = (0xE1227F179A53848ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v10 = a1 + 1128 * v9;
      unsigned int v11 = *(_DWORD *)(*(void *)a2 + 40) & 0xFFFFFFFE;
      if ((uint64_t)(0xE1227F179A53848ALL * (((uint64_t)a4 - a1) >> 3) + 2) < a3)
      {
        unsigned int v12 = *(_DWORD *)(a1 + 1128 * v9 + 1120);
        unsigned int v13 = *(_DWORD *)(v10 + 2248);
        BOOL v14 = v12 >= v13;
        BOOL v15 = v12 > v13;
        int v16 = !v14;
        if (v11 != 28) {
          BOOL v15 = v16;
        }
        v10 += 1128 * v15;
        if (v15) {
          uint64_t v9 = 0xE1227F179A53848ALL * (((uint64_t)a4 - a1) >> 3) + 2;
        }
      }
      unsigned int v17 = *(_DWORD *)(v10 + 1120);
      unsigned int v18 = *((_DWORD *)a4 + 280);
      if (v11 == 28)
      {
        if (v17 > v18) {
          return;
        }
      }
      else if (v17 < v18)
      {
        return;
      }
      uint64_t v34 = *a4;
      v35[0] = v36;
      v35[1] = (void *)0x2000000000;
      if (*((_DWORD *)a4 + 4)) {
        sub_1CBC19ED8((uint64_t)v35, (uint64_t)(a4 + 1));
      }
      uint64_t v37 = v42;
      uint64_t v19 = (const void *)v5[132];
      uint64_t v20 = (const void *)v5[131];
      if (v19 == v20)
      {
        uint64_t v38 = v42;
        uint64_t v21 = *((unsigned int *)v5 + 267);
        if (v21) {
          memmove(v42, v19, 8 * v21);
        }
      }
      else
      {
        uint64_t v38 = (void *)v5[132];
        v5[132] = (uint64_t)v20;
        LODWORD(v21) = *((_DWORD *)v5 + 267);
      }
      int v39 = *((_DWORD *)v5 + 266);
      int v40 = v21;
      int v41 = *((_DWORD *)v5 + 268);
      v5[133] = 4;
      *((_DWORD *)v5 + 268) = 0;
      *(void *)&v43[7] = *(uint64_t *)((char *)v5 + 1119);
      *(void *)long long v43 = v5[139];
      while (1)
      {
        uint64_t v22 = (uint64_t *)v10;
        uint64_t v23 = v10 + 8;
        uint64_t *v5 = *(void *)v10;
        sub_1CBC19ED8((uint64_t)(v5 + 1), v10 + 8);
        if ((uint64_t *)v10 != v5) {
          llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v5 + 131), 4, (double *)(v10 + 1048));
        }
        uint64_t v24 = *(void *)(v10 + 1112);
        *(uint64_t *)((char *)v5 + 1119) = *(void *)(v10 + 1119);
        v5[139] = v24;
        if (v33 < v9) {
          break;
        }
        uint64_t v25 = (2 * v9) | 1;
        uint64_t v10 = a1 + 1128 * v25;
        unsigned int v26 = *(_DWORD *)(*(void *)a2 + 40) & 0xFFFFFFFE;
        if (2 * v9 + 2 >= a3)
        {
          uint64_t v9 = (2 * v9) | 1;
        }
        else
        {
          unsigned int v27 = *(_DWORD *)(a1 + 1128 * v25 + 1120);
          unsigned int v28 = *(_DWORD *)(v10 + 2248);
          BOOL v14 = v27 >= v28;
          BOOL v29 = v27 > v28;
          int v30 = !v14;
          if (v26 != 28) {
            BOOL v29 = v30;
          }
          v10 += 1128 * v29;
          if (v29) {
            uint64_t v9 = 2 * v9 + 2;
          }
          else {
            uint64_t v9 = (2 * v9) | 1;
          }
        }
        unsigned int v31 = *(_DWORD *)(v10 + 1120);
        char v5 = v22;
        if (v26 == 28)
        {
          if (v31 > *(_DWORD *)&v43[8]) {
            break;
          }
        }
        else if (v31 < *(_DWORD *)&v43[8])
        {
          break;
        }
      }
      *uint64_t v22 = v34;
      sub_1CBC19ED8(v23, (uint64_t)v35);
      if (&v34 != v22) {
        llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v22 + 131), 4, (double *)&v37);
      }
      uint64_t v32 = *(void *)v43;
      *(uint64_t *)((char *)v22 + 1119) = *(void *)&v43[7];
      v22[139] = v32;
      if (v38 != v37) {
        free(v38);
      }
      if (v35[0] != v36) {
        free(v35[0]);
      }
    }
  }
}

void *sub_1CC7EB800(void *result, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, llvm::detail::IEEEFloat *a6)
{
  uint64_t v6 = result[1];
  if (v6)
  {
    uint64_t v62 = a5 + 8;
    do
    {
      unsigned int v12 = *(_WORD **)(v6 + 24);
      int v13 = *((unsigned __int8 *)v12 + 16);
      if (v13 == 77 || v13 == 5 && v12[9] == 49)
      {
        BOOL result = (void *)sub_1CC7EB800(*(void *)(v6 + 24), a2, a3, a4, a5, a6);
      }
      else
      {
        BOOL v14 = *(void **)(*((void *)v12 + 5) + 56);
        uint64_t v15 = *(void *)(*(uint64_t (**)(uint64_t, void *))(*(void *)a2 + 24))(a2, v14);
        BOOL result = (void *)(*(uint64_t (**)(void))(v15 + 592))();
        if (result != v14)
        {
          uint64_t v63 = 4;
          int64_t v64 = 0;
          uint64_t v65 = (int32x2_t ****)v12;
          if (v12 != (_WORD *)-8192 && v12 != (_WORD *)-4096 && v12) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v63);
          }
          uint64_t v16 = a3[2];
          unint64_t v17 = *(void *)a3;
          if (v16 >= a3[3])
          {
            unint64_t v59 = v16 + 1;
            BOOL v60 = v17 + 24 * v16 > (unint64_t)&v63;
            if (v17 > (unint64_t)&v63 || !v60)
            {
              sub_1CC0BD844(a3, v59);
              unint64_t v17 = *(void *)a3;
              goto LABEL_13;
            }
            uint64_t v61 = (char *)&v63 - v17;
            sub_1CC0BD844(a3, v59);
            unint64_t v17 = *(void *)a3;
            unsigned int v18 = (uint64_t *)&v61[*(void *)a3];
          }
          else
          {
LABEL_13:
            unsigned int v18 = &v63;
          }
          unsigned int v19 = a3[2];
          uint64_t v20 = (unint64_t *)(v17 + 24 * v19);
          *uint64_t v20 = 4;
          v20[1] = 0;
          uint64_t v21 = v18[2];
          v20[2] = v21;
          if (v21 != -8192 && v21 != -4096)
          {
            if (v21)
            {
              unint64_t v22 = *v18 & 0xFFFFFFFFFFFFFFF8;
              v20[1] = *(void *)v22;
              *(void *)unint64_t v22 = v20;
              *uint64_t v20 = v22 | 4;
              uint64_t v23 = (unint64_t *)v20[1];
              if (v23) {
                *uint64_t v23 = *v23 & 7 | (unint64_t)(v20 + 1);
              }
            }
          }
          a3[2] = v19 + 1;
          if (v65 != (int32x2_t ****)-8192 && v65 != (int32x2_t ****)-4096 && v65)
          {
            unint64_t v24 = v63 & 0xFFFFFFFFFFFFFFF8;
            *(void *)(v63 & 0xFFFFFFFFFFFFFFF8) = v64;
            if (v64)
            {
              unint64_t *v64 = *v64 & 7 | v24;
            }
            else
            {
              uint64_t v25 = v65;
              unsigned int v26 = ***v65;
              unint64_t v27 = (unint64_t)v26[303];
              if (v27 <= v24)
              {
                uint64_t v28 = v26[305].u32[0];
                if (v27 + 16 * v28 > v24)
                {
                  unsigned int v29 = v28 - 1;
                  LODWORD(v30) = v29 & ((v65 >> 4) ^ (v65 >> 9));
                  unsigned int v31 = (int32x2_t *****)(v27 + 16 * v30);
                  uint64_t v32 = *v31;
                  if (v65 == *v31)
                  {
LABEL_30:
                    *unsigned int v31 = (int32x2_t ****)-8192;
                    v26[304] = vadd_s32(v26[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v25 = v65;
                  }
                  else
                  {
                    int v33 = 1;
                    while (v32 != (int32x2_t ****)-4096)
                    {
                      int v34 = v30 + v33++;
                      uint64_t v30 = v34 & v29;
                      uint64_t v32 = *(int32x2_t *****)(v27 + 16 * v30);
                      if (v65 == v32)
                      {
                        unsigned int v31 = (int32x2_t *****)(v27 + 16 * v30);
                        goto LABEL_30;
                      }
                    }
                  }
                  *((unsigned char *)v25 + 17) &= ~1u;
                }
              }
            }
          }
          uint64_t v35 = *((void *)v12 + 1);
          if (v35)
          {
            unsigned int v36 = *(_DWORD *)(a4 + 8);
            do
            {
              if (v36 >= *(_DWORD *)(a4 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)a4 + 8 * v36) = *(void *)(v35 + 24);
              unsigned int v36 = *(_DWORD *)(a4 + 8) + 1;
              *(_DWORD *)(a4 + 8) = v36;
              uint64_t v35 = *(void *)(v35 + 8);
            }
            while (v35);
          }
          if (!*(void *)(*(void *)v12 + 24))
          {
            uint64_t v63 = (uint64_t)v12;
            if (*(unsigned char *)a5)
            {
              int v48 = 32;
              uint64_t v49 = v62;
              goto LABEL_56;
            }
            int v48 = *(_DWORD *)(a5 + 16);
            if (v48)
            {
              uint64_t v49 = *(void *)(a5 + 8);
LABEL_56:
              int v50 = v48 - 1;
              unsigned int v51 = v50 & ((v12 >> 4) ^ (v12 >> 9));
              BOOL result = (void *)(v49 + 16 * v51);
              unint64_t v52 = (_WORD *)*result;
              if (v12 != (_WORD *)*result)
              {
                long long v53 = 0;
                int v54 = 1;
                while (v52 != (_WORD *)-4096)
                {
                  if (v53) {
                    BOOL v55 = 0;
                  }
                  else {
                    BOOL v55 = v52 == (_WORD *)-8192;
                  }
                  if (v55) {
                    long long v53 = result;
                  }
                  unsigned int v56 = v51 + v54++;
                  unsigned int v51 = v56 & v50;
                  BOOL result = (void *)(v49 + 16 * v51);
                  unint64_t v52 = (_WORD *)*result;
                  if (v12 == (_WORD *)*result) {
                    goto LABEL_75;
                  }
                }
                if (v53) {
                  unint64_t v58 = v53;
                }
                else {
                  unint64_t v58 = result;
                }
LABEL_74:
                BOOL result = sub_1CC7EBF40(a5, (uint64_t)&v63, &v63, v58);
                *BOOL result = v63;
                result[1] = 0;
              }
LABEL_75:
              result[1] = a6;
              goto LABEL_76;
            }
            unint64_t v58 = 0;
            goto LABEL_74;
          }
          uint64_t v37 = (llvm::Constant *)llvm::PointerType::get(**(llvm::PointerType ***)(*(void *)v12 + 16), (llvm::Type *)0x40);
          uint64_t v38 = a6;
          if (*(llvm::Constant **)a6 != v37) {
            uint64_t v38 = sub_1CC56C0C0((llvm *)0x31, a6, v37, 0);
          }
          uint64_t v63 = (uint64_t)v12;
          if (*(unsigned char *)a5)
          {
            int v39 = 32;
            uint64_t v40 = v62;
            goto LABEL_44;
          }
          int v39 = *(_DWORD *)(a5 + 16);
          if (v39)
          {
            uint64_t v40 = *(void *)(a5 + 8);
LABEL_44:
            int v41 = v39 - 1;
            unsigned int v42 = v41 & ((v12 >> 4) ^ (v12 >> 9));
            BOOL result = (void *)(v40 + 16 * v42);
            uint64_t v43 = *result;
            if (v12 != (_WORD *)*result)
            {
              uint64_t v44 = 0;
              int v45 = 1;
              while (v43 != -4096)
              {
                if (v44) {
                  BOOL v46 = 0;
                }
                else {
                  BOOL v46 = v43 == -8192;
                }
                if (v46) {
                  uint64_t v44 = result;
                }
                unsigned int v47 = v42 + v45++;
                unsigned int v42 = v47 & v41;
                BOOL result = (void *)(v40 + 16 * v42);
                uint64_t v43 = *result;
                if (v12 == (_WORD *)*result) {
                  goto LABEL_70;
                }
              }
              if (v44) {
                int v57 = v44;
              }
              else {
                int v57 = result;
              }
LABEL_69:
              BOOL result = sub_1CC7EBF40(a5, (uint64_t)&v63, &v63, v57);
              *BOOL result = v63;
              result[1] = 0;
            }
LABEL_70:
            result[1] = v38;
            goto LABEL_76;
          }
          int v57 = 0;
          goto LABEL_69;
        }
      }
LABEL_76:
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6);
  }
  return result;
}

uint64_t sub_1CC7EBD20(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 32;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC7EBDCC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 520);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      BOOL v12 = 0;
      uint64_t result = sub_1CC7EBD20((uint64_t)v5, v10, &v12);
      int v11 = v12;
      uint64_t *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CC7EBE90(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 32;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_15;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_15;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_15:
  *a3 = v7;
  return result;
}

void *sub_1CC7EBF40(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 32;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1CC7EC0B8(a1, 2 * v8);
    uint64_t v11 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v12 = 32;
    }
    else
    {
      int v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        int v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      uint64_t v11 = *(void *)(a1 + 8);
    }
    int v9 = *(_DWORD *)a1 & 1;
    int v13 = v12 - 1;
    unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (void *)(v11 + 16 * v14);
    uint64_t v15 = *a4;
    if (*a3 != *a4)
    {
      uint64_t v16 = 0;
      int v17 = 1;
      while (v15 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -8192;
        }
        if (v18) {
          uint64_t v16 = a4;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        a4 = (void *)(v11 + 16 * v14);
        uint64_t v15 = *a4;
        if (*a3 == *a4) {
          goto LABEL_7;
        }
      }
      if (v16) {
        a4 = v16;
      }
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1CC7EC0B8(a1, v8);
      uint64_t v20 = 0;
      sub_1CC7EBE90(a1, a3, &v20);
      a4 = v20;
      int v6 = *(_DWORD *)a1;
    }
    int v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

int *sub_1CC7EC0B8(uint64_t a1, unsigned int a2)
{
  v14[64] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x21)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x20)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CC7EC250((int *)a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t *v7 = v8;
      v7[1] = *(void *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 512);
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC7EC250((int *)a1, v14, v7);
}

int *sub_1CC7EC250(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    uint64_t v6 = result + 130;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    uint64_t v6 = &v5[2 * v4];
  }
  do
  {
    void *v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v8 = 32;
        uint64_t v9 = result + 2;
      }
      else
      {
        uint64_t v9 = (int *)*((void *)result + 1);
        int v8 = result[4];
      }
      int v10 = v8 - 1;
      unsigned int v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v12 = &v9[4 * v11];
      uint64_t v13 = *(void *)v12;
      if (v7 != *(void *)v12)
      {
        unsigned int v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            unsigned int v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          uint64_t v12 = &v9[4 * (v17 & v10)];
          uint64_t v13 = *(void *)v12;
          if (v7 == *(void *)v12) {
            goto LABEL_21;
          }
        }
        if (v14) {
          uint64_t v12 = v14;
        }
      }
LABEL_21:
      *(void *)uint64_t v12 = v7;
      *((void *)v12 + 1) = a2[1];
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CC7EC358()
{
  char v3 = 0;
  uint64_t v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Disable the alloca promoter step";
  v1.n128_u64[1] = 32;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCDBAF0, "disable-alloca-promoter", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDBAF0, &dword_1CB82C000);
}

void sub_1CC7EC3E4()
{
}

uint64_t sub_1CC7EC480(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDBBC0;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F261F040;
  *(void *)(a1 + 32) = 1;
  for (uint64_t i = 40; i != 168; i += 16)
    *(void *)(a1 + i) = -4096;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDBBC8, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CC7EC3E4;
    v6[1] = &PassRegistry;
    int v5 = v6;
    std::__call_once(&qword_1EBCDBBC8, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC7EC558()
{
}

void sub_1CC7EC594(uint64_t a1)
{
  *(void *)a1 = &unk_1F261F040;
  if ((*(unsigned char *)(a1 + 32) & 1) == 0)
  {
    uint64_t v1 = a1;
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 40), 8);
    a1 = v1;
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC7EC600(llvm::Pass *this)
{
  *(void *)this = &unk_1F261F040;
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*((void *)this + 5), 8);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC7EC67C(llvm::PassRegistry *a1, uint64_t a2)
{
  v3[0] = &unk_1F2617E40;
  v3[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v3);
}

BOOL sub_1CC7EC6C8(uint64_t a1, uint64_t a2)
{
  uint64_t v226 = *MEMORY[0x1E4F143B8];
  int v2 = *(uint64_t **)(a2 + 112);
  unsigned int v3 = *((_DWORD *)v2 + 8);
  if (v3 <= 1) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = v3;
  }
  if (v3 <= 0x11) {
    size_t v5 = v4;
  }
  else {
    size_t v5 = 18;
  }
  uint64_t v178 = *((unsigned int *)v2 + 2);
  if (!v178) {
    goto LABEL_20;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  do
    int v7 = 33 * v7 + aAirDyldLibTabl[v6++];
  while (v5 != v6);
  uint64_t v8 = *v2;
  uint64_t v9 = *v2 + 8 * v178 + 8;
  int v10 = 1;
  int v11 = v7;
  while (1)
  {
    uint64_t v12 = v11 & (v178 - 1);
    uint64_t v13 = *(void **)(v8 + 8 * v12);
    if (v13 != (void *)-8)
    {
      if (!v13) {
        goto LABEL_20;
      }
      if (*(_DWORD *)(v9 + 4 * v12) == v7
        && v5 == *v13
        && !memcmp("air.dyld_lib_table", (char *)v13 + *((unsigned int *)v2 + 5), v5))
      {
        break;
      }
    }
    int v11 = v10 + v12;
    ++v10;
  }
  if (v12 == -1
    || (int)v12 == v178
    || (uint64_t v14 = *(void *)(*(void *)(v8 + 8 * (int)v12) + 8)) == 0
    || *(unsigned char *)(v14 + 16) != 3)
  {
LABEL_20:
    uint64_t v14 = 0;
  }
  if (v3 <= 1) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v3;
  }
  if (v3 <= 0x11) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = 18;
  }
  if (!v178) {
    goto LABEL_40;
  }
  uint64_t v17 = 0;
  int v18 = 0;
  do
    int v18 = 33 * v18 + aAirDyldStrTabl[v17++];
  while (v16 != v17);
  uint64_t v19 = *v2;
  uint64_t v20 = *v2 + 8 * v178 + 8;
  int v21 = 1;
  int v22 = v18;
  while (1)
  {
    uint64_t v23 = v22 & (v178 - 1);
    unint64_t v24 = *(void **)(v19 + 8 * v23);
    if (v24 != (void *)-8)
    {
      if (!v24) {
        goto LABEL_40;
      }
      if (*(_DWORD *)(v20 + 4 * v23) == v18
        && v16 == *v24
        && !memcmp("air.dyld_str_table", (char *)v24 + *((unsigned int *)v2 + 5), v16))
      {
        break;
      }
    }
    int v22 = v21 + v23;
    ++v21;
  }
  if (v23 == -1
    || (int)v23 == v178
    || (uint64_t v25 = *(void *)(*(void *)(v19 + 8 * (int)v23) + 8)) == 0
    || *(unsigned char *)(v25 + 16) != 3)
  {
LABEL_40:
    if (!v14) {
      goto LABEL_41;
    }
LABEL_309:
    uint64_t v166 = "air.dyld_lib_table and air.dyld_str_table must be present together.";
    goto LABEL_310;
  }
  if (!v14) {
    goto LABEL_309;
  }
  uint64_t RawDataValues = llvm::ConstantDataSequential::getRawDataValues(*(llvm::ConstantDataSequential **)(v25 - 32));
  if (v142 >= v142 - 1) {
    unint64_t v144 = v142 - 1;
  }
  else {
    unint64_t v144 = v142;
  }
  uint64_t v145 = *(void *)(v14 - 32);
  uint64_t v146 = *(uint64_t **)a2;
  uint64_t inserted = llvm::Module::getOrInsertNamedMetadata((_DWORD *)a2, "llvm.dyld.libs", 0xEuLL);
  int v148 = *(_DWORD *)(v145 + 20);
  if ((v148 & 0x40000000) != 0)
  {
    uint64_t v150 = *(void *)(v145 - 8);
    uint64_t v149 = v148 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v149 = v148 & 0x7FFFFFF;
    uint64_t v150 = v145 - 32 * v149;
  }
  if (v149)
  {
    uint64_t v151 = 32 * v149;
    do
    {
      unint64_t v152 = (void *)(*(void *)v150 - 32 * (*(_DWORD *)(*(void *)v150 + 20) & 0x7FFFFFF));
      uint64_t v153 = (unsigned int *)(*v152 + 24);
      if (*(_DWORD *)(*v152 + 32) >= 0x41u) {
        uint64_t v153 = *(unsigned int **)v153;
      }
      uint64_t v154 = v152[4];
      BOOL v155 = (unsigned int *)(v154 + 24);
      if (*(_DWORD *)(v154 + 32) >= 0x41u) {
        BOOL v155 = *(unsigned int **)v155;
      }
      unint64_t v156 = *v153;
      size_t v157 = *v155;
      if (v144 < v156) {
        unint64_t v156 = v144;
      }
      uint64_t v158 = (unsigned __int8 *)(RawDataValues + v156);
      size_t v159 = v144 - v156;
      if (v159 >= v157) {
        size_t v160 = v157;
      }
      else {
        size_t v160 = v159;
      }
      uint64_t v222 = llvm::MDString::get(v146, v158, v160);
      Impl = llvm::MDTuple::getImpl((uint64_t)v146, &v222, 1, 0, 1);
      uint64_t v203 = Impl;
      uint64_t v162 = *(void *)(inserted + 48);
      uint64_t v163 = *(unsigned int *)(v162 + 8);
      if (v163 >= *(_DWORD *)(v162 + 12))
      {
        sub_1CC608328(*(void *)(inserted + 48), (unsigned __int8 **)&v203);
      }
      else
      {
        BOOL v164 = (unsigned __int8 *)Impl;
        uint64_t v165 = (unsigned __int8 **)(*(void *)v162 + 8 * v163);
        uint64_t *v165 = v164;
        if (v164)
        {
          llvm::MetadataTracking::track((uint64_t)v165, v164, 2);
          LODWORD(v163) = *(_DWORD *)(v162 + 8);
        }
        *(_DWORD *)(v162 + 8) = v163 + 1;
      }
      v150 += 32;
      v151 -= 32;
    }
    while (v151);
  }
LABEL_41:
  v180[0] = 0;
  v180[1] = 0;
  int v181 = 0;
  long long v183 = 0;
  uint64_t v184 = 0;
  long long __p = 0;
  sub_1CD0FEC94((llvm::Module *)a2, (uint64_t)v180);
  sub_1CD0FEFC4((llvm::Module *)a2, (uint64_t)v180, 0);
  unsigned int v26 = (uint64_t *)__p;
  unint64_t v27 = v183;
  uint64_t v28 = (_DWORD *)a1;
  if (__p != v183)
  {
    do
    {
      unsigned int v29 = (uint64_t ***)*v26;
      if (!llvm::Value::getMetadata(*v26, "agx.bind", 8uLL))
      {
        uint64_t v30 = (llvm::MDNode *)v26[1];
        int MDKindID = llvm::LLVMContext::getMDKindID(**v29, "agx.bind", 8uLL);
        llvm::Value::addMetadata((llvm::Value *)v29, MDKindID, v30);
      }
      v26 += 2;
    }
    while (v26 != v27);
  }
  uint64_t v219 = v221;
  uint64_t v220 = 0x400000000;
  uint64_t v203 = (void *)1;
  for (uint64_t i = 8; i != 232; i += 56)
    *(void **)((char *)&v203 + i) = (void *)-4096;
  sub_1CD114E40(a2, (uint64_t)&v219, &v203);
  unsigned int v33 = v203;
  if (v203 >= 2)
  {
    int v34 = *(uint64_t **)a2;
    long long v187 = v189;
    uint64_t v188 = 0x200000000;
    long long v192 = v34;
    long long v193 = &v201;
    long long v194 = &v202;
    uint64_t v195 = 0;
    int v196 = 0;
    __int16 v197 = 512;
    char v198 = 7;
    uint64_t v190 = 0;
    uint64_t v191 = 0;
    uint64_t v199 = 0;
    uint64_t v200 = 0;
    uint64_t v201 = &unk_1F2616E88;
    BOOL v202 = &unk_1F2617008;
    if (v220)
    {
      uint64_t v35 = (uint64_t *)v219;
      BOOL v177 = (uint64_t *)((char *)v219 + 8 * v220);
      while (1)
      {
        unsigned int v36 = (void *)*v35;
        uint64_t v37 = sub_1CC7E5CD8((uint64_t)&v203, *v35);
        uint64_t v38 = &v204;
        if ((v203 & 1) == 0) {
          uint64_t v38 = (uint64_t *)v204;
        }
        unsigned int v39 = v205[0];
        if (v203) {
          unsigned int v39 = 4;
        }
        if (&v38[7 * v39] == (uint64_t *)v37) {
          goto LABEL_55;
        }
        uint64_t v222 = v36;
        uint64_t v40 = sub_1CD640904((uint64_t)v180, (uint64_t *)&v222);
        int v41 = (uint64_t *)(*(void *)(v40 + 8) - 8 * *(unsigned int *)(*(void *)(v40 + 8) + 8));
        uint64_t v43 = *v41;
        uint64_t v42 = v41[1];
        if (*(unsigned char *)(*(void *)(*(void *)(v43 + 128) + 24) + 8) == 17)
        {
          if (*(unsigned char *)v42 == 1)
          {
            uint64_t v44 = *(void *)(v42 + 128);
            if (*(unsigned char *)(v44 + 16) == 16) {
              goto LABEL_62;
            }
          }
          uint64_t v42 = *(void *)(v42 - 8 * *(unsigned int *)(v42 + 8));
        }
        uint64_t v44 = *(void *)(v42 + 128);
LABEL_62:
        int v45 = (void *)(v44 + 24);
        if (*(_DWORD *)(v44 + 32) >= 0x41u) {
          int v45 = (void *)*v45;
        }
        int v46 = *(_DWORD *)v45;
        if (v46 <= 97)
        {
          if (v46 != 43 && v46 != 93)
          {
LABEL_311:
            uint64_t v166 = "Incorrect binding type";
LABEL_310:
            llvm::report_fatal_error((llvm *)v166, (const llvm::Twine *)1);
          }
LABEL_104:
          uint64_t v63 = v36[1];
          if (v63)
          {
            uint64_t v64 = *(void *)(v63 + 24);
            uint64_t v65 = *(uint64_t **)(v64 - 32 * (*(_DWORD *)(v64 + 20) & 0x7FFFFFF));
            uint64_t v190 = *(void *)(v64 + 40);
            uint64_t v191 = v64 + 24;
            int v66 = *(unsigned __int8 **)(v64 + 48);
            v185[0] = v66;
            if (v66)
            {
              llvm::MetadataTracking::track((uint64_t)v185, v66, 2);
              uint64_t v67 = v185[0];
            }
            else
            {
              uint64_t v67 = 0;
            }
            sub_1CB8461A4((uint64_t)&v187, 0, v67);
            if (!v185[0]) {
              goto LABEL_108;
            }
            int v86 = *(unsigned __int8 *)v185[0];
            if ((v86 - 4) <= 0x1E)
            {
              if ((*(unsigned char *)(v185[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v185[0] + 12)) {
                goto LABEL_108;
              }
              uint64_t v87 = *(void *)(v185[0] + 16);
              if ((v87 & 4) == 0) {
                goto LABEL_108;
              }
              unint64_t v88 = v87 & 0xFFFFFFFFFFFFFFF8;
              if (!v88) {
                goto LABEL_108;
              }
LABEL_155:
              uint64_t v222 = v185;
              sub_1CC5FA668(v88 + 16, &v222);
              goto LABEL_108;
            }
            if ((v86 - 3) >= 0xFFFFFFFE) {
              uint64_t v89 = v185[0];
            }
            else {
              uint64_t v89 = 0;
            }
            if ((v86 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v88 = v89 + 8;
              goto LABEL_155;
            }
            if (v86 == 3) {
              *(void *)(v185[0] + 8) = 0;
            }
LABEL_108:
            uint64_t v222 = v224;
            uint64_t v223 = 0x800000000;
            llvm::Module::getModuleFlagsMetadata((llvm::Module *)a2, (uint64_t)&v222);
            if (v223)
            {
              uint64_t v68 = (uint64_t *)((char *)v222 + 16);
              uint64_t v69 = 24 * v223;
              while (1)
              {
                uint64_t v70 = *(void *)(*(v68 - 1) + 8);
                if (*(void *)v70 == 9)
                {
                  uint64_t v71 = *(void *)(v70 + 24);
                  uint64_t v72 = *(unsigned __int8 *)(v70 + 32);
                  if (*(void *)"PIC Level" == v71 && aPicLevel[8] == v72) {
                    break;
                  }
                }
                v68 += 3;
                v69 -= 24;
                if (!v69) {
                  goto LABEL_119;
                }
              }
              uint64_t v74 = *v68;
            }
            else
            {
LABEL_119:
              uint64_t v74 = 0;
            }
            if (v222 == v224)
            {
              if (!v74) {
                goto LABEL_122;
              }
            }
            else
            {
              free(v222);
              if (!v74) {
                goto LABEL_122;
              }
            }
            uint64_t v81 = *(void *)(v74 + 128);
            long long v82 = (void *)(v81 + 24);
            if (*(_DWORD *)(v81 + 32) >= 0x41u) {
              long long v82 = (void *)*v82;
            }
            if (*(_DWORD *)v82)
            {
              long long v83 = sub_1CC7ED9E4(a1, (uint64_t **)v64, (uint64_t)v36);
              uint64_t v76 = v83;
              uint64_t v84 = *v192 + 1960;
              __int16 v186 = 257;
              if (*(void *)v83 != v84)
              {
                if (v83[16] <= 0x14u)
                {
                  uint64_t v76 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v193
                                            + 28))(v193, 47, v83, v84);
                  if (v76) {
                    BOOL v90 = v76[16] >= 0x1Cu;
                  }
                  else {
                    BOOL v90 = 0;
                  }
                  if (v90)
                  {
                    (*((void (**)(void **, unsigned __int8 *, void *, uint64_t, uint64_t))*v194 + 2))(v194, v76, v185, v190, v191);
                    if (v188)
                    {
                      uint64_t v91 = (llvm::MDNode **)v187;
                      uint64_t v174 = (llvm::MDNode **)((char *)v187 + 16 * v188);
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v76, *(_DWORD *)v91, v91[1]);
                        v91 += 2;
                      }
                      while (v91 != v174);
                    }
                  }
                }
                else
                {
                  __int16 v225 = 257;
                  uint64_t v76 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v83, v84, (const char **)&v222, 0);
                  (*((void (**)(void **, unsigned __int8 *, void *, uint64_t, uint64_t))*v194 + 2))(v194, v76, v185, v190, v191);
                  if (v188)
                  {
                    unint64_t v85 = (llvm::MDNode **)v187;
                    long long v173 = (llvm::MDNode **)((char *)v187 + 16 * v188);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v76, *(_DWORD *)v85, v85[1]);
                      v85 += 2;
                    }
                    while (v85 != v173);
                  }
                }
              }
            }
            else
            {
LABEL_122:
              uint64_t v75 = *v192 + 1960;
              __int16 v186 = 257;
              uint64_t v76 = (unsigned __int8 *)v36;
              if (*v36 != v75)
              {
                if (*((unsigned __int8 *)v36 + 16) <= 0x14u)
                {
                  uint64_t v76 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, void *, uint64_t))*v193 + 28))(v193, 47, v36, v75);
                  if (v76) {
                    BOOL v78 = v76[16] >= 0x1Cu;
                  }
                  else {
                    BOOL v78 = 0;
                  }
                  if (v78)
                  {
                    (*((void (**)(void **, unsigned __int8 *, void *, uint64_t, uint64_t))*v194 + 2))(v194, v76, v185, v190, v191);
                    if (v188)
                    {
                      uint64_t v92 = (llvm::MDNode **)v187;
                      uint64_t v175 = (llvm::MDNode **)((char *)v187 + 16 * v188);
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v76, *(_DWORD *)v92, v92[1]);
                        v92 += 2;
                      }
                      while (v92 != v175);
                    }
                  }
                }
                else
                {
                  __int16 v225 = 257;
                  uint64_t v76 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v36, v75, (const char **)&v222, 0);
                  (*((void (**)(void **, unsigned __int8 *, void *, uint64_t, uint64_t))*v194 + 2))(v194, v76, v185, v190, v191);
                  if (v188)
                  {
                    uint64_t v77 = (llvm::MDNode **)v187;
                    unint64_t v172 = (llvm::MDNode **)((char *)v187 + 16 * v188);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v76, *(_DWORD *)v77, v77[1]);
                      v77 += 2;
                    }
                    while (v77 != v172);
                  }
                }
              }
            }
            uint64_t v79 = *v192 + 1912;
            __int16 v225 = 257;
            uint64_t v80 = sub_1CB930F7C((uint64_t *)&v187, v79, v65, (const char *)v76, (uint64_t)&v222);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v64, v80, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          goto LABEL_55;
        }
        if (v46 == 98 || v46 == 113) {
          goto LABEL_104;
        }
        if (v46 != 139) {
          goto LABEL_311;
        }
        uint64_t v47 = v36[1];
        if (v47)
        {
          uint64_t v48 = *(void *)(v47 + 24);
          uint64_t v49 = *(uint64_t **)(v48 - 32 * (*(_DWORD *)(v48 + 20) & 0x7FFFFFF));
          uint64_t v190 = *(void *)(v48 + 40);
          uint64_t v191 = v48 + 24;
          int v50 = *(unsigned __int8 **)(v48 + 48);
          v185[0] = v50;
          if (v50)
          {
            llvm::MetadataTracking::track((uint64_t)v185, v50, 2);
            uint64_t v51 = v185[0];
          }
          else
          {
            uint64_t v51 = 0;
          }
          sub_1CB8461A4((uint64_t)&v187, 0, v51);
          if (!v185[0]) {
            goto LABEL_72;
          }
          int v58 = *(unsigned __int8 *)v185[0];
          if ((v58 - 4) > 0x1E)
          {
            if ((v58 - 3) >= 0xFFFFFFFE) {
              uint64_t v61 = v185[0];
            }
            else {
              uint64_t v61 = 0;
            }
            if ((v58 - 3) < 0xFFFFFFFE)
            {
              if (v58 == 3) {
                *(void *)(v185[0] + 8) = 0;
              }
LABEL_72:
              uint64_t v52 = *v192;
              uint64_t v53 = *v192 + 1960;
              __int16 v186 = 257;
              int v54 = (unsigned __int8 *)v36;
              if (*v36 != v53)
              {
                if (*((unsigned __int8 *)v36 + 16) <= 0x14u)
                {
                  int v54 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, void *, uint64_t))*v193 + 28))(v193, 47, v36, v53);
                  if (v54) {
                    BOOL v56 = v54[16] >= 0x1Cu;
                  }
                  else {
                    BOOL v56 = 0;
                  }
                  if (v56)
                  {
                    (*((void (**)(void **, unsigned __int8 *, void *, uint64_t, uint64_t))*v194 + 2))(v194, v54, v185, v190, v191);
                    if (v188)
                    {
                      uint64_t v62 = (llvm::MDNode **)v187;
                      uint64_t v169 = (char *)v187 + 16 * v188;
                      do
                      {
                        BOOL v171 = v62;
                        llvm::Instruction::setMetadata((llvm::Instruction *)v54, *(_DWORD *)v62, v62[1]);
                        uint64_t v62 = v171 + 2;
                      }
                      while (v171 + 2 != (llvm::MDNode **)v169);
                    }
                  }
                }
                else
                {
                  __int16 v225 = 257;
                  int v54 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v36, v53, (const char **)&v222, 0);
                  (*((void (**)(void **, unsigned __int8 *, void *, uint64_t, uint64_t))*v194 + 2))(v194, v54, v185, v190, v191);
                  if (v188)
                  {
                    BOOL v55 = (llvm::MDNode **)v187;
                    uint64_t v168 = (char *)v187 + 16 * v188;
                    do
                    {
                      BOOL v170 = v55;
                      llvm::Instruction::setMetadata((llvm::Instruction *)v54, *(_DWORD *)v55, v55[1]);
                      BOOL v55 = v170 + 2;
                    }
                    while (v170 + 2 != (llvm::MDNode **)v168);
                  }
                }
              }
              __int16 v225 = 257;
              int v57 = sub_1CB930F7C((uint64_t *)&v187, v52 + 1912, v49, (const char *)v54, (uint64_t)&v222);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v48, v57, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
            unint64_t v60 = v61 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v185[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v185[0] + 12)) {
              goto LABEL_72;
            }
            uint64_t v59 = *(void *)(v185[0] + 16);
            if ((v59 & 4) == 0) {
              goto LABEL_72;
            }
            unint64_t v60 = v59 & 0xFFFFFFFFFFFFFFF8;
            if (!v60) {
              goto LABEL_72;
            }
          }
          uint64_t v222 = v185;
          sub_1CC5FA668(v60 + 16, &v222);
          goto LABEL_72;
        }
LABEL_55:
        if (++v35 == v177)
        {
          uint64_t v28 = (_DWORD *)a1;
          if (v187 != v189) {
            free(v187);
          }
          break;
        }
      }
    }
  }
  sub_1CC7E5E14((uint64_t)&v203);
  if (v219 != v221) {
    free(v219);
  }
  uint64_t v203 = v205;
  uint64_t v204 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((llvm::Module *)a2, (uint64_t)&v203);
  if (v204)
  {
    unint64_t v93 = (uint64_t *)((char *)v203 + 16);
    uint64_t v94 = 24 * v204;
    while (1)
    {
      uint64_t v95 = *(void *)(*(v93 - 1) + 8);
      if (*(void *)v95 == 9)
      {
        uint64_t v96 = *(void *)(v95 + 24);
        uint64_t v97 = *(unsigned __int8 *)(v95 + 32);
        if (*(void *)"PIC Level" == v96 && aPicLevel[8] == v97) {
          break;
        }
      }
      v93 += 3;
      v94 -= 24;
      if (!v94) {
        goto LABEL_186;
      }
    }
    uint64_t v99 = *v93;
  }
  else
  {
LABEL_186:
    uint64_t v99 = 0;
  }
  if (v203 == v205)
  {
    if (!v99) {
      goto LABEL_189;
    }
  }
  else
  {
    free(v203);
    if (!v99) {
      goto LABEL_189;
    }
  }
  uint64_t v103 = *(void *)(v99 + 128);
  long long v104 = (void *)(v103 + 24);
  if (*(_DWORD *)(v103 + 32) >= 0x41u) {
    long long v104 = (void *)*v104;
  }
  if (*(_DWORD *)v104)
  {
    long long v105 = *(uint64_t **)a2;
    uint64_t v203 = v205;
    uint64_t v204 = 0x200000000;
    unsigned int v208 = v105;
    unint64_t v209 = &v217;
    uint64_t v210 = &v218;
    uint64_t v211 = 0;
    int v212 = 0;
    __int16 v213 = 512;
    char v214 = 7;
    uint64_t v206 = 0;
    uint64_t v207 = 0;
    uint64_t v215 = 0;
    uint64_t v216 = 0;
    unint64_t v217 = &unk_1F2616E88;
    uint64_t v218 = &unk_1F2617008;
    for (uint64_t j = *(void *)(a2 + 32); j != a2 + 24; uint64_t j = *(void *)(j + 8))
    {
      if (j) {
        uint64_t v107 = j - 56;
      }
      else {
        uint64_t v107 = 0;
      }
      int v108 = *(_DWORD *)(v107 + 32);
      if ((v108 & 0xF) != 1)
      {
        if (j && *(unsigned char *)(v107 + 16) == 3)
        {
          if ((*(_DWORD *)(v107 + 20) & 0x7FFFFFF) != 0) {
            continue;
          }
        }
        else if (*(unsigned char *)(v107 + 16) || (v108 & 0x800000) != 0 || *(void *)(v107 + 72) != v107 + 72)
        {
          continue;
        }
      }
      if ((v108 & 0x2000) == 0) {
        sub_1CC7EE31C((uint64_t)v28, v107);
      }
    }
    uint64_t v109 = *(void *)(a2 + 16);
    if (v109 != a2 + 8)
    {
      while (1)
      {
        if (v109) {
          long long v110 = (uint64_t ***)(v109 - 56);
        }
        else {
          long long v110 = 0;
        }
        int v111 = *((_DWORD *)v110 + 8);
        if ((v111 & 0x1C00) != 0) {
          goto LABEL_220;
        }
        if ((v110[4] & 0xF) != 1)
        {
          if (v109 && *((unsigned char *)v110 + 16) == 3)
          {
            if ((*((_DWORD *)v110 + 5) & 0x7FFFFFF) != 0) {
              goto LABEL_221;
            }
          }
          else if (*((unsigned char *)v110 + 16) || (v111 & 0x800000) != 0 || v110[9] != (uint64_t **)(v110 + 9))
          {
            goto LABEL_221;
          }
        }
        if ((v111 & 0x400000) != 0) {
          break;
        }
LABEL_232:
        int v123 = *((_DWORD *)*v110 + 2) >> 8;
        if (v123) {
          BOOL v124 = v123 == 2;
        }
        else {
          BOOL v124 = 1;
        }
        if (!v124)
        {
          if (v123 != 64) {
            goto LABEL_221;
          }
          if (!v109) {
            goto LABEL_221;
          }
          if (*((unsigned char *)v110 + 16) != 3) {
            goto LABEL_221;
          }
          uint64_t Metadata = llvm::Value::getMetadata((uint64_t)v110, "agx.bind", 8uLL);
          if (!Metadata) {
            goto LABEL_221;
          }
          unint64_t v126 = (uint64_t *)(Metadata - 8 * *(unsigned int *)(Metadata + 8));
          uint64_t v128 = *v126;
          uint64_t v127 = v126[1];
          if (*(unsigned char *)(*(void *)(*(void *)(v128 + 128) + 24) + 8) == 17)
          {
            if (*(unsigned char *)v127 != 1 || (uint64_t v129 = *(void *)(v127 + 128), *(unsigned char *)(v129 + 16) != 16))
            {
              uint64_t v127 = *(void *)(v127 - 8 * *(unsigned int *)(v127 + 8));
              goto LABEL_244;
            }
          }
          else
          {
LABEL_244:
            uint64_t v129 = *(void *)(v127 + 128);
          }
          BOOL v130 = (void *)(v129 + 24);
          if (*(_DWORD *)(v129 + 32) >= 0x41u) {
            BOOL v130 = (void *)*v130;
          }
          int v131 = *(_DWORD *)v130;
          if (v131 != 114 && v131 != 18) {
            goto LABEL_221;
          }
        }
LABEL_220:
        sub_1CC7EE31C((uint64_t)v28, (uint64_t)v110);
LABEL_221:
        uint64_t v109 = *(void *)(v109 + 8);
        if (v109 == a2 + 8) {
          goto LABEL_274;
        }
      }
      uint64_t v112 = ***v110;
      uint64_t v222 = v110;
      int v113 = *(_DWORD *)(v112 + 2520);
      if (v113)
      {
        uint64_t v114 = *(void *)(v112 + 2504);
        int v115 = v113 - 1;
        unsigned int v116 = v115 & ((v110 >> 4) ^ (v110 >> 9));
        uint64_t v117 = (uint64_t ****)(v114 + 24 * v116);
        uint64_t v118 = *v117;
        if (*v117 == v110)
        {
LABEL_227:
          if (v117[2] == (uint64_t ***)15)
          {
            uint64_t v119 = (uint64_t *)v117[1];
            uint64_t v120 = *v119;
            uint64_t v121 = *(uint64_t *)((char *)v119 + 7);
            if (v120 == 0x625F6C61626F6C67 && v121 == 0x73676E69646E6962) {
              goto LABEL_221;
            }
          }
          goto LABEL_232;
        }
        long long v133 = 0;
        int v134 = 1;
        while (v118 != (uint64_t ***)-4096)
        {
          if (v133) {
            BOOL v135 = 0;
          }
          else {
            BOOL v135 = v118 == (uint64_t ***)-8192;
          }
          if (v135) {
            long long v133 = v117;
          }
          unsigned int v136 = v116 + v134++;
          unsigned int v116 = v136 & v115;
          uint64_t v117 = (uint64_t ****)(v114 + 24 * v116);
          uint64_t v118 = *v117;
          if (*v117 == v110) {
            goto LABEL_227;
          }
        }
        if (v133) {
          uint64_t v137 = v133;
        }
        else {
          uint64_t v137 = v117;
        }
      }
      else
      {
        uint64_t v137 = 0;
      }
      uint64_t v117 = (uint64_t ****)sub_1CC5BF31C(v112 + 2504, (uint64_t)&v222, (uint64_t *)&v222, v137);
      uint64_t v138 = (uint64_t ***)v222;
      v117[1] = 0;
      v117[2] = 0;
      *uint64_t v117 = v138;
      goto LABEL_227;
    }
LABEL_274:
    if (v203 != v205) {
      free(v203);
    }
  }
LABEL_189:
  long long v100 = v28 + 8;
  unsigned int v101 = v28[8];
  if (v101 > 1 || v28[9])
  {
    if (v101)
    {
      BOOL v139 = v28 + 10;
      BOOL v140 = v28 + 42;
    }
    else
    {
      uint64_t v167 = v28[12];
      if (((2 * v101) & 0xFFFFFFFC) < v167 && v167 >= 0x41)
      {
        sub_1CD640BD0(v100);
        goto LABEL_191;
      }
      if (!v167)
      {
        int v141 = 0;
        uint64_t v28 = (_DWORD *)a1;
LABEL_280:
        v28[8] = v141;
        v28[9] = 0;
        goto LABEL_191;
      }
      uint64_t v28 = (_DWORD *)a1;
      BOOL v139 = *(void **)(a1 + 40);
      BOOL v140 = &v139[2 * v167];
    }
    do
    {
      void *v139 = -4096;
      v139 += 2;
    }
    while (v139 != v140);
    int v141 = *(_DWORD *)v100 & 1;
    goto LABEL_280;
  }
LABEL_191:
  if (__p)
  {
    long long v183 = (uint64_t *)__p;
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v180[0], 8);
  return v33 > 1;
}

unsigned __int8 *sub_1CC7ED9E4(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  uint64_t v79 = a2[5][7];
  uint64_t v5 = *(void *)(v79 + 40);
  uint64_t v6 = (_DWORD *)(a1 + 32);
  int v7 = sub_1CC7EE188((_DWORD *)(a1 + 32), &v79);
  uint64_t v8 = 0;
  uint64_t v9 = (llvm::Instruction *)v7[1];
  uint64_t v10 = **a2;
  long long v82 = v84;
  uint64_t v83 = 0x200000000;
  uint64_t v87 = v10;
  unint64_t v88 = &v96;
  uint64_t v89 = &v97;
  uint64_t v90 = 0;
  int v91 = 0;
  __int16 v92 = 512;
  char v93 = 7;
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  uint64_t v96 = &unk_1F2616E88;
  uint64_t v97 = &unk_1F2617008;
  int v11 = (unsigned __int8 *)a2[6];
  unint64_t v85 = (llvm::BasicBlock *)a2[5];
  FirstNonPHIOrDbgOrAlloca = (char *)(a2 + 3);
  v80[0] = (uint64_t)v11;
  if (v11)
  {
    llvm::MetadataTracking::track((uint64_t)v80, v11, 2);
    uint64_t v8 = v80[0];
  }
  sub_1CB8461A4((uint64_t)&v82, 0, v8);
  if (v80[0])
  {
    int v61 = *(unsigned __int8 *)v80[0];
    if ((v61 - 4) > 0x1E)
    {
      if ((v61 - 3) >= 0xFFFFFFFE) {
        uint64_t v67 = v80[0];
      }
      else {
        uint64_t v67 = 0;
      }
      if ((v61 - 3) < 0xFFFFFFFE)
      {
        if (v61 == 3) {
          *(void *)(v80[0] + 8) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v63 = v67 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v80[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v80[0] + 12)) {
        goto LABEL_4;
      }
      uint64_t v62 = *(void *)(v80[0] + 16);
      if ((v62 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v63 = v62 & 0xFFFFFFFFFFFFFFF8;
      if (!v63) {
        goto LABEL_4;
      }
    }
    v98[0] = (const char *)v80;
    sub_1CC5FA668(v63 + 16, v98);
  }
LABEL_4:
  uint64_t v73 = (char *)(a2 + 3);
  uint64_t v74 = v6;
  uint64_t v75 = a2;
  uint64_t v12 = *(uint64_t **)(v5 + 112);
  unsigned int v13 = *((_DWORD *)v12 + 8);
  if (v13 <= 1) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v13;
  }
  if (v13 <= 0x11) {
    size_t v15 = v14;
  }
  else {
    size_t v15 = 18;
  }
  uint64_t v16 = *((unsigned int *)v12 + 2);
  uint64_t v78 = a3;
  if (v16)
  {
    uint64_t v76 = v5;
    uint64_t v77 = v9;
    uint64_t v17 = 0;
    int v18 = 0;
    do
      int v18 = 33 * v18 + aAgcGetDylibBas[v17++];
    while (v15 != v17);
    uint64_t v19 = *v12;
    uint64_t v20 = *v12 + 8 * v16 + 8;
    int v21 = 1;
    int v22 = v18;
    while (1)
    {
      uint64_t v23 = v22 & (v16 - 1);
      unint64_t v24 = *(void **)(v19 + 8 * v23);
      if (v24 != (void *)-8)
      {
        if (!v24) {
          goto LABEL_24;
        }
        if (*(_DWORD *)(v20 + 4 * v23) == v18
          && v15 == *v24
          && !memcmp("agc.get_dylib_base", (char *)v24 + *((unsigned int *)v12 + 5), v15))
        {
          break;
        }
      }
      int v22 = v21 + v23;
      ++v21;
    }
    if (v23 == -1)
    {
LABEL_24:
      uint64_t v26 = 0;
      a3 = v78;
      uint64_t v5 = v76;
      uint64_t v9 = v77;
      goto LABEL_25;
    }
    uint64_t v5 = v76;
    if ((int)v23 != v16 && (uint64_t v25 = *(void *)(*(void *)(v19 + 8 * (int)v23) + 8)) != 0)
    {
      if (*(unsigned char *)(v25 + 16)) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = *(void *)(*(void *)(v19 + 8 * (int)v23) + 8);
      }
    }
    else
    {
      uint64_t v26 = 0;
    }
    a3 = v78;
    uint64_t v9 = v77;
  }
  else
  {
    uint64_t v26 = 0;
  }
LABEL_25:
  unint64_t v27 = (const char *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v87 + 1912), (llvm::Type *)(*(_DWORD *)(*(void *)a3 + 8) >> 8));
  uint64_t v28 = *(const char **)a3;
  v98[0] = v27;
  v98[1] = v28;
  Declaratioint n = llvm::Intrinsic::getDeclaration((uint64_t **)v5, 1276, (uint64_t)v98, 2);
  if (!v9)
  {
    uint64_t v30 = *(void *)(v79 + 80);
    unsigned int v31 = v30 ? (llvm::BasicBlock *)(v30 - 24) : 0;
    unint64_t v85 = v31;
    FirstNonPHIOrDbgOrAlloca = llvm::BasicBlock::getFirstNonPHIOrDbgOrAlloca(v31);
    if (v26)
    {
      uint64_t v32 = *(uint64_t ***)(v26 + 24);
      __int16 v99 = 257;
      uint64_t v9 = (llvm::Instruction *)sub_1CB845BAC((uint64_t *)&v82, v32, (uint64_t **)v26, 0, 0, (uint64_t)v98, 0);
    }
    else
    {
      uint64_t v33 = 0;
      int v34 = 0;
      uint64_t v35 = *(uint64_t **)(v5 + 112);
      unsigned int v36 = *((_DWORD *)v35 + 8);
      if (v36 <= 1) {
        uint64_t v37 = 1;
      }
      else {
        uint64_t v37 = v36;
      }
      if (v36 <= 0xD) {
        size_t v38 = v37;
      }
      else {
        size_t v38 = 14;
      }
      uint64_t v39 = *((unsigned int *)v35 + 2);
      do
        int v34 = 33 * v34 + aAgcDylibBase_1[v33++];
      while (v38 != v33);
      unsigned int v40 = v39 - 1;
      uint64_t v41 = *v35;
      uint64_t v42 = *v35 + 8 * v39 + 8;
      int v43 = 1;
      int v44 = v34;
      while (1)
      {
        uint64_t v45 = v44 & v40;
        int v46 = *(void **)(v41 + 8 * v45);
        if (v46 != (void *)-8
          && *(_DWORD *)(v42 + 4 * v45) == v34
          && v38 == *v46
          && !memcmp("agc.dylib_base", (char *)v46 + *((unsigned int *)v35 + 5), v38))
        {
          break;
        }
        int v44 = v43 + v45;
        ++v43;
      }
      uint64_t v47 = *(void *)(*(void *)(v41 + 8 * (int)v45) + 8);
      uint64_t v48 = *(llvm::Type **)(v47 + 24);
      __int16 v81 = 257;
      char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*((void *)v85 + 7) + 40) + 272), v48, 1);
      int v50 = operator new(0x60uLL);
      v50[13] = v50[13] & 0x38000000 | 1;
      uint64_t v9 = (llvm::Instruction *)(v50 + 8);
      *(void *)int v50 = 0;
      *((void *)v50 + 1) = 0;
      *((void *)v50 + 2) = 0;
      *((void *)v50 + 3) = v50 + 8;
      __int16 v99 = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v50 + 8), (uint64_t)v48, v47, v98, 0, Alignment, 0);
      (*((void (**)(void **, llvm::Instruction *, uint64_t *, llvm::BasicBlock *, char *))*v89 + 2))(v89, v9, v80, v85, FirstNonPHIOrDbgOrAlloca);
      if (v83)
      {
        uint64_t v68 = (llvm::MDNode **)v82;
        uint64_t v69 = (llvm::MDNode **)((char *)v82 + 16 * v83);
        do
        {
          llvm::Instruction::setMetadata(v9, *(_DWORD *)v68, v68[1]);
          v68 += 2;
        }
        while (v68 != v69);
      }
      a3 = v78;
    }
    sub_1CC7EE188(v74, &v79)[1] = (uint64_t)v9;
    uint64_t v51 = (unsigned __int8 *)v75[6];
    unint64_t v85 = (llvm::BasicBlock *)v75[5];
    FirstNonPHIOrDbgOrAlloca = v73;
    v80[0] = (uint64_t)v51;
    if (v51)
    {
      llvm::MetadataTracking::track((uint64_t)v80, v51, 2);
      uint64_t v52 = v80[0];
    }
    else
    {
      uint64_t v52 = 0;
    }
    sub_1CB8461A4((uint64_t)&v82, 0, v52);
    if (v80[0])
    {
      int v64 = *(unsigned __int8 *)v80[0];
      if ((v64 - 4) > 0x1E)
      {
        if ((v64 - 3) >= 0xFFFFFFFE) {
          uint64_t v70 = v80[0];
        }
        else {
          uint64_t v70 = 0;
        }
        if ((v64 - 3) < 0xFFFFFFFE)
        {
          if (v64 == 3) {
            *(void *)(v80[0] + 8) = 0;
          }
          goto LABEL_50;
        }
        unint64_t v66 = v70 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v80[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v80[0] + 12)) {
          goto LABEL_50;
        }
        uint64_t v65 = *(void *)(v80[0] + 16);
        if ((v65 & 4) == 0) {
          goto LABEL_50;
        }
        unint64_t v66 = v65 & 0xFFFFFFFFFFFFFFF8;
        if (!v66) {
          goto LABEL_50;
        }
      }
      v98[0] = (const char *)v80;
      sub_1CC5FA668(v66 + 16, v98);
    }
  }
LABEL_50:
  if (Declaration) {
    uint64_t v53 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    uint64_t v53 = 0;
  }
  v80[0] = (uint64_t)v9;
  v80[1] = a3;
  __int16 v99 = 257;
  uint64_t v54 = sub_1CB845BAC((uint64_t *)&v82, v53, (uint64_t **)Declaration, v80, 2, (uint64_t)v98, 0);
  BOOL v55 = (unsigned __int8 *)v54;
  uint64_t v56 = *(void *)a3;
  __int16 v81 = 257;
  if (*(void *)v54 != v56)
  {
    if (*(unsigned __int8 *)(v54 + 16) <= 0x14u)
    {
      BOOL v55 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v88 + 28))(v88, 49, v54, v56);
      if (v55) {
        BOOL v59 = v55[16] >= 0x1Cu;
      }
      else {
        BOOL v59 = 0;
      }
      if (v59)
      {
        (*((void (**)(void **, unsigned __int8 *, uint64_t *, llvm::BasicBlock *, char *))*v89 + 2))(v89, v55, v80, v85, FirstNonPHIOrDbgOrAlloca);
        if (v83)
        {
          uint64_t v71 = (llvm::MDNode **)v82;
          uint64_t v72 = (llvm::MDNode **)((char *)v82 + 16 * v83);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v55, *(_DWORD *)v71, v71[1]);
            v71 += 2;
          }
          while (v71 != v72);
        }
      }
    }
    else
    {
      __int16 v99 = 257;
      BOOL v55 = (unsigned __int8 *)llvm::CastInst::Create(49, v54, v56, v98, 0);
      (*((void (**)(void **, unsigned __int8 *, uint64_t *, llvm::BasicBlock *, char *))*v89 + 2))(v89, v55, v80, v85, FirstNonPHIOrDbgOrAlloca);
      if (v83)
      {
        int v57 = (llvm::MDNode **)v82;
        int v58 = (llvm::MDNode **)((char *)v82 + 16 * v83);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v55, *(_DWORD *)v57, v57[1]);
          v57 += 2;
        }
        while (v57 != v58);
      }
    }
  }
  if (v82 != v84) {
    free(v82);
  }
  return v55;
}

uint64_t *sub_1CC7EE188(_DWORD *a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = sub_1CC7EE270((uint64_t)a1, *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 8;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_11;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_11:
    sub_1CD640980((uint64_t)a1, v7);
    uint64_t v8 = 0;
    sub_1CC7EE270((uint64_t)a1, *a2, &v8);
    uint64_t result = v8;
  }
  *a1 += 2;
  if (*result != -4096) {
    --a1[1];
  }
  *uint64_t result = *a2;
  result[1] = 0;
  return result;
}

uint64_t sub_1CC7EE270(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      uint64_t result = 0;
      goto LABEL_5;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      unsigned int v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_5;
      }
    }
    uint64_t result = 0;
    if (v10) {
      unsigned int v7 = v10;
    }
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void sub_1CC7EE31C(uint64_t a1, uint64_t a2)
{
  v90[32] = *MEMORY[0x1E4F143B8];
  uint64_t v70 = v72;
  uint64_t v71 = 0x800000000;
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2)
  {
    unsigned int v3 = 0;
    do
    {
      if (v3 >= HIDWORD(v71)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v70 + v3) = v2;
      unsigned int v3 = v71 + 1;
      LODWORD(v71) = v71 + 1;
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2);
    int v4 = (uint64_t *)v70;
    if (v3)
    {
      uint64_t v62 = (char *)v70 + 8 * v3;
      while (1)
      {
        unint64_t v63 = v4;
        uint64_t v5 = *v4;
        uint64_t v6 = *(void *)(*v4 + 24);
        if (!v6 || *(unsigned __int8 *)(v6 + 16) < 0x1Cu) {
          break;
        }
        uint64_t v10 = sub_1CC7ED9E4(a1, (uint64_t **)v6, a2);
        if (*(void *)v5)
        {
          **(void **)(v5 + 16) = *(void *)(v5 + 8);
          uint64_t v11 = *(void *)(v5 + 8);
          if (v11) {
            *(void *)(v11 + 16) = *(void *)(v5 + 16);
          }
        }
        *(void *)uint64_t v5 = v10;
        if (v10)
        {
          uint64_t v14 = *((void *)v10 + 1);
          BOOL v12 = (uint64_t *)(v10 + 8);
          uint64_t v13 = v14;
          *(void *)(v5 + 8) = v14;
          if (v14) {
            *(void *)(v13 + 16) = v5 + 8;
          }
          *(void *)(v5 + 16) = v12;
          uint64_t *v12 = v5;
        }
LABEL_96:
        int v4 = v63 + 1;
        if (v63 + 1 == (uint64_t *)v62)
        {
          int v4 = (uint64_t *)v70;
          goto LABEL_98;
        }
      }
      uint64_t v8 = *(void *)(v6 + 8);
      unint64_t v88 = v90;
      uint64_t v89 = 0x1000000000;
      sub_1CC7EE948((uint64_t)&v88, 1uLL, v5, v8);
      unsigned int v9 = v89;
      if (!v89) {
        goto LABEL_94;
      }
LABEL_23:
      size_t v15 = (char *)v88;
      uint64_t v16 = (char *)v88 + 16 * v9;
      uint64_t v17 = *(uint64_t ***)(*((void *)v16 - 2) + 24);
      if (v17) {
        BOOL v18 = *((unsigned __int8 *)v17 + 16) >= 0x1Cu;
      }
      else {
        BOOL v18 = 0;
      }
      if (!v18)
      {
        uint64_t v19 = *((void *)v16 - 1);
        if (v19)
        {
          while (1)
          {
            uint64_t v20 = *(void *)(v19 + 8);
            uint64_t v21 = *(void *)(v19 + 24);
            if (*(unsigned char *)(v21 + 16) != 3) {
              break;
            }
            uint64_t v19 = *(void *)(v19 + 8);
            if (!v20)
            {
              *((void *)v16 - 1) = 0;
              goto LABEL_31;
            }
          }
          *((void *)v16 - 1) = v20;
          uint64_t v55 = *(void *)(v21 + 8);
          if (v9 >= HIDWORD(v89)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v56 = &v15[16 * v9];
          *(void *)uint64_t v56 = v19;
          *((void *)v56 + 1) = v55;
          unsigned int v9 = v89 + 1;
        }
        else
        {
LABEL_31:
          --v9;
        }
        goto LABEL_93;
      }
      unint64_t v66 = (char *)v88 + 16 * v9;
      int v22 = sub_1CC7ED9E4(a1, v17, a2);
      if (!v89) {
        goto LABEL_92;
      }
      uint64_t v23 = v22;
      unint64_t v24 = (char *)v88;
      uint64_t v25 = (char *)v88 + 16 * v89;
      uint64_t v26 = (uint64_t *)(v17 + 3);
      while (1)
      {
        uint64_t v27 = *(void *)(*(void *)v24 + 24);
        if ((uint64_t **)v27 == v17)
        {
          uint64_t v57 = *((void *)v66 - 2);
          if (*(void *)v57)
          {
            **(void **)(v57 + 16) = *(void *)(v57 + 8);
            uint64_t v58 = *(void *)(v57 + 8);
            if (v58) {
              *(void *)(v58 + 16) = *(void *)(v57 + 16);
            }
          }
          *(void *)uint64_t v57 = v23;
          if (v23)
          {
            uint64_t v61 = v23[1];
            unint64_t v60 = v23 + 1;
            uint64_t v59 = v61;
            *(void *)(v57 + 8) = v61;
            if (v61) {
              *(void *)(v59 + 16) = v57 + 8;
            }
            *(void *)(v57 + 16) = v60;
            *unint64_t v60 = v57;
          }
LABEL_92:
          unsigned int v9 = v89 - 1;
LABEL_93:
          LODWORD(v89) = v9;
          if (!v9)
          {
LABEL_94:
            if (v88 != v90) {
              free(v88);
            }
            goto LABEL_96;
          }
          goto LABEL_23;
        }
        if (*(unsigned char *)(v27 + 16) != 5) {
          break;
        }
        AsInstructioint n = llvm::ConstantExpr::getAsInstruction(*(llvm::ConstantExpr **)(*(void *)v24 + 24), 0);
        unsigned int v29 = (llvm::UndefValue *)AsInstruction;
        unint64_t v30 = *(_DWORD *)(v27 + 20) & 0x7FFFFFF;
        if ((*(_DWORD *)(v27 + 20) & 0x7FFFFFF) != 0)
        {
          uint64_t v31 = 0;
          unint64_t v32 = 0;
          uint64_t v33 = v23 + 1;
          do
          {
            if (*(void *)(v27 - 32 * v30 + v31) == **(void **)v24)
            {
              int v34 = *(_DWORD *)(AsInstruction + 20);
              if ((v34 & 0x40000000) != 0) {
                uint64_t v35 = *(void *)(AsInstruction - 8);
              }
              else {
                uint64_t v35 = AsInstruction - 32 * (v34 & 0x7FFFFFF);
              }
              uint64_t v36 = v35 + v31;
              if (*(void *)(v35 + v31))
              {
                **(void **)(v36 + 16) = *(void *)(v36 + 8);
                uint64_t v37 = *(void *)(v36 + 8);
                if (v37) {
                  *(void *)(v37 + 16) = *(void *)(v36 + 16);
                }
              }
              *(void *)uint64_t v36 = v23;
              if (v23)
              {
                uint64_t v38 = *v33;
                uint64_t v39 = v35 + v31;
                *(void *)(v39 + 8) = *v33;
                if (v38) {
                  *(void *)(v38 + 16) = v39 + 8;
                }
                *(void *)(v39 + 16) = v33;
                *uint64_t v33 = v36;
              }
            }
            ++v32;
            unint64_t v30 = *(_DWORD *)(v27 + 20) & 0x7FFFFFF;
            v31 += 32;
          }
          while (v32 < v30);
        }
        uint64_t v47 = v17[5];
        *(void *)(AsInstruction + 40) = v47;
        *((_WORD *)v47 + 9) &= ~0x8000u;
        if ((*(unsigned char *)(AsInstruction + 23) & 0x10) != 0)
        {
          uint64_t v49 = v47[7];
          if (v49)
          {
            int v50 = *(llvm::ValueSymbolTable **)(v49 + 104);
            if (v50) {
              llvm::ValueSymbolTable::reinsertValue(v50, v29);
            }
          }
        }
        uint64_t v48 = *v26;
        *((void *)v29 + 3) = *v26;
        *((void *)v29 + 4) = v26;
        *(void *)(v48 + 8) = (char *)v29 + 24;
        uint64_t *v26 = (uint64_t)v29 + 24;
LABEL_64:
        v24 += 16;
        uint64_t v23 = v29;
        if (v24 == v25) {
          goto LABEL_92;
        }
      }
      uint64_t v40 = 0;
      uint64_t v41 = **v17;
      v73[0] = v74;
      v73[1] = (void *)0x200000000;
      uint64_t v77 = v41;
      uint64_t v78 = &v86;
      uint64_t v79 = &v87;
      uint64_t v80 = 0;
      int v81 = 0;
      __int16 v82 = 512;
      char v83 = 7;
      uint64_t v75 = 0;
      uint64_t v76 = 0;
      uint64_t v84 = 0;
      uint64_t v85 = 0;
      int v86 = &unk_1F2616E88;
      uint64_t v87 = &unk_1F2617008;
      uint64_t v75 = v17[5];
      uint64_t v76 = v17 + 3;
      uint64_t v42 = (unsigned __int8 *)v17[6];
      uint64_t v69 = v42;
      if (v42)
      {
        llvm::MetadataTracking::track((uint64_t)&v69, v42, 2);
        uint64_t v40 = (uint64_t)v69;
      }
      sub_1CB8461A4((uint64_t)v73, 0, v40);
      if (v69)
      {
        int v51 = *v69;
        if ((v51 - 4) > 0x1E)
        {
          if ((v51 - 3) >= 0xFFFFFFFE) {
            uint64_t v54 = v69;
          }
          else {
            uint64_t v54 = 0;
          }
          if ((v51 - 3) < 0xFFFFFFFE)
          {
            if (v51 == 3) {
              *((void *)v69 + 1) = 0;
            }
            goto LABEL_54;
          }
          unint64_t v53 = (unint64_t)(v54 + 8);
        }
        else
        {
          if ((v69[1] & 0x7F) != 2 && !*((_DWORD *)v69 + 3)) {
            goto LABEL_54;
          }
          uint64_t v52 = *((void *)v69 + 2);
          if ((v52 & 4) == 0) {
            goto LABEL_54;
          }
          unint64_t v53 = v52 & 0xFFFFFFFFFFFFFFF8;
          if (!v53) {
            goto LABEL_54;
          }
        }
        v67[0] = &v69;
        sub_1CC5FA668(v53 + 16, v67);
      }
LABEL_54:
      unsigned int v29 = llvm::UndefValue::get(*(llvm::UndefValue **)v27, v43);
      if ((*(_DWORD *)(v27 + 20) & 0x7FFFFFF) != 0)
      {
        int v44 = 0;
        do
        {
          AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v27, v44);
          if (AggregateElement == **(void ***)v24) {
            uint64_t v46 = (uint64_t)v23;
          }
          else {
            uint64_t v46 = (uint64_t)AggregateElement;
          }
          LODWORD(v69) = v44;
          __int16 v68 = 257;
          unsigned int v29 = sub_1CC2411F8((uint64_t)v73, (uint64_t)v29, v46, &v69, 1, (uint64_t)v67);
          int v44 = (llvm::Type *)(v44 + 1);
        }
        while (v44 < (*(_DWORD *)(v27 + 20) & 0x7FFFFFFu));
      }
      if (v73[0] != v74) {
        free(v73[0]);
      }
      goto LABEL_64;
    }
LABEL_98:
    if (v4 != (uint64_t *)v72) {
      free(v4);
    }
  }
}

uint64_t sub_1CC7EE948(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned int *)(result + 12) < a2)
  {
    *(_DWORD *)(result + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 >= a2) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *(unsigned int *)(result + 8);
  }
  if (v5)
  {
    unsigned int v9 = *(void **)result;
    do
    {
      *unsigned int v9 = a3;
      v9[1] = a4;
      v9 += 2;
      --v5;
    }
    while (v5);
  }
  unint64_t v6 = v4 - a2;
  if (v4 < a2)
  {
    unsigned int v7 = (void *)(*(void *)result + 16 * v4);
    do
    {
      void *v7 = a3;
      v7[1] = a4;
      v7 += 2;
    }
    while (!__CFADD__(v6++, 1));
  }
  *(_DWORD *)(result + 8) = a2;
  return result;
}

void sub_1CC7EEA04()
{
}

uint64_t sub_1CC7EEAA0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDBBD0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261F0E0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDBBD8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC7EEA04;
    v5[1] = &PassRegistry;
    unint64_t v4 = v5;
    std::__call_once(&qword_1EBCDBBD8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC7EEB50()
{
}

void sub_1CC7EEB90(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC7EEBC8(llvm::PassRegistry *a1, uint64_t a2)
{
  v3[0] = &unk_1F2617E40;
  v3[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v3);
}

uint64_t sub_1CC7EEC14(uint64_t a1, uint64_t **a2)
{
  v201[1] = *MEMORY[0x1E4F143B8];
  if (((*((unsigned __int16 *)a2 + 9) >> 4) & 0x3FFu) - 100 > 8)
  {
    char v7 = 0;
  }
  else
  {
    __int16 v197 = (uint64_t *)**a2;
    char v198 = v200;
    uint64_t v199 = 0x800000000;
    long long v192 = v196;
    long long v193 = v196;
    uint64_t v194 = 8;
    int v195 = 0;
    unsigned int v3 = a2 + 9;
    for (uint64_t i = a2[10]; ; uint64_t i = (uint64_t *)i[1])
    {
      if (i == (uint64_t *)v3) {
        goto LABEL_55;
      }
      unint64_t v5 = i - 3;
      if (!i) {
        unint64_t v5 = 0;
      }
      unint64_t v6 = (uint64_t *)v5[6];
      if (v6 != v5 + 5) {
        break;
      }
    }
    int v189 = 0;
    int v8 = 0;
    while (1)
    {
      uint64_t v9 = v6 ? (uint64_t)(v6 - 3) : 0;
      if (*(unsigned char *)(v9 + 16) == 84
        && (uint64_t v10 = *(void *)(v9 - 32)) != 0
        && !*(unsigned char *)(v10 + 16)
        && *(void *)(v10 + 24) == *(void *)(v9 + 72)
        && (*(unsigned char *)(v10 + 33) & 0x20) != 0
        && ((int v11 = *(_DWORD *)(*(v6 - 7) + 36), v12 = sub_1CB859A14(v11), (v11 - 2022) < 0x40)
         || v12
         || (v11 - 1682) <= 0x8B))
      {
        int v189 = 1;
        if (v8) {
          goto LABEL_58;
        }
        int v8 = 0;
      }
      else
      {
        v8 |= sub_1CC7EFA9C(v9);
        if (v189 & v8) {
          goto LABEL_57;
        }
      }
      unint64_t v6 = (uint64_t *)v6[1];
      uint64_t v13 = i - 3;
      if (!i) {
        uint64_t v13 = 0;
      }
      if (v6 == v13 + 5) {
        break;
      }
LABEL_29:
      if (i == (uint64_t *)v3) {
        goto LABEL_33;
      }
    }
    while (1)
    {
      uint64_t i = (uint64_t *)i[1];
      if (i == (uint64_t *)v3) {
        break;
      }
      uint64_t v14 = i - 3;
      if (!i) {
        uint64_t v14 = 0;
      }
      unint64_t v6 = (uint64_t *)v14[6];
      if (v6 != v14 + 5) {
        goto LABEL_29;
      }
    }
LABEL_33:
    if (v189)
    {
      if (v8)
      {
LABEL_57:
        int v189 = 1;
      }
      else
      {
        size_t v15 = a2[14];
        if (v15)
        {
          if (*((_DWORD *)v15 + 2))
          {
            uint64_t v16 = v15[5];
            if (v16)
            {
              int v17 = *(_DWORD *)(v16 + 40);
              if (v17)
              {
                uint64_t v18 = *(void *)(v16 + 24);
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_1EBCBE588))
                {
                  unint64_t v186 = llvm::hashing::detail::fixed_seed_override;
                  if (!llvm::hashing::detail::fixed_seed_override) {
                    unint64_t v186 = 0xFF51AFD7ED558CCDLL;
                  }
                  qword_1EBCBE580 = v186;
                  __cxa_guard_release(&qword_1EBCBE588);
                }
                unint64_t v19 = 0x9DDFEA08EB382D69
                    * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xD476A8E9D5DCE4CELL)) ^ ((0x9DDFEA08EB382D69
                                                                                           * (qword_1EBCBE580 ^ 0xD476A8E9D5DCE4CELL)) >> 47) ^ 0xBA05CD85A5B185BDLL);
                unsigned int v20 = (-348639895 * ((v19 >> 47) ^ v19)) ^ 0x616F6E73;
                for (int j = 1; ; ++j)
                {
                  unsigned int v22 = v20 & (v17 - 1);
                  uint64_t v23 = v18 + 24 * v22;
                  unint64_t v24 = *(void **)v23;
                  if (*(void *)v23 == -1)
                  {
                    if ("samplesnoalias" == (char *)-1) {
                      goto LABEL_54;
                    }
                  }
                  else if (v24 == (void *)-2)
                  {
                    if ("samplesnoalias" == (char *)-2) {
                      goto LABEL_54;
                    }
                  }
                  else if (*(void *)(v23 + 8) == 14 {
                         && *v24 == 0x6E73656C706D6173
                  }
                         && *(void *)((char *)v24 + 6) == 0x7361696C616F6E73)
                  {
LABEL_54:
                    int v189 = 0;
                    goto LABEL_58;
                  }
                  if (v24 == (void *)-1) {
                    break;
                  }
                  unsigned int v20 = j + v22;
                }
              }
            }
          }
        }
        int v189 = 0;
        a2[14] = (uint64_t *)llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a2 + 14), (uint64_t *)**a2, -1, "samplesnoalias", 0xEuLL, 0, 0);
      }
LABEL_58:
      uint64_t v26 = a2[10];
      if (v26 == (uint64_t *)v3)
      {
        char v7 = 0;
      }
      else
      {
        char v187 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v188 = v3;
        while (1)
        {
          uint64_t v29 = v26 ? (uint64_t)(v26 - 3) : 0;
          uint64_t v191 = v26;
          if (v189) {
            break;
          }
LABEL_103:
          uint64_t v59 = v29 + 40;
          uint64_t v190 = v29;
          for (uint64_t k = *(void *)(v29 + 48); k != v59; uint64_t k = *(void *)(k + 8))
          {
            uint64_t v61 = (uint64_t ***)(k - 24);
            if (k) {
              uint64_t v62 = k - 24;
            }
            else {
              uint64_t v62 = 0;
            }
            if (*(unsigned char *)(v62 + 16) == 84)
            {
              uint64_t v63 = *(void *)(v62 - 32);
              if (v63)
              {
                if (!*(unsigned char *)(v63 + 16)
                  && *(void *)(v63 + 24) == *(void *)(v62 + 72)
                  && (*(unsigned char *)(v63 + 33) & 0x20) != 0)
                {
                  int v88 = *(_DWORD *)(*(void *)(k - 56) + 36);
                  BOOL v89 = sub_1CB859A14(v88);
                  unsigned int v90 = v88 - 1682;
                  if (v89 || v90 < 0x8C)
                  {
                    if (v90 >= 0x8C)
                    {
LABEL_149:
                      if ((v88 - 2029) > 0x35
                        || ((1 << (v88 + 19)) & 0x21002100210021) == 0)
                      {
                        if ((*(unsigned char *)(k - 1) & 0x20) == 0) {
                          goto LABEL_171;
                        }
                        uint64_t v92 = ***v61;
                        v201[0] = k - 24;
                        int v93 = *(_DWORD *)(v92 + 2496);
                        if (!v93)
                        {
                          int v115 = 0;
                          goto LABEL_185;
                        }
                        uint64_t v94 = *(void *)(v92 + 2480);
                        int v95 = v93 - 1;
                        unsigned int v96 = v95 & ((v61 >> 4) ^ (v61 >> 9));
                        uint64_t v97 = (void *)(v94 + 40 * v96);
                        uint64_t v98 = (void ***)*v97;
                        if ((uint64_t ***)*v97 != v61)
                        {
                          __int16 v99 = 0;
                          int v100 = 1;
                          while (v98 != (void ***)-4096)
                          {
                            if (v99) {
                              BOOL v101 = 0;
                            }
                            else {
                              BOOL v101 = v98 == (void ***)-8192;
                            }
                            if (v101) {
                              __int16 v99 = v97;
                            }
                            unsigned int v102 = v96 + v100++;
                            unsigned int v96 = v102 & v95;
                            uint64_t v97 = (void *)(v94 + 40 * v96);
                            uint64_t v98 = (void ***)*v97;
                            if ((uint64_t ***)*v97 == v61) {
                              goto LABEL_166;
                            }
                          }
                          if (v99) {
                            int v115 = v99;
                          }
                          else {
                            int v115 = v97;
                          }
LABEL_185:
                          uint64_t v97 = sub_1CC609054(v92 + 2480, (uint64_t)v201, v201, v115);
                          uint64_t v116 = v201[0];
                          v97[4] = 0;
                          v97[3] = 0;
                          *uint64_t v97 = v116;
                          v97[1] = v97 + 3;
                          v97[2] = 0x100000000;
                        }
LABEL_166:
                        uint64_t v103 = *((unsigned int *)v97 + 4);
                        if (v103)
                        {
                          long long v104 = (llvm::MDNode **)(v97[1] + 8);
                          uint64_t v105 = 16 * v103;
                          while (*((_DWORD *)v104 - 2) != 7)
                          {
                            long long v106 = 0;
                            v104 += 2;
                            v105 -= 16;
                            if (!v105) {
                              goto LABEL_172;
                            }
                          }
                          long long v106 = *v104;
                        }
                        else
                        {
LABEL_171:
                          long long v106 = 0;
                        }
LABEL_172:
                        uint64_t v107 = **a2;
                        if (!v28)
                        {
                          if (!v27)
                          {
                            if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
                            {
                              uint64_t v108 = *(void *)(*(void *)v107 + 152);
                              uint64_t v109 = *(unsigned int *)(*(void *)v107 + 168);
                              if (!v109) {
                                goto LABEL_186;
                              }
                              LODWORD(v110) = (v109 - 1) & ((a2 >> 4) ^ (a2 >> 9));
                              int v111 = (uint64_t ***)(v108 + 16 * v110);
                              uint64_t v112 = *v111;
                              if (*v111 != a2)
                              {
                                int v113 = 1;
                                while (v112 != (uint64_t **)-4096)
                                {
                                  int v114 = v110 + v113++;
                                  uint64_t v110 = v114 & (v109 - 1);
                                  uint64_t v112 = *(uint64_t ***)(v108 + 16 * v110);
                                  if (v112 == a2)
                                  {
                                    int v111 = (uint64_t ***)(v108 + 16 * v110);
                                    goto LABEL_187;
                                  }
                                }
LABEL_186:
                                int v111 = (uint64_t ***)(v108 + 16 * v109);
                              }
LABEL_187:
                              uint64_t v117 = v111[1];
                              size_t v120 = (size_t)*v117;
                              uint64_t v118 = (unsigned __int8 *)(v117 + 2);
                              size_t v119 = v120;
                            }
                            else
                            {
                              size_t v119 = 0;
                              uint64_t v118 = (unsigned __int8 *)&byte_1CFBCE98E;
                            }
                            uint64_t v27 = llvm::MDBuilder::createAnonymousAARoot(&v197, v118, v119, 0);
                          }
                          uint64_t v28 = llvm::MDBuilder::createAnonymousAARoot(&v197, "Samples", 7uLL, (uint64_t)v27);
                        }
                        v201[0] = (uint64_t)v28;
                        char v187 = 1;
                        Impl = llvm::MDTuple::getImpl(v107, v201, 1, 0, 1);
                        int v123 = llvm::MDNode::concatenate(v106, Impl, v122);
                        llvm::Instruction::setMetadata((llvm::Instruction *)(k - 24), 7, v123);
                        continue;
                      }
                    }
                    if (v199 >= (unint64_t)HIDWORD(v199)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v198 + v199) = v61;
                    LODWORD(v199) = v199 + 1;
                    char v187 = 1;
                    continue;
                  }
                  if ((v88 - 2022) < 0x40) {
                    goto LABEL_149;
                  }
                }
              }
            }
            if (sub_1CC7EFA9C(v62))
            {
              if (v28 && v199)
              {
                int v64 = (llvm::Instruction **)v198;
                uint64_t v65 = (llvm::Instruction **)((char *)v198 + 8 * v199);
                while (2)
                {
                  unint64_t v66 = *v64;
                  if ((*((unsigned char *)*v64 + 23) & 0x20) == 0) {
                    goto LABEL_133;
                  }
                  uint64_t v67 = ***(void ***)v66;
                  v201[0] = (uint64_t)*v64;
                  int v68 = *(_DWORD *)(v67 + 2496);
                  if (v68)
                  {
                    uint64_t v69 = *(void *)(v67 + 2480);
                    int v70 = v68 - 1;
                    unsigned int v71 = v70 & ((v66 >> 4) ^ (v66 >> 9));
                    uint64_t v72 = (llvm::Instruction **)(v69 + 40 * v71);
                    uint64_t v73 = *v72;
                    if (*v72 != v66)
                    {
                      uint64_t v74 = 0;
                      int v75 = 1;
                      while (v73 != (llvm::Instruction *)-4096)
                      {
                        if (v74) {
                          BOOL v76 = 0;
                        }
                        else {
                          BOOL v76 = v73 == (llvm::Instruction *)-8192;
                        }
                        if (v76) {
                          uint64_t v74 = v72;
                        }
                        unsigned int v77 = v71 + v75++;
                        unsigned int v71 = v77 & v70;
                        uint64_t v72 = (llvm::Instruction **)(v69 + 40 * v71);
                        uint64_t v73 = *v72;
                        if (*v72 == v66) {
                          goto LABEL_128;
                        }
                      }
                      if (v74) {
                        int v86 = v74;
                      }
                      else {
                        int v86 = v72;
                      }
LABEL_140:
                      uint64_t v72 = (llvm::Instruction **)sub_1CC609054(v67 + 2480, (uint64_t)v201, v201, v86);
                      uint64_t v87 = v201[0];
                      v72[4] = 0;
                      v72[3] = 0;
                      *uint64_t v72 = (llvm::Instruction *)v87;
                      v72[1] = (llvm::Instruction *)(v72 + 3);
                      v72[2] = (llvm::Instruction *)0x100000000;
                    }
LABEL_128:
                    uint64_t v78 = *((unsigned int *)v72 + 4);
                    if (v78)
                    {
                      uint64_t v79 = (llvm::MDNode **)((char *)v72[1] + 8);
                      uint64_t v80 = 16 * v78;
                      while (*((_DWORD *)v79 - 2) != 8)
                      {
                        int v81 = 0;
                        v79 += 2;
                        v80 -= 16;
                        if (!v80) {
                          goto LABEL_134;
                        }
                      }
                      int v81 = *v79;
                      goto LABEL_134;
                    }
LABEL_133:
                    int v81 = 0;
LABEL_134:
                    uint64_t v82 = **a2;
                    v201[0] = (uint64_t)v28;
                    char v83 = llvm::MDTuple::getImpl(v82, v201, 1, 0, 1);
                    uint64_t v85 = llvm::MDNode::concatenate(v81, v83, v84);
                    llvm::Instruction::setMetadata(v66, 8, v85);
                    if (++v64 == v65) {
                      goto LABEL_142;
                    }
                    continue;
                  }
                  break;
                }
                int v86 = 0;
                goto LABEL_140;
              }
LABEL_142:
              uint64_t v28 = 0;
              uint64_t v27 = 0;
              LODWORD(v199) = 0;
            }
          }
          BOOL v124 = v193;
          uint64_t v125 = HIDWORD(v194);
          if (v193 != v192)
          {
            unsigned int v132 = v194;
            unint64_t v126 = (uint64_t *)v188;
            uint64_t v128 = v190;
            uint64_t v127 = v191;
LABEL_205:
            if (3 * v132 <= 4 * (HIDWORD(v194) - v195))
            {
              if (v132 >= 0x40) {
                v132 *= 2;
              }
              else {
                unsigned int v132 = 128;
              }
            }
            else if (v132 - HIDWORD(v194) >= v132 >> 3)
            {
              goto LABEL_207;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v192, v132);
            unsigned int v132 = v194;
            BOOL v124 = v193;
LABEL_207:
            unsigned int v133 = v132 - 1;
            unsigned int v134 = (v132 - 1) & ((v128 >> 4) ^ (v128 >> 9));
            BOOL v135 = &v124[8 * v134];
            uint64_t v136 = *(void *)v135;
            if (*(void *)v135 == -1)
            {
              uint64_t v137 = 0;
LABEL_264:
              if (v137) {
                size_t v160 = v137;
              }
              else {
                size_t v160 = v135;
              }
              if (*v160 != v128)
              {
                if (*v160 == -2) {
                  --v195;
                }
                else {
                  ++HIDWORD(v194);
                }
                *size_t v160 = v128;
              }
            }
            else
            {
              uint64_t v137 = 0;
              int v138 = 1;
              while (v136 != v128)
              {
                if (v137) {
                  BOOL v139 = 0;
                }
                else {
                  BOOL v139 = v136 == -2;
                }
                if (v139) {
                  uint64_t v137 = v135;
                }
                unsigned int v140 = v134 + v138++;
                unsigned int v134 = v140 & v133;
                BOOL v135 = &v124[8 * (v140 & v133)];
                uint64_t v136 = *(void *)v135;
                if (*(void *)v135 == -1) {
                  goto LABEL_264;
                }
              }
            }
            goto LABEL_271;
          }
          unint64_t v126 = (uint64_t *)v188;
          uint64_t v128 = v190;
          uint64_t v127 = v191;
          if (HIDWORD(v194))
          {
            uint64_t v129 = 0;
            uint64_t v130 = 8 * HIDWORD(v194);
            int v131 = (uint64_t *)v193;
            while (*v131 != v190)
            {
              if (*v131 == -2) {
                uint64_t v129 = v131;
              }
              ++v131;
              v130 -= 8;
              if (!v130)
              {
                if (!v129) {
                  goto LABEL_202;
                }
                *uint64_t v129 = v190;
                --v195;
                goto LABEL_271;
              }
            }
            goto LABEL_271;
          }
LABEL_202:
          unsigned int v132 = v194;
          if (HIDWORD(v194) >= v194) {
            goto LABEL_205;
          }
          ++HIDWORD(v194);
          *(void *)&v193[8 * v125] = v190;
LABEL_271:
          uint64_t v26 = (uint64_t *)v127[1];
          if (v26 == v126) {
            goto LABEL_279;
          }
        }
        uint64_t v30 = *(void *)(v29 + 8);
        if (!v30)
        {
LABEL_74:
          if (v28 && v199)
          {
            uint64_t v35 = (llvm::Instruction **)v198;
            uint64_t v36 = (llvm::Instruction **)((char *)v198 + 8 * v199);
            do
            {
              uint64_t v37 = *v35;
              if ((*((unsigned char *)*v35 + 23) & 0x20) == 0) {
                goto LABEL_93;
              }
              uint64_t v38 = ***(void ***)v37;
              v201[0] = (uint64_t)*v35;
              int v39 = *(_DWORD *)(v38 + 2496);
              if (v39)
              {
                uint64_t v40 = *(void *)(v38 + 2480);
                int v41 = v39 - 1;
                unsigned int v42 = v41 & ((v37 >> 4) ^ (v37 >> 9));
                int v43 = (llvm::Instruction **)(v40 + 40 * v42);
                int v44 = *v43;
                if (*v43 == v37) {
                  goto LABEL_88;
                }
                uint64_t v45 = 0;
                int v46 = 1;
                while (v44 != (llvm::Instruction *)-4096)
                {
                  if (v45) {
                    BOOL v47 = 0;
                  }
                  else {
                    BOOL v47 = v44 == (llvm::Instruction *)-8192;
                  }
                  if (v47) {
                    uint64_t v45 = v43;
                  }
                  unsigned int v48 = v42 + v46++;
                  unsigned int v42 = v48 & v41;
                  int v43 = (llvm::Instruction **)(v40 + 40 * v42);
                  int v44 = *v43;
                  if (*v43 == v37) {
                    goto LABEL_88;
                  }
                }
                if (v45) {
                  uint64_t v57 = v45;
                }
                else {
                  uint64_t v57 = v43;
                }
              }
              else
              {
                uint64_t v57 = 0;
              }
              int v43 = (llvm::Instruction **)sub_1CC609054(v38 + 2480, (uint64_t)v201, v201, v57);
              uint64_t v58 = v201[0];
              void v43[4] = 0;
              v43[3] = 0;
              llvm::Type *v43 = (llvm::Instruction *)v58;
              v43[1] = (llvm::Instruction *)(v43 + 3);
              void v43[2] = (llvm::Instruction *)0x100000000;
LABEL_88:
              uint64_t v49 = *((unsigned int *)v43 + 4);
              if (v49)
              {
                int v50 = (llvm::MDNode **)((char *)v43[1] + 8);
                uint64_t v51 = 16 * v49;
                while (*((_DWORD *)v50 - 2) != 8)
                {
                  uint64_t v52 = 0;
                  v50 += 2;
                  v51 -= 16;
                  if (!v51) {
                    goto LABEL_94;
                  }
                }
                uint64_t v52 = *v50;
                goto LABEL_94;
              }
LABEL_93:
              uint64_t v52 = 0;
LABEL_94:
              uint64_t v53 = **a2;
              v201[0] = (uint64_t)v28;
              uint64_t v54 = llvm::MDTuple::getImpl(v53, v201, 1, 0, 1);
              uint64_t v56 = llvm::MDNode::concatenate(v52, v54, v55);
              llvm::Instruction::setMetadata(v37, 8, v56);
              ++v35;
            }
            while (v35 != v36);
          }
          uint64_t v28 = 0;
          uint64_t v27 = 0;
          LODWORD(v199) = 0;
          goto LABEL_103;
        }
        while (1)
        {
          uint64_t v31 = *(void *)(v30 + 24);
          unsigned int v32 = *(unsigned __int8 *)(v31 + 16);
          BOOL v33 = v31 && v32 >= 0x1C;
          if (v33 && v32 - 29 < 0xB) {
            break;
          }
          uint64_t v30 = *(void *)(v30 + 8);
          if (!v30) {
            goto LABEL_74;
          }
        }
        int v141 = v194 - 1;
        if (v193 == v192) {
          int v142 = HIDWORD(v194);
        }
        else {
          int v142 = v194;
        }
        unsigned int v143 = &v193[8 * v142];
        unint64_t v144 = v193;
LABEL_222:
        uint64_t v145 = *(void *)(v31 + 40);
        if (v144 == v192)
        {
          if (HIDWORD(v194))
          {
            uint64_t v146 = 0;
            while (*(void *)&v192[v146] != v145)
            {
              v146 += 8;
              if (8 * HIDWORD(v194) == v146)
              {
                int v147 = HIDWORD(v194);
                goto LABEL_242;
              }
            }
            unint64_t v156 = &v192[v146];
            int v147 = HIDWORD(v194);
            unint64_t v144 = v192;
          }
          else
          {
            int v147 = 0;
LABEL_242:
            unint64_t v144 = v192;
            unint64_t v156 = &v192[8 * HIDWORD(v194)];
          }
        }
        else
        {
          unsigned int v148 = v141 & ((v145 >> 4) ^ (v145 >> 9));
          uint64_t v149 = &v193[8 * v148];
          uint64_t v150 = *(void *)v149;
          if (*(void *)v149 == -1)
          {
            uint64_t v151 = 0;
LABEL_244:
            if (v151) {
              uint64_t v149 = v151;
            }
            uint64_t v155 = *(void *)v149;
          }
          else
          {
            uint64_t v151 = 0;
            int v152 = 1;
            while (v150 != v145)
            {
              if (v151) {
                BOOL v153 = 0;
              }
              else {
                BOOL v153 = v150 == -2;
              }
              if (v153) {
                uint64_t v151 = v149;
              }
              unsigned int v154 = v148 + v152++;
              unsigned int v148 = v154 & v141;
              uint64_t v149 = &v193[8 * (v154 & v141)];
              uint64_t v150 = *(void *)v149;
              if (*(void *)v149 == -1) {
                goto LABEL_244;
              }
            }
            uint64_t v155 = v145;
          }
          if (v155 == v145) {
            unint64_t v156 = v149;
          }
          else {
            unint64_t v156 = v143;
          }
          int v147 = HIDWORD(v194);
          unint64_t v144 = v193;
        }
        if (v144 != v192) {
          int v147 = v194;
        }
        if (v156 != &v144[8 * v147])
        {
          while (1)
          {
            uint64_t v30 = *(void *)(v30 + 8);
            if (!v30) {
              goto LABEL_74;
            }
            uint64_t v31 = *(void *)(v30 + 24);
            unsigned int v157 = *(unsigned __int8 *)(v31 + 16);
            if (v31) {
              BOOL v158 = v157 >= 0x1C;
            }
            else {
              BOOL v158 = 0;
            }
            if (v158 && v157 - 29 < 0xB) {
              goto LABEL_222;
            }
          }
        }
LABEL_279:
        if (v28 && v199)
        {
          unint64_t v161 = (llvm::Instruction **)v198;
          uint64_t v162 = (llvm::Instruction **)((char *)v198 + 8 * v199);
          do
          {
            uint64_t v163 = *v161;
            if ((*((unsigned char *)*v161 + 23) & 0x20) == 0) {
              goto LABEL_298;
            }
            uint64_t v164 = ***(void ***)v163;
            v201[0] = (uint64_t)*v161;
            int v165 = *(_DWORD *)(v164 + 2496);
            if (v165)
            {
              uint64_t v166 = *(void *)(v164 + 2480);
              int v167 = v165 - 1;
              unsigned int v168 = v167 & ((v163 >> 4) ^ (v163 >> 9));
              uint64_t v169 = (llvm::Instruction **)(v166 + 40 * v168);
              BOOL v170 = *v169;
              if (*v169 == v163) {
                goto LABEL_293;
              }
              BOOL v171 = 0;
              int v172 = 1;
              while (v170 != (llvm::Instruction *)-4096)
              {
                if (v171) {
                  BOOL v173 = 0;
                }
                else {
                  BOOL v173 = v170 == (llvm::Instruction *)-8192;
                }
                if (v173) {
                  BOOL v171 = v169;
                }
                unsigned int v174 = v168 + v172++;
                unsigned int v168 = v174 & v167;
                uint64_t v169 = (llvm::Instruction **)(v166 + 40 * v168);
                BOOL v170 = *v169;
                if (*v169 == v163) {
                  goto LABEL_293;
                }
              }
              if (v171) {
                long long v183 = v171;
              }
              else {
                long long v183 = v169;
              }
            }
            else
            {
              long long v183 = 0;
            }
            uint64_t v169 = (llvm::Instruction **)sub_1CC609054(v164 + 2480, (uint64_t)v201, v201, v183);
            uint64_t v184 = v201[0];
            v169[4] = 0;
            v169[3] = 0;
            *uint64_t v169 = (llvm::Instruction *)v184;
            v169[1] = (llvm::Instruction *)(v169 + 3);
            v169[2] = (llvm::Instruction *)0x100000000;
LABEL_293:
            uint64_t v175 = *((unsigned int *)v169 + 4);
            if (v175)
            {
              BOOL v176 = (llvm::MDNode **)((char *)v169[1] + 8);
              uint64_t v177 = 16 * v175;
              while (*((_DWORD *)v176 - 2) != 8)
              {
                uint64_t v178 = 0;
                v176 += 2;
                v177 -= 16;
                if (!v177) {
                  goto LABEL_299;
                }
              }
              uint64_t v178 = *v176;
              goto LABEL_299;
            }
LABEL_298:
            uint64_t v178 = 0;
LABEL_299:
            uint64_t v179 = **a2;
            v201[0] = (uint64_t)v28;
            long long v180 = llvm::MDTuple::getImpl(v179, v201, 1, 0, 1);
            long long v182 = llvm::MDNode::concatenate(v178, v180, v181);
            llvm::Instruction::setMetadata(v163, 8, v182);
            ++v161;
          }
          while (v161 != v162);
        }
        char v7 = v187;
      }
      LODWORD(v199) = 0;
    }
    else
    {
LABEL_55:
      char v7 = 0;
    }
    if (v193 != v192) {
      free(v193);
    }
    if (v198 != v200) {
      free(v198);
    }
  }
  return v7 & 1;
}

BOOL sub_1CC7EFA9C(uint64_t a1)
{
  BOOL result = 0;
  int v3 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v4 = (v3 - 33);
  if (v4 > 0x37) {
    return result;
  }
  if (((1 << (v3 - 33)) & 0x8000000000041) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 64);
    if (v5 && (*(unsigned char *)(v5 + 17) & 0x30) != 0) {
      return 0;
    }
    int v6 = *(_DWORD *)(a1 + 20);
    if (v6 < 0 && (uint64_t v11 = a1 - 32 * (v6 & 0x7FFFFFF), v14 = *(void *)(v11 - 8), v12 = v11 - 8, (v13 = v14) != 0))
    {
      uint64_t v15 = -v13;
      while (1)
      {
        unsigned int v16 = *(_DWORD *)(*(void *)(v12 + v15) + 8);
        BOOL v17 = v16 > 7;
        int v18 = (1 << v16) & 0x83;
        if (v17 || v18 == 0) {
          break;
        }
        v15 += 16;
        if (!v15) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 45) & 1) != 0
        || (llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44) & 1) != 0)
      {
        return 0;
      }
      int v3 = *(unsigned __int8 *)(a1 + 16);
    }
  }
  else
  {
    if (v4 == 27) {
      return (*(_WORD *)(a1 + 18) & 0x301) != 0;
    }
    if (((1 << (v3 - 33)) & 0x808001D0000010) == 0) {
      return result;
    }
  }
  if (v3 == 61) {
    return 0;
  }
  if (v3 != 84) {
    return 1;
  }
  uint64_t v7 = *(void *)(a1 - 32);
  if (!v7 || *(unsigned char *)(v7 + 16) || *(void *)(v7 + 24) != *(void *)(a1 + 72) || (*(unsigned char *)(v7 + 33) & 0x20) == 0) {
    return 1;
  }
  BOOL result = 0;
  int v8 = *(_DWORD *)(v7 + 36);
  if ((v8 - 2630) < 0x20) {
    return result;
  }
  if (v8 <= 2446)
  {
    if (v8 == 2144) {
      return result;
    }
    unsigned int v9 = v8 - 1996;
    goto LABEL_27;
  }
  if ((v8 - 2447) > 0x1F || ((1 << (v8 + 113)) & 0xFF000073) == 0)
  {
    unsigned int v9 = v8 - 2703;
LABEL_27:
    if (v9 < 2) {
      return result;
    }
    if ((v8 - 2838) < 3) {
      return 0;
    }
    unsigned int v10 = v8 - 2712;
    if (v10 <= 0x13) {
      return (0x3300u >> v10) & 1;
    }
    return 1;
  }
  return result;
}

void sub_1CC7EFC70()
{
}

uint64_t sub_1CC7EFD0C(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDBBE0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261F180;
  *(unsigned char *)(a1 + 28) = a2;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDBBE8, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CC7EFC70;
    v6[1] = &PassRegistry;
    uint64_t v5 = v6;
    std::__call_once(&qword_1EBCDBBE8, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC7EFDC0()
{
}

void sub_1CC7EFE04(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC7EFE3C()
{
  return "GPU Load and Store Shrinker";
}

void sub_1CC7EFE4C(llvm::PassRegistry *a1, uint64_t a2)
{
  v3[0] = &unk_1F2617E40;
  v3[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v3);
}

uint64_t sub_1CC7EFE98(uint64_t a1, uint64_t a2)
{
  v258[8] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 40);
  if (*(char *)(v4 + 239) < 0) {
    sub_1CB8BDF7C((uint64_t)&v223, *(const void **)(v4 + 216), *(void *)(v4 + 224));
  }
  else {
    std::string v223 = *(std::string *)(v4 + 216);
  }
  if (!std::string::compare(&v223, 0, 4uLL, "agx1"))
  {
    uint64_t v5 = 27;
  }
  else if (!std::string::compare(&v223, 0, 4uLL, "agx2"))
  {
    uint64_t v5 = 28;
  }
  else if (!std::string::compare(&v223, 0, 4uLL, "agx3"))
  {
    uint64_t v5 = 29;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v223.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a1 + 28) && v5 == 27) {
    sub_1CD108A9C(a2);
  }
  int v6 = v258;
  int v256 = v258;
  uint64_t v257 = 0x800000000;
  uint64_t v7 = a2 + 72;
  for (uint64_t i = *(void *)(a2 + 80); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == v7)
    {
      char v172 = 0;
      return v172 & 1;
    }
    uint64_t v9 = i - 24;
    if (!i) {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    if (v10 != v9 + 40) {
      break;
    }
  }
  char v220 = 0;
  uint64_t v11 = (v5 - 29);
  uint64_t v12 = &v254;
  uint64_t v13 = &v255;
  uint64_t v14 = &v243;
  uint64_t v15 = (llvm::Instruction *)&v253;
  unsigned int v16 = &v244;
  BOOL v17 = v229;
  int v18 = &v239;
  unint64_t v19 = &v240;
  unsigned int v20 = &v238;
  uint64_t v21 = v230;
  while (1)
  {
    unsigned int v22 = (unsigned __int8 *)(v10 - 24);
    if (!v10) {
      unsigned int v22 = 0;
    }
    int v23 = v22[16];
    if (v23 == 60) {
      unint64_t v24 = (llvm::Value *)v22;
    }
    else {
      unint64_t v24 = 0;
    }
    if (!v10 || v23 != 60 || !*((void *)v24 + 1)) {
      goto LABEL_53;
    }
    uint64_t v26 = (uint64_t *)((char *)v24 - 32);
    uint64_t v25 = *((void *)v24 - 4);
    unsigned int v27 = *(_DWORD *)(*(void *)v25 + 8);
    if ((v27 & 0xFE) == 0x12) {
      unsigned int v27 = *(_DWORD *)(**(void **)(*(void *)v25 + 16) + 8);
    }
    int v28 = v27 >> 8;
    if (!*(unsigned char *)(a1 + 28))
    {
      if (v28 != 2) {
        goto LABEL_53;
      }
      char v214 = v19;
      uint64_t v216 = v17;
      uint64_t v43 = v11;
      uint64_t v194 = v15;
      char v198 = v13;
      uint64_t v201 = (uint64_t *)((char *)v24 - 32);
      BOOL v202 = v14;
      uint64_t v191 = v6;
      uint64_t v193 = a1;
      uint64_t v44 = v5;
      uint64_t v45 = v12;
      int v46 = v16;
      BOOL v47 = v18;
      unsigned int v48 = v20;
      uint64_t v49 = v21;
      uint64_t v218 = v24;
      int v50 = sub_1CD0FF880(v25, 1);
      int v28 = 2;
      BOOL v17 = v216;
      unint64_t v24 = v218;
      uint64_t v21 = v49;
      unsigned int v20 = v48;
      unint64_t v19 = v214;
      int v18 = v47;
      unsigned int v16 = v46;
      uint64_t v12 = v45;
      uint64_t v5 = v44;
      int v6 = v191;
      a1 = v193;
      uint64_t v13 = v198;
      uint64_t v26 = v201;
      uint64_t v14 = v202;
      uint64_t v15 = v194;
      uint64_t v11 = v43;
      if (!v50) {
        goto LABEL_53;
      }
    }
    uint64_t v29 = *(void *)v24;
    if ((*(_DWORD *)(*(void *)v24 + 8) & 0xFE) != 0x12) {
      goto LABEL_53;
    }
    unsigned int v204 = v28;
    uint64_t v200 = v26;
    uint64_t v215 = v17;
    unint64_t v217 = v24;
    unint64_t v186 = v21;
    char v187 = v20;
    __int16 v213 = v19;
    uint64_t v188 = v18;
    int v189 = v16;
    uint64_t v190 = v12;
    unsigned int v192 = v11;
    unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(**(llvm::Type ***)(v29 + 16));
    if (PrimitiveSizeInBits < 0x10)
    {
      uint64_t v11 = v192;
      unsigned int v16 = v189;
      uint64_t v12 = v190;
      unint64_t v19 = v213;
      BOOL v17 = v215;
      unsigned int v20 = v187;
      int v18 = v188;
      uint64_t v21 = v186;
      goto LABEL_53;
    }
    unsigned int v197 = PrimitiveSizeInBits;
    unsigned int v31 = sub_1CD10FE8C((uint64_t)v217);
    uint64_t v11 = v192;
    if (v192 > 0xFFFFFFFD)
    {
      int v33 = 0;
      unint64_t v19 = v213;
      BOOL v17 = v215;
      unsigned int v20 = v187;
      int v18 = v188;
      uint64_t v21 = v186;
      uint64_t v36 = v217;
      unsigned int v34 = v197;
    }
    else
    {
      int v33 = 0;
      unsigned int v34 = v197;
      if (*(unsigned char *)(a1 + 28))
      {
        v32.i32[0] = v197;
        uint8x8_t v35 = (uint8x8_t)vcnt_s8(v32);
        v35.i16[0] = vaddlv_u8(v35);
        unint64_t v19 = v213;
        BOOL v17 = v215;
        unsigned int v20 = v187;
        int v18 = v188;
        uint64_t v21 = v186;
        uint64_t v36 = v217;
        if (v35.i32[0] <= 1u)
        {
          int v33 = 0;
          if (v204 != 3 && v204 != 68)
          {
            uint64_t v37 = *((void *)v217 + 1);
            if (v37)
            {
              unsigned int v38 = -1;
              do
              {
                int v33 = 0;
                uint64_t v39 = *(void *)(v37 + 24);
                if (!v39 || *(unsigned char *)(v39 + 16) != 89) {
                  break;
                }
                uint64_t v40 = *(void *)(v39 - 32);
                if (*(unsigned char *)(v40 + 16) != 16)
                {
                  int v33 = 0;
                  break;
                }
                int v41 = (void *)(v40 + 24);
                if (*(_DWORD *)(v40 + 32) >= 0x41u) {
                  int v41 = (void *)*v41;
                }
                unsigned int v42 = *(_DWORD *)v41;
                if (v38 >= v42) {
                  unsigned int v38 = v42;
                }
                uint64_t v37 = *(void *)(v37 + 8);
                int v33 = v38;
              }
              while (v37);
            }
            else
            {
              int v33 = -1;
            }
          }
        }
      }
      else
      {
        unint64_t v19 = v213;
        BOOL v17 = v215;
        unsigned int v20 = v187;
        int v18 = v188;
        uint64_t v21 = v186;
        uint64_t v36 = v217;
      }
    }
    int v53 = *(_DWORD *)(v29 + 32);
    unsigned int v54 = v31 - v33;
    BOOL v56 = v34 != 16 || v31 - v33 + 1 < 5;
    if ((v33 & 1) == 0) {
      BOOL v56 = 1;
    }
    unsigned int v57 = v54 + 2;
    if (v56) {
      unsigned int v57 = v54 + 1;
    }
    uint64_t v185 = v33 - !v56;
    if (v31 > v53 - 1 || v31 - (v33 - !v56) >= v53 - 1)
    {
      unsigned int v16 = v189;
      uint64_t v12 = v190;
      goto LABEL_53;
    }
    uint64_t v59 = (unsigned __int8 *)*((void *)v36 - 4);
    unsigned int v180 = v57;
    unsigned int v60 = v57 * v34;
    unsigned int v16 = v189;
    uint64_t v12 = v190;
    if (v60 < 0x101)
    {
      if (v60 - 129 > 0x7E)
      {
        BOOL v62 = v5 < 0x1C && v60 == 48;
        BOOL v63 = v60 - 65 >= 0x3F || v60 == 96;
        if (!v63 || v62) {
          goto LABEL_53;
        }
      }
      else if (v60 != 160 && v60 != 192 && v60 != 224)
      {
        goto LABEL_53;
      }
    }
    else if (v60 != 384 && v60 != 512)
    {
      goto LABEL_53;
    }
    int v195 = (llvm::Value *)*((void *)v36 - 4);
    unsigned int v184 = v31;
    int v64 = 0;
    uint64_t v65 = *(llvm::IntegerType **)v29;
    int v241 = v14;
    uint64_t v242 = 0x200000000;
    int v246 = v65;
    uint64_t v247 = v190;
    uint64_t v248 = v13;
    uint64_t v249 = 0;
    int v250 = 0;
    __int16 v251 = 512;
    char v252 = 7;
    *int v189 = 0;
    v189[1] = 0;
    *(void *)uint64_t v15 = 0;
    *((void *)v15 + 1) = 0;
    uint64_t v254 = &unk_1F2616E88;
    char v255 = &unk_1F2617008;
    uint64_t v244 = *((void *)v36 + 5);
    int v245 = (char *)v36 + 24;
    uint64_t v179 = (uint64_t *)((char *)v36 + 24);
    unint64_t v66 = (char *)*((void *)v36 + 6);
    uint64_t v224 = v66;
    if (v66)
    {
      llvm::MetadataTracking::track((uint64_t)&v224, (unsigned __int8 *)v66, 2);
      int v64 = v224;
    }
    sub_1CB8461A4((uint64_t)&v241, 0, (uint64_t)v64);
    if (v224)
    {
      int v156 = *(unsigned __int8 *)v224;
      if ((v156 - 4) > 0x1E)
      {
        if ((v156 - 3) >= 0xFFFFFFFE) {
          unint64_t v161 = v224;
        }
        else {
          unint64_t v161 = 0;
        }
        if ((v156 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v158 = (unint64_t)(v161 + 8);
LABEL_266:
          unint64_t v227 = &v224;
          sub_1CC5FA668(v158 + 16, &v227);
          goto LABEL_105;
        }
        if (v156 == 3) {
          *((void *)v224 + 1) = 0;
        }
      }
      else if ((v224[1] & 0x7F) == 2 || *((_DWORD *)v224 + 3))
      {
        uint64_t v157 = *((void *)v224 + 2);
        if ((v157 & 4) != 0)
        {
          unint64_t v158 = v157 & 0xFFFFFFFFFFFFFFF8;
          if (v158) {
            goto LABEL_266;
          }
        }
      }
    }
LABEL_105:
    if ((*(_DWORD *)(v29 + 8) & 0xFE) == 0x12) {
      uint64_t v29 = **(void **)(v29 + 16);
    }
    uint64_t v67 = v217;
    int v68 = (llvm::PointerType *)v29;
    if (v184 != v185)
    {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v29, (llvm::Type *)v180);
      uint64_t v67 = v217;
    }
    *uint64_t v67 = v68;
    int v181 = v68;
    uint64_t v69 = (llvm::Constant *)llvm::PointerType::get(v68, (llvm::Type *)v204);
    int v70 = v69;
    uint64_t v203 = v14;
    if (v185)
    {
      unsigned int v71 = v181;
      uint64_t v178 = v70;
      if ((*((_DWORD *)v181 + 2) & 0xFE) == 0x12) {
        unsigned int v71 = (llvm::Type *)**((void **)v181 + 2);
      }
      uint64_t v72 = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits(v71);
      uint64_t v205 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)v29, (llvm::Type *)v204);
      if (v59[16] <= 0x14u && v59)
      {
        unint64_t v227 = v215;
        uint64_t v228 = 0x400000000;
        uint64_t v73 = llvm::IntegerType::get(v246, v72);
        int v75 = *(llvm::ConstantInt **)v73;
        unsigned int v76 = *(_DWORD *)(v73 + 8);
        LODWORD(v225) = v76 >> 8;
        if (v76 >> 8 > 0x40) {
          operator new[]();
        }
        if (v76 <= 0xFF) {
          unint64_t v77 = 0;
        }
        else {
          unint64_t v77 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v76) + 63);
        }
        uint64_t v224 = (const char *)(v77 & v185);
        uint64_t v78 = llvm::ConstantInt::get(v75, (llvm::LLVMContext *)&v224, v74);
        if (v225 >= 0x41 && v224) {
          MEMORY[0x1D25D9CB0](v224, 0x1000C8000313F17);
        }
        uint64_t v79 = (uint64_t *)v59;
        if (v228 >= (unint64_t)HIDWORD(v228)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v227 + v228) = v78;
        unsigned int v80 = v228 + 1;
        LODWORD(v228) = v228 + 1;
        if (*(llvm::Constant **)v59 != v205)
        {
          uint64_t v79 = (uint64_t *)sub_1CC56C0C0((llvm *)0x31, (llvm::detail::IEEEFloat *)v59, v205, 0);
          unsigned int v80 = v228;
        }
        uint64_t ElementPtr = llvm::ConstantExpr::getGetElementPtr(v29, v79, (uint64_t)v227, v80, 0, 0, 0);
        if (*(llvm::Constant **)ElementPtr != v178) {
          uint64_t ElementPtr = (uint64_t)sub_1CC56C0C0((llvm *)0x31, (llvm::detail::IEEEFloat *)ElementPtr, v178, 0);
        }
        int v82 = v185;
        char v83 = v227;
        BOOL v17 = v215;
LABEL_175:
        if (v83 != v17)
        {
          free(v83);
          BOOL v17 = v215;
        }
        uint64_t v11 = v192;
        unsigned int v16 = v189;
        uint64_t v12 = v190;
        goto LABEL_178;
      }
      unint64_t v227 = v215;
      uint64_t v228 = 0x400000000;
      uint64_t v86 = llvm::IntegerType::get(v246, v72);
      int v88 = *(llvm::ConstantInt **)v86;
      unsigned int v89 = *(_DWORD *)(v86 + 8);
      LODWORD(v225) = v89 >> 8;
      if (v89 >> 8 > 0x40) {
        operator new[]();
      }
      if (v89 <= 0xFF) {
        unint64_t v90 = 0;
      }
      else {
        unint64_t v90 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v89) + 63);
      }
      uint64_t v224 = (const char *)(v90 & v185);
      int v91 = llvm::ConstantInt::get(v88, (llvm::LLVMContext *)&v224, v87);
      if (v225 >= 0x41 && v224) {
        MEMORY[0x1D25D9CB0](v224, 0x1000C8000313F17);
      }
      if (v228 >= (unint64_t)HIDWORD(v228)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v227 + v228) = v91;
      LODWORD(v228) = v228 + 1;
      if ((v59[23] & 0x10) == 0)
      {
        uint64_t v108 = 0;
        uint64_t v109 = &byte_1CFBCE98E;
        goto LABEL_152;
      }
      uint64_t v92 = ***(void ***)v59;
      uint64_t v93 = *(void *)(v92 + 152);
      uint64_t v94 = *(unsigned int *)(v92 + 168);
      if (v94)
      {
        LODWORD(v95) = (v94 - 1) & ((v59 >> 4) ^ (v59 >> 9));
        unsigned int v96 = (unsigned __int8 **)(v93 + 16 * v95);
        uint64_t v97 = *v96;
        if (*v96 == v59)
        {
LABEL_151:
          uint64_t v107 = v96[1];
          uint64_t v110 = *(llvm::Type **)v107;
          uint64_t v109 = (const char *)(v107 + 16);
          uint64_t v108 = v110;
LABEL_152:
          __int16 v222 = 257;
          if (*(llvm::Constant **)v59 != v205)
          {
            long long v182 = v108;
            if (v59[16] <= 0x14u)
            {
              uint64_t v112 = (*((uint64_t (**)(void **, uint64_t))*v247 + 28))(v247, 49);
              int v195 = (llvm::Value *)v112;
              if (v112) {
                BOOL v113 = *(unsigned __int8 *)(v112 + 16) >= 0x1Cu;
              }
              else {
                BOOL v113 = 0;
              }
              if (v113)
              {
                (*((void (**)(void **, uint64_t, void *, uint64_t, char *))*v248 + 2))(v248, v112, v221, v244, v245);
                if (v242)
                {
                  uint64_t v162 = (llvm::MDNode **)v241;
                  uint64_t v177 = (char *)v241 + 16 * v242;
                  do
                  {
                    uint64_t v210 = (llvm::Type *)v162;
                    llvm::Instruction::setMetadata(v195, *(_DWORD *)v162, v162[1]);
                    uint64_t v162 = (llvm::MDNode **)((char *)v210 + 16);
                  }
                  while ((char *)v210 + 16 != v177);
                }
              }
            }
            else
            {
              __int16 v226 = 257;
              int v195 = llvm::CastInst::Create(49, (uint64_t)v59, (uint64_t)v205, &v224, 0);
              (*((void (**)(void **))*v248 + 2))(v248);
              if (v242)
              {
                int v111 = (llvm::MDNode **)v241;
                unsigned int v174 = (char *)v241 + 16 * v242;
                do
                {
                  uint64_t v207 = (llvm::Type *)v111;
                  llvm::Instruction::setMetadata(v195, *(_DWORD *)v111, v111[1]);
                  int v111 = (llvm::MDNode **)((char *)v207 + 16);
                }
                while ((char *)v207 + 16 != v174);
              }
            }
            uint64_t v108 = v182;
          }
          unsigned int v208 = (uint64_t *)v227;
          __int16 v226 = 261;
          uint64_t v224 = v109;
          __int16 v225 = v108;
          uint64_t v183 = v228;
          uint64_t v114 = (v228 + 1);
          BOOL v175 = v228 == -1;
          int v115 = operator new(32 * v114 + 80);
          int v116 = v114;
          uint64_t ElementPtr = (uint64_t)&v115[4 * v114];
          *(_DWORD *)(ElementPtr + 20) = *(_DWORD *)(ElementPtr + 20) & 0x38000000 | v116 & 0x7FFFFFF;
          if (!v175)
          {
            do
            {
              void *v115 = 0;
              v115[1] = 0;
              v115[2] = 0;
              v115[3] = ElementPtr;
              v115 += 4;
            }
            while (v115 != (void *)ElementPtr);
          }
          int v176 = v116 & 0x7FFFFFF;
          sub_1CB845A7C(v29, (uint64_t *)v195, (uint64_t)v208, v183);
          *(void *)uint64_t ElementPtr = v117;
          *(void *)(ElementPtr + 8) = 0;
          unsigned int v118 = *(_DWORD *)(ElementPtr + 20) & 0xC0000000 | v176;
          *(_DWORD *)(ElementPtr + 16) = 62;
          *(_DWORD *)(ElementPtr + 20) = v118;
          *(_OWORD *)(ElementPtr + 24) = 0u;
          uint64_t v119 = ElementPtr + 24;
          *(_OWORD *)(ElementPtr + 40) = 0u;
          *(_DWORD *)(ElementPtr + 56) = 0;
          uint64_t v120 = *((void *)v217 + 5);
          *(void *)(ElementPtr + 40) = v120;
          *(_WORD *)(v120 + 18) &= ~0x8000u;
          if ((*(unsigned char *)(ElementPtr + 23) & 0x10) != 0)
          {
            uint64_t v159 = *(void *)(v120 + 56);
            if (v159)
            {
              size_t v160 = *(llvm::ValueSymbolTable **)(v159 + 104);
              if (v160)
              {
                llvm::ValueSymbolTable::reinsertValue(v160, (llvm::Value *)ElementPtr);
                uint64_t v119 = ElementPtr + 24;
              }
            }
          }
          uint64_t v121 = *v179;
          *(void *)(ElementPtr + 24) = *v179;
          *(void *)(ElementPtr + 32) = v179;
          *(void *)(v121 + 8) = v119;
          *uint64_t v179 = v119;
          *(void *)(ElementPtr + 64) = v29;
          *(void *)(ElementPtr + 72) = llvm::GetElementPtrInst::getIndexedType(v29, (uint64_t)v208, v183);
          llvm::GetElementPtrInst::init((uint64_t ***)ElementPtr, (uint64_t **)v195, v208, v183, &v224);
          __int16 v222 = 257;
          if (*(llvm::Constant **)ElementPtr != v178)
          {
            if (*(unsigned __int8 *)(ElementPtr + 16) <= 0x14u)
            {
              uint64_t v123 = (*((uint64_t (**)(void **, uint64_t, uint64_t, llvm::Constant *))*v247 + 28))(v247, 49, ElementPtr, v178);
              uint64_t ElementPtr = v123;
              if (v123)
              {
                if (*(unsigned __int8 *)(v123 + 16) >= 0x1Cu)
                {
                  (*((void (**)(void **, uint64_t, void *, uint64_t, char *))*v248 + 2))(v248, v123, v221, v244, v245);
                  if (v242)
                  {
                    uint64_t v163 = (llvm::Type *)v241;
                    uint64_t v211 = (llvm::Type *)((char *)v241 + 16 * v242);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)ElementPtr, *(_DWORD *)v163, *((llvm::MDNode **)v163 + 1));
                      uint64_t v163 = (llvm::Type *)((char *)v163 + 16);
                    }
                    while (v163 != v211);
                  }
                }
              }
            }
            else
            {
              __int16 v226 = 257;
              uint64_t ElementPtr = (uint64_t)llvm::CastInst::Create(49, ElementPtr, (uint64_t)v178, &v224, 0);
              (*((void (**)(void **, uint64_t, void *, uint64_t, char *))*v248 + 2))(v248, ElementPtr, v221, v244, v245);
              if (v242)
              {
                uint64_t v122 = (llvm::Type *)v241;
                unint64_t v209 = (llvm::Type *)((char *)v241 + 16 * v242);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)ElementPtr, *(_DWORD *)v122, *((llvm::MDNode **)v122 + 1));
                  uint64_t v122 = (llvm::Type *)((char *)v122 + 16);
                }
                while (v122 != v209);
              }
            }
          }
          BOOL v17 = v215;
          int v82 = v185;
          char v83 = v227;
          goto LABEL_175;
        }
        int v98 = 1;
        while (v97 != (unsigned __int8 *)-4096)
        {
          int v99 = v95 + v98++;
          uint64_t v95 = v99 & (v94 - 1);
          uint64_t v97 = *(unsigned __int8 **)(v93 + 16 * v95);
          if (v97 == v59)
          {
            unsigned int v96 = (unsigned __int8 **)(v93 + 16 * v95);
            goto LABEL_151;
          }
        }
      }
      unsigned int v96 = (unsigned __int8 **)(v93 + 16 * v94);
      goto LABEL_151;
    }
    uint64_t v84 = (uint64_t)v59;
    unsigned int v85 = v59[16];
    if (v85 <= 0x14 && v59)
    {
      int v82 = v185;
      if (*(llvm::Constant **)v59 == v69) {
        uint64_t ElementPtr = (uint64_t)v59;
      }
      else {
        uint64_t ElementPtr = (uint64_t)sub_1CC56C0C0((llvm *)0x31, (llvm::detail::IEEEFloat *)v59, v69, 0);
      }
      uint64_t v11 = v192;
      unsigned int v16 = v189;
      uint64_t v12 = v190;
      BOOL v17 = v215;
LABEL_178:
      unsigned int v20 = v187;
      int v18 = v188;
      unint64_t v19 = v213;
      uint64_t v21 = v186;
      uint64_t v103 = v217;
      unsigned int v104 = v197;
      uint64_t v105 = v200;
      unsigned int v106 = v184;
      goto LABEL_179;
    }
    __int16 v226 = 257;
    if (*(llvm::Constant **)v59 != v69)
    {
      if (v85 > 0x14)
      {
        v229[8] = 257;
        int v100 = llvm::CastInst::Create(49, (uint64_t)v59, (uint64_t)v69, (const char **)&v227, 0);
        (*((void (**)(void **))*v248 + 2))(v248);
        if (v242)
        {
          BOOL v101 = (llvm::Type *)v241;
          uint64_t v206 = (llvm::Type *)((char *)v241 + 16 * v242);
          do
          {
            llvm::Instruction::setMetadata(v100, *(_DWORD *)v101, *((llvm::MDNode **)v101 + 1));
            BOOL v101 = (llvm::Type *)((char *)v101 + 16);
          }
          while (v101 != v206);
        }
LABEL_254:
        uint64_t v11 = v192;
        unsigned int v16 = v189;
        uint64_t v12 = v190;
        unint64_t v19 = v213;
        BOOL v17 = v215;
        unsigned int v20 = v187;
        int v18 = v188;
        uint64_t v21 = v186;
        uint64_t v103 = v217;
        unsigned int v104 = v197;
        uint64_t v105 = v200;
        unsigned int v106 = v184;
        uint64_t v84 = (uint64_t)v100;
        goto LABEL_255;
      }
      uint64_t v102 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, llvm::Constant *))*v247 + 28))(v247, 49, v59, v69);
      uint64_t v84 = v102;
      if (v102)
      {
        int v100 = (llvm::Instruction *)v102;
        if (*(unsigned __int8 *)(v102 + 16) >= 0x1Cu)
        {
          (*((void (**)(void **, uint64_t, const char **, uint64_t, char *))*v248 + 2))(v248, v102, &v224, v244, v245);
          if (v242)
          {
            uint64_t v164 = (llvm::Type *)v241;
            int v212 = (llvm::Type *)((char *)v241 + 16 * v242);
            do
            {
              llvm::Instruction::setMetadata(v100, *(_DWORD *)v164, *((llvm::MDNode **)v164 + 1));
              uint64_t v164 = (llvm::Type *)((char *)v164 + 16);
            }
            while (v164 != v212);
          }
        }
        goto LABEL_254;
      }
    }
    uint64_t v11 = v192;
    unsigned int v16 = v189;
    uint64_t v12 = v190;
    unint64_t v19 = v213;
    BOOL v17 = v215;
    unsigned int v20 = v187;
    int v18 = v188;
    uint64_t v21 = v186;
    uint64_t v103 = v217;
    unsigned int v104 = v197;
    uint64_t v105 = v200;
    unsigned int v106 = v184;
LABEL_255:
    uint64_t ElementPtr = v84;
    int v82 = v185;
LABEL_179:
    if (*v105)
    {
      **((void **)v103 - 2) = *((void *)v103 - 3);
      uint64_t v124 = *((void *)v103 - 3);
      if (v124) {
        *(void *)(v124 + 16) = *((void *)v103 - 2);
      }
    }
    *uint64_t v105 = ElementPtr;
    if (ElementPtr)
    {
      uint64_t v127 = *(void *)(ElementPtr + 8);
      unint64_t v126 = (uint64_t **)(ElementPtr + 8);
      uint64_t v125 = v127;
      *((void *)v103 - 3) = v127;
      if (v127) {
        *(void *)(v125 + 16) = (char *)v103 - 24;
      }
      *((void *)v103 - 2) = v126;
      *unint64_t v126 = v105;
    }
    if (v82)
    {
      unint64_t v128 = v104 << ((v82 & 1) == 0) >> 3;
      unint64_t v129 = *((unsigned __int16 *)v103 + 9);
      if (1 << (v129 >> 1) < v128) {
        unint64_t v128 = 1 << (v129 >> 1);
      }
      *((_WORD *)v103 + 9) = v129 & 0xFF81 | (2 * (63 - __clz(v128)));
      uint64_t v14 = v203;
      if (v106 != v82)
      {
        uint64_t v199 = v13;
        uint64_t v130 = *((void *)v103 + 1);
        if (!v130)
        {
          uint64_t v13 = v199;
          goto LABEL_244;
        }
        int v196 = v15;
        while (1)
        {
          uint64_t v131 = 0;
          if (*(unsigned char *)(*(void *)(v130 + 24) + 16) == 89) {
            unsigned int v132 = *(llvm::IntegerType ****)(v130 + 24);
          }
          else {
            unsigned int v132 = 0;
          }
          uint64_t v219 = (llvm::Value *)(v132 - 4);
          if (*((unsigned char *)*(v132 - 4) + 16) == 16) {
            uint64_t v133 = (uint64_t)*(v132 - 4);
          }
          else {
            uint64_t v133 = 0;
          }
          unsigned int v134 = **v132;
          unint64_t v227 = v17;
          uint64_t v228 = 0x200000000;
          int v231 = v134;
          unsigned int v232 = v18;
          uint64_t v233 = v19;
          uint64_t v234 = 0;
          int v235 = 0;
          __int16 v236 = 512;
          char v237 = 7;
          void *v21 = 0;
          v21[1] = 0;
          *unsigned int v20 = 0;
          v20[1] = 0;
          uint64_t v239 = &unk_1F2616E88;
          int v240 = &unk_1F2617008;
          v230[0] = v132[5];
          v230[1] = v132 + 3;
          BOOL v135 = (unsigned __int8 *)v132[6];
          v221[0] = v135;
          if (v135)
          {
            llvm::MetadataTracking::track((uint64_t)v221, v135, 2);
            uint64_t v131 = v221[0];
          }
          sub_1CB8461A4((uint64_t)&v227, 0, v131);
          if (!v221[0]) {
            goto LABEL_201;
          }
          int v149 = *(unsigned __int8 *)v221[0];
          if ((v149 - 4) > 0x1E)
          {
            if ((v149 - 3) >= 0xFFFFFFFE) {
              uint64_t v152 = v221[0];
            }
            else {
              uint64_t v152 = 0;
            }
            if ((v149 - 3) < 0xFFFFFFFE)
            {
              if (v149 == 3) {
                *(void *)(v221[0] + 8) = 0;
              }
              goto LABEL_201;
            }
            unint64_t v151 = v152 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v221[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v221[0] + 12)) {
              goto LABEL_201;
            }
            uint64_t v150 = *(void *)(v221[0] + 16);
            if ((v150 & 4) == 0) {
              goto LABEL_201;
            }
            unint64_t v151 = v150 & 0xFFFFFFFFFFFFFFF8;
            if (!v151) {
              goto LABEL_201;
            }
          }
          uint64_t v224 = (const char *)v221;
          sub_1CC5FA668(v151 + 16, &v224);
LABEL_201:
          uint64_t v136 = (void *)(v133 + 24);
          uint64_t v137 = (llvm::LLVMContext *)*(unsigned int *)(v133 + 32);
          if (v137 >= 0x41) {
            uint64_t v136 = (void *)*v136;
          }
          uint64_t v138 = *v136 - v185;
          uint64_t v139 = llvm::IntegerType::get(v231, v137);
          int v141 = *(llvm::ConstantInt **)v139;
          unsigned int v142 = *(_DWORD *)(v139 + 8);
          LODWORD(v225) = v142 >> 8;
          if (v142 >> 8 > 0x40) {
            operator new[]();
          }
          if (v142 <= 0xFF) {
            unint64_t v143 = 0;
          }
          else {
            unint64_t v143 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v142) + 63);
          }
          uint64_t v224 = (const char *)(v143 & v138);
          unint64_t v144 = llvm::ConstantInt::get(v141, (llvm::LLVMContext *)&v224, v140);
          uint64_t v14 = v203;
          if (v225 >= 0x41 && v224) {
            MEMORY[0x1D25D9CB0](v224, 0x1000C8000313F17);
          }
          BOOL v17 = v215;
          uint64_t v11 = v192;
          unsigned int v16 = v189;
          uint64_t v12 = v190;
          unsigned int v20 = v187;
          int v18 = v188;
          unint64_t v19 = v213;
          uint64_t v21 = v186;
          if (*(void *)v219)
          {
            **(v132 - 2) = (llvm::IntegerType *)*(v132 - 3);
            uint64_t v145 = (uint64_t)*(v132 - 3);
            if (v145) {
              *(void *)(v145 + 16) = *(v132 - 2);
            }
          }
          *(void *)uint64_t v219 = v144;
          if (v144)
          {
            unsigned int v148 = (llvm::IntegerType **)v144[1];
            int v147 = (llvm::Value **)(v144 + 1);
            uint64_t v146 = v148;
            *(v132 - 3) = v148;
            if (v148) {
              v146[2] = (llvm::IntegerType *)(v132 - 3);
            }
            *(v132 - 2) = v147;
            llvm::Type *v147 = v219;
          }
          if (v227 != v215)
          {
            free(v227);
            uint64_t v21 = v186;
            unsigned int v20 = v187;
            unint64_t v19 = v213;
            BOOL v17 = v215;
            int v18 = v188;
            unsigned int v16 = v189;
            uint64_t v12 = v190;
            uint64_t v11 = v192;
          }
          uint64_t v130 = *(void *)(v130 + 8);
          if (!v130)
          {
            uint64_t v15 = v196;
            uint64_t v13 = v199;
            goto LABEL_244;
          }
        }
      }
    }
    else
    {
      uint64_t v14 = v203;
      if (v106) {
        goto LABEL_244;
      }
    }
    uint64_t v153 = *((void *)v103 + 1);
    if (v153)
    {
      unsigned int v154 = v13;
      do
      {
        uint64_t v155 = *(llvm::ValueAsMetadata **)(v153 + 24);
        llvm::Value::doRAUW(v155, v103, (llvm::Value *)1);
        if (v257 >= (unint64_t)HIDWORD(v257)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v256[v257] = v155;
        LODWORD(v257) = v257 + 1;
        uint64_t v153 = *(void *)(v153 + 8);
        uint64_t v103 = v217;
      }
      while (v153);
      char v220 = 1;
      uint64_t v11 = v192;
      unsigned int v16 = v189;
      uint64_t v12 = v190;
      uint64_t v13 = v154;
      uint64_t v14 = v203;
      unint64_t v19 = v213;
      BOOL v17 = v215;
      unsigned int v20 = v187;
      int v18 = v188;
      uint64_t v21 = v186;
    }
LABEL_244:
    if (v241 != v14)
    {
      free(v241);
      uint64_t v21 = v186;
      unsigned int v20 = v187;
      unint64_t v19 = v213;
      BOOL v17 = v215;
      int v18 = v188;
      unsigned int v16 = v189;
      uint64_t v12 = v190;
      uint64_t v11 = v192;
    }
LABEL_53:
    uint64_t v10 = *(void *)(v10 + 8);
    uint64_t v51 = i - 24;
    if (!i) {
      uint64_t v51 = 0;
    }
    if (v10 == v51 + 40) {
      break;
    }
LABEL_60:
    if (i == v7) {
      goto LABEL_292;
    }
  }
  while (1)
  {
    uint64_t i = *(void *)(i + 8);
    if (i == v7) {
      break;
    }
    uint64_t v52 = i - 24;
    if (!i) {
      uint64_t v52 = 0;
    }
    uint64_t v10 = *(void *)(v52 + 48);
    if (v10 != v52 + 40) {
      goto LABEL_60;
    }
  }
LABEL_292:
  if (v257)
  {
    uint64_t v165 = *v256;
    int v166 = *(_DWORD *)(*v256 + 20);
    if ((v166 & 0x40000000) != 0)
    {
      uint64_t v168 = *(void *)(v165 - 8);
      uint64_t v167 = v166 & 0x7FFFFFF;
      if (!v167) {
        goto LABEL_300;
      }
    }
    else
    {
      uint64_t v167 = v166 & 0x7FFFFFF;
      uint64_t v168 = v165 - 32 * v167;
      if (!v167) {
        goto LABEL_300;
      }
    }
    uint64_t v169 = 32 * v167;
    BOOL v170 = (void **)(v168 + 16);
    do
    {
      if (*(v170 - 2))
      {
        **BOOL v170 = *(v170 - 1);
        uint64_t v171 = (uint64_t)*(v170 - 1);
        if (v171) {
          *(void *)(v171 + 16) = *v170;
        }
      }
      *(v170 - 2) = 0;
      v170 += 4;
      v169 -= 32;
    }
    while (v169);
LABEL_300:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  if (v256 != v6) {
    free(v256);
  }
  char v172 = v220;
  return v172 & 1;
}

void sub_1CC7F1550(llvm *a1, llvm::PassRegistry *a2)
{
}

uint64_t sub_1CC7F1608(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDBBF0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261F220;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDBBF8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC7F1550;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCDBBF8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  *(unsigned char *)(a1 + 96) = 0;
  return a1;
}

void sub_1CC7F16D0()
{
}

void sub_1CC7F170C(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F261F220;
  uint64_t v2 = *((void *)a1 + 11);
  *((void *)a1 + 11) = 0;
  if (v2)
  {
    uint64_t v3 = sub_1CC79BE3C(v2);
    MEMORY[0x1D25D9CE0](v3, 0x10E0C40A0334FC4);
  }
  uint64_t v4 = *((void *)a1 + 10);
  *((void *)a1 + 10) = 0;
  if (v4)
  {
    uint64_t v5 = sub_1CC79BE3C(v4);
    MEMORY[0x1D25D9CE0](v5, 0x10E0C40A0334FC4);
  }
  MEMORY[0x1D25D9CD0](*((void *)a1 + 7), 8);
  sub_1CC7F51E8((uint64_t)a1 + 32);

  llvm::Pass::~Pass(a1);
}

void sub_1CC7F17B8(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F261F220;
  uint64_t v2 = *((void *)a1 + 11);
  *((void *)a1 + 11) = 0;
  if (v2)
  {
    uint64_t v3 = sub_1CC79BE3C(v2);
    MEMORY[0x1D25D9CE0](v3, 0x10E0C40A0334FC4);
  }
  uint64_t v4 = *((void *)a1 + 10);
  *((void *)a1 + 10) = 0;
  if (v4)
  {
    uint64_t v5 = sub_1CC79BE3C(v4);
    MEMORY[0x1D25D9CE0](v5, 0x10E0C40A0334FC4);
  }
  MEMORY[0x1D25D9CD0](*((void *)a1 + 7), 8);
  sub_1CC7F51E8((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC7F1878()
{
  return "Scalar promotion";
}

void sub_1CC7F1888(uint64_t a1, llvm::LazyBlockFrequencyInfoPass *a2)
{
  sub_1CB843600((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
  llvm::LazyBlockFrequencyInfoPass::getLazyBFIAnalysisUsage(a2, v3);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);

  sub_1CB843600((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1CC7F191C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = *(unsigned __int16 *)(v5 + 18);
  switch((v8 >> 4) & 0x3FF)
  {
    case 'd':
      return 0;
    case 'e':
    case 'j':
    case 'l':
      if (byte_1EBCDC040) {
        goto LABEL_7;
      }
      uint64_t v9 = *(llvm::Module **)(v5 + 40);
      char v83 = "agx.sgpr_emulation";
      __int16 v84 = 259;
      uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v9, (const char **)&v83);
      if (byte_1EBCDBC80 || NamedMetadata)
      {
        LOWORD(v8) = *(_WORD *)(v6 + 18);
LABEL_7:
        if (v8)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)v6);
          uint64_t v11 = *(llvm::Value **)(v6 + 88);
          if (*(_WORD *)(v6 + 18))
          {
            llvm::Function::BuildLazyArguments((llvm::Function *)v6);
            uint64_t v12 = *(llvm::Value **)(v6 + 88);
LABEL_10:
            for (uint64_t i = (llvm::Value *)((char *)v12 + 40 * *(void *)(v6 + 96));
                  v11 != i;
                  uint64_t v11 = (llvm::Value *)((char *)v11 + 40))
            {
              if ((*((unsigned char *)v11 + 23) & 0x10) == 0)
              {
                char v83 = "arg";
                __int16 v84 = 259;
                llvm::Value::setNameImpl(v11, (const char **)&v83);
                if (!*((unsigned char *)v11 + 16))
                {
                  if ((*((unsigned char *)v11 + 23) & 0x10) == 0) {
                    goto LABEL_30;
                  }
                  uint64_t v14 = ***(void ***)v11;
                  uint64_t v15 = *(void *)(v14 + 152);
                  uint64_t v16 = *(unsigned int *)(v14 + 168);
                  if (v16)
                  {
                    LODWORD(v17) = (v16 - 1) & ((v11 >> 4) ^ (v11 >> 9));
                    int v18 = (llvm::Value **)(v15 + 16 * v17);
                    unint64_t v19 = *v18;
                    if (*v18 != v11)
                    {
                      int v20 = 1;
                      do
                      {
                        if (v19 == (llvm::Value *)-4096) {
                          goto LABEL_22;
                        }
                        int v21 = v17 + v20++;
                        uint64_t v17 = v21 & (v16 - 1);
                        unint64_t v19 = *(llvm::Value **)(v15 + 16 * v17);
                      }
                      while (v19 != v11);
                      int v18 = (llvm::Value **)(v15 + 16 * v17);
                    }
                  }
                  else
                  {
LABEL_22:
                    int v18 = (llvm::Value **)(v15 + 16 * v16);
                  }
                  unsigned int v22 = v18[1];
                  unint64_t v25 = *(void *)v22;
                  int v23 = (char *)v22 + 16;
                  unint64_t v24 = v25;
                  if (v25 >= 5
                    && (*(_DWORD *)v23 == *(_DWORD *)"llvm." ? (BOOL v26 = v23[4] == aLlvm_1[4]) : (BOOL v26 = 0), v26))
                  {
                    *((_DWORD *)v11 + 8) |= 0x2000u;
                    int v27 = llvm::Function::lookupIntrinsicID(v23, v24);
                  }
                  else
                  {
LABEL_30:
                    int v27 = 0;
                    *((_DWORD *)v11 + 8) &= ~0x2000u;
                  }
                  *((_DWORD *)v11 + 9) = v27;
                }
              }
            }
            for (uint64_t j = *(void *)(v6 + 80); j != v6 + 72; uint64_t j = *(void *)(j + 8))
            {
              if (j) {
                uint64_t v29 = (llvm::Value *)(j - 24);
              }
              else {
                uint64_t v29 = 0;
              }
              if ((*((unsigned char *)v29 + 23) & 0x10) == 0)
              {
                char v83 = "bb";
                __int16 v84 = 259;
                llvm::Value::setNameImpl(v29, (const char **)&v83);
                if (j)
                {
                  if (!*((unsigned char *)v29 + 16))
                  {
                    if ((*((unsigned char *)v29 + 23) & 0x10) == 0) {
                      goto LABEL_83;
                    }
                    uint64_t v47 = ***(void ***)v29;
                    uint64_t v48 = *(void *)(v47 + 152);
                    uint64_t v49 = *(unsigned int *)(v47 + 168);
                    if (v49)
                    {
                      LODWORD(v50) = (v49 - 1) & ((v29 >> 4) ^ (v29 >> 9));
                      uint64_t v51 = (llvm::Value **)(v48 + 16 * v50);
                      uint64_t v52 = *v51;
                      if (*v51 != v29)
                      {
                        int v53 = 1;
                        do
                        {
                          if (v52 == (llvm::Value *)-4096) {
                            goto LABEL_75;
                          }
                          int v54 = v50 + v53++;
                          uint64_t v50 = v54 & (v49 - 1);
                          uint64_t v52 = *(llvm::Value **)(v48 + 16 * v50);
                        }
                        while (v52 != v29);
                        uint64_t v51 = (llvm::Value **)(v48 + 16 * v50);
                      }
                    }
                    else
                    {
LABEL_75:
                      uint64_t v51 = (llvm::Value **)(v48 + 16 * v49);
                    }
                    uint64_t v55 = v51[1];
                    unint64_t v58 = *(void *)v55;
                    BOOL v56 = (char *)v55 + 16;
                    unint64_t v57 = v58;
                    if (v58 >= 5
                      && (*(_DWORD *)v56 == *(_DWORD *)"llvm." ? (BOOL v59 = v56[4] == aLlvm_1[4]) : (BOOL v59 = 0), v59))
                    {
                      *((_DWORD *)v29 + 8) |= 0x2000u;
                      int v60 = llvm::Function::lookupIntrinsicID(v56, v57);
                    }
                    else
                    {
LABEL_83:
                      int v60 = 0;
                      *((_DWORD *)v29 + 8) &= ~0x2000u;
                    }
                    *((_DWORD *)v29 + 9) = v60;
                  }
                }
              }
              uint64_t v30 = (void ***)((char *)v29 + 40);
              for (uint64_t k = (void **)*((void *)v29 + 6); k != v30; uint64_t k = (void **)k[1])
              {
                if (k) {
                  int8x8_t v32 = (llvm::Value *)(k - 3);
                }
                else {
                  int8x8_t v32 = 0;
                }
                if ((*((unsigned char *)v32 + 23) & 0x10) == 0 && *(unsigned char *)(*(void *)v32 + 8) != 7)
                {
                  char v83 = "tmp";
                  __int16 v84 = 259;
                  llvm::Value::setNameImpl(v32, (const char **)&v83);
                  if (k)
                  {
                    if (!*((unsigned char *)v32 + 16))
                    {
                      if ((*((unsigned char *)v32 + 23) & 0x10) == 0) {
                        goto LABEL_64;
                      }
                      uint64_t v33 = ***(void ***)v32;
                      uint64_t v34 = *(void *)(v33 + 152);
                      uint64_t v35 = *(unsigned int *)(v33 + 168);
                      if (v35)
                      {
                        LODWORD(v36) = (v35 - 1) & ((v32 >> 4) ^ (v32 >> 9));
                        uint64_t v37 = (llvm::Value **)(v34 + 16 * v36);
                        unsigned int v38 = *v37;
                        if (*v37 != v32)
                        {
                          int v39 = 1;
                          do
                          {
                            if (v38 == (llvm::Value *)-4096) {
                              goto LABEL_56;
                            }
                            int v40 = v36 + v39++;
                            uint64_t v36 = v40 & (v35 - 1);
                            unsigned int v38 = *(llvm::Value **)(v34 + 16 * v36);
                          }
                          while (v38 != v32);
                          uint64_t v37 = (llvm::Value **)(v34 + 16 * v36);
                        }
                      }
                      else
                      {
LABEL_56:
                        uint64_t v37 = (llvm::Value **)(v34 + 16 * v35);
                      }
                      int v41 = v37[1];
                      unint64_t v44 = *(void *)v41;
                      unsigned int v42 = (char *)v41 + 16;
                      unint64_t v43 = v44;
                      if (v44 >= 5
                        && (*(_DWORD *)v42 == *(_DWORD *)"llvm." ? (BOOL v45 = v42[4] == aLlvm_1[4]) : (BOOL v45 = 0), v45))
                      {
                        *((_DWORD *)v32 + 8) |= 0x2000u;
                        int v46 = llvm::Function::lookupIntrinsicID(v42, v43);
                      }
                      else
                      {
LABEL_64:
                        int v46 = 0;
                        *((_DWORD *)v32 + 8) &= ~0x2000u;
                      }
                      *((_DWORD *)v32 + 9) = v46;
                    }
                  }
                }
              }
            }
            uint64_t v61 = *(uint64_t **)(v7 + 8);
            uint64_t v62 = *v61;
            uint64_t v63 = v61[1];
            if (v62 == v63)
            {
LABEL_88:
              uint64_t v64 = 0;
            }
            else
            {
              while (*(_UNKNOWN **)v62 != &llvm::DominatorTreeWrapperPass::ID)
              {
                v62 += 16;
                if (v62 == v63) {
                  goto LABEL_88;
                }
              }
              uint64_t v64 = *(void *)(v62 + 8);
            }
            uint64_t v65 = (llvm::Loop *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v64 + 96))(v64, &llvm::DominatorTreeWrapperPass::ID)+ 32);
            unint64_t v66 = *(uint64_t **)(v7 + 8);
            uint64_t v67 = *v66;
            uint64_t v68 = v66[1];
            if (v67 == v68)
            {
LABEL_93:
              uint64_t v69 = 0;
            }
            else
            {
              while (*(_UNKNOWN **)v67 != &llvm::PostDominatorTreeWrapperPass::ID)
              {
                v67 += 16;
                if (v67 == v68) {
                  goto LABEL_93;
                }
              }
              uint64_t v69 = *(void *)(v67 + 8);
            }
            (*(void (**)(uint64_t, void *))(*(void *)v69 + 96))(v69, &llvm::PostDominatorTreeWrapperPass::ID);
            uint64_t v82 = 1;
            for (uint64_t m = 8; m != 520; m += 32)
              *(uint64_t *)((char *)&v82 + m) = -4096;
            sub_1CD10AFA4(*(llvm::Module **)(v6 + 40), (uint64_t)&v82);
            unsigned int v71 = *(uint64_t **)(v7 + 8);
            uint64_t v72 = *v71;
            uint64_t v73 = v71[1];
            if (v72 == v73)
            {
LABEL_100:
              uint64_t v74 = 0;
            }
            else
            {
              while (*(_UNKNOWN **)v72 != &llvm::LoopInfoWrapperPass::ID)
              {
                v72 += 16;
                if (v72 == v73) {
                  goto LABEL_100;
                }
              }
              uint64_t v74 = *(void *)(v72 + 8);
            }
            int v75 = (void *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v74 + 96))(v74, &llvm::LoopInfoWrapperPass::ID);
            unint64_t v77 = (llvm **)v75[7];
            if (v77 != (llvm **)v75[8]) {
              llvm::formLCSSARecursively(*v77, v65, (const llvm::DominatorTree *)(v75 + 4), 0, v76);
            }
            v79[0] = v81;
            v79[1] = v81;
            v79[2] = 8;
            int v80 = 0;
            sub_1CD10C594(*(llvm::Module **)(v6 + 40), (uint64_t)v79);
            operator new();
          }
        }
        else
        {
          uint64_t v11 = *(llvm::Value **)(v6 + 88);
        }
        uint64_t v12 = v11;
        goto LABEL_10;
      }
      return 0;
    default:
      if (byte_1EBCDC040) {
        goto LABEL_7;
      }
      return 0;
  }
}

uint64_t sub_1CC7F51E8(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 16);
  uint64_t v3 = *(void **)a1;
  if (v2)
  {
    uint64_t v4 = 1736 * v2;
    do
    {
      if ((*v3 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v5 = (void *)v3[182];
        if (v5 != (void *)v3[181]) {
          free(v5);
        }
        uint64_t v6 = (void *)v3[146];
        if (v6 != (void *)v3[145]) {
          free(v6);
        }
        uint64_t v7 = (void *)v3[110];
        if (v7 != (void *)v3[109]) {
          free(v7);
        }
        unsigned int v8 = (void *)v3[74];
        if (v8 != (void *)v3[73]) {
          free(v8);
        }
        uint64_t v9 = (void *)v3[38];
        if (v9 != (void *)v3[37]) {
          free(v9);
        }
        uint64_t v10 = (void *)v3[2];
        if (v10 != (void *)v3[1]) {
          free(v10);
        }
      }
      v3 += 217;
      v4 -= 1736;
    }
    while (v4);
    uint64_t v3 = *(void **)a1;
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  return a1;
}

void sub_1CC7F52C4(uint64_t a1, uint64_t ***a2, int a3)
{
  uint64_t v5 = a1;
  v400[5] = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 28) = 1;
  int v6 = *(unsigned __int8 *)(a1 + 96);
  sub_1CC7F7E30((unint64_t)&v398, a2);
  uint64_t v7 = v5 + 32;
  sub_1CC7F9E80(v5 + 32, (uint64_t)&v398);
  sub_1CC7F51E8((uint64_t)&v398);
  unsigned int v8 = *(uint64_t **)(v5 + 8);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  int v363 = v6;
  if (v9 == v10)
  {
LABEL_4:
    uint64_t v11 = 0;
  }
  else
  {
    while (*(char **)v9 != llvm::LazyBlockFrequencyInfoPass::ID)
    {
      v9 += 16;
      if (v9 == v10) {
        goto LABEL_4;
      }
    }
    uint64_t v11 = *(void *)(v9 + 8);
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v11 + 96))(v11, llvm::LazyBlockFrequencyInfoPass::ID);
  uint64_t v366 = (uint64_t *)sub_1CD499004((llvm::BlockFrequencyInfo *)(v12 + 32));
  uint64_t v367 = v5 + 32;
  uint64_t v13 = *(void *)(v5 + 80);
  uint64_t v14 = *(void *)(v5 + 88);
  uint64_t v15 = a2[5];
  uint64_t v16 = (uint64_t **)(a2 + 9);
  long long v398 = 0;
  *(void *)&long long v399 = 0;
  DWORD2(v399) = 0;
  uint64_t v17 = (uint64_t ***)a2[10];
  uint64_t v368 = v5;
  uint64_t v364 = a2;
  if (v17 == a2 + 9)
  {
    int v18 = 0;
    unint64_t v19 = 0;
    uint64_t v373 = 0;
    goto LABEL_60;
  }
  uint64_t v20 = (uint64_t)(v15 + 34);
  do
  {
    if (v17) {
      int v21 = v17 - 3;
    }
    else {
      int v21 = 0;
    }
    uint64_t v22 = sub_1CC7FA728(v7, (uint64_t)v21);
    if (DWORD2(v399))
    {
      int v23 = DWORD2(v399) - 1;
      unsigned int v24 = ((v21 >> 4) ^ (v21 >> 9)) & (DWORD2(v399) - 1);
      unint64_t v25 = &v398[88 * v24];
      BOOL v26 = *(uint64_t ****)v25;
      long long v27 = 0uLL;
      if (v21 == *(uint64_t ****)v25) {
        goto LABEL_30;
      }
      int v28 = 0;
      int v29 = 1;
      while (v26 != (uint64_t ***)-4096)
      {
        if (v28) {
          BOOL v30 = 0;
        }
        else {
          BOOL v30 = v26 == (uint64_t ***)-8192;
        }
        if (v30) {
          int v28 = v25;
        }
        unsigned int v31 = v24 + v29++;
        unsigned int v24 = v31 & v23;
        unint64_t v25 = &v398[88 * (v31 & v23)];
        BOOL v26 = *(uint64_t ****)v25;
        if (v21 == *(uint64_t ****)v25) {
          goto LABEL_30;
        }
      }
      if (v28) {
        unint64_t v25 = v28;
      }
    }
    else
    {
      unint64_t v25 = 0;
      long long v27 = 0uLL;
    }
    if (4 * (int)v399 + 4 >= (3 * DWORD2(v399)))
    {
      sub_1CC7FBDE0((uint64_t)&v398, 2 * DWORD2(v399));
      int v33 = DWORD2(v399) - 1;
      unsigned int v34 = (DWORD2(v399) - 1) & ((v21 >> 4) ^ (v21 >> 9));
      unint64_t v25 = &v398[88 * v34];
      uint64_t v35 = *(uint64_t ****)v25;
      if (v21 == *(uint64_t ****)v25) {
        goto LABEL_46;
      }
      uint64_t v36 = 0;
      int v37 = 1;
      while (v35 != (uint64_t ***)-4096)
      {
        if (v36) {
          BOOL v38 = 0;
        }
        else {
          BOOL v38 = v35 == (uint64_t ***)-8192;
        }
        if (v38) {
          uint64_t v36 = v25;
        }
        unsigned int v39 = v34 + v37++;
        unsigned int v34 = v39 & v33;
        unint64_t v25 = &v398[88 * (v39 & v33)];
        uint64_t v35 = *(uint64_t ****)v25;
        if (v21 == *(uint64_t ****)v25)
        {
LABEL_56:
          int8x8_t v32 = v21;
          uint64_t v7 = v367;
          goto LABEL_47;
        }
      }
LABEL_57:
      if (v36) {
        unint64_t v25 = v36;
      }
      uint64_t v7 = v367;
      long long v27 = 0uLL;
      goto LABEL_26;
    }
    if ((DWORD2(v399) + ~v399 - DWORD1(v399)) <= DWORD2(v399) >> 3)
    {
      sub_1CC7FBDE0((uint64_t)&v398, SDWORD2(v399));
      int v40 = DWORD2(v399) - 1;
      unsigned int v41 = (DWORD2(v399) - 1) & ((v21 >> 4) ^ (v21 >> 9));
      unint64_t v25 = &v398[88 * v41];
      unsigned int v42 = *(uint64_t ****)v25;
      if (v21 == *(uint64_t ****)v25)
      {
LABEL_46:
        int8x8_t v32 = v21;
LABEL_47:
        long long v27 = 0uLL;
        goto LABEL_27;
      }
      uint64_t v36 = 0;
      int v43 = 1;
      while (v42 != (uint64_t ***)-4096)
      {
        if (v36) {
          BOOL v44 = 0;
        }
        else {
          BOOL v44 = v42 == (uint64_t ***)-8192;
        }
        if (v44) {
          uint64_t v36 = v25;
        }
        unsigned int v45 = v41 + v43++;
        unsigned int v41 = v45 & v40;
        unint64_t v25 = &v398[88 * (v45 & v40)];
        unsigned int v42 = *(uint64_t ****)v25;
        if (v21 == *(uint64_t ****)v25) {
          goto LABEL_56;
        }
      }
      goto LABEL_57;
    }
LABEL_26:
    int8x8_t v32 = *(uint64_t ****)v25;
LABEL_27:
    LODWORD(v399) = v399 + 1;
    if (v32 != (uint64_t ***)-4096) {
      --DWORD1(v399);
    }
    *(void *)unint64_t v25 = v21;
    *(_OWORD *)(v25 + 8) = v27;
    *(_OWORD *)(v25 + 24) = v27;
    *(_OWORD *)(v25 + 40) = v27;
    *(_OWORD *)(v25 + 56) = v27;
    *(_OWORD *)(v25 + 68) = v27;
LABEL_30:
    sub_1CC7FA784(v21, (_DWORD *)v25 + 2, (uint64_t *)(v22 + 8), v20, v13, v14, 0, 0);
    uint64_t v17 = (uint64_t ***)v17[1];
  }
  while (v17 != (uint64_t ***)v16);
  unint64_t v19 = v398;
  uint64_t v373 = v399;
  int v18 = DWORD2(v399);
  uint64_t v5 = v368;
LABEL_60:
  MEMORY[0x1D25D9CD0](*(void *)(v5 + 56), 8);
  *(void *)(v5 + 56) = v19;
  *(void *)(v5 + 64) = v373;
  *(_DWORD *)(v5 + 72) = v18;
  int v46 = (llvm *)MEMORY[0x1D25D9CD0](0, 8);
  uint64_t v47 = llvm::dbgs(v46);
  uint64_t v48 = v47;
  if (byte_1EBCDBEC0) {
    int v49 = 1;
  }
  else {
    int v49 = a3;
  }
  int v362 = v49;
  if (byte_1EBCDBEC0)
  {
    uint64_t v50 = (_DWORD *)*((void *)v47 + 4);
    if (*((void *)v47 + 3) - (void)v50 > 6uLL)
    {
      *(_DWORD *)((char *)v50 + 3) = 540884285;
      _DWORD *v50 = 1027423498;
      uint64_t v51 = (void *)(*((void *)v47 + 4) + 7);
      *((void *)v47 + 4) = v51;
    }
    else
    {
      llvm::raw_ostream::write(v47, "\n===== ", 7uLL);
      uint64_t v51 = (void *)*((void *)v48 + 4);
    }
    if (*((void *)v48 + 3) - (void)v51 > 0x15uLL)
    {
      qmemcpy(v51, "New DivergenceAnalysis", 22);
      uint64_t v52 = *((void *)v48 + 4) + 22;
      *((void *)v48 + 4) = v52;
    }
    else
    {
      llvm::raw_ostream::write(v48, "New DivergenceAnalysis", 0x16uLL);
      uint64_t v52 = *((void *)v48 + 4);
    }
    if ((unint64_t)(*((void *)v48 + 3) - v52) > 0x12)
    {
      *(_DWORD *)(v52 + 15) = 544370534;
      *(_OWORD *)uint64_t v52 = *(_OWORD *)" - RegPressure for ";
      *((void *)v48 + 4) += 19;
    }
    else
    {
      llvm::raw_ostream::write(v48, " - RegPressure for ", 0x13uLL);
    }
    if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
    {
      uint64_t v53 = ***a2;
      uint64_t v54 = *(void *)(v53 + 152);
      uint64_t v55 = *(unsigned int *)(v53 + 168);
      if (!v55) {
        goto LABEL_77;
      }
      LODWORD(v56) = (v55 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      unint64_t v57 = (uint64_t ****)(v54 + 16 * v56);
      unint64_t v58 = *v57;
      if (*v57 != a2)
      {
        int v59 = 1;
        while (v58 != (uint64_t ***)-4096)
        {
          int v60 = v56 + v59++;
          uint64_t v56 = v60 & (v55 - 1);
          unint64_t v58 = *(uint64_t ****)(v54 + 16 * v56);
          if (v58 == a2)
          {
            unint64_t v57 = (uint64_t ****)(v54 + 16 * v56);
            goto LABEL_78;
          }
        }
LABEL_77:
        unint64_t v57 = (uint64_t ****)(v54 + 16 * v55);
      }
LABEL_78:
      uint64_t v61 = v57[1];
      size_t v64 = (size_t)*v61;
      uint64_t v62 = (const char *)(v61 + 2);
      size_t v63 = v64;
      uint64_t v65 = (_DWORD *)*((void *)v48 + 4);
      if (v64 > *((void *)v48 + 3) - (void)v65)
      {
        llvm::raw_ostream::write(v48, v62, v63);
        goto LABEL_80;
      }
      if (v63)
      {
        memcpy(v65, v62, v63);
        uint64_t v65 = (_DWORD *)(*((void *)v48 + 4) + v63);
        *((void *)v48 + 4) = v65;
      }
    }
    else
    {
LABEL_80:
      uint64_t v65 = (_DWORD *)*((void *)v48 + 4);
    }
    if (*((void *)v48 + 3) - (void)v65 > 6uLL)
    {
      *(_DWORD *)((char *)v65 + 3) = 171785533;
      _DWORD *v65 = 1027423520;
      *((void *)v48 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v48, " =====\n", 7uLL);
    }
  }
  unsigned int v397 = 64;
  uint64_t v396 = 0;
  unsigned int v395 = 64;
  uint64_t v394 = 0;
  unsigned int v393 = 64;
  uint64_t v392 = 0;
  unsigned int v391 = 64;
  uint64_t v390 = 0;
  unsigned int v389 = 64;
  uint64_t v388 = 0;
  unsigned int v387 = 64;
  uint64_t v386 = 0;
  unint64_t v66 = a2[10];
  if (v66 != v16)
  {
    unsigned int v370 = 0;
    unsigned int v67 = 0;
    unsigned int v68 = 0;
    unsigned int v69 = 0;
    unsigned int v70 = 0;
    while (1)
    {
      unsigned int v371 = v68;
      unsigned int v71 = v16;
      unsigned int v72 = v70;
      unsigned int v369 = v66;
      if (v66) {
        uint64_t v73 = (uint64_t)(v66 - 3);
      }
      else {
        uint64_t v73 = 0;
      }
      long long v398 = 0;
      uint64_t v74 = (uint64_t ***)v73;
      unsigned int v75 = v69;
      unsigned int v76 = v67;
      if (sub_1CC7FBD48(*(void *)(v5 + 56), *(_DWORD *)(v5 + 72), v73, &v398)) {
        unint64_t v77 = (unsigned int *)v398;
      }
      else {
        unint64_t v77 = (unsigned int *)(*(void *)(v5 + 56) + 88 * *(unsigned int *)(v5 + 72));
      }
      uint64_t v78 = v77[19];
      uint64_t v79 = v77[20];
      uint64_t v80 = *v366;
      if (!*v366 || (unsigned int v81 = sub_1CBF7A45C(*v366, (uint64_t)v74), v81 == -1)) {
        uint64_t v82 = 0;
      }
      else {
        uint64_t v82 = *(void *)(*(void *)(v80 + 8) + 24 * v81 + 16);
      }
      uint64_t v83 = v82 * v78;
      char v84 = v391;
      if (v391 >= 0x41)
      {
        uint64_t v208 = 0;
        unint64_t v209 = v390;
        unint64_t v210 = ((unint64_t)v391 + 63) >> 6;
        uint64_t v211 = v390;
        unint64_t v212 = v210;
        do
        {
          uint64_t v213 = *(void *)v83;
          v83 += 8;
          unint64_t v214 = v213 + *v211;
          BOOL v215 = v214 + 1 <= *v211;
          if (v208)
          {
            ++v214;
            uint64_t v208 = v215;
          }
          else
          {
            uint64_t v208 = v214 < *v211;
          }
          *v211++ = v214;
          --v212;
        }
        while (v212);
        v209[(v210 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -v84;
      }
      else
      {
        unint64_t v85 = (unint64_t)v390 + v83;
        if (v391) {
          unint64_t v86 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v391;
        }
        else {
          unint64_t v86 = 0;
        }
        uint64_t v390 = (void *)(v86 & v85);
      }
      uint64_t v87 = v82 * (v78 + 1);
      char v88 = v389;
      if (v389 >= 0x41)
      {
        uint64_t v216 = 0;
        unint64_t v217 = (unint64_t *)v388;
        unint64_t v218 = ((unint64_t)v389 + 63) >> 6;
        unint64_t v219 = v218;
        unsigned int v67 = v76;
        do
        {
          uint64_t v220 = *(void *)v87;
          v87 += 8;
          unint64_t v221 = v220 + *v217;
          BOOL v222 = v221 + 1 <= *v217;
          if (v216)
          {
            ++v221;
            uint64_t v216 = v222;
          }
          else
          {
            uint64_t v216 = v221 < *v217;
          }
          *v217++ = v221;
          --v219;
        }
        while (v219);
        *((void *)v388 + (v218 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v88;
      }
      else
      {
        unint64_t v89 = (unint64_t)v388 + v87;
        if (v389) {
          unint64_t v90 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v389;
        }
        else {
          unint64_t v90 = 0;
        }
        uint64_t v388 = (void *)(v90 & v89);
        unsigned int v67 = v76;
      }
      unsigned int v70 = v72;
      uint64_t v91 = v82 * v79;
      char v92 = v387;
      uint64_t v7 = v367;
      if (v387 >= 0x41)
      {
        uint64_t v223 = 0;
        uint64_t v224 = v386;
        unint64_t v225 = ((unint64_t)v387 + 63) >> 6;
        __int16 v226 = v386;
        unint64_t v227 = v225;
        unsigned int v69 = v75;
        do
        {
          uint64_t v228 = *(void *)v91;
          v91 += 8;
          unint64_t v229 = v228 + *v226;
          BOOL v230 = v229 + 1 <= *v226;
          if (v223)
          {
            ++v229;
            uint64_t v223 = v230;
          }
          else
          {
            uint64_t v223 = v229 < *v226;
          }
          *v226++ = v229;
          --v227;
        }
        while (v227);
        v224[(v225 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -v92;
      }
      else
      {
        unint64_t v93 = (unint64_t)v386 + v91;
        if (v387) {
          unint64_t v94 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v387;
        }
        else {
          unint64_t v94 = 0;
        }
        uint64_t v386 = (void *)(v94 & v93);
        unsigned int v69 = v75;
      }
      uint64_t v16 = v71;
      uint64_t v95 = v82 * v77[6];
      char v96 = v397;
      if (v397 >= 0x41)
      {
        uint64_t v231 = 0;
        BOOL v232 = 0;
        int v99 = v396;
        unint64_t v233 = ((unint64_t)v397 + 63) >> 6;
        do
        {
          unint64_t v234 = v99[v231];
          unint64_t v235 = *(void *)(v95 + v231 * 8) + v234;
          BOOL v236 = v235 < v234;
          BOOL v237 = v235 + 1 <= v234;
          if (v232)
          {
            ++v235;
            BOOL v232 = v237;
          }
          else
          {
            BOOL v232 = v236;
          }
          v99[v231++] = v235;
        }
        while (v233 != v231);
        v99[(v233 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -v96;
      }
      else
      {
        unint64_t v97 = (unint64_t)v396 + v95;
        if (v397) {
          unint64_t v98 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v397;
        }
        else {
          unint64_t v98 = 0;
        }
        int v99 = (void *)(v98 & v97);
        uint64_t v396 = (llvm *)(v98 & v97);
      }
      __src = v99;
      uint64_t v100 = v82 * v77[11];
      char v101 = v395;
      if (v395 >= 0x41)
      {
        uint64_t v238 = 0;
        uint64_t v239 = v394;
        unint64_t v240 = ((unint64_t)v395 + 63) >> 6;
        int v241 = v394;
        unint64_t v242 = v240;
        do
        {
          uint64_t v243 = *(void *)v100;
          v100 += 8;
          unint64_t v244 = v243 + *v241;
          BOOL v245 = v244 + 1 <= *v241;
          if (v238)
          {
            ++v244;
            uint64_t v238 = v245;
          }
          else
          {
            uint64_t v238 = v244 < *v241;
          }
          *v241++ = v244;
          --v242;
        }
        while (v242);
        v239[(v240 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -v101;
      }
      else
      {
        unint64_t v102 = (unint64_t)v394 + v100;
        if (v395) {
          unint64_t v103 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v395;
        }
        else {
          unint64_t v103 = 0;
        }
        uint64_t v394 = (void *)(v103 & v102);
      }
      uint64_t v104 = v82 * v77[16];
      char v105 = v393;
      if (v393 >= 0x41)
      {
        uint64_t v246 = 0;
        uint64_t v247 = v392;
        unint64_t v248 = ((unint64_t)v393 + 63) >> 6;
        uint64_t v249 = v392;
        unint64_t v250 = v248;
        do
        {
          uint64_t v251 = *(void *)v104;
          v104 += 8;
          unint64_t v252 = v251 + *v249;
          BOOL v253 = v252 + 1 <= *v249;
          if (v246)
          {
            ++v252;
            uint64_t v246 = v253;
          }
          else
          {
            uint64_t v246 = v252 < *v249;
          }
          *v249++ = v252;
          --v250;
        }
        while (v250);
        v247[(v248 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -v105;
      }
      else
      {
        unint64_t v106 = (unint64_t)v392 + v104;
        if (v393) {
          unint64_t v107 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v393;
        }
        else {
          unint64_t v107 = 0;
        }
        uint64_t v392 = (void *)(v107 & v106);
      }
      if (!byte_1EBCDBEC0) {
        goto LABEL_261;
      }
      unsigned int v374 = v74 >> 4;
      if ((*((unsigned char *)v74 + 23) & 0x10) == 0) {
        goto LABEL_137;
      }
      uint64_t v108 = ***v74;
      uint64_t v109 = *(void *)(v108 + 152);
      uint64_t v110 = *(unsigned int *)(v108 + 168);
      if (v110)
      {
        LODWORD(v111) = (v110 - 1) & (v374 ^ (v74 >> 9));
        uint64_t v112 = (uint64_t ****)(v109 + 16 * v111);
        BOOL v113 = *v112;
        if (*v112 == v74) {
          goto LABEL_135;
        }
        int v114 = 1;
        while (v113 != (uint64_t ***)-4096)
        {
          int v115 = v111 + v114++;
          uint64_t v111 = v115 & (v110 - 1);
          BOOL v113 = *(uint64_t ****)(v109 + 16 * v111);
          if (v113 == v74)
          {
            uint64_t v112 = (uint64_t ****)(v109 + 16 * v111);
            goto LABEL_135;
          }
        }
      }
      uint64_t v112 = (uint64_t ****)(v109 + 16 * v110);
LABEL_135:
      int v116 = v112[1];
      size_t v119 = (size_t)*v116;
      uint64_t v117 = (const char *)(v116 + 2);
      size_t v118 = v119;
      uint64_t v120 = (_DWORD *)*((void *)v48 + 4);
      if (v119 > *((void *)v48 + 3) - (void)v120)
      {
        llvm::raw_ostream::write(v48, v117, v118);
LABEL_137:
        uint64_t v120 = (_DWORD *)*((void *)v48 + 4);
        goto LABEL_140;
      }
      if (v118)
      {
        memcpy(v120, v117, v118);
        uint64_t v120 = (_DWORD *)(*((void *)v48 + 4) + v118);
        *((void *)v48 + 4) = v120;
      }
LABEL_140:
      if (*((void *)v48 + 3) - (void)v120 > 6uLL)
      {
        *(_DWORD *)((char *)v120 + 3) = 540699489;
        _DWORD *v120 = 1634037805;
        *((void *)v48 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v48, "-peak: ", 7uLL);
      }
      sub_1CD098D14(v48, v77[17], 0, 0, 0);
      uint64_t v121 = *((void *)v48 + 4);
      if ((unint64_t)(*((void *)v48 + 3) - v121) > 9)
      {
        *(_WORD *)(v121 + 8) = 10354;
        *(void *)uint64_t v121 = *(void *)" + scalar(";
        *((void *)v48 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v48, " + scalar(", 0xAuLL);
      }
      sub_1CD098D14(v48, v77[18], 0, 0, 0);
      uint64_t v122 = (_WORD *)*((void *)v48 + 4);
      if (*((void *)v48 + 3) - (void)v122 > 1uLL)
      {
        *uint64_t v122 = 2601;
        *((void *)v48 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v48, ")\n", 2uLL);
      }
      if (!byte_1EBCDBEC0) {
        goto LABEL_261;
      }
      if ((*((unsigned char *)v74 + 23) & 0x10) == 0) {
        goto LABEL_157;
      }
      uint64_t v123 = ***v74;
      uint64_t v124 = *(void *)(v123 + 152);
      uint64_t v125 = *(unsigned int *)(v123 + 168);
      if (v125)
      {
        LODWORD(v126) = (v125 - 1) & (v374 ^ (v74 >> 9));
        uint64_t v127 = (uint64_t ****)(v124 + 16 * v126);
        unint64_t v128 = *v127;
        if (*v127 == v74) {
          goto LABEL_155;
        }
        int v129 = 1;
        while (v128 != (uint64_t ***)-4096)
        {
          int v130 = v126 + v129++;
          uint64_t v126 = v130 & (v125 - 1);
          unint64_t v128 = *(uint64_t ****)(v124 + 16 * v126);
          if (v128 == v74)
          {
            uint64_t v127 = (uint64_t ****)(v124 + 16 * v126);
            goto LABEL_155;
          }
        }
      }
      uint64_t v127 = (uint64_t ****)(v124 + 16 * v125);
LABEL_155:
      uint64_t v131 = v127[1];
      size_t v134 = (size_t)*v131;
      unsigned int v132 = (const char *)(v131 + 2);
      size_t v133 = v134;
      BOOL v135 = (_WORD *)*((void *)v48 + 4);
      if (v134 > *((void *)v48 + 3) - (void)v135)
      {
        llvm::raw_ostream::write(v48, v132, v133);
LABEL_157:
        BOOL v135 = (_WORD *)*((void *)v48 + 4);
        goto LABEL_160;
      }
      if (v133)
      {
        memcpy(v135, v132, v133);
        BOOL v135 = (_WORD *)(*((void *)v48 + 4) + v133);
        *((void *)v48 + 4) = v135;
      }
LABEL_160:
      if (*((void *)v48 + 3) - (void)v135 > 5uLL)
      {
        v135[2] = 8250;
        *(_DWORD *)BOOL v135 = 2019650861;
        *((void *)v48 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(v48, "-max: ", 6uLL);
      }
      sub_1CD098D14(v48, v77[5], 0, 0, 0);
      uint64_t v136 = *((void *)v48 + 4);
      if ((unint64_t)(*((void *)v48 + 3) - v136) > 9)
      {
        *(_WORD *)(v136 + 8) = 10354;
        *(void *)uint64_t v136 = *(void *)" | scalar(";
        *((void *)v48 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v48, " | scalar(", 0xAuLL);
      }
      sub_1CD098D14(v48, v77[10], 0, 0, 0);
      uint64_t v137 = *((void *)v48 + 4);
      if ((unint64_t)(*((void *)v48 + 3) - v137) > 0xB)
      {
        *(_DWORD *)(v137 + 8) = 678261359;
        *(void *)uint64_t v137 = *(void *)") | uniform(";
        *((void *)v48 + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(v48, ") | uniform(", 0xCuLL);
      }
      sub_1CD098D14(v48, v77[15], 0, 0, 0);
      uint64_t v138 = (_WORD *)*((void *)v48 + 4);
      if (*((void *)v48 + 3) - (void)v138 > 1uLL)
      {
        _WORD *v138 = 2601;
        *((void *)v48 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v48, ")\n", 2uLL);
      }
      if (!byte_1EBCDBEC0) {
        goto LABEL_261;
      }
      if ((*((unsigned char *)v74 + 23) & 0x10) == 0) {
        goto LABEL_179;
      }
      uint64_t v139 = ***v74;
      uint64_t v140 = *(void *)(v139 + 152);
      uint64_t v141 = *(unsigned int *)(v139 + 168);
      if (v141)
      {
        LODWORD(v142) = (v141 - 1) & (v374 ^ (v74 >> 9));
        unint64_t v143 = (uint64_t ****)(v140 + 16 * v142);
        unint64_t v144 = *v143;
        if (*v143 == v74) {
          goto LABEL_177;
        }
        int v145 = 1;
        while (v144 != (uint64_t ***)-4096)
        {
          int v146 = v142 + v145++;
          uint64_t v142 = v146 & (v141 - 1);
          unint64_t v144 = *(uint64_t ****)(v140 + 16 * v142);
          if (v144 == v74)
          {
            unint64_t v143 = (uint64_t ****)(v140 + 16 * v142);
            goto LABEL_177;
          }
        }
      }
      unint64_t v143 = (uint64_t ****)(v140 + 16 * v141);
LABEL_177:
      int v147 = v143[1];
      size_t v150 = (size_t)*v147;
      unsigned int v148 = (const char *)(v147 + 2);
      size_t v149 = v150;
      unint64_t v151 = (unsigned char *)*((void *)v48 + 4);
      if (v150 > *((void *)v48 + 3) - (void)v151)
      {
        llvm::raw_ostream::write(v48, v148, v149);
LABEL_179:
        unint64_t v151 = (unsigned char *)*((void *)v48 + 4);
        goto LABEL_182;
      }
      if (v149)
      {
        memcpy(v151, v148, v149);
        unint64_t v151 = (unsigned char *)(*((void *)v48 + 4) + v149);
        *((void *)v48 + 4) = v151;
      }
LABEL_182:
      if (*((void *)v48 + 3) - (void)v151 > 8uLL)
      {
        v151[8] = 32;
        *(void *)unint64_t v151 = *(void *)"-livein: ";
        *((void *)v48 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v48, "-livein: ", 9uLL);
      }
      sub_1CD098D14(v48, v77[2], 0, 0, 0);
      uint64_t v152 = *((void *)v48 + 4);
      if ((unint64_t)(*((void *)v48 + 3) - v152) > 9)
      {
        *(_WORD *)(v152 + 8) = 10354;
        *(void *)uint64_t v152 = *(void *)" + scalar(";
        *((void *)v48 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v48, " + scalar(", 0xAuLL);
      }
      sub_1CD098D14(v48, v77[7], 0, 0, 0);
      uint64_t v153 = *((void *)v48 + 4);
      if ((unint64_t)(*((void *)v48 + 3) - v153) > 0xB)
      {
        *(_DWORD *)(v153 + 8) = 678261359;
        *(void *)uint64_t v153 = *(void *)") + uniform(";
        *((void *)v48 + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(v48, ") + uniform(", 0xCuLL);
      }
      sub_1CD098D14(v48, v77[12], 0, 0, 0);
      unsigned int v154 = (_WORD *)*((void *)v48 + 4);
      if (*((void *)v48 + 3) - (void)v154 > 1uLL)
      {
        *unsigned int v154 = 2601;
        *((void *)v48 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v48, ")\n", 2uLL);
      }
      if (!byte_1EBCDBEC0) {
        goto LABEL_261;
      }
      if ((*((unsigned char *)v74 + 23) & 0x10) == 0) {
        goto LABEL_201;
      }
      uint64_t v155 = ***v74;
      uint64_t v156 = *(void *)(v155 + 152);
      uint64_t v157 = *(unsigned int *)(v155 + 168);
      if (v157)
      {
        LODWORD(v158) = (v157 - 1) & (v374 ^ (v74 >> 9));
        uint64_t v159 = (uint64_t ****)(v156 + 16 * v158);
        size_t v160 = *v159;
        if (*v159 == v74) {
          goto LABEL_199;
        }
        int v161 = 1;
        while (v160 != (uint64_t ***)-4096)
        {
          int v162 = v158 + v161++;
          uint64_t v158 = v162 & (v157 - 1);
          size_t v160 = *(uint64_t ****)(v156 + 16 * v158);
          if (v160 == v74)
          {
            uint64_t v159 = (uint64_t ****)(v156 + 16 * v158);
            goto LABEL_199;
          }
        }
      }
      uint64_t v159 = (uint64_t ****)(v156 + 16 * v157);
LABEL_199:
      uint64_t v163 = v159[1];
      size_t v166 = (size_t)*v163;
      uint64_t v164 = (const char *)(v163 + 2);
      size_t v165 = v166;
      uint64_t v167 = (_WORD *)*((void *)v48 + 4);
      if (v166 > *((void *)v48 + 3) - (void)v167)
      {
        llvm::raw_ostream::write(v48, v164, v165);
LABEL_201:
        uint64_t v167 = (_WORD *)*((void *)v48 + 4);
        goto LABEL_204;
      }
      if (v165)
      {
        memcpy(v167, v164, v165);
        uint64_t v167 = (_WORD *)(*((void *)v48 + 4) + v165);
        *((void *)v48 + 4) = v167;
      }
LABEL_204:
      if (*((void *)v48 + 3) - (void)v167 > 9uLL)
      {
        v167[4] = 8250;
        *(void *)uint64_t v167 = *(void *)"-liveout: ";
        *((void *)v48 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v48, "-liveout: ", 0xAuLL);
      }
      sub_1CD098D14(v48, v77[3], 0, 0, 0);
      uint64_t v168 = *((void *)v48 + 4);
      if ((unint64_t)(*((void *)v48 + 3) - v168) > 9)
      {
        *(_WORD *)(v168 + 8) = 10354;
        *(void *)uint64_t v168 = *(void *)" + scalar(";
        *((void *)v48 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v48, " + scalar(", 0xAuLL);
      }
      sub_1CD098D14(v48, v77[8], 0, 0, 0);
      uint64_t v169 = (void *)*((void *)v48 + 4);
      if (*((void *)v48 + 3) - (void)v169 > 0xCuLL)
      {
        qmemcpy(v169, ") + uniform (", 13);
        *((void *)v48 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(v48, ") + uniform (", 0xDuLL);
      }
      sub_1CD098D14(v48, v77[13], 0, 0, 0);
      BOOL v170 = (_WORD *)*((void *)v48 + 4);
      if (*((void *)v48 + 3) - (void)v170 > 1uLL)
      {
        *BOOL v170 = 2601;
        *((void *)v48 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v48, ")\n", 2uLL);
      }
      if (!byte_1EBCDBEC0) {
        goto LABEL_261;
      }
      if ((*((unsigned char *)v74 + 23) & 0x10) == 0) {
        goto LABEL_223;
      }
      uint64_t v171 = ***v74;
      uint64_t v172 = *(void *)(v171 + 152);
      uint64_t v173 = *(unsigned int *)(v171 + 168);
      if (v173)
      {
        LODWORD(v174) = (v173 - 1) & (v374 ^ (v74 >> 9));
        BOOL v175 = (uint64_t ****)(v172 + 16 * v174);
        int v176 = *v175;
        if (*v175 == v74) {
          goto LABEL_221;
        }
        int v177 = 1;
        while (v176 != (uint64_t ***)-4096)
        {
          int v178 = v174 + v177++;
          uint64_t v174 = v178 & (v173 - 1);
          int v176 = *(uint64_t ****)(v172 + 16 * v174);
          if (v176 == v74)
          {
            BOOL v175 = (uint64_t ****)(v172 + 16 * v174);
            goto LABEL_221;
          }
        }
      }
      BOOL v175 = (uint64_t ****)(v172 + 16 * v173);
LABEL_221:
      uint64_t v179 = v175[1];
      size_t v182 = (size_t)*v179;
      unsigned int v180 = (const char *)(v179 + 2);
      size_t v181 = v182;
      uint64_t v183 = (void *)*((void *)v48 + 4);
      if (v182 > *((void *)v48 + 3) - (void)v183)
      {
        llvm::raw_ostream::write(v48, v180, v181);
LABEL_223:
        uint64_t v183 = (void *)*((void *)v48 + 4);
        goto LABEL_226;
      }
      if (v181)
      {
        memcpy(v183, v180, v181);
        uint64_t v183 = (void *)(*((void *)v48 + 4) + v181);
        *((void *)v48 + 4) = v183;
      }
LABEL_226:
      if (*((void *)v48 + 3) - (void)v183 > 0xAuLL)
      {
        *(_DWORD *)((char *)v183 + 7) = 540702066;
        *uint64_t v183 = *(void *)"-livethru: ";
        *((void *)v48 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(v48, "-livethru: ", 0xBuLL);
      }
      sub_1CD098D14(v48, v77[4], 0, 0, 0);
      uint64_t v184 = *((void *)v48 + 4);
      if ((unint64_t)(*((void *)v48 + 3) - v184) > 9)
      {
        *(_WORD *)(v184 + 8) = 10354;
        *(void *)uint64_t v184 = *(void *)" + scalar(";
        *((void *)v48 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v48, " + scalar(", 0xAuLL);
      }
      sub_1CD098D14(v48, v77[9], 0, 0, 0);
      uint64_t v185 = (unsigned char *)*((void *)v48 + 4);
      if (*((unsigned char **)v48 + 3) == v185)
      {
        llvm::raw_ostream::write(v48, ")", 1uLL);
        uint64_t v186 = *((void *)v48 + 4);
      }
      else
      {
        *uint64_t v185 = 41;
        uint64_t v186 = *((void *)v48 + 4) + 1;
        *((void *)v48 + 4) = v186;
      }
      if ((unint64_t)(*((void *)v48 + 3) - v186) > 0xA)
      {
        *(_DWORD *)(v186 + 7) = 678261359;
        *(void *)uint64_t v186 = *(void *)" + uniform(";
        *((void *)v48 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(v48, " + uniform(", 0xBuLL);
      }
      sub_1CD098D14(v48, v77[14], 0, 0, 0);
      char v187 = (_WORD *)*((void *)v48 + 4);
      if (*((void *)v48 + 3) - (void)v187 > 1uLL)
      {
        *char v187 = 2601;
        *((void *)v48 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v48, ")\n", 2uLL);
      }
      if (!byte_1EBCDBEC0) {
        goto LABEL_261;
      }
      if ((*((unsigned char *)v74 + 23) & 0x10) == 0) {
        goto LABEL_250;
      }
      uint64_t v188 = ***v74;
      uint64_t v189 = *(void *)(v188 + 152);
      uint64_t v190 = *(unsigned int *)(v188 + 168);
      if (!v190) {
        goto LABEL_247;
      }
      LODWORD(v191) = (v190 - 1) & (v374 ^ (v74 >> 9));
      unsigned int v192 = (uint64_t ****)(v189 + 16 * v191);
      uint64_t v193 = *v192;
      if (*v192 != v74)
      {
        int v194 = 1;
        while (v193 != (uint64_t ***)-4096)
        {
          int v195 = v191 + v194++;
          uint64_t v191 = v195 & (v190 - 1);
          uint64_t v193 = *(uint64_t ****)(v189 + 16 * v191);
          if (v193 == v74)
          {
            unsigned int v192 = (uint64_t ****)(v189 + 16 * v191);
            goto LABEL_248;
          }
        }
LABEL_247:
        unsigned int v192 = (uint64_t ****)(v189 + 16 * v190);
      }
LABEL_248:
      int v196 = (size_t *)v192[1];
      size_t v199 = *v196;
      unsigned int v197 = v196 + 2;
      size_t v198 = v199;
      uint64_t v200 = (void *)*((void *)v48 + 4);
      if (v199 <= *((void *)v48 + 3) - (void)v200)
      {
        if (v198)
        {
          memcpy(v200, v197, v198);
          uint64_t v200 = (void *)(*((void *)v48 + 4) + v198);
          *((void *)v48 + 4) = v200;
        }
        goto LABEL_253;
      }
      llvm::raw_ostream::write(v48, (const char *)v197, v198);
LABEL_250:
      uint64_t v200 = (void *)*((void *)v48 + 4);
LABEL_253:
      if (*((void *)v48 + 3) - (void)v200 > 0xDuLL)
      {
        qmemcpy(v200, "-AccPressure: ", 14);
        *((void *)v48 + 4) += 14;
      }
      else
      {
        llvm::raw_ostream::write(v48, "-AccPressure: ", 0xEuLL);
      }
      sub_1CD098D14(v48, v77[6], 0, 0, 0);
      uint64_t v201 = *((void *)v48 + 4);
      if ((unint64_t)(*((void *)v48 + 3) - v201) > 9)
      {
        *(_WORD *)(v201 + 8) = 10354;
        *(void *)uint64_t v201 = *(void *)" + scalar(";
        *((void *)v48 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v48, " + scalar(", 0xAuLL);
      }
      sub_1CD098D14(v48, v77[11], 0, 0, 0);
      BOOL v202 = (void *)*((void *)v48 + 4);
      if (*((void *)v48 + 3) - (void)v202 > 0xCuLL)
      {
        qmemcpy(v202, ") + uniform (", 13);
        *((void *)v48 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(v48, ") + uniform (", 0xDuLL);
      }
      sub_1CD098D14(v48, v77[16], 0, 0, 0);
      uint64_t v203 = *((void *)v48 + 4);
      if ((unint64_t)(*((void *)v48 + 3) - v203) > 2)
      {
        *(unsigned char *)(v203 + 2) = 10;
        *(_WORD *)uint64_t v203 = 2601;
        *((void *)v48 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v48, ")\n\n", 3uLL);
      }
LABEL_261:
      unsigned int v204 = v370;
      unsigned int v68 = v371;
      unsigned int v205 = v67 + v370;
      unsigned int v206 = v77[17];
      unsigned int v207 = v77[18];
      if (v67 + v370 < v207 + v206) {
        unsigned int v67 = v77[18];
      }
      if (v205 < v207 + v206) {
        unsigned int v204 = v77[17];
      }
      unsigned int v370 = v204;
      if (v371 <= v77[5]) {
        unsigned int v68 = v77[5];
      }
      if (v69 <= v77[10]) {
        unsigned int v69 = v77[10];
      }
      if (v70 <= v77[15]) {
        unsigned int v70 = v77[15];
      }
      uint64_t v5 = v368;
      unint64_t v66 = (uint64_t **)v369[1];
      if (v66 == v71) {
        goto LABEL_332;
      }
    }
  }
  __src = 0;
  unsigned int v70 = 0;
  unsigned int v69 = 0;
  unsigned int v68 = 0;
  unsigned int v67 = 0;
  unsigned int v370 = 0;
LABEL_332:
  uint64_t v254 = v364;
  sub_1CD112980((llvm::Module *)v364[5], (uint64_t)v383);
  unsigned int v372 = v68;
  if (v385)
  {
    if (SHIBYTE(v384) < 0)
    {
      sub_1CB8BDF7C((uint64_t)__p, v383[0], (unint64_t)v383[1]);
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)v383;
      uint64_t v382 = v384;
    }
  }
  else
  {
    HIBYTE(v382) = 7;
    strcpy((char *)__p, "unknown");
  }
  ShaderID = (llvm *)llvm::AGXIR::getShaderID((llvm::AGXIR *)v364[5], v255);
  if (v362)
  {
    uint64_t v257 = ShaderID;
    unsigned int v380 = v397;
    if (v397 > 0x40) {
      operator new[]();
    }
    int v379 = __src;
    unsigned int v378 = v389;
    if (v389 > 0x40) {
      operator new[]();
    }
    uint64_t v377 = v388;
    llvm::APInt::operator-=((uint64_t)&v377, 1uLL);
    unsigned int v258 = v378;
    int v259 = v377;
    unsigned int v378 = 0;
    char v260 = v380;
    if (v380 >= 0x41)
    {
      uint64_t v354 = 0;
      char v355 = (unint64_t *)v379;
      unint64_t v356 = ((unint64_t)v380 + 63) >> 6;
      uint64_t v357 = v377;
      unint64_t v358 = v356;
      do
      {
        uint64_t v359 = *v357++;
        unint64_t v360 = v359 + *v355;
        BOOL v361 = v360 + 1 <= *v355;
        if (v354)
        {
          ++v360;
          uint64_t v354 = v361;
        }
        else
        {
          uint64_t v354 = v360 < *v355;
        }
        *v355++ = v360;
        --v358;
      }
      while (v358);
      *((void *)v379 + (v356 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v260;
      uint64_t v254 = v364;
      uint64_t v7 = v367;
      uint64_t v5 = v368;
    }
    else
    {
      if (v380) {
        unint64_t v261 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v380;
      }
      else {
        unint64_t v261 = 0;
      }
      int v379 = (void *)(v261 & ((unint64_t)v377 + (void)v379));
    }
    if (v258 >= 0x41 && v259) {
      MEMORY[0x1D25D9CB0](v259, 0x1000C8000313F17);
    }
    if (v378 >= 0x41 && v377) {
      MEMORY[0x1D25D9CB0](v377, 0x1000C8000313F17);
    }
    unsigned int v376 = v380;
    if (v380 > 0x40) {
      operator new[]();
    }
    BOOL v375 = v379;
    if (v380) {
      unint64_t v262 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v380;
    }
    else {
      unint64_t v262 = 0;
    }
    int v379 = (void *)(v262 & ((unint64_t)v394 + (void)v379));
    __int16 v263 = v388;
    if (v389 < 0x41)
    {
LABEL_367:
      if (v263) {
        goto LABEL_368;
      }
      int v379 = 0;
      uint64_t v269 = v376;
      if (v376 > 0x40)
      {
        *BOOL v375 = 0;
        bzero(v375 + 1, (((unint64_t)(v269 + 63) >> 3) - 8) & 0xFFFFFFF8);
      }
      else
      {
        BOOL v375 = 0;
      }
    }
    else
    {
      int v264 = 0;
      int64_t v265 = ((unint64_t)v389 + 63) >> 6;
      do
      {
        if (v265-- < 1) {
          break;
        }
        unint64_t v267 = *((void *)v388 + v265);
        v264 += __clz(v267);
      }
      while (!v267);
      unsigned int v268 = v389 | 0xFFFFFFC0;
      if ((v389 & 0x3F) == 0) {
        unsigned int v268 = 0;
      }
      if (v389 - v264 - v268 <= 0x40)
      {
        __int16 v263 = *(void **)v388;
        goto LABEL_367;
      }
LABEL_368:
      llvm::APInt::udiv((uint64_t)&v379, (const llvm::APInt *)&v388, (uint64_t)&v398);
      if (v380 >= 0x41 && v379) {
        MEMORY[0x1D25D9CB0](v379, 0x1000C8000313F17);
      }
      int v379 = v398;
      unsigned int v380 = v399;
      llvm::APInt::udiv((uint64_t)&v375, (const llvm::APInt *)&v388, (uint64_t)&v398);
      if (v376 >= 0x41 && v375) {
        MEMORY[0x1D25D9CB0](v375, 0x1000C8000313F17);
      }
      BOOL v375 = v398;
      unsigned int v376 = v399;
    }
    unint64_t v270 = (void *)*((void *)v48 + 4);
    if (*((void *)v48 + 3) - (void)v270 > 0x15uLL)
    {
      qmemcpy(v270, "New DivergenceAnalysis", 22);
      uint64_t v271 = (_DWORD *)(*((void *)v48 + 4) + 22);
      *((void *)v48 + 4) = v271;
    }
    else
    {
      llvm::raw_ostream::write(v48, "New DivergenceAnalysis", 0x16uLL);
      uint64_t v271 = (_DWORD *)*((void *)v48 + 4);
    }
    if (*((void *)v48 + 3) - (void)v271 > 3uLL)
    {
      *uint64_t v271 = 656420128;
      *((void *)v48 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v48, " - '", 4uLL);
    }
    if ((*((unsigned char *)v254 + 23) & 0x10) != 0)
    {
      uint64_t v272 = ***v254;
      uint64_t v273 = *(void *)(v272 + 152);
      uint64_t v274 = *(unsigned int *)(v272 + 168);
      if (!v274) {
        goto LABEL_389;
      }
      LODWORD(v275) = (v274 - 1) & ((v254 >> 4) ^ (v254 >> 9));
      uint64_t v276 = (uint64_t ****)(v273 + 16 * v275);
      uint64_t v277 = *v276;
      if (*v276 != v254)
      {
        int v278 = 1;
        while (v277 != (uint64_t ***)-4096)
        {
          int v279 = v275 + v278++;
          uint64_t v275 = v279 & (v274 - 1);
          uint64_t v277 = *(uint64_t ****)(v273 + 16 * v275);
          if (v277 == v254)
          {
            uint64_t v276 = (uint64_t ****)(v273 + 16 * v275);
            goto LABEL_390;
          }
        }
LABEL_389:
        uint64_t v276 = (uint64_t ****)(v273 + 16 * v274);
      }
LABEL_390:
      unsigned int v280 = v276[1];
      size_t v283 = (size_t)*v280;
      unint64_t v281 = (const char *)(v280 + 2);
      size_t v282 = v283;
      uint64_t v284 = (_WORD *)*((void *)v48 + 4);
      if (v283 > *((void *)v48 + 3) - (void)v284)
      {
        llvm::raw_ostream::write(v48, v281, v282);
        goto LABEL_392;
      }
      if (v282)
      {
        memcpy(v284, v281, v282);
        uint64_t v284 = (_WORD *)(*((void *)v48 + 4) + v282);
        *((void *)v48 + 4) = v284;
      }
    }
    else
    {
LABEL_392:
      uint64_t v284 = (_WORD *)*((void *)v48 + 4);
    }
    if (*((void *)v48 + 3) - (void)v284 > 5uLL)
    {
      v284[2] = 8250;
      *(_DWORD *)uint64_t v284 = 1145643047;
      *((void *)v48 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v48, "' ID: ", 6uLL);
    }
    if (((unint64_t)v257 & 0xFF00000000) != 0) {
      unint64_t v285 = (int)v257;
    }
    else {
      unint64_t v285 = -1;
    }
    if ((v285 & 0x8000000000000000) != 0)
    {
      unint64_t v285 = -(uint64_t)v285;
      uint64_t v286 = v48;
      int v287 = 1;
    }
    else
    {
      uint64_t v286 = v48;
      int v287 = 0;
    }
    sub_1CD098D14(v286, v285, 0, 0, v287);
    uint64_t v288 = *((void *)v48 + 4);
    if ((unint64_t)(*((void *)v48 + 3) - v288) > 2)
    {
      *(unsigned char *)(v288 + 2) = 32;
      *(_WORD *)uint64_t v288 = 11552;
      *((void *)v48 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v48, " - ", 3uLL);
    }
    if (v382 >= 0) {
      uint64_t v289 = __p;
    }
    else {
      uint64_t v289 = (void **)__p[0];
    }
    if (v382 >= 0) {
      size_t v290 = HIBYTE(v382) & 0x7F;
    }
    else {
      size_t v290 = (size_t)__p[1];
    }
    llvm::raw_ostream::write(v48, (const char *)v289, v290);
    uint64_t v291 = *((void *)v48 + 4);
    if ((unint64_t)(*((void *)v48 + 3) - v291) > 0x11)
    {
      *(_WORD *)(v291 + 16) = 8250;
      *(_OWORD *)uint64_t v291 = *(_OWORD *)" - Peak pressure: ";
      *((void *)v48 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v48, " - Peak pressure: ", 0x12uLL);
    }
    sub_1CD098D14(v48, v370, 0, 0, 0);
    uint64_t v292 = *((void *)v48 + 4);
    if ((unint64_t)(*((void *)v48 + 3) - v292) > 9)
    {
      *(_WORD *)(v292 + 8) = 10354;
      *(void *)uint64_t v292 = *(void *)" + scalar(";
      *((void *)v48 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v48, " + scalar(", 0xAuLL);
    }
    sub_1CD098D14(v48, v67, 0, 0, 0);
    size_t v293 = (_DWORD *)*((void *)v48 + 4);
    if (*((void *)v48 + 3) - (void)v293 > 3uLL)
    {
      *size_t v293 = 545005609;
      *((void *)v48 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v48, ") | ", 4uLL);
    }
    sub_1CD098D14(v48, v372, 0, 0, 0);
    uint64_t v294 = *((void *)v48 + 4);
    if ((unint64_t)(*((void *)v48 + 3) - v294) > 9)
    {
      *(_WORD *)(v294 + 8) = 10354;
      *(void *)uint64_t v294 = *(void *)" | scalar(";
      *((void *)v48 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v48, " | scalar(", 0xAuLL);
    }
    sub_1CD098D14(v48, v69, 0, 0, 0);
    uint64_t v295 = *((void *)v48 + 4);
    if ((unint64_t)(*((void *)v48 + 3) - v295) > 0xB)
    {
      *(_DWORD *)(v295 + 8) = 678261359;
      *(void *)uint64_t v295 = *(void *)") | uniform(";
      *((void *)v48 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v48, ") | uniform(", 0xCuLL);
    }
    sub_1CD098D14(v48, v70, 0, 0, 0);
    unint64_t v296 = (void *)*((void *)v48 + 4);
    if (*((void *)v48 + 3) - (void)v296 > 0x14uLL)
    {
      qmemcpy(v296, ") | AccGPR16Pressure(", 21);
      *((void *)v48 + 4) += 21;
    }
    else
    {
      llvm::raw_ostream::write(v48, ") | AccGPR16Pressure(", 0x15uLL);
    }
    long long v398 = (char *)v400;
    long long v399 = xmmword_1CDB15B30;
    llvm::APInt::toString((unsigned int *)&v396, &v398, 0xAu, 0, 0);
    llvm::raw_ostream::write(v48, v398, v399);
    if (v398 != (char *)v400) {
      free(v398);
    }
    uint64_t v297 = (void *)*((void *)v48 + 4);
    if (*((void *)v48 + 3) - (void)v297 > 0x15uLL)
    {
      qmemcpy(v297, ") | AccScalarPressure(", 22);
      *((void *)v48 + 4) += 22;
    }
    else
    {
      llvm::raw_ostream::write(v48, ") | AccScalarPressure(", 0x16uLL);
    }
    long long v398 = (char *)v400;
    long long v399 = xmmword_1CDB15B30;
    llvm::APInt::toString((unsigned int *)&v394, &v398, 0xAu, 0, 0);
    llvm::raw_ostream::write(v48, v398, v399);
    if (v398 != (char *)v400) {
      free(v398);
    }
    int v298 = (void *)*((void *)v48 + 4);
    if (*((void *)v48 + 3) - (void)v298 > 0x16uLL)
    {
      qmemcpy(v298, ") | AccUniformPressure(", 23);
      *((void *)v48 + 4) += 23;
    }
    else
    {
      llvm::raw_ostream::write(v48, ") | AccUniformPressure(", 0x17uLL);
    }
    long long v398 = (char *)v400;
    long long v399 = xmmword_1CDB15B30;
    llvm::APInt::toString((unsigned int *)&v392, &v398, 0xAu, 0, 0);
    llvm::raw_ostream::write(v48, v398, v399);
    if (v398 != (char *)v400) {
      free(v398);
    }
    uint64_t v299 = *((void *)v48 + 4);
    if ((unint64_t)(*((void *)v48 + 3) - v299) > 0x11)
    {
      *(_WORD *)(v299 + 16) = 10353;
      *(_OWORD *)uint64_t v299 = *(_OWORD *)") | AccInstrsFreq(";
      *((void *)v48 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v48, ") | AccInstrsFreq(", 0x12uLL);
    }
    long long v398 = (char *)v400;
    long long v399 = xmmword_1CDB15B30;
    llvm::APInt::toString((unsigned int *)&v390, &v398, 0xAu, 0, 0);
    llvm::raw_ostream::write(v48, v398, v399);
    if (v398 != (char *)v400) {
      free(v398);
    }
    uint64_t v300 = (void *)*((void *)v48 + 4);
    if (*((void *)v48 + 3) - (void)v300 > 0x17uLL)
    {
      qmemcpy(v300, ") | AccScalarInstrsFreq(", 24);
      *((void *)v48 + 4) += 24;
    }
    else
    {
      llvm::raw_ostream::write(v48, ") | AccScalarInstrsFreq(", 0x18uLL);
    }
    long long v398 = (char *)v400;
    long long v399 = xmmword_1CDB15B30;
    llvm::APInt::toString((unsigned int *)&v386, &v398, 0xAu, 0, 0);
    llvm::raw_ostream::write(v48, v398, v399);
    if (v398 != (char *)v400) {
      free(v398);
    }
    uint64_t v301 = (void *)*((void *)v48 + 4);
    if (*((void *)v48 + 3) - (void)v301 > 0x1AuLL)
    {
      qmemcpy(v301, ") | AvgRegFootPrintWScalar(", 27);
      *((void *)v48 + 4) += 27;
    }
    else
    {
      llvm::raw_ostream::write(v48, ") | AvgRegFootPrintWScalar(", 0x1BuLL);
    }
    long long v398 = (char *)v400;
    long long v399 = xmmword_1CDB15B30;
    llvm::APInt::toString((unsigned int *)&v379, &v398, 0xAu, 0, 0);
    llvm::raw_ostream::write(v48, v398, v399);
    if (v398 != (char *)v400) {
      free(v398);
    }
    uint64_t v302 = *((void *)v48 + 4);
    if ((unint64_t)(*((void *)v48 + 3) - v302) > 0x13)
    {
      *(_DWORD *)(v302 + 16) = 678719081;
      *(_OWORD *)uint64_t v302 = *(_OWORD *)") | AvgRegFootPrint(";
      *((void *)v48 + 4) += 20;
    }
    else
    {
      llvm::raw_ostream::write(v48, ") | AvgRegFootPrint(", 0x14uLL);
    }
    long long v398 = (char *)v400;
    long long v399 = xmmword_1CDB15B30;
    llvm::APInt::toString((unsigned int *)&v375, &v398, 0xAu, 0, 0);
    llvm::raw_ostream::write(v48, v398, v399);
    ShaderID = (llvm *)v398;
    if (v398 != (char *)v400) {
      free(v398);
    }
    uint64_t v303 = *((void *)v48 + 4);
    if ((unint64_t)(*((void *)v48 + 3) - v303) > 2)
    {
      *(unsigned char *)(v303 + 2) = 10;
      *(_WORD *)uint64_t v303 = 2601;
      *((void *)v48 + 4) += 3;
    }
    else
    {
      ShaderID = llvm::raw_ostream::write(v48, ")\n\n", 3uLL);
    }
    if (v376 >= 0x41)
    {
      ShaderID = (llvm *)v375;
      if (v375) {
        ShaderID = (llvm *)MEMORY[0x1D25D9CB0](v375, 0x1000C8000313F17);
      }
    }
    if (v380 >= 0x41)
    {
      ShaderID = (llvm *)v379;
      if (v379) {
        ShaderID = (llvm *)MEMORY[0x1D25D9CB0](v379, 0x1000C8000313F17);
      }
    }
  }
  if (SHIBYTE(v382) < 0) {
    operator delete(__p[0]);
  }
  if (v385 && SHIBYTE(v384) < 0) {
    operator delete(v383[0]);
  }
  if (v387 >= 0x41)
  {
    ShaderID = (llvm *)v386;
    if (v386) {
      ShaderID = (llvm *)MEMORY[0x1D25D9CB0](v386, 0x1000C8000313F17);
    }
  }
  if (v389 >= 0x41)
  {
    ShaderID = (llvm *)v388;
    if (v388) {
      ShaderID = (llvm *)MEMORY[0x1D25D9CB0](v388, 0x1000C8000313F17);
    }
  }
  if (v391 >= 0x41)
  {
    ShaderID = (llvm *)v390;
    if (v390) {
      ShaderID = (llvm *)MEMORY[0x1D25D9CB0](v390, 0x1000C8000313F17);
    }
  }
  if (v393 >= 0x41)
  {
    ShaderID = (llvm *)v392;
    if (v392) {
      ShaderID = (llvm *)MEMORY[0x1D25D9CB0](v392, 0x1000C8000313F17);
    }
  }
  if (v395 >= 0x41)
  {
    ShaderID = (llvm *)v394;
    if (v394) {
      ShaderID = (llvm *)MEMORY[0x1D25D9CB0](v394, 0x1000C8000313F17);
    }
  }
  if (v397 >= 0x41)
  {
    ShaderID = v396;
    if (v396) {
      ShaderID = (llvm *)MEMORY[0x1D25D9CB0](v396, 0x1000C8000313F17);
    }
  }
  *(unsigned char *)(v5 + 28) = (v363 | v67) != 0;
  if (byte_1EBCDBE00)
  {
    char v304 = llvm::dbgs(ShaderID);
    uint64_t v305 = v304;
    uint64_t v307 = *(void *)(v5 + 80);
    uint64_t v306 = *(void *)(v5 + 88);
    uint64_t v308 = *((void *)v304 + 4);
    if ((unint64_t)(*((void *)v304 + 3) - v308) > 0x13)
    {
      *(_DWORD *)(v308 + 16) = 544370534;
      *(_OWORD *)uint64_t v308 = *(_OWORD *)"\n===== Liveness for ";
      *((void *)v304 + 4) += 20;
    }
    else
    {
      llvm::raw_ostream::write(v304, "\n===== Liveness for ", 0x14uLL);
    }
    if ((*((unsigned char *)v254 + 23) & 0x10) != 0)
    {
      uint64_t v309 = ***v254;
      uint64_t v310 = *(void *)(v309 + 152);
      uint64_t v311 = *(unsigned int *)(v309 + 168);
      if (v311)
      {
        LODWORD(v312) = (v311 - 1) & ((v254 >> 4) ^ (v254 >> 9));
        uint64_t v313 = (uint64_t ****)(v310 + 16 * v312);
        std::string v314 = *v313;
        if (*v313 != v254)
        {
          int v315 = 1;
          do
          {
            if (v314 == (uint64_t ***)-4096) {
              goto LABEL_494;
            }
            int v316 = v312 + v315++;
            uint64_t v312 = v316 & (v311 - 1);
            std::string v314 = *(uint64_t ****)(v310 + 16 * v312);
          }
          while (v314 != v254);
          uint64_t v313 = (uint64_t ****)(v310 + 16 * v312);
        }
      }
      else
      {
LABEL_494:
        uint64_t v313 = (uint64_t ****)(v310 + 16 * v311);
      }
      uint64_t v317 = (size_t *)v313[1];
      size_t v320 = *v317;
      unsigned int v318 = v317 + 2;
      size_t v319 = v320;
      uint64_t v321 = (_DWORD *)*((void *)v305 + 4);
      if (v320 <= *((void *)v305 + 3) - (void)v321)
      {
        if (v319)
        {
          memcpy(v321, v318, v319);
          uint64_t v321 = (_DWORD *)(*((void *)v305 + 4) + v319);
          *((void *)v305 + 4) = v321;
        }
        goto LABEL_500;
      }
      llvm::raw_ostream::write(v305, (const char *)v318, v319);
    }
    uint64_t v321 = (_DWORD *)*((void *)v305 + 4);
LABEL_500:
    if (*((void *)v305 + 3) - (void)v321 > 6uLL)
    {
      *(_DWORD *)((char *)v321 + 3) = 171785533;
      _DWORD *v321 = 1027423520;
      *((void *)v305 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v305, " =====\n", 7uLL);
    }
    for (uint64_t i = v254[10]; ; uint64_t i = (uint64_t **)i[1])
    {
      if (i == v16) {
        return;
      }
      if (i) {
        __int16 v323 = (uint64_t ***)(i - 3);
      }
      else {
        __int16 v323 = 0;
      }
      uint64_t v324 = sub_1CC7FA728(v7, (uint64_t)v323);
      unsigned int v325 = v323 >> 4;
      if ((*((unsigned char *)v323 + 23) & 0x10) == 0) {
        goto LABEL_517;
      }
      uint64_t v326 = ***v323;
      uint64_t v327 = *(void *)(v326 + 152);
      uint64_t v328 = *(unsigned int *)(v326 + 168);
      if (v328)
      {
        LODWORD(v329) = (v328 - 1) & (v325 ^ (v323 >> 9));
        uint64_t v330 = (uint64_t ****)(v327 + 16 * v329);
        uint64_t v331 = *v330;
        if (*v330 == v323) {
          goto LABEL_515;
        }
        int v332 = 1;
        while (v331 != (uint64_t ***)-4096)
        {
          int v333 = v329 + v332++;
          uint64_t v329 = v333 & (v328 - 1);
          uint64_t v331 = *(uint64_t ****)(v327 + 16 * v329);
          if (v331 == v323)
          {
            uint64_t v330 = (uint64_t ****)(v327 + 16 * v329);
            goto LABEL_515;
          }
        }
      }
      uint64_t v330 = (uint64_t ****)(v327 + 16 * v328);
LABEL_515:
      __int16 v334 = v330[1];
      size_t v337 = (size_t)*v334;
      char v335 = (const char *)(v334 + 2);
      size_t v336 = v337;
      uint64_t v338 = (unsigned char *)*((void *)v305 + 4);
      if (v337 > *((void *)v305 + 3) - (void)v338)
      {
        llvm::raw_ostream::write(v305, v335, v336);
LABEL_517:
        uint64_t v338 = (unsigned char *)*((void *)v305 + 4);
        goto LABEL_520;
      }
      if (v336)
      {
        memcpy(v338, v335, v336);
        uint64_t v338 = (unsigned char *)(*((void *)v305 + 4) + v336);
        *((void *)v305 + 4) = v338;
      }
LABEL_520:
      if (*((void *)v305 + 3) - (void)v338 > 8uLL)
      {
        v338[8] = 32;
        *(void *)uint64_t v338 = *(void *)"-livein: ";
        *((void *)v305 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v305, "-livein: ", 9uLL);
      }
      sub_1CC7FC8E4((char **)v305, (void *)(v324 + 8), v307, v306, 0);
      uint64_t v339 = (unsigned char *)*((void *)v305 + 4);
      if ((unint64_t)v339 >= *((void *)v305 + 3))
      {
        llvm::raw_ostream::write(v305, 10);
      }
      else
      {
        *((void *)v305 + 4) = v339 + 1;
        *uint64_t v339 = 10;
      }
      if ((*((unsigned char *)v323 + 23) & 0x10) == 0) {
        goto LABEL_535;
      }
      uint64_t v340 = ***v323;
      uint64_t v341 = *(void *)(v340 + 152);
      uint64_t v342 = *(unsigned int *)(v340 + 168);
      if (v342)
      {
        LODWORD(v343) = (v342 - 1) & (v325 ^ (v323 >> 9));
        uint64_t v344 = (uint64_t ****)(v341 + 16 * v343);
        int v345 = *v344;
        if (*v344 == v323) {
          goto LABEL_533;
        }
        int v346 = 1;
        while (v345 != (uint64_t ***)-4096)
        {
          int v347 = v343 + v346++;
          uint64_t v343 = v347 & (v342 - 1);
          int v345 = *(uint64_t ****)(v341 + 16 * v343);
          if (v345 == v323)
          {
            uint64_t v344 = (uint64_t ****)(v341 + 16 * v343);
            goto LABEL_533;
          }
        }
      }
      uint64_t v344 = (uint64_t ****)(v341 + 16 * v342);
LABEL_533:
      int v348 = v344[1];
      size_t v351 = (size_t)*v348;
      uint64_t v349 = (const char *)(v348 + 2);
      size_t v350 = v351;
      uint64_t v352 = (_WORD *)*((void *)v305 + 4);
      if (v351 > *((void *)v305 + 3) - (void)v352)
      {
        llvm::raw_ostream::write(v305, v349, v350);
LABEL_535:
        uint64_t v352 = (_WORD *)*((void *)v305 + 4);
        goto LABEL_538;
      }
      if (v350)
      {
        memcpy(v352, v349, v350);
        uint64_t v352 = (_WORD *)(*((void *)v305 + 4) + v350);
        *((void *)v305 + 4) = v352;
      }
LABEL_538:
      if (*((void *)v305 + 3) - (void)v352 > 9uLL)
      {
        v352[4] = 8250;
        *(void *)uint64_t v352 = *(void *)"-liveout: ";
        *((void *)v305 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v305, "-liveout: ", 0xAuLL);
      }
      sub_1CC7FC8E4((char **)v305, (void *)(v324 + 296), v307, v306, 0);
      uint64_t v353 = (_WORD *)*((void *)v305 + 4);
      if (*((void *)v305 + 3) - (void)v353 > 1uLL)
      {
        *uint64_t v353 = 2570;
        *((void *)v305 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v305, "\n\n", 2uLL);
      }
    }
  }
}

void sub_1CC7F7E30(unint64_t a1, uint64_t ***a2)
{
  uint64_t v2 = a1;
  v401[24] = *MEMORY[0x1E4F143B8];
  int v3 = byte_1EBCDBE00;
  if (!byte_1EBCDBE00) {
    goto LABEL_2;
  }
  uint64_t v297 = a2;
  int v298 = llvm::dbgs((llvm *)a1);
  uint64_t v299 = v298;
  uint64_t v300 = *((void *)v298 + 4);
  if ((unint64_t)(*((void *)v298 + 3) - v300) > 8)
  {
    *(unsigned char *)(v300 + 8) = 32;
    *(void *)uint64_t v300 = *(void *)"Analyze: ";
    *((void *)v298 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v298, "Analyze: ", 9uLL);
  }
  a2 = v297;
  if ((*((unsigned char *)v297 + 23) & 0x10) != 0)
  {
    uint64_t v301 = ***v297;
    uint64_t v302 = *(void *)(v301 + 152);
    uint64_t v303 = *(unsigned int *)(v301 + 168);
    if (v303)
    {
      LODWORD(v304) = (v303 - 1) & ((v297 >> 4) ^ (v297 >> 9));
      uint64_t v305 = (uint64_t ****)(v302 + 16 * v304);
      uint64_t v306 = *v305;
      if (*v305 == v297)
      {
LABEL_630:
        std::string v314 = (size_t *)v305[1];
        size_t v317 = *v314;
        int v315 = v314 + 2;
        size_t v316 = v317;
        a1 = *((void *)v299 + 4);
        if (v317 <= *((void *)v299 + 3) - a1)
        {
          if (v316)
          {
            memcpy((void *)a1, v315, v316);
            a1 = *((void *)v299 + 4) + v316;
            *((void *)v299 + 4) = a1;
          }
        }
        else
        {
          llvm::raw_ostream::write(v299, (const char *)v315, v316);
          a1 = *((void *)v299 + 4);
        }
        a2 = v297;
        goto LABEL_635;
      }
      int v307 = 1;
      while (v306 != (uint64_t ***)-4096)
      {
        int v308 = v304 + v307++;
        uint64_t v304 = v308 & (v303 - 1);
        uint64_t v306 = *(uint64_t ****)(v302 + 16 * v304);
        if (v306 == v297)
        {
          uint64_t v305 = (uint64_t ****)(v302 + 16 * v304);
          goto LABEL_630;
        }
      }
    }
    uint64_t v305 = (uint64_t ****)(v302 + 16 * v303);
    goto LABEL_630;
  }
  a1 = *((void *)v299 + 4);
LABEL_635:
  if (a1 >= *((void *)v299 + 3))
  {
    a1 = (unint64_t)llvm::raw_ostream::write(v299, 10);
    a2 = v297;
  }
  else
  {
    *((void *)v299 + 4) = a1 + 1;
    *(unsigned char *)a1 = 10;
  }
  int v3 = byte_1EBCDBE00;
LABEL_2:
  uint64_t v4 = (uint64_t ***)a2[9];
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  *(_DWORD *)(v2 + 16) = 0;
  uint64_t v322 = a2 + 9;
  if (v4 != a2 + 9)
  {
    if (v3)
    {
      uint64_t v309 = a2;
      a1 = (unint64_t)llvm::dbgs((llvm *)a1);
      uint64_t v310 = *(void **)(a1 + 32);
      if (*(void *)(a1 + 24) - (void)v310 > 0x1CuLL)
      {
        qmemcpy(v310, "Collect liveness information\n", 29);
        *(void *)(a1 + 32) += 29;
      }
      else
      {
        a1 = (unint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)a1, "Collect liveness information\n", 0x1DuLL);
      }
      a2 = v309;
    }
    unsigned int v318 = a2;
    uint64_t v5 = a2[10];
    if (v5 != (uint64_t **)v322)
    {
      while (1)
      {
        uint64_t v327 = v5;
        if (v5) {
          uint64_t v6 = (uint64_t)(v5 - 3);
        }
        else {
          uint64_t v6 = 0;
        }
        uint64_t v394 = (void *)v6;
        unsigned int v372 = 0;
        a1 = sub_1CC7FA080(*(void *)v2, *(_DWORD *)(v2 + 16), v6, &v372);
        uint64_t v7 = v372;
        if ((a1 & 1) == 0)
        {
          uint64_t v7 = sub_1CC7FA118(v2, (uint64_t *)&v394, v372);
          void *v7 = v6;
          bzero(v7 + 4, 0x6A8uLL);
          v7[1] = v7 + 5;
          void v7[2] = v7 + 5;
          v7[3] = 32;
          v7[37] = v7 + 41;
          v7[38] = v7 + 41;
          *((_DWORD *)v7 + 78) = 32;
          v7[73] = v7 + 77;
          v7[74] = v7 + 77;
          *((_DWORD *)v7 + 150) = 32;
          v7[109] = v7 + 113;
          v7[110] = v7 + 113;
          *((_DWORD *)v7 + 222) = 32;
          v7[145] = v7 + 149;
          v7[146] = v7 + 149;
          *((_DWORD *)v7 + 294) = 32;
          v7[181] = v7 + 185;
          v7[182] = v7 + 185;
          *((_DWORD *)v7 + 366) = 32;
        }
        unsigned int v8 = (void *)(v6 + 40);
        uint64_t v9 = *(void **)(v6 + 40);
        if (v9 != (void *)(v6 + 40))
        {
          uint64_t v325 = v6;
          uint64_t v10 = (_DWORD *)v7 + 223;
          uint64_t v11 = (unsigned int *)(v7 + 111);
          do
          {
            uint64_t v12 = v9 ? (uint64_t)(v9 - 3) : 0;
            if (*(unsigned char *)(v12 + 16) == 83) {
              break;
            }
            uint64_t v13 = v7[74];
            uint64_t v14 = *((unsigned int *)v7 + 151);
            if (v13 == v7[73])
            {
              if (v14)
              {
                uint64_t v15 = 0;
                uint64_t v16 = 8 * v14;
                uint64_t v17 = (uint64_t *)v7[74];
                do
                {
                  if (*v17 == v12) {
                    goto LABEL_48;
                  }
                  if (*v17 == -2) {
                    uint64_t v15 = v17;
                  }
                  ++v17;
                  v16 -= 8;
                }
                while (v16);
                if (v15)
                {
                  *uint64_t v15 = v12;
                  --*((_DWORD *)v7 + 152);
                  goto LABEL_48;
                }
              }
              unsigned int v18 = *((_DWORD *)v7 + 150);
              if (v14 < v18)
              {
                *((_DWORD *)v7 + 151) = v14 + 1;
                *(void *)(v13 + 8 * v14) = v12;
                goto LABEL_48;
              }
            }
            else
            {
              unsigned int v18 = *((_DWORD *)v7 + 150);
            }
            if (3 * v18 <= 4 * ((int)v14 - *((_DWORD *)v7 + 152)))
            {
              if (v18 >= 0x40) {
                v18 *= 2;
              }
              else {
                unsigned int v18 = 128;
              }
            }
            else if (v18 - v14 >= v18 >> 3)
            {
              goto LABEL_29;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v7 + 73), v18);
            unsigned int v18 = *((_DWORD *)v7 + 150);
            uint64_t v13 = v7[74];
LABEL_29:
            unsigned int v19 = v18 - 1;
            unsigned int v20 = (v18 - 1) & ((v12 >> 4) ^ (v12 >> 9));
            int v21 = (uint64_t *)(v13 + 8 * v20);
            uint64_t v22 = *v21;
            if (*v21 == -1)
            {
              int v23 = 0;
LABEL_41:
              if (v23) {
                long long v27 = v23;
              }
              else {
                long long v27 = v21;
              }
              if (*v27 != v12)
              {
                if (*v27 == -2) {
                  --*((_DWORD *)v7 + 152);
                }
                else {
                  ++*((_DWORD *)v7 + 151);
                }
                uint64_t *v27 = v12;
              }
            }
            else
            {
              int v23 = 0;
              int v24 = 1;
              while (v22 != v12)
              {
                if (v23) {
                  BOOL v25 = 0;
                }
                else {
                  BOOL v25 = v22 == -2;
                }
                if (v25) {
                  int v23 = v21;
                }
                unsigned int v26 = v20 + v24++;
                unsigned int v20 = v26 & v19;
                int v21 = (uint64_t *)(v13 + 8 * (v26 & v19));
                uint64_t v22 = *v21;
                if (*v21 == -1) {
                  goto LABEL_41;
                }
              }
            }
LABEL_48:
            uint64_t v28 = v7[110];
            uint64_t v29 = v7[109];
            if (v28 == v29)
            {
              uint64_t v30 = *v10;
              unsigned int v31 = (void *)(v28 + 8 * v30);
              if (v30)
              {
                uint64_t v32 = 0;
                uint64_t v33 = 8 * v30;
                while (*(void *)(v28 + v32) != v12)
                {
                  v32 += 8;
                  if (v33 == v32) {
                    goto LABEL_66;
                  }
                }
                unsigned int v31 = (void *)(v28 + v32);
              }
LABEL_66:
              uint64_t v29 = v7[110];
            }
            else
            {
              uint64_t v34 = *v11;
              int v35 = v34 - 1;
              unsigned int v36 = (v34 - 1) & ((v12 >> 4) ^ (v12 >> 9));
              unsigned int v31 = (void *)(v28 + 8 * v36);
              uint64_t v37 = *v31;
              if (*v31 == -1)
              {
                BOOL v38 = 0;
LABEL_124:
                if (v38) {
                  unsigned int v31 = v38;
                }
                if (*v31 != v12) {
                  unsigned int v31 = (void *)(v28 + 8 * v34);
                }
              }
              else
              {
                BOOL v38 = 0;
                int v39 = 1;
                while (v37 != v12)
                {
                  if (v38) {
                    BOOL v40 = 0;
                  }
                  else {
                    BOOL v40 = v37 == -2;
                  }
                  if (v40) {
                    BOOL v38 = v31;
                  }
                  unsigned int v41 = v36 + v39++;
                  unsigned int v36 = v41 & v35;
                  unsigned int v31 = (void *)(v28 + 8 * (v41 & v35));
                  uint64_t v37 = *v31;
                  if (*v31 == -1) {
                    goto LABEL_124;
                  }
                }
              }
            }
            if (v28 == v29) {
              unsigned int v42 = (unsigned int *)v7 + 223;
            }
            else {
              unsigned int v42 = (unsigned int *)(v7 + 111);
            }
            if (v31 != (void *)(v28 + 8 * *v42))
            {
              *unsigned int v31 = -2;
              ++*((_DWORD *)v7 + 224);
            }
            int v43 = *(_DWORD *)(v12 + 20);
            if ((v43 & 0x40000000) == 0)
            {
              uint64_t v44 = v43 & 0x7FFFFFF;
              uint64_t v45 = v12 - 32 * v44;
              if (v44) {
                goto LABEL_76;
              }
              goto LABEL_121;
            }
            uint64_t v45 = *(void *)(v12 - 8);
            uint64_t v44 = v43 & 0x7FFFFFF;
            if (v44)
            {
LABEL_76:
              uint64_t v46 = v45 + 32 * v44;
              do
              {
                uint64_t v47 = *(void *)v45;
                unsigned int v48 = *(unsigned __int8 *)(*(void *)v45 + 16);
                if (v48 >= 0x15 && v48 != 22)
                {
                  uint64_t v50 = v7[110];
                  uint64_t v51 = *((unsigned int *)v7 + 223);
                  if (v50 != v7[109])
                  {
                    unsigned int v55 = *v11;
LABEL_92:
                    if (3 * v55 <= 4 * ((int)v51 - *((_DWORD *)v7 + 224)))
                    {
                      if (v55 >= 0x40) {
                        v55 *= 2;
                      }
                      else {
                        unsigned int v55 = 128;
                      }
                    }
                    else if (v55 - v51 >= v55 >> 3)
                    {
                      goto LABEL_94;
                    }
                    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v7 + 109), v55);
                    unsigned int v55 = *((_DWORD *)v7 + 222);
                    uint64_t v50 = v7[110];
LABEL_94:
                    unsigned int v56 = v55 - 1;
                    unsigned int v57 = (v55 - 1) & ((v47 >> 4) ^ (v47 >> 9));
                    unint64_t v58 = (void *)(v50 + 8 * v57);
                    uint64_t v59 = *v58;
                    if (*v58 == -1)
                    {
                      int v60 = 0;
LABEL_106:
                      if (v60) {
                        size_t v64 = v60;
                      }
                      else {
                        size_t v64 = v58;
                      }
                      if (*v64 != v47)
                      {
                        if (*v64 == -2) {
                          --*((_DWORD *)v7 + 224);
                        }
                        else {
                          ++*v10;
                        }
                        void *v64 = v47;
                      }
                    }
                    else
                    {
                      int v60 = 0;
                      int v61 = 1;
                      while (v59 != v47)
                      {
                        if (v60) {
                          BOOL v62 = 0;
                        }
                        else {
                          BOOL v62 = v59 == -2;
                        }
                        if (v62) {
                          int v60 = v58;
                        }
                        unsigned int v63 = v57 + v61++;
                        unsigned int v57 = v63 & v56;
                        unint64_t v58 = (void *)(v50 + 8 * (v63 & v56));
                        uint64_t v59 = *v58;
                        if (*v58 == -1) {
                          goto LABEL_106;
                        }
                      }
                    }
                    goto LABEL_113;
                  }
                  if (!v51) {
                    goto LABEL_89;
                  }
                  uint64_t v52 = 0;
                  uint64_t v53 = 8 * v51;
                  uint64_t v54 = (void *)v7[110];
                  do
                  {
                    if (*v54 == v47) {
                      goto LABEL_113;
                    }
                    if (*v54 == -2) {
                      uint64_t v52 = v54;
                    }
                    ++v54;
                    v53 -= 8;
                  }
                  while (v53);
                  if (v52)
                  {
                    *uint64_t v52 = v47;
                    --*((_DWORD *)v7 + 224);
                  }
                  else
                  {
LABEL_89:
                    unsigned int v55 = *v11;
                    if (v51 >= *v11) {
                      goto LABEL_92;
                    }
                    _DWORD *v10 = v51 + 1;
                    *(void *)(v50 + 8 * v51) = v47;
                  }
                }
LABEL_113:
                v45 += 32;
              }
              while (v45 != v46);
            }
LABEL_121:
            uint64_t v9 = (void *)*v9;
          }
          while (v9 != v8);
          if ((void *)*v8 != v8)
          {
            uint64_t v65 = *(void *)(v325 + 48);
            uint64_t v66 = v65 - 24;
            uint64_t v67 = v65 ? v65 - 24 : 0;
            if (v65 && *(unsigned char *)(v67 + 16) == 83) {
              break;
            }
          }
        }
LABEL_229:
        uint64_t v5 = (uint64_t **)v327[1];
        if (v5 == (uint64_t **)v322) {
          goto LABEL_230;
        }
      }
      while (1)
      {
        uint64_t v68 = v7[146];
        uint64_t v69 = *((unsigned int *)v7 + 295);
        if (v68 == v7[145])
        {
          if (v69)
          {
            unsigned int v70 = 0;
            uint64_t v71 = 8 * v69;
            unsigned int v72 = (void *)v7[146];
            do
            {
              if (*v72 == v66) {
                goto LABEL_172;
              }
              if (*v72 == -2) {
                unsigned int v70 = v72;
              }
              ++v72;
              v71 -= 8;
            }
            while (v71);
            if (v70)
            {
              *unsigned int v70 = v66;
              --*((_DWORD *)v7 + 296);
              goto LABEL_172;
            }
          }
          unsigned int v73 = *((_DWORD *)v7 + 294);
          if (v69 < v73)
          {
            *((_DWORD *)v7 + 295) = v69 + 1;
            *(void *)(v68 + 8 * v69) = v66;
            goto LABEL_172;
          }
        }
        else
        {
          unsigned int v73 = *((_DWORD *)v7 + 294);
        }
        if (3 * v73 <= 4 * ((int)v69 - *((_DWORD *)v7 + 296)))
        {
          if (v73 >= 0x40) {
            v73 *= 2;
          }
          else {
            unsigned int v73 = 128;
          }
        }
        else if (v73 - v69 >= v73 >> 3)
        {
          goto LABEL_153;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v7 + 145), v73);
        unsigned int v73 = *((_DWORD *)v7 + 294);
        uint64_t v68 = v7[146];
LABEL_153:
        unsigned int v74 = v73 - 1;
        unsigned int v75 = (v73 - 1) & ((v66 >> 4) ^ (v66 >> 9));
        unsigned int v76 = (void *)(v68 + 8 * v75);
        uint64_t v77 = *v76;
        if (*v76 == -1)
        {
          uint64_t v78 = 0;
LABEL_165:
          if (v78) {
            uint64_t v82 = v78;
          }
          else {
            uint64_t v82 = v76;
          }
          if (*v82 != v66)
          {
            if (*v82 == -2) {
              --*((_DWORD *)v7 + 296);
            }
            else {
              ++*((_DWORD *)v7 + 295);
            }
            *uint64_t v82 = v66;
          }
        }
        else
        {
          uint64_t v78 = 0;
          int v79 = 1;
          while (v77 != v66)
          {
            if (v78) {
              BOOL v80 = 0;
            }
            else {
              BOOL v80 = v77 == -2;
            }
            if (v80) {
              uint64_t v78 = v76;
            }
            unsigned int v81 = v75 + v79++;
            unsigned int v75 = v81 & v74;
            unsigned int v76 = (void *)(v68 + 8 * (v81 & v74));
            uint64_t v77 = *v76;
            if (*v76 == -1) {
              goto LABEL_165;
            }
          }
        }
LABEL_172:
        int v83 = *(_DWORD *)(v66 + 20);
        if ((v83 & 0x40000000) != 0)
        {
          unint64_t v85 = *(uint64_t **)(v66 - 8);
          unint64_t v86 = &v85[4 * *(unsigned int *)(v66 + 60)];
          uint64_t v84 = v83 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v84 = v83 & 0x7FFFFFF;
          unint64_t v85 = (uint64_t *)(v66 - 32 * v84);
          unint64_t v86 = &v85[4 * *(unsigned int *)(v66 + 60)];
        }
        uint64_t v87 = &v85[4 * v84];
        if (v84)
        {
          do
          {
            if (*(unsigned __int8 *)(*v85 + 16) >= 0x15u)
            {
              a1 = (unint64_t)sub_1CC7F9FA0(v2, v86);
              unint64_t v88 = a1;
              uint64_t v89 = *v85;
              uint64_t v90 = *(void *)(a1 + 1448);
              uint64_t v91 = *(unsigned int *)(a1 + 1460);
              if (v90 != *(void *)(a1 + 1440))
              {
                unsigned int v95 = *(_DWORD *)(a1 + 1456);
LABEL_188:
                if (3 * v95 <= 4 * ((int)v91 - *(_DWORD *)(a1 + 1464)))
                {
                  if (v95 >= 0x40) {
                    v95 *= 2;
                  }
                  else {
                    unsigned int v95 = 128;
                  }
                }
                else if (v95 - v91 >= v95 >> 3)
                {
                  goto LABEL_190;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 1440), v95);
                unsigned int v95 = *(_DWORD *)(v88 + 1456);
                uint64_t v90 = *(void *)(v88 + 1448);
LABEL_190:
                unsigned int v96 = v95 - 1;
                unsigned int v97 = (v95 - 1) & ((v89 >> 4) ^ (v89 >> 9));
                unint64_t v98 = (void *)(v90 + 8 * v97);
                uint64_t v99 = *v98;
                if (*v98 == -1)
                {
                  uint64_t v100 = 0;
LABEL_202:
                  if (v100) {
                    uint64_t v104 = v100;
                  }
                  else {
                    uint64_t v104 = v98;
                  }
                  if (*v104 != v89)
                  {
                    if (*v104 == -2) {
                      --*(_DWORD *)(v88 + 1464);
                    }
                    else {
                      ++*(_DWORD *)(v88 + 1460);
                    }
                    void *v104 = v89;
                  }
                }
                else
                {
                  uint64_t v100 = 0;
                  int v101 = 1;
                  while (v99 != v89)
                  {
                    if (v100) {
                      BOOL v102 = 0;
                    }
                    else {
                      BOOL v102 = v99 == -2;
                    }
                    if (v102) {
                      uint64_t v100 = v98;
                    }
                    unsigned int v103 = v97 + v101++;
                    unsigned int v97 = v103 & v96;
                    unint64_t v98 = (void *)(v90 + 8 * (v103 & v96));
                    uint64_t v99 = *v98;
                    if (*v98 == -1) {
                      goto LABEL_202;
                    }
                  }
                }
                goto LABEL_209;
              }
              if (!v91) {
                goto LABEL_185;
              }
              char v92 = 0;
              uint64_t v93 = 8 * v91;
              unint64_t v94 = *(void **)(a1 + 1448);
              do
              {
                if (*v94 == v89) {
                  goto LABEL_209;
                }
                if (*v94 == -2) {
                  char v92 = v94;
                }
                ++v94;
                v93 -= 8;
              }
              while (v93);
              if (v92)
              {
                *char v92 = v89;
                --*(_DWORD *)(a1 + 1464);
              }
              else
              {
LABEL_185:
                unsigned int v95 = *(_DWORD *)(a1 + 1456);
                if (v91 >= v95) {
                  goto LABEL_188;
                }
                *(_DWORD *)(a1 + 1460) = v91 + 1;
                *(void *)(v90 + 8 * v91) = v89;
              }
            }
LABEL_209:
            ++v86;
            v85 += 4;
          }
          while (v85 != v87);
        }
        uint64_t v105 = *(void *)(v66 + 32);
        uint64_t v66 = v105 - 24;
        if (v105) {
          uint64_t v106 = v105 - 24;
        }
        else {
          uint64_t v106 = 0;
        }
        if (!v105 || *(unsigned char *)(v106 + 16) != 83) {
          goto LABEL_229;
        }
      }
    }
LABEL_230:
    unint64_t v107 = &unk_1EBCDB000;
    if (byte_1EBCDBE00)
    {
      a1 = (unint64_t)llvm::dbgs((llvm *)a1);
      uint64_t v311 = *(void **)(a1 + 32);
      if (*(void *)(a1 + 24) - (void)v311 > 0x19uLL)
      {
        qmemcpy(v311, "Perform dataflow analysis\n", 26);
        *(void *)(a1 + 32) += 26;
      }
      else
      {
        a1 = (unint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)a1, "Perform dataflow analysis\n", 0x1AuLL);
      }
    }
    LODWORD(v319) = 0;
LABEL_232:
    unint64_t v319 = (v319 + 1);
    if (v107[3584])
    {
      uint64_t v108 = llvm::dbgs((llvm *)a1);
      uint64_t v109 = v108;
      uint64_t v110 = (_OWORD *)*((void *)v108 + 4);
      if (*((void *)v108 + 3) - (void)v110 > 0xFuLL)
      {
        *uint64_t v110 = *(_OWORD *)"Start iteration ";
        *((void *)v108 + 4) += 16;
      }
      else
      {
        llvm::raw_ostream::write(v108, "Start iteration ", 0x10uLL);
      }
      sub_1CD098D14(v109, v319, 0, 0, 0);
      uint64_t v111 = (unsigned char *)*((void *)v109 + 4);
      if (*((unsigned char **)v109 + 3) == v111)
      {
        llvm::raw_ostream::write(v109, "\n", 1uLL);
      }
      else
      {
        *uint64_t v111 = 10;
        ++*((void *)v109 + 4);
      }
    }
    uint64_t v112 = v318[10];
    if (v112) {
      uint64_t v113 = (uint64_t)(v112 - 3);
    }
    else {
      uint64_t v113 = 0;
    }
    sub_1CBF8EB48((llvm::SmallPtrSetImplBase *)&v394, v113);
    uint64_t v393 = 0;
    memset(v392, 0, sizeof(v392));
    uint64_t v390 = 0;
    memset(v389, 0, sizeof(v389));
    int v114 = v368;
    uint64_t v386 = &v389[2];
    unsigned int v387 = &v389[2];
    uint64_t v388 = 8;
    unsigned int v391 = &v392[2];
    v392[1] = 8;
    int v363 = v368;
    int v115 = __src;
    if (__src == v394)
    {
      uint64_t v364 = v368;
      int v116 = __src;
    }
    else
    {
      unsigned int v293 = v396;
      int v114 = malloc_type_malloc(8 * v396, 0x4065EBACuLL);
      if (!v114)
      {
        if (v293 || (v114 = malloc_type_malloc(1uLL, 0x4065EBACuLL), unint64_t v107 = (unsigned char *)&unk_1EBCDB000, !v114)) {
LABEL_608:
        }
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      }
      uint64_t v364 = v114;
      int v116 = v394;
      int v115 = __src;
    }
    unsigned int v117 = v397;
    unsigned int v365 = v396;
    if (v115 == v116) {
      unsigned int v118 = v397;
    }
    else {
      unsigned int v118 = v396;
    }
    if (v118)
    {
      memmove(v114, v115, 8 * v118);
      unsigned int v117 = v397;
    }
    unsigned int v119 = v400;
    unsigned int v366 = v117;
    int v367 = v398;
    unsigned int v369 = v371;
    uint64_t v370 = 0x800000000;
    if (v400)
    {
      if (v400 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v371, v399, 24 * v400);
      LODWORD(v370) = v119;
    }
    uint64_t v120 = v359;
    uint64_t v354 = v359;
    uint64_t v121 = v387;
    if (v387 == v386)
    {
      char v355 = v359;
      uint64_t v122 = v387;
    }
    else
    {
      int v294 = v388;
      uint64_t v120 = malloc_type_malloc(8 * v388, 0x4065EBACuLL);
      if (!v120)
      {
        if (v294) {
          goto LABEL_608;
        }
        uint64_t v120 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        unint64_t v107 = (unsigned char *)&unk_1EBCDB000;
        if (!v120) {
          goto LABEL_608;
        }
      }
      char v355 = v120;
      uint64_t v122 = v386;
      uint64_t v121 = v387;
    }
    int v123 = HIDWORD(v388);
    int v356 = v388;
    if (v121 == v122) {
      unsigned int v124 = HIDWORD(v388);
    }
    else {
      unsigned int v124 = v388;
    }
    if (v124)
    {
      memmove(v120, v121, 8 * v124);
      int v123 = HIDWORD(v388);
    }
    int v125 = v392[0];
    int v357 = v123;
    int v358 = v389[0];
    unint64_t v360 = v362;
    uint64_t v361 = 0x800000000;
    if (v392[0])
    {
      if (v392[0] >= 9u) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v362, v391, 24 * v392[0]);
      LODWORD(v361) = v125;
    }
    sub_1CD640EC8((uint64_t)&v372, (uint64_t *)&v363, (uint64_t *)&v354);
    if (v360 != v362) {
      free(v360);
    }
    if (v355 != v354) {
      free(v355);
    }
    if (v369 != v371) {
      free(v369);
    }
    if (v364 != v363) {
      free(v364);
    }
    uint64_t v126 = v350;
    int v345 = v350;
    uint64_t v127 = v373;
    if (v373 == v372)
    {
      int v346 = v350;
      unint64_t v128 = v373;
    }
    else
    {
      unsigned int v295 = v374;
      uint64_t v126 = malloc_type_malloc(8 * v374, 0x4065EBACuLL);
      if (!v126)
      {
        if (v295) {
          goto LABEL_608;
        }
        uint64_t v126 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        unint64_t v107 = (unsigned char *)&unk_1EBCDB000;
        if (!v126) {
          goto LABEL_608;
        }
      }
      int v346 = v126;
      unint64_t v128 = v372;
      uint64_t v127 = v373;
    }
    unsigned int v129 = v375;
    unsigned int v347 = v374;
    if (v127 == v128) {
      unsigned int v130 = v375;
    }
    else {
      unsigned int v130 = v374;
    }
    if (v130)
    {
      memmove(v126, v127, 8 * v130);
      unsigned int v129 = v375;
    }
    unsigned int v131 = v378;
    unsigned int v348 = v129;
    int v349 = v376;
    size_t v351 = v353;
    uint64_t v352 = 0x800000000;
    if (v378)
    {
      if (v378 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v353, v377, 24 * v378);
      LODWORD(v352) = v131;
    }
    unsigned int v132 = v341;
    size_t v336 = v341;
    size_t v133 = v380;
    if (v380 == v379)
    {
      size_t v337 = v341;
      size_t v134 = v380;
    }
    else
    {
      unsigned int v296 = v381;
      unsigned int v132 = malloc_type_malloc(8 * v381, 0x4065EBACuLL);
      if (!v132)
      {
        if (v296) {
          goto LABEL_608;
        }
        unsigned int v132 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        unint64_t v107 = (unsigned char *)&unk_1EBCDB000;
        if (!v132) {
          goto LABEL_608;
        }
      }
      size_t v337 = v132;
      size_t v134 = v379;
      size_t v133 = v380;
    }
    unsigned int v338 = v381;
    unsigned int v135 = v382;
    if (v133 == v134) {
      unsigned int v136 = v382;
    }
    else {
      unsigned int v136 = v381;
    }
    if (v136)
    {
      memmove(v132, v133, 8 * v136);
      unsigned int v135 = v382;
    }
    unsigned int v339 = v135;
    int v340 = v383;
    uint64_t v342 = v344;
    uint64_t v343 = 0x800000000;
    uint64_t v137 = v385;
    if (v385)
    {
      if (v385 >= 9uLL) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v344, v384, 24 * v385);
      LODWORD(v343) = v137;
    }
    int v138 = 0;
    while (1)
    {
      if (v352 == v137)
      {
        if (!v137)
        {
LABEL_558:
          if (v342 != v344) {
            free(v342);
          }
          if (v337 != v336) {
            free(v337);
          }
          if (v351 != v353) {
            free(v351);
          }
          if (v346 != v345) {
            free(v346);
          }
          uint64_t v288 = sub_1CD481E4C((void **)&v372);
          if (v107[3584])
          {
            uint64_t v289 = llvm::dbgs((llvm *)v288);
            size_t v290 = v289;
            uint64_t v291 = (void *)*((void *)v289 + 4);
            if (*((void *)v289 + 3) - (void)v291 > 0xDuLL)
            {
              qmemcpy(v291, "End iteration ", 14);
              *((void *)v289 + 4) += 14;
            }
            else
            {
              llvm::raw_ostream::write(v289, "End iteration ", 0xEuLL);
            }
            sub_1CD098D14(v290, v319, 0, 0, 0);
            uint64_t v292 = (unsigned char *)*((void *)v290 + 4);
            if (*((unsigned char **)v290 + 3) == v292)
            {
              llvm::raw_ostream::write(v290, "\n", 1uLL);
            }
            else
            {
              unsigned char *v292 = 10;
              ++*((void *)v290 + 4);
            }
          }
          if (v391 != &v392[2]) {
            free(v391);
          }
          if (v387 != v386) {
            free(v387);
          }
          if (v399 != v401) {
            free(v399);
          }
          a1 = (unint64_t)__src;
          if (__src != v394) {
            free(__src);
          }
          if ((v138 & 1) == 0) {
            return;
          }
          goto LABEL_232;
        }
        uint64_t v139 = v342;
        uint64_t v140 = v351;
        while (*(void *)v140 == *(void *)v139 && v140[4] == v139[4])
        {
          v140 += 6;
          v139 += 6;
          if (v140 == (_DWORD *)((char *)v351 + 24 * v137)) {
            goto LABEL_558;
          }
        }
      }
      int v323 = v138;
      char v335 = (uint64_t ***)*((void *)v351 + 3 * v352 - 3);
      uint64_t v142 = v335;
      unint64_t v143 = sub_1CC7F9FA0(v2, (uint64_t *)&v335);
      int v320 = v143[6];
      int v321 = v143[5];
      unint64_t v144 = (llvm::SmallPtrSetImplBase *)(v143 + 72);
      int v326 = v143[77];
      uint64_t v328 = v143;
      int v324 = v143[78];
      int v145 = (uint64_t ***)v142[5];
      if (v145 != v142 + 5)
      {
        if (v145) {
          int v146 = v145 - 3;
        }
        else {
          int v146 = 0;
        }
        int v147 = *((unsigned __int8 *)v146 + 16);
        int v148 = v147 - 29;
        if (v147 != 30)
        {
          unsigned int v197 = 2;
          switch(v148)
          {
            case 1:
LABEL_644:
              __break(1u);
              JUMPOUT(0x1CC7F9E30);
            case 2:
              unsigned int v197 = (*((_DWORD *)v146 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_403;
            case 3:
            case 9:
              unsigned int v197 = (*((_DWORD *)v146 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_403;
            case 4:
              goto LABEL_308;
            case 7:
              unsigned int v197 = *((_WORD *)v146 + 9) & 1;
              goto LABEL_403;
            case 8:
              unsigned int v197 = 1;
              goto LABEL_308;
            case 10:
              unsigned int v197 = *((_DWORD *)v146 + 20) + 1;
LABEL_403:
              if (!v197) {
                goto LABEL_404;
              }
              goto LABEL_308;
            default:
              goto LABEL_404;
          }
        }
        if ((*((_DWORD *)v146 + 5) & 0x7FFFFFF) == 3) {
          unsigned int v197 = 2;
        }
        else {
          unsigned int v197 = 1;
        }
LABEL_308:
        uint64_t v149 = 0;
        size_t v150 = v146 - 4;
        uint64_t v151 = v197;
        do
        {
          int v152 = *((unsigned __int8 *)v146 + 16);
          if (v152 == 30)
          {
            uint64_t v188 = (uint64_t *)&v150[-4 * v149];
          }
          else
          {
            uint64_t v187 = (v152 - 31);
            uint64_t v188 = (uint64_t *)(v146 - 4);
            switch(v187)
            {
              case 1:
              case 7:
                int v192 = *((_DWORD *)v146 + 5);
                if ((v192 & 0x40000000) != 0) {
                  uint64_t v193 = (uint64_t ***)*(v146 - 1);
                }
                else {
                  uint64_t v193 = &v146[-4 * (v192 & 0x7FFFFFF)];
                }
                uint64_t v188 = (uint64_t *)&v193[4 * v149 + 4];
                goto LABEL_397;
              case 2:
                uint64_t v194 = 0x1FFFFFFFFFFFFFF8;
                if (!v149) {
                  uint64_t v194 = 0x1FFFFFFFFFFFFFF4;
                }
                uint64_t v188 = (uint64_t *)&v146[v194];
                break;
              case 3:
              case 4:
                goto LABEL_644;
              case 5:
                if ((*((_WORD *)v146 + 9) & 1) == 0)
                {
                  uint64_t v153 = 0;
                  unint64_t v107 = (unsigned char *)&unk_1EBCDB000;
                  goto LABEL_313;
                }
                uint64_t v195 = *((_DWORD *)v146 + 5) & 0x7FFFFFF;
                int v196 = v146 + 4;
                goto LABEL_395;
              case 6:
                break;
              case 8:
                if (v149)
                {
                  uint64_t v188 = (uint64_t *)&(&v150[4 * v149])[-4 * *((unsigned int *)v146 + 20) - 4];
                }
                else
                {
                  uint64_t v195 = *((unsigned int *)v146 + 20);
                  int v196 = v146 - 8;
LABEL_395:
                  uint64_t v188 = (uint64_t *)&v196[-4 * v195];
                }
LABEL_397:
                unint64_t v107 = (unsigned char *)&unk_1EBCDB000;
                break;
              default:
                int v189 = *((_DWORD *)v146 + 5);
                if ((v189 & 0x40000000) != 0) {
                  uint64_t v190 = (uint64_t ***)*(v146 - 1);
                }
                else {
                  uint64_t v190 = &v146[-4 * (v189 & 0x7FFFFFF)];
                }
                uint64_t v188 = (uint64_t *)&v190[4 * (2 * v149) + 4];
                break;
            }
          }
          uint64_t v153 = *v188;
LABEL_313:
          uint64_t v334 = v153;
          unsigned int v154 = (const void **)sub_1CC7F9FA0(v2, &v334);
          uint64_t v155 = v154;
          uint64_t v156 = v154[1];
          if (v156 == *v154)
          {
            uint64_t v329 = v333;
            uint64_t v157 = v333;
            uint64_t v158 = v156;
          }
          else
          {
            uint64_t v191 = *((unsigned int *)v154 + 4);
            uint64_t v157 = malloc_type_malloc(8 * v191, 0x4065EBACuLL);
            if (!v157)
            {
              if (v191) {
                goto LABEL_608;
              }
              uint64_t v157 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
              if (!v157) {
                goto LABEL_608;
              }
            }
            uint64_t v329 = v157;
            uint64_t v158 = *v155;
            uint64_t v156 = v155[1];
            unint64_t v107 = (unsigned char *)&unk_1EBCDB000;
          }
          unsigned int v159 = *((_DWORD *)v155 + 5);
          unsigned int v331 = *((_DWORD *)v155 + 4);
          if (v156 == v158) {
            unsigned int v160 = *((_DWORD *)v155 + 5);
          }
          else {
            unsigned int v160 = *((_DWORD *)v155 + 4);
          }
          if (v160)
          {
            memmove(v157, v156, 8 * v160);
            unsigned int v159 = *((_DWORD *)v155 + 5);
          }
          int v161 = *((_DWORD *)v155 + 6);
          int v162 = (char *)v155[145];
          if (v162 == v155[144]) {
            uint64_t v163 = (unsigned int *)v155 + 293;
          }
          else {
            uint64_t v163 = (unsigned int *)(v155 + 146);
          }
          uint64_t v164 = *v163;
          if (v164)
          {
            uint64_t v182 = 8 * v164;
            size_t v165 = (unint64_t *)v155[145];
            while (*v165 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v165;
              v182 -= 8;
              if (!v182) {
                goto LABEL_364;
              }
            }
          }
          else
          {
            size_t v165 = (unint64_t *)v155[145];
          }
          size_t v166 = (unint64_t *)&v162[8 * v164];
          if (v165 != v166)
          {
            unint64_t v167 = *v165;
LABEL_327:
            uint64_t v168 = v333;
            if (v329 == v333)
            {
              unsigned int v169 = v159;
              BOOL v170 = &v329[8 * v159];
              if (v159)
              {
                uint64_t v171 = 0;
                while (*(void *)&v329[v171] != v167)
                {
                  v171 += 8;
                  if (8 * v159 == v171) {
                    goto LABEL_346;
                  }
                }
                BOOL v170 = &v329[v171];
              }
LABEL_346:
              uint64_t v168 = v329;
            }
            else
            {
              unsigned int v172 = v331 - 1;
              unsigned int v173 = (v331 - 1) & ((v167 >> 4) ^ (v167 >> 9));
              BOOL v170 = &v329[8 * v173];
              uint64_t v174 = *v170;
              if (*v170 == -1)
              {
                BOOL v175 = 0;
LABEL_356:
                if (v175) {
                  BOOL v170 = v175;
                }
                unsigned int v169 = v159;
                if (*v170 != v167) {
                  BOOL v170 = &v329[8 * v331];
                }
              }
              else
              {
                BOOL v175 = 0;
                int v176 = 1;
                while (v174 != v167)
                {
                  if (v175) {
                    BOOL v177 = 0;
                  }
                  else {
                    BOOL v177 = v174 == -2;
                  }
                  if (v177) {
                    BOOL v175 = v170;
                  }
                  unsigned int v178 = v173 + v176++;
                  unsigned int v173 = v178 & v172;
                  BOOL v170 = &v329[8 * (v178 & v172)];
                  uint64_t v174 = *v170;
                  if (*v170 == -1) {
                    goto LABEL_356;
                  }
                }
                unsigned int v169 = v159;
              }
            }
            unsigned int v179 = v331;
            if (v329 == v168) {
              unsigned int v179 = v169;
            }
            if (v170 != (void *)&v329[8 * v179])
            {
              *BOOL v170 = -2;
              ++v161;
            }
            unsigned int v180 = v165 + 1;
            while (v180 != v166)
            {
              unint64_t v181 = *v180++;
              unint64_t v167 = v181;
              if (v181 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                size_t v165 = v180 - 1;
                goto LABEL_327;
              }
            }
          }
LABEL_364:
          uint64_t v183 = (uint64_t *)v329;
          if (v329 == v333) {
            uint64_t v184 = v159;
          }
          else {
            uint64_t v184 = v331;
          }
          uint64_t v185 = (uint64_t *)&v329[8 * v184];
          if (v184)
          {
            uint64_t v186 = 8 * v184;
            while ((unint64_t)*v183 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v183;
              v186 -= 8;
              if (!v186)
              {
                uint64_t v183 = v185;
                break;
              }
            }
          }
          sub_1CD596984(v144, v183, v185, v185);
          if (v329 != v333) {
            free(v329);
          }
          ++v149;
        }
        while (v149 != v151);
      }
LABEL_404:
      size_t v198 = v328;
      size_t v199 = (uint64_t *)*((void *)v328 + 181);
      if (v199 == *((uint64_t **)v328 + 180)) {
        uint64_t v200 = v328 + 365;
      }
      else {
        uint64_t v200 = v328 + 364;
      }
      uint64_t v201 = *v200;
      BOOL v202 = &v199[v201];
      if (v201)
      {
        uint64_t v203 = 8 * v201;
        while ((unint64_t)*v199 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v199;
          v203 -= 8;
          if (!v203)
          {
            size_t v199 = v202;
            break;
          }
        }
      }
      sub_1CD596984(v144, v199, v202, v202);
      unsigned int v204 = (uint64_t *)*((void *)v328 + 145);
      if (v204 == *((uint64_t **)v328 + 144)) {
        unsigned int v205 = v328 + 293;
      }
      else {
        unsigned int v205 = v328 + 292;
      }
      uint64_t v206 = *v205;
      unsigned int v207 = &v204[v206];
      int v208 = v323;
      if (v206)
      {
        uint64_t v209 = 8 * v206;
        while ((unint64_t)*v204 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v204;
          v209 -= 8;
          if (!v209)
          {
            unsigned int v204 = v207;
            break;
          }
        }
      }
      sub_1CD596984((llvm::SmallPtrSetImplBase *)v328, v204, v207, v207);
      unint64_t v210 = (uint64_t *)*((void *)v328 + 109);
      if (v210 == *((uint64_t **)v328 + 108)) {
        uint64_t v211 = v328 + 221;
      }
      else {
        uint64_t v211 = v328 + 220;
      }
      uint64_t v212 = *v211;
      uint64_t v213 = &v210[v212];
      if (v212)
      {
        uint64_t v214 = 8 * v212;
        while ((unint64_t)*v210 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v210;
          v214 -= 8;
          if (!v214)
          {
            unint64_t v210 = v213;
            break;
          }
        }
      }
      sub_1CD596984((llvm::SmallPtrSetImplBase *)v328, v210, v213, v213);
      BOOL v215 = (const void *)*((void *)v328 + 37);
      if (v215 == *((const void **)v328 + 36))
      {
        uint64_t v330 = v333;
        uint64_t v216 = v333;
        unint64_t v217 = (const void *)*((void *)v328 + 37);
      }
      else
      {
        uint64_t v287 = v328[76];
        uint64_t v216 = malloc_type_malloc(8 * v287, 0x4065EBACuLL);
        if (!v216)
        {
          if (v287) {
            goto LABEL_608;
          }
          uint64_t v216 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
          unint64_t v107 = (unsigned char *)&unk_1EBCDB000;
          size_t v198 = v328;
          int v208 = v323;
          if (!v216) {
            goto LABEL_608;
          }
        }
        uint64_t v330 = v216;
        unint64_t v217 = (const void *)*((void *)v198 + 36);
        BOOL v215 = (const void *)*((void *)v198 + 37);
      }
      unsigned int v332 = v198[76];
      unsigned int v218 = v198[77];
      if (v215 == v217) {
        unsigned int v219 = v198[77];
      }
      else {
        unsigned int v219 = v198[76];
      }
      if (v219)
      {
        memmove(v216, v215, 8 * v219);
        unsigned int v218 = v198[77];
      }
      int v220 = v198[78];
      uint64_t v221 = *((void *)v198 + 73);
      BOOL v222 = v221 == *((void *)v198 + 72) ? v198 + 149 : v198 + 148;
      uint64_t v223 = *v222;
      if (v223)
      {
        uint64_t v241 = 8 * v223;
        uint64_t v224 = (unint64_t *)*((void *)v198 + 73);
        while (*v224 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v224;
          v241 -= 8;
          if (!v241) {
            goto LABEL_479;
          }
        }
      }
      else
      {
        uint64_t v224 = (unint64_t *)*((void *)v198 + 73);
      }
      unint64_t v225 = (unint64_t *)(v221 + 8 * v223);
      if (v224 != v225)
      {
        unint64_t v226 = *v224;
LABEL_442:
        unint64_t v227 = v333;
        if (v330 == v333)
        {
          unsigned int v228 = v218;
          unint64_t v229 = &v330[8 * v218];
          if (v218)
          {
            uint64_t v230 = 0;
            while (*(void *)&v330[v230] != v226)
            {
              v230 += 8;
              if (8 * v218 == v230) {
                goto LABEL_461;
              }
            }
            unint64_t v229 = &v330[v230];
          }
LABEL_461:
          unint64_t v227 = v330;
        }
        else
        {
          unsigned int v231 = v332 - 1;
          unsigned int v232 = (v332 - 1) & ((v226 >> 4) ^ (v226 >> 9));
          unint64_t v229 = &v330[8 * v232];
          uint64_t v233 = *v229;
          if (*v229 == -1)
          {
            unint64_t v234 = 0;
LABEL_471:
            if (v234) {
              unint64_t v229 = v234;
            }
            unsigned int v228 = v218;
            if (*v229 != v226) {
              unint64_t v229 = &v330[8 * v332];
            }
          }
          else
          {
            unint64_t v234 = 0;
            int v235 = 1;
            while (v233 != v226)
            {
              if (v234) {
                BOOL v236 = 0;
              }
              else {
                BOOL v236 = v233 == -2;
              }
              if (v236) {
                unint64_t v234 = v229;
              }
              unsigned int v237 = v232 + v235++;
              unsigned int v232 = v237 & v231;
              unint64_t v229 = &v330[8 * (v237 & v231)];
              uint64_t v233 = *v229;
              if (*v229 == -1) {
                goto LABEL_471;
              }
            }
            unsigned int v228 = v218;
          }
        }
        unsigned int v238 = v332;
        if (v330 == v227) {
          unsigned int v238 = v228;
        }
        if (v229 != (void *)&v330[8 * v238])
        {
          void *v229 = -2;
          ++v220;
        }
        uint64_t v239 = v224 + 1;
        while (v239 != v225)
        {
          unint64_t v240 = *v239++;
          unint64_t v226 = v240;
          if (v240 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t v224 = v239 - 1;
            goto LABEL_442;
          }
        }
      }
LABEL_479:
      unint64_t v242 = (uint64_t *)v330;
      if (v330 == v333) {
        uint64_t v243 = v218;
      }
      else {
        uint64_t v243 = v332;
      }
      unint64_t v244 = (uint64_t *)&v330[8 * v243];
      if (v243)
      {
        uint64_t v245 = 8 * v243;
        while ((unint64_t)*v242 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v242;
          v245 -= 8;
          if (!v245)
          {
            unint64_t v242 = v244;
            break;
          }
        }
      }
      unint64_t v246 = (v321 - v320);
      uint64_t v247 = sub_1CD596984((llvm::SmallPtrSetImplBase *)v198, v242, v244, v244);
      int v248 = v208 | (v246 != v198[5] - v198[6]);
      if ((v208 & 1) != (v208 & 1 | (v246 != v198[5] - v198[6]))) {
        break;
      }
LABEL_512:
      unint64_t v267 = (v326 - v324);
      int v138 = v248 | (v267 != v198[77] - v198[78]);
      if ((v208 & 1) != (v138 & 1) && v107[3584] != 0)
      {
        uint64_t v269 = llvm::dbgs(v247);
        unint64_t v270 = v269;
        uint64_t v271 = (_OWORD *)*((void *)v269 + 4);
        if (*((void *)v269 + 3) - (void)v271 > 0xFuLL)
        {
          *uint64_t v271 = *(_OWORD *)"Changed liveout ";
          *((void *)v269 + 4) += 16;
        }
        else
        {
          llvm::raw_ostream::write(v269, "Changed liveout ", 0x10uLL);
        }
        if ((*((unsigned char *)v335 + 23) & 0x10) != 0)
        {
          uint64_t v272 = ***v335;
          uint64_t v273 = *(void *)(v272 + 152);
          uint64_t v274 = *(unsigned int *)(v272 + 168);
          if (!v274) {
            goto LABEL_525;
          }
          LODWORD(v275) = (v274 - 1) & ((v335 >> 4) ^ (v335 >> 9));
          uint64_t v276 = (uint64_t ****)(v273 + 16 * v275);
          uint64_t v277 = *v276;
          if (*v276 != v335)
          {
            int v278 = 1;
            while (v277 != (uint64_t ***)-4096)
            {
              int v279 = v275 + v278++;
              uint64_t v275 = v279 & (v274 - 1);
              uint64_t v277 = *(uint64_t ****)(v273 + 16 * v275);
              if (v277 == v335)
              {
                uint64_t v276 = (uint64_t ****)(v273 + 16 * v275);
                goto LABEL_526;
              }
            }
LABEL_525:
            uint64_t v276 = (uint64_t ****)(v273 + 16 * v274);
          }
LABEL_526:
          unsigned int v280 = v276[1];
          size_t v283 = (size_t)*v280;
          unint64_t v281 = (const char *)(v280 + 2);
          size_t v282 = v283;
          uint64_t v284 = (_WORD *)*((void *)v270 + 4);
          if (v283 > *((void *)v270 + 3) - (void)v284)
          {
            llvm::raw_ostream::write(v270, v281, v282);
            goto LABEL_528;
          }
          if (v282)
          {
            memcpy(v284, v281, v282);
            uint64_t v284 = (_WORD *)(*((void *)v270 + 4) + v282);
            *((void *)v270 + 4) = v284;
          }
        }
        else
        {
LABEL_528:
          uint64_t v284 = (_WORD *)*((void *)v270 + 4);
        }
        if (*((void *)v270 + 3) - (void)v284 > 5uLL)
        {
          v284[2] = 8250;
          *(_DWORD *)uint64_t v284 = 1684827936;
          *((void *)v270 + 4) += 6;
        }
        else
        {
          llvm::raw_ostream::write(v270, " old: ", 6uLL);
        }
        sub_1CD098D14(v270, v267, 0, 0, 0);
        uint64_t v285 = *((void *)v270 + 4);
        if ((unint64_t)(*((void *)v270 + 3) - v285) > 5)
        {
          *(_WORD *)(v285 + 4) = 8250;
          *(_DWORD *)uint64_t v285 = 2003136032;
          *((void *)v270 + 4) += 6;
        }
        else
        {
          llvm::raw_ostream::write(v270, " new: ", 6uLL);
        }
        sub_1CD098D14(v270, (v198[77] - v198[78]), 0, 0, 0);
        uint64_t v286 = (unsigned char *)*((void *)v270 + 4);
        if ((unint64_t)v286 >= *((void *)v270 + 3))
        {
          llvm::raw_ostream::write(v270, 10);
        }
        else
        {
          *((void *)v270 + 4) = v286 + 1;
          unsigned char *v286 = 10;
        }
      }
      if (v330 != v333) {
        free(v330);
      }
      LODWORD(v352) = v352 - 1;
      if (v352) {
        sub_1CBF8E2B0((llvm::SmallPtrSetImplBase *)&v345);
      }
      uint64_t v137 = v343;
    }
    if (!v107[3584])
    {
LABEL_511:
      LOBYTE(v208) = 0;
      goto LABEL_512;
    }
    uint64_t v249 = llvm::dbgs(v247);
    unint64_t v250 = v249;
    uint64_t v251 = (void *)*((void *)v249 + 4);
    if (*((void *)v249 + 3) - (void)v251 > 0xEuLL)
    {
      qmemcpy(v251, "Changed livein ", 15);
      *((void *)v249 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v249, "Changed livein ", 0xFuLL);
    }
    if ((*((unsigned char *)v335 + 23) & 0x10) == 0) {
      goto LABEL_501;
    }
    uint64_t v252 = ***v335;
    uint64_t v253 = *(void *)(v252 + 152);
    uint64_t v254 = *(unsigned int *)(v252 + 168);
    if (v254)
    {
      LODWORD(v255) = (v254 - 1) & ((v335 >> 4) ^ (v335 >> 9));
      int v256 = (uint64_t ****)(v253 + 16 * v255);
      uint64_t v257 = *v256;
      if (*v256 == v335)
      {
LABEL_499:
        char v260 = (size_t *)v256[1];
        size_t v263 = *v260;
        unint64_t v261 = v260 + 2;
        size_t v262 = v263;
        int v264 = (_WORD *)*((void *)v250 + 4);
        if (v263 <= *((void *)v250 + 3) - (void)v264)
        {
          if (v262)
          {
            memcpy(v264, v261, v262);
            int v264 = (_WORD *)(*((void *)v250 + 4) + v262);
            *((void *)v250 + 4) = v264;
          }
          goto LABEL_504;
        }
        llvm::raw_ostream::write(v250, (const char *)v261, v262);
LABEL_501:
        int v264 = (_WORD *)*((void *)v250 + 4);
LABEL_504:
        if (*((void *)v250 + 3) - (void)v264 > 5uLL)
        {
          v264[2] = 8250;
          *(_DWORD *)int v264 = 1684827936;
          *((void *)v250 + 4) += 6;
        }
        else
        {
          llvm::raw_ostream::write(v250, " old: ", 6uLL);
        }
        sub_1CD098D14(v250, v246, 0, 0, 0);
        uint64_t v265 = *((void *)v250 + 4);
        if ((unint64_t)(*((void *)v250 + 3) - v265) > 5)
        {
          *(_WORD *)(v265 + 4) = 8250;
          *(_DWORD *)uint64_t v265 = 2003136032;
          *((void *)v250 + 4) += 6;
        }
        else
        {
          llvm::raw_ostream::write(v250, " new: ", 6uLL);
        }
        uint64_t v247 = sub_1CD098D14(v250, (v198[5] - v198[6]), 0, 0, 0);
        uint64_t v266 = (unsigned char *)*((void *)v250 + 4);
        if ((unint64_t)v266 < *((void *)v250 + 3))
        {
          LOBYTE(v208) = 0;
          *((void *)v250 + 4) = v266 + 1;
          *uint64_t v266 = 10;
          goto LABEL_512;
        }
        uint64_t v247 = llvm::raw_ostream::write(v250, 10);
        goto LABEL_511;
      }
      int v258 = 1;
      while (v257 != (uint64_t ***)-4096)
      {
        int v259 = v255 + v258++;
        uint64_t v255 = v259 & (v254 - 1);
        uint64_t v257 = *(uint64_t ****)(v253 + 16 * v255);
        if (v257 == v335)
        {
          int v256 = (uint64_t ****)(v253 + 16 * v255);
          goto LABEL_499;
        }
      }
    }
    int v256 = (uint64_t ****)(v253 + 16 * v254);
    goto LABEL_499;
  }
  if (v3)
  {
    uint64_t v312 = llvm::dbgs((llvm *)a1);
    uint64_t v313 = (void *)*((void *)v312 + 4);
    if (*((void *)v312 + 3) - (void)v313 > 0x19uLL)
    {
      qmemcpy(v313, "Empty: nothing to analyze\n", 26);
      *((void *)v312 + 4) += 26;
    }
    else
    {
      llvm::raw_ostream::write(v312, "Empty: nothing to analyze\n", 0x1AuLL);
    }
  }
}

uint64_t sub_1CC7F9E80(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  uint64_t v5 = *(void **)a1;
  if (v4)
  {
    uint64_t v6 = 1736 * v4;
    do
    {
      if ((*v5 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v7 = (void *)v5[182];
        if (v7 != (void *)v5[181]) {
          free(v7);
        }
        unsigned int v8 = (void *)v5[146];
        if (v8 != (void *)v5[145]) {
          free(v8);
        }
        uint64_t v9 = (void *)v5[110];
        if (v9 != (void *)v5[109]) {
          free(v9);
        }
        uint64_t v10 = (void *)v5[74];
        if (v10 != (void *)v5[73]) {
          free(v10);
        }
        uint64_t v11 = (void *)v5[38];
        if (v11 != (void *)v5[37]) {
          free(v11);
        }
        uint64_t v12 = (void *)v5[2];
        if (v12 != (void *)v5[1]) {
          free(v12);
        }
      }
      v5 += 217;
      v6 -= 1736;
    }
    while (v6);
    uint64_t v5 = *(void **)a1;
  }
  MEMORY[0x1D25D9CD0](v5, 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v13 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v13;
  int v14 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v14;
  return a1;
}

void *sub_1CC7F9FA0(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CC7FA080(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CC7FA118(a1, a2, v7);
    void *v5 = *a2;
    bzero(v5 + 4, 0x6A8uLL);
    v5[1] = v5 + 5;
    void v5[2] = v5 + 5;
    v5[3] = 32;
    v5[37] = v5 + 41;
    v5[38] = v5 + 41;
    *((_DWORD *)v5 + 78) = 32;
    v5[73] = v5 + 77;
    v5[74] = v5 + 77;
    *((_DWORD *)v5 + 150) = 32;
    v5[109] = v5 + 113;
    v5[110] = v5 + 113;
    *((_DWORD *)v5 + 222) = 32;
    v5[145] = v5 + 149;
    v5[146] = v5 + 149;
    *((_DWORD *)v5 + 294) = 32;
    v5[181] = v5 + 185;
    v5[182] = v5 + 185;
    *((_DWORD *)v5 + 366) = 32;
  }
  return v5 + 1;
}

uint64_t sub_1CC7FA080(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 1736 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 1736 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *sub_1CC7FA118(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC7FA1CC((uint64_t *)a1, v6);
  uint64_t v8 = 0;
  sub_1CC7FA080(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC7FA1CC(uint64_t *a1, int a2)
{
  uint64_t v2 = a1;
  unsigned int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = *a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  BOOL result = operator new(1736 * v8, (std::align_val_t)8uLL);
  *uint64_t v2 = (uint64_t)result;
  if (v4)
  {
    v2[1] = 0;
    unsigned int v10 = *((_DWORD *)v2 + 4);
    if (v10)
    {
      uint64_t v11 = 1736 * v10;
      do
      {
        *BOOL result = -4096;
        result += 217;
        v11 -= 1736;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 1736 * v3;
      do
      {
        uint64_t v14 = *(void *)(v4 + v12);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unsigned int v57 = 0;
          sub_1CC7FA080(*v2, *((_DWORD *)v2 + 4), v14, &v57);
          uint64_t v15 = v57;
          uint64_t v16 = v4 + v12;
          uint64_t v17 = v57 + 5;
          *unsigned int v57 = v14;
          v15[1] = (uint64_t)v17;
          uint64_t v19 = *(void *)(v4 + v12 + 8);
          uint64_t v18 = *(void *)(v4 + v12 + 16);
          if (v18 == v19)
          {
            v15[2] = (uint64_t)v17;
            uint64_t v20 = *(unsigned int *)(v16 + 28);
            if (v20) {
              memmove(v17, *(const void **)(v16 + 16), 8 * v20);
            }
          }
          else
          {
            v15[2] = v18;
            *(void *)(v16 + 16) = v19;
          }
          uint64_t v21 = v4 + v12;
          v15[3] = *(void *)(v4 + v12 + 24);
          *((_DWORD *)v15 + 8) = *(_DWORD *)(v4 + v12 + 32);
          *(void *)(v21 + 24) = 32;
          *(_DWORD *)(v21 + 32) = 0;
          uint64_t v22 = v15 + 41;
          v15[37] = (uint64_t)(v15 + 41);
          uint64_t v24 = *(void *)(v4 + v12 + 296);
          uint64_t v23 = *(void *)(v4 + v12 + 304);
          if (v23 == v24)
          {
            v15[38] = (uint64_t)v22;
            uint64_t v25 = *(unsigned int *)(v21 + 316);
            if (v25) {
              memmove(v22, *(const void **)(v21 + 304), 8 * v25);
            }
          }
          else
          {
            v15[38] = v23;
            *(void *)(v21 + 304) = v24;
          }
          uint64_t v26 = v4 + v12;
          v15[39] = *(void *)(v4 + v12 + 312);
          *((_DWORD *)v15 + 80) = *(_DWORD *)(v4 + v12 + 320);
          *(void *)(v26 + 312) = 32;
          *(_DWORD *)(v26 + 320) = 0;
          long long v27 = v15 + 77;
          v15[73] = (uint64_t)(v15 + 77);
          uint64_t v28 = *(void *)(v4 + v12 + 592);
          uint64_t v29 = *(void *)(v4 + v12 + 584);
          if (v28 == v29)
          {
            v15[74] = (uint64_t)v27;
            uint64_t v30 = *(unsigned int *)(v26 + 604);
            if (v30) {
              memmove(v27, *(const void **)(v26 + 592), 8 * v30);
            }
          }
          else
          {
            v15[74] = v28;
            *(void *)(v26 + 592) = v29;
          }
          uint64_t v31 = v4 + v12;
          v15[75] = *(void *)(v4 + v12 + 600);
          *((_DWORD *)v15 + 152) = *(_DWORD *)(v4 + v12 + 608);
          *(void *)(v31 + 600) = 32;
          *(_DWORD *)(v31 + 608) = 0;
          uint64_t v32 = v15 + 113;
          v15[109] = (uint64_t)(v15 + 113);
          uint64_t v33 = *(void *)(v4 + v12 + 880);
          uint64_t v34 = *(void *)(v4 + v12 + 872);
          if (v33 == v34)
          {
            v15[110] = (uint64_t)v32;
            uint64_t v35 = *(unsigned int *)(v31 + 892);
            if (v35) {
              memmove(v32, *(const void **)(v31 + 880), 8 * v35);
            }
          }
          else
          {
            v15[110] = v33;
            *(void *)(v31 + 880) = v34;
          }
          uint64_t v36 = v4 + v12;
          v15[111] = *(void *)(v4 + v12 + 888);
          *((_DWORD *)v15 + 224) = *(_DWORD *)(v4 + v12 + 896);
          *(void *)(v36 + 888) = 32;
          *(_DWORD *)(v36 + 896) = 0;
          uint64_t v37 = v15 + 149;
          v15[145] = (uint64_t)(v15 + 149);
          uint64_t v38 = *(void *)(v4 + v12 + 1168);
          uint64_t v39 = *(void *)(v4 + v12 + 1160);
          uint64_t v56 = v4 + v12;
          BOOL v40 = v2;
          uint64_t v41 = v13;
          if (v38 == v39)
          {
            v15[146] = (uint64_t)v37;
            uint64_t v42 = *(unsigned int *)(v36 + 1180);
            if (v42) {
              memmove(v37, *(const void **)(v36 + 1168), 8 * v42);
            }
          }
          else
          {
            v15[146] = v38;
            *(void *)(v36 + 1168) = v39;
          }
          uint64_t v43 = v4 + v12;
          v15[147] = *(void *)(v4 + v12 + 1176);
          *((_DWORD *)v15 + 296) = *(_DWORD *)(v4 + v12 + 1184);
          *(void *)(v43 + 1176) = 32;
          *(_DWORD *)(v43 + 1184) = 0;
          uint64_t v44 = v15 + 185;
          v15[181] = (uint64_t)(v15 + 185);
          uint64_t v45 = *(void **)(v4 + v12 + 1456);
          uint64_t v46 = *(void **)(v4 + v12 + 1448);
          if (v45 == v46)
          {
            v15[182] = (uint64_t)v44;
            uint64_t v47 = *(unsigned int *)(v43 + 1468);
            uint64_t v46 = *(void **)(v43 + 1456);
            if (v47)
            {
              memmove(v44, v46, 8 * v47);
              uint64_t v46 = *(void **)(v43 + 1456);
              uint64_t v45 = *(void **)(v43 + 1448);
            }
          }
          else
          {
            v15[182] = (uint64_t)v45;
            *(void *)(v43 + 1456) = v46;
            uint64_t v45 = v46;
          }
          uint64_t v13 = v41;
          uint64_t v2 = v40;
          uint64_t v48 = v4 + v12;
          v15[183] = *(void *)(v4 + v12 + 1464);
          *((_DWORD *)v15 + 368) = *(_DWORD *)(v4 + v12 + 1472);
          *(void *)(v48 + 1464) = 32;
          *(_DWORD *)(v48 + 1472) = 0;
          ++*((_DWORD *)v40 + 2);
          if (v46 != v45) {
            free(v46);
          }
          int v49 = *(void **)(v36 + 1168);
          if (v49 != *(void **)(v36 + 1160)) {
            free(v49);
          }
          uint64_t v50 = *(void **)(v31 + 880);
          if (v50 != *(void **)(v31 + 872)) {
            free(v50);
          }
          uint64_t v51 = *(void **)(v26 + 592);
          if (v51 != *(void **)(v26 + 584)) {
            free(v51);
          }
          uint64_t v52 = *(void **)(v21 + 304);
          if (v52 != *(void **)(v21 + 296)) {
            free(v52);
          }
          uint64_t v53 = *(void **)(v56 + 16);
          if (v53 != *(void **)(v56 + 8)) {
            free(v53);
          }
        }
        v12 += 1736;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  v2[1] = 0;
  unsigned int v54 = *((_DWORD *)v2 + 4);
  if (v54)
  {
    uint64_t v55 = 1736 * v54;
    do
    {
      *BOOL result = -4096;
      result += 217;
      v55 -= 1736;
    }
    while (v55);
  }
  return result;
}

uint64_t sub_1CC7FA5F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (void *)(a1 + 32);
  *(void *)a1 = v4;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5 == *a2)
  {
    *(void *)(a1 + 8) = v4;
    uint64_t v7 = *((unsigned int *)a2 + 5);
    if (v7) {
      memmove(v4, (const void *)a2[1], 8 * v7);
    }
  }
  else
  {
    *(void *)(a1 + 8) = v5;
    a2[1] = v6;
  }
  *(void *)(a1 + 96) = a1 + 112;
  *(void *)(a1 + 16) = a2[2];
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  a2[2] = 8;
  *((_DWORD *)a2 + 6) = 0;
  *(void *)(a1 + 104) = 0x800000000;
  unsigned int v8 = *((_DWORD *)a2 + 26);
  if (v8 && (uint64_t *)a1 != a2)
  {
    uint64_t v9 = (uint64_t *)a2[12];
    if (v9 == a2 + 14)
    {
      if (v8 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a1 + 112), v9, 24 * *((unsigned int *)a2 + 26));
      *(_DWORD *)(a1 + 104) = v8;
    }
    else
    {
      *(void *)(a1 + 96) = v9;
      int v11 = *((_DWORD *)a2 + 27);
      *(_DWORD *)(a1 + 104) = v8;
      *(_DWORD *)(a1 + 108) = v11;
      a2[12] = (uint64_t)(a2 + 14);
      *((_DWORD *)a2 + 27) = 0;
    }
    *((_DWORD *)a2 + 26) = 0;
  }
  return a1;
}

uint64_t sub_1CC7FA728(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  if (sub_1CC7FA080(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v4)) {
    return v4;
  }
  else {
    return *(void *)a1 + 1736 * *(unsigned int *)(a1 + 16);
  }
}

void sub_1CC7FA784(uint64_t ***a1, _DWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8 = a6;
  uint64_t v9 = a5;
  uint64_t v285 = a6;
  uint64_t v286 = a5;
  uint64_t v284 = a7;
  int v283 = a8;
  a2[15] = 0;
  a2[16] = 0;
  int v278 = v282;
  int v279 = v282;
  uint64_t v280 = 32;
  int v281 = 0;
  uint64_t v13 = v277;
  uint64_t v272 = v277;
  uint64_t v14 = (const void *)a3[37];
  int v248 = a1;
  unint64_t v250 = a2;
  if (v14 == (const void *)a3[36])
  {
    uint64_t v15 = (uint64_t *)a4;
    __src = v277;
    uint64_t v16 = v14;
  }
  else
  {
    uint64_t v244 = *((unsigned int *)a3 + 76);
    uint64_t v13 = malloc_type_malloc(8 * v244, 0x4065EBACuLL);
    if (!v13)
    {
      if (v244) {
        goto LABEL_468;
      }
      uint64_t v13 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v13) {
        goto LABEL_468;
      }
    }
    __src = v13;
    uint64_t v16 = (const void *)a3[36];
    uint64_t v14 = (const void *)a3[37];
    uint64_t v15 = (uint64_t *)a4;
  }
  unsigned int v17 = *((_DWORD *)a3 + 76);
  unsigned int v274 = v17;
  unsigned int v18 = *((_DWORD *)a3 + 77);
  if (v14 == v16) {
    unsigned int v19 = *((_DWORD *)a3 + 77);
  }
  else {
    unsigned int v19 = v17;
  }
  if (v19)
  {
    memmove(v13, v14, 8 * v19);
    unsigned int v18 = *((_DWORD *)a3 + 77);
  }
  int v20 = *((_DWORD *)a3 + 78);
  unsigned int v275 = v18;
  int v276 = v20;
  uint64_t v21 = sub_1CC7FBF5C((uint64_t)v15, &v272, v9, v8, (uint64_t)&v278);
  a2[3] = v21;
  a2[8] = HIDWORD(v21);
  a2[13] = v22;
  a2[1] = v21;
  a2[6] = HIDWORD(v21);
  a2[11] = v22;
  uint64_t v23 = sub_1CC7FBF5C((uint64_t)v15, a3, v9, v8, 0);
  *a2 = v23;
  a2[5] = HIDWORD(v23);
  a2[10] = v24;
  uint64_t v25 = v271;
  uint64_t v266 = v271;
  uint64_t v26 = (char *)__src;
  if (__src == v272)
  {
    unint64_t v267 = v271;
    long long v27 = (char *)__src;
    goto LABEL_10;
  }
  unsigned int v245 = v274;
  uint64_t v25 = (char *)malloc_type_malloc(8 * v274, 0x4065EBACuLL);
  if (!v25 && (v245 || (uint64_t v25 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
LABEL_468:
  }
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  unint64_t v267 = v25;
  uint64_t v26 = v272;
  long long v27 = (char *)__src;
  uint64_t v15 = (uint64_t *)a4;
LABEL_10:
  LODWORD(v28) = v274;
  unsigned int v29 = v275;
  unsigned int v268 = v274;
  if (v27 == v26) {
    unsigned int v30 = v275;
  }
  else {
    unsigned int v30 = v274;
  }
  if (v30)
  {
    memmove(v25, v27, 8 * v30);
    long long v27 = (char *)__src;
    uint64_t v26 = v272;
    unsigned int v29 = v275;
    LODWORD(v28) = v274;
  }
  int v31 = v276;
  unsigned int v269 = v29;
  int v270 = v276;
  BOOL v265 = HIDWORD(v280) != v281;
  if (v27 == v26) {
    uint64_t v28 = v29;
  }
  else {
    uint64_t v28 = v28;
  }
  uint64_t v32 = (unint64_t *)v27;
  if (v28)
  {
    uint64_t v33 = 8 * v28;
    uint64_t v32 = (unint64_t *)v27;
    while (*v32 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v32;
      v33 -= 8;
      if (!v33) {
        goto LABEL_90;
      }
    }
  }
  uint64_t v34 = (unint64_t *)&v27[8 * v28];
  if (v32 != v34)
  {
    unint64_t v35 = *v32;
LABEL_25:
    uint64_t v37 = *a3;
    uint64_t v36 = a3[1];
    if (v36 == *a3)
    {
      uint64_t v38 = *((unsigned int *)a3 + 5);
      uint64_t v39 = (void *)(v36 + 8 * v38);
      if (v38)
      {
        uint64_t v40 = 0;
        while (*(void *)(v36 + v40) != v35)
        {
          v40 += 8;
          if (8 * v38 == v40) {
            goto LABEL_44;
          }
        }
        uint64_t v39 = (void *)(v36 + v40);
      }
LABEL_44:
      uint64_t v37 = a3[1];
    }
    else
    {
      uint64_t v41 = *((unsigned int *)a3 + 4);
      int v42 = v41 - 1;
      unsigned int v43 = (v41 - 1) & ((v35 >> 4) ^ (v35 >> 9));
      uint64_t v39 = (void *)(v36 + 8 * v43);
      uint64_t v44 = *v39;
      if (*v39 == -1)
      {
        uint64_t v45 = 0;
LABEL_67:
        if (v45) {
          uint64_t v39 = v45;
        }
        LODWORD(v38) = *((_DWORD *)a3 + 5);
        int v61 = (void *)(v36 + 8 * v41);
        if (*v39 != v35) {
          uint64_t v39 = v61;
        }
      }
      else
      {
        uint64_t v45 = 0;
        int v46 = 1;
        while (v44 != v35)
        {
          if (v45) {
            BOOL v47 = 0;
          }
          else {
            BOOL v47 = v44 == -2;
          }
          if (v47) {
            uint64_t v45 = v39;
          }
          unsigned int v48 = v43 + v46++;
          unsigned int v43 = v48 & v42;
          uint64_t v39 = (void *)(v36 + 8 * (v48 & v42));
          uint64_t v44 = *v39;
          if (*v39 == -1) {
            goto LABEL_67;
          }
        }
        LODWORD(v38) = *((_DWORD *)a3 + 5);
      }
    }
    if (v36 == v37) {
      unsigned int v49 = v38;
    }
    else {
      unsigned int v49 = *((_DWORD *)a3 + 4);
    }
    if (v39 == (void *)(v36 + 8 * v49))
    {
      uint64_t v50 = v266;
      if (v267 == v266)
      {
        unsigned int v51 = v269;
        uint64_t v52 = &v267[8 * v269];
        if (v269)
        {
          uint64_t v53 = 0;
          while (*(void *)&v267[v53] != v35)
          {
            v53 += 8;
            if (8 * v269 == v53) {
              goto LABEL_74;
            }
          }
          uint64_t v52 = &v267[v53];
        }
LABEL_74:
        uint64_t v50 = v267;
      }
      else
      {
        unsigned int v54 = v268 - 1;
        unsigned int v55 = (v268 - 1) & ((v35 >> 4) ^ (v35 >> 9));
        uint64_t v52 = &v267[8 * v55];
        uint64_t v56 = *(void *)v52;
        if (*(void *)v52 == -1)
        {
          unsigned int v57 = 0;
LABEL_84:
          if (v57) {
            uint64_t v52 = v57;
          }
          unsigned int v51 = v269;
          if (*(void *)v52 != v35) {
            uint64_t v52 = &v267[8 * v268];
          }
        }
        else
        {
          unsigned int v57 = 0;
          int v58 = 1;
          while (v56 != v35)
          {
            if (v57) {
              BOOL v59 = 0;
            }
            else {
              BOOL v59 = v56 == -2;
            }
            if (v59) {
              unsigned int v57 = v52;
            }
            unsigned int v60 = v55 + v58++;
            unsigned int v55 = v60 & v54;
            uint64_t v52 = &v267[8 * (v60 & v54)];
            uint64_t v56 = *(void *)v52;
            if (*(void *)v52 == -1) {
              goto LABEL_84;
            }
          }
          unsigned int v51 = v269;
        }
      }
      unsigned int v62 = v268;
      if (v267 == v50) {
        unsigned int v62 = v51;
      }
      if (v52 != &v267[8 * v62])
      {
        *(void *)uint64_t v52 = -2;
        int v270 = ++v31;
      }
    }
    unsigned int v63 = v32 + 1;
    while (v63 != v34)
    {
      unint64_t v64 = *v63++;
      unint64_t v35 = v64;
      if (v64 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v32 = v63 - 1;
        goto LABEL_25;
      }
    }
    uint64_t v8 = v285;
    uint64_t v9 = v286;
  }
LABEL_90:
  uint64_t v65 = sub_1CC7FBF5C((uint64_t)v15, &v266, v9, v8, 0);
  a2[2] = v65;
  a2[7] = HIDWORD(v65);
  a2[12] = v66;
  a2[4] = 0;
  a2[9] = 0;
  a2[14] = 0;
  a2[17] = 0;
  a2[18] = 0;
  unsigned int v264 = a2[3];
  unsigned int v263 = a2[8];
  unsigned int v67 = a2[13];
  int v258 = v262;
  int v259 = v262;
  uint64_t v260 = 4;
  int v261 = 0;
  v257[0] = &v284;
  v257[1] = (uint64_t *)&v264;
  v257[2] = (uint64_t *)&v263;
  v257[3] = (uint64_t *)&v283;
  v257[4] = v15;
  v257[5] = (uint64_t *)&v258;
  v257[6] = &v286;
  v257[7] = &v285;
  v257[8] = (uint64_t *)&v278;
  v257[9] = (uint64_t *)&v265;
  unsigned int v68 = a1 >> 4;
  if ((*((unsigned char *)a1 + 23) & 0x10) == 0)
  {
    std::string::size_type v78 = 0;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
    p_dst = &__dst;
    goto LABEL_106;
  }
  uint64_t v69 = ***a1;
  uint64_t v70 = *(void *)(v69 + 152);
  uint64_t v71 = *(unsigned int *)(v69 + 168);
  if (!v71) {
    goto LABEL_97;
  }
  LODWORD(v72) = (v71 - 1) & (v68 ^ (a1 >> 9));
  unsigned int v73 = (uint64_t ****)(v70 + 16 * v72);
  unsigned int v74 = *v73;
  if (*v73 != a1)
  {
    int v75 = 1;
    while (v74 != (uint64_t ***)-4096)
    {
      int v76 = v72 + v75++;
      uint64_t v72 = v76 & (v71 - 1);
      unsigned int v74 = *(uint64_t ****)(v70 + 16 * v72);
      if (v74 == a1)
      {
        unsigned int v73 = (uint64_t ****)(v70 + 16 * v72);
        goto LABEL_98;
      }
    }
LABEL_97:
    unsigned int v73 = (uint64_t ****)(v70 + 16 * v71);
  }
LABEL_98:
  uint64_t v77 = (unint64_t *)v73[1];
  unint64_t v80 = *v77;
  int v79 = v77 + 2;
  std::string::size_type v78 = v80;
  if (v80 > 0x7FFFFFFFFFFFFFF7) {
LABEL_462:
  }
    abort();
  if (v78 >= 0x17)
  {
    uint64_t v82 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v78 | 7) != 0x17) {
      uint64_t v82 = v78 | 7;
    }
    uint64_t v83 = v82 + 1;
    p_dst = (std::string *)operator new(v82 + 1);
    __dst.__r_.__value_.__l.__size_ = v78;
    __dst.__r_.__value_.__r.__words[2] = v83 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v78;
    p_dst = &__dst;
    if (!v78) {
      goto LABEL_106;
    }
  }
  memmove(p_dst, v79, v78);
LABEL_106:
  p_dst->__r_.__value_.__s.__data_[v78] = 0;
  uint64_t v84 = std::string::append(&__dst, "_liveout");
  std::string __p = *v84;
  v84->__r_.__value_.__r.__words[0] = 0;
  v84->__r_.__value_.__l.__size_ = 0;
  v84->__r_.__value_.__r.__words[2] = 0;
  sub_1CC7FC1D4(v257, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  uint64_t v87 = a1 + 5;
  unint64_t v86 = (uint64_t ***)a1[5];
  if (v86 == a1 + 5)
  {
    unint64_t v225 = a1 + 5;
    uint64_t v89 = v250;
    goto LABEL_405;
  }
  int v88 = 0;
  unsigned int v246 = v68 ^ (a1 >> 9);
  uint64_t v89 = v250;
  uint64_t v247 = a1 + 5;
  do
  {
    uint64_t v90 = v86 ? (uint64_t)(v86 - 3) : 0;
    if (*(unsigned char *)(v90 + 16) == 83) {
      break;
    }
    uint64_t v251 = (uint64_t ****)v86;
    if (HIDWORD(v260) != v261)
    {
      uint64_t v85 = (uint64_t)v259;
      if (v259 == v258) {
        goto LABEL_118;
      }
      if (v260 >= 0x21 && 4 * (HIDWORD(v260) - v261) < v260)
      {
        uint64_t v85 = (uint64_t)llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v258);
      }
      else
      {
        uint64_t v85 = (uint64_t)memset(v259, 255, 8 * v260);
LABEL_118:
        int v261 = 0;
        HIDWORD(v260) = 0;
      }
      BOOL v265 = 1;
    }
    int v252 = v88;
    unsigned int v91 = v264;
    v89[4] += v264;
    v89[9] += v263;
    v89[14] += v67;
    ++v89[17];
    uint64_t v92 = v285;
    uint64_t v93 = v286;
    uint64_t v94 = *(void *)v90;
    int v95 = *(unsigned __int8 *)(*(void *)v90 + 8);
    if (v95 != 7)
    {
      uint64_t v85 = sub_1CC7FCF90(v90, v286, v285);
      if (v85 < 2) {
        goto LABEL_141;
      }
      if (v85 == 2)
      {
LABEL_140:
        ++v250[18];
        int v95 = *(unsigned __int8 *)(v94 + 8);
        goto LABEL_141;
      }
    }
    int v96 = *(_DWORD *)(v90 + 20);
    if ((v96 & 0x40000000) != 0)
    {
      unint64_t v98 = *(uint64_t **)(v90 - 8);
      uint64_t v97 = v96 & 0x7FFFFFF;
      if (!v97) {
        goto LABEL_141;
      }
    }
    else
    {
      uint64_t v97 = v96 & 0x7FFFFFF;
      unint64_t v98 = (uint64_t *)(v90 - 32 * v97);
      if (!v97) {
        goto LABEL_141;
      }
    }
    uint64_t v99 = &v98[4 * v97];
    char v100 = 1;
    do
    {
      while (1)
      {
        uint64_t v85 = *v98;
        unsigned int v101 = *(unsigned __int8 *)(*v98 + 16);
        if (v101 < 0x15 || v101 == 22) {
          break;
        }
        uint64_t v85 = sub_1CC7FCF90(v85, v93, v92);
        if (!v85) {
          goto LABEL_141;
        }
        if (v85 != 2) {
          break;
        }
        char v100 = 0;
        v98 += 4;
        if (v98 == v99) {
          goto LABEL_140;
        }
      }
      v98 += 4;
    }
    while (v98 != v99);
    if ((v100 & 1) == 0) {
      goto LABEL_140;
    }
LABEL_141:
    if (v95 == 7)
    {
      uint64_t v15 = (uint64_t *)a4;
      uint64_t v89 = v250;
    }
    else
    {
      unsigned int v103 = v272;
      uint64_t v15 = (uint64_t *)a4;
      uint64_t v89 = v250;
      if (__src == v272)
      {
        unsigned int v104 = v275;
        uint64_t v105 = (char *)__src + 8 * v275;
        if (v275)
        {
          uint64_t v106 = 0;
          while (*(void *)((char *)__src + v106) != v90)
          {
            v106 += 8;
            if (8 * v275 == v106) {
              goto LABEL_162;
            }
          }
          uint64_t v105 = (char *)__src + v106;
        }
LABEL_162:
        unsigned int v103 = __src;
      }
      else
      {
        unsigned int v107 = v274 - 1;
        unsigned int v108 = (v274 - 1) & ((v90 >> 4) ^ (v90 >> 9));
        uint64_t v105 = (char *)__src + 8 * v108;
        uint64_t v109 = *(void *)v105;
        if (*(void *)v105 == -1)
        {
          uint64_t v110 = 0;
LABEL_189:
          if (v110) {
            uint64_t v105 = v110;
          }
          unsigned int v104 = v275;
          if (*(void *)v105 != v90) {
            uint64_t v105 = (char *)__src + 8 * v274;
          }
        }
        else
        {
          uint64_t v110 = 0;
          int v111 = 1;
          while (v109 != v90)
          {
            if (v110) {
              BOOL v112 = 0;
            }
            else {
              BOOL v112 = v109 == -2;
            }
            if (v112) {
              uint64_t v110 = v105;
            }
            unsigned int v113 = v108 + v111++;
            unsigned int v108 = v113 & v107;
            uint64_t v105 = (char *)__src + 8 * (v113 & v107);
            uint64_t v109 = *(void *)v105;
            if (*(void *)v105 == -1) {
              goto LABEL_189;
            }
          }
          unsigned int v104 = v275;
        }
      }
      if (__src == v103) {
        unsigned int v114 = v104;
      }
      else {
        unsigned int v114 = v274;
      }
      if (v105 != (char *)__src + 8 * v114)
      {
        *(void *)uint64_t v105 = -2;
        ++v276;
        uint64_t v85 = sub_1CC7FC7D0((uint64_t *)v90, a4, v286, v285);
        unsigned int v91 = v264 - v85;
        v264 -= v85;
        v263 -= HIDWORD(v85);
        v67 -= v115;
        if (HIDWORD(v85))
        {
          int v116 = v278;
          if (v279 == v278)
          {
            unsigned int v117 = HIDWORD(v280);
            unsigned int v118 = (char *)v279 + 8 * HIDWORD(v280);
            if (HIDWORD(v280))
            {
              uint64_t v119 = 0;
              while (*(void *)((char *)v279 + v119) != v90)
              {
                v119 += 8;
                if (8 * HIDWORD(v280) == v119) {
                  goto LABEL_196;
                }
              }
              unsigned int v118 = (char *)v279 + v119;
            }
LABEL_196:
            int v116 = v279;
          }
          else
          {
            int v120 = v280 - 1;
            unsigned int v121 = (v280 - 1) & ((v90 >> 4) ^ (v90 >> 9));
            unsigned int v118 = (char *)v279 + 8 * v121;
            uint64_t v122 = *(void *)v118;
            if (*(void *)v118 == -1)
            {
              int v123 = 0;
LABEL_393:
              if (v123) {
                unsigned int v118 = v123;
              }
              unsigned int v117 = HIDWORD(v280);
              if (*(void *)v118 != v90) {
                unsigned int v118 = (char *)v279 + 8 * v280;
              }
            }
            else
            {
              int v123 = 0;
              int v124 = 1;
              while (v122 != v90)
              {
                if (v123) {
                  BOOL v125 = 0;
                }
                else {
                  BOOL v125 = v122 == -2;
                }
                if (v125) {
                  int v123 = v118;
                }
                unsigned int v126 = v121 + v124++;
                unsigned int v121 = v126 & v120;
                unsigned int v118 = (char *)v279 + 8 * (v126 & v120);
                uint64_t v122 = *(void *)v118;
                if (*(void *)v118 == -1) {
                  goto LABEL_393;
                }
              }
              unsigned int v117 = HIDWORD(v280);
            }
          }
          if (v279 == v116) {
            unsigned int v127 = v117;
          }
          else {
            unsigned int v127 = v280;
          }
          if (v118 != (char *)v279 + 8 * v127)
          {
            *(void *)unsigned int v118 = -2;
            ++v281;
          }
          BOOL v265 = 1;
        }
      }
    }
    int v128 = *(_DWORD *)(v90 + 20);
    if ((v128 & 0x40000000) != 0)
    {
      unsigned int v130 = *(uint64_t ***)(v90 - 8);
      uint64_t v129 = v128 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v129 = v128 & 0x7FFFFFF;
      unsigned int v130 = (uint64_t **)(v90 - 32 * v129);
    }
    a1 = v248;
    unsigned int v131 = &v130[4 * v129];
    if (v129)
    {
      while (1)
      {
        unsigned int v132 = *v130;
        unsigned int v133 = *((unsigned __int8 *)*v130 + 16);
        if (v133 < 0x15 || v133 == 22) {
          goto LABEL_309;
        }
        unsigned int v135 = (char *)__src;
        uint64_t v136 = v275;
        if (__src == v272)
        {
          if (v275)
          {
            uint64_t v137 = 0;
            uint64_t v138 = 8 * v275;
            uint64_t v139 = (uint64_t **)__src;
            while (*v139 != v132)
            {
              if (*v139 == (uint64_t *)-2) {
                uint64_t v137 = v139;
              }
              ++v139;
              v138 -= 8;
              if (!v138)
              {
                if (!v137) {
                  goto LABEL_219;
                }
                *uint64_t v137 = v132;
                --v276;
                goto LABEL_243;
              }
            }
            goto LABEL_309;
          }
LABEL_219:
          unsigned int v140 = v274;
          if (v275 < v274)
          {
            ++v275;
            *((void *)__src + v136) = v132;
            goto LABEL_243;
          }
        }
        else
        {
          unsigned int v140 = v274;
        }
        if (3 * v140 <= 4 * (v275 - v276)) {
          break;
        }
        if (v140 - v275 < v140 >> 3) {
          goto LABEL_318;
        }
LABEL_224:
        unsigned int v141 = v140 - 1;
        unsigned int v142 = (v140 - 1) & ((v132 >> 4) ^ (v132 >> 9));
        unint64_t v143 = &v135[8 * v142];
        unint64_t v144 = *(uint64_t **)v143;
        if (*(void *)v143 != -1)
        {
          int v145 = 0;
          int v146 = 1;
          while (v144 != v132)
          {
            if (v145) {
              BOOL v147 = 0;
            }
            else {
              BOOL v147 = v144 == (uint64_t *)-2;
            }
            if (v147) {
              int v145 = v143;
            }
            unsigned int v148 = v142 + v146++;
            unsigned int v142 = v148 & v141;
            unint64_t v143 = &v135[8 * (v148 & v141)];
            unint64_t v144 = *(uint64_t **)v143;
            if (*(void *)v143 == -1) {
              goto LABEL_236;
            }
          }
          goto LABEL_309;
        }
        int v145 = 0;
LABEL_236:
        if (v145) {
          uint64_t v149 = (uint64_t **)v145;
        }
        else {
          uint64_t v149 = (uint64_t **)v143;
        }
        if (*v149 == v132) {
          goto LABEL_309;
        }
        if (*v149 == (uint64_t *)-2) {
          --v276;
        }
        else {
          ++v275;
        }
        *uint64_t v149 = v132;
LABEL_243:
        uint64_t v85 = sub_1CC7FC7D0(*v130, (uint64_t)v15, v286, v285);
        v264 += v85;
        v263 += HIDWORD(v85);
        v67 += v150;
        if (HIDWORD(v85))
        {
          uint64_t v151 = *v130;
          int v152 = (char *)v279;
          uint64_t v153 = HIDWORD(v280);
          if (v279 == v278)
          {
            if (HIDWORD(v280))
            {
              unsigned int v154 = 0;
              uint64_t v155 = 8 * HIDWORD(v280);
              uint64_t v156 = (uint64_t **)v279;
              while (*v156 != v151)
              {
                if (*v156 == (uint64_t *)-2) {
                  unsigned int v154 = v156;
                }
                ++v156;
                v155 -= 8;
                if (!v155)
                {
                  if (!v154) {
                    goto LABEL_252;
                  }
                  *unsigned int v154 = v151;
                  --v281;
                  break;
                }
              }
LABEL_276:
              unint64_t v167 = *v130;
              uint64_t v168 = v259;
              uint64_t v169 = HIDWORD(v260);
              if (v259 == v258)
              {
                if (HIDWORD(v260))
                {
                  BOOL v170 = 0;
                  uint64_t v171 = 8 * HIDWORD(v260);
                  unsigned int v172 = (uint64_t **)v259;
                  while (*v172 != v167)
                  {
                    if (*v172 == (uint64_t *)-2) {
                      BOOL v170 = v172;
                    }
                    ++v172;
                    v171 -= 8;
                    if (!v171)
                    {
                      if (!v170) {
                        goto LABEL_284;
                      }
                      *BOOL v170 = v167;
                      --v261;
                      goto LABEL_308;
                    }
                  }
                  goto LABEL_308;
                }
LABEL_284:
                unsigned int v173 = v260;
                if (HIDWORD(v260) < v260)
                {
                  ++HIDWORD(v260);
                  *(void *)&v259[8 * v169] = v167;
LABEL_308:
                  BOOL v265 = 1;
                  goto LABEL_309;
                }
              }
              else
              {
                unsigned int v173 = v260;
              }
              if (3 * v173 <= 4 * (HIDWORD(v260) - v261))
              {
                if (v173 >= 0x40) {
                  v173 *= 2;
                }
                else {
                  unsigned int v173 = 128;
                }
              }
              else if (v173 - HIDWORD(v260) >= v173 >> 3)
              {
                goto LABEL_289;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v258, v173);
              unsigned int v173 = v260;
              uint64_t v168 = v259;
LABEL_289:
              unsigned int v174 = v173 - 1;
              unsigned int v175 = (v173 - 1) & ((v167 >> 4) ^ (v167 >> 9));
              int v176 = &v168[8 * v175];
              BOOL v177 = *(uint64_t **)v176;
              if (*(void *)v176 == -1)
              {
                unsigned int v178 = 0;
LABEL_301:
                if (v178) {
                  uint64_t v182 = v178;
                }
                else {
                  uint64_t v182 = (uint64_t **)v176;
                }
                if (*v182 != v167)
                {
                  if (*v182 == (uint64_t *)-2) {
                    --v261;
                  }
                  else {
                    ++HIDWORD(v260);
                  }
                  *uint64_t v182 = v167;
                }
              }
              else
              {
                unsigned int v178 = 0;
                int v179 = 1;
                while (v177 != v167)
                {
                  if (v178) {
                    BOOL v180 = 0;
                  }
                  else {
                    BOOL v180 = v177 == (uint64_t *)-2;
                  }
                  if (v180) {
                    unsigned int v178 = (uint64_t **)v176;
                  }
                  unsigned int v181 = v175 + v179++;
                  unsigned int v175 = v181 & v174;
                  int v176 = &v168[8 * (v181 & v174)];
                  BOOL v177 = *(uint64_t **)v176;
                  if (*(void *)v176 == -1) {
                    goto LABEL_301;
                  }
                }
              }
              goto LABEL_308;
            }
LABEL_252:
            unsigned int v157 = v280;
            if (HIDWORD(v280) < v280)
            {
              ++HIDWORD(v280);
              *((void *)v279 + v153) = v151;
              goto LABEL_276;
            }
          }
          else
          {
            unsigned int v157 = v280;
          }
          if (3 * v157 <= 4 * (HIDWORD(v280) - v281))
          {
            if (v157 >= 0x40) {
              v157 *= 2;
            }
            else {
              unsigned int v157 = 128;
            }
          }
          else if (v157 - HIDWORD(v280) >= v157 >> 3)
          {
            goto LABEL_257;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v278, v157);
          unsigned int v157 = v280;
          int v152 = (char *)v279;
LABEL_257:
          unsigned int v158 = v157 - 1;
          unsigned int v159 = (v157 - 1) & ((v151 >> 4) ^ (v151 >> 9));
          unsigned int v160 = &v152[8 * v159];
          int v161 = *(uint64_t **)v160;
          if (*(void *)v160 == -1)
          {
            int v162 = 0;
LABEL_269:
            if (v162) {
              size_t v166 = v162;
            }
            else {
              size_t v166 = (uint64_t **)v160;
            }
            if (*v166 != v151)
            {
              if (*v166 == (uint64_t *)-2) {
                --v281;
              }
              else {
                ++HIDWORD(v280);
              }
              *size_t v166 = v151;
            }
          }
          else
          {
            int v162 = 0;
            int v163 = 1;
            while (v161 != v151)
            {
              if (v162) {
                BOOL v164 = 0;
              }
              else {
                BOOL v164 = v161 == (uint64_t *)-2;
              }
              if (v164) {
                int v162 = (uint64_t **)v160;
              }
              unsigned int v165 = v159 + v163++;
              unsigned int v159 = v165 & v158;
              unsigned int v160 = &v152[8 * (v165 & v158)];
              int v161 = *(uint64_t **)v160;
              if (*(void *)v160 == -1) {
                goto LABEL_269;
              }
            }
          }
          goto LABEL_276;
        }
LABEL_309:
        v130 += 4;
        if (v130 == v131)
        {
          unsigned int v91 = v264;
          goto LABEL_329;
        }
      }
      if (v140 >= 0x40) {
        v140 *= 2;
      }
      else {
        unsigned int v140 = 128;
      }
LABEL_318:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v272, v140);
      unsigned int v140 = v274;
      unsigned int v135 = (char *)__src;
      goto LABEL_224;
    }
LABEL_329:
    if ((v91 & 0x80000000) != 0)
    {
      uint64_t v206 = llvm::dbgs((llvm *)v85);
      unsigned int v207 = v206;
      int v208 = (_OWORD *)*((void *)v206 + 4);
      if (*((void *)v206 + 3) - (void)v208 > 0xFuLL)
      {
        _OWORD *v208 = *(_OWORD *)"Exceed peak at: ";
        *((void *)v206 + 4) += 16;
      }
      else
      {
        llvm::raw_ostream::write(v206, "Exceed peak at: ", 0x10uLL);
      }
      llvm::Value::print((llvm::Value *)v90, v207, 0);
      uint64_t v209 = *((void *)v207 + 4);
      if ((unint64_t)(*((void *)v207 + 3) - v209) > 2)
      {
        *(unsigned char *)(v209 + 2) = 32;
        *(_WORD *)uint64_t v209 = 11552;
        *((void *)v207 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v207, " - ", 3uLL);
      }
      unint64_t v210 = sub_1CD098D14(v207, v264, 0, 0, 0);
      uint64_t v211 = (unsigned char *)*((void *)v207 + 4);
      if ((unint64_t)v211 >= *((void *)v207 + 3))
      {
        unint64_t v210 = llvm::raw_ostream::write(v207, 10);
      }
      else
      {
        *((void *)v207 + 4) = v211 + 1;
        *uint64_t v211 = 10;
      }
      unsigned int v218 = (char **)llvm::dbgs(v210);
      sub_1CC7FC8E4(v218, &v272, v286, v285, (uint64_t)v15);
      uint64_t v85 = (uint64_t)llvm::dbgs(v219);
      int v220 = *(unsigned char **)(v85 + 32);
      if ((unint64_t)v220 >= *(void *)(v85 + 24))
      {
        uint64_t v85 = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)v85, 10);
      }
      else
      {
        *(void *)(v85 + 32) = v220 + 1;
        *int v220 = 10;
      }
    }
    if ((int)(v263 + v264) < 0)
    {
      uint64_t v212 = llvm::dbgs((llvm *)v85);
      uint64_t v213 = v212;
      uint64_t v214 = (void *)*((void *)v212 + 4);
      if (*((void *)v212 + 3) - (void)v214 > 0x1BuLL)
      {
        qmemcpy(v214, "Exceed peak with scalar at: ", 28);
        *((void *)v212 + 4) += 28;
      }
      else
      {
        llvm::raw_ostream::write(v212, "Exceed peak with scalar at: ", 0x1CuLL);
      }
      llvm::Value::print((llvm::Value *)v90, v213, 0);
      uint64_t v215 = *((void *)v213 + 4);
      if ((unint64_t)(*((void *)v213 + 3) - v215) > 2)
      {
        *(unsigned char *)(v215 + 2) = 32;
        *(_WORD *)uint64_t v215 = 11552;
        *((void *)v213 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v213, " - ", 3uLL);
      }
      uint64_t v216 = sub_1CD098D14(v213, v263 + v264, 0, 0, 0);
      unint64_t v217 = (unsigned char *)*((void *)v213 + 4);
      if ((unint64_t)v217 >= *((void *)v213 + 3))
      {
        uint64_t v216 = llvm::raw_ostream::write(v213, 10);
      }
      else
      {
        *((void *)v213 + 4) = v217 + 1;
        unsigned char *v217 = 10;
      }
      uint64_t v221 = (char **)llvm::dbgs(v216);
      sub_1CC7FC8E4(v221, &v272, v286, v285, (uint64_t)v15);
      uint64_t v223 = llvm::dbgs(v222);
      uint64_t v224 = (unsigned char *)*((void *)v223 + 4);
      if ((unint64_t)v224 >= *((void *)v223 + 3))
      {
        llvm::raw_ostream::write(v223, 10);
      }
      else
      {
        *((void *)v223 + 4) = v224 + 1;
        unsigned char *v224 = 10;
      }
    }
    unsigned int v183 = v264;
    unsigned int v184 = v263;
    if (v89[16] + v89[15] < v263 + v264)
    {
      v89[15] = v264;
      v89[16] = v184;
    }
    if (v89[8] > v184) {
      unsigned int v184 = v89[8];
    }
    v89[8] = v184;
    if (v89[3] > v183) {
      unsigned int v183 = v89[3];
    }
    v89[3] = v183;
    unsigned int v185 = v89[13];
    if (v185 <= v67) {
      unsigned int v185 = v67;
    }
    v89[13] = v185;
    if ((*((unsigned char *)v248 + 23) & 0x10) == 0)
    {
      std::string::size_type v195 = 0;
      *((unsigned char *)&v254.__r_.__value_.__s + 23) = 0;
      size_t v198 = &v254;
      goto LABEL_355;
    }
    uint64_t v186 = ***v248;
    uint64_t v187 = *(void *)(v186 + 152);
    uint64_t v188 = *(unsigned int *)(v186 + 168);
    if (!v188) {
      goto LABEL_346;
    }
    LODWORD(v189) = (v188 - 1) & v246;
    uint64_t v190 = (uint64_t ****)(v187 + 16 * v189);
    uint64_t v191 = *v190;
    if (*v190 != v248)
    {
      int v192 = 1;
      while (v191 != (uint64_t ***)-4096)
      {
        int v193 = v189 + v192++;
        uint64_t v189 = v193 & (v188 - 1);
        uint64_t v191 = *(uint64_t ****)(v187 + 16 * v189);
        if (v191 == v248)
        {
          uint64_t v190 = (uint64_t ****)(v187 + 16 * v189);
          goto LABEL_347;
        }
      }
LABEL_346:
      uint64_t v190 = (uint64_t ****)(v187 + 16 * v188);
    }
LABEL_347:
    uint64_t v194 = (unint64_t *)v190[1];
    unint64_t v197 = *v194;
    int v196 = v194 + 2;
    std::string::size_type v195 = v197;
    if (v197 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_462;
    }
    if (v195 >= 0x17)
    {
      uint64_t v199 = (v195 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v195 | 7) != 0x17) {
        uint64_t v199 = v195 | 7;
      }
      uint64_t v200 = v199 + 1;
      size_t v198 = operator new(v199 + 1);
      v254.__r_.__value_.__l.__size_ = v195;
      v254.__r_.__value_.__r.__words[2] = v200 | 0x8000000000000000;
      v254.__r_.__value_.__r.__words[0] = (std::string::size_type)v198;
    }
    else
    {
      *((unsigned char *)&v254.__r_.__value_.__s + 23) = v195;
      size_t v198 = &v254;
      if (!v195) {
        goto LABEL_355;
      }
    }
    memmove(v198, v196, v195);
LABEL_355:
    int v88 = v252 + 1;
    *((unsigned char *)v198 + v195) = 0;
    uint64_t v201 = std::string::append(&v254, "_rev");
    std::string::size_type v202 = v201->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v201->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v202;
    v201->__r_.__value_.__l.__size_ = 0;
    v201->__r_.__value_.__r.__words[2] = 0;
    v201->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v253, v252 + 1);
    if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v203 = &v253;
    }
    else {
      uint64_t v203 = (std::string *)v253.__r_.__value_.__r.__words[0];
    }
    if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&v253.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = v253.__r_.__value_.__l.__size_;
    }
    unsigned int v205 = std::string::append(&__dst, (const std::string::value_type *)v203, size);
    std::string __p = *v205;
    v205->__r_.__value_.__r.__words[0] = 0;
    v205->__r_.__value_.__l.__size_ = 0;
    v205->__r_.__value_.__r.__words[2] = 0;
    sub_1CC7FC1D4(v257, (long long *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v87 = v247;
    if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v253.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v254.__r_.__value_.__l.__data_);
    }
    unint64_t v86 = *v251;
  }
  while (*v251 != v247);
  unint64_t v225 = (uint64_t ***)*v87;
LABEL_405:
  v89[4] += v264;
  v89[9] += v263;
  v89[14] += v67;
  if (v225 != v87)
  {
    unint64_t v226 = a1[6];
    unint64_t v227 = (uint64_t *)(v226 - 3);
    uint64_t v228 = v226 ? (uint64_t)(v226 - 3) : 0;
    if (v226 && *(unsigned char *)(v228 + 16) == 83)
    {
      do
      {
        unint64_t v229 = v272;
        if (__src == v272)
        {
          unsigned int v230 = v275;
          unsigned int v231 = (char *)__src + 8 * v275;
          if (v275)
          {
            uint64_t v232 = 0;
            while (*(uint64_t **)((char *)__src + v232) != v227)
            {
              v232 += 8;
              if (8 * v275 == v232) {
                goto LABEL_430;
              }
            }
            unsigned int v231 = (char *)__src + v232;
          }
LABEL_430:
          unint64_t v229 = __src;
        }
        else
        {
          unsigned int v233 = v274 - 1;
          unsigned int v234 = (v274 - 1) & ((v227 >> 4) ^ (v227 >> 9));
          unsigned int v231 = (char *)__src + 8 * v234;
          int v235 = *(uint64_t **)v231;
          if (*(void *)v231 == -1)
          {
            BOOL v236 = 0;
LABEL_443:
            if (v236) {
              unsigned int v231 = v236;
            }
            unsigned int v230 = v275;
            if (*(uint64_t **)v231 != v227) {
              unsigned int v231 = (char *)__src + 8 * v274;
            }
          }
          else
          {
            BOOL v236 = 0;
            int v237 = 1;
            while (v235 != v227)
            {
              if (v236) {
                BOOL v238 = 0;
              }
              else {
                BOOL v238 = v235 == (uint64_t *)-2;
              }
              if (v238) {
                BOOL v236 = v231;
              }
              unsigned int v239 = v234 + v237++;
              unsigned int v234 = v239 & v233;
              unsigned int v231 = (char *)__src + 8 * (v239 & v233);
              int v235 = *(uint64_t **)v231;
              if (*(void *)v231 == -1) {
                goto LABEL_443;
              }
            }
            unsigned int v230 = v275;
          }
        }
        if (__src == v229) {
          unsigned int v240 = v230;
        }
        else {
          unsigned int v240 = v274;
        }
        if (v231 == (char *)__src + 8 * v240)
        {
          unint64_t v241 = sub_1CC7FC7D0(v227, (uint64_t)v15, v286, v285);
          v264 += v241;
          v263 += HIDWORD(v241);
        }
        uint64_t v242 = v227[4];
        unint64_t v227 = (uint64_t *)(v242 - 24);
        if (v242) {
          uint64_t v243 = v242 - 24;
        }
        else {
          uint64_t v243 = 0;
        }
      }
      while (v242 && *(unsigned char *)(v243 + 16) == 83);
    }
  }
  if (v259 != v258) {
    free(v259);
  }
  if (v267 != v266) {
    free(v267);
  }
  if (__src != v272) {
    free(__src);
  }
  if (v279 != v278) {
    free(v279);
  }
}

uint64_t sub_1CC7FBD48(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 88 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      unsigned int v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          unsigned int v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 88 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *sub_1CC7FBDE0(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(88 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 88 * v10;
      do
      {
        *BOOL result = -4096;
        result += 11;
        v11 -= 88;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 88 * v3;
      unsigned int v13 = (_OWORD *)(v4 + 8);
      do
      {
        uint64_t v14 = *((void *)v13 - 1);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v21 = 0;
          sub_1CC7FBD48(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v21);
          uint64_t v15 = v21;
          uint64_t *v21 = v14;
          *(_OWORD *)(v15 + 1) = *v13;
          long long v16 = v13[1];
          long long v17 = v13[2];
          long long v18 = v13[3];
          *(_OWORD *)((char *)v15 + 68) = *(_OWORD *)((char *)v13 + 60);
          *(_OWORD *)(v15 + 7) = v18;
          *(_OWORD *)(v15 + 5) = v17;
          *(_OWORD *)(v15 + 3) = v16;
          ++*(_DWORD *)(a1 + 8);
        }
        unsigned int v13 = (_OWORD *)((char *)v13 + 88);
        v12 -= 88;
      }
      while (v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v19 = *(_DWORD *)(a1 + 16);
  if (v19)
  {
    uint64_t v20 = 88 * v19;
    do
    {
      *BOOL result = -4096;
      result += 11;
      v20 -= 88;
    }
    while (v20);
  }
  return result;
}

uint64_t sub_1CC7FBF5C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a1;
  uint64_t v7 = a2[1];
  if (v7 == *a2) {
    unsigned int v8 = (unsigned int *)a2 + 5;
  }
  else {
    unsigned int v8 = (unsigned int *)(a2 + 2);
  }
  uint64_t v9 = *v8;
  if (v9)
  {
    uint64_t v10 = 8 * v9;
    for (uint64_t i = (unint64_t *)a2[1]; *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v10 -= 8;
      if (!v10) {
        return 0;
      }
    }
  }
  else
  {
    uint64_t i = (unint64_t *)a2[1];
  }
  uint64_t v12 = (unint64_t *)(v7 + 8 * v9);
  if (i == v12) {
    return 0;
  }
  LODWORD(v13) = 0;
  LODWORD(v14) = 0;
  int v15 = 0;
  long long v16 = (uint64_t *)*i;
  uint64_t v41 = a3;
  uint64_t v42 = a4;
LABEL_12:
  unint64_t v17 = sub_1CC7FC7D0(v16, v6, a3, a4);
  int v18 = v17;
  int v20 = v19;
  unint64_t v21 = HIDWORD(v17);
  if (a5 && HIDWORD(v17))
  {
    uint64_t v22 = *(void *)(a5 + 8);
    uint64_t v23 = *(unsigned int *)(a5 + 20);
    if (v22 == *(void *)a5)
    {
      if (v23)
      {
        int v24 = 0;
        uint64_t v25 = 8 * v23;
        uint64_t v26 = *(uint64_t ***)(a5 + 8);
        while (*v26 != v16)
        {
          if (*v26 == (uint64_t *)-2) {
            int v24 = v26;
          }
          ++v26;
          v25 -= 8;
          if (!v25)
          {
            if (!v24) {
              goto LABEL_22;
            }
            *int v24 = v16;
            --*(_DWORD *)(a5 + 24);
            goto LABEL_46;
          }
        }
        goto LABEL_46;
      }
LABEL_22:
      unsigned int v27 = *(_DWORD *)(a5 + 16);
      if (v23 < v27)
      {
        *(_DWORD *)(a5 + 20) = v23 + 1;
        *(void *)(v22 + 8 * v23) = v16;
        goto LABEL_46;
      }
    }
    else
    {
      unsigned int v27 = *(_DWORD *)(a5 + 16);
    }
    if (3 * v27 <= 4 * ((int)v23 - *(_DWORD *)(a5 + 24)))
    {
      if (v27 >= 0x40) {
        v27 *= 2;
      }
      else {
        unsigned int v27 = 128;
      }
    }
    else if (v27 - v23 >= v27 >> 3)
    {
      goto LABEL_27;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a5, v27);
    unsigned int v27 = *(_DWORD *)(a5 + 16);
    uint64_t v22 = *(void *)(a5 + 8);
LABEL_27:
    unsigned int v28 = v27 - 1;
    unsigned int v29 = (v27 - 1) & ((v16 >> 4) ^ (v16 >> 9));
    unsigned int v30 = (uint64_t **)(v22 + 8 * v29);
    int v31 = *v30;
    if (*v30 == (uint64_t *)-1)
    {
      uint64_t v32 = 0;
LABEL_39:
      if (v32) {
        uint64_t v36 = v32;
      }
      else {
        uint64_t v36 = v30;
      }
      if (*v36 != v16)
      {
        if (*v36 == (uint64_t *)-2) {
          --*(_DWORD *)(a5 + 24);
        }
        else {
          ++*(_DWORD *)(a5 + 20);
        }
        char *v36 = v16;
      }
    }
    else
    {
      uint64_t v32 = 0;
      int v33 = 1;
      while (v31 != v16)
      {
        if (v32) {
          BOOL v34 = 0;
        }
        else {
          BOOL v34 = v31 == (uint64_t *)-2;
        }
        if (v34) {
          uint64_t v32 = v30;
        }
        unsigned int v35 = v29 + v33++;
        unsigned int v29 = v35 & v28;
        unsigned int v30 = (uint64_t **)(v22 + 8 * (v35 & v28));
        int v31 = *v30;
        if (*v30 == (uint64_t *)-1) {
          goto LABEL_39;
        }
      }
    }
  }
LABEL_46:
  uint64_t v13 = (v13 + v18);
  uint64_t v14 = (v14 + v21);
  v15 += v20;
  uint64_t v37 = i + 1;
  a3 = v41;
  a4 = v42;
  uint64_t v6 = a1;
  while (v37 != v12)
  {
    unint64_t v38 = *v37++;
    long long v16 = (uint64_t *)v38;
    if (v38 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t i = v37 - 1;
      goto LABEL_12;
    }
  }
  return v13 | (v14 << 32);
}

void sub_1CC7FC1D4(uint64_t **a1, long long *a2)
{
  if (**a1)
  {
    unsigned int v3 = *(_DWORD *)a1[2] + *(_DWORD *)a1[1];
    unsigned int v4 = *(_DWORD *)a1[3];
    int v5 = v3 - v4;
    if (v3 > v4)
    {
      uint64_t v7 = sub_1CC7FBF5C((uint64_t)a1[4], a1[5], *a1[6], *a1[7], 0);
      unsigned int v8 = a1[8];
      if (*((_DWORD *)v8 + 5) == *((_DWORD *)v8 + 6))
      {
LABEL_123:
        *(unsigned char *)a1[9] = 0;
        return;
      }
      unsigned int v9 = v5 + HIDWORD(v7);
      uint64_t v10 = **a1;
      uint64_t v11 = a1[5];
      if (!*(unsigned char *)a1[9])
      {
        uint64_t v12 = *(unint64_t ***)(v10 + 6928);
        if (v12) {
          goto LABEL_92;
        }
      }
      uint64_t v83 = v87;
      uint64_t v84 = v87;
      uint64_t v85 = 4;
      int v86 = 0;
      unsigned int v13 = *(_DWORD *)(v10 + 8);
      uint64_t v14 = *(unsigned int *)(v10 + 12);
      if (v13 >= v14)
      {
        uint64_t v82 = v11;
        if (v14 == -1) {
          sub_1CD0A89A8(0xFFFFFFFFuLL);
        }
        if (((2 * v14) | 1uLL) >= 0xFFFFFFFF) {
          uint64_t v78 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v78 = (2 * v14) | 1;
        }
        int v79 = (char *)malloc_type_malloc(216 * v78, 0x4065EBACuLL);
        if (!v79) {
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        }
        uint64_t v80 = (uint64_t)v79;
        sub_1CC7FCD2C((llvm::SmallPtrSetImplBase *)&v79[216 * *(unsigned int *)(v10 + 8)], &v83, v9, a2);
        sub_1CC7FCE14((uint64_t *)v10, v80);
        if (*(void *)v10 != v10 + 16) {
          free(*(void **)v10);
        }
        *(void *)uint64_t v10 = v80;
        *(_DWORD *)(v10 + 12) = v78;
        uint64_t v11 = v82;
      }
      else
      {
        sub_1CC7FCD2C((llvm::SmallPtrSetImplBase *)(*(void *)v10 + 216 * v13), &v83, v9, a2);
      }
      ++*(_DWORD *)(v10 + 8);
      if (v84 != v83) {
        free(v84);
      }
      uint64_t v12 = (unint64_t **)(*(void *)v10 + 216 * *(unsigned int *)(v10 + 8) - 216);
      *(void *)(v10 + 6928) = v12;
      uint64_t v15 = v8[1];
      long long v16 = v15 == *v8 ? (unsigned int *)((char *)v8 + 20) : (unsigned int *)(v8 + 2);
      uint64_t v17 = *v16;
      if (v17)
      {
        uint64_t v18 = 8 * v17;
        int v19 = (unint64_t *)v8[1];
        while (*v19 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v19;
          v18 -= 8;
          if (!v18) {
            goto LABEL_92;
          }
        }
      }
      else
      {
        int v19 = (unint64_t *)v8[1];
      }
      int v20 = (unint64_t *)(v15 + 8 * v17);
      if (v19 == v20)
      {
LABEL_92:
        uint64_t v56 = *(void *)v10 + 216 * *(unsigned int *)(v10 + 8);
        unsigned int v57 = *(_DWORD *)(v56 - 120);
        if (v57 <= v9) {
          unsigned int v57 = v9;
        }
        *(_DWORD *)(v56 - 120) = v57;
        int v58 = v12[1];
        uint64_t v59 = 16;
        if (v58 == *v12) {
          uint64_t v59 = 20;
        }
        uint64_t v60 = *(unsigned int *)((char *)v12 + v59);
        if (v60)
        {
          uint64_t v61 = 8 * v60;
          unsigned int v62 = v58;
          while (*v62 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v62;
            v61 -= 8;
            if (!v61) {
              goto LABEL_123;
            }
          }
        }
        else
        {
          unsigned int v62 = v12[1];
        }
        unsigned int v63 = &v58[v60];
        if (v62 == v63) {
          goto LABEL_123;
        }
LABEL_103:
        uint64_t v83 = 0;
        unint64_t v64 = (unsigned char *)*v62;
        uint64_t v83 = (unsigned char *)*v62;
        int v65 = *(_DWORD *)(v10 + 6952);
        if (v65)
        {
          uint64_t v66 = *(void *)(v10 + 6936);
          int v67 = v65 - 1;
          unsigned int v68 = ((v64 >> 4) ^ (v64 >> 9)) & v67;
          uint64_t v69 = (void *)(v66 + 16 * v68);
          uint64_t v70 = (unsigned char *)*v69;
          if (v64 == (unsigned char *)*v69) {
            goto LABEL_118;
          }
          uint64_t v71 = 0;
          int v72 = 1;
          while (v70 != (unsigned char *)-4096)
          {
            if (v71) {
              BOOL v73 = 0;
            }
            else {
              BOOL v73 = v70 == (unsigned char *)-8192;
            }
            if (v73) {
              uint64_t v71 = v69;
            }
            unsigned int v74 = v68 + v72++;
            unsigned int v68 = v74 & v67;
            uint64_t v69 = (void *)(v66 + 16 * v68);
            uint64_t v70 = (unsigned char *)*v69;
            if (v64 == (unsigned char *)*v69) {
              goto LABEL_118;
            }
          }
          if (v71) {
            int v75 = v71;
          }
          else {
            int v75 = v69;
          }
        }
        else
        {
          int v75 = 0;
        }
        uint64_t v69 = sub_1CC21DC7C(v10 + 6936, (uint64_t)&v83, (uint64_t *)&v83, v75);
        void *v69 = v83;
        *((_DWORD *)v69 + 2) = 0;
LABEL_118:
        ++*((_DWORD *)v69 + 2);
        int v76 = v62 + 1;
        while (v76 != v63)
        {
          unint64_t v77 = *v76++;
          if (v77 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            unsigned int v62 = v76 - 1;
            goto LABEL_103;
          }
        }
        goto LABEL_123;
      }
      unint64_t v21 = *v19;
LABEL_21:
      uint64_t v23 = *v11;
      uint64_t v22 = v11[1];
      if (v22 == *v11)
      {
        uint64_t v24 = *((unsigned int *)v11 + 5);
        uint64_t v25 = (void *)(v22 + 8 * v24);
        if (v24)
        {
          uint64_t v26 = 0;
          uint64_t v27 = 8 * v24;
          while (*(void *)(v22 + v26) != v21)
          {
            v26 += 8;
            if (v27 == v26) {
              goto LABEL_39;
            }
          }
          uint64_t v25 = (void *)(v22 + v26);
        }
LABEL_39:
        uint64_t v23 = v11[1];
      }
      else
      {
        uint64_t v28 = *((unsigned int *)v11 + 4);
        int v29 = v28 - 1;
        unsigned int v30 = (v28 - 1) & ((v21 >> 4) ^ (v21 >> 9));
        uint64_t v25 = (void *)(v22 + 8 * v30);
        uint64_t v31 = *v25;
        if (*v25 == -1)
        {
          uint64_t v32 = 0;
LABEL_69:
          if (v32) {
            uint64_t v25 = v32;
          }
          if (*v25 != v21) {
            uint64_t v25 = (void *)(v22 + 8 * v28);
          }
        }
        else
        {
          uint64_t v32 = 0;
          int v33 = 1;
          while (v31 != v21)
          {
            if (v32) {
              BOOL v34 = 0;
            }
            else {
              BOOL v34 = v31 == -2;
            }
            if (v34) {
              uint64_t v32 = v25;
            }
            unsigned int v35 = v30 + v33++;
            unsigned int v30 = v35 & v29;
            uint64_t v25 = (void *)(v22 + 8 * (v35 & v29));
            uint64_t v31 = *v25;
            if (*v25 == -1) {
              goto LABEL_69;
            }
          }
        }
      }
      if (v22 == v23) {
        uint64_t v36 = (unsigned int *)v11 + 5;
      }
      else {
        uint64_t v36 = (unsigned int *)(v11 + 2);
      }
      if (v25 != (void *)(v22 + 8 * *v36))
      {
LABEL_81:
        uint64_t v53 = v19 + 1;
        while (v53 != v20)
        {
          unint64_t v54 = *v53++;
          unint64_t v21 = v54;
          if (v54 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            int v19 = v53 - 1;
            goto LABEL_21;
          }
        }
        uint64_t v12 = *(unint64_t ***)(v10 + 6928);
        goto LABEL_92;
      }
      uint64_t v37 = *(void *)(v10 + 6928);
      uint64_t v38 = *(void *)(v37 + 8);
      uint64_t v39 = *(unsigned int *)(v37 + 20);
      if (v38 == *(void *)v37)
      {
        if (v39)
        {
          uint64_t v40 = 0;
          uint64_t v41 = 8 * v39;
          uint64_t v42 = *(unint64_t **)(v37 + 8);
          while (*v42 != v21)
          {
            if (*v42 == -2) {
              uint64_t v40 = v42;
            }
            ++v42;
            v41 -= 8;
            if (!v41)
            {
              if (!v40) {
                goto LABEL_52;
              }
              *uint64_t v40 = v21;
              --*(_DWORD *)(v37 + 24);
              goto LABEL_81;
            }
          }
          goto LABEL_81;
        }
LABEL_52:
        unsigned int v43 = *(_DWORD *)(v37 + 16);
        if (v39 < v43)
        {
          *(_DWORD *)(v37 + 20) = v39 + 1;
          *(void *)(v38 + 8 * v39) = v21;
          goto LABEL_81;
        }
      }
      else
      {
        unsigned int v43 = *(_DWORD *)(v37 + 16);
      }
      if (3 * v43 <= 4 * ((int)v39 - *(_DWORD *)(v37 + 24)))
      {
        if (v43 >= 0x40) {
          v43 *= 2;
        }
        else {
          unsigned int v43 = 128;
        }
      }
      else if (v43 - v39 >= v43 >> 3)
      {
        goto LABEL_57;
      }
      unsigned int v55 = v19;
      unint64_t v81 = v21;
      llvm::SmallPtrSetImplBase::Grow(*(llvm::SmallPtrSetImplBase **)(v10 + 6928), v43);
      unint64_t v21 = v81;
      int v19 = v55;
      unsigned int v43 = *(_DWORD *)(v37 + 16);
      uint64_t v38 = *(void *)(v37 + 8);
LABEL_57:
      unsigned int v44 = v43 - 1;
      unsigned int v45 = (v43 - 1) & ((v21 >> 4) ^ (v21 >> 9));
      int v46 = (unint64_t *)(v38 + 8 * v45);
      unint64_t v47 = *v46;
      if (*v46 == -1)
      {
        unsigned int v48 = 0;
LABEL_74:
        if (v48) {
          uint64_t v52 = v48;
        }
        else {
          uint64_t v52 = v46;
        }
        if (*v52 != v21)
        {
          if (*v52 == -2) {
            --*(_DWORD *)(v37 + 24);
          }
          else {
            ++*(_DWORD *)(v37 + 20);
          }
          *uint64_t v52 = v21;
        }
      }
      else
      {
        unsigned int v48 = 0;
        int v49 = 1;
        while (v47 != v21)
        {
          if (v48) {
            BOOL v50 = 0;
          }
          else {
            BOOL v50 = v47 == -2;
          }
          if (v50) {
            unsigned int v48 = v46;
          }
          unsigned int v51 = v45 + v49++;
          unsigned int v45 = v51 & v44;
          int v46 = (unint64_t *)(v38 + 8 * (v51 & v44));
          unint64_t v47 = *v46;
          if (*v46 == -1) {
            goto LABEL_74;
          }
        }
      }
      goto LABEL_81;
    }
  }
}

unint64_t sub_1CC7FC7D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *a1;
  unsigned int v9 = *(unsigned __int8 *)(*a1 + 8);
  if (v9 <= 0x11)
  {
    if (((1 << v9) & 0xAC7F) != 0)
    {
LABEL_3:
      unint64_t v11 = (unint64_t)(sub_1CB83544C(a2, v8) + 7) >> 3;
      if (v10 == 1) {
      unint64_t v12 = v11 + 1;
      }
      int v13 = sub_1CC7FCF90((uint64_t)a1, a3, a4);
      switch(v13)
      {
        case 2:
          return v12 >> 1 << 32;
        case 1:
          return 0;
        case 0:
          return (v12 >> 1);
      }
      return 0;
    }
    if (((1 << v9) & 0x30000) != 0) {
      goto LABEL_12;
    }
  }
  if ((v9 & 0xFE) == 0x12 || v9 == 21)
  {
LABEL_12:
    int isSizedDerivedType = llvm::Type::isSizedDerivedType(*a1, 0);
    unint64_t result = 0;
    if (!isSizedDerivedType) {
      return result;
    }
    uint64_t v8 = *a1;
    goto LABEL_3;
  }
  return 0;
}

void sub_1CC7FC8E4(char **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a2[1];
  if (v9 == *a2) {
    uint64_t v10 = (unsigned int *)a2 + 5;
  }
  else {
    uint64_t v10 = (unsigned int *)(a2 + 2);
  }
  uint64_t v11 = *v10;
  if (v11)
  {
    uint64_t v12 = 8 * v11;
    for (uint64_t i = (unint64_t *)a2[1]; *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v12 -= 8;
      if (!v12) {
        return;
      }
    }
  }
  else
  {
    uint64_t i = (unint64_t *)a2[1];
  }
  uint64_t v14 = (unint64_t *)(v9 + 8 * v11);
  if (i != v14)
  {
    if (a4) {
      BOOL v15 = a5 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    uint64_t v16 = !v15;
    uint64_t v60 = (unsigned int *)(a3 + 544);
    uint64_t v61 = (unsigned int *)(a3 + 548);
    uint64_t v17 = (uint64_t *)*i;
LABEL_18:
    uint64_t v18 = v16;
    if (v16)
    {
      unint64_t v19 = sub_1CC7FC7D0(v17, a5, a3, a4);
      sub_1CD098D14((llvm::raw_ostream *)a1, (v20 + v19 + HIDWORD(v19)), 0, 0, 0);
      unint64_t v21 = a1[4];
      if (a1[3] == v21)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a1, " ", 1uLL);
      }
      else
      {
        char *v21 = 32;
        ++a1[4];
      }
    }
    llvm::Type::print((llvm::Type *)*v17, (llvm::raw_ostream *)a1, 0, 0);
    uint64_t v22 = a1[4];
    if (v22 >= a1[3])
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a1, 32);
    }
    else
    {
      a1[4] = v22 + 1;
      *uint64_t v22 = 32;
    }
    unsigned int v23 = v17 >> 4;
    if ((*((unsigned char *)v17 + 23) & 0x10) == 0)
    {
      llvm::Value::print((llvm::Value *)v17, (llvm::raw_ostream *)a1, 0);
      goto LABEL_36;
    }
    uint64_t v24 = **(void **)*v17;
    uint64_t v25 = *(void *)(v24 + 152);
    uint64_t v26 = *(unsigned int *)(v24 + 168);
    if (v26)
    {
      LODWORD(v27) = (v26 - 1) & (v23 ^ (v17 >> 9));
      uint64_t v28 = (uint64_t **)(v25 + 16 * v27);
      int v29 = *v28;
      if (*v28 == v17) {
        goto LABEL_32;
      }
      int v30 = 1;
      while (v29 != (uint64_t *)-4096)
      {
        int v31 = v27 + v30++;
        uint64_t v27 = v31 & (v26 - 1);
        int v29 = *(uint64_t **)(v25 + 16 * v27);
        if (v29 == v17)
        {
          uint64_t v28 = (uint64_t **)(v25 + 16 * v27);
          goto LABEL_32;
        }
      }
    }
    uint64_t v28 = (uint64_t **)(v25 + 16 * v26);
LABEL_32:
    uint64_t v32 = (size_t *)v28[1];
    size_t v35 = *v32;
    int v33 = v32 + 2;
    size_t v34 = v35;
    uint64_t v36 = a1[4];
    if (v35 <= a1[3] - v36)
    {
      if (v34)
      {
        memcpy(v36, v33, v34);
        a1[4] += v34;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a1, (const char *)v33, v34);
    }
LABEL_36:
    uint64_t v37 = a1[4];
    if (a1[3] == v37)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a1, "(", 1uLL);
      if (!a3) {
        goto LABEL_60;
      }
    }
    else
    {
      char *v37 = 40;
      ++a1[4];
      if (!a3) {
        goto LABEL_60;
      }
    }
    uint64_t v38 = *(void *)(a3 + 536);
    uint64_t v39 = *(void *)(a3 + 528);
    if (v38 == v39)
    {
      uint64_t v40 = *v61;
      uint64_t v41 = (uint64_t **)(v38 + 8 * v40);
      if (v40)
      {
        uint64_t v42 = 0;
        uint64_t v43 = 8 * v40;
        while (*(uint64_t **)(v38 + v42) != v17)
        {
          v42 += 8;
          if (v43 == v42) {
            goto LABEL_56;
          }
        }
        uint64_t v41 = (uint64_t **)(v38 + v42);
      }
LABEL_56:
      uint64_t v39 = *(void *)(a3 + 536);
    }
    else
    {
      uint64_t v44 = *v60;
      int v45 = v44 - 1;
      unsigned int v46 = (v44 - 1) & (v23 ^ (v17 >> 9));
      uint64_t v41 = (uint64_t **)(v38 + 8 * v46);
      unint64_t v47 = *v41;
      if (*v41 == (uint64_t *)-1)
      {
        unsigned int v48 = 0;
LABEL_79:
        if (v48) {
          uint64_t v41 = v48;
        }
        if (*v41 != v17) {
          uint64_t v41 = (uint64_t **)(v38 + 8 * v44);
        }
      }
      else
      {
        unsigned int v48 = 0;
        int v49 = 1;
        while (v47 != v17)
        {
          if (v48) {
            BOOL v50 = 0;
          }
          else {
            BOOL v50 = v47 == (uint64_t *)-2;
          }
          if (v50) {
            unsigned int v48 = v41;
          }
          unsigned int v51 = v46 + v49++;
          unsigned int v46 = v51 & v45;
          uint64_t v41 = (uint64_t **)(v38 + 8 * (v51 & v45));
          unint64_t v47 = *v41;
          if (*v41 == (uint64_t *)-1) {
            goto LABEL_79;
          }
        }
      }
    }
    BOOL v15 = v38 == v39;
    uint64_t v52 = v61;
    if (!v15) {
      uint64_t v52 = v60;
    }
    if (v41 == (uint64_t **)(v38 + 8 * *v52))
    {
      if (*((unsigned char *)v17 + 16) == 60)
      {
        uint64_t v58 = *(void *)*(v17 - 4);
        int v59 = *(_DWORD *)(v58 + 8);
        if ((v59 & 0xFE) == 0x12) {
          int v59 = *(_DWORD *)(**(void **)(v58 + 16) + 8);
        }
        if ((v59 & 0xFFFFFF00) == 0x4000) {
          char v53 = 117;
        }
        else {
          char v53 = 49;
        }
      }
      else
      {
        char v53 = 49;
      }
LABEL_61:
      unint64_t v54 = a1[4];
      if (v54 >= a1[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a1, v53);
      }
      else
      {
        a1[4] = v54 + 1;
        *unint64_t v54 = v53;
      }
      unsigned int v55 = a1[4];
      if ((unint64_t)(a1[3] - v55) > 2)
      {
        v55[2] = 32;
        *(_WORD *)unsigned int v55 = 11305;
        a1[4] += 3;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a1, "), ", 3uLL);
      }
      uint64_t v56 = i + 1;
      while (v56 != v14)
      {
        unint64_t v57 = *v56++;
        uint64_t v17 = (uint64_t *)v57;
        if (v57 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t i = v56 - 1;
          uint64_t v16 = v18;
          goto LABEL_18;
        }
      }
      return;
    }
LABEL_60:
    char v53 = 48;
    goto LABEL_61;
  }
}

llvm::SmallPtrSetImplBase *sub_1CC7FCD2C(llvm::SmallPtrSetImplBase *this, void *a2, int a3, long long *a4)
{
  uint64_t v8 = (uint64_t *)a2[1];
  uint64_t v9 = (uint64_t *)*a2;
  uint64_t v10 = (unsigned int *)a2 + 5;
  uint64_t v11 = (unsigned int *)(a2 + 2);
  if (v8 == v9) {
    uint64_t v11 = v10;
  }
  uint64_t v12 = *v11;
  int v13 = &v8[v12];
  if (v12)
  {
    uint64_t v14 = 8 * v12;
    while ((unint64_t)*v8 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v8;
      v14 -= 8;
      if (!v14)
      {
        uint64_t v8 = v13;
        break;
      }
    }
  }
  *(void *)this = (char *)this + 32;
  *((void *)this + 1) = (char *)this + 32;
  *((void *)this + 2) = 8;
  *((_DWORD *)this + 6) = 0;
  sub_1CD596984(this, v8, v13, v13);
  *((_DWORD *)this + 24) = a3;
  BOOL v15 = (_OWORD *)((char *)this + 104);
  if (*((char *)a4 + 23) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v15, *(const void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v16 = *a4;
    *((void *)this + 15) = *((void *)a4 + 2);
    *BOOL v15 = v16;
  }
  *((unsigned char *)this + 128) = 0;
  *((void *)this + 17) = (char *)this + 152;
  *((void *)this + 18) = 0x800000000;
  return this;
}

void sub_1CC7FCE14(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *a1;
    uint64_t v7 = 216 * v2;
    do
    {
      uint64_t v8 = a2 + v5;
      uint64_t v9 = v6 + v5;
      uint64_t v10 = (void *)(a2 + v5 + 32);
      *(void *)(a2 + v5) = v10;
      uint64_t v12 = *(void *)(v6 + v5);
      uint64_t v11 = *(void *)(v6 + v5 + 8);
      if (v11 == v12)
      {
        *(void *)(v8 + 8) = v10;
        uint64_t v13 = *(unsigned int *)(v9 + 20);
        if (v13) {
          memmove(v10, *(const void **)(v9 + 8), 8 * v13);
        }
      }
      else
      {
        *(void *)(v8 + 8) = v11;
        *(void *)(v9 + 8) = v12;
      }
      uint64_t v14 = v6 + v5;
      uint64_t v15 = a2 + v5;
      *(void *)(v15 + 16) = *(void *)(v6 + v5 + 16);
      *(_DWORD *)(v15 + 24) = *(_DWORD *)(v6 + v5 + 24);
      *(void *)(v14 + 16) = 8;
      *(_DWORD *)(v14 + 24) = 0;
      *(_DWORD *)(v15 + 96) = *(_DWORD *)(v6 + v5 + 96);
      long long v16 = *(_OWORD *)(v6 + v5 + 104);
      *(void *)(v15 + 120) = *(void *)(v6 + v5 + 120);
      *(_OWORD *)(v15 + 104) = v16;
      *(void *)(v14 + 112) = 0;
      *(void *)(v14 + 120) = 0;
      *(void *)(v14 + 104) = 0;
      char v17 = *(unsigned char *)(v6 + v5 + 128);
      *(void *)(v15 + 136) = a2 + v5 + 152;
      uint64_t v18 = a2 + v5 + 136;
      *(unsigned char *)(v18 - 8) = v17;
      *(void *)(v18 + 8) = 0x800000000;
      if (*(_DWORD *)(v6 + v5 + 144)) {
        sub_1CD41C56C(v18, v14 + 136);
      }
      v5 += 216;
    }
    while (v7 != v5);
    unsigned int v19 = *((_DWORD *)a1 + 2);
    if (v19)
    {
      uint64_t v20 = *a1;
      uint64_t v21 = 216 * v19;
      do
      {
        uint64_t v22 = v20 + v21;
        unsigned int v23 = *(void **)(v20 + v21 - 80);
        if ((void *)(v20 + v21 - 64) != v23) {
          free(v23);
        }
        if (*(char *)(v22 - 89) < 0) {
          operator delete(*(void **)(v20 + v21 - 112));
        }
        uint64_t v24 = *(void **)(v20 + v21 - 208);
        if (v24 != *(void **)(v22 - 216)) {
          free(v24);
        }
        v21 -= 216;
      }
      while (v21);
    }
  }
}

uint64_t sub_1CC7FCF90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = *(void *)(a2 + 536);
  uint64_t v4 = *(void *)(a2 + 528);
  if (v3 == v4)
  {
    uint64_t v5 = *(unsigned int *)(a2 + 548);
    uint64_t v6 = (void *)(v3 + 8 * v5);
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 8 * v5;
      while (*(void *)(v3 + v7) != a1)
      {
        v7 += 8;
        if (v8 == v7) {
          goto LABEL_20;
        }
      }
      uint64_t v6 = (void *)(v3 + v7);
    }
LABEL_20:
    uint64_t v4 = *(void *)(a2 + 536);
  }
  else
  {
    uint64_t v9 = *(unsigned int *)(a2 + 544);
    int v10 = v9 - 1;
    unsigned int v11 = (v9 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    uint64_t v6 = (void *)(v3 + 8 * v11);
    uint64_t v12 = *v6;
    if (*v6 == -1)
    {
      uint64_t v13 = 0;
LABEL_33:
      if (v13) {
        uint64_t v6 = v13;
      }
      if (*v6 != a1) {
        uint64_t v6 = (void *)(v3 + 8 * v9);
      }
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      while (v12 != a1)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -2;
        }
        if (v15) {
          uint64_t v13 = v6;
        }
        unsigned int v16 = v11 + v14++;
        unsigned int v11 = v16 & v10;
        uint64_t v6 = (void *)(v3 + 8 * (v16 & v10));
        uint64_t v12 = *v6;
        if (*v6 == -1) {
          goto LABEL_33;
        }
      }
    }
  }
  BOOL v15 = v3 == v4;
  uint64_t v17 = 544;
  if (v15) {
    uint64_t v17 = 548;
  }
  if (v6 != (void *)(v3 + 8 * *(unsigned int *)(a2 + v17))) {
    return 0;
  }
  if (a3)
  {
    uint64_t v19 = *(void *)(a3 + 536);
    uint64_t v20 = *(void *)(a3 + 528);
    if (v19 == v20)
    {
      uint64_t v21 = *(unsigned int *)(a3 + 548);
      uint64_t v22 = (void *)(v19 + 8 * v21);
      if (v21)
      {
        uint64_t v23 = 0;
        uint64_t v24 = 8 * v21;
        while (*(void *)(v19 + v23) != a1)
        {
          v23 += 8;
          if (v24 == v23) {
            goto LABEL_49;
          }
        }
        uint64_t v22 = (void *)(v19 + v23);
      }
LABEL_49:
      uint64_t v20 = *(void *)(a3 + 536);
    }
    else
    {
      uint64_t v25 = *(unsigned int *)(a3 + 544);
      int v26 = v25 - 1;
      unsigned int v27 = (v25 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      uint64_t v22 = (void *)(v19 + 8 * v27);
      uint64_t v28 = *v22;
      if (*v22 == -1)
      {
        int v29 = 0;
LABEL_56:
        if (v29) {
          uint64_t v22 = v29;
        }
        if (*v22 != a1) {
          uint64_t v22 = (void *)(v19 + 8 * v25);
        }
      }
      else
      {
        int v29 = 0;
        int v30 = 1;
        while (v28 != a1)
        {
          if (v29) {
            BOOL v31 = 0;
          }
          else {
            BOOL v31 = v28 == -2;
          }
          if (v31) {
            int v29 = v22;
          }
          unsigned int v32 = v27 + v30++;
          unsigned int v27 = v32 & v26;
          uint64_t v22 = (void *)(v19 + 8 * (v32 & v26));
          uint64_t v28 = *v22;
          if (*v22 == -1) {
            goto LABEL_56;
          }
        }
      }
    }
    BOOL v15 = v19 == v20;
    uint64_t v33 = 544;
    if (v15) {
      uint64_t v33 = 548;
    }
    if (v22 == (void *)(v19 + 8 * *(unsigned int *)(a3 + v33))) {
      return 1;
    }
  }
  return 2;
}

void sub_1CC7FD188(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v491[8] = *MEMORY[0x1E4F143B8];
LABEL_2:
  unint64_t v8 = a2;
  uint64_t v9 = (double *)(a2 - 216);
  int v460 = (void **)(a2 - 112);
  unint64_t v10 = a1;
  while (1)
  {
    a1 = v10;
    uint64_t v11 = v8 - v10;
    unint64_t v12 = 0x84BDA12F684BDA13 * ((uint64_t)(v8 - v10) >> 3);
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unsigned int v365 = *(_DWORD *)(a2 - 120);
          unsigned int v366 = *(_DWORD *)(a1 + 96);
          if (v365 == v366)
          {
            unsigned int v367 = *(_DWORD *)(a2 - 196) - *(_DWORD *)(a2 - 192);
            unsigned int v368 = *(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 24);
            if (v367 == v368)
            {
              char v369 = *(unsigned char *)(a1 + 127);
              if (v369 >= 0) {
                uint64_t v370 = (const void *)(a1 + 104);
              }
              else {
                uint64_t v370 = *(const void **)(a1 + 104);
              }
              if (v369 >= 0) {
                size_t v371 = v369 & 0x7F;
              }
              else {
                size_t v371 = *(void *)(a1 + 112);
              }
              int v372 = *(char *)(a2 - 89);
              if (v372 >= 0) {
                size_t v373 = *(unsigned __int8 *)(a2 - 89);
              }
              else {
                size_t v373 = *(void *)(a2 - 104);
              }
              if (v372 >= 0) {
                unsigned int v374 = (const void *)(a2 - 112);
              }
              else {
                unsigned int v374 = *(const void **)(a2 - 112);
              }
              if (v371 >= v373) {
                size_t v375 = v373;
              }
              else {
                size_t v375 = v371;
              }
              int v376 = memcmp(v374, v370, v375);
              BOOL v377 = v373 < v371;
              if (v376) {
                BOOL v377 = v376 < 0;
              }
              if (!v377) {
                return;
              }
            }
            else if (v367 <= v368)
            {
              return;
            }
          }
          else if (v365 >= v366)
          {
            return;
          }
          BOOL v480 = v484;
          uint64_t v453 = *(void *)a1;
          if (*(void *)(a1 + 8) == *(void *)a1)
          {
            int v481 = v484;
            uint64_t v454 = *(unsigned int *)(a1 + 20);
            uint64_t v455 = a2;
            if (v454)
            {
              memmove(v484, *(const void **)(a1 + 8), 8 * v454);
              unsigned int v366 = *(_DWORD *)(a1 + 96);
            }
          }
          else
          {
            int v481 = *(unsigned char **)(a1 + 8);
            *(void *)(a1 + 8) = v453;
            uint64_t v455 = a2;
          }
          uint64_t v482 = *(void *)(a1 + 16);
          int v483 = *(_DWORD *)(a1 + 24);
          *(void *)(a1 + 16) = 8;
          *(_DWORD *)(a1 + 24) = 0;
          unsigned int v485 = v366;
          uint64_t v456 = *(void *)(a1 + 120);
          long long __p = *(_OWORD *)(a1 + 104);
          uint64_t v487 = v456;
          *(void *)(a1 + 112) = 0;
          *(void *)(a1 + 120) = 0;
          *(void *)(a1 + 104) = 0;
          char v488 = *(unsigned char *)(a1 + 128);
          uint64_t v489 = v491;
          uint64_t v490 = 0x800000000;
          if (*(_DWORD *)(a1 + 144)) {
            sub_1CD41C56C((uint64_t)&v489, a1 + 136);
          }
          if (v9 != (double *)a1) {
            llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, v9);
          }
          __int16 v457 = (void **)(a1 + 104);
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(v455 - 120);
          if (*(char *)(a1 + 127) < 0) {
            operator delete(*v457);
          }
          long long v458 = *(_OWORD *)(v455 - 112);
          *(void *)(a1 + 120) = *(void *)(v455 - 96);
          *(_OWORD *)__int16 v457 = v458;
          *(unsigned char *)(v455 - 89) = 0;
          *(unsigned char *)(v455 - 112) = 0;
          *(unsigned char *)(a1 + 128) = *(unsigned char *)(v455 - 88);
          sub_1CD41C56C(a1 + 136, v455 - 80);
          if (&v480 != (unsigned char **)v9) {
            llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)v9, 8, (double *)&v480);
          }
          *(_DWORD *)(v455 - 120) = v485;
          if (*(char *)(v455 - 89) < 0) {
            operator delete(*v460);
          }
          long long v459 = __p;
          *(void *)(a2 - 96) = v487;
          *(_OWORD *)int v460 = v459;
          HIBYTE(v487) = 0;
          LOBYTE(__p) = 0;
          *(unsigned char *)(v455 - 88) = v488;
          sub_1CD41C56C(v455 - 80, (uint64_t)&v489);
          if (v489 != v491) {
            free(v489);
          }
          if (SHIBYTE(v487) < 0) {
            operator delete((void *)__p);
          }
          if (v481 != v480) {
            free(v481);
          }
          return;
        case 3uLL:
          sub_1CC8002C4(a1, a1 + 216, (uint64_t)v9);
          return;
        case 4uLL:
          sub_1CC801540(a1, a1 + 216, a1 + 432, (uint64_t)v9);
          return;
        case 5uLL:
          sub_1CC7FF948(a1, a1 + 216, a1 + 432, a1 + 648, (uint64_t)v9);
          return;
        default:
          JUMPOUT(0);
      }
    }
    if (v11 <= 5183) {
      break;
    }
    if (!a3)
    {
      if (a1 == v8) {
        return;
      }
      int64_t v204 = (v12 - 2) >> 1;
      int64_t v205 = v204;
      while (1)
      {
        int64_t v206 = v205;
        if (v204 >= v205)
        {
          uint64_t v207 = (2 * v205) | 1;
          uint64_t v208 = a1 + 216 * v207;
          if (2 * v205 + 2 < (uint64_t)v12)
          {
            unsigned int v209 = *(_DWORD *)(a1 + 216 * v207 + 96);
            unsigned int v210 = *(_DWORD *)(v208 + 312);
            if (v209 == v210)
            {
              unsigned int v211 = *(_DWORD *)(v208 + 20) - *(_DWORD *)(v208 + 24);
              unsigned int v212 = *(_DWORD *)(v208 + 236) - *(_DWORD *)(v208 + 240);
              if (v211 == v212)
              {
                uint64_t v213 = a1 + 216 * v207;
                char v214 = *(unsigned char *)(v208 + 343);
                if (v214 >= 0) {
                  uint64_t v215 = (const void *)(v208 + 320);
                }
                else {
                  uint64_t v215 = *(const void **)(v208 + 320);
                }
                if (v214 >= 0) {
                  size_t v216 = v214 & 0x7F;
                }
                else {
                  size_t v216 = *(void *)(v208 + 328);
                }
                int v217 = *(char *)(v208 + 127);
                unsigned int v219 = *(const void **)(v213 + 104);
                size_t v220 = *(void *)(v213 + 112);
                unsigned int v218 = (const void *)(v213 + 104);
                if (v217 >= 0) {
                  size_t v221 = *(unsigned __int8 *)(v208 + 127);
                }
                else {
                  size_t v221 = v220;
                }
                if (v217 >= 0) {
                  BOOL v222 = v218;
                }
                else {
                  BOOL v222 = v219;
                }
                if (v216 >= v221) {
                  size_t v223 = v221;
                }
                else {
                  size_t v223 = v216;
                }
                int v224 = memcmp(v222, v215, v223);
                BOOL v225 = v221 < v216;
                if (v224) {
                  BOOL v225 = v224 < 0;
                }
              }
              else
              {
                BOOL v225 = v211 > v212;
              }
            }
            else
            {
              BOOL v225 = v209 < v210;
            }
            v208 += 216 * v225;
            if (v225) {
              uint64_t v207 = 2 * v206 + 2;
            }
          }
          uint64_t v226 = a1 + 216 * v206;
          unsigned int v227 = *(_DWORD *)(v208 + 96);
          unsigned int v228 = *(_DWORD *)(v226 + 96);
          if (v227 == v228)
          {
            unsigned int v229 = *(_DWORD *)(v208 + 20) - *(_DWORD *)(v208 + 24);
            unsigned int v230 = *(_DWORD *)(v226 + 20) - *(_DWORD *)(v226 + 24);
            if (v229 == v230)
            {
              uint64_t v231 = a1 + 216 * v206;
              char v232 = *(unsigned char *)(v226 + 127);
              int v233 = v232;
              BOOL v236 = *(const void **)(v231 + 104);
              unsigned int v234 = (void *)(v231 + 104);
              int v235 = v236;
              if (v232 >= 0) {
                int v237 = v234;
              }
              else {
                int v237 = v235;
              }
              size_t v238 = v234[1];
              size_t v239 = v232 & 0x7F;
              if (v233 >= 0) {
                size_t v240 = v239;
              }
              else {
                size_t v240 = v238;
              }
              int v241 = *(char *)(v208 + 127);
              if (v241 >= 0) {
                size_t v242 = *(unsigned __int8 *)(v208 + 127);
              }
              else {
                size_t v242 = *(void *)(v208 + 112);
              }
              if (v241 >= 0) {
                uint64_t v243 = (const void *)(v208 + 104);
              }
              else {
                uint64_t v243 = *(const void **)(v208 + 104);
              }
              if (v240 >= v242) {
                size_t v244 = v242;
              }
              else {
                size_t v244 = v240;
              }
              int v245 = memcmp(v243, v237, v244);
              BOOL v246 = v242 < v240;
              if (v245) {
                BOOL v246 = v245 < 0;
              }
              if (!v246)
              {
LABEL_480:
                BOOL v480 = v484;
                uint64_t v248 = *(void *)v226;
                uint64_t v247 = *(const void **)(v226 + 8);
                if (v247 == *(const void **)v226)
                {
                  int v481 = v484;
                  uint64_t v284 = *(unsigned int *)(v226 + 20);
                  if (v284) {
                    memmove(v484, v247, 8 * v284);
                  }
                }
                else
                {
                  int v481 = *(unsigned char **)(v226 + 8);
                  *(void *)(v226 + 8) = v248;
                  LODWORD(v284) = *(_DWORD *)(v226 + 20);
                }
                LODWORD(v482) = *(_DWORD *)(v226 + 16);
                HIDWORD(v482) = v284;
                int v483 = *(_DWORD *)(v226 + 24);
                *(void *)(v226 + 16) = 8;
                *(_DWORD *)(v226 + 24) = 0;
                unsigned int v485 = v228;
                uint64_t v249 = a1 + 216 * v206;
                long long v250 = *(_OWORD *)(v249 + 104);
                uint64_t v487 = *(void *)(v249 + 120);
                long long __p = v250;
                *(void *)(v249 + 112) = 0;
                *(void *)(v249 + 120) = 0;
                *(void *)(v249 + 104) = 0;
                char v488 = *(unsigned char *)(v249 + 128);
                uint64_t v489 = v491;
                uint64_t v490 = 0x800000000;
                if (*(_DWORD *)(v249 + 144)) {
                  sub_1CD41C56C((uint64_t)&v489, a1 + 216 * v206 + 136);
                }
                while (1)
                {
                  uint64_t v251 = v208;
                  if (v208 != v226) {
                    llvm::SmallPtrSetImplBase::MoveFrom(v226, 8, (double *)v208);
                  }
                  *(_DWORD *)(v226 + 96) = *(_DWORD *)(v208 + 96);
                  int v252 = (void **)(v226 + 104);
                  if (*(char *)(v226 + 127) < 0) {
                    operator delete(*v252);
                  }
                  long long v253 = *(_OWORD *)(v251 + 104);
                  *(void *)(v226 + 120) = *(void *)(v251 + 120);
                  *(_OWORD *)int v252 = v253;
                  *(unsigned char *)(v251 + 127) = 0;
                  *(unsigned char *)(v251 + 104) = 0;
                  *(unsigned char *)(v226 + 128) = *(unsigned char *)(v251 + 128);
                  sub_1CD41C56C(v226 + 136, v251 + 136);
                  if (v204 < v207) {
                    break;
                  }
                  uint64_t v254 = (2 * v207) | 1;
                  uint64_t v208 = a1 + 216 * v254;
                  uint64_t v207 = 2 * v207 + 2;
                  if (v207 < (uint64_t)v12)
                  {
                    unsigned int v255 = *(_DWORD *)(a1 + 216 * v254 + 96);
                    unsigned int v256 = *(_DWORD *)(v208 + 312);
                    if (v255 == v256)
                    {
                      unsigned int v257 = *(_DWORD *)(v208 + 20) - *(_DWORD *)(v208 + 24);
                      unsigned int v258 = *(_DWORD *)(v208 + 236) - *(_DWORD *)(v208 + 240);
                      if (v257 == v258)
                      {
                        uint64_t v259 = a1 + 216 * v254;
                        char v260 = *(unsigned char *)(v208 + 343);
                        if (v260 >= 0) {
                          int v261 = (const void *)(v208 + 320);
                        }
                        else {
                          int v261 = *(const void **)(v208 + 320);
                        }
                        if (v260 >= 0) {
                          size_t v262 = v260 & 0x7F;
                        }
                        else {
                          size_t v262 = *(void *)(v208 + 328);
                        }
                        int v263 = *(char *)(v208 + 127);
                        BOOL v265 = *(const void **)(v259 + 104);
                        size_t v266 = *(void *)(v259 + 112);
                        unsigned int v264 = (const void *)(v259 + 104);
                        if (v263 >= 0) {
                          size_t v267 = *(unsigned __int8 *)(v208 + 127);
                        }
                        else {
                          size_t v267 = v266;
                        }
                        if (v263 >= 0) {
                          unsigned int v268 = v264;
                        }
                        else {
                          unsigned int v268 = v265;
                        }
                        if (v262 >= v267) {
                          size_t v269 = v267;
                        }
                        else {
                          size_t v269 = v262;
                        }
                        int v270 = memcmp(v268, v261, v269);
                        BOOL v4 = v267 >= v262;
                        int64_t v204 = (v12 - 2) >> 1;
                        BOOL v271 = !v4;
                        if (v270) {
                          BOOL v271 = v270 < 0;
                        }
                      }
                      else
                      {
                        BOOL v271 = v257 > v258;
                      }
                    }
                    else
                    {
                      BOOL v271 = v255 < v256;
                    }
                    v208 += 216 * v271;
                    if (!v271) {
                      uint64_t v207 = v254;
                    }
                  }
                  else
                  {
                    uint64_t v207 = v254;
                  }
                  unsigned int v272 = *(_DWORD *)(v208 + 96);
                  if (v272 == v485)
                  {
                    unsigned int v273 = *(_DWORD *)(v208 + 20) - *(_DWORD *)(v208 + 24);
                    if (v273 == HIDWORD(v482) - v483)
                    {
                      if (v487 >= 0) {
                        p_p = &__p;
                      }
                      else {
                        p_p = (long long *)__p;
                      }
                      if (v487 >= 0) {
                        size_t v275 = HIBYTE(v487) & 0x7F;
                      }
                      else {
                        size_t v275 = *((void *)&__p + 1);
                      }
                      int v276 = *(char *)(v208 + 127);
                      if (v276 >= 0) {
                        size_t v277 = *(unsigned __int8 *)(v208 + 127);
                      }
                      else {
                        size_t v277 = *(void *)(v208 + 112);
                      }
                      if (v276 >= 0) {
                        int v278 = (const void *)(v208 + 104);
                      }
                      else {
                        int v278 = *(const void **)(v208 + 104);
                      }
                      if (v275 >= v277) {
                        size_t v279 = v277;
                      }
                      else {
                        size_t v279 = v275;
                      }
                      int v280 = memcmp(v278, p_p, v279);
                      BOOL v4 = v277 >= v275;
                      int64_t v204 = (v12 - 2) >> 1;
                      BOOL v281 = !v4;
                      if (v280) {
                        BOOL v281 = v280 < 0;
                      }
                      uint64_t v226 = v251;
                      if (v281) {
                        break;
                      }
                    }
                    else
                    {
                      uint64_t v226 = v251;
                      if (v273 > HIDWORD(v482) - v483) {
                        break;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v226 = v251;
                    if (v272 < v485) {
                      break;
                    }
                  }
                }
                if (&v480 != (unsigned char **)v251) {
                  llvm::SmallPtrSetImplBase::MoveFrom(v251, 8, (double *)&v480);
                }
                size_t v282 = (void **)(v251 + 104);
                *(_DWORD *)(v251 + 96) = v485;
                if (*(char *)(v251 + 127) < 0) {
                  operator delete(*v282);
                }
                long long v283 = __p;
                *(void *)(v251 + 120) = v487;
                *(_OWORD *)size_t v282 = v283;
                HIBYTE(v487) = 0;
                LOBYTE(__p) = 0;
                *(unsigned char *)(v251 + 128) = v488;
                sub_1CD41C56C(v251 + 136, (uint64_t)&v489);
                if (v489 != v491) {
                  free(v489);
                }
                if (SHIBYTE(v487) < 0) {
                  operator delete((void *)__p);
                }
                if (v481 != v480) {
                  free(v481);
                }
              }
            }
            else if (v229 <= v230)
            {
              goto LABEL_480;
            }
          }
          else if (v227 >= v228)
          {
            goto LABEL_480;
          }
        }
        int64_t v205 = v206 - 1;
        if (!v206)
        {
          uint64_t v467 = (long long *)(a1 + 104);
          while (1)
          {
            BOOL v468 = v472;
            uint64_t v285 = *(void *)a1;
            if (*(void *)(a1 + 8) == *(void *)a1)
            {
              uint64_t v469 = v472;
              uint64_t v286 = *(unsigned int *)(a1 + 20);
              if (v286) {
                memmove(v472, *(const void **)(a1 + 8), 8 * v286);
              }
            }
            else
            {
              uint64_t v469 = *(unsigned char **)(a1 + 8);
              *(void *)(a1 + 8) = v285;
            }
            uint64_t v470 = *(void *)(a1 + 16);
            int v471 = *(_DWORD *)(a1 + 24);
            *(void *)(a1 + 16) = 8;
            *(_DWORD *)(a1 + 24) = 0;
            unsigned int v473 = *(_DWORD *)(a1 + 96);
            uint64_t v287 = *(void *)(a1 + 120);
            long long v474 = *v467;
            uint64_t v475 = v287;
            *(void *)(a1 + 112) = 0;
            *(void *)(a1 + 120) = 0;
            *(void *)uint64_t v467 = 0;
            char v476 = *(unsigned char *)(a1 + 128);
            int v477 = v479;
            uint64_t v478 = 0x800000000;
            if (*(_DWORD *)(a1 + 144)) {
              sub_1CD41C56C((uint64_t)&v477, a1 + 136);
            }
            uint64_t v288 = 0;
            uint64_t v289 = a1;
            do
            {
              uint64_t v290 = v288 + 1;
              uint64_t v291 = v289 + 216 * (v288 + 1);
              uint64_t v292 = 2 * v288;
              uint64_t v288 = (2 * v288) | 1;
              uint64_t v293 = v292 + 2;
              if (v292 + 2 < (uint64_t)v12)
              {
                unsigned int v294 = *(_DWORD *)(v289 + 216 * v290 + 96);
                unsigned int v295 = *(_DWORD *)(v291 + 312);
                if (v294 == v295)
                {
                  unsigned int v296 = *(_DWORD *)(v291 + 20) - *(_DWORD *)(v291 + 24);
                  unsigned int v297 = *(_DWORD *)(v291 + 236) - *(_DWORD *)(v291 + 240);
                  if (v296 == v297)
                  {
                    uint64_t v298 = v289 + 216 * v290;
                    char v299 = *(unsigned char *)(v291 + 343);
                    if (v299 >= 0) {
                      uint64_t v300 = (const void *)(v291 + 320);
                    }
                    else {
                      uint64_t v300 = *(const void **)(v291 + 320);
                    }
                    if (v299 >= 0) {
                      size_t v301 = v299 & 0x7F;
                    }
                    else {
                      size_t v301 = *(void *)(v291 + 328);
                    }
                    int v302 = *(char *)(v291 + 127);
                    uint64_t v304 = *(const void **)(v298 + 104);
                    size_t v305 = *(void *)(v298 + 112);
                    uint64_t v303 = (const void *)(v298 + 104);
                    if (v302 >= 0) {
                      size_t v306 = *(unsigned __int8 *)(v291 + 127);
                    }
                    else {
                      size_t v306 = v305;
                    }
                    if (v302 >= 0) {
                      int v307 = v303;
                    }
                    else {
                      int v307 = v304;
                    }
                    if (v301 >= v306) {
                      size_t v308 = v306;
                    }
                    else {
                      size_t v308 = v301;
                    }
                    int v309 = memcmp(v307, v300, v308);
                    BOOL v310 = v306 < v301;
                    if (v309) {
                      BOOL v310 = v309 < 0;
                    }
                  }
                  else
                  {
                    BOOL v310 = v296 > v297;
                  }
                }
                else
                {
                  BOOL v310 = v294 < v295;
                }
                v291 += 216 * v310;
                if (v310) {
                  uint64_t v288 = v293;
                }
              }
              if (v291 != v289) {
                llvm::SmallPtrSetImplBase::MoveFrom(v289, 8, (double *)v291);
              }
              *(_DWORD *)(v289 + 96) = *(_DWORD *)(v291 + 96);
              uint64_t v311 = (void **)(v289 + 104);
              if (*(char *)(v289 + 127) < 0) {
                operator delete(*v311);
              }
              long long v312 = *(_OWORD *)(v291 + 104);
              *(void *)(v289 + 120) = *(void *)(v291 + 120);
              *(_OWORD *)uint64_t v311 = v312;
              *(unsigned char *)(v291 + 127) = 0;
              *(unsigned char *)(v291 + 104) = 0;
              *(unsigned char *)(v289 + 128) = *(unsigned char *)(v291 + 128);
              sub_1CD41C56C(v289 + 136, v291 + 136);
              uint64_t v289 = v291;
            }
            while (v288 <= (uint64_t)((v12 - 2) >> 1));
            uint64_t v313 = (void **)(v291 + 104);
            std::string v314 = (void *)(a2 - 216);
            if (v291 == a2 - 216)
            {
              if (&v468 != (unsigned char **)v291) {
                llvm::SmallPtrSetImplBase::MoveFrom(v291, 8, (double *)&v468);
              }
              *(_DWORD *)(v291 + 96) = v473;
              if (*(char *)(v291 + 127) < 0) {
                operator delete(*v313);
              }
              long long v315 = v474;
              *(void *)(v291 + 120) = v475;
              *(_OWORD *)uint64_t v313 = v315;
              HIBYTE(v475) = 0;
              LOBYTE(v474) = 0;
              *(unsigned char *)(v291 + 128) = v476;
              sub_1CD41C56C(v291 + 136, (uint64_t)&v477);
            }
            else
            {
              llvm::SmallPtrSetImplBase::MoveFrom(v291, 8, (double *)(a2 - 216));
              *(_DWORD *)(v291 + 96) = *(_DWORD *)(a2 - 120);
              if (*(char *)(v291 + 127) < 0) {
                operator delete(*v313);
              }
              long long v316 = *(_OWORD *)(a2 - 112);
              *(void *)(v291 + 120) = *(void *)(a2 - 96);
              *(_OWORD *)uint64_t v313 = v316;
              *(unsigned char *)(a2 - 89) = 0;
              *(unsigned char *)(a2 - 112) = 0;
              *(unsigned char *)(v291 + 128) = *(unsigned char *)(a2 - 88);
              sub_1CD41C56C(v291 + 136, a2 - 80);
              if (&v468 != v314) {
                llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)v314, 8, (double *)&v468);
              }
              size_t v317 = (void **)(a2 - 112);
              *(_DWORD *)(a2 - 120) = v473;
              if (*(char *)(a2 - 89) < 0) {
                operator delete(*v317);
              }
              long long v318 = v474;
              *(void *)(a2 - 96) = v475;
              *(_OWORD *)size_t v317 = v318;
              HIBYTE(v475) = 0;
              LOBYTE(v474) = 0;
              *(unsigned char *)(a2 - 88) = v476;
              sub_1CD41C56C(a2 - 80, (uint64_t)&v477);
              uint64_t v319 = v291 + 216 - a1;
              if (v319 >= 217)
              {
                unint64_t v320 = (v319 / 0xD8uLL - 2) >> 1;
                uint64_t v321 = a1 + 216 * v320;
                unsigned int v322 = *(_DWORD *)(v321 + 96);
                unsigned int v323 = *(_DWORD *)(v291 + 96);
                if (v322 == v323)
                {
                  unsigned int v324 = *(_DWORD *)(v321 + 20) - *(_DWORD *)(v321 + 24);
                  unsigned int v325 = *(_DWORD *)(v291 + 20) - *(_DWORD *)(v291 + 24);
                  if (v324 == v325)
                  {
                    unint64_t v326 = a1 + 216 * v320;
                    char v327 = *(unsigned char *)(v291 + 127);
                    BOOL v328 = v327 < 0;
                    unsigned int v462 = *(_DWORD *)(v291 + 96);
                    if (v327 >= 0) {
                      uint64_t v329 = (const void *)(v291 + 104);
                    }
                    else {
                      uint64_t v329 = *(const void **)(v291 + 104);
                    }
                    size_t v330 = v327 & 0x7F;
                    unint64_t v466 = v320;
                    if (v328) {
                      size_t v331 = *(void *)(v291 + 112);
                    }
                    else {
                      size_t v331 = v330;
                    }
                    int v332 = *(char *)(v321 + 127);
                    uint64_t v334 = *(const void **)(v326 + 104);
                    size_t v335 = *(void *)(v326 + 112);
                    int v333 = (const void *)(v326 + 104);
                    if (v332 >= 0) {
                      size_t v336 = *(unsigned __int8 *)(v321 + 127);
                    }
                    else {
                      size_t v336 = v335;
                    }
                    if (v332 >= 0) {
                      size_t v337 = v333;
                    }
                    else {
                      size_t v337 = v334;
                    }
                    if (v331 >= v336) {
                      size_t v338 = v336;
                    }
                    else {
                      size_t v338 = v331;
                    }
                    int v339 = memcmp(v337, v329, v338);
                    unsigned int v323 = v462;
                    BOOL v4 = v336 >= v331;
                    unint64_t v320 = v466;
                    BOOL v340 = !v4;
                    if (v339) {
                      BOOL v340 = v339 < 0;
                    }
                    if (v340)
                    {
LABEL_644:
                      BOOL v480 = v484;
                      double v342 = *(double *)v291;
                      if (*(void *)(v291 + 8) == *(void *)v291)
                      {
                        int v481 = v484;
                        uint64_t v343 = *(unsigned int *)(v291 + 20);
                        if (v343)
                        {
                          memmove(v484, *(const void **)(v291 + 8), 8 * v343);
                          unsigned int v323 = *(_DWORD *)(v291 + 96);
                        }
                      }
                      else
                      {
                        int v481 = *(unsigned char **)(v291 + 8);
                        *(double *)(v291 + 8) = v342;
                      }
                      uint64_t v482 = *(void *)(v291 + 16);
                      int v483 = *(_DWORD *)(v291 + 24);
                      *(void *)(v291 + 16) = 8;
                      *(_DWORD *)(v291 + 24) = 0;
                      unsigned int v485 = v323;
                      uint64_t v344 = *(void *)(v291 + 120);
                      long long __p = *(_OWORD *)v313;
                      uint64_t v487 = v344;
                      *(void *)(v291 + 112) = 0;
                      *(void *)(v291 + 120) = 0;
                      void *v313 = 0;
                      char v488 = *(unsigned char *)(v291 + 128);
                      uint64_t v489 = v491;
                      uint64_t v490 = 0x800000000;
                      if (*(_DWORD *)(v291 + 144)) {
                        sub_1CD41C56C((uint64_t)&v489, v291 + 136);
                      }
                      while (1)
                      {
                        uint64_t v345 = v321;
                        if (v321 != v291) {
                          llvm::SmallPtrSetImplBase::MoveFrom(v291, 8, (double *)v321);
                        }
                        *(_DWORD *)(v291 + 96) = *(_DWORD *)(v321 + 96);
                        int v346 = (void **)(v291 + 104);
                        if (*(char *)(v291 + 127) < 0) {
                          operator delete(*v346);
                        }
                        long long v347 = *(_OWORD *)(v321 + 104);
                        *(void *)(v291 + 120) = *(void *)(v321 + 120);
                        *(_OWORD *)int v346 = v347;
                        *(unsigned char *)(v321 + 127) = 0;
                        *(unsigned char *)(v321 + 104) = 0;
                        *(unsigned char *)(v291 + 128) = *(unsigned char *)(v321 + 128);
                        sub_1CD41C56C(v291 + 136, v321 + 136);
                        if (!v320) {
                          break;
                        }
                        unint64_t v320 = (v320 - 1) >> 1;
                        uint64_t v321 = a1 + 216 * v320;
                        unsigned int v348 = *(_DWORD *)(v321 + 96);
                        if (v348 == v485)
                        {
                          unsigned int v349 = *(_DWORD *)(v321 + 20) - *(_DWORD *)(v321 + 24);
                          if (v349 == HIDWORD(v482) - v483)
                          {
                            unint64_t v350 = a1 + 216 * v320;
                            if (v487 >= 0) {
                              size_t v351 = &__p;
                            }
                            else {
                              size_t v351 = (long long *)__p;
                            }
                            unint64_t v352 = v320;
                            if (v487 >= 0) {
                              size_t v353 = HIBYTE(v487) & 0x7F;
                            }
                            else {
                              size_t v353 = *((void *)&__p + 1);
                            }
                            int v354 = *(char *)(v321 + 127);
                            int v356 = *(const void **)(v350 + 104);
                            size_t v357 = *(void *)(v350 + 112);
                            char v355 = (const void *)(v350 + 104);
                            if (v354 >= 0) {
                              size_t v358 = *(unsigned __int8 *)(v321 + 127);
                            }
                            else {
                              size_t v358 = v357;
                            }
                            if (v354 >= 0) {
                              uint64_t v359 = v355;
                            }
                            else {
                              uint64_t v359 = v356;
                            }
                            if (v353 >= v358) {
                              size_t v360 = v358;
                            }
                            else {
                              size_t v360 = v353;
                            }
                            int v361 = memcmp(v359, v351, v360);
                            BOOL v4 = v358 >= v353;
                            unint64_t v320 = v352;
                            BOOL v362 = !v4;
                            if (v361) {
                              BOOL v362 = v361 < 0;
                            }
                            uint64_t v291 = v345;
                            if (!v362) {
                              break;
                            }
                          }
                          else
                          {
                            uint64_t v291 = v345;
                            if (v349 <= HIDWORD(v482) - v483) {
                              break;
                            }
                          }
                        }
                        else
                        {
                          uint64_t v291 = v345;
                          if (v348 >= v485) {
                            break;
                          }
                        }
                      }
                      if (&v480 != (unsigned char **)v345) {
                        llvm::SmallPtrSetImplBase::MoveFrom(v345, 8, (double *)&v480);
                      }
                      int v363 = (void **)(v345 + 104);
                      *(_DWORD *)(v345 + 96) = v485;
                      if (*(char *)(v345 + 127) < 0) {
                        operator delete(*v363);
                      }
                      long long v364 = __p;
                      *(void *)(v345 + 120) = v487;
                      *(_OWORD *)int v363 = v364;
                      HIBYTE(v487) = 0;
                      LOBYTE(__p) = 0;
                      *(unsigned char *)(v345 + 128) = v488;
                      sub_1CD41C56C(v345 + 136, (uint64_t)&v489);
                      if (v489 != v491) {
                        free(v489);
                      }
                      if (SHIBYTE(v487) < 0) {
                        operator delete((void *)__p);
                      }
                      if (v481 != v480) {
                        free(v481);
                      }
                    }
                  }
                  else if (v324 > v325)
                  {
                    goto LABEL_644;
                  }
                }
                else if (v322 < v323)
                {
                  goto LABEL_644;
                }
              }
            }
            if (v477 != v479) {
              free(v477);
            }
            if (SHIBYTE(v475) < 0) {
              operator delete((void *)v474);
            }
            if (v469 != v468) {
              free(v469);
            }
            a2 = (uint64_t)v314;
            if ((uint64_t)v12-- <= 2) {
              return;
            }
          }
        }
      }
    }
    unint64_t v13 = v12 >> 1;
    unint64_t v14 = a1 + 216 * (v12 >> 1);
    if ((unint64_t)v11 >= 0x6C01)
    {
      uint64_t v15 = (uint64_t)v9;
      uint64_t v16 = a3;
      sub_1CC8002C4(a1, a1 + 216 * (v12 >> 1), v15);
      sub_1CC8002C4(a1 + 216, 216 * v13 + a1 - 216, a2 - 432);
      sub_1CC8002C4(a1 + 432, a1 + 216 + 216 * v13, a2 - 648);
      sub_1CC8002C4(216 * v13 + a1 - 216, a1 + 216 * (v12 >> 1), a1 + 216 + 216 * v13);
      BOOL v480 = v484;
      uint64_t v17 = *(void *)a1;
      if (*(void *)(a1 + 8) == *(void *)a1)
      {
        int v481 = v484;
        uint64_t v18 = *(unsigned int *)(a1 + 20);
        if (v18) {
          memmove(v484, *(const void **)(a1 + 8), 8 * v18);
        }
      }
      else
      {
        int v481 = *(unsigned char **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      uint64_t v482 = *(void *)(a1 + 16);
      int v483 = *(_DWORD *)(a1 + 24);
      *(void *)(a1 + 16) = 8;
      *(_DWORD *)(a1 + 24) = 0;
      unsigned int v485 = *(_DWORD *)(a1 + 96);
      uint64_t v19 = *(void *)(a1 + 120);
      long long __p = *(_OWORD *)(a1 + 104);
      uint64_t v487 = v19;
      *(void *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 104) = 0;
      char v488 = *(unsigned char *)(a1 + 128);
      uint64_t v489 = v491;
      uint64_t v490 = 0x800000000;
      if (*(_DWORD *)(a1 + 144)) {
        sub_1CD41C56C((uint64_t)&v489, a1 + 136);
      }
      if (v12 >= 2) {
        llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)(a1 + 216 * (v12 >> 1)));
      }
      uint64_t v20 = (void **)(a1 + 104);
      uint64_t v21 = (unsigned int *)(a1 + 96 + 216 * v13);
      *(_DWORD *)(a1 + 96) = *v21;
      if (*(char *)(a1 + 127) < 0) {
        operator delete(*v20);
      }
      uint64_t v22 = a1 + 216 * v13;
      char v24 = *(unsigned char *)(v22 + 128);
      uint64_t v23 = (unsigned char *)(v22 + 128);
      long long v25 = *(_OWORD *)(v23 - 24);
      *(void *)(a1 + 120) = *((void *)v23 - 1);
      *(_OWORD *)uint64_t v20 = v25;
      *(unsigned char *)(v14 + 127) = 0;
      *(v23 - 24) = 0;
      *(unsigned char *)(a1 + 128) = v24;
      sub_1CD41C56C(a1 + 136, (uint64_t)(v23 + 8));
      if (&v480 != (unsigned char **)v14) {
        llvm::SmallPtrSetImplBase::MoveFrom(a1 + 216 * (v12 >> 1), 8, (double *)&v480);
      }
      int v26 = (void **)(v23 - 24);
      unsigned int *v21 = v485;
      a3 = v16;
      if (*(char *)(v14 + 127) < 0) {
        operator delete(*v26);
      }
      long long v27 = __p;
      *((void *)v23 - 1) = v487;
      *(_OWORD *)int v26 = v27;
      HIBYTE(v487) = 0;
      LOBYTE(__p) = 0;
      *uint64_t v23 = v488;
      sub_1CD41C56C((uint64_t)(v23 + 8), (uint64_t)&v489);
      if (v489 != v491) {
        free(v489);
      }
      if (SHIBYTE(v487) < 0) {
        operator delete((void *)__p);
      }
      if (v481 != v480) {
        free(v481);
      }
    }
    else
    {
      sub_1CC8002C4(a1 + 216 * (v12 >> 1), a1, (uint64_t)v9);
    }
    uint64_t v464 = a3 - 1;
    if (a4) {
      goto LABEL_52;
    }
    unsigned int v28 = *(_DWORD *)(a1 - 120);
    unsigned int v29 = *(_DWORD *)(a1 + 96);
    if (v28 == v29)
    {
      unsigned int v30 = *(_DWORD *)(a1 - 196) - *(_DWORD *)(a1 - 192);
      unsigned int v31 = *(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 24);
      if (v30 == v31)
      {
        char v32 = *(unsigned char *)(a1 + 127);
        int v33 = v32;
        if (v32 >= 0) {
          size_t v34 = (const void *)(a1 + 104);
        }
        else {
          size_t v34 = *(const void **)(a1 + 104);
        }
        size_t v35 = v32 & 0x7F;
        if (v33 >= 0) {
          size_t v36 = v35;
        }
        else {
          size_t v36 = *(void *)(a1 + 112);
        }
        int v37 = *(char *)(a1 - 89);
        if (v37 >= 0) {
          size_t v38 = *(unsigned __int8 *)(a1 - 89);
        }
        else {
          size_t v38 = *(void *)(a1 - 104);
        }
        if (v37 >= 0) {
          uint64_t v39 = (const void *)(a1 - 112);
        }
        else {
          uint64_t v39 = *(const void **)(a1 - 112);
        }
        if (v36 >= v38) {
          size_t v40 = v38;
        }
        else {
          size_t v40 = v36;
        }
        int v41 = memcmp(v39, v34, v40);
        BOOL v42 = v38 < v36;
        if (v41) {
          BOOL v42 = v41 < 0;
        }
        if (!v42) {
          goto LABEL_227;
        }
        goto LABEL_52;
      }
      if (v30 > v31) {
        goto LABEL_52;
      }
LABEL_227:
      BOOL v468 = v472;
      uint64_t v117 = *(void *)a1;
      if (*(void *)(a1 + 8) == *(void *)a1)
      {
        uint64_t v469 = v472;
        uint64_t v118 = *(unsigned int *)(a1 + 20);
        if (v118)
        {
          memmove(v472, *(const void **)(a1 + 8), 8 * v118);
          unsigned int v29 = *(_DWORD *)(a1 + 96);
        }
      }
      else
      {
        uint64_t v469 = *(unsigned char **)(a1 + 8);
        *(void *)(a1 + 8) = v117;
      }
      uint64_t v470 = *(void *)(a1 + 16);
      int v471 = *(_DWORD *)(a1 + 24);
      *(void *)(a1 + 16) = 8;
      *(_DWORD *)(a1 + 24) = 0;
      unsigned int v473 = v29;
      uint64_t v119 = *(void *)(a1 + 120);
      long long v474 = *(_OWORD *)(a1 + 104);
      uint64_t v475 = v119;
      *(void *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 104) = 0;
      char v476 = *(unsigned char *)(a1 + 128);
      int v477 = v479;
      uint64_t v478 = 0x800000000;
      if (*(_DWORD *)(a1 + 144))
      {
        sub_1CD41C56C((uint64_t)&v477, a1 + 136);
        unsigned int v29 = v473;
      }
      unsigned int v120 = *(_DWORD *)(v8 - 120);
      if (v29 == v120)
      {
        unsigned int v121 = HIDWORD(v470) - v471;
        unsigned int v122 = *(_DWORD *)(v8 - 196) - *(_DWORD *)(v8 - 192);
        if (HIDWORD(v470) - v471 == v122)
        {
          char v123 = *(unsigned char *)(v8 - 89);
          BOOL v124 = v123 < 0;
          if (v123 >= 0) {
            BOOL v125 = (const void *)(a2 - 112);
          }
          else {
            BOOL v125 = *(const void **)(v8 - 112);
          }
          size_t v126 = v123 & 0x7F;
          if (v124) {
            size_t v127 = *(void *)(v8 - 104);
          }
          else {
            size_t v127 = v126;
          }
          if (v475 >= 0) {
            size_t v128 = HIBYTE(v475);
          }
          else {
            size_t v128 = *((void *)&v474 + 1);
          }
          if (v475 >= 0) {
            uint64_t v129 = &v474;
          }
          else {
            uint64_t v129 = (long long *)v474;
          }
          if (v127 >= v128) {
            size_t v130 = v128;
          }
          else {
            size_t v130 = v127;
          }
          int v131 = memcmp(v129, v125, v130);
          BOOL v132 = v128 < v127;
          if (v131) {
            BOOL v132 = v131 < 0;
          }
          if (v132) {
            goto LABEL_257;
          }
        }
        else if (v121 > v122)
        {
          goto LABEL_257;
        }
      }
      else if (v29 < v120)
      {
        unsigned int v121 = HIDWORD(v470) - v471;
LABEL_257:
        if (v475 >= 0) {
          size_t v133 = HIBYTE(v475);
        }
        else {
          size_t v133 = *((void *)&v474 + 1);
        }
        if (v475 >= 0) {
          size_t v134 = &v474;
        }
        else {
          size_t v134 = (long long *)v474;
        }
        for (uint64_t i = (unsigned char *)(a1 + 343); ; i += 216)
        {
          unsigned int v136 = *(_DWORD *)(i - 31);
          if (v29 == v136)
          {
            unsigned int v137 = *(_DWORD *)(i - 107) - *(_DWORD *)(i - 103);
            if (v121 == v137)
            {
              int v138 = (char)*i;
              if (v138 >= 0) {
                uint64_t v139 = i - 23;
              }
              else {
                uint64_t v139 = *(unsigned char **)(i - 23);
              }
              if (v138 >= 0) {
                size_t v140 = *i & 0x7F;
              }
              else {
                size_t v140 = *(void *)(i - 15);
              }
              if (v140 >= v133) {
                size_t v141 = v133;
              }
              else {
                size_t v141 = v140;
              }
              int v142 = memcmp(v134, v139, v141);
              BOOL v143 = v133 < v140;
              if (v142) {
                BOOL v143 = v142 < 0;
              }
              if (v143)
              {
LABEL_310:
                unint64_t v10 = (unint64_t)(i - 127);
                goto LABEL_311;
              }
            }
            else if (v121 > v137)
            {
              goto LABEL_310;
            }
          }
          else if (v29 < v136)
          {
            goto LABEL_310;
          }
        }
      }
      unint64_t v10 = a1 + 216;
      if (a1 + 216 < v8)
      {
        unsigned int v144 = HIDWORD(v470) - v471;
        if (v475 >= 0) {
          size_t v145 = HIBYTE(v475);
        }
        else {
          size_t v145 = *((void *)&v474 + 1);
        }
        if (v475 >= 0) {
          int v146 = &v474;
        }
        else {
          int v146 = (long long *)v474;
        }
        do
        {
          unsigned int v147 = *(_DWORD *)(v10 + 96);
          if (v29 == v147)
          {
            unsigned int v148 = *(_DWORD *)(v10 + 20) - *(_DWORD *)(v10 + 24);
            if (v144 == v148)
            {
              char v149 = *(unsigned char *)(v10 + 127);
              if (v149 >= 0) {
                int v150 = (const void *)(v10 + 104);
              }
              else {
                int v150 = *(const void **)(v10 + 104);
              }
              if (v149 >= 0) {
                size_t v151 = v149 & 0x7F;
              }
              else {
                size_t v151 = *(void *)(v10 + 112);
              }
              if (v151 >= v145) {
                size_t v152 = v145;
              }
              else {
                size_t v152 = v151;
              }
              int v153 = memcmp(v146, v150, v152);
              BOOL v154 = v145 < v151;
              if (v153) {
                BOOL v154 = v153 < 0;
              }
              if (v154) {
                break;
              }
            }
            else if (v144 > v148)
            {
              break;
            }
          }
          else if (v29 < v147)
          {
            break;
          }
          v10 += 216;
        }
        while (v10 < v8);
      }
LABEL_311:
      unint64_t v155 = v8;
      if (v10 >= v8) {
        goto LABEL_339;
      }
      unsigned int v156 = HIDWORD(v470) - v471;
      if (v475 >= 0) {
        size_t v157 = HIBYTE(v475);
      }
      else {
        size_t v157 = *((void *)&v474 + 1);
      }
      if (v475 >= 0) {
        unsigned int v158 = &v474;
      }
      else {
        unsigned int v158 = (long long *)v474;
      }
      for (uint64_t j = (const void **)(a2 - 112); ; j -= 27)
      {
        if (v29 != v120)
        {
          if (v29 >= v120) {
            goto LABEL_338;
          }
          goto LABEL_337;
        }
        unsigned int v160 = *((_DWORD *)j - 21) - *((_DWORD *)j - 20);
        if (v156 == v160) {
          break;
        }
        if (v156 <= v160) {
          goto LABEL_338;
        }
LABEL_337:
        unsigned int v120 = *((_DWORD *)j - 56);
      }
      char v161 = *((unsigned char *)j + 23);
      BOOL v162 = v161 < 0;
      if (v161 >= 0) {
        int v163 = j;
      }
      else {
        int v163 = *j;
      }
      size_t v164 = v161 & 0x7F;
      if (v162) {
        size_t v165 = (size_t)j[1];
      }
      else {
        size_t v165 = v164;
      }
      if (v165 >= v157) {
        size_t v166 = v157;
      }
      else {
        size_t v166 = v165;
      }
      int v167 = memcmp(v158, v163, v166);
      BOOL v168 = v157 < v165;
      if (v167) {
        BOOL v168 = v167 < 0;
      }
      if (v168) {
        goto LABEL_337;
      }
LABEL_338:
      unint64_t v155 = (unint64_t)(j - 13);
LABEL_339:
      if (v10 < v155)
      {
LABEL_340:
        BOOL v480 = v484;
        uint64_t v169 = *(void *)v10;
        if (*(void *)(v10 + 8) == *(void *)v10)
        {
          int v481 = v484;
          uint64_t v170 = *(unsigned int *)(v10 + 20);
          if (v170) {
            memmove(v484, *(const void **)(v10 + 8), 8 * v170);
          }
        }
        else
        {
          int v481 = *(unsigned char **)(v10 + 8);
          *(void *)(v10 + 8) = v169;
        }
        uint64_t v482 = *(void *)(v10 + 16);
        int v483 = *(_DWORD *)(v10 + 24);
        *(void *)(v10 + 16) = 8;
        *(_DWORD *)(v10 + 24) = 0;
        unsigned int v485 = *(_DWORD *)(v10 + 96);
        uint64_t v171 = *(void *)(v10 + 120);
        long long __p = *(_OWORD *)(v10 + 104);
        uint64_t v487 = v171;
        *(void *)(v10 + 112) = 0;
        *(void *)(v10 + 120) = 0;
        *(void *)(v10 + 104) = 0;
        char v488 = *(unsigned char *)(v10 + 128);
        uint64_t v489 = v491;
        uint64_t v490 = 0x800000000;
        if (*(_DWORD *)(v10 + 144)) {
          sub_1CD41C56C((uint64_t)&v489, v10 + 136);
        }
        if (v155 != v10) {
          llvm::SmallPtrSetImplBase::MoveFrom(v10, 8, (double *)v155);
        }
        unsigned int v172 = (void **)(v10 + 104);
        *(_DWORD *)(v10 + 96) = *(_DWORD *)(v155 + 96);
        if (*(char *)(v10 + 127) < 0) {
          operator delete(*v172);
        }
        long long v173 = *(_OWORD *)(v155 + 104);
        *(void *)(v10 + 120) = *(void *)(v155 + 120);
        *(_OWORD *)unsigned int v172 = v173;
        *(unsigned char *)(v155 + 127) = 0;
        *(unsigned char *)(v155 + 104) = 0;
        *(unsigned char *)(v10 + 128) = *(unsigned char *)(v155 + 128);
        sub_1CD41C56C(v10 + 136, v155 + 136);
        if (&v480 != (unsigned char **)v155) {
          llvm::SmallPtrSetImplBase::MoveFrom(v155, 8, (double *)&v480);
        }
        unsigned int v174 = (void **)(v155 + 104);
        *(_DWORD *)(v155 + 96) = v485;
        if (*(char *)(v155 + 127) < 0) {
          operator delete(*v174);
        }
        long long v175 = __p;
        *(void *)(v155 + 120) = v487;
        *(_OWORD *)unsigned int v174 = v175;
        HIBYTE(v487) = 0;
        LOBYTE(__p) = 0;
        *(unsigned char *)(v155 + 128) = v488;
        sub_1CD41C56C(v155 + 136, (uint64_t)&v489);
        if (v489 != v491) {
          free(v489);
        }
        if (SHIBYTE(v487) < 0) {
          operator delete((void *)__p);
        }
        if (v481 != v480) {
          free(v481);
        }
        unsigned int v176 = v473;
        unsigned int v177 = HIDWORD(v470) - v471;
        if (v475 >= 0) {
          size_t v178 = HIBYTE(v475);
        }
        else {
          size_t v178 = *((void *)&v474 + 1);
        }
        if (v475 >= 0) {
          int v179 = &v474;
        }
        else {
          int v179 = (long long *)v474;
        }
        for (uint64_t k = (unsigned char *)(v10 + 343); ; k += 216)
        {
          unsigned int v181 = *(_DWORD *)(k - 31);
          if (v176 == v181)
          {
            unsigned int v182 = *(_DWORD *)(k - 107) - *(_DWORD *)(k - 103);
            if (v177 == v182)
            {
              int v183 = (char)*k;
              if (v183 >= 0) {
                unsigned int v184 = k - 23;
              }
              else {
                unsigned int v184 = *(unsigned char **)(k - 23);
              }
              if (v183 >= 0) {
                size_t v185 = *k & 0x7F;
              }
              else {
                size_t v185 = *(void *)(k - 15);
              }
              if (v185 >= v178) {
                size_t v186 = v178;
              }
              else {
                size_t v186 = v185;
              }
              int v187 = memcmp(v179, v184, v186);
              BOOL v188 = v178 < v185;
              if (v187) {
                BOOL v188 = v187 < 0;
              }
              if (v188)
              {
LABEL_385:
                unint64_t v10 = (unint64_t)(k - 127);
                for (unint64_t m = v155 - 104; ; m -= 216)
                {
                  unsigned int v190 = *(_DWORD *)(m - 16);
                  if (v176 == v190)
                  {
                    unsigned int v191 = *(_DWORD *)(m - 92) - *(_DWORD *)(m - 88);
                    if (v177 == v191)
                    {
                      char v192 = *(unsigned char *)(m + 15);
                      int v193 = v192;
                      if (v192 >= 0) {
                        uint64_t v194 = (const void *)(m - 8);
                      }
                      else {
                        uint64_t v194 = *(const void **)(m - 8);
                      }
                      size_t v195 = v192 & 0x7F;
                      if (v193 >= 0) {
                        size_t v196 = v195;
                      }
                      else {
                        size_t v196 = *(void *)m;
                      }
                      if (v196 >= v178) {
                        size_t v197 = v178;
                      }
                      else {
                        size_t v197 = v196;
                      }
                      int v198 = memcmp(v179, v194, v197);
                      BOOL v199 = v178 < v196;
                      if (v198) {
                        BOOL v199 = v198 < 0;
                      }
                      if (!v199)
                      {
LABEL_405:
                        unint64_t v155 = m - 112;
                        BOOL v4 = v10 >= m - 112;
                        a3 = v464;
                        if (v4) {
                          goto LABEL_410;
                        }
                        goto LABEL_340;
                      }
                    }
                    else if (v177 <= v191)
                    {
                      goto LABEL_405;
                    }
                  }
                  else if (v176 >= v190)
                  {
                    goto LABEL_405;
                  }
                }
              }
            }
            else if (v177 > v182)
            {
              goto LABEL_385;
            }
          }
          else if (v176 < v181)
          {
            goto LABEL_385;
          }
        }
      }
      a3 = v464;
LABEL_410:
      unint64_t v8 = a2;
      uint64_t v9 = (double *)(a2 - 216);
      if (v10 - 216 != a1)
      {
        uint64_t v200 = (void **)(a1 + 104);
        llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)(v10 - 216));
        *(_DWORD *)(a1 + 96) = *(_DWORD *)(v10 - 120);
        if (*(char *)(a1 + 127) < 0) {
          operator delete(*v200);
        }
        long long v201 = *(_OWORD *)(v10 - 112);
        *(void *)(a1 + 120) = *(void *)(v10 - 96);
        *(_OWORD *)uint64_t v200 = v201;
        *(unsigned char *)(v10 - 89) = 0;
        *(unsigned char *)(v10 - 112) = 0;
        *(unsigned char *)(a1 + 128) = *(unsigned char *)(v10 - 88);
        sub_1CD41C56C(a1 + 136, v10 - 80);
      }
      if (&v468 != (unsigned char **)(v10 - 216)) {
        llvm::SmallPtrSetImplBase::MoveFrom(v10 - 216, 8, (double *)&v468);
      }
      *(_DWORD *)(v10 - 120) = v473;
      std::string::size_type v202 = (void **)(v10 - 112);
      if (*(char *)(v10 - 89) < 0) {
        operator delete(*v202);
      }
      long long v203 = v474;
      *(void *)(v10 - 96) = v475;
      *(_OWORD *)std::string::size_type v202 = v203;
      HIBYTE(v475) = 0;
      LOBYTE(v474) = 0;
      *(unsigned char *)(v10 - 88) = v476;
      sub_1CD41C56C(v10 - 80, (uint64_t)&v477);
      if (v477 != v479) {
        free(v477);
      }
      if (SHIBYTE(v475) < 0) {
        operator delete((void *)v474);
      }
      BOOL v4 = v469 >= v468;
      BOOL v5 = v469 == v468;
      if (v469 != v468) {
        free(v469);
      }
LABEL_225:
      a4 = 0;
    }
    else
    {
      if (v28 >= v29) {
        goto LABEL_227;
      }
LABEL_52:
      BOOL v468 = v472;
      uint64_t v43 = *(void *)a1;
      if (*(void *)(a1 + 8) == *(void *)a1)
      {
        uint64_t v469 = v472;
        uint64_t v44 = *(unsigned int *)(a1 + 20);
        if (v44) {
          memmove(v472, *(const void **)(a1 + 8), 8 * v44);
        }
      }
      else
      {
        uint64_t v469 = *(unsigned char **)(a1 + 8);
        *(void *)(a1 + 8) = v43;
      }
      uint64_t v470 = *(void *)(a1 + 16);
      int v471 = *(_DWORD *)(a1 + 24);
      *(void *)(a1 + 16) = 8;
      *(_DWORD *)(a1 + 24) = 0;
      unsigned int v45 = *(_DWORD *)(a1 + 96);
      unsigned int v473 = v45;
      uint64_t v46 = *(void *)(a1 + 120);
      long long v474 = *(_OWORD *)(a1 + 104);
      uint64_t v475 = v46;
      *(void *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 104) = 0;
      char v476 = *(unsigned char *)(a1 + 128);
      int v477 = v479;
      uint64_t v478 = 0x800000000;
      if (*(_DWORD *)(a1 + 144))
      {
        sub_1CD41C56C((uint64_t)&v477, a1 + 136);
        unsigned int v45 = v473;
      }
      uint64_t v47 = 0;
      int v461 = (void **)(a1 + 104);
      unsigned int v48 = HIDWORD(v470) - v471;
      if (v475 >= 0) {
        int v49 = &v474;
      }
      else {
        int v49 = (long long *)v474;
      }
      if (v475 >= 0) {
        size_t v50 = HIBYTE(v475) & 0x7F;
      }
      else {
        size_t v50 = *((void *)&v474 + 1);
      }
      while (1)
      {
        unsigned int v51 = *(_DWORD *)(a1 + v47 + 312);
        if (v51 != v45)
        {
          if (v51 >= v45) {
            goto LABEL_83;
          }
          goto LABEL_82;
        }
        unsigned int v52 = *(_DWORD *)(a1 + v47 + 236) - *(_DWORD *)(a1 + v47 + 240);
        if (v52 == v48) {
          break;
        }
        if (v52 <= v48) {
          goto LABEL_83;
        }
LABEL_82:
        v47 += 216;
      }
      int v53 = *(char *)(a1 + v47 + 343);
      if (v53 >= 0) {
        size_t v54 = *(unsigned __int8 *)(a1 + v47 + 343);
      }
      else {
        size_t v54 = *(void *)(a1 + v47 + 328);
      }
      if (v53 >= 0) {
        unsigned int v55 = (const void *)(a1 + v47 + 320);
      }
      else {
        unsigned int v55 = *(const void **)(a1 + v47 + 320);
      }
      if (v50 >= v54) {
        size_t v56 = v54;
      }
      else {
        size_t v56 = v50;
      }
      int v57 = memcmp(v55, v49, v56);
      BOOL v58 = v54 < v50;
      if (v57) {
        BOOL v58 = v57 < 0;
      }
      if (v58) {
        goto LABEL_82;
      }
LABEL_83:
      unint64_t v59 = a1 + v47 + 216;
      uint64_t v60 = a2 - 104;
      if (v47)
      {
        while (1)
        {
          unsigned int v74 = *(_DWORD *)(v60 - 16);
          if (v74 == v45)
          {
            unsigned int v75 = *(_DWORD *)(v60 - 92) - *(_DWORD *)(v60 - 88);
            if (v75 == v48)
            {
              int v76 = *(char *)(v60 + 15);
              if (v76 >= 0) {
                size_t v77 = *(unsigned __int8 *)(v60 + 15);
              }
              else {
                size_t v77 = *(void *)v60;
              }
              if (v76 >= 0) {
                uint64_t v78 = (const void *)(v60 - 8);
              }
              else {
                uint64_t v78 = *(const void **)(v60 - 8);
              }
              if (v50 >= v77) {
                size_t v79 = v77;
              }
              else {
                size_t v79 = v50;
              }
              int v80 = memcmp(v78, v49, v79);
              BOOL v81 = v77 < v50;
              if (v80) {
                BOOL v81 = v80 < 0;
              }
              if (v81)
              {
LABEL_135:
                unint64_t v61 = v60 - 112;
                goto LABEL_136;
              }
            }
            else if (v75 > v48)
            {
              goto LABEL_135;
            }
          }
          else if (v74 < v45)
          {
            goto LABEL_135;
          }
          v60 -= 216;
        }
      }
      unint64_t v61 = v8;
      if (v59 < v8)
      {
        for (uint64_t n = a2 - 104; ; n -= 216)
        {
          unint64_t v61 = n - 112;
          unsigned int v63 = *(_DWORD *)(n - 16);
          if (v63 == v45)
          {
            unsigned int v64 = *(_DWORD *)(n - 92) - *(_DWORD *)(n - 88);
            if (v64 == v48)
            {
              int v65 = *(char *)(n + 15);
              if (v65 >= 0) {
                size_t v66 = *(unsigned __int8 *)(n + 15);
              }
              else {
                size_t v66 = *(void *)n;
              }
              if (v65 >= 0) {
                int v67 = (const void *)(n - 8);
              }
              else {
                int v67 = *(const void **)(n - 8);
              }
              if (v50 >= v66) {
                size_t v68 = v66;
              }
              else {
                size_t v68 = v50;
              }
              int v69 = memcmp(v67, v49, v68);
              BOOL v70 = v66 >= v50;
              if (v69) {
                BOOL v70 = v69 >= 0;
              }
              if (!v70 || v59 >= v61) {
                break;
              }
            }
            else if (v64 > v48 || v59 >= v61)
            {
              break;
            }
          }
          else if (v63 < v45 || v59 >= v61)
          {
            break;
          }
        }
      }
LABEL_136:
      unint64_t v10 = v59;
      if (v59 >= v61) {
        goto LABEL_206;
      }
      unint64_t v82 = v61;
      while (2)
      {
        BOOL v480 = v484;
        uint64_t v84 = *(void *)v10;
        uint64_t v83 = *(const void **)(v10 + 8);
        if (v83 == *(const void **)v10)
        {
          int v481 = v484;
          uint64_t v85 = *(unsigned int *)(v10 + 20);
          if (v85) {
            memmove(v484, v83, 8 * v85);
          }
        }
        else
        {
          int v481 = *(unsigned char **)(v10 + 8);
          *(void *)(v10 + 8) = v84;
        }
        uint64_t v482 = *(void *)(v10 + 16);
        int v483 = *(_DWORD *)(v10 + 24);
        *(void *)(v10 + 16) = 8;
        *(_DWORD *)(v10 + 24) = 0;
        unsigned int v485 = *(_DWORD *)(v10 + 96);
        uint64_t v86 = *(void *)(v10 + 120);
        long long __p = *(_OWORD *)(v10 + 104);
        uint64_t v487 = v86;
        *(void *)(v10 + 112) = 0;
        *(void *)(v10 + 120) = 0;
        *(void *)(v10 + 104) = 0;
        char v488 = *(unsigned char *)(v10 + 128);
        uint64_t v489 = v491;
        uint64_t v490 = 0x800000000;
        if (*(_DWORD *)(v10 + 144)) {
          sub_1CD41C56C((uint64_t)&v489, v10 + 136);
        }
        if (v82 != v10) {
          llvm::SmallPtrSetImplBase::MoveFrom(v10, 8, (double *)v82);
        }
        uint64_t v87 = (void **)(v10 + 104);
        *(_DWORD *)(v10 + 96) = *(_DWORD *)(v82 + 96);
        if (*(char *)(v10 + 127) < 0) {
          operator delete(*v87);
        }
        long long v88 = *(_OWORD *)(v82 + 104);
        *(void *)(v10 + 120) = *(void *)(v82 + 120);
        *(_OWORD *)uint64_t v87 = v88;
        *(unsigned char *)(v82 + 127) = 0;
        *(unsigned char *)(v82 + 104) = 0;
        *(unsigned char *)(v10 + 128) = *(unsigned char *)(v82 + 128);
        sub_1CD41C56C(v10 + 136, v82 + 136);
        if (&v480 != (unsigned char **)v82) {
          llvm::SmallPtrSetImplBase::MoveFrom(v82, 8, (double *)&v480);
        }
        uint64_t v89 = (void **)(v82 + 104);
        *(_DWORD *)(v82 + 96) = v485;
        if (*(char *)(v82 + 127) < 0) {
          operator delete(*v89);
        }
        long long v90 = __p;
        *(void *)(v82 + 120) = v487;
        *(_OWORD *)uint64_t v89 = v90;
        HIBYTE(v487) = 0;
        LOBYTE(__p) = 0;
        *(unsigned char *)(v82 + 128) = v488;
        sub_1CD41C56C(v82 + 136, (uint64_t)&v489);
        if (v489 != v491) {
          free(v489);
        }
        if (SHIBYTE(v487) < 0) {
          operator delete((void *)__p);
        }
        if (v481 != v480) {
          free(v481);
        }
        unsigned int v91 = v473;
        unsigned int v92 = HIDWORD(v470) - v471;
        if (v475 >= 0) {
          uint64_t v93 = &v474;
        }
        else {
          uint64_t v93 = (long long *)v474;
        }
        if (v475 >= 0) {
          size_t v94 = HIBYTE(v475) & 0x7F;
        }
        else {
          size_t v94 = *((void *)&v474 + 1);
        }
        int v95 = (unsigned __int8 *)(v10 + 343);
        while (2)
        {
          unsigned int v96 = *(_DWORD *)(v95 - 31);
          if (v96 != v91)
          {
            if (v96 >= v91) {
              goto LABEL_183;
            }
LABEL_182:
            v95 += 216;
            continue;
          }
          break;
        }
        unsigned int v97 = *(_DWORD *)(v95 - 107) - *(_DWORD *)(v95 - 103);
        if (v97 != v92)
        {
          if (v97 <= v92) {
            goto LABEL_183;
          }
          goto LABEL_182;
        }
        int v98 = (char)*v95;
        if (v98 >= 0) {
          size_t v99 = *v95;
        }
        else {
          size_t v99 = *(void *)(v95 - 15);
        }
        if (v98 >= 0) {
          char v100 = (char *)(v95 - 23);
        }
        else {
          char v100 = *(char **)(v95 - 23);
        }
        if (v94 >= v99) {
          size_t v101 = v99;
        }
        else {
          size_t v101 = v94;
        }
        int v102 = memcmp(v100, v93, v101);
        BOOL v103 = v99 < v94;
        if (v102) {
          BOOL v103 = v102 < 0;
        }
        if (v103) {
          goto LABEL_182;
        }
LABEL_183:
        unint64_t v10 = (unint64_t)(v95 - 127);
        unint64_t v104 = v82 - 104;
        while (2)
        {
          unsigned int v105 = *(_DWORD *)(v104 - 16);
          if (v105 != v91)
          {
            if (v105 < v91) {
              goto LABEL_203;
            }
LABEL_202:
            v104 -= 216;
            continue;
          }
          break;
        }
        unsigned int v106 = *(_DWORD *)(v104 - 92) - *(_DWORD *)(v104 - 88);
        if (v106 != v92)
        {
          if (v106 > v92) {
            goto LABEL_203;
          }
          goto LABEL_202;
        }
        int v107 = *(char *)(v104 + 15);
        if (v107 >= 0) {
          size_t v108 = *(unsigned __int8 *)(v104 + 15);
        }
        else {
          size_t v108 = *(void *)v104;
        }
        if (v107 >= 0) {
          uint64_t v109 = (const void *)(v104 - 8);
        }
        else {
          uint64_t v109 = *(const void **)(v104 - 8);
        }
        if (v94 >= v108) {
          size_t v110 = v108;
        }
        else {
          size_t v110 = v94;
        }
        int v111 = memcmp(v109, v93, v110);
        BOOL v112 = v108 < v94;
        if (v111) {
          BOOL v112 = v111 < 0;
        }
        if (!v112) {
          goto LABEL_202;
        }
LABEL_203:
        unint64_t v82 = v104 - 112;
        if (v10 < v82) {
          continue;
        }
        break;
      }
LABEL_206:
      if (v10 - 216 != a1)
      {
        llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)(v10 - 216));
        *(_DWORD *)(a1 + 96) = *(_DWORD *)(v10 - 120);
        if (*(char *)(a1 + 127) < 0) {
          operator delete(*v461);
        }
        long long v113 = *(_OWORD *)(v10 - 112);
        *(void *)(a1 + 120) = *(void *)(v10 - 96);
        *(_OWORD *)int v461 = v113;
        *(unsigned char *)(v10 - 89) = 0;
        *(unsigned char *)(v10 - 112) = 0;
        *(unsigned char *)(a1 + 128) = *(unsigned char *)(v10 - 88);
        sub_1CD41C56C(a1 + 136, v10 - 80);
      }
      if (&v468 != (unsigned char **)(v10 - 216)) {
        llvm::SmallPtrSetImplBase::MoveFrom(v10 - 216, 8, (double *)&v468);
      }
      *(_DWORD *)(v10 - 120) = v473;
      unsigned int v114 = (void **)(v10 - 112);
      if (*(char *)(v10 - 89) < 0) {
        operator delete(*v114);
      }
      long long v115 = v474;
      *(void *)(v10 - 96) = v475;
      *(_OWORD *)unsigned int v114 = v115;
      HIBYTE(v475) = 0;
      LOBYTE(v474) = 0;
      *(unsigned char *)(v10 - 88) = v476;
      sub_1CD41C56C(v10 - 80, (uint64_t)&v477);
      if (v477 != v479) {
        free(v477);
      }
      if (SHIBYTE(v475) < 0) {
        operator delete((void *)v474);
      }
      if (v469 != v468) {
        free(v469);
      }
      BOOL v4 = v59 >= v61;
      unint64_t v8 = a2;
      uint64_t v9 = (double *)(a2 - 216);
      a3 = v464;
      if (!v4) {
        goto LABEL_224;
      }
      BOOL v116 = sub_1CC800E40(a1, v10 - 216);
      if (sub_1CC800E40(v10, a2))
      {
        a2 = v10 - 216;
        if (v116) {
          return;
        }
        goto LABEL_2;
      }
      if (!v116)
      {
LABEL_224:
        sub_1CC7FD188(a1, v10 - 216, v464, a4 & 1);
        goto LABEL_225;
      }
    }
  }
  if ((a4 & 1) == 0)
  {
    if (a1 == v8) {
      return;
    }
    uint64_t v416 = a1 + 216;
    if (a1 + 216 == a2) {
      return;
    }
    for (iuint64_t i = a1 + 352; ; ii += 216)
    {
      uint64_t v418 = a1;
      a1 = v416;
      unsigned int v419 = *(_DWORD *)(v418 + 312);
      unsigned int v420 = *(_DWORD *)(v418 + 96);
      if (v419 == v420)
      {
        unsigned int v421 = *(_DWORD *)(v418 + 236) - *(_DWORD *)(v418 + 240);
        unsigned int v422 = *(_DWORD *)(v418 + 20) - *(_DWORD *)(v418 + 24);
        if (v421 == v422)
        {
          char v423 = *(unsigned char *)(v418 + 127);
          int v424 = v423;
          if (v423 >= 0) {
            unsigned int v425 = (const void *)(v418 + 104);
          }
          else {
            unsigned int v425 = *(const void **)(v418 + 104);
          }
          size_t v426 = v423 & 0x7F;
          if (v424 >= 0) {
            size_t v427 = v426;
          }
          else {
            size_t v427 = *(void *)(v418 + 112);
          }
          int v428 = *(char *)(v418 + 343);
          if (v428 >= 0) {
            size_t v429 = *(unsigned __int8 *)(v418 + 343);
          }
          else {
            size_t v429 = *(void *)(v418 + 328);
          }
          if (v428 >= 0) {
            unint64_t v430 = (const void *)(v418 + 320);
          }
          else {
            unint64_t v430 = *(const void **)(v418 + 320);
          }
          if (v427 >= v429) {
            size_t v431 = v429;
          }
          else {
            size_t v431 = v427;
          }
          int v432 = memcmp(v430, v425, v431);
          BOOL v433 = v429 < v427;
          if (v432) {
            BOOL v433 = v432 < 0;
          }
          if (!v433) {
            goto LABEL_823;
          }
LABEL_825:
          BOOL v480 = v484;
          uint64_t v434 = *(void *)a1;
          if (*(void *)(a1 + 8) == *(void *)a1)
          {
            int v481 = v484;
            uint64_t v435 = *(unsigned int *)(a1 + 20);
            if (v435)
            {
              memmove(v484, *(const void **)(a1 + 8), 8 * v435);
              unsigned int v419 = *(_DWORD *)(v418 + 312);
            }
          }
          else
          {
            int v481 = *(unsigned char **)(a1 + 8);
            *(void *)(a1 + 8) = v434;
          }
          uint64_t v482 = *(void *)(a1 + 16);
          int v483 = *(_DWORD *)(a1 + 24);
          *(void *)(a1 + 16) = 8;
          *(_DWORD *)(a1 + 24) = 0;
          unsigned int v485 = v419;
          long long __p = *(_OWORD *)(v418 + 320);
          uint64_t v487 = *(void *)(v418 + 336);
          *(void *)(v418 + 320) = 0;
          *(void *)(v418 + 328) = 0;
          *(void *)(v418 + 336) = 0;
          char v488 = *(unsigned char *)(v418 + 344);
          uint64_t v489 = v491;
          uint64_t v490 = 0x800000000;
          if (*(_DWORD *)(v418 + 360)) {
            sub_1CD41C56C((uint64_t)&v489, v418 + 352);
          }
          for (juint64_t j = ii; ; jj -= 216)
          {
            llvm::SmallPtrSetImplBase::MoveFrom(jj - 136, 8, (double *)(jj - 352));
            *(_DWORD *)(jj - 40) = *(_DWORD *)(jj - 256);
            int v437 = (void **)(jj - 32);
            if (*(char *)(jj - 9) < 0) {
              operator delete(*v437);
            }
            *(_OWORD *)int v437 = *(_OWORD *)(jj - 248);
            *(void *)(jj - 16) = *(void *)(jj - 232);
            *(unsigned char *)(jj - 225) = 0;
            *(unsigned char *)(jj - 248) = 0;
            *(unsigned char *)(jj - 8) = *(unsigned char *)(jj - 224);
            sub_1CD41C56C(jj, jj - 216);
            unsigned int v438 = v485;
            unsigned int v439 = *(_DWORD *)(jj - 472);
            if (v485 == v439)
            {
              unsigned int v440 = *(_DWORD *)(jj - 548) - *(_DWORD *)(jj - 544);
              if (HIDWORD(v482) - v483 == v440)
              {
                char v441 = *(unsigned char *)(jj - 441);
                int v442 = v441;
                if (v441 >= 0) {
                  int v443 = (const void *)(jj - 464);
                }
                else {
                  int v443 = *(const void **)(jj - 464);
                }
                size_t v444 = v441 & 0x7F;
                if (v442 >= 0) {
                  size_t v445 = v444;
                }
                else {
                  size_t v445 = *(void *)(jj - 456);
                }
                if (v487 >= 0) {
                  size_t v446 = HIBYTE(v487);
                }
                else {
                  size_t v446 = *((void *)&__p + 1);
                }
                if (v487 >= 0) {
                  v447 = &__p;
                }
                else {
                  v447 = (long long *)__p;
                }
                if (v445 >= v446) {
                  size_t v448 = v446;
                }
                else {
                  size_t v448 = v445;
                }
                int v449 = memcmp(v447, v443, v448);
                BOOL v450 = v446 < v445;
                if (v449) {
                  BOOL v450 = v449 < 0;
                }
                if (!v450)
                {
LABEL_859:
                  if ((unsigned char **)(jj - 352) != &v480)
                  {
                    llvm::SmallPtrSetImplBase::MoveFrom(jj - 352, 8, (double *)&v480);
                    unsigned int v438 = v485;
                  }
                  unint64_t v451 = (void **)(jj - 248);
                  *(_DWORD *)(jj - 256) = v438;
                  if (*(char *)(jj - 225) < 0) {
                    operator delete(*v451);
                  }
                  long long v452 = __p;
                  *(void *)(jj - 232) = v487;
                  *(_OWORD *)unint64_t v451 = v452;
                  HIBYTE(v487) = 0;
                  LOBYTE(__p) = 0;
                  *(unsigned char *)(jj - 224) = v488;
                  sub_1CD41C56C(jj - 216, (uint64_t)&v489);
                  if (v489 != v491) {
                    free(v489);
                  }
                  if (SHIBYTE(v487) < 0) {
                    operator delete((void *)__p);
                  }
                  if (v481 != v480) {
                    free(v481);
                  }
                  goto LABEL_823;
                }
              }
              else if (HIDWORD(v482) - v483 <= v440)
              {
                goto LABEL_859;
              }
            }
            else if (v485 >= v439)
            {
              goto LABEL_859;
            }
          }
        }
        if (v421 > v422) {
          goto LABEL_825;
        }
      }
      else if (v419 < v420)
      {
        goto LABEL_825;
      }
LABEL_823:
      uint64_t v416 = a1 + 216;
      if (a1 + 216 == a2) {
        return;
      }
    }
  }
  if (a1 == v8) {
    return;
  }
  uint64_t v378 = a1 + 216;
  if (a1 + 216 == a2) {
    return;
  }
  uint64_t v379 = 0;
  uint64_t v380 = a1;
  while (2)
  {
    uint64_t v381 = v380;
    uint64_t v380 = v378;
    unsigned int v382 = *(_DWORD *)(v381 + 312);
    unsigned int v383 = *(_DWORD *)(v381 + 96);
    if (v382 == v383)
    {
      unsigned int v384 = *(_DWORD *)(v381 + 236) - *(_DWORD *)(v381 + 240);
      unsigned int v385 = *(_DWORD *)(v381 + 20) - *(_DWORD *)(v381 + 24);
      if (v384 == v385)
      {
        char v386 = *(unsigned char *)(v381 + 127);
        int v387 = v386;
        if (v386 >= 0) {
          uint64_t v388 = (const void *)(v381 + 104);
        }
        else {
          uint64_t v388 = *(const void **)(v381 + 104);
        }
        size_t v389 = v386 & 0x7F;
        if (v387 >= 0) {
          size_t v390 = v389;
        }
        else {
          size_t v390 = *(void *)(v381 + 112);
        }
        int v391 = *(char *)(v381 + 343);
        if (v391 >= 0) {
          size_t v392 = *(unsigned __int8 *)(v381 + 343);
        }
        else {
          size_t v392 = *(void *)(v381 + 328);
        }
        if (v391 >= 0) {
          uint64_t v393 = (const void *)(v381 + 320);
        }
        else {
          uint64_t v393 = *(const void **)(v381 + 320);
        }
        if (v390 >= v392) {
          size_t v394 = v392;
        }
        else {
          size_t v394 = v390;
        }
        int v395 = memcmp(v393, v388, v394);
        BOOL v396 = v392 < v390;
        if (v395) {
          BOOL v396 = v395 < 0;
        }
        if (!v396) {
          goto LABEL_745;
        }
      }
      else if (v384 <= v385)
      {
        goto LABEL_745;
      }
    }
    else if (v382 >= v383)
    {
      goto LABEL_745;
    }
    BOOL v480 = v484;
    uint64_t v397 = *(void *)v380;
    if (*(void *)(v380 + 8) == *(void *)v380)
    {
      int v481 = v484;
      uint64_t v398 = *(unsigned int *)(v380 + 20);
      if (v398)
      {
        memmove(v484, *(const void **)(v380 + 8), 8 * v398);
        unsigned int v382 = *(_DWORD *)(v381 + 312);
      }
    }
    else
    {
      int v481 = *(unsigned char **)(v380 + 8);
      *(void *)(v380 + 8) = v397;
    }
    uint64_t v482 = *(void *)(v380 + 16);
    int v483 = *(_DWORD *)(v380 + 24);
    *(void *)(v380 + 16) = 8;
    *(_DWORD *)(v380 + 24) = 0;
    unsigned int v485 = v382;
    long long __p = *(_OWORD *)(v381 + 320);
    uint64_t v487 = *(void *)(v381 + 336);
    *(void *)(v381 + 320) = 0;
    *(void *)(v381 + 328) = 0;
    *(void *)(v381 + 336) = 0;
    char v488 = *(unsigned char *)(v381 + 344);
    uint64_t v489 = v491;
    uint64_t v490 = 0x800000000;
    if (*(_DWORD *)(v381 + 360)) {
      sub_1CD41C56C((uint64_t)&v489, v381 + 352);
    }
    uint64_t v399 = v379;
    while (2)
    {
      uint64_t v400 = a1 + v399;
      llvm::SmallPtrSetImplBase::MoveFrom(a1 + v399 + 216, 8, (double *)(a1 + v399));
      *(_DWORD *)(a1 + v399 + 312) = *(_DWORD *)(a1 + v399 + 96);
      BOOL v401 = (void **)(a1 + v399 + 320);
      if (*(char *)(a1 + v399 + 343) < 0) {
        operator delete(*v401);
      }
      *(_OWORD *)BOOL v401 = *(_OWORD *)(v400 + 104);
      *(void *)(v400 + 336) = *(void *)(v400 + 120);
      *(unsigned char *)(v400 + 127) = 0;
      *(unsigned char *)(v400 + 104) = 0;
      *(unsigned char *)(v400 + 344) = *(unsigned char *)(v400 + 128);
      sub_1CD41C56C(v400 + 352, v400 + 136);
      if (!v399)
      {
        uint64_t v412 = a1;
        goto LABEL_783;
      }
      unsigned int v402 = *(_DWORD *)(a1 + v399 - 120);
      if (v485 != v402)
      {
        if (v485 >= v402) {
          break;
        }
        goto LABEL_780;
      }
      unsigned int v403 = *(_DWORD *)(a1 + v399 - 196) - *(_DWORD *)(a1 + v399 - 192);
      if (HIDWORD(v482) - v483 != v403)
      {
        if (HIDWORD(v482) - v483 <= v403) {
          break;
        }
        goto LABEL_780;
      }
      char v404 = *(unsigned char *)(a1 + v399 - 89);
      if (v404 >= 0) {
        uint64_t v405 = (const void *)(a1 + v399 - 112);
      }
      else {
        uint64_t v405 = *(const void **)(a1 + v399 - 112);
      }
      if (v404 >= 0) {
        size_t v406 = v404 & 0x7F;
      }
      else {
        size_t v406 = *(void *)(a1 + v399 - 104);
      }
      if (v487 >= 0) {
        size_t v407 = HIBYTE(v487);
      }
      else {
        size_t v407 = *((void *)&__p + 1);
      }
      if (v487 >= 0) {
        unsigned int v408 = &__p;
      }
      else {
        unsigned int v408 = (long long *)__p;
      }
      if (v406 >= v407) {
        size_t v409 = v407;
      }
      else {
        size_t v409 = v406;
      }
      int v410 = memcmp(v408, v405, v409);
      BOOL v411 = v407 < v406;
      if (v410) {
        BOOL v411 = v410 < 0;
      }
      if (v411)
      {
LABEL_780:
        v399 -= 216;
        continue;
      }
      break;
    }
    uint64_t v412 = a1 + v399;
LABEL_783:
    if (&v480 != (unsigned char **)v412) {
      llvm::SmallPtrSetImplBase::MoveFrom(v412, 8, (double *)&v480);
    }
    uint64_t v413 = a1 + v399;
    uint64_t v414 = a1 + v399 + 104;
    *(_DWORD *)(v412 + 96) = v485;
    if (*(char *)(v412 + 127) < 0) {
      operator delete(*(void **)v414);
    }
    long long v415 = __p;
    *(void *)(v414 + 16) = v487;
    *(_OWORD *)uint64_t v414 = v415;
    HIBYTE(v487) = 0;
    LOBYTE(__p) = 0;
    *(unsigned char *)(v412 + 128) = v488;
    sub_1CD41C56C(v413 + 136, (uint64_t)&v489);
    if (v489 != v491) {
      free(v489);
    }
    if (SHIBYTE(v487) < 0) {
      operator delete((void *)__p);
    }
    if (v481 != v480) {
      free(v481);
    }
LABEL_745:
    uint64_t v378 = v380 + 216;
    v379 += 216;
    if (v380 + 216 != a2) {
      continue;
    }
    break;
  }
}

void sub_1CC7FF948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v101[8] = *MEMORY[0x1E4F143B8];
  sub_1CC801540(a1, a2, a3, a4);
  unsigned int v10 = *(_DWORD *)(a5 + 96);
  unsigned int v11 = *(_DWORD *)(a4 + 96);
  if (v10 == v11)
  {
    unsigned int v12 = *(_DWORD *)(a5 + 20) - *(_DWORD *)(a5 + 24);
    unsigned int v13 = *(_DWORD *)(a4 + 20) - *(_DWORD *)(a4 + 24);
    if (v12 == v13)
    {
      char v14 = *(unsigned char *)(a4 + 127);
      if (v14 >= 0) {
        uint64_t v15 = (const void *)(a4 + 104);
      }
      else {
        uint64_t v15 = *(const void **)(a4 + 104);
      }
      if (v14 >= 0) {
        size_t v16 = v14 & 0x7F;
      }
      else {
        size_t v16 = *(void *)(a4 + 112);
      }
      int v17 = *(char *)(a5 + 127);
      if (v17 >= 0) {
        size_t v18 = *(unsigned __int8 *)(a5 + 127);
      }
      else {
        size_t v18 = *(void *)(a5 + 112);
      }
      if (v17 >= 0) {
        uint64_t v19 = (const void *)(a5 + 104);
      }
      else {
        uint64_t v19 = *(const void **)(a5 + 104);
      }
      if (v16 >= v18) {
        size_t v20 = v18;
      }
      else {
        size_t v20 = v16;
      }
      int v21 = memcmp(v19, v15, v20);
      BOOL v22 = v18 < v16;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return;
      }
    }
    else if (v12 <= v13)
    {
      return;
    }
  }
  else if (v10 >= v11)
  {
    return;
  }
  uint64_t v89 = v94;
  double v24 = *(double *)a4;
  uint64_t v23 = *(const void **)(a4 + 8);
  if (v23 == *(const void **)a4)
  {
    long long v90 = v94;
    uint64_t v25 = *(unsigned int *)(a4 + 20);
    if (v25) {
      memmove(v94, v23, 8 * v25);
    }
  }
  else
  {
    long long v90 = *(unsigned char **)(a4 + 8);
    *(double *)(a4 + 8) = v24;
    LODWORD(v25) = *(_DWORD *)(a4 + 20);
  }
  int v91 = *(_DWORD *)(a4 + 16);
  int v92 = v25;
  int v26 = *(_DWORD *)(a4 + 24);
  *(void *)(a4 + 16) = 8;
  *(_DWORD *)(a4 + 24) = 0;
  int v93 = v26;
  unsigned int v95 = v11;
  *(_OWORD *)long long __p = *(_OWORD *)(a4 + 104);
  uint64_t v97 = *(void *)(a4 + 120);
  *(void *)(a4 + 104) = 0;
  *(void *)(a4 + 112) = 0;
  *(void *)(a4 + 120) = 0;
  char v98 = *(unsigned char *)(a4 + 128);
  size_t v99 = v101;
  uint64_t v100 = 0x800000000;
  if (*(_DWORD *)(a4 + 144)) {
    sub_1CD41C56C((uint64_t)&v99, a4 + 136);
  }
  long long v27 = (void **)(a4 + 104);
  if (a5 != a4) {
    llvm::SmallPtrSetImplBase::MoveFrom(a4, 8, (double *)a5);
  }
  *(_DWORD *)(a4 + 96) = *(_DWORD *)(a5 + 96);
  if (*(char *)(a4 + 127) < 0) {
    operator delete(*v27);
  }
  long long v28 = *(_OWORD *)(a5 + 104);
  *(void *)(a4 + 120) = *(void *)(a5 + 120);
  *(_OWORD *)long long v27 = v28;
  *(unsigned char *)(a5 + 127) = 0;
  *(unsigned char *)(a5 + 104) = 0;
  *(unsigned char *)(a4 + 128) = *(unsigned char *)(a5 + 128);
  uint64_t v88 = a4 + 136;
  sub_1CD41C56C(a4 + 136, a5 + 136);
  if (&v89 != (unsigned char **)a5) {
    llvm::SmallPtrSetImplBase::MoveFrom(a5, 8, (double *)&v89);
  }
  unsigned int v29 = (void **)(a5 + 104);
  *(_DWORD *)(a5 + 96) = v95;
  if (*(char *)(a5 + 127) < 0) {
    operator delete(*v29);
  }
  *(_OWORD *)unsigned int v29 = *(_OWORD *)__p;
  *(void *)(a5 + 120) = v97;
  HIBYTE(v97) = 0;
  LOBYTE(__p[0]) = 0;
  *(unsigned char *)(a5 + 128) = v98;
  sub_1CD41C56C(a5 + 136, (uint64_t)&v99);
  if (v99 != v101) {
    free(v99);
  }
  unsigned int v30 = (void **)(a4 + 104);
  if (SHIBYTE(v97) < 0) {
    operator delete(__p[0]);
  }
  if (v90 != v89) {
    free(v90);
  }
  unsigned int v31 = *(_DWORD *)(a4 + 96);
  unsigned int v32 = *(_DWORD *)(a3 + 96);
  if (v31 == v32)
  {
    unsigned int v33 = *(_DWORD *)(a4 + 20) - *(_DWORD *)(a4 + 24);
    unsigned int v34 = *(_DWORD *)(a3 + 20) - *(_DWORD *)(a3 + 24);
    if (v33 == v34)
    {
      char v35 = *(unsigned char *)(a3 + 127);
      if (v35 >= 0) {
        size_t v36 = (const void *)(a3 + 104);
      }
      else {
        size_t v36 = *(const void **)(a3 + 104);
      }
      if (v35 >= 0) {
        size_t v37 = v35 & 0x7F;
      }
      else {
        size_t v37 = *(void *)(a3 + 112);
      }
      int v38 = *(char *)(a4 + 127);
      if (v38 >= 0) {
        size_t v39 = *(unsigned __int8 *)(a4 + 127);
      }
      else {
        size_t v39 = *(void *)(a4 + 112);
      }
      if (v38 >= 0) {
        size_t v40 = (const void *)(a4 + 104);
      }
      else {
        size_t v40 = *(const void **)(a4 + 104);
      }
      if (v37 >= v39) {
        size_t v41 = v39;
      }
      else {
        size_t v41 = v37;
      }
      int v42 = memcmp(v40, v36, v41);
      BOOL v43 = v39 < v37;
      if (v42) {
        BOOL v43 = v42 < 0;
      }
      if (!v43) {
        return;
      }
    }
    else if (v33 <= v34)
    {
      return;
    }
  }
  else if (v31 >= v32)
  {
    return;
  }
  uint64_t v89 = v94;
  double v45 = *(double *)a3;
  uint64_t v44 = *(const void **)(a3 + 8);
  if (v44 == *(const void **)a3)
  {
    long long v90 = v94;
    uint64_t v46 = *(unsigned int *)(a3 + 20);
    if (v46) {
      memmove(v94, v44, 8 * v46);
    }
  }
  else
  {
    long long v90 = *(unsigned char **)(a3 + 8);
    *(double *)(a3 + 8) = v45;
    LODWORD(v46) = *(_DWORD *)(a3 + 20);
  }
  int v91 = *(_DWORD *)(a3 + 16);
  int v92 = v46;
  int v47 = *(_DWORD *)(a3 + 24);
  *(void *)(a3 + 16) = 8;
  *(_DWORD *)(a3 + 24) = 0;
  int v93 = v47;
  unsigned int v95 = v32;
  *(_OWORD *)long long __p = *(_OWORD *)(a3 + 104);
  uint64_t v97 = *(void *)(a3 + 120);
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = 0;
  char v98 = *(unsigned char *)(a3 + 128);
  size_t v99 = v101;
  uint64_t v100 = 0x800000000;
  if (*(_DWORD *)(a3 + 144)) {
    sub_1CD41C56C((uint64_t)&v99, a3 + 136);
  }
  unsigned int v48 = (void **)(a3 + 104);
  if (a4 != a3) {
    llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)a4);
  }
  *(_DWORD *)(a3 + 96) = *(_DWORD *)(a4 + 96);
  if (*(char *)(a3 + 127) < 0) {
    operator delete(*v48);
  }
  long long v49 = *(_OWORD *)v30;
  *(void *)(a3 + 120) = *(void *)(a4 + 120);
  *(_OWORD *)unsigned int v48 = v49;
  *(unsigned char *)(a4 + 127) = 0;
  *(unsigned char *)(a4 + 104) = 0;
  *(unsigned char *)(a3 + 128) = *(unsigned char *)(a4 + 128);
  sub_1CD41C56C(a3 + 136, v88);
  if (&v89 != (unsigned char **)a4) {
    llvm::SmallPtrSetImplBase::MoveFrom(a4, 8, (double *)&v89);
  }
  *(_DWORD *)(a4 + 96) = v95;
  if (*(char *)(a4 + 127) < 0) {
    operator delete(*v30);
  }
  *(_OWORD *)unsigned int v30 = *(_OWORD *)__p;
  *(void *)(a4 + 120) = v97;
  HIBYTE(v97) = 0;
  LOBYTE(__p[0]) = 0;
  *(unsigned char *)(a4 + 128) = v98;
  sub_1CD41C56C(v88, (uint64_t)&v99);
  if (v99 != v101) {
    free(v99);
  }
  if (SHIBYTE(v97) < 0) {
    operator delete(__p[0]);
  }
  if (v90 != v89) {
    free(v90);
  }
  unsigned int v50 = *(_DWORD *)(a3 + 96);
  unsigned int v51 = *(_DWORD *)(a2 + 96);
  if (v50 == v51)
  {
    unsigned int v52 = *(_DWORD *)(a3 + 20) - *(_DWORD *)(a3 + 24);
    unsigned int v53 = *(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24);
    if (v52 == v53)
    {
      char v54 = *(unsigned char *)(a2 + 127);
      if (v54 >= 0) {
        unsigned int v55 = (const void *)(a2 + 104);
      }
      else {
        unsigned int v55 = *(const void **)(a2 + 104);
      }
      if (v54 >= 0) {
        size_t v56 = v54 & 0x7F;
      }
      else {
        size_t v56 = *(void *)(a2 + 112);
      }
      int v57 = *(char *)(a3 + 127);
      if (v57 >= 0) {
        size_t v58 = *(unsigned __int8 *)(a3 + 127);
      }
      else {
        size_t v58 = *(void *)(a3 + 112);
      }
      if (v57 >= 0) {
        unint64_t v59 = (const void *)(a3 + 104);
      }
      else {
        unint64_t v59 = *(const void **)(a3 + 104);
      }
      if (v56 >= v58) {
        size_t v60 = v58;
      }
      else {
        size_t v60 = v56;
      }
      int v61 = memcmp(v59, v55, v60);
      BOOL v62 = v58 < v56;
      if (v61) {
        BOOL v62 = v61 < 0;
      }
      if (!v62) {
        return;
      }
    }
    else if (v52 <= v53)
    {
      return;
    }
  }
  else if (v50 >= v51)
  {
    return;
  }
  uint64_t v89 = v94;
  double v64 = *(double *)a2;
  unsigned int v63 = *(const void **)(a2 + 8);
  if (v63 == *(const void **)a2)
  {
    long long v90 = v94;
    uint64_t v65 = *(unsigned int *)(a2 + 20);
    if (v65) {
      memmove(v94, v63, 8 * v65);
    }
  }
  else
  {
    long long v90 = *(unsigned char **)(a2 + 8);
    *(double *)(a2 + 8) = v64;
    LODWORD(v65) = *(_DWORD *)(a2 + 20);
  }
  int v91 = *(_DWORD *)(a2 + 16);
  int v92 = v65;
  int v66 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  int v93 = v66;
  unsigned int v95 = v51;
  *(_OWORD *)long long __p = *(_OWORD *)(a2 + 104);
  uint64_t v97 = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  char v98 = *(unsigned char *)(a2 + 128);
  size_t v99 = v101;
  uint64_t v100 = 0x800000000;
  if (*(_DWORD *)(a2 + 144)) {
    sub_1CD41C56C((uint64_t)&v99, a2 + 136);
  }
  int v67 = (void **)(a2 + 104);
  if (a3 != a2) {
    llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)a3);
  }
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(a3 + 96);
  if (*(char *)(a2 + 127) < 0) {
    operator delete(*v67);
  }
  long long v68 = *(_OWORD *)v48;
  *(void *)(a2 + 120) = *(void *)(a3 + 120);
  *(_OWORD *)int v67 = v68;
  *(unsigned char *)(a3 + 127) = 0;
  *(unsigned char *)(a3 + 104) = 0;
  *(unsigned char *)(a2 + 128) = *(unsigned char *)(a3 + 128);
  sub_1CD41C56C(a2 + 136, a3 + 136);
  if (&v89 != (unsigned char **)a3) {
    llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)&v89);
  }
  *(_DWORD *)(a3 + 96) = v95;
  if (*(char *)(a3 + 127) < 0) {
    operator delete(*v48);
  }
  *(_OWORD *)unsigned int v48 = *(_OWORD *)__p;
  *(void *)(a3 + 120) = v97;
  HIBYTE(v97) = 0;
  LOBYTE(__p[0]) = 0;
  *(unsigned char *)(a3 + 128) = v98;
  sub_1CD41C56C(a3 + 136, (uint64_t)&v99);
  if (v99 != v101) {
    free(v99);
  }
  if (SHIBYTE(v97) < 0) {
    operator delete(__p[0]);
  }
  if (v90 != v89) {
    free(v90);
  }
  unsigned int v69 = *(_DWORD *)(a2 + 96);
  unsigned int v70 = *(_DWORD *)(a1 + 96);
  if (v69 != v70)
  {
    if (v69 >= v70) {
      return;
    }
    goto LABEL_157;
  }
  unsigned int v71 = *(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24);
  unsigned int v72 = *(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 24);
  if (v71 != v72)
  {
    if (v71 <= v72) {
      return;
    }
    goto LABEL_157;
  }
  char v73 = *(unsigned char *)(a1 + 127);
  if (v73 >= 0) {
    unsigned int v74 = (const void *)(a1 + 104);
  }
  else {
    unsigned int v74 = *(const void **)(a1 + 104);
  }
  if (v73 >= 0) {
    size_t v75 = v73 & 0x7F;
  }
  else {
    size_t v75 = *(void *)(a1 + 112);
  }
  int v76 = *(char *)(a2 + 127);
  if (v76 >= 0) {
    size_t v77 = *(unsigned __int8 *)(a2 + 127);
  }
  else {
    size_t v77 = *(void *)(a2 + 112);
  }
  if (v76 >= 0) {
    uint64_t v78 = (const void *)(a2 + 104);
  }
  else {
    uint64_t v78 = *(const void **)(a2 + 104);
  }
  if (v75 >= v77) {
    size_t v79 = v77;
  }
  else {
    size_t v79 = v75;
  }
  int v80 = memcmp(v78, v74, v79);
  BOOL v81 = v77 < v75;
  if (v80) {
    BOOL v81 = v80 < 0;
  }
  if (v81)
  {
LABEL_157:
    uint64_t v89 = v94;
    uint64_t v83 = *(void *)a1;
    unint64_t v82 = *(const void **)(a1 + 8);
    if (v82 == *(const void **)a1)
    {
      long long v90 = v94;
      uint64_t v84 = *(unsigned int *)(a1 + 20);
      if (v84) {
        memmove(v94, v82, 8 * v84);
      }
    }
    else
    {
      long long v90 = *(unsigned char **)(a1 + 8);
      *(void *)(a1 + 8) = v83;
      LODWORD(v84) = *(_DWORD *)(a1 + 20);
    }
    int v91 = *(_DWORD *)(a1 + 16);
    int v92 = v84;
    int v85 = *(_DWORD *)(a1 + 24);
    *(void *)(a1 + 16) = 8;
    *(_DWORD *)(a1 + 24) = 0;
    int v93 = v85;
    unsigned int v95 = v70;
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 104);
    uint64_t v97 = *(void *)(a1 + 120);
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    char v98 = *(unsigned char *)(a1 + 128);
    size_t v99 = v101;
    uint64_t v100 = 0x800000000;
    if (*(_DWORD *)(a1 + 144)) {
      sub_1CD41C56C((uint64_t)&v99, a1 + 136);
    }
    if (a2 != a1) {
      llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)a2);
    }
    uint64_t v86 = (void **)(a1 + 104);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
    if (*(char *)(a1 + 127) < 0) {
      operator delete(*v86);
    }
    long long v87 = *(_OWORD *)v67;
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)uint64_t v86 = v87;
    *(unsigned char *)(a2 + 127) = 0;
    *(unsigned char *)(a2 + 104) = 0;
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
    sub_1CD41C56C(a1 + 136, a2 + 136);
    if (&v89 != (unsigned char **)a2) {
      llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)&v89);
    }
    *(_DWORD *)(a2 + 96) = v95;
    if (*(char *)(a2 + 127) < 0) {
      operator delete(*v67);
    }
    *(_OWORD *)int v67 = *(_OWORD *)__p;
    *(void *)(a2 + 120) = v97;
    HIBYTE(v97) = 0;
    LOBYTE(__p[0]) = 0;
    *(unsigned char *)(a2 + 128) = v98;
    sub_1CD41C56C(a2 + 136, (uint64_t)&v99);
    if (v99 != v101) {
      free(v99);
    }
    if (SHIBYTE(v97) < 0) {
      operator delete(__p[0]);
    }
    if (v90 != v89) {
      free(v90);
    }
  }
}

void sub_1CC8002C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v117[8] = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *(_DWORD *)(a2 + 96);
  unsigned int v7 = *(_DWORD *)(a1 + 96);
  if (v6 != v7)
  {
    if (v6 < v7) {
      goto LABEL_47;
    }
    goto LABEL_23;
  }
  unsigned int v8 = *(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24);
  unsigned int v9 = *(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 24);
  if (v8 != v9)
  {
    if (v8 > v9) {
      goto LABEL_47;
    }
LABEL_23:
    unsigned int v19 = *(_DWORD *)(a3 + 96);
    if (v19 == v6)
    {
      unsigned int v20 = *(_DWORD *)(a3 + 20) - *(_DWORD *)(a3 + 24);
      unsigned int v21 = *(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24);
      if (v20 == v21)
      {
        char v22 = *(unsigned char *)(a2 + 127);
        if (v22 >= 0) {
          uint64_t v23 = (const void *)(a2 + 104);
        }
        else {
          uint64_t v23 = *(const void **)(a2 + 104);
        }
        if (v22 >= 0) {
          size_t v24 = v22 & 0x7F;
        }
        else {
          size_t v24 = *(void *)(a2 + 112);
        }
        int v25 = *(char *)(a3 + 127);
        if (v25 >= 0) {
          size_t v26 = *(unsigned __int8 *)(a3 + 127);
        }
        else {
          size_t v26 = *(void *)(a3 + 112);
        }
        if (v25 >= 0) {
          long long v27 = (const void *)(a3 + 104);
        }
        else {
          long long v27 = *(const void **)(a3 + 104);
        }
        if (v24 >= v26) {
          size_t v28 = v26;
        }
        else {
          size_t v28 = v24;
        }
        int v29 = memcmp(v27, v23, v28);
        BOOL v30 = v26 < v24;
        if (v29) {
          BOOL v30 = v29 < 0;
        }
        if (!v30) {
          return;
        }
      }
      else if (v20 <= v21)
      {
        return;
      }
    }
    else if (v19 >= v6)
    {
      return;
    }
    unsigned int v105 = v110;
    double v44 = *(double *)a2;
    BOOL v43 = *(const void **)(a2 + 8);
    if (v43 == *(const void **)a2)
    {
      unsigned int v106 = v110;
      uint64_t v45 = *(unsigned int *)(a2 + 20);
      if (v45) {
        memmove(v110, v43, 8 * v45);
      }
    }
    else
    {
      unsigned int v106 = *(unsigned char **)(a2 + 8);
      *(double *)(a2 + 8) = v44;
      LODWORD(v45) = *(_DWORD *)(a2 + 20);
    }
    int v107 = *(_DWORD *)(a2 + 16);
    int v108 = v45;
    int v46 = *(_DWORD *)(a2 + 24);
    *(void *)(a2 + 16) = 8;
    *(_DWORD *)(a2 + 24) = 0;
    int v109 = v46;
    unsigned int v111 = v6;
    *(_OWORD *)long long __p = *(_OWORD *)(a2 + 104);
    uint64_t v113 = *(void *)(a2 + 120);
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 120) = 0;
    char v114 = *(unsigned char *)(a2 + 128);
    long long v115 = v117;
    uint64_t v116 = 0x800000000;
    if (*(_DWORD *)(a2 + 144)) {
      sub_1CD41C56C((uint64_t)&v115, a2 + 136);
    }
    int v47 = (void **)(a2 + 104);
    if (a3 != a2) {
      llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)a3);
    }
    *(_DWORD *)(a2 + 96) = *(_DWORD *)(a3 + 96);
    if (*(char *)(a2 + 127) < 0) {
      operator delete(*v47);
    }
    long long v48 = *(_OWORD *)(a3 + 104);
    *(void *)(a2 + 120) = *(void *)(a3 + 120);
    *(_OWORD *)int v47 = v48;
    *(unsigned char *)(a3 + 127) = 0;
    *(unsigned char *)(a3 + 104) = 0;
    *(unsigned char *)(a2 + 128) = *(unsigned char *)(a3 + 128);
    sub_1CD41C56C(a2 + 136, a3 + 136);
    if (&v105 != (unsigned char **)a3) {
      llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)&v105);
    }
    long long v49 = (void **)(a3 + 104);
    *(_DWORD *)(a3 + 96) = v111;
    if (*(char *)(a3 + 127) < 0) {
      operator delete(*v49);
    }
    *(_OWORD *)long long v49 = *(_OWORD *)__p;
    *(void *)(a3 + 120) = v113;
    HIBYTE(v113) = 0;
    LOBYTE(__p[0]) = 0;
    *(unsigned char *)(a3 + 128) = v114;
    sub_1CD41C56C(a3 + 136, (uint64_t)&v115);
    if (v115 != v117) {
      free(v115);
    }
    if (SHIBYTE(v113) < 0) {
      operator delete(__p[0]);
    }
    if (v106 != v105) {
      free(v106);
    }
    unsigned int v50 = *(_DWORD *)(a2 + 96);
    unsigned int v51 = *(_DWORD *)(a1 + 96);
    if (v50 == v51)
    {
      unsigned int v52 = *(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24);
      unsigned int v53 = *(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 24);
      if (v52 == v53)
      {
        char v54 = *(unsigned char *)(a1 + 127);
        if (v54 >= 0) {
          unsigned int v55 = (const void *)(a1 + 104);
        }
        else {
          unsigned int v55 = *(const void **)(a1 + 104);
        }
        if (v54 >= 0) {
          size_t v56 = v54 & 0x7F;
        }
        else {
          size_t v56 = *(void *)(a1 + 112);
        }
        int v57 = *(char *)(a2 + 127);
        if (v57 >= 0) {
          size_t v58 = *(unsigned __int8 *)(a2 + 127);
        }
        else {
          size_t v58 = *(void *)(a2 + 112);
        }
        if (v57 >= 0) {
          unint64_t v59 = (const void *)(a2 + 104);
        }
        else {
          unint64_t v59 = *(const void **)(a2 + 104);
        }
        if (v56 >= v58) {
          size_t v60 = v58;
        }
        else {
          size_t v60 = v56;
        }
        int v61 = memcmp(v59, v55, v60);
        BOOL v62 = v58 < v56;
        if (v61) {
          BOOL v62 = v61 < 0;
        }
        if (!v62) {
          return;
        }
      }
      else if (v52 <= v53)
      {
        return;
      }
    }
    else if (v50 >= v51)
    {
      return;
    }
    unsigned int v105 = v110;
    uint64_t v94 = *(void *)a1;
    int v93 = *(const void **)(a1 + 8);
    if (v93 == *(const void **)a1)
    {
      unsigned int v106 = v110;
      uint64_t v95 = *(unsigned int *)(a1 + 20);
      if (v95) {
        memmove(v110, v93, 8 * v95);
      }
    }
    else
    {
      unsigned int v106 = *(unsigned char **)(a1 + 8);
      *(void *)(a1 + 8) = v94;
      LODWORD(v95) = *(_DWORD *)(a1 + 20);
    }
    int v107 = *(_DWORD *)(a1 + 16);
    int v108 = v95;
    int v96 = *(_DWORD *)(a1 + 24);
    *(void *)(a1 + 16) = 8;
    *(_DWORD *)(a1 + 24) = 0;
    int v109 = v96;
    unsigned int v111 = v51;
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 104);
    uint64_t v113 = *(void *)(a1 + 120);
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    char v114 = *(unsigned char *)(a1 + 128);
    long long v115 = v117;
    uint64_t v116 = 0x800000000;
    if (*(_DWORD *)(a1 + 144)) {
      sub_1CD41C56C((uint64_t)&v115, a1 + 136);
    }
    if (a2 != a1) {
      llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)a2);
    }
    uint64_t v97 = (void **)(a1 + 104);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
    if (*(char *)(a1 + 127) < 0) {
      operator delete(*v97);
    }
    long long v98 = *(_OWORD *)v47;
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)uint64_t v97 = v98;
    *(unsigned char *)(a2 + 127) = 0;
    *(unsigned char *)(a2 + 104) = 0;
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
    sub_1CD41C56C(a1 + 136, a2 + 136);
    if (&v105 != (unsigned char **)a2) {
      llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)&v105);
    }
    *(_DWORD *)(a2 + 96) = v111;
    if (*(char *)(a2 + 127) < 0) {
      operator delete(*v47);
    }
    *(_OWORD *)int v47 = *(_OWORD *)__p;
    *(void *)(a2 + 120) = v113;
    HIBYTE(v113) = 0;
    LOBYTE(__p[0]) = 0;
    *(unsigned char *)(a2 + 128) = v114;
    sub_1CD41C56C(a2 + 136, (uint64_t)&v115);
    unsigned int v70 = v115;
    if (v115 == v117) {
      goto LABEL_126;
    }
LABEL_125:
    free(v70);
LABEL_126:
    if (SHIBYTE(v113) < 0) {
      operator delete(__p[0]);
    }
    if (v106 != v105) {
      free(v106);
    }
    return;
  }
  char v10 = *(unsigned char *)(a1 + 127);
  if (v10 >= 0) {
    unsigned int v11 = (const void *)(a1 + 104);
  }
  else {
    unsigned int v11 = *(const void **)(a1 + 104);
  }
  if (v10 >= 0) {
    size_t v12 = v10 & 0x7F;
  }
  else {
    size_t v12 = *(void *)(a1 + 112);
  }
  int v13 = *(char *)(a2 + 127);
  if (v13 >= 0) {
    size_t v14 = *(unsigned __int8 *)(a2 + 127);
  }
  else {
    size_t v14 = *(void *)(a2 + 112);
  }
  if (v13 >= 0) {
    uint64_t v15 = (const void *)(a2 + 104);
  }
  else {
    uint64_t v15 = *(const void **)(a2 + 104);
  }
  if (v12 >= v14) {
    size_t v16 = v14;
  }
  else {
    size_t v16 = v12;
  }
  int v17 = memcmp(v15, v11, v16);
  BOOL v18 = v14 < v12;
  if (v17) {
    BOOL v18 = v17 < 0;
  }
  if (!v18) {
    goto LABEL_23;
  }
LABEL_47:
  unsigned int v31 = *(_DWORD *)(a3 + 96);
  if (v31 != v6)
  {
    if (v31 >= v6) {
      goto LABEL_133;
    }
    goto LABEL_111;
  }
  unsigned int v32 = *(_DWORD *)(a3 + 20) - *(_DWORD *)(a3 + 24);
  unsigned int v33 = *(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24);
  if (v32 != v33)
  {
    if (v32 <= v33) {
      goto LABEL_133;
    }
    goto LABEL_111;
  }
  char v34 = *(unsigned char *)(a2 + 127);
  if (v34 >= 0) {
    char v35 = (const void *)(a2 + 104);
  }
  else {
    char v35 = *(const void **)(a2 + 104);
  }
  if (v34 >= 0) {
    size_t v36 = v34 & 0x7F;
  }
  else {
    size_t v36 = *(void *)(a2 + 112);
  }
  int v37 = *(char *)(a3 + 127);
  if (v37 >= 0) {
    size_t v38 = *(unsigned __int8 *)(a3 + 127);
  }
  else {
    size_t v38 = *(void *)(a3 + 112);
  }
  if (v37 >= 0) {
    size_t v39 = (const void *)(a3 + 104);
  }
  else {
    size_t v39 = *(const void **)(a3 + 104);
  }
  if (v36 >= v38) {
    size_t v40 = v38;
  }
  else {
    size_t v40 = v36;
  }
  int v41 = memcmp(v39, v35, v40);
  BOOL v42 = v38 < v36;
  if (v41) {
    BOOL v42 = v41 < 0;
  }
  if (v42)
  {
LABEL_111:
    unsigned int v105 = v110;
    uint64_t v64 = *(void *)a1;
    unsigned int v63 = *(const void **)(a1 + 8);
    if (v63 == *(const void **)a1)
    {
      unsigned int v106 = v110;
      uint64_t v65 = *(unsigned int *)(a1 + 20);
      if (v65) {
        memmove(v110, v63, 8 * v65);
      }
    }
    else
    {
      unsigned int v106 = *(unsigned char **)(a1 + 8);
      *(void *)(a1 + 8) = v64;
      LODWORD(v65) = *(_DWORD *)(a1 + 20);
    }
    int v107 = *(_DWORD *)(a1 + 16);
    int v108 = v65;
    int v66 = *(_DWORD *)(a1 + 24);
    *(void *)(a1 + 16) = 8;
    *(_DWORD *)(a1 + 24) = 0;
    int v109 = v66;
    unsigned int v111 = v7;
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 104);
    uint64_t v113 = *(void *)(a1 + 120);
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    char v114 = *(unsigned char *)(a1 + 128);
    long long v115 = v117;
    uint64_t v116 = 0x800000000;
    if (*(_DWORD *)(a1 + 144)) {
      sub_1CD41C56C((uint64_t)&v115, a1 + 136);
    }
    if (a3 != a1) {
      llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)a3);
    }
    int v67 = (void **)(a1 + 104);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a3 + 96);
    if (*(char *)(a1 + 127) < 0) {
      operator delete(*v67);
    }
    long long v68 = *(_OWORD *)(a3 + 104);
    *(void *)(a1 + 120) = *(void *)(a3 + 120);
    *(_OWORD *)int v67 = v68;
    *(unsigned char *)(a3 + 127) = 0;
    *(unsigned char *)(a3 + 104) = 0;
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a3 + 128);
    sub_1CD41C56C(a1 + 136, a3 + 136);
    if (&v105 != (unsigned char **)a3) {
      llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)&v105);
    }
    unsigned int v69 = (void **)(a3 + 104);
    *(_DWORD *)(a3 + 96) = v111;
    if (*(char *)(a3 + 127) < 0) {
      operator delete(*v69);
    }
    *(_OWORD *)unsigned int v69 = *(_OWORD *)__p;
    *(void *)(a3 + 120) = v113;
    HIBYTE(v113) = 0;
    LOBYTE(__p[0]) = 0;
    *(unsigned char *)(a3 + 128) = v114;
    sub_1CD41C56C(a3 + 136, (uint64_t)&v115);
    unsigned int v70 = v115;
    if (v115 == v117) {
      goto LABEL_126;
    }
    goto LABEL_125;
  }
LABEL_133:
  unsigned int v105 = v110;
  uint64_t v72 = *(void *)a1;
  unsigned int v71 = *(const void **)(a1 + 8);
  if (v71 == *(const void **)a1)
  {
    unsigned int v106 = v110;
    uint64_t v73 = *(unsigned int *)(a1 + 20);
    if (v73) {
      memmove(v110, v71, 8 * v73);
    }
  }
  else
  {
    unsigned int v106 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v72;
    LODWORD(v73) = *(_DWORD *)(a1 + 20);
  }
  int v107 = *(_DWORD *)(a1 + 16);
  int v108 = v73;
  int v74 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  int v109 = v74;
  unsigned int v111 = v7;
  *(_OWORD *)long long __p = *(_OWORD *)(a1 + 104);
  uint64_t v113 = *(void *)(a1 + 120);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  char v114 = *(unsigned char *)(a1 + 128);
  long long v115 = v117;
  uint64_t v116 = 0x800000000;
  if (*(_DWORD *)(a1 + 144)) {
    sub_1CD41C56C((uint64_t)&v115, a1 + 136);
  }
  if (a2 != a1) {
    llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)a2);
  }
  size_t v75 = (void **)(a1 + 104);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*v75);
  }
  int v76 = (void **)(a2 + 104);
  long long v77 = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_OWORD *)size_t v75 = v77;
  *(unsigned char *)(a2 + 127) = 0;
  *(unsigned char *)(a2 + 104) = 0;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  sub_1CD41C56C(a1 + 136, a2 + 136);
  if (&v105 != (unsigned char **)a2) {
    llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)&v105);
  }
  *(_DWORD *)(a2 + 96) = v111;
  if (*(char *)(a2 + 127) < 0) {
    operator delete(*v76);
  }
  *(_OWORD *)int v76 = *(_OWORD *)__p;
  *(void *)(a2 + 120) = v113;
  HIBYTE(v113) = 0;
  LOBYTE(__p[0]) = 0;
  *(unsigned char *)(a2 + 128) = v114;
  sub_1CD41C56C(a2 + 136, (uint64_t)&v115);
  if (v115 != v117) {
    free(v115);
  }
  if (SHIBYTE(v113) < 0) {
    operator delete(__p[0]);
  }
  if (v106 != v105) {
    free(v106);
  }
  unsigned int v78 = *(_DWORD *)(a3 + 96);
  unsigned int v79 = *(_DWORD *)(a2 + 96);
  if (v78 != v79)
  {
    if (v78 >= v79) {
      return;
    }
    goto LABEL_192;
  }
  unsigned int v80 = *(_DWORD *)(a3 + 20) - *(_DWORD *)(a3 + 24);
  unsigned int v81 = *(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24);
  if (v80 != v81)
  {
    if (v80 <= v81) {
      return;
    }
LABEL_192:
    unsigned int v105 = v110;
    double v100 = *(double *)a2;
    size_t v99 = *(const void **)(a2 + 8);
    if (v99 == *(const void **)a2)
    {
      unsigned int v106 = v110;
      uint64_t v101 = *(unsigned int *)(a2 + 20);
      if (v101) {
        memmove(v110, v99, 8 * v101);
      }
    }
    else
    {
      unsigned int v106 = *(unsigned char **)(a2 + 8);
      *(double *)(a2 + 8) = v100;
      LODWORD(v101) = *(_DWORD *)(a2 + 20);
    }
    int v107 = *(_DWORD *)(a2 + 16);
    int v108 = v101;
    int v102 = *(_DWORD *)(a2 + 24);
    *(void *)(a2 + 16) = 8;
    *(_DWORD *)(a2 + 24) = 0;
    int v109 = v102;
    unsigned int v111 = v79;
    *(_OWORD *)long long __p = *(_OWORD *)v76;
    uint64_t v113 = *(void *)(a2 + 120);
    *int v76 = 0;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 120) = 0;
    char v114 = *(unsigned char *)(a2 + 128);
    long long v115 = v117;
    uint64_t v116 = 0x800000000;
    if (*(_DWORD *)(a2 + 144)) {
      sub_1CD41C56C((uint64_t)&v115, a2 + 136);
    }
    if (a3 != a2) {
      llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)a3);
    }
    *(_DWORD *)(a2 + 96) = *(_DWORD *)(a3 + 96);
    if (*(char *)(a2 + 127) < 0) {
      operator delete(*v76);
    }
    long long v103 = *(_OWORD *)(a3 + 104);
    *(void *)(a2 + 120) = *(void *)(a3 + 120);
    *(_OWORD *)int v76 = v103;
    *(unsigned char *)(a3 + 127) = 0;
    *(unsigned char *)(a3 + 104) = 0;
    *(unsigned char *)(a2 + 128) = *(unsigned char *)(a3 + 128);
    sub_1CD41C56C(a2 + 136, a3 + 136);
    if (&v105 != (unsigned char **)a3) {
      llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)&v105);
    }
    unint64_t v104 = (void **)(a3 + 104);
    *(_DWORD *)(a3 + 96) = v111;
    if (*(char *)(a3 + 127) < 0) {
      operator delete(*v104);
    }
    *(_OWORD *)unint64_t v104 = *(_OWORD *)__p;
    *(void *)(a3 + 120) = v113;
    HIBYTE(v113) = 0;
    LOBYTE(__p[0]) = 0;
    *(unsigned char *)(a3 + 128) = v114;
    sub_1CD41C56C(a3 + 136, (uint64_t)&v115);
    unsigned int v70 = v115;
    if (v115 == v117) {
      goto LABEL_126;
    }
    goto LABEL_125;
  }
  char v82 = *(unsigned char *)(a2 + 127);
  BOOL v83 = v82 < 0;
  if (v82 >= 0) {
    uint64_t v84 = (const void *)(a2 + 104);
  }
  else {
    uint64_t v84 = *(const void **)(a2 + 104);
  }
  size_t v85 = v82 & 0x7F;
  if (v83) {
    size_t v86 = *(void *)(a2 + 112);
  }
  else {
    size_t v86 = v85;
  }
  int v87 = *(char *)(a3 + 127);
  if (v87 >= 0) {
    size_t v88 = *(unsigned __int8 *)(a3 + 127);
  }
  else {
    size_t v88 = *(void *)(a3 + 112);
  }
  if (v87 >= 0) {
    uint64_t v89 = (const void *)(a3 + 104);
  }
  else {
    uint64_t v89 = *(const void **)(a3 + 104);
  }
  if (v86 >= v88) {
    size_t v90 = v88;
  }
  else {
    size_t v90 = v86;
  }
  int v91 = memcmp(v89, v84, v90);
  BOOL v92 = v88 < v86;
  if (v91) {
    BOOL v92 = v91 < 0;
  }
  if (v92) {
    goto LABEL_192;
  }
}

BOOL sub_1CC800E40(uint64_t a1, uint64_t a2)
{
  v75[8] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x84BDA12F684BDA13 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unsigned int v6 = *(_DWORD *)(a2 - 120);
      unsigned int v7 = *(_DWORD *)(a1 + 96);
      if (v6 != v7)
      {
        if (v6 >= v7) {
          return result;
        }
        goto LABEL_108;
      }
      unsigned int v8 = *(_DWORD *)(a2 - 196) - *(_DWORD *)(a2 - 192);
      unsigned int v9 = *(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 24);
      if (v8 != v9)
      {
        if (v8 <= v9) {
          return result;
        }
LABEL_108:
        unsigned int v63 = v68;
        uint64_t v56 = *(void *)a1;
        unsigned int v55 = *(const void **)(a1 + 8);
        if (v55 == *(const void **)a1)
        {
          uint64_t v64 = v68;
          uint64_t v57 = *(unsigned int *)(a1 + 20);
          if (v57) {
            memmove(v68, v55, 8 * v57);
          }
        }
        else
        {
          uint64_t v64 = *(unsigned char **)(a1 + 8);
          *(void *)(a1 + 8) = v56;
          LODWORD(v57) = *(_DWORD *)(a1 + 20);
        }
        size_t v58 = (void *)(a2 - 216);
        int v65 = *(_DWORD *)(a1 + 16);
        int v66 = v57;
        int v59 = *(_DWORD *)(a1 + 24);
        *(void *)(a1 + 16) = 8;
        *(_DWORD *)(a1 + 24) = 0;
        int v67 = v59;
        unsigned int v69 = v7;
        *(_OWORD *)long long __p = *(_OWORD *)(a1 + 104);
        uint64_t v71 = *(void *)(a1 + 120);
        *(void *)(a1 + 104) = 0;
        *(void *)(a1 + 112) = 0;
        *(void *)(a1 + 120) = 0;
        char v72 = *(unsigned char *)(a1 + 128);
        uint64_t v73 = v75;
        uint64_t v74 = 0x800000000;
        if (*(_DWORD *)(a1 + 144)) {
          sub_1CD41C56C((uint64_t)&v73, a1 + 136);
        }
        if (v58 != (void *)a1) {
          llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)(a2 - 216));
        }
        size_t v60 = (void **)(a1 + 104);
        *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 - 120);
        if (*(char *)(a1 + 127) < 0) {
          operator delete(*v60);
        }
        int v61 = (void **)(a2 - 112);
        long long v62 = *(_OWORD *)(a2 - 112);
        *(void *)(a1 + 120) = *(void *)(a2 - 96);
        *(_OWORD *)size_t v60 = v62;
        *(unsigned char *)(a2 - 89) = 0;
        *(unsigned char *)(a2 - 112) = 0;
        *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 - 88);
        sub_1CD41C56C(a1 + 136, a2 - 80);
        if (&v63 != v58) {
          llvm::SmallPtrSetImplBase::MoveFrom(a2 - 216, 8, (double *)&v63);
        }
        *(_DWORD *)(a2 - 120) = v69;
        if (*(char *)(a2 - 89) < 0) {
          operator delete(*v61);
        }
        *(_OWORD *)int v61 = *(_OWORD *)__p;
        *(void *)(a2 - 96) = v71;
        HIBYTE(v71) = 0;
        LOBYTE(__p[0]) = 0;
        *(unsigned char *)(a2 - 88) = v72;
        sub_1CD41C56C(a2 - 80, (uint64_t)&v73);
        if (v73 != v75) {
          free(v73);
        }
        if (SHIBYTE(v71) < 0) {
          operator delete(__p[0]);
        }
        if (v64 != v63) {
          free(v64);
        }
        return 1;
      }
      char v10 = *(unsigned char *)(a1 + 127);
      if (v10 >= 0) {
        unsigned int v11 = (const void *)(a1 + 104);
      }
      else {
        unsigned int v11 = *(const void **)(a1 + 104);
      }
      if (v10 >= 0) {
        size_t v12 = v10 & 0x7F;
      }
      else {
        size_t v12 = *(void *)(a1 + 112);
      }
      int v13 = *(char *)(a2 - 89);
      if (v13 >= 0) {
        size_t v14 = *(unsigned __int8 *)(a2 - 89);
      }
      else {
        size_t v14 = *(void *)(a2 - 104);
      }
      if (v13 >= 0) {
        uint64_t v15 = (const void *)(a2 - 112);
      }
      else {
        uint64_t v15 = *(const void **)(a2 - 112);
      }
      if (v12 >= v14) {
        size_t v16 = v14;
      }
      else {
        size_t v16 = v12;
      }
      int v17 = memcmp(v15, v11, v16);
      BOOL v18 = v14 < v12;
      if (v17) {
        BOOL v18 = v17 < 0;
      }
      if (v18) {
        goto LABEL_108;
      }
      return 1;
    case 3uLL:
      sub_1CC8002C4(a1, a1 + 216, a2 - 216);
      return 1;
    case 4uLL:
      sub_1CC801540(a1, a1 + 216, a1 + 432, a2 - 216);
      return 1;
    case 5uLL:
      sub_1CC7FF948(a1, a1 + 216, a1 + 432, a1 + 648, a2 - 216);
      return 1;
    default:
      uint64_t v19 = a1 + 432;
      sub_1CC8002C4(a1, a1 + 216, a1 + 432);
      uint64_t v20 = a1 + 648;
      if (a1 + 648 == a2) {
        return 1;
      }
      uint64_t v21 = 0;
      int v22 = 0;
      while (2)
      {
        unsigned int v23 = *(_DWORD *)(v20 + 96);
        unsigned int v24 = *(_DWORD *)(v19 + 96);
        if (v23 == v24)
        {
          unsigned int v25 = *(_DWORD *)(v20 + 20) - *(_DWORD *)(v20 + 24);
          unsigned int v26 = *(_DWORD *)(v19 + 20) - *(_DWORD *)(v19 + 24);
          if (v25 == v26)
          {
            char v27 = *(unsigned char *)(v19 + 127);
            if (v27 >= 0) {
              size_t v28 = (const void *)(v19 + 104);
            }
            else {
              size_t v28 = *(const void **)(v19 + 104);
            }
            if (v27 >= 0) {
              size_t v29 = v27 & 0x7F;
            }
            else {
              size_t v29 = *(void *)(v19 + 112);
            }
            int v30 = *(char *)(v20 + 127);
            if (v30 >= 0) {
              size_t v31 = *(unsigned __int8 *)(v20 + 127);
            }
            else {
              size_t v31 = *(void *)(v20 + 112);
            }
            if (v30 >= 0) {
              unsigned int v32 = (const void *)(v20 + 104);
            }
            else {
              unsigned int v32 = *(const void **)(v20 + 104);
            }
            if (v29 >= v31) {
              size_t v33 = v31;
            }
            else {
              size_t v33 = v29;
            }
            int v34 = memcmp(v32, v28, v33);
            BOOL v35 = v31 < v29;
            if (v34) {
              BOOL v35 = v34 < 0;
            }
            if (!v35) {
              goto LABEL_49;
            }
          }
          else if (v25 <= v26)
          {
            goto LABEL_49;
          }
        }
        else if (v23 >= v24)
        {
          goto LABEL_49;
        }
        unsigned int v63 = v68;
        int v37 = *(const void **)v20;
        size_t v36 = *(const void **)(v20 + 8);
        if (v36 == *(const void **)v20)
        {
          uint64_t v64 = v68;
          uint64_t v38 = *(unsigned int *)(v20 + 20);
          if (v38) {
            memmove(v68, v36, 8 * v38);
          }
        }
        else
        {
          uint64_t v64 = *(unsigned char **)(v20 + 8);
          *(void *)(v20 + 8) = v37;
          LODWORD(v38) = *(_DWORD *)(v20 + 20);
        }
        int v65 = *(_DWORD *)(v20 + 16);
        int v66 = v38;
        int v39 = *(_DWORD *)(v20 + 24);
        *(void *)(v20 + 16) = 8;
        *(_DWORD *)(v20 + 24) = 0;
        int v67 = v39;
        unsigned int v69 = v23;
        *(_OWORD *)long long __p = *(_OWORD *)(v20 + 104);
        uint64_t v71 = *(void *)(v20 + 120);
        *(void *)(v20 + 104) = 0;
        *(void *)(v20 + 112) = 0;
        *(void *)(v20 + 120) = 0;
        char v72 = *(unsigned char *)(v20 + 128);
        uint64_t v73 = v75;
        uint64_t v74 = 0x800000000;
        if (*(_DWORD *)(v20 + 144)) {
          sub_1CD41C56C((uint64_t)&v73, v20 + 136);
        }
        for (uint64_t i = v21; ; i -= 216)
        {
          uint64_t v41 = a1 + i;
          llvm::SmallPtrSetImplBase::MoveFrom(a1 + i + 648, 8, (double *)(a1 + i + 432));
          *(_DWORD *)(a1 + i + 744) = *(_DWORD *)(a1 + i + 528);
          BOOL v42 = (void **)(a1 + i + 752);
          if (*(char *)(a1 + i + 775) < 0) {
            operator delete(*v42);
          }
          *(void *)(v41 + 768) = *(void *)(v41 + 552);
          *(_OWORD *)BOOL v42 = *(_OWORD *)(v41 + 536);
          *(unsigned char *)(v41 + 559) = 0;
          *(unsigned char *)(v41 + 536) = 0;
          *(unsigned char *)(v41 + 776) = *(unsigned char *)(v41 + 560);
          sub_1CD41C56C(v41 + 784, v41 + 568);
          if (i == -432) {
            break;
          }
          unsigned int v43 = *(_DWORD *)(a1 + i + 312);
          if (v69 == v43)
          {
            unsigned int v44 = *(_DWORD *)(a1 + i + 236) - *(_DWORD *)(a1 + i + 240);
            if (v66 - v67 == v44)
            {
              char v45 = *(unsigned char *)(a1 + i + 343);
              if (v45 >= 0) {
                int v46 = (const void *)(a1 + i + 320);
              }
              else {
                int v46 = *(const void **)(a1 + i + 320);
              }
              if (v45 >= 0) {
                size_t v47 = v45 & 0x7F;
              }
              else {
                size_t v47 = *(void *)(a1 + i + 328);
              }
              if (v71 >= 0) {
                long long v48 = (void *)HIBYTE(v71);
              }
              else {
                long long v48 = __p[1];
              }
              if (v71 >= 0) {
                long long v49 = __p;
              }
              else {
                long long v49 = (void **)__p[0];
              }
              if (v47 >= (unint64_t)v48) {
                size_t v50 = (size_t)v48;
              }
              else {
                size_t v50 = v47;
              }
              int v51 = memcmp(v49, v46, v50);
              BOOL v52 = (unint64_t)v48 < v47;
              if (v51) {
                BOOL v52 = v51 < 0;
              }
              if (!v52) {
                goto LABEL_87;
              }
            }
            else if (v66 - v67 <= v44)
            {
              uint64_t v19 = a1 + i + 432;
              goto LABEL_87;
            }
          }
          else if (v69 >= v43)
          {
            goto LABEL_87;
          }
          v19 -= 216;
        }
        uint64_t v19 = a1;
LABEL_87:
        if (&v63 != (unsigned char **)v19) {
          llvm::SmallPtrSetImplBase::MoveFrom(v19, 8, (double *)&v63);
        }
        uint64_t v53 = a1 + i;
        uint64_t v54 = a1 + i + 536;
        *(_DWORD *)(v19 + 96) = v69;
        if (*(char *)(v19 + 127) < 0) {
          operator delete(*(void **)v54);
        }
        *(_OWORD *)uint64_t v54 = *(_OWORD *)__p;
        *(void *)(v54 + 16) = v71;
        HIBYTE(v71) = 0;
        LOBYTE(__p[0]) = 0;
        *(unsigned char *)(v19 + 128) = v72;
        sub_1CD41C56C(v53 + 568, (uint64_t)&v73);
        if (v73 != v75) {
          free(v73);
        }
        if (SHIBYTE(v71) < 0) {
          operator delete(__p[0]);
        }
        if (v64 != v63) {
          free(v64);
        }
        if (++v22 == 8) {
          return v20 + 216 == a2;
        }
LABEL_49:
        uint64_t v19 = v20;
        v21 += 216;
        v20 += 216;
        if (v20 == a2) {
          return 1;
        }
        continue;
      }
  }
}

void sub_1CC801540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v79[8] = *MEMORY[0x1E4F143B8];
  sub_1CC8002C4(a1, a2, a3);
  unsigned int v8 = *(_DWORD *)(a4 + 96);
  unsigned int v9 = *(_DWORD *)(a3 + 96);
  if (v8 == v9)
  {
    unsigned int v10 = *(_DWORD *)(a4 + 20) - *(_DWORD *)(a4 + 24);
    unsigned int v11 = *(_DWORD *)(a3 + 20) - *(_DWORD *)(a3 + 24);
    if (v10 == v11)
    {
      char v12 = *(unsigned char *)(a3 + 127);
      if (v12 >= 0) {
        int v13 = (const void *)(a3 + 104);
      }
      else {
        int v13 = *(const void **)(a3 + 104);
      }
      if (v12 >= 0) {
        size_t v14 = v12 & 0x7F;
      }
      else {
        size_t v14 = *(void *)(a3 + 112);
      }
      int v15 = *(char *)(a4 + 127);
      if (v15 >= 0) {
        size_t v16 = *(unsigned __int8 *)(a4 + 127);
      }
      else {
        size_t v16 = *(void *)(a4 + 112);
      }
      if (v15 >= 0) {
        int v17 = (const void *)(a4 + 104);
      }
      else {
        int v17 = *(const void **)(a4 + 104);
      }
      if (v14 >= v16) {
        size_t v18 = v16;
      }
      else {
        size_t v18 = v14;
      }
      int v19 = memcmp(v17, v13, v18);
      BOOL v20 = v16 < v14;
      if (v19) {
        BOOL v20 = v19 < 0;
      }
      if (!v20) {
        return;
      }
    }
    else if (v10 <= v11)
    {
      return;
    }
  }
  else if (v8 >= v9)
  {
    return;
  }
  int v67 = v72;
  double v22 = *(double *)a3;
  uint64_t v21 = *(const void **)(a3 + 8);
  if (v21 == *(const void **)a3)
  {
    long long v68 = v72;
    uint64_t v23 = *(unsigned int *)(a3 + 20);
    if (v23) {
      memmove(v72, v21, 8 * v23);
    }
  }
  else
  {
    long long v68 = *(unsigned char **)(a3 + 8);
    *(double *)(a3 + 8) = v22;
    LODWORD(v23) = *(_DWORD *)(a3 + 20);
  }
  int v69 = *(_DWORD *)(a3 + 16);
  int v70 = v23;
  int v24 = *(_DWORD *)(a3 + 24);
  *(void *)(a3 + 16) = 8;
  *(_DWORD *)(a3 + 24) = 0;
  int v71 = v24;
  unsigned int v73 = v9;
  *(_OWORD *)long long __p = *(_OWORD *)(a3 + 104);
  uint64_t v75 = *(void *)(a3 + 120);
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = 0;
  char v76 = *(unsigned char *)(a3 + 128);
  long long v77 = v79;
  uint64_t v78 = 0x800000000;
  if (*(_DWORD *)(a3 + 144)) {
    sub_1CD41C56C((uint64_t)&v77, a3 + 136);
  }
  unsigned int v25 = (void **)(a3 + 104);
  if (a4 != a3) {
    llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)a4);
  }
  *(_DWORD *)(a3 + 96) = *(_DWORD *)(a4 + 96);
  if (*(char *)(a3 + 127) < 0) {
    operator delete(*v25);
  }
  long long v26 = *(_OWORD *)(a4 + 104);
  *(void *)(a3 + 120) = *(void *)(a4 + 120);
  *(_OWORD *)unsigned int v25 = v26;
  *(unsigned char *)(a4 + 127) = 0;
  *(unsigned char *)(a4 + 104) = 0;
  *(unsigned char *)(a3 + 128) = *(unsigned char *)(a4 + 128);
  uint64_t v66 = a3 + 136;
  sub_1CD41C56C(a3 + 136, a4 + 136);
  if (&v67 != (unsigned char **)a4) {
    llvm::SmallPtrSetImplBase::MoveFrom(a4, 8, (double *)&v67);
  }
  char v27 = (void **)(a4 + 104);
  *(_DWORD *)(a4 + 96) = v73;
  if (*(char *)(a4 + 127) < 0) {
    operator delete(*v27);
  }
  *(_OWORD *)char v27 = *(_OWORD *)__p;
  *(void *)(a4 + 120) = v75;
  HIBYTE(v75) = 0;
  LOBYTE(__p[0]) = 0;
  *(unsigned char *)(a4 + 128) = v76;
  sub_1CD41C56C(a4 + 136, (uint64_t)&v77);
  if (v77 != v79) {
    free(v77);
  }
  if (SHIBYTE(v75) < 0) {
    operator delete(__p[0]);
  }
  if (v68 != v67) {
    free(v68);
  }
  unsigned int v28 = *(_DWORD *)(a3 + 96);
  unsigned int v29 = *(_DWORD *)(a2 + 96);
  if (v28 == v29)
  {
    unsigned int v30 = *(_DWORD *)(a3 + 20) - *(_DWORD *)(a3 + 24);
    unsigned int v31 = *(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24);
    if (v30 == v31)
    {
      char v32 = *(unsigned char *)(a2 + 127);
      if (v32 >= 0) {
        size_t v33 = (const void *)(a2 + 104);
      }
      else {
        size_t v33 = *(const void **)(a2 + 104);
      }
      if (v32 >= 0) {
        size_t v34 = v32 & 0x7F;
      }
      else {
        size_t v34 = *(void *)(a2 + 112);
      }
      int v35 = *(char *)(a3 + 127);
      if (v35 >= 0) {
        size_t v36 = *(unsigned __int8 *)(a3 + 127);
      }
      else {
        size_t v36 = *(void *)(a3 + 112);
      }
      if (v35 >= 0) {
        int v37 = (const void *)(a3 + 104);
      }
      else {
        int v37 = *(const void **)(a3 + 104);
      }
      if (v34 >= v36) {
        size_t v38 = v36;
      }
      else {
        size_t v38 = v34;
      }
      int v39 = memcmp(v37, v33, v38);
      BOOL v40 = v36 < v34;
      if (v39) {
        BOOL v40 = v39 < 0;
      }
      if (!v40) {
        return;
      }
    }
    else if (v30 <= v31)
    {
      return;
    }
  }
  else if (v28 >= v29)
  {
    return;
  }
  int v67 = v72;
  double v42 = *(double *)a2;
  uint64_t v41 = *(const void **)(a2 + 8);
  if (v41 == *(const void **)a2)
  {
    long long v68 = v72;
    uint64_t v43 = *(unsigned int *)(a2 + 20);
    if (v43) {
      memmove(v72, v41, 8 * v43);
    }
  }
  else
  {
    long long v68 = *(unsigned char **)(a2 + 8);
    *(double *)(a2 + 8) = v42;
    LODWORD(v43) = *(_DWORD *)(a2 + 20);
  }
  int v69 = *(_DWORD *)(a2 + 16);
  int v70 = v43;
  int v44 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  int v71 = v44;
  unsigned int v73 = v29;
  *(_OWORD *)long long __p = *(_OWORD *)(a2 + 104);
  uint64_t v75 = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  char v76 = *(unsigned char *)(a2 + 128);
  long long v77 = v79;
  uint64_t v78 = 0x800000000;
  if (*(_DWORD *)(a2 + 144)) {
    sub_1CD41C56C((uint64_t)&v77, a2 + 136);
  }
  char v45 = (void **)(a2 + 104);
  if (a3 != a2) {
    llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)a3);
  }
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(a3 + 96);
  if (*(char *)(a2 + 127) < 0) {
    operator delete(*v45);
  }
  long long v46 = *(_OWORD *)v25;
  *(void *)(a2 + 120) = *(void *)(a3 + 120);
  *(_OWORD *)char v45 = v46;
  *(unsigned char *)(a3 + 127) = 0;
  *(unsigned char *)(a3 + 104) = 0;
  *(unsigned char *)(a2 + 128) = *(unsigned char *)(a3 + 128);
  sub_1CD41C56C(a2 + 136, v66);
  if (&v67 != (unsigned char **)a3) {
    llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)&v67);
  }
  *(_DWORD *)(a3 + 96) = v73;
  if (*(char *)(a3 + 127) < 0) {
    operator delete(*v25);
  }
  *(_OWORD *)unsigned int v25 = *(_OWORD *)__p;
  *(void *)(a3 + 120) = v75;
  HIBYTE(v75) = 0;
  LOBYTE(__p[0]) = 0;
  *(unsigned char *)(a3 + 128) = v76;
  sub_1CD41C56C(v66, (uint64_t)&v77);
  if (v77 != v79) {
    free(v77);
  }
  if (SHIBYTE(v75) < 0) {
    operator delete(__p[0]);
  }
  if (v68 != v67) {
    free(v68);
  }
  unsigned int v47 = *(_DWORD *)(a2 + 96);
  unsigned int v48 = *(_DWORD *)(a1 + 96);
  if (v47 != v48)
  {
    if (v47 >= v48) {
      return;
    }
    goto LABEL_113;
  }
  unsigned int v49 = *(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24);
  unsigned int v50 = *(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 24);
  if (v49 != v50)
  {
    if (v49 <= v50) {
      return;
    }
    goto LABEL_113;
  }
  char v51 = *(unsigned char *)(a1 + 127);
  if (v51 >= 0) {
    BOOL v52 = (const void *)(a1 + 104);
  }
  else {
    BOOL v52 = *(const void **)(a1 + 104);
  }
  if (v51 >= 0) {
    size_t v53 = v51 & 0x7F;
  }
  else {
    size_t v53 = *(void *)(a1 + 112);
  }
  int v54 = *(char *)(a2 + 127);
  if (v54 >= 0) {
    size_t v55 = *(unsigned __int8 *)(a2 + 127);
  }
  else {
    size_t v55 = *(void *)(a2 + 112);
  }
  if (v54 >= 0) {
    uint64_t v56 = (const void *)(a2 + 104);
  }
  else {
    uint64_t v56 = *(const void **)(a2 + 104);
  }
  if (v53 >= v55) {
    size_t v57 = v55;
  }
  else {
    size_t v57 = v53;
  }
  int v58 = memcmp(v56, v52, v57);
  BOOL v59 = v55 < v53;
  if (v58) {
    BOOL v59 = v58 < 0;
  }
  if (v59)
  {
LABEL_113:
    int v67 = v72;
    uint64_t v61 = *(void *)a1;
    size_t v60 = *(const void **)(a1 + 8);
    if (v60 == *(const void **)a1)
    {
      long long v68 = v72;
      uint64_t v62 = *(unsigned int *)(a1 + 20);
      if (v62) {
        memmove(v72, v60, 8 * v62);
      }
    }
    else
    {
      long long v68 = *(unsigned char **)(a1 + 8);
      *(void *)(a1 + 8) = v61;
      LODWORD(v62) = *(_DWORD *)(a1 + 20);
    }
    int v69 = *(_DWORD *)(a1 + 16);
    int v70 = v62;
    int v63 = *(_DWORD *)(a1 + 24);
    *(void *)(a1 + 16) = 8;
    *(_DWORD *)(a1 + 24) = 0;
    int v71 = v63;
    unsigned int v73 = v48;
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 104);
    uint64_t v75 = *(void *)(a1 + 120);
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    char v76 = *(unsigned char *)(a1 + 128);
    long long v77 = v79;
    uint64_t v78 = 0x800000000;
    if (*(_DWORD *)(a1 + 144)) {
      sub_1CD41C56C((uint64_t)&v77, a1 + 136);
    }
    if (a2 != a1) {
      llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)a2);
    }
    uint64_t v64 = (void **)(a1 + 104);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
    if (*(char *)(a1 + 127) < 0) {
      operator delete(*v64);
    }
    long long v65 = *(_OWORD *)v45;
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)uint64_t v64 = v65;
    *(unsigned char *)(a2 + 127) = 0;
    *(unsigned char *)(a2 + 104) = 0;
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
    sub_1CD41C56C(a1 + 136, a2 + 136);
    if (&v67 != (unsigned char **)a2) {
      llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)&v67);
    }
    *(_DWORD *)(a2 + 96) = v73;
    if (*(char *)(a2 + 127) < 0) {
      operator delete(*v45);
    }
    *(_OWORD *)char v45 = *(_OWORD *)__p;
    *(void *)(a2 + 120) = v75;
    HIBYTE(v75) = 0;
    LOBYTE(__p[0]) = 0;
    *(unsigned char *)(a2 + 128) = v76;
    sub_1CD41C56C(a2 + 136, (uint64_t)&v77);
    if (v77 != v79) {
      free(v77);
    }
    if (SHIBYTE(v75) < 0) {
      operator delete(__p[0]);
    }
    if (v68 != v67) {
      free(v68);
    }
  }
}

uint64_t sub_1CC801C7C(uint64_t result, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5)
{
  int v1030 = (uint64_t **)result;
LABEL_2:
  unint64_t v9 = (unint64_t)a2;
  unsigned int v10 = v1030;
  unsigned int v1026 = a2 - 1;
  while (1)
  {
    unsigned int v11 = v10;
    uint64_t v12 = v9 - (void)v10;
    uint64_t v13 = (uint64_t)(v9 - (void)v10) >> 3;
    int v1030 = v11;
    if (v6 || !v5)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return result;
        case 2:
          size_t v445 = *(a2 - 1);
          size_t v446 = *v1030;
          uint64_t v447 = *a3;
          unsigned int v448 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v445, a3[1]);
          BOOL result = sub_1CC806CF0(*(void *)(v447 + 6936), *(_DWORD *)(v447 + 6952), v446, a3[1]);
          if (v448 != result)
          {
            if (v448 >= result) {
              return result;
            }
            goto LABEL_1138;
          }
          int v449 = (void **)v445[1];
          if (v449)
          {
            unsigned int v450 = 0;
            do
            {
              ++v450;
              int v449 = (void **)v449[1];
            }
            while (v449);
          }
          else
          {
            unsigned int v450 = 0;
          }
          uint64_t v451 = v446[1];
          if (v451)
          {
            unsigned int v452 = 0;
            do
            {
              ++v452;
              uint64_t v451 = *(void *)(v451 + 8);
            }
            while (v451);
          }
          else
          {
            unsigned int v452 = 0;
          }
          BOOL v453 = v450 > v452;
          if (v450 != v452) {
            goto LABEL_1136;
          }
          if ((*((unsigned char *)v445 + 23) & 0x10) != 0)
          {
            uint64_t v454 = **(void **)*v445;
            uint64_t v455 = *(void *)(v454 + 152);
            uint64_t v456 = *(unsigned int *)(v454 + 168);
            if (v456)
            {
              LODWORD(v457) = (v456 - 1) & ((v445 >> 4) ^ (v445 >> 9));
              long long v458 = (uint64_t **)(v455 + 16 * v457);
              long long v459 = *v458;
              if (*v458 != v445)
              {
                int v460 = 1;
                do
                {
                  if (v459 == (uint64_t *)-4096) {
                    goto LABEL_1108;
                  }
                  int v461 = v457 + v460++;
                  uint64_t v457 = v461 & (v456 - 1);
                  long long v459 = *(uint64_t **)(v455 + 16 * v457);
                }
                while (v459 != v445);
                long long v458 = (uint64_t **)(v455 + 16 * v457);
              }
            }
            else
            {
LABEL_1108:
              long long v458 = (uint64_t **)(v455 + 16 * v456);
            }
            uint64_t v890 = (size_t *)v458[1];
            size_t v892 = *v890;
            BOOL result = (uint64_t)(v890 + 2);
            size_t v891 = v892;
            goto LABEL_1110;
          }
          size_t v891 = 0;
          BOOL result = (uint64_t)&byte_1CFBCE98E;
LABEL_1110:
          if ((*((unsigned char *)v446 + 23) & 0x10) != 0)
          {
            uint64_t v893 = **(void **)*v446;
            uint64_t v894 = *(void *)(v893 + 152);
            uint64_t v895 = *(unsigned int *)(v893 + 168);
            if (v895)
            {
              LODWORD(v896) = (v895 - 1) & ((v446 >> 4) ^ (v446 >> 9));
              uint64_t v897 = (uint64_t **)(v894 + 16 * v896);
              uint64_t v898 = *v897;
              if (*v897 != v446)
              {
                int v899 = 1;
                do
                {
                  if (v898 == (uint64_t *)-4096) {
                    goto LABEL_1126;
                  }
                  int v900 = v896 + v899++;
                  uint64_t v896 = v900 & (v895 - 1);
                  uint64_t v898 = *(uint64_t **)(v894 + 16 * v896);
                }
                while (v898 != v446);
                uint64_t v897 = (uint64_t **)(v894 + 16 * v896);
              }
            }
            else
            {
LABEL_1126:
              uint64_t v897 = (uint64_t **)(v894 + 16 * v895);
            }
            unint64_t v912 = v897[1];
            size_t v915 = *v912;
            uint64_t v913 = (char *)(v912 + 2);
            size_t v914 = v915;
            goto LABEL_1128;
          }
          size_t v914 = 0;
          uint64_t v913 = &byte_1CFBCE98E;
LABEL_1128:
          if (v914 >= v891) {
            size_t v916 = v891;
          }
          else {
            size_t v916 = v914;
          }
          if (v916 && (BOOL result = memcmp((const void *)result, v913, v916), result))
          {
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
          else
          {
            BOOL v453 = v891 > v914;
LABEL_1136:
            if (!v453) {
              return result;
            }
          }
LABEL_1138:
          unint64_t v917 = *v1030;
          *int v1030 = *(a2 - 1);
          *(a2 - 1) = v917;
          return result;
        case 3:
          return sub_1CC805508(v11, v11 + 1, v1026, a3);
        case 4:
          return sub_1CC806DAC(v11, v11 + 1, v11 + 2, v1026, a3);
        case 5:
          unsigned int v462 = v11 + 1;
          unint64_t v463 = v11 + 2;
          uint64_t v464 = v1030 + 3;
          sub_1CC806DAC(v1030, v1030 + 1, v1030 + 2, v1030 + 3, a3);
          int v465 = *(a2 - 1);
          unint64_t v466 = v1030[3];
          uint64_t v467 = *a3;
          unsigned int v468 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v465, a3[1]);
          BOOL result = sub_1CC806CF0(*(void *)(v467 + 6936), *(_DWORD *)(v467 + 6952), v466, a3[1]);
          if (v468 != result)
          {
            if (v468 >= result) {
              return result;
            }
            goto LABEL_1151;
          }
          uint64_t v469 = (void **)v465[1];
          if (v469)
          {
            unsigned int v470 = 0;
            do
            {
              ++v470;
              uint64_t v469 = (void **)v469[1];
            }
            while (v469);
          }
          else
          {
            unsigned int v470 = 0;
          }
          int v471 = (void **)v466[1];
          if (v471)
          {
            unsigned int v472 = 0;
            do
            {
              ++v472;
              int v471 = (void **)v471[1];
            }
            while (v471);
          }
          else
          {
            unsigned int v472 = 0;
          }
          BOOL v473 = v470 > v472;
          if (v470 != v472) {
            goto LABEL_1149;
          }
          if ((*((unsigned char *)v465 + 23) & 0x10) != 0)
          {
            uint64_t v474 = **(void **)*v465;
            uint64_t v475 = *(void *)(v474 + 152);
            uint64_t v476 = *(unsigned int *)(v474 + 168);
            if (v476)
            {
              LODWORD(v477) = (v476 - 1) & ((v465 >> 4) ^ (v465 >> 9));
              uint64_t v478 = (uint64_t **)(v475 + 16 * v477);
              uint64_t v479 = *v478;
              if (*v478 != v465)
              {
                int v480 = 1;
                do
                {
                  if (v479 == (uint64_t *)-4096) {
                    goto LABEL_1117;
                  }
                  int v481 = v477 + v480++;
                  uint64_t v477 = v481 & (v476 - 1);
                  uint64_t v479 = *(uint64_t **)(v475 + 16 * v477);
                }
                while (v479 != v465);
                uint64_t v478 = (uint64_t **)(v475 + 16 * v477);
              }
            }
            else
            {
LABEL_1117:
              uint64_t v478 = (uint64_t **)(v475 + 16 * v476);
            }
            unsigned int v901 = (size_t *)v478[1];
            size_t v903 = *v901;
            BOOL result = (uint64_t)(v901 + 2);
            size_t v902 = v903;
            goto LABEL_1119;
          }
          size_t v902 = 0;
          BOOL result = (uint64_t)&byte_1CFBCE98E;
LABEL_1119:
          if ((*((unsigned char *)v466 + 23) & 0x10) != 0)
          {
            uint64_t v904 = **(void **)*v466;
            uint64_t v905 = *(void *)(v904 + 152);
            uint64_t v906 = *(unsigned int *)(v904 + 168);
            if (v906)
            {
              LODWORD(v907) = (v906 - 1) & ((v466 >> 4) ^ (v466 >> 9));
              v908 = (uint64_t **)(v905 + 16 * v907);
              int v909 = *v908;
              if (*v908 != v466)
              {
                int v910 = 1;
                do
                {
                  if (v909 == (uint64_t *)-4096) {
                    goto LABEL_1139;
                  }
                  int v911 = v907 + v910++;
                  uint64_t v907 = v911 & (v906 - 1);
                  int v909 = *(uint64_t **)(v905 + 16 * v907);
                }
                while (v909 != v466);
                v908 = (uint64_t **)(v905 + 16 * v907);
              }
            }
            else
            {
LABEL_1139:
              v908 = (uint64_t **)(v905 + 16 * v906);
            }
            uint64_t v918 = v908[1];
            size_t v921 = *v918;
            unsigned int v919 = (char *)(v918 + 2);
            size_t v920 = v921;
            goto LABEL_1141;
          }
          size_t v920 = 0;
          unsigned int v919 = &byte_1CFBCE98E;
LABEL_1141:
          if (v920 >= v902) {
            size_t v922 = v902;
          }
          else {
            size_t v922 = v920;
          }
          if (v922 && (BOOL result = memcmp((const void *)result, v919, v922), result))
          {
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
          else
          {
            BOOL v473 = v902 > v920;
LABEL_1149:
            if (!v473) {
              return result;
            }
          }
LABEL_1151:
          int v923 = *v464;
          void *v464 = *(a2 - 1);
          *(a2 - 1) = v923;
          int v924 = *v464;
          int v925 = *v463;
          uint64_t v926 = *a3;
          unsigned int v927 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v464, a3[1]);
          BOOL result = sub_1CC806CF0(*(void *)(v926 + 6936), *(_DWORD *)(v926 + 6952), v925, a3[1]);
          if (v927 != result)
          {
            if (v927 >= result) {
              return result;
            }
            goto LABEL_1191;
          }
          uint64_t v928 = v924[1];
          if (v928)
          {
            unsigned int v929 = 0;
            do
            {
              ++v929;
              uint64_t v928 = *(void *)(v928 + 8);
            }
            while (v928);
          }
          else
          {
            unsigned int v929 = 0;
          }
          int v930 = (void **)v925[1];
          if (v930)
          {
            unsigned int v931 = 0;
            do
            {
              ++v931;
              int v930 = (void **)v930[1];
            }
            while (v930);
          }
          else
          {
            unsigned int v931 = 0;
          }
          BOOL v932 = v929 > v931;
          if (v929 != v931) {
            goto LABEL_1189;
          }
          if ((*((unsigned char *)v924 + 23) & 0x10) != 0)
          {
            uint64_t v933 = **(void **)*v924;
            uint64_t v934 = *(void *)(v933 + 152);
            uint64_t v935 = *(unsigned int *)(v933 + 168);
            if (v935)
            {
              LODWORD(v936) = (v935 - 1) & ((v924 >> 4) ^ (v924 >> 9));
              unsigned int v937 = (uint64_t **)(v934 + 16 * v936);
              uint64_t v938 = *v937;
              if (*v937 != v924)
              {
                int v939 = 1;
                do
                {
                  if (v938 == (uint64_t *)-4096) {
                    goto LABEL_1170;
                  }
                  int v940 = v936 + v939++;
                  uint64_t v936 = v940 & (v935 - 1);
                  uint64_t v938 = *(uint64_t **)(v934 + 16 * v936);
                }
                while (v938 != v924);
                unsigned int v937 = (uint64_t **)(v934 + 16 * v936);
              }
            }
            else
            {
LABEL_1170:
              unsigned int v937 = (uint64_t **)(v934 + 16 * v935);
            }
            std::string::size_type v941 = (size_t *)v937[1];
            size_t v943 = *v941;
            BOOL result = (uint64_t)(v941 + 2);
            size_t v942 = v943;
            goto LABEL_1172;
          }
          size_t v942 = 0;
          BOOL result = (uint64_t)&byte_1CFBCE98E;
LABEL_1172:
          if ((*((unsigned char *)v925 + 23) & 0x10) != 0)
          {
            uint64_t v944 = **(void **)*v925;
            uint64_t v945 = *(void *)(v944 + 152);
            uint64_t v946 = *(unsigned int *)(v944 + 168);
            if (v946)
            {
              LODWORD(v947) = (v946 - 1) & ((v925 >> 4) ^ (v925 >> 9));
              uint64_t v948 = (uint64_t **)(v945 + 16 * v947);
              v949 = *v948;
              if (*v948 != v925)
              {
                int v950 = 1;
                do
                {
                  if (v949 == (uint64_t *)-4096) {
                    goto LABEL_1179;
                  }
                  int v951 = v947 + v950++;
                  uint64_t v947 = v951 & (v946 - 1);
                  v949 = *(uint64_t **)(v945 + 16 * v947);
                }
                while (v949 != v925);
                uint64_t v948 = (uint64_t **)(v945 + 16 * v947);
              }
            }
            else
            {
LABEL_1179:
              uint64_t v948 = (uint64_t **)(v945 + 16 * v946);
            }
            unsigned int v952 = v948[1];
            size_t v955 = *v952;
            v953 = (char *)(v952 + 2);
            size_t v954 = v955;
            goto LABEL_1181;
          }
          size_t v954 = 0;
          v953 = &byte_1CFBCE98E;
LABEL_1181:
          if (v954 >= v942) {
            size_t v956 = v942;
          }
          else {
            size_t v956 = v954;
          }
          if (v956 && (BOOL result = memcmp((const void *)result, v953, v956), result))
          {
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
          else
          {
            BOOL v932 = v942 > v954;
LABEL_1189:
            if (!v932) {
              return result;
            }
          }
LABEL_1191:
          v957 = *v463;
          v958 = *v464;
          *unint64_t v463 = *v464;
          void *v464 = v957;
          uint64_t v959 = *v462;
          uint64_t v960 = *a3;
          unsigned int v961 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v958, a3[1]);
          BOOL result = sub_1CC806CF0(*(void *)(v960 + 6936), *(_DWORD *)(v960 + 6952), v959, a3[1]);
          if (v961 != result)
          {
            if (v961 >= result) {
              return result;
            }
            goto LABEL_1231;
          }
          uint64_t v962 = v958[1];
          if (v962)
          {
            unsigned int v963 = 0;
            do
            {
              ++v963;
              uint64_t v962 = *(void *)(v962 + 8);
            }
            while (v962);
          }
          else
          {
            unsigned int v963 = 0;
          }
          unsigned int v964 = (void **)v959[1];
          if (v964)
          {
            unsigned int v965 = 0;
            do
            {
              ++v965;
              unsigned int v964 = (void **)v964[1];
            }
            while (v964);
          }
          else
          {
            unsigned int v965 = 0;
          }
          BOOL v966 = v963 > v965;
          if (v963 != v965) {
            goto LABEL_1229;
          }
          if ((*((unsigned char *)v958 + 23) & 0x10) != 0)
          {
            uint64_t v967 = **(void **)*v958;
            uint64_t v968 = *(void *)(v967 + 152);
            uint64_t v969 = *(unsigned int *)(v967 + 168);
            if (v969)
            {
              LODWORD(v970) = (v969 - 1) & ((v958 >> 4) ^ (v958 >> 9));
              v971 = (uint64_t **)(v968 + 16 * v970);
              v972 = *v971;
              if (*v971 != v958)
              {
                int v973 = 1;
                do
                {
                  if (v972 == (uint64_t *)-4096) {
                    goto LABEL_1210;
                  }
                  int v974 = v970 + v973++;
                  uint64_t v970 = v974 & (v969 - 1);
                  v972 = *(uint64_t **)(v968 + 16 * v970);
                }
                while (v972 != v958);
                v971 = (uint64_t **)(v968 + 16 * v970);
              }
            }
            else
            {
LABEL_1210:
              v971 = (uint64_t **)(v968 + 16 * v969);
            }
            v975 = (size_t *)v971[1];
            size_t v977 = *v975;
            BOOL result = (uint64_t)(v975 + 2);
            size_t v976 = v977;
            goto LABEL_1212;
          }
          size_t v976 = 0;
          BOOL result = (uint64_t)&byte_1CFBCE98E;
LABEL_1212:
          if ((*((unsigned char *)v959 + 23) & 0x10) != 0)
          {
            uint64_t v978 = **(void **)*v959;
            uint64_t v979 = *(void *)(v978 + 152);
            uint64_t v980 = *(unsigned int *)(v978 + 168);
            if (v980)
            {
              LODWORD(v981) = (v980 - 1) & ((v959 >> 4) ^ (v959 >> 9));
              BOOL v982 = (uint64_t **)(v979 + 16 * v981);
              unsigned int v983 = *v982;
              if (*v982 != v959)
              {
                int v984 = 1;
                do
                {
                  if (v983 == (uint64_t *)-4096) {
                    goto LABEL_1219;
                  }
                  int v985 = v981 + v984++;
                  uint64_t v981 = v985 & (v980 - 1);
                  unsigned int v983 = *(uint64_t **)(v979 + 16 * v981);
                }
                while (v983 != v959);
                BOOL v982 = (uint64_t **)(v979 + 16 * v981);
              }
            }
            else
            {
LABEL_1219:
              BOOL v982 = (uint64_t **)(v979 + 16 * v980);
            }
            uint64_t v986 = v982[1];
            size_t v989 = *v986;
            v987 = (char *)(v986 + 2);
            size_t v988 = v989;
            goto LABEL_1221;
          }
          size_t v988 = 0;
          v987 = &byte_1CFBCE98E;
LABEL_1221:
          if (v988 >= v976) {
            size_t v990 = v976;
          }
          else {
            size_t v990 = v988;
          }
          if (v990 && (BOOL result = memcmp((const void *)result, v987, v990), result))
          {
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
          else
          {
            BOOL v966 = v976 > v988;
LABEL_1229:
            if (!v966) {
              return result;
            }
          }
LABEL_1231:
          v991 = v1030[1];
          int v992 = v1030[2];
          unsigned int v993 = *v1030;
          v1030[1] = v992;
          v1030[2] = v991;
          uint64_t v994 = *a3;
          unsigned int v995 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v992, a3[1]);
          BOOL result = sub_1CC806CF0(*(void *)(v994 + 6936), *(_DWORD *)(v994 + 6952), v993, a3[1]);
          if (v995 != result)
          {
            if (v995 >= result) {
              return result;
            }
            goto LABEL_1247;
          }
          v996 = (void **)v992[1];
          if (v996)
          {
            unsigned int v997 = 0;
            do
            {
              ++v997;
              v996 = (void **)v996[1];
            }
            while (v996);
          }
          else
          {
            unsigned int v997 = 0;
          }
          uint64_t v998 = v993[1];
          if (v998)
          {
            unsigned int v999 = 0;
            do
            {
              ++v999;
              uint64_t v998 = *(void *)(v998 + 8);
            }
            while (v998);
          }
          else
          {
            unsigned int v999 = 0;
          }
          BOOL v1000 = v997 > v999;
          if (v997 != v999) {
            goto LABEL_1274;
          }
          if ((*((unsigned char *)v992 + 23) & 0x10) == 0)
          {
            size_t v1010 = 0;
            BOOL result = (uint64_t)&byte_1CFBCE98E;
LABEL_1257:
            if ((*((unsigned char *)v993 + 23) & 0x10) == 0)
            {
              size_t v1022 = 0;
              v1021 = &byte_1CFBCE98E;
LABEL_1266:
              if (v1022 >= v1010) {
                size_t v1024 = v1010;
              }
              else {
                size_t v1024 = v1022;
              }
              if (v1024 && (BOOL result = memcmp((const void *)result, v1021, v1024), result))
              {
                if ((result & 0x80000000) != 0) {
                  return result;
                }
              }
              else
              {
                BOOL v1000 = v1010 > v1022;
LABEL_1274:
                if (!v1000) {
                  return result;
                }
              }
LABEL_1247:
              *(int8x16_t *)int v1030 = vextq_s8(*(int8x16_t *)v1030, *(int8x16_t *)v1030, 8uLL);
              return result;
            }
            uint64_t v1012 = **(void **)*v993;
            uint64_t v1013 = *(void *)(v1012 + 152);
            uint64_t v1014 = *(unsigned int *)(v1012 + 168);
            if (v1014)
            {
              LODWORD(v1015) = (v1014 - 1) & ((v993 >> 4) ^ (v993 >> 9));
              v1016 = (uint64_t **)(v1013 + 16 * v1015);
              int v1017 = *v1016;
              if (*v1016 == v993)
              {
LABEL_1265:
                unsigned int v1020 = v1016[1];
                size_t v1023 = *v1020;
                v1021 = (char *)(v1020 + 2);
                size_t v1022 = v1023;
                goto LABEL_1266;
              }
              int v1018 = 1;
              while (v1017 != (uint64_t *)-4096)
              {
                int v1019 = v1015 + v1018++;
                uint64_t v1015 = v1019 & (v1014 - 1);
                int v1017 = *(uint64_t **)(v1013 + 16 * v1015);
                if (v1017 == v993)
                {
                  v1016 = (uint64_t **)(v1013 + 16 * v1015);
                  goto LABEL_1265;
                }
              }
            }
            v1016 = (uint64_t **)(v1013 + 16 * v1014);
            goto LABEL_1265;
          }
          uint64_t v1001 = **(void **)*v992;
          uint64_t v1002 = *(void *)(v1001 + 152);
          uint64_t v1003 = *(unsigned int *)(v1001 + 168);
          if (!v1003) {
            goto LABEL_1255;
          }
          LODWORD(v1004) = (v1003 - 1) & ((v992 >> 4) ^ (v992 >> 9));
          uint64_t v1005 = (uint64_t **)(v1002 + 16 * v1004);
          v1006 = *v1005;
          if (*v1005 != v992)
          {
            int v1007 = 1;
            while (v1006 != (uint64_t *)-4096)
            {
              int v1008 = v1004 + v1007++;
              uint64_t v1004 = v1008 & (v1003 - 1);
              v1006 = *(uint64_t **)(v1002 + 16 * v1004);
              if (v1006 == v992)
              {
                uint64_t v1005 = (uint64_t **)(v1002 + 16 * v1004);
                goto LABEL_1256;
              }
            }
LABEL_1255:
            uint64_t v1005 = (uint64_t **)(v1002 + 16 * v1003);
          }
LABEL_1256:
          int v1009 = (size_t *)v1005[1];
          size_t v1011 = *v1009;
          BOOL result = (uint64_t)(v1009 + 2);
          size_t v1010 = v1011;
          goto LABEL_1257;
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 191) {
      break;
    }
    if (!a4)
    {
      if (v11 == (uint64_t **)v9) {
        return result;
      }
      int64_t v556 = (unint64_t)(v13 - 2) >> 1;
      int64_t v557 = v556;
      uint64_t v558 = v11;
      uint64_t v1035 = v13;
      uint64_t v1027 = v556;
      while (1)
      {
        int64_t v559 = v557;
        if (v556 < v557) {
          goto LABEL_861;
        }
        uint64_t v560 = (2 * v557) | 1;
        v561 = &v558[v560];
        if (2 * v557 + 2 < v13) {
          break;
        }
LABEL_731:
        uint64_t v599 = *v561;
        unsigned int v600 = v558[v559];
        uint64_t v601 = *a3;
        unsigned int v602 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v561, a3[1]);
        BOOL result = sub_1CC806CF0(*(void *)(v601 + 6936), *(_DWORD *)(v601 + 6952), v600, a3[1]);
        int64_t v556 = v1027;
        if (v602 == result)
        {
          uint64_t v603 = v599[1];
          if (v603)
          {
            unsigned int v604 = 0;
            uint64_t v558 = v1030;
            do
            {
              ++v604;
              uint64_t v603 = *(void *)(v603 + 8);
            }
            while (v603);
          }
          else
          {
            unsigned int v604 = 0;
            uint64_t v558 = v1030;
          }
          char v605 = (void **)v600[1];
          if (v605)
          {
            unsigned int v606 = 0;
            do
            {
              ++v606;
              char v605 = (void **)v605[1];
            }
            while (v605);
          }
          else
          {
            unsigned int v606 = 0;
          }
          BOOL v607 = v604 > v606;
          if (v604 == v606)
          {
            if ((*((unsigned char *)v599 + 23) & 0x10) != 0)
            {
              uint64_t v608 = **(void **)*v599;
              uint64_t v609 = *(void *)(v608 + 152);
              uint64_t v610 = *(unsigned int *)(v608 + 168);
              if (v610)
              {
                LODWORD(v611) = (v610 - 1) & ((v599 >> 4) ^ (v599 >> 9));
                unsigned int v612 = (uint64_t **)(v609 + 16 * v611);
                int v613 = *v612;
                if (*v612 != v599)
                {
                  int v614 = 1;
                  do
                  {
                    if (v613 == (uint64_t *)-4096) {
                      goto LABEL_750;
                    }
                    int v615 = v611 + v614++;
                    uint64_t v611 = v615 & (v610 - 1);
                    int v613 = *(uint64_t **)(v609 + 16 * v611);
                  }
                  while (v613 != v599);
                  unsigned int v612 = (uint64_t **)(v609 + 16 * v611);
                }
              }
              else
              {
LABEL_750:
                unsigned int v612 = (uint64_t **)(v609 + 16 * v610);
              }
              int v616 = (size_t *)v612[1];
              size_t v618 = *v616;
              BOOL result = (uint64_t)(v616 + 2);
              size_t v617 = v618;
            }
            else
            {
              size_t v617 = 0;
              BOOL result = (uint64_t)&byte_1CFBCE98E;
            }
            if ((*((unsigned char *)v600 + 23) & 0x10) != 0)
            {
              uint64_t v619 = **(void **)*v600;
              uint64_t v620 = *(void *)(v619 + 152);
              uint64_t v621 = *(unsigned int *)(v619 + 168);
              if (v621)
              {
                LODWORD(v622) = (v621 - 1) & ((v600 >> 4) ^ (v600 >> 9));
                BOOL v623 = (uint64_t **)(v620 + 16 * v622);
                int v624 = *v623;
                if (*v623 != v600)
                {
                  int v625 = 1;
                  do
                  {
                    if (v624 == (uint64_t *)-4096) {
                      goto LABEL_759;
                    }
                    int v626 = v622 + v625++;
                    uint64_t v622 = v626 & (v621 - 1);
                    int v624 = *(uint64_t **)(v620 + 16 * v622);
                  }
                  while (v624 != v600);
                  BOOL v623 = (uint64_t **)(v620 + 16 * v622);
                }
              }
              else
              {
LABEL_759:
                BOOL v623 = (uint64_t **)(v620 + 16 * v621);
              }
              unint64_t v627 = v623[1];
              size_t v630 = *v627;
              uint64_t v628 = (char *)(v627 + 2);
              size_t v629 = v630;
            }
            else
            {
              size_t v629 = 0;
              uint64_t v628 = &byte_1CFBCE98E;
            }
            if (v629 >= v617) {
              size_t v631 = v617;
            }
            else {
              size_t v631 = v629;
            }
            if (v631)
            {
              BOOL result = memcmp((const void *)result, v628, v631);
              if (result)
              {
                if ((result & 0x80000000) == 0) {
                  goto LABEL_861;
                }
                goto LABEL_770;
              }
            }
            BOOL v607 = v617 > v629;
          }
          if (v607) {
            goto LABEL_861;
          }
        }
        else
        {
          uint64_t v558 = v1030;
          if (v602 < result) {
            goto LABEL_861;
          }
        }
LABEL_770:
        int v632 = v558[v559];
        int64_t v1025 = v559;
        v558[v559] = *v561;
        if (v1027 < v560) {
          goto LABEL_860;
        }
        while (1)
        {
          unint64_t v1032 = v561;
          uint64_t v633 = 2 * v560;
          uint64_t v560 = (2 * v560) | 1;
          v561 = &v558[v560];
          uint64_t v634 = v633 + 2;
          if (v633 + 2 >= v13) {
            goto LABEL_814;
          }
          uint64_t v635 = *v561;
          int v636 = v561[1];
          uint64_t v637 = *a3;
          unsigned int v638 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v561, a3[1]);
          unsigned int v639 = sub_1CC806CF0(*(void *)(v637 + 6936), *(_DWORD *)(v637 + 6952), v636, a3[1]);
          if (v638 == v639)
          {
            uint64_t v640 = v635[1];
            if (v640)
            {
              unsigned int v641 = 0;
              uint64_t v13 = v1035;
              do
              {
                ++v641;
                uint64_t v640 = *(void *)(v640 + 8);
              }
              while (v640);
            }
            else
            {
              unsigned int v641 = 0;
              uint64_t v13 = v1035;
            }
            unsigned int v642 = (void **)v636[1];
            if (v642)
            {
              unsigned int v643 = 0;
              do
              {
                ++v643;
                unsigned int v642 = (void **)v642[1];
              }
              while (v642);
            }
            else
            {
              unsigned int v643 = 0;
            }
            BOOL v644 = v641 > v643;
            if (v641 != v643) {
              goto LABEL_808;
            }
            if ((*((unsigned char *)v635 + 23) & 0x10) != 0)
            {
              uint64_t v645 = **(void **)*v635;
              uint64_t v646 = *(void *)(v645 + 152);
              uint64_t v647 = *(unsigned int *)(v645 + 168);
              if (v647)
              {
                LODWORD(v648) = (v647 - 1) & ((v635 >> 4) ^ (v635 >> 9));
                unsigned int v649 = (uint64_t **)(v646 + 16 * v648);
                int v650 = *v649;
                if (*v649 != v635)
                {
                  int v651 = 1;
                  do
                  {
                    if (v650 == (uint64_t *)-4096) {
                      goto LABEL_790;
                    }
                    int v652 = v648 + v651++;
                    uint64_t v648 = v652 & (v647 - 1);
                    int v650 = *(uint64_t **)(v646 + 16 * v648);
                  }
                  while (v650 != v635);
                  unsigned int v649 = (uint64_t **)(v646 + 16 * v648);
                }
              }
              else
              {
LABEL_790:
                unsigned int v649 = (uint64_t **)(v646 + 16 * v647);
              }
              int v654 = v649[1];
              size_t v657 = *v654;
              BOOL v655 = (char *)(v654 + 2);
              size_t v656 = v657;
            }
            else
            {
              size_t v656 = 0;
              BOOL v655 = &byte_1CFBCE98E;
            }
            if ((*((unsigned char *)v636 + 23) & 0x10) != 0)
            {
              uint64_t v658 = **(void **)*v636;
              uint64_t v659 = *(void *)(v658 + 152);
              uint64_t v660 = *(unsigned int *)(v658 + 168);
              if (v660)
              {
                LODWORD(v661) = (v660 - 1) & ((v636 >> 4) ^ (v636 >> 9));
                uint64_t v662 = (uint64_t **)(v659 + 16 * v661);
                v663 = *v662;
                if (*v662 != v636)
                {
                  int v664 = 1;
                  do
                  {
                    if (v663 == (uint64_t *)-4096) {
                      goto LABEL_799;
                    }
                    int v665 = v661 + v664++;
                    uint64_t v661 = v665 & (v660 - 1);
                    v663 = *(uint64_t **)(v659 + 16 * v661);
                  }
                  while (v663 != v636);
                  uint64_t v662 = (uint64_t **)(v659 + 16 * v661);
                }
              }
              else
              {
LABEL_799:
                uint64_t v662 = (uint64_t **)(v659 + 16 * v660);
              }
              BOOL v666 = v662[1];
              size_t v669 = *v666;
              unsigned int v667 = (char *)(v666 + 2);
              size_t v668 = v669;
            }
            else
            {
              size_t v668 = 0;
              unsigned int v667 = &byte_1CFBCE98E;
            }
            if (v668 >= v656) {
              size_t v670 = v656;
            }
            else {
              size_t v670 = v668;
            }
            if (!v670 || (int v671 = memcmp(v655, v667, v670)) == 0)
            {
              BOOL v644 = v656 > v668;
LABEL_808:
              BOOL v653 = v644;
              goto LABEL_811;
            }
            BOOL v653 = v671 >= 0;
          }
          else
          {
            BOOL v653 = v638 < v639;
            uint64_t v13 = v1035;
          }
LABEL_811:
          if (v653)
          {
            ++v561;
            uint64_t v560 = v634;
          }
          int64_t v556 = v1027;
LABEL_814:
          uint64_t v672 = *v561;
          uint64_t v673 = *a3;
          unsigned int v674 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v561, a3[1]);
          BOOL result = sub_1CC806CF0(*(void *)(v673 + 6936), *(_DWORD *)(v673 + 6952), v632, a3[1]);
          if (v674 != result)
          {
            uint64_t v558 = v1030;
            if (v674 < result) {
              break;
            }
            goto LABEL_853;
          }
          uint64_t v675 = v672[1];
          if (v675)
          {
            unsigned int v676 = 0;
            uint64_t v558 = v1030;
            do
            {
              ++v676;
              uint64_t v675 = *(void *)(v675 + 8);
            }
            while (v675);
          }
          else
          {
            unsigned int v676 = 0;
            uint64_t v558 = v1030;
          }
          v677 = (void **)v632[1];
          if (v677)
          {
            unsigned int v678 = 0;
            do
            {
              ++v678;
              v677 = (void **)v677[1];
            }
            while (v677);
          }
          else
          {
            unsigned int v678 = 0;
          }
          BOOL v679 = v676 > v678;
          if (v676 == v678)
          {
            if ((*((unsigned char *)v672 + 23) & 0x10) != 0)
            {
              uint64_t v680 = **(void **)*v672;
              uint64_t v681 = *(void *)(v680 + 152);
              uint64_t v682 = *(unsigned int *)(v680 + 168);
              if (v682)
              {
                LODWORD(v683) = (v682 - 1) & ((v672 >> 4) ^ (v672 >> 9));
                v684 = (uint64_t **)(v681 + 16 * v683);
                uint64_t v685 = *v684;
                if (*v684 != v672)
                {
                  int v686 = 1;
                  do
                  {
                    if (v685 == (uint64_t *)-4096) {
                      goto LABEL_833;
                    }
                    int v687 = v683 + v686++;
                    uint64_t v683 = v687 & (v682 - 1);
                    uint64_t v685 = *(uint64_t **)(v681 + 16 * v683);
                  }
                  while (v685 != v672);
                  v684 = (uint64_t **)(v681 + 16 * v683);
                }
              }
              else
              {
LABEL_833:
                v684 = (uint64_t **)(v681 + 16 * v682);
              }
              uint64_t v688 = (size_t *)v684[1];
              size_t v690 = *v688;
              BOOL result = (uint64_t)(v688 + 2);
              size_t v689 = v690;
            }
            else
            {
              size_t v689 = 0;
              BOOL result = (uint64_t)&byte_1CFBCE98E;
            }
            if ((*((unsigned char *)v632 + 23) & 0x10) != 0)
            {
              uint64_t v691 = **(void **)*v632;
              uint64_t v692 = *(void *)(v691 + 152);
              uint64_t v693 = *(unsigned int *)(v691 + 168);
              if (v693)
              {
                LODWORD(v694) = (v693 - 1) & ((v632 >> 4) ^ (v632 >> 9));
                BOOL v695 = (uint64_t **)(v692 + 16 * v694);
                unsigned int v696 = *v695;
                if (*v695 != v632)
                {
                  int v697 = 1;
                  do
                  {
                    if (v696 == (uint64_t *)-4096) {
                      goto LABEL_842;
                    }
                    int v698 = v694 + v697++;
                    uint64_t v694 = v698 & (v693 - 1);
                    unsigned int v696 = *(uint64_t **)(v692 + 16 * v694);
                  }
                  while (v696 != v632);
                  BOOL v695 = (uint64_t **)(v692 + 16 * v694);
                }
              }
              else
              {
LABEL_842:
                BOOL v695 = (uint64_t **)(v692 + 16 * v693);
              }
              v699 = v695[1];
              size_t v702 = *v699;
              int v700 = (char *)(v699 + 2);
              size_t v701 = v702;
            }
            else
            {
              size_t v701 = 0;
              int v700 = &byte_1CFBCE98E;
            }
            if (v701 >= v689) {
              size_t v703 = v689;
            }
            else {
              size_t v703 = v701;
            }
            if (v703)
            {
              BOOL result = memcmp((const void *)result, v700, v703);
              if (result)
              {
                if ((result & 0x80000000) == 0) {
                  break;
                }
                goto LABEL_853;
              }
            }
            BOOL v679 = v689 > v701;
          }
          if (v679) {
            break;
          }
LABEL_853:
          *unint64_t v1032 = *v561;
          if (v556 < v560) {
            goto LABEL_860;
          }
        }
        v561 = v1032;
LABEL_860:
        unsigned int *v561 = v632;
        int64_t v559 = v1025;
LABEL_861:
        int64_t v557 = v559 - 1;
        if (!v559)
        {
LABEL_913:
          uint64_t v743 = 0;
          std::string::size_type v744 = v1030;
          v1028 = *v1030;
          int64_t v745 = (unint64_t)(v13 - 2) >> 1;
          int64_t v1033 = v745;
          uint64_t v1036 = v13;
          while (1)
          {
            int v746 = &v744[v743 + 1];
            uint64_t v747 = (2 * v743) | 1;
            uint64_t v748 = 2 * v743 + 2;
            if (v748 < v13) {
              break;
            }
LABEL_957:
            *std::string::size_type v744 = *v746;
            std::string::size_type v744 = v746;
            uint64_t v743 = v747;
            if (v747 > v745)
            {
              unsigned int v783 = a2 - 1;
              BOOL v6 = v746 == --a2;
              if (v6)
              {
                *int v746 = v1028;
                goto LABEL_1007;
              }
              *int v746 = *v783;
              *unsigned int v783 = v1028;
              uint64_t v784 = (char *)v746 - (char *)v1030 + 8;
              if (v784 >= 9)
              {
                unint64_t v785 = ((unint64_t)v784 >> 3) - 2;
                unint64_t v705 = v785 >> 1;
                int v739 = &v1030[v785 >> 1];
                int v786 = *v739;
                int v787 = *v746;
                uint64_t v788 = *a3;
                unsigned int v789 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v739, a3[1]);
                BOOL result = sub_1CC806CF0(*(void *)(v788 + 6936), *(_DWORD *)(v788 + 6952), v787, a3[1]);
                if (v789 != result)
                {
                  uint64_t v13 = v1036;
                  if (v789 >= result) {
                    goto LABEL_1007;
                  }
                  goto LABEL_1004;
                }
                uint64_t v790 = v786[1];
                if (v790)
                {
                  unsigned int v791 = 0;
                  uint64_t v13 = v1036;
                  do
                  {
                    ++v791;
                    uint64_t v790 = *(void *)(v790 + 8);
                  }
                  while (v790);
                }
                else
                {
                  unsigned int v791 = 0;
                  uint64_t v13 = v1036;
                }
                int v792 = (void **)v787[1];
                if (v792)
                {
                  unsigned int v793 = 0;
                  do
                  {
                    ++v793;
                    int v792 = (void **)v792[1];
                  }
                  while (v792);
                }
                else
                {
                  unsigned int v793 = 0;
                }
                BOOL v794 = v791 > v793;
                if (v791 == v793)
                {
                  if ((*((unsigned char *)v786 + 23) & 0x10) != 0)
                  {
                    uint64_t v795 = **(void **)*v786;
                    uint64_t v796 = *(void *)(v795 + 152);
                    uint64_t v797 = *(unsigned int *)(v795 + 168);
                    if (!v797) {
                      goto LABEL_983;
                    }
                    LODWORD(v798) = (v797 - 1) & ((v786 >> 4) ^ (v786 >> 9));
                    uint64_t v799 = (uint64_t **)(v796 + 16 * v798);
                    uint64_t v800 = *v799;
                    if (*v799 != v786)
                    {
                      int v801 = 1;
                      while (v800 != (uint64_t *)-4096)
                      {
                        int v802 = v798 + v801++;
                        uint64_t v798 = v802 & (v797 - 1);
                        uint64_t v800 = *(uint64_t **)(v796 + 16 * v798);
                        if (v800 == v786)
                        {
                          uint64_t v799 = (uint64_t **)(v796 + 16 * v798);
                          goto LABEL_984;
                        }
                      }
LABEL_983:
                      uint64_t v799 = (uint64_t **)(v796 + 16 * v797);
                    }
LABEL_984:
                    int v803 = (size_t *)v799[1];
                    size_t v804 = *v803;
                    BOOL result = (uint64_t)(v803 + 2);
                    size_t v740 = v804;
                  }
                  else
                  {
                    size_t v740 = 0;
                    BOOL result = (uint64_t)&byte_1CFBCE98E;
                  }
                  if ((*((unsigned char *)v787 + 23) & 0x10) != 0)
                  {
                    uint64_t v805 = **(void **)*v787;
                    uint64_t v806 = *(void *)(v805 + 152);
                    uint64_t v807 = *(unsigned int *)(v805 + 168);
                    if (!v807) {
                      goto LABEL_992;
                    }
                    LODWORD(v808) = (v807 - 1) & ((v787 >> 4) ^ (v787 >> 9));
                    v809 = (uint64_t **)(v806 + 16 * v808);
                    unint64_t v810 = *v809;
                    if (*v809 != v787)
                    {
                      int v811 = 1;
                      while (v810 != (uint64_t *)-4096)
                      {
                        int v812 = v808 + v811++;
                        uint64_t v808 = v812 & (v807 - 1);
                        unint64_t v810 = *(uint64_t **)(v806 + 16 * v808);
                        if (v810 == v787)
                        {
                          v809 = (uint64_t **)(v806 + 16 * v808);
                          goto LABEL_993;
                        }
                      }
LABEL_992:
                      v809 = (uint64_t **)(v806 + 16 * v807);
                    }
LABEL_993:
                    unint64_t v813 = v809[1];
                    size_t v814 = *v813;
                    unsigned int v742 = (char *)(v813 + 2);
                    size_t v741 = v814;
                  }
                  else
                  {
                    size_t v741 = 0;
                    unsigned int v742 = &byte_1CFBCE98E;
                  }
                  if (v741 >= v740) {
                    size_t v815 = v740;
                  }
                  else {
                    size_t v815 = v741;
                  }
                  if (v815)
                  {
                    BOOL result = memcmp((const void *)result, v742, v815);
                    if (result)
                    {
                      if ((result & 0x80000000) != 0) {
                        goto LABEL_1007;
                      }
LABEL_1004:
                      unint64_t v816 = *v746;
                      *int v746 = *v739;
                      if (v785 < 2)
                      {
LABEL_1005:
                        BOOL v706 = v739;
LABEL_1006:
                        void *v706 = v816;
                        uint64_t v13 = v1036;
                        goto LABEL_1007;
                      }
                      while (2)
                      {
                        unint64_t v704 = v705 - 1;
                        unint64_t v705 = (v705 - 1) >> 1;
                        BOOL v706 = &v1030[v705];
                        unsigned int v707 = *v706;
                        uint64_t v708 = *a3;
                        unsigned int v709 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v706, a3[1]);
                        BOOL result = sub_1CC806CF0(*(void *)(v708 + 6936), *(_DWORD *)(v708 + 6952), v816, a3[1]);
                        if (v709 != result)
                        {
                          if (v709 >= result) {
                            goto LABEL_1005;
                          }
                          goto LABEL_907;
                        }
                        uint64_t v710 = v707[1];
                        if (v710)
                        {
                          unsigned int v711 = 0;
                          do
                          {
                            ++v711;
                            uint64_t v710 = *(void *)(v710 + 8);
                          }
                          while (v710);
                        }
                        else
                        {
                          unsigned int v711 = 0;
                        }
                        int v712 = (void **)v816[1];
                        if (v712)
                        {
                          unsigned int v713 = 0;
                          do
                          {
                            ++v713;
                            int v712 = (void **)v712[1];
                          }
                          while (v712);
                        }
                        else
                        {
                          unsigned int v713 = 0;
                        }
                        BOOL v714 = v711 > v713;
                        if (v711 == v713)
                        {
                          if ((*((unsigned char *)v707 + 23) & 0x10) != 0)
                          {
                            uint64_t v715 = **(void **)*v707;
                            uint64_t v716 = *(void *)(v715 + 152);
                            uint64_t v717 = *(unsigned int *)(v715 + 168);
                            if (!v717) {
                              goto LABEL_886;
                            }
                            LODWORD(v718) = (v717 - 1) & ((v707 >> 4) ^ (v707 >> 9));
                            int v719 = (uint64_t **)(v716 + 16 * v718);
                            BOOL v720 = *v719;
                            if (*v719 != v707)
                            {
                              int v721 = 1;
                              while (v720 != (uint64_t *)-4096)
                              {
                                int v722 = v718 + v721++;
                                uint64_t v718 = v722 & (v717 - 1);
                                BOOL v720 = *(uint64_t **)(v716 + 16 * v718);
                                if (v720 == v707)
                                {
                                  int v719 = (uint64_t **)(v716 + 16 * v718);
                                  goto LABEL_887;
                                }
                              }
LABEL_886:
                              int v719 = (uint64_t **)(v716 + 16 * v717);
                            }
LABEL_887:
                            uint64_t v723 = (size_t *)v719[1];
                            size_t v725 = *v723;
                            BOOL result = (uint64_t)(v723 + 2);
                            size_t v724 = v725;
                          }
                          else
                          {
                            size_t v724 = 0;
                            BOOL result = (uint64_t)&byte_1CFBCE98E;
                          }
                          if ((*((unsigned char *)v816 + 23) & 0x10) != 0)
                          {
                            uint64_t v726 = **(void **)*v816;
                            uint64_t v727 = *(void *)(v726 + 152);
                            uint64_t v728 = *(unsigned int *)(v726 + 168);
                            if (!v728) {
                              goto LABEL_895;
                            }
                            LODWORD(v729) = (v728 - 1) & ((v816 >> 4) ^ (v816 >> 9));
                            unint64_t v730 = (uint64_t **)(v727 + 16 * v729);
                            int v731 = *v730;
                            if (*v730 != v816)
                            {
                              int v732 = 1;
                              while (v731 != (uint64_t *)-4096)
                              {
                                int v733 = v729 + v732++;
                                uint64_t v729 = v733 & (v728 - 1);
                                int v731 = *(uint64_t **)(v727 + 16 * v729);
                                if (v731 == v816)
                                {
                                  unint64_t v730 = (uint64_t **)(v727 + 16 * v729);
                                  goto LABEL_896;
                                }
                              }
LABEL_895:
                              unint64_t v730 = (uint64_t **)(v727 + 16 * v728);
                            }
LABEL_896:
                            v734 = v730[1];
                            size_t v737 = *v734;
                            int v735 = (char *)(v734 + 2);
                            size_t v736 = v737;
                          }
                          else
                          {
                            size_t v736 = 0;
                            int v735 = &byte_1CFBCE98E;
                          }
                          if (v736 >= v724) {
                            size_t v738 = v724;
                          }
                          else {
                            size_t v738 = v736;
                          }
                          if (v738)
                          {
                            BOOL result = memcmp((const void *)result, v735, v738);
                            if (result)
                            {
                              if ((result & 0x80000000) != 0) {
                                goto LABEL_1005;
                              }
                              goto LABEL_907;
                            }
                          }
                          BOOL v714 = v724 > v736;
                        }
                        if (!v714) {
                          goto LABEL_1005;
                        }
LABEL_907:
                        *int v739 = *v706;
                        int v739 = &v1030[v705];
                        if (v704 <= 1) {
                          goto LABEL_1006;
                        }
                        continue;
                      }
                    }
                  }
                  BOOL v794 = v740 > v741;
                }
                if (v794) {
                  goto LABEL_1004;
                }
              }
LABEL_1007:
              BOOL v26 = v13-- <= 2;
              if (v26) {
                return result;
              }
              goto LABEL_913;
            }
          }
          v749 = *v746;
          uint64_t v750 = v744[v743 + 2];
          uint64_t v751 = *a3;
          unsigned int v752 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v746, a3[1]);
          BOOL result = sub_1CC806CF0(*(void *)(v751 + 6936), *(_DWORD *)(v751 + 6952), v750, a3[1]);
          if (v752 == result)
          {
            uint64_t v753 = v749[1];
            if (v753)
            {
              unsigned int v754 = 0;
              do
              {
                ++v754;
                uint64_t v753 = *(void *)(v753 + 8);
              }
              while (v753);
            }
            else
            {
              unsigned int v754 = 0;
            }
            int v755 = (void **)v750[1];
            if (v755)
            {
              unsigned int v756 = 0;
              do
              {
                ++v756;
                int v755 = (void **)v755[1];
              }
              while (v755);
            }
            else
            {
              unsigned int v756 = 0;
            }
            BOOL v757 = v754 > v756;
            if (v754 == v756)
            {
              if ((*((unsigned char *)v749 + 23) & 0x10) != 0)
              {
                uint64_t v758 = **(void **)*v749;
                uint64_t v759 = *(void *)(v758 + 152);
                uint64_t v760 = *(unsigned int *)(v758 + 168);
                if (!v760) {
                  goto LABEL_933;
                }
                LODWORD(v761) = (v760 - 1) & ((v749 >> 4) ^ (v749 >> 9));
                uint64_t v762 = (uint64_t **)(v759 + 16 * v761);
                uint64_t v763 = *v762;
                if (*v762 != v749)
                {
                  int v764 = 1;
                  while (v763 != (uint64_t *)-4096)
                  {
                    int v765 = v761 + v764++;
                    uint64_t v761 = v765 & (v760 - 1);
                    uint64_t v763 = *(uint64_t **)(v759 + 16 * v761);
                    if (v763 == v749)
                    {
                      uint64_t v762 = (uint64_t **)(v759 + 16 * v761);
                      goto LABEL_934;
                    }
                  }
LABEL_933:
                  uint64_t v762 = (uint64_t **)(v759 + 16 * v760);
                }
LABEL_934:
                int v767 = (size_t *)v762[1];
                size_t v769 = *v767;
                BOOL result = (uint64_t)(v767 + 2);
                size_t v768 = v769;
              }
              else
              {
                size_t v768 = 0;
                BOOL result = (uint64_t)&byte_1CFBCE98E;
              }
              if ((*((unsigned char *)v750 + 23) & 0x10) != 0)
              {
                uint64_t v770 = **(void **)*v750;
                uint64_t v771 = *(void *)(v770 + 152);
                uint64_t v772 = *(unsigned int *)(v770 + 168);
                if (!v772) {
                  goto LABEL_942;
                }
                LODWORD(v773) = (v772 - 1) & ((v750 >> 4) ^ (v750 >> 9));
                BOOL v774 = (uint64_t **)(v771 + 16 * v773);
                int v775 = *v774;
                if (*v774 != v750)
                {
                  int v776 = 1;
                  while (v775 != (uint64_t *)-4096)
                  {
                    int v777 = v773 + v776++;
                    uint64_t v773 = v777 & (v772 - 1);
                    int v775 = *(uint64_t **)(v771 + 16 * v773);
                    if (v775 == v750)
                    {
                      BOOL v774 = (uint64_t **)(v771 + 16 * v773);
                      goto LABEL_943;
                    }
                  }
LABEL_942:
                  BOOL v774 = (uint64_t **)(v771 + 16 * v772);
                }
LABEL_943:
                unsigned int v778 = v774[1];
                size_t v781 = *v778;
                uint64_t v779 = (char *)(v778 + 2);
                size_t v780 = v781;
              }
              else
              {
                size_t v780 = 0;
                uint64_t v779 = &byte_1CFBCE98E;
              }
              if (v780 >= v768) {
                size_t v782 = v768;
              }
              else {
                size_t v782 = v780;
              }
              if (v782)
              {
                BOOL result = memcmp((const void *)result, v779, v782);
                if (result)
                {
                  BOOL v766 = (int)result >= 0;
                  goto LABEL_954;
                }
              }
              BOOL v757 = v768 > v780;
            }
            BOOL v766 = v757;
            goto LABEL_954;
          }
          BOOL v766 = v752 < result;
LABEL_954:
          if (v766)
          {
            ++v746;
            uint64_t v747 = v748;
          }
          int64_t v745 = v1033;
          uint64_t v13 = v1036;
          goto LABEL_957;
        }
      }
      uint64_t v562 = *v561;
      uint64_t v563 = v561[1];
      uint64_t v564 = *a3;
      unsigned int v565 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v561, a3[1]);
      unsigned int v566 = sub_1CC806CF0(*(void *)(v564 + 6936), *(_DWORD *)(v564 + 6952), v563, a3[1]);
      if (v565 == v566)
      {
        uint64_t v567 = v562[1];
        if (v567)
        {
          unsigned int v568 = 0;
          uint64_t v13 = v1035;
          do
          {
            ++v568;
            uint64_t v567 = *(void *)(v567 + 8);
          }
          while (v567);
        }
        else
        {
          unsigned int v568 = 0;
          uint64_t v13 = v1035;
        }
        int v569 = (void **)v563[1];
        if (v569)
        {
          unsigned int v570 = 0;
          do
          {
            ++v570;
            int v569 = (void **)v569[1];
          }
          while (v569);
        }
        else
        {
          unsigned int v570 = 0;
        }
        BOOL v571 = v568 > v570;
        if (v568 == v570)
        {
          if ((*((unsigned char *)v562 + 23) & 0x10) != 0)
          {
            uint64_t v572 = **(void **)*v562;
            uint64_t v573 = *(void *)(v572 + 152);
            uint64_t v574 = *(unsigned int *)(v572 + 168);
            if (v574)
            {
              LODWORD(v575) = (v574 - 1) & ((v562 >> 4) ^ (v562 >> 9));
              v576 = (uint64_t **)(v573 + 16 * v575);
              int v577 = *v576;
              if (*v576 != v562)
              {
                int v578 = 1;
                do
                {
                  if (v577 == (uint64_t *)-4096) {
                    goto LABEL_707;
                  }
                  int v579 = v575 + v578++;
                  uint64_t v575 = v579 & (v574 - 1);
                  int v577 = *(uint64_t **)(v573 + 16 * v575);
                }
                while (v577 != v562);
                v576 = (uint64_t **)(v573 + 16 * v575);
              }
            }
            else
            {
LABEL_707:
              v576 = (uint64_t **)(v573 + 16 * v574);
            }
            unint64_t v581 = v576[1];
            size_t v584 = *v581;
            unint64_t v582 = (char *)(v581 + 2);
            size_t v583 = v584;
          }
          else
          {
            size_t v583 = 0;
            unint64_t v582 = &byte_1CFBCE98E;
          }
          if ((*((unsigned char *)v563 + 23) & 0x10) != 0)
          {
            uint64_t v585 = **(void **)*v563;
            uint64_t v586 = *(void *)(v585 + 152);
            uint64_t v587 = *(unsigned int *)(v585 + 168);
            if (v587)
            {
              LODWORD(v588) = (v587 - 1) & ((v563 >> 4) ^ (v563 >> 9));
              v589 = (uint64_t **)(v586 + 16 * v588);
              size_t v590 = *v589;
              if (*v589 != v563)
              {
                int v591 = 1;
                do
                {
                  if (v590 == (uint64_t *)-4096) {
                    goto LABEL_716;
                  }
                  int v592 = v588 + v591++;
                  uint64_t v588 = v592 & (v587 - 1);
                  size_t v590 = *(uint64_t **)(v586 + 16 * v588);
                }
                while (v590 != v563);
                v589 = (uint64_t **)(v586 + 16 * v588);
              }
            }
            else
            {
LABEL_716:
              v589 = (uint64_t **)(v586 + 16 * v587);
            }
            unsigned int v593 = v589[1];
            size_t v596 = *v593;
            uint64_t v594 = (char *)(v593 + 2);
            size_t v595 = v596;
          }
          else
          {
            size_t v595 = 0;
            uint64_t v594 = &byte_1CFBCE98E;
          }
          if (v595 >= v583) {
            size_t v597 = v583;
          }
          else {
            size_t v597 = v595;
          }
          if (v597)
          {
            int v598 = memcmp(v582, v594, v597);
            if (v598)
            {
              BOOL v580 = v598 >= 0;
              goto LABEL_728;
            }
          }
          BOOL v571 = v583 > v595;
        }
        BOOL v580 = v571;
        goto LABEL_728;
      }
      BOOL v580 = v565 < v566;
      uint64_t v13 = v1035;
LABEL_728:
      if (v580)
      {
        ++v561;
        uint64_t v560 = 2 * v559 + 2;
      }
      uint64_t v558 = v1030;
      goto LABEL_731;
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    int v15 = &v11[(unint64_t)v13 >> 1];
    if ((unint64_t)v12 >= 0x401)
    {
      sub_1CC805508(v11, &v11[(unint64_t)v13 >> 1], v1026, a3);
      sub_1CC805508(v11 + 1, v15 - 1, a2 - 2, a3);
      sub_1CC805508(v11 + 2, &v11[v14 + 1], a2 - 3, a3);
      sub_1CC805508(v15 - 1, v15, &v11[v14 + 1], a3);
      size_t v16 = *v11;
      *unsigned int v11 = *v15;
      *int v15 = v16;
    }
    else
    {
      sub_1CC805508(&v11[(unint64_t)v13 >> 1], v11, v1026, a3);
    }
    uint64_t v1034 = a4 - 1;
    if (a5) {
      goto LABEL_27;
    }
    size_t v18 = *(v11 - 1);
    int v17 = *v11;
    uint64_t v19 = *a3;
    unsigned int v20 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v18, a3[1]);
    unsigned int v21 = sub_1CC806CF0(*(void *)(v19 + 6936), *(_DWORD *)(v19 + 6952), v17, a3[1]);
    if (v20 != v21)
    {
      if (v20 >= v21) {
        goto LABEL_280;
      }
      goto LABEL_27;
    }
    double v22 = (void **)v18[1];
    if (v22)
    {
      unsigned int v23 = 0;
      do
      {
        ++v23;
        double v22 = (void **)v22[1];
      }
      while (v22);
    }
    else
    {
      unsigned int v23 = 0;
    }
    uint64_t v24 = v17[1];
    if (v24)
    {
      unsigned int v25 = 0;
      do
      {
        ++v25;
        uint64_t v24 = *(void *)(v24 + 8);
      }
      while (v24);
    }
    else
    {
      unsigned int v25 = 0;
    }
    BOOL v26 = v23 > v25;
    if (v23 != v25) {
      goto LABEL_279;
    }
    if ((*((unsigned char *)v18 + 23) & 0x10) != 0)
    {
      uint64_t v27 = **(void **)*v18;
      uint64_t v28 = *(void *)(v27 + 152);
      uint64_t v29 = *(unsigned int *)(v27 + 168);
      if (!v29) {
        goto LABEL_260;
      }
      LODWORD(v30) = (v29 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      unsigned int v31 = (uint64_t **)(v28 + 16 * v30);
      char v32 = *v31;
      if (*v31 != v18)
      {
        int v33 = 1;
        while (v32 != (uint64_t *)-4096)
        {
          int v34 = v30 + v33++;
          uint64_t v30 = v34 & (v29 - 1);
          char v32 = *(uint64_t **)(v28 + 16 * v30);
          if (v32 == v18)
          {
            unsigned int v31 = (uint64_t **)(v28 + 16 * v30);
            goto LABEL_261;
          }
        }
LABEL_260:
        unsigned int v31 = (uint64_t **)(v28 + 16 * v29);
      }
LABEL_261:
      size_t v223 = v31[1];
      size_t v226 = *v223;
      int v224 = (char *)(v223 + 2);
      size_t v225 = v226;
      goto LABEL_262;
    }
    size_t v225 = 0;
    int v224 = &byte_1CFBCE98E;
LABEL_262:
    if ((*((unsigned char *)v17 + 23) & 0x10) != 0)
    {
      uint64_t v227 = **(void **)*v17;
      uint64_t v228 = *(void *)(v227 + 152);
      uint64_t v229 = *(unsigned int *)(v227 + 168);
      if (!v229) {
        goto LABEL_269;
      }
      LODWORD(v230) = (v229 - 1) & ((v17 >> 4) ^ (v17 >> 9));
      uint64_t v231 = (uint64_t **)(v228 + 16 * v230);
      char v232 = *v231;
      if (*v231 != v17)
      {
        int v233 = 1;
        while (v232 != (uint64_t *)-4096)
        {
          int v234 = v230 + v233++;
          uint64_t v230 = v234 & (v229 - 1);
          char v232 = *(uint64_t **)(v228 + 16 * v230);
          if (v232 == v17)
          {
            uint64_t v231 = (uint64_t **)(v228 + 16 * v230);
            goto LABEL_270;
          }
        }
LABEL_269:
        uint64_t v231 = (uint64_t **)(v228 + 16 * v229);
      }
LABEL_270:
      int v235 = v231[1];
      size_t v238 = *v235;
      BOOL v236 = (char *)(v235 + 2);
      size_t v237 = v238;
      goto LABEL_271;
    }
    size_t v237 = 0;
    BOOL v236 = &byte_1CFBCE98E;
LABEL_271:
    if (v237 >= v225) {
      size_t v239 = v225;
    }
    else {
      size_t v239 = v237;
    }
    if (!v239 || (int v240 = memcmp(v224, v236, v239)) == 0)
    {
      BOOL v26 = v225 > v237;
LABEL_279:
      if (!v26) {
        goto LABEL_280;
      }
      goto LABEL_27;
    }
    if (v240 < 0)
    {
LABEL_280:
      int v241 = *v11;
      size_t v242 = *v1026;
      uint64_t v243 = *a3;
      unsigned int v244 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v11, a3[1]);
      BOOL result = sub_1CC806CF0(*(void *)(v243 + 6936), *(_DWORD *)(v243 + 6952), v242, a3[1]);
      if (v244 == result)
      {
        uint64_t v245 = v241[1];
        if (v245)
        {
          unsigned int v246 = 0;
          do
          {
            ++v246;
            uint64_t v245 = *(void *)(v245 + 8);
          }
          while (v245);
        }
        else
        {
          unsigned int v246 = 0;
        }
        uint64_t v247 = v242[1];
        if (v247)
        {
          unsigned int v248 = 0;
          do
          {
            ++v248;
            uint64_t v247 = *(void *)(v247 + 8);
          }
          while (v247);
        }
        else
        {
          unsigned int v248 = 0;
        }
        BOOL v249 = v246 > v248;
        if (v246 != v248) {
          goto LABEL_363;
        }
        if ((*((unsigned char *)v241 + 23) & 0x10) == 0)
        {
          size_t v292 = 0;
          BOOL result = (uint64_t)&byte_1CFBCE98E;
LABEL_346:
          if ((*((unsigned char *)v242 + 23) & 0x10) == 0)
          {
            size_t v304 = 0;
            uint64_t v303 = &byte_1CFBCE98E;
            goto LABEL_355;
          }
          uint64_t v294 = **(void **)*v242;
          uint64_t v295 = *(void *)(v294 + 152);
          uint64_t v296 = *(unsigned int *)(v294 + 168);
          if (v296)
          {
            LODWORD(v297) = (v296 - 1) & ((v242 >> 4) ^ (v242 >> 9));
            uint64_t v298 = (uint64_t **)(v295 + 16 * v297);
            char v299 = *v298;
            if (*v298 == v242)
            {
LABEL_354:
              int v302 = v298[1];
              size_t v305 = *v302;
              uint64_t v303 = (char *)(v302 + 2);
              size_t v304 = v305;
LABEL_355:
              if (v304 >= v292) {
                size_t v306 = v292;
              }
              else {
                size_t v306 = v304;
              }
              if (v306)
              {
                BOOL result = memcmp((const void *)result, v303, v306);
                if (result)
                {
                  if ((result & 0x80000000) != 0) {
                    goto LABEL_364;
                  }
                  goto LABEL_296;
                }
              }
              BOOL v249 = v292 > v304;
LABEL_363:
              if (!v249) {
                goto LABEL_364;
              }
LABEL_296:
              unsigned int v10 = v11;
              while (1)
              {
                while (1)
                {
                  uint64_t v259 = v10[1];
                  ++v10;
                  unsigned int v258 = v259;
                  uint64_t v260 = *a3;
                  unsigned int v261 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v241, a3[1]);
                  BOOL result = sub_1CC806CF0(*(void *)(v260 + 6936), *(_DWORD *)(v260 + 6952), v259, a3[1]);
                  if (v261 == result) {
                    break;
                  }
                  if (v261 < result) {
                    goto LABEL_408;
                  }
                }
                uint64_t v262 = v241[1];
                if (v262)
                {
                  unsigned int v263 = 0;
                  do
                  {
                    ++v263;
                    uint64_t v262 = *(void *)(v262 + 8);
                  }
                  while (v262);
                }
                else
                {
                  unsigned int v263 = 0;
                }
                uint64_t v264 = v258[1];
                if (v264)
                {
                  unsigned int v265 = 0;
                  do
                  {
                    ++v265;
                    uint64_t v264 = *(void *)(v264 + 8);
                  }
                  while (v264);
                }
                else
                {
                  unsigned int v265 = 0;
                }
                BOOL v266 = v263 > v265;
                if (v263 != v265) {
                  goto LABEL_335;
                }
                if ((*((unsigned char *)v241 + 23) & 0x10) != 0) {
                  break;
                }
                size_t v276 = 0;
                BOOL result = (uint64_t)&byte_1CFBCE98E;
LABEL_318:
                if ((*((unsigned char *)v258 + 23) & 0x10) == 0)
                {
                  size_t v288 = 0;
                  uint64_t v287 = &byte_1CFBCE98E;
                  goto LABEL_327;
                }
                uint64_t v278 = **(void **)*v258;
                uint64_t v279 = *(void *)(v278 + 152);
                uint64_t v280 = *(unsigned int *)(v278 + 168);
                if (!v280) {
                  goto LABEL_325;
                }
                LODWORD(v281) = (v280 - 1) & ((v258 >> 4) ^ (v258 >> 9));
                size_t v282 = (uint64_t **)(v279 + 16 * v281);
                long long v283 = *v282;
                if (*v282 != v258)
                {
                  int v284 = 1;
                  while (v283 != (uint64_t *)-4096)
                  {
                    int v285 = v281 + v284++;
                    uint64_t v281 = v285 & (v280 - 1);
                    long long v283 = *(uint64_t **)(v279 + 16 * v281);
                    if (v283 == v258)
                    {
                      size_t v282 = (uint64_t **)(v279 + 16 * v281);
                      goto LABEL_326;
                    }
                  }
LABEL_325:
                  size_t v282 = (uint64_t **)(v279 + 16 * v280);
                }
LABEL_326:
                uint64_t v286 = v282[1];
                size_t v289 = *v286;
                uint64_t v287 = (char *)(v286 + 2);
                size_t v288 = v289;
LABEL_327:
                if (v288 >= v276) {
                  size_t v290 = v276;
                }
                else {
                  size_t v290 = v288;
                }
                if (v290 && (BOOL result = memcmp((const void *)result, v287, v290), result))
                {
                  if ((result & 0x80000000) == 0) {
                    goto LABEL_408;
                  }
                }
                else
                {
                  BOOL v266 = v276 > v288;
LABEL_335:
                  if (v266) {
                    goto LABEL_408;
                  }
                }
              }
              uint64_t v267 = **(void **)*v241;
              uint64_t v268 = *(void *)(v267 + 152);
              uint64_t v269 = *(unsigned int *)(v267 + 168);
              if (v269)
              {
                LODWORD(v270) = (v269 - 1) & ((v241 >> 4) ^ (v241 >> 9));
                BOOL v271 = (uint64_t **)(v268 + 16 * v270);
                unsigned int v272 = *v271;
                if (*v271 == v241)
                {
LABEL_317:
                  size_t v275 = (size_t *)v271[1];
                  size_t v277 = *v275;
                  BOOL result = (uint64_t)(v275 + 2);
                  size_t v276 = v277;
                  goto LABEL_318;
                }
                int v273 = 1;
                while (v272 != (uint64_t *)-4096)
                {
                  int v274 = v270 + v273++;
                  uint64_t v270 = v274 & (v269 - 1);
                  unsigned int v272 = *(uint64_t **)(v268 + 16 * v270);
                  if (v272 == v241)
                  {
                    BOOL v271 = (uint64_t **)(v268 + 16 * v270);
                    goto LABEL_317;
                  }
                }
              }
              BOOL v271 = (uint64_t **)(v268 + 16 * v269);
              goto LABEL_317;
            }
            int v300 = 1;
            while (v299 != (uint64_t *)-4096)
            {
              int v301 = v297 + v300++;
              uint64_t v297 = v301 & (v296 - 1);
              char v299 = *(uint64_t **)(v295 + 16 * v297);
              if (v299 == v242)
              {
                uint64_t v298 = (uint64_t **)(v295 + 16 * v297);
                goto LABEL_354;
              }
            }
          }
          uint64_t v298 = (uint64_t **)(v295 + 16 * v296);
          goto LABEL_354;
        }
        uint64_t v250 = **(void **)*v241;
        uint64_t v251 = *(void *)(v250 + 152);
        uint64_t v252 = *(unsigned int *)(v250 + 168);
        if (v252)
        {
          LODWORD(v253) = (v252 - 1) & ((v241 >> 4) ^ (v241 >> 9));
          uint64_t v254 = (uint64_t **)(v251 + 16 * v253);
          unsigned int v255 = *v254;
          if (*v254 == v241)
          {
LABEL_345:
            uint64_t v291 = (size_t *)v254[1];
            size_t v293 = *v291;
            BOOL result = (uint64_t)(v291 + 2);
            size_t v292 = v293;
            goto LABEL_346;
          }
          int v256 = 1;
          while (v255 != (uint64_t *)-4096)
          {
            int v257 = v253 + v256++;
            uint64_t v253 = v257 & (v252 - 1);
            unsigned int v255 = *(uint64_t **)(v251 + 16 * v253);
            if (v255 == v241)
            {
              uint64_t v254 = (uint64_t **)(v251 + 16 * v253);
              goto LABEL_345;
            }
          }
        }
        uint64_t v254 = (uint64_t **)(v251 + 16 * v252);
        goto LABEL_345;
      }
      if (v244 < result) {
        goto LABEL_296;
      }
LABEL_364:
      unsigned int v10 = v11 + 1;
      if ((unint64_t)(v11 + 1) < v9)
      {
        while (1)
        {
          int v307 = *v10;
          uint64_t v308 = *a3;
          unsigned int v309 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v241, a3[1]);
          BOOL result = sub_1CC806CF0(*(void *)(v308 + 6936), *(_DWORD *)(v308 + 6952), v307, a3[1]);
          if (v309 != result)
          {
            if (v309 < result) {
              goto LABEL_408;
            }
            goto LABEL_404;
          }
          uint64_t v310 = v241[1];
          if (v310)
          {
            unsigned int v311 = 0;
            do
            {
              ++v311;
              uint64_t v310 = *(void *)(v310 + 8);
            }
            while (v310);
          }
          else
          {
            unsigned int v311 = 0;
          }
          uint64_t v312 = v307[1];
          if (v312)
          {
            unsigned int v313 = 0;
            do
            {
              ++v313;
              uint64_t v312 = *(void *)(v312 + 8);
            }
            while (v312);
          }
          else
          {
            unsigned int v313 = 0;
          }
          BOOL v314 = v311 > v313;
          if (v311 != v313) {
            goto LABEL_403;
          }
          if ((*((unsigned char *)v241 + 23) & 0x10) != 0) {
            break;
          }
          size_t v324 = 0;
          BOOL result = (uint64_t)&byte_1CFBCE98E;
LABEL_386:
          if ((*((unsigned char *)v307 + 23) & 0x10) == 0)
          {
            size_t v336 = 0;
            size_t v335 = &byte_1CFBCE98E;
            goto LABEL_395;
          }
          uint64_t v326 = **(void **)*v307;
          uint64_t v327 = *(void *)(v326 + 152);
          uint64_t v328 = *(unsigned int *)(v326 + 168);
          if (!v328) {
            goto LABEL_393;
          }
          LODWORD(v329) = (v328 - 1) & ((v307 >> 4) ^ (v307 >> 9));
          size_t v330 = (uint64_t **)(v327 + 16 * v329);
          size_t v331 = *v330;
          if (*v330 != v307)
          {
            int v332 = 1;
            while (v331 != (uint64_t *)-4096)
            {
              int v333 = v329 + v332++;
              uint64_t v329 = v333 & (v328 - 1);
              size_t v331 = *(uint64_t **)(v327 + 16 * v329);
              if (v331 == v307)
              {
                size_t v330 = (uint64_t **)(v327 + 16 * v329);
                goto LABEL_394;
              }
            }
LABEL_393:
            size_t v330 = (uint64_t **)(v327 + 16 * v328);
          }
LABEL_394:
          uint64_t v334 = v330[1];
          size_t v337 = *v334;
          size_t v335 = (char *)(v334 + 2);
          size_t v336 = v337;
LABEL_395:
          if (v336 >= v324) {
            size_t v338 = v324;
          }
          else {
            size_t v338 = v336;
          }
          if (!v338 || (BOOL result = memcmp((const void *)result, v335, v338), !result))
          {
            BOOL v314 = v324 > v336;
LABEL_403:
            if (v314) {
              goto LABEL_408;
            }
            goto LABEL_404;
          }
          if ((result & 0x80000000) == 0) {
            goto LABEL_408;
          }
LABEL_404:
          if ((unint64_t)++v10 >= v9) {
            goto LABEL_408;
          }
        }
        uint64_t v315 = **(void **)*v241;
        uint64_t v316 = *(void *)(v315 + 152);
        uint64_t v317 = *(unsigned int *)(v315 + 168);
        if (v317)
        {
          LODWORD(v318) = (v317 - 1) & ((v241 >> 4) ^ (v241 >> 9));
          uint64_t v319 = (uint64_t **)(v316 + 16 * v318);
          unint64_t v320 = *v319;
          if (*v319 == v241)
          {
LABEL_385:
            unsigned int v323 = (size_t *)v319[1];
            size_t v325 = *v323;
            BOOL result = (uint64_t)(v323 + 2);
            size_t v324 = v325;
            goto LABEL_386;
          }
          int v321 = 1;
          while (v320 != (uint64_t *)-4096)
          {
            int v322 = v318 + v321++;
            uint64_t v318 = v322 & (v317 - 1);
            unint64_t v320 = *(uint64_t **)(v316 + 16 * v318);
            if (v320 == v241)
            {
              uint64_t v319 = (uint64_t **)(v316 + 16 * v318);
              goto LABEL_385;
            }
          }
        }
        uint64_t v319 = (uint64_t **)(v316 + 16 * v317);
        goto LABEL_385;
      }
LABEL_408:
      int v339 = (uint64_t **)v9;
      if ((unint64_t)v10 < v9)
      {
        int v339 = (uint64_t **)v9;
        while (1)
        {
          while (1)
          {
            uint64_t v341 = *--v339;
            BOOL v340 = v341;
            uint64_t v342 = *a3;
            unsigned int v343 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v241, a3[1]);
            BOOL result = sub_1CC806CF0(*(void *)(v342 + 6936), *(_DWORD *)(v342 + 6952), v341, a3[1]);
            if (v343 == result) {
              break;
            }
            if (v343 >= result) {
              goto LABEL_452;
            }
          }
          uint64_t v344 = v241[1];
          if (v344)
          {
            unsigned int v345 = 0;
            do
            {
              ++v345;
              uint64_t v344 = *(void *)(v344 + 8);
            }
            while (v344);
          }
          else
          {
            unsigned int v345 = 0;
          }
          uint64_t v346 = v340[1];
          if (v346)
          {
            unsigned int v347 = 0;
            do
            {
              ++v347;
              uint64_t v346 = *(void *)(v346 + 8);
            }
            while (v346);
          }
          else
          {
            unsigned int v347 = 0;
          }
          BOOL v348 = v345 > v347;
          if (v345 != v347) {
            goto LABEL_448;
          }
          if ((*((unsigned char *)v241 + 23) & 0x10) != 0) {
            break;
          }
          size_t v358 = 0;
          BOOL result = (uint64_t)&byte_1CFBCE98E;
LABEL_431:
          if ((*((unsigned char *)v340 + 23) & 0x10) == 0)
          {
            size_t v370 = 0;
            char v369 = &byte_1CFBCE98E;
            goto LABEL_440;
          }
          uint64_t v360 = **(void **)*v340;
          uint64_t v361 = *(void *)(v360 + 152);
          uint64_t v362 = *(unsigned int *)(v360 + 168);
          if (!v362) {
            goto LABEL_438;
          }
          LODWORD(v363) = (v362 - 1) & ((v340 >> 4) ^ (v340 >> 9));
          long long v364 = (uint64_t **)(v361 + 16 * v363);
          unsigned int v365 = *v364;
          if (*v364 != v340)
          {
            int v366 = 1;
            while (v365 != (uint64_t *)-4096)
            {
              int v367 = v363 + v366++;
              uint64_t v363 = v367 & (v362 - 1);
              unsigned int v365 = *(uint64_t **)(v361 + 16 * v363);
              if (v365 == v340)
              {
                long long v364 = (uint64_t **)(v361 + 16 * v363);
                goto LABEL_439;
              }
            }
LABEL_438:
            long long v364 = (uint64_t **)(v361 + 16 * v362);
          }
LABEL_439:
          unsigned int v368 = v364[1];
          size_t v371 = *v368;
          char v369 = (char *)(v368 + 2);
          size_t v370 = v371;
LABEL_440:
          if (v370 >= v358) {
            size_t v372 = v358;
          }
          else {
            size_t v372 = v370;
          }
          if (v372 && (BOOL result = memcmp((const void *)result, v369, v372), result))
          {
            if ((result & 0x80000000) != 0) {
              goto LABEL_452;
            }
          }
          else
          {
            BOOL v348 = v358 > v370;
LABEL_448:
            if (!v348) {
              goto LABEL_452;
            }
          }
        }
        uint64_t v349 = **(void **)*v241;
        uint64_t v350 = *(void *)(v349 + 152);
        uint64_t v351 = *(unsigned int *)(v349 + 168);
        if (v351)
        {
          LODWORD(v352) = (v351 - 1) & ((v241 >> 4) ^ (v241 >> 9));
          size_t v353 = (uint64_t **)(v350 + 16 * v352);
          int v354 = *v353;
          if (*v353 == v241)
          {
LABEL_430:
            size_t v357 = (size_t *)v353[1];
            size_t v359 = *v357;
            BOOL result = (uint64_t)(v357 + 2);
            size_t v358 = v359;
            goto LABEL_431;
          }
          int v355 = 1;
          while (v354 != (uint64_t *)-4096)
          {
            int v356 = v352 + v355++;
            uint64_t v352 = v356 & (v351 - 1);
            int v354 = *(uint64_t **)(v350 + 16 * v352);
            if (v354 == v241)
            {
              size_t v353 = (uint64_t **)(v350 + 16 * v352);
              goto LABEL_430;
            }
          }
        }
        size_t v353 = (uint64_t **)(v350 + 16 * v351);
        goto LABEL_430;
      }
LABEL_452:
      if (v10 >= v339) {
        goto LABEL_540;
      }
      unsigned int v373 = (v241 >> 4) ^ (v241 >> 9);
      do
      {
        unsigned int v374 = *v10;
        void *v10 = *v339;
        *int v339 = v374;
        do
        {
          while (1)
          {
            while (1)
            {
              int v376 = v10[1];
              ++v10;
              size_t v375 = v376;
              uint64_t v377 = *a3;
              unsigned int v378 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v241, a3[1]);
              unsigned int v379 = sub_1CC806CF0(*(void *)(v377 + 6936), *(_DWORD *)(v377 + 6952), v376, a3[1]);
              if (v378 == v379) {
                break;
              }
              if (v378 < v379) {
                goto LABEL_500;
              }
            }
            uint64_t v380 = v241[1];
            if (v380)
            {
              unsigned int v381 = 0;
              do
              {
                ++v381;
                uint64_t v380 = *(void *)(v380 + 8);
              }
              while (v380);
            }
            else
            {
              unsigned int v381 = 0;
            }
            uint64_t v382 = v375[1];
            if (v382)
            {
              unsigned int v383 = 0;
              do
              {
                ++v383;
                uint64_t v382 = *(void *)(v382 + 8);
              }
              while (v382);
            }
            else
            {
              unsigned int v383 = 0;
            }
            BOOL v384 = v381 > v383;
            if (v381 != v383) {
              break;
            }
            if ((*((unsigned char *)v241 + 23) & 0x10) != 0)
            {
              uint64_t v385 = **(void **)*v241;
              uint64_t v386 = *(void *)(v385 + 152);
              uint64_t v387 = *(unsigned int *)(v385 + 168);
              if (v387)
              {
                LODWORD(v388) = (v387 - 1) & v373;
                size_t v389 = (uint64_t **)(v386 + 16 * v388);
                size_t v390 = *v389;
                if (*v389 == v241)
                {
LABEL_475:
                  uint64_t v393 = v389[1];
                  size_t v396 = *v393;
                  size_t v394 = (char *)(v393 + 2);
                  size_t v395 = v396;
                  goto LABEL_476;
                }
                int v391 = 1;
                while (v390 != (uint64_t *)-4096)
                {
                  int v392 = v388 + v391++;
                  uint64_t v388 = v392 & (v387 - 1);
                  size_t v390 = *(uint64_t **)(v386 + 16 * v388);
                  if (v390 == v241)
                  {
                    size_t v389 = (uint64_t **)(v386 + 16 * v388);
                    goto LABEL_475;
                  }
                }
              }
              size_t v389 = (uint64_t **)(v386 + 16 * v387);
              goto LABEL_475;
            }
            size_t v395 = 0;
            size_t v394 = &byte_1CFBCE98E;
LABEL_476:
            if ((*((unsigned char *)v375 + 23) & 0x10) != 0)
            {
              uint64_t v397 = **(void **)*v375;
              uint64_t v398 = *(void *)(v397 + 152);
              uint64_t v399 = *(unsigned int *)(v397 + 168);
              if (v399)
              {
                LODWORD(v400) = (v399 - 1) & ((v375 >> 4) ^ (v375 >> 9));
                BOOL v401 = (uint64_t **)(v398 + 16 * v400);
                unsigned int v402 = *v401;
                if (*v401 == v375)
                {
LABEL_484:
                  uint64_t v405 = v401[1];
                  size_t v408 = *v405;
                  size_t v406 = (char *)(v405 + 2);
                  size_t v407 = v408;
                  goto LABEL_485;
                }
                int v403 = 1;
                while (v402 != (uint64_t *)-4096)
                {
                  int v404 = v400 + v403++;
                  uint64_t v400 = v404 & (v399 - 1);
                  unsigned int v402 = *(uint64_t **)(v398 + 16 * v400);
                  if (v402 == v375)
                  {
                    BOOL v401 = (uint64_t **)(v398 + 16 * v400);
                    goto LABEL_484;
                  }
                }
              }
              BOOL v401 = (uint64_t **)(v398 + 16 * v399);
              goto LABEL_484;
            }
            size_t v407 = 0;
            size_t v406 = &byte_1CFBCE98E;
LABEL_485:
            if (v407 >= v395) {
              size_t v409 = v395;
            }
            else {
              size_t v409 = v407;
            }
            if (!v409 || (int v410 = memcmp(v394, v406, v409)) == 0)
            {
              BOOL v384 = v395 > v407;
              break;
            }
            if ((v410 & 0x80000000) == 0) {
              goto LABEL_500;
            }
          }
        }
        while (!v384);
        do
        {
          while (1)
          {
LABEL_500:
            while (1)
            {
              long long v415 = *--v339;
              uint64_t v414 = v415;
              uint64_t v416 = *a3;
              unsigned int v417 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v241, a3[1]);
              BOOL result = sub_1CC806CF0(*(void *)(v416 + 6936), *(_DWORD *)(v416 + 6952), v415, a3[1]);
              if (v417 == result) {
                break;
              }
              if (v417 >= result) {
                goto LABEL_539;
              }
            }
            uint64_t v418 = v241[1];
            if (v418)
            {
              unsigned int v419 = 0;
              do
              {
                ++v419;
                uint64_t v418 = *(void *)(v418 + 8);
              }
              while (v418);
            }
            else
            {
              unsigned int v419 = 0;
            }
            uint64_t v420 = v414[1];
            if (v420)
            {
              unsigned int v421 = 0;
              do
              {
                ++v421;
                uint64_t v420 = *(void *)(v420 + 8);
              }
              while (v420);
            }
            else
            {
              unsigned int v421 = 0;
            }
            BOOL v422 = v419 > v421;
            if (v419 != v421) {
              break;
            }
            if ((*((unsigned char *)v241 + 23) & 0x10) == 0)
            {
              size_t v411 = 0;
              BOOL result = (uint64_t)&byte_1CFBCE98E;
              goto LABEL_521;
            }
            uint64_t v423 = **(void **)*v241;
            uint64_t v424 = *(void *)(v423 + 152);
            uint64_t v425 = *(unsigned int *)(v423 + 168);
            if (!v425) {
              goto LABEL_519;
            }
            LODWORD(v426) = (v425 - 1) & v373;
            size_t v427 = (uint64_t **)(v424 + 16 * v426);
            int v428 = *v427;
            if (*v427 != v241)
            {
              int v429 = 1;
              while (v428 != (uint64_t *)-4096)
              {
                int v430 = v426 + v429++;
                uint64_t v426 = v430 & (v425 - 1);
                int v428 = *(uint64_t **)(v424 + 16 * v426);
                if (v428 == v241)
                {
                  size_t v427 = (uint64_t **)(v424 + 16 * v426);
                  goto LABEL_520;
                }
              }
LABEL_519:
              size_t v427 = (uint64_t **)(v424 + 16 * v425);
            }
LABEL_520:
            size_t v431 = (size_t *)v427[1];
            size_t v432 = *v431;
            BOOL result = (uint64_t)(v431 + 2);
            size_t v411 = v432;
LABEL_521:
            if ((*((unsigned char *)v414 + 23) & 0x10) == 0)
            {
              size_t v412 = 0;
              uint64_t v413 = &byte_1CFBCE98E;
              goto LABEL_530;
            }
            uint64_t v433 = **(void **)*v414;
            uint64_t v434 = *(void *)(v433 + 152);
            uint64_t v435 = *(unsigned int *)(v433 + 168);
            if (!v435) {
              goto LABEL_528;
            }
            LODWORD(v436) = (v435 - 1) & ((v414 >> 4) ^ (v414 >> 9));
            int v437 = (uint64_t **)(v434 + 16 * v436);
            unsigned int v438 = *v437;
            if (*v437 != v414)
            {
              int v439 = 1;
              while (v438 != (uint64_t *)-4096)
              {
                int v440 = v436 + v439++;
                uint64_t v436 = v440 & (v435 - 1);
                unsigned int v438 = *(uint64_t **)(v434 + 16 * v436);
                if (v438 == v414)
                {
                  int v437 = (uint64_t **)(v434 + 16 * v436);
                  goto LABEL_529;
                }
              }
LABEL_528:
              int v437 = (uint64_t **)(v434 + 16 * v435);
            }
LABEL_529:
            char v441 = v437[1];
            size_t v442 = *v441;
            uint64_t v413 = (char *)(v441 + 2);
            size_t v412 = v442;
LABEL_530:
            if (v412 >= v411) {
              size_t v443 = v411;
            }
            else {
              size_t v443 = v412;
            }
            if (!v443 || (BOOL result = memcmp((const void *)result, v413, v443), !result))
            {
              BOOL v422 = v411 > v412;
              break;
            }
            if ((result & 0x80000000) != 0) {
              goto LABEL_539;
            }
          }
        }
        while (v422);
LABEL_539:
        ;
      }
      while (v10 < v339);
LABEL_540:
      size_t v444 = v10 - 1;
      BOOL v5 = v10 - 1 >= v11;
      BOOL v6 = v10 - 1 == v11;
      if (v10 - 1 != v11) {
        *unsigned int v11 = *v444;
      }
      a5 = 0;
      uint64_t *v444 = v241;
      a4 = v1034;
    }
    else
    {
LABEL_27:
      int v35 = *v11;
      unsigned int v36 = (*v11 >> 4) ^ (*v11 >> 9);
      int v37 = v11;
      do
      {
        while (1)
        {
          while (1)
          {
            size_t v38 = v37;
            BOOL v40 = v37[1];
            ++v37;
            int v39 = v40;
            uint64_t v41 = *a3;
            unsigned int v42 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v40, a3[1]);
            unsigned int v43 = sub_1CC806CF0(*(void *)(v41 + 6936), *(_DWORD *)(v41 + 6952), v35, a3[1]);
            if (v42 == v43) {
              break;
            }
            if (v42 >= v43) {
              goto LABEL_70;
            }
          }
          uint64_t v44 = v39[1];
          if (v44)
          {
            unsigned int v45 = 0;
            do
            {
              ++v45;
              uint64_t v44 = *(void *)(v44 + 8);
            }
            while (v44);
          }
          else
          {
            unsigned int v45 = 0;
          }
          uint64_t v46 = v35[1];
          if (v46)
          {
            unsigned int v47 = 0;
            do
            {
              ++v47;
              uint64_t v46 = *(void *)(v46 + 8);
            }
            while (v46);
          }
          else
          {
            unsigned int v47 = 0;
          }
          BOOL v48 = v45 > v47;
          if (v45 != v47) {
            break;
          }
          if ((*((unsigned char *)v39 + 23) & 0x10) != 0)
          {
            uint64_t v49 = **(void **)*v39;
            uint64_t v50 = *(void *)(v49 + 152);
            uint64_t v51 = *(unsigned int *)(v49 + 168);
            if (v51)
            {
              LODWORD(v52) = (v51 - 1) & ((v39 >> 4) ^ (v39 >> 9));
              size_t v53 = (uint64_t **)(v50 + 16 * v52);
              int v54 = *v53;
              if (*v53 == v39)
              {
LABEL_48:
                size_t v57 = v53[1];
                size_t v60 = *v57;
                int v58 = (char *)(v57 + 2);
                size_t v59 = v60;
                goto LABEL_49;
              }
              int v55 = 1;
              while (v54 != (uint64_t *)-4096)
              {
                int v56 = v52 + v55++;
                uint64_t v52 = v56 & (v51 - 1);
                int v54 = *(uint64_t **)(v50 + 16 * v52);
                if (v54 == v39)
                {
                  size_t v53 = (uint64_t **)(v50 + 16 * v52);
                  goto LABEL_48;
                }
              }
            }
            size_t v53 = (uint64_t **)(v50 + 16 * v51);
            goto LABEL_48;
          }
          size_t v59 = 0;
          int v58 = &byte_1CFBCE98E;
LABEL_49:
          if ((*((unsigned char *)v35 + 23) & 0x10) != 0)
          {
            uint64_t v61 = **(void **)*v35;
            uint64_t v62 = *(void *)(v61 + 152);
            uint64_t v63 = *(unsigned int *)(v61 + 168);
            if (v63)
            {
              LODWORD(v64) = (v63 - 1) & v36;
              long long v65 = (uint64_t **)(v62 + 16 * v64);
              uint64_t v66 = *v65;
              if (*v65 == v35)
              {
LABEL_57:
                int v69 = v65[1];
                size_t v72 = *v69;
                int v70 = (char *)(v69 + 2);
                size_t v71 = v72;
                goto LABEL_58;
              }
              int v67 = 1;
              while (v66 != (uint64_t *)-4096)
              {
                int v68 = v64 + v67++;
                uint64_t v64 = v68 & (v63 - 1);
                uint64_t v66 = *(uint64_t **)(v62 + 16 * v64);
                if (v66 == v35)
                {
                  long long v65 = (uint64_t **)(v62 + 16 * v64);
                  goto LABEL_57;
                }
              }
            }
            long long v65 = (uint64_t **)(v62 + 16 * v63);
            goto LABEL_57;
          }
          size_t v71 = 0;
          int v70 = &byte_1CFBCE98E;
LABEL_58:
          if (v71 >= v59) {
            size_t v73 = v59;
          }
          else {
            size_t v73 = v71;
          }
          if (!v73 || (int v74 = memcmp(v58, v70, v73)) == 0)
          {
            BOOL v48 = v59 > v71;
            break;
          }
          if (v74 < 0) {
            goto LABEL_70;
          }
        }
      }
      while (v48);
LABEL_70:
      uint64_t v75 = (uint64_t **)v9;
      if (v38 != v11)
      {
        while (2)
        {
          while (1)
          {
            long long v77 = *--v75;
            char v76 = v77;
            uint64_t v78 = *a3;
            unsigned int v79 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v77, a3[1]);
            unsigned int v80 = sub_1CC806CF0(*(void *)(v78 + 6936), *(_DWORD *)(v78 + 6952), v35, a3[1]);
            if (v79 == v80) {
              break;
            }
            if (v79 < v80) {
              goto LABEL_163;
            }
          }
          uint64_t v81 = v76[1];
          if (v81)
          {
            unsigned int v82 = 0;
            do
            {
              ++v82;
              uint64_t v81 = *(void *)(v81 + 8);
            }
            while (v81);
          }
          else
          {
            unsigned int v82 = 0;
          }
          uint64_t v83 = v35[1];
          if (v83)
          {
            unsigned int v84 = 0;
            do
            {
              ++v84;
              uint64_t v83 = *(void *)(v83 + 8);
            }
            while (v83);
          }
          else
          {
            unsigned int v84 = 0;
          }
          BOOL v85 = v82 > v84;
          if (v82 != v84) {
            goto LABEL_109;
          }
          if ((*((unsigned char *)v76 + 23) & 0x10) != 0)
          {
            uint64_t v86 = **(void **)*v76;
            uint64_t v87 = *(void *)(v86 + 152);
            uint64_t v88 = *(unsigned int *)(v86 + 168);
            if (!v88) {
              goto LABEL_90;
            }
            LODWORD(v89) = (v88 - 1) & ((v76 >> 4) ^ (v76 >> 9));
            size_t v90 = (uint64_t **)(v87 + 16 * v89);
            int v91 = *v90;
            if (*v90 != v76)
            {
              int v92 = 1;
              while (v91 != (uint64_t *)-4096)
              {
                int v93 = v89 + v92++;
                uint64_t v89 = v93 & (v88 - 1);
                int v91 = *(uint64_t **)(v87 + 16 * v89);
                if (v91 == v76)
                {
                  size_t v90 = (uint64_t **)(v87 + 16 * v89);
                  goto LABEL_91;
                }
              }
LABEL_90:
              size_t v90 = (uint64_t **)(v87 + 16 * v88);
            }
LABEL_91:
            uint64_t v94 = v90[1];
            size_t v97 = *v94;
            uint64_t v95 = (char *)(v94 + 2);
            size_t v96 = v97;
          }
          else
          {
            size_t v96 = 0;
            uint64_t v95 = &byte_1CFBCE98E;
          }
          if ((*((unsigned char *)v35 + 23) & 0x10) != 0)
          {
            uint64_t v98 = **(void **)*v35;
            uint64_t v99 = *(void *)(v98 + 152);
            uint64_t v100 = *(unsigned int *)(v98 + 168);
            if (!v100) {
              goto LABEL_99;
            }
            LODWORD(v101) = (v100 - 1) & v36;
            int v102 = (uint64_t **)(v99 + 16 * v101);
            long long v103 = *v102;
            if (*v102 != v35)
            {
              int v104 = 1;
              while (v103 != (uint64_t *)-4096)
              {
                int v105 = v101 + v104++;
                uint64_t v101 = v105 & (v100 - 1);
                long long v103 = *(uint64_t **)(v99 + 16 * v101);
                if (v103 == v35)
                {
                  int v102 = (uint64_t **)(v99 + 16 * v101);
                  goto LABEL_100;
                }
              }
LABEL_99:
              int v102 = (uint64_t **)(v99 + 16 * v100);
            }
LABEL_100:
            unsigned int v106 = v102[1];
            size_t v109 = *v106;
            int v107 = (char *)(v106 + 2);
            size_t v108 = v109;
          }
          else
          {
            size_t v108 = 0;
            int v107 = &byte_1CFBCE98E;
          }
          if (v108 >= v96) {
            size_t v110 = v96;
          }
          else {
            size_t v110 = v108;
          }
          if (v110 && (int v111 = memcmp(v95, v107, v110)) != 0)
          {
            if ((v111 & 0x80000000) == 0) {
              goto LABEL_163;
            }
          }
          else
          {
            BOOL v85 = v96 > v108;
LABEL_109:
            if (v85) {
              goto LABEL_163;
            }
          }
          continue;
        }
      }
      uint64_t v75 = (uint64_t **)v9;
      if ((unint64_t)v37 < v9)
      {
        uint64_t v75 = (uint64_t **)v9;
        while (1)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v113 = *--v75;
              BOOL v112 = v113;
              uint64_t v114 = *a3;
              unsigned int v115 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v113, a3[1]);
              unsigned int v116 = sub_1CC806CF0(*(void *)(v114 + 6936), *(_DWORD *)(v114 + 6952), v35, a3[1]);
              if (v115 == v116) {
                break;
              }
              if (v37 >= v75 || v115 < v116) {
                goto LABEL_163;
              }
            }
            uint64_t v117 = v112[1];
            if (v117)
            {
              unsigned int v118 = 0;
              do
              {
                ++v118;
                uint64_t v117 = *(void *)(v117 + 8);
              }
              while (v117);
            }
            else
            {
              unsigned int v118 = 0;
            }
            uint64_t v119 = v35[1];
            if (v119)
            {
              unsigned int v120 = 0;
              do
              {
                ++v120;
                uint64_t v119 = *(void *)(v119 + 8);
              }
              while (v119);
            }
            else
            {
              unsigned int v120 = 0;
            }
            if (v118 == v120) {
              break;
            }
            if (v37 >= v75 || v118 > v120) {
              goto LABEL_163;
            }
          }
          if ((*((unsigned char *)v112 + 23) & 0x10) != 0) {
            break;
          }
          size_t v131 = 0;
          size_t v130 = &byte_1CFBCE98E;
LABEL_141:
          if ((*((unsigned char *)v35 + 23) & 0x10) == 0)
          {
            size_t v143 = 0;
            int v142 = &byte_1CFBCE98E;
            goto LABEL_150;
          }
          uint64_t v133 = **(void **)*v35;
          uint64_t v134 = *(void *)(v133 + 152);
          uint64_t v135 = *(unsigned int *)(v133 + 168);
          if (!v135) {
            goto LABEL_148;
          }
          LODWORD(v136) = (v135 - 1) & v36;
          unsigned int v137 = (uint64_t **)(v134 + 16 * v136);
          int v138 = *v137;
          if (*v137 != v35)
          {
            int v139 = 1;
            while (v138 != (uint64_t *)-4096)
            {
              int v140 = v136 + v139++;
              uint64_t v136 = v140 & (v135 - 1);
              int v138 = *(uint64_t **)(v134 + 16 * v136);
              if (v138 == v35)
              {
                unsigned int v137 = (uint64_t **)(v134 + 16 * v136);
                goto LABEL_149;
              }
            }
LABEL_148:
            unsigned int v137 = (uint64_t **)(v134 + 16 * v135);
          }
LABEL_149:
          size_t v141 = v137[1];
          size_t v144 = *v141;
          int v142 = (char *)(v141 + 2);
          size_t v143 = v144;
LABEL_150:
          if (v143 >= v131) {
            size_t v145 = v131;
          }
          else {
            size_t v145 = v143;
          }
          if (v145 && (int v146 = memcmp(v130, v142, v145)) != 0)
          {
            if (v37 >= v75 || (v146 & 0x80000000) == 0) {
              goto LABEL_163;
            }
          }
          else if (v37 >= v75 || v131 > v143)
          {
            goto LABEL_163;
          }
        }
        uint64_t v121 = **(void **)*v112;
        uint64_t v122 = *(void *)(v121 + 152);
        uint64_t v123 = *(unsigned int *)(v121 + 168);
        if (v123)
        {
          LODWORD(v124) = (v123 - 1) & ((v112 >> 4) ^ (v112 >> 9));
          BOOL v125 = (uint64_t **)(v122 + 16 * v124);
          size_t v126 = *v125;
          if (*v125 != v112)
          {
            int v127 = 1;
            while (v126 != (uint64_t *)-4096)
            {
              int v128 = v124 + v127++;
              uint64_t v124 = v128 & (v123 - 1);
              size_t v126 = *(uint64_t **)(v122 + 16 * v124);
              if (v126 == v112)
              {
                BOOL v125 = (uint64_t **)(v122 + 16 * v124);
                goto LABEL_140;
              }
            }
            goto LABEL_139;
          }
        }
        else
        {
LABEL_139:
          BOOL v125 = (uint64_t **)(v122 + 16 * v123);
        }
LABEL_140:
        uint64_t v129 = v125[1];
        size_t v132 = *v129;
        size_t v130 = (char *)(v129 + 2);
        size_t v131 = v132;
        goto LABEL_141;
      }
LABEL_163:
      unsigned int v10 = v37;
      if (v37 >= v75) {
        goto LABEL_251;
      }
      unsigned int v147 = v75;
      while (2)
      {
        unsigned int v148 = *v10;
        void *v10 = *v147;
        llvm::Type *v147 = v148;
        while (1)
        {
LABEL_166:
          while (1)
          {
            int v150 = v10[1];
            ++v10;
            char v149 = v150;
            uint64_t v151 = *a3;
            unsigned int v152 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v150, a3[1]);
            unsigned int v153 = sub_1CC806CF0(*(void *)(v151 + 6936), *(_DWORD *)(v151 + 6952), v35, a3[1]);
            if (v152 == v153) {
              break;
            }
            if (v152 >= v153) {
              goto LABEL_210;
            }
          }
          uint64_t v154 = v149[1];
          if (v154)
          {
            unsigned int v155 = 0;
            do
            {
              ++v155;
              uint64_t v154 = *(void *)(v154 + 8);
            }
            while (v154);
          }
          else
          {
            unsigned int v155 = 0;
          }
          uint64_t v156 = v35[1];
          if (v156)
          {
            unsigned int v157 = 0;
            do
            {
              ++v157;
              uint64_t v156 = *(void *)(v156 + 8);
            }
            while (v156);
          }
          else
          {
            unsigned int v157 = 0;
          }
          BOOL v158 = v155 > v157;
          if (v155 != v157) {
            break;
          }
          if ((*((unsigned char *)v149 + 23) & 0x10) != 0)
          {
            uint64_t v159 = **(void **)*v149;
            uint64_t v160 = *(void *)(v159 + 152);
            uint64_t v161 = *(unsigned int *)(v159 + 168);
            if (!v161) {
              goto LABEL_185;
            }
            LODWORD(v162) = (v161 - 1) & ((v149 >> 4) ^ (v149 >> 9));
            int v163 = (uint64_t **)(v160 + 16 * v162);
            size_t v164 = *v163;
            if (*v163 != v149)
            {
              int v165 = 1;
              while (v164 != (uint64_t *)-4096)
              {
                int v166 = v162 + v165++;
                uint64_t v162 = v166 & (v161 - 1);
                size_t v164 = *(uint64_t **)(v160 + 16 * v162);
                if (v164 == v149)
                {
                  int v163 = (uint64_t **)(v160 + 16 * v162);
                  goto LABEL_186;
                }
              }
LABEL_185:
              int v163 = (uint64_t **)(v160 + 16 * v161);
            }
LABEL_186:
            int v167 = v163[1];
            size_t v170 = *v167;
            BOOL v168 = (char *)(v167 + 2);
            size_t v169 = v170;
            goto LABEL_187;
          }
          size_t v169 = 0;
          BOOL v168 = &byte_1CFBCE98E;
LABEL_187:
          if ((*((unsigned char *)v35 + 23) & 0x10) != 0)
          {
            uint64_t v171 = **(void **)*v35;
            uint64_t v172 = *(void *)(v171 + 152);
            uint64_t v173 = *(unsigned int *)(v171 + 168);
            if (!v173) {
              goto LABEL_194;
            }
            LODWORD(v174) = (v173 - 1) & v36;
            long long v175 = (uint64_t **)(v172 + 16 * v174);
            unsigned int v176 = *v175;
            if (*v175 != v35)
            {
              int v177 = 1;
              while (v176 != (uint64_t *)-4096)
              {
                int v178 = v174 + v177++;
                uint64_t v174 = v178 & (v173 - 1);
                unsigned int v176 = *(uint64_t **)(v172 + 16 * v174);
                if (v176 == v35)
                {
                  long long v175 = (uint64_t **)(v172 + 16 * v174);
                  goto LABEL_195;
                }
              }
LABEL_194:
              long long v175 = (uint64_t **)(v172 + 16 * v173);
            }
LABEL_195:
            int v179 = v175[1];
            size_t v182 = *v179;
            BOOL v180 = (char *)(v179 + 2);
            size_t v181 = v182;
            goto LABEL_196;
          }
          size_t v181 = 0;
          BOOL v180 = &byte_1CFBCE98E;
LABEL_196:
          if (v181 >= v169) {
            size_t v183 = v169;
          }
          else {
            size_t v183 = v181;
          }
          if (!v183 || (int v184 = memcmp(v168, v180, v183)) == 0)
          {
            BOOL v158 = v169 > v181;
            break;
          }
          if (v184 < 0) {
            goto LABEL_210;
          }
        }
        if (v158) {
          goto LABEL_166;
        }
LABEL_210:
        while (2)
        {
          while (2)
          {
            while (1)
            {
              unsigned int v190 = *--v147;
              uint64_t v189 = v190;
              uint64_t v191 = *a3;
              unsigned int v192 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v190, a3[1]);
              unsigned int v193 = sub_1CC806CF0(*(void *)(v191 + 6936), *(_DWORD *)(v191 + 6952), v35, a3[1]);
              if (v192 == v193) {
                break;
              }
              if (v192 < v193) {
                goto LABEL_250;
              }
            }
            uint64_t v194 = v189[1];
            if (v194)
            {
              unsigned int v195 = 0;
              do
              {
                ++v195;
                uint64_t v194 = *(void *)(v194 + 8);
              }
              while (v194);
            }
            else
            {
              unsigned int v195 = 0;
            }
            uint64_t v196 = v35[1];
            if (v196)
            {
              unsigned int v197 = 0;
              do
              {
                ++v197;
                uint64_t v196 = *(void *)(v196 + 8);
              }
              while (v196);
            }
            else
            {
              unsigned int v197 = 0;
            }
            BOOL v198 = v195 > v197;
            if (v195 == v197)
            {
              if ((*((unsigned char *)v189 + 23) & 0x10) != 0)
              {
                uint64_t v199 = **(void **)*v189;
                uint64_t v200 = *(void *)(v199 + 152);
                uint64_t v201 = *(unsigned int *)(v199 + 168);
                if (!v201) {
                  goto LABEL_229;
                }
                LODWORD(v202) = (v201 - 1) & ((v189 >> 4) ^ (v189 >> 9));
                long long v203 = (uint64_t **)(v200 + 16 * v202);
                int64_t v204 = *v203;
                if (*v203 != v189)
                {
                  int v205 = 1;
                  while (v204 != (uint64_t *)-4096)
                  {
                    int v206 = v202 + v205++;
                    uint64_t v202 = v206 & (v201 - 1);
                    int64_t v204 = *(uint64_t **)(v200 + 16 * v202);
                    if (v204 == v189)
                    {
                      long long v203 = (uint64_t **)(v200 + 16 * v202);
                      goto LABEL_230;
                    }
                  }
LABEL_229:
                  long long v203 = (uint64_t **)(v200 + 16 * v201);
                }
LABEL_230:
                uint64_t v207 = v203[1];
                size_t v208 = *v207;
                size_t v186 = (char *)(v207 + 2);
                size_t v185 = v208;
              }
              else
              {
                size_t v185 = 0;
                size_t v186 = &byte_1CFBCE98E;
              }
              if ((*((unsigned char *)v35 + 23) & 0x10) != 0)
              {
                uint64_t v209 = **(void **)*v35;
                uint64_t v210 = *(void *)(v209 + 152);
                uint64_t v211 = *(unsigned int *)(v209 + 168);
                if (!v211) {
                  goto LABEL_238;
                }
                LODWORD(v212) = (v211 - 1) & v36;
                uint64_t v213 = (uint64_t **)(v210 + 16 * v212);
                char v214 = *v213;
                if (*v213 != v35)
                {
                  int v215 = 1;
                  while (v214 != (uint64_t *)-4096)
                  {
                    int v216 = v212 + v215++;
                    uint64_t v212 = v216 & (v211 - 1);
                    char v214 = *(uint64_t **)(v210 + 16 * v212);
                    if (v214 == v35)
                    {
                      uint64_t v213 = (uint64_t **)(v210 + 16 * v212);
                      goto LABEL_239;
                    }
                  }
LABEL_238:
                  uint64_t v213 = (uint64_t **)(v210 + 16 * v211);
                }
LABEL_239:
                int v217 = v213[1];
                size_t v218 = *v217;
                BOOL v188 = (char *)(v217 + 2);
                size_t v187 = v218;
              }
              else
              {
                size_t v187 = 0;
                BOOL v188 = &byte_1CFBCE98E;
              }
              if (v187 >= v185) {
                size_t v219 = v185;
              }
              else {
                size_t v219 = v187;
              }
              if (!v219 || (int v220 = memcmp(v186, v188, v219)) == 0)
              {
                BOOL v198 = v185 > v187;
                break;
              }
              if ((v220 & 0x80000000) == 0) {
                goto LABEL_250;
              }
              continue;
            }
            break;
          }
          if (!v198) {
            continue;
          }
          break;
        }
LABEL_250:
        if (v10 < v147) {
          continue;
        }
        break;
      }
LABEL_251:
      size_t v221 = v10 - 1;
      if (v10 - 1 != v1030) {
        *int v1030 = *v221;
      }
      *size_t v221 = v35;
      BOOL v5 = v37 >= v75;
      unint64_t v9 = (unint64_t)a2;
      a4 = v1034;
      if (v5)
      {
        BOOL v222 = sub_1CC805E7C(v1030, v10 - 1, a3);
        BOOL result = sub_1CC805E7C(v10, a2, a3);
        if (result)
        {
          a2 = v10 - 1;
          if (v222) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v222) {
          goto LABEL_257;
        }
      }
      else
      {
LABEL_257:
        BOOL result = sub_1CC801C7C(v1030, v10 - 1, a3, v1034, a5 & 1);
        a5 = 0;
      }
    }
  }
  uint64_t v482 = v11 + 1;
  BOOL v484 = v11 == (uint64_t **)v9 || v482 == (uint64_t **)v9;
  if ((a5 & 1) == 0)
  {
    if (v484) {
      return result;
    }
    while (1)
    {
      uint64_t v817 = v1030;
      int v1030 = v482;
      unsigned int v818 = *v817;
      uint64_t v819 = v817[1];
      uint64_t v820 = *a3;
      unsigned int v821 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v819, a3[1]);
      BOOL result = sub_1CC806CF0(*(void *)(v820 + 6936), *(_DWORD *)(v820 + 6952), v818, a3[1]);
      BOOL v822 = v821 >= result;
      if (v821 != result)
      {
        uint64_t v824 = a2;
        uint64_t v826 = v1030;
        if (v822) {
          goto LABEL_1100;
        }
        goto LABEL_1056;
      }
      int v823 = (void **)v819[1];
      uint64_t v824 = a2;
      unsigned int v825 = 0;
      if (v823)
      {
        uint64_t v826 = v1030;
        do
        {
          ++v825;
          int v823 = (void **)v823[1];
        }
        while (v823);
      }
      else
      {
        uint64_t v826 = v1030;
      }
      v827 = (void **)v818[1];
      if (v827)
      {
        unsigned int v828 = 0;
        do
        {
          ++v828;
          v827 = (void **)v827[1];
        }
        while (v827);
      }
      else
      {
        unsigned int v828 = 0;
      }
      BOOL v829 = v825 > v828;
      if (v825 == v828)
      {
        if ((*((unsigned char *)v819 + 23) & 0x10) != 0)
        {
          uint64_t v830 = **(void **)*v819;
          uint64_t v831 = *(void *)(v830 + 152);
          uint64_t v832 = *(unsigned int *)(v830 + 168);
          if (v832)
          {
            LODWORD(v833) = (v832 - 1) & ((v819 >> 4) ^ (v819 >> 9));
            uint64_t v834 = (uint64_t **)(v831 + 16 * v833);
            uint64_t v835 = *v834;
            if (*v834 != v819)
            {
              int v836 = 1;
              do
              {
                if (v835 == (uint64_t *)-4096) {
                  goto LABEL_1035;
                }
                int v837 = v833 + v836++;
                uint64_t v833 = v837 & (v832 - 1);
                uint64_t v835 = *(uint64_t **)(v831 + 16 * v833);
              }
              while (v835 != v819);
              uint64_t v834 = (uint64_t **)(v831 + 16 * v833);
            }
          }
          else
          {
LABEL_1035:
            uint64_t v834 = (uint64_t **)(v831 + 16 * v832);
          }
          std::string::size_type v838 = (size_t *)v834[1];
          size_t v840 = *v838;
          BOOL result = (uint64_t)(v838 + 2);
          size_t v839 = v840;
        }
        else
        {
          size_t v839 = 0;
          BOOL result = (uint64_t)&byte_1CFBCE98E;
        }
        if ((*((unsigned char *)v818 + 23) & 0x10) != 0)
        {
          uint64_t v841 = **(void **)*v818;
          uint64_t v842 = *(void *)(v841 + 152);
          uint64_t v843 = *(unsigned int *)(v841 + 168);
          if (v843)
          {
            LODWORD(v844) = (v843 - 1) & ((v818 >> 4) ^ (v818 >> 9));
            uint64_t v845 = (uint64_t **)(v842 + 16 * v844);
            int v846 = *v845;
            if (*v845 != v818)
            {
              int v847 = 1;
              do
              {
                if (v846 == (uint64_t *)-4096) {
                  goto LABEL_1044;
                }
                int v848 = v844 + v847++;
                uint64_t v844 = v848 & (v843 - 1);
                int v846 = *(uint64_t **)(v842 + 16 * v844);
              }
              while (v846 != v818);
              uint64_t v845 = (uint64_t **)(v842 + 16 * v844);
            }
          }
          else
          {
LABEL_1044:
            uint64_t v845 = (uint64_t **)(v842 + 16 * v843);
          }
          v849 = v845[1];
          size_t v852 = *v849;
          uint64_t v850 = (char *)(v849 + 2);
          size_t v851 = v852;
        }
        else
        {
          size_t v851 = 0;
          uint64_t v850 = &byte_1CFBCE98E;
        }
        if (v851 >= v839) {
          size_t v853 = v839;
        }
        else {
          size_t v853 = v851;
        }
        if (v853)
        {
          BOOL result = memcmp((const void *)result, v850, v853);
          if (result)
          {
            if ((result & 0x80000000) != 0) {
              goto LABEL_1100;
            }
            goto LABEL_1056;
          }
        }
        BOOL v829 = v839 > v851;
      }
      if (!v829) {
        goto LABEL_1100;
      }
LABEL_1056:
      v854 = *v826;
      unsigned int v855 = (*v826 >> 4) ^ (*v826 >> 9);
      do
      {
        while (1)
        {
          while (1)
          {
            v856 = v826;
            uint64_t v826 = v817;
            std::string *v856 = *v817;
            v858 = *--v817;
            int v857 = v858;
            uint64_t v859 = *a3;
            unsigned int v860 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v854, a3[1]);
            BOOL result = sub_1CC806CF0(*(void *)(v859 + 6936), *(_DWORD *)(v859 + 6952), v858, a3[1]);
            if (v860 == result) {
              break;
            }
            if (v860 >= result) {
              goto LABEL_1099;
            }
          }
          uint64_t v861 = (void **)v854[1];
          if (v861)
          {
            unsigned int v862 = 0;
            do
            {
              ++v862;
              uint64_t v861 = (void **)v861[1];
            }
            while (v861);
          }
          else
          {
            unsigned int v862 = 0;
          }
          uint64_t v863 = v857[1];
          if (v863)
          {
            unsigned int v864 = 0;
            do
            {
              ++v864;
              uint64_t v863 = *(void *)(v863 + 8);
            }
            while (v863);
          }
          else
          {
            unsigned int v864 = 0;
          }
          BOOL v865 = v862 > v864;
          if (v862 != v864) {
            break;
          }
          if ((*((unsigned char *)v854 + 23) & 0x10) != 0)
          {
            uint64_t v866 = **(void **)*v854;
            uint64_t v867 = *(void *)(v866 + 152);
            uint64_t v868 = *(unsigned int *)(v866 + 168);
            if (v868)
            {
              LODWORD(v869) = (v868 - 1) & v855;
              uint64_t v870 = (uint64_t **)(v867 + 16 * v869);
              int v871 = *v870;
              if (*v870 != v854)
              {
                int v872 = 1;
                do
                {
                  if (v871 == (uint64_t *)-4096) {
                    goto LABEL_1076;
                  }
                  int v873 = v869 + v872++;
                  uint64_t v869 = v873 & (v868 - 1);
                  int v871 = *(uint64_t **)(v867 + 16 * v869);
                }
                while (v871 != v854);
                uint64_t v870 = (uint64_t **)(v867 + 16 * v869);
              }
            }
            else
            {
LABEL_1076:
              uint64_t v870 = (uint64_t **)(v867 + 16 * v868);
            }
            v874 = (size_t *)v870[1];
            size_t v876 = *v874;
            BOOL result = (uint64_t)(v874 + 2);
            size_t v875 = v876;
          }
          else
          {
            size_t v875 = 0;
            BOOL result = (uint64_t)&byte_1CFBCE98E;
          }
          if ((*((unsigned char *)v857 + 23) & 0x10) != 0)
          {
            uint64_t v877 = **(void **)*v857;
            uint64_t v878 = *(void *)(v877 + 152);
            uint64_t v879 = *(unsigned int *)(v877 + 168);
            if (v879)
            {
              LODWORD(v880) = (v879 - 1) & ((v857 >> 4) ^ (v857 >> 9));
              unsigned int v881 = (uint64_t **)(v878 + 16 * v880);
              v882 = *v881;
              if (*v881 != v857)
              {
                int v883 = 1;
                do
                {
                  if (v882 == (uint64_t *)-4096) {
                    goto LABEL_1085;
                  }
                  int v884 = v880 + v883++;
                  uint64_t v880 = v884 & (v879 - 1);
                  v882 = *(uint64_t **)(v878 + 16 * v880);
                }
                while (v882 != v857);
                unsigned int v881 = (uint64_t **)(v878 + 16 * v880);
              }
            }
            else
            {
LABEL_1085:
              unsigned int v881 = (uint64_t **)(v878 + 16 * v879);
            }
            int v885 = v881[1];
            size_t v888 = *v885;
            BOOL v886 = (char *)(v885 + 2);
            size_t v887 = v888;
          }
          else
          {
            size_t v887 = 0;
            BOOL v886 = &byte_1CFBCE98E;
          }
          if (v887 >= v875) {
            size_t v889 = v875;
          }
          else {
            size_t v889 = v887;
          }
          if (!v889 || (BOOL result = memcmp((const void *)result, v886, v889), !result))
          {
            BOOL v865 = v875 > v887;
            break;
          }
          if ((result & 0x80000000) != 0) {
            goto LABEL_1099;
          }
        }
      }
      while (v865);
LABEL_1099:
      *uint64_t v826 = v854;
      uint64_t v824 = a2;
      uint64_t v826 = v1030;
LABEL_1100:
      uint64_t v482 = v826 + 1;
      if (v826 + 1 == v824) {
        return result;
      }
    }
  }
  if (v484) {
    return result;
  }
  unsigned int v485 = v11;
  while (2)
  {
    uint64_t v486 = v485;
    unsigned int v485 = v482;
    uint64_t v487 = *v486;
    char v488 = v486[1];
    uint64_t v489 = *a3;
    unsigned int v490 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v488, a3[1]);
    BOOL result = sub_1CC806CF0(*(void *)(v489 + 6936), *(_DWORD *)(v489 + 6952), v487, a3[1]);
    if (v490 != result)
    {
      if (v490 >= result) {
        goto LABEL_681;
      }
      goto LABEL_633;
    }
    uint64_t v491 = (void **)v488[1];
    if (v491)
    {
      unsigned int v492 = 0;
      do
      {
        ++v492;
        uint64_t v491 = (void **)v491[1];
      }
      while (v491);
    }
    else
    {
      unsigned int v492 = 0;
    }
    uint64_t v493 = (void **)v487[1];
    if (v493)
    {
      unsigned int v494 = 0;
      do
      {
        ++v494;
        uint64_t v493 = (void **)v493[1];
      }
      while (v493);
    }
    else
    {
      unsigned int v494 = 0;
    }
    BOOL v495 = v492 > v494;
    if (v492 == v494)
    {
      if ((*((unsigned char *)v488 + 23) & 0x10) != 0)
      {
        uint64_t v496 = **(void **)*v488;
        uint64_t v497 = *(void *)(v496 + 152);
        uint64_t v498 = *(unsigned int *)(v496 + 168);
        if (!v498) {
          goto LABEL_612;
        }
        LODWORD(v499) = (v498 - 1) & ((v488 >> 4) ^ (v488 >> 9));
        uint64_t v500 = (uint64_t **)(v497 + 16 * v499);
        unint64_t v501 = *v500;
        if (*v500 != v488)
        {
          int v502 = 1;
          while (v501 != (uint64_t *)-4096)
          {
            int v503 = v499 + v502++;
            uint64_t v499 = v503 & (v498 - 1);
            unint64_t v501 = *(uint64_t **)(v497 + 16 * v499);
            if (v501 == v488)
            {
              uint64_t v500 = (uint64_t **)(v497 + 16 * v499);
              goto LABEL_613;
            }
          }
LABEL_612:
          uint64_t v500 = (uint64_t **)(v497 + 16 * v498);
        }
LABEL_613:
        uint64_t v504 = (size_t *)v500[1];
        size_t v506 = *v504;
        BOOL result = (uint64_t)(v504 + 2);
        size_t v505 = v506;
      }
      else
      {
        size_t v505 = 0;
        BOOL result = (uint64_t)&byte_1CFBCE98E;
      }
      if ((*((unsigned char *)v487 + 23) & 0x10) != 0)
      {
        uint64_t v507 = **(void **)*v487;
        uint64_t v508 = *(void *)(v507 + 152);
        uint64_t v509 = *(unsigned int *)(v507 + 168);
        if (!v509) {
          goto LABEL_621;
        }
        LODWORD(v510) = (v509 - 1) & ((v487 >> 4) ^ (v487 >> 9));
        uint64_t v511 = (uint64_t **)(v508 + 16 * v510);
        uint64_t v512 = *v511;
        if (*v511 != v487)
        {
          int v513 = 1;
          while (v512 != (uint64_t *)-4096)
          {
            int v514 = v510 + v513++;
            uint64_t v510 = v514 & (v509 - 1);
            uint64_t v512 = *(uint64_t **)(v508 + 16 * v510);
            if (v512 == v487)
            {
              uint64_t v511 = (uint64_t **)(v508 + 16 * v510);
              goto LABEL_622;
            }
          }
LABEL_621:
          uint64_t v511 = (uint64_t **)(v508 + 16 * v509);
        }
LABEL_622:
        uint64_t v515 = v511[1];
        size_t v518 = *v515;
        uint64_t v516 = (char *)(v515 + 2);
        size_t v517 = v518;
      }
      else
      {
        size_t v517 = 0;
        uint64_t v516 = &byte_1CFBCE98E;
      }
      if (v517 >= v505) {
        size_t v519 = v505;
      }
      else {
        size_t v519 = v517;
      }
      if (v519)
      {
        BOOL result = memcmp((const void *)result, v516, v519);
        if (result)
        {
          if ((result & 0x80000000) != 0) {
            goto LABEL_681;
          }
          goto LABEL_633;
        }
      }
      BOOL v495 = v505 > v517;
    }
    if (!v495) {
      goto LABEL_681;
    }
LABEL_633:
    v520 = v486[1];
    v486[1] = *v486;
    unint64_t v521 = v1030;
    if (v486 == v1030) {
      goto LABEL_680;
    }
    uint64_t v522 = v486;
    while (2)
    {
      unsigned int v524 = *--v522;
      BOOL v523 = v524;
      uint64_t v525 = *a3;
      unsigned int v526 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v520, a3[1]);
      BOOL result = sub_1CC806CF0(*(void *)(v525 + 6936), *(_DWORD *)(v525 + 6952), v524, a3[1]);
      if (v526 != result)
      {
        if (v526 >= result) {
          break;
        }
        goto LABEL_675;
      }
      int v527 = (void **)v520[1];
      if (v527)
      {
        unsigned int v528 = 0;
        do
        {
          ++v528;
          int v527 = (void **)v527[1];
        }
        while (v527);
      }
      else
      {
        unsigned int v528 = 0;
      }
      uint64_t v529 = v523[1];
      if (v529)
      {
        unsigned int v530 = 0;
        do
        {
          ++v530;
          uint64_t v529 = *(void *)(v529 + 8);
        }
        while (v529);
      }
      else
      {
        unsigned int v530 = 0;
      }
      BOOL v531 = v528 > v530;
      if (v528 == v530)
      {
        if ((*((unsigned char *)v520 + 23) & 0x10) != 0)
        {
          uint64_t v532 = **(void **)*v520;
          uint64_t v533 = *(void *)(v532 + 152);
          uint64_t v534 = *(unsigned int *)(v532 + 168);
          if (!v534) {
            goto LABEL_654;
          }
          LODWORD(v535) = (v534 - 1) & ((v520 >> 4) ^ (v520 >> 9));
          uint64_t v536 = (uint64_t **)(v533 + 16 * v535);
          v537 = *v536;
          if (*v536 != v520)
          {
            int v538 = 1;
            while (v537 != (uint64_t *)-4096)
            {
              int v539 = v535 + v538++;
              uint64_t v535 = v539 & (v534 - 1);
              v537 = *(uint64_t **)(v533 + 16 * v535);
              if (v537 == v520)
              {
                uint64_t v536 = (uint64_t **)(v533 + 16 * v535);
                goto LABEL_655;
              }
            }
LABEL_654:
            uint64_t v536 = (uint64_t **)(v533 + 16 * v534);
          }
LABEL_655:
          unsigned int v540 = (size_t *)v536[1];
          size_t v542 = *v540;
          BOOL result = (uint64_t)(v540 + 2);
          size_t v541 = v542;
        }
        else
        {
          size_t v541 = 0;
          BOOL result = (uint64_t)&byte_1CFBCE98E;
        }
        if ((*((unsigned char *)v523 + 23) & 0x10) != 0)
        {
          uint64_t v543 = **(void **)*v523;
          uint64_t v544 = *(void *)(v543 + 152);
          uint64_t v545 = *(unsigned int *)(v543 + 168);
          if (!v545) {
            goto LABEL_663;
          }
          LODWORD(v546) = (v545 - 1) & ((v523 >> 4) ^ (v523 >> 9));
          unint64_t v547 = (uint64_t **)(v544 + 16 * v546);
          int v548 = *v547;
          if (*v547 != v523)
          {
            int v549 = 1;
            while (v548 != (uint64_t *)-4096)
            {
              int v550 = v546 + v549++;
              uint64_t v546 = v550 & (v545 - 1);
              int v548 = *(uint64_t **)(v544 + 16 * v546);
              if (v548 == v523)
              {
                unint64_t v547 = (uint64_t **)(v544 + 16 * v546);
                goto LABEL_664;
              }
            }
LABEL_663:
            unint64_t v547 = (uint64_t **)(v544 + 16 * v545);
          }
LABEL_664:
          v551 = v547[1];
          size_t v554 = *v551;
          uint64_t v552 = (char *)(v551 + 2);
          size_t v553 = v554;
        }
        else
        {
          size_t v553 = 0;
          uint64_t v552 = &byte_1CFBCE98E;
        }
        if (v553 >= v541) {
          size_t v555 = v541;
        }
        else {
          size_t v555 = v553;
        }
        if (v555)
        {
          BOOL result = memcmp((const void *)result, v552, v555);
          if (result)
          {
            if ((result & 0x80000000) != 0) {
              break;
            }
            goto LABEL_675;
          }
        }
        BOOL v531 = v541 > v553;
      }
      if (v531)
      {
LABEL_675:
        uint64_t *v486 = *(v486 - 1);
        uint64_t v486 = v522;
        if (v522 == v1030)
        {
          unint64_t v521 = v1030;
          goto LABEL_680;
        }
        continue;
      }
      break;
    }
    unint64_t v521 = v486;
LABEL_680:
    llvm::BasicBlock *v521 = v520;
LABEL_681:
    uint64_t v482 = v485 + 1;
    if (v485 + 1 != a2) {
      continue;
    }
    return result;
  }
}

uint64_t sub_1CC805508(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t *a4)
{
  BOOL v6 = a2;
  unsigned int v7 = a1;
  unsigned int v8 = *a2;
  unint64_t v9 = *a1;
  uint64_t v10 = *a4;
  unsigned int v11 = sub_1CC806CF0(*(void *)(v10 + 6936), *(_DWORD *)(v10 + 6952), *a2, a4[1]);
  unsigned int v12 = sub_1CC806CF0(*(void *)(v10 + 6936), *(_DWORD *)(v10 + 6952), v9, a4[1]);
  if (v11 != v12)
  {
    if (v11 >= v12) {
      goto LABEL_56;
    }
    goto LABEL_17;
  }
  uint64_t v13 = v8[1];
  if (v13)
  {
    unsigned int v14 = 0;
    do
    {
      ++v14;
      uint64_t v13 = *(void *)(v13 + 8);
    }
    while (v13);
  }
  else
  {
    unsigned int v14 = 0;
  }
  int v15 = (void **)v9[1];
  if (v15)
  {
    unsigned int v16 = 0;
    do
    {
      ++v16;
      int v15 = (void **)v15[1];
    }
    while (v15);
  }
  else
  {
    unsigned int v16 = 0;
  }
  BOOL v17 = v14 > v16;
  if (v14 != v16) {
    goto LABEL_55;
  }
  if ((*((unsigned char *)v8 + 23) & 0x10) != 0)
  {
    uint64_t v18 = **(void **)*v8;
    uint64_t v19 = *(void *)(v18 + 152);
    uint64_t v20 = *(unsigned int *)(v18 + 168);
    if (v20)
    {
      LODWORD(v21) = (v20 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      double v22 = (uint64_t **)(v19 + 16 * v21);
      unsigned int v23 = *v22;
      if (*v22 == v8)
      {
LABEL_37:
        uint64_t v44 = v22[1];
        size_t v47 = *v44;
        unsigned int v45 = (char *)(v44 + 2);
        size_t v46 = v47;
        goto LABEL_38;
      }
      int v24 = 1;
      while (v23 != (uint64_t *)-4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v20 - 1);
        unsigned int v23 = *(uint64_t **)(v19 + 16 * v21);
        if (v23 == v8)
        {
          double v22 = (uint64_t **)(v19 + 16 * v21);
          goto LABEL_37;
        }
      }
    }
    double v22 = (uint64_t **)(v19 + 16 * v20);
    goto LABEL_37;
  }
  size_t v46 = 0;
  unsigned int v45 = &byte_1CFBCE98E;
LABEL_38:
  if ((*((unsigned char *)v9 + 23) & 0x10) != 0)
  {
    uint64_t v48 = **(void **)*v9;
    uint64_t v49 = *(void *)(v48 + 152);
    uint64_t v50 = *(unsigned int *)(v48 + 168);
    if (v50)
    {
      LODWORD(v51) = (v50 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      uint64_t v52 = (uint64_t **)(v49 + 16 * v51);
      size_t v53 = *v52;
      if (*v52 == v9)
      {
LABEL_46:
        int v56 = v52[1];
        size_t v59 = *v56;
        size_t v57 = (char *)(v56 + 2);
        size_t v58 = v59;
        goto LABEL_47;
      }
      int v54 = 1;
      while (v53 != (uint64_t *)-4096)
      {
        int v55 = v51 + v54++;
        uint64_t v51 = v55 & (v50 - 1);
        size_t v53 = *(uint64_t **)(v49 + 16 * v51);
        if (v53 == v9)
        {
          uint64_t v52 = (uint64_t **)(v49 + 16 * v51);
          goto LABEL_46;
        }
      }
    }
    uint64_t v52 = (uint64_t **)(v49 + 16 * v50);
    goto LABEL_46;
  }
  size_t v58 = 0;
  size_t v57 = &byte_1CFBCE98E;
LABEL_47:
  if (v58 >= v46) {
    size_t v60 = v46;
  }
  else {
    size_t v60 = v58;
  }
  if (!v60 || (int v61 = memcmp(v45, v57, v60)) == 0)
  {
    BOOL v17 = v46 > v58;
LABEL_55:
    if (!v17) {
      goto LABEL_56;
    }
    goto LABEL_17;
  }
  if (v61 < 0)
  {
LABEL_56:
    uint64_t v62 = *a3;
    uint64_t v63 = *v6;
    uint64_t v64 = *a4;
    unsigned int v65 = sub_1CC806CF0(*(void *)(*a4 + 6936), *(_DWORD *)(*a4 + 6952), *a3, a4[1]);
    uint64_t result = sub_1CC806CF0(*(void *)(v64 + 6936), *(_DWORD *)(v64 + 6952), v63, a4[1]);
    if (v65 != result)
    {
      if (v65 >= result) {
        return result;
      }
      goto LABEL_135;
    }
    uint64_t v66 = v62[1];
    if (v66)
    {
      unsigned int v67 = 0;
      do
      {
        ++v67;
        uint64_t v66 = *(void *)(v66 + 8);
      }
      while (v66);
    }
    else
    {
      unsigned int v67 = 0;
    }
    uint64_t v68 = v63[1];
    if (v68)
    {
      unsigned int v69 = 0;
      do
      {
        ++v69;
        uint64_t v68 = *(void *)(v68 + 8);
      }
      while (v68);
    }
    else
    {
      unsigned int v69 = 0;
    }
    BOOL v70 = v67 > v69;
    if (v67 != v69) {
      goto LABEL_133;
    }
    if ((*((unsigned char *)v62 + 23) & 0x10) == 0)
    {
      size_t v91 = 0;
      uint64_t result = (uint64_t)&byte_1CFBCE98E;
LABEL_88:
      if ((*((unsigned char *)v63 + 23) & 0x10) == 0)
      {
        size_t v126 = 0;
        BOOL v125 = &byte_1CFBCE98E;
        goto LABEL_125;
      }
      uint64_t v93 = **(void **)*v63;
      uint64_t v94 = *(void *)(v93 + 152);
      uint64_t v95 = *(unsigned int *)(v93 + 168);
      if (v95)
      {
        LODWORD(v96) = (v95 - 1) & ((v63 >> 4) ^ (v63 >> 9));
        size_t v97 = (uint64_t **)(v94 + 16 * v96);
        uint64_t v98 = *v97;
        if (*v97 == v63)
        {
LABEL_124:
          uint64_t v124 = v97[1];
          size_t v127 = *v124;
          BOOL v125 = (char *)(v124 + 2);
          size_t v126 = v127;
LABEL_125:
          if (v126 >= v91) {
            size_t v128 = v91;
          }
          else {
            size_t v128 = v126;
          }
          if (v128)
          {
            uint64_t result = memcmp((const void *)result, v125, v128);
            if (result)
            {
              if ((result & 0x80000000) != 0) {
                return result;
              }
              goto LABEL_135;
            }
          }
          BOOL v70 = v91 > v126;
LABEL_133:
          if (!v70) {
            return result;
          }
LABEL_135:
          uint64_t v129 = *v6;
          void *v6 = *a3;
          *a3 = v129;
          size_t v130 = *v6;
          size_t v131 = *v7;
          uint64_t v132 = *a4;
          unsigned int v133 = sub_1CC806CF0(*(void *)(*a4 + 6936), *(_DWORD *)(*a4 + 6952), *v6, a4[1]);
          uint64_t result = sub_1CC806CF0(*(void *)(v132 + 6936), *(_DWORD *)(v132 + 6952), v131, a4[1]);
          BOOL v110 = v133 >= result;
          if (v133 == result)
          {
            uint64_t v134 = v130[1];
            if (v134)
            {
              unsigned int v135 = 0;
              do
              {
                ++v135;
                uint64_t v134 = *(void *)(v134 + 8);
              }
              while (v134);
            }
            else
            {
              unsigned int v135 = 0;
            }
            uint64_t v136 = (void **)v131[1];
            if (v136)
            {
              unsigned int v137 = 0;
              do
              {
                ++v137;
                uint64_t v136 = (void **)v136[1];
              }
              while (v136);
            }
            else
            {
              unsigned int v137 = 0;
            }
            BOOL v115 = v135 > v137;
            if (v135 != v137) {
              goto LABEL_194;
            }
            if ((*((unsigned char *)v130 + 23) & 0x10) == 0)
            {
              size_t v159 = 0;
              uint64_t result = (uint64_t)&byte_1CFBCE98E;
LABEL_168:
              if ((*((unsigned char *)v131 + 23) & 0x10) == 0)
              {
                size_t v176 = 0;
                long long v175 = &byte_1CFBCE98E;
                goto LABEL_186;
              }
              uint64_t v161 = **(void **)*v131;
              uint64_t v162 = *(void *)(v161 + 152);
              uint64_t v163 = *(unsigned int *)(v161 + 168);
              if (v163)
              {
                LODWORD(v164) = (v163 - 1) & ((v131 >> 4) ^ (v131 >> 9));
                int v165 = (uint64_t **)(v162 + 16 * v164);
                int v166 = *v165;
                if (*v165 == v131)
                {
LABEL_185:
                  uint64_t v174 = v165[1];
                  size_t v177 = *v174;
                  long long v175 = (char *)(v174 + 2);
                  size_t v176 = v177;
LABEL_186:
                  if (v176 >= v159) {
                    size_t v178 = v159;
                  }
                  else {
                    size_t v178 = v176;
                  }
                  if (v178)
                  {
                    uint64_t result = memcmp((const void *)result, v175, v178);
                    if (result)
                    {
LABEL_191:
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
LABEL_151:
                      int v146 = *v7;
                      void *v7 = *v6;
                      void *v6 = v146;
                      return result;
                    }
                  }
                  BOOL v115 = v159 > v176;
                  goto LABEL_194;
                }
                int v167 = 1;
                while (v166 != (uint64_t *)-4096)
                {
                  int v168 = v164 + v167++;
                  uint64_t v164 = v168 & (v163 - 1);
                  int v166 = *(uint64_t **)(v162 + 16 * v164);
                  if (v166 == v131)
                  {
                    int v165 = (uint64_t **)(v162 + 16 * v164);
                    goto LABEL_185;
                  }
                }
              }
              int v165 = (uint64_t **)(v162 + 16 * v163);
              goto LABEL_185;
            }
            uint64_t v138 = **(void **)*v130;
            uint64_t v139 = *(void *)(v138 + 152);
            uint64_t v140 = *(unsigned int *)(v138 + 168);
            if (v140)
            {
              LODWORD(v141) = (v140 - 1) & ((v130 >> 4) ^ (v130 >> 9));
              int v142 = (uint64_t **)(v139 + 16 * v141);
              size_t v143 = *v142;
              if (*v142 == v130)
              {
LABEL_167:
                BOOL v158 = (size_t *)v142[1];
                size_t v160 = *v158;
                uint64_t result = (uint64_t)(v158 + 2);
                size_t v159 = v160;
                goto LABEL_168;
              }
              int v144 = 1;
              while (v143 != (uint64_t *)-4096)
              {
                int v145 = v141 + v144++;
                uint64_t v141 = v145 & (v140 - 1);
                size_t v143 = *(uint64_t **)(v139 + 16 * v141);
                if (v143 == v130)
                {
                  int v142 = (uint64_t **)(v139 + 16 * v141);
                  goto LABEL_167;
                }
              }
            }
            int v142 = (uint64_t **)(v139 + 16 * v140);
            goto LABEL_167;
          }
LABEL_150:
          if (v110) {
            return result;
          }
          goto LABEL_151;
        }
        int v99 = 1;
        while (v98 != (uint64_t *)-4096)
        {
          int v100 = v96 + v99++;
          uint64_t v96 = v100 & (v95 - 1);
          uint64_t v98 = *(uint64_t **)(v94 + 16 * v96);
          if (v98 == v63)
          {
            size_t v97 = (uint64_t **)(v94 + 16 * v96);
            goto LABEL_124;
          }
        }
      }
      size_t v97 = (uint64_t **)(v94 + 16 * v95);
      goto LABEL_124;
    }
    uint64_t v71 = **(void **)*v62;
    uint64_t v72 = *(void *)(v71 + 152);
    uint64_t v73 = *(unsigned int *)(v71 + 168);
    if (v73)
    {
      LODWORD(v74) = (v73 - 1) & ((v62 >> 4) ^ (v62 >> 9));
      uint64_t v75 = (uint64_t **)(v72 + 16 * v74);
      char v76 = *v75;
      if (*v75 == v62)
      {
LABEL_87:
        size_t v90 = (size_t *)v75[1];
        size_t v92 = *v90;
        uint64_t result = (uint64_t)(v90 + 2);
        size_t v91 = v92;
        goto LABEL_88;
      }
      int v77 = 1;
      while (v76 != (uint64_t *)-4096)
      {
        int v78 = v74 + v77++;
        uint64_t v74 = v78 & (v73 - 1);
        char v76 = *(uint64_t **)(v72 + 16 * v74);
        if (v76 == v62)
        {
          uint64_t v75 = (uint64_t **)(v72 + 16 * v74);
          goto LABEL_87;
        }
      }
    }
    uint64_t v75 = (uint64_t **)(v72 + 16 * v73);
    goto LABEL_87;
  }
LABEL_17:
  BOOL v26 = *a3;
  uint64_t v27 = *v6;
  uint64_t v28 = *a4;
  unsigned int v29 = sub_1CC806CF0(*(void *)(*a4 + 6936), *(_DWORD *)(*a4 + 6952), *a3, a4[1]);
  uint64_t result = sub_1CC806CF0(*(void *)(v28 + 6936), *(_DWORD *)(v28 + 6952), v27, a4[1]);
  if (v29 != result)
  {
    if (v29 >= result) {
      goto LABEL_106;
    }
    goto LABEL_33;
  }
  uint64_t v31 = v26[1];
  if (v31)
  {
    unsigned int v32 = 0;
    do
    {
      ++v32;
      uint64_t v31 = *(void *)(v31 + 8);
    }
    while (v31);
  }
  else
  {
    unsigned int v32 = 0;
  }
  uint64_t v33 = v27[1];
  if (v33)
  {
    unsigned int v34 = 0;
    do
    {
      ++v34;
      uint64_t v33 = *(void *)(v33 + 8);
    }
    while (v33);
  }
  else
  {
    unsigned int v34 = 0;
  }
  BOOL v35 = v32 > v34;
  if (v32 != v34)
  {
LABEL_105:
    if (!v35) {
      goto LABEL_106;
    }
LABEL_33:
    BOOL v6 = a3;
    goto LABEL_151;
  }
  if ((*((unsigned char *)v26 + 23) & 0x10) != 0)
  {
    uint64_t v36 = **(void **)*v26;
    uint64_t v37 = *(void *)(v36 + 152);
    uint64_t v38 = *(unsigned int *)(v36 + 168);
    if (v38)
    {
      LODWORD(v39) = (v38 - 1) & ((v26 >> 4) ^ (v26 >> 9));
      BOOL v40 = (uint64_t **)(v37 + 16 * v39);
      uint64_t v41 = *v40;
      if (*v40 == v26)
      {
LABEL_78:
        unsigned int v79 = (size_t *)v40[1];
        size_t v81 = *v79;
        uint64_t result = (uint64_t)(v79 + 2);
        size_t v80 = v81;
        goto LABEL_79;
      }
      int v42 = 1;
      while (v41 != (uint64_t *)-4096)
      {
        int v43 = v39 + v42++;
        uint64_t v39 = v43 & (v38 - 1);
        uint64_t v41 = *(uint64_t **)(v37 + 16 * v39);
        if (v41 == v26)
        {
          BOOL v40 = (uint64_t **)(v37 + 16 * v39);
          goto LABEL_78;
        }
      }
    }
    BOOL v40 = (uint64_t **)(v37 + 16 * v38);
    goto LABEL_78;
  }
  size_t v80 = 0;
  uint64_t result = (uint64_t)&byte_1CFBCE98E;
LABEL_79:
  if ((*((unsigned char *)v27 + 23) & 0x10) != 0)
  {
    uint64_t v82 = **(void **)*v27;
    uint64_t v83 = *(void *)(v82 + 152);
    uint64_t v84 = *(unsigned int *)(v82 + 168);
    if (v84)
    {
      LODWORD(v85) = (v84 - 1) & ((v27 >> 4) ^ (v27 >> 9));
      uint64_t v86 = (uint64_t **)(v83 + 16 * v85);
      uint64_t v87 = *v86;
      if (*v86 == v27)
      {
LABEL_96:
        uint64_t v101 = v86[1];
        size_t v104 = *v101;
        int v102 = (char *)(v101 + 2);
        size_t v103 = v104;
        goto LABEL_97;
      }
      int v88 = 1;
      while (v87 != (uint64_t *)-4096)
      {
        int v89 = v85 + v88++;
        uint64_t v85 = v89 & (v84 - 1);
        uint64_t v87 = *(uint64_t **)(v83 + 16 * v85);
        if (v87 == v27)
        {
          uint64_t v86 = (uint64_t **)(v83 + 16 * v85);
          goto LABEL_96;
        }
      }
    }
    uint64_t v86 = (uint64_t **)(v83 + 16 * v84);
    goto LABEL_96;
  }
  size_t v103 = 0;
  int v102 = &byte_1CFBCE98E;
LABEL_97:
  if (v103 >= v80) {
    size_t v105 = v80;
  }
  else {
    size_t v105 = v103;
  }
  if (!v105 || (uint64_t result = memcmp((const void *)result, v102, v105), !result))
  {
    BOOL v35 = v80 > v103;
    goto LABEL_105;
  }
  if ((result & 0x80000000) == 0) {
    goto LABEL_33;
  }
LABEL_106:
  unsigned int v106 = *v7;
  void *v7 = *v6;
  void *v6 = v106;
  int v107 = *a3;
  uint64_t v108 = *a4;
  unsigned int v109 = sub_1CC806CF0(*(void *)(*a4 + 6936), *(_DWORD *)(*a4 + 6952), *a3, a4[1]);
  uint64_t result = sub_1CC806CF0(*(void *)(v108 + 6936), *(_DWORD *)(v108 + 6952), v106, a4[1]);
  BOOL v110 = v109 >= result;
  if (v109 != result)
  {
    unsigned int v7 = v6;
    BOOL v6 = a3;
    goto LABEL_150;
  }
  uint64_t v111 = v107[1];
  if (v111)
  {
    unsigned int v112 = 0;
    do
    {
      ++v112;
      uint64_t v111 = *(void *)(v111 + 8);
    }
    while (v111);
  }
  else
  {
    unsigned int v112 = 0;
  }
  uint64_t v113 = (void **)v106[1];
  if (v113)
  {
    unsigned int v114 = 0;
    do
    {
      ++v114;
      uint64_t v113 = (void **)v113[1];
    }
    while (v113);
  }
  else
  {
    unsigned int v114 = 0;
  }
  BOOL v115 = v112 > v114;
  if (v112 != v114)
  {
    unsigned int v7 = v6;
    BOOL v6 = a3;
    goto LABEL_194;
  }
  if ((*((unsigned char *)v107 + 23) & 0x10) != 0)
  {
    uint64_t v116 = **(void **)*v107;
    uint64_t v117 = *(void *)(v116 + 152);
    uint64_t v118 = *(unsigned int *)(v116 + 168);
    if (v118)
    {
      LODWORD(v119) = (v118 - 1) & ((v107 >> 4) ^ (v107 >> 9));
      unsigned int v120 = (uint64_t **)(v117 + 16 * v119);
      uint64_t v121 = *v120;
      if (*v120 == v107)
      {
LABEL_158:
        unsigned int v147 = (size_t *)v120[1];
        size_t v149 = *v147;
        uint64_t result = (uint64_t)(v147 + 2);
        size_t v148 = v149;
        goto LABEL_159;
      }
      int v122 = 1;
      while (v121 != (uint64_t *)-4096)
      {
        int v123 = v119 + v122++;
        uint64_t v119 = v123 & (v118 - 1);
        uint64_t v121 = *(uint64_t **)(v117 + 16 * v119);
        if (v121 == v107)
        {
          unsigned int v120 = (uint64_t **)(v117 + 16 * v119);
          goto LABEL_158;
        }
      }
    }
    unsigned int v120 = (uint64_t **)(v117 + 16 * v118);
    goto LABEL_158;
  }
  size_t v148 = 0;
  uint64_t result = (uint64_t)&byte_1CFBCE98E;
LABEL_159:
  if ((*((unsigned char *)v106 + 23) & 0x10) == 0)
  {
    size_t v171 = 0;
    size_t v170 = &byte_1CFBCE98E;
    goto LABEL_177;
  }
  uint64_t v150 = **(void **)*v106;
  uint64_t v151 = *(void *)(v150 + 152);
  uint64_t v152 = *(unsigned int *)(v150 + 168);
  if (!v152) {
    goto LABEL_175;
  }
  LODWORD(v153) = (v152 - 1) & ((v106 >> 4) ^ (v106 >> 9));
  uint64_t v154 = (uint64_t **)(v151 + 16 * v153);
  unsigned int v155 = *v154;
  if (*v154 != v106)
  {
    int v156 = 1;
    while (v155 != (uint64_t *)-4096)
    {
      int v157 = v153 + v156++;
      uint64_t v153 = v157 & (v152 - 1);
      unsigned int v155 = *(uint64_t **)(v151 + 16 * v153);
      if (v155 == v106)
      {
        uint64_t v154 = (uint64_t **)(v151 + 16 * v153);
        goto LABEL_176;
      }
    }
LABEL_175:
    uint64_t v154 = (uint64_t **)(v151 + 16 * v152);
  }
LABEL_176:
  size_t v169 = v154[1];
  size_t v172 = *v169;
  size_t v170 = (char *)(v169 + 2);
  size_t v171 = v172;
LABEL_177:
  if (v171 >= v148) {
    size_t v173 = v148;
  }
  else {
    size_t v173 = v171;
  }
  if (v173)
  {
    uint64_t result = memcmp((const void *)result, v170, v173);
    if (result)
    {
      unsigned int v7 = v6;
      BOOL v6 = a3;
      goto LABEL_191;
    }
  }
  unsigned int v7 = v6;
  BOOL v6 = a3;
  BOOL v115 = v148 > v171;
LABEL_194:
  if (v115) {
    goto LABEL_151;
  }
  return result;
}

BOOL sub_1CC805E7C(uint64_t **a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a2 - a1;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v7 = *(a2 - 1);
      unsigned int v8 = *a1;
      uint64_t v9 = *a3;
      unsigned int v10 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v7, a3[1]);
      unsigned int v11 = sub_1CC806CF0(*(void *)(v9 + 6936), *(_DWORD *)(v9 + 6952), v8, a3[1]);
      if (v10 == v11)
      {
        unsigned int v12 = (void **)v7[1];
        if (v12)
        {
          unsigned int v13 = 0;
          do
          {
            ++v13;
            unsigned int v12 = (void **)v12[1];
          }
          while (v12);
        }
        else
        {
          unsigned int v13 = 0;
        }
        uint64_t v14 = v8[1];
        if (v14)
        {
          unsigned int v15 = 0;
          do
          {
            ++v15;
            uint64_t v14 = *(void *)(v14 + 8);
          }
          while (v14);
        }
        else
        {
          unsigned int v15 = 0;
        }
        BOOL v16 = v13 > v15;
        if (v13 == v15)
        {
          if ((*((unsigned char *)v7 + 23) & 0x10) != 0)
          {
            uint64_t v17 = **(void **)*v7;
            uint64_t v18 = *(void *)(v17 + 152);
            uint64_t v19 = *(unsigned int *)(v17 + 168);
            if (v19)
            {
              LODWORD(v20) = (v19 - 1) & ((v7 >> 4) ^ (v7 >> 9));
              uint64_t v21 = (uint64_t **)(v18 + 16 * v20);
              double v22 = *v21;
              if (*v21 != v7)
              {
                int v23 = 1;
                do
                {
                  if (v22 == (uint64_t *)-4096) {
                    goto LABEL_138;
                  }
                  int v24 = v20 + v23++;
                  uint64_t v20 = v24 & (v19 - 1);
                  double v22 = *(uint64_t **)(v18 + 16 * v20);
                }
                while (v22 != v7);
                uint64_t v21 = (uint64_t **)(v18 + 16 * v20);
              }
            }
            else
            {
LABEL_138:
              uint64_t v21 = (uint64_t **)(v18 + 16 * v19);
            }
            int v123 = v21[1];
            size_t v126 = *v123;
            uint64_t v124 = (char *)(v123 + 2);
            size_t v125 = v126;
          }
          else
          {
            size_t v125 = 0;
            uint64_t v124 = &byte_1CFBCE98E;
          }
          if ((*((unsigned char *)v8 + 23) & 0x10) != 0)
          {
            uint64_t v127 = **(void **)*v8;
            uint64_t v128 = *(void *)(v127 + 152);
            uint64_t v129 = *(unsigned int *)(v127 + 168);
            if (v129)
            {
              LODWORD(v130) = (v129 - 1) & ((v8 >> 4) ^ (v8 >> 9));
              size_t v131 = (uint64_t **)(v128 + 16 * v130);
              uint64_t v132 = *v131;
              if (*v131 != v8)
              {
                int v133 = 1;
                do
                {
                  if (v132 == (uint64_t *)-4096) {
                    goto LABEL_156;
                  }
                  int v134 = v130 + v133++;
                  uint64_t v130 = v134 & (v129 - 1);
                  uint64_t v132 = *(uint64_t **)(v128 + 16 * v130);
                }
                while (v132 != v8);
                size_t v131 = (uint64_t **)(v128 + 16 * v130);
              }
            }
            else
            {
LABEL_156:
              size_t v131 = (uint64_t **)(v128 + 16 * v129);
            }
            unsigned int v147 = v131[1];
            size_t v150 = *v147;
            size_t v148 = (char *)(v147 + 2);
            size_t v149 = v150;
          }
          else
          {
            size_t v149 = 0;
            size_t v148 = &byte_1CFBCE98E;
          }
          if (v149 >= v125) {
            size_t v151 = v125;
          }
          else {
            size_t v151 = v149;
          }
          if (v151)
          {
            int v152 = memcmp(v124, v148, v151);
            if (v152)
            {
              if (v152 < 0) {
                return 1;
              }
              goto LABEL_168;
            }
          }
          BOOL v16 = v125 > v149;
        }
        if (!v16) {
          return 1;
        }
        goto LABEL_168;
      }
      if (v10 >= v11) {
        return 1;
      }
LABEL_168:
      uint64_t v153 = *a1;
      *a1 = *(v4 - 1);
      *(v4 - 1) = v153;
      return 1;
    case 3:
      sub_1CC805508(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1CC806DAC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      size_t v103 = a1 + 2;
      size_t v104 = a1 + 3;
      sub_1CC806DAC(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      size_t v105 = *(v4 - 1);
      unsigned int v106 = a1[3];
      uint64_t v107 = *a3;
      unsigned int v108 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v105, a3[1]);
      unsigned int v109 = sub_1CC806CF0(*(void *)(v107 + 6936), *(_DWORD *)(v107 + 6952), v106, a3[1]);
      if (v108 != v109)
      {
        if (v108 >= v109) {
          return 1;
        }
        goto LABEL_181;
      }
      BOOL v110 = (void **)v105[1];
      if (v110)
      {
        unsigned int v111 = 0;
        do
        {
          ++v111;
          BOOL v110 = (void **)v110[1];
        }
        while (v110);
      }
      else
      {
        unsigned int v111 = 0;
      }
      unsigned int v112 = (void **)v106[1];
      if (v112)
      {
        unsigned int v113 = 0;
        do
        {
          ++v113;
          unsigned int v112 = (void **)v112[1];
        }
        while (v112);
      }
      else
      {
        unsigned int v113 = 0;
      }
      BOOL v114 = v111 > v113;
      if (v111 != v113) {
        goto LABEL_179;
      }
      if ((*((unsigned char *)v105 + 23) & 0x10) != 0)
      {
        uint64_t v115 = **(void **)*v105;
        uint64_t v116 = *(void *)(v115 + 152);
        uint64_t v117 = *(unsigned int *)(v115 + 168);
        if (v117)
        {
          LODWORD(v118) = (v117 - 1) & ((v105 >> 4) ^ (v105 >> 9));
          uint64_t v119 = (uint64_t **)(v116 + 16 * v118);
          unsigned int v120 = *v119;
          if (*v119 != v105)
          {
            int v121 = 1;
            do
            {
              if (v120 == (uint64_t *)-4096) {
                goto LABEL_147;
              }
              int v122 = v118 + v121++;
              uint64_t v118 = v122 & (v117 - 1);
              unsigned int v120 = *(uint64_t **)(v116 + 16 * v118);
            }
            while (v120 != v105);
            uint64_t v119 = (uint64_t **)(v116 + 16 * v118);
          }
        }
        else
        {
LABEL_147:
          uint64_t v119 = (uint64_t **)(v116 + 16 * v117);
        }
        unsigned int v135 = v119[1];
        size_t v138 = *v135;
        uint64_t v136 = (char *)(v135 + 2);
        size_t v137 = v138;
        goto LABEL_149;
      }
      size_t v137 = 0;
      uint64_t v136 = &byte_1CFBCE98E;
LABEL_149:
      if ((*((unsigned char *)v106 + 23) & 0x10) != 0)
      {
        uint64_t v139 = **(void **)*v106;
        uint64_t v140 = *(void *)(v139 + 152);
        uint64_t v141 = *(unsigned int *)(v139 + 168);
        if (v141)
        {
          LODWORD(v142) = (v141 - 1) & ((v106 >> 4) ^ (v106 >> 9));
          size_t v143 = (uint64_t **)(v140 + 16 * v142);
          int v144 = *v143;
          if (*v143 != v106)
          {
            int v145 = 1;
            do
            {
              if (v144 == (uint64_t *)-4096) {
                goto LABEL_169;
              }
              int v146 = v142 + v145++;
              uint64_t v142 = v146 & (v141 - 1);
              int v144 = *(uint64_t **)(v140 + 16 * v142);
            }
            while (v144 != v106);
            size_t v143 = (uint64_t **)(v140 + 16 * v142);
          }
        }
        else
        {
LABEL_169:
          size_t v143 = (uint64_t **)(v140 + 16 * v141);
        }
        uint64_t v154 = v143[1];
        size_t v157 = *v154;
        unsigned int v155 = (char *)(v154 + 2);
        size_t v156 = v157;
        goto LABEL_171;
      }
      size_t v156 = 0;
      unsigned int v155 = &byte_1CFBCE98E;
LABEL_171:
      if (v156 >= v137) {
        size_t v158 = v137;
      }
      else {
        size_t v158 = v156;
      }
      if (v158 && (int v159 = memcmp(v136, v155, v158)) != 0)
      {
        if (v159 < 0) {
          return 1;
        }
      }
      else
      {
        BOOL v114 = v137 > v156;
LABEL_179:
        if (!v114) {
          return 1;
        }
      }
LABEL_181:
      size_t v160 = *v104;
      void *v104 = *(v4 - 1);
      *(v4 - 1) = v160;
      uint64_t v161 = *v104;
      uint64_t v162 = *v103;
      uint64_t v163 = *a3;
      unsigned int v164 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v104, a3[1]);
      unsigned int v165 = sub_1CC806CF0(*(void *)(v163 + 6936), *(_DWORD *)(v163 + 6952), v162, a3[1]);
      if (v164 != v165)
      {
        if (v164 >= v165) {
          return 1;
        }
        goto LABEL_221;
      }
      uint64_t v166 = v161[1];
      if (v166)
      {
        unsigned int v167 = 0;
        do
        {
          ++v167;
          uint64_t v166 = *(void *)(v166 + 8);
        }
        while (v166);
      }
      else
      {
        unsigned int v167 = 0;
      }
      int v168 = (void **)v162[1];
      if (v168)
      {
        unsigned int v169 = 0;
        do
        {
          ++v169;
          int v168 = (void **)v168[1];
        }
        while (v168);
      }
      else
      {
        unsigned int v169 = 0;
      }
      BOOL v170 = v167 > v169;
      if (v167 != v169) {
        goto LABEL_219;
      }
      if ((*((unsigned char *)v161 + 23) & 0x10) != 0)
      {
        uint64_t v171 = **(void **)*v161;
        uint64_t v172 = *(void *)(v171 + 152);
        uint64_t v173 = *(unsigned int *)(v171 + 168);
        if (v173)
        {
          LODWORD(v174) = (v173 - 1) & ((v161 >> 4) ^ (v161 >> 9));
          long long v175 = (uint64_t **)(v172 + 16 * v174);
          size_t v176 = *v175;
          if (*v175 != v161)
          {
            int v177 = 1;
            do
            {
              if (v176 == (uint64_t *)-4096) {
                goto LABEL_200;
              }
              int v178 = v174 + v177++;
              uint64_t v174 = v178 & (v173 - 1);
              size_t v176 = *(uint64_t **)(v172 + 16 * v174);
            }
            while (v176 != v161);
            long long v175 = (uint64_t **)(v172 + 16 * v174);
          }
        }
        else
        {
LABEL_200:
          long long v175 = (uint64_t **)(v172 + 16 * v173);
        }
        int v179 = v175[1];
        size_t v182 = *v179;
        BOOL v180 = (char *)(v179 + 2);
        size_t v181 = v182;
        goto LABEL_202;
      }
      size_t v181 = 0;
      BOOL v180 = &byte_1CFBCE98E;
LABEL_202:
      if ((*((unsigned char *)v162 + 23) & 0x10) != 0)
      {
        uint64_t v183 = **(void **)*v162;
        uint64_t v184 = *(void *)(v183 + 152);
        uint64_t v185 = *(unsigned int *)(v183 + 168);
        if (v185)
        {
          LODWORD(v186) = (v185 - 1) & ((v162 >> 4) ^ (v162 >> 9));
          size_t v187 = (uint64_t **)(v184 + 16 * v186);
          BOOL v188 = *v187;
          if (*v187 != v162)
          {
            int v189 = 1;
            do
            {
              if (v188 == (uint64_t *)-4096) {
                goto LABEL_209;
              }
              int v190 = v186 + v189++;
              uint64_t v186 = v190 & (v185 - 1);
              BOOL v188 = *(uint64_t **)(v184 + 16 * v186);
            }
            while (v188 != v162);
            size_t v187 = (uint64_t **)(v184 + 16 * v186);
          }
        }
        else
        {
LABEL_209:
          size_t v187 = (uint64_t **)(v184 + 16 * v185);
        }
        uint64_t v191 = v187[1];
        size_t v194 = *v191;
        unsigned int v192 = (char *)(v191 + 2);
        size_t v193 = v194;
        goto LABEL_211;
      }
      size_t v193 = 0;
      unsigned int v192 = &byte_1CFBCE98E;
LABEL_211:
      if (v193 >= v181) {
        size_t v195 = v181;
      }
      else {
        size_t v195 = v193;
      }
      if (v195 && (int v196 = memcmp(v180, v192, v195)) != 0)
      {
        if (v196 < 0) {
          return 1;
        }
      }
      else
      {
        BOOL v170 = v181 > v193;
LABEL_219:
        if (!v170) {
          return 1;
        }
      }
LABEL_221:
      unsigned int v197 = *v103;
      BOOL v198 = *v104;
      uint64_t *v103 = *v104;
      void *v104 = v197;
      uint64_t v199 = a1[1];
      uint64_t v200 = *a3;
      unsigned int v201 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v198, a3[1]);
      unsigned int v202 = sub_1CC806CF0(*(void *)(v200 + 6936), *(_DWORD *)(v200 + 6952), v199, a3[1]);
      if (v201 != v202)
      {
        if (v201 >= v202) {
          return 1;
        }
        goto LABEL_261;
      }
      uint64_t v203 = v198[1];
      if (v203)
      {
        unsigned int v204 = 0;
        do
        {
          ++v204;
          uint64_t v203 = *(void *)(v203 + 8);
        }
        while (v203);
      }
      else
      {
        unsigned int v204 = 0;
      }
      int v205 = (void **)v199[1];
      if (v205)
      {
        unsigned int v206 = 0;
        do
        {
          ++v206;
          int v205 = (void **)v205[1];
        }
        while (v205);
      }
      else
      {
        unsigned int v206 = 0;
      }
      BOOL v207 = v204 > v206;
      if (v204 != v206) {
        goto LABEL_259;
      }
      if ((*((unsigned char *)v198 + 23) & 0x10) != 0)
      {
        uint64_t v208 = **(void **)*v198;
        uint64_t v209 = *(void *)(v208 + 152);
        uint64_t v210 = *(unsigned int *)(v208 + 168);
        if (v210)
        {
          LODWORD(v211) = (v210 - 1) & ((v198 >> 4) ^ (v198 >> 9));
          uint64_t v212 = (uint64_t **)(v209 + 16 * v211);
          uint64_t v213 = *v212;
          if (*v212 != v198)
          {
            int v214 = 1;
            do
            {
              if (v213 == (uint64_t *)-4096) {
                goto LABEL_240;
              }
              int v215 = v211 + v214++;
              uint64_t v211 = v215 & (v210 - 1);
              uint64_t v213 = *(uint64_t **)(v209 + 16 * v211);
            }
            while (v213 != v198);
            uint64_t v212 = (uint64_t **)(v209 + 16 * v211);
          }
        }
        else
        {
LABEL_240:
          uint64_t v212 = (uint64_t **)(v209 + 16 * v210);
        }
        int v216 = v212[1];
        size_t v219 = *v216;
        int v217 = (char *)(v216 + 2);
        size_t v218 = v219;
        goto LABEL_242;
      }
      size_t v218 = 0;
      int v217 = &byte_1CFBCE98E;
LABEL_242:
      if ((*((unsigned char *)v199 + 23) & 0x10) != 0)
      {
        uint64_t v220 = **(void **)*v199;
        uint64_t v221 = *(void *)(v220 + 152);
        uint64_t v222 = *(unsigned int *)(v220 + 168);
        if (v222)
        {
          LODWORD(v223) = (v222 - 1) & ((v199 >> 4) ^ (v199 >> 9));
          int v224 = (uint64_t **)(v221 + 16 * v223);
          size_t v225 = *v224;
          if (*v224 != v199)
          {
            int v226 = 1;
            do
            {
              if (v225 == (uint64_t *)-4096) {
                goto LABEL_249;
              }
              int v227 = v223 + v226++;
              uint64_t v223 = v227 & (v222 - 1);
              size_t v225 = *(uint64_t **)(v221 + 16 * v223);
            }
            while (v225 != v199);
            int v224 = (uint64_t **)(v221 + 16 * v223);
          }
        }
        else
        {
LABEL_249:
          int v224 = (uint64_t **)(v221 + 16 * v222);
        }
        uint64_t v228 = v224[1];
        size_t v231 = *v228;
        uint64_t v229 = (char *)(v228 + 2);
        size_t v230 = v231;
        goto LABEL_251;
      }
      size_t v230 = 0;
      uint64_t v229 = &byte_1CFBCE98E;
LABEL_251:
      if (v230 >= v218) {
        size_t v232 = v218;
      }
      else {
        size_t v232 = v230;
      }
      if (v232 && (int v233 = memcmp(v217, v229, v232)) != 0)
      {
        if (v233 < 0) {
          return 1;
        }
      }
      else
      {
        BOOL v207 = v218 > v230;
LABEL_259:
        if (!v207) {
          return 1;
        }
      }
LABEL_261:
      int v234 = a1[1];
      int v235 = a1[2];
      BOOL v236 = *a1;
      a1[1] = v235;
      a1[2] = v234;
      uint64_t v237 = *a3;
      unsigned int v238 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v235, a3[1]);
      unsigned int v239 = sub_1CC806CF0(*(void *)(v237 + 6936), *(_DWORD *)(v237 + 6952), v236, a3[1]);
      if (v238 != v239)
      {
        if (v238 >= v239) {
          return 1;
        }
        goto LABEL_277;
      }
      int v240 = (void **)v235[1];
      if (v240)
      {
        unsigned int v241 = 0;
        do
        {
          ++v241;
          int v240 = (void **)v240[1];
        }
        while (v240);
      }
      else
      {
        unsigned int v241 = 0;
      }
      uint64_t v242 = v236[1];
      if (v242)
      {
        unsigned int v243 = 0;
        do
        {
          ++v243;
          uint64_t v242 = *(void *)(v242 + 8);
        }
        while (v242);
      }
      else
      {
        unsigned int v243 = 0;
      }
      BOOL v244 = v241 > v243;
      if (v241 != v243) {
        goto LABEL_304;
      }
      if ((*((unsigned char *)v235 + 23) & 0x10) == 0)
      {
        size_t v255 = 0;
        uint64_t v254 = &byte_1CFBCE98E;
LABEL_287:
        if ((*((unsigned char *)v236 + 23) & 0x10) == 0)
        {
          size_t v267 = 0;
          BOOL v266 = &byte_1CFBCE98E;
LABEL_296:
          if (v267 >= v255) {
            size_t v269 = v255;
          }
          else {
            size_t v269 = v267;
          }
          if (v269 && (int v270 = memcmp(v254, v266, v269)) != 0)
          {
            if (v270 < 0) {
              return 1;
            }
          }
          else
          {
            BOOL v244 = v255 > v267;
LABEL_304:
            if (!v244) {
              return 1;
            }
          }
LABEL_277:
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
          return 1;
        }
        uint64_t v257 = **(void **)*v236;
        uint64_t v258 = *(void *)(v257 + 152);
        uint64_t v259 = *(unsigned int *)(v257 + 168);
        if (v259)
        {
          LODWORD(v260) = (v259 - 1) & ((v236 >> 4) ^ (v236 >> 9));
          unsigned int v261 = (uint64_t **)(v258 + 16 * v260);
          uint64_t v262 = *v261;
          if (*v261 == v236)
          {
LABEL_295:
            unsigned int v265 = v261[1];
            size_t v268 = *v265;
            BOOL v266 = (char *)(v265 + 2);
            size_t v267 = v268;
            goto LABEL_296;
          }
          int v263 = 1;
          while (v262 != (uint64_t *)-4096)
          {
            int v264 = v260 + v263++;
            uint64_t v260 = v264 & (v259 - 1);
            uint64_t v262 = *(uint64_t **)(v258 + 16 * v260);
            if (v262 == v236)
            {
              unsigned int v261 = (uint64_t **)(v258 + 16 * v260);
              goto LABEL_295;
            }
          }
        }
        unsigned int v261 = (uint64_t **)(v258 + 16 * v259);
        goto LABEL_295;
      }
      uint64_t v245 = **(void **)*v235;
      uint64_t v246 = *(void *)(v245 + 152);
      uint64_t v247 = *(unsigned int *)(v245 + 168);
      if (!v247) {
        goto LABEL_285;
      }
      LODWORD(v248) = (v247 - 1) & ((v235 >> 4) ^ (v235 >> 9));
      BOOL v249 = (uint64_t **)(v246 + 16 * v248);
      uint64_t v250 = *v249;
      if (*v249 != v235)
      {
        int v251 = 1;
        while (v250 != (uint64_t *)-4096)
        {
          int v252 = v248 + v251++;
          uint64_t v248 = v252 & (v247 - 1);
          uint64_t v250 = *(uint64_t **)(v246 + 16 * v248);
          if (v250 == v235)
          {
            BOOL v249 = (uint64_t **)(v246 + 16 * v248);
            goto LABEL_286;
          }
        }
LABEL_285:
        BOOL v249 = (uint64_t **)(v246 + 16 * v247);
      }
LABEL_286:
      uint64_t v253 = v249[1];
      size_t v256 = *v253;
      uint64_t v254 = (char *)(v253 + 2);
      size_t v255 = v256;
      goto LABEL_287;
    default:
      int v25 = a1 + 2;
      sub_1CC805508(a1, a1 + 1, a1 + 2, a3);
      BOOL v26 = a1 + 3;
      if (a1 + 3 == v4) {
        return 1;
      }
      int v27 = 0;
      BOOL v271 = v4;
      while (2)
      {
        uint64_t v28 = *v26;
        unsigned int v29 = *v25;
        uint64_t v30 = *a3;
        unsigned int v31 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v26, a3[1]);
        unsigned int v32 = sub_1CC806CF0(*(void *)(v30 + 6936), *(_DWORD *)(v30 + 6952), v29, a3[1]);
        if (v31 != v32)
        {
          if (v31 >= v32) {
            goto LABEL_108;
          }
          goto LABEL_59;
        }
        uint64_t v33 = v28[1];
        if (v33)
        {
          unsigned int v34 = 0;
          do
          {
            ++v34;
            uint64_t v33 = *(void *)(v33 + 8);
          }
          while (v33);
        }
        else
        {
          unsigned int v34 = 0;
        }
        BOOL v35 = (void **)v29[1];
        if (v35)
        {
          unsigned int v36 = 0;
          do
          {
            ++v36;
            BOOL v35 = (void **)v35[1];
          }
          while (v35);
        }
        else
        {
          unsigned int v36 = 0;
        }
        BOOL v37 = v34 > v36;
        if (v34 != v36) {
          goto LABEL_57;
        }
        if ((*((unsigned char *)v28 + 23) & 0x10) != 0)
        {
          uint64_t v38 = **(void **)*v28;
          uint64_t v39 = *(void *)(v38 + 152);
          uint64_t v40 = *(unsigned int *)(v38 + 168);
          if (v40)
          {
            LODWORD(v41) = (v40 - 1) & ((v28 >> 4) ^ (v28 >> 9));
            int v42 = (uint64_t **)(v39 + 16 * v41);
            int v43 = *v42;
            if (*v42 != v28)
            {
              int v44 = 1;
              do
              {
                if (v43 == (uint64_t *)-4096) {
                  goto LABEL_38;
                }
                int v45 = v41 + v44++;
                uint64_t v41 = v45 & (v40 - 1);
                int v43 = *(uint64_t **)(v39 + 16 * v41);
              }
              while (v43 != v28);
              int v42 = (uint64_t **)(v39 + 16 * v41);
            }
          }
          else
          {
LABEL_38:
            int v42 = (uint64_t **)(v39 + 16 * v40);
          }
          size_t v46 = v42[1];
          size_t v49 = *v46;
          size_t v47 = (char *)(v46 + 2);
          size_t v48 = v49;
          goto LABEL_40;
        }
        size_t v48 = 0;
        size_t v47 = &byte_1CFBCE98E;
LABEL_40:
        if ((*((unsigned char *)v29 + 23) & 0x10) != 0)
        {
          uint64_t v50 = **(void **)*v29;
          uint64_t v51 = *(void *)(v50 + 152);
          uint64_t v52 = *(unsigned int *)(v50 + 168);
          if (v52)
          {
            LODWORD(v53) = (v52 - 1) & ((v29 >> 4) ^ (v29 >> 9));
            int v54 = (uint64_t **)(v51 + 16 * v53);
            int v55 = *v54;
            if (*v54 != v29)
            {
              int v56 = 1;
              do
              {
                if (v55 == (uint64_t *)-4096) {
                  goto LABEL_47;
                }
                int v57 = v53 + v56++;
                uint64_t v53 = v57 & (v52 - 1);
                int v55 = *(uint64_t **)(v51 + 16 * v53);
              }
              while (v55 != v29);
              int v54 = (uint64_t **)(v51 + 16 * v53);
            }
          }
          else
          {
LABEL_47:
            int v54 = (uint64_t **)(v51 + 16 * v52);
          }
          size_t v58 = v54[1];
          size_t v61 = *v58;
          size_t v59 = (char *)(v58 + 2);
          size_t v60 = v61;
          goto LABEL_49;
        }
        size_t v60 = 0;
        size_t v59 = &byte_1CFBCE98E;
LABEL_49:
        if (v60 >= v48) {
          size_t v62 = v48;
        }
        else {
          size_t v62 = v60;
        }
        if (v62 && (int v63 = memcmp(v47, v59, v62)) != 0)
        {
          if (v63 < 0) {
            goto LABEL_108;
          }
        }
        else
        {
          BOOL v37 = v48 > v60;
LABEL_57:
          if (!v37) {
            goto LABEL_108;
          }
        }
LABEL_59:
        uint64_t v64 = *v26;
        uint64_t *v26 = *v25;
        unsigned int v65 = a1;
        if (v25 == a1) {
          goto LABEL_107;
        }
        uint64_t v66 = v25;
        while (2)
        {
          uint64_t v68 = *--v66;
          unsigned int v67 = v68;
          uint64_t v69 = *a3;
          unsigned int v70 = sub_1CC806CF0(*(void *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v64, a3[1]);
          unsigned int v71 = sub_1CC806CF0(*(void *)(v69 + 6936), *(_DWORD *)(v69 + 6952), v68, a3[1]);
          if (v70 != v71)
          {
            if (v70 >= v71) {
              break;
            }
            goto LABEL_101;
          }
          uint64_t v72 = v64[1];
          if (v72)
          {
            unsigned int v73 = 0;
            do
            {
              ++v73;
              uint64_t v72 = *(void *)(v72 + 8);
            }
            while (v72);
          }
          else
          {
            unsigned int v73 = 0;
          }
          uint64_t v74 = v67[1];
          if (v74)
          {
            unsigned int v75 = 0;
            do
            {
              ++v75;
              uint64_t v74 = *(void *)(v74 + 8);
            }
            while (v74);
          }
          else
          {
            unsigned int v75 = 0;
          }
          BOOL v76 = v73 > v75;
          if (v73 != v75) {
            goto LABEL_99;
          }
          if ((*((unsigned char *)v64 + 23) & 0x10) != 0)
          {
            uint64_t v77 = **(void **)*v64;
            uint64_t v78 = *(void *)(v77 + 152);
            uint64_t v79 = *(unsigned int *)(v77 + 168);
            if (v79)
            {
              LODWORD(v80) = (v79 - 1) & ((v64 >> 4) ^ (v64 >> 9));
              size_t v81 = (uint64_t **)(v78 + 16 * v80);
              uint64_t v82 = *v81;
              if (*v81 == v64)
              {
LABEL_81:
                uint64_t v85 = v81[1];
                size_t v88 = *v85;
                uint64_t v86 = (char *)(v85 + 2);
                size_t v87 = v88;
                goto LABEL_82;
              }
              int v83 = 1;
              while (v82 != (uint64_t *)-4096)
              {
                int v84 = v80 + v83++;
                uint64_t v80 = v84 & (v79 - 1);
                uint64_t v82 = *(uint64_t **)(v78 + 16 * v80);
                if (v82 == v64)
                {
                  size_t v81 = (uint64_t **)(v78 + 16 * v80);
                  goto LABEL_81;
                }
              }
            }
            size_t v81 = (uint64_t **)(v78 + 16 * v79);
            goto LABEL_81;
          }
          size_t v87 = 0;
          uint64_t v86 = &byte_1CFBCE98E;
LABEL_82:
          if ((*((unsigned char *)v67 + 23) & 0x10) != 0)
          {
            uint64_t v89 = **(void **)*v67;
            uint64_t v90 = *(void *)(v89 + 152);
            uint64_t v91 = *(unsigned int *)(v89 + 168);
            if (v91)
            {
              LODWORD(v92) = (v91 - 1) & ((v67 >> 4) ^ (v67 >> 9));
              uint64_t v93 = (uint64_t **)(v90 + 16 * v92);
              uint64_t v94 = *v93;
              if (*v93 == v67)
              {
LABEL_90:
                size_t v97 = v93[1];
                size_t v100 = *v97;
                uint64_t v98 = (char *)(v97 + 2);
                size_t v99 = v100;
                goto LABEL_91;
              }
              int v95 = 1;
              while (v94 != (uint64_t *)-4096)
              {
                int v96 = v92 + v95++;
                uint64_t v92 = v96 & (v91 - 1);
                uint64_t v94 = *(uint64_t **)(v90 + 16 * v92);
                if (v94 == v67)
                {
                  uint64_t v93 = (uint64_t **)(v90 + 16 * v92);
                  goto LABEL_90;
                }
              }
            }
            uint64_t v93 = (uint64_t **)(v90 + 16 * v91);
            goto LABEL_90;
          }
          size_t v99 = 0;
          uint64_t v98 = &byte_1CFBCE98E;
LABEL_91:
          if (v99 >= v87) {
            size_t v101 = v87;
          }
          else {
            size_t v101 = v99;
          }
          if (v101)
          {
            int v102 = memcmp(v86, v98, v101);
            if (v102)
            {
              if (v102 < 0) {
                break;
              }
              goto LABEL_101;
            }
          }
          BOOL v76 = v87 > v99;
LABEL_99:
          if (v76)
          {
LABEL_101:
            void *v25 = *(v25 - 1);
            int v25 = v66;
            if (v66 == a1)
            {
              unsigned int v65 = a1;
              goto LABEL_106;
            }
            continue;
          }
          break;
        }
        unsigned int v65 = v25;
LABEL_106:
        uint64_t v4 = v271;
LABEL_107:
        _DWORD *v65 = v64;
        if (++v27 != 8)
        {
LABEL_108:
          int v25 = v26++;
          if (v26 == v4) {
            return 1;
          }
          continue;
        }
        return v26 + 1 == v4;
      }
  }
}

uint64_t sub_1CC806CF0(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t a4)
{
  if (a2)
  {
    LODWORD(v4) = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v5 = a1 + 16 * v4;
    BOOL v6 = *(uint64_t **)v5;
    if (*(uint64_t **)v5 == a3) {
      goto LABEL_8;
    }
    int v7 = 1;
    while (v6 != (uint64_t *)-4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (a2 - 1);
      BOOL v6 = *(uint64_t **)(a1 + 16 * v4);
      if (v6 == a3)
      {
        uint64_t v5 = a1 + 16 * v4;
        goto LABEL_8;
      }
    }
  }
  uint64_t v5 = a1 + 16 * a2;
LABEL_8:
  int v9 = *(_DWORD *)(v5 + 8);
  uint64_t v10 = sub_1CB83544C(a4, *a3);
  if (v11 == 1)
  {
    uint64_t v13 = v10;
    uint64_t v10 = v13;
  }
  return v9 * ((unint64_t)(v10 + 7) >> 3);
}

uint64_t sub_1CC806DAC(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, uint64_t *a5)
{
  sub_1CC805508(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  unsigned int v11 = *a3;
  uint64_t v12 = *a5;
  unsigned int v13 = sub_1CC806CF0(*(void *)(*a5 + 6936), *(_DWORD *)(*a5 + 6952), *a4, a5[1]);
  uint64_t result = sub_1CC806CF0(*(void *)(v12 + 6936), *(_DWORD *)(v12 + 6952), v11, a5[1]);
  if (v13 != result)
  {
    if (v13 >= result) {
      return result;
    }
    goto LABEL_41;
  }
  uint64_t v15 = v10[1];
  if (v15)
  {
    unsigned int v16 = 0;
    do
    {
      ++v16;
      uint64_t v15 = *(void *)(v15 + 8);
    }
    while (v15);
  }
  else
  {
    unsigned int v16 = 0;
  }
  uint64_t v17 = v11[1];
  if (v17)
  {
    unsigned int v18 = 0;
    do
    {
      ++v18;
      uint64_t v17 = *(void *)(v17 + 8);
    }
    while (v17);
  }
  else
  {
    unsigned int v18 = 0;
  }
  BOOL v19 = v16 > v18;
  if (v16 != v18) {
    goto LABEL_39;
  }
  if ((*((unsigned char *)v10 + 23) & 0x10) != 0)
  {
    uint64_t v20 = **(void **)*v10;
    uint64_t v21 = *(void *)(v20 + 152);
    uint64_t v22 = *(unsigned int *)(v20 + 168);
    if (v22)
    {
      LODWORD(v23) = (v22 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      int v24 = (uint64_t **)(v21 + 16 * v23);
      int v25 = *v24;
      if (*v24 == v10)
      {
LABEL_21:
        uint64_t v28 = (size_t *)v24[1];
        size_t v30 = *v28;
        uint64_t result = (uint64_t)(v28 + 2);
        size_t v29 = v30;
        goto LABEL_22;
      }
      int v26 = 1;
      while (v25 != (uint64_t *)-4096)
      {
        int v27 = v23 + v26++;
        uint64_t v23 = v27 & (v22 - 1);
        int v25 = *(uint64_t **)(v21 + 16 * v23);
        if (v25 == v10)
        {
          int v24 = (uint64_t **)(v21 + 16 * v23);
          goto LABEL_21;
        }
      }
    }
    int v24 = (uint64_t **)(v21 + 16 * v22);
    goto LABEL_21;
  }
  size_t v29 = 0;
  uint64_t result = (uint64_t)&byte_1CFBCE98E;
LABEL_22:
  if ((*((unsigned char *)v11 + 23) & 0x10) == 0)
  {
    size_t v41 = 0;
    uint64_t v40 = &byte_1CFBCE98E;
    goto LABEL_31;
  }
  uint64_t v31 = **(void **)*v11;
  uint64_t v32 = *(void *)(v31 + 152);
  uint64_t v33 = *(unsigned int *)(v31 + 168);
  if (!v33) {
    goto LABEL_29;
  }
  LODWORD(v34) = (v33 - 1) & ((v11 >> 4) ^ (v11 >> 9));
  BOOL v35 = (uint64_t **)(v32 + 16 * v34);
  unsigned int v36 = *v35;
  if (*v35 != v11)
  {
    int v37 = 1;
    while (v36 != (uint64_t *)-4096)
    {
      int v38 = v34 + v37++;
      uint64_t v34 = v38 & (v33 - 1);
      unsigned int v36 = *(uint64_t **)(v32 + 16 * v34);
      if (v36 == v11)
      {
        BOOL v35 = (uint64_t **)(v32 + 16 * v34);
        goto LABEL_30;
      }
    }
LABEL_29:
    BOOL v35 = (uint64_t **)(v32 + 16 * v33);
  }
LABEL_30:
  uint64_t v39 = v35[1];
  size_t v42 = *v39;
  uint64_t v40 = (char *)(v39 + 2);
  size_t v41 = v42;
LABEL_31:
  if (v41 >= v29) {
    size_t v43 = v29;
  }
  else {
    size_t v43 = v41;
  }
  if (v43)
  {
    uint64_t result = memcmp((const void *)result, v40, v43);
    if (result)
    {
      if ((result & 0x80000000) != 0) {
        return result;
      }
      goto LABEL_41;
    }
  }
  BOOL v19 = v29 > v41;
LABEL_39:
  if (!v19) {
    return result;
  }
LABEL_41:
  int v44 = *a3;
  *a3 = *a4;
  *a4 = v44;
  int v45 = *a3;
  size_t v46 = *a2;
  uint64_t v47 = *a5;
  unsigned int v48 = sub_1CC806CF0(*(void *)(*a5 + 6936), *(_DWORD *)(*a5 + 6952), *a3, a5[1]);
  uint64_t result = sub_1CC806CF0(*(void *)(v47 + 6936), *(_DWORD *)(v47 + 6952), v46, a5[1]);
  if (v48 != result)
  {
    if (v48 >= result) {
      return result;
    }
    goto LABEL_81;
  }
  uint64_t v49 = v45[1];
  if (v49)
  {
    unsigned int v50 = 0;
    do
    {
      ++v50;
      uint64_t v49 = *(void *)(v49 + 8);
    }
    while (v49);
  }
  else
  {
    unsigned int v50 = 0;
  }
  uint64_t v51 = v46[1];
  if (v51)
  {
    unsigned int v52 = 0;
    do
    {
      ++v52;
      uint64_t v51 = *(void *)(v51 + 8);
    }
    while (v51);
  }
  else
  {
    unsigned int v52 = 0;
  }
  BOOL v53 = v50 > v52;
  if (v50 != v52) {
    goto LABEL_79;
  }
  if ((*((unsigned char *)v45 + 23) & 0x10) != 0)
  {
    uint64_t v54 = **(void **)*v45;
    uint64_t v55 = *(void *)(v54 + 152);
    uint64_t v56 = *(unsigned int *)(v54 + 168);
    if (v56)
    {
      LODWORD(v57) = (v56 - 1) & ((v45 >> 4) ^ (v45 >> 9));
      size_t v58 = (uint64_t **)(v55 + 16 * v57);
      size_t v59 = *v58;
      if (*v58 == v45)
      {
LABEL_61:
        size_t v62 = (size_t *)v58[1];
        size_t v64 = *v62;
        uint64_t result = (uint64_t)(v62 + 2);
        size_t v63 = v64;
        goto LABEL_62;
      }
      int v60 = 1;
      while (v59 != (uint64_t *)-4096)
      {
        int v61 = v57 + v60++;
        uint64_t v57 = v61 & (v56 - 1);
        size_t v59 = *(uint64_t **)(v55 + 16 * v57);
        if (v59 == v45)
        {
          size_t v58 = (uint64_t **)(v55 + 16 * v57);
          goto LABEL_61;
        }
      }
    }
    size_t v58 = (uint64_t **)(v55 + 16 * v56);
    goto LABEL_61;
  }
  size_t v63 = 0;
  uint64_t result = (uint64_t)&byte_1CFBCE98E;
LABEL_62:
  if ((*((unsigned char *)v46 + 23) & 0x10) == 0)
  {
    size_t v75 = 0;
    uint64_t v74 = &byte_1CFBCE98E;
    goto LABEL_71;
  }
  uint64_t v65 = **(void **)*v46;
  uint64_t v66 = *(void *)(v65 + 152);
  uint64_t v67 = *(unsigned int *)(v65 + 168);
  if (!v67) {
    goto LABEL_69;
  }
  LODWORD(v68) = (v67 - 1) & ((v46 >> 4) ^ (v46 >> 9));
  uint64_t v69 = (uint64_t **)(v66 + 16 * v68);
  unsigned int v70 = *v69;
  if (*v69 != v46)
  {
    int v71 = 1;
    while (v70 != (uint64_t *)-4096)
    {
      int v72 = v68 + v71++;
      uint64_t v68 = v72 & (v67 - 1);
      unsigned int v70 = *(uint64_t **)(v66 + 16 * v68);
      if (v70 == v46)
      {
        uint64_t v69 = (uint64_t **)(v66 + 16 * v68);
        goto LABEL_70;
      }
    }
LABEL_69:
    uint64_t v69 = (uint64_t **)(v66 + 16 * v67);
  }
LABEL_70:
  unsigned int v73 = v69[1];
  size_t v76 = *v73;
  uint64_t v74 = (char *)(v73 + 2);
  size_t v75 = v76;
LABEL_71:
  if (v75 >= v63) {
    size_t v77 = v63;
  }
  else {
    size_t v77 = v75;
  }
  if (v77)
  {
    uint64_t result = memcmp((const void *)result, v74, v77);
    if (result)
    {
      if ((result & 0x80000000) != 0) {
        return result;
      }
      goto LABEL_81;
    }
  }
  BOOL v53 = v63 > v75;
LABEL_79:
  if (!v53) {
    return result;
  }
LABEL_81:
  uint64_t v78 = *a2;
  *a2 = *a3;
  *a3 = v78;
  uint64_t v79 = *a2;
  uint64_t v80 = *a1;
  uint64_t v81 = *a5;
  unsigned int v82 = sub_1CC806CF0(*(void *)(*a5 + 6936), *(_DWORD *)(*a5 + 6952), *a2, a5[1]);
  uint64_t result = sub_1CC806CF0(*(void *)(v81 + 6936), *(_DWORD *)(v81 + 6952), v80, a5[1]);
  if (v82 != result)
  {
    if (v82 >= result) {
      return result;
    }
    goto LABEL_97;
  }
  uint64_t v83 = v79[1];
  if (v83)
  {
    unsigned int v84 = 0;
    do
    {
      ++v84;
      uint64_t v83 = *(void *)(v83 + 8);
    }
    while (v83);
  }
  else
  {
    unsigned int v84 = 0;
  }
  uint64_t v85 = v80[1];
  if (v85)
  {
    unsigned int v86 = 0;
    do
    {
      ++v86;
      uint64_t v85 = *(void *)(v85 + 8);
    }
    while (v85);
  }
  else
  {
    unsigned int v86 = 0;
  }
  BOOL v87 = v84 > v86;
  if (v84 != v86) {
    goto LABEL_120;
  }
  if ((*((unsigned char *)v79 + 23) & 0x10) != 0)
  {
    uint64_t v88 = **(void **)*v79;
    uint64_t v89 = *(void *)(v88 + 152);
    uint64_t v90 = *(unsigned int *)(v88 + 168);
    if (v90)
    {
      LODWORD(v91) = (v90 - 1) & ((v79 >> 4) ^ (v79 >> 9));
      uint64_t v92 = (uint64_t **)(v89 + 16 * v91);
      uint64_t v93 = *v92;
      if (*v92 == v79)
      {
LABEL_102:
        size_t v97 = (size_t *)v92[1];
        size_t v99 = *v97;
        uint64_t result = (uint64_t)(v97 + 2);
        size_t v98 = v99;
        goto LABEL_103;
      }
      int v94 = 1;
      while (v93 != (uint64_t *)-4096)
      {
        int v95 = v91 + v94++;
        uint64_t v91 = v95 & (v90 - 1);
        uint64_t v93 = *(uint64_t **)(v89 + 16 * v91);
        if (v93 == v79)
        {
          uint64_t v92 = (uint64_t **)(v89 + 16 * v91);
          goto LABEL_102;
        }
      }
    }
    uint64_t v92 = (uint64_t **)(v89 + 16 * v90);
    goto LABEL_102;
  }
  size_t v98 = 0;
  uint64_t result = (uint64_t)&byte_1CFBCE98E;
LABEL_103:
  if ((*((unsigned char *)v80 + 23) & 0x10) == 0)
  {
    size_t v110 = 0;
    unsigned int v109 = &byte_1CFBCE98E;
    goto LABEL_112;
  }
  uint64_t v100 = **(void **)*v80;
  uint64_t v101 = *(void *)(v100 + 152);
  uint64_t v102 = *(unsigned int *)(v100 + 168);
  if (!v102) {
    goto LABEL_110;
  }
  LODWORD(v103) = (v102 - 1) & ((v80 >> 4) ^ (v80 >> 9));
  size_t v104 = (uint64_t **)(v101 + 16 * v103);
  size_t v105 = *v104;
  if (*v104 != v80)
  {
    int v106 = 1;
    while (v105 != (uint64_t *)-4096)
    {
      int v107 = v103 + v106++;
      uint64_t v103 = v107 & (v102 - 1);
      size_t v105 = *(uint64_t **)(v101 + 16 * v103);
      if (v105 == v80)
      {
        size_t v104 = (uint64_t **)(v101 + 16 * v103);
        goto LABEL_111;
      }
    }
LABEL_110:
    size_t v104 = (uint64_t **)(v101 + 16 * v102);
  }
LABEL_111:
  unsigned int v108 = v104[1];
  size_t v111 = *v108;
  unsigned int v109 = (char *)(v108 + 2);
  size_t v110 = v111;
LABEL_112:
  if (v110 >= v98) {
    size_t v112 = v98;
  }
  else {
    size_t v112 = v110;
  }
  if (v112)
  {
    uint64_t result = memcmp((const void *)result, v109, v112);
    if (result)
    {
      if ((result & 0x80000000) != 0) {
        return result;
      }
LABEL_97:
      int v96 = *a1;
      *a1 = *a2;
      *a2 = v96;
      return result;
    }
  }
  BOOL v87 = v98 > v110;
LABEL_120:
  if (v87) {
    goto LABEL_97;
  }
  return result;
}

char *sub_1CC80738C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v4 >= v3)
  {
    unint64_t v7 = v4 + 1;
    BOOL v9 = *(void *)a1 <= a2 && *(void *)a1 + 216 * (unint64_t)v4 > a2;
    if (v9) {
      unint64_t v10 = 0x84BDA12F684BDA13 * ((uint64_t)(a2 - *(void *)a1) >> 3);
    }
    else {
      unint64_t v10 = -1;
    }
    if (v4 == -1) {
      sub_1CD0A88F0(v7);
    }
    if (v3 == -1) {
      sub_1CD0A89A8(0xFFFFFFFFuLL);
    }
    unint64_t v11 = (2 * v3) | 1;
    if (v11 <= v7) {
      unint64_t v11 = v4 + 1;
    }
    if (v11 >= 0xFFFFFFFF) {
      uint64_t v12 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v11;
    }
    unsigned int v13 = (char *)malloc_type_malloc(216 * v12, 0x4065EBACuLL);
    if (!v13) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    uint64_t v14 = v13;
    sub_1CC7FCE14((uint64_t *)a1, (uint64_t)v13);
    if (*(void *)a1 != a1 + 16) {
      free(*(void **)a1);
    }
    *(void *)a1 = v14;
    *(_DWORD *)(a1 + 12) = v12;
    if (v9) {
      return &v14[216 * v10];
    }
  }
  return (char *)v2;
}

llvm::Instruction *sub_1CC8074B4(uint64_t a1)
{
  v74[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(llvm::Instruction **)(a1 + 304);
  if (v1) {
    return v1;
  }
  uint64_t v3 = *(uint64_t ***)(*(void *)a1 + 40);
  uint64_t v4 = *v3;
  llvm::Intrinsic::getType(*v3, 2587, 0, 0);
  Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v3, 2587, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)v3, "llvm.agx2.simd.group", (const char *)0x14, Type, 0);
  uint64_t v7 = v6;
  uint64_t v8 = 0;
  uint64_t v9 = *(void *)(*(void *)a1 + 80);
  if (v9) {
    uint64_t v10 = v9 - 24;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(v10 + 48);
  if (v11) {
    uint64_t v12 = (uint64_t **)(v11 - 24);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = **v12;
  size_t v59 = v61;
  uint64_t v60 = 0x200000000;
  uint64_t v64 = v13;
  uint64_t v65 = &v73;
  uint64_t v66 = v74;
  uint64_t v67 = 0;
  int v68 = 0;
  __int16 v69 = 512;
  char v70 = 7;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  unsigned int v73 = &unk_1F2616E88;
  v74[0] = &unk_1F2617008;
  size_t v62 = v12[5];
  size_t v63 = v12 + 3;
  uint64_t v14 = (unsigned __int8 *)v12[6];
  v54[0] = v14;
  if (v14)
  {
    llvm::MetadataTracking::track((uint64_t)v54, v14, 2);
    uint64_t v8 = v54[0];
  }
  sub_1CB8461A4((uint64_t)&v59, 0, v8);
  if (v54[0])
  {
    int v48 = *(unsigned __int8 *)v54[0];
    if ((v48 - 4) > 0x1E)
    {
      if ((v48 - 3) >= 0xFFFFFFFE) {
        uint64_t v51 = v54[0];
      }
      else {
        uint64_t v51 = 0;
      }
      if ((v48 - 3) < 0xFFFFFFFE)
      {
        if (v48 == 3) {
          *(void *)(v54[0] + 8) = 0;
        }
        goto LABEL_11;
      }
      unint64_t v50 = v51 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v54[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v54[0] + 12)) {
        goto LABEL_11;
      }
      uint64_t v49 = *(void *)(v54[0] + 16);
      if ((v49 & 4) == 0) {
        goto LABEL_11;
      }
      unint64_t v50 = v49 & 0xFFFFFFFFFFFFFFF8;
      if (!v50) {
        goto LABEL_11;
      }
    }
    uint64_t v56 = (const char *)v54;
    sub_1CC5FA668(v50 + 16, &v56);
  }
LABEL_11:
  if (v7) {
    uint64_t v15 = *(uint64_t ***)(v7 + 24);
  }
  else {
    uint64_t v15 = 0;
  }
  __int16 v58 = 257;
  uint64_t v17 = sub_1CB845BAC((uint64_t *)&v59, v15, (uint64_t **)v7, 0, 0, (uint64_t)&v56, 0);
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v19 = *(unsigned int *)(a1 + 28);
  if (v18 != *(void *)(a1 + 8))
  {
    unsigned int v23 = *(_DWORD *)(a1 + 24);
    goto LABEL_25;
  }
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 8 * v19;
    uint64_t v22 = *(uint64_t **)(a1 + 16);
    while (*v22 != v17)
    {
      if (*v22 == -2) {
        uint64_t v20 = v22;
      }
      ++v22;
      v21 -= 8;
      if (!v21)
      {
        if (!v20) {
          goto LABEL_22;
        }
        *uint64_t v20 = v17;
        --*(_DWORD *)(a1 + 32);
        goto LABEL_46;
      }
    }
    goto LABEL_46;
  }
LABEL_22:
  unsigned int v23 = *(_DWORD *)(a1 + 24);
  if (v19 >= v23)
  {
LABEL_25:
    if (3 * v23 <= 4 * ((int)v19 - *(_DWORD *)(a1 + 32)))
    {
      if (v23 >= 0x40) {
        v23 *= 2;
      }
      else {
        unsigned int v23 = 128;
      }
    }
    else if (v23 - v19 >= v23 >> 3)
    {
      goto LABEL_27;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 8), v23);
    unsigned int v23 = *(_DWORD *)(a1 + 24);
    uint64_t v18 = *(void *)(a1 + 16);
LABEL_27:
    unsigned int v24 = v23 - 1;
    unsigned int v25 = (v23 - 1) & ((v17 >> 4) ^ (v17 >> 9));
    int v26 = (uint64_t *)(v18 + 8 * v25);
    uint64_t v27 = *v26;
    if (*v26 == -1)
    {
      uint64_t v28 = 0;
LABEL_39:
      if (v28) {
        uint64_t v32 = v28;
      }
      else {
        uint64_t v32 = v26;
      }
      if (*v32 != v17)
      {
        if (*v32 == -2) {
          --*(_DWORD *)(a1 + 32);
        }
        else {
          ++*(_DWORD *)(a1 + 28);
        }
        *uint64_t v32 = v17;
      }
    }
    else
    {
      uint64_t v28 = 0;
      int v29 = 1;
      while (v27 != v17)
      {
        if (v28) {
          BOOL v30 = 0;
        }
        else {
          BOOL v30 = v27 == -2;
        }
        if (v30) {
          uint64_t v28 = v26;
        }
        unsigned int v31 = v25 + v29++;
        unsigned int v25 = v31 & v24;
        int v26 = (uint64_t *)(v18 + 8 * (v31 & v24));
        uint64_t v27 = *v26;
        if (*v26 == -1) {
          goto LABEL_39;
        }
      }
    }
    goto LABEL_46;
  }
  *(_DWORD *)(a1 + 28) = v19 + 1;
  *(void *)(v18 + 8 * v19) = v17;
LABEL_46:
  uint64_t v33 = *(llvm::ConstantInt **)(*v4 + 1960);
  unsigned int v34 = *(_DWORD *)(*v4 + 1968);
  unsigned int v57 = v34 >> 8;
  if (v34 >> 8 > 0x40) {
    operator new[]();
  }
  unint64_t v35 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v34) + 63);
  if (v34 <= 0xFF) {
    LOBYTE(v35) = 0;
  }
  uint64_t v56 = (const char *)(v35 & 0xE9);
  unsigned int v36 = llvm::ConstantInt::get(v33, (llvm::LLVMContext *)&v56, v16);
  if (v57 >= 0x41 && v56) {
    MEMORY[0x1D25D9CB0](v56, 0x1000C8000313F17);
  }
  uint64_t v56 = "base_x_lanes";
  __int16 v58 = 259;
  uint64_t v1 = sub_1CC09A1EC((uint64_t)&v59, v17, (uint64_t)v36, (uint64_t)&v56, 0, 0);
  *(void *)(a1 + 312) = v1;
  uint64_t v38 = *(unsigned int *)(a1 + 296);
  if (v38)
  {
    uint64_t v39 = *(llvm::ConstantInt **)(*v4 + 1960);
    unsigned int v40 = *(_DWORD *)(*v4 + 1968);
    unsigned int v57 = v40 >> 8;
    if (v40 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v41 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v40) + 63);
    if (v40 <= 0xFF) {
      unint64_t v41 = 0;
    }
    uint64_t v56 = (const char *)(v41 & v38);
    size_t v42 = llvm::ConstantInt::get(v39, (llvm::LLVMContext *)&v56, v37);
    if (v57 >= 0x41 && v56) {
      MEMORY[0x1D25D9CB0](v56, 0x1000C8000313F17);
    }
    __int16 v58 = 257;
    uint64_t v1 = sub_1CB844A3C((uint64_t)&v59, v1, (uint64_t)v42, (uint64_t)&v56, 0, 0);
  }
  unint64_t v43 = llvm::PointerType::get((llvm::PointerType *)(*v4 + 1912), (llvm::Type *)3);
  v54[0] = "base_i8_ptr";
  __int16 v55 = 259;
  if (*(void *)v1 != v43)
  {
    if (*((unsigned __int8 *)v1 + 16) <= 0x14u)
    {
      uint64_t v46 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, unint64_t))*v65 + 28))(v65, 48, v1, v43);
      uint64_t v1 = (llvm::Instruction *)v46;
      if (v46)
      {
        if (*(unsigned __int8 *)(v46 + 16) >= 0x1Cu)
        {
          (*(void (**)(void *, uint64_t, void *, uint64_t *, uint64_t **))(*v66 + 16))(v66, v46, v54, v62, v63);
          if (v60)
          {
            unsigned int v52 = (llvm::MDNode **)v59;
            BOOL v53 = (llvm::MDNode **)((char *)v59 + 16 * v60);
            do
            {
              llvm::Instruction::setMetadata(v1, *(_DWORD *)v52, v52[1]);
              v52 += 2;
            }
            while (v52 != v53);
          }
        }
      }
    }
    else
    {
      __int16 v58 = 257;
      uint64_t v1 = llvm::CastInst::Create(48, (uint64_t)v1, v43, &v56, 0);
      (*(void (**)(void *, llvm::Instruction *, void *, uint64_t *, uint64_t **))(*v66 + 16))(v66, v1, v54, v62, v63);
      if (v60)
      {
        int v44 = (llvm::MDNode **)v59;
        int v45 = (llvm::MDNode **)((char *)v59 + 16 * v60);
        do
        {
          llvm::Instruction::setMetadata(v1, *(_DWORD *)v44, v44[1]);
          v44 += 2;
        }
        while (v44 != v45);
      }
    }
  }
  *(void *)(a1 + 304) = v1;
  if (v59 != v61)
  {
    free(v59);
    return *(llvm::Instruction **)(a1 + 304);
  }
  return v1;
}

uint64_t sub_1CC807C30(uint64_t a1, llvm::Instruction *a2, uint64_t a3, int a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v5 = *((void *)a2 + 5);
    if ((*(unsigned char *)(v5 + 23) & 0x10) != 0)
    {
      uint64_t v6 = ***(void ***)v5;
      uint64_t v7 = *(void *)(v6 + 152);
      uint64_t v8 = *(unsigned int *)(v6 + 168);
      if (v8)
      {
        LODWORD(v9) = (v8 - 1) & ((v5 >> 4) ^ (v5 >> 9));
        uint64_t v10 = (uint64_t *)(v7 + 16 * v9);
        uint64_t v11 = *v10;
        if (*v10 != v5)
        {
          int v12 = 1;
          do
          {
            if (v11 == -4096) {
              goto LABEL_10;
            }
            int v13 = v9 + v12++;
            uint64_t v9 = v13 & (v8 - 1);
            uint64_t v11 = *(void *)(v7 + 16 * v9);
          }
          while (v11 != v5);
          uint64_t v10 = (uint64_t *)(v7 + 16 * v9);
        }
      }
      else
      {
LABEL_10:
        uint64_t v10 = (uint64_t *)(v7 + 16 * v8);
      }
      uint64_t v14 = (void *)v10[1];
      uint64_t v17 = (void *)*v14;
      uint64_t v15 = (char *)(v14 + 2);
      unsigned int v16 = v17;
    }
    else
    {
      unsigned int v16 = 0;
      uint64_t v15 = &byte_1CFBCE98E;
    }
    __int16 v49 = 773;
    v48[0] = v15;
    v48[1] = v16;
    v48[2] = "_tail";
    llvm::BasicBlock::splitBasicBlock(v5, (uint64_t)a2 + 24, (uint64_t)v48, 0);
  }
  uint64_t v18 = *(unsigned int *)(a3 + 8);
  if (v18)
  {
    uint64_t v19 = *(llvm::Instruction ***)a3;
    uint64_t v20 = *(void *)a3 + 8 * v18;
    do
    {
      uint64_t v21 = *v19;
      if (*v19 != a2) {
        llvm::Instruction::moveBefore(*v19, a2);
      }
      int v22 = *((_DWORD *)v21 + 5);
      if ((v22 & 0x40000000) != 0) {
        unsigned int v23 = (char *)*((void *)v21 - 1);
      }
      else {
        unsigned int v23 = (char *)v21 - 32 * (v22 & 0x7FFFFFF);
      }
      uint64_t v24 = *((void *)v23 + 4);
      if (v24) {
        BOOL v25 = *(unsigned __int8 *)(v24 + 16) >= 0x1Cu;
      }
      else {
        BOOL v25 = 0;
      }
      if (v25)
      {
        do
        {
          int v26 = (llvm::Instruction *)v24;
          uint64_t v27 = *(void *)(v24 + 8);
          if (!v27 || *(void *)(v27 + 8)) {
            break;
          }
          uint64_t v29 = *(void *)(a1 + 8);
          uint64_t v28 = *(void *)(a1 + 16);
          if (v28 == v29)
          {
            uint64_t v30 = *(unsigned int *)(a1 + 28);
            unsigned int v31 = (llvm::Instruction **)(v28 + 8 * v30);
            if (v30)
            {
              uint64_t v32 = 0;
              uint64_t v33 = 8 * v30;
              while (*(llvm::Instruction **)(v28 + v32) != v26)
              {
                v32 += 8;
                if (v33 == v32) {
                  goto LABEL_46;
                }
              }
              unsigned int v31 = (llvm::Instruction **)(v28 + v32);
            }
LABEL_46:
            uint64_t v29 = *(void *)(a1 + 16);
          }
          else
          {
            uint64_t v34 = *(unsigned int *)(a1 + 24);
            int v35 = v34 - 1;
            unsigned int v36 = (v34 - 1) & ((v26 >> 4) ^ (v26 >> 9));
            unsigned int v31 = (llvm::Instruction **)(v28 + 8 * v36);
            int v37 = *v31;
            if (*v31 == (llvm::Instruction *)-1)
            {
              uint64_t v38 = 0;
LABEL_61:
              if (v38) {
                unsigned int v31 = v38;
              }
              if (*v31 != v26) {
                unsigned int v31 = (llvm::Instruction **)(v28 + 8 * v34);
              }
            }
            else
            {
              uint64_t v38 = 0;
              int v39 = 1;
              while (v37 != v26)
              {
                if (v38) {
                  BOOL v40 = 0;
                }
                else {
                  BOOL v40 = v37 == (llvm::Instruction *)-2;
                }
                if (v40) {
                  uint64_t v38 = v31;
                }
                unsigned int v41 = v36 + v39++;
                unsigned int v36 = v41 & v35;
                unsigned int v31 = (llvm::Instruction **)(v28 + 8 * (v41 & v35));
                int v37 = *v31;
                if (*v31 == (llvm::Instruction *)-1) {
                  goto LABEL_61;
                }
              }
            }
          }
          size_t v42 = (unsigned int *)(v28 == v29 ? a1 + 28 : a1 + 24);
          if (v31 == (llvm::Instruction **)(v28 + 8 * *v42)) {
            break;
          }
          llvm::Instruction::moveBefore(v26, v21);
          int v43 = *((_DWORD *)v26 + 5);
          if ((v43 & 0x7FFFFFF) == 0) {
            break;
          }
          int v44 = (v43 & 0x40000000) != 0
              ? (llvm::Instruction *)*((void *)v26 - 1)
              : (llvm::Instruction *)((char *)v26 - 32 * (v43 & 0x7FFFFFF));
          uint64_t v24 = *(void *)v44;
          BOOL v45 = v24 && *(unsigned __int8 *)(v24 + 16) > 0x1Bu;
          uint64_t v21 = v26;
        }
        while (v45);
      }
      ++v19;
    }
    while (v19 != (llvm::Instruction **)v20);
  }
  return 0;
}

uint64_t sub_1CC808490(uint64_t result, unsigned int a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(result + 20);
  if ((v3 & 0x40000000) != 0) {
    uint64_t v4 = *(void *)(result - 8);
  }
  else {
    uint64_t v4 = result - 32 * (v3 & 0x7FFFFFF);
  }
  uint64_t v5 = v4 + 32 * a2;
  if (*(void *)v5)
  {
    **(void **)(v5 + 16) = *(void *)(v5 + 8);
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6) {
      *(void *)(v6 + 16) = *(void *)(v5 + 16);
    }
  }
  *(void *)uint64_t v5 = a3;
  if (a3)
  {
    uint64_t v9 = *(void *)(a3 + 8);
    uint64_t v7 = (void *)(a3 + 8);
    uint64_t v8 = v9;
    uint64_t v10 = v4 + 32 * a2;
    *(void *)(v10 + 8) = v9;
    if (v9) {
      *(void *)(v8 + 16) = v10 + 8;
    }
    *(void *)(v10 + 16) = v7;
    void *v7 = v5;
  }
  return result;
}

uint64_t sub_1CC808504()
{
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Run the scalar optimization for all shaders, effectively ignoring the metadata and "
                                     "environment variable that normally control that optimization";
  v3.n128_u64[1] = 143;
  char v1 = 0;
  unint64_t v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCDBC00, "force-scalar-opt", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDBC00, &dword_1CB82C000);
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Print the summary of the scalar optimization shaders (print nothing if the optimiza"
                                     "tion doesn't run)";
  v3.n128_u64[1] = 100;
  char v1 = 0;
  unint64_t v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCDBCC0, "scalar-opt-print-summary", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDBCC0, &dword_1CB82C000);
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Print the full liveness information";
  v3.n128_u64[1] = 35;
  char v1 = 0;
  unint64_t v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&algn_1EBCDBD41[63], "scalar-opt-print-liveness", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &algn_1EBCDBD41[63], &dword_1CB82C000);
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Print the reg pressure information";
  v3.n128_u64[1] = 34;
  char v1 = 0;
  unint64_t v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCDBE40, "scalar-opt-print-regpressure", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDBE40, &dword_1CB82C000);
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Print the results of the divergence analysis";
  v3.n128_u64[1] = 44;
  char v1 = 0;
  unint64_t v2 = &v1;
  sub_1CD6423A4(&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCDBF00, &dword_1CB82C000);
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Print statistic about GPR and scalar usages but don't do any transformation";
  v3.n128_u64[1] = 75;
  char v1 = 0;
  unint64_t v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCDBFC0, "scalar-opt-harvest-stats", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDBFC0, &dword_1CB82C000);
}

void sub_1CC808714(uint64_t a1)
{
}

void sub_1CC8087C4()
{
}

void sub_1CC808890(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC8088C8()
{
  return "GPU Loop Merge";
}

void sub_1CC8088D8(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
}

uint64_t sub_1CC80893C(uint64_t a1, llvm::Module **a2)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  int v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::LoopInfoWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::LoopInfoWrapperPass::ID);
  uint64_t v9 = *(uint64_t **)(a1 + 8);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v10 == v11)
  {
LABEL_9:
    uint64_t v12 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v10 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v10 += 16;
      if (v10 == v11) {
        goto LABEL_9;
      }
    }
    uint64_t v12 = *(void *)(v10 + 8);
  }
  uint64_t v49 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::DominatorTreeWrapperPass::ID)
      + 32;
  int v13 = *(uint64_t **)(a1 + 8);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (v14 == v15)
  {
LABEL_14:
    uint64_t v16 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v14 != &llvm::PostDominatorTreeWrapperPass::ID)
    {
      v14 += 16;
      if (v14 == v15) {
        goto LABEL_14;
      }
    }
    uint64_t v16 = *(void *)(v14 + 8);
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v16 + 96))(v16, &llvm::PostDominatorTreeWrapperPass::ID);
  v58[0] = 1;
  for (uint64_t i = 1; i != 65; i += 4)
    v58[i] = -4096;
  uint64_t v19 = v17 + 32;
  sub_1CD10AFA4(a2[5], (uint64_t)v58);
  uint64_t v20 = (llvm::Module *)((char *)a2[5] + 272);
  uint64_t v56 = 0;
  llvm::DivergenceTracker::DivergenceTracker((uint64_t)v57, (llvm::Function *)a2, v49, v19, v20, (uint64_t)v58, (uint64_t)v55, 0, 0);
  if (v56 == v55)
  {
    (*(void (**)(void *))(v55[0] + 32))(v55);
  }
  else if (v56)
  {
    (*(void (**)(void))(*v56 + 40))();
  }
  unsigned int v52 = v54;
  uint64_t v53 = 0x400000000;
  uint64_t v50 = 0x1000000000;
  uint64_t v21 = *(void *)(v8 + 56);
  uint64_t v22 = *(void *)(v8 + 64);
  if (v21 == v22) {
    goto LABEL_74;
  }
  unsigned int v23 = 0;
  do
  {
    if (*(void *)(*(void *)v21 + 8) != *(void *)(*(void *)v21 + 16))
    {
      if (v23 >= HIDWORD(v50)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v51[v23] = *(void *)v21;
      unsigned int v23 = v50 + 1;
      LODWORD(v50) = v50 + 1;
    }
    v21 += 8;
  }
  while (v21 != v22);
  if (!v23) {
    goto LABEL_74;
  }
  LODWORD(v53) = 0;
  do
  {
    while (1)
    {
      uint64_t v24 = (uint64_t *)v51[--v23];
      LODWORD(v50) = v23;
      uint64_t v26 = *v24;
      BOOL v25 = (void *)v24[1];
      uint64_t v27 = (void *)v24[2];
      if (*v24) {
        BOOL v28 = v25 == v27;
      }
      else {
        BOOL v28 = 0;
      }
      if (!v28)
      {
        while (v25 != v27)
        {
          if (v23 >= HIDWORD(v50)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v51[v23] = *v25;
          unsigned int v23 = v50 + 1;
          LODWORD(v50) = v50 + 1;
          ++v25;
        }
        goto LABEL_41;
      }
      if (**(uint64_t ***)(v26 + 8) == v24) {
        break;
      }
LABEL_41:
      if (!v23) {
        goto LABEL_47;
      }
    }
    if (v53 >= (unint64_t)HIDWORD(v53)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v29 = (uint64_t **)((char *)v52 + 16 * v53);
    uint64_t *v29 = v24;
    v29[1] = (uint64_t *)v26;
    LODWORD(v53) = v53 + 1;
    unsigned int v23 = v50;
  }
  while (v50);
LABEL_47:
  if (v53)
  {
    uint64_t v30 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
    uint64_t v59 = 2;
    uint64_t v60 = 0;
    uint64_t v61 = -4096;
    v58[75] = &unk_1F2615EC8;
    uint64_t v62 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0x2000;
    uint64_t v33 = v30 + 16;
    do
    {
      uint64_t v34 = v59;
      uint64_t v35 = v61;
      *(v33 - 1) = v59 & 6;
      *uint64_t v33 = 0;
      v33[1] = v35;
      if (v35 != -4096 && v35 != -8192 && v35 != 0)
      {
        *uint64_t v33 = *(void *)(v34 & 0xFFFFFFFFFFFFFFF8);
        *(void *)(v34 & 0xFFFFFFFFFFFFFFF8) = v33 - 1;
        *(v33 - 1) = v34 & 0xFFFFFFFFFFFFFFFELL;
        if (*v33) {
          *(void *)*uint64_t v33 = *(void *)*v33 & 7 | (unint64_t)(v30 + 16);
        }
        uint64_t v31 = v62;
      }
      *(v33 - 2) = &unk_1F2615EC8;
      v33[2] = v31;
      v33 += 8;
      v30 += 64;
      v32 -= 64;
    }
    while (v32);
    if (v61 != -8192 && v61 != -4096 && v61)
    {
      unint64_t v37 = v59 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v59 & 0xFFFFFFFFFFFFFFF8) = v60;
      if (v60)
      {
        *uint64_t v60 = *v60 & 7 | v37;
      }
      else
      {
        uint64_t v38 = v61;
        int v39 = ***(int32x2_t ****)v61;
        unint64_t v40 = (unint64_t)v39[303];
        if (v40 <= v37)
        {
          uint64_t v41 = v39[305].u32[0];
          if (v40 + 16 * v41 > v37)
          {
            unsigned int v42 = v41 - 1;
            LODWORD(v43) = v42 & ((v61 >> 4) ^ (v61 >> 9));
            int v44 = (uint64_t *)(v40 + 16 * v43);
            uint64_t v45 = *v44;
            if (v61 != *v44)
            {
              int v46 = 1;
              do
              {
                if (v45 == -4096) {
                  goto LABEL_72;
                }
                int v47 = v43 + v46++;
                uint64_t v43 = v47 & v42;
                uint64_t v45 = *(void *)(v40 + 16 * v43);
              }
              while (v61 != v45);
              int v44 = (uint64_t *)(v40 + 16 * v43);
            }
            *int v44 = -8192;
            v39[304] = vadd_s32(v39[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v38 = v61;
LABEL_72:
            *(unsigned char *)(v38 + 17) &= ~1u;
          }
        }
      }
    }
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
  }
LABEL_74:
  if (v52 != v54) {
    free(v52);
  }
  sub_1CC79BE3C((uint64_t)v57);
  if ((v58[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v58[1], 8);
  }
  return 0;
}

void sub_1CC80E7F8(llvm *a1)
{
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeLoopSimplifyPass(a1, v2);
  llvm::initializeLCSSAWrapperPassPass(a1, v3);
  llvm::initializeSCEVAAWrapperPassPass(a1, v4);
  operator new();
}

uint64_t sub_1CC80E8B8(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDC090;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261F360;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDC098, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC80E7F8;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCDC098, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC80E968()
{
}

void sub_1CC80E9A8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC80E9E0()
{
  return "Loop No-op Analysis Pass";
}

void sub_1CC80E9F0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  sub_1CB843600(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1CB843600(a2, a2, (uint64_t)&unk_1EA61F34C);
  sub_1CB843600(a2, a2, (uint64_t)&unk_1EA61F34B);
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::SCEVAAWrapperPass::ID);
}

uint64_t sub_1CC80EA84()
{
  return 0;
}

void sub_1CC80EA8C(uint64_t a1)
{
}

uint64_t sub_1CC80EB2C(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDC160;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F261F400;
  *(unsigned char *)(a1 + 48) = a2;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDC168, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CC80EA8C;
    v6[1] = &PassRegistry;
    uint64_t v5 = v6;
    std::__call_once(&qword_1EBCDC168, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC80EBE0()
{
}

void sub_1CC80EC24(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC80EC5C(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

BOOL sub_1CC80ECE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  uint64_t v577 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = v5 + 272;
  *(void *)(v4 + 32) = v5 + 272;
  uint64_t v9 = *(uint64_t **)(v4 + 8);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v10 == v11)
  {
LABEL_4:
    uint64_t v12 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v10 != &llvm::FunctionGroupInfoWrapperPass::ID)
    {
      v10 += 16;
      if (v10 == v11) {
        goto LABEL_4;
      }
    }
    uint64_t v12 = *(void *)(v10 + 8);
  }
  uint64_t v515 = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  if (*(char *)(v6 + 239) < 0) {
    sub_1CB8BDF7C((uint64_t)&v522, *(const void **)(v6 + 216), *(void *)(v6 + 224));
  }
  else {
    std::string v522 = *(std::string *)(v6 + 216);
  }
  if (!std::string::compare(&v522, 0, 4uLL, "agx1"))
  {
    int v13 = 27;
  }
  else if (!std::string::compare(&v522, 0, 4uLL, "agx2"))
  {
    int v13 = 28;
  }
  else if (!std::string::compare(&v522, 0, 4uLL, "agx3"))
  {
    int v13 = 29;
  }
  else
  {
    int v13 = 0;
  }
  *(_DWORD *)(v7 + 40) = v13;
  if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v522.__r_.__value_.__l.__data_);
    int v13 = *(_DWORD *)(v7 + 40);
  }
  if (v13 == 29) {
    int v14 = 8;
  }
  else {
    int v14 = 4;
  }
  *(_DWORD *)(v7 + 44) = v14;
  unsigned int v530 = v532;
  uint64_t v531 = 0x800000000;
  v517[0] = 0;
  v517[1] = 0;
  int v518 = 0;
  v520 = 0;
  uint64_t v521 = 0;
  long long __p = 0;
  sub_1CD0FEC94((llvm::Module *)v6, (uint64_t)v517);
  sub_1CD0FEFC4((llvm::Module *)v6, (uint64_t)v517, 0);
  uint64_t v505 = v7;
  int v498 = *(unsigned __int8 *)(v7 + 48);
  uint64_t v534 = 0;
  uint64_t v533 = 0;
  v535[0] = 0;
  *(void *)int v550 = &v550[16];
  *(void *)&v550[8] = 0xA00000000;
  v562[1] = 0;
  v562[0] = 0;
  int v563 = 0;
  uint64_t v504 = v6;
  sub_1CD10B93C((llvm::Module *)v6, (uint64_t)&v533, (uint64_t)v550, (uint64_t)v562);
  uint64_t v15 = (char *)__p;
  uint64_t v16 = v520;
  uint64_t v503 = v8;
  if (__p != v520)
  {
    int64x2_t v509 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      uint64_t v17 = (unsigned int *)*((void *)v15 + 1);
      v537 = 0;
      uint64_t v536 = 0;
      uint64_t v538 = 1;
      int64x2_t v539 = v509;
      int64x2_t v540 = v509;
      size_t v541 = v543;
      uint64_t v542 = 0x400000000;
      int v544 = 0;
      v545[0] = &v546;
      v545[1] = (void *)0x100000000;
      v547[0] = v548;
      v547[1] = (void *)0x200000000;
      __int16 v549 = 0;
      uint64_t v18 = *(void *)&v17[-2 * v17[2]];
      if (!v18) {
        goto LABEL_39;
      }
      uint64_t v19 = *(llvm::GlobalVariable **)(v18 + 128);
      v537 = v19;
      if (v535[0])
      {
        uint64_t v20 = ((v19 >> 4) ^ (v19 >> 9)) & (v535[0] - 1);
        uint64_t v21 = (llvm::GlobalVariable **)((char *)v533 + 64 * v20);
        uint64_t v22 = *v21;
        if (v19 == *v21)
        {
LABEL_25:
          if (v20 != v535[0])
          {
            sub_1CBA9B97C((uint64_t)v545, (uint64_t)(v21 + 1));
            sub_1CBA9B97C((uint64_t)v547, (uint64_t)(v21 + 4));
          }
        }
        else
        {
          int v91 = 1;
          while (v22 != (llvm::GlobalVariable *)-4096)
          {
            int v92 = v20 + v91++;
            uint64_t v20 = v92 & (v535[0] - 1);
            uint64_t v22 = (llvm::GlobalVariable *)*((void *)v533 + 8 * (unint64_t)v20);
            if (v19 == v22)
            {
              uint64_t v21 = (llvm::GlobalVariable **)((char *)v533 + 64 * v20);
              goto LABEL_25;
            }
          }
        }
      }
      if ((*(_DWORD *)(*(void *)v19 + 8) & 0xFFFFFF00) != 0x200 || (*((unsigned char *)v19 + 34) & 0x40) == 0) {
        goto LABEL_39;
      }
      uint64_t v23 = ***(void ***)v19;
      v523[0] = v19;
      int v24 = *(_DWORD *)(v23 + 2520);
      if (v24)
      {
        uint64_t v25 = *(void *)(v23 + 2504);
        int v26 = v24 - 1;
        unsigned int v27 = v26 & ((v19 >> 4) ^ (v19 >> 9));
        BOOL v28 = (llvm::GlobalVariable **)(v25 + 24 * v27);
        uint64_t v29 = *v28;
        if (*v28 == v19) {
          goto LABEL_31;
        }
        int v46 = 0;
        int v47 = 1;
        while (v29 != (llvm::GlobalVariable *)-4096)
        {
          if (v46) {
            BOOL v48 = 0;
          }
          else {
            BOOL v48 = v29 == (llvm::GlobalVariable *)-8192;
          }
          if (v48) {
            int v46 = v28;
          }
          unsigned int v49 = v27 + v47++;
          unsigned int v27 = v49 & v26;
          BOOL v28 = (llvm::GlobalVariable **)(v25 + 24 * v27);
          uint64_t v29 = *v28;
          if (*v28 == v19) {
            goto LABEL_31;
          }
        }
        if (v46) {
          __int16 v58 = v46;
        }
        else {
          __int16 v58 = v28;
        }
      }
      else
      {
        __int16 v58 = 0;
      }
      BOOL v28 = (llvm::GlobalVariable **)sub_1CC5BF31C(v23 + 2504, (uint64_t)v523, (uint64_t *)v523, v58);
      uint64_t v59 = (llvm::GlobalVariable *)v523[0];
      v28[1] = 0;
      v28[2] = 0;
      uint64_t *v28 = v59;
LABEL_31:
      if (v28[2] != (llvm::GlobalVariable *)17) {
        goto LABEL_39;
      }
      uint64_t v30 = (uint64_t *)v28[1];
      uint64_t v31 = *v30;
      uint64_t v32 = v30[1];
      int v33 = *((unsigned __int8 *)v30 + 16);
      BOOL v34 = v31 == 0x705F726576697264 && v32 == 0x726574656D617261;
      if (!v34 || v33 != 115) {
        goto LABEL_39;
      }
      sub_1CD1113FC((uint64_t)v19, v515, (uint64_t)&v538, &v549);
      uint64_t v536 = v17;
      uint64_t v51 = sub_1CB83544C(v8, *((void *)v19 + 3));
      if (v50 == 1) {
      int v544 = (unint64_t)(v51 + 7) >> 3;
      }
      unsigned int v52 = (unsigned __int8 *)((void *)v536 - *((unsigned int *)v536 + 2))[1];
      if (*v52 - 4 >= 0x1F)
      {
        uint64_t v60 = *((void *)v52 + 16);
        uint64_t v61 = (void *)(v60 + 24);
        if (*(_DWORD *)(v60 + 32) >= 0x41u) {
          uint64_t v61 = (void *)*v61;
        }
        if (*v61 == 139)
        {
          HIBYTE(v549) = 1;
          goto LABEL_39;
        }
      }
      if (!v498) {
        goto LABEL_39;
      }
      HIBYTE(v549) = 1;
      uint64_t v53 = (void **)*((void *)v19 + 1);
      BOOL v571 = (unsigned __int8 *)&v573;
      uint64_t v572 = 0x400000000;
      if (v53)
      {
        unint64_t v54 = -1;
        __int16 v55 = v53;
        do
        {
          __int16 v55 = (void **)v55[1];
          ++v54;
        }
        while (v55);
        unsigned int v56 = v54 + 1;
        if (v54 >= 4) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v57 = &v573;
        do
        {
          *v57++ = v53[3];
          uint64_t v53 = (void **)v53[1];
        }
        while (v53);
      }
      else
      {
        unsigned int v56 = 0;
      }
      unsigned int v62 = v56;
      LODWORD(v572) = v56;
      if (!v56) {
        goto LABEL_185;
      }
      while (2)
      {
        while (1)
        {
          uint64_t v63 = *(void *)&v571[8 * v62-- - 8];
          LODWORD(v572) = v62;
          unsigned int v64 = *(unsigned __int8 *)(v63 + 16);
          if (v64 <= 0x3D) {
            break;
          }
          if (v64 != 62 && v64 != 77) {
            goto LABEL_184;
          }
LABEL_105:
          for (uint64_t i = *(void *)(v63 + 8); i; uint64_t i = *(void *)(i + 8))
          {
            if (v62 >= HIDWORD(v572)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)&v571[8 * v62] = *(void *)(i + 24);
            unsigned int v62 = v572 + 1;
            LODWORD(v572) = v572 + 1;
          }
          if (!v62) {
            goto LABEL_185;
          }
        }
        if (v64 == 5)
        {
          int v67 = *(unsigned __int16 *)(v63 + 18);
          if (v67 != 49 && v67 != 34) {
            goto LABEL_184;
          }
          goto LABEL_105;
        }
        if (v64 != 60)
        {
LABEL_184:
          HIBYTE(v549) = 0;
          break;
        }
        uint64_t v525 = (char *)v526 + 8;
        *(void *)&v526[0] = 0x400000000;
        uint64_t v65 = *(void *)(v63 + 8);
        if (v65)
        {
          unsigned int v66 = 0;
          do
          {
            if (v66 >= DWORD1(v526[0])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v525 + v66) = v65;
            unsigned int v66 = ++LODWORD(v526[0]);
            uint64_t v65 = *(void *)(v65 + 8);
          }
          while (v65);
        }
        int v69 = 0;
        unsigned int v565 = &v567;
        uint64_t v566 = 0x400000000;
        while (2)
        {
          if (LODWORD(v526[0]))
          {
            char v70 = (void *)*((void *)v525 + LODWORD(v526[0]) - 1);
            unsigned int v71 = --LODWORD(v526[0]);
            uint64_t v72 = v70[3];
            unsigned int v73 = *(unsigned __int8 *)(v72 + 16);
            BOOL v74 = v73 < 0x1C || v73 - 66 > 0xC;
            if (!v74)
            {
              for (uint64_t j = *(void *)(v72 + 8); j; uint64_t j = *(void *)(j + 8))
              {
                if (v71 >= DWORD1(v526[0])) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v525 + v71) = j;
                unsigned int v71 = ++LODWORD(v526[0]);
              }
              goto LABEL_156;
            }
            if (v73 < 0x1C || v73 - 41 > 0x11)
            {
LABEL_148:
              if (v73 == 84)
              {
                uint64_t v86 = *(void *)(v72 - 32);
                if (!v86) {
                  goto LABEL_173;
                }
                if (*(unsigned char *)(v86 + 16)) {
                  goto LABEL_173;
                }
                if (*(void *)(v86 + 24) != *(void *)(v72 + 72)) {
                  goto LABEL_173;
                }
                if ((*(unsigned char *)(v86 + 33) & 0x20) == 0) {
                  goto LABEL_173;
                }
                int v87 = *(_DWORD *)(v86 + 36);
                if ((v87 - 1282) >= 0x190
                  && (v87 - 2824) >= 0xC
                  && (v87 - 1682) > 0x8B)
                {
                  goto LABEL_173;
                }
                int v69 = 1;
                llvm::SampleInfo::SampleInfo((uint64_t)v523, v87, 1);
                if (*(void *)(v72 - 32 * (*(_DWORD *)(v72 + 20) & 0x7FFFFFF) + 32 * v524[6]) != *v70) {
                  goto LABEL_173;
                }
              }
              else
              {
                if (v73 != 89) {
                  goto LABEL_173;
                }
                uint64_t v84 = *(void *)(v72 + 8);
                if (v84)
                {
                  unsigned int v85 = v526[0];
                  do
                  {
                    if (v85 >= DWORD1(v526[0])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v525 + v85) = v84;
                    unsigned int v85 = ++LODWORD(v526[0]);
                    uint64_t v84 = *(void *)(v84 + 8);
                  }
                  while (v84);
                }
LABEL_156:
                if (v566 >= (unint64_t)HIDWORD(v566)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v565 + v566) = v72;
                LODWORD(v566) = v566 + 1;
              }
              int v82 = 2;
            }
            else
            {
              if (v73 != 56) {
                goto LABEL_173;
              }
              uint64_t v76 = *(void *)(v72 - 32);
              if (*(unsigned char *)(v76 + 16) != 16) {
                goto LABEL_173;
              }
              size_t v77 = (void *)(v76 + 24);
              if (*(_DWORD *)(v76 + 32) >= 0x41u) {
                size_t v77 = (void *)*v77;
              }
              uint64_t v78 = (void *)*v77;
              if (*v77 == 0xFFFFFFFFLL || v78 == (void *)0xFFFF)
              {
                for (uint64_t k = *(void *)(v72 + 8); k; uint64_t k = *(void *)(k + 8))
                {
                  if (v71 >= DWORD1(v526[0])) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v525 + v71) = k;
                  unsigned int v71 = ++LODWORD(v526[0]);
                }
                if (v566 >= (unint64_t)HIDWORD(v566)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v8 = v503;
                int v83 = 0;
                *((void *)v565 + v566) = v72;
                LODWORD(v566) = v566 + 1;
                int v82 = 2;
              }
              else
              {
                int v82 = 0;
                int v83 = 1;
              }
              if (v78 != (void *)0xFFFFFFFFLL && v78 != (void *)0xFFFF)
              {
LABEL_173:
                int v69 = 0;
                break;
              }
              if (v83)
              {
                unsigned int v73 = *(unsigned __int8 *)(v72 + 16);
                goto LABEL_148;
              }
            }
            if (v82 != 2) {
              goto LABEL_173;
            }
            continue;
          }
          break;
        }
        if (v565 != &v567) {
          free(v565);
        }
        if (v525 != (char *)v526 + 8) {
          free(v525);
        }
        BOOL v88 = HIBYTE(v549) != 0;
        int v89 = v69 & v88;
        HIBYTE(v549) = v69 & v88;
        unsigned int v62 = v572;
        if (v89 == 1 && v572 != 0) {
          continue;
        }
        break;
      }
LABEL_185:
      if (v571 != (unsigned __int8 *)&v573) {
        free(v571);
      }
LABEL_39:
      if (v536)
      {
        if (!v542) {
          llvm::GlobalVariable::eraseFromParent(v537);
        }
        int v36 = v531;
        unint64_t v37 = (char *)v530;
        if (v531 < HIDWORD(v531))
        {
          uint64_t v38 = &v536;
          goto LABEL_43;
        }
        BOOL v94 = v530 <= &v536 && (char *)v530 + 176 * v531 > (char *)&v536;
        if (v94) {
          uint64_t v95 = 0x2E8BA2E8BA2E8BA3 * (((char *)&v536 - (unsigned char *)v530) >> 4);
        }
        else {
          uint64_t v95 = -1;
        }
        unint64_t v96 = v531 + 1;
        if (v531 == -1) {
          sub_1CD0A88F0(v96);
        }
        if (HIDWORD(v531) == -1) {
          sub_1CD0A89A8(0xFFFFFFFFuLL);
        }
        uint64_t v495 = v95;
        unint64_t v97 = (2 * HIDWORD(v531)) | 1;
        if (v97 <= v96) {
          unint64_t v97 = v531 + 1;
        }
        if (v97 >= 0xFFFFFFFF) {
          uint64_t v98 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v98 = v97;
        }
        size_t v99 = (char *)malloc_type_malloc(176 * v98, 0x4065EBACuLL);
        if (!v99) {
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        }
        unint64_t v37 = v99;
        uint64_t v100 = (char *)v530;
        if (v531)
        {
          int v493 = v98;
          BOOL v494 = v94;
          uint64_t v496 = (char *)v530 + 176 * v531;
          uint64_t v101 = v99;
          while (1)
          {
            long long v102 = *(_OWORD *)v100;
            *((void *)v101 + 2) = 1;
            uint64_t v103 = v101 + 16;
            *(_OWORD *)uint64_t v101 = v102;
            *(int64x2_t *)(v101 + 24) = v509;
            *(int64x2_t *)(v101 + 40) = v509;
            int v104 = *((_DWORD *)v100 + 4);
            *((_DWORD *)v100 + 4) = *((_DWORD *)v101 + 4) & 0xFFFFFFFE | v104 & 1;
            *((_DWORD *)v101 + 4) = v104 & 0xFFFFFFFE | *((_DWORD *)v101 + 4) & 1;
            int v105 = *((_DWORD *)v101 + 5);
            *((_DWORD *)v101 + 5) = *((_DWORD *)v100 + 5);
            *((_DWORD *)v100 + 5) = v105;
            int v106 = *((_DWORD *)v101 + 4);
            int v107 = *((_DWORD *)v100 + 4);
            if (v106)
            {
              int v106 = *((_DWORD *)v100 + 4);
              unsigned int v108 = v100 + 16;
              if ((v107 & 1) == 0) {
                goto LABEL_229;
              }
              for (uint64_t m = 24; m != 56; m += 8)
              {
                uint64_t v110 = *(void *)&v101[m];
                *(void *)&v101[m] = *(void *)&v100[m];
                *(void *)&v100[m] = v110;
              }
            }
            else
            {
              unsigned int v108 = v101 + 16;
              uint64_t v103 = v100 + 16;
              if (v107)
              {
LABEL_229:
                *(_OWORD *)BOOL v523 = *(_OWORD *)(v108 + 8);
                *(_DWORD *)unsigned int v108 = v106 | 1;
                for (uint64_t n = 8; n != 40; n += 8)
                  *(void *)&v108[n] = *(void *)&v103[n];
                *(_DWORD *)v103 &= ~1u;
                *(_OWORD *)(v103 + 8) = *(_OWORD *)v523;
                uint64_t v8 = v503;
                goto LABEL_215;
              }
              uint64_t v115 = *((void *)v101 + 3);
              *((void *)v101 + 3) = *((void *)v100 + 3);
              *((void *)v100 + 3) = v115;
              LODWORD(v115) = *((_DWORD *)v101 + 8);
              *((_DWORD *)v101 + 8) = *((_DWORD *)v100 + 8);
              *((_DWORD *)v100 + 8) = v115;
            }
LABEL_215:
            *((void *)v101 + 7) = v101 + 72;
            *((void *)v101 + 8) = 0x400000000;
            unsigned int v111 = *((_DWORD *)v100 + 16);
            if (v111 && v101 != v100)
            {
              size_t v112 = (char *)*((void *)v100 + 7);
              if (v112 == v100 + 72)
              {
                if (v111 >= 5) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                unsigned int v113 = *((_DWORD *)v100 + 16);
                memcpy(*((void **)v101 + 7), *((const void **)v100 + 7), 8 * v113);
                *((_DWORD *)v101 + 16) = v113;
              }
              else
              {
                *((void *)v101 + 7) = v112;
                *((_DWORD *)v101 + 16) = v111;
                *((_DWORD *)v101 + 17) = *((_DWORD *)v100 + 17);
                *((void *)v100 + 7) = v100 + 72;
                *((_DWORD *)v100 + 17) = 0;
              }
              *((_DWORD *)v100 + 16) = 0;
            }
            int v114 = *((_DWORD *)v100 + 26);
            *((void *)v101 + 14) = v101 + 128;
            *((_DWORD *)v101 + 26) = v114;
            *((void *)v101 + 15) = 0x100000000;
            if (*((_DWORD *)v100 + 30)) {
              sub_1CD642788((uint64_t)(v101 + 112), (uint64_t)(v100 + 112));
            }
            *((void *)v101 + 17) = v101 + 152;
            *((void *)v101 + 18) = 0x200000000;
            if (*((_DWORD *)v100 + 36)) {
              sub_1CD642788((uint64_t)(v101 + 136), (uint64_t)(v100 + 136));
            }
            *((_WORD *)v101 + 84) = *((_WORD *)v100 + 84);
            v100 += 176;
            v101 += 176;
            if (v100 == v496)
            {
              uint64_t v100 = (char *)v530;
              if (v531)
              {
                uint64_t v117 = 0;
                uint64_t v118 = 176 * v531;
                do
                {
                  uint64_t v119 = &v100[v118];
                  unsigned int v120 = *(char **)&v100[v118 - 40];
                  if (&v100[v118 - 24] != v120) {
                    free(v120);
                  }
                  int v121 = (char *)*((void *)v119 - 8);
                  if (v119 - 48 != v121) {
                    free(v121);
                  }
                  int v122 = *(char **)&v100[v118 - 120];
                  if (&v100[v118 - 104] != v122) {
                    free(v122);
                  }
                  if ((v100[v118 - 160] & 1) == 0) {
                    MEMORY[0x1D25D9CD0](*(void *)&v100[v118 - 152], 8);
                  }
                  v117 += 176;
                  v100 -= 176;
                }
                while (v118 != v117);
                uint64_t v100 = (char *)v530;
                uint64_t v8 = v503;
              }
              BOOL v94 = v494;
              LODWORD(v98) = v493;
              break;
            }
          }
        }
        if (v100 != v532) {
          free(v100);
        }
        unsigned int v530 = v37;
        HIDWORD(v531) = v98;
        if (v94) {
          uint64_t v38 = (void **)&v37[176 * v495];
        }
        else {
          uint64_t v38 = &v536;
        }
        int v36 = v531;
LABEL_43:
        int v39 = &v37[176 * v36];
        *(_OWORD *)int v39 = *(_OWORD *)v38;
        *((void *)v39 + 2) = 1;
        *(int64x2_t *)(v39 + 24) = v509;
        *(int64x2_t *)(v39 + 40) = v509;
        sub_1CC8133D4((_DWORD *)v39 + 4, (_DWORD *)v38 + 4);
        *((void *)v39 + 7) = v39 + 72;
        uint64_t v40 = (uint64_t)(v39 + 56);
        *(void *)(v40 + 8) = 0x400000000;
        if (*((_DWORD *)v38 + 16)) {
          sub_1CD4C0D94(v40, (uint64_t)(v38 + 7));
        }
        uint64_t v41 = &v37[176 * v36];
        int v42 = *((_DWORD *)v38 + 26);
        *((void *)v41 + 14) = v41 + 128;
        uint64_t v43 = (uint64_t)(v41 + 112);
        *(_DWORD *)(v43 - 8) = v42;
        *(void *)(v43 + 8) = 0x100000000;
        if (*((_DWORD *)v38 + 30)) {
          sub_1CBA9B97C(v43, (uint64_t)(v38 + 14));
        }
        int v44 = &v37[176 * v36];
        *((void *)v44 + 17) = v44 + 152;
        uint64_t v45 = (uint64_t)(v44 + 136);
        *(void *)(v45 + 8) = 0x200000000;
        if (*((_DWORD *)v38 + 36)) {
          sub_1CBA9B97C(v45, (uint64_t)(v38 + 17));
        }
        *(_WORD *)&v37[176 * v36 + 168] = *((_WORD *)v38 + 84);
        LODWORD(v531) = v531 + 1;
      }
      if (v547[0] != v548) {
        free(v547[0]);
      }
      if (v545[0] != &v546) {
        free(v545[0]);
      }
      if (v541 != v543) {
        free(v541);
      }
      if ((v538 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v539.i64[0], 8);
      }
      v15 += 16;
    }
    while (v15 != v16);
  }
  MEMORY[0x1D25D9CD0](v562[0], 4);
  int v123 = *(unsigned char **)v550;
  if (*(_DWORD *)&v550[8])
  {
    uint64_t v124 = 16 * *(unsigned int *)&v550[8];
    uint64_t v125 = *(void *)v550 - 16;
    iuint64_t i = (llvm::Module *)v504;
    do
    {
      uint64_t v127 = *(void ***)(v125 + v124);
      if ((v127 & 1) == 0 && v127)
      {
        if (*v127 != v127 + 2) {
          free(*v127);
        }
        MEMORY[0x1D25D9CE0](v127, 0x1080C40EF38A13ELL);
      }
      v124 -= 16;
    }
    while (v124);
    int v123 = *(unsigned char **)v550;
  }
  else
  {
    iuint64_t i = (llvm::Module *)v504;
  }
  if (v123 != &v550[16]) {
    free(v123);
  }
  sub_1CBA6598C((uint64_t)&v533);
  MEMORY[0x1D25D9CD0](v533, 8);
  int v497 = v531;
  if (!v531)
  {
    sub_1CC812F00(ii, v517, v515);
    goto LABEL_804;
  }
  size_t inserted = llvm::Module::getOrInsertNamedMetadata(ii, "agx.driver_parameters_dma", 0x19uLL);
  uint64_t v525 = (void *)1;
  v526[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v526[1] = v526[0];
  int v527 = v529;
  uint64_t v528 = 0x400000000;
  v523[0] = v524;
  v523[1] = (void *)0x2400000000;
  if (!v531) {
    goto LABEL_492;
  }
  uint64_t v128 = (char *)v530;
  size_t v506 = (char *)v530 + 176 * v531;
  do
  {
    llvm::Constant::removeDeadConstantUsers(*((void *)v128 + 1));
    uint64_t v510 = (unsigned int *)v128;
    if (!(v128[168] | v128[169]))
    {
      unsigned int v129 = *(_DWORD *)(v505 + 44);
      uint64_t v130 = *((unsigned int *)v128 + 16);
      if (v130)
      {
        size_t v131 = (uint64_t *)*((void *)v128 + 7);
        uint64_t v132 = &v131[v130];
        do
        {
          uint64_t v133 = *v131;
          unsigned int v134 = sub_1CD11373C(v515, *v131, (uint64_t)ii);
          unsigned int v135 = *((_DWORD *)v128 + 26);
          if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v133 + 176))(v133, 25)) {
            goto LABEL_273;
          }
          (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(*(void *)v133 + 128))(v550, v133, 25);
          uint64_t v143 = *(void *)(*(uint64_t (**)(void))(**(void **)v550 + 32))(*(void *)v550);
          uint64_t v144 = *(void *)v550;
          *(void *)int v550 = 0;
          if (v144) {
            (*(void (**)(uint64_t))(*(void *)v144 + 8))(v144);
          }
          if (!v143)
          {
LABEL_273:
            uint64_t v136 = *(unsigned int *)(v504 + 512);
            uint64_t v137 = *(void *)(v504 + 504);
            if (v136)
            {
              uint64_t v137 = *(void *)(v504 + 504);
              unint64_t v138 = *(unsigned int *)(v504 + 512);
              do
              {
                unint64_t v139 = v138 >> 1;
                uint64_t v140 = v137 + 16 * (v138 >> 1);
                unsigned int v141 = *(_DWORD *)(v140 + 8);
                uint64_t v142 = v140 + 16;
                v138 += ~(v138 >> 1);
                if (v141 < 2) {
                  uint64_t v137 = v142;
                }
                else {
                  unint64_t v138 = v139;
                }
              }
              while (v138);
            }
            if (v137 == *(void *)(v504 + 504) + 16 * v136 || *(_DWORD *)(v137 + 8) != 2) {
              uint64_t v137 = *(void *)(v504 + 504);
            }
            v135 += ((unint64_t)*(unsigned int *)(v137 + 4) + 7) >> 3;
          }
          BOOL v74 = v135 > v134;
          iuint64_t i = (llvm::Module *)v504;
          if (v74) {
            goto LABEL_290;
          }
          ++v131;
        }
        while (v131 != v132);
      }
      *(void *)int v550 = &v550[16];
      *(void *)&v550[8] = 0x2000000000;
      uint64_t v189 = 8;
      uint64_t v536 = (void *)1;
      do
      {
        *(void **)((char *)&v536 + v189) = (void *)-4096;
        v189 += 16;
      }
      while (v189 != 520);
      int v190 = operator new(0x78uLL);
      uint64_t v191 = (llvm::ValueAsMetadata *)(v190 + 8);
      v190[13] = v190[13] & 0x38000000 | 1;
      *(void *)int v190 = 0;
      *((void *)v190 + 1) = 0;
      *((void *)v190 + 2) = 0;
      *((void *)v190 + 3) = v190 + 8;
      unsigned int v192 = *(llvm::PointerType **)(*((void *)v128 + 1) + 24);
      unsigned int v565 = "dparamcache";
      LOWORD(v569) = 259;
      llvm::GlobalVariable::GlobalVariable((unint64_t *)v190 + 4, v504, v192, 1, 0, 0, (const char **)&v565, 0, 0, (llvm::Type *)0x100000040, 0);
      size_t v194 = (llvm::ValueAsMetadata *)llvm::UniqueStringSaver::save(***((void ***)v190 + 4) + 2136, "driver_parameter_cached", 0x17uLL);
      size_t v195 = v193;
      uint64_t v196 = ***((void ***)v190 + 4);
      unsigned int v565 = v190 + 8;
      int v197 = *(_DWORD *)(v196 + 2520);
      if (v197)
      {
        uint64_t v198 = *(void *)(v196 + 2504);
        int v199 = v197 - 1;
        unsigned int v200 = v199 & ((v191 >> 4) ^ (v191 >> 9));
        unsigned int v201 = (llvm::ValueAsMetadata **)(v198 + 24 * v200);
        unsigned int v202 = *v201;
        if (*v201 == v191) {
          goto LABEL_344;
        }
        uint64_t v248 = 0;
        int v249 = 1;
        while (v202 != (llvm::ValueAsMetadata *)-4096)
        {
          if (v248) {
            BOOL v250 = 0;
          }
          else {
            BOOL v250 = v202 == (llvm::ValueAsMetadata *)-8192;
          }
          if (v250) {
            uint64_t v248 = v201;
          }
          unsigned int v251 = v200 + v249++;
          unsigned int v200 = v251 & v199;
          unsigned int v201 = (llvm::ValueAsMetadata **)(v198 + 24 * v200);
          unsigned int v202 = *v201;
          if (*v201 == v191) {
            goto LABEL_344;
          }
        }
        if (v248) {
          int v252 = v248;
        }
        else {
          int v252 = v201;
        }
      }
      else
      {
        int v252 = 0;
      }
      unsigned int v201 = (llvm::ValueAsMetadata **)sub_1CC5BF31C(v196 + 2504, (uint64_t)&v565, (uint64_t *)&v565, v252);
      uint64_t v253 = (llvm::ValueAsMetadata *)v565;
      v201[1] = 0;
      v201[2] = 0;
      *unsigned int v201 = v253;
LABEL_344:
      v201[1] = v194;
      v201[2] = v195;
      v190[16] = (((2031616 - (__clz(v129) << 16)) & 0xFF0000) + 0x10000) | ((v195 != 0) << 22) | v190[16] & 0xFF80FFFF;
      uint64_t v128 = (char *)v510;
      uint64_t v203 = v510[16];
      uint64_t v8 = v503;
      if (v203)
      {
        unsigned int v204 = (uint64_t *)*((void *)v510 + 7);
        uint64_t v205 = 8 * v203;
        do
        {
          uint64_t v206 = *v204++;
          (*(void (**)(uint64_t, llvm::ValueAsMetadata *, uint64_t, uint64_t))(*(void *)v206 + 496))(v206, v191, v503, 5);
          v205 -= 8;
        }
        while (v205);
      }
      uint64_t v533 = v535;
      uint64_t v534 = 0x300000000;
      uint64_t v207 = llvm::ValueAsMetadata::get(v191, v193);
      if (v534 >= (unint64_t)HIDWORD(v534)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v533 + v534) = v207;
      unsigned int v208 = v534 + 1;
      LODWORD(v534) = v534 + 1;
      uint64_t v209 = *(void *)v510;
      uint64_t v210 = *(unsigned int *)(*(void *)v510 + 8);
      uint64_t v211 = *(unsigned __int8 **)(*(void *)v510 - 8 * v210 + 8);
      if (*v211 - 4 > 0x1E)
      {
        if (v208 >= HIDWORD(v534)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v533 + v208) = v211;
        unsigned int v213 = v534 + 1;
        LODWORD(v534) = v213;
        if (v213 >= HIDWORD(v534)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v533 + v213) = *(void *)(v209 - 8 * *(unsigned int *)(v209 + 8) + 16);
        unsigned int v208 = v534 + 1;
        LODWORD(v534) = v534 + 1;
      }
      else if (v210 != 1)
      {
        uint64_t v212 = 1;
        do
        {
          if (v208 >= HIDWORD(v534)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v533 + v208) = *(void *)(*(void *)v510
                                               - 8 * *(unsigned int *)(*(void *)v510 + 8)
                                               + 8 * v212);
          unsigned int v208 = v534 + 1;
          LODWORD(v534) = v534 + 1;
          ++v212;
        }
        while (v210 != v212);
      }
      Impl = llvm::MDTuple::getImpl(*(void *)v504, v533, v208, 0, 1);
      unsigned int v565 = Impl;
      uint64_t v215 = *(void *)(inserted + 48);
      uint64_t v216 = *(unsigned int *)(v215 + 8);
      if (v216 >= *(_DWORD *)(v215 + 12))
      {
        sub_1CC608328(*(void *)(inserted + 48), (unsigned __int8 **)&v565);
      }
      else
      {
        int v217 = (unsigned __int8 *)Impl;
        size_t v218 = (unsigned __int8 **)(*(void *)v215 + 8 * v216);
        *size_t v218 = v217;
        if (v217)
        {
          llvm::MetadataTracking::track((uint64_t)v218, v217, 2);
          LODWORD(v216) = *(_DWORD *)(v215 + 8);
        }
        *(_DWORD *)(v215 + 8) = v216 + 1;
      }
      size_t v219 = (void *)*((void *)v510 + 1);
      unsigned int v565 = v219;
      if (v536)
      {
        int v220 = 32;
        uint64_t v221 = (char *)&v537;
      }
      else
      {
        int v220 = v538;
        if (!v538)
        {
          size_t v230 = 0;
          goto LABEL_377;
        }
        uint64_t v221 = (char *)v537;
      }
      int v222 = v220 - 1;
      unsigned int v223 = v222 & ((v219 >> 4) ^ (v219 >> 9));
      int v224 = &v221[16 * v223];
      size_t v225 = *(void **)v224;
      if (v219 == *(void **)v224) {
        goto LABEL_378;
      }
      int v226 = 0;
      int v227 = 1;
      while (v225 != (void *)-4096)
      {
        if (v226) {
          BOOL v228 = 0;
        }
        else {
          BOOL v228 = v225 == (void *)-8192;
        }
        if (v228) {
          int v226 = v224;
        }
        unsigned int v229 = v223 + v227++;
        unsigned int v223 = v229 & v222;
        int v224 = &v221[16 * v223];
        size_t v225 = *(void **)v224;
        if (v219 == *(void **)v224) {
          goto LABEL_378;
        }
      }
      if (v226) {
        size_t v230 = v226;
      }
      else {
        size_t v230 = v224;
      }
LABEL_377:
      int v224 = (char *)sub_1CC7EBF40((uint64_t)&v536, (uint64_t)&v565, &v565, v230);
      *(void *)int v224 = v565;
      *((void *)v224 + 1) = 0;
LABEL_378:
      *((void *)v224 + 1) = v191;
      size_t v231 = (void *)*((void *)v510 + 1);
      BOOL v571 = (unsigned __int8 *)&unk_1F261F4A0;
      uint64_t v574 = &v571;
      unsigned int v565 = v231;
      int v569 = &v566;
      uint64_t v566 = (uint64_t)&unk_1F261F4A0;
      sub_1CC81350C((uint64_t)v550, &v565);
      if (v569 == &v566)
      {
        (*(void (**)(uint64_t *))(v566 + 32))(&v566);
      }
      else if (v569)
      {
        (*(void (**)(void))(*v569 + 40))();
      }
      if (v574 == &v571)
      {
        (*((void (**)(unsigned __int8 **))v571 + 4))(&v571);
      }
      else if (v574)
      {
        (*((void (**)(void))*v574 + 5))();
      }
      *((void *)v510 + 1) = v191;
      unsigned int v232 = *(_DWORD *)&v550[8];
      for (iuint64_t i = (llvm::Module *)v504; *(_DWORD *)&v550[8]; v232 = *(_DWORD *)&v550[8])
      {
        uint64_t v233 = *(void *)v550;
        uint64_t v234 = *(void *)v550 + 40 * v232;
        unsigned int v565 = *(void **)(v234 - 40);
        uint64_t v235 = *(void *)(v234 - 8);
        if (v235)
        {
          if (v235 == v234 - 32)
          {
            int v569 = &v566;
            (*(void (**)(uint64_t, uint64_t *))(*(void *)v235 + 24))(v235, &v566);
            unsigned int v232 = *(_DWORD *)&v550[8];
            uint64_t v233 = *(void *)v550;
          }
          else
          {
            int v569 = *(uint64_t **)(v234 - 8);
            *(void *)(v234 - 8) = 0;
          }
        }
        else
        {
          int v569 = 0;
        }
        *(_DWORD *)&v550[8] = v232 - 1;
        uint64_t v236 = v233 + 40 * (v232 - 1);
        uint64_t v237 = *(void *)(v236 + 32);
        if (v237 == v236 + 8)
        {
          (*(void (**)(uint64_t))(*(void *)(v236 + 8) + 32))(v236 + 8);
        }
        else if (v237)
        {
          (*(void (**)(uint64_t))(*(void *)v237 + 40))(v237);
        }
        unsigned int v238 = (unsigned __int8 *)v565;
        if (!v569)
        {
          uint64_t v564 = 0;
          BOOL v571 = (unsigned __int8 *)v565;
LABEL_822:
          sub_1CB920400();
        }
        if (v569 == &v566)
        {
          uint64_t v564 = v562;
          (*(void (**)(uint64_t *, void *))(v566 + 24))(&v566, v562);
          uint64_t v239 = (uint64_t)v564;
        }
        else
        {
          uint64_t v239 = (*(uint64_t (**)(void))(*v569 + 16))();
          uint64_t v564 = (void *)v239;
        }
        BOOL v571 = v238;
        if (!v239) {
          goto LABEL_822;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 **))(*(void *)v239 + 48))(v239, &v571))
        {
          uint64_t v240 = *((void *)v565 + 1);
          if (v240)
          {
            while (1)
            {
              uint64_t v241 = *(void *)(v240 + 24);
              int v242 = *(unsigned __int8 *)(v241 + 16);
              BOOL v243 = v241 && v242 == 5;
              int v244 = v243 ? *(unsigned __int16 *)(v241 + 18) : v242 - 28;
              if (v244 > 46) {
                break;
              }
              if (v244 != 32)
              {
                uint64_t v246 = (void (**)(void *, uint64_t *))&unk_1F261F4E8;
                goto LABEL_416;
              }
              uint64_t v245 = (uint64_t *)operator new(0x20uLL);
              *uint64_t v245 = (uint64_t)&unk_1F261F578;
              v245[1] = (uint64_t)&v536;
              v245[2] = v504;
              v245[3] = (uint64_t)v510;
              BOOL v571 = (unsigned __int8 *)v241;
              uint64_t v575 = v245;
              v561 = 0;
LABEL_418:
              sub_1CC81350C((uint64_t)v550, &v571);
              if (v575 == &v572)
              {
                (*(void (**)(uint64_t *))(v572 + 32))(&v572);
              }
              else if (v575)
              {
                (*(void (**)(void))(*v575 + 40))();
              }
              if (v561 == v560)
              {
                (*(void (**)(void *))(v560[0] + 32))(v560);
              }
              else if (v561)
              {
                (*(void (**)(void))(*v561 + 40))();
              }
              uint64_t v240 = *(void *)(v240 + 8);
              if (!v240) {
                goto LABEL_427;
              }
            }
            if (v244 == 47)
            {
              uint64_t v246 = (void (**)(void *, uint64_t *))&unk_1F261F5C0;
              v560[0] = &unk_1F261F5C0;
            }
            else
            {
              uint64_t v246 = (void (**)(void *, uint64_t *))&unk_1F261F530;
LABEL_416:
              v560[0] = v246;
              v560[1] = &v536;
            }
            v561 = v560;
            BOOL v571 = (unsigned __int8 *)v241;
            uint64_t v575 = &v572;
            v246[3](v560, &v572);
            goto LABEL_418;
          }
        }
LABEL_427:
        if (v564 == v562)
        {
          (*(void (**)(void *))(v562[0] + 32))(v562);
        }
        else if (v564)
        {
          (*(void (**)(void))(*v564 + 40))();
        }
        if (v569 == &v566)
        {
          (*(void (**)(uint64_t *))(v566 + 32))(&v566);
        }
        else if (v569)
        {
          (*(void (**)(void))(*v569 + 40))();
        }
      }
      if (v533 != v535) {
        free(v533);
      }
      if ((v536 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v537, 8);
      }
      uint64_t v247 = *(unsigned char **)v550;
      if (*(_DWORD *)&v550[8])
      {
        uint64_t v254 = 40 * *(unsigned int *)&v550[8];
        uint64_t v255 = *(void *)v550 - 32;
        do
        {
          uint64_t v256 = *(void *)(v255 + v254 + 24);
          if (v255 + v254 == v256)
          {
            (*(void (**)(uint64_t))(*(void *)(v255 + v254) + 32))(v255 + v254);
          }
          else if (v256)
          {
            (*(void (**)(uint64_t))(*(void *)v256 + 40))(v256);
          }
          v254 -= 40;
        }
        while (v254);
        uint64_t v247 = *(unsigned char **)v550;
        uint64_t v8 = v503;
        iuint64_t i = (llvm::Module *)v504;
        uint64_t v128 = (char *)v510;
      }
      if (v247 != &v550[16]) {
        free(v247);
      }
      goto LABEL_443;
    }
LABEL_290:
    uint64_t v145 = *((unsigned int *)v128 + 16);
    if (!v145) {
      goto LABEL_443;
    }
    int v146 = (uint64_t *)*((void *)v128 + 7);
    unsigned int v147 = &v146[v145];
    unsigned int v148 = ((2031616 - (__clz(*(_DWORD *)(v505 + 44)) << 16)) & 0xFF0000) + 0x10000;
    do
    {
      uint64_t v149 = *v146;
      if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*v146 + 176))(*v146, 25)) {
        goto LABEL_293;
      }
      (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(*(void *)v149 + 128))(v550, v149, 25);
      uint64_t v167 = *(void *)(*(uint64_t (**)(void))(**(void **)v550 + 32))(*(void *)v550);
      uint64_t v168 = *(void *)v550;
      *(void *)int v550 = 0;
      if (v168) {
        (*(void (**)(uint64_t))(*(void *)v168 + 8))(v168);
      }
      if (!v167)
      {
LABEL_293:
        size_t v150 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(**(void **)v504 + 1912), (llvm::Type *)2);
        size_t v151 = (char *)operator new(0x78uLL);
        *((_DWORD *)v151 + 13) = *((_DWORD *)v151 + 13) & 0x38000000 | 1;
        uint64_t v152 = (uint64_t)(v151 + 32);
        *(void *)size_t v151 = 0;
        *((void *)v151 + 1) = 0;
        *((void *)v151 + 2) = 0;
        *((void *)v151 + 3) = v151 + 32;
        *(void *)int v550 = "driverparambuffer";
        v551.i16[4] = 259;
        llvm::GlobalVariable::GlobalVariable((unint64_t *)v151 + 4, v504, v150, 1, 0, 0, (const char **)v550, 0, 0, (llvm::Type *)0x100000040, 0);
        uint64_t v153 = llvm::UniqueStringSaver::save(***((void ***)v151 + 4) + 2136, "driver_param_buffer", 0x13uLL);
        uint64_t v155 = v154;
        uint64_t v156 = ***((void ***)v151 + 4);
        *(void *)int v550 = v151 + 32;
        int v157 = *(_DWORD *)(v156 + 2520);
        if (v157)
        {
          uint64_t v158 = *(void *)(v156 + 2504);
          int v159 = v157 - 1;
          unsigned int v160 = v159 & ((v152 >> 4) ^ (v152 >> 9));
          uint64_t v161 = (void *)(v158 + 24 * v160);
          uint64_t v162 = *v161;
          if (*v161 == v152)
          {
LABEL_295:
            v161[1] = v153;
            v161[2] = v155;
            *((_DWORD *)v151 + 16) = v148 | ((v155 != 0) << 22) | *((_DWORD *)v151 + 16) & 0xFF80FFFF;
            llvm::FunctionGroup::setGlobalResource(v149, 25, v152);
            uint64_t v8 = v503;
            (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)v149 + 496))(v149, v151 + 32, v503, 5);
            uint64_t v128 = (char *)v510;
            goto LABEL_296;
          }
          uint64_t v163 = 0;
          int v164 = 1;
          while (v162 != -4096)
          {
            if (v163) {
              BOOL v165 = 0;
            }
            else {
              BOOL v165 = v162 == -8192;
            }
            if (v165) {
              uint64_t v163 = v161;
            }
            unsigned int v166 = v160 + v164++;
            unsigned int v160 = v166 & v159;
            uint64_t v161 = (void *)(v158 + 24 * v160);
            uint64_t v162 = *v161;
            if (*v161 == v152) {
              goto LABEL_295;
            }
          }
          if (v163) {
            unsigned int v169 = v163;
          }
          else {
            unsigned int v169 = v161;
          }
        }
        else
        {
          unsigned int v169 = 0;
        }
        uint64_t v161 = sub_1CC5BF31C(v156 + 2504, (uint64_t)v550, (uint64_t *)v550, v169);
        uint64_t v170 = *(void *)v550;
        v161[1] = 0;
        v161[2] = 0;
        *uint64_t v161 = v170;
        goto LABEL_295;
      }
LABEL_296:
      ++v146;
    }
    while (v146 != v147);
    uint64_t v171 = *((unsigned int *)v128 + 16);
    iuint64_t i = (llvm::Module *)v504;
    if (v171)
    {
      uint64_t v172 = (void *)*((void *)v128 + 7);
      uint64_t v173 = &v172[v171];
      do
      {
        uint64_t v174 = *v172;
        uint64_t v175 = *(void *)(*(void *)(*(void *)v128 - 8 * *(unsigned int *)(*(void *)v128 + 8)) + 128);
        (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v172 + 144))(*v172, 15, v175);
        size_t v176 = (void *)(*(void *)v128 - 8 * *(unsigned int *)(*(void *)v128 + 8));
        int v177 = (unsigned __int8 *)v176[1];
        if (*v177 - 4 < 0x1F) {
          goto LABEL_319;
        }
        uint64_t v178 = *((void *)v177 + 16);
        int v179 = (void *)(v178 + 24);
        if (*(_DWORD *)(v178 + 32) >= 0x41u) {
          int v179 = (void *)*v179;
        }
        if (*v179 == 139)
        {
          uint64_t v180 = *(void *)(v176[2] + 128);
          size_t v181 = (unsigned int *)(v180 + 24);
          if (*(_DWORD *)(v180 + 32) >= 0x41u) {
            size_t v181 = *(unsigned int **)v181;
          }
          uint64_t v182 = *(void *)(v176[4] + 128);
          uint64_t v183 = (void *)(v182 + 24);
          if (*(_DWORD *)(v182 + 32) >= 0x41u) {
            uint64_t v183 = (void *)*v183;
          }
          uint64_t v184 = *v181;
          if (!LODWORD(v523[1]))
          {
            uint64_t v185 = (void *)*v183;
            if (*v183)
            {
              if (*v183 > (unint64_t)HIDWORD(v523[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (*v183) {
                bzero(v523[0], 8 * *v183);
              }
              LODWORD(v523[1]) = v185;
            }
          }
          *((void *)v523[0] + v184) = v128;
          uint64_t v186 = *((unsigned int *)v128 + 16);
          if (v186)
          {
            size_t v187 = (uint64_t *)*((void *)v128 + 7);
            uint64_t v188 = 8 * v186;
            do
            {
              sub_1CC813344((uint64_t)&v525, v187++);
              v188 -= 8;
            }
            while (v188);
          }
        }
        else
        {
LABEL_319:
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v174 + 496))(v174, v175, v8, 6);
        }
        ++v172;
      }
      while (v172 != v173);
    }
LABEL_443:
    v128 += 176;
  }
  while (v128 != v506);
  if (LODWORD(v523[1]))
  {
    unint64_t v257 = 0;
    int64x2_t v511 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(void *)int v550 = 1;
      *(int64x2_t *)&v550[8] = v511;
      int64x2_t v551 = v511;
      v552.i64[0] = (uint64_t)&v553;
      v552.i64[1] = 0x400000000;
      if (v528)
      {
        uint64_t v258 = v527;
        uint64_t v259 = 8 * v528;
        do
        {
          uint64_t v260 = *v258;
          if ((*(uint64_t (**)(void))(*(void *)*v258 + 120))(*v258))
          {
            uint64_t v536 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v260 + 120))(v260);
            sub_1CC813344((uint64_t)v550, (uint64_t *)&v536);
          }
          ++v258;
          v259 -= 8;
        }
        while (v259);
        unsigned int v261 = (void **)v552.i64[0];
        if (v552.i32[2])
        {
          uint64_t v262 = 8 * v552.u32[2];
          do
          {
            int v263 = *v261;
            uint64_t v264 = *((void *)v523[0] + v257);
            if (v264) {
              (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)v263 + 496))(v263, *(void *)(*(void *)(*(void *)v264 - 8 * *(unsigned int *)(*(void *)v264 + 8)) + 128), v8, 6);
            }
            else {
              (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)v263 + 488))(v263, 6, 8, 8);
            }
            ++v261;
            v262 -= 8;
          }
          while (v262);
          unsigned int v261 = (void **)v552.i64[0];
        }
        if (v261 != &v553) {
          free(v261);
        }
      }
      if ((v550[0] & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)&v550[8], 8);
      }
      ++v257;
    }
    while (v257 < LODWORD(v523[1]));
  }
LABEL_492:
  sub_1CC812F00(ii, v517, v515);
  uint64_t v534 = 0;
  uint64_t v533 = 0;
  v535[0] = 0;
  if (v531)
  {
    unsigned int v265 = (char *)v530;
    BOOL v266 = (char *)v530 + 176 * v531;
    int64x2_t v512 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(_OWORD *)int v550 = *(_OWORD *)v265;
      *(void *)&v550[16] = 1;
      int64x2_t v551 = v512;
      int64x2_t v552 = v512;
      sub_1CC8133D4(&v550[16], (_DWORD *)v265 + 4);
      size_t v553 = v555;
      uint64_t v554 = 0x400000000;
      if (*((_DWORD *)v265 + 16)) {
        sub_1CD4C0D94((uint64_t)&v553, (uint64_t)(v265 + 56));
      }
      v555[8] = *((_DWORD *)v265 + 26);
      v556[0] = &v557;
      v556[1] = (void *)0x100000000;
      if (*((_DWORD *)v265 + 30)) {
        sub_1CBA9B97C((uint64_t)v556, (uint64_t)(v265 + 112));
      }
      v558[0] = v559;
      v558[1] = (void *)0x200000000;
      if (*((_DWORD *)v265 + 36)) {
        sub_1CBA9B97C((uint64_t)v558, (uint64_t)(v265 + 136));
      }
      v559[8] = *((_WORD *)v265 + 84);
      if (v554)
      {
        size_t v267 = v553;
        uint64_t v268 = 8 * v554;
        do
        {
          uint64_t v269 = *v267;
          if (((*(uint64_t (**)(void, uint64_t, void))(*(void *)*v267 + 184))(*v267, 15, *(void *)&v550[8]) & 1) == 0)(*(void (**)(uint64_t, uint64_t, void))(*(void *)v269 + 144))(v269, 5, *(void *)&v550[8]); {
          ++v267;
          }
          v268 -= 8;
        }
        while (v268);
      }
      if (v558[0] != v559) {
        free(v558[0]);
      }
      if (v556[0] != &v557) {
        free(v556[0]);
      }
      if (v553 != v555) {
        free(v553);
      }
      if ((v550[16] & 1) == 0) {
        MEMORY[0x1D25D9CD0](v551.i64[0], 8);
      }
      v265 += 176;
    }
    while (v265 != v266);
    iuint64_t i = (llvm::Module *)v504;
    if (v531)
    {
      int v270 = (char *)v530;
      uint64_t v499 = (char *)v530 + 176 * v531;
      do
      {
        uint64_t v271 = *((unsigned int *)v270 + 16);
        if (v271)
        {
          unsigned int v272 = (void *)*((void *)v270 + 7);
          int v273 = &v272[v271];
          uint64_t v500 = v273;
          do
          {
            uint64_t v274 = *v272;
            if ((*(unsigned int (**)(void, uint64_t, void))(*(void *)*v272 + 184))(*v272, 15, *((void *)v270 + 1)))
            {
              int v502 = v272;
              (*(void (**)(uint64_t, uint64_t, void))(*(void *)v274 + 144))(v274, 5, *((void *)v270 + 1));
              int v275 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))v274)(v274, 8, 0, 1, 3);
              int v276 = (*(uint64_t (**)(uint64_t, void))(*(void *)v274 + 400))(v274, *((void *)v270 + 1));
              uint64_t v278 = v277;
              uint64_t v279 = (*(uint64_t (**)(uint64_t))(*(void *)v274 + 336))(v274);
              int v280 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v279 + 24))(v279, v278);
              unsigned int v565 = &v567;
              uint64_t v566 = 0x800000000;
              uint64_t v281 = *(void *)(*((void *)v270 + 1) + 8);
              if (v281)
              {
                unsigned int v282 = 0;
                unsigned int v513 = ((v275 + 3) & 0xFFFFFFFC) + v280 * v276 - 8;
                do
                {
                  if (v282 >= HIDWORD(v566)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v565 + v282) = v281;
                  unsigned int v282 = v566 + 1;
                  LODWORD(v566) = v566 + 1;
                  uint64_t v281 = *(void *)(v281 + 8);
                }
                while (v281);
                long long v283 = (uint64_t *)v565;
                if (v282)
                {
                  uint64_t v507 = (uint64_t *)((char *)v565 + 8 * v282);
                  do
                  {
                    uint64_t v284 = *v283;
                    uint64_t v285 = *((void *)v270 + 1);
                    LODWORD(v571) = v513;
                    uint64_t v572 = v285;
                    uint64_t v573 = (void *)v515;
                    uint64_t v574 = (unsigned __int8 **)&v533;
                    uint64_t v575 = (uint64_t *)ii;
                    uint64_t v576 = (uint64_t)v270;
                    uint64_t v286 = *(void *)(v284 + 24);
                    if (v286) {
                      BOOL v287 = *(unsigned __int8 *)(v286 + 16) >= 0x1Cu;
                    }
                    else {
                      BOOL v287 = 0;
                    }
                    if (v287)
                    {
                      unsigned int v323 = sub_1CC814F88((unsigned int *)&v571, v286);
                      if (*(void *)v284)
                      {
                        **(void **)(v284 + 16) = *(void *)(v284 + 8);
                        uint64_t v324 = *(void *)(v284 + 8);
                        if (v324) {
                          *(void *)(v324 + 16) = *(void *)(v284 + 16);
                        }
                      }
                      *(void *)uint64_t v284 = v323;
                      if (v323)
                      {
                        uint64_t v327 = *((void *)v323 + 1);
                        size_t v325 = (uint64_t *)((char *)v323 + 8);
                        uint64_t v326 = v327;
                        *(void *)(v284 + 8) = v327;
                        if (v327) {
                          *(void *)(v326 + 16) = v284 + 8;
                        }
                        *(void *)(v284 + 16) = v325;
                        *size_t v325 = v284;
                      }
                    }
                    else
                    {
                      uint64_t v536 = &v538;
                      v537 = (llvm::GlobalVariable *)0x1000000000;
                      uint64_t v288 = *(void *)(v286 + 8);
                      *(void *)int v550 = &v550[16];
                      *(void *)&v550[8] = 0x1000000000;
                      sub_1CC7EE948((uint64_t)v550, 1uLL, v284, v288);
                      for (juint64_t j = *(_DWORD *)&v550[8]; jj; *(_DWORD *)&v550[8] = jj)
                      {
                        uint64_t v290 = *(void *)v550;
                        uint64_t v291 = *(void *)v550 + 16 * jj;
                        uint64_t v292 = *(void *)(*(void *)(v291 - 16) + 24);
                        if (v292) {
                          BOOL v293 = *(unsigned __int8 *)(v292 + 16) >= 0x1Cu;
                        }
                        else {
                          BOOL v293 = 0;
                        }
                        if (v293)
                        {
                          uint64_t v297 = sub_1CC814F88((unsigned int *)&v571, *(void *)(*(void *)(v291 - 16) + 24));
                          if (*(_DWORD *)&v550[8])
                          {
                            uint64_t v298 = v297;
                            uint64_t v299 = *(void *)v550;
                            uint64_t v300 = *(void *)v550 + 16 * *(unsigned int *)&v550[8];
                            int v301 = (uint64_t *)(v292 + 24);
                            while (1)
                            {
                              int v302 = v298;
                              uint64_t v303 = *(void *)(*(void *)v299 + 24);
                              if (v303 == v292) {
                                break;
                              }
                              AsInstructiouint64_t n = llvm::ConstantExpr::getAsInstruction(*(llvm::ConstantExpr **)(*(void *)v299 + 24), 0);
                              uint64_t v298 = (void *)AsInstruction;
                              unint64_t v305 = *(_DWORD *)(v303 + 20) & 0x7FFFFFF;
                              if ((*(_DWORD *)(v303 + 20) & 0x7FFFFFF) != 0)
                              {
                                uint64_t v306 = 0;
                                unint64_t v307 = 0;
                                uint64_t v308 = v302 + 1;
                                do
                                {
                                  if (*(void *)(v303 - 32 * v305 + v306) == **(void **)v299)
                                  {
                                    int v309 = *(_DWORD *)(AsInstruction + 20);
                                    if ((v309 & 0x40000000) != 0) {
                                      uint64_t v310 = *(void *)(AsInstruction - 8);
                                    }
                                    else {
                                      uint64_t v310 = AsInstruction - 32 * (v309 & 0x7FFFFFF);
                                    }
                                    uint64_t v311 = v310 + v306;
                                    if (*(void *)(v310 + v306))
                                    {
                                      **(void **)(v311 + 16) = *(void *)(v311 + 8);
                                      uint64_t v312 = *(void *)(v311 + 8);
                                      if (v312) {
                                        *(void *)(v312 + 16) = *(void *)(v311 + 16);
                                      }
                                    }
                                    *(void *)uint64_t v311 = v302;
                                    if (v302)
                                    {
                                      uint64_t v313 = *v308;
                                      uint64_t v314 = v310 + v306;
                                      *(void *)(v314 + 8) = *v308;
                                      if (v313) {
                                        *(void *)(v313 + 16) = v314 + 8;
                                      }
                                      *(void *)(v314 + 16) = v308;
                                      *uint64_t v308 = v311;
                                    }
                                  }
                                  ++v307;
                                  unint64_t v305 = *(_DWORD *)(v303 + 20) & 0x7FFFFFF;
                                  v306 += 32;
                                }
                                while (v307 < v305);
                              }
                              uint64_t v315 = *(void *)(v292 + 40);
                              *(void *)(AsInstruction + 40) = v315;
                              *(_WORD *)(v315 + 18) &= ~0x8000u;
                              if ((*(unsigned char *)(AsInstruction + 23) & 0x10) != 0)
                              {
                                uint64_t v317 = *(void *)(v315 + 56);
                                if (v317)
                                {
                                  uint64_t v318 = *(llvm::ValueSymbolTable **)(v317 + 104);
                                  if (v318) {
                                    llvm::ValueSymbolTable::reinsertValue(v318, (llvm::Value *)v298);
                                  }
                                }
                              }
                              uint64_t v316 = *v301;
                              v298[3] = *v301;
                              v298[4] = v301;
                              *(void *)(v316 + 8) = v298 + 3;
                              *int v301 = (uint64_t)(v298 + 3);
                              v299 += 16;
                              if (v299 == v300) {
                                goto LABEL_571;
                              }
                            }
                            uint64_t v319 = *(void *)(v291 - 16);
                            if (*(void *)v319)
                            {
                              **(void **)(v319 + 16) = *(void *)(v319 + 8);
                              uint64_t v320 = *(void *)(v319 + 8);
                              if (v320) {
                                *(void *)(v320 + 16) = *(void *)(v319 + 16);
                              }
                            }
                            *(void *)uint64_t v319 = v298;
                            if (v298)
                            {
                              int v322 = v298 + 1;
                              uint64_t v321 = v298[1];
                              *(void *)(v319 + 8) = v321;
                              if (v321) {
                                *(void *)(v321 + 16) = v319 + 8;
                              }
                              *(void *)(v319 + 16) = v322;
                              *int v322 = v319;
                            }
                          }
LABEL_571:
                          juint64_t j = *(_DWORD *)&v550[8] - 1;
                        }
                        else
                        {
                          uint64_t v294 = *(void *)(v291 - 8);
                          if (v294)
                          {
                            *(void *)(v291 - 8) = *(void *)(v294 + 8);
                            uint64_t v295 = *(void *)(*(void *)(v294 + 24) + 8);
                            if (jj >= *(_DWORD *)&v550[12]) {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            uint64_t v296 = (void *)(v290 + 16 * jj);
                            void *v296 = v294;
                            v296[1] = v295;
                            juint64_t j = *(_DWORD *)&v550[8] + 1;
                          }
                          else
                          {
                            --jj;
                          }
                        }
                      }
                      if (*(unsigned char **)v550 != &v550[16]) {
                        free(*(void **)v550);
                      }
                      if (v536 != &v538) {
                        free(v536);
                      }
                      iuint64_t i = (llvm::Module *)v504;
                    }
                    ++v283;
                  }
                  while (v283 != v507);
                  long long v283 = (uint64_t *)v565;
                }
                if (v283 != (uint64_t *)&v567) {
                  free(v283);
                }
              }
              unsigned int v272 = v502;
              int v273 = v500;
            }
            ++v272;
          }
          while (v272 != v273);
        }
        v270 += 176;
      }
      while (v270 != v499);
    }
  }
  MEMORY[0x1D25D9CD0](v533, 8);
  uint64_t v328 = ii;
  uint64_t v329 = (char *)v530;
  int v330 = v531;
  *(void *)int v550 = "agx.prid";
  v551.i16[4] = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v328, (const char **)v550);
  if (NamedMetadata)
  {
    uint64_t v536 = &v538;
    v537 = (llvm::GlobalVariable *)0x400000000;
    *(void *)int v550 = 1;
    *(int64x2_t *)&v550[8] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    int64x2_t v551 = *(int64x2_t *)&v550[8];
    v552.i64[0] = (uint64_t)&v553;
    v552.i64[1] = 0x400000000;
    if (v330)
    {
      uint64_t v334 = NamedMetadata;
      uint64_t v516 = &v329[176 * v330];
      size_t v335 = v329;
      do
      {
        uint64_t v336 = *((unsigned int *)v335 + 16);
        if (v336)
        {
          size_t v337 = (void **)*((void *)v335 + 7);
          size_t v338 = &v337[v336];
          do
          {
            unsigned int v565 = 0;
            unsigned int v565 = *v337;
            if ((*(unsigned int (**)(void *, uint64_t, void))(*(void *)v565 + 184))(v565, 15, *((void *)v335 + 1)))
            {
              sub_1CC813344((uint64_t)v550, (uint64_t *)&v565);
              uint64_t v339 = *((unsigned int *)v335 + 30);
              if (v339)
              {
                BOOL v340 = (unsigned int *)*((void *)v335 + 14);
                unsigned int v341 = v537;
                uint64_t v342 = 6 * v339;
                do
                {
                  if (v341 >= HIDWORD(v537)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v536 + v341) = *v340 | ((unint64_t)*((unsigned __int16 *)v340 + 2) << 32) | 0x1000000000000;
                  unsigned int v341 = v537 + 1;
                  LODWORD(v537) = v537 + 1;
                  BOOL v340 = (unsigned int *)((char *)v340 + 6);
                  v342 -= 6;
                }
                while (v342);
              }
              uint64_t v343 = *((unsigned int *)v335 + 36);
              if (v343)
              {
                uint64_t v344 = (unsigned int *)*((void *)v335 + 17);
                unsigned int v345 = v537;
                uint64_t v346 = 6 * v343;
                do
                {
                  if (v345 >= HIDWORD(v537)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v536 + v345) = *v344 | ((unint64_t)*((unsigned __int16 *)v344 + 2) << 32);
                  unsigned int v345 = v537 + 1;
                  LODWORD(v537) = v537 + 1;
                  uint64_t v344 = (unsigned int *)((char *)v344 + 6);
                  v346 -= 6;
                }
                while (v346);
              }
            }
            ++v337;
          }
          while (v337 != v338);
        }
        v335 += 176;
      }
      while (v335 != v516);
      unsigned int v347 = *(uint64_t **)v504;
      if (v552.i32[2])
      {
        BOOL v348 = (void *)v552.i64[0];
        size_t v508 = v552.i64[0] + 8 * v552.u32[2];
        do
        {
          uint64_t v349 = *v348;
          unsigned int v565 = &v567;
          uint64_t v566 = 0x400000000;
          if (v537)
          {
            int v514 = v348;
            uint64_t v350 = (unsigned __int8 *)v536;
            uint64_t v351 = 8 * v537;
            do
            {
              if (v350[6])
              {
                if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v349 + 176))(v349, 25))
                {
                  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v349 + 128))(&v533, v349, 25);
                  size_t v353 = *(llvm::ValueAsMetadata **)(*(uint64_t (**)(void *))(*(void *)v533 + 32))(v533);
                  int v404 = v533;
                  uint64_t v533 = 0;
                  if (v404) {
                    (*(void (**)(void *))(*(void *)v404 + 8))(v404);
                  }
                }
                else
                {
                  size_t v353 = 0;
                }
                BOOL v571 = (unsigned __int8 *)llvm::ValueAsMetadata::get(v353, v352);
                uint64_t v572 = (uint64_t)llvm::MDString::get(v347, "read_prid", 9uLL);
                uint64_t v355 = *v350 & 0xF;
                int v356 = *(llvm::ConstantInt **)(*v347 + 1960);
                unsigned int v357 = *(_DWORD *)(*v347 + 1968);
                LODWORD(v534) = v357 >> 8;
                if (v357 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v357 <= 0xFF) {
                  unint64_t v358 = 0;
                }
                else {
                  unint64_t v358 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v357) + 63);
                }
                uint64_t v533 = (void *)(v358 & v355);
                uint64_t v360 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v356, (llvm::LLVMContext *)&v533, v354);
                if (v534 >= 0x41 && v533) {
                  MEMORY[0x1D25D9CB0](v533, 0x1000C8000313F17);
                }
                uint64_t v573 = (void *)llvm::ValueAsMetadata::get(v360, v359);
                uint64_t v574 = (unsigned __int8 **)llvm::MDString::get(v347, "write_prid", 0xAuLL);
                unint64_t v362 = (unint64_t)*v350 >> 4;
                uint64_t v363 = *(llvm::ConstantInt **)(*v347 + 1960);
                unsigned int v364 = *(_DWORD *)(*v347 + 1968);
                LODWORD(v534) = v364 >> 8;
                if (v364 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v364 <= 0xFF) {
                  unint64_t v365 = 0;
                }
                else {
                  unint64_t v365 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v364) + 63);
                }
                uint64_t v533 = (void *)(v365 & v362);
                int v367 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v363, (llvm::LLVMContext *)&v533, v361);
                if (v534 >= 0x41 && v533) {
                  MEMORY[0x1D25D9CB0](v533, 0x1000C8000313F17);
                }
                uint64_t v575 = (uint64_t *)llvm::ValueAsMetadata::get(v367, v366);
                unsigned int v368 = llvm::MDTuple::getImpl((uint64_t)v347, &v571, 5, 0, 1);
                uint64_t v533 = v368;
                uint64_t v369 = *(void *)(v334 + 48);
                uint64_t v370 = *(unsigned int *)(v369 + 8);
                if (v370 >= *(_DWORD *)(v369 + 12))
                {
                  sub_1CC608328(*(void *)(v334 + 48), (unsigned __int8 **)&v533);
                }
                else
                {
                  size_t v371 = (unsigned __int8 *)v368;
                  size_t v372 = (unsigned __int8 **)(*(void *)v369 + 8 * v370);
                  *size_t v372 = v371;
                  if (v371)
                  {
                    llvm::MetadataTracking::track((uint64_t)v372, v371, 2);
                    LODWORD(v370) = *(_DWORD *)(v369 + 8);
                  }
                  *(_DWORD *)(v369 + 8) = v370 + 1;
                }
              }
              else
              {
                if (!v566)
                {
                  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v349 + 176))(v349, 25))
                  {
                    (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, uint64_t))(*(void *)v349 + 128))(&v571, v349, 25);
                    unsigned int v374 = *(llvm::ValueAsMetadata **)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v571 + 32))(v571);
                    uint64_t v405 = v571;
                    BOOL v571 = 0;
                    if (v405) {
                      (*(void (**)(unsigned __int8 *))(*(void *)v405 + 8))(v405);
                    }
                  }
                  else
                  {
                    unsigned int v374 = 0;
                  }
                  uint64_t v375 = llvm::ValueAsMetadata::get(v374, v373);
                  if (v566 >= (unint64_t)HIDWORD(v566)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v565 + v566) = v375;
                  LODWORD(v566) = v566 + 1;
                }
                uint64_t v376 = *((unsigned __int16 *)v350 + 1);
                uint64_t v377 = *(llvm::ConstantInt **)(*v347 + 1960);
                unsigned int v378 = *(_DWORD *)(*v347 + 1968);
                LODWORD(v534) = v378 >> 8;
                if (v378 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v378 <= 0xFF) {
                  unint64_t v379 = 0;
                }
                else {
                  unint64_t v379 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v378) + 63);
                }
                uint64_t v533 = (void *)(v379 & v376);
                unsigned int v381 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v377, (llvm::LLVMContext *)&v533, v333);
                if (v534 >= 0x41 && v533) {
                  MEMORY[0x1D25D9CB0](v533, 0x1000C8000313F17);
                }
                BOOL v571 = (unsigned __int8 *)llvm::ValueAsMetadata::get(v381, v380);
                unint64_t v383 = *((unsigned __int16 *)v350 + 2) + (unint64_t)*((unsigned __int16 *)v350 + 1);
                BOOL v384 = *(llvm::ConstantInt **)(*v347 + 1960);
                unsigned int v385 = *(_DWORD *)(*v347 + 1968);
                LODWORD(v534) = v385 >> 8;
                if (v385 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v385 <= 0xFF) {
                  unint64_t v386 = 0;
                }
                else {
                  unint64_t v386 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v385) + 63);
                }
                uint64_t v533 = (void *)(v386 & v383);
                uint64_t v388 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v384, (llvm::LLVMContext *)&v533, v382);
                if (v534 >= 0x41 && v533) {
                  MEMORY[0x1D25D9CB0](v533, 0x1000C8000313F17);
                }
                uint64_t v572 = llvm::ValueAsMetadata::get(v388, v387);
                uint64_t v573 = llvm::MDString::get(v347, "read_prid", 9uLL);
                uint64_t v390 = *v350 & 0xF;
                int v391 = *(llvm::ConstantInt **)(*v347 + 1960);
                unsigned int v392 = *(_DWORD *)(*v347 + 1968);
                LODWORD(v534) = v392 >> 8;
                if (v392 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v392 <= 0xFF) {
                  unint64_t v393 = 0;
                }
                else {
                  unint64_t v393 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v392) + 63);
                }
                uint64_t v533 = (void *)(v393 & v390);
                size_t v395 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v391, (llvm::LLVMContext *)&v533, v389);
                if (v534 >= 0x41 && v533) {
                  MEMORY[0x1D25D9CB0](v533, 0x1000C8000313F17);
                }
                uint64_t v574 = (unsigned __int8 **)llvm::ValueAsMetadata::get(v395, v394);
                uint64_t v575 = llvm::MDString::get(v347, "write_prid", 0xAuLL);
                unint64_t v397 = (unint64_t)*v350 >> 4;
                uint64_t v398 = *(llvm::ConstantInt **)(*v347 + 1960);
                unsigned int v399 = *(_DWORD *)(*v347 + 1968);
                LODWORD(v534) = v399 >> 8;
                if (v399 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v399 <= 0xFF) {
                  unint64_t v400 = 0;
                }
                else {
                  unint64_t v400 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v399) + 63);
                }
                uint64_t v533 = (void *)(v400 & v397);
                unsigned int v402 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v398, (llvm::LLVMContext *)&v533, v396);
                if (v534 >= 0x41 && v533) {
                  MEMORY[0x1D25D9CB0](v533, 0x1000C8000313F17);
                }
                uint64_t v576 = llvm::ValueAsMetadata::get(v402, v401);
                int v403 = llvm::MDTuple::getImpl((uint64_t)v347, &v571, 6, 0, 1);
                if (v566 >= (unint64_t)HIDWORD(v566)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v565 + v566) = v403;
                LODWORD(v566) = v566 + 1;
              }
              v350 += 8;
              v351 -= 8;
            }
            while (v351);
            int v333 = (const llvm::APInt *)v566;
            int v332 = (void **)v565;
            if (v566)
            {
              size_t v406 = (unsigned __int8 *)llvm::MDTuple::getImpl((uint64_t)v347, v565, v566, 0, 1);
              BOOL v571 = v406;
              uint64_t v407 = *(void *)(v334 + 48);
              uint64_t v408 = *(unsigned int *)(v407 + 8);
              BOOL v348 = v514;
              if (v408 >= *(_DWORD *)(v407 + 12))
              {
                sub_1CC608328(*(void *)(v334 + 48), &v571);
              }
              else
              {
                size_t v409 = v406;
                int v410 = (unsigned __int8 **)(*(void *)v407 + 8 * v408);
                *int v410 = v409;
                if (v409)
                {
                  llvm::MetadataTracking::track((uint64_t)v410, v409, 2);
                  LODWORD(v408) = *(_DWORD *)(v407 + 8);
                }
                *(_DWORD *)(v407 + 8) = v408 + 1;
              }
              int v332 = (void **)v565;
            }
            else
            {
              BOOL v348 = v514;
            }
            if (v332 != &v567) {
              free(v332);
            }
          }
          ++v348;
        }
        while (v348 != (void *)v508);
      }
      do
      {
        uint64_t v411 = *((unsigned int *)v329 + 30);
        if (v411)
        {
          size_t v412 = (unsigned char *)*((void *)v329 + 14);
          uint64_t v413 = 6 * v411;
          do
          {
            unsigned int v565 = (void *)llvm::ValueAsMetadata::get(*((llvm::ValueAsMetadata **)v329 + 1), (llvm::Value *)v332);
            uint64_t v566 = (uint64_t)llvm::MDString::get(v347, "read_prid", 9uLL);
            uint64_t v415 = *v412 & 0xF;
            uint64_t v416 = *(llvm::ConstantInt **)(*v347 + 1960);
            unsigned int v417 = *(_DWORD *)(*v347 + 1968);
            LODWORD(v572) = v417 >> 8;
            if (v417 >> 8 > 0x40) {
              operator new[]();
            }
            if (v417 <= 0xFF) {
              unint64_t v418 = 0;
            }
            else {
              unint64_t v418 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v417) + 63);
            }
            BOOL v571 = (unsigned __int8 *)(v418 & v415);
            uint64_t v420 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v416, (llvm::LLVMContext *)&v571, v414);
            if (v572 >= 0x41 && v571) {
              MEMORY[0x1D25D9CB0](v571, 0x1000C8000313F17);
            }
            uint64_t v567 = (void *)llvm::ValueAsMetadata::get(v420, v419);
            unsigned int v568 = llvm::MDString::get(v347, "write_prid", 0xAuLL);
            unint64_t v422 = (unint64_t)*v412 >> 4;
            uint64_t v423 = *(llvm::ConstantInt **)(*v347 + 1960);
            unsigned int v424 = *(_DWORD *)(*v347 + 1968);
            LODWORD(v572) = v424 >> 8;
            if (v424 >> 8 > 0x40) {
              operator new[]();
            }
            if (v424 <= 0xFF) {
              unint64_t v425 = 0;
            }
            else {
              unint64_t v425 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v424) + 63);
            }
            BOOL v571 = (unsigned __int8 *)(v425 & v422);
            size_t v427 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v423, (llvm::LLVMContext *)&v571, v421);
            if (v572 >= 0x41 && v571) {
              MEMORY[0x1D25D9CB0](v571, 0x1000C8000313F17);
            }
            int v569 = (uint64_t *)llvm::ValueAsMetadata::get(v427, v426);
            int v428 = (unsigned __int8 *)llvm::MDTuple::getImpl((uint64_t)v347, &v565, 5, 0, 1);
            BOOL v571 = v428;
            uint64_t v429 = *(void *)(v334 + 48);
            uint64_t v430 = *(unsigned int *)(v429 + 8);
            if (v430 >= *(_DWORD *)(v429 + 12))
            {
              sub_1CC608328(*(void *)(v334 + 48), &v571);
            }
            else
            {
              int v332 = (void **)v428;
              size_t v431 = (void *)(*(void *)v429 + 8 * v430);
              *size_t v431 = v332;
              if (v332)
              {
                llvm::MetadataTracking::track((uint64_t)v431, (unsigned __int8 *)v332, 2);
                LODWORD(v430) = *(_DWORD *)(v429 + 8);
              }
              *(_DWORD *)(v429 + 8) = v430 + 1;
            }
            v412 += 6;
            v413 -= 6;
          }
          while (v413);
        }
        uint64_t v432 = *(void *)(*((void *)v329 + 1) + 24);
        if (v432) {
          BOOL v433 = *(unsigned char *)(v432 + 8) == 17;
        }
        else {
          BOOL v433 = 0;
        }
        if (v433)
        {
          uint64_t v455 = sub_1CB83544C(v503, *(void *)(v432 + 24));
          if (v332 == 1) {
          uint64_t v456 = *((unsigned int *)v329 + 36);
          }
          if (v456)
          {
            unint64_t v457 = (unint64_t)(v455 + 7) >> 3;
            long long v458 = (unsigned __int8 *)*((void *)v329 + 17);
            uint64_t v459 = 6 * v456;
            do
            {
              uint64_t v460 = *((unsigned __int16 *)v458 + 1) / v457;
              unsigned int v565 = (void *)llvm::ValueAsMetadata::get(*((llvm::ValueAsMetadata **)v329 + 1), (llvm::Value *)v332);
              unsigned int v462 = *(llvm::ConstantInt **)(*v347 + 1960);
              unsigned int v463 = *(_DWORD *)(*v347 + 1968);
              LODWORD(v572) = v463 >> 8;
              if (v463 >> 8 > 0x40) {
                operator new[]();
              }
              if (v463 <= 0xFF) {
                unint64_t v464 = 0;
              }
              else {
                unint64_t v464 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v463) + 63);
              }
              BOOL v571 = (unsigned __int8 *)(v464 & v460);
              unint64_t v466 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v462, (llvm::LLVMContext *)&v571, v461);
              if (v572 >= 0x41 && v571) {
                MEMORY[0x1D25D9CB0](v571, 0x1000C8000313F17);
              }
              uint64_t v566 = llvm::ValueAsMetadata::get(v466, v465);
              uint64_t v567 = llvm::MDString::get(v347, "read_prid", 9uLL);
              uint64_t v468 = *v458 & 0xF;
              uint64_t v469 = *(llvm::ConstantInt **)(*v347 + 1960);
              unsigned int v470 = *(_DWORD *)(*v347 + 1968);
              LODWORD(v572) = v470 >> 8;
              if (v470 >> 8 > 0x40) {
                operator new[]();
              }
              if (v470 <= 0xFF) {
                unint64_t v471 = 0;
              }
              else {
                unint64_t v471 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v470) + 63);
              }
              BOOL v571 = (unsigned __int8 *)(v471 & v468);
              BOOL v473 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v469, (llvm::LLVMContext *)&v571, v467);
              if (v572 >= 0x41 && v571) {
                MEMORY[0x1D25D9CB0](v571, 0x1000C8000313F17);
              }
              unsigned int v568 = (void *)llvm::ValueAsMetadata::get(v473, v472);
              int v569 = llvm::MDString::get(v347, "write_prid", 0xAuLL);
              unint64_t v475 = (unint64_t)*v458 >> 4;
              uint64_t v476 = *(llvm::ConstantInt **)(*v347 + 1960);
              unsigned int v477 = *(_DWORD *)(*v347 + 1968);
              LODWORD(v572) = v477 >> 8;
              if (v477 >> 8 > 0x40) {
                operator new[]();
              }
              if (v477 <= 0xFF) {
                unint64_t v478 = 0;
              }
              else {
                unint64_t v478 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v477) + 63);
              }
              BOOL v571 = (unsigned __int8 *)(v478 & v475);
              int v480 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v476, (llvm::LLVMContext *)&v571, v474);
              if (v572 >= 0x41 && v571) {
                MEMORY[0x1D25D9CB0](v571, 0x1000C8000313F17);
              }
              uint64_t v570 = llvm::ValueAsMetadata::get(v480, v479);
              int v481 = (unsigned __int8 *)llvm::MDTuple::getImpl((uint64_t)v347, &v565, 6, 0, 1);
              BOOL v571 = v481;
              uint64_t v482 = *(void *)(v334 + 48);
              uint64_t v483 = *(unsigned int *)(v482 + 8);
              if (v483 >= *(_DWORD *)(v482 + 12))
              {
                sub_1CC608328(*(void *)(v334 + 48), &v571);
              }
              else
              {
                int v332 = (void **)v481;
                BOOL v484 = (void *)(*(void *)v482 + 8 * v483);
                void *v484 = v332;
                if (v332)
                {
                  llvm::MetadataTracking::track((uint64_t)v484, (unsigned __int8 *)v332, 2);
                  LODWORD(v483) = *(_DWORD *)(v482 + 8);
                }
                *(_DWORD *)(v482 + 8) = v483 + 1;
              }
              v458 += 6;
              v459 -= 6;
            }
            while (v459);
          }
        }
        else
        {
          uint64_t v434 = *((unsigned int *)v329 + 36);
          if (v434)
          {
            uint64_t v435 = (unsigned char *)*((void *)v329 + 17);
            uint64_t v436 = 6 * v434;
            do
            {
              unsigned int v565 = (void *)llvm::ValueAsMetadata::get(*((llvm::ValueAsMetadata **)v329 + 1), (llvm::Value *)v332);
              uint64_t v566 = (uint64_t)llvm::MDString::get(v347, "read_prid", 9uLL);
              uint64_t v438 = *v435 & 0xF;
              int v439 = *(llvm::ConstantInt **)(*v347 + 1960);
              unsigned int v440 = *(_DWORD *)(*v347 + 1968);
              LODWORD(v572) = v440 >> 8;
              if (v440 >> 8 > 0x40) {
                operator new[]();
              }
              if (v440 <= 0xFF) {
                unint64_t v441 = 0;
              }
              else {
                unint64_t v441 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v440) + 63);
              }
              BOOL v571 = (unsigned __int8 *)(v441 & v438);
              size_t v443 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v439, (llvm::LLVMContext *)&v571, v437);
              if (v572 >= 0x41 && v571) {
                MEMORY[0x1D25D9CB0](v571, 0x1000C8000313F17);
              }
              uint64_t v567 = (void *)llvm::ValueAsMetadata::get(v443, v442);
              unsigned int v568 = llvm::MDString::get(v347, "write_prid", 0xAuLL);
              unint64_t v445 = (unint64_t)*v435 >> 4;
              size_t v446 = *(llvm::ConstantInt **)(*v347 + 1960);
              unsigned int v447 = *(_DWORD *)(*v347 + 1968);
              LODWORD(v572) = v447 >> 8;
              if (v447 >> 8 > 0x40) {
                operator new[]();
              }
              if (v447 <= 0xFF) {
                unint64_t v448 = 0;
              }
              else {
                unint64_t v448 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v447) + 63);
              }
              BOOL v571 = (unsigned __int8 *)(v448 & v445);
              unsigned int v450 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v446, (llvm::LLVMContext *)&v571, v444);
              if (v572 >= 0x41 && v571) {
                MEMORY[0x1D25D9CB0](v571, 0x1000C8000313F17);
              }
              int v569 = (uint64_t *)llvm::ValueAsMetadata::get(v450, v449);
              uint64_t v451 = (unsigned __int8 *)llvm::MDTuple::getImpl((uint64_t)v347, &v565, 5, 0, 1);
              BOOL v571 = v451;
              uint64_t v452 = *(void *)(v334 + 48);
              uint64_t v453 = *(unsigned int *)(v452 + 8);
              if (v453 >= *(_DWORD *)(v452 + 12))
              {
                sub_1CC608328(*(void *)(v334 + 48), &v571);
              }
              else
              {
                int v332 = (void **)v451;
                uint64_t v454 = (void *)(*(void *)v452 + 8 * v453);
                *uint64_t v454 = v332;
                if (v332)
                {
                  llvm::MetadataTracking::track((uint64_t)v454, (unsigned __int8 *)v332, 2);
                  LODWORD(v453) = *(_DWORD *)(v452 + 8);
                }
                *(_DWORD *)(v452 + 8) = v453 + 1;
              }
              v435 += 6;
              v436 -= 6;
            }
            while (v436);
          }
        }
        v329 += 176;
      }
      while (v329 != v516);
      if ((void **)v552.i64[0] != &v553) {
        free((void *)v552.i64[0]);
      }
    }
    if ((v550[0] & 1) == 0) {
      MEMORY[0x1D25D9CD0](*(void *)&v550[8], 8);
    }
    if (v536 != &v538) {
      free(v536);
    }
  }
  if (v523[0] != v524) {
    free(v523[0]);
  }
  if (v527 != v529) {
    free(v527);
  }
  if ((v525 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)&v526[0], 8);
  }
LABEL_804:
  if (__p)
  {
    v520 = (char *)__p;
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v517[0], 8);
  unsigned int v485 = (char *)v530;
  if (v531)
  {
    uint64_t v486 = 0;
    uint64_t v487 = 176 * v531;
    do
    {
      char v488 = &v485[v487];
      uint64_t v489 = *(char **)&v485[v487 - 40];
      if (&v485[v487 - 24] != v489) {
        free(v489);
      }
      unsigned int v490 = (char *)*((void *)v488 - 8);
      if (v488 - 48 != v490) {
        free(v490);
      }
      uint64_t v491 = *(char **)&v485[v487 - 120];
      if (&v485[v487 - 104] != v491) {
        free(v491);
      }
      if ((v485[v487 - 160] & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)&v485[v487 - 152], 8);
      }
      v486 += 176;
      v485 -= 176;
    }
    while (v487 != v486);
    unsigned int v485 = (char *)v530;
  }
  if (v485 != v532) {
    free(v485);
  }
  return v497 != 0;
}

uint64_t sub_1CC812F00(llvm::Module *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v5 = sub_1CD10A3A4(a1);
  uint64_t v7 = v6;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 64))(a3);
  if ((v5 & 0x100000000) != 0 && (v7 & 0x1000000000000) != 0)
  {
    unsigned int v26 = *(_DWORD *)(result + 4);
    uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 48))(a3);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 56))(a3);
    if (v9 != (void *)result)
    {
      uint64_t v10 = (void *)result;
      do
      {
        uint64_t v11 = *v9;
        (*(void (**)(void *__return_ptr, void, uint64_t))(*(void *)*v9 + 128))(v27, *v9, 3);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v11 + 136))(&v28, v11, 3);
        uint64_t v12 = v27[0];
        uint64_t v13 = v28;
        if (v27[0])
        {
          (*(void (**)(void *__return_ptr, void))(*(void *)v27[0] + 16))(v27, v27[0]);
          uint64_t v14 = v27[0];
          if (!v13) {
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v14 = 0;
          if (!v28)
          {
LABEL_33:
            uint64_t v15 = 0;
            goto LABEL_8;
          }
        }
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v13 + 16))(v27, v13);
        uint64_t v15 = v27[0];
LABEL_8:
        while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 24))(v14, v15) & 1) == 0)
        {
          uint64_t v16 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14);
          uint64_t v18 = (uint64_t *)(v16 + 72);
          uint64_t v17 = *v18;
          if (*v18)
          {
            v27[0] = "oob_check_enable";
            v27[1] = 16;
            uint64_t v28 = 0;
            if (sub_1CC5122C8((uint64_t *)(v17 + 24), (uint64_t)v27, &v28))
            {
              uint64_t Attribute = llvm::AttributeSet::getAttribute(v18, (uint64_t)"oob_check_enable", 16);
              if (Attribute)
              {
                if (*(_DWORD *)(Attribute + 16) == 1
                  && *(unsigned char *)(Attribute + *(unsigned int *)(Attribute + 12) + 25) == 49)
                {
                  v27[0] = v16;
                  uint64_t v20 = sub_1CC782500(a2, v27);
                  if (v20)
                  {
                    uint64_t v21 = (void *)(v20 - 8 * *(unsigned int *)(v20 + 8));
                    if (*(unsigned char *)(*(void *)(*(void *)(*v21 + 128) + 24) + 8) != 17
                      || (uint64_t v22 = v21[1], *(unsigned char *)v22 == 1) && *(unsigned char *)(*(void *)(v22 + 128) + 16) == 16)
                    {
                      uint64_t v23 = v21[2];
                    }
                    else
                    {
                      uint64_t v23 = *(void *)(v22 - 8 * *(unsigned int *)(v22 + 8) + 8);
                    }
                    uint64_t v24 = *(void *)(v23 + 128);
                    uint64_t v25 = (unsigned int *)(v24 + 24);
                    if (*(_DWORD *)(v24 + 32) >= 0x41u) {
                      uint64_t v25 = *(unsigned int **)v25;
                    }
                    (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v11 + 472))(v11, v16, *v25, v26);
                  }
                }
              }
            }
          }
          (*(void (**)(uint64_t))(*(void *)v14 + 40))(v14);
        }
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
        if (v13) {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
        if (v12) {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
        ++v9;
      }
      while (v9 != v10);
    }
  }
  return result;
}

BOOL sub_1CC813344(uint64_t a1, uint64_t *a2)
{
  sub_1CC814D5C(a1, a2, (uint64_t)v8);
  int v4 = v9;
  if (v9)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = *(_DWORD *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return v4 != 0;
}

void *sub_1CC8133D4(_DWORD *a1, _DWORD *a2)
{
  int v2 = *a1;
  if ((*a1 & 1) == 0)
  {
    uint64_t v13 = a2;
    uint64_t v14 = a1;
    MEMORY[0x1D25D9CD0](*((void *)a1 + 1), 8);
    a2 = v13;
    a1 = v14;
    int v2 = *v14;
  }
  *a1 = v2 | 1;
  if ((*a2 & 1) != 0 || a2[4] <= 4u)
  {
    int v3 = 0;
    *a1 = *a2 | 1;
    a1[1] = a2[1];
    int v4 = a1 + 2;
  }
  else
  {
    *a1 = v2 & 0xFFFFFFFE;
    if (*a2) {
      uint64_t v9 = 4;
    }
    else {
      uint64_t v9 = a2[4];
    }
    uint64_t v10 = a1;
    uint64_t v11 = a2;
    *((void *)a1 + 1) = operator new(8 * v9, (std::align_val_t)8uLL);
    int v4 = v10 + 2;
    *((void *)v10 + 2) = v9;
    unsigned int v12 = *v10;
    unsigned int *v10 = *v11 & 0xFFFFFFFE | *v10 & 1;
    a2 = v11;
    a1 = v10;
    v10[1] = v11[1];
    if (v12)
    {
      int v3 = 0;
    }
    else
    {
      int v4 = (void *)*v4;
      int v3 = 1;
    }
  }
  char v6 = *(unsigned char *)a2;
  uint64_t v5 = a2 + 2;
  if ((v6 & 1) == 0) {
    uint64_t v5 = (void *)*v5;
  }
  if (v3) {
    size_t v7 = 8 * a1[4];
  }
  else {
    size_t v7 = 32;
  }

  return memcpy(v4, v5, v7);
}

uint64_t sub_1CC81350C(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(result + 8);
  unint64_t v5 = *(void *)result;
  if (v4 >= *(_DWORD *)(result + 12))
  {
    unint64_t v11 = v5 + 40 * v4;
    if (v5 > (unint64_t)a2 || v11 <= (unint64_t)a2) {
      sub_1CD6428B0();
    }
    sub_1CD6428B0();
  }
  unsigned int v6 = *(_DWORD *)(result + 8);
  size_t v7 = (void *)(v5 + 40 * v6);
  void *v7 = *a2;
  uint64_t v8 = v7 + 1;
  uint64_t v9 = (void *)a2[4];
  if (v9)
  {
    uint64_t v10 = (void *)(v5 + 40 * v6 + 32);
    if (v9 == a2 + 1)
    {
      void *v10 = v8;
      uint64_t result = (*(uint64_t (**)(void))(*(void *)a2[4] + 24))(a2[4]);
      unsigned int v6 = *(_DWORD *)(v3 + 8);
    }
    else
    {
      void *v10 = v9;
      a2[4] = 0;
    }
  }
  else
  {
    *(void *)(v5 + 40 * v6 + 32) = 0;
  }
  *(_DWORD *)(v3 + 8) = v6 + 1;
  return result;
}

unsigned int *sub_1CC813608(unsigned int *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2)
  {
    uint64_t v3 = result;
    unsigned int v4 = (void *)(a2 + 32);
    uint64_t v5 = 40 * v2;
    uint64_t v6 = *(void *)result + 32;
    do
    {
      *(v4 - 4) = *(void *)(v6 - 32);
      uint64_t v7 = *(void *)v6;
      if (*(void *)v6)
      {
        if (v6 - 24 == v7)
        {
          void *v4 = v4 - 3;
          uint64_t result = (unsigned int *)(*(uint64_t (**)(void))(**(void **)v6 + 24))();
        }
        else
        {
          void *v4 = v7;
          *(void *)uint64_t v6 = 0;
        }
      }
      else
      {
        void *v4 = 0;
      }
      v4 += 5;
      v6 += 40;
      v5 -= 40;
    }
    while (v5);
    uint64_t v8 = v3[2];
    if (v8)
    {
      uint64_t v9 = *(void *)v3;
      uint64_t v10 = 40 * v8;
      uint64_t v11 = v9 - 32;
      do
      {
        uint64_t result = *(unsigned int **)(v11 + v10 + 24);
        if ((unsigned int *)(v11 + v10) == result)
        {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)(v11 + v10) + 32))(v11 + v10);
        }
        else if (result)
        {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 40))(result);
        }
        v10 -= 40;
      }
      while (v10);
    }
  }
  return result;
}

void sub_1CC813744()
{
}

void *sub_1CC813758()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F261F4A0;
  return result;
}

void sub_1CC813790(uint64_t a1, void *a2)
{
  *a2 = &unk_1F261F4A0;
}

uint64_t sub_1CC8137B8()
{
  return 1;
}

void sub_1CC8137C4()
{
}

void *sub_1CC8137D8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F261F4E8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC813820(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F261F4E8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC81384C(uint64_t a1, uint64_t *a2)
{
  v82[5] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  int v4 = *(unsigned __int8 *)(*a2 + 16);
  if (*a2 && v4 == 62)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(_DWORD *)(v3 + 20) & 0x7FFFFFF;
    uint64_t v7 = *(void **)(v3 - 32 * v6);
    uint64_t v80 = v7;
    uint64_t v8 = v5 + 8;
    if (*(unsigned char *)v5)
    {
      int v9 = 32;
    }
    else
    {
      int v9 = *(_DWORD *)(v5 + 16);
      if (!v9)
      {
        uint64_t v19 = 0;
        goto LABEL_23;
      }
      uint64_t v8 = *(void *)(v5 + 8);
    }
    uint64_t v10 = -v6;
    int v11 = v9 - 1;
    unsigned int v12 = v11 & ((v7 >> 4) ^ (v7 >> 9));
    uint64_t v13 = (void *)(v8 + 16 * v12);
    uint64_t v14 = (void *)*v13;
    if (v7 == (void *)*v13)
    {
LABEL_24:
      uint64_t v21 = v13[1];
      uint64_t v22 = v3 + 32 * v10;
      if (v7)
      {
        **(void **)(v22 + 16) = *(void *)(v22 + 8);
        uint64_t v23 = *(void *)(v22 + 8);
        if (v23) {
          *(void *)(v23 + 16) = *(void *)(v22 + 16);
        }
      }
      *(void *)uint64_t v22 = v21;
      if (v21)
      {
        uint64_t v26 = *(void *)(v21 + 8);
        uint64_t v24 = (void *)(v21 + 8);
        uint64_t v25 = v26;
        uint64_t v27 = v3 + 32 * v10;
        *(void *)(v27 + 8) = v26;
        if (v26) {
          *(void *)(v25 + 16) = v27 + 8;
        }
        *(void *)(v27 + 16) = v24;
        *uint64_t v24 = v22;
      }
      *(void *)uint64_t v3 = llvm::PointerType::get(*(llvm::PointerType **)(v3 + 64), (llvm::Type *)0x40);
      uint64_t v28 = *(void *)(a1 + 8);
      uint64_t v80 = (void *)v3;
      uint64_t v29 = v28 + 8;
      if (*(unsigned char *)v28)
      {
        int v30 = 32;
      }
      else
      {
        int v30 = *(_DWORD *)(v28 + 16);
        if (!v30)
        {
          int v39 = 0;
          goto LABEL_46;
        }
        uint64_t v29 = *(void *)(v28 + 8);
      }
      int v31 = v30 - 1;
      unsigned int v32 = (v30 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      int v33 = (void *)(v29 + 16 * v32);
      uint64_t v34 = *v33;
      if (v3 == *v33)
      {
LABEL_47:
        v33[1] = v3;
        return 1;
      }
      uint64_t v35 = 0;
      int v36 = 1;
      while (v34 != -4096)
      {
        if (v35) {
          BOOL v37 = 0;
        }
        else {
          BOOL v37 = v34 == -8192;
        }
        if (v37) {
          uint64_t v35 = v33;
        }
        unsigned int v38 = v32 + v36++;
        unsigned int v32 = v38 & v31;
        int v33 = (void *)(v29 + 16 * (v38 & v31));
        uint64_t v34 = *v33;
        if (v3 == *v33) {
          goto LABEL_47;
        }
      }
      if (v35) {
        int v39 = v35;
      }
      else {
        int v39 = v33;
      }
LABEL_46:
      int v33 = sub_1CC7EBF40(v28, (uint64_t)&v80, &v80, v39);
      *int v33 = v80;
      v33[1] = 0;
      goto LABEL_47;
    }
    uint64_t v15 = 0;
    int v16 = 1;
    while (v14 != (void *)-4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == (void *)-8192;
      }
      if (v17) {
        uint64_t v15 = v13;
      }
      unsigned int v18 = v12 + v16++;
      unsigned int v12 = v18 & v11;
      uint64_t v13 = (void *)(v8 + 16 * (v18 & v11));
      uint64_t v14 = (void *)*v13;
      if (v7 == (void *)*v13) {
        goto LABEL_24;
      }
    }
    if (v15) {
      uint64_t v19 = v15;
    }
    else {
      uint64_t v19 = v13;
    }
LABEL_23:
    uint64_t v13 = sub_1CC7EBF40(v5, (uint64_t)&v80, &v80, v19);
    void *v13 = v80;
    v13[1] = 0;
    uint64_t v20 = *(_DWORD *)(v3 + 20) & 0x7FFFFFF;
    uint64_t v10 = -v20;
    uint64_t v7 = *(void **)(v3 - 32 * v20);
    goto LABEL_24;
  }
  if (v4 != 62)
  {
    if (v4 == 5)
    {
      if (*(_WORD *)(v3 + 18) != 34) {
        uint64_t v3 = 0;
      }
    }
    else
    {
      uint64_t v3 = 0;
    }
  }
  uint64_t v40 = *(void *)(a1 + 8);
  int v41 = *(_DWORD *)(v3 + 20);
  if ((v41 & 0x40000000) != 0) {
    int v42 = *(void ***)(v3 - 8);
  }
  else {
    int v42 = (void **)(v3 - 32 * (v41 & 0x7FFFFFF));
  }
  uint64_t v43 = *v42;
  uint64_t v80 = *v42;
  uint64_t v44 = v40 + 8;
  if (*(unsigned char *)v40)
  {
    int v45 = 32;
  }
  else
  {
    int v45 = *(_DWORD *)(v40 + 16);
    if (!v45)
    {
      unsigned int v56 = 0;
      goto LABEL_68;
    }
    uint64_t v44 = *(void *)(v40 + 8);
  }
  int v46 = v45 - 1;
  unsigned int v47 = (v45 - 1) & ((v43 >> 4) ^ (v43 >> 9));
  BOOL v48 = (void *)(v44 + 16 * v47);
  unsigned int v49 = (void *)*v48;
  if (v43 != (void *)*v48)
  {
    uint64_t v50 = 0;
    int v51 = 1;
    while (v49 != (void *)-4096)
    {
      if (v50) {
        BOOL v52 = 0;
      }
      else {
        BOOL v52 = v49 == (void *)-8192;
      }
      if (v52) {
        uint64_t v50 = v48;
      }
      unsigned int v53 = v47 + v51++;
      unsigned int v47 = v53 & v46;
      BOOL v48 = (void *)(v44 + 16 * (v53 & v46));
      unsigned int v49 = (void *)*v48;
      if (v43 == (void *)*v48) {
        goto LABEL_63;
      }
    }
    if (v50) {
      unsigned int v56 = v50;
    }
    else {
      unsigned int v56 = v48;
    }
LABEL_68:
    BOOL v48 = sub_1CC7EBF40(v40, (uint64_t)&v80, &v80, v56);
    *BOOL v48 = v80;
    v48[1] = 0;
    int v41 = *(_DWORD *)(v3 + 20);
    if ((v41 & 0x40000000) != 0) {
      goto LABEL_69;
    }
LABEL_64:
    uint64_t v54 = v41 & 0x7FFFFFF;
    uint64_t v55 = v3 - 32 * v54;
    goto LABEL_70;
  }
LABEL_63:
  if ((v41 & 0x40000000) == 0) {
    goto LABEL_64;
  }
LABEL_69:
  uint64_t v55 = *(void *)(v3 - 8);
  uint64_t v54 = v41 & 0x7FFFFFF;
LABEL_70:
  unsigned int v57 = (uint64_t *)v48[1];
  uint64_t v80 = v82;
  uint64_t v81 = 0x500000000;
  unint64_t v58 = 32 * v54 - 32;
  if (v58 >= 0xA1) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v59 = v82;
  if (v54 != 1)
  {
    uint64_t v60 = (uint64_t *)(v55 + 32);
    uint64_t v61 = v82;
    uint64_t v62 = 32 * v54 - 32;
    do
    {
      uint64_t v63 = *v60;
      v60 += 4;
      *v61++ = v63;
      v62 -= 32;
    }
    while (v62);
    uint64_t v59 = v80;
  }
  LODWORD(v81) = v58 >> 5;
  uint64_t v64 = 24;
  if (*(unsigned char *)(v3 + 16) == 62) {
    uint64_t v64 = 64;
  }
  uint64_t ElementPtr = llvm::ConstantExpr::getGetElementPtr(*(void *)(v3 + v64), v57, (uint64_t)v59, (v58 >> 5), (*(unsigned char *)(v3 + 17) & 2) != 0, 0, 0);
  uint64_t v66 = *(void *)(a1 + 8);
  uint64_t v79 = v3;
  uint64_t v67 = v66 + 8;
  if (*(unsigned char *)v66)
  {
    int v68 = 32;
  }
  else
  {
    int v68 = *(_DWORD *)(v66 + 16);
    if (!v68)
    {
      size_t v77 = 0;
      goto LABEL_92;
    }
    uint64_t v67 = *(void *)(v66 + 8);
  }
  int v69 = v68 - 1;
  unsigned int v70 = (v68 - 1) & ((v3 >> 4) ^ (v3 >> 9));
  unsigned int v71 = (void *)(v67 + 16 * v70);
  uint64_t v72 = *v71;
  if (v3 == *v71) {
    goto LABEL_93;
  }
  unsigned int v73 = 0;
  int v74 = 1;
  while (v72 != -4096)
  {
    if (v73) {
      BOOL v75 = 0;
    }
    else {
      BOOL v75 = v72 == -8192;
    }
    if (v75) {
      unsigned int v73 = v71;
    }
    unsigned int v76 = v70 + v74++;
    unsigned int v70 = v76 & v69;
    unsigned int v71 = (void *)(v67 + 16 * (v76 & v69));
    uint64_t v72 = *v71;
    if (v3 == *v71) {
      goto LABEL_93;
    }
  }
  if (v73) {
    size_t v77 = v73;
  }
  else {
    size_t v77 = v71;
  }
LABEL_92:
  unsigned int v71 = sub_1CC7EBF40(v66, (uint64_t)&v79, &v79, v77);
  *unsigned int v71 = v79;
  v71[1] = 0;
LABEL_93:
  v71[1] = ElementPtr;
  if (v80 != v82) {
    free(v80);
  }
  return 1;
}

void sub_1CC813D60()
{
}

void *sub_1CC813D74(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F261F530;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC813DBC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F261F530;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC813DE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = (llvm::Constant *)llvm::PointerType::get(**(llvm::PointerType ***)(*(void *)*a2 + 16), (llvm::Type *)0x40);
  if (*(unsigned char *)(v3 + 16) != 77)
  {
    uint64_t v18 = *(void *)(a1 + 8);
    int v19 = *(_DWORD *)(v3 + 20);
    if ((v19 & 0x40000000) != 0) {
      uint64_t v20 = *(uint64_t **)(v3 - 8);
    }
    else {
      uint64_t v20 = (uint64_t *)(v3 - 32 * (v19 & 0x7FFFFFF));
    }
    uint64_t v39 = *v20;
    uint64_t v65 = *v20;
    uint64_t v40 = v18 + 8;
    if (*(unsigned char *)v18)
    {
      int v41 = 32;
    }
    else
    {
      int v41 = *(_DWORD *)(v18 + 16);
      if (!v41)
      {
        uint64_t v50 = 0;
        goto LABEL_60;
      }
      uint64_t v40 = *(void *)(v18 + 8);
    }
    int v42 = v41 - 1;
    unsigned int v43 = (v41 - 1) & ((v39 >> 4) ^ (v39 >> 9));
    uint64_t v44 = (void *)(v40 + 16 * v43);
    uint64_t v45 = *v44;
    if (v39 == *v44) {
      goto LABEL_61;
    }
    int v46 = 0;
    int v47 = 1;
    while (v45 != -4096)
    {
      if (v46) {
        BOOL v48 = 0;
      }
      else {
        BOOL v48 = v45 == -8192;
      }
      if (v48) {
        int v46 = v44;
      }
      unsigned int v49 = v43 + v47++;
      unsigned int v43 = v49 & v42;
      uint64_t v44 = (void *)(v40 + 16 * (v49 & v42));
      uint64_t v45 = *v44;
      if (v39 == *v44) {
        goto LABEL_61;
      }
    }
    if (v46) {
      uint64_t v50 = v46;
    }
    else {
      uint64_t v50 = v44;
    }
LABEL_60:
    uint64_t v44 = sub_1CC7EBF40(v18, (uint64_t)&v65, &v65, v50);
    *uint64_t v44 = v65;
    v44[1] = 0;
LABEL_61:
    int v51 = (llvm::detail::IEEEFloat *)v44[1];
    if (*(llvm::Constant **)v51 != v4) {
      int v51 = sub_1CC56C0C0((llvm *)0x31, v51, v4, 0);
    }
    uint64_t v52 = *(void *)(a1 + 8);
    uint64_t v65 = v3;
    uint64_t v53 = v52 + 8;
    if (*(unsigned char *)v52)
    {
      int v54 = 32;
    }
    else
    {
      int v54 = *(_DWORD *)(v52 + 16);
      if (!v54)
      {
        uint64_t v63 = 0;
        goto LABEL_78;
      }
      uint64_t v53 = *(void *)(v52 + 8);
    }
    int v55 = v54 - 1;
    unsigned int v56 = (v54 - 1) & ((v3 >> 4) ^ (v3 >> 9));
    unsigned int v57 = (void *)(v53 + 16 * v56);
    uint64_t v58 = *v57;
    if (v3 == *v57)
    {
LABEL_79:
      v57[1] = v51;
      return 1;
    }
    uint64_t v59 = 0;
    int v60 = 1;
    while (v58 != -4096)
    {
      if (v59) {
        BOOL v61 = 0;
      }
      else {
        BOOL v61 = v58 == -8192;
      }
      if (v61) {
        uint64_t v59 = v57;
      }
      unsigned int v62 = v56 + v60++;
      unsigned int v56 = v62 & v55;
      unsigned int v57 = (void *)(v53 + 16 * (v62 & v55));
      uint64_t v58 = *v57;
      if (v3 == *v57) {
        goto LABEL_79;
      }
    }
    if (v59) {
      uint64_t v63 = v59;
    }
    else {
      uint64_t v63 = v57;
    }
LABEL_78:
    unsigned int v57 = sub_1CC7EBF40(v52, (uint64_t)&v65, &v65, v63);
    *unsigned int v57 = v65;
    v57[1] = 0;
    goto LABEL_79;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = (uint64_t *)(v3 - 32);
  uint64_t v6 = *(void *)(v3 - 32);
  uint64_t v65 = v6;
  uint64_t v8 = v5 + 8;
  if (*(unsigned char *)v5)
  {
    int v9 = 32;
  }
  else
  {
    int v9 = *(_DWORD *)(v5 + 16);
    if (!v9)
    {
      uint64_t v21 = 0;
LABEL_19:
      unsigned int v12 = sub_1CC7EBF40(v5, (uint64_t)&v65, &v65, v21);
      void *v12 = v65;
      v12[1] = 0;
      uint64_t v6 = *v7;
      goto LABEL_20;
    }
    uint64_t v8 = *(void *)(v5 + 8);
  }
  int v10 = v9 - 1;
  unsigned int v11 = (v9 - 1) & ((v6 >> 4) ^ (v6 >> 9));
  unsigned int v12 = (void *)(v8 + 16 * v11);
  uint64_t v13 = *v12;
  if (v6 != *v12)
  {
    uint64_t v14 = 0;
    int v15 = 1;
    while (v13 != -4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v13 == -8192;
      }
      if (v16) {
        uint64_t v14 = v12;
      }
      unsigned int v17 = v11 + v15++;
      unsigned int v11 = v17 & v10;
      unsigned int v12 = (void *)(v8 + 16 * (v17 & v10));
      uint64_t v13 = *v12;
      if (v6 == *v12) {
        goto LABEL_20;
      }
    }
    if (v14) {
      uint64_t v21 = v14;
    }
    else {
      uint64_t v21 = v12;
    }
    goto LABEL_19;
  }
LABEL_20:
  uint64_t v22 = v12[1];
  if (v6)
  {
    **(void **)(v3 - 16) = *(void *)(v3 - 24);
    uint64_t v23 = *(void *)(v3 - 24);
    if (v23) {
      *(void *)(v23 + 16) = *(void *)(v3 - 16);
    }
  }
  uint64_t *v7 = v22;
  if (v22)
  {
    uint64_t v26 = *(void *)(v22 + 8);
    uint64_t v24 = (uint64_t **)(v22 + 8);
    uint64_t v25 = v26;
    *(void *)(v3 - 24) = v26;
    if (v26) {
      *(void *)(v25 + 16) = v3 - 24;
    }
    *(void *)(v3 - 16) = v24;
    *uint64_t v24 = v7;
  }
  *(void *)uint64_t v3 = v4;
  uint64_t v27 = *(void *)(a1 + 8);
  uint64_t v65 = v3;
  uint64_t v28 = v27 + 8;
  if (*(unsigned char *)v27)
  {
    int v29 = 32;
  }
  else
  {
    int v29 = *(_DWORD *)(v27 + 16);
    if (!v29)
    {
      unsigned int v38 = 0;
LABEL_42:
      unsigned int v32 = sub_1CC7EBF40(v27, (uint64_t)&v65, &v65, v38);
      *unsigned int v32 = v65;
      v32[1] = 0;
      goto LABEL_43;
    }
    uint64_t v28 = *(void *)(v27 + 8);
  }
  int v30 = v29 - 1;
  unsigned int v31 = (v29 - 1) & ((v3 >> 4) ^ (v3 >> 9));
  unsigned int v32 = (void *)(v28 + 16 * v31);
  uint64_t v33 = *v32;
  if (v3 != *v32)
  {
    uint64_t v34 = 0;
    int v35 = 1;
    while (v33 != -4096)
    {
      if (v34) {
        BOOL v36 = 0;
      }
      else {
        BOOL v36 = v33 == -8192;
      }
      if (v36) {
        uint64_t v34 = v32;
      }
      unsigned int v37 = v31 + v35++;
      unsigned int v31 = v37 & v30;
      unsigned int v32 = (void *)(v28 + 16 * (v37 & v30));
      uint64_t v33 = *v32;
      if (v3 == *v32) {
        goto LABEL_43;
      }
    }
    if (v34) {
      unsigned int v38 = v34;
    }
    else {
      unsigned int v38 = v32;
    }
    goto LABEL_42;
  }
LABEL_43:
  v32[1] = v3;
  return 1;
}

void sub_1CC8141AC()
{
}

__n128 sub_1CC8141C0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F261F578;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CC814214(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F261F578;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CC81424C(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a1[1];
  uint64_t v6 = (uint64_t *)(*a2 - 32);
  uint64_t v5 = *v6;
  uint64_t v24 = *v6;
  uint64_t v7 = v4 + 8;
  if (*(unsigned char *)v4)
  {
    int v8 = 32;
  }
  else
  {
    int v8 = *(_DWORD *)(v4 + 16);
    if (!v8)
    {
      unsigned int v17 = 0;
LABEL_16:
      unsigned int v11 = sub_1CC7EBF40(v4, (uint64_t)&v24, &v24, v17);
      *unsigned int v11 = v24;
      v11[1] = 0;
      uint64_t v5 = *v6;
      goto LABEL_17;
    }
    uint64_t v7 = *(void *)(v4 + 8);
  }
  int v9 = v8 - 1;
  unsigned int v10 = (v8 - 1) & ((v5 >> 4) ^ (v5 >> 9));
  unsigned int v11 = (void *)(v7 + 16 * v10);
  uint64_t v12 = *v11;
  if (v5 != *v11)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        uint64_t v13 = v11;
      }
      unsigned int v16 = v10 + v14++;
      unsigned int v10 = v16 & v9;
      unsigned int v11 = (void *)(v7 + 16 * (v16 & v9));
      uint64_t v12 = *v11;
      if (v5 == *v11) {
        goto LABEL_17;
      }
    }
    if (v13) {
      unsigned int v17 = v13;
    }
    else {
      unsigned int v17 = v11;
    }
    goto LABEL_16;
  }
LABEL_17:
  uint64_t v18 = v11[1];
  if (v5)
  {
    **(void **)(v3 - 16) = *(void *)(v3 - 24);
    uint64_t v19 = *(void *)(v3 - 24);
    if (v19) {
      *(void *)(v19 + 16) = *(void *)(v3 - 16);
    }
  }
  uint64_t *v6 = v18;
  if (v18)
  {
    uint64_t v22 = *(void *)(v18 + 8);
    uint64_t v20 = (uint64_t **)(v18 + 8);
    uint64_t v21 = v22;
    *(void *)(v3 - 24) = v22;
    if (v22) {
      *(void *)(v21 + 16) = v3 - 24;
    }
    *(void *)(v3 - 16) = v20;
    *uint64_t v20 = v6;
  }
  sub_1CC814390(a1[2], v3, a1[3]);
  return 0;
}

unsigned __int8 *sub_1CC814390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v84[1] = *MEMORY[0x1E4F143B8];
  if (!byte_1EBCDC120
    || **(unsigned __int8 **)(*(void *)a3 - 8 * *(unsigned int *)(*(void *)a3 + 8) + 8) - 4 < 0x1F)
  {
    return (unsigned __int8 *)a2;
  }
  int v8 = *(llvm::Type **)a2;
  unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)a2);
  if (v9 == 1)
  {
    int v8 = *(llvm::Type **)a2;
  }
  if (*((unsigned char *)v8 + 8) != 15) {
    int v8 = 0;
  }
  if (v8)
  {
    unsigned int v11 = *((_DWORD *)v8 + 2);
    if (v11 < 0x100) {
      goto LABEL_19;
    }
    unsigned int v12 = v11 >> 8;
    uint64_t v13 = *(unsigned int *)(a1 + 512);
    uint64_t v14 = *(void *)(a1 + 504);
    if (v13)
    {
      uint64_t v14 = *(void *)(a1 + 504);
      unint64_t v15 = *(unsigned int *)(a1 + 512);
      do
      {
        unint64_t v16 = v15 >> 1;
        uint64_t v17 = v14 + 16 * (v15 >> 1);
        unsigned int v18 = *(_DWORD *)(v17 + 8);
        uint64_t v19 = v17 + 16;
        v15 += ~(v15 >> 1);
        if (v18 < v12) {
          uint64_t v14 = v19;
        }
        else {
          unint64_t v15 = v16;
        }
      }
      while (v15);
    }
    if (v14 == *(void *)(a1 + 504) + 16 * v13 || *(_DWORD *)(v14 + 8) != v12) {
LABEL_19:
    }
      uint64_t v14 = *(void *)(a1 + 504);
    unint64_t PrimitiveSizeInBits = *(unsigned int *)(v14 + 4);
  }
  uint64_t v20 = *(llvm::ConstantInt **)a1;
  unsigned int v66 = 1;
  uint64_t v65 = 0;
  unsigned int v64 = 1;
  uint64_t v63 = 0;
  uint64_t v21 = *(void *)(*(void *)(*(void *)a3 - 8 * *(unsigned int *)(*(void *)a3 + 8) + 8) + 128);
  uint64_t v22 = (void *)(v21 + 24);
  if (*(_DWORD *)(v21 + 32) >= 0x41u) {
    uint64_t v22 = (void *)*v22;
  }
  if (*v22 == 43 && PrimitiveSizeInBits >= 0x11)
  {
    if (PrimitiveSizeInBits > 0x40) {
      operator new[]();
    }
    uint64_t v65 = 0;
    unsigned int v66 = PrimitiveSizeInBits;
    uint64_t v63 = (unsigned __int16)(0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits);
    unsigned int v64 = PrimitiveSizeInBits;
    llvm::APInt::operator+=((uint64_t)&v63, 1uLL);
    uint64_t v25 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&v65, v24);
    uint64_t v27 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&v63, v26);
    int v69 = (void *)llvm::ValueAsMetadata::get(v25, v28);
    uint64_t v70 = llvm::ValueAsMetadata::get(v27, v29);
    Impl = llvm::MDTuple::getImpl((uint64_t)v20, &v69, 2, 0, 1);
    unsigned int v31 = *(llvm::Type **)a2;
    if (v31 == (llvm::Type *)llvm::IntegerType::get(v20, (llvm::LLVMContext *)PrimitiveSizeInBits))
    {
      unsigned int v43 = (llvm::Instruction *)a2;
      uint64_t v5 = (unsigned __int8 *)a2;
LABEL_63:
      llvm::Instruction::setMetadata(v43, 4, Impl);
      if (v64 >= 0x41 && v63) {
        MEMORY[0x1D25D9CB0](v63, 0x1000C8000313F17);
      }
      goto LABEL_66;
    }
    uint64_t v32 = 0;
    int v69 = v71;
    uint64_t v70 = 0x200000000;
    int v74 = v20;
    BOOL v75 = &v83;
    unsigned int v76 = v84;
    uint64_t v77 = 0;
    int v78 = 0;
    __int16 v79 = 512;
    char v80 = 7;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    int v83 = &unk_1F2616E88;
    v84[0] = &unk_1F2617008;
    uint64_t v33 = *(unsigned __int8 **)(a2 + 48);
    uint64_t v72 = *(void *)(a2 + 40);
    uint64_t v73 = a2 + 24;
    v61[0] = v33;
    if (v33)
    {
      llvm::MetadataTracking::track((uint64_t)v61, v33, 2);
      uint64_t v32 = v61[0];
    }
    sub_1CB8461A4((uint64_t)&v69, 0, v32);
    if (v61[0])
    {
      int v55 = *(unsigned __int8 *)v61[0];
      if ((v55 - 4) > 0x1E)
      {
        if ((v55 - 3) >= 0xFFFFFFFE) {
          uint64_t v58 = v61[0];
        }
        else {
          uint64_t v58 = 0;
        }
        if ((v55 - 3) < 0xFFFFFFFE)
        {
          if (v55 == 3) {
            *(void *)(v61[0] + 8) = 0;
          }
          goto LABEL_33;
        }
        unint64_t v57 = v58 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v61[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v61[0] + 12)) {
          goto LABEL_33;
        }
        uint64_t v56 = *(void *)(v61[0] + 16);
        if ((v56 & 4) == 0) {
          goto LABEL_33;
        }
        unint64_t v57 = v56 & 0xFFFFFFFFFFFFFFF8;
        if (!v57) {
          goto LABEL_33;
        }
      }
      v67[0] = (const char *)v61;
      sub_1CC5FA668(v57 + 16, v67);
    }
LABEL_33:
    uint64_t v34 = *(llvm::CastInst **)(a2 - 32);
    int v35 = (llvm::Type *)(*(_DWORD *)(*(void *)v34 + 8) >> 8);
    BOOL v36 = (llvm::PointerType *)llvm::IntegerType::get(v20, (llvm::LLVMContext *)PrimitiveSizeInBits);
    unsigned int v37 = (llvm::Value *)llvm::PointerType::get(v36, v35);
    __int16 v68 = 257;
    uint64_t v39 = sub_1CC277FE0((uint64_t)&v69, v34, v37, (uint64_t)v67, v38);
    uint64_t v40 = (llvm::Type *)llvm::IntegerType::get(v20, (llvm::LLVMContext *)PrimitiveSizeInBits);
    __int16 v62 = 257;
    char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v72 + 56) + 40) + 272), v40, 1);
    int v42 = operator new(0x60uLL);
    v42[13] = v42[13] & 0x38000000 | 1;
    unsigned int v43 = (llvm::Instruction *)(v42 + 8);
    *(void *)int v42 = 0;
    *((void *)v42 + 1) = 0;
    *((void *)v42 + 2) = 0;
    *((void *)v42 + 3) = v42 + 8;
    __int16 v68 = 257;
    llvm::LoadInst::LoadInst((llvm::Value *)(v42 + 8), (uint64_t)v40, (uint64_t)v39, v67, 0, Alignment, 0);
    (*(void (**)(void *, _DWORD *, void *, uint64_t, uint64_t))(*v76 + 16))(v76, v42 + 8, v61, v72, v73);
    if (v70)
    {
      uint64_t v53 = (llvm::MDNode **)v69;
      int v54 = (llvm::MDNode **)((char *)v69 + 16 * v70);
      do
      {
        llvm::Instruction::setMetadata(v43, *(_DWORD *)v53, v53[1]);
        v53 += 2;
      }
      while (v53 != v54);
    }
    *((_WORD *)v42 + 25) = *((_WORD *)v42 + 25) & 0xFF81 | (2
                                                          * __clz(1 << ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1))) ^ 0x7E;
    if (v8)
    {
      __int16 v62 = 257;
      uint64_t v5 = (unsigned __int8 *)(v42 + 8);
      if (*(llvm::Type **)v43 != v8)
      {
        if (*((unsigned __int8 *)v42 + 48) <= 0x14u)
        {
          uint64_t v5 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, llvm::Type *))*v75
                                   + 28))(v75, 48, v43, v8);
          if (v5) {
            BOOL v49 = v5[16] >= 0x1Cu;
          }
          else {
            BOOL v49 = 0;
          }
          if (v49)
          {
            (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v76 + 16))(v76, v5, v61, v72, v73);
            if (v70)
            {
              uint64_t v50 = (llvm::MDNode **)v69;
              int v51 = (llvm::MDNode **)((char *)v69 + 16 * v70);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v50, v50[1]);
                v50 += 2;
              }
              while (v50 != v51);
            }
          }
        }
        else
        {
          __int16 v68 = 257;
          uint64_t v5 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v43, (uint64_t)v8, v67, 0);
          (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v76 + 16))(v76, v5, v61, v72, v73);
          if (v70)
          {
            uint64_t v44 = (llvm::MDNode **)v69;
            uint64_t v45 = (llvm::MDNode **)((char *)v69 + 16 * v70);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v44, v44[1]);
              v44 += 2;
            }
            while (v44 != v45);
          }
        }
      }
    }
    else
    {
      int v46 = *(llvm::Type **)a2;
      __int16 v62 = 257;
      uint64_t v5 = (unsigned __int8 *)(v42 + 8);
      if (*(llvm::Type **)v43 != v46)
      {
        if (*((unsigned __int8 *)v42 + 48) <= 0x14u)
        {
          uint64_t v5 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, llvm::Type *))*v75
                                   + 28))(v75, 49, v43, v46);
          if (v5) {
            BOOL v52 = v5[16] >= 0x1Cu;
          }
          else {
            BOOL v52 = 0;
          }
          if (v52)
          {
            (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v76 + 16))(v76, v5, v61, v72, v73);
            if (v70)
            {
              uint64_t v59 = (llvm::MDNode **)v69;
              int v60 = (llvm::MDNode **)((char *)v69 + 16 * v70);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v59, v59[1]);
                v59 += 2;
              }
              while (v59 != v60);
            }
          }
        }
        else
        {
          __int16 v68 = 257;
          uint64_t v5 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v43, (uint64_t)v46, v67, 0);
          (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v76 + 16))(v76, v5, v61, v72, v73);
          if (v70)
          {
            int v47 = (llvm::MDNode **)v69;
            BOOL v48 = (llvm::MDNode **)((char *)v69 + 16 * v70);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v47, v47[1]);
              v47 += 2;
            }
            while (v47 != v48);
          }
        }
      }
    }
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)a2, (llvm::Value *)v5, (llvm::Value *)1);
    if (v69 != v71) {
      free(v69);
    }
    goto LABEL_63;
  }
  uint64_t v5 = (unsigned __int8 *)a2;
LABEL_66:
  if (v66 >= 0x41 && v65) {
    MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
  }
  return v5;
}

void sub_1CC814C58()
{
}

void *sub_1CC814C6C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F261F5C0;
  return result;
}

void sub_1CC814CA4(uint64_t a1, void *a2)
{
  *a2 = &unk_1F261F5C0;
}

uint64_t sub_1CC814CCC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = *(unsigned __int8 *)(*a2 + 16);
  if ((v3 == 75 || v3 == 5 && *(_WORD *)(v2 + 18) == 47) && !*(void *)(v2 + 8))
  {
    int v4 = *(_DWORD *)(v2 + 20);
    if ((v4 & 0x40000000) != 0)
    {
      uint64_t v6 = *(void *)(v2 - 8);
      uint64_t v5 = v4 & 0x7FFFFFF;
      if (!v5) {
        return 0;
      }
    }
    else
    {
      uint64_t v5 = v4 & 0x7FFFFFF;
      uint64_t v6 = v2 - 32 * v5;
      if (!v5) {
        return 0;
      }
    }
    uint64_t v7 = 32 * v5;
    int v8 = (void **)(v6 + 16);
    do
    {
      if (*(v8 - 2))
      {
        **int v8 = *(v8 - 1);
        uint64_t v9 = (uint64_t)*(v8 - 1);
        if (v9) {
          *(void *)(v9 + 16) = *v8;
        }
      }
      *(v8 - 2) = 0;
      v8 += 4;
      v7 -= 32;
    }
    while (v7);
  }
  return 0;
}

void *sub_1CC814D5C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = 0;
  __n128 result = (void *)sub_1CC814E18(a1, a2, &v14);
  uint64_t v7 = v14;
  if (result)
  {
    uint64_t v12 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v13 = 4;
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 8);
      uint64_t v13 = *(unsigned int *)(a1 + 16);
    }
    char v11 = 0;
    uint64_t v10 = v12 + 8 * v13;
  }
  else
  {
    __n128 result = sub_1CC814EC8((_DWORD *)a1, (uint64_t)a2, a2, v14);
    uint64_t v7 = result;
    *__n128 result = *a2;
    uint64_t v8 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v9 = 4;
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = *(unsigned int *)(a1 + 16);
    }
    uint64_t v10 = v8 + 8 * v9;
    char v11 = 1;
  }
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v10;
  *(unsigned char *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_1CC814E18(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_8;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void *sub_1CC814EC8(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v4 = *a1 >> 1;
  if (*a1) {
    unsigned int v5 = 4;
  }
  else {
    unsigned int v5 = a1[4];
  }
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - a1[1] > v5 >> 3)
  {
    goto LABEL_5;
  }
  uint64_t v8 = (uint64_t)a1;
  sub_1CD642920((uint64_t)a1, v5);
  uint64_t v9 = 0;
  sub_1CC814E18(v8, a3, &v9);
  a1 = (_DWORD *)v8;
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

llvm::Instruction *sub_1CC814F88(unsigned int *a1, uint64_t a2)
{
  v78[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)(a2 + 40) + 56);
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a1 + 2) + 24))(*((void *)a1 + 2), v4);
  uint64_t v6 = ***((void ***)a1 + 1);
  uint64_t v63 = v65;
  uint64_t v64 = 0x200000000;
  uint64_t v68 = v6;
  int v69 = &v77;
  uint64_t v70 = v78;
  uint64_t v71 = 0;
  int v72 = 0;
  __int16 v73 = 512;
  char v74 = 7;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = &unk_1F2616E88;
  v78[0] = &unk_1F2617008;
  int v7 = *(unsigned __int8 *)(a2 + 16);
  if (v7 == 83)
  {
    uint64_t v8 = *(void *)(v4 + 80);
    if (v8) {
      uint64_t v9 = (llvm::BasicBlock *)(v8 - 24);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = *(llvm::BasicBlock **)(a2 + 40);
  }
  uint64_t v10 = *((void *)a1 + 3);
  uint64_t v59 = 0;
  if (sub_1CBF74894(*(void *)v10, *(_DWORD *)(v10 + 16), (uint64_t)v9, &v59)) {
    char v11 = v59;
  }
  else {
    char v11 = (const char *)(*(void *)v10 + 16 * *(unsigned int *)(v10 + 16));
  }
  if (v11 != (const char *)(**((void **)a1 + 3) + 16 * *(unsigned int *)(*((void *)a1 + 3) + 16)))
  {
    BOOL v12 = (uint64_t *)*((void *)v11 + 1);
    goto LABEL_25;
  }
  FirstNonPHIOrDbgOrLifetime = llvm::BasicBlock::getFirstNonPHIOrDbgOrLifetime(v9, 1);
  uint64_t v66 = *((void *)FirstNonPHIOrDbgOrLifetime + 5);
  uint64_t v67 = FirstNonPHIOrDbgOrLifetime + 24;
  uint64_t v14 = (unsigned __int8 *)*((void *)FirstNonPHIOrDbgOrLifetime + 6);
  v57[0] = v14;
  if (v14)
  {
    llvm::MetadataTracking::track((uint64_t)v57, v14, 2);
    uint64_t v15 = v57[0];
  }
  else
  {
    uint64_t v15 = 0;
  }
  sub_1CB8461A4((uint64_t)&v63, 0, v15);
  if (v57[0])
  {
    int v50 = *(unsigned __int8 *)v57[0];
    if ((v50 - 4) > 0x1E)
    {
      if ((v50 - 3) >= 0xFFFFFFFE) {
        uint64_t v54 = v57[0];
      }
      else {
        uint64_t v54 = 0;
      }
      if ((v50 - 3) < 0xFFFFFFFE)
      {
        if (v50 == 3) {
          *(void *)(v57[0] + 8) = 0;
        }
        goto LABEL_14;
      }
      unint64_t v52 = v54 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v57[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v57[0] + 12)) {
        goto LABEL_14;
      }
      uint64_t v51 = *(void *)(v57[0] + 16);
      if ((v51 & 4) == 0) {
        goto LABEL_14;
      }
      unint64_t v52 = v51 & 0xFFFFFFFFFFFFFFF8;
      if (!v52) {
        goto LABEL_14;
      }
    }
    uint64_t v59 = (char *)v57;
    sub_1CC5FA668(v52 + 16, &v59);
  }
LABEL_14:
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 176))(v5, 25);
  (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(void *)v5 + 128))(&v59, v5, 25);
  uint64_t v16 = *(void *)(*(uint64_t (**)(char *))(*(void *)v59 + 32))(v59);
  uint64_t v17 = v59;
  uint64_t v59 = 0;
  if (v17) {
    (*(void (**)(const char *))(*(void *)v17 + 8))(v17);
  }
  unsigned int v18 = *(llvm::Type **)(v16 + 24);
  __int16 v58 = 257;
  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v66 + 56) + 40) + 272), v18, 1);
  uint64_t v20 = operator new(0x60uLL);
  v20[13] = v20[13] & 0x38000000 | 1;
  uint64_t v21 = (llvm::Instruction *)(v20 + 8);
  *(void *)uint64_t v20 = 0;
  *((void *)v20 + 1) = 0;
  *((void *)v20 + 2) = 0;
  *((void *)v20 + 3) = v20 + 8;
  __int16 v61 = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v20 + 8), (uint64_t)v18, v16, (const char **)&v59, 0, Alignment, 0);
  (*(void (**)(void *, llvm::Instruction *, void *, uint64_t, char *))(*v70 + 16))(v70, v21, v57, v66, v67);
  if (v64)
  {
    BOOL v48 = (llvm::MDNode **)v63;
    BOOL v49 = (llvm::MDNode **)((char *)v63 + 16 * v64);
    do
    {
      llvm::Instruction::setMetadata(v21, *(_DWORD *)v48, v48[1]);
      v48 += 2;
    }
    while (v48 != v49);
  }
  BOOL v12 = (uint64_t *)sub_1CC814390(*((void *)a1 + 4), (uint64_t)v21, *((void *)a1 + 5));
  uint64_t v22 = *((void *)a1 + 3);
  uint64_t v59 = 0;
  if ((sub_1CBF74894(*(void *)v22, *(_DWORD *)(v22 + 16), (uint64_t)v9, &v59) & 1) == 0)
  {
    unsigned int v23 = *(_DWORD *)(v22 + 16);
    int v24 = *(_DWORD *)(v22 + 8);
    if (4 * v24 + 4 < 3 * v23)
    {
      if (v23 + ~v24 - *(_DWORD *)(v22 + 12) > v23 >> 3) {
        goto LABEL_22;
      }
    }
    else
    {
      v23 *= 2;
    }
    sub_1CC8157CC(v22, v23);
    uint64_t v59 = 0;
    sub_1CBF74894(*(void *)v22, *(_DWORD *)(v22 + 16), (uint64_t)v9, &v59);
LABEL_22:
    uint64_t v25 = v59;
    ++*(_DWORD *)(v22 + 8);
    if (*(void *)v25 != -4096) {
      --*(_DWORD *)(v22 + 12);
    }
    *(void *)uint64_t v25 = v9;
    *((void *)v25 + 1) = v12;
  }
LABEL_25:
  if (v7 != 83)
  {
    int v30 = *(unsigned __int8 **)(a2 + 48);
    uint64_t v66 = *(void *)(a2 + 40);
    uint64_t v67 = (char *)(a2 + 24);
    v57[0] = v30;
    if (!v30)
    {
      uint64_t v26 = 0;
      goto LABEL_35;
    }
    goto LABEL_52;
  }
  uint64_t v26 = 0;
  uint64_t v27 = v12 + 3;
  if (!v12) {
    uint64_t v27 = 0;
  }
  uint64_t v28 = v27[1];
  if (v28) {
    uint64_t v29 = v28 - 24;
  }
  else {
    uint64_t v29 = 0;
  }
  uint64_t v66 = *(void *)(v29 + 40);
  uint64_t v67 = (char *)(v29 + 24);
  int v30 = *(unsigned __int8 **)(v29 + 48);
  v57[0] = v30;
  if (v30)
  {
LABEL_52:
    llvm::MetadataTracking::track((uint64_t)v57, v30, 2);
    uint64_t v26 = v57[0];
  }
LABEL_35:
  sub_1CB8461A4((uint64_t)&v63, 0, v26);
  if (!v57[0]) {
    goto LABEL_36;
  }
  int v45 = *(unsigned __int8 *)v57[0];
  if ((v45 - 4) > 0x1E)
  {
    if ((v45 - 3) >= 0xFFFFFFFE) {
      uint64_t v53 = v57[0];
    }
    else {
      uint64_t v53 = 0;
    }
    if ((v45 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v47 = v53 + 8;
LABEL_74:
      uint64_t v59 = (char *)v57;
      sub_1CC5FA668(v47 + 16, &v59);
      goto LABEL_36;
    }
    if (v45 == 3) {
      *(void *)(v57[0] + 8) = 0;
    }
  }
  else if ((*(unsigned char *)(v57[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v57[0] + 12))
  {
    uint64_t v46 = *(void *)(v57[0] + 16);
    if ((v46 & 4) != 0)
    {
      unint64_t v47 = v46 & 0xFFFFFFFFFFFFFFF8;
      if (v47) {
        goto LABEL_74;
      }
    }
  }
LABEL_36:
  uint64_t v32 = *a1;
  uint64_t v33 = *(llvm::ConstantInt **)(*(void *)v68 + 1984);
  unsigned int v34 = *(_DWORD *)(*(void *)v68 + 1992);
  unsigned int v60 = v34 >> 8;
  if (v34 >> 8 > 0x40) {
    operator new[]();
  }
  if (v34 <= 0xFF) {
    unint64_t v35 = 0;
  }
  else {
    unint64_t v35 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v34) + 63);
  }
  uint64_t v59 = (char *)(v35 & v32);
  BOOL v36 = llvm::ConstantInt::get(v33, (llvm::LLVMContext *)&v59, v31);
  if (v60 >= 0x41 && v59) {
    MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
  }
  __int16 v62 = v36;
  uint64_t v37 = *(void *)v68 + 1912;
  __int16 v61 = 257;
  uint64_t v38 = sub_1CC27CEC0((uint64_t *)&v63, v37, v12, (uint64_t *)&v62, 1, (uint64_t)&v59);
  uint64_t v39 = (llvm::Instruction *)v38;
  uint64_t v40 = **((void **)a1 + 1);
  __int16 v58 = 257;
  if (*(void *)v38 != v40)
  {
    if (*(unsigned __int8 *)(v38 + 16) <= 0x14u)
    {
      uint64_t v43 = (*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v69 + 28))(v69, 49, v38, v40);
      uint64_t v39 = (llvm::Instruction *)v43;
      if (v43)
      {
        if (*(unsigned __int8 *)(v43 + 16) >= 0x1Cu)
        {
          (*(void (**)(void *, uint64_t, void *, uint64_t, char *))(*v70 + 16))(v70, v43, v57, v66, v67);
          if (v64)
          {
            int v55 = (llvm::MDNode **)v63;
            uint64_t v56 = (llvm::MDNode **)((char *)v63 + 16 * v64);
            do
            {
              llvm::Instruction::setMetadata(v39, *(_DWORD *)v55, v55[1]);
              v55 += 2;
            }
            while (v55 != v56);
          }
        }
      }
    }
    else
    {
      __int16 v61 = 257;
      uint64_t v39 = llvm::CastInst::Create(49, v38, v40, (const char **)&v59, 0);
      (*(void (**)(void *, llvm::Instruction *, void *, uint64_t, char *))(*v70 + 16))(v70, v39, v57, v66, v67);
      if (v64)
      {
        int v41 = (llvm::MDNode **)v63;
        int v42 = (llvm::MDNode **)((char *)v63 + 16 * v64);
        do
        {
          llvm::Instruction::setMetadata(v39, *(_DWORD *)v41, v41[1]);
          v41 += 2;
        }
        while (v41 != v42);
      }
    }
  }
  if (v63 != v65) {
    free(v63);
  }
  return v39;
}

void *sub_1CC8157CC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC815898(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC815898(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CBF74894(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      uint64_t v10 = v11;
      *uint64_t v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CC815948()
{
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Optimization to set range metadata whenever possible";
  v3.n128_u64[1] = 52;
  char v1 = 1;
  uint64_t v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCDC0A0, "lower-driver-params-set-range", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDC0A0, &dword_1CB82C000);
}

void sub_1CC8159D4(uint64_t a1)
{
}

uint64_t sub_1CC815A70(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDC170;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F261F608;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDC178, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC8159D4;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCDC178, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC815B20()
{
}

void sub_1CC815B60(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC815B98(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

BOOL sub_1CC815C1C(uint64_t a1, llvm::Module *a2)
{
  v90[4] = *MEMORY[0x1E4F143B8];
  __n128 v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::FunctionGroupInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v67 = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  v69[0] = 0;
  v69[1] = 0;
  int v70 = 0;
  int v72 = 0;
  uint64_t v73 = 0;
  long long __p = 0;
  sub_1CD0FEC94(a2, (uint64_t)v69);
  sub_1CD0FEFC4(a2, (uint64_t)v69, 0);
  int v7 = (uint64_t *)__p;
  uint64_t v8 = v72;
  if (__p != v72)
  {
    do
    {
      uint64_t v9 = (uint64_t ***)*v7;
      if (!llvm::Value::getMetadata(*v7, "agx.bind", 8uLL))
      {
        uint64_t v10 = (llvm::MDNode *)v7[1];
        int MDKindID = llvm::LLVMContext::getMDKindID(**v9, "agx.bind", 8uLL);
        llvm::Value::addMetadata((llvm::Value *)v9, MDKindID, v10);
      }
      v7 += 2;
    }
    while (v7 != v8);
  }
  BOOL v88 = v90;
  uint64_t v89 = 0x400000000;
  uint64_t v85 = 1;
  for (uint64_t i = 8; i != 232; i += 56)
    *(uint64_t *)((char *)&v85 + i) = -4096;
  sub_1CD114E40((uint64_t)a2, (uint64_t)&v88, &v85);
  unsigned int v13 = v85;
  if (v85 >= 2)
  {
    uint64_t v14 = *(void *)a2;
    uint64_t v75 = v77;
    uint64_t v76 = 0x200000000;
    v77[6] = v14;
    v77[7] = &v83;
    v77[8] = &v84;
    v77[9] = 0;
    int v78 = 0;
    __int16 v79 = 512;
    char v80 = 7;
    v77[4] = 0;
    v77[5] = 0;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    int v83 = &unk_1F2616E88;
    uint64_t v84 = &unk_1F2617008;
    if (v89)
    {
      unsigned int v62 = v85;
      uint64_t v15 = v88;
      uint64_t v16 = (char *)&v88[v89];
      uint64_t v64 = a2;
      uint64_t v63 = v16;
      while (1)
      {
        uint64_t v17 = *v15;
        uint64_t v18 = sub_1CC7E5CD8((uint64_t)&v85, *v15);
        if (v85) {
          uint64_t v19 = &v86;
        }
        else {
          uint64_t v19 = v86;
        }
        unsigned int v20 = v87;
        if (v85) {
          unsigned int v20 = 4;
        }
        if (&v19[7 * v20] != (void *)v18) {
          break;
        }
LABEL_21:
        if (++v15 == (uint64_t *)v16)
        {
          unsigned int v13 = v62;
          if (v75 != v77) {
            free(v75);
          }
          goto LABEL_70;
        }
      }
      uint64_t v21 = v18;
      uint64_t v74 = v17;
      uint64_t v22 = *(void *)(sub_1CD640904((uint64_t)v69, &v74) + 8);
      uint64_t v23 = *(void *)(v17 + 24);
      int v24 = (void *)(v22 - 8 * *(unsigned int *)(v22 + 8));
      uint64_t v25 = v24[1];
      if (*(unsigned char *)(v23 + 8) != 17 || *(unsigned char *)v25 == 1 && *(unsigned char *)(*(void *)(v25 + 128) + 16) == 16) {
        uint64_t v26 = 1;
      }
      else {
        uint64_t v26 = *(unsigned int *)(v23 + 32);
      }
      uint64_t v65 = v17;
      unint64_t v66 = v26;
      if (*(unsigned char *)(*(void *)(*(void *)(*v24 + 128) + 24) + 8) == 17)
      {
        if (*(unsigned char *)v25 != 1 || (uint64_t v27 = *(void *)(v25 + 128), *(unsigned char *)(v27 + 16) != 16))
        {
          uint64_t v28 = (void *)(v25 - 8 * *(unsigned int *)(v25 + 8));
          uint64_t v29 = *(void *)(*v28 + 128);
          int v30 = (void *)(v29 + 24);
          if (*(_DWORD *)(v29 + 32) >= 0x41u) {
            int v30 = (void *)*v30;
          }
          uint64_t v68 = (void *)*v30;
          uint64_t v31 = v28[1];
LABEL_38:
          uint64_t v33 = *(void *)(v31 + 128);
          unsigned int v34 = (void *)(v33 + 24);
          if (*(_DWORD *)(v33 + 32) >= 0x41u) {
            unsigned int v34 = (void *)*v34;
          }
          unint64_t v35 = (void *)*v34;
          uint64_t v36 = *(unsigned int *)(v21 + 40);
          if (v36)
          {
            uint64_t v37 = *(void **)(v21 + 32);
            uint64_t v38 = &v37[v36];
            while (1)
            {
              uint64_t v39 = (*(uint64_t (**)(uint64_t, void))(*(void *)v67 + 24))(v67, *v37);
              sub_1CC816244(v39, (int)v68);
              uint64_t v40 = v22 + 16;
              unint64_t v41 = v66 - 1;
              if (v66 >= 2) {
                break;
              }
LABEL_54:
              if (++v37 == v38) {
                goto LABEL_55;
              }
            }
            while (2)
            {
              uint64_t v42 = *(unsigned int *)(v22 + 8);
              uint64_t v43 = (void *)(v22 - 8 * v42);
              uint64_t v44 = v43[1];
              if (*(unsigned char *)(*(void *)(*(void *)(*v43 + 128) + 24) + 8) == 17)
              {
                if (*(unsigned char *)v44 != 1 || (uint64_t v45 = *(void *)(v44 + 128), *(unsigned char *)(v45 + 16) != 16))
                {
                  uint64_t v46 = *(void *)(*(void *)(*(void *)(v40 - 8 * v42)
                                              - 8 * *(unsigned int *)(*(void *)(v40 - 8 * v42) + 8))
                                  + 128);
                  unint64_t v47 = (void *)(v46 + 24);
                  if (*(_DWORD *)(v46 + 32) >= 0x41u) {
                    unint64_t v47 = (void *)*v47;
                  }
                  BOOL v48 = (void *)*v47;
                  goto LABEL_53;
                }
              }
              else
              {
                uint64_t v45 = *(void *)(v44 + 128);
              }
              BOOL v49 = (void *)(v45 + 24);
              if (*(_DWORD *)(v45 + 32) >= 0x41u) {
                BOOL v49 = (void *)*v49;
              }
              BOOL v48 = (void *)*v49;
LABEL_53:
              sub_1CC816244(v39, (int)v48);
              v40 += 8;
              if (!--v41) {
                goto LABEL_54;
              }
              continue;
            }
          }
LABEL_55:
          uint64_t v16 = v63;
          if (v68 == 139)
          {
            uint64_t v50 = *(void *)(v65 + 8);
            if (v50)
            {
              do
              {
                uint64_t v51 = *((unsigned int *)v64 + 128);
                uint64_t v52 = *((void *)v64 + 63);
                if (v51)
                {
                  uint64_t v52 = *((void *)v64 + 63);
                  unint64_t v53 = *((unsigned int *)v64 + 128);
                  do
                  {
                    unint64_t v54 = v53 >> 1;
                    uint64_t v55 = v52 + 16 * (v53 >> 1);
                    unsigned int v56 = *(_DWORD *)(v55 + 8);
                    uint64_t v57 = v55 + 16;
                    v53 += ~(v53 >> 1);
                    if (v56 < 2) {
                      uint64_t v52 = v57;
                    }
                    else {
                      unint64_t v53 = v54;
                    }
                  }
                  while (v53);
                }
                if (v52 == *((void *)v64 + 63) + 16 * v51 || *(_DWORD *)(v52 + 8) != 2) {
                  uint64_t v52 = *((void *)v64 + 63);
                }
                uint64_t v58 = *(void *)(v50 + 8);
                uint64_t v59 = *(llvm::ConstantInt ***)(v50 + 24);
                unsigned int v60 = (llvm::Value *)llvm::ConstantInt::get(*v59, (((unint64_t)*(unsigned int *)(v52 + 4) + 7) >> 3)* v35, 0);
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v59, v60, (llvm::Value *)1);
                uint64_t v50 = v58;
              }
              while (v58);
            }
          }
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v27 = *(void *)(v25 + 128);
      }
      uint64_t v32 = (void *)(v27 + 24);
      if (*(_DWORD *)(v27 + 32) >= 0x41u) {
        uint64_t v32 = (void *)*v32;
      }
      uint64_t v68 = (void *)*v32;
      uint64_t v31 = v24[2];
      goto LABEL_38;
    }
  }
LABEL_70:
  sub_1CC7E5E14((uint64_t)&v85);
  if (v88 != v90) {
    free(v88);
  }
  if (__p)
  {
    int v72 = (uint64_t *)__p;
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v69[0], 8);
  return v13 > 1;
}

uint64_t sub_1CC816244(uint64_t result, int a2)
{
  if (a2 <= 97)
  {
    if (a2 == 43)
    {
      uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 8);
      goto LABEL_12;
    }
    if (a2 == 93)
    {
      uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 8);
      goto LABEL_12;
    }
LABEL_15:
    llvm::report_fatal_error((llvm *)"Incorrect binding type", (const llvm::Twine *)1);
  }
  if (a2 == 98) {
    return result;
  }
  if (a2 == 113)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 8);
    goto LABEL_12;
  }
  if (a2 != 139) {
    goto LABEL_15;
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 8);
LABEL_12:

  return v2();
}

void *sub_1CC816390(void *a1)
{
  *a1 = &unk_1F261F6A8;
  uint64_t v2 = a1 + 21;
  __n128 v3 = (void *)a1[24];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  return sub_1CB87DD48(a1);
}

void sub_1CC816444()
{
}

uint64_t sub_1CC8164E0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDC180;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261F730;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDC188, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC816444;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCDC188, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC816590(void *a1)
{
  *a1 = &unk_1F261F6A8;
  uint64_t v2 = a1 + 21;
  __n128 v3 = (void *)a1[24];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC816658(uint64_t result)
{
  if (*(unsigned char *)(result + 152)) {
    uint64_t v1 = *(void *)(result + 144);
  }
  else {
    uint64_t v1 = 0;
  }
  *(void *)(result + 128) = v1;
  return result;
}

void sub_1CC816674()
{
}

void sub_1CC8166B4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC8166EC()
{
  return "GPU Lower Memory Intrinsics";
}

BOOL sub_1CC8166FC(uint64_t a1, llvm::Type *a2, uint64_t a3, uint64_t a4, llvm::Instruction *a5)
{
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  uint64_t v152 = v154;
  uint64_t v153 = 0x1000000000;
  uint64_t v149 = v151;
  uint64_t v150 = 0x1000000000;
  uint64_t v5 = (void *)((char *)a2 + 72);
  uint64_t v6 = (void *)*((void *)a2 + 10);
  if (v6 == (void *)((char *)a2 + 72)) {
    goto LABEL_157;
  }
  do
  {
    int v7 = v6 - 3;
    if (!v6) {
      int v7 = 0;
    }
    uint64_t v8 = v7 + 5;
    for (uint64_t i = (void *)v7[6]; i != v8; uint64_t i = (void *)i[1])
    {
      if (i) {
        uint64_t v10 = (uint64_t)(i - 3);
      }
      else {
        uint64_t v10 = 0;
      }
      int v11 = sub_1CBFB3AB0(v10);
      if (i && v11)
      {
        if (v153 >= (unint64_t)HIDWORD(v153)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v152 + v153) = v10;
        LODWORD(v153) = v153 + 1;
      }
      if (*(unsigned char *)(v10 + 16) == 84)
      {
        uint64_t v12 = *(void *)(v10 - 32);
        if (v12)
        {
          if (!*(unsigned char *)(v12 + 16)
            && *(void *)(v12 + 24) == *(void *)(v10 + 72)
            && (*(unsigned char *)(v12 + 33) & 0x20) != 0
            && *(_DWORD *)(*(i - 7) + 36) == 2143)
          {
            if (v150 >= (unint64_t)HIDWORD(v150)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v149 + v150) = i - 3;
            LODWORD(v150) = v150 + 1;
          }
        }
      }
    }
    uint64_t v6 = (void *)v6[1];
  }
  while (v6 != v5);
  if (!v153) {
    goto LABEL_157;
  }
  unsigned int v13 = (uint64_t *)v152;
  uint64_t v14 = (uint64_t *)((char *)v152 + 8 * v153);
  do
  {
    uint64_t v15 = *v13;
    int v16 = *(_DWORD *)(*(void *)(*v13 - 32) + 36);
    switch(v16)
    {
      case 194:
LABEL_30:
        uint64_t v17 = v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF);
        uint64_t v18 = *(uint64_t **)(v17 + 32);
        uint64_t v19 = *(uint64_t **)v17;
        uint64_t v20 = *(void *)(v17 + 64);
        uint64_t v21 = *(void *)(v15 + 64);
        if (v21)
        {
          unsigned int v22 = *(_DWORD *)(v21 + 8);
          if (v22 < 4)
          {
            unsigned int v25 = 0;
            if (v22 != 3) {
              goto LABEL_79;
            }
          }
          else
          {
            uint64_t v23 = *(llvm::AttributeSetNode **)(v21 + 64);
            if (v23)
            {
              __int16 Alignment = llvm::AttributeSetNode::getAlignment(v23);
              if ((Alignment & 0xFF00) != 0) {
                unsigned int v25 = 1 << Alignment;
              }
              else {
                unsigned int v25 = 0;
              }
            }
            else
            {
              unsigned int v25 = 0;
            }
          }
          uint64_t v58 = *(llvm::AttributeSetNode **)(v21 + 56);
          if (v58)
          {
            unsigned __int16 v59 = llvm::AttributeSetNode::getAlignment(v58);
            if (v59 > 0xFFu)
            {
              uint64_t v60 = 1 << v59;
              goto LABEL_80;
            }
          }
        }
        else
        {
          unsigned int v25 = 0;
        }
LABEL_79:
        LODWORD(v60) = 0;
LABEL_80:
        if (v60 >= v25) {
          unint64_t v61 = v25;
        }
        else {
          unint64_t v61 = v60;
        }
        uint64_t v62 = *(void *)(v17 + 96);
        uint64_t v63 = *(unsigned int *)(v62 + 32);
        if (v63 > 0x40)
        {
          int v65 = 0;
          int64_t v66 = (unint64_t)(v63 + 63) >> 6;
          do
          {
            BOOL v49 = v66-- < 1;
            if (v49) {
              break;
            }
            unint64_t v67 = *(void *)(*(void *)(v62 + 24) + 8 * v66);
            v65 += __clz(v67);
          }
          while (!v67);
          int v68 = v63 | 0xFFFFFFC0;
          if ((v63 & 0x3F) == 0) {
            int v68 = 0;
          }
          BOOL v64 = v65 + v68 == v63;
        }
        else
        {
          BOOL v64 = *(void *)(v62 + 24) == 0;
        }
        int v69 = v64;
        if ((sub_1CC81867C(v15, v18, v19, v20, v61, v69 ^ 1u, qword_1EBCDC3A0, 0, 0, 0, 0) & 1) == 0) {
          sub_1CC819230(v15);
        }
        goto LABEL_125;
      case 197:
        uint64_t v26 = v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF);
        uint64_t v27 = *(uint64_t **)(v26 + 32);
        uint64_t v28 = *(uint64_t **)v26;
        uint64_t v29 = *(void *)(v26 + 64);
        uint64_t v30 = *(void *)(v15 + 64);
        if (v30)
        {
          unsigned int v31 = *(_DWORD *)(v30 + 8);
          if (v31 < 4)
          {
            unsigned int v34 = 0;
            if (v31 != 3) {
              goto LABEL_102;
            }
          }
          else
          {
            uint64_t v32 = *(llvm::AttributeSetNode **)(v30 + 64);
            if (v32)
            {
              __int16 v33 = llvm::AttributeSetNode::getAlignment(v32);
              if ((v33 & 0xFF00) != 0) {
                unsigned int v34 = 1 << v33;
              }
              else {
                unsigned int v34 = 0;
              }
            }
            else
            {
              unsigned int v34 = 0;
            }
          }
          int v70 = *(llvm::AttributeSetNode **)(v30 + 56);
          if (v70)
          {
            unsigned __int16 v71 = llvm::AttributeSetNode::getAlignment(v70);
            if (v71 > 0xFFu)
            {
              uint64_t v72 = 1 << v71;
              goto LABEL_103;
            }
          }
        }
        else
        {
          unsigned int v34 = 0;
        }
LABEL_102:
        LODWORD(v72) = 0;
LABEL_103:
        if (v72 >= v34) {
          unint64_t v73 = v34;
        }
        else {
          unint64_t v73 = v72;
        }
        uint64_t v74 = *(void *)(v26 + 96);
        uint64_t v75 = *(unsigned int *)(v74 + 32);
        if (v75 > 0x40)
        {
          int v77 = 0;
          int64_t v78 = (unint64_t)(v75 + 63) >> 6;
          do
          {
            BOOL v49 = v78-- < 1;
            if (v49) {
              break;
            }
            unint64_t v79 = *(void *)(*(void *)(v74 + 24) + 8 * v78);
            v77 += __clz(v79);
          }
          while (!v79);
          int v80 = v75 | 0xFFFFFFC0;
          if ((v75 & 0x3F) == 0) {
            int v80 = 0;
          }
          BOOL v76 = v77 + v80 == v75;
        }
        else
        {
          BOOL v76 = *(void *)(v74 + 24) == 0;
        }
        int v81 = v76;
        if ((sub_1CC81867C(v15, v27, v28, v29, v73, v81 ^ 1u, xmmword_1EBCDC210, 0, 0, 0, 0) & 1) == 0)
        {
          uint64_t v82 = operator new(0x80uLL);
          int v83 = (llvm::Value *)(v82 + 16);
          v82[21] = v82[21] & 0x38000000 | 2;
          *(void *)uint64_t v82 = 0;
          *((void *)v82 + 1) = 0;
          *((void *)v82 + 2) = 0;
          *((void *)v82 + 3) = v82 + 16;
          *((void *)v82 + 4) = 0;
          *((void *)v82 + 5) = 0;
          *((void *)v82 + 6) = 0;
          *((void *)v82 + 7) = v82 + 16;
          __int16 v159 = 257;
          uint64_t v84 = (void **)*v27;
          uint64_t v85 = **(void **)*v27 + 1888;
          if (*v27 && (v84[1] & 0xFE) == 0x12)
          {
            uint64_t v86 = (uint64_t **)(**(void **)*v27 + 1888);
            unsigned int v87 = (llvm::Type *)*((unsigned int *)v84 + 8);
            if (*((_DWORD *)v84 + 2) == 19) {
              llvm::ScalableVectorType::get(v86, v87);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v86, v87);
            }
            uint64_t v85 = v88;
          }
          uint64_t v89 = llvm::CmpInst::CmpInst(v83, v85, 53, 36, (uint64_t)v27, (uint64_t)v28, &v155, v15, 0);
          uint64_t v144 = 0;
          uint64_t v145 = 0;
          llvm::SplitBlockAndInsertIfThenElse(v89, (llvm::Value *)v15, (llvm::Instruction *)&v145, &v144, 0, v90);
        }
        goto LABEL_125;
      case 196:
        goto LABEL_30;
      case 199:
        uint64_t v35 = *v13;
        break;
      default:
        uint64_t v35 = 0;
        break;
    }
    uint64_t v36 = (uint64_t *)(v35 - 32 * (*(_DWORD *)(v35 + 20) & 0x7FFFFFF));
    uint64_t v37 = *v36;
    uint64_t v38 = v36[4];
    uint64_t v39 = v36[8];
    uint64_t v40 = *(void *)(v35 + 64);
    if (v40)
    {
      if (*(_DWORD *)(v40 + 8) >= 3u)
      {
        unint64_t v41 = *(llvm::AttributeSetNode **)(v40 + 56);
        if (v41)
        {
          __int16 v42 = llvm::AttributeSetNode::getAlignment(v41);
          char v43 = v42;
          LODWORD(v40) = HIBYTE(v42);
          goto LABEL_55;
        }
      }
      LODWORD(v40) = 0;
    }
    char v43 = 0;
LABEL_55:
    uint64_t v44 = v36[12];
    uint64_t v45 = *(unsigned int *)(v44 + 32);
    if (v45 > 0x40)
    {
      int v47 = 0;
      int64_t v48 = (unint64_t)(v45 + 63) >> 6;
      do
      {
        BOOL v49 = v48-- < 1;
        if (v49) {
          break;
        }
        unint64_t v50 = *(void *)(*(void *)(v44 + 24) + 8 * v48);
        v47 += __clz(v50);
      }
      while (!v50);
      int v51 = v45 | 0xFFFFFFC0;
      if ((v45 & 0x3F) == 0) {
        int v51 = 0;
      }
      BOOL v46 = v47 + v51 == v45;
    }
    else
    {
      BOOL v46 = *(void *)(v44 + 24) == 0;
    }
    char v52 = v46;
    uint64_t v53 = (1 << v43);
    if (v40) {
      uint64_t v54 = v53;
    }
    else {
      uint64_t v54 = 0;
    }
    uint64_t v145 = v37;
    if (*(unsigned char *)(v39 + 16) != 16 || *(_DWORD *)(*(void *)v38 + 8) != 2061)
    {
LABEL_75:
      uint64_t v57 = *(void *)(v35 + 40);
      uint64_t v155 = "memset.split";
      __int16 v159 = 259;
      llvm::BasicBlock::splitBasicBlock(v57, v35 + 24, (uint64_t)&v155, 0);
    }
    uint64_t v55 = (unint64_t *)(v39 + 24);
    if (*(_DWORD *)(v39 + 32) >= 0x41u) {
      uint64_t v55 = (unint64_t *)*v55;
    }
    unint64_t v56 = *v55;
    if (*v55)
    {
      if (v56 > qword_1EBCDC2D8) {
        goto LABEL_75;
      }
      unsigned int v91 = *(_DWORD *)(*(void *)v37 + 8);
      if ((v91 & 0xFE) == 0x12) {
        unsigned int v91 = *(_DWORD *)(**(void **)(*(void *)v37 + 16) + 8);
      }
      uint64_t v92 = **(void **)v35;
      uint64_t v146 = v54;
      uint64_t v144 = 0;
      v148[0] = v92;
      v148[1] = &v144;
      char v147 = v52 ^ 1;
      uint64_t v155 = (const char *)&v145;
      LODWORD(v156) = v91 >> 8;
      int v157 = v148;
      uint64_t v158 = &v146;
      if (v56 < 4)
      {
        unint64_t v95 = 0;
      }
      else
      {
        uint64_t v93 = (llvm::PoisonValue *)(*(void *)v92 + 1960);
        BOOL v94 = sub_1CC81A01C(v35, v93, (llvm::CastInst *)v38, 4u, a5);
        unint64_t v56 = sub_1CC81A2C4((uint64_t)&v155, v35, v93, (uint64_t)v94, 4uLL, v56, 0);
        unint64_t v95 = (unint64_t)a2;
      }
      if (v56 >= 2)
      {
        unint64_t v96 = (llvm::PoisonValue *)(*(void *)v92 + 1936);
        unint64_t v97 = sub_1CC81A01C(v35, v96, (llvm::CastInst *)v38, 2u, a5);
        unint64_t v56 = sub_1CC81A2C4((uint64_t)&v155, v35, v96, (uint64_t)v97, 2uLL, v56, v95);
        unint64_t v95 = (unint64_t)a2;
      }
      if (v56)
      {
        uint64_t v98 = (llvm::PointerType *)(*(void *)v92 + 1912);
        int v99 = *(unsigned __int8 *)(v38 + 16);
        if (v99 == 12)
        {
          uint64_t v100 = llvm::PoisonValue::get((llvm::PoisonValue *)(*(void *)v92 + 1912), a2);
          goto LABEL_143;
        }
        if ((v99 - 11) <= 1)
        {
          uint64_t v100 = llvm::UndefValue::get((llvm::UndefValue *)(*(void *)v92 + 1912), a2);
          goto LABEL_143;
        }
        if (v99 == 16)
        {
          uint64_t v101 = (unsigned __int8 *)(v38 + 24);
          if (*(_DWORD *)(v38 + 32) >= 0x41u) {
            uint64_t v101 = *(unsigned __int8 **)v101;
          }
          uint64_t v100 = llvm::ConstantInt::get((llvm::ConstantInt *)(*(void *)v92 + 1912), *v101, 0);
LABEL_143:
          uint64_t v38 = (uint64_t)v100;
        }
        sub_1CC81A2C4((uint64_t)&v155, v35, v98, v38, 1uLL, v56, v95);
      }
    }
LABEL_125:
    ++v13;
  }
  while (v13 != v14);
  if (v153)
  {
    uint64_t v102 = *(void *)v152;
    int v103 = *(_DWORD *)(*(void *)v152 + 20);
    if ((v103 & 0x40000000) != 0)
    {
      uint64_t v105 = *(void *)(v102 - 8);
      uint64_t v104 = v103 & 0x7FFFFFF;
      if (v104) {
        goto LABEL_149;
      }
    }
    else
    {
      uint64_t v104 = v103 & 0x7FFFFFF;
      uint64_t v105 = v102 - 32 * v104;
      if (v104)
      {
LABEL_149:
        uint64_t v106 = 32 * v104;
        int v107 = (void **)(v105 + 16);
        do
        {
          if (*(v107 - 2))
          {
            **int v107 = *(v107 - 1);
            uint64_t v108 = (uint64_t)*(v107 - 1);
            if (v108) {
              *(void *)(v108 + 16) = *v107;
            }
          }
          *(v107 - 2) = 0;
          v107 += 4;
          v106 -= 32;
        }
        while (v106);
      }
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
LABEL_157:
  unsigned int v109 = (uint64_t *)v149;
  if (!v150) {
    goto LABEL_201;
  }
  uint64_t v110 = 8 * v150;
  while (2)
  {
    uint64_t v111 = *v109;
    uint64_t v112 = *v109 - 32 * (*(_DWORD *)(*v109 + 20) & 0x7FFFFFF);
    unsigned int v113 = *(uint64_t **)(v112 + 32);
    int v114 = *(uint64_t **)v112;
    uint64_t v115 = *(const char ***)(v112 + 96);
    uint64_t v143 = *(void **)(v112 + 64);
    uint64_t v116 = *(void *)(v112 + 128);
    uint64_t v117 = *(void *)(*v109 + 64);
    if (!v117)
    {
      unsigned int v121 = 0;
      goto LABEL_171;
    }
    unsigned int v118 = *(_DWORD *)(v117 + 8);
    if (v118 < 4)
    {
      unsigned int v121 = 0;
      if (v118 == 3) {
        goto LABEL_169;
      }
      goto LABEL_171;
    }
    uint64_t v119 = *(llvm::AttributeSetNode **)(v117 + 64);
    if (v119)
    {
      __int16 v120 = llvm::AttributeSetNode::getAlignment(v119);
      if ((v120 & 0xFF00) != 0) {
        unsigned int v121 = 1 << v120;
      }
      else {
        unsigned int v121 = 0;
      }
    }
    else
    {
      unsigned int v121 = 0;
    }
LABEL_169:
    int v122 = *(llvm::AttributeSetNode **)(v117 + 56);
    if (v122 && (unsigned __int16 v123 = llvm::AttributeSetNode::getAlignment(v122), v123 >= 0x100u))
    {
      if (*(_DWORD *)(v117 + 8) <= 2u) {
        LODWORD(v124) = 1;
      }
      else {
        uint64_t v124 = 1 << v123;
      }
    }
    else
    {
LABEL_171:
      LODWORD(v124) = 0;
    }
    if (v124 >= v121) {
      unint64_t v125 = v121;
    }
    else {
      unint64_t v125 = v124;
    }
    uint64_t v126 = *(void *)(v112 + 160);
    if (v126) {
      BOOL v127 = *(unsigned char *)(v126 + 16) == 16;
    }
    else {
      BOOL v127 = 0;
    }
    if (v127)
    {
      uint64_t v133 = (void *)(v126 + 24);
      unsigned int v129 = v115;
      uint64_t v130 = v113;
      uint64_t v131 = v116;
      if (*(_DWORD *)(v126 + 32) >= 0x41u) {
        uint64_t v133 = (void *)*v133;
      }
      uint64_t v132 = v143;
      BOOL v128 = *v133 != 0;
    }
    else
    {
      BOOL v128 = 1;
      unsigned int v129 = v115;
      uint64_t v130 = v113;
      uint64_t v131 = v116;
      uint64_t v132 = v143;
    }
    if ((sub_1CC81867C(v111, v130, v114, v131, v125, v128, qword_1EBCDC3A0, 1, v129, 1, v132) & 1) == 0) {
      sub_1CC819230(v111);
    }
    ++v109;
    v110 -= 8;
    if (v110) {
      continue;
    }
    break;
  }
  unsigned int v109 = (uint64_t *)v149;
  if (v150)
  {
    uint64_t v134 = *(void *)v149;
    int v135 = *(_DWORD *)(*(void *)v149 + 20);
    if ((v135 & 0x40000000) != 0)
    {
      uint64_t v137 = *(void *)(v134 - 8);
      uint64_t v136 = v135 & 0x7FFFFFF;
      if (v136) {
        goto LABEL_193;
      }
    }
    else
    {
      uint64_t v136 = v135 & 0x7FFFFFF;
      uint64_t v137 = v134 - 32 * v136;
      if (v136)
      {
LABEL_193:
        uint64_t v138 = 32 * v136;
        unint64_t v139 = (void **)(v137 + 16);
        do
        {
          if (*(v139 - 2))
          {
            *unsigned char *v139 = *(v139 - 1);
            uint64_t v140 = (uint64_t)*(v139 - 1);
            if (v140) {
              *(void *)(v140 + 16) = *v139;
            }
          }
          *(v139 - 2) = 0;
          v139 += 4;
          v138 -= 32;
        }
        while (v138);
      }
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
LABEL_201:
  int v141 = v153;
  if (v109 != (uint64_t *)v151) {
    free(v109);
  }
  if (v152 != v154) {
    free(v152);
  }
  return v141 != 0;
}

uint64_t sub_1CC81867C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, unint64_t a5, int a6, unint64_t a7, int a8, const char **a9, uint64_t a10, void *a11)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a4 + 16) != 16) {
    return 0;
  }
  BOOL v100 = sub_1CC5818AC(a1);
  BOOL v102 = *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v16 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v16 + 16)
      && *(void *)(v16 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v16 + 33) & 0x20) != 0
      && *(_DWORD *)(v16 + 36) == 2143;
  uint64_t v17 = (unint64_t *)(a4 + 24);
  if (*(_DWORD *)(a4 + 32) >= 0x41u) {
    uint64_t v17 = (unint64_t *)*v17;
  }
  unint64_t v18 = *v17;
  if (*v17)
  {
    if (v18 > a7) {
      return 0;
    }
    unsigned int v20 = *(_DWORD *)(*a2 + 8);
    if ((v20 & 0xFE) == 0x12) {
      unsigned int v20 = *(_DWORD *)(**(void **)(*a2 + 16) + 8);
    }
    unsigned int v99 = v20 >> 8;
    unsigned int v21 = *(_DWORD *)(*a3 + 8);
    if ((v21 & 0xFE) == 0x12) {
      unsigned int v21 = *(_DWORD *)(**(void **)(*a3 + 16) + 8);
    }
    unint64_t v22 = 0;
    unsigned int v98 = v21 >> 8;
    uint64_t v111 = v113;
    uint64_t v112 = 0x2000000000;
    unsigned int v109 = 0;
    uint64_t v23 = (uint64_t *)(a1 + 24);
    if (a5 - 1 < 3) {
      int v24 = a8;
    }
    else {
      int v24 = 0;
    }
    int v101 = v24;
    uint64_t v105 = **(llvm::IntegerType ***)a1;
    do
    {
      uint64_t v26 = (uint64_t)a2;
      uint64_t v25 = (uint64_t)a3;
      if (v22)
      {
        uint64_t v27 = *(void *)v105;
        uint64_t v28 = (llvm::ConstantInt *)(*(void *)v105 + 1984);
        uint64_t v117 = 0;
        uint64_t v117 = llvm::ConstantInt::get(v28, v22, 0);
        __int16 v116 = 257;
        uint64_t v29 = (char *)operator new(0x90uLL);
        *((_DWORD *)v29 + 21) = *((_DWORD *)v29 + 21) & 0x38000000 | 2;
        uint64_t v26 = (uint64_t)(v29 + 64);
        *(void *)uint64_t v29 = 0;
        *((void *)v29 + 1) = 0;
        *((void *)v29 + 2) = 0;
        *((void *)v29 + 3) = v29 + 64;
        *((void *)v29 + 4) = 0;
        *((void *)v29 + 5) = 0;
        *((void *)v29 + 6) = 0;
        *((void *)v29 + 7) = v29 + 64;
        v27 += 1912;
        sub_1CB845A7C(v27, a2, (uint64_t)&v117, 1);
        *((void *)v29 + 8) = v30;
        *((void *)v29 + 9) = 0;
        unsigned int v31 = *((_DWORD *)v29 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v29 + 20) = 62;
        *((_DWORD *)v29 + 21) = v31;
        *(_OWORD *)(v29 + 88) = 0u;
        *(_OWORD *)(v29 + 104) = 0u;
        *((_DWORD *)v29 + 30) = 0;
        *((void *)v29 + 16) = v27;
        *((void *)v29 + 17) = llvm::GetElementPtrInst::getIndexedType(v27, (uint64_t)&v117, 1);
        llvm::GetElementPtrInst::init((uint64_t ***)v29 + 8, (uint64_t **)a2, (uint64_t *)&v117, 1, &v114);
        __int16 v116 = 257;
        uint64_t v32 = (char *)operator new(0x90uLL);
        *((_DWORD *)v32 + 21) = *((_DWORD *)v32 + 21) & 0x38000000 | 2;
        uint64_t v25 = (uint64_t)(v32 + 64);
        *(void *)uint64_t v32 = 0;
        *((void *)v32 + 1) = 0;
        *((void *)v32 + 2) = 0;
        *((void *)v32 + 3) = v32 + 64;
        *((void *)v32 + 4) = 0;
        *((void *)v32 + 5) = 0;
        *((void *)v32 + 6) = 0;
        *((void *)v32 + 7) = v32 + 64;
        sub_1CB845A7C(v27, a3, (uint64_t)&v117, 1);
        *((void *)v32 + 8) = v33;
        *((void *)v32 + 9) = 0;
        unsigned int v34 = *((_DWORD *)v32 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v32 + 20) = 62;
        *((_DWORD *)v32 + 21) = v34;
        *(_OWORD *)(v32 + 88) = 0u;
        *(_OWORD *)(v32 + 104) = 0u;
        *((_DWORD *)v32 + 30) = 0;
        *((void *)v32 + 16) = v27;
        *((void *)v32 + 17) = llvm::GetElementPtrInst::getIndexedType(v27, (uint64_t)&v117, 1);
        llvm::GetElementPtrInst::init((uint64_t ***)v32 + 8, (uint64_t **)a3, (uint64_t *)&v117, 1, &v114);
        if (v112 >= (unint64_t)HIDWORD(v112)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v111 + v112) = v26;
        LODWORD(v112) = v112 + 1;
        if (v109 >= 0x20uLL) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v110[v109++] = v25;
      }
      if (v101)
      {
        if (v18 >= a5) {
          unint64_t v35 = a5;
        }
        else {
          unint64_t v35 = v18;
        }
        uint64_t v36 = (char *)llvm::IntegerType::get(v105, (llvm::LLVMContext *)(8 * v35));
      }
      else if (v18 < 4)
      {
        if (v18 >= 2) {
          unint64_t v35 = 2;
        }
        else {
          unint64_t v35 = 1;
        }
        if (v18 >= 2) {
          uint64_t v36 = (char *)(*(void *)v105 + 1936);
        }
        else {
          uint64_t v36 = (char *)(*(void *)v105 + 1912);
        }
      }
      else
      {
        uint64_t v36 = (char *)(*(void *)v105 + 1960);
        unint64_t v35 = 4;
      }
      unint64_t v108 = v18;
      if (v102)
      {
        unint64_t v37 = v22;
        uint64_t v38 = *(uint64_t ***)(*(void *)(*(void *)(a1 + 40) + 56) + 40);
        uint64_t v39 = **v38;
        uint64_t v40 = *(llvm::ConstantInt **)(v39 + 1888);
        unint64_t v41 = *(unsigned int *)(v39 + 1896);
        unsigned int v115 = v41 >> 8;
        if (v41 >> 8 > 0x40) {
          operator new[]();
        }
        if (v41 <= 0xFF) {
          LODWORD(v42) = 0;
        }
        else {
          unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v41) + 63);
        }
        int v114 = (const char *)(v42 & a6);
        char v43 = llvm::ConstantInt::get(v40, (llvm::LLVMContext *)&v114, v15);
        if (v115 >= 0x41 && v114) {
          MEMORY[0x1D25D9CB0](v114, 0x1000C8000313F17);
        }
        int v114 = v36;
        Declaratiouint64_t n = llvm::Intrinsic::getDeclaration(v38, 2142, (uint64_t)&v114, 1);
        uint64_t v45 = *(uint64_t ***)(Declaration + 24);
        uint64_t v117 = (void *)v26;
        unsigned int v118 = a9;
        uint64_t v119 = v43;
        __int16 v116 = 257;
        BOOL v46 = (char *)operator new(0xD0uLL);
        uint64_t v47 = 0;
        int64_t v48 = (const char **)(v46 + 128);
        *((_DWORD *)v46 + 37) = *((_DWORD *)v46 + 37) & 0x38000000 | 4;
        do
        {
          BOOL v49 = &v46[v47];
          *(void *)BOOL v49 = 0;
          *((void *)v49 + 1) = 0;
          *((void *)v49 + 2) = 0;
          *((void *)v49 + 3) = v48;
          v47 += 32;
        }
        while (v47 != 128);
        *((void *)v46 + 16) = *v45[2];
        *((void *)v46 + 17) = 0;
        v46[144] = 84;
        v46[145] = 0;
        *((_WORD *)v46 + 73) = 0;
        *((_DWORD *)v46 + 37) = *((_DWORD *)v46 + 37) & 0xC0000000 | 4;
        *(_OWORD *)(v46 + 152) = 0u;
        *(_OWORD *)(v46 + 168) = 0u;
        *((_DWORD *)v46 + 46) = 0;
        *((void *)v46 + 24) = 0;
        llvm::CallInst::init((uint64_t ***)v46 + 16, v45, (uint64_t **)Declaration, (uint64_t *)&v117, 3, 0, 0, &v114);
        uint64_t v51 = **v38;
        char v52 = *(llvm::ConstantInt **)(v51 + 1888);
        unint64_t v53 = *(unsigned int *)(v51 + 1896);
        unsigned int v115 = v53 >> 8;
        if (v53 >> 8 > 0x40) {
          operator new[]();
        }
        unint64_t v54 = v37;
        if (v53 <= 0xFF) {
          LODWORD(v55) = 0;
        }
        else {
          unint64_t v55 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v53) + 63);
        }
        int v114 = (const char *)(v55 & a6);
        unint64_t v56 = v108;
        uint64_t v57 = llvm::ConstantInt::get(v52, (llvm::LLVMContext *)&v114, v50);
        if (v115 >= 0x41 && v114) {
          MEMORY[0x1D25D9CB0](v114, 0x1000C8000313F17);
        }
        int v114 = *v48;
        uint64_t v58 = llvm::Intrinsic::getDeclaration(v38, 2144, (uint64_t)&v114, 1);
        unsigned __int16 v59 = *(uint64_t ***)(v58 + 24);
        uint64_t v117 = (void *)v25;
        unsigned int v118 = v48;
        uint64_t v119 = a11;
        __int16 v120 = v57;
        __int16 v116 = 257;
        uint64_t v60 = (char *)operator new(0xF0uLL);
        uint64_t v61 = 0;
        uint64_t v62 = v60 + 160;
        *((_DWORD *)v60 + 45) = *((_DWORD *)v60 + 45) & 0x38000000 | 5;
        do
        {
          uint64_t v63 = &v60[v61];
          *(void *)uint64_t v63 = 0;
          *((void *)v63 + 1) = 0;
          *((void *)v63 + 2) = 0;
          *((void *)v63 + 3) = v62;
          v61 += 32;
        }
        while (v61 != 160);
        *((void *)v60 + 20) = *v59[2];
        *((void *)v60 + 21) = 0;
        v60[176] = 84;
        v60[177] = 0;
        *((_WORD *)v60 + 89) = 0;
        *((_DWORD *)v60 + 45) = *((_DWORD *)v60 + 45) & 0xC0000000 | 5;
        *(_OWORD *)(v60 + 184) = 0u;
        *(_OWORD *)(v60 + 200) = 0u;
        *((_DWORD *)v60 + 54) = 0;
        *((void *)v60 + 28) = 0;
        llvm::CallInst::init((uint64_t ***)v60 + 20, v59, (uint64_t **)v58, (uint64_t *)&v117, 4, 0, 0, &v114);
      }
      else
      {
        unint64_t v64 = llvm::PointerType::get((llvm::PointerType *)v36, (llvm::Type *)v99);
        __int16 v116 = 257;
        int v65 = llvm::CastInst::Create(49, v26, v64, &v114, 0);
        unint64_t v66 = llvm::PointerType::get((llvm::PointerType *)v36, (llvm::Type *)v98);
        __int16 v116 = 257;
        unint64_t v67 = llvm::CastInst::Create(49, v25, v66, &v114, 0);
        if (v112 >= (unint64_t)HIDWORD(v112)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v111 + v112) = v65;
        LODWORD(v112) = v112 + 1;
        unint64_t v68 = v22;
        if (v109 >= 0x20uLL) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v110[v109++] = v67;
        unint64_t v69 = a5;
        if (v35 < a5) {
          unint64_t v69 = v35;
        }
        char v70 = __clz(v69);
        unsigned __int16 v71 = (char *)operator new(0x60uLL);
        *((_DWORD *)v71 + 13) = *((_DWORD *)v71 + 13) & 0x38000000 | 1;
        int64_t v48 = (const char **)(v71 + 32);
        *(void *)unsigned __int16 v71 = 0;
        *((void *)v71 + 1) = 0;
        *((void *)v71 + 2) = 0;
        *((void *)v71 + 3) = v71 + 32;
        char v72 = 63 - v70;
        __int16 v116 = 257;
        llvm::LoadInst::LoadInst((llvm::Value *)(v71 + 32), (uint64_t)v36, (uint64_t)v65, &v114, a6, v72, 0);
        unint64_t v73 = (char *)operator new(0x80uLL);
        *((_DWORD *)v73 + 21) = *((_DWORD *)v73 + 21) & 0x38000000 | 2;
        *(void *)unint64_t v73 = 0;
        *((void *)v73 + 2) = 0;
        *((void *)v73 + 1) = 0;
        *((void *)v73 + 5) = 0;
        *((void *)v73 + 6) = 0;
        *((void *)v73 + 4) = 0;
        *((void *)v73 + 8) = ***((void ***)v71 + 4) + 1576;
        uint64_t v62 = v73 + 64;
        *((void *)v73 + 3) = v73 + 64;
        *((void *)v73 + 7) = v73 + 64;
        *((void *)v73 + 9) = 0;
        v73[80] = 61;
        v73[81] = 0;
        *((_DWORD *)v73 + 21) = 2;
        *(_OWORD *)(v73 + 88) = 0u;
        *(_OWORD *)(v73 + 104) = 0u;
        *((_DWORD *)v73 + 30) = 0;
        uint64_t v76 = *((void *)v71 + 5);
        uint64_t v75 = v71 + 40;
        uint64_t v74 = v76;
        *(void *)unint64_t v73 = v48;
        *((void *)v73 + 1) = v76;
        if (v76) {
          *(void *)(v74 + 16) = v73 + 8;
        }
        *((void *)v73 + 2) = v75;
        *uint64_t v75 = v73;
        *((void *)v73 + 4) = v67;
        if (v67)
        {
          uint64_t v79 = *((void *)v67 + 1);
          int64_t v78 = (void *)((char *)v67 + 8);
          uint64_t v77 = v79;
          *((void *)v73 + 5) = v79;
          if (v79) {
            *(void *)(v77 + 16) = v73 + 40;
          }
          *((void *)v73 + 6) = v78;
          *int64_t v78 = v73 + 32;
        }
        *((_WORD *)v73 + 41) = a6 & 0xFF81 | (2 * (v72 & 0x3F));
        v73[124] = 1;
        unint64_t v54 = v68;
        unint64_t v56 = v108;
      }
      if (v112 >= (unint64_t)HIDWORD(v112)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v111 + v112) = v48;
      LODWORD(v112) = v112 + 1;
      if (v109 >= 0x20uLL) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v110[v109] = v62;
      unsigned int v80 = ++v109;
      unint64_t v22 = v35 + v54;
      unint64_t v18 = v56 - v35;
      if (v18)
      {
        char v81 = v100;
        if ((v22 & 0x7F) != 0) {
          char v81 = 1;
        }
        if (v81) {
          continue;
        }
      }
      if (v112)
      {
        uint64_t v82 = (uint64_t *)v111;
        uint64_t v83 = 8 * v112;
        do
        {
          uint64_t v84 = *v82;
          uint64_t v85 = *(void *)(a1 + 40);
          *(void *)(v84 + 40) = v85;
          *(_WORD *)(v85 + 18) &= ~0x8000u;
          if ((*(unsigned char *)(v84 + 23) & 0x10) != 0)
          {
            uint64_t v88 = *(void *)(v85 + 56);
            if (v88)
            {
              uint64_t v89 = *(llvm::ValueSymbolTable **)(v88 + 104);
              if (v89) {
                llvm::ValueSymbolTable::reinsertValue(v89, (llvm::Value *)v84);
              }
            }
          }
          uint64_t v86 = *v23;
          *(void *)(v84 + 24) = *v23;
          *(void *)(v84 + 32) = v23;
          uint64_t v87 = v84 + 24;
          *(void *)(v86 + 8) = v87;
          *uint64_t v23 = v87;
          ++v82;
          v83 -= 8;
        }
        while (v83);
        unsigned int v80 = v109;
      }
      if (v80)
      {
        uint64_t v90 = v110;
        uint64_t v91 = 8 * v80;
        do
        {
          uint64_t v92 = *v90;
          uint64_t v93 = *(void *)(a1 + 40);
          *(void *)(v92 + 40) = v93;
          *(_WORD *)(v93 + 18) &= ~0x8000u;
          if ((*(unsigned char *)(v92 + 23) & 0x10) != 0)
          {
            uint64_t v96 = *(void *)(v93 + 56);
            if (v96)
            {
              unint64_t v97 = *(llvm::ValueSymbolTable **)(v96 + 104);
              if (v97) {
                llvm::ValueSymbolTable::reinsertValue(v97, (llvm::Value *)v92);
              }
            }
          }
          uint64_t v94 = *v23;
          *(void *)(v92 + 24) = *v23;
          *(void *)(v92 + 32) = v23;
          uint64_t v95 = v92 + 24;
          *(void *)(v94 + 8) = v95;
          *uint64_t v23 = v95;
          ++v90;
          v91 -= 8;
        }
        while (v91);
      }
      LODWORD(v112) = 0;
      unsigned int v109 = 0;
    }
    while (v18);
    if (v111 != v113) {
      free(v111);
    }
  }
  return 1;
}

void sub_1CC819230(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = "memcpy.split";
  __int16 v3 = 259;
  llvm::BasicBlock::splitBasicBlock(v1, a1 + 24, (uint64_t)&v2, 0);
}

void sub_1CC819370()
{
}

llvm::UndefValue *sub_1CC81A01C(uint64_t a1, llvm::PoisonValue *this, llvm::CastInst *a3, unsigned int a4, llvm::Instruction *a5)
{
  int v6 = *((unsigned __int8 *)a3 + 16);
  if (v6 == 12)
  {
    return (llvm::UndefValue *)llvm::PoisonValue::get(this, this);
  }
  else if ((v6 - 11) > 1)
  {
    unsigned int v8 = a4;
    if (v6 == 16)
    {
      uint64_t v9 = (unsigned __int8 *)a3 + 24;
      if (*((_DWORD *)a3 + 8) >= 0x41u) {
        uint64_t v9 = *(unsigned __int8 **)v9;
      }
      unint64_t v10 = *v9;
      unsigned int v11 = a4 - 1;
      unint64_t v12 = v10;
      do
      {
        unint64_t v12 = v10 | (v12 << 8);
        --v11;
      }
      while (v11);
      return (llvm::UndefValue *)llvm::ConstantInt::get(this, v12, 0);
    }
    else
    {
      __int16 v33 = 257;
      ZExtOrBitCast = llvm::CastInst::CreateZExtOrBitCast(a3, (llvm::Type ***)this, v32, 0, a5);
      uint64_t v15 = *(void *)(a1 + 40);
      *((void *)ZExtOrBitCast + 5) = v15;
      *(_WORD *)(v15 + 18) &= ~0x8000u;
      if ((*((unsigned char *)ZExtOrBitCast + 23) & 0x10) != 0)
      {
        uint64_t v30 = *(void *)(v15 + 56);
        if (v30)
        {
          unsigned int v31 = *(llvm::ValueSymbolTable **)(v30 + 104);
          if (v31) {
            llvm::ValueSymbolTable::reinsertValue(v31, ZExtOrBitCast);
          }
        }
      }
      uint64_t v17 = (uint64_t *)(a1 + 24);
      uint64_t v16 = *(void *)(a1 + 24);
      *((void *)ZExtOrBitCast + 3) = v16;
      *((void *)ZExtOrBitCast + 4) = a1 + 24;
      *(void *)(v16 + 8) = (char *)ZExtOrBitCast + 24;
      *(void *)(a1 + 24) = (char *)ZExtOrBitCast + 24;
      unint64_t v18 = 8;
      do
      {
        uint64_t v19 = llvm::ConstantInt::get(this, v18, 0);
        __int16 v33 = 257;
        unsigned int v20 = llvm::BinaryOperator::Create(25, ZExtOrBitCast, (uint64_t)v19, v32, 0);
        uint64_t v21 = *(void *)(a1 + 40);
        *((void *)v20 + 5) = v21;
        *(_WORD *)(v21 + 18) &= ~0x8000u;
        if ((*((unsigned char *)v20 + 23) & 0x10) != 0)
        {
          uint64_t v26 = *(void *)(v21 + 56);
          if (v26)
          {
            uint64_t v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
            if (v27) {
              llvm::ValueSymbolTable::reinsertValue(v27, v20);
            }
          }
        }
        uint64_t v22 = *(void *)(a1 + 24);
        *((void *)v20 + 4) = v17;
        *((void *)v20 + 3) = v22;
        *(void *)(v22 + 8) = (char *)v20 + 24;
        *(void *)(a1 + 24) = (char *)v20 + 24;
        __int16 v33 = 257;
        ZExtOrBitCast = llvm::BinaryOperator::Create(29, ZExtOrBitCast, (uint64_t)v20, v32, 0);
        uint64_t v23 = *(void *)(a1 + 40);
        *((void *)ZExtOrBitCast + 5) = v23;
        *(_WORD *)(v23 + 18) &= ~0x8000u;
        if ((*((unsigned char *)ZExtOrBitCast + 23) & 0x10) != 0)
        {
          uint64_t v28 = *(void *)(v23 + 56);
          if (v28)
          {
            uint64_t v29 = *(llvm::ValueSymbolTable **)(v28 + 104);
            if (v29) {
              llvm::ValueSymbolTable::reinsertValue(v29, ZExtOrBitCast);
            }
          }
        }
        uint64_t v24 = *v17;
        *((void *)ZExtOrBitCast + 3) = *v17;
        *((void *)ZExtOrBitCast + 4) = v17;
        *(void *)(v24 + 8) = (char *)ZExtOrBitCast + 24;
        *uint64_t v17 = (uint64_t)ZExtOrBitCast + 24;
        v18 *= 2;
        BOOL v25 = v8 > 3;
        v8 >>= 1;
      }
      while (v25);
      return ZExtOrBitCast;
    }
  }
  else
  {
    return llvm::UndefValue::get(this, this);
  }
}

unint64_t sub_1CC81A2C4(uint64_t a1, uint64_t a2, llvm::PointerType *this, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v12 = **(void **)a1;
  unint64_t v13 = llvm::PointerType::get(this, (llvm::Type *)*(unsigned int *)(a1 + 8));
  __int16 v53 = 257;
  uint64_t v14 = llvm::CastInst::Create(49, v12, v13, v52, 0);
  uint64_t v15 = *(void *)(a2 + 40);
  *((void *)v14 + 5) = v15;
  *(_WORD *)(v15 + 18) &= ~0x8000u;
  if ((*((unsigned char *)v14 + 23) & 0x10) != 0)
  {
    uint64_t v46 = *(void *)(v15 + 56);
    if (v46)
    {
      uint64_t v47 = *(llvm::ValueSymbolTable **)(v46 + 104);
      if (v47) {
        llvm::ValueSymbolTable::reinsertValue(v47, v14);
      }
    }
  }
  uint64_t v17 = (uint64_t *)(a2 + 24);
  uint64_t v16 = *(void *)(a2 + 24);
  *((void *)v14 + 3) = v16;
  *((void *)v14 + 4) = a2 + 24;
  *(void *)(v16 + 8) = (char *)v14 + 24;
  *(void *)(a2 + 24) = (char *)v14 + 24;
  if (a6 >= a5)
  {
    unint64_t v50 = (void *)(a4 + 8);
    uint64_t v48 = a2;
    do
    {
      uint64_t v19 = v14;
      if (a7)
      {
        unsigned int v20 = *(llvm::ConstantInt ****)(a1 + 16);
        uint64_t v21 = v20[1];
        if (!*v21)
        {
          llvm::Instruction *v21 = (llvm::ConstantInt *)((char *)**v20 + 1984);
          uint64_t v21 = v20[1];
        }
        unint64_t v54 = 0;
        unint64_t v54 = llvm::ConstantInt::get(*v21, a7 / a5, 0);
        __int16 v53 = 257;
        uint64_t v22 = (char *)operator new(0x90uLL);
        *((_DWORD *)v22 + 21) = *((_DWORD *)v22 + 21) & 0x38000000 | 2;
        uint64_t v19 = (llvm::Value *)(v22 + 64);
        *(void *)uint64_t v22 = 0;
        *((void *)v22 + 1) = 0;
        *((void *)v22 + 2) = 0;
        *((void *)v22 + 3) = v22 + 64;
        *((void *)v22 + 4) = 0;
        *((void *)v22 + 5) = 0;
        *((void *)v22 + 6) = 0;
        *((void *)v22 + 7) = v22 + 64;
        sub_1CB845A7C((uint64_t)this, (uint64_t *)v14, (uint64_t)&v54, 1);
        *((void *)v22 + 8) = v23;
        *((void *)v22 + 9) = 0;
        unsigned int v24 = *((_DWORD *)v22 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v22 + 20) = 62;
        *((_DWORD *)v22 + 21) = v24;
        *(_OWORD *)(v22 + 88) = 0u;
        BOOL v25 = v22 + 88;
        *(_OWORD *)(v22 + 104) = 0u;
        *((_DWORD *)v22 + 30) = 0;
        *((void *)v22 + 16) = this;
        *((void *)v22 + 17) = llvm::GetElementPtrInst::getIndexedType((uint64_t)this, (uint64_t)&v54, 1);
        llvm::GetElementPtrInst::init((uint64_t ***)v22 + 8, (uint64_t **)v14, (uint64_t *)&v54, 1, v52);
        a2 = v48;
        uint64_t v26 = *(void *)(v48 + 40);
        *((void *)v22 + 13) = v26;
        *(_WORD *)(v26 + 18) &= ~0x8000u;
        if ((v22[87] & 0x10) != 0)
        {
          uint64_t v44 = *(void *)(v26 + 56);
          if (v44)
          {
            uint64_t v45 = *(llvm::ValueSymbolTable **)(v44 + 104);
            if (v45) {
              llvm::ValueSymbolTable::reinsertValue(v45, v19);
            }
          }
        }
        uint64_t v27 = *v17;
        *((void *)v22 + 11) = *v17;
        *((void *)v22 + 12) = v17;
        *(void *)(v27 + 8) = v25;
        *uint64_t v17 = (uint64_t)v25;
      }
      uint64_t v28 = *(void *)(a1 + 24);
      uint64_t v29 = (char *)operator new(0x80uLL);
      uint64_t v30 = v29;
      *((_DWORD *)v29 + 21) = *((_DWORD *)v29 + 21) & 0x38000000 | 2;
      *((void *)v29 + 2) = 0;
      *(void *)uint64_t v29 = 0;
      *((void *)v29 + 1) = 0;
      unsigned int v31 = v29 + 8;
      *((void *)v29 + 5) = 0;
      *((void *)v29 + 6) = 0;
      *((void *)v29 + 4) = 0;
      uint64_t v32 = *(void *)(a4 + 8);
      *((void *)v29 + 8) = ***(void ***)a4 + 1576;
      __int16 v33 = (llvm::Value *)(v29 + 64);
      *((void *)v29 + 3) = v29 + 64;
      *((void *)v29 + 7) = v29 + 64;
      __int16 v34 = *(unsigned __int8 *)(v28 + 8);
      unint64_t v35 = *(void *)v28;
      if (*(void *)v28 >= a5) {
        unint64_t v35 = a5;
      }
      *((void *)v29 + 9) = 0;
      v29[80] = 61;
      v29[81] = 0;
      *((_DWORD *)v29 + 21) = 2;
      *(_OWORD *)(v29 + 88) = 0u;
      uint64_t v36 = v29 + 88;
      *((_DWORD *)v29 + 30) = 0;
      *(_OWORD *)(v29 + 104) = 0u;
      *(void *)uint64_t v29 = a4;
      *unsigned int v31 = v32;
      if (v32) {
        *(void *)(v32 + 16) = v31;
      }
      *((void *)v29 + 2) = v50;
      void *v50 = v29;
      *((void *)v29 + 4) = v19;
      if (v19)
      {
        uint64_t v39 = *((void *)v19 + 1);
        uint64_t v38 = (void *)((char *)v19 + 8);
        uint64_t v37 = v39;
        *((void *)v29 + 5) = v39;
        if (v39) {
          *(void *)(v37 + 16) = v29 + 40;
        }
        *((void *)v29 + 6) = v38;
        *uint64_t v38 = v29 + 32;
      }
      *((_WORD *)v29 + 41) = (126 - 2 * __clz(v35)) & 0x7E | v34;
      v29[124] = 1;
      uint64_t v40 = *(void *)(a2 + 40);
      *((void *)v29 + 13) = v40;
      *(_WORD *)(v40 + 18) &= ~0x8000u;
      if ((v29[87] & 0x10) != 0)
      {
        uint64_t v42 = *(void *)(v40 + 56);
        if (v42)
        {
          char v43 = *(llvm::ValueSymbolTable **)(v42 + 104);
          if (v43) {
            llvm::ValueSymbolTable::reinsertValue(v43, v33);
          }
        }
      }
      uint64_t v41 = *v17;
      *((void *)v30 + 11) = *v17;
      *((void *)v30 + 12) = v17;
      *(void *)(v41 + 8) = v36;
      *uint64_t v17 = (uint64_t)v36;
      a6 -= a5;
      a7 += a5;
    }
    while (a6 >= a5);
  }
  return a6;
}

uint64_t sub_1CC81A65C()
{
  uint64_t v4 = &v3;
  int v2 = 1;
  int v3 = 256;
  *(void *)&long long v1 = "Don't expand MemMove if the size is bigger than this number";
  *((void *)&v1 + 1) = 59;
  sub_1CD642E24(&v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CC816390, &qword_1EBCDC190, &dword_1CB82C000);
  int v2 = 1;
  int v3 = 0x2000;
  uint64_t v4 = &v3;
  *(void *)&long long v1 = "Don't expand MemSet if the size is bigger than this number";
  *((void *)&v1 + 1) = 58;
  sub_1CD642FCC((uint64_t)&unk_1EBCDC258, "memset-expansion-threshold", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CC816390, &unk_1EBCDC258, &dword_1CB82C000);
  int v2 = 1;
  int v3 = 0x2000;
  uint64_t v4 = &v3;
  *(void *)&long long v1 = "Don't expand MemCpy if the size is bigger than this number";
  *((void *)&v1 + 1) = 58;
  sub_1CD642FCC((uint64_t)&unk_1EBCDC320, "memcpy-expansion-threshold", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CC816390, &unk_1EBCDC320, &dword_1CB82C000);
}

void sub_1CC81A78C(uint64_t a1)
{
}

uint64_t sub_1CC81A83C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDC3E8;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261F818;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDC3F0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC81A78C;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCDC3F0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC81A8EC()
{
}

void sub_1CC81A92C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC81A964()
{
  return "Multi Path Object Shader Transform";
}

void sub_1CC81A974(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

uint64_t sub_1CC81A9D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  uint64_t v182 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = *(uint64_t **)(v4 + 8);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (v9 == v10)
  {
LABEL_4:
    uint64_t v11 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v9 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v9 += 16;
      if (v9 == v10) {
        goto LABEL_4;
      }
    }
    uint64_t v11 = *(void *)(v9 + 8);
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v11 + 96))(v11, &llvm::DominatorTreeWrapperPass::ID);
  unint64_t v13 = *(uint64_t **)(v7 + 8);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (v14 == v15)
  {
LABEL_9:
    uint64_t v16 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v14 != &llvm::PostDominatorTreeWrapperPass::ID)
    {
      v14 += 16;
      if (v14 == v15) {
        goto LABEL_9;
      }
    }
    uint64_t v16 = *(void *)(v14 + 8);
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v16 + 96))(v16, &llvm::PostDominatorTreeWrapperPass::ID);
  unint64_t v18 = (uint64_t **)(v17 + 32);
  uint64_t v19 = *(uint64_t **)(v7 + 8);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  if (v20 == v21)
  {
LABEL_14:
    uint64_t v22 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v20 != &llvm::FunctionGroupInfoWrapperPass::ID)
    {
      v20 += 16;
      if (v20 == v21) {
        goto LABEL_14;
      }
    }
    uint64_t v22 = *(void *)(v20 + 8);
  }
  uint64_t v23 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v22 + 96))(v22, &llvm::FunctionGroupInfoWrapperPass::ID);
  uint64_t v24 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v23 + 32) + 24))(*(void *)(v23 + 32), v6);
  if ((*(_WORD *)(v6 + 18) & 0x3FF0) != 0x6A0
    || (sub_1CD112980(*(llvm::Module **)(v6 + 40), (uint64_t)&__s1), !(_BYTE)v159))
  {
LABEL_50:
    if ((*(_WORD *)(v6 + 18) & 0x3FF0) != 0x6A0) {
      return 0;
    }
    uint64_t v39 = *(uint64_t ***)(v6 + 40);
    llvm::Intrinsic::getType(*v39, 2793, 0, 0);
    Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v39, 2793, 0, 0);
    llvm::Module::getOrInsertFunction((uint64_t)v39, "llvm.agx3.object.childcount.write", (const char *)0x21, Type, 0);
    if (!v41) {
      return 0;
    }
    uint64_t v42 = *(void *)(v41 + 8);
    if (!v42) {
      return 0;
    }
    int v43 = 0;
    uint64_t v44 = (const llvm::Instruction *)(v12 + 32);
    uint64_t v45 = *(void *)(v41 + 8);
    do
    {
      uint64_t v45 = *(void *)(v45 + 8);
      --v43;
    }
    while (v45);
    if (!v43) {
      return 0;
    }
    uint64_t v46 = *(void *)(*(void *)(*(void *)(v42 + 24) + 40) + 56);
    do
    {
      uint64_t v46 = *(void *)(v46 + 8);
      if (!v46) {
        return 0;
      }
    }
    while (*(void *)(*(void *)(*(void *)(v46 + 24) + 40) + 56) != v6);
    uint64_t v47 = *(uint64_t ***)(v6 + 40);
    uint64_t v48 = sub_1CD110204(v47, 2792, 0, 0);
    if (!v48) {
      return sub_1CC81ED84(**v18);
    }
    uint64_t v174 = v176;
    uint64_t v175 = 0x800000000;
    uint64_t v49 = *(void *)(v48 + 8);
    if (!v49) {
      goto LABEL_138;
    }
    unsigned int v50 = 0;
    uint64_t v51 = 0;
    char v147 = v47;
    char v52 = (const llvm::APInt *)(v47 + 34);
    do
    {
      uint64_t v53 = *(void *)(v49 + 24);
      if (v53 && *(unsigned char *)(v53 + 16) == 84 && *(void *)(*(void *)(v53 + 40) + 56) == v6)
      {
        if (v50 >= HIDWORD(v175)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v174 + v50) = v53;
        unsigned int v50 = v175 + 1;
        LODWORD(v175) = v175 + 1;
        if (!v51) {
          uint64_t v51 = *(void *)(v53 - 32 * (*(_DWORD *)(v53 + 20) & 0x7FFFFFF) + 32);
        }
      }
      uint64_t v49 = *(void *)(v49 + 8);
    }
    while (v49);
    if (!v50)
    {
LABEL_138:
      uint64_t v76 = sub_1CC81ED84(**v18);
      goto LABEL_273;
    }
    uint64_t v144 = v24;
    unint64_t v54 = (char *)v174;
    unint64_t v55 = (char *)v174 + 8 * v50;
    int v146 = 1;
    while (1)
    {
      uint64_t v56 = *(void *)v54;
      int v57 = *(_DWORD *)(*(void *)v54 + 20);
      if ((v57 & 0x40000000) != 0) {
        uint64_t v58 = *(llvm ***)(v56 - 8);
      }
      else {
        uint64_t v58 = (llvm **)(v56 - 32 * (v57 & 0x7FFFFFF));
      }
      unsigned __int16 v59 = *v58;
      LODWORD(v170) = 4;
      uint64_t v169 = 1;
      LOBYTE(v138) = 1;
      llvm::computeKnownBits(v59, (const llvm::Value *)&v169, v52, 0, 0, v44, 0, 0, (uint64_t)&__s1, v138, v141);
      if (v170 >= 0x41 && v169) {
        MEMORY[0x1D25D9CB0](v169, 0x1000C8000313F17);
      }
      LODWORD(v178) = 4;
      int v177 = (void *)2;
      LOBYTE(v139) = 1;
      llvm::computeKnownBits(v59, (const llvm::Value *)&v177, v52, 0, 0, v44, 0, 0, (uint64_t)&v169, v139, v142);
      if (v178 >= 0x41 && v177) {
        MEMORY[0x1D25D9CB0](v177, 0x1000C8000313F17);
      }
      LODWORD(v150) = 4;
      uint64_t v149 = (void *)4;
      LOBYTE(v140) = 1;
      llvm::computeKnownBits(v59, (const llvm::Value *)&v149, v52, 0, 0, v44, 0, 0, (uint64_t)&v177, v140, v143);
      if (v150 >= 0x41 && v149) {
        MEMORY[0x1D25D9CB0](v149, 0x1000C8000313F17);
      }
      if (v159 > 0x40)
      {
        int v60 = 0;
        int64_t v61 = ((unint64_t)v159 + 63) >> 6;
        do
        {
          BOOL v62 = v61-- < 1;
          if (v62) {
            break;
          }
          unint64_t v63 = v158[v61];
          v60 += __clz(v63);
        }
        while (!v63);
        int v64 = v159 | 0xFFFFFFC0;
        if ((v159 & 0x3F) == 0) {
          int v64 = 0;
        }
        if (v60 + v64 == v159) {
          goto LABEL_104;
        }
      }
      else if (!v158)
      {
        goto LABEL_104;
      }
      if (v172 > 0x40)
      {
        int v66 = 0;
        int64_t v67 = ((unint64_t)v172 + 63) >> 6;
        do
        {
          BOOL v62 = v67-- < 1;
          if (v62) {
            break;
          }
          unint64_t v68 = *(void *)(v171 + 8 * v67);
          v66 += __clz(v68);
        }
        while (!v68);
        int v69 = v172 | 0xFFFFFFC0;
        if ((v172 & 0x3F) == 0) {
          int v69 = 0;
        }
        if (v66 + v69 != v172)
        {
LABEL_96:
          if (v180 > 0x40)
          {
            int v71 = 0;
            int64_t v72 = ((unint64_t)v180 + 63) >> 6;
            do
            {
              BOOL v62 = v72-- < 1;
              if (v62) {
                break;
              }
              unint64_t v73 = *(void *)(v179 + 8 * v72);
              v71 += __clz(v73);
            }
            while (!v73);
            int v74 = v180 | 0xFFFFFFC0;
            if ((v180 & 0x3F) == 0) {
              int v74 = 0;
            }
            BOOL v65 = v71 + v74 == v180;
          }
          else
          {
            BOOL v65 = v179 == 0;
          }
          int v70 = v65;
          v146 &= v70 ^ 1;
          goto LABEL_115;
        }
      }
      else if (v171)
      {
        goto LABEL_96;
      }
LABEL_104:
      int v146 = 0;
      int v70 = 1;
LABEL_115:
      if (v180 >= 0x41 && v179) {
        MEMORY[0x1D25D9CB0](v179, 0x1000C8000313F17);
      }
      if (v178 >= 0x41 && v177) {
        MEMORY[0x1D25D9CB0](v177, 0x1000C8000313F17);
      }
      if (v172 >= 0x41 && v171) {
        MEMORY[0x1D25D9CB0](v171, 0x1000C8000313F17);
      }
      if (v170 >= 0x41 && v169) {
        MEMORY[0x1D25D9CB0](v169, 0x1000C8000313F17);
      }
      if (v159 >= 0x41 && v158) {
        MEMORY[0x1D25D9CB0](v158, 0x1000C8000313F17);
      }
      if (v157 >= 0x41 && __s1) {
        MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
      }
      v54 += 8;
      if (v54 == v55) {
        int v75 = 1;
      }
      else {
        int v75 = v70;
      }
      if (v75 == 1)
      {
        uint64_t v77 = *(unsigned int *)(v17 + 40);
        if (v77)
        {
          int64_t v78 = *(uint64_t **)(v17 + 32);
          uint64_t v79 = 8 * v77;
          unsigned int v80 = (llvm::Module *)v147;
          do
          {
            uint64_t v81 = *v78;
            uint64_t v82 = *(void *)(*v78 + 40);
            if (v82) {
              uint64_t v83 = v82 - 24;
            }
            else {
              uint64_t v83 = 0;
            }
            if (*(unsigned __int8 *)(v83 + 16) - 29 >= 0xB) {
              uint64_t v83 = 0;
            }
            if (*(unsigned char *)(v83 + 16) == 29) {
              goto LABEL_151;
            }
            ++v78;
            v79 -= 8;
          }
          while (v79);
          uint64_t v81 = 0;
        }
        else
        {
          uint64_t v81 = 0;
          unsigned int v80 = (llvm::Module *)v147;
        }
LABEL_151:
        for (uint64_t i = *(void *)(v81 + 48); i != v81 + 40; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v85 = i - 24;
          if (i) {
            uint64_t v86 = i - 24;
          }
          else {
            uint64_t v86 = 0;
          }
          if (*(unsigned char *)(v86 + 16) == 84)
          {
            uint64_t v87 = *(void *)(v86 - 32);
            if (v87)
            {
              if (!*(unsigned char *)(v87 + 16)
                && *(void *)(v87 + 24) == *(void *)(v86 + 72)
                && (*(unsigned char *)(v87 + 33) & 0x20) != 0
                && *(_DWORD *)(v87 + 36) == 2668)
              {
                uint64_t v88 = *(void *)(v86 + 32);
                uint64_t v89 = v88 - 24;
                if (!v88) {
                  uint64_t v89 = 0;
                }
                if (*(unsigned char *)(v89 + 16) == 84)
                {
                  uint64_t v90 = *(void *)(v89 - 32);
                  if (v90)
                  {
                    if (!*(unsigned char *)(v90 + 16)
                      && *(void *)(v90 + 24) == *(void *)(v89 + 72)
                      && (*(unsigned char *)(v90 + 33) & 0x20) != 0
                      && *(_DWORD *)(*(void *)(v88 - 56) + 36) == 2750)
                    {
                      uint64_t v91 = *(void *)(v88 + 8);
                      if (v91)
                      {
                        if (*(unsigned char *)(v91 - 8) == 84)
                        {
                          uint64_t v92 = *(void *)(*(void *)(v86 + 40) + 40);
                          if (v92) {
                            uint64_t v93 = v92 - 24;
                          }
                          else {
                            uint64_t v93 = 0;
                          }
                          if (*(unsigned __int8 *)(v93 + 16) - 29 >= 0xB) {
                            uint64_t v93 = 0;
                          }
                          if (*(unsigned char *)(v93 + 16) == 29) {
                            goto LABEL_180;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v85 = 0;
LABEL_180:
        if (sub_1CC81F050(v6, v81, v85))
        {
          uint64_t v169 = 1;
          for (uint64_t j = 8; j != 520; j += 32)
            *(uint64_t *)((char *)&v169 + j) = -4096;
          sub_1CD10AFA4(v80, (uint64_t)&v169);
          unsigned int v166 = &v168;
          uint64_t v167 = 0x800000000;
          uint64_t v95 = v6 + 72;
          uint64_t v96 = *(void *)(v6 + 80);
          if (v96 == v6 + 72)
          {
            int v97 = 0;
            int v148 = 0;
LABEL_229:
            __s1 = (char *)1;
            for (uint64_t k = 1; k != 209; k += 13)
              (&__s1)[k] = (char *)-4096;
            uint64_t v161 = 1;
            for (uint64_t m = 210; m != 418; m += 13)
              (&__s1)[m] = (char *)-4096;
            uint64_t v162 = v18;
            uint64_t v163 = v165;
            uint64_t v164 = 0xA00000000;
            v165[40] = 1;
            for (uint64_t n = 462; n != 478; n += 2)
              (&__s1)[n] = (char *)-4096;
            sub_1CC81F11C((uint64_t)&__s1, v6);
            v154[0] = &unk_1F261F8B8;
            v154[1] = sub_1CC81FD40;
            uint64_t v155 = v154;
            int v114 = sub_1CC81F2F0((uint64_t)v52, (uint64_t)&__s1, (int *)&v169, v148 != 0, (uint64_t)&v174, (uint64_t)v154);
            if (v155 == v154)
            {
              (*(void (**)(void *))(v154[0] + 32))(v154);
            }
            else if (v155)
            {
              (*(void (**)(void))(*v155 + 40))();
            }
            v152[0] = &unk_1F261F8B8;
            v152[1] = sub_1CC81FEF0;
            uint64_t v153 = v152;
            char v115 = sub_1CC81F2F0((uint64_t)v52, (uint64_t)&__s1, (int *)&v169, v148 != 0, (uint64_t)&v166, (uint64_t)v152);
            if (v153 == v152)
            {
              (*(void (**)(void *))(v152[0] + 32))(v152);
            }
            else if (v153)
            {
              (*(void (**)(void))(*v153 + 40))();
            }
            int v116 = v146 ^ 1;
            if (!v97) {
              int v116 = 0;
            }
            if (v115) {
              int v117 = 1;
            }
            else {
              int v117 = v116;
            }
            (*(void (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*(void *)v144 + 8))(v144, 38, v114 | v117, 1, 0, 1, 2);
            int v177 = "twostage.entry";
            LOWORD(v181) = 259;
            operator new();
          }
          int v148 = 0;
          int v97 = 0;
          uint64_t v98 = v85 + 24;
          if (!v85) {
            uint64_t v98 = 0;
          }
          uint64_t v145 = v98;
LABEL_187:
          uint64_t v99 = v95;
          uint64_t v100 = v96 - 24;
          if (!v96) {
            uint64_t v100 = 0;
          }
          if (v100 == v81) {
            uint64_t v101 = v145;
          }
          else {
            uint64_t v101 = v100 + 40;
          }
          for (iuint64_t i = *(void *)(v100 + 48); ; iuint64_t i = *(void *)(ii + 8))
          {
            if (ii == v101)
            {
              uint64_t v96 = *(void *)(v96 + 8);
              uint64_t v95 = v99;
              if (v96 == v99) {
                goto LABEL_229;
              }
              goto LABEL_187;
            }
            if (ii) {
              uint64_t v103 = ii - 24;
            }
            else {
              uint64_t v103 = 0;
            }
            if (sub_1CC81FD40(v103))
            {
              if (*(unsigned char *)(v103 + 16) == 84)
              {
                uint64_t v104 = *(void *)(v103 - 32);
                if (v104)
                {
                  if (!*(unsigned char *)(v104 + 16)
                    && *(void *)(v104 + 24) == *(void *)(v103 + 72)
                    && (*(unsigned char *)(v104 + 33) & 0x20) != 0)
                  {
                    int v109 = *(_DWORD *)(*(void *)(ii - 56) + 36);
                    BOOL v110 = (v109 - 2622) > 0x2E
                        || ((1 << (v109 - 62)) & 0x460000000001) == 0;
                    if (!v110 || (v109 - 2421) < 2 || v109 == 2577) {
                      continue;
                    }
                    if ((v109 - 1682) < 0x8C)
                    {
                      int v97 = 1;
                      continue;
                    }
                  }
                }
              }
              unsigned int v105 = sub_1CC7A57E4(v103);
              if (v105 == 0xFFFFFFFFLL)
              {
                int v97 = 1;
LABEL_213:
                int v148 = 1;
                continue;
              }
              int v106 = *(_DWORD *)(v103 + 20);
              if ((v106 & 0x40000000) != 0) {
                uint64_t v107 = *(void *)(v103 - 8);
              }
              else {
                uint64_t v107 = v103 - 32 * (v106 & 0x7FFFFFF);
              }
              int v108 = *(_DWORD *)(**(void **)(v107 + 32 * v105) + 8) >> 8;
              if (v108 == 1)
              {
                int v97 = 1;
                goto LABEL_213;
              }
              if (v108 == 6)
              {
                if (v167 >= (unint64_t)HIDWORD(v167)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v166 + v167) = v103;
                LODWORD(v167) = v167 + 1;
              }
            }
          }
        }
        uint64_t v76 = 0;
LABEL_273:
        if (v174 != v176) {
          free(v174);
        }
        return v76;
      }
    }
  }
  unint64_t v25 = HIBYTE(v158);
  char v26 = HIBYTE(v158);
  uint64_t v27 = HIBYTE(v158) & 0x7F;
  if (SHIBYTE(v158) < 0) {
    uint64_t v27 = v157;
  }
  if (v27 != 18)
  {
    char v30 = 0;
    goto LABEL_31;
  }
  if (SHIBYTE(v158) < 0)
  {
    p_s1 = (char **)__s1;
    unint64_t v25 = v157;
  }
  else
  {
    p_s1 = &__s1;
  }
  if (v25 >= 0x12) {
    size_t v29 = 18;
  }
  else {
    size_t v29 = v25;
  }
  char v30 = 0;
  if (memcmp(p_s1, "object_passthrough", v29) || v25 != 18)
  {
LABEL_31:
    if (v26 < 0)
    {
      operator delete(__s1);
      if (v30) {
        goto LABEL_33;
      }
    }
    else if (v30)
    {
      goto LABEL_33;
    }
    goto LABEL_50;
  }
  unsigned int v31 = *(uint64_t ***)(v6 + 40);
  llvm::Intrinsic::getType(*v31, 2793, 0, 0);
  uint64_t v32 = (llvm::PointerType *)llvm::Intrinsic::getType(*v31, 2793, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)v31, "llvm.agx3.object.childcount.write", (const char *)0x21, v32, 0);
  if ((_BYTE)v159)
  {
    char v30 = 1;
    char v26 = HIBYTE(v158);
    goto LABEL_31;
  }
LABEL_33:
  uint64_t v33 = **v18;
  __int16 v34 = *(void **)(v33 + 40);
  if (v34 == (void *)(v33 + 40)) {
    return 0;
  }
  unint64_t v35 = 0;
  while (1)
  {
    if (v34) {
      uint64_t v36 = v34 - 3;
    }
    else {
      uint64_t v36 = 0;
    }
    if (*((unsigned char *)v36 + 16) != 84) {
      goto LABEL_47;
    }
    uint64_t v37 = *(v36 - 4);
    if (!v37 || *(unsigned char *)(v37 + 16) || *(void *)(v37 + 24) != v36[9] || (*(unsigned char *)(v37 + 33) & 0x20) == 0) {
      goto LABEL_47;
    }
    int v38 = *(_DWORD *)(*(v34 - 7) + 36);
    if (v38 == 2793)
    {
      unint64_t v35 = v34 - 3;
      goto LABEL_47;
    }
    if (v38 == 2421) {
      break;
    }
LABEL_47:
    __int16 v34 = (void *)*v34;
    if (v34 == (void *)(v33 + 40)) {
      return 0;
    }
  }
  if (v35 && sub_1CC81F050(v6, **v18, (uint64_t)(v34 - 3)))
  {
    unsigned int v118 = *(void **)(v33 + 48);
    if (!v118 || v118 != v34)
    {
      __s1 = "twostage.ret";
      LOWORD(v160) = 259;
      llvm::BasicBlock::splitBasicBlock(v33, (uint64_t)v34, (uint64_t)&__s1, 0);
    }
    LODWORD(v171) = 128;
    uint64_t v119 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
    uint64_t v169 = (uint64_t)v119;
    uint64_t v170 = 0;
    uint64_t v157 = 2;
    uint64_t v158 = 0;
    uint64_t v159 = -4096;
    __s1 = (char *)&unk_1F2615EC8;
    uint64_t v160 = 0;
    if (v171)
    {
      uint64_t v120 = 0;
      unint64_t v121 = (unint64_t)v171 << 6;
      int v122 = v119 + 16;
      do
      {
        uint64_t v123 = v157;
        uint64_t v124 = v159;
        *(v122 - 1) = v157 & 6;
        *int v122 = 0;
        v122[1] = v124;
        if (v124 != -4096 && v124 != -8192 && v124 != 0)
        {
          *int v122 = *(void *)(v123 & 0xFFFFFFFFFFFFFFF8);
          *(void *)(v123 & 0xFFFFFFFFFFFFFFF8) = v122 - 1;
          *(v122 - 1) = v123 & 0xFFFFFFFFFFFFFFFELL;
          if (*v122) {
            *(void *)*int v122 = *(void *)*v122 & 7 | (unint64_t)(v119 + 16);
          }
          uint64_t v120 = v160;
        }
        *(v122 - 2) = &unk_1F2615EC8;
        v122[2] = v120;
        v122 += 8;
        v119 += 64;
        v121 -= 64;
      }
      while (v121);
      if (v159 != -8192 && v159 != -4096 && v159)
      {
        unint64_t v127 = v157 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v157 & 0xFFFFFFFFFFFFFFF8) = v158;
        if (v158)
        {
          *uint64_t v158 = *v158 & 7 | v127;
        }
        else
        {
          uint64_t v128 = v159;
          unsigned int v129 = ***(int32x2_t ****)v159;
          unint64_t v130 = (unint64_t)v129[303];
          if (v130 <= v127)
          {
            uint64_t v131 = v129[305].u32[0];
            if (v130 + 16 * v131 > v127)
            {
              unsigned int v132 = v131 - 1;
              LODWORD(v133) = v132 & ((v159 >> 4) ^ (v159 >> 9));
              uint64_t v134 = (uint64_t *)(v130 + 16 * v133);
              uint64_t v135 = *v134;
              if (v159 != *v134)
              {
                int v136 = 1;
                do
                {
                  if (v135 == -4096) {
                    goto LABEL_284;
                  }
                  int v137 = v133 + v136++;
                  uint64_t v133 = v137 & v132;
                  uint64_t v135 = *(void *)(v130 + 16 * v133);
                }
                while (v159 != v135);
                uint64_t v134 = (uint64_t *)(v130 + 16 * v133);
              }
              *uint64_t v134 = -8192;
              v129[304] = vadd_s32(v129[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v128 = v159;
LABEL_284:
              *(unsigned char *)(v128 + 17) &= ~1u;
            }
          }
        }
      }
    }
    LOBYTE(v172) = 0;
    char v173 = 0;
    uint64_t v149 = &v151;
    uint64_t v150 = 0x100000000;
    uint64_t v174 = v176;
    uint64_t v175 = 0x100000000;
    __s1 = ".gOS";
    LOWORD(v160) = 259;
    llvm::CloneBasicBlock();
  }
  return 0;
}

uint64_t sub_1CC81ED84(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 48); i != a1 + 40; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      uint64_t v2 = i - 24;
    }
    else {
      uint64_t v2 = 0;
    }
    if (*(unsigned char *)(v2 + 16) == 84)
    {
      uint64_t v3 = *(void *)(v2 - 32);
      if (v3)
      {
        if (!*(unsigned char *)(v3 + 16)
          && *(void *)(v3 + 24) == *(void *)(v2 + 72)
          && (*(unsigned char *)(v3 + 33) & 0x20) != 0
          && *(_DWORD *)(v3 + 36) == 2668)
        {
          uint64_t v4 = *(void *)(v2 + 32);
          uint64_t v5 = v4 - 24;
          if (!v4) {
            uint64_t v5 = 0;
          }
          if (*(unsigned char *)(v5 + 16) == 84)
          {
            uint64_t v6 = *(void *)(v5 - 32);
            if (v6)
            {
              if (!*(unsigned char *)(v6 + 16)
                && *(void *)(v6 + 24) == *(void *)(v5 + 72)
                && (*(unsigned char *)(v6 + 33) & 0x20) != 0
                && *(_DWORD *)(*(void *)(v4 - 56) + 36) == 2750)
              {
                uint64_t v7 = *(void *)(v4 + 8);
                if (v7)
                {
                  if (*(unsigned char *)(v7 - 8) == 84)
                  {
                    uint64_t v8 = *(void *)(*(void *)(v2 + 40) + 40);
                    if (v8) {
                      uint64_t v9 = v8 - 24;
                    }
                    else {
                      uint64_t v9 = 0;
                    }
                    if (*(unsigned __int8 *)(v9 + 16) - 29 >= 0xB) {
                      uint64_t v9 = 0;
                    }
                    if (*(unsigned char *)(v9 + 16) == 29) {
                      operator new();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CC81F050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1 + 72;
  uint64_t v4 = *(void *)(a1 + 80);
  if (v4 != a1 + 72)
  {
    if (a3) {
      uint64_t v6 = a3 + 24;
    }
    else {
      uint64_t v6 = 0;
    }
    do
    {
      uint64_t v7 = v4 - 24;
      if (!v4) {
        uint64_t v7 = 0;
      }
      if (v7 == a2)
      {
        for (uint64_t i = *(void *)(a2 + 48); i != v6; uint64_t i = *(void *)(i + 8))
        {
          if (i) {
            uint64_t v12 = i - 24;
          }
          else {
            uint64_t v12 = 0;
          }
          if (sub_1CC81FD40(v12)) {
            return 1;
          }
        }
      }
      else
      {
        uint64_t v8 = v7 + 40;
        for (uint64_t j = *(void *)(v7 + 48); j != v8; uint64_t j = *(void *)(j + 8))
        {
          if (j) {
            uint64_t v10 = j - 24;
          }
          else {
            uint64_t v10 = 0;
          }
          if (sub_1CC81FD40(v10)) {
            return 1;
          }
        }
      }
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != v3);
  }
  return 0;
}

void *sub_1CC81F11C(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 3344);
  uint64_t v19 = 1;
  uint64_t v4 = &v20;
  for (uint64_t i = 8; i != 1672; i += 104)
    *(uint64_t *)((char *)&v19 + i) = -4096;
  uint64_t v22 = 1;
  uint64_t v6 = &v23;
  for (uint64_t j = 1680; j != 3344; j += 104)
    *(uint64_t *)((char *)&v19 + j) = -4096;
  sub_1CC820B60((uint64_t)&v19, a2, v3);
  sub_1CC821768(a1, (unsigned int *)&v19);
  sub_1CC821768(a1 + 1672, (unsigned int *)&v22);
  char v8 = v22;
  if (v22)
  {
    unsigned int v9 = 16;
  }
  else
  {
    unsigned int v9 = v24;
    if (!v24) {
      goto LABEL_14;
    }
    uint64_t v6 = v23;
  }
  uint64_t v10 = 104 * v9;
  uint64_t v11 = (void **)(v6 + 2);
  do
  {
    uint64_t v12 = (uint64_t)*(v11 - 2);
    if (v12 != -4096 && v12 != -8192 && *v11 != *(v11 - 1)) {
      free(*v11);
    }
    v11 += 13;
    v10 -= 104;
  }
  while (v10);
  char v8 = v22;
LABEL_14:
  if ((v8 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v23, 8);
  }
  char v13 = v19;
  if (v19)
  {
    unsigned int v14 = 16;
  }
  else
  {
    unsigned int v14 = v21;
    if (!v21) {
      goto LABEL_25;
    }
    uint64_t v4 = v20;
  }
  uint64_t v15 = 104 * v14;
  uint64_t v16 = (void **)(v4 + 2);
  do
  {
    uint64_t v17 = (uint64_t)*(v16 - 2);
    if (v17 != -4096 && v17 != -8192 && *v16 != *(v16 - 1)) {
      free(*v16);
    }
    v16 += 13;
    v15 -= 104;
  }
  while (v15);
  char v13 = v19;
LABEL_25:
  if ((v13 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v20, 8);
  }
  return sub_1CC820AE8(a1);
}

uint64_t sub_1CC81F2F0(uint64_t a1, uint64_t a2, int *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  unsigned int v113 = v117;
  int v114 = v117;
  uint64_t v115 = 8;
  int v116 = 0;
  int v108 = v112;
  int v109 = v112;
  uint64_t v110 = 8;
  int v111 = 0;
  unsigned int v6 = *(_DWORD *)(a5 + 8);
  if (!v6)
  {
    uint64_t v102 = 0;
    goto LABEL_253;
  }
  do
  {
    uint64_t v9 = *(void *)(*(void *)a5 + 8 * v6 - 8);
    *(_DWORD *)(a5 + 8) = v6 - 1;
    uint64_t v11 = v113;
    uint64_t v10 = v114;
    if (v114 == v113)
    {
      unsigned int v12 = HIDWORD(v115);
      char v13 = &v114[8 * HIDWORD(v115)];
      if (HIDWORD(v115))
      {
        uint64_t v14 = 0;
        while (*(void *)&v114[v14] != v9)
        {
          v14 += 8;
          if (8 * HIDWORD(v115) == v14) {
            goto LABEL_21;
          }
        }
        char v13 = &v114[v14];
      }
LABEL_21:
      uint64_t v11 = v114;
    }
    else
    {
      int v15 = v115 - 1;
      unsigned int v16 = (v115 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      char v13 = &v114[8 * v16];
      uint64_t v17 = *(void *)v13;
      if (*(void *)v13 == -1)
      {
        unint64_t v18 = 0;
LABEL_52:
        if (v18) {
          char v13 = v18;
        }
        unsigned int v12 = HIDWORD(v115);
        if (*(void *)v13 != v9) {
          char v13 = &v114[8 * v115];
        }
      }
      else
      {
        unint64_t v18 = 0;
        int v19 = 1;
        while (v17 != v9)
        {
          if (v18) {
            BOOL v20 = 0;
          }
          else {
            BOOL v20 = v17 == -2;
          }
          if (v20) {
            unint64_t v18 = v13;
          }
          unsigned int v21 = v16 + v19++;
          unsigned int v16 = v21 & v15;
          char v13 = &v114[8 * (v21 & v15)];
          uint64_t v17 = *(void *)v13;
          if (*(void *)v13 == -1) {
            goto LABEL_52;
          }
        }
        unsigned int v12 = HIDWORD(v115);
      }
    }
    unsigned int v22 = v115;
    if (v114 == v11) {
      int v23 = v12;
    }
    else {
      int v23 = v115;
    }
    if (v13 == &v114[8 * v23])
    {
      if (v114 == v11)
      {
        if (v12)
        {
          unsigned int v24 = 0;
          uint64_t v25 = 8 * v12;
          char v26 = (uint64_t *)v114;
          while (*v26 != v9)
          {
            if (*v26 == -2) {
              unsigned int v24 = v26;
            }
            ++v26;
            v25 -= 8;
            if (!v25)
            {
              if (!v24) {
                goto LABEL_36;
              }
              *unsigned int v24 = v9;
              --v116;
              break;
            }
          }
LABEL_65:
          sub_1CC539EC8((uint64_t)v121, a6);
          if (!v122) {
            sub_1CB920400();
          }
          if ((*(uint64_t (**)(void *, uint64_t))(*v122 + 48))(v122, v9))
          {
            char v36 = 1;
LABEL_80:
            if (v122 == v121)
            {
              (*(void (**)(void *))(v121[0] + 32))(v121);
              if (v36) {
                goto LABEL_250;
              }
            }
            else
            {
              if (v122) {
                (*(void (**)(void *))(*v122 + 40))(v122);
              }
              if (v36)
              {
LABEL_250:
                uint64_t v102 = 1;
                goto LABEL_251;
              }
            }
            if (!v9 || *(unsigned char *)(v9 + 16) != 83)
            {
LABEL_147:
              uint64_t v65 = *(void *)(v9 + 40);
              int64_t v67 = v108;
              int v66 = v109;
              if (v109 == v108)
              {
                unsigned int v68 = HIDWORD(v110);
                int v69 = &v109[8 * HIDWORD(v110)];
                if (HIDWORD(v110))
                {
                  uint64_t v70 = 0;
                  while (*(void *)&v109[v70] != v65)
                  {
                    v70 += 8;
                    if (8 * HIDWORD(v110) == v70) {
                      goto LABEL_166;
                    }
                  }
                  int v69 = &v109[v70];
                }
LABEL_166:
                int64_t v67 = v109;
              }
              else
              {
                int v71 = v110 - 1;
                unsigned int v72 = (v110 - 1) & ((v65 >> 4) ^ (v65 >> 9));
                int v69 = &v109[8 * v72];
                uint64_t v73 = *(void *)v69;
                if (*(void *)v69 == -1)
                {
                  int v74 = 0;
LABEL_233:
                  if (v74) {
                    int v69 = v74;
                  }
                  unsigned int v68 = HIDWORD(v110);
                  if (*(void *)v69 != v65) {
                    int v69 = &v109[8 * v110];
                  }
                }
                else
                {
                  int v74 = 0;
                  int v75 = 1;
                  while (v73 != v65)
                  {
                    if (v74) {
                      BOOL v76 = 0;
                    }
                    else {
                      BOOL v76 = v73 == -2;
                    }
                    if (v76) {
                      int v74 = v69;
                    }
                    unsigned int v77 = v72 + v75++;
                    unsigned int v72 = v77 & v71;
                    int v69 = &v109[8 * (v77 & v71)];
                    uint64_t v73 = *(void *)v69;
                    if (*(void *)v69 == -1) {
                      goto LABEL_233;
                    }
                  }
                  unsigned int v68 = HIDWORD(v110);
                }
              }
              int v78 = v110;
              if (v109 == v67) {
                int v78 = v68;
              }
              if (v69 == &v109[8 * v78])
              {
                sub_1CC821C60((uint64_t)&v118, *(void **)(v9 + 40), (uint64_t)&v108, a2);
                uint64_t v79 = v118;
                if (v119)
                {
                  uint64_t v80 = 8 * v119;
                  do
                  {
                    if (*(void *)v79) {
                      BOOL v81 = *(unsigned __int8 *)(*(void *)v79 + 16) >= 0x1Cu;
                    }
                    else {
                      BOOL v81 = 0;
                    }
                    if (v81)
                    {
                      unint64_t v82 = *(unsigned int *)(a5 + 8);
                      if (v82 >= *(unsigned int *)(a5 + 12)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *(void *)(*(void *)a5 + 8 * v82) = *(void *)v79;
                      ++*(_DWORD *)(a5 + 8);
                    }
                    v79 += 8;
                    v80 -= 8;
                  }
                  while (v80);
                  uint64_t v79 = v118;
                }
                if (v79 != v120) {
                  free(v79);
                }
                uint64_t v65 = *(void *)(v9 + 40);
                int64_t v67 = v108;
                int v66 = v109;
                unsigned int v68 = HIDWORD(v110);
              }
              if (v66 == v67)
              {
                if (v68)
                {
                  uint64_t v83 = 0;
                  uint64_t v84 = 8 * v68;
                  uint64_t v85 = v67;
                  while (*v85 != v65)
                  {
                    if (*v85 == -2) {
                      uint64_t v83 = v85;
                    }
                    ++v85;
                    v84 -= 8;
                    if (!v84)
                    {
                      if (!v83) {
                        goto LABEL_193;
                      }
                      *uint64_t v83 = v65;
                      --v111;
                      goto LABEL_217;
                    }
                  }
                  goto LABEL_217;
                }
LABEL_193:
                unsigned int v86 = v110;
                if (v68 < v110)
                {
                  HIDWORD(v110) = v68 + 1;
                  *(void *)&v67[8 * v68] = v65;
LABEL_217:
                  int v96 = *(_DWORD *)(v9 + 20);
                  if ((v96 & 0x40000000) != 0)
                  {
                    uint64_t v98 = *(void *)(v9 - 8);
                    uint64_t v97 = v96 & 0x7FFFFFF;
                  }
                  else
                  {
                    uint64_t v97 = v96 & 0x7FFFFFF;
                    uint64_t v98 = v9 - 32 * v97;
                  }
                  if (v97)
                  {
                    uint64_t v99 = 32 * v97;
                    do
                    {
                      if (*(void *)v98) {
                        BOOL v100 = *(unsigned __int8 *)(*(void *)v98 + 16) >= 0x1Cu;
                      }
                      else {
                        BOOL v100 = 0;
                      }
                      if (v100)
                      {
                        unint64_t v101 = *(unsigned int *)(a5 + 8);
                        if (v101 >= *(unsigned int *)(a5 + 12)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *(void *)(*(void *)a5 + 8 * v101) = *(void *)v98;
                        ++*(_DWORD *)(a5 + 8);
                      }
                      v98 += 32;
                      v99 -= 32;
                    }
                    while (v99);
                  }
                  goto LABEL_26;
                }
              }
              else
              {
                unsigned int v86 = v110;
              }
              if (3 * v86 <= 4 * (v68 - v111))
              {
                if (v86 >= 0x40) {
                  v86 *= 2;
                }
                else {
                  unsigned int v86 = 128;
                }
              }
              else if (v86 - v68 >= v86 >> 3)
              {
                goto LABEL_198;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v108, v86);
              unsigned int v86 = v110;
              int v66 = v109;
LABEL_198:
              unsigned int v87 = v86 - 1;
              unsigned int v88 = (v86 - 1) & ((v65 >> 4) ^ (v65 >> 9));
              uint64_t v89 = &v66[8 * v88];
              uint64_t v90 = *(void *)v89;
              if (*(void *)v89 == -1)
              {
                uint64_t v91 = 0;
LABEL_210:
                if (v91) {
                  uint64_t v95 = v91;
                }
                else {
                  uint64_t v95 = v89;
                }
                if (*(void *)v95 != v65)
                {
                  if (*(void *)v95 == -2) {
                    --v111;
                  }
                  else {
                    ++HIDWORD(v110);
                  }
                  *(void *)uint64_t v95 = v65;
                }
              }
              else
              {
                uint64_t v91 = 0;
                int v92 = 1;
                while (v90 != v65)
                {
                  if (v91) {
                    BOOL v93 = 0;
                  }
                  else {
                    BOOL v93 = v90 == -2;
                  }
                  if (v93) {
                    uint64_t v91 = v89;
                  }
                  unsigned int v94 = v88 + v92++;
                  unsigned int v88 = v94 & v87;
                  uint64_t v89 = &v66[8 * (v94 & v87)];
                  uint64_t v90 = *(void *)v89;
                  if (*(void *)v89 == -1) {
                    goto LABEL_210;
                  }
                }
              }
              goto LABEL_217;
            }
            int v40 = *(_DWORD *)(v9 + 20);
            if ((v40 & 0x40000000) == 0)
            {
              uint64_t v41 = v40 & 0x7FFFFFF;
              uint64_t v42 = v9 - 32 * v41;
              if (v41) {
                goto LABEL_92;
              }
              goto LABEL_147;
            }
            uint64_t v42 = *(void *)(v9 - 8);
            uint64_t v41 = v40 & 0x7FFFFFF;
            if (!v41) {
              goto LABEL_147;
            }
LABEL_92:
            int v43 = (uint64_t *)(v42 + 32 * *(unsigned int *)(v9 + 60));
            uint64_t v44 = &v43[v41];
            while (1)
            {
              uint64_t v45 = *v43;
              uint64_t v46 = v109;
              uint64_t v47 = HIDWORD(v110);
              if (v109 == v108)
              {
                if (HIDWORD(v110))
                {
                  uint64_t v48 = 0;
                  uint64_t v49 = 8 * HIDWORD(v110);
                  unsigned int v50 = v109;
                  while (*v50 != v45)
                  {
                    if (*v50 == -2) {
                      uint64_t v48 = v50;
                    }
                    ++v50;
                    v49 -= 8;
                    if (!v49)
                    {
                      if (!v48) {
                        goto LABEL_101;
                      }
                      *uint64_t v48 = v45;
                      --v111;
                      goto LABEL_125;
                    }
                  }
                  goto LABEL_139;
                }
LABEL_101:
                unsigned int v51 = v110;
                if (HIDWORD(v110) < v110)
                {
                  ++HIDWORD(v110);
                  *(void *)&v109[8 * v47] = v45;
                  goto LABEL_125;
                }
              }
              else
              {
                unsigned int v51 = v110;
              }
              if (3 * v51 <= 4 * (HIDWORD(v110) - v111)) {
                break;
              }
              if (v51 - HIDWORD(v110) < v51 >> 3) {
                goto LABEL_146;
              }
LABEL_106:
              unsigned int v52 = v51 - 1;
              unsigned int v53 = (v51 - 1) & ((v45 >> 4) ^ (v45 >> 9));
              unint64_t v54 = &v46[8 * v53];
              uint64_t v55 = *(void *)v54;
              if (*(void *)v54 != -1)
              {
                uint64_t v56 = 0;
                int v57 = 1;
                while (v55 != v45)
                {
                  if (v56) {
                    BOOL v58 = 0;
                  }
                  else {
                    BOOL v58 = v55 == -2;
                  }
                  if (v58) {
                    uint64_t v56 = v54;
                  }
                  unsigned int v59 = v53 + v57++;
                  unsigned int v53 = v59 & v52;
                  unint64_t v54 = &v46[8 * (v59 & v52)];
                  uint64_t v55 = *(void *)v54;
                  if (*(void *)v54 == -1) {
                    goto LABEL_118;
                  }
                }
                goto LABEL_139;
              }
              uint64_t v56 = 0;
LABEL_118:
              if (v56) {
                int v60 = v56;
              }
              else {
                int v60 = v54;
              }
              if (*(void *)v60 == v45) {
                goto LABEL_139;
              }
              if (*(void *)v60 == -2) {
                --v111;
              }
              else {
                ++HIDWORD(v110);
              }
              *(void *)int v60 = v45;
LABEL_125:
              sub_1CC821C60((uint64_t)&v118, *(void **)(v9 + 40), (uint64_t)&v108, a2);
              int64_t v61 = v118;
              if (v119)
              {
                uint64_t v62 = 8 * v119;
                do
                {
                  if (*(void *)v61) {
                    BOOL v63 = *(unsigned __int8 *)(*(void *)v61 + 16) >= 0x1Cu;
                  }
                  else {
                    BOOL v63 = 0;
                  }
                  if (v63)
                  {
                    unint64_t v64 = *(unsigned int *)(a5 + 8);
                    if (v64 >= *(unsigned int *)(a5 + 12)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *(void *)(*(void *)a5 + 8 * v64) = *(void *)v61;
                    ++*(_DWORD *)(a5 + 8);
                  }
                  v61 += 8;
                  v62 -= 8;
                }
                while (v62);
                int64_t v61 = v118;
              }
              if (v61 != v120) {
                free(v61);
              }
LABEL_139:
              if (++v43 == v44) {
                goto LABEL_147;
              }
            }
            if (v51 >= 0x40) {
              v51 *= 2;
            }
            else {
              unsigned int v51 = 128;
            }
LABEL_146:
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v108, v51);
            unsigned int v51 = v110;
            uint64_t v46 = v109;
            goto LABEL_106;
          }
          if (*(unsigned char *)(v9 + 16) == 60)
          {
            uint64_t v37 = **(void **)(v9 - 32);
            unsigned int v38 = *(_DWORD *)(v37 + 8);
            if ((v38 & 0xFE) == 0x12) {
              unsigned int v38 = *(_DWORD *)(**(void **)(v37 + 16) + 8);
            }
            char v36 = 0;
            int v39 = v38 >> 8;
            if (v39 > 2)
            {
              if (v39 == 64) {
                goto LABEL_80;
              }
              if (v39 != 3) {
                goto LABEL_79;
              }
            }
            else if (v39 >= 2)
            {
              if (v39 == 2) {
                goto LABEL_80;
              }
LABEL_79:
              char v36 = sub_1CD10A990(v9, a1, a3, 1) ^ 1;
              goto LABEL_80;
            }
            if (a4) {
              goto LABEL_79;
            }
          }
          char v36 = 0;
          goto LABEL_80;
        }
LABEL_36:
        if (v115 > v12)
        {
          HIDWORD(v115) = v12 + 1;
          *(void *)&v114[8 * v12] = v9;
          goto LABEL_65;
        }
      }
      if (3 * (int)v115 <= 4 * (v12 - v116))
      {
        if (v115 >= 0x40) {
          unsigned int v22 = 2 * v115;
        }
        else {
          unsigned int v22 = 128;
        }
      }
      else if (v115 - v12 >= v115 >> 3)
      {
        goto LABEL_40;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v113, v22);
      unsigned int v22 = v115;
      uint64_t v10 = v114;
LABEL_40:
      unsigned int v27 = v22 - 1;
      unsigned int v28 = (v22 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      size_t v29 = &v10[8 * v28];
      uint64_t v30 = *(void *)v29;
      if (*(void *)v29 == -1)
      {
        unsigned int v31 = 0;
LABEL_58:
        if (v31) {
          unint64_t v35 = v31;
        }
        else {
          unint64_t v35 = (uint64_t *)v29;
        }
        if (*v35 != v9)
        {
          if (*v35 == -2) {
            --v116;
          }
          else {
            ++HIDWORD(v115);
          }
          uint64_t *v35 = v9;
        }
      }
      else
      {
        unsigned int v31 = 0;
        int v32 = 1;
        while (v30 != v9)
        {
          if (v31) {
            BOOL v33 = 0;
          }
          else {
            BOOL v33 = v30 == -2;
          }
          if (v33) {
            unsigned int v31 = (uint64_t *)v29;
          }
          unsigned int v34 = v28 + v32++;
          unsigned int v28 = v34 & v27;
          size_t v29 = &v10[8 * (v34 & v27)];
          uint64_t v30 = *(void *)v29;
          if (*(void *)v29 == -1) {
            goto LABEL_58;
          }
        }
      }
      goto LABEL_65;
    }
LABEL_26:
    unsigned int v6 = *(_DWORD *)(a5 + 8);
  }
  while (v6);
  uint64_t v102 = 0;
LABEL_251:
  if (v109 != v108) {
    free(v109);
  }
LABEL_253:
  if (v114 != v113) {
    free(v114);
  }
  return v102;
}