uint64_t sub_1CBA05A98(uint64_t *a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  llvm::IntegerType *****v24;
  unint64_t v25;
  llvm::LLVMContext *v26;
  llvm::LLVMContext *v27;
  llvm::LLVMContext *v28;
  llvm::ConstantInt *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::IntegerType *****v34;
  llvm::LLVMContext *v35;
  llvm::LLVMContext *v36;
  llvm::LLVMContext *v37;
  llvm::ConstantInt *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E4F143B8];
  v8 = *a1;
  v9 = *(void *)(*a1 + 272);
  v10 = *(unsigned int *)(a2 + 4);
  if ((v10 & 0x80000000) != 0) {
    v11 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
  }
  else {
    v11 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v10);
  }
  v12 = *v11;
  if (!v12) {
    return 0;
  }
  while ((*(unsigned char *)(v12 + 3) & 1) != 0)
  {
    v12 = *(void *)(v12 + 24);
    if (!v12) {
      return 0;
    }
  }
  while (1)
  {
    v12 = *(void *)(v12 + 24);
    if (!v12) {
      break;
    }
    if ((*(unsigned char *)(v12 + 3) & 1) == 0) {
      return 0;
    }
  }
  v13 = (uint64_t *)((v10 & 0x80000000) != 0
                  ? *(void *)(v9 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8
                  : *(void *)(v9 + 272) + 8 * v10);
  v14 = *v13;
  if (!v14) {
    return 0;
  }
  if ((*(unsigned char *)(v14 + 3) & 1) == 0)
  {
    v14 = *(void *)(v14 + 24);
    if (!v14 || (*(unsigned char *)(v14 + 3) & 1) == 0) {
      return 0;
    }
  }
  v15 = *(void *)(v14 + 8);
  if (!v15) {
    return 0;
  }
  if (**(_WORD **)(v15 + 16) != 127) {
    return 0;
  }
  if (*(_DWORD *)(v15 + 40) != 3) {
    return 0;
  }
  v17 = *(void *)(v15 + 32);
  v18 = *(_DWORD *)(v17 + 36);
  sub_1CC73C210(*(_DWORD *)(v17 + 68), v9, (uint64_t)&v45);
  if (!(_BYTE)v47) {
    return 0;
  }
  if (v46 >= 0x41)
  {
    if (v45) {
      MEMORY[0x1D25D9CB0](v45, 0x1000C8000313F17);
    }
    return 0;
  }
  v19 = v45 << -(char)v46 >> -(char)v46;
  *a3 = 1;
  if (v19 <= *(unsigned int *)a1[1] && !a4) {
    return a4;
  }
  a4 = 1;
  v20 = 1 << v19;
  v21 = *(unsigned __int16 *)(a1[2] + 44);
  v22 = *(void *)a1[3];
  if (v22 == *(void *)a1[4])
  {
    if (v20 == 0x100000000 << v19 >> 32)
    {
      v23 = *(void *)(v8 + 272);
      LOWORD(v56) = 0;
      LODWORD(v45) = v18;
      a4 = 0;
      if (sub_1CBA0DC10((uint64_t)&v56, v23, (unsigned int *)&v45))
      {
        v24 = (llvm::IntegerType *****)a1[5];
        v25 = *(void *)a1[3];
        v56 = v25;
        v57 = 0;
        LODWORD(v45) = v18;
        v47 = 0;
        v48 = 0;
        v50 = 3;
        v43 = v25;
        v44 = 0;
        v26 = (llvm::LLVMContext *)(unsigned __int16)(v25 >> 3);
        v27 = (llvm::LLVMContext *)(unsigned __int16)(v25 >> 19);
        if ((v25 & 2) == 0) {
          v27 = (llvm::LLVMContext *)(v25 >> 19);
        }
        if ((v25 & 4) != 0) {
          v26 = v27;
        }
        if (v25) {
          v28 = (llvm::LLVMContext *)(v25 >> 3);
        }
        else {
          v28 = v26;
        }
        v29 = (llvm::ConstantInt *)llvm::IntegerType::get(***v24[1], v28);
        v30 = llvm::ConstantInt::get(v29, v20, (const llvm::APInt *)1);
        v51 = ((uint64_t (*)(llvm::IntegerType *****, unint64_t *, void *))(*v24)[2])(v24, &v43, v30);
        v52 = v31;
        v53 = 1;
        v54 = 0;
        v55 = 3;
        ((void (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(*v24)[4])(v24, 313, &v56, 1, &v45, 4, v21 | 0x100000000);
        v33 = v32;
        (*(void (**)(void, uint64_t))(**(void **)(v8 + 288) + 32))(*(void *)(v8 + 288), a1[2]);
        llvm::MachineOperand::setReg(a2, *(_DWORD *)(*(void *)(v33 + 32) + 4));
        (*(void (**)(void, uint64_t))(**(void **)(v8 + 288) + 40))(*(void *)(v8 + 288), a1[2]);
        return 1;
      }
      return a4;
    }
    return 0;
  }
  v34 = (llvm::IntegerType *****)a1[5];
  v56 = *(void *)a1[3];
  v57 = 0;
  LODWORD(v45) = v18;
  v47 = 0;
  v43 = v22;
  v44 = 0;
  v35 = (llvm::LLVMContext *)(unsigned __int16)(v22 >> 3);
  v36 = (llvm::LLVMContext *)(unsigned __int16)(v22 >> 19);
  if ((v22 & 2) == 0) {
    v36 = (llvm::LLVMContext *)(v22 >> 19);
  }
  if ((v22 & 4) != 0) {
    v35 = v36;
  }
  if (v22) {
    v37 = (llvm::LLVMContext *)(v22 >> 3);
  }
  else {
    v37 = v35;
  }
  v38 = (llvm::ConstantInt *)llvm::IntegerType::get(***v34[1], v37);
  v39 = llvm::ConstantInt::get(v38, v20, (const llvm::APInt *)1);
  v48 = ((uint64_t (*)(llvm::IntegerType *****, unint64_t *, void *))(*v34)[2])(v34, &v43, v39);
  v49 = v40;
  v50 = 1;
  ((void (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(*v34)[4])(v34, 47, &v56, 1, &v45, 2, v21 | 0x100000000);
  v42 = v41;
  (*(void (**)(void, uint64_t))(**(void **)(v8 + 288) + 32))(*(void *)(v8 + 288), a1[2]);
  llvm::MachineOperand::setReg(a2, *(_DWORD *)(*(void *)(v42 + 32) + 4));
  (*(void (**)(void, uint64_t))(**(void **)(v8 + 288) + 40))(*(void *)(v8 + 288), a1[2]);
  return a4;
}

uint64_t sub_1CBA05F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)a1 = &unk_1F261CD58;
  v5 = (unsigned __int8 **)(a1 + 32);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v6 = *(void *)(v4 + 32);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 24) = *(void *)(v6 + 40);
  *(void *)(a1 + 16) = (*(uint64_t (**)(void))(**(void **)(v6 + 16) + 104))(*(void *)(v6 + 16));
  v32 = 0;
  if (&v32 != v5 && (unsigned __int8 **)(a2 + 56) != v5)
  {
    v7 = *v5;
    if (!*v5)
    {
LABEL_4:
      *v5 = 0;
      goto LABEL_5;
    }
    int v11 = *v7;
    if ((v11 - 4) > 0x1E)
    {
      if ((v11 - 3) >= 0xFFFFFFFE) {
        v17 = *v5;
      }
      else {
        v17 = 0;
      }
      if ((v11 - 3) <= 0xFFFFFFFD)
      {
        if (v11 == 3) {
          *((void *)v7 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v13 = (unint64_t)(v17 + 8);
    }
    else
    {
      if ((v7[1] & 0x7F) != 2 && !*((_DWORD *)v7 + 3)) {
        goto LABEL_4;
      }
      uint64_t v12 = *((void *)v7 + 2);
      if ((v12 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFF8;
      if (!v13) {
        goto LABEL_4;
      }
    }
    v33 = v5;
    sub_1CC5FA668(v13 + 16, &v33);
    v18 = v32;
    *v5 = v32;
    if (v18) {
      llvm::MetadataTracking::retrack((uint64_t)&v32, v18, (uint64_t)v5);
    }
LABEL_5:
    *(void *)(a1 + 48) = a2;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 40) = *(void *)(a2 + 24);
    *(void *)(a1 + 48) = a2;
    v8 = *(unsigned __int8 **)(a1 + 32);
    if (v8)
    {
      int v14 = *v8;
      if ((v14 - 4) > 0x1E)
      {
        if ((v14 - 3) >= 0xFFFFFFFE) {
          uint64_t v19 = *(void *)(a1 + 32);
        }
        else {
          uint64_t v19 = 0;
        }
        if ((v14 - 3) < 0xFFFFFFFE)
        {
          if (v14 == 3) {
            *((void *)v8 + 1) = 0;
          }
          goto LABEL_6;
        }
        unint64_t v16 = v19 + 8;
      }
      else
      {
        if ((v8[1] & 0x7F) != 2 && !*((_DWORD *)v8 + 3)) {
          goto LABEL_6;
        }
        uint64_t v15 = *((void *)v8 + 2);
        if ((v15 & 4) == 0) {
          goto LABEL_6;
        }
        unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFF8;
        if (!v16) {
          goto LABEL_6;
        }
      }
      v33 = v5;
      sub_1CC5FA668(v16 + 16, &v33);
    }
LABEL_6:
    v9 = *(unsigned __int8 **)(a2 + 56);
    goto LABEL_7;
  }
  if (&v32 != v5)
  {
    v20 = *v5;
    if (!*v5)
    {
LABEL_41:
      *v5 = 0;
      goto LABEL_42;
    }
    int v23 = *v20;
    if ((v23 - 4) > 0x1E)
    {
      if ((v23 - 3) >= 0xFFFFFFFE) {
        v29 = *v5;
      }
      else {
        v29 = 0;
      }
      if ((v23 - 3) <= 0xFFFFFFFD)
      {
        if (v23 == 3) {
          *((void *)v20 + 1) = 0;
        }
        goto LABEL_41;
      }
      unint64_t v25 = (unint64_t)(v29 + 8);
    }
    else
    {
      if ((v20[1] & 0x7F) != 2 && !*((_DWORD *)v20 + 3)) {
        goto LABEL_41;
      }
      uint64_t v24 = *((void *)v20 + 2);
      if ((v24 & 4) == 0) {
        goto LABEL_41;
      }
      unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFF8;
      if (!v25) {
        goto LABEL_41;
      }
    }
    v33 = v5;
    sub_1CC5FA668(v25 + 16, &v33);
    v30 = v32;
    *v5 = v32;
    if (v30) {
      llvm::MetadataTracking::retrack((uint64_t)&v32, v30, (uint64_t)v5);
    }
  }
LABEL_42:
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 24);
  *(void *)(a1 + 48) = a2;
  v21 = (unsigned __int8 **)(a2 + 56);
  if (v21 == v5) {
    return a1;
  }
  v22 = *v5;
  if (!*v5) {
    goto LABEL_44;
  }
  int v26 = *v22;
  if ((v26 - 4) > 0x1E)
  {
    if ((v26 - 3) >= 0xFFFFFFFE) {
      v31 = *v5;
    }
    else {
      v31 = 0;
    }
    if ((v26 - 3) <= 0xFFFFFFFD)
    {
      if (v26 == 3) {
        *((void *)v22 + 1) = 0;
      }
      goto LABEL_44;
    }
    unint64_t v28 = (unint64_t)(v31 + 8);
  }
  else
  {
    if ((v22[1] & 0x7F) != 2 && !*((_DWORD *)v22 + 3)) {
      goto LABEL_44;
    }
    uint64_t v27 = *((void *)v22 + 2);
    if ((v27 & 4) == 0) {
      goto LABEL_44;
    }
    unint64_t v28 = v27 & 0xFFFFFFFFFFFFFFF8;
    if (!v28) {
      goto LABEL_44;
    }
  }
  v33 = v5;
  sub_1CC5FA668(v28 + 16, &v33);
LABEL_44:
  v9 = *v21;
LABEL_7:
  *v5 = v9;
  if (v9) {
    llvm::MetadataTracking::track((uint64_t)v5, v9, 2);
  }
  return a1;
}

uint64_t sub_1CBA062A8(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v529 = *MEMORY[0x1E4F143B8];
  a4[5] = *(void *)(a2 + 24);
  a4[6] = a2;
  v505 = v507;
  uint64_t v506 = 0x400000000;
  unsigned int v8 = **(unsigned __int16 **)(a2 + 16);
  if (v8 > 0x7F)
  {
    if (v8 - 128 >= 2)
    {
      if (v8 != 178)
      {
        if (v8 == 313)
        {
          a4[5] = *(void *)(a2 + 24);
          a4[6] = a2;
          uint64_t v42 = *(void *)(a2 + 32);
          int v43 = *(_DWORD *)(v42 + 4);
          if (v43 < 0 && (uint64_t v44 = a4[3], v45 = v43 & 0x7FFFFFFF, v45 < *(_DWORD *)(v44 + 432))) {
            v46 = *(void **)(*(void *)(v44 + 424) + 8 * v45);
          }
          else {
            v46 = 0;
          }
          int v164 = *(unsigned __int8 *)(v42 + 80);
          if (*(unsigned char *)(v42 + 80))
          {
            int v165 = *(_DWORD *)(v42 + 36);
            if (v164 == 2) {
              uint64_t v166 = 124;
            }
            else {
              uint64_t v166 = 126;
            }
            v499 = v46;
            LODWORD(v500) = 0;
            LODWORD(v514) = v165;
            LODWORD(v516) = 0;
            uint64_t v95 = 1;
            (*(void (**)(void *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, v166, &v499, 1, &v514, 1, 0);
            uint64_t v168 = v167;
            (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, a2);
            llvm::MachineOperand::setReg(*(void *)(a2 + 32) + 32, *(_DWORD *)(*(void *)(v168 + 32) + 4));
            *(void *)(*(void *)(a2 + 32) + 80) = 0;
            (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, a2);
            uint64_t v42 = *(void *)(a2 + 32);
            int v169 = *(unsigned __int8 *)(v42 + 144);
            if (!*(unsigned char *)(v42 + 144)) {
              goto LABEL_781;
            }
          }
          else
          {
            int v169 = *(unsigned __int8 *)(v42 + 144);
            if (!*(unsigned char *)(v42 + 144)) {
              goto LABEL_780;
            }
          }
          int v171 = *(_DWORD *)(v42 + 100);
          if (v169 == 2) {
            uint64_t v172 = 124;
          }
          else {
            uint64_t v172 = 126;
          }
          v499 = v46;
          LODWORD(v500) = 0;
          LODWORD(v514) = v171;
          LODWORD(v516) = 0;
          uint64_t v95 = 1;
          (*(void (**)(void *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, v172, &v499, 1, &v514, 1, 0);
          uint64_t v174 = v173;
          (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, a2);
          llvm::MachineOperand::setReg(*(void *)(a2 + 32) + 96, *(_DWORD *)(*(void *)(v174 + 32) + 4));
          *(void *)(*(void *)(a2 + 32) + 144) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, a2);
          goto LABEL_781;
        }
LABEL_780:
        uint64_t v95 = 0;
        goto LABEL_781;
      }
      uint64_t v152 = *(void *)(a2 + 24);
      uint64_t v153 = *(void *)(a2 + 32);
      uint64_t v154 = *(unsigned int *)(v153 + 4);
      uint64_t v155 = a1[5];
      uint64_t v156 = *(unsigned int *)(v153 + 36);
      if ((v156 & 0x80000000) != 0) {
        v157 = (uint64_t *)(*(void *)(v155 + 24) + 16 * (v156 & 0x7FFFFFFF) + 8);
      }
      else {
        v157 = (uint64_t *)(*(void *)(v155 + 272) + 8 * v156);
      }
      uint64_t v158 = v153 + 32;
      uint64_t v159 = *v157;
      if (v159
        && ((*(unsigned char *)(v159 + 3) & 1) != 0 || (uint64_t v159 = *(void *)(v159 + 24)) != 0 && (*(unsigned char *)(v159 + 3) & 1) != 0))
      {
        uint64_t v160 = *(void *)(v159 + 8);
      }
      else
      {
        uint64_t v160 = 0;
      }
      if ((**(_WORD **)(v160 + 16) & 0xFFFE) == 0x74 && (uint64_t v161 = *(unsigned int *)(v160 + 40), v161))
      {
        uint64_t v162 = *(void *)(v160 + 32);
        v163 = (_DWORD *)(v162 + 16);
        while (*((unsigned char *)v163 - 16) != 17)
        {
          v163 += 8;
          if (!--v161) {
            goto LABEL_197;
          }
        }
        if (*v163 == 2131)
        {
          uint64_t v184 = *(unsigned int *)(v162 + 68);
          if ((v184 & 0x80000000) != 0) {
            v185 = (uint64_t *)(*(void *)(v155 + 24) + 16 * (v184 & 0x7FFFFFFF) + 8);
          }
          else {
            v185 = (uint64_t *)(*(void *)(v155 + 272) + 8 * v184);
          }
          uint64_t v186 = *v185;
          if (!*v185) {
            goto LABEL_780;
          }
          if ((*(unsigned char *)(v186 + 3) & 1) == 0)
          {
            uint64_t v186 = *(void *)(v186 + 24);
            if (!v186 || (*(unsigned char *)(v186 + 3) & 1) == 0) {
              goto LABEL_780;
            }
          }
          uint64_t v158 = v162 + 64;
          uint64_t v160 = *(void *)(v186 + 8);
          int v170 = 1;
        }
        else
        {
LABEL_197:
          int v170 = 0;
        }
        if (!v160) {
          goto LABEL_780;
        }
      }
      else
      {
        int v170 = 0;
      }
      uint64_t v187 = *(unsigned int *)(v158 + 4);
      if ((v187 & 0x80000000) != 0) {
        v188 = (uint64_t *)(*(void *)(v155 + 24) + 16 * (v187 & 0x7FFFFFFF) + 8);
      }
      else {
        v188 = (uint64_t *)(*(void *)(v155 + 272) + 8 * v187);
      }
      uint64_t v189 = *v188;
      if (!v189) {
        goto LABEL_780;
      }
      while ((*(unsigned char *)(v189 + 3) & 1) != 0)
      {
        uint64_t v189 = *(void *)(v189 + 24);
        if (!v189) {
          goto LABEL_780;
        }
      }
      while (1)
      {
        uint64_t v189 = *(void *)(v189 + 24);
        if (!v189) {
          break;
        }
        if ((*(unsigned char *)(v189 + 3) & 1) == 0) {
          goto LABEL_780;
        }
      }
      v190 = (uint64_t *)((v154 & 0x80000000) != 0
                       ? *(void *)(v155 + 24) + 16 * (v154 & 0x7FFFFFFF) + 8
                       : *(void *)(v155 + 272) + 8 * v154);
      uint64_t v191 = *v190;
      if (!v191) {
        goto LABEL_780;
      }
      while ((*(unsigned char *)(v191 + 3) & 1) != 0)
      {
        uint64_t v191 = *(void *)(v191 + 24);
        if (!v191) {
          goto LABEL_780;
        }
      }
      while (1)
      {
        uint64_t v191 = *(void *)(v191 + 24);
        if (!v191) {
          break;
        }
        uint64_t v95 = 0;
        if ((*(unsigned char *)(v191 + 3) & 1) == 0) {
          goto LABEL_781;
        }
      }
      v192 = (uint64_t *)((v154 & 0x80000000) != 0
                       ? *(void *)(v155 + 24) + 16 * (v154 & 0x7FFFFFFF) + 8
                       : *(void *)(v155 + 272) + 8 * v154);
      uint64_t v193 = *v192;
      if (!v193) {
        goto LABEL_780;
      }
      while ((*(unsigned char *)(v193 + 3) & 1) != 0)
      {
        uint64_t v193 = *(void *)(v193 + 24);
        if (!v193) {
          goto LABEL_780;
        }
      }
      uint64_t v194 = *(void *)(v193 + 8);
LABEL_222:
      unsigned int v195 = **(unsigned __int16 **)(v194 + 16);
      if (v195 > 0x104)
      {
        uint64_t v197 = v195 - 314;
        if (v197 > 0x2A) {
          goto LABEL_237;
        }
        if (((1 << (v195 - 58)) & 0x40000200003) != 0) {
          goto LABEL_238;
        }
        if (v197 != 22)
        {
LABEL_237:
          if (v195 == 261) {
            goto LABEL_238;
          }
          goto LABEL_449;
        }
      }
      else
      {
        if (v195 - 163 <= 0x38 && ((1 << (v195 + 93)) & 0x18800000038540DLL) != 0)
        {
LABEL_238:
          while (1)
          {
            uint64_t v193 = *(void *)(v193 + 24);
            if (!v193) {
              goto LABEL_780;
            }
            if ((*(unsigned char *)(v193 + 3) & 1) == 0 && *(void *)(v193 + 8) != v194)
            {
              uint64_t v194 = *(void *)(v193 + 8);
              goto LABEL_222;
            }
          }
        }
        if (v195 != 51)
        {
          if (v195 == 85) {
            goto LABEL_238;
          }
          goto LABEL_449;
        }
      }
      uint64_t v198 = *(void *)(v194 + 32);
      if (*(_DWORD *)(v198 + 132) != v154 && *(_DWORD *)(v198 + 164) != v154) {
        goto LABEL_238;
      }
LABEL_449:
      int v292 = *(unsigned __int16 *)(*(void *)(*(void *)(v152 + 32) + 8) + 1020);
      unsigned int v293 = *(unsigned __int16 *)(v160 + 44);
      if (**(_WORD **)(v160 + 16) == 336)
      {
        if (((v292 | (v293 >> 4)) & 1) == 0) {
          goto LABEL_780;
        }
      }
      else if ((v292 & 1) == 0 && (v293 & 0x7C0) != 0x7C0)
      {
        goto LABEL_780;
      }
      a4[5] = v152;
      a4[6] = a2;
      uint64_t v311 = **(unsigned __int16 **)(v160 + 16);
      if (v311 > 0x104)
      {
        BOOL v325 = (v311 - 314) > 0x2A || ((1 << (v311 - 58)) & 0x40000200003) == 0;
        if (v325 && v311 != 261)
        {
LABEL_633:
          if (v311 == 182) {
            char v390 = v170;
          }
          else {
            char v390 = 1;
          }
          if (v390)
          {
            if (v311 == 336)
            {
              if (v170) {
                goto LABEL_780;
              }
            }
            else
            {
              if (v311 == 51) {
                char v392 = v170;
              }
              else {
                char v392 = 1;
              }
              if (v392) {
                goto LABEL_780;
              }
            }
            uint64_t v393 = a1[5];
            v394 = *(_DWORD **)(v160 + 32);
            int v395 = v394[12];
            unsigned int v494 = v394[17];
            unsigned int v482 = v394[25];
            unsigned int v396 = v394[33];
            unsigned int v397 = v394[41];
            if (sub_1CBA0E3F4(v393, v396, 0) && sub_1CBA0E3F4(v393, v397, 0))
            {
              unint64_t v398 = sub_1CBA0B104(v396, 1, a4, v393, 0);
              unint64_t v399 = sub_1CBA0B104(v397, 1, a4, v393, 0);
              uint64_t v95 = 0;
              if (!HIDWORD(v398) || !HIDWORD(v399)) {
                goto LABEL_781;
              }
              uint64_t v400 = **(unsigned __int16 **)(v160 + 16);
              v499 = (void *)257;
              LODWORD(v500) = 0;
              LODWORD(v514) = v395;
              LODWORD(v516) = 2;
              LODWORD(v517) = v494;
              LODWORD(v519) = 0;
              int v401 = v482;
            }
            else
            {
              if (v396 != v494 && v396 != v482
                || v397 != v494 && v397 != v482
                || !sub_1CBA0E3F4(v393, v396, 1)
                || !sub_1CBA0E3F4(v393, v397, 1))
              {
                goto LABEL_780;
              }
              unint64_t v475 = sub_1CBA0B104(v494, 1, a4, v393, 1);
              unint64_t v495 = sub_1CBA0B104(v482, 1, a4, v393, 1);
              unint64_t v398 = sub_1CBA0B104(v396, 1, a4, v393, 0);
              unint64_t v399 = sub_1CBA0B104(v397, 1, a4, v393, 0);
              uint64_t v95 = 0;
              if (!HIDWORD(v475) || !HIDWORD(v495) || !HIDWORD(v398) || !HIDWORD(v399)) {
                goto LABEL_781;
              }
              uint64_t v400 = **(unsigned __int16 **)(v160 + 16);
              v499 = (void *)257;
              LODWORD(v500) = 0;
              LODWORD(v514) = v395;
              LODWORD(v516) = 2;
              LODWORD(v517) = v475;
              LODWORD(v519) = 0;
              int v401 = v495;
            }
            LODWORD(v520) = v401;
            int v522 = 0;
            LODWORD(v523) = v398;
            int v525 = 0;
            LODWORD(v526) = v399;
            int v528 = 0;
            (*(void (**)(void *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, uint64_t))(*a4 + 32))(a4, v400, &v499, 1, &v514, 5, *(unsigned __int16 *)(v160 + 44) | 0x100000000);
            sub_1CBA0A7C8((void *)a1[5], (llvm::MachineInstr *)a2, *(_DWORD *)(*(void *)(v402 + 32) + 4), a3);
            goto LABEL_613;
          }
LABEL_642:
          v499 = (void *)257;
          LODWORD(v500) = 0;
          LODWORD(v514) = *(_DWORD *)(*(void *)(v160 + 32) + 36);
          LODWORD(v516) = 0;
          uint64_t v95 = 1;
          (*(void (**)(void *))(*a4 + 32))(a4);
          sub_1CBA0A7C8((void *)a1[5], (llvm::MachineInstr *)a2, *(_DWORD *)(*(void *)(v391 + 32) + 4), a3);
          goto LABEL_781;
        }
        goto LABEL_515;
      }
      uint64_t v312 = (v311 - 163);
      if (v312 <= 0x38)
      {
        if (((1 << (v311 + 93)) & 0x18800000000140DLL) != 0)
        {
LABEL_515:
          uint64_t v326 = *(unsigned int *)(v160 + 40);
          if (v326 <= 1)
          {
            uint64_t v514 = (uint64_t)&v516;
            uint64_t v515 = 0x400000000;
LABEL_614:
            v499 = (void *)257;
            LODWORD(v500) = 0;
            (*(void (**)(void *, uint64_t, void **, uint64_t))(*a4 + 32))(a4, v311, &v499, 1);
            v379 = v378;
            if (v170)
            {
              int v474 = *(_DWORD *)(*((void *)v378 + 4) + 4);
              uint64_t v380 = a1[5];
              unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v380, "", 0);
              unint64_t v381 = IncompleteVirtualRegister & 0x7FFFFFFF;
              *(void *)(*(void *)(v380 + 24) + 16 * v381) = 4;
              unint64_t v382 = *(unsigned int *)(v380 + 432);
              if (v381 >= v382)
              {
                uint64_t v481 = *(void *)(v380 + 440);
                uint64_t v383 = v381 + 1 - v382;
                if (v381 >= *(unsigned int *)(v380 + 436)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                int v384 = *(_DWORD *)(v380 + 432);
                if (v383)
                {
                  v385 = (void *)(*(void *)(v380 + 424) + 8 * v382);
                  uint64_t v386 = ~v381 + v382;
                  do
                  {
                    *v385++ = v481;
                    BOOL v279 = __CFADD__(v386++, 1);
                  }
                  while (!v279);
                  int v384 = *(_DWORD *)(v380 + 432);
                }
                *(_DWORD *)(v380 + 432) = v384 + v383;
              }
              *(void *)(*(void *)(v380 + 424) + 8 * v381) = 257;
              uint64_t v387 = *(void *)(v380 + 8);
              if (v387) {
                (*(void (**)(uint64_t, void))(*(void *)v387 + 24))(v387, IncompleteVirtualRegister);
              }
              LODWORD(v511) = IncompleteVirtualRegister;
              v388 = sub_1CC7390C0(a4, 2131, (int *)&v511, 1, 0);
              v379 = v389;
              uint64_t v500 = 0;
              uint64_t v501 = 0;
              LODWORD(v499) = 0;
              HIDWORD(v499) = v474;
              uint64_t v502 = 0;
              llvm::MachineInstr::addOperand(v389, v388, (const llvm::MachineOperand *)&v499);
            }
            *((_WORD *)v379 + 22) = *((_WORD *)v379 + 22) & 0xC | *(_WORD *)(v160 + 44) & 0xFFF3;
            sub_1CBA0A7C8((void *)a1[5], (llvm::MachineInstr *)a2, *(_DWORD *)(*((void *)v379 + 4) + 4), a3);
            uint64_t v95 = 1;
LABEL_628:
            if ((uint64_t *)v514 != &v516) {
              free((void *)v514);
            }
            goto LABEL_781;
          }
          uint64_t v327 = *(void *)(v160 + 32);
          uint64_t v328 = 1;
          while (1)
          {
            if (*(unsigned char *)(v327 + 32 * v328)) {
              goto LABEL_518;
            }
            uint64_t v329 = a1[5];
            uint64_t v330 = *(unsigned int *)(v327 + 32 * v328 + 4);
            v331 = (uint64_t *)((v330 & 0x80000000) != 0
                             ? *(void *)(v329 + 24) + 16 * (v330 & 0x7FFFFFFF) + 8
                             : *(void *)(v329 + 272) + 8 * v330);
            uint64_t v332 = *v331;
            if (!v332) {
              goto LABEL_518;
            }
            if ((*(unsigned char *)(v332 + 3) & 1) == 0)
            {
              uint64_t v332 = *(void *)(v332 + 24);
              if (!v332 || (*(unsigned char *)(v332 + 3) & 1) == 0) {
                goto LABEL_518;
              }
            }
            uint64_t v333 = *(void *)(v332 + 8);
            if (!v333) {
              goto LABEL_518;
            }
            if ((**(_WORD **)(v333 + 16) & 0xFFFE) != 0x74) {
              goto LABEL_518;
            }
            uint64_t v334 = *(unsigned int *)(v333 + 40);
            if (!v334) {
              goto LABEL_518;
            }
            uint64_t v335 = *(void *)(v333 + 32);
            v336 = (_DWORD *)(v335 + 16);
            while (*((unsigned char *)v336 - 16) != 17)
            {
              v336 += 8;
              if (!--v334) {
                goto LABEL_518;
              }
            }
            if (*v336 != 2131) {
              goto LABEL_518;
            }
            uint64_t v337 = *(unsigned int *)(v335 + 68);
            if ((v337 & 0x80000000) != 0) {
              v338 = (uint64_t *)(*(void *)(v329 + 24) + 16 * (v337 & 0x7FFFFFFF) + 8);
            }
            else {
              v338 = (uint64_t *)(*(void *)(v329 + 272) + 8 * v337);
            }
            uint64_t v339 = *v338;
            if (v339)
            {
              if ((*(unsigned char *)(v339 + 3) & 1) == 0)
              {
                uint64_t v339 = *(void *)(v339 + 24);
                if (!v339) {
                  goto LABEL_537;
                }
                if ((*(unsigned char *)(v339 + 3) & 1) == 0)
                {
                  uint64_t v339 = 0;
                  goto LABEL_537;
                }
              }
              uint64_t v339 = *(void *)(v339 + 8);
            }
LABEL_537:
            if ((v337 & 0x80000000) != 0) {
              v340 = (uint64_t *)(*(void *)(v329 + 24) + 16 * (v337 & 0x7FFFFFFF) + 8);
            }
            else {
              v340 = (uint64_t *)(*(void *)(v329 + 272) + 8 * v337);
            }
            uint64_t v341 = *v340;
            if (!v341) {
              goto LABEL_780;
            }
            while ((*(unsigned char *)(v341 + 3) & 1) != 0)
            {
              uint64_t v341 = *(void *)(v341 + 24);
              if (!v341) {
                goto LABEL_780;
              }
            }
            while (1)
            {
              uint64_t v341 = *(void *)(v341 + 24);
              if (!v341) {
                break;
              }
              uint64_t v95 = 0;
              if ((*(unsigned char *)(v341 + 3) & 1) == 0) {
                goto LABEL_781;
              }
            }
            uint64_t v95 = 0;
            unsigned int v342 = **(unsigned __int16 **)(v339 + 16);
            if (v342 > 0x104)
            {
              BOOL v344 = v342 - 314 > 0x2A || ((1 << (v342 - 58)) & 0x40000200003) == 0;
              if (v344 && v342 != 261) {
                goto LABEL_781;
              }
            }
            else
            {
              BOOL v343 = v342 - 163 > 0x38 || ((1 << (v342 + 93)) & 0x18800000000140DLL) == 0;
              if (v343 && v342 != 85) {
                goto LABEL_781;
              }
            }
LABEL_518:
            if (++v328 == v326)
            {
              uint64_t v355 = 0;
              uint64_t v514 = (uint64_t)&v516;
              uint64_t v515 = 0x400000000;
              unint64_t v356 = 1;
              while (1)
              {
                uint64_t v357 = *(void *)(v160 + 32) + v355;
                int v359 = *(unsigned __int8 *)(v357 + 32);
                uint64_t v358 = v357 + 32;
                if (v359)
                {
                  sub_1CD40DC78((uint64_t)&v514, v358);
                }
                else
                {
                  v499 = (void *)sub_1CBA0B104(*(_DWORD *)(*(void *)(v160 + 32) + v355 + 36), 0, a4, a1[5], 1);
                  if (!((unint64_t)v499 >> 32))
                  {
                    uint64_t v95 = 0;
                    goto LABEL_628;
                  }
                  sub_1CBA0B7F4((uint64_t)&v514, &v499);
                }
                ++v356;
                v355 += 32;
                if (v356 >= *(unsigned int *)(v160 + 40))
                {
                  uint64_t v311 = **(unsigned __int16 **)(v160 + 16);
                  goto LABEL_614;
                }
              }
            }
          }
        }
        if (v312 == 20)
        {
          if (v170) {
            goto LABEL_780;
          }
          goto LABEL_642;
        }
      }
      if (v311 != 85) {
        goto LABEL_633;
      }
      goto LABEL_515;
    }
    if (!*(unsigned char *)(a1[4] + 318))
    {
      v72 = *(_DWORD **)(a2 + 32);
      int v73 = v72[1];
      if (v73 < 0)
      {
        uint64_t v74 = a1[5];
        if ((v73 & 0x7FFFFFFFu) < *(_DWORD *)(v74 + 432))
        {
          int v75 = v72[9];
          unsigned int v76 = v72[17];
          v77 = *(void **)(*(void *)(v74 + 424) + 8 * (v73 & 0x7FFFFFFF));
          v511 = v77;
          if (v77 == (void *)257 || v77 == (void *)129)
          {
            sub_1CC73C210(v76, v74, (uint64_t)&v514);
            if ((_BYTE)v516)
            {
              if (v515 >= 0x41)
              {
                if (v514) {
                  MEMORY[0x1D25D9CB0](v514, 0x1000C8000313F17);
                }
              }
              else
              {
                uint64_t v78 = v514 << -(uint64_t)v515 >> -(uint64_t)v515;
                uint64_t v80 = sub_1CB8F1DC4((unint64_t *)&v511);
                if (v79 == 1) {
                if (v78 == v80 - 1)
                }
                {
                  v499 = v511;
                  LODWORD(v500) = 0;
                  v81 = (llvm::LLVMContext *)(unsigned __int16)((unint64_t)v511 >> 3);
                  v82 = (llvm::LLVMContext *)(unsigned __int16)((unint64_t)v511 >> 19);
                  if ((v511 & 2) == 0) {
                    v82 = (llvm::LLVMContext *)((unint64_t)v511 >> 19);
                  }
                  if ((v511 & 4) != 0) {
                    v81 = v82;
                  }
                  if (v511) {
                    v83 = (llvm::LLVMContext *)((unint64_t)v511 >> 3);
                  }
                  else {
                    v83 = v81;
                  }
                  uint64_t v84 = llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], v83);
                  v86 = *(llvm::ConstantInt **)v84;
                  unsigned int v87 = *(_DWORD *)(v84 + 8);
                  LODWORD(v515) = v87 >> 8;
                  if (v87 >> 8 >= 0x41) {
                    operator new[]();
                  }
                  uint64_t v514 = 0;
                  v88 = llvm::ConstantInt::get(v86, (llvm::LLVMContext *)&v514, v85);
                  if (v515 >= 0x41 && v514) {
                    MEMORY[0x1D25D9CB0](v514, 0x1000C8000313F17);
                  }
                  uint64_t v89 = (*(uint64_t (**)(void *, void **, void *))(*a4 + 16))(a4, &v499, v88);
                  uint64_t v91 = v90;
                  if (**(_WORD **)(a2 + 16) == 129) {
                    unint64_t v92 = -1;
                  }
                  else {
                    unint64_t v92 = 1;
                  }
                  uint64_t v514 = (uint64_t)v511;
                  LODWORD(v515) = 0;
                  if (v511)
                  {
                    unint64_t v93 = ((unint64_t)v511 >> 3);
                  }
                  else if ((v511 & 4) != 0)
                  {
                    if ((v511 & 2) != 0) {
                      unint64_t v93 = (unsigned __int16)((unint64_t)v511 >> 19);
                    }
                    else {
                      unint64_t v93 = ((unint64_t)v511 >> 19);
                    }
                  }
                  else
                  {
                    unint64_t v93 = (unsigned __int16)((unint64_t)v511 >> 3);
                  }
                  v94 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)v93);
                  uint64_t v95 = 1;
                  v96 = llvm::ConstantInt::get(v94, v92, (const llvm::APInt *)1);
                  uint64_t v97 = (*(uint64_t (**)(void *, uint64_t *, void *))(*a4 + 16))(a4, &v514, v96);
                  LODWORD(v499) = v73;
                  LODWORD(v500) = 1;
                  LODWORD(v514) = 40;
                  LODWORD(v516) = 2;
                  LODWORD(v517) = v75;
                  LODWORD(v519) = 0;
                  uint64_t v520 = v89;
                  uint64_t v521 = v91;
                  int v522 = 1;
                  size_t v523 = v97;
                  uint64_t v524 = v98;
                  int v525 = 1;
                  uint64_t v526 = v89;
                  uint64_t v527 = v91;
                  int v528 = 1;
                  (*(void (**)(void *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, 51, &v499, 1, &v514, 5, 0);
                  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
                  goto LABEL_781;
                }
              }
            }
            unsigned int v8 = **(unsigned __int16 **)(a2 + 16);
          }
        }
      }
    }
    if (v8 != 129) {
      goto LABEL_780;
    }
    v403 = *(unsigned int **)(a2 + 32);
    unsigned int v404 = v403[1];
    if ((v404 & 0x80000000) == 0) {
      goto LABEL_780;
    }
    uint64_t v405 = a1[5];
    uint64_t v406 = v404 & 0x7FFFFFFF;
    unsigned int v407 = *(_DWORD *)(v405 + 432);
    if (v406 >= v407) {
      goto LABEL_780;
    }
    uint64_t v408 = *(void *)(v405 + 424);
    if (*(void *)(v408 + 8 * v406) != 129) {
      goto LABEL_780;
    }
    uint64_t v409 = *(void *)(v405 + 24);
    uint64_t v410 = *(void *)(v409 + 16 * v406 + 8);
    if (!v410) {
      goto LABEL_780;
    }
    while ((*(unsigned char *)(v410 + 3) & 1) != 0)
    {
      uint64_t v410 = *(void *)(v410 + 24);
      if (!v410) {
        goto LABEL_780;
      }
    }
    v411 = 0;
    int v412 = 0;
    int v413 = 0;
    uint64_t v414 = *(void *)(v410 + 8);
LABEL_696:
    if (**(_WORD **)(v414 + 16) == 124
      && (int v415 = *(_DWORD *)(*(void *)(v414 + 32) + 4), v415 < 0)
      && (v415 & 0x7FFFFFFFu) < v407
      && *(void *)(v408 + 8 * (v415 & 0x7FFFFFFF)) == 257)
    {
      if (!v411) {
        v411 = (llvm::IntegerType *)v414;
      }
      v496 = v411;
      uint64_t v476 = v409;
      int v483 = v412;
      int v468 = v413;
      int v416 = sub_1CBA0A6B4(v415, v409, *(void *)(v405 + 272));
      uint64_t v409 = v476;
      int v412 = v483;
      v411 = v496;
      int v413 = v416 ^ 1 | v468;
    }
    else
    {
      int v412 = 1;
    }
    if (!v411 || (v413 & 1) == 0 || (v412 & 1) == 0)
    {
      while (1)
      {
        uint64_t v410 = *(void *)(v410 + 24);
        if (!v410) {
          break;
        }
        if ((*(unsigned char *)(v410 + 3) & 1) == 0 && *(void *)(v410 + 8) != v414)
        {
          uint64_t v414 = *(void *)(v410 + 8);
          goto LABEL_696;
        }
      }
    }
    if (!v411 || ((v413 | v412) & 1) == 0) {
      goto LABEL_780;
    }
    char v484 = v412;
    v497 = v411;
    a4[5] = *(void *)(a2 + 24);
    a4[6] = a2;
    v499 = (void *)257;
    LODWORD(v500) = 0;
    LODWORD(v514) = v403[9];
    LODWORD(v516) = 0;
    (*(void (**)(void *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, 124, &v499, 1, &v514, 1, 0);
    size_t v469 = v417;
    uint64_t v418 = v403[17];
    sub_1CC73C210(v403[17], v405, (uint64_t)&v514);
    if ((_BYTE)v516)
    {
      if (v515 < 0x41)
      {
        unint64_t v421 = v514 << -(char)v515 >> -(char)v515;
        uint64_t v514 = 257;
        LODWORD(v515) = 0;
        v422 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)0x20);
        v423 = llvm::ConstantInt::get(v422, v421, (const llvm::APInt *)1);
        (*(void (**)(void *, uint64_t *, void *))(*a4 + 16))(a4, &v514, v423);
        uint64_t v420 = v424;
        if ((v418 & 0x80000000) != 0) {
          v425 = (uint64_t *)(*(void *)(v405 + 24) + 16 * (v418 & 0x7FFFFFFF) + 8);
        }
        else {
          v425 = (uint64_t *)(*(void *)(v405 + 272) + 8 * v418);
        }
        uint64_t v426 = *v425;
        if (v426)
        {
          while ((*(unsigned char *)(v426 + 3) & 1) != 0)
          {
            uint64_t v426 = *(void *)(v426 + 24);
            if (!v426) {
              goto LABEL_730;
            }
          }
          while (1)
          {
            uint64_t v426 = *(void *)(v426 + 24);
            if (!v426) {
              break;
            }
            if ((*(unsigned char *)(v426 + 3) & 1) == 0) {
              goto LABEL_730;
            }
          }
          if ((v418 & 0x80000000) != 0) {
            v427 = (uint64_t *)(*(void *)(v405 + 24) + 16 * (v418 & 0x7FFFFFFF) + 8);
          }
          else {
            v427 = (uint64_t *)(*(void *)(v405 + 272) + 8 * v418);
          }
          uint64_t v428 = *v427;
          if (v428
            && ((*(unsigned char *)(v428 + 3) & 1) != 0
             || (uint64_t v428 = *(void *)(v428 + 24)) != 0 && (*(unsigned char *)(v428 + 3) & 1) != 0))
          {
            v429 = *(llvm::MachineInstr **)(v428 + 8);
          }
          else
          {
            v429 = 0;
          }
          llvm::MachineInstr::eraseFromParent(v429);
        }
        goto LABEL_730;
      }
      if (v514) {
        MEMORY[0x1D25D9CB0](v514, 0x1000C8000313F17);
      }
    }
    v499 = (void *)257;
    LODWORD(v500) = 0;
    LODWORD(v514) = v403[17];
    LODWORD(v516) = 0;
    (*(void (**)(void *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, 126, &v499, 1, &v514, 1, 0);
    uint64_t v420 = v419;
LABEL_730:
    uint64_t v430 = v403[1];
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, a2);
    llvm::MachineOperand::setReg((uint64_t)v403, *(_DWORD *)(*((void *)v497 + 4) + 4));
    llvm::MachineOperand::setReg((uint64_t)(v403 + 8), *(_DWORD *)(*(void *)(v469 + 32) + 4));
    llvm::MachineOperand::setReg((uint64_t)(v403 + 16), *(_DWORD *)(*(void *)(v420 + 32) + 4));
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, a2);
    llvm::MachineInstr::eraseFromParent(v497);
    if (v484)
    {
      uint64_t v431 = *(void *)(a2 + 8);
      a4[5] = *(void *)(v431 + 24);
      a4[6] = v431;
      v499 = (void *)129;
      LODWORD(v500) = 0;
      LODWORD(v514) = v403[1];
      LODWORD(v516) = 0;
      (*(void (**)(void *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, 119, &v499, 1, &v514, 1, 0);
      uint64_t v433 = v432;
    }
    else
    {
      uint64_t v433 = 0;
    }
    if ((v430 & 0x80000000) != 0) {
      v434 = (uint64_t *)(*(void *)(v405 + 24) + 16 * (v430 & 0x7FFFFFFF) + 8);
    }
    else {
      v434 = (uint64_t *)(*(void *)(v405 + 272) + 8 * v430);
    }
    uint64_t v435 = *v434;
    if (!*v434) {
      goto LABEL_613;
    }
    while ((*(unsigned char *)(v435 + 3) & 1) != 0)
    {
      uint64_t v435 = *(void *)(v435 + 24);
      if (!v435) {
        goto LABEL_613;
      }
    }
    do
    {
      uint64_t v436 = v435;
      do
        uint64_t v435 = *(void *)(v435 + 24);
      while (v435 && (*(unsigned char *)(v435 + 3) & 1) != 0);
      uint64_t v437 = *(void *)(v436 + 8);
      if (**(_WORD **)(v437 + 16) == 124
        && (int v438 = *(_DWORD *)(*(void *)(v437 + 32) + 4), v438 < 0)
        && (uint64_t v439 = v438 & 0x7FFFFFFF, v439 < *(_DWORD *)(v405 + 432))
        && *(void *)(*(void *)(v405 + 424) + 8 * v439) == 257)
      {
        sub_1CBA0A7C8((void *)v405, *(llvm::MachineInstr **)(v436 + 8), v403[1], a3);
      }
      else
      {
        (*(void (**)(uint64_t, void))(*(void *)a3 + 32))(a3, *(void *)(v436 + 8));
        llvm::MachineOperand::setReg(v436, *(_DWORD *)(*(void *)(v433 + 32) + 4));
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, v437);
      }
      uint64_t v95 = 1;
    }
    while (v435);
    goto LABEL_781;
  }
  if (**(unsigned __int16 **)(a2 + 16) > 0x77u)
  {
    if (v8 != 120)
    {
      if (v8 != 121) {
        goto LABEL_780;
      }
      uint64_t v47 = *(void *)(a2 + 32);
      int v48 = *(_DWORD *)(v47 + 4);
      if ((v48 & 0x80000000) == 0) {
        goto LABEL_780;
      }
      uint64_t v49 = a1[5];
      uint64_t v50 = v48 & 0x7FFFFFFF;
      if ((v48 & 0x7FFFFFFFu) >= *(_DWORD *)(v49 + 432) || *(void *)(*(void *)(v49 + 424) + 8 * v50) != 257) {
        goto LABEL_780;
      }
      uint64_t v51 = *(void *)(*(void *)(v49 + 24) + 16 * v50 + 8);
      if (v51)
      {
        while ((*(unsigned char *)(v51 + 3) & 1) != 0)
        {
          uint64_t v51 = *(void *)(v51 + 24);
          if (!v51) {
            goto LABEL_44;
          }
        }
        uint64_t v207 = *(void *)(v51 + 8);
LABEL_263:
        unsigned int v208 = **(unsigned __int16 **)(v207 + 16);
        if (v208 > 0x104)
        {
          uint64_t v210 = v208 - 314;
          if (v210 > 0x2A) {
            goto LABEL_278;
          }
          if (((1 << (v208 - 58)) & 0x40000200003) != 0) {
            goto LABEL_279;
          }
          if (v210 != 22)
          {
LABEL_278:
            if (v208 == 261) {
              goto LABEL_279;
            }
            goto LABEL_780;
          }
        }
        else
        {
          if (v208 - 163 <= 0x38 && ((1 << (v208 + 93)) & 0x18800000038540DLL) != 0)
          {
LABEL_279:
            while (1)
            {
              uint64_t v51 = *(void *)(v51 + 24);
              if (!v51) {
                goto LABEL_44;
              }
              if ((*(unsigned char *)(v51 + 3) & 1) == 0 && *(void *)(v51 + 8) != v207)
              {
                uint64_t v207 = *(void *)(v51 + 8);
                goto LABEL_263;
              }
            }
          }
          if (v208 != 51)
          {
            if (v208 == 85) {
              goto LABEL_279;
            }
            goto LABEL_780;
          }
        }
        uint64_t v211 = *(void *)(v207 + 32);
        if (*(_DWORD *)(v211 + 132) != v48 && *(_DWORD *)(v211 + 164) != v48) {
          goto LABEL_279;
        }
        goto LABEL_780;
      }
LABEL_44:
      uint64_t v52 = sub_1CB986134((uint64_t)&v514, v49, a1[7], a1[8], (unsigned __int8 *)v47, 0, 0, 0, 0);
      if ((int)v524 < 4)
      {
        uint64_t v53 = *(void *)(*(void *)(a2 + 32) + 48);
        uint64_t v54 = *(void *)(v53 + 32);
        if ((_UNKNOWN *)v54 == &unk_1CFB2E344)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v500, (const llvm::detail::DoubleAPFloat *)(v53 + 32));
        }
        else
        {
          uint64_t v500 = *(void *)(v53 + 32);
          if ((*(_DWORD *)(v54 + 8) + 64) >= 0x80) {
            operator new[]();
          }
          char v55 = *(unsigned char *)(v53 + 52);
          int v56 = v55 & 7;
          BYTE4(v502) = v55 & 0xF;
          LODWORD(v502) = *(_DWORD *)(v53 + 48);
          BOOL v58 = (v55 & 6) != 0 && v56 != 3;
          if (v56 == 1 || v58)
          {
            uint64_t v60 = *(unsigned int *)(v500 + 8);
            if ((v60 - 64) <= 0xFFFFFF7F) {
              v61 = (uint64_t *)v52;
            }
            else {
              v61 = &v501;
            }
            v64 = *(uint64_t **)(v53 + 40);
            v63 = (uint64_t *)(v53 + 40);
            v62 = v64;
            if ((*(_DWORD *)(*(v63 - 1) + 8) - 64) >= 0xFFFFFF80) {
              v62 = v63;
            }
            if (v60 <= 0xFFFFFFBF)
            {
              unint64_t v65 = (unint64_t)(v60 + 64) >> 6;
              do
              {
                uint64_t v66 = *v62++;
                *v61++ = v66;
                --v65;
              }
              while (v65);
            }
          }
        }
        char v498 = 0;
        char v67 = 1;
        if (!llvm::APFloat::convert((uint64_t)&v499, &unk_1CFB2E2E0, 1, &v498) && !v498)
        {
          char v67 = 1;
          if (!sub_1CB8456FC((uint64_t)&v499))
          {
            v69 = llvm::ConstantFP::get(****(llvm::ConstantFP *****)(*(void *)(a2 + 24) + 32), (llvm::LLVMContext *)&v499, v68);
            v511 = (void *)129;
            LODWORD(v512) = 0;
            v70 = (void *)(*(uint64_t (**)(void *, void **, const llvm::detail::DoubleAPFloat *))(*a4 + 24))(a4, &v511, v69);
            LODWORD(v508) = v48;
            int v509 = 1;
            v511 = v70;
            uint64_t v512 = v71;
            int v513 = 1;
            (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*a4 + 32))(a4, 178, &v508, 1, &v511, 1, 0);
            llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
            char v67 = 0;
          }
        }
        if ((_UNKNOWN *)v500 == &unk_1CFB2E344)
        {
          sub_1CB845718(&v501);
        }
        else if ((*(_DWORD *)(v500 + 8) - 64) <= 0xFFFFFF7F && v501)
        {
          MEMORY[0x1D25D9CB0](v501, 0x1000C8000313F17);
        }
        if ((v67 & 1) == 0) {
          goto LABEL_613;
        }
      }
      goto LABEL_780;
    }
    uint64_t v143 = *(void *)(a2 + 32);
    unsigned int v144 = *(_DWORD *)(v143 + 4);
    if ((v144 & 0x80000000) == 0) {
      goto LABEL_780;
    }
    uint64_t v145 = a1[5];
    unint64_t v146 = v144 & 0x7FFFFFFF;
    if (v146 >= *(unsigned int *)(v145 + 432)) {
      goto LABEL_780;
    }
    unint64_t v147 = *(void *)(*(void *)(v145 + 424) + 8 * v146);
    if (v147 != 513 && v147 != 257) {
      goto LABEL_780;
    }
    sub_1CB986134((uint64_t)&v514, v145, a1[7], a1[8], (unsigned __int8 *)v143, 0, 1, 0, 0);
    if (int)v524 >= 4 && (!HIDWORD(v524) || (sub_1CBA0A500(v144, a1[5]))) {
      goto LABEL_288;
    }
    uint64_t v149 = *(void *)(*(void *)(a2 + 32) + 48);
    unsigned int v150 = *(_DWORD *)(v149 + 32);
    if (v150 > 0x40) {
      int64_t v151 = **(void **)(v149 + 24);
    }
    else {
      int64_t v151 = (uint64_t)(*(void *)(v149 + 24) << -(char)v150) >> -(char)v150;
    }
    uint64_t v212 = a1[5];
    uint64_t v213 = *(void *)(*(void *)(v212 + 24) + 16 * v146 + 8);
    if (v213)
    {
      while ((*(unsigned char *)(v213 + 3) & 1) != 0)
      {
        uint64_t v213 = *(void *)(v213 + 24);
        if (!v213) {
          goto LABEL_287;
        }
      }
      uint64_t v216 = *(void *)(v213 + 8);
      if (**(_WORD **)(v216 + 16) != 65) {
        goto LABEL_294;
      }
      while (1)
      {
        uint64_t v213 = *(void *)(v213 + 24);
        if (!v213) {
          break;
        }
        if ((*(unsigned char *)(v213 + 3) & 1) == 0)
        {
          uint64_t v217 = *(void *)(v213 + 8);
          if (v217 != v216)
          {
            uint64_t v216 = *(void *)(v213 + 8);
            if (**(_WORD **)(v217 + 16) != 65) {
              goto LABEL_294;
            }
          }
        }
      }
    }
LABEL_287:
    v148.i32[0] = v151 + 1;
    uint8x8_t v214 = (uint8x8_t)vcnt_s8(v148);
    v214.i16[0] = vaddlv_u8(v214);
    if (v214.i32[0] == 1)
    {
LABEL_288:
      char v215 = 1;
      goto LABEL_601;
    }
LABEL_294:
    if (sub_1CBA0A500(v144, v212))
    {
      LODWORD(v218) = __clz(__rbit64(v151));
      if (v218 >= 4) {
        uint64_t v218 = 4;
      }
      else {
        uint64_t v218 = v218;
      }
      if (v218)
      {
        size_t v465 = v218;
        v219 = (llvm::LLVMContext *)(v147 >> 3);
        uint64_t v460 = (v218 + 1);
        uint64_t v220 = 1;
        BOOL v221 = 1;
        v488 = (llvm::IntegerType *)v151;
        while (1)
        {
          v499 = (void *)v147;
          LODWORD(v500) = 0;
          size_t v479 = v220;
          unint64_t v222 = v151 >> v220;
          v223 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], v219);
          v224 = llvm::ConstantInt::get(v223, v222, (const llvm::APInt *)1);
          (*(void (**)(void *, void **, void *))(*a4 + 16))(a4, &v499, v224);
          uint64_t v226 = v225;
          uint64_t v227 = a1[5];
          uint64_t v228 = *(unsigned int *)(*(void *)(v225 + 32) + 4);
          v229 = (uint64_t *)((v228 & 0x80000000) != 0
                           ? *(void *)(v227 + 24) + 16 * (v228 & 0x7FFFFFFF) + 8
                           : *(void *)(v227 + 272) + 8 * v228);
          v219 = (llvm::LLVMContext *)(v147 >> 3);
          unsigned int v230 = v479;
          uint64_t v231 = *v229;
          if (v231) {
            break;
          }
LABEL_305:
          if (v506 >= (unint64_t)HIDWORD(v506)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v505 + v506) = v226;
          LODWORD(v506) = v506 + 1;
          BOOL v221 = v479 < v465;
          uint64_t v220 = v479 + 1;
          int64_t v151 = (int64_t)v488;
          if (v479 + 1 == v460)
          {
            BOOL v221 = 0;
            unsigned int v230 = v465;
            goto LABEL_329;
          }
        }
        while ((*(unsigned char *)(v231 + 3) & 1) != 0)
        {
          uint64_t v231 = *(void *)(v231 + 24);
          if (!v231) {
            goto LABEL_305;
          }
        }
        int64_t v151 = (int64_t)v488;
      }
      else
      {
        BOOL v221 = 0;
        unsigned int v230 = 0;
      }
LABEL_329:
      v151 >>= v230;
    }
    else
    {
      unsigned int v230 = 0;
      BOOL v221 = 0;
    }
    unint64_t v491 = v151;
    if ((unint64_t)(v151 - 0x10000) > 0xFFFFFFFFFFFE7FFFLL)
    {
      unint64_t v243 = 129;
    }
    else
    {
      unint64_t v242 = v151 + 0x80000000;
      char v215 = 1;
      if (v242 >> 31 > 2 || v147 == 257 && !v221) {
        goto LABEL_601;
      }
      unint64_t v243 = 257;
    }
    uint64_t v244 = a1[5];
    unsigned int v480 = v230;
    if ((v491 & 0x8000000000000000) != 0)
    {
      unint64_t v255 = v243;
      uint64_t v256 = *(void *)(v244 + 24);
      uint64_t v257 = *(void *)(v244 + 272);
      if ((sub_1CBA0A6B4(v144, v256, v257) & 1) == 0 && (v147 != 513 || !sub_1CBA0A634(v144, v256, v257))) {
        goto LABEL_288;
      }
      uint64_t v258 = 124;
      unint64_t v243 = v255;
      goto LABEL_598;
    }
    uint64_t v245 = *(void *)(*(void *)(v244 + 24) + 16 * v146 + 8);
    if (!v245) {
      goto LABEL_597;
    }
    while ((*(unsigned char *)(v245 + 3) & 1) != 0)
    {
      uint64_t v245 = *(void *)(v245 + 24);
      if (!v245) {
        goto LABEL_597;
      }
    }
    uint64_t v246 = *(void *)(v245 + 8);
LABEL_341:
    int v247 = **(unsigned __int16 **)(v246 + 16);
    if ((v247 & 0xFFFE) == 0x32)
    {
      uint64_t v248 = *(void *)(v246 + 32);
      if (v247 == 51 && (*(_DWORD *)(v248 + 132) == v144 || *(_DWORD *)(v248 + 164) == v144)
        || (*(_DWORD *)(v248 + 32 * (v247 != 50) + 16) - 38) < 4)
      {
        goto LABEL_594;
      }
      goto LABEL_367;
    }
    if (v247 != 65)
    {
      if (v247 == 45)
      {
        uint64_t v249 = *(unsigned int *)(*(void *)(v246 + 32) + 36);
        if ((v249 & 0x80000000) != 0) {
          v250 = (uint64_t *)(*(void *)(v244 + 24) + 16 * (v249 & 0x7FFFFFFF) + 8);
        }
        else {
          v250 = (uint64_t *)(*(void *)(v244 + 272) + 8 * v249);
        }
        uint64_t v251 = *v250;
        if ((*(unsigned char *)(v251 + 3) & 1) == 0) {
          uint64_t v251 = *(void *)(v251 + 24);
        }
        if (**(_WORD **)(*(void *)(v251 + 8) + 16) == 269) {
          goto LABEL_594;
        }
        goto LABEL_367;
      }
      if ((v247 - 127) > 2)
      {
        BOOL v253 = (v247 - 46) > 0x15 || ((1 << (v247 - 46)) & 0x300003) == 0;
        if (v253 && v247 != 313) {
          goto LABEL_594;
        }
        goto LABEL_367;
      }
      int v360 = *(_DWORD *)(*(void *)(v246 + 32) + 4);
      if (v360 < 0)
      {
        uint64_t v361 = v360 & 0x7FFFFFFF;
        if (v361 < *(_DWORD *)(v244 + 432) && *(void *)(*(void *)(v244 + 424) + 8 * v361) == 513)
        {
LABEL_594:
          if (v147 != 513) {
            goto LABEL_288;
          }
          unint64_t v362 = v243;
          if ((sub_1CBA0A634(v144, *(void *)(a1[5] + 24), *(void *)(a1[5] + 272)) & 1) == 0) {
            goto LABEL_288;
          }
          uint64_t v258 = 126;
          unint64_t v243 = v362;
          goto LABEL_598;
        }
      }
LABEL_597:
      uint64_t v258 = 126;
LABEL_598:
      v499 = (void *)v243;
      LODWORD(v500) = 0;
      v363 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)(v243 >> 3));
      v364 = llvm::ConstantInt::get(v363, v491, (const llvm::APInt *)1);
      v365 = (void *)(*(uint64_t (**)(void *, void **, void *))(*a4 + 16))(a4, &v499, v364);
      v511 = (void *)v147;
      LODWORD(v512) = 0;
      v499 = v365;
      uint64_t v500 = v366;
      LODWORD(v501) = 1;
      v367 = (void *)sub_1CC738034(a4, v258, (unint64_t *)&v511, (int *)&v499);
      if (v480)
      {
        v511 = (void *)v147;
        LODWORD(v512) = 0;
        v499 = v367;
        uint64_t v500 = v368;
        LODWORD(v501) = 1;
        uint64_t v508 = v147;
        int v509 = 0;
        v369 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)(v147 >> 3));
        v370 = llvm::ConstantInt::get(v369, v480, (const llvm::APInt *)1);
        uint64_t v502 = (*(uint64_t (**)(void *, uint64_t *, void *))(*a4 + 16))(a4, &v508, v370);
        uint64_t v503 = v371;
        int v504 = 1;
        (*(void (**)(void *, uint64_t, void **, uint64_t, void **, uint64_t, void))(*a4 + 32))(a4, 127, &v511, 1, &v499, 2, 0);
      }
      sub_1CBA0A7C8((void *)a1[5], (llvm::MachineInstr *)a2, *(_DWORD *)(*(void *)(v368 + 32) + 4), a3);
      char v215 = 0;
LABEL_601:
      if (v506)
      {
        v372 = (llvm::MachineInstr **)v505;
        v373 = (llvm::MachineInstr **)((char *)v505 + 8 * v506);
        do
        {
          uint64_t v374 = a1[5];
          uint64_t v375 = *(unsigned int *)(*((void *)*v372 + 4) + 4);
          if ((v375 & 0x80000000) != 0) {
            v376 = (uint64_t *)(*(void *)(v374 + 24) + 16 * (v375 & 0x7FFFFFFF) + 8);
          }
          else {
            v376 = (uint64_t *)(*(void *)(v374 + 272) + 8 * v375);
          }
          uint64_t v377 = *v376;
          if (v377)
          {
            while ((*(unsigned char *)(v377 + 3) & 1) != 0)
            {
              uint64_t v377 = *(void *)(v377 + 24);
              if (!v377) {
                goto LABEL_608;
              }
            }
          }
          else
          {
LABEL_608:
            llvm::MachineInstr::eraseFromParent(*v372);
          }
          ++v372;
        }
        while (v372 != v373);
      }
      if ((v215 & 1) == 0) {
        goto LABEL_613;
      }
      goto LABEL_780;
    }
    unint64_t v252 = v243;
    sub_1CC73C210(v144, v244, (uint64_t)&v499);
    if ((_BYTE)v501)
    {
      if (v500 < 0x41)
      {
        unint64_t v243 = v252;
        if ((uint64_t)((void)v499 << -(char)v500) >> -(char)v500 == 0xFFFF) {
          goto LABEL_594;
        }
LABEL_367:
        uint64_t v254 = *(void *)(v245 + 8);
        while (1)
        {
          uint64_t v245 = *(void *)(v245 + 24);
          if (!v245) {
            goto LABEL_597;
          }
          if ((*(unsigned char *)(v245 + 3) & 1) == 0)
          {
            uint64_t v246 = *(void *)(v245 + 8);
            if (v246 != v254) {
              goto LABEL_341;
            }
          }
        }
      }
      if (v499) {
        MEMORY[0x1D25D9CB0](v499, 0x1000C8000313F17);
      }
    }
    unint64_t v243 = v252;
    goto LABEL_367;
  }
  if (v8 != 45)
  {
    if (v8 != 116) {
      goto LABEL_780;
    }
    uint64_t v9 = *(unsigned int *)(a2 + 40);
    uint64_t v10 = *(void *)(a2 + 32);
    if (v9)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(unsigned __int8 **)(a2 + 32);
      while (1)
      {
        int v13 = *v12;
        v12 += 32;
        if (v13 == 17) {
          break;
        }
        if (v9 == ++v11) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      LODWORD(v11) = -1;
    }
    int v14 = *(_DWORD *)(v10 + 32 * v11 + 16);
    if (v14 != 2131)
    {
      if (v14 == 2579 || v14 == 2488)
      {
        uint64_t v15 = *(unsigned int *)(v10 + 68);
        uint64_t v16 = a1[5];
        if ((v15 & 0x80000000) != 0) {
          v17 = (uint64_t *)(*(void *)(v16 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
        }
        else {
          v17 = (uint64_t *)(*(void *)(v16 + 272) + 8 * v15);
        }
        uint64_t v18 = *v17;
        if ((*(unsigned char *)(v18 + 3) & 1) == 0) {
          uint64_t v18 = *(void *)(v18 + 24);
        }
        uint64_t v19 = *(void *)(v18 + 8);
        if (**(_WORD **)(v19 + 16) == 51
          && !(*(_WORD *)(*(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 8) + 1020) & 1 | ((~*(unsigned __int16 *)(v19 + 44) & 0x7C0) == 0)))
        {
          int v20 = *(_DWORD *)(*(void *)(v19 + 32) + 48);
          if ((v20 - 32) >= 0xA && (v20 - 10) >= 0xFFFFFFFD)
          {
            v499 = (void *)129;
            LODWORD(v500) = 0;
            uint64_t v21 = llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)0x10);
            int v23 = *(llvm::ConstantInt **)v21;
            unsigned int v24 = *(_DWORD *)(v21 + 8);
            LODWORD(v515) = v24 >> 8;
            if (v24 >> 8 >= 0x41) {
              operator new[]();
            }
            uint64_t v514 = 0;
            unint64_t v25 = llvm::ConstantInt::get(v23, (llvm::LLVMContext *)&v514, v22);
            if (v515 >= 0x41 && v514) {
              MEMORY[0x1D25D9CB0](v514, 0x1000C8000313F17);
            }
            uint64_t v26 = (*(uint64_t (**)(void *, void **, void *))(*a4 + 16))(a4, &v499, v25);
            uint64_t v477 = v27;
            v486 = (llvm::IntegerType *)v26;
            v499 = (void *)129;
            LODWORD(v500) = 0;
            uint64_t v28 = llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)0x10);
            v30 = *(llvm::ConstantInt **)v28;
            unsigned int v31 = *(_DWORD *)(v28 + 8);
            LODWORD(v515) = v31 >> 8;
            if (v31 >> 8 > 0x40) {
              operator new[]();
            }
            if (v31 <= 0xFF) {
              LOBYTE(v32) = 0;
            }
            else {
              unint64_t v32 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v31) + 63);
            }
            uint64_t v514 = v32 & 1;
            v33 = llvm::ConstantInt::get(v30, (llvm::LLVMContext *)&v514, v29);
            if (v515 >= 0x41 && v514) {
              MEMORY[0x1D25D9CB0](v514, 0x1000C8000313F17);
            }
            uint64_t v34 = (*(uint64_t (**)(void *, void **, void *))(*a4 + 16))(a4, &v499, v33);
            uint64_t v36 = *(void *)(v19 + 32);
            int v37 = *(_DWORD *)(v36 + 68);
            uint64_t v459 = v35;
            size_t v463 = v34;
            int v470 = *(_DWORD *)(v36 + 100);
            if (v20 == 7)
            {
              uint64_t v38 = v477;
              uint64_t v39 = (uint64_t)v486;
              uint64_t v40 = v34;
              uint64_t v41 = v35;
            }
            else
            {
              uint64_t v41 = v477;
              uint64_t v40 = (uint64_t)v486;
              uint64_t v39 = v34;
              uint64_t v38 = v35;
            }
            v499 = (void *)129;
            LODWORD(v500) = 0;
            LODWORD(v514) = 1;
            LODWORD(v516) = 2;
            LODWORD(v517) = v37;
            LODWORD(v519) = 0;
            LODWORD(v520) = v37;
            int v522 = 0;
            size_t v523 = v40;
            uint64_t v524 = v41;
            int v525 = 1;
            uint64_t v526 = v39;
            uint64_t v527 = v38;
            int v528 = 1;
            int v490 = v37;
            uint64_t v238 = (*(uint64_t (**)(void *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, 51, &v499, 1, &v514, 5, 0);
            v499 = (void *)129;
            LODWORD(v500) = 0;
            LODWORD(v514) = 1;
            LODWORD(v516) = 2;
            LODWORD(v517) = v470;
            LODWORD(v519) = 0;
            LODWORD(v520) = v470;
            int v522 = 0;
            size_t v523 = v238;
            uint64_t v524 = v239;
            int v525 = 1;
            uint64_t v526 = v39;
            uint64_t v527 = v38;
            int v528 = 1;
            uint64_t v240 = (*(uint64_t (**)(void *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, 51, &v499, 1, &v514, 5, 0);
            if (v20 == 9)
            {
              v499 = (void *)129;
              LODWORD(v500) = 0;
              LODWORD(v514) = 1;
              LODWORD(v516) = 2;
              LODWORD(v517) = v490;
              LODWORD(v519) = 0;
              LODWORD(v520) = v470;
              int v522 = 0;
              size_t v523 = v463;
              uint64_t v524 = v459;
              int v525 = 1;
              uint64_t v526 = v240;
              uint64_t v527 = v241;
              int v528 = 1;
              (*(void (**)(void *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, 51, &v499, 1, &v514, 5, 0);
            }
            llvm::MachineOperand::setReg(*(void *)(a2 + 32) + 64, *(_DWORD *)(*(void *)(v241 + 32) + 4));
            (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, a2);
            goto LABEL_613;
          }
        }
      }
      goto LABEL_780;
    }
    int v175 = *(_DWORD *)(v10 + 4);
    if ((v175 & 0x80000000) == 0) {
      goto LABEL_780;
    }
    uint64_t v176 = a1[5];
    uint64_t v177 = v175 & 0x7FFFFFFF;
    if ((v175 & 0x7FFFFFFFu) >= *(_DWORD *)(v176 + 432) || *(void *)(*(void *)(v176 + 424) + 8 * v177) != 129) {
      goto LABEL_780;
    }
    uint64_t v178 = *(unsigned int *)(v10 + 68);
    if ((v178 & 0x80000000) != 0) {
      v179 = (uint64_t *)(*(void *)(v176 + 24) + 16 * (v178 & 0x7FFFFFFF) + 8);
    }
    else {
      v179 = (uint64_t *)(*(void *)(v176 + 272) + 8 * v178);
    }
    uint64_t v180 = *v179;
    if ((*(unsigned char *)(v180 + 3) & 1) == 0) {
      uint64_t v180 = *(void *)(v180 + 24);
    }
    v181 = *(unsigned __int16 ***)(v180 + 8);
    unsigned int v182 = *v181[2];
    if (v182 > 0x104)
    {
      BOOL v259 = v182 - 314 > 0x2A || ((1 << (v182 - 58)) & 0x40000200003) == 0;
      if (v259 && v182 != 261)
      {
LABEL_391:
        uint64_t v262 = *(void *)(v176 + 24);
        uint64_t v263 = *(void *)(v262 + 16 * v177 + 8);
        if (!v263)
        {
LABEL_394:
          uint64_t v95 = 1;
          LODWORD(v499) = v175;
          LODWORD(v500) = 1;
          LODWORD(v514) = v178;
          LODWORD(v516) = 0;
          (*(void (**)(void *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, 258, &v499, 1, &v514, 1, 0);
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          goto LABEL_781;
        }
        while ((*(unsigned char *)(v263 + 3) & 1) != 0)
        {
          uint64_t v263 = *(void *)(v263 + 24);
          if (!v263) {
            goto LABEL_394;
          }
        }
        uint64_t v264 = *(void *)(v263 + 8);
LABEL_399:
        int v265 = **(unsigned __int16 **)(v264 + 16);
        if ((v265 - 165) < 2 || v265 == 163) {
          goto LABEL_417;
        }
        if (v265 == 177)
        {
          uint64_t v266 = *(unsigned int *)(*(void *)(v264 + 32) + 4);
          v267 = (uint64_t *)((v266 & 0x80000000) != 0
                           ? v262 + 16 * (v266 & 0x7FFFFFFF) + 8
                           : *(void *)(v176 + 272) + 8 * v266);
          uint64_t v268 = *v267;
          if (v268)
          {
            while ((*(unsigned char *)(v268 + 3) & 1) != 0)
            {
              uint64_t v268 = *(void *)(v268 + 24);
              if (!v268) {
                goto LABEL_452;
              }
            }
            while (1)
            {
              uint64_t v268 = *(void *)(v268 + 24);
              if (!v268) {
                break;
              }
              if ((*(unsigned char *)(v268 + 3) & 1) == 0) {
                goto LABEL_452;
              }
            }
            v269 = (uint64_t *)((v266 & 0x80000000) != 0
                             ? v262 + 16 * (v266 & 0x7FFFFFFF) + 8
                             : *(void *)(v176 + 272) + 8 * v266);
            for (uint64_t i = *v269; (*(unsigned char *)(i + 3) & 1) != 0; uint64_t i = *(void *)(i + 24))
              ;
            if (**(_WORD **)(*(void *)(i + 8) + 16) == 163)
            {
LABEL_417:
              while (1)
              {
                uint64_t v263 = *(void *)(v263 + 24);
                if (!v263) {
                  goto LABEL_394;
                }
                if ((*(unsigned char *)(v263 + 3) & 1) == 0 && *(void *)(v263 + 8) != v264)
                {
                  uint64_t v264 = *(void *)(v263 + 8);
                  goto LABEL_399;
                }
              }
            }
          }
        }
LABEL_452:
        if ((v178 & 0x80000000) != 0) {
          v294 = (uint64_t *)(v262 + 16 * (v178 & 0x7FFFFFFF) + 8);
        }
        else {
          v294 = (uint64_t *)(*(void *)(v176 + 272) + 8 * v178);
        }
        uint64_t v295 = *v294;
        if (v295)
        {
          if ((*(unsigned char *)(v295 + 3) & 1) != 0
            || (uint64_t v295 = *(void *)(v295 + 24)) != 0 && (*(unsigned char *)(v295 + 3) & 1) != 0)
          {
            uint64_t v296 = *(void *)(v295 + 8);
            if (v296)
            {
              if (**(_WORD **)(v296 + 16) == 179 && *(_DWORD *)(v296 + 40) == 2)
              {
                int v466 = *(_DWORD *)(*(void *)(v296 + 32) + 36);
                unsigned int v297 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v176, "", 0);
                unsigned int v462 = v297;
                size_t v458 = v297;
                unint64_t v298 = v297 & 0x7FFFFFFF;
                *(void *)(*(void *)(v176 + 24) + 16 * v298) = 4;
                unint64_t v299 = *(unsigned int *)(v176 + 432);
                if (v298 >= v299)
                {
                  uint64_t v473 = *(void *)(v176 + 440);
                  v492 = (llvm::IntegerType *)(v298 + 1 - v299);
                  if (v298 >= *(unsigned int *)(v176 + 436)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  int v300 = *(_DWORD *)(v176 + 432);
                  if (v492)
                  {
                    v301 = (void *)(*(void *)(v176 + 424) + 8 * v299);
                    uint64_t v302 = ~(unint64_t)(v297 & 0x7FFFFFFF) + v299;
                    do
                    {
                      *v301++ = v473;
                      BOOL v279 = __CFADD__(v302++, 1);
                    }
                    while (!v279);
                    int v300 = *(_DWORD *)(v176 + 432);
                  }
                  unint64_t v298 = v297 & 0x7FFFFFFF;
                  *(_DWORD *)(v176 + 432) = v300 + v492;
                }
                *(void *)(*(void *)(v176 + 424) + 8 * v298) = 257;
                uint64_t v303 = *(void *)(v176 + 8);
                if (v303) {
                  (*(void (**)(uint64_t, size_t))(*(void *)v303 + 24))(v303, v458);
                }
                LODWORD(v514) = v462;
                v304 = sub_1CC7390C0(a4, 2131, (int *)&v514, 1, 0);
                v306 = v305;
                uint64_t v515 = 0;
                uint64_t v516 = 0;
                LODWORD(v514) = 0;
                HIDWORD(v514) = v466;
                v517 = 0;
                llvm::MachineInstr::addOperand(v305, v304, (const llvm::MachineOperand *)&v514);
                LODWORD(v499) = v175;
                LODWORD(v500) = 1;
                uint64_t v514 = (uint64_t)v304;
                uint64_t v515 = (uint64_t)v306;
                LODWORD(v516) = 1;
                (*(void (**)(void *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, 179, &v499, 1, &v514, 1, 0);
                llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
                uint64_t v307 = a1[5];
                if ((v178 & 0x80000000) != 0) {
                  v308 = (uint64_t *)(*(void *)(v307 + 24) + 16 * (v178 & 0x7FFFFFFF) + 8);
                }
                else {
                  v308 = (uint64_t *)(*(void *)(v307 + 272) + 8 * v178);
                }
                uint64_t v309 = *v308;
                if (v309)
                {
                  if ((*(unsigned char *)(v309 + 3) & 1) == 0)
                  {
LABEL_613:
                    uint64_t v95 = 1;
                    goto LABEL_781;
                  }
                  while (1)
                  {
                    uint64_t v309 = *(void *)(v309 + 24);
                    if (!v309) {
                      break;
                    }
                    uint64_t v95 = 1;
                    if ((*(unsigned char *)(v309 + 3) & 1) == 0) {
                      goto LABEL_781;
                    }
                  }
                }
                llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v181);
                goto LABEL_613;
              }
            }
          }
        }
        goto LABEL_780;
      }
    }
    else
    {
      BOOL v183 = v182 - 163 > 0x38 || ((1 << (v182 + 93)) & 0x18800000000140DLL) == 0;
      if (v183 && v182 != 85) {
        goto LABEL_391;
      }
    }
    if ((v178 & 0x80000000) != 0) {
      v260 = (uint64_t *)(*(void *)(v176 + 24) + 16 * (v178 & 0x7FFFFFFF) + 8);
    }
    else {
      v260 = (uint64_t *)(*(void *)(v176 + 272) + 8 * v178);
    }
    uint64_t v261 = *v260;
    if (v261)
    {
      while ((*(unsigned char *)(v261 + 3) & 1) != 0)
      {
        uint64_t v261 = *(void *)(v261 + 24);
        if (!v261) {
          goto LABEL_391;
        }
      }
      while (1)
      {
        uint64_t v261 = *(void *)(v261 + 24);
        if (!v261) {
          goto LABEL_780;
        }
        if ((*(unsigned char *)(v261 + 3) & 1) == 0) {
          goto LABEL_391;
        }
      }
    }
    goto LABEL_391;
  }
  if (*(unsigned char *)(a1[4] + 318)) {
    goto LABEL_780;
  }
  v99 = *(_DWORD **)(a2 + 32);
  int v100 = v99[1];
  if ((v100 & 0x80000000) == 0) {
    goto LABEL_780;
  }
  uint64_t v101 = a1[5];
  uint64_t v102 = v100 & 0x7FFFFFFF;
  unsigned int v103 = *(_DWORD *)(v101 + 432);
  if ((v100 & 0x7FFFFFFFu) < v103 && *(void *)(*(void *)(v101 + 424) + 8 * v102) == 513)
  {
    uint64_t v104 = v99[9];
    uint64_t v105 = v99[17];
    if ((v104 & 0x80000000) != 0) {
      v106 = (uint64_t *)(*(void *)(v101 + 24) + 16 * (v104 & 0x7FFFFFFF) + 8);
    }
    else {
      v106 = (uint64_t *)(*(void *)(v101 + 272) + 8 * v104);
    }
    uint64_t v107 = *v106;
    uint64_t v471 = *(unsigned __int16 *)(a2 + 44);
    if (v107
      && ((*(unsigned char *)(v107 + 3) & 1) != 0 || (uint64_t v107 = *(void *)(v107 + 24)) != 0 && (*(unsigned char *)(v107 + 3) & 1) != 0))
    {
      v108 = *(unsigned __int16 ***)(v107 + 8);
      if ((v105 & 0x80000000) == 0)
      {
LABEL_759:
        v109 = (uint64_t *)(*(void *)(v101 + 272) + 8 * v105);
        goto LABEL_108;
      }
    }
    else
    {
      v108 = 0;
      if ((v105 & 0x80000000) == 0) {
        goto LABEL_759;
      }
    }
    v109 = (uint64_t *)(*(void *)(v101 + 24) + 16 * (v105 & 0x7FFFFFFF) + 8);
LABEL_108:
    uint64_t v110 = *v109;
    if ((*(unsigned char *)(v110 + 3) & 1) == 0) {
      uint64_t v110 = *(void *)(v110 + 24);
    }
    uint64_t v111 = *(void *)(v110 + 8);
    v487 = (llvm::IntegerType *)v108;
    int v112 = *v108[2];
    v464 = (void *)(v101 + 424);
    if (v112 == 127) {
      goto LABEL_244;
    }
    int v113 = **(unsigned __int16 **)(v111 + 16);
    if (v113 == 127) {
      goto LABEL_244;
    }
    if (v112 == 313 || v112 == 47)
    {
      v114 = (uint64_t *)((v104 & 0x80000000) != 0
                       ? *(void *)(v101 + 24) + 16 * (v104 & 0x7FFFFFFF) + 8
                       : *(void *)(v101 + 272) + 8 * v104);
      uint64_t v115 = *v114;
      if (v115)
      {
        while ((*(unsigned char *)(v115 + 3) & 1) != 0)
        {
          uint64_t v115 = *(void *)(v115 + 24);
          if (!v115) {
            goto LABEL_119;
          }
        }
        do
        {
          uint64_t v115 = *(void *)(v115 + 24);
          if (!v115) {
            goto LABEL_244;
          }
        }
        while ((*(unsigned char *)(v115 + 3) & 1) != 0);
      }
    }
LABEL_119:
    if (v113 == 313 || v113 == 47)
    {
      v116 = (uint64_t *)((v105 & 0x80000000) != 0
                       ? *(void *)(v101 + 24) + 16 * (v105 & 0x7FFFFFFF) + 8
                       : *(void *)(v101 + 272) + 8 * v105);
      uint64_t v117 = *v116;
      if (v117)
      {
        while ((*(unsigned char *)(v117 + 3) & 1) != 0)
        {
          uint64_t v117 = *(void *)(v117 + 24);
          if (!v117) {
            goto LABEL_126;
          }
        }
        do
        {
          uint64_t v117 = *(void *)(v117 + 24);
          if (!v117) {
            goto LABEL_244;
          }
        }
        while ((*(unsigned char *)(v117 + 3) & 1) != 0);
      }
    }
LABEL_126:
    if (v112 == 124 || v113 == 124)
    {
LABEL_244:
      uint64_t v199 = v111;
      v499 = &v501;
      uint64_t v500 = 0x200000000;
      sub_1CBA0E058((uint64_t)&v499, 2uLL, 0);
      if (sub_1CBA0DF64((uint64_t)v487, *(void *)(v101 + 24), *(void *)(v101 + 272), v499))
      {
        if ((v104 & 0x80000000) != 0) {
          v200 = (uint64_t *)(*(void *)(v101 + 24) + 16 * (v104 & 0x7FFFFFFF) + 8);
        }
        else {
          v200 = (uint64_t *)(*(void *)(v101 + 272) + 8 * v104);
        }
        uint64_t v201 = v199;
        uint64_t v202 = *v200;
        if (v202)
        {
          int v203 = v105;
          while ((*(unsigned char *)(v202 + 3) & 1) != 0)
          {
            uint64_t v202 = *(void *)(v202 + 24);
            if (!v202)
            {
              BOOL v204 = 0;
              goto LABEL_313;
            }
          }
          while (1)
          {
            uint64_t v202 = *(void *)(v202 + 24);
            BOOL v204 = v202 == 0;
            if (!v202) {
              break;
            }
            if ((*(unsigned char *)(v202 + 3) & 1) == 0) {
              goto LABEL_313;
            }
          }
          uint64_t v201 = (uint64_t)v487;
          LODWORD(v105) = v104;
          LODWORD(v104) = v203;
        }
        else
        {
          BOOL v204 = 0;
        }
      }
      else
      {
        BOOL v204 = 0;
        uint64_t v201 = v199;
      }
LABEL_313:
      if (sub_1CBA0DF64(v201, *(void *)(v101 + 24), *(void *)(v101 + 272), v499)
        && ((v105 & 0x80000000) == 0
          ? (v232 = (uint64_t *)(*(void *)(v101 + 272) + 8 * v105))
          : (v232 = (uint64_t *)(*(void *)(v101 + 24) + 16 * (v105 & 0x7FFFFFFF) + 8)),
            (uint64_t v233 = *v232) != 0))
      {
        while ((*(unsigned char *)(v233 + 3) & 1) != 0)
        {
          uint64_t v233 = *(void *)(v233 + 24);
          if (!v233) {
            goto LABEL_319;
          }
        }
        while (1)
        {
          uint64_t v233 = *(void *)(v233 + 24);
          if (!v233) {
            break;
          }
          if ((*(unsigned char *)(v233 + 3) & 1) == 0) {
            goto LABEL_319;
          }
        }
        unsigned int v235 = *(_DWORD *)v499;
        int v489 = *((_DWORD *)v499 + 1);
        v511 = (void *)513;
        LODWORD(v512) = 0;
        LODWORD(v514) = v235;
        LODWORD(v516) = 0;
        (*(void (**)(void *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, 126, &v511, 1, &v514, 1, 0);
        v511 = (void *)513;
        LODWORD(v512) = 0;
        if (v204)
        {
          int v237 = *(_DWORD *)(*(void *)(v236 + 32) + 4);
          LODWORD(v516) = 0;
        }
        else
        {
          LODWORD(v516) = 0;
          int v237 = v104;
          LODWORD(v104) = *(_DWORD *)(*(void *)(v236 + 32) + 4);
        }
        LODWORD(v514) = v237;
        LODWORD(v517) = v104;
        LODWORD(v519) = 0;
        uint64_t v472 = v471 | 0x100000000;
        (*(void (**)(void *, uint64_t, void **, uint64_t, uint64_t *, uint64_t))(*a4 + 32))(a4, 45, &v511, 1, &v514, 2);
        size_t v457 = v271;
        unsigned int v461 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v101, "", 0);
        unint64_t v272 = v461 & 0x7FFFFFFF;
        *(void *)(*(void *)(v101 + 24) + 16 * v272) = 4;
        unint64_t v273 = *(unsigned int *)(v101 + 432);
        if (v272 >= v273)
        {
          uint64_t v274 = *(void *)(v101 + 440);
          uint64_t v275 = v272 + 1 - v273;
          if (v272 >= *(unsigned int *)(v101 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v276 = *(_DWORD *)(v101 + 432);
          if (v275)
          {
            v277 = (void *)(*v464 + 8 * *(unsigned int *)(v101 + 432));
            uint64_t v278 = ~v272 + v273;
            do
            {
              *v277++ = v274;
              BOOL v279 = __CFADD__(v278++, 1);
            }
            while (!v279);
            int v276 = *(_DWORD *)(v101 + 432);
          }
          *(_DWORD *)(v101 + 432) = v276 + v275;
        }
        *(void *)(*(void *)(v101 + 424) + 8 * v272) = 257;
        uint64_t v280 = *(void *)(v101 + 8);
        if (v280) {
          (*(void (**)(uint64_t))(*(void *)v280 + 24))(v280);
        }
        unsigned int v281 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v101, "", 0);
        unint64_t v282 = v281 & 0x7FFFFFFF;
        *(void *)(*(void *)(v101 + 24) + 16 * v282) = 4;
        unint64_t v283 = *(unsigned int *)(v101 + 432);
        if (v282 >= v283)
        {
          uint64_t v284 = *(void *)(v101 + 440);
          uint64_t v285 = v282 + 1 - v283;
          if (v282 >= *(unsigned int *)(v101 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v286 = *(_DWORD *)(v101 + 432);
          if (v285)
          {
            v287 = (void *)(*v464 + 8 * *(unsigned int *)(v101 + 432));
            uint64_t v288 = ~v282 + v283;
            do
            {
              *v287++ = v284;
              BOOL v279 = __CFADD__(v288++, 1);
            }
            while (!v279);
            int v286 = *(_DWORD *)(v101 + 432);
          }
          *(_DWORD *)(v101 + 432) = v286 + v285;
        }
        *(void *)(*(void *)(v101 + 424) + 8 * v282) = 257;
        uint64_t v289 = *(void *)(v101 + 8);
        if (v289) {
          (*(void (**)(uint64_t))(*(void *)v289 + 24))(v289);
        }
        v511 = (void *)__PAIR64__(v281, v461);
        LODWORD(v514) = *(_DWORD *)(*(void *)(v457 + 32) + 4);
        LODWORD(v516) = 0;
        sub_1CC738BB8((uint64_t)a4, (char *)&v511, 2, (uint64_t)&v514);
        v511 = (void *)257;
        LODWORD(v512) = 0;
        LODWORD(v514) = v281;
        LODWORD(v516) = 0;
        LODWORD(v517) = v489;
        LODWORD(v519) = 0;
        char v234 = 1;
        (*(void (**)(void *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, uint64_t))(*a4 + 32))(a4, 45, &v511, 1, &v514, 2, v472);
        LODWORD(v511) = v100;
        LODWORD(v512) = 1;
        LODWORD(v514) = v461;
        LODWORD(v516) = 0;
        LODWORD(v517) = *(_DWORD *)(*(void *)(v290 + 32) + 4);
        LODWORD(v519) = 0;
        (*(void (**)(void *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, 76, &v511, 1, &v514, 2, 0);
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
      }
      else
      {
LABEL_319:
        char v234 = 0;
      }
      if (v499 != &v501) {
        free(v499);
      }
      if (v234) {
        goto LABEL_613;
      }
      int v291 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      uint64_t v101 = a1[5];
      uint64_t v205 = a1[6];
      LOWORD(v511) = *(_WORD *)(a2 + 44);
      LODWORD(v499) = v291;
      if ((v291 & 0x80000000) == 0) {
        goto LABEL_780;
      }
      unsigned int v103 = *(_DWORD *)(v101 + 432);
      LODWORD(v102) = v291 & 0x7FFFFFFF;
      goto LABEL_257;
    }
    uint64_t v478 = v111;
    unsigned int v451 = v105;
    v499 = (void *)257;
    LODWORD(v500) = 0;
    uint64_t v118 = llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)0x20);
    v120 = *(llvm::ConstantInt **)v118;
    unsigned int v121 = *(_DWORD *)(v118 + 8);
    LODWORD(v515) = v121 >> 8;
    if (v121 >> 8 >= 0x41) {
      operator new[]();
    }
    uint64_t v514 = 0;
    v122 = llvm::ConstantInt::get(v120, (llvm::LLVMContext *)&v514, v119);
    if (v515 >= 0x41 && v514) {
      MEMORY[0x1D25D9CB0](v514, 0x1000C8000313F17);
    }
    (*(void (**)(void *, void **, void *))(*a4 + 16))(a4, &v499, v122);
    uint64_t v452 = v123;
    v499 = (void *)129;
    LODWORD(v500) = 0;
    uint64_t v124 = llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)0x10);
    v126 = *(llvm::ConstantInt **)v124;
    unsigned int v127 = *(_DWORD *)(v124 + 8);
    LODWORD(v515) = v127 >> 8;
    if (v127 >> 8 >= 0x41) {
      operator new[]();
    }
    uint64_t v514 = 0;
    v128 = llvm::ConstantInt::get(v126, (llvm::LLVMContext *)&v514, v125);
    if (v515 >= 0x41 && v514) {
      MEMORY[0x1D25D9CB0](v514, 0x1000C8000313F17);
    }
    uint64_t v129 = (*(uint64_t (**)(void *, void **, void *))(*a4 + 16))(a4, &v499, v128);
    uint64_t v455 = v130;
    uint64_t v456 = v129;
    v499 = (void *)129;
    LODWORD(v500) = 0;
    uint64_t v131 = llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)0x10);
    v133 = *(llvm::ConstantInt **)v131;
    unsigned int v134 = *(_DWORD *)(v131 + 8);
    LODWORD(v515) = v134 >> 8;
    if (v134 >> 8 > 0x40) {
      operator new[]();
    }
    if (v134 <= 0xFF) {
      LOBYTE(v135) = 0;
    }
    else {
      unint64_t v135 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v134) + 63);
    }
    uint64_t v514 = v135 & 1;
    v136 = llvm::ConstantInt::get(v133, (llvm::LLVMContext *)&v514, v132);
    if (v515 >= 0x41 && v514) {
      MEMORY[0x1D25D9CB0](v514, 0x1000C8000313F17);
    }
    uint64_t v137 = (*(uint64_t (**)(void *, void **, void *))(*a4 + 16))(a4, &v499, v136);
    uint64_t v453 = v138;
    uint64_t v454 = v137;
    v499 = &v501;
    uint64_t v500 = 0x200000000;
    sub_1CBA0E058((uint64_t)&v499, 2uLL, 0);
    v511 = &v513;
    uint64_t v512 = 0x200000000;
    sub_1CBA0E058((uint64_t)&v511, 2uLL, 0);
    int v139 = sub_1CBA0DF64((uint64_t)v487, *(void *)(v101 + 24), *(void *)(v101 + 272), v499);
    int v140 = sub_1CBA0DF64(v478, *(void *)(v101 + 24), *(void *)(v101 + 272), v511);
    if (v139)
    {
      v141 = (unsigned int *)((char *)v499 + 4);
      unsigned int v142 = *(_DWORD *)v499;
      goto LABEL_496;
    }
    if (v112 == 76)
    {
      if (*((_DWORD *)v487 + 10) == 3)
      {
        uint64_t v313 = *((void *)v487 + 4);
        unsigned int v142 = *(_DWORD *)(v313 + 36);
        v141 = (unsigned int *)(v313 + 68);
        goto LABEL_496;
      }
    }
    else if (v112 == 126)
    {
      unsigned int v142 = *(_DWORD *)(*((void *)v487 + 4) + 36);
      if ((v142 & 0x80000000) == 0
        || (v142 & 0x7FFFFFFF) >= *(_DWORD *)(v101 + 432)
        || *(void *)(*v464 + 8 * (v142 & 0x7FFFFFFF)) != 257)
      {
        uint64_t v508 = 257;
        int v509 = 0;
        LODWORD(v514) = v142;
        LODWORD(v516) = 0;
        (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, 126, &v508, 1, &v514, 1, 0);
        unsigned int v142 = *(_DWORD *)(*(void *)(v310 + 32) + 4);
      }
      v141 = (unsigned int *)(*(void *)(v452 + 32) + 4);
      goto LABEL_496;
    }
    LODWORD(v508) = v104;
    int v510 = 0;
    uint64_t v514 = (uint64_t)&v516;
    uint64_t v516 = 257;
    LODWORD(v517) = 0;
    uint64_t v518 = 257;
    LODWORD(v519) = 0;
    uint64_t v515 = 0x800000002;
    (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, 74, &v516, 2, &v508, 1, 0);
    uint64_t v315 = v314;
    if ((uint64_t *)v514 != &v516) {
      free((void *)v514);
    }
    uint64_t v316 = *(void *)(v315 + 32);
    unsigned int v142 = *(_DWORD *)(v316 + 4);
    v141 = (unsigned int *)(v316 + 36);
LABEL_496:
    unsigned int v493 = *v141;
    if (v140)
    {
      v317 = v511;
      unsigned int v318 = *(_DWORD *)v511;
LABEL_572:
      unsigned int v321 = v317[1];
      goto LABEL_573;
    }
    if (v113 == 126)
    {
      unsigned int v318 = *(_DWORD *)(*(void *)(v478 + 32) + 36);
      if ((v318 & 0x80000000) == 0
        || (v318 & 0x7FFFFFFF) >= *(_DWORD *)(v101 + 432)
        || *(void *)(*v464 + 8 * (v318 & 0x7FFFFFFF)) != 257)
      {
        uint64_t v508 = 257;
        int v509 = 0;
        LODWORD(v514) = v318;
        LODWORD(v516) = 0;
        (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, 126, &v508, 1, &v514, 1, 0);
        unsigned int v318 = *(_DWORD *)(*(void *)(v319 + 32) + 4);
      }
      v317 = *(_DWORD **)(v452 + 32);
      goto LABEL_572;
    }
    sub_1CC73C210(v451, v101, (uint64_t)&v514);
    if ((_BYTE)v516)
    {
      if (v515 < 0x41)
      {
        unint64_t v345 = v514 << -(char)v515 >> -(char)v515;
        uint64_t v514 = 257;
        LODWORD(v515) = 0;
        v346 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)0x20);
        v347 = llvm::ConstantInt::get(v346, v345, (const llvm::APInt *)1);
        (*(void (**)(void *, uint64_t *, void *))(*a4 + 16))(a4, &v514, v347);
        unsigned int v318 = *(_DWORD *)(*(void *)(v348 + 32) + 4);
        uint64_t v514 = 257;
        LODWORD(v515) = 0;
        v349 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)0x20);
        v350 = llvm::ConstantInt::get(v349, HIDWORD(v345), (const llvm::APInt *)1);
        (*(void (**)(void *, uint64_t *, void *))(*a4 + 16))(a4, &v514, v350);
        v317 = *(_DWORD **)(v351 + 32);
        goto LABEL_572;
      }
      if (v514) {
        MEMORY[0x1D25D9CB0](v514, 0x1000C8000313F17);
      }
    }
    if (v113 == 76 && *(_DWORD *)(v478 + 40) == 3)
    {
      uint64_t v320 = *(void *)(v478 + 32);
      unsigned int v318 = *(_DWORD *)(v320 + 36);
      unsigned int v321 = *(_DWORD *)(v320 + 68);
    }
    else
    {
      LODWORD(v508) = v451;
      int v510 = 0;
      uint64_t v514 = (uint64_t)&v516;
      uint64_t v516 = 257;
      LODWORD(v517) = 0;
      uint64_t v518 = 257;
      LODWORD(v519) = 0;
      uint64_t v515 = 0x800000002;
      (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, 74, &v516, 2, &v508, 1, 0);
      uint64_t v323 = v322;
      if ((uint64_t *)v514 != &v516) {
        free((void *)v514);
      }
      uint64_t v324 = *(void *)(v323 + 32);
      unsigned int v318 = *(_DWORD *)(v324 + 4);
      unsigned int v321 = *(_DWORD *)(v324 + 36);
    }
LABEL_573:
    uint64_t v352 = v471;
    sub_1CC73C210(v142, v101, (uint64_t)&v514);
    if ((_BYTE)v516)
    {
      if (v515 >= 0x41)
      {
        if (v514) {
          MEMORY[0x1D25D9CB0](v514, 0x1000C8000313F17);
        }
        uint64_t v352 = v471;
      }
      else if (!(v514 << -(uint64_t)v515 >> -(uint64_t)v515))
      {
        unsigned int v353 = v318;
        goto LABEL_791;
      }
    }
    sub_1CC73C210(v318, v101, (uint64_t)&v514);
    if ((_BYTE)v516)
    {
      if (v515 >= 0x41)
      {
        if (v514) {
          MEMORY[0x1D25D9CB0](v514, 0x1000C8000313F17);
        }
        uint64_t v352 = v471;
        if ((v142 & 0x80000000) == 0) {
          goto LABEL_789;
        }
      }
      else
      {
        unsigned int v353 = v142;
        if (!(v514 << -(char)v515 >> -(char)v515)) {
          goto LABEL_791;
        }
        if ((v142 & 0x80000000) == 0) {
          goto LABEL_789;
        }
      }
    }
    else if ((v142 & 0x80000000) == 0)
    {
      goto LABEL_789;
    }
    if ((v142 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v101 + 432))
    {
      uint64_t v354 = *(void *)(*v464 + 8 * (v142 & 0x7FFFFFFF));
LABEL_790:
      uint64_t v508 = v354;
      int v509 = 0;
      LODWORD(v514) = v142;
      LODWORD(v516) = 0;
      LODWORD(v517) = v318;
      LODWORD(v519) = 0;
      (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(*a4 + 32))(a4, 45, &v508, 1, &v514, 2, v352 | 0x100000000);
      unsigned int v353 = *(_DWORD *)(*(void *)(v441 + 32) + 4);
LABEL_791:
      uint64_t v508 = 129;
      int v509 = 0;
      LODWORD(v514) = 36;
      LODWORD(v516) = 2;
      unsigned int v485 = v353;
      LODWORD(v517) = v353;
      LODWORD(v519) = 0;
      LODWORD(v520) = v142;
      int v522 = 0;
      size_t v523 = v454;
      uint64_t v524 = v453;
      int v525 = 1;
      uint64_t v526 = v456;
      uint64_t v527 = v455;
      int v528 = 1;
      v442 = (llvm::MachineInstr *)(*(uint64_t (**)(void *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, 51, &v508, 1, &v514, 5, 0);
      uint64_t v508 = 257;
      int v509 = 0;
      uint64_t v514 = (uint64_t)v442;
      uint64_t v515 = v443;
      LODWORD(v516) = 1;
      (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, 126, &v508, 1, &v514, 1, 0);
      uint64_t v445 = v444;
      sub_1CC73C210(v493, v101, (uint64_t)&v514);
      if ((_BYTE)v516)
      {
        if (v515 >= 0x41)
        {
          if (v514) {
            MEMORY[0x1D25D9CB0](v514, 0x1000C8000313F17);
          }
          uint64_t v352 = v471;
        }
        else if (!(v514 << -(uint64_t)v515 >> -(uint64_t)v515))
        {
          goto LABEL_811;
        }
      }
      sub_1CC73C210(v321, v101, (uint64_t)&v514);
      if ((_BYTE)v516)
      {
        if (v515 >= 0x41)
        {
          if (v514) {
            MEMORY[0x1D25D9CB0](v514, 0x1000C8000313F17);
          }
          uint64_t v352 = v471;
          if ((v493 & 0x80000000) == 0) {
            goto LABEL_809;
          }
        }
        else
        {
          if (!(v514 << -(uint64_t)v515 >> -(uint64_t)v515))
          {
            unsigned int v321 = v493;
            goto LABEL_811;
          }
          if ((v493 & 0x80000000) == 0) {
            goto LABEL_809;
          }
        }
      }
      else if ((v493 & 0x80000000) == 0)
      {
        goto LABEL_809;
      }
      if ((v493 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v101 + 432))
      {
        uint64_t v446 = *(void *)(*v464 + 8 * (v493 & 0x7FFFFFFF));
LABEL_810:
        uint64_t v508 = v446;
        int v509 = 0;
        LODWORD(v514) = v493;
        LODWORD(v516) = 0;
        LODWORD(v517) = v321;
        LODWORD(v519) = 0;
        (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(*a4 + 32))(a4, 45, &v508, 1, &v514, 2, v352 | 0x100000000);
        unsigned int v321 = *(_DWORD *)(*(void *)(v447 + 32) + 4);
LABEL_811:
        unsigned int v448 = *(_DWORD *)(*(void *)(v445 + 32) + 4);
        sub_1CC73C210(v448, v101, (uint64_t)&v514);
        if ((_BYTE)v516)
        {
          if (v515 >= 0x41)
          {
            if (v514) {
              MEMORY[0x1D25D9CB0](v514, 0x1000C8000313F17);
            }
            uint64_t v352 = v471;
          }
          else if (!(v514 << -(uint64_t)v515 >> -(uint64_t)v515))
          {
            goto LABEL_832;
          }
        }
        sub_1CC73C210(v321, v101, (uint64_t)&v514);
        if ((_BYTE)v516)
        {
          if (v515 >= 0x41)
          {
            if (v514) {
              MEMORY[0x1D25D9CB0](v514, 0x1000C8000313F17);
            }
            uint64_t v352 = v471;
            if ((v448 & 0x80000000) == 0) {
              goto LABEL_830;
            }
          }
          else
          {
            if (!(v514 << -(uint64_t)v515 >> -(uint64_t)v515))
            {
              unsigned int v321 = v448;
LABEL_832:
              LODWORD(v508) = v100;
              int v509 = 1;
              LODWORD(v514) = v485;
              LODWORD(v516) = 0;
              LODWORD(v517) = v321;
              LODWORD(v519) = 0;
              (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, 76, &v508, 1, &v514, 2, 0);
              llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
              if (v511 != &v513) {
                free(v511);
              }
              if (v499 != &v501) {
                free(v499);
              }
              goto LABEL_613;
            }
            if ((v448 & 0x80000000) == 0) {
              goto LABEL_830;
            }
          }
        }
        else if ((v448 & 0x80000000) == 0)
        {
          goto LABEL_830;
        }
        if ((v448 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v101 + 432))
        {
          uint64_t v449 = *(void *)(*v464 + 8 * (v448 & 0x7FFFFFFF));
LABEL_831:
          uint64_t v508 = v449;
          int v509 = 0;
          LODWORD(v514) = v448;
          LODWORD(v516) = 0;
          LODWORD(v517) = v321;
          LODWORD(v519) = 0;
          (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(*a4 + 32))(a4, 45, &v508, 1, &v514, 2, v352 | 0x100000000);
          unsigned int v321 = *(_DWORD *)(*(void *)(v450 + 32) + 4);
          goto LABEL_832;
        }
LABEL_830:
        uint64_t v449 = 0;
        goto LABEL_831;
      }
LABEL_809:
      uint64_t v446 = 0;
      goto LABEL_810;
    }
LABEL_789:
    uint64_t v354 = 0;
    goto LABEL_790;
  }
  uint64_t v205 = a1[6];
  LOWORD(v511) = *(_WORD *)(a2 + 44);
  LODWORD(v499) = v100;
LABEL_257:
  if (v102 >= v103) {
    goto LABEL_780;
  }
  uint64_t v206 = *(void *)(*(void *)(v101 + 424) + 8 * v102);
  if (v206 != 257 && v206 != 129) {
    goto LABEL_780;
  }
  uint64_t v514 = a2;
  uint64_t v515 = v101;
  uint64_t v516 = v205;
  v517 = a4;
  uint64_t v518 = (uint64_t)&v499;
  v519 = &v511;
  uint64_t v95 = 1;
  if ((sub_1CBA0E114((llvm::MachineInstr **)&v514, 1u) & 1) == 0) {
    uint64_t v95 = sub_1CBA0E114((llvm::MachineInstr **)&v514, 2u);
  }
LABEL_781:
  if (v505 != v507) {
    free(v505);
  }
  return v95;
}

uint64_t sub_1CBA0A500(int a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (!v2) {
    return 1;
  }
  while ((*(unsigned char *)(v2 + 3) & 1) != 0)
  {
    uint64_t v2 = *(void *)(v2 + 24);
    if (!v2) {
      return 1;
    }
  }
  uint64_t v6 = (void *)(v2 + 8);
  uint64_t v7 = *(void *)(v2 + 8);
  int v8 = **(unsigned __int16 **)(v7 + 16);
  if ((v8 - 47) < 0xFFFFFFFE) {
    return 0;
  }
LABEL_7:
  unsigned int v9 = *(_DWORD *)(*(void *)(v7 + 32) + 36);
  if (v9 != a1)
  {
    uint64_t v15 = &v16;
    uint64_t v16 = 0;
    int v10 = sub_1CBA0DCF4((uint64_t)v14, a2, v9);
    if (v8 != 45 || (v10 ? (BOOL v11 = v16 < 5) : (BOOL v11 = 0), !v11))
    {
      unsigned int v12 = *(_DWORD *)(*(void *)(v7 + 32) + 68);
      uint64_t v15 = &v16;
      uint64_t v16 = 0;
      if (!sub_1CBA0DCF4((uint64_t)v14, a2, v12) || v16 >= 5)
      {
        while (1)
        {
          uint64_t v2 = *(void *)(v2 + 24);
          if (!v2) {
            return 1;
          }
          if ((*(unsigned char *)(v2 + 3) & 1) == 0)
          {
            uint64_t v7 = *(void *)(v2 + 8);
            if (v7 != *v6)
            {
              uint64_t result = 0;
              uint64_t v6 = (void *)(v2 + 8);
              int v8 = **(unsigned __int16 **)(v7 + 16);
              if ((v8 - 47) > 0xFFFFFFFD) {
                goto LABEL_7;
              }
              return result;
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CBA0A634(int a1, uint64_t a2, uint64_t a3)
{
  v3 = (uint64_t *)(a3 + 8 * a1);
  if (a1 < 0) {
    v3 = (uint64_t *)(a2 + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  uint64_t v4 = *v3;
  if (!v4) {
    return 0;
  }
  while ((*(unsigned char *)(v4 + 3) & 1) != 0)
  {
    uint64_t v4 = *(void *)(v4 + 24);
    if (!v4) {
      return 0;
    }
  }
  uint64_t v6 = *(void *)(v4 + 8);
LABEL_8:
  int v7 = **(unsigned __int16 **)(v6 + 16);
  if (v7 != 47 && v7 != 313)
  {
    while (1)
    {
      uint64_t v4 = *(void *)(v4 + 24);
      if (!v4) {
        return 0;
      }
      if ((*(unsigned char *)(v4 + 3) & 1) == 0 && *(void *)(v4 + 8) != v6)
      {
        uint64_t v6 = *(void *)(v4 + 8);
        goto LABEL_8;
      }
    }
  }
  return 1;
}

uint64_t sub_1CBA0A6B4(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (!v3) {
    return 1;
  }
  while ((*(unsigned char *)(v3 + 3) & 1) != 0)
  {
    uint64_t v3 = *(void *)(v3 + 24);
    if (!v3) {
      return 1;
    }
  }
  uint64_t v5 = *(void *)(v3 + 8);
LABEL_6:
  int v6 = **(unsigned __int16 **)(v5 + 16);
  if ((v6 & 0xFFFE) == 0x32)
  {
    uint64_t v7 = *(void *)(v5 + 32);
    if ((v6 != 51 || *(_DWORD *)(v7 + 132) != a1 && *(_DWORD *)(v7 + 164) != a1)
      && (*(_DWORD *)(v7 + 32 * (v6 != 50) + 16) - 34) >= 4)
    {
      goto LABEL_21;
    }
    return 0;
  }
  if ((v6 - 46) < 2 || v6 == 313) {
    goto LABEL_21;
  }
  if (v6 == 45)
  {
    uint64_t v8 = *(unsigned int *)(*(void *)(v5 + 32) + 36);
    if ((int)v8 < 0) {
      unsigned int v9 = (uint64_t *)(a2 + 16 * (v8 & 0x7FFFFFFF) + 8);
    }
    else {
      unsigned int v9 = (uint64_t *)(a3 + 8 * v8);
    }
    uint64_t v10 = *v9;
    if ((*(unsigned char *)(v10 + 3) & 1) == 0) {
      uint64_t v10 = *(void *)(v10 + 24);
    }
    if (**(_WORD **)(*(void *)(v10 + 8) + 16) != 269)
    {
LABEL_21:
      while (1)
      {
        uint64_t v3 = *(void *)(v3 + 24);
        if (!v3) {
          return 1;
        }
        if ((*(unsigned char *)(v3 + 3) & 1) == 0 && *(void *)(v3 + 8) != v5)
        {
          uint64_t v5 = *(void *)(v3 + 8);
          goto LABEL_6;
        }
      }
    }
  }
  return 0;
}

void sub_1CBA0A7C8(void *a1, llvm::MachineInstr *this, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(unsigned int *)(*((void *)this + 4) + 4);
  uint64_t v7 = v6 & 0x7FFFFFFF;
  uint64_t v8 = a1[3];
  uint64_t v9 = *(void *)(v8 + 16 * v7);
  if ((v9 & 4) != 0) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *(void *)(v8 + 16 * (a3 & 0x7FFFFFFF));
  if ((v11 & 4) != 0) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFF8;
  }
  if ((v10 != v12 || v12 == 0 || v10 == 0) && v10 != 0)
  {
    uint64_t v24 = *((void *)this + 3);
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    uint64_t v25 = *(void *)(v24 + 32);
    uint64_t v26 = *(void *)(v25 + 40);
    v61 = &unk_1F261CD58;
    *(void *)&long long v62 = v25;
    *(void *)&long long v63 = v26;
    *((void *)&v62 + 1) = (*(uint64_t (**)(void))(**(void **)(v25 + 16) + 104))(*(void *)(v25 + 16));
    v59 = 0;
    if (!*((void *)&v63 + 1))
    {
LABEL_29:
      *((void *)&v63 + 1) = 0;
      goto LABEL_30;
    }
    int v49 = **((unsigned char **)&v63 + 1);
    if ((v49 - 4) > 0x1E)
    {
      if ((v49 - 3) >= 0xFFFFFFFE) {
        uint64_t v55 = *((void *)&v63 + 1);
      }
      else {
        uint64_t v55 = 0;
      }
      if ((v49 - 3) <= 0xFFFFFFFD)
      {
        if (v49 == 3) {
          *(void *)(*((void *)&v63 + 1) + 8) = 0;
        }
        goto LABEL_29;
      }
      unint64_t v51 = v55 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*((void *)&v63 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v63 + 1) + 12)) {
        goto LABEL_29;
      }
      uint64_t v50 = *(void *)(*((void *)&v63 + 1) + 16);
      if ((v50 & 4) == 0) {
        goto LABEL_29;
      }
      unint64_t v51 = v50 & 0xFFFFFFFFFFFFFFF8;
      if (!v51) {
        goto LABEL_29;
      }
    }
    v57[0] = (char *)&v63 + 8;
    sub_1CC5FA668(v51 + 16, v57);
    *((void *)&v63 + 1) = v59;
    if (v59) {
      llvm::MetadataTracking::retrack((uint64_t)&v59, v59, (uint64_t)&v63 + 8);
    }
LABEL_30:
    *((void *)&v64 + 1) = this;
    *(void *)&long long v65 = 0;
    *(void *)&long long v64 = *((void *)this + 3);
    if ((char *)this + 56 == (char *)&v63 + 8) {
      goto LABEL_34;
    }
    if (!*((void *)&v63 + 1))
    {
LABEL_32:
      uint64_t v27 = (unsigned __int8 *)*((void *)this + 7);
      *((void *)&v63 + 1) = v27;
      if (v27) {
        llvm::MetadataTracking::track((uint64_t)&v63 + 8, v27, 2);
      }
LABEL_34:
      LODWORD(v59) = v6;
      int v60 = 1;
      LODWORD(v57[0]) = a3;
      int v58 = 0;
      (*((void (**)(void **, uint64_t, unsigned __int8 **, uint64_t, void *, uint64_t, void))v61 + 4))(&v61, 19, &v59, 1, v57, 1, 0);
      llvm::MachineInstr::eraseFromParent(this);
      v61 = &unk_1F261CD58;
      if (*((void *)&v63 + 1))
      {
        int v28 = **((unsigned char **)&v63 + 1);
        if ((v28 - 4) > 0x1E)
        {
          if ((v28 - 3) >= 0xFFFFFFFE) {
            uint64_t v46 = *((void *)&v63 + 1);
          }
          else {
            uint64_t v46 = 0;
          }
          if ((v28 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v30 = v46 + 8;
LABEL_73:
            v57[0] = (char *)&v63 + 8;
            sub_1CC5FA668(v30 + 16, v57);
            return;
          }
          if (v28 == 3) {
            *(void *)(*((void *)&v63 + 1) + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(*((void *)&v63 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v63 + 1) + 12))
        {
          uint64_t v29 = *(void *)(*((void *)&v63 + 1) + 16);
          if ((v29 & 4) != 0)
          {
            unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFF8;
            if (v30) {
              goto LABEL_73;
            }
          }
        }
      }
      return;
    }
    int v52 = **((unsigned char **)&v63 + 1);
    if ((v52 - 4) > 0x1E)
    {
      if ((v52 - 3) >= 0xFFFFFFFE) {
        uint64_t v56 = *((void *)&v63 + 1);
      }
      else {
        uint64_t v56 = 0;
      }
      if ((v52 - 3) < 0xFFFFFFFE)
      {
        if (v52 == 3) {
          *(void *)(*((void *)&v63 + 1) + 8) = 0;
        }
        goto LABEL_32;
      }
      unint64_t v54 = v56 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*((void *)&v63 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v63 + 1) + 12)) {
        goto LABEL_32;
      }
      uint64_t v53 = *(void *)(*((void *)&v63 + 1) + 16);
      if ((v53 & 4) == 0) {
        goto LABEL_32;
      }
      unint64_t v54 = v53 & 0xFFFFFFFFFFFFFFF8;
      if (!v54) {
        goto LABEL_32;
      }
    }
    v57[0] = (char *)&v63 + 8;
    sub_1CC5FA668(v54 + 16, v57);
    goto LABEL_32;
  }
  llvm::MachineInstr::eraseFromParent(this);
  if (a4)
  {
    sub_1CC6EE548(a4, (uint64_t)a1, v6);
    uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(*a1 + 16) + 176))(*(void *)(*a1 + 16));
    if ((v6 & 0x80000000) != 0) {
      int v20 = (uint64_t *)(a1[3] + 16 * v7 + 8);
    }
    else {
      int v20 = (uint64_t *)(a1[34] + 8 * v6);
    }
    uint64_t v21 = *v20;
    if (*v20)
    {
      unsigned int v22 = a3 - 1;
      do
      {
        uint64_t v23 = *(void *)(v21 + 24);
        if (v22 <= 0x3FFFFFFE) {
          llvm::MachineOperand::substPhysReg((unsigned int *)v21, a3, v19);
        }
        else {
          llvm::MachineOperand::setReg(v21, a3);
        }
        uint64_t v21 = v23;
      }
      while (v23);
    }
    unsigned int v31 = *(char **)(a4 + 8);
    unint64_t v32 = *(char **)(a4 + 16);
    uint64_t v33 = 24;
    if (v32 == v31) {
      uint64_t v33 = 28;
    }
    uint64_t v34 = *(unsigned int *)(a4 + v33);
    uint64_t v35 = *(unint64_t **)(a4 + 16);
    if (v34)
    {
      uint64_t v36 = 0;
      while (*(void *)&v32[v36] >= 0xFFFFFFFFFFFFFFFELL)
      {
        v36 += 8;
        if (8 * v34 == v36) {
          goto LABEL_65;
        }
      }
      uint64_t v35 = (unint64_t *)&v32[v36];
    }
    int v37 = (unint64_t *)&v32[8 * v34];
    if (v35 != v37)
    {
      unint64_t v38 = *v35;
LABEL_51:
      (*(void (**)(uint64_t, unint64_t))(*(void *)a4 + 40))(a4, v38);
      uint64_t v39 = v35 + 1;
      while (v39 != v37)
      {
        unint64_t v40 = *v39++;
        unint64_t v38 = v40;
        if (v40 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v35 = v39 - 1;
          goto LABEL_51;
        }
      }
      unsigned int v31 = *(char **)(a4 + 8);
      unint64_t v32 = *(char **)(a4 + 16);
    }
LABEL_65:
    if (v32 != v31)
    {
      uint64_t v47 = *(unsigned int *)(a4 + 24);
      if (v47 >= 0x21 && 4 * (*(_DWORD *)(a4 + 28) - *(_DWORD *)(a4 + 32)) < v47)
      {
        llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(a4 + 8));
        return;
      }
      memset(v32, 255, 8 * v47);
    }
    *(_DWORD *)(a4 + 28) = 0;
    *(_DWORD *)(a4 + 32) = 0;
    return;
  }
  uint64_t v41 = (*(uint64_t (**)(void))(**(void **)(*a1 + 16) + 176))(*(void *)(*a1 + 16));
  if ((v6 & 0x80000000) != 0) {
    uint64_t v42 = (uint64_t *)(a1[3] + 16 * v7 + 8);
  }
  else {
    uint64_t v42 = (uint64_t *)(a1[34] + 8 * v6);
  }
  uint64_t v43 = *v42;
  if (*v42)
  {
    unsigned int v44 = a3 - 1;
    do
    {
      uint64_t v45 = *(void *)(v43 + 24);
      if (v44 <= 0x3FFFFFFE) {
        llvm::MachineOperand::substPhysReg((unsigned int *)v43, a3, v41);
      }
      else {
        llvm::MachineOperand::setReg(v43, a3);
      }
      uint64_t v43 = v45;
    }
    while (v45);
  }
}

uint64_t sub_1CBA0AD48(void *a1, uint64_t a2, unsigned int a3)
{
  v41[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(a2 + 32) + 32 * a3;
  uint64_t v7 = *(void *)(*a1 + 272);
  uint64_t v9 = (_DWORD *)(v6 + 4);
  uint64_t v8 = *(unsigned int *)(v6 + 4);
  if ((*(_DWORD *)(v6 + 4) & 0x80000000) != 0) {
    unint64_t v10 = (uint64_t *)(*(void *)(v7 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v10 = (uint64_t *)(*(void *)(v7 + 272) + 8 * v8);
  }
  uint64_t v11 = *v10;
  if (!v11) {
    return 0;
  }
  if ((*(unsigned char *)(v11 + 3) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v11 + 24);
    if (!v11 || (*(unsigned char *)(v11 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v12 = *(void *)(v11 + 8);
  if (!v12 || **(_WORD **)(v12 + 16) != 120) {
    return 0;
  }
  uint64_t v13 = *(void *)(*(void *)(v12 + 32) + 48);
  if ((v8 & 0x80000000) != 0
    && (unsigned int v14 = v8 & 0x7FFFFFFF, v14 < *(_DWORD *)(v7 + 432))
    && (*(void *)(*(void *)(v7 + 424) + 8 * v14) & 0x8000000000000000) != 0)
  {
    uint64_t v16 = **(llvm::ConstantFP ***)v13;
    llvm::detail::IEEEFloat::initFromBFloatAPInt((llvm::detail::IEEEFloat *)&v40, (const llvm::APInt **)(v13 + 24));
  }
  else
  {
    int v15 = *(_DWORD *)(v13 + 32);
    if (v15 == 32)
    {
      uint64_t v16 = **(llvm::ConstantFP ***)v13;
      llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v40, (const llvm::APInt **)(v13 + 24));
    }
    else
    {
      uint64_t v16 = **(llvm::ConstantFP ***)v13;
      if (v15 == 16) {
        llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)&v40, (const llvm::APInt **)(v13 + 24));
      }
      else {
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v40, (const llvm::APInt **)(v13 + 24));
      }
    }
  }
  llvm::ConstantFP::get(v16, (llvm::LLVMContext *)v39, v17);
  if ((_UNKNOWN *)v40 == &unk_1CFB2E344)
  {
    sub_1CB845718(v41);
  }
  else if ((*(_DWORD *)(v40 + 8) - 64) <= 0xFFFFFF7F && v41[0])
  {
    MEMORY[0x1D25D9CB0](v41[0], 0x1000C8000313F17);
  }
  uint64_t v18 = a1[1];
  *(void *)(v18 + 40) = *(void *)(v12 + 24);
  *(void *)(v18 + 48) = v12;
  uint64_t v19 = a1[1];
  if ((*v9 & 0x80000000) != 0
    && (uint64_t v20 = *(void *)(v5 + 272), v21 = *v9 & 0x7FFFFFFF, v21 < *(_DWORD *)(v20 + 432)))
  {
    uint64_t v22 = *(void *)(*(void *)(v20 + 424) + 8 * v21);
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)uint64_t v39 = v22;
  LODWORD(v40) = 0;
  (*(void (**)(uint64_t, BOOL *))(*(void *)v19 + 24))(v19, v39);
  uint64_t v24 = v23;
  (*(void (**)(void, uint64_t))(**(void **)(v5 + 288) + 32))(*(void *)(v5 + 288), a2);
  llvm::MachineOperand::setReg(v6, *(_DWORD *)(*(void *)(v24 + 32) + 4));
  (*(void (**)(void, uint64_t))(**(void **)(v5 + 288) + 40))(*(void *)(v5 + 288), a2);
  unsigned int v25 = **(unsigned __int16 **)(v12 + 16);
  BOOL v26 = v25 > 0x20;
  uint64_t v27 = (1 << v25) & 0x100600000;
  if (v26 || v27 == 0)
  {
    uint64_t v29 = *(void *)(v5 + 272);
    v39[0] = 0;
    if (llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v12, 0, v39)
      || ((int v36 = **(unsigned __int16 **)(v12 + 16), v36 != 69) ? (v37 = v36 == 0) : (v37 = 1), v37))
    {
      uint64_t v30 = *(unsigned int *)(v12 + 40);
      if (v30)
      {
        unsigned int v31 = *(_DWORD **)(v12 + 32);
        unint64_t v32 = &v31[8 * v30];
        while (1)
        {
          if ((*v31 & 0x10000FF) == 0x1000000)
          {
            uint64_t v33 = v31[1];
            if ((v33 - 1) < 0x3FFFFFFF) {
              return 1;
            }
            uint64_t v34 = (uint64_t *)((int)v33 < 0
                            ? *(void *)(v29 + 24) + 16 * (v33 & 0x7FFFFFFF) + 8
                            : *(void *)(v29 + 272) + 8 * v33);
            uint64_t v35 = *v34;
            if (v35) {
              break;
            }
          }
LABEL_37:
          v31 += 8;
          if (v31 == v32) {
            goto LABEL_38;
          }
        }
        while ((*(_DWORD *)v35 & 0x81000000) != 0)
        {
          uint64_t v35 = *(void *)(v35 + 24);
          if (!v35) {
            goto LABEL_37;
          }
        }
      }
      else
      {
LABEL_38:
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v12);
      }
    }
  }
  return 1;
}

uint64_t sub_1CBA0B104(unsigned int a1, char a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  LODWORD(v9) = a1;
  if ((a1 & 0x80000000) != 0) {
    unint64_t v10 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v10 = (uint64_t *)(*(void *)(a4 + 272) + 8 * a1);
  }
  uint64_t v11 = *v10;
  if (!v11) {
    goto LABEL_100;
  }
  if ((*(unsigned char *)(v11 + 3) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v11 + 24);
    if (!v11)
    {
LABEL_100:
      LOBYTE(v46) = 0;
      unsigned int v47 = 0;
      return v11 | v47 | v46;
    }
    if ((*(unsigned char *)(v11 + 3) & 1) == 0) {
      goto LABEL_99;
    }
  }
  uint64_t v12 = *(void *)(v11 + 8);
  if (!v12)
  {
LABEL_99:
    uint64_t v11 = 0;
    goto LABEL_100;
  }
  uint64_t v13 = (uint64_t *)(*(uint64_t (**)(void, void))(**(void **)(a3[1] + 8) + 16))(*(void *)(a3[1] + 8), *(void *)a3[1]);
  unsigned int v14 = *(unsigned __int16 **)(v12 + 16);
  unsigned int v15 = *((unsigned __int8 *)v14 + 4);
  if ((v14[4] & 2) == 0 || (int v33 = *(_DWORD *)(v12 + 40), v33 == v15))
  {
    int v16 = *((unsigned __int8 *)v14 + 4);
  }
  else
  {
    int v34 = v33 - 1;
    int v16 = *((unsigned __int8 *)v14 + 4);
    do
    {
      int v35 = *(_DWORD *)(*(void *)(v12 + 32) + 32 * v15);
      if ((v35 & 0x10000FF) != 0x1000000) {
        break;
      }
      v16 += (v35 & 0x2000000) == 0;
      if (v34 == v15) {
        break;
      }
      ++v15;
    }
    while ((v35 & 0x2000000) == 0);
  }
  uint64_t v17 = *((void *)v14 + 4);
  if (v17)
  {
    unsigned int v18 = -1;
    do
      ++v18;
    while (*(_WORD *)(v17 + 2 * v18));
  }
  else
  {
    unsigned int v18 = 0;
  }
  if (v18 + v16 != 1)
  {
LABEL_61:
    uint64_t v67 = 257;
    int v68 = 0;
    int v72 = v9;
    LODWORD(v74) = 0;
    (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, int *, uint64_t, void))(*a3 + 32))(a3, 178, &v67, 1, &v72, 1, 0);
    goto LABEL_62;
  }
  uint64_t v19 = *(void *)(v12 + 32);
  int v20 = *v14;
  int v21 = v20;
  uint64_t v22 = v12;
  if (v20 == 177)
  {
    uint64_t v23 = *(unsigned int *)(v19 + 36);
    if ((v23 & 0x80000000) != 0) {
      uint64_t v24 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v24 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v23);
    }
    uint64_t v25 = *v24;
    if (!v25) {
      goto LABEL_56;
    }
    if ((*(unsigned char *)(v25 + 3) & 1) == 0)
    {
      uint64_t v25 = *(void *)(v25 + 24);
      if (!v25 || (*(unsigned char *)(v25 + 3) & 1) == 0) {
        goto LABEL_56;
      }
    }
    uint64_t v22 = *(void *)(v25 + 8);
    if (!v22) {
      goto LABEL_56;
    }
    int v21 = **(unsigned __int16 **)(v22 + 16);
  }
  if (v21 == 184)
  {
    uint64_t v26 = *(unsigned int *)(*(void *)(v22 + 32) + 36);
    if ((v26 & 0x80000000) != 0) {
      uint64_t v27 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v27 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v26);
    }
    uint64_t v28 = *v27;
    if (!v28) {
      goto LABEL_56;
    }
    if ((*(unsigned char *)(v28 + 3) & 1) == 0)
    {
      uint64_t v28 = *(void *)(v28 + 24);
      if (!v28 || (*(unsigned char *)(v28 + 3) & 1) == 0) {
        goto LABEL_56;
      }
    }
    uint64_t v22 = *(void *)(v28 + 8);
    if (!v22) {
      goto LABEL_56;
    }
    int v29 = **(unsigned __int16 **)(v22 + 16);
  }
  else
  {
    int v29 = v21;
  }
  if (v29 != 179) {
    goto LABEL_56;
  }
  uint64_t v30 = *(void *)(v22 + 32);
  if ((a2 & 1) == 0)
  {
    uint64_t v36 = *(unsigned int *)(v30 + 36);
    BOOL v37 = (uint64_t *)((v36 & 0x80000000) != 0
                    ? *(void *)(a4 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8
                    : *(void *)(a4 + 272) + 8 * v36);
    uint64_t v38 = *v37;
    if (v38)
    {
      while ((*(unsigned char *)(v38 + 3) & 1) != 0)
      {
        uint64_t v38 = *(void *)(v38 + 24);
        if (!v38) {
          goto LABEL_31;
        }
      }
      while (1)
      {
        uint64_t v38 = *(void *)(v38 + 24);
        if (!v38) {
          break;
        }
        if ((*(unsigned char *)(v38 + 3) & 1) == 0) {
          goto LABEL_31;
        }
      }
      uint64_t v39 = (uint64_t *)((v36 & 0x80000000) != 0
                      ? *(void *)(a4 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8
                      : *(void *)(a4 + 272) + 8 * v36);
      if ((uint64_t v40 = *v39) == 0
        || (*(unsigned char *)(v40 + 3) & 1) == 0 && ((uint64_t v40 = *(void *)(v40 + 24)) == 0 || (*(unsigned char *)(v40 + 3) & 1) == 0)
        || (uint64_t v41 = *(void *)(v40 + 8)) == 0
        || **(_WORD **)(v41 + 16) != 318
        || (!*((unsigned char *)v13 + 319) || *((unsigned char *)v13 + 338)) && !*((unsigned char *)v13 + 326))
      {
LABEL_56:
        uint64_t v9 = *(unsigned int *)(v19 + 4);
        if ((v9 & 0x80000000) != 0) {
          uint64_t v42 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v42 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v9);
        }
        uint64_t v43 = *v42;
        if ((*(unsigned char *)(v43 + 3) & 1) == 0) {
          uint64_t v43 = *(void *)(v43 + 24);
        }
        uint64_t v44 = *(void *)(v43 + 8);
        if (**(_WORD **)(v44 + 16) == 121)
        {
          uint64_t v48 = *(void *)(*(void *)(v44 + 32) + 48);
          if (v48)
          {
            uint64_t v49 = *(void *)(v48 + 32);
            if ((_UNKNOWN *)v49 == &unk_1CFB2E344)
            {
              llvm::detail::DoubleAPFloat::DoubleAPFloat(&v73, (const llvm::detail::DoubleAPFloat *)(v48 + 32));
              if (!a5) {
                goto LABEL_91;
              }
            }
            else
            {
              uint64_t v73 = *(void *)(v48 + 32);
              if ((*(_DWORD *)(v49 + 8) + 64) >= 0x80) {
                operator new[]();
              }
              char v50 = *(unsigned char *)(v48 + 52);
              int v51 = v50 & 7;
              char v76 = v50 & 0xF;
              int v75 = *(_DWORD *)(v48 + 48);
              BOOL v53 = (v50 & 6) != 0 && v51 != 3;
              if (v51 == 1 || v53)
              {
                uint64_t v55 = *(unsigned int *)(v49 + 8);
                if ((v55 - 64) <= 0xFFFFFF7F) {
                  uint64_t v56 = v13;
                }
                else {
                  uint64_t v56 = &v74;
                }
                v59 = *(uint64_t **)(v48 + 40);
                int v58 = (uint64_t *)(v48 + 40);
                v57 = v59;
                if ((*(_DWORD *)(*(v58 - 1) + 8) - 64) >= 0xFFFFFF80) {
                  v57 = v58;
                }
                if (v55 <= 0xFFFFFFBF)
                {
                  unint64_t v60 = (unint64_t)(v55 + 64) >> 6;
                  do
                  {
                    uint64_t v61 = *v57++;
                    *v56++ = v61;
                    --v60;
                  }
                  while (v60);
                }
              }
              if (!a5) {
                goto LABEL_91;
              }
            }
            if ((sub_1CB9867B8((uint64_t)&v72) & 1) == 0)
            {
              uint64_t v70 = 257;
              int v71 = 0;
              LODWORD(v67) = *(_DWORD *)(v19 + 4);
              int v69 = 0;
              (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a3 + 32))(a3, 178, &v70, 1, &v67, 1, 0);
LABEL_93:
              int v46 = *(_DWORD *)(*(void *)(v65 + 32) + 4);
              unsigned int v47 = v46 & 0xFFFFFF00;
              if ((_UNKNOWN *)v73 == &unk_1CFB2E344)
              {
                sub_1CB845718(&v74);
              }
              else if ((*(_DWORD *)(v73 + 8) - 64) <= 0xFFFFFF7F && v74)
              {
                MEMORY[0x1D25D9CB0](v74, 0x1000C8000313F17);
              }
              goto LABEL_64;
            }
LABEL_91:
            long long v62 = ***(llvm::ConstantFP ****)a3[1];
            llvm::APFloat::convert((uint64_t)&v72, &unk_1CFB2E308, 1, &v70);
            long long v64 = llvm::ConstantFP::get(v62, (llvm::LLVMContext *)&v72, v63);
            uint64_t v67 = 257;
            int v68 = 0;
            (*(void (**)(void *, uint64_t *, const llvm::detail::DoubleAPFloat *))(*a3 + 24))(a3, &v67, v64);
            goto LABEL_93;
          }
        }
        goto LABEL_61;
      }
    }
  }
LABEL_31:
  if (v21 == 184)
  {
    uint64_t v67 = 257;
    int v68 = 0;
    int v72 = *(_DWORD *)(v30 + 36);
    LODWORD(v74) = 0;
    (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, int *, uint64_t, void))(*a3 + 32))(a3, 184, &v67, 1, &v72, 1, 0);
    uint64_t v32 = *(void *)(v31 + 32);
  }
  else
  {
    uint64_t v32 = v30 + 32;
  }
  if (v20 != 177) {
    goto LABEL_63;
  }
  uint64_t v67 = 257;
  int v68 = 0;
  int v72 = *(_DWORD *)(v32 + 4);
  LODWORD(v74) = 0;
  (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, int *, uint64_t, uint64_t))(*a3 + 32))(a3, 177, &v67, 1, &v72, 1, *(unsigned __int16 *)(v12 + 44) | 0x100000000);
LABEL_62:
  uint64_t v32 = *(void *)(v45 + 32);
LABEL_63:
  int v46 = *(_DWORD *)(v32 + 4);
  unsigned int v47 = v46 & 0xFFFFFF00;
LABEL_64:
  uint64_t v11 = 0x100000000;
  return v11 | v47 | v46;
}

uint64_t sub_1CBA0B7F4(uint64_t a1, _DWORD *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    v12[0] = *a2;
    v12[4] = 0;
    uint64_t v11 = a1;
    unint64_t v8 = sub_1CBA0E760(a1, (unint64_t)v12, 1);
    a1 = v11;
    uint64_t v9 = *(void *)v11 + 24 * *(unsigned int *)(v11 + 8);
    long long v10 = *(_OWORD *)v8;
    *(void *)(v9 + 16) = *(void *)(v8 + 16);
    *(_OWORD *)uint64_t v9 = v10;
    int v5 = *(_DWORD *)(v11 + 8);
    uint64_t v3 = *(void *)v11;
  }
  else
  {
    uint64_t v3 = *(void *)a1;
    uint64_t v4 = (_DWORD *)(*(void *)a1 + 24 * v2);
    *uint64_t v4 = *a2;
    v4[4] = 0;
    int v5 = *(_DWORD *)(a1 + 8);
  }
  unsigned int v6 = v5 + 1;
  *(_DWORD *)(a1 + 8) = v6;
  return v3 + 24 * v6 - 24;
}

uint64_t sub_1CBA0B89C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 32) + 4);
  if ((v5 & 0x80000000) != 0) {
    unsigned int v6 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v6 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v5);
  }
  uint64_t v7 = *v6;
  if (!*v6) {
    return 1;
  }
  while ((*(unsigned char *)(v7 + 3) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v7 + 24);
    if (!v7) {
      return 1;
    }
  }
  uint64_t v9 = *(void *)(v7 + 8);
LABEL_8:
  uint64_t result = 0;
  unsigned int v10 = **(unsigned __int16 **)(v9 + 16);
  if (v10 <= 0x104)
  {
    char v11 = v10 + 93;
    if (v10 - 163 <= 0x38)
    {
      if (((1 << v11) & 0x18800000018140DLL) != 0) {
        goto LABEL_18;
      }
      if (((1 << v11) & 0x204000) != 0)
      {
        if ((sub_1CBA0B89C(v9, a2, a3) & 1) == 0) {
          return 0;
        }
LABEL_51:
        uint64_t v28 = *(void *)(v7 + 8);
        while (1)
        {
          uint64_t v7 = *(void *)(v7 + 24);
          if (!v7) {
            return 1;
          }
          if ((*(unsigned char *)(v7 + 3) & 1) == 0)
          {
            uint64_t v9 = *(void *)(v7 + 8);
            if (v9 != v28) {
              goto LABEL_8;
            }
          }
        }
      }
    }
    if (v10 != 85) {
      return result;
    }
LABEL_18:
    uint64_t v13 = *(void *)(a2 + 8);
    uint64_t v14 = *(unsigned int *)(a2 + 20);
    if (v13 == *(void *)a2)
    {
      if (v14)
      {
        unsigned int v15 = 0;
        uint64_t v16 = 8 * v14;
        uint64_t v17 = *(void **)(a2 + 8);
        while (*v17 != v9)
        {
          if (*v17 == -2) {
            unsigned int v15 = v17;
          }
          ++v17;
          v16 -= 8;
          if (!v16)
          {
            if (!v15) {
              goto LABEL_26;
            }
            *unsigned int v15 = v9;
            --*(_DWORD *)(a2 + 24);
            break;
          }
        }
LABEL_50:
        if ((*(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24)) > 2) {
          return 0;
        }
        goto LABEL_51;
      }
LABEL_26:
      unsigned int v18 = *(_DWORD *)(a2 + 16);
      if (v14 < v18)
      {
        *(_DWORD *)(a2 + 20) = v14 + 1;
        *(void *)(v13 + 8 * v14) = v9;
        goto LABEL_50;
      }
    }
    else
    {
      unsigned int v18 = *(_DWORD *)(a2 + 16);
    }
    if (3 * v18 <= 4 * ((int)v14 - *(_DWORD *)(a2 + 24)))
    {
      if (v18 >= 0x40) {
        v18 *= 2;
      }
      else {
        unsigned int v18 = 128;
      }
    }
    else if (v18 - v14 >= v18 >> 3)
    {
      goto LABEL_31;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a2, v18);
    unsigned int v18 = *(_DWORD *)(a2 + 16);
    uint64_t v13 = *(void *)(a2 + 8);
LABEL_31:
    unsigned int v19 = v18 - 1;
    unsigned int v20 = (v18 - 1) & ((v9 >> 4) ^ (v9 >> 9));
    int v21 = (void *)(v13 + 8 * v20);
    uint64_t v22 = *v21;
    if (*v21 == -1)
    {
      uint64_t v23 = 0;
LABEL_43:
      if (v23) {
        uint64_t v27 = v23;
      }
      else {
        uint64_t v27 = v21;
      }
      if (*v27 != v9)
      {
        if (*v27 == -2) {
          --*(_DWORD *)(a2 + 24);
        }
        else {
          ++*(_DWORD *)(a2 + 20);
        }
        *uint64_t v27 = v9;
      }
    }
    else
    {
      uint64_t v23 = 0;
      int v24 = 1;
      while (v22 != v9)
      {
        if (v23) {
          BOOL v25 = 0;
        }
        else {
          BOOL v25 = v22 == -2;
        }
        if (v25) {
          uint64_t v23 = v21;
        }
        unsigned int v26 = v20 + v24++;
        unsigned int v20 = v26 & v19;
        int v21 = (void *)(v13 + 8 * (v26 & v19));
        uint64_t v22 = *v21;
        if (*v21 == -1) {
          goto LABEL_43;
        }
      }
    }
    goto LABEL_50;
  }
  BOOL v12 = v10 - 314 > 0x2A || ((1 << (v10 - 58)) & 0x40000200003) == 0;
  if (!v12 || v10 == 261) {
    goto LABEL_18;
  }
  return result;
}

BOOL sub_1CBA0BB64(uint64_t a1, int a2)
{
  unsigned int v2 = *(unsigned __int16 **)(a1 + 16);
  if (*v2 - 1 <= 1 && (*(unsigned char *)(*(void *)(a1 + 32) + 48) & 8) != 0) {
    return 1;
  }
  if (a2)
  {
    if ((*(_WORD *)(a1 + 44) & 0xC) != 0 && (*(_WORD *)(a1 + 44) & 4) == 0) {
      return llvm::MachineInstr::hasPropertyInBundle(a1, 0x80000, a2);
    }
  }
  return (*((unsigned __int8 *)v2 + 10) >> 3) & 1;
}

BOOL sub_1CBA0BBC0(uint64_t a1, int a2)
{
  unsigned int v2 = *(unsigned __int16 **)(a1 + 16);
  if (*v2 - 1 <= 1 && (*(unsigned char *)(*(void *)(a1 + 32) + 48) & 0x20) != 0) {
    return 1;
  }
  if (a2)
  {
    if ((*(_WORD *)(a1 + 44) & 0xC) != 0 && (*(_WORD *)(a1 + 44) & 4) == 0) {
      return llvm::MachineInstr::hasPropertyInBundle(a1, 0x1000000000, a2);
    }
  }
  return (*((unsigned __int8 *)v2 + 12) >> 4) & 1;
}

uint64_t sub_1CBA0BC1C(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_1CBA062A8(a1, a3, a2, a4);
}

uint64_t sub_1CBA0BC2C(uint64_t a1, uint64_t a2)
{
  if ((**(unsigned char **)(a2 + 360) & 0x10) == 0)
  {
    *(void *)(a1 + 272) = *(void *)(a2 + 40);
    if (!byte_1EBCBEC98) {
      operator new();
    }
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    if (v4 == v5)
    {
LABEL_7:
      uint64_t v6 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v4 != &unk_1EA61EFE3)
      {
        v4 += 16;
        if (v4 == v5) {
          goto LABEL_7;
        }
      }
      uint64_t v6 = *(void *)(v4 + 8);
    }
    (*(void (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &unk_1EA61EFE3);
    operator new();
  }
  return 0;
}

const char *sub_1CBA0DBD8()
{
  return "AGX2ISelPrepare";
}

double sub_1CBA0DBE8@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 33;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

BOOL sub_1CBA0DC10(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  if ((v3 & 0x80000000) != 0) {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v3);
  }
  uint64_t v5 = *v4;
  if (v5)
  {
    if (*(unsigned char *)(v5 + 3) & 1) != 0 || (uint64_t v5 = *(void *)(v5 + 24)) != 0 && (*(unsigned char *)(v5 + 3))
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6)
      {
        if (**(_WORD **)(v6 + 16) == 126 && *(_DWORD *)(v6 + 40) == 2) {
          return 1;
        }
      }
    }
  }
  if ((v3 & 0x80000000) != 0) {
    uint64_t v7 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v7 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v3);
  }
  uint64_t v8 = *v7;
  return v8
      && ((*(unsigned char *)(v8 + 3) & 1) != 0 || (uint64_t v8 = *(void *)(v8 + 24)) != 0 && (*(unsigned char *)(v8 + 3) & 1) != 0)
      && (uint64_t v9 = *(void *)(v8 + 8)) != 0
      && **(_WORD **)(v9 + 16) == 124
      && *(_DWORD *)(v9 + 40) == 2;
}

uint64_t sub_1CBA0DCF4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0) {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a3);
  }
  uint64_t v5 = *v4;
  if (v5)
  {
    if (*(unsigned char *)(v5 + 3) & 1) != 0 || (uint64_t v5 = *(void *)(v5 + 24)) != 0 && (*(unsigned char *)(v5 + 3))
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6)
      {
        if (**(_WORD **)(v6 + 16) == 127 && *(_DWORD *)(v6 + 40) == 3)
        {
          sub_1CC73C210(*(_DWORD *)(*(void *)(v6 + 32) + 68), a2, (uint64_t)&v8);
          if (v10)
          {
            if (v9 < 0x41)
            {
              **(void **)(a1 + 8) = v8 << -(char)v9 >> -(char)v9;
              return 1;
            }
            if (v8) {
              MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
            }
          }
        }
      }
    }
  }
  return 0;
}

BOOL sub_1CBA0DDF0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = (uint64_t *)(a2 + 8 * a3);
  if (a3 < 0) {
    uint64_t v3 = (uint64_t *)(a1 + 16 * (a3 & 0x7FFFFFFF) + 8);
  }
  uint64_t v4 = *v3;
  if (!v4) {
    return 0;
  }
  if ((*(unsigned char *)(v4 + 3) & 1) == 0)
  {
    uint64_t v4 = *(void *)(v4 + 24);
    if (!v4 || (*(unsigned char *)(v4 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (!v5 || **(_WORD **)(v5 + 16) != 177 || *(_DWORD *)(v5 + 40) != 2) {
    return 0;
  }
  uint64_t v6 = *(unsigned int *)(*(void *)(v5 + 32) + 36);
  if ((int)v6 < 0) {
    uint64_t v7 = (uint64_t *)(a1 + 16 * (v6 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v7 = (uint64_t *)(a2 + 8 * v6);
  }
  uint64_t v8 = *v7;
  if (v8)
  {
    if (*(unsigned char *)(v8 + 3) & 1) != 0 || (uint64_t v8 = *(void *)(v8 + 24)) != 0 && (*(unsigned char *)(v8 + 3))
    {
      uint64_t v9 = *(void *)(v8 + 8);
      if (v9)
      {
        if ((**(_WORD **)(v9 + 16) & 0xFFFE) == 0x152) {
          return 1;
        }
      }
    }
  }
  char v11 = (uint64_t *)((int)v6 < 0 ? a1 + 16 * (v6 & 0x7FFFFFFF) + 8 : a2 + 8 * v6);
  uint64_t v12 = *v11;
  if (!v12) {
    return 0;
  }
  if ((*(unsigned char *)(v12 + 3) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v12 + 24);
    if (!v12 || (*(unsigned char *)(v12 + 3) & 1) == 0) {
      return 0;
    }
  }
  if ((uint64_t v13 = *(void *)(v12 + 8)) != 0
    && **(_WORD **)(v13 + 16) == 178
    && (uint64_t v14 = *(unsigned int *)(*(void *)(v13 + 32) + 36), v14)
    && ((int)v14 < 0 ? (unsigned int v15 = (uint64_t *)(a1 + 16 * (v14 & 0x7FFFFFFF) + 8)) : (unsigned int v15 = (uint64_t *)(a2 + 8 * v14)),
        (uint64_t v16 = *v15) != 0
     && ((*(unsigned char *)(v16 + 3) & 1) != 0 || (uint64_t v16 = *(void *)(v16 + 24)) != 0 && (*(unsigned char *)(v16 + 3) & 1) != 0)
     && (uint64_t v17 = *(void *)(v16 + 8)) != 0))
  {
    return (**(_WORD **)(v17 + 16) & 0xFFFE) == 338;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1CBA0DF64(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (**(_WORD **)(a1 + 16) != 76 || *(_DWORD *)(a1 + 40) != 3) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(unsigned int *)(v5 + 36);
  if ((int)v6 < 0) {
    uint64_t v7 = (uint64_t *)(a2 + 16 * (v6 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v7 = (uint64_t *)(a3 + 8 * v6);
  }
  uint64_t v8 = *v7;
  if (v8)
  {
    if (*(unsigned char *)(v8 + 3))
    {
LABEL_11:
      uint64_t v8 = *(void *)(v8 + 8);
      goto LABEL_12;
    }
    uint64_t v8 = *(void *)(v8 + 24);
    if (v8)
    {
      if (*(unsigned char *)(v8 + 3)) {
        goto LABEL_11;
      }
      uint64_t v8 = 0;
    }
  }
LABEL_12:
  uint64_t v9 = *(unsigned int *)(v5 + 68);
  if ((int)v9 < 0) {
    char v10 = (uint64_t *)(a2 + 16 * (v9 & 0x7FFFFFFF) + 8);
  }
  else {
    char v10 = (uint64_t *)(a3 + 8 * v9);
  }
  uint64_t v11 = *v10;
  if (v11)
  {
    if ((*(unsigned char *)(v11 + 3) & 1) == 0)
    {
      uint64_t v11 = *(void *)(v11 + 24);
      if (!v11) {
        goto LABEL_18;
      }
      if ((*(unsigned char *)(v11 + 3) & 1) == 0)
      {
        uint64_t v11 = 0;
        goto LABEL_18;
      }
    }
    uint64_t v11 = *(void *)(v11 + 8);
  }
LABEL_18:
  if (**(_WORD **)(v8 + 16) == 318 && **(_WORD **)(v11 + 16) == 318)
  {
    *a4 = *(_DWORD *)(*(void *)(v8 + 32) + 4);
    a4[1] = *(_DWORD *)(*(void *)(v11 + 32) + 4);
    return 1;
  }
  return 0;
}

_DWORD *sub_1CBA0E058(uint64_t a1, unint64_t a2, int a3)
{
  if (*(unsigned int *)(a1 + 12) < a2)
  {
    *(_DWORD *)(a1 + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v3 = *(_DWORD **)a1;
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  double result = (_DWORD *)(a1 + 8);
  unint64_t v5 = v6;
  if (v6 >= a2) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = v5;
  }
  if (v7)
  {
    uint64_t v11 = v3;
    do
    {
      *v11++ = a3;
      --v7;
    }
    while (v7);
    unint64_t v5 = *result;
  }
  unint64_t v8 = v5 - a2;
  if (v5 < a2)
  {
    uint64_t v9 = &v3[v5];
    do
      *v9++ = a3;
    while (!__CFADD__(v8++, 1));
  }
  *double result = a2;
  return result;
}

uint64_t sub_1CBA0E114(llvm::MachineInstr **a1, unsigned int a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 32;
  if (a2 == 1) {
    uint64_t v3 = 64;
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = *((void *)*a1 + 4);
  uint64_t v6 = *(unsigned int *)(v5 + v3 + 4);
  if ((v6 & 0x80000000) != 0) {
    unint64_t v7 = (uint64_t *)(*((void *)v4 + 3) + 16 * (v6 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v7 = (uint64_t *)(*((void *)v4 + 34) + 8 * v6);
  }
  uint64_t v8 = *v7;
  if ((*(unsigned char *)(v8 + 3) & 1) == 0) {
    uint64_t v8 = *(void *)(v8 + 24);
  }
  if (**(_WORD **)(*(void *)(v8 + 8) + 16) == 269) {
    return 0;
  }
  uint64_t v9 = *(unsigned int *)(v5 + 32 * a2 + 4);
  if ((v9 & 0x80000000) != 0) {
    char v10 = (uint64_t *)(*((void *)v4 + 3) + 16 * (v9 & 0x7FFFFFFF) + 8);
  }
  else {
    char v10 = (uint64_t *)(*((void *)v4 + 34) + 8 * v9);
  }
  uint64_t v11 = *v10;
  if ((*(unsigned char *)(v11 + 3) & 1) == 0) {
    uint64_t v11 = *(void *)(v11 + 24);
  }
  uint64_t v12 = *(void *)(v11 + 8);
  if (**(_WORD **)(v12 + 16) != 47) {
    return 0;
  }
  uint64_t v13 = (uint64_t *)((v9 & 0x80000000) != 0
                  ? *((void *)v4 + 3) + 16 * (v9 & 0x7FFFFFFF) + 8
                  : *((void *)v4 + 34) + 8 * v9);
  uint64_t v14 = *v13;
  if (!v14) {
    return 0;
  }
  while ((*(unsigned char *)(v14 + 3) & 1) != 0)
  {
    uint64_t v14 = *(void *)(v14 + 24);
    if (!v14) {
      return 0;
    }
  }
  while (1)
  {
    uint64_t v14 = *(void *)(v14 + 24);
    if (!v14) {
      break;
    }
    if ((*(unsigned char *)(v14 + 3) & 1) == 0) {
      return 0;
    }
  }
  unsigned int v15 = a1[2];
  int v16 = *((_DWORD *)v15 + 66);
  if (!v16) {
    goto LABEL_41;
  }
  uint64_t v17 = *(void *)(v12 + 24);
  uint64_t v18 = *((void *)v15 + 31);
  unsigned int v19 = v16 - 1;
  uint64_t v20 = ((v17 >> 4) ^ (v17 >> 9)) & v19;
  uint64_t v21 = *(void *)(v18 + 16 * v20);
  if (v17 != v21)
  {
    int v22 = 1;
    while (v21 != -4096)
    {
      int v23 = v20 + v22++;
      uint64_t v20 = v23 & v19;
      uint64_t v21 = *(void *)(v18 + 16 * v20);
      if (v17 == v21) {
        goto LABEL_26;
      }
    }
    goto LABEL_30;
  }
LABEL_26:
  int v24 = *(void **)(v18 + 16 * v20 + 8);
  if (!v24)
  {
LABEL_30:
    int v25 = 0;
    goto LABEL_31;
  }
  int v25 = 0;
  do
  {
    int v24 = (void *)*v24;
    ++v25;
  }
  while (v24);
LABEL_31:
  uint64_t v26 = *((void *)*a1 + 3);
  uint64_t v27 = ((v26 >> 4) ^ (v26 >> 9)) & v19;
  uint64_t v28 = *(void *)(v18 + 16 * v27);
  if (v26 != v28)
  {
    int v29 = 1;
    while (v28 != -4096)
    {
      int v30 = v27 + v29++;
      uint64_t v27 = v30 & v19;
      uint64_t v28 = *(void *)(v18 + 16 * v27);
      if (v26 == v28) {
        goto LABEL_35;
      }
    }
    goto LABEL_39;
  }
LABEL_35:
  uint64_t v31 = *(void **)(v18 + 16 * v27 + 8);
  if (!v31)
  {
LABEL_39:
    int v32 = 0;
    goto LABEL_40;
  }
  int v32 = 0;
  do
  {
    uint64_t v31 = (void *)*v31;
    ++v32;
  }
  while (v31);
LABEL_40:
  if (v25 != v32) {
    return 0;
  }
LABEL_41:
  int v33 = a1[3];
  uint64_t v34 = 1;
  v38[0] = *(_DWORD *)a1[4];
  v38[2] = 1;
  uint64_t v35 = *(void *)(v12 + 32);
  v37[0] = *(_DWORD *)(v35 + 36);
  v37[4] = 0;
  v37[6] = *(_DWORD *)(v35 + 68);
  v37[10] = 0;
  v37[12] = v6;
  v37[16] = 0;
  (*(void (**)(llvm::MachineInstr *, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 56, v38, 1, v37, 3, *(unsigned __int16 *)a1[5] | 0x100000000);
  llvm::MachineInstr::eraseFromParent(*a1);
  return v34;
}

uint64_t sub_1CBA0E3F4(uint64_t a1, unsigned int a2, int a3)
{
  if ((a2 & 0x80000000) != 0) {
    uint64_t v3 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v3 = (uint64_t *)(*(void *)(a1 + 272) + 8 * a2);
  }
  uint64_t v4 = *v3;
  if (v4)
  {
    if ((*(unsigned char *)(v4 + 3) & 1) == 0)
    {
      uint64_t v4 = *(void *)(v4 + 24);
      if (!v4) {
        return v4;
      }
      if ((*(unsigned char *)(v4 + 3) & 1) == 0) {
        return 0;
      }
    }
    uint64_t v5 = *(void *)(v4 + 8);
    if (!v5) {
      return 0;
    }
    if ((a2 & 0x80000000) != 0) {
      uint64_t v6 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v6 = (uint64_t *)(*(void *)(a1 + 272) + 8 * a2);
    }
    uint64_t v7 = *v6;
    if ((*(unsigned char *)(v7 + 3) & 1) == 0) {
      uint64_t v7 = *(void *)(v7 + 24);
    }
    uint64_t v8 = *(void *)(v7 + 8);
    BOOL v9 = **(_WORD **)(v8 + 16) == 121 && *(void *)(*(void *)(v8 + 32) + 48) != 0;
    uint64_t v4 = 1;
    if (!v9)
    {
      int v10 = **(unsigned __int16 **)(v5 + 16);
      if (v10 != 179)
      {
        if ((a2 & 0x80000000) != 0) {
          uint64_t v11 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v11 = (uint64_t *)(*(void *)(a1 + 272) + 8 * a2);
        }
        uint64_t v12 = *v11;
        if (v12)
        {
          while ((*(unsigned char *)(v12 + 3) & 1) != 0)
          {
            uint64_t v12 = *(void *)(v12 + 24);
            if (!v12) {
              goto LABEL_19;
            }
          }
          while (1)
          {
            uint64_t v12 = *(void *)(v12 + 24);
            if (!v12) {
              break;
            }
            if ((*(unsigned char *)(v12 + 3) & 1) == 0) {
              goto LABEL_19;
            }
          }
          if (!a3) {
            goto LABEL_39;
          }
        }
        else
        {
LABEL_19:
          if ((a3 & 1) == 0) {
            return 0;
          }
        }
        if ((a2 & 0x80000000) != 0) {
          uint64_t v13 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v13 = (uint64_t *)(*(void *)(a1 + 272) + 8 * a2);
        }
        uint64_t v14 = *v13;
        if (v14)
        {
          while ((*(unsigned char *)(v14 + 3) & 1) != 0)
          {
            uint64_t v14 = *(void *)(v14 + 24);
            if (!v14) {
              goto LABEL_39;
            }
          }
          int v15 = 0;
          uint64_t v16 = *(void *)(v14 + 8);
LABEL_32:
          ++v15;
          while (1)
          {
            uint64_t v14 = *(void *)(v14 + 24);
            if (!v14) {
              break;
            }
            if ((*(unsigned char *)(v14 + 3) & 1) == 0 && *(void *)(v14 + 8) != v16)
            {
              uint64_t v16 = *(void *)(v14 + 8);
              goto LABEL_32;
            }
          }
          if ((v15 & 0xFFFFFFFE) != 0) {
            return 0;
          }
        }
LABEL_39:
        LODWORD(v4) = 1;
        if (v10 > 260)
        {
          if (((v10 - 314) > 0x2A || ((1 << (v10 - 58)) & 0x40000200003) == 0)
            && v10 != 261)
          {
            goto LABEL_54;
          }
        }
        else if (((v10 - 163) > 0x38 || ((1 << (v10 + 93)) & 0x18800000000140DLL) == 0) {
               && v10 != 85)
        }
        {
LABEL_54:
          LODWORD(v4) = 0;
        }
        if (v10 == 182) {
          LODWORD(v4) = 1;
        }
        if (v10 == 183) {
          return 1;
        }
        else {
          return v4;
        }
      }
    }
  }
  return v4;
}

uint64_t sub_1CBA0E618(uint64_t a1, void *a2, void *a3)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    int v4 = v3 - 1;
    unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v6 = (void *)(*(void *)a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          uint64_t v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        uint64_t v6 = (void *)(*(void *)a1 + 16 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*a2 == *v6) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t result = 0;
  }
  *a3 = v6;
  return result;
}

void sub_1CBA0E6AC(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    int v4 = a1;
    free(v1);
    a1 = v4;
  }
  unsigned int v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    unsigned int v5 = a1;
    free(v2);
    a1 = v5;
  }
  int v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

unint64_t sub_1CBA0E760(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v5 = *(void *)a1 + 24 * v3;
    if (*(void *)a1 > a2 || v5 <= a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return a2;
}

void sub_1CBA0E7EC(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    BOOL v10 = *(uint64_t **)(a1 + 16);
    unsigned int v11 = &v10[v2];
    do
    {
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v13 = *v10;
      if (*v10 == *(void *)(v12 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        unint64_t v14 = *(void *)a1;
      }
      else
      {
        uint64_t v26 = (((unint64_t)v10 - v12) >> 10) & 0x1FFFFFF;
        if (v26 >= 0x1E) {
          LOBYTE(v26) = 30;
        }
        unint64_t v14 = v13 + (4096 << v26);
      }
      for (unint64_t i = ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 144; i <= v14; i += 144)
      {
        uint64_t v16 = *(void **)(i - 144);
        if ((void *)(i - 128) != v16) {
          free(v16);
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 72);
  if (v3)
  {
    uint64_t v17 = *(void **)(a1 + 64);
    uint64_t v18 = &v17[2 * v3];
    do
    {
      unint64_t v19 = *v17 + v17[1];
      for (unint64_t j = ((*v17 + 7) & 0xFFFFFFFFFFFFFFF8) + 144; j <= v19; j += 144)
      {
        uint64_t v21 = *(void **)(j - 144);
        if ((void *)(j - 128) != v21) {
          free(v21);
        }
      }
      v17 += 2;
    }
    while (v17 != v18);
    uint64_t v22 = *(unsigned int *)(a1 + 72);
    if (v22)
    {
      int v23 = *(uint64_t **)(a1 + 64);
      uint64_t v24 = 16 * v22;
      do
      {
        uint64_t v25 = *v23;
        v23 += 2;
        MEMORY[0x1D25D9CD0](v25, 8);
        v24 -= 16;
      }
      while (v24);
    }
  }
  *(_DWORD *)(a1 + 72) = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 80) = 0;
    unint64_t v5 = *(void **)(a1 + 16);
    uint64_t v6 = *v5 + 4096;
    *(void *)a1 = *v5;
    *(void *)(a1 + 8) = v6;
    if (v4 != 1)
    {
      uint64_t v7 = v5 + 1;
      uint64_t v8 = 8 * v4 - 8;
      do
      {
        uint64_t v9 = *v7++;
        MEMORY[0x1D25D9CD0](v9, 8);
        v8 -= 8;
      }
      while (v8);
    }
    *(_DWORD *)(a1 + 24) = 1;
  }
}

uint64_t sub_1CBA0E988()
{
  *(void *)&long long v4 = "Should enable CSE in AGX2 ISel Prepare";
  *((void *)&v4 + 1) = 38;
  int v3 = 0;
  LOBYTE(v1) = 1;
  uint64_t v2 = &v1;
  sub_1CD40E838((uint64_t)&unk_1EBCBEC18, "enable-cse-in-agx2-iselprepare", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCBEC18, &dword_1CB82C000);
  *(void *)&long long v4 = "Should hoist instructions to allow forming fma.shff up to this hoist depth.";
  *((void *)&v4 + 1) = 75;
  int v3 = 0;
  int v1 = 4;
  uint64_t v2 = &v1;
  sub_1CD40E960((uint64_t)&unk_1EBCBECD8, "fma-shff-hoist-depth-agx2", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCBECD8, &dword_1CB82C000);
}

uint64_t sub_1CBA0EA7C(uint64_t a1, BOOL a2, unsigned int a3, int a4, uint64_t a5)
{
  int v10 = *(unsigned __int16 *)(a1 + 24);
  if ((v10 - 198) <= 2)
  {
    long long v30 = *(_OWORD *)(*(void *)(**(void **)(a1 + 32) + 40) + 16 * *(unsigned int *)(*(void *)(a1 + 32) + 8));
    if ((_BYTE)v30) {
      unint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v30);
    }
    else {
      unint64_t ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v30);
    }
    if (v12 == 1)
    {
      unint64_t v27 = ExtendedSizeInBits;
      unint64_t ExtendedSizeInBits = v27;
    }
    if (ExtendedSizeInBits <= a3)
    {
      if (v10 == 198) {
        goto LABEL_20;
      }
      if (v10 == 200)
      {
        int v22 = 3;
        goto LABEL_27;
      }
      if (v10 == 199 && !sub_1CD7F1118(a5, **(void **)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8), 0) && a4)
      {
LABEL_26:
        int v22 = 2;
LABEL_27:
        LOBYTE(v21) = 1;
        return v21 | (v22 << 8);
      }
    }
  }
  int v13 = *(unsigned __int16 *)(a1 + 24);
  if ((v13 - 3) <= 1)
  {
    uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 40);
    BOOL v15 = v13 != 3;
    long long v30 = *(_OWORD *)(v14 + 80);
    if ((_BYTE)v30) {
      unint64_t v16 = sub_1CB87E200((unsigned __int8 *)&v30);
    }
    else {
      unint64_t v16 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v30);
    }
    unsigned int v18 = a3 - v15;
    if (v17 == 1)
    {
      unint64_t v29 = v16;
      unint64_t v16 = v29;
    }
    if (v16 > v18)
    {
      long long v30 = *(_OWORD *)(v14 + 80);
      if ((_BYTE)v30) {
        uint64_t v19 = sub_1CB87E200((unsigned __int8 *)&v30);
      }
      else {
        uint64_t v19 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v30);
      }
      if (v20 == 1)
      {
        uint64_t v28 = v19;
        uint64_t v19 = v28;
      }
      if (v19 == a3 && (a4 & 1) != 0) {
        goto LABEL_26;
      }
      goto LABEL_30;
    }
LABEL_20:
    LOBYTE(v21) = 1;
    int v22 = 1;
    return v21 | (v22 << 8);
  }
LABEL_30:
  sub_1CD7F121C(a5, a1, a2, 0, (uint64_t)&v30);
  unsigned int v24 = DWORD2(v30);
  uint64_t v25 = (long long *)v30;
  if (DWORD2(v30) < 0x41) {
    uint64_t v25 = &v30;
  }
  unint64_t v26 = ~*(void *)v25;
  if (v26 >> (a3 - 1))
  {
    int v21 = (v26 >> a3 == 0) & a4;
    if (v21) {
      int v22 = 2;
    }
    else {
      int v22 = 0;
    }
  }
  else
  {
    int v22 = 3;
    LOBYTE(v21) = 1;
  }
  if (v32 >= 0x41 && v31)
  {
    MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
    unsigned int v24 = DWORD2(v30);
  }
  if (v24 >= 0x41 && (void)v30) {
    MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
  }
  return v21 | (v22 << 8);
}

uint64_t sub_1CBA0ED1C(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4, int a5, int a6)
{
  uint64_t v8 = a1;
  int v10 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v9 = (unsigned __int8 *)(a1 + 32);
  if (v10) {
    unsigned int ExtendedSizeInBits = sub_1CB87E200(v9);
  }
  else {
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v9);
  }
  unsigned int v13 = ExtendedSizeInBits;
  if (v12 == 1) {
  uint64_t v14 = (unsigned __int8 *)(v8 + 48);
  }
  if (*(unsigned char *)(v8 + 48)) {
    unsigned int v15 = sub_1CB87E200(v14);
  }
  else {
    unsigned int v15 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v14);
  }
  unsigned int v290 = v15;
  if (v16 == 1) {
  uint64_t v289 = *(void *)(v8 + 24);
  }
  if (a6) {
    uint64_t v17 = -1;
  }
  else {
    uint64_t v17 = 1;
  }
  uint64_t v18 = *(void *)(*a3 + 40) + 16 * *((unsigned int *)a3 + 2);
  unsigned int v293 = (const llvm::APInt *)(v8 + 8);
  uint64_t v19 = sub_1CD7EBF14(*(void *)(*(void *)(v8 + 96) + 16), v17, (const llvm::APInt *)(v8 + 8), *(llvm **)v18, *(void *)(v18 + 8), 0, 0);
  uint64_t v22 = *a4;
  int v23 = *(unsigned __int16 *)(*a4 + 24);
  BOOL v24 = v23 == 35 || v23 == 11;
  uint64_t v291 = v8;
  if (v24)
  {
    uint64_t v25 = (uint64_t)v19;
    uint64_t v26 = v20;
    unint64_t v27 = (uint64_t *)*a3;
    do
    {
LABEL_20:
      int v28 = *((unsigned __int16 *)v27 + 12);
      if (v28 == 56)
      {
        uint64_t v29 = v27[4];
        uint64_t v30 = *(void *)(v29 + 40);
        int v31 = *(unsigned __int16 *)(v30 + 24);
        if (v31 == 35 || v31 == 11)
        {
          uint64_t v33 = *(void *)(*(void *)(v8 + 96) + 16);
          uint64_t v34 = *(void *)(v33 + 832);
          if (v34) {
            LOWORD(v34) = *(_WORD *)(v34 + 8);
          }
          uint64_t v35 = v27[5] + 16 * *((unsigned int *)a3 + 2);
          uint64_t v36 = *(llvm **)v35;
          uint64_t v37 = *(void *)(v35 + 8);
          uint64_t v39 = *a4;
          uint64_t v38 = a4[1];
          uint64_t v40 = sub_1CCFDED5C(v33, 58, v293, *(llvm **)v35, v37, v30, *(void *)(v29 + 48), v21, v25, v26, v34);
          uint64_t v43 = *(void *)(v33 + 832);
          if (v43) {
            LOWORD(v43) = *(_WORD *)(v43 + 8);
          }
          uint64_t v44 = sub_1CCFDED5C(v33, 56, v293, v36, v37, v39, v38, v42, (uint64_t)v40, v41, v43);
          uint64_t v8 = v291;
          *a4 = (uint64_t)v44;
          *((_DWORD *)a4 + 2) = v45;
          uint64_t v46 = *(void *)(*a3 + 32);
          int v47 = *(_DWORD *)(v46 + 8);
          uint64_t v48 = *(void *)v46;
          *a3 = v48;
          *((_DWORD *)a3 + 2) = v47;
          unint64_t v27 = (uint64_t *)v48;
          int v28 = *(unsigned __int16 *)(v48 + 24);
          char v49 = 1;
        }
        else
        {
          char v49 = 0;
          int v28 = 56;
        }
      }
      else
      {
        char v49 = 0;
      }
      uint64_t v50 = 0;
      char v51 = 1;
      do
      {
        char v52 = v51;
        if (v28 == 56)
        {
          uint64_t v53 = *(void *)(v27[4] + 40 * v50);
          if (*(_WORD *)(v53 + 24) == 56)
          {
            uint64_t v54 = *(void *)(v53 + 32);
            uint64_t v55 = *(void *)(v54 + 40);
            int v56 = *(unsigned __int16 *)(v55 + 24);
            if (v56 == 35 || v56 == 11)
            {
              uint64_t v58 = *(void *)(*(void *)(v8 + 96) + 16);
              uint64_t v59 = *(void *)(v58 + 832);
              if (v59) {
                LOWORD(v59) = *(_WORD *)(v59 + 8);
              }
              uint64_t v60 = v27[5] + 16 * *((unsigned int *)a3 + 2);
              uint64_t v61 = *(llvm **)v60;
              uint64_t v62 = *(void *)(v60 + 8);
              uint64_t v63 = *a4;
              uint64_t v64 = a4[1];
              uint64_t v65 = sub_1CCFDED5C(v58, 58, v293, *(llvm **)v60, v62, v55, *(void *)(v54 + 48), v21, v25, v26, v59);
              uint64_t v68 = *(void *)(v58 + 832);
              if (v68) {
                LOWORD(v68) = *(_WORD *)(v68 + 8);
              }
              int v69 = sub_1CCFDED5C(v58, 56, v293, v61, v62, v63, v64, v67, (uint64_t)v65, v66, v68);
              uint64_t v8 = v291;
              *a4 = (uint64_t)v69;
              *((_DWORD *)a4 + 2) = v71;
              uint64_t v72 = *(void *)(*(void *)(v291 + 96) + 16);
              uint64_t v73 = *(void *)(*a3 + 32);
              uint64_t v74 = *(void *)(*a3 + 40) + 16 * *((unsigned int *)a3 + 2);
              int v75 = *(llvm **)v74;
              uint64_t v76 = *(void *)(v74 + 8);
              uint64_t v77 = (uint64_t *)(v73 + 40 * (v50 ^ 1));
              uint64_t v78 = *v77;
              uint64_t v79 = v77[1];
              uint64_t v80 = *(uint64_t **)(*(void *)(v73 + 40 * v50) + 32);
              uint64_t v81 = *v80;
              uint64_t v82 = v80[1];
              uint64_t v83 = *(void *)(v72 + 832);
              if (v83) {
                LOWORD(v83) = *(_WORD *)(v83 + 8);
              }
              unint64_t v27 = sub_1CCFDED5C(v72, 56, v293, v75, v76, v78, v79, v70, v81, v82, v83);
              *a3 = (uint64_t)v27;
              *((_DWORD *)a3 + 2) = v84;
              goto LABEL_20;
            }
          }
        }
        char v51 = 0;
        uint64_t v50 = 1;
      }
      while ((v52 & 1) != 0);
    }
    while ((v49 & 1) != 0);
    uint64_t v22 = *a4;
  }
  int v85 = v289;
  int v86 = a5;
  if (a5)
  {
    unint64_t v114 = a4[1];
    uint64_t v115 = sub_1CD7EBF14(*(void *)(*(void *)(v8 + 96) + 16), 0, v293, (llvm *)5, 0, 0, 0);
    unint64_t v117 = v116;
    unsigned int v298 = 32;
    unsigned int v297 = 0;
    if (*(_WORD *)(*a4 + 24) == 175)
    {
      uint64_t v118 = *(void *)(*a4 + 32);
      uint64_t v22 = *(void *)v118;
      unint64_t v287 = v114 & 0xFFFFFFFF00000000 | *(unsigned int *)(v118 + 8);
      v119 = *(uint64_t **)(v118 + 40);
      uint64_t v120 = v119[10];
      unsigned int v121 = *(_DWORD *)(v120 + 32);
      if (v121 > 0x40)
      {
        llvm::APInt::reallocate((uint64_t)&v297, v121);
        unsigned int v128 = v298;
        if (v298 <= 0x40)
        {
          v122 = *(unint64_t **)(v120 + 24);
          unsigned int v297 = v122;
        }
        else
        {
          unint64_t v129 = v117;
          uint64_t v130 = v297;
          memcpy(v297, *(const void **)(v120 + 24), (((unint64_t)v298 + 63) >> 3) & 0x3FFFFFF8);
          v122 = v130;
          unint64_t v117 = v129;
        }
        unsigned int v123 = v128;
        uint64_t v118 = *(void *)(*a4 + 32);
        v119 = *(uint64_t **)(v118 + 40);
      }
      else
      {
        v122 = *(unint64_t **)(v120 + 24);
        unsigned int v297 = v122;
        unsigned int v123 = v121;
        unsigned int v298 = v121;
      }
      unint64_t v117 = v117 & 0xFFFFFFFF00000000 | *(unsigned int *)(v118 + 48);
      unint64_t v124 = (unint64_t)v122;
    }
    else
    {
      v119 = v115;
      unint64_t v287 = v114;
      unsigned int v123 = 32;
      v122 = 0;
      unint64_t v124 = 0;
    }
    if (a5 != 2)
    {
      if (a5 == 1)
      {
        uint64_t v284 = (uint64_t)v119;
        uint64_t v131 = v122;
        *(_OWORD *)__src = *(_OWORD *)(*(void *)(*a3 + 40) + 16 * *((unsigned int *)a3 + 2));
        if (LOBYTE(__src[0])) {
          unsigned int v132 = sub_1CB87E200((unsigned __int8 *)__src);
        }
        else {
          unsigned int v132 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
        }
        unsigned int v174 = v132;
        if (v133 == 1) {
        LODWORD(__src[1]) = 1;
        }
        __src[0] = 0;
        if (sub_1CB8F5164(v8, v22, v287, 0, 0))
        {
          uint64_t v176 = *(void *)(v22 + 32);
          uint64_t v177 = *(void *)(v176 + 40);
          int v178 = *(unsigned __int16 *)(v177 + 24);
          if (v178 == 35 || v178 == 11)
          {
            uint64_t v193 = *(void *)(v177 + 80);
            uint64_t v194 = (const void **)(v193 + 24);
            if (LODWORD(__src[1]) > 0x40 || (unsigned int v195 = *(_DWORD *)(v193 + 32), v195 > 0x40))
            {
              if (__src != (void **)v194)
              {
                llvm::APInt::reallocate((uint64_t)__src, *(_DWORD *)(v193 + 32));
                if (LODWORD(__src[1]) <= 0x40) {
                  __src[0] = (void *)*v194;
                }
                else {
                  memcpy(__src[0], *v194, (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8);
                }
                uint64_t v8 = v291;
              }
              uint64_t v176 = *(void *)(v22 + 32);
            }
            else
            {
              __src[0] = (void *)*v194;
              LODWORD(__src[1]) = v195;
            }
            v196 = *(uint64_t **)v176;
            unint64_t v197 = v287 & 0xFFFFFFFF00000000 | *(unsigned int *)(v176 + 8);
LABEL_190:
            uint64_t v228 = *(void *)(*(void *)(v8 + 96) + 16);
            uint64_t v229 = *(void *)(*a3 + 40) + 16 * *((unsigned int *)a3 + 2);
            unsigned int v230 = *(llvm **)v229;
            uint64_t v231 = *(void *)(v229 + 8);
            uint64_t v232 = *(void *)(v228 + 832);
            if (v232) {
              LOWORD(v232) = *(_WORD *)(v232 + 8);
            }
            char v234 = sub_1CCFDED5C(v228, 175, v293, v230, v231, (uint64_t)v196, v197, v175, v284, v117, v232);
            uint64_t v236 = *(void *)(*(void *)(v8 + 96) + 16);
            uint64_t v238 = *(void *)(v236 + 832);
            if (v238) {
              LOWORD(v238) = *(_WORD *)(v238 + 8);
            }
            uint64_t v237 = *(void *)(*a3 + 40) + 16 * *((unsigned int *)a3 + 2);
            *a3 = (uint64_t)sub_1CCFDED5C(v236, 56, v293, *(llvm **)v237, *(void *)(v237 + 8), (uint64_t)v234, v233, v235, *a3, a3[1], v238);
            *((_DWORD *)a3 + 2) = v239;
            uint64_t v240 = *(void *)(*(void *)(v8 + 96) + 16);
            int v241 = (int)__src[1];
            unsigned int v295 = __src[1];
            if (LODWORD(__src[1]) > 0x40) {
              operator new[]();
            }
            v294 = __src[0];
            if (v123 >= 0x41)
            {
              int v276 = 0;
              int64_t v277 = ((unint64_t)v123 + 63) >> 6;
              do
              {
                if (v277-- < 1) {
                  break;
                }
                unint64_t v279 = v131[v277];
                v276 += __clz(v279);
              }
              while (!v279);
              unsigned int v280 = v123 | 0xFFFFFFC0;
              if ((v123 & 0x3F) == 0) {
                unsigned int v280 = 0;
              }
              if (v123 - v276 - v280 > 0x40)
              {
                uint64_t v8 = v291;
                goto LABEL_200;
              }
              unint64_t v124 = *v131;
              uint64_t v8 = v291;
              if (*v131 > LODWORD(__src[1])) {
                goto LABEL_200;
              }
            }
            else if (v124 > LODWORD(__src[1]))
            {
LABEL_200:
              uint64_t v242 = (uint64_t)__src[0] << v241;
              if (LODWORD(__src[1]) == v241) {
                uint64_t v242 = 0;
              }
              if (LODWORD(__src[1])) {
                unint64_t v243 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]);
              }
              else {
                unint64_t v243 = 0;
              }
              v294 = (void *)(v243 & v242);
              uint64_t v244 = (uint64_t *)(*(void *)(*a3 + 40) + 16 * *((unsigned int *)a3 + 2));
              *a4 = sub_1CD7EBB14(v240, (llvm::LLVMContext *)&v294, v293, *v244, v244[1], 0, 0);
              *((_DWORD *)a4 + 2) = v245;
              if (v295 >= 0x41 && v294) {
                MEMORY[0x1D25D9CB0](v294, 0x1000C8000313F17);
              }
              v122 = v131;
              goto LABEL_208;
            }
            int v241 = v124;
            goto LABEL_200;
          }
        }
        v122 = v131;
        if (v13 <= v290)
        {
LABEL_208:
          if (LODWORD(__src[1]) >= 0x41 && __src[0])
          {
            MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
            v122 = v131;
          }
          int v85 = v289;
          int v86 = a5;
          goto LABEL_212;
        }
        int v180 = *(unsigned __int16 *)(v22 + 24);
        if (v180 == 199)
        {
          if (sub_1CB8F5164(v8, **(void **)(v22 + 32), *(void *)(*(void *)(v22 + 32) + 8), 1, 0))
          {
            uint64_t v181 = **(void **)(v22 + 32);
            uint64_t v182 = *(void *)(*(void *)(v181 + 32) + 40);
            int v183 = *(unsigned __int16 *)(v182 + 24);
            if (v183 == 35 || v183 == 11)
            {
              uint64_t v208 = *(void *)(v182 + 80);
              v209 = (const void **)(v208 + 24);
              if (LODWORD(__src[1]) > 0x40 || (unsigned int v210 = *(_DWORD *)(v208 + 32), v210 > 0x40))
              {
                if (__src != (void **)v209)
                {
                  uint64_t v283 = v181;
                  llvm::APInt::reallocate((uint64_t)__src, *(_DWORD *)(v208 + 32));
                  if (LODWORD(__src[1]) <= 0x40) {
                    __src[0] = (void *)*v209;
                  }
                  else {
                    memcpy(__src[0], *v209, (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8);
                  }
                  uint64_t v8 = v291;
                  uint64_t v181 = v283;
                }
              }
              else
              {
                __src[0] = (void *)*v209;
                LODWORD(__src[1]) = v210;
              }
              if (v174 > 0x40)
              {
                uint64_t v282 = v181;
                if (LODWORD(__src[1]) != v174) {
                  operator new[]();
                }
                sub_1CD0463BC((uint64_t)&v294, (uint64_t)__src);
                uint64_t v8 = v291;
                uint64_t v181 = v282;
              }
              else
              {
                unsigned int v295 = v174;
                if (v174) {
                  unint64_t v211 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v174;
                }
                else {
                  unint64_t v211 = 0;
                }
                v294 = (void *)(v211 & (unint64_t)__src[0]);
              }
              if (LODWORD(__src[1]) >= 0x41 && __src[0])
              {
                uint64_t v212 = v181;
                MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
                uint64_t v181 = v212;
              }
              unint64_t v213 = v287 & 0xFFFFFFFF00000000;
              __src[0] = v294;
              LODWORD(__src[1]) = v295;
              uint8x8_t v214 = *(llvm::APFloatBase **)(*(void *)(v8 + 96) + 16);
              uint64_t v215 = *(void *)(*a3 + 40) + 16 * *((unsigned int *)a3 + 2);
              uint64_t v216 = *(llvm **)v215;
              uint64_t v217 = *(void *)(v215 + 8);
              uint64_t v218 = *(uint64_t **)(v181 + 32);
              uint64_t v219 = *v218;
              uint64_t v220 = (void *)v218[1];
              uint64_t v221 = *((void *)v214 + 104);
              if (v221) {
                __int16 v222 = *(_WORD *)(v221 + 8);
              }
              else {
                __int16 v222 = 0;
              }
              uint64_t v226 = 199;
LABEL_189:
              v196 = sub_1CD7F3564(v214, (const char *)v226, (uint64_t)v293, v216, v217, v219, v220, v222);
              unint64_t v197 = v227 | v213;
              goto LABEL_190;
            }
          }
          int v180 = *(unsigned __int16 *)(v22 + 24);
          v122 = v131;
        }
        if (v180 != 198) {
          goto LABEL_208;
        }
        BOOL v185 = sub_1CB8F5164(v8, **(void **)(v22 + 32), *(void *)(*(void *)(v22 + 32) + 8), 0, 1);
        v122 = v131;
        if (!v185) {
          goto LABEL_208;
        }
        uint64_t v186 = **(void **)(v22 + 32);
        uint64_t v187 = *(void *)(*(void *)(v186 + 32) + 40);
        int v188 = *(unsigned __int16 *)(v187 + 24);
        if (v188 != 35 && v188 != 11) {
          goto LABEL_208;
        }
        unint64_t v281 = v117;
        uint64_t v190 = *(void *)(v187 + 80);
        uint64_t v191 = (const void **)(v190 + 24);
        if (LODWORD(__src[1]) > 0x40 || (unsigned int v192 = *(_DWORD *)(v190 + 32), v192 > 0x40))
        {
          if (__src != (void **)v191)
          {
            llvm::APInt::reallocate((uint64_t)__src, *(_DWORD *)(v190 + 32));
            if (LODWORD(__src[1]) <= 0x40) {
              __src[0] = (void *)*v191;
            }
            else {
              memcpy(__src[0], *v191, (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8);
            }
            uint64_t v8 = v291;
          }
        }
        else
        {
          __src[0] = (void *)*v191;
          LODWORD(__src[1]) = v192;
        }
        llvm::APInt::sext((uint64_t)__src, v174, (uint64_t)&v294);
        if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
          MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
        }
        unint64_t v213 = v287 & 0xFFFFFFFF00000000;
        __src[0] = v294;
        LODWORD(__src[1]) = v295;
        uint8x8_t v214 = *(llvm::APFloatBase **)(*(void *)(v8 + 96) + 16);
        uint64_t v223 = *(void *)(*a3 + 40) + 16 * *((unsigned int *)a3 + 2);
        uint64_t v216 = *(llvm **)v223;
        uint64_t v217 = *(void *)(v223 + 8);
        v224 = *(uint64_t **)(v186 + 32);
        uint64_t v219 = *v224;
        uint64_t v220 = (void *)v224[1];
        uint64_t v225 = *((void *)v214 + 104);
        unint64_t v117 = v281;
        if (v225) {
          __int16 v222 = *(_WORD *)(v225 + 8);
        }
        else {
          __int16 v222 = 0;
        }
        uint64_t v226 = 198;
        goto LABEL_189;
      }
LABEL_212:
      if (v123 >= 0x41 && v122) {
        MEMORY[0x1D25D9CB0](v122, 0x1000C8000313F17);
      }
      uint64_t v22 = *a4;
      goto LABEL_50;
    }
    if (v13 <= v290) {
      goto LABEL_212;
    }
    uint64_t v285 = (uint64_t)v119;
    unsigned int v134 = v122;
    BOOL v135 = sub_1CB8F5164(v8, v22, v287, 0, 0);
    v122 = v134;
    if (!v135) {
      goto LABEL_212;
    }
    if (sub_1CD40F0F8(v8, **(void **)(v22 + 32), *(void *)(*(void *)(v22 + 32) + 8), v290))
    {
      uint64_t v137 = *(void *)(*(void *)(v8 + 96) + 16);
      uint64_t v138 = *(void *)(*a3 + 40) + 16 * *((unsigned int *)a3 + 2);
      int v139 = *(llvm **)v138;
      uint64_t v140 = *(void *)(v138 + 8);
      v141 = *(uint64_t **)(v22 + 32);
      uint64_t v142 = *v141;
      uint64_t v143 = v141[1];
      uint64_t v144 = *(void *)(v137 + 832);
      if (v144) {
        LOWORD(v144) = *(_WORD *)(v144 + 8);
      }
      uint64_t v145 = v117;
      unint64_t v147 = sub_1CCFDED5C(v137, 175, v293, v139, v140, v142, v143, v136, v285, v117, v144);
      int v149 = v148;
      uint64_t v150 = *(void *)(*(void *)(v8 + 96) + 16);
      uint64_t v151 = *(void *)(*a3 + 40) + 16 * *((unsigned int *)a3 + 2);
      uint64_t v152 = *(llvm **)v151;
      uint64_t v153 = *(void *)(v151 + 8);
      uint64_t v154 = *(void *)(v22 + 32);
      uint64_t v155 = *(void *)(v154 + 40);
      uint64_t v156 = *(void *)(v154 + 48);
      uint64_t v157 = *(void *)(v150 + 832);
      if (v157) {
        LOWORD(v157) = *(_WORD *)(v157 + 8);
      }
      uint64_t v158 = sub_1CCFDED5C(v150, 175, v293, v152, v153, v155, v156, v146, v285, v145, v157);
      uint64_t v161 = *(void *)(*(void *)(v8 + 96) + 16);
      uint64_t v162 = *(void *)(*a3 + 40) + 16 * *((unsigned int *)a3 + 2);
      v163 = *(llvm **)v162;
      uint64_t v164 = *(void *)(v162 + 8);
      uint64_t v165 = *(void *)(v161 + 832);
      if (v165) {
        LOWORD(v165) = *(_WORD *)(v165 + 8);
      }
      *a3 = (uint64_t)sub_1CCFDED5C(v161, 56, v293, v163, v164, *a3, a3[1], v160, (uint64_t)v158, v159, v165);
      *((_DWORD *)a3 + 2) = v166;
      uint64_t v167 = a4;
    }
    else
    {
      int v246 = sub_1CD40F0F8(v8, *(void *)(*(void *)(v22 + 32) + 40), *(void *)(*(void *)(v22 + 32) + 48), v290);
      v122 = v134;
      if (!v246) {
        goto LABEL_212;
      }
      uint64_t v248 = v117;
      uint64_t v249 = *(void *)(*(void *)(v8 + 96) + 16);
      uint64_t v250 = *(void *)(*a3 + 40) + 16 * *((unsigned int *)a3 + 2);
      uint64_t v251 = *(llvm **)v250;
      uint64_t v252 = *(void *)(v250 + 8);
      uint64_t v253 = *(void *)(v22 + 32);
      uint64_t v254 = *(void *)(v253 + 40);
      uint64_t v255 = *(void *)(v253 + 48);
      uint64_t v256 = *(void *)(v249 + 832);
      if (v256) {
        LOWORD(v256) = *(_WORD *)(v256 + 8);
      }
      unint64_t v147 = sub_1CCFDED5C(v249, 175, v293, v251, v252, v254, v255, v247, v285, v117, v256);
      int v149 = v258;
      uint64_t v259 = *(void *)(*(void *)(v291 + 96) + 16);
      uint64_t v260 = *(void *)(*a3 + 40) + 16 * *((unsigned int *)a3 + 2);
      uint64_t v261 = *(llvm **)v260;
      uint64_t v262 = *(void *)(v260 + 8);
      uint64_t v263 = *(uint64_t **)(v22 + 32);
      uint64_t v264 = *v263;
      uint64_t v265 = v263[1];
      uint64_t v266 = *(void *)(v259 + 832);
      if (v266) {
        LOWORD(v266) = *(_WORD *)(v266 + 8);
      }
      v267 = sub_1CCFDED5C(v259, 175, v293, v261, v262, v264, v265, v257, v285, v248, v266);
      uint64_t v270 = *(void *)(*(void *)(v291 + 96) + 16);
      uint64_t v271 = *(void *)(*a3 + 40) + 16 * *((unsigned int *)a3 + 2);
      unint64_t v272 = *(llvm **)v271;
      uint64_t v273 = *(void *)(v271 + 8);
      uint64_t v274 = *(void *)(v270 + 832);
      if (v274) {
        LOWORD(v274) = *(_WORD *)(v274 + 8);
      }
      *a3 = (uint64_t)sub_1CCFDED5C(v270, 56, v293, v272, v273, *a3, a3[1], v269, (uint64_t)v267, v268, v274);
      *((_DWORD *)a3 + 2) = v275;
      uint64_t v8 = v291;
      uint64_t v167 = a4;
    }
    *uint64_t v167 = (uint64_t)v147;
    *((_DWORD *)v167 + 2) = v149;
    int v85 = v289;
    int v86 = a5;
    v122 = v134;
    goto LABEL_212;
  }
LABEL_50:
  uint64_t v87 = (1 << v85);
  unsigned int v88 = *(unsigned __int16 *)(v22 + 24);
  if (v88 > 0x39)
  {
    if (v88 == 58)
    {
      uint64_t v102 = *(uint64_t **)(v22 + 32);
      uint64_t v103 = v102[5];
      int v104 = *(unsigned __int16 *)(v103 + 24);
      if (v104 != 35 && v104 != 11) {
        goto LABEL_87;
      }
      uint64_t v106 = *(void *)(v103 + 80);
      uint64_t v107 = (void **)(v106 + 24);
      unsigned int v108 = *(_DWORD *)(v106 + 32);
      v109 = v107;
      if (v108 >= 0x41) {
        v109 = *v107;
      }
      if (*v109 != v87)
      {
        if (v86 == 2)
        {
          uint64_t v111 = v107;
          if (v108 >= 0x41) {
            uint64_t v111 = *v107;
          }
          if ((*v111 & (v87 - 1)) == 0)
          {
            uint64_t v168 = *(void *)(*(void *)a2 + 48);
            if (v168)
            {
              char v169 = v85;
              int v170 = 1;
              do
              {
                if (*(_DWORD *)(v168 + 8) == a2[2])
                {
                  if (!v170) {
                    goto LABEL_87;
                  }
                  --v170;
                }
                uint64_t v168 = *(void *)(v168 + 32);
              }
              while (v168);
              if (!v170)
              {
                if (v108 >= 0x41) {
                  uint64_t v107 = (void **)*v107;
                }
                uint64_t v198 = *(void *)(*(void *)(v8 + 96) + 16);
                uint64_t v199 = *(void *)(v22 + 40) + 16 * *((unsigned int *)a4 + 2);
                v200 = *(llvm **)v199;
                uint64_t v201 = *(void *)(v199 + 8);
                uint64_t v202 = *v102;
                uint64_t v203 = v102[1];
                BOOL v204 = sub_1CD7EBF14(v198, (unint64_t)*v107 >> v169, v293, *(llvm **)v199, v201, 0, 0);
                uint64_t v207 = *(void *)(v198 + 832);
                if (v207) {
                  LOWORD(v207) = *(_WORD *)(v207 + 8);
                }
                int v171 = sub_1CCFDED5C(v198, 58, v293, v200, v201, v202, v203, v206, (uint64_t)v204, v205, v207);
                uint64_t v8 = v291;
                uint64_t v173 = a4;
                goto LABEL_127;
              }
            }
          }
        }
LABEL_87:
        BOOL v101 = v85 == 0;
        goto LABEL_88;
      }
      uint64_t v110 = *v102;
      *((_DWORD *)a4 + 2) = *((_DWORD *)v102 + 2);
      *a4 = v110;
    }
    else
    {
      if (v88 != 175) {
        goto LABEL_87;
      }
      uint64_t v92 = *(void *)(v22 + 32);
      uint64_t v93 = *(void *)(v92 + 40);
      int v94 = *(unsigned __int16 *)(v93 + 24);
      if (v94 != 35 && v94 != 11) {
        goto LABEL_87;
      }
      uint64_t v96 = *(void *)(v93 + 80);
      uint64_t v97 = (void *)(v96 + 24);
      if (*(_DWORD *)(v96 + 32) >= 0x41u) {
        uint64_t v97 = (void *)*v97;
      }
      if (*(void *)(v8 + 24) != *v97) {
        goto LABEL_87;
      }
      uint64_t v98 = *(void *)v92;
      *((_DWORD *)a4 + 2) = *(_DWORD *)(v92 + 8);
      *a4 = v98;
    }
LABEL_82:
    BOOL v101 = 1;
    goto LABEL_88;
  }
  if (v88 != 11 && v88 != 35) {
    goto LABEL_87;
  }
  uint64_t v89 = *(void *)(v22 + 80);
  unsigned int v90 = *(_DWORD *)(v89 + 32);
  if (v90 > 0x40) {
    uint64_t v91 = **(void **)(v89 + 24);
  }
  else {
    uint64_t v91 = (uint64_t)(*(void *)(v89 + 24) << -(char)v90) >> -(char)v90;
  }
  if ((v91 & (v87 - 1)) == 0)
  {
    uint64_t v99 = v91 / (1 << *(void *)(v8 + 24));
    if (v99 && (unint64_t)(v99 + 0x80000000) >> 32 == 0)
    {
      int v171 = sub_1CD7EBF14(*(void *)(*(void *)(v8 + 96) + 16), v99, v293, (llvm *)5, 0, 0, 0);
      uint64_t v173 = a4;
LABEL_127:
      *uint64_t v173 = (uint64_t)v171;
      *((_DWORD *)v173 + 2) = v172;
      goto LABEL_82;
    }
  }
  BOOL v101 = 0;
LABEL_88:
  if (v13 <= v290 || (int v112 = *(unsigned __int16 *)(*a4 + 24), v112 == 11) || v112 == 35)
  {
    if (v101) {
      return 1;
    }
  }
  else if (sub_1CD40F0F8(v8, *a4, a4[1], v290) & v101)
  {
    return 1;
  }
  uint64_t v125 = *(void *)a2;
  *((_DWORD *)a3 + 2) = a2[2];
  *a3 = v125;
  v126 = sub_1CD7EBF14(*(void *)(*(void *)(v8 + 96) + 16), 0, v293, (llvm *)5, 0, 0, 0);
  uint64_t result = 0;
  *a4 = (uint64_t)v126;
  *((_DWORD *)a4 + 2) = v127;
  return result;
}

BOOL sub_1CBA0FEA0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  int v6 = *(unsigned __int8 *)(*(void *)(a1 + 24) + 326);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(*(void *)(a2 + 24) + 32);
  v53[1] = v55;
  v53[2] = v55;
  v53[3] = 4;
  int v54 = 0;
  v53[0] = &unk_1F261BC50;
  v55[4] = v8;
  v55[5] = *(void *)(v8 + 40);
  v55[6] = (*(uint64_t (**)(void))(**(void **)(v8 + 16) + 120))(*(void *)(v8 + 16));
  v55[7] = *(void *)(*(void *)v8 + 40) + 272;
  int v56 = 6;
  uint64_t v57 = 1;
  for (uint64_t i = 15; i != 95; i += 5)
    LODWORD(v53[i]) = -1;
  unsigned int v10 = **(unsigned __int16 **)(a2 + 16);
  if (v10 > 0x75)
  {
    if (v10 == 118 || v10 == 126 || v10 == 124)
    {
      int v11 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
      if (v11 < 0 && (uint64_t v12 = v11 & 0x7FFFFFFF, v12 < *(_DWORD *)(v7 + 432))) {
        unint64_t v13 = *(void *)(*(void *)(v7 + 424) + 8 * v12);
      }
      else {
        unint64_t v13 = 0;
      }
      unint64_t v49 = v13;
      unint64_t v16 = sub_1CB8F1DC4(&v49);
      if (v15 == 1) {
      if (v16 <= a3)
      }
      {
        if (v10 == 118)
        {
          char v20 = 3;
LABEL_46:
          char v25 = 1;
          goto LABEL_79;
        }
        if (v10 != 126)
        {
LABEL_58:
          char v25 = 1;
          char v20 = 1;
          goto LABEL_79;
        }
        uint64_t v18 = (const char *)*(unsigned int *)(*(void *)(a2 + 32) + 36);
        if ((v18 & 0x80000000) != 0
          && (v18 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v7 + 432))
        {
          unint64_t v19 = *(void *)(*(void *)(v7 + 424) + 8 * (v18 & 0x7FFFFFFF));
        }
        else
        {
          unint64_t v19 = 0;
        }
        unint64_t v49 = v19;
        unsigned int v22 = sub_1CB8F1DC4(&v49);
        if (v21 == 1) {
        unsigned int v48 = v22;
        }
        if (v22 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v47);
        }
        uint64_t v47 = 1 << (v22 - 1);
        sub_1CC6DEE8C((uint64_t)v53, v18, (uint64_t)&v49);
        BOOL v23 = (v47 & ~v49) == 0;
        if (v52 >= 0x41 && v51) {
          MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
        }
        if (v50 >= 0x41 && v49) {
          MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
        }
        if (v6) {
          char v24 = v23;
        }
        else {
          char v24 = 1;
        }
        if ((v24 & 1) == 0)
        {
          char v20 = 2;
          goto LABEL_46;
        }
      }
    }
    goto LABEL_70;
  }
  if (v10 == 91)
  {
    unint64_t v17 = *(void *)(a2 + 48);
    if (v17 >= 8)
    {
      if ((v17 & 7) != 0)
      {
        if ((*(void *)(a2 + 48) & 7) != 3
          || (v17 & 0xFFFFFFFFFFFFFFF8) == 0
          || *(_DWORD *)(v17 & 0xFFFFFFFFFFFFFFF8) != 1)
        {
          goto LABEL_70;
        }
      }
      else
      {
        v17 &= 0xFFFFFFFFFFFFFFF8;
        *(void *)(a2 + 48) = v17;
      }
      if ((v17 & 7) != 0)
      {
        unint64_t v26 = *(void *)((v17 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        unint64_t v26 = v17 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(a2 + 48) = v17 & 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v29 = *(void *)(v26 + 24);
      int v28 = (unint64_t *)(v26 + 24);
      if ((v29 & 0xFFFFFFFFFFFFFFF9) != 0)
      {
        unint64_t v31 = (sub_1CB8F1DC4(v28) + 7) & 0xFFFFFFFFFFFFFFF8;
        if (v30 == 1) {
        if (v31 <= a3)
        }
          goto LABEL_58;
      }
    }
LABEL_70:
    sub_1CC6DEE8C((uint64_t)v53, (const char *)*(unsigned int *)(*(void *)(a2 + 32) + 4), (uint64_t)&v49);
    unint64_t v41 = v49;
    unsigned int v42 = v50;
    unint64_t v43 = v49;
    if (v50 >= 0x41) {
      unint64_t v43 = *(void *)v49;
    }
    if (((-1 << (a3 - 1)) & ~v43) != 0)
    {
      BOOL v44 = v6 != 0;
      BOOL v45 = ~v43 >> a3 == 0;
      char v25 = v44 && v45;
      if (v44 && v45) {
        char v20 = 2;
      }
      else {
        char v20 = 0;
      }
    }
    else
    {
      char v20 = 3;
      char v25 = 1;
    }
    if (v52 >= 0x41 && v51) {
      MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
    }
    if (v42 >= 0x41 && v41) {
      MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
    }
    goto LABEL_79;
  }
  if (v10 != 92) {
    goto LABEL_70;
  }
  unint64_t v14 = *(void *)(a2 + 48);
  if (v14 < 8) {
    goto LABEL_70;
  }
  if ((v14 & 7) != 0)
  {
    if ((*(void *)(a2 + 48) & 7) != 3
      || (v14 & 0xFFFFFFFFFFFFFFF8) == 0
      || *(_DWORD *)(v14 & 0xFFFFFFFFFFFFFFF8) != 1)
    {
      goto LABEL_70;
    }
  }
  else
  {
    v14 &= 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + 48) = v14;
  }
  if ((v14 & 7) != 0)
  {
    unint64_t v27 = *(void *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unint64_t v27 = v14 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + 48) = v14 & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v33 = *(void *)(v27 + 24);
  unsigned int v32 = (unint64_t *)(v27 + 24);
  if ((v33 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    int v35 = sub_1CB8F1DC4(v32);
    if (v34 == 1) {
    unsigned int v36 = (v35 + 7) & 0xFFFFFFF8;
    }
  }
  else
  {
    unsigned int v36 = -8;
  }
  int v37 = v6 != 0;
  BOOL v38 = v36 >= a3;
  BOOL v39 = v36 == a3;
  int v40 = v36 >= a3;
  if (!v39) {
    int v37 = 0;
  }
  char v25 = 1;
  if (v38) {
    char v20 = 2;
  }
  else {
    char v20 = 1;
  }
  if (v40 != v37) {
    goto LABEL_70;
  }
LABEL_79:
  sub_1CB9FB5B0((uint64_t)v53);
  *(unsigned char *)(a1 + 80) |= v20 == 2;
  return v25 != 0;
}

uint64_t sub_1CBA10484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, int a6)
{
  uint64_t v261 = *MEMORY[0x1E4F143B8];
  int v241 = *(_DWORD *)(a1 + 56);
  unint64_t v10 = sub_1CB8F1DC4((unint64_t *)(a1 + 32));
  unsigned int v12 = v11;
  unint64_t v242 = sub_1CB8F1DC4((unint64_t *)(a1 + 40));
  unsigned int v14 = v13;
  uint64_t v236 = v12;
  if (v12 == 1) {
  uint64_t v237 = v14;
  }
  if (v14 == 1) {
  uint64_t v15 = *(void *)(a1 + 8);
  }
  int v16 = *(_DWORD *)(*(void *)(*(void *)a3 + 32) + 4);
  if (v16 < 0 && (uint64_t v17 = v16 & 0x7FFFFFFF, v17 < *(_DWORD *)(v15 + 432)))
  {
    uint64_t v248 = *(void *)(*(void *)(v15 + 424) + 8 * v17);
    if ((v248 & 0xFFFFFFFFFFFFFFF9) != 0 && (v248 & 6) == 2)
    {
      unsigned int v20 = sub_1CB8F1DC4((unint64_t *)&v248);
      if (v19 == 1) {
      uint64_t v248 = (8 * v20) | 1;
      }
      uint64_t v15 = *(void *)(a1 + 8);
    }
  }
  else
  {
    uint64_t v248 = 0;
  }
  if (a6) {
    uint64_t v21 = -1;
  }
  else {
    uint64_t v21 = 1;
  }
  sub_1CC73C210(*(_DWORD *)(*(void *)(*a4 + 32) + 4), v15, (uint64_t)&v255);
  unint64_t v243 = a4;
  *(void *)uint64_t v238 = v10;
  if ((_BYTE)v257)
  {
    if (v256 >= 0x41)
    {
      if (v255) {
        MEMORY[0x1D25D9CB0](v255, 0x1000C8000313F17);
      }
      goto LABEL_20;
    }
    unint64_t v35 = (uint64_t)(v255 << -(char)v256) >> -(char)v256;
    while (1)
    {
      uint64_t v249 = 0;
      uint64_t v36 = *(unsigned int *)(*(void *)(*(void *)a3 + 32) + 4);
      uint64_t v37 = *(void *)(a1 + 8);
      if ((v36 & 0x80000000) != 0) {
        BOOL v38 = (uint64_t *)(*(void *)(v37 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8);
      }
      else {
        BOOL v38 = (uint64_t *)(*(void *)(v37 + 272) + 8 * v36);
      }
      uint64_t v39 = *v38;
      if (!v39) {
        goto LABEL_41;
      }
      if ((*(unsigned char *)(v39 + 3) & 1) == 0)
      {
        uint64_t v39 = *(void *)(v39 + 24);
        if (!v39 || (*(unsigned char *)(v39 + 3) & 1) == 0) {
          goto LABEL_41;
        }
      }
      uint64_t v40 = *(void *)(v39 + 8);
      if (!v40) {
        goto LABEL_42;
      }
      if (**(_WORD **)(v40 + 16) != 45 || *(_DWORD *)(v40 + 40) != 3) {
        goto LABEL_41;
      }
      uint64_t v52 = *(void *)(v40 + 32);
      uint64_t v53 = *(unsigned int *)(v52 + 36);
      if ((v53 & 0x80000000) != 0) {
        int v54 = (uint64_t *)(*(void *)(v37 + 24) + 16 * (v53 & 0x7FFFFFFF) + 8);
      }
      else {
        int v54 = (uint64_t *)(*(void *)(v37 + 272) + 8 * v53);
      }
      uint64_t v55 = *v54;
      if (v55)
      {
        if (*(unsigned char *)(v55 + 3) & 1) != 0 || (uint64_t v55 = *(void *)(v55 + 24)) != 0 && (*(unsigned char *)(v55 + 3))
        {
          uint64_t v56 = *(void *)(v55 + 8);
          if (v56)
          {
            sub_1CC73C210(*(_DWORD *)(v52 + 68), *(void *)(a1 + 8), (uint64_t)&v255);
            if ((_BYTE)v257)
            {
              if (v256 < 0x41)
              {
                uint64_t v57 = (uint64_t)(v255 << -(char)v256) >> -(char)v256;
                uint64_t v249 = v57;
                goto LABEL_71;
              }
              if (v255) {
                MEMORY[0x1D25D9CB0](v255, 0x1000C8000313F17);
              }
            }
          }
        }
      }
      sub_1CC73C210(*(_DWORD *)(*(void *)(v40 + 32) + 36), v37, (uint64_t)&v255);
      if (!(_BYTE)v257) {
        goto LABEL_41;
      }
      if (v256 >= 0x41)
      {
        if (v255) {
          MEMORY[0x1D25D9CB0](v255, 0x1000C8000313F17);
        }
LABEL_41:
        LOBYTE(v40) = 0;
        goto LABEL_42;
      }
      uint64_t v57 = (uint64_t)(v255 << -(char)v256) >> -(char)v256;
      uint64_t v249 = v57;
      uint64_t v58 = *(unsigned int *)(*(void *)(v40 + 32) + 68);
      if ((v58 & 0x80000000) != 0) {
        uint64_t v59 = (uint64_t *)(*(void *)(v37 + 24) + 16 * (v58 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v59 = (uint64_t *)(*(void *)(v37 + 272) + 8 * v58);
      }
      uint64_t v60 = *v59;
      if (!v60) {
        goto LABEL_41;
      }
      if ((*(unsigned char *)(v60 + 3) & 1) == 0)
      {
        uint64_t v60 = *(void *)(v60 + 24);
        if (!v60 || (*(unsigned char *)(v60 + 3) & 1) == 0) {
          goto LABEL_41;
        }
      }
      uint64_t v56 = *(void *)(v60 + 8);
      if (!v56) {
        goto LABEL_41;
      }
LABEL_71:
      uint64_t v61 = *(void *)(a1 + 16);
      v35 += v57 * v21;
      unint64_t v255 = v248;
      LODWORD(v256) = 0;
      sub_1CC7362A8(v61, &v255, v35);
      *unint64_t v243 = v62;
      *(void *)a3 = v56;
      LOBYTE(v40) = 1;
LABEL_42:
      LODWORD(v244) = 0;
      int v247 = 0;
      uint64_t v41 = *(unsigned int *)(*(void *)(*(void *)a3 + 32) + 4);
      uint64_t v42 = *(void *)(a1 + 8);
      unint64_t v255 = (unint64_t)&v244;
      uint64_t v256 = &v249;
      uint64_t v257 = &v247;
      if ((v41 & 0x80000000) != 0) {
        unint64_t v43 = (uint64_t *)(*(void *)(v42 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8);
      }
      else {
        unint64_t v43 = (uint64_t *)(*(void *)(v42 + 272) + 8 * v41);
      }
      uint64_t v44 = *v43;
      if (!v44) {
        goto LABEL_48;
      }
      if ((*(unsigned char *)(v44 + 3) & 1) == 0)
      {
        uint64_t v44 = *(void *)(v44 + 24);
        if (!v44 || (*(unsigned char *)(v44 + 3) & 1) == 0) {
          goto LABEL_48;
        }
      }
      uint64_t v45 = *(void *)(v44 + 8);
      if (!v45 || **(_WORD **)(v45 + 16) != 45 || *(_DWORD *)(v45 + 40) != 3) {
        goto LABEL_48;
      }
      LODWORD(v251) = *(_DWORD *)(*(void *)(v45 + 32) + 36);
      int v46 = sub_1CBA14978((uint64_t)&v255, v42, (unsigned int *)&v251);
      uint64_t v47 = *(void *)(v45 + 32);
      if (v46)
      {
        *uint64_t v257 = *(_DWORD *)(v47 + 68);
LABEL_53:
        v35 += v249 * v21;
        uint64_t v48 = *(void *)(a1 + 16);
        unint64_t v255 = v248;
        LODWORD(v256) = 0;
        sub_1CC7362A8(v48, &v255, v35);
        *unint64_t v243 = v49;
        uint64_t v50 = *(void *)(a1 + 16);
        uint64_t v251 = v248;
        LODWORD(__src) = 0;
        LODWORD(v255) = v244;
        LODWORD(v257) = 0;
        LODWORD(v258) = v247;
        int v260 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v50 + 32))(v50, 45, &v251, 1, &v255, 2, 0);
        *(void *)a3 = v51;
      }
      else
      {
        *uint64_t v257 = *(_DWORD *)(v47 + 36);
        LODWORD(__dst) = *(_DWORD *)(v47 + 68);
        if (sub_1CBA14978((uint64_t)&v255, v42, (unsigned int *)&__dst)) {
          goto LABEL_53;
        }
LABEL_48:
        if ((v40 & 1) == 0) {
          break;
        }
      }
    }
  }
LABEL_20:
  unsigned int v22 = v243;
  uint64_t v23 = *v243;
  int v24 = a5;
  if (a5)
  {
    uint64_t v25 = *(unsigned int *)(*(void *)(v23 + 32) + 4);
    uint64_t v26 = *(void *)(a1 + 8);
    if ((v25 & 0x80000000) != 0) {
      unint64_t v27 = (uint64_t *)(*(void *)(v26 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8);
    }
    else {
      unint64_t v27 = (uint64_t *)(*(void *)(v26 + 272) + 8 * v25);
    }
    uint64_t v28 = *v27;
    if (v28)
    {
      if (*(unsigned char *)(v28 + 3)) {
        goto LABEL_25;
      }
      uint64_t v28 = *(void *)(v28 + 24);
      if (!v28)
      {
LABEL_272:
        unint64_t v30 = 0;
LABEL_273:
        unsigned int v22 = v243;
        int v24 = a5;
LABEL_28:
        if (v24 == 1)
        {
          unsigned int v246 = 1;
          __dst = 0;
          sub_1CBA12438((uint64_t)&v251, a1, v23, 0);
          if (v254)
          {
            uint64_t v31 = v251;
            int v32 = *(_DWORD *)(*(void *)(v251 + 32) + 4);
            if (v32 < 0 && (uint64_t v33 = *(void *)(a1 + 8), (v32 & 0x7FFFFFFFu) < *(_DWORD *)(v33 + 432))) {
              unint64_t v34 = *(void *)(*(void *)(v33 + 424) + 8 * (v32 & 0x7FFFFFFF));
            }
            else {
              unint64_t v34 = 0;
            }
            unint64_t v244 = v34;
            uint64_t v83 = sub_1CB8F1DC4(&v244);
            int v85 = v84;
            if (v83 != sub_1CB8F1DC4((unint64_t *)&v248) || v85 != v86)
            {
              unint64_t v88 = sub_1CB8F1DC4(&v244);
              if (v87 == 1) {
              unint64_t v90 = sub_1CB8F1DC4((unint64_t *)&v248);
              }
              if (v89 == 1) {
              if (v88 <= v90)
              }
              {
                int v93 = 0;
                goto LABEL_142;
              }
              uint64_t v91 = *(void *)(a1 + 16);
              uint64_t v249 = v248;
              int v250 = 0;
              LODWORD(v255) = v32;
              LODWORD(v257) = 0;
              (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v91 + 32))(v91, 119, &v249, 1, &v255, 1, 0);
              uint64_t v31 = v92;
            }
            if (v246 > 0x40 || v253 > 0x40)
            {
              llvm::APInt::reallocate((uint64_t)&__dst, v253);
              int v24 = a5;
              if (v246 <= 0x40) {
                __dst = __src;
              }
              else {
                memcpy(__dst, __src, (((unint64_t)v246 + 63) >> 3) & 0x3FFFFFF8);
              }
              int v93 = 1;
              uint64_t v23 = v31;
LABEL_143:
              unsigned int v22 = v243;
              if (v253 >= 0x41 && __src)
              {
                MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                if ((v93 & 1) == 0) {
                  goto LABEL_216;
                }
                goto LABEL_148;
              }
              if (v93)
              {
LABEL_148:
                uint64_t v103 = *(unsigned int *)(*(void *)(v23 + 32) + 4);
                if (v30)
                {
                  uint64_t v104 = *(void *)(a1 + 16);
                  uint64_t v251 = v248;
                  LODWORD(__src) = 0;
                  LODWORD(v255) = v103;
                  LODWORD(v257) = 0;
                  uint64_t v249 = v248;
                  int v250 = 0;
                  uint64_t v258 = sub_1CC7362A8(v104, (unint64_t *)&v249, (int)v30);
                  uint64_t v259 = v105;
                  int v260 = 1;
                  uint64_t v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v104 + 32))(v104, 127, &v251, 1, &v255, 2, 0);
                  unsigned int v108 = v107;
                  uint64_t v109 = *(void *)(a1 + 8);
                  uint64_t v110 = *(void **)(a1 + 16);
                  goto LABEL_156;
                }
                uint64_t v109 = *(void *)(a1 + 8);
                if ((v103 & 0x80000000) != 0) {
                  uint64_t v111 = (uint64_t *)(*(void *)(v109 + 24) + 16 * (v103 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v111 = (uint64_t *)(*(void *)(v109 + 272) + 8 * v103);
                }
                uint64_t v112 = *v111;
                if (!v112) {
                  goto LABEL_262;
                }
                if (*(unsigned char *)(v112 + 3)) {
                  goto LABEL_154;
                }
                uint64_t v112 = *(void *)(v112 + 24);
                if (!v112)
                {
                  unsigned int v108 = 0;
                  int v24 = a5;
                  goto LABEL_155;
                }
                int v24 = a5;
                if (*(unsigned char *)(v112 + 3)) {
LABEL_154:
                }
                  unsigned int v108 = *(uint64_t **)(v112 + 8);
                else {
LABEL_262:
                }
                  unsigned int v108 = 0;
LABEL_155:
                uint64_t v110 = *(void **)(a1 + 16);
                uint64_t v106 = v110[1];
LABEL_156:
                uint64_t v113 = v248;
                int v114 = *(_DWORD *)(*(void *)(*(void *)a3 + 32) + 4);
                if (v114 < 0 && (v114 & 0x7FFFFFFFu) < *(_DWORD *)(v109 + 432))
                {
                  unint64_t v115 = *(void *)(*(void *)(v109 + 424) + 8 * (v114 & 0x7FFFFFFF));
                  uint64_t v249 = v115;
                  if ((v115 & 0xFFFFFFFFFFFFFFF9) != 0 && (v115 & 6) == 2)
                  {
                    unsigned int v117 = sub_1CB8F1DC4((unint64_t *)&v249);
                    if (v116 == 1) {
                    uint64_t v251 = (8 * v117) | 1;
                    }
                    LODWORD(__src) = 0;
                    LODWORD(v255) = v114;
                    LODWORD(v257) = 0;
                    (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*v110 + 32))(v110, 80, &v251, 1, &v255, 1, 0);
                    int v114 = *(_DWORD *)(*(void *)(v118 + 32) + 4);
                    int v24 = a5;
                  }
                }
                uint64_t v251 = v113;
                LODWORD(__src) = 0;
                unint64_t v255 = v106;
                uint64_t v256 = v108;
                LODWORD(v257) = 1;
                LODWORD(v258) = v114;
                int v260 = 0;
                (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*v110 + 32))(v110, 45, &v251, 1, &v255, 2, 0);
                *(void *)a3 = v119;
                uint64_t v120 = *(void *)(a1 + 16);
                unint64_t v255 = v248;
                LODWORD(v256) = 0;
                LODWORD(__src) = v246;
                if (v246 > 0x40) {
                  operator new[]();
                }
                if (v30 >= v246) {
                  int v121 = v246;
                }
                else {
                  int v121 = v30;
                }
                uint64_t v122 = (void)__dst << v121;
                if (v246 == v121) {
                  uint64_t v122 = 0;
                }
                if (v246) {
                  unint64_t v123 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v246;
                }
                else {
                  unint64_t v123 = 0;
                }
                uint64_t v251 = v123 & v122;
                sub_1CC7362A8(v120, &v255, (uint64_t)((v123 & v122) << -(char)v246) >> -(char)v246);
                unsigned int v22 = v243;
                *unint64_t v243 = v124;
              }
LABEL_216:
              if (v246 >= 0x41 && __dst) {
                MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
              }
              goto LABEL_320;
            }
            __dst = __src;
            unsigned int v246 = v253;
            int v93 = 1;
            uint64_t v23 = v31;
LABEL_142:
            int v24 = a5;
            goto LABEL_143;
          }
          if (v10 <= v242) {
            goto LABEL_216;
          }
          int v94 = **(unsigned __int16 **)(v23 + 16);
          if (v94 != 126)
          {
LABEL_206:
            if (v94 != 124) {
              goto LABEL_216;
            }
            uint64_t v139 = *(unsigned int *)(*(void *)(v23 + 32) + 36);
            uint64_t v140 = *(void *)(a1 + 8);
            if ((v139 & 0x80000000) != 0) {
              v141 = (uint64_t *)(*(void *)(v140 + 24) + 16 * (v139 & 0x7FFFFFFF) + 8);
            }
            else {
              v141 = (uint64_t *)(*(void *)(v140 + 272) + 8 * v139);
            }
            uint64_t v142 = *v141;
            if (!v142) {
              goto LABEL_276;
            }
            if (*(unsigned char *)(v142 + 3)) {
              goto LABEL_211;
            }
            uint64_t v142 = *(void *)(v142 + 24);
            if (!v142)
            {
              uint64_t v143 = 0;
              unsigned int v22 = v243;
              int v24 = a5;
              goto LABEL_212;
            }
            unsigned int v22 = v243;
            int v24 = a5;
            if (*(unsigned char *)(v142 + 3)) {
LABEL_211:
            }
              uint64_t v143 = *(void *)(v142 + 8);
            else {
LABEL_276:
            }
              uint64_t v143 = 0;
LABEL_212:
            sub_1CBA12438((uint64_t)&v255, a1, v143, 0x100001000);
            if (!(_BYTE)v258) {
              goto LABEL_216;
            }
            unsigned int v101 = v257;
            if (v257 >= 0x41) {
              operator new[]();
            }
            uint64_t v102 = v256;
            if (v246 >= 0x41)
            {
              llvm::APInt::reallocate((uint64_t)&__dst, v257);
              if (v246 <= 0x40) {
                __dst = v102;
              }
              else {
                memcpy(__dst, v102, (((unint64_t)v246 + 63) >> 3) & 0x3FFFFFF8);
              }
            }
            else
            {
              __dst = v256;
              unsigned int v246 = v257;
            }
            if (v236 == 1) {
            llvm::APInt::sext((uint64_t)&__dst, v238[0], (uint64_t)&v255);
            }
            if (v246 >= 0x41 && __dst) {
              MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
            }
            __dst = (void *)v255;
            unsigned int v246 = v256;
            uint64_t v148 = *(void *)(a1 + 16);
            uint64_t v249 = v248;
            int v250 = 0;
            LODWORD(v255) = *(_DWORD *)(*(void *)(v143 + 32) + 36);
            LODWORD(v257) = 0;
            unint64_t v147 = *(void (**)(void))(*(void *)v148 + 32);
LABEL_241:
            v147();
            uint64_t v23 = v149;
            if (v101 >= 0x41 && v102) {
              MEMORY[0x1D25D9CB0](v102, 0x1000C8000313F17);
            }
            goto LABEL_148;
          }
          uint64_t v95 = *(unsigned int *)(*(void *)(v23 + 32) + 36);
          uint64_t v96 = *(void *)(a1 + 8);
          if ((v95 & 0x80000000) != 0) {
            uint64_t v97 = (uint64_t *)(*(void *)(v96 + 24) + 16 * (v95 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v97 = (uint64_t *)(*(void *)(v96 + 272) + 8 * v95);
          }
          uint64_t v98 = *v97;
          if (!v98) {
            goto LABEL_269;
          }
          if (*(unsigned char *)(v98 + 3)) {
            goto LABEL_133;
          }
          uint64_t v98 = *(void *)(v98 + 24);
          if (!v98)
          {
            uint64_t v99 = 0;
            unsigned int v22 = v243;
            int v24 = a5;
            goto LABEL_134;
          }
          unsigned int v22 = v243;
          int v24 = a5;
          if (*(unsigned char *)(v98 + 3)) {
LABEL_133:
          }
            uint64_t v99 = *(void *)(v98 + 8);
          else {
LABEL_269:
          }
            uint64_t v99 = 0;
LABEL_134:
          sub_1CBA12438((uint64_t)&v255, a1, v99, 0x100000800);
          if ((_BYTE)v258)
          {
            unsigned int v101 = v257;
            if (v257 >= 0x41) {
              operator new[]();
            }
            uint64_t v102 = v256;
            if (v246 >= 0x41)
            {
              llvm::APInt::reallocate((uint64_t)&__dst, v257);
              if (v246 <= 0x40) {
                __dst = v102;
              }
              else {
                memcpy(__dst, v102, (((unint64_t)v246 + 63) >> 3) & 0x3FFFFFF8);
              }
            }
            else
            {
              __dst = v256;
              unsigned int v246 = v257;
            }
            if (v236 == 1) {
            if (v10 > 0x40)
            }
            {
              if (v246 != v10) {
                operator new[]();
              }
              sub_1CD0463BC((uint64_t)&v255, (uint64_t)&__dst);
            }
            else
            {
              LODWORD(v256) = v10;
              if (v10) {
                unint64_t v145 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
              }
              else {
                unint64_t v145 = 0;
              }
              unint64_t v255 = v145 & (unint64_t)__dst;
            }
            if (v246 >= 0x41 && __dst) {
              MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
            }
            __dst = (void *)v255;
            unsigned int v246 = v256;
            uint64_t v146 = *(void *)(a1 + 16);
            uint64_t v249 = v248;
            int v250 = 0;
            LODWORD(v255) = *(_DWORD *)(*(void *)(v99 + 32) + 36);
            LODWORD(v257) = 0;
            unint64_t v147 = *(void (**)(void))(*(void *)v146 + 32);
            goto LABEL_241;
          }
          int v94 = **(unsigned __int16 **)(v23 + 16);
          goto LABEL_206;
        }
        if (v24 != 2 || v10 <= v242 || !sub_1CBA125E8(v23, 0)) {
          goto LABEL_320;
        }
        if (*(unsigned char *)(*(void *)(a1 + 24) + 318)) {
          goto LABEL_100;
        }
        unint64_t v64 = sub_1CB8F1DC4((unint64_t *)&v248);
        if (v63 == 1) {
        if (v64 < 0x40)
        }
        {
LABEL_100:
          uint64_t v65 = *(unsigned int **)(v23 + 32);
          uint64_t v66 = *(void *)(a1 + 8);
        }
        else
        {
          uint64_t v66 = *(void *)(a1 + 8);
          uint64_t v65 = *(unsigned int **)(v23 + 32);
          uint64_t v129 = v65[1];
          if ((v129 & 0x80000000) != 0) {
            uint64_t v130 = (uint64_t *)(*(void *)(v66 + 24) + 16 * (v129 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v130 = (uint64_t *)(*(void *)(v66 + 272) + 8 * v129);
          }
          uint64_t v131 = *v130;
          if (!v131) {
            goto LABEL_320;
          }
          while ((*(unsigned char *)(v131 + 3) & 1) != 0)
          {
            uint64_t v131 = *(void *)(v131 + 24);
            if (!v131) {
              goto LABEL_320;
            }
          }
          while (1)
          {
            uint64_t v131 = *(void *)(v131 + 24);
            if (!v131) {
              break;
            }
            if ((*(unsigned char *)(v131 + 3) & 1) == 0) {
              goto LABEL_320;
            }
          }
          uint64_t v132 = *(unsigned int *)(*(void *)(a2 + 32) + 4);
          v133 = (uint64_t *)((v132 & 0x80000000) != 0
                           ? *(void *)(v66 + 24) + 16 * (v132 & 0x7FFFFFFF) + 8
                           : *(void *)(v66 + 272) + 8 * v132);
          uint64_t v134 = *v133;
          if (!v134) {
            goto LABEL_320;
          }
          while ((*(unsigned char *)(v134 + 3) & 1) != 0)
          {
            uint64_t v134 = *(void *)(v134 + 24);
            if (!v134) {
              goto LABEL_320;
            }
          }
          while (1)
          {
            uint64_t v134 = *(void *)(v134 + 24);
            if (!v134) {
              break;
            }
            if ((*(unsigned char *)(v134 + 3) & 1) == 0) {
              goto LABEL_320;
            }
          }
        }
        uint64_t v67 = v65[9];
        uint64_t v68 = v65[17];
        if ((v67 & 0x80000000) != 0) {
          int v69 = (uint64_t *)(*(void *)(v66 + 24) + 16 * (v67 & 0x7FFFFFFF) + 8);
        }
        else {
          int v69 = (uint64_t *)(*(void *)(v66 + 272) + 8 * v67);
        }
        uint64_t v70 = *v69;
        if (v70)
        {
          if (*(unsigned char *)(v70 + 3))
          {
LABEL_105:
            uint64_t v71 = *(void *)(v70 + 8);
            goto LABEL_106;
          }
          uint64_t v70 = *(void *)(v70 + 24);
          if (!v70)
          {
            uint64_t v71 = 0;
            int v24 = a5;
LABEL_106:
            if ((v68 & 0x80000000) != 0) {
              uint64_t v72 = (uint64_t *)(*(void *)(v66 + 24) + 16 * (v68 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v72 = (uint64_t *)(*(void *)(v66 + 272) + 8 * v68);
            }
            uint64_t v73 = *v72;
            if (v73)
            {
              if (*(unsigned char *)(v73 + 3))
              {
LABEL_110:
                uint64_t v74 = *(void *)(v73 + 8);
                goto LABEL_111;
              }
              uint64_t v73 = *(void *)(v73 + 24);
              if (!v73)
              {
                uint64_t v74 = 0;
                int v24 = a5;
LABEL_111:
                if (v237 == 1)
                {
                  unint64_t v75 = v242;
                  if (sub_1CBA0FEA0(a1, v71, v242)) {
                    goto LABEL_113;
                  }
                }
                else
                {
                  unint64_t v75 = v242;
                  if (sub_1CBA0FEA0(a1, v71, v242))
                  {
LABEL_113:
                    if (v30)
                    {
                      uint64_t v76 = *(void *)(a1 + 16);
                      uint64_t v251 = v248;
                      LODWORD(__src) = 0;
                      LODWORD(v255) = v67;
                      LODWORD(v257) = 0;
                      uint64_t v249 = v248;
                      int v250 = 0;
                      unint64_t v77 = (int)v30;
                      uint64_t v258 = sub_1CC7362A8(v76, (unint64_t *)&v249, (int)v30);
                      uint64_t v259 = v78;
                      int v260 = 1;
                      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v76 + 32))(v76, 127, &v251, 1, &v255, 2, 0);
                      uint64_t v80 = v79;
                      unint64_t v81 = v248;
                      uint64_t v82 = *(void *)(a1 + 16);
                      uint64_t v251 = v248;
                      LODWORD(__src) = 0;
                      LODWORD(v255) = v68;
LABEL_297:
                      LODWORD(v257) = 0;
                      uint64_t v249 = v81;
                      int v250 = 0;
                      uint64_t v258 = sub_1CC7362A8(v82, (unint64_t *)&v249, v77);
                      uint64_t v259 = v155;
                      int v260 = 1;
                      uint64_t v156 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v82 + 32))(v82, 127, &v251, 1, &v255, 2, 0);
                      uint64_t v158 = v157;
                      uint64_t v135 = *(void *)(a1 + 8);
                      uint64_t v159 = *(void **)(a1 + 16);
LABEL_309:
                      uint64_t v163 = v248;
                      int v164 = *(_DWORD *)(*(void *)(*(void *)a3 + 32) + 4);
                      if (v164 < 0 && (v164 & 0x7FFFFFFFu) < *(_DWORD *)(v135 + 432))
                      {
                        uint64_t v249 = *(void *)(*(void *)(v135 + 424) + 8 * (v164 & 0x7FFFFFFF));
                        if ((v249 & 0xFFFFFFFFFFFFFFF9) != 0 && (v249 & 6) == 2)
                        {
                          unsigned int v167 = sub_1CB8F1DC4((unint64_t *)&v249);
                          if (v166 == 1) {
                          uint64_t v251 = (8 * v167) | 1;
                          }
                          LODWORD(__src) = 0;
                          LODWORD(v255) = v164;
                          LODWORD(v257) = 0;
                          (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*v159 + 32))(v159, 80, &v251, 1, &v255, 1, 0);
                          int v164 = *(_DWORD *)(*(void *)(v168 + 32) + 4);
                        }
                      }
                      uint64_t v251 = v163;
                      LODWORD(__src) = 0;
                      LODWORD(v255) = v164;
                      LODWORD(v257) = 0;
                      uint64_t v258 = v156;
                      uint64_t v259 = v158;
                      int v260 = 1;
                      (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*v159 + 32))(v159, 45, &v251, 1, &v255, 2, 0);
                      *(void *)a3 = v169;
                      *unint64_t v243 = v80;
                      unsigned int v22 = v243;
                      int v24 = a5;
                      goto LABEL_320;
                    }
                    uint64_t v135 = *(void *)(a1 + 8);
                    if ((v67 & 0x80000000) != 0) {
                      uint64_t v136 = (uint64_t *)(*(void *)(v135 + 24) + 16 * (v67 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      uint64_t v136 = (uint64_t *)(*(void *)(v135 + 272) + 8 * v67);
                    }
                    uint64_t v137 = *v136;
                    if (v137
                      && ((*(unsigned char *)(v137 + 3) & 1) != 0
                       || (uint64_t v137 = *(void *)(v137 + 24)) != 0 && (*(unsigned char *)(v137 + 3) & 1) != 0))
                    {
                      uint64_t v80 = *(void *)(v137 + 8);
                      if ((v68 & 0x80000000) == 0)
                      {
LABEL_280:
                        uint64_t v150 = (uint64_t *)(*(void *)(v135 + 272) + 8 * v68);
                        goto LABEL_305;
                      }
                    }
                    else
                    {
                      uint64_t v80 = 0;
                      if ((v68 & 0x80000000) == 0) {
                        goto LABEL_280;
                      }
                    }
                    uint64_t v138 = v68 & 0x7FFFFFFF;
                    goto LABEL_304;
                  }
                }
                unint64_t v242 = v75;
                unsigned int v22 = v243;
                if (sub_1CBA0FEA0(a1, v74, v75))
                {
                  if (v30)
                  {
                    uint64_t v152 = *(void *)(a1 + 16);
                    uint64_t v251 = v248;
                    LODWORD(__src) = 0;
                    LODWORD(v255) = v68;
                    LODWORD(v257) = 0;
                    uint64_t v249 = v248;
                    int v250 = 0;
                    unint64_t v77 = (int)v30;
                    uint64_t v258 = sub_1CC7362A8(v152, (unint64_t *)&v249, (int)v30);
                    uint64_t v259 = v153;
                    int v260 = 1;
                    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v152 + 32))(v152, 127, &v251, 1, &v255, 2, 0);
                    uint64_t v80 = v154;
                    unint64_t v81 = v248;
                    uint64_t v82 = *(void *)(a1 + 16);
                    uint64_t v251 = v248;
                    LODWORD(__src) = 0;
                    LODWORD(v255) = v67;
                    goto LABEL_297;
                  }
                  uint64_t v135 = *(void *)(a1 + 8);
                  if ((v68 & 0x80000000) != 0) {
                    uint64_t v160 = (uint64_t *)(*(void *)(v135 + 24) + 16 * (v68 & 0x7FFFFFFF) + 8);
                  }
                  else {
                    uint64_t v160 = (uint64_t *)(*(void *)(v135 + 272) + 8 * v68);
                  }
                  uint64_t v161 = *v160;
                  if (v161
                    && ((*(unsigned char *)(v161 + 3) & 1) != 0
                     || (uint64_t v161 = *(void *)(v161 + 24)) != 0 && (*(unsigned char *)(v161 + 3) & 1) != 0))
                  {
                    uint64_t v80 = *(void *)(v161 + 8);
                    if ((v67 & 0x80000000) == 0)
                    {
LABEL_469:
                      uint64_t v150 = (uint64_t *)(*(void *)(v135 + 272) + 8 * v67);
LABEL_305:
                      uint64_t v162 = *v150;
                      if (v162
                        && ((*(unsigned char *)(v162 + 3) & 1) != 0
                         || (uint64_t v162 = *(void *)(v162 + 24)) != 0 && (*(unsigned char *)(v162 + 3) & 1) != 0))
                      {
                        uint64_t v158 = *(void *)(v162 + 8);
                      }
                      else
                      {
                        uint64_t v158 = 0;
                      }
                      uint64_t v159 = *(void **)(a1 + 16);
                      uint64_t v156 = v159[1];
                      goto LABEL_309;
                    }
                  }
                  else
                  {
                    uint64_t v80 = 0;
                    if ((v67 & 0x80000000) == 0) {
                      goto LABEL_469;
                    }
                  }
                  uint64_t v138 = v67 & 0x7FFFFFFF;
LABEL_304:
                  uint64_t v150 = (uint64_t *)(*(void *)(v135 + 24) + 16 * v138 + 8);
                  goto LABEL_305;
                }
LABEL_320:
                uint64_t v23 = *v22;
                goto LABEL_321;
              }
              int v24 = a5;
              if (*(unsigned char *)(v73 + 3)) {
                goto LABEL_110;
              }
            }
            uint64_t v74 = 0;
            goto LABEL_111;
          }
          int v24 = a5;
          if (*(unsigned char *)(v70 + 3)) {
            goto LABEL_105;
          }
        }
        uint64_t v71 = 0;
        goto LABEL_106;
      }
      unsigned int v22 = v243;
      int v24 = a5;
      if (*(unsigned char *)(v28 + 3))
      {
LABEL_25:
        uint64_t v29 = *(void *)(v28 + 8);
        if (v29 && **(_WORD **)(v29 + 16) == 127 && *(_DWORD *)(v29 + 40) == 3)
        {
          uint64_t v125 = *(void *)(v29 + 32);
          uint64_t v126 = *(unsigned int *)(v125 + 36);
          if ((v126 & 0x80000000) != 0) {
            int v127 = (uint64_t *)(*(void *)(v26 + 24) + 16 * (v126 & 0x7FFFFFFF) + 8);
          }
          else {
            int v127 = (uint64_t *)(*(void *)(v26 + 272) + 8 * v126);
          }
          uint64_t v128 = *v127;
          if (!v128) {
            goto LABEL_265;
          }
          if ((*(unsigned char *)(v128 + 3) & 1) == 0)
          {
            uint64_t v128 = *(void *)(v128 + 24);
            if (!v128)
            {
              unint64_t v30 = 0;
              uint64_t v23 = 0;
              goto LABEL_273;
            }
            unsigned int v22 = v243;
            int v24 = a5;
            if ((*(unsigned char *)(v128 + 3) & 1) == 0)
            {
LABEL_265:
              unint64_t v30 = 0;
              uint64_t v23 = 0;
              goto LABEL_28;
            }
          }
          uint64_t v23 = *(void *)(v128 + 8);
          if (v23)
          {
            sub_1CC73C210(*(_DWORD *)(v125 + 68), v26, (uint64_t)&v255);
            if ((_BYTE)v257)
            {
              if (v256 < 0x41)
              {
                unint64_t v30 = ((uint64_t)(v255 << -(char)v256) >> -(char)v256);
                goto LABEL_28;
              }
              if (v255) {
                MEMORY[0x1D25D9CB0](v255, 0x1000C8000313F17);
              }
              goto LABEL_272;
            }
          }
        }
      }
    }
    unint64_t v30 = 0;
    goto LABEL_28;
  }
LABEL_321:
  if (**(_WORD **)(v23 + 16) == 127)
  {
    sub_1CC73C210(*(_DWORD *)(*(void *)(v23 + 32) + 68), *(void *)(a1 + 8), (uint64_t)&v255);
    if ((_BYTE)v257)
    {
      if (v256 >= 0x41)
      {
        if (v255) {
          MEMORY[0x1D25D9CB0](v255, 0x1000C8000313F17);
        }
        unsigned int v22 = v243;
        int v24 = a5;
      }
      else if ((uint64_t)(v255 << -(char)v256) >> -(char)v256 == *(void *)(a1 + 56))
      {
        uint64_t v170 = *(void *)(a1 + 8);
        uint64_t v171 = *(unsigned int *)(*(void *)(v23 + 32) + 36);
        if ((v171 & 0x80000000) != 0) {
          int v172 = (uint64_t *)(*(void *)(v170 + 24) + 16 * (v171 & 0x7FFFFFFF) + 8);
        }
        else {
          int v172 = (uint64_t *)(*(void *)(v170 + 272) + 8 * v171);
        }
        unint64_t v173 = v242;
        uint64_t v174 = *v172;
        if (!v174) {
          goto LABEL_330;
        }
        if (*(unsigned char *)(v174 + 3)) {
          goto LABEL_329;
        }
        uint64_t v174 = *(void *)(v174 + 24);
        if (!v174)
        {
          unint64_t v173 = v242;
          unsigned int v22 = v243;
          goto LABEL_330;
        }
        unint64_t v173 = v242;
        unsigned int v22 = v243;
        if (*(unsigned char *)(v174 + 3)) {
LABEL_329:
        }
          uint64_t v174 = *(void *)(v174 + 8);
        else {
          uint64_t v174 = 0;
        }
LABEL_330:
        uint64_t *v22 = v174;
LABEL_378:
        BOOL v182 = 1;
        goto LABEL_379;
      }
    }
  }
  uint64_t v175 = (1 << v241);
  uint64_t v176 = *v22;
  if (**(unsigned __int16 **)(*v22 + 16) - 47 <= 1)
  {
    sub_1CC73C210(*(_DWORD *)(*(void *)(v176 + 32) + 68), *(void *)(a1 + 8), (uint64_t)&v255);
    if ((_BYTE)v257)
    {
      if (v256 >= 0x41)
      {
        if (v255) {
          MEMORY[0x1D25D9CB0](v255, 0x1000C8000313F17);
        }
        unsigned int v22 = v243;
        goto LABEL_336;
      }
      uint64_t v189 = (uint64_t)(v255 << -(char)v256) >> -(char)v256;
      int v190 = **(unsigned __int16 **)(v176 + 16);
      if (v189 == v175)
      {
        uint64_t v191 = *(void *)(a1 + 8);
        uint64_t v192 = *(void *)(v176 + 32);
        if (v190 == 48)
        {
          int v193 = *(_DWORD *)(v192 + 4);
          unint64_t v173 = v242;
          if (v193 < 0 && (uint64_t v194 = v193 & 0x7FFFFFFF, v194 < *(_DWORD *)(v191 + 432))) {
            uint64_t v195 = *(void *)(*(void *)(v191 + 424) + 8 * v194);
          }
          else {
            uint64_t v195 = 0;
          }
          uint64_t v203 = *(void *)(a1 + 16);
          uint64_t v251 = v195;
          LODWORD(__src) = 0;
          LODWORD(v255) = *(_DWORD *)(v192 + 36);
          LODWORD(v257) = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v203 + 32))(v203, 124, &v251, 1, &v255, 1, 0);
          goto LABEL_377;
        }
        uint64_t v200 = *(unsigned int *)(v192 + 36);
        unint64_t v173 = v242;
        if ((v200 & 0x80000000) != 0) {
          uint64_t v201 = (uint64_t *)(*(void *)(v191 + 24) + 16 * (v200 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v201 = (uint64_t *)(*(void *)(v191 + 272) + 8 * v200);
        }
        uint64_t v202 = *v201;
        if (!v202) {
          goto LABEL_461;
        }
        if (*(unsigned char *)(v202 + 3))
        {
LABEL_374:
          uint64_t v188 = *(void *)(v202 + 8);
          goto LABEL_377;
        }
        uint64_t v202 = *(void *)(v202 + 24);
        if (v202)
        {
          unint64_t v173 = v242;
          unsigned int v22 = v243;
          if (*(unsigned char *)(v202 + 3)) {
            goto LABEL_374;
          }
LABEL_461:
          uint64_t v188 = 0;
          goto LABEL_377;
        }
        uint64_t v188 = 0;
LABEL_443:
        unint64_t v173 = v242;
        unsigned int v22 = v243;
        goto LABEL_377;
      }
      if (v24 != 2 || (v189 & (v175 - 1)) != 0) {
        goto LABEL_336;
      }
      uint64_t v196 = *(void *)(a1 + 8);
      uint64_t v197 = *(unsigned int *)(*(void *)(*(void *)a1 + 32) + 4);
      if ((unint64_t)(v197 - 1) > 0x3FFFFFFE)
      {
        uint64_t v210 = *(unsigned int *)(*(void *)(*(void *)a1 + 32) + 4);
        do
        {
          uint64_t v211 = v210;
          if ((v210 & 0x80000000) != 0) {
            uint64_t v212 = (uint64_t *)(*(void *)(v196 + 24) + 16 * (v210 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v212 = (uint64_t *)(*(void *)(v196 + 272) + 8 * v210);
          }
          uint64_t v213 = *v212;
          if (!v213) {
            break;
          }
          if ((*(unsigned char *)(v213 + 3) & 1) == 0)
          {
            uint64_t v213 = *(void *)(v213 + 24);
            if (!v213 || (*(unsigned char *)(v213 + 3) & 1) == 0) {
              break;
            }
          }
          uint64_t v214 = *(void *)(v213 + 8);
          if (!v214) {
            break;
          }
          if ((v210 & 0x80000000) != 0) {
            uint64_t v215 = (uint64_t *)(*(void *)(v196 + 24) + 16 * (v210 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v215 = (uint64_t *)(*(void *)(v196 + 272) + 8 * v210);
          }
          unsigned int v22 = v243;
          uint64_t v216 = *v215;
          if (!v216) {
            goto LABEL_336;
          }
          while ((*(unsigned char *)(v216 + 3) & 1) != 0)
          {
            uint64_t v216 = *(void *)(v216 + 24);
            if (!v216) {
              goto LABEL_336;
            }
          }
          while (1)
          {
            uint64_t v216 = *(void *)(v216 + 24);
            if (!v216) {
              break;
            }
            if ((*(unsigned char *)(v216 + 3) & 1) == 0) {
              goto LABEL_336;
            }
          }
          int v217 = **(unsigned __int16 **)(v214 + 16);
          if (v217 == 81)
          {
            if ((v211 & 0x80000000) != 0
              && (v211 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v196 + 432))
            {
              unint64_t v218 = *(void *)(*(void *)(v196 + 424) + 8 * (v211 & 0x7FFFFFFF));
            }
            else
            {
              unint64_t v218 = 0;
            }
            uint64_t v210 = *(unsigned int *)(*(void *)(v214 + 32) + 36);
            unint64_t v255 = v218;
            if ((v210 & 0x80000000) != 0
              && (v210 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v196 + 432))
            {
              uint64_t v219 = *(void *)(*(void *)(v196 + 424) + 8 * (v210 & 0x7FFFFFFF));
            }
            else
            {
              uint64_t v219 = 0;
            }
            uint64_t v251 = v219;
            uint64_t v240 = sub_1CB8F1DC4(&v255);
            int v221 = v220;
            if (v240 != sub_1CB8F1DC4((unint64_t *)&v251) || v221 != v222) {
              goto LABEL_435;
            }
          }
          else
          {
            if (v217 != 19) {
              goto LABEL_435;
            }
            uint64_t v210 = *(unsigned int *)(*(void *)(v214 + 32) + 36);
          }
          uint64_t v197 = v211;
        }
        while ((unint64_t)(v210 - 1) > 0x3FFFFFFE);
        if ((v197 & 0x80000000) != 0)
        {
          uint64_t v198 = (uint64_t *)(*(void *)(v196 + 24) + 16 * (v197 & 0x7FFFFFFF) + 8);
          unsigned int v22 = v243;
          goto LABEL_366;
        }
        unsigned int v22 = v243;
      }
      uint64_t v198 = (uint64_t *)(*(void *)(v196 + 272) + 8 * v197);
LABEL_366:
      uint64_t v199 = *v198;
      if (!v199) {
        goto LABEL_336;
      }
      while ((*(unsigned char *)(v199 + 3) & 1) != 0)
      {
        uint64_t v199 = *(void *)(v199 + 24);
        if (!v199) {
          goto LABEL_336;
        }
      }
      unsigned int v22 = v243;
      while (1)
      {
        uint64_t v199 = *(void *)(v199 + 24);
        if (!v199) {
          break;
        }
        if ((*(unsigned char *)(v199 + 3) & 1) == 0) {
          goto LABEL_336;
        }
      }
LABEL_435:
      uint64_t v223 = *(void *)(v176 + 32);
      int v224 = *(_DWORD *)(v223 + 4);
      unint64_t v225 = v189 / v175;
      if (v224 < 0
        && (uint64_t v226 = *(void *)(a1 + 8), v227 = v224 & 0x7FFFFFFF, v227 < *(_DWORD *)(v226 + 432)))
      {
        uint64_t v228 = *(void *)(*(void *)(v226 + 424) + 8 * v227);
      }
      else
      {
        uint64_t v228 = 0;
      }
      uint64_t v229 = *(void *)(a1 + 16);
      if (v190 == 48)
      {
        uint64_t v251 = v228;
        LODWORD(__src) = 0;
        LODWORD(v255) = *(_DWORD *)(v223 + 36);
        LODWORD(v257) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v229 + 32))(v229, 124, &v251, 1, &v255, 1, 0);
        uint64_t v229 = *(void *)(a1 + 16);
        int v231 = *(_DWORD *)(*(void *)(v230 + 32) + 4);
        uint64_t v249 = v228;
        int v250 = 0;
        uint64_t v232 = sub_1CC7362A8(v229, (unint64_t *)&v249, v225);
        uint64_t v251 = v228;
        LODWORD(__src) = 0;
        LODWORD(v255) = v231;
      }
      else
      {
        int v234 = *(_DWORD *)(v223 + 36);
        uint64_t v249 = v228;
        int v250 = 0;
        uint64_t v232 = sub_1CC7362A8(v229, (unint64_t *)&v249, v225);
        uint64_t v251 = v228;
        LODWORD(__src) = 0;
        LODWORD(v255) = v234;
      }
      LODWORD(v257) = 0;
      uint64_t v258 = v232;
      uint64_t v259 = v233;
      int v260 = 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v229 + 32))(v229, 47, &v251, 1, &v255, 2, 0);
      goto LABEL_443;
    }
  }
LABEL_336:
  uint64_t v177 = *(unsigned int *)(*(void *)(*v22 + 32) + 4);
  uint64_t v178 = *(void *)(a1 + 8);
  if ((v177 & 0x80000000) != 0) {
    v179 = (uint64_t *)(*(void *)(v178 + 24) + 16 * (v177 & 0x7FFFFFFF) + 8);
  }
  else {
    v179 = (uint64_t *)(*(void *)(v178 + 272) + 8 * v177);
  }
  unint64_t v173 = v242;
  uint64_t v180 = *v179;
  if (v180)
  {
    if ((*(unsigned char *)(v180 + 3) & 1) == 0)
    {
      uint64_t v180 = *(void *)(v180 + 24);
      if (!v180)
      {
        unint64_t v173 = v242;
        unsigned int v22 = v243;
        goto LABEL_344;
      }
      unint64_t v173 = v242;
      unsigned int v22 = v243;
      if ((*(unsigned char *)(v180 + 3) & 1) == 0) {
        goto LABEL_344;
      }
    }
    uint64_t v181 = *(void *)(v180 + 8);
    if (v181 && **(_WORD **)(v181 + 16) == 81 && *(_DWORD *)(v181 + 40) == 2) {
      LODWORD(v177) = *(_DWORD *)(*(void *)(v181 + 32) + 36);
    }
  }
LABEL_344:
  sub_1CC73C210(v177, v178, (uint64_t)&v255);
  if ((_BYTE)v257)
  {
    if (v256 >= 0x41)
    {
      if (v255) {
        MEMORY[0x1D25D9CB0](v255, 0x1000C8000313F17);
      }
      unint64_t v173 = v242;
      unsigned int v22 = v243;
      goto LABEL_345;
    }
    uint64_t v183 = 0;
    uint64_t v184 = (uint64_t)(v255 << -(char)v256) >> -(char)v256;
    if ((v184 & (v175 - 1)) == 0) {
      uint64_t v183 = v184 / (1 << *(void *)(a1 + 56));
    }
    if (v183 != 0 && v183 == (int)v183) {
      uint64_t v185 = v183;
    }
    else {
      uint64_t v185 = 0;
    }
    if (v183 == 0 || v183 != (int)v183)
    {
      BOOL v182 = 0;
      goto LABEL_379;
    }
    unint64_t v186 = v185 | v183 & 0xFFFFFFFFFFFFFF00;
    if (v186 == v184) {
      goto LABEL_378;
    }
    uint64_t v187 = *(void *)(a1 + 16);
    unint64_t v255 = 257;
    LODWORD(v256) = 0;
    sub_1CC7362A8(v187, &v255, v186);
LABEL_377:
    uint64_t *v22 = v188;
    goto LABEL_378;
  }
LABEL_345:
  BOOL v182 = v241 == 0;
LABEL_379:
  sub_1CC73C210(*(_DWORD *)(*(void *)(*v22 + 32) + 4), *(void *)(a1 + 8), (uint64_t)&v255);
  if (v182 && *(void *)v238 > v173 && !(_BYTE)v257)
  {
    uint64_t v205 = *v22;
    if (v237 == 1) {
    if (sub_1CBA0FEA0(a1, v205, v173))
    }
    {
      uint64_t v206 = 1;
      goto LABEL_392;
    }
LABEL_389:
    if (*(unsigned char *)(a1 + 81))
    {
      *(void *)a3 = *(void *)a1;
      uint64_t v207 = *(void *)(a1 + 16);
      uint64_t v251 = *(void *)(a1 + 40);
      LODWORD(__src) = 0;
      sub_1CC7362A8(v207, (unint64_t *)&v251, 0);
      uint64_t v206 = 0;
      uint64_t *v22 = v208;
    }
    else
    {
      uint64_t v206 = 0;
    }
LABEL_392:
    if (!(_BYTE)v257) {
      return v206;
    }
    goto LABEL_393;
  }
  if (!v182) {
    goto LABEL_389;
  }
  uint64_t v206 = 1;
  if (!(_BYTE)v257) {
    return v206;
  }
LABEL_393:
  if (v256 >= 0x41 && v255) {
    MEMORY[0x1D25D9CB0](v255, 0x1000C8000313F17);
  }
  return v206;
}

uint64_t sub_1CBA12438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = *(_DWORD *)(*(void *)(a3 + 32) + 4);
  if (v7 < 0 && (uint64_t v8 = *(void *)(a2 + 8), v9 = v7 & 0x7FFFFFFF, v9 < *(_DWORD *)(v8 + 432))) {
    unint64_t v10 = *(void *)(*(void *)(v8 + 424) + 8 * v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v22 = v10;
  uint64_t result = sub_1CBA125E8(a3, a4);
  if (!result
    || (uint64_t result = sub_1CC73C210(*(_DWORD *)(*(void *)(a3 + 32) + 68), *(void *)(a2 + 8), (uint64_t)&v23), !v25))
  {
LABEL_7:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    return result;
  }
  if (v24 >= 0x41)
  {
    uint64_t result = v23;
    if (v23) {
      uint64_t result = MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
    }
    goto LABEL_7;
  }
  uint64_t v12 = *(void *)(a2 + 8);
  uint64_t v13 = *(unsigned int *)(*(void *)(a3 + 32) + 36);
  if ((v13 & 0x80000000) != 0) {
    unsigned int v14 = (uint64_t *)(*(void *)(v12 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v14 = (uint64_t *)(*(void *)(v12 + 272) + 8 * v13);
  }
  uint64_t v15 = -(uint64_t)v24;
  uint64_t v16 = *v14;
  if (*v14 && ((*(unsigned char *)(v16 + 3) & 1) != 0 || (uint64_t v16 = *(void *)(v16 + 24)) != 0 && (*(unsigned char *)(v16 + 3) & 1) != 0)) {
    uint64_t v17 = *(void *)(v16 + 8);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = v23 << v15;
  uint64_t result = sub_1CB8F1DC4(&v22);
  unsigned int v20 = result;
  if (v19 == 1) {
  unsigned int v24 = v20;
  }
  if (v20 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v23);
  }
  unint64_t v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
  if (!v20) {
    unint64_t v21 = 0;
  }
  *(_DWORD *)(a1 + 16) = v20;
  *(void *)a1 = v17;
  *(void *)(a1 + 8) = v21 & (v18 >> v15);
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

BOOL sub_1CBA125E8(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  int v3 = **(unsigned __int16 **)(a1 + 16);
  if (v3 != 66) {
    return v3 == 45 && ((a2 & 0xFF00000000) == 0 || (*(_WORD *)(a1 + 44) & (unsigned __int16)a2) != 0);
  }
  for (uint64_t i = 0; i != 64; i += 32)
  {
    int v7 = (char *)&v30 + i;
    *((_DWORD *)v7 + 2) = 1;
    *(void *)int v7 = 0;
    *((_DWORD *)v7 + 6) = 1;
    *((void *)v7 + 2) = 0;
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 32);
  v25[1] = v27;
  v25[2] = v27;
  v25[3] = 4;
  int v26 = 0;
  v25[0] = &unk_1F261BC50;
  v27[4] = v8;
  v27[5] = *(void *)(v8 + 40);
  v27[6] = (*(uint64_t (**)(void))(**(void **)(v8 + 16) + 120))(*(void *)(v8 + 16));
  v27[7] = *(void *)(*(void *)v8 + 40) + 272;
  int v28 = 6;
  uint64_t v29 = 1;
  for (uint64_t j = 15; j != 95; j += 5)
    LODWORD(v25[j]) = -1;
  sub_1CC6DEE8C((uint64_t)v25, (const char *)*(unsigned int *)(*(void *)(a1 + 32) + 36), (uint64_t)&v21);
  if (v31 >= 0x41 && v30) {
    MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
  }
  uint64_t v10 = v21;
  uint64_t v30 = v21;
  unsigned int v11 = v22;
  unsigned int v31 = v22;
  unsigned int v22 = 0;
  if (v33 >= 0x41 && v32)
  {
    MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
    uint64_t v32 = v23;
    unsigned int v33 = v24;
    unsigned int v24 = 0;
    if (v22 >= 0x41 && v21) {
      MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
    }
  }
  else
  {
    uint64_t v32 = v23;
    unsigned int v33 = v24;
  }
  sub_1CC6DEE8C((uint64_t)v25, (const char *)*(unsigned int *)(*(void *)(a1 + 32) + 68), (uint64_t)&v21);
  if (v35 >= 0x41 && v34) {
    MEMORY[0x1D25D9CB0](v34, 0x1000C8000313F17);
  }
  uint64_t v12 = v21;
  uint64_t v34 = v21;
  unsigned int v13 = v22;
  unsigned int v35 = v22;
  unsigned int v22 = 0;
  if (v37[0] >= 0x41u && v36)
  {
    MEMORY[0x1D25D9CB0](v36, 0x1000C8000313F17);
    uint64_t v36 = v23;
    v37[0] = v24;
    unsigned int v24 = 0;
    if (v22 >= 0x41 && v21) {
      MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
    }
  }
  else
  {
    uint64_t v36 = v23;
    v37[0] = v24;
  }
  if (v11 > 0x40) {
    operator new[]();
  }
  unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
  if (!v11) {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v14 & ~v10;
  if (v13 > 0x40) {
    operator new[]();
  }
  if (v13) {
    unint64_t v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
  }
  else {
    unint64_t v16 = 0;
  }
  BOOL v4 = (v16 & ~v12 & v15) == 0;
  sub_1CB9FB5B0((uint64_t)v25);
  for (uint64_t k = 0; k != -16; k -= 8)
  {
    uint64_t v18 = (char *)&v30 + k * 4;
    if (v37[k] >= 0x41u)
    {
      uint64_t v19 = *((void *)v18 + 6);
      if (v19) {
        MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
      }
    }
    if (*((_DWORD *)v18 + 10) >= 0x41u)
    {
      uint64_t v20 = *((void *)v18 + 4);
      if (v20) {
        MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
      }
    }
  }
  return v4;
}

uint64_t sub_1CBA12B24(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  while (1)
  {
    unsigned int v6 = **(unsigned __int16 **)(a2 + 16);
    if (v6 > 0x7D) {
      break;
    }
    if (v6 - 80 < 2) {
      goto LABEL_9;
    }
    if (v6 != 19)
    {
      if (v6 - 45 < 2) {
        goto LABEL_19;
      }
LABEL_55:
      uint64_t v7 = *(void *)(a2 + 32);
LABEL_56:
      sub_1CC73C210(*(_DWORD *)(v7 + 4), *(void *)(a1 + 8), (uint64_t)&v54);
      if ((_BYTE)v56)
      {
        if (v55 >= 0x41)
        {
          if (v54) {
            MEMORY[0x1D25D9CB0](v54, 0x1000C8000313F17);
          }
          goto LABEL_57;
        }
        uint64_t v39 = v54 << -(uint64_t)v55 >> -(uint64_t)v55;
        uint64_t v40 = *(void *)(a1 + 16);
        uint64_t v54 = *(void *)(a1 + 32);
        LODWORD(v55) = 0;
        sub_1CC7362A8(v40, (unint64_t *)&v54, 0);
        *(void *)(a1 + 64) = v41;
        uint64_t v33 = *(void *)(a1 + 16);
        uint64_t v54 = *(void *)(a1 + 32);
        LODWORD(v55) = 0;
        unint64_t v34 = v39;
      }
      else
      {
LABEL_57:
        *(void *)(a1 + 64) = a2;
        uint64_t v33 = *(void *)(a1 + 16);
        uint64_t v54 = *(void *)(a1 + 32);
        LODWORD(v55) = 0;
        unint64_t v34 = 0;
      }
      sub_1CC7362A8(v33, (unint64_t *)&v54, v34);
      *(void *)(a1 + 72) = v42;
      uint64_t v53 = *(void *)(a1 + 64);
      uint64_t v54 = v53;
      uint64_t v59 = v42;
      uint64_t v51 = v42;
      unint64_t v43 = &v54;
      uint64_t v44 = &v59;
      if ((sub_1CBA10484(a1, a2, (uint64_t)&v54, &v59, a3, 0) & 1) == 0)
      {
        if (*(unsigned char *)(a1 + 82)
          || (unint64_t v43 = &v51, v44 = &v53, !sub_1CBA10484(a1, a2, (uint64_t)&v51, &v53, a3, 0)))
        {
          uint64_t v45 = v59;
          *(void *)(a1 + 64) = v54;
          *(void *)(a1 + 72) = v45;
          if (!*(unsigned char *)(a1 + 81) || *(void *)(a1 + 32) == *(void *)(a1 + 40)) {
            return 0;
          }
          uint64_t v48 = *(void *)(a1 + 16);
          uint64_t v54 = *(void *)(a1 + 40);
          LODWORD(v55) = 0;
          sub_1CC7362A8(v48, (unint64_t *)&v54, 0);
          uint64_t v28 = 0;
          goto LABEL_74;
        }
      }
      uint64_t v50 = *v44;
      *(void *)(a1 + 64) = *v43;
      *(void *)(a1 + 72) = v50;
      return 1;
    }
    uint64_t v7 = *(void *)(a2 + 32);
    if ((*(_DWORD *)(v7 + 36) & 0x80000000) == 0) {
      goto LABEL_56;
    }
LABEL_9:
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = *(unsigned int *)(*(void *)(a2 + 32) + 36);
    if ((v9 & 0x80000000) != 0) {
      uint64_t v10 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v10 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v9);
    }
    a2 = 0;
    uint64_t v11 = *v10;
    if (v11)
    {
      if ((*(unsigned char *)(v11 + 3) & 1) != 0
        || (a2 = 0, (uint64_t v11 = *(void *)(v11 + 24)) != 0) && (a2 = 0, (*(unsigned char *)(v11 + 3) & 1) != 0))
      {
        a2 = *(void *)(v11 + 8);
      }
    }
  }
  if (v6 == 126 || v6 == 221) {
    goto LABEL_9;
  }
  if (v6 != 193) {
    goto LABEL_55;
  }
LABEL_19:
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v13 = *(unsigned int *)(v12 + 36);
  unint64_t v14 = *(unsigned int *)(v12 + 68);
  uint64_t v15 = *(void *)(a1 + 8);
  if ((v13 & 0x80000000) != 0) {
    unint64_t v16 = (uint64_t *)(*(void *)(v15 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v16 = (uint64_t *)(*(void *)(v15 + 272) + 8 * v13);
  }
  uint64_t v17 = *v16;
  if (v17)
  {
    if (*(unsigned char *)(v17 + 3) & 1) != 0 || (uint64_t v17 = *(void *)(v17 + 24)) != 0 && (*(unsigned char *)(v17 + 3))
    {
      uint64_t v18 = *(void *)(v17 + 8);
      if (v18)
      {
        if (**(_WORD **)(v18 + 16) == 80 && *(_DWORD *)(v18 + 40) == 2) {
          LODWORD(v13) = *(_DWORD *)(*(void *)(v18 + 32) + 36);
        }
      }
    }
  }
  if ((v14 & 0x80000000) != 0) {
    uint64_t v19 = (uint64_t *)(*(void *)(v15 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v19 = (uint64_t *)(*(void *)(v15 + 272) + 8 * v14);
  }
  uint64_t v20 = *v19;
  if (v20)
  {
    if (*(unsigned char *)(v20 + 3) & 1) != 0 || (uint64_t v20 = *(void *)(v20 + 24)) != 0 && (*(unsigned char *)(v20 + 3))
    {
      uint64_t v21 = *(void *)(v20 + 8);
      if (v21)
      {
        if (**(_WORD **)(v21 + 16) == 80 && *(_DWORD *)(v21 + 40) == 2) {
          unint64_t v14 = *(unsigned int *)(*(void *)(v21 + 32) + 36);
        }
      }
    }
  }
  if ((v13 & 0x80000000) != 0) {
    unsigned int v22 = (uint64_t *)(*(void *)(v15 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v22 = (uint64_t *)(*(void *)(v15 + 272) + 8 * v13);
  }
  uint64_t v23 = *v22;
  if (v23)
  {
    if (*(unsigned char *)(v23 + 3)) {
      goto LABEL_39;
    }
    uint64_t v23 = *(void *)(v23 + 24);
    if (v23)
    {
      if (*(unsigned char *)(v23 + 3)) {
LABEL_39:
      }
        uint64_t v23 = *(void *)(v23 + 8);
      else {
        uint64_t v23 = 0;
      }
    }
  }
  if (v14 >> 31) {
    unsigned int v24 = (uint64_t *)(*(void *)(v15 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v24 = (uint64_t *)(*(void *)(v15 + 272) + 8 * v14);
  }
  uint64_t v25 = *v24;
  if (v25)
  {
    if (*(unsigned char *)(v25 + 3)) {
      goto LABEL_44;
    }
    uint64_t v25 = *(void *)(v25 + 24);
    if (v25)
    {
      if (*(unsigned char *)(v25 + 3)) {
LABEL_44:
      }
        uint64_t v25 = *(void *)(v25 + 8);
      else {
        uint64_t v25 = 0;
      }
    }
  }
  uint64_t v53 = v23;
  uint64_t v54 = v23;
  uint64_t v59 = v25;
  uint64_t v51 = v25;
  int v26 = &v54;
  unint64_t v27 = &v59;
  if ((sub_1CBA10484(a1, a2, (uint64_t)&v54, &v59, a3, v6 == 46) & 1) != 0
    || v6 != 46
    && !*(unsigned char *)(a1 + 82)
    && (int v26 = &v51, v27 = &v53, (sub_1CBA10484(a1, a2, (uint64_t)&v51, &v53, a3, 0) & 1) != 0))
  {
    uint64_t v28 = 1;
  }
  else
  {
    uint64_t v28 = 0;
    unint64_t v27 = &v59;
    int v26 = &v54;
  }
  uint64_t v29 = *v27;
  *(void *)(a1 + 64) = *v26;
  *(void *)(a1 + 72) = v29;
  if (v6 == 46)
  {
    unsigned int v30 = *(_DWORD *)(*(void *)(v29 + 32) + 4);
    uint64_t v31 = *(void *)(a1 + 8);
    if ((v30 & 0x80000000) != 0 && (v30 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v31 + 432)) {
      uint64_t v32 = *(void *)(*(void *)(v31 + 424) + 8 * (v30 & 0x7FFFFFFF));
    }
    else {
      uint64_t v32 = 0;
    }
    sub_1CC73C210(v30, v31, (uint64_t)&v54);
    if (!(_BYTE)v56) {
      goto LABEL_60;
    }
    if (v55 >= 0x41)
    {
      if (v54) {
        MEMORY[0x1D25D9CB0](v54, 0x1000C8000313F17);
      }
LABEL_60:
      uint64_t v35 = *(void *)(a1 + 16);
      uint64_t v51 = v32;
      int v52 = 0;
      uint64_t v36 = sub_1CC7362A8(v35, (unint64_t *)&v51, 0);
      uint64_t v59 = v32;
      int v60 = 0;
      uint64_t v54 = v36;
      uint64_t v55 = v37;
      int v56 = 1;
      unsigned int v57 = v30;
      int v58 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*(void *)v35 + 32))(v35, 46, &v59, 1, &v54, 2, 0);
    }
    else
    {
      uint64_t v46 = v54 << -(uint64_t)v55 >> -(uint64_t)v55;
      if (!v46) {
        return v28;
      }
      uint64_t v47 = *(void *)(a1 + 16);
      uint64_t v54 = v32;
      LODWORD(v55) = 0;
      sub_1CC7362A8(v47, (unint64_t *)&v54, -v46);
    }
LABEL_74:
    *(void *)(a1 + 72) = v38;
  }
  return v28;
}

void *sub_1CBA13110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 104);
  if (v5)
  {
    unsigned int v6 = *(void **)(a1 + 96);
    uint64_t v7 = 40 * v5;
    while (*v6 != a3)
    {
      v6 += 5;
      v7 -= 40;
      if (!v7) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    sub_1CC6DEE8C(a2, (const char *)*(unsigned int *)(*(void *)(a3 + 32) + 4), (uint64_t)&v29);
    unsigned int v8 = *(_DWORD *)(a1 + 104);
    uint64_t v9 = *(unsigned int *)(a1 + 108);
    if (v8 >= v9)
    {
      if (v9 == -1) {
        sub_1CD0A89A8(0xFFFFFFFFuLL);
      }
      if (((2 * v9) | 1uLL) >= 0xFFFFFFFF) {
        uint64_t v12 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v12 = (2 * v9) | 1;
      }
      uint64_t v13 = (char *)malloc_type_malloc(40 * v12, 0x4065EBACuLL);
      if (!v13) {
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      }
      unint64_t v14 = v13;
      uint64_t v15 = &v13[40 * *(unsigned int *)(a1 + 104)];
      *(void *)uint64_t v15 = a3;
      *((_DWORD *)v15 + 4) = v30;
      *((void *)v15 + 1) = v29;
      unsigned int v30 = 0;
      *((_DWORD *)v15 + 8) = v32;
      *((void *)v15 + 3) = v31;
      unsigned int v32 = 0;
      unint64_t v16 = *(char **)(a1 + 96);
      int v17 = *(_DWORD *)(a1 + 104);
      if (v17)
      {
        uint64_t v18 = &v16[40 * v17];
        uint64_t v19 = v14;
        do
        {
          *(void *)uint64_t v19 = *(void *)v16;
          *((_DWORD *)v19 + 4) = *((_DWORD *)v16 + 4);
          *((void *)v19 + 1) = *((void *)v16 + 1);
          *((_DWORD *)v16 + 4) = 0;
          *((_DWORD *)v19 + 8) = *((_DWORD *)v16 + 8);
          *((void *)v19 + 3) = *((void *)v16 + 3);
          *((_DWORD *)v16 + 8) = 0;
          v16 += 40;
          v19 += 40;
        }
        while (v16 != v18);
        unint64_t v16 = *(char **)(a1 + 96);
        uint64_t v20 = *(unsigned int *)(a1 + 104);
        if (v20)
        {
          uint64_t v21 = 40 * v20;
          do
          {
            unsigned int v22 = &v16[v21];
            if (*(_DWORD *)&v16[v21 - 8] >= 0x41u)
            {
              uint64_t v24 = *((void *)v22 - 2);
              if (v24)
              {
                int v26 = &v16[v21];
                unint64_t v27 = v16;
                MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
                unsigned int v22 = v26;
                unint64_t v16 = v27;
              }
            }
            if (*((_DWORD *)v22 - 6) >= 0x41u)
            {
              uint64_t v25 = *((void *)v22 - 4);
              if (v25)
              {
                uint64_t v28 = v16;
                MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
                unint64_t v16 = v28;
              }
            }
            v21 -= 40;
          }
          while (v21);
          unint64_t v16 = *(char **)(a1 + 96);
        }
      }
      if (v16 != (char *)(a1 + 112)) {
        free(v16);
      }
      *(void *)(a1 + 96) = v14;
      unsigned int v23 = v32;
      ++*(_DWORD *)(a1 + 104);
      *(_DWORD *)(a1 + 108) = v12;
      if (v23 >= 0x41 && v31) {
        MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
      }
    }
    else
    {
      uint64_t v10 = *(void *)(a1 + 96) + 40 * v8;
      *(void *)uint64_t v10 = a3;
      *(_DWORD *)(v10 + 16) = v30;
      *(void *)(v10 + 8) = v29;
      unsigned int v30 = 0;
      *(_DWORD *)(v10 + 32) = v32;
      *(void *)(v10 + 24) = v31;
      unsigned int v32 = 0;
      ++*(_DWORD *)(a1 + 104);
    }
    if (v30 >= 0x41 && v29) {
      MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
    }
    unsigned int v6 = (void *)(*(void *)(a1 + 96) + 40 * *(unsigned int *)(a1 + 104) - 40);
  }
  return v6 + 1;
}

uint64_t sub_1CBA133D8(uint64_t a1, BOOL *a2, BOOL *a3)
{
  if (*(_DWORD *)(a1 + 24) > 0x40u) {
    operator new[]();
  }
  unsigned int v6 = *(void **)(a1 + 16);
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v22 = v7;
  if (v7 > 0x40) {
    operator new[]();
  }
  unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
  if (!v7) {
    unint64_t v8 = 0;
  }
  uint64_t v21 = (void *)(v8 & ~*(void *)a1);
  unsigned int v24 = v7;
  __s2 = v21;
  unsigned int v22 = 0;
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  uint64_t v9 = v24;
  uint64_t v10 = (char *)__s2;
  unsigned int v24 = 0;
  *a2 = v6 == __s2;
  unsigned int v20 = *(_DWORD *)(a1 + 8);
  if (v20 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v19);
  }
  uint64_t v19 = 0;
  unsigned int v11 = *(_DWORD *)(a1 + 8);
  unsigned int v18 = v11;
  if (v11 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v17);
  }
  unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
  if (!v11) {
    LOWORD(v12) = 0;
  }
  unint64_t v17 = (unsigned __int16)v12 & 0xFFF0;
  if (v9 > 0x40)
  {
    uint64_t result = v17;
    unint64_t v14 = ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8;
    while (v14)
    {
      unint64_t v15 = *(void *)&v10[v14 - 8];
      unint64_t v16 = *(void *)(v17 + v14 - 8);
      v14 -= 8;
      if (v15 != v16)
      {
        if (v15 > v16) {
          LODWORD(v14) = 1;
        }
        else {
          LODWORD(v14) = -1;
        }
        break;
      }
    }
  }
  else
  {
    uint64_t result = v17;
    LODWORD(v14) = (unint64_t)v10 > v17;
    if ((unint64_t)v10 < v17) {
      LODWORD(v14) = -1;
    }
  }
  *a3 = (int)v14 < 1;
  if (v9 >= 0x41)
  {
    if (v10) {
      return MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t sub_1CBA136E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6, unsigned int a7)
{
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  unint64_t v120 = a5;
  *(void *)(a1 + 40) = a4;
  uint64_t v10 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 56) = a2;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 81) = a7;
  if ((*(_DWORD *)(a1 + 84) & 0xFFFEFFFF) != 2)
  {
    int v27 = sub_1CBA12B24(a1, *(void *)a1, a6);
    goto LABEL_132;
  }
  char v11 = a2;
  uint64_t v12 = *(void *)a1;
  unsigned int v128 = 1;
  __dst = 0;
  unsigned int v130 = 1;
  uint64_t v129 = 0;
  uint64_t v13 = *(void *)(*(void *)(v12 + 24) + 32);
  uint64_t v136 = v140;
  uint64_t v137 = v140;
  uint64_t v138 = 4;
  int v139 = 0;
  uint64_t v135 = &unk_1F261BC50;
  v140[4] = v13;
  v140[5] = *(void *)(v13 + 40);
  v140[6] = (*(uint64_t (**)(void))(**(void **)(v13 + 16) + 120))(*(void *)(v13 + 16));
  v140[7] = *(void *)(*(void *)v13 + 40) + 272;
  int v141 = 16;
  uint64_t v142 = 1;
  for (uint64_t i = 120; i != 760; i += 40)
    *(_DWORD *)((char *)&v135 + i) = -1;
  unint64_t v15 = sub_1CBA13110(a1, (uint64_t)&v135, *(void *)(a1 + 88));
  unint64_t v16 = v15;
  unsigned int v17 = *((_DWORD *)v15 + 2);
  if (v17 > 0x40)
  {
    llvm::APInt::reallocate((uint64_t)&__dst, v17);
    if (v128 <= 0x40) {
      __dst = (void *)*v16;
    }
    else {
      memcpy(__dst, (const void *)*v16, (((unint64_t)v128 + 63) >> 3) & 0x3FFFFFF8);
    }
    unsigned int v18 = v16 + 2;
    if (v130 > 0x40) {
      goto LABEL_85;
    }
  }
  else
  {
    unsigned int v18 = v15 + 2;
    __dst = (void *)*v15;
    unsigned int v128 = v17;
  }
  unsigned int v19 = *((_DWORD *)v16 + 6);
  if (v19 <= 0x40)
  {
    uint64_t v129 = (void *)*v18;
    unsigned int v130 = v19;
    goto LABEL_8;
  }
LABEL_85:
  llvm::APInt::reallocate((uint64_t)&v129, *((_DWORD *)v18 + 2));
  if (v130 <= 0x40) {
    uint64_t v129 = (void *)*v18;
  }
  else {
    memcpy(v129, (const void *)*v18, (((unint64_t)v130 + 63) >> 3) & 0x3FFFFFF8);
  }
LABEL_8:
  __int16 v126 = 0;
  sub_1CBA133D8((uint64_t)&__dst, (BOOL *)&v126 + 1, (BOOL *)&v126);
  if (HIBYTE(v126) && *(void *)(a1 + 88) != v12)
  {
    unsigned int v20 = sub_1CBA13110(a1, (uint64_t)&v135, v12);
    uint64_t v21 = v20;
    unsigned int v22 = *((_DWORD *)v20 + 2);
    if (v128 > 0x40 || v22 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&__dst, v22);
      if (v128 <= 0x40) {
        __dst = (void *)*v21;
      }
      else {
        memcpy(__dst, (const void *)*v21, (((unint64_t)v128 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
    else
    {
      __dst = (void *)*v20;
      unsigned int v128 = v22;
    }
    unsigned int v23 = *((_DWORD *)v21 + 6);
    if (v130 > 0x40 || v23 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&v129, v23);
      if (v130 <= 0x40) {
        uint64_t v129 = (void *)v21[2];
      }
      else {
        memcpy(v129, (const void *)v21[2], (((unint64_t)v130 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
    else
    {
      uint64_t v129 = (void *)v21[2];
      unsigned int v130 = v23;
    }
    sub_1CBA133D8((uint64_t)&__dst, (BOOL *)&v126 + 1, (BOOL *)&v126);
  }
  if ((*(unsigned char *)(a1 + 86) & 1) == 0) {
    goto LABEL_111;
  }
  uint64_t v24 = *(void *)(a1 + 88);
  if (v24 == v12)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
  }
  else
  {
    sub_1CBA12B24(a1, v24, a6);
    uint64_t v26 = *(void *)(a1 + 64);
    uint64_t v25 = *(void *)(a1 + 72);
    *(unsigned char *)(a1 + 272) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(unsigned char *)(a1 + 80) = 0;
  }
  int v28 = sub_1CBA12B24(a1, v12, a6);
  char v29 = v28;
  if (*(void *)(a1 + 88) == v12)
  {
    uint64_t v26 = *(void *)(a1 + 64);
    uint64_t v25 = *(void *)(a1 + 72);
  }
  if ((v28 | a7) != 1) {
    goto LABEL_111;
  }
  if (HIBYTE(v126))
  {
    char v30 = 0;
    *(unsigned char *)(a1 + 272) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(unsigned char *)(a1 + 80) = 0;
    goto LABEL_112;
  }
  if ((_BYTE)v126)
  {
    sub_1CC6DEE8C((uint64_t)&v135, (const char *)*(unsigned int *)(*(void *)(*(void *)(a1 + 64) + 32) + 4), (uint64_t)&v143);
    unsigned int v31 = v144;
    uint64_t v32 = v146;
    __src = v145;
    __s1 = v145;
    if (v146 >= 0x41) {
      operator new[]();
    }
    unsigned int v123 = v144;
    if (v144 > 0x40) {
      operator new[]();
    }
    if (v144) {
      unint64_t v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v144;
    }
    else {
      unint64_t v33 = 0;
    }
    uint64_t v122 = (void *)(v33 & ~v143);
    unsigned int v125 = v144;
    __s2 = v122;
    unsigned int v123 = 0;
    llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    uint64_t v42 = v125;
    unint64_t v43 = (char *)__s2;
    unsigned int v125 = 0;
    if (v32 > 0x40)
    {
      uint64_t v44 = v42;
      int v45 = memcmp(__s1, __s2, ((unint64_t)(v32 + 63) >> 3) & 0x3FFFFFF8);
      uint64_t v42 = v44;
      if (!v45) {
        goto LABEL_100;
      }
    }
    else if (__s1 == __s2)
    {
      goto LABEL_100;
    }
    unsigned int v144 = v31;
    unint64_t v143 = 0;
    if (v32 > 0x40)
    {
      uint64_t v57 = v42;
      unint64_t v58 = ((unint64_t)(v32 + 63) >> 3) & 0x3FFFFFF8;
      while (v58)
      {
        unint64_t v59 = *(void *)&__s1[v58 - 8];
        unint64_t v60 = *(void *)(v143 + v58 - 8);
        v58 -= 8;
        if (v59 != v60)
        {
          if (v59 <= v60)
          {
            BOOL v46 = 1;
            LODWORD(v42) = v57;
            goto LABEL_99;
          }
          break;
        }
      }
      uint64_t v42 = v57;
    }
    else if ((unint64_t)__s1 < v143)
    {
      BOOL v46 = 1;
      goto LABEL_99;
    }
    unsigned int v132 = v31;
    unint64_t v61 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v31;
    if (!v31) {
      LOWORD(v61) = 0;
    }
    unint64_t v62 = (unsigned __int16)v61 & 0xFFF0;
    if (v42 > 0x40)
    {
      unint64_t v113 = v62 - 8;
      unint64_t v114 = ((unint64_t)(v42 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v114)
        {
          int v65 = 0;
          goto LABEL_98;
        }
        unint64_t v115 = *(void *)&v43[v114 - 8];
        unint64_t v116 = *(void *)(v113 + v114);
        v114 -= 8;
      }
      while (v115 == v116);
      if (v115 > v116) {
        int v65 = 1;
      }
      else {
        int v65 = -1;
      }
    }
    else
    {
      BOOL v63 = (unint64_t)v43 >= v62;
      BOOL v64 = (unint64_t)v43 > v62;
      if (v63) {
        int v65 = v64;
      }
      else {
        int v65 = -1;
      }
    }
LABEL_98:
    BOOL v46 = v65 > 0;
LABEL_99:
    if (!v46)
    {
LABEL_101:
      if (v42 >= 0x41 && v43) {
        MEMORY[0x1D25D9CB0](v43, 0x1000C8000313F17);
      }
      if (v32 >= 0x41)
      {
        if (__s1) {
          MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
        }
        if (__src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
      }
      if (v29) {
        goto LABEL_110;
      }
LABEL_111:
      char v30 = 0;
LABEL_112:
      if (HIBYTE(v126) || ((_BYTE)v126 ? (char v66 = 1) : (char v66 = v30), (v66 & 1) == 0))
      {
        int v69 = *(_DWORD *)(*(void *)(v12 + 32) + 4);
        if (v69 < 0 && (uint64_t v70 = *(void *)(a1 + 8), (v69 & 0x7FFFFFFFu) < *(_DWORD *)(v70 + 432))) {
          uint64_t v71 = *(void **)(*(void *)(v70 + 424) + 8 * (v69 & 0x7FFFFFFF));
        }
        else {
          uint64_t v71 = 0;
        }
        int v121 = v71;
        unsigned int v73 = sub_1CB8F1DC4((unint64_t *)&v121);
        if (v72 == 1) {
        uint64_t v74 = *(void *)(a1 + 16);
        }
        unint64_t v75 = (void *)((8 * v73) | 1);
        unint64_t v143 = (unint64_t)v75;
        unsigned int v144 = 0;
        sub_1CC7362A8(v74, &v143, 0x10uLL);
        unsigned int v77 = *(_DWORD *)(*(void *)(v76 + 32) + 4);
        if ((v121 & 1) == 0)
        {
          uint64_t v78 = *(void *)(a1 + 16);
          uint64_t v131 = v75;
          unsigned int v132 = 0;
          LODWORD(v143) = v69;
          LODWORD(v145) = 0;
          sub_1CC7382B0(v78);
          int v69 = *(_DWORD *)(*(void *)(v79 + 32) + 4);
        }
        uint64_t v80 = *(void *)(a1 + 16);
        uint64_t v131 = v75;
        unsigned int v132 = 0;
        LODWORD(v143) = v69;
        LODWORD(v145) = 0;
        unsigned int v146 = v77;
        int v147 = 0;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, void))(*(void *)v80 + 32))(v80, 45, &v131, 1, &v143, 2, 0);
        *(void *)(a1 + 64) = v81;
        if ((v121 & 1) == 0)
        {
          uint64_t v82 = *(void *)(a1 + 16);
          uint64_t v131 = v121;
          unsigned int v132 = 0;
          LODWORD(v143) = *(_DWORD *)(*(void *)(v81 + 32) + 4);
          LODWORD(v145) = 0;
          sub_1CC7382B0(v82);
          *(void *)(a1 + 64) = v83;
        }
        uint64_t v67 = *(void *)(a1 + 16);
        unint64_t v143 = *(void *)(a1 + 40);
        unsigned int v144 = 0;
        unint64_t v68 = -16 >> v11;
      }
      else
      {
        *(void *)(a1 + 64) = v12;
        uint64_t v67 = *(void *)(a1 + 16);
        unint64_t v143 = *(void *)(a1 + 40);
        unsigned int v144 = 0;
        unint64_t v68 = 0;
      }
      sub_1CC7362A8(v67, &v143, v68);
      int v27 = 0;
      *(void *)(a1 + 72) = v84;
      goto LABEL_130;
    }
LABEL_100:
    char v29 = 0;
    *(unsigned char *)(a1 + 272) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(unsigned char *)(a1 + 80) = 0;
    goto LABEL_101;
  }
  unint64_t v34 = sub_1CBA13110(a1, (uint64_t)&v135, v26);
  unsigned int v144 = *((_DWORD *)v34 + 2);
  if (v144 > 0x40) {
    operator new[]();
  }
  unint64_t v143 = *v34;
  unsigned int v146 = *((_DWORD *)v34 + 6);
  if (v146 > 0x40) {
    operator new[]();
  }
  unint64_t v145 = (char *)v34[2];
  uint64_t v35 = sub_1CBA13110(a1, (uint64_t)&v135, v25);
  uint64_t v36 = v35;
  unsigned int v37 = *((_DWORD *)v35 + 2);
  unsigned int v132 = v37;
  if (v37 > 0x40) {
    operator new[]();
  }
  uint64_t v131 = (void *)*v35;
  unsigned int v38 = *((_DWORD *)v35 + 6);
  unsigned int v134 = v38;
  if (v38 > 0x40) {
    operator new[]();
  }
  uint64_t v39 = (void *)v35[2];
  v133 = (void *)v36[2];
  unsigned int v40 = v144;
  uint64_t v41 = (unint64_t *)(v143 + 8 * ((v144 - 1) >> 6));
  if (v144 < 0x41) {
    uint64_t v41 = &v143;
  }
  if (((*v41 >> (v144 - 1)) & 1) != 0
    && (((unint64_t)v131 >> (v37 - 1)) & 1) != 0)
  {
    char v30 = 1;
  }
  else
  {
    if (*(void *)(a1 + 88) == v12) {
      goto LABEL_70;
    }
    uint64_t v47 = sub_1CBA13110(a1, (uint64_t)&v135, *(void *)(a1 + 64));
    uint64_t v48 = v47;
    unsigned int v49 = *((_DWORD *)v47 + 2);
    if (v40 > 0x40 || v49 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&v143, v49);
      if (v144 <= 0x40) {
        unint64_t v143 = *v48;
      }
      else {
        memcpy((void *)v143, (const void *)*v48, (((unint64_t)v144 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
    else
    {
      unint64_t v143 = *v47;
      unsigned int v144 = v49;
    }
    unsigned int v50 = *((_DWORD *)v48 + 6);
    if (v146 > 0x40 || v50 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&v145, v50);
      if (v146 <= 0x40) {
        unint64_t v145 = (char *)v48[2];
      }
      else {
        memcpy(v145, (const void *)v48[2], (((unint64_t)v146 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
    else
    {
      unint64_t v145 = (char *)v48[2];
      unsigned int v146 = v50;
    }
    uint64_t v51 = sub_1CBA13110(a1, (uint64_t)&v135, *(void *)(a1 + 72));
    int v52 = v51;
    unsigned int v53 = *((_DWORD *)v51 + 2);
    if (v53 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&v131, v53);
      if (v132 <= 0x40) {
        uint64_t v131 = (void *)*v52;
      }
      else {
        memcpy(v131, (const void *)*v52, (((unint64_t)v132 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
    else
    {
      uint64_t v131 = (void *)*v51;
      unsigned int v132 = v53;
    }
    unsigned int v38 = *((_DWORD *)v52 + 6);
    if (v134 > 0x40 || v38 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&v133, *((_DWORD *)v52 + 6));
      unsigned int v38 = v134;
      if (v134 <= 0x40)
      {
        uint64_t v39 = (void *)v52[2];
        v133 = v39;
      }
      else
      {
        unsigned int v117 = v133;
        memcpy(v133, (const void *)v52[2], (((unint64_t)v134 + 63) >> 3) & 0x3FFFFFF8);
        uint64_t v39 = v117;
      }
    }
    else
    {
      uint64_t v39 = (void *)v52[2];
      v133 = v39;
      unsigned int v134 = v38;
    }
    uint64_t v54 = &v143;
    if (v144 >= 0x41) {
      uint64_t v54 = (unint64_t *)(v143 + 8 * ((v144 - 1) >> 6));
    }
    if (((*v54 >> (v144 - 1)) & 1) == 0) {
      goto LABEL_70;
    }
    unsigned int v55 = v132 - 1;
    int v56 = &v131;
    if (v132 >= 0x41) {
      int v56 = (void **)((char *)v131 + 8 * (v55 >> 6));
    }
    if (((unint64_t)*v56 >> v55))
    {
      char v30 = 1;
    }
    else
    {
LABEL_70:
      char v30 = 0;
      char v29 = 0;
      *(unsigned char *)(a1 + 272) = 0;
      *(unsigned char *)(a1 + 48) = 0;
      *(unsigned char *)(a1 + 80) = 0;
    }
  }
  if (v38 >= 0x41 && v39) {
    MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
  }
  if (v132 >= 0x41 && v131) {
    MEMORY[0x1D25D9CB0](v131, 0x1000C8000313F17);
  }
  if (v146 >= 0x41 && v145) {
    MEMORY[0x1D25D9CB0](v145, 0x1000C8000313F17);
  }
  if (v144 >= 0x41 && v143) {
    MEMORY[0x1D25D9CB0](v143, 0x1000C8000313F17);
  }
  if ((v29 & 1) == 0) {
    goto LABEL_112;
  }
LABEL_110:
  int v27 = 1;
LABEL_130:
  sub_1CB9FB5B0((uint64_t)&v135);
  if (v130 >= 0x41 && v129) {
    MEMORY[0x1D25D9CB0](v129, 0x1000C8000313F17);
  }
  if (v128 >= 0x41 && __dst) {
    MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
  }
LABEL_132:
  uint64_t v85 = v27 | a7;
  if (v85 == 1)
  {
    sub_1CC73C210(*(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 32) + 4), *(void *)(a1 + 8), (uint64_t)&v135);
    if ((_BYTE)v137)
    {
      if (v136 >= 0x41)
      {
        if (v135) {
          MEMORY[0x1D25D9CB0](v135, 0x1000C8000313F17);
        }
      }
      else if (!((uint64_t)((void)v135 << -(uint64_t)v136) >> -(uint64_t)v136))
      {
        *(unsigned char *)(a1 + 272) = 1;
      }
    }
    sub_1CC73C210(*(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 32) + 4), *(void *)(a1 + 8), (uint64_t)&v135);
    if ((_BYTE)v137)
    {
      if (v136 >= 0x41)
      {
        if (v135) {
          MEMORY[0x1D25D9CB0](v135, 0x1000C8000313F17);
        }
      }
      else
      {
        uint64_t v86 = (uint64_t)((void)v135 << -(uint64_t)v136) >> -(uint64_t)v136;
        *(unsigned char *)(a1 + 48) = v86 == (__int16)v86;
      }
    }
    int v87 = *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 32) + 4);
    if (v87 < 0 && (uint64_t v88 = *(void *)(a1 + 8), (v87 & 0x7FFFFFFFu) < *(_DWORD *)(v88 + 432))) {
      uint64_t v89 = *(void **)(*(void *)(v88 + 424) + 8 * (v87 & 0x7FFFFFFF));
    }
    else {
      uint64_t v89 = 0;
    }
    int v90 = *(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 32) + 4);
    __dst = v89;
    unint64_t v92 = sub_1CB8F1DC4((unint64_t *)&__dst);
    if (v91 == 1) {
    unint64_t v94 = sub_1CB8F1DC4(&v120);
    }
    if (v93 == 1) {
    if (v92 > v94)
    }
    {
      if (((unint64_t)__dst & 0xFFFFFFFFFFFFFFF9) != 0 && (__dst & 6) == 2)
      {
        uint64_t v95 = *(void *)(a1 + 16);
        unsigned int v97 = sub_1CB8F1DC4((unint64_t *)&__dst);
        if (v96 == 1) {
        unint64_t v143 = (8 * v97) | 1;
        }
        unsigned int v144 = 0;
        LODWORD(v135) = v87;
        LODWORD(v137) = 0;
        sub_1CC7382B0(v95);
        int v87 = *(_DWORD *)(*(void *)(v98 + 32) + 4);
      }
      uint64_t v99 = *(void *)(a1 + 16);
      unint64_t v143 = v120;
      unsigned int v144 = 0;
      LODWORD(v135) = v87;
      LODWORD(v137) = 0;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v99 + 32))(v99, 119, &v143, 1, &v135, 1, 0);
      *(void *)(a1 + 64) = v100;
    }
    if (!*(unsigned char *)(a1 + 48))
    {
      if (v90 < 0
        && (uint64_t v101 = *(void *)(a1 + 8), (v90 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v101 + 432)))
      {
        uint64_t v102 = *(void **)(*(void *)(v101 + 424) + 8 * (v90 & 0x7FFFFFFF));
      }
      else
      {
        uint64_t v102 = 0;
      }
      uint64_t v135 = v102;
      unint64_t v104 = sub_1CB8F1DC4((unint64_t *)&v135);
      if (v103 == 1) {
      unint64_t v106 = sub_1CB8F1DC4(v10);
      }
      if (v105 == 1) {
      if (v104 > v106)
      }
      {
        if (v90 < 0
          && (uint64_t v107 = *(void *)(a1 + 8), (v90 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v107 + 432))
          && (uint64_t v108 = *(void *)(*(void *)(v107 + 424) + 8 * (v90 & 0x7FFFFFFF)), (v108 & 0xFFFFFFFFFFFFFFF9) != 0)
          && (v108 & 6) == 2)
        {
          uint64_t v109 = *(void *)(a1 + 16);
          unint64_t v143 = *(void *)(a1 + 40);
          unsigned int v144 = 0;
          LODWORD(v135) = v90;
          LODWORD(v137) = 0;
          sub_1CC7382B0(v109);
        }
        else
        {
          uint64_t v111 = *(void *)(a1 + 16);
          unint64_t v143 = *(void *)(a1 + 40);
          unsigned int v144 = 0;
          LODWORD(v135) = v90;
          LODWORD(v137) = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v111 + 32))(v111, 119, &v143, 1, &v135, 1, 0);
        }
        *(void *)(a1 + 72) = v110;
      }
    }
  }
  return v85;
}

uint64_t sub_1CBA14940(uint64_t this)
{
  unsigned int v1 = *(_DWORD *)(this + 8);
  if (v1 > 0x40) {
    return llvm::APInt::flipAllBitsSlowCase(this);
  }
  if (v1) {
    unint64_t v2 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
  }
  else {
    unint64_t v2 = 0;
  }
  *(void *)this = v2 & ~*(void *)this;
  return this;
}

uint64_t sub_1CBA14978(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5 = *a3;
  if ((v5 & 0x80000000) != 0) {
    unsigned int v6 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v6 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v5);
  }
  uint64_t v7 = *v6;
  if (v7)
  {
    if (*(unsigned char *)(v7 + 3) & 1) != 0 || (uint64_t v7 = *(void *)(v7 + 24)) != 0 && (*(unsigned char *)(v7 + 3))
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8)
      {
        if (**(_WORD **)(v8 + 16) == 45 && *(_DWORD *)(v8 + 40) == 3)
        {
          uint64_t v10 = *(void *)(v8 + 32);
          **(_DWORD **)a1 = *(_DWORD *)(v10 + 36);
          sub_1CC73C210(*(_DWORD *)(v10 + 68), a2, (uint64_t)&v11);
          if (v13)
          {
            if (v12 < 0x41)
            {
              **(void **)(a1 + 8) = v11 << -(char)v12 >> -(char)v12;
              return 1;
            }
            if (v11) {
              MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
            }
          }
          sub_1CC73C210(*(_DWORD *)(*(void *)(v8 + 32) + 36), a2, (uint64_t)&v11);
          if (v13)
          {
            if (v12 < 0x41)
            {
              **(void **)(a1 + 8) = v11 << -(char)v12 >> -(char)v12;
              **(_DWORD **)a1 = *(_DWORD *)(*(void *)(v8 + 32) + 68);
              return 1;
            }
            if (v11) {
              MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CBA14B04()
{
  return 0;
}

uint64_t sub_1CBA14B0C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a2 + 56); i != a2 + 48; uint64_t i = *(void *)(i + 8))
  {
    if (!i || (*(unsigned char *)i & 4) == 0)
    {
      while ((*(_WORD *)(i + 44) & 8) != 0)
        uint64_t i = *(void *)(i + 8);
    }
  }
  return 0;
}

uint64_t sub_1CBA14B48()
{
  return 1;
}

void sub_1CBA14BB0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  int v7 = dword_1CDB0DB98[a4];
  *a5 = dword_1CDB0DB84[a4];
  *a6 = 0;
  *a7 = v7;
}

uint64_t sub_1CBA14BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(unsigned __int16 **)(a2 + 16);
  if ((v3[8] & 0x10) == 0) {
    return 0;
  }
  int v7 = *v3;
  if (sub_1CB91FC94(v7) != 1) {
    return 0;
  }
  unsigned int v8 = v7 - 3922;
  unsigned int v9 = *(_DWORD *)(a3 + 24) & 0xFFFFFF00;
  if ((v7 - 3922) >= 0xFFFFFFA0)
  {
    *(_DWORD *)(a3 + 24) = v9;
    uint64_t v10 = *(void *)(a2 + 32);
  }
  else
  {
    v9 |= 1u;
    *(_DWORD *)(a3 + 24) = v9;
    uint64_t v10 = *(void *)(a2 + 32);
    *(void *)(a3 + 32) = *(unsigned int *)(v10 + 100) | ((unint64_t)*(unsigned int *)(v10 + 120) << 32);
  }
  *(void *)a3 = a2;
  if (*(unsigned char *)(v10 + 64) != 7) {
    return 0;
  }
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(v10 + 68);
  *(_DWORD *)(a3 + 28) = 0;
  int v11 = **(unsigned __int16 **)(a2 + 16);
  int v12 = 0x2000;
  char v13 = v11 - 82;
  if ((v11 - 3922) > 0x3B) {
    goto LABEL_17;
  }
  if (((1 << v13) & 0xFC0000000000FC0) == 0)
  {
    if (((1 << v13) & 0x3F00000000003FLL) != 0)
    {
LABEL_15:
      int v12 = 4096;
      goto LABEL_9;
    }
LABEL_17:
    if (((1 << (v11 + 14)) & 0xFC0000000000FC0) != 0) {
      goto LABEL_9;
    }
    goto LABEL_15;
  }
LABEL_9:
  unsigned int v14 = v12 | v9 & 0xFFFF00FF;
  *(_DWORD *)(a3 + 24) = v14;
  *(void *)(a3 + 8 * (v8 < 0xFFFFFFA0) + 32) = *(void *)(*(void *)(a2 + 32)
                                                             + 32
                                                             * sub_1CBC7A3F8(**(unsigned __int16 **)(a2 + 16), 0x16u)+ 16);
  if (v8 >= 0xFFFFFFA0) {
    int v15 = 0x10000;
  }
  else {
    int v15 = 0x20000;
  }
  *(_DWORD *)(a3 + 24) = v14 & 0xFF0030FF | v15;
  unsigned int v16 = sub_1CBC7A3F8(v7, 0xFu);
  if (v16 != -1)
  {
    uint64_t v17 = *(void *)(a2 + 32) + 32 * v16;
    if (*(unsigned char *)v17 == 1)
    {
      char v18 = 0;
      *(_DWORD *)(a3 + 8) = *(void *)(v17 + 16);
    }
    else
    {
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(v17 + 4);
      *(_DWORD *)(a3 + 12) = (*(_DWORD *)v17 >> 8) & 0xFFF;
      char v18 = 1;
    }
    *(unsigned char *)(a3 + 16) = v18;
  }
  return 1;
}

__int16 ***sub_1CBA14DB8(uint64_t a1, int a2, int a3)
{
  int v3 = (__int16 ****)off_1E66A9A28;
  if (a3 == 16) {
    int v3 = &off_1E66A9A10;
  }
  return v3[a2 - 2];
}

void *sub_1CBA14DDC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 25) << 8 == 4096) {
    return &unk_1CDB0D8C4;
  }
  else {
    return &unk_1CDB0D904;
  }
}

uint64_t sub_1CBA14E00(uint64_t a1, _DWORD *a2, int a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  uint64_t v7 = *(void *)a2;
  switch(**(_WORD **)(*(void *)a2 + 16))
  {
    case 0xF52:
      goto LABEL_24;
    case 0xF53:
      unsigned int v8 = (unsigned int *)&unk_1CDB0DA34;
      break;
    case 0xF54:
      unsigned int v8 = (unsigned int *)&unk_1CDB0DAF4;
      break;
    case 0xF55:
      unsigned int v8 = (unsigned int *)&unk_1CDB0D980;
      break;
    case 0xF56:
      unsigned int v8 = (unsigned int *)&unk_1CDB0DA40;
      break;
    case 0xF57:
      unsigned int v8 = (unsigned int *)&unk_1CDB0DB00;
      break;
    case 0xF58:
      unsigned int v8 = (unsigned int *)&unk_1CDB0D98C;
      break;
    case 0xF59:
      unsigned int v8 = (unsigned int *)&unk_1CDB0DA4C;
      break;
    case 0xF5A:
      unsigned int v8 = (unsigned int *)&unk_1CDB0DB0C;
      break;
    case 0xF5B:
      unsigned int v8 = (unsigned int *)&unk_1CDB0D998;
      break;
    case 0xF5C:
      unsigned int v8 = (unsigned int *)&unk_1CDB0DA58;
      break;
    case 0xF5D:
      unsigned int v8 = (unsigned int *)&unk_1CDB0DB18;
      break;
    case 0xF5E:
    case 0xF5F:
    case 0xF60:
    case 0xF61:
    case 0xF62:
    case 0xF63:
    case 0xF64:
    case 0xF65:
    case 0xF66:
    case 0xF67:
    case 0xF68:
    case 0xF69:
    case 0xF6A:
    case 0xF6B:
    case 0xF6C:
    case 0xF6D:
    case 0xF6E:
    case 0xF6F:
    case 0xF70:
    case 0xF71:
    case 0xF72:
    case 0xF73:
    case 0xF74:
    case 0xF75:
    case 0xF76:
    case 0xF77:
    case 0xF78:
    case 0xF79:
    case 0xF7A:
    case 0xF7B:
    case 0xF7C:
    case 0xF7D:
    case 0xF7E:
    case 0xF7F:
    case 0xF80:
    case 0xF81:
LABEL_23:
      __break(1u);
LABEL_24:
      unsigned int v8 = (unsigned int *)&unk_1CDB0D974;
      break;
    case 0xF82:
      unsigned int v8 = (unsigned int *)&unk_1CDB0D9D4;
      break;
    case 0xF83:
      unsigned int v8 = (unsigned int *)&unk_1CDB0DA94;
      break;
    case 0xF84:
      unsigned int v8 = (unsigned int *)&unk_1CDB0DB54;
      break;
    case 0xF85:
      unsigned int v8 = (unsigned int *)&unk_1CDB0D9E0;
      break;
    case 0xF86:
      unsigned int v8 = (unsigned int *)&unk_1CDB0DAA0;
      break;
    case 0xF87:
      unsigned int v8 = (unsigned int *)&unk_1CDB0DB60;
      break;
    case 0xF88:
      unsigned int v8 = (unsigned int *)&unk_1CDB0D9EC;
      break;
    case 0xF89:
      unsigned int v8 = (unsigned int *)&unk_1CDB0DAAC;
      break;
    case 0xF8A:
      unsigned int v8 = (unsigned int *)&unk_1CDB0DB6C;
      break;
    case 0xF8B:
      unsigned int v8 = (unsigned int *)&unk_1CDB0D9F8;
      break;
    case 0xF8C:
      unsigned int v8 = (unsigned int *)&unk_1CDB0DAB8;
      break;
    case 0xF8D:
      unsigned int v8 = (unsigned int *)&unk_1CDB0DB78;
      break;
    default:
      unsigned int v8 = (unsigned int *)&unk_1CDB0D944;
      switch(**(_WORD **)(*(void *)a2 + 16))
      {
        case 0xEF3:
          unsigned int v8 = (unsigned int *)&unk_1CDB0DA04;
          break;
        case 0xEF4:
          unsigned int v8 = (unsigned int *)&unk_1CDB0DAC4;
          break;
        case 0xEF5:
          unsigned int v8 = (unsigned int *)&unk_1CDB0D950;
          break;
        case 0xEF6:
          unsigned int v8 = (unsigned int *)&unk_1CDB0DA10;
          break;
        case 0xEF7:
          unsigned int v8 = (unsigned int *)&unk_1CDB0DAD0;
          break;
        case 0xEF8:
          unsigned int v8 = (unsigned int *)&unk_1CDB0D95C;
          break;
        case 0xEF9:
          unsigned int v8 = (unsigned int *)&unk_1CDB0DA1C;
          break;
        case 0xEFA:
          unsigned int v8 = (unsigned int *)&unk_1CDB0DADC;
          break;
        case 0xEFB:
          unsigned int v8 = (unsigned int *)&unk_1CDB0D968;
          break;
        case 0xEFC:
          unsigned int v8 = (unsigned int *)&unk_1CDB0DA28;
          break;
        case 0xEFD:
          unsigned int v8 = (unsigned int *)&unk_1CDB0DAE8;
          break;
        case 0xEFE:
        case 0xEFF:
        case 0xF00:
        case 0xF01:
        case 0xF02:
        case 0xF03:
        case 0xF04:
        case 0xF05:
        case 0xF06:
        case 0xF07:
        case 0xF08:
        case 0xF09:
        case 0xF0A:
        case 0xF0B:
        case 0xF0C:
        case 0xF0D:
        case 0xF0E:
        case 0xF0F:
        case 0xF10:
        case 0xF11:
        case 0xF12:
        case 0xF13:
        case 0xF14:
        case 0xF15:
        case 0xF16:
        case 0xF17:
        case 0xF18:
        case 0xF19:
        case 0xF1A:
        case 0xF1B:
        case 0xF1C:
        case 0xF1D:
        case 0xF1E:
        case 0xF1F:
        case 0xF20:
        case 0xF21:
          goto LABEL_23;
        case 0xF22:
          unsigned int v8 = (unsigned int *)&unk_1CDB0D9A4;
          break;
        case 0xF23:
          unsigned int v8 = (unsigned int *)&unk_1CDB0DA64;
          break;
        case 0xF24:
          unsigned int v8 = (unsigned int *)&unk_1CDB0DB24;
          break;
        case 0xF25:
          unsigned int v8 = (unsigned int *)&unk_1CDB0D9B0;
          break;
        case 0xF26:
          unsigned int v8 = (unsigned int *)&unk_1CDB0DA70;
          break;
        case 0xF27:
          unsigned int v8 = (unsigned int *)&unk_1CDB0DB30;
          break;
        case 0xF28:
          unsigned int v8 = (unsigned int *)&unk_1CDB0D9BC;
          break;
        case 0xF29:
          unsigned int v8 = (unsigned int *)&unk_1CDB0DA7C;
          break;
        case 0xF2A:
          unsigned int v8 = (unsigned int *)&unk_1CDB0DB3C;
          break;
        case 0xF2B:
          unsigned int v8 = (unsigned int *)&unk_1CDB0D9C8;
          break;
        case 0xF2C:
          unsigned int v8 = (unsigned int *)&unk_1CDB0DA88;
          break;
        case 0xF2D:
          unsigned int v8 = (unsigned int *)&unk_1CDB0DB48;
          break;
        default:
          goto LABEL_3;
      }
      break;
  }
LABEL_3:
  *(void *)(v7 + 16) = *(void *)(a6 + 8) + 48 * v8[a3 - 2];
  int v9 = a2[6] & 0xFE;
  uint64_t result = llvm::MachineOperand::setReg(*(void *)(v7 + 32), a4);
  **(_DWORD **)(v7 + 32) &= 0xFFF000FF;
  uint64_t v11 = *(void *)(v7 + 32);
  if (v9)
  {
    *(void *)(v11 + 48) = a5;
  }
  else
  {
    *(_DWORD *)(v11 + 68) = a5;
    *(_DWORD *)(v11 + 88) = 0;
  }
  return result;
}

uint64_t sub_1CBA152F8()
{
  return __cxa_atexit((void (*)(void *))llvm::GPUIterateCombiner::~GPUIterateCombiner, off_1EC7DF9D8, &dword_1CB82C000);
}

uint64_t sub_1CBA1531C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 12) = 0u;
  uint64_t v5 = (unsigned int *)(a1 + 12);
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_DWORD *)(a1 + 44) = 0;
  uint64_t v6 = *(void *)(a2 + 48);
  if ((v6 & 7) != 0)
  {
    unint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + 48) = v6 & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 48) = v7;
  int v8 = **(unsigned __int16 **)(a2 + 16);
  if (v8 == 90)
  {
    int v9 = 1;
    *(_DWORD *)(a1 + 8) = 1;
    if (!*(unsigned char *)(a1 + 56)) {
      goto LABEL_19;
    }
    uint64_t v10 = *(int **)(a2 + 32);
LABEL_18:
    unsigned int v16 = v10[1];
    *uint64_t v5 = v16;
    uint64_t v17 = v10 + 17;
    int v9 = 1;
    goto LABEL_22;
  }
  if (v8 == 96)
  {
    int v9 = 3;
    *(_DWORD *)(a1 + 8) = 3;
    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v10 = *(int **)(a2 + 32);
LABEL_21:
      unsigned int v16 = v10[17];
      *uint64_t v5 = v16;
      uint64_t v17 = v10 + 9;
      int v9 = 3;
      goto LABEL_22;
    }
LABEL_19:
    uint64_t v18 = *(void *)(a2 + 32);
    unsigned int v16 = *(_DWORD *)(v18 + 4);
    *uint64_t v5 = v16;
    uint64_t v17 = (int *)(v18 + 36);
    goto LABEL_22;
  }
  uint64_t v11 = *(unsigned int *)(a2 + 40);
  uint64_t v10 = *(int **)(a2 + 32);
  if (v11)
  {
    uint64_t v12 = 0;
    char v13 = *(unsigned __int8 **)(a2 + 32);
    while (1)
    {
      int v14 = *v13;
      v13 += 32;
      if (v14 == 17) {
        break;
      }
      if (v11 == ++v12) {
        goto LABEL_14;
      }
    }
  }
  else
  {
LABEL_14:
    LODWORD(v12) = -1;
  }
  int v15 = v10[8 * v12 + 4];
  if (v15 == 2144)
  {
    *(_DWORD *)(a1 + 8) = 3;
    *(unsigned char *)(a1 + 56) = 1;
    goto LABEL_21;
  }
  if (v15 == 2142)
  {
    *(_DWORD *)(a1 + 8) = 1;
    *(unsigned char *)(a1 + 56) = 1;
    goto LABEL_18;
  }
  __int16 v36 = *(_WORD *)(v7 + 32);
  if (v36) {
    int v37 = 2;
  }
  else {
    int v37 = 5;
  }
  *(_DWORD *)(a1 + 8) = v37;
  uint64_t v17 = v10 + 33;
  if (v36)
  {
    unsigned int v16 = v10[1];
    *uint64_t v5 = v16;
    int v9 = 2;
  }
  else
  {
    unsigned int v16 = v10[25];
    *uint64_t v5 = v16;
    int v9 = 5;
  }
LABEL_22:
  unsigned int v19 = (unint64_t *)(a1 + 24);
  int v20 = *v17;
  *(_DWORD *)(a1 + 20) = v20;
  if ((v16 & 0x80000000) != 0 && (unsigned int v21 = v16 & 0x7FFFFFFF, v21 < *(_DWORD *)(a3 + 432))) {
    unint64_t v22 = *(void *)(*(void *)(a3 + 424) + 8 * v21);
  }
  else {
    unint64_t v22 = 0;
  }
  *unsigned int v19 = v22;
  if (v20 < 0 && (v20 & 0x7FFFFFFFu) < *(_DWORD *)(a3 + 432)) {
    uint64_t v23 = *(void *)(*(void *)(a3 + 424) + 8 * (v20 & 0x7FFFFFFF));
  }
  else {
    uint64_t v23 = 0;
  }
  *(void *)(a1 + 32) = v22;
  *(void *)(a1 + 40) = v23;
  switch(v9)
  {
    case 1:
    case 3:
      if ((v22 & 0xFFFFFFFFFFFFFFF9) == 0 || (v22 & 6) != 4) {
        goto LABEL_121;
      }
      char v24 = 3;
      if ((v22 & 1) == 0) {
        char v24 = 19;
      }
      if ((v22 & 0x8000000000000000 | (8 * (v22 >> v24))) != 0x40) {
        goto LABEL_121;
      }
      if ((v22 & 0x8000000000000) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
        unint64_t v22 = *v19;
      }
      if ((unsigned __int16)(v22 >> 3) > 4u
        || (uint64_t v56 = (1 << *(unsigned char *)(*(void *)(a1 + 48) + 34)) | *(void *)(*(void *)(a1 + 48) + 8),
            (v56 & -v56) != 1))
      {
LABEL_121:
        uint64_t v25 = v22;
        unint64_t v22 = 4194332;
        if (v25 != 4194332) {
          goto LABEL_41;
        }
      }
      unint64_t v26 = *(void *)(a1 + 40);
      char v27 = 35;
      if ((v26 & 4) == 0) {
        char v27 = 19;
      }
      if (((v26 >> v27) & 0xFFFFFF) != 0x40)
      {
        uint64_t v38 = 0x800000000000000;
        if ((v22 & 2) == 0) {
          uint64_t v38 = 0x8000000000000;
        }
        if ((v38 & v22) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
          unint64_t v22 = *v19;
        }
        uint64_t v39 = v22 & 0x7FFF8;
        goto LABEL_83;
      }
      uint64_t v25 = v22;
LABEL_41:
      if (v25 > 4194323)
      {
        if (v25 > 4194355)
        {
          if (v25 == 4194356)
          {
LABEL_78:
            uint64_t v40 = 0x800000000000000;
            if ((v25 & 2) == 0) {
              uint64_t v40 = 0x8000000000000;
            }
            if ((v40 & v25) != 0)
            {
              llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
              uint64_t v25 = *v19;
            }
            uint64_t v39 = ((unint64_t)v25 >> 1) & 0x3FFF8;
LABEL_83:
            unint64_t v22 = v39 | 0x800004;
            goto LABEL_84;
          }
          unsigned __int16 v28 = 68;
          goto LABEL_77;
        }
        if (v25 != 4194324)
        {
          unsigned __int16 v28 = 36;
LABEL_77:
          if (v25 == (v28 | 0x400000)) {
            goto LABEL_78;
          }
          goto LABEL_99;
        }
LABEL_64:
        unint64_t v22 = 129;
        goto LABEL_84;
      }
      if (v25 == 9 || v25 == 65) {
        goto LABEL_64;
      }
      if (v25 == 513) {
        goto LABEL_61;
      }
LABEL_99:
      uint64_t v52 = v25 & 6;
      if ((v25 & 0xFFFFFFFFFFFFFFF9) != 0 && v52 == 4)
      {
        char v53 = 3;
        if ((v25 & 1) == 0) {
          char v53 = 19;
        }
        if ((v25 & 0x8000000000000000 | (8 * ((unint64_t)v25 >> v53))) != 0x200) {
          goto LABEL_112;
        }
LABEL_61:
        unint64_t v35 = sub_1CB8F1DC4((unint64_t *)(a1 + 24));
        if (v34 == 1) {
        unint64_t v22 = ((v35 >> 2) & 0x7FFF8 | 0x800004) + 0x800000;
        }
        goto LABEL_84;
      }
      if ((v25 & 0xFFFFFFFFFFFFFFF9) != 0 && v52 == 2)
      {
        uint64_t v55 = sub_1CB8F1DC4((unint64_t *)(a1 + 24));
        if (v54 == 1) {
        if (v55 == 32)
        }
          unint64_t v22 = 257;
        else {
          unint64_t v22 = 16777236;
        }
        goto LABEL_84;
      }
LABEL_112:
      unint64_t v22 = *(void *)(a1 + 32);
LABEL_85:
      if (*v19 == v22)
      {
        unsigned int IncompleteVirtualRegister = *v5;
      }
      else
      {
        unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a3, "", 0);
        unint64_t v42 = IncompleteVirtualRegister & 0x7FFFFFFF;
        *(void *)(*(void *)(a3 + 24) + 16 * v42) = 4;
        unint64_t v43 = *(unsigned int *)(a3 + 432);
        if (v42 >= v43)
        {
          uint64_t v44 = *(void *)(a3 + 440);
          uint64_t v45 = v42 + 1 - v43;
          if (v42 >= *(unsigned int *)(a3 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v46 = *(_DWORD *)(a3 + 432);
          if (v45)
          {
            uint64_t v47 = (void *)(*(void *)(a3 + 424) + 8 * *(unsigned int *)(a3 + 432));
            uint64_t v48 = ~v42 + v43;
            do
              *v47++ = v44;
            while (!__CFADD__(v48++, 1));
            int v46 = *(_DWORD *)(a3 + 432);
          }
          *(_DWORD *)(a3 + 432) = v46 + v45;
        }
        *(void *)(*(void *)(a3 + 424) + 8 * v42) = v22;
        uint64_t v50 = *(void *)(a3 + 8);
        if (v50) {
          (*(void (**)(uint64_t, void))(*(void *)v50 + 24))(v50, IncompleteVirtualRegister);
        }
      }
      *(_DWORD *)(a1 + 16) = IncompleteVirtualRegister;
      return a1;
    case 2:
    case 5:
      uint64_t v29 = *(unsigned int *)(a2 + 40);
      if (!v29) {
        goto LABEL_49;
      }
      uint64_t v30 = 0;
      unsigned int v31 = *(unsigned __int8 **)(a2 + 32);
      while (1)
      {
        int v32 = *v31;
        v31 += 32;
        if (v32 == 17) {
          break;
        }
        if (v29 == ++v30)
        {
LABEL_49:
          LODWORD(v30) = -1;
          break;
        }
      }
      int v33 = *(_DWORD *)(*(void *)(a2 + 32) + 32 * v30 + 16);
      if (v33 > 2645)
      {
        if ((v33 - 2646) >= 4)
        {
          if ((v33 - 2650) > 3) {
            goto LABEL_85;
          }
          goto LABEL_56;
        }
      }
      else if ((v33 - 2392) >= 4)
      {
        if ((v33 - 2396) >= 4) {
          goto LABEL_85;
        }
LABEL_56:
        unint64_t v22 = 16777244;
        goto LABEL_84;
      }
      unint64_t v22 = 8388636;
LABEL_84:
      *(void *)(a1 + 32) = v22;
      goto LABEL_85;
    default:
      goto LABEL_85;
  }
}

uint64_t sub_1CBA15978(unint64_t *a1)
{
  unint64_t v1 = *a1;
  char v2 = 3;
  if ((*a1 & 1) == 0) {
    char v2 = 19;
  }
  unint64_t v3 = v1 & 0x8000000000000000 | (8 * (v1 >> v2)) | 1;
  char v4 = 35;
  char v5 = 19;
  if ((v1 & 4) == 0) {
    char v4 = 19;
  }
  unint64_t v6 = v1 >> v4;
  if ((v1 & 4) == 0) {
    char v5 = 3;
  }
  if (v1) {
    char v5 = 3;
  }
  unint64_t v7 = (8 * (unsigned __int16)(v1 >> v5)) & 0xFFFFF8000007FFFFLL | ((v6 & 0xFFFFFF) << 19);
  if ((v1 & 2) != 0) {
    return v7 | 2;
  }
  else {
    return v3;
  }
}

unint64_t sub_1CBA159DC(_DWORD *a1, const char *a2)
{
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = *(void *)(*(void *)a1 + 24);
  unint64_t v5 = *(void *)(*(void *)a1 + 32);
  unint64_t v98 = v5;
  unint64_t v6 = *(void *)(v3 + 40);
  char v7 = 35;
  if ((v6 & 4) == 0) {
    char v7 = 19;
  }
  uint64_t v8 = (v6 >> v7) & 0xFFFFFF;
  a1[12] = v8;
  uint64_t v9 = *(void *)(v3 + 48);
  uint64_t v11 = *(void *)(v9 + 24);
  uint64_t v10 = (unint64_t *)(v9 + 24);
  if ((v11 & 0xFFFFFFFFFFFFFFF9) == 0) {
    goto LABEL_7;
  }
  uint64_t v12 = sub_1CB8F1DC4(v10) + 7;
  if (a2 == 1) {
  if ((v12 & 0xFFFFFFFFFFFFFFF8) == 8)
  }
  {
    BOOL v18 = 1;
  }
  else
  {
LABEL_7:
    BOOL v13 = (v4 & 0xFFFFFFFFFFFFFFF9) == 0 || (v4 & 4) == 0;
    if (v13) {
      goto LABEL_25;
    }
    BOOL v14 = (v5 & 0xFFFFFFFFFFFFFFF9) == 0 || (v5 & 4) == 0;
    if (v14 || (v4 & 2) != 0) {
      goto LABEL_25;
    }
    char v16 = 3;
    if ((v4 & 1) == 0) {
      char v16 = 19;
    }
    if ((v4 & 0x8000000000000000 | (8 * (v4 >> v16))) != 0x40 || (v5 & 2) != 0) {
      goto LABEL_25;
    }
    char v84 = 3;
    if ((v5 & 1) == 0) {
      char v84 = 19;
    }
    if ((v5 & 0x8000000000000000 | (8 * (v5 >> v84))) == 0x80)
    {
      if ((v4 & 0x8000000000000) != 0) {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", a2);
      }
      if ((v5 & 0x8000000000000) != 0) {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", a2);
      }
      BOOL v18 = (unsigned __int16)(v4 >> 3) == (unsigned __int16)(v5 >> 3);
    }
    else
    {
LABEL_25:
      BOOL v18 = 0;
    }
  }
  unsigned int v19 = *(uint64_t **)(*(void *)(**(void **)a1 + 24) + 32);
  uint64_t v20 = *v19;
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v19[1] + 16))(v19[1], *v19);
  uint64_t v23 = (unsigned char *)result;
  *((void *)a1 + 2) = result;
  int v24 = *(_DWORD *)(*(void *)a1 + 8);
  if (v24 == 2 || v24 == 5)
  {
    a1[7] = v24 != 2;
    uint64_t v54 = (v5 >> 2) & 1;
    if ((v5 & 0xFFFFFFFFFFFFFFF9) == 0) {
      LODWORD(v54) = 0;
    }
    if (v54 == 1)
    {
      uint64_t v55 = 0x800000000000000;
      if ((v5 & 2) == 0) {
        uint64_t v55 = 0x8000000000000;
      }
      if ((v55 & v5) != 0)
      {
        int v95 = v54;
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v22);
        LODWORD(v54) = v95;
      }
      uint64_t v56 = qword_1CDB0E528[(uint64_t)((v5 << 45) - 0x1000000000000) >> 48];
    }
    else
    {
      uint64_t v56 = 0;
    }
    *((void *)a1 + 4) = v56;
    uint64_t v57 = *((void *)a1 + 1);
    int v58 = *(_DWORD *)(*(void *)a1 + 8);
    uint64_t v59 = 96;
    if (v58 != 2) {
      uint64_t v59 = 64;
    }
    uint64_t v60 = *(void *)(**(void **)a1 + 32);
    uint64_t v61 = *(unsigned int *)(v60 + v59 + 4);
    if ((v61 & 0x80000000) != 0) {
      unint64_t v62 = (uint64_t *)(*(void *)(v57 + 24) + 16 * (v61 & 0x7FFFFFFF) + 8);
    }
    else {
      unint64_t v62 = (uint64_t *)(*(void *)(v57 + 272) + 8 * v61);
    }
    uint64_t v63 = *v62;
    if ((*(unsigned char *)(v63 + 3) & 1) == 0) {
      uint64_t v63 = *(void *)(v63 + 24);
    }
    uint64_t v64 = *(void *)(*(void *)(*(void *)(v63 + 8) + 32) + 48);
    int v65 = (void *)(v64 + 24);
    if (*(_DWORD *)(v64 + 32) >= 0x41u) {
      int v65 = (void *)*v65;
    }
    BOOL v13 = v58 == 2;
    uint64_t v66 = 32;
    if (v13) {
      uint64_t v66 = 64;
    }
    uint64_t v67 = *(unsigned int *)(v60 + v66 + 4);
    if ((v67 & 0x80000000) != 0) {
      unint64_t v68 = (uint64_t *)(*(void *)(v57 + 24) + 16 * (v67 & 0x7FFFFFFF) + 8);
    }
    else {
      unint64_t v68 = (uint64_t *)(*(void *)(v57 + 272) + 8 * v67);
    }
    uint64_t v69 = *v68;
    if ((*(unsigned char *)(v69 + 3) & 1) == 0) {
      uint64_t v69 = *(void *)(v69 + 24);
    }
    uint64_t v70 = *(void *)(*(void *)(*(void *)(v69 + 8) + 32) + 48);
    uint64_t v71 = (void *)(v70 + 24);
    if (*(_DWORD *)(v70 + 32) >= 0x41u) {
      uint64_t v71 = (void *)*v71;
    }
    int v72 = *(_DWORD *)v65;
    unsigned int v73 = (void *)*v71;
    if (v54)
    {
      char v74 = 3;
      if ((v5 & 1) == 0) {
        char v74 = 19;
      }
      unint64_t v75 = v5 >> v74;
      if ((v5 & 2) != 0) {
        unint64_t v76 = (v5 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v75) | 2;
      }
      else {
        unint64_t v76 = v5 & 0x8000000000000000 | (8 * v75) | 1;
      }
      unint64_t v97 = v76;
      unsigned int v77 = &v97;
    }
    else
    {
      unsigned int v77 = &v98;
    }
    uint64_t v78 = v73 & 0xF;
    unint64_t result = sub_1CB8F1DC4(v77);
    if (v79 == 1)
    {
      unint64_t v90 = result;
      unint64_t result = v90;
    }
    if (v78 == 2 && *((_WORD *)a1 + 12) == 2) {
      llvm::report_fatal_error((llvm *)"Loading 32-bit sized data into 16-bit registers is undefined.", (const llvm::Twine *)1);
    }
    v80.i32[0] = v72 & 0xF;
    uint64_t v81 = (16 * v80.i32[0]);
    v80.i16[0] = vaddlv_u8((uint8x8_t)vcnt_s8(v80));
    uint64_t v82 = ((void)v73 << 50) & 0x3FC0000000000000;
    unsigned int v37 = result >> 3;
    uint64_t v83 = **(void **)a1;
    if (*(_DWORD *)(v83 + 40) == 6)
    {
      __int16 v96 = v80.i16[0];
      uint64_t v91 = v82;
      unint64_t result = llvm::MachineRegisterInfo::getVRegDef(*((void *)a1 + 1), *(_DWORD *)(*(void *)(v83 + 32) + 164));
      uint64_t v92 = *(void *)(*(void *)(result + 32) + 48);
      int v93 = (void *)(v92 + 24);
      if (*(_DWORD *)(v92 + 32) >= 0x41u) {
        int v93 = (void *)*v93;
      }
      int v94 = *((unsigned __int8 *)a1 + 64);
      *((void *)a1 + 7) = *v93;
      uint64_t v82 = v91;
      v80.i16[0] = v96;
      if (!v94) {
        *((unsigned char *)a1 + 64) = 1;
      }
    }
    int v33 = 0;
    LOWORD(v31) = v80.i16[0];
    *((void *)a1 + 4) |= v82 | v81 | v78;
  }
  else
  {
    uint64_t v26 = *(void *)(*(void *)a1 + 48);
    uint64_t v27 = (1 << *(unsigned char *)(v26 + 34)) | *(void *)(v26 + 8);
    unint64_t v28 = 1 << (63 - __clz(v27 & -v27));
    unsigned int v29 = *(unsigned __int16 *)(v26 + 32);
    a1[7] = v24 != 1;
    if ((v5 & 0xFFFFFFFFFFFFFFF9) != 0 && (v5 & 4) != 0)
    {
      uint64_t v30 = 0x800000000000000;
      if ((v5 & 2) == 0) {
        uint64_t v30 = 0x8000000000000;
      }
      if ((v30 & v5) != 0) {
        unint64_t result = (unint64_t)llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v22);
      }
      unsigned int v31 = (unsigned __int16)(v5 >> 3);
      uint64_t v32 = (v5 >> 22) & 0x1FFF;
      if ((v5 & 2) == 0) {
        uint64_t v32 = (v5 >> 22) & 0x1FFFFFFF;
      }
      if (v5) {
        uint64_t v32 = (v5 >> 6) & 0x1FFFFFFF;
      }
    }
    else
    {
      unint64_t result = sub_1CB8F1DC4(&v98);
      if (v52 == 1)
      {
        unint64_t v89 = result;
        unint64_t result = v89;
      }
      uint64_t v32 = result >> 3;
      unsigned int v31 = 1;
    }
    int v33 = (v29 >> 3) & 1;
    char v34 = v28 >= v32 || v18;
    if ((v34 & 1) == 0)
    {
      unsigned int v85 = v31 * v32;
      LODWORD(v32) = v28;
      unsigned int v31 = v85 / v28;
    }
    uint64_t v35 = 1;
    if (v32 != 2) {
      uint64_t v35 = 2;
    }
    if (v18) {
      uint64_t v35 = 0;
    }
    uint64_t v36 = 1024;
    if (v31 == 2) {
      uint64_t v36 = 512;
    }
    if (v31 == 1) {
      uint64_t v36 = 0;
    }
    *((void *)a1 + 4) = v36 | v35 | (16 * (~(-1 << v31) & 0xFu));
    LOWORD(v37) = v32;
  }
  *((_WORD *)a1 + 13) = v31;
  *((_WORD *)a1 + 12) = v37;
  if ((unsigned __int16)v37 == 1)
  {
    *((_WORD *)a1 + 12) = 2;
    *((_WORD *)a1 + 13) = ((unsigned __int16)v31 + 1) >> 1;
  }
  if (*((unsigned char *)a1 + 64))
  {
    uint64_t v51 = *((void *)a1 + 7);
LABEL_85:
    *((void *)a1 + 5) = v51;
    return result;
  }
  unsigned int v38 = a1[12];
  if (v38 < 3 || (unsigned int v53 = v38 - 10, v53 <= 0x3D) && ((1 << v53) & 0x30C0000000000001) != 0)
  {
    if (v23[318])
    {
      uint64_t v39 = 4;
    }
    else if (v23[319])
    {
      uint64_t v39 = 5;
    }
    else if (v23[320])
    {
      uint64_t v39 = 6;
    }
    else if (v23[321])
    {
      uint64_t v39 = 7;
    }
    else
    {
      uint64_t v39 = 9;
    }
    if (v23[364]) {
      int v40 = (*(uint64_t (**)(uint64_t))(*(void *)v19[43] + 648))(v19[43]);
    }
    else {
      int v40 = 1;
    }
    if (v8 == 1)
    {
      if (v39 == 5) {
        int v41 = v40;
      }
      else {
        int v41 = 0;
      }
      if (v23[372]) {
        int v42 = 3;
      }
      else {
        int v42 = v41;
      }
    }
    else
    {
      int v42 = 0;
    }
    unsigned int v43 = *(_DWORD *)(*(void *)a1 + 8) - 1;
    if (v43 > 1)
    {
      if (!v23[371])
      {
        LODWORD(v97) = 0;
        uint64_t v44 = "MemoryWriteCacheCtl";
LABEL_72:
        int v45 = sub_1CBA864D8((int)v23, v20, v44, (int *)&v97);
        unsigned int v46 = v97;
        if (!v45) {
          unsigned int v46 = v42;
        }
        goto LABEL_74;
      }
    }
    else if (!v23[371])
    {
      LODWORD(v97) = 0;
      uint64_t v44 = "MemoryReadCacheCtl";
      goto LABEL_72;
    }
    unsigned int v46 = 0;
LABEL_74:
    if (v33) {
      unsigned int v47 = 3;
    }
    else {
      unsigned int v47 = v46;
    }
    if (*(unsigned char *)(*(void *)a1 + 56))
    {
      uint64_t v86 = *(void *)(*(void *)(llvm::MachineRegisterInfo::getVRegDef(*((void *)a1 + 1), *(_DWORD *)(*(void *)(**(void **)a1 + 32) + 100))+ 32)+ 48);
      int v87 = (unint64_t *)(v86 + 24);
      if (*(_DWORD *)(v86 + 32) >= 0x41u) {
        int v87 = (unint64_t *)*v87;
      }
      unint64_t v88 = *v87;
      if (v88 <= 2) {
        unsigned int v47 = dword_1CDB0E548[v88];
      }
    }
    LODWORD(v97) = 0;
    if (v43 > 1) {
      uint64_t v48 = "MemoryWriteL2Pers";
    }
    else {
      uint64_t v48 = "MemoryReadL2Pers";
    }
    unint64_t result = sub_1CBA864D8((int)v23, v20, v48, (int *)&v97);
    unsigned int v49 = v97;
    if (!result) {
      unsigned int v49 = 1;
    }
    uint64_t v50 = 4 * v49;
    if (v47 == 3) {
      uint64_t v50 = 4;
    }
    uint64_t v51 = v50 | v47;
    goto LABEL_85;
  }
  return result;
}

void *sub_1CBA161D8(void *a1, unsigned __int8 *a2, __n128 a3)
{
  uint64_t v484 = *MEMORY[0x1E4F143B8];
  *a1 = &unk_1F261CA88;
  uint64_t v5 = (uint64_t)(a1 + 4432);
  uint64_t v6 = 1;
  a3.n128_u64[0] = 0x200000000;
  do
  {
    char v7 = &a1[v6];
    *(_DWORD *)char v7 = 0;
    *((unsigned char *)v7 + 4) = 0;
    v7[1] = &a1[v6 + 3];
    v7[2] = 0x200000000;
    v6 += 21;
  }
  while (v7 + 21 != (void *)v5);
  sub_1CD62A5BC(a1 + 4432, a3);
  *a1 = &unk_1F25F2790;
  unint64_t v311 = 897;
  unsigned int v9 = sub_1CB8F1DC4(&v311);
  if (v8 == 1) {
  unint64_t v310 = 3073;
  }
  unsigned int v11 = sub_1CB8F1DC4(&v310);
  if (v10 == 1) {
  uint64_t v12 = sub_1CC72D384((uint64_t)a1, 68);
  }
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DC70;
  int64x2_t v379 = (int64x2_t)xmmword_1CDB0DC80;
  long long v380 = xmmword_1CDB0DC90;
  *(void *)&long long v381 = 4194372;
  uint64_t v13 = sub_1CBA59D24(v12, 0, &v378, 7);
  unsigned int v308 = v9;
  unsigned int v309 = v11;
  v482[0] = &unk_1F25F29C0;
  v482[1] = v9 | ((unint64_t)v11 << 32);
  int v483 = v482;
  uint64_t v14 = sub_1CBA1A5F0(v13, (uint64_t)v482);
  uint64_t v15 = sub_1CBA1ADF0(v14, 0, 0x81uLL);
  uint64_t v16 = sub_1CBA1B484(v15, 0, 0x101uLL);
  uint64_t v17 = sub_1CBA1A6C8(v16, 0, 16);
  uint64_t v18 = sub_1CD410214(v17, 0, 0x80024uLL, 524324);
  uint64_t v19 = sub_1CD410214(v18, 0, 0x400014uLL, 4194372);
  uint64_t v20 = sub_1CD410214(v19, 0, 0x800014uLL, 8388676);
  uint64_t v21 = sub_1CD410214(v20, 0, 0x1000014uLL, 16777252);
  *(void *)&long long v323 = 129;
  sub_1CD6172BC(0, &v323, 1, (uint64_t)v478);
  sub_1CD6175B0(0, 2, v476);
  sub_1CBA1A9A0((uint64_t)v478, (uint64_t)v476, (uint64_t)v480);
  sub_1CD617848(0, 0, v474);
  uint64_t v22 = sub_1CBA1A848(v21, (uint64_t)v480, (uint64_t)v474);
  sub_1CD4102E0(v22, 0);
  if (v475 == v474)
  {
    (*(void (**)(void *))(v474[0] + 32))(v474);
  }
  else if (v475)
  {
    (*(void (**)(void))(*v475 + 40))();
  }
  if (v481 == v480)
  {
    (*(void (**)(void *))(v480[0] + 32))(v480);
  }
  else if (v481)
  {
    (*(void (**)(void))(*v481 + 40))();
  }
  if (v477 == v476)
  {
    (*(void (**)(void *))(v476[0] + 32))(v476);
  }
  else if (v477)
  {
    (*(void (**)(void))(*v477 + 40))();
  }
  if (v479 == v478)
  {
    (*(void (**)(void *))(v478[0] + 32))(v478);
  }
  else if (v479)
  {
    (*(void (**)(void))(*v479 + 40))();
  }
  if (v483 == v482)
  {
    (*(void (**)(void *))(v482[0] + 32))(v482);
  }
  else if (v483)
  {
    (*(void (**)(void))(*v483 + 40))();
  }
  uint64_t v23 = sub_1CC72D384((uint64_t)a1, 83);
  v472[0] = &unk_1F25F29C0;
  v472[1] = v9 | ((unint64_t)v11 << 32);
  uint64_t v473 = v472;
  uint64_t v24 = sub_1CBA1A5F0(v23, (uint64_t)v472);
  uint64_t v25 = sub_1CBA1ADF0(v24, 0, 0x81uLL);
  uint64_t v26 = sub_1CBA1B484(v25, 0, 0x101uLL);
  uint64_t v27 = sub_1CBA1A6C8(v26, 0, 16);
  uint64_t v28 = sub_1CD410214(v27, 0, 0x400014uLL, 4194372);
  uint64_t v29 = sub_1CD410214(v28, 0, 0x800014uLL, 8388676);
  uint64_t v30 = sub_1CD410214(v29, 0, 0x1000014uLL, 16777252);
  v378.i64[0] = 129;
  sub_1CD6172BC(0, &v378, 1, (uint64_t)v468);
  sub_1CD6175B0(0, 2, v466);
  sub_1CBA1A9A0((uint64_t)v468, (uint64_t)v466, (uint64_t)v470);
  sub_1CD617848(0, 0, v464);
  uint64_t v31 = sub_1CBA1A848(v30, (uint64_t)v470, (uint64_t)v464);
  sub_1CD4102E0(v31, 0);
  if (v465 == v464)
  {
    (*(void (**)(void *))(v464[0] + 32))(v464);
  }
  else if (v465)
  {
    (*(void (**)(void))(*v465 + 40))();
  }
  if (v471 == v470)
  {
    (*(void (**)(void *))(v470[0] + 32))(v470);
  }
  else if (v471)
  {
    (*(void (**)(void))(*v471 + 40))();
  }
  if (v467 == v466)
  {
    (*(void (**)(void *))(v466[0] + 32))(v466);
  }
  else if (v467)
  {
    (*(void (**)(void))(*v467 + 40))();
  }
  if (v469 == v468)
  {
    (*(void (**)(void *))(v468[0] + 32))(v468);
  }
  else if (v469)
  {
    (*(void (**)(void))(*v469 + 40))();
  }
  if (v473 == v472)
  {
    (*(void (**)(void *))(v472[0] + 32))(v472);
  }
  else if (v473)
  {
    (*(void (**)(void))(*v473 + 40))();
  }
  uint64_t v32 = sub_1CC72D384((uint64_t)a1, 221);
  v462[0] = &unk_1F25F2A08;
  size_t v463 = v462;
  sub_1CBA1A5F0(v32, (uint64_t)v462);
  if (v463 == v462)
  {
    (*(void (**)(void *))(v462[0] + 32))(v462);
  }
  else if (v463)
  {
    (*(void (**)(void))(*v463 + 40))();
  }
  uint64_t v33 = sub_1CC72D384((uint64_t)a1, 69);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DCA0;
  int64x2_t v379 = (int64x2_t)xmmword_1CDB0DCB0;
  long long v380 = xmmword_1CDB0DCC0;
  long long v381 = xmmword_1CDB0DCD0;
  long long v382 = xmmword_1CDB0DCE0;
  long long v383 = xmmword_1CDB0DCF0;
  long long v384 = xmmword_1CDB0DD00;
  long long v385 = xmmword_1CDB0DD10;
  long long v386 = xmmword_1CDB0DD20;
  int64x2_t v387 = (int64x2_t)xmmword_1CDB0DD30;
  long long v388 = xmmword_1CDB0DD40;
  long long v389 = xmmword_1CDB0DD50;
  *(void *)&long long v390 = 2097666;
  uint64_t v34 = sub_1CBA59D24(v33, 0, &v378, 25);
  uint64_t v35 = sub_1CBA1A6C8(v34, 0, 0);
  uint64_t v36 = sub_1CBA1ADF0(v35, 0, 0x81uLL);
  uint64_t v37 = sub_1CBA1B484(v36, 0, 0x201uLL);
  uint64_t v38 = sub_1CD410214(v37, 0, 0x800014uLL, 8388644);
  uint64_t v39 = sub_1CD410214(v38, 0, 0x1000014uLL, 16777252);
  v460[0] = &unk_1F25F2A50;
  unsigned int v461 = v460;
  v458[0] = &unk_1F261C798;
  v458[1] = 0x1000000000;
  uint64_t v459 = v458;
  uint64_t v40 = sub_1CBA1ABC0(v39, (uint64_t)v460, (uint64_t)v458);
  sub_1CD410214(v40, 0, 0x2000014uLL, 33554452);
  if (v459 == v458)
  {
    (*(void (**)(void *))(v458[0] + 32))(v458);
  }
  else if (v459)
  {
    (*(void (**)(void))(*v459 + 40))();
  }
  if (v461 == v460)
  {
    (*(void (**)(void *))(v460[0] + 32))(v460);
  }
  else if (v461)
  {
    (*(void (**)(void))(*v461 + 40))();
  }
  uint64_t v41 = sub_1CC72D384((uint64_t)a1, 120);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  v379.i64[0] = 513;
  uint64_t v42 = sub_1CBA59D24(v41, 0, &v378, 3);
  uint64_t v43 = sub_1CBA1ADF0(v42, 0, 0x81uLL);
  uint64_t v44 = sub_1CBA1B484(v43, 0, 0x201uLL);
  sub_1CBA1A6C8(v44, 0, 0);
  uint64_t v45 = sub_1CC72D384((uint64_t)a1, 121);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  uint64_t v46 = sub_1CBA59D24(v45, 0, &v378, 2);
  uint64_t v47 = sub_1CBA1ADF0(v46, 0, 0x81uLL);
  uint64_t v48 = sub_1CBA1B484(v47, 0, 0x101uLL);
  sub_1CBA1A6C8(v48, 0, 0);
  if (a2[357])
  {
    *(void *)&long long v323 = 0x2E0000002DLL;
    uint64_t v302 = sub_1CC72D3AC((uint64_t)a1, (int *)&v323, 2);
    int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
    uint64_t v303 = sub_1CBA59D24(v302, 0, &v378, 2);
    *(void *)&long long v321 = 513;
    uint64_t v304 = sub_1CBA59D24(v303, 8, &v321, 1);
    uint64_t v305 = sub_1CBA1ADF0(v304, 0, 0x81uLL);
    uint64_t v306 = sub_1CBA1B484(v305, 0, 0x101uLL);
    uint64_t v307 = sub_1CBA1A6C8(v306, 0, 0);
    v454[0] = &unk_1F25F2A98;
    uint64_t v455 = v454;
    sub_1CBA1AD18(v307, (uint64_t)v454);
    if (v455 == v454)
    {
      (*(void (**)(void *))(v454[0] + 32))(v454);
    }
    else if (v455)
    {
      (*(void (**)(void))(*v455 + 40))();
    }
  }
  else
  {
    *(void *)&long long v323 = 0x2E0000002DLL;
    uint64_t v49 = sub_1CC72D3AC((uint64_t)a1, (int *)&v323, 2);
    int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
    v379.i64[0] = 513;
    uint64_t v50 = sub_1CBA59D24(v49, 0, &v378, 3);
    uint64_t v51 = sub_1CBA1ADF0(v50, 0, 0x81uLL);
    uint64_t v52 = sub_1CBA1B484(v51, 0, 0x201uLL);
    uint64_t v53 = sub_1CBA1A6C8(v52, 0, 0);
    v456[0] = &unk_1F25F2A98;
    size_t v457 = v456;
    sub_1CBA1AD18(v53, (uint64_t)v456);
    if (v457 == v456)
    {
      (*(void (**)(void *))(v456[0] + 32))(v456);
    }
    else if (v457)
    {
      (*(void (**)(void))(*v457 + 40))();
    }
  }
  *(void *)&long long v323 = 0x4200000041;
  DWORD2(v323) = 67;
  uint64_t v54 = sub_1CC72D3AC((uint64_t)a1, (int *)&v323, 3);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  uint64_t v55 = sub_1CBA59D24(v54, 0, &v378, 2);
  v452[0] = &unk_1F25F2AE0;
  v452[1] = 513;
  uint64_t v453 = v452;
  uint64_t v56 = sub_1CBA1AD18(v55, (uint64_t)v452);
  uint64_t v57 = sub_1CBA1ADF0(v56, 0, 0x81uLL);
  uint64_t v58 = sub_1CBA1B484(v57, 0, 0x101uLL);
  sub_1CBA1A6C8(v58, 0, 0);
  if (v453 == v452)
  {
    (*(void (**)(void *))(v452[0] + 32))(v452);
  }
  else if (v453)
  {
    (*(void (**)(void))(*v453 + 40))();
  }
  uint64_t v59 = sub_1CC72D384((uint64_t)a1, 47);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  uint64_t v60 = sub_1CBA59D24(v59, 0, &v378, 2);
  v450[0] = &unk_1F25F2B28;
  v450[1] = 513;
  unsigned int v451 = v450;
  uint64_t v61 = sub_1CBA1AD18(v60, (uint64_t)v450);
  uint64_t v62 = sub_1CBA1ADF0(v61, 0, 0x81uLL);
  uint64_t v63 = sub_1CBA1B484(v62, 0, 0x201uLL);
  sub_1CBA1A6C8(v63, 0, 0);
  if (v451 == v450)
  {
    (*(void (**)(void *))(v450[0] + 32))(v450);
  }
  else if (v451)
  {
    (*(void (**)(void))(*v451 + 40))();
  }
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD70;
  uint64_t v64 = sub_1CC72D3AC((uint64_t)a1, v378.i32, 4);
  long long v323 = xmmword_1CDB0DD60;
  uint64_t v65 = sub_1CBA59D24(v64, 0, &v323, 2);
  uint64_t v66 = sub_1CD410440(v65, 0);
  uint64_t v67 = sub_1CBA1ADF0(v66, 0, 0x101uLL);
  uint64_t v68 = sub_1CBA1A6C8(v67, 0, 0);
  sub_1CD41059C(v68);
  v378.i64[0] = 0x8300000082;
  uint64_t v69 = sub_1CC72D3AC((uint64_t)a1, v378.i32, 2);
  sub_1CD410694(v69);
  *(void *)&long long v321 = 0x810000007FLL;
  DWORD2(v321) = 128;
  uint64_t v70 = sub_1CC72D3AC((uint64_t)a1, (int *)&v321, 3);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  v379.i64[0] = 513;
  long long v323 = xmmword_1CDB0DD60;
  *(void *)&long long v324 = 513;
  uint64_t v71 = sub_1CD411620(v70, 0, &v378, 3, &v323, 3);
  uint64_t v72 = sub_1CBA1A6C8(v71, 0, 0);
  uint64_t v73 = sub_1CBA1A6C8(v72, 1u, 0);
  uint64_t v74 = sub_1CBA1ADF0(v73, 0, 0x81uLL);
  uint64_t v75 = sub_1CBA1B484(v74, 0, 0x201uLL);
  uint64_t v76 = sub_1CBA1ADF0(v75, 1u, 0x81uLL);
  uint64_t v77 = sub_1CBA1B484(v76, 1u, 0x201uLL);
  v448[0] = &unk_1F25F2A98;
  uint64_t v449 = v448;
  sub_1CBA1AD18(v77, (uint64_t)v448);
  if (v449 == v448)
  {
    (*(void (**)(void *))(v448[0] + 32))(v448);
  }
  else if (v449)
  {
    (*(void (**)(void))(*v449 + 40))();
  }
  v378.i64[0] = 0x3C0000003BLL;
  uint64_t v78 = sub_1CC72D3AC((uint64_t)a1, v378.i32, 2);
  long long v446 = xmmword_1CDB0DD60;
  uint64_t v445 = (void (**)(void **))&unk_1F25F2B70;
  uint64_t v447 = (void **)&v445;
  uint64_t v79 = sub_1CBA1AD18(v78, (uint64_t)&v445);
  uint64_t v80 = sub_1CBA1ADF0(v79, 0, 0x81uLL);
  uint64_t v81 = sub_1CBA1B484(v80, 0, 0x101uLL);
  sub_1CBA1A6C8(v81, 0, 0);
  if (v447 == (void **)&v445)
  {
    v445[4]((void **)&v445);
  }
  else if (v447)
  {
    (*((void (**)(void))*v447 + 5))();
  }
  v378.i64[0] = 0x9300000094;
  uint64_t v82 = sub_1CC72D3AC((uint64_t)a1, v378.i32, 2);
  long long v443 = xmmword_1CDB0DD60;
  v442 = (void (**)(void **))&unk_1F25F2BB8;
  uint64_t v444 = (void **)&v442;
  sub_1CBA1AD18(v82, (uint64_t)&v442);
  if (v444 == (void **)&v442)
  {
    v442[4]((void **)&v442);
  }
  else if (v444)
  {
    (*((void (**)(void))*v444 + 5))();
  }
  *(void *)&long long v323 = 0x3E0000003DLL;
  uint64_t v83 = sub_1CC72D3AC((uint64_t)a1, (int *)&v323, 2);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  uint64_t v84 = sub_1CBA59D24(v83, 6, &v378, 2);
  uint64_t v85 = sub_1CBA1ADF0(v84, 0, 0x81uLL);
  uint64_t v86 = sub_1CBA1B484(v85, 0, 0x101uLL);
  sub_1CBA1A6C8(v86, 0, 0);
  *(void *)&long long v323 = 0x3100000030;
  uint64_t v87 = sub_1CC72D3AC((uint64_t)a1, (int *)&v323, 2);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD80;
  sub_1CD411804(v87, 0, &v378, 1);
  uint64_t v88 = sub_1CC72D384((uint64_t)a1, 140);
  sub_1CD41059C(v88);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0E0E0;
  v379.i64[0] = 0x8E0000008FLL;
  uint64_t v89 = sub_1CC72D3AC((uint64_t)a1, v378.i32, 6);
  long long v323 = xmmword_1CDB0DD60;
  *(void *)&long long v324 = 513;
  *(void *)&long long v321 = 9;
  uint64_t v90 = sub_1CD411620(v89, 8, &v323, 3, &v321, 1);
  uint64_t v91 = sub_1CBA1ADF0(v90, 0, 0x81uLL);
  uint64_t v92 = sub_1CBA1B484(v91, 0, 0x201uLL);
  sub_1CBA1A6C8(v92, 0, 0);
  long long v323 = xmmword_1CDB0DD90;
  uint64_t v93 = sub_1CC72D3AC((uint64_t)a1, (int *)&v323, 4);
  v440[0] = &unk_1F25F2A98;
  uint64_t v441 = v440;
  uint64_t v94 = sub_1CBA1AD18(v93, (uint64_t)v440);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  v379.i64[0] = 513;
  uint64_t v95 = sub_1CBA59D24(v94, 6, &v378, 3);
  uint64_t v96 = sub_1CBA1ADF0(v95, 0, 0x81uLL);
  uint64_t v97 = sub_1CBA1B484(v96, 0, 0x101uLL);
  sub_1CBA1A6C8(v97, 0, 0);
  if (v441 == v440)
  {
    (*(void (**)(void *))(v440[0] + 32))(v440);
  }
  else if (v441)
  {
    (*(void (**)(void))(*v441 + 40))();
  }
  uint64_t v98 = sub_1CC72D384((uint64_t)a1, 199);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  v379.i64[0] = 513;
  uint64_t v99 = sub_1CBA59D24(v98, 8, &v378, 3);
  uint64_t v100 = sub_1CBA1ADF0(v99, 0, 0x81uLL);
  uint64_t v101 = sub_1CBA1B484(v100, 0, 0x201uLL);
  uint64_t v102 = sub_1CBA1A6C8(v101, 0, 0);
  v438[0] = &unk_1F25F2A98;
  uint64_t v439 = v438;
  sub_1CBA1AD18(v102, (uint64_t)v438);
  if (v439 == v438)
  {
    (*(void (**)(void *))(v438[0] + 32))(v438);
  }
  else if (v439)
  {
    (*(void (**)(void))(*v439 + 40))();
  }
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0E0F8;
  int64x2_t v379 = (int64x2_t)unk_1CDB0E108;
  LODWORD(v380) = 219;
  uint64_t v103 = sub_1CC72D3AC((uint64_t)a1, v378.i32, 9);
  long long v323 = xmmword_1CDB0DD60;
  uint64_t v104 = sub_1CBA59D24(v103, 0, &v323, 2);
  v436[0] = &unk_1F25F2A98;
  uint64_t v437 = v436;
  sub_1CBA1AD18(v104, (uint64_t)v436);
  if (v437 == v436)
  {
    (*(void (**)(void *))(v436[0] + 32))(v436);
  }
  else if (v437)
  {
    (*(void (**)(void))(*v437 + 40))();
  }
  v378.i64[0] = 0xBC000000BBLL;
  uint64_t v105 = sub_1CC72D3AC((uint64_t)a1, v378.i32, 2);
  long long v434 = xmmword_1CDB0DD60;
  uint64_t v433 = (void (**)(void **))&unk_1F25F2C00;
  uint64_t v435 = (void **)&v433;
  sub_1CBA1AD18(v105, (uint64_t)&v433);
  if (v435 == (void **)&v433)
  {
    v433[4]((void **)&v433);
  }
  else if (v435)
  {
    (*((void (**)(void))*v435 + 5))();
  }
  uint64_t v106 = sub_1CC72D384((uint64_t)a1, 168);
  long long v431 = xmmword_1CDB0DD60;
  uint64_t v430 = (void (**)(void **))&unk_1F25F2C48;
  uint64_t v432 = (void **)&v430;
  sub_1CBA1AD18(v106, (uint64_t)&v430);
  if (v432 == (void **)&v430)
  {
    v430[4]((void **)&v430);
  }
  else if (v432)
  {
    (*((void (**)(void))*v432 + 5))();
  }
  uint64_t v107 = sub_1CC72D384((uint64_t)a1, 164);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  uint64_t v108 = sub_1CBA59D24(v107, 6, &v378, 2);
  v428[0] = &unk_1F25F2A98;
  v429 = v428;
  sub_1CBA1AD18(v108, (uint64_t)v428);
  if (v429 == v428)
  {
    (*(void (**)(void *))(v428[0] + 32))(v428);
  }
  else if (v429)
  {
    (*(void (**)(void))(*v429 + 40))();
  }
  uint64_t v109 = sub_1CC72D384((uint64_t)a1, 178);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DDA0;
  uint64_t v110 = sub_1CD411804(v109, 0, &v378, 1);
  v426[0] = &unk_1F25F2A98;
  v427 = v426;
  sub_1CBA1AD18(v110, (uint64_t)v426);
  if (v427 == v426)
  {
    (*(void (**)(void *))(v426[0] + 32))(v426);
  }
  else if (v427)
  {
    (*(void (**)(void))(*v427 + 40))();
  }
  uint64_t v111 = sub_1CC72D384((uint64_t)a1, 179);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  uint64_t v112 = sub_1CD411804(v111, 0, &v378, 1);
  v424[0] = &unk_1F25F2A98;
  v425 = v424;
  sub_1CBA1AD18(v112, (uint64_t)v424);
  if (v425 == v424)
  {
    (*(void (**)(void *))(v424[0] + 32))(v424);
  }
  else if (v425)
  {
    (*(void (**)(void))(*v425 + 40))();
  }
  uint64_t v113 = sub_1CC72D384((uint64_t)a1, 218);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  uint64_t v114 = sub_1CBA59D24(v113, 0, &v378, 2);
  v422[0] = &unk_1F25F2A98;
  v423 = v422;
  sub_1CBA1AD18(v114, (uint64_t)v422);
  if (v423 == v422)
  {
    (*(void (**)(void *))(v422[0] + 32))(v422);
  }
  else if (v423)
  {
    (*(void (**)(void))(*v423 + 40))();
  }
  uint64_t v115 = sub_1CC72D384((uint64_t)a1, 185);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  long long v323 = xmmword_1CDB0DD60;
  uint64_t v116 = sub_1CD411620(v115, 0, &v378, 2, &v323, 2);
  sub_1CD410440(v116, 0);
  uint64_t v117 = sub_1CC72D384((uint64_t)a1, 212);
  v378.i64[0] = 257;
  uint64_t v118 = sub_1CBA59D24(v117, 0, &v378, 1);
  uint64_t v119 = sub_1CBA1ADF0(v118, 0, 0x101uLL);
  uint64_t v120 = sub_1CBA1B484(v119, 0, 0x101uLL);
  sub_1CD410440(v120, 0);
  uint64_t v121 = sub_1CC72D384((uint64_t)a1, 213);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DDB0;
  int64x2_t v379 = (int64x2_t)xmmword_1CDB0DCC0;
  uint64_t v122 = sub_1CBA59D24(v121, 8, &v378, 4);
  uint64_t v123 = sub_1CBA1A6C8(v122, 0, 0);
  uint64_t v124 = sub_1CBA1ADF0(v123, 0, 0x81uLL);
  uint64_t v125 = sub_1CBA1B484(v124, 0, 0x201uLL);
  sub_1CD410440(v125, 0);
  v378.i64[0] = 0xAE000000ACLL;
  v378.i32[2] = 217;
  uint64_t v126 = sub_1CC72D3AC((uint64_t)a1, v378.i32, 3);
  long long v420 = xmmword_1CDB0DD60;
  uint64_t v419 = (void (**)(void **))&unk_1F25F2C90;
  unint64_t v421 = (void **)&v419;
  sub_1CBA1AD18(v126, (uint64_t)&v419);
  if (v421 == (void **)&v419)
  {
    v419[4]((void **)&v419);
  }
  else if (v421)
  {
    (*((void (**)(void))*v421 + 5))();
  }
  int v127 = a2[327];
  uint64_t v128 = sub_1CC72D384((uint64_t)a1, 85);
  if (v127)
  {
    int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
    char v129 = 0;
    uint64_t v130 = 2;
  }
  else
  {
    v378.i64[0] = 257;
    char v129 = 8;
    uint64_t v130 = 1;
  }
  sub_1CBA59D24(v128, v129, &v378, v130);
  uint64_t v131 = sub_1CC72D384((uint64_t)a1, 211);
  int64x2_t v378 = vdupq_n_s64(0x81uLL);
  int64x2_t v379 = vdupq_n_s64(0x101uLL);
  uint64_t v132 = sub_1CD411804(v131, 0, &v378, 2);
  uint64_t v133 = sub_1CBA1ADF0(v132, 1u, 0x81uLL);
  uint64_t v134 = sub_1CBA1B484(v133, 1u, 0x101uLL);
  uint64_t v135 = sub_1CBA1A6C8(v134, 1u, 0);
  uint64_t v136 = sub_1CD410788(v135, 0, 1);
  v417[0] = &unk_1F25F2CD8;
  uint64_t v418 = v417;
  v415[0] = &unk_1F25F2D20;
  int v416 = v415;
  sub_1CBA1AFAC(v136, (uint64_t)v417, (uint64_t)v415);
  if (v416 == v415)
  {
    (*(void (**)(void *))(v415[0] + 32))(v415);
  }
  else if (v416)
  {
    (*(void (**)(void))(*v416 + 40))();
  }
  if (v418 == v417)
  {
    (*(void (**)(void *))(v417[0] + 32))(v417);
  }
  else if (v418)
  {
    (*(void (**)(void))(*v418 + 40))();
  }
  *(void *)&long long v323 = 0xD0000000CFLL;
  uint64_t v137 = sub_1CC72D3AC((uint64_t)a1, (int *)&v323, 2);
  int64x2_t v378 = vdupq_n_s64(0x81uLL);
  int64x2_t v379 = vdupq_n_s64(0x101uLL);
  uint64_t v138 = sub_1CD411804(v137, 6, &v378, 2);
  uint64_t v139 = sub_1CBA1ADF0(v138, 1u, 0x81uLL);
  uint64_t v140 = sub_1CBA1B484(v139, 1u, 0x101uLL);
  uint64_t v141 = sub_1CBA1A6C8(v140, 1u, 0);
  uint64_t v142 = sub_1CD410788(v141, 0, 1);
  v413[0] = &unk_1F25F2D68;
  uint64_t v414 = v413;
  v411[0] = &unk_1F25F2DB0;
  int v412 = v411;
  sub_1CBA1AFAC(v142, (uint64_t)v413, (uint64_t)v411);
  if (v412 == v411)
  {
    (*(void (**)(void *))(v411[0] + 32))(v411);
  }
  else if (v412)
  {
    (*(void (**)(void))(*v412 + 40))();
  }
  if (v414 == v413)
  {
    (*(void (**)(void *))(v413[0] + 32))(v413);
  }
  else if (v414)
  {
    (*(void (**)(void))(*v414 + 40))();
  }
  *(void *)&long long v323 = 0xD2000000D1;
  uint64_t v143 = sub_1CC72D3AC((uint64_t)a1, (int *)&v323, 2);
  *(void *)&long long v321 = 513;
  uint64_t v144 = sub_1CBA59D24(v143, 8, &v321, 1);
  int64x2_t v378 = vdupq_n_s64(0x81uLL);
  int64x2_t v379 = vdupq_n_s64(0x101uLL);
  uint64_t v145 = sub_1CD411804(v144, 6, &v378, 2);
  uint64_t v146 = sub_1CBA1ADF0(v145, 0, 0x81uLL);
  uint64_t v147 = sub_1CBA1B484(v146, 0, 0x101uLL);
  sub_1CBA1A6C8(v147, 0, 0);
  *(void *)&long long v327 = 0xB5000000B4;
  uint64_t v148 = sub_1CC72D3AC((uint64_t)a1, (int *)&v327, 2);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  long long v323 = xmmword_1CDB0DD60;
  uint64_t v149 = sub_1CD411620(v148, 0, &v378, 2, &v323, 2);
  long long v321 = xmmword_1CDB0DD80;
  uint64_t v150 = sub_1CBA59D24(v149, 8, &v321, 2);
  uint64_t v151 = sub_1CBA1ADF0(v150, 1u, 0x81uLL);
  uint64_t v152 = sub_1CBA1B484(v151, 1u, 0x101uLL);
  uint64_t v153 = sub_1CBA1ADF0(v152, 0, 0x41uLL);
  uint64_t v154 = sub_1CBA1B484(v153, 0, 0x101uLL);
  v409[0] = &unk_1F25F2DF8;
  v409[1] = 65;
  uint64_t v410 = v409;
  uint64_t v155 = sub_1CBA1AD18(v154, (uint64_t)v409);
  sub_1CBA1A6C8(v155, 0, 0);
  if (v410 == v409)
  {
    (*(void (**)(void *))(v409[0] + 32))(v409);
  }
  else if (v410)
  {
    (*(void (**)(void))(*v410 + 40))();
  }
  *(void *)&long long v321 = 0xB7000000B6;
  uint64_t v156 = sub_1CC72D3AC((uint64_t)a1, (int *)&v321, 2);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  long long v323 = xmmword_1CDB0DD60;
  uint64_t v157 = sub_1CD411620(v156, 0, &v378, 2, &v323, 2);
  uint64_t v158 = sub_1CBA1ADF0(v157, 1u, 0x81uLL);
  uint64_t v159 = sub_1CBA1B484(v158, 1u, 0x201uLL);
  uint64_t v160 = sub_1CBA1A6C8(v159, 1u, 0);
  uint64_t v161 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v161 = &unk_1F25F2E40;
  *(_OWORD *)(v161 + 8) = xmmword_1CDB0DD60;
  *((void *)v161 + 3) = 513;
  uint64_t v408 = v161;
  sub_1CBA1AD18(v160, (uint64_t)v407);
  if (v408 == v407)
  {
    (*(void (**)(void *))(v407[0] + 32))(v407);
  }
  else if (v408)
  {
    (*(void (**)(void))(*v408 + 40))();
  }
  uint64_t v162 = sub_1CC72D384((uint64_t)a1, 81);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DDC0;
  int64x2_t v379 = (int64x2_t)xmmword_1CDB0DDD0;
  long long v380 = xmmword_1CDB0DD30;
  long long v381 = xmmword_1CDB0DD40;
  *(void *)&long long v382 = 2097666;
  *(void *)&long long v323 = 513;
  uint64_t v163 = sub_1CD411620(v162, 0, &v378, 9, &v323, 1);
  *(void *)&long long v321 = 1573122;
  *(void *)&long long v327 = 257;
  uint64_t v164 = sub_1CD411620(v163, 0, &v321, 1, &v327, 1);
  v405[0] = &unk_1F25F2E88;
  uint64_t v406 = v405;
  sub_1CBA1AD18(v164, (uint64_t)v405);
  if (v406 == v405)
  {
    (*(void (**)(void *))(v405[0] + 32))(v405);
  }
  else if (v406)
  {
    (*(void (**)(void))(*v406 + 40))();
  }
  uint64_t v165 = sub_1CC72D384((uint64_t)a1, 80);
  *(void *)&long long v323 = 513;
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DDC0;
  int64x2_t v379 = (int64x2_t)xmmword_1CDB0DDD0;
  long long v380 = xmmword_1CDB0DD30;
  long long v381 = xmmword_1CDB0DD40;
  *(void *)&long long v382 = 2097666;
  uint64_t v166 = sub_1CD411620(v165, 0, &v323, 1, &v378, 9);
  *(void *)&long long v321 = 257;
  *(void *)&long long v327 = 1573122;
  uint64_t v167 = sub_1CD411620(v166, 0, &v321, 1, &v327, 1);
  v403[0] = &unk_1F25F2ED0;
  unsigned int v404 = v403;
  sub_1CBA1AD18(v167, (uint64_t)v403);
  if (v404 == v403)
  {
    (*(void (**)(void *))(v403[0] + 32))(v403);
  }
  else if (v404)
  {
    (*(void (**)(void))(*v404 + 40))();
  }
  uint64_t v168 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)a2 + 120))(a2);
  BOOL v169 = sub_1CD80D0EC(v168);
  uint64_t v170 = 0;
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DDE0;
  int64x2_t v379 = (int64x2_t)xmmword_1CDB0DD20;
  long long v380 = xmmword_1CDB0DDC0;
  long long v381 = xmmword_1CDB0DDF0;
  long long v382 = xmmword_1CDB0DE00;
  do
  {
    uint64_t v171 = v378.i64[v170];
    *(void *)&long long v323 = 193;
    *((void *)&v323 + 1) = v171;
    sub_1CBA1B104(v5, (uint64_t)&v323, 8);
    ++v170;
  }
  while (v170 != 10);
  v378.i64[0] = 70;
  v378.i64[1] = 514;
  sub_1CBA1B104(v5, (uint64_t)&v378, 8);
  v378.i64[0] = 71;
  v378.i64[1] = 33554946;
  sub_1CBA1B104(v5, (uint64_t)&v378, 8);
  v378.i64[0] = 71;
  v378.i64[1] = 1573122;
  sub_1CBA1B104(v5, (uint64_t)&v378, 8);
  v378.i64[0] = 71;
  v378.i64[1] = 1573378;
  sub_1CBA1B104(v5, (uint64_t)&v378, 8);
  v378.i64[0] = 71;
  v378.i64[1] = 1049090;
  if (v169) {
    char v172 = 0;
  }
  else {
    char v172 = 8;
  }
  sub_1CBA1B104(v5, (uint64_t)&v378, v172);
  v378.i64[0] = 71;
  v378.i64[1] = 514;
  sub_1CBA1B104(v5, (uint64_t)&v378, 0);
  *(void *)&long long v327 = 0x600000005ALL;
  uint64_t v173 = sub_1CC72D3AC((uint64_t)a1, (int *)&v327, 2);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DC70;
  int64x2_t v379 = (int64x2_t)xmmword_1CDB0DD60;
  long long v380 = xmmword_1CDB0DE10;
  long long v381 = xmmword_1CDB0DE20;
  long long v382 = xmmword_1CDB0DE30;
  long long v383 = xmmword_1CDB0DE40;
  long long v384 = xmmword_1CDB0DE50;
  long long v385 = xmmword_1CDB0DE60;
  long long v386 = xmmword_1CDB0DE70;
  int64x2_t v387 = vdupq_n_s64(0x1000024uLL);
  *(void *)&long long v388 = 33554452;
  long long v323 = xmmword_1CDB0DDC0;
  long long v324 = xmmword_1CDB0DE80;
  long long v325 = xmmword_1CDB0DE90;
  *(void *)&long long v326 = 514;
  uint64_t v174 = sub_1CD411620(v173, 8, &v378, 21, &v323, 7);
  uint64_t v402 = 257;
  long long v321 = xmmword_1CDB0DD40;
  uint64_t v175 = sub_1CD411620(v174, 8, &v402, 1, &v321, 2);
  uint64_t v176 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v176 = &unk_1F25F2F18;
  *(_OWORD *)(v176 + 8) = xmmword_1CDB0DDC0;
  *(_OWORD *)(v176 + 24) = xmmword_1CDB0DE80;
  *(_OWORD *)(v176 + 40) = xmmword_1CDB0DE90;
  *((void *)v176 + 7) = 514;
  int v401 = v176;
  uint64_t v177 = sub_1CBA1AD18(v175, (uint64_t)v400);
  uint64_t v178 = sub_1CBA1ADF0(v177, 0, 0x41uLL);
  uint64_t v179 = sub_1CBA1B484(v178, 0, 0x201uLL);
  uint64_t v180 = sub_1CBA1A6C8(v179, 0, 0);
  uint64_t v181 = sub_1CD410214(v180, 0, 0x400014uLL, 4194436);
  uint64_t v182 = sub_1CD410214(v181, 0, 0x800014uLL, 8388676);
  uint64_t v183 = sub_1CD410214(v182, 0, 0x1000014uLL, 16777252);
  uint64_t v184 = sub_1CD410214(v183, 0, 0x2000014uLL, 33554452);
  sub_1CD4108F8(v184);
  if (v401 == v400)
  {
    (*(void (**)(void *))(v400[0] + 32))(v400);
    unsigned int v185 = v308;
  }
  else
  {
    unsigned int v185 = v308;
    if (v401) {
      (*(void (**)(void))(*v401 + 40))();
    }
  }
  v378.i64[0] = 0x5C0000005BLL;
  uint64_t v186 = sub_1CC72D3AC((uint64_t)a1, v378.i32, 2);
  uint64_t v187 = sub_1CD4109D4(v186);
  sub_1CD410AB0(v187);
  uint64_t v188 = sub_1CC72D384((uint64_t)a1, 125);
  sub_1CD41059C(v188);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0E11C;
  int64x2_t v379 = (int64x2_t)unk_1CDB0E12C;
  long long v380 = xmmword_1CDB0E13C;
  uint64_t v189 = sub_1CC72D3AC((uint64_t)a1, v378.i32, 12);
  *(void *)&long long v321 = 257;
  long long v323 = xmmword_1CDB0DD40;
  long long v324 = xmmword_1CDB0DD50;
  *(void *)&long long v325 = 524802;
  uint64_t v190 = sub_1CD411620(v189, 8, &v321, 1, &v323, 5);
  v398[0] = &unk_1F25F2F60;
  v398[1] = 513;
  unint64_t v399 = v398;
  sub_1CBA1AD18(v190, (uint64_t)v398);
  if (v399 == v398)
  {
    (*(void (**)(void *))(v398[0] + 32))(v398);
  }
  else if (v399)
  {
    (*(void (**)(void))(*v399 + 40))();
  }
  uint64_t v191 = sub_1CC72D384((uint64_t)a1, 98);
  v396[0] = &unk_1F25F2FA8;
  v396[1] = 257;
  unsigned int v397 = v396;
  sub_1CBA1AD18(v191, (uint64_t)v396);
  if (v397 == v396)
  {
    (*(void (**)(void *))(v396[0] + 32))(v396);
  }
  else if (v397)
  {
    (*(void (**)(void))(*v397 + 40))();
  }
  uint64_t v192 = sub_1CC72D384((uint64_t)a1, 82);
  sub_1CD617534(0, 1, v392);
  sub_1CBA1B258((uint64_t)v392, (uint64_t)v394);
  uint64_t v193 = sub_1CBA1B180(v192, (uint64_t)v394);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  int64x2_t v379 = (int64x2_t)xmmword_1CDB0DEA0;
  long long v380 = xmmword_1CDB0DEB0;
  long long v381 = xmmword_1CDB0DEC0;
  long long v382 = xmmword_1CDB0DED0;
  long long v383 = xmmword_1CDB0DCA0;
  long long v384 = xmmword_1CDB0DE30;
  long long v385 = xmmword_1CDB0DEE0;
  long long v386 = xmmword_1CDB0DCD0;
  int64x2_t v387 = (int64x2_t)xmmword_1CDB0DEF0;
  long long v388 = xmmword_1CDB0DF00;
  long long v389 = xmmword_1CDB0DCF0;
  long long v390 = xmmword_1CDB0DF10;
  uint64_t v391 = 33554460;
  uint64_t v194 = sub_1CD411C6C(v193, 0, &v378, 27);
  uint64_t v195 = sub_1CBA1ADF0(v194, 0, 0x81uLL);
  uint64_t v196 = sub_1CBA1B484(v195, 0, 0x401uLL);
  uint64_t v197 = sub_1CBA1ADF0(v196, 1u, 0x81uLL);
  uint64_t v198 = sub_1CBA1B484(v197, 1u, 0x401uLL);
  uint64_t v199 = sub_1CD410C04(v198, 0, 0);
  uint64_t v200 = sub_1CD410C04(v199, 1, 0);
  uint64_t v201 = sub_1CD411E50(v200, 0, 0x41uLL);
  uint64_t v202 = sub_1CD411FDC(v201, 0, 0x401uLL);
  uint64_t v203 = sub_1CD411E50(v202, 1, 0x41uLL);
  uint64_t v204 = sub_1CD411FDC(v203, 1, 0x401uLL);
  sub_1CD61745C(0, 16, v376);
  sub_1CD617874(0, 16, v374);
  uint64_t v205 = sub_1CBA1A848(v204, (uint64_t)v376, (uint64_t)v374);
  sub_1CD61745C(1, 16, v372);
  sub_1CD617874(1, 16, v370);
  uint64_t v206 = sub_1CBA1A848(v205, (uint64_t)v372, (uint64_t)v370);
  sub_1CD617488(0, 128, v368);
  sub_1CD6178A0(0, 128, v366);
  uint64_t v207 = sub_1CBA1B32C(v206, (uint64_t)v368, (uint64_t)v366);
  sub_1CD617488(1, 128, v364);
  sub_1CD6178A0(1, 128, v362);
  uint64_t v208 = sub_1CBA1B32C(v207, (uint64_t)v364, (uint64_t)v362);
  uint64_t v209 = sub_1CD4102E0(v208, 0);
  uint64_t v210 = sub_1CD4102E0(v209, 1);
  uint64_t v211 = sub_1CD410214(v210, 0, 0x2000014uLL, 33554468);
  sub_1CD410214(v211, 1u, 0x2000014uLL, 33554468);
  if (v363 == v362)
  {
    (*(void (**)(void *))(v362[0] + 32))(v362);
  }
  else if (v363)
  {
    (*(void (**)(void))(*v363 + 40))();
  }
  if (v365 == v364)
  {
    (*(void (**)(void *))(v364[0] + 32))(v364);
  }
  else if (v365)
  {
    (*(void (**)(void))(*v365 + 40))();
  }
  if (v367 == v366)
  {
    (*(void (**)(void *))(v366[0] + 32))(v366);
  }
  else if (v367)
  {
    (*(void (**)(void))(*v367 + 40))();
  }
  if (v369 == v368)
  {
    (*(void (**)(void *))(v368[0] + 32))(v368);
  }
  else if (v369)
  {
    (*(void (**)(void))(*v369 + 40))();
  }
  if (v371 == v370)
  {
    (*(void (**)(void *))(v370[0] + 32))(v370);
  }
  else if (v371)
  {
    (*(void (**)(void))(*v371 + 40))();
  }
  if (v373 == v372)
  {
    (*(void (**)(void *))(v372[0] + 32))(v372);
  }
  else if (v373)
  {
    (*(void (**)(void))(*v373 + 40))();
  }
  if (v375 == v374)
  {
    (*(void (**)(void *))(v374[0] + 32))(v374);
  }
  else if (v375)
  {
    (*(void (**)(void))(*v375 + 40))();
  }
  if (v377 == v376)
  {
    (*(void (**)(void *))(v376[0] + 32))(v376);
  }
  else if (v377)
  {
    (*(void (**)(void))(*v377 + 40))();
  }
  if (v395 == v394)
  {
    (*(void (**)(void *))(v394[0] + 32))(v394);
  }
  else if (v395)
  {
    (*(void (**)(void))(*v395 + 40))();
  }
  if (v393 == v392)
  {
    (*(void (**)(void *))(v392[0] + 32))(v392);
  }
  else if (v393)
  {
    (*(void (**)(void))(*v393 + 40))();
  }
  *(void *)&long long v321 = 0x7C00000076;
  DWORD2(v321) = 126;
  uint64_t v212 = sub_1CC72D3AC((uint64_t)a1, (int *)&v321, 3);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DCC0;
  long long v323 = xmmword_1CDB0DD60;
  uint64_t v213 = sub_1CD411620(v212, 0, &v378, 2, &v323, 2);
  uint64_t v214 = sub_1CBA1ADF0(v213, 0, 0x101uLL);
  uint64_t v215 = sub_1CBA1B484(v214, 0, 0x201uLL);
  uint64_t v216 = sub_1CBA1A6C8(v215, 0, 0);
  uint64_t v217 = sub_1CBA1ADF0(v216, 1u, 0x81uLL);
  uint64_t v218 = sub_1CBA1B484(v217, 1u, 0x101uLL);
  uint64_t v219 = sub_1CBA1A6C8(v218, 1u, 0);
  v360[0] = &unk_1F25F2A98;
  uint64_t v361 = v360;
  sub_1CBA1AD18(v219, (uint64_t)v360);
  if (v361 == v360)
  {
    (*(void (**)(void *))(v360[0] + 32))(v360);
  }
  else if (v361)
  {
    (*(void (**)(void))(*v361 + 40))();
  }
  uint64_t v220 = sub_1CC72D384((uint64_t)a1, 119);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  long long v323 = xmmword_1CDB0DCC0;
  uint64_t v221 = sub_1CD411620(v220, 0, &v378, 2, &v323, 2);
  uint64_t v222 = sub_1CBA1B484(v221, 0, 0x101uLL);
  uint64_t v223 = sub_1CBA1B484(v222, 1u, 0x201uLL);
  v358[0] = &unk_1F25F2A98;
  int v359 = v358;
  uint64_t v224 = sub_1CBA1AD18(v223, (uint64_t)v358);
  sub_1CD410D80(v224);
  if (v359 == v358)
  {
    (*(void (**)(void *))(v358[0] + 32))(v358);
  }
  else if (v359)
  {
    (*(void (**)(void))(*v359 + 40))();
  }
  uint64_t v225 = sub_1CC72D384((uint64_t)a1, 204);
  uint64_t v226 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v226 = &unk_1F25F3038;
  *(_OWORD *)(v226 + 8) = xmmword_1CDB0DC70;
  *(_OWORD *)(v226 + 24) = xmmword_1CDB0DD60;
  *((void *)v226 + 5) = 513;
  uint64_t v357 = v226;
  sub_1CBA1AD18(v225, (uint64_t)v356);
  if (v357 == v356)
  {
    (*(void (**)(void *))(v356[0] + 32))(v356);
  }
  else if (v357)
  {
    (*(void (**)(void))(*v357 + 40))();
  }
  uint64_t v227 = sub_1CC72D384((uint64_t)a1, 205);
  long long v323 = xmmword_1CDB0DD60;
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DCD0;
  int64x2_t v379 = (int64x2_t)xmmword_1CDB0DEF0;
  long long v380 = xmmword_1CDB0DF00;
  long long v381 = xmmword_1CDB0DCF0;
  *(void *)&long long v321 = 257;
  uint64_t v228 = sub_1CD412168(v227, 0, &v323, 2, &v378, 8, &v321, 1);
  uint64_t v229 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v229 = &unk_1F25F3080;
  *(_OWORD *)(v229 + 8) = xmmword_1CDB0DF20;
  *(_OWORD *)(v229 + 24) = xmmword_1CDB0DF30;
  *(_OWORD *)(v229 + 40) = xmmword_1CDB0DD60;
  *((void *)v229 + 7) = 513;
  uint64_t v355 = v229;
  sub_1CBA1AD18(v228, (uint64_t)v354);
  if (v355 == v354)
  {
    (*(void (**)(void *))(v354[0] + 32))(v354);
  }
  else if (v355)
  {
    (*(void (**)(void))(*v355 + 40))();
  }
  uint64_t v230 = sub_1CC72D384((uint64_t)a1, 206);
  int v231 = (char *)operator new(0x30uLL);
  *(void *)int v231 = &unk_1F25F30C8;
  *(_OWORD *)(v231 + 8) = xmmword_1CDB0DC70;
  *(_OWORD *)(v231 + 24) = xmmword_1CDB0DD60;
  *((void *)v231 + 5) = 513;
  unsigned int v353 = v231;
  sub_1CBA1B640(v230, (uint64_t)v352);
  if (v353 == v352)
  {
    (*(void (**)(void *))(v352[0] + 32))(v352);
  }
  else if (v353)
  {
    (*(void (**)(void))(*v353 + 40))();
  }
  uint64_t v232 = sub_1CC72D384((uint64_t)a1, 79);
  uint64_t v233 = (char *)operator new(0x88uLL);
  *(void *)uint64_t v233 = &unk_1F25F3110;
  *(_OWORD *)(v233 + 8) = xmmword_1CDB0DC80;
  *(_OWORD *)(v233 + 24) = xmmword_1CDB0DE20;
  *(_OWORD *)(v233 + 40) = xmmword_1CDB0DF40;
  *(_OWORD *)(v233 + 56) = xmmword_1CDB0DCD0;
  *(_OWORD *)(v233 + 72) = xmmword_1CDB0DEF0;
  *(_OWORD *)(v233 + 88) = xmmword_1CDB0DF00;
  *(_OWORD *)(v233 + 104) = xmmword_1CDB0DCF0;
  *(_OWORD *)(v233 + 120) = xmmword_1CDB0DF50;
  uint64_t v351 = v233;
  sub_1CBA1AD18(v232, (uint64_t)v350);
  if (v351 == v350)
  {
    (*(void (**)(void *))(v350[0] + 32))(v350);
  }
  else if (v351)
  {
    (*(void (**)(void))(*v351 + 40))();
  }
  uint64_t v234 = sub_1CC72D384((uint64_t)a1, 73);
  v348[0] = &unk_1F25F3158;
  v349 = v348;
  uint64_t v235 = sub_1CBA1B180(v234, (uint64_t)v348);
  v346[0] = &unk_1F25F31A0;
  v346[1] = 65;
  v347 = v346;
  uint64_t v236 = sub_1CBA1AD18(v235, (uint64_t)v346);
  uint64_t v237 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v237 = &unk_1F25F31E8;
  *(_OWORD *)(v237 + 8) = xmmword_1CDB0DCA0;
  *((void *)v237 + 3) = 4194372;
  unint64_t v345 = v237;
  uint64_t v238 = sub_1CBA1AD18(v236, (uint64_t)v344);
  int v239 = (char *)operator new(0x58uLL);
  *(void *)int v239 = &unk_1F25F3230;
  *(_OWORD *)(v239 + 8) = xmmword_1CDB0DD60;
  *(_OWORD *)(v239 + 24) = xmmword_1CDB0DF60;
  *(_OWORD *)(v239 + 40) = xmmword_1CDB0DCD0;
  *(_OWORD *)(v239 + 56) = xmmword_1CDB0DCE0;
  *(_OWORD *)(v239 + 72) = xmmword_1CDB0DCF0;
  BOOL v343 = v239;
  uint64_t v240 = sub_1CBA1A5F0(v238, (uint64_t)v342);
  v340[0] = &unk_1F25F2A98;
  uint64_t v341 = v340;
  uint64_t v241 = sub_1CBA1AD18(v240, (uint64_t)v340);
  uint64_t v242 = sub_1CBA1ADF0(v241, 1u, 0x81uLL);
  uint64_t v243 = sub_1CBA1B484(v242, 1u, 0x101uLL);
  sub_1CBA1A6C8(v243, 1u, 0);
  if (v341 == v340)
  {
    (*(void (**)(void *))(v340[0] + 32))(v340);
  }
  else if (v341)
  {
    (*(void (**)(void))(*v341 + 40))();
  }
  if (v343 == v342)
  {
    (*(void (**)(void *))(v342[0] + 32))(v342);
  }
  else if (v343)
  {
    (*(void (**)(void))(*v343 + 40))();
  }
  if (v345 == v344)
  {
    (*(void (**)(void *))(v344[0] + 32))(v344);
  }
  else if (v345)
  {
    (*(void (**)(void))(*v345 + 40))();
  }
  if (v347 == v346)
  {
    (*(void (**)(void *))(v346[0] + 32))(v346);
  }
  else if (v347)
  {
    (*(void (**)(void))(*v347 + 40))();
  }
  if (v349 == v348)
  {
    (*(void (**)(void *))(v348[0] + 32))(v348);
  }
  else if (v349)
  {
    (*(void (**)(void))(*v349 + 40))();
  }
  uint64_t v244 = 0;
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  int64x2_t v379 = (int64x2_t)xmmword_1CDB0DCD0;
  long long v380 = xmmword_1CDB0DCE0;
  long long v381 = xmmword_1CDB0DCF0;
  do
  {
    uint64_t v245 = v378.i64[v244];
    *(void *)&long long v323 = 75;
    *((void *)&v323 + 1) = v245;
    sub_1CBA1B104(v5, (uint64_t)&v323, 0);
    ++v244;
  }
  while (v244 != 8);
  uint64_t v246 = 0;
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  int64x2_t v379 = (int64x2_t)xmmword_1CDB0DF60;
  *(void *)&long long v380 = 2049;
  do
  {
    uint64_t v247 = v378.i64[v246];
    *(void *)&long long v323 = 0x10000004BLL;
    *((void *)&v323 + 1) = v247;
    sub_1CBA1B104(v5, (uint64_t)&v323, 0);
    ++v246;
  }
  while (v246 != 5);
  uint64_t v248 = 0;
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DF70;
  int64x2_t v379 = (int64x2_t)xmmword_1CDB0DF80;
  do
  {
    uint64_t v249 = v378.i64[v248];
    *(void *)&long long v323 = 0x10000004BLL;
    *((void *)&v323 + 1) = v249;
    sub_1CBA1B104(v5, (uint64_t)&v323, 8);
    ++v248;
  }
  while (v248 != 4);
  uint64_t v250 = sub_1CC72D384((uint64_t)a1, 114);
  v338[0] = &unk_1F25F3278;
  v338[1] = 9;
  uint64_t v339 = v338;
  sub_1CBA1AD18(v250, (uint64_t)v338);
  if (v339 == v338)
  {
    (*(void (**)(void *))(v338[0] + 32))(v338);
  }
  else if (v339)
  {
    (*(void (**)(void))(*v339 + 40))();
  }
  v378.i64[0] = 0x8700000086;
  uint64_t v251 = sub_1CC72D3AC((uint64_t)a1, v378.i32, 2);
  sub_1CD410694(v251);
  uint64_t v252 = sub_1CC72D384((uint64_t)a1, 50);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  uint64_t v253 = sub_1CBA59D24(v252, 0, &v378, 2);
  char v254 = (char *)operator new(0x20uLL);
  *(void *)char v254 = &unk_1F25F32C0;
  *(_OWORD *)(v254 + 8) = xmmword_1CDB0DF60;
  *((void *)v254 + 3) = 2049;
  uint64_t v337 = v254;
  uint64_t v255 = sub_1CBA1AD18(v253, (uint64_t)v336);
  uint64_t v256 = sub_1CBA1ADF0(v255, 0, 0x81uLL);
  sub_1CBA1A6C8(v256, 0, 0);
  if (v337 == v336)
  {
    (*(void (**)(void *))(v336[0] + 32))(v336);
  }
  else if (v337)
  {
    (*(void (**)(void))(*v337 + 40))();
  }
  uint64_t v257 = sub_1CC72D384((uint64_t)a1, 51);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  long long v323 = xmmword_1CDB0DD60;
  uint64_t v258 = sub_1CD411620(v257, 0, &v378, 2, &v323, 2);
  *(void *)&long long v327 = 513;
  long long v321 = xmmword_1CDB0DD60;
  uint64_t v259 = sub_1CD411620(v258, 8, &v327, 1, &v321, 2);
  int v260 = (char *)operator new(0x20uLL);
  *(void *)int v260 = &unk_1F25F3308;
  *(_OWORD *)(v260 + 8) = xmmword_1CDB0DF60;
  *((void *)v260 + 3) = 2049;
  uint64_t v335 = v260;
  uint64_t v261 = sub_1CBA1AD18(v259, (uint64_t)v334);
  uint64_t v262 = sub_1CBA1ADF0(v261, 0, 0x81uLL);
  uint64_t v263 = sub_1CBA1B484(v262, 0, 0x101uLL);
  uint64_t v264 = sub_1CBA1ADF0(v263, 1u, 0x81uLL);
  uint64_t v265 = sub_1CBA1A6C8(v264, 0, 0);
  sub_1CBA1A6C8(v265, 1u, 0);
  if (v335 == v334)
  {
    (*(void (**)(void *))(v334[0] + 32))(v334);
  }
  else if (v335)
  {
    (*(void (**)(void))(*v335 + 40))();
  }
  uint64_t v266 = sub_1CC72D384((uint64_t)a1, 56);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  v379.i64[0] = 513;
  uint64_t v267 = sub_1CBA59D24(v266, 0, &v378, 3);
  sub_1CD410D80(v267);
  uint64_t v268 = sub_1CC72D384((uint64_t)a1, 57);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  v379.i64[0] = 513;
  uint64_t v269 = sub_1CBA59D24(v268, 0, &v378, 3);
  sub_1CD410D80(v269);
  *(void *)&long long v327 = 0x3500000034;
  uint64_t v270 = sub_1CC72D3AC((uint64_t)a1, (int *)&v327, 2);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DD60;
  long long v323 = xmmword_1CDB0DD60;
  long long v321 = xmmword_1CDB0DD60;
  uint64_t v271 = sub_1CD412168(v270, 0, &v378, 2, &v323, 2, &v321, 2);
  sub_1CD410D80(v271);
  uint64_t v272 = sub_1CC72D384((uint64_t)a1, 136);
  uint64_t v273 = (char *)operator new(0x68uLL);
  *(void *)uint64_t v273 = &unk_1F25F3350;
  *(_OWORD *)(v273 + 8) = xmmword_1CDB0DD60;
  *(_OWORD *)(v273 + 24) = xmmword_1CDB0DE10;
  *(_OWORD *)(v273 + 40) = xmmword_1CDB0DF90;
  *(_OWORD *)(v273 + 56) = xmmword_1CDB0DE50;
  *(_OWORD *)(v273 + 72) = xmmword_1CDB0DE70;
  *(_OWORD *)(v273 + 88) = xmmword_1CDB0DFA0;
  uint64_t v333 = v273;
  uint64_t v274 = sub_1CBA1AD18(v272, (uint64_t)v332);
  uint64_t v275 = sub_1CBA1ADF0(v274, 0, 0x81uLL);
  uint64_t v276 = sub_1CBA1B484(v275, 0, 0x201uLL);
  uint64_t v277 = sub_1CBA1A6C8(v276, 0, 0);
  uint64_t v278 = sub_1CD410214(v277, 0, 0x400014uLL, 4194340);
  v330[0] = &unk_1F25F3398;
  v330[1] = 4194332;
  v331 = v330;
  sub_1CD617848(0, 0, v328);
  uint64_t v279 = sub_1CBA1A848(v278, (uint64_t)v330, (uint64_t)v328);
  uint64_t v280 = sub_1CD410214(v279, 0, 0x800014uLL, 8388644);
  uint64_t v281 = sub_1CD410214(v280, 0, 0x1000014uLL, 16777252);
  sub_1CD410214(v281, 0, 0x2000014uLL, 33554452);
  if (v329 == v328)
  {
    (*(void (**)(void *))(v328[0] + 32))(v328);
    unsigned int v282 = v309;
  }
  else
  {
    unsigned int v282 = v309;
    if (v329) {
      (*(void (**)(void))(*v329 + 40))();
    }
  }
  if (v331 == v330)
  {
    (*(void (**)(void *))(v330[0] + 32))(v330);
  }
  else if (v331)
  {
    (*(void (**)(void))(*v331 + 40))();
  }
  if (v333 == v332)
  {
    (*(void (**)(void *))(v332[0] + 32))(v332);
  }
  else if (v333)
  {
    (*(void (**)(void))(*v333 + 40))();
  }
  uint64_t v283 = sub_1CC72D384((uint64_t)a1, 77);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DCD0;
  int64x2_t v379 = (int64x2_t)xmmword_1CDB0DFB0;
  long long v380 = xmmword_1CDB0DFC0;
  long long v381 = xmmword_1CDB0DF00;
  long long v382 = xmmword_1CDB0DCF0;
  long long v327 = xmmword_1CDB0DD60;
  uint64_t v284 = sub_1CD411620(v283, 0, &v378, 10, &v327, 2);
  long long v323 = xmmword_1CDB0DC80;
  long long v324 = xmmword_1CDB0DC90;
  long long v325 = xmmword_1CDB0DFD0;
  long long v326 = xmmword_1CDB0DFE0;
  long long v321 = xmmword_1CDB0DC70;
  uint64_t v322 = 513;
  sub_1CD411620(v284, 8, &v323, 8, &v321, 3);
  uint64_t v285 = sub_1CC72D384((uint64_t)a1, 78);
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0DC80;
  int64x2_t v379 = (int64x2_t)xmmword_1CDB0DC90;
  long long v380 = xmmword_1CDB0DFD0;
  *(void *)&long long v381 = 4194436;
  *(void *)&long long v323 = 129;
  sub_1CD411620(v285, 0, &v378, 7, &v323, 1);
  uint64_t v286 = sub_1CC72D384((uint64_t)a1, 76);
  unsigned int v318 = (void (**)(void **))&unk_1F25F33E0;
  long long v319 = xmmword_1CDB0DFF0;
  uint64_t v320 = (void **)&v318;
  uint64_t v287 = sub_1CBA1AD18(v286, (uint64_t)&v318);
  uint64_t v288 = operator new(0x28uLL);
  *uint64_t v288 = &unk_1F25F3428;
  v288[1] = 129;
  *((_DWORD *)v288 + 4) = v185;
  v288[3] = 257;
  *((_DWORD *)v288 + 8) = v282;
  v317 = v288;
  uint64_t v289 = sub_1CBA1A5F0(v287, (uint64_t)v316);
  unint64_t v290 = v310;
  uint64_t v291 = sub_1CBA1ADF0(v289, 0, 0x101uLL);
  sub_1CBA1B484(v291, 0, v290);
  if (v317 == v316)
  {
    (*(void (**)(void *))(v316[0] + 32))(v316);
  }
  else if (v317)
  {
    (*(void (**)(void))(*v317 + 40))();
  }
  if (v320 == (void **)&v318)
  {
    v318[4]((void **)&v318);
  }
  else if (v320)
  {
    (*((void (**)(void))*v320 + 5))();
  }
  uint64_t v292 = sub_1CC72D384((uint64_t)a1, 74);
  unsigned int v293 = (char *)operator new(0x28uLL);
  *(void *)unsigned int v293 = &unk_1F25F3470;
  *(_OWORD *)(v293 + 8) = xmmword_1CDB0DFF0;
  *(_OWORD *)(v293 + 24) = xmmword_1CDB0E000;
  uint64_t v315 = v293;
  uint64_t v294 = sub_1CBA1AD18(v292, (uint64_t)v314);
  unsigned int v295 = (char *)operator new(0x28uLL);
  *(void *)unsigned int v295 = &unk_1F25F34B8;
  *(_OWORD *)(v295 + 8) = xmmword_1CDB0DD60;
  *((void *)v295 + 3) = 8388628;
  *((_DWORD *)v295 + 8) = v282;
  uint64_t v313 = v295;
  uint64_t v296 = sub_1CBA1A5F0(v294, (uint64_t)v312);
  unint64_t v297 = v310;
  uint64_t v298 = sub_1CBA1ADF0(v296, 1u, 0x81uLL);
  sub_1CBA1B484(v298, 1u, v297);
  if (v313 == v312)
  {
    (*(void (**)(void *))(v312[0] + 32))(v312);
  }
  else if (v313)
  {
    (*(void (**)(void))(*v313 + 40))();
  }
  if (v315 == v314)
  {
    (*(void (**)(void *))(v314[0] + 32))(v314);
  }
  else if (v315)
  {
    (*(void (**)(void))(*v315 + 40))();
  }
  int64x2_t v378 = (int64x2_t)xmmword_1CDB0E010;
  uint64_t v299 = sub_1CC72D3AC((uint64_t)a1, v378.i32, 4);
  sub_1CD41059C(v299);
  sub_1CC72E55C(v5);
  uint64_t v300 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)a2 + 104))(a2);
  nullsub_1953(a1, v300 + 8);
  return a1;
}

uint64_t sub_1CBA1A5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  sub_1CBA5A4A0((uint64_t)v5, a2);
  uint64_t v3 = sub_1CBA59E14(a1, 0, (uint64_t)v5);
  if (v6 == v5)
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))();
  }
  return v3;
}

uint64_t sub_1CBA1A6C8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (void (**)(void **))&unk_1F261C510;
  unsigned int v8 = a2;
  unsigned int v9 = (void **)&v7;
  v5[0] = &unk_1F261C798;
  v5[1] = a2 | (unint64_t)(a3 << 32);
  uint64_t v6 = v5;
  uint64_t v3 = sub_1CBA5A538(a1, 2, (uint64_t)&v7, (uint64_t)v5);
  if (v6 == v5)
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))();
  }
  if (v9 == (void **)&v7)
  {
    v7[4]((void **)&v7);
  }
  else if (v9)
  {
    (*((void (**)(void))*v9 + 5))();
  }
  return v3;
}

uint64_t sub_1CBA1A848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  sub_1CBA5A4A0((uint64_t)v9, a2);
  sub_1CBA5A408((uint64_t)v7, a3);
  uint64_t v5 = sub_1CBA5A538(a1, 4, (uint64_t)v9, (uint64_t)v7);
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v5;
}

uint64_t sub_1CBA1A9A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  sub_1CBA5A4A0((uint64_t)v10, a1);
  sub_1CBA5A4A0((uint64_t)v12, a2);
  uint64_t v5 = operator new(0x48uLL);
  uint64_t v6 = v5;
  *uint64_t v5 = &unk_1F25F2978;
  uint64_t v7 = v5 + 1;
  if (v11)
  {
    if (v11 == v10)
    {
      v5[4] = v7;
      (*(void (**)(void *))(v10[0] + 24))(v10);
    }
    else
    {
      v5[4] = v11;
      uint64_t v11 = 0;
    }
  }
  else
  {
    v5[4] = 0;
  }
  if (!v13)
  {
    v6[8] = 0;
    goto LABEL_7;
  }
  if (v13 != v12)
  {
    v6[8] = v13;
    uint64_t v13 = 0;
LABEL_7:
    *(void *)(a3 + 24) = v6;
    goto LABEL_8;
  }
  v6[8] = v6 + 5;
  (*(void (**)(void *))(v12[0] + 24))(v12);
  unsigned int v9 = v13;
  *(void *)(a3 + 24) = v6;
  if (v9 == v12)
  {
    (*(void (**)(void *))(v12[0] + 32))(v12);
  }
  else if (v9)
  {
    (*(void (**)(void *))(*v9 + 40))(v9);
  }
LABEL_8:
  uint64_t result = (uint64_t)v11;
  if (v11 == v10) {
    return (*(uint64_t (**)(void *, void *))(v10[0] + 32))(v10, v7);
  }
  if (v11) {
    return (*(uint64_t (**)(void))(*v11 + 40))();
  }
  return result;
}

uint64_t sub_1CBA1ABC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  sub_1CBA5A4A0((uint64_t)v9, a2);
  sub_1CBA5A408((uint64_t)v7, a3);
  uint64_t v5 = sub_1CBA5A538(a1, 2, (uint64_t)v9, (uint64_t)v7);
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v5;
}

uint64_t sub_1CBA1AD18(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  sub_1CBA5A4A0((uint64_t)v5, a2);
  uint64_t v3 = sub_1CBA59E14(a1, 8, (uint64_t)v5);
  if (v6 == v5)
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))();
  }
  return v3;
}

uint64_t sub_1CBA1ADF0(uint64_t a1, unsigned int a2, unint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v10 = a3;
  uint64_t v5 = sub_1CB8F1DC4(&v10);
  if (v6 == 1)
  {
    uint64_t v9 = v5;
    uint64_t v5 = v9;
  }
  v13[0] = &unk_1F261C318;
  v13[1] = a2 | (unint64_t)(v5 << 32);
  uint64_t v14 = v13;
  v11[0] = &unk_1F261C678;
  v11[1] = a2;
  v11[2] = v10;
  uint64_t v12 = v11;
  uint64_t v7 = sub_1CBA5A538(a1, 2, (uint64_t)v13, (uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
  return v7;
}

uint64_t sub_1CBA1AFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  sub_1CBA5A4A0((uint64_t)v9, a2);
  sub_1CBA5A408((uint64_t)v7, a3);
  uint64_t v5 = sub_1CBA5A538(a1, 1, (uint64_t)v9, (uint64_t)v7);
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v5;
}

void *sub_1CBA1B104(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(a1 + 28696) = 0;
  unsigned int v5 = *(_DWORD *)(a2 + 4);
  uint64_t v6 = a1 + 40 * (*(_DWORD *)a2 - 45);
  if (*(_DWORD *)(v6 + 8) <= v5)
  {
    sub_1CD411980(v6, v5 + 1);
    unsigned int v5 = *(_DWORD *)(a2 + 4);
  }
  uint64_t result = sub_1CBA5AB04((_DWORD *)(*(void *)v6 + 24 * v5), (void *)(a2 + 8));
  *((unsigned char *)result + 8) = a3;
  return result;
}

uint64_t sub_1CBA1B180(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  sub_1CBA5A4A0((uint64_t)v5, a2);
  uint64_t v3 = sub_1CBA59E14(a1, 9, (uint64_t)v5);
  if (v6 == v5)
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))();
  }
  return v3;
}

uint64_t sub_1CBA1B258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  sub_1CBA5A4A0((uint64_t)v4, a1);
  sub_1CBA63DCC(a2, v4);
  uint64_t result = (uint64_t)v5;
  if (v5 == v4) {
    return (*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

uint64_t sub_1CBA1B32C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  sub_1CBA5A4A0((uint64_t)v9, a2);
  sub_1CBA5A408((uint64_t)v7, a3);
  uint64_t v5 = sub_1CBA5A538(a1, 3, (uint64_t)v9, (uint64_t)v7);
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v5;
}

uint64_t sub_1CBA1B484(uint64_t a1, unsigned int a2, unint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v10 = a3;
  uint64_t v5 = sub_1CB8F1DC4(&v10);
  if (v6 == 1)
  {
    uint64_t v9 = v5;
    uint64_t v5 = v9;
  }
  v13[0] = &unk_1F261C360;
  v13[1] = a2 | (unint64_t)(v5 << 32);
  uint64_t v14 = v13;
  v11[0] = &unk_1F261C678;
  v11[1] = a2;
  v11[2] = v10;
  uint64_t v12 = v11;
  uint64_t v7 = sub_1CBA5A538(a1, 1, (uint64_t)v13, (uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
  return v7;
}

uint64_t sub_1CBA1B640(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  sub_1CBA5A4A0((uint64_t)v5, a2);
  uint64_t v3 = sub_1CBA59E14(a1, 6, (uint64_t)v5);
  if (v6 == v5)
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))();
  }
  return v3;
}

uint64_t sub_1CBA1B718(uint64_t a1, unint64_t *a2, uint64_t a3, llvm::IntegerType *****a4)
{
  uint64_t v5 = (llvm::MachineInstr *)a2;
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  uint64_t v89 = (uint64_t)a4[1];
  uint64_t v6 = a2 + 6;
  unint64_t v7 = a2[6];
  if (v7 < 8)
  {
    unint64_t v10 = 0;
  }
  else
  {
    if ((v7 & 7) == 0)
    {
      v7 &= 0xFFFFFFFFFFFFFFF8;
      a2[6] = v7;
      uint64_t v11 = (int *)(a2 + 7);
      unint64_t v10 = (int *)(a2 + 6);
      goto LABEL_13;
    }
    unsigned int v8 = (int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    if ((a2[6] & 7) != 3 || v8 == 0)
    {
      unint64_t v10 = 0;
LABEL_17:
      if ((v7 & 7) != 0)
      {
        uint64_t v14 = 0;
        if ((v7 & 7) == 3 && (uint64_t v15 = (int *)(v7 & 0xFFFFFFFFFFFFFFF8), (v7 & 0xFFFFFFFFFFFFFFF8) != 0))
        {
          uint64_t v16 = *v15;
          uint64_t v14 = v15 + 2;
        }
        else
        {
          uint64_t v16 = 0;
        }
      }
      else
      {
        v7 &= 0xFFFFFFFFFFFFFFF8;
        *uint64_t v6 = v7;
        uint64_t v16 = 1;
        uint64_t v14 = (int *)(a2 + 6);
      }
      goto LABEL_22;
    }
    uint64_t v13 = *v8;
    unint64_t v10 = v8 + 2;
    uint64_t v12 = v13;
    if (!v13) {
      goto LABEL_17;
    }
    uint64_t v11 = &v10[2 * v12];
LABEL_13:
    while ((*(_WORD *)(*(void *)v10 + 36) & 0xF00) == 0)
    {
      v10 += 2;
      if (v10 == v11)
      {
        unint64_t v10 = v11;
        break;
      }
    }
    if (v7 >= 8) {
      goto LABEL_17;
    }
  }
  uint64_t v14 = 0;
  uint64_t v16 = 0;
LABEL_22:
  if (v10 != &v14[2 * v16] && *(void *)v10) {
    return 0;
  }
  if ((v7 & 7) != 0)
  {
    unint64_t v17 = *(void *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unint64_t v17 = v7 & 0xFFFFFFFFFFFFFFF8;
    *uint64_t v6 = v7 & 0xFFFFFFFFFFFFFFF8;
  }
  char v18 = *(unsigned char *)(v17 + 34);
  uint64_t v19 = *(void *)(v17 + 8);
  if ((*(void *)(v17 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    unint64_t v21 = (unint64_t)(sub_1CB8F1DC4((unint64_t *)(v17 + 24)) + 7) >> 3;
    if (v20 == 1) {
  }
    }
  else
  {
    unint64_t v21 = -1;
  }
  sub_1CBA1531C((uint64_t)v98, (uint64_t)v5, a3);
  unint64_t v23 = v101;
  if ((v101 & 0xFFFFFFFFFFFFFFF9) != 0 && (v101 & 6) == 4)
  {
    char v24 = 3;
    if ((v101 & 1) == 0) {
      char v24 = 19;
    }
    if ((v101 & 0x8000000000000000 | (8 * (v101 >> v24))) == 0x40)
    {
      if ((v101 & 0x8000000000000) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v22);
        unint64_t v23 = v101;
      }
      if ((unsigned __int16)(v23 >> 3) <= 4u)
      {
        uint64_t v77 = (1 << *(unsigned char *)(v103 + 34)) | *(void *)(v103 + 8);
        if ((v77 & -v77) == 1) {
          return 0;
        }
      }
    }
  }
  uint64_t result = 0;
  int v26 = __clz(((1 << v18) | v19) & -((1 << v18) | v19));
  if ((63 - v26) <= 1u && (1 << (63 - v26)) % v21)
  {
    BOOL v27 = v26 == 63 || v21 >= 9;
    if (!v27) {
      return 0;
    }
    int v28 = v99;
    uint64_t v29 = v100;
    unint64_t v96 = v102;
    unint64_t v97 = v23;
    uint64_t v84 = (llvm::LLVMContext *)sub_1CB8F1DC4(&v96);
    if (v30 == 1)
    {
      if ((v29 & 0x80000000) != 0) {
        goto LABEL_44;
      }
    }
    else if ((v29 & 0x80000000) != 0)
    {
LABEL_44:
      uint64_t v31 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
LABEL_45:
      uint64_t v32 = *v31;
      int v90 = v29;
      if (v32)
      {
        if (*(unsigned char *)(v32 + 3)) {
          goto LABEL_47;
        }
        uint64_t v32 = *(void *)(v32 + 24);
        if (!v32) {
          goto LABEL_123;
        }
        if (*(unsigned char *)(v32 + 3))
        {
LABEL_47:
          uint64_t v33 = *(void *)(v32 + 8);
          if (!v33) {
            goto LABEL_51;
          }
          int v34 = **(unsigned __int16 **)(v33 + 16);
          if (v34 != 193 && v34 != 45) {
            goto LABEL_51;
          }
          sub_1CC73C210(*(_DWORD *)(*(void *)(v33 + 32) + 68), a3, (uint64_t)v109);
          if (!(_BYTE)v110) {
            goto LABEL_51;
          }
          if (LODWORD(v109[1]) < 0x41)
          {
            char v83 = 0;
            uint64_t v82 = (uint64_t)v109[0] << -(uint64_t)LODWORD(v109[1]) >> -(uint64_t)LODWORD(v109[1]);
            int v81 = *(_DWORD *)(*(void *)(v33 + 32) + 36);
            goto LABEL_52;
          }
          if (v109[0]) {
            MEMORY[0x1D25D9CB0](v109[0], 0x1000C8000313F17);
          }
LABEL_123:
          uint64_t v82 = 0;
          int v81 = 0;
          char v83 = 1;
          goto LABEL_52;
        }
      }
LABEL_51:
      uint64_t v82 = 0;
      int v81 = 0;
      char v83 = 1;
LABEL_52:
      uint64_t v106 = v108;
      uint64_t v107 = 0x400000000;
      if (v21)
      {
        uint64_t v80 = v5;
        unint64_t v86 = v17;
        unint64_t v87 = v21;
        int v78 = v28;
        unint64_t v79 = v23;
        unint64_t v35 = 0;
        unsigned int v36 = 0;
        unint64_t v85 = v29 & 0x7FFFFFFF;
        uint64_t v88 = (void *)(a3 + 424);
        do
        {
          unsigned int IncompleteVirtualRegister = v29;
          if (v36)
          {
            uint64_t v38 = 0;
            if ((v29 & 0x80000000) != 0 && v85 < *(unsigned int *)(a3 + 432)) {
              uint64_t v38 = *(void *)(*v88 + 8 * v85);
            }
            unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a3, "", 0);
            unint64_t v39 = IncompleteVirtualRegister & 0x7FFFFFFF;
            *(void *)(*(void *)(a3 + 24) + 16 * v39) = 4;
            unint64_t v40 = *(unsigned int *)(a3 + 432);
            if (v39 >= v40)
            {
              unint64_t v41 = v39 + 1;
              uint64_t v42 = *(void *)(a3 + 440);
              if (v39 >= *(unsigned int *)(a3 + 436)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v43 = *(_DWORD *)(a3 + 432);
              if (v41 != v40)
              {
                uint64_t v44 = (void *)(*v88 + 8 * *(unsigned int *)(a3 + 432));
                uint64_t v45 = ~v39 + v40;
                do
                {
                  *v44++ = v42;
                  BOOL v27 = __CFADD__(v45++, 1);
                }
                while (!v27);
                int v43 = *(_DWORD *)(a3 + 432);
              }
              *(_DWORD *)(a3 + 432) = v43 + v41 - v40;
            }
            *(void *)(*(void *)(a3 + 424) + 8 * v39) = v38;
            uint64_t v46 = *(void *)(a3 + 8);
            if (v46) {
              (*(void (**)(uint64_t, void))(*(void *)v46 + 24))(v46, IncompleteVirtualRegister);
            }
            v109[0] = (void *)((8 * v84) | 1);
            LODWORD(v109[1]) = 0;
            uint64_t v47 = (llvm::ConstantInt *)llvm::IntegerType::get(***a4[1], v84);
            if (v83)
            {
              uint64_t v48 = llvm::ConstantInt::get(v47, v35, (const llvm::APInt *)1);
              ((void (*)(llvm::IntegerType *****, void **, void *))(*a4)[2])(a4, v109, v48);
              int v50 = *(_DWORD *)(*(void *)(v49 + 32) + 4);
              LODWORD(v104) = IncompleteVirtualRegister;
              DWORD2(v104) = 1;
              LODWORD(v109[0]) = v90;
            }
            else
            {
              uint64_t v51 = llvm::ConstantInt::get(v47, v35 + v82, (const llvm::APInt *)1);
              ((void (*)(llvm::IntegerType *****, void **, void *))(*a4)[2])(a4, v109, v51);
              int v50 = *(_DWORD *)(*(void *)(v52 + 32) + 4);
              LODWORD(v104) = IncompleteVirtualRegister;
              DWORD2(v104) = 1;
              LODWORD(v109[0]) = v81;
            }
            LODWORD(v110) = 0;
            DWORD2(v110) = v50;
            int v111 = 0;
            ((void (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a4)[4])(a4, 193, &v104, 1, v109, 2, 0);
          }
          unsigned int v53 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a3, "", 0);
          unint64_t v54 = v53 & 0x7FFFFFFF;
          *(void *)(*(void *)(a3 + 24) + 16 * v54) = 4;
          unint64_t v55 = *(unsigned int *)(a3 + 432);
          if (v54 >= v55)
          {
            unint64_t v56 = v54 + 1;
            uint64_t v57 = *(void *)(a3 + 440);
            if (v54 >= *(unsigned int *)(a3 + 436)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v58 = *(_DWORD *)(a3 + 432);
            if (v56 != v55)
            {
              uint64_t v59 = (void *)(*v88 + 8 * *(unsigned int *)(a3 + 432));
              uint64_t v60 = ~v54 + v55;
              do
              {
                *v59++ = v57;
                BOOL v27 = __CFADD__(v60++, 1);
              }
              while (!v27);
              int v58 = *(_DWORD *)(a3 + 432);
            }
            *(_DWORD *)(a3 + 432) = v58 + v56 - v55;
          }
          *(void *)(*(void *)(a3 + 424) + 8 * v54) = 65;
          uint64_t v61 = *(void *)(a3 + 8);
          LODWORD(v29) = v90;
          if (v61) {
            (*(void (**)(uint64_t, void))(*(void *)v61 + 24))(v61, v53);
          }
          sub_1CB8F0264((uint64_t *)v86, v35, (uint64_t)&v104);
          long long v94 = v104;
          uint64_t v95 = v105;
          __int16 v62 = *(_WORD *)(v86 + 32);
          *(_OWORD *)uint64_t v109 = 0u;
          long long v110 = 0u;
          MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v89, (uint64_t)&v94, v62, 1, 0, (long long *)v109, 0, 1, 0, 0, 0);
          unsigned int v92 = v53;
          int v93 = 1;
          LODWORD(v109[0]) = IncompleteVirtualRegister;
          LODWORD(v110) = 0;
          sub_1CC737934(a4, 0x5Au, (int *)&v92, (int *)v109, MachineMemOperand);
          if (v107 >= (unint64_t)HIDWORD(v107)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v106 + v107) = v53;
          unint64_t v64 = (v107 + 1);
          LODWORD(v107) = v107 + 1;
          unint64_t v35 = ++v36;
        }
        while (v87 > v36);
        uint64_t v65 = (int *)v106;
        unint64_t v23 = v79;
        uint64_t v5 = v80;
        int v28 = v78;
        LOWORD(v21) = v87;
      }
      else
      {
        unint64_t v64 = 0;
        uint64_t v65 = (int *)v108;
      }
      *(void *)&long long v104 = (8 * (unsigned __int16)v21) | 0x400004;
      DWORD2(v104) = 0;
      v109[0] = &v110;
      v109[1] = (void *)0x800000000;
      if (v64 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v64)
      {
        uint64_t v66 = 0;
        uint64_t v67 = 4 * v64;
        do
        {
          int v68 = *v65++;
          uint64_t v69 = (_DWORD *)((char *)&v110 + v66);
          _DWORD *v69 = v68;
          v69[4] = 0;
          v66 += 24;
          v67 -= 4;
        }
        while (v67);
        int v70 = (int)v109[1];
      }
      else
      {
        int v70 = 0;
      }
      LODWORD(v109[1]) = v70 + v64;
      uint64_t v71 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, long long *))(*a4)[4])(a4, 77, &v104, 1, &v110);
      uint64_t v73 = v72;
      if (v109[0] != &v110) {
        free(v109[0]);
      }
      if ((v23 & 0xFFFFFFFFFFFFFFF9) != 0 && (v23 & 6) == 2)
      {
        unsigned int v92 = v28;
        int v93 = 1;
        sub_1CB8F1DC4(&v97);
        if (v74 == 1) {
        *(void *)&long long v104 = v71;
        }
        *((void *)&v104 + 1) = v73;
        LODWORD(v105) = 1;
        v109[0] = (void *)sub_1CC7382B0((uint64_t)a4);
        v109[1] = v75;
        LODWORD(v110) = 1;
        uint64_t v76 = (uint64_t)a4;
      }
      else
      {
        LODWORD(v104) = v28;
        DWORD2(v104) = 1;
        v109[0] = v71;
        v109[1] = v73;
        LODWORD(v110) = 1;
        uint64_t v76 = (uint64_t)a4;
      }
      sub_1CC7382B0(v76);
      llvm::MachineInstr::eraseFromParent(v5);
      if (v106 != v108) {
        free(v106);
      }
      return 1;
    }
    uint64_t v31 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v29);
    goto LABEL_45;
  }
  return result;
}

uint64_t sub_1CBA1C1AC(uint64_t a1, uint64_t a2, uint64_t a3, llvm::IntegerType *****a4)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t v75 = (uint64_t)a4[1];
  unint64_t v7 = (unint64_t *)(a2 + 48);
  unint64_t v8 = *(void *)(a2 + 48);
  if (v8 < 8)
  {
    uint64_t v11 = 0;
  }
  else
  {
    if ((v8 & 7) == 0)
    {
      v8 &= 0xFFFFFFFFFFFFFFF8;
      *(void *)(a2 + 48) = v8;
      uint64_t v12 = a2 + 56;
      uint64_t v11 = (int *)(a2 + 48);
      goto LABEL_13;
    }
    uint64_t v9 = (int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if ((*(void *)(a2 + 48) & 7) != 3 || v9 == 0)
    {
      uint64_t v11 = 0;
LABEL_17:
      if ((v8 & 7) != 0)
      {
        uint64_t v15 = 0;
        if ((v8 & 7) == 3 && (uint64_t v16 = (int *)(v8 & 0xFFFFFFFFFFFFFFF8), (v8 & 0xFFFFFFFFFFFFFFF8) != 0))
        {
          uint64_t v17 = *v16;
          uint64_t v15 = v16 + 2;
        }
        else
        {
          uint64_t v17 = 0;
        }
      }
      else
      {
        v8 &= 0xFFFFFFFFFFFFFFF8;
        unint64_t *v7 = v8;
        uint64_t v17 = 1;
        uint64_t v15 = (int *)(a2 + 48);
      }
      goto LABEL_22;
    }
    uint64_t v14 = *v9;
    uint64_t v11 = v9 + 2;
    uint64_t v13 = v14;
    if (!v14) {
      goto LABEL_17;
    }
    uint64_t v12 = (uint64_t)&v11[2 * v13];
LABEL_13:
    while ((*(_WORD *)(*(void *)v11 + 36) & 0xF00) == 0)
    {
      v11 += 2;
      if (v11 == (int *)v12)
      {
        uint64_t v11 = (int *)v12;
        break;
      }
    }
    if (v8 >= 8) {
      goto LABEL_17;
    }
  }
  uint64_t v15 = 0;
  uint64_t v17 = 0;
LABEL_22:
  if (v11 != &v15[2 * v17] && *(void *)v11) {
    return 0;
  }
  if ((v8 & 7) != 0)
  {
    unint64_t v18 = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unint64_t v18 = v8 & 0xFFFFFFFFFFFFFFF8;
    unint64_t *v7 = v8 & 0xFFFFFFFFFFFFFFF8;
  }
  char v19 = *(unsigned char *)(v18 + 34);
  uint64_t v20 = *(void *)(v18 + 8);
  if ((*(void *)(v18 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    unint64_t v22 = (unint64_t)(sub_1CB8F1DC4((unint64_t *)(v18 + 24)) + 7) >> 3;
    if (v21 == 1) {
  }
    }
  else
  {
    unint64_t v22 = -1;
  }
  sub_1CBA1531C((uint64_t)v82, a2, a3);
  unsigned int v24 = v85;
  if ((v85 & 0xFFFFFFFFFFFFFFF9) != 0 && (v85 & 6) == 4)
  {
    char v25 = 3;
    if ((v85 & 1) == 0) {
      char v25 = 19;
    }
    if ((v85 & 0x8000000000000000 | (8 * (v85 >> v25))) == 0x40)
    {
      if ((v85 & 0x8000000000000) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v23);
        unsigned int v24 = v85;
      }
      if ((unsigned __int16)(v24 >> 3) <= 4u)
      {
        uint64_t v50 = (1 << *(unsigned char *)(v87 + 34)) | *(void *)(v87 + 8);
        if ((v50 & -v50) == 1) {
          return 0;
        }
      }
    }
  }
  uint64_t result = 0;
  int v27 = __clz(((1 << v19) | v20) & -((1 << v19) | v20));
  if ((63 - v27) <= 1u && (1 << (63 - v27)) % v22)
  {
    if (v27 != 63 && v22 < 9) {
      return 0;
    }
    int v29 = v83;
    unsigned int v30 = v84;
    unint64_t v81 = v86;
    uint64_t v32 = sub_1CB8F1DC4(&v81);
    if (v31 == 1) {
    uint64_t v33 = (8 * v32) | 1;
    }
    unsigned int v80 = 0;
    *(void *)&long long v98 = v33;
    *((void *)&v98 + 1) = &v80;
    LODWORD(__b) = v30;
    if (sub_1CBA65370((uint64_t)&v98, a3, (unsigned int *)&__b)) {
      uint64_t v34 = v80;
    }
    else {
      uint64_t v34 = v30;
    }
    uint64_t v72 = v34;
    uint64_t v69 = (llvm::MachineInstr *)a2;
    uint64_t v74 = (llvm::LLVMContext *)v32;
    if ((v85 & 0xFFFFFFFFFFFFFFF9) != 0 && (v85 & 6) == 2)
    {
      __b = (void *)(((v22 & 0x1FFFFFFF) << 6) | 1);
      int v92 = 0;
      LODWORD(v98) = v29;
      LODWORD(v99) = 0;
      sub_1CC7382B0((uint64_t)a4);
      int v29 = *(_DWORD *)(*(void *)(v35 + 32) + 4);
    }
    __b = (void *)((8 * (unsigned __int16)v22) | 0x400004);
    int v92 = 0;
    LODWORD(v98) = v29;
    LODWORD(v99) = 0;
    sub_1CC7382B0((uint64_t)a4);
    int v37 = *(_DWORD *)(*(void *)(v36 + 32) + 4);
    uint64_t v95 = v97;
    uint64_t v96 = 0x800000000;
    uint64_t v38 = (uint64_t *)v94;
    __b = v94;
    int v93 = 8;
    if (v22 >= 9)
    {
      int v92 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v22) {
      memset_pattern16(v94, &unk_1CDB0E0B0, 8 * v22);
    }
    int v92 = v22;
    LODWORD(v78) = v37;
    LODWORD(v79) = 0;
    *(void *)&long long v98 = &v99;
    *((void *)&v98 + 1) = 0x800000000;
    if (v22 >= 9uLL) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v22)
    {
      uint64_t v39 = 8 * v22;
      unint64_t v40 = &v99;
      do
      {
        uint64_t v41 = *v38++;
        *(void *)unint64_t v40 = v41;
        *((_DWORD *)v40++ + 2) = 0;
        v39 -= 8;
      }
      while (v39);
      int v42 = DWORD2(v98);
      int v43 = (long long *)v98;
    }
    else
    {
      int v42 = 0;
      int v43 = &v99;
    }
    DWORD2(v98) = v42 + v22;
    ((void (*)(llvm::IntegerType *****, uint64_t, long long *))(*a4)[4])(a4, 74, v43);
    uint64_t v45 = v44;
    if ((long long *)v98 == &v99)
    {
      if (!v22) {
        goto LABEL_77;
      }
    }
    else
    {
      free((void *)v98);
      if (!v22) {
        goto LABEL_77;
      }
    }
    uint64_t v46 = 0;
    unsigned int v47 = 1;
    unsigned int v48 = v96;
    do
    {
      if (v48 >= HIDWORD(v96)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v95 + v48) = *(_DWORD *)(*(void *)(v45 + 32) + 32 * v46 + 4);
      unsigned int v48 = v96 + 1;
      LODWORD(v96) = v96 + 1;
      uint64_t v46 = v47;
      BOOL v49 = v22 > v47++;
    }
    while (v49);
LABEL_77:
    if ((v72 & 0x80000000) != 0) {
      uint64_t v51 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v72 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v51 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v72);
    }
    uint64_t v52 = *v51;
    if (v52)
    {
      if (*(unsigned char *)(v52 + 3) & 1) != 0 || (uint64_t v52 = *(void *)(v52 + 24)) != 0 && (*(unsigned char *)(v52 + 3))
      {
        uint64_t v53 = *(void *)(v52 + 8);
        if (v53)
        {
          int v54 = **(unsigned __int16 **)(v53 + 16);
          if (v54 == 193 || v54 == 45)
          {
            sub_1CC73C210(*(_DWORD *)(*(void *)(v53 + 32) + 68), a3, (uint64_t)&v98);
            if ((_BYTE)v99)
            {
              if (DWORD2(v98) < 0x41)
              {
                char v73 = 0;
                uint64_t v71 = (uint64_t)((void)v98 << -(uint64_t)DWORD2(v98)) >> -(uint64_t)DWORD2(v98);
                int v70 = *(_DWORD *)(*(void *)(v53 + 32) + 36);
                if (v22)
                {
LABEL_86:
                  unint64_t v55 = 0;
                  unsigned int v56 = 1;
                  do
                  {
                    if (v56 != 1)
                    {
                      *(void *)&long long v98 = v33;
                      DWORD2(v98) = 0;
                      uint64_t v57 = (llvm::ConstantInt *)llvm::IntegerType::get(***a4[1], v74);
                      if (v73)
                      {
                        int v58 = llvm::ConstantInt::get(v57, v55, (const llvm::APInt *)1);
                        uint64_t v59 = ((uint64_t (*)(llvm::IntegerType *****, long long *, void *))(*a4)[2])(a4, &v98, v58);
                        uint64_t v61 = v60;
                        LODWORD(v78) = v72;
                      }
                      else
                      {
                        __int16 v62 = llvm::ConstantInt::get(v57, v55 + v71, (const llvm::APInt *)1);
                        uint64_t v59 = ((uint64_t (*)(llvm::IntegerType *****, long long *, void *))(*a4)[2])(a4, &v98, v62);
                        uint64_t v61 = v63;
                        LODWORD(v78) = v70;
                      }
                      LODWORD(v79) = 0;
                      uint64_t v64 = sub_1CC7382B0((uint64_t)a4);
                      uint64_t v88 = v33;
                      LODWORD(v89) = 0;
                      *(void *)&long long v98 = v64;
                      *((void *)&v98 + 1) = v65;
                      LODWORD(v99) = 1;
                      *((void *)&v99 + 1) = v59;
                      uint64_t v100 = v61;
                      int v101 = 1;
                      ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, long long *, uint64_t, void))(*a4)[4])(a4, 45, &v88, 1, &v98, 2, 0);
                    }
                    sub_1CB8F0264((uint64_t *)v18, v55, (uint64_t)&v78);
                    long long v76 = v78;
                    uint64_t v77 = v79;
                    __int16 v66 = *(_WORD *)(v18 + 32);
                    long long v98 = 0u;
                    long long v99 = 0u;
                    MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v75, (uint64_t)&v76, v66, 1, 0, &v98, 0, 1, 0, 0, 0);
                    LODWORD(v98) = *((_DWORD *)v95 + v55);
                    LODWORD(v99) = 0;
                    uint64_t v88 = sub_1CC7382B0((uint64_t)a4);
                    uint64_t v89 = v68;
                    int v90 = 1;
                    sub_1CC737D1C(a4, (int *)&v98, (int *)&v88, MachineMemOperand);
                    unint64_t v55 = v56;
                    BOOL v49 = v22 > v56++;
                  }
                  while (v49);
                }
LABEL_93:
                llvm::MachineInstr::eraseFromParent(v69);
                if (__b != v94) {
                  free(__b);
                }
                if (v95 != v97) {
                  free(v95);
                }
                return 1;
              }
              if ((void)v98) {
                MEMORY[0x1D25D9CB0](v98, 0x1000C8000313F17);
              }
            }
          }
        }
      }
    }
    uint64_t v71 = 0;
    int v70 = 0;
    char v73 = 1;
    if (v22) {
      goto LABEL_86;
    }
    goto LABEL_93;
  }
  return result;
}

uint64_t sub_1CBA1CA98(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v1819 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (void *)*a2;
  uint64_t v1768 = *(void *)(*a2 + 24);
  uint64_t v5 = *(unsigned int *)(a3 + 40);
  v1751 = (llvm::ConstantFP *)a2[1];
  if (v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = *(unsigned __int8 **)(a3 + 32);
    while (1)
    {
      int v8 = *v7;
      v7 += 32;
      if (v8 == 17) {
        break;
      }
      if (v5 == ++v6) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    LODWORD(v6) = -1;
  }
  unsigned int v1758 = *(_DWORD *)(*(void *)(a3 + 32) + 32 * v6 + 16);
  uint64_t v9 = *(llvm::ConstantFP *****)(*(void *)(a3 + 24) + 32);
  unint64_t v10 = v9[1];
  int v11 = v10 + 1328;
  uint64_t v12 = (void *)((uint64_t (*)(llvm::ConstantFP ***))v10[166][22])(v10 + 166);
  v1741 = (llvm::ConstantFP *)((uint64_t (*)(llvm::ConstantFP ***))v10[166][13])(v10 + 166);
  uint64_t v13 = ((uint64_t (*)(llvm::ConstantFP ***))v10[166][23])(v10 + 166);
  int v14 = *((unsigned __int8 *)v10 + 1646);
  if (*((unsigned char *)v10 + 1646))
  {
    int v15 = 4;
    uint64_t v16 = v1758;
  }
  else
  {
    uint64_t v16 = v1758;
    if (*((unsigned char *)v10 + 1647))
    {
      int v15 = 5;
    }
    else if (*((unsigned char *)v10 + 1648))
    {
      int v15 = 6;
    }
    else if (*((unsigned char *)v10 + 1649))
    {
      int v15 = 7;
    }
    else
    {
      int v15 = 9;
    }
  }
  int v17 = *((unsigned __int8 *)v10 + 1654);
  v4[5] = *(void *)(a3 + 24);
  v4[6] = a3;
  v1774 = (llvm::MachineInstr *)a3;
  unint64_t v18 = (unsigned __int8 **)(a3 + 56);
  char v19 = (unsigned __int8 **)(v4 + 4);
  if (v18 != v4 + 4)
  {
    uint64_t v20 = *v19;
    if (!*v19) {
      goto LABEL_17;
    }
    int v80 = *v20;
    if ((v80 - 4) > 0x1E)
    {
      if ((v80 - 3) >= 0xFFFFFFFE) {
        unint64_t v97 = *v19;
      }
      else {
        unint64_t v97 = 0;
      }
      if ((v80 - 3) < 0xFFFFFFFE)
      {
        if (v80 == 3) {
          *((void *)v20 + 1) = 0;
        }
        goto LABEL_17;
      }
      int v1776 = v15;
      uint64_t v1705 = v13;
      unint64_t v82 = (unint64_t)(v97 + 8);
    }
    else
    {
      if ((v20[1] & 0x7F) != 2 && !*((_DWORD *)v20 + 3)
        || (uint64_t v81 = *((void *)v20 + 2), (v81 & 4) == 0)
        || (unint64_t v82 = v81 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
LABEL_17:
        unint64_t v21 = *v18;
        *char v19 = *v18;
        if (v21)
        {
          int v1733 = v10 + 1328;
          int v1724 = v17;
          uint64_t v75 = v12;
          long long v76 = v10;
          uint64_t v77 = v9;
          uint64_t v78 = v13;
          int v79 = v15;
          llvm::MetadataTracking::track((uint64_t)(v4 + 4), v21, 2);
          int v15 = v79;
          uint64_t v16 = v1758;
          uint64_t v13 = v78;
          uint64_t v9 = v77;
          unint64_t v10 = v76;
          uint64_t v12 = v75;
          int v17 = v1724;
          int v11 = v1733;
        }
        goto LABEL_19;
      }
      int v1776 = v15;
      uint64_t v1705 = v13;
    }
    v1810[0] = v4 + 4;
    sub_1CC5FA668(v82 + 16, v1810);
    uint64_t v13 = v1705;
    uint64_t v16 = v1758;
    int v15 = v1776;
    goto LABEL_17;
  }
LABEL_19:
  v1775 = (llvm::IntegerType *****)v4;
  BOOL v22 = 1;
  if ((int)v16 > 260)
  {
    switch((int)v16)
    {
      case 280:
        v604 = v1774;
        uint64_t v605 = *((void *)v1774 + 4);
        int v606 = *(_DWORD *)(v605 + 4);
        if (v606 < 0)
        {
          uint64_t v793 = v606 & 0x7FFFFFFF;
          uint64_t v608 = v1768;
          if (v793 >= *(_DWORD *)(v1768 + 432)) {
            v607 = 0;
          }
          else {
            v607 = *(void **)(*(void *)(v1768 + 424) + 8 * v793);
          }
        }
        else
        {
          v607 = 0;
          uint64_t v608 = v1768;
        }
        v997 = ***v1775[1];
        *(void *)&long long v1783 = v607;
        v1791[0] = v607;
        uint64_t v998 = v605 + 32 * (v6 + 1);
        uint64_t v999 = *(unsigned int *)(v998 + 4);
        if ((v999 & 0x80000000) != 0) {
          v1000 = (uint64_t *)(*(void *)(v608 + 24) + 16 * (v999 & 0x7FFFFFFF) + 8);
        }
        else {
          v1000 = (uint64_t *)(*(void *)(v608 + 272) + 8 * v999);
        }
        uint64_t v1001 = *v1000;
        if (!v1001) {
          goto LABEL_932;
        }
        if (*(unsigned char *)(v1001 + 3)) {
          goto LABEL_924;
        }
        uint64_t v1001 = *(void *)(v1001 + 24);
        if (v1001)
        {
          v604 = v1774;
          if (*(unsigned char *)(v1001 + 3))
          {
LABEL_924:
            uint64_t v1002 = *(void *)(v1001 + 8);
            if (!v1002) {
              goto LABEL_932;
            }
            int v1003 = **(unsigned __int16 **)(v1002 + 16);
            if (v1003 != 179)
            {
              if (v1003 != 178) {
                goto LABEL_932;
              }
              uint64_t v998 = *(void *)(v1002 + 32) + 32;
              uint64_t v1004 = 129;
              goto LABEL_931;
            }
            if ((*((_WORD *)v10 + 510) & 1) != 0 || (*((_WORD *)v604 + 22) & 0x200) != 0)
            {
              uint64_t v998 = *(void *)(v1002 + 32) + 32;
              uint64_t v1004 = 257;
LABEL_931:
              *(void *)&long long v1783 = v1004;
            }
          }
        }
        else
        {
          v604 = v1774;
        }
LABEL_932:
        uint64_t v1006 = sub_1CB8F1DC4((unint64_t *)&v1783);
        if (v1005 == 1) {
        v1007 = &unk_1CFB2E308;
        }
        if (v1006 == 16) {
          v1008 = &unk_1CFB2E2E0;
        }
        else {
          v1008 = &unk_1CFB2E308;
        }
        v1692 = v1008;
        uint64_t v1010 = sub_1CB8F1DC4((unint64_t *)v1791);
        if (v1009 == 1) {
        uint64_t v1696 = v1006;
        }
        if (v1010 == 16) {
          v1007 = &unk_1CFB2E2E0;
        }
        uint64_t v1012 = sub_1CB8F1DC4((unint64_t *)&v1783);
        if (v1011 == 1) {
        uint64_t v1013 = v998;
        }
        if (v1012 == 16)
        {
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = *(_DWORD *)(v998 + 4);
          LODWORD(v1810[2]) = 0;
          ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 178, v1798, 1, v1810, 1, 0);
          uint64_t v1013 = *(void *)(v1014 + 32);
        }
        uint64_t v1702 = v1010;
        BOOL v1015 = 0;
        if ((*((_WORD *)v10 + 510) & 1) == 0 && (*((_WORD *)v604 + 22) & 0x200) == 0 && (void)v1783 == 257) {
          BOOL v1015 = v1791[0] == (void *)257;
        }
        v1798[0] = (llvm::MachineInstr *)257;
        LODWORD(v1798[1]) = 0;
        LODWORD(v1793[1]) = 32;
        v1793[0] = (void *)0x20000000;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1810[1], (const llvm::APInt **)v1793);
        v1017 = llvm::ConstantFP::get(v997, (llvm::LLVMContext *)v1810, v1016);
        uint64_t v1018 = ((uint64_t (*)(llvm::IntegerType *****, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))(*v1775)[3])(v1775, v1798, v1017);
        uint64_t v1020 = v1019;
        if (v1810[1] == &unk_1CFB2E344)
        {
          sub_1CB845718((uint64_t *)&v1810[2]);
        }
        else if ((*((_DWORD *)v1810[1] + 2) - 64) <= 0xFFFFFF7F && v1810[2])
        {
          MEMORY[0x1D25D9CB0](v1810[2], 0x1000C8000313F17);
        }
        v1745 = v997;
        if (v1015 && (!*((unsigned char *)v10 + 1681) || *((unsigned char *)v10 + 1682)))
        {
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          LODWORD(v1793[1]) = 32;
          v1793[0] = (void *)1333788672;
          llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1810[1], (const llvm::APInt **)v1793);
          v1022 = llvm::ConstantFP::get(v997, (llvm::LLVMContext *)v1810, v1021);
          v1023 = (void *)((uint64_t (*)(llvm::IntegerType *****, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))(*v1775)[3])(v1775, v1798, v1022);
          v1025 = v1024;
          if (v1810[1] == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)&v1810[2]);
          }
          else if ((*((_DWORD *)v1810[1] + 2) - 64) <= 0xFFFFFF7F && v1810[2])
          {
            MEMORY[0x1D25D9CB0](v1810[2], 0x1000C8000313F17);
          }
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = *(_DWORD *)(v1013 + 4);
          LODWORD(v1810[2]) = 0;
          v1810[3] = v1023;
          v1810[4] = v1025;
          LODWORD(v1811) = 1;
          uint64_t v1026 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 165, v1798, 1, v1810, 2, 0);
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = 4;
          LODWORD(v1810[2]) = 2;
          LODWORD(v1810[3]) = *(_DWORD *)(v998 + 4);
          LODWORD(v1811) = 0;
          *((void *)&v1811 + 1) = v1018;
          *(void *)&long long v1812 = v1020;
          DWORD2(v1812) = 1;
          uint64_t v1813 = v1026;
          v1814 = v1027;
          int v1815 = 1;
          LODWORD(v1816) = *(_DWORD *)(v1013 + 4);
          int v1818 = 0;
          ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 51, v1798, 1, v1810, 5, 0);
          uint64_t v1013 = *(void *)(v1028 + 32);
        }
        uint64_t v1029 = *((unsigned __int16 *)v604 + 22) | 0x100000000;
        if (v1015) {
          uint64_t v1030 = 0x100000000;
        }
        else {
          uint64_t v1030 = *((unsigned __int16 *)v604 + 22) | 0x100000000;
        }
        uint64_t v1763 = v1013;
        uint64_t v1719 = v1030;
        if (*((unsigned char *)v10 + 1681))
        {
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = *(_DWORD *)(v1013 + 4);
          LODWORD(v1810[2]) = 0;
          uint64_t v1031 = (uint64_t)v1775;
          ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t))(*v1775)[4])(v1775, 356, v1798, 1, v1810, 1);
        }
        else
        {
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = *(_DWORD *)(v1013 + 4);
          LODWORD(v1810[2]) = 0;
          uint64_t v1031 = (uint64_t)v1775;
          uint64_t v1033 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t))(*v1775)[4])(v1775, 335, v1798, 1, v1810, 1);
          v1035 = v1034;
          if (sub_1CBA35C44(*(_DWORD *)(v998 + 4), v1768, 0)) {
            goto LABEL_965;
          }
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = 1;
          LODWORD(v1810[2]) = 2;
          LODWORD(v1810[3]) = *(_DWORD *)(v998 + 4);
          LODWORD(v1811) = 0;
          v1793[0] = (void *)v1783;
          LODWORD(v1793[1]) = 0;
          *((void *)&v1811 + 1) = sub_1CC7374CC((uint64_t)v1775, (unint64_t *)v1793, 0.0);
          *(void *)&long long v1812 = v1036;
          DWORD2(v1812) = 1;
          *(void *)&long long v1795 = 257;
          uint64_t v1031 = (uint64_t)v1775;
          DWORD2(v1795) = 0;
          uint64_t v1813 = sub_1CC7374CC((uint64_t)v1775, (unint64_t *)&v1795, 0.0);
          v1814 = v1037;
          int v1815 = 1;
          uint64_t v1816 = v1033;
          v1817 = v1035;
          int v1818 = 1;
          ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t))(*v1775)[4])(v1775, 51, v1798, 1, v1810, 5);
        }
        v1035 = v1032;
LABEL_965:
        uint64_t v1708 = v1018;
        uint64_t v1712 = v1020;
        size_t v1726 = v998;
        uint64_t v1038 = *((void *)v1035 + 4);
        uint64_t v1689 = v1038;
        if (v1015)
        {
          v1810[0] = (void *)257;
          LODWORD(v1810[1]) = 0;
          v1039 = (void *)sub_1CC7374CC(v1031, (unint64_t *)v1810, 0.5);
          v1041 = v1040;
          v1685 = v1040;
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = *(_DWORD *)(v1763 + 4);
          LODWORD(v1810[2]) = 0;
          LODWORD(v1810[3]) = *(_DWORD *)(v1038 + 4);
          LODWORD(v1811) = 0;
          BOOL v1736 = v1015;
          v1042 = (llvm::MachineInstr *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 165, v1798, 1, v1810, 2, 0);
          v1044 = v1043;
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v1039;
          v1810[1] = v1041;
          LODWORD(v1810[2]) = 1;
          LODWORD(v1810[3]) = *(_DWORD *)(v1038 + 4);
          LODWORD(v1811) = 0;
          v1045 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 165, v1798, 1, v1810, 2, 0);
          v1047 = v1046;
          v1793[0] = (void *)257;
          LODWORD(v1793[1]) = 0;
          *(void *)&long long v1795 = 257;
          DWORD2(v1795) = 0;
          v1798[0] = v1042;
          v1798[1] = v1044;
          LODWORD(v1799) = 1;
          v1810[0] = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, llvm::MachineInstr **, uint64_t, void))(*v1775)[4])(v1775, 177, &v1795, 1, v1798, 1, 0);
          v1810[1] = v1048;
          LODWORD(v1810[2]) = 1;
          v1810[3] = v1042;
          v1810[4] = v1044;
          LODWORD(v1811) = 1;
          DWORD2(v1811) = *(_DWORD *)(v1763 + 4);
          DWORD2(v1812) = 0;
          v1049 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 166, v1793, 1, v1810, 3, 0);
          v1051 = v1050;
          v1793[0] = (void *)257;
          LODWORD(v1793[1]) = 0;
          *(void *)&long long v1795 = 257;
          DWORD2(v1795) = 0;
          v1798[0] = v1042;
          v1798[1] = v1044;
          LODWORD(v1799) = 1;
          v1810[0] = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, llvm::MachineInstr **, uint64_t, void))(*v1775)[4])(v1775, 177, &v1795, 1, v1798, 1, 0);
          v1810[1] = v1052;
          LODWORD(v1810[2]) = 1;
          v1810[3] = v1045;
          v1810[4] = v1047;
          LODWORD(v1811) = 1;
          *((void *)&v1811 + 1) = v1039;
          *(void *)&long long v1812 = v1685;
          DWORD2(v1812) = 1;
          v1053 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 166, v1793, 1, v1810, 3, 0);
          v1055 = v1054;
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v1049;
          v1810[1] = v1051;
          LODWORD(v1810[2]) = 1;
          v1810[3] = v1045;
          v1810[4] = v1047;
          LODWORD(v1811) = 1;
          *((void *)&v1811 + 1) = v1042;
          BOOL v1015 = v1736;
          *(void *)&long long v1812 = v1044;
          DWORD2(v1812) = 1;
          v1056 = (llvm::MachineInstr *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 166, v1798, 1, v1810, 3, 0);
          v1058 = v1057;
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v1045;
          v1810[1] = v1047;
          LODWORD(v1810[2]) = 1;
          v1810[3] = v1053;
          uint64_t v1031 = (uint64_t)v1775;
          v1810[4] = v1055;
          LODWORD(v1811) = 1;
          *((void *)&v1811 + 1) = v1045;
          *(void *)&long long v1812 = v1047;
          DWORD2(v1812) = 1;
          v1059 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 166, v1798, 1, v1810, 3, 0);
          v1061 = v1060;
          v1793[0] = (void *)257;
          LODWORD(v1793[1]) = 0;
          *(void *)&long long v1795 = 257;
          DWORD2(v1795) = 0;
          v1798[0] = v1056;
          v1798[1] = v1058;
          LODWORD(v1799) = 1;
          v1810[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, llvm::MachineInstr **, uint64_t, void))(*(void *)v1031 + 32))(v1031, 177, &v1795, 1, v1798, 1, 0);
          v1810[1] = v1062;
          LODWORD(v1810[2]) = 1;
          v1810[3] = v1056;
          v1810[4] = v1058;
          LODWORD(v1811) = 1;
          DWORD2(v1811) = *(_DWORD *)(v1763 + 4);
          DWORD2(v1812) = 0;
          v1063 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)v1031 + 32))(v1031, 166, v1793, 1, v1810, 3, 0);
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v1063;
          v1810[1] = v1064;
          LODWORD(v1810[2]) = 1;
          v1810[3] = v1059;
          v1810[4] = v1061;
          LODWORD(v1811) = 1;
          *((void *)&v1811 + 1) = v1056;
          *(void *)&long long v1812 = v1058;
          DWORD2(v1812) = 1;
          v1065 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 166, v1798, 1, v1810, 3, 0);
        }
        else
        {
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = *(_DWORD *)(v1038 + 4);
          LODWORD(v1810[2]) = 0;
          LODWORD(v1810[3]) = *(_DWORD *)(v1763 + 4);
          LODWORD(v1811) = 0;
          v1065 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, uint64_t))(*(void *)v1031 + 32))(v1031, 165, v1798, 1, v1810, 2, v1029);
        }
        v1067 = v1065;
        v1068 = v1066;
        v1069 = v1751;
        if (v1791[0] == (void *)129)
        {
          v1798[0] = (llvm::MachineInstr *)129;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v1065;
          v1810[1] = v1066;
          LODWORD(v1810[2]) = 1;
          v1067 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*(void *)v1031 + 32))(v1031, 179, v1798, 1, v1810, 1, 0);
          v1068 = v1070;
        }
        v1071 = v1745;
        if (!*((unsigned char *)v10 + 1681))
        {
          v1798[0] = (llvm::MachineInstr *)v1783;
          LODWORD(v1798[1]) = 0;
          BYTE4(v1810[3]) = BYTE4(v1810[3]) & 0xF0 | 3;
          if (v1696 == 16) {
            int v1072 = -15;
          }
          else {
            int v1072 = -127;
          }
          LODWORD(v1810[3]) = v1072;
          v1810[1] = v1692;
          v1810[2] = 0;
          sub_1CB87E790((uint64_t)v1810, 0);
          v1074 = llvm::ConstantFP::get(v1745, (llvm::LLVMContext *)v1810, v1073);
          uint64_t v1075 = (*(uint64_t (**)(uint64_t, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))(*(void *)v1031 + 24))(v1031, v1798, v1074);
          uint64_t v1077 = v1076;
          BOOL v1078 = v1015;
          if (v1810[1] == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)&v1810[2]);
          }
          else if ((*((_DWORD *)v1810[1] + 2) - 64) <= 0xFFFFFF7F && v1810[2])
          {
            MEMORY[0x1D25D9CB0](v1810[2], 0x1000C8000313F17);
          }
          v1798[0] = (llvm::MachineInstr *)v1791[0];
          LODWORD(v1798[1]) = 0;
          BYTE4(v1810[3]) = BYTE4(v1810[3]) & 0xF0 | 3;
          if (v1702 == 16) {
            int v1079 = -15;
          }
          else {
            int v1079 = -127;
          }
          LODWORD(v1810[3]) = v1079;
          v1810[1] = v1007;
          v1810[2] = 0;
          sub_1CB87E790((uint64_t)v1810, 0);
          v1081 = llvm::ConstantFP::get(v1745, (llvm::LLVMContext *)v1810, v1080);
          uint64_t v1082 = (*(uint64_t (**)(uint64_t, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))(*(void *)v1031 + 24))(v1031, v1798, v1081);
          v1084 = v1083;
          if (v1810[1] == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)&v1810[2]);
          }
          else if ((*((_DWORD *)v1810[1] + 2) - 64) <= 0xFFFFFF7F && v1810[2])
          {
            MEMORY[0x1D25D9CB0](v1810[2], 0x1000C8000313F17);
          }
          v1798[0] = (llvm::MachineInstr *)v1791[0];
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = 1;
          LODWORD(v1810[2]) = 2;
          LODWORD(v1810[3]) = *(_DWORD *)(v1726 + 4);
          LODWORD(v1811) = 0;
          *((void *)&v1811 + 1) = v1075;
          *(void *)&long long v1812 = v1077;
          DWORD2(v1812) = 1;
          uint64_t v1813 = v1082;
          v1814 = v1084;
          int v1815 = 1;
          uint64_t v1816 = (uint64_t)v1067;
          v1817 = v1068;
          int v1818 = 1;
          v1067 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, uint64_t))(*(void *)v1031 + 32))(v1031, 51, v1798, 1, v1810, 5, v1719);
          v1068 = v1085;
          v1071 = v1745;
          BOOL v1015 = v1078;
          v1069 = v1751;
        }
        if (!v1015) {
          goto LABEL_990;
        }
        v1798[0] = (llvm::MachineInstr *)257;
        LODWORD(v1798[1]) = 0;
        LODWORD(v1793[1]) = 32;
        v1793[0] = (void *)931135488;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1810[1], (const llvm::APInt **)v1793);
        v1087 = llvm::ConstantFP::get(v1071, (llvm::LLVMContext *)v1810, v1086);
        v1088 = (void *)(*(uint64_t (**)(uint64_t, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))(*(void *)v1031 + 24))(v1031, v1798, v1087);
        v1090 = v1089;
        if (v1810[1] == &unk_1CFB2E344)
        {
          sub_1CB845718((uint64_t *)&v1810[2]);
        }
        else if ((*((_DWORD *)v1810[1] + 2) - 64) <= 0xFFFFFF7F)
        {
          if (v1810[2]) {
            MEMORY[0x1D25D9CB0](v1810[2], 0x1000C8000313F17);
          }
        }
        if (*((unsigned char *)v10 + 1681))
        {
          v1810[0] = (void *)257;
          LODWORD(v1810[1]) = 0;
          uint64_t v1091 = sub_1CC7374CC(v1031, (unint64_t *)v1810, 1.0);
          v1798[0] = (llvm::MachineInstr *)v1791[0];
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = 1;
          LODWORD(v1810[2]) = 2;
          LODWORD(v1810[3]) = *(_DWORD *)(v1689 + 4);
          LODWORD(v1811) = 0;
          *((void *)&v1811 + 1) = v1091;
          *(void *)&long long v1812 = v1092;
          DWORD2(v1812) = 1;
          LODWORD(v1813) = *(_DWORD *)(v1763 + 4);
          int v1815 = 0;
          uint64_t v1816 = (uint64_t)v1067;
          v1817 = v1068;
          int v1818 = 1;
          v1093 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*(void *)v1031 + 32))(v1031, 51, v1798, 1, v1810, 5, 0);
          v1068 = v1094;
          if (!*((unsigned char *)v10 + 1682)) {
            goto LABEL_990;
          }
          uint64_t v1095 = v1031;
          uint64_t v1096 = (uint64_t)v1093;
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v1093;
          v1810[1] = v1094;
          LODWORD(v1810[2]) = 1;
          v1810[3] = v1088;
          v1810[4] = v1090;
          LODWORD(v1811) = 1;
          uint64_t v1097 = (*(uint64_t (**)(uint64_t, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*(void *)v1095 + 32))(v1095, 165, v1798, 1, v1810, 2, 0);
          v1798[0] = (llvm::MachineInstr *)v1791[0];
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = 4;
          LODWORD(v1810[2]) = 2;
          LODWORD(v1810[3]) = *(_DWORD *)(v1726 + 4);
          LODWORD(v1811) = 0;
          *((void *)&v1811 + 1) = v1708;
          *(void *)&long long v1812 = v1712;
          DWORD2(v1812) = 1;
          uint64_t v1813 = v1097;
          v1814 = v1098;
          int v1815 = 1;
          uint64_t v1816 = v1096;
          v1817 = v1068;
          int v1818 = 1;
          (*(void (**)(uint64_t, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*(void *)v1095 + 32))(v1095, 51, v1798, 1, v1810, 5, 0);
        }
        else
        {
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v1067;
          v1810[1] = v1068;
          LODWORD(v1810[2]) = 1;
          v1810[3] = v1088;
          v1810[4] = v1090;
          LODWORD(v1811) = 1;
          uint64_t v1100 = (*(uint64_t (**)(uint64_t, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*(void *)v1031 + 32))(v1031, 165, v1798, 1, v1810, 2, 0);
          v1798[0] = (llvm::MachineInstr *)v1791[0];
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = 4;
          LODWORD(v1810[2]) = 2;
          LODWORD(v1810[3]) = *(_DWORD *)(v1726 + 4);
          LODWORD(v1811) = 0;
          *((void *)&v1811 + 1) = v1708;
          *(void *)&long long v1812 = v1712;
          DWORD2(v1812) = 1;
          uint64_t v1813 = v1100;
          v1814 = v1101;
          int v1815 = 1;
          uint64_t v1816 = (uint64_t)v1067;
          v1817 = v1068;
          int v1818 = 1;
          (*(void (**)(uint64_t, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*(void *)v1031 + 32))(v1031, 51, v1798, 1, v1810, 5, 0);
        }
        v1068 = v1099;
LABEL_990:
        unsigned int v282 = (void *)v1768;
        uint64_t v283 = v1774;
        unsigned int v281 = *(_DWORD *)(*((void *)v1068 + 4) + 4);
        uint64_t v280 = (uint64_t)v1069;
        goto LABEL_368;
      case 281:
      case 282:
      case 283:
      case 284:
      case 285:
      case 286:
      case 287:
      case 288:
      case 289:
      case 290:
      case 291:
      case 292:
      case 293:
      case 294:
      case 295:
      case 297:
      case 298:
      case 299:
      case 300:
      case 301:
      case 302:
      case 303:
      case 304:
      case 305:
      case 306:
      case 307:
      case 308:
      case 309:
      case 310:
      case 311:
      case 312:
      case 313:
      case 314:
      case 315:
      case 316:
      case 317:
      case 318:
      case 319:
      case 320:
      case 321:
      case 322:
      case 323:
      case 324:
      case 325:
      case 326:
      case 327:
      case 328:
      case 329:
      case 330:
      case 331:
      case 332:
      case 333:
      case 334:
      case 335:
      case 336:
      case 337:
      case 338:
      case 339:
      case 340:
      case 341:
      case 342:
      case 343:
      case 344:
      case 345:
      case 346:
      case 347:
      case 348:
      case 349:
      case 350:
      case 351:
      case 352:
      case 353:
      case 354:
      case 355:
      case 356:
      case 357:
      case 358:
      case 359:
      case 360:
      case 361:
      case 362:
      case 363:
      case 364:
      case 365:
      case 366:
      case 367:
      case 368:
      case 369:
      case 370:
      case 371:
      case 372:
      case 373:
      case 374:
      case 375:
      case 376:
      case 377:
      case 378:
      case 379:
      case 380:
      case 381:
      case 382:
      case 383:
      case 384:
      case 385:
      case 386:
      case 387:
      case 388:
      case 389:
      case 390:
      case 391:
      case 392:
      case 393:
      case 394:
      case 395:
      case 396:
      case 397:
      case 398:
      case 399:
      case 400:
      case 401:
      case 402:
      case 403:
      case 404:
      case 405:
      case 406:
      case 407:
      case 408:
      case 409:
      case 410:
      case 411:
      case 412:
      case 413:
      case 414:
      case 415:
      case 416:
      case 417:
      case 418:
      case 419:
      case 420:
      case 421:
      case 422:
      case 423:
      case 424:
      case 425:
      case 426:
      case 427:
      case 428:
      case 429:
      case 430:
      case 431:
      case 432:
      case 433:
      case 434:
      case 435:
      case 436:
      case 437:
      case 438:
      case 439:
      case 440:
      case 441:
      case 442:
      case 443:
      case 444:
      case 445:
      case 446:
      case 447:
      case 448:
      case 449:
      case 450:
      case 451:
      case 452:
      case 453:
      case 454:
      case 455:
      case 456:
      case 457:
      case 458:
      case 459:
      case 460:
      case 461:
      case 462:
      case 463:
      case 464:
      case 465:
      case 466:
      case 467:
      case 468:
      case 469:
      case 470:
      case 471:
      case 472:
      case 473:
      case 474:
      case 475:
      case 476:
      case 477:
      case 478:
      case 479:
      case 480:
      case 481:
      case 482:
      case 483:
      case 484:
      case 485:
      case 486:
      case 487:
      case 488:
      case 489:
      case 490:
      case 491:
      case 492:
      case 493:
      case 494:
      case 495:
      case 496:
      case 497:
      case 498:
      case 499:
      case 500:
      case 501:
      case 502:
      case 503:
      case 504:
      case 505:
      case 506:
      case 507:
      case 508:
      case 509:
      case 510:
      case 511:
      case 512:
      case 513:
      case 514:
      case 515:
      case 516:
      case 517:
      case 518:
      case 519:
      case 520:
      case 521:
      case 522:
      case 523:
      case 524:
      case 525:
      case 526:
      case 527:
      case 528:
      case 529:
      case 530:
      case 531:
      case 532:
      case 533:
      case 534:
      case 535:
      case 536:
      case 537:
      case 538:
      case 539:
      case 540:
      case 541:
      case 542:
      case 543:
      case 544:
      case 545:
      case 546:
      case 547:
      case 548:
      case 549:
      case 550:
      case 551:
      case 552:
      case 553:
      case 554:
      case 555:
      case 556:
      case 557:
      case 558:
      case 559:
      case 560:
      case 561:
      case 562:
      case 563:
      case 564:
      case 565:
      case 566:
      case 567:
      case 568:
      case 569:
      case 570:
      case 571:
      case 572:
      case 573:
      case 574:
      case 575:
      case 576:
      case 577:
      case 578:
      case 579:
      case 580:
      case 581:
      case 582:
      case 583:
      case 584:
      case 585:
      case 586:
      case 587:
      case 588:
      case 589:
      case 590:
      case 591:
      case 592:
      case 593:
      case 594:
      case 595:
      case 596:
      case 597:
      case 598:
      case 599:
      case 600:
      case 601:
      case 602:
      case 603:
      case 604:
      case 605:
      case 606:
      case 607:
      case 608:
      case 609:
      case 610:
      case 611:
      case 612:
      case 613:
      case 614:
      case 615:
      case 616:
      case 617:
      case 618:
      case 619:
      case 620:
      case 621:
      case 622:
      case 623:
      case 624:
      case 625:
      case 626:
      case 627:
      case 628:
      case 629:
      case 630:
      case 631:
      case 632:
      case 633:
      case 634:
      case 635:
      case 636:
      case 637:
      case 638:
      case 639:
      case 640:
      case 641:
      case 642:
      case 643:
      case 644:
      case 645:
      case 646:
      case 647:
      case 648:
      case 649:
      case 650:
      case 651:
      case 652:
      case 653:
      case 654:
      case 655:
      case 656:
      case 657:
      case 658:
      case 659:
      case 660:
      case 661:
      case 662:
      case 663:
      case 664:
      case 665:
      case 666:
      case 667:
      case 668:
      case 669:
      case 670:
      case 671:
      case 672:
      case 673:
      case 674:
      case 675:
      case 676:
      case 677:
      case 678:
      case 679:
      case 680:
      case 681:
      case 682:
      case 683:
      case 684:
      case 685:
      case 686:
      case 687:
      case 688:
      case 689:
      case 690:
      case 691:
      case 692:
      case 693:
      case 694:
      case 695:
      case 696:
      case 697:
      case 698:
      case 699:
      case 700:
      case 701:
      case 702:
      case 703:
      case 704:
      case 705:
      case 706:
      case 707:
      case 708:
      case 709:
      case 710:
      case 711:
      case 712:
      case 713:
      case 714:
      case 715:
      case 716:
      case 717:
      case 718:
      case 719:
      case 720:
      case 721:
      case 722:
      case 723:
      case 724:
      case 725:
      case 726:
      case 727:
      case 728:
      case 729:
      case 730:
      case 731:
      case 732:
      case 733:
      case 734:
      case 735:
      case 736:
      case 737:
      case 738:
      case 739:
      case 740:
      case 741:
      case 742:
      case 743:
      case 744:
      case 745:
      case 746:
      case 747:
      case 748:
      case 749:
      case 750:
      case 751:
      case 752:
      case 753:
      case 754:
      case 755:
      case 756:
      case 757:
      case 758:
      case 759:
      case 760:
      case 761:
      case 762:
      case 763:
      case 764:
      case 765:
      case 766:
      case 767:
      case 768:
      case 769:
      case 770:
      case 771:
      case 772:
      case 773:
      case 774:
      case 775:
      case 776:
      case 777:
      case 778:
      case 779:
      case 780:
      case 781:
      case 782:
      case 783:
      case 784:
      case 785:
      case 786:
      case 787:
      case 788:
      case 789:
      case 790:
      case 791:
      case 792:
      case 793:
      case 794:
      case 795:
      case 796:
      case 797:
      case 798:
      case 799:
      case 800:
      case 801:
      case 802:
      case 803:
      case 804:
      case 805:
      case 806:
      case 807:
      case 808:
      case 809:
      case 810:
      case 811:
      case 812:
      case 813:
      case 814:
      case 815:
      case 816:
      case 817:
      case 818:
      case 819:
      case 820:
      case 821:
      case 822:
      case 823:
      case 824:
      case 825:
      case 826:
      case 827:
      case 828:
      case 829:
      case 830:
      case 831:
      case 832:
      case 833:
      case 834:
      case 835:
      case 836:
      case 837:
      case 838:
      case 839:
      case 840:
      case 841:
      case 842:
      case 843:
      case 844:
      case 845:
      case 846:
      case 847:
      case 848:
      case 849:
      case 850:
      case 851:
      case 852:
      case 853:
      case 854:
      case 855:
      case 856:
      case 857:
      case 858:
      case 859:
      case 860:
      case 861:
      case 862:
      case 863:
      case 864:
      case 865:
      case 866:
      case 867:
      case 868:
      case 869:
      case 870:
      case 871:
      case 872:
      case 873:
      case 874:
      case 875:
      case 876:
      case 877:
      case 878:
      case 879:
      case 880:
      case 881:
      case 882:
      case 883:
      case 884:
      case 885:
      case 886:
      case 887:
      case 888:
      case 889:
      case 890:
      case 891:
      case 892:
      case 893:
      case 894:
      case 895:
      case 896:
      case 897:
      case 898:
      case 899:
      case 900:
      case 901:
      case 902:
      case 903:
      case 904:
      case 905:
      case 906:
      case 907:
      case 908:
      case 909:
      case 910:
      case 911:
      case 912:
      case 913:
      case 914:
      case 915:
      case 916:
      case 917:
      case 918:
      case 919:
      case 920:
      case 921:
      case 922:
      case 923:
      case 924:
      case 925:
      case 926:
      case 927:
      case 928:
      case 929:
      case 930:
      case 931:
      case 932:
      case 933:
      case 934:
      case 935:
      case 936:
      case 937:
      case 938:
      case 939:
      case 940:
      case 941:
      case 942:
      case 943:
      case 944:
      case 945:
      case 946:
      case 947:
      case 948:
      case 949:
      case 950:
      case 951:
      case 952:
      case 953:
      case 954:
      case 955:
      case 956:
      case 957:
      case 958:
      case 959:
      case 960:
      case 961:
      case 962:
      case 963:
      case 964:
      case 965:
      case 966:
      case 967:
      case 968:
      case 969:
      case 970:
      case 971:
      case 972:
      case 973:
      case 974:
      case 975:
      case 976:
      case 977:
      case 978:
      case 979:
      case 980:
      case 981:
      case 982:
      case 983:
      case 984:
      case 985:
      case 986:
      case 987:
      case 988:
      case 989:
      case 990:
      case 991:
      case 992:
      case 993:
      case 994:
      case 995:
      case 996:
      case 997:
      case 998:
      case 999:
      case 1000:
      case 1001:
      case 1002:
      case 1003:
      case 1004:
      case 1005:
      case 1006:
      case 1007:
      case 1008:
      case 1009:
      case 1010:
      case 1011:
      case 1012:
      case 1013:
      case 1014:
      case 1015:
      case 1016:
      case 1017:
      case 1018:
      case 1019:
      case 1020:
      case 1021:
      case 1022:
      case 1023:
      case 1024:
      case 1025:
      case 1026:
      case 1027:
      case 1028:
      case 1029:
      case 1030:
      case 1031:
      case 1032:
      case 1033:
      case 1034:
      case 1035:
      case 1036:
      case 1037:
      case 1038:
      case 1039:
      case 1040:
      case 1041:
      case 1042:
      case 1043:
      case 1044:
      case 1045:
      case 1046:
      case 1047:
      case 1048:
      case 1049:
      case 1050:
      case 1051:
      case 1052:
      case 1053:
      case 1054:
      case 1055:
      case 1056:
      case 1057:
      case 1058:
      case 1059:
      case 1060:
      case 1061:
      case 1062:
      case 1063:
      case 1064:
      case 1065:
      case 1066:
      case 1067:
      case 1068:
      case 1069:
      case 1070:
      case 1071:
      case 1072:
      case 1073:
      case 1074:
      case 1075:
      case 1076:
      case 1077:
      case 1078:
      case 1079:
      case 1080:
      case 1081:
      case 1082:
      case 1083:
      case 1084:
      case 1085:
      case 1086:
      case 1087:
      case 1088:
      case 1089:
      case 1090:
      case 1091:
      case 1092:
      case 1093:
      case 1094:
      case 1095:
      case 1096:
      case 1097:
      case 1098:
      case 1099:
      case 1100:
      case 1101:
      case 1102:
      case 1103:
      case 1104:
      case 1105:
      case 1106:
      case 1107:
      case 1108:
      case 1109:
      case 1110:
      case 1111:
      case 1112:
      case 1113:
      case 1114:
      case 1115:
      case 1116:
      case 1117:
      case 1118:
      case 1119:
      case 1120:
      case 1121:
      case 1122:
      case 1123:
      case 1124:
      case 1125:
      case 1126:
      case 1127:
      case 1128:
      case 1129:
      case 1130:
      case 1131:
      case 1132:
      case 1133:
      case 1134:
      case 1135:
      case 1136:
      case 1137:
      case 1138:
      case 1139:
      case 1140:
      case 1141:
      case 1142:
      case 1143:
      case 1144:
      case 1145:
      case 1146:
      case 1147:
      case 1148:
      case 1149:
      case 1150:
      case 1151:
      case 1152:
      case 1153:
      case 1154:
      case 1155:
      case 1156:
      case 1157:
      case 1158:
      case 1159:
      case 1160:
      case 1161:
      case 1162:
      case 1163:
      case 1164:
      case 1165:
      case 1166:
      case 1167:
      case 1168:
      case 1169:
      case 1170:
      case 1171:
      case 1172:
      case 1173:
      case 1174:
      case 1175:
      case 1176:
      case 1177:
      case 1178:
      case 1179:
      case 1180:
      case 1181:
      case 1182:
      case 1183:
      case 1184:
      case 1185:
      case 1186:
      case 1187:
      case 1188:
      case 1189:
      case 1190:
      case 1191:
      case 1192:
      case 1193:
      case 1194:
      case 1195:
      case 1196:
      case 1197:
      case 1198:
      case 1199:
      case 1200:
      case 1201:
      case 1202:
      case 1203:
      case 1204:
      case 1205:
      case 1206:
      case 1207:
      case 1208:
      case 1209:
      case 1210:
      case 1211:
      case 1212:
      case 1213:
      case 1214:
      case 1215:
      case 1216:
      case 1217:
      case 1218:
      case 1219:
      case 1220:
      case 1221:
      case 1222:
      case 1223:
      case 1224:
      case 1225:
      case 1226:
      case 1227:
      case 1228:
      case 1229:
      case 1230:
      case 1231:
      case 1232:
      case 1233:
      case 1234:
      case 1235:
      case 1236:
      case 1237:
      case 1238:
      case 1239:
      case 1240:
      case 1241:
      case 1242:
      case 1243:
      case 1244:
      case 1245:
      case 1246:
      case 1247:
      case 1248:
      case 1249:
      case 1250:
      case 1251:
      case 1252:
      case 1253:
      case 1254:
      case 1255:
      case 1256:
      case 1257:
      case 1258:
      case 1259:
      case 1260:
      case 1261:
      case 1262:
      case 1263:
      case 1264:
      case 1265:
      case 1266:
      case 1267:
      case 1268:
      case 1270:
      case 1271:
      case 1272:
      case 1273:
      case 1274:
      case 1275:
      case 1276:
      case 1277:
      case 1278:
      case 1279:
      case 1280:
      case 1824:
      case 1825:
      case 1826:
      case 1827:
      case 1828:
      case 1829:
      case 1830:
      case 1831:
      case 1832:
      case 1833:
      case 1834:
      case 1835:
      case 1836:
      case 1837:
      case 1838:
      case 1839:
      case 1840:
      case 1841:
      case 1842:
      case 1843:
      case 1844:
      case 1845:
      case 1846:
      case 1847:
      case 1848:
      case 1849:
      case 1850:
      case 1851:
      case 1852:
      case 1853:
      case 1854:
      case 1855:
      case 1856:
      case 1857:
      case 1858:
      case 1859:
      case 1860:
      case 1861:
      case 1862:
      case 1863:
      case 1864:
      case 1865:
      case 1866:
      case 1867:
      case 1868:
      case 1869:
      case 1870:
      case 1871:
      case 1872:
      case 1873:
      case 1874:
      case 1875:
      case 1876:
      case 1877:
      case 1878:
      case 1879:
      case 1880:
      case 1881:
      case 1882:
      case 1883:
      case 1884:
      case 1885:
      case 1886:
      case 1887:
      case 1888:
      case 1889:
      case 1890:
      case 1891:
      case 1892:
      case 1893:
      case 1894:
      case 1895:
      case 1896:
      case 1897:
      case 1898:
      case 1899:
      case 1900:
      case 1901:
      case 1902:
      case 1903:
      case 1904:
      case 1905:
      case 1906:
      case 1907:
      case 1908:
      case 1909:
      case 1910:
      case 1911:
      case 1912:
      case 1913:
      case 1914:
      case 1915:
      case 1916:
      case 1917:
      case 1918:
      case 1919:
      case 1920:
      case 1921:
      case 1922:
      case 1923:
      case 1924:
      case 1925:
      case 1926:
      case 1927:
      case 1928:
      case 1929:
      case 1930:
      case 1931:
      case 1932:
      case 1933:
      case 1934:
      case 1935:
      case 1936:
      case 1937:
      case 1938:
      case 1939:
      case 1940:
      case 1941:
      case 1942:
      case 1943:
      case 1944:
      case 1945:
      case 1946:
      case 1947:
      case 1948:
      case 1949:
      case 1950:
      case 1951:
      case 1952:
      case 1953:
      case 1954:
      case 1955:
      case 1956:
      case 1957:
      case 1958:
      case 1959:
      case 1960:
      case 1961:
      case 1962:
      case 1963:
      case 1964:
      case 1965:
      case 1966:
      case 1967:
      case 1968:
      case 1969:
      case 1970:
      case 1971:
      case 1972:
      case 1973:
      case 1974:
      case 1975:
      case 1976:
      case 1977:
      case 1978:
      case 1979:
      case 1980:
      case 1981:
      case 1982:
      case 1983:
      case 1984:
      case 1985:
      case 1986:
      case 1987:
      case 1988:
      case 1989:
      case 1990:
      case 1991:
      case 1992:
      case 1993:
      case 1994:
      case 1995:
      case 1996:
      case 1997:
      case 1998:
      case 1999:
      case 2000:
      case 2001:
      case 2002:
      case 2003:
      case 2004:
      case 2005:
      case 2006:
      case 2007:
      case 2008:
      case 2009:
      case 2010:
      case 2011:
      case 2012:
      case 2013:
      case 2014:
      case 2015:
      case 2016:
      case 2017:
      case 2018:
      case 2019:
      case 2020:
      case 2021:
      case 2022:
      case 2023:
      case 2024:
      case 2025:
      case 2026:
      case 2027:
      case 2028:
      case 2029:
      case 2030:
      case 2031:
      case 2032:
      case 2033:
      case 2034:
      case 2035:
      case 2036:
      case 2037:
      case 2038:
      case 2039:
      case 2040:
      case 2041:
      case 2042:
      case 2043:
      case 2044:
      case 2045:
      case 2046:
      case 2047:
      case 2048:
      case 2049:
      case 2050:
      case 2051:
      case 2052:
      case 2053:
      case 2054:
      case 2055:
      case 2056:
      case 2057:
      case 2058:
      case 2059:
      case 2060:
      case 2061:
      case 2062:
      case 2063:
      case 2064:
      case 2065:
      case 2066:
      case 2067:
      case 2068:
      case 2069:
      case 2070:
      case 2071:
      case 2072:
      case 2073:
      case 2074:
      case 2075:
      case 2076:
      case 2077:
      case 2078:
      case 2079:
      case 2080:
      case 2081:
      case 2082:
      case 2083:
      case 2084:
      case 2085:
      case 2086:
      case 2087:
      case 2088:
      case 2089:
      case 2090:
      case 2091:
      case 2092:
      case 2093:
      case 2094:
      case 2095:
      case 2096:
      case 2097:
      case 2098:
      case 2099:
      case 2100:
      case 2101:
      case 2102:
      case 2103:
      case 2104:
      case 2105:
      case 2106:
      case 2109:
      case 2110:
      case 2111:
      case 2112:
      case 2113:
      case 2114:
      case 2131:
      case 2133:
      case 2141:
      case 2143:
      case 2153:
      case 2157:
      case 2158:
      case 2163:
      case 2164:
      case 2165:
      case 2166:
      case 2168:
      case 2333:
      case 2334:
      case 2335:
      case 2336:
      case 2361:
      case 2362:
      case 2363:
      case 2364:
      case 2366:
      case 2367:
      case 2368:
      case 2369:
      case 2370:
      case 2371:
      case 2372:
      case 2373:
      case 2411:
      case 2412:
      case 2413:
      case 2414:
      case 2415:
      case 2416:
      case 2417:
      case 2418:
      case 2421:
      case 2422:
      case 2425:
      case 2426:
      case 2427:
      case 2428:
      case 2429:
      case 2430:
      case 2431:
      case 2432:
      case 2433:
      case 2434:
      case 2435:
      case 2436:
      case 2437:
      case 2438:
      case 2439:
      case 2440:
      case 2441:
      case 2442:
      case 2443:
      case 2447:
      case 2448:
      case 2449:
      case 2450:
      case 2470:
      case 2479:
      case 2480:
      case 2481:
      case 2482:
      case 2483:
      case 2489:
      case 2490:
      case 2493:
      case 2494:
      case 2495:
      case 2496:
      case 2497:
      case 2498:
      case 2499:
      case 2500:
      case 2501:
      case 2502:
      case 2503:
      case 2504:
      case 2505:
      case 2506:
      case 2507:
      case 2508:
      case 2509:
      case 2510:
      case 2511:
      case 2512:
      case 2513:
      case 2514:
      case 2515:
      case 2516:
      case 2518:
      case 2519:
      case 2520:
      case 2521:
      case 2523:
      case 2524:
      case 2525:
      case 2527:
      case 2577:
      case 2578:
      case 2580:
      case 2581:
      case 2582:
      case 2583:
      case 2584:
      case 2585:
      case 2588:
      case 2589:
      case 2590:
      case 2591:
      case 2592:
      case 2593:
      case 2594:
      case 2595:
      case 2596:
      case 2597:
      case 2598:
      case 2599:
      case 2600:
      case 2601:
      case 2602:
      case 2603:
      case 2604:
      case 2605:
      case 2610:
      case 2611:
      case 2612:
      case 2613:
      case 2614:
      case 2615:
      case 2618:
      case 2619:
      case 2620:
      case 2621:
      case 2622:
      case 2624:
      case 2625:
      case 2626:
      case 2627:
      case 2629:
      case 2662:
      case 2663:
      case 2664:
      case 2668:
      case 2680:
      case 2681:
      case 2682:
      case 2683:
      case 2684:
      case 2687:
      case 2688:
      case 2689:
      case 2690:
      case 2691:
      case 2692:
      case 2693:
      case 2694:
      case 2695:
      case 2696:
      case 2697:
      case 2698:
      case 2699:
      case 2700:
      case 2701:
      case 2702:
      case 2705:
        return v22;
      case 296:
        uint64_t v609 = *((void *)v1774 + 4);
        int v610 = *(_DWORD *)(v609 + 4);
        int v611 = *(_DWORD *)(v609 + 68);
        if (v610 < 0)
        {
          v613 = v1775;
          if ((v610 & 0x7FFFFFFFu) >= *(_DWORD *)(v1768 + 432)) {
            v612 = 0;
          }
          else {
            v612 = *(void **)(*(void *)(v1768 + 424) + 8 * (v610 & 0x7FFFFFFF));
          }
        }
        else
        {
          v612 = 0;
          v613 = v1775;
        }
        v1793[0] = v612;
        LODWORD(v1793[1]) = 0;
        *(void *)&long long v1795 = v612;
        DWORD2(v1795) = 0;
        LODWORD(v1798[0]) = v611;
        LODWORD(v1799) = 0;
        BOOL v22 = 1;
        v1810[0] = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, llvm::MachineInstr **, uint64_t, void))(*v613)[4])(v613, 184, &v1795, 1, v1798, 1, 0);
        v1810[1] = v1102;
        LODWORD(v1810[2]) = 1;
        v1103 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v613)[4])(v613, 218, v1793, 1, v1810, 1, 0);
        LODWORD(v1798[0]) = v610;
        LODWORD(v1798[1]) = 1;
        v1810[0] = v1103;
        v1810[1] = v1104;
        LODWORD(v1810[2]) = 1;
        LODWORD(v1810[3]) = v611;
        LODWORD(v1811) = 0;
        ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v613)[4])(v613, 185, v1798, 1, v1810, 2, 0);
        uint64_t v193 = v1774;
        goto LABEL_1575;
      case 1269:
      case 2107:
      case 2108:
      case 2132:
      case 2139:
      case 2145:
      case 2146:
      case 2147:
      case 2150:
      case 2151:
      case 2152:
      case 2154:
      case 2155:
      case 2156:
      case 2167:
      case 2169:
      case 2170:
      case 2173:
      case 2174:
      case 2175:
      case 2176:
      case 2305:
      case 2306:
      case 2307:
      case 2308:
      case 2365:
      case 2408:
      case 2409:
      case 2410:
      case 2423:
      case 2444:
      case 2484:
      case 2485:
      case 2486:
      case 2491:
      case 2586:
      case 2587:
      case 2665:
      case 2666:
      case 2667:
      case 2669:
      case 2670:
      case 2671:
      case 2672:
      case 2673:
      case 2674:
      case 2675:
      case 2676:
      case 2677:
      case 2678:
      case 2679:
        goto LABEL_302;
      case 1281:
      case 1822:
        uint64_t v301 = v1768;
        unsigned int v84 = v1774;
        uint64_t v302 = *((void *)v1774 + 4);
        uint64_t v303 = *(unsigned int *)(v302 + 68);
        unint64_t v304 = sub_1CBA2EB1C(*(_DWORD *)(v302 + 68), v1768, 0);
        uint64_t v305 = v1775;
        if (HIDWORD(v304)) {
          goto LABEL_391;
        }
        if (v1758 != 1281) {
          return 0;
        }
        if ((v303 & 0x80000000) != 0) {
          uint64_t v306 = (uint64_t *)(*(void *)(v1768 + 24) + 16 * (v303 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v306 = (uint64_t *)(*(void *)(v1768 + 272) + 8 * v303);
        }
        uint64_t v307 = *v306;
        if (!v307) {
          goto LABEL_388;
        }
        if (*(unsigned char *)(v307 + 3)) {
          goto LABEL_384;
        }
        uint64_t v307 = *(void *)(v307 + 24);
        if (v307)
        {
          unsigned int v84 = v1774;
          uint64_t v305 = v1775;
          uint64_t v301 = v1768;
          if (*(unsigned char *)(v307 + 3))
          {
LABEL_384:
            uint64_t v308 = *(void *)(v307 + 8);
            if (v308 && **(_WORD **)(v308 + 16) == 81 && *(_DWORD *)(v308 + 40) == 2) {
              LODWORD(v303) = *(_DWORD *)(*(void *)(v308 + 32) + 36);
            }
          }
        }
        else
        {
          unsigned int v84 = v1774;
          uint64_t v305 = v1775;
          uint64_t v301 = v1768;
        }
LABEL_388:
        sub_1CC73C210(v303, v301, (uint64_t)v1810);
        if (!LOBYTE(v1810[2])) {
          return 0;
        }
        if (LODWORD(v1810[1]) >= 0x41)
        {
          if (v1810[0]) {
            MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
          }
          return 0;
        }
        unint64_t v304 = (uint64_t)v1810[0] << -(uint64_t)LODWORD(v1810[1]) >> -(uint64_t)LODWORD(v1810[1]);
LABEL_391:
        int v309 = *(_DWORD *)(*((void *)v84 + 4) + 100);
        v1798[0] = (llvm::MachineInstr *)513;
        LODWORD(v1798[1]) = 0;
        LODWORD(v1810[0]) = v309;
        LODWORD(v1810[2]) = 0;
        v1793[0] = (void *)513;
        LODWORD(v1793[1]) = 0;
        unint64_t v310 = v304;
        unint64_t v311 = (llvm::ConstantInt *)llvm::IntegerType::get(***v305[1], (llvm::LLVMContext *)0x40);
        BOOL v22 = 1;
        uint64_t v312 = llvm::ConstantInt::get(v311, v310, (const llvm::APInt *)1);
        v1810[3] = (void *)((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*v305)[2])(v305, v1793, v312);
        v1810[4] = v313;
        LODWORD(v1811) = 1;
        uint64_t v314 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v305)[4])(v305, 45, v1798, 1, v1810, 2, 0);
        LODWORD(v1798[0]) = *(_DWORD *)(*((void *)v84 + 4) + 4);
        LODWORD(v1798[1]) = 1;
        v1810[0] = v314;
        v1810[1] = v315;
        LODWORD(v1810[2]) = 1;
        unint64_t v86 = (*v305)[4];
        uint64_t v87 = v305;
        uint64_t v88 = 81;
LABEL_112:
        uint64_t v89 = 0;
        goto LABEL_113;
      case 1282:
      case 1283:
      case 1284:
      case 1285:
      case 1286:
      case 1287:
      case 1288:
      case 1289:
      case 1290:
      case 1291:
      case 1292:
      case 1293:
      case 1294:
      case 1295:
      case 1296:
      case 1297:
      case 1298:
      case 1299:
      case 1300:
      case 1301:
      case 1302:
      case 1303:
      case 1304:
      case 1305:
      case 1306:
      case 1307:
      case 1308:
      case 1309:
      case 1310:
      case 1311:
      case 1312:
      case 1313:
      case 1314:
      case 1315:
      case 1316:
      case 1317:
      case 1318:
      case 1319:
      case 1320:
      case 1321:
      case 1322:
      case 1323:
      case 1324:
      case 1325:
      case 1326:
      case 1327:
      case 1328:
      case 1329:
      case 1330:
      case 1331:
      case 1332:
      case 1333:
      case 1334:
      case 1335:
      case 1336:
      case 1337:
      case 1338:
      case 1339:
      case 1340:
      case 1341:
      case 1342:
      case 1343:
      case 1344:
      case 1345:
      case 1346:
      case 1347:
      case 1348:
      case 1349:
      case 1350:
      case 1351:
      case 1352:
      case 1353:
      case 1354:
      case 1355:
      case 1356:
      case 1357:
      case 1358:
      case 1359:
      case 1360:
      case 1361:
      case 1362:
      case 1363:
      case 1364:
      case 1365:
      case 1366:
      case 1367:
      case 1368:
      case 1369:
      case 1370:
      case 1371:
      case 1372:
      case 1373:
      case 1374:
      case 1375:
      case 1376:
      case 1377:
      case 1378:
      case 1379:
      case 1380:
      case 1381:
      case 1382:
      case 1383:
      case 1384:
      case 1385:
      case 1386:
      case 1387:
      case 1388:
      case 1389:
      case 1390:
      case 1391:
      case 1392:
      case 1393:
      case 1394:
      case 1395:
      case 1396:
      case 1397:
      case 1398:
      case 1399:
      case 1400:
      case 1401:
      case 1402:
      case 1403:
      case 1404:
      case 1405:
      case 1406:
      case 1407:
      case 1408:
      case 1409:
      case 1410:
      case 1411:
      case 1412:
      case 1413:
      case 1414:
      case 1415:
      case 1416:
      case 1417:
      case 1418:
      case 1419:
      case 1420:
      case 1421:
      case 1422:
      case 1423:
      case 1424:
      case 1425:
      case 1426:
      case 1427:
      case 1428:
      case 1429:
      case 1430:
      case 1431:
      case 1432:
      case 1433:
      case 1434:
      case 1435:
      case 1436:
      case 1437:
      case 1438:
      case 1439:
      case 1440:
      case 1441:
      case 1442:
      case 1443:
      case 1444:
      case 1445:
      case 1446:
      case 1447:
      case 1448:
      case 1449:
      case 1450:
      case 1451:
      case 1452:
      case 1453:
      case 1454:
      case 1455:
      case 1456:
      case 1457:
      case 1458:
      case 1459:
      case 1460:
      case 1461:
      case 1462:
      case 1463:
      case 1464:
      case 1465:
      case 1466:
      case 1467:
      case 1468:
      case 1469:
      case 1470:
      case 1471:
      case 1472:
      case 1473:
      case 1474:
      case 1475:
      case 1476:
      case 1477:
      case 1478:
      case 1479:
      case 1480:
      case 1481:
      case 1482:
      case 1483:
      case 1484:
      case 1485:
      case 1486:
      case 1487:
      case 1488:
      case 1489:
      case 1490:
      case 1491:
      case 1492:
      case 1493:
      case 1494:
      case 1495:
      case 1496:
      case 1497:
      case 1498:
      case 1499:
      case 1500:
      case 1501:
      case 1502:
      case 1503:
      case 1504:
      case 1505:
      case 1506:
      case 1507:
      case 1508:
      case 1509:
      case 1510:
      case 1511:
      case 1512:
      case 1513:
      case 1514:
      case 1515:
      case 1516:
      case 1517:
      case 1518:
      case 1519:
      case 1520:
      case 1521:
      case 1522:
      case 1523:
      case 1524:
      case 1525:
      case 1526:
      case 1527:
      case 1528:
      case 1529:
      case 1530:
      case 1531:
      case 1532:
      case 1533:
      case 1534:
      case 1535:
      case 1536:
      case 1537:
      case 1538:
      case 1539:
      case 1540:
      case 1541:
      case 1542:
      case 1543:
      case 1544:
      case 1545:
      case 1546:
      case 1547:
      case 1548:
      case 1549:
      case 1550:
      case 1551:
      case 1552:
      case 1553:
      case 1554:
      case 1555:
      case 1556:
      case 1557:
      case 1558:
      case 1559:
      case 1560:
      case 1561:
      case 1562:
      case 1563:
      case 1564:
      case 1565:
      case 1566:
      case 1567:
      case 1568:
      case 1569:
      case 1570:
      case 1571:
      case 1572:
      case 1573:
      case 1574:
      case 1575:
      case 1576:
      case 1577:
      case 1578:
      case 1579:
      case 1580:
      case 1581:
      case 1582:
      case 1583:
      case 1584:
      case 1585:
      case 1586:
      case 1587:
      case 1588:
      case 1589:
      case 1590:
      case 1591:
      case 1592:
      case 1593:
      case 1594:
      case 1595:
      case 1596:
      case 1597:
      case 1598:
      case 1599:
      case 1600:
      case 1601:
      case 1602:
      case 1603:
      case 1604:
      case 1605:
      case 1606:
      case 1607:
      case 1608:
      case 1609:
      case 1610:
      case 1611:
      case 1612:
      case 1613:
      case 1614:
      case 1615:
      case 1616:
      case 1617:
      case 1618:
      case 1619:
      case 1620:
      case 1621:
      case 1622:
      case 1623:
      case 1624:
      case 1625:
      case 1626:
      case 1627:
      case 1628:
      case 1629:
      case 1630:
      case 1631:
      case 1632:
      case 1633:
      case 1634:
      case 1635:
      case 1636:
      case 1637:
      case 1638:
      case 1639:
      case 1640:
      case 1641:
      case 1642:
      case 1643:
      case 1644:
      case 1645:
      case 1646:
      case 1647:
      case 1648:
      case 1649:
      case 1650:
      case 1651:
      case 1652:
      case 1653:
      case 1654:
      case 1655:
      case 1656:
      case 1657:
      case 1658:
      case 1659:
      case 1660:
      case 1661:
      case 1662:
      case 1663:
      case 1664:
      case 1665:
      case 1666:
      case 1667:
      case 1668:
      case 1669:
      case 1670:
      case 1671:
      case 1672:
      case 1673:
      case 1674:
      case 1675:
      case 1676:
      case 1677:
      case 1678:
      case 1679:
      case 1680:
      case 1681:
        uint64_t v24 = v1768;
        uint64_t v23 = (uint64_t)v1774;
        char v25 = (unsigned __int8 **)v1775;
        int v26 = 3;
        goto LABEL_23;
      case 1682:
      case 1683:
      case 1684:
      case 1685:
      case 1686:
      case 1687:
      case 1688:
      case 1689:
      case 1690:
      case 1691:
      case 1692:
      case 1693:
      case 1694:
      case 1695:
      case 1696:
      case 1697:
      case 1698:
      case 1699:
      case 1700:
      case 1701:
      case 1702:
      case 1703:
      case 1704:
      case 1705:
      case 1706:
      case 1707:
      case 1708:
      case 1709:
      case 1710:
      case 1711:
      case 1712:
      case 1713:
      case 1714:
      case 1715:
      case 1716:
      case 1717:
      case 1718:
      case 1719:
      case 1720:
      case 1721:
      case 1722:
      case 1723:
      case 1724:
      case 1725:
      case 1726:
      case 1727:
      case 1728:
      case 1729:
      case 1730:
      case 1731:
      case 1732:
      case 1733:
      case 1734:
      case 1735:
      case 1736:
      case 1737:
      case 1738:
      case 1739:
      case 1740:
      case 1741:
      case 1742:
      case 1743:
      case 1744:
      case 1745:
      case 1746:
      case 1747:
      case 1748:
      case 1749:
      case 1750:
      case 1751:
      case 1752:
      case 1753:
      case 1754:
      case 1755:
      case 1756:
      case 1757:
      case 1758:
      case 1759:
      case 1760:
      case 1761:
      case 1762:
      case 1763:
      case 1764:
      case 1765:
      case 1766:
      case 1767:
      case 1768:
      case 1769:
      case 1770:
      case 1771:
      case 1772:
      case 1773:
      case 1774:
      case 1775:
      case 1776:
      case 1777:
      case 1778:
      case 1779:
      case 1780:
      case 1781:
      case 1782:
      case 1783:
      case 1784:
      case 1785:
      case 1786:
      case 1787:
      case 1788:
      case 1789:
      case 1790:
      case 1791:
      case 1792:
      case 1793:
      case 1794:
      case 1795:
      case 1796:
      case 1797:
      case 1798:
      case 1799:
      case 1800:
      case 1801:
      case 1802:
      case 1803:
      case 1804:
      case 1805:
      case 1806:
      case 1807:
      case 1808:
      case 1809:
      case 1810:
      case 1811:
      case 1812:
      case 1813:
      case 1814:
      case 1815:
      case 1816:
      case 1817:
      case 1818:
      case 1819:
      case 1820:
      case 1821:
        uint64_t v24 = v1768;
        uint64_t v23 = (uint64_t)v1774;
        char v25 = (unsigned __int8 **)v1775;
        int v26 = 4;
LABEL_23:
        return sub_1CBA2E440(v23, v24, v25, v16, v26, (uint64_t)v1751);
      case 1823:
        if (!*((unsigned char *)v9[7] + 62) && !*((unsigned char *)v10 + 1709)) {
          goto LABEL_255;
        }
        uint64_t v391 = v1774;
        uint64_t v615 = *(unsigned int *)(*((void *)v1774 + 4) + 36);
        v616 = (llvm::MachineFunction *)v1775[1];
        uint64_t v617 = (uint64_t)(v1775[2][1] + 1536);
        v618 = (llvm::MachineInstr *)v1775[4];
        v1798[0] = v618;
        if (v618) {
          llvm::MetadataTracking::track((uint64_t)v1798, (unsigned __int8 *)v618, 2);
        }
        MachineInstr = llvm::MachineFunction::CreateMachineInstr(v616, v617, (unsigned __int8 **)v1798, 0);
        if (!v1798[0]) {
          goto LABEL_557;
        }
        int v1675 = *(unsigned __int8 *)v1798[0];
        if ((v1675 - 4) > 0x1E)
        {
          if ((v1675 - 3) >= 0xFFFFFFFE) {
            v1682 = v1798[0];
          }
          else {
            v1682 = 0;
          }
          if ((v1675 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1677 = (unint64_t)v1682 + 8;
LABEL_2003:
            v1810[0] = v1798;
            sub_1CC5FA668(v1677 + 16, v1810);
            uint64_t v391 = v1774;
            goto LABEL_557;
          }
          uint64_t v391 = v1774;
          if (v1675 == 3) {
            *((void *)v1798[0] + 1) = 0;
          }
        }
        else
        {
          uint64_t v391 = v1774;
          if ((*((unsigned char *)v1798[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1798[0] + 3))
          {
            uint64_t v1676 = *((void *)v1798[0] + 2);
            if ((v1676 & 4) != 0)
            {
              unint64_t v1677 = v1676 & 0xFFFFFFFFFFFFFFF8;
              if (v1677) {
                goto LABEL_2003;
              }
            }
          }
        }
LABEL_557:
        v620 = (unint64_t *)v1775[6];
        v621 = v1775[5][5];
        *((void *)MachineInstr + 3) = v621;
        v622 = v621[4];
        uint64_t v623 = *((unsigned int *)MachineInstr + 10);
        if (v623)
        {
          uint64_t v1279 = *((void *)MachineInstr + 4);
          v1280 = v622[5];
          uint64_t v1281 = 32 * v623;
          uint64_t v391 = v1774;
          do
          {
            if (!*(unsigned char *)v1279)
            {
              uint64_t v1282 = *(unsigned int *)(v1279 + 4);
              if ((int)v1282 >= 0) {
                v1283 = (uint64_t *)(*((void *)v1280 + 34) + 8 * v1282);
              }
              else {
                v1283 = (uint64_t *)(*((void *)v1280 + 3) + 16 * (v1282 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1284 = *v1283;
              if (*v1283)
              {
                uint64_t v1285 = *(void *)(v1284 + 16);
                *(void *)(v1284 + 16) = v1279;
                *(void *)(v1279 + 16) = v1285;
                if (*(unsigned char *)(v1279 + 3))
                {
                  *(void *)(v1279 + 24) = v1284;
                }
                else
                {
                  *(void *)(v1279 + 24) = 0;
                  v1283 = (uint64_t *)(v1285 + 24);
                }
              }
              else
              {
                *(void *)(v1279 + 16) = v1279;
                *(void *)(v1279 + 24) = 0;
              }
              uint64_t *v1283 = v1279;
            }
            v1279 += 32;
            v1281 -= 32;
          }
          while (v1281);
        }
        v624 = v622[91];
        if (v624) {
          (*(void (**)(llvm::IntegerType *, llvm::MachineInstr *))(*(void *)v624 + 24))(v624, MachineInstr);
        }
        unint64_t v625 = *v620 & 0xFFFFFFFFFFFFFFF8;
        *(void *)MachineInstr = v625 | *(void *)MachineInstr & 7;
        *((void *)MachineInstr + 1) = v620;
        *(void *)(v625 + 8) = MachineInstr;
        unint64_t *v620 = *v620 & 7 | (unint64_t)MachineInstr;
        v626 = v1775[7];
        if (v626)
        {
          ((void (*)(llvm::IntegerType ****, llvm::MachineInstr *))(*v626)[3])(v626, MachineInstr);
          if ((v615 & 0x80000000) != 0) {
            goto LABEL_562;
          }
        }
        else if ((v615 & 0x80000000) != 0)
        {
LABEL_562:
          v627 = (uint64_t *)(*(void *)(v1768 + 24) + 16 * (v615 & 0x7FFFFFFF) + 8);
          goto LABEL_563;
        }
        v627 = (uint64_t *)(*(void *)(v1768 + 272) + 8 * v615);
LABEL_563:
        uint64_t v628 = *v627;
        if ((*(unsigned char *)(v628 + 3) & 1) == 0) {
          uint64_t v628 = *(void *)(v628 + 24);
        }
        uint64_t v629 = *(void *)(v628 + 8);
        if (**(_WORD **)(v629 + 16) == 120)
        {
          uint64_t v630 = *(void *)(*(void *)(v629 + 32) + 48);
          v631 = (unsigned int *)(v630 + 24);
          if (*(_DWORD *)(v630 + 32) >= 0x41u) {
            v631 = *(unsigned int **)v631;
          }
          v632 = (void *)*v631;
          LODWORD(v1810[0]) = 1;
          v1810[1] = 0;
          v1810[2] = v632;
        }
        else
        {
          memset(&v1810[1], 0, 24);
          HIDWORD(v1810[0]) = v615;
          LODWORD(v1810[0]) = 0;
        }
        llvm::MachineInstr::addOperand(MachineInstr, v616, (const llvm::MachineOperand *)v1810);
        if (*((unsigned char *)v10 + 1709)) {
          int v732 = 2;
        }
        else {
          int v732 = 66;
        }
        memset(&v1810[1], 0, 24);
        HIDWORD(v1810[0]) = v732;
        LODWORD(v1810[0]) = 50331648;
        llvm::MachineInstr::addOperand(MachineInstr, v616, (const llvm::MachineOperand *)v1810);
        memset(&v1810[1], 0, 24);
        HIDWORD(v1810[0]) = v732;
        LODWORD(v1810[0]) = 0x2000000;
        llvm::MachineInstr::addOperand(MachineInstr, v616, (const llvm::MachineOperand *)v1810);
        goto LABEL_714;
      case 2115:
      case 2116:
      case 2117:
      case 2118:
      case 2119:
      case 2120:
      case 2121:
      case 2122:
      case 2123:
      case 2124:
      case 2125:
      case 2126:
      case 2127:
      case 2128:
      case 2129:
      case 2130:
      case 2309:
      case 2310:
      case 2311:
      case 2312:
      case 2313:
      case 2314:
      case 2315:
      case 2316:
      case 2317:
      case 2318:
      case 2319:
      case 2320:
      case 2321:
      case 2322:
      case 2323:
      case 2324:
      case 2325:
      case 2326:
      case 2327:
      case 2328:
      case 2329:
      case 2330:
      case 2331:
      case 2332:
      case 2337:
      case 2338:
      case 2339:
      case 2340:
      case 2341:
      case 2342:
      case 2343:
      case 2344:
      case 2345:
      case 2346:
      case 2347:
      case 2348:
      case 2349:
      case 2350:
      case 2351:
      case 2352:
      case 2353:
      case 2354:
      case 2355:
      case 2356:
      case 2357:
      case 2358:
      case 2359:
      case 2360:
      case 2454:
      case 2455:
      case 2456:
      case 2457:
      case 2458:
      case 2459:
      case 2460:
      case 2461:
      case 2462:
      case 2463:
      case 2464:
      case 2465:
      case 2466:
      case 2467:
      case 2468:
      case 2469:
      case 2528:
      case 2529:
      case 2530:
      case 2531:
      case 2532:
      case 2533:
      case 2534:
      case 2535:
      case 2536:
      case 2537:
      case 2538:
      case 2539:
      case 2540:
      case 2541:
      case 2542:
      case 2543:
        uint64_t v59 = v1774;
        uint64_t v60 = *((void *)v1774 + 4);
        if ((int)v16 > 2527)
        {
          uint64_t v65 = (llvm::MachineInstr *)v1775;
          switch((int)v16)
          {
            case 2529:
LABEL_1898:
              int v62 = 0;
              int v63 = 1;
              unsigned int v64 = 286;
              goto LABEL_1903;
            case 2530:
LABEL_1899:
              int v62 = 0;
              uint64_t v61 = 1;
              int v63 = 2;
              unsigned int v64 = 275;
              goto LABEL_220;
            case 2531:
LABEL_1900:
              int v62 = 0;
              uint64_t v61 = 1;
              int v63 = 2;
              unsigned int v64 = 272;
              goto LABEL_220;
            case 2532:
LABEL_1901:
              int v63 = 3;
              uint64_t v61 = 1;
              unsigned int v64 = 276;
              int v62 = 1;
              goto LABEL_220;
            case 2533:
LABEL_1902:
              int v63 = 3;
              int v62 = 1;
              unsigned int v64 = 273;
LABEL_1903:
              uint64_t v61 = 1;
              goto LABEL_220;
            case 2534:
LABEL_1904:
              int v62 = 0;
              uint64_t v61 = 1;
              int v63 = 4;
              unsigned int v64 = 277;
              goto LABEL_220;
            case 2535:
LABEL_1905:
              int v62 = 0;
              uint64_t v61 = 1;
              int v63 = 4;
              unsigned int v64 = 274;
              goto LABEL_220;
            case 2536:
            case 2537:
LABEL_1170:
              int v62 = 0;
              char v66 = 0;
              uint64_t v61 = 1;
              unsigned int v64 = 284;
LABEL_1172:
              int v63 = v61;
              break;
            case 2538:
LABEL_1667:
              int v62 = 0;
              char v66 = 0;
              int v63 = 2;
              unsigned int v64 = 281;
              goto LABEL_1668;
            case 2539:
LABEL_1892:
              int v62 = 0;
              char v66 = 0;
              int v63 = 2;
              unsigned int v64 = 278;
              goto LABEL_1668;
            case 2540:
LABEL_1893:
              char v66 = 0;
              int v63 = 3;
              uint64_t v61 = 1;
              unsigned int v64 = 282;
              goto LABEL_1895;
            case 2541:
LABEL_1894:
              char v66 = 0;
              int v63 = 3;
              uint64_t v61 = 1;
              unsigned int v64 = 279;
LABEL_1895:
              int v62 = 1;
              break;
            case 2542:
LABEL_1896:
              int v62 = 0;
              char v66 = 0;
              int v63 = 4;
              unsigned int v64 = 283;
              goto LABEL_1668;
            case 2543:
LABEL_1897:
              int v62 = 0;
              char v66 = 0;
              int v63 = 4;
              unsigned int v64 = 280;
LABEL_1668:
              uint64_t v61 = 1;
              break;
            default:
LABEL_219:
              int v62 = 0;
              uint64_t v61 = 1;
              unsigned int v64 = 286;
              int v63 = 1;
LABEL_220:
              char v66 = 1;
              break;
          }
        }
        else
        {
          uint64_t v61 = 0;
          int v62 = 0;
          int v63 = 1;
          unsigned int v64 = 286;
          uint64_t v65 = (llvm::MachineInstr *)v1775;
          char v66 = 1;
          switch((int)v16)
          {
            case 2454:
            case 2455:
              break;
            case 2456:
LABEL_1168:
              int v62 = 0;
              uint64_t v61 = 0;
              int v63 = 2;
              unsigned int v64 = 275;
              break;
            case 2457:
LABEL_1853:
              int v62 = 0;
              uint64_t v61 = 0;
              int v63 = 2;
              unsigned int v64 = 272;
              break;
            case 2458:
LABEL_1275:
              uint64_t v61 = 0;
              int v63 = 3;
              int v62 = 1;
              unsigned int v64 = 276;
              break;
            case 2459:
LABEL_1848:
              uint64_t v61 = 0;
              int v63 = 3;
              int v62 = 1;
              unsigned int v64 = 273;
              break;
            case 2460:
LABEL_1847:
              int v62 = 0;
              uint64_t v61 = 0;
              int v63 = 4;
              unsigned int v64 = 277;
              break;
            case 2461:
LABEL_1846:
              int v62 = 0;
              uint64_t v61 = 0;
              int v63 = 4;
              unsigned int v64 = 274;
              break;
            case 2462:
            case 2463:
LABEL_79:
              int v62 = 0;
              uint64_t v61 = 0;
              char v66 = 0;
              int v63 = 1;
              unsigned int v64 = 284;
              break;
            case 2464:
LABEL_1167:
              int v62 = 0;
              uint64_t v61 = 0;
              char v66 = 0;
              int v63 = 2;
              unsigned int v64 = 281;
              break;
            case 2465:
LABEL_1852:
              int v62 = 0;
              uint64_t v61 = 0;
              char v66 = 0;
              int v63 = 2;
              unsigned int v64 = 278;
              break;
            case 2466:
LABEL_1169:
              uint64_t v61 = 0;
              char v66 = 0;
              int v63 = 3;
              int v62 = 1;
              unsigned int v64 = 282;
              break;
            case 2467:
LABEL_1849:
              uint64_t v61 = 0;
              char v66 = 0;
              int v63 = 3;
              int v62 = 1;
              unsigned int v64 = 279;
              break;
            case 2468:
LABEL_1850:
              int v62 = 0;
              uint64_t v61 = 0;
              char v66 = 0;
              int v63 = 4;
              unsigned int v64 = 283;
              break;
            case 2469:
LABEL_1851:
              int v62 = 0;
              uint64_t v61 = 0;
              char v66 = 0;
              int v63 = 4;
              unsigned int v64 = 280;
              break;
            default:
              switch((int)v16)
              {
                case 2115:
                case 2116:
LABEL_1165:
                  int v62 = 0;
                  int v63 = 1;
                  unsigned int v64 = 286;
                  goto LABEL_1166;
                case 2117:
LABEL_1910:
                  int v62 = 0;
                  char v66 = 1;
                  uint64_t v61 = 2;
                  unsigned int v64 = 275;
                  goto LABEL_1172;
                case 2118:
LABEL_1911:
                  int v62 = 0;
                  char v66 = 1;
                  uint64_t v61 = 2;
                  unsigned int v64 = 272;
                  goto LABEL_1172;
                case 2119:
LABEL_1912:
                  int v63 = 3;
                  int v62 = 1;
                  unsigned int v64 = 276;
                  goto LABEL_1166;
                case 2120:
LABEL_1913:
                  int v63 = 3;
                  int v62 = 1;
                  unsigned int v64 = 273;
LABEL_1166:
                  uint64_t v61 = 2;
                  goto LABEL_220;
                case 2121:
LABEL_1914:
                  int v62 = 0;
                  char v66 = 1;
                  int v63 = 4;
                  unsigned int v64 = 277;
                  goto LABEL_277;
                case 2122:
LABEL_1915:
                  int v62 = 0;
                  char v66 = 1;
                  int v63 = 4;
                  unsigned int v64 = 274;
                  goto LABEL_277;
                case 2123:
                case 2124:
LABEL_276:
                  int v62 = 0;
                  char v66 = 0;
                  int v63 = 1;
                  unsigned int v64 = 284;
                  goto LABEL_277;
                case 2125:
LABEL_1171:
                  int v62 = 0;
                  char v66 = 0;
                  uint64_t v61 = 2;
                  unsigned int v64 = 281;
                  goto LABEL_1172;
                case 2126:
LABEL_1909:
                  int v62 = 0;
                  char v66 = 0;
                  uint64_t v61 = 2;
                  unsigned int v64 = 278;
                  goto LABEL_1172;
                case 2127:
LABEL_1281:
                  char v66 = 0;
                  int v63 = 3;
                  int v62 = 1;
                  unsigned int v64 = 282;
                  goto LABEL_277;
                case 2128:
LABEL_1906:
                  char v66 = 0;
                  int v63 = 3;
                  int v62 = 1;
                  unsigned int v64 = 279;
                  goto LABEL_277;
                case 2129:
LABEL_1907:
                  int v62 = 0;
                  char v66 = 0;
                  int v63 = 4;
                  unsigned int v64 = 283;
                  goto LABEL_277;
                case 2130:
LABEL_1908:
                  int v62 = 0;
                  char v66 = 0;
                  int v63 = 4;
                  unsigned int v64 = 280;
LABEL_277:
                  uint64_t v61 = 2;
                  break;
                default:
                  char v66 = 1;
                  switch((int)v16)
                  {
                    case 2311:
                      goto LABEL_1910;
                    case 2312:
                      goto LABEL_1911;
                    case 2313:
                      goto LABEL_1912;
                    case 2314:
                      goto LABEL_1913;
                    case 2315:
                      goto LABEL_1914;
                    case 2316:
                      goto LABEL_1915;
                    case 2317:
                    case 2318:
                      goto LABEL_80;
                    case 2319:
                      goto LABEL_1168;
                    case 2320:
                      goto LABEL_1853;
                    case 2321:
                      goto LABEL_1275;
                    case 2322:
                      goto LABEL_1848;
                    case 2323:
                      goto LABEL_1847;
                    case 2324:
                      goto LABEL_1846;
                    case 2325:
                      goto LABEL_219;
                    case 2326:
                      goto LABEL_1898;
                    case 2327:
                      goto LABEL_1899;
                    case 2328:
                      goto LABEL_1900;
                    case 2329:
                      goto LABEL_1901;
                    case 2330:
                      goto LABEL_1902;
                    case 2331:
                      goto LABEL_1904;
                    case 2332:
                      goto LABEL_1905;
                    case 2333:
                    case 2334:
                    case 2335:
                    case 2336:
                      __break(1u);
                      goto LABEL_2037;
                    case 2337:
                    case 2338:
                      goto LABEL_276;
                    case 2339:
                      goto LABEL_1171;
                    case 2340:
                      goto LABEL_1909;
                    case 2341:
                      goto LABEL_1281;
                    case 2342:
                      goto LABEL_1906;
                    case 2343:
                      goto LABEL_1907;
                    case 2344:
                      goto LABEL_1908;
                    case 2345:
                    case 2346:
                      goto LABEL_79;
                    case 2347:
                      goto LABEL_1167;
                    case 2348:
                      goto LABEL_1852;
                    case 2349:
                      goto LABEL_1169;
                    case 2350:
                      goto LABEL_1849;
                    case 2351:
                      goto LABEL_1850;
                    case 2352:
                      goto LABEL_1851;
                    case 2353:
                    case 2354:
                      goto LABEL_1170;
                    case 2355:
                      goto LABEL_1667;
                    case 2356:
                      goto LABEL_1892;
                    case 2357:
                      goto LABEL_1893;
                    case 2358:
                      goto LABEL_1894;
                    case 2359:
                      goto LABEL_1896;
                    case 2360:
                      goto LABEL_1897;
                    default:
                      goto LABEL_1165;
                  }
              }
              break;
          }
        }
LABEL_80:
        int v67 = sub_1CBA319C4(*(_DWORD *)(v60 + 32 * (v6 + 1) + 4), v1768, (llvm::IntegerType *****)v65);
        int v69 = *(_DWORD *)(*((void *)v1774 + 4) + 4);
        int IncompleteVirtualRegister = v69;
        int v1732 = v67;
        if (v69 < 0 && (uint64_t v70 = v69 & 0x7FFFFFFF, v70 < *(_DWORD *)(v1768 + 432))) {
          uint64_t v71 = *(llvm::MachineInstr **)(*(void *)(v1768 + 424) + 8 * v70);
        }
        else {
          uint64_t v71 = 0;
        }
        unsigned int v1716 = v63;
        int v1723 = v62;
        char v1742 = v66;
        if (v62)
        {
          uint64_t v72 = 0x800000000000000;
          if ((v71 & 2) == 0) {
            uint64_t v72 = 0x8000000000000;
          }
          if ((v72 & (unint64_t)v71) != 0) {
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v68);
          }
          char v73 = (void *)v61;
          if (((unint64_t)v71 & 0x7FFF8) == 0x20)
          {
            if (v71)
            {
              uint64_t v74 = ((unint64_t)v71 >> 3);
            }
            else if ((v71 & 4) != 0)
            {
              if ((v71 & 2) != 0) {
                uint64_t v74 = (unsigned __int16)((unint64_t)v71 >> 19);
              }
              else {
                uint64_t v74 = ((unint64_t)v71 >> 19);
              }
            }
            else
            {
              uint64_t v74 = (unsigned __int16)((unint64_t)v71 >> 3);
            }
            uint64_t v1709 = (v74 << 19) | 0x1C;
            uint64_t v98 = v1768;
            int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v1768, "", 0);
            unint64_t v99 = IncompleteVirtualRegister & 0x7FFFFFFF;
            *(void *)(*(void *)(v1768 + 24) + 16 * v99) = 4;
            unint64_t v100 = *(unsigned int *)(v1768 + 432);
            if (v99 >= v100)
            {
              uint64_t v101 = *(void *)(v1768 + 440);
              uint64_t v102 = v99 + 1 - v100;
              if (v99 >= *(unsigned int *)(v1768 + 436)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v103 = *(_DWORD *)(v1768 + 432);
              if (v102)
              {
                long long v104 = (void *)(*(void *)(v1768 + 424) + 8 * *(unsigned int *)(v1768 + 432));
                uint64_t v105 = ~v99 + v100;
                do
                {
                  *v104++ = v101;
                  BOOL v523 = __CFADD__(v105++, 1);
                }
                while (!v523);
                int v103 = *(_DWORD *)(v1768 + 432);
              }
              uint64_t v98 = v1768;
              *(_DWORD *)(v1768 + 432) = v103 + v102;
            }
            *(void *)(*(void *)(v98 + 424) + 8 * v99) = v1709;
            uint64_t v106 = *(void *)(v98 + 8);
            uint64_t v65 = (llvm::MachineInstr *)v1775;
            if (v106) {
              (*(void (**)(uint64_t))(*(void *)v106 + 24))(v106);
            }
            uint64_t v59 = v1774;
          }
        }
        else
        {
          char v73 = (void *)v61;
        }
        uint64_t v107 = (llvm::MachineFunction *)*((void *)v65 + 1);
        uint64_t v108 = *(void *)(*((void *)v65 + 2) + 8) + 48 * v64;
        uint64_t v109 = (llvm::MachineInstr *)*((void *)v65 + 4);
        v1798[0] = v109;
        if (v109) {
          llvm::MetadataTracking::track((uint64_t)v1798, (unsigned __int8 *)v109, 2);
        }
        long long v110 = llvm::MachineFunction::CreateMachineInstr(v107, v108, (unsigned __int8 **)v1798, 0);
        if (!v1798[0]) {
          goto LABEL_139;
        }
        int v1649 = *(unsigned __int8 *)v1798[0];
        if ((v1649 - 4) > 0x1E)
        {
          if ((v1649 - 3) >= 0xFFFFFFFE) {
            v1655 = v1798[0];
          }
          else {
            v1655 = 0;
          }
          if ((v1649 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1651 = (unint64_t)v1655 + 8;
LABEL_1867:
            v1810[0] = v1798;
            sub_1CC5FA668(v1651 + 16, v1810);
            uint64_t v59 = v1774;
            goto LABEL_139;
          }
          uint64_t v59 = v1774;
          if (v1649 == 3) {
            *((void *)v1798[0] + 1) = 0;
          }
        }
        else
        {
          uint64_t v59 = v1774;
          if ((*((unsigned char *)v1798[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1798[0] + 3))
          {
            uint64_t v1650 = *((void *)v1798[0] + 2);
            if ((v1650 & 4) != 0)
            {
              unint64_t v1651 = v1650 & 0xFFFFFFFFFFFFFFF8;
              if (v1651) {
                goto LABEL_1867;
              }
            }
          }
        }
LABEL_139:
        int v111 = (unint64_t *)v1775[6];
        uint64_t v112 = v1775[5][5];
        *((void *)v110 + 3) = v112;
        uint64_t v113 = v112[4];
        uint64_t v114 = *((unsigned int *)v110 + 10);
        if (v114)
        {
          uint64_t v163 = *((void *)v110 + 4);
          uint64_t v164 = v113[5];
          uint64_t v165 = 32 * v114;
          do
          {
            if (!*(unsigned char *)v163)
            {
              uint64_t v166 = *(unsigned int *)(v163 + 4);
              if ((int)v166 >= 0) {
                uint64_t v167 = (uint64_t *)(*((void *)v164 + 34) + 8 * v166);
              }
              else {
                uint64_t v167 = (uint64_t *)(*((void *)v164 + 3) + 16 * (v166 & 0x7FFFFFFF) + 8);
              }
              uint64_t v168 = *v167;
              if (*v167)
              {
                uint64_t v169 = *(void *)(v168 + 16);
                *(void *)(v168 + 16) = v163;
                *(void *)(v163 + 16) = v169;
                if (*(unsigned char *)(v163 + 3))
                {
                  *(void *)(v163 + 24) = v168;
                }
                else
                {
                  *(void *)(v163 + 24) = 0;
                  uint64_t v167 = (uint64_t *)(v169 + 24);
                }
              }
              else
              {
                *(void *)(v163 + 16) = v163;
                *(void *)(v163 + 24) = 0;
              }
              *uint64_t v167 = v163;
            }
            v163 += 32;
            v165 -= 32;
          }
          while (v165);
        }
        uint64_t v115 = v113[91];
        if (v115) {
          (*(void (**)(llvm::IntegerType *, llvm::MachineInstr *))(*(void *)v115 + 24))(v115, v110);
        }
        uint64_t v116 = (v6 + 2);
        unint64_t v117 = *v111 & 0xFFFFFFFFFFFFFFF8;
        *(void *)long long v110 = v117 | *(void *)v110 & 7;
        *((void *)v110 + 1) = v111;
        *(void *)(v117 + 8) = v110;
        *int v111 = *v111 & 7 | (unint64_t)v110;
        uint64_t v118 = v1775[7];
        if (v118) {
          ((void (*)(llvm::IntegerType ****, llvm::MachineInstr *))(*v118)[3])(v118, v110);
        }
        memset(&v1810[1], 0, 24);
        int v119 = IncompleteVirtualRegister;
        HIDWORD(v1810[0]) = IncompleteVirtualRegister;
        LODWORD(v1810[0]) = 0x1000000;
        llvm::MachineInstr::addOperand(v110, v107, (const llvm::MachineOperand *)v1810);
        LODWORD(v1810[0]) = 1;
        v1810[1] = 0;
        v1810[2] = v73;
        llvm::MachineInstr::addOperand(v110, v107, (const llvm::MachineOperand *)v1810);
        memset(&v1810[1], 0, 24);
        HIDWORD(v1810[0]) = v1732;
        LODWORD(v1810[0]) = 0;
        llvm::MachineInstr::addOperand(v110, v107, (const llvm::MachineOperand *)v1810);
        if (v1742) {
          goto LABEL_147;
        }
        unint64_t v121 = sub_1CBA2EB1C(*(_DWORD *)(*((void *)v59 + 4) + 32 * v116 + 4), v1768, 256);
        if (!HIDWORD(v121)) {
          return 0;
        }
        LODWORD(v116) = v6 + 3;
        LODWORD(v1810[0]) = 1;
        v1810[1] = 0;
        v1810[2] = (void *)v121;
        llvm::MachineInstr::addOperand(v110, v107, (const llvm::MachineOperand *)v1810);
LABEL_147:
        if (*((_DWORD *)v59 + 10) >= (v116 + 1))
        {
          if (v1758 - 2325 <= 0x23 && ((1 << (v1758 - 21)) & 0xFF00000FFLL) != 0
            || v1758 - 2528 < 0x10)
          {
            uint64_t v130 = (unsigned int *)(*((void *)v59 + 4) + 32 * v116);
            sub_1CC73C210(v130[1], v1768, (uint64_t)v1810);
            if (LOBYTE(v1810[2]) && LODWORD(v1810[1]) >= 0x41)
            {
              if (v1810[0]) {
                MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
              }
              uint64_t v59 = v1774;
              int v119 = IncompleteVirtualRegister;
            }
            LODWORD(v1810[0]) = 1;
            v1810[1] = 0;
            v1810[2] = (void *)1;
            llvm::MachineInstr::addOperand(v110, v107, (const llvm::MachineOperand *)v1810);
            llvm::MachineInstr::addOperand(v110, v107, (const llvm::MachineOperand *)v130);
          }
          goto LABEL_167;
        }
        LODWORD(v1810[0]) = 1;
        v1810[2] = 0;
        v1810[1] = 0;
        llvm::MachineInstr::addOperand(v110, v107, (const llvm::MachineOperand *)v1810);
        uint64_t v122 = *((void *)v110 + 3);
        long long v1812 = 0u;
        long long v1811 = 0u;
        *(_OWORD *)&v1810[3] = 0u;
        *(_OWORD *)&v1810[1] = 0u;
        uint64_t v123 = *(void *)(v122 + 32);
        v1810[0] = &unk_1F261CD58;
        v1810[1] = (void *)v123;
        v1810[3] = *(void **)(v123 + 40);
        v1810[2] = (void *)(*(uint64_t (**)(void))(**(void **)(v123 + 16) + 104))(*(void *)(v123 + 16));
        v1793[0] = 0;
        if (!v1810[4]) {
          goto LABEL_149;
        }
        int v194 = *(unsigned __int8 *)v1810[4];
        if ((v194 - 4) > 0x1E)
        {
          if ((v194 - 3) >= 0xFFFFFFFE) {
            v731 = v1810[4];
          }
          else {
            v731 = 0;
          }
          if ((v194 - 3) > 0xFFFFFFFD)
          {
            unint64_t v196 = (unint64_t)v731 + 8;
            goto LABEL_697;
          }
          if (v194 == 3) {
            *((void *)v1810[4] + 1) = 0;
          }
        }
        else if ((*((unsigned char *)v1810[4] + 1) & 0x7F) == 2 || *((_DWORD *)v1810[4] + 3))
        {
          uint64_t v195 = *((void *)v1810[4] + 2);
          if ((v195 & 4) != 0)
          {
            unint64_t v196 = v195 & 0xFFFFFFFFFFFFFFF8;
            if (v196)
            {
LABEL_697:
              v1798[0] = (llvm::MachineInstr *)&v1810[4];
              sub_1CC5FA668(v196 + 16, v1798);
              v1810[4] = v1793[0];
LABEL_150:
              *(void *)&long long v1812 = 0;
              *((void *)&v1811 + 1) = v110;
              *(void *)&long long v1811 = *((void *)v110 + 3);
              *((void *)&v1811 + 1) = v110;
              if ((void **)((char *)v110 + 56) != &v1810[4])
              {
                uint64_t v124 = (void *)*((void *)v110 + 7);
                v1810[4] = v124;
                if (v124) {
                  llvm::MetadataTracking::track((uint64_t)&v1810[4], (unsigned __int8 *)v124, 2);
                }
              }
              v1798[0] = v71;
              LODWORD(v1798[1]) = 0;
              (*((void (**)(void **, uint64_t, llvm::MachineInstr **, uint64_t, void, void, void))v1810[0]
               + 4))(v1810, 68, v1798, 1, 0, 0, 0);
              int v126 = *(_DWORD *)(*(void *)(v125 + 32) + 4);
              v1798[1] = 0;
              long long v1799 = 0uLL;
              HIDWORD(v1798[0]) = v126;
              LODWORD(v1798[0]) = 0;
              llvm::MachineInstr::addOperand(v110, v107, (const llvm::MachineOperand *)v1798);
              v1810[0] = &unk_1F261CD58;
              uint64_t v59 = v1774;
              if (v1810[4])
              {
                int v127 = *(unsigned __int8 *)v1810[4];
                if ((v127 - 4) > 0x1E)
                {
                  if ((v127 - 3) >= 0xFFFFFFFE) {
                    uint64_t v162 = v1810[4];
                  }
                  else {
                    uint64_t v162 = 0;
                  }
                  if ((v127 - 3) >= 0xFFFFFFFE)
                  {
                    unint64_t v129 = (unint64_t)v162 + 8;
LABEL_215:
                    v1798[0] = (llvm::MachineInstr *)&v1810[4];
                    sub_1CC5FA668(v129 + 16, v1798);
                    goto LABEL_167;
                  }
                  if (v127 == 3) {
                    *((void *)v1810[4] + 1) = 0;
                  }
                }
                else if ((*((unsigned char *)v1810[4] + 1) & 0x7F) == 2 || *((_DWORD *)v1810[4] + 3))
                {
                  uint64_t v128 = *((void *)v1810[4] + 2);
                  if ((v128 & 4) != 0)
                  {
                    unint64_t v129 = v128 & 0xFFFFFFFFFFFFFFF8;
                    if (v129) {
                      goto LABEL_215;
                    }
                  }
                }
              }
LABEL_167:
              if (v1723)
              {
                uint64_t v131 = 0x800000000000000;
                if ((v71 & 2) == 0) {
                  uint64_t v131 = 0x8000000000000;
                }
                if ((v131 & (unint64_t)v71) != 0) {
                  llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v120);
                }
                if (((unint64_t)v71 & 0x7FFF8) == 0x20)
                {
                  v1793[0] = v1794;
                  v1793[1] = (void *)0x400000000;
                  if ((v71 & 2) != 0)
                  {
                    char v1656 = 35;
                    char v1657 = 19;
                    if ((v71 & 4) == 0) {
                      char v1656 = 19;
                    }
                    unint64_t v1658 = (unint64_t)v71 >> v1656;
                    if ((v71 & 4) == 0) {
                      char v1657 = 3;
                    }
                    if (v71) {
                      char v1657 = 3;
                    }
                    unint64_t v133 = (8 * (unsigned __int16)((unint64_t)v71 >> v1657)) & 0xFFFFF8000007FFFFLL | ((v1658 & 0xFFFFFF) << 19) | 2;
                  }
                  else
                  {
                    char v132 = 3;
                    if ((v71 & 1) == 0) {
                      char v132 = 19;
                    }
                    unint64_t v133 = (unint64_t)v71 & 0x8000000000000000 | (8
                                                                         * ((unint64_t)v71 >> v132)) | 1;
                  }
                  uint64_t v134 = 0;
                  v1798[0] = (llvm::MachineInstr *)&v1799;
                  *(void *)&long long v1799 = v133;
                  *((void *)&v1799 + 1) = v133;
                  unint64_t v1800 = v133;
                  v1798[1] = (llvm::MachineInstr *)(v1716 | 0x400000000);
                  LODWORD(v1795) = v119;
                  LODWORD(v1796) = 0;
                  v1810[0] = &v1810[2];
                  v1810[1] = (void *)0x800000000;
                  uint64_t v135 = 2;
                  do
                  {
                    uint64_t v136 = &v1810[v135];
                    void *v136 = v1798[v134 + 2];
                    *((_DWORD *)v136 + 2) = 0;
                    v135 += 2;
                    ++v134;
                  }
                  while (v1716 != v134);
                  LODWORD(v1810[1]) += v1716;
                  ((void (*)(llvm::IntegerType *****, uint64_t, void *))(*v1775)[4])(v1775, 74, v1810[0]);
                  uint64_t v138 = v137;
                  if (v1810[0] != &v1810[2]) {
                    free(v1810[0]);
                  }
                  uint64_t v139 = 0;
                  unsigned int v140 = v1793[1];
                  do
                  {
                    if (v140 >= HIDWORD(v1793[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((_DWORD *)v1793[0] + v140) = *(_DWORD *)(*(void *)(v138 + 32) + v139 + 4);
                    unsigned int v140 = ++LODWORD(v1793[1]);
                    v139 += 32;
                  }
                  while (32 * v1716 != v139);
                  if ((v71 & 2) != 0)
                  {
                    char v1659 = 35;
                    char v1660 = 19;
                    if ((v71 & 4) == 0) {
                      char v1659 = 19;
                    }
                    unint64_t v1661 = (unint64_t)v71 >> v1659;
                    if ((v71 & 4) == 0) {
                      char v1660 = 3;
                    }
                    if (v71) {
                      char v1660 = 3;
                    }
                    uint64_t v142 = (void *)((8 * (unsigned __int16)((unint64_t)v71 >> v1660)) & 0xFFFFF8000007FFFFLL | ((v1661 & 0xFFFFFF) << 19) | 2);
                  }
                  else
                  {
                    char v141 = 3;
                    if ((v71 & 1) == 0) {
                      char v141 = 19;
                    }
                    uint64_t v142 = (void *)((unint64_t)v71 & 0x8000000000000000 | (8
                                                                                  * ((unint64_t)v71 >> v141)) | 1);
                  }
                  v1810[0] = v142;
                  LODWORD(v1810[1]) = 0;
                  ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void, void, void))(*v1775)[4])(v1775, 68, v1810, 1, 0, 0, 0);
                  if (LODWORD(v1793[1]) >= HIDWORD(v1793[1])) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_DWORD *)v1793[0] + LODWORD(v1793[1])) = *(_DWORD *)(*(void *)(v143 + 32) + 4);
                  uint64_t v144 = (LODWORD(v1793[1]) + 1);
                  LODWORD(v1793[1]) = v144;
                  LODWORD(v1795) = *(_DWORD *)(*((void *)v59 + 4) + 4);
                  DWORD2(v1795) = 1;
                  uint64_t v145 = (int *)v1793[0];
                  v1810[0] = &v1810[2];
                  v1810[1] = (void *)0x800000000;
                  if (v144 >= 9) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v144)
                  {
                    uint64_t v146 = 0;
                    uint64_t v147 = 4 * v144;
                    do
                    {
                      int v148 = *v145++;
                      uint64_t v149 = &v1810[v146 + 2];
                      *(_DWORD *)uint64_t v149 = v148;
                      *((_DWORD *)v149 + 4) = 0;
                      v146 += 3;
                      v147 -= 4;
                    }
                    while (v147);
                    int v150 = (int)v1810[1];
                  }
                  else
                  {
                    int v150 = 0;
                  }
                  LODWORD(v1810[1]) = v150 + v144;
                  ((void (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, void **))(*v1775)[4])(v1775, 77, &v1795, 1, &v1810[2]);
                  if (v1810[0] != &v1810[2]) {
                    free(v1810[0]);
                  }
                  if ((long long *)v1798[0] != &v1799) {
                    free(v1798[0]);
                  }
                  if (v1793[0] != v1794) {
                    free(v1793[0]);
                  }
                }
              }
              goto LABEL_263;
            }
          }
        }
LABEL_149:
        v1810[4] = 0;
        goto LABEL_150;
      case 2134:
      case 2135:
      case 2136:
      case 2137:
      case 2138:
        v1775[5] = (llvm::IntegerType ****)*((void *)v1774 + 3);
        v1775[6] = (llvm::IntegerType ****)v1774;
        if (v18 == v19) {
          goto LABEL_238;
        }
        uint64_t v170 = *v19;
        if (!*v19) {
          goto LABEL_236;
        }
        int v910 = *v170;
        if ((v910 - 4) > 0x1E)
        {
          if ((v910 - 3) >= 0xFFFFFFFE) {
            v1243 = *v19;
          }
          else {
            v1243 = 0;
          }
          if ((v910 - 3) < 0xFFFFFFFE)
          {
            if (v910 == 3) {
              *((void *)v170 + 1) = 0;
            }
            goto LABEL_236;
          }
          unint64_t v912 = (unint64_t)(v1243 + 8);
        }
        else if ((v170[1] & 0x7F) != 2 && !*((_DWORD *)v170 + 3) {
               || (uint64_t v911 = *((void *)v170 + 2), (v911 & 4) == 0)
        }
               || (unint64_t v912 = v911 & 0xFFFFFFFFFFFFFFF8) == 0)
        {
LABEL_236:
          uint64_t v171 = *v18;
          *char v19 = *v18;
          if (v171) {
            llvm::MetadataTracking::track((uint64_t)v19, v171, 2);
          }
LABEL_238:
          uint64_t v172 = *(void *)(*((void *)v1774 + 3) + 32);
          uint64_t v173 = *(unsigned char **)(v172 + 8);
          uint64_t v174 = *((unsigned int *)v1774 + 10);
          if (v174)
          {
            uint64_t v175 = 0;
            uint64_t v176 = (unsigned __int8 *)*((void *)v1774 + 4);
            while (1)
            {
              int v177 = *v176;
              v176 += 32;
              if (v177 == 17) {
                break;
              }
              if (v174 == ++v175) {
                goto LABEL_242;
              }
            }
          }
          else
          {
LABEL_242:
            LODWORD(v175) = -1;
          }
          int v178 = *(_DWORD *)(*((void *)v1774 + 4) + 32 * v175 + 16);
          uint64_t v179 = *(void *)(v172 + 48);
          if (!v179)
          {
            uint64_t v179 = (*(uint64_t (**)(void, uint64_t, void))(*(void *)v173 + 216))(*(void *)(v172 + 8), v172 + 128, *(void *)(*((void *)v1774 + 3) + 32));
            *(void *)(v172 + 48) = v179;
          }
          switch(v178)
          {
            case 2135:
              uint64_t v180 = 4824;
              if (!v173[1648])
              {
                if (v173[1655]) {
                  uint64_t v180 = 4824;
                }
                else {
                  uint64_t v180 = 4822;
                }
              }
              char v660 = 0;
              LODWORD(v181) = 0;
              LODWORD(v182) = 0;
              v664 = v1774;
              int v1769 = *(_DWORD *)(*((void *)v1774 + 4) + 68);
              goto LABEL_1072;
            case 2136:
              uint64_t v180 = 4824;
              if (!v173[1648])
              {
                if (v173[1655]) {
                  uint64_t v180 = 4824;
                }
                else {
                  uint64_t v180 = 4822;
                }
              }
              uint64_t v656 = *((void *)v1774 + 4);
              int v657 = *(_DWORD *)(v656 + 68);
              sub_1CC73C210(*(_DWORD *)(v656 + 100), v1768, (uint64_t)v1810);
              if (!LOBYTE(v1810[2])) {
                goto LABEL_602;
              }
              char v658 = (char)v1810[1];
              if (LODWORD(v1810[1]) >= 0x41) {
                goto LABEL_1699;
              }
              v659 = v1810[0];
              sub_1CC73C210(*(_DWORD *)(*((void *)v1774 + 4) + 132), v1768, (uint64_t)v1810);
              if (!LOBYTE(v1810[2])) {
                goto LABEL_602;
              }
              int v1769 = v657;
              if (LODWORD(v1810[1]) >= 0x41) {
                goto LABEL_1699;
              }
              char v660 = 0;
              uint64_t v182 = (uint64_t)((void)v659 << -v658) >> -v658;
              uint64_t v181 = (uint64_t)v1810[0] << -(uint64_t)LODWORD(v1810[1]) >> -(uint64_t)LODWORD(v1810[1]);
              goto LABEL_1071;
            case 2137:
              uint64_t v180 = 4823;
              if (!v173[1648])
              {
                if (v173[1655]) {
                  uint64_t v180 = 4823;
                }
                else {
                  uint64_t v180 = 4821;
                }
              }
              sub_1CC73C210(*(_DWORD *)(*((void *)v1774 + 4) + 68), v1768, (uint64_t)v1810);
              if (!LOBYTE(v1810[2])) {
                goto LABEL_602;
              }
              char v661 = (char)v1810[1];
              if (LODWORD(v1810[1]) >= 0x41) {
                goto LABEL_1699;
              }
              v662 = v1810[0];
              sub_1CC73C210(*(_DWORD *)(*((void *)v1774 + 4) + 100), v1768, (uint64_t)v1810);
              if (!LOBYTE(v1810[2])) {
                goto LABEL_602;
              }
              if (LODWORD(v1810[1]) < 0x41)
              {
                int v1769 = 0;
                uint64_t v182 = (uint64_t)((void)v662 << -v661) >> -v661;
                uint64_t v181 = (uint64_t)v1810[0] << -(uint64_t)LODWORD(v1810[1]) >> -(uint64_t)LODWORD(v1810[1]);
LABEL_1070:
                char v660 = 1;
LABEL_1071:
                v664 = v1774;
LABEL_1072:
                int v1185 = *(_DWORD *)(*((void *)v664 + 4) + 4);
                v1798[0] = 0;
                v1798[1] = 0;
                if (v173[1654])
                {
                  LODWORD(v1810[0]) = v1185;
                  LODWORD(v1810[1]) = 1;
                  v1186 = (llvm::MachineInstr *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void, void, void))(*v1775)[4])(v1775, v180, v1810, 1, 0, 0, 0);
                  v1188 = v1187;
                  v1798[0] = v1186;
                  v1798[1] = v1187;
                  LODWORD(v1810[0]) = 1;
                  v1810[2] = 0;
                  v1810[1] = 0;
                  llvm::MachineInstr::addOperand(v1187, v1186, (const llvm::MachineOperand *)v1810);
                  LODWORD(v1810[0]) = 1;
                  v1810[1] = 0;
                  v1810[2] = (void *)16;
                  llvm::MachineInstr::addOperand(v1188, v1186, (const llvm::MachineOperand *)v1810);
                  LODWORD(v1810[0]) = 1;
                  v1810[1] = 0;
                  v1810[2] = (void *)15;
                  llvm::MachineInstr::addOperand(v1188, v1186, (const llvm::MachineOperand *)v1810);
                  if (v660) {
                    goto LABEL_1078;
                  }
                  memset(&v1810[1], 0, 24);
                  HIDWORD(v1810[0]) = v1769;
                  LODWORD(v1810[0]) = 0;
                  llvm::MachineInstr::addOperand(v1188, v1186, (const llvm::MachineOperand *)v1810);
                  LODWORD(v1810[0]) = 1;
                  v1810[2] = 0;
                  v1810[1] = 0;
                }
                else
                {
                  LODWORD(v1810[0]) = v1185;
                  LODWORD(v1810[1]) = 1;
                  v1186 = (llvm::MachineInstr *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void, void, void))(*v1775)[4])(v1775, v180, v1810, 1, 0, 0, 0);
                  v1188 = v1189;
                  v1798[0] = v1186;
                  v1798[1] = v1189;
                  LODWORD(v1810[0]) = 1;
                  v1810[1] = 0;
                  v1810[2] = (void *)16;
                  llvm::MachineInstr::addOperand(v1189, v1186, (const llvm::MachineOperand *)v1810);
                  LODWORD(v1810[0]) = 1;
                  v1810[1] = 0;
                  v1810[2] = (void *)15;
                  llvm::MachineInstr::addOperand(v1188, v1186, (const llvm::MachineOperand *)v1810);
                  if (v660) {
                    goto LABEL_1078;
                  }
                  memset(&v1810[1], 0, 24);
                  HIDWORD(v1810[0]) = v1769;
                  LODWORD(v1810[0]) = 0;
                }
                llvm::MachineInstr::addOperand(v1188, v1186, (const llvm::MachineOperand *)v1810);
LABEL_1078:
                LODWORD(v1810[0]) = 1;
                v1810[1] = 0;
                v1810[2] = (void *)v182;
                llvm::MachineInstr::addOperand(v1188, v1186, (const llvm::MachineOperand *)v1810);
                LODWORD(v1810[0]) = 1;
                v1810[1] = 0;
                v1810[2] = (void *)v181;
                llvm::MachineInstr::addOperand(v1188, v1186, (const llvm::MachineOperand *)v1810);
                sub_1CBA318C8((uint64_t)v1798);
                sub_1CB9E59E0(v179, 0, 128, v172);
              }
LABEL_1699:
              if (v1810[0]) {
                MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
              }
LABEL_602:
              v663 = "Invalid offset type";
              break;
            case 2138:
              uint64_t v645 = *(unsigned int *)(*((void *)v1774 + 4) + 68);
              if ((v645 & 0x80000000) != 0) {
                v646 = (uint64_t *)(*(void *)(v1768 + 24) + 16 * (v645 & 0x7FFFFFFF) + 8);
              }
              else {
                v646 = (uint64_t *)(*(void *)(v1768 + 272) + 8 * v645);
              }
              uint64_t v647 = *v646;
              if (!v647) {
                return 0;
              }
              if ((*(unsigned char *)(v647 + 3) & 1) == 0)
              {
                uint64_t v647 = *(void *)(v647 + 24);
                if (!v647 || (*(unsigned char *)(v647 + 3) & 1) == 0) {
                  return 0;
                }
              }
              uint64_t v648 = *(void *)(v647 + 8);
              if (!v648 || **(_WORD **)(v648 + 16) != 77) {
                return 0;
              }
              uint64_t v649 = 0;
              v1810[0] = &v1810[2];
              *(_OWORD *)&v1810[2] = 0uLL;
              v1810[1] = (void *)0x400000004;
              char v650 = 1;
              while (2)
              {
                char v651 = v650;
                sub_1CC73C210(*(_DWORD *)(*(void *)(v648 + 32) + 32 * v649 + 36), v1768, (uint64_t)v1798);
                if ((_BYTE)v1799)
                {
                  if (LODWORD(v1798[1]) < 0x41)
                  {
                    char v650 = 0;
                    uint64_t v652 = (uint64_t)v1798[0] << -LOBYTE(v1798[1]) >> -LOBYTE(v1798[1]);
                    v653 = (unsigned int *)v1810[0];
                    v654 = (char *)v1810[0] + 8 * v649;
                    int v655 = *v654 | v652;
                    LODWORD(v652) = v654[1] | HIDWORD(v652);
                    _DWORD *v654 = v655;
                    v654[1] = v652;
                    uint64_t v649 = 1;
                    if ((v651 & 1) == 0) {
                      sub_1CB9E57D8(v179, v653, v1810[1], v172);
                    }
                    continue;
                  }
                  if (v1798[0]) {
                    MEMORY[0x1D25D9CB0](v1798[0], 0x1000C8000313F17);
                  }
                }
                break;
              }
              if (v1810[0] != &v1810[2]) {
                free(v1810[0]);
              }
              return 0;
            default:
              uint64_t v180 = 4823;
              if (v173[1648])
              {
                int v1769 = 0;
                LODWORD(v181) = 0;
                LODWORD(v182) = 0;
              }
              else
              {
                int v1769 = 0;
                LODWORD(v181) = 0;
                LODWORD(v182) = 0;
                if (v173[1655]) {
                  uint64_t v180 = 4823;
                }
                else {
                  uint64_t v180 = 4821;
                }
              }
              goto LABEL_1070;
          }
LABEL_603:
          llvm::report_fatal_error((llvm *)v663, (const llvm::Twine *)1);
        }
        v1810[0] = v19;
        sub_1CC5FA668(v912 + 16, v1810);
        goto LABEL_236;
      case 2140:
      case 2544:
      case 2706:
      case 2707:
      case 2708:
        unsigned int v183 = sub_1CBA2EBE4(v16);
        unsigned int v84 = v1774;
        BOOL v22 = 1;
        LODWORD(v1798[0]) = *(_DWORD *)(*((void *)v1774 + 4) + 4);
        LODWORD(v1798[1]) = 1;
        uint64_t v184 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void, void, void))(*v1775)[4])(v1775, 319, v1798, 1, 0, 0, 0);
        uint64_t v186 = v185;
        LODWORD(v1810[0]) = 1;
        v1810[1] = 0;
        v1810[2] = (void *)v183;
        uint64_t v187 = (llvm::MachineFunction *)v184;
        goto LABEL_270;
      case 2142:
      case 2376:
      case 2377:
      case 2378:
      case 2379:
      case 2380:
      case 2381:
      case 2382:
      case 2383:
      case 2384:
      case 2385:
      case 2386:
      case 2387:
      case 2388:
      case 2389:
      case 2390:
      case 2391:
      case 2392:
      case 2393:
      case 2394:
      case 2395:
      case 2396:
      case 2397:
      case 2398:
      case 2399:
      case 2400:
      case 2401:
      case 2402:
      case 2403:
      case 2404:
      case 2405:
      case 2406:
      case 2407:
        return sub_1CBA31DC8(v1774, v1768, v1775);
      case 2144:
      case 2630:
      case 2631:
      case 2632:
      case 2633:
      case 2634:
      case 2635:
      case 2636:
      case 2637:
      case 2638:
      case 2639:
      case 2640:
      case 2641:
      case 2642:
      case 2643:
      case 2644:
      case 2645:
      case 2646:
      case 2647:
      case 2648:
      case 2649:
      case 2650:
      case 2651:
      case 2652:
      case 2653:
      case 2654:
      case 2655:
      case 2656:
      case 2657:
      case 2658:
      case 2659:
      case 2660:
      case 2661:
        return sub_1CBA3453C(v1774, v1768, (uint64_t)v1775);
      case 2148:
      case 2149:
        uint64_t v376 = *((void *)v1774 + 4);
        int v377 = *(_DWORD *)(v376 + 36);
        if ((v377 & 0x80000000) == 0 || (v377 & 0x7FFFFFFFu) >= *(_DWORD *)(v1768 + 432)) {
          return 1;
        }
        BOOL v378 = (*(void *)(*(void *)(v1768 + 424) + 8 * (v377 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) != 0
            && (*(void *)(*(void *)(v1768 + 424) + 8 * (v377 & 0x7FFFFFFF)) & 6) == 2;
        BOOL v22 = 1;
        if (!v378) {
          return v22;
        }
        uint64_t v379 = v376 + 32;
        LODWORD(v1810[0]) = *(_DWORD *)(v376 + 36);
        LODWORD(v1810[2]) = 0;
        long long v380 = v1775;
        v1798[0] = (llvm::MachineInstr *)129;
        LODWORD(v1798[1]) = 0;
        v1810[0] = (void *)sub_1CC7382B0((uint64_t)v1775);
        v1810[1] = v381;
        LODWORD(v1810[2]) = 1;
        ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v380)[4])(v380, 119, v1798, 1, v1810, 1, 0);
        uint64_t v383 = v382;
        long long v384 = v1751;
        (*(void (**)(llvm::ConstantFP *, llvm::MachineInstr *))(*(void *)v1751 + 32))(v1751, v1774);
        llvm::MachineOperand::setReg(v379, *(_DWORD *)(*(void *)(v383 + 32) + 4));
        (*(void (**)(llvm::ConstantFP *, llvm::MachineInstr *))(*(void *)v384 + 40))(v384, v1774);
        uint64_t v385 = *((void *)v1774 + 4);
        uint64_t v386 = v385 + 64;
        v1798[0] = (llvm::MachineInstr *)513;
        LODWORD(v1798[1]) = 0;
        LODWORD(v1810[0]) = *(_DWORD *)(v385 + 68);
        LODWORD(v1810[2]) = 0;
        int64x2_t v387 = (void *)sub_1CC7382B0((uint64_t)v1775);
        v1798[0] = (llvm::MachineInstr *)129;
        LODWORD(v1798[1]) = 0;
        v1810[0] = v387;
        v1810[1] = v388;
        LODWORD(v1810[2]) = 1;
        ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v380)[4])(v380, 119, v1798, 1, v1810, 1, 0);
        uint64_t v390 = v389;
        (*(void (**)(llvm::ConstantFP *, llvm::MachineInstr *))(*(void *)v384 + 32))(v384, v1774);
        llvm::MachineOperand::setReg(v386, *(_DWORD *)(*(void *)(v390 + 32) + 4));
        (*(void (**)(llvm::ConstantFP *, llvm::MachineInstr *))(*(void *)v384 + 40))(v384, v1774);
        return 1;
      case 2159:
      case 2160:
      case 2161:
      case 2162:
        unsigned int v84 = v1774;
        BOOL v22 = 1;
        LODWORD(v1798[0]) = *(_DWORD *)(*((void *)v1774 + 4) + 4);
        LODWORD(v1798[1]) = 1;
        uint64_t v190 = (llvm::MachineFunction *)((uint64_t (*)(llvm::IntegerType *****, void, llvm::MachineInstr **, uint64_t, void, void, void))(*v1775)[4])(v1775, (v16 - 1896), v1798, 1, 0, 0, 0);
        uint64_t v192 = v191;
        llvm::MachineInstr::addOperand(v191, v190, (const llvm::MachineOperand *)(*((void *)v1774 + 4) + 64));
        LODWORD(v1810[0]) = 1;
        v1810[2] = 0;
        v1810[1] = 0;
        llvm::MachineInstr::addOperand(v192, v190, (const llvm::MachineOperand *)v1810);
        llvm::MachineInstr::addOperand(v192, v190, (const llvm::MachineOperand *)(*((void *)v1774 + 4) + 96));
        LODWORD(v1810[0]) = 1;
        v1810[2] = 0;
        v1810[1] = 0;
        llvm::MachineInstr::addOperand(v192, v190, (const llvm::MachineOperand *)v1810);
        llvm::MachineInstr::addOperand(v192, v190, (const llvm::MachineOperand *)(*((void *)v1774 + 4) + 128));
        LODWORD(v1810[0]) = 1;
        v1810[2] = 0;
        v1810[1] = 0;
        uint64_t v186 = v192;
        uint64_t v187 = v190;
LABEL_270:
        llvm::MachineInstr::addOperand(v186, v187, (const llvm::MachineOperand *)v1810);
        goto LABEL_271;
      case 2171:
      case 2172:
        v1798[0] = (llvm::MachineInstr *)&v1799;
        v1798[1] = (llvm::MachineInstr *)0x400000000;
        if (v16 == 2172) {
          uint64_t v321 = 4;
        }
        else {
          uint64_t v321 = 3;
        }
        uint64_t v322 = *((void *)v1774 + 4);
        int v323 = *(_DWORD *)(v322 + 32 * v321 + 4);
        int v324 = *(_DWORD *)(v322 + 32 * (v321 + 1) + 4);
        int v325 = *(_DWORD *)(v322 + 32 * (v321 + 2) + 4);
        v1793[0] = (void *)513;
        LODWORD(v1793[1]) = 0;
        LODWORD(v1810[0]) = v323;
        LODWORD(v1810[2]) = 0;
        long long v326 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 80, v1793, 1, v1810, 1, 0);
        uint64_t v328 = v327;
        v1793[0] = v326;
        v1793[1] = v327;
        LODWORD(v1794[0]) = 1;
        v1810[0] = &v1810[2];
        v1810[2] = (void *)257;
        LODWORD(v1810[3]) = 0;
        v1810[4] = (void *)257;
        LODWORD(v1811) = 0;
        v1810[1] = (void *)0x800000002;
        ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 74, &v1810[2], 2, v1793, 1, 0);
        uint64_t v330 = v329;
        if (v1810[0] != &v1810[2]) {
          free(v1810[0]);
        }
        int v331 = *(_DWORD *)(*(void *)(v330 + 32) + 4);
        *(void *)&long long v1795 = 513;
        DWORD2(v1795) = 0;
        uint64_t v332 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x40);
        uint64_t v334 = *(llvm::ConstantInt **)v332;
        unsigned int v335 = *(_DWORD *)(v332 + 8);
        LODWORD(v1810[1]) = v335 >> 8;
        if (v335 >> 8 > 0x40) {
          operator new[]();
        }
        if (v335 <= 0xFF) {
          unint64_t v336 = 0;
        }
        else {
          unint64_t v336 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v335) + 63);
        }
        v1810[0] = (void *)(v336 & 0xFF00000000);
        uint64_t v337 = llvm::ConstantInt::get(v334, (llvm::LLVMContext *)v1810, v333);
        if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
          MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
        }
        v338 = (void *)((uint64_t (*)(llvm::IntegerType *****, long long *, void *))(*v1775)[2])(v1775, &v1795, v337);
        v1793[0] = (void *)513;
        LODWORD(v1793[1]) = 0;
        v1810[0] = v326;
        v1810[1] = v328;
        LODWORD(v1810[2]) = 1;
        v1810[3] = v338;
        v1810[4] = v339;
        LODWORD(v1811) = 1;
        v340 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 65, v1793, 1, v1810, 2, 0);
        *(void *)&long long v1795 = 513;
        DWORD2(v1795) = 0;
        v1810[0] = v340;
        v1810[1] = v341;
        LODWORD(v1810[2]) = 1;
        *(void *)&long long v1783 = 513;
        DWORD2(v1783) = 0;
        uint64_t v342 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x40);
        BOOL v344 = *(llvm::ConstantInt **)v342;
        unsigned int v345 = *(_DWORD *)(v342 + 8);
        LODWORD(v1793[1]) = v345 >> 8;
        if (v345 >> 8 > 0x40) {
          operator new[]();
        }
        if (v345 <= 0xFF) {
          LOBYTE(v346) = 0;
        }
        else {
          unint64_t v346 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v345) + 63);
        }
        v1793[0] = (void *)(v346 & 0x20);
        v347 = llvm::ConstantInt::get(v344, (llvm::LLVMContext *)v1793, v343);
        if (LODWORD(v1793[1]) >= 0x41 && v1793[0]) {
          MEMORY[0x1D25D9CB0](v1793[0], 0x1000C8000313F17);
        }
        uint64_t v348 = v1775;
        v1810[3] = (void *)((uint64_t (*)(llvm::IntegerType *****, long long *, void *))(*v1775)[2])(v1775, &v1783, v347);
        v1810[4] = v349;
        LODWORD(v1811) = 1;
        v350 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*v348)[4])(v348, 128, &v1795, 1, v1810, 2, 0);
        v1793[0] = (void *)129;
        LODWORD(v1793[1]) = 0;
        v1810[0] = v350;
        v1810[1] = v351;
        LODWORD(v1810[2]) = 1;
        ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v348)[4])(v348, 119, v1793, 1, v1810, 1, 0);
        v1793[0] = (void *)257;
        LODWORD(v1793[1]) = 0;
        LODWORD(v1810[0]) = *(_DWORD *)(*(void *)(v352 + 32) + 4);
        LODWORD(v1810[2]) = 0;
        LODWORD(v1810[3]) = v324;
        LODWORD(v1811) = 0;
        ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v348)[4])(v348, 76, v1793, 1, v1810, 2, 0);
        v1793[0] = (void *)513;
        LODWORD(v1793[1]) = 0;
        LODWORD(v1810[0]) = v331;
        LODWORD(v1810[2]) = 0;
        LODWORD(v1810[3]) = *(_DWORD *)(*(void *)(v353 + 32) + 4);
        LODWORD(v1811) = 0;
        ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v348)[4])(v348, 76, v1793, 1, v1810, 2, 0);
        if (LODWORD(v1798[1]) >= HIDWORD(v1798[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v1798[0] + LODWORD(v1798[1])) = *(_DWORD *)(*(void *)(v354 + 32) + 4);
        unsigned int v355 = ++LODWORD(v1798[1]);
        if (v1758 == 2172)
        {
          uint64_t v356 = *((void *)v1774 + 4);
          int v357 = *(_DWORD *)(v356 + 228);
          int v358 = *(_DWORD *)(v356 + 260);
          v1793[0] = (void *)513;
          LODWORD(v1793[1]) = 0;
          LODWORD(v1810[0]) = v325;
          LODWORD(v1810[2]) = 0;
          LODWORD(v1810[3]) = v357;
          LODWORD(v1811) = 0;
          ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 76, v1793, 1, v1810, 2, 0);
          if (LODWORD(v1798[1]) >= HIDWORD(v1798[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v1798[0] + LODWORD(v1798[1])) = *(_DWORD *)(*(void *)(v359 + 32) + 4);
          unsigned int v360 = HIDWORD(v1798[1]);
          unsigned int v355 = ++LODWORD(v1798[1]);
          int v325 = v358;
        }
        else
        {
          unsigned int v360 = HIDWORD(v1798[1]);
        }
        if (v355 >= v360) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v1798[0] + v355) = v325;
        BOOL v523 = __CFADD__(LODWORD(v1798[1])++, 1);
        if (!v523)
        {
          unint64_t v665 = 0;
          uint64_t v666 = 4;
          do
          {
            LODWORD(v1793[0]) = *(_DWORD *)(*((void *)v1774 + 4) + v666);
            LODWORD(v1793[1]) = 1;
            LODWORD(v1810[0]) = *((_DWORD *)v1798[0] + v665);
            LODWORD(v1810[2]) = 0;
            ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 19, v1793, 1, v1810, 1, 0);
            ++v665;
            v666 += 32;
          }
          while (v665 < LODWORD(v1798[1]));
        }
        llvm::MachineInstr::eraseFromParent(v1774);
        if ((long long *)v1798[0] != &v1799) {
          free(v1798[0]);
        }
        return 1;
      case 2177:
      case 2178:
      case 2179:
      case 2180:
      case 2181:
      case 2182:
      case 2183:
      case 2184:
      case 2185:
      case 2186:
      case 2187:
      case 2188:
      case 2189:
      case 2190:
      case 2191:
      case 2192:
      case 2193:
      case 2194:
      case 2195:
      case 2196:
      case 2197:
      case 2198:
      case 2199:
      case 2200:
      case 2201:
      case 2202:
      case 2203:
      case 2204:
      case 2205:
      case 2206:
      case 2207:
      case 2208:
      case 2209:
      case 2210:
      case 2211:
      case 2212:
      case 2213:
      case 2214:
      case 2215:
      case 2216:
      case 2217:
      case 2218:
      case 2219:
      case 2220:
      case 2221:
      case 2222:
      case 2223:
      case 2224:
      case 2225:
      case 2226:
      case 2227:
      case 2228:
      case 2229:
      case 2230:
      case 2231:
      case 2232:
      case 2233:
      case 2234:
      case 2235:
      case 2236:
      case 2237:
      case 2238:
      case 2239:
      case 2240:
      case 2241:
      case 2242:
      case 2243:
      case 2244:
      case 2245:
      case 2246:
      case 2247:
      case 2248:
      case 2249:
      case 2250:
      case 2251:
      case 2252:
      case 2253:
      case 2254:
      case 2255:
      case 2256:
      case 2257:
      case 2258:
      case 2259:
      case 2260:
      case 2261:
      case 2262:
      case 2263:
      case 2264:
      case 2265:
      case 2266:
      case 2267:
      case 2268:
      case 2269:
      case 2270:
      case 2271:
      case 2272:
      case 2273:
      case 2274:
      case 2275:
      case 2276:
      case 2277:
      case 2278:
      case 2279:
      case 2280:
      case 2281:
      case 2282:
      case 2283:
      case 2284:
      case 2285:
      case 2286:
      case 2287:
      case 2288:
      case 2289:
      case 2290:
      case 2291:
      case 2292:
      case 2293:
      case 2294:
      case 2295:
      case 2296:
      case 2297:
      case 2298:
      case 2299:
      case 2300:
      case 2301:
      case 2302:
      case 2303:
      case 2304:
        uint64_t v1704 = v13;
        BYTE4(v1799) = 0;
        BYTE8(v1799) = 0;
        BYTE12(v1799) = 0;
        LOBYTE(v1800) = 0;
        BYTE4(v1800) = 0;
        LOBYTE(v1801) = 0;
        char v1802 = 0;
        LOBYTE(v1803) = 0;
        char v1804 = 0;
        v1798[0] = 0;
        v1798[1] = 0;
        LOBYTE(v1799) = 0;
        sub_1CBC83150(v16, (uint64_t)v1798, 0xFFFFFFFF);
        size_t v28 = *((void *)v1774 + 4);
        LOBYTE(v1795) = 0;
        unsigned __int8 v1797 = 0;
        uint64_t v29 = *(unsigned int *)(v28 + 32 * LODWORD(v1798[1]) + 4);
        uint64_t v1700 = HIDWORD(v1798[0]);
        uint64_t v30 = v1768;
        if ((v29 & 0x80000000) != 0) {
          uint64_t v31 = (uint64_t *)(*(void *)(v1768 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v31 = (uint64_t *)(*(void *)(v1768 + 272) + 8 * v29);
        }
        uint64_t v32 = *v31;
        uint64_t v33 = v1775;
        if (!v32) {
          goto LABEL_32;
        }
        if ((*(unsigned char *)(v32 + 3) & 1) == 0)
        {
          uint64_t v32 = *(void *)(v32 + 24);
          if (!v32 || (*(unsigned char *)(v32 + 3) & 1) == 0) {
            goto LABEL_32;
          }
        }
        uint64_t v34 = *(void *)(v32 + 8);
        if (!v34 || **(_WORD **)(v34 + 16) != 82 || *(_DWORD *)(v34 + 40) != 2) {
          goto LABEL_32;
        }
        uint64_t v1642 = *(unsigned int *)(*(void *)(v34 + 32) + 36);
        v1643 = (uint64_t *)((v1642 & 0x80000000) != 0
                          ? *(void *)(v1768 + 24) + 16 * (v1642 & 0x7FFFFFFF) + 8
                          : *(void *)(v1768 + 272) + 8 * v1642);
        uint64_t v1644 = *v1643;
        uint64_t v33 = v1775;
        uint64_t v30 = v1768;
        if (!v1644) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v1644 + 3))
        {
          uint64_t v33 = v1775;
          uint64_t v30 = v1768;
        }
        else
        {
          uint64_t v1644 = *(void *)(v1644 + 24);
          uint64_t v33 = v1775;
          uint64_t v30 = v1768;
          if (!v1644 || (*(unsigned char *)(v1644 + 3) & 1) == 0)
          {
LABEL_32:
            uint64_t v35 = v28 + 32 * LODWORD(v1798[1]);
            if ((v29 & 0x80000000) != 0) {
              uint64_t v36 = (uint64_t *)(*(void *)(v30 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v36 = (uint64_t *)(*(void *)(v30 + 272) + 8 * v29);
            }
            uint64_t v37 = *v36;
            if (!v37)
            {
LABEL_38:
              LOBYTE(v1783) = 0;
              char v1785 = 0;
              size_t v1722 = v28;
              unint64_t v39 = *(unsigned int *)(v28 + 32 * HIDWORD(v1798[1]) + 4);
              if ((v39 & 0x80000000) != 0) {
                unint64_t v40 = (uint64_t *)(*(void *)(v30 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
              }
              else {
                unint64_t v40 = (uint64_t *)(*(void *)(v30 + 272) + 8 * v39);
              }
              uint64_t v41 = *v40;
              if (v41)
              {
                if ((*(unsigned char *)(v41 + 3) & 1) == 0)
                {
                  uint64_t v41 = *(void *)(v41 + 24);
                  if (!v41)
                  {
                    uint64_t v33 = v1775;
                    uint64_t v30 = v1768;
                    goto LABEL_46;
                  }
                  uint64_t v33 = v1775;
                  uint64_t v30 = v1768;
                  if ((*(unsigned char *)(v41 + 3) & 1) == 0) {
                    goto LABEL_46;
                  }
                }
                uint64_t v42 = *(void *)(v41 + 8);
                if (v42 && **(_WORD **)(v42 + 16) == 81 && *(_DWORD *)(v42 + 40) == 2) {
                  unint64_t v39 = *(unsigned int *)(*(void *)(v42 + 32) + 36);
                }
              }
LABEL_46:
              sub_1CC73C210(v39, v30, (uint64_t)v1810);
              uint64_t v1715 = (uint64_t)v9;
              int v1731 = v11;
              if (LOBYTE(v1810[2]))
              {
                if (LODWORD(v1810[1]) >= 0x41)
                {
                  if (v1810[0]) {
                    MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
                  }
                  uint64_t v30 = v1768;
                }
                else if ((uint64_t)v1810[0] << -LOBYTE(v1810[1]) < 0)
                {
                  int v94 = 0;
                  int v57 = 0;
                  char v95 = 1;
                  uint64_t v96 = (long long *)v35;
                  goto LABEL_1329;
                }
              }
              if (v39 >> 31) {
                int v43 = (uint64_t *)(*(void *)(v30 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
              }
              else {
                int v43 = (uint64_t *)(*(void *)(v30 + 272) + 8 * v39);
              }
              uint64_t v44 = *v43;
              if ((*(unsigned char *)(v44 + 3) & 1) == 0) {
                uint64_t v44 = *(void *)(v44 + 24);
              }
              uint64_t v45 = *(void *)(*(void *)(v44 + 8) + 32);
              long long v46 = *(_OWORD *)(v35 + 16);
              long long v1795 = *(_OWORD *)v35;
              long long v1796 = v46;
              unsigned __int8 v1797 = 1;
              unint64_t v47 = *(unsigned int *)(v45 + 4);
              if ((v47 & 0x80000000) != 0) {
                unsigned int v48 = (uint64_t *)(*(void *)(v30 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
              }
              else {
                unsigned int v48 = (uint64_t *)(*(void *)(v30 + 272) + 8 * v47);
              }
              uint64_t v49 = *v48;
              if (v49)
              {
                if ((*(unsigned char *)(v49 + 3) & 1) == 0)
                {
                  uint64_t v49 = *(void *)(v49 + 24);
                  if (!v49)
                  {
                    uint64_t v30 = v1768;
                    goto LABEL_61;
                  }
                  uint64_t v30 = v1768;
                  if ((*(unsigned char *)(v49 + 3) & 1) == 0) {
                    goto LABEL_61;
                  }
                }
                uint64_t v50 = *(void *)(v49 + 8);
                if (v50 && **(_WORD **)(v50 + 16) == 126 && *(_DWORD *)(v50 + 40) == 2) {
                  unint64_t v47 = *(unsigned int *)(*(void *)(v50 + 32) + 36);
                }
              }
LABEL_61:
              if (v47 >> 31) {
                uint64_t v51 = (uint64_t *)(*(void *)(v30 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v51 = (uint64_t *)(*(void *)(v30 + 272) + 8 * v47);
              }
              uint64_t v52 = *v51;
              if (v52)
              {
                if ((*(unsigned char *)(v52 + 3) & 1) == 0)
                {
                  uint64_t v52 = *(void *)(v52 + 24);
                  if (!v52)
                  {
                    uint64_t v30 = v1768;
                    goto LABEL_69;
                  }
                  uint64_t v30 = v1768;
                  if ((*(unsigned char *)(v52 + 3) & 1) == 0) {
                    goto LABEL_69;
                  }
                }
                uint64_t v53 = *(void *)(v52 + 8);
                if (v53 && **(_WORD **)(v53 + 16) == 82 && *(_DWORD *)(v53 + 40) == 2) {
                  unint64_t v47 = *(unsigned int *)(*(void *)(v53 + 32) + 36);
                }
              }
LABEL_69:
              if ((v47 & 0x80000000) != 0) {
                int v54 = (uint64_t *)(*(void *)(v30 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
              }
              else {
                int v54 = (uint64_t *)(*(void *)(v30 + 272) + 8 * v47);
              }
              uint64_t v55 = *v54;
              if (v55)
              {
                if (*(unsigned char *)(v55 + 3))
                {
LABEL_73:
                  uint64_t v56 = *(void *)(v55 + 8);
                  goto LABEL_74;
                }
                uint64_t v55 = *(void *)(v55 + 24);
                if (!v55)
                {
                  uint64_t v56 = 0;
                  uint64_t v30 = v1768;
LABEL_74:
                  sub_1CC73C210(v47, v30, (uint64_t)v1810);
                  if (LOBYTE(v1810[2]))
                  {
                    if (LODWORD(v1810[1]) >= 0x41)
                    {
                      if (v1810[0]) {
                        MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
                      }
                      int v57 = 0;
                      int v58 = 1;
                      uint64_t v30 = v1768;
                      if ((v47 & 0x80000000) == 0) {
                        goto LABEL_1316;
                      }
                    }
                    else
                    {
                      int64_t v83 = (uint64_t)v1810[0] << -(uint64_t)LODWORD(v1810[1]) >> -(uint64_t)LODWORD(v1810[1]);
                      int v58 = 1;
                      if (v83 < 0x10000)
                      {
                        v1810[0] = (void *)129;
                        LODWORD(v1810[1]) = 0;
                        int v90 = (llvm::ConstantInt *)llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x10);
                        uint64_t v91 = llvm::ConstantInt::get(v90, v83, (const llvm::APInt *)1);
                        ((void (*)(llvm::IntegerType *****, void **, void *))(*v1775)[2])(v1775, v1810, v91);
                        LODWORD(v47) = *(_DWORD *)(*(void *)(v92 + 32) + 4);
                        LODWORD(v1783) = 0;
                        DWORD1(v1783) = v47;
                        long long v1784 = 0uLL;
                        *((void *)&v1783 + 1) = 0;
                        char v1785 = 1;
                        int v57 = 1;
                        int v58 = 0;
                        if ((v47 & 0x80000000) == 0) {
                          goto LABEL_1316;
                        }
                      }
                      else
                      {
                        int v57 = 0;
                        if ((v47 & 0x80000000) == 0) {
                          goto LABEL_1316;
                        }
                      }
                    }
                  }
                  else
                  {
                    int v57 = 0;
                    int v58 = 1;
                    if ((v47 & 0x80000000) == 0) {
                      goto LABEL_1316;
                    }
                  }
                  if ((v47 & 0x7FFFFFFF) < *(_DWORD *)(v30 + 432))
                  {
                    int v93 = *(void **)(*(void *)(v30 + 424) + 8 * (v47 & 0x7FFFFFFF));
                    goto LABEL_1317;
                  }
LABEL_1316:
                  int v93 = 0;
LABEL_1317:
                  v1791[0] = v93;
                  unint64_t v1289 = sub_1CB8F1DC4((unint64_t *)v1791);
                  if (v1288 == 1) {
                  if (v1289 <= 0x20 && ((uint64_t)v1791[0] & 1) != 0)
                  }
                  {
                    uint64_t v33 = v1775;
                    if (!v58)
                    {
LABEL_1328:
                      char v95 = 0;
                      int v94 = 1;
                      uint64_t v96 = &v1795;
LABEL_1329:
                      sub_1CBA315DC((uint64_t)&v1780, *((_DWORD *)v96 + 1), v30, 1);
                      if (v1782)
                      {
                        if (!v17 && !v1780) {
                          goto LABEL_1332;
                        }
                      }
                      else if (!v17)
                      {
LABEL_1332:
                        v1295 = (llvm::raw_ostream *)llvm::errs(v1294);
                        v1296 = (void *)*((void *)v1295 + 4);
                        if (*((void *)v1295 + 3) - (void)v1296 > 0x1EuLL)
                        {
                          BOOL v22 = 0;
                          qmemcpy(v1296, "Indirect only supported on G12\n", 31);
                          *((void *)v1295 + 4) += 31;
                          return v22;
                        }
                        llvm::raw_ostream::write(v1295, "Indirect only supported on G12\n", 0x1FuLL);
                        return 0;
                      }
                      uint64_t v1297 = *(unsigned int *)(v35 + 4);
                      if ((v1297 & 0x80000000) != 0) {
                        v1298 = (uint64_t *)(*(void *)(v30 + 24) + 16 * (v1297 & 0x7FFFFFFF) + 8);
                      }
                      else {
                        v1298 = (uint64_t *)(*(void *)(v30 + 272) + 8 * v1297);
                      }
                      uint64_t v1299 = *v1298;
                      if ((*(unsigned char *)(v1299 + 3) & 1) == 0) {
                        uint64_t v1299 = *(void *)(v1299 + 24);
                      }
                      uint64_t v1300 = *(void *)(v1299 + 8);
                      if (**(_WORD **)(v1300 + 16) == 19)
                      {
                        uint64_t v1301 = *(unsigned int *)(*(void *)(v1300 + 32) + 36);
                        if ((v1301 & 0x80000000) != 0) {
                          v1302 = (uint64_t *)(*(void *)(v30 + 24) + 16 * (v1301 & 0x7FFFFFFF) + 8);
                        }
                        else {
                          v1302 = (uint64_t *)(*(void *)(v30 + 272) + 8 * v1301);
                        }
                        uint64_t v1303 = *v1302;
                        if ((*(unsigned char *)(v1303 + 3) & 1) == 0) {
                          uint64_t v1303 = *(void *)(v1303 + 24);
                        }
                        uint64_t v35 = *(void *)(*(void *)(v1303 + 8) + 32) + 32;
                      }
                      if (v1782 && v1780)
                      {
                        v1765 = v1780;
                        unsigned int v1304 = sub_1CD1117B0(v1780, v1781, *(void *)(v1715 + 344), 0);
                        if (v95)
                        {
                          LODWORD(v1783) = 1287;
                          DWORD1(v1783) = v1304;
                          *((void *)&v1783 + 1) = 0;
                          LODWORD(v1784) = 67;
                          DWORD2(v1784) = 0;
                          if (!v57) {
                            char v1785 = 1;
                          }
                        }
                        else
                        {
                          LODWORD(v1795) = 775;
                          DWORD1(v1795) = v1304 >> 1;
                          *((void *)&v1795 + 1) = 0;
                          LODWORD(v1796) = 64;
                          DWORD2(v1796) = 0;
                        }
                        size_t v1307 = v1722;
                        goto LABEL_1365;
                      }
                      int v1305 = *(_DWORD *)(v35 + 4);
                      if (v1305 < 0 && (v1305 & 0x7FFFFFFFu) < *(_DWORD *)(v30 + 432))
                      {
                        unint64_t v1306 = *(void *)(*(void *)(v30 + 424) + 8 * (v1305 & 0x7FFFFFFF));
                        v1791[0] = (void *)v1306;
                        size_t v1307 = v1722;
                        if (v1306 & 0xFFFFFFFFFFFFFFF9) == 0 || (v1306) {
                          goto LABEL_1360;
                        }
                        unsigned int v1309 = sub_1CB8F1DC4((unint64_t *)v1791);
                        if (v1308 == 1) {
                        v1793[0] = (void *)((8 * v1309) | 1);
                        }
                        LODWORD(v1793[1]) = 0;
                        LODWORD(v1810[0]) = v1305;
                        LODWORD(v1810[2]) = 0;
                        sub_1CC7382B0((uint64_t)v33);
                        int v1305 = *(_DWORD *)(*(void *)(v1310 + 32) + 4);
                      }
                      else
                      {
                        v1791[0] = 0;
                      }
                      size_t v1307 = v1722;
LABEL_1360:
                      v1793[0] = (void *)129;
                      LODWORD(v1793[1]) = 0;
                      LODWORD(v1810[0]) = v1305;
                      LODWORD(v1810[2]) = 0;
                      sub_1CC738034(v33, 126, (unint64_t *)v1793, (int *)v1810);
                      v1312 = *(long long **)(v1311 + 32);
                      long long v1313 = v1312[1];
                      long long v1783 = *v1312;
                      long long v1784 = v1313;
                      if (!v57) {
                        char v1785 = 1;
                      }
                      v1765 = 0;
                      *((void *)&v1783 + 1) = 0;
LABEL_1365:
                      if (LODWORD(v1798[0]))
                      {
                        sub_1CC73C210(*(_DWORD *)(*((void *)v1774 + 4) + 32 * LODWORD(v1798[0]) + 4), v30, (uint64_t)v1810);
                        if (LOBYTE(v1810[2]))
                        {
                          if (LODWORD(v1810[1]) > 0x40)
                          {
                            if (v1810[0]) {
                              MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
                            }
                            int v1317 = 0;
                            int v1318 = 0;
                            uint64_t v30 = v1768;
                            size_t v1307 = v1722;
                          }
                          else
                          {
                            int v1317 = ((uint64_t)v1810[0] << -LOBYTE(v1810[1]) >> -LOBYTE(v1810[1])) & 0xFFFFFF00;
                            int v1318 = ((uint64_t)v1810[0] << -LOBYTE(v1810[1]) >> -LOBYTE(v1810[1]));
                          }
                          unsigned int v1314 = v1318 | v1317;
                        }
                        else
                        {
                          unsigned int v1314 = 0;
                        }
                        char v1316 = v1314;
                        int v1315 = (v1314 >> 1) & 0x4000;
                      }
                      else
                      {
                        int v1315 = 0;
                        char v1316 = 0;
                      }
                      unsigned int v1319 = v1805;
                      if (v1805 <= 2) {
                        int v1320 = 2;
                      }
                      else {
                        int v1320 = v1805;
                      }
                      int v1321 = v1320 - 2;
                      if (!v1807) {
                        int v1321 = v1805;
                      }
                      int v1322 = v1321 + BYTE4(v1800);
                      if (v1806 == 8) {
                        int v1323 = v1322 + 1;
                      }
                      else {
                        int v1323 = v1322;
                      }
                      int v1324 = BYTE12(v1799);
                      int v1747 = v1323 + BYTE12(v1799);
                      int v1699 = v1315;
                      char v1697 = v1316;
                      if (!v1747)
                      {
                        uint64_t v1326 = 0;
                        goto LABEL_1464;
                      }
                      if (v1808)
                      {
                        switch(v1806)
                        {
                          case 1:
                            int v1325 = 4 * (v1807 == 0);
                            break;
                          case 2:
                          case 4:
                            BOOL v1327 = v1807 == 0;
                            int v1328 = 4;
                            goto LABEL_1399;
                          case 3:
                          case 5:
                          case 6:
                            if (v1807) {
                              int v1325 = 0;
                            }
                            else {
                              int v1325 = 10;
                            }
                            break;
                          case 7:
                          case 8:
                            BOOL v1327 = v1807 == 0;
                            int v1328 = 15;
                            int v1325 = 4;
                            goto LABEL_1403;
                          default:
                            if (v1807) {
                              int v1325 = -1;
                            }
                            else {
                              int v1325 = 0;
                            }
                            break;
                        }
                      }
                      else
                      {
                        switch(v1806)
                        {
                          case 1:
                            BOOL v1327 = v1807 == 0;
                            int v1328 = 12;
                            goto LABEL_1401;
                          case 2:
                          case 4:
                            BOOL v1327 = v1807 == 0;
                            int v1328 = 17;
                            goto LABEL_1399;
                          case 3:
                          case 6:
                            BOOL v1327 = v1807 == 0;
                            int v1328 = 22;
LABEL_1401:
                            int v1325 = 2;
                            goto LABEL_1403;
                          case 5:
                          case 8:
                            BOOL v1327 = v1807 == 0;
                            int v1328 = 27;
                            int v1325 = 6;
                            goto LABEL_1403;
                          case 7:
                            BOOL v1327 = v1807 == 0;
                            int v1328 = 32;
                            int v1325 = 12;
                            goto LABEL_1403;
                          default:
                            BOOL v1327 = v1807 == 0;
                            int v1328 = 6;
LABEL_1399:
                            int v1325 = -1;
LABEL_1403:
                            if (v1327) {
                              int v1325 = v1328;
                            }
                            break;
                        }
                      }
                      if (v1747 == 1)
                      {
                        uint64_t v1329 = 4;
                        if (!BYTE4(v1800)) {
                          uint64_t v1329 = 2;
                        }
                        if (BYTE12(v1799)) {
                          uint64_t v1329 = 3;
                        }
                        uint64_t v1326 = *((void *)v1774 + 4) + 32 * LODWORD(v1798[v1329]);
                        goto LABEL_1464;
                      }
                      unsigned int v1693 = v1325;
                      unint64_t v1330 = 2 * (v1807 != 0);
                      v1793[0] = v1794;
                      v1793[1] = (void *)0x800000000;
                      if (v1805 != v1330)
                      {
                        uint64_t v1331 = *((void *)v1774 + 4);
                        v1791[0] = &v1792;
                        v1791[1] = (void *)0x400000000;
                        if (v1805 - v1330 == 1)
                        {
                          LODWORD(v1792) = *(_DWORD *)(v1331 + 32 * v1799 + 4);
                          LODWORD(v1791[1]) = 1;
                        }
                        else
                        {
                          if ((sub_1CBA5B01C(*(_DWORD *)(v1331 + 32 * v1799 + 4), v30, (uint64_t)v1775, (uint64_t)v1791) & 1) == 0)
                          {
                            if (v1791[0] != &v1792) {
                              free(v1791[0]);
                            }
                            uint64_t v1326 = 0;
                            char v1332 = 0;
LABEL_1461:
                            if (v1793[0] != v1794) {
                              free(v1793[0]);
                            }
                            if (v1332)
                            {
LABEL_1464:
                              LODWORD(v1793[0]) = 1;
                              v1793[1] = 0;
                              *(void *)&v1794[0] = 0;
                              uint64_t v1694 = v1326;
                              if (v1802)
                              {
                                v1362 = (_OWORD *)(*((void *)v1774 + 4) + 32 * v1801);
                                long long v1363 = v1362[1];
                                *(_OWORD *)v1793 = *v1362;
                                v1794[0] = v1363;
                                sub_1CC73C210(HIDWORD(v1793[0]), v30, (uint64_t)v1810);
                                if (LOBYTE(v1810[2]))
                                {
                                  if (LODWORD(v1810[1]) >= 0x41)
                                  {
                                    if (v1810[0]) {
                                      MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
                                    }
                                    unsigned int v1714 = 2;
                                    uint64_t v30 = v1768;
                                    size_t v1307 = v1722;
                                  }
                                  else
                                  {
                                    LODWORD(v1793[0]) = 1;
                                    unsigned int v1714 = (uint64_t)v1810[0] << -LOBYTE(v1810[1]) >> -LOBYTE(v1810[1]) != 0;
                                    v1793[1] = 0;
                                    *(void *)&v1794[0] = (uint64_t)v1810[0] << -LOBYTE(v1810[1]) >> -LOBYTE(v1810[1]);
                                  }
                                }
                                else
                                {
                                  unsigned int v1714 = 2;
                                }
                              }
                              else
                              {
                                unsigned int v1714 = 0;
                              }
                              LODWORD(v1791[0]) = 1;
                              size_t v1364 = v1307 + 32 * v1700;
                              v1791[1] = 0;
                              *(void *)&long long v1792 = 0;
                              unsigned int v1366 = *(_DWORD *)(v1364 + 4);
                              v1365 = (_DWORD *)(v1364 + 4);
                              sub_1CC73C210(v1366, v30, (uint64_t)v1810);
                              if (LOBYTE(v1810[2]))
                              {
                                if (LODWORD(v1810[1]) >= 0x41)
                                {
                                  if (v1810[0]) {
                                    MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
                                  }
                                  uint64_t v30 = v1768;
                                  size_t v1307 = v1722;
                                  if (!v1804) {
                                    goto LABEL_1472;
                                  }
                                }
                                else if (!v1804)
                                {
                                  unsigned int v1369 = 0;
                                  LODWORD(v1791[0]) = 1;
                                  v1791[1] = 0;
                                  *(void *)&long long v1792 = (uint64_t)v1810[0] << -(uint64_t)LODWORD(v1810[1]) >> -(uint64_t)LODWORD(v1810[1]);
                                  goto LABEL_1502;
                                }
                              }
                              else if (!v1804)
                              {
LABEL_1472:
                                v1367 = (_OWORD *)(v1307 + 32 * v1700);
                                long long v1368 = v1367[1];
                                *(_OWORD *)v1791 = *v1367;
                                long long v1792 = v1368;
                                unsigned int v1369 = 1;
LABEL_1502:
                                uint64_t v1450 = (uint64_t)v1765;
                                goto LABEL_1503;
                              }
                              uint64_t v1370 = v1803;
                              size_t v1371 = *((void *)v1774 + 4);
                              uint64_t v1788 = 129;
                              int v1789 = 0;
                              uint64_t v1372 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x10);
                              v1374 = *(llvm::ConstantInt **)v1372;
                              unsigned int v1375 = *(_DWORD *)(v1372 + 8);
                              LODWORD(v1810[1]) = v1375 >> 8;
                              int v1703 = v1370;
                              if (v1375 >> 8 > 0x40) {
                                operator new[]();
                              }
                              if (v1375 <= 0xFF) {
                                LOBYTE(v1376) = 0;
                              }
                              else {
                                unint64_t v1376 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1375) + 63);
                              }
                              v1810[0] = (void *)(v1376 & 8);
                              v1690 = v12;
                              v1377 = llvm::ConstantInt::get(v1374, (llvm::LLVMContext *)v1810, v1373);
                              if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
                                MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
                              }
                              v1378 = v1775;
                              v1379 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*v1775)[2])(v1775, &v1788, v1377);
                              v1381 = v1380;
                              uint64_t v1788 = 129;
                              int v1789 = 0;
                              size_t v1727 = v1371;
                              size_t v1382 = v1371 + 32 * v1370;
                              LODWORD(v1810[0]) = *(_DWORD *)(v1382 + 4);
                              LODWORD(v1810[2]) = 0;
                              v1810[3] = v1379;
                              v1810[4] = v1380;
                              LODWORD(v1811) = 1;
                              v1383 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*v1378)[4])(v1378, 127, &v1788, 1, v1810, 2, 0);
                              uint64_t v1788 = 129;
                              int v1789 = 0;
                              v1810[0] = v1383;
                              v1810[1] = v1384;
                              LODWORD(v1810[2]) = 1;
                              LODWORD(v1810[3]) = *v1365;
                              LODWORD(v1811) = 0;
                              ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*v1378)[4])(v1378, 66, &v1788, 1, v1810, 2, 0);
                              uint64_t v1686 = v1385;
                              uint64_t v1788 = 129;
                              int v1789 = 0;
                              LODWORD(v1810[0]) = *(_DWORD *)(v1382 + 4);
                              LODWORD(v1810[2]) = 0;
                              v1810[3] = v1379;
                              v1810[4] = v1381;
                              LODWORD(v1811) = 1;
                              uint64_t v1386 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*v1378)[4])(v1378, 128, &v1788, 1, v1810, 2, 0);
                              v1683 = v1387;
                              v1684 = (void *)v1386;
                              uint64_t v1788 = 129;
                              int v1789 = 0;
                              uint64_t v1388 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x10);
                              v1390 = *(llvm::ConstantInt **)v1388;
                              unsigned int v1391 = *(_DWORD *)(v1388 + 8);
                              LODWORD(v1810[1]) = v1391 >> 8;
                              if (v1391 >> 8 > 0x40) {
                                operator new[]();
                              }
                              if (v1391 <= 0xFF) {
                                LOBYTE(v1392) = 0;
                              }
                              else {
                                unint64_t v1392 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1391) + 63);
                              }
                              v1810[0] = (void *)(v1392 & 2);
                              uint64_t v1393 = (v1370 + 1);
                              v1394 = llvm::ConstantInt::get(v1390, (llvm::LLVMContext *)v1810, v1389);
                              if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
                                MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
                              }
                              v1395 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*v1775)[2])(v1775, &v1788, v1394);
                              uint64_t v1788 = 129;
                              int v1789 = 0;
                              LODWORD(v1810[0]) = *(_DWORD *)(v1371 + 32 * (v1370 + 2) + 4);
                              LODWORD(v1810[2]) = 0;
                              v1810[3] = v1395;
                              v1810[4] = v1396;
                              LODWORD(v1811) = 1;
                              v1397 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 127, &v1788, 1, v1810, 2, 0);
                              v1399 = v1398;
                              uint64_t v1788 = 129;
                              int v1789 = 0;
                              uint64_t v1400 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x10);
                              v1402 = *(llvm::ConstantInt **)v1400;
                              unsigned int v1403 = *(_DWORD *)(v1400 + 8);
                              LODWORD(v1810[1]) = v1403 >> 8;
                              if (v1403 >> 8 > 0x40) {
                                operator new[]();
                              }
                              if (v1403 <= 0xFF) {
                                LOBYTE(v1404) = 0;
                              }
                              else {
                                unint64_t v1404 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1403) + 63);
                              }
                              v1810[0] = (void *)(v1404 & 0xC);
                              v1405 = llvm::ConstantInt::get(v1402, (llvm::LLVMContext *)v1810, v1401);
                              if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
                                MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
                              }
                              v1406 = v1775;
                              v1407 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*v1775)[2])(v1775, &v1788, v1405);
                              uint64_t v1788 = 129;
                              int v1789 = 0;
                              size_t v1408 = v1371 + 32 * v1393;
                              int v1410 = *(_DWORD *)(v1408 + 4);
                              v1409 = (_DWORD *)(v1408 + 4);
                              LODWORD(v1810[0]) = v1410;
                              LODWORD(v1810[2]) = 0;
                              v1810[3] = v1407;
                              v1810[4] = v1411;
                              LODWORD(v1811) = 1;
                              v1412 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*v1406)[4])(v1406, 127, &v1788, 1, v1810, 2, 0);
                              v1414 = v1413;
                              uint64_t v1788 = 129;
                              int v1789 = 0;
                              v1810[0] = v1684;
                              v1810[1] = v1683;
                              LODWORD(v1810[2]) = 1;
                              v1810[3] = v1397;
                              v1810[4] = v1399;
                              LODWORD(v1811) = 1;
                              v1415 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*v1406)[4])(v1406, 66, &v1788, 1, v1810, 2, 0);
                              uint64_t v1788 = 129;
                              int v1789 = 0;
                              v1810[0] = v1415;
                              v1810[1] = v1416;
                              LODWORD(v1810[2]) = 1;
                              v1810[3] = v1412;
                              v1810[4] = v1414;
                              LODWORD(v1811) = 1;
                              ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*v1406)[4])(v1406, 66, &v1788, 1, v1810, 2, 0);
                              uint64_t v1418 = v1417;
                              uint64_t v1788 = 129;
                              int v1789 = 0;
                              uint64_t v1419 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x10);
                              v1421 = *(llvm::ConstantInt **)v1419;
                              unsigned int v1422 = *(_DWORD *)(v1419 + 8);
                              LODWORD(v1810[1]) = v1422 >> 8;
                              if (v1422 >> 8 > 0x40) {
                                operator new[]();
                              }
                              if (v1422 <= 0xFF) {
                                LOBYTE(v1423) = 0;
                              }
                              else {
                                unint64_t v1423 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1422) + 63);
                              }
                              v1810[0] = (void *)(v1423 & 4);
                              v1424 = llvm::ConstantInt::get(v1421, (llvm::LLVMContext *)v1810, v1420);
                              if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
                                MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
                              }
                              v1425 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*v1775)[2])(v1775, &v1788, v1424);
                              uint64_t v1788 = 129;
                              int v1789 = 0;
                              LODWORD(v1810[0]) = *v1409;
                              LODWORD(v1810[2]) = 0;
                              v1810[3] = v1425;
                              v1810[4] = v1426;
                              LODWORD(v1811) = 1;
                              v1427 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 128, &v1788, 1, v1810, 2, 0);
                              v1429 = v1428;
                              uint64_t v1788 = 129;
                              int v1789 = 0;
                              uint64_t v1430 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x10);
                              v1432 = *(llvm::ConstantInt **)v1430;
                              unsigned int v1433 = *(_DWORD *)(v1430 + 8);
                              LODWORD(v1810[1]) = v1433 >> 8;
                              if (v1433 >> 8 > 0x40) {
                                operator new[]();
                              }
                              if (v1433 <= 0xFF) {
                                LOBYTE(v1434) = 0;
                              }
                              else {
                                unint64_t v1434 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1433) + 63);
                              }
                              v1810[0] = (void *)(v1434 & 6);
                              v1435 = llvm::ConstantInt::get(v1432, (llvm::LLVMContext *)v1810, v1431);
                              if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
                                MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
                              }
                              v1436 = v1775;
                              v1437 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*v1775)[2])(v1775, &v1788, v1435);
                              uint64_t v1788 = 129;
                              int v1789 = 0;
                              LODWORD(v1810[0]) = *(_DWORD *)(v1727 + 32 * (v1703 + 3) + 4);
                              LODWORD(v1810[2]) = 0;
                              v1810[3] = v1437;
                              v1810[4] = v1438;
                              LODWORD(v1811) = 1;
                              v1439 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*v1436)[4])(v1436, 127, &v1788, 1, v1810, 2, 0);
                              uint64_t v1788 = 129;
                              int v1789 = 0;
                              v1810[0] = v1427;
                              v1810[1] = v1429;
                              LODWORD(v1810[2]) = 1;
                              v1810[3] = v1439;
                              v1810[4] = v1440;
                              LODWORD(v1811) = 1;
                              ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*v1436)[4])(v1436, 66, &v1788, 1, v1810, 2, 0);
                              uint64_t v1441 = 0;
                              uint64_t v1788 = 8388636;
                              v1442 = *(unsigned __int8 **)(v1690[30] + 80);
                              int v1789 = 0;
                              int v1443 = *(_DWORD *)(*(void *)(v1418 + 32) + 4);
                              v1787[0] = *(_DWORD *)(*(void *)(v1686 + 32) + 4);
                              v1787[1] = v1443;
                              v1787[2] = *(_DWORD *)(*(void *)(v1444 + 32) + 4);
                              v1810[0] = &v1810[2];
                              v1810[1] = (void *)0x800000000;
                              uint64_t v1445 = 2;
                              do
                              {
                                v1446 = &v1810[v1445];
                                *(_DWORD *)v1446 = v1787[v1441];
                                *((_DWORD *)v1446 + 4) = 0;
                                v1445 += 3;
                                ++v1441;
                              }
                              while (v1441 != 3);
                              LODWORD(v1810[1]) += 3;
                              v1447 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **))(*v1775)[4])(v1775, 77, &v1788, 1, &v1810[2]);
                              v1449 = v1448;
                              uint64_t v1450 = (uint64_t)v1765;
                              if (v1810[0] != &v1810[2]) {
                                free(v1810[0]);
                              }
                              uint64_t v1788 = (uint64_t)v1442;
                              unsigned int v1369 = 2;
                              int v1789 = 2;
                              v1810[0] = v1447;
                              v1810[1] = v1449;
                              LODWORD(v1810[2]) = 1;
                              ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 19, &v1788, 1, v1810, 1, 0);
                              v1452 = *(_OWORD **)(v1451 + 32);
                              long long v1453 = v1452[1];
                              *(_OWORD *)v1791 = *v1452;
                              long long v1792 = v1453;
                              int v94 = v1797;
                              uint64_t v30 = v1768;
LABEL_1503:
                              if (!v1450 || v94)
                              {
                                if (v94)
                                {
                                  if ((DWORD1(v1783) & 0x80000000) != 0
                                    && (uint64_t v1455 = DWORD1(v1783) & 0x7FFFFFFF, v1455 < *(_DWORD *)(v30 + 432)))
                                  {
                                    v1456 = *(void **)(*(void *)(v30 + 424) + 8 * v1455);
                                  }
                                  else
                                  {
                                    v1456 = 0;
                                  }
                                  v1810[0] = v1456;
                                  uint64_t v1458 = sub_1CB8F1DC4((unint64_t *)v1810);
                                  if (v1457 == 1) {
                                  uint64_t v1454 = 2;
                                  }
                                  if (v1458 != 16) {
                                    uint64_t v1454 = 3;
                                  }
                                }
                                else
                                {
                                  uint64_t v1454 = 1;
                                }
                              }
                              else
                              {
                                uint64_t v1454 = 0;
                              }
                              v1459 = &unk_1CDE157C0;
                              int v1728 = v17;
                              if (v17) {
                                v1459 = &unk_1CDE15808;
                              }
                              unsigned int v1460 = v1459[18 * v1454 + 6 * v1369 + 3 * (v1747 != 0) + v1714];
                              if (v1807) {
                                int v1461 = ((v1697 & 0xF) << 9) | v1699 | (2 * (v1714 < 2)) | (4 * v1369) | (32 * (v1806 & 0xF)) | (16 * v1808);
                              }
                              else {
                                int v1461 = (((v1697 & 0xF) << 9) | v1699 | (2 * (v1714 < 2)) | (4 * v1369) | (32 * (v1806 & 0xF)) | (16 * v1808))
                              }
                                      + 1;
                              int v1462 = v1809;
                              BOOL v1463 = *((unsigned char *)v10 + 1732) == 0;
                              if (*((unsigned char *)v10 + 1646)) {
                                LODWORD(v1464) = 3;
                              }
                              else {
                                LODWORD(v1464) = 1;
                              }
                              uint64_t v1465 = *(void *)v1715;
                              LODWORD(v1810[0]) = 0;
                              if (sub_1CBA864D8(v1731, v1465, "ImageWriteBlockCacheCtl", (int *)v1810)) {
                                uint64_t v1464 = LODWORD(v1810[0]);
                              }
                              else {
                                uint64_t v1464 = v1464;
                              }
                              uint64_t v1466 = *(void *)v1715;
                              LODWORD(v1810[0]) = 0;
                              int v1467 = sub_1CBA864D8(v1731, v1466, "ImageWriteBlockL2Pers", (int *)v1810);
                              unsigned int v1468 = v1810[0];
                              if (!v1467) {
                                unsigned int v1468 = v1463;
                              }
                              uint64_t v1469 = 4 * v1468;
                              if (v1464 == 3) {
                                uint64_t v1470 = 4;
                              }
                              else {
                                uint64_t v1470 = v1469;
                              }
                              v1471 = (llvm::MachineFunction *)v1775[1];
                              uint64_t v1472 = (uint64_t)&v1775[2][1][6 * v1460];
                              v1473 = (unsigned __int8 *)v1775[4];
                              uint64_t v1788 = (uint64_t)v1473;
                              if (v1473) {
                                llvm::MetadataTracking::track((uint64_t)&v1788, v1473, 2);
                              }
                              uint64_t v1474 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v1471, v1472, (unsigned __int8 **)&v1788, 0);
                              if (!v1788) {
                                goto LABEL_1536;
                              }
                              int v1652 = *(unsigned __int8 *)v1788;
                              if ((v1652 - 4) > 0x1E)
                              {
                                if ((v1652 - 3) >= 0xFFFFFFFE) {
                                  uint64_t v1662 = v1788;
                                }
                                else {
                                  uint64_t v1662 = 0;
                                }
                                if ((v1652 - 3) < 0xFFFFFFFE)
                                {
                                  uint64_t v30 = v1768;
                                  if (v1652 == 3) {
                                    *(void *)(v1788 + 8) = 0;
                                  }
                                  goto LABEL_1536;
                                }
                                unint64_t v1654 = v1662 + 8;
                              }
                              else
                              {
                                uint64_t v30 = v1768;
                                if ((*(unsigned char *)(v1788 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1788 + 12)) {
                                  goto LABEL_1536;
                                }
                                uint64_t v1653 = *(void *)(v1788 + 16);
                                if ((v1653 & 4) == 0) {
                                  goto LABEL_1536;
                                }
                                unint64_t v1654 = v1653 & 0xFFFFFFFFFFFFFFF8;
                                if (!v1654) {
                                  goto LABEL_1536;
                                }
                              }
                              v1810[0] = &v1788;
                              sub_1CC5FA668(v1654 + 16, v1810);
                              uint64_t v30 = v1768;
LABEL_1536:
                              v1475 = (void *)(v1461 | (v1462 << 16));
                              v1476 = (uint64_t *)v1775[6];
                              v1477 = v1775[5][5];
                              *(void *)(v1474 + 24) = v1477;
                              v1478 = v1477[4];
                              uint64_t v1479 = *(unsigned int *)(v1474 + 40);
                              if (v1479)
                              {
                                uint64_t v1506 = *(void *)(v1474 + 32);
                                v1507 = v1478[5];
                                uint64_t v1508 = 32 * v1479;
                                do
                                {
                                  if (!*(unsigned char *)v1506)
                                  {
                                    uint64_t v1509 = *(unsigned int *)(v1506 + 4);
                                    if ((int)v1509 >= 0) {
                                      v1510 = (uint64_t *)(*((void *)v1507 + 34) + 8 * v1509);
                                    }
                                    else {
                                      v1510 = (uint64_t *)(*((void *)v1507 + 3) + 16 * (v1509 & 0x7FFFFFFF) + 8);
                                    }
                                    uint64_t v1511 = *v1510;
                                    if (*v1510)
                                    {
                                      uint64_t v1512 = *(void *)(v1511 + 16);
                                      *(void *)(v1511 + 16) = v1506;
                                      *(void *)(v1506 + 16) = v1512;
                                      if (*(unsigned char *)(v1506 + 3))
                                      {
                                        *(void *)(v1506 + 24) = v1511;
                                      }
                                      else
                                      {
                                        *(void *)(v1506 + 24) = 0;
                                        v1510 = (uint64_t *)(v1512 + 24);
                                      }
                                    }
                                    else
                                    {
                                      *(void *)(v1506 + 16) = v1506;
                                      *(void *)(v1506 + 24) = 0;
                                    }
                                    uint64_t *v1510 = v1506;
                                  }
                                  v1506 += 32;
                                  v1508 -= 32;
                                }
                                while (v1508);
                              }
                              v1480 = v1478[91];
                              if (v1480) {
                                (*(void (**)(llvm::IntegerType *, uint64_t))(*(void *)v1480 + 24))(v1480, v1474);
                              }
                              v1481 = (void *)(v1470 | v1464);
                              unint64_t v1482 = *v1476 & 0xFFFFFFFFFFFFFFF8;
                              *(void *)uint64_t v1474 = v1482 | *(void *)v1474 & 7;
                              *(void *)(v1474 + 8) = v1476;
                              *(void *)(v1482 + 8) = v1474;
                              uint64_t *v1476 = *v1476 & 7 | v1474;
                              v1483 = v1775[7];
                              if (v1483) {
                                ((void (*)(llvm::IntegerType ****, uint64_t))(*v1483)[3])(v1483, v1474);
                              }
                              LODWORD(v1810[0]) = 1;
                              v1810[1] = 0;
                              v1810[2] = v1475;
                              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1474, v1471, (const llvm::MachineOperand *)v1810);
                              LODWORD(v1810[0]) = 1;
                              v1810[1] = 0;
                              v1810[2] = v1481;
                              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1474, v1471, (const llvm::MachineOperand *)v1810);
                              if (LOBYTE(v1791[0]))
                              {
                                v1484 = v1791;
                              }
                              else
                              {
                                memset(&v1810[1], 0, 24);
                                HIDWORD(v1810[0]) = HIDWORD(v1791[0]);
                                LODWORD(v1810[0]) = 0;
                                v1484 = v1810;
                              }
                              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1474, v1471, (const llvm::MachineOperand *)v1484);
                              if (v94)
                              {
                                if ((_BYTE)v1795)
                                {
                                  v1485 = (void **)&v1795;
                                }
                                else
                                {
                                  memset(&v1810[1], 0, 24);
                                  HIDWORD(v1810[0]) = DWORD1(v1795);
                                  LODWORD(v1810[0]) = 0;
                                  v1485 = v1810;
                                }
                                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1474, v1471, (const llvm::MachineOperand *)v1485);
                              }
                              if ((_BYTE)v1783)
                              {
                                v1486 = (void **)&v1783;
                              }
                              else
                              {
                                memset(&v1810[1], 0, 24);
                                HIDWORD(v1810[0]) = DWORD1(v1783);
                                LODWORD(v1810[0]) = 0;
                                v1486 = v1810;
                              }
                              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1474, v1471, (const llvm::MachineOperand *)v1486);
                              uint64_t v1487 = (*(_DWORD *)(v1474 + 40) - 1);
                              uint64_t v1488 = *(void *)(v1474 + 32);
                              v1489 = (unsigned char *)(v1488 + 32 * v1487);
                              if (!*v1489)
                              {
                                uint64_t v1490 = *(void *)(v1715 + 16);
                                (*(void (**)(llvm::ConstantFP *, uint64_t))(*(void *)v1751 + 32))(v1751, v1474);
                                v1491 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v1490 + 176))(v1490);
                                uint64_t v1492 = (*(uint64_t (**)(uint64_t))(*(void *)v1490 + 104))(v1490);
                                unsigned int v1493 = sub_1CC73B398(v1715, v1491, (void *)v30, v1492, v1704, v1474, *(void *)(v1474 + 16), (uint64_t)v1489, v1487);
                                llvm::MachineOperand::setReg((uint64_t)v1489, v1493);
                                (*(void (**)(llvm::ConstantFP *, uint64_t))(*(void *)v1751 + 40))(v1751, v1474);
                                uint64_t v1488 = *(void *)(v1474 + 32);
                              }
                              int v1495 = *(unsigned __int8 *)(v1488 + 64);
                              uint64_t v1494 = v1488 + 64;
                              if (!v1495)
                              {
                                uint64_t v1496 = *(void *)(v1715 + 16);
                                (*(void (**)(llvm::ConstantFP *, uint64_t))(*(void *)v1751 + 32))(v1751, v1474);
                                v1497 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v1496 + 176))(v1496);
                                uint64_t v1498 = (*(uint64_t (**)(uint64_t))(*(void *)v1496 + 104))(v1496);
                                unsigned int v1499 = sub_1CC73B398(v1715, v1497, (void *)v30, v1498, v1704, v1474, *(void *)(v1474 + 16), v1494, 2u);
                                llvm::MachineOperand::setReg(v1494, v1499);
                                (*(void (**)(llvm::ConstantFP *, uint64_t))(*(void *)v1751 + 40))(v1751, v1474);
                              }
                              if (v1747)
                              {
                                v1500 = (void **)v1694;
                                if (!*(unsigned char *)v1694)
                                {
                                  int v1501 = *(_DWORD *)(v1694 + 4);
                                  memset(&v1810[1], 0, 24);
                                  HIDWORD(v1810[0]) = v1501;
                                  LODWORD(v1810[0]) = 0;
                                  v1500 = v1810;
                                }
                                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1474, v1471, (const llvm::MachineOperand *)v1500);
                                LODWORD(v1810[0]) = 1;
                                v1810[2] = 0;
                                v1810[1] = 0;
                                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1474, v1471, (const llvm::MachineOperand *)v1810);
                              }
                              if (v1714)
                              {
                                if (LOBYTE(v1793[0]))
                                {
                                  v1502 = v1793;
                                }
                                else
                                {
                                  memset(&v1810[1], 0, 24);
                                  HIDWORD(v1810[0]) = HIDWORD(v1793[0]);
                                  LODWORD(v1810[0]) = 0;
                                  v1502 = v1810;
                                }
                                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1474, v1471, (const llvm::MachineOperand *)v1502);
                                if (v1728)
                                {
                                  if (v1714 == 2)
                                  {
                                    LODWORD(v1810[0]) = 1;
                                    v1810[2] = 0;
                                    v1810[1] = 0;
                                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1474, v1471, (const llvm::MachineOperand *)v1810);
                                  }
                                }
                              }
                              uint64_t v1503 = *(void *)(v1715 + 48);
                              if (!v1503)
                              {
                                uint64_t v1503 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v1715 + 8)
                                                                                            + 216))(*(void *)(v1715 + 8), v1715 + 128, v1715);
                                *(void *)(v1715 + 48) = v1503;
                              }
                              if (v1450)
                              {
                                uint64_t v1504 = sub_1CB9A15FC(v1503, v1450, v1715);
                                *(void *)&long long v1777 = v1504 | 4;
                                *((void *)&v1777 + 1) = 0;
                                char v1779 = 0;
                                if (v1504) {
                                  int v1505 = *(_DWORD *)(v1504 + 12);
                                }
                                else {
                                  int v1505 = 0;
                                }
                              }
                              else
                              {
                                int v1505 = 0;
                                long long v1777 = xmmword_1CD91CB40;
                                char v1779 = 0;
                              }
                              int v1778 = v1505;
                              memset(v1810, 0, 32);
                              BOOL v22 = 1;
                              v1810[0] = (void *)llvm::MachineFunction::getMachineMemOperand(v1715, (uint64_t)&v1777, 2, -1, 2, (long long *)v1810, 0, 1, 0, 0, 0);
                              llvm::MachineInstr::setMemRefs(v1474, (uint64_t *)v1471, v1810, 1);
                              uint64_t v193 = v1774;
                              goto LABEL_1575;
                            }
                            return 0;
                          }
                          unsigned int v1319 = v1805;
                        }
                        if (v1330 < v1319)
                        {
                          do
                          {
                            if (v1808)
                            {
                              int v1333 = *((_DWORD *)v1791[0] + v1330);
                              unsigned int v1334 = v1793[1];
                              if (LODWORD(v1793[1]) >= HIDWORD(v1793[1])) {
                                goto LABEL_1429;
                              }
                            }
                            else
                            {
                              LODWORD(v1788) = *((_DWORD *)v1791[0] + v1330);
                              int v1790 = 0;
                              v1810[0] = &v1810[2];
                              v1810[2] = (void *)129;
                              LODWORD(v1810[3]) = 0;
                              v1810[4] = (void *)129;
                              LODWORD(v1811) = 0;
                              v1810[1] = (void *)0x800000002;
                              ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, uint64_t *, uint64_t, void))(*v1775)[4])(v1775, 74, &v1810[2], 2, &v1788, 1, 0);
                              uint64_t v1336 = v1335;
                              if (v1810[0] != &v1810[2]) {
                                free(v1810[0]);
                              }
                              if (LODWORD(v1793[1]) >= (unint64_t)HIDWORD(v1793[1])) {
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                              }
                              *((_DWORD *)v1793[0] + LODWORD(v1793[1])) = *(_DWORD *)(*(void *)(v1336 + 32) + 4);
                              unsigned int v1334 = LODWORD(v1793[1]) + 1;
                              LODWORD(v1793[1]) = v1334;
                              int v1333 = *(_DWORD *)(*(void *)(v1336 + 32) + 36);
                              if (v1334 >= HIDWORD(v1793[1])) {
LABEL_1429:
                              }
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            *((_DWORD *)v1793[0] + v1334) = v1333;
                            ++LODWORD(v1793[1]);
                            ++v1330;
                          }
                          while (v1330 < v1805);
                        }
                        if (v1791[0] != &v1792) {
                          free(v1791[0]);
                        }
                        int v1324 = BYTE12(v1799);
                      }
                      if (v1324)
                      {
                        if (LODWORD(v1793[1]) >= HIDWORD(v1793[1])) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((_DWORD *)v1793[0] + LODWORD(v1793[1])) = *(_DWORD *)(*((void *)v1774 + 4)
                                                                              + 32 * DWORD2(v1799)
                                                                              + 4);
                        ++LODWORD(v1793[1]);
                        int v1337 = v1806;
                        if (v1808 || v1806 != 7) {
                          goto LABEL_1443;
                        }
                        v1791[0] = (void *)129;
                        LODWORD(v1791[1]) = 0;
                        uint64_t v1338 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x10);
                        v1340 = *(llvm::ConstantInt **)v1338;
                        unsigned int v1341 = *(_DWORD *)(v1338 + 8);
                        LODWORD(v1810[1]) = v1341 >> 8;
                        if (v1341 >> 8 >= 0x41) {
                          operator new[]();
                        }
                        v1810[0] = 0;
                        v1342 = llvm::ConstantInt::get(v1340, (llvm::LLVMContext *)v1810, v1339);
                        if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
                          MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
                        }
                        ((void (*)(llvm::IntegerType *****, void **, void *))(*v1775)[2])(v1775, v1791, v1342);
                        if (LODWORD(v1793[1]) >= HIDWORD(v1793[1])) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((_DWORD *)v1793[0] + LODWORD(v1793[1])) = *(_DWORD *)(*(void *)(v1343 + 32) + 4);
                        ++LODWORD(v1793[1]);
                      }
                      int v1337 = v1806;
LABEL_1443:
                      if (v1337 == 8)
                      {
                        v1791[0] = (void *)129;
                        LODWORD(v1791[1]) = 0;
                        uint64_t v1344 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x10);
                        v1346 = *(llvm::ConstantInt **)v1344;
                        unsigned int v1347 = *(_DWORD *)(v1344 + 8);
                        LODWORD(v1810[1]) = v1347 >> 8;
                        if (v1347 >> 8 >= 0x41) {
                          operator new[]();
                        }
                        v1810[0] = 0;
                        v1348 = llvm::ConstantInt::get(v1346, (llvm::LLVMContext *)v1810, v1345);
                        if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
                          MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
                        }
                        ((void (*)(llvm::IntegerType *****, void **, void *))(*v1775)[2])(v1775, v1791, v1348);
                        if (LODWORD(v1793[1]) >= HIDWORD(v1793[1])) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((_DWORD *)v1793[0] + LODWORD(v1793[1])) = *(_DWORD *)(*(void *)(v1349 + 32) + 4);
                        unsigned int v1350 = ++LODWORD(v1793[1]);
                      }
                      else
                      {
                        unsigned int v1350 = v1793[1];
                      }
                      if (BYTE4(v1800))
                      {
                        if (v1350 >= HIDWORD(v1793[1])) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((_DWORD *)v1793[0] + v1350) = *(_DWORD *)(*((void *)v1774 + 4)
                                                                  + 32 * v1800
                                                                  + 4);
                        unsigned int v1350 = ++LODWORD(v1793[1]);
                      }
                      v1791[0] = (void *)sub_1CBA5A95C(v1350, 0x81uLL);
                      LODWORD(v1791[1]) = 0;
                      v1351 = (int *)v1793[0];
                      int v1352 = (int)v1793[1];
                      v1810[0] = &v1810[2];
                      v1810[1] = (void *)0x800000000;
                      if (LODWORD(v1793[1]) >= 9) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      if (LODWORD(v1793[1]))
                      {
                        uint64_t v1353 = 0;
                        uint64_t v1354 = 4 * LODWORD(v1793[1]);
                        do
                        {
                          int v1355 = *v1351++;
                          v1356 = &v1810[v1353 + 2];
                          *(_DWORD *)v1356 = v1355;
                          *((_DWORD *)v1356 + 4) = 0;
                          v1353 += 3;
                          v1354 -= 4;
                        }
                        while (v1354);
                        int v1357 = (int)v1810[1];
                      }
                      else
                      {
                        int v1357 = 0;
                      }
                      LODWORD(v1810[1]) = v1357 + v1352;
                      char v1332 = 1;
                      v1358 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **))(*v1775)[4])(v1775, 77, v1791, 1, &v1810[2]);
                      v1360 = v1359;
                      if (v1810[0] != &v1810[2]) {
                        free(v1810[0]);
                      }
                      v1791[0] = *(void **)(v12[30] + 8 * v1693);
                      LODWORD(v1791[1]) = 2;
                      v1810[0] = v1358;
                      v1810[1] = v1360;
                      LODWORD(v1810[2]) = 1;
                      ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 19, v1791, 1, v1810, 1, 0);
                      uint64_t v1326 = *(void *)(v1361 + 32);
                      uint64_t v30 = v1768;
                      size_t v1307 = v1722;
                      goto LABEL_1461;
                    }
                    v1290 = *(long long **)(v56 + 32);
                    long long v1291 = v1290[1];
                    long long v1783 = *v1290;
                    long long v1784 = v1291;
                  }
                  else
                  {
                    v1793[0] = (void *)257;
                    LODWORD(v1793[1]) = 0;
                    LODWORD(v1810[0]) = v47;
                    LODWORD(v1810[2]) = 0;
                    uint64_t v33 = v1775;
                    if ((uint64_t)v1791[0]) {
                      sub_1CC738034(v1775, 126, (unint64_t *)v1793, (int *)v1810);
                    }
                    else {
                      sub_1CC7382B0((uint64_t)v1775);
                    }
                    int v1293 = *(_DWORD *)(*(void *)(v1292 + 32) + 4);
                    LODWORD(v1783) = 0;
                    DWORD1(v1783) = v1293;
                    long long v1784 = 0uLL;
                    *((void *)&v1783 + 1) = 0;
                    if ((v58 & 1) == 0) {
                      goto LABEL_1328;
                    }
                  }
                  int v57 = 1;
                  char v1785 = 1;
                  goto LABEL_1328;
                }
                uint64_t v30 = v1768;
                if (*(unsigned char *)(v55 + 3)) {
                  goto LABEL_73;
                }
              }
              uint64_t v56 = 0;
              goto LABEL_74;
            }
            if ((*(unsigned char *)(v37 + 3) & 1) == 0)
            {
              uint64_t v37 = *(void *)(v37 + 24);
              if (!v37)
              {
LABEL_2063:
                uint64_t v33 = v1775;
                uint64_t v30 = v1768;
                goto LABEL_38;
              }
              uint64_t v33 = v1775;
              uint64_t v30 = v1768;
              if ((*(unsigned char *)(v37 + 3) & 1) == 0) {
                goto LABEL_38;
              }
            }
            uint64_t v38 = *(void *)(v37 + 8);
            if (!v38 || **(_WORD **)(v38 + 16) != 81) {
              goto LABEL_38;
            }
            if (*(_DWORD *)(v38 + 40) != 2) {
              goto LABEL_2063;
            }
            uint64_t v1646 = *(unsigned int *)(*(void *)(v38 + 32) + 36);
            v1647 = (uint64_t *)((v1646 & 0x80000000) != 0
                              ? *(void *)(v1768 + 24) + 16 * (v1646 & 0x7FFFFFFF) + 8
                              : *(void *)(v1768 + 272) + 8 * v1646);
            uint64_t v1648 = *v1647;
            if (!v1648) {
              goto LABEL_2063;
            }
            if ((*(unsigned char *)(v1648 + 3) & 1) == 0)
            {
              uint64_t v1648 = *(void *)(v1648 + 24);
              if (!v1648 || (*(unsigned char *)(v1648 + 3) & 1) == 0) {
                goto LABEL_2063;
              }
            }
            uint64_t v1645 = *(void *)(v1648 + 8);
            uint64_t v33 = v1775;
            uint64_t v30 = v1768;
            if (!v1645) {
              goto LABEL_38;
            }
LABEL_1835:
            uint64_t v35 = *(void *)(v1645 + 32);
            goto LABEL_38;
          }
        }
        uint64_t v1645 = *(void *)(v1644 + 8);
        if (v1645) {
          goto LABEL_1835;
        }
        goto LABEL_32;
      case 2374:
      case 2375:
        uint64_t v391 = v1774;
        char v392 = (_DWORD *)*((void *)v1774 + 4);
        int v393 = v392[1];
        int v394 = v392[17];
        int v395 = v392[25];
        int v396 = v392[33];
        v1798[0] = (llvm::MachineInstr *)513;
        LODWORD(v1798[1]) = 0;
        LODWORD(v1810[0]) = v394;
        LODWORD(v1810[2]) = 0;
        unsigned int v397 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 80, v1798, 1, v1810, 1, 0);
        uint64_t v398 = 0;
        *(int64x2_t *)v1798 = vdupq_n_s64(0x81uLL);
        long long v1799 = *(_OWORD *)v1798;
        v1793[0] = v397;
        v1793[1] = v399;
        LODWORD(v1794[0]) = 1;
        v1810[0] = &v1810[2];
        v1810[1] = (void *)0x800000000;
        uint64_t v400 = 2;
        do
        {
          int v401 = &v1810[v400];
          *int v401 = v1798[v398];
          *((_DWORD *)v401 + 2) = 0;
          v400 += 2;
          ++v398;
        }
        while (v398 != 4);
        LODWORD(v1810[1]) += 4;
        ((void (*)(llvm::IntegerType *****, uint64_t, void *))(*v1775)[4])(v1775, 74, v1810[0]);
        uint64_t v403 = v402;
        if (v1810[0] != &v1810[2]) {
          free(v1810[0]);
        }
        int v404 = *(_DWORD *)(*(void *)(v403 + 32) + 4);
        v1798[0] = (llvm::MachineInstr *)257;
        LODWORD(v1798[1]) = 0;
        LODWORD(v1810[0]) = v404;
        LODWORD(v1810[2]) = 0;
        LODWORD(v1810[3]) = v396;
        LODWORD(v1811) = 0;
        uint64_t v405 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 76, v1798, 1, v1810, 2, 0);
        unsigned int v407 = v406;
        if (v1758 == 2375)
        {
          int v1770 = v395;
          uint64_t v408 = *((void *)v1774 + 4);
          int v409 = *(_DWORD *)(v408 + 164);
          int v410 = *(_DWORD *)(v408 + 196);
          v1793[0] = (void *)129;
          LODWORD(v1793[1]) = 0;
          uint64_t v411 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x10);
          int v413 = *(llvm::ConstantInt **)v411;
          unsigned int v414 = *(_DWORD *)(v411 + 8);
          LODWORD(v1810[1]) = v414 >> 8;
          int v1759 = v393;
          if (v414 >> 8 > 0x40) {
            operator new[]();
          }
          if (v414 <= 0xFF) {
            LOBYTE(v415) = 0;
          }
          else {
            unint64_t v415 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v414) + 63);
          }
          v1810[0] = (void *)(v415 & 1);
          int v416 = llvm::ConstantInt::get(v413, (llvm::LLVMContext *)v1810, v412);
          if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
            MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
          }
          size_t v417 = v1775;
          uint64_t v418 = (void *)((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*v1775)[2])(v1775, v1793, v416);
          v1798[0] = (llvm::MachineInstr *)129;
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = v410;
          LODWORD(v1810[2]) = 0;
          v1810[3] = v418;
          v1810[4] = v419;
          LODWORD(v1811) = 1;
          long long v420 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v417)[4])(v417, 46, v1798, 1, v1810, 2, 0);
          v422 = v421;
          v1810[0] = (void *)129;
          LODWORD(v1810[1]) = 0;
          v423 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void, void, void))(*v417)[4])(v417, 2162, v1810, 1, 0, 0, 0);
          v425 = v424;
          v1793[0] = v423;
          v1793[1] = v424;
          LODWORD(v1810[0]) = 1;
          v1810[2] = 0;
          v1810[1] = 0;
          llvm::MachineInstr::addOperand(v424, (llvm::MachineFunction *)v423, (const llvm::MachineOperand *)v1810);
          int v426 = *(_DWORD *)(v422[4] + 4);
          memset(&v1810[1], 0, 24);
          HIDWORD(v1810[0]) = v426;
          LODWORD(v1810[0]) = 0;
          llvm::MachineInstr::addOperand(v425, (llvm::MachineFunction *)v423, (const llvm::MachineOperand *)v1810);
          LODWORD(v1810[0]) = 1;
          v1810[2] = 0;
          v1810[1] = 0;
          llvm::MachineInstr::addOperand(v425, (llvm::MachineFunction *)v423, (const llvm::MachineOperand *)v1810);
          sub_1CBA318C8((uint64_t)v1793);
          *(void *)&long long v1795 = 129;
          DWORD2(v1795) = 0;
          uint64_t v427 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x10);
          v429 = *(llvm::ConstantInt **)v427;
          unsigned int v430 = *(_DWORD *)(v427 + 8);
          LODWORD(v1810[1]) = v430 >> 8;
          if (v430 >> 8 > 0x40) {
            operator new[]();
          }
          if (v430 <= 0xFF) {
            LOBYTE(v431) = 0;
          }
          else {
            unint64_t v431 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v430) + 63);
          }
          v1810[0] = (void *)(v431 & 1);
          uint64_t v432 = llvm::ConstantInt::get(v429, (llvm::LLVMContext *)v1810, v428);
          if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
            MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
          }
          uint64_t v433 = (void *)((uint64_t (*)(llvm::IntegerType *****, long long *, void *))(*v1775)[2])(v1775, &v1795, v432);
          v1798[0] = (llvm::MachineInstr *)129;
          LODWORD(v1798[1]) = 0;
          *(_OWORD *)v1810 = *(_OWORD *)v1793;
          LODWORD(v1810[2]) = 1;
          v1810[3] = v433;
          v1810[4] = v434;
          LODWORD(v1811) = 1;
          v1793[0] = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 45, v1798, 1, v1810, 2, 0);
          v1793[1] = v435;
          *(void *)&long long v1795 = 129;
          DWORD2(v1795) = 0;
          uint64_t v436 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x10);
          int v438 = *(llvm::ConstantInt **)v436;
          unsigned int v439 = *(_DWORD *)(v436 + 8);
          LODWORD(v1810[1]) = v439 >> 8;
          if (v439 >> 8 > 0x40) {
            operator new[]();
          }
          if (v439 <= 0xFF) {
            LOBYTE(v440) = 0;
          }
          else {
            unint64_t v440 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v439) + 63);
          }
          v1810[0] = (void *)(v440 & 1);
          uint64_t v441 = llvm::ConstantInt::get(v438, (llvm::LLVMContext *)v1810, v437);
          if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
            MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
          }
          v442 = v1775;
          long long v443 = (void *)((uint64_t (*)(llvm::IntegerType *****, long long *, void *))(*v1775)[2])(v1775, &v1795, v441);
          v1798[0] = (llvm::MachineInstr *)129;
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = v409;
          LODWORD(v1810[2]) = 0;
          v1810[3] = v443;
          v1810[4] = v444;
          LODWORD(v1811) = 1;
          ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v442)[4])(v442, 46, v1798, 1, v1810, 2, 0);
          int v446 = *(_DWORD *)(*(void *)(v445 + 32) + 4);
          v1798[0] = (llvm::MachineInstr *)129;
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = v446;
          LODWORD(v1810[2]) = 0;
          *(_OWORD *)&v1810[3] = *(_OWORD *)v1793;
          LODWORD(v1811) = 1;
          uint64_t v447 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v442)[4])(v442, 127, v1798, 1, v1810, 2, 0);
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v447;
          v1810[1] = v448;
          LODWORD(v1810[2]) = 1;
          uint64_t v449 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v442)[4])(v442, 126, v1798, 1, v1810, 1, 0);
          unsigned int v451 = v450;
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v420;
          v1810[1] = v422;
          LODWORD(v1810[2]) = 1;
          uint64_t v452 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v442)[4])(v442, 126, v1798, 1, v1810, 1, 0);
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v449;
          v1810[1] = v451;
          LODWORD(v1810[2]) = 1;
          v1810[3] = v452;
          v1810[4] = v453;
          LODWORD(v1811) = 1;
          uint64_t v454 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v442)[4])(v442, 66, v1798, 1, v1810, 2, 0);
          *(void *)&long long v1795 = 257;
          DWORD2(v1795) = 0;
          v1810[0] = v454;
          v1810[1] = v455;
          LODWORD(v1810[2]) = 1;
          *(void *)&long long v1783 = 257;
          DWORD2(v1783) = 0;
          uint64_t v456 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x20);
          size_t v458 = *(llvm::ConstantInt **)v456;
          unsigned int v459 = *(_DWORD *)(v456 + 8);
          LODWORD(v1798[1]) = v459 >> 8;
          if (v459 >> 8 > 0x40) {
            operator new[]();
          }
          if (v459 <= 0xFF) {
            LOBYTE(v460) = 0;
          }
          else {
            unint64_t v460 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v459) + 63);
          }
          v1798[0] = (llvm::MachineInstr *)(v460 & 0xF);
          unsigned int v461 = llvm::ConstantInt::get(v458, (llvm::LLVMContext *)v1798, v457);
          if (LODWORD(v1798[1]) >= 0x41 && v1798[0]) {
            MEMORY[0x1D25D9CB0](v1798[0], 0x1000C8000313F17);
          }
          v1810[3] = (void *)((uint64_t (*)(llvm::IntegerType *****, long long *, void *))(*v1775)[2])(v1775, &v1783, v461);
          v1810[4] = v462;
          LODWORD(v1811) = 1;
          size_t v463 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 127, &v1795, 1, v1810, 2, 0);
          size_t v465 = v464;
          *(void *)&long long v1795 = 129;
          DWORD2(v1795) = 0;
          *(_OWORD *)v1810 = *(_OWORD *)v1793;
          LODWORD(v1810[2]) = 1;
          *(void *)&long long v1783 = 129;
          DWORD2(v1783) = 0;
          uint64_t v466 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x10);
          int v468 = *(llvm::ConstantInt **)v466;
          unsigned int v469 = *(_DWORD *)(v466 + 8);
          LODWORD(v1798[1]) = v469 >> 8;
          if (v469 >> 8 > 0x40) {
            operator new[]();
          }
          if (v469 <= 0xFF) {
            LOBYTE(v470) = 0;
          }
          else {
            unint64_t v470 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v469) + 63);
          }
          v1798[0] = (llvm::MachineInstr *)(v470 & 4);
          uint64_t v471 = llvm::ConstantInt::get(v468, (llvm::LLVMContext *)v1798, v467);
          if (LODWORD(v1798[1]) >= 0x41 && v1798[0]) {
            MEMORY[0x1D25D9CB0](v1798[0], 0x1000C8000313F17);
          }
          uint64_t v472 = v1775;
          v1810[3] = (void *)((uint64_t (*)(llvm::IntegerType *****, long long *, void *))(*v1775)[2])(v1775, &v1783, v471);
          v1810[4] = v473;
          LODWORD(v1811) = 1;
          int v474 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*v472)[4])(v472, 127, &v1795, 1, v1810, 2, 0);
          v1798[0] = (llvm::MachineInstr *)129;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v474;
          v1810[1] = v475;
          LODWORD(v1810[2]) = 1;
          LODWORD(v1810[3]) = v1770;
          LODWORD(v1811) = 0;
          uint64_t v476 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v472)[4])(v472, 66, v1798, 1, v1810, 2, 0);
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v476;
          v1810[1] = v477;
          LODWORD(v1810[2]) = 1;
          uint64_t v478 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v472)[4])(v472, 126, v1798, 1, v1810, 1, 0);
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v463;
          v1810[1] = v465;
          LODWORD(v1810[2]) = 1;
          v1810[3] = v478;
          v1810[4] = v479;
          LODWORD(v1811) = 1;
          unsigned int v480 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v472)[4])(v472, 66, v1798, 1, v1810, 2, 0);
          LODWORD(v1798[0]) = v1759;
          LODWORD(v1798[1]) = 1;
          v1810[0] = v405;
          v1810[1] = v407;
          LODWORD(v1810[2]) = 1;
          v1810[3] = v480;
          v1810[4] = v481;
          LODWORD(v1811) = 1;
          ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v472)[4])(v472, 76, v1798, 1, v1810, 2, 0);
          uint64_t v391 = v1774;
        }
        else
        {
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = v395;
          LODWORD(v1810[2]) = 0;
          v667 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 126, v1798, 1, v1810, 1, 0);
          LODWORD(v1798[0]) = v393;
          LODWORD(v1798[1]) = 1;
          v1810[0] = v405;
          v1810[1] = v407;
          LODWORD(v1810[2]) = 1;
          v1810[3] = v667;
          v1810[4] = v668;
          LODWORD(v1811) = 1;
          ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 76, v1798, 1, v1810, 2, 0);
        }
        goto LABEL_714;
      case 2419:
      case 2420:
        uint64_t v361 = *((void *)v1774 + 4);
        int v362 = *(_DWORD *)(v361 + 36);
        unsigned int v363 = *(_DWORD *)(v361 + 68);
        sub_1CC73C210(v363, v1768, (uint64_t)v1810);
        if (LOBYTE(v1810[2]))
        {
          uint64_t v366 = v1775;
          if (LODWORD(v1810[1]) > 0x40)
          {
            if (v1810[0]) {
              MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
            }
            unint64_t v669 = 0;
            uint64_t v670 = 0;
            uint64_t v364 = 0;
            uint64_t v366 = v1775;
          }
          else
          {
            unint64_t v669 = ((uint64_t)v1810[0] << -LOBYTE(v1810[1]) >> -LOBYTE(v1810[1])) & 0xFFFFFFFFFFFFFF00;
            uint64_t v670 = ((uint64_t)v1810[0] << -LOBYTE(v1810[1]) >> -LOBYTE(v1810[1]));
            uint64_t v364 = 1;
          }
          unsigned int v367 = v1758;
          v365 = (void *)(v670 | v669);
        }
        else
        {
          uint64_t v364 = 0;
          v365 = 0;
          uint64_t v366 = v1775;
          unsigned int v367 = v1758;
        }
        if (v367 == 2419) {
          uint64_t v671 = 16;
        }
        else {
          uint64_t v671 = 272;
        }
        v672 = (llvm::MachineFunction *)v366[1];
        uint64_t v673 = 49104;
        if (!v364) {
          uint64_t v673 = 49110;
        }
        uint64_t v674 = (uint64_t)&v366[2][1][v673];
        v675 = (llvm::MachineInstr *)v366[4];
        v1798[0] = v675;
        if (v675) {
          llvm::MetadataTracking::track((uint64_t)v1798, (unsigned __int8 *)v675, 2);
        }
        v676 = llvm::MachineFunction::CreateMachineInstr(v672, v674, (unsigned __int8 **)v1798, 0);
        if (!v1798[0]) {
          goto LABEL_628;
        }
        int v1663 = *(unsigned __int8 *)v1798[0];
        if ((v1663 - 4) > 0x1E)
        {
          if ((v1663 - 3) >= 0xFFFFFFFE) {
            v1678 = v1798[0];
          }
          else {
            v1678 = 0;
          }
          if ((v1663 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1665 = (unint64_t)v1678 + 8;
LABEL_1962:
            v1810[0] = v1798;
            sub_1CC5FA668(v1665 + 16, v1810);
            goto LABEL_628;
          }
          if (v1663 == 3) {
            *((void *)v1798[0] + 1) = 0;
          }
        }
        else if ((*((unsigned char *)v1798[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1798[0] + 3))
        {
          uint64_t v1664 = *((void *)v1798[0] + 2);
          if ((v1664 & 4) != 0)
          {
            unint64_t v1665 = v1664 & 0xFFFFFFFFFFFFFFF8;
            if (v1665) {
              goto LABEL_1962;
            }
          }
        }
LABEL_628:
        v677 = (unint64_t *)v1775[6];
        v678 = v1775[5][5];
        *((void *)v676 + 3) = v678;
        v679 = v678[4];
        uint64_t v680 = *((unsigned int *)v676 + 10);
        if (v680)
        {
          uint64_t v1226 = *((void *)v676 + 4);
          v1227 = v679[5];
          uint64_t v1228 = 32 * v680;
          do
          {
            if (!*(unsigned char *)v1226)
            {
              uint64_t v1229 = *(unsigned int *)(v1226 + 4);
              if ((int)v1229 >= 0) {
                v1230 = (uint64_t *)(*((void *)v1227 + 34) + 8 * v1229);
              }
              else {
                v1230 = (uint64_t *)(*((void *)v1227 + 3) + 16 * (v1229 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1231 = *v1230;
              if (*v1230)
              {
                uint64_t v1232 = *(void *)(v1231 + 16);
                *(void *)(v1231 + 16) = v1226;
                *(void *)(v1226 + 16) = v1232;
                if (*(unsigned char *)(v1226 + 3))
                {
                  *(void *)(v1226 + 24) = v1231;
                }
                else
                {
                  *(void *)(v1226 + 24) = 0;
                  v1230 = (uint64_t *)(v1232 + 24);
                }
              }
              else
              {
                *(void *)(v1226 + 16) = v1226;
                *(void *)(v1226 + 24) = 0;
              }
              uint64_t *v1230 = v1226;
            }
            v1226 += 32;
            v1228 -= 32;
          }
          while (v1228);
        }
        v681 = v679[91];
        if (v681) {
          (*(void (**)(llvm::IntegerType *, llvm::MachineInstr *))(*(void *)v681 + 24))(v681, v676);
        }
        unint64_t v682 = *v677 & 0xFFFFFFFFFFFFFFF8;
        *(void *)v676 = v682 | *(void *)v676 & 7;
        *((void *)v676 + 1) = v677;
        *(void *)(v682 + 8) = v676;
        unint64_t *v677 = *v677 & 7 | (unint64_t)v676;
        v683 = v1775[7];
        if (v683) {
          ((void (*)(llvm::IntegerType ****, llvm::MachineInstr *))(*v683)[3])(v683, v676);
        }
        LODWORD(v1810[0]) = 1;
        v1810[1] = 0;
        v1810[2] = (void *)v671;
        llvm::MachineInstr::addOperand(v676, v672, (const llvm::MachineOperand *)v1810);
        LODWORD(v1810[0]) = 1;
        v1810[1] = 0;
        v1810[2] = (void *)4;
        llvm::MachineInstr::addOperand(v676, v672, (const llvm::MachineOperand *)v1810);
        memset(&v1810[1], 0, 24);
        HIDWORD(v1810[0]) = v362;
        LODWORD(v1810[0]) = 0;
        llvm::MachineInstr::addOperand(v676, v672, (const llvm::MachineOperand *)v1810);
        if (v364)
        {
          LODWORD(v1810[0]) = 1;
          v1810[1] = 0;
          v1810[2] = v365;
        }
        else
        {
          memset(&v1810[1], 0, 24);
          HIDWORD(v1810[0]) = v363;
          LODWORD(v1810[0]) = 0;
        }
        llvm::MachineInstr::addOperand(v676, v672, (const llvm::MachineOperand *)v1810);
        BOOL v22 = 1;
        LODWORD(v1810[0]) = 1;
        v1810[2] = 0;
        v1810[1] = 0;
        llvm::MachineInstr::addOperand(v676, v672, (const llvm::MachineOperand *)v1810);
        sub_1CC73B5D0(v676, (uint64_t)v1741, v12);
        v728 = v1774;
        goto LABEL_750;
      case 2424:
        uint64_t v197 = v1774;
        sub_1CC73C210(*(_DWORD *)(*((void *)v1774 + 4) + 36), v1768, (uint64_t)v1810);
        if (LOBYTE(v1810[2]))
        {
          v634 = v1775;
          if (LODWORD(v1810[1]) > 0x40)
          {
            if (v1810[0]) {
              MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
            }
            unint64_t v771 = 0;
            uint64_t v772 = 0;
            uint64_t v197 = v1774;
            v634 = v1775;
          }
          else
          {
            unint64_t v771 = ((uint64_t)v1810[0] << -LOBYTE(v1810[1]) >> -LOBYTE(v1810[1])) & 0xFFFFFFFFFFFFFF00;
            uint64_t v772 = ((uint64_t)v1810[0] << -LOBYTE(v1810[1]) >> -LOBYTE(v1810[1]));
          }
          v633 = (void *)(v772 | v771);
        }
        else
        {
          v633 = 0;
          v634 = v1775;
        }
        v773 = (llvm::MachineFunction *)v634[1];
        uint64_t v774 = (uint64_t)(v634[2][1] + 27558);
        v775 = (llvm::MachineInstr *)v634[4];
        v1798[0] = v775;
        if (v775) {
          llvm::MetadataTracking::track((uint64_t)v1798, (unsigned __int8 *)v775, 2);
        }
        v776 = llvm::MachineFunction::CreateMachineInstr(v773, v774, (unsigned __int8 **)v1798, 0);
        if (!v1798[0]) {
          goto LABEL_743;
        }
        int v1672 = *(unsigned __int8 *)v1798[0];
        if ((v1672 - 4) > 0x1E)
        {
          if ((v1672 - 3) >= 0xFFFFFFFE) {
            v1681 = v1798[0];
          }
          else {
            v1681 = 0;
          }
          if ((v1672 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1674 = (unint64_t)v1681 + 8;
LABEL_1993:
            v1810[0] = v1798;
            sub_1CC5FA668(v1674 + 16, v1810);
            uint64_t v197 = v1774;
            v634 = v1775;
            goto LABEL_743;
          }
          uint64_t v197 = v1774;
          v634 = v1775;
          if (v1672 == 3) {
            *((void *)v1798[0] + 1) = 0;
          }
        }
        else
        {
          uint64_t v197 = v1774;
          v634 = v1775;
          if ((*((unsigned char *)v1798[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1798[0] + 3))
          {
            uint64_t v1673 = *((void *)v1798[0] + 2);
            if ((v1673 & 4) != 0)
            {
              unint64_t v1674 = v1673 & 0xFFFFFFFFFFFFFFF8;
              if (v1674) {
                goto LABEL_1993;
              }
            }
          }
        }
LABEL_743:
        v777 = (unint64_t *)v634[6];
        v778 = v634[5][5];
        *((void *)v776 + 3) = v778;
        v779 = v778[4];
        uint64_t v780 = *((unsigned int *)v776 + 10);
        if (v780)
        {
          uint64_t v1272 = *((void *)v776 + 4);
          v1273 = v779[5];
          uint64_t v1274 = 32 * v780;
          uint64_t v197 = v1774;
          v634 = v1775;
          do
          {
            if (!*(unsigned char *)v1272)
            {
              uint64_t v1275 = *(unsigned int *)(v1272 + 4);
              if ((int)v1275 >= 0) {
                v1276 = (uint64_t *)(*((void *)v1273 + 34) + 8 * v1275);
              }
              else {
                v1276 = (uint64_t *)(*((void *)v1273 + 3) + 16 * (v1275 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1277 = *v1276;
              if (*v1276)
              {
                uint64_t v1278 = *(void *)(v1277 + 16);
                *(void *)(v1277 + 16) = v1272;
                *(void *)(v1272 + 16) = v1278;
                if (*(unsigned char *)(v1272 + 3))
                {
                  *(void *)(v1272 + 24) = v1277;
                }
                else
                {
                  *(void *)(v1272 + 24) = 0;
                  v1276 = (uint64_t *)(v1278 + 24);
                }
              }
              else
              {
                *(void *)(v1272 + 16) = v1272;
                *(void *)(v1272 + 24) = 0;
              }
              uint64_t *v1276 = v1272;
            }
            v1272 += 32;
            v1274 -= 32;
          }
          while (v1274);
        }
        v781 = v779[91];
        if (v781) {
          (*(void (**)(llvm::IntegerType *, llvm::MachineInstr *))(*(void *)v781 + 24))(v781, v776);
        }
        unint64_t v782 = *v777 & 0xFFFFFFFFFFFFFFF8;
        *(void *)v776 = v782 | *(void *)v776 & 7;
        *((void *)v776 + 1) = v777;
        *(void *)(v782 + 8) = v776;
        unint64_t *v777 = *v777 & 7 | (unint64_t)v776;
        v783 = v634[7];
        if (v783) {
          ((void (*)(llvm::IntegerType ****, llvm::MachineInstr *))(*v783)[3])(v783, v776);
        }
        BOOL v22 = 1;
        LODWORD(v1810[0]) = 1;
        v1810[1] = 0;
        v1810[2] = v633;
        llvm::MachineInstr::addOperand(v776, v773, (const llvm::MachineOperand *)v1810);
        goto LABEL_749;
      case 2445:
      case 2446:
        int v318 = *(_DWORD *)(*((void *)v1774 + 4) + 4);
        if (v318 < 0 && (uint64_t v319 = v318 & 0x7FFFFFFF, v319 < *(_DWORD *)(v1768 + 432))) {
          uint64_t v320 = *(void **)(*(void *)(v1768 + 424) + 8 * v319);
        }
        else {
          uint64_t v320 = 0;
        }
        v1793[0] = v320;
        uint64_t v493 = sub_1CB8F1DC4((unint64_t *)v1793);
        if (v14)
        {
          unsigned int v494 = v1775;
          unint64_t v495 = v1751;
          if (v492 == 1) {
          BOOL v496 = v493 == 32;
          }
          unsigned int v497 = 4570;
        }
        else
        {
          unsigned int v494 = v1775;
          unint64_t v495 = v1751;
          if (v492 == 1) {
          BOOL v496 = v493 == 32;
          }
          unsigned int v497 = 4572;
        }
        if (v496) {
          uint64_t v705 = v497;
        }
        else {
          uint64_t v705 = v497 + 1;
        }
        uint64_t v707 = sub_1CB8F1DC4((unint64_t *)v1793);
        if (v706 == 1) {
        v708 = &off_1E66AB048;
        }
        if (v707 == 32) {
          v708 = &off_1E66AB080;
        }
        if (v1758 == 2445) {
          int v709 = 47;
        }
        else {
          int v709 = 48;
        }
        v1798[0] = (llvm::MachineInstr *)v708;
        LODWORD(v1798[1]) = 2;
        v710 = (llvm::MachineFunction *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void, void, void))(*v494)[4])(v494, v705, v1798, 1, 0, 0, 0);
        v712 = v711;
        LODWORD(v1810[0]) = 1;
        v1810[2] = 0;
        v1810[1] = 0;
        llvm::MachineInstr::addOperand(v711, v710, (const llvm::MachineOperand *)v1810);
        memset(&v1810[1], 0, 24);
        HIDWORD(v1810[0]) = v709;
        LODWORD(v1810[0]) = 0;
        llvm::MachineInstr::addOperand(v712, v710, (const llvm::MachineOperand *)v1810);
        v1798[0] = (llvm::MachineInstr *)v1793[0];
        LODWORD(v1798[1]) = 0;
        v1810[0] = v710;
        v1810[1] = v712;
        LODWORD(v1810[2]) = 1;
        v713 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v494)[4])(v494, 19, v1798, 1, v1810, 1, 0);
        v1798[0] = (llvm::MachineInstr *)v1793[0];
        LODWORD(v1798[1]) = 0;
        v1810[0] = v713;
        v1810[1] = v714;
        LODWORD(v1810[2]) = 1;
        v715 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v494)[4])(v494, 183, v1798, 1, v1810, 1, 0);
        v717 = v716;
        v718 = ****(llvm::ConstantFP *****)(*((void *)v1774 + 3) + 32);
        LODWORD(v1810[1]) = 32;
        v1810[0] = (void *)1056964608;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)v1798, (const llvm::APInt **)v1810);
        v1810[1] = v1798[0];
        v1810[2] = v1798[1];
        LODWORD(v1810[3]) = v1799;
        BYTE4(v1810[3]) = BYTE4(v1810[3]) & 0xF0 | BYTE4(v1799) & 0xF;
        v720 = llvm::ConstantFP::get(v718, (llvm::LLVMContext *)v1810, v719);
        if (v1810[1] == &unk_1CFB2E344)
        {
          sub_1CB845718((uint64_t *)&v1810[2]);
        }
        else if ((*((_DWORD *)v1810[1] + 2) - 64) <= 0xFFFFFF7F && v1810[2])
        {
          MEMORY[0x1D25D9CB0](v1810[2], 0x1000C8000313F17);
        }
        v1810[0] = v1793[0];
        LODWORD(v1810[1]) = 0;
        v721 = (void *)((uint64_t (*)(llvm::IntegerType *****, void **, const llvm::detail::DoubleAPFloat *))(*v1775)[3])(v1775, v1810, v720);
        v1798[0] = (llvm::MachineInstr *)v1793[0];
        LODWORD(v1798[1]) = 0;
        v1810[0] = v715;
        v1810[1] = v717;
        BOOL v22 = 1;
        LODWORD(v1810[2]) = 1;
        v1810[3] = v721;
        v1810[4] = v722;
        LODWORD(v1811) = 1;
        ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, uint64_t))(*v1775)[4])(v1775, 163, v1798, 1, v1810, 2, *((unsigned __int16 *)v1774 + 22) | 0x100000000);
        unsigned int v724 = *(_DWORD *)(*(void *)(v723 + 32) + 4);
        v725 = (void *)v1768;
        v726 = v1774;
        uint64_t v727 = (uint64_t)v495;
        goto LABEL_848;
      case 2451:
      case 2453:
        uint64_t v59 = v1774;
        uint64_t v368 = *((void *)v1774 + 4);
        sub_1CC73C210(*(_DWORD *)(v368 + 68), v1768, (uint64_t)v1810);
        if (LOBYTE(v1810[2]))
        {
          if (LODWORD(v1810[1]) > 0x40)
          {
            if (v1810[0]) {
              MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
            }
            unint64_t v369 = 0;
            int v370 = 1;
            uint64_t v59 = v1774;
          }
          else
          {
            int v370 = 0;
            unint64_t v369 = ((uint64_t)v1810[0] << -(uint64_t)LODWORD(v1810[1]) >> -(uint64_t)LODWORD(v1810[1]));
          }
        }
        else
        {
          unint64_t v369 = 0;
          int v370 = 1;
        }
        int v684 = 747;
        if (v370) {
          int v684 = 750;
        }
        int v685 = 745;
        if (v370) {
          int v685 = 748;
        }
        if (v1758 == 2451) {
          int v684 = v685;
        }
        int v686 = 753;
        if (v370) {
          int v686 = 756;
        }
        int v687 = 751;
        if (v370) {
          int v687 = 754;
        }
        if (v1758 == 2451) {
          int v686 = v687;
        }
        if (*((unsigned char *)v10 + 1654)) {
          unsigned int v688 = v686;
        }
        else {
          unsigned int v688 = v684;
        }
        v689 = (llvm::MachineFunction *)v1775[1];
        uint64_t v690 = (uint64_t)&v1775[2][1][6 * v688];
        v691 = (llvm::MachineInstr *)v1775[4];
        v1798[0] = v691;
        if (v691) {
          llvm::MetadataTracking::track((uint64_t)v1798, (unsigned __int8 *)v691, 2);
        }
        v692 = llvm::MachineFunction::CreateMachineInstr(v689, v690, (unsigned __int8 **)v1798, 0);
        if (!v1798[0]) {
          goto LABEL_655;
        }
        int v1666 = *(unsigned __int8 *)v1798[0];
        if ((v1666 - 4) > 0x1E)
        {
          if ((v1666 - 3) >= 0xFFFFFFFE) {
            v1679 = v1798[0];
          }
          else {
            v1679 = 0;
          }
          if ((v1666 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1668 = (unint64_t)v1679 + 8;
LABEL_1968:
            v1810[0] = v1798;
            sub_1CC5FA668(v1668 + 16, v1810);
            uint64_t v59 = v1774;
            goto LABEL_655;
          }
          uint64_t v59 = v1774;
          if (v1666 == 3) {
            *((void *)v1798[0] + 1) = 0;
          }
        }
        else
        {
          uint64_t v59 = v1774;
          if ((*((unsigned char *)v1798[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1798[0] + 3))
          {
            uint64_t v1667 = *((void *)v1798[0] + 2);
            if ((v1667 & 4) != 0)
            {
              unint64_t v1668 = v1667 & 0xFFFFFFFFFFFFFFF8;
              if (v1668) {
                goto LABEL_1968;
              }
            }
          }
        }
LABEL_655:
        v693 = (unint64_t *)v1775[6];
        v694 = v1775[5][5];
        *((void *)v692 + 3) = v694;
        v695 = v694[4];
        uint64_t v696 = *((unsigned int *)v692 + 10);
        if (v696)
        {
          uint64_t v1233 = *((void *)v692 + 4);
          v1234 = v695[5];
          uint64_t v1235 = 32 * v696;
          do
          {
            if (!*(unsigned char *)v1233)
            {
              uint64_t v1236 = *(unsigned int *)(v1233 + 4);
              if ((int)v1236 >= 0) {
                v1237 = (uint64_t *)(*((void *)v1234 + 34) + 8 * v1236);
              }
              else {
                v1237 = (uint64_t *)(*((void *)v1234 + 3) + 16 * (v1236 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1238 = *v1237;
              if (*v1237)
              {
                uint64_t v1239 = *(void *)(v1238 + 16);
                *(void *)(v1238 + 16) = v1233;
                *(void *)(v1233 + 16) = v1239;
                if (*(unsigned char *)(v1233 + 3))
                {
                  *(void *)(v1233 + 24) = v1238;
                }
                else
                {
                  *(void *)(v1233 + 24) = 0;
                  v1237 = (uint64_t *)(v1239 + 24);
                }
              }
              else
              {
                *(void *)(v1233 + 16) = v1233;
                *(void *)(v1233 + 24) = 0;
              }
              uint64_t *v1237 = v1233;
              uint64_t v59 = v1774;
            }
            v1233 += 32;
            v1235 -= 32;
          }
          while (v1235);
        }
        v697 = v695[91];
        if (v697) {
          (*(void (**)(llvm::IntegerType *, llvm::MachineInstr *))(*(void *)v697 + 24))(v697, v692);
        }
        unint64_t v698 = *v693 & 0xFFFFFFFFFFFFFFF8;
        *(void *)v692 = v698 | *(void *)v692 & 7;
        *((void *)v692 + 1) = v693;
        *(void *)(v698 + 8) = v692;
        unint64_t *v693 = *v693 & 7 | (unint64_t)v692;
        v699 = v1775[7];
        if (v699) {
          ((void (*)(llvm::IntegerType ****, llvm::MachineInstr *))(*v699)[3])(v699, v692);
        }
        LODWORD(v1810[0]) = 1;
        v1810[2] = 0;
        v1810[1] = 0;
        llvm::MachineInstr::addOperand(v692, v689, (const llvm::MachineOperand *)v1810);
        v1798[0] = v689;
        v1798[1] = v692;
        if (v370)
        {
          int v700 = *(_DWORD *)(v368 + 68);
          memset(&v1810[1], 0, 24);
          HIDWORD(v1810[0]) = v700;
          LODWORD(v1810[0]) = 0;
        }
        else
        {
          LODWORD(v1810[0]) = 1;
          v1810[1] = 0;
          v1810[2] = (void *)v369;
        }
        llvm::MachineInstr::addOperand(v692, v689, (const llvm::MachineOperand *)v1810);
        int v701 = *(_DWORD *)(v368 + 36);
        memset(&v1810[1], 0, 24);
        HIDWORD(v1810[0]) = v701;
        LODWORD(v1810[0]) = 0;
        llvm::MachineInstr::addOperand(v692, v689, (const llvm::MachineOperand *)v1810);
        sub_1CBA318C8((uint64_t)v1798);
LABEL_263:
        uint64_t v161 = v59;
        goto LABEL_264;
      case 2452:
        v1687 = v12;
        v599 = (_DWORD *)*((void *)v1774 + 4);
        int v600 = v599[9];
        int v601 = v599[17];
        unsigned int v1760 = v599[25];
        sub_1CC73C210(v1760, v1768, (uint64_t)v1810);
        if (!LOBYTE(v1810[2])) {
          goto LABEL_545;
        }
        v603 = v1775;
        if (LODWORD(v1810[1]) > 0x40)
        {
          if (v1810[0]) {
            MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
          }
LABEL_545:
          *(void *)v1771 = 0;
          int v602 = 1;
          v603 = v1775;
        }
        else
        {
          int v602 = 0;
          *(void *)v1771 = ((uint64_t)v1810[0] << -(uint64_t)LODWORD(v1810[1]) >> -(uint64_t)LODWORD(v1810[1]));
        }
        v1798[0] = (llvm::MachineInstr *)&off_1E66AB080;
        LODWORD(v1798[1]) = 2;
        LODWORD(v1810[0]) = v600;
        LODWORD(v1810[2]) = 0;
        ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v603)[4])(v603, 19, v1798, 1, v1810, 1, 0);
        int v742 = *(_DWORD *)(*(void *)(v741 + 32) + 4);
        v1798[0] = (llvm::MachineInstr *)&off_1E66AB048;
        LODWORD(v1798[1]) = 2;
        v743 = (llvm::MachineFunction *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void, void, void))(*v603)[4])(v603, 19, v1798, 1, 0, 0, 0);
        v745 = v744;
        memset(&v1810[1], 0, 24);
        HIDWORD(v1810[0]) = v742;
        LODWORD(v1810[0]) = 256;
        llvm::MachineInstr::addOperand(v744, v743, (const llvm::MachineOperand *)v1810);
        v1798[0] = (llvm::MachineInstr *)&off_1E66AB048;
        LODWORD(v1798[1]) = 2;
        v746 = (llvm::MachineFunction *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void, void, void))(*v603)[4])(v603, 19, v1798, 1, 0, 0, 0);
        v748 = v747;
        memset(&v1810[1], 0, 24);
        HIDWORD(v1810[0]) = v742;
        LODWORD(v1810[0]) = 512;
        llvm::MachineInstr::addOperand(v747, v746, (const llvm::MachineOperand *)v1810);
        v1798[0] = (llvm::MachineInstr *)&off_1E66AB128;
        LODWORD(v1798[1]) = 2;
        v749 = (llvm::MachineFunction *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void, void, void))(*v603)[4])(v603, 18, v1798, 1, 0, 0, 0);
        v751 = v750;
        int v752 = *(_DWORD *)(*((void *)v745 + 4) + 4);
        memset(&v1810[1], 0, 24);
        HIDWORD(v1810[0]) = v752;
        LODWORD(v1810[0]) = 0;
        llvm::MachineInstr::addOperand(v750, v749, (const llvm::MachineOperand *)v1810);
        LODWORD(v1810[0]) = 1;
        v1810[1] = 0;
        v1810[2] = (void *)1;
        llvm::MachineInstr::addOperand(v751, v749, (const llvm::MachineOperand *)v1810);
        int v753 = *(_DWORD *)(*((void *)v748 + 4) + 4);
        memset(&v1810[1], 0, 24);
        HIDWORD(v1810[0]) = v753;
        LODWORD(v1810[0]) = 0;
        llvm::MachineInstr::addOperand(v751, v749, (const llvm::MachineOperand *)v1810);
        LODWORD(v1810[0]) = 1;
        v1810[1] = 0;
        v1810[2] = (void *)2;
        llvm::MachineInstr::addOperand(v751, v749, (const llvm::MachineOperand *)v1810);
        memset(&v1810[1], 0, 24);
        HIDWORD(v1810[0]) = v601;
        LODWORD(v1810[0]) = 0;
        llvm::MachineInstr::addOperand(v751, v749, (const llvm::MachineOperand *)v1810);
        LODWORD(v1810[0]) = 1;
        v1810[1] = 0;
        v1810[2] = (void *)3;
        llvm::MachineInstr::addOperand(v751, v749, (const llvm::MachineOperand *)v1810);
        int v754 = 752;
        if (v602) {
          int v754 = 755;
        }
        int v755 = 746;
        if (v602) {
          int v755 = 749;
        }
        if (*((unsigned char *)v10 + 1654)) {
          unsigned int v756 = v754;
        }
        else {
          unsigned int v756 = v755;
        }
        v757 = (llvm::MachineFunction *)v603[1];
        uint64_t v758 = (uint64_t)&v603[2][1][6 * v756];
        v759 = (llvm::MachineInstr *)v603[4];
        v1798[0] = v759;
        if (v759) {
          llvm::MetadataTracking::track((uint64_t)v1798, (unsigned __int8 *)v759, 2);
        }
        v760 = llvm::MachineFunction::CreateMachineInstr(v757, v758, (unsigned __int8 **)v1798, 0);
        v761 = v1687;
        if (!v1798[0]) {
          goto LABEL_727;
        }
        int v1669 = *(unsigned __int8 *)v1798[0];
        if ((v1669 - 4) > 0x1E)
        {
          if ((v1669 - 3) >= 0xFFFFFFFE) {
            v1680 = v1798[0];
          }
          else {
            v1680 = 0;
          }
          if ((v1669 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1671 = (unint64_t)v1680 + 8;
LABEL_1987:
            v1810[0] = v1798;
            sub_1CC5FA668(v1671 + 16, v1810);
            v761 = v1687;
            goto LABEL_727;
          }
          v761 = v1687;
          if (v1669 == 3) {
            *((void *)v1798[0] + 1) = 0;
          }
        }
        else
        {
          v761 = v1687;
          if ((*((unsigned char *)v1798[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1798[0] + 3))
          {
            uint64_t v1670 = *((void *)v1798[0] + 2);
            if ((v1670 & 4) != 0)
            {
              unint64_t v1671 = v1670 & 0xFFFFFFFFFFFFFFF8;
              if (v1671) {
                goto LABEL_1987;
              }
            }
          }
        }
LABEL_727:
        v762 = v1774;
        v763 = (unint64_t *)v1775[6];
        v764 = v1775[5][5];
        *((void *)v760 + 3) = v764;
        v765 = v764[4];
        uint64_t v766 = *((unsigned int *)v760 + 10);
        if (v766)
        {
          uint64_t v1265 = *((void *)v760 + 4);
          v1266 = v765[5];
          uint64_t v1267 = 32 * v766;
          v762 = v1774;
          v761 = v1687;
          do
          {
            if (!*(unsigned char *)v1265)
            {
              uint64_t v1268 = *(unsigned int *)(v1265 + 4);
              if ((int)v1268 >= 0) {
                v1269 = (uint64_t *)(*((void *)v1266 + 34) + 8 * v1268);
              }
              else {
                v1269 = (uint64_t *)(*((void *)v1266 + 3) + 16 * (v1268 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1270 = *v1269;
              if (*v1269)
              {
                uint64_t v1271 = *(void *)(v1270 + 16);
                *(void *)(v1270 + 16) = v1265;
                *(void *)(v1265 + 16) = v1271;
                if (*(unsigned char *)(v1265 + 3))
                {
                  *(void *)(v1265 + 24) = v1270;
                }
                else
                {
                  *(void *)(v1265 + 24) = 0;
                  v1269 = (uint64_t *)(v1271 + 24);
                }
              }
              else
              {
                *(void *)(v1265 + 16) = v1265;
                *(void *)(v1265 + 24) = 0;
              }
              uint64_t *v1269 = v1265;
            }
            v1265 += 32;
            v1267 -= 32;
          }
          while (v1267);
        }
        v767 = v765[91];
        if (v767) {
          (*(void (**)(llvm::IntegerType *, llvm::MachineInstr *))(*(void *)v767 + 24))(v767, v760);
        }
        unint64_t v768 = *v763 & 0xFFFFFFFFFFFFFFF8;
        *(void *)v760 = v768 | *(void *)v760 & 7;
        *((void *)v760 + 1) = v763;
        *(void *)(v768 + 8) = v760;
        unint64_t *v763 = *v763 & 7 | (unint64_t)v760;
        v769 = v1775[7];
        if (v769) {
          ((void (*)(llvm::IntegerType ****, llvm::MachineInstr *))(*v769)[3])(v769, v760);
        }
        LODWORD(v1810[0]) = 1;
        v1810[2] = 0;
        v1810[1] = 0;
        llvm::MachineInstr::addOperand(v760, v757, (const llvm::MachineOperand *)v1810);
        if (v602)
        {
          memset(&v1810[1], 0, 24);
          HIDWORD(v1810[0]) = v1760;
          LODWORD(v1810[0]) = 0;
        }
        else
        {
          LODWORD(v1810[0]) = 1;
          v1810[1] = 0;
          v1810[2] = *(void **)v1771;
        }
        llvm::MachineInstr::addOperand(v760, v757, (const llvm::MachineOperand *)v1810);
        int v770 = *(_DWORD *)(*((void *)v751 + 4) + 4);
        memset(&v1810[1], 0, 24);
        HIDWORD(v1810[0]) = v770;
        LODWORD(v1810[0]) = 0;
        llvm::MachineInstr::addOperand(v760, v757, (const llvm::MachineOperand *)v1810);
        sub_1CC73B5D0(v760, (uint64_t)v1741, v761);
        goto LABEL_736;
      case 2471:
      case 2472:
      case 2473:
      case 2474:
      case 2475:
      case 2476:
      case 2477:
      case 2478:
        uint64_t v160 = v1774;
        if (sub_1CBA2F1F4((uint64_t)v1774, 1u, v16, 0, v1768, v1775, (uint64_t)v1751)) {
          goto LABEL_207;
        }
        return 0;
      case 2487:
        unsigned int v84 = v1774;
        uint64_t v87 = v1775;
        uint64_t v517 = *((void *)v1774 + 4);
        BOOL v22 = 1;
        LODWORD(v1798[0]) = *(_DWORD *)(v517 + 4);
        LODWORD(v1798[1]) = 1;
        LODWORD(v1810[0]) = *(_DWORD *)(v517 + 32 * (v6 + 1) + 4);
        LODWORD(v1810[2]) = 0;
        unint64_t v86 = (*v1775)[4];
        uint64_t v88 = 314;
        goto LABEL_112;
      case 2488:
      case 2579:
        uint64_t v291 = *((void *)v1774 + 4);
        int v292 = *(_DWORD *)(v291 + 68);
        if (v292 < 0
          && (v292 & 0x7FFFFFFFu) < *(_DWORD *)(v1768 + 432)
          && *(void *)(*(void *)(v1768 + 424) + 8 * (v292 & 0x7FFFFFFF)) == 9)
        {
          v1798[0] = (llvm::MachineInstr *)129;
          uint64_t v293 = v291 + 64;
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = v292;
          LODWORD(v1810[2]) = 0;
          sub_1CC738034(v1775, 118, (unint64_t *)v1798, (int *)v1810);
          uint64_t v295 = v294;
          (*(void (**)(llvm::ConstantFP *, llvm::MachineInstr *))(*(void *)v1751 + 32))(v1751, v1774);
          llvm::MachineOperand::setReg(v293, *(_DWORD *)(*(void *)(v295 + 32) + 4));
          (*(void (**)(llvm::ConstantFP *, llvm::MachineInstr *))(*(void *)v1751 + 40))(v1751, v1774);
        }
        return 1;
      case 2492:
        v635 = v1774;
        int v636 = *(_DWORD *)(*((void *)v1774 + 4) + 4);
        if (v636 < 0)
        {
          uint64_t v794 = v636 & 0x7FFFFFFF;
          v639 = v1775;
          char v637 = v15;
          if (v794 >= *(_DWORD *)(v1768 + 432)) {
            v638 = 0;
          }
          else {
            v638 = *(llvm::MachineInstr **)(*(void *)(v1768 + 424) + 8 * v794);
          }
        }
        else
        {
          char v637 = v15;
          v638 = 0;
          v639 = v1775;
        }
        v1105 = v1751;
        v1798[0] = (llvm::MachineInstr *)129;
        LODWORD(v1798[1]) = 0;
        v1106 = (llvm::MachineFunction *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void, void, void))(*v639)[4])(v639, 320, v1798, 1, 0, 0, 0);
        v1108 = v1107;
        LODWORD(v1810[0]) = 1;
        v1810[1] = 0;
        v1810[2] = (void *)34;
        llvm::MachineInstr::addOperand(v1107, v1106, (const llvm::MachineOperand *)v1810);
        if (((1 << v637) & 0x2C0) != 0)
        {
          if (v638 == (llvm::MachineInstr *)129)
          {
            v1109 = v1775;
          }
          else
          {
            v1798[0] = v638;
            LODWORD(v1798[1]) = 0;
            v1810[0] = v1106;
            v1810[1] = v1108;
            LODWORD(v1810[2]) = 1;
            v1109 = v1775;
            v1106 = (llvm::MachineFunction *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 126, v1798, 1, v1810, 1, 0);
            v1108 = v1110;
          }
          v1793[0] = v638;
          LODWORD(v1793[1]) = 0;
          unint64_t v1111 = ((unint64_t)v638 >> 3);
          if ((v638 & 1) == 0)
          {
            if ((v638 & 4) != 0)
            {
              if ((v638 & 2) != 0) {
                unint64_t v1111 = (unsigned __int16)((unint64_t)v638 >> 19);
              }
              else {
                unint64_t v1111 = ((unint64_t)v638 >> 19);
              }
            }
            else
            {
              unint64_t v1111 = (unsigned __int16)((unint64_t)v638 >> 3);
            }
          }
          uint64_t v1112 = llvm::IntegerType::get(***v1109[1], (llvm::LLVMContext *)v1111);
          v1114 = *(llvm::ConstantInt **)v1112;
          unsigned int v1115 = *(_DWORD *)(v1112 + 8);
          LODWORD(v1810[1]) = v1115 >> 8;
          if (v1115 >> 8 > 0x40) {
            operator new[]();
          }
          if (v1115 <= 0xFF) {
            LOBYTE(v1116) = 0;
          }
          else {
            unint64_t v1116 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1115) + 63);
          }
          v1810[0] = (void *)(v1116 & 8);
          v1117 = llvm::ConstantInt::get(v1114, (llvm::LLVMContext *)v1810, v1113);
          if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
            MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
          }
          v1118 = (void *)((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*v1775)[2])(v1775, v1793, v1117);
          v1798[0] = v638;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v1106;
          v1810[1] = v1108;
          LODWORD(v1810[2]) = 1;
          v1810[3] = v1118;
          v1810[4] = v1119;
          LODWORD(v1811) = 1;
          uint64_t v1120 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 47, v1798, 1, v1810, 2, 0);
          v1713 = v1121;
          v1720 = (void *)v1120;
          uint64_t v1122 = v1768;
          unsigned int v1123 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v1768, "", 0);
          unint64_t v1124 = v1123 & 0x7FFFFFFF;
          *(void *)(*(void *)(v1768 + 24) + 16 * v1124) = 4;
          unint64_t v1125 = *(unsigned int *)(v1768 + 432);
          if (v1124 >= v1125)
          {
            uint64_t v1126 = *(void *)(v1768 + 440);
            uint64_t v1127 = v1124 + 1 - v1125;
            if (v1124 >= *(unsigned int *)(v1768 + 436)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v1128 = *(_DWORD *)(v1768 + 432);
            if (v1127)
            {
              v1129 = (void *)(*(void *)(v1768 + 424) + 8 * *(unsigned int *)(v1768 + 432));
              uint64_t v1130 = ~v1124 + v1125;
              do
              {
                *v1129++ = v1126;
                BOOL v523 = __CFADD__(v1130++, 1);
              }
              while (!v523);
              int v1128 = *(_DWORD *)(v1768 + 432);
            }
            uint64_t v1122 = v1768;
            *(_DWORD *)(v1768 + 432) = v1128 + v1127;
          }
          *(void *)(*(void *)(v1122 + 424) + 8 * v1124) = v638;
          uint64_t v1131 = *(void *)(v1122 + 8);
          v635 = v1774;
          v1105 = v1751;
          if (v1131) {
            (*(void (**)(uint64_t, void))(*(void *)v1131 + 24))(v1131, v1123);
          }
          LODWORD(v1810[0]) = v1123;
          v1132 = sub_1CC7390C0(v1775, 2586, (int *)v1810, 1, 0);
          v1793[0] = v638;
          LODWORD(v1793[1]) = 0;
          v1810[0] = v1132;
          v1810[1] = v1133;
          LODWORD(v1810[2]) = 1;
          *(void *)&long long v1795 = v638;
          DWORD2(v1795) = 0;
          unint64_t v1134 = (unsigned __int16)((unint64_t)v638 >> 19);
          if ((v638 & 2) == 0) {
            unint64_t v1134 = ((unint64_t)v638 >> 19);
          }
          if ((v638 & 4) == 0) {
            unint64_t v1134 = (unsigned __int16)((unint64_t)v638 >> 3);
          }
          if (v638) {
            unint64_t v1135 = ((unint64_t)v638 >> 3);
          }
          else {
            unint64_t v1135 = v1134;
          }
          uint64_t v1136 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)v1135);
          v1138 = *(llvm::ConstantInt **)v1136;
          unsigned int v1139 = *(_DWORD *)(v1136 + 8);
          LODWORD(v1798[1]) = v1139 >> 8;
          if (v1139 >> 8 > 0x40) {
            operator new[]();
          }
          if (v1139 <= 0xFF) {
            LOBYTE(v1140) = 0;
          }
          else {
            unint64_t v1140 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1139) + 63);
          }
          v1798[0] = (llvm::MachineInstr *)(v1140 & 2);
          v1141 = llvm::ConstantInt::get(v1138, (llvm::LLVMContext *)v1798, v1137);
          if (LODWORD(v1798[1]) >= 0x41 && v1798[0]) {
            MEMORY[0x1D25D9CB0](v1798[0], 0x1000C8000313F17);
          }
          v1810[3] = (void *)((uint64_t (*)(llvm::IntegerType *****, long long *, void *))(*v1775)[2])(v1775, &v1795, v1141);
          v1810[4] = v1142;
          LODWORD(v1811) = 1;
          v1143 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 128, v1793, 1, v1810, 2, 0);
          v1798[0] = v638;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v1720;
          v1810[1] = v1713;
          LODWORD(v1810[2]) = 1;
          v1810[3] = v1143;
          v1810[4] = v1144;
          LODWORD(v1811) = 1;
          ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 45, v1798, 1, v1810, 2, 0);
          goto LABEL_1027;
        }
        if (v638 != (llvm::MachineInstr *)129)
        {
          v1798[0] = v638;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v1106;
          v1810[1] = v1108;
          LODWORD(v1810[2]) = 1;
          ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 126, v1798, 1, v1810, 1, 0);
LABEL_1027:
          v1108 = v1145;
        }
        unsigned int v281 = *(_DWORD *)(*((void *)v1108 + 4) + 4);
        unsigned int v282 = (void *)v1768;
        uint64_t v283 = v635;
        uint64_t v280 = (uint64_t)v1105;
        goto LABEL_368;
      case 2517:
        goto LABEL_370;
      case 2522:
        uint64_t v391 = v1774;
        uint64_t v518 = v1775;
        int v519 = *(_DWORD *)(*((void *)v1774 + 4) + 4);
        uint64_t v520 = *(void *)(*((void *)v1774 + 3) + 16);
        if (!v520) {
          goto LABEL_500;
        }
        while (1)
        {
          uint64_t v520 = *(void *)(v520 + 8);
          if (!v520) {
            break;
          }
          uint64_t v521 = *(void *)(v520 + 24);
          unsigned int v522 = *(unsigned __int8 *)(v521 + 16);
          if (v521) {
            BOOL v523 = v522 >= 0x1C;
          }
          else {
            BOOL v523 = 0;
          }
          if (v523 && v522 - 29 < 0xB)
          {
LABEL_500:
            v1798[0] = (llvm::MachineInstr *)129;
            LODWORD(v1798[1]) = 0;
            LODWORD(v1810[0]) = 313;
            LODWORD(v1810[2]) = 0;
            uint64_t v525 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 19, v1798, 1, v1810, 1, 0);
            uint64_t v527 = v526;
            if (*((unsigned char *)v10 + 1654))
            {
              int v528 = (void *)v525;
              v1798[0] = (llvm::MachineInstr *)129;
              LODWORD(v1798[1]) = 0;
              uint64_t v529 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x10);
              v531 = *(llvm::ConstantInt **)v529;
              unsigned int v532 = *(_DWORD *)(v529 + 8);
              LODWORD(v1810[1]) = v532 >> 8;
              if (v532 >> 8 >= 0x41) {
                operator new[]();
              }
              v1810[0] = 0;
              v533 = llvm::ConstantInt::get(v531, (llvm::LLVMContext *)v1810, v530);
              if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
                MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
              }
              uint64_t v534 = ((uint64_t (*)(llvm::IntegerType *****, llvm::MachineInstr **, void *))(*v1775)[2])(v1775, v1798, v533);
              v536 = v535;
              v1798[0] = (llvm::MachineInstr *)129;
              LODWORD(v1798[1]) = 0;
              uint64_t v537 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x10);
              v539 = *(llvm::ConstantInt **)v537;
              unsigned int v540 = *(_DWORD *)(v537 + 8);
              LODWORD(v1810[1]) = v540 >> 8;
              if (v540 >> 8 > 0x40) {
                operator new[]();
              }
              if (v540 <= 0xFF) {
                LOBYTE(v541) = 0;
              }
              else {
                unint64_t v541 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v540) + 63);
              }
              v1810[0] = (void *)(v541 & 1);
              v542 = llvm::ConstantInt::get(v539, (llvm::LLVMContext *)v1810, v538);
              if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
                MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
              }
              uint64_t v543 = ((uint64_t (*)(llvm::IntegerType *****, llvm::MachineInstr **, void *))(*v1775)[2])(v1775, v1798, v542);
              v1798[0] = (llvm::MachineInstr *)129;
              LODWORD(v1798[1]) = 0;
              LODWORD(v1810[0]) = 32;
              LODWORD(v1810[2]) = 2;
              v1810[3] = v528;
              v1810[4] = v527;
              LODWORD(v1811) = 1;
              *((void *)&v1811 + 1) = v534;
              *(void *)&long long v1812 = v536;
              DWORD2(v1812) = 1;
              uint64_t v1813 = v543;
              v1814 = v544;
              int v1815 = 1;
              uint64_t v1816 = v534;
              v1817 = v536;
              int v1818 = 1;
              ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 51, v1798, 1, v1810, 5, 0);
              uint64_t v546 = v545;
              uint64_t v547 = v1768;
              unsigned int v548 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v1768, "", 0);
              unint64_t v549 = v548 & 0x7FFFFFFF;
              *(void *)(*(void *)(v1768 + 24) + 16 * v549) = 4;
              v550 = (void *)(v1768 + 424);
              unint64_t v551 = *(unsigned int *)(v1768 + 432);
              if (v549 >= v551)
              {
                uint64_t v552 = *(void *)(v1768 + 440);
                uint64_t v553 = v549 + 1 - v551;
                if (v549 >= *(unsigned int *)(v1768 + 436)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                int v554 = *(_DWORD *)(v1768 + 432);
                if (v553)
                {
                  v555 = (void *)(*v550 + 8 * *(unsigned int *)(v1768 + 432));
                  uint64_t v556 = ~v549 + v551;
                  do
                  {
                    *v555++ = v552;
                    BOOL v523 = __CFADD__(v556++, 1);
                  }
                  while (!v523);
                  int v554 = *(_DWORD *)(v1768 + 432);
                }
                uint64_t v547 = v1768;
                *(_DWORD *)(v1768 + 432) = v554 + v553;
              }
              *(void *)(*(void *)(v547 + 424) + 8 * v549) = 257;
              uint64_t v557 = *(void *)(v547 + 8);
              if (v557) {
                (*(void (**)(uint64_t, void))(*(void *)v557 + 24))(v557, v548);
              }
              LODWORD(v1810[0]) = v548;
              v558 = sub_1CC7390C0(v1775, 2579, (int *)v1810, 1, 0);
              v560 = v559;
              int v561 = *(_DWORD *)(*(void *)(v546 + 32) + 4);
              memset(&v1810[1], 0, 24);
              HIDWORD(v1810[0]) = v561;
              LODWORD(v1810[0]) = 0;
              llvm::MachineInstr::addOperand(v559, v558, (const llvm::MachineOperand *)v1810);
              unsigned int v562 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v547, "", 0);
              unint64_t v563 = v562 & 0x7FFFFFFF;
              *(void *)(*(void *)(v547 + 24) + 16 * v563) = 4;
              unint64_t v564 = *(unsigned int *)(v547 + 432);
              if (v563 >= v564)
              {
                uint64_t v565 = *(void *)(v547 + 440);
                uint64_t v566 = v563 + 1 - v564;
                if (v563 >= *(unsigned int *)(v547 + 436)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                int v567 = *(_DWORD *)(v547 + 432);
                if (v566)
                {
                  v568 = (void *)(*v550 + 8 * *(unsigned int *)(v547 + 432));
                  uint64_t v569 = ~v563 + v564;
                  do
                  {
                    *v568++ = v565;
                    BOOL v523 = __CFADD__(v569++, 1);
                  }
                  while (!v523);
                  int v567 = *(_DWORD *)(v1768 + 432);
                }
                uint64_t v547 = v1768;
                *(_DWORD *)(v1768 + 432) = v567 + v566;
              }
              *(void *)(*(void *)(v547 + 424) + 8 * v563) = 257;
              uint64_t v570 = *(void *)(v547 + 8);
              if (v570) {
                (*(void (**)(uint64_t, void))(*(void *)v570 + 24))(v570, v562);
              }
              LODWORD(v1810[0]) = v562;
              v571 = sub_1CC7390C0(v1775, 2524, (int *)v1810, 1, 0);
              v573 = v572;
              int v574 = *(_DWORD *)(*((void *)v560 + 4) + 4);
              memset(&v1810[1], 0, 24);
              HIDWORD(v1810[0]) = v574;
              LODWORD(v1810[0]) = 0;
              llvm::MachineInstr::addOperand(v572, v571, (const llvm::MachineOperand *)v1810);
              unsigned int v575 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v547, "", 0);
              unint64_t v576 = v575 & 0x7FFFFFFF;
              *(void *)(*(void *)(v547 + 24) + 16 * v576) = 4;
              unint64_t v577 = *(unsigned int *)(v547 + 432);
              if (v576 >= v577)
              {
                uint64_t v578 = *(void *)(v547 + 440);
                uint64_t v579 = v576 + 1 - v577;
                if (v576 >= *(unsigned int *)(v547 + 436)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                int v580 = *(_DWORD *)(v547 + 432);
                if (v579)
                {
                  v581 = (void *)(*v550 + 8 * *(unsigned int *)(v547 + 432));
                  uint64_t v582 = ~v576 + v577;
                  do
                  {
                    *v581++ = v578;
                    BOOL v523 = __CFADD__(v582++, 1);
                  }
                  while (!v523);
                  int v580 = *(_DWORD *)(v1768 + 432);
                }
                uint64_t v547 = v1768;
                *(_DWORD *)(v1768 + 432) = v580 + v579;
              }
              *(void *)(*(void *)(v547 + 424) + 8 * v576) = 257;
              uint64_t v583 = *(void *)(v547 + 8);
              uint64_t v59 = v1774;
              if (v583) {
                (*(void (**)(uint64_t, void))(*(void *)v583 + 24))(v583, v575);
              }
              LODWORD(v1810[0]) = v575;
              v584 = sub_1CC7390C0(v1775, 2168, (int *)v1810, 1, 0);
              v586 = v585;
              int v587 = *(_DWORD *)(*((void *)v573 + 4) + 4);
              memset(&v1810[1], 0, 24);
              HIDWORD(v1810[0]) = v587;
              LODWORD(v1810[0]) = 0;
              llvm::MachineInstr::addOperand(v585, v584, (const llvm::MachineOperand *)v1810);
              v1798[0] = (llvm::MachineInstr *)129;
              LODWORD(v1798[1]) = 0;
              v1810[0] = v584;
              v1810[1] = v586;
              LODWORD(v1810[2]) = 1;
              v588 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 119, v1798, 1, v1810, 1, 0);
              v590 = v589;
              v1793[0] = (void *)129;
              LODWORD(v1793[1]) = 0;
              uint64_t v591 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x10);
              v593 = *(llvm::ConstantInt **)v591;
              unsigned int v594 = *(_DWORD *)(v591 + 8);
              LODWORD(v1810[1]) = v594 >> 8;
              if (v594 >> 8 > 0x40) {
                operator new[]();
              }
              if (v594 <= 0xFF) {
                LOBYTE(v595) = 0;
              }
              else {
                unint64_t v595 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v594) + 63);
              }
              v1810[0] = (void *)(v595 & 0x1F);
              v596 = llvm::ConstantInt::get(v593, (llvm::LLVMContext *)v1810, v592);
              if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
                MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
              }
              v597 = (void *)((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*v1775)[2])(v1775, v1793, v596);
              LODWORD(v1798[0]) = v519;
              LODWORD(v1798[1]) = 1;
              v1810[0] = v597;
              v1810[1] = v598;
              LODWORD(v1810[2]) = 1;
              v1810[3] = v588;
              v1810[4] = v590;
              LODWORD(v1811) = 1;
              ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 46, v1798, 1, v1810, 2, 0);
            }
            else
            {
              v1798[0] = (llvm::MachineInstr *)129;
              LODWORD(v1798[1]) = 0;
              uint64_t v913 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x10);
              v915 = *(llvm::ConstantInt **)v913;
              unsigned int v916 = *(_DWORD *)(v913 + 8);
              LODWORD(v1810[1]) = v916 >> 8;
              if (v916 >> 8 >= 0x41) {
                operator new[]();
              }
              v1810[0] = 0;
              v917 = llvm::ConstantInt::get(v915, (llvm::LLVMContext *)v1810, v914);
              if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
                MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
              }
              *(void *)v1735 = ((uint64_t (*)(llvm::IntegerType *****, llvm::MachineInstr **, void *))(*v1775)[2])(v1775, v1798, v917);
              v919 = v918;
              v1798[0] = (llvm::MachineInstr *)129;
              LODWORD(v1798[1]) = 0;
              uint64_t v920 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x10);
              v922 = *(llvm::ConstantInt **)v920;
              unsigned int v923 = *(_DWORD *)(v920 + 8);
              LODWORD(v1810[1]) = v923 >> 8;
              if (v923 >> 8 > 0x40) {
                operator new[]();
              }
              if (v923 <= 0xFF) {
                LOBYTE(v924) = 0;
              }
              else {
                unint64_t v924 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v923) + 63);
              }
              v1810[0] = (void *)(v924 & 1);
              v925 = llvm::ConstantInt::get(v922, (llvm::LLVMContext *)v1810, v921);
              if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
                MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
              }
              uint64_t v1718 = ((uint64_t (*)(llvm::IntegerType *****, llvm::MachineInstr **, void *))(*v1775)[2])(v1775, v1798, v925);
              v927 = v926;
              v1798[0] = (llvm::MachineInstr *)129;
              LODWORD(v1798[1]) = 0;
              uint64_t v928 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x10);
              v930 = *(llvm::ConstantInt **)v928;
              unsigned int v931 = *(_DWORD *)(v928 + 8);
              LODWORD(v1810[1]) = v931 >> 8;
              if (v931 >> 8 > 0x40) {
                operator new[]();
              }
              if (v931 <= 0xFF) {
                LOBYTE(v932) = 0;
              }
              else {
                unint64_t v932 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v931) + 63);
              }
              v1810[0] = (void *)(v932 & 2);
              v933 = llvm::ConstantInt::get(v930, (llvm::LLVMContext *)v1810, v929);
              if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
                MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
              }
              uint64_t v934 = ((uint64_t (*)(llvm::IntegerType *****, llvm::MachineInstr **, void *))(*v1775)[2])(v1775, v1798, v933);
              v1701 = v935;
              uint64_t v1707 = v934;
              v1798[0] = (llvm::MachineInstr *)129;
              LODWORD(v1798[1]) = 0;
              uint64_t v936 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x10);
              v938 = *(llvm::ConstantInt **)v936;
              unsigned int v939 = *(_DWORD *)(v936 + 8);
              LODWORD(v1810[1]) = v939 >> 8;
              if (v939 >> 8 > 0x40) {
                operator new[]();
              }
              if (v939 <= 0xFF) {
                LOBYTE(v940) = 0;
              }
              else {
                unint64_t v940 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v939) + 63);
              }
              v1810[0] = (void *)(v940 & 3);
              v941 = llvm::ConstantInt::get(v938, (llvm::LLVMContext *)v1810, v937);
              if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
                MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
              }
              uint64_t v942 = ((uint64_t (*)(llvm::IntegerType *****, llvm::MachineInstr **, void *))(*v1775)[2])(v1775, v1798, v941);
              v1695 = v943;
              uint64_t v1698 = v942;
              unsigned int v944 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v1768, "", 0);
              unint64_t v945 = v944 & 0x7FFFFFFF;
              *(void *)(*(void *)(v1768 + 24) + 16 * v945) = 4;
              v1754 = v927;
              v1762 = (void *)(v1768 + 424);
              uint64_t v946 = v1768;
              unint64_t v947 = *(unsigned int *)(v1768 + 432);
              if (v945 >= v947)
              {
                uint64_t v948 = *(void *)(v1768 + 440);
                uint64_t v949 = v945 + 1 - v947;
                if (v945 >= *(unsigned int *)(v1768 + 436)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                int v950 = *(_DWORD *)(v1768 + 432);
                if (v949)
                {
                  v951 = (void *)(*v1762 + 8 * v947);
                  uint64_t v952 = ~v945 + v947;
                  do
                  {
                    *v951++ = v948;
                    BOOL v523 = __CFADD__(v952++, 1);
                  }
                  while (!v523);
                  int v950 = *(_DWORD *)(v1768 + 432);
                }
                uint64_t v946 = v1768;
                *(_DWORD *)(v1768 + 432) = v950 + v949;
              }
              *(void *)(*(void *)(v946 + 424) + 8 * v945) = 129;
              uint64_t v953 = *(void *)(v946 + 8);
              uint64_t v954 = v946;
              if (v953) {
                (*(void (**)(uint64_t, void))(*(void *)v953 + 24))(v953, v944);
              }
              LODWORD(v1810[0]) = v944;
              v955 = sub_1CC7390C0(v1775, 2584, (int *)v1810, 1, 0);
              v957 = v956;
              int v958 = *(_DWORD *)(v527[4] + 4);
              memset(&v1810[1], 0, 24);
              HIDWORD(v1810[0]) = v958;
              LODWORD(v1810[0]) = 0;
              llvm::MachineInstr::addOperand(v956, v955, (const llvm::MachineOperand *)v1810);
              int v959 = *(_DWORD *)(*((void *)v919 + 4) + 4);
              memset(&v1810[1], 0, 24);
              HIDWORD(v1810[0]) = v959;
              LODWORD(v1810[0]) = 0;
              v1688 = v957;
              v1691 = v955;
              llvm::MachineInstr::addOperand(v957, v955, (const llvm::MachineOperand *)v1810);
              unsigned int v960 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v954, "", 0);
              unint64_t v961 = v960 & 0x7FFFFFFF;
              *(void *)(*(void *)(v954 + 24) + 16 * v961) = 4;
              uint64_t v962 = v954;
              unint64_t v963 = *(unsigned int *)(v954 + 432);
              if (v961 >= v963)
              {
                uint64_t v964 = *(void *)(v954 + 440);
                uint64_t v965 = v961 + 1 - v963;
                if (v961 >= *(unsigned int *)(v962 + 436)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                int v966 = v963;
                if (v965)
                {
                  v967 = (void *)(*v1762 + 8 * v963);
                  uint64_t v968 = ~v961 + v963;
                  do
                  {
                    *v967++ = v964;
                    BOOL v523 = __CFADD__(v968++, 1);
                  }
                  while (!v523);
                  int v966 = *(_DWORD *)(v1768 + 432);
                }
                uint64_t v962 = v1768;
                *(_DWORD *)(v1768 + 432) = v966 + v965;
              }
              int v1744 = v519;
              *(void *)(*(void *)(v962 + 424) + 8 * v961) = 129;
              uint64_t v969 = *(void *)(v962 + 8);
              uint64_t v970 = v962;
              if (v969) {
                (*(void (**)(uint64_t, void))(*(void *)v969 + 24))(v969, v960);
              }
              LODWORD(v1810[0]) = v960;
              v971 = sub_1CC7390C0(v1775, 2584, (int *)v1810, 1, 0);
              v973 = v972;
              v1711 = v527;
              int v974 = *(_DWORD *)(v527[4] + 4);
              memset(&v1810[1], 0, 24);
              HIDWORD(v1810[0]) = v974;
              LODWORD(v1810[0]) = 0;
              llvm::MachineInstr::addOperand(v972, v971, (const llvm::MachineOperand *)v1810);
              int v975 = *(_DWORD *)(*((void *)v927 + 4) + 4);
              memset(&v1810[1], 0, 24);
              HIDWORD(v1810[0]) = v975;
              LODWORD(v1810[0]) = 0;
              llvm::MachineInstr::addOperand(v973, v971, (const llvm::MachineOperand *)v1810);
              unsigned int v976 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v970, "", 0);
              unint64_t v977 = v976 & 0x7FFFFFFF;
              *(void *)(*(void *)(v970 + 24) + 16 * v977) = 4;
              unint64_t v978 = *(unsigned int *)(v970 + 432);
              if (v977 >= v978)
              {
                uint64_t v979 = v970;
                uint64_t v980 = *(void *)(v970 + 440);
                uint64_t v981 = v977 + 1 - v978;
                if (v977 >= *(unsigned int *)(v979 + 436)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                int v982 = v978;
                if (v981)
                {
                  v983 = (void *)(*v1762 + 8 * v978);
                  uint64_t v984 = ~v977 + v978;
                  do
                  {
                    *v983++ = v980;
                    BOOL v523 = __CFADD__(v984++, 1);
                  }
                  while (!v523);
                  int v982 = *(_DWORD *)(v1768 + 432);
                }
                int v985 = v982 + v981;
                uint64_t v970 = v1768;
                *(_DWORD *)(v1768 + 432) = v985;
              }
              *(void *)(*(void *)(v970 + 424) + 8 * v977) = 129;
              uint64_t v986 = *(void *)(v970 + 8);
              if (v986) {
                (*(void (**)(uint64_t, void))(*(void *)v986 + 24))(v986, v976);
              }
              LODWORD(v1810[0]) = v976;
              v987 = v1775;
              v988 = sub_1CC7390C0(v1775, 2584, (int *)v1810, 1, 0);
              v990 = v989;
              int v991 = *(_DWORD *)(v1711[4] + 4);
              memset(&v1810[1], 0, 24);
              HIDWORD(v1810[0]) = v991;
              LODWORD(v1810[0]) = 0;
              llvm::MachineInstr::addOperand(v989, v988, (const llvm::MachineOperand *)v1810);
              int v992 = *(_DWORD *)(*((void *)v1701 + 4) + 4);
              memset(&v1810[1], 0, 24);
              HIDWORD(v1810[0]) = v992;
              LODWORD(v1810[0]) = 0;
              llvm::MachineInstr::addOperand(v990, v988, (const llvm::MachineOperand *)v1810);
              v1798[0] = (llvm::MachineInstr *)129;
              LODWORD(v1798[1]) = 0;
              LODWORD(v1810[0]) = 32;
              LODWORD(v1810[2]) = 2;
              v1810[3] = v988;
              v1810[4] = v990;
              LODWORD(v1811) = 1;
              *((void *)&v1811 + 1) = *(void *)v1735;
              *(void *)&long long v1812 = v919;
              DWORD2(v1812) = 1;
              uint64_t v1813 = v1707;
              v1814 = v1701;
              int v1815 = 1;
              uint64_t v1816 = v1698;
              v1817 = v1695;
              int v1818 = 1;
              uint64_t v993 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v987)[4])(v987, 51, v1798, 1, v1810, 5, 0);
              v1798[0] = (llvm::MachineInstr *)129;
              LODWORD(v1798[1]) = 0;
              LODWORD(v1810[0]) = 32;
              LODWORD(v1810[2]) = 2;
              v1810[3] = v971;
              v1810[4] = v973;
              LODWORD(v1811) = 1;
              *((void *)&v1811 + 1) = *(void *)v1735;
              *(void *)&long long v1812 = v919;
              DWORD2(v1812) = 1;
              uint64_t v1813 = v1718;
              v1814 = v1754;
              int v1815 = 1;
              uint64_t v1816 = v993;
              v1817 = v994;
              int v1818 = 1;
              uint64_t v995 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v987)[4])(v987, 51, v1798, 1, v1810, 5, 0);
              LODWORD(v1798[0]) = v1744;
              LODWORD(v1798[1]) = 1;
              LODWORD(v1810[0]) = 32;
              LODWORD(v1810[2]) = 2;
              v1810[3] = v1691;
              v1810[4] = v1688;
              LODWORD(v1811) = 1;
              *((void *)&v1811 + 1) = *(void *)v1735;
              *(void *)&long long v1812 = v919;
              DWORD2(v1812) = 1;
              uint64_t v1813 = *(void *)v1735;
              v1814 = v919;
              int v1815 = 1;
              uint64_t v1816 = v995;
              v1817 = v996;
              int v1818 = 1;
              ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v987)[4])(v987, 51, v1798, 1, v1810, 5, 0);
              uint64_t v59 = v1774;
            }
            goto LABEL_263;
          }
        }
        LODWORD(v1798[0]) = *(_DWORD *)(*((void *)v1774 + 4) + 4);
        LODWORD(v1798[1]) = 1;
        if (v519 < 0 && (v733 = v1775[3], (v519 & 0x7FFFFFFFu) < *((_DWORD *)v733 + 108)))
        {
          unint64_t v734 = (unint64_t)v733[53][v519 & 0x7FFFFFFF];
          if (v734)
          {
            unint64_t v735 = (v734 >> 3);
            goto LABEL_711;
          }
          if ((v734 & 4) != 0)
          {
            if ((v734 & 2) != 0) {
              unint64_t v735 = (unsigned __int16)(v734 >> 19);
            }
            else {
              unint64_t v735 = (v734 >> 19);
            }
LABEL_1619:
            uint64_t v391 = v1774;
            uint64_t v518 = v1775;
LABEL_711:
            uint64_t v736 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)v735);
            v738 = *(llvm::ConstantInt **)v736;
            unsigned int v739 = *(_DWORD *)(v736 + 8);
            LODWORD(v1810[1]) = v739 >> 8;
            if (v739 >> 8 >= 0x41) {
              operator new[]();
            }
            v1810[0] = 0;
            v740 = llvm::ConstantInt::get(v738, (llvm::LLVMContext *)v1810, v737);
            if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
              MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
            }
            ((void (*)(llvm::IntegerType *****, llvm::MachineInstr **, void *))(*v518)[2])(v518, v1798, v740);
LABEL_714:
            uint64_t v161 = v391;
            goto LABEL_264;
          }
        }
        else
        {
          unint64_t v734 = 0;
        }
        unint64_t v735 = (unsigned __int16)(v734 >> 3);
        goto LABEL_1619;
      case 2526:
        goto LABEL_458;
      case 2545:
      case 2546:
      case 2547:
      case 2548:
      case 2549:
      case 2550:
      case 2551:
      case 2552:
      case 2553:
      case 2554:
      case 2555:
      case 2556:
      case 2557:
      case 2558:
      case 2559:
      case 2560:
      case 2561:
      case 2562:
      case 2563:
      case 2564:
      case 2565:
      case 2566:
      case 2567:
      case 2568:
      case 2569:
      case 2570:
      case 2571:
      case 2572:
      case 2573:
      case 2574:
      case 2575:
      case 2576:
        unsigned int v84 = v1774;
        uint64_t v85 = sub_1CBA2F1F4((uint64_t)v1774, 0, v16, 0, v1768, v1775, (uint64_t)v1751);
        if (!v85) {
          return 0;
        }
        BOOL v22 = 1;
        LODWORD(v1798[0]) = *(_DWORD *)(*((void *)v1774 + 4) + 4);
        LODWORD(v1798[1]) = 1;
        LODWORD(v1810[0]) = *(_DWORD *)(*(void *)(v85 + 32) + 4);
        LODWORD(v1810[2]) = 0;
        unint64_t v86 = (*v1775)[4];
        uint64_t v87 = v1775;
        uint64_t v88 = 19;
        goto LABEL_112;
      case 2606:
      case 2607:
      case 2608:
      case 2609:
        unsigned int v84 = v1774;
        sub_1CC73C210(*(_DWORD *)(*((void *)v1774 + 4) + 100), v1768, (uint64_t)v1810);
        if (!LOBYTE(v1810[2])) {
          goto LABEL_266;
        }
        uint64_t v280 = (uint64_t)v1751;
        if (LODWORD(v1810[1]) >= 0x41)
        {
          if (v1810[0]) {
            MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
          }
          unsigned int v84 = v1774;
LABEL_266:
          uint64_t v189 = (uint64_t)v9[6];
          if (!v189)
          {
            uint64_t v189 = ((uint64_t (*)(llvm::ConstantFP ***, llvm::ConstantFP ****, llvm::ConstantFP ****))(*v9[1])[27])(v9[1], v9 + 16, v9);
            v9[6] = (llvm::ConstantFP ***)v189;
          }
          *(unsigned char *)(v189 + 453) = 1;
        }
        else if (!((uint64_t)v1810[0] << -(uint64_t)LODWORD(v1810[1]) >> -(uint64_t)LODWORD(v1810[1])))
        {
          unsigned int v281 = *(_DWORD *)(*((void *)v1774 + 4) + 68);
          unsigned int v282 = (void *)v1768;
          uint64_t v283 = v1774;
LABEL_368:
          sub_1CBA0A7C8(v282, v283, v281, v280);
          return 1;
        }
        uint64_t v490 = dword_1CDB0E0D0[v1758 - 2606];
        unint64_t v491 = (_DWORD *)*((void *)v84 + 4);
        BOOL v22 = 1;
        LODWORD(v1798[0]) = v491[1];
        LODWORD(v1798[1]) = 1;
        LODWORD(v1810[0]) = v491[17];
        LODWORD(v1810[2]) = 0;
        LODWORD(v1810[3]) = v491[25];
        LODWORD(v1811) = 0;
        DWORD2(v1811) = v491[33];
        DWORD2(v1812) = 0;
        LODWORD(v1813) = v491[41];
        int v1815 = 0;
        ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, v490, v1798, 1, v1810, 4, 0);
        goto LABEL_271;
      case 2616:
      case 2617:
        uint64_t v296 = (_DWORD *)*((void *)v1774 + 4);
        int v297 = v296[1];
        int v1706 = v297;
        if (v297 < 0)
        {
          uint64_t v300 = v1768;
          uint64_t v299 = v1775;
          if ((v297 & 0x7FFFFFFFu) >= *(_DWORD *)(v1768 + 432))
          {
            uint64_t v298 = 0;
            int v704 = 2581;
          }
          else
          {
            uint64_t v298 = *(llvm::MachineInstr **)(*(void *)(v1768 + 424) + 8 * (v297 & 0x7FFFFFFF));
            if (v298 == (llvm::MachineInstr *)129) {
              int v704 = 2580;
            }
            else {
              int v704 = 2581;
            }
          }
          int v1753 = v704;
        }
        else
        {
          uint64_t v298 = 0;
          int v1753 = 2581;
          uint64_t v299 = v1775;
          uint64_t v300 = v1768;
        }
        int v1743 = v296[17];
        int v1761 = v296[25];
        v1793[0] = (void *)129;
        LODWORD(v1793[1]) = 0;
        uint64_t v795 = llvm::IntegerType::get(***v299[1], (llvm::LLVMContext *)0x10);
        v797 = *(llvm::ConstantInt **)v795;
        unsigned int v798 = *(_DWORD *)(v795 + 8);
        LODWORD(v1810[1]) = v798 >> 8;
        if (v798 >> 8 > 0x40) {
          operator new[]();
        }
        if (v798 <= 0xFF) {
          LOBYTE(v799) = 0;
        }
        else {
          unint64_t v799 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v798) + 63);
        }
        v1810[0] = (void *)(v799 & 0x1C);
        v1734 = v298;
        v800 = llvm::ConstantInt::get(v797, (llvm::LLVMContext *)v1810, v796);
        if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
          MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
        }
        v801 = (void *)((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*v299)[2])(v299, v1793, v800);
        v1798[0] = (llvm::MachineInstr *)129;
        LODWORD(v1798[1]) = 0;
        LODWORD(v1810[0]) = v1761;
        LODWORD(v1810[2]) = 0;
        v1810[3] = v801;
        v1810[4] = v802;
        LODWORD(v1811) = 1;
        v803 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v299)[4])(v299, 65, v1798, 1, v1810, 2, 0);
        v805 = v804;
        unsigned int v806 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v300, "", 0);
        unint64_t v807 = v806 & 0x7FFFFFFF;
        *(void *)(*(void *)(v300 + 24) + 16 * v807) = 4;
        v1725 = (void *)(v300 + 424);
        unint64_t v808 = *(unsigned int *)(v300 + 432);
        if (v807 >= v808)
        {
          uint64_t v809 = *(void *)(v300 + 440);
          uint64_t v810 = v300;
          uint64_t v811 = v807 + 1 - v808;
          if (v807 >= *(unsigned int *)(v810 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v812 = v808;
          if (v811)
          {
            v813 = (void *)(*v1725 + 8 * v808);
            uint64_t v814 = ~v807 + v808;
            do
            {
              *v813++ = v809;
              BOOL v523 = __CFADD__(v814++, 1);
            }
            while (!v523);
            int v812 = *(_DWORD *)(v1768 + 432);
          }
          int v815 = v812 + v811;
          uint64_t v300 = v1768;
          *(_DWORD *)(v1768 + 432) = v815;
        }
        *(void *)(*(void *)(v300 + 424) + 8 * v807) = v1734;
        uint64_t v816 = *(void *)(v300 + 8);
        if (v816) {
          (*(void (**)(uint64_t, void))(*(void *)v816 + 24))(v816, v806);
        }
        LODWORD(v1810[0]) = v806;
        v817 = sub_1CC7390C0(v1775, v1753, (int *)v1810, 1, 0);
        v819 = v818;
        memset(&v1810[1], 0, 24);
        HIDWORD(v1810[0]) = v1743;
        LODWORD(v1810[0]) = 0;
        llvm::MachineInstr::addOperand(v818, v817, (const llvm::MachineOperand *)v1810);
        int v820 = *(_DWORD *)(v805[4] + 4);
        memset(&v1810[1], 0, 24);
        HIDWORD(v1810[0]) = v820;
        LODWORD(v1810[0]) = 0;
        llvm::MachineInstr::addOperand(v819, v817, (const llvm::MachineOperand *)v1810);
        v1798[0] = (llvm::MachineInstr *)129;
        LODWORD(v1798[1]) = 0;
        uint64_t v821 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x10);
        v823 = *(llvm::ConstantInt **)v821;
        unsigned int v824 = *(_DWORD *)(v821 + 8);
        LODWORD(v1810[1]) = v824 >> 8;
        if (v824 >> 8 > 0x40) {
          operator new[]();
        }
        if (v824 <= 0xFF) {
          LOBYTE(v825) = 0;
        }
        else {
          unint64_t v825 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v824) + 63);
        }
        v1810[0] = (void *)(v825 & 1);
        v826 = llvm::ConstantInt::get(v823, (llvm::LLVMContext *)v1810, v822);
        if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
          MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
        }
        v827 = (void *)((uint64_t (*)(llvm::IntegerType *****, llvm::MachineInstr **, void *))(*v1775)[2])(v1775, v1798, v826);
        v1798[0] = (llvm::MachineInstr *)129;
        LODWORD(v1798[1]) = 0;
        v1810[0] = v803;
        v1810[1] = v805;
        LODWORD(v1810[2]) = 1;
        v1710 = v828;
        v1717 = v827;
        v1810[3] = v827;
        v1810[4] = v828;
        LODWORD(v1811) = 1;
        v829 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 45, v1798, 1, v1810, 2, 0);
        v831 = v830;
        unsigned int v832 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v300, "", 0);
        unint64_t v833 = v832 & 0x7FFFFFFF;
        *(void *)(*(void *)(v300 + 24) + 16 * v833) = 4;
        unint64_t v834 = *(unsigned int *)(v300 + 432);
        if (v833 >= v834)
        {
          uint64_t v835 = v300;
          uint64_t v836 = *(void *)(v300 + 440);
          uint64_t v837 = v833 + 1 - v834;
          if (v833 >= *(unsigned int *)(v835 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v838 = v834;
          if (v837)
          {
            v839 = (void *)(*v1725 + 8 * v834);
            uint64_t v840 = ~v833 + v834;
            do
            {
              *v839++ = v836;
              BOOL v523 = __CFADD__(v840++, 1);
            }
            while (!v523);
            int v838 = *(_DWORD *)(v1768 + 432);
          }
          uint64_t v300 = v1768;
          *(_DWORD *)(v1768 + 432) = v838 + v837;
        }
        *(void *)(*(void *)(v300 + 424) + 8 * v833) = v1734;
        uint64_t v841 = *(void *)(v300 + 8);
        if (v841) {
          (*(void (**)(uint64_t, void))(*(void *)v841 + 24))(v841, v832);
        }
        LODWORD(v1810[0]) = v832;
        v842 = v1775;
        v843 = sub_1CC7390C0(v1775, v1753, (int *)v1810, 1, 0);
        v845 = v844;
        memset(&v1810[1], 0, 24);
        HIDWORD(v1810[0]) = v1743;
        LODWORD(v1810[0]) = 0;
        llvm::MachineInstr::addOperand(v844, v843, (const llvm::MachineOperand *)v1810);
        int v846 = *(_DWORD *)(v831[4] + 4);
        memset(&v1810[1], 0, 24);
        HIDWORD(v1810[0]) = v846;
        LODWORD(v1810[0]) = 0;
        llvm::MachineInstr::addOperand(v845, v843, (const llvm::MachineOperand *)v1810);
        v1798[0] = v1734;
        LODWORD(v1798[1]) = 0;
        LODWORD(v1810[0]) = 32;
        LODWORD(v1810[2]) = 2;
        v1810[3] = v829;
        v1810[4] = v831;
        LODWORD(v1811) = 1;
        DWORD2(v1811) = v1761;
        DWORD2(v1812) = 0;
        uint64_t v1813 = (uint64_t)v843;
        v1814 = v845;
        int v1815 = 1;
        uint64_t v1816 = (uint64_t)v817;
        v1817 = v819;
        int v1818 = 1;
        uint64_t v847 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v842)[4])(v842, 51, v1798, 1, v1810, 5, 0);
        v849 = v848;
        v1798[0] = (llvm::MachineInstr *)129;
        LODWORD(v1798[1]) = 0;
        v1810[0] = v829;
        v1810[1] = v831;
        LODWORD(v1810[2]) = 1;
        v1810[3] = v1717;
        v1810[4] = v1710;
        LODWORD(v1811) = 1;
        v850 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v842)[4])(v842, 45, v1798, 1, v1810, 2, 0);
        v852 = v851;
        unsigned int v853 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v300, "", 0);
        unint64_t v854 = v853 & 0x7FFFFFFF;
        *(void *)(*(void *)(v300 + 24) + 16 * v854) = 4;
        unint64_t v855 = *(unsigned int *)(v300 + 432);
        if (v854 >= v855)
        {
          uint64_t v856 = v300;
          uint64_t v857 = *(void *)(v300 + 440);
          uint64_t v858 = v854 + 1 - v855;
          if (v854 >= *(unsigned int *)(v856 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v859 = v855;
          if (v858)
          {
            v860 = (void *)(*v1725 + 8 * v855);
            uint64_t v861 = ~v854 + v855;
            do
            {
              *v860++ = v857;
              BOOL v523 = __CFADD__(v861++, 1);
            }
            while (!v523);
            int v859 = *(_DWORD *)(v1768 + 432);
          }
          uint64_t v300 = v1768;
          *(_DWORD *)(v1768 + 432) = v859 + v858;
        }
        *(void *)(*(void *)(v300 + 424) + 8 * v854) = v1734;
        uint64_t v862 = *(void *)(v300 + 8);
        if (v862) {
          (*(void (**)(uint64_t, void))(*(void *)v862 + 24))(v862, v853);
        }
        LODWORD(v1810[0]) = v853;
        v863 = v1775;
        v864 = sub_1CC7390C0(v1775, v1753, (int *)v1810, 1, 0);
        v866 = v865;
        memset(&v1810[1], 0, 24);
        HIDWORD(v1810[0]) = v1743;
        LODWORD(v1810[0]) = 0;
        llvm::MachineInstr::addOperand(v865, v864, (const llvm::MachineOperand *)v1810);
        int v867 = *(_DWORD *)(v852[4] + 4);
        memset(&v1810[1], 0, 24);
        HIDWORD(v1810[0]) = v867;
        LODWORD(v1810[0]) = 0;
        llvm::MachineInstr::addOperand(v866, v864, (const llvm::MachineOperand *)v1810);
        v1798[0] = v1734;
        LODWORD(v1798[1]) = 0;
        LODWORD(v1810[0]) = 32;
        LODWORD(v1810[2]) = 2;
        v1810[3] = v850;
        v1810[4] = v852;
        LODWORD(v1811) = 1;
        DWORD2(v1811) = v1761;
        DWORD2(v1812) = 0;
        uint64_t v1813 = (uint64_t)v864;
        v1814 = v866;
        int v1815 = 1;
        uint64_t v1816 = v847;
        v1817 = v849;
        int v1818 = 1;
        uint64_t v868 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v863)[4])(v863, 51, v1798, 1, v1810, 5, 0);
        v870 = v869;
        v1798[0] = (llvm::MachineInstr *)129;
        LODWORD(v1798[1]) = 0;
        v1810[0] = v850;
        v1810[1] = v852;
        LODWORD(v1810[2]) = 1;
        v1810[3] = v1717;
        v1810[4] = v1710;
        LODWORD(v1811) = 1;
        v871 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v863)[4])(v863, 45, v1798, 1, v1810, 2, 0);
        v873 = v872;
        unsigned int v874 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v300, "", 0);
        uint64_t v875 = v300;
        unsigned int v876 = v874;
        uint64_t v877 = v874;
        unint64_t v878 = v874 & 0x7FFFFFFF;
        *(void *)(*(void *)(v875 + 24) + 16 * v878) = 4;
        unint64_t v879 = *(unsigned int *)(v875 + 432);
        if (v878 >= v879)
        {
          uint64_t v880 = *(void *)(v875 + 440);
          uint64_t v881 = v878 + 1 - v879;
          if (v878 >= *(unsigned int *)(v875 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v882 = *(_DWORD *)(v875 + 432);
          if (v881)
          {
            v883 = (void *)(*v1725 + 8 * *(unsigned int *)(v875 + 432));
            uint64_t v884 = ~v878 + v879;
            do
            {
              *v883++ = v880;
              BOOL v523 = __CFADD__(v884++, 1);
            }
            while (!v523);
            int v882 = *(_DWORD *)(v1768 + 432);
          }
          uint64_t v875 = v1768;
          *(_DWORD *)(v1768 + 432) = v882 + v881;
        }
        *(void *)(*(void *)(v875 + 424) + 8 * v878) = v1734;
        uint64_t v885 = *(void *)(v875 + 8);
        if (v885) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v885 + 24))(v885, v877);
        }
        LODWORD(v1810[0]) = v876;
        v886 = sub_1CC7390C0(v1775, v1753, (int *)v1810, 1, 0);
        v888 = v887;
        memset(&v1810[1], 0, 24);
        HIDWORD(v1810[0]) = v1743;
        LODWORD(v1810[0]) = 0;
        llvm::MachineInstr::addOperand(v887, v886, (const llvm::MachineOperand *)v1810);
        int v889 = *(_DWORD *)(v873[4] + 4);
        memset(&v1810[1], 0, 24);
        HIDWORD(v1810[0]) = v889;
        LODWORD(v1810[0]) = 0;
        llvm::MachineInstr::addOperand(v888, v886, (const llvm::MachineOperand *)v1810);
        LODWORD(v1798[0]) = v1706;
        LODWORD(v1798[1]) = 1;
        LODWORD(v1810[0]) = 32;
        LODWORD(v1810[2]) = 2;
        v1810[3] = v871;
        v1810[4] = v873;
        LODWORD(v1811) = 1;
        DWORD2(v1811) = v1761;
        DWORD2(v1812) = 0;
        uint64_t v1813 = (uint64_t)v886;
        v1814 = v888;
        int v1815 = 1;
        uint64_t v1816 = v868;
        v1817 = v870;
        int v1818 = 1;
        ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 51, v1798, 1, v1810, 5, 0);
        llvm::MachineInstr::eraseFromParent(v1774);
        return 1;
      case 2623:
        uint64_t v640 = *((void *)v1774 + 4);
        uint64_t v641 = *(unsigned int *)(v640 + 32 * (v6 + 1) + 4);
        unsigned int v642 = *(_DWORD *)(v640 + 4);
        if ((v642 & 0x80000000) != 0)
        {
          uint64_t v644 = v1768;
          if ((v642 & 0x7FFFFFFF) >= *(_DWORD *)(v1768 + 432)) {
            v643 = 0;
          }
          else {
            v643 = *(void **)(*(void *)(v1768 + 424) + 8 * (v642 & 0x7FFFFFFF));
          }
        }
        else
        {
          v643 = 0;
          uint64_t v644 = v1768;
        }
        v1793[0] = v643;
        if ((v641 & 0x80000000) != 0) {
          v1146 = (uint64_t *)(*(void *)(v644 + 24) + 16 * (v641 & 0x7FFFFFFF) + 8);
        }
        else {
          v1146 = (uint64_t *)(*(void *)(v644 + 272) + 8 * v641);
        }
        uint64_t v1147 = *v1146;
        unsigned int v1764 = v642;
        if ((*(unsigned char *)(v1147 + 3) & 1) == 0) {
          uint64_t v1147 = *(void *)(v1147 + 24);
        }
        uint64_t v1148 = *(void *)(v1147 + 8);
        if (**(_WORD **)(v1148 + 16) == 121 && (uint64_t v1244 = *(void *)(*(void *)(v1148 + 32) + 48)) != 0)
        {
          v1245 = ***v9;
          int v1247 = sub_1CB8F1DC4((unint64_t *)v1793);
          if (v1246 == 1) {
          uint64_t v1248 = *(void *)(v1244 + 32);
          }
          if ((_UNKNOWN *)v1248 == &unk_1CFB2E344)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1810[1], (const llvm::detail::DoubleAPFloat *)(v1244 + 32));
          }
          else
          {
            v1810[1] = *(void **)(v1244 + 32);
            if ((*(_DWORD *)(v1248 + 8) + 64) >= 0x80) {
              operator new[]();
            }
            char v1249 = *(unsigned char *)(v1244 + 52);
            int v1250 = v1249 & 7;
            BYTE4(v1810[3]) = BYTE4(v1810[3]) & 0xF0 | v1249 & 0xF;
            LODWORD(v1810[3]) = *(_DWORD *)(v1244 + 48);
            BOOL v1252 = (v1249 & 6) != 0 && v1250 != 3;
            if (v1250 == 1 || v1252)
            {
              uint64_t v1254 = *((unsigned int *)v1810[1] + 2);
              if ((v1254 - 64) <= 0xFFFFFF7F) {
                v1255 = (void **)v1810[2];
              }
              else {
                v1255 = &v1810[2];
              }
              v1258 = *(void ***)(v1244 + 40);
              v1257 = (void **)(v1244 + 40);
              v1256 = v1258;
              if ((*((_DWORD *)*(v1257 - 1) + 2) - 64) >= 0xFFFFFF80) {
                v1256 = v1257;
              }
              if (v1254 <= 0xFFFFFFBF)
              {
                unint64_t v1259 = (unint64_t)(v1254 + 64) >> 6;
                do
                {
                  v1260 = *v1256++;
                  *v1255++ = v1260;
                  --v1259;
                }
                while (v1259);
              }
            }
          }
          llvm::APFloat::convert((uint64_t)v1810, &unk_1CFB2E31C, 1, &v1795);
          double v1261 = llvm::APFloat::convertToDouble((llvm::APFloat *)v1810);
          double v1262 = sin(v1261 * 1.57079633);
          sub_1CBA31C84((uint64_t)v1798, v1247, v1262);
          v1264 = llvm::ConstantFP::get(v1245, (llvm::LLVMContext *)v1798, v1263);
          if ((_UNKNOWN *)v1798[1] == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)&v1799);
          }
          else if ((*((_DWORD *)v1798[1] + 2) - 64) <= 0xFFFFFF7F && (void)v1799)
          {
            MEMORY[0x1D25D9CB0](v1799, 0x1000C8000313F17);
          }
          if (v1810[1] == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)&v1810[2]);
          }
          else if ((*((_DWORD *)v1810[1] + 2) - 64) <= 0xFFFFFF7F && v1810[2])
          {
            MEMORY[0x1D25D9CB0](v1810[2], 0x1000C8000313F17);
          }
          LODWORD(v1810[0]) = v1764;
          LODWORD(v1810[1]) = 1;
          ((void (*)(llvm::IntegerType *****, void **, const llvm::detail::DoubleAPFloat *))(*v1775)[3])(v1775, v1810, v1264);
          uint64_t v160 = v1774;
        }
        else
        {
          uint64_t v1149 = *((unsigned __int16 *)v1774 + 22);
          uint64_t v1151 = sub_1CB8F1DC4((unint64_t *)v1793);
          if (v1150 == 1) {
          if (v1151 == 16)
          }
          {
            v1798[0] = (llvm::MachineInstr *)257;
            LODWORD(v1798[1]) = 0;
            LODWORD(v1810[0]) = v641;
            LODWORD(v1810[2]) = 0;
            ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 178, v1798, 1, v1810, 1, 0);
            LODWORD(v641) = *(_DWORD *)(*(void *)(v1152 + 32) + 4);
          }
          v1798[0] = (llvm::MachineInstr *)257;
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = v641;
          LODWORD(v1810[2]) = 0;
          v1755 = (llvm::ConstantFP *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 314, v1798, 1, v1810, 1, 0);
          v1154 = v1153;
          unsigned int v1155 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v644, "", 0);
          unint64_t v1156 = v1155 & 0x7FFFFFFF;
          *(void *)(*(void *)(v644 + 24) + 16 * v1156) = 4;
          unint64_t v1157 = *(unsigned int *)(v644 + 432);
          v1746 = (llvm::ConstantFP *)(v644 + 424);
          if (v1156 >= v1157)
          {
            uint64_t v1158 = *(void *)(v644 + 440);
            uint64_t v1159 = v1156 + 1 - v1157;
            if (v1156 >= *(unsigned int *)(v644 + 436)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v1160 = *(_DWORD *)(v644 + 432);
            if (v1159)
            {
              v1161 = (void *)(*(void *)(v644 + 424) + 8 * v1157);
              uint64_t v1162 = ~v1156 + v1157;
              do
              {
                *v1161++ = v1158;
                BOOL v523 = __CFADD__(v1162++, 1);
              }
              while (!v523);
              int v1160 = *(_DWORD *)(v644 + 432);
            }
            *(_DWORD *)(v644 + 432) = v1160 + v1159;
          }
          *(void *)(*(void *)(v644 + 424) + 8 * v1156) = 257;
          uint64_t v1163 = *(void *)(v644 + 8);
          if (v1163) {
            (*(void (**)(uint64_t, void))(*(void *)v1163 + 24))(v1163, v1155);
          }
          LODWORD(v1798[0]) = v1155;
          v1164 = sub_1CC7390C0(v1775, 2624, (int *)v1798, 1, 0);
          v1166 = v1165;
          int v1167 = *(_DWORD *)(v1154[4] + 4);
          memset(&v1810[1], 0, 24);
          HIDWORD(v1810[0]) = v1167;
          LODWORD(v1810[0]) = 0;
          llvm::MachineInstr::addOperand(v1165, v1164, (const llvm::MachineOperand *)v1810);
          *((_WORD *)v1166 + 22) = *((_WORD *)v1166 + 22) & 0xC | v1149 & 0xFFF3;
          uint64_t v1169 = sub_1CB8F1DC4((unint64_t *)v1793);
          if (v1168 == 1) {
          unsigned int v1170 = v1764;
          }
          if (v1169 == 16)
          {
            *(void *)v1737 = v1149;
            unsigned int v1170 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v644, "", 0);
            unint64_t v1171 = v1170 & 0x7FFFFFFF;
            *(void *)(*(void *)(v644 + 24) + 16 * v1171) = 4;
            uint64_t v1172 = v644;
            unint64_t v1173 = *(unsigned int *)(v644 + 432);
            if (v1171 >= v1173)
            {
              uint64_t v1174 = *(void *)(v1172 + 440);
              uint64_t v1175 = v1171 + 1 - v1173;
              if (v1171 >= *(unsigned int *)(v1172 + 436)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v1176 = v1173;
              if (v1175)
              {
                v1177 = (void *)(*(void *)v1746 + 8 * v1173);
                uint64_t v1178 = ~v1171 + v1173;
                do
                {
                  *v1177++ = v1174;
                  BOOL v523 = __CFADD__(v1178++, 1);
                }
                while (!v523);
                int v1176 = *(_DWORD *)(v1768 + 432);
              }
              uint64_t v1172 = v1768;
              *(_DWORD *)(v1768 + 432) = v1176 + v1175;
            }
            *(void *)(*(void *)(v1172 + 424) + 8 * v1171) = 257;
            uint64_t v1179 = *(void *)(v1172 + 8);
            uint64_t v1149 = *(void *)v1737;
            if (v1179) {
              (*(void (**)(uint64_t, void))(*(void *)v1179 + 24))(v1179, v1170);
            }
          }
          LODWORD(v1798[0]) = v1170;
          LODWORD(v1798[1]) = 1;
          v1810[0] = v1755;
          v1810[1] = v1154;
          LODWORD(v1810[2]) = 1;
          v1810[3] = v1164;
          v1810[4] = v1166;
          LODWORD(v1811) = 1;
          v1180 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, uint64_t))(*v1775)[4])(v1775, 165, v1798, 1, v1810, 2, v1149 | 0x100000000);
          v1182 = v1181;
          uint64_t v1184 = sub_1CB8F1DC4((unint64_t *)v1793);
          if (v1183 == 1) {
          uint64_t v160 = v1774;
          }
          if (v1184 == 16)
          {
            LODWORD(v1798[0]) = v1764;
            LODWORD(v1798[1]) = 1;
            v1810[0] = v1180;
            v1810[1] = v1182;
            LODWORD(v1810[2]) = 1;
            ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 179, v1798, 1, v1810, 1, 0);
          }
        }
        goto LABEL_207;
      case 2628:
        if (!*((unsigned char *)v10 + 1681))
        {
          v663 = "Unsupported sqrt intrinsic.";
          goto LABEL_603;
        }
        unsigned int v84 = v1774;
        uint64_t v87 = v1775;
        uint64_t v614 = *((void *)v1774 + 4);
        BOOL v22 = 1;
        LODWORD(v1798[0]) = *(_DWORD *)(v614 + 4);
        LODWORD(v1798[1]) = 1;
        LODWORD(v1810[0]) = *(_DWORD *)(v614 + 32 * (v6 + 1) + 4);
        LODWORD(v1810[2]) = 0;
        uint64_t v89 = *((unsigned __int16 *)v1774 + 22) | 0x100000000;
        unint64_t v86 = (*v1775)[4];
        uint64_t v88 = 356;
        goto LABEL_113;
      case 2685:
      case 2686:
        uint64_t v371 = *((void *)v1774 + 4);
        unsigned int v372 = *(_DWORD *)(v371 + 68);
        int v373 = *(_DWORD *)(v371 + 4);
        if (v373 < 0)
        {
          uint64_t v729 = v373 & 0x7FFFFFFF;
          uint64_t v375 = v1768;
          if (v729 >= *(_DWORD *)(v1768 + 432)) {
            uint64_t v374 = 0;
          }
          else {
            uint64_t v374 = *(llvm::MachineInstr **)(*(void *)(v1768 + 424) + 8 * v729);
          }
        }
        else
        {
          uint64_t v374 = 0;
          uint64_t v375 = v1768;
        }
        sub_1CC73C210(v372, v375, (uint64_t)v1810);
        if (LOBYTE(v1810[2]))
        {
          if (LODWORD(v1810[1]) > 0x40)
          {
            if (v1810[0]) {
              MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
            }
            unint64_t v893 = 0;
            uint64_t v894 = 0;
            uint64_t v890 = 0;
          }
          else
          {
            unint64_t v893 = ((uint64_t)v1810[0] << -LOBYTE(v1810[1]) >> -LOBYTE(v1810[1])) & 0xFFFFFFFFFFFFFF00;
            uint64_t v894 = ((uint64_t)v1810[0] << -LOBYTE(v1810[1]) >> -LOBYTE(v1810[1]));
            uint64_t v890 = 1;
          }
          unsigned int v892 = v1758;
          v891 = (void *)(v894 | v893);
        }
        else
        {
          uint64_t v890 = 0;
          v891 = 0;
          unsigned int v892 = v1758;
        }
        if (v890) {
          uint64_t v895 = 4096;
        }
        else {
          uint64_t v895 = 4097;
        }
        if (v892 == 2685) {
          uint64_t v896 = 16;
        }
        else {
          uint64_t v896 = 272;
        }
        v1798[0] = v374;
        LODWORD(v1798[1]) = 0;
        v897 = (llvm::MachineFunction *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void, void, void))(*v1775)[4])(v1775, v895, v1798, 1, 0, 0, 0);
        v899 = v898;
        LODWORD(v1810[0]) = 1;
        v1810[1] = 0;
        v1810[2] = (void *)v896;
        llvm::MachineInstr::addOperand(v898, v897, (const llvm::MachineOperand *)v1810);
        LODWORD(v1810[0]) = 1;
        v1810[1] = 0;
        v1810[2] = (void *)4;
        llvm::MachineInstr::addOperand(v899, v897, (const llvm::MachineOperand *)v1810);
        if (v890)
        {
          LODWORD(v1810[0]) = 1;
          v1810[1] = 0;
          v1810[2] = v891;
        }
        else
        {
          memset(&v1810[1], 0, 24);
          HIDWORD(v1810[0]) = v372;
          LODWORD(v1810[0]) = 0;
        }
        llvm::MachineInstr::addOperand(v899, v897, (const llvm::MachineOperand *)v1810);
        BOOL v22 = 1;
        LODWORD(v1810[0]) = 1;
        v1810[2] = 0;
        v1810[1] = 0;
        llvm::MachineInstr::addOperand(v899, v897, (const llvm::MachineOperand *)v1810);
        sub_1CC73B5D0(v899, (uint64_t)v1741, v12);
        unsigned int v724 = *(_DWORD *)(*((void *)v899 + 4) + 4);
        v725 = (void *)v1768;
        v726 = v1774;
        uint64_t v727 = (uint64_t)v1751;
LABEL_848:
        sub_1CBA0A7C8(v725, v726, v724, v727);
        return v22;
      case 2703:
      case 2704:
        uint64_t v160 = v1774;
        uint64_t v316 = v16;
        uint64_t v317 = sub_1CBA2F1F4((uint64_t)v1774, 0, v16, 0, v1768, v1775, (uint64_t)v1751);
        if (!v317) {
          return 0;
        }
        BOOL v22 = 1;
        if (!sub_1CBA2F1F4((uint64_t)v1774, 1u, v316, *(void *)(v317 + 32), v1768, v1775, (uint64_t)v1751)) {
          return v22;
        }
LABEL_207:
        uint64_t v161 = v160;
        goto LABEL_264;
      default:
        if (v16 != 261)
        {
          if (v16 != 2732) {
            return v22;
          }
LABEL_302:
          int v207 = *(_DWORD *)(*((void *)v1774 + 4) + 4);
          if (v207 < 0)
          {
            uint64_t v211 = v207 & 0x7FFFFFFF;
            uint64_t v210 = v1775;
            int v208 = v15;
            if (v211 >= *(_DWORD *)(v1768 + 432)) {
              uint64_t v209 = 0;
            }
            else {
              uint64_t v209 = *(llvm::MachineInstr **)(*(void *)(v1768 + 424) + 8 * v211);
            }
          }
          else
          {
            int v208 = v15;
            uint64_t v209 = 0;
            uint64_t v210 = v1775;
          }
          unsigned int v212 = sub_1CBA2EBE4(v16);
          if (sub_1CBA2F01C(v212, v208) >= 0x11) {
            unint64_t v213 = (unint64_t)v209;
          }
          else {
            unint64_t v213 = 129;
          }
          v1798[0] = (llvm::MachineInstr *)v213;
          LODWORD(v1798[1]) = 0;
          uint64_t v214 = (llvm::MachineFunction *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void, void, void))(*v210)[4])(v210, 320, v1798, 1, 0, 0, 0);
          uint64_t v216 = v215;
          LODWORD(v1810[0]) = 1;
          v1810[1] = 0;
          v1810[2] = (void *)v212;
          llvm::MachineInstr::addOperand(v215, v214, (const llvm::MachineOperand *)v1810);
          if (v1758 == 2132)
          {
            if (*((unsigned char *)v10 + 1656))
            {
              *(void *)&long long v1795 = v213;
              DWORD2(v1795) = 0;
              v1798[0] = v214;
              v1798[1] = v216;
              LODWORD(v1799) = 1;
              *(void *)&long long v1783 = v213;
              DWORD2(v1783) = 0;
              unint64_t v231 = (v213 >> 19);
              if ((v213 & 2) != 0) {
                unint64_t v231 = (unsigned __int16)(v213 >> 19);
              }
              if ((v213 & 4) == 0) {
                unint64_t v231 = (unsigned __int16)(v213 >> 3);
              }
              unint64_t v232 = (v213 >> 3);
              if (v213) {
                unint64_t v233 = (v213 >> 3);
              }
              else {
                unint64_t v233 = v231;
              }
              uint64_t v234 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)v233);
              uint64_t v236 = *(llvm::ConstantInt **)v234;
              unsigned int v237 = *(_DWORD *)(v234 + 8);
              LODWORD(v1810[1]) = v237 >> 8;
              if (v237 >> 8 > 0x40) {
                operator new[]();
              }
              if (v237 <= 0xFF) {
                LOBYTE(v238) = 0;
              }
              else {
                unint64_t v238 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v237) + 63);
              }
              v1810[0] = (void *)(v238 & 4);
              int v239 = llvm::ConstantInt::get(v236, (llvm::LLVMContext *)v1810, v235);
              if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
                MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
              }
              *((void *)&v1799 + 1) = ((uint64_t (*)(llvm::IntegerType *****, long long *, void *))(*v1775)[2])(v1775, &v1783, v239);
              unint64_t v1800 = v240;
              unsigned int v1801 = 1;
              uint64_t v241 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, llvm::MachineInstr **, uint64_t, void))(*v1775)[4])(v1775, 128, &v1795, 1, v1798, 2, 0);
              uint64_t v243 = v242;
              v1791[0] = (void *)v213;
              LODWORD(v1791[1]) = 0;
              unint64_t v244 = (v213 >> 19);
              if ((v213 & 2) != 0) {
                unint64_t v244 = (unsigned __int16)(v213 >> 19);
              }
              if ((v213 & 4) == 0) {
                unint64_t v244 = (unsigned __int16)(v213 >> 3);
              }
              if (v213) {
                unint64_t v245 = (v213 >> 3);
              }
              else {
                unint64_t v245 = v244;
              }
              uint64_t v246 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)v245);
              uint64_t v248 = *(llvm::ConstantInt **)v246;
              unsigned int v249 = *(_DWORD *)(v246 + 8);
              LODWORD(v1810[1]) = v249 >> 8;
              if (v249 >> 8 > 0x40) {
                operator new[]();
              }
              if (v249 <= 0xFF) {
                LOBYTE(v250) = 0;
              }
              else {
                unint64_t v250 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v249) + 63);
              }
              v1810[0] = (void *)(v250 & 7);
              uint64_t v251 = llvm::ConstantInt::get(v248, (llvm::LLVMContext *)v1810, v247);
              if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
                MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
              }
              uint64_t v252 = (void *)((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*v1775)[2])(v1775, v1791, v251);
              v1793[0] = (void *)v213;
              LODWORD(v1793[1]) = 0;
              v1810[0] = v241;
              v1810[1] = v243;
              LODWORD(v1810[2]) = 1;
              v1810[3] = v252;
              v1810[4] = v253;
              LODWORD(v1811) = 1;
              char v254 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 65, v1793, 1, v1810, 2, 0);
              uint64_t v256 = v255;
              v1780 = (llvm::GlobalValue *)v213;
              LODWORD(v1781) = 0;
              if (v213)
              {
                unint64_t v257 = (v213 >> 3);
              }
              else if ((v213 & 4) != 0)
              {
                if ((v213 & 2) != 0) {
                  unint64_t v257 = (unsigned __int16)(v213 >> 19);
                }
                else {
                  unint64_t v257 = (v213 >> 19);
                }
              }
              else
              {
                unint64_t v257 = (unsigned __int16)(v213 >> 3);
              }
              uint64_t v258 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)v257);
              int v260 = *(llvm::ConstantInt **)v258;
              unsigned int v261 = *(_DWORD *)(v258 + 8);
              LODWORD(v1810[1]) = v261 >> 8;
              if (v261 >> 8 > 0x40) {
                operator new[]();
              }
              if (v261 <= 0xFF) {
                LOBYTE(v262) = 0;
              }
              else {
                unint64_t v262 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v261) + 63);
              }
              v1810[0] = (void *)(v262 & 0xA);
              uint64_t v263 = llvm::ConstantInt::get(v260, (llvm::LLVMContext *)v1810, v259);
              if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
                MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
              }
              uint64_t v264 = (void *)((uint64_t (*)(llvm::IntegerType *****, llvm::GlobalValue **, void *))(*v1775)[2])(v1775, &v1780, v263);
              v1793[0] = (void *)v213;
              LODWORD(v1793[1]) = 0;
              v1810[0] = v254;
              v1810[1] = v256;
              LODWORD(v1810[2]) = 1;
              v1810[3] = v264;
              v1810[4] = v265;
              LODWORD(v1811) = 1;
              uint64_t v266 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 47, v1793, 1, v1810, 2, 0);
              uint64_t v268 = v267;
              v1793[0] = (void *)v213;
              LODWORD(v1793[1]) = 0;
              if ((v213 & 1) == 0)
              {
                if ((v213 & 4) != 0)
                {
                  if ((v213 & 2) != 0) {
                    unint64_t v232 = (unsigned __int16)(v213 >> 19);
                  }
                  else {
                    unint64_t v232 = (v213 >> 19);
                  }
                }
                else
                {
                  unint64_t v232 = (unsigned __int16)(v213 >> 3);
                }
              }
              uint64_t v269 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)v232);
              uint64_t v271 = *(llvm::ConstantInt **)v269;
              unsigned int v272 = *(_DWORD *)(v269 + 8);
              LODWORD(v1810[1]) = v272 >> 8;
              if (v272 >> 8 > 0x40) {
                operator new[]();
              }
              uint64_t v217 = v1774;
              if (v272 <= 0xFF) {
                LOBYTE(v273) = 0;
              }
              else {
                unint64_t v273 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v272) + 63);
              }
              v1810[0] = (void *)(v273 & 0xF);
              uint64_t v274 = llvm::ConstantInt::get(v271, (llvm::LLVMContext *)v1810, v270);
              if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
                MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
              }
              uint64_t v275 = (void *)((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*v1775)[2])(v1775, v1793, v274);
              v1798[0] = (llvm::MachineInstr *)v213;
              LODWORD(v1798[1]) = 0;
              v1810[0] = v214;
              v1810[1] = v216;
              LODWORD(v1810[2]) = 1;
              v1810[3] = v275;
              v1810[4] = v276;
              LODWORD(v1811) = 1;
              uint64_t v277 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 65, v1798, 1, v1810, 2, 0);
              v1798[0] = (llvm::MachineInstr *)v213;
              LODWORD(v1798[1]) = 0;
              v1810[0] = v266;
              v1810[1] = v268;
              LODWORD(v1810[2]) = 1;
              v1810[3] = v277;
              v1810[4] = v278;
              LODWORD(v1811) = 1;
              uint64_t v229 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 45, v1798, 1, v1810, 2, 0);
              goto LABEL_363;
            }
          }
          else if (v1758 == 2491)
          {
            uint64_t v217 = v1774;
            if (((1 << v208) & 0x2C0) == 0)
            {
LABEL_365:
              if (v209 != (llvm::MachineInstr *)v213)
              {
                v1798[0] = v209;
                LODWORD(v1798[1]) = 0;
                v1810[0] = v214;
                v1810[1] = v216;
                LODWORD(v1810[2]) = 1;
                ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 126, v1798, 1, v1810, 1, 0);
                uint64_t v216 = v279;
              }
              uint64_t v280 = (uint64_t)v1751;
              unsigned int v281 = *(_DWORD *)(*((void *)v216 + 4) + 4);
              unsigned int v282 = (void *)v1768;
              uint64_t v283 = v217;
              goto LABEL_368;
            }
            v1793[0] = (void *)v213;
            LODWORD(v1793[1]) = 0;
            uint64_t v218 = (llvm::LLVMContext *)(unsigned __int16)(v213 >> 3);
            uint64_t v219 = (llvm::LLVMContext *)(unsigned __int16)(v213 >> 19);
            if ((v213 & 2) == 0) {
              uint64_t v219 = (llvm::LLVMContext *)(v213 >> 19);
            }
            if ((v213 & 4) != 0) {
              uint64_t v218 = v219;
            }
            if (v213) {
              uint64_t v220 = (llvm::LLVMContext *)(v213 >> 3);
            }
            else {
              uint64_t v220 = v218;
            }
            uint64_t v221 = llvm::IntegerType::get(***v1775[1], v220);
            uint64_t v223 = *(llvm::ConstantInt **)v221;
            unsigned int v224 = *(_DWORD *)(v221 + 8);
            LODWORD(v1810[1]) = v224 >> 8;
            if (v224 >> 8 > 0x40) {
              operator new[]();
            }
            if (v224 <= 0xFF) {
              LOBYTE(v225) = 0;
            }
            else {
              unint64_t v225 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v224) + 63);
            }
            v1810[0] = (void *)(v225 & 3);
            uint64_t v226 = llvm::ConstantInt::get(v223, (llvm::LLVMContext *)v1810, v222);
            if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
              MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
            }
            uint64_t v227 = (void *)((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*v1775)[2])(v1775, v1793, v226);
            v1798[0] = (llvm::MachineInstr *)v213;
            LODWORD(v1798[1]) = 0;
            v1810[0] = v214;
            v1810[1] = v216;
            LODWORD(v1810[2]) = 1;
            v1810[3] = v227;
            v1810[4] = v228;
            LODWORD(v1811) = 1;
            uint64_t v229 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 65, v1798, 1, v1810, 2, 0);
LABEL_363:
            uint64_t v214 = (llvm::MachineFunction *)v229;
            uint64_t v216 = v230;
            goto LABEL_365;
          }
          uint64_t v217 = v1774;
          goto LABEL_365;
        }
LABEL_458:
        unsigned int v482 = v1774;
        uint64_t v483 = *((void *)v1774 + 4);
        int v484 = *(_DWORD *)(v483 + 4);
        if (v484 < 0)
        {
          uint64_t v730 = v484 & 0x7FFFFFFF;
          uint64_t v486 = v1768;
          if (v730 >= *(_DWORD *)(v1768 + 432)) {
            uint64_t v485 = 0;
          }
          else {
            uint64_t v485 = *(void *)(*(void *)(v1768 + 424) + 8 * v730);
          }
        }
        else
        {
          uint64_t v485 = 0;
          uint64_t v486 = v1768;
        }
        *(void *)&long long v1783 = v485;
        uint64_t v900 = v483 + 32 * (v6 + 1);
        unsigned int v903 = *(_DWORD *)(v900 + 4);
        v902 = (_DWORD *)(v900 + 4);
        uint64_t v901 = v903;
        if ((v903 & 0x80000000) != 0) {
          v904 = (uint64_t *)(*(void *)(v486 + 24) + 16 * (v901 & 0x7FFFFFFF) + 8);
        }
        else {
          v904 = (uint64_t *)(*(void *)(v486 + 272) + 8 * v901);
        }
        v905 = v1775;
        uint64_t v906 = *v904;
        if ((*(unsigned char *)(v906 + 3) & 1) == 0) {
          uint64_t v906 = *(void *)(v906 + 24);
        }
        uint64_t v907 = *(void *)(v906 + 8);
        if (**(_WORD **)(v907 + 16) == 121)
        {
          uint64_t v1205 = *(void *)(*(void *)(v907 + 32) + 48);
          if (v1205)
          {
            uint64_t v1206 = *(void *)(v1205 + 32);
            uint64_t v65 = (llvm::MachineInstr *)&unk_1CFB2E344;
            if ((_UNKNOWN *)v1206 == &unk_1CFB2E344)
            {
              llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1810[1], (const llvm::detail::DoubleAPFloat *)(v1205 + 32));
            }
            else
            {
              v1810[1] = *(void **)(v1205 + 32);
              if ((*(_DWORD *)(v1206 + 8) + 64) >= 0x80) {
                operator new[]();
              }
              char v1207 = *(unsigned char *)(v1205 + 52);
              int v1208 = v1207 & 7;
              BYTE4(v1810[3]) = BYTE4(v1810[3]) & 0xF0 | v1207 & 0xF;
              LODWORD(v1810[3]) = *(_DWORD *)(v1205 + 48);
              BOOL v1210 = (v1207 & 6) != 0 && v1208 != 3;
              if (v1208 == 1 || v1210)
              {
                uint64_t v1212 = *((unsigned int *)v1810[1] + 2);
                if ((v1212 - 64) <= 0xFFFFFF7F) {
                  v1213 = (void **)v1810[2];
                }
                else {
                  v1213 = &v1810[2];
                }
                v1216 = *(void ***)(v1205 + 40);
                v1215 = (void **)(v1205 + 40);
                v1214 = v1216;
                if ((*((_DWORD *)*(v1215 - 1) + 2) - 64) >= 0xFFFFFF80) {
                  v1214 = v1215;
                }
                if (v1212 <= 0xFFFFFFBF)
                {
                  unint64_t v1217 = (unint64_t)(v1212 + 64) >> 6;
                  do
                  {
                    v1218 = *v1214++;
                    *v1213++ = v1218;
                    --v1217;
                  }
                  while (v1217);
                }
              }
            }
            llvm::APFloat::convert((uint64_t)v1810, &unk_1CFB2E31C, 1, v1793);
            double v1202 = 1.0 / sqrt(llvm::APFloat::convertToDouble((llvm::APFloat *)v1810));
            v1203 = ***v9;
            v1204 = (unint64_t *)&v1783;
            goto LABEL_1121;
          }
        }
        if (v16 == 2526 || (*((_WORD *)v10 + 510) & 1) != 0 || (*((_WORD *)v1774 + 22) & 0x200) != 0) {
          goto LABEL_1135;
        }
        uint64_t v909 = sub_1CB8F1DC4((unint64_t *)&v1783);
        if (v908 == 1) {
        uint64_t v901 = *v902;
        }
        if (v909 == 16
          || ((v901 & 0x80000000) == 0
            ? (v1223 = (uint64_t *)(*(void *)(v486 + 272) + 8 * v901))
            : (v1223 = (uint64_t *)(*(void *)(v486 + 24) + 16 * (v901 & 0x7FFFFFFF) + 8)),
              (v1224 = *v1223, unsigned int v482 = v1774, v905 = v1775, v1224)
           && ((*(unsigned char *)(v1224 + 3) & 1) != 0
            || (uint64_t v1224 = *(void *)(v1224 + 24)) != 0 && (*(unsigned char *)(v1224 + 3) & 1) != 0)
           && (uint64_t v1225 = *(void *)(v1224 + 8)) != 0
           && **(_WORD **)(v1225 + 16) == 178))
        {
LABEL_1135:
          LODWORD(v1798[0]) = *(_DWORD *)(*((void *)v482 + 4) + 4);
          LODWORD(v1798[1]) = 1;
          LODWORD(v1810[0]) = v901;
          LODWORD(v1810[2]) = 0;
          ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, uint64_t))(*v905)[4])(v905, 335, v1798, 1, v1810, 1, *((unsigned __int16 *)v482 + 22) | 0x100000000);
          uint64_t v161 = v482;
          goto LABEL_264;
        }
        v1573 = ***v1775[1];
        v1798[0] = (llvm::MachineInstr *)257;
        LODWORD(v1798[1]) = 0;
        LODWORD(v1793[1]) = 32;
        v1793[0] = (void *)1593835520;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1810[1], (const llvm::APInt **)v1793);
        v1757 = v1573;
        v1575 = llvm::ConstantFP::get(v1573, (llvm::LLVMContext *)v1810, v1574);
        uint64_t v1576 = ((uint64_t (*)(llvm::IntegerType *****, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))(*v1775)[3])(v1775, v1798, v1575);
        uint64_t v1767 = v1577;
        *(void *)v1773 = v1576;
        if (v1810[1] == &unk_1CFB2E344)
        {
          sub_1CB845718((uint64_t *)&v1810[2]);
        }
        else if ((*((_DWORD *)v1810[1] + 2) - 64) <= 0xFFFFFF7F && v1810[2])
        {
          MEMORY[0x1D25D9CB0](v1810[2], 0x1000C8000313F17);
        }
        v1798[0] = (llvm::MachineInstr *)257;
        LODWORD(v1798[1]) = 0;
        LODWORD(v1793[1]) = 32;
        v1793[0] = (void *)528482304;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1810[1], (const llvm::APInt **)v1793);
        v1579 = llvm::ConstantFP::get(v1573, (llvm::LLVMContext *)v1810, v1578);
        v1580 = (void *)((uint64_t (*)(llvm::IntegerType *****, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))(*v1775)[3])(v1775, v1798, v1579);
        v1582 = v1581;
        if (v1810[1] == &unk_1CFB2E344)
        {
          sub_1CB845718((uint64_t *)&v1810[2]);
        }
        else if ((*((_DWORD *)v1810[1] + 2) - 64) <= 0xFFFFFF7F && v1810[2])
        {
          MEMORY[0x1D25D9CB0](v1810[2], 0x1000C8000313F17);
        }
        v1798[0] = (llvm::MachineInstr *)257;
        LODWORD(v1798[1]) = 0;
        LODWORD(v1810[0]) = *v902;
        LODWORD(v1810[2]) = 0;
        v1810[3] = v1580;
        v1810[4] = v1582;
        LODWORD(v1811) = 1;
        v1583 = v1775;
        uint64_t v1584 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 165, v1798, 1, v1810, 2, 0);
        v1798[0] = (llvm::MachineInstr *)257;
        LODWORD(v1798[1]) = 0;
        LODWORD(v1810[0]) = 2;
        LODWORD(v1810[2]) = 2;
        LODWORD(v1810[3]) = *v902;
        LODWORD(v1811) = 0;
        *((void *)&v1811 + 1) = *(void *)v1773;
        *(void *)&long long v1812 = v1767;
        DWORD2(v1812) = 1;
        uint64_t v1813 = v1584;
        v1814 = v1585;
        int v1815 = 1;
        LODWORD(v1816) = v1810[3];
        int v1818 = 0;
        v1586 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1583)[4])(v1583, 51, v1798, 1, v1810, 5, 0);
        v1588 = v1587;
        v1798[0] = (llvm::MachineInstr *)257;
        LODWORD(v1798[1]) = 0;
        v1810[0] = v1586;
        v1810[1] = v1587;
        LODWORD(v1810[2]) = 1;
        v1589 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1583)[4])(v1583, 335, v1798, 1, v1810, 1, 0);
        v1591 = v1590;
        v1810[0] = (void *)257;
        LODWORD(v1810[1]) = 0;
        uint64_t v1592 = sub_1CC7374CC((uint64_t)v1775, (unint64_t *)v1810, 0.5);
        *(void *)v1739 = v1593;
        v1749 = (llvm::ConstantFP *)v1592;
        v1810[0] = (void *)257;
        LODWORD(v1810[1]) = 0;
        v1730 = (void *)sub_1CC7374CC((uint64_t)v1775, (unint64_t *)v1810, -0.5);
        v1595 = v1594;
        v1798[0] = (llvm::MachineInstr *)257;
        LODWORD(v1798[1]) = 0;
        v1810[0] = v1586;
        v1810[1] = v1588;
        LODWORD(v1810[2]) = 1;
        v1810[3] = v1589;
        v1810[4] = v1591;
        LODWORD(v1811) = 1;
        v1721 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1583)[4])(v1583, 165, v1798, 1, v1810, 2, 0);
        v1597 = v1596;
        v1798[0] = (llvm::MachineInstr *)257;
        LODWORD(v1798[1]) = 0;
        v1810[0] = v1721;
        v1810[1] = v1596;
        LODWORD(v1810[2]) = 1;
        uint64_t v1598 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1583)[4])(v1583, 177, v1798, 1, v1810, 1, 0);
        v1798[0] = (llvm::MachineInstr *)257;
        LODWORD(v1798[1]) = 0;
        v1810[0] = v1586;
        v1810[1] = v1588;
        LODWORD(v1810[2]) = 1;
        v1810[3] = v1589;
        v1810[4] = v1591;
        LODWORD(v1811) = 1;
        *((void *)&v1811 + 1) = v1598;
        *(void *)&long long v1812 = v1599;
        DWORD2(v1812) = 1;
        v1600 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1583)[4])(v1583, 166, v1798, 1, v1810, 3, 0);
        v1602 = v1601;
        v1798[0] = (llvm::MachineInstr *)257;
        LODWORD(v1798[1]) = 0;
        v1810[0] = v1730;
        v1810[1] = v1595;
        LODWORD(v1810[2]) = 1;
        v1810[3] = v1589;
        v1810[4] = v1591;
        LODWORD(v1811) = 1;
        v1603 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1583)[4])(v1583, 165, v1798, 1, v1810, 2, 0);
        v1605 = v1604;
        v1798[0] = (llvm::MachineInstr *)257;
        LODWORD(v1798[1]) = 0;
        v1810[0] = v1721;
        v1810[1] = v1597;
        LODWORD(v1810[2]) = 1;
        v1810[3] = v1603;
        v1810[4] = v1604;
        LODWORD(v1811) = 1;
        *((void *)&v1811 + 1) = v1749;
        *(void *)&long long v1812 = *(void *)v1739;
        DWORD2(v1812) = 1;
        uint64_t v1606 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1583)[4])(v1583, 166, v1798, 1, v1810, 3, 0);
        v1798[0] = (llvm::MachineInstr *)257;
        LODWORD(v1798[1]) = 0;
        v1810[0] = v1603;
        v1810[1] = v1605;
        LODWORD(v1810[2]) = 1;
        v1810[3] = v1600;
        v1810[4] = v1602;
        LODWORD(v1811) = 1;
        *((void *)&v1811 + 1) = v1606;
        *(void *)&long long v1812 = v1607;
        DWORD2(v1812) = 1;
        v1608 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1583)[4])(v1583, 166, v1798, 1, v1810, 3, 0);
        v1798[0] = (llvm::MachineInstr *)257;
        LODWORD(v1798[1]) = 0;
        v1810[0] = v1608;
        v1810[1] = v1609;
        LODWORD(v1810[2]) = 1;
        v1810[3] = v1589;
        v1810[4] = v1591;
        LODWORD(v1811) = 1;
        *((void *)&v1811 + 1) = v1589;
        *(void *)&long long v1812 = v1591;
        DWORD2(v1812) = 1;
        uint64_t v1610 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1583)[4])(v1583, 166, v1798, 1, v1810, 3, 0);
        *(void *)v1740 = v1611;
        v1750 = (llvm::ConstantFP *)v1610;
        v1793[0] = (void *)257;
        LODWORD(v1793[1]) = 0;
        v1810[0] = v1589;
        v1612 = (llvm::ConstantFP *)v1591;
        v1810[1] = v1591;
        LODWORD(v1810[2]) = 1;
        *(void *)&long long v1795 = 257;
        DWORD2(v1795) = 0;
        uint64_t v1613 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x20);
        v1615 = *(llvm::ConstantInt **)v1613;
        unsigned int v1616 = *(_DWORD *)(v1613 + 8);
        LODWORD(v1798[1]) = v1616 >> 8;
        if (v1616 >> 8 > 0x40) {
          operator new[]();
        }
        if (v1616 <= 0xFF) {
          LOBYTE(v1617) = 0;
        }
        else {
          unint64_t v1617 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1616) + 63);
        }
        v1798[0] = (llvm::MachineInstr *)(v1617 & 1);
        v1618 = llvm::ConstantInt::get(v1615, (llvm::LLVMContext *)v1798, v1614);
        if (LODWORD(v1798[1]) >= 0x41 && v1798[0]) {
          MEMORY[0x1D25D9CB0](v1798[0], 0x1000C8000313F17);
        }
        v1810[3] = (void *)((uint64_t (*)(llvm::IntegerType *****, long long *, void *))(*v1775)[2])(v1775, &v1795, v1618);
        v1810[4] = v1619;
        LODWORD(v1811) = 1;
        v1620 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 46, v1793, 1, v1810, 2, 0);
        v1622 = v1621;
        v1798[0] = (llvm::MachineInstr *)257;
        LODWORD(v1798[1]) = 0;
        uint64_t v1623 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x20);
        v1625 = *(llvm::ConstantInt **)v1623;
        unsigned int v1626 = *(_DWORD *)(v1623 + 8);
        LODWORD(v1810[1]) = v1626 >> 8;
        if (v1626 >> 8 > 0x40) {
          operator new[]();
        }
        if (v1626 <= 0xFF) {
          LODWORD(v1627) = 0;
        }
        else {
          unint64_t v1627 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1626) + 63);
        }
        v1810[0] = (void *)(v1627 & 0x7F7FFFFF);
        v1628 = llvm::ConstantInt::get(v1625, (llvm::LLVMContext *)v1810, v1624);
        if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
          MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
        }
        v1629 = v1775;
        uint64_t v1630 = ((uint64_t (*)(llvm::IntegerType *****, llvm::MachineInstr **, void *))(*v1775)[2])(v1775, v1798, v1628);
        v1798[0] = (llvm::MachineInstr *)257;
        LODWORD(v1798[1]) = 0;
        LODWORD(v1810[0]) = 35;
        LODWORD(v1810[2]) = 2;
        v1810[3] = v1620;
        v1810[4] = v1622;
        LODWORD(v1811) = 1;
        *((void *)&v1811 + 1) = v1630;
        *(void *)&long long v1812 = v1631;
        DWORD2(v1812) = 1;
        uint64_t v1813 = (uint64_t)v1589;
        v1814 = v1612;
        int v1815 = 1;
        uint64_t v1816 = (uint64_t)v1750;
        v1817 = *(llvm::MachineInstr **)v1740;
        int v1818 = 1;
        v1632 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1629)[4])(v1629, 51, v1798, 1, v1810, 5, 0);
        v1634 = v1633;
        v1798[0] = (llvm::MachineInstr *)257;
        LODWORD(v1798[1]) = 0;
        LODWORD(v1793[1]) = 32;
        v1793[0] = (void *)796917760;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1810[1], (const llvm::APInt **)v1793);
        v1636 = llvm::ConstantFP::get(v1757, (llvm::LLVMContext *)v1810, v1635);
        v1637 = (void *)((uint64_t (*)(llvm::IntegerType *****, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))(*v1629)[3])(v1629, v1798, v1636);
        v1639 = v1638;
        if (v1810[1] == &unk_1CFB2E344)
        {
          sub_1CB845718((uint64_t *)&v1810[2]);
        }
        else if ((*((_DWORD *)v1810[1] + 2) - 64) <= 0xFFFFFF7F && v1810[2])
        {
          MEMORY[0x1D25D9CB0](v1810[2], 0x1000C8000313F17);
        }
        v1798[0] = (llvm::MachineInstr *)257;
        LODWORD(v1798[1]) = 0;
        v1810[0] = v1632;
        v1810[1] = v1634;
        LODWORD(v1810[2]) = 1;
        v1810[3] = v1637;
        v1810[4] = v1639;
        LODWORD(v1811) = 1;
        uint64_t v1640 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 165, v1798, 1, v1810, 2, 0);
        uint64_t v284 = v1774;
        LODWORD(v1798[0]) = *(_DWORD *)(*((void *)v1774 + 4) + 4);
        LODWORD(v1798[1]) = 1;
        LODWORD(v1810[0]) = 2;
        LODWORD(v1810[2]) = 2;
        LODWORD(v1810[3]) = *v902;
        LODWORD(v1811) = 0;
        *((void *)&v1811 + 1) = *(void *)v1773;
        *(void *)&long long v1812 = v1767;
        DWORD2(v1812) = 1;
        uint64_t v1813 = v1640;
        v1814 = v1641;
        int v1815 = 1;
        uint64_t v1816 = (uint64_t)v1632;
        v1817 = (llvm::MachineInstr *)v1634;
        int v1818 = 1;
        v792 = (void (*)(void))(*v1775)[4];
        break;
    }
    goto LABEL_769;
  }
  if ((int)v16 <= 201)
  {
    if ((int)v16 <= 139)
    {
      if (v16 == 9)
      {
        uint64_t v498 = *((void *)v1774 + 4);
        int v499 = *(_DWORD *)(v498 + 4);
        if ((v499 & 0x80000000) == 0 || (v499 & 0x7FFFFFFFu) >= *(_DWORD *)(v1768 + 432)) {
          return 0;
        }
        uint64_t v500 = *(void *)(*(void *)(v1768 + 424) + 8 * (v499 & 0x7FFFFFFF));
        if (v500 == 257) {
          return 1;
        }
        if (v500 != 129) {
          return 0;
        }
        int v501 = *(_DWORD *)(v498 + 68);
        v1798[0] = (llvm::MachineInstr *)129;
        LODWORD(v1798[1]) = 0;
        uint64_t v502 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)0x10);
        int v504 = *(llvm::ConstantInt **)v502;
        unsigned int v505 = *(_DWORD *)(v502 + 8);
        LODWORD(v1810[1]) = v505 >> 8;
        if (v505 >> 8 > 0x40) {
          operator new[]();
        }
        if (v505 <= 0xFF) {
          LOBYTE(v506) = 0;
        }
        else {
          unint64_t v506 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v505) + 63);
        }
        v1810[0] = (void *)(v506 & 8);
        v507 = llvm::ConstantInt::get(v504, (llvm::LLVMContext *)v1810, v503);
        if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
          MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
        }
        uint64_t v508 = v1775;
        int v509 = (void *)((uint64_t (*)(llvm::IntegerType *****, llvm::MachineInstr **, void *))(*v1775)[2])(v1775, v1798, v507);
        v511 = v510;
        v1798[0] = (llvm::MachineInstr *)129;
        LODWORD(v1798[1]) = 0;
        LODWORD(v1810[0]) = v501;
        LODWORD(v1810[2]) = 0;
        v1810[3] = v509;
        v1810[4] = v510;
        LODWORD(v1811) = 1;
        uint64_t v512 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v508)[4])(v508, 128, v1798, 1, v1810, 2, 0);
        uint64_t v514 = v513;
        v1798[0] = (llvm::MachineInstr *)129;
        LODWORD(v1798[1]) = 0;
        LODWORD(v1810[0]) = v501;
        LODWORD(v1810[2]) = 0;
        v1810[3] = v509;
        v1810[4] = v511;
        LODWORD(v1811) = 1;
        uint64_t v515 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v508)[4])(v508, 127, v1798, 1, v1810, 2, 0);
        LODWORD(v1798[0]) = v499;
        LODWORD(v1798[1]) = 1;
        v1810[0] = v512;
        v1810[1] = v514;
        LODWORD(v1810[2]) = 1;
        v1810[3] = v515;
        v1810[4] = v516;
        LODWORD(v1811) = 1;
        ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v508)[4])(v508, 66, v1798, 1, v1810, 2, 0);
        llvm::MachineInstr::eraseFromParent(v1774);
        return 1;
      }
      else if (v16 == 53)
      {
        uint64_t v151 = *((void *)v1774 + 4);
        int v152 = *(_DWORD *)(v151 + 4);
        if ((v152 & 0x80000000) == 0) {
          return 0;
        }
        uint64_t v153 = v152 & 0x7FFFFFFF;
        if (v153 >= *(_DWORD *)(v1768 + 432)) {
          return 0;
        }
        int v154 = *(_DWORD *)(v151 + 68);
        uint64_t v155 = *(llvm::MachineInstr **)(*(void *)(v1768 + 424) + 8 * v153);
        if (v155 == (llvm::MachineInstr *)257 || v155 == (llvm::MachineInstr *)129)
        {
          v1798[0] = v155;
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = v154;
          LODWORD(v1810[2]) = 0;
          BOOL v22 = 1;
          ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 259, v1798, 1, v1810, 1, 0);
        }
        else
        {
          if (v155 != (llvm::MachineInstr *)65) {
            return 0;
          }
          v1793[0] = (void *)129;
          LODWORD(v1793[1]) = 0;
          *(void *)&long long v1795 = 129;
          DWORD2(v1795) = 0;
          LODWORD(v1798[0]) = v154;
          LODWORD(v1799) = 0;
          BOOL v22 = 1;
          v1810[0] = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, llvm::MachineInstr **, uint64_t, void))(*v1775)[4])(v1775, 126, &v1795, 1, v1798, 1, 0);
          v1810[1] = v156;
          LODWORD(v1810[2]) = 1;
          uint64_t v157 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 259, v1793, 1, v1810, 1, 0);
          v1798[0] = (llvm::MachineInstr *)65;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v157;
          v1810[1] = v158;
          LODWORD(v1810[2]) = 1;
          ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1775)[4])(v1775, 119, v1798, 1, v1810, 1, 0);
        }
        sub_1CBA0A7C8((void *)v1768, v1774, *(_DWORD *)(*(void *)(v159 + 32) + 4), (uint64_t)v1751);
        return v22;
      }
      return v22;
    }
    if (v16 != 140)
    {
      if (v16 != 193) {
        return v22;
      }
      goto LABEL_286;
    }
LABEL_296:
    if (v16 == 140) {
      uint64_t v88 = 218;
    }
    else {
      uint64_t v88 = 219;
    }
    unsigned int v84 = v1774;
    uint64_t v87 = v1775;
    uint64_t v205 = *((void *)v1774 + 4);
    int v206 = *(_DWORD *)(v205 + 4);
    LODWORD(v205) = *(_DWORD *)(v205 + 68);
    BOOL v22 = 1;
    LODWORD(v1798[0]) = v206;
    LODWORD(v1798[1]) = 1;
    LODWORD(v1810[0]) = v205;
    LODWORD(v1810[2]) = 0;
    uint64_t v89 = *((unsigned __int16 *)v1774 + 22) | 0x100000000;
    unint64_t v86 = (*v1775)[4];
LABEL_113:
    ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, uint64_t))v86)(v87, v88, v1798, 1, v1810, 1, v89);
LABEL_271:
    uint64_t v193 = v84;
LABEL_1575:
    llvm::MachineInstr::eraseFromParent(v193);
    return v22;
  }
  if ((int)v16 <= 252)
  {
    if (v16 == 202)
    {
LABEL_286:
      uint64_t v197 = v1774;
      uint64_t v198 = *((unsigned int *)v1774 + 10);
      uint64_t v199 = *((void *)v1774 + 4);
      if (v198)
      {
        uint64_t v200 = 0;
        uint64_t v201 = (unsigned __int8 *)*((void *)v1774 + 4);
        while (1)
        {
          int v202 = *v201;
          v201 += 32;
          if (v202 == 17) {
            break;
          }
          if (v198 == ++v200) {
            goto LABEL_290;
          }
        }
      }
      else
      {
LABEL_290:
        LODWORD(v200) = -1;
      }
      int v203 = *(_DWORD *)(v199 + 4);
      if (v203 < 0 && (v203 & 0x7FFFFFFFu) < *(_DWORD *)(v1768 + 432)) {
        uint64_t v204 = *(void **)(*(void *)(v1768 + 424) + 8 * (v203 & 0x7FFFFFFF));
      }
      else {
        uint64_t v204 = 0;
      }
      v1810[0] = v204;
      int v488 = sub_1CB8F1DC4((unint64_t *)v1810);
      if (v487 == 1) {
      BOOL v22 = v488 == 32 || v488 == 16;
      }
      if (v488 == 32 || v488 == 16)
      {
        if (v1758 == 193) {
          int v489 = 2;
        }
        else {
          int v489 = 4;
        }
        LODWORD(v1798[0]) = v203;
        LODWORD(v1798[1]) = 1;
        LODWORD(v1810[0]) = v489;
        LODWORD(v1810[2]) = 2;
        LODWORD(v1810[3]) = *(_DWORD *)(v199 + 32 * (v200 + 1) + 4);
        LODWORD(v1811) = 0;
        DWORD2(v1811) = *(_DWORD *)(v199 + 32 * (v200 + 2) + 4);
        DWORD2(v1812) = 0;
        LODWORD(v1813) = v1810[3];
        int v1815 = 0;
        LODWORD(v1816) = DWORD2(v1811);
        int v1818 = 0;
        ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, uint64_t))(*v1775)[4])(v1775, 336, v1798, 1, v1810, 5, *((unsigned __int16 *)v1774 + 22) | 0x100000000);
LABEL_749:
        v728 = v197;
LABEL_750:
        llvm::MachineInstr::eraseFromParent(v728);
        return v22;
      }
      return v22;
    }
    if (v16 != 240) {
      return v22;
    }
    v1786 = 0;
    if (&v1786 == v18)
    {
LABEL_255:
      uint64_t v161 = v1774;
LABEL_264:
      llvm::MachineInstr::eraseFromParent(v161);
      return 1;
    }
    uint64_t v188 = *v18;
    if (!*v18)
    {
LABEL_254:
      void *v18 = 0;
      goto LABEL_255;
    }
    int v1240 = *v188;
    if ((v1240 - 4) > 0x1E)
    {
      if ((v1240 - 3) >= 0xFFFFFFFE) {
        v1286 = *v18;
      }
      else {
        v1286 = 0;
      }
      if ((v1240 - 3) <= 0xFFFFFFFD)
      {
        if (v1240 == 3) {
          *((void *)v188 + 1) = 0;
        }
        goto LABEL_254;
      }
      unint64_t v1242 = (unint64_t)(v1286 + 8);
    }
    else
    {
      if ((v188[1] & 0x7F) != 2 && !*((_DWORD *)v188 + 3)) {
        goto LABEL_254;
      }
      uint64_t v1241 = *((void *)v188 + 2);
      if ((v1241 & 4) == 0) {
        goto LABEL_254;
      }
      unint64_t v1242 = v1241 & 0xFFFFFFFFFFFFFFF8;
      if (!v1242) {
        goto LABEL_254;
      }
    }
    v1810[0] = v18;
    sub_1CC5FA668(v1242 + 16, v1810);
    v1287 = v1786;
    void *v18 = v1786;
    if (v1287)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v1786, v1287, (uint64_t)v18);
      v1786 = 0;
    }
    goto LABEL_255;
  }
  if (v16 == 253)
  {
LABEL_370:
    uint64_t v284 = v1774;
    uint64_t v285 = *((void *)v1774 + 4) + 32 * (v6 + 1);
    unsigned int v288 = *(_DWORD *)(v285 + 4);
    uint64_t v287 = (_DWORD *)(v285 + 4);
    uint64_t v286 = v288;
    if ((v288 & 0x80000000) != 0)
    {
      unint64_t v702 = v286 & 0x7FFFFFFF;
      uint64_t v289 = v1768;
      if (v702 >= *(unsigned int *)(v1768 + 432)) {
        uint64_t v703 = 0;
      }
      else {
        uint64_t v703 = *(void *)(*(void *)(v1768 + 424) + 8 * v702);
      }
      *(void *)&long long v1795 = v703;
      unint64_t v290 = (uint64_t *)(*(void *)(v1768 + 24) + 16 * v702 + 8);
    }
    else
    {
      *(void *)&long long v1795 = 0;
      uint64_t v289 = v1768;
      unint64_t v290 = (uint64_t *)(*(void *)(v1768 + 272) + 8 * v286);
    }
    uint64_t v784 = *v290;
    if ((*(unsigned char *)(v784 + 3) & 1) == 0) {
      uint64_t v784 = *(void *)(v784 + 24);
    }
    uint64_t v785 = *(void *)(v784 + 8);
    if (**(_WORD **)(v785 + 16) == 121)
    {
      char v19 = *(unsigned __int8 ***)(*(void *)(v785 + 32) + 48);
      if (v19)
      {
        v1190 = v19[4];
        uint64_t v65 = (llvm::MachineInstr *)&unk_1CFB2E344;
        if (v1190 == (unsigned __int8 *)&unk_1CFB2E344)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1810[1], (const llvm::detail::DoubleAPFloat *)(v19 + 4));
        }
        else
        {
          v1810[1] = v19[4];
          if ((*((_DWORD *)v1190 + 2) + 64) >= 0x80) {
            operator new[]();
          }
          char v1191 = *((unsigned char *)v19 + 52);
          int v1192 = v1191 & 7;
          BYTE4(v1810[3]) = BYTE4(v1810[3]) & 0xF0 | v1191 & 0xF;
          LODWORD(v1810[3]) = *((_DWORD *)v19 + 12);
          BOOL v1194 = (v1191 & 6) != 0 && v1192 != 3;
          if (v1192 == 1 || v1194)
          {
            uint64_t v60 = *((unsigned int *)v1810[1] + 2);
            if ((v60 - 64) <= 0xFFFFFF7F) {
LABEL_2037:
            }
              v1196 = (void **)v1810[2];
            else {
              v1196 = &v1810[2];
            }
            v1199 = (void **)v19[5];
            v1198 = (void **)(v19 + 5);
            v1197 = v1199;
            if ((*((_DWORD *)*(v1198 - 1) + 2) - 64) >= 0xFFFFFF80) {
              v1197 = v1198;
            }
            if (v60 <= 0xFFFFFFBF)
            {
              unint64_t v1200 = (unint64_t)(v60 + 64) >> 6;
              do
              {
                v1201 = *v1197++;
                *v1196++ = v1201;
                --v1200;
              }
              while (v1200);
            }
          }
        }
        llvm::APFloat::convert((uint64_t)v1810, &unk_1CFB2E31C, 1, v1793);
        double v1202 = 1.0 / llvm::APFloat::convertToDouble((llvm::APFloat *)v1810);
        v1203 = ***v9;
        v1204 = (unint64_t *)&v1795;
LABEL_1121:
        int v1220 = sub_1CB8F1DC4(v1204);
        if (v1219 == 1) {
        sub_1CBA31C84((uint64_t)v1798, v1220, v1202);
        }
        v1222 = llvm::ConstantFP::get(v1203, (llvm::LLVMContext *)v1798, v1221);
        if (v1798[1] == v65)
        {
          sub_1CB845718((uint64_t *)&v1799);
        }
        else if ((*((_DWORD *)v1798[1] + 2) - 64) <= 0xFFFFFF7F && (void)v1799)
        {
          MEMORY[0x1D25D9CB0](v1799, 0x1000C8000313F17);
        }
        LODWORD(v1798[0]) = *(_DWORD *)(*((void *)v1774 + 4) + 4);
        LODWORD(v1798[1]) = 1;
        ((void (*)(llvm::IntegerType *****, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))(*v1775)[3])(v1775, v1798, v1222);
        llvm::MachineInstr::eraseFromParent(v1774);
        if (v1810[1] == v65)
        {
          sub_1CB845718((uint64_t *)&v1810[2]);
        }
        else if ((*((_DWORD *)v1810[1] + 2) - 64) <= 0xFFFFFF7F && v1810[2])
        {
          MEMORY[0x1D25D9CB0](v1810[2], 0x1000C8000313F17);
        }
        return 1;
      }
    }
    if (v16 != 2517 && (*((_WORD *)v10 + 510) & 1) == 0 && (*((_WORD *)v1774 + 22) & 0x80) == 0)
    {
      uint64_t v787 = sub_1CB8F1DC4((unint64_t *)&v1795);
      if (v786 == 1) {
      if (v787 != 16)
      }
      {
        uint64_t v788 = *v287;
        v789 = (uint64_t *)((v788 & 0x80000000) != 0
                         ? *(void *)(v289 + 24) + 16 * (v788 & 0x7FFFFFFF) + 8
                         : *(void *)(v289 + 272) + 8 * v788);
        if ((uint64_t v790 = *v789) == 0
          || (*(unsigned char *)(v790 + 3) & 1) == 0
          && ((uint64_t v790 = *(void *)(v790 + 24)) == 0 || (*(unsigned char *)(v790 + 3) & 1) == 0)
          || (uint64_t v791 = *(void *)(v790 + 8)) == 0
          || **(_WORD **)(v791 + 16) != 178)
        {
          v1513 = ***v9;
          LODWORD(v1793[1]) = 32;
          v1793[0] = (void *)1602224128;
          llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1810[1], (const llvm::APInt **)v1793);
          v1798[0] = (llvm::MachineInstr *)v1795;
          LODWORD(v1798[1]) = 0;
          v1515 = llvm::ConstantFP::get(v1513, (llvm::LLVMContext *)v1810, v1514);
          ((void (*)(llvm::IntegerType *****, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))(*v1775)[3])(v1775, v1798, v1515);
          int v1517 = *(_DWORD *)(*(void *)(v1516 + 32) + 4);
          if (v1810[1] == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)&v1810[2]);
          }
          else if ((*((_DWORD *)v1810[1] + 2) - 64) <= 0xFFFFFF7F && v1810[2])
          {
            MEMORY[0x1D25D9CB0](v1810[2], 0x1000C8000313F17);
          }
          LODWORD(v1793[1]) = 32;
          v1793[0] = (void *)528482304;
          llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1810[1], (const llvm::APInt **)v1793);
          v1798[0] = (llvm::MachineInstr *)v1795;
          LODWORD(v1798[1]) = 0;
          v1519 = llvm::ConstantFP::get(v1513, (llvm::LLVMContext *)v1810, v1518);
          ((void (*)(llvm::IntegerType *****, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))(*v1775)[3])(v1775, v1798, v1519);
          int v1521 = *(_DWORD *)(*(void *)(v1520 + 32) + 4);
          if (v1810[1] == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)&v1810[2]);
          }
          else if ((*((_DWORD *)v1810[1] + 2) - 64) <= 0xFFFFFF7F && v1810[2])
          {
            MEMORY[0x1D25D9CB0](v1810[2], 0x1000C8000313F17);
          }
          BYTE4(v1810[3]) = BYTE4(v1810[3]) & 0xF0 | 2;
          LODWORD(v1810[3]) = 23;
          v1810[1] = &unk_1CFB2E308;
          v1810[2] = (void *)1;
          llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)&v1810[1], 1, 0);
          v1798[0] = (llvm::MachineInstr *)v1795;
          LODWORD(v1798[1]) = 0;
          v1523 = llvm::ConstantFP::get(v1513, (llvm::LLVMContext *)v1810, v1522);
          ((void (*)(llvm::IntegerType *****, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))(*v1775)[3])(v1775, v1798, v1523);
          int v1772 = *(_DWORD *)(*(void *)(v1524 + 32) + 4);
          if (v1810[1] == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)&v1810[2]);
          }
          else if ((*((_DWORD *)v1810[1] + 2) - 64) <= 0xFFFFFF7F && v1810[2])
          {
            MEMORY[0x1D25D9CB0](v1810[2], 0x1000C8000313F17);
          }
          v1798[0] = (llvm::MachineInstr *)v1795;
          LODWORD(v1798[1]) = 0;
          if (v1795)
          {
            unint64_t v1525 = ((unint64_t)v1795 >> 3);
          }
          else if ((v1795 & 4) != 0)
          {
            if ((v1795 & 2) != 0) {
              unint64_t v1525 = (unsigned __int16)((unint64_t)v1795 >> 19);
            }
            else {
              unint64_t v1525 = ((unint64_t)v1795 >> 19);
            }
          }
          else
          {
            unint64_t v1525 = (unsigned __int16)((unint64_t)v1795 >> 3);
          }
          uint64_t v1526 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)v1525);
          v1528 = *(llvm::ConstantInt **)v1526;
          unsigned int v1529 = *(_DWORD *)(v1526 + 8);
          LODWORD(v1810[1]) = v1529 >> 8;
          if (v1529 >> 8 > 0x40) {
            operator new[]();
          }
          if (v1529 <= 0xFF) {
            LOBYTE(v1530) = 0;
          }
          else {
            unint64_t v1530 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1529) + 63);
          }
          v1810[0] = (void *)(v1530 & 1);
          v1531 = llvm::ConstantInt::get(v1528, (llvm::LLVMContext *)v1810, v1527);
          if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
            MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
          }
          uint64_t v1532 = ((uint64_t (*)(llvm::IntegerType *****, llvm::MachineInstr **, void *))(*v1775)[2])(v1775, v1798, v1531);
          v1756 = v1533;
          v1766 = (void *)v1532;
          v1798[0] = (llvm::MachineInstr *)v1795;
          LODWORD(v1798[1]) = 0;
          if (v1795)
          {
            unint64_t v1534 = ((unint64_t)v1795 >> 3);
          }
          else if ((v1795 & 4) != 0)
          {
            if ((v1795 & 2) != 0) {
              unint64_t v1534 = (unsigned __int16)((unint64_t)v1795 >> 19);
            }
            else {
              unint64_t v1534 = ((unint64_t)v1795 >> 19);
            }
          }
          else
          {
            unint64_t v1534 = (unsigned __int16)((unint64_t)v1795 >> 3);
          }
          uint64_t v1535 = llvm::IntegerType::get(***v1775[1], (llvm::LLVMContext *)v1534);
          v1537 = *(llvm::ConstantInt **)v1535;
          unsigned int v1538 = *(_DWORD *)(v1535 + 8);
          LODWORD(v1810[1]) = v1538 >> 8;
          if (v1538 >> 8 > 0x40) {
            operator new[]();
          }
          if (v1538 <= 0xFF) {
            LODWORD(v1539) = 0;
          }
          else {
            unint64_t v1539 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1538) + 63);
          }
          v1810[0] = (void *)(v1539 & 0x7F7FFFFF);
          v1540 = llvm::ConstantInt::get(v1537, (llvm::LLVMContext *)v1810, v1536);
          if (LODWORD(v1810[1]) >= 0x41 && v1810[0]) {
            MEMORY[0x1D25D9CB0](v1810[0], 0x1000C8000313F17);
          }
          v1541 = v1775;
          uint64_t v1542 = ((uint64_t (*)(llvm::IntegerType *****, llvm::MachineInstr **, void *))(*v1775)[2])(v1775, v1798, v1540);
          size_t v1729 = v1543;
          *(void *)v1738 = v1542;
          v1798[0] = (llvm::MachineInstr *)v1795;
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = v286;
          LODWORD(v1810[2]) = 0;
          int v1748 = v1521;
          LODWORD(v1810[3]) = v1521;
          LODWORD(v1811) = 0;
          uint64_t v1544 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1541)[4])(v1541, 165, v1798, 1, v1810, 2, 0);
          v1546 = v1545;
          v1798[0] = (llvm::MachineInstr *)v1795;
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = v286;
          LODWORD(v1810[2]) = 0;
          v1547 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1541)[4])(v1541, 184, v1798, 1, v1810, 1, 0);
          v1549 = v1548;
          v1798[0] = (llvm::MachineInstr *)v1795;
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = 2;
          LODWORD(v1810[2]) = 2;
          v1810[3] = v1547;
          v1810[4] = v1548;
          LODWORD(v1811) = 1;
          int v1550 = v1517;
          DWORD2(v1811) = v1517;
          DWORD2(v1812) = 0;
          uint64_t v1813 = v1544;
          v1814 = v1546;
          int v1815 = 1;
          LODWORD(v1816) = v286;
          int v1818 = 0;
          v1551 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1541)[4])(v1541, 51, v1798, 1, v1810, 5, 0);
          v1553 = v1552;
          v1798[0] = (llvm::MachineInstr *)v1795;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v1551;
          v1810[1] = v1552;
          LODWORD(v1810[2]) = 1;
          v1554 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1541)[4])(v1541, 315, v1798, 1, v1810, 1, 0);
          v1556 = v1555;
          v1798[0] = (llvm::MachineInstr *)v1795;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v1551;
          v1810[1] = v1553;
          LODWORD(v1810[2]) = 1;
          v1557 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1541)[4])(v1541, 177, v1798, 1, v1810, 1, 0);
          v1798[0] = (llvm::MachineInstr *)v1795;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v1557;
          v1810[1] = v1558;
          LODWORD(v1810[2]) = 1;
          v1810[3] = v1554;
          v1810[4] = v1556;
          LODWORD(v1811) = 1;
          DWORD2(v1811) = v1772;
          DWORD2(v1812) = 0;
          v1559 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1541)[4])(v1541, 166, v1798, 1, v1810, 3, 0);
          v1798[0] = (llvm::MachineInstr *)v1795;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v1559;
          v1810[1] = v1560;
          LODWORD(v1810[2]) = 1;
          v1810[3] = v1554;
          v1810[4] = v1556;
          LODWORD(v1811) = 1;
          *((void *)&v1811 + 1) = v1554;
          *(void *)&long long v1812 = v1556;
          DWORD2(v1812) = 1;
          uint64_t v1561 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1541)[4])(v1541, 166, v1798, 1, v1810, 3, 0);
          v1563 = v1562;
          v1798[0] = (llvm::MachineInstr *)v1795;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v1554;
          v1810[1] = v1556;
          LODWORD(v1810[2]) = 1;
          v1564 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1541)[4])(v1541, 184, v1798, 1, v1810, 1, 0);
          v1798[0] = (llvm::MachineInstr *)v1795;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v1564;
          v1810[1] = v1565;
          LODWORD(v1810[2]) = 1;
          v1810[3] = v1766;
          v1810[4] = v1756;
          LODWORD(v1811) = 1;
          v1566 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1541)[4])(v1541, 46, v1798, 1, v1810, 2, 0);
          v1798[0] = (llvm::MachineInstr *)v1795;
          LODWORD(v1798[1]) = 0;
          LODWORD(v1810[0]) = 35;
          LODWORD(v1810[2]) = 2;
          v1810[3] = v1566;
          v1810[4] = v1567;
          LODWORD(v1811) = 1;
          *((void *)&v1811 + 1) = *(void *)v1738;
          *(void *)&long long v1812 = v1729;
          DWORD2(v1812) = 1;
          uint64_t v1813 = (uint64_t)v1554;
          v1814 = (llvm::ConstantFP *)v1556;
          int v1815 = 1;
          uint64_t v1816 = v1561;
          v1817 = v1563;
          int v1818 = 1;
          v1568 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1541)[4])(v1541, 51, v1798, 1, v1810, 5, 0);
          v1570 = v1569;
          v1798[0] = (llvm::MachineInstr *)v1795;
          LODWORD(v1798[1]) = 0;
          v1810[0] = v1568;
          v1810[1] = v1569;
          LODWORD(v1810[2]) = 1;
          LODWORD(v1810[3]) = v1748;
          LODWORD(v1811) = 0;
          uint64_t v1571 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1541)[4])(v1541, 165, v1798, 1, v1810, 2, 0);
          v762 = v1774;
          LODWORD(v1798[0]) = *(_DWORD *)(*((void *)v1774 + 4) + 4);
          LODWORD(v1798[1]) = 1;
          LODWORD(v1810[0]) = 2;
          LODWORD(v1810[2]) = 2;
          v1810[3] = v1547;
          v1810[4] = v1549;
          LODWORD(v1811) = 1;
          DWORD2(v1811) = v1550;
          DWORD2(v1812) = 0;
          uint64_t v1813 = v1571;
          v1814 = v1572;
          int v1815 = 1;
          uint64_t v1816 = (uint64_t)v1568;
          v1817 = v1570;
          int v1818 = 1;
          ((void (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v1541)[4])(v1541, 51, v1798, 1, v1810, 5, 0);
LABEL_736:
          uint64_t v161 = v762;
          goto LABEL_264;
        }
      }
    }
    LODWORD(v1798[0]) = *(_DWORD *)(*((void *)v1774 + 4) + 4);
    LODWORD(v1798[1]) = 1;
    LODWORD(v1810[0]) = *v287;
    LODWORD(v1810[2]) = 0;
    v792 = (void (*)(void))(*v1775)[4];
LABEL_769:
    v792();
    uint64_t v161 = v284;
    goto LABEL_264;
  }
  if (v16 == 258) {
    goto LABEL_296;
  }
  return v22;
}

uint64_t sub_1CBA2E440(uint64_t a1, uint64_t a2, unsigned __int8 **a3, int a4, int a5, uint64_t a6)
{
  llvm::SampleInfo::SampleInfo((uint64_t)v66, a4, a5);
  uint64_t v11 = *(void *)(a1 + 32) + 32 * v67;
  uint64_t v13 = (_DWORD *)(v11 + 4);
  int v12 = *(_DWORD *)(v11 + 4);
  if (v12 < 0 && (uint64_t v14 = v12 & 0x7FFFFFFF, v14 < *(_DWORD *)(a2 + 432))) {
    uint64_t v15 = *(void *)(*(void *)(a2 + 424) + 8 * v14);
  }
  else {
    uint64_t v15 = 0;
  }
  a3[5] = *(unsigned __int8 **)(a1 + 24);
  a3[6] = (unsigned __int8 *)a1;
  uint64_t v16 = (unsigned __int8 **)(a1 + 56);
  int v17 = a3 + 4;
  if ((unsigned __int8 **)(a1 + 56) == a3 + 4) {
    goto LABEL_9;
  }
  unint64_t v18 = *v17;
  if (*v17)
  {
    int v39 = *v18;
    if ((v39 - 4) > 0x1E)
    {
      if ((v39 - 3) >= 0xFFFFFFFE) {
        uint64_t v59 = *v17;
      }
      else {
        uint64_t v59 = 0;
      }
      if ((v39 - 3) < 0xFFFFFFFE)
      {
        if (v39 == 3) {
          *((void *)v18 + 1) = 0;
        }
        goto LABEL_7;
      }
      unint64_t v41 = (unint64_t)(v59 + 8);
    }
    else
    {
      if ((v18[1] & 0x7F) != 2 && !*((_DWORD *)v18 + 3)) {
        goto LABEL_7;
      }
      uint64_t v40 = *((void *)v18 + 2);
      if ((v40 & 4) == 0) {
        goto LABEL_7;
      }
      unint64_t v41 = v40 & 0xFFFFFFFFFFFFFFF8;
      if (!v41) {
        goto LABEL_7;
      }
    }
    uint64_t v61 = (uint64_t)(a3 + 4);
    sub_1CC5FA668(v41 + 16, &v61);
  }
LABEL_7:
  char v19 = *v16;
  int *v17 = *v16;
  if (v19) {
    llvm::MetadataTracking::track((uint64_t)(a3 + 4), v19, 2);
  }
LABEL_9:
  if ((v15 & 0xFFFFFFFFFFFFFFF9) == 0 || (v15 & 2) == 0 || (v15 & 4) != 0) {
    goto LABEL_22;
  }
  uint64_t v20 = *v13;
  if ((v20 & 0x80000000) != 0) {
    unint64_t v21 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v21 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v20);
  }
  uint64_t v22 = *v21;
  if ((*(unsigned char *)(v22 + 3) & 1) == 0) {
    uint64_t v22 = *(void *)(v22 + 24);
  }
  if (**(_WORD **)(*(void *)(v22 + 8) + 16) == 193)
  {
    unint64_t v23 = sub_1CBA2EB1C(v20, a2, 0);
    if (HIDWORD(v23))
    {
      uint64_t v61 = 129;
      LODWORD(v62) = 0;
      unint64_t v27 = v23;
      size_t v28 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a3[1], (llvm::LLVMContext *)0x10);
      uint64_t v29 = llvm::ConstantInt::get(v28, v27, (const llvm::APInt *)1);
      (*((void (**)(unsigned __int8 **, uint64_t *, void *))*a3 + 2))(a3, &v61, v29);
      goto LABEL_21;
    }
    LODWORD(v20) = *v13;
  }
  unint64_t v64 = 513;
  int v65 = 0;
  LODWORD(v61) = v20;
  int v63 = 0;
  uint64_t v24 = sub_1CC7382B0((uint64_t)a3);
  unint64_t v64 = 129;
  int v65 = 0;
  uint64_t v61 = v24;
  uint64_t v62 = v25;
  int v63 = 1;
  (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, void))*a3 + 4))(a3, 119, &v64, 1, &v61, 1, 0);
LABEL_21:
  uint64_t v30 = v26;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a6 + 32))(a6, a1);
  llvm::MachineOperand::setReg(v11, *(_DWORD *)(*(void *)(v30 + 32) + 4));
  (*(void (**)(uint64_t, uint64_t))(*(void *)a6 + 40))(a6, a1);
LABEL_22:
  if (v68 == -1) {
    goto LABEL_44;
  }
  uint64_t v31 = *(void *)(a1 + 32) + 32 * v68;
  unsigned int v32 = *(_DWORD *)(v31 + 4);
  if ((v32 & 0x80000000) == 0 || (v32 & 0x7FFFFFFF) >= *(_DWORD *)(a2 + 432)) {
    goto LABEL_44;
  }
  if ((*(void *)(*(void *)(a2 + 424) + 8 * (v32 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) == 0
    || (*(void *)(*(void *)(a2 + 424) + 8 * (v32 & 0x7FFFFFFF)) & 6) != 2)
  {
    goto LABEL_44;
  }
  uint64_t v34 = *(void *)(*(void *)(a2 + 24) + 16 * (v32 & 0x7FFFFFFF) + 8);
  if ((*(unsigned char *)(v34 + 3) & 1) == 0) {
    uint64_t v34 = *(void *)(v34 + 24);
  }
  if (**(_WORD **)(*(void *)(v34 + 8) + 16) == 193)
  {
    unint64_t v35 = sub_1CBA2EB1C(v32, a2, 0);
    if (HIDWORD(v35))
    {
      uint64_t v61 = 129;
      LODWORD(v62) = 0;
      unint64_t v42 = v35;
      int v43 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a3[1], (llvm::LLVMContext *)0x10);
      uint64_t v44 = llvm::ConstantInt::get(v43, v42, (const llvm::APInt *)1);
      (*((void (**)(unsigned __int8 **, uint64_t *, void *))*a3 + 2))(a3, &v61, v44);
      goto LABEL_43;
    }
    unsigned int v32 = *(_DWORD *)(v31 + 4);
  }
  unint64_t v64 = 513;
  int v65 = 0;
  LODWORD(v61) = v32;
  int v63 = 0;
  uint64_t v36 = sub_1CC7382B0((uint64_t)a3);
  unint64_t v64 = 129;
  int v65 = 0;
  uint64_t v61 = v36;
  uint64_t v62 = v37;
  int v63 = 1;
  (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, void))*a3 + 4))(a3, 119, &v64, 1, &v61, 1, 0);
LABEL_43:
  uint64_t v45 = v38;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a6 + 32))(a6, a1);
  llvm::MachineOperand::setReg(v31, *(_DWORD *)(*(void *)(v45 + 32) + 4));
  (*(void (**)(uint64_t, uint64_t))(*(void *)a6 + 40))(a6, a1);
LABEL_44:
  if (a5 != 3) {
    return 1;
  }
  int v46 = *(_DWORD *)(*(void *)(a1 + 32) + 36);
  if ((v46 & 0x80000000) == 0 || (v46 & 0x7FFFFFFFu) >= *(_DWORD *)(a2 + 432)) {
    return 0;
  }
  uint64_t v47 = *(void *)(*(void *)(a2 + 424) + 8 * (v46 & 0x7FFFFFFF));
  if (v47 == 129) {
    return 1;
  }
  if (v47 != 65) {
    return 0;
  }
  unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
  unint64_t v48 = IncompleteVirtualRegister & 0x7FFFFFFF;
  *(void *)(*(void *)(a2 + 24) + 16 * v48) = 4;
  unint64_t v49 = *(unsigned int *)(a2 + 432);
  if (v48 >= v49)
  {
    uint64_t v50 = *(void *)(a2 + 440);
    uint64_t v51 = v48 + 1 - v49;
    if (v48 >= *(unsigned int *)(a2 + 436)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v52 = *(_DWORD *)(a2 + 432);
    if (v51)
    {
      uint64_t v53 = (void *)(*(void *)(a2 + 424) + 8 * *(unsigned int *)(a2 + 432));
      uint64_t v54 = ~v48 + v49;
      do
        *v53++ = v50;
      while (!__CFADD__(v54++, 1));
      int v52 = *(_DWORD *)(a2 + 432);
    }
    *(_DWORD *)(a2 + 432) = v52 + v51;
  }
  *(void *)(*(void *)(a2 + 424) + 8 * v48) = 129;
  uint64_t v56 = *(void *)(a2 + 8);
  if (v56) {
    (*(void (**)(uint64_t, void))(*(void *)v56 + 24))(v56, IncompleteVirtualRegister);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a6 + 32))(a6, a1);
  llvm::MachineOperand::setReg(*(void *)(a1 + 32) + 32, IncompleteVirtualRegister);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a6 + 40))(a6, a1);
  uint64_t v57 = 1;
  LODWORD(v64) = v46;
  int v65 = 1;
  LODWORD(v61) = IncompleteVirtualRegister;
  int v63 = 0;
  sub_1CC738034(a3, 126, &v64, (int *)&v61);
  return v57;
}

uint64_t sub_1CBA2EB1C(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1;
  sub_1CBA315DC((uint64_t)v10, a1, a2, 1);
  if (!v11) {
    return 0;
  }
  if ((a1 & 0x80000000) != 0) {
    unint64_t v7 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v7 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v6);
  }
  uint64_t v8 = *v7;
  if ((*(unsigned char *)(v8 + 3) & 1) == 0) {
    uint64_t v8 = *(void *)(v8 + 24);
  }
  return sub_1CD1117B0(v10[0], (uint64_t)v10[1], *(void *)(*(void *)(*(void *)(*(void *)(v8 + 8) + 24) + 32) + 344), a3) | 0x100000000;
}

uint64_t sub_1CBA2EBE4(int a1)
{
  if (a1 > 2409)
  {
    if (a1 <= 2664)
    {
      if (a1 <= 2483)
      {
        switch(a1)
        {
          case 2410:
            return 28;
          case 2423:
            return 8;
          case 2444:
            return 29;
        }
        return 41;
      }
      if (a1 > 2543)
      {
        switch(a1)
        {
          case 2544:
            return 35;
          case 2586:
            return 33;
          case 2587:
            return 34;
        }
        return 41;
      }
      switch(a1)
      {
        case 2484:
          uint64_t result = 32;
          break;
        case 2485:
          uint64_t result = 31;
          break;
        case 2486:
          uint64_t result = 30;
          break;
        case 2491:
          return 33;
        case 2492:
          return 34;
        default:
          return 41;
      }
    }
    else
    {
      if (a1 > 2705)
      {
        if (a1 <= 2707)
        {
          if (a1 == 2706) {
            return 52;
          }
          else {
            return 53;
          }
        }
        if (a1 == 2708) {
          return 54;
        }
        if (a1 == 2732) {
          return 55;
        }
        return 41;
      }
      int v2 = a1 - 2665;
      uint64_t result = 43;
      switch(v2)
      {
        case 0:
          uint64_t result = 47;
          break;
        case 1:
          uint64_t result = 48;
          break;
        case 2:
          uint64_t result = 49;
          break;
        case 4:
          uint64_t result = 37;
          break;
        case 6:
          uint64_t result = 42;
          break;
        case 7:
          return result;
        case 8:
          uint64_t result = 44;
          break;
        case 9:
LABEL_36:
          uint64_t result = 45;
          break;
        case 10:
          uint64_t result = 46;
          break;
        case 11:
          uint64_t result = 12;
          break;
        case 12:
          uint64_t result = 51;
          break;
        case 13:
          uint64_t result = 50;
          break;
        case 14:
          return 29;
        default:
          return 41;
      }
    }
  }
  else
  {
    if (a1 <= 2304)
    {
      if (a1 > 2131)
      {
        switch(a1)
        {
          case 2132:
            uint64_t result = 5;
            break;
          case 2139:
            uint64_t result = 6;
            break;
          case 2140:
            uint64_t result = 7;
            break;
          case 2145:
            uint64_t result = 38;
            break;
          case 2146:
            uint64_t result = 39;
            break;
          case 2147:
            uint64_t result = 40;
            break;
          case 2150:
            uint64_t result = 9;
            break;
          case 2151:
            uint64_t result = 10;
            break;
          case 2152:
            uint64_t result = 11;
            break;
          case 2154:
            uint64_t result = 15;
            break;
          case 2155:
            uint64_t result = 16;
            break;
          case 2156:
            uint64_t result = 14;
            break;
          case 2169:
            goto LABEL_36;
          case 2170:
            return 36;
          case 2173:
            uint64_t result = 21;
            break;
          case 2174:
            uint64_t result = 22;
            break;
          case 2175:
            uint64_t result = 23;
            break;
          case 2176:
            uint64_t result = 24;
            break;
          default:
            return 41;
        }
        return result;
      }
      switch(a1)
      {
        case 1269:
          return 36;
        case 2107:
          return 3;
        case 2108:
          return 4;
      }
      return 41;
    }
    if (a1 > 2364)
    {
      switch(a1)
      {
        case 2365:
          return 25;
        case 2408:
          return 26;
        case 2409:
          return 27;
      }
      return 41;
    }
    switch(a1)
    {
      case 2305:
        uint64_t result = 17;
        break;
      case 2306:
        uint64_t result = 18;
        break;
      case 2307:
        uint64_t result = 19;
        break;
      case 2308:
        uint64_t result = 20;
        break;
      default:
        return 41;
    }
  }
  return result;
}

uint64_t sub_1CBA2F01C(int a1, int a2)
{
  uint64_t result = 4;
  switch(a1)
  {
    case 4:
    case 9:
    case 10:
    case 15:
    case 16:
    case 19:
    case 20:
    case 36:
    case 41:
    case 43:
    case 45:
    case 47:
    case 48:
    case 49:
    case 52:
    case 53:
    case 54:
      return 32;
    case 5:
    case 12:
      return 16;
    case 6:
      return 8;
    case 7:
    case 35:
      int v4 = a2 - 1;
      if ((a2 - 1) >= 0xF) {
        return 2;
      }
      uint64_t v5 = (unsigned int *)&unk_1CDB0E5CC;
      return v5[v4];
    case 8:
    case 17:
    case 22:
    case 29:
    case 31:
      return 2;
    case 14:
    case 55:
      return 5;
    case 21:
      return result;
    case 23:
    case 24:
    case 38:
    case 39:
    case 40:
    case 42:
    case 44:
    case 46:
      return 11;
    case 25:
    case 37:
      return 10;
    case 26:
    case 27:
    case 28:
      int v4 = a2 - 1;
      if ((a2 - 1) >= 0xF) {
        return 8;
      }
      uint64_t v5 = (unsigned int *)&unk_1CDB0E554;
      return v5[v4];
    case 30:
    case 50:
      return 3;
    case 32:
      BOOL v6 = (a2 - 6) >= 0xA;
      unsigned int v7 = 2;
      unsigned int v8 = 5;
      goto LABEL_22;
    case 33:
      int v4 = a2 - 1;
      if ((a2 - 1) >= 0xF) {
        return 1;
      }
      uint64_t v5 = (unsigned int *)&unk_1CDB0E608;
      return v5[v4];
    case 34:
      int v4 = a2 - 1;
      if ((a2 - 1) >= 0xF) {
        return 8;
      }
      uint64_t v5 = (unsigned int *)&unk_1CDB0E590;
      return v5[v4];
    case 51:
      BOOL v6 = (a2 - 6) >= 0xA;
      unsigned int v7 = 3;
      unsigned int v8 = 6;
LABEL_22:
      if (v6) {
        return v7;
      }
      else {
        return v8;
      }
    default:
      return 1;
  }
}

uint64_t sub_1CBA2F1F4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::IntegerType *****a6, uint64_t a7)
{
  uint64_t v284 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 24) + 32) + 8);
  uint64_t v249 = *(void *)(*(void *)(a1 + 24) + 32);
  uint64_t v241 = (*(uint64_t (**)(void))(*(void *)(v10 + 1328) + 176))();
  if (*(unsigned char *)(v10 + 1646))
  {
    int v11 = 4;
  }
  else if (*(unsigned char *)(v10 + 1647))
  {
    int v11 = 5;
  }
  else if (*(unsigned char *)(v10 + 1648))
  {
    int v11 = 6;
  }
  else if (*(unsigned char *)(v10 + 1649))
  {
    int v11 = 7;
  }
  else
  {
    int v11 = 9;
  }
  unsigned int v254 = v11;
  uint64_t v12 = 16777252;
  long long v262 = 0u;
  int64x2_t v263 = 0u;
  sub_1CBA5AD88(a3, (uint64_t)&v266);
  if ((a3 - 2703) >= 2 && !a2)
  {
    if (v266 == -1)
    {
      unsigned int v13 = -1;
    }
    else
    {
      unsigned int v13 = v266 + 2;
      v266 += 2;
    }
    if (v267 == -1)
    {
      unsigned int v22 = -1;
    }
    else
    {
      unsigned int v22 = v267 + 2;
      v267 += 2;
    }
    int32x2_t v23 = vadd_s32(v268, (int32x2_t)0x200000002);
    int32x2_t v268 = v23;
    if (v269 != -1) {
      v269 += 2;
    }
    if (v270 != -1) {
      v270 += 2;
    }
    unsigned int v247 = v23.i32[0];
    if (v271 == -1)
    {
      unsigned int v24 = -1;
    }
    else
    {
      unsigned int v24 = v271 + 2;
      v271 += 2;
    }
    unsigned int v18 = 0;
    int32x2_t v272 = vadd_s32(v272, (int32x2_t)0x200000002);
    long long v25 = xmmword_1CDB0E020;
    long long v26 = xmmword_1CDB0CFB0;
    int v27 = 25;
    switch((int)a3)
    {
      case 2545:
      case 2547:
      case 2549:
      case 2551:
      case 2553:
      case 2555:
      case 2557:
      case 2559:
        goto LABEL_44;
      case 2546:
      case 2548:
      case 2550:
      case 2552:
      case 2554:
      case 2556:
      case 2558:
      case 2560:
        break;
      case 2561:
      case 2563:
      case 2565:
      case 2567:
      case 2569:
      case 2571:
      case 2573:
      case 2575:
LABEL_43:
        unsigned int v18 = 1;
LABEL_44:
        long long v25 = xmmword_1CDB0E030;
        long long v26 = xmmword_1CDB0CFC0;
        uint64_t v12 = 8388644;
        int v27 = 1;
        break;
      case 2562:
      case 2564:
      case 2566:
      case 2568:
      case 2570:
      case 2572:
      case 2574:
      case 2576:
LABEL_45:
        unsigned int v18 = 1;
        break;
      default:
        switch((int)a3)
        {
          case 2472:
          case 2474:
            goto LABEL_45;
          case 2475:
          case 2477:
            goto LABEL_44;
          case 2476:
          case 2478:
            goto LABEL_46;
          default:
            goto LABEL_43;
        }
    }
LABEL_46:
    long long v262 = v25;
    v263.i64[0] = v12;
    v263.i64[1] = v12;
    *(_OWORD *)&v265[4] = v26;
    *(_DWORD *)&v265[20] = v27;
    *(_DWORD *)uint64_t v265 = 2;
    int v28 = sub_1CBA5AE38(a1, v13);
    int v30 = v28;
    if (((1 << v28) & 0xF4FF) != 0)
    {
      char v31 = 0;
    }
    else if (v28 == 8)
    {
      char v31 = 1;
    }
    else
    {
      char v31 = 0;
      int v30 = 14;
    }
    int v261 = v30;
    if (v22 == -1) {
      int v32 = 1;
    }
    else {
      int v32 = sub_1CBA5AE38(a1, v22);
    }
    if (v31)
    {
      int v33 = 15;
    }
    else
    {
      int v33 = 7;
      if ((v30 & 0xE) != 0xC)
      {
        if ((v30 & 0xE) == 0xE && v254 >= 7) {
          int v33 = 7;
        }
        else {
          int v33 = v32;
        }
      }
    }
    v29.i32[0] = v33;
    uint8x8_t v35 = (uint8x8_t)vcnt_s8(v29);
    v35.i16[0] = vaddlv_u8(v35);
    unsigned int v260 = v35.i32[0];
    int v264 = sub_1CBA5AF20(a1, v24, v247);
    uint64_t v37 = sub_1CB8F1DC4((unint64_t *)&v262);
    if (v36 == 1) {
    BOOL v38 = v37 != 16;
    }
    BOOL v259 = v38;
    int v39 = v264;
    uint64_t v40 = v260;
    unint64_t v41 = (char *)&unk_1CDB0E14C + 480 * ((v254 & 0xE) != 4);
    goto LABEL_83;
  }
  if (v266 == -1) {
    unsigned int v14 = -1;
  }
  else {
    unsigned int v14 = ++v266;
  }
  if (v267 == -1) {
    unsigned int v15 = -1;
  }
  else {
    unsigned int v15 = ++v267;
  }
  int32x2_t v16 = vadd_s32(v268, (int32x2_t)0x100000001);
  unsigned int v246 = v16.i32[0];
  int32x2_t v268 = v16;
  if (v269 != -1) {
    ++v269;
  }
  if (v270 != -1) {
    ++v270;
  }
  if (v271 == -1) {
    unsigned int v17 = -1;
  }
  else {
    unsigned int v17 = ++v271;
  }
  unsigned int v18 = 0;
  int32x2_t v272 = vadd_s32(v272, (int32x2_t)0x100000001);
  long long v19 = xmmword_1CDB0E020;
  long long v20 = xmmword_1CDB0CFB0;
  int v21 = 25;
  if ((int)a3 > 2544)
  {
    switch((int)a3)
    {
      case 2545:
      case 2549:
      case 2553:
      case 2557:
        goto LABEL_65;
      case 2546:
      case 2548:
      case 2550:
      case 2552:
      case 2554:
      case 2556:
      case 2558:
      case 2560:
        goto LABEL_66;
      case 2547:
      case 2551:
      case 2555:
      case 2559:
        goto LABEL_248;
      case 2561:
      case 2565:
      case 2569:
      case 2573:
        goto LABEL_64;
      case 2562:
      case 2564:
      case 2566:
      case 2568:
      case 2570:
      case 2572:
      case 2574:
      case 2576:
        goto LABEL_29;
      case 2563:
      case 2567:
      case 2571:
      case 2575:
        goto LABEL_247;
      default:
        if (a3 == 2703) {
          goto LABEL_247;
        }
        goto LABEL_248;
    }
  }
  switch((int)a3)
  {
    case 2472:
    case 2474:
LABEL_29:
      unsigned int v18 = 1;
      goto LABEL_66;
    case 2473:
LABEL_247:
      unsigned int v18 = 1;
      goto LABEL_248;
    case 2475:
      goto LABEL_65;
    case 2476:
    case 2478:
      goto LABEL_66;
    case 2477:
LABEL_248:
      long long v262 = xmmword_1CDB0E030;
      int64x2_t v263 = vdupq_n_s64(0x800024uLL);
      *(void *)&v265[16] = 0x10000000FLL;
      v43.i32[1] = 0;
      *(_OWORD *)uint64_t v265 = xmmword_1CDB0CFF0;
      if ((a3 - 2703) >= 2) {
        goto LABEL_67;
      }
      char v45 = 0;
      int v44 = 1;
      break;
    default:
LABEL_64:
      unsigned int v18 = 1;
LABEL_65:
      long long v19 = xmmword_1CDB0E030;
      long long v20 = xmmword_1CDB0CFC0;
      uint64_t v12 = 8388644;
      int v21 = 1;
LABEL_66:
      long long v262 = v19;
      v263.i64[0] = v12;
      v263.i64[1] = v12;
      *(_OWORD *)&v265[4] = v20;
      *(_DWORD *)&v265[20] = v21;
      *(_DWORD *)uint64_t v265 = 2;
LABEL_67:
      int v42 = sub_1CBA5AE38(a1, v14);
      int v44 = v42;
      if (((1 << v42) & 0xF4FF) != 0)
      {
        char v45 = 0;
      }
      else if (v42 == 8)
      {
        char v45 = 1;
      }
      else
      {
        char v45 = 0;
        int v44 = 14;
      }
      break;
  }
  int v261 = v44;
  if (v15 == -1)
  {
    int v46 = 1;
    if (v45) {
      goto LABEL_71;
    }
LABEL_73:
    int v47 = 7;
    if ((v44 & 0xE) != 0xC)
    {
      if ((v44 & 0xE) == 0xE && v254 >= 7) {
        int v47 = 7;
      }
      else {
        int v47 = v46;
      }
    }
    goto LABEL_80;
  }
  int v46 = sub_1CBA5AE38(a1, v15);
  if ((v45 & 1) == 0) {
    goto LABEL_73;
  }
LABEL_71:
  int v47 = 15;
LABEL_80:
  v43.i32[0] = v47;
  uint8x8_t v49 = (uint8x8_t)vcnt_s8(v43);
  v49.i16[0] = vaddlv_u8(v49);
  unsigned int v260 = v49.i32[0];
  int v264 = sub_1CBA5AF20(a1, v17, v246);
  uint64_t v51 = sub_1CB8F1DC4((unint64_t *)&v262);
  if (v50 == 1) {
  BOOL v38 = v51 != 16;
  }
  BOOL v259 = v38;
  int v39 = v264;
  uint64_t v40 = v260;
  unint64_t v41 = (char *)&unk_1CDB0E14C + 480 * ((v254 & 0xE) != 4) + 240 * a2;
LABEL_83:
  unsigned int v258 = *(_DWORD *)&v41[80 * v39 + 40 * v18 + 20 * v38 + 4 * v40];
  if (v267 == -1)
  {
    int v52 = 1;
  }
  else
  {
    sub_1CC73C210(*(_DWORD *)(*(void *)(a1 + 32) + 32 * v267 + 4), a5, (uint64_t)v279);
    if ((_BYTE)v280)
    {
      if (LODWORD(v279[1]) > 0x40)
      {
        if (v279[0]) {
          MEMORY[0x1D25D9CB0](v279[0], 0x1000C8000313F17);
        }
        int v53 = 0;
        int v54 = 0;
      }
      else
      {
        int v53 = ((uint64_t)v279[0] << -LOBYTE(v279[1]) >> -LOBYTE(v279[1])) & 0xFFFFFF00;
        int v54 = ((uint64_t)v279[0] << -LOBYTE(v279[1]) >> -LOBYTE(v279[1]));
      }
      int v52 = v54 | v53;
    }
    else
    {
      int v52 = 0;
    }
  }
  if (v261 == 8)
  {
    unsigned int v55 = 15;
  }
  else
  {
    unsigned int v55 = 7;
    if ((v261 & 0xFFFFFFFE) != 0xC)
    {
      if ((v261 & 0xFFFFFFFE) == 0xE && v254 >= 7) {
        unsigned int v55 = 7;
      }
      else {
        unsigned int v55 = v52;
      }
    }
  }
  uint64_t v57 = v268.u32[0];
  uint64_t v58 = *(void *)(a1 + 32);
  if ((a2 & 1) == 0 && *(unsigned char *)(v10 + 1689))
  {
    char v245 = 1;
LABEL_109:
    uint64_t v59 = a4;
    goto LABEL_110;
  }
  sub_1CC73C210(*(_DWORD *)(v58 + 32 * v268.u32[1] + 4), a5, (uint64_t)v279);
  if (!(_BYTE)v280) {
    goto LABEL_103;
  }
  if (LODWORD(v279[1]) > 0x40)
  {
    if (v279[0]) {
      MEMORY[0x1D25D9CB0](v279[0], 0x1000C8000313F17);
    }
LABEL_103:
    char v245 = 0;
    goto LABEL_106;
  }
  char v245 = (uint64_t)v279[0] << -(uint64_t)LODWORD(v279[1]) >> -(uint64_t)LODWORD(v279[1]);
LABEL_106:
  if (!a2) {
    goto LABEL_109;
  }
  if (v269 == -1)
  {
    uint64_t v59 = a4;
    if (!a4)
    {
      v279[0] = (void *)129;
      LODWORD(v279[1]) = 0;
      ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void, void, void))(*a6)[4])(a6, 68, v279, 1, 0, 0, 0);
      uint64_t v59 = *(void *)(v84 + 32);
    }
  }
  else
  {
    uint64_t v59 = *(void *)(a1 + 32) + 32 * v269;
  }
LABEL_110:
  uint64_t v60 = *(void *)(a1 + 32);
  if (v270 == -1) {
    uint64_t v61 = 0;
  }
  else {
    uint64_t v61 = (llvm::MachineOperand *)(v60 + 32 * v270);
  }
  unint64_t v244 = v61;
  if (v271 == -1)
  {
    uint64_t v276 = (void *)129;
    LODWORD(v277) = 0;
    uint64_t v63 = llvm::IntegerType::get(***a6[1], (llvm::LLVMContext *)0x10);
    int v65 = *(llvm::ConstantInt **)v63;
    unsigned int v66 = *(_DWORD *)(v63 + 8);
    LODWORD(v279[1]) = v66 >> 8;
    if (v66 >> 8 >= 0x41) {
      operator new[]();
    }
    v279[0] = 0;
    unsigned int v67 = llvm::ConstantInt::get(v65, (llvm::LLVMContext *)v279, v64);
    if (LODWORD(v279[1]) >= 0x41 && v279[0]) {
      MEMORY[0x1D25D9CB0](v279[0], 0x1000C8000313F17);
    }
    ((void (*)(llvm::IntegerType *****, void **, void *))(*a6)[2])(a6, &v276, v67);
    uint64_t v62 = *(void *)(v68 + 32);
    uint64_t v60 = *(void *)(a1 + 32);
  }
  else
  {
    uint64_t v62 = v60 + 32 * v271;
  }
  sub_1CC73C210(*(_DWORD *)(v60 + 32 * v272.u32[0] + 4), a5, (uint64_t)v279);
  if ((_BYTE)v280)
  {
    if (LODWORD(v279[1]) > 0x40)
    {
      if (v279[0]) {
        MEMORY[0x1D25D9CB0](v279[0], 0x1000C8000313F17);
      }
      unint64_t v69 = 0;
      uint64_t v70 = 0;
    }
    else
    {
      unint64_t v69 = ((uint64_t)v279[0] << -LOBYTE(v279[1]) >> -LOBYTE(v279[1])) & 0xFFFFFFFFFFFFFF00;
      uint64_t v70 = ((uint64_t)v279[0] << -LOBYTE(v279[1]) >> -LOBYTE(v279[1]));
    }
    unint64_t v250 = v70 | v69;
  }
  else
  {
    unint64_t v250 = 0;
  }
  sub_1CC73C210(*(_DWORD *)(*(void *)(a1 + 32) + 32 * v272.u32[1] + 4), a5, (uint64_t)v279);
  if ((_BYTE)v280)
  {
    if (LODWORD(v279[1]) > 0x40)
    {
      if (v279[0]) {
        MEMORY[0x1D25D9CB0](v279[0], 0x1000C8000313F17);
      }
      unint64_t v72 = 0;
      uint64_t v73 = 0;
    }
    else
    {
      unint64_t v72 = ((uint64_t)v279[0] << -LOBYTE(v279[1]) >> -LOBYTE(v279[1])) & 0xFFFFFFFFFFFFFF00;
      uint64_t v73 = ((uint64_t)v279[0] << -LOBYTE(v279[1]) >> -LOBYTE(v279[1]));
    }
    unint64_t v248 = v73 | v72;
  }
  else
  {
    unint64_t v248 = 0;
  }
  a6[5] = *(llvm::IntegerType *****)(a1 + 24);
  a6[6] = (llvm::IntegerType ****)a1;
  uint64_t v74 = (unsigned __int8 **)(a1 + 56);
  uint64_t v75 = (unsigned __int8 **)(a6 + 4);
  if ((llvm::IntegerType *****)(a1 + 56) != a6 + 4)
  {
    long long v76 = *v75;
    if (!*v75) {
      goto LABEL_130;
    }
    int v146 = *v76;
    if ((v146 - 4) > 0x1E)
    {
      if ((v146 - 3) >= 0xFFFFFFFE) {
        int v152 = *v75;
      }
      else {
        int v152 = 0;
      }
      if ((v146 - 3) < 0xFFFFFFFE)
      {
        if (v146 == 3) {
          *((void *)v76 + 1) = 0;
        }
        goto LABEL_130;
      }
      unint64_t v148 = (unint64_t)(v152 + 8);
    }
    else if ((v76[1] & 0x7F) != 2 && !*((_DWORD *)v76 + 3) {
           || (uint64_t v147 = *((void *)v76 + 2), (v147 & 4) == 0)
    }
           || (unint64_t v148 = v147 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_130:
      uint64_t v71 = *v74;
      *uint64_t v75 = *v74;
      if (v71) {
        llvm::MetadataTracking::track((uint64_t)(a6 + 4), v71, 2);
      }
      goto LABEL_132;
    }
    v279[0] = a6 + 4;
    sub_1CC5FA668(v148 + 16, v279);
    goto LABEL_130;
  }
LABEL_132:
  if (!a2)
  {
LABEL_181:
    uint64_t v243 = v59;
    goto LABEL_182;
  }
  uint64_t v77 = (void *)v262;
  uint64_t v78 = *(unsigned int *)(v59 + 4);
  if ((v78 & 0x80000000) != 0) {
    int v79 = (uint64_t *)(*(void *)(a5 + 24) + 16 * (v78 & 0x7FFFFFFF) + 8);
  }
  else {
    int v79 = (uint64_t *)(*(void *)(a5 + 272) + 8 * v78);
  }
  uint64_t v80 = *v79;
  if (v80)
  {
    if (*(unsigned char *)(v80 + 3) & 1) != 0 || (uint64_t v80 = *(void *)(v80 + 24)) != 0 && (*(unsigned char *)(v80 + 3))
    {
      uint64_t v81 = *(void *)(v80 + 8);
      if (v81)
      {
        if (**(_WORD **)(v81 + 16) == 82)
        {
          if ((v78 & 0x80000000) != 0 && (unsigned int v82 = v78 & 0x7FFFFFFF, v82 < *(_DWORD *)(a5 + 432))) {
            uint64_t v83 = *(void *)(*(void *)(a5 + 424) + 8 * v82);
          }
          else {
            uint64_t v83 = 0;
          }
          uint64_t v85 = *(unsigned int *)(*(void *)(v81 + 32) + 36);
          if ((v85 & 0x80000000) != 0) {
            unint64_t v86 = (uint64_t *)(*(void *)(a5 + 24) + 16 * (v85 & 0x7FFFFFFF) + 8);
          }
          else {
            unint64_t v86 = (uint64_t *)(*(void *)(a5 + 272) + 8 * v85);
          }
          uint64_t v87 = *v86;
          if (v87
            && ((*(unsigned char *)(v87 + 3) & 1) != 0 || (uint64_t v87 = *(void *)(v87 + 24)) != 0 && (*(unsigned char *)(v87 + 3) & 1) != 0))
          {
            uint64_t v88 = *(void *)(v87 + 8);
            if ((v85 & 0x80000000) == 0) {
              goto LABEL_169;
            }
          }
          else
          {
            uint64_t v88 = 0;
            if ((v85 & 0x80000000) == 0) {
              goto LABEL_169;
            }
          }
          unsigned int v89 = v85 & 0x7FFFFFFF;
          if (v89 < *(_DWORD *)(a5 + 432))
          {
            unint64_t v90 = *(void *)(*(void *)(a5 + 424) + 8 * v89);
            if ((v90 & 0xFFFFFFFFFFFFFFF9) != 0 && (v90 & 4) != 0)
            {
              if ((v83 & 2) != 0) {
                uint64_t v91 = 0x800000000000000;
              }
              else {
                uint64_t v91 = 0x8000000000000;
              }
              if ((v91 & v83) != 0) {
                llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)v71);
              }
              if ((v90 & 2) != 0) {
                uint64_t v92 = 0x800000000000000;
              }
              else {
                uint64_t v92 = 0x8000000000000;
              }
              if ((v92 & v90) != 0) {
                llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)v71);
              }
              if ((unsigned __int16)(v83 >> 3) == (unsigned __int16)(v90 >> 3))
              {
                char v93 = 3;
                if ((v90 & 1) == 0) {
                  char v93 = 19;
                }
                unint64_t v94 = v90 >> v93;
                if ((v90 & 2) != 0) {
                  uint64_t v77 = (void *)((v90 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v94) | 2);
                }
                else {
                  uint64_t v77 = (void *)(v90 & 0x8000000000000000 | (8 * v94) | 1);
                }
                uint64_t v59 = *(void *)(v88 + 32) + 32;
              }
            }
          }
        }
      }
    }
  }
LABEL_169:
  if (v260 < 2)
  {
    if (!a4 && v260 == 1)
    {
      uint64_t v276 = v77;
      LODWORD(v277) = 0;
      int v98 = *(_DWORD *)(v59 + 4);
      unint64_t v273 = (void *)257;
      LODWORD(v274) = 0;
      unint64_t v99 = (llvm::ConstantInt *)llvm::IntegerType::get(***a6[1], (llvm::LLVMContext *)0x20);
      unint64_t v100 = llvm::ConstantInt::get(v99, 31 - __clz(v55), (const llvm::APInt *)1);
      uint64_t v101 = ((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*a6)[2])(a6, &v273, v100);
      LODWORD(v279[0]) = v98;
      LODWORD(v280) = 0;
      uint64_t v281 = v101;
      uint64_t v282 = v102;
      int v283 = 1;
      ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*a6)[4])(a6, 205, &v276, 1, v279, 2, 0);
      uint64_t v243 = *(void *)(v103 + 32);
      goto LABEL_182;
    }
    goto LABEL_181;
  }
  uint64_t v95 = *(void *)(*(void *)(v241 + 240) + 8 * *(unsigned int *)&v265[4 * v260]);
  uint64_t v276 = v278;
  uint64_t v277 = 0x400000000;
  unint64_t v273 = v275;
  uint64_t v274 = 0x400000000;
  uint64_t v243 = v59;
  char v96 = sub_1CBA5B01C(*(_DWORD *)(v59 + 4), a5, (uint64_t)a6, (uint64_t)&v273);
  if (v96)
  {
    uint64_t v252 = v95;
    for (uint64_t i = 0; i != 4; ++i)
    {
      if ((v55 >> i))
      {
        if (v277 >= (unint64_t)HIDWORD(v277)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v276 + v277) = *((_DWORD *)v273 + i);
        LODWORD(v277) = v277 + 1;
      }
    }
    *(void *)&long long v257 = sub_1CBA5A95C(v260, (unint64_t)v77);
    DWORD2(v257) = 0;
    uint64_t v139 = (int *)v276;
    int v140 = v277;
    v279[0] = &v280;
    v279[1] = (void *)0x800000000;
    if (v277 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v277)
    {
      uint64_t v141 = 0;
      uint64_t v142 = 4 * v277;
      do
      {
        int v143 = *v139++;
        uint64_t v144 = (_DWORD *)((char *)&v280 + v141);
        *uint64_t v144 = v143;
        v144[4] = 0;
        v141 += 24;
        v142 -= 4;
      }
      while (v142);
      int v145 = (int)v279[1];
    }
    else
    {
      int v145 = 0;
    }
    LODWORD(v279[1]) = v145 + v140;
    ((void (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, unint64_t *))(*a6)[4])(a6, 77, &v257, 1, &v280);
    uint64_t v150 = v149;
    if (v279[0] != &v280) {
      free(v279[0]);
    }
    uint64_t v243 = *(void *)(v150 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a7 + 32))(a7, v150);
    *(void *)(*(void *)(a5 + 24) + 16 * (*(_DWORD *)(*(void *)(v150 + 32) + 4) & 0x7FFFFFFF)) = v252 & 0xFFFFFFFFFFFFFFFBLL;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a7 + 40))(a7, v150);
  }
  if (v273 != v275) {
    free(v273);
  }
  if (v276 != v278) {
    free(v276);
  }
  if ((v96 & 1) == 0) {
    return 0;
  }
LABEL_182:
  int v104 = v264;
  uint64_t v239 = v58;
  uint64_t v240 = v57;
  if (!v264)
  {
    uint64_t v242 = 0;
    uint64_t v253 = 0;
    goto LABEL_296;
  }
  uint64_t v105 = v58;
  uint64_t v106 = v58 + 32 * v57;
  if (v254 <= 6)
  {
    uint64_t v107 = v105 + 32 * v57;
    unsigned int v110 = *(_DWORD *)(v107 + 4);
    uint64_t v109 = (_DWORD *)(v107 + 4);
    uint64_t v108 = v110;
    if ((v110 & 0x80000000) != 0) {
      int v111 = (uint64_t *)(*(void *)(a5 + 24) + 16 * (v108 & 0x7FFFFFFF) + 8);
    }
    else {
      int v111 = (uint64_t *)(*(void *)(a5 + 272) + 8 * v108);
    }
    uint64_t v112 = *v111;
    if (v112)
    {
      if (*(unsigned char *)(v112 + 3) & 1) != 0 || (uint64_t v112 = *(void *)(v112 + 24)) != 0 && (*(unsigned char *)(v112 + 3))
      {
        uint64_t v113 = *(void *)(v112 + 8);
        if (v113)
        {
          if (**(_WORD **)(v113 + 16) == 119)
          {
            if ((v108 & 0x80000000) != 0) {
              uint64_t v114 = (uint64_t *)(*(void *)(a5 + 24) + 16 * (v108 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v114 = (uint64_t *)(*(void *)(a5 + 272) + 8 * v108);
            }
            uint64_t v115 = *v114;
            if ((*(unsigned char *)(v115 + 3) & 1) == 0) {
              uint64_t v115 = *(void *)(v115 + 24);
            }
            uint64_t v106 = *(void *)(*(void *)(v115 + 8) + 32) + 32;
          }
        }
      }
    }
    uint64_t v116 = *(unsigned int *)(v106 + 4);
    if ((v116 & 0x80000000) != 0) {
      unint64_t v117 = (uint64_t *)(*(void *)(a5 + 24) + 16 * (v116 & 0x7FFFFFFF) + 8);
    }
    else {
      unint64_t v117 = (uint64_t *)(*(void *)(a5 + 272) + 8 * v116);
    }
    uint64_t v118 = *v117;
    if (v118)
    {
      if (*(unsigned char *)(v118 + 3) & 1) != 0 || (uint64_t v118 = *(void *)(v118 + 24)) != 0 && (*(unsigned char *)(v118 + 3))
      {
        uint64_t v119 = *(void *)(v118 + 8);
        if (v119)
        {
          if (**(_WORD **)(v119 + 16) == 128)
          {
            sub_1CC73C210(*(_DWORD *)(*(void *)(v119 + 32) + 68), a5, (uint64_t)v279);
            if ((_BYTE)v280)
            {
              if (LODWORD(v279[1]) >= 0x41)
              {
                if (v279[0]) {
                  MEMORY[0x1D25D9CB0](v279[0], 0x1000C8000313F17);
                }
              }
              else if ((uint64_t)v279[0] << -(uint64_t)LODWORD(v279[1]) >> -(uint64_t)LODWORD(v279[1]) == 8)
              {
                uint64_t v276 = (void *)129;
                LODWORD(v277) = 0;
                LODWORD(v279[0]) = *(_DWORD *)(*(void *)(v119 + 32) + 36);
                LODWORD(v280) = 0;
                sub_1CC738034(a6, 118, (unint64_t *)&v276, (int *)v279);
                if (v264 != 2)
                {
                  uint64_t v253 = *(void *)(v120 + 32);
                  goto LABEL_295;
                }
                int v121 = *(_DWORD *)(*(void *)(v120 + 32) + 4);
                unint64_t v273 = (void *)129;
                LODWORD(v274) = 0;
                uint64_t v122 = llvm::IntegerType::get(***a6[1], (llvm::LLVMContext *)0x10);
                uint64_t v124 = *(llvm::ConstantInt **)v122;
                unsigned int v125 = *(_DWORD *)(v122 + 8);
                LODWORD(v279[1]) = v125 >> 8;
                if (v125 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v125 <= 0xFF) {
                  LOWORD(v126) = 0;
                }
                else {
                  unint64_t v126 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v125) + 63);
                }
                v279[0] = (void *)((unsigned __int16)v126 & 0xFF00);
                int v127 = llvm::ConstantInt::get(v124, (llvm::LLVMContext *)v279, v123);
                if (LODWORD(v279[1]) >= 0x41 && v279[0]) {
                  MEMORY[0x1D25D9CB0](v279[0], 0x1000C8000313F17);
                }
                uint64_t v128 = ((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*a6)[2])(a6, &v273, v127);
                uint64_t v276 = (void *)129;
                LODWORD(v277) = 0;
                LODWORD(v279[0]) = v121;
                LODWORD(v280) = 0;
                uint64_t v281 = v128;
                uint64_t v282 = v129;
                int v283 = 1;
                ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*a6)[4])(a6, 65, &v276, 1, v279, 2, 0);
                goto LABEL_291;
              }
            }
          }
        }
      }
    }
    unint64_t v273 = (void *)129;
    LODWORD(v274) = 0;
    LODWORD(v279[0]) = *v109;
    LODWORD(v280) = 0;
    *(void *)&long long v257 = 129;
    DWORD2(v257) = 0;
    uint64_t v153 = llvm::IntegerType::get(***a6[1], (llvm::LLVMContext *)0x10);
    uint64_t v155 = *(llvm::ConstantInt **)v153;
    unsigned int v156 = *(_DWORD *)(v153 + 8);
    LODWORD(v277) = v156 >> 8;
    if (v156 >> 8 > 0x40) {
      operator new[]();
    }
    if (v156 <= 0xFF) {
      LOBYTE(v157) = 0;
    }
    else {
      unint64_t v157 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v156) + 63);
    }
    uint64_t v276 = (void *)(v157 & 8);
    uint64_t v158 = llvm::ConstantInt::get(v155, (llvm::LLVMContext *)&v276, v154);
    if (v277 >= 0x41 && v276) {
      MEMORY[0x1D25D9CB0](v276, 0x1000C8000313F17);
    }
    uint64_t v281 = ((uint64_t (*)(llvm::IntegerType *****, long long *, void *))(*a6)[2])(a6, &v257, v158);
    uint64_t v282 = v159;
    int v283 = 1;
    ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*a6)[4])(a6, 127, &v273, 1, v279, 2, 0);
LABEL_291:
    uint64_t v106 = *(void *)(v130 + 32);
    goto LABEL_292;
  }
  if (v264 != 2) {
    goto LABEL_293;
  }
  unint64_t v273 = (void *)129;
  LODWORD(v274) = 0;
  LODWORD(v279[0]) = *(_DWORD *)(v62 + 4);
  LODWORD(v280) = 0;
  *(void *)&long long v257 = 129;
  DWORD2(v257) = 0;
  uint64_t v131 = llvm::IntegerType::get(***a6[1], (llvm::LLVMContext *)0x10);
  unint64_t v133 = *(llvm::ConstantInt **)v131;
  unsigned int v134 = *(_DWORD *)(v131 + 8);
  LODWORD(v277) = v134 >> 8;
  if (v134 >> 8 > 0x40) {
    operator new[]();
  }
  if (v134 <= 0xFF) {
    LOBYTE(v135) = 0;
  }
  else {
    unint64_t v135 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v134) + 63);
  }
  uint64_t v276 = (void *)(v135 & 8);
  uint64_t v136 = llvm::ConstantInt::get(v133, (llvm::LLVMContext *)&v276, v132);
  if (v277 >= 0x41 && v276) {
    MEMORY[0x1D25D9CB0](v276, 0x1000C8000313F17);
  }
  uint64_t v281 = ((uint64_t (*)(llvm::IntegerType *****, long long *, void *))(*a6)[2])(a6, &v257, v136);
  uint64_t v282 = v137;
  int v283 = 1;
  ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*a6)[4])(a6, 127, &v273, 1, v279, 2, 0);
  uint64_t v62 = *(void *)(v138 + 32);
LABEL_292:
  int v104 = v264;
LABEL_293:
  uint64_t v253 = v106;
  if (v104 == 2)
  {
    uint64_t v276 = (void *)129;
    LODWORD(v277) = 0;
    LODWORD(v279[0]) = *(_DWORD *)(v106 + 4);
    LODWORD(v280) = 0;
    LODWORD(v281) = *(_DWORD *)(v62 + 4);
    int v283 = 0;
    ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*a6)[4])(a6, 66, &v276, 1, v279, 2, 0);
    uint64_t v242 = *(void *)(v160 + 32);
    goto LABEL_296;
  }
LABEL_295:
  uint64_t v242 = 0;
LABEL_296:
  uint64_t v161 = v62;
  uint64_t v162 = v266 == -1;
  int v163 = v261;
  uint64_t v164 = (llvm::MachineFunction *)a6[1];
  uint64_t v165 = (uint64_t)&a6[2][1][6 * v258];
  uint64_t v166 = a6[4];
  uint64_t v276 = v166;
  if (v166) {
    llvm::MetadataTracking::track((uint64_t)&v276, (unsigned __int8 *)v166, 2);
  }
  uint64_t v167 = v163 | (16 * (v55 & 0xF));
  uint64_t MachineInstr = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v164, v165, (unsigned __int8 **)&v276, 0);
  if (v276)
  {
    int v234 = *(unsigned __int8 *)v276;
    if ((v234 - 4) > 0x1E)
    {
      if ((v234 - 3) >= 0xFFFFFFFE) {
        unsigned int v237 = v276;
      }
      else {
        unsigned int v237 = 0;
      }
      if ((v234 - 3) < 0xFFFFFFFE)
      {
        if (v234 == 3) {
          *((void *)v276 + 1) = 0;
        }
        goto LABEL_299;
      }
      unint64_t v236 = (unint64_t)v237 + 8;
    }
    else
    {
      if ((*((unsigned char *)v276 + 1) & 0x7F) != 2 && !*((_DWORD *)v276 + 3)) {
        goto LABEL_299;
      }
      uint64_t v235 = *((void *)v276 + 2);
      if ((v235 & 4) == 0) {
        goto LABEL_299;
      }
      unint64_t v236 = v235 & 0xFFFFFFFFFFFFFFF8;
      if (!v236) {
        goto LABEL_299;
      }
    }
    v279[0] = &v276;
    sub_1CC5FA668(v236 + 16, v279);
  }
LABEL_299:
  uint64_t v168 = (uint64_t *)a6[6];
  uint64_t v169 = a6[5][5];
  *(void *)(MachineInstr + 24) = v169;
  uint64_t v170 = v169[4];
  uint64_t v171 = *(unsigned int *)(MachineInstr + 40);
  if (v171)
  {
    uint64_t v188 = *(void *)(MachineInstr + 32);
    uint64_t v189 = v170[5];
    uint64_t v190 = 32 * v171;
    do
    {
      if (!*(unsigned char *)v188)
      {
        uint64_t v191 = *(unsigned int *)(v188 + 4);
        if ((int)v191 >= 0) {
          uint64_t v192 = (uint64_t *)(*((void *)v189 + 34) + 8 * v191);
        }
        else {
          uint64_t v192 = (uint64_t *)(*((void *)v189 + 3) + 16 * (v191 & 0x7FFFFFFF) + 8);
        }
        uint64_t v193 = *v192;
        if (*v192)
        {
          uint64_t v194 = *(void *)(v193 + 16);
          *(void *)(v193 + 16) = v188;
          *(void *)(v188 + 16) = v194;
          if (*(unsigned char *)(v188 + 3))
          {
            *(void *)(v188 + 24) = v193;
          }
          else
          {
            *(void *)(v188 + 24) = 0;
            uint64_t v192 = (uint64_t *)(v194 + 24);
          }
        }
        else
        {
          *(void *)(v188 + 16) = v188;
          *(void *)(v188 + 24) = 0;
        }
        uint64_t *v192 = v188;
      }
      v188 += 32;
      v190 -= 32;
    }
    while (v190);
  }
  uint64_t v172 = v170[91];
  if (v172) {
    (*(void (**)(llvm::IntegerType *, uint64_t))(*(void *)v172 + 24))(v172, MachineInstr);
  }
  unint64_t v173 = *v168 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t MachineInstr = v173 | *(void *)MachineInstr & 7;
  *(void *)(MachineInstr + 8) = v168;
  *(void *)(v173 + 8) = MachineInstr;
  *uint64_t v168 = *v168 & 7 | MachineInstr;
  uint64_t v174 = a6[7];
  if (v174) {
    ((void (*)(llvm::IntegerType ****, uint64_t))(*v174)[3])(v174, MachineInstr);
  }
  unint64_t v175 = ((unint64_t)(v245 & 1) << 8) | v167 | (v162 << 10);
  *(void *)&long long v257 = v164;
  *((void *)&v257 + 1) = MachineInstr;
  if (a2)
  {
    if (!v260) {
      goto LABEL_365;
    }
    int v176 = *(_DWORD *)(v243 + 4);
    v279[1] = 0;
    unint64_t v280 = 0;
    HIDWORD(v279[0]) = v176;
    LODWORD(v279[0]) = 0;
    uint64_t v281 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v164, (const llvm::MachineOperand *)v279);
    if (v254 - 6 > 3) {
      goto LABEL_365;
    }
LABEL_364:
    LODWORD(v279[0]) = 1;
    v279[1] = 0;
    unint64_t v280 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v164, (const llvm::MachineOperand *)v279);
    goto LABEL_365;
  }
  unint64_t v177 = *((void *)&v262 + v260 - 1);
  uint64_t v276 = (void *)v177;
  if (v260 == 3)
  {
    char v178 = 3;
    if ((v177 & 1) == 0) {
      char v178 = 19;
    }
    unint64_t v179 = v177 & 0x8000000000000000 | (8 * (v177 >> v178)) | 1;
    char v180 = 35;
    char v181 = 19;
    if ((v177 & 4) == 0) {
      char v180 = 19;
    }
    unint64_t v182 = v177 >> v180;
    if ((v177 & 4) == 0) {
      char v181 = 3;
    }
    if (v177) {
      char v181 = 3;
    }
    unint64_t v183 = (8 * (unsigned __int16)(v177 >> v181)) & 0xFFFFF8000007FFFFLL | ((v182 & 0xFFFFFF) << 19);
    if ((v177 & 2) != 0) {
      unint64_t v184 = v183 | 2;
    }
    else {
      unint64_t v184 = v179;
    }
    uint64_t v276 = (void *)sub_1CBA5A95C(3, v184);
  }
  int v186 = sub_1CB8F1DC4((unint64_t *)&v276);
  if (v185 == 1) {
  if (v186 > 111)
  }
  {
    if (v186 <= 191)
    {
      if (v186 == 112)
      {
        uint64_t v187 = (__int16 ***)&off_1E66AB198;
      }
      else if (v186 == 128)
      {
        uint64_t v187 = (__int16 ***)&off_1E66AB1D0;
      }
      else
      {
        uint64_t v187 = (__int16 ***)&off_1E66AB208;
      }
    }
    else if (v186 > 287)
    {
      if (v186 == 288) {
        uint64_t v187 = (__int16 ***)&off_1E66AB2B0;
      }
      else {
        uint64_t v187 = (__int16 ***)&off_1E66AB2E8;
      }
    }
    else if (v186 == 192)
    {
      uint64_t v187 = (__int16 ***)&off_1E66AB240;
    }
    else
    {
      uint64_t v187 = (__int16 ***)&off_1E66AB278;
    }
  }
  else if (v186 <= 47)
  {
    uint64_t v187 = &off_1E66AB048;
    if (v186 != 1 && v186 != 16) {
      uint64_t v187 = &off_1E66AB080;
    }
  }
  else if (v186 > 79)
  {
    if (v186 == 80) {
      uint64_t v187 = (__int16 ***)&off_1E66AB160;
    }
    else {
      uint64_t v187 = (__int16 ***)&off_1E66AB0F0;
    }
  }
  else if (v186 == 48)
  {
    uint64_t v187 = (__int16 ***)&off_1E66AB128;
  }
  else
  {
    uint64_t v187 = (__int16 ***)&off_1E66AB358;
  }
  int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a5, "", 0);
  *(void *)(*(void *)(a5 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v187;
  uint64_t v196 = *(void *)(a5 + 8);
  if (v196) {
    (*(void (**)(uint64_t))(*(void *)v196 + 24))(v196);
  }
  v279[1] = 0;
  unint64_t v280 = 0;
  uint64_t v281 = 0;
  HIDWORD(v279[0]) = IncompleteVirtualRegister;
  LODWORD(v279[0]) = 0x1000000;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v164, (const llvm::MachineOperand *)v279);
  if (v254 >= 6) {
    goto LABEL_364;
  }
LABEL_365:
  LODWORD(v279[0]) = 1;
  v279[1] = 0;
  unint64_t v280 = v175;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v164, (const llvm::MachineOperand *)v279);
  if (!v264)
  {
    sub_1CC73C210(*(_DWORD *)(v161 + 4), a5, (uint64_t)v279);
    if ((_BYTE)v280)
    {
      uint64_t v200 = v239;
      uint64_t v199 = v240;
      if (LODWORD(v279[1]) > 0x40)
      {
        if (v279[0]) {
          MEMORY[0x1D25D9CB0](v279[0], 0x1000C8000313F17);
        }
        unint64_t v197 = 0;
        uint64_t v199 = v240;
      }
      else
      {
        unint64_t v197 = ((uint64_t)v279[0] << -(uint64_t)LODWORD(v279[1]) >> -(uint64_t)LODWORD(v279[1]));
      }
    }
    else
    {
      unint64_t v197 = 0;
      uint64_t v200 = v239;
      uint64_t v199 = v240;
    }
    sub_1CC73C210(*(_DWORD *)(v200 + 32 * v199 + 4), a5, (uint64_t)v279);
    if ((_BYTE)v280)
    {
      if (LODWORD(v279[1]) <= 0x40)
      {
        unint64_t v207 = ((uint64_t)v279[0] << -(uint64_t)LODWORD(v279[1]) >> -(uint64_t)LODWORD(v279[1]));
        goto LABEL_386;
      }
      if (v279[0]) {
        MEMORY[0x1D25D9CB0](v279[0], 0x1000C8000313F17);
      }
    }
    unint64_t v207 = 0;
LABEL_386:
    LODWORD(v279[0]) = 1;
    v279[1] = 0;
    unint64_t v280 = v197;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v164, (const llvm::MachineOperand *)v279);
    LODWORD(v279[0]) = 1;
    v279[1] = 0;
    unint64_t v280 = v207;
    goto LABEL_390;
  }
  if (v264 != 1)
  {
    uint64_t v201 = (void **)v242;
    if (!*(unsigned char *)v242)
    {
      int v202 = *(_DWORD *)(v242 + 4);
      v279[1] = 0;
      unint64_t v280 = 0;
      HIDWORD(v279[0]) = v202;
      LODWORD(v279[0]) = 0;
      uint64_t v281 = 0;
      uint64_t v201 = v279;
    }
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v164, (const llvm::MachineOperand *)v201);
    if (v254 - 6 <= 3)
    {
      LODWORD(v279[0]) = 1;
      v279[1] = 0;
      unint64_t v280 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v164, (const llvm::MachineOperand *)v279);
    }
    uint64_t v203 = 0;
    unint64_t v197 = 0;
    goto LABEL_392;
  }
  sub_1CC73C210(*(_DWORD *)(v161 + 4), a5, (uint64_t)v279);
  if ((_BYTE)v280)
  {
    uint64_t v198 = v253;
    if (LODWORD(v279[1]) <= 0x40)
    {
      unint64_t v197 = ((uint64_t)v279[0] << -(uint64_t)LODWORD(v279[1]) >> -(uint64_t)LODWORD(v279[1]));
      goto LABEL_378;
    }
    if (v279[0]) {
      MEMORY[0x1D25D9CB0](v279[0], 0x1000C8000313F17);
    }
  }
  unint64_t v197 = 0;
  uint64_t v198 = v253;
LABEL_378:
  LODWORD(v279[0]) = 1;
  v279[1] = 0;
  unint64_t v280 = v197;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v164, (const llvm::MachineOperand *)v279);
  if (*(unsigned char *)v198)
  {
    uint64_t v204 = (llvm::MachineInstr *)MachineInstr;
    uint64_t v205 = v164;
    int v206 = (void **)v198;
  }
  else
  {
    int v208 = *(_DWORD *)(v198 + 4);
    v279[1] = 0;
    unint64_t v280 = 0;
    HIDWORD(v279[0]) = v208;
    LODWORD(v279[0]) = 0;
    uint64_t v281 = 0;
    int v206 = v279;
    uint64_t v204 = (llvm::MachineInstr *)MachineInstr;
    uint64_t v205 = v164;
  }
  llvm::MachineInstr::addOperand(v204, v205, (const llvm::MachineOperand *)v206);
  if (v254 - 6 > 3) {
    goto LABEL_391;
  }
  LODWORD(v279[0]) = 1;
  v279[1] = 0;
  unint64_t v280 = 0;
LABEL_390:
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v164, (const llvm::MachineOperand *)v279);
LABEL_391:
  uint64_t v203 = 0x100000000;
LABEL_392:
  if (v270 != -1)
  {
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v164, v244);
    if (v254 - 6 <= 3)
    {
      LODWORD(v279[0]) = 1;
      v279[1] = 0;
      unint64_t v280 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v164, (const llvm::MachineOperand *)v279);
    }
  }
  LODWORD(v279[0]) = 1;
  v279[1] = 0;
  unint64_t v280 = v250;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v164, (const llvm::MachineOperand *)v279);
  LODWORD(v279[0]) = 1;
  v279[1] = 0;
  unint64_t v280 = v248;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v164, (const llvm::MachineOperand *)v279);
  if (a2) {
    __int16 v209 = 2;
  }
  else {
    __int16 v209 = 1;
  }
  v279[0] = (void *)sub_1CBA9F684(v203 | v197, v55, v261, v209, v249);
  llvm::MachineInstr::setMemRefs(MachineInstr, (uint64_t *)v164, v279, 1);
  sub_1CBA318C8((uint64_t)&v257);
  if ((a2 & 1) == 0)
  {
    unint64_t v210 = *((void *)&v262 + v260 - 1);
    if (v260 == 3)
    {
      char v211 = 3;
      if ((v210 & 1) == 0) {
        char v211 = 19;
      }
      unint64_t v212 = v210 & 0x8000000000000000 | (8 * (v210 >> v211)) | 1;
      char v213 = 35;
      char v214 = 19;
      if ((v210 & 4) == 0) {
        char v213 = 19;
      }
      unint64_t v215 = v210 >> v213;
      if ((v210 & 4) == 0) {
        char v214 = 3;
      }
      if (v210) {
        char v214 = 3;
      }
      unint64_t v216 = (8 * (unsigned __int16)(v210 >> v214)) & 0xFFFFF8000007FFFFLL | ((v215 & 0xFFFFFF) << 19);
      if ((v210 & 2) != 0) {
        uint64_t v217 = (void *)(v216 | 2);
      }
      else {
        uint64_t v217 = (void *)v212;
      }
      uint64_t v276 = (void *)sub_1CBA5A95C(3, (unint64_t)v217);
      LODWORD(v277) = 0;
      *(_OWORD *)uint64_t v279 = v257;
      LODWORD(v280) = 1;
      uint64_t v218 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*a6)[4])(a6, 19, &v276, 1, v279, 1, 0);
      uint64_t v219 = 0;
      uint64_t v276 = v217;
      uint64_t v277 = (uint64_t)v217;
      v278[0] = v217;
      unint64_t v273 = v218;
      uint64_t v274 = v220;
      v275[0] = 1;
      v279[0] = &v280;
      v279[1] = (void *)0x800000000;
      uint64_t v221 = 2;
      do
      {
        uint64_t v222 = &v279[v221];
        *uint64_t v222 = *(void **)((char *)&v276 + v219);
        *((_DWORD *)v222 + 2) = 0;
        v221 += 2;
        v219 += 8;
      }
      while (v219 != 24);
      LODWORD(v279[1]) += 3;
      ((void (*)(llvm::IntegerType *****, uint64_t, void *))(*a6)[4])(a6, 74, v279[0]);
      uint64_t v224 = v223;
      if (v279[0] != &v280) {
        free(v279[0]);
      }
      v279[0] = v217;
      LODWORD(v279[1]) = 0;
      ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void, void, void))(*a6)[4])(a6, 68, v279, 1, 0, 0, 0);
      uint64_t v225 = 0;
      uint64_t v276 = (void *)v210;
      LODWORD(v277) = 0;
      uint64_t v226 = *(_DWORD **)(v224 + 32);
      int v227 = v226[9];
      LODWORD(v273) = v226[1];
      HIDWORD(v273) = v227;
      LODWORD(v274) = v226[17];
      HIDWORD(v274) = *(_DWORD *)(*(void *)(v228 + 32) + 4);
      v279[0] = &v280;
      v279[1] = (void *)0x800000000;
      uint64_t v229 = 2;
      do
      {
        uint64_t v230 = &v279[v229];
        *(_DWORD *)uint64_t v230 = *(_DWORD *)((char *)&v273 + v225);
        *((_DWORD *)v230 + 4) = 0;
        v229 += 3;
        v225 += 4;
      }
      while (v225 != 16);
      LODWORD(v279[1]) += 4;
      ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, unint64_t *))(*a6)[4])(a6, 77, &v276, 1, &v280);
      uint64_t MachineInstr = v231;
      if (v279[0] != &v280) {
        free(v279[0]);
      }
    }
    else
    {
      uint64_t v276 = (void *)*((void *)&v262 + v260 - 1);
      LODWORD(v277) = 0;
      LODWORD(v279[0]) = *(_DWORD *)(*(void *)(MachineInstr + 32) + 4);
      LODWORD(v280) = 0;
      ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*a6)[4])(a6, 19, &v276, 1, v279, 1, 0);
      return v232;
    }
  }
  return MachineInstr;
}

void sub_1CBA315DC(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x80000000) == 0
    || (a2 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(a3 + 432)
    || ((*(void *)(*(void *)(a3 + 424) + 8 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) != 0
      ? (BOOL v4 = (*(void *)(*(void *)(a3 + 424) + 8 * (a2 & 0x7FFFFFFF)) & 6) == 2)
      : (BOOL v4 = 0),
        !v4))
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    return;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  v19[0] = a2;
  unsigned int v18 = 4;
  unsigned int v7 = 1;
  do
  {
    int v8 = v19[--v7];
    unsigned int v17 = v7;
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    uint64_t v9 = *(void *)(*(void *)(a3 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
    if (!v9) {
      goto LABEL_10;
    }
    if ((*(unsigned char *)(v9 + 3) & 1) == 0)
    {
      uint64_t v9 = *(void *)(v9 + 24);
      if (!v9 || (*(unsigned char *)(v9 + 3) & 1) == 0) {
        goto LABEL_10;
      }
    }
    uint64_t v10 = *(void *)(v9 + 8);
    if (!v10) {
      goto LABEL_10;
    }
    unsigned int v11 = **(unsigned __int16 **)(v10 + 16);
    if (v11 > 0x76)
    {
      if (**(unsigned __int16 **)(v10 + 16) > 0x7Du)
      {
        if (v11 == 126)
        {
LABEL_36:
          int v15 = *(_DWORD *)(*(void *)(v10 + 32) + 36);
          if (v7 >= v18) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v19[v7] = v15;
          goto LABEL_38;
        }
        if (v11 == 193) {
          goto LABEL_33;
        }
      }
      else
      {
        if (v11 == 119) {
          goto LABEL_36;
        }
        if (v11 == 120)
        {
          uint64_t v12 = *(void *)(*(void *)(v10 + 32) + 48);
          unsigned int v13 = *(_DWORD *)(v12 + 32);
          if (v13 > 0x40) {
            uint64_t v14 = **(void **)(v12 + 24);
          }
          else {
            uint64_t v14 = (uint64_t)(*(void *)(v12 + 24) << -(char)v13) >> -(char)v13;
          }
          v5 += v14;
          continue;
        }
      }
      goto LABEL_10;
    }
    if (**(unsigned __int16 **)(v10 + 16) > 0x4Fu)
    {
      if (v11 - 80 < 2) {
        goto LABEL_36;
      }
LABEL_10:
      if (a4) {
        goto LABEL_49;
      }
      continue;
    }
    if (v11 == 19) {
      goto LABEL_36;
    }
    if (v11 == 45)
    {
LABEL_33:
      if (v7 >= v18) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v19[v7] = *(_DWORD *)(*(void *)(v10 + 32) + 68);
      unsigned int v17 = v7 + 1;
      if (v7 + 1 >= v18) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v19[v7 + 1] = *(_DWORD *)(*(void *)(v10 + 32) + 36);
LABEL_38:
      unsigned int v7 = v17 + 1;
      continue;
    }
    if (v11 != 71) {
      goto LABEL_10;
    }
    if (v6) {
      goto LABEL_49;
    }
    uint64_t v6 = *(void *)(*(void *)(v10 + 32) + 48);
    if ((a4 & 1) == 0) {
      goto LABEL_48;
    }
  }
  while (v7);
  if (v6)
  {
LABEL_48:
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v5;
    char v16 = 1;
    goto LABEL_50;
  }
LABEL_49:
  char v16 = 0;
  *(unsigned char *)a1 = 0;
LABEL_50:
  *(unsigned char *)(a1 + 16) = v16;
}

uint64_t sub_1CBA318C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 8) + 24) + 32);
  uint64_t v3 = (*(uint64_t (**)(void, void))(**(void **)(v2 + 8) + 16))(*(void *)(v2 + 8), *(void *)v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 104))(v3);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 176))(v3);
  (*(void (**)(uint64_t))(*(void *)v3 + 184))(v3);
  uint64_t v6 = *(void **)(a1 + 8);

  return sub_1CC73B5D0(v6, v4, v5);
}

uint64_t sub_1CBA319C4(unsigned int a1, uint64_t a2, llvm::IntegerType *****a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if ((a1 & 0x80000000) != 0 && (a1 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a2 + 432)) {
    unint64_t v5 = *(void *)(*(void *)(a2 + 424) + 8 * (a1 & 0x7FFFFFFF));
  }
  else {
    unint64_t v5 = 0;
  }
  unint64_t v26 = v5;
  unint64_t v6 = sub_1CBA2EB1C(a1, a2, 256);
  if (HIDWORD(v6))
  {
    uint64_t v27 = 129;
    LODWORD(v28) = 0;
    unint64_t v22 = v6;
    int32x2_t v23 = (llvm::ConstantInt *)llvm::IntegerType::get(***a3[1], (llvm::LLVMContext *)0x10);
    unsigned int v24 = llvm::ConstantInt::get(v23, v22, (const llvm::APInt *)1);
    ((void (*)(llvm::IntegerType *****, uint64_t *, void *))(*a3)[2])(a3, &v27, v24);
  }
  else
  {
    unsigned int v8 = sub_1CB8F1DC4(&v26);
    if (v7 == 1) {
    uint64_t v33 = (8 * v8) | 1;
    }
    int v34 = 0;
    LODWORD(v27) = a1;
    int v29 = 0;
    uint64_t v9 = sub_1CC7382B0((uint64_t)a3);
    uint64_t v33 = 129;
    int v34 = 0;
    uint64_t v27 = v9;
    uint64_t v28 = v10;
    int v29 = 1;
    uint64_t v11 = sub_1CC738034(a3, 118, (unint64_t *)&v33, (int *)&v27);
    uint64_t v13 = v12;
    uint64_t v14 = ((uint64_t (*)(llvm::IntegerType ***))(*a3[1][43])[42])(a3[1][43]);
    unsigned int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 24))(v14, 16);
    uint64_t v27 = 129;
    LODWORD(v28) = 0;
    unint64_t v16 = 31 - __clz(v15);
    unsigned int v17 = (llvm::ConstantInt *)llvm::IntegerType::get(***a3[1], (llvm::LLVMContext *)0x10);
    unsigned int v18 = llvm::ConstantInt::get(v17, v16, (const llvm::APInt *)1);
    uint64_t v19 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*a3)[2])(a3, &v27, v18);
    uint64_t v33 = 129;
    int v34 = 0;
    uint64_t v27 = v11;
    uint64_t v28 = v13;
    int v29 = 1;
    uint64_t v30 = v19;
    uint64_t v31 = v20;
    int v32 = 1;
    ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a3)[4])(a3, 128, &v33, 1, &v27, 2, 0);
  }
  return *(unsigned int *)(*(void *)(v21 + 32) + 4);
}

void sub_1CBA31C84(uint64_t a1, int a2, double a3)
{
  if (a2 == 64)
  {
    int v16 = 64;
    unint64_t v15 = *(void *)&a3;
    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v11, (const llvm::APInt **)&v15);
    goto LABEL_5;
  }
  if (a2 == 32)
  {
    *(float *)&unsigned int v4 = a3;
    int v16 = 32;
    unint64_t v15 = v4;
    llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v11, (const llvm::APInt **)&v15);
LABEL_5:
    uint64_t v5 = v12;
    *(void *)(a1 + 8) = v11;
    *(void *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 24) = v13;
    *(unsigned char *)(a1 + 28) = *(unsigned char *)(a1 + 28) & 0xF0 | v14 & 0xF;
    return;
  }
  int v16 = 64;
  unint64_t v15 = *(void *)&a3;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v11, (const llvm::APInt **)&v15);
  uint64_t v6 = v12;
  *(void *)(a1 + 8) = v11;
  *(void *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = v13;
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a1 + 28) & 0xF0 | v14 & 0xF;
  unint64_t v11 = 129;
  uint64_t v7 = sub_1CB8F1DC4(&v11);
  if (v8 == 1)
  {
    uint64_t v10 = v7;
    uint64_t v7 = v10;
  }
  if (v7 == 64)
  {
    uint64_t v9 = &unk_1CFB2E31C;
  }
  else if (v7 == 32)
  {
    uint64_t v9 = &unk_1CFB2E308;
  }
  else
  {
    uint64_t v9 = &unk_1CFB2E2E0;
  }
  llvm::APFloat::convert(a1, v9, 1, &v11);
}

uint64_t sub_1CBA31DC8(void *a1, uint64_t a2, void *a3)
{
  uint64_t v358 = *MEMORY[0x1E4F143B8];
  a3[5] = a1[3];
  a3[6] = a1;
  uint64_t v6 = (unsigned __int8 **)(a1 + 7);
  uint64_t v7 = (unsigned __int8 **)(a3 + 4);
  if (a1 + 7 == a3 + 4) {
    goto LABEL_5;
  }
  unsigned int v8 = *v7;
  if (*v7)
  {
    int v100 = *v8;
    if ((v100 - 4) > 0x1E)
    {
      if ((v100 - 3) >= 0xFFFFFFFE) {
        uint64_t v150 = *v7;
      }
      else {
        uint64_t v150 = 0;
      }
      if ((v100 - 3) < 0xFFFFFFFE)
      {
        if (v100 == 3) {
          *((void *)v8 + 1) = 0;
        }
        goto LABEL_3;
      }
      unint64_t v102 = (unint64_t)(v150 + 8);
    }
    else
    {
      if ((v8[1] & 0x7F) != 2 && !*((_DWORD *)v8 + 3)) {
        goto LABEL_3;
      }
      uint64_t v101 = *((void *)v8 + 2);
      if ((v101 & 4) == 0) {
        goto LABEL_3;
      }
      unint64_t v102 = v101 & 0xFFFFFFFFFFFFFFF8;
      if (!v102) {
        goto LABEL_3;
      }
    }
    v349 = a3 + 4;
    sub_1CC5FA668(v102 + 16, &v349);
  }
LABEL_3:
  uint64_t v9 = *v6;
  const char *v7 = *v6;
  if (v9) {
    llvm::MetadataTracking::track((uint64_t)v7, v9, 2);
  }
LABEL_5:
  uint64_t v10 = a1 + 6;
  unint64_t v11 = a1[6];
  if (v11 < 8)
  {
    char v14 = 0;
    goto LABEL_25;
  }
  if ((v11 & 7) == 0)
  {
    v11 &= 0xFFFFFFFFFFFFFFF8;
    *uint64_t v10 = v11;
    unint64_t v15 = v6;
    char v14 = (int *)(a1 + 6);
    goto LABEL_17;
  }
  uint64_t v12 = (int *)(v11 & 0xFFFFFFFFFFFFFFF8);
  if ((a1[6] & 7) == 3 && v12 != 0)
  {
    uint64_t v17 = *v12;
    char v14 = v12 + 2;
    uint64_t v16 = v17;
    if (!v17) {
      goto LABEL_21;
    }
    unint64_t v15 = (unsigned __int8 **)&v14[2 * v16];
LABEL_17:
    while ((*(_WORD *)(*(void *)v14 + 36) & 0xF00) == 0)
    {
      v14 += 2;
      if (v14 == (int *)v15)
      {
        char v14 = (int *)v15;
        break;
      }
    }
    if (v11 >= 8) {
      goto LABEL_21;
    }
LABEL_25:
    uint64_t v10 = 0;
    uint64_t v19 = 0;
    goto LABEL_26;
  }
  char v14 = 0;
LABEL_21:
  if ((v11 & 7) != 0)
  {
    uint64_t v10 = 0;
    if ((v11 & 7) == 3 && (unsigned int v18 = (int *)(v11 & 0xFFFFFFFFFFFFFFF8), (v11 & 0xFFFFFFFFFFFFFFF8) != 0))
    {
      uint64_t v19 = *v18;
      uint64_t v10 = (unint64_t *)(v18 + 2);
    }
    else
    {
      uint64_t v19 = 0;
    }
  }
  else
  {
    *uint64_t v10 = v11 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = 1;
  }
LABEL_26:
  if (v14 == (int *)&v10[v19] || !*(void *)v14)
  {
    sub_1CBA1531C((uint64_t)&v330, (uint64_t)a1, a2);
    unsigned int v22 = v334;
    long long v326 = (llvm::IntegerType *****)a3;
    if (v334 < 0 && (v334 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a2 + 432)) {
      unint64_t v23 = *(void *)(*(void *)(a2 + 424) + 8 * (v334 & 0x7FFFFFFF));
    }
    else {
      unint64_t v23 = 0;
    }
    uint64_t v24 = *(void *)(a1[3] + 32);
    unint64_t v25 = v335;
    if ((v335 & 0xFFFFFFFFFFFFFFF9) != 0 && (v335 & 4) != 0)
    {
      uint64_t v26 = 0x800000000000000;
      if ((v335 & 2) == 0) {
        uint64_t v26 = 0x8000000000000;
      }
      unint64_t v27 = v335 >> 3;
      unsigned int v28 = (unsigned __int16)(v335 >> 3);
      if ((v26 & v335) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v21);
        if ((v27 & 1) == 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v21);
          if (v28 >= 5)
          {
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v21);
LABEL_46:
            if (v25)
            {
              int v29 = v27;
            }
            else if ((v25 & 2) != 0)
            {
              int v29 = (unsigned __int16)(v25 >> 19);
            }
            else
            {
              int v29 = v25 >> 19;
            }
            int v140 = v337;
            if (v337)
            {
              unint64_t v325 = (v25 >> 1) & 0x3FFF8 | ((unint64_t)(v29 & 0x7FFFFFFF) << 20) | 4;
              unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
              unint64_t v142 = IncompleteVirtualRegister & 0x7FFFFFFF;
              *(void *)(*(void *)(a2 + 24) + 16 * v142) = 4;
              unint64_t v143 = *(unsigned int *)(a2 + 432);
              if (v142 >= v143)
              {
                uint64_t v144 = *(void *)(a2 + 440);
                uint64_t v145 = v142 + 1 - v143;
                if (v142 >= *(unsigned int *)(a2 + 436)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                int v146 = *(_DWORD *)(a2 + 432);
                if (v145)
                {
                  uint64_t v147 = (void *)(*(void *)(a2 + 424) + 8 * *(unsigned int *)(a2 + 432));
                  uint64_t v148 = ~v142 + v143;
                  do
                  {
                    *v147++ = v144;
                    BOOL v56 = __CFADD__(v148++, 1);
                  }
                  while (!v56);
                  int v146 = *(_DWORD *)(a2 + 432);
                }
                *(_DWORD *)(a2 + 432) = v146 + v145;
              }
              *(void *)(*(void *)(a2 + 424) + 8 * v142) = v325;
              uint64_t v149 = *(void *)(a2 + 8);
              if (v149) {
                (*(void (**)(uint64_t, void))(*(void *)v149 + 24))(v149, IncompleteVirtualRegister);
              }
              uint64_t v63 = 1;
              LODWORD(v345) = IncompleteVirtualRegister;
              LODWORD(v346) = 1;
              LODWORD(v349) = v334;
              LODWORD(v351) = 0;
              sub_1CC737934(v326, 0x5Au, (int *)&v345, (int *)&v349, v140);
              LODWORD(v345) = v332;
              LODWORD(v346) = 1;
              LODWORD(v349) = IncompleteVirtualRegister;
              LODWORD(v351) = 0;
              sub_1CC7382B0((uint64_t)v326);
              llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
              return v63;
            }
            return 0;
          }
        }
      }
      else if (v28 >= 5 && ((v335 >> 3) & 1) == 0)
      {
        goto LABEL_46;
      }
    }
    char v30 = 35;
    if ((v23 & 4) == 0) {
      char v30 = 19;
    }
    unint64_t v31 = v23 >> v30;
    if ((v31 & 0xFFFFFF) != 3)
    {
      uint64_t v32 = (uint64_t)v326;
      if ((v31 & 0xFFFFFF) == 0x40)
      {
        sub_1CBA315DC((uint64_t)&v327, v22, a2, 1);
        int v34 = v329;
        if (!v329) {
          return (v34 != 0) & v33;
        }
        if (v6 == v7)
        {
LABEL_58:
          int v37 = v332;
          unint64_t v38 = v335;
          unint64_t v340 = v335;
          unint64_t v341 = 129;
          if ((*((void *)v337 + 3) & 0xFFFFFFFFFFFFFFF9) != 0)
          {
            unint64_t v40 = (unint64_t)(sub_1CB8F1DC4((unint64_t *)v337 + 3) + 7) >> 3;
            if (v39 == 1) {
          }
            }
          else
          {
            unint64_t v40 = -1;
          }
          unint64_t v41 = v330;
          uint64_t v42 = v328;
          unsigned int v43 = sub_1CD1117B0(v327, v328, *(void *)(*(void *)(*((void *)v330 + 3) + 32) + 344), 0);
          unsigned int v45 = v43;
          unint64_t v342 = (unint64_t)v326;
          BOOL v343 = (llvm::MachineInstr *)a2;
          BOOL v344 = &v341;
          if ((v38 & 0xFFFFFFFFFFFFFFF9) != 0 && (v38 & 6) == 2)
          {
            int v309 = v34;
            char v46 = 35;
            if ((v38 & 4) == 0) {
              char v46 = 19;
            }
            unint64_t v304 = v41;
            unint64_t v318 = v43;
            if (((v38 >> v46) & 0xFFFFFF) == 3)
            {
              unint64_t v47 = v341;
              unsigned int v48 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
              unint64_t v49 = v48 & 0x7FFFFFFF;
              *(void *)(*(void *)(a2 + 24) + 16 * v49) = 4;
              unint64_t v50 = *(unsigned int *)(a2 + 432);
              if (v49 >= v50)
              {
                uint64_t v51 = *(void *)(a2 + 440);
                uint64_t v52 = v49 + 1 - v50;
                if (v49 >= *(unsigned int *)(a2 + 436)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                int v53 = *(_DWORD *)(a2 + 432);
                if (v52)
                {
                  int v54 = (void *)(*(void *)(a2 + 424) + 8 * *(unsigned int *)(a2 + 432));
                  uint64_t v55 = ~v49 + v50;
                  do
                  {
                    *v54++ = v51;
                    BOOL v56 = __CFADD__(v55++, 1);
                  }
                  while (!v56);
                  int v53 = *(_DWORD *)(a2 + 432);
                }
                *(_DWORD *)(a2 + 432) = v53 + v52;
              }
              *(void *)(*(void *)(a2 + 424) + 8 * v49) = v47;
              uint64_t v57 = *(void *)(a2 + 8);
              if (v57) {
                (*(void (**)(uint64_t, void))(*(void *)v57 + 24))(v57, v48);
              }
              sub_1CBA5CD34(&v342, v48, v318, v341);
              unsigned int v59 = sub_1CB8F1DC4(&v340);
              int v34 = v309;
              if (v58 == 1) {
              unsigned int v345 = (void *)((8 * v59) | 1);
              }
              LODWORD(v346) = 0;
              LODWORD(v349) = v48;
              LODWORD(v351) = 0;
              uint64_t v60 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v326)[4])(v326, 126, &v345, 1, &v349, 1, 0);
              LODWORD(v345) = v37;
              LODWORD(v346) = 1;
              v349 = v60;
              uint64_t v350 = v61;
              LODWORD(v351) = 1;
              ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v326)[4])(v326, 81, &v345, 1, &v349, 1, 0);
            }
            else
            {
              unsigned int v315 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
              unint64_t v120 = v315 & 0x7FFFFFFF;
              *(void *)(*(void *)(a2 + 24) + 16 * v120) = 4;
              int v121 = (void *)(a2 + 424);
              unint64_t v122 = *(unsigned int *)(a2 + 432);
              if (v120 >= v122)
              {
                uint64_t v123 = *(void *)(a2 + 440);
                uint64_t v124 = v120 + 1 - v122;
                if (v120 >= *(unsigned int *)(a2 + 436)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                int v125 = *(_DWORD *)(a2 + 432);
                if (v124)
                {
                  unint64_t v126 = (void *)(*v121 + 8 * *(unsigned int *)(a2 + 432));
                  uint64_t v127 = ~v120 + v122;
                  do
                  {
                    *v126++ = v123;
                    BOOL v56 = __CFADD__(v127++, 1);
                  }
                  while (!v56);
                  int v125 = *(_DWORD *)(a2 + 432);
                }
                *(_DWORD *)(a2 + 432) = v125 + v124;
              }
              *(void *)(*(void *)(a2 + 424) + 8 * v120) = 257;
              uint64_t v128 = *(void *)(a2 + 8);
              if (v128) {
                (*(void (**)(uint64_t, void))(*(void *)v128 + 24))(v128, v315);
              }
              unsigned int v129 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
              unint64_t v130 = v129 & 0x7FFFFFFF;
              *(void *)(*(void *)(a2 + 24) + 16 * v130) = 4;
              unint64_t v131 = *(unsigned int *)(a2 + 432);
              if (v130 >= v131)
              {
                uint64_t v132 = *(void *)(a2 + 440);
                uint64_t v133 = v130 + 1 - v131;
                if (v130 >= *(unsigned int *)(a2 + 436)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                int v134 = *(_DWORD *)(a2 + 432);
                if (v133)
                {
                  unint64_t v135 = (void *)(*v121 + 8 * *(unsigned int *)(a2 + 432));
                  uint64_t v136 = ~v130 + v131;
                  do
                  {
                    *v135++ = v132;
                    BOOL v56 = __CFADD__(v136++, 1);
                  }
                  while (!v56);
                  int v134 = *(_DWORD *)(a2 + 432);
                }
                *(_DWORD *)(a2 + 432) = v134 + v133;
              }
              *(void *)(*(void *)(a2 + 424) + 8 * v130) = 257;
              uint64_t v137 = *(void *)(a2 + 8);
              if (v137) {
                (*(void (**)(uint64_t, void))(*(void *)v137 + 24))(v137, v129);
              }
              sub_1CBA5CD34(&v342, v315, v318, 0x101uLL);
              sub_1CBA5CD34(&v342, v129, v45 + 4, 0x101uLL);
              unsigned int v345 = (void *)513;
              LODWORD(v346) = 0;
              LODWORD(v349) = v315;
              LODWORD(v351) = 0;
              LODWORD(v352) = v129;
              LODWORD(v354) = 0;
              uint64_t v138 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v326)[4])(v326, 76, &v345, 1, &v349, 2, 0);
              LODWORD(v345) = v37;
              LODWORD(v346) = 1;
              v349 = v138;
              uint64_t v350 = v139;
              LODWORD(v351) = 1;
              sub_1CC7382B0((uint64_t)v326);
              int v34 = v309;
            }
            unint64_t v41 = v304;
          }
          else if (v38 == 65 || v40 == 1)
          {
            uint64_t v306 = v41;
            int v311 = v34;
            unint64_t v314 = v341;
            unsigned int v320 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
            unint64_t v103 = v320 & 0x7FFFFFFF;
            *(void *)(*(void *)(a2 + 24) + 16 * v103) = 4;
            unint64_t v104 = *(unsigned int *)(a2 + 432);
            if (v103 >= v104)
            {
              uint64_t v105 = *(void *)(a2 + 440);
              uint64_t v106 = v103 + 1 - v104;
              if (v103 >= *(unsigned int *)(a2 + 436)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v107 = *(_DWORD *)(a2 + 432);
              if (v106)
              {
                uint64_t v108 = (void *)(*(void *)(a2 + 424) + 8 * *(unsigned int *)(a2 + 432));
                uint64_t v109 = ~v103 + v104;
                do
                {
                  *v108++ = v105;
                  BOOL v56 = __CFADD__(v109++, 1);
                }
                while (!v56);
                int v107 = *(_DWORD *)(a2 + 432);
              }
              *(_DWORD *)(a2 + 432) = v107 + v106;
            }
            *(void *)(*(void *)(a2 + 424) + 8 * v103) = v314;
            uint64_t v110 = *(void *)(a2 + 8);
            if (v110) {
              (*(void (**)(uint64_t, void))(*(void *)v110 + 24))(v110, v320);
            }
            sub_1CBA5CD34(&v342, v320, v45 & 0xFFFFFFFE, v341);
            unsigned int v345 = (void *)4194324;
            LODWORD(v346) = 0;
            LODWORD(v349) = v320;
            LODWORD(v351) = 0;
            int v111 = (void *)sub_1CC7382B0((uint64_t)v326);
            uint64_t v113 = v112;
            uint64_t v114 = v42 & 1;
            if (v42 < 0) {
              uint64_t v114 = -v114;
            }
            v349 = (void *)257;
            LODWORD(v350) = 0;
            unint64_t v115 = v114;
            uint64_t v116 = (llvm::ConstantInt *)llvm::IntegerType::get(***v326[1], (llvm::LLVMContext *)0x20);
            unint64_t v117 = llvm::ConstantInt::get(v116, v115, (const llvm::APInt *)1);
            uint64_t v118 = ((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*v326)[2])(v326, &v349, v117);
            unint64_t v41 = v306;
            if (v38 == 65)
            {
              LODWORD(v345) = v37;
              LODWORD(v346) = 1;
              v349 = v111;
              uint64_t v350 = v113;
              LODWORD(v351) = 1;
              uint64_t v352 = v118;
              unint64_t v353 = v119;
              LODWORD(v354) = 1;
              ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v326)[4])(v326, 205, &v345, 1, &v349, 2, 0);
            }
            else
            {
              unsigned int v345 = (void *)65;
              LODWORD(v346) = 0;
              v349 = v111;
              uint64_t v350 = v113;
              LODWORD(v351) = 1;
              uint64_t v352 = v118;
              unint64_t v353 = v119;
              LODWORD(v354) = 1;
              ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v326)[4])(v326, 205, &v345, 1, &v349, 2, 0);
              LODWORD(v345) = v37;
              LODWORD(v346) = 1;
              LODWORD(v349) = *(_DWORD *)(*(void *)(v151 + 32) + 4);
              LODWORD(v351) = 0;
              ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v326)[4])(v326, 118, &v345, 1, &v349, 1, 0);
            }
            int v34 = v311;
          }
          else
          {
            if (v336 != 129 && v336 != 257)
            {
              char v33 = 0;
              if ((v336 & 0xFFFFFFFFFFFFFFF9) == 0 || (v336 & 4) == 0) {
                return (v34 != 0) & v33;
              }
              char v159 = 3;
              if ((v336 & 1) == 0) {
                char v159 = 19;
              }
              unint64_t v160 = v336 >> v159;
              unint64_t v161 = (v336 & 2) != 0
                   ? (v336 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v160) | 2
                   : v336 & 0x8000000000000000 | (8 * v160) | 1;
              if (v161 != 257 && v161 != 129) {
                goto LABEL_294;
              }
            }
            if (v336)
            {
              sub_1CBA5CD34(&v342, v333, v43, v336);
            }
            else
            {
              int v310 = v34;
              uint64_t v305 = v41;
              if ((v336 & 2) != 0)
              {
                unint64_t v73 = v336 & 4;
                char v296 = 35;
                char v297 = 19;
                if ((v336 & 4) == 0) {
                  char v296 = 19;
                }
                unint64_t v298 = v336 >> v296;
                if ((v336 & 4) == 0) {
                  char v297 = 3;
                }
                unint64_t v75 = (8 * (unsigned __int16)(v336 >> v297)) & 0xFFFFF8000007FFFFLL | ((v298 & 0xFFFFFF) << 19) | 2;
                unint64_t v72 = v336 & 0x8000000000000000 | (v336 >> 16) & 0x7FFFFFFF8 | 1;
                uint64_t v74 = 0x800000000000000;
              }
              else
              {
                unint64_t v72 = v336 & 0x8000000000000000 | (v336 >> 16) & 0x7FFFFFFF8 | 1;
                unint64_t v73 = v336 & 4;
                uint64_t v74 = 0x8000000000000;
                unint64_t v75 = v72;
              }
              int v76 = 0;
              unint64_t v339 = v75;
              unsigned int v345 = &v347;
              uint64_t v346 = 0x400000000;
              unint64_t v323 = v74 & v336;
              int v319 = (unsigned __int16)(v336 >> 3);
              BOOL v77 = v73 == 0;
              char v78 = 35;
              char v79 = 19;
              if (v77) {
                char v78 = 19;
              }
              unint64_t v80 = v336 >> v78;
              if (v77) {
                char v79 = 3;
              }
              unint64_t v81 = (8 * (unsigned __int16)(v336 >> v79)) & 0xFFFFF8000007FFFFLL | ((v80 & 0xFFFFFF) << 19);
              uint64_t v82 = (v336 & 2) != 0 ? v81 | 2 : v72;
              while (1)
              {
                if (v323) {
                  llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v44);
                }
                if (v76 == v319) {
                  break;
                }
                unsigned int v83 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
                unint64_t v84 = v83 & 0x7FFFFFFF;
                *(void *)(*(void *)(a2 + 24) + 16 * v84) = 4;
                unint64_t v85 = *(unsigned int *)(a2 + 432);
                if (v84 >= v85)
                {
                  unint64_t v86 = v84 + 1;
                  uint64_t v87 = *(void *)(a2 + 440);
                  if (v84 >= *(unsigned int *)(a2 + 436)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  int v88 = *(_DWORD *)(a2 + 432);
                  if (v86 != v85)
                  {
                    unsigned int v89 = (void *)(*(void *)(a2 + 424) + 8 * *(unsigned int *)(a2 + 432));
                    uint64_t v90 = ~v84 + v85;
                    do
                    {
                      *v89++ = v87;
                      BOOL v56 = __CFADD__(v90++, 1);
                    }
                    while (!v56);
                    int v88 = *(_DWORD *)(a2 + 432);
                  }
                  *(_DWORD *)(a2 + 432) = v88 + v86 - v85;
                }
                *(void *)(*(void *)(a2 + 424) + 8 * v84) = v82;
                uint64_t v91 = *(void *)(a2 + 8);
                uint64_t v32 = (uint64_t)v326;
                if (v91) {
                  (*(void (**)(uint64_t, void))(*(void *)v91 + 24))(v91, v83);
                }
                sub_1CBA5CD34(&v342, v83, v45, v339);
                if (v346 >= (unint64_t)HIDWORD(v346)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((_DWORD *)v345 + v346) = v83;
                LODWORD(v346) = v346 + 1;
                unint64_t v92 = sub_1CB8F1DC4(&v339);
                if (v44 == 1) {
                v45 += v92 >> 3;
                }
                ++v76;
              }
              v338[0] = v333;
              v338[2] = 1;
              int v152 = (int *)v345;
              int v153 = v346;
              v349 = &v351;
              uint64_t v350 = 0x800000000;
              if (v346 >= 9) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v34 = v310;
              unint64_t v41 = v305;
              if (v346)
              {
                uint64_t v154 = 0;
                uint64_t v155 = 4 * v346;
                do
                {
                  int v156 = *v152++;
                  unint64_t v157 = (_DWORD *)((char *)&v351 + v154);
                  _DWORD *v157 = v156;
                  v157[4] = 0;
                  v154 += 24;
                  v155 -= 4;
                }
                while (v155);
                int v158 = v350;
              }
              else
              {
                int v158 = 0;
              }
              LODWORD(v350) = v158 + v153;
              (*(void (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t *))(*(void *)v32 + 32))(v32, 77, v338, 1, &v351);
              if (v349 != &v351) {
                free(v349);
              }
              if (v345 != &v347) {
                free(v345);
              }
            }
            if (v335 != v336 && !sub_1CBA5D7C0((uint64_t)&v330, (void *)v32))
            {
LABEL_294:
              char v33 = 0;
              return (v34 != 0) & v33;
            }
          }
          llvm::MachineInstr::eraseFromParent(v41);
          char v33 = 1;
          return (v34 != 0) & v33;
        }
        uint64_t v35 = *v7;
        if (!*v7)
        {
LABEL_56:
          uint64_t v36 = *v6;
          const char *v7 = *v6;
          if (v36) {
            llvm::MetadataTracking::track((uint64_t)v7, v36, 2);
          }
          goto LABEL_58;
        }
        int v183 = *v35;
        if ((v183 - 4) > 0x1E)
        {
          if ((v183 - 3) >= 0xFFFFFFFE) {
            uint64_t v231 = *v7;
          }
          else {
            uint64_t v231 = 0;
          }
          if ((v183 - 3) < 0xFFFFFFFE)
          {
            if (v183 == 3) {
              *((void *)v35 + 1) = 0;
            }
            goto LABEL_56;
          }
          unint64_t v185 = (unint64_t)(v231 + 8);
        }
        else
        {
          if ((v35[1] & 0x7F) != 2 && !*((_DWORD *)v35 + 3)) {
            goto LABEL_56;
          }
          uint64_t v184 = *((void *)v35 + 2);
          if ((v184 & 4) == 0) {
            goto LABEL_56;
          }
          unint64_t v185 = v184 & 0xFFFFFFFFFFFFFFF8;
          if (!v185) {
            goto LABEL_56;
          }
        }
        v349 = v7;
        sub_1CC5FA668(v185 + 16, &v349);
        goto LABEL_56;
      }
LABEL_81:
      if (v331 != 2 && v331 != 5)
      {
        uint64_t v62 = (*(uint64_t (**)(void))(**(void **)(v24 + 16) + 168))(*(void *)(v24 + 16));
        if (sub_1CBA1B718(v62, a1, a2, (llvm::IntegerType *****)v32)) {
          return 1;
        }
      }
      uint64_t v63 = 0;
      int v64 = v31 & 0xFFFFFF;
      if ((v31 & 0xFFFFFF) > 2)
      {
        if (v64 == 3) {
          return sub_1CBA5C2C8((uint64_t)&v330, a2, v32);
        }
        if (v64 != 65) {
          return v63;
        }
      }
      else if ((v64 - 1) >= 2)
      {
        if (!v64)
        {
          uint64_t v65 = *(void *)(*(void *)(v32 + 8) + 8);
          unint64_t v66 = v336;
          if (v336 != 129 && v336 != 257)
          {
            if ((v336 & 0xFFFFFFFFFFFFFFF9) == 0 || (v336 & 4) == 0) {
              goto LABEL_230;
            }
            char v67 = 3;
            if ((v336 & 1) == 0) {
              char v67 = 19;
            }
            unint64_t v68 = v336 >> v67;
            unint64_t v69 = (v336 & 2) != 0
                ? (v336 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v68) | 2
                : v336 & 0x8000000000000000 | (8 * v68) | 1;
            if (v69 == 257 || v69 == 129)
            {
              uint64_t v70 = 0x800000000000000;
              if ((v336 & 2) == 0) {
                uint64_t v70 = 0x8000000000000;
              }
              if ((v70 & v336) != 0) {
                llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v21);
              }
              if (v66 != 513 && (unsigned __int16)(v66 >> 3) >= 5u) {
                return 0;
              }
            }
            else
            {
LABEL_230:
              if (v336 != 513) {
                return 0;
              }
            }
          }
          v338[0] = v334;
          v349 = v338;
          LODWORD(v345) = v334;
          sub_1CBA6054C((_DWORD **)&v349, a2, (unsigned int *)&v345);
          uint64_t v162 = v338[0];
          if (v338[0] < 0) {
            int v163 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v338[0] & 0x7FFFFFFF) + 8);
          }
          else {
            int v163 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v338[0]);
          }
          uint64_t v164 = *v163;
          if (!v164) {
            return 0;
          }
          if ((*(unsigned char *)(v164 + 3) & 1) == 0)
          {
            uint64_t v164 = *(void *)(v164 + 24);
            if (!v164) {
              return 0;
            }
            uint64_t v32 = (uint64_t)v326;
            if ((*(unsigned char *)(v164 + 3) & 1) == 0) {
              return 0;
            }
          }
          uint64_t v165 = *(void *)(v164 + 8);
          if (!v165) {
            return 0;
          }
          if (!sub_1CBA5F778(*(void *)(v164 + 8)))
          {
            unint64_t v178 = 0;
            int v182 = v162;
            goto LABEL_401;
          }
          uint64_t v167 = *(void *)(v165 + 32);
          uint64_t v168 = *(unsigned int *)(v167 + 36);
          LODWORD(v342) = v168;
          if ((v168 & 0x80000000) != 0) {
            uint64_t v169 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v168 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v169 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v168);
          }
          uint64_t v170 = *v169;
          if (!v170) {
            goto LABEL_245;
          }
          if (*(unsigned char *)(v170 + 3)) {
            goto LABEL_241;
          }
          uint64_t v170 = *(void *)(v170 + 24);
          if (v170)
          {
            uint64_t v32 = (uint64_t)v326;
            if (*(unsigned char *)(v170 + 3))
            {
LABEL_241:
              uint64_t v171 = *(void *)(v170 + 8);
              if (v171 && **(_WORD **)(v171 + 16) == 80 && *(_DWORD *)(v171 + 40) == 2)
              {
                LODWORD(v168) = *(_DWORD *)(*(void *)(v171 + 32) + 36);
                LODWORD(v342) = v168;
              }
            }
          }
          else
          {
            uint64_t v32 = (uint64_t)v326;
          }
LABEL_245:
          uint64_t v172 = *(unsigned int *)(v167 + 68);
          v349 = &v342;
          LODWORD(v345) = v168;
          sub_1CBA60644((_DWORD **)&v349, a2, (unsigned int *)&v345);
          uint64_t v173 = v342;
          if ((v342 & 0x80000000) != 0) {
            uint64_t v174 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v342 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v174 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v342);
          }
          uint64_t v175 = *v174;
          if (!v175) {
            goto LABEL_250;
          }
          if (*(unsigned char *)(v175 + 3)) {
            goto LABEL_249;
          }
          uint64_t v175 = *(void *)(v175 + 24);
          if (!v175)
          {
            uint64_t v32 = (uint64_t)v326;
            goto LABEL_250;
          }
          uint64_t v32 = (uint64_t)v326;
          if (*(unsigned char *)(v175 + 3)) {
LABEL_249:
          }
            uint64_t v175 = *(void *)(v175 + 8);
          else {
            uint64_t v175 = 0;
          }
LABEL_250:
          if ((v172 & 0x80000000) != 0) {
            int v176 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v172 & 0x7FFFFFFF) + 8);
          }
          else {
            int v176 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v172);
          }
          uint64_t v177 = *v176;
          if (v177)
          {
            if (*(unsigned char *)(v177 + 3)) {
              goto LABEL_254;
            }
            uint64_t v177 = *(void *)(v177 + 24);
            if (!v177)
            {
              unint64_t v178 = 0;
              uint64_t v173 = v162;
              uint64_t v32 = (uint64_t)v326;
              goto LABEL_400;
            }
            uint64_t v32 = (uint64_t)v326;
            if (*(unsigned char *)(v177 + 3))
            {
LABEL_254:
              unint64_t v178 = 0;
              if (!v175) {
                goto LABEL_399;
              }
              uint64_t v179 = *(void *)(v177 + 8);
              if (!v179) {
                goto LABEL_399;
              }
              if (**(_WORD **)(v175 + 16) == 70 && **(_WORD **)(v179 + 16) == 120)
              {
                uint64_t v180 = *(void *)(*(void *)(v179 + 32) + 48);
                char v181 = (unsigned int *)(v180 + 24);
                if (*(_DWORD *)(v180 + 32) >= 0x41u) {
                  char v181 = *(unsigned int **)v181;
                }
                unint64_t v178 = *v181;
                LODWORD(v162) = v342;
                goto LABEL_400;
              }
            }
          }
          unint64_t v178 = 0;
LABEL_399:
          uint64_t v173 = v162;
LABEL_400:
          int v182 = v162;
          uint64_t v162 = v173;
LABEL_401:
          if (v182 < 0) {
            uint64_t v240 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v162 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v240 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v162);
          }
          int v241 = *(unsigned __int8 *)(v65 + 1709);
          uint64_t v242 = *v240;
          if (v242
            && ((*(unsigned char *)(v242 + 3) & 1) != 0
             || (uint64_t v242 = *(void *)(v242 + 24)) != 0 && (*(unsigned char *)(v242 + 3) & 1) != 0)
            && (uint64_t v243 = *(void *)(v242 + 8)) != 0)
          {
            int v244 = **(unsigned __int16 **)(v243 + 16);
            v349 = &v330;
            uint64_t v350 = a2;
            uint64_t v351 = 0;
            LODWORD(v352) = -1;
            char v356 = 0;
            char v357 = 0;
            sub_1CBA159DC(&v349, v166);
            if (v355 == 3 && *(unsigned char *)(v351 + 326)) {
              unint64_t v245 = v353 & 0xFFFFFFFFFFF80FFFLL | 0x1000;
            }
            else {
              unint64_t v245 = v353 & 0xFFFFFFFFFFFFF9FFLL;
            }
            unint64_t v353 = v245;
            if (v244 == 70)
            {
              unsigned int v345 = (void *)v336;
              int v247 = sub_1CB8F1DC4((unint64_t *)&v345);
              if (v246 == 1) {
              HIDWORD(v249) = v247;
              }
              LODWORD(v249) = v247 - 8;
              int v248 = v249 >> 3;
              uint64_t v250 = qword_1CDB0E648[v248];
              uint64_t v251 = off_1E66A9A40[v248];
              int v252 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
              *(void *)(*(void *)(a2 + 24) + 16 * (v252 & 0x7FFFFFFF)) = v251;
              uint64_t v253 = *(void *)(a2 + 8);
              if (v253) {
                (*(void (**)(uint64_t))(*(void *)v253 + 24))(v253);
              }
              unsigned int v254 = *(llvm::MachineFunction **)(v32 + 8);
              uint64_t v255 = *(void *)(*(void *)(v32 + 16) + 8) + 48 * v250;
              uint64_t v256 = *(unsigned __int8 **)(v32 + 32);
              unint64_t v342 = (unint64_t)v256;
              if (v256) {
                llvm::MetadataTracking::track((uint64_t)&v342, v256, 2);
              }
              uint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v254, v255, (unsigned __int8 **)&v342, 0);
              if (!v342) {
                goto LABEL_418;
              }
              int v299 = *(unsigned __int8 *)v342;
              if ((v299 - 4) > 0x1E)
              {
                if ((v299 - 3) >= 0xFFFFFFFE) {
                  uint64_t v303 = (unsigned __int8 *)v342;
                }
                else {
                  uint64_t v303 = 0;
                }
                if ((v299 - 3) < 0xFFFFFFFE)
                {
                  uint64_t v32 = (uint64_t)v326;
                  if (v299 == 3) {
                    *(void *)(v342 + 8) = 0;
                  }
                  goto LABEL_418;
                }
                unint64_t v301 = (unint64_t)(v303 + 8);
              }
              else
              {
                uint64_t v32 = (uint64_t)v326;
                if ((*(unsigned char *)(v342 + 1) & 0x7F) != 2 && !*(_DWORD *)(v342 + 12)) {
                  goto LABEL_418;
                }
                uint64_t v300 = *(void *)(v342 + 16);
                if ((v300 & 4) == 0) {
                  goto LABEL_418;
                }
                unint64_t v301 = v300 & 0xFFFFFFFFFFFFFFF8;
                if (!v301) {
                  goto LABEL_418;
                }
              }
              unsigned int v345 = &v342;
              sub_1CC5FA668(v301 + 16, &v345);
              uint64_t v32 = (uint64_t)v326;
LABEL_418:
              unsigned int v258 = *(unint64_t **)(v32 + 48);
              uint64_t v259 = *(void *)(*(void *)(v32 + 40) + 40);
              *((void *)MachineInstr + 3) = v259;
              uint64_t v260 = *(void *)(v259 + 32);
              uint64_t v261 = *((unsigned int *)MachineInstr + 10);
              if (v261)
              {
                uint64_t v266 = *((void *)MachineInstr + 4);
                uint64_t v267 = *(void *)(v260 + 40);
                uint64_t v268 = 32 * v261;
                do
                {
                  if (!*(unsigned char *)v266)
                  {
                    uint64_t v269 = *(unsigned int *)(v266 + 4);
                    if ((int)v269 >= 0) {
                      unsigned int v270 = (uint64_t *)(*(void *)(v267 + 272) + 8 * v269);
                    }
                    else {
                      unsigned int v270 = (uint64_t *)(*(void *)(v267 + 24) + 16 * (v269 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v271 = *v270;
                    if (*v270)
                    {
                      uint64_t v272 = *(void *)(v271 + 16);
                      *(void *)(v271 + 16) = v266;
                      *(void *)(v266 + 16) = v272;
                      if (*(unsigned char *)(v266 + 3))
                      {
                        *(void *)(v266 + 24) = v271;
                      }
                      else
                      {
                        *(void *)(v266 + 24) = 0;
                        unsigned int v270 = (uint64_t *)(v272 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v266 + 16) = v266;
                      *(void *)(v266 + 24) = 0;
                    }
                    *unsigned int v270 = v266;
                  }
                  v266 += 32;
                  v268 -= 32;
                }
                while (v268);
              }
              uint64_t v262 = *(void *)(v260 + 728);
              if (v262) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v262 + 24))(v262, MachineInstr);
              }
              unint64_t v263 = *v258 & 0xFFFFFFFFFFFFFFF8;
              *(void *)uint64_t MachineInstr = v263 | *(void *)MachineInstr & 7;
              *((void *)MachineInstr + 1) = v258;
              *(void *)(v263 + 8) = MachineInstr;
              *unsigned int v258 = *v258 & 7 | (unint64_t)MachineInstr;
              uint64_t v264 = *(void *)(v32 + 56);
              if (v264) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v264 + 24))(v264, MachineInstr);
              }
              uint64_t v346 = 0;
              unint64_t v347 = 0;
              uint64_t v348 = 0;
              LODWORD(v345) = 0x1000000;
              HIDWORD(v345) = v252;
              llvm::MachineInstr::addOperand(MachineInstr, v254, (const llvm::MachineOperand *)&v345);
              unint64_t v342 = (unint64_t)v254;
              BOOL v343 = MachineInstr;
              LODWORD(v345) = 1;
              uint64_t v346 = 0;
              unint64_t v347 = v245;
              llvm::MachineInstr::addOperand(MachineInstr, v254, (const llvm::MachineOperand *)&v345);
              LODWORD(v345) = 1;
              uint64_t v346 = 0;
              unint64_t v347 = v354;
              llvm::MachineInstr::addOperand(MachineInstr, v254, (const llvm::MachineOperand *)&v345);
              int v265 = *(_DWORD *)(*(void *)(v243 + 32) + 48);
              LODWORD(v345) = 5;
              uint64_t v346 = 0;
              LODWORD(v347) = v265;
              llvm::MachineInstr::addOperand(MachineInstr, v254, (const llvm::MachineOperand *)&v345);
              LODWORD(v345) = 1;
              uint64_t v346 = 0;
              unint64_t v347 = v178;
              llvm::MachineInstr::addOperand(MachineInstr, v254, (const llvm::MachineOperand *)&v345);
              LODWORD(v345) = 1;
              uint64_t v346 = 0;
              unint64_t v347 = 0;
              llvm::MachineInstr::addOperand(MachineInstr, v254, (const llvm::MachineOperand *)&v345);
              llvm::MachineInstr::addMemOperand(MachineInstr, v254, v337);
              sub_1CBA318C8((uint64_t)&v342);
              LODWORD(v327) = v333;
              LODWORD(v328) = 1;
              LODWORD(v345) = v252;
              LODWORD(v347) = 0;
              (*(void (**)(uint64_t, uint64_t, llvm::GlobalValue **, uint64_t, void **, uint64_t, void))(*(void *)v32 + 32))(v32, 19, &v327, 1, &v345, 1, 0);
              goto LABEL_454;
            }
          }
          else
          {
            v349 = &v330;
            uint64_t v350 = a2;
            uint64_t v351 = 0;
            LODWORD(v352) = -1;
            char v356 = 0;
            char v357 = 0;
            sub_1CBA159DC(&v349, v166);
            if (v355 == 3 && *(unsigned char *)(v351 + 326)) {
              unint64_t v273 = v353 & 0xFFFFFFFFFFF80FFFLL | 0x1000;
            }
            else {
              unint64_t v273 = v353 & 0xFFFFFFFFFFFFF9FFLL;
            }
            unint64_t v353 = v273;
          }
          v338[0] = sub_1CBA5FD94(a2, (llvm::IntegerType *****)v32, &v349, v338[0], v241 != 0);
          unsigned int v274 = *(_DWORD *)((char *)&dword_1CD96F250[32 * (unint64_t)*(unsigned __int8 *)(v351 + 381)
                                                    - 1
                                                    + 16 * (unint64_t)HIDWORD(v352)
                                                    + WORD1(v352)]
                           + ((4 * (unsigned __int16)v352) & 0x3FFF0));
          if (v274 == -1) {
            llvm::report_fatal_error((llvm *)"Unsupported stack access", (const llvm::Twine *)1);
          }
          uint64_t v275 = *(llvm::MachineFunction **)(v32 + 8);
          uint64_t v276 = *(void *)(*(void *)(v32 + 16) + 8) + 48 * v274;
          uint64_t v277 = *(unsigned __int8 **)(v32 + 32);
          unint64_t v342 = (unint64_t)v277;
          if (v277) {
            llvm::MetadataTracking::track((uint64_t)&v342, v277, 2);
          }
          uint64_t v278 = llvm::MachineFunction::CreateMachineInstr(v275, v276, (unsigned __int8 **)&v342, 0);
          if (v342)
          {
            int v293 = *(unsigned __int8 *)v342;
            if ((v293 - 4) > 0x1E)
            {
              if ((v293 - 3) >= 0xFFFFFFFE) {
                uint64_t v302 = (unsigned __int8 *)v342;
              }
              else {
                uint64_t v302 = 0;
              }
              if ((v293 - 3) < 0xFFFFFFFE)
              {
                uint64_t v32 = (uint64_t)v326;
                if (v293 == 3) {
                  *(void *)(v342 + 8) = 0;
                }
                goto LABEL_448;
              }
              unint64_t v295 = (unint64_t)(v302 + 8);
            }
            else
            {
              uint64_t v32 = (uint64_t)v326;
              if ((*(unsigned char *)(v342 + 1) & 0x7F) != 2 && !*(_DWORD *)(v342 + 12)) {
                goto LABEL_448;
              }
              uint64_t v294 = *(void *)(v342 + 16);
              if ((v294 & 4) == 0) {
                goto LABEL_448;
              }
              unint64_t v295 = v294 & 0xFFFFFFFFFFFFFFF8;
              if (!v295) {
                goto LABEL_448;
              }
            }
            unsigned int v345 = &v342;
            sub_1CC5FA668(v295 + 16, &v345);
            uint64_t v32 = (uint64_t)v326;
          }
LABEL_448:
          uint64_t v279 = *(unint64_t **)(v32 + 48);
          uint64_t v280 = *(void *)(*(void *)(v32 + 40) + 40);
          *((void *)v278 + 3) = v280;
          uint64_t v281 = *(void *)(v280 + 32);
          uint64_t v282 = *((unsigned int *)v278 + 10);
          if (v282)
          {
            uint64_t v286 = *((void *)v278 + 4);
            uint64_t v287 = *(void *)(v281 + 40);
            uint64_t v288 = 32 * v282;
            do
            {
              if (!*(unsigned char *)v286)
              {
                uint64_t v289 = *(unsigned int *)(v286 + 4);
                if ((int)v289 >= 0) {
                  unint64_t v290 = (uint64_t *)(*(void *)(v287 + 272) + 8 * v289);
                }
                else {
                  unint64_t v290 = (uint64_t *)(*(void *)(v287 + 24) + 16 * (v289 & 0x7FFFFFFF) + 8);
                }
                uint64_t v291 = *v290;
                if (*v290)
                {
                  uint64_t v292 = *(void *)(v291 + 16);
                  *(void *)(v291 + 16) = v286;
                  *(void *)(v286 + 16) = v292;
                  if (*(unsigned char *)(v286 + 3))
                  {
                    *(void *)(v286 + 24) = v291;
                  }
                  else
                  {
                    *(void *)(v286 + 24) = 0;
                    unint64_t v290 = (uint64_t *)(v292 + 24);
                  }
                }
                else
                {
                  *(void *)(v286 + 16) = v286;
                  *(void *)(v286 + 24) = 0;
                }
                *unint64_t v290 = v286;
              }
              v286 += 32;
              v288 -= 32;
            }
            while (v288);
          }
          uint64_t v283 = *(void *)(v281 + 728);
          if (v283) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v283 + 24))(v283, v278);
          }
          unint64_t v284 = *v279 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v278 = v284 | *(void *)v278 & 7;
          *((void *)v278 + 1) = v279;
          *(void *)(v284 + 8) = v278;
          *uint64_t v279 = *v279 & 7 | (unint64_t)v278;
          uint64_t v285 = *(void *)(v32 + 56);
          if (v285) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v285 + 24))(v285, v278);
          }
          unint64_t v342 = (unint64_t)v275;
          BOOL v343 = v278;
          uint64_t v346 = 0;
          unint64_t v347 = 0;
          uint64_t v348 = 0;
          LODWORD(v345) = 0x1000000;
          HIDWORD(v345) = v333;
          llvm::MachineInstr::addOperand(v278, v275, (const llvm::MachineOperand *)&v345);
          LODWORD(v345) = 1;
          uint64_t v346 = 0;
          unint64_t v347 = v353 | ((unint64_t)(v241 == 0) << 8);
          llvm::MachineInstr::addOperand(v278, v275, (const llvm::MachineOperand *)&v345);
          LODWORD(v345) = 1;
          uint64_t v346 = 0;
          unint64_t v347 = v354;
          llvm::MachineInstr::addOperand(v278, v275, (const llvm::MachineOperand *)&v345);
          uint64_t v346 = 0;
          unint64_t v347 = 0;
          LODWORD(v345) = 0;
          HIDWORD(v345) = v338[0];
          uint64_t v348 = 0;
          llvm::MachineInstr::addOperand(v278, v275, (const llvm::MachineOperand *)&v345);
          LODWORD(v345) = 1;
          uint64_t v346 = 0;
          unint64_t v347 = 0;
          llvm::MachineInstr::addOperand(v278, v275, (const llvm::MachineOperand *)&v345);
          llvm::MachineInstr::addMemOperand(v278, v275, v337);
          sub_1CBA318C8((uint64_t)&v342);
LABEL_454:
          if (v335 == v336 || sub_1CBA5D7C0((uint64_t)&v330, (void *)v32))
          {
            uint64_t v235 = v330;
            goto LABEL_457;
          }
          return 0;
        }
        return v63;
      }
      return sub_1CBA5B6B8((uint64_t)&v330, a2, (void *)v32);
    }
    sub_1CBA315DC((uint64_t)&v349, v22, a2, 0);
    uint64_t v32 = (uint64_t)v326;
    if (!(_BYTE)v351) {
      goto LABEL_81;
    }
    (*(void (**)(void, void *))(**(void **)(v24 + 344) + 400))(*(void *)(v24 + 344), v349);
    if (v21 == 17) {
      goto LABEL_81;
    }
    int v93 = *(_DWORD *)(a1[4] + 4);
    if ((v93 & 0x80000000) == 0 || (v93 & 0x7FFFFFFFu) >= *(_DWORD *)(a2 + 432)) {
      return 0;
    }
    unint64_t v94 = *(void *)(*(void *)(a2 + 424) + 8 * (v93 & 0x7FFFFFFF));
    if (v94 != 129 && v94 != 257)
    {
      if ((v94 & 0xFFFFFFFFFFFFFFF9) == 0
        || (*(void *)(*(void *)(a2 + 424) + 8 * (v93 & 0x7FFFFFFF)) & 4) == 0)
      {
        return 0;
      }
      uint64_t v187 = 0x8000000000000;
      if ((v94 & 2) != 0) {
        uint64_t v187 = 0x800000000000000;
      }
      if ((v187 & v94) != 0) {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v21);
      }
      uint64_t v63 = 0;
      if ((v94 & 2) != 0 || (unsigned __int16)(v94 >> 3) > 4u) {
        return v63;
      }
      char v188 = 3;
      if ((v94 & 1) == 0) {
        char v188 = 19;
      }
      unint64_t v189 = v94 & 0x8000000000000000 | (8 * (v94 >> v188));
      if (v189 != 256 && v189 != 128) {
        return 0;
      }
    }
    int v324 = (void *)(a2 + 424);
    int v95 = sub_1CBA319C4(v22, a2, v326);
    unsigned int v345 = (void *)16777244;
    LODWORD(v346) = 0;
    LODWORD(v349) = v95;
    LODWORD(v351) = 0;
    char v96 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v326)[4])(v326, 317, &v345, 1, &v349, 1, 0);
    if (v94 == 257) {
      goto LABEL_303;
    }
    if (v94 == 16777244)
    {
      LODWORD(v345) = v93;
      LODWORD(v346) = 1;
      v349 = v96;
      uint64_t v350 = v97;
      LODWORD(v351) = 1;
      int v98 = (*v326)[4];
      unint64_t v99 = v326;
      goto LABEL_337;
    }
    if ((v94 & 0xFFFFFFFFFFFFFFF9) == 0 || (v94 & 6) != 4) {
      goto LABEL_338;
    }
    char v191 = 3;
    if ((v94 & 1) == 0) {
      char v191 = 19;
    }
    if ((v94 & 0x8000000000000000 | (8 * (v94 >> v191))) == 0x100)
    {
LABEL_303:
      uint64_t v312 = v96;
      uint64_t v316 = v97;
      unint64_t v321 = v94;
      int v307 = v93;
      unsigned int v192 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
      unint64_t v193 = v192 & 0x7FFFFFFF;
      *(void *)(*(void *)(a2 + 24) + 16 * v193) = 4;
      unint64_t v194 = *(unsigned int *)(a2 + 432);
      if (v193 >= v194)
      {
        uint64_t v195 = *(void *)(a2 + 440);
        uint64_t v196 = v193 + 1 - v194;
        if (v193 >= *(unsigned int *)(a2 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v197 = *(_DWORD *)(a2 + 432);
        if (v196)
        {
          uint64_t v198 = (void *)(*v324 + 8 * *(unsigned int *)(a2 + 432));
          uint64_t v199 = ~v193 + v194;
          do
          {
            *v198++ = v195;
            BOOL v56 = __CFADD__(v199++, 1);
          }
          while (!v56);
          int v197 = *(_DWORD *)(a2 + 432);
        }
        *(_DWORD *)(a2 + 432) = v197 + v196;
      }
      *(void *)(*(void *)(a2 + 424) + 8 * v193) = 257;
      uint64_t v200 = *(void *)(a2 + 8);
      if (v200) {
        (*(void (**)(uint64_t, void))(*(void *)v200 + 24))(v200, v192);
      }
      unsigned int v201 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
      unint64_t v202 = v201 & 0x7FFFFFFF;
      *(void *)(*(void *)(a2 + 24) + 16 * v202) = 4;
      unint64_t v203 = *(unsigned int *)(a2 + 432);
      if (v202 >= v203)
      {
        uint64_t v204 = *(void *)(a2 + 440);
        uint64_t v205 = v202 + 1 - v203;
        if (v202 >= *(unsigned int *)(a2 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v206 = *(_DWORD *)(a2 + 432);
        if (v205)
        {
          unint64_t v207 = (void *)(*v324 + 8 * *(unsigned int *)(a2 + 432));
          uint64_t v208 = ~v202 + v203;
          do
          {
            *v207++ = v204;
            BOOL v56 = __CFADD__(v208++, 1);
          }
          while (!v56);
          int v206 = *(_DWORD *)(a2 + 432);
        }
        *(_DWORD *)(a2 + 432) = v206 + v205;
      }
      *(void *)(*(void *)(a2 + 424) + 8 * v202) = 257;
      uint64_t v209 = *(void *)(a2 + 8);
      if (v209) {
        (*(void (**)(uint64_t, void))(*(void *)v209 + 24))(v209, v201);
      }
      unsigned int v210 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
      unint64_t v211 = v210 & 0x7FFFFFFF;
      *(void *)(*(void *)(a2 + 24) + 16 * v211) = 4;
      unint64_t v212 = *(unsigned int *)(a2 + 432);
      if (v211 >= v212)
      {
        uint64_t v213 = *(void *)(a2 + 440);
        uint64_t v214 = v211 + 1 - v212;
        if (v211 >= *(unsigned int *)(a2 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v215 = *(_DWORD *)(a2 + 432);
        if (v214)
        {
          unint64_t v216 = (void *)(*v324 + 8 * *(unsigned int *)(a2 + 432));
          uint64_t v217 = ~v211 + v212;
          do
          {
            *v216++ = v213;
            BOOL v56 = __CFADD__(v217++, 1);
          }
          while (!v56);
          int v215 = *(_DWORD *)(a2 + 432);
        }
        *(_DWORD *)(a2 + 432) = v215 + v214;
      }
      *(void *)(*(void *)(a2 + 424) + 8 * v211) = 257;
      uint64_t v218 = *(void *)(a2 + 8);
      if (v218) {
        (*(void (**)(uint64_t, void))(*(void *)v218 + 24))(v218, v210);
      }
      unsigned int v345 = (void *)__PAIR64__(v201, v192);
      LODWORD(v346) = v210;
      v349 = v312;
      uint64_t v350 = v316;
      LODWORD(v351) = 1;
      sub_1CC738BB8((uint64_t)v326, (char *)&v345, 3, (uint64_t)&v349);
      if (v321 != 16777252)
      {
        if (v321 == 16777236)
        {
          LODWORD(v345) = v307;
          LODWORD(v346) = 1;
          LODWORD(v349) = v192;
          LODWORD(v351) = 0;
          LODWORD(v352) = v201;
          LODWORD(v354) = 0;
          ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*v326)[4])(v326, 76, &v345, 1, &v349, 2, 0);
          goto LABEL_370;
        }
        if (v321 != 257)
        {
LABEL_370:
          uint64_t v235 = (llvm::MachineInstr *)a1;
LABEL_457:
          llvm::MachineInstr::eraseFromParent(v235);
          return 1;
        }
        LODWORD(v345) = v307;
        LODWORD(v346) = 1;
        LODWORD(v349) = v192;
        LODWORD(v351) = 0;
        int v98 = (*v326)[4];
        unint64_t v99 = v326;
LABEL_337:
        ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))v98)(v99, 19, &v345, 1, &v349, 1, 0);
        goto LABEL_370;
      }
      v349 = (void *)257;
      LODWORD(v350) = 0;
      ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void, void, void))(*v326)[4])(v326, 68, &v349, 1, 0, 0, 0);
      uint64_t v236 = 0;
      LODWORD(v345) = v307;
      LODWORD(v346) = 1;
      unint64_t v342 = __PAIR64__(v201, v192);
      LODWORD(v343) = v210;
      HIDWORD(v343) = *(_DWORD *)(*(void *)(v237 + 32) + 4);
      v349 = &v351;
      uint64_t v350 = 0x800000000;
      uint64_t v238 = 16;
      do
      {
        uint64_t v239 = (_DWORD *)((char *)&v349 + v238);
        *uint64_t v239 = *(_DWORD *)((char *)&v342 + v236);
        v239[4] = 0;
        v238 += 24;
        v236 += 4;
      }
      while (v236 != 16);
      LODWORD(v350) = v350 + 4;
      ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, uint64_t *))(*v326)[4])(v326, 77, &v345, 1, &v351);
      int v234 = v349;
      if (v349 == &v351) {
        goto LABEL_370;
      }
    }
    else
    {
LABEL_338:
      uint64_t v313 = v96;
      uint64_t v317 = v97;
      unint64_t v322 = v94;
      int v219 = 0;
      int v308 = v93;
      v349 = &v351;
      uint64_t v350 = 0x600000000;
      do
      {
        unsigned int v220 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
        unint64_t v221 = v220 & 0x7FFFFFFF;
        *(void *)(*(void *)(a2 + 24) + 16 * v221) = 4;
        unint64_t v222 = *(unsigned int *)(a2 + 432);
        if (v221 >= v222)
        {
          unint64_t v223 = v221 + 1;
          uint64_t v224 = *(void *)(a2 + 440);
          if (v221 >= *(unsigned int *)(a2 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v225 = *(_DWORD *)(a2 + 432);
          if (v223 != v222)
          {
            uint64_t v226 = (void *)(*v324 + 8 * *(unsigned int *)(a2 + 432));
            uint64_t v227 = ~v221 + v222;
            do
            {
              *v226++ = v224;
              BOOL v56 = __CFADD__(v227++, 1);
            }
            while (!v56);
            int v225 = *(_DWORD *)(a2 + 432);
          }
          *(_DWORD *)(a2 + 432) = v225 + v223 - v222;
        }
        *(void *)(*(void *)(a2 + 424) + 8 * v221) = 129;
        uint64_t v228 = *(void *)(a2 + 8);
        if (v228) {
          (*(void (**)(uint64_t, void))(*(void *)v228 + 24))(v228, v220);
        }
        if (v350 >= (unint64_t)HIDWORD(v350)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v349 + v350) = v220;
        LODWORD(v350) = v350 + 1;
        ++v219;
      }
      while (v219 != 6);
      unint64_t v342 = 8388660;
      LODWORD(v343) = 0;
      unsigned int v345 = v313;
      uint64_t v346 = v317;
      LODWORD(v347) = 1;
      unsigned int v345 = (void *)sub_1CC7382B0((uint64_t)v326);
      uint64_t v346 = v229;
      LODWORD(v347) = 1;
      sub_1CC738BB8((uint64_t)v326, (char *)v349, v350, (uint64_t)&v345);
      if (v322 == 129)
      {
        LODWORD(v342) = v308;
        LODWORD(v343) = 1;
        LODWORD(v345) = *(_DWORD *)v349;
        LODWORD(v347) = 0;
        ((void (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*v326)[4])(v326, 19, &v342, 1, &v345, 1, 0);
      }
      else
      {
        LODWORD(v345) = v308;
        LODWORD(v346) = 1;
        uint64_t v232 = (int *)v349;
        uint64_t v233 = 0x800000000000000;
        if ((v322 & 2) == 0) {
          uint64_t v233 = 0x8000000000000;
        }
        if ((v233 & v322) != 0) {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v230);
        }
        sub_1CC73661C((uint64_t)v326, (uint64_t)&v345, v232, (unsigned __int16)(v322 >> 3));
      }
      int v234 = v349;
      if (v349 == &v351) {
        goto LABEL_370;
      }
    }
    free(v234);
    goto LABEL_370;
  }

  return sub_1CBA56528(a1, a2, (uint64_t)a3);
}

uint64_t sub_1CBA3453C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v237 = *MEMORY[0x1E4F143B8];
  *(void *)(a3 + 40) = a1[3];
  *(void *)(a3 + 48) = a1;
  uint64_t v6 = (unsigned __int8 **)(a1 + 7);
  uint64_t v7 = (unsigned __int8 **)(a3 + 32);
  if (a1 + 7 == (void *)(a3 + 32)) {
    goto LABEL_5;
  }
  unsigned int v8 = *v7;
  if (*v7)
  {
    int v50 = *v8;
    if ((v50 - 4) > 0x1E)
    {
      if ((v50 - 3) >= 0xFFFFFFFE) {
        uint64_t v101 = *v7;
      }
      else {
        uint64_t v101 = 0;
      }
      if ((v50 - 3) < 0xFFFFFFFE)
      {
        if (v50 == 3) {
          *((void *)v8 + 1) = 0;
        }
        goto LABEL_3;
      }
      unint64_t v52 = (unint64_t)(v101 + 8);
    }
    else
    {
      if ((v8[1] & 0x7F) != 2 && !*((_DWORD *)v8 + 3)) {
        goto LABEL_3;
      }
      uint64_t v51 = *((void *)v8 + 2);
      if ((v51 & 4) == 0) {
        goto LABEL_3;
      }
      unint64_t v52 = v51 & 0xFFFFFFFFFFFFFFF8;
      if (!v52) {
        goto LABEL_3;
      }
    }
    unint64_t v222 = (unsigned __int8 **)(a3 + 32);
    sub_1CC5FA668(v52 + 16, &v222);
  }
LABEL_3:
  uint64_t v9 = *v6;
  const char *v7 = *v6;
  if (v9) {
    llvm::MetadataTracking::track((uint64_t)v7, v9, 2);
  }
LABEL_5:
  uint64_t v10 = a1 + 6;
  unint64_t v11 = a1[6];
  if (v11 < 8)
  {
    char v14 = 0;
  }
  else
  {
    if ((v11 & 7) == 0)
    {
      v11 &= 0xFFFFFFFFFFFFFFF8;
      *uint64_t v10 = v11;
      char v14 = (unsigned __int8 **)(a1 + 6);
      goto LABEL_17;
    }
    uint64_t v12 = (int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    if ((a1[6] & 7) != 3 || v12 == 0)
    {
      char v14 = 0;
LABEL_21:
      if ((v11 & 7) != 0)
      {
        uint64_t v10 = 0;
        if ((v11 & 7) == 3 && (uint64_t v17 = (int *)(v11 & 0xFFFFFFFFFFFFFFF8), (v11 & 0xFFFFFFFFFFFFFFF8) != 0))
        {
          uint64_t v18 = *v17;
          uint64_t v10 = (unint64_t *)(v17 + 2);
        }
        else
        {
          uint64_t v18 = 0;
        }
      }
      else
      {
        *uint64_t v10 = v11 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v18 = 1;
      }
      goto LABEL_26;
    }
    uint64_t v16 = *v12;
    char v14 = (unsigned __int8 **)(v12 + 2);
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_21;
    }
    uint64_t v6 = &v14[v15];
LABEL_17:
    while ((*((_WORD *)*v14 + 18) & 0xF00) == 0)
    {
      if (++v14 == v6)
      {
        char v14 = v6;
        break;
      }
    }
    if (v11 >= 8) {
      goto LABEL_21;
    }
  }
  uint64_t v10 = 0;
  uint64_t v18 = 0;
LABEL_26:
  if (v14 != (unsigned __int8 **)&v10[v18] && *v14)
  {
    return sub_1CBA56528(a1, a2, a3);
  }
  sub_1CBA1531C((uint64_t)&v213, (uint64_t)a1, a2);
  unint64_t v21 = v220;
  if (v214 == 2 || v214 == 5)
  {
LABEL_33:
    uint64_t v22 = 0;
    char v23 = 35;
    if ((v21 & 4) == 0) {
      char v23 = 19;
    }
    uint64_t v24 = (v21 >> v23) & 0xFFFFFF;
    if ((int)v24 > 2)
    {
      if (v24 == 3) {
        return sub_1CBA5C2C8((uint64_t)&v213, a2, a3);
      }
      if (v24 != 65) {
        return v22;
      }
    }
    else if ((v24 - 1) >= 2)
    {
      if (v24) {
        return v22;
      }
      uint64_t v25 = *(void *)(*(void *)(a3 + 8) + 8);
      int v26 = v217;
      LODWORD(v232) = v217;
      unsigned int v27 = v219;
      if (v219 != (unsigned __int8 *)129 && v219 != (unsigned __int8 *)257)
      {
        uint64_t v22 = 0;
        if (((unint64_t)v219 & 0xFFFFFFFFFFFFFFF9) == 0 || (v219 & 4) == 0) {
          return v22;
        }
        char v95 = 3;
        if ((v219 & 1) == 0) {
          char v95 = 19;
        }
        unint64_t v96 = (unint64_t)v219 >> v95;
        unint64_t v97 = (unint64_t)v219 & 0x8000000000000000 | (8 * v96) | 1;
        uint64_t v98 = ((unint64_t)v219 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v96) | 2;
        if ((v219 & 2) == 0) {
          uint64_t v98 = v97;
        }
        if (v98 != 257 && v98 != 129) {
          return 0;
        }
        uint64_t v99 = 0x800000000000000;
        if ((v219 & 2) == 0) {
          uint64_t v99 = 0x8000000000000;
        }
        if ((v99 & (unint64_t)v219) != 0) {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v20);
        }
        if ((unsigned __int16)(v27 >> 3) > 4u) {
          return 0;
        }
        int v26 = (int)v232;
      }
      unint64_t v222 = &v232;
      LODWORD(v233) = v26;
      sub_1CBA6054C((_DWORD **)&v222, a2, (unsigned int *)&v233);
      uint64_t v28 = v232;
      if ((v232 & 0x80000000) != 0) {
        int v29 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v232 & 0x7FFFFFFF) + 8);
      }
      else {
        int v29 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v232);
      }
      uint64_t v30 = *v29;
      if (!v30) {
        return 0;
      }
      if ((*(unsigned char *)(v30 + 3) & 1) == 0)
      {
        uint64_t v30 = *(void *)(v30 + 24);
        if (!v30 || (*(unsigned char *)(v30 + 3) & 1) == 0) {
          return 0;
        }
      }
      uint64_t v31 = *(void *)(v30 + 8);
      if (!v31) {
        return 0;
      }
      if (!sub_1CBA5F778(*(void *)(v30 + 8)))
      {
        unint64_t v44 = 0;
        int v100 = v28;
        goto LABEL_248;
      }
      uint64_t v33 = *(void *)(v31 + 32);
      uint64_t v34 = *(unsigned int *)(v33 + 36);
      LODWORD(v210) = v34;
      if ((v34 & 0x80000000) != 0) {
        uint64_t v35 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v35 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v34);
      }
      uint64_t v36 = *(unsigned int *)(v33 + 68);
      uint64_t v37 = *v35;
      if (*v35)
      {
        if (*(unsigned char *)(v37 + 3) & 1) != 0 || (uint64_t v37 = *(void *)(v37 + 24)) != 0 && (*(unsigned char *)(v37 + 3))
        {
          uint64_t v38 = *(void *)(v37 + 8);
          if (v38)
          {
            if (**(_WORD **)(v38 + 16) == 80 && *(_DWORD *)(v38 + 40) == 2)
            {
              LODWORD(v34) = *(_DWORD *)(*(void *)(v38 + 32) + 36);
              LODWORD(v210) = v34;
            }
          }
        }
      }
      unint64_t v222 = &v210;
      LODWORD(v233) = v34;
      sub_1CBA60644((_DWORD **)&v222, a2, (unsigned int *)&v233);
      uint64_t v39 = v210;
      if ((v210 & 0x80000000) != 0) {
        unint64_t v40 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v210 & 0x7FFFFFFF) + 8);
      }
      else {
        unint64_t v40 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v210);
      }
      uint64_t v41 = *v40;
      if (v41)
      {
        if (*(unsigned char *)(v41 + 3))
        {
LABEL_58:
          uint64_t v41 = *(void *)(v41 + 8);
          goto LABEL_59;
        }
        uint64_t v41 = *(void *)(v41 + 24);
        if (v41)
        {
          if (*(unsigned char *)(v41 + 3)) {
            goto LABEL_58;
          }
          uint64_t v41 = 0;
        }
      }
LABEL_59:
      if ((v36 & 0x80000000) != 0) {
        uint64_t v42 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v42 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v36);
      }
      uint64_t v43 = *v42;
      if (v43)
      {
        if (*(unsigned char *)(v43 + 3) & 1) != 0 || (uint64_t v43 = *(void *)(v43 + 24)) != 0 && (*(unsigned char *)(v43 + 3))
        {
          unint64_t v44 = 0;
          if (!v41) {
            goto LABEL_246;
          }
          uint64_t v45 = *(void *)(v43 + 8);
          if (!v45) {
            goto LABEL_246;
          }
          if (**(_WORD **)(v41 + 16) == 70 && **(_WORD **)(v45 + 16) == 120)
          {
            uint64_t v46 = *(void *)(*(void *)(v45 + 32) + 48);
            unint64_t v47 = (unsigned int *)(v46 + 24);
            if (*(_DWORD *)(v46 + 32) >= 0x41u) {
              unint64_t v47 = *(unsigned int **)v47;
            }
            unint64_t v44 = *v47;
            LODWORD(v28) = v210;
            goto LABEL_247;
          }
        }
      }
      unint64_t v44 = 0;
LABEL_246:
      uint64_t v39 = v28;
LABEL_247:
      int v100 = v28;
      uint64_t v28 = v39;
LABEL_248:
      if (v100 < 0) {
        uint64_t v144 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v28 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v144 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v28);
      }
      uint64_t v145 = *v144;
      if (v145
        && ((*(unsigned char *)(v145 + 3) & 1) != 0 || (uint64_t v145 = *(void *)(v145 + 24)) != 0 && (*(unsigned char *)(v145 + 3) & 1) != 0))
      {
        uint64_t v146 = *(void *)(v145 + 8);
        if (v146)
        {
          BOOL v147 = **(unsigned __int16 **)(v146 + 16) != 70;
LABEL_258:
          if (v218 == v219 || sub_1CBA5D7C0((uint64_t)&v213, (void *)a3))
          {
            int v148 = *(unsigned __int8 *)(v25 + 1709);
            unint64_t v222 = (unsigned __int8 **)&v213;
            uint64_t v223 = a2;
            uint64_t v224 = 0;
            LODWORD(v225) = -1;
            char v229 = 0;
            char v230 = 0;
            sub_1CBA159DC(&v222, v32);
            if (v228 == 3 && *(unsigned char *)(v224 + 326)) {
              unint64_t v149 = v226 & 0xFFFFFFFFFFF80FFFLL | 0x1000;
            }
            else {
              unint64_t v149 = v226 & 0xFFFFFFFFFFFFF9FFLL;
            }
            unint64_t v226 = v149;
            if (v147)
            {
              LODWORD(v232) = sub_1CBA5FD94(a2, (llvm::IntegerType *****)a3, &v222, (int)v232, v148 != 0);
              unsigned int v150 = *(_DWORD *)((char *)&dword_1CD96F250[32 * (unint64_t)*(unsigned __int8 *)(v224 + 381)
                                                        - 1
                                                        + 16 * (unint64_t)HIDWORD(v225)
                                                        + WORD1(v225)]
                               + ((4 * (unsigned __int16)v225) & 0x3FFF0));
              if (v150 == -1) {
                llvm::report_fatal_error((llvm *)"Unsupported stack access", (const llvm::Twine *)1);
              }
              uint64_t v151 = *(llvm::MachineFunction **)(a3 + 8);
              uint64_t v152 = *(void *)(*(void *)(a3 + 16) + 8) + 48 * v150;
              int v153 = *(unsigned __int8 **)(a3 + 32);
              unsigned int v210 = v153;
              if (v153) {
                llvm::MetadataTracking::track((uint64_t)&v210, v153, 2);
              }
              uint64_t v154 = llvm::MachineFunction::CreateMachineInstr(v151, v152, &v210, 0);
              if (!v210) {
                goto LABEL_270;
              }
              int v197 = *v210;
              if ((v197 - 4) > 0x1E)
              {
                if ((v197 - 3) >= 0xFFFFFFFE) {
                  int v206 = v210;
                }
                else {
                  int v206 = 0;
                }
                if ((v197 - 3) < 0xFFFFFFFE)
                {
                  if (v197 == 3) {
                    *((void *)v210 + 1) = 0;
                  }
                  goto LABEL_270;
                }
                unint64_t v199 = (unint64_t)(v206 + 8);
              }
              else
              {
                if ((v210[1] & 0x7F) != 2 && !*((_DWORD *)v210 + 3)) {
                  goto LABEL_270;
                }
                uint64_t v198 = *((void *)v210 + 2);
                if ((v198 & 4) == 0) {
                  goto LABEL_270;
                }
                unint64_t v199 = v198 & 0xFFFFFFFFFFFFFFF8;
                if (!v199) {
                  goto LABEL_270;
                }
              }
              uint64_t v233 = (unsigned __int8 *)&v210;
              sub_1CC5FA668(v199 + 16, &v233);
LABEL_270:
              uint64_t v155 = *(unint64_t **)(a3 + 48);
              uint64_t v156 = *(void *)(*(void *)(a3 + 40) + 40);
              *((void *)v154 + 3) = v156;
              uint64_t v157 = *(void *)(v156 + 32);
              uint64_t v158 = *((unsigned int *)v154 + 10);
              if (v158)
              {
                uint64_t v190 = *((void *)v154 + 4);
                uint64_t v191 = *(void *)(v157 + 40);
                uint64_t v192 = 32 * v158;
                do
                {
                  if (!*(unsigned char *)v190)
                  {
                    uint64_t v193 = *(unsigned int *)(v190 + 4);
                    if ((int)v193 >= 0) {
                      unint64_t v194 = (uint64_t *)(*(void *)(v191 + 272) + 8 * v193);
                    }
                    else {
                      unint64_t v194 = (uint64_t *)(*(void *)(v191 + 24) + 16 * (v193 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v195 = *v194;
                    if (*v194)
                    {
                      uint64_t v196 = *(void *)(v195 + 16);
                      *(void *)(v195 + 16) = v190;
                      *(void *)(v190 + 16) = v196;
                      if (*(unsigned char *)(v190 + 3))
                      {
                        *(void *)(v190 + 24) = v195;
                      }
                      else
                      {
                        *(void *)(v190 + 24) = 0;
                        unint64_t v194 = (uint64_t *)(v196 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v190 + 16) = v190;
                      *(void *)(v190 + 24) = 0;
                    }
                    *unint64_t v194 = v190;
                  }
                  v190 += 32;
                  v192 -= 32;
                }
                while (v192);
              }
              uint64_t v159 = *(void *)(v157 + 728);
              if (v159) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v159 + 24))(v159, v154);
              }
              unint64_t v160 = *v155 & 0xFFFFFFFFFFFFFFF8;
              *(void *)uint64_t v154 = v160 | *(void *)v154 & 7;
              *((void *)v154 + 1) = v155;
              *(void *)(v160 + 8) = v154;
              *uint64_t v155 = *v155 & 7 | (unint64_t)v154;
              uint64_t v161 = *(void *)(a3 + 56);
              if (v161) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v161 + 24))(v161, v154);
              }
              unsigned int v210 = (unsigned __int8 *)v151;
              unint64_t v211 = v154;
              LODWORD(v233) = 1;
              uint64_t v234 = 0;
              unint64_t v235 = v226 | ((unint64_t)(v148 == 0) << 8);
              llvm::MachineInstr::addOperand(v154, v151, (const llvm::MachineOperand *)&v233);
              LODWORD(v233) = 1;
              uint64_t v234 = 0;
              unint64_t v235 = v227;
              llvm::MachineInstr::addOperand(v154, v151, (const llvm::MachineOperand *)&v233);
              uint64_t v234 = 0;
              unint64_t v235 = 0;
              LODWORD(v233) = 0;
              HIDWORD(v233) = v216;
              uint64_t v236 = 0;
              llvm::MachineInstr::addOperand(v154, v151, (const llvm::MachineOperand *)&v233);
              uint64_t v234 = 0;
              unint64_t v235 = 0;
              LODWORD(v233) = 0;
              HIDWORD(v233) = v232;
              uint64_t v236 = 0;
              llvm::MachineInstr::addOperand(v154, v151, (const llvm::MachineOperand *)&v233);
              LODWORD(v233) = 1;
              uint64_t v234 = 0;
              unint64_t v235 = 0;
              llvm::MachineInstr::addOperand(v154, v151, (const llvm::MachineOperand *)&v233);
              uint64_t v162 = v221;
              int v163 = v154;
LABEL_289:
              llvm::MachineInstr::addMemOperand(v163, v151, v162);
              sub_1CBA318C8((uint64_t)&v210);
              llvm::MachineInstr::eraseFromParent(v213);
              return 1;
            }
            uint64_t v233 = v219;
            int v165 = sub_1CB8F1DC4((unint64_t *)&v233);
            if (v164 == 1) {
            HIDWORD(v167) = v165;
            }
            LODWORD(v167) = v165 - 8;
            int v166 = v167 >> 3;
            uint64_t v168 = qword_1CDB0E6C8[v166];
            uint64_t v169 = off_1E66A9A40[v166];
            int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
            *(void *)(*(void *)(a2 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v169;
            uint64_t v171 = *(void *)(a2 + 8);
            if (v171) {
              (*(void (**)(uint64_t))(*(void *)v171 + 24))(v171);
            }
            LODWORD(v210) = IncompleteVirtualRegister;
            LODWORD(v211) = 1;
            LODWORD(v233) = v216;
            LODWORD(v235) = 0;
            (*(void (**)(uint64_t, uint64_t, unsigned __int8 **, uint64_t, unsigned __int8 **, uint64_t, void))(*(void *)a3 + 32))(a3, 19, &v210, 1, &v233, 1, 0);
            uint64_t v151 = *(llvm::MachineFunction **)(a3 + 8);
            uint64_t v172 = *(void *)(*(void *)(a3 + 16) + 8) + 48 * v168;
            uint64_t v173 = *(unsigned __int8 **)(a3 + 32);
            unsigned int v210 = v173;
            if (v173) {
              llvm::MetadataTracking::track((uint64_t)&v210, v173, 2);
            }
            uint64_t v174 = llvm::MachineFunction::CreateMachineInstr(v151, v172, &v210, 0);
            if (v210)
            {
              int v200 = *v210;
              if ((v200 - 4) > 0x1E)
              {
                if ((v200 - 3) >= 0xFFFFFFFE) {
                  unint64_t v207 = v210;
                }
                else {
                  unint64_t v207 = 0;
                }
                if ((v200 - 3) < 0xFFFFFFFE)
                {
                  if (v200 == 3) {
                    *((void *)v210 + 1) = 0;
                  }
                  goto LABEL_283;
                }
                unint64_t v202 = (unint64_t)(v207 + 8);
              }
              else
              {
                if ((v210[1] & 0x7F) != 2 && !*((_DWORD *)v210 + 3)) {
                  goto LABEL_283;
                }
                uint64_t v201 = *((void *)v210 + 2);
                if ((v201 & 4) == 0) {
                  goto LABEL_283;
                }
                unint64_t v202 = v201 & 0xFFFFFFFFFFFFFFF8;
                if (!v202) {
                  goto LABEL_283;
                }
              }
              uint64_t v233 = (unsigned __int8 *)&v210;
              sub_1CC5FA668(v202 + 16, &v233);
            }
LABEL_283:
            uint64_t v175 = *(unint64_t **)(a3 + 48);
            uint64_t v176 = *(void *)(*(void *)(a3 + 40) + 40);
            *((void *)v174 + 3) = v176;
            uint64_t v177 = *(void *)(v176 + 32);
            uint64_t v178 = *((unsigned int *)v174 + 10);
            if (v178)
            {
              uint64_t v183 = *((void *)v174 + 4);
              uint64_t v184 = *(void *)(v177 + 40);
              uint64_t v185 = 32 * v178;
              do
              {
                if (!*(unsigned char *)v183)
                {
                  uint64_t v186 = *(unsigned int *)(v183 + 4);
                  if ((int)v186 >= 0) {
                    uint64_t v187 = (uint64_t *)(*(void *)(v184 + 272) + 8 * v186);
                  }
                  else {
                    uint64_t v187 = (uint64_t *)(*(void *)(v184 + 24) + 16 * (v186 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v188 = *v187;
                  if (*v187)
                  {
                    uint64_t v189 = *(void *)(v188 + 16);
                    *(void *)(v188 + 16) = v183;
                    *(void *)(v183 + 16) = v189;
                    if (*(unsigned char *)(v183 + 3))
                    {
                      *(void *)(v183 + 24) = v188;
                    }
                    else
                    {
                      *(void *)(v183 + 24) = 0;
                      uint64_t v187 = (uint64_t *)(v189 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v183 + 16) = v183;
                    *(void *)(v183 + 24) = 0;
                  }
                  *uint64_t v187 = v183;
                }
                v183 += 32;
                v185 -= 32;
              }
              while (v185);
            }
            uint64_t v179 = *(void *)(v177 + 728);
            if (v179) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v179 + 24))(v179, v174);
            }
            unint64_t v180 = *v175 & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t v174 = v180 | *(void *)v174 & 7;
            *((void *)v174 + 1) = v175;
            *(void *)(v180 + 8) = v174;
            *uint64_t v175 = *v175 & 7 | (unint64_t)v174;
            uint64_t v181 = *(void *)(a3 + 56);
            if (v181) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v181 + 24))(v181, v174);
            }
            unsigned int v210 = (unsigned __int8 *)v151;
            unint64_t v211 = v174;
            LODWORD(v233) = 1;
            uint64_t v234 = 0;
            unint64_t v235 = v149;
            llvm::MachineInstr::addOperand(v174, v151, (const llvm::MachineOperand *)&v233);
            LODWORD(v233) = 1;
            uint64_t v234 = 0;
            unint64_t v235 = v227;
            llvm::MachineInstr::addOperand(v174, v151, (const llvm::MachineOperand *)&v233);
            uint64_t v234 = 0;
            unint64_t v235 = 0;
            LODWORD(v233) = 0;
            HIDWORD(v233) = IncompleteVirtualRegister;
            uint64_t v236 = 0;
            llvm::MachineInstr::addOperand(v174, v151, (const llvm::MachineOperand *)&v233);
            int v182 = *(_DWORD *)(*(void *)(v146 + 32) + 48);
            LODWORD(v233) = 5;
            uint64_t v234 = 0;
            LODWORD(v235) = v182;
            llvm::MachineInstr::addOperand(v174, v151, (const llvm::MachineOperand *)&v233);
            LODWORD(v233) = 1;
            uint64_t v234 = 0;
            unint64_t v235 = v44;
            llvm::MachineInstr::addOperand(v174, v151, (const llvm::MachineOperand *)&v233);
            LODWORD(v233) = 1;
            uint64_t v234 = 0;
            unint64_t v235 = 0;
            llvm::MachineInstr::addOperand(v174, v151, (const llvm::MachineOperand *)&v233);
            uint64_t v162 = v221;
            int v163 = v174;
            goto LABEL_289;
          }
          return 0;
        }
      }
      else
      {
        uint64_t v146 = 0;
      }
      BOOL v147 = 1;
      goto LABEL_258;
    }
    return sub_1CBA5B6B8((uint64_t)&v213, a2, (void *)a3);
  }
  if (v218 == (unsigned __int8 *)4194436 || v218 == (unsigned __int8 *)8388676 || v218 == (unsigned __int8 *)8388660)
  {
    unsigned int v48 = v221;
    if (!v221) {
      return 0;
    }
    if ((unint64_t)v218 >> 19 == 16)
    {
      uint64_t v83 = 262136;
      char v84 = 1;
    }
    else
    {
      uint64_t v83 = 131064;
      char v84 = 2;
    }
    uint64_t v209 = (llvm::MachineInstr *)(((unint64_t)v218 >> v84) & v83 | 0x1000004);
    int v85 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
    unint64_t v86 = v85 & 0x7FFFFFFF;
    *(void *)(*(void *)(a2 + 24) + 16 * v86) = 4;
    unint64_t v87 = *(unsigned int *)(a2 + 432);
    if (v86 >= v87)
    {
      uint64_t v88 = *(void *)(a2 + 440);
      uint64_t v89 = v86 + 1 - v87;
      if (v86 >= *(unsigned int *)(a2 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v90 = *(_DWORD *)(a2 + 432);
      if (v89)
      {
        uint64_t v91 = (void *)(*(void *)(a2 + 424) + 8 * *(unsigned int *)(a2 + 432));
        uint64_t v92 = ~v86 + v87;
        do
          *v91++ = v88;
        while (!__CFADD__(v92++, 1));
        int v90 = *(_DWORD *)(a2 + 432);
      }
      *(_DWORD *)(a2 + 432) = v90 + v89;
    }
    *(void *)(*(void *)(a2 + 424) + 8 * v86) = v209;
    uint64_t v94 = *(void *)(a2 + 8);
    if (v94) {
      (*(void (**)(uint64_t))(*(void *)v94 + 24))(v94);
    }
    uint64_t v22 = 1;
    LODWORD(v233) = v85;
    LODWORD(v234) = 1;
    LODWORD(v222) = v215;
    LODWORD(v224) = 0;
    sub_1CC7382B0(a3);
    LODWORD(v222) = v85;
    LODWORD(v224) = 0;
    LODWORD(v233) = v217;
    LODWORD(v235) = 0;
    uint64_t v65 = (void *)a3;
    int v64 = v48;
    goto LABEL_134;
  }
  if (((unint64_t)v218 & 0xFFFFFFFFFFFFFFF9) != 0
    && (v218 & 2) != 0
    && (v218 & 4) == 0)
  {
    uint64_t v53 = *(void *)(**(void **)(a1[3] + 32) + 40);
    uint64_t v54 = ((unint64_t)v218 >> 19) & 0xFFFFFF;
    uint64_t v55 = *(void *)(v53 + 504);
    if (!v54) {
      goto LABEL_100;
    }
    unint64_t v56 = *(unsigned int *)(v53 + 512);
    uint64_t v57 = *(void *)(v53 + 504);
    if (v56)
    {
      uint64_t v57 = v55;
      unint64_t v58 = v56;
      do
      {
        unint64_t v59 = v58 >> 1;
        uint64_t v60 = v57 + 16 * (v58 >> 1);
        unsigned int v61 = *(_DWORD *)(v60 + 8);
        uint64_t v62 = v60 + 16;
        v58 += ~(v58 >> 1);
        if (v61 < v54) {
          uint64_t v57 = v62;
        }
        else {
          unint64_t v58 = v59;
        }
      }
      while (v58);
    }
    if (v57 == v55 + 16 * v56 || *(_DWORD *)(v57 + 8) != v54) {
LABEL_100:
    }
      uint64_t v57 = v55;
    uint64_t v22 = 1;
    uint64_t v233 = (unsigned __int8 *)(((((unint64_t)((*(_DWORD *)(v57 + 4) + 7) & 0xFFFFFFF8) >> 3) & 0x1FFFFFFF) << 6) | 1);
    LODWORD(v234) = 0;
    LODWORD(v222) = v215;
    LODWORD(v224) = 0;
    sub_1CC7382B0(a3);
    LODWORD(v222) = *(_DWORD *)(*(void *)(v63 + 32) + 4);
    LODWORD(v224) = 0;
    LODWORD(v233) = v217;
    LODWORD(v235) = 0;
    int v64 = v221;
    uint64_t v65 = (void *)a3;
LABEL_134:
    sub_1CC737D1C(v65, (int *)&v222, (int *)&v233, v64);
    uint64_t v82 = (llvm::MachineInstr *)a1;
LABEL_135:
    llvm::MachineInstr::eraseFromParent(v82);
    return v22;
  }
  char v66 = 35;
  if ((v220 & 4) == 0) {
    char v66 = 19;
  }
  if (((v220 >> v66) & 0xFFFFFF) != 0x40)
  {
    uint64_t v102 = *(void *)(*(void *)(a1[3] + 32) + 16);
    uint64_t v103 = (*(uint64_t (**)(uint64_t))(*(void *)v102 + 168))(v102);
    if (sub_1CBA1C1AC(v103, (uint64_t)a1, a2, (llvm::IntegerType *****)a3)) {
      return 1;
    }
    goto LABEL_33;
  }
  sub_1CBA315DC((uint64_t)&v210, v217, a2, 1);
  if (!v212) {
    return 0;
  }
  char v67 = v213;
  unsigned int v68 = sub_1CD1117B0((llvm::GlobalValue *)v210, (uint64_t)v211, *(void *)(*(void *)(*((void *)v213 + 3) + 32) + 344), 0);
  unint64_t v69 = v218;
  if (v218 != v219)
  {
    if (!sub_1CBA5D7C0((uint64_t)&v213, (void *)a3)) {
      return 0;
    }
    unint64_t v69 = v219;
  }
  if (v69 == (unsigned __int8 *)257 || v69 == (unsigned __int8 *)129)
  {
    unsigned int v70 = v216;
    uint64_t v71 = *(llvm::MachineFunction **)(a3 + 8);
    uint64_t v72 = *(void *)(*(void *)(a3 + 16) + 8) + 17136;
    unint64_t v73 = *(unsigned __int8 **)(a3 + 32);
    uint64_t v233 = v73;
    if (v73) {
      llvm::MetadataTracking::track((uint64_t)&v233, v73, 2);
    }
    uint64_t v74 = llvm::MachineFunction::CreateMachineInstr(v71, v72, &v233, 0);
    if (!v233) {
      goto LABEL_114;
    }
    int v203 = *v233;
    if ((v203 - 4) > 0x1E)
    {
      if ((v203 - 3) >= 0xFFFFFFFE) {
        uint64_t v208 = v233;
      }
      else {
        uint64_t v208 = 0;
      }
      if ((v203 - 3) < 0xFFFFFFFE)
      {
        if (v203 == 3) {
          *((void *)v233 + 1) = 0;
        }
        goto LABEL_114;
      }
      unint64_t v205 = (unint64_t)(v208 + 8);
    }
    else
    {
      if ((v233[1] & 0x7F) != 2 && !*((_DWORD *)v233 + 3)) {
        goto LABEL_114;
      }
      uint64_t v204 = *((void *)v233 + 2);
      if ((v204 & 4) == 0) {
        goto LABEL_114;
      }
      unint64_t v205 = v204 & 0xFFFFFFFFFFFFFFF8;
      if (!v205) {
        goto LABEL_114;
      }
    }
    unint64_t v222 = &v233;
    sub_1CC5FA668(v205 + 16, &v222);
LABEL_114:
    unint64_t v75 = *(unint64_t **)(a3 + 48);
    uint64_t v76 = *(void *)(*(void *)(a3 + 40) + 40);
    *((void *)v74 + 3) = v76;
    uint64_t v77 = *(void *)(v76 + 32);
    uint64_t v78 = *((unsigned int *)v74 + 10);
    if (v78)
    {
      uint64_t v137 = *((void *)v74 + 4);
      uint64_t v138 = *(void *)(v77 + 40);
      uint64_t v139 = 32 * v78;
      do
      {
        if (!*(unsigned char *)v137)
        {
          uint64_t v140 = *(unsigned int *)(v137 + 4);
          if ((int)v140 >= 0) {
            uint64_t v141 = (uint64_t *)(*(void *)(v138 + 272) + 8 * v140);
          }
          else {
            uint64_t v141 = (uint64_t *)(*(void *)(v138 + 24) + 16 * (v140 & 0x7FFFFFFF) + 8);
          }
          uint64_t v142 = *v141;
          if (*v141)
          {
            uint64_t v143 = *(void *)(v142 + 16);
            *(void *)(v142 + 16) = v137;
            *(void *)(v137 + 16) = v143;
            if (*(unsigned char *)(v137 + 3))
            {
              *(void *)(v137 + 24) = v142;
            }
            else
            {
              *(void *)(v137 + 24) = 0;
              uint64_t v141 = (uint64_t *)(v143 + 24);
            }
          }
          else
          {
            *(void *)(v137 + 16) = v137;
            *(void *)(v137 + 24) = 0;
          }
          uint64_t *v141 = v137;
        }
        v137 += 32;
        v139 -= 32;
      }
      while (v139);
    }
    uint64_t v79 = *(void *)(v77 + 728);
    if (v79) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v79 + 24))(v79, v74);
    }
    unint64_t v80 = *v75 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v74 = v80 | *(void *)v74 & 7;
    *((void *)v74 + 1) = v75;
    *(void *)(v80 + 8) = v74;
    *unint64_t v75 = *v75 & 7 | (unint64_t)v74;
    uint64_t v81 = *(void *)(a3 + 56);
    if (v81) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v81 + 24))(v81, v74);
    }
    uint64_t v223 = 0;
    uint64_t v224 = 0;
    LODWORD(v222) = 0;
    HIDWORD(v222) = v70;
    uint64_t v225 = 0;
    llvm::MachineInstr::addOperand(v74, v71, (const llvm::MachineOperand *)&v222);
    uint64_t v22 = 1;
    LODWORD(v222) = 1;
    uint64_t v223 = 0;
    uint64_t v224 = v68;
    llvm::MachineInstr::addOperand(v74, v71, (const llvm::MachineOperand *)&v222);
    uint64_t v82 = v67;
    goto LABEL_135;
  }
  uint64_t v22 = 0;
  if (((unint64_t)v69 & 0xFFFFFFFFFFFFFFF9) == 0 || (v69 & 4) == 0) {
    return v22;
  }
  char v104 = 3;
  if ((v69 & 1) == 0) {
    char v104 = 19;
  }
  unint64_t v105 = (unint64_t)v69 >> v104;
  if ((v69 & 2) != 0) {
    unint64_t v106 = ((unint64_t)v69 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v105) | 2;
  }
  else {
    unint64_t v106 = (unint64_t)v69 & 0x8000000000000000 | (8 * v105) | 1;
  }
  if (v106 != 257 && v106 != 129) {
    return 0;
  }
  if ((v69 & 2) != 0) {
    unint64_t v107 = ((unint64_t)v69 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v105) | 2;
  }
  else {
    unint64_t v107 = (unint64_t)v69 & 0x8000000000000000 | (8 * v105) | 1;
  }
  unint64_t v231 = v107;
  uint64_t v233 = (unsigned __int8 *)&v235;
  uint64_t v234 = 0x400000000;
  if ((sub_1CBA5B01C(v216, a2, a3, (uint64_t)&v233) & 1) == 0)
  {
    if (v233 != (unsigned __int8 *)&v235) {
      free(v233);
    }
    return 0;
  }
  uint64_t v109 = 0;
  uint64_t v110 = 0x800000000000000;
  if ((v69 & 2) == 0) {
    uint64_t v110 = 0x8000000000000;
  }
  uint64_t v111 = v110 & (unint64_t)v69;
  uint64_t v112 = (unsigned __int16)((unint64_t)v69 >> 3);
  if ((v110 & (unint64_t)v69) != 0) {
LABEL_178:
  }
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v108);
  while (v109 != v112)
  {
    int v113 = *(_DWORD *)&v233[4 * v109];
    uint64_t v114 = *(llvm::MachineFunction **)(a3 + 8);
    uint64_t v115 = *(void *)(*(void *)(a3 + 16) + 8);
    uint64_t v116 = *(unsigned __int8 **)(a3 + 32);
    uint64_t v232 = v116;
    if (v116) {
      llvm::MetadataTracking::track((uint64_t)&v232, v116, 2);
    }
    unint64_t v117 = llvm::MachineFunction::CreateMachineInstr(v114, v115 + 17136, &v232, 0);
    if (!v232) {
      goto LABEL_183;
    }
    int v133 = *v232;
    if ((v133 - 4) > 0x1E)
    {
      if ((v133 - 3) >= 0xFFFFFFFE) {
        uint64_t v136 = v232;
      }
      else {
        uint64_t v136 = 0;
      }
      if ((v133 - 3) < 0xFFFFFFFE)
      {
        if (v133 == 3) {
          *((void *)v232 + 1) = 0;
        }
        goto LABEL_183;
      }
      unint64_t v135 = (unint64_t)(v136 + 8);
    }
    else
    {
      if ((v232[1] & 0x7F) != 2 && !*((_DWORD *)v232 + 3)) {
        goto LABEL_183;
      }
      uint64_t v134 = *((void *)v232 + 2);
      if ((v134 & 4) == 0) {
        goto LABEL_183;
      }
      unint64_t v135 = v134 & 0xFFFFFFFFFFFFFFF8;
      if (!v135) {
        goto LABEL_183;
      }
    }
    unint64_t v222 = &v232;
    sub_1CC5FA668(v135 + 16, &v222);
LABEL_183:
    uint64_t v118 = *(unint64_t **)(a3 + 48);
    uint64_t v119 = *(void *)(*(void *)(a3 + 40) + 40);
    *((void *)v117 + 3) = v119;
    uint64_t v120 = *(void *)(v119 + 32);
    uint64_t v121 = *((unsigned int *)v117 + 10);
    if (v121)
    {
      uint64_t v126 = *((void *)v117 + 4);
      uint64_t v127 = *(void *)(v120 + 40);
      uint64_t v128 = 32 * v121;
      do
      {
        if (!*(unsigned char *)v126)
        {
          uint64_t v129 = *(unsigned int *)(v126 + 4);
          if ((int)v129 >= 0) {
            unint64_t v130 = (uint64_t *)(*(void *)(v127 + 272) + 8 * v129);
          }
          else {
            unint64_t v130 = (uint64_t *)(*(void *)(v127 + 24) + 16 * (v129 & 0x7FFFFFFF) + 8);
          }
          uint64_t v131 = *v130;
          if (*v130)
          {
            uint64_t v132 = *(void *)(v131 + 16);
            *(void *)(v131 + 16) = v126;
            *(void *)(v126 + 16) = v132;
            if (*(unsigned char *)(v126 + 3))
            {
              *(void *)(v126 + 24) = v131;
            }
            else
            {
              *(void *)(v126 + 24) = 0;
              unint64_t v130 = (uint64_t *)(v132 + 24);
            }
          }
          else
          {
            *(void *)(v126 + 16) = v126;
            *(void *)(v126 + 24) = 0;
          }
          *unint64_t v130 = v126;
        }
        v126 += 32;
        v128 -= 32;
      }
      while (v128);
    }
    uint64_t v122 = *(void *)(v120 + 728);
    if (v122) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v122 + 24))(v122, v117);
    }
    unint64_t v123 = *v118 & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v117 = v123 | *(void *)v117 & 7;
    *((void *)v117 + 1) = v118;
    *(void *)(v123 + 8) = v117;
    *uint64_t v118 = *v118 & 7 | (unint64_t)v117;
    uint64_t v124 = *(void *)(a3 + 56);
    if (v124) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v124 + 24))(v124, v117);
    }
    uint64_t v223 = 0;
    LODWORD(v222) = 0;
    HIDWORD(v222) = v113;
    uint64_t v224 = 0;
    uint64_t v225 = 0;
    llvm::MachineInstr::addOperand(v117, v114, (const llvm::MachineOperand *)&v222);
    LODWORD(v222) = 1;
    uint64_t v223 = 0;
    uint64_t v224 = v68;
    llvm::MachineInstr::addOperand(v117, v114, (const llvm::MachineOperand *)&v222);
    unint64_t v125 = sub_1CB8F1DC4(&v231);
    if (v108 == 1) {
    v68 += v125 >> 3;
    }
    ++v109;
    if (v111) {
      goto LABEL_178;
    }
  }
  llvm::MachineInstr::eraseFromParent(v67);
  if (v233 != (unsigned __int8 *)&v235) {
    free(v233);
  }
  return 1;
}

uint64_t sub_1CBA35C44(unsigned int a1, uint64_t a2, int a3)
{
  LODWORD(v3) = a3;
  while (1)
  {
    uint64_t v6 = (uint64_t *)((a1 & 0x80000000) != 0
                   ? *(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8
                   : *(void *)(a2 + 272) + 8 * a1);
    uint64_t v7 = *v6;
    if (!v7) {
      return 0;
    }
    if ((*(unsigned char *)(v7 + 3) & 1) == 0)
    {
      uint64_t v7 = *(void *)(v7 + 24);
      if (!v7 || (*(unsigned char *)(v7 + 3) & 1) == 0) {
        return 0;
      }
    }
    uint64_t result = 0;
    if (v3 > 3) {
      return result;
    }
    uint64_t v9 = *(void *)(v7 + 8);
    if (!v9) {
      return result;
    }
    if (!v3)
    {
      uint64_t result = sub_1CBA6073C(a1, a2, 0);
      if (!result) {
        return result;
      }
    }
    if ((a1 & 0x80000000) != 0) {
      uint64_t v10 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v10 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
    }
    uint64_t v11 = *v10;
    if ((*(unsigned char *)(v11 + 3) & 1) == 0) {
      uint64_t v11 = *(void *)(v11 + 24);
    }
    uint64_t v12 = *(void *)(v11 + 8);
    if (**(_WORD **)(v12 + 16) == 121)
    {
      uint64_t v18 = *(void *)(*(void *)(v12 + 32) + 48);
      if (v18)
      {
        if (*(_UNKNOWN **)(v18 + 32) == &unk_1CFB2E344)
        {
          char v19 = *(unsigned char *)(*(void *)(v18 + 40) + 28);
          if ((v19 & 8) != 0) {
            goto LABEL_15;
          }
        }
        else
        {
          char v19 = *(unsigned char *)(v18 + 52);
          if ((v19 & 8) != 0) {
            goto LABEL_15;
          }
        }
        if ((v19 & 7) != 3 && !sub_1CB8456FC(v18 + 24)) {
          return 1;
        }
      }
    }
LABEL_15:
    if ((a1 & 0x80000000) != 0) {
      int v13 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
    }
    else {
      int v13 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
    }
    uint64_t v14 = *v13;
    if ((*(unsigned char *)(v14 + 3) & 1) == 0) {
      uint64_t v14 = *(void *)(v14 + 24);
    }
    uint64_t v15 = *(void *)(v14 + 8);
    if (**(_WORD **)(v15 + 16) == 121)
    {
      uint64_t v20 = *(void *)(*(void *)(v15 + 32) + 48);
      if (v20)
      {
        if (*(_UNKNOWN **)(v20 + 32) == &unk_1CFB2E344)
        {
          char v21 = *(unsigned char *)(*(void *)(v20 + 40) + 28);
          if ((v21 & 8) != 0) {
            goto LABEL_20;
          }
        }
        else
        {
          char v21 = *(unsigned char *)(v20 + 52);
          if ((v21 & 8) != 0) {
            goto LABEL_20;
          }
        }
        if ((v21 & 7) != 3 && !sub_1CB8456FC(v20 + 24)) {
          return 1;
        }
      }
    }
LABEL_20:
    int v16 = **(unsigned __int16 **)(v9 + 16);
    if (v16 == 166)
    {
      uint64_t v17 = (unsigned int *)(*(void *)(v9 + 32) + 100);
      LODWORD(v3) = v3 + 1;
    }
    else
    {
      if (v16 != 163) {
        return 0;
      }
      uint64_t v3 = (v3 + 1);
      if (sub_1CBA35C44(*(unsigned int *)(*(void *)(v9 + 32) + 36), a2, v3)) {
        return 1;
      }
      uint64_t v17 = (unsigned int *)(*(void *)(v9 + 32) + 68);
    }
    a1 = *v17;
  }
}

#error "1CBA35E80: too big function (funcsize=0)"

uint64_t sub_1CBA54B80(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  v46[1] = *MEMORY[0x1E4F143B8];
  if (**(unsigned __int16 **)(a1 + 16) - 45 <= 1)
  {
    int v6 = *(_DWORD *)(*(void *)(a1 + 32) + 4);
    if (v6 < 0)
    {
      uint64_t v7 = v6 & 0x7FFFFFFF;
      if (v7 < *(_DWORD *)(a2 + 432) && *(void *)(*(void *)(a2 + 424) + 8 * v7) == 513)
      {
        (*(void (**)(void, void))(**(void **)(*(void *)(*(void *)(a1 + 24) + 32) + 8) + 16))(*(void *)(*(void *)(*(void *)(a1 + 24) + 32) + 8), **(void **)(*(void *)(a1 + 24) + 32));
        uint64_t v8 = **(unsigned __int16 **)(a1 + 16);
        a3[5] = *(unsigned __int8 **)(a1 + 24);
        a3[6] = (unsigned __int8 *)a1;
        uint64_t v9 = (unsigned __int8 **)(a1 + 56);
        uint64_t v10 = a3 + 4;
        if ((unsigned __int8 **)(a1 + 56) == a3 + 4)
        {
LABEL_9:
          v45[0] = v46;
          v45[1] = (void *)0x200000000;
          v43[0] = &v44;
          v43[1] = (void *)0x200000000;
          unint64_t v40 = &v42;
          uint64_t v41 = 0x200000000;
          if (sub_1CBA60A7C(*(_DWORD *)(*(void *)(a1 + 32) + 36), a2, (uint64_t)a3, (void *)0x101, (uint64_t)v45)
            && sub_1CBA60A7C(*(_DWORD *)(*(void *)(a1 + 32) + 68), a2, (uint64_t)a3, (void *)0x101, (uint64_t)v43))
          {
            if (v8 == 45) {
              uint64_t v13 = 137;
            }
            else {
              uint64_t v13 = 139;
            }
            uint64_t v36 = 257;
            int v37 = 0;
            uint64_t v38 = 9;
            int v39 = 0;
            LODWORD(v30) = *(_DWORD *)v45[0];
            int v32 = 0;
            LODWORD(v33) = *(_DWORD *)v43[0];
            int v35 = 0;
            (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))*a3 + 4))(a3, v13, &v36, 2, &v30, 2, 0);
            uint64_t v15 = v14;
            if (v41 >= HIDWORD(v41)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v40 + v41) = *(_DWORD *)(*(void *)(v14 + 32) + 4);
            LODWORD(v41) = v41 + 1;
            uint64_t v36 = 257;
            int v37 = 0;
            LODWORD(v30) = *((_DWORD *)v45[0] + 1);
            int v32 = 0;
            LODWORD(v33) = *((_DWORD *)v43[0] + 1);
            int v35 = 0;
            uint64_t v16 = 1;
            uint64_t v17 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))*a3
                   + 4))(a3, v8, &v36, 1, &v30, 2, 0);
            uint64_t v28 = 257;
            int v29 = 0;
            uint64_t v30 = (void *)v17;
            uint64_t v31 = v18;
            int v32 = 1;
            unint64_t v26 = 257;
            int v27 = 0;
            LODWORD(v36) = *(_DWORD *)(*(void *)(v15 + 32) + 36);
            LODWORD(v38) = 0;
            uint64_t v33 = sub_1CC738034(a3, 126, &v26, (int *)&v36);
            uint64_t v34 = v19;
            int v35 = 1;
            (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))*a3 + 4))(a3, v8, &v28, 1, &v30, 2, 0);
            if (v41 >= HIDWORD(v41)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v40 + v41) = *(_DWORD *)(*(void *)(v20 + 32) + 4);
            LODWORD(v41) = v41 + 1;
            LODWORD(v30) = *(_DWORD *)(*(void *)(a1 + 32) + 4);
            LODWORD(v31) = 1;
            sub_1CC73661C((uint64_t)a3, (uint64_t)&v30, (int *)v40, v41);
            llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
          }
          else
          {
            uint64_t v16 = 0;
          }
          if (v40 != &v42) {
            free(v40);
          }
          if (v43[0] != &v44) {
            free(v43[0]);
          }
          if (v45[0] != v46) {
            free(v45[0]);
          }
          return v16;
        }
        uint64_t v11 = *v10;
        if (!*v10)
        {
LABEL_7:
          uint64_t v12 = *v9;
          *uint64_t v10 = *v9;
          if (v12) {
            llvm::MetadataTracking::track((uint64_t)(a3 + 4), v12, 2);
          }
          goto LABEL_9;
        }
        int v22 = *v11;
        if ((v22 - 4) > 0x1E)
        {
          if ((v22 - 3) >= 0xFFFFFFFE) {
            uint64_t v25 = *v10;
          }
          else {
            uint64_t v25 = 0;
          }
          if ((v22 - 3) < 0xFFFFFFFE)
          {
            if (v22 == 3) {
              *((void *)v11 + 1) = 0;
            }
            goto LABEL_7;
          }
          unint64_t v24 = (unint64_t)(v25 + 8);
        }
        else
        {
          if ((v11[1] & 0x7F) != 2 && !*((_DWORD *)v11 + 3)) {
            goto LABEL_7;
          }
          uint64_t v23 = *((void *)v11 + 2);
          if ((v23 & 4) == 0) {
            goto LABEL_7;
          }
          unint64_t v24 = v23 & 0xFFFFFFFFFFFFFFF8;
          if (!v24) {
            goto LABEL_7;
          }
        }
        uint64_t v30 = a3 + 4;
        sub_1CC5FA668(v24 + 16, &v30);
        goto LABEL_7;
      }
    }
  }

  return sub_1CBA55058(a1, (unsigned __int8 *)a2, a3, 2u);
}

uint64_t sub_1CBA55058(uint64_t a1, unsigned __int8 *a2, unsigned __int8 **a3, unsigned int a4)
{
  uint64_t v6 = (uint64_t)a2;
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  a3[5] = *(unsigned __int8 **)(a1 + 24);
  a3[6] = (unsigned __int8 *)a1;
  uint64_t v8 = (unsigned __int8 **)(a1 + 56);
  uint64_t v9 = a3 + 4;
  if ((unsigned __int8 **)(a1 + 56) == a3 + 4) {
    goto LABEL_5;
  }
  uint64_t v10 = *v9;
  if (*v9)
  {
    int v49 = *v10;
    if ((v49 - 4) > 0x1E)
    {
      if ((v49 - 3) >= 0xFFFFFFFE) {
        unint64_t v52 = *v9;
      }
      else {
        unint64_t v52 = 0;
      }
      if ((v49 - 3) < 0xFFFFFFFE)
      {
        if (v49 == 3) {
          *((void *)v10 + 1) = 0;
        }
        goto LABEL_3;
      }
      unint64_t v51 = (unint64_t)(v52 + 8);
    }
    else
    {
      if ((v10[1] & 0x7F) != 2 && !*((_DWORD *)v10 + 3)) {
        goto LABEL_3;
      }
      uint64_t v50 = *((void *)v10 + 2);
      if ((v50 & 4) == 0) {
        goto LABEL_3;
      }
      unint64_t v51 = v50 & 0xFFFFFFFFFFFFFFF8;
      if (!v51) {
        goto LABEL_3;
      }
    }
    uint64_t v62 = a3 + 4;
    sub_1CC5FA668(v51 + 16, &v62);
  }
LABEL_3:
  a2 = *v8;
  unsigned __int8 *v9 = *v8;
  if (a2) {
    llvm::MetadataTracking::track((uint64_t)v9, a2, 2);
  }
LABEL_5:
  uint64_t v11 = *(void *)(a1 + 32);
  int v12 = *(_DWORD *)(v11 + 4);
  int v53 = v12;
  if (v12 < 0 && (v12 & 0x7FFFFFFFu) < *(_DWORD *)(v6 + 432))
  {
    unint64_t v13 = *(void *)(*(void *)(v6 + 424) + 8 * (v12 & 0x7FFFFFFF));
    if ((v13 & 2) != 0)
    {
      char v14 = 35;
      char v15 = 19;
      if ((v13 & 4) == 0) {
        char v14 = 19;
      }
      unint64_t v16 = v13 >> v14;
      if ((v13 & 4) == 0) {
        char v15 = 3;
      }
      if (v13) {
        char v15 = 3;
      }
      unint64_t v17 = (8 * (unsigned __int16)(v13 >> v15)) & 0xFFFFF8000007FFFFLL | ((v16 & 0xFFFFFF) << 19) | 2;
      uint64_t v18 = 0x800000000000000;
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  char v19 = 3;
  if ((v13 & 1) == 0) {
    char v19 = 19;
  }
  unint64_t v17 = v13 & 0x8000000000000000 | (8 * (v13 >> v19)) | 1;
  uint64_t v18 = 0x8000000000000;
LABEL_19:
  unint64_t v59 = v61;
  uint64_t v60 = 0x400000000;
  if ((v13 & v18) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    uint64_t v11 = *(void *)(a1 + 32);
  }
  uint64_t v20 = *(void *)(a1 + 16);
  unsigned int v21 = *(unsigned __int8 *)(v20 + 4);
  uint64_t v22 = *(unsigned int *)(a1 + 40);
  if ((*(unsigned char *)(v20 + 8) & 2) != 0)
  {
    if (v22 == v21) {
      goto LABEL_29;
    }
    unsigned int v23 = *(unsigned __int8 *)(v20 + 4);
    do
    {
      int v48 = *(_DWORD *)(v11 + 32 * v21);
      if ((v48 & 0x10000FF) != 0x1000000) {
        break;
      }
      v23 += (v48 & 0x2000000) == 0;
      if (v22 - 1 == v21) {
        break;
      }
      ++v21;
    }
    while ((v48 & 0x2000000) == 0);
  }
  else
  {
    unsigned int v23 = *(unsigned __int8 *)(v20 + 4);
  }
  if (v23 == v22)
  {
LABEL_29:
    unint64_t v56 = v58;
    uint64_t v57 = 0x400000000;
    if ((unsigned __int16)(v13 >> 3))
    {
      uint64_t v27 = 0;
      uint64_t v28 = a4;
      do
      {
        uint64_t v29 = 0;
        unsigned int v30 = 0;
        uint64_t v62 = v64;
        uint64_t v63 = 0x400000000;
        uint64_t v31 = v28;
        do
        {
          LODWORD(v54) = *(_DWORD *)(*(void *)((char *)v59 + v29) + 4 * v27);
          LODWORD(v55) = 0;
          if (v30 >= HIDWORD(v63))
          {
            if (v62 > &v54 || (char *)v62 + 24 * v30 <= (char *)&v54) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v32 = (char *)v62 + 24 * v63;
          long long v33 = v54;
          *((void *)v32 + 2) = v55;
          *(_OWORD *)int v32 = v33;
          unsigned int v30 = v63 + 1;
          LODWORD(v63) = v63 + 1;
          v29 += 32;
          --v31;
        }
        while (v31);
        uint64_t v34 = **(unsigned __int16 **)(a1 + 16);
        *(void *)&long long v54 = v17;
        DWORD2(v54) = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, long long *, uint64_t, void *))*a3 + 4))(a3, v34, &v54, 1, v62);
        if (v57 >= (unint64_t)HIDWORD(v57)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v56 + v57) = *(_DWORD *)(*(void *)(v35 + 32) + 4);
        LODWORD(v57) = v57 + 1;
        if (v62 != v64) {
          free(v62);
        }
        ++v27;
      }
      while (v27 != (unsigned __int16)(v13 >> 3));
      uint64_t v36 = (int *)v56;
      int v37 = v57;
      LODWORD(v54) = v53;
      DWORD2(v54) = 1;
      uint64_t v62 = v64;
      uint64_t v63 = 0x800000000;
      if (v57 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v57)
      {
        uint64_t v38 = 0;
        uint64_t v39 = 4 * v57;
        do
        {
          int v40 = *v36++;
          uint64_t v41 = &v64[v38];
          *uint64_t v41 = v40;
          v41[4] = 0;
          v38 += 24;
          v39 -= 4;
        }
        while (v39);
        int v42 = v63;
      }
      else
      {
        int v42 = 0;
      }
    }
    else
    {
      int v37 = 0;
      int v42 = 0;
      LODWORD(v54) = v53;
      DWORD2(v54) = 1;
      uint64_t v62 = v64;
      uint64_t v63 = 0x800000000;
    }
    LODWORD(v63) = v42 + v37;
    (*((void (**)(unsigned __int8 **, uint64_t, long long *, uint64_t))*a3 + 4))(a3, 77, &v54, 1);
    if (v62 != v64) {
      free(v62);
    }
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
    if (v56 != v58) {
      free(v56);
    }
    uint64_t v43 = 1;
    goto LABEL_59;
  }
  uint64_t v24 = 32 * v22 - 32 * v23;
  uint64_t v25 = (unsigned int *)(v11 + 32 * v23 + 4);
  while (1)
  {
    uint64_t v62 = v64;
    uint64_t v63 = 0x400000000;
    unsigned int v26 = *v25;
    v25 += 8;
    if ((sub_1CBA5B01C(v26, v6, (uint64_t)a3, (uint64_t)&v62) & 1) == 0) {
      break;
    }
    sub_1CBA60F10((uint64_t)&v59, (unint64_t)&v62);
    if (v62 != v64) {
      free(v62);
    }
    v24 -= 32;
    if (!v24) {
      goto LABEL_29;
    }
  }
  if (v62 != v64) {
    free(v62);
  }
  uint64_t v43 = 0;
LABEL_59:
  uint64_t v44 = (char *)v59;
  if (v60)
  {
    uint64_t v45 = 32 * v60;
    do
    {
      uint64_t v46 = *(char **)&v44[v45 - 32];
      if (&v44[v45 - 16] != v46) {
        free(v46);
      }
      v45 -= 32;
    }
    while (v45);
    uint64_t v44 = (char *)v59;
  }
  if (v44 != v61) {
    free(v44);
  }
  return v43;
}

void sub_1CBA5568C(unsigned __int8 **a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  a3[5] = a1[3];
  a3[6] = (unsigned __int8 *)a1;
  uint64_t v6 = a1 + 7;
  uint64_t v7 = a3 + 4;
  if (a1 + 7 == a3 + 4) {
    goto LABEL_5;
  }
  uint64_t v8 = *v7;
  if (*v7)
  {
    int v26 = *v8;
    if ((v26 - 4) > 0x1E)
    {
      if ((v26 - 3) >= 0xFFFFFFFE) {
        uint64_t v29 = *v7;
      }
      else {
        uint64_t v29 = 0;
      }
      if ((v26 - 3) < 0xFFFFFFFE)
      {
        if (v26 == 3) {
          *((void *)v8 + 1) = 0;
        }
        goto LABEL_3;
      }
      unint64_t v28 = (unint64_t)(v29 + 8);
    }
    else
    {
      if ((v8[1] & 0x7F) != 2 && !*((_DWORD *)v8 + 3)) {
        goto LABEL_3;
      }
      uint64_t v27 = *((void *)v8 + 2);
      if ((v27 & 4) == 0) {
        goto LABEL_3;
      }
      unint64_t v28 = v27 & 0xFFFFFFFFFFFFFFF8;
      if (!v28) {
        goto LABEL_3;
      }
    }
    uint64_t v38 = a3 + 4;
    sub_1CC5FA668(v28 + 16, &v38);
  }
LABEL_3:
  uint64_t v9 = *v6;
  const char *v7 = *v6;
  if (v9) {
    llvm::MetadataTracking::track((uint64_t)v7, v9, 2);
  }
LABEL_5:
  uint64_t v10 = a1[4];
  int v11 = *((_DWORD *)v10 + 1);
  int v12 = *((_DWORD *)v10 + 17);
  int v13 = *((_DWORD *)v10 + 25);
  int v14 = *((_DWORD *)v10 + 33);
  int v31 = *((_DWORD *)v10 + 9);
  if (v11 < 0 && (v11 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432)) {
    unint64_t v15 = *(void *)(*(void *)(a2 + 424) + 8 * (v11 & 0x7FFFFFFF));
  }
  else {
    unint64_t v15 = 0;
  }
  uint64_t v34 = v15;
  int v35 = 0;
  LODWORD(v38) = v12;
  int v40 = 0;
  LODWORD(v41) = v13;
  int v43 = 0;
  int v30 = v13;
  uint64_t v16 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))*a3 + 4))(a3, 45, &v34, 1, &v38, 2, 0);
  uint64_t v18 = v17;
  unint64_t v32 = v15;
  int v33 = 0;
  LODWORD(v34) = v14;
  int v36 = 0;
  uint64_t v19 = sub_1CC738034(a3, 124, &v32, (int *)&v34);
  v37[0] = v11;
  _DWORD v37[2] = 1;
  uint64_t v38 = (void *)v16;
  uint64_t v39 = v18;
  int v40 = 1;
  uint64_t v41 = v19;
  uint64_t v42 = v20;
  int v43 = 1;
  (*((void (**)(unsigned __int8 **, uint64_t, _DWORD *, uint64_t, void **, uint64_t, void))*a3 + 4))(a3, 45, v37, 1, &v38, 2, 0);
  uint64_t v34 = 9;
  int v35 = 0;
  LODWORD(v38) = 40;
  int v40 = 2;
  LODWORD(v41) = v11;
  int v43 = 0;
  int v44 = v12;
  int v45 = 0;
  uint64_t v21 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))*a3 + 4))(a3, 134, &v34, 1, &v38, 3, 0);
  uint64_t v23 = v22;
  uint64_t v34 = 9;
  int v35 = 0;
  LODWORD(v38) = 40;
  int v40 = 2;
  LODWORD(v41) = v11;
  int v43 = 0;
  int v44 = v30;
  int v45 = 0;
  uint64_t v24 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))*a3 + 4))(a3, 134, &v34, 1, &v38, 3, 0);
  LODWORD(v34) = v31;
  int v35 = 1;
  uint64_t v38 = (void *)v21;
  uint64_t v39 = v23;
  int v40 = 1;
  uint64_t v41 = v24;
  uint64_t v42 = v25;
  int v43 = 1;
  (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))*a3 + 4))(a3, 66, &v34, 1, &v38, 2, 0);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
}

void sub_1CBA55A18(unsigned __int8 **a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  a3[5] = a1[3];
  a3[6] = (unsigned __int8 *)a1;
  uint64_t v6 = a1 + 7;
  uint64_t v7 = a3 + 4;
  if (a1 + 7 == a3 + 4) {
    goto LABEL_5;
  }
  uint64_t v8 = *v7;
  if (*v7)
  {
    int v26 = *v8;
    if ((v26 - 4) > 0x1E)
    {
      if ((v26 - 3) >= 0xFFFFFFFE) {
        uint64_t v29 = *v7;
      }
      else {
        uint64_t v29 = 0;
      }
      if ((v26 - 3) < 0xFFFFFFFE)
      {
        if (v26 == 3) {
          *((void *)v8 + 1) = 0;
        }
        goto LABEL_3;
      }
      unint64_t v28 = (unint64_t)(v29 + 8);
    }
    else
    {
      if ((v8[1] & 0x7F) != 2 && !*((_DWORD *)v8 + 3)) {
        goto LABEL_3;
      }
      uint64_t v27 = *((void *)v8 + 2);
      if ((v27 & 4) == 0) {
        goto LABEL_3;
      }
      unint64_t v28 = v27 & 0xFFFFFFFFFFFFFFF8;
      if (!v28) {
        goto LABEL_3;
      }
    }
    uint64_t v38 = a3 + 4;
    sub_1CC5FA668(v28 + 16, &v38);
  }
LABEL_3:
  uint64_t v9 = *v6;
  const char *v7 = *v6;
  if (v9) {
    llvm::MetadataTracking::track((uint64_t)v7, v9, 2);
  }
LABEL_5:
  uint64_t v10 = a1[4];
  int v11 = *((_DWORD *)v10 + 1);
  int v12 = *((_DWORD *)v10 + 17);
  int v13 = *((_DWORD *)v10 + 25);
  int v14 = *((_DWORD *)v10 + 33);
  int v31 = *((_DWORD *)v10 + 9);
  if (v11 < 0 && (v11 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432)) {
    unint64_t v15 = *(void *)(*(void *)(a2 + 424) + 8 * (v11 & 0x7FFFFFFF));
  }
  else {
    unint64_t v15 = 0;
  }
  uint64_t v34 = v15;
  int v35 = 0;
  LODWORD(v38) = v12;
  int v40 = 0;
  LODWORD(v41) = v13;
  int v43 = 0;
  int v30 = v13;
  uint64_t v16 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))*a3 + 4))(a3, 45, &v34, 1, &v38, 2, 0);
  uint64_t v18 = v17;
  unint64_t v32 = v15;
  int v33 = 0;
  LODWORD(v34) = v14;
  int v36 = 0;
  uint64_t v19 = sub_1CC738034(a3, 126, &v32, (int *)&v34);
  v37[0] = v11;
  _DWORD v37[2] = 1;
  uint64_t v38 = (void *)v16;
  uint64_t v39 = v18;
  int v40 = 1;
  uint64_t v41 = v19;
  uint64_t v42 = v20;
  int v43 = 1;
  (*((void (**)(unsigned __int8 **, uint64_t, _DWORD *, uint64_t, void **, uint64_t, void))*a3 + 4))(a3, 45, v37, 1, &v38, 2, 0);
  uint64_t v34 = 9;
  int v35 = 0;
  LODWORD(v38) = 36;
  int v40 = 2;
  LODWORD(v41) = v11;
  int v43 = 0;
  int v44 = v12;
  int v45 = 0;
  uint64_t v21 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))*a3 + 4))(a3, 134, &v34, 1, &v38, 3, 0);
  uint64_t v23 = v22;
  uint64_t v34 = 9;
  int v35 = 0;
  LODWORD(v38) = 36;
  int v40 = 2;
  LODWORD(v41) = v11;
  int v43 = 0;
  int v44 = v30;
  int v45 = 0;
  uint64_t v24 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))*a3 + 4))(a3, 134, &v34, 1, &v38, 3, 0);
  LODWORD(v34) = v31;
  int v35 = 1;
  uint64_t v38 = (void *)v21;
  uint64_t v39 = v23;
  int v40 = 1;
  uint64_t v41 = v24;
  uint64_t v42 = v25;
  int v43 = 1;
  (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))*a3 + 4))(a3, 66, &v34, 1, &v38, 2, 0);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
}

uint64_t sub_1CBA55DA4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *(_DWORD **)(a1 + 32);
  int v5 = v4[1];
  if (v5 < 0 && (v5 & 0x7FFFFFFFu) < a3) {
    unint64_t v6 = *(void *)(a2 + 8 * (v5 & 0x7FFFFFFF));
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v48 = v6;
  char v7 = 35;
  if ((v6 & 4) == 0) {
    char v7 = 19;
  }
  uint64_t v8 = (v6 >> v7) & 0xFFFFFF;
  if (v8 < 5
    || ((v9 = v8 - 10, v10 = v9 > 0x3D, uint64_t v11 = (1 << v9) & 0x20C0000000000001, !v10) ? (v12 = v11 == 0) : (v12 = 1),
        !v12))
  {
    int v13 = v4[9];
    int v14 = v4[17];
    uint64_t v15 = *(void *)(a1 + 24);
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    uint64_t v16 = *(void *)(v15 + 32);
    unint64_t v17 = *(void *)(v16 + 40);
    int v43 = (uint64_t (**)(void **, uint64_t, uint64_t *, uint64_t, char **, uint64_t, void))&unk_1F261CD58;
    *(void *)&long long v44 = v16;
    long long v45 = v17;
    *((void *)&v44 + 1) = (*(uint64_t (**)(void))(**(void **)(v16 + 16) + 104))(*(void *)(v16 + 16));
    uint64_t v49 = 0;
    *((void *)&v46 + 1) = a1;
    *(void *)&long long v47 = 0;
    *(void *)&long long v46 = *(void *)(a1 + 24);
    uint64_t v18 = (unsigned __int8 **)(a1 + 56);
    if ((long long *)(a1 + 56) == (long long *)((char *)&v45 + 8)) {
      goto LABEL_15;
    }
    uint64_t v19 = *v18;
    *((void *)&v45 + 1) = v19;
    if (!v19)
    {
      *((void *)&v45 + 1) = 0;
      goto LABEL_15;
    }
    llvm::MetadataTracking::track((uint64_t)&v45 + 8, v19, 2);
    if (*((void *)&v45 + 1))
    {
      int v34 = **((unsigned char **)&v45 + 1);
      if ((v34 - 4) > 0x1E)
      {
        if ((v34 - 3) >= 0xFFFFFFFE) {
          uint64_t v36 = *((void *)&v45 + 1);
        }
        else {
          uint64_t v36 = 0;
        }
        if ((v34 - 3) < 0xFFFFFFFE)
        {
          if (v34 == 3) {
            *(void *)(*((void *)&v45 + 1) + 8) = 0;
          }
          goto LABEL_35;
        }
        unint64_t v37 = v36 + 8;
        goto LABEL_42;
      }
      if ((*(unsigned char *)(*((void *)&v45 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v45 + 1) + 12))
      {
        uint64_t v39 = *(void *)(*((void *)&v45 + 1) + 16);
        if ((v39 & 4) != 0)
        {
          unint64_t v37 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v37)
          {
LABEL_42:
            unint64_t v52 = (char *)&v45 + 8;
            sub_1CC5FA668(v37 + 16, &v52);
          }
        }
      }
    }
LABEL_35:
    int v35 = *v18;
    *((void *)&v45 + 1) = v35;
    if (v35) {
      llvm::MetadataTracking::track((uint64_t)&v45 + 8, v35, 2);
    }
LABEL_15:
    unsigned int v20 = sub_1CB8F1DC4(&v48);
    if (v21 == 1)
    {
      unsigned int v40 = v20;
      unsigned int v20 = v40;
    }
    uint64_t v22 = (8 * v20) | 1;
    uint64_t v49 = v22;
    int v50 = 0;
    LODWORD(v52) = v13;
    int v54 = 0;
    uint64_t v23 = sub_1CC739C54(&v43, 0x50u, (unint64_t *)&v49, 1, (int *)&v52, 1, 0);
    uint64_t v25 = v24;
    uint64_t v41 = v22;
    int v42 = 0;
    LODWORD(v49) = v14;
    int v51 = 0;
    uint64_t v26 = sub_1CC738034(&v43, 126, (unint64_t *)&v41, (int *)&v49);
    uint64_t v58 = v22;
    int v59 = 0;
    unint64_t v52 = (char *)v23;
    uint64_t v53 = v25;
    int v54 = 1;
    uint64_t v55 = v26;
    uint64_t v56 = v27;
    int v57 = 1;
    uint64_t v28 = v43[4]((void **)&v43, 45, &v58, 1, &v52, 2, 0);
    LODWORD(v49) = v5;
    int v50 = 1;
    unint64_t v52 = (char *)v28;
    uint64_t v53 = v29;
    int v54 = 1;
    sub_1CC739C54(&v43, 0x51u, (unint64_t *)&v49, 1, (int *)&v52, 1, 0);
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
    int v43 = (uint64_t (**)(void **, uint64_t, uint64_t *, uint64_t, char **, uint64_t, void))&unk_1F261CD58;
    if (!*((void *)&v45 + 1)) {
      return 1;
    }
    int v30 = **((unsigned char **)&v45 + 1);
    if ((v30 - 4) > 0x1E)
    {
      if ((v30 - 3) >= 0xFFFFFFFE) {
        uint64_t v32 = *((void *)&v45 + 1);
      }
      else {
        uint64_t v32 = 0;
      }
      if ((v30 - 3) < 0xFFFFFFFE)
      {
        if (v30 == 3) {
          *(void *)(*((void *)&v45 + 1) + 8) = 0;
        }
        return 1;
      }
      unint64_t v33 = v32 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*((void *)&v45 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v45 + 1) + 12)) {
        return 1;
      }
      uint64_t v38 = *(void *)(*((void *)&v45 + 1) + 16);
      if ((v38 & 4) == 0) {
        return 1;
      }
      unint64_t v33 = v38 & 0xFFFFFFFFFFFFFFF8;
      if (!v33) {
        return 1;
      }
    }
    unint64_t v52 = (char *)&v45 + 8;
    sub_1CC5FA668(v33 + 16, &v52);
    return 1;
  }
  return 0;
}

uint64_t sub_1CBA56298(uint64_t a1, uint64_t a2, void *a3)
{
  v27[4] = *MEMORY[0x1E4F143B8];
  a3[5] = *(void *)(a1 + 24);
  a3[6] = a1;
  unint64_t v6 = (unsigned __int8 **)(a1 + 56);
  char v7 = (unsigned __int8 **)(a3 + 4);
  if ((void *)(a1 + 56) == a3 + 4) {
    goto LABEL_5;
  }
  uint64_t v8 = *v7;
  if (*v7)
  {
    int v19 = *v8;
    if ((v19 - 4) > 0x1E)
    {
      if ((v19 - 3) >= 0xFFFFFFFE) {
        uint64_t v23 = *v7;
      }
      else {
        uint64_t v23 = 0;
      }
      if ((v19 - 3) < 0xFFFFFFFE)
      {
        if (v19 == 3) {
          *((void *)v8 + 1) = 0;
        }
        goto LABEL_3;
      }
      unint64_t v21 = (unint64_t)(v23 + 8);
    }
    else
    {
      if ((v8[1] & 0x7F) != 2 && !*((_DWORD *)v8 + 3)) {
        goto LABEL_3;
      }
      uint64_t v20 = *((void *)v8 + 2);
      if ((v20 & 4) == 0) {
        goto LABEL_3;
      }
      unint64_t v21 = v20 & 0xFFFFFFFFFFFFFFF8;
      if (!v21) {
        goto LABEL_3;
      }
    }
    uint64_t v25 = a3 + 4;
    sub_1CC5FA668(v21 + 16, &v25);
  }
LABEL_3:
  unsigned int v9 = *v6;
  const char *v7 = *v6;
  if (v9) {
    llvm::MetadataTracking::track((uint64_t)v7, v9, 2);
  }
LABEL_5:
  uint64_t v10 = *(void *)(a1 + 32);
  int v11 = *(_DWORD *)(v10 + 36);
  if ((v11 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v12 = v11 & 0x7FFFFFFF;
  if (v12 >= *(_DWORD *)(a2 + 432) || *(void *)(*(void *)(a2 + 424) + 8 * v12) != 513) {
    return 0;
  }
  uint64_t v25 = v27;
  uint64_t v26 = 0x800000000;
  if (*(_DWORD *)(a1 + 40) < 2u)
  {
    uint64_t v17 = 0;
    uint64_t v22 = (int *)v27;
  }
  else
  {
    unint64_t v13 = 1;
    uint64_t v14 = 36;
    do
    {
      v24[0] = *(_DWORD *)(*(void *)(a1 + 32) + v14);
      v24[4] = 0;
      sub_1CC7363F0(a3, 0x101uLL, v24);
      if (v26 >= (unint64_t)HIDWORD(v26)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v25 + v26) = *(_DWORD *)(*(void *)(v15 + 32) + 4);
      unsigned int v16 = v26 + 1;
      LODWORD(v26) = v16;
      if (v16 >= HIDWORD(v26)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v25 + v16) = *(_DWORD *)(*(void *)(v15 + 32) + 36);
      uint64_t v17 = (v26 + 1);
      LODWORD(v26) = v26 + 1;
      ++v13;
      v14 += 32;
    }
    while (v13 < *(unsigned int *)(a1 + 40));
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v22 = (int *)v25;
  }
  v24[0] = *(_DWORD *)(v10 + 4);
  v24[2] = 1;
  sub_1CC73661C((uint64_t)a3, (uint64_t)v24, v22, v17);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
  if (v25 != v27) {
    free(v25);
  }
  return 1;
}

uint64_t sub_1CBA56528(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v287 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (unsigned __int16 *)a1[2];
  uint64_t v7 = *((unsigned __int8 *)v6 + 4);
  unsigned int v8 = *v6;
  if (!*((unsigned char *)v6 + 4) && v8 != 96) {
    return 0;
  }
  BOOL v10 = v8 != 90 && v8 != 96;
  int v11 = a1 + 6;
  unint64_t v12 = a1[6];
  if (v12 < 8)
  {
    uint64_t v15 = 0;
    goto LABEL_29;
  }
  if ((v12 & 7) == 0)
  {
    v12 &= 0xFFFFFFFFFFFFFFF8;
    a1[6] = v12;
    unsigned int v16 = (int *)(a1 + 7);
    uint64_t v15 = (int *)(a1 + 6);
    goto LABEL_21;
  }
  unint64_t v13 = (int *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((a1[6] & 7) == 3 && v13 != 0)
  {
    uint64_t v18 = *v13;
    uint64_t v15 = v13 + 2;
    uint64_t v17 = v18;
    if (!v18) {
      goto LABEL_25;
    }
    unsigned int v16 = &v15[2 * v17];
LABEL_21:
    while ((*(_WORD *)(*(void *)v15 + 36) & 0xF00) == 0)
    {
      v15 += 2;
      if (v15 == v16)
      {
        uint64_t v15 = v16;
        break;
      }
    }
    if (v12 >= 8) {
      goto LABEL_25;
    }
LABEL_29:
    int v11 = 0;
    uint64_t v20 = 0;
    goto LABEL_30;
  }
  uint64_t v15 = 0;
LABEL_25:
  if ((v12 & 7) != 0)
  {
    int v11 = 0;
    if ((v12 & 7) == 3 && (int v19 = (int *)(v12 & 0xFFFFFFFFFFFFFFF8), (v12 & 0xFFFFFFFFFFFFFFF8) != 0))
    {
      uint64_t v20 = *v19;
      int v11 = (unint64_t *)(v19 + 2);
    }
    else
    {
      uint64_t v20 = 0;
    }
  }
  else
  {
    *int v11 = v12 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = 1;
  }
LABEL_30:
  if (v15 == (int *)&v11[v20]) {
    unint64_t v21 = 0;
  }
  else {
    unint64_t v21 = *(unsigned __int16 **)v15;
  }
  if (v21) {
    BOOL v10 = 1;
  }
  if (!v10) {
    return 0;
  }
  uint64_t v22 = a1[4];
  if (*(unsigned char *)v22) {
    return 0;
  }
  uint64_t v23 = *(unsigned int *)(v22 + 4);
  if ((v23 & 0x80000000) == 0 || (v23 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(a2 + 432))
  {
    uint64_t v24 = 0;
    BOOL v28 = 0;
    uint64_t v26 = a1 + 3;
    uint64_t v25 = a1[3];
    uint64_t v27 = *(unsigned char **)(*(void *)(v25 + 32) + 8);
    goto LABEL_43;
  }
  uint64_t v24 = *(void *)(*(void *)(a2 + 424) + 8 * (v23 & 0x7FFFFFFF));
  uint64_t v26 = a1 + 3;
  uint64_t v25 = a1[3];
  uint64_t v27 = *(unsigned char **)(*(void *)(v25 + 32) + 8);
  if (v24 != 513)
  {
    BOOL v28 = 0;
LABEL_43:
    if (v24 == 257) {
      goto LABEL_49;
    }
    return 0;
  }
  BOOL v28 = v27[1710] != 0;
  uint64_t v24 = 513;
  if (!v27[1710]) {
    goto LABEL_43;
  }
LABEL_49:
  *(void *)(a3 + 40) = v25;
  *(void *)(a3 + 48) = a1;
  int v31 = (unsigned __int8 **)(a1 + 7);
  uint64_t v32 = (unsigned __int8 **)(a3 + 32);
  unint64_t v245 = v27;
  BOOL v243 = v28;
  if (a1 + 7 == (void *)(a3 + 32)) {
    goto LABEL_53;
  }
  unint64_t v33 = *v32;
  if (*v32)
  {
    int v80 = *v33;
    if ((v80 - 4) > 0x1E)
    {
      if ((v80 - 3) >= 0xFFFFFFFE) {
        int v200 = *v32;
      }
      else {
        int v200 = 0;
      }
      if ((v80 - 3) < 0xFFFFFFFE)
      {
        if (v80 == 3) {
          *((void *)v33 + 1) = 0;
        }
        goto LABEL_51;
      }
      uint64_t v83 = (unsigned __int8 **)(a1 + 7);
      unint64_t v82 = (unint64_t)(v200 + 8);
    }
    else
    {
      if ((v33[1] & 0x7F) != 2 && !*((_DWORD *)v33 + 3)) {
        goto LABEL_51;
      }
      uint64_t v81 = *((void *)v33 + 2);
      if ((v81 & 4) == 0) {
        goto LABEL_51;
      }
      unint64_t v82 = v81 & 0xFFFFFFFFFFFFFFF8;
      if (!v82) {
        goto LABEL_51;
      }
      uint64_t v83 = (unsigned __int8 **)(a1 + 7);
    }
    v263[0] = a3 + 32;
    sub_1CC5FA668(v82 + 16, v263);
    int v31 = v83;
    uint64_t v27 = v245;
    BOOL v28 = v243;
  }
LABEL_51:
  int v34 = *v31;
  char *v32 = *v31;
  if (v34)
  {
    uint64_t v79 = v31;
    llvm::MetadataTracking::track(a3 + 32, v34, 2);
    BOOL v28 = v243;
    uint64_t v27 = v245;
    int v31 = v79;
  }
LABEL_53:
  if (v8 == 96) {
    uint64_t v35 = 1;
  }
  else {
    uint64_t v35 = v7;
  }
  uint64_t v36 = *(unsigned int *)(a1[4] + 32 * v35 + 4);
  if ((v36 & 0x80000000) != 0 && (v36 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a2 + 432)) {
    unint64_t v37 = *(void *)(*(void *)(a2 + 424) + 8 * (v36 & 0x7FFFFFFF));
  }
  else {
    unint64_t v37 = 0;
  }
  char v38 = 35;
  if ((v37 & 4) == 0) {
    char v38 = 19;
  }
  uint64_t v39 = (v37 >> v38) & 0xFFFFFF;
  unsigned int v237 = v8 - 111;
  if (v8 - 111 <= 1 && (!v27[1712] || v39 == 3)) {
    return 0;
  }
  uint64_t v242 = (uint64_t)(v27 + 1328);
  unint64_t v41 = v21[18];
  uint64_t v42 = (v41 >> 8) & 0xF;
  unint64_t v43 = v41 >> 12;
  unint64_t v231 = v31;
  if (v43 == 5 && v42 == 4 || v43 == 4 && v42 == 5)
  {
    int v44 = 6;
  }
  else if (byte_1CDAF3AB8[8 * v42 + v43])
  {
    int v44 = v42;
  }
  else
  {
    int v44 = v43;
  }
  uint64_t v251 = 0x2FFFFFFFFLL;
  uint64_t v253 = 0;
  int v254 = 0;
  uint64_t v250 = &unk_1F25EF9D0;
  if (v28) {
    uint64_t v45 = 98;
  }
  else {
    uint64_t v45 = v8;
  }
  sub_1CB950D24((uint64_t)&v250, v45, v39, v44, v242);
  int v46 = 0;
  if (!(_BYTE)v253)
  {
    if (v8 == 96) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = v7 + 1;
    }
    int v46 = *(_DWORD *)(a1[4] + 32 * v47 + 4);
  }
  int v239 = v46;
  if (HIDWORD(v251) == 2)
  {
    uint64_t v48 = *(unsigned int *)(a1[4] + 36);
    BOOL v49 = v243;
    if (v243)
    {
LABEL_85:
      int v50 = !v243;
      int v234 = !v243;
      goto LABEL_104;
    }
    if ((v48 & 0x80000000) != 0) {
      int v51 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v48 & 0x7FFFFFFF) + 8);
    }
    else {
      int v51 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v48);
    }
    uint64_t v52 = *v51;
    if (v52)
    {
      while ((*(unsigned char *)(v52 + 3) & 1) != 0)
      {
        uint64_t v52 = *(void *)(v52 + 24);
        if (!v52) {
          goto LABEL_87;
        }
      }
      goto LABEL_85;
    }
LABEL_95:
    if (v8 != 96)
    {
      uint64_t v53 = (uint64_t *)((v23 & 0x80000000) != 0
                      ? *(void *)(a2 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8
                      : *(void *)(a2 + 272) + 8 * v23);
      uint64_t v54 = *v53;
      if (v54)
      {
        if ((*(unsigned char *)(v54 + 3) & 1) == 0)
        {
          int v234 = 0;
          int v50 = 1;
          goto LABEL_104;
        }
        while (1)
        {
          uint64_t v54 = *(void *)(v54 + 24);
          if (!v54) {
            break;
          }
          unsigned int v241 = 1;
          if ((*(unsigned char *)(v54 + 3) & 1) == 0)
          {
            int v234 = 0;
            goto LABEL_105;
          }
        }
      }
    }
    int v234 = 0;
    int v50 = v253 != 0;
LABEL_104:
    unsigned int v241 = v50;
    goto LABEL_105;
  }
  LODWORD(v48) = 0;
  BOOL v49 = v243;
LABEL_87:
  if (!v49) {
    goto LABEL_95;
  }
  int v234 = 0;
  unsigned int v241 = 0;
LABEL_105:
  if ((v36 & 0x80000000) != 0) {
    uint64_t v55 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v55 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v36);
  }
  uint64_t v56 = *v55;
  uint64_t v238 = v26;
  uint64_t v235 = (uint64_t)v21;
  if ((*(unsigned char *)(v56 + 3) & 1) == 0) {
    uint64_t v56 = *(void *)(v56 + 24);
  }
  int v236 = v23;
  uint64_t v57 = *(void *)(v56 + 8);
  uint64_t v232 = *(void *)(*(void *)(*(void *)(v57 + 24) + 32) + 344);
  int v233 = v48;
  if (v39 == 3)
  {
    uint64_t v58 = sub_1CBA5E72C(v57, a2, (llvm::IntegerType *****)a3);
    uint64_t v59 = v57;
    uint64_t v60 = v245;
    BOOL v61 = v245[1733] != 0;
    if (v245[1735]) {
      int v62 = 2 * v245[1734];
    }
    else {
      int v62 = (2 * v245[1734]) | 0x10000;
    }
    unint64_t v63 = 129;
    uint64_t v64 = 129;
    uint64_t v57 = v58;
  }
  else
  {
    uint64_t v59 = 0;
    int v62 = 0;
    BOOL v61 = 0;
    uint64_t v64 = 257;
    unint64_t v63 = 513;
    uint64_t v60 = v245;
  }
  v263[0] = v57;
  v263[1] = a2;
  v263[4] = 0;
  v263[5] = 0;
  v263[2] = a3;
  unsigned __int8 v264 = 0;
  uint64_t v266 = 0;
  uint64_t v267 = 0;
  uint64_t v265 = 0;
  __int16 v268 = 0;
  BOOL v269 = v61;
  int v270 = v62;
  uint64_t v271 = v59;
  uint64_t v272 = v274;
  uint64_t v273 = 0x400000000;
  unsigned __int8 v275 = 0;
  if (!v59) {
    uint64_t v271 = v57;
  }
  int v65 = 0;
  v263[3] = *(void *)(*(void *)(*(void *)(v57 + 24) + 32) + 8) + 1328;
  uint64_t v66 = 257;
  if (!v60[1733]) {
    uint64_t v66 = 129;
  }
  if (v39 == 3) {
    uint64_t v67 = v66;
  }
  else {
    uint64_t v67 = 513;
  }
  while ((sub_1CBA136E8((uint64_t)v263, 2, v67, v64, v63, v65, 0) & 1) == 0)
  {
    if (++v65 == 3)
    {
      int v68 = sub_1CBA136E8((uint64_t)v263, 2, v67, v64, v63, 0, 1u);
      uint64_t v29 = 0;
      if (!v68) {
        goto LABEL_309;
      }
      break;
    }
  }
  if (v39 == 3)
  {
    int v69 = v275;
  }
  else
  {
    int v69 = 0;
    unsigned __int8 v275 = 0;
  }
  unsigned int v70 = sub_1CB950EFC((uint64_t)&v250, v241, v69 == 0, v264);
  char v71 = v243;
  if (!BYTE2(v253)) {
    char v71 = 1;
  }
  if (v71)
  {
    int v230 = 0;
  }
  else
  {
    int v72 = *(_DWORD *)(a1[4] + 32 * v7 + 68);
    uint64_t v259 = (uint64_t)&off_1E66AB358;
    LODWORD(v260) = 2;
    unint64_t v73 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void, void, void))(*(void *)a3 + 32))(a3, 18, &v259, 1, 0, 0, 0);
    unint64_t v75 = v74;
    long long v277 = 0uLL;
    LODWORD(v276) = 0;
    HIDWORD(v276) = v72;
    *(void *)&long long v278 = 0;
    llvm::MachineInstr::addOperand(v74, v73, (const llvm::MachineOperand *)&v276);
    LODWORD(v276) = 1;
    *(void *)&long long v277 = 0;
    *((void *)&v277 + 1) = 25;
    llvm::MachineInstr::addOperand(v75, v73, (const llvm::MachineOperand *)&v276);
    long long v277 = 0uLL;
    LODWORD(v276) = 0;
    HIDWORD(v276) = v239;
    *(void *)&long long v278 = 0;
    llvm::MachineInstr::addOperand(v75, v73, (const llvm::MachineOperand *)&v276);
    LODWORD(v276) = 1;
    *(void *)&long long v277 = 0;
    *((void *)&v277 + 1) = 26;
    llvm::MachineInstr::addOperand(v75, v73, (const llvm::MachineOperand *)&v276);
    int v230 = v239;
    int v239 = *(_DWORD *)(*((void *)v75 + 4) + 4);
  }
  uint64_t v76 = *(void *)(*v238 + 32);
  uint64_t v77 = *(void *)v76;
  if (v245[1646])
  {
    int v78 = 4;
  }
  else if (v245[1647])
  {
    int v78 = 5;
  }
  else if (v245[1648])
  {
    int v78 = 6;
  }
  else if (v245[1649])
  {
    int v78 = 7;
  }
  else
  {
    int v78 = 9;
  }
  int v240 = v78;
  if (v245[1690]) {
    unsigned int v84 = 3;
  }
  else {
    unsigned int v84 = 1;
  }
  LODWORD(v276) = 0;
  int v85 = sub_1CBA864D8(v242, v77, "AtomicCacheCtl", (int *)&v276);
  unint64_t v86 = v245;
  if (v85) {
    unsigned int v84 = v276;
  }
  if (v245[1692])
  {
    int v87 = (*(uint64_t (**)(void))(**(void **)(v76 + 344) + 648))(*(void *)(v76 + 344));
    unint64_t v86 = v245;
  }
  else
  {
    int v87 = 1;
  }
  if (v240 == 5) {
    unsigned int v88 = v87;
  }
  else {
    unsigned int v88 = 0;
  }
  if (v86[1700]) {
    unsigned int v89 = 3;
  }
  else {
    unsigned int v89 = v88;
  }
  if (v84 >= v89) {
    unsigned int v90 = v89;
  }
  else {
    unsigned int v90 = v84;
  }
  if (v86[1699])
  {
    unsigned int v91 = 0;
LABEL_170:
    unsigned int v93 = 0;
    goto LABEL_171;
  }
  LODWORD(v276) = 0;
  int v92 = sub_1CBA864D8(v242, v77, "MemoryReadCacheCtl", (int *)&v276);
  unint64_t v86 = v245;
  if (v92) {
    unsigned int v91 = v276;
  }
  else {
    unsigned int v91 = v90;
  }
  if (v245[1699]) {
    goto LABEL_170;
  }
  LODWORD(v276) = 0;
  int v160 = sub_1CBA864D8(v242, v77, "MemoryWriteCacheCtl", (int *)&v276);
  unint64_t v86 = v245;
  unsigned int v93 = v276;
  if (!v160) {
    unsigned int v93 = v90;
  }
LABEL_171:
  if (v93 >= v91) {
    int v94 = v91;
  }
  else {
    int v94 = v93;
  }
  if (v243)
  {
    if (v86[1711]) {
      int v95 = 1;
    }
    else {
      int v95 = 3;
    }
    unsigned int v229 = v95 | (4 * (v8 != 110));
    uint64_t v96 = v242;
  }
  else
  {
    uint64_t v96 = v242;
    if (v237 > 1)
    {
      LODWORD(v276) = 0;
      int v148 = sub_1CBA864D8(v242, v77, "AtomicL2Pers", (int *)&v276);
      int v149 = 4 * v276;
      if (!v148) {
        int v149 = 4;
      }
      if (v84 == 3) {
        int v149 = 4;
      }
      unsigned int v229 = v149 | v84;
      if (v245[1712] && v251 == 1 && v84 == 3)
      {
        unint64_t v255 = 257;
        unsigned int v256 = 0;
        uint64_t v150 = llvm::IntegerType::get(****(llvm::IntegerType *****)(a3 + 8), (llvm::LLVMContext *)0x20);
        uint64_t v152 = *(llvm::ConstantInt **)v150;
        unsigned int v153 = *(_DWORD *)(v150 + 8);
        LODWORD(v277) = v153 >> 8;
        if (v153 >> 8 >= 0x41) {
          operator new[]();
        }
        uint64_t v276 = 0;
        uint64_t v154 = llvm::ConstantInt::get(v152, (llvm::LLVMContext *)&v276, v151);
        if (v277 >= 0x41 && v276) {
          MEMORY[0x1D25D9CB0](v276, 0x1000C8000313F17);
        }
        uint64_t v155 = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)a3 + 16))(a3, &v255, v154);
        uint64_t v259 = 257;
        LODWORD(v260) = 0;
        uint64_t v276 = v155;
        *(void *)&long long v277 = v156;
        DWORD2(v277) = 1;
        LODWORD(v278) = v239;
        LODWORD(v279) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*(void *)a3 + 32))(a3, 46, &v259, 1, &v276, 2, 0);
        int v239 = *(_DWORD *)(*(void *)(v157 + 32) + 4);
        LODWORD(v251) = 0;
      }
    }
    else
    {
      LODWORD(v276) = 0;
      int v100 = sub_1CBA864D8(v242, v77, "AtomicL2Pers", (int *)&v276);
      int v101 = (4 * v276) | 3;
      if (!v100) {
        int v101 = 7;
      }
      unsigned int v229 = v101;
      if (v8 == 112)
      {
        uint64_t v259 = 257;
        LODWORD(v260) = 0;
        LODWORD(v276) = v239;
        DWORD2(v277) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*(void *)a3 + 32))(a3, 177, &v259, 1, &v276, 1, 0);
        int v239 = *(_DWORD *)(*(void *)(v102 + 32) + 4);
      }
    }
  }
  uint64_t v97 = *(void *)v76;
  LODWORD(v276) = 0;
  sub_1CBA864D8(v96, v97, "SampleWriteL2Pers", (int *)&v276);
  if (v252 > 0xC) {
    goto LABEL_204;
  }
  if (((1 << v252) & 0x404) != 0)
  {
    unint64_t v98 = (unint64_t)a1;
    unsigned int v99 = 1;
    goto LABEL_203;
  }
  if (((1 << v252) & 0x808) != 0)
  {
    sub_1CBA61284((unint64_t)a1, 3, 2u, v94, v240);
    char v103 = v243;
    if (v237 < 2) {
      char v103 = 1;
    }
    if ((v103 & 1) == 0 && !v245[1711]) {
      goto LABEL_204;
    }
    int v104 = v94;
    unint64_t v105 = *(llvm::MachineFunction **)(a3 + 8);
    uint64_t v106 = *(void *)(*(void *)(a3 + 16) + 8) + 396528;
    unint64_t v107 = *(unsigned __int8 **)(a3 + 32);
    uint64_t v259 = (uint64_t)v107;
    if (v107) {
      llvm::MetadataTracking::track((uint64_t)&v259, v107, 2);
    }
    uint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v105, v106, (unsigned __int8 **)&v259, 0);
    if (v259)
    {
      int v225 = *(unsigned __int8 *)v259;
      if ((v225 - 4) > 0x1E)
      {
        if ((v225 - 3) >= 0xFFFFFFFE) {
          uint64_t v228 = v259;
        }
        else {
          uint64_t v228 = 0;
        }
        if ((v225 - 3) < 0xFFFFFFFE)
        {
          uint64_t v96 = v242;
          if (v225 == 3) {
            *(void *)(v259 + 8) = 0;
          }
          goto LABEL_196;
        }
        unint64_t v227 = v228 + 8;
      }
      else
      {
        uint64_t v96 = v242;
        if ((*(unsigned char *)(v259 + 1) & 0x7F) != 2 && !*(_DWORD *)(v259 + 12)) {
          goto LABEL_196;
        }
        uint64_t v226 = *(void *)(v259 + 16);
        if ((v226 & 4) == 0) {
          goto LABEL_196;
        }
        unint64_t v227 = v226 & 0xFFFFFFFFFFFFFFF8;
        if (!v227) {
          goto LABEL_196;
        }
      }
      uint64_t v276 = (uint64_t)&v259;
      sub_1CC5FA668(v227 + 16, &v276);
      uint64_t v96 = v242;
    }
LABEL_196:
    uint64_t v109 = *(unint64_t **)(a3 + 48);
    uint64_t v110 = *(void *)(*(void *)(a3 + 40) + 40);
    *((void *)MachineInstr + 3) = v110;
    uint64_t v111 = *(void *)(v110 + 32);
    uint64_t v112 = *((unsigned int *)MachineInstr + 10);
    if (v112)
    {
      uint64_t v209 = *((void *)MachineInstr + 4);
      uint64_t v210 = *(void *)(v111 + 40);
      uint64_t v211 = 32 * v112;
      do
      {
        if (!*(unsigned char *)v209)
        {
          uint64_t v212 = *(unsigned int *)(v209 + 4);
          if ((int)v212 >= 0) {
            uint64_t v213 = (uint64_t *)(*(void *)(v210 + 272) + 8 * v212);
          }
          else {
            uint64_t v213 = (uint64_t *)(*(void *)(v210 + 24) + 16 * (v212 & 0x7FFFFFFF) + 8);
          }
          uint64_t v214 = *v213;
          if (*v213)
          {
            uint64_t v215 = *(void *)(v214 + 16);
            *(void *)(v214 + 16) = v209;
            *(void *)(v209 + 16) = v215;
            if (*(unsigned char *)(v209 + 3))
            {
              *(void *)(v209 + 24) = v214;
            }
            else
            {
              *(void *)(v209 + 24) = 0;
              uint64_t v213 = (uint64_t *)(v215 + 24);
            }
          }
          else
          {
            *(void *)(v209 + 16) = v209;
            *(void *)(v209 + 24) = 0;
          }
          *uint64_t v213 = v209;
        }
        v209 += 32;
        v211 -= 32;
      }
      while (v211);
    }
    uint64_t v113 = *(void *)(v111 + 728);
    if (v113) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v113 + 24))(v113, MachineInstr);
    }
    unint64_t v114 = *v109 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t MachineInstr = v114 | *(void *)MachineInstr & 7;
    *((void *)MachineInstr + 1) = v109;
    *(void *)(v114 + 8) = MachineInstr;
    unint64_t *v109 = *v109 & 7 | (unint64_t)MachineInstr;
    uint64_t v115 = *(void *)(a3 + 56);
    if (v115) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v115 + 24))(v115, MachineInstr);
    }
    LODWORD(v276) = 1;
    *(void *)&long long v277 = 0;
    *((void *)&v277 + 1) = 3;
    llvm::MachineInstr::addOperand(MachineInstr, v105, (const llvm::MachineOperand *)&v276);
    LODWORD(v276) = 1;
    *(void *)&long long v277 = 0;
    *((void *)&v277 + 1) = 2;
    llvm::MachineInstr::addOperand(MachineInstr, v105, (const llvm::MachineOperand *)&v276);
    int v94 = v104;
    goto LABEL_204;
  }
  if (((1 << v252) & 0x1010) != 0)
  {
    unint64_t v98 = (unint64_t)a1;
    unsigned int v99 = 3;
LABEL_203:
    sub_1CBA61284(v98, 3, v99, v94, v240);
  }
LABEL_204:
  int v116 = *(_DWORD *)(*(void *)(v266 + 32) + 4);
  if (!BYTE3(v253)
    && ((*(uint64_t (**)(uint64_t))(*(void *)v232 + 288))(v232) & 1) == 0
    && (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))v232)(v232, 37, 0, 1, 2))
  {
    int v244 = v94;
    uint64_t v259 = 513;
    LODWORD(v260) = 0;
    LODWORD(v276) = v116;
    DWORD2(v277) = 0;
    sub_1CC7382B0(a3);
    LODWORD(v259) = *(_DWORD *)(*(void *)(v117 + 32) + 4);
    LODWORD(v261) = 0;
    uint64_t v276 = (uint64_t)&v277 + 8;
    *((void *)&v277 + 1) = 257;
    LODWORD(v278) = 0;
    *((void *)&v278 + 1) = 257;
    LODWORD(v279) = 0;
    *(void *)&long long v277 = 0x800000002;
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t *, uint64_t, void))(*(void *)a3 + 32))(a3, 74, (char *)&v277 + 8, 2, &v259, 1, 0);
    uint64_t v119 = v118;
    if ((long long *)v276 != (long long *)((char *)&v277 + 8)) {
      free((void *)v276);
    }
    uint64_t v276 = 257;
    LODWORD(v277) = 0;
    uint64_t v120 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void, void, void))(*(void *)a3 + 32))(a3, 495, &v276, 1, 0, 0, 0);
    uint64_t v122 = v121;
    uint64_t v259 = (uint64_t)v120;
    uint64_t v260 = v121;
    LODWORD(v276) = 1;
    long long v277 = 0uLL;
    llvm::MachineInstr::addOperand(v121, (llvm::MachineFunction *)v120, (const llvm::MachineOperand *)&v276);
    int v123 = *(_DWORD *)(*(void *)(v119 + 32) + 36);
    long long v277 = 0uLL;
    LODWORD(v276) = 0;
    HIDWORD(v276) = v123;
    *(void *)&long long v278 = 0;
    llvm::MachineInstr::addOperand(v122, (llvm::MachineFunction *)v120, (const llvm::MachineOperand *)&v276);
    LODWORD(v276) = 1;
    long long v277 = 0uLL;
    llvm::MachineInstr::addOperand(v122, (llvm::MachineFunction *)v120, (const llvm::MachineOperand *)&v276);
    sub_1CBA318C8((uint64_t)&v259);
    unint64_t v255 = 513;
    unsigned int v256 = 0;
    LODWORD(v276) = *(_DWORD *)(*(void *)(v119 + 32) + 4);
    DWORD2(v277) = 0;
    LODWORD(v278) = *(_DWORD *)(*((void *)v122 + 4) + 4);
    LODWORD(v279) = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, void))(*(void *)a3 + 32))(a3, 76, &v255, 1, &v276, 2, 0);
    int v116 = *(_DWORD *)(*(void *)(v124 + 32) + 4);
    int v94 = v244;
  }
  unint64_t v125 = *(llvm::MachineFunction **)(a3 + 8);
  uint64_t v126 = *(void *)(*(void *)(a3 + 16) + 8) + 48 * v70;
  uint64_t v127 = *(unsigned __int8 **)(a3 + 32);
  uint64_t v259 = (uint64_t)v127;
  if (v127) {
    llvm::MetadataTracking::track((uint64_t)&v259, v127, 2);
  }
  uint64_t v128 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v125, v126, (unsigned __int8 **)&v259, 0);
  if (v259)
  {
    int v221 = *(unsigned __int8 *)v259;
    if ((v221 - 4) > 0x1E)
    {
      if ((v221 - 3) >= 0xFFFFFFFE) {
        uint64_t v224 = v259;
      }
      else {
        uint64_t v224 = 0;
      }
      if ((v221 - 3) < 0xFFFFFFFE)
      {
        uint64_t v96 = v242;
        if (v221 == 3) {
          *(void *)(v259 + 8) = 0;
        }
        goto LABEL_213;
      }
      unint64_t v223 = v224 + 8;
    }
    else
    {
      uint64_t v96 = v242;
      if ((*(unsigned char *)(v259 + 1) & 0x7F) != 2 && !*(_DWORD *)(v259 + 12)) {
        goto LABEL_213;
      }
      uint64_t v222 = *(void *)(v259 + 16);
      if ((v222 & 4) == 0) {
        goto LABEL_213;
      }
      unint64_t v223 = v222 & 0xFFFFFFFFFFFFFFF8;
      if (!v223) {
        goto LABEL_213;
      }
    }
    uint64_t v276 = (uint64_t)&v259;
    sub_1CC5FA668(v223 + 16, &v276);
    uint64_t v96 = v242;
  }
LABEL_213:
  uint64_t v129 = *(uint64_t **)(a3 + 48);
  uint64_t v130 = *(void *)(*(void *)(a3 + 40) + 40);
  *(void *)(v128 + 24) = v130;
  uint64_t v131 = *(void *)(v130 + 32);
  uint64_t v132 = *(unsigned int *)(v128 + 40);
  if (v132)
  {
    uint64_t v163 = *(void *)(v128 + 32);
    uint64_t v164 = *(void *)(v131 + 40);
    uint64_t v165 = 32 * v132;
    do
    {
      if (!*(unsigned char *)v163)
      {
        uint64_t v166 = *(unsigned int *)(v163 + 4);
        if ((int)v166 >= 0) {
          unint64_t v167 = (uint64_t *)(*(void *)(v164 + 272) + 8 * v166);
        }
        else {
          unint64_t v167 = (uint64_t *)(*(void *)(v164 + 24) + 16 * (v166 & 0x7FFFFFFF) + 8);
        }
        uint64_t v168 = *v167;
        if (*v167)
        {
          uint64_t v169 = *(void *)(v168 + 16);
          *(void *)(v168 + 16) = v163;
          *(void *)(v163 + 16) = v169;
          if (*(unsigned char *)(v163 + 3))
          {
            *(void *)(v163 + 24) = v168;
          }
          else
          {
            *(void *)(v163 + 24) = 0;
            unint64_t v167 = (uint64_t *)(v169 + 24);
          }
        }
        else
        {
          *(void *)(v163 + 16) = v163;
          *(void *)(v163 + 24) = 0;
        }
        *unint64_t v167 = v163;
      }
      v163 += 32;
      v165 -= 32;
    }
    while (v165);
  }
  uint64_t v133 = *(void *)(v131 + 728);
  if (v133) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v133 + 24))(v133, v128);
  }
  unint64_t v134 = *v129 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v128 = v134 | *(void *)v128 & 7;
  *(void *)(v128 + 8) = v129;
  *(void *)(v134 + 8) = v128;
  *uint64_t v129 = *v129 & 7 | v128;
  uint64_t v135 = *(void *)(a3 + 56);
  if (v135) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v135 + 24))(v135, v128);
  }
  if (v241)
  {
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
    *(void *)(*(void *)(a2 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66AB080;
    uint64_t v137 = *(void *)(a2 + 8);
    if (v137) {
      (*(void (**)(uint64_t))(*(void *)v137 + 24))(v137);
    }
    long long v277 = 0uLL;
    *(void *)&long long v278 = 0;
    LODWORD(v276) = 0x1000000;
    HIDWORD(v276) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v276);
    if (v245[1654] && (_BYTE)v253 && BYTE3(v253))
    {
      LODWORD(v276) = 1;
      long long v277 = 0uLL;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v276);
    }
  }
  uint64_t v138 = *(void *)(v267 + 32);
  if (v264)
  {
    uint64_t v139 = *(void *)(v138 + 48);
    unsigned int v140 = *(_DWORD *)(v139 + 32);
    uint64_t v141 = v245;
    if (v140 > 0x40) {
      uint64_t v142 = **(void **)(v139 + 24);
    }
    else {
      uint64_t v142 = (uint64_t)(*(void *)(v139 + 24) << -(char)v140) >> -(char)v140;
    }
    LODWORD(v259) = 1;
    uint64_t v260 = 0;
    uint64_t v261 = (int)v142;
  }
  else
  {
    int v143 = *(_DWORD *)(v138 + 4);
    uint64_t v260 = 0;
    uint64_t v261 = 0;
    LODWORD(v259) = 0;
    HIDWORD(v259) = v143;
    uint64_t v262 = 0;
    uint64_t v141 = v245;
  }
  if (!(_BYTE)v253)
  {
    uint64_t v147 = v251 | (v229 << 6);
    if (v141[1654]) {
      v147 |= ((unint64_t)v268 << 9) | 0x1000;
    }
    if (v275)
    {
      if (!BYTE3(v253))
      {
LABEL_263:
        LODWORD(v276) = 1;
        *(void *)&long long v277 = 0;
        *((void *)&v277 + 1) = v147;
        goto LABEL_264;
      }
      if (v141[1654])
      {
        LODWORD(v276) = 1;
        long long v277 = 0uLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v276);
        goto LABEL_263;
      }
      LODWORD(v276) = 1;
      *(void *)&long long v277 = 0;
      *((void *)&v277 + 1) = v147;
    }
    else
    {
      if (!BYTE3(v253))
      {
        LODWORD(v276) = 1;
        *(void *)&long long v277 = 0;
        *((void *)&v277 + 1) = v147;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v276);
        long long v277 = 0uLL;
        LODWORD(v276) = 0;
        HIDWORD(v276) = v116;
        *(void *)&long long v278 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v276);
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v259);
        long long v277 = 0uLL;
        LODWORD(v276) = 0;
        HIDWORD(v276) = v239;
        *(void *)&long long v278 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v276);
        LODWORD(v276) = 1;
        goto LABEL_281;
      }
      if (v141[1654])
      {
        LODWORD(v276) = 1;
        long long v277 = 0uLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v276);
        LODWORD(v276) = 1;
        *(void *)&long long v277 = 0;
        *((void *)&v277 + 1) = v147;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v276);
        int v161 = *(_DWORD *)(*(void *)(v266 + 32) + 4);
        long long v277 = 0uLL;
        LODWORD(v276) = 0;
        HIDWORD(v276) = v161;
        *(void *)&long long v278 = 0;
LABEL_264:
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v276);
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v259);
        long long v277 = 0uLL;
        LODWORD(v276) = 0;
        HIDWORD(v276) = v239;
        *(void *)&long long v278 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v276);
        LODWORD(v276) = 1;
        goto LABEL_281;
      }
      LODWORD(v276) = 1;
      *(void *)&long long v277 = 0;
      *((void *)&v277 + 1) = v147;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v276);
      int v199 = *(_DWORD *)(*(void *)(v266 + 32) + 4);
      long long v277 = 0uLL;
      LODWORD(v276) = 0;
      HIDWORD(v276) = v199;
      *(void *)&long long v278 = 0;
    }
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v276);
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v259);
    long long v277 = 0uLL;
    LODWORD(v276) = 0;
    HIDWORD(v276) = v239;
    *(void *)&long long v278 = 0;
    goto LABEL_282;
  }
  uint64_t v144 = 2066;
  if (!(_BYTE)v268) {
    uint64_t v144 = 18;
  }
  unint64_t v145 = v144 | ((unint64_t)v141[1654] << 12);
  if (v275)
  {
    LODWORD(v276) = 1;
    *(void *)&long long v277 = 0;
    *((void *)&v277 + 1) = v145;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v276);
    uint64_t v146 = &v259;
LABEL_283:
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)v146);
    goto LABEL_284;
  }
  if (!BYTE3(v253))
  {
    LODWORD(v276) = 1;
    *(void *)&long long v277 = 0;
    *((void *)&v277 + 1) = v145;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v276);
    LODWORD(v276) = 1;
    *(void *)&long long v277 = 0;
    *((void *)&v277 + 1) = v229;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v276);
    int v162 = *(_DWORD *)(*(void *)(v266 + 32) + 4);
    long long v277 = 0uLL;
    LODWORD(v276) = 0;
    HIDWORD(v276) = v162;
    *(void *)&long long v278 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v276);
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v259);
    LODWORD(v276) = 1;
    goto LABEL_281;
  }
  LODWORD(v276) = 1;
  *(void *)&long long v277 = 0;
  *((void *)&v277 + 1) = v145;
  uint64_t v158 = v141;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v276);
  int v159 = *(_DWORD *)(*(void *)(v266 + 32) + 4);
  long long v277 = 0uLL;
  LODWORD(v276) = 0;
  HIDWORD(v276) = v159;
  *(void *)&long long v278 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v276);
  if (v158[1654])
  {
    LODWORD(v276) = 1;
    long long v277 = 0uLL;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v276);
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v125, (const llvm::MachineOperand *)&v259);
  if (!(_BYTE)v259 && v245[1654])
  {
    LODWORD(v276) = 1;
LABEL_281:
    long long v277 = 0uLL;
LABEL_282:
    uint64_t v146 = &v276;
    goto LABEL_283;
  }
LABEL_284:
  uint64_t v276 = v235;
  llvm::MachineInstr::setMemRefs(v128, (uint64_t *)v76, &v276, 1);
  uint64_t v170 = (*(uint64_t (**)(uint64_t))(*(void *)v96 + 104))(v96);
  (*(void (**)(uint64_t))(*(void *)v96 + 184))(v96);
  uint64_t v171 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v96 + 176))(v96);
  sub_1CC73B5D0((void *)v128, v170, v171);
  int v172 = v236;
  if (v252 > 0xC) {
    goto LABEL_297;
  }
  if (((1 << v252) & 0x440) != 0)
  {
    uint64_t v175 = *v238;
    long long v280 = 0u;
    long long v279 = 0u;
    long long v278 = 0u;
    long long v277 = 0u;
    uint64_t v176 = *(void *)(v175 + 32);
    uint64_t v276 = (uint64_t)&unk_1F261CD58;
    *(void *)&long long v277 = v176;
    *(void *)&long long v278 = *(void *)(v176 + 40);
    *((void *)&v277 + 1) = (*(uint64_t (**)(void))(**(void **)(v176 + 16) + 104))(*(void *)(v176 + 16));
    uint64_t v257 = 0;
    uint64_t v177 = (unsigned __int8 *)*((void *)&v278 + 1);
    if (!*((void *)&v278 + 1))
    {
      *((void *)&v278 + 1) = 0;
LABEL_293:
      uint64_t v178 = v231;
      goto LABEL_294;
    }
    int v201 = **((unsigned char **)&v278 + 1);
    if ((v201 - 4) > 0x1E)
    {
      if ((v201 - 3) >= 0xFFFFFFFE) {
        uint64_t v216 = *((void *)&v278 + 1);
      }
      else {
        uint64_t v216 = 0;
      }
      if ((v201 - 3) > 0xFFFFFFFD)
      {
        unint64_t v217 = v216 + 8;
LABEL_367:
        unint64_t v255 = (unint64_t)&v278 + 8;
        sub_1CC5FA668(v217 + 16, &v255);
        *((void *)&v278 + 1) = v257;
        if (v257)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v257, (unsigned __int8 *)v257, (uint64_t)&v278 + 8);
          uint64_t v177 = (unsigned __int8 *)*((void *)&v278 + 1);
        }
        else
        {
          uint64_t v177 = 0;
        }
        int v172 = v236;
        goto LABEL_293;
      }
      uint64_t v178 = v231;
      if (v201 == 3) {
        *(void *)(*((void *)&v278 + 1) + 8) = 0;
      }
    }
    else
    {
      uint64_t v178 = v231;
      if ((*(unsigned char *)(*((void *)&v278 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v278 + 1) + 12))
      {
        uint64_t v220 = *(void *)(*((void *)&v278 + 1) + 16);
        if ((v220 & 4) != 0)
        {
          unint64_t v217 = v220 & 0xFFFFFFFFFFFFFFF8;
          if (v217) {
            goto LABEL_367;
          }
        }
      }
    }
    uint64_t v177 = 0;
    *((void *)&v278 + 1) = 0;
LABEL_294:
    *((void *)&v279 + 1) = a1;
    *(void *)&long long v280 = 0;
    *(void *)&long long v279 = a1[3];
    if (v178 == (unsigned __int8 **)((char *)&v278 + 8)) {
      goto LABEL_334;
    }
    if (v177)
    {
      int v205 = *v177;
      if ((v205 - 4) > 0x1E)
      {
        if ((v205 - 3) >= 0xFFFFFFFE) {
          uint64_t v218 = v177;
        }
        else {
          uint64_t v218 = 0;
        }
        if ((v205 - 3) < 0xFFFFFFFE)
        {
          if (v205 == 3) {
            *((void *)v177 + 1) = 0;
          }
          goto LABEL_296;
        }
        uint64_t v208 = v178;
        unint64_t v207 = (unint64_t)(v218 + 8);
      }
      else
      {
        if ((v177[1] & 0x7F) != 2 && !*((_DWORD *)v177 + 3)) {
          goto LABEL_296;
        }
        uint64_t v206 = *((void *)v177 + 2);
        if ((v206 & 4) == 0) {
          goto LABEL_296;
        }
        unint64_t v207 = v206 & 0xFFFFFFFFFFFFFFF8;
        if (!v207) {
          goto LABEL_296;
        }
        uint64_t v208 = v178;
      }
      unint64_t v255 = (unint64_t)&v278 + 8;
      sub_1CC5FA668(v207 + 16, &v255);
      int v172 = v236;
      uint64_t v178 = v208;
    }
LABEL_296:
    *((void *)&v278 + 1) = *v178;
    if (!*((void *)&v278 + 1)) {
      goto LABEL_297;
    }
    llvm::MetadataTracking::track((uint64_t)&v278 + 8, *((unsigned __int8 **)&v278 + 1), 2);
    uint64_t v177 = (unsigned __int8 *)*((void *)&v278 + 1);
LABEL_334:
    uint64_t v276 = (uint64_t)&unk_1F261CD58;
    if (!v177) {
      goto LABEL_297;
    }
    int v202 = *v177;
    if ((v202 - 4) > 0x1E)
    {
      if ((v202 - 3) >= 0xFFFFFFFE) {
        int v219 = v177;
      }
      else {
        int v219 = 0;
      }
      if ((v202 - 3) < 0xFFFFFFFE)
      {
        int v172 = v236;
        if (v202 == 3) {
          *((void *)v177 + 1) = 0;
        }
        goto LABEL_297;
      }
      unint64_t v204 = (unint64_t)(v219 + 8);
    }
    else
    {
      if ((v177[1] & 0x7F) != 2 && !*((_DWORD *)v177 + 3)) {
        goto LABEL_297;
      }
      uint64_t v203 = *((void *)v177 + 2);
      if ((v203 & 4) == 0) {
        goto LABEL_297;
      }
      unint64_t v204 = v203 & 0xFFFFFFFFFFFFFFF8;
      if (!v204) {
        goto LABEL_297;
      }
    }
    unint64_t v255 = (unint64_t)&v278 + 8;
    sub_1CC5FA668(v204 + 16, &v255);
    int v172 = v236;
    goto LABEL_297;
  }
  if (((1 << v252) & 0x880) != 0)
  {
    unint64_t v173 = (unint64_t)a1;
    unsigned int v174 = 2;
  }
  else
  {
    if (((1 << v252) & 0x1100) == 0) {
      goto LABEL_297;
    }
    unint64_t v173 = (unint64_t)a1;
    unsigned int v174 = 3;
  }
  sub_1CBA61284(v173, 2, v174, v94, v240);
LABEL_297:
  if (v241)
  {
    LODWORD(v255) = v172;
    unsigned int v256 = 1;
    uint64_t v276 = (uint64_t)v125;
    *(void *)&long long v277 = v128;
    DWORD2(v277) = 1;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, void))(*(void *)a3 + 32))(a3, 19, &v255, 1, &v276, 1, 0);
  }
  if (v234)
  {
    uint64_t v257 = 257;
    int v258 = 0;
    LODWORD(v276) = 32;
    DWORD2(v277) = 2;
    LODWORD(v278) = v172;
    LODWORD(v279) = 0;
    DWORD2(v279) = v230;
    DWORD2(v280) = 0;
    uint64_t v248 = 257;
    int v249 = 0;
    uint64_t v179 = llvm::IntegerType::get(****(llvm::IntegerType *****)(a3 + 8), (llvm::LLVMContext *)0x20);
    uint64_t v181 = *(llvm::ConstantInt **)v179;
    unsigned int v182 = *(_DWORD *)(v179 + 8);
    unsigned int v256 = v182 >> 8;
    if (v182 >> 8 > 0x40) {
      operator new[]();
    }
    if (v182 <= 0xFF) {
      LOBYTE(v183) = 0;
    }
    else {
      unint64_t v183 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v182) + 63);
    }
    unint64_t v255 = v183 & 1;
    uint64_t v184 = llvm::ConstantInt::get(v181, (llvm::LLVMContext *)&v255, v180);
    if (v256 >= 0x41 && v255) {
      MEMORY[0x1D25D9CB0](v255, 0x1000C8000313F17);
    }
    uint64_t v281 = (*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)a3 + 16))(a3, &v248, v184);
    uint64_t v282 = v185;
    int v283 = 1;
    uint64_t v246 = 257;
    int v247 = 0;
    uint64_t v186 = llvm::IntegerType::get(****(llvm::IntegerType *****)(a3 + 8), (llvm::LLVMContext *)0x20);
    uint64_t v188 = *(llvm::ConstantInt **)v186;
    unsigned int v189 = *(_DWORD *)(v186 + 8);
    unsigned int v256 = v189 >> 8;
    if (v189 >> 8 >= 0x41) {
      operator new[]();
    }
    unint64_t v255 = 0;
    uint64_t v190 = llvm::ConstantInt::get(v188, (llvm::LLVMContext *)&v255, v187);
    if (v256 >= 0x41 && v255) {
      MEMORY[0x1D25D9CB0](v255, 0x1000C8000313F17);
    }
    uint64_t v284 = (*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)a3 + 16))(a3, &v246, v190);
    uint64_t v285 = v191;
    int v286 = 1;
    uint64_t v192 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*(void *)a3 + 32))(a3, 51, &v257, 1, &v276, 5, 0);
    LODWORD(v255) = v233;
    unsigned int v256 = 1;
    uint64_t v276 = v192;
    *(void *)&long long v277 = v193;
    DWORD2(v277) = 1;
    sub_1CC738034((void *)a3, 126, &v255, (int *)&v276);
  }
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
  uint64_t v29 = 1;
LABEL_309:
  unint64_t v194 = (char *)v272;
  if (v273)
  {
    uint64_t v195 = 40 * v273;
    do
    {
      uint64_t v196 = &v194[v195];
      if (*(_DWORD *)&v194[v195 - 8] >= 0x41u)
      {
        uint64_t v197 = *((void *)v196 - 2);
        if (v197) {
          MEMORY[0x1D25D9CB0](v197, 0x1000C8000313F17);
        }
      }
      if (*((_DWORD *)v196 - 6) >= 0x41u)
      {
        uint64_t v198 = *((void *)v196 - 4);
        if (v198) {
          MEMORY[0x1D25D9CB0](v198, 0x1000C8000313F17);
        }
      }
      v195 -= 40;
    }
    while (v195);
    unint64_t v194 = (char *)v272;
  }
  if (v194 != v274) {
    free(v194);
  }
  return v29;
}

uint64_t sub_1CBA58514(unsigned __int8 **a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  a3[5] = a1[3];
  a3[6] = (unsigned __int8 *)a1;
  unsigned int v8 = a1 + 7;
  unsigned int v9 = a3 + 4;
  if (a1 + 7 == a3 + 4) {
    goto LABEL_5;
  }
  BOOL v10 = *v9;
  if (*v9)
  {
    int v70 = *v10;
    if ((v70 - 4) > 0x1E)
    {
      if ((v70 - 3) >= 0xFFFFFFFE) {
        int v85 = *v9;
      }
      else {
        int v85 = 0;
      }
      if ((v70 - 3) < 0xFFFFFFFE)
      {
        if (v70 == 3) {
          *((void *)v10 + 1) = 0;
        }
        goto LABEL_3;
      }
      unint64_t v72 = (unint64_t)(v85 + 8);
    }
    else
    {
      if ((v10[1] & 0x7F) != 2 && !*((_DWORD *)v10 + 3)) {
        goto LABEL_3;
      }
      uint64_t v71 = *((void *)v10 + 2);
      if ((v71 & 4) == 0) {
        goto LABEL_3;
      }
      unint64_t v72 = v71 & 0xFFFFFFFFFFFFFFF8;
      if (!v72) {
        goto LABEL_3;
      }
    }
    int v104 = a3 + 4;
    sub_1CC5FA668(v72 + 16, &v104);
  }
LABEL_3:
  int v11 = *v8;
  unsigned __int8 *v9 = *v8;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)v9, v11, 2);
  }
LABEL_5:
  unint64_t v12 = a1[4];
  int v13 = *((_DWORD *)v12 + 1);
  unsigned int v14 = *((_DWORD *)v12 + 9);
  if ((v14 & 0x80000000) != 0 && (v14 & 0x7FFFFFFF) < *(_DWORD *)(a2 + 432)) {
    unint64_t v15 = *(void *)(*(void *)(a2 + 424) + 8 * (v14 & 0x7FFFFFFF));
  }
  else {
    unint64_t v15 = 0;
  }
  unint64_t v16 = *((void *)v12 + 10);
  unint64_t v97 = v15;
  if (v13 < 0 && (v13 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432)) {
    unint64_t v17 = *(void *)(*(void *)(a2 + 424) + 8 * (v13 & 0x7FFFFFFF));
  }
  else {
    unint64_t v17 = 0;
  }
  uint64_t v19 = sub_1CB8F1DC4(&v97);
  if (v18 == 1) {
  if (v17 != 65 || (v16 & 7) != 0)
  }
  {
    if ((v17 & 1) != 0 && v97 - 4194324 <= 0x30 && ((1 << (v97 - 20)) & 0x1000000010001) != 0)
    {
      unsigned int v49 = sub_1CB8F1DC4(&v97);
      if (v48 == 1) {
      int v101 = (void *)((8 * v49) | 1);
      }
      LODWORD(v102) = 0;
      LODWORD(v104) = v14;
      v106[0] = 0;
      sub_1CC7382B0((uint64_t)a3);
      uint64_t v51 = v50;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)a4 + 32))(a4, a1);
      llvm::MachineOperand::setReg((uint64_t)(a1[4] + 32), *(_DWORD *)(*(void *)(v51 + 32) + 4));
      (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)a4 + 40))(a4, a1);
      return 1;
    }
    else
    {
      BOOL v41 = 0;
      if ((v17 & 0xFFFFFFFFFFFFFFF9) != 0 && (v17 & 4) != 0)
      {
        char v42 = 3;
        if ((v17 & 1) == 0) {
          char v42 = 19;
        }
        unint64_t v43 = v17 >> v42;
        if ((v17 & 2) != 0) {
          int v44 = (void *)((v17 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v43) | 2);
        }
        else {
          int v44 = (void *)(v17 & 0x8000000000000000 | (8 * v43) | 1);
        }
        unsigned int v94 = v14;
        uint64_t v96 = v44;
        unsigned int v46 = sub_1CB8F1DC4((unint64_t *)&v96);
        if (v45 == 1) {
        unint64_t v47 = v16 / v46;
        }
        if (v16 % v46)
        {
          return 0;
        }
        else
        {
          if (v19 % v46)
          {
            uint64_t v91 = (8 * (v46 + v46 * (v19 / v46))) | 1;
            unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
            unint64_t v61 = IncompleteVirtualRegister & 0x7FFFFFFF;
            *(void *)(*(void *)(a2 + 24) + 16 * v61) = 4;
            unint64_t v62 = *(unsigned int *)(a2 + 432);
            if (v61 >= v62)
            {
              uint64_t v63 = *(void *)(a2 + 440);
              uint64_t v64 = v61 + 1 - v62;
              if (v61 >= *(unsigned int *)(a2 + 436)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v65 = *(_DWORD *)(a2 + 432);
              if (v64)
              {
                uint64_t v66 = (void *)(*(void *)(a2 + 424) + 8 * *(unsigned int *)(a2 + 432));
                uint64_t v67 = ~v61 + v62;
                do
                {
                  *v66++ = v63;
                  BOOL v27 = __CFADD__(v67++, 1);
                }
                while (!v27);
                int v65 = *(_DWORD *)(a2 + 432);
              }
              *(_DWORD *)(a2 + 432) = v65 + v64;
            }
            unsigned int v68 = IncompleteVirtualRegister;
            *(void *)(*(void *)(a2 + 424) + 8 * v61) = v91;
            uint64_t v69 = *(void *)(a2 + 8);
            if (v69)
            {
              unsigned int v86 = IncompleteVirtualRegister;
              (*(void (**)(uint64_t, void))(*(void *)v69 + 24))(v69, IncompleteVirtualRegister);
              unsigned int IncompleteVirtualRegister = v86;
            }
            LODWORD(v101) = IncompleteVirtualRegister;
            LODWORD(v102) = 1;
            LODWORD(v104) = v94;
            v106[0] = 0;
            (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*a3 + 4))(a3, 118, &v101, 1, &v104, 1, 0);
          }
          else
          {
            unsigned int v68 = v14;
          }
          int v101 = v103;
          uint64_t v102 = 0x400000000;
          unint64_t v98 = v100;
          uint64_t v99 = 0x400000000;
          BOOL v41 = sub_1CBA60A7C(v68, a2, (uint64_t)a3, v96, (uint64_t)&v101);
          if (v41)
          {
            int v88 = v13;
            uint64_t v74 = 0;
            uint64_t v75 = 0x800000000000000;
            if ((v17 & 2) == 0) {
              uint64_t v75 = 0x8000000000000;
            }
            uint64_t v76 = v75 & v17;
            uint64_t v77 = (unsigned __int16)(v17 >> 3);
            if (v76) {
LABEL_83:
            }
              llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v73);
            while (v77)
            {
              if (v99 >= (unint64_t)HIDWORD(v99)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v98 + v99) = *((_DWORD *)v101 + v47 + v74);
              LODWORD(v99) = v99 + 1;
              ++v74;
              --v77;
              if (v76) {
                goto LABEL_83;
              }
            }
            v95[0] = v88;
            v95[2] = 1;
            int v78 = (int *)v98;
            int v79 = v99;
            int v104 = v106;
            uint64_t v105 = 0x800000000;
            if (v99 >= 9) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v99)
            {
              uint64_t v80 = 0;
              uint64_t v81 = 4 * v99;
              do
              {
                int v82 = *v78++;
                uint64_t v83 = &v106[v80];
                _DWORD *v83 = v82;
                v83[4] = 0;
                v80 += 6;
                v81 -= 4;
              }
              while (v81);
              int v84 = v105;
            }
            else
            {
              int v84 = 0;
            }
            LODWORD(v105) = v84 + v79;
            (*((void (**)(unsigned __int8 **, uint64_t, _DWORD *, uint64_t, _DWORD *))*a3 + 4))(a3, 77, v95, 1, v106);
            if (v104 != v106) {
              free(v104);
            }
            llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
          }
          if (v98 != v100) {
            free(v98);
          }
          if (v101 != v103) {
            free(v101);
          }
        }
      }
    }
  }
  else
  {
    uint64_t v89 = v19;
    unsigned int v93 = v14;
    unsigned int v92 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
    unint64_t v20 = v92 & 0x7FFFFFFF;
    *(void *)(*(void *)(a2 + 24) + 16 * v20) = 4;
    unint64_t v21 = *(unsigned int *)(a2 + 432);
    if (v20 >= v21)
    {
      uint64_t v22 = *(void *)(a2 + 440);
      uint64_t v23 = v20 + 1 - v21;
      if (v20 >= *(unsigned int *)(a2 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v24 = *(_DWORD *)(a2 + 432);
      if (v23)
      {
        uint64_t v25 = (void *)(*(void *)(a2 + 424) + 8 * v21);
        uint64_t v26 = ~v20 + v21;
        do
        {
          *v25++ = v22;
          BOOL v27 = __CFADD__(v26++, 1);
        }
        while (!v27);
        int v24 = *(_DWORD *)(a2 + 432);
      }
      *(_DWORD *)(a2 + 432) = v24 + v23;
    }
    unint64_t v28 = v16 & 0xFFFFFFFFFFFFFFF0;
    *(void *)(*(void *)(a2 + 424) + 8 * v20) = 129;
    uint64_t v29 = *(void *)(a2 + 8);
    if (v29) {
      (*(void (**)(uint64_t, void))(*(void *)v29 + 24))(v29, v92);
    }
    unint64_t v31 = sub_1CB8F1DC4(&v97);
    if (v30 == 1) {
    if (v28 + 16 <= v31)
    }
    {
      int v32 = v93;
    }
    else
    {
      int v87 = v13;
      uint64_t v90 = (8 * v89 + 256) & 0x7FFFFFF00 | 1;
      int v32 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
      unint64_t v33 = v32 & 0x7FFFFFFF;
      *(void *)(*(void *)(a2 + 24) + 16 * v33) = 4;
      unint64_t v34 = *(unsigned int *)(a2 + 432);
      if (v33 >= v34)
      {
        uint64_t v35 = *(void *)(a2 + 440);
        uint64_t v36 = v33 + 1 - v34;
        if (v33 >= *(unsigned int *)(a2 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v37 = *(_DWORD *)(a2 + 432);
        if (v36)
        {
          char v38 = (void *)(*(void *)(a2 + 424) + 8 * *(unsigned int *)(a2 + 432));
          uint64_t v39 = ~v33 + v34;
          do
          {
            *v38++ = v35;
            BOOL v27 = __CFADD__(v39++, 1);
          }
          while (!v27);
          int v37 = *(_DWORD *)(a2 + 432);
        }
        *(_DWORD *)(a2 + 432) = v37 + v36;
      }
      *(void *)(*(void *)(a2 + 424) + 8 * v33) = v90;
      uint64_t v40 = *(void *)(a2 + 8);
      int v13 = v87;
      if (v40) {
        (*(void (**)(uint64_t))(*(void *)v40 + 24))(v40);
      }
      LODWORD(v101) = v32;
      LODWORD(v102) = 1;
      LODWORD(v104) = v93;
      v106[0] = 0;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*a3 + 4))(a3, 118, &v101, 1, &v104, 1, 0);
    }
    BOOL v41 = 1;
    LODWORD(v101) = v92;
    LODWORD(v102) = 1;
    LODWORD(v104) = v32;
    v106[0] = 0;
    uint64_t v52 = (void *)sub_1CC7383D8(a3, (unint64_t *)&v101, (int *)&v104, v16 & 0xFFFFFFFFFFFFFFF0);
    int v101 = (void *)4194324;
    LODWORD(v102) = 0;
    int v104 = v52;
    uint64_t v105 = v53;
    v106[0] = 1;
    uint64_t v54 = (void *)sub_1CC7382B0((uint64_t)a3);
    LODWORD(v101) = v13;
    LODWORD(v102) = 1;
    int v104 = v54;
    uint64_t v105 = v55;
    v106[0] = 1;
    unint64_t v98 = (void *)257;
    LODWORD(v99) = 0;
    uint64_t v56 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a3[1], (llvm::LLVMContext *)0x20);
    uint64_t v57 = llvm::ConstantInt::get(v56, v28 == v16, (const llvm::APInt *)1);
    uint64_t v107 = (*((uint64_t (**)(unsigned __int8 **, void **, void *))*a3 + 2))(a3, &v98, v57);
    uint64_t v108 = v58;
    int v109 = 1;
    (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*a3 + 4))(a3, 205, &v101, 1, &v104, 2, 0);
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
  }
  return v41;
}

uint64_t sub_1CBA58FA0(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  *(void *)(a3 + 40) = a1[3];
  *(void *)(a3 + 48) = a1;
  unsigned int v8 = a1 + 7;
  unsigned int v9 = (unsigned __int8 **)(a3 + 32);
  if (a1 + 7 == (unsigned __int8 **)(a3 + 32)) {
    goto LABEL_5;
  }
  BOOL v10 = *v9;
  if (*v9)
  {
    int v61 = *v10;
    if ((v61 - 4) > 0x1E)
    {
      if ((v61 - 3) >= 0xFFFFFFFE) {
        uint64_t v64 = *v9;
      }
      else {
        uint64_t v64 = 0;
      }
      if ((v61 - 3) < 0xFFFFFFFE)
      {
        if (v61 == 3) {
          *((void *)v10 + 1) = 0;
        }
        goto LABEL_3;
      }
      unint64_t v63 = (unint64_t)(v64 + 8);
    }
    else
    {
      if ((v10[1] & 0x7F) != 2 && !*((_DWORD *)v10 + 3)) {
        goto LABEL_3;
      }
      uint64_t v62 = *((void *)v10 + 2);
      if ((v62 & 4) == 0) {
        goto LABEL_3;
      }
      unint64_t v63 = v62 & 0xFFFFFFFFFFFFFFF8;
      if (!v63) {
        goto LABEL_3;
      }
    }
    uint64_t v75 = a3 + 32;
    sub_1CC5FA668(v63 + 16, &v75);
  }
LABEL_3:
  int v11 = *v8;
  unsigned __int8 *v9 = *v8;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)v9, v11, 2);
  }
LABEL_5:
  unint64_t v12 = a1[4];
  if (v12[96] != 1) {
    return 0;
  }
  int v13 = *((_DWORD *)v12 + 1);
  int v14 = *((_DWORD *)v12 + 17);
  if (v13 < 0 && (v13 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432)) {
    unint64_t v15 = *(void *)(*(void *)(a2 + 424) + 8 * (v13 & 0x7FFFFFFF));
  }
  else {
    unint64_t v15 = 0;
  }
  int v16 = *((_DWORD *)v12 + 9);
  unint64_t v17 = *((void *)v12 + 14);
  unint64_t v74 = v15;
  if (v14 < 0 && (v14 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432)) {
    unint64_t v18 = *(void *)(*(void *)(a2 + 424) + 8 * (v14 & 0x7FFFFFFF));
  }
  else {
    unint64_t v18 = 0;
  }
  unint64_t v73 = v18;
  if (v15 != 257 && v15 != 129) {
    return 0;
  }
  if (v18 != 65 || (v17 & 7) != 0)
  {
    uint64_t v50 = 0;
    if (v18 - 4194324 <= 0x30 && ((1 << (v18 - 20)) & 0x1000000010001) != 0)
    {
      unsigned int v58 = sub_1CB8F1DC4(&v73);
      if (v57 == 1) {
      uint64_t v83 = (8 * v58) | 1;
      }
      uint64_t v50 = 1;
      int v84 = 0;
      LODWORD(v75) = v14;
      int v77 = 0;
      sub_1CC7382B0(a3);
      uint64_t v60 = v59;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)a4 + 32))(a4, a1);
      llvm::MachineOperand::setReg((uint64_t)(a1[4] + 64), *(_DWORD *)(*(void *)(v60 + 32) + 4));
      (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)a4 + 40))(a4, a1);
    }
  }
  else
  {
    int v66 = v16;
    int v68 = v13;
    unint64_t v20 = sub_1CB8F1DC4(&v74);
    if (v19 == 1) {
    unint64_t v22 = sub_1CB8F1DC4(&v73);
    }
    if (v21 == 1) {
    unint64_t v23 = v20 / v22;
    }
    unint64_t v25 = sub_1CB8F1DC4(&v74);
    if (v24 == 1) {
    unint64_t v26 = v17 / v25;
    }
    uint64_t v28 = sub_1CB8F1DC4(&v74);
    if (v27 == 1) {
    uint64_t v69 = v28 * v26;
    }
    uint64_t v70 = (8 * (unsigned __int16)v23) | 0x400004;
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
    unint64_t v30 = IncompleteVirtualRegister & 0x7FFFFFFF;
    *(void *)(*(void *)(a2 + 24) + 16 * v30) = 4;
    unint64_t v31 = *(unsigned int *)(a2 + 432);
    if (v30 >= v31)
    {
      uint64_t v32 = *(void *)(a2 + 440);
      uint64_t v33 = v30 + 1 - v31;
      if (v30 >= *(unsigned int *)(a2 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v34 = *(_DWORD *)(a2 + 432);
      if (v33)
      {
        uint64_t v35 = (void *)(*(void *)(a2 + 424) + 8 * v31);
        uint64_t v36 = ~v30 + v31;
        do
        {
          *v35++ = v32;
          BOOL v37 = __CFADD__(v36++, 1);
        }
        while (!v37);
        int v34 = *(_DWORD *)(a2 + 432);
      }
      *(_DWORD *)(a2 + 432) = v34 + v33;
    }
    *(void *)(*(void *)(a2 + 424) + 8 * v30) = v70;
    uint64_t v38 = *(void *)(a2 + 8);
    if (v38) {
      (*(void (**)(uint64_t))(*(void *)v38 + 24))(v38);
    }
    LODWORD(v83) = IncompleteVirtualRegister;
    int v84 = 1;
    LODWORD(v75) = v66;
    int v77 = 0;
    uint64_t v39 = sub_1CC7383D8((void *)a3, (unint64_t *)&v83, (int *)&v75, v69);
    uint64_t v65 = v40;
    uint64_t v67 = v39;
    int v41 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
    unint64_t v42 = v41 & 0x7FFFFFFF;
    *(void *)(*(void *)(a2 + 24) + 16 * v42) = 4;
    unint64_t v43 = *(unsigned int *)(a2 + 432);
    if (v42 >= v43)
    {
      uint64_t v44 = *(void *)(a2 + 440);
      uint64_t v45 = v42 + 1 - v43;
      if (v42 >= *(unsigned int *)(a2 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v46 = *(_DWORD *)(a2 + 432);
      if (v45)
      {
        unint64_t v47 = (void *)(*(void *)(a2 + 424) + 8 * *(unsigned int *)(a2 + 432));
        uint64_t v48 = ~v42 + v43;
        do
        {
          *v47++ = v44;
          BOOL v37 = __CFADD__(v48++, 1);
        }
        while (!v37);
        int v46 = *(_DWORD *)(a2 + 432);
      }
      *(_DWORD *)(a2 + 432) = v46 + v45;
    }
    *(void *)(*(void *)(a2 + 424) + 8 * v42) = v70;
    uint64_t v49 = *(void *)(a2 + 8);
    if (v49) {
      (*(void (**)(uint64_t))(*(void *)v49 + 24))(v49);
    }
    uint64_t v50 = 1;
    LODWORD(v83) = v41;
    int v84 = 1;
    uint64_t v75 = v67;
    uint64_t v76 = v65;
    int v77 = 1;
    int v78 = v14;
    int v79 = 0;
    uint64_t v71 = 257;
    int v72 = 0;
    uint64_t v51 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a3 + 8), (llvm::LLVMContext *)0x20);
    uint64_t v52 = llvm::ConstantInt::get(v51, ((v17 - v69) >> 3), (const llvm::APInt *)1);
    uint64_t v80 = (*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)a3 + 16))(a3, &v71, v52);
    uint64_t v81 = v53;
    int v82 = 1;
    uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*(void *)a3 + 32))(a3, 204, &v83, 1, &v75, 3, 0);
    LODWORD(v83) = v68;
    int v84 = 1;
    uint64_t v75 = v54;
    uint64_t v76 = v55;
    int v77 = 1;
    sub_1CC7382B0(a3);
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
  }
  return v50;
}

uint64_t sub_1CBA59620(llvm::MachineInstr *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)a1 + 4);
  uint64_t v7 = *(unsigned int *)(v6 + 4);
  int v57 = *(_DWORD *)(v6 + 4);
  unsigned int v8 = *(_DWORD *)(v6 + 36);
  if ((v8 & 0x80000000) != 0 && (v8 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a2 + 432)) {
    unint64_t v9 = *(void *)(*(void *)(a2 + 424) + 8 * (v8 & 0x7FFFFFFF));
  }
  else {
    unint64_t v9 = 0;
  }
  unint64_t v56 = v9;
  int v11 = sub_1CB8F1DC4(&v56);
  if (v10 == 1) {
  uint64_t result = 0;
  }
  if (v11 <= 31)
  {
    if (v11 == 1)
    {
      uint64_t v38 = (*(uint64_t (**)(void))(**(void **)(*(void *)a2 + 16) + 176))(*(void *)(*(void *)a2 + 16));
      if ((v7 & 0x80000000) != 0) {
        uint64_t v39 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v39 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v7);
      }
      uint64_t v40 = *v39;
      if (*v39)
      {
        do
        {
          uint64_t v41 = *(void *)(v40 + 24);
          if (v8 - 1 <= 0x3FFFFFFE) {
            llvm::MachineOperand::substPhysReg((unsigned int *)v40, v8, v38);
          }
          else {
            llvm::MachineOperand::setReg(v40, v8);
          }
          uint64_t v40 = v41;
        }
        while (v41);
      }
    }
    else
    {
      if (v11 != 16) {
        return result;
      }
      *(void *)&long long v63 = 257;
      DWORD2(v63) = 0;
      LODWORD(v58) = v8;
      LODWORD(v60) = 0;
      (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, void))(*(void *)a3 + 32))(a3, 118, &v63, 1, &v58, 1, 0);
      int v54 = *(_DWORD *)(*(void *)(v13 + 32) + 4);
      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
      unint64_t v15 = IncompleteVirtualRegister & 0x7FFFFFFF;
      *(void *)(*(void *)(a2 + 24) + 16 * v15) = 4;
      unint64_t v16 = *(unsigned int *)(a2 + 432);
      if (v15 >= v16)
      {
        uint64_t v17 = *(void *)(a2 + 440);
        uint64_t v18 = v15 + 1 - v16;
        if (v15 >= *(unsigned int *)(a2 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v19 = *(_DWORD *)(a2 + 432);
        if (v18)
        {
          unint64_t v20 = (void *)(*(void *)(a2 + 424) + 8 * *(unsigned int *)(a2 + 432));
          uint64_t v21 = ~v15 + v16;
          do
            *v20++ = v17;
          while (!__CFADD__(v21++, 1));
          int v19 = *(_DWORD *)(a2 + 432);
        }
        *(_DWORD *)(a2 + 432) = v19 + v18;
      }
      *(void *)(*(void *)(a2 + 424) + 8 * v15) = 257;
      uint64_t v23 = *(void *)(a2 + 8);
      if (v23) {
        (*(void (**)(uint64_t))(*(void *)v23 + 24))(v23);
      }
      int v55 = IncompleteVirtualRegister;
      int v24 = sub_1CC7390C0((void *)a3, 2524, &v55, 1, 0);
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      LODWORD(v58) = 0;
      HIDWORD(v58) = v54;
      uint64_t v61 = 0;
      llvm::MachineInstr::addOperand(v25, v24, (const llvm::MachineOperand *)&v58);
      *(void *)&long long v63 = 129;
      DWORD2(v63) = 0;
      uint64_t v26 = llvm::IntegerType::get(****(llvm::IntegerType *****)(a3 + 8), (llvm::LLVMContext *)0x10);
      uint64_t v28 = *(llvm::ConstantInt **)v26;
      unsigned int v29 = *(_DWORD *)(v26 + 8);
      LODWORD(v59) = v29 >> 8;
      if (v29 >> 8 > 0x40) {
        operator new[]();
      }
      if (v29 <= 0xFF) {
        LOBYTE(v30) = 0;
      }
      else {
        unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v29) + 63);
      }
      unint64_t v58 = v30 & 0x10;
      unint64_t v31 = llvm::ConstantInt::get(v28, (llvm::LLVMContext *)&v58, v27);
      if (v59 >= 0x41)
      {
        if (v58) {
          MEMORY[0x1D25D9CB0](v58, 0x1000C8000313F17);
        }
      }
      (*(void (**)(uint64_t, long long *, void *))(*(void *)a3 + 16))(a3, &v63, v31);
      int v33 = *(_DWORD *)(*(void *)(v32 + 32) + 4);
      *(void *)&long long v63 = 257;
      DWORD2(v63) = 0;
      LODWORD(v58) = v55;
      LODWORD(v60) = 0;
      LODWORD(v61) = v33;
      int v62 = 0;
      (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, void))(*(void *)a3 + 32))(a3, 128, &v63, 1, &v58, 2, 0);
      int v35 = *(_DWORD *)(*(void *)(v34 + 32) + 4);
      LODWORD(v63) = v7;
      DWORD2(v63) = 1;
      LODWORD(v58) = v35;
      LODWORD(v60) = 0;
      (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, void))(*(void *)a3 + 32))(a3, 119, &v63, 1, &v58, 1, 0);
    }
    goto LABEL_36;
  }
  if (v11 == 32)
  {
    uint64_t v36 = sub_1CC7390C0((void *)a3, 2524, &v57, 1, 0);
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    LODWORD(v58) = 0;
    HIDWORD(v58) = v8;
    uint64_t v61 = 0;
    llvm::MachineInstr::addOperand(v37, v36, (const llvm::MachineOperand *)&v58);
LABEL_36:
    llvm::MachineInstr::eraseFromParent(a1);
    return 1;
  }
  if (v11 == 64)
  {
    LODWORD(v58) = v8;
    LODWORD(v60) = 0;
    sub_1CC7363F0((void *)a3, 0x101uLL, (int *)&v58);
    uint64_t v43 = *(void *)(v42 + 32);
    int v44 = *(_DWORD *)(v43 + 4);
    int v45 = *(_DWORD *)(v43 + 36);
    *(void *)&long long v63 = 257;
    DWORD2(v63) = 0;
    int v46 = sub_1CD62DFF0((void *)a3, 2524, &v63, 1, 0);
    uint64_t v48 = v47;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    LODWORD(v58) = 0;
    HIDWORD(v58) = v44;
    uint64_t v61 = 0;
    llvm::MachineInstr::addOperand(v47, v46, (const llvm::MachineOperand *)&v58);
    int v49 = *(_DWORD *)(*((void *)v48 + 4) + 4);
    *(void *)&long long v63 = 257;
    DWORD2(v63) = 0;
    uint64_t v50 = sub_1CD62DFF0((void *)a3, 2524, &v63, 1, 0);
    uint64_t v52 = v51;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    LODWORD(v58) = 0;
    HIDWORD(v58) = v45;
    uint64_t v61 = 0;
    llvm::MachineInstr::addOperand(v51, v50, (const llvm::MachineOperand *)&v58);
    int v53 = *(_DWORD *)(*((void *)v52 + 4) + 4);
    LODWORD(v63) = v7;
    DWORD2(v63) = 1;
    LODWORD(v58) = v53;
    LODWORD(v60) = 0;
    LODWORD(v61) = v49;
    int v62 = 0;
    (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, void))(*(void *)a3 + 32))(a3, 76, &v63, 1, &v58, 2, 0);
    goto LABEL_36;
  }
  return result;
}

void sub_1CBA59C8C(uint64_t a1)
{
  *(void *)a1 = &unk_1F261CA88;
  sub_1CBA6249C((char **)(a1 + 35456));
  for (uint64_t i = 0; i != -35448; i -= 168)
    sub_1CBA627B0((char **)(a1 + 35296 + i));

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CBA59D24(uint64_t a1, char a2, const void *a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  sub_1CC70A830(0, a3, a4, (uint64_t)v8);
  uint64_t v6 = sub_1CBA59E14(a1, a2, (uint64_t)v8);
  if (v9 == v8)
  {
    (*(void (**)(void *))(v8[0] + 32))(v8);
  }
  else if (v9)
  {
    (*(void (**)(void))(*v9 + 40))();
  }
  return v6;
}

uint64_t sub_1CBA59E14(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  sub_1CBA5A4A0((uint64_t)v6, a3);
  if (v7)
  {
    if (v7 == v6)
    {
      unint64_t v9 = v8;
      (*(void (**)(void *, void *))(v6[0] + 24))(v6, v8);
    }
    else
    {
      unint64_t v9 = (void *)(*(uint64_t (**)(void))(*v7 + 16))();
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  char v10 = a2;
  unint64_t v12 = 0;
  sub_1CBA5A04C((unsigned int *)(a1 + 8), (unint64_t)v8);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  if (v9 == v8)
  {
    (*(void (**)(void *))(v8[0] + 32))(v8);
  }
  else if (v9)
  {
    (*(void (**)(void))(*v9 + 40))();
  }
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return a1;
}

uint64_t sub_1CBA5A04C(unsigned int *a1, unint64_t a2)
{
  unint64_t v3 = sub_1CBA5A0B0(a1, a2, 1);
  uint64_t v4 = sub_1CBA5A4A0(*(void *)a1 + 72 * a1[2], v3);
  *(unsigned char *)(v4 + 32) = *(unsigned char *)(v3 + 32);
  uint64_t result = sub_1CBA5A408(v4 + 40, v3 + 40);
  ++a1[2];
  return result;
}

unint64_t sub_1CBA5A0B0(unsigned int *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[2];
  unint64_t v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)a1[3])
  {
    unint64_t v7 = *(void *)a1 + 72 * v4;
    if (*(void *)a1 <= a2 && v7 > a2)
    {
      unint64_t v9 = a2 - *(void *)a1;
      sub_1CBA5A11C(a1, v5);
      return *(void *)a1 + v9;
    }
    else
    {
      sub_1CBA5A11C(a1, v5);
    }
  }
  return a2;
}

void sub_1CBA5A11C(unsigned int *a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = a1[3];
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = malloc_type_malloc(72 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  unint64_t v7 = v6;
  sub_1CBA5A1D8(a1, (uint64_t)v6);
  if (*(unsigned int **)a1 != a1 + 4) {
    free(*(void **)a1);
  }
  *(void *)a1 = v7;
  a1[3] = v5;
}

unsigned int *sub_1CBA5A1D8(unsigned int *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2)
  {
    unint64_t v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)result;
    uint64_t v7 = 72 * v2;
    do
    {
      uint64_t v8 = a2 + v5;
      uint64_t v9 = v6 + v5;
      uint64_t v10 = *(void *)(v6 + v5 + 24);
      if (v10)
      {
        if (v9 == v10)
        {
          *(void *)(v8 + 24) = v8;
          uint64_t result = (unsigned int *)(*(uint64_t (**)(void))(**(void **)(v9 + 24) + 24))(*(void *)(v9 + 24));
        }
        else
        {
          *(void *)(v8 + 24) = v10;
          *(void *)(v9 + 24) = 0;
        }
      }
      else
      {
        *(void *)(v8 + 24) = 0;
      }
      uint64_t v11 = a2 + v5;
      uint64_t v12 = v6 + v5;
      *(unsigned char *)(a2 + v5 + 32) = *(unsigned char *)(v6 + v5 + 32);
      uint64_t v13 = *(void *)(v6 + v5 + 64);
      if (v13)
      {
        if (v12 + 40 == v13)
        {
          *(void *)(v11 + 64) = v11 + 40;
          uint64_t result = (unsigned int *)(*(uint64_t (**)(void))(**(void **)(v12 + 64) + 24))(*(void *)(v12 + 64));
        }
        else
        {
          *(void *)(v11 + 64) = v13;
          *(void *)(v12 + 64) = 0;
        }
      }
      else
      {
        *(void *)(v11 + 64) = 0;
      }
      v5 += 72;
    }
    while (v7 != v5);
    uint64_t v14 = v4[2];
    if (v14)
    {
      uint64_t v15 = 0;
      uint64_t v16 = *(void *)v4;
      uint64_t v17 = 72 * v14;
      uint64_t v18 = v16;
      do
      {
        uint64_t v19 = v18 + v17;
        uint64_t v20 = v18 + v17 - 32;
        uint64_t v21 = *(void *)(v18 + v17 - 8);
        if (v20 == v21)
        {
          (*(void (**)(uint64_t))(*(void *)v20 + 32))(v20);
        }
        else if (v21)
        {
          (*(void (**)(void))(*(void *)v21 + 40))(*(void *)(v18 + v17 - 8));
        }
        uint64_t result = (unsigned int *)(v19 - 72);
        uint64_t v22 = *(void *)(v18 + v17 - 48);
        if (v19 - 72 == v22)
        {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 32))(result);
        }
        else if (v22)
        {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v22 + 40))(*(void *)(v18 + v17 - 48));
        }
        v15 += 72;
        v18 -= 72;
        v16 -= 72;
      }
      while (v17 != v15);
    }
  }
  return result;
}

uint64_t sub_1CBA5A408(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1CBA5A4A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1CBA5A538(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  sub_1CBA5A4A0((uint64_t)v10, a3);
  sub_1CBA5A408((uint64_t)v8, a4);
  if (v11)
  {
    if (v11 == v10)
    {
      uint64_t v13 = v12;
      (*(void (**)(void *, void *))(v10[0] + 24))(v10, v12);
    }
    else
    {
      uint64_t v13 = (void *)(*(uint64_t (**)(void))(*v11 + 16))();
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  char v14 = a2;
  if (v9)
  {
    if (v9 == v8)
    {
      uint64_t v16 = v15;
      (*(void (**)(void *, void *))(v8[0] + 24))(v8, v15);
    }
    else
    {
      uint64_t v16 = (void *)(*(uint64_t (**)(void))(*v9 + 16))();
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  sub_1CBA5A04C((unsigned int *)(a1 + 8), (unint64_t)v12);
  if (v16 == v15)
  {
    (*(void (**)(void *))(v15[0] + 32))(v15);
  }
  else if (v16)
  {
    (*(void (**)(void))(*v16 + 40))();
  }
  if (v13 == v12)
  {
    (*(void (**)(void *))(v12[0] + 32))(v12);
  }
  else if (v13)
  {
    (*(void (**)(void))(*v13 + 40))();
  }
  if (v9 == v8)
  {
    (*(void (**)(void *))(v8[0] + 32))(v8);
  }
  else if (v9)
  {
    (*(void (**)(void))(*v9 + 40))();
  }
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  return a1;
}

__n128 sub_1CBA5A854(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25F27C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

uint64_t sub_1CBA5A8AC(uint64_t result, void *a2)
{
  *a2 = &unk_1F25F2810;
  a2[1] = *(void *)(result + 8);
  return result;
}

__n128 sub_1CBA5A8D8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25F2858;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

uint64_t sub_1CBA5A930(uint64_t result, void *a2)
{
  *a2 = &unk_1F25F28A0;
  a2[1] = *(void *)(result + 8);
  return result;
}

unint64_t sub_1CBA5A95C(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  BOOL v3 = (a2 & 0xFFFFFFFFFFFFFFF9) != 0 && (a2 & 2) != 0 && (a2 & 4) == 0;
  uint64_t v4 = sub_1CB8F1DC4(&v12);
  char v5 = 35;
  if ((v12 & 4) == 0) {
    char v5 = 19;
  }
  unint64_t v6 = ((v12 >> v5) & 0xFFFFFF) << 32;
  if ((v12 & 0xFFFFFFFFFFFFFFF9) != 0 && (v12 & 6) == 2) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = 0;
  }
  unint64_t v9 = (v4 << 16) & 0xFFFF0000 | ((unint64_t)((a1 & 0xFFFFFFFF00000000) == 0x100000000) << 56) | v8;
  uint64_t v10 = 4;
  if (v3) {
    uint64_t v10 = 6;
  }
  else {
    unint64_t v9 = (v4 << 16) & 0xFFFFFFFF0000 | ((unint64_t)((a1 & 0xFFFFFFFF00000000) == 0x100000000) << 48);
  }
  return v10 | (8 * (v9 | (unsigned __int16)a1)) | v12 & 0x8000000000000000;
}

uint64_t sub_1CBA5AA3C()
{
  return 1;
}

uint64_t sub_1CBA5AA44(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F28E8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA5AA6C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

BOOL sub_1CBA5AA78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  unint64_t v3 = *(void *)(v2 + 8 * *(unsigned int *)(a1 + 8));
  unint64_t v4 = (unsigned __int16)(v3 >> 3);
  unint64_t v5 = (unsigned __int16)(v3 >> 19);
  if ((v3 & 2) == 0) {
    unint64_t v5 = (v3 >> 19);
  }
  if ((v3 & 4) != 0) {
    unint64_t v4 = v5;
  }
  if (v3) {
    unint64_t v6 = (v3 >> 3);
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v7 = sub_1CB8F1DC4((unint64_t *)(v2 + 8 * *(unsigned int *)(a1 + 12)));
  if (v8 == 1)
  {
    unint64_t v10 = v7;
    unint64_t v7 = v10;
  }
  return v7 < v6;
}

void *sub_1CBA5AB04(_DWORD *a1, void *a2)
{
  unint64_t v7 = 0;
  char v4 = sub_1CBA5AB68((uint64_t)a1, a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = sub_1CBA5AC08(a1, (uint64_t)a2, a2, v7);
    *unint64_t v5 = *a2;
    *((unsigned char *)v5 + 8) = 0;
  }
  return v5;
}

uint64_t sub_1CBA5AB68(uint64_t a1, void *a2, void *a3)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    int v4 = v3 - 1;
    unsigned int v5 = (37 * (*a2 & 0xFFFFFFFA | (4 * (*a2 & 1)) | (*a2 >> 2) & 1)) & (v3 - 1);
    unint64_t v6 = (void *)(*(void *)a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      unint64_t v8 = 0;
      int v9 = 1;
      while (v7 != 2)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == 4;
        }
        if (v10) {
          unint64_t v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        unint64_t v6 = (void *)(*(void *)a1 + 16 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*a2 == *v6) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v8) {
        unint64_t v6 = v8;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t result = 0;
  }
  *a3 = v6;
  return result;
}

void *sub_1CBA5AC08(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = a1[2];
  unsigned int v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CBA5ACBC((uint64_t)a1, v7);
  int v9 = 0;
  sub_1CBA5AB68((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != 2) {
    --a1[3];
  }
  return a4;
}

void *sub_1CBA5ACBC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD411BBC(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = 2;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CBA5AD88(uint64_t result, uint64_t a2)
{
  long long v2 = xmmword_1CD923660;
  if ((int)result <= 2560)
  {
    if ((result - 2545) < 0x10)
    {
      long long v3 = xmmword_1CDB0E090;
      int v4 = 6;
      goto LABEL_10;
    }
    if ((result - 2471) < 4)
    {
      long long v3 = xmmword_1CDB0E0A0;
      int v4 = 8;
      goto LABEL_10;
    }
    long long v3 = xmmword_1CDB0E040;
LABEL_9:
    int v4 = 7;
    goto LABEL_10;
  }
  if ((result - 2561) < 0x10)
  {
    long long v3 = xmmword_1CDB0E080;
    goto LABEL_9;
  }
  if (result == 2703)
  {
    long long v3 = xmmword_1CDB0E050;
    long long v2 = xmmword_1CDB0E060;
    int v4 = 4;
  }
  else
  {
    long long v3 = xmmword_1CDB0E070;
    long long v2 = xmmword_1CDB0E060;
    int v4 = 3;
  }
LABEL_10:
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 32) = v4;
  return result;
}

unint64_t sub_1CBA5AE38(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(v2 + 32 * a2);
  if (v3 == 2)
  {
    uint64_t v7 = *(void *)(v2 + 32 * a2 + 16);
    unsigned int v8 = (uint64_t *)(v7 + 24);
    if (*(_DWORD *)(v7 + 32) >= 0x41u) {
      unsigned int v8 = (uint64_t *)*v8;
    }
    return *v8;
  }
  else if (v3 == 1)
  {
    return *(void *)(v2 + 32 * a2 + 16);
  }
  else
  {
    sub_1CC73C210(*(_DWORD *)(v2 + 32 * a2 + 4), *(void *)(*(void *)(*(void *)(a1 + 24) + 32) + 40), (uint64_t)&v9);
    if (v11)
    {
      if (v10 > 0x40)
      {
        if (v9) {
          MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
        }
        unint64_t v5 = 0;
        uint64_t v6 = 0;
      }
      else
      {
        unint64_t v5 = (v9 << -(char)v10 >> -(char)v10) & 0xFFFFFFFFFFFFFF00;
        uint64_t v6 = (v9 << -(char)v10 >> -(char)v10);
      }
      return v6 | v5;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t sub_1CBA5AF20(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 24) + 32) + 40);
  if (a2 == -1 || sub_1CBA5AF98((unsigned __int8 *)(*(void *)(a1 + 32) + 32 * a2), v5)) {
    return sub_1CBA5AF98((unsigned __int8 *)(*(void *)(a1 + 32) + 32 * a3), v5) ^ 1;
  }
  else {
    return 2;
  }
}

uint64_t sub_1CBA5AF98(unsigned __int8 *a1, uint64_t a2)
{
  if (*a1)
  {
    if (*a1 - 1 < 2) {
      return 1;
    }
  }
  else
  {
    uint64_t v2 = *((unsigned int *)a1 + 1);
    if ((v2 & 0x80000000) != 0) {
      int v3 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v2 & 0x7FFFFFFF) + 8);
    }
    else {
      int v3 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v2);
    }
    uint64_t v4 = *v3;
    if (v4)
    {
      if (*(unsigned char *)(v4 + 3) & 1) != 0 || (uint64_t v4 = *(void *)(v4 + 24)) != 0 && (*(unsigned char *)(v4 + 3))
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          if (**(_WORD **)(v5 + 16) == 120) {
            return 1;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CBA5B01C(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if ((a1 & 0x80000000) != 0 && (a1 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a2 + 432))
  {
    unint64_t v8 = *(void *)(*(void *)(a2 + 424) + 8 * (a1 & 0x7FFFFFFF));
    if ((v8 & 2) != 0)
    {
      char v9 = 35;
      char v10 = 19;
      if ((v8 & 4) == 0) {
        char v9 = 19;
      }
      unint64_t v11 = v8 >> v9;
      if ((v8 & 4) == 0) {
        char v10 = 3;
      }
      if (v8) {
        char v10 = 3;
      }
      unint64_t v12 = (void *)((8 * (unsigned __int16)(v8 >> v10)) & 0xFFFFF8000007FFFFLL | ((v11 & 0xFFFFFF) << 19) | 2);
      uint64_t v13 = 0x800000000000000;
      goto LABEL_16;
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  char v14 = 3;
  if ((v8 & 1) == 0) {
    char v14 = 19;
  }
  unint64_t v12 = (void *)(v8 & 0x8000000000000000 | (8 * (v8 >> v14)) | 1);
  if ((a1 & 0x80000000) == 0)
  {
    uint64_t v15 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
    uint64_t v13 = 0x8000000000000;
    goto LABEL_17;
  }
  uint64_t v13 = 0x8000000000000;
LABEL_16:
  uint64_t v15 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
LABEL_17:
  uint64_t v16 = *v15;
  if (v16 && ((*(unsigned char *)(v16 + 3) & 1) != 0 || (uint64_t v16 = *(void *)(v16 + 24)) != 0 && (*(unsigned char *)(v16 + 3) & 1) != 0)) {
    uint64_t v17 = *(void *)(v16 + 8);
  }
  else {
    uint64_t v17 = 0;
  }
  if ((v8 & v13) != 0) {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  }
  int v18 = **(unsigned __int16 **)(v17 + 16);
  if (v18 == 119)
  {
    int v55 = v57;
    uint64_t v56 = 0x400000000;
    if (sub_1CBA5B01C(*(unsigned int *)(*(void *)(v17 + 32) + 36), a2, a3, &v55))
    {
      if (v56)
      {
        unint64_t v24 = 0;
        do
        {
          uint64_t v48 = v12;
          int v49 = 0;
          LODWORD(v51) = *((_DWORD *)v55 + v24);
          v54[0] = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a3 + 32))(a3, 119, &v48, 1, &v51, 1, 0);
          unint64_t v26 = *(unsigned int *)(a4 + 8);
          if (v26 >= *(unsigned int *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a4 + 4 * v26) = *(_DWORD *)(*(void *)(v25 + 32) + 4);
          ++*(_DWORD *)(a4 + 8);
          ++v24;
        }
        while (v24 < v56);
      }
      BOOL v27 = v55;
      if (v55 == v57) {
        goto LABEL_79;
      }
      goto LABEL_78;
    }
    if (v55 != v57) {
      free(v55);
    }
    int v18 = **(unsigned __int16 **)(v17 + 16);
  }
  int v19 = (unsigned __int16)(v8 >> 3);
  if (v18 == 78)
  {
    if (*(_DWORD *)(v17 + 40) == v19 + 1)
    {
      if ((unsigned __int16)(v8 >> 3))
      {
        uint64_t v30 = 0;
        do
        {
          uint64_t v51 = v12;
          int v52 = 0;
          LODWORD(v55) = *(_DWORD *)(*(void *)(v17 + 32) + v30 + 36);
          v57[0] = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a3 + 32))(a3, 119, &v51, 1, &v55, 1, 0);
          unint64_t v32 = *(unsigned int *)(a4 + 8);
          if (v32 >= *(unsigned int *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a4 + 4 * v32) = *(_DWORD *)(*(void *)(v31 + 32) + 4);
          ++*(_DWORD *)(a4 + 8);
          v30 += 32;
        }
        while (32 * (unsigned __int16)(v8 >> 3) != v30);
      }
      goto LABEL_79;
    }
    goto LABEL_58;
  }
  if (v18 == 77)
  {
    if (*(_DWORD *)(v17 + 40) == v19 + 1)
    {
      if ((unsigned __int16)(v8 >> 3))
      {
        uint64_t v28 = 0;
        unsigned int v29 = *(_DWORD *)(a4 + 8);
        do
        {
          if (v29 >= *(_DWORD *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a4 + 4 * v29) = *(_DWORD *)(*(void *)(v17 + 32) + v28 + 36);
          unsigned int v29 = *(_DWORD *)(a4 + 8) + 1;
          *(_DWORD *)(a4 + 8) = v29;
          v28 += 32;
        }
        while (32 * (unsigned __int16)(v8 >> 3) != v28);
      }
      int v20 = 0;
      return (v20 << 8) | 1u;
    }
LABEL_58:
    unint64_t v33 = (unsigned __int16)(v8 >> 3);
    uint64_t v51 = v54;
    int v53 = 4;
    if (v33 >= 5)
    {
      int v52 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if ((unsigned __int16)(v8 >> 3))
    {
      uint64_t v34 = v54;
      uint64_t v35 = (unsigned __int16)(v8 >> 3);
      do
      {
        *v34++ = v12;
        --v35;
      }
      while (v35);
    }
    int v52 = (unsigned __int16)(v8 >> 3);
    uint64_t v36 = (uint64_t *)v51;
    LODWORD(v48) = a1;
    int v50 = 0;
    int v55 = v57;
    uint64_t v56 = 0x800000000;
    if ((unsigned __int16)(v8 >> 3))
    {
      uint64_t v37 = 8 * v33;
      uint64_t v38 = v57;
      do
      {
        uint64_t v39 = *v36++;
        *(void *)uint64_t v38 = v39;
        v38[2] = 0;
        v38 += 4;
        v37 -= 8;
      }
      while (v37);
      int v40 = v56;
      uint64_t v41 = v55;
    }
    else
    {
      int v40 = 0;
      uint64_t v41 = v57;
    }
    LODWORD(v56) = v40 + v33;
    (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a3 + 32))(a3, 74, v41);
    uint64_t v43 = v42;
    if (v55 == v57)
    {
      if (!(unsigned __int16)(v8 >> 3)) {
        goto LABEL_77;
      }
    }
    else
    {
      free(v55);
      if (!(unsigned __int16)(v8 >> 3)) {
        goto LABEL_77;
      }
    }
    uint64_t v44 = 0;
    unsigned int v45 = *(_DWORD *)(a4 + 8);
    uint64_t v46 = 32 * v33;
    do
    {
      if (v45 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v45) = *(_DWORD *)(*(void *)(v43 + 32) + v44 + 4);
      unsigned int v45 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v45;
      v44 += 32;
    }
    while (v46 != v44);
LABEL_77:
    BOOL v27 = v51;
    if (v51 == v54)
    {
LABEL_79:
      int v20 = 1;
      return (v20 << 8) | 1u;
    }
LABEL_78:
    free(v27);
    goto LABEL_79;
  }
  if (v18 != 68) {
    goto LABEL_58;
  }
  int v55 = v12;
  LODWORD(v56) = 0;
  int v20 = 1;
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void, void, void))(*(void *)a3 + 32))(a3, 68, &v55, 1, 0, 0, 0);
  if ((unsigned __int16)(v8 >> 3))
  {
    int v22 = *(_DWORD *)(*(void *)(v21 + 32) + 4);
    unsigned int v23 = *(_DWORD *)(a4 + 8);
    do
    {
      if (v23 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v23) = v22;
      unsigned int v23 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v23;
      --v19;
    }
    while (v19);
    goto LABEL_79;
  }
  return (v20 << 8) | 1u;
}

uint64_t sub_1CBA5B6B8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = *(void *)(a1 + 32);
  unint64_t v6 = *(void *)(a1 + 40);
  if ((v6 & 4) != 0) {
    char v8 = 35;
  }
  else {
    char v8 = 19;
  }
  if (v7 != 129 && v7 != 257)
  {
    if ((v7 & 0xFFFFFFFFFFFFFFF9) == 0 || (*(void *)(a1 + 32) & 4) == 0) {
      return 0;
    }
    char v38 = 3;
    if ((v7 & 1) == 0) {
      char v38 = 19;
    }
    unint64_t v39 = v7 >> v38;
    unint64_t v40 = v7 & 0x8000000000000000 | (8 * v39) | 1;
    uint64_t v41 = (v7 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v39) | 2;
    if ((v7 & 2) == 0) {
      uint64_t v41 = v40;
    }
    if (v41 != 257 && v41 != 129) {
      return 0;
    }
    uint64_t v42 = 0x800000000000000;
    if ((v7 & 2) == 0) {
      uint64_t v42 = 0x8000000000000;
    }
    if ((v42 & v7) != 0) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    }
    if ((unsigned __int16)(v7 >> 3) > 4u) {
      return 0;
    }
  }
  uint64_t v9 = *(unsigned int *)(a1 + 20);
  v115[0] = a1;
  v115[1] = a2;
  uint64_t v116 = 0;
  int v117 = -1;
  char v122 = 0;
  char v123 = 0;
  sub_1CBA159DC(v115, (const char *)a2);
  if ((v9 & 0x80000000) != 0) {
    char v10 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  }
  else {
    char v10 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v9);
  }
  uint64_t v11 = *v10;
  if ((*(unsigned char *)(v11 + 3) & 1) == 0) {
    uint64_t v11 = *(void *)(v11 + 24);
  }
  v124[0] = *(void *)(v11 + 8);
  v124[1] = a2;
  v124[4] = 0;
  v124[5] = 0;
  v124[2] = a3;
  unsigned __int8 v125 = 0;
  int v129 = 0;
  uint64_t v127 = 0;
  memset(v128, 0, sizeof(v128));
  uint64_t v126 = 0;
  uint64_t v132 = 0x400000000;
  v133[160] = 0;
  uint64_t v108 = a3;
  uint64_t v130 = v124[0];
  uint64_t v131 = v133;
  v124[3] = *(void *)(*(void *)(*(void *)(v124[0] + 24) + 32) + 8) + 1328;
  int v12 = v121;
  uint64_t v13 = v116;
  uint64_t v109 = a1;
  uint64_t v107 = a2;
  if (v121 == 3 && *(unsigned char *)(v116 + 326))
  {
    int v14 = 127;
    char v15 = 12;
  }
  else
  {
    int v14 = 3;
    char v15 = 9;
  }
  unsigned int v16 = 0;
  int v106 = (v6 >> v8) & 0xFFFFFF;
  unint64_t v17 = v119;
  unsigned int v105 = (v119 >> v15) & v14;
  do
  {
    char v18 = 2;
    uint64_t v19 = 1024;
    do
    {
      if (v12 == 3 && *(unsigned char *)(v13 + 326))
      {
        unint64_t v20 = v17 & 0xFFFFFFFFFFF80FFFLL;
        uint64_t v21 = (4096 << v18);
      }
      else
      {
        unint64_t v20 = v17 & 0xFFFFFFFFFFFFF9FFLL;
        uint64_t v21 = v19 & 0xFFFFFE00;
      }
      unint64_t v17 = v20 | v21;
      int v22 = (v20 | v21) & 0xF;
      unsigned int v23 = (v17 >> 12) & 0x7F;
      int v24 = v23 == 2;
      if (v23 == 4) {
        int v24 = 2;
      }
      if (v23) {
        unsigned int v25 = v24;
      }
      else {
        unsigned int v25 = (v17 >> 9) & 3;
      }
      if (v22 == 2)
      {
        unsigned int v26 = v25 + 2;
      }
      else
      {
        int v28 = 1 << v22;
        if ((v28 & 0x431) != 0) {
          int v29 = v25;
        }
        else {
          int v29 = 2;
        }
        if ((v28 & 0xC2) != 0) {
          unsigned int v26 = v25 + 1;
        }
        else {
          unsigned int v26 = v29;
        }
      }
      char v27 = sub_1CBA136E8((uint64_t)v124, v26, 513, 257, 0x201uLL, v16, 0);
      if (!v19) {
        break;
      }
      v19 -= 512;
      --v18;
    }
    while ((v27 & 1) == 0);
    if (v16++ > 1) {
      char v31 = 1;
    }
    else {
      char v31 = v27;
    }
  }
  while ((v31 & 1) == 0);
  if (v27)
  {
    unint64_t v33 = v108;
    uint64_t v32 = v109;
    uint64_t v34 = v107;
  }
  else
  {
    unint64_t v33 = v108;
    uint64_t v32 = v109;
    if (v12 == 3 && *(unsigned char *)(v13 + 326))
    {
      unint64_t v35 = v17 & 0xFFFFFFFFFFF80FFFLL;
      unsigned int v36 = 4096 << v105;
    }
    else
    {
      unint64_t v35 = v17 & 0xFFFFFFFFFFFFF9FFLL;
      unsigned int v36 = v105 << 9;
    }
    unint64_t v17 = v35 | v36;
    int v44 = v17 & 0xF;
    unsigned int v45 = (v17 >> 12) & 0x7F;
    uint64_t v34 = v107;
    if (v45)
    {
      if (v45 == 4) {
        unsigned int v46 = 2;
      }
      else {
        unsigned int v46 = v45 == 2;
      }
    }
    else
    {
      unsigned int v46 = (v17 >> 9) & 3;
    }
    if (v44 == 2)
    {
      v46 += 2;
    }
    else
    {
      int v63 = 1 << v44;
      if ((v63 & 0xC2) != 0)
      {
        ++v46;
      }
      else if ((v63 & 0x431) == 0)
      {
        unsigned int v46 = 2;
      }
    }
    uint64_t v43 = 0;
    if (!sub_1CBA136E8((uint64_t)v124, v46, 513, 257, 0x201uLL, 0, 1u)) {
      goto LABEL_128;
    }
  }
  unint64_t v119 = v17 | ((unint64_t)v128[8] << 11);
  if (v118 == 1 && *(void *)(v32 + 24) != *(void *)(v32 + 32) && !sub_1CBA5D7C0(v32, v33)) {
    goto LABEL_127;
  }
  unsigned int v47 = *(_DWORD *)(*(void *)(v127 + 32) + 4);
  uint64_t v48 = *(void *)(v33[1] + 344);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v48 + 288))(v48) & 1) == 0
    && (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))v48)(v48, 37, 0, 1, 2))
  {
    uint64_t v112 = 513;
    LODWORD(v113) = 0;
    LODWORD(v134) = v47;
    LODWORD(v136) = 0;
    sub_1CC7382B0((uint64_t)v33);
    LODWORD(v112) = *(_DWORD *)(*(void *)(v49 + 32) + 4);
    int v114 = 0;
    uint64_t v134 = (uint64_t)&v136;
    uint64_t v136 = 257;
    LODWORD(v137) = 0;
    uint64_t v138 = 257;
    int v139 = 0;
    uint64_t v135 = 0x800000002;
    (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*v33 + 32))(v33, 74, &v136, 2, &v112, 1, 0);
    uint64_t v51 = v50;
    if ((uint64_t *)v134 != &v136) {
      free((void *)v134);
    }
    uint64_t v134 = 257;
    LODWORD(v135) = 0;
    int v52 = (unsigned __int8 *)(*(uint64_t (**)(void *, uint64_t, uint64_t *, uint64_t, void, void, void))(*v33 + 32))(v33, 495, &v134, 1, 0, 0, 0);
    int v54 = v53;
    uint64_t v112 = (uint64_t)v52;
    uint64_t v113 = v53;
    LODWORD(v134) = 1;
    uint64_t v135 = 0;
    uint64_t v136 = 0;
    llvm::MachineInstr::addOperand(v53, (llvm::MachineFunction *)v52, (const llvm::MachineOperand *)&v134);
    int v55 = *(_DWORD *)(*(void *)(v51 + 32) + 36);
    uint64_t v135 = 0;
    uint64_t v136 = 0;
    LODWORD(v134) = 0;
    HIDWORD(v134) = v55;
    uint64_t v137 = 0;
    llvm::MachineInstr::addOperand(v54, (llvm::MachineFunction *)v52, (const llvm::MachineOperand *)&v134);
    LODWORD(v134) = 1;
    uint64_t v135 = 0;
    uint64_t v136 = 0;
    llvm::MachineInstr::addOperand(v54, (llvm::MachineFunction *)v52, (const llvm::MachineOperand *)&v134);
    sub_1CBA318C8((uint64_t)&v112);
    uint64_t v110 = 513;
    int v111 = 0;
    LODWORD(v134) = *(_DWORD *)(*(void *)(v51 + 32) + 4);
    LODWORD(v136) = 0;
    LODWORD(v137) = *(_DWORD *)(*((void *)v54 + 4) + 4);
    int v139 = 0;
    (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*v33 + 32))(v33, 76, &v110, 1, &v134, 2, 0);
    unsigned int v47 = *(_DWORD *)(*(void *)(v56 + 32) + 4);
  }
  if ((v47 & 0x80000000) != 0) {
    int v57 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
  }
  else {
    int v57 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v47);
  }
  uint64_t v58 = *v57;
  if (v58)
  {
    if (*(unsigned char *)(v58 + 3) & 1) != 0 || (uint64_t v58 = *(void *)(v58 + 24)) != 0 && (*(unsigned char *)(v58 + 3))
    {
      uint64_t v59 = *(void *)(v58 + 8);
      if (v59)
      {
        if (**(_WORD **)(v59 + 16) == 45 && *(_DWORD *)(v59 + 40) == 3)
        {
          if ((v47 & 0x80000000) != 0 && (unint64_t v60 = v47 & 0x7FFFFFFF, v60 < *(unsigned int *)(v34 + 432))) {
            uint64_t v61 = *(unsigned __int8 **)(*(void *)(v34 + 424) + 8 * v60);
          }
          else {
            uint64_t v61 = 0;
          }
          uint64_t v112 = (uint64_t)v61;
          LODWORD(v113) = 0;
          LODWORD(v134) = v47;
          LODWORD(v136) = 0;
          (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*v33 + 32))(v33, 19, &v112, 1, &v134, 1, 0);
          unsigned int v47 = *(_DWORD *)(*(void *)(v62 + 32) + 4);
        }
      }
    }
  }
  unsigned int v64 = sub_1CB950FDC((uint64_t)&v116, v12, 1, v125);
  uint64_t v65 = (llvm::MachineFunction *)v33[1];
  uint64_t v66 = *(void *)(v33[2] + 8) + 48 * v64;
  uint64_t v67 = (unsigned __int8 *)v33[4];
  uint64_t v112 = (uint64_t)v67;
  if (v67) {
    llvm::MetadataTracking::track((uint64_t)&v112, v67, 2);
  }
  uint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v65, v66, (unsigned __int8 **)&v112, 0);
  if (!v112) {
    goto LABEL_99;
  }
  int v101 = *(unsigned __int8 *)v112;
  if ((v101 - 4) > 0x1E)
  {
    if ((v101 - 3) >= 0xFFFFFFFE) {
      uint64_t v104 = v112;
    }
    else {
      uint64_t v104 = 0;
    }
    if ((v101 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v103 = v104 + 8;
LABEL_167:
      uint64_t v134 = (uint64_t)&v112;
      sub_1CC5FA668(v103 + 16, &v134);
      goto LABEL_99;
    }
    if (v101 == 3) {
      *(void *)(v112 + 8) = 0;
    }
  }
  else if ((*(unsigned char *)(v112 + 1) & 0x7F) == 2 || *(_DWORD *)(v112 + 12))
  {
    uint64_t v102 = *(void *)(v112 + 16);
    if ((v102 & 4) != 0)
    {
      unint64_t v103 = v102 & 0xFFFFFFFFFFFFFFF8;
      if (v103) {
        goto LABEL_167;
      }
    }
  }
LABEL_99:
  uint64_t v69 = (unint64_t *)v33[6];
  uint64_t v70 = *(void *)(v33[5] + 40);
  *((void *)MachineInstr + 3) = v70;
  uint64_t v71 = *(void *)(v70 + 32);
  uint64_t v72 = *((unsigned int *)MachineInstr + 10);
  if (v72)
  {
    uint64_t v94 = *((void *)MachineInstr + 4);
    uint64_t v95 = *(void *)(v71 + 40);
    uint64_t v96 = 32 * v72;
    do
    {
      if (!*(unsigned char *)v94)
      {
        uint64_t v97 = *(unsigned int *)(v94 + 4);
        if ((int)v97 >= 0) {
          unint64_t v98 = (uint64_t *)(*(void *)(v95 + 272) + 8 * v97);
        }
        else {
          unint64_t v98 = (uint64_t *)(*(void *)(v95 + 24) + 16 * (v97 & 0x7FFFFFFF) + 8);
        }
        uint64_t v99 = *v98;
        if (*v98)
        {
          uint64_t v100 = *(void *)(v99 + 16);
          *(void *)(v99 + 16) = v94;
          *(void *)(v94 + 16) = v100;
          if (*(unsigned char *)(v94 + 3))
          {
            *(void *)(v94 + 24) = v99;
          }
          else
          {
            *(void *)(v94 + 24) = 0;
            unint64_t v98 = (uint64_t *)(v100 + 24);
          }
        }
        else
        {
          *(void *)(v94 + 16) = v94;
          *(void *)(v94 + 24) = 0;
        }
        *unint64_t v98 = v94;
      }
      v94 += 32;
      v96 -= 32;
    }
    while (v96);
  }
  uint64_t v73 = *(void *)(v71 + 728);
  if (v73) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v73 + 24))(v73, MachineInstr);
  }
  unint64_t v74 = *v69 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t MachineInstr = v74 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = v69;
  *(void *)(v74 + 8) = MachineInstr;
  unint64_t *v69 = *v69 & 7 | (unint64_t)MachineInstr;
  uint64_t v75 = v33[7];
  if (v75) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v75 + 24))(v75, MachineInstr);
  }
  uint64_t v112 = (uint64_t)v65;
  uint64_t v113 = MachineInstr;
  int v76 = v118;
  if (!v118)
  {
    int v77 = *(_DWORD *)(v32 + 16);
    uint64_t v135 = 0;
    uint64_t v136 = 0;
    uint64_t v137 = 0;
    LODWORD(v134) = 0x1000000;
    HIDWORD(v134) = v77;
    llvm::MachineInstr::addOperand(MachineInstr, v65, (const llvm::MachineOperand *)&v134);
  }
  unint64_t v78 = v119;
  LODWORD(v134) = 1;
  uint64_t v135 = 0;
  uint64_t v136 = v119;
  llvm::MachineInstr::addOperand(MachineInstr, v65, (const llvm::MachineOperand *)&v134);
  LODWORD(v134) = 1;
  uint64_t v135 = 0;
  uint64_t v136 = v120;
  llvm::MachineInstr::addOperand(MachineInstr, v65, (const llvm::MachineOperand *)&v134);
  if (v76 == 1)
  {
    int v79 = *(_DWORD *)(v32 + 16);
    uint64_t v135 = 0;
    uint64_t v136 = 0;
    LODWORD(v134) = 0;
    HIDWORD(v134) = v79;
    uint64_t v137 = 0;
    llvm::MachineInstr::addOperand(MachineInstr, v65, (const llvm::MachineOperand *)&v134);
  }
  uint64_t v135 = 0;
  uint64_t v136 = 0;
  LODWORD(v134) = 0;
  HIDWORD(v134) = v47;
  uint64_t v137 = 0;
  llvm::MachineInstr::addOperand(MachineInstr, v65, (const llvm::MachineOperand *)&v134);
  uint64_t v80 = *(void *)(*(void *)v128 + 32);
  if (v125)
  {
    uint64_t v81 = *(void *)(v80 + 48);
    unsigned int v82 = *(_DWORD *)(v81 + 32);
    if (v82 > 0x40) {
      uint64_t v83 = **(void **)(v81 + 24);
    }
    else {
      uint64_t v83 = (uint64_t)(*(void *)(v81 + 24) << -(char)v82) >> -(char)v82;
    }
    LODWORD(v134) = 1;
    uint64_t v135 = 0;
    uint64_t v136 = (int)v83;
  }
  else
  {
    int v84 = *(_DWORD *)(v80 + 4);
    uint64_t v135 = 0;
    uint64_t v136 = 0;
    LODWORD(v134) = 0;
    HIDWORD(v134) = v84;
    uint64_t v137 = 0;
  }
  llvm::MachineInstr::addOperand(MachineInstr, v65, (const llvm::MachineOperand *)&v134);
  LODWORD(v134) = 1;
  uint64_t v135 = 0;
  uint64_t v136 = 0;
  llvm::MachineInstr::addOperand(MachineInstr, v65, (const llvm::MachineOperand *)&v134);
  if (v106 == 65)
  {
    uint64_t v86 = (v78 >> 54);
    if ((v78 & 0x2000000000000000) != 0) {
      uint64_t v86 = 0;
    }
    if (v76 == 1) {
      __int16 v87 = 2;
    }
    else {
      __int16 v87 = 1;
    }
    uint64_t v85 = (llvm::MachineMemOperand *)sub_1CBA9F684((v86 | ((v78 & 0x2000000000000000) >> 29)) ^ 0x100000000, v78 >> 4, v78 & 0xF, v87, *(void *)(*((void *)MachineInstr + 3) + 32));
  }
  else
  {
    uint64_t v85 = *(llvm::MachineMemOperand **)(v32 + 48);
    if (v106 == 2) {
      *((_WORD *)v85 + 16) |= 0x20u;
    }
  }
  llvm::MachineInstr::addMemOperand(MachineInstr, v65, v85);
  sub_1CBA318C8((uint64_t)&v112);
  if (!v76 && *(void *)(v32 + 24) != *(void *)(v32 + 32) && !sub_1CBA5D7C0(v32, v33))
  {
LABEL_127:
    uint64_t v43 = 0;
    goto LABEL_128;
  }
  llvm::MachineInstr::eraseFromParent(*(llvm::MachineInstr **)v32);
  uint64_t v43 = 1;
LABEL_128:
  int v88 = (char *)v131;
  if (v132)
  {
    uint64_t v89 = 40 * v132;
    do
    {
      uint64_t v90 = &v88[v89];
      if (*(_DWORD *)&v88[v89 - 8] >= 0x41u)
      {
        uint64_t v91 = *((void *)v90 - 2);
        if (v91) {
          MEMORY[0x1D25D9CB0](v91, 0x1000C8000313F17);
        }
      }
      if (*((_DWORD *)v90 - 6) >= 0x41u)
      {
        uint64_t v92 = *((void *)v90 - 4);
        if (v92) {
          MEMORY[0x1D25D9CB0](v92, 0x1000C8000313F17);
        }
      }
      v89 -= 40;
    }
    while (v89);
    int v88 = (char *)v131;
  }
  if (v88 != v133) {
    free(v88);
  }
  return v43;
}

uint64_t sub_1CBA5C2C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *(void *)(a1 + 32);
  if (v6 != 129 && v6 != 257)
  {
    if ((v6 & 0xFFFFFFFFFFFFFFF9) == 0 || (*(void *)(a1 + 32) & 4) == 0) {
      return 0;
    }
    char v22 = 3;
    if ((v6 & 1) == 0) {
      char v22 = 19;
    }
    unint64_t v23 = v6 >> v22;
    unint64_t v24 = v6 & 0x8000000000000000 | (8 * v23) | 1;
    uint64_t v25 = (v6 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v23) | 2;
    if ((v6 & 2) == 0) {
      uint64_t v25 = v24;
    }
    if (v25 != 257 && v25 != 129) {
      return 0;
    }
    uint64_t v26 = 0x800000000000000;
    if ((v6 & 2) == 0) {
      uint64_t v26 = 0x8000000000000;
    }
    if ((v26 & v6) != 0) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    }
    if ((unsigned __int16)(v6 >> 3) > 4u) {
      return 0;
    }
  }
  unint64_t v7 = *(unsigned char **)(*(void *)(a3 + 8) + 16);
  v106[0] = a1;
  v106[1] = a2;
  uint64_t v107 = 0;
  int v108 = -1;
  char v112 = 0;
  char v113 = 0;
  sub_1CBA159DC(v106, (const char *)a2);
  if (v7[405]) {
    uint64_t v8 = 257;
  }
  else {
    uint64_t v8 = 129;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 20);
  if ((v9 & 0x80000000) != 0) {
    char v10 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  }
  else {
    char v10 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v9);
  }
  uint64_t v11 = *v10;
  uint64_t v103 = a3;
  if (!v11)
  {
LABEL_162:
    uint64_t v12 = 0;
    goto LABEL_11;
  }
  if (*(unsigned char *)(v11 + 3))
  {
LABEL_10:
    uint64_t v12 = *(void *)(v11 + 8);
    goto LABEL_11;
  }
  uint64_t v11 = *(void *)(v11 + 24);
  if (v11)
  {
    if (*(unsigned char *)(v11 + 3)) {
      goto LABEL_10;
    }
    goto LABEL_162;
  }
  uint64_t v12 = 0;
LABEL_11:
  uint64_t v13 = (llvm::GlobalValue *)sub_1CBA5E72C(v12, a2, (llvm::IntegerType *****)a3);
  if (v7[407]) {
    int v14 = 2 * v7[406];
  }
  else {
    int v14 = (2 * v7[406]) | 0x10000;
  }
  if (v7[406]) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = v7[407] == 0;
  }
  if (v15)
  {
    sub_1CBA315DC((uint64_t)v118, *(_DWORD *)(a1 + 20), a2, 0);
    if ((_BYTE)v119)
    {
      Section = (unint64_t *)llvm::GlobalValue::getSection(v118[0]);
      if (v17 == 19)
      {
        unint64_t v18 = 0x636C5F6C6F63616CLL;
        unint64_t v19 = bswap64(*Section);
        if (v19 == 0x636C5F6C6F63616CLL
          && (v18 = 0x5F7065725F746872, unint64_t v19 = bswap64(Section[1]), v19 == 0x5F7065725F746872)
          && (unint64_t v18 = 0x725F746872656164,
              unint64_t v19 = bswap64(*(unint64_t *)((char *)Section + 11)),
              v19 == 0x725F746872656164))
        {
          int v20 = 0;
        }
        else
        {
          int v20 = v19 < v18 ? -1 : 1;
        }
        if (!v20) {
          int v14 = 0;
        }
      }
    }
  }
  else
  {
    int v14 = 0;
  }
  char v28 = v7[405];
  v118[0] = v13;
  v118[1] = (llvm::GlobalValue *)a2;
  uint64_t v121 = 0;
  uint64_t v122 = 0;
  uint64_t v119 = a3;
  unsigned __int8 v123 = 0;
  uint64_t v125 = 0;
  uint64_t v126 = 0;
  uint64_t v124 = 0;
  __int16 v127 = 0;
  char v128 = v28;
  int v129 = v14;
  uint64_t v130 = (llvm::GlobalValue *)v12;
  uint64_t v131 = v133;
  uint64_t v132 = 0x400000000;
  char v134 = 0;
  if (!v12) {
    uint64_t v130 = v13;
  }
  int v101 = v7;
  uint64_t v120 = *(void *)(*(void *)(*((void *)v13 + 3) + 32) + 8) + 1328;
  int v29 = v111;
  uint64_t v30 = v107;
  uint64_t v102 = a1;
  uint64_t v99 = a2;
  if (v111 == 3 && *(unsigned char *)(v107 + 326))
  {
    int v31 = 127;
    char v32 = 12;
  }
  else
  {
    int v31 = 3;
    char v32 = 9;
  }
  unsigned int v33 = 0;
  unint64_t v34 = v110;
  unsigned int v100 = (v110 >> v32) & v31;
  do
  {
    char v35 = 2;
    uint64_t v36 = 1024;
    do
    {
      if (v29 == 3 && *(unsigned char *)(v30 + 326))
      {
        unint64_t v37 = v34 & 0xFFFFFFFFFFF80FFFLL;
        uint64_t v38 = (4096 << v35);
      }
      else
      {
        unint64_t v37 = v34 & 0xFFFFFFFFFFFFF9FFLL;
        uint64_t v38 = v36 & 0xFFFFFE00;
      }
      unint64_t v34 = v37 | v38;
      int v39 = (v37 | v38) & 0xF;
      unsigned int v40 = (v34 >> 12) & 0x7F;
      int v41 = v40 == 2;
      if (v40 == 4) {
        int v41 = 2;
      }
      if (v40) {
        unsigned int v42 = v41;
      }
      else {
        unsigned int v42 = (v34 >> 9) & 3;
      }
      if (v39 == 2)
      {
        unsigned int v43 = v42 + 2;
      }
      else
      {
        int v45 = 1 << v39;
        if ((v45 & 0x431) != 0) {
          int v46 = v42;
        }
        else {
          int v46 = 2;
        }
        if ((v45 & 0xC2) != 0) {
          unsigned int v43 = v42 + 1;
        }
        else {
          unsigned int v43 = v46;
        }
      }
      char v44 = sub_1CBA136E8((uint64_t)v118, v43, v8, 129, 0x81uLL, v33, 0);
      if (!v36) {
        break;
      }
      v36 -= 512;
      --v35;
    }
    while ((v44 & 1) == 0);
    if (v33++ > 1) {
      char v48 = 1;
    }
    else {
      char v48 = v44;
    }
  }
  while ((v48 & 1) == 0);
  if ((v44 & 1) == 0)
  {
    if (v29 == 3 && *(unsigned char *)(v30 + 326))
    {
      unint64_t v49 = v34 & 0xFFFFFFFFFFF80FFFLL;
      unsigned int v50 = 4096 << v100;
    }
    else
    {
      unint64_t v49 = v34 & 0xFFFFFFFFFFFFF9FFLL;
      unsigned int v50 = v100 << 9;
    }
    unint64_t v34 = v49 | v50;
    int v51 = v34 & 0xF;
    unsigned int v52 = (v34 >> 12) & 0x7F;
    if (v52) {
      unsigned int v53 = v52 == 4 ? 2 : v52 == 2;
    }
    else {
      unsigned int v53 = (v34 >> 9) & 3;
    }
    if (v51 == 2)
    {
      v53 += 2;
    }
    else
    {
      int v87 = 1 << v51;
      if ((v87 & 0xC2) != 0)
      {
        ++v53;
      }
      else if ((v87 & 0x431) == 0)
      {
        unsigned int v53 = 2;
      }
    }
    int v54 = sub_1CBA136E8((uint64_t)v118, v53, v8, 129, 0x81uLL, 0, 1u);
    uint64_t v27 = 0;
    if (!v54) {
      goto LABEL_127;
    }
  }
  unint64_t v110 = v34 | ((unint64_t)v127 << 11);
  int v55 = *(_DWORD *)(*(void *)(v125 + 32) + 4);
  uint64_t v56 = (void *)a3;
  if (v109 == 1 && *(void *)(v102 + 24) != *(void *)(v102 + 32) && !sub_1CBA5D7C0(v102, (void *)a3)) {
    goto LABEL_126;
  }
  if (v55 < 0)
  {
    uint64_t v58 = v101;
    if ((v55 & 0x7FFFFFFFu) >= *(_DWORD *)(v99 + 432)) {
      int v57 = 0;
    }
    else {
      int v57 = *(unsigned __int8 **)(*(void *)(v99 + 424) + 8 * (v55 & 0x7FFFFFFF));
    }
  }
  else
  {
    int v57 = 0;
    uint64_t v58 = v101;
  }
  uint64_t v104 = v57;
  LODWORD(v105) = 0;
  LODWORD(v114) = v55;
  LODWORD(v116) = 0;
  (*(void (**)(uint64_t, uint64_t, unsigned __int8 **, uint64_t, unsigned __int8 ***, uint64_t, void))(*(void *)a3 + 32))(a3, 19, &v104, 1, &v114, 1, 0);
  int v60 = *(_DWORD *)(*(void *)(v59 + 32) + 4);
  unsigned int v61 = sub_1CB950FDC((uint64_t)&v107, v29, v134 == 0, v123);
  uint64_t v62 = *(llvm::MachineFunction **)(a3 + 8);
  uint64_t v63 = *(void *)(*(void *)(v103 + 16) + 8) + 48 * v61;
  unsigned int v64 = *(unsigned __int8 **)(v103 + 32);
  uint64_t v104 = v64;
  if (v64) {
    llvm::MetadataTracking::track((uint64_t)&v104, v64, 2);
  }
  uint64_t v65 = llvm::MachineFunction::CreateMachineInstr(v62, v63, &v104, 0);
  if (!v104) {
    goto LABEL_99;
  }
  int v95 = *v104;
  if ((v95 - 4) > 0x1E)
  {
    if ((v95 - 3) >= 0xFFFFFFFE) {
      unint64_t v98 = v104;
    }
    else {
      unint64_t v98 = 0;
    }
    if ((v95 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v97 = (unint64_t)(v98 + 8);
LABEL_176:
      int v114 = &v104;
      sub_1CC5FA668(v97 + 16, &v114);
      uint64_t v56 = (void *)v103;
      goto LABEL_99;
    }
    uint64_t v56 = (void *)v103;
    if (v95 == 3) {
      *((void *)v104 + 1) = 0;
    }
  }
  else
  {
    uint64_t v56 = (void *)v103;
    if ((v104[1] & 0x7F) == 2 || *((_DWORD *)v104 + 3))
    {
      uint64_t v96 = *((void *)v104 + 2);
      if ((v96 & 4) != 0)
      {
        unint64_t v97 = v96 & 0xFFFFFFFFFFFFFFF8;
        if (v97) {
          goto LABEL_176;
        }
      }
    }
  }
LABEL_99:
  uint64_t v66 = (unint64_t *)v56[6];
  uint64_t v67 = *(void *)(v56[5] + 40);
  *((void *)v65 + 3) = v67;
  uint64_t v68 = *(void *)(v67 + 32);
  uint64_t v69 = *((unsigned int *)v65 + 10);
  if (v69)
  {
    uint64_t v88 = *((void *)v65 + 4);
    uint64_t v89 = *(void *)(v68 + 40);
    uint64_t v90 = 32 * v69;
    do
    {
      if (!*(unsigned char *)v88)
      {
        uint64_t v91 = *(unsigned int *)(v88 + 4);
        if ((int)v91 >= 0) {
          uint64_t v92 = (uint64_t *)(*(void *)(v89 + 272) + 8 * v91);
        }
        else {
          uint64_t v92 = (uint64_t *)(*(void *)(v89 + 24) + 16 * (v91 & 0x7FFFFFFF) + 8);
        }
        uint64_t v93 = *v92;
        if (*v92)
        {
          uint64_t v94 = *(void *)(v93 + 16);
          *(void *)(v93 + 16) = v88;
          *(void *)(v88 + 16) = v94;
          if (*(unsigned char *)(v88 + 3))
          {
            *(void *)(v88 + 24) = v93;
          }
          else
          {
            *(void *)(v88 + 24) = 0;
            uint64_t v92 = (uint64_t *)(v94 + 24);
          }
        }
        else
        {
          *(void *)(v88 + 16) = v88;
          *(void *)(v88 + 24) = 0;
        }
        *uint64_t v92 = v88;
      }
      v88 += 32;
      v90 -= 32;
    }
    while (v90);
  }
  uint64_t v70 = *(void *)(v68 + 728);
  if (v70) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v70 + 24))(v70, v65);
  }
  unint64_t v71 = *v66 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v65 = v71 | *(void *)v65 & 7;
  *((void *)v65 + 1) = v66;
  *(void *)(v71 + 8) = v65;
  *uint64_t v66 = *v66 & 7 | (unint64_t)v65;
  uint64_t v72 = v56[7];
  if (v72) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v72 + 24))(v72, v65);
  }
  uint64_t v104 = (unsigned __int8 *)v62;
  unsigned int v105 = v65;
  int v73 = v109;
  if (!v109)
  {
    int v74 = *(_DWORD *)(v102 + 16);
    uint64_t v115 = 0;
    unint64_t v116 = 0;
    uint64_t v117 = 0;
    LODWORD(v114) = 0x1000000;
    HIDWORD(v114) = v74;
    llvm::MachineInstr::addOperand(v65, v62, (const llvm::MachineOperand *)&v114);
  }
  if (v58[326])
  {
    LODWORD(v114) = 1;
    uint64_t v115 = 0;
    unint64_t v116 = 0;
    llvm::MachineInstr::addOperand(v65, v62, (const llvm::MachineOperand *)&v114);
  }
  LODWORD(v114) = 1;
  uint64_t v115 = 0;
  unint64_t v116 = v110;
  llvm::MachineInstr::addOperand(v65, v62, (const llvm::MachineOperand *)&v114);
  if (v73 == 1)
  {
    int v75 = *(_DWORD *)(v102 + 16);
    uint64_t v115 = 0;
    unint64_t v116 = 0;
    LODWORD(v114) = 0;
    HIDWORD(v114) = v75;
    uint64_t v117 = 0;
    llvm::MachineInstr::addOperand(v65, v62, (const llvm::MachineOperand *)&v114);
  }
  if (!v134)
  {
    uint64_t v115 = 0;
    unint64_t v116 = 0;
    LODWORD(v114) = 0;
    HIDWORD(v114) = v60;
    uint64_t v117 = 0;
    llvm::MachineInstr::addOperand(v65, v62, (const llvm::MachineOperand *)&v114);
    if (v58[326])
    {
      LODWORD(v114) = 1;
      uint64_t v115 = 0;
      unint64_t v116 = 0;
      llvm::MachineInstr::addOperand(v65, v62, (const llvm::MachineOperand *)&v114);
    }
  }
  uint64_t v76 = *(void *)(v126 + 32);
  if (v123)
  {
    uint64_t v77 = *(void *)(v76 + 48);
    unsigned int v78 = *(_DWORD *)(v77 + 32);
    if (v78 > 0x40) {
      uint64_t v79 = **(void **)(v77 + 24);
    }
    else {
      uint64_t v79 = (uint64_t)(*(void *)(v77 + 24) << -(char)v78) >> -(char)v78;
    }
    LODWORD(v114) = 1;
    uint64_t v115 = 0;
    unint64_t v116 = (int)v79;
  }
  else
  {
    int v80 = *(_DWORD *)(v76 + 4);
    uint64_t v115 = 0;
    unint64_t v116 = 0;
    LODWORD(v114) = 0;
    HIDWORD(v114) = v80;
    uint64_t v117 = 0;
  }
  llvm::MachineInstr::addOperand(v65, v62, (const llvm::MachineOperand *)&v114);
  if (!v123 && v58[326])
  {
    LODWORD(v114) = 1;
    uint64_t v115 = 0;
    unint64_t v116 = 0;
    llvm::MachineInstr::addOperand(v65, v62, (const llvm::MachineOperand *)&v114);
  }
  llvm::MachineInstr::addMemOperand(v65, v62, *(llvm::MachineMemOperand **)(v102 + 48));
  sub_1CBA318C8((uint64_t)&v104);
  if (!v73 && *(void *)(v102 + 24) != *(void *)(v102 + 32) && !sub_1CBA5D7C0(v102, v56))
  {
LABEL_126:
    uint64_t v27 = 0;
    goto LABEL_127;
  }
  llvm::MachineInstr::eraseFromParent(*(llvm::MachineInstr **)v102);
  uint64_t v27 = 1;
LABEL_127:
  uint64_t v81 = (char *)v131;
  if (v132)
  {
    uint64_t v82 = 40 * v132;
    do
    {
      uint64_t v83 = &v81[v82];
      if (*(_DWORD *)&v81[v82 - 8] >= 0x41u)
      {
        uint64_t v84 = *((void *)v83 - 2);
        if (v84) {
          MEMORY[0x1D25D9CB0](v84, 0x1000C8000313F17);
        }
      }
      if (*((_DWORD *)v83 - 6) >= 0x41u)
      {
        uint64_t v85 = *((void *)v83 - 4);
        if (v85) {
          MEMORY[0x1D25D9CB0](v85, 0x1000C8000313F17);
        }
      }
      v82 -= 40;
    }
    while (v82);
    uint64_t v81 = (char *)v131;
  }
  if (v81 != v133) {
    free(v81);
  }
  return v27;
}

void sub_1CBA5CD34(void *a1, int a2, unint64_t a3, unint64_t a4)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  unint64_t v89 = a4;
  unint64_t v8 = sub_1CB8F1DC4(&v89);
  if (v7 == 1) {
  unint64_t v9 = (v8 >> 3);
  }
  if (!(a3 % v9))
  {
    uint64_t v11 = *a1;
    LODWORD(v95) = a2;
    LODWORD(v96) = 1;
    unint64_t v90 = a3;
    int v92 = 3;
    (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, void))(*(void *)v11 + 32))(v11, 318, &v95, 1, &v90, 1, 0);
    return;
  }
  int v95 = &v97;
  uint64_t v96 = 0x200000000;
  unint64_t v88 = a3;
  int v83 = a2;
  if (a3)
  {
    uint64_t v12 = a1[1];
    uint64_t v13 = *(void *)a1[2];
    unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v12, "", 0);
    unint64_t v15 = IncompleteVirtualRegister & 0x7FFFFFFF;
    *(void *)(*(void *)(v12 + 24) + 16 * v15) = 4;
    unint64_t v16 = *(unsigned int *)(v12 + 432);
    unsigned int v84 = IncompleteVirtualRegister;
    if (v15 >= v16)
    {
      uint64_t v17 = *(void *)(v12 + 440);
      uint64_t v18 = v15 + 1 - v16;
      if (v15 >= *(unsigned int *)(v12 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v19 = *(_DWORD *)(v12 + 432);
      if (v18)
      {
        int v20 = (void *)(*(void *)(v12 + 424) + 8 * v16);
        uint64_t v21 = ~v15 + v16;
        do
        {
          *v20++ = v17;
          BOOL v22 = __CFADD__(v21++, 1);
        }
        while (!v22);
        int v19 = *(_DWORD *)(v12 + 432);
      }
      *(_DWORD *)(v12 + 432) = v19 + v18;
    }
    *(void *)(*(void *)(v12 + 424) + 8 * v15) = v13;
    uint64_t v23 = *(void *)(v12 + 8);
    a3 = v88;
    if (v23)
    {
      unsigned int v82 = IncompleteVirtualRegister;
      (*(void (**)(uint64_t, void))(*(void *)v23 + 24))(v23, IncompleteVirtualRegister);
      unsigned int IncompleteVirtualRegister = v82;
    }
    uint64_t v24 = *a1;
    unsigned int v10 = 1;
    LODWORD(v98) = IncompleteVirtualRegister;
    int v99 = 1;
    unint64_t v90 = v88 - 1;
    int v92 = 3;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v24 + 32))(v24, 318, &v98, 1, &v90, 1, 0);
  }
  else
  {
    unsigned int v84 = 0;
    unsigned int v10 = 0;
  }
  uint64_t v25 = a3 + v10 + 2;
  uint64_t v86 = v9 + a3;
  if ((uint64_t)(v9 + a3) >= v25)
  {
    uint64_t v85 = a1;
    do
    {
      uint64_t v27 = a1[1];
      uint64_t v28 = *(void *)a1[2];
      int v29 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v27, "", 0);
      unint64_t v30 = v29 & 0x7FFFFFFF;
      *(void *)(*(void *)(v27 + 24) + 16 * v30) = 4;
      unint64_t v31 = *(unsigned int *)(v27 + 432);
      if (v30 >= v31)
      {
        unint64_t v32 = v30 + 1;
        uint64_t v33 = *(void *)(v27 + 440);
        if (v30 >= *(unsigned int *)(v27 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v34 = *(_DWORD *)(v27 + 432);
        if (v32 != v31)
        {
          char v35 = (void *)(*(void *)(v27 + 424) + 8 * *(unsigned int *)(v27 + 432));
          uint64_t v36 = ~v30 + v31;
          do
          {
            *v35++ = v33;
            BOOL v22 = __CFADD__(v36++, 1);
          }
          while (!v22);
          int v34 = *(_DWORD *)(v27 + 432);
        }
        *(_DWORD *)(v27 + 432) = v34 + v32 - v31;
      }
      *(void *)(*(void *)(v27 + 424) + 8 * v30) = v28;
      uint64_t v37 = *(void *)(v27 + 8);
      LOBYTE(a3) = v88;
      if (v37) {
        (*(void (**)(uint64_t))(*(void *)v37 + 24))(v37);
      }
      a1 = v85;
      if (v96 >= (unint64_t)HIDWORD(v96)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v95 + v96) = v29;
      LODWORD(v96) = v96 + 1;
      uint64_t v38 = *v85;
      LODWORD(v98) = v29;
      int v99 = 1;
      unint64_t v90 = v88 + v10;
      int v92 = 3;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v38 + 32))(v38, 318, &v98, 1, &v90, 1, 0);
      v10 += 2;
      uint64_t v25 = (v25 + 2);
    }
    while (v86 >= v25);
  }
  if (a3)
  {
    uint64_t v39 = a1[1];
    uint64_t v40 = *(void *)a1[2];
    unsigned int v87 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v39, "", 0);
    unint64_t v41 = v87 & 0x7FFFFFFF;
    *(void *)(*(void *)(v39 + 24) + 16 * v41) = 4;
    unint64_t v42 = *(unsigned int *)(v39 + 432);
    if (v41 >= v42)
    {
      uint64_t v43 = *(void *)(v39 + 440);
      uint64_t v44 = v41 + 1 - v42;
      if (v41 >= *(unsigned int *)(v39 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v45 = *(_DWORD *)(v39 + 432);
      if (v44)
      {
        int v46 = (void *)(*(void *)(v39 + 424) + 8 * *(unsigned int *)(v39 + 432));
        uint64_t v47 = ~v41 + v42;
        do
        {
          *v46++ = v43;
          BOOL v22 = __CFADD__(v47++, 1);
        }
        while (!v22);
        int v45 = *(_DWORD *)(v39 + 432);
      }
      *(_DWORD *)(v39 + 432) = v45 + v44;
    }
    *(void *)(*(void *)(v39 + 424) + 8 * v41) = v40;
    uint64_t v48 = *(void *)(v39 + 8);
    if (v48) {
      (*(void (**)(uint64_t, void))(*(void *)v48 + 24))(v48, v87);
    }
    uint64_t v49 = *a1;
    unsigned int v26 = v87;
    LODWORD(v98) = v87;
    int v99 = 1;
    unint64_t v90 = v88 + v10;
    int v92 = 3;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v49 + 32))(v49, 318, &v98, 1, &v90, 1, 0);
  }
  else
  {
    unsigned int v26 = 0;
  }
  unsigned int v50 = (llvm::IntegerType *****)*a1;
  unint64_t v51 = *(void *)a1[2];
  unint64_t v98 = v51;
  int v99 = 0;
  unsigned int v52 = (llvm::LLVMContext *)(unsigned __int16)(v51 >> 3);
  unsigned int v53 = (llvm::LLVMContext *)(unsigned __int16)(v51 >> 19);
  if ((v51 & 2) == 0) {
    unsigned int v53 = (llvm::LLVMContext *)(v51 >> 19);
  }
  if ((v51 & 4) != 0) {
    unsigned int v52 = v53;
  }
  if (v51) {
    int v54 = (llvm::LLVMContext *)(v51 >> 3);
  }
  else {
    int v54 = v52;
  }
  uint64_t v55 = llvm::IntegerType::get(***v50[1], v54);
  int v57 = *(llvm::ConstantInt **)v55;
  unsigned int v58 = *(_DWORD *)(v55 + 8);
  unsigned int v91 = v58 >> 8;
  if (v58 >> 8 > 0x40) {
    operator new[]();
  }
  if (v58 <= 0xFF) {
    LOBYTE(v59) = 0;
  }
  else {
    unint64_t v59 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v58) + 63);
  }
  unint64_t v90 = v59 & 8;
  int v60 = llvm::ConstantInt::get(v57, (llvm::LLVMContext *)&v90, v56);
  if (v91 >= 0x41 && v90) {
    MEMORY[0x1D25D9CB0](v90, 0x1000C8000313F17);
  }
  ((void (*)(llvm::IntegerType *****, unint64_t *, void *))(*v50)[2])(v50, &v98, v60);
  if (v84)
  {
    int v62 = *(_DWORD *)(*(void *)(v61 + 32) + 4);
    uint64_t v63 = *a1;
    unint64_t v98 = *(void *)a1[2];
    int v99 = 0;
    LODWORD(v90) = v84;
    int v92 = 0;
    int v93 = v62;
    int v94 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v63 + 32))(v63, 128, &v98, 1, &v90, 2, 0);
    int v65 = *(_DWORD *)(*(void *)(v64 + 32) + 4);
    uint64_t v66 = *a1;
    unint64_t v98 = *(void *)a1[2];
    int v99 = 0;
    LODWORD(v90) = v26;
    int v92 = 0;
    int v93 = v62;
    int v94 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v66 + 32))(v66, 127, &v98, 1, &v90, 2, 0);
    int v68 = *(_DWORD *)(*(void *)(v67 + 32) + 4);
    if (!v96) {
      goto LABEL_65;
    }
    int v69 = *(_DWORD *)v95;
    uint64_t v70 = *a1;
    unint64_t v98 = *(void *)a1[2];
    int v99 = 0;
    LODWORD(v90) = v69;
    int v92 = 0;
    int v93 = v62;
    int v94 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v70 + 32))(v70, 127, &v98, 1, &v90, 2, 0);
    int v72 = *(_DWORD *)(*(void *)(v71 + 32) + 4);
    uint64_t v73 = *a1;
    unint64_t v98 = *(void *)a1[2];
    int v99 = 0;
    LODWORD(v90) = v72;
    int v92 = 0;
    int v93 = v65;
    int v94 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v73 + 32))(v73, 66, &v98, 1, &v90, 2, 0);
    int v65 = *(_DWORD *)(*(void *)(v74 + 32) + 4);
    uint64_t v75 = *a1;
    unint64_t v98 = *(void *)a1[2];
    int v99 = 0;
    LODWORD(v90) = v69;
    int v92 = 0;
    int v93 = v62;
    int v94 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v75 + 32))(v75, 128, &v98, 1, &v90, 2, 0);
    int v77 = *(_DWORD *)(*(void *)(v76 + 32) + 4);
    uint64_t v78 = *a1;
    unint64_t v98 = *(void *)a1[2];
    int v99 = 0;
    LODWORD(v90) = v77;
    int v92 = 0;
    int v93 = v68;
    int v94 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v78 + 32))(v78, 66, &v98, 1, &v90, 2, 0);
    int v80 = *(_DWORD **)(v79 + 32);
  }
  else
  {
    int v80 = v95;
    int v65 = *(_DWORD *)v95;
  }
  int v68 = v80[1];
LABEL_65:
  uint64_t v81 = *a1;
  LODWORD(v98) = v83;
  int v99 = 1;
  LODWORD(v90) = v65;
  int v92 = 0;
  int v93 = v68;
  int v94 = 0;
  (*(void (**)(void))(*(void *)v81 + 32))();
  if (v95 != &v97) {
    free(v95);
  }
}

uint64_t sub_1CBA5D7C0(uint64_t a1, void *a2)
{
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 12);
  unsigned int v4 = *(_DWORD *)(a1 + 8) - 1;
  int v5 = *(_DWORD *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v131 = *(void *)(a1 + 32);
  uint64_t v132 = v6;
  if (v4 >= 2) {
    int v7 = v3;
  }
  else {
    int v7 = v5;
  }
  if (v4 >= 2) {
    int v8 = v5;
  }
  else {
    int v8 = v3;
  }
  if (v4 >= 2) {
    unint64_t v9 = (unint64_t *)&v132;
  }
  else {
    unint64_t v9 = (unint64_t *)&v131;
  }
  if (v4 >= 2) {
    unsigned int v10 = (unint64_t *)&v131;
  }
  else {
    unsigned int v10 = (unint64_t *)&v132;
  }
  unint64_t v11 = *v9;
  if (*v9 == 9 || v11 == 65)
  {
    if (*v10 == 129) {
      goto LABEL_22;
    }
    goto LABEL_23;
  }
  if (v11 != 129) {
    goto LABEL_23;
  }
  if (*v10 == 9)
  {
    uint64_t v12 = 1;
    LODWORD(v136) = v8;
    LODWORD(v137) = 1;
    LODWORD(v142) = v7;
    LODWORD(v144[0]) = 0;
    (*(void (**)(void *, uint64_t, void **, uint64_t, void **, uint64_t, void))(*a2 + 32))(a2, 119, &v136, 1, &v142, 1, 0);
    return v12;
  }
  if (*v10 != 65)
  {
LABEL_23:
    uint64_t v18 = sub_1CB8F1DC4(v9);
    int v20 = v19;
    uint64_t v21 = sub_1CB8F1DC4(v10);
    unint64_t v23 = *v9;
    if (v18 == v21 && v20 == v22)
    {
      unint64_t v61 = *v10;
      if ((v23 & 0xFFFFFFFFFFFFFFF9) != 0 && (*v9 & 6) == 2 && v61 == 16777236)
      {
        uint64_t v136 = (void *)513;
        LODWORD(v137) = 0;
        LODWORD(v142) = v7;
        LODWORD(v144[0]) = 0;
        uint64_t v12 = 1;
        uint64_t v76 = (void *)(*(uint64_t (**)(void *, uint64_t, void **, uint64_t, void **, uint64_t, void))(*a2 + 32))(a2, 80, &v136, 1, &v142, 1, 0);
        LODWORD(v136) = v8;
        LODWORD(v137) = 1;
        uint64_t v142 = v76;
        uint64_t v143 = v77;
        LODWORD(v144[0]) = 1;
        sub_1CC7382B0((uint64_t)a2);
      }
      else if (v23 == 16777236 && (v61 & 0xFFFFFFFFFFFFFFF9) != 0 && (*v10 & 6) == 2)
      {
        uint64_t v136 = (void *)513;
        LODWORD(v137) = 0;
        LODWORD(v142) = v7;
        LODWORD(v144[0]) = 0;
        uint64_t v78 = (void *)sub_1CC7382B0((uint64_t)a2);
        uint64_t v12 = 1;
        LODWORD(v136) = v8;
        LODWORD(v137) = 1;
        uint64_t v142 = v78;
        uint64_t v143 = v79;
        LODWORD(v144[0]) = 1;
        (*(void (**)(void *, uint64_t, void **, uint64_t, void **, uint64_t, void))(*a2 + 32))(a2, 81, &v136, 1, &v142, 1, 0);
      }
      else
      {
        uint64_t v12 = 1;
        LODWORD(v136) = v8;
        LODWORD(v137) = 1;
        LODWORD(v142) = v7;
        LODWORD(v144[0]) = 0;
        sub_1CC7382B0((uint64_t)a2);
      }
      return v12;
    }
    unint64_t v25 = *v10;
    BOOL v26 = v23 == 16777244 && v25 == 16777252;
    if (v26 || (v23 == 8388636 ? (BOOL v27 = v25 == 8388644) : (BOOL v27 = 0), v27))
    {
      uint64_t v66 = 0;
      int v129 = v141;
      int v139 = v141;
      uint64_t v140 = 0x400000000;
      char v67 = 3;
      if ((v23 & 1) == 0) {
        char v67 = 19;
      }
      int v68 = (void *)(v23 & 0x8000000000000000 | (8 * (v23 >> v67)) | 1);
      unint64_t v69 = (unsigned __int16)(v23 >> 3);
      HIDWORD(v137) = 4;
      uint64_t v136 = v138;
      do
        v138[v66++] = v68;
      while (v69 != v66);
      LODWORD(v137) = (unsigned __int16)(v23 >> 3);
      uint64_t v70 = (uint64_t *)v136;
      LODWORD(v133) = v7;
      v135[0] = 0;
      uint64_t v142 = v144;
      uint64_t v143 = 0x800000000;
      if (v69 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if ((unsigned __int16)(v23 >> 3))
      {
        uint64_t v71 = 8 * v69;
        int v72 = v144;
        do
        {
          uint64_t v73 = *v70++;
          void *v72 = v73;
          *((_DWORD *)v72 + 2) = 0;
          v72 += 2;
          v71 -= 8;
        }
        while (v71);
        int v74 = v143;
        uint64_t v75 = v142;
      }
      else
      {
        int v74 = 0;
        uint64_t v75 = v144;
      }
      LODWORD(v143) = v74 + v69;
      (*(void (**)(void *, uint64_t, void *))(*a2 + 32))(a2, 74, v75);
      uint64_t v81 = v80;
      if (v142 != v144) {
        free(v142);
      }
      unint64_t v82 = 0;
      for (uint64_t i = 4; ; i += 32)
      {
        unint64_t v84 = *v9;
        if ((*v9 & 2) != 0) {
          uint64_t v85 = 0x800000000000000;
        }
        else {
          uint64_t v85 = 0x8000000000000;
        }
        if ((v85 & v84) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v80);
          unint64_t v84 = *v9;
        }
        if (v82 >= (unsigned __int16)(v84 >> 3)) {
          break;
        }
        if (v140 >= (unint64_t)HIDWORD(v140)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v139 + v140) = *(_DWORD *)(*((void *)v81 + 4) + i);
        LODWORD(v140) = v140 + 1;
        ++v82;
      }
      uint64_t v142 = v68;
      LODWORD(v143) = 0;
      (*(void (**)(void *, uint64_t, void **, uint64_t, void, void, void))(*a2 + 32))(a2, 68, &v142, 1, 0, 0, 0);
      if (v140 >= HIDWORD(v140)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v139 + v140) = *(_DWORD *)(*(void *)(v86 + 32) + 4);
      uint64_t v87 = (v140 + 1);
      LODWORD(v140) = v87;
      LODWORD(v133) = v8;
      LODWORD(v134) = 1;
      unint64_t v88 = (int *)v139;
      uint64_t v142 = v144;
      uint64_t v143 = 0x800000000;
      if (v87 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v87)
      {
        uint64_t v89 = 0;
        uint64_t v90 = 4 * v87;
        do
        {
          int v91 = *v88++;
          int v92 = &v144[v89];
          *int v92 = v91;
          v92[4] = 0;
          v89 += 3;
          v90 -= 4;
        }
        while (v90);
        int v93 = v143;
      }
      else
      {
        int v93 = 0;
      }
      LODWORD(v143) = v93 + v87;
      (*(void (**)(void *, uint64_t, void **, uint64_t, void *))(*a2 + 32))(a2, 77, &v133, 1, v144);
      if (v142 != v144) {
        free(v142);
      }
      if (v136 != v138) {
        free(v136);
      }
      uint64_t v104 = v139;
LABEL_164:
      if (v104 == v129) {
        return 1;
      }
LABEL_165:
      free(v104);
      return 1;
    }
    BOOL v28 = v23 == 16777252 && v25 == 16777244;
    if (v28 || (v23 == 8388644 ? (BOOL v29 = v25 == 8388636) : (BOOL v29 = 0), v29))
    {
      uint64_t v94 = 0;
      int v139 = v141;
      uint64_t v140 = 0x400000000;
      uint64_t v133 = v135;
      uint64_t v134 = 0x300000000;
      char v95 = 3;
      if ((v23 & 1) == 0) {
        char v95 = 19;
      }
      unint64_t v96 = v23 & 0x8000000000000000 | (8 * (v23 >> v95)) | 1;
      unint64_t v97 = (unsigned __int16)(v23 >> 3);
      HIDWORD(v137) = 4;
      uint64_t v136 = v138;
      do
        v138[v94++] = v96;
      while (v97 != v94);
      LODWORD(v137) = (unsigned __int16)(v23 >> 3);
      unint64_t v98 = (uint64_t *)v136;
      v130[0] = v7;
      v130[4] = 0;
      uint64_t v142 = v144;
      uint64_t v143 = 0x800000000;
      if (v97 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if ((unsigned __int16)(v23 >> 3))
      {
        uint64_t v99 = 8 * v97;
        uint64_t v100 = v144;
        do
        {
          uint64_t v101 = *v98++;
          *uint64_t v100 = v101;
          *((_DWORD *)v100 + 2) = 0;
          v100 += 2;
          v99 -= 8;
        }
        while (v99);
        int v102 = v143;
        uint64_t v103 = v142;
      }
      else
      {
        int v102 = 0;
        uint64_t v103 = v144;
      }
      LODWORD(v143) = v102 + v97;
      (*(void (**)(void *, uint64_t, void *))(*a2 + 32))(a2, 74, v103);
      uint64_t v107 = v106;
      if (v142 != v144) {
        free(v142);
      }
      unint64_t v108 = 0;
      for (uint64_t j = 4; ; j += 32)
      {
        unint64_t v110 = *v9;
        if ((*v9 & 2) != 0) {
          uint64_t v111 = 0x800000000000000;
        }
        else {
          uint64_t v111 = 0x8000000000000;
        }
        if ((v111 & v110) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v106);
          unint64_t v110 = *v9;
        }
        if (v108 >= (unsigned __int16)(v110 >> 3)) {
          break;
        }
        unint64_t v112 = *v10;
        if ((*v10 & 2) != 0) {
          uint64_t v113 = 0x800000000000000;
        }
        else {
          uint64_t v113 = 0x8000000000000;
        }
        if ((v113 & v112) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v106);
          unint64_t v112 = *v10;
        }
        if (v108 < (unsigned __int16)(v112 >> 3))
        {
          if (v134 >= (unint64_t)HIDWORD(v134)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v133 + v134) = *(_DWORD *)(*((void *)v107 + 4) + j);
          LODWORD(v134) = v134 + 1;
        }
        ++v108;
      }
      v130[0] = v8;
      v130[2] = 1;
      int v114 = (int *)v133;
      int v115 = v134;
      uint64_t v142 = v144;
      uint64_t v143 = 0x800000000;
      if (v134 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v134)
      {
        uint64_t v116 = 0;
        uint64_t v117 = 4 * v134;
        do
        {
          int v118 = *v114++;
          uint64_t v119 = &v144[v116];
          _DWORD *v119 = v118;
          v119[4] = 0;
          v116 += 3;
          v117 -= 4;
        }
        while (v117);
        int v120 = v143;
      }
      else
      {
        int v120 = 0;
      }
      LODWORD(v143) = v120 + v115;
      (*(void (**)(void *, uint64_t, _DWORD *, uint64_t, void *))(*a2 + 32))(a2, 77, v130, 1, v144);
      if (v142 != v144) {
        free(v142);
      }
      if (v136 != v138) {
        free(v136);
      }
      if (v133 != v135) {
        free(v133);
      }
      uint64_t v104 = v139;
      if (v139 == v141) {
        return 1;
      }
      goto LABEL_165;
    }
    uint64_t v12 = 0;
    if ((v23 & 0xFFFFFFFFFFFFFFF9) == 0) {
      return v12;
    }
    if ((v23 & 4) == 0) {
      return v12;
    }
    uint64_t v12 = 0;
    if ((v25 & 0xFFFFFFFFFFFFFFF9) == 0 || (v25 & 4) == 0) {
      return v12;
    }
    if ((v23 & 2) != 0) {
      uint64_t v30 = 0x800000000000000;
    }
    else {
      uint64_t v30 = 0x8000000000000;
    }
    if ((v30 & v23) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v22);
      unint64_t v23 = *v9;
      unint64_t v25 = *v10;
    }
    if ((v25 & 2) != 0) {
      uint64_t v31 = 0x800000000000000;
    }
    else {
      uint64_t v31 = 0x8000000000000;
    }
    if ((v31 & v25) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v22);
      unint64_t v25 = *v10;
    }
    if ((unsigned __int16)(v23 >> 3) != (unsigned __int16)(v25 >> 3)) {
      return 0;
    }
    unint64_t v32 = *v9;
    if ((*v9 & 2) != 0) {
      return 0;
    }
    char v33 = 3;
    if ((v32 & 1) == 0) {
      char v33 = 19;
    }
    unint64_t v34 = v32 & 0x8000000000000000 | (8 * (v32 >> v33));
    if ((v25 & 2) == 0 && v34 == 128)
    {
      char v35 = 19;
      if (v25) {
        char v35 = 3;
      }
      if ((v25 & 0x8000000000000000 | (8 * (v25 >> v35))) == 0x40)
      {
        int v129 = v138;
        uint64_t v136 = v138;
        uint64_t v137 = 0x400000000;
        LODWORD(v142) = v7;
        LODWORD(v144[0]) = 0;
        sub_1CC7363F0(a2, 0x81uLL, (int *)&v142);
        uint64_t v37 = v36;
        unint64_t v38 = 0;
        for (uint64_t k = 4; ; k += 32)
        {
          unint64_t v40 = *v9;
          uint64_t v41 = 0x800000000000000;
          if ((*v9 & 2) == 0) {
            uint64_t v41 = 0x8000000000000;
          }
          if ((v41 & v40) != 0)
          {
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)v36);
            unint64_t v40 = *v9;
          }
          if (v38 >= (unsigned __int16)(v40 >> 3)) {
            break;
          }
          int v139 = (void *)129;
          LODWORD(v140) = 0;
          LODWORD(v142) = *(_DWORD *)(*(void *)(v37 + 32) + k);
          LODWORD(v144[0]) = 0;
          unint64_t v42 = *v10;
          if (*v10) {
            char v43 = 3;
          }
          else {
            char v43 = 19;
          }
          unint64_t v44 = v42 & 0x8000000000000000 | (8 * (v42 >> v43)) | 1;
          char v45 = 35;
          if ((v42 & 4) == 0) {
            char v45 = 19;
          }
          unint64_t v46 = v42 >> v45;
          if ((v42 & 4) != 0) {
            char v47 = 19;
          }
          else {
            char v47 = 3;
          }
          if (v42) {
            char v47 = 3;
          }
          unint64_t v48 = (8 * (unsigned __int16)(v42 >> v47)) & 0xFFFFF8000007FFFFLL | ((v46 & 0xFFFFFF) << 19);
          if ((v42 & 2) != 0) {
            uint64_t v49 = (void *)(v48 | 2);
          }
          else {
            uint64_t v49 = (void *)v44;
          }
          uint64_t v133 = v49;
          uint64_t v50 = sub_1CB8F1DC4((unint64_t *)&v133);
          if (v51 == 1)
          {
            uint64_t v57 = v50;
            uint64_t v50 = v57;
          }
          v144[1] = v50;
          int v145 = 3;
          unsigned int v52 = (void *)(*(uint64_t (**)(void *, uint64_t, void **, uint64_t, void **, uint64_t, void))(*a2 + 32))(a2, 257, &v139, 1, &v142, 2, 0);
          unint64_t v54 = *v10;
          if ((*v10 & 2) != 0)
          {
            char v58 = 35;
            if ((v54 & 4) == 0) {
              char v58 = 19;
            }
            unint64_t v59 = v54 >> v58;
            if ((v54 & 4) != 0) {
              char v60 = 19;
            }
            else {
              char v60 = 3;
            }
            if (v54) {
              char v60 = 3;
            }
            uint64_t v56 = (void *)((8 * (unsigned __int16)(v54 >> v60)) & 0xFFFFF8000007FFFFLL | ((v59 & 0xFFFFFF) << 19) | 2);
          }
          else
          {
            if (v54) {
              char v55 = 3;
            }
            else {
              char v55 = 19;
            }
            uint64_t v56 = (void *)(v54 & 0x8000000000000000 | (8 * (v54 >> v55)) | 1);
          }
          int v139 = v56;
          LODWORD(v140) = 0;
          uint64_t v142 = v52;
          uint64_t v143 = v53;
          LODWORD(v144[0]) = 1;
          (*(void (**)(void *, uint64_t, void **, uint64_t, void **, uint64_t, void))(*a2 + 32))(a2, 119, &v139, 1, &v142, 1, 0);
          if (v137 >= (unint64_t)HIDWORD(v137)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v136 + v137) = *(_DWORD *)(*(void *)(v36 + 32) + 4);
          LODWORD(v137) = v137 + 1;
          ++v38;
        }
        LODWORD(v139) = v8;
        LODWORD(v140) = 1;
        uint64_t v122 = (int *)v136;
        int v123 = v137;
        uint64_t v142 = v144;
        uint64_t v143 = 0x800000000;
        if (v137 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v137)
        {
          uint64_t v124 = 0;
          uint64_t v125 = 4 * v137;
          do
          {
            int v126 = *v122++;
            __int16 v127 = &v144[v124];
            *__int16 v127 = v126;
            v127[4] = 0;
            v124 += 3;
            v125 -= 4;
          }
          while (v125);
          int v128 = v143;
        }
        else
        {
          int v128 = 0;
        }
        LODWORD(v143) = v128 + v123;
        (*(void (**)(void *, uint64_t, void **, uint64_t, void *))(*a2 + 32))(a2, 77, &v139, 1, v144);
        if (v142 != v144) {
          free(v142);
        }
        uint64_t v104 = v136;
        goto LABEL_164;
      }
      return 0;
    }
    uint64_t v12 = 0;
    if ((v25 & 2) != 0 || v34 != 64) {
      return v12;
    }
    char v121 = 3;
    if ((v25 & 1) == 0) {
      char v121 = 19;
    }
    if ((v25 & 0x8000000000000000 | (8 * (v25 >> v121))) != 0x80) {
      return 0;
    }
LABEL_22:
    uint64_t v12 = 1;
    LODWORD(v136) = v8;
    LODWORD(v137) = 1;
    LODWORD(v142) = v7;
    LODWORD(v144[0]) = 0;
    (*(void (**)(void *, uint64_t, void **, uint64_t, void **, uint64_t, void))(*a2 + 32))(a2, 118, &v136, 1, &v142, 1, 0);
    return v12;
  }
  uint64_t v136 = (void *)129;
  LODWORD(v137) = 0;
  LODWORD(v142) = v7;
  LODWORD(v144[0]) = 0;
  uint64_t v12 = 1;
  uint64_t v13 = (llvm::MachineFunction *)(*(uint64_t (**)(void *, uint64_t, void **, uint64_t, void **, uint64_t, void))(*a2 + 32))(a2, 257, &v136, 1, &v142, 1, 0);
  unint64_t v15 = v14;
  uint64_t v17 = sub_1CB8F1DC4(v10);
  if (v16 == 1) {
  LODWORD(v142) = 1;
  }
  uint64_t v143 = 0;
  v144[0] = v17;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v142);
  LODWORD(v136) = v8;
  LODWORD(v137) = 1;
  uint64_t v142 = v13;
  uint64_t v143 = (uint64_t)v15;
  LODWORD(v144[0]) = 1;
  (*(void (**)(void *, uint64_t, void **, uint64_t, void **, uint64_t, void))(*a2 + 32))(a2, 119, &v136, 1, &v142, 1, 0);
  return v12;
}

uint64_t sub_1CBA5E72C(uint64_t a1, uint64_t a2, llvm::IntegerType *****a3)
{
  unsigned int v118 = 0;
  int v119 = 0;
  uint64_t v5 = 0;
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a3[1][1] + 1733)) {
    unint64_t v6 = 32;
  }
  else {
    unint64_t v6 = 16;
  }
  unint64_t v127 = (((v6 >> 4) & 3) << 7) | 1;
  unsigned int v7 = *(_DWORD *)(*(void *)(a1 + 32) + 4);
  uint64_t v8 = 1;
  while (1)
  {
    unsigned int v126 = 0;
    uint64_t v9 = *(void *)(a2 + 24);
    uint64_t v10 = v7;
    uint64_t v11 = *(void *)(a2 + 272);
    if ((v7 & 0x80000000) != 0) {
      uint64_t v12 = (uint64_t *)(v9 + 16 * (v7 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v12 = (uint64_t *)(v11 + 8 * v7);
    }
    uint64_t v13 = *v12;
    if (v13
      && ((*(unsigned char *)(v13 + 3) & 1) != 0 || (uint64_t v13 = *(void *)(v13 + 24)) != 0 && (*(unsigned char *)(v13 + 3) & 1) != 0)
      && (uint64_t v14 = *(void *)(v13 + 8)) != 0
      && **(_WORD **)(v14 + 16) == 80
      && *(_DWORD *)(v14 + 40) == 2
      || ((v7 & 0x80000000) == 0
        ? (unint64_t v15 = (uint64_t *)(v11 + 8 * v7))
        : (unint64_t v15 = (uint64_t *)(v9 + 16 * (v7 & 0x7FFFFFFF) + 8)),
          (uint64_t v16 = *v15) != 0
       && ((*(unsigned char *)(v16 + 3) & 1) != 0 || (uint64_t v16 = *(void *)(v16 + 24)) != 0 && (*(unsigned char *)(v16 + 3) & 1) != 0)
       && (uint64_t v14 = *(void *)(v16 + 8)) != 0
       && **(_WORD **)(v14 + 16) == 81
       && *(_DWORD *)(v14 + 40) == 2))
    {
      unsigned int v17 = *(_DWORD *)(*(void *)(v14 + 32) + 36);
      unsigned int v126 = v17;
      if ((v17 & 0x80000000) != 0 && (uint64_t v18 = v17 & 0x7FFFFFFF, v18 < *(_DWORD *)(a2 + 432))) {
        int v19 = *(unsigned int **)(*(void *)(a2 + 424) + 8 * v18);
      }
      else {
        int v19 = 0;
      }
      int v128 = v19;
      unint64_t v21 = sub_1CB8F1DC4((unint64_t *)&v128);
      if (v20 == 1) {
      if (v21 >= v6)
      }
        uint64_t v10 = v126;
      else {
        uint64_t v10 = v7;
      }
      unsigned int v7 = v10;
    }
    int v128 = &v126;
    int v129 = (unint64_t *)&v126;
    uint64_t v130 = &v126;
    LODWORD(v134) = v7;
    BOOL v22 = (uint64_t *)((v7 & 0x80000000) != 0
                    ? *(void *)(a2 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8
                    : *(void *)(a2 + 272) + 8 * v10);
    if ((uint64_t v23 = *v22) != 0
      && ((*(unsigned char *)(v23 + 3) & 1) != 0 || (uint64_t v23 = *(void *)(v23 + 24)) != 0 && (*(unsigned char *)(v23 + 3) & 1) != 0)
      && (uint64_t v24 = *(void *)(v23 + 8)) != 0
      && **(_WORD **)(v24 + 16) == 118
      && *(_DWORD *)(v24 + 40) == 2)
    {
      unsigned int v25 = *(_DWORD *)(*(void *)(v24 + 32) + 36);
      unsigned int v126 = v25;
      if ((v25 & 0x80000000) == 0) {
        goto LABEL_54;
      }
    }
    else
    {
      if (!sub_1CBA5FC98(&v128, a2, (unsigned int *)&v134)) {
        goto LABEL_61;
      }
      unsigned int v25 = v126;
      if ((v126 & 0x80000000) == 0)
      {
LABEL_54:
        uint64_t v27 = 0;
        goto LABEL_55;
      }
    }
    unsigned int v26 = v25 & 0x7FFFFFFF;
    if (v26 >= *(_DWORD *)(a2 + 432)) {
      goto LABEL_54;
    }
    uint64_t v27 = *(void *)(*(void *)(a2 + 424) + 8 * v26);
LABEL_55:
    uint64_t v134 = v27;
    unint64_t v29 = sub_1CB8F1DC4((unint64_t *)&v134);
    if (v28 == 1) {
    uint64_t v10 = v29 >= v6 ? v126 : v7;
    }
    unsigned int v7 = v10;
LABEL_61:
    unint64_t v121 = 0;
    sub_1CC73C210(v10, a2, (uint64_t)&v128);
    if (!(_BYTE)v130) {
      goto LABEL_62;
    }
    if (v129 < 0x41) {
      break;
    }
    if (v128) {
      MEMORY[0x1D25D9CB0](v128, 0x1000C8000313F17);
    }
LABEL_62:
    unint64_t v30 = sub_1CBA2EB1C(v10, a2, 0);
    if (HIDWORD(v30))
    {
      unsigned __int16 v114 = v30;
      uint64_t v134 = (((v6 >> 4) & 3) << 7) | 1;
      int v135 = 0;
      uint64_t v115 = llvm::IntegerType::get(***a3[1], (llvm::LLVMContext *)v6);
      int v74 = *(llvm::ConstantInt **)v115;
      unsigned int v116 = *(_DWORD *)(v115 + 8);
      LODWORD(v129) = v116 >> 8;
      if (v116 >> 8 >= 0x41) {
        operator new[]();
      }
      uint64_t v71 = v114;
      goto LABEL_191;
    }
    if ((v7 & 0x80000000) != 0) {
      uint64_t v31 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v31 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v10);
    }
    uint64_t v32 = *v31;
    if (v32 && ((*(unsigned char *)(v32 + 3) & 1) != 0 || (uint64_t v32 = *(void *)(v32 + 24)) != 0 && (*(unsigned char *)(v32 + 3) & 1) != 0)) {
      uint64_t v33 = *(void *)(v32 + 8);
    }
    else {
      uint64_t v33 = 0;
    }
    unsigned int v124 = 0;
    unsigned int v125 = 0;
    if (!sub_1CBA5F778(v33)) {
      goto LABEL_81;
    }
    uint64_t v34 = *(void *)(v33 + 32);
    uint64_t v35 = *(unsigned int *)(v34 + 36);
    unsigned int v124 = *(_DWORD *)(v34 + 68);
    unsigned int v125 = v35;
    unint64_t v36 = v117;
    if ((v35 & 0x80000000) != 0) {
      uint64_t v37 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v37 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v35);
    }
    uint64_t v38 = *v37;
    if (v38)
    {
      if (*(unsigned char *)(v38 + 3)) {
        goto LABEL_73;
      }
      uint64_t v38 = *(void *)(v38 + 24);
      if (v38)
      {
        unint64_t v36 = v117;
        if (*(unsigned char *)(v38 + 3))
        {
LABEL_73:
          uint64_t v39 = *(void *)(v38 + 8);
          if (v39 && **(_WORD **)(v39 + 16) == 80 && *(_DWORD *)(v39 + 40) == 2)
          {
            LODWORD(v35) = *(_DWORD *)(*(void *)(v39 + 32) + 36);
            unsigned int v125 = v35;
          }
        }
      }
      else
      {
        unint64_t v36 = v117;
      }
    }
    unint64_t v117 = v36 & 0xFFFFFFFF00000000;
    unint64_t v40 = sub_1CBA2EB1C(v35, a2, 0);
    uint64_t v41 = (unsigned __int16)v40 * v8;
    unsigned int v42 = v124;
    unint64_t v43 = HIDWORD(v40);
    if (!v43) {
      uint64_t v41 = 0;
    }
    v5 += v41;
    if (v43) {
      goto LABEL_178;
    }
    sub_1CC73C210(v124, a2, (uint64_t)&v128);
    if ((_BYTE)v130)
    {
      if (v129 < 0x41)
      {
        v5 += ((uint64_t)((void)v128 << -(uint64_t)v129) >> -(uint64_t)v129) * v8;
LABEL_147:
        unsigned int v42 = v125;
        goto LABEL_178;
      }
      if (v128) {
        MEMORY[0x1D25D9CB0](v128, 0x1000C8000313F17);
      }
    }
LABEL_81:
    int v128 = &v125;
    int v129 = &v121;
    uint64_t v130 = &v124;
    if ((v7 & 0x80000000) != 0) {
      unint64_t v44 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
    }
    else {
      unint64_t v44 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v10);
    }
    uint64_t v45 = *v44;
    if (v45)
    {
      if (*(unsigned char *)(v45 + 3) & 1) != 0 || (uint64_t v45 = *(void *)(v45 + 24)) != 0 && (*(unsigned char *)(v45 + 3))
      {
        uint64_t v46 = *(void *)(v45 + 8);
        if (v46)
        {
          if (**(_WORD **)(v46 + 16) == 45 && *(_DWORD *)(v46 + 40) == 3)
          {
            LODWORD(v134) = *(_DWORD *)(*(void *)(v46 + 32) + 36);
            int v66 = sub_1CBA14978((uint64_t)&v128, a2, (unsigned int *)&v134);
            uint64_t v67 = *(void *)(v46 + 32);
            if (v66)
            {
              *uint64_t v130 = *(_DWORD *)(v67 + 68);
              if ((v7 & 0x80000000) == 0) {
                goto LABEL_149;
              }
LABEL_138:
              if ((v10 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(a2 + 432)) {
                goto LABEL_149;
              }
              uint64_t v68 = *(void *)(*(void *)(a2 + 424) + 8 * (v10 & 0x7FFFFFFF));
LABEL_150:
              uint64_t v134 = v68;
              int v135 = 0;
              LODWORD(v128) = v125;
              LODWORD(v130) = 0;
              LODWORD(v131) = v124;
              int v133 = 0;
              ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, unsigned int **, uint64_t, void))(*a3)[4])(a3, 45, &v134, 1, &v128, 2, 0);
              unsigned int v42 = *(_DWORD *)(*(void *)(v70 + 32) + 4);
              v5 += v121 * v8;
              goto LABEL_178;
            }
            *uint64_t v130 = *(_DWORD *)(v67 + 36);
            LODWORD(v123) = *(_DWORD *)(v67 + 68);
            if (sub_1CBA14978((uint64_t)&v128, a2, (unsigned int *)&v123))
            {
              if ((v7 & 0x80000000) != 0) {
                goto LABEL_138;
              }
LABEL_149:
              uint64_t v68 = 0;
              goto LABEL_150;
            }
          }
        }
      }
    }
    if ((v7 & 0x80000000) != 0) {
      char v47 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
    }
    else {
      char v47 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v10);
    }
    uint64_t v48 = *v47;
    if (v48)
    {
      if (*(unsigned char *)(v48 + 3) & 1) != 0 || (uint64_t v48 = *(void *)(v48 + 24)) != 0 && (*(unsigned char *)(v48 + 3))
      {
        uint64_t v49 = *(void *)(v48 + 8);
        if (v49)
        {
          if (**(_WORD **)(v49 + 16) == 47 && *(_DWORD *)(v49 + 40) == 3)
          {
            uint64_t v50 = *(void *)(v49 + 32);
            unsigned int v125 = *(_DWORD *)(v50 + 36);
            sub_1CC73C210(*(_DWORD *)(v50 + 68), a2, (uint64_t)&v128);
            if ((_BYTE)v130)
            {
              if (v129 < 0x41)
              {
                uint64_t v64 = (uint64_t)((void)v128 << -(char)v129) >> -(char)v129;
                int v65 = &v125;
LABEL_142:
                unsigned int v42 = *v65;
                v8 *= v64;
                goto LABEL_178;
              }
              if (v128) {
                MEMORY[0x1D25D9CB0](v128, 0x1000C8000313F17);
              }
            }
            sub_1CC73C210(*(_DWORD *)(*(void *)(v49 + 32) + 36), a2, (uint64_t)&v128);
            if ((_BYTE)v130)
            {
              if (v129 < 0x41)
              {
                uint64_t v64 = (uint64_t)((void)v128 << -(char)v129) >> -(char)v129;
                int v65 = (unsigned int *)(*(void *)(v49 + 32) + 68);
                goto LABEL_142;
              }
              if (v128) {
                MEMORY[0x1D25D9CB0](v128, 0x1000C8000313F17);
              }
            }
          }
        }
      }
    }
    if ((v7 & 0x80000000) != 0) {
      unint64_t v51 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
    }
    else {
      unint64_t v51 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v10);
    }
    uint64_t v52 = *v51;
    if (v52)
    {
      if (*(unsigned char *)(v52 + 3) & 1) != 0 || (uint64_t v52 = *(void *)(v52 + 24)) != 0 && (*(unsigned char *)(v52 + 3))
      {
        uint64_t v53 = *(void *)(v52 + 8);
        if (v53)
        {
          if (**(_WORD **)(v53 + 16) == 127 && *(_DWORD *)(v53 + 40) == 3)
          {
            uint64_t v69 = *(void *)(v53 + 32);
            unsigned int v125 = *(_DWORD *)(v69 + 36);
            sub_1CC73C210(*(_DWORD *)(v69 + 68), a2, (uint64_t)&v128);
            if ((_BYTE)v130)
            {
              if (v129 < 0x41)
              {
                v8 <<= (uint64_t)((void)v128 << -(uint64_t)v129) >> -(uint64_t)v129;
                goto LABEL_147;
              }
              if (v128) {
                MEMORY[0x1D25D9CB0](v128, 0x1000C8000313F17);
              }
            }
          }
        }
      }
    }
    if ((v7 & 0x80000000) != 0) {
      unint64_t v54 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
    }
    else {
      unint64_t v54 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v10);
    }
    uint64_t v55 = *v54;
    if (!v55) {
      goto LABEL_193;
    }
    if ((*(unsigned char *)(v55 + 3) & 1) == 0)
    {
      uint64_t v55 = *(void *)(v55 + 24);
      if (!v55 || (*(unsigned char *)(v55 + 3) & 1) == 0) {
        goto LABEL_193;
      }
    }
    uint64_t v56 = *(void *)(v55 + 8);
    if (!v56) {
      goto LABEL_193;
    }
    if (**(_WORD **)(v56 + 16) != 45) {
      goto LABEL_193;
    }
    if (*(_DWORD *)(v56 + 40) != 3) {
      goto LABEL_193;
    }
    uint64_t v57 = *(void *)(v56 + 32);
    uint64_t v58 = *(unsigned int *)(v57 + 36);
    unsigned int v42 = *(_DWORD *)(v57 + 68);
    unsigned int v124 = v42;
    unsigned int v125 = v58;
    if (v119 || v8 != 1) {
      goto LABEL_193;
    }
    if ((v7 & 0x80000000) != 0) {
      unint64_t v59 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
    }
    else {
      unint64_t v59 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v10);
    }
    uint64_t v60 = *v59;
    if (!v60)
    {
LABEL_243:
      int v119 = 0;
      uint64_t v8 = 1;
      goto LABEL_193;
    }
    while ((*(unsigned char *)(v60 + 3) & 1) != 0)
    {
      uint64_t v60 = *(void *)(v60 + 24);
      if (!v60) {
        goto LABEL_243;
      }
    }
    while (1)
    {
      uint64_t v60 = *(void *)(v60 + 24);
      if (!v60) {
        break;
      }
      if ((*(unsigned char *)(v60 + 3) & 1) == 0) {
        goto LABEL_243;
      }
    }
    if ((v58 & 0x80000000) != 0) {
      unint64_t v61 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v58 & 0x7FFFFFFF) + 8);
    }
    else {
      unint64_t v61 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v58);
    }
    uint64_t v62 = *v61;
    if (v62
      && ((*(unsigned char *)(v62 + 3) & 1) != 0 || (uint64_t v62 = *(void *)(v62 + 24)) != 0 && (*(unsigned char *)(v62 + 3) & 1) != 0)
      && (uint64_t v63 = *(void *)(v62 + 8)) != 0
      && **(_WORD **)(v63 + 16) == 127
      && *(_DWORD *)(v63 + 40) == 3)
    {
      uint64_t v8 = 1;
      unsigned int v118 = v42;
      int v119 = 1;
      unsigned int v42 = v58;
    }
    else
    {
      int v119 = 1;
      unsigned int v118 = v58;
      uint64_t v8 = 1;
    }
LABEL_178:
    unsigned int v7 = v42;
  }
  uint64_t v71 = (uint64_t)((void)v128 << -(uint64_t)v129) >> -(uint64_t)v129;
  unint64_t v121 = v71;
  uint64_t v134 = (((v6 >> 4) & 3) << 7) | 1;
  int v135 = 0;
  uint64_t v72 = llvm::IntegerType::get(***a3[1], (llvm::LLVMContext *)v6);
  int v74 = *(llvm::ConstantInt **)v72;
  unsigned int v75 = *(_DWORD *)(v72 + 8);
  LODWORD(v129) = v75 >> 8;
  if (v75 >> 8 >= 0x41) {
    operator new[]();
  }
LABEL_191:
  int v128 = 0;
  uint64_t v76 = llvm::ConstantInt::get(v74, (llvm::LLVMContext *)&v128, v73);
  if (v129 >= 0x41 && v128) {
    MEMORY[0x1D25D9CB0](v128, 0x1000C8000313F17);
  }
  ((void (*)(llvm::IntegerType *****, uint64_t *, void *))(*a3)[2])(a3, &v134, v76);
  unsigned int v7 = *(_DWORD *)(*(void *)(v77 + 32) + 4);
  v5 += v71 * v8;
LABEL_193:
  uint64_t result = a1;
  if (v5 < 0x8000 && (v8 & 0x8000000000000000) == 0)
  {
    unsigned int v80 = sub_1CB8F1DC4(&v127);
    if (v79 == 1) {
    if (v80 > 0x40)
    }
      operator new[]();
    if (v80) {
      unint64_t v81 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v80;
    }
    else {
      unint64_t v81 = 0;
    }
    if ((v7 & 0x80000000) != 0 && (v7 & 0x7FFFFFFF) < *(_DWORD *)(a2 + 432)) {
      unint64_t v82 = *(void *)(*(void *)(a2 + 424) + 8 * (v7 & 0x7FFFFFFF));
    }
    else {
      unint64_t v82 = 0;
    }
    unint64_t v83 = v81 & v8;
    unint64_t v123 = v82;
    unint64_t v84 = v127;
    if (v82 != v127)
    {
      if ((v82 & 0xFFFFFFFFFFFFFFF9) != 0 && (v82 & 6) == 2)
      {
        unsigned int v86 = sub_1CB8F1DC4(&v123);
        if (v85 == 1) {
        uint64_t v134 = (8 * v86) | 1;
        }
        int v135 = 0;
        LODWORD(v128) = v7;
        LODWORD(v130) = 0;
        sub_1CC7382B0((uint64_t)a3);
        unsigned int v7 = *(_DWORD *)(*(void *)(v87 + 32) + 4);
        unint64_t v84 = v127;
      }
      uint64_t v134 = v84;
      int v135 = 0;
      LODWORD(v128) = v7;
      LODWORD(v130) = 0;
      sub_1CC738034(a3, 126, (unint64_t *)&v134, (int *)&v128);
      unsigned int v7 = *(_DWORD *)(*(void *)(v88 + 32) + 4);
    }
    int64_t v89 = v81 & v5;
    if (v83 >= 2)
    {
      unint64_t v90 = v127;
      unint64_t v121 = v127;
      int v122 = 0;
      int v91 = (llvm::LLVMContext *)(unsigned __int16)(v127 >> 3);
      int v92 = (llvm::LLVMContext *)(unsigned __int16)(v127 >> 19);
      if ((v127 & 2) == 0) {
        int v92 = (llvm::LLVMContext *)(v127 >> 19);
      }
      if ((v127 & 4) != 0) {
        int v91 = v92;
      }
      if (v127) {
        int v93 = (llvm::LLVMContext *)(v127 >> 3);
      }
      else {
        int v93 = v91;
      }
      uint64_t v94 = (llvm::ConstantInt *)llvm::IntegerType::get(***a3[1], v93);
      char v95 = llvm::ConstantInt::get(v94, v83, (const llvm::APInt *)1);
      uint64_t v96 = ((uint64_t (*)(llvm::IntegerType *****, unint64_t *, void *))(*a3)[2])(a3, &v121, v95);
      uint64_t v134 = v90;
      int v135 = 0;
      LODWORD(v128) = v7;
      LODWORD(v130) = 0;
      uint64_t v131 = v96;
      uint64_t v132 = v97;
      int v133 = 1;
      ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, unsigned int **, uint64_t, void))(*a3)[4])(a3, 47, &v134, 1, &v128, 2, 0);
      unsigned int v7 = *(_DWORD *)(*(void *)(v98 + 32) + 4);
    }
    if (v89 >= 1)
    {
      unint64_t v99 = v127;
      unint64_t v121 = v127;
      int v122 = 0;
      uint64_t v100 = (llvm::LLVMContext *)(unsigned __int16)(v127 >> 3);
      uint64_t v101 = (llvm::LLVMContext *)(unsigned __int16)(v127 >> 19);
      if ((v127 & 2) == 0) {
        uint64_t v101 = (llvm::LLVMContext *)(v127 >> 19);
      }
      if ((v127 & 4) != 0) {
        uint64_t v100 = v101;
      }
      if (v127) {
        int v102 = (llvm::LLVMContext *)(v127 >> 3);
      }
      else {
        int v102 = v100;
      }
      uint64_t v103 = (llvm::ConstantInt *)llvm::IntegerType::get(***a3[1], v102);
      uint64_t v104 = llvm::ConstantInt::get(v103, v89, (const llvm::APInt *)1);
      uint64_t v105 = ((uint64_t (*)(llvm::IntegerType *****, unint64_t *, void *))(*a3)[2])(a3, &v121, v104);
      uint64_t v134 = v99;
      int v135 = 0;
      LODWORD(v128) = v7;
      LODWORD(v130) = 0;
      uint64_t v131 = v105;
      uint64_t v132 = v106;
      int v133 = 1;
      ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, unsigned int **, uint64_t, void))(*a3)[4])(a3, 45, &v134, 1, &v128, 2, 0);
      unsigned int v7 = *(_DWORD *)(*(void *)(v107 + 32) + 4);
    }
    unsigned int v108 = v118;
    if (v119)
    {
      if ((v118 & 0x80000000) != 0 && (v118 & 0x7FFFFFFF) < *(_DWORD *)(a2 + 432)) {
        unint64_t v109 = *(void *)(*(void *)(a2 + 424) + 8 * (v118 & 0x7FFFFFFF));
      }
      else {
        unint64_t v109 = 0;
      }
      if (v109 != v127)
      {
        uint64_t v134 = v127;
        int v135 = 0;
        LODWORD(v128) = v118;
        LODWORD(v130) = 0;
        sub_1CC738034(a3, 126, (unint64_t *)&v134, (int *)&v128);
        unsigned int v108 = *(_DWORD *)(*(void *)(v110 + 32) + 4);
        unint64_t v109 = v127;
      }
      uint64_t v134 = v109;
      int v135 = 0;
      LODWORD(v128) = v108;
      LODWORD(v130) = 0;
      LODWORD(v131) = v7;
      int v133 = 0;
      ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, unsigned int **, uint64_t, void))(*a3)[4])(a3, 45, &v134, 1, &v128, 2, 0);
      unsigned int v7 = *(_DWORD *)(*(void *)(v111 + 32) + 4);
    }
    if ((v7 & 0x80000000) != 0) {
      unint64_t v112 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
    }
    else {
      unint64_t v112 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v7);
    }
    uint64_t v113 = *v112;
    if (v113
      && ((*(unsigned char *)(v113 + 3) & 1) != 0 || (uint64_t v113 = *(void *)(v113 + 24)) != 0 && (*(unsigned char *)(v113 + 3) & 1) != 0))
    {
      return *(void *)(v113 + 8);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_1CBA5F778(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  int v1 = **(unsigned __int16 **)(a1 + 16);
  if (v1 != 66) {
    return v1 == 45;
  }
  for (uint64_t i = 0; i != 64; i += 32)
  {
    unint64_t v6 = (char *)&v29 + i;
    *((_DWORD *)v6 + 2) = 1;
    *(void *)unint64_t v6 = 0;
    *((_DWORD *)v6 + 6) = 1;
    *((void *)v6 + 2) = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 24) + 32);
  v24[1] = v26;
  v24[2] = v26;
  v24[3] = 4;
  int v25 = 0;
  v24[0] = &unk_1F261BC50;
  v26[4] = v7;
  v26[5] = *(void *)(v7 + 40);
  v26[6] = (*(uint64_t (**)(void))(**(void **)(v7 + 16) + 120))(*(void *)(v7 + 16));
  v26[7] = *(void *)(*(void *)v7 + 40) + 272;
  int v27 = 6;
  uint64_t v28 = 1;
  for (uint64_t j = 15; j != 95; j += 5)
    LODWORD(v24[j]) = -1;
  sub_1CC6DEE8C((uint64_t)v24, (const char *)*(unsigned int *)(*(void *)(a1 + 32) + 36), (uint64_t)&v20);
  if (v30 >= 0x41 && v29) {
    MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
  }
  uint64_t v9 = v20;
  uint64_t v29 = v20;
  unsigned int v10 = v21;
  unsigned int v30 = v21;
  unsigned int v21 = 0;
  if (v32 >= 0x41 && v31)
  {
    MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
    uint64_t v31 = v22;
    unsigned int v32 = v23;
    unsigned int v23 = 0;
    if (v21 >= 0x41 && v20) {
      MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
    }
  }
  else
  {
    uint64_t v31 = v22;
    unsigned int v32 = v23;
  }
  sub_1CC6DEE8C((uint64_t)v24, (const char *)*(unsigned int *)(*(void *)(a1 + 32) + 68), (uint64_t)&v20);
  if (v34 >= 0x41 && v33) {
    MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
  }
  uint64_t v11 = v20;
  uint64_t v33 = v20;
  unsigned int v12 = v21;
  unsigned int v34 = v21;
  unsigned int v21 = 0;
  if (v36[0] >= 0x41u && v35)
  {
    MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
    uint64_t v35 = v22;
    v36[0] = v23;
    unsigned int v23 = 0;
    if (v21 >= 0x41 && v20) {
      MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
    }
  }
  else
  {
    uint64_t v35 = v22;
    v36[0] = v23;
  }
  if (v10 > 0x40) {
    operator new[]();
  }
  unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
  if (!v10) {
    unint64_t v13 = 0;
  }
  unint64_t v14 = v13 & ~v9;
  if (v12 > 0x40) {
    operator new[]();
  }
  if (v12) {
    unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
  }
  else {
    unint64_t v15 = 0;
  }
  BOOL v2 = (v15 & ~v11 & v14) == 0;
  sub_1CB9FB5B0((uint64_t)v24);
  for (uint64_t k = 0; k != -16; k -= 8)
  {
    unsigned int v17 = (char *)&v29 + k * 4;
    if (v36[k] >= 0x41u)
    {
      uint64_t v18 = *((void *)v17 + 6);
      if (v18) {
        MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
      }
    }
    if (*((_DWORD *)v17 + 10) >= 0x41u)
    {
      uint64_t v19 = *((void *)v17 + 4);
      if (v19) {
        MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
      }
    }
  }
  return v2;
}

uint64_t sub_1CBA5FC98(_DWORD **a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  if ((v3 & 0x80000000) != 0) {
    unsigned int v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v3);
  }
  uint64_t v5 = *v4;
  if (v5
    && ((*(unsigned char *)(v5 + 3) & 1) != 0 || (uint64_t v5 = *(void *)(v5 + 24)) != 0 && (*(unsigned char *)(v5 + 3) & 1) != 0)
    && (uint64_t v6 = *(void *)(v5 + 8)) != 0
    && **(_WORD **)(v6 + 16) == 126
    && *(_DWORD *)(v6 + 40) == 2)
  {
    ++a1;
  }
  else
  {
    if ((v3 & 0x80000000) != 0) {
      uint64_t v7 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v7 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v3);
    }
    uint64_t v8 = *v7;
    if (!v8) {
      return 0;
    }
    if ((*(unsigned char *)(v8 + 3) & 1) == 0)
    {
      uint64_t v8 = *(void *)(v8 + 24);
      if (!v8 || (*(unsigned char *)(v8 + 3) & 1) == 0) {
        return 0;
      }
    }
    uint64_t v6 = *(void *)(v8 + 8);
    if (!v6 || **(_WORD **)(v6 + 16) != 124 || *(_DWORD *)(v6 + 40) != 2) {
      return 0;
    }
  }
  **a1 = *(_DWORD *)(*(void *)(v6 + 32) + 36);
  return 1;
}

uint64_t sub_1CBA5FD94(uint64_t a1, llvm::IntegerType *****a2, _DWORD *a3, int a4, int a5)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  uint64_t v83 = 513;
  int v84 = 0;
  LODWORD(v74) = a4;
  LODWORD(v76) = 0;
  uint64_t v9 = (const char *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a2)[4])(a2, 80, &v83, 1, &v74, 1, 0);
  uint64_t v83 = 257;
  int v84 = 0;
  uint64_t v74 = (uint64_t)v9;
  uint64_t v75 = v10;
  LODWORD(v76) = 1;
  ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a2)[4])(a2, 119, &v83, 1, &v74, 1, 0);
  uint64_t v12 = *(unsigned int *)(*(void *)(v11 + 32) + 4);
  if (!a5)
  {
    unsigned int v18 = a3[8];
    int v19 = v18 & 0xF;
    int v20 = (v18 >> 12) & 0x7F;
    int v21 = (v18 >> 9) & 3;
    if (v20 == 4) {
      int v22 = 2;
    }
    else {
      int v22 = v20 == 2;
    }
    if (!v20) {
      int v22 = v21;
    }
    if ((v19 - 1) < 2 || ((1 << v19) & 0x431) == 0 || v22)
    {
      uint64_t v83 = 257;
      int v84 = 0;
      LODWORD(v74) = v12;
      LODWORD(v76) = 0;
      uint64_t v72 = 257;
      int v73 = 0;
      if (v20 == 4) {
        int v23 = 2;
      }
      else {
        int v23 = v20 == 2;
      }
      if (v20) {
        int v24 = v23;
      }
      else {
        int v24 = v21;
      }
      if (v19 == 2)
      {
        unsigned int v25 = v24 + 2;
      }
      else
      {
        int v67 = 1 << v19;
        if ((v67 & 0x431) != 0) {
          int v68 = v24;
        }
        else {
          int v68 = 2;
        }
        if ((v67 & 0xC2) != 0) {
          unsigned int v25 = v24 + 1;
        }
        else {
          unsigned int v25 = v68;
        }
      }
      unint64_t v26 = v25;
      int v27 = (llvm::ConstantInt *)llvm::IntegerType::get(***a2[1], (llvm::LLVMContext *)0x20);
      uint64_t v28 = llvm::ConstantInt::get(v27, v26, (const llvm::APInt *)1);
      uint64_t v77 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*a2)[2])(a2, &v72, v28);
      uint64_t v78 = v29;
      int v79 = 1;
      ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a2)[4])(a2, 128, &v83, 1, &v74, 2, 0);
    }
    return *(unsigned int *)(*(void *)(v11 + 32) + 4);
  }
  uint64_t v13 = (uint64_t)a2[1];
  uint64_t v14 = *(void *)(v13 + 48);
  uint64_t v15 = *(void *)(v13 + 56);
  if (!v14)
  {
    uint64_t v14 = (*(uint64_t (**)(void, uint64_t, llvm::IntegerType ****))(**(void **)(v13 + 8) + 216))(*(void *)(v13 + 8), v13 + 128, a2[1]);
    *(void *)(v13 + 48) = v14;
  }
  BOOL v17 = 0;
  if ((*(_WORD *)(*(void *)v13 + 18) & 0x3FF0) != 0x640)
  {
    if (*(unsigned char *)(*(void *)(v13 + 8) + 1687))
    {
      uint64_t v16 = *(llvm::Module **)(*(void *)v13 + 40);
      uint64_t v74 = (uint64_t)"agx.stack_oob";
      LOWORD(v78) = 259;
      if (llvm::Module::getNamedMetadata(v16, (const char **)&v74)) {
        BOOL v17 = 1;
      }
    }
  }
  if ((*(_WORD *)(*(void *)v13 + 18) & 0x3F70) != 0
    && (*(_WORD *)(*(void *)v13 + 18) & 0x3FF0) != 0xFF0
    && !*(unsigned char *)(v15 + 62))
  {
    if (*(unsigned char *)(v14 + 456))
    {
      if (*(unsigned char *)(v14 + 455)) {
        goto LABEL_29;
      }
LABEL_57:
      if (!v17) {
        return v12;
      }
      int v30 = sub_1CB925F18((uint64_t)a2, a1);
      goto LABEL_30;
    }
    int v69 = sub_1CBA654B0(v13);
    *(unsigned char *)(v14 + 455) = v69;
    *(unsigned char *)(v14 + 456) = 1;
    if (!v69) {
      goto LABEL_57;
    }
  }
LABEL_29:
  int v30 = sub_1CB925F18((uint64_t)a2, a1);
  uint64_t v83 = 257;
  int v84 = 0;
  LODWORD(v74) = v12;
  LODWORD(v76) = 0;
  LODWORD(v77) = v30;
  int v79 = 0;
  ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a2)[4])(a2, 45, &v83, 1, &v74, 2, 0);
  uint64_t v12 = *(unsigned int *)(*(void *)(v31 + 32) + 4);
  if (v17)
  {
LABEL_30:
    uint64_t v74 = 257;
    LODWORD(v75) = 0;
    uint64_t v32 = *(void *)(*(void *)a3 + 48);
    uint64_t v34 = *(void *)(v32 + 24);
    uint64_t v33 = (unint64_t *)(v32 + 24);
    int v71 = v30;
    if ((v34 & 0xFFFFFFFFFFFFFFF9) != 0)
    {
      unint64_t v36 = sub_1CB8F1DC4(v33) + 7;
      if (v35 == 1) {
      unint64_t v37 = (v36 >> 3);
      }
    }
    else
    {
      unint64_t v37 = 0xFFFFFFFFLL;
    }
    uint64_t v38 = (llvm::ConstantInt *)llvm::IntegerType::get(***a2[1], (llvm::LLVMContext *)0x20);
    uint64_t v39 = llvm::ConstantInt::get(v38, v37, (const llvm::APInt *)1);
    ((void (*)(llvm::IntegerType *****, uint64_t *, void *))(*a2)[2])(a2, &v74, v39);
    uint64_t v70 = v40;
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a1, "", 0);
    unint64_t v42 = IncompleteVirtualRegister & 0x7FFFFFFF;
    *(void *)(*(void *)(a1 + 24) + 16 * v42) = 4;
    unint64_t v43 = *(unsigned int *)(a1 + 432);
    if (v42 >= v43)
    {
      uint64_t v44 = *(void *)(a1 + 440);
      uint64_t v45 = v42 + 1 - v43;
      if (v42 >= *(unsigned int *)(a1 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v46 = *(_DWORD *)(a1 + 432);
      if (v45)
      {
        char v47 = (void *)(*(void *)(a1 + 424) + 8 * *(unsigned int *)(a1 + 432));
        uint64_t v48 = ~v42 + v43;
        do
          *v47++ = v44;
        while (!__CFADD__(v48++, 1));
        int v46 = *(_DWORD *)(a1 + 432);
      }
      *(_DWORD *)(a1 + 432) = v46 + v45;
    }
    *(void *)(*(void *)(a1 + 424) + 8 * v42) = 257;
    uint64_t v50 = *(void *)(a1 + 8);
    if (v50) {
      (*(void (**)(uint64_t))(*(void *)v50 + 24))(v50);
    }
    LODWORD(v83) = IncompleteVirtualRegister;
    unint64_t v51 = sub_1CC7390C0(a2, 2681, (int *)&v83, 1, 0);
    uint64_t v53 = v52;
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    LODWORD(v74) = 0;
    HIDWORD(v74) = v12;
    uint64_t v77 = 0;
    llvm::MachineInstr::addOperand(v52, v51, (const llvm::MachineOperand *)&v74);
    int v54 = *(_DWORD *)(*(void *)(v70 + 32) + 4);
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    LODWORD(v74) = 0;
    HIDWORD(v74) = v54;
    uint64_t v77 = 0;
    llvm::MachineInstr::addOperand(v53, v51, (const llvm::MachineOperand *)&v74);
    int v55 = a3[7];
    uint64_t v72 = 257;
    int v73 = 0;
    if (v55) {
      unint64_t v56 = 32;
    }
    else {
      unint64_t v56 = 16;
    }
    uint64_t v57 = (llvm::ConstantInt *)llvm::IntegerType::get(***a2[1], (llvm::LLVMContext *)0x20);
    uint64_t v58 = llvm::ConstantInt::get(v57, v56, (const llvm::APInt *)1);
    uint64_t v59 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*a2)[2])(a2, &v72, v58);
    uint64_t v83 = 257;
    int v84 = 0;
    LODWORD(v74) = v71;
    LODWORD(v76) = 0;
    uint64_t v77 = v59;
    uint64_t v78 = v60;
    int v79 = 1;
    uint64_t v61 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a2)[4])(a2, 46, &v83, 1, &v74, 2, 0);
    uint64_t v63 = v62;
    uint64_t v83 = 257;
    int v84 = 0;
    LODWORD(v74) = 37;
    LODWORD(v76) = 2;
    uint64_t v77 = (uint64_t)v51;
    uint64_t v78 = v53;
    int v79 = 1;
    uint64_t v80 = v61;
    uint64_t v81 = v62;
    int v82 = 1;
    uint64_t v64 = (const char *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a2)[4])(a2, 134, &v83, 1, &v74, 3, 0);
    uint64_t v83 = 257;
    int v84 = 0;
    uint64_t v74 = (uint64_t)v64;
    uint64_t v75 = v65;
    LODWORD(v76) = 1;
    LODWORD(v77) = v12;
    int v79 = 0;
    uint64_t v80 = v61;
    uint64_t v81 = v63;
    int v82 = 1;
    ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a2)[4])(a2, 136, &v83, 1, &v74, 3, 0);
    return *(unsigned int *)(*(void *)(v11 + 32) + 4);
  }
  return v12;
}

uint64_t sub_1CBA6054C(_DWORD **a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  if ((v3 & 0x80000000) != 0) {
    unsigned int v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v3);
  }
  uint64_t v5 = *v4;
  if (!v5) {
    return 0;
  }
  if ((*(unsigned char *)(v5 + 3) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5 || (*(unsigned char *)(v5 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6 || **(_WORD **)(v6 + 16) != 81 || *(_DWORD *)(v6 + 40) != 2) {
    return 0;
  }
  uint64_t v7 = *(unsigned int *)(*(void *)(v6 + 32) + 36);
  uint64_t v8 = (uint64_t *)((v7 & 0x80000000) != 0
                 ? *(void *)(a2 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8
                 : *(void *)(a2 + 272) + 8 * v7);
  uint64_t v9 = *v8;
  if (!v9) {
    return 0;
  }
  if ((*(unsigned char *)(v9 + 3) & 1) == 0)
  {
    uint64_t v9 = *(void *)(v9 + 24);
    if (!v9 || (*(unsigned char *)(v9 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10 || **(_WORD **)(v10 + 16) != 126 || *(_DWORD *)(v10 + 40) != 2) {
    return 0;
  }
  **a1 = *(_DWORD *)(*(void *)(v10 + 32) + 36);
  return 1;
}

uint64_t sub_1CBA60644(_DWORD **a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  if ((v3 & 0x80000000) != 0) {
    unsigned int v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v3);
  }
  uint64_t v5 = *v4;
  if (!v5) {
    return 0;
  }
  if ((*(unsigned char *)(v5 + 3) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5 || (*(unsigned char *)(v5 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6 || **(_WORD **)(v6 + 16) != 119 || *(_DWORD *)(v6 + 40) != 2) {
    return 0;
  }
  uint64_t v7 = *(unsigned int *)(*(void *)(v6 + 32) + 36);
  uint64_t v8 = (uint64_t *)((v7 & 0x80000000) != 0
                 ? *(void *)(a2 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8
                 : *(void *)(a2 + 272) + 8 * v7);
  uint64_t v9 = *v8;
  if (!v9) {
    return 0;
  }
  if ((*(unsigned char *)(v9 + 3) & 1) == 0)
  {
    uint64_t v9 = *(void *)(v9 + 24);
    if (!v9 || (*(unsigned char *)(v9 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10 || **(_WORD **)(v10 + 16) != 80 || *(_DWORD *)(v10 + 40) != 2) {
    return 0;
  }
  **a1 = *(_DWORD *)(*(void *)(v10 + 32) + 36);
  return 1;
}

uint64_t sub_1CBA6073C(int a1, uint64_t a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 272);
  while (1)
  {
    uint64_t v7 = (uint64_t *)(v6 + 8 * a1);
    if (a1 < 0) {
      uint64_t v7 = (uint64_t *)(v5 + 16 * (a1 & 0x7FFFFFFF) + 8);
    }
    uint64_t v8 = *v7;
    if (!v8) {
      return 0;
    }
    if ((*(unsigned char *)(v8 + 3) & 1) == 0)
    {
      uint64_t v8 = *(void *)(v8 + 24);
      if (!v8 || (*(unsigned char *)(v8 + 3) & 1) == 0) {
        return 0;
      }
    }
    uint64_t result = 0;
    if (v3 > 3) {
      return result;
    }
    uint64_t v10 = *(void *)(v8 + 8);
    if (!v10) {
      return result;
    }
    uint64_t v11 = *(unsigned int **)(v10 + 32);
    uint64_t v12 = v11[1];
    if ((int)v12 < 0) {
      uint64_t v13 = (uint64_t *)(v5 + 16 * (v12 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v13 = (uint64_t *)(v6 + 8 * v12);
    }
    uint64_t v14 = *v13;
    if ((*(unsigned char *)(v14 + 3) & 1) == 0) {
      uint64_t v14 = *(void *)(v14 + 24);
    }
    uint64_t v15 = *(void *)(v14 + 8);
    if (**(_WORD **)(v15 + 16) == 121)
    {
      uint64_t v31 = *(void *)(*(void *)(v15 + 32) + 48);
      if (v31)
      {
        if (*(_UNKNOWN **)(v31 + 32) == &unk_1CFB2E344) {
          uint64_t v37 = *(void *)(v31 + 40);
        }
        else {
          uint64_t v37 = v31 + 24;
        }
        return (*(unsigned char *)(v37 + 28) & 8) == 0;
      }
    }
    uint64_t result = 0;
    unsigned int v16 = **(unsigned __int16 **)(v10 + 16);
    if (v16 > 0xB1)
    {
      if (v16 - 178 < 2)
      {
        int v19 = (int *)(v11 + 9);
        LODWORD(v3) = v3 + 1;
        goto LABEL_51;
      }
      if (v16 - 187 < 2)
      {
LABEL_25:
        uint64_t v3 = (v3 + 1);
        uint64_t result = sub_1CBA6073C(v11[9], a2, v3);
        if (!result) {
          return result;
        }
        int v19 = (int *)(v11 + 17);
        goto LABEL_51;
      }
      if (v16 != 336) {
        return result;
      }
LABEL_47:
      uint64_t v3 = (v3 + 1);
      uint64_t result = sub_1CBA6073C(v11[33], a2, v3);
      if (!result) {
        return result;
      }
      int v19 = (int *)(v11 + 41);
      goto LABEL_51;
    }
    if (**(unsigned __int16 **)(v10 + 16) <= 0xA2u) {
      break;
    }
    switch(v16)
    {
      case 0xA3u:
        goto LABEL_25;
      case 0xA5u:
        unsigned int v29 = v11[17];
        int v19 = (int *)(v11 + 17);
        uint64_t v30 = *(v19 - 8);
        if (v30 == v29) {
          return 1;
        }
        uint64_t v3 = (v3 + 1);
        if ((sub_1CBA6073C(v30, a2, v3) & 1) == 0) {
          return 0;
        }
        break;
      case 0xA6u:
        uint64_t v17 = v11[9];
        uint64_t v18 = v11[17];
        if (v17 == v18) {
          return 1;
        }
        uint64_t v3 = (v3 + 1);
        uint64_t result = sub_1CBA6073C(v17, a2, v3);
        if (!result) {
          return result;
        }
        uint64_t result = sub_1CBA6073C(v18, a2, v3);
        if (!result) {
          return result;
        }
        int v19 = (int *)(v11 + 25);
        break;
      default:
        return result;
    }
LABEL_51:
    a1 = *v19;
  }
  if (v16 == 51) {
    goto LABEL_47;
  }
  if (v16 == 136)
  {
    uint64_t v20 = v11[9];
    if ((int)v20 < 0) {
      int v21 = (uint64_t *)(v5 + 16 * (v20 & 0x7FFFFFFF) + 8);
    }
    else {
      int v21 = (uint64_t *)(v6 + 8 * v20);
    }
    uint64_t v22 = *v21;
    if ((*(unsigned char *)(v22 + 3) & 1) == 0) {
      uint64_t v22 = *(void *)(v22 + 24);
    }
    uint64_t v23 = *(void *)(v22 + 8);
    int v24 = **(unsigned __int16 **)(v23 + 16);
    if (v24 == 179 || v24 == 119)
    {
      uint64_t v25 = *(unsigned int *)(*(void *)(v23 + 32) + 36);
      if ((int)v25 < 0) {
        unint64_t v26 = (uint64_t *)(v5 + 16 * (v25 & 0x7FFFFFFF) + 8);
      }
      else {
        unint64_t v26 = (uint64_t *)(v6 + 8 * v25);
      }
      uint64_t v27 = *v26;
      if ((*(unsigned char *)(v27 + 3) & 1) == 0) {
        uint64_t v27 = *(void *)(v27 + 24);
      }
      uint64_t v23 = *(void *)(v27 + 8);
      LOWORD(v24) = **(_WORD **)(v23 + 16);
    }
    if ((v24 & 0xFFFE) != 0x86) {
      return 0;
    }
    uint64_t v28 = *(void *)(v23 + 32);
    uint64_t v3 = (v3 + 1);
    uint64_t result = sub_1CBA6073C(*(unsigned int *)(v28 + 68), a2, v3);
    if (!result) {
      return result;
    }
    int v19 = (int *)(v28 + 100);
    goto LABEL_51;
  }
  if (v16 != 116) {
    return result;
  }
  uint64_t v32 = *(unsigned int *)(v10 + 40);
  if (v32)
  {
    uint64_t v33 = 0;
    uint64_t v34 = v11;
    while (1)
    {
      int v35 = *(unsigned __int8 *)v34;
      v34 += 8;
      if (v35 == 17) {
        break;
      }
      if (v32 == ++v33) {
        goto LABEL_64;
      }
    }
  }
  else
  {
LABEL_64:
    LODWORD(v33) = -1;
  }
  return v11[8 * v33 + 4] == 2131;
}

BOOL sub_1CBA60A7C(unsigned int a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  v51[16] = *MEMORY[0x1E4F143B8];
  uint64_t v44 = a4;
  if ((a1 & 0x80000000) != 0 && (a1 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a2 + 432)) {
    uint64_t v9 = *(void **)(*(void *)(a2 + 424) + 8 * (a1 & 0x7FFFFFFF));
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v49 = v9;
  unsigned int v11 = sub_1CB8F1DC4((unint64_t *)&v49);
  if (v10 == 1) {
  unint64_t v12 = v11;
  }
  unint64_t v14 = sub_1CB8F1DC4((unint64_t *)&v44);
  if (v13 == 1) {
  unint64_t v15 = v12 % v14;
  }
  if (!(v12 % v14))
  {
    unint64_t v18 = sub_1CB8F1DC4((unint64_t *)&v44);
    if (v17 == 1)
    {
      if ((a1 & 0x80000000) != 0) {
        goto LABEL_13;
      }
    }
    else if ((a1 & 0x80000000) != 0)
    {
LABEL_13:
      int v19 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
      goto LABEL_14;
    }
    int v19 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
LABEL_14:
    uint64_t v20 = *v19;
    unint64_t v21 = v12 / v18;
    if ((*(unsigned char *)(v20 + 3) & 1) == 0) {
      uint64_t v20 = *(void *)(v20 + 24);
    }
    uint64_t v22 = *(void *)(v20 + 8);
    int v23 = **(unsigned __int16 **)(v22 + 16);
    if (v23 == 76)
    {
      if (*(_DWORD *)(v22 + 40) == v21 + 1)
      {
        if (v21)
        {
          uint64_t v27 = 0;
          unsigned int v28 = *(_DWORD *)(a5 + 8);
          uint64_t v29 = 32 * v21;
          do
          {
            if (v28 >= *(_DWORD *)(a5 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*(void *)a5 + 4 * v28) = *(_DWORD *)(*(void *)(v22 + 32) + v27 + 36);
            unsigned int v28 = *(_DWORD *)(a5 + 8) + 1;
            *(_DWORD *)(a5 + 8) = v28;
            v27 += 32;
          }
          while (v29 != v27);
        }
        return v15 == 0;
      }
    }
    else if (v23 == 68)
    {
      uint64_t v49 = v44;
      LODWORD(v50) = 0;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void, void, void))(*(void *)a3 + 32))(a3, 68, &v49, 1, 0, 0, 0);
      if (v21)
      {
        int v25 = *(_DWORD *)(*(void *)(v24 + 32) + 4);
        unsigned int v26 = *(_DWORD *)(a5 + 8);
        do
        {
          if (v26 >= *(_DWORD *)(a5 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a5 + 4 * v26) = v25;
          unsigned int v26 = *(_DWORD *)(a5 + 8) + 1;
          *(_DWORD *)(a5 + 8) = v26;
          LODWORD(v21) = v21 - 1;
        }
        while (v21);
      }
      return v15 == 0;
    }
    uint64_t v45 = v48;
    int v47 = 4;
    uint64_t v30 = v44;
    if (v21 >= 5)
    {
      int v46 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v18 <= v12)
    {
      uint64_t v31 = v48;
      unint64_t v32 = v12 / v18;
      do
      {
        *v31++ = v30;
        --v32;
      }
      while (v32);
    }
    int v46 = v12 / v18;
    uint64_t v33 = (char *)v45;
    uint64_t v49 = v51;
    uint64_t v50 = 0x800000000;
    int v34 = 0;
    int v35 = v51;
    if (v18 <= v12)
    {
      unint64_t v36 = (char *)v45 + 8 * v21;
      uint64_t v37 = v51;
      do
      {
        uint64_t v38 = *(void *)v33;
        v33 += 8;
        *uint64_t v37 = v38;
        *((_DWORD *)v37 + 2) = 0;
        v37 += 2;
      }
      while (v33 != v36);
      int v34 = v50;
      int v35 = v49;
    }
    LODWORD(v50) = v34 + v21;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a3 + 32))(a3, 74, v35);
    uint64_t v40 = v39;
    if (v49 == v51)
    {
      if (v21) {
        goto LABEL_41;
      }
    }
    else
    {
      free(v49);
      if (v21)
      {
LABEL_41:
        uint64_t v41 = 0;
        unsigned int v42 = *(_DWORD *)(a5 + 8);
        uint64_t v43 = 32 * v21;
        do
        {
          if (v42 >= *(_DWORD *)(a5 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a5 + 4 * v42) = *(_DWORD *)(*(void *)(v40 + 32) + v41 + 4);
          unsigned int v42 = *(_DWORD *)(a5 + 8) + 1;
          *(_DWORD *)(a5 + 8) = v42;
          v41 += 32;
        }
        while (v43 != v41);
      }
    }
    if (v45 != v48) {
      free(v45);
    }
  }
  return v15 == 0;
}

void *sub_1CBA60F10(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  unint64_t v4 = *(void *)a1;
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v6 = v4 + 32 * v3;
    if (v4 > a2 || v6 <= a2) {
      sub_1CD412448();
    }
    sub_1CD412448();
  }
  uint64_t result = (void *)(v4 + 32 * *(unsigned int *)(a1 + 8));
  *uint64_t result = result + 2;
  result[1] = 0x400000000;
  if (*(_DWORD *)(a2 + 8)) {
    uint64_t result = (void *)sub_1CB927A18((uint64_t)result, a2);
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

BOOL sub_1CBA60FCC(void *a1, uint64_t a2, int a3)
{
  unint64_t v6 = (unsigned __int16 *)a1[2];
  int v7 = *v6;
  if (v7 == 91)
  {
    unint64_t v8 = a1[6];
    if (v8 < 8) {
      return 0;
    }
    if ((v8 & 7) != 0)
    {
      uint64_t v9 = (_DWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
      BOOL v10 = (a1[6] & 7) != 3 || v9 == 0;
      if (v10 || *v9 != 1) {
        return 0;
      }
    }
    else
    {
      v8 &= 0xFFFFFFFFFFFFFFF8;
      a1[6] = v8;
    }
    if ((v8 & 7) != 0)
    {
      unint64_t v11 = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      unint64_t v11 = v8 & 0xFFFFFFFFFFFFFFF8;
      a1[6] = v8 & 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v13 = *(void *)(v11 + 24);
    unint64_t v12 = (unint64_t *)(v11 + 24);
    if ((v13 & 0xFFFFFFFFFFFFFFF9) != 0)
    {
      unint64_t v15 = (sub_1CB8F1DC4(v12) + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v14 == 1)
      {
        unint64_t v21 = v15;
        unint64_t v15 = v21;
      }
      if (v15 == a3) {
        return 1;
      }
      unint64_t v6 = (unsigned __int16 *)a1[2];
    }
    int v7 = *v6;
  }
  if (v7 != 124) {
    return 0;
  }
  int v17 = *(_DWORD *)(a1[4] + 36);
  if ((v17 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v18 = v17 & 0x7FFFFFFF;
  if (v18 >= *(_DWORD *)(a2 + 432)) {
    return 0;
  }
  unint64_t v22 = *(void *)(*(void *)(a2 + 424) + 8 * v18);
  if ((v22 & 1) == 0) {
    return 0;
  }
  uint64_t v20 = sub_1CB8F1DC4(&v22);
  if (v19 == 1) {
  return v20 == a3;
  }
}

BOOL sub_1CBA61124(void *a1, uint64_t a2, int a3)
{
  unint64_t v6 = (unsigned __int16 *)a1[2];
  int v7 = *v6;
  if (v7 == 92)
  {
    unint64_t v8 = a1[6];
    if (v8 < 8) {
      return 0;
    }
    if ((v8 & 7) != 0)
    {
      uint64_t v9 = (_DWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
      BOOL v10 = (a1[6] & 7) != 3 || v9 == 0;
      if (v10 || *v9 != 1) {
        return 0;
      }
    }
    else
    {
      v8 &= 0xFFFFFFFFFFFFFFF8;
      a1[6] = v8;
    }
    if ((v8 & 7) != 0)
    {
      unint64_t v11 = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      unint64_t v11 = v8 & 0xFFFFFFFFFFFFFFF8;
      a1[6] = v8 & 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v13 = *(void *)(v11 + 24);
    unint64_t v12 = (unint64_t *)(v11 + 24);
    if ((v13 & 0xFFFFFFFFFFFFFFF9) != 0)
    {
      unint64_t v15 = (sub_1CB8F1DC4(v12) + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v14 == 1)
      {
        unint64_t v22 = v15;
        unint64_t v15 = v22;
      }
      if (v15 == a3) {
        return 1;
      }
      unint64_t v6 = (unsigned __int16 *)a1[2];
    }
    int v7 = *v6;
  }
  if (v7 != 126) {
    return 0;
  }
  uint64_t v17 = a1[4];
  if (*(unsigned char *)(v17 + 32)) {
    return 0;
  }
  int v18 = *(_DWORD *)(v17 + 36);
  if ((v18 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v19 = v18 & 0x7FFFFFFF;
  if (v19 >= *(_DWORD *)(a2 + 432)) {
    return 0;
  }
  unint64_t v23 = *(void *)(*(void *)(a2 + 424) + 8 * v19);
  if ((v23 & 1) == 0) {
    return 0;
  }
  uint64_t v21 = sub_1CB8F1DC4(&v23);
  if (v20 == 1) {
  return v21 == a3;
  }
}

void sub_1CBA61284(unint64_t a1, int a2, unsigned int a3, int a4, int a5)
{
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v161 = 0;
  long long v159 = 0u;
  long long v160 = 0u;
  uint64_t v157 = *(llvm::MachineFunction **)(v10 + 32);
  uint64_t v158 = (*(uint64_t (**)(void *))(**((void **)v157 + 2) + 104))(*((void **)v157 + 2));
  uint64_t v165 = 0;
  *(void *)&long long v159 = 0;
  long long v160 = a1;
  *((void *)&v159 + 1) = *(void *)(a1 + 24);
  unint64_t v11 = (long long *)(a1 + 56);
  if (v11 != &v159)
  {
    unint64_t v12 = *(unsigned __int8 **)v11;
    *(void *)&long long v159 = v12;
    if (v12) {
      llvm::MetadataTracking::track((uint64_t)&v159, v12, 2);
    }
  }
  if (a2 != 3)
  {
    if (a3 < 2) {
      goto LABEL_83;
    }
    unsigned int v50 = a5 - 7;
    if (a4)
    {
LABEL_61:
      if (v50 >= 3) {
        uint64_t v60 = 8260;
      }
      else {
        uint64_t v60 = 8261;
      }
      uint64_t v61 = *(void *)(v158 + 8) + 48 * v60;
      uint64_t v165 = (unsigned __int8 *)v159;
      if ((void)v159) {
        llvm::MetadataTracking::track((uint64_t)&v165, (unsigned __int8 *)v159, 2);
      }
      uint64_t v62 = llvm::MachineFunction::CreateMachineInstr(v157, v61, &v165, 0);
      if (!v165)
      {
LABEL_67:
        uint64_t v63 = (unint64_t *)v160;
        uint64_t v64 = *(void *)(*((void *)&v159 + 1) + 40);
        *((void *)v62 + 3) = v64;
        uint64_t v65 = *(void *)(v64 + 32);
        uint64_t v66 = *((unsigned int *)v62 + 10);
        if (v66)
        {
          uint64_t v93 = *((void *)v62 + 4);
          uint64_t v94 = *(void *)(v65 + 40);
          uint64_t v95 = 32 * v66;
          do
          {
            if (!*(unsigned char *)v93)
            {
              uint64_t v96 = *(unsigned int *)(v93 + 4);
              if ((int)v96 >= 0) {
                uint64_t v97 = (uint64_t *)(*(void *)(v94 + 272) + 8 * v96);
              }
              else {
                uint64_t v97 = (uint64_t *)(*(void *)(v94 + 24) + 16 * (v96 & 0x7FFFFFFF) + 8);
              }
              uint64_t v98 = *v97;
              if (*v97)
              {
                uint64_t v99 = *(void *)(v98 + 16);
                *(void *)(v98 + 16) = v93;
                *(void *)(v93 + 16) = v99;
                if (*(unsigned char *)(v93 + 3))
                {
                  *(void *)(v93 + 24) = v98;
                }
                else
                {
                  *(void *)(v93 + 24) = 0;
                  uint64_t v97 = (uint64_t *)(v99 + 24);
                }
              }
              else
              {
                *(void *)(v93 + 16) = v93;
                *(void *)(v93 + 24) = 0;
              }
              *uint64_t v97 = v93;
            }
            v93 += 32;
            v95 -= 32;
          }
          while (v95);
        }
        uint64_t v67 = *(void *)(v65 + 728);
        if (v67) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v67 + 24))(v67, v62);
        }
        unint64_t v68 = *v63 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v62 = v68 | *(void *)v62 & 7;
        *((void *)v62 + 1) = v63;
        *(void *)(v68 + 8) = v62;
        unint64_t *v63 = *v63 & 7 | (unint64_t)v62;
        if (*((void *)&v160 + 1)) {
          (*(void (**)(void, llvm::MachineInstr *))(**((void **)&v160 + 1) + 24))(*((void *)&v160 + 1), v62);
        }
        LODWORD(v162) = 1;
        uint64_t v163 = 0;
        uint64_t v164 = 2;
        llvm::MachineInstr::addOperand(v62, v157, (const llvm::MachineOperand *)&v162);
        LODWORD(v162) = 1;
        uint64_t v163 = 0;
        uint64_t v164 = 1;
        llvm::MachineInstr::addOperand(v62, v157, (const llvm::MachineOperand *)&v162);
        if (a3 != 3) {
          goto LABEL_83;
        }
        uint64_t v41 = v157;
        uint64_t v69 = *(void *)(v158 + 8) + 48 * v60;
        uint64_t v165 = (unsigned __int8 *)v159;
        if ((void)v159) {
          llvm::MetadataTracking::track((uint64_t)&v165, (unsigned __int8 *)v159, 2);
        }
        uint64_t v43 = llvm::MachineFunction::CreateMachineInstr(v157, v69, &v165, 0);
        if (v165)
        {
          int v144 = *v165;
          if ((v144 - 4) > 0x1E)
          {
            if ((v144 - 3) >= 0xFFFFFFFE) {
              uint64_t v155 = v165;
            }
            else {
              uint64_t v155 = 0;
            }
            if ((v144 - 3) < 0xFFFFFFFE)
            {
              if (v144 == 3) {
                *((void *)v165 + 1) = 0;
              }
              goto LABEL_76;
            }
            unint64_t v146 = (unint64_t)(v155 + 8);
          }
          else
          {
            if ((v165[1] & 0x7F) != 2 && !*((_DWORD *)v165 + 3)) {
              goto LABEL_76;
            }
            uint64_t v145 = *((void *)v165 + 2);
            if ((v145 & 4) == 0) {
              goto LABEL_76;
            }
            unint64_t v146 = v145 & 0xFFFFFFFFFFFFFFF8;
            if (!v146) {
              goto LABEL_76;
            }
          }
          int v162 = &v165;
          sub_1CC5FA668(v146 + 16, &v162);
        }
LABEL_76:
        uint64_t v70 = (unint64_t *)v160;
        uint64_t v71 = *(void *)(*((void *)&v159 + 1) + 40);
        *((void *)v43 + 3) = v71;
        uint64_t v72 = *(void *)(v71 + 32);
        uint64_t v73 = *((unsigned int *)v43 + 10);
        if (v73)
        {
          uint64_t v114 = *((void *)v43 + 4);
          uint64_t v115 = *(void *)(v72 + 40);
          uint64_t v116 = 32 * v73;
          do
          {
            if (!*(unsigned char *)v114)
            {
              uint64_t v117 = *(unsigned int *)(v114 + 4);
              if ((int)v117 >= 0) {
                unsigned int v118 = (uint64_t *)(*(void *)(v115 + 272) + 8 * v117);
              }
              else {
                unsigned int v118 = (uint64_t *)(*(void *)(v115 + 24) + 16 * (v117 & 0x7FFFFFFF) + 8);
              }
              uint64_t v119 = *v118;
              if (*v118)
              {
                uint64_t v120 = *(void *)(v119 + 16);
                *(void *)(v119 + 16) = v114;
                *(void *)(v114 + 16) = v120;
                if (*(unsigned char *)(v114 + 3))
                {
                  *(void *)(v114 + 24) = v119;
                }
                else
                {
                  *(void *)(v114 + 24) = 0;
                  unsigned int v118 = (uint64_t *)(v120 + 24);
                }
              }
              else
              {
                *(void *)(v114 + 16) = v114;
                *(void *)(v114 + 24) = 0;
              }
              *unsigned int v118 = v114;
            }
            v114 += 32;
            v116 -= 32;
          }
          while (v116);
        }
        uint64_t v74 = *(void *)(v72 + 728);
        if (v74) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v74 + 24))(v74, v43);
        }
        unint64_t v75 = *v70 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v43 = v75 | *(void *)v43 & 7;
        *((void *)v43 + 1) = v70;
        *(void *)(v75 + 8) = v43;
        unint64_t *v70 = *v70 & 7 | (unint64_t)v43;
        if (*((void *)&v160 + 1)) {
          (*(void (**)(void, llvm::MachineInstr *))(**((void **)&v160 + 1) + 24))(*((void *)&v160 + 1), v43);
        }
        LODWORD(v162) = 1;
        uint64_t v163 = 0;
        uint64_t v164 = 3;
        llvm::MachineInstr::addOperand(v43, v157, (const llvm::MachineOperand *)&v162);
        LODWORD(v162) = 1;
        uint64_t v163 = 0;
        uint64_t v164 = 1;
        goto LABEL_82;
      }
      int v135 = *v165;
      if ((v135 - 4) > 0x1E)
      {
        if ((v135 - 3) >= 0xFFFFFFFE) {
          uint64_t v152 = v165;
        }
        else {
          uint64_t v152 = 0;
        }
        if ((v135 - 3) < 0xFFFFFFFE)
        {
          if (v135 == 3) {
            *((void *)v165 + 1) = 0;
          }
          goto LABEL_67;
        }
        unint64_t v137 = (unint64_t)(v152 + 8);
      }
      else
      {
        if ((v165[1] & 0x7F) != 2 && !*((_DWORD *)v165 + 3)) {
          goto LABEL_67;
        }
        uint64_t v136 = *((void *)v165 + 2);
        if ((v136 & 4) == 0) {
          goto LABEL_67;
        }
        unint64_t v137 = v136 & 0xFFFFFFFFFFFFFFF8;
        if (!v137) {
          goto LABEL_67;
        }
      }
      int v162 = &v165;
      sub_1CC5FA668(v137 + 16, &v162);
      goto LABEL_67;
    }
    uint64_t v51 = 24432;
    if (v50 < 3) {
      uint64_t v51 = 24480;
    }
    uint64_t v52 = *(void *)(v158 + 8) + v51;
    uint64_t v165 = (unsigned __int8 *)v159;
    if ((void)v159) {
      llvm::MetadataTracking::track((uint64_t)&v165, (unsigned __int8 *)v159, 2);
    }
    uint64_t v53 = llvm::MachineFunction::CreateMachineInstr(v157, v52, &v165, 0);
    if (v165)
    {
      int v148 = *v165;
      if ((v148 - 4) > 0x1E)
      {
        if ((v148 - 3) >= 0xFFFFFFFE) {
          uint64_t v156 = v165;
        }
        else {
          uint64_t v156 = 0;
        }
        if ((v148 - 3) < 0xFFFFFFFE)
        {
          if (v148 == 3) {
            *((void *)v165 + 1) = 0;
          }
          goto LABEL_56;
        }
        unint64_t v150 = (unint64_t)(v156 + 8);
      }
      else
      {
        if ((v165[1] & 0x7F) != 2 && !*((_DWORD *)v165 + 3)) {
          goto LABEL_56;
        }
        uint64_t v149 = *((void *)v165 + 2);
        if ((v149 & 4) == 0) {
          goto LABEL_56;
        }
        unint64_t v150 = v149 & 0xFFFFFFFFFFFFFFF8;
        if (!v150) {
          goto LABEL_56;
        }
      }
      int v162 = &v165;
      sub_1CC5FA668(v150 + 16, &v162);
    }
LABEL_56:
    int v54 = (unint64_t *)v160;
    uint64_t v55 = *(void *)(*((void *)&v159 + 1) + 40);
    *((void *)v53 + 3) = v55;
    uint64_t v56 = *(void *)(v55 + 32);
    uint64_t v57 = *((unsigned int *)v53 + 10);
    if (v57)
    {
      uint64_t v121 = *((void *)v53 + 4);
      uint64_t v122 = *(void *)(v56 + 40);
      uint64_t v123 = 32 * v57;
      do
      {
        if (!*(unsigned char *)v121)
        {
          uint64_t v124 = *(unsigned int *)(v121 + 4);
          if ((int)v124 >= 0) {
            unsigned int v125 = (uint64_t *)(*(void *)(v122 + 272) + 8 * v124);
          }
          else {
            unsigned int v125 = (uint64_t *)(*(void *)(v122 + 24) + 16 * (v124 & 0x7FFFFFFF) + 8);
          }
          uint64_t v126 = *v125;
          if (*v125)
          {
            uint64_t v127 = *(void *)(v126 + 16);
            *(void *)(v126 + 16) = v121;
            *(void *)(v121 + 16) = v127;
            if (*(unsigned char *)(v121 + 3))
            {
              *(void *)(v121 + 24) = v126;
            }
            else
            {
              *(void *)(v121 + 24) = 0;
              unsigned int v125 = (uint64_t *)(v127 + 24);
            }
          }
          else
          {
            *(void *)(v121 + 16) = v121;
            *(void *)(v121 + 24) = 0;
          }
          uint64_t *v125 = v121;
        }
        v121 += 32;
        v123 -= 32;
      }
      while (v123);
    }
    uint64_t v58 = *(void *)(v56 + 728);
    if (v58) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v58 + 24))(v58, v53);
    }
    unint64_t v59 = *v54 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v53 = v59 | *(void *)v53 & 7;
    *((void *)v53 + 1) = v54;
    *(void *)(v59 + 8) = v53;
    *int v54 = *v54 & 7 | (unint64_t)v53;
    if (*((void *)&v160 + 1)) {
      (*(void (**)(void, llvm::MachineInstr *))(**((void **)&v160 + 1) + 24))(*((void *)&v160 + 1), v53);
    }
    goto LABEL_61;
  }
  unsigned int v13 = a5 - 7;
  if (a3 >= 2 && a4) {
    goto LABEL_28;
  }
  uint64_t v14 = 396480;
  if (v13 < 3) {
    uint64_t v14 = 396528;
  }
  uint64_t v15 = *(void *)(v158 + 8) + v14;
  uint64_t v165 = (unsigned __int8 *)v159;
  if ((void)v159) {
    llvm::MetadataTracking::track((uint64_t)&v165, (unsigned __int8 *)v159, 2);
  }
  unsigned int v16 = llvm::MachineFunction::CreateMachineInstr(v157, v15, &v165, 0);
  if (v165)
  {
    int v132 = *v165;
    if ((v132 - 4) > 0x1E)
    {
      if ((v132 - 3) >= 0xFFFFFFFE) {
        uint64_t v151 = v165;
      }
      else {
        uint64_t v151 = 0;
      }
      if ((v132 - 3) < 0xFFFFFFFE)
      {
        if (v132 == 3) {
          *((void *)v165 + 1) = 0;
        }
        goto LABEL_12;
      }
      unint64_t v134 = (unint64_t)(v151 + 8);
    }
    else
    {
      if ((v165[1] & 0x7F) != 2 && !*((_DWORD *)v165 + 3)) {
        goto LABEL_12;
      }
      uint64_t v133 = *((void *)v165 + 2);
      if ((v133 & 4) == 0) {
        goto LABEL_12;
      }
      unint64_t v134 = v133 & 0xFFFFFFFFFFFFFFF8;
      if (!v134) {
        goto LABEL_12;
      }
    }
    int v162 = &v165;
    sub_1CC5FA668(v134 + 16, &v162);
  }
LABEL_12:
  uint64_t v17 = (unint64_t *)v160;
  uint64_t v18 = *(void *)(*((void *)&v159 + 1) + 40);
  *((void *)v16 + 3) = v18;
  uint64_t v19 = *(void *)(v18 + 32);
  uint64_t v20 = *((unsigned int *)v16 + 10);
  if (v20)
  {
    uint64_t v86 = *((void *)v16 + 4);
    uint64_t v87 = *(void *)(v19 + 40);
    uint64_t v88 = 32 * v20;
    do
    {
      if (!*(unsigned char *)v86)
      {
        uint64_t v89 = *(unsigned int *)(v86 + 4);
        if ((int)v89 >= 0) {
          unint64_t v90 = (uint64_t *)(*(void *)(v87 + 272) + 8 * v89);
        }
        else {
          unint64_t v90 = (uint64_t *)(*(void *)(v87 + 24) + 16 * (v89 & 0x7FFFFFFF) + 8);
        }
        uint64_t v91 = *v90;
        if (*v90)
        {
          uint64_t v92 = *(void *)(v91 + 16);
          *(void *)(v91 + 16) = v86;
          *(void *)(v86 + 16) = v92;
          if (*(unsigned char *)(v86 + 3))
          {
            *(void *)(v86 + 24) = v91;
          }
          else
          {
            *(void *)(v86 + 24) = 0;
            unint64_t v90 = (uint64_t *)(v92 + 24);
          }
        }
        else
        {
          *(void *)(v86 + 16) = v86;
          *(void *)(v86 + 24) = 0;
        }
        *unint64_t v90 = v86;
      }
      v86 += 32;
      v88 -= 32;
    }
    while (v88);
  }
  uint64_t v21 = *(void *)(v19 + 728);
  if (v21) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v21 + 24))(v21, v16);
  }
  unint64_t v22 = *v17 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unsigned int v16 = v22 | *(void *)v16 & 7;
  *((void *)v16 + 1) = v17;
  *(void *)(v22 + 8) = v16;
  unint64_t *v17 = *v17 & 7 | (unint64_t)v16;
  if (*((void *)&v160 + 1)) {
    (*(void (**)(void, llvm::MachineInstr *))(**((void **)&v160 + 1) + 24))(*((void *)&v160 + 1), v16);
  }
  LODWORD(v162) = 1;
  uint64_t v163 = 0;
  uint64_t v164 = 1;
  llvm::MachineInstr::addOperand(v16, v157, (const llvm::MachineOperand *)&v162);
  LODWORD(v162) = 1;
  uint64_t v163 = 0;
  uint64_t v164 = 2;
  llvm::MachineInstr::addOperand(v16, v157, (const llvm::MachineOperand *)&v162);
  if (a3 < 2) {
    goto LABEL_83;
  }
  uint64_t v23 = 24240;
  if (v13 < 3) {
    uint64_t v23 = 24288;
  }
  uint64_t v24 = *(void *)(v158 + 8) + v23;
  uint64_t v165 = (unsigned __int8 *)v159;
  if ((void)v159) {
    llvm::MetadataTracking::track((uint64_t)&v165, (unsigned __int8 *)v159, 2);
  }
  int v25 = llvm::MachineFunction::CreateMachineInstr(v157, v24, &v165, 0);
  if (!v165) {
    goto LABEL_23;
  }
  int v141 = *v165;
  if ((v141 - 4) > 0x1E)
  {
    if ((v141 - 3) >= 0xFFFFFFFE) {
      uint64_t v154 = v165;
    }
    else {
      uint64_t v154 = 0;
    }
    if ((v141 - 3) < 0xFFFFFFFE)
    {
      if (v141 == 3) {
        *((void *)v165 + 1) = 0;
      }
      goto LABEL_23;
    }
    unint64_t v143 = (unint64_t)(v154 + 8);
  }
  else
  {
    if ((v165[1] & 0x7F) != 2 && !*((_DWORD *)v165 + 3)) {
      goto LABEL_23;
    }
    uint64_t v142 = *((void *)v165 + 2);
    if ((v142 & 4) == 0) {
      goto LABEL_23;
    }
    unint64_t v143 = v142 & 0xFFFFFFFFFFFFFFF8;
    if (!v143) {
      goto LABEL_23;
    }
  }
  int v162 = &v165;
  sub_1CC5FA668(v143 + 16, &v162);
LABEL_23:
  unsigned int v26 = (unint64_t *)v160;
  uint64_t v27 = *(void *)(*((void *)&v159 + 1) + 40);
  *((void *)v25 + 3) = v27;
  uint64_t v28 = *(void *)(v27 + 32);
  uint64_t v29 = *((unsigned int *)v25 + 10);
  if (v29)
  {
    uint64_t v107 = *((void *)v25 + 4);
    uint64_t v108 = *(void *)(v28 + 40);
    uint64_t v109 = 32 * v29;
    do
    {
      if (!*(unsigned char *)v107)
      {
        uint64_t v110 = *(unsigned int *)(v107 + 4);
        if ((int)v110 >= 0) {
          uint64_t v111 = (uint64_t *)(*(void *)(v108 + 272) + 8 * v110);
        }
        else {
          uint64_t v111 = (uint64_t *)(*(void *)(v108 + 24) + 16 * (v110 & 0x7FFFFFFF) + 8);
        }
        uint64_t v112 = *v111;
        if (*v111)
        {
          uint64_t v113 = *(void *)(v112 + 16);
          *(void *)(v112 + 16) = v107;
          *(void *)(v107 + 16) = v113;
          if (*(unsigned char *)(v107 + 3))
          {
            *(void *)(v107 + 24) = v112;
          }
          else
          {
            *(void *)(v107 + 24) = 0;
            uint64_t v111 = (uint64_t *)(v113 + 24);
          }
        }
        else
        {
          *(void *)(v107 + 16) = v107;
          *(void *)(v107 + 24) = 0;
        }
        *uint64_t v111 = v107;
      }
      v107 += 32;
      v109 -= 32;
    }
    while (v109);
  }
  uint64_t v30 = *(void *)(v28 + 728);
  if (v30) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v30 + 24))(v30, v25);
  }
  unint64_t v31 = *v26 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v25 = v31 | *(void *)v25 & 7;
  *((void *)v25 + 1) = v26;
  *(void *)(v31 + 8) = v25;
  *unsigned int v26 = *v26 & 7 | (unint64_t)v25;
  if (*((void *)&v160 + 1)) {
    (*(void (**)(void, llvm::MachineInstr *))(**((void **)&v160 + 1) + 24))(*((void *)&v160 + 1), v25);
  }
LABEL_28:
  if (v13 >= 3) {
    uint64_t v32 = 8260;
  }
  else {
    uint64_t v32 = 8261;
  }
  uint64_t v33 = *(void *)(v158 + 8) + 48 * v32;
  uint64_t v165 = (unsigned __int8 *)v159;
  if ((void)v159) {
    llvm::MetadataTracking::track((uint64_t)&v165, (unsigned __int8 *)v159, 2);
  }
  int v34 = llvm::MachineFunction::CreateMachineInstr(v157, v33, &v165, 0);
  if (v165)
  {
    int v129 = *v165;
    if ((v129 - 4) > 0x1E)
    {
      if ((v129 - 3) >= 0xFFFFFFFE) {
        uint64_t v147 = v165;
      }
      else {
        uint64_t v147 = 0;
      }
      if ((v129 - 3) < 0xFFFFFFFE)
      {
        if (v129 == 3) {
          *((void *)v165 + 1) = 0;
        }
        goto LABEL_34;
      }
      unint64_t v131 = (unint64_t)(v147 + 8);
    }
    else
    {
      if ((v165[1] & 0x7F) != 2 && !*((_DWORD *)v165 + 3)) {
        goto LABEL_34;
      }
      uint64_t v130 = *((void *)v165 + 2);
      if ((v130 & 4) == 0) {
        goto LABEL_34;
      }
      unint64_t v131 = v130 & 0xFFFFFFFFFFFFFFF8;
      if (!v131) {
        goto LABEL_34;
      }
    }
    int v162 = &v165;
    sub_1CC5FA668(v131 + 16, &v162);
  }
LABEL_34:
  int v35 = (unint64_t *)v160;
  uint64_t v36 = *(void *)(*((void *)&v159 + 1) + 40);
  *((void *)v34 + 3) = v36;
  uint64_t v37 = *(void *)(v36 + 32);
  uint64_t v38 = *((unsigned int *)v34 + 10);
  if (v38)
  {
    uint64_t v79 = *((void *)v34 + 4);
    uint64_t v80 = *(void *)(v37 + 40);
    uint64_t v81 = 32 * v38;
    do
    {
      if (!*(unsigned char *)v79)
      {
        uint64_t v82 = *(unsigned int *)(v79 + 4);
        if ((int)v82 >= 0) {
          uint64_t v83 = (uint64_t *)(*(void *)(v80 + 272) + 8 * v82);
        }
        else {
          uint64_t v83 = (uint64_t *)(*(void *)(v80 + 24) + 16 * (v82 & 0x7FFFFFFF) + 8);
        }
        uint64_t v84 = *v83;
        if (*v83)
        {
          uint64_t v85 = *(void *)(v84 + 16);
          *(void *)(v84 + 16) = v79;
          *(void *)(v79 + 16) = v85;
          if (*(unsigned char *)(v79 + 3))
          {
            *(void *)(v79 + 24) = v84;
          }
          else
          {
            *(void *)(v79 + 24) = 0;
            uint64_t v83 = (uint64_t *)(v85 + 24);
          }
        }
        else
        {
          *(void *)(v79 + 16) = v79;
          *(void *)(v79 + 24) = 0;
        }
        uint64_t *v83 = v79;
      }
      v79 += 32;
      v81 -= 32;
    }
    while (v81);
  }
  uint64_t v39 = *(void *)(v37 + 728);
  if (v39) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v39 + 24))(v39, v34);
  }
  unint64_t v40 = *v35 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v34 = v40 | *(void *)v34 & 7;
  *((void *)v34 + 1) = v35;
  *(void *)(v40 + 8) = v34;
  *int v35 = *v35 & 7 | (unint64_t)v34;
  if (*((void *)&v160 + 1)) {
    (*(void (**)(void, llvm::MachineInstr *))(**((void **)&v160 + 1) + 24))(*((void *)&v160 + 1), v34);
  }
  LODWORD(v162) = 1;
  uint64_t v163 = 0;
  uint64_t v164 = 2;
  llvm::MachineInstr::addOperand(v34, v157, (const llvm::MachineOperand *)&v162);
  LODWORD(v162) = 1;
  uint64_t v163 = 0;
  uint64_t v164 = 2;
  llvm::MachineInstr::addOperand(v34, v157, (const llvm::MachineOperand *)&v162);
  if (a3 == 3)
  {
    uint64_t v41 = v157;
    uint64_t v42 = *(void *)(v158 + 8) + 48 * v32;
    uint64_t v165 = (unsigned __int8 *)v159;
    if ((void)v159) {
      llvm::MetadataTracking::track((uint64_t)&v165, (unsigned __int8 *)v159, 2);
    }
    uint64_t v43 = llvm::MachineFunction::CreateMachineInstr(v157, v42, &v165, 0);
    if (!v165) {
      goto LABEL_43;
    }
    int v138 = *v165;
    if ((v138 - 4) > 0x1E)
    {
      if ((v138 - 3) >= 0xFFFFFFFE) {
        unsigned int v153 = v165;
      }
      else {
        unsigned int v153 = 0;
      }
      if ((v138 - 3) < 0xFFFFFFFE)
      {
        if (v138 == 3) {
          *((void *)v165 + 1) = 0;
        }
        goto LABEL_43;
      }
      unint64_t v140 = (unint64_t)(v153 + 8);
    }
    else
    {
      if ((v165[1] & 0x7F) != 2 && !*((_DWORD *)v165 + 3)) {
        goto LABEL_43;
      }
      uint64_t v139 = *((void *)v165 + 2);
      if ((v139 & 4) == 0) {
        goto LABEL_43;
      }
      unint64_t v140 = v139 & 0xFFFFFFFFFFFFFFF8;
      if (!v140) {
        goto LABEL_43;
      }
    }
    int v162 = &v165;
    sub_1CC5FA668(v140 + 16, &v162);
LABEL_43:
    uint64_t v44 = (unint64_t *)v160;
    uint64_t v45 = *(void *)(*((void *)&v159 + 1) + 40);
    *((void *)v43 + 3) = v45;
    uint64_t v46 = *(void *)(v45 + 32);
    uint64_t v47 = *((unsigned int *)v43 + 10);
    if (v47)
    {
      uint64_t v100 = *((void *)v43 + 4);
      uint64_t v101 = *(void *)(v46 + 40);
      uint64_t v102 = 32 * v47;
      do
      {
        if (!*(unsigned char *)v100)
        {
          uint64_t v103 = *(unsigned int *)(v100 + 4);
          if ((int)v103 >= 0) {
            uint64_t v104 = (uint64_t *)(*(void *)(v101 + 272) + 8 * v103);
          }
          else {
            uint64_t v104 = (uint64_t *)(*(void *)(v101 + 24) + 16 * (v103 & 0x7FFFFFFF) + 8);
          }
          uint64_t v105 = *v104;
          if (*v104)
          {
            uint64_t v106 = *(void *)(v105 + 16);
            *(void *)(v105 + 16) = v100;
            *(void *)(v100 + 16) = v106;
            if (*(unsigned char *)(v100 + 3))
            {
              *(void *)(v100 + 24) = v105;
            }
            else
            {
              *(void *)(v100 + 24) = 0;
              uint64_t v104 = (uint64_t *)(v106 + 24);
            }
          }
          else
          {
            *(void *)(v100 + 16) = v100;
            *(void *)(v100 + 24) = 0;
          }
          *uint64_t v104 = v100;
        }
        v100 += 32;
        v102 -= 32;
      }
      while (v102);
    }
    uint64_t v48 = *(void *)(v46 + 728);
    if (v48) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v48 + 24))(v48, v43);
    }
    unint64_t v49 = *v44 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v43 = v49 | *(void *)v43 & 7;
    *((void *)v43 + 1) = v44;
    *(void *)(v49 + 8) = v43;
    *uint64_t v44 = *v44 & 7 | (unint64_t)v43;
    if (*((void *)&v160 + 1)) {
      (*(void (**)(void, llvm::MachineInstr *))(**((void **)&v160 + 1) + 24))(*((void *)&v160 + 1), v43);
    }
    LODWORD(v162) = 1;
    uint64_t v163 = 0;
    uint64_t v164 = 3;
    llvm::MachineInstr::addOperand(v43, v157, (const llvm::MachineOperand *)&v162);
    LODWORD(v162) = 1;
    uint64_t v163 = 0;
    uint64_t v164 = 2;
LABEL_82:
    llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v162);
  }
LABEL_83:
  if ((void)v159)
  {
    int v76 = *(unsigned __int8 *)v159;
    if ((v76 - 4) > 0x1E)
    {
      if ((v76 - 3) >= 0xFFFFFFFE) {
        uint64_t v77 = v159;
      }
      else {
        uint64_t v77 = 0;
      }
      if ((v76 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v78 = v77 + 8;
LABEL_93:
        int v162 = (unsigned __int8 **)&v159;
        sub_1CC5FA668(v78 + 16, &v162);
        return;
      }
      if (v76 == 3) {
        *(void *)(v159 + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(v159 + 1) & 0x7F) == 2 || *(_DWORD *)(v159 + 12))
    {
      uint64_t v128 = *(void *)(v159 + 16);
      if ((v128 & 4) != 0)
      {
        unint64_t v78 = v128 & 0xFFFFFFFFFFFFFFF8;
        if (v78) {
          goto LABEL_93;
        }
      }
    }
  }
}

uint64_t sub_1CBA62404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void **)(a1 + 8);
  unint64_t v4 = (llvm::detail::IEEEFloat *)(a1 + 8);
  if (v5 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::convertFromAPInt((uint64_t)v4, a2, a3, a4);
  }
  return llvm::detail::IEEEFloat::convertFromAPInt(v4, a2, a3, a4);
}

uint64_t sub_1CBA62420@<X0>(uint64_t result@<X0>, llvm::APInt *a2@<X8>)
{
  *((_DWORD *)a2 + 2) = result;
  if (result > 0x40) {
    llvm::APInt::initSlowCase(a2);
  }
  *(void *)a2 = 0;
  *(void *)a2 |= 1 << (result - 1);
  return result;
}

char **sub_1CBA6249C(char **a1)
{
  uint64_t v2 = (uint64_t)(a1 + 7803);
  uint64_t v3 = -8440;
  do
  {
    uint64_t v2 = sub_1CBA62590(v2) - 40;
    v3 += 40;
  }
  while (v3);
  uint64_t v4 = (uint64_t)(a1 + 6748);
  uint64_t v5 = -8440;
  do
  {
    uint64_t v4 = sub_1CBA62590(v4) - 40;
    v5 += 40;
  }
  while (v5);
  unint64_t v6 = a1 + 5693;
  uint64_t v7 = -8440;
  do
  {
    unint64_t v6 = sub_1CBA625F8(v6) - 5;
    v7 += 40;
  }
  while (v7);
  unint64_t v8 = a1 + 4638;
  uint64_t v9 = -8440;
  do
  {
    unint64_t v8 = sub_1CBA625F8(v8) - 5;
    v9 += 40;
  }
  while (v9);
  uint64_t v10 = a1 + 3581;
  uint64_t v11 = -10128;
  do
  {
    uint64_t v10 = sub_1CBA62674(v10) - 6;
    v11 += 48;
  }
  while (v11);
  unint64_t v12 = a1 + 2315;
  uint64_t v13 = 0x1FFFFFFFFFFFFB0ELL;
  do
  {
    unint64_t v12 = sub_1CBA62674(v12) - 6;
    v13 += 6;
  }
  while (v13 * 8);
  do
  {
    sub_1CBA6273C(&a1[v13 + 1050]);
    v13 -= 5;
  }
  while (v13 != -1055);
  return a1;
}

uint64_t sub_1CBA62590(uint64_t a1)
{
  uint64_t v2 = *(char ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = *v2;
      sub_1CBA625F8(v2 + 3);
      operator delete(v2);
      uint64_t v2 = (char **)v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

char **sub_1CBA625F8(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v5 = 24 * v3;
    do
    {
      unint64_t v6 = *(void **)&v2[v5 - 24];
      if (v6)
      {
        *(void *)&v2[v5 - 16] = v6;
        operator delete(v6);
      }
      v5 -= 24;
    }
    while (v5);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

char **sub_1CBA62674(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v5 = 32 * v3;
    unint64_t v6 = v2 - 32;
    do
    {
      uint64_t v7 = *(char **)&v6[v5 + 24];
      if (&v6[v5] == v7)
      {
        (*(void (**)(char *))(*(void *)&v6[v5] + 32))(&v6[v5]);
      }
      else if (v7)
      {
        (*(void (**)(char *))(*(void *)v7 + 40))(v7);
      }
      v5 -= 32;
    }
    while (v5);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

char **sub_1CBA6273C(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v5 = 24 * v3;
    unint64_t v6 = v2 - 24;
    do
    {
      MEMORY[0x1D25D9CD0](*(void *)&v6[v5], 8);
      v5 -= 24;
    }
    while (v5);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

char **sub_1CBA627B0(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 72 * v3;
    unint64_t v6 = *a1;
    do
    {
      uint64_t v7 = &v2[v5];
      uint64_t v8 = (uint64_t)&v2[v5 - 32];
      uint64_t v9 = *(void *)&v2[v5 - 8];
      if (v8 == v9)
      {
        (*(void (**)(uint64_t))(*(void *)v8 + 32))(v8);
      }
      else if (v9)
      {
        (*(void (**)(void))(*(void *)v9 + 40))(*(void *)&v2[v5 - 8]);
      }
      uint64_t v10 = *(char **)&v2[v5 - 48];
      if (v7 - 72 == v10)
      {
        (*(void (**)(char *))(*((void *)v7 - 9) + 32))(v7 - 72);
      }
      else if (v10)
      {
        (*(void (**)(void))(*(void *)v10 + 40))(*(void *)&v2[v5 - 48]);
      }
      v4 += 72;
      v2 -= 72;
      v6 -= 72;
    }
    while (v5 != v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void *sub_1CBA62914(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x48uLL);
  void *v3 = &unk_1F25F2978;
  sub_1CBA5A4A0((uint64_t)(v3 + 1), v2);
  sub_1CBA5A4A0((uint64_t)(v3 + 5), a1 + 40);
  return v3;
}

void sub_1CBA62988(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = __p + 40;
  uint64_t v4 = (char *)*((void *)__p + 8);
  if (v4 == v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  }
  uint64_t v5 = (char *)*((void *)__p + 4);
  if (v5 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(char *))(*(void *)v5 + 40))(v5);
  }

  operator delete(__p);
}

void *sub_1CBA62A84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    goto LABEL_8;
  }
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
  if (!result) {
    return result;
  }
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4)
  {
LABEL_8:
    sub_1CB920400();
    return sub_1CBA62B24(v6);
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)v4 + 48);

  return (void *)v5();
}

void *sub_1CBA62B24(void *a1)
{
  uint64_t v2 = a1 + 4;
  uint64_t v3 = (void *)a1[7];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  return a1;
}

void sub_1CBA62C10()
{
}

void *sub_1CBA62C24(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F29C0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA62C6C(uint64_t result, void *a2)
{
  *a2 = &unk_1F25F29C0;
  a2[1] = *(void *)(result + 8);
  return result;
}

BOOL sub_1CBA62C9C(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = sub_1CB8F1DC4(*(unint64_t **)(a2 + 8));
  if (v4 == 1)
  {
    unsigned int v8 = v3;
    unsigned int v3 = v8;
  }
  BOOL v5 = (v3 & 0xF) == 0 && *(_DWORD *)(a1 + 8) >= v3;
  BOOL result = 1;
  if (!v5)
  {
    if ((v3 & 0x1F) != 0 || (v3 & 0xFFFFFFE0) == 0x160) {
      return 0;
    }
    if ((v3 & 0xFFFFFFA0) == 0x100 || *(_DWORD *)(a1 + 12) < v3) {
      return 0;
    }
  }
  return result;
}

void sub_1CBA62D40()
{
}

void *sub_1CBA62D54()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F25F2A08;
  return result;
}

void sub_1CBA62D8C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F2A08;
}

uint64_t sub_1CBA62DB4()
{
  return 1;
}

void sub_1CBA62E08()
{
}

void *sub_1CBA62E1C()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F25F2A50;
  return result;
}

void sub_1CBA62E54(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F2A50;
}

BOOL sub_1CBA62E7C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)(a2 + 8);
  unint64_t v3 = (unsigned __int16)(v2 >> 3);
  unint64_t v4 = (unsigned __int16)(v2 >> 19);
  if ((v2 & 2) == 0) {
    unint64_t v4 = (v2 >> 19);
  }
  if ((v2 & 4) != 0) {
    unint64_t v3 = v4;
  }
  if (v2) {
    unint64_t v5 = (v2 >> 3);
  }
  else {
    unint64_t v5 = v3;
  }
  return v5 < 0x10;
}

void sub_1CBA62EBC()
{
}

void *sub_1CBA62ED0()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F25F2A98;
  return result;
}

void sub_1CBA62F08(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F2A98;
}

uint64_t sub_1CBA62F30(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)(a2 + 8);
  BOOL v3 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  uint64_t v4 = (v2 >> 2) & 1;
  if (v3) {
    return 0;
  }
  else {
    return v4;
  }
}

void sub_1CBA62F4C()
{
}

void *sub_1CBA62F60(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F25F2AE0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA62FA8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F2AE0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA62FD4(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)(a2 + 8);
  if (v2 == *(void *)(a1 + 8)) {
    return 1;
  }
  BOOL v4 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  uint64_t v5 = (v2 >> 2) & 1;
  if (v4) {
    return 0;
  }
  else {
    return v5;
  }
}

void sub_1CBA63004()
{
}

void *sub_1CBA63018(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F25F2B28;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA63060(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F2B28;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA6308C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)(a2 + 8);
  if (v2 == *(void *)(a1 + 8)) {
    return 1;
  }
  BOOL v4 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  uint64_t v5 = (v2 >> 2) & 1;
  if (v4) {
    return 0;
  }
  else {
    return v5;
  }
}

void sub_1CBA630BC()
{
}

__n128 sub_1CBA630D0(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_1F25F2B70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBA6311C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F2B70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBA6314C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = **(void **)(a2 + 8);
  return v2 == *(void *)(a1 + 8) || v2 == *(void *)(a1 + 16);
}

void sub_1CBA6316C()
{
}

__n128 sub_1CBA63180(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25F2BB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBA631CC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F2BB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBA631FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = **(void **)(a2 + 8);
  return v2 == *(void *)(a1 + 8) || v2 == *(void *)(a1 + 16);
}

void sub_1CBA6321C()
{
}

__n128 sub_1CBA63230(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25F2C00;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBA6327C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F2C00;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CBA632AC(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)(a2 + 8);
  BOOL v3 = v2 == *(void *)(a1 + 8) || v2 == *(void *)(a1 + 16);
  if (v3) {
    return 1;
  }
  BOOL v3 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  uint64_t v5 = (v2 >> 2) & 1;
  if (v3) {
    return 0;
  }
  else {
    return v5;
  }
}

void sub_1CBA632E0()
{
}

__n128 sub_1CBA632F4(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_1F25F2C48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBA63340(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F2C48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CBA63370(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)(a2 + 8);
  BOOL v3 = v2 == *(void *)(a1 + 8) || v2 == *(void *)(a1 + 16);
  if (v3) {
    return 1;
  }
  BOOL v3 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  uint64_t v5 = (v2 >> 2) & 1;
  if (v3) {
    return 0;
  }
  else {
    return v5;
  }
}

void sub_1CBA633A4()
{
}

__n128 sub_1CBA633B8(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_1F25F2C90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBA63404(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F2C90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CBA63434(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)(a2 + 8);
  BOOL v3 = v2 == *(void *)(a1 + 8) || v2 == *(void *)(a1 + 16);
  if (v3) {
    return 1;
  }
  BOOL v3 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  uint64_t v5 = (v2 >> 2) & 1;
  if (v3) {
    return 0;
  }
  else {
    return v5;
  }
}

void sub_1CBA63468()
{
}

void *sub_1CBA6347C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25F2CD8;
  return result;
}

void sub_1CBA634B4(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F2CD8;
}

BOOL sub_1CBA634DC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1CB8F1DC4((unint64_t *)(*(void *)(a2 + 8) + 8));
  if (v3 == 1) {
  unint64_t v6 = sub_1CB8F1DC4(*(unint64_t **)(a2 + 8));
  }
  if (v5 == 1) {
  return v4 < v6;
  }
}

void sub_1CBA63554()
{
}

void *sub_1CBA63568()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25F2D20;
  return result;
}

void sub_1CBA635A0(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F2D20;
}

uint64_t sub_1CBA635C8()
{
  return 0;
}

void sub_1CBA635DC()
{
}

void *sub_1CBA635F0()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25F2D68;
  return result;
}

void sub_1CBA63628(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F2D68;
}

BOOL sub_1CBA63650(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1CB8F1DC4((unint64_t *)(*(void *)(a2 + 8) + 8));
  if (v3 == 1) {
  unint64_t v6 = sub_1CB8F1DC4(*(unint64_t **)(a2 + 8));
  }
  if (v5 == 1) {
  return v4 < v6;
  }
}

void sub_1CBA636C8()
{
}

void *sub_1CBA636DC()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25F2DB0;
  return result;
}

void sub_1CBA63714(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F2DB0;
}

uint64_t sub_1CBA6373C()
{
  return 0;
}

void sub_1CBA63750()
{
}

void *sub_1CBA63764(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25F2DF8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA637AC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F2DF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA637D8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)(a2 + 8);
  if (v2 == *(void *)(a1 + 8)) {
    return 1;
  }
  BOOL v4 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  uint64_t v5 = (v2 >> 2) & 1;
  if (v4) {
    return 0;
  }
  else {
    return v5;
  }
}

void sub_1CBA63808()
{
}

__n128 sub_1CBA6381C(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &unk_1F25F2E40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CBA63870(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F2E40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBA638A8(void *a1, uint64_t a2)
{
  unint64_t v2 = *(void **)(a2 + 8);
  return (*v2 == a1[1] || *v2 == a1[2]) && v2[1] == a1[3];
}

void sub_1CBA638E0()
{
}

void *sub_1CBA638F4()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25F2E88;
  return result;
}

void sub_1CBA6392C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F2E88;
}

BOOL sub_1CBA63954(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unint64_t **)(a2 + 8);
  uint64_t v3 = v2 + 1;
  uint64_t v4 = sub_1CB8F1DC4(v2);
  int v6 = v5;
  return v4 != sub_1CB8F1DC4(v3) || v6 != v7;
}

void sub_1CBA639A4()
{
}

void *sub_1CBA639B8()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25F2ED0;
  return result;
}

void sub_1CBA639F0(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F2ED0;
}

BOOL sub_1CBA63A18(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unint64_t **)(a2 + 8);
  uint64_t v3 = v2 + 1;
  uint64_t v4 = sub_1CB8F1DC4(v2);
  int v6 = v5;
  return v4 != sub_1CB8F1DC4(v3) || v6 != v7;
}

void sub_1CBA63A68()
{
}

__n128 sub_1CBA63A7C(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v2 = &unk_1F25F2F18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 sub_1CBA63AE0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F2F18;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CBA63B28(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **(void **)(a2 + 8);
  BOOL v3 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0 || (**(void **)(a2 + 8) & 2) == 0;
  if (v3 || (v2 & 4) != 0) {
    return 0;
  }
  long long v5 = *(_OWORD *)(a1 + 24);
  v8[0] = *(_OWORD *)(a1 + 8);
  v8[1] = v5;
  v8[2] = *(_OWORD *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 56);
  sub_1CC70A830(1, v8, 7, (uint64_t)v10);
  if (!v11)
  {
    sub_1CB920400();
    JUMPOUT(0x1CBA63C78);
  }
  uint64_t v6 = (*(uint64_t (**)(void *, uint64_t))(*v11 + 48))(v11, a2);
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  return v6;
}

void sub_1CBA63C7C()
{
}

void *sub_1CBA63C90(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25F2F60;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA63CD8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F2F60;
  a2[1] = v2;
  return result;
}

BOOL sub_1CBA63D04(uint64_t a1, uint64_t a2)
{
  return **(void **)(a2 + 8) == *(void *)(a1 + 8) && (*(_DWORD *)a2 - 109) < 2;
}

void sub_1CBA63D2C()
{
}

void *sub_1CBA63D40(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25F2FA8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA63D88(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F2FA8;
  a2[1] = v2;
  return result;
}

BOOL sub_1CBA63DB4(uint64_t a1, uint64_t a2)
{
  return **(void **)(a2 + 8) == *(void *)(a1 + 8);
}

uint64_t sub_1CBA63DCC(uint64_t a1, void *a2)
{
  *(void *)(a1 + 24) = 0;
  long long v4 = operator new(0x28uLL);
  long long v5 = v4;
  *long long v4 = &unk_1F25F2FF0;
  uint64_t v6 = (void *)a2[3];
  if (v6)
  {
    if (v6 == a2)
    {
      v4[4] = v4 + 1;
      (*(void (**)(void *))(*a2 + 24))(a2);
    }
    else
    {
      v4[4] = v6;
      a2[3] = 0;
    }
  }
  else
  {
    v4[4] = 0;
  }
  *(void *)(a1 + 24) = v5;
  return a1;
}

void *sub_1CBA63E80(void *a1)
{
  *a1 = &unk_1F25F2FF0;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void sub_1CBA63F24(void *a1)
{
  *a1 = &unk_1F25F2FF0;
  int v1 = a1 + 1;
  uint64_t v2 = (void *)a1[4];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CBA63FE8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_1F25F2FF0;
  sub_1CBA5A4A0((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_1CBA6403C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F2FF0;
  return sub_1CBA5A4A0((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_1CBA64068(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1)
  {
    sub_1CB920400();
    JUMPOUT(0x1CBA640B0);
  }
  return (*(unsigned int (**)(uint64_t))(*(void *)v1 + 48))(v1) ^ 1;
}

void sub_1CBA640B4()
{
}

__n128 sub_1CBA640C8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F25F3038;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1CBA64124(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F3038;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBA64164(void *a1, uint64_t a2)
{
  long long v3 = *(uint64_t **)(a2 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = 0x800000000000000;
  if ((*v3 & 2) == 0) {
    uint64_t v5 = 0x8000000000000;
  }
  if ((v5 & v4) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    uint64_t v4 = *v3;
  }
  uint64_t v6 = v3[1];
  if (v6 == a1[1] || v6 == a1[2]) {
    return 1;
  }
  unsigned int v8 = (unsigned __int16)(v4 >> 3);
  if (v6 == a1[3] && v8 < 9) {
    return 1;
  }
  if (v6 == a1[4] && v8 < 5) {
    return 1;
  }
  return v6 == a1[5] && v8 == 2;
}

void sub_1CBA64208()
{
}

__n128 sub_1CBA6421C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1F25F3080;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 sub_1CBA64280(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F3080;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBA642C8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)(a2 + 8);
  int64x2_t v3 = vdupq_n_s64(v2);
  uint64_t v4 = 1;
  if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v3, *(int64x2_t *)(a1 + 8)), (int32x4_t)vceqq_s64(v3, *(int64x2_t *)(a1 + 24)))), 0xFuLL))) & 1) == 0&& v2 != *(void *)(a1 + 40)&& v2 != *(void *)(a1 + 48))
  {
    return v2 == *(void *)(a1 + 56);
  }
  return v4;
}

void sub_1CBA64338()
{
}

__n128 sub_1CBA6434C(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v2 = &unk_1F25F30C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1CBA643A8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F30C8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBA643E8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)(a2 + 8);
  char v3 = 3;
  if ((v2 & 1) == 0) {
    char v3 = 19;
  }
  unint64_t v4 = v2 >> v3;
  unint64_t v5 = v2 & 0x8000000000000000 | (8 * v4) | 1;
  uint64_t v6 = (v2 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v4) | 2;
  if ((v2 & 2) == 0) {
    uint64_t v6 = v5;
  }
  if ((v2 & 0xFFFFFFFFFFFFFFF9) != 0 && (**(void **)(a2 + 8) & 4) != 0) {
    unint64_t v2 = v6;
  }
  int64x2_t v8 = vdupq_n_s64(v2);
  return (vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v8, *(int64x2_t *)(a1 + 8)), (int32x4_t)vceqq_s64(v8, *(int64x2_t *)(a1 + 24)))), 0xFuLL))) & 1) != 0|| v2 == *(void *)(a1 + 40);
}

void sub_1CBA64488()
{
}

__n128 sub_1CBA6449C(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x88uLL);
  *(void *)unint64_t v2 = &unk_1F25F3110;
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_1CBA64520(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F3110;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 72);
  long long v6 = *(_OWORD *)(a1 + 88);
  long long v7 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 88) = v6;
  *(__n128 *)(a2 + 72) = result;
  return result;
}

uint64_t sub_1CBA64588()
{
  return 1;
}

void sub_1CBA64594()
{
}

void *sub_1CBA645A8()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25F3158;
  return result;
}

void sub_1CBA645E0(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F3158;
}

BOOL sub_1CBA64608(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1CB8F1DC4(*(unint64_t **)(a2 + 8));
  if (v3 == 1) {
  unint64_t v6 = sub_1CB8F1DC4((unint64_t *)(*(void *)(a2 + 8) + 8));
  }
  if (v5 == 1) {
  return v4 >= v6;
  }
}

void sub_1CBA64680()
{
}

void *sub_1CBA64694(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25F31A0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA646DC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F31A0;
  a2[1] = v2;
  return result;
}

BOOL sub_1CBA64708(uint64_t a1, uint64_t a2)
{
  return **(void **)(a2 + 8) == *(void *)(a1 + 8);
}

void sub_1CBA64724()
{
}

__n128 sub_1CBA64738(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25F31E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CBA6478C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F31E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBA647C4(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 8) + 8);
  return v2 == a1[1] || v2 == a1[2] || v2 == a1[3];
}

void sub_1CBA647F8()
{
}

__n128 sub_1CBA6480C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v2 = &unk_1F25F3230;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBA64878(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F3230;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

BOOL sub_1CBA648C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v4 = *(unint64_t **)(a2 + 8);
  long long v5 = *(_OWORD *)(a1 + 24);
  v12[0] = *(_OWORD *)(a1 + 8);
  v12[1] = v5;
  long long v6 = *(_OWORD *)(a1 + 56);
  v12[2] = *(_OWORD *)(a1 + 40);
  void v12[3] = v6;
  v12[4] = *(_OWORD *)(a1 + 72);
  while (*(void *)((char *)v12 + v3) != v4[1])
  {
    v3 += 8;
    if (v3 == 80) {
      return 0;
    }
  }
  unsigned int v8 = sub_1CB8F1DC4(v4);
  if (v9 == 1)
  {
    unsigned int v11 = v8;
    unsigned int v8 = v11;
  }
  BOOL v10 = (v8 & (v8 - 1)) == 0;
  if (!v8) {
    BOOL v10 = 0;
  }
  return v8 < 0x41 && v10;
}

void sub_1CBA649AC()
{
}

void *sub_1CBA649C0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25F3278;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA64A08(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F3278;
  a2[1] = v2;
  return result;
}

BOOL sub_1CBA64A34(uint64_t a1, uint64_t a2)
{
  return **(void **)(a2 + 8) == *(void *)(a1 + 8);
}

void sub_1CBA64A50()
{
}

__n128 sub_1CBA64A64(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25F32C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CBA64AB8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F32C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBA64AF0(void *a1, uint64_t a2)
{
  uint64_t v2 = **(void **)(a2 + 8);
  if (v2 == a1[1] || v2 == a1[2] || v2 == a1[3]) {
    return 1;
  }
  return (v2 & 0xFFFFFFFFFFFFFFF9) != 0 && (**(void **)(a2 + 8) & 2) != 0 && (**(void **)(a2 + 8) & 4) == 0;
}

void sub_1CBA64B44()
{
}

__n128 sub_1CBA64B58(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25F3308;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CBA64BAC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F3308;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBA64BE4(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 8) + 8);
  if (v2 == a1[1] || v2 == a1[2] || v2 == a1[3]) {
    return 1;
  }
  return (v2 & 0xFFFFFFFFFFFFFFF9) != 0
      && (*(void *)(*(void *)(a2 + 8) + 8) & 2) != 0
      && (*(void *)(*(void *)(a2 + 8) + 8) & 4) == 0;
}

void sub_1CBA64C38()
{
}

__n128 sub_1CBA64C4C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *(void *)uint64_t v2 = &unk_1F25F3350;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CBA64CC0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F3350;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t sub_1CBA64D18(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = **(void **)(a2 + 8);
  BOOL v4 = (v3 & 0xFFFFFFFFFFFFFFF9) == 0 || (**(void **)(a2 + 8) & 2) == 0;
  if (!v4 && (v3 & 4) == 0) {
    return 1;
  }
  long long v6 = *(_OWORD *)(a1 + 24);
  v10[0] = *(_OWORD *)(a1 + 8);
  v10[1] = v6;
  long long v7 = *(_OWORD *)(a1 + 56);
  v10[2] = *(_OWORD *)(a1 + 40);
  void v10[3] = v7;
  long long v8 = *(_OWORD *)(a1 + 88);
  v10[4] = *(_OWORD *)(a1 + 72);
  v10[5] = v8;
  sub_1CC70A830(0, v10, 12, (uint64_t)v11);
  if (!v12)
  {
    sub_1CB920400();
    JUMPOUT(0x1CBA64E70);
  }
  uint64_t v5 = (*(uint64_t (**)(void *, uint64_t))(*v12 + 48))(v12, a2);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void *))(*v12 + 40))(v12);
  }
  return v5;
}

void sub_1CBA64E74()
{
}

void *sub_1CBA64E88(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25F3398;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA64ED0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F3398;
  a2[1] = v2;
  return result;
}

BOOL sub_1CBA64EFC(uint64_t a1, uint64_t a2)
{
  return **(void **)(a2 + 8) == *(void *)(a1 + 8);
}

void sub_1CBA64F18()
{
}

__n128 sub_1CBA64F2C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25F33E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBA64F78(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F33E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBA64FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 8) + 8);
  return v2 == *(void *)(a1 + 16) || v2 == *(void *)(a1 + 8);
}

void sub_1CBA64FC8()
{
}

__n128 sub_1CBA64FDC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F25F3428;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CBA65030(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F3428;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CBA65068(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unint64_t **)(a2 + 8);
  if (v3[1] == *(void *)(a1 + 8))
  {
    unint64_t v5 = sub_1CB8F1DC4(*(unint64_t **)(a2 + 8));
    if (v4 == 1) {
    if (v5 <= *(unsigned int *)(a1 + 16))
    }
      return 1;
  }
  unint64_t v7 = sub_1CB8F1DC4(v3);
  if (v6 == 1) {
  if (v3[1] != *(void *)(a1 + 24))
  }
    return 0;
  unint64_t v9 = sub_1CB8F1DC4(v3);
  if (v8 == 1) {
  if (v9 > *(unsigned int *)(a1 + 32))
  }
    return 0;
  if ((v7 >> 5) <= 0xB) {
    return (0x2FFu >> (v7 >> 5)) & 1;
  }
  return 1;
}

void sub_1CBA65168()
{
}

__n128 sub_1CBA6517C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F25F3470;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CBA651D0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F3470;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBA65208(void *a1, uint64_t a2)
{
  uint64_t v2 = **(void **)(a2 + 8);
  return v2 == a1[1] || v2 == a1[2] || v2 == a1[3] || v2 == a1[4];
}

void sub_1CBA65244()
{
}

__n128 sub_1CBA65258(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F25F34B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CBA652AC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F34B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBA652E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  uint64_t v6 = *v3;
  BOOL v4 = v3 + 1;
  uint64_t v5 = v6;
  if (v6 != *(void *)(a1 + 8) && v5 != *(void *)(a1 + 16) && v5 != *(void *)(a1 + 24)) {
    return 0;
  }
  unint64_t v8 = sub_1CB8F1DC4(v4);
  if (v9 == 1)
  {
    unint64_t v11 = v8;
    unint64_t v8 = v11;
  }
  return v8 <= *(unsigned int *)(a1 + 32);
}

BOOL sub_1CBA65370(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  if ((v3 & 0x80000000) != 0) {
    BOOL v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  }
  else {
    BOOL v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v3);
  }
  uint64_t v5 = *v4;
  if (!v5) {
    return 0;
  }
  if ((*(unsigned char *)(v5 + 3) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5 || (*(unsigned char *)(v5 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6 || **(_WORD **)(v6 + 16) != 81 || *(_DWORD *)(v6 + 40) != 2) {
    return 0;
  }
  int v7 = *(_DWORD *)(*(void *)(v6 + 32) + 36);
  **(_DWORD **)(a1 + 8) = v7;
  if (v7 < 0 && (uint64_t v8 = v7 & 0x7FFFFFFF, v8 < *(_DWORD *)(a2 + 432))) {
    uint64_t v9 = *(void *)(*(void *)(a2 + 424) + 8 * v8);
  }
  else {
    uint64_t v9 = 0;
  }
  return v9 == *(void *)a1;
}

BOOL sub_1CBA65424(uint64_t a1)
{
  uint64_t v1 = a1 + 320;
  uint64_t v2 = *(void *)(a1 + 328);
  if (v2 == a1 + 320) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (v3 == v1) {
    return 0;
  }
  if (*(void *)(v3 + 8) != v1) {
    return 1;
  }
  uint64_t v5 = v2 + 48;
  uint64_t v6 = *(void *)(v2 + 56);
  if (v6 == v5) {
    return 1;
  }
  do
  {
    unsigned int v7 = **(unsigned __int16 **)(v6 + 16) - 256;
    BOOL result = v7 < 0xFFFFFF2D;
    if (v7 > 0xFFFFFF2C) {
      break;
    }
    if ((*(unsigned char *)v6 & 4) == 0)
    {
      while ((*(_WORD *)(v6 + 44) & 8) != 0)
        uint64_t v6 = *(void *)(v6 + 8);
    }
    uint64_t v6 = *(void *)(v6 + 8);
  }
  while (v6 != v5);
  return result;
}

uint64_t sub_1CBA654B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 328);
  uint64_t v2 = v1 + 48;
  for (uint64_t i = *(void *)(v1 + 56); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == v2) {
      return 0;
    }
    if (**(_WORD **)(i + 16) == 117)
    {
      uint64_t v4 = *(unsigned int *)(i + 40);
      if (v4)
      {
        uint64_t v5 = 0;
        uint64_t v6 = *(unsigned __int8 **)(i + 32);
        while (1)
        {
          int v7 = *v6;
          v6 += 32;
          if (v7 == 17) {
            break;
          }
          if (v4 == ++v5) {
            goto LABEL_8;
          }
        }
      }
      else
      {
LABEL_8:
        LODWORD(v5) = -1;
      }
      if (*(_DWORD *)(*(void *)(i + 32) + 32 * v5 + 16) == 1823) {
        break;
      }
    }
    if ((*(unsigned char *)i & 4) == 0)
    {
      while ((*(_WORD *)(i + 44) & 8) != 0)
        uint64_t i = *(void *)(i + 8);
    }
  }
  return 1;
}

uint64_t sub_1CBA65548(uint64_t a1)
{
  *(void *)a1 = &unk_1F25F3528;
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 408), 4);
  sub_1CBA6598C(a1 + 384);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 384), 8);
  uint64_t v2 = *(char **)(a1 + 208);
  uint64_t v3 = *(unsigned int *)(a1 + 216);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 - 16;
    do
    {
      uint64_t v6 = *(void ***)&v5[v4];
      if ((v6 & 1) == 0 && v6)
      {
        if (*v6 != v6 + 2) {
          free(*v6);
        }
        MEMORY[0x1D25D9CE0](v6, 0x1080C40EF38A13ELL);
      }
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(char **)(a1 + 208);
  }
  if (v2 != (char *)(a1 + 224)) {
    free(v2);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 184), 8);
  sub_1CBA65A1C((unsigned int *)(a1 + 160));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 160), 8);
  sub_1CBA65A98((char **)(a1 + 16));
  return a1;
}

uint64_t sub_1CBA6564C(llvm::yaml::IO *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  char v23 = 1;
  unsigned int v10 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
  if (*(unsigned char *)(a3 + 4)) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
  if (result)
  {
    if (!*(unsigned char *)(a3 + 4))
    {
LABEL_30:
      *(void *)a3 = *a4;
      return result;
    }
  }
  else if (!*(unsigned char *)(a3 + 4))
  {
    *(_DWORD *)a3 = 0;
    *(unsigned char *)(a3 + 4) = 1;
  }
  uint64_t v24 = 0;
  uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *, uint64_t, uint64_t, uint64_t, char *, uint64_t *))(*(void *)a1 + 120))(a1, a2, a5, v11, &v23, &v24);
  if (!result)
  {
    if (!v23) {
      return result;
    }
    goto LABEL_30;
  }
  if ((*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1)) {
    goto LABEL_31;
  }
  uint64_t v13 = *((void *)a1 + 37);
  if (!v13) {
    goto LABEL_31;
  }
  uint64_t v14 = *(void *)(v13 + 8);
  if (!v14 || *(_DWORD *)(v14 + 32) != 1) {
    goto LABEL_31;
  }
  unsigned int v16 = *(int **)(v14 + 72);
  unint64_t v17 = *(void *)(v14 + 80);
  unint64_t v18 = v17;
  do
  {
    unint64_t v19 = v18;
    if (!v18) {
      break;
    }
    --v18;
  }
  while (*((unsigned char *)v16 + v19 - 1) == 32);
  if (v19 < v17) {
    unint64_t v17 = v19;
  }
  if (v17 == 6
    && ((int v20 = *v16, v21 = *((unsigned __int16 *)v16 + 2), v20 == 1852796476) ? (v22 = v21 == 15973) : (v22 = 0), v22))
  {
    *(void *)a3 = *a4;
  }
  else
  {
LABEL_31:
    sub_1CD3EDF78(a1, (unsigned int *)a3);
  }
  return (*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 128))(a1, v24);
}

uint64_t sub_1CBA65860(uint64_t a1)
{
  *(void *)a1 = &unk_1F25F3528;
  sub_1CBA658CC((char **)(a1 + 208));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 184), 8);
  sub_1CBA65A1C((unsigned int *)(a1 + 160));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 160), 8);
  sub_1CBA65A98((char **)(a1 + 16));
  return a1;
}

char **sub_1CBA658CC(char **a1)
{
  MEMORY[0x1D25D9CD0](a1[25], 4);
  sub_1CBA6598C((uint64_t)(a1 + 22));
  MEMORY[0x1D25D9CD0](a1[22], 8);
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 - 16;
    do
    {
      uint64_t v6 = *(void ***)&v5[v4];
      if ((v6 & 1) == 0 && v6)
      {
        if (*v6 != v6 + 2) {
          free(*v6);
        }
        MEMORY[0x1D25D9CE0](v6, 0x1080C40EF38A13ELL);
      }
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void sub_1CBA6598C(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = v1 << 6;
    uint64_t v3 = *(void *)a1 + 24;
    do
    {
      uint64_t v4 = *(void *)(v3 - 24);
      if (v4 != -4096 && v4 != -8192)
      {
        uint64_t v5 = *(void **)(v3 + 8);
        if ((void *)(v3 + 24) != v5)
        {
          uint64_t v8 = v3;
          uint64_t v10 = v2;
          free(v5);
          uint64_t v3 = v8;
          uint64_t v2 = v10;
        }
        uint64_t v6 = *(void **)(v3 - 16);
        if ((void *)v3 != v6)
        {
          uint64_t v7 = v3;
          uint64_t v9 = v2;
          free(v6);
          uint64_t v3 = v7;
          uint64_t v2 = v9;
        }
      }
      v3 += 64;
      v2 -= 64;
    }
    while (v2);
  }
}

unsigned int *sub_1CBA65A1C(unsigned int *result)
{
  uint64_t v1 = result[4];
  if (v1)
  {
    uint64_t v2 = 16 * v1;
    uint64_t v3 = (unsigned int **)(*(void *)result + 8);
    do
    {
      if (((unint64_t)*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t result = *v3;
        void *v3 = 0;
        if (result) {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 16))(result);
        }
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

char **sub_1CBA65A98(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    uint64_t v5 = v2 - 8;
    do
    {
      uint64_t v6 = *(void *)&v5[v4];
      *(void *)&v5[v4] = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
      }
      v4 -= 8;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

BOOL sub_1CBA65B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, a3);
  uint64_t v7 = 0;
  uint64_t v8 = (char *)(v6 + 192);
  long long v9 = *(_OWORD *)(v5 + 208);
  v11[0] = *(_OWORD *)(v5 + 192);
  v11[1] = v9;
  uint64_t v12 = *(void *)(v5 + 224);
  do
  {
    *(void *)((char *)v11 + v7) &= *(void *)&v8[v7];
    v7 += 8;
  }
  while (v7 != 40);
  return memcmp(v11, v8, 0x28uLL) == 0;
}

void sub_1CBA65C04(uint64_t a1, llvm::Loop *a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)a4 = 500;
  *(_DWORD *)(a4 + 12) = 500;
  *(unsigned char *)(a4 + 40) = 1;
  *(unsigned char *)(a4 + 42) = 0;
  sub_1CD113E98(a2);
}

uint64_t sub_1CBA65C98(int a1, uint64_t a2, unsigned int a3, int a4, llvm::Type ***this)
{
  uint64_t v8 = (llvm::Type *)this;
  if ((this[1] & 0xFE) == 0x12) {
    uint64_t v8 = *this[2];
  }
  if (llvm::Type::getPrimitiveSizeInBits(v8) != 8)
  {
LABEL_4:
    if (a2 >= 4) {
      return 4;
    }
    else {
      return a2;
    }
  }
  if (a3 * a2 != 128 || (unsigned int v10 = 8 * *((_DWORD *)this + 8), v10 < 0x20))
  {
    if (a3 > 8) {
      return 1;
    }
    goto LABEL_4;
  }
  do
  {
    uint64_t result = a2;
    unsigned int v11 = a2 * a3;
    a2 = a2 >> 1;
  }
  while (v11 >= 0x20 && v10 < v11);
  return result;
}

BOOL sub_1CBA65D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = 1;
  if (a2 && *(unsigned char *)(a2 + 16) == 84)
  {
    uint64_t v6 = *(void *)(a2 + 64);
    if ((!v6 || (*(unsigned char *)(v6 + 12) & 0x40) == 0) && !llvm::CallBase::hasFnAttrOnCalledFunction(a2, 6)) {
      return 1;
    }
    uint64_t v7 = *(void *)(a2 - 32);
    if (!v7 || *(unsigned char *)(v7 + 16) || *(void *)(v7 + 24) != *(void *)(a2 + 72)) {
      return 1;
    }
    int v8 = *(_DWORD *)(v7 + 36);
    BOOL result = 1;
    if (v8 > 2578)
    {
      BOOL v10 = (v8 - 2579) > 0x18 || ((1 << (v8 - 19)) & 0x1FE0001) == 0;
      if (!v10 || (v8 - 2677) < 2) {
        return *(void *)(a2 + 40) == *(void *)(a3 + 40);
      }
    }
    else
    {
      BOOL v9 = (v8 - 2484) > 0x18 || ((1 << (v8 + 76)) & 0x1FE0013) == 0;
      if (!v9 || v8 == 2306) {
        return *(void *)(a2 + 40) == *(void *)(a3 + 40);
      }
    }
  }
  return result;
}

unint64_t sub_1CBA65E40(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unsigned int v4 = *(_DWORD *)(a2 + 32);
  unsigned int v9 = v4;
  if (v4 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v8);
  }
  if (v4) {
    unint64_t v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
  }
  else {
    unint64_t v5 = 0;
  }
  unint64_t v8 = v5;
  unint64_t v6 = sub_1CBA65F0C(a1, a2, (uint64_t)&v8, a3, a4);
  if (v9 >= 0x41 && v8) {
    MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
  }
  return v6;
}

unint64_t sub_1CBA65F0C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v33 = *(_DWORD *)(a2 + 32);
  if (v33 < 1) {
    return 0;
  }
  unsigned int v8 = 0;
  unint64_t v9 = 0;
  do
  {
    if (*(_DWORD *)(a3 + 8) >= 0x41u) {
      BOOL v10 = (void *)(*(void *)a3 + 8 * (v8 >> 6));
    }
    else {
      BOOL v10 = (void *)a3;
    }
    if ((*v10 >> v8))
    {
      if (a4)
      {
        unsigned int v11 = (llvm::EVT *)a2;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
          unsigned int v11 = **(llvm::EVT ***)(a2 + 16);
        }
        unint64_t v12 = *(void *)(a1 + 32);
        uint64_t v13 = *(llvm::LLVMContext **)v11;
        unint64_t v14 = sub_1CB87DC14(v12, *(void *)(a1 + 8), v11, 0);
        uint64_t v16 = v15;
        uint64_t v39 = 1;
        int v40 = 0;
        while (1)
        {
          llvm::TargetLoweringBase::getTypeConversion(v12, v13, v14, v16, (uint64_t)v36);
          if (!v36[0])
          {
LABEL_12:
            uint64_t v17 = v39;
            goto LABEL_13;
          }
          if (v36[0] == 10) {
            break;
          }
          if ((v36[0] & 0xFB) == 2)
          {
            uint64_t v41 = 2;
            int v42 = 0;
            sub_1CB90C9D4((uint64_t)&v39, (uint64_t)&v41);
          }
          int v29 = v14;
          unint64_t v14 = v37;
          if (v29 == v37)
          {
            if (v29) {
              goto LABEL_12;
            }
            uint64_t v30 = v38;
            if (v16 == v38) {
              goto LABEL_12;
            }
          }
          else
          {
            uint64_t v30 = v38;
          }
          uint64_t v16 = v30;
        }
        uint64_t v17 = 0;
LABEL_13:
        BOOL v18 = __OFADD__(v9, v17);
        uint64_t v19 = v9 + v17;
        if (v18) {
          unint64_t v9 = (v19 >> 63) ^ 0x8000000000000000;
        }
        else {
          unint64_t v9 = v19;
        }
      }
      if (a5)
      {
        int v20 = (llvm::EVT *)a2;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
          int v20 = **(llvm::EVT ***)(a2 + 16);
        }
        unint64_t v21 = *(void *)(a1 + 32);
        BOOL v22 = *(llvm::LLVMContext **)v20;
        unint64_t v23 = sub_1CB87DC14(v21, *(void *)(a1 + 8), v20, 0);
        uint64_t v25 = v24;
        uint64_t v39 = 1;
        int v40 = 0;
        while (1)
        {
          llvm::TargetLoweringBase::getTypeConversion(v21, v22, v23, v25, (uint64_t)v36);
          if (!v36[0])
          {
LABEL_21:
            uint64_t v26 = v39;
            goto LABEL_22;
          }
          if (v36[0] == 10) {
            break;
          }
          if ((v36[0] & 0xFB) == 2)
          {
            uint64_t v41 = 2;
            int v42 = 0;
            sub_1CB90C9D4((uint64_t)&v39, (uint64_t)&v41);
          }
          int v31 = v23;
          unint64_t v23 = v37;
          if (v31 == v37)
          {
            if (v31) {
              goto LABEL_21;
            }
            uint64_t v32 = v38;
            if (v25 == v38) {
              goto LABEL_21;
            }
          }
          else
          {
            uint64_t v32 = v38;
          }
          uint64_t v25 = v32;
        }
        uint64_t v26 = 0;
LABEL_22:
        BOOL v18 = __OFADD__(v9, v26);
        uint64_t v27 = v9 + v26;
        if (v18) {
          unint64_t v9 = (v27 >> 63) ^ 0x8000000000000000;
        }
        else {
          unint64_t v9 = v27;
        }
      }
    }
    ++v8;
  }
  while (v8 != v33);
  return v9;
}

uint64_t sub_1CBA661BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = **(unsigned __int16 **)(a2 + 16);
  uint64_t v3 = *(unsigned int *)(a2 + 40);
  if (v3)
  {
    unint64_t v5 = (uint64_t *)result;
    uint64_t v6 = 32 * v3;
    uint64_t v7 = *(void *)(a2 + 32) + 16;
    while (1)
    {
      unsigned int v8 = *(_DWORD *)(v7 - 16);
      switch((char)v8)
      {
        case 0:
          if ((v8 & 0x2000000) != 0) {
            goto LABEL_58;
          }
          unint64_t v9 = *(unsigned int *)(v7 - 12);
          uint64_t v10 = 1;
          goto LABEL_56;
        case 1:
          unint64_t v9 = *(void *)v7;
          uint64_t v10 = 2;
          goto LABEL_56;
        case 4:
          BOOL result = llvm::MachineBasicBlock::getSymbol(*(llvm::MachineBasicBlock **)v7);
          uint64_t v11 = result;
          uint64_t v12 = *v5;
          *(void *)(v12 + 272) = *(void *)(*v5 + 272) + 24;
          uint64_t v13 = *(void *)(v12 + 192);
          if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8) - v13 + 24 > *(void *)(v12 + 200) - v13)
          {
            unsigned int v66 = *(_DWORD *)(v12 + 216) >> 7;
            if (v66 >= 0x1E) {
              LOBYTE(v66) = 30;
            }
            uint64_t v67 = 4096 << v66;
            BOOL result = (uint64_t)operator new(4096 << v66, (std::align_val_t)8uLL);
            unint64_t v9 = result;
            unint64_t v68 = *(unsigned int *)(v12 + 216);
            if (v68 >= *(unsigned int *)(v12 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v12 + 208) + 8 * v68) = result;
            ++*(_DWORD *)(v12 + 216);
            *(void *)(v12 + 200) = result + v67;
          }
          else
          {
            unint64_t v9 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(v12 + 192) = v9 + 24;
          int v14 = *(unsigned __int8 *)(*(void *)(v12 + 152) + 18) << 16;
          *(unsigned char *)unint64_t v9 = 2;
          int v15 = v14 | (*(unsigned __int8 *)(v9 + 4) << 24);
          goto LABEL_46;
        case 7:
          switch(*(_DWORD *)v7)
          {
            case '@':
              if ((_BYTE)v8) {
                int v19 = ((v8 >> 8) & 0xFFF) - 1;
              }
              else {
                int v19 = -1;
              }
              int v20 = dword_1CDB0E774[v19];
              break;
            case 'B':
              int v20 = 6;
              break;
            case 'C':
              int v20 = 8;
              break;
            case 'D':
              int v20 = 7;
              break;
            default:
              llvm::report_fatal_error((llvm *)"Unhandled target index type!", (const llvm::Twine *)1);
          }
          uint64_t v39 = *(unsigned int *)(v7 + 8);
          uint64_t v40 = *(unsigned int *)(v7 - 12);
          uint64_t v41 = *v5;
          *(void *)(v41 + 272) = *(void *)(*v5 + 272) + 24;
          uint64_t v42 = *(void *)(v41 + 192);
          if (((v42 + 7) & 0xFFFFFFFFFFFFFFF8) - v42 + 24 > *(void *)(v41 + 200) - v42)
          {
            unsigned int v69 = *(_DWORD *)(v41 + 216) >> 7;
            if (v69 >= 0x1E) {
              LOBYTE(v69) = 30;
            }
            uint64_t v70 = 4096 << v69;
            BOOL result = (uint64_t)operator new(4096 << v69, (std::align_val_t)8uLL);
            unint64_t v43 = result;
            unint64_t v71 = *(unsigned int *)(v41 + 216);
            if (v71 >= *(unsigned int *)(v41 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v41 + 208) + 8 * v71) = result;
            ++*(_DWORD *)(v41 + 216);
            *(void *)(v41 + 200) = result + v70;
          }
          else
          {
            unint64_t v43 = (v42 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(v41 + 192) = v43 + 24;
          *(unsigned char *)unint64_t v43 = 1;
          *(_DWORD *)(v43 + 1) = *(unsigned __int8 *)(v43 + 4) << 24;
          *(void *)(v43 + 8) = 0;
          *(void *)(v43 + 16) = v40 | (v39 << 32);
          uint64_t v44 = *v5;
          *(void *)(v44 + 272) = *(void *)(*v5 + 272) + 40;
          uint64_t v45 = *(void *)(v44 + 192);
          if (((v45 + 7) & 0xFFFFFFFFFFFFFFF8) - v45 + 40 > *(void *)(v44 + 200) - v45)
          {
            unsigned int v72 = *(_DWORD *)(v44 + 216) >> 7;
            if (v72 >= 0x1E) {
              LOBYTE(v72) = 30;
            }
            uint64_t v73 = 4096 << v72;
            BOOL result = (uint64_t)operator new(4096 << v72, (std::align_val_t)8uLL);
            unint64_t v46 = result;
            unint64_t v74 = *(unsigned int *)(v44 + 216);
            if (v74 >= *(unsigned int *)(v44 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v44 + 208) + 8 * v74) = result;
            ++*(_DWORD *)(v44 + 216);
            *(void *)(v44 + 200) = result + v73;
          }
          else
          {
            unint64_t v46 = (v45 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(v44 + 192) = v46 + 40;
          *(unsigned char *)(v46 + 8) = 4;
          unint64_t v9 = v46 + 8;
          *(_DWORD *)(v46 + 9) = *(unsigned __int8 *)(v46 + 12) << 24;
          *(void *)(v46 + 16) = 0;
          *(void *)unint64_t v46 = &unk_1F25FD370;
          *(_DWORD *)(v46 + 24) = v20;
          *(void *)(v46 + 32) = v43;
          goto LABEL_55;
        case 10:
          uint64_t v16 = *(llvm::MachineBasicBlock **)v7;
          BOOL result = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(v5[1] + 248), *(const llvm::GlobalValue **)v7);
          uint64_t v11 = result;
          if (*(_DWORD *)(v7 - 16)) {
            int v17 = ((*(_DWORD *)(v7 - 16) >> 8) & 0xFFF) - 8;
          }
          else {
            int v17 = -8;
          }
          if (v17 > 5)
          {
            int v18 = 0;
            if (!v16) {
              goto LABEL_43;
            }
          }
          else
          {
            int v18 = dword_1CDB0E790[v17];
            if (!v16) {
              goto LABEL_43;
            }
          }
          if (*((unsigned char *)v16 + 16) != 3) {
            goto LABEL_43;
          }
          BOOL result = llvm::Value::getMetadata((uint64_t)v16, "agx.bind", 8uLL);
          if (!result) {
            goto LABEL_43;
          }
          unint64_t v21 = (uint64_t *)(result - 8 * *(unsigned int *)(result + 8));
          uint64_t v23 = *v21;
          uint64_t v22 = v21[1];
          if (*(unsigned char *)(*(void *)(*(void *)(v23 + 128) + 24) + 8) != 17) {
            goto LABEL_28;
          }
          if (*(unsigned char *)v22 != 1 || (uint64_t v24 = *(void *)(v22 + 128), *(unsigned char *)(v24 + 16) != 16))
          {
            uint64_t v22 = *(void *)(v22 - 8 * *(unsigned int *)(v22 + 8));
LABEL_28:
            uint64_t v24 = *(void *)(v22 + 128);
          }
          uint64_t v25 = (void *)(v24 + 24);
          if (*(_DWORD *)(v24 + 32) >= 0x41u) {
            uint64_t v25 = (void *)*v25;
          }
          int v26 = *(_DWORD *)v25;
          if (v26 == 114 || v26 == 18)
          {
            BOOL result = llvm::Value::getMetadata((uint64_t)v16, "agx.bind", 8uLL);
            if (!result) {
              goto LABEL_73;
            }
            uint64_t v28 = (void *)(result - 8 * *(unsigned int *)(result + 8));
            uint64_t v29 = v28[1];
            if (*(unsigned char *)(*(void *)(*(void *)(*v28 + 128) + 24) + 8) == 17)
            {
              if (*(unsigned char *)v29 != 1 || (uint64_t v30 = *(void *)(v29 + 128), *(unsigned char *)(v30 + 16) != 16))
              {
                int v31 = (void *)(v29 - 8 * *(unsigned int *)(v29 + 8));
                uint64_t v32 = *(void *)(*v31 + 128);
                int v33 = (void *)(v32 + 24);
                if (*(_DWORD *)(v32 + 32) >= 0x41u) {
                  int v33 = (void *)*v33;
                }
                int v34 = (void *)*v33;
                uint64_t v35 = v31[1];
                goto LABEL_67;
              }
            }
            else
            {
              uint64_t v30 = *(void *)(v29 + 128);
            }
            uint64_t v53 = (void *)(v30 + 24);
            if (*(_DWORD *)(v30 + 32) >= 0x41u) {
              uint64_t v53 = (void *)*v53;
            }
            int v34 = (void *)*v53;
            uint64_t v35 = v28[2];
LABEL_67:
            uint64_t v54 = *(void *)(v35 + 128);
            uint64_t v55 = (void *)(v54 + 24);
            if (*(_DWORD *)(v54 + 32) >= 0x41u) {
              uint64_t v55 = (void *)*v55;
            }
            if (v34 == 114 || v34 == 18)
            {
              uint64_t v86 = (void *)*v55;
              uint64_t v58 = v86 & 0xFFFFFF00;
              uint64_t v57 = v86;
            }
            else
            {
LABEL_73:
              uint64_t v57 = 0;
              uint64_t v58 = 0;
            }
            uint64_t v59 = *v5;
            *(void *)(v59 + 272) = *(void *)(*v5 + 272) + 24;
            uint64_t v60 = *(void *)(v59 + 192);
            if (((v60 + 7) & 0xFFFFFFFFFFFFFFF8) - v60 + 24 > *(void *)(v59 + 200) - v60)
            {
              unsigned int v78 = *(_DWORD *)(v59 + 216) >> 7;
              if (v78 >= 0x1E) {
                LOBYTE(v78) = 30;
              }
              uint64_t v90 = 4096 << v78;
              BOOL result = (uint64_t)operator new(4096 << v78, (std::align_val_t)8uLL);
              unint64_t v61 = result;
              unint64_t v79 = *(unsigned int *)(v59 + 216);
              if (v79 >= *(unsigned int *)(v59 + 220)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(v59 + 208) + 8 * v79) = result;
              ++*(_DWORD *)(v59 + 216);
              *(void *)(v59 + 200) = result + v90;
            }
            else
            {
              unint64_t v61 = (v60 + 7) & 0xFFFFFFFFFFFFFFF8;
            }
            *(void *)(v59 + 192) = v61 + 24;
            int v62 = *(unsigned __int8 *)(*(void *)(v59 + 152) + 18);
            *(unsigned char *)unint64_t v61 = 2;
            *(_DWORD *)(v61 + 1) = (*(unsigned __int8 *)(v61 + 4) << 24) | (v62 << 16) | v18;
            *(void *)(v61 + 8) = 0;
            *(void *)(v61 + 16) = v11;
            *(void *)(v59 + 272) += 24;
            uint64_t v63 = *(void *)(v59 + 192);
            if (((v63 + 7) & 0xFFFFFFFFFFFFFFF8) - v63 + 24 > *(void *)(v59 + 200) - v63)
            {
              unsigned int v80 = *(_DWORD *)(v59 + 216) >> 7;
              if (v80 >= 0x1E) {
                LOBYTE(v80) = 30;
              }
              uint64_t v81 = 4096 << v80;
              BOOL result = (uint64_t)operator new(4096 << v80, (std::align_val_t)8uLL);
              unint64_t v64 = result;
              unint64_t v82 = *(unsigned int *)(v59 + 216);
              if (v82 >= *(unsigned int *)(v59 + 220)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(v59 + 208) + 8 * v82) = result;
              ++*(_DWORD *)(v59 + 216);
              *(void *)(v59 + 200) = result + v81;
            }
            else
            {
              unint64_t v64 = (v63 + 7) & 0xFFFFFFFFFFFFFFF8;
            }
            *(void *)(v59 + 192) = v64 + 24;
            *(unsigned char *)unint64_t v64 = 1;
            *(_DWORD *)(v64 + 1) = *(unsigned __int8 *)(v64 + 4) << 24;
            *(void *)(v64 + 8) = 0;
            *(void *)(v64 + 16) = v58 | v57;
            *(void *)(v59 + 272) += 32;
            uint64_t v65 = *(void *)(v59 + 192);
            if (((v65 + 7) & 0xFFFFFFFFFFFFFFF8) - v65 + 32 > *(void *)(v59 + 200) - v65)
            {
              unsigned int v83 = *(_DWORD *)(v59 + 216) >> 7;
              if (v83 >= 0x1E) {
                LOBYTE(v83) = 30;
              }
              uint64_t v84 = 4096 << v83;
              BOOL result = (uint64_t)operator new(4096 << v83, (std::align_val_t)8uLL);
              unint64_t v9 = result;
              unint64_t v85 = *(unsigned int *)(v59 + 216);
              if (v85 >= *(unsigned int *)(v59 + 220)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(v59 + 208) + 8 * v85) = result;
              ++*(_DWORD *)(v59 + 216);
              *(void *)(v59 + 200) = result + v84;
            }
            else
            {
              unint64_t v9 = (v65 + 7) & 0xFFFFFFFFFFFFFFF8;
            }
            *(void *)(v59 + 192) = v9 + 32;
            *(unsigned char *)unint64_t v9 = 0;
            *(_DWORD *)(v9 + 1) = *(unsigned __int8 *)(v9 + 4) << 24;
            *(void *)(v9 + 8) = 0;
            *(void *)(v9 + 16) = v61;
            *(void *)(v9 + 24) = v64;
            goto LABEL_55;
          }
LABEL_43:
          uint64_t v36 = *v5;
          *(void *)(v36 + 272) = *(void *)(*v5 + 272) + 24;
          uint64_t v37 = *(void *)(v36 + 192);
          if (((v37 + 7) & 0xFFFFFFFFFFFFFFF8) - v37 + 24 > *(void *)(v36 + 200) - v37)
          {
            unsigned int v75 = *(_DWORD *)(v36 + 216) >> 7;
            if (v75 >= 0x1E) {
              LOBYTE(v75) = 30;
            }
            uint64_t v76 = 4096 << v75;
            BOOL result = (uint64_t)operator new(4096 << v75, (std::align_val_t)8uLL);
            unint64_t v9 = result;
            unint64_t v77 = *(unsigned int *)(v36 + 216);
            if (v77 >= *(unsigned int *)(v36 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v36 + 208) + 8 * v77) = result;
            ++*(_DWORD *)(v36 + 216);
            *(void *)(v36 + 200) = result + v76;
          }
          else
          {
            unint64_t v9 = (v37 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(v36 + 192) = v9 + 24;
          int v38 = *(unsigned __int8 *)(*(void *)(v36 + 152) + 18);
          *(unsigned char *)unint64_t v9 = 2;
          int v15 = (*(unsigned __int8 *)(v9 + 4) << 24) | (v38 << 16) | v18;
LABEL_46:
          *(_DWORD *)(v9 + 1) = v15;
          *(void *)(v9 + 8) = 0;
          *(void *)(v9 + 16) = v11;
LABEL_55:
          uint64_t v10 = 5;
LABEL_56:
          unint64_t v47 = *(unsigned int *)(a3 + 24);
          if (v47 >= *(unsigned int *)(a3 + 28)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v48 = (uint64_t *)(*(void *)(a3 + 16) + 16 * v47);
          *uint64_t v48 = v10;
          v48[1] = v9;
          ++*(_DWORD *)(a3 + 24);
LABEL_58:
          v7 += 32;
          v6 -= 32;
          if (!v6) {
            return result;
          }
          break;
        case 11:
          BOOL result = (uint64_t)sub_1CD89D224(v5[1], *(void *)(*(void *)v7 - 32));
          uint64_t v49 = *(void *)result;
          uint64_t v50 = *v5;
          *(void *)(v50 + 272) = *(void *)(*v5 + 272) + 24;
          uint64_t v51 = *(void *)(v50 + 192);
          if (((v51 + 7) & 0xFFFFFFFFFFFFFFF8) - v51 + 24 > *(void *)(v50 + 200) - v51)
          {
            unsigned int v87 = *(_DWORD *)(v50 + 216) >> 7;
            if (v87 >= 0x1E) {
              LOBYTE(v87) = 30;
            }
            uint64_t v88 = 4096 << v87;
            BOOL result = (uint64_t)operator new(4096 << v87, (std::align_val_t)8uLL);
            unint64_t v9 = result;
            unint64_t v89 = *(unsigned int *)(v50 + 216);
            if (v89 >= *(unsigned int *)(v50 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v50 + 208) + 8 * v89) = result;
            ++*(_DWORD *)(v50 + 216);
            *(void *)(v50 + 200) = result + v88;
          }
          else
          {
            unint64_t v9 = (v51 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(v50 + 192) = v9 + 24;
          int v52 = *(unsigned __int8 *)(*(void *)(v50 + 152) + 18) << 16;
          *(unsigned char *)unint64_t v9 = 2;
          *(_DWORD *)(v9 + 1) = v52 | (*(unsigned __int8 *)(v9 + 4) << 24);
          *(void *)(v9 + 8) = 0;
          *(void *)(v9 + 16) = v49;
          goto LABEL_55;
        case 12:
          goto LABEL_58;
        default:
          llvm::MachineInstr::dump((llvm::MachineInstr *)a2);
          __break(1u);
          JUMPOUT(0x1CBA66BF8);
      }
    }
  }
  return result;
}

void sub_1CBA66C40()
{
}

void sub_1CBA66CD8()
{
}

void sub_1CBA66D7C(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  uint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    unsigned int v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    unint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBA66E30(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  unsigned int v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBA66EDC()
{
  return "AGX2 post-RA peephole pass";
}

void sub_1CBA66EEC(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CBA66F48(void *a1, void *a2)
{
  uint64_t v246 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2[2];
  a1[32] = v4;
  a1[31] = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 104))(v4);
  char v227 = 0;
  a1[33] = (*(uint64_t (**)(void))(*(void *)a1[32] + 176))(a1[32]);
  a1[34] = a2[5];
  a1[35] = a2[7];
  int v230 = v234;
  unint64_t v231 = v234;
  uint64_t v232 = 4;
  int v233 = 0;
  unsigned int v229 = &unk_1F25F3610;
  v235[2] = v237;
  v235[3] = v237;
  v235[4] = 4;
  int v236 = 0;
  v235[0] = &unk_1F25F09C0;
  v235[1] = &unk_1F25F0A18;
  v237[4] = &v238;
  uint64_t v238 = &v229;
  v237[5] = 0x400000001;
  a2[91] = v235;
  unint64_t v5 = (unint64_t *)a2[41];
  if (v5 == a2 + 40) {
    goto LABEL_2;
  }
  char v227 = 0;
  uint64_t v7 = (void (*)(llvm::raw_ostream *, llvm::raw_ostream *))off_1F2615510;
  unint64_t v223 = a1;
  do
  {
    unint64_t v8 = v5[6] & 0xFFFFFFFFFFFFFFF8;
    uint64_t v228 = v5 + 6;
    if (v5 + 6 != (unint64_t *)v8)
    {
      if (!v8 || (*(unsigned char *)v8 & 4) == 0)
      {
        while ((*(_WORD *)(v8 + 44) & 4) != 0)
          unint64_t v8 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
      }
      do
      {
        uint64_t v20 = v8;
        unint64_t v21 = v5[7];
        if (v8 != v21)
        {
          unint64_t v8 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
          if ((*(void *)v20 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(unsigned char *)v8 & 4) == 0)
          {
            while ((*(_WORD *)(v8 + 44) & 4) != 0)
              unint64_t v8 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
          }
        }
        uint64_t v22 = *(unsigned __int16 **)(v20 + 16);
        int v23 = *v22;
        if ((v23 - 13) < 5 || v23 == 3) {
          continue;
        }
        unsigned int v9 = v23 - 1;
        if (v9 <= 1 && (*(unsigned char *)(*(void *)(v20 + 32) + 48) & 8) != 0) {
          continue;
        }
        unsigned int v10 = *(unsigned __int16 *)(v20 + 44);
        BOOL v16 = (v10 & 0xC) == 0;
        int v11 = (v10 >> 2) & 1;
        if (v16) {
          LOBYTE(v11) = 1;
        }
        uint64_t v12 = *((void *)v22 + 1);
        if (v11)
        {
          if ((v12 & 0x80000) != 0) {
            continue;
          }
        }
        else
        {
          uint64_t v17 = v20;
          if ((v12 & 0x80000) != 0) {
            continue;
          }
          while ((*(_WORD *)(v17 + 44) & 8) != 0)
          {
            uint64_t v17 = *(void *)(v17 + 8);
            if ((*(unsigned char *)(*(void *)(v17 + 16) + 10) & 8) != 0) {
              goto LABEL_63;
            }
          }
        }
        if (v9 > 1 || (*(unsigned char *)(*(void *)(v20 + 32) + 48) & 0x10) == 0)
        {
          if ((v11 & 1) == 0)
          {
            uint64_t v18 = v20;
            if ((v12 & 0x100000) != 0) {
              continue;
            }
            while ((*(_WORD *)(v18 + 44) & 8) != 0)
            {
              uint64_t v18 = *(void *)(v18 + 8);
              a1 = v223;
              if ((*(unsigned char *)(*(void *)(v18 + 16) + 10) & 0x10) != 0) {
                goto LABEL_63;
              }
            }
            a1 = v223;
            if ((v12 & 0x1000000) != 0) {
              continue;
            }
            uint64_t v19 = v20;
            while ((*(_WORD *)(v19 + 44) & 8) != 0)
            {
              uint64_t v19 = *(void *)(v19 + 8);
              if (*(unsigned char *)(*(void *)(v19 + 16) + 11)) {
                goto LABEL_63;
              }
            }
LABEL_22:
            if (v9 > 1 || (*(unsigned char *)(*(void *)(v20 + 32) + 48) & 1) == 0)
            {
              unsigned int NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(v20);
              if (NumExplicitOperands == *(_DWORD *)(v20 + 40))
              {
                if (NumExplicitOperands)
                {
                  int v14 = *(_DWORD **)(v20 + 32);
                  uint64_t v15 = 32 * NumExplicitOperands;
                  while (1)
                  {
                    BOOL v16 = (*v14 & 0x10000FF) != 0x1000000 || (*v14 & 0x5000000) == 83886080;
                    if (!v16) {
                      break;
                    }
                    v14 += 8;
                    v15 -= 32;
                    if (!v15) {
                      goto LABEL_32;
                    }
                  }
                }
                else
                {
LABEL_32:
                  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v20);
                }
              }
            }
            continue;
          }
          if ((v12 & 0x1100000) == 0) {
            goto LABEL_22;
          }
        }
LABEL_63:
        ;
      }
      while (v20 != v21);
    }
    if (((v5[12] - v5[11]) & 0x7FFFFFFF8) != 0)
    {
      char v224 = 0;
      uint64_t v25 = v5 + 6;
      goto LABEL_79;
    }
    uint64_t v26 = (*(uint64_t (**)(void, void))(**(void **)(v5[4] + 8) + 16))(*(void *)(v5[4] + 8), *(void *)v5[4]);
    unint64_t v27 = v5[6] & 0xFFFFFFFFFFFFFFF8;
    uint64_t v25 = v5 + 6;
    if (v228 == (unint64_t *)v27)
    {
LABEL_78:
      char v224 = 0;
      goto LABEL_79;
    }
    uint64_t v28 = v26;
    uint64_t v29 = 0;
    int v30 = *(unsigned __int8 *)(v28 + 323);
    while (1)
    {
      int v31 = **(unsigned __int16 **)(v27 + 16);
      uint64_t v32 = (llvm::MachineInstr *)v27;
      if (!v30) {
        break;
      }
      if (v31 != 8267)
      {
        if ((v31 - 8269) < 2) {
          goto LABEL_78;
        }
        if ((v31 - 8273) <= 1)
        {
          if (!v29) {
            goto LABEL_78;
          }
          uint64_t v145 = *(void *)(a1[31] + 8);
          BOOL v146 = v31 == 8273;
          uint64_t v147 = 396960;
          unsigned __int16 v148 = 3696;
          goto LABEL_298;
        }
        goto LABEL_76;
      }
LABEL_77:
      unint64_t v27 = *(void *)v27 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v29 = v32;
      if (v228 == (unint64_t *)v27) {
        goto LABEL_78;
      }
    }
    if (v31 == 8268) {
      goto LABEL_77;
    }
    if ((v31 - 8271) < 2) {
      goto LABEL_78;
    }
    if ((v31 - 8275) > 1)
    {
LABEL_76:
      uint64_t v32 = v29;
      goto LABEL_77;
    }
    if (!v29) {
      goto LABEL_78;
    }
    uint64_t v145 = *(void *)(a1[31] + 8);
    BOOL v146 = v31 == 8275;
    uint64_t v147 = 397056;
    unsigned __int16 v148 = 3792;
LABEL_298:
    uint64_t v149 = v148 | 0x60000u;
    if (v146) {
      uint64_t v147 = v149;
    }
    *(void *)(v27 + 16) = v145 + v147;
    llvm::MachineInstr::eraseFromParent(v29);
    char v224 = 1;
LABEL_79:
    int v33 = (uint64_t *)v5[4];
    uint64_t v34 = *v33;
    if (*(unsigned char *)((*(uint64_t (**)(uint64_t, void))(*(void *)v33[1] + 16))(v33[1], *v33) + 316))
    {
      uint64_t v35 = *(llvm::Module **)(v34 + 40);
      unsigned int v241 = "tpp_functions";
      v244[4] = 259;
      uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v35, (const char **)&v241);
      if (NamedMetadata)
      {
        uint64_t v37 = *(uint64_t **)(NamedMetadata + 48);
        uint64_t v38 = *((unsigned int *)v37 + 2);
        if (v38)
        {
          uint64_t v39 = *v37;
          while (*(void *)(*(void *)(*(void *)v39 - 8 * *(unsigned int *)(*(void *)v39 + 8)) + 128) != v34)
          {
            v39 += 8;
            if (!--v38) {
              goto LABEL_85;
            }
          }
          goto LABEL_115;
        }
      }
LABEL_85:
      uint64_t v40 = (uint64_t *)v5[11];
      if (((v5[12] - (void)v40) & 0x7FFFFFFF8) != 8) {
        goto LABEL_115;
      }
      uint64_t v41 = *v40;
      uint64_t v42 = *v40 + 48;
      int v43 = -1;
      uint64_t v44 = v42;
      do
      {
        uint64_t v44 = *(void *)(v44 + 8);
        ++v43;
      }
      while (v44 != v42);
      if (v43 == 1 && **(unsigned __int16 **)(*(void *)(v41 + 56) + 16) - 789 <= 2)
      {
        unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)v5);
        if (v228 != (unint64_t *)FirstTerminator)
        {
          unint64_t v46 = FirstTerminator;
          do
          {
            unint64_t v47 = *(unint64_t **)(v46 + 8);
            uint64_t v48 = *(void *)(*(void *)(v46 + 24) + 32);
            if (v48)
            {
              uint64_t v49 = *(void *)(v48 + 728);
              if (v49)
              {
                uint64_t v50 = *(unint64_t **)(v46 + 8);
                (*(void (**)(uint64_t, unint64_t))(*(void *)v49 + 32))(v49, v46);
                unint64_t v47 = v50;
              }
              uint64_t v51 = *(unsigned int *)(v46 + 40);
              if (v51)
              {
                uint64_t v52 = *(void *)(v46 + 32);
                uint64_t v53 = *(void *)(v48 + 40);
                uint64_t v54 = 32 * v51;
                do
                {
                  if (!*(unsigned char *)v52)
                  {
                    uint64_t v55 = *(unsigned int *)(v52 + 4);
                    if ((v55 & 0x80000000) != 0) {
                      uint64_t v56 = (uint64_t *)(*(void *)(v53 + 24) + 16 * (v55 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      uint64_t v56 = (uint64_t *)(*(void *)(v53 + 272) + 8 * v55);
                    }
                    uint64_t v57 = *v56;
                    uint64_t v59 = *(void *)(v52 + 16);
                    uint64_t v58 = *(void *)(v52 + 24);
                    if (v52 != *v56) {
                      uint64_t v56 = (uint64_t *)(v59 + 24);
                    }
                    *uint64_t v56 = v58;
                    if (v58) {
                      uint64_t v60 = v58;
                    }
                    else {
                      uint64_t v60 = v57;
                    }
                    *(void *)(v60 + 16) = v59;
                    *(void *)(v52 + 16) = 0;
                    *(void *)(v52 + 24) = 0;
                  }
                  v52 += 32;
                  v54 -= 32;
                }
                while (v54);
              }
            }
            *(void *)(v46 + 24) = 0;
            unint64_t v61 = *(unint64_t **)(v46 + 8);
            unint64_t v62 = *(void *)v46 & 0xFFFFFFFFFFFFFFF8;
            unint64_t *v61 = v62 | *v61 & 7;
            *(void *)(v62 + 8) = v61;
            *(void *)v46 &= 7uLL;
            *(void *)(v46 + 8) = 0;
            uint64_t v63 = *(void *)(v5[5] + 32);
            unint64_t v64 = *(void **)(v46 + 32);
            if (v64)
            {
              uint64_t v65 = *(unsigned __int8 *)(v46 + 47);
              unsigned int v66 = (uint64_t *)(v63 + 232);
              if (*(_DWORD *)(v63 + 240) <= v65)
              {
                int v219 = *(void **)(v46 + 32);
                uint64_t v220 = v47;
                sub_1CC34BDE0(v63 + 232, v65 + 1);
                unsigned int v66 = (uint64_t *)(v63 + 232);
                unint64_t v64 = v219;
                unint64_t v47 = v220;
              }
              uint64_t v67 = *v66;
              void *v64 = *(void *)(*v66 + 8 * v65);
              *(void *)(v67 + 8 * v65) = v64;
            }
            *(void *)unint64_t v46 = *(void *)(v63 + 224);
            *(void *)(v63 + 224) = v46;
            unint64_t v46 = (unint64_t)v47;
          }
          while (v47 != v228);
        }
        for (uint64_t i = *(void *)(v41 + 56); i != v42; uint64_t i = *(void *)(i + 8))
        {
          unint64_t v70 = llvm::MachineFunction::CloneMachineInstr(*(llvm::MachineFunction **)(v41 + 32), (const llvm::MachineInstr *)i);
          unint64_t v71 = v70;
          unint64_t v72 = v5[5];
          *(void *)(v70 + 24) = v72;
          uint64_t v73 = *(void *)(v72 + 32);
          uint64_t v74 = *(unsigned int *)(v70 + 40);
          if (v74)
          {
            uint64_t v77 = *(void *)(v70 + 32);
            uint64_t v78 = *(void *)(v73 + 40);
            uint64_t v79 = 32 * v74;
            do
            {
              if (!*(unsigned char *)v77)
              {
                uint64_t v80 = *(unsigned int *)(v77 + 4);
                if ((int)v80 >= 0) {
                  uint64_t v81 = (uint64_t *)(*(void *)(v78 + 272) + 8 * v80);
                }
                else {
                  uint64_t v81 = (uint64_t *)(*(void *)(v78 + 24) + 16 * (v80 & 0x7FFFFFFF) + 8);
                }
                uint64_t v82 = *v81;
                if (*v81)
                {
                  uint64_t v83 = *(void *)(v82 + 16);
                  *(void *)(v82 + 16) = v77;
                  *(void *)(v77 + 16) = v83;
                  if (*(unsigned char *)(v77 + 3))
                  {
                    *(void *)(v77 + 24) = v82;
                  }
                  else
                  {
                    *(void *)(v77 + 24) = 0;
                    uint64_t v81 = (uint64_t *)(v83 + 24);
                  }
                }
                else
                {
                  *(void *)(v77 + 16) = v77;
                  *(void *)(v77 + 24) = 0;
                }
                uint64_t *v81 = v77;
              }
              v77 += 32;
              v79 -= 32;
            }
            while (v79);
          }
          uint64_t v75 = *(void *)(v73 + 728);
          if (v75) {
            (*(void (**)(uint64_t, unint64_t))(*(void *)v75 + 24))(v75, v71);
          }
          unint64_t v76 = *v228 & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v71 = v76 | *(void *)v71 & 7;
          *(void *)(v71 + 8) = v228;
          *(void *)(v76 + 8) = v71;
          *uint64_t v228 = *v228 & 7 | v71;
          if (!i || (*(unsigned char *)i & 4) == 0)
          {
            while ((*(_WORD *)(i + 44) & 8) != 0)
              uint64_t i = *(void *)(i + 8);
          }
        }
        char v68 = 1;
      }
      else
      {
        char v68 = 0;
      }
      a1 = v223;
      uint64_t v25 = v5 + 6;
    }
    else
    {
LABEL_115:
      char v68 = 0;
    }
    unint64_t v84 = *v25 & 0xFFFFFFFFFFFFFFF8;
    if (v25 == (void *)v84)
    {
      char v86 = 0;
      goto LABEL_200;
    }
    unsigned int v241 = (char *)&v243;
    uint64_t v242 = 0x400000000;
    if (!v84 || (*(unsigned char *)v84 & 4) == 0)
    {
      while ((*(_WORD *)(v84 + 44) & 4) != 0)
        unint64_t v84 = *(void *)v84 & 0xFFFFFFFFFFFFFFF8;
    }
    char v221 = v68;
    unsigned int v85 = 0;
    char v86 = 0;
    unint64_t v87 = 0;
    while (2)
    {
      unint64_t v88 = v84;
      unint64_t v84 = *(void *)v84 & 0xFFFFFFFFFFFFFFF8;
      if (!v84 || (*(unsigned char *)v84 & 4) == 0)
      {
        while ((*(_WORD *)(v84 + 44) & 4) != 0)
          unint64_t v84 = *(void *)v84 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v89 = v5[7];
      uint64_t v90 = *(unsigned __int16 **)(v88 + 16);
      int v91 = *v90;
      unsigned int v92 = v91 - 1;
      if ((v91 - 1) > 1 || (*(unsigned char *)(*(void *)(v88 + 32) + 48) & 8) == 0)
      {
        unsigned int v93 = *(unsigned __int16 *)(v88 + 44);
        BOOL v16 = (v93 & 0xC) == 0;
        int v94 = (v93 >> 2) & 1;
        if (v16) {
          LOBYTE(v94) = 1;
        }
        uint64_t v95 = *((void *)v90 + 1);
        if (v94)
        {
          if ((v95 & 0x80000) == 0) {
            goto LABEL_161;
          }
LABEL_164:
          if ((v91 - 489) > 1) {
            goto LABEL_189;
          }
          if (v87)
          {
            if (v85 >= HIDWORD(v242)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)&v241[8 * v85] = v88;
            unsigned int v85 = v242 + 1;
LABEL_193:
            LODWORD(v242) = v85;
          }
          else
          {
            unint64_t v87 = v88;
          }
          goto LABEL_195;
        }
        unint64_t v96 = v88;
        if ((v95 & 0x80000) != 0) {
          goto LABEL_164;
        }
        while ((*(_WORD *)(v96 + 44) & 8) != 0)
        {
          unint64_t v96 = *(void *)(v96 + 8);
          if ((*(unsigned char *)(*(void *)(v96 + 16) + 10) & 8) != 0) {
            goto LABEL_164;
          }
        }
LABEL_161:
        if (v92 <= 1 && (*(unsigned char *)(*(void *)(v88 + 32) + 48) & 0x10) != 0) {
          goto LABEL_189;
        }
        if (v94)
        {
          if ((v95 & 0x1100000) != 0) {
            goto LABEL_164;
          }
        }
        else
        {
          unint64_t v97 = v88;
          if ((v95 & 0x100000) != 0) {
            goto LABEL_164;
          }
          while ((*(_WORD *)(v97 + 44) & 8) != 0)
          {
            unint64_t v97 = *(void *)(v97 + 8);
            if ((*(unsigned char *)(*(void *)(v97 + 16) + 10) & 0x10) != 0) {
              goto LABEL_164;
            }
          }
          if ((v95 & 0x1000000) != 0) {
            goto LABEL_164;
          }
          unint64_t v98 = v88;
          while ((*(_WORD *)(v98 + 44) & 8) != 0)
          {
            unint64_t v98 = *(void *)(v98 + 8);
            if (*(unsigned char *)(*(void *)(v98 + 16) + 11)) {
              goto LABEL_164;
            }
          }
        }
        if (v92 <= 1 && (*(unsigned char *)(*(void *)(v88 + 32) + 48) & 1) != 0) {
          goto LABEL_189;
        }
        goto LABEL_195;
      }
LABEL_189:
      if (v85)
      {
        uint64_t v99 = (llvm::MachineInstr **)v241;
        uint64_t v100 = 8 * v85;
        do
        {
          uint64_t v101 = *v99++;
          llvm::MachineInstr::eraseFromParent(v101);
          v100 -= 8;
        }
        while (v100);
        unsigned int v85 = 0;
        unint64_t v87 = 0;
        char v86 = 1;
        goto LABEL_193;
      }
      unint64_t v87 = 0;
LABEL_195:
      if (v88 != v89) {
        continue;
      }
      break;
    }
    if (v241 != (char *)&v243) {
      free(v241);
    }
    a1 = v223;
    char v68 = v221;
LABEL_200:
    char v102 = v224 | v68 | v86;
    if (!*(unsigned char *)(a1[32] + 327) || *(void *)(a1[35] + 8) == *(void *)(a1[35] + 16)) {
      goto LABEL_305;
    }
    if (v228 == (unint64_t *)(*v228 & 0xFFFFFFFFFFFFFFF8) || v5[8] != v5[9])
    {
      char v103 = 0;
      goto LABEL_304;
    }
    char v225 = v224 | v68 | v86;
    unsigned int v241 = (char *)&v243;
    uint64_t v242 = 0x200000000;
    unint64_t v104 = v5[7];
    if ((unint64_t *)v104 == v228)
    {
LABEL_295:
      char v103 = 0;
      goto LABEL_301;
    }
    unsigned int v105 = 0;
    while (2)
    {
      uint64_t v106 = *(unsigned __int16 **)(v104 + 16);
      int v107 = *v106;
      if ((v107 - 8186) < 2 || v107 == 256)
      {
        if (v105 >= HIDWORD(v242)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)&v241[8 * v105] = v104;
        unsigned int v105 = v242 + 1;
        LODWORD(v242) = v242 + 1;
LABEL_211:
        if ((*(unsigned char *)v104 & 4) == 0)
        {
          while ((*(_WORD *)(v104 + 44) & 8) != 0)
            unint64_t v104 = *(void *)(v104 + 8);
        }
        unint64_t v104 = *(void *)(v104 + 8);
        if ((unint64_t *)v104 == v228) {
          goto LABEL_295;
        }
        continue;
      }
      break;
    }
    if ((~*((_DWORD *)v106 + 4) & 0xD00) == 0
      || (*((void *)v106 + 2) & 0xE00) == 0xE00
      || v107 == 270
      || (v107 - 4094) < 2
      || (*((void *)v106 + 2) & 0x40) != 0)
    {
      goto LABEL_255;
    }
    unsigned int v108 = *(unsigned __int16 *)(v104 + 44);
    BOOL v16 = (v108 & 0xC) == 0;
    int v109 = (v108 >> 2) & 1;
    if (v16) {
      LOBYTE(v109) = 1;
    }
    uint64_t v110 = *((void *)v106 + 1);
    if (v109)
    {
      if ((v110 & 0x1000080) != 0) {
        goto LABEL_255;
      }
LABEL_226:
      if (v107 - 1) <= 1 && (*(unsigned char *)(*(void *)(v104 + 32) + 48)) {
        goto LABEL_255;
      }
      if (v109)
      {
        if ((v110 & 0xA20) != 0) {
          goto LABEL_255;
        }
      }
      else
      {
        unint64_t v113 = v104;
        if ((v110 & 0x200) != 0) {
          goto LABEL_255;
        }
        while ((*(_WORD *)(v113 + 44) & 8) != 0)
        {
          unint64_t v113 = *(void *)(v113 + 8);
          if ((*(unsigned char *)(*(void *)(v113 + 16) + 9) & 2) != 0) {
            goto LABEL_255;
          }
        }
        if ((v110 & 0x20) != 0) {
          goto LABEL_255;
        }
        unint64_t v114 = v104;
        while ((*(_WORD *)(v114 + 44) & 8) != 0)
        {
          unint64_t v114 = *(void *)(v114 + 8);
          if ((*(unsigned char *)(*(void *)(v114 + 16) + 8) & 0x20) != 0) {
            goto LABEL_255;
          }
        }
        if ((v110 & 0x800) != 0) {
          goto LABEL_255;
        }
        unint64_t v115 = v104;
        while ((*(_WORD *)(v115 + 44) & 8) != 0)
        {
          unint64_t v115 = *(void *)(v115 + 8);
          if ((*(unsigned char *)(*(void *)(v115 + 16) + 9) & 8) != 0) {
            goto LABEL_255;
          }
        }
      }
      goto LABEL_211;
    }
    unint64_t v111 = v104;
    if ((v110 & 0x80) == 0)
    {
      while ((*(_WORD *)(v111 + 44) & 8) != 0)
      {
        unint64_t v111 = *(void *)(v111 + 8);
        if ((*(unsigned char *)(*(void *)(v111 + 16) + 8) & 0x80) != 0) {
          goto LABEL_255;
        }
      }
      if ((v110 & 0x1000000) == 0)
      {
        unint64_t v112 = v104;
        while ((*(_WORD *)(v112 + 44) & 8) != 0)
        {
          unint64_t v112 = *(void *)(v112 + 8);
          if (*(unsigned char *)(*(void *)(v112 + 16) + 11)) {
            goto LABEL_255;
          }
        }
        goto LABEL_226;
      }
    }
LABEL_255:
    char v103 = 0;
    if ((unint64_t *)v104 != v228 && v105)
    {
      uint64_t v116 = v241;
      uint64_t v117 = &v241[8 * v105];
      do
      {
        uint64_t v118 = *(void *)v116;
        uint64_t v119 = *(void *)(*(void *)(*(void *)v116 + 24) + 32);
        if (v119)
        {
          uint64_t v120 = *(void *)(v119 + 728);
          if (v120) {
            (*(void (**)(uint64_t, void))(*(void *)v120 + 32))(v120, *(void *)v116);
          }
          uint64_t v121 = *(unsigned int *)(v118 + 40);
          if (v121)
          {
            uint64_t v122 = *(void *)(v118 + 32);
            uint64_t v123 = *(void *)(v119 + 40);
            uint64_t v124 = 32 * v121;
            do
            {
              if (!*(unsigned char *)v122)
              {
                uint64_t v125 = *(unsigned int *)(v122 + 4);
                if ((v125 & 0x80000000) != 0) {
                  uint64_t v126 = (uint64_t *)(*(void *)(v123 + 24) + 16 * (v125 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v126 = (uint64_t *)(*(void *)(v123 + 272) + 8 * v125);
                }
                uint64_t v127 = *v126;
                uint64_t v129 = *(void *)(v122 + 16);
                uint64_t v128 = *(void *)(v122 + 24);
                if (v122 != *v126) {
                  uint64_t v126 = (uint64_t *)(v129 + 24);
                }
                uint64_t *v126 = v128;
                if (v128) {
                  uint64_t v130 = v128;
                }
                else {
                  uint64_t v130 = v127;
                }
                *(void *)(v130 + 16) = v129;
                *(void *)(v122 + 16) = 0;
                *(void *)(v122 + 24) = 0;
              }
              v122 += 32;
              v124 -= 32;
            }
            while (v124);
          }
        }
        unint64_t v131 = *(unint64_t **)(v118 + 8);
        unint64_t v132 = *(void *)v118 & 0xFFFFFFFFFFFFFFF8;
        *unint64_t v131 = v132 | *v131 & 7;
        *(void *)(v132 + 8) = v131;
        *(void *)v118 &= 7uLL;
        *(void *)(v118 + 8) = 0;
        unint64_t v133 = v5[5];
        *(void *)(v118 + 24) = v133;
        uint64_t v134 = *(void *)(v133 + 32);
        uint64_t v135 = *(unsigned int *)(v118 + 40);
        if (v135)
        {
          uint64_t v138 = *(void *)(v118 + 32);
          uint64_t v139 = *(void *)(v134 + 40);
          uint64_t v140 = 32 * v135;
          do
          {
            if (!*(unsigned char *)v138)
            {
              uint64_t v141 = *(unsigned int *)(v138 + 4);
              if ((int)v141 >= 0) {
                uint64_t v142 = (uint64_t *)(*(void *)(v139 + 272) + 8 * v141);
              }
              else {
                uint64_t v142 = (uint64_t *)(*(void *)(v139 + 24) + 16 * (v141 & 0x7FFFFFFF) + 8);
              }
              uint64_t v143 = *v142;
              if (*v142)
              {
                uint64_t v144 = *(void *)(v143 + 16);
                *(void *)(v143 + 16) = v138;
                *(void *)(v138 + 16) = v144;
                if (*(unsigned char *)(v138 + 3))
                {
                  *(void *)(v138 + 24) = v143;
                }
                else
                {
                  *(void *)(v138 + 24) = 0;
                  uint64_t v142 = (uint64_t *)(v144 + 24);
                }
              }
              else
              {
                *(void *)(v138 + 16) = v138;
                *(void *)(v138 + 24) = 0;
              }
              *uint64_t v142 = v138;
            }
            v138 += 32;
            v140 -= 32;
          }
          while (v140);
        }
        uint64_t v136 = *(void *)(v134 + 728);
        if (v136) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v136 + 24))(v136, v118);
        }
        unint64_t v137 = *(void *)v104 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v118 = v137 | *(void *)v118 & 7;
        *(void *)(v118 + 8) = v104;
        *(void *)(v137 + 8) = v118;
        *(void *)unint64_t v104 = *(void *)v104 & 7 | v118;
        v116 += 8;
      }
      while (v116 != v117);
      char v103 = 1;
      a1 = v223;
    }
LABEL_301:
    if (v241 != (char *)&v243) {
      free(v241);
    }
    char v102 = v225;
LABEL_304:
    v102 |= v103;
LABEL_305:
    if (!byte_1EBCBEE18) {
      goto LABEL_411;
    }
    char v226 = v102;
    uint64_t v150 = a1[33];
    uint64_t v243 = 0x600000000;
    unsigned int v241 = (char *)v150;
    uint64_t v242 = (uint64_t)v244;
    int v151 = *(_DWORD *)(v150 + 44);
    int v245 = v151;
    unsigned int v152 = v151 + 63;
    if ((v151 + 63) < 0x40)
    {
      unsigned int v154 = 0;
    }
    else
    {
      uint64_t v153 = v152 >> 6;
      if (v152 >= 0x1C0) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      bzero(v244, 8 * v153);
      unsigned int v154 = v153;
      LODWORD(v243) = v153;
      a1 = v223;
    }
    if ((v151 & 0x3F) != 0) {
      *(void *)&v244[4 * v154 - 4] &= ~(-1 << (v151 & 0x3F));
    }
    uint64_t v155 = v5 + 6;
    if (v154) {
      bzero(v244, 8 * v154);
    }
    uint64_t v156 = (llvm *)llvm::LiveRegUnits::addLiveOuts((llvm::LiveRegUnits *)&v241, (const llvm::MachineBasicBlock *)v5);
    uint64_t v157 = (llvm::Value **)v5[4];
    unint64_t v158 = v5[6] & 0xFFFFFFFFFFFFFFF8;
    if (!v158 || (*(unsigned char *)v158 & 4) == 0)
    {
      while ((*(_WORD *)(v158 + 44) & 4) != 0)
        unint64_t v158 = *(void *)v158 & 0xFFFFFFFFFFFFFFF8;
    }
    while (2)
    {
      if ((void *)v158 != v155)
      {
        long long v159 = *(unsigned __int16 **)(v158 + 16);
        if (*v159 - 13 >= 5)
        {
          uint64_t v160 = *((void *)v159 + 1);
          if ((*(_WORD *)(v158 + 44) & 0xC) != 0 && (*(_WORD *)(v158 + 44) & 4) == 0)
          {
            unint64_t v162 = v158;
            if ((v160 & 0x80) != 0) {
              goto LABEL_335;
            }
            while ((*(_WORD *)(v162 + 44) & 8) != 0)
            {
              unint64_t v162 = *(void *)(v162 + 8);
              if ((*(unsigned char *)(*(void *)(v162 + 16) + 8) & 0x80) != 0) {
                goto LABEL_335;
              }
            }
          }
          else
          {
            if ((v160 & 0x80) == 0) {
              goto LABEL_325;
            }
LABEL_335:
            uint64_t v163 = llvm::dbgs(v156);
            uint64_t v164 = (void *)*((void *)v163 + 4);
            if (*((void *)v163 + 3) - (void)v164 > 0x22uLL)
            {
              qmemcpy(v164, "Registers live over call instance: ", 35);
              *((void *)v163 + 4) += 35;
            }
            else
            {
              uint64_t v163 = llvm::raw_ostream::write(v163, "Registers live over call instance: ", 0x23uLL);
            }
            uint64_t v165 = llvm::dbgs(v163);
            uint64_t v166 = v165;
            unint64_t v167 = (_DWORD *)*((void *)v165 + 4);
            if (*((void *)v165 + 3) - (void)v167 > 3uLL)
            {
              *unint64_t v167 = 540697186;
              *((void *)v165 + 4) += 4;
            }
            else
            {
              llvm::raw_ostream::write(v165, "bb: ", 4uLL);
            }
            uint64_t v168 = (llvm::Value *)v5[2];
            if (v168)
            {
              Name = llvm::Value::getName(v168);
              size_t v171 = v169;
              uint64_t v168 = (llvm::Value *)*((void *)v166 + 4);
              if (v169 <= *((void *)v166 + 3) - (void)v168)
              {
                if (v169)
                {
                  uint64_t v168 = (llvm::Value *)memcpy(v168, Name, v169);
                  *((void *)v166 + 4) += v171;
                }
              }
              else
              {
                uint64_t v168 = llvm::raw_ostream::write(v166, Name, v169);
              }
            }
            int v172 = llvm::dbgs(v168);
            unint64_t v173 = v172;
            uint64_t v174 = *((void *)v172 + 4);
            if ((unint64_t)(*((void *)v172 + 3) - v174) > 9)
            {
              *(_WORD *)(v174 + 8) = 8250;
              *(void *)uint64_t v174 = *(void *)": caller: ";
              *((void *)v172 + 4) += 10;
            }
            else
            {
              llvm::raw_ostream::write(v172, ": caller: ", 0xAuLL);
            }
            uint64_t v176 = llvm::Value::getName(*v157);
            size_t v177 = v175;
            uint64_t v178 = (void *)*((void *)v173 + 4);
            if (v175 <= *((void *)v173 + 3) - (void)v178)
            {
              if (v175)
              {
                uint64_t v178 = memcpy(v178, v176, v175);
                *((void *)v173 + 4) += v177;
              }
            }
            else
            {
              uint64_t v178 = llvm::raw_ostream::write(v173, v176, v175);
            }
            uint64_t v179 = llvm::dbgs((llvm *)v178);
            uint64_t v180 = *((void *)v179 + 4);
            if ((unint64_t)(*((void *)v179 + 3) - v180) > 9)
            {
              *(_WORD *)(v180 + 8) = 8250;
              *(void *)uint64_t v180 = *(void *)": callee: ";
              *((void *)v179 + 4) += 10;
            }
            else
            {
              uint64_t v179 = llvm::raw_ostream::write(v179, ": callee: ", 0xAuLL);
            }
            uint64_t v181 = *(llvm::raw_ostream **)(v158 + 32);
            unsigned int v182 = llvm::dbgs(v179);
            llvm::MachineOperand::print(v181, v182, 0, v150, 0);
            uint64_t v184 = llvm::dbgs(v183);
            uint64_t v185 = *((void *)v184 + 4);
            uint64_t v222 = v157;
            if ((unint64_t)(*((void *)v184 + 3) - v185) > 0xA)
            {
              *(_DWORD *)(v185 + 7) = 540698678;
              *(void *)uint64_t v185 = *(void *)"\n  gpr16h: ";
              *((void *)v184 + 4) += 11;
            }
            else
            {
              uint64_t v184 = llvm::raw_ostream::write(v184, "\n  gpr16h: ", 0xBuLL);
            }
            unsigned int v186 = 0;
            for (uint64_t j = 185; j != 313; ++j)
            {
              if (v241) {
                uint64_t v188 = v241 + 8;
              }
              else {
                uint64_t v188 = 0;
              }
              unint64_t v189 = *(unsigned int *)(*(void *)v188 + 24 * j + 16);
              uint64_t v190 = (_WORD *)(*((void *)v188 + 6) + ((v189 >> 3) & 0x1FFFFFFE));
              __int16 v192 = *v190;
              uint64_t v191 = v190 + 1;
              unsigned __int16 v193 = v192 + (v189 & 0xF) * j;
              while (((*(void *)(v242 + 8 * (v193 >> 6)) >> v193) & 1) == 0)
              {
                int v194 = *v191++;
                v193 += v194;
                if (!v194) {
                  goto LABEL_369;
                }
              }
              uint64_t v195 = llvm::dbgs(v184);
              uint64_t v196 = operator new(0x28uLL);
              *(void *)uint64_t v196 = &unk_1F26154E0;
              v196[2] = j;
              *((void *)v196 + 2) = v150;
              v196[6] = 0;
              *((void *)v196 + 4) = 0;
              int v240 = (llvm *)v196;
              v7((llvm::raw_ostream *)v196, v195);
              uint64_t v197 = (_WORD *)*((void *)v195 + 4);
              if (*((void *)v195 + 3) - (void)v197 > 1uLL)
              {
                *uint64_t v197 = 8236;
                *((void *)v195 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v195, ", ", 2uLL);
              }
              uint64_t v184 = v240;
              if (v240 == (llvm *)v239)
              {
                uint64_t v184 = (llvm *)(*(uint64_t (**)(void *))(v239[0] + 32))(v239);
              }
              else if (v240)
              {
                uint64_t v184 = (llvm *)(*(uint64_t (**)(void))(*(void *)v240 + 40))();
              }
              ++v186;
LABEL_369:
              ;
            }
            uint64_t v198 = llvm::dbgs(v184);
            uint64_t v199 = *((void *)v198 + 4);
            if ((unint64_t)(*((void *)v198 + 3) - v199) > 2)
            {
              *(unsigned char *)(v199 + 2) = 32;
              *(_WORD *)uint64_t v199 = 14880;
              *((void *)v198 + 4) += 3;
            }
            else
            {
              uint64_t v198 = llvm::raw_ostream::write(v198, " : ", 3uLL);
            }
            int v200 = sub_1CD098D14(v198, v186, 0, 0, 0);
            int v201 = llvm::dbgs(v200);
            uint64_t v202 = *((void *)v201 + 4);
            if ((unint64_t)(*((void *)v201 + 3) - v202) > 0xA)
            {
              *(_DWORD *)(v202 + 7) = 540699702;
              *(void *)uint64_t v202 = *(void *)"\n  gpr16l: ";
              *((void *)v201 + 4) += 11;
            }
            else
            {
              int v201 = llvm::raw_ostream::write(v201, "\n  gpr16l: ", 0xBuLL);
            }
            unsigned int v203 = 0;
            for (uint64_t k = 313; k != 441; ++k)
            {
              if (v241) {
                int v205 = v241 + 8;
              }
              else {
                int v205 = 0;
              }
              unint64_t v206 = *(unsigned int *)(*(void *)v205 + 24 * k + 16);
              unint64_t v207 = (_WORD *)(*((void *)v205 + 6) + ((v206 >> 3) & 0x1FFFFFFE));
              __int16 v209 = *v207;
              uint64_t v208 = v207 + 1;
              unsigned __int16 v210 = v209 + (v206 & 0xF) * k;
              while (((*(void *)(v242 + 8 * (v210 >> 6)) >> v210) & 1) == 0)
              {
                int v211 = *v208++;
                v210 += v211;
                if (!v211) {
                  goto LABEL_391;
                }
              }
              uint64_t v212 = llvm::dbgs(v201);
              uint64_t v213 = operator new(0x28uLL);
              *(void *)uint64_t v213 = &unk_1F26154E0;
              v213[2] = k;
              *((void *)v213 + 2) = v150;
              v213[6] = 0;
              *((void *)v213 + 4) = 0;
              int v240 = (llvm *)v213;
              v7((llvm::raw_ostream *)v213, v212);
              uint64_t v214 = (_WORD *)*((void *)v212 + 4);
              if (*((void *)v212 + 3) - (void)v214 > 1uLL)
              {
                *uint64_t v214 = 8236;
                *((void *)v212 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v212, ", ", 2uLL);
              }
              int v201 = v240;
              if (v240 == (llvm *)v239)
              {
                int v201 = (llvm *)(*(uint64_t (**)(void *))(v239[0] + 32))(v239);
              }
              else if (v240)
              {
                int v201 = (llvm *)(*(uint64_t (**)(void))(*(void *)v240 + 40))();
              }
              ++v203;
LABEL_391:
              ;
            }
            uint64_t v215 = llvm::dbgs(v201);
            uint64_t v216 = v215;
            uint64_t v217 = *((void *)v215 + 4);
            if ((unint64_t)(*((void *)v215 + 3) - v217) > 2)
            {
              *(unsigned char *)(v217 + 2) = 32;
              *(_WORD *)uint64_t v217 = 14880;
              *((void *)v215 + 4) += 3;
            }
            else
            {
              llvm::raw_ostream::write(v215, " : ", 3uLL);
            }
            uint64_t v157 = v222;
            sub_1CD098D14(v216, v203, 0, 0, 0);
            uint64_t v218 = (unsigned char *)*((void *)v216 + 4);
            if (*((unsigned char **)v216 + 3) == v218)
            {
              llvm::raw_ostream::write(v216, "\n", 1uLL);
            }
            else
            {
              *uint64_t v218 = 10;
              ++*((void *)v216 + 4);
            }
            a1 = v223;
            uint64_t v155 = v5 + 6;
          }
LABEL_325:
          uint64_t v156 = (llvm *)llvm::LiveRegUnits::stepBackward((llvm::LiveRegUnits *)&v241, (const llvm::MachineInstr *)v158);
        }
        unint64_t v158 = *(void *)v158 & 0xFFFFFFFFFFFFFFF8;
        if (!v158 || (*(unsigned char *)v158 & 4) == 0)
        {
          while ((*(_WORD *)(v158 + 44) & 4) != 0)
            unint64_t v158 = *(void *)v158 & 0xFFFFFFFFFFFFFFF8;
        }
        continue;
      }
      break;
    }
    if ((_WORD *)v242 != v244) {
      free((void *)v242);
    }
    char v102 = v226;
LABEL_411:
    v227 |= v102;
    unint64_t v5 = (unint64_t *)v5[1];
  }
  while (v5 != a2 + 40);
LABEL_2:
  a2[91] = 0;
  sub_1CD3FC494(v235);
  unsigned int v229 = &unk_1F25F0A58;
  if (v231 != v230) {
    free(v231);
  }
  return v227 & 1;
}

void *sub_1CBA68724(void *a1)
{
  *a1 = &unk_1F25F0A58;
  uint64_t v2 = (void *)a1[2];
  if (v2 != (void *)a1[1]) {
    free(v2);
  }
  return a1;
}

void sub_1CBA68778(void *a1)
{
  *a1 = &unk_1F25F0A58;
  uint64_t v2 = (void *)a1[2];
  if (v2 != (void *)a1[1]) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CBA687FC()
{
  v4.n128_u64[0] = (unint64_t)"Show the number of registers live over each call";
  v4.n128_u64[1] = 48;
  char v2 = 0;
  uint64_t v3 = &v2;
  int v1 = 1;
  sub_1CD4130FC((llvm::cl::Option *)&unk_1EBCBED98, "agx2-post-ra-peephole-regs-live-over-calls", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCBED98, &dword_1CB82C000);
}

void sub_1CBA68888()
{
}

void sub_1CBA68924()
{
}

void sub_1CBA689CC(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  int v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    __n128 v4 = a1;
    free(v1);
    a1 = v4;
  }
  char v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    unint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBA68A80(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  char v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  __n128 v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBA68B2C()
{
  return "AGX2 pseudo wait placement pass";
}

uint64_t sub_1CBA68B3C(uint64_t a1, unint64_t a2)
{
  return (a2 >> 2) & 1;
}

uint64_t sub_1CBA68B44(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t sub_1CBA68B50()
{
  llvm::RegisterBank::RegisterBank((llvm::RegisterBank *)&unk_1EBCBEE68, 0, "GPR", 384, (unsigned int *)&unk_1CDB0E7A8, 47);

  return __cxa_atexit((void (*)(void *))sub_1CD413354, &unk_1EBCBEE68, &dword_1CB82C000);
}

uint64_t sub_1CBA68BC4(uint64_t a1, int a2, int a3)
{
  return byte_1CDB0FFD5[181 * byte_1CDB0FF20[a2 - 1] + a3 - 1];
}

uint64_t sub_1CBA68BF0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = byte_1CDB11018[a2 - 1];
  uint64_t v4 = qword_1CDB13C40[2 * v3];
  if (!v4) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v6 = &qword_1CDB13C40[2 * v3 + 2];
  do
  {
    uint64_t v7 = v4 & a3;
    uint64_t v8 = __ROR8__(v7, -*((unsigned char *)v6 - 8));
    if (*((unsigned char *)v6 - 8)) {
      uint64_t v7 = v8;
    }
    result |= v7;
    uint64_t v9 = *v6;
    v6 += 2;
    uint64_t v4 = v9;
  }
  while (v9);
  return result;
}

uint64_t sub_1CBA68C50(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = byte_1CDB11018[a2 - 1];
  if (!qword_1CDB13C40[2 * v3]) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v6 = *(void *)(*(void *)(a1 + 232) + 8 * a2) & a3;
  uint64_t v7 = &qword_1CDB13C40[2 * v3 + 2];
  do
  {
    uint64_t v8 = __ROR8__(v6, *((unsigned char *)v7 - 8));
    if (*((unsigned char *)v7 - 8)) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = v6;
    }
    result |= v9;
    uint64_t v10 = *v7;
    v7 += 2;
  }
  while (v10);
  return result;
}

uint64_t sub_1CBA68CB8(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v3 = (char *)&unk_1CDB110CD + 181 * *(unsigned __int16 *)(*(void *)a2 + 24);
    if (v3[a3 - 1]) {
      return *(void *)(*(void *)(a1 + 240) + 8 * (v3[a3 - 1] - 1));
    }
    else {
      return 0;
    }
  }
  return a2;
}

char *sub_1CBA68CFC(uint64_t a1, uint64_t a2)
{
  return (char *)&unk_1CDB13208 + 8 * *(unsigned __int16 *)(*(void *)a2 + 24);
}

uint64_t sub_1CBA68D14()
{
  return 1;
}

uint64_t sub_1CBA68D1C()
{
  return 2;
}

uint64_t sub_1CBA68D24(uint64_t a1, uint64_t a2, int a3)
{
  return word_1CDB13380[a3];
}

char *sub_1CBA68D34(uint64_t a1, uint64_t a2)
{
  return (char *)&unk_1CDB133B4 + 4 * byte_1CDB13384[*(unsigned __int16 *)(*(void *)a2 + 24)];
}

char *sub_1CBA68D58(uint64_t a1, int a2)
{
  return (char *)&unk_1CDB133B4 + 4 * byte_1CDB133C0[a2];
}

uint64_t sub_1CBA68D74(uint64_t a1)
{
  sub_1CD4139A4(a1);
  *(void *)uint64_t v2 = &unk_1F25F39D8;
  uint64_t v3 = (uint64_t *)(v2 + 280);
  *(void *)(v2 + 280) = v2 + 296;
  *(void *)(v2 + 288) = 0x600000000;
  *(_DWORD *)(v2 + 344) = 0;
  sub_1CB8F8DF4(v2 + 280, *(_DWORD *)(v2 + 16), 0);
  uint64_t v4 = **(unsigned __int16 ****)(*(void *)(a1 + 240) + 72);
  uint64_t v5 = *((unsigned __int16 *)v4 + 10);
  if (*((_WORD *)v4 + 10))
  {
    uint64_t v6 = *v4;
    uint64_t v7 = *v3;
    uint64_t v8 = 2 * v5;
    do
    {
      unsigned int v9 = *v6++;
      *(void *)(v7 + (((unint64_t)v9 >> 3) & 0x1FF8)) |= 1 << v9;
      v8 -= 2;
    }
    while (v8);
  }
  return a1;
}

void *sub_1CBA68E2C(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 255) {
    return &unk_1CDB13AA8;
  }
  else {
    return &unk_1CDB15354;
  }
}

void sub_1CBA68E48(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (void *)(a3 + 16);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = 0x600000000;
  unsigned int v7 = *(_DWORD *)(a1 + 288);
  uint64_t v8 = (const void **)(a1 + 280);
  if (v7) {
    BOOL v9 = v8 == (const void **)a3;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    if (v7 >= 7) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v6, *v8, 8 * *(unsigned int *)(a1 + 288));
    *(_DWORD *)(a3 + 8) = v7;
  }
  *(_DWORD *)(a3 + 64) = *(_DWORD *)(a1 + 344);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2[2] + 176))(a2[2]);
  int v11 = *(llvm::Module **)(*a2 + 40);
  sub_1CD1157F4(v11, 0, (uint64_t)&v222);
  int v12 = (int)v222;
  if (v222 >= 0x80) {
    int v12 = 128;
  }
  if (v223) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 128;
  }
  uint64_t v222 = "agx.reduce.reg.pressure";
  __int16 v224 = 259;
  uint64_t v215 = v11;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v11, &v222);
  if (NamedMetadata)
  {
    uint64_t v15 = *(void *)(*(void *)(***(void ***)(NamedMetadata + 48)
                                - 8 * *(unsigned int *)(***(void ***)(NamedMetadata + 48) + 8))
                    + 128);
    BOOL v16 = (void *)(v15 + 24);
    if (*(_DWORD *)(v15 + 32) >= 0x41u) {
      BOOL v16 = (void *)*v16;
    }
    uint64_t v17 = (void *)*v16;
    if (v13 >= 0x10) {
      int v18 = 16;
    }
    else {
      int v18 = v13;
    }
    if (v17) {
      unsigned int v13 = v18;
    }
  }
  uint64_t v19 = a2[6];
  if (!v19)
  {
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a2[1] + 216))(a2[1], a2 + 16, a2);
    a2[6] = v19;
  }
  BOOL v20 = sub_1CBA65424((uint64_t)a2);
  uint64_t v21 = a2[7];
  int v22 = (*(unsigned __int16 *)(*a2 + 18) >> 4) & 0x3FF;
  BOOL v23 = sub_1CD1111E0(*a2, a2[43]);
  BOOL v24 = 1;
  if (v22 && v22 != 8 && v22 != 255) {
    BOOL v24 = *(unsigned char *)(v21 + 62) != 0;
  }
  int v217 = *(unsigned __int8 *)(v19 + 453);
  if (!v23) {
    goto LABEL_39;
  }
  uint64_t v25 = (uint64_t *)a2[41];
LABEL_29:
  if (v25 == a2 + 40)
  {
LABEL_39:
    int v28 = 0;
  }
  else
  {
    for (uint64_t i = v25[7]; ; uint64_t i = *(void *)(i + 8))
    {
      if ((uint64_t *)i == v25 + 6)
      {
        uint64_t v25 = (uint64_t *)v25[1];
        goto LABEL_29;
      }
      uint64_t v27 = *(void *)(i + 16);
      if ((*(unsigned char *)(v27 + 19) & 2) != 0)
      {
        if (*(unsigned char *)(v27 + 4)) {
          break;
        }
      }
      if ((*(unsigned char *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          uint64_t i = *(void *)(i + 8);
      }
    }
    uint64_t v29 = *(void *)(a1 + 8);
    uint64_t v31 = *(void *)(a1 + 48);
    uint64_t v30 = *(void *)(a1 + 56);
    uint64_t v32 = (unsigned __int16 *)(v30 + (((unint64_t)*(unsigned int *)(v29 + 7624) >> 3) & 0x1FFFFFFE));
    int v34 = *v32;
    int v33 = v32 + 1;
    int v35 = v34 + 317 * (*(_DWORD *)(v29 + 7624) & 0xF);
    int v28 = 1;
    while (1)
    {
      uint64_t v36 = 4 * (unsigned __int16)v35;
      uint64_t v37 = *(unsigned __int16 *)(v31 + v36);
      if (*(_WORD *)(v31 + v36) && v30 != 0) {
        break;
      }
      int v39 = (unsigned __int16)*v33++;
      v35 += v39;
      if (!v39) {
        goto LABEL_55;
      }
    }
    unsigned int v40 = *(unsigned __int16 *)(v31 + 4 * (unsigned __int16)v35 + 2) << 16;
    uint64_t v41 = *(void **)a3;
    for (unsigned int j = *(unsigned __int16 *)(v31 + 4 * (unsigned __int16)v35); ; unsigned int j = v37)
    {
      while (1)
      {
        int v43 = (unsigned __int16 *)(v30 + 2 * *(unsigned int *)(v29 + 24 * v37 + 8));
        do
        {
          v41[(unsigned __int16)j >> 6] |= 1 << j;
          int v44 = *v43++;
          j += v44;
        }
        while (v44);
        uint64_t v37 = HIWORD(v40);
        if (!v37) {
          break;
        }
        unsigned int j = HIWORD(v40);
        v40 >>= 16;
      }
      if (!*v33) {
        break;
      }
      v35 += (unsigned __int16)*v33++;
      uint64_t v45 = (unsigned __int16 *)(v31 + 4 * (unsigned __int16)v35);
      uint64_t v37 = *v45;
      unsigned int v40 = v45[1] << 16;
    }
    int v28 = 1;
  }
LABEL_55:
  uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2[1] + 16))(a2[1], *a2);
  if (*(unsigned char *)(v46 + 318)) {
    unsigned int v47 = 56;
  }
  else {
    unsigned int v47 = 313;
  }
  BOOL v218 = v24;
  uint64_t v216 = v46;
  if (v24)
  {
    if (*(unsigned char *)(v46 + 319)) {
      unsigned int v47 = 56;
    }
  }
  else if ((v20 | v28) != 1)
  {
    goto LABEL_76;
  }
  uint64_t v48 = *(void *)(a1 + 8);
  uint64_t v50 = *(void *)(a1 + 48);
  uint64_t v49 = *(void *)(a1 + 56);
  uint64_t v51 = (unsigned __int16 *)(v49 + (((unint64_t)*(unsigned int *)(v48 + 24 * v47 + 16) >> 3) & 0x1FFFFFFE));
  int v53 = *v51;
  uint64_t v52 = v51 + 1;
  int v54 = v53 + (*(_DWORD *)(v48 + 24 * v47 + 16) & 0xF) * v47;
  while (1)
  {
    uint64_t v55 = 4 * (unsigned __int16)v54;
    uint64_t v56 = *(unsigned __int16 *)(v50 + v55);
    if (*(_WORD *)(v50 + v55) && v49 != 0) {
      break;
    }
    int v58 = (unsigned __int16)*v52++;
    v54 += v58;
    if (!v58) {
      goto LABEL_69;
    }
  }
  unsigned int v85 = *(unsigned __int16 *)(v50 + 4 * (unsigned __int16)v54 + 2) << 16;
  char v86 = *(void **)a3;
  for (unsigned int k = *(unsigned __int16 *)(v50 + 4 * (unsigned __int16)v54); ; unsigned int k = v56)
  {
    while (1)
    {
      unint64_t v88 = (unsigned __int16 *)(v49 + 2 * *(unsigned int *)(v48 + 24 * v56 + 8));
      do
      {
        v86[(unsigned __int16)k >> 6] |= 1 << k;
        int v89 = *v88++;
        k += v89;
      }
      while (v89);
      uint64_t v56 = HIWORD(v85);
      if (!v56) {
        break;
      }
      unsigned int k = HIWORD(v85);
      v85 >>= 16;
    }
    if (!*v52) {
      break;
    }
    v54 += (unsigned __int16)*v52++;
    uint64_t v90 = (unsigned __int16 *)(v50 + 4 * (unsigned __int16)v54);
    uint64_t v56 = *v90;
    unsigned int v85 = v90[1] << 16;
  }
LABEL_69:
  uint64_t v59 = (unsigned __int16 *)(v49 + (((unint64_t)*(unsigned int *)(v48 + 4552) >> 3) & 0x1FFFFFFE));
  int v61 = *v59;
  uint64_t v60 = v59 + 1;
  int v62 = v61 + 189 * (*(_DWORD *)(v48 + 4552) & 0xF);
  while (1)
  {
    uint64_t v63 = 4 * (unsigned __int16)v62;
    uint64_t v64 = *(unsigned __int16 *)(v50 + v63);
    if (*(_WORD *)(v50 + v63) && v49 != 0) {
      break;
    }
    int v66 = (unsigned __int16)*v60++;
    v62 += v66;
    if (!v66) {
      goto LABEL_76;
    }
  }
  unsigned int v91 = *(unsigned __int16 *)(v50 + 4 * (unsigned __int16)v62 + 2) << 16;
  unsigned int v92 = *(void **)a3;
  for (unsigned int m = *(unsigned __int16 *)(v50 + 4 * (unsigned __int16)v62); ; unsigned int m = v64)
  {
    while (1)
    {
      int v94 = (unsigned __int16 *)(v49 + 2 * *(unsigned int *)(v48 + 24 * v64 + 8));
      do
      {
        v92[(unsigned __int16)m >> 6] |= 1 << m;
        int v95 = *v94++;
        m += v95;
      }
      while (v95);
      uint64_t v64 = HIWORD(v91);
      if (!v64) {
        break;
      }
      unsigned int m = HIWORD(v91);
      v91 >>= 16;
    }
    if (!*v60) {
      break;
    }
    v62 += (unsigned __int16)*v60++;
    unint64_t v96 = (unsigned __int16 *)(v50 + 4 * (unsigned __int16)v62);
    uint64_t v64 = *v96;
    unsigned int v91 = v96[1] << 16;
  }
LABEL_76:
  BOOL v219 = v20;
  uint64_t v220 = (uint64_t *)a3;
  if (v13 != 128)
  {
    uint64_t v67 = *(void *)(a1 + 56);
    if (v67)
    {
      uint64_t v68 = *(void *)(a1 + 8);
      unsigned int v214 = v13;
      unsigned __int16 v69 = v13 + 313;
      unint64_t v70 = (unsigned __int16 *)(v67 + 2 * *(unsigned int *)(v68 + 24 * (v13 + 313) + 8));
      unint64_t v71 = *(void **)a3;
      while (1)
      {
        unint64_t v72 = v69;
        uint64_t v73 = v69 >> 6;
        unint64_t v74 = v71[v73];
        if ((v74 >> v69)) {
          goto LABEL_94;
        }
        uint64_t v75 = 0;
        char v76 = v69 & 0x3F;
        uint64_t v77 = *(uint64_t ***)(v10 + 240);
        unint64_t v78 = v72 >> 3;
        do
        {
          if (v72)
          {
            uint64_t v79 = **v77;
            if (v78 < *(unsigned __int16 *)(v79 + 22)
              && ((1 << (v72 & 7)) & *(unsigned __int8 *)(*(void *)(v79 + 8) + v78)) != 0
              && (!v75
               || *v77 != v75
               && ((*(_DWORD *)(v75[1] + ((*(unsigned __int16 *)(v79 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v79 + 24)) & 1) != 0))
            {
              uint64_t v75 = *v77;
            }
          }
          ++v77;
        }
        while (v77 != *(uint64_t ***)(v10 + 248));
        unsigned int v80 = *(unsigned __int16 *)(*(void *)*v75 + 2 * *(unsigned __int16 *)(*v75 + 20) - 2);
        unsigned int v81 = v80 + 1;
        if (v80 + 1 == v72) {
          goto LABEL_94;
        }
        if (v73 == v81 >> 6)
        {
          uint64_t v82 = (1 << v81) + (-1 << v76);
        }
        else
        {
          v71[v73] = v74 | (-1 << v76);
          unsigned int v84 = (v72 + 63) & 0x1FFC0;
          if (v84 + 64 <= v81)
          {
            uint64_t v212 = v68;
            uint64_t v213 = v67;
            memset((char *)v71 + (((v72 + 63) >> 3) & 0x3FF8), 255, (((v80 - v84 - 63) >> 3) & 0x1FFFFFF8) + 8);
            uint64_t v68 = v212;
            uint64_t v67 = v213;
            unsigned int v84 = ((v80 - 63 - ((v72 + 63) & 0x1FFC0)) & 0xFFFFFFC0) + ((v72 + 63) & 0x1FFC0) + 64;
          }
          if (v84 > v80) {
            goto LABEL_94;
          }
          uint64_t v82 = ~(-1 << v81);
          uint64_t v73 = v84 >> 6;
          unint64_t v74 = v71[v73];
        }
        v71[v73] = v74 | v82;
LABEL_94:
        int v83 = *v70++;
        unsigned __int16 v69 = v83 + v72;
        if (!v83)
        {
          unsigned __int16 v97 = v214 + 185;
          unint64_t v98 = (unsigned __int16 *)(v67 + 2 * *(unsigned int *)(v68 + 24 * (v214 + 185) + 8));
          while (1)
          {
            unint64_t v99 = v97;
            uint64_t v100 = v97 >> 6;
            unint64_t v101 = v71[v100];
            if ((v101 >> v97)) {
              goto LABEL_127;
            }
            char v102 = 0;
            char v103 = v97 & 0x3F;
            unint64_t v104 = *(uint64_t ***)(v10 + 240);
            unint64_t v105 = v99 >> 3;
            do
            {
              if (v99)
              {
                uint64_t v106 = **v104;
                if (v105 < *(unsigned __int16 *)(v106 + 22)
                  && ((1 << (v99 & 7)) & *(unsigned __int8 *)(*(void *)(v106 + 8) + v105)) != 0
                  && (!v102
                   || *v104 != v102
                   && ((*(_DWORD *)(v102[1] + ((*(unsigned __int16 *)(v106 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v106 + 24)) & 1) != 0))
                {
                  char v102 = *v104;
                }
              }
              ++v104;
            }
            while (v104 != *(uint64_t ***)(v10 + 248));
            unsigned int v107 = *(unsigned __int16 *)(*(void *)*v102 + 2 * *(unsigned __int16 *)(*v102 + 20) - 2);
            unsigned int v108 = v107 + 1;
            if (v107 + 1 == v99) {
              goto LABEL_127;
            }
            if (v100 == v108 >> 6)
            {
              uint64_t v109 = (1 << v108) + (-1 << v103);
            }
            else
            {
              v71[v100] = v101 | (-1 << v103);
              unsigned int v111 = (v99 + 63) & 0x1FFC0;
              if (v111 + 64 <= v108)
              {
                memset((char *)v71 + (((v99 + 63) >> 3) & 0x3FF8), 255, (((v107 - v111 - 63) >> 3) & 0x1FFFFFF8) + 8);
                unsigned int v111 = ((v107 - 63 - ((v99 + 63) & 0x1FFC0)) & 0xFFFFFFC0) + ((v99 + 63) & 0x1FFC0) + 64;
              }
              if (v111 > v107) {
                goto LABEL_127;
              }
              uint64_t v109 = ~(-1 << v108);
              uint64_t v100 = v111 >> 6;
              unint64_t v101 = v71[v100];
            }
            v71[v100] = v101 | v109;
LABEL_127:
            int v110 = *v98++;
            unsigned __int16 v97 = v110 + v99;
            if (!v110) {
              goto LABEL_133;
            }
          }
        }
      }
    }
  }
LABEL_133:
  unint64_t v112 = (uint64_t *)a3;
  if (v218)
  {
    uint64_t v113 = *(void *)(a1 + 8);
    uint64_t v115 = *(void *)(a1 + 48);
    uint64_t v114 = *(void *)(a1 + 56);
    uint64_t v116 = (unsigned __int16 *)(v114 + (((unint64_t)*(unsigned int *)(v113 + 1600) >> 3) & 0x1FFFFFFE));
    int v118 = *v116;
    uint64_t v117 = v116 + 1;
    int v119 = v118 + 66 * (*(_DWORD *)(v113 + 1600) & 0xF);
    while (1)
    {
      uint64_t v120 = 4 * (unsigned __int16)v119;
      uint64_t v121 = *(unsigned __int16 *)(v115 + v120);
      if (*(_WORD *)(v115 + v120) && v114 != 0) {
        break;
      }
      int v123 = (unsigned __int16)*v117++;
      v119 += v123;
      if (!v123) {
        goto LABEL_141;
      }
    }
    unsigned int v163 = *(unsigned __int16 *)(v115 + 4 * (unsigned __int16)v119 + 2) << 16;
    uint64_t v164 = *(void **)a3;
    for (unsigned int n = *(unsigned __int16 *)(v115 + 4 * (unsigned __int16)v119); ; unsigned int n = v121)
    {
      while (1)
      {
        uint64_t v166 = (unsigned __int16 *)(v114 + 2 * *(unsigned int *)(v113 + 24 * v121 + 8));
        do
        {
          v164[(unsigned __int16)n >> 6] |= 1 << n;
          int v167 = *v166++;
          n += v167;
        }
        while (v167);
        uint64_t v121 = HIWORD(v163);
        if (!v121) {
          break;
        }
        unsigned int n = HIWORD(v163);
        v163 >>= 16;
      }
      if (!*v117) {
        break;
      }
      v119 += (unsigned __int16)*v117++;
      uint64_t v168 = (unsigned __int16 *)(v115 + 4 * (unsigned __int16)v119);
      uint64_t v121 = *v168;
      unsigned int v163 = v168[1] << 16;
    }
LABEL_141:
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2[43] + 592))(a2[43], 102)) {
      unsigned int v124 = 64;
    }
    else {
      unsigned int v124 = 61;
    }
    uint64_t v125 = *(void *)(a1 + 8);
    uint64_t v127 = *(void *)(a1 + 48);
    uint64_t v126 = *(void *)(a1 + 56);
    uint64_t v128 = (unsigned __int16 *)(v126 + (((unint64_t)*(unsigned int *)(v125 + 24 * v124 + 16) >> 3) & 0x1FFFFFFE));
    int v130 = *v128;
    uint64_t v129 = v128 + 1;
    int v131 = v130 + (*(_DWORD *)(v125 + 24 * v124 + 16) & 0xF) * v124;
    while (1)
    {
      uint64_t v132 = 4 * (unsigned __int16)v131;
      uint64_t v133 = *(unsigned __int16 *)(v127 + v132);
      if (*(_WORD *)(v127 + v132) && v126 != 0) {
        break;
      }
      int v135 = (unsigned __int16)*v129++;
      v131 += v135;
      if (!v135) {
        goto LABEL_151;
      }
    }
    unsigned int v169 = *(unsigned __int16 *)(v127 + 4 * (unsigned __int16)v131 + 2) << 16;
    uint64_t v170 = *(void **)a3;
    for (iuint64_t i = *(unsigned __int16 *)(v127 + 4 * (unsigned __int16)v131); ; iuint64_t i = v133)
    {
      while (1)
      {
        int v172 = (unsigned __int16 *)(v126 + 2 * *(unsigned int *)(v125 + 24 * v133 + 8));
        do
        {
          v170[(unsigned __int16)ii >> 6] |= 1 << ii;
          int v173 = *v172++;
          ii += v173;
        }
        while (v173);
        uint64_t v133 = HIWORD(v169);
        if (!v133) {
          break;
        }
        iuint64_t i = HIWORD(v169);
        v169 >>= 16;
      }
      if (!*v129) {
        break;
      }
      v131 += (unsigned __int16)*v129++;
      uint64_t v174 = (unsigned __int16 *)(v127 + 4 * (unsigned __int16)v131);
      uint64_t v133 = *v174;
      unsigned int v169 = v174[1] << 16;
    }
  }
LABEL_151:
  if (*(unsigned char *)(a2[1] + 1688))
  {
    uint64_t v136 = *(llvm::Module **)(*a2 + 40);
    uint64_t v222 = "agx.disable_gin_1102";
    __int16 v224 = 259;
    if (!llvm::Module::getNamedMetadata(v136, &v222))
    {
      uint64_t v222 = "agx.has_stack_access";
      __int16 v224 = 259;
      if (llvm::Module::getNamedMetadata(v215, &v222))
      {
        uint64_t v186 = *(void *)(a1 + 8);
        uint64_t v188 = *(void *)(a1 + 48);
        uint64_t v187 = *(void *)(a1 + 56);
        unint64_t v189 = (unsigned __int16 *)(v187 + (((unint64_t)*(unsigned int *)(v186 + 1600) >> 3) & 0x1FFFFFFE));
        int v191 = *v189;
        uint64_t v190 = v189 + 1;
        int v192 = v191 + 66 * (*(_DWORD *)(v186 + 1600) & 0xF);
        while (1)
        {
          uint64_t v193 = 4 * (unsigned __int16)v192;
          uint64_t v194 = *(unsigned __int16 *)(v188 + v193);
          if (*(_WORD *)(v188 + v193) && v187 != 0) {
            break;
          }
          int v196 = (unsigned __int16)*v190++;
          v192 += v196;
          if (!v196) {
            goto LABEL_153;
          }
        }
        unsigned int v205 = *(unsigned __int16 *)(v188 + 4 * (unsigned __int16)v192 + 2) << 16;
        unint64_t v206 = *(void **)a3;
        for (junsigned int j = *(unsigned __int16 *)(v188 + 4 * (unsigned __int16)v192); ; junsigned int j = v194)
        {
          while (1)
          {
            uint64_t v208 = (unsigned __int16 *)(v187 + 2 * *(unsigned int *)(v186 + 24 * v194 + 8));
            do
            {
              v206[(unsigned __int16)jj >> 6] |= 1 << jj;
              int v209 = *v208++;
              jj += v209;
            }
            while (v209);
            uint64_t v194 = HIWORD(v205);
            if (!v194) {
              break;
            }
            junsigned int j = HIWORD(v205);
            v205 >>= 16;
          }
          if (!*v190) {
            break;
          }
          v192 += (unsigned __int16)*v190++;
          unsigned __int16 v210 = (unsigned __int16 *)(v188 + 4 * (unsigned __int16)v192);
          uint64_t v194 = *v210;
          unsigned int v205 = v210[1] << 16;
        }
      }
    }
  }
LABEL_153:
  if (v217) {
    BOOL v137 = v219;
  }
  else {
    BOOL v137 = 0;
  }
  if (v218 || v137)
  {
    uint64_t v138 = *(void *)(a1 + 8);
    uint64_t v140 = *(void *)(a1 + 48);
    uint64_t v139 = *(void *)(a1 + 56);
    uint64_t v141 = (unsigned __int16 *)(v139 + (((unint64_t)*(unsigned int *)(v138 + 4456) >> 3) & 0x1FFFFFFE));
    int v143 = *v141;
    uint64_t v142 = v141 + 1;
    int v144 = v143 + 185 * (*(_DWORD *)(v138 + 4456) & 0xF);
    while (1)
    {
      uint64_t v145 = 4 * (unsigned __int16)v144;
      unint64_t v146 = *(unsigned __int16 *)(v140 + v145);
      if (*(_WORD *)(v140 + v145) && v139 != 0) {
        break;
      }
      int v148 = (unsigned __int16)*v142++;
      v144 += v148;
      if (!v148) {
        goto LABEL_164;
      }
    }
    LODWORD(v175) = *(unsigned __int16 *)(v140 + 4 * (unsigned __int16)v144 + 2) << 16;
    uint64_t v176 = *(void **)a3;
    while (1)
    {
      int v177 = v146;
      while (1)
      {
        uint64_t v178 = (unsigned __int16 *)(v139 + 2 * *(unsigned int *)(v138 + 24 * v146 + 8));
        do
        {
          v176[(unsigned __int16)v177 >> 6] |= 1 << v177;
          int v179 = *v178++;
          v177 += v179;
        }
        while (v179);
        size_t v175 = (unsigned __int16 *)(v175 >> 16);
        if (!v175) {
          break;
        }
        int v177 = (int)v175;
        unint64_t v146 = (unint64_t)v175;
      }
      if (!*v142) {
        break;
      }
      v144 += (unsigned __int16)*v142++;
      size_t v175 = (unsigned __int16 *)(v140 + 4 * (unsigned __int16)v144);
      unint64_t v146 = *v175;
      LODWORD(v175) = v175[1] << 16;
    }
  }
  else
  {
LABEL_164:
    uint64_t v176 = *(void **)a3;
  }
  *v176 |= 4uLL;
  int v221 = 0;
  double v149 = sub_1CBA9FB30(v216, a2, &v221, (uint64_t)&v222);
  if (HIDWORD(v222))
  {
    uint64_t v150 = a2[6];
    if (!v150)
    {
      uint64_t v150 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, double))(*(void *)a2[1] + 216))(a2[1], a2 + 16, a2, v149);
      a2[6] = v150;
    }
    unint64_t v151 = *(void *)(v150 + 468);
    if ((v151 & 0xFF00000000) == 0)
    {
      uint64_t v197 = (void *)a2[5];
      for (kunsigned int k = (uint64_t *)a2[41]; kk != a2 + 40; kunsigned int k = (uint64_t *)kk[1])
      {
        for (munsigned int m = kk[7]; (uint64_t *)mm != kk + 6; munsigned int m = *(void *)(mm + 8))
        {
          uint64_t v200 = *(unsigned int *)(mm + 40);
          if (v200)
          {
            uint64_t v201 = 32 * v200;
            uint64_t v202 = (int **)(*(void *)(mm + 32) + 16);
            do
            {
              if (*((unsigned char *)v202 - 16) == 12) {
                sub_1CBA6DECC((uint64_t)(v197 + 35), *v202, 0xFFFFFFFF);
              }
              v202 += 4;
              v201 -= 32;
            }
            while (v201);
            if (!mm) {
              goto LABEL_223;
            }
          }
          if ((*(unsigned char *)mm & 4) == 0)
          {
LABEL_223:
            while ((*(_WORD *)(mm + 44) & 8) != 0)
              munsigned int m = *(void *)(mm + 8);
          }
        }
      }
      uint64_t v203 = 0;
      unint64_t v112 = v220;
      while (1)
      {
        unint64_t v151 = (unsigned __int16)word_1CDE6F1CA[v203];
        if ((llvm::MachineRegisterInfo::isPhysRegUsed(v197, (unsigned __int16)word_1CDE6F1CA[v203], 0) & 1) == 0
          && ((*(void *)(*v220 + ((v151 >> 3) & 0x1FF8)) >> v151) & 1) == 0)
        {
          break;
        }
        if (++v203 == 256)
        {
          int v204 = *(unsigned __int8 *)(v150 + 472);
          *(_DWORD *)(v150 + 468) = 0;
          if (!v204) {
            *(unsigned char *)(v150 + 472) = 1;
          }
          return;
        }
      }
      int v211 = *(unsigned __int8 *)(v150 + 472);
      *(_DWORD *)(v150 + 468) = v151;
      if (!v211) {
        *(unsigned char *)(v150 + 472) = 1;
      }
    }
    uint64_t v152 = *(void *)(a1 + 8);
    uint64_t v154 = *(void *)(a1 + 48);
    uint64_t v153 = *(void *)(a1 + 56);
    uint64_t v155 = (unsigned __int16 *)(v153
                              + (((unint64_t)*(unsigned int *)(v152 + 24 * v151 + 16) >> 3) & 0x1FFFFFFE));
    int v157 = *v155;
    uint64_t v156 = v155 + 1;
    int v158 = v157 + (*(_DWORD *)(v152 + 24 * v151 + 16) & 0xF) * v151;
    while (1)
    {
      uint64_t v159 = 4 * (unsigned __int16)v158;
      uint64_t v160 = *(unsigned __int16 *)(v154 + v159);
      if (*(_WORD *)(v154 + v159) && v153 != 0) {
        break;
      }
      int v162 = (unsigned __int16)*v156++;
      v158 += v162;
      if (!v162) {
        return;
      }
    }
    unsigned int v180 = *(unsigned __int16 *)(v154 + 4 * (unsigned __int16)v158 + 2) << 16;
    uint64_t v181 = *v112;
    for (nunsigned int n = *(unsigned __int16 *)(v154 + 4 * (unsigned __int16)v158); ; nunsigned int n = v160)
    {
      while (1)
      {
        unint64_t v183 = (unsigned __int16 *)(v153 + 2 * *(unsigned int *)(v152 + 24 * v160 + 8));
        do
        {
          *(void *)(v181 + 8 * ((unsigned __int16)nn >> 6)) |= 1 << nn;
          int v184 = *v183++;
          nn += v184;
        }
        while (v184);
        uint64_t v160 = HIWORD(v180);
        if (!v160) {
          break;
        }
        nunsigned int n = HIWORD(v180);
        v180 >>= 16;
      }
      if (!*v156) {
        break;
      }
      v158 += (unsigned __int16)*v156++;
      uint64_t v185 = (unsigned __int16 *)(v154 + 4 * (unsigned __int16)v158);
      uint64_t v160 = *v185;
      unsigned int v180 = v185[1] << 16;
    }
  }
}

BOOL sub_1CBA69D60(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 56) + 8) != *(void *)(*(void *)(a2 + 56) + 16);
}

BOOL sub_1CBA69D74(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 56) + 8) != *(void *)(*(void *)(a2 + 56) + 16);
}

void sub_1CBA69D88(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v177 = *MEMORY[0x1E4F143B8];
  int v167 = *(uint64_t **)(*(void *)(a2 + 24) + 32);
  uint64_t v7 = v167[6];
  if (!v7)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v167[1] + 216))(v167[1], v167 + 16, v167);
    v167[6] = v7;
  }
  if (*(unsigned char *)(v7 + 454))
  {
    uint64_t v8 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v167[1] + 16))(v167[1], *v167);
    uint64_t v9 = (*(uint64_t (**)(unsigned char *))(*(void *)v8 + 112))(v8);
    uint64_t v165 = v8;
    uint64_t v168 = (void *)(*(uint64_t (**)(unsigned char *))(*(void *)v8 + 104))(v8);
    uint64_t v163 = a4;
    uint64_t v10 = *(unsigned int *)(*(void *)(a2 + 32) + 32 * a4 + 16);
    int v172 = 0;
    LODWORD(v11) = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, int *))(*(void *)v9 + 232))(v9, v167, v10, &v172);
    int v166 = 0;
    if (!*(unsigned char *)(v167[2] + 381))
    {
      BOOL v12 = (*(_WORD *)(*v167 + 18) & 0x3F70) == 0 || (*(_WORD *)(*v167 + 18) & 0x3FF0) == 4080;
      int v13 = v12;
      int v166 = v13;
    }
    uint64_t v164 = *(void *)(a2 + 24);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v167[43] + 592))(v167[43], 102)) {
      int v14 = 64;
    }
    else {
      int v14 = 61;
    }
    uint64_t v15 = *(unsigned __int16 **)(a2 + 16);
    int v16 = *v15;
    if ((v16 - 1) <= 1 && (*(unsigned char *)(*(void *)(a2 + 32) + 48) & 0x10) != 0)
    {
      LODWORD(v19) = 1;
    }
    else
    {
      __int16 v17 = *(_WORD *)(a2 + 44);
      unint64_t v18 = *((void *)v15 + 1);
      if ((v17 & 0xC) != 0 && (v17 & 4) == 0)
      {
        int v120 = v14;
        uint64_t v121 = a1;
        if ((v18 & 0x100000) != 0)
        {
          LODWORD(v19) = 1;
        }
        else
        {
          uint64_t v122 = a2;
          while (1)
          {
            unsigned int v123 = *(unsigned __int16 *)(v122 + 44);
            LODWORD(v19) = (v123 >> 3) & 1;
            if ((v123 & 8) == 0) {
              break;
            }
            uint64_t v122 = *(void *)(v122 + 8);
            a1 = v121;
            int v14 = v120;
            if ((*(unsigned char *)(*(void *)(v122 + 16) + 10) & 0x10) != 0) {
              goto LABEL_19;
            }
          }
        }
        a1 = v121;
        int v14 = v120;
      }
      else
      {
        uint64_t v19 = (v18 >> 20) & 1;
      }
    }
LABEL_19:
    if (v16 <= 2347)
    {
      uint64_t v150 = a1;
      int v20 = 8;
      switch(v16)
      {
        case 321:
        case 342:
          int v20 = 112;
          goto LABEL_22;
        case 322:
        case 343:
          int v20 = 128;
          goto LABEL_22;
        case 323:
        case 344:
          int v20 = 16;
          goto LABEL_22;
        case 324:
        case 345:
          int v20 = 160;
          goto LABEL_22;
        case 325:
        case 346:
          int v20 = 192;
          goto LABEL_22;
        case 326:
        case 347:
          int v20 = 224;
          goto LABEL_22;
        case 327:
        case 348:
          int v20 = 288;
          goto LABEL_22;
        case 328:
        case 349:
          int v20 = 32;
          goto LABEL_22;
        case 329:
        case 350:
          int v20 = 384;
          goto LABEL_22;
        case 330:
        case 351:
          int v20 = 48;
          goto LABEL_22;
        case 331:
        case 352:
          int v20 = 64;
          goto LABEL_22;
        case 332:
        case 353:
          goto LABEL_22;
        case 333:
        case 354:
          int v20 = 80;
          goto LABEL_22;
        case 334:
        case 355:
          int v20 = 96;
LABEL_22:
          unsigned int v21 = 0;
          int v146 = 0;
          uint64_t v22 = *(void *)(a2 + 32);
          *(void *)uint64_t v161 = a4 + 1;
          int v160 = *(_DWORD *)(v22 + 32 * *(void *)v161 + 16) + v11;
          uint64_t v23 = 2;
          if (!v19) {
            uint64_t v23 = 0;
          }
          int v148 = v14;
          uint64_t v149 = v23;
          unint64_t v24 = *(unsigned int *)(v22 + 32 * v23 + 4);
          uint64_t v159 = v19 ^ 1;
          unsigned int v157 = v24 - 1;
          uint64_t v151 = *(void *)(v22 + 32 * v159 + 16) & 0x6FFLL;
          uint64_t v152 = *(void *)(v22 + 32 * v159 + 16);
          unint64_t v155 = v24 >> 3;
          unsigned int v162 = v24;
          int v154 = 1 << (v24 & 7);
          uint64_t v158 = v19;
          uint64_t v25 = 49;
          if (v151) {
            uint64_t v25 = *(void *)(v22 + 32 * v159 + 16);
          }
          uint64_t v153 = v25;
          int v156 = v20;
          unsigned int v26 = v20;
          char v27 = 1;
          break;
        case 335:
        case 336:
        case 337:
        case 338:
        case 339:
        case 340:
        case 341:
          goto LABEL_164;
        default:
          if ((v16 - 2252) > 3 || v16 == 2253) {
            goto LABEL_164;
          }
          goto LABEL_86;
      }
      while (1)
      {
        int v28 = (uint64_t *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v168 + 184))(v168, v164, a2, a2);
        llvm::MachineInstr::copyImplicitOps((llvm::MachineInstr *)v28, (llvm::MachineFunction *)v167, (const llvm::MachineInstr *)a2);
        uint64_t v174 = 0;
        uint64_t v175 = 0;
        uint64_t v176 = 0;
        LODWORD(v173) = 50331648;
        HIDWORD(v173) = v162;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v28, *(llvm::MachineFunction **)(v28[3] + 32), (const llvm::MachineOperand *)&v173);
        if ((v27 & 1) == 0)
        {
          uint64_t v174 = 0;
          uint64_t v175 = 0;
          uint64_t v176 = 0;
          LODWORD(v173) = 100663296;
          HIDWORD(v173) = v162;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v28, *(llvm::MachineFunction **)(v28[3] + 32), (const llvm::MachineOperand *)&v173);
        }
        unsigned int v30 = v26 - 128;
        if (v26 >= 0x80) {
          break;
        }
        unsigned int v30 = v26 - 96;
        if (v26 >= 0x60)
        {
          if (v157 > 0x79E || (v154 & byte_1CDE7258C[v155]) == 0)
          {
            if ((v21 & 3) != 0) {
              goto LABEL_246;
            }
            uint64_t v94 = v28[4] + 32 * v149;
            unsigned int SubReg = llvm::MCRegisterInfo::getSubReg(v150 + 1, v162, *(_DWORD *)((char *)&unk_1CDB155B4 + (v21 & 0xFFFFFFFC)));
            llvm::MachineOperand::setReg(v94, SubReg);
          }
          if (v151) {
            uint64_t v33 = v152;
          }
          else {
            uint64_t v33 = 114;
          }
          int v31 = v21 + 12;
          unsigned int v32 = 96;
          goto LABEL_37;
        }
        unsigned int v30 = v26 - 64;
        if (v26 >= 0x40)
        {
          if (v157 > 0x71E || (v154 & byte_1CDE70C08[v155]) == 0)
          {
            if (v21) {
              goto LABEL_246;
            }
            uint64_t v105 = v28[4] + 32 * v149;
            unsigned int v106 = llvm::MCRegisterInfo::getSubReg(v150 + 1, v162, dword_1CDB15560[v21 >> 1]);
            llvm::MachineOperand::setReg(v105, v106);
          }
          if (v151) {
            uint64_t v33 = v152;
          }
          else {
            uint64_t v33 = 241;
          }
          int v31 = v21 + 8;
          unsigned int v32 = 64;
          goto LABEL_37;
        }
        unsigned int v30 = v26 - 48;
        if (v26 >= 0x30)
        {
          if (v157 > 0x336 || (v154 & byte_1CDE70324[v155]) == 0)
          {
            if (v21) {
              goto LABEL_246;
            }
            uint64_t v137 = v28[4] + 32 * v149;
            unsigned int v138 = llvm::MCRegisterInfo::getSubReg(v150 + 1, v162, dword_1CDB15508[v21 >> 1]);
            llvm::MachineOperand::setReg(v137, v138);
          }
          if (v151) {
            uint64_t v33 = v152;
          }
          else {
            uint64_t v33 = 113;
          }
          int v31 = v21 + 6;
          unsigned int v32 = 48;
          goto LABEL_37;
        }
        unsigned int v30 = v26 - 32;
        if (v26 >= 0x20)
        {
          if (v157 > 0x236 || (v154 & byte_1CDE6FAA4[v155]) == 0)
          {
            if (v21) {
              goto LABEL_246;
            }
            uint64_t v80 = v150[1];
            uint64_t v81 = v150[7];
            uint64_t v82 = *(unsigned int *)(v80 + 24 * v162 + 4);
            if (*(_WORD *)(v81 + 2 * v82))
            {
              unsigned int v83 = *(unsigned __int16 *)(v81 + 2 * v82) + v162;
              unsigned int v84 = (unsigned __int16 *)(v150[11] + 2 * *(unsigned int *)(v80 + 24 * v162 + 12));
              unsigned int v85 = (unsigned __int16 *)(v81 + 2 * v82 + 2);
              while (dword_1CDB154AC[v21 >> 1] != *v84)
              {
                int v104 = *v85++;
                v83 += v104;
                ++v84;
                if (!v104) {
                  goto LABEL_188;
                }
              }
              unsigned int v86 = (unsigned __int16)v83;
            }
            else
            {
LABEL_188:
              unsigned int v86 = 0;
            }
            llvm::MachineOperand::setReg(v28[4] + 32 * v149, v86);
          }
          int v31 = v21 + 4;
          unsigned int v32 = 32;
          uint64_t v33 = v153;
          goto LABEL_37;
        }
        if (v26 == 16)
        {
          if (v157 > 0x1BE || (v154 & byte_1CDE6F3CA[v155]) == 0)
          {
            uint64_t v124 = v28[4] + 32 * v149;
            unsigned int v125 = llvm::MCRegisterInfo::getSubReg(v150 + 1, v162, (v21 >> 1) + 1);
            llvm::MachineOperand::setReg(v124, v125);
          }
          unsigned int v26 = 0;
          if (v151) {
            uint64_t v33 = v152;
          }
          else {
            uint64_t v33 = 17;
          }
          int v31 = v21 + 2;
          unsigned int v32 = 16;
        }
        else
        {
          if (v26 != 8)
          {
            unsigned int v93 = "Unable to materialize spill!";
            goto LABEL_247;
          }
          if (v151) {
            uint64_t v33 = v152;
          }
          else {
            uint64_t v33 = 16;
          }
          if (v21)
          {
LABEL_246:
            unsigned int v93 = "Unable to materialize spill/reload!";
LABEL_247:
            llvm::report_fatal_error((llvm *)v93, (const llvm::Twine *)1);
          }
          unsigned int v26 = 0;
          int v31 = 1;
          unsigned int v32 = 8;
        }
LABEL_38:
        unsigned int v34 = v21 + v160;
        v29.i32[0] = v33 >> 4;
        uint8x8_t v35 = (uint8x8_t)vcnt_s8(v29);
        v35.i16[0] = vaddlv_u8(v35);
        unsigned __int32 v36 = v35.i32[0];
        unsigned int v37 = (v32 >> 3) / v35.i32[0];
        if (v166)
        {
          if (v146)
          {
            int v139 = v165[318];
            uint64_t v170 = 0;
            BOOL v12 = v139 == 0;
            uint64_t v140 = 108096;
            if (v12) {
              uint64_t v140 = 112704;
            }
            uint64_t v141 = sub_1CB84B030(v164, (uint64_t)v28, &v170, v168[1] + v140, v146);
            int v144 = v142;
            uint64_t v145 = v141;
            LODWORD(v173) = 1;
            uint64_t v174 = 0;
            uint64_t v175 = 0;
            llvm::MachineInstr::addOperand(v142, v141, (const llvm::MachineOperand *)&v173);
            uint64_t v174 = 0;
            uint64_t v175 = 0;
            LODWORD(v173) = 0;
            HIDWORD(v173) = v146;
            uint64_t v176 = 0;
            llvm::MachineInstr::addOperand(v144, v145, (const llvm::MachineOperand *)&v173);
            LODWORD(v173) = 1;
            uint64_t v174 = 0;
            uint64_t v175 = 0;
            llvm::MachineInstr::addOperand(v144, v145, (const llvm::MachineOperand *)&v173);
            char v143 = sub_1CB951190(v33);
            LODWORD(v173) = 1;
            uint64_t v174 = 0;
            uint64_t v175 = v32 >> 3 >> v143;
            llvm::MachineInstr::addOperand(v144, v145, (const llvm::MachineOperand *)&v173);
            if (v170) {
              llvm::MetadataTracking::untrack((uint64_t)&v170, v170);
            }
            unsigned int v119 = v146;
          }
          else
          {
            uint64_t v147 = sub_1CB9520BC((uint64_t)v168, v34, v164, (unint64_t *)v28, v148);
            int v107 = v165[318];
            unsigned int v169 = 0;
            BOOL v12 = v107 == 0;
            uint64_t v108 = 387024;
            if (v12) {
              uint64_t v108 = 389616;
            }
            uint64_t v170 = (unsigned __int8 *)sub_1CB84B030(v164, (uint64_t)v28, &v169, v168[1] + v108, v148);
            size_t v171 = v109;
            LODWORD(v173) = 1;
            uint64_t v174 = 0;
            uint64_t v175 = 0;
            llvm::MachineInstr::addOperand(v109, (llvm::MachineFunction *)v170, (const llvm::MachineOperand *)&v173);
            LODWORD(v173) = 1;
            uint64_t v174 = 0;
            uint64_t v175 = 0;
            llvm::MachineInstr::addOperand(v171, (llvm::MachineFunction *)v170, (const llvm::MachineOperand *)&v173);
            if (v147) {
              int v110 = v148;
            }
            else {
              int v110 = 66;
            }
            unsigned int v111 = sub_1CB89517C((llvm::MachineFunction **)&v170, v110, 8 * (v147 != 0), 0);
            unint64_t v112 = v111[1];
            uint64_t v113 = *v111;
            LODWORD(v173) = 1;
            uint64_t v174 = 0;
            uint64_t v175 = 0;
            llvm::MachineInstr::addOperand(v112, v113, (const llvm::MachineOperand *)&v173);
            unsigned int v114 = sub_1CB951190(v33);
            uint64_t v115 = *v111;
            uint64_t v116 = v111[1];
            LODWORD(v173) = 1;
            uint64_t v174 = 0;
            uint64_t v175 = v114;
            llvm::MachineInstr::addOperand(v116, v115, (const llvm::MachineOperand *)&v173);
            int v118 = *v111;
            uint64_t v117 = v111[1];
            LODWORD(v173) = 1;
            uint64_t v174 = 0;
            uint64_t v175 = 32;
            llvm::MachineInstr::addOperand(v117, v118, (const llvm::MachineOperand *)&v173);
            if (v169) {
              llvm::MetadataTracking::untrack((uint64_t)&v169, v169);
            }
            unsigned int v119 = v148;
            int v146 = v148;
          }
          v28[2] = v168[1]
                 + 48
                 * dword_1CD96F250[32 * (unint64_t)v165[381]
                                               - 1
                                               + 16 * v158
                                               + 4 * (v37 >> 2)
                                               + v36];
          *(void *)(v28[4] + 32 * v159 + 16) = v33 | 0x100;
          llvm::MachineOperand::ChangeToRegister(v28[4] + 32 * v163, v119, 0, 0, v26 == 0, 0, 0, 0);
        }
        else
        {
          if (!v165[381])
          {
            v33 |= 0x100uLL;
            int v38 = v33 & 0xF;
            unsigned int v39 = (v33 >> 12) & 0x7F;
            char v40 = v39 == 2;
            if (v39 == 4) {
              char v40 = 2;
            }
            if (v39) {
              char v41 = v40;
            }
            else {
              char v41 = (v33 >> 9) & 3;
            }
            if (v38 == 2)
            {
              v41 += 2;
            }
            else
            {
              int v42 = 1 << v38;
              if ((v42 & 0xC2) != 0)
              {
                ++v41;
              }
              else if ((v42 & 0x431) == 0)
              {
                char v41 = 2;
              }
            }
            v34 >>= v41;
          }
          v28[2] = v168[1]
                 + 48
                 * dword_1CD96F250[32 * (unint64_t)v165[381]
                                               + 7
                                               + 16 * v158
                                               + 4 * (v37 >> 2)
                                               + v35.u32[0]];
          llvm::MachineOperand::ChangeToImmediate((unsigned int *)(v28[4] + 32 * v163), v34, 0);
          *(void *)(v28[4] + 32 * v159 + 16) = v33;
        }
        llvm::MachineInstr::removeOperand((char *)v28, v161[0]);
        if (!v21 && v32 == v156) {
          goto LABEL_43;
        }
        int v173 = &v175;
        uint64_t v174 = 0x100000000;
        int v61 = v28 + 6;
        unint64_t v60 = v28[6];
        if (v60 >= 8)
        {
          if ((v60 & 7) == 0)
          {
            v28[6] = v60 & 0xFFFFFFFFFFFFFFF8;
            int v62 = v28 + 7;
            goto LABEL_118;
          }
          if ((v28[6] & 7) == 3)
          {
            uint64_t v128 = (int *)(v60 & 0xFFFFFFFFFFFFFFF8);
            if ((v60 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              uint64_t v130 = *v128;
              int v61 = (uint64_t *)(v128 + 2);
              uint64_t v129 = v130;
              if (v130)
              {
                int v62 = &v61[v129];
LABEL_118:
                uint64_t v63 = (8 * v32) | 1;
                do
                {
                  unint64_t MachineMemOperand = llvm::MachineFunction::getMachineMemOperand((uint64_t)v167, *v61, v21, v63);
                  if (v174 >= (unint64_t)HIDWORD(v174)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  v173[v174] = MachineMemOperand;
                  LODWORD(v174) = v174 + 1;
                  ++v61;
                }
                while (v61 != v62);
              }
            }
          }
        }
        llvm::MachineInstr::dropMemRefs((uint64_t)v28, (llvm::MachineFunction *)v167);
        uint64_t v65 = (llvm::MachineMemOperand **)v173;
        if (v174)
        {
          uint64_t v66 = 8 * v174;
          do
          {
            uint64_t v67 = *v65++;
            llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v28, (llvm::MachineFunction *)v167, v67);
            v66 -= 8;
          }
          while (v66);
          uint64_t v65 = (llvm::MachineMemOperand **)v173;
        }
        if (v65 != (llvm::MachineMemOperand **)&v175) {
          free(v65);
        }
LABEL_43:
        char v27 = 0;
        unsigned int v21 = v31;
        if (!v26) {
          goto LABEL_111;
        }
      }
      if (v157 > 0x816 || (v154 & byte_1CDE735A8[v155]) == 0)
      {
        if ((v21 & 3) != 0) {
          goto LABEL_246;
        }
        uint64_t v70 = v150[1];
        uint64_t v71 = v150[7];
        uint64_t v72 = *(unsigned int *)(v70 + 24 * v162 + 4);
        if (*(_WORD *)(v71 + 2 * v72))
        {
          unsigned int v73 = *(unsigned __int16 *)(v71 + 2 * v72) + v162;
          unint64_t v74 = (unsigned __int16 *)(v150[11] + 2 * *(unsigned int *)(v70 + 24 * v162 + 12));
          uint64_t v75 = (unsigned __int16 *)(v71 + 2 * v72 + 2);
          while (*(_DWORD *)((char *)&unk_1CDB155DC + (v21 & 0xFFFFFFFC)) != *v74)
          {
            int v96 = *v75++;
            v73 += v96;
            ++v74;
            if (!v96) {
              goto LABEL_174;
            }
          }
          unsigned int v76 = (unsigned __int16)v73;
        }
        else
        {
LABEL_174:
          unsigned int v76 = 0;
        }
        llvm::MachineOperand::setReg(v28[4] + 32 * v149, v76);
      }
      if (v151) {
        uint64_t v33 = v152;
      }
      else {
        uint64_t v33 = 242;
      }
      int v31 = v21 + 16;
      unsigned int v32 = 128;
LABEL_37:
      unsigned int v26 = v30;
      goto LABEL_38;
    }
    if ((v16 - 2348) > 3 || v16 == 2349)
    {
      if (v16 != 4077 && v16 != 4075)
      {
LABEL_164:
        unsigned int v93 = "Unable to materialize frameindex: invalid opcode!";
        goto LABEL_247;
      }
      if (v8[381]
        && ((int v68 = (*(unsigned __int16 *)(*v167 + 18) >> 4) & 0x3FF) != 0 ? (v69 = v68 == 8) : (v69 = 1),
            v69 || v68 == 255 || *(unsigned char *)(v167[7] + 62)))
      {
        sub_1CB951D60(v168, v11, v164, (unint64_t *)a2, *(_DWORD *)(*(void *)(a2 + 32) + 4));
      }
      else
      {
        uint64_t v77 = *(void *)(a2 + 32);
        if (!v166)
        {
          uint64_t v78 = (int)v11;
          uint64_t v79 = (unsigned int *)(v77 + 32 * a4);
          goto LABEL_144;
        }
        sub_1CB9520BC((uint64_t)v168, v11, v164, (unint64_t *)a2, *(_DWORD *)(v77 + 4));
      }
LABEL_111:
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
      return;
    }
LABEL_86:
    uint64_t v43 = *(void *)(a2 + 32);
    uint64_t v44 = *(void *)(v43 + 112);
    int v45 = v8[381];
    if (v8[381])
    {
      int v46 = (*(unsigned __int16 *)(*v167 + 18) >> 4) & 0x3FF;
      BOOL v47 = v46 == 8 || v46 == 0;
      if (v47 || v46 == 255 || *(unsigned char *)(v167[7] + 62))
      {
        sub_1CB951D60(v168, v11, v164, (unint64_t *)a2, v14);
        llvm::MachineOperand::ChangeToRegister(*(void *)(a2 + 32) + 64, v14, 0, 0, 1, 0, 0, 0);
        return;
      }
    }
    unsigned int v48 = (v44 >> 6) & 7;
    if ((v166 & 1) == 0)
    {
      if ((int)v11 >> v48 << v48 != v11)
      {
        unsigned int v93 = "Unable to materialize frameindex: invalid shift!";
        goto LABEL_247;
      }
      if (v45) {
        uint64_t v11 = v11;
      }
      else {
        uint64_t v11 = ((int)v11 >> v48);
      }
      if ((int)v11 <= 255)
      {
        int v49 = 220;
        if (v16 != 2350 && v16 != 2254)
        {
          if (v16 == 2255 || v16 == 2351) {
            int v49 = 225;
          }
          else {
            int v49 = 214;
          }
        }
        uint64_t v50 = v168[1] + 48 * sub_1CB952700(35, v49, v165);
        int v51 = *(_DWORD *)(v43 + 4);
        uint64_t v52 = *(llvm::MachineFunction **)(v164 + 32);
        int v53 = *(unsigned __int8 **)(a2 + 56);
        uint64_t v170 = v53;
        if (v53) {
          llvm::MetadataTracking::track((uint64_t)&v170, v53, 2);
        }
        int v54 = llvm::MachineFunction::CreateMachineInstr(v52, v50, &v170, 0);
        if (v170) {
          llvm::MetadataTracking::untrack((uint64_t)&v170, v170);
        }
        uint64_t v55 = *(void *)(v164 + 40);
        *((void *)v54 + 3) = v55;
        uint64_t v56 = *(void *)(v55 + 32);
        uint64_t v57 = *((unsigned int *)v54 + 10);
        if (v57)
        {
          uint64_t v97 = *((void *)v54 + 4);
          uint64_t v98 = *(void *)(v56 + 40);
          uint64_t v99 = 32 * v57;
          do
          {
            if (!*(unsigned char *)v97)
            {
              uint64_t v100 = *(unsigned int *)(v97 + 4);
              if ((int)v100 >= 0) {
                unint64_t v101 = (uint64_t *)(*(void *)(v98 + 272) + 8 * v100);
              }
              else {
                unint64_t v101 = (uint64_t *)(*(void *)(v98 + 24) + 16 * (v100 & 0x7FFFFFFF) + 8);
              }
              uint64_t v102 = *v101;
              if (*v101)
              {
                uint64_t v103 = *(void *)(v102 + 16);
                *(void *)(v102 + 16) = v97;
                *(void *)(v97 + 16) = v103;
                if (*(unsigned char *)(v97 + 3))
                {
                  *(void *)(v97 + 24) = v102;
                }
                else
                {
                  *(void *)(v97 + 24) = 0;
                  unint64_t v101 = (uint64_t *)(v103 + 24);
                }
              }
              else
              {
                *(void *)(v97 + 16) = v97;
                *(void *)(v97 + 24) = 0;
              }
              *unint64_t v101 = v97;
            }
            v97 += 32;
            v99 -= 32;
          }
          while (v99);
        }
        uint64_t v58 = *(void *)(v56 + 728);
        if (v58) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v58 + 24))(v58, v54);
        }
        unint64_t v59 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
        *(void *)int v54 = v59 | *(void *)v54 & 7;
        *((void *)v54 + 1) = a2;
        *(void *)(v59 + 8) = v54;
        *(void *)a2 = *(void *)a2 & 7 | (unint64_t)v54;
        uint64_t v174 = 0;
        uint64_t v175 = 0;
        uint64_t v176 = 0;
        LODWORD(v173) = 0x1000000;
        HIDWORD(v173) = v51;
        llvm::MachineInstr::addOperand(v54, v52, (const llvm::MachineOperand *)&v173);
        LODWORD(v173) = 1;
        uint64_t v174 = 0;
        uint64_t v175 = 0;
        llvm::MachineInstr::addOperand(v54, v52, (const llvm::MachineOperand *)&v173);
        LODWORD(v173) = 1;
        uint64_t v174 = 0;
        uint64_t v175 = (int)v11;
        llvm::MachineInstr::addOperand(v54, v52, (const llvm::MachineOperand *)&v173);
        llvm::MachineInstr::addOperand(v54, v52, (const llvm::MachineOperand *)(*(void *)(a2 + 32) + 128));
        if (v16 != 2348 && v16 != 2252) {
          llvm::MachineInstr::addOperand(v54, v52, (const llvm::MachineOperand *)(*(void *)(a2 + 32) + 160));
        }
        llvm::MachineInstr::copyImplicitOps(v54, (llvm::MachineFunction *)v167, (const llvm::MachineInstr *)a2);
        goto LABEL_111;
      }
      int VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(v167[5], (uint64_t)&off_1E66AB080, "", 0);
      uint64_t v88 = 195600;
      if (!v165[318]) {
        uint64_t v88 = 195696;
      }
      unsigned int v89 = VirtualRegister;
      uint64_t v90 = sub_1CB85AA4C(v164, (unint64_t *)a2, (unsigned __int8 **)(a2 + 56), v168[1] + v88, VirtualRegister);
      unsigned int v92 = v91;
      LODWORD(v173) = 1;
      uint64_t v174 = 0;
      uint64_t v175 = 0;
      llvm::MachineInstr::addOperand(v91, v90, (const llvm::MachineOperand *)&v173);
      LODWORD(v173) = 1;
      uint64_t v174 = 0;
      uint64_t v175 = v11;
      llvm::MachineInstr::addOperand(v92, v90, (const llvm::MachineOperand *)&v173);
      llvm::MachineOperand::ChangeToRegister(*(void *)(a2 + 32) + 64, v89, 0, 0, 1, 0, 0, 0);
      uint64_t v79 = (unsigned int *)(*(void *)(a2 + 32) + 96);
      uint64_t v78 = v44 & 0xFFFFFE3F;
LABEL_144:
      llvm::MachineOperand::ChangeToImmediate(v79, v78, 0);
      return;
    }
    sub_1CB9520BC((uint64_t)v168, v11, v164, (unint64_t *)a2, v14);
    llvm::MachineOperand::ChangeToImmediate((unsigned int *)(*(void *)(a2 + 32) + 96), v44 & 0xFFFFFE3F, 0);
    llvm::MachineOperand::ChangeToRegister(*(void *)(a2 + 32) + 64, v14, 0, 0, 1, 0, 0, 0);
    if (v16 != 2252 && v16 != 2348) {
      llvm::MachineOperand::ChangeToImmediate((unsigned int *)(*(void *)(a2 + 32) + 160), ((*(void *)(*(void *)(a2 + 32) + 176) & 0x1C0) + (v48 << 6)) | *(void *)(*(void *)(a2 + 32) + 176) & 0xFFFFFFFFFFFFFE3FLL, 0);
    }
    int v126 = v165[318];
    if (a2)
    {
      uint64_t v127 = a2;
      if ((*(unsigned char *)a2 & 4) != 0)
      {
LABEL_239:
        int v131 = *(unint64_t **)(v127 + 8);
        uint64_t v170 = 0;
        BOOL v12 = v126 == 0;
        uint64_t v132 = 387024;
        if (v12) {
          uint64_t v132 = 389616;
        }
        uint64_t v133 = sub_1CB85AA4C(v164, v131, &v170, v168[1] + v132, *(_DWORD *)(*(void *)(a2 + 32) + 4));
        int v135 = v134;
        LODWORD(v173) = 1;
        uint64_t v174 = 0;
        uint64_t v175 = 0;
        llvm::MachineInstr::addOperand(v134, v133, (const llvm::MachineOperand *)&v173);
        LODWORD(v173) = 1;
        uint64_t v174 = 0;
        uint64_t v175 = 0;
        llvm::MachineInstr::addOperand(v135, v133, (const llvm::MachineOperand *)&v173);
        int v136 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
        uint64_t v174 = 0;
        uint64_t v175 = 0;
        uint64_t v176 = 0;
        LODWORD(v173) = 0x4000000;
        HIDWORD(v173) = v136;
        llvm::MachineInstr::addOperand(v135, v133, (const llvm::MachineOperand *)&v173);
        LODWORD(v173) = 1;
        uint64_t v174 = 0;
        uint64_t v175 = 0;
        llvm::MachineInstr::addOperand(v135, v133, (const llvm::MachineOperand *)&v173);
        LODWORD(v173) = 1;
        uint64_t v174 = 0;
        uint64_t v175 = (v44 >> 6) & 7;
        llvm::MachineInstr::addOperand(v135, v133, (const llvm::MachineOperand *)&v173);
        LODWORD(v173) = 1;
        uint64_t v174 = 0;
        uint64_t v175 = 32;
        llvm::MachineInstr::addOperand(v135, v133, (const llvm::MachineOperand *)&v173);
        if (v170) {
          llvm::MetadataTracking::untrack((uint64_t)&v170, v170);
        }
        return;
      }
    }
    else
    {
      uint64_t v127 = 0;
    }
    while ((*(_WORD *)(v127 + 44) & 8) != 0)
      uint64_t v127 = *(void *)(v127 + 8);
    goto LABEL_239;
  }
}

const __int16 *sub_1CBA6B260(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(*(void *)a2 + 18) & 0x3F70) != 0) {
    uint64_t v2 = (const char *)&unk_1CDB13BFE;
  }
  else {
    uint64_t v2 = ":";
  }
  if ((*(_WORD *)(*(void *)a2 + 18) & 0x3FF0) == 0xFF0) {
    return L"9<PQRSlmnopqrstuvw";
  }
  else {
    return (const __int16 *)v2;
  }
}

uint64_t sub_1CBA6B29C(uint64_t a1, unsigned int a2, unsigned __int16 *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (void *)a7;
  uint64_t v214 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a2;
  llvm::TargetRegisterInfo::getRegAllocationHints(a1, a2, a3, a4, a5, a6, a7);
  if (!v9 || !a8) {
    return 0;
  }
  uint64_t v198 = a5;
  uint64_t v196 = (*(uint64_t (**)(void, void))(**(void **)(a6 + 8) + 16))(*(void *)(a6 + 8), *(void *)a6);
  uint32x4_t v212 = 0u;
  uint32x4_t v213 = 0u;
  uint64_t v16 = v9[31];
  __int16 v17 = (void *)v9[33];
  uint64_t v206 = a1;
  uint64_t v207 = a4;
  uint64_t v201 = a6;
  uint64_t v203 = a8;
  if ((a2 & 0x80000000) != 0) {
    unint64_t v18 = (int **)(*(void *)(v16 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v18 = (int **)(*(void *)(v16 + 272) + 8 * v15);
  }
  uint64_t v19 = *v18;
  if (*v18)
  {
    while (1)
    {
      unsigned int v20 = *v19;
      if ((*v19 & 0x80000000) == 0) {
        break;
      }
      uint64_t v19 = (int *)*((void *)v19 + 3);
      if (!v19) {
        goto LABEL_9;
      }
    }
    uint64_t v30 = v15;
    int v31 = (void *)v9[33];
LABEL_20:
    uint64_t v32 = (v20 >> 8) & 0xFFF;
    if (v32)
    {
      if ((v32 - 25) > 0xB)
      {
        if (v32 > 0x10)
        {
          __int16 v34 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*v17 + 208))(v17, v32, 1);
          __int16 v17 = v31;
          __int16 v33 = v34 - 1;
        }
        else
        {
          __int16 v33 = ((v20 >> 8) & 0xFFF) - 1;
        }
      }
      else
      {
        __int16 v33 = 2 * ((v20 >> 8) & 0xFFF) - 50;
      }
    }
    else
    {
      __int16 v33 = 0;
    }
    for (unint64_t i = *((void *)v19 + 1); ; unint64_t i = *(void *)i & 0xFFFFFFFFFFFFFFF8)
    {
      __int16 v36 = *(_WORD *)(i + 44);
      if ((v36 & 4) == 0) {
        break;
      }
    }
    unsigned int v37 = *(unsigned __int16 **)(i + 16);
    int v38 = *v37;
    if (((v38 - 9) > 0x3C || ((1 << (v38 - 9)) & 0x1000000000000605) == 0)
      && v38 != 0)
    {
      uint64_t v41 = *((void *)v37 + 1);
      if ((v41 & 0x10) == 0 && (v37[8] & 1) == 0)
      {
        if ((v36 & 0xC) != 0)
        {
          unint64_t v42 = i;
          if ((v41 & 0x400) == 0)
          {
            while ((*(_WORD *)(v42 + 44) & 8) != 0)
            {
              unint64_t v42 = *(void *)(v42 + 8);
              if ((*(unsigned char *)(*(void *)(v42 + 16) + 9) & 4) != 0) {
                goto LABEL_45;
              }
            }
            goto LABEL_202;
          }
        }
        else if ((v41 & 0x400) == 0)
        {
          goto LABEL_202;
        }
      }
    }
LABEL_45:
    uint64_t v43 = *(void **)(i + 24);
    uint64_t v44 = v43[8];
    unint64_t v45 = (unint64_t)(v43[9] - v44) >> 3;
    if (!v45
      || v45 == 1
      && ((*(void *)(*(void *)v44 + 96) - *(void *)(*(void *)v44 + 88)) & 0x7FFFFFFF8) == 8)
    {
      goto LABEL_73;
    }
    int v46 = 0;
    unsigned int v47 = *(unsigned char *)(v196 + 318) ? 5 : 11;
    BOOL v48 = 1;
    unint64_t v49 = i;
    while (1)
    {
      uint64_t v50 = *(unsigned __int16 **)(v49 + 16);
      int v51 = *v50;
      BOOL v52 = (v51 - 9) > 0x3C || ((1 << (v51 - 9)) & 0x1000000000000605) == 0;
      BOOL v53 = !v52 || v51 == 0;
      if (!v53 && (v50[4] & 0x10) == 0 && (v50[8] & 1) == 0) {
        break;
      }
      uint64_t v54 = v43[7];
      if (v49 == v54)
      {
        LODWORD(v54) = 1;
        goto LABEL_72;
      }
      unint64_t v49 = *(void *)v49 & 0xFFFFFFFFFFFFFFF8;
      if (!v49 || (*(unsigned char *)v49 & 4) == 0)
      {
        while ((*(_WORD *)(v49 + 44) & 4) != 0)
          unint64_t v49 = *(void *)v49 & 0xFFFFFFFFFFFFFFF8;
      }
      BOOL v48 = ++v46 < v47;
      if (v46 == v47) {
        goto LABEL_72;
      }
    }
    LODWORD(v54) = 0;
LABEL_72:
    if ((v48 & v54 & 1) == 0)
    {
LABEL_73:
      if ((*v19 & 0x1000000) != 0) {
        goto LABEL_202;
      }
    }
    uint64_t v55 = *((void *)v37 + 1);
    if ((v36 & 0xC) == 0 || (v36 & 4) != 0)
    {
      if ((v55 & 0x400) == 0) {
        goto LABEL_83;
      }
    }
    else
    {
      unint64_t v56 = i;
      if ((v55 & 0x400) == 0)
      {
        while ((*(_WORD *)(v56 + 44) & 8) != 0)
        {
          unint64_t v56 = *(void *)(v56 + 8);
          if ((*(unsigned char *)(*(void *)(v56 + 16) + 9) & 4) != 0) {
            goto LABEL_81;
          }
        }
LABEL_83:
        unint64_t v57 = i;
        if ((v36 & 4) != 0)
        {
          unint64_t v57 = i;
          do
            unint64_t v57 = *(void *)v57 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v57 + 44) & 4) != 0);
        }
        uint64_t v58 = v43 + 6;
        unint64_t v59 = *(_DWORD **)(v57 + 32);
        uint64_t v60 = *(unsigned int *)(v57 + 40);
        int v61 = &v59[8 * v60];
        if (!v60)
        {
          unint64_t v120 = *(void *)(v57 + 8);
          if ((void *)v120 == v58)
          {
            unint64_t v57 = (unint64_t)(v43 + 6);
          }
          else
          {
            unint64_t v57 = (unint64_t)(v43 + 6);
            if ((*(_WORD *)(v120 + 44) & 4) != 0)
            {
              while (1)
              {
                unint64_t v121 = v120;
                uint64_t v122 = *(unsigned int *)(v120 + 40);
                if (v122) {
                  break;
                }
                unint64_t v120 = *(void *)(v120 + 8);
                if ((void *)v120 == v58 || (*(_WORD *)(v120 + 44) & 4) == 0)
                {
                  unint64_t v57 = (unint64_t)(v43 + 6);
                  goto LABEL_217;
                }
              }
              unint64_t v57 = v120;
LABEL_217:
              unint64_t v59 = *(_DWORD **)(v121 + 32);
              int v61 = &v59[8 * v122];
              __int16 v17 = v31;
            }
          }
        }
        if (v59 != v61)
        {
          do
          {
            if ((*v59 & 0x10000FF) != 0) {
              goto LABEL_185;
            }
            int v62 = v59[1];
            if (v62 == a2) {
              goto LABEL_185;
            }
            int v63 = (*v59 >> 8) & 0xFFF;
            unsigned int v64 = v59[1];
            if (v62 < 0)
            {
              unsigned int v64 = *(_DWORD *)(v9[35] + 4 * (v62 & 0x7FFFFFFF));
              if (!v64) {
                goto LABEL_185;
              }
              if (v63)
              {
                uint64_t v84 = v17[1];
                uint64_t v85 = v17[7];
                uint64_t v86 = *(unsigned int *)(v84 + 24 * v64 + 4);
                if (!*(_WORD *)(v85 + 2 * v86)) {
                  goto LABEL_185;
                }
                unsigned __int16 v87 = *(_WORD *)(v85 + 2 * v86) + v64;
                uint64_t v88 = (unsigned __int16 *)(v31[11] + 2 * *(unsigned int *)(v84 + 24 * v64 + 12));
                __int16 v17 = v31;
                unsigned int v89 = (unsigned __int16 *)(v85 + 2 * v86 + 2);
                while (v63 != *v88)
                {
                  char v65 = 0;
                  int v90 = *v89++;
                  v87 += v90;
                  ++v88;
                  if (!v90) {
                    goto LABEL_186;
                  }
                }
                unsigned int v64 = v87;
              }
            }
            if (v64 - 1 <= 0x3FFFFFFE)
            {
              char v65 = 0;
              char v66 = 0;
              int v67 = 0;
              unint64_t v68 = i;
              do
              {
                if (v68 == v43[7]) {
                  break;
                }
                unint64_t v68 = *(void *)v68 & 0xFFFFFFFFFFFFFFF8;
                if (!v68 || (*(unsigned char *)v68 & 4) == 0)
                {
                  while ((*(_WORD *)(v68 + 44) & 4) != 0)
                    unint64_t v68 = *(void *)v68 & 0xFFFFFFFFFFFFFFF8;
                }
                BOOL v69 = *(unsigned __int16 **)(v68 + 16);
                int v70 = *v69;
                BOOL v71 = (v70 - 9) > 0x3C
                   || ((1 << (v70 - 9)) & 0x1000000000000605) == 0;
                BOOL v72 = !v71 || v70 == 0;
                if (!v72 && (v69[4] & 0x10) == 0 && (v69[8] & 1) == 0) {
                  break;
                }
                uint64_t v73 = v69[1];
                if (v73)
                {
                  unint64_t v74 = (int *)(*(void *)(v68 + 32) + 4);
                  while (1)
                  {
                    unsigned int v75 = *(v74 - 1);
                    if ((v75 & 0x20000FF) == 0)
                    {
                      int v76 = *v74;
                      if (*v74)
                      {
                        int v77 = (v75 >> 8) & 0xFFF;
                        if (v76 == v62 && v77 == v63)
                        {
                          char v66 = 1;
                          goto LABEL_119;
                        }
                        if (v76 == a2 && v77 == v32) {
                          break;
                        }
                      }
                    }
                    v74 += 8;
                    if (!--v73) {
                      goto LABEL_119;
                    }
                  }
                  char v65 = 1;
                }
LABEL_119:
                ++v67;
              }
              while (v67 != 4);
              __int16 v17 = v31;
              if (v66 & 1) != 0 || (v65) {
                goto LABEL_186;
              }
              unsigned int v80 = v64;
              unint64_t v81 = (unint64_t)v64 >> 3;
              if (v64 > 0x1BF)
              {
                if (v64 > 0x71F) {
                  goto LABEL_185;
                }
                unint64_t v81 = v81;
                int v82 = 1 << (v64 & 7);
              }
              else
              {
                int v82 = 1 << (v64 & 7);
                if ((v82 & byte_1CDE6F3CA[v81]) != 0)
                {
                  __int16 v83 = *(_WORD *)(v31[14] + 2 * v64);
                  goto LABEL_198;
                }
                if (v64 <= 0xB7 && (v82 & byte_1CDE6FE30[v81]) != 0)
                {
                  __int16 v91 = *(_WORD *)(v31[14] + 2 * v64) - v33;
                  if ((*v19 & 0xFFF00) == 0x200 || (++v212.i32[v91 & 7], (*v19 & 0xFFF00) != 0x100))
                  {
                    char v92 = v91 + 1;
                    goto LABEL_199;
                  }
                  goto LABEL_185;
                }
              }
              if ((v82 & byte_1CDE710C6[v81]) != 0)
              {
                uint64_t v93 = v31[1];
                uint64_t v94 = v31[7];
                uint64_t v95 = *(unsigned int *)(v93 + 24 * v64 + 4);
                if (*(_WORD *)(v94 + 2 * v95))
                {
                  unsigned __int16 v96 = *(_WORD *)(v94 + 2 * v95) + v64;
                  uint64_t v97 = (_WORD *)(v31[11] + 2 * *(unsigned int *)(v93 + 24 * v80 + 12));
                  uint64_t v98 = (unsigned __int16 *)(v94 + 2 * v95 + 2);
                  uint64_t v99 = v98;
                  uint64_t v100 = v97;
                  unsigned __int16 v101 = v96;
                  while (*v100 != 26)
                  {
                    int v102 = *v99++;
                    v101 += v102;
                    ++v100;
                    if (!v102)
                    {
                      unsigned int v103 = 0;
                      goto LABEL_150;
                    }
                  }
                  unsigned int v103 = v101;
LABEL_150:
                  while (*v97 != 25)
                  {
                    int v104 = *v98++;
                    v96 += v104;
                    ++v97;
                    if (!v104) {
                      goto LABEL_201;
                    }
                  }
                  unsigned int v105 = v96;
                }
                else
                {
                  unsigned int v103 = 0;
LABEL_201:
                  unsigned int v105 = 0;
                }
                int v106 = (*v19 >> 8) & 0xFFF;
                BOOL v108 = v106 == 1 || v106 == 25;
                if ((((((*v19 >> 8) & 0xFFF) != 0) ^ v108) & 1) == 0) {
                  ++v212.i32[(*(_WORD *)(v31[14] + 2 * v105) - (_BYTE)v33 + 1) & 7];
                }
                BOOL v110 = v106 == 2 || v106 == 25;
                if ((((v106 != 0) ^ v110) & 1) == 0)
                {
                  int v111 = (*(_WORD *)(v31[14] + 2 * v105) - (_BYTE)v33) & 7;
                  ++v212.i32[v111];
                }
                BOOL v113 = v106 == 3 || v106 == 26;
                if ((((v106 != 0) ^ v113) & 1) == 0) {
                  ++v212.i32[(*(_WORD *)(v31[14] + 2 * v103) - (_BYTE)v33 + 1) & 7];
                }
                BOOL v114 = v106 != 0;
                BOOL v115 = v106 == 4 || v106 == 26;
                BOOL v116 = v115;
                if (((v114 ^ v116) & 1) == 0)
                {
                  __int16 v83 = *(_WORD *)(v31[14] + 2 * v103);
LABEL_198:
                  char v92 = v83 - v33;
LABEL_199:
                  char v65 = 0;
                  ++v212.i32[v92 & 7];
                  goto LABEL_186;
                }
              }
            }
LABEL_185:
            char v65 = 0;
LABEL_186:
            v59 += 8;
            if (v59 == v61)
            {
              unint64_t v117 = *(void *)(v57 + 8);
              if ((void *)v117 == v58) {
                break;
              }
              unint64_t v59 = v61;
              unint64_t v57 = (unint64_t)(v43 + 6);
              if ((*(_WORD *)(v117 + 44) & 4) != 0)
              {
                while (1)
                {
                  unint64_t v118 = v117;
                  uint64_t v119 = *(unsigned int *)(v117 + 40);
                  if (v119) {
                    break;
                  }
                  unint64_t v117 = *(void *)(v117 + 8);
                  if ((void *)v117 == v58 || (*(_WORD *)(v117 + 44) & 4) == 0)
                  {
                    unint64_t v57 = (unint64_t)(v43 + 6);
                    goto LABEL_194;
                  }
                }
                unint64_t v57 = v117;
LABEL_194:
                unint64_t v59 = *(_DWORD **)(v118 + 32);
                int v61 = &v59[8 * v119];
              }
            }
          }
          while (!((v59 == v61) | v65 & 1));
        }
LABEL_202:
        uint64_t v15 = v30;
        while (1)
        {
          uint64_t v19 = (int *)*((void *)v19 + 3);
          if (!v19) {
            goto LABEL_9;
          }
          unsigned int v20 = *v19;
          if ((*v19 & 0x80000000) == 0) {
            goto LABEL_20;
          }
        }
      }
    }
LABEL_81:
    ++v212.i32[v33 & 7];
    if (*(unsigned char *)(v196 + 318)) {
      ++v212.i32[((_BYTE)v33 + 1) & 7];
    }
    goto LABEL_83;
  }
LABEL_9:
  uint64_t v21 = 16 * (a2 & 0x7FFFFFFF);
  unint64_t v22 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(v16 + 24) + v21) & 0xFFFFFFFFFFFFFFF8) + 24);
  unint64_t v23 = v22 >> 5;
  int v24 = dword_1CDB0EEC0[v22 >> 5];
  int v25 = 1 << v22;
  if ((v25 & v24) != 0
    || (dword_1CDB0F468[v23] & v25) != 0
    || (dword_1CDB0F968[v23] & v25) != 0
    || (dword_1CDB0FCA0[v23] & v25) != 0
    || (dword_1CDB0FDD0[v23] & v25) != 0
    || (dword_1CDB0FEC0[v23] & v25) != 0
    || (dword_1CDB0FF10[v23] & v25) != 0)
  {
    v212.i32[0] += v212.i32[1];
    v212.i32[1] = v212.i32[0];
    v212.i32[2] += v212.i32[3];
    v212.i32[3] = v212.i32[2];
    v213.i32[0] += v213.i32[1];
    v213.i32[1] = v213.i32[0];
    v213.i32[2] += v213.i32[3];
    v213.i32[3] = v213.i32[2];
  }
  unsigned int v26 = vminvq_u32(vminq_u32(v212, v213));
  unsigned int v27 = vmaxvq_u32(vmaxq_u32(v213, v212));
  int v209 = v211;
  uint64_t v210 = 0x400000000;
  uint64_t v28 = v9[31];
  if ((a2 & 0x80000000) != 0) {
    int8x8_t v29 = (int **)(*(void *)(v28 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    int8x8_t v29 = (int **)(*(void *)(v28 + 272) + 8 * v15);
  }
  unsigned int v123 = v26;
  unsigned int v124 = v27;
  unsigned int v125 = *v29;
  if (*v29)
  {
    uint64_t v126 = v9[33];
    while (1)
    {
      unsigned int v127 = *v125;
      if ((*v125 & 0x80000000) == 0) {
        break;
      }
      unsigned int v125 = (int *)*((void *)v125 + 3);
      if (!v125) {
        goto LABEL_223;
      }
    }
    unsigned int v194 = v27;
    uint64_t v199 = 16 * (a2 & 0x7FFFFFFF);
LABEL_225:
    for (unint64_t j = *((void *)v125 + 1); ; unint64_t j = *(void *)j & 0xFFFFFFFFFFFFFFF8)
    {
      __int16 v131 = *(_WORD *)(j + 44);
      if ((v131 & 4) == 0) {
        break;
      }
    }
    if ((*(unsigned char *)(*(void *)(j + 16) + 20) & 0x10) != 0)
    {
      unsigned int v132 = (v127 >> 8) & 0xFFF;
      if (v132)
      {
        uint64_t v133 = *(unsigned __int16 *)(*(void *)(v126 + 96) + 4 * v132 + 2);
      }
      else
      {
        uint64_t v134 = v28;
        uint64_t RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(v126, v125[1], v28);
        uint64_t v28 = v134;
        uint64_t v21 = v199;
        uint64_t v133 = RegSizeInBits;
        __int16 v131 = *(_WORD *)(j + 44);
      }
      unint64_t v136 = j;
      if ((v131 & 4) != 0)
      {
        unint64_t v136 = j;
        do
          unint64_t v136 = *(void *)v136 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v136 + 44) & 4) != 0);
      }
      uint64_t v137 = *(void *)(j + 24) + 48;
      unsigned int v138 = *(unsigned int **)(v136 + 32);
      uint64_t v139 = *(unsigned int *)(v136 + 40);
      uint64_t v140 = &v138[8 * v139];
      if (!v139)
      {
        unint64_t v159 = *(void *)(v136 + 8);
        if (v159 == v137)
        {
          unint64_t v136 = v137;
        }
        else
        {
          unint64_t v136 = v137;
          if ((*(_WORD *)(v159 + 44) & 4) != 0)
          {
            while (1)
            {
              unint64_t v160 = v159;
              uint64_t v161 = *(unsigned int *)(v159 + 40);
              if (v161) {
                break;
              }
              unint64_t v159 = *(void *)(v159 + 8);
              if (v159 == v137 || (*(_WORD *)(v159 + 44) & 4) == 0)
              {
                unint64_t v136 = v137;
                goto LABEL_270;
              }
            }
            unint64_t v136 = v159;
LABEL_270:
            unsigned int v138 = *(unsigned int **)(v160 + 32);
            uint64_t v140 = &v138[8 * v161];
            uint64_t v21 = v199;
          }
        }
      }
      if (v138 == v140) {
        goto LABEL_256;
      }
      int v191 = v9;
      unsigned int v192 = v123;
      do
      {
        unint64_t v141 = *v138;
        if (!*v138 && ((v141 | v127) & 0x1000000) != 0)
        {
          unsigned int v142 = v138[1];
          unsigned int v143 = *(_DWORD *)(v9[35] + 4 * (v142 & 0x7FFFFFFF));
          if (v143)
          {
            uint64_t v144 = (v141 >> 8) & 0xFFF;
            if (v144)
            {
              int v145 = *(unsigned __int16 *)(*(void *)(v126 + 96) + 4 * v144 + 2);
            }
            else
            {
              uint64_t v146 = v126;
              uint64_t v147 = v126;
              uint64_t v148 = v28;
              uint64_t v149 = v133;
              int v145 = llvm::TargetRegisterInfo::getRegSizeInBits(v146, v142, v28);
              uint64_t v133 = v149;
              uint64_t v28 = v148;
              uint64_t v126 = v147;
              unsigned int v123 = v192;
              uint64_t v9 = v191;
              uint64_t v21 = v199;
            }
            unsigned __int8 v150 = v133 == v145;
            if (v210 >= HIDWORD(v210))
            {
              unsigned int v155 = v143;
              uint64_t v156 = v126;
              uint64_t v157 = v28;
              uint64_t v158 = v133;
              sub_1CD413CEC((uint64_t)&v209, v155, v150);
              uint64_t v133 = v158;
              uint64_t v28 = v157;
              uint64_t v126 = v156;
              unsigned int v123 = v192;
              uint64_t v21 = v199;
            }
            else
            {
              uint64_t v151 = (char *)v209 + 8 * v210;
              *(_DWORD *)uint64_t v151 = v143;
              v151[4] = v150;
              LODWORD(v210) = v210 + 1;
            }
          }
        }
        v138 += 8;
        if (v138 == v140)
        {
          unint64_t v152 = *(void *)(v136 + 8);
          if (v152 == v137) {
            break;
          }
          unsigned int v138 = v140;
          unint64_t v136 = v137;
          if ((*(_WORD *)(v152 + 44) & 4) != 0)
          {
            while (1)
            {
              unint64_t v153 = v152;
              uint64_t v154 = *(unsigned int *)(v152 + 40);
              if (v154) {
                break;
              }
              unint64_t v152 = *(void *)(v152 + 8);
              if (v152 == v137 || (*(_WORD *)(v152 + 44) & 4) == 0)
              {
                unint64_t v136 = v137;
                goto LABEL_252;
              }
            }
            unint64_t v136 = v152;
LABEL_252:
            unsigned int v138 = *(unsigned int **)(v153 + 32);
            uint64_t v140 = &v138[8 * v154];
          }
        }
      }
      while (v138 != v140);
    }
LABEL_256:
    while (1)
    {
      unsigned int v125 = (int *)*((void *)v125 + 3);
      if (!v125) {
        break;
      }
      unsigned int v127 = *v125;
      if ((*v125 & 0x80000000) == 0) {
        goto LABEL_225;
      }
    }
    BOOL v128 = v210 != 0;
    int v129 = 2 * v128;
    unsigned int v124 = v194;
  }
  else
  {
LABEL_223:
    BOOL v128 = 0;
    int v129 = 0;
  }
  unsigned int v200 = v124 - v123;
  unsigned int v162 = v198;
  uint64_t v164 = a3;
  uint64_t v163 = v206;
  if (v124 != v123 || v128)
  {
    if (v123 < 2 || v200 > v123 >> 1)
    {
      if (v128) {
        int v166 = 2 * (byte_1EBCBF010 != 0);
      }
      else {
        int v166 = v129;
      }
      if (v124 == v123) {
        int v165 = 1;
      }
      else {
        int v165 = v166;
      }
LABEL_284:
      uint64_t v167 = *(void *)(*(void *)(*(void *)(v201 + 40) + 24) + v21);
      if (v200 <= 0xF) {
        unsigned int v168 = 0;
      }
      else {
        unsigned int v168 = v200 >> 1;
      }
      uint64_t v169 = (*(uint64_t (**)(void))(**(void **)(v201 + 16) + 176))(*(void *)(v201 + 16));
      if (v207)
      {
        unsigned __int32 v202 = v168 + v123;
        uint64_t v208 = &a3[v207];
        BOOL v170 = *(unsigned char *)(v196 + 323) == 0;
        if (*(unsigned char *)(v196 + 323)) {
          int v171 = -16;
        }
        else {
          int v171 = -8;
        }
        int v195 = (*(_DWORD *)(*(void *)(v169 + 264)
                          + 24
                          * (*(unsigned __int16 *)(*(void *)(v167 & 0xFFFFFFFFFFFFFFF8) + 24)
                           + *(_DWORD *)(v169 + 272)
                           * ((*(void *)(v169 + 248) - *(void *)(v169 + 240)) >> 3))
                          + 4) >> 4)
             - 1;
        int v197 = v171;
        int v172 = (void *)(v169 + 8);
        uint64_t v173 = 8;
        if (v170) {
          uint64_t v173 = 4;
        }
        uint64_t v193 = v173;
        uint64_t v174 = 0xFFFFFFFFLL;
        while (1)
        {
          uint64_t v175 = *v164;
          unsigned int v176 = *(unsigned __int16 *)(*(void *)(v163 + 112) + 2 * v175);
          if (v165 == 1 || v176 < 0x40)
          {
            uint64_t v177 = v174;
          }
          else
          {
            if (llvm::LiveRegMatrix::isPhysRegUsed(v203, *v164)) {
              goto LABEL_308;
            }
            uint64_t v177 = ((v195 + v176) & v197) >> 1;
            if (v177 >= v174) {
              uint64_t v178 = v174;
            }
            else {
              uint64_t v178 = v177;
            }
            if (v177 >= v174 || v200 > 3)
            {
              uint64_t v174 = v178;
LABEL_314:
              if (v177 != v174)
              {
                if (!v165) {
                  goto LABEL_344;
                }
                int v165 = 1;
LABEL_317:
                if (v210)
                {
                  unint64_t v183 = (uint64_t *)v209;
                  uint64_t v184 = 8 * v210;
                  while (1)
                  {
                    uint64_t v185 = *v183;
                    BOOL v186 = *v183 != v175 || (*v183 & 0xFF00000000) == 0;
                    if (v186
                      && (v175 == v185
                       || (v175 - 1) <= 0x3FFFFFFE
                       && (v185 - 1) <= 0x3FFFFFFE
                       && llvm::MCRegisterInfo::regsOverlap(v172, v175, *v183)))
                    {
                      break;
                    }
                    ++v183;
                    v184 -= 8;
                    if (!v184)
                    {
                      uint64_t v180 = 128;
                      uint64_t v163 = v206;
                      goto LABEL_331;
                    }
                  }
                  uint64_t v163 = v206;
                  goto LABEL_340;
                }
                uint64_t v180 = 128;
                goto LABEL_331;
              }
            }
            else
            {
              unsigned int v205 = v164;
              unsigned int v181 = v177 + 56;
              uint64_t v182 = v193;
              while (!llvm::LiveRegMatrix::isPhysRegUsed(v203, v181))
              {
                ++v181;
                if (!--v182)
                {
                  unsigned int v162 = v198;
                  uint64_t v164 = v205;
                  uint64_t v163 = v206;
                  goto LABEL_314;
                }
              }
              unsigned int v162 = v198;
              uint64_t v164 = v205;
              uint64_t v163 = v206;
            }
          }
          uint64_t v174 = v177;
          if (v165 == 1) {
            goto LABEL_317;
          }
LABEL_308:
          if (v212.i32[v176 & 7] > v202) {
            goto LABEL_340;
          }
          if (v165) {
            goto LABEL_317;
          }
          uint64_t v180 = 32;
LABEL_331:
          uint64_t v187 = v162[1];
          if ((unint64_t)(v187 + 1) > v162[2]) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(_WORD *)(*v162 + 2 * v187) = v175;
          uint64_t v188 = v162[1] + 1;
          v162[1] = v188;
          if (v188 == v180) {
            goto LABEL_344;
          }
          if (v188 == 32 && v165 == 2) {
            int v165 = 1;
          }
LABEL_340:
          if (++v164 == v208) {
            goto LABEL_344;
          }
        }
      }
      goto LABEL_344;
    }
    if (v124 == v123 || v129 != 0)
    {
      int v165 = 1;
      goto LABEL_284;
    }
  }
LABEL_344:
  if (v209 != v211) {
    free(v209);
  }
  return 0;
}

uint64_t sub_1CBA6C2C0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *(void *)(*(void *)(a2 + 24) + 32);
  uint64_t v13 = *(void *)(v12 + 40);
  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(v12 + 16) + 176))(*(void *)(v12 + 16));
  uint64_t v15 = *(void *)(v14 + 264);
  int v16 = *(_DWORD *)(v14 + 272) * ((*(void *)(v14 + 248) - *(void *)(v14 + 240)) >> 3);
  if ((*(_DWORD *)(v15 + 24 * (v16 + *(unsigned __int16 *)(*(void *)a5 + 24)) + 4) & 0xFFFFFFF8) == 0x10
    && (*(_DWORD *)(v15 + 24 * (v16 + *(unsigned __int16 *)(*(void *)a3 + 24)) + 4) & 0xFFFFFFF8) == 0x20)
  {
    uint64_t v17 = *(unsigned int *)(*(void *)(a2 + 32) + 4);
    unint64_t v18 = (uint64_t *)((v17 & 0x80000000) != 0
                    ? *(void *)(v13 + 24) + 16 * (v17 & 0x7FFFFFFF) + 8
                    : *(void *)(v13 + 272) + 8 * v17);
    uint64_t v19 = *v18;
    if (*v18)
    {
      while ((*(unsigned char *)(v19 + 3) & 1) != 0)
      {
        uint64_t v19 = *(void *)(v19 + 24);
        if (!v19) {
          goto LABEL_8;
        }
      }
      uint64_t v144 = *(void *)(v19 + 8);
LABEL_225:
      if ((~*(_DWORD *)(*(void *)(v144 + 16) + 16) & 0x800200) == 0)
      {
        int v145 = *(llvm::MachineBasicBlock **)(v144 + 24);
        unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v145);
        if ((llvm::MachineBasicBlock *)((char *)v145 + 48) != (llvm::MachineBasicBlock *)FirstTerminator
          && **(_WORD **)(FirstTerminator + 16) == 288)
        {
          return 0;
        }
      }
      uint64_t v147 = *(void *)(v19 + 8);
      while (1)
      {
        uint64_t v19 = *(void *)(v19 + 24);
        if (!v19) {
          break;
        }
        if ((*(unsigned char *)(v19 + 3) & 1) == 0)
        {
          uint64_t v144 = *(void *)(v19 + 8);
          if (v144 != v147) {
            goto LABEL_225;
          }
        }
      }
    }
  }
LABEL_8:
  uint64_t v20 = *(void *)(a2 + 32);
  uint64_t v21 = *(unsigned int *)(v20 + 4);
  unint64_t v342 = v346;
  BOOL v343 = v346;
  uint64_t v344 = 8;
  int v345 = 0;
  uint64_t v339 = 0;
  int32x2_t v340 = 0;
  unsigned int v341 = 0;
  uint64_t v336 = 0;
  uint64_t v337 = 0;
  unsigned int v338 = 0;
  uint64_t v22 = *(unsigned int *)(v20 + 36);
  unint64_t v23 = v21 & 0x7FFFFFFF;
  unint64_t v24 = *(unsigned int *)(a8 + 416);
  BOOL v57 = v23 >= v24;
  unint64_t v25 = v23 - v24;
  unint64_t v323 = v23;
  uint64_t v324 = a3;
  if (v57)
  {
    sub_1CB9153B8(a8 + 408, v25 + 1, *(void *)(a8 + 424));
LABEL_509:
    operator new();
  }
  uint64_t v330 = *(void *)(*(void *)(a8 + 408) + 8 * v23);
  if (!v330) {
    goto LABEL_509;
  }
  unint64_t v328 = a2;
  uint64_t v329 = v22;
  unint64_t v322 = (void *)(a8 + 408);
  uint64_t v326 = a5;
  if ((v21 & 0x80000000) != 0) {
    unsigned int v26 = (uint64_t *)(*(void *)(v13 + 24) + 16 * v23 + 8);
  }
  else {
    unsigned int v26 = (uint64_t *)(*(void *)(v13 + 272) + 8 * v21);
  }
  uint64_t v27 = *v26;
  if (!*v26) {
    goto LABEL_15;
  }
  while ((*(unsigned char *)(v27 + 3) & 1) != 0)
  {
    uint64_t v27 = *(void *)(v27 + 24);
    if (!v27) {
      goto LABEL_15;
    }
  }
  uint64_t v29 = *(void *)(v27 + 8);
LABEL_18:
  if (!sub_1CBA6DC6C(v29)) {
    goto LABEL_183;
  }
  __int16 v30 = *(_WORD *)(v29 + 44);
  unint64_t v31 = v29;
  if ((v30 & 4) != 0)
  {
    do
      unint64_t v31 = *(void *)v31 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v31 + 44) & 4) != 0);
  }
  uint64_t v32 = v29;
  if ((v30 & 8) != 0)
  {
    do
      uint64_t v32 = *(void *)(v32 + 8);
    while ((*(_WORD *)(v32 + 44) & 8) != 0);
  }
  unint64_t v33 = *(void *)(v32 + 8);
  if (v31 != v33)
  {
    while (1)
    {
      unsigned int v34 = **(unsigned __int16 **)(v31 + 16);
      BOOL v35 = v34 > 0x17;
      int v36 = (1 << v34) & 0x83E000;
      if (v35 || v36 == 0) {
        break;
      }
      unint64_t v31 = *(void *)(v31 + 8);
      if (v31 == v33)
      {
        unint64_t v31 = v33;
        break;
      }
    }
  }
  uint64_t v38 = *(void *)(a8 + 288);
  uint64_t v39 = *(void *)(v38 + 368);
  uint64_t v40 = *(unsigned int *)(v38 + 384);
  if (v40)
  {
    LODWORD(v41) = ((v31 >> 4) ^ (v31 >> 9)) & (v40 - 1);
    unint64_t v42 = (uint64_t *)(v39 + 16 * v41);
    uint64_t v43 = *v42;
    if (v31 == *v42) {
      goto LABEL_35;
    }
    int v44 = 1;
    while (v43 != -4096)
    {
      int v45 = v41 + v44++;
      uint64_t v41 = v45 & (v40 - 1);
      uint64_t v43 = *(void *)(v39 + 16 * v41);
      if (v31 == v43)
      {
        unint64_t v42 = (uint64_t *)(v39 + 16 * v41);
        goto LABEL_35;
      }
    }
  }
  unint64_t v42 = (uint64_t *)(v39 + 16 * v40);
LABEL_35:
  uint64_t v46 = v42[1];
  unint64_t v47 = v46 & 0xFFFFFFFFFFFFFFF8;
  unsigned int v48 = *(_DWORD *)(v330 + 8);
  unint64_t v49 = *(void **)v330;
  if (!v48)
  {
    unsigned int v48 = 0;
    goto LABEL_45;
  }
  uint64_t v50 = v49[3 * v48 - 2];
  unsigned int v51 = *(_DWORD *)(v47 + 24);
  unsigned int v52 = (v50 >> 1) & 3 | *(_DWORD *)((v50 & 0xFFFFFFFFFFFFFFF8) + 24);
  BOOL v53 = *(void **)v330;
  unint64_t v54 = *(unsigned int *)(v330 + 8);
  if (v51 >= v52)
  {
LABEL_45:
    BOOL v53 = &v49[3 * v48];
    goto LABEL_46;
  }
  do
  {
    unint64_t v55 = v54 >> 1;
    uint64_t v56 = v53[3 * (v54 >> 1) + 1];
    LODWORD(v56) = (v56 >> 1) & 3 | *(_DWORD *)((v56 & 0xFFFFFFFFFFFFFFF8) + 24);
    v54 -= (v54 >> 1) + 1;
    BOOL v57 = v51 >= v56;
    if (v51 >= v56) {
      unint64_t v58 = v55 + 1;
    }
    else {
      unint64_t v58 = 0;
    }
    v53 += 3 * v58;
    if (!v57) {
      unint64_t v54 = v55;
    }
  }
  while (v54);
LABEL_46:
  uint64_t v59 = *(void *)(v29 + 24);
  uint64_t v60 = &v49[3 * v48];
  if (v53 == v60
    || ((*v53 >> 1) & 3 | *(_DWORD *)((*v53 & 0xFFFFFFFFFFFFFFF8) + 24)) > *(_DWORD *)(v47 + 24))
  {
    uint64_t v61 = 0;
  }
  else
  {
    uint64_t v61 = v53[2];
    unint64_t v62 = v53[1] & 0xFFFFFFFFFFFFFFF8;
    int v63 = v53 + 3;
    BOOL v64 = v47 == v62 && v63 == v60;
    if (!v64 && *(void *)(v61 + 8) == v47) {
      uint64_t v61 = 0;
    }
  }
  char v65 = v343;
  uint64_t v66 = HIDWORD(v344);
  unsigned int v67 = v59 >> 4;
  if (v343 == v342)
  {
    if (HIDWORD(v344))
    {
      unint64_t v68 = 0;
      uint64_t v69 = 8 * HIDWORD(v344);
      int v70 = (uint64_t *)v343;
      while (*v70 != v59)
      {
        if (*v70 == -2) {
          unint64_t v68 = v70;
        }
        ++v70;
        v69 -= 8;
        if (!v69)
        {
          if (!v68) {
            goto LABEL_64;
          }
          uint64_t *v68 = v59;
          --v345;
          goto LABEL_88;
        }
      }
      goto LABEL_132;
    }
LABEL_64:
    unsigned int v71 = v344;
    if (HIDWORD(v344) < v344)
    {
      ++HIDWORD(v344);
      *(void *)&v343[8 * v66] = v59;
      goto LABEL_88;
    }
  }
  else
  {
    unsigned int v71 = v344;
  }
  if (3 * v71 <= 4 * (HIDWORD(v344) - v345))
  {
    if (v71 >= 0x40) {
      v71 *= 2;
    }
    else {
      unsigned int v71 = 128;
    }
    goto LABEL_196;
  }
  if (v71 - HIDWORD(v344) < v71 >> 3)
  {
LABEL_196:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v342, v71);
    unsigned int v71 = v344;
    char v65 = v343;
  }
  unsigned int v72 = v71 - 1;
  unsigned int v73 = (v71 - 1) & (v67 ^ (v59 >> 9));
  unint64_t v74 = &v65[8 * v73];
  uint64_t v75 = *(void *)v74;
  if (*(void *)v74 != -1)
  {
    int v76 = 0;
    int v77 = 1;
    while (v75 != v59)
    {
      if (v76) {
        BOOL v78 = 0;
      }
      else {
        BOOL v78 = v75 == -2;
      }
      if (v78) {
        int v76 = (uint64_t *)v74;
      }
      unsigned int v79 = v73 + v77++;
      unsigned int v73 = v79 & v72;
      unint64_t v74 = &v65[8 * (v79 & v72)];
      uint64_t v75 = *(void *)v74;
      if (*(void *)v74 == -1) {
        goto LABEL_81;
      }
    }
    goto LABEL_132;
  }
  int v76 = 0;
LABEL_81:
  if (v76) {
    unsigned int v80 = v76;
  }
  else {
    unsigned int v80 = (uint64_t *)v74;
  }
  if (*v80 == v59) {
    goto LABEL_132;
  }
  if (*v80 == -2) {
    --v345;
  }
  else {
    ++HIDWORD(v344);
  }
  *unsigned int v80 = v59;
LABEL_88:
  if (!v341)
  {
    uint64_t v88 = 0;
    goto LABEL_103;
  }
  unsigned int v81 = (v341 - 1) & (v67 ^ (v59 >> 9));
  int v82 = (uint64_t *)(v339 + 16 * v81);
  uint64_t v83 = *v82;
  if (v59 != *v82)
  {
    uint64_t v84 = 0;
    int v85 = 1;
    while (v83 != -4096)
    {
      if (v84) {
        BOOL v86 = 0;
      }
      else {
        BOOL v86 = v83 == -8192;
      }
      if (v86) {
        uint64_t v84 = v82;
      }
      unsigned int v87 = v81 + v85++;
      unsigned int v81 = v87 & (v341 - 1);
      int v82 = (uint64_t *)(v339 + 16 * v81);
      uint64_t v83 = *v82;
      if (v59 == *v82) {
        goto LABEL_132;
      }
    }
    if (v84) {
      uint64_t v88 = v84;
    }
    else {
      uint64_t v88 = v82;
    }
LABEL_103:
    if (4 * v340.i32[0] + 4 >= 3 * v341)
    {
      sub_1CBA6DF70((uint64_t)&v339, 2 * v341);
      unsigned int v89 = v341 - 1;
      unsigned int v90 = (v341 - 1) & (v67 ^ (v59 >> 9));
      uint64_t v88 = (uint64_t *)(v339 + 16 * v90);
      uint64_t v91 = *v88;
      if (v59 == *v88)
      {
LABEL_113:
        uint64_t v96 = v59;
LABEL_129:
        ++v340.i32[0];
        if (v96 != -4096) {
          --v340.i32[1];
        }
        uint64_t *v88 = v59;
        v88[1] = v61;
        goto LABEL_132;
      }
      char v92 = 0;
      int v93 = 1;
      while (v91 != -4096)
      {
        if (v92) {
          BOOL v94 = 0;
        }
        else {
          BOOL v94 = v91 == -8192;
        }
        if (v94) {
          char v92 = v88;
        }
        unsigned int v95 = v90 + v93++;
        unsigned int v90 = v95 & v89;
        uint64_t v88 = (uint64_t *)(v339 + 16 * (v95 & v89));
        uint64_t v91 = *v88;
        if (v59 == *v88) {
          goto LABEL_113;
        }
      }
      goto LABEL_126;
    }
    if (v341 + ~v340.i32[0] - v340.i32[1] <= v341 >> 3)
    {
      sub_1CBA6DF70((uint64_t)&v339, v341);
      if (v341)
      {
        unsigned int v97 = v341 - 1;
        unsigned int v98 = (v341 - 1) & (v67 ^ (v59 >> 9));
        uint64_t v88 = (uint64_t *)(v339 + 16 * v98);
        uint64_t v99 = *v88;
        if (*v88 != v59)
        {
          char v92 = 0;
          int v100 = 1;
          while (v99 != -4096)
          {
            if (v92) {
              BOOL v101 = 0;
            }
            else {
              BOOL v101 = v99 == -8192;
            }
            if (v101) {
              char v92 = v88;
            }
            unsigned int v102 = v98 + v100++;
            unsigned int v98 = v102 & v97;
            uint64_t v88 = (uint64_t *)(v339 + 16 * (v102 & v97));
            uint64_t v99 = *v88;
            if (*v88 == v59) {
              goto LABEL_128;
            }
          }
LABEL_126:
          if (v92) {
            uint64_t v88 = v92;
          }
        }
      }
      else
      {
        uint64_t v88 = 0;
      }
    }
LABEL_128:
    uint64_t v96 = *v88;
    goto LABEL_129;
  }
LABEL_132:
  if (v341)
  {
    unsigned int v103 = v67 ^ (v59 >> 9);
    unsigned int v104 = v341 - 1;
    LODWORD(v105) = (v341 - 1) & v103;
    int v106 = (uint64_t *)(v339 + 16 * v105);
    uint64_t v107 = *v106;
    if (v59 != *v106)
    {
      int v131 = 1;
      uint64_t v132 = *v106;
      LODWORD(v108) = v104 & v103;
      while (v132 != -4096)
      {
        int v133 = v108 + v131++;
        uint64_t v108 = v133 & v104;
        uint64_t v132 = *(void *)(v339 + 16 * v108);
        uint64_t v109 = v108;
        if (v59 == v132) {
          goto LABEL_135;
        }
      }
      goto LABEL_183;
    }
    LODWORD(v108) = v104 & v103;
    uint64_t v109 = v104 & v103;
LABEL_135:
    if (v108 != v341)
    {
      if (*(void *)(v339 + 16 * v109 + 8) != v61)
      {
        if (v59 == v107)
        {
LABEL_190:
          uint64_t *v106 = -8192;
          int32x2_t v340 = vadd_s32(v340, (int32x2_t)0x1FFFFFFFFLL);
        }
        else
        {
          int v134 = 1;
          while (v107 != -4096)
          {
            int v135 = v105 + v134++;
            uint64_t v105 = v135 & v104;
            uint64_t v107 = *(void *)(v339 + 16 * v105);
            if (v59 == v107)
            {
              int v106 = (uint64_t *)(v339 + 16 * v105);
              goto LABEL_190;
            }
          }
        }
        sub_1CD413B7C((uint64_t)&v336, v59);
        goto LABEL_183;
      }
      if (v338)
      {
        unsigned int v110 = (v338 - 1) & v103;
        int v111 = (uint64_t *)(v336 + 56 * v110);
        uint64_t v112 = *v111;
        if (v59 == *v111)
        {
LABEL_181:
          unint64_t v129 = *((unsigned int *)v111 + 4);
          if (v129 >= *((unsigned int *)v111 + 5)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(v111[1] + 8 * v129) = v46;
          ++*((_DWORD *)v111 + 4);
          goto LABEL_183;
        }
        BOOL v113 = 0;
        int v114 = 1;
        while (v112 != -4096)
        {
          if (v113) {
            BOOL v115 = 0;
          }
          else {
            BOOL v115 = v112 == -8192;
          }
          if (v115) {
            BOOL v113 = v111;
          }
          unsigned int v116 = v110 + v114++;
          unsigned int v110 = v116 & (v338 - 1);
          int v111 = (uint64_t *)(v336 + 56 * v110);
          uint64_t v112 = *v111;
          if (v59 == *v111) {
            goto LABEL_181;
          }
        }
        if (v113) {
          int v111 = v113;
        }
      }
      else
      {
        int v111 = 0;
      }
      if (4 * (int)v337 + 4 >= 3 * v338)
      {
        sub_1CBA6E194(&v336, 2 * v338);
        unsigned int v117 = (v338 - 1) & v103;
        int v111 = (uint64_t *)(v336 + 56 * v117);
        uint64_t v118 = *v111;
        if (v59 == *v111)
        {
LABEL_162:
          uint64_t v123 = v59;
LABEL_178:
          LODWORD(v337) = v337 + 1;
          if (v123 != -4096) {
            --HIDWORD(v337);
          }
          *int v111 = v59;
          v111[1] = (uint64_t)(v111 + 3);
          v111[2] = 0x400000000;
          goto LABEL_181;
        }
        uint64_t v119 = 0;
        int v120 = 1;
        while (v118 != -4096)
        {
          if (v119) {
            BOOL v121 = 0;
          }
          else {
            BOOL v121 = v118 == -8192;
          }
          if (v121) {
            uint64_t v119 = v111;
          }
          unsigned int v122 = v117 + v120++;
          unsigned int v117 = v122 & (v338 - 1);
          int v111 = (uint64_t *)(v336 + 56 * v117);
          uint64_t v118 = *v111;
          if (v59 == *v111) {
            goto LABEL_162;
          }
        }
        goto LABEL_175;
      }
      if (v338 + ~v337 - HIDWORD(v337) <= v338 >> 3)
      {
        sub_1CBA6E194(&v336, v338);
        if (v338)
        {
          unsigned int v124 = (v338 - 1) & v103;
          int v111 = (uint64_t *)(v336 + 56 * v124);
          uint64_t v125 = *v111;
          if (*v111 != v59)
          {
            uint64_t v119 = 0;
            int v126 = 1;
            while (v125 != -4096)
            {
              if (v119) {
                BOOL v127 = 0;
              }
              else {
                BOOL v127 = v125 == -8192;
              }
              if (v127) {
                uint64_t v119 = v111;
              }
              unsigned int v128 = v124 + v126++;
              unsigned int v124 = v128 & (v338 - 1);
              int v111 = (uint64_t *)(v336 + 56 * v124);
              uint64_t v125 = *v111;
              if (*v111 == v59) {
                goto LABEL_177;
              }
            }
LABEL_175:
            if (v119) {
              int v111 = v119;
            }
          }
        }
        else
        {
          int v111 = 0;
        }
      }
LABEL_177:
      uint64_t v123 = *v111;
      goto LABEL_178;
    }
  }
LABEL_183:
  uint64_t v130 = *(void *)(v27 + 8);
  while (1)
  {
    uint64_t v27 = *(void *)(v27 + 24);
    if (!v27) {
      break;
    }
    if ((*(unsigned char *)(v27 + 3) & 1) == 0)
    {
      uint64_t v29 = *(void *)(v27 + 8);
      if (v29 != v130) {
        goto LABEL_18;
      }
    }
  }
LABEL_15:
  if (HIDWORD(v344) != v345)
  {
    if (*(void *)(v324 + 24) <= 1uLL) {
      unint64_t v136 = 1;
    }
    else {
      unint64_t v136 = *(void *)(v324 + 24);
    }
    unint64_t v137 = *(void *)(v326 + 24);
    if (v137 <= 1) {
      unint64_t v138 = 1;
    }
    else {
      unint64_t v138 = *(void *)(v326 + 24);
    }
    uint64_t v139 = *(unsigned int **)(a2 + 32);
    unint64_t v140 = ((unint64_t)v139[8] >> 8) & 0xFFF;
    if (v140) {
      unint64_t v136 = *(void *)(*(void *)(v14 + 232) + 8 * v140);
    }
    unint64_t v141 = ((unint64_t)*v139 >> 8) & 0xFFF;
    uint64_t v142 = a8;
    if (v141) {
      unint64_t v138 = *(void *)(*(void *)(v14 + 232) + 8 * v141);
    }
    int v331 = v335;
    int v332 = v335;
    uint64_t v333 = 8;
    int v334 = 0;
    if ((v329 & 0x80000000) != 0) {
      unsigned int v143 = (int **)(*(void *)(v13 + 24) + 16 * (v329 & 0x7FFFFFFF) + 8);
    }
    else {
      unsigned int v143 = (int **)(*(void *)(v13 + 272) + 8 * v329);
    }
    uint64_t v148 = *v143;
    if (!*v143)
    {
LABEL_237:
      uint64_t v28 = 1;
      goto LABEL_238;
    }
    while (1)
    {
      unsigned int v149 = *v148;
      if ((*v148 & 0x1000000) == 0) {
        break;
      }
      uint64_t v148 = (int *)*((void *)v148 + 3);
      if (!v148) {
        goto LABEL_237;
      }
    }
    uint64_t v155 = (v137 << __clz(__rbit64(v136)) >> __clz(__rbit64(v138)));
    unint64_t v156 = v323 + 1;
    unint64_t v327 = v329 & 0x7FFFFFFF;
    unsigned int v325 = v338;
    unsigned int v321 = v338 - 1;
LABEL_250:
    uint64_t v157 = *((void *)v148 + 1);
    if (!sub_1CBA6DC6C(v157)) {
      goto LABEL_477;
    }
    uint64_t v158 = *(void *)(v157 + 24);
    unint64_t v159 = v342;
    if (v343 == v342)
    {
      int v160 = HIDWORD(v344);
      uint64_t v161 = &v343[8 * HIDWORD(v344)];
      if (HIDWORD(v344))
      {
        uint64_t v162 = 0;
        while (*(void *)&v343[v162] != v158)
        {
          v162 += 8;
          if (8 * HIDWORD(v344) == v162) {
            goto LABEL_270;
          }
        }
        uint64_t v161 = &v343[v162];
      }
LABEL_270:
      unint64_t v159 = v343;
    }
    else
    {
      int v163 = v344 - 1;
      unsigned int v164 = (v344 - 1) & ((v158 >> 4) ^ (v158 >> 9));
      uint64_t v161 = &v343[8 * v164];
      uint64_t v165 = *(void *)v161;
      if (*(void *)v161 == -1)
      {
        int v166 = 0;
LABEL_293:
        if (v166) {
          uint64_t v161 = v166;
        }
        int v160 = HIDWORD(v344);
        if (*(void *)v161 != v158) {
          uint64_t v161 = &v343[8 * v344];
        }
      }
      else
      {
        int v166 = 0;
        int v167 = 1;
        while (v165 != v158)
        {
          if (v166) {
            BOOL v168 = 0;
          }
          else {
            BOOL v168 = v165 == -2;
          }
          if (v168) {
            int v166 = v161;
          }
          unsigned int v169 = v164 + v167++;
          unsigned int v164 = v169 & v163;
          uint64_t v161 = &v343[8 * (v169 & v163)];
          uint64_t v165 = *(void *)v161;
          if (*(void *)v161 == -1) {
            goto LABEL_293;
          }
        }
        int v160 = HIDWORD(v344);
      }
    }
    if (v343 == v159) {
      int v170 = v160;
    }
    else {
      int v170 = v344;
    }
    if (v161 == &v343[8 * v170] || (v155 & *(void *)(*(void *)(v14 + 232) + 8 * ((v149 >> 8) & 0xFFF))) == 0) {
      goto LABEL_477;
    }
    uint64_t v319 = v155;
    unsigned int v172 = v341;
    if (!v341) {
      goto LABEL_506;
    }
    unint64_t v320 = v156;
    uint64_t v173 = v339;
    unsigned int v174 = (v158 >> 4) ^ (v158 >> 9);
    unsigned int v175 = v341 - 1;
    uint64_t v176 = (v341 - 1) & v174;
    uint64_t v177 = (uint64_t *)(v339 + 16 * v176);
    uint64_t v178 = *v177;
    unsigned int v179 = (v341 - 1) & v174;
    if (v158 != *v177)
    {
      int v315 = 1;
      unsigned int v179 = v175 & v174;
      while (v178 != -4096)
      {
        unsigned int v316 = v179 + v315++;
        unsigned int v179 = v316 & v175;
        uint64_t v178 = *(void *)(v339 + 16 * v179);
        if (v158 == v178) {
          goto LABEL_280;
        }
      }
      goto LABEL_372;
    }
LABEL_280:
    if (v179 == v341 || !*(void *)(v330 + 104)) {
      goto LABEL_372;
    }
    uint64_t v180 = v332;
    uint64_t v181 = HIDWORD(v333);
    if (v332 == v331)
    {
      if (HIDWORD(v333))
      {
        uint64_t v182 = 0;
        uint64_t v183 = 8 * HIDWORD(v333);
        uint64_t v184 = v332;
        do
        {
          if (*(void *)v184 == v158) {
            goto LABEL_372;
          }
          if (*(void *)v184 == -2) {
            uint64_t v182 = v184;
          }
          v184 += 8;
          v183 -= 8;
        }
        while (v183);
        if (v182)
        {
          *(void *)uint64_t v182 = v158;
          --v334;
          goto LABEL_320;
        }
      }
      unsigned int v185 = v333;
      if (HIDWORD(v333) < v333)
      {
        ++HIDWORD(v333);
        *(void *)&v332[8 * v181] = v158;
        goto LABEL_320;
      }
    }
    else
    {
      unsigned int v185 = v333;
    }
    if (3 * v185 <= 4 * (HIDWORD(v333) - v334))
    {
      if (v185 >= 0x40) {
        v185 *= 2;
      }
      else {
        unsigned int v185 = 128;
      }
    }
    else if (v185 - HIDWORD(v333) >= v185 >> 3)
    {
LABEL_301:
      unsigned int v186 = v185 - 1;
      unsigned int v187 = (v185 - 1) & v174;
      uint64_t v188 = &v180[8 * v187];
      uint64_t v189 = *(void *)v188;
      if (*(void *)v188 != -1)
      {
        uint64_t v190 = 0;
        int v191 = 1;
        while (v189 != v158)
        {
          if (v190) {
            BOOL v192 = 0;
          }
          else {
            BOOL v192 = v189 == -2;
          }
          if (v192) {
            uint64_t v190 = v188;
          }
          unsigned int v193 = v187 + v191++;
          unsigned int v187 = v193 & v186;
          uint64_t v188 = &v180[8 * (v193 & v186)];
          uint64_t v189 = *(void *)v188;
          if (*(void *)v188 == -1) {
            goto LABEL_313;
          }
        }
        goto LABEL_372;
      }
      uint64_t v190 = 0;
LABEL_313:
      if (v190) {
        unsigned int v194 = v190;
      }
      else {
        unsigned int v194 = v188;
      }
      if (*(void *)v194 == v158)
      {
LABEL_372:
        uint64_t v231 = *v177;
        if (v158 != *v177)
        {
          int v317 = 1;
          while (v231 != -4096)
          {
            int v318 = v176 + v317++;
            uint64_t v176 = v318 & v175;
            uint64_t v231 = *(void *)(v173 + 16 * v176);
            unint64_t v156 = v320;
            if (v158 == v231) {
              goto LABEL_374;
            }
          }
          goto LABEL_506;
        }
        unint64_t v156 = v320;
LABEL_374:
        if (v176 == v172
          || (v232 = v173 + 16 * v176, v234 = *(void *)(v232 + 8), int v233 = (void *)(v232 + 8), !v234))
        {
LABEL_506:
          uint64_t v28 = 0;
LABEL_238:
          if (v332 != v331) {
            free(v332);
          }
          goto LABEL_240;
        }
        __int16 v235 = *(_WORD *)(v328 + 44);
        unint64_t v236 = v328;
        if ((v235 & 4) != 0)
        {
          do
            unint64_t v236 = *(void *)v236 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v236 + 44) & 4) != 0);
        }
        unint64_t v237 = v328;
        if ((v235 & 8) != 0)
        {
          do
            unint64_t v237 = *(void *)(v237 + 8);
          while ((*(_WORD *)(v237 + 44) & 8) != 0);
        }
        unint64_t v238 = *(void *)(v237 + 8);
        if (v236 != v238)
        {
          while (1)
          {
            unsigned int v239 = **(unsigned __int16 **)(v236 + 16);
            BOOL v35 = v239 > 0x17;
            int v240 = (1 << v239) & 0x83E000;
            if (v35 || v240 == 0) {
              break;
            }
            unint64_t v236 = *(void *)(v236 + 8);
            if (v236 == v238)
            {
              unint64_t v236 = v238;
              break;
            }
          }
        }
        uint64_t v242 = *(void *)(v142 + 288);
        uint64_t v243 = *(void *)(v242 + 368);
        uint64_t v244 = *(unsigned int *)(v242 + 384);
        if (v244)
        {
          LODWORD(v245) = ((v236 >> 4) ^ (v236 >> 9)) & (v244 - 1);
          uint64_t v246 = (uint64_t *)(v243 + 16 * v245);
          uint64_t v247 = *v246;
          if (v236 == *v246) {
            goto LABEL_392;
          }
          int v248 = 1;
          while (v247 != -4096)
          {
            int v249 = v245 + v248++;
            uint64_t v245 = v249 & (v244 - 1);
            uint64_t v247 = *(void *)(v243 + 16 * v245);
            if (v236 == v247)
            {
              uint64_t v246 = (uint64_t *)(v243 + 16 * v245);
              goto LABEL_392;
            }
          }
        }
        uint64_t v246 = (uint64_t *)(v243 + 16 * v244);
LABEL_392:
        unint64_t v250 = *(unsigned int *)(v142 + 416);
        if (v323 >= v250)
        {
          sub_1CB9153B8((uint64_t)v322, v156 - v250, *(void *)(v142 + 424));
        }
        else
        {
          uint64_t v251 = *(void *)(*v322 + 8 * v323);
          if (v251)
          {
            unint64_t v252 = v246[1] & 0xFFFFFFFFFFFFFFF8;
            unsigned int v253 = *(_DWORD *)(v251 + 8);
            int v254 = *(void **)v251;
            if (v253)
            {
              uint64_t v255 = v254[3 * v253 - 2];
              unsigned int v256 = *(_DWORD *)(v252 + 24);
              unsigned int v257 = (v255 >> 1) & 3 | *(_DWORD *)((v255 & 0xFFFFFFFFFFFFFFF8) + 24);
              int v258 = *(void **)v251;
              unint64_t v259 = *(unsigned int *)(v251 + 8);
              if (v256 < v257)
              {
                do
                {
                  unint64_t v260 = v259 >> 1;
                  uint64_t v261 = v258[3 * (v259 >> 1) + 1];
                  LODWORD(v261) = (v261 >> 1) & 3 | *(_DWORD *)((v261 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v259 -= (v259 >> 1) + 1;
                  BOOL v262 = v256 >= v261;
                  if (v256 >= v261) {
                    unint64_t v263 = v260 + 1;
                  }
                  else {
                    unint64_t v263 = 0;
                  }
                  v258 += 3 * v263;
                  if (!v262) {
                    unint64_t v259 = v260;
                  }
                }
                while (v259);
LABEL_405:
                unsigned __int8 v264 = &v254[3 * v253];
                if (v258 == v264)
                {
                  uint64_t v268 = 0;
                  LOBYTE(v267) = 0;
LABEL_414:
                  if ((~(_BYTE)v267 & 6) != 0) {
                    uint64_t v269 = v268;
                  }
                  else {
                    uint64_t v269 = 0;
                  }
                  if (*v233 != v269) {
                    goto LABEL_506;
                  }
                  unint64_t v270 = *(unsigned int *)(v142 + 416);
                  if (v327 >= v270)
                  {
                    sub_1CB9153B8((uint64_t)v322, (v329 & 0x7FFFFFFF) + 1 - v270, *(void *)(v142 + 424));
                  }
                  else
                  {
                    uint64_t v271 = *(void *)(*v322 + 8 * v327);
                    if (v271)
                    {
                      uint64_t v272 = *(void *)(v142 + 288);
                      __int16 v273 = *(_WORD *)(v157 + 44);
                      unint64_t v274 = v157;
                      if ((v273 & 4) != 0)
                      {
                        do
                          unint64_t v274 = *(void *)v274 & 0xFFFFFFFFFFFFFFF8;
                        while ((*(_WORD *)(v274 + 44) & 4) != 0);
                      }
                      if ((v273 & 8) != 0)
                      {
                        do
                          uint64_t v157 = *(void *)(v157 + 8);
                        while ((*(_WORD *)(v157 + 44) & 8) != 0);
                      }
                      uint64_t v275 = *(void *)(v157 + 8);
                      if (v274 != v275)
                      {
                        while (1)
                        {
                          unsigned int v276 = **(unsigned __int16 **)(v274 + 16);
                          BOOL v35 = v276 > 0x17;
                          int v277 = (1 << v276) & 0x83E000;
                          if (v35 || v277 == 0) {
                            break;
                          }
                          unint64_t v274 = *(void *)(v274 + 8);
                          if (v274 == v275)
                          {
                            unint64_t v274 = *(void *)(v157 + 8);
                            break;
                          }
                        }
                      }
                      uint64_t v279 = *(void *)(v272 + 368);
                      uint64_t v280 = *(unsigned int *)(v272 + 384);
                      if (v280)
                      {
                        LODWORD(v281) = ((v274 >> 4) ^ (v274 >> 9)) & (v280 - 1);
                        uint64_t v282 = (uint64_t *)(v279 + 16 * v281);
                        uint64_t v283 = *v282;
                        if (v274 == *v282) {
                          goto LABEL_436;
                        }
                        int v284 = 1;
                        while (v283 != -4096)
                        {
                          int v285 = v281 + v284++;
                          uint64_t v281 = v285 & (v280 - 1);
                          uint64_t v283 = *(void *)(v279 + 16 * v281);
                          if (v274 == v283)
                          {
                            uint64_t v282 = (uint64_t *)(v279 + 16 * v281);
                            goto LABEL_436;
                          }
                        }
                      }
                      uint64_t v282 = (uint64_t *)(v279 + 16 * v280);
LABEL_436:
                      uint64_t v286 = v282[1];
                      unint64_t v287 = *(unsigned int *)(v271 + 8);
                      uint64_t v288 = *(void **)v271;
                      if (v287)
                      {
                        uint64_t v289 = v288[3 * v287 - 2];
                        unsigned int v290 = (v289 >> 1) & 3 | *(_DWORD *)((v289 & 0xFFFFFFFFFFFFFFF8) + 24);
                        unsigned int v291 = *(_DWORD *)(v252 + 24);
                        unint64_t v292 = *(unsigned int *)(v271 + 8);
                        int v293 = *(void **)v271;
                        unint64_t v294 = v292;
                        uint64_t v155 = v319;
                        if (v291 < v290)
                        {
                          do
                          {
                            unint64_t v295 = v294 >> 1;
                            uint64_t v296 = v293[3 * (v294 >> 1) + 1];
                            LODWORD(v296) = (v296 >> 1) & 3 | *(_DWORD *)((v296 & 0xFFFFFFFFFFFFFFF8)
                                                                                      + 24);
                            v294 -= (v294 >> 1) + 1;
                            BOOL v297 = v291 >= v296;
                            if (v291 >= v296) {
                              unint64_t v298 = v295 + 1;
                            }
                            else {
                              unint64_t v298 = 0;
                            }
                            v293 += 3 * v298;
                            if (!v297) {
                              unint64_t v294 = v295;
                            }
                          }
                          while (v294);
                          unint64_t v292 = v287;
LABEL_448:
                          int v299 = &v288[3 * v292];
                          if (v293 == v299
                            || ((*v293 >> 1) & 3 | *(_DWORD *)((*v293 & 0xFFFFFFFFFFFFFFF8) + 24)) > *(_DWORD *)(v252 + 24))
                          {
                            uint64_t v300 = 0;
                          }
                          else
                          {
                            uint64_t v300 = v293[2];
                            unint64_t v301 = v293[1] & 0xFFFFFFFFFFFFFFF8;
                            uint64_t v302 = v293 + 3;
                            BOOL v303 = v252 == v301 && v302 == v299;
                            if (!v303 && *(void *)(v300 + 8) == v252) {
                              uint64_t v300 = 0;
                            }
                          }
                          if (!v287) {
                            goto LABEL_475;
                          }
                          unint64_t v304 = v286 & 0xFFFFFFFFFFFFFFF8;
                          unsigned int v305 = *(_DWORD *)(v304 + 24);
                          if (v305 >= ((*(v299 - 2) >> 1) & 3 | *(_DWORD *)((*(v299 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                         + 24)))
                            goto LABEL_475;
                          do
                          {
                            uint64_t v306 = v288;
                            unint64_t v307 = v292 >> 1;
                            uint64_t v308 = v288[3 * (v292 >> 1) + 1];
                            LODWORD(v308) = (v308 >> 1) & 3 | *(_DWORD *)((v308 & 0xFFFFFFFFFFFFFFF8)
                                                                                      + 24);
                            v292 -= (v292 >> 1) + 1;
                            BOOL v309 = v305 >= v308;
                            if (v305 >= v308) {
                              unint64_t v310 = v307 + 1;
                            }
                            else {
                              unint64_t v310 = 0;
                            }
                            uint64_t v288 = &v306[3 * v310];
                            if (!v309) {
                              unint64_t v292 = v307;
                            }
                          }
                          while (v292);
                          if (v288 == v299
                            || ((*v288 >> 1) & 3 | *(_DWORD *)((*v288 & 0xFFFFFFFFFFFFFFF8) + 24)) > *(_DWORD *)(v304 + 24))
                          {
LABEL_475:
                            uint64_t v311 = 0;
                          }
                          else
                          {
                            uint64_t v312 = v306[3 * v310 + 1];
                            uint64_t v311 = v306[3 * v310 + 2];
                            uint64_t v313 = v288 + 3;
                            BOOL v314 = v304 == (v312 & 0xFFFFFFFFFFFFFFF8) && v313 == v299;
                            if (!v314 && *(void *)(v311 + 8) == v304) {
                              uint64_t v311 = 0;
                            }
                          }
                          if (v300 == v311)
                          {
LABEL_477:
                            while (1)
                            {
                              uint64_t v148 = (int *)*((void *)v148 + 3);
                              if (!v148) {
                                goto LABEL_237;
                              }
                              unsigned int v149 = *v148;
                              if ((*v148 & 0x1000000) == 0) {
                                goto LABEL_250;
                              }
                            }
                          }
                          goto LABEL_506;
                        }
                      }
                      else
                      {
                        unint64_t v292 = 0;
                        uint64_t v155 = v319;
                      }
                      int v293 = &v288[3 * v292];
                      goto LABEL_448;
                    }
                  }
                  operator new();
                }
                unsigned int v265 = *(_DWORD *)((*v258 & 0xFFFFFFFFFFFFFFF8) + 24);
                unsigned int v266 = *(_DWORD *)(v252 + 24);
                if (((*v258 >> 1) & 3 | v265) > v266)
                {
                  LOBYTE(v267) = 0;
                }
                else
                {
                  uint64_t v267 = v258[1];
                  if (v252 == (v267 & 0xFFFFFFFFFFFFFFF8))
                  {
                    v258 += 3;
                    if (v258 == v264)
                    {
LABEL_413:
                      uint64_t v268 = 0;
                      goto LABEL_414;
                    }
                    unsigned int v265 = *(_DWORD *)((*v258 & 0xFFFFFFFFFFFFFFF8) + 24);
                  }
                }
                if (v266 >= v265)
                {
                  uint64_t v267 = v258[1];
                  uint64_t v268 = v258[2];
                  goto LABEL_414;
                }
                goto LABEL_413;
              }
            }
            else
            {
              unsigned int v253 = 0;
            }
            int v258 = &v254[3 * v253];
            goto LABEL_405;
          }
        }
        operator new();
      }
      if (*(void *)v194 == -2) {
        --v334;
      }
      else {
        ++HIDWORD(v333);
      }
      *(void *)unsigned int v194 = v158;
LABEL_320:
      if (v325)
      {
        unsigned int v195 = v321 & v174;
        uint64_t v196 = (uint64_t *)(v336 + 56 * (v321 & v174));
        uint64_t v197 = *v196;
        if (*v196 == v158)
        {
LABEL_327:
          if ((uint64_t *)(v336 + 56 * v325) != v196)
          {
            uint64_t v200 = *(void *)(v330 + 104);
            if (v200)
            {
              uint64_t v201 = (uint64_t *)v196[1];
              uint64_t v202 = *((unsigned int *)v196 + 4);
              while (!v202)
              {
LABEL_371:
                uint64_t v200 = *(void *)(v200 + 104);
                if (!v200) {
                  goto LABEL_372;
                }
              }
              unsigned int v203 = *(_DWORD *)(v200 + 8);
              uint64_t v204 = *(void *)v200 + 24 * v203;
              unsigned int v205 = v201;
              while (1)
              {
                uint64_t v206 = *v205;
                uint64_t v207 = (void *)(*(void *)v200 + 24 * v203);
                if (v203)
                {
                  unsigned int v208 = *(_DWORD *)((v206 & 0xFFFFFFFFFFFFFFF8) + 24) | (v206 >> 1) & 3;
                  uint64_t v207 = (void *)(*(void *)v200 + 24 * v203);
                  if (v208 < ((*(void *)(v204 - 16) >> 1) & 3 | *(_DWORD *)((*(void *)(v204 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 24)))
                  {
                    uint64_t v207 = *(void **)v200;
                    unint64_t v209 = *(unsigned int *)(v200 + 8);
                    do
                    {
                      unint64_t v210 = v209 >> 1;
                      uint64_t v211 = v207[3 * (v209 >> 1) + 1];
                      LODWORD(v211) = (v211 >> 1) & 3 | *(_DWORD *)((v211 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v209 -= (v209 >> 1) + 1;
                      BOOL v212 = v208 >= v211;
                      if (v208 >= v211) {
                        unint64_t v213 = v210 + 1;
                      }
                      else {
                        unint64_t v213 = 0;
                      }
                      v207 += 3 * v213;
                      if (!v212) {
                        unint64_t v209 = v210;
                      }
                    }
                    while (v209);
                  }
                }
                if (v207 != (void *)v204)
                {
                  unsigned int v214 = (*v207 >> 1) & 3 | *(_DWORD *)((*v207 & 0xFFFFFFFFFFFFFFF8) + 24);
                  unint64_t v215 = v206 & 0xFFFFFFFFFFFFFFF8;
                  unsigned int v216 = *(_DWORD *)((v206 & 0xFFFFFFFFFFFFFFF8) + 24);
                  if (v214 <= (v216 | (v206 >> 1) & 3))
                  {
                    if (!v203
                      || v216 >= ((*(void *)(v204 - 16) >> 1) & 3 | *(_DWORD *)((*(void *)(v204 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 24)))
                    {
                      goto LABEL_506;
                    }
                    int v217 = *(void **)v200;
                    unint64_t v218 = *(unsigned int *)(v200 + 8);
                    do
                    {
                      BOOL v219 = v217;
                      unint64_t v220 = v218 >> 1;
                      uint64_t v221 = v217[3 * (v218 >> 1) + 1];
                      LODWORD(v221) = (v221 >> 1) & 3 | *(_DWORD *)((v221 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v218 -= (v218 >> 1) + 1;
                      BOOL v222 = v216 >= v221;
                      if (v216 >= v221) {
                        unint64_t v223 = v220 + 1;
                      }
                      else {
                        unint64_t v223 = 0;
                      }
                      int v217 = &v219[3 * v223];
                      if (!v222) {
                        unint64_t v218 = v220;
                      }
                    }
                    while (v218);
                    if (v217 == (void *)v204
                      || ((*v217 >> 1) & 3 | *(_DWORD *)((*v217 & 0xFFFFFFFFFFFFFFF8) + 24)) > v216)
                    {
                      goto LABEL_506;
                    }
                    uint64_t v225 = v219[3 * v223 + 1];
                    uint64_t v224 = v219[3 * v223 + 2];
                    char v226 = v217 + 3;
                    if (v215 == (v225 & 0xFFFFFFFFFFFFFFF8) && v226 == (void *)v204)
                    {
                      if (!v224) {
                        goto LABEL_506;
                      }
                      unint64_t v228 = *(void *)(v224 + 8);
                    }
                    else
                    {
                      unint64_t v228 = *(void *)(v224 + 8);
                      if (v228 == v215) {
                        goto LABEL_506;
                      }
                    }
                    if ((v228 & 6) == 0) {
                      goto LABEL_506;
                    }
                    if (v228 >= 8)
                    {
                      uint64_t v229 = *(void *)((v228 & 0xFFFFFFFFFFFFFFF8) + 16);
                      if (!v229) {
                        goto LABEL_506;
                      }
                      if (**(_WORD **)(v229 + 16) != 19) {
                        goto LABEL_506;
                      }
                      int v230 = *(_DWORD **)(v229 + 32);
                      if (v230[9] != v329 || ((v230[8] ^ *v230) & 0xFFF00) != 0) {
                        goto LABEL_506;
                      }
                    }
                  }
                }
                if (++v205 == &v201[v202]) {
                  goto LABEL_371;
                }
              }
            }
          }
          goto LABEL_372;
        }
        int v198 = 1;
        while (v197 != -4096)
        {
          unsigned int v199 = v195 + v198++;
          unsigned int v195 = v199 & v321;
          uint64_t v196 = (uint64_t *)(v336 + 56 * v195);
          uint64_t v197 = *v196;
          if (*v196 == v158) {
            goto LABEL_327;
          }
        }
      }
      uint64_t v196 = (uint64_t *)(v336 + 56 * v325);
      goto LABEL_327;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v331, v185);
    unsigned int v175 = v172 - 1;
    unsigned int v185 = v333;
    uint64_t v180 = v332;
    goto LABEL_301;
  }
  uint64_t v28 = 1;
LABEL_240:
  uint64_t v150 = v336;
  if (v338)
  {
    uint64_t v151 = 56 * v338;
    unint64_t v152 = (void *)(v336 + 24);
    do
    {
      if ((*(v152 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unint64_t v153 = (void *)*(v152 - 2);
        if (v152 != v153) {
          free(v153);
        }
      }
      v152 += 7;
      v151 -= 56;
    }
    while (v151);
  }
  MEMORY[0x1D25D9CD0](v150, 8);
  MEMORY[0x1D25D9CD0](v339, 8);
  if (v343 != v342) {
    free(v343);
  }
  return v28;
}

BOOL sub_1CBA6DC6C(uint64_t a1)
{
  int v1 = *(unsigned __int16 **)(a1 + 16);
  int v2 = *v1;
  if ((v2 - 9) <= 0x3C && ((1 << (v2 - 9)) & 0x1000000000000605) != 0 || v2 == 0) {
    return 0;
  }
  uint64_t v5 = *((void *)v1 + 1);
  if ((v5 & 0x10) != 0) {
    return 0;
  }
  uint64_t v6 = *((void *)v1 + 2);
  if (v6) {
    return 0;
  }
  if ((v6 & 4) == 0) {
    goto LABEL_15;
  }
  if ((v2 - 1) <= 1)
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 48);
    if ((v9 & 8) != 0) {
      goto LABEL_34;
    }
  }
  __int16 v7 = *(_WORD *)(a1 + 44);
  if ((v7 & 0xC) != 0 && (v7 & 4) == 0)
  {
    if ((v5 & 0x80000) == 0)
    {
      uint64_t v10 = a1;
      while ((*(_WORD *)(v10 + 44) & 8) != 0)
      {
        uint64_t v10 = *(void *)(v10 + 8);
        if ((*(unsigned char *)(*(void *)(v10 + 16) + 10) & 8) != 0) {
          goto LABEL_24;
        }
      }
      goto LABEL_15;
    }
  }
  else if ((v5 & 0x80000) == 0)
  {
    goto LABEL_15;
  }
LABEL_24:
  if ((v2 - 1) <= 1)
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 48);
LABEL_34:
    if ((v9 & 0x10) != 0) {
      goto LABEL_15;
    }
    __int16 v7 = *(_WORD *)(a1 + 44);
    if ((v7 & 0xC) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if ((v7 & 0xC) != 0)
  {
LABEL_26:
    if ((v7 & 4) != 0) {
      goto LABEL_27;
    }
    if ((v5 & 0x100000) == 0)
    {
      while ((*(_WORD *)(a1 + 44) & 8) != 0)
      {
        a1 = *(void *)(a1 + 8);
        if ((*(unsigned char *)(*(void *)(a1 + 16) + 10) & 0x10) != 0) {
          goto LABEL_15;
        }
      }
      return 1;
    }
LABEL_15:
    if ((v2 - 2970) >= 0x48) {
      return (~v6 & 0x800200) == 0 || (~v6 & 0x800100) == 0;
    }
    return 1;
  }
LABEL_27:
  BOOL result = 1;
  if ((v5 & 0x100000) != 0 && (v2 - 2970) >= 0x48) {
    return (~v6 & 0x800200) == 0 || (~v6 & 0x800100) == 0;
  }
  return result;
}

BOOL sub_1CBA6DDA8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (a2 == a4)
  {
    uint64_t v5 = a2;
  }
  else
  {
    uint64_t v5 = 0;
    if (a2 && a4)
    {
      uint64_t v8 = *(void *)(a1 + 240);
      unint64_t v9 = (unint64_t)(*(void *)(a1 + 248) - v8) >> 3;
      if (v9)
      {
        unsigned int v10 = 0;
        uint64_t v11 = *(_DWORD **)(a4 + 8);
        for (unint64_t i = *(_DWORD **)(a2 + 8); ; ++i)
        {
          unsigned int v13 = *v11 & *i;
          if (v13) {
            break;
          }
          uint64_t v5 = 0;
          ++v11;
          v10 += 32;
          if (v10 >= v9) {
            return a3 == a5 && v5 != 0;
          }
        }
        uint64_t v5 = *(void *)(v8 + 8 * (__clz(__rbit32(v13)) + v10));
      }
      else
      {
        uint64_t v5 = 0;
      }
    }
  }
  return a3 == a5 && v5 != 0;
}

BOOL sub_1CBA6DE38(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 24 * v3;
    uint64_t v6 = (void *)(*(void *)a3 + 8);
    do
    {
      unsigned int v4 = ((*v6 >> 1) & 3 | *(_DWORD *)((*v6 & 0xFFFFFFFFFFFFFFF8) + 24))
         + v4
         - ((*(v6 - 1) >> 1) & 3 | *(_DWORD *)((*(v6 - 1) & 0xFFFFFFFFFFFFFFF8) + 24));
      v6 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  else
  {
    unsigned int v4 = 0;
  }
  return v4 < dword_1EBCBEF50;
}

uint64_t sub_1CBA6DEAC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1CBA6DEB4()
{
  return 1;
}

uint64_t sub_1CBA6DEBC()
{
  return 0;
}

uint64_t sub_1CBA6DEC4()
{
  return 1;
}

uint64_t sub_1CBA6DECC(uint64_t result, int *a2, unsigned int a3)
{
  int v3 = *(_DWORD *)(result + 64);
  unsigned int v4 = (v3 + 31) >> 5;
  if (v4 >= a3) {
    unsigned int v4 = a3;
  }
  if (v4 < 2)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = *(void **)result;
    uint64_t v6 = ((v4 - 2) >> 1) + 1;
    uint64_t v7 = v6;
    do
    {
      int v8 = *a2;
      int v9 = a2[1];
      a2 += 2;
      *v5++ |= ~v8 | ((unint64_t)~v9 << 32);
      --v7;
    }
    while (v7);
    v4 &= 1u;
  }
  if (v4) {
    *(void *)(*(void *)result + 8 * v6) |= ~*a2;
  }
  int v10 = v3 & 0x3F;
  if (v10)
  {
    uint64_t v11 = *(void *)result + 8 * *(unsigned int *)(result + 8);
    *(void *)(v11 - 8) &= ~(-1 << v10);
  }
  return result;
}

void *sub_1CBA6DF70(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unsigned int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = 16 * v12;
      do
      {
        *BOOL result = -4096;
        result += 2;
        v13 -= 16;
      }
      while (v13);
    }
    if (v3)
    {
      int v14 = 0;
      int v15 = v12 - 1;
      int v16 = v4;
      do
      {
        uint64_t v17 = *v16;
        if ((*v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unsigned int v18 = ((v17 >> 4) ^ (v17 >> 9)) & v15;
          uint64_t v19 = (void *)(*(void *)a1 + 16 * v18);
          uint64_t v20 = *v19;
          if (v17 != *v19)
          {
            uint64_t v21 = 0;
            int v22 = 1;
            while (v20 != -4096)
            {
              if (v21) {
                BOOL v23 = 0;
              }
              else {
                BOOL v23 = v20 == -8192;
              }
              if (v23) {
                uint64_t v21 = v19;
              }
              unsigned int v24 = v18 + v22++;
              unsigned int v18 = v24 & v15;
              uint64_t v19 = (void *)(*(void *)a1 + 16 * (v24 & v15));
              uint64_t v20 = *v19;
              if (v17 == *v19) {
                goto LABEL_20;
              }
            }
            if (v21) {
              uint64_t v19 = v21;
            }
          }
LABEL_20:
          *uint64_t v19 = v17;
          v19[1] = v16[1];
          *(_DWORD *)(a1 + 8) = ++v14;
        }
        v16 += 2;
      }
      while (v16 != &v4[2 * v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *BOOL result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CBA6E0FC(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(a1 + 56 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v10 = 1;
    }
    else
    {
      unsigned int v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          unsigned int v8 = v6;
        }
        unsigned int v13 = v5 + v9++;
        unsigned int v5 = v13 & v4;
        unint64_t v6 = (void *)(a1 + 56 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v10 = 1;
        if (*v6 == a3) {
          goto LABEL_7;
        }
      }
      uint64_t v10 = 0;
      if (v8) {
        unint64_t v6 = v8;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

void *sub_1CBA6E194(uint64_t *a1, int a2)
{
  unsigned int v3 = *((_DWORD *)a1 + 4);
  int v4 = (uint64_t *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  BOOL result = operator new(56 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v12 = *((unsigned int *)a1 + 4);
    if (v12)
    {
      uint64_t v13 = 56 * v12;
      do
      {
        *BOOL result = -4096;
        result += 7;
        v13 -= 56;
      }
      while (v13);
    }
    if (v3)
    {
      int v14 = &v4[7 * v3];
      int v15 = v4;
      do
      {
        int v16 = (const void *)*v15;
        if ((*v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v17 = *((_DWORD *)a1 + 4) - 1;
          unsigned int v18 = v17 & ((v16 >> 4) ^ (v16 >> 9));
          uint64_t v19 = (void *)(*a1 + 56 * v18);
          uint64_t v20 = *v19;
          if (v16 != (const void *)*v19)
          {
            uint64_t v21 = 0;
            int v22 = 1;
            while (v20 != -4096)
            {
              if (v21) {
                BOOL v24 = 0;
              }
              else {
                BOOL v24 = v20 == -8192;
              }
              if (v24) {
                uint64_t v21 = v19;
              }
              unsigned int v25 = v18 + v22++;
              unsigned int v18 = v25 & v17;
              uint64_t v19 = (void *)(*a1 + 56 * (v25 & v17));
              uint64_t v20 = *v19;
              if (v16 == (const void *)*v19) {
                goto LABEL_20;
              }
            }
            if (v21) {
              uint64_t v19 = v21;
            }
          }
LABEL_20:
          *uint64_t v19 = v16;
          v19[1] = v19 + 3;
          v19[2] = 0x400000000;
          if (*((_DWORD *)v15 + 4)) {
            sub_1CBA6E388((uint64_t)(v19 + 1), (const void **)v15 + 1);
          }
          ++*((_DWORD *)a1 + 2);
          BOOL v23 = (uint64_t *)v15[1];
          if (v23 != v15 + 3) {
            free(v23);
          }
        }
        v15 += 7;
      }
      while (v15 != v14);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v10 = *((unsigned int *)a1 + 4);
  if (v10)
  {
    uint64_t v11 = 56 * v10;
    do
    {
      *BOOL result = -4096;
      result += 7;
      v11 -= 56;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CBA6E388(uint64_t a1, const void **a2)
{
  if ((const void **)a1 != a2)
  {
    int v4 = a2 + 2;
    unsigned int v3 = *a2;
    if (*a2 == a2 + 2)
    {
      unint64_t v6 = a2 + 1;
      uint64_t v5 = *((unsigned int *)a2 + 2);
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7 >= v5)
      {
        if (v5) {
          memmove(*(void **)a1, *a2, 8 * v5);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v7)
        {
          uint64_t v13 = *(unsigned int *)(a1 + 8);
          int v14 = a2;
          memmove(*(void **)a1, v3, 8 * v7);
          uint64_t v8 = v13;
          a2 = v14;
        }
        else
        {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *v6;
        if (v8 != v9) {
          memcpy((void *)(*(void *)a1 + 8 * v8), (char *)*a2 + 8 * v8, (unsigned char *)*a2 + 8 * v9 - ((unsigned char *)*a2 + 8 * v8));
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
    }
    else
    {
      uint64_t v11 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        uint64_t v12 = a2;
        free(v11);
        a2 = v12;
        unsigned int v3 = *v12;
      }
      *(void *)a1 = v3;
      unint64_t v6 = a2 + 1;
      *(void *)(a1 + 8) = a2[1];
      *a2 = v4;
      *((_DWORD *)a2 + 3) = 0;
    }
    *unint64_t v6 = 0;
  }
  return a1;
}

uint64_t sub_1CBA6E4C8()
{
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Consider any live-interval with a size bigger than this number as being too expensi"
                                     "ve to break down in region splitting. This is to avoid high compile time. The size "
                                     "of a live-range is the cumulative distance covered by a live-interval in terms of SlotIndex.";
  v3.n128_u64[1] = 258;
  int v1 = 320000;
  int v2 = &v1;
  sub_1CD413D64((uint64_t)&unk_1EBCBEED0, "agx2-huge-life-span", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCBEED0, &dword_1CB82C000);
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Be more aggressive about matmad repair copy avoidance.";
  v3.n128_u64[1] = 54;
  LOBYTE(v1) = 0;
  int v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCBEF90, "agx2-force-matmad-copy-avoidance", &v4, &v3, (unsigned char **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCBEF90, &dword_1CB82C000);
}

void sub_1CBA6E5C0(uint64_t a1)
{
}

uint64_t sub_1CBA6E674(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCBF110;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25F3C40;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBF118, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBA6E5C0;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCBF118, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CBA6E76C()
{
}

void sub_1CBA6E7A8(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  int v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    int v4 = a1;
    free(v1);
    a1 = v4;
  }
  int v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  __n128 v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    unint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBA6E85C(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  int v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  __n128 v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  int v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBA6E908()
{
  return "AGX2 rematerialize pass";
}

void sub_1CBA6E918(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 112;
  v6[0] = &unk_1F2617E40;
  v6[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v6);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::SlotIndexes::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CBA6EA14(uint64_t *a1, uint64_t a2)
{
  __n128 v3 = a1;
  uint64_t v549 = *MEMORY[0x1E4F143B8];
  a1[31] = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  v3[32] = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  unsigned int v469 = (llvm::MachineFunction *)a2;
  v3[33] = *(void *)(a2 + 40);
  uint64_t v4 = (uint64_t *)v3[1];
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::LiveIntervals::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  v3[34] = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::LiveIntervals::ID);
  uint64_t v8 = (uint64_t *)v3[1];
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (v9 == v10)
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v9 != &llvm::MachineDominatorTree::ID)
    {
      v9 += 16;
      if (v9 == v10) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = *(void *)(v9 + 8);
  }
  v3[35] = (*(uint64_t (**)(uint64_t, void *))(*(void *)v11 + 96))(v11, &llvm::MachineDominatorTree::ID);
  uint64_t v12 = (uint64_t *)v3[1];
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (v13 == v14)
  {
LABEL_14:
    uint64_t v15 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v13 != &llvm::MachineLoopInfo::ID)
    {
      v13 += 16;
      if (v13 == v14) {
        goto LABEL_14;
      }
    }
    uint64_t v15 = *(void *)(v13 + 8);
  }
  v3[36] = (*(uint64_t (**)(uint64_t, void *))(*(void *)v15 + 96))(v15, &llvm::MachineLoopInfo::ID);
  v3[37] = *(void *)(*(void *)(a2 + 16) + 160);
  unint64_t v16 = *(unsigned int *)(v3[33] + 32);
  unsigned int v481 = dword_1EBCBF0D0;
  unsigned int v509 = 32;
  unsigned int v483 = v16;
  unint64_t v508 = v16;
  llvm::APInt::sqrt(&v508, (uint64_t)&v506);
  if (v507 > 0x40)
  {
    int v18 = 0;
    int64_t v19 = ((unint64_t)v507 + 63) >> 6;
    do
    {
      BOOL v20 = v19-- < 1;
      if (v20) {
        break;
      }
      unint64_t v21 = *(void *)(v506 + 8 * v19);
      v18 += __clz(v21);
    }
    while (!v21);
    unsigned int v22 = v507 | 0xFFFFFFC0;
    if ((v507 & 0x3F) == 0) {
      unsigned int v22 = 0;
    }
    int v17 = v18 + v22;
  }
  else
  {
    int v17 = v507 + __clz(v506) - 64;
  }
  unsigned int v505 = 32;
  unint64_t v504 = v507 + ~v17;
  llvm::APInt::operator*((uint64_t)&v504, &v506, (uint64_t)&v525);
  unint64_t v504 = v525;
  unsigned int v505 = v526;
  BOOL v23 = &unk_1CD91C000;
  uint64_t v498 = v3;
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*v3 + 240))(v3, a2))
  {
    uint64_t v24 = *(void *)(a2 + 328);
    uint64_t v525 = (uint64_t)v529;
    uint64_t v526 = v529;
    int v528 = 0;
    v530 = (char *)v532;
    uint64_t v527 = 0x100000008;
    v529[0] = v24;
    uint64_t v25 = *(void *)(v24 + 88);
    v532[0] = v24;
    v532[1] = v25;
    uint64_t v531 = 0x800000001;
    sub_1CB93B280((llvm::SmallPtrSetImplBase *)&v525);
    int v26 = 0;
    long long v540 = 0u;
    uint64_t v548 = 0;
    long long v547 = 0u;
    long long v546 = 0u;
    long long v545 = 0u;
    long long v544 = 0u;
    long long v543 = 0u;
    long long v542 = 0u;
    long long v541 = 0u;
    memset(&v538[1], 0, 72);
    v536 = &v538[2];
    uint64_t v537 = (uint64_t)&v538[2];
    v538[0] = 8;
    v539 = (char *)&v540 + 8;
    DWORD1(v540) = 8;
    while (1)
    {
      int v27 = v531;
      if (v531 == v26)
      {
        if (!v26)
        {
LABEL_134:
          if (v539 != (char *)&v540 + 8) {
            free(v539);
          }
          if ((uint64_t *)v537 != v536) {
            free((void *)v537);
          }
          if (v530 != (char *)v532) {
            free(v530);
          }
          if (v526 != (void *)v525) {
            free(v526);
          }
          break;
        }
        uint64_t v28 = &v530[16 * v26];
        uint64_t v29 = v539;
        __int16 v30 = v530;
        while (*(void *)v30 == *v29 && *((void *)v30 + 1) == v29[1])
        {
          v30 += 16;
          v29 += 2;
          if (v30 == v28) {
            goto LABEL_134;
          }
        }
      }
      uint64_t v32 = *(void *)&v530[16 * v531 - 16];
      uint64_t v490 = v32;
      uint64_t v494 = v32 + 48;
      unint64_t v33 = *(void *)(v32 + 56);
      if (v33 == v32 + 48) {
        goto LABEL_131;
      }
      do
      {
        if (!v33 || (unint64_t v34 = v33, (*(unsigned char *)v33 & 4) == 0))
        {
          unint64_t v34 = v33;
          if ((*(_WORD *)(v33 + 44) & 8) != 0)
          {
            unint64_t v34 = v33;
            do
              unint64_t v34 = *(void *)(v34 + 8);
            while ((*(_WORD *)(v34 + 44) & 8) != 0);
          }
        }
        *(void *)unsigned int v497 = *(void *)(v34 + 8);
        if ((*(unsigned int (**)(uint64_t *, unint64_t))(*v3 + 224))(v3, v33))
        {
          uint64_t v35 = *(void *)(v33 + 16);
          uint64_t v36 = *(unsigned __int8 *)(v35 + 4);
          if (*(unsigned __int16 *)(v35 + 2) > v36)
          {
            while (1)
            {
              unsigned int v37 = (_DWORD *)(*(void *)(v33 + 32) + 32 * v36);
              if ((*v37 & 0x10FFFFF) == 0) {
                break;
              }
LABEL_45:
              if (++v36 >= (unint64_t)*(unsigned __int16 *)(v35 + 2)) {
                goto LABEL_129;
              }
            }
            uint64_t v38 = v37[1];
            uint64_t v39 = v498[33];
            if ((v38 & 0x80000000) != 0) {
              uint64_t v40 = (uint64_t *)(*(void *)(v39 + 24) + 16 * (v38 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v40 = (uint64_t *)(*(void *)(v39 + 272) + 8 * v38);
            }
            uint64_t v41 = *v40;
            if (v41)
            {
              while ((*(unsigned char *)(v41 + 3) & 1) != 0)
              {
                uint64_t v41 = *(void *)(v41 + 24);
                if (!v41) {
                  goto LABEL_55;
                }
              }
              do
              {
                uint64_t v41 = *(void *)(v41 + 24);
                if (!v41) {
                  goto LABEL_45;
                }
              }
              while ((*(unsigned char *)(v41 + 3) & 1) != 0);
            }
LABEL_55:
            uint64_t v42 = v498[34];
            unint64_t v43 = v38 & 0x7FFFFFFF;
            int v44 = (void *)(v42 + 408);
            unint64_t v45 = *(unsigned int *)(v42 + 416);
            BOOL v73 = v43 >= v45;
            unint64_t v46 = v43 - v45;
            if (v73)
            {
              sub_1CB9153B8((uint64_t)v44, v46 + 1, *(void *)(v42 + 424));
LABEL_125:
              operator new();
            }
            unint64_t v47 = *(uint64_t **)(*v44 + 8 * v43);
            if (!v47) {
              goto LABEL_125;
            }
            uint64_t v48 = *(void *)(v42 + 288);
            __int16 v49 = *(_WORD *)(v33 + 44);
            unint64_t v50 = v33;
            if ((v49 & 4) != 0)
            {
              do
                unint64_t v50 = *(void *)v50 & 0xFFFFFFFFFFFFFFF8;
              while ((*(_WORD *)(v50 + 44) & 4) != 0);
            }
            unint64_t v51 = v33;
            if ((v49 & 8) != 0)
            {
              do
                unint64_t v51 = *(void *)(v51 + 8);
              while ((*(_WORD *)(v51 + 44) & 8) != 0);
            }
            unint64_t v52 = *(void *)(v51 + 8);
            if (v50 != v52)
            {
              while (1)
              {
                unsigned int v53 = **(unsigned __int16 **)(v50 + 16);
                BOOL v20 = v53 > 0x17;
                int v54 = (1 << v53) & 0x83E000;
                if (v20 || v54 == 0) {
                  break;
                }
                unint64_t v50 = *(void *)(v50 + 8);
                if (v50 == v52)
                {
                  unint64_t v50 = v52;
                  break;
                }
              }
            }
            uint64_t v56 = *(void *)(v48 + 368);
            uint64_t v57 = *(unsigned int *)(v48 + 384);
            if (v57)
            {
              LODWORD(v58) = ((v50 >> 4) ^ (v50 >> 9)) & (v57 - 1);
              uint64_t v59 = (uint64_t *)(v56 + 16 * v58);
              uint64_t v60 = *v59;
              if (v50 != *v59)
              {
                int v61 = 1;
                while (v60 != -4096)
                {
                  int v62 = v58 + v61++;
                  uint64_t v58 = v62 & (v57 - 1);
                  uint64_t v60 = *(void *)(v56 + 16 * v58);
                  if (v50 == v60)
                  {
                    uint64_t v59 = (uint64_t *)(v56 + 16 * v58);
                    goto LABEL_73;
                  }
                }
                goto LABEL_72;
              }
            }
            else
            {
LABEL_72:
              uint64_t v59 = (uint64_t *)(v56 + 16 * v57);
            }
LABEL_73:
            unint64_t v63 = v59[1] & 0xFFFFFFFFFFFFFFF8;
            unsigned int v64 = *((_DWORD *)v47 + 2);
            uint64_t v65 = *v47;
            if (v64)
            {
              uint64_t v66 = *(void *)(v65 + 24 * v64 - 16);
              unsigned int v67 = *(_DWORD *)(v63 + 24);
              unsigned int v68 = (v66 >> 1) & 3 | *(_DWORD *)((v66 & 0xFFFFFFFFFFFFFFF8) + 24);
              uint64_t v69 = *v47;
              unint64_t v70 = *((unsigned int *)v47 + 2);
              if (v67 < v68)
              {
                do
                {
                  unint64_t v71 = v70 >> 1;
                  uint64_t v72 = *(void *)(v69 + 24 * (v70 >> 1) + 8);
                  LODWORD(v72) = (v72 >> 1) & 3 | *(_DWORD *)((v72 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v70 -= (v70 >> 1) + 1;
                  BOOL v73 = v67 >= v72;
                  if (v67 >= v72) {
                    unint64_t v74 = v71 + 1;
                  }
                  else {
                    unint64_t v74 = 0;
                  }
                  v69 += 24 * v74;
                  if (!v73) {
                    unint64_t v70 = v71;
                  }
                }
                while (v70);
                goto LABEL_84;
              }
            }
            else
            {
              unsigned int v64 = 0;
            }
            uint64_t v69 = v65 + 24 * v64;
LABEL_84:
            uint64_t v75 = v65 + 24 * v64;
            uint64_t v76 = *(void *)(v69 + 16);
            unint64_t v77 = *(void *)(v69 + 8) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v78 = v69 + 24;
            BOOL v79 = v63 == v77 && v78 == v75;
            if (!v79 && *(void *)(v76 + 8) == v63) {
              uint64_t v76 = 0;
            }
            unint64_t v80 = *(void *)(v76 + 8);
            if (v80 >= 8)
            {
              unsigned int v81 = *(const llvm::MachineInstr **)((v80 & 0xFFFFFFFFFFFFFFF8) + 16);
              if (v81)
              {
                if ((*(unsigned int (**)(uint64_t *, const llvm::MachineInstr *))(*v498 + 216))(v498, v81))
                {
                  if (v33 == *(void *)(v490 + 56)) {
                    goto LABEL_100;
                  }
                  unint64_t v82 = *(void *)v33 & 0xFFFFFFFFFFFFFFF8;
                  if (!v82 || (*(unsigned char *)v82 & 4) == 0)
                  {
                    while ((*(_WORD *)(v82 + 44) & 4) != 0)
                      unint64_t v82 = *(void *)v82 & 0xFFFFFFFFFFFFFFF8;
                  }
                  if (v81 != (const llvm::MachineInstr *)v82)
                  {
LABEL_100:
                    if ((**((_DWORD **)v81 + 4) & 0x10FFFFF) == 0x1000000)
                    {
                      uint64_t v83 = v498[33];
                      unint64_t v84 = *(void *)(*(void *)(v83 + 24) + 16 * v43) & 0xFFFFFFFFFFFFFFF8;
                      uint64_t IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v83, "", 0);
                      unint64_t v86 = IncompleteVirtualRegister & 0x7FFFFFFF;
                      *(void *)(*(void *)(v83 + 24) + 16 * v86) = v84;
                      uint64_t v87 = *(void *)(v83 + 8);
                      if (v87) {
                        (*(void (**)(uint64_t, uint64_t))(*(void *)v87 + 24))(v87, IncompleteVirtualRegister);
                      }
                      unint64_t v88 = llvm::MachineFunction::CloneMachineInstr(v469, v81);
                      llvm::MachineOperand::setReg(*(void *)(v88 + 32), IncompleteVirtualRegister);
                      uint64_t v89 = *(void *)(v490 + 40);
                      *(void *)(v88 + 24) = v89;
                      uint64_t v90 = *(void *)(v89 + 32);
                      uint64_t v91 = *(unsigned int *)(v88 + 40);
                      if (v91)
                      {
                        uint64_t v97 = *(void *)(v88 + 32);
                        uint64_t v98 = *(void *)(v90 + 40);
                        uint64_t v99 = 32 * v91;
                        do
                        {
                          if (!*(unsigned char *)v97)
                          {
                            uint64_t v100 = *(unsigned int *)(v97 + 4);
                            if ((int)v100 >= 0) {
                              BOOL v101 = (uint64_t *)(*(void *)(v98 + 272) + 8 * v100);
                            }
                            else {
                              BOOL v101 = (uint64_t *)(*(void *)(v98 + 24) + 16 * (v100 & 0x7FFFFFFF) + 8);
                            }
                            uint64_t v102 = *v101;
                            if (*v101)
                            {
                              uint64_t v103 = *(void *)(v102 + 16);
                              *(void *)(v102 + 16) = v97;
                              *(void *)(v97 + 16) = v103;
                              if (*(unsigned char *)(v97 + 3))
                              {
                                *(void *)(v97 + 24) = v102;
                              }
                              else
                              {
                                *(void *)(v97 + 24) = 0;
                                BOOL v101 = (uint64_t *)(v103 + 24);
                              }
                            }
                            else
                            {
                              *(void *)(v97 + 16) = v97;
                              *(void *)(v97 + 24) = 0;
                            }
                            *BOOL v101 = v97;
                          }
                          v97 += 32;
                          v99 -= 32;
                        }
                        while (v99);
                      }
                      uint64_t v92 = *(void *)(v90 + 728);
                      if (v92) {
                        (*(void (**)(uint64_t, unint64_t))(*(void *)v92 + 24))(v92, v88);
                      }
                      unint64_t v93 = *(void *)v33 & 0xFFFFFFFFFFFFFFF8;
                      *(void *)unint64_t v88 = v93 | *(void *)v88 & 7;
                      *(void *)(v88 + 8) = v33;
                      *(void *)(v93 + 8) = v88;
                      *(void *)unint64_t v33 = *(void *)v33 & 7 | v88;
                      llvm::MachineOperand::setReg((uint64_t)v37, IncompleteVirtualRegister);
                      sub_1CB914C88(*(void *)(v498[34] + 288), v88, 0);
                      uint64_t v94 = v498[34];
                      unint64_t v95 = *(unsigned int *)(v94 + 416);
                      BOOL v73 = v86 >= v95;
                      unint64_t v96 = v86 - v95;
                      if (v73) {
                        sub_1CB9153B8(v94 + 408, v96 + 1, *(void *)(v94 + 424));
                      }
                      operator new();
                    }
                  }
                }
              }
            }
            goto LABEL_45;
          }
        }
LABEL_129:
        unint64_t v33 = *(void *)v497;
        __n128 v3 = v498;
      }
      while (*(void *)v497 != v494);
      int v27 = v531;
      BOOL v23 = (void *)&unk_1CD91C000;
LABEL_131:
      LODWORD(v531) = v27 - 1;
      if (v27 != 1) {
        sub_1CB93B280((llvm::SmallPtrSetImplBase *)&v525);
      }
      int v26 = v540;
    }
  }
  uint64_t v525 = 1;
  for (uint64_t i = 8; i != 520; i += 16)
    *(uint64_t *)((char *)&v525 + i) = -4096;
  v533 = v535;
  uint64_t v534 = 0x2000000000;
  unsigned int v522 = (llvm::MachineInstr **)v524;
  uint64_t v523 = 0x1000000000;
  uint64_t v105 = *((void *)v469 + 41);
  v536 = &v538[2];
  uint64_t v537 = (uint64_t)&v538[2];
  LODWORD(v538[1]) = 0;
  v539 = (char *)&v540 + 8;
  v538[0] = 0x100000008;
  v538[2] = v105;
  uint64_t v106 = *(void *)(v105 + 88);
  *((void *)&v540 + 1) = v105;
  *(void *)&long long v541 = v106;
  *(void *)&long long v540 = 0x800000001;
  sub_1CB93B280((llvm::SmallPtrSetImplBase *)&v536);
  int v107 = 0;
  LODWORD(v486) = 0;
  unsigned int v472 = 0;
  uint64_t v108 = 0;
  long long v519 = 0u;
  memset(v520, 0, sizeof(v520));
  uint64_t v521 = 0;
  memset(&v518[1], 0, 64);
  uint64_t v516 = (unsigned int **)&v518[2];
  uint64_t v517 = (uint64_t)&v518[2];
  v518[0] = v23[8];
  v520[1] = 8;
  int v109 = 1;
  *((void *)&v519 + 1) = &v520[2];
  while (1)
  {
    int v110 = v540;
    if (v540 != v107) {
      goto LABEL_155;
    }
    if (!v107) {
      break;
    }
    int v111 = &v539[16 * v107];
    uint64_t v112 = (void *)*((void *)&v519 + 1);
    BOOL v113 = v539;
    while (*(void *)v113 == *v112 && *((void *)v113 + 1) == v112[1])
    {
      v113 += 16;
      v112 += 2;
      if (v113 == v111) {
        goto LABEL_534;
      }
    }
LABEL_155:
    uint64_t v115 = *(void *)&v539[16 * v540 - 16];
    uint64_t v116 = v3[36];
    unsigned int v117 = *(_DWORD *)(v116 + 264);
    if (v117)
    {
      uint64_t v118 = *(void *)(v116 + 248);
      unsigned int v119 = v117 - 1;
      uint64_t v120 = ((v115 >> 4) ^ (v115 >> 9)) & (v117 - 1);
      uint64_t v121 = *(void *)(v118 + 16 * v120);
      if (v115 != v121)
      {
        int v122 = 1;
        while (v121 != -4096)
        {
          int v123 = v120 + v122++;
          uint64_t v120 = v123 & v119;
          uint64_t v121 = *(void *)(v118 + 16 * v120);
          if (v115 == v121) {
            goto LABEL_160;
          }
        }
LABEL_164:
        unsigned int v117 = 0;
        goto LABEL_165;
      }
LABEL_160:
      unsigned int v124 = *(void **)(v118 + 16 * v120 + 8);
      if (!v124) {
        goto LABEL_164;
      }
      unsigned int v117 = 0;
      do
      {
        unsigned int v124 = (void *)*v124;
        ++v117;
      }
      while (v124);
    }
LABEL_165:
    unsigned int v470 = v117;
    uint64_t v126 = *(void *)(v115 + 48);
    uint64_t v125 = (void *)(v115 + 48);
    unint64_t v127 = v126 & 0xFFFFFFFFFFFFFFF8;
    if ((v126 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(unsigned char *)v127 & 4) == 0)
    {
      while ((*(_WORD *)(v127 + 44) & 4) != 0)
        unint64_t v127 = *(void *)v127 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((void *)v127 != v125)
    {
      unsigned int v128 = (void *)v127;
      uint64_t v471 = v125;
      while (1)
      {
        uint64_t v479 = (uint64_t)v128;
        unint64_t v129 = *v128 & 0xFFFFFFFFFFFFFFF8;
        if (!v129 || (*(unsigned char *)v129 & 4) == 0)
        {
          while ((*(_WORD *)(v129 + 44) & 4) != 0)
            unint64_t v129 = *(void *)v129 & 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v476 = (void *)v129;
        uint64_t v130 = *(unsigned __int16 **)(v479 + 16);
        int v131 = *v130;
        if ((v131 - 9) <= 0x3C && ((1 << (v131 - 9)) & 0x1000000000000605) != 0
          || v131 == 0)
        {
          goto LABEL_520;
        }
        uint64_t v134 = *((void *)v130 + 1);
        if ((v134 & 0x10) != 0) {
          goto LABEL_520;
        }
        __int16 v135 = *(_WORD *)(v479 + 44);
        if ((v135 & 0xC) == 0 || (v135 & 4) != 0)
        {
          if ((v134 & 0x400) != 0) {
            goto LABEL_520;
          }
        }
        else
        {
          uint64_t v136 = v479;
          if ((v134 & 0x400) != 0) {
            goto LABEL_520;
          }
          while ((*(_WORD *)(v136 + 44) & 8) != 0)
          {
            uint64_t v136 = *(void *)(v136 + 8);
            if ((*(unsigned char *)(*(void *)(v136 + 16) + 9) & 4) != 0) {
              goto LABEL_520;
            }
          }
        }
        uint64_t v137 = v479;
        char v138 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v3 + 232))(v3, v479);
        unsigned int v139 = v472;
        if (v470 < v472) {
          char v140 = 1;
        }
        else {
          char v140 = v138;
        }
        char v480 = v140;
        if (v470 < v472) {
          unsigned int v139 = v470;
        }
        int v513 = (uint64_t *)v515;
        uint64_t v514 = 0x1000000000;
        __int16 v141 = *(_WORD *)(v479 + 44);
        unint64_t v142 = v479;
        if ((v141 & 4) != 0)
        {
          do
            unint64_t v142 = *(void *)v142 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v142 + 44) & 4) != 0);
        }
        uint64_t v143 = *(void *)(v3[34] + 288);
        if ((v141 & 8) != 0)
        {
          do
            uint64_t v137 = *(void *)(v137 + 8);
          while ((*(_WORD *)(v137 + 44) & 8) != 0);
        }
        uint64_t v144 = *(void *)(v137 + 8);
        unsigned int v472 = v139;
        if (v142 != v144)
        {
          while (1)
          {
            unsigned int v145 = **(unsigned __int16 **)(v142 + 16);
            BOOL v20 = v145 > 0x17;
            int v146 = (1 << v145) & 0x83E000;
            if (v20 || v146 == 0) {
              break;
            }
            unint64_t v142 = *(void *)(v142 + 8);
            if (v142 == v144)
            {
              unint64_t v142 = *(void *)(v137 + 8);
              break;
            }
          }
        }
        uint64_t v148 = *(void *)(v143 + 368);
        uint64_t v149 = *(unsigned int *)(v143 + 384);
        if (!v149) {
          goto LABEL_212;
        }
        LODWORD(v150) = ((v142 >> 4) ^ (v142 >> 9)) & (v149 - 1);
        uint64_t v151 = (uint64_t *)(v148 + 16 * v150);
        uint64_t v152 = *v151;
        if (v142 != *v151) {
          break;
        }
LABEL_213:
        unint64_t v486 = (v486 + 1);
        if (!v534) {
          goto LABEL_408;
        }
        uint64_t v155 = v533;
        int v484 = &v533[32 * v534];
        uint64_t v156 = v151[1];
        unint64_t v478 = v156 & 0xFFFFFFFFFFFFFFF8;
        unsigned int v477 = (v156 >> 1) & 3;
        do
        {
          int v489 = v109;
          uint64_t v158 = *(void *)v155;
          unint64_t v157 = *((void *)v155 + 1);
          uint64_t v500 = *(void *)v155;
          unint64_t v501 = v157;
          if ((v157 & 4) != 0 && (v157 & 0xFFFFFFFFFFFFFFF8) != 0) {
            operator new();
          }
          unint64_t v159 = *((void *)v155 + 2);
          int v503 = *((_DWORD *)v155 + 6);
          unint64_t v502 = v159;
          unsigned int v495 = **(unsigned __int16 **)(v158 + 16);
          if (v483 > v481 && v504 < v486)
          {
            int v109 = 0;
            goto LABEL_389;
          }
          if ((v480 & 1) == 0)
          {
            if ((v486 - v503) < 0xE) {
              goto LABEL_388;
            }
            if ((v486 - v503) <= 0x17)
            {
              uint64_t v176 = v155;
              int v177 = sub_1CBA72BAC(v3, &v502, v158, 0);
              uint64_t v155 = v176;
              if (!v177) {
                goto LABEL_388;
              }
            }
          }
          __int16 v160 = *(_WORD *)(v158 + 44);
          unint64_t v161 = v158;
          if ((v160 & 4) != 0)
          {
            do
              unint64_t v161 = *(void *)v161 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v161 + 44) & 4) != 0);
          }
          uint64_t v162 = v158;
          if ((v160 & 8) != 0)
          {
            do
              uint64_t v162 = *(void *)(v162 + 8);
            while ((*(_WORD *)(v162 + 44) & 8) != 0);
          }
          unint64_t v163 = *(void *)(v162 + 8);
          unsigned int v164 = v155;
          if (v161 != v163)
          {
            while (1)
            {
              unsigned int v165 = **(unsigned __int16 **)(v161 + 16);
              BOOL v20 = v165 > 0x17;
              int v166 = (1 << v165) & 0x83E000;
              if (v20 || v166 == 0) {
                break;
              }
              unint64_t v161 = *(void *)(v161 + 8);
              if (v161 == v163)
              {
                unint64_t v161 = v163;
                break;
              }
            }
          }
          uint64_t v168 = *(void *)(v3[34] + 288);
          uint64_t v169 = *(void *)(v168 + 368);
          uint64_t v170 = *(unsigned int *)(v168 + 384);
          if (v170)
          {
            LODWORD(v171) = ((v161 >> 4) ^ (v161 >> 9)) & (v170 - 1);
            unsigned int v172 = (uint64_t *)(v169 + 16 * v171);
            uint64_t v173 = *v172;
            if (v161 == *v172) {
              goto LABEL_242;
            }
            int v174 = 1;
            while (v173 != -4096)
            {
              int v175 = v171 + v174++;
              uint64_t v171 = v175 & (v170 - 1);
              uint64_t v173 = *(void *)(v169 + 16 * v171);
              if (v161 == v173)
              {
                unsigned int v172 = (uint64_t *)(v169 + 16 * v171);
                goto LABEL_242;
              }
            }
          }
          unsigned int v172 = (uint64_t *)(v169 + 16 * v170);
LABEL_242:
          uint64_t v178 = v172[1];
          if (v514 >= (unint64_t)HIDWORD(v514)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v513[v514] = v158;
          LODWORD(v514) = v514 + 1;
          uint64_t v155 = v164;
          if ((*(_DWORD *)((v178 & 0xFFFFFFFFFFFFFFF8) + 24) | (v178 >> 1) & 3) > (*(_DWORD *)(v478 + 24) | v477)) {
            goto LABEL_388;
          }
          int v474 = v164;
          if ((v501 & 4) != 0)
          {
            uint64_t v180 = *(unint64_t **)(v501 & 0xFFFFFFFFFFFFFFF8);
            unsigned int v179 = &v180[*(unsigned int *)((v501 & 0xFFFFFFFFFFFFFFF8) + 8)];
          }
          else
          {
            unsigned int v179 = &v501 + (v501 > 7);
            uint64_t v180 = &v501;
          }
          uint64_t v181 = 0xFFFFFFFFLL;
          while (v180 != v179)
          {
            uint64_t v182 = (_DWORD *)*v180++;
            unsigned int v183 = (*v182 >> 8) & 0xFFF;
            if (v183 == v181) {
              unsigned int v184 = v181;
            }
            else {
              unsigned int v184 = 0;
            }
            if (v181 == -1) {
              uint64_t v181 = v183;
            }
            else {
              uint64_t v181 = v184;
            }
          }
          uint64_t v473 = *(unsigned int *)(*(void *)(v158 + 32) + 4);
          unint64_t v475 = v473 & 0x7FFFFFFF;
          unint64_t v487 = *(void *)(*(void *)(v3[33] + 24) + 16 * v475) & 0xFFFFFFFFFFFFFFF8;
          if (v501 >= 8)
          {
            unint64_t v210 = v501 & 0xFFFFFFFFFFFFFFF8;
            if (((v501 & 4) == 0 || !v210) && (v501 & 4) == 0) {
              goto LABEL_285;
            }
            if (*(_DWORD *)(v210 + 8))
            {
              unint64_t v210 = *(void *)(*(void *)v210 + 8 * *(unsigned int *)(v210 + 8) - 8);
LABEL_285:
              uint64_t v211 = *(uint64_t **)(v210 + 8);
              int v510 = v211;
              sub_1CBA72BAC(v3, (unint64_t *)&v510, v158, 0);
              unsigned int v499 = v495;
              if (v181
                && (*(unsigned int (**)(uint64_t *, uint64_t, unsigned int *))(*v3 + 288))(v3, v158, &v499))
              {
                uint64_t v212 = (*(uint64_t (**)(uint64_t *))(*v3 + 248))(v3);
                char v213 = 1;
              }
              else
              {
                char v213 = 0;
                uint64_t v212 = v487;
              }
              uint64_t v214 = v3[33];
              uint64_t v215 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v214, "", 0);
              unint64_t v216 = v215 & 0x7FFFFFFF;
              *(void *)(*(void *)(v214 + 24) + 16 * v216) = v212 & 0xFFFFFFFFFFFFFFFBLL;
              uint64_t v217 = *(void *)(v214 + 8);
              if (v217) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v217 + 24))(v217, v215);
              }
              sub_1CB84B030(v211[3], (uint64_t)v510, (unsigned __int8 **)(v158 + 56), *(void *)(v3[31] + 8) + 48 * v499, v215);
              BOOL v219 = v218;
              if (llvm::MachineInstr::getNumExplicitOperands(v158) >= 2)
              {
                uint64_t v220 = 32;
                unint64_t v221 = 1;
                do
                {
                  llvm::MachineInstr::addOperand(v219, *(llvm::MachineFunction **)(*((void *)v219 + 3) + 32), (const llvm::MachineOperand *)(*(void *)(v158 + 32) + v220));
                  ++v221;
                  v220 += 32;
                }
                while (v221 < llvm::MachineInstr::getNumExplicitOperands(v158));
              }
              sub_1CB914C88(*(void *)(v3[34] + 288), (uint64_t)v219, 0);
              if (v213) {
                (*(void (**)(uint64_t *, void, uint64_t, llvm::MachineInstr *))(*v3 + 312))(v3, v495, v181, v219);
              }
              BOOL v222 = &v501;
              if ((v501 & 4) != 0)
              {
                BOOL v222 = *(unint64_t **)(v501 & 0xFFFFFFFFFFFFFFF8);
                unint64_t v223 = &v222[*(unsigned int *)((v501 & 0xFFFFFFFFFFFFFFF8) + 8)];
              }
              else
              {
                unint64_t v223 = &v501 + (v501 > 7);
              }
              if (v222 == v223)
              {
                uint64_t v224 = v3[34];
                unint64_t v225 = *(unsigned int *)(v224 + 416);
                BOOL v73 = v216 >= v225;
                unint64_t v226 = v216 - v225;
                if (v73) {
                  sub_1CB9153B8(v224 + 408, v226 + 1, *(void *)(v224 + 424));
                }
                operator new();
              }
              llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v3[35]);
              llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates();
            }
          }
          uint64_t v185 = v3[34];
          unsigned int v186 = (void *)(v185 + 408);
          unint64_t v187 = *(unsigned int *)(v185 + 416);
          BOOL v73 = v475 >= v187;
          unint64_t v188 = v475 - v187;
          if (v73)
          {
            sub_1CB9153B8((uint64_t)v186, v188 + 1, *(void *)(v185 + 424));
LABEL_399:
            operator new();
          }
          uint64_t v189 = *(void *)(*v186 + 8 * v475);
          if (!v189) {
            goto LABEL_399;
          }
          llvm::LiveIntervals::shrinkToUses((void *)v185, v189, 0);
          unsigned int v499 = 0;
          unsigned int v190 = *(_DWORD *)(v189 + 8);
          if (v190
            && (**(void **)v189 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(*(void *)v189 + 24 * v190 - 16) & 0xFFFFFFFFFFFFFFF8))
          {
            uint64_t v191 = (*(uint64_t (**)(uint64_t *))(*v498 + 256))(v498);
            uint64_t v155 = v474;
            if (v191 != v487) {
              goto LABEL_387;
            }
            if (!*(unsigned char *)(v498[33] + 16)) {
              goto LABEL_387;
            }
            int v192 = (*(uint64_t (**)(uint64_t *, uint64_t, unsigned int *))(*v498 + 288))(v498, v158, &v499);
            uint64_t v155 = v474;
            if (!v192) {
              goto LABEL_387;
            }
            uint64_t v193 = *(void *)(v189 + 104);
            if (!v193) {
              goto LABEL_387;
            }
            uint64_t v194 = 0;
            do
            {
              unsigned int v195 = *(_DWORD *)(v193 + 8);
              if (v195)
              {
                if ((**(void **)v193 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(*(void *)v193 + 24 * v195 - 16) & 0xFFFFFFFFFFFFFFF8)) {
                  uint64_t v194 = v194 | *(_DWORD *)(v193 + 112);
                }
                uint64_t v155 = v474;
              }
              uint64_t v193 = *(void *)(v193 + 104);
            }
            while (v193);
            if ((v194 - 1) >= 2) {
              goto LABEL_387;
            }
            uint64_t v196 = v498[33];
            uint64_t v197 = (*(uint64_t (**)(uint64_t *))(*v498 + 248))(v498);
            uint64_t v198 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v196, "", 0);
            unint64_t v491 = v198 & 0x7FFFFFFF;
            *(void *)(*(void *)(v196 + 24) + 16 * v491) = v197 & 0xFFFFFFFFFFFFFFFBLL;
            uint64_t v199 = *(void *)(v196 + 8);
            if (v199) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v199 + 24))(v199, v198);
            }
            sub_1CB84B030(*(void *)(v158 + 24), v158, (unsigned __int8 **)(v158 + 56), *(void *)(v498[31] + 8) + 48 * v499, v198);
            uint64_t v201 = v200;
            if (llvm::MachineInstr::getNumExplicitOperands(v158) >= 2)
            {
              uint64_t v202 = 32;
              unint64_t v203 = 1;
              do
              {
                llvm::MachineInstr::addOperand(v201, *(llvm::MachineFunction **)(*((void *)v201 + 3) + 32), (const llvm::MachineOperand *)(*(void *)(v158 + 32) + v202));
                ++v203;
                v202 += 32;
              }
              while (v203 < llvm::MachineInstr::getNumExplicitOperands(v158));
            }
            uint64_t v204 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v498 + 272))(v498, v194);
            (*(void (**)(uint64_t *, void, uint64_t, llvm::MachineInstr *))(*v498 + 312))(v498, v495, v204, v201);
            sub_1CB914C88(*(void *)(v498[34] + 288), (uint64_t)v201, 0);
            int v510 = &v512;
            uint64_t v511 = 0x800000000;
            uint64_t v205 = v498[33];
            if ((v473 & 0x80000000) != 0) {
              uint64_t v206 = (uint64_t *)(*(void *)(v205 + 24) + 16 * v475 + 8);
            }
            else {
              uint64_t v206 = (uint64_t *)(*(void *)(v205 + 272) + 8 * v473);
            }
            uint64_t v227 = *v206;
            if (!*v206) {
              goto LABEL_367;
            }
            while ((*(unsigned char *)(v227 + 3) & 1) != 0)
            {
              uint64_t v227 = *(void *)(v227 + 24);
              if (!v227) {
                goto LABEL_367;
              }
            }
            unsigned int v228 = 0;
            unsigned int v229 = 8;
LABEL_310:
            if (v228 >= v229) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v510 + v228) = v227;
            unsigned int v228 = v511 + 1;
            LODWORD(v511) = v511 + 1;
            while (1)
            {
              uint64_t v227 = *(void *)(v227 + 24);
              if (!v227) {
                break;
              }
              if ((*(unsigned char *)(v227 + 3) & 1) == 0)
              {
                unsigned int v229 = HIDWORD(v511);
                goto LABEL_310;
              }
            }
            if (!v228)
            {
LABEL_367:
              uint64_t v264 = v498[34];
              unint64_t v265 = *(unsigned int *)(v264 + 416);
              BOOL v73 = v491 >= v265;
              unint64_t v266 = v491 - v265;
              if (v73) {
                sub_1CB9153B8(v264 + 408, v266 + 1, *(void *)(v264 + 424));
              }
              operator new();
            }
            int v230 = (uint64_t *)v510;
            uint64_t v231 = (uint64_t *)((char *)v510 + 8 * v228);
            while (2)
            {
              unint64_t v232 = *(void *)(*v230 + 8);
              uint64_t v233 = *(void *)(v498[34] + 288);
              uint64_t v234 = *(void *)(v232 + 24);
              unint64_t v235 = v232;
              while (v235 != *(void *)(v234 + 56))
              {
                unint64_t v235 = *(void *)v235 & 0xFFFFFFFFFFFFFFF8;
                if (!v235 || (*(unsigned char *)v235 & 4) == 0)
                {
                  while ((*(_WORD *)(v235 + 44) & 4) != 0)
                    unint64_t v235 = *(void *)v235 & 0xFFFFFFFFFFFFFFF8;
                }
                uint64_t v236 = *(void *)(v233 + 368);
                uint64_t v237 = *(unsigned int *)(v233 + 384);
                if (v237)
                {
                  LODWORD(v238) = ((v235 >> 4) ^ (v235 >> 9)) & (v237 - 1);
                  unsigned int v239 = (uint64_t *)(v236 + 16 * v238);
                  uint64_t v240 = *v239;
                  if (v235 != *v239)
                  {
                    int v241 = 1;
                    do
                    {
                      if (v240 == -4096) {
                        goto LABEL_330;
                      }
                      int v242 = v238 + v241++;
                      uint64_t v238 = v242 & (v237 - 1);
                      uint64_t v240 = *(void *)(v236 + 16 * v238);
                    }
                    while (v235 != v240);
                    unsigned int v239 = (uint64_t *)(v236 + 16 * v238);
                  }
                }
                else
                {
LABEL_330:
                  unsigned int v239 = (uint64_t *)(v236 + 16 * v237);
                }
                if (v239 != (uint64_t *)(v236 + 16 * v237))
                {
                  uint64_t v243 = v239 + 1;
                  goto LABEL_333;
                }
              }
              uint64_t v243 = (void *)(*(void *)(v233 + 392) + 16 * *(unsigned int *)(v234 + 24));
LABEL_333:
              unint64_t v244 = *v243 & 0xFFFFFFFFFFFFFFF8;
              unsigned int v245 = *(_DWORD *)(v189 + 8);
              uint64_t v246 = *(void **)v189;
              if (v245)
              {
                uint64_t v247 = v246[3 * v245 - 2];
                unsigned int v248 = *(_DWORD *)(v244 + 24);
                unsigned int v249 = (v247 >> 1) & 3 | *(_DWORD *)((v247 & 0xFFFFFFFFFFFFFFF8) + 24);
                unint64_t v250 = *(void **)v189;
                unint64_t v251 = *(unsigned int *)(v189 + 8);
                if (v248 < v249)
                {
                  do
                  {
                    unint64_t v252 = v251 >> 1;
                    uint64_t v253 = v250[3 * (v251 >> 1) + 1];
                    LODWORD(v253) = (v253 >> 1) & 3 | *(_DWORD *)((v253 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v251 -= (v251 >> 1) + 1;
                    BOOL v254 = v248 >= v253;
                    if (v248 >= v253) {
                      unint64_t v255 = v252 + 1;
                    }
                    else {
                      unint64_t v255 = 0;
                    }
                    v250 += 3 * v255;
                    if (!v254) {
                      unint64_t v251 = v252;
                    }
                  }
                  while (v251);
LABEL_344:
                  unsigned int v256 = &v246[3 * v245];
                  if (v250 == v256) {
                    goto LABEL_355;
                  }
                  unsigned int v257 = *(_DWORD *)((*v250 & 0xFFFFFFFFFFFFFFF8) + 24);
                  unsigned int v258 = *(_DWORD *)(v244 + 24);
                  if (((*v250 >> 1) & 3 | v257) <= v258 && v244 == (v250[1] & 0xFFFFFFFFFFFFFFF8))
                  {
                    v250 += 3;
                    if (v250 != v256)
                    {
                      unsigned int v257 = *(_DWORD *)((*v250 & 0xFFFFFFFFFFFFFFF8) + 24);
                      goto LABEL_349;
                    }
LABEL_355:
                    uint64_t v259 = 0;
LABEL_356:
                    if (**(unsigned __int16 **)(v232 + 16) - 13 <= 4)
                    {
                      unsigned int v261 = 0;
                      goto LABEL_363;
                    }
                  }
                  else
                  {
LABEL_349:
                    if (v258 < v257) {
                      goto LABEL_355;
                    }
                    uint64_t v259 = v250[2];
                    if ((~*((_DWORD *)v250 + 2) & 6) == 0 || v259 == 0) {
                      goto LABEL_356;
                    }
                  }
                  unint64_t v262 = *(void *)(v259 + 8);
                  if (v262 < 8) {
                    uint64_t v263 = 0;
                  }
                  else {
                    uint64_t v263 = *(void *)((v262 & 0xFFFFFFFFFFFFFFF8) + 16);
                  }
                  if (v263 == v158)
                  {
                    unsigned int v261 = v198;
LABEL_363:
                    llvm::MachineOperand::setReg(*v230, v261);
                    *(_DWORD *)*v230 &= 0xFFF000FF;
                  }
                  if (++v230 == v231) {
                    goto LABEL_367;
                  }
                  continue;
                }
              }
              else
              {
                unsigned int v245 = 0;
              }
              break;
            }
            unint64_t v250 = &v246[3 * v245];
            goto LABEL_344;
          }
          uint64_t v209 = *(void *)(v189 + 104);
          unsigned int v208 = (void *)(v189 + 104);
          uint64_t v207 = v209;
          uint64_t v155 = v474;
          if (!v209) {
            goto LABEL_385;
          }
          while (1)
          {
            uint64_t v272 = v207;
            if (!*(_DWORD *)(v207 + 8)) {
              break;
            }
LABEL_384:
            unsigned int v208 = (void *)(v207 + 104);
            uint64_t v207 = *(void *)(v207 + 104);
            if (!v207) {
              goto LABEL_385;
            }
          }
          while (1)
          {
            uint64_t v270 = *(void *)(v272 + 96);
            uint64_t v207 = *(void *)(v272 + 104);
            *(void *)(v272 + 96) = 0;
            if (v270)
            {
              uint64_t v269 = v155;
              sub_1CB833A08(v270, *(void **)(v270 + 8));
              MEMORY[0x1D25D9CE0](v270, 0x1020C4062D53EE8);
              uint64_t v155 = v269;
            }
            uint64_t v271 = *(void **)(v272 + 64);
            if (v271 != (void *)(v272 + 80))
            {
              uint64_t v268 = v155;
              free(v271);
              uint64_t v155 = v268;
            }
            if (*(void *)v272 == v272 + 16) {
              break;
            }
            uint64_t v267 = v155;
            free(*(void **)v272);
            uint64_t v155 = v267;
            if (!v207) {
              goto LABEL_396;
            }
LABEL_381:
            uint64_t v272 = v207;
            if (*(_DWORD *)(v207 + 8))
            {
              *unsigned int v208 = v207;
              goto LABEL_384;
            }
          }
          if (v207) {
            goto LABEL_381;
          }
LABEL_396:
          *unsigned int v208 = 0;
LABEL_385:
          if (v523 >= (unint64_t)HIDWORD(v523)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v522[v523] = (llvm::MachineInstr *)v158;
          LODWORD(v523) = v523 + 1;
LABEL_387:
          uint64_t v108 = 1;
          __n128 v3 = v498;
LABEL_388:
          int v109 = v489;
LABEL_389:
          if ((v501 & 4) != 0)
          {
            __int16 v273 = (void **)(v501 & 0xFFFFFFFFFFFFFFF8);
            if ((v501 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              unint64_t v274 = v155;
              if (*v273 != v273 + 2) {
                free(*v273);
              }
              MEMORY[0x1D25D9CE0](v273, 0x1080C40ED926357);
              uint64_t v155 = v274;
            }
          }
          v155 += 32;
        }
        while (v155 != v484);
        uint64_t v275 = v513;
        if (v514)
        {
          uint64_t v276 = 8 * v514;
          do
          {
            uint64_t v277 = *v275++;
            sub_1CBA72FE8((uint64_t)&v525, v277);
            v276 -= 8;
          }
          while (v276);
          uint64_t v275 = v513;
        }
        if (v275 != (uint64_t *)v515) {
          free(v275);
        }
LABEL_408:
        uint64_t v125 = v471;
        unsigned int v128 = v476;
        if (v480) {
          goto LABEL_521;
        }
        if ((v109 & 1) == 0)
        {
          int v109 = 0;
          goto LABEL_521;
        }
        if (((*(uint64_t (**)(uint64_t *, void))(*v3 + 184))(v3, **(unsigned __int16 **)(v479 + 16)) & 1) != 0
          || (*(unsigned char *)(*(void *)(v479 + 16) + 9) & 0x20) != 0)
        {
          if (v525)
          {
            int v344 = 32;
            int v345 = (void **)&v526;
            goto LABEL_504;
          }
          int v345 = (void **)v526;
          int v344 = v527;
          if (!v527)
          {
            uint64_t v347 = 0;
            goto LABEL_511;
          }
LABEL_504:
          int v346 = v344 - 1;
          LODWORD(v347) = (v344 - 1) & ((v479 >> 4) ^ (v479 >> 9));
          uint64_t v348 = &v345[2 * v347];
          v349 = *v348;
          if (*v348 != (void *)v479)
          {
            int v350 = 1;
            while (v349 != (void *)-4096)
            {
              int v351 = v347 + v350++;
              uint64_t v347 = v351 & v346;
              v349 = v345[2 * v347];
              if (v349 == (void *)v479) {
                goto LABEL_511;
              }
            }
            if (v525)
            {
              int v345 = (void **)&v526;
              uint64_t v347 = 32;
            }
            else
            {
              int v345 = (void **)v526;
              uint64_t v347 = v527;
            }
LABEL_511:
            uint64_t v348 = &v345[2 * v347];
          }
          if (v525) {
            uint64_t v352 = (void **)&v526;
          }
          else {
            uint64_t v352 = (void **)v526;
          }
          unsigned int v353 = v527;
          if (v525) {
            unsigned int v353 = 32;
          }
          if (&v352[2 * v353] != v348) {
            sub_1CBA72FE8((uint64_t)&v525, v479);
          }
          int v109 = 1;
          uint64_t v125 = v471;
LABEL_520:
          unsigned int v128 = v476;
          goto LABEL_521;
        }
        unsigned int v128 = v476;
        if (*(_DWORD *)(v479 + 40))
        {
          uint64_t v278 = v108;
          unint64_t v279 = 0;
          uint64_t v280 = v479;
          uint64_t v125 = v471;
          while (1)
          {
            unint64_t v281 = v280;
            uint64_t v282 = *(void *)(v280 + 32) + 32 * v279;
            if ((*(_DWORD *)v282 & 0x130000FF) != 0) {
              goto LABEL_459;
            }
            int v283 = *(_DWORD *)(v282 + 4);
            if ((v283 - 1) < 0x3FFFFFFF) {
              goto LABEL_459;
            }
            if (((*(_DWORD *)v282 >> 8) & 0xFFF) != 0)
            {
              int v284 = (*(uint64_t (**)(uint64_t *))(*v3 + 264))(v3);
              uint64_t v125 = v471;
              if (!v284) {
                goto LABEL_459;
              }
            }
            uint64_t v285 = v3[34];
            uint64_t v286 = v283 & 0x7FFFFFFF;
            unint64_t v287 = (void *)(v285 + 408);
            uint64_t v288 = *(unsigned int *)(v285 + 416);
            if ((v283 & 0x7FFFFFFFu) >= v288)
            {
              sub_1CB9153B8((uint64_t)v287, v286 - v288 + 1, *(void *)(v285 + 424));
LABEL_477:
              operator new();
            }
            uint64_t v289 = *(uint64_t **)(*v287 + 8 * v286);
            if (!v289) {
              goto LABEL_477;
            }
            uint64_t v290 = *(void *)(v285 + 288);
            __int16 v291 = *(_WORD *)(v281 + 44);
            unint64_t v292 = v281;
            if ((v291 & 4) != 0)
            {
              do
                unint64_t v292 = *(void *)v292 & 0xFFFFFFFFFFFFFFF8;
              while ((*(_WORD *)(v292 + 44) & 4) != 0);
            }
            unint64_t v293 = v281;
            if ((v291 & 8) != 0)
            {
              do
                unint64_t v293 = *(void *)(v293 + 8);
              while ((*(_WORD *)(v293 + 44) & 8) != 0);
            }
            unint64_t v294 = *(void *)(v293 + 8);
            if (v292 != v294)
            {
              while (1)
              {
                unsigned int v295 = **(unsigned __int16 **)(v292 + 16);
                BOOL v20 = v295 > 0x17;
                int v296 = (1 << v295) & 0x83E000;
                if (v20 || v296 == 0) {
                  break;
                }
                unint64_t v292 = *(void *)(v292 + 8);
                if (v292 == v294)
                {
                  unint64_t v292 = v294;
                  break;
                }
              }
            }
            uint64_t v298 = *(void *)(v290 + 368);
            uint64_t v299 = *(unsigned int *)(v290 + 384);
            if (v299)
            {
              LODWORD(v300) = ((v292 >> 4) ^ (v292 >> 9)) & (v299 - 1);
              unint64_t v301 = (uint64_t *)(v298 + 16 * v300);
              uint64_t v302 = *v301;
              if (v292 == *v301) {
                goto LABEL_436;
              }
              int v303 = 1;
              while (v302 != -4096)
              {
                int v304 = v300 + v303++;
                uint64_t v300 = v304 & (v299 - 1);
                uint64_t v302 = *(void *)(v298 + 16 * v300);
                if (v292 == v302)
                {
                  unint64_t v301 = (uint64_t *)(v298 + 16 * v300);
                  goto LABEL_436;
                }
              }
            }
            unint64_t v301 = (uint64_t *)(v298 + 16 * v299);
LABEL_436:
            unint64_t v305 = v301[1] & 0xFFFFFFFFFFFFFFF8;
            unsigned int v306 = *((_DWORD *)v289 + 2);
            uint64_t v307 = *v289;
            if (!v306)
            {
              unsigned int v306 = 0;
LABEL_446:
              uint64_t v125 = v471;
              uint64_t v311 = v307 + 24 * v306;
              goto LABEL_447;
            }
            uint64_t v308 = *(void *)(v307 + 24 * v306 - 16);
            unsigned int v309 = *(_DWORD *)(v305 + 24);
            unsigned int v310 = (v308 >> 1) & 3 | *(_DWORD *)((v308 & 0xFFFFFFFFFFFFFFF8) + 24);
            uint64_t v311 = *v289;
            unint64_t v312 = *((unsigned int *)v289 + 2);
            if (v309 >= v310) {
              goto LABEL_446;
            }
            do
            {
              unint64_t v313 = v312 >> 1;
              uint64_t v314 = *(void *)(v311 + 24 * (v312 >> 1) + 8);
              LODWORD(v314) = (v314 >> 1) & 3 | *(_DWORD *)((v314 & 0xFFFFFFFFFFFFFFF8) + 24);
              v312 -= (v312 >> 1) + 1;
              BOOL v315 = v309 >= v314;
              if (v309 >= v314) {
                unint64_t v316 = v313 + 1;
              }
              else {
                unint64_t v316 = 0;
              }
              v311 += 24 * v316;
              if (!v315) {
                unint64_t v312 = v313;
              }
            }
            while (v312);
            uint64_t v125 = v471;
LABEL_447:
            uint64_t v317 = v307 + 24 * v306;
            uint64_t v318 = *(void *)(v311 + 16);
            unint64_t v319 = *(void *)(v311 + 8) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v320 = v311 + 24;
            BOOL v321 = v305 == v319 && v320 == v317;
            if (!v321 && *(void *)(v318 + 8) == v305) {
              uint64_t v318 = 0;
            }
            unint64_t v322 = *(void *)(v318 + 8);
            if (v322 < 8) {
              goto LABEL_459;
            }
            uint64_t v323 = *(void *)((v322 & 0xFFFFFFFFFFFFFFF8) + 16);
            if (!v323) {
              goto LABEL_459;
            }
            if (((*(uint64_t (**)(uint64_t *, void))(*v3 + 184))(v3, **(unsigned __int16 **)(v323 + 16)) & 1) != 0
              || (*(unsigned char *)(*(void *)(v323 + 16) + 9) & 0x20) != 0)
            {
              uint64_t v324 = *(_DWORD **)(v323 + 32);
              uint64_t v125 = v471;
              if ((v324[1] - 1) < 0x3FFFFFFF) {
                goto LABEL_459;
              }
              unsigned int v128 = v476;
              if ((*v324 & 0xFFF00) != 0) {
                goto LABEL_460;
              }
              uint64_t v325 = sub_1CBA731F0((int *)&v525, v323);
              if ((unsigned char *)v325 != &v533[32 * v534])
              {
                unint64_t v326 = *(void *)(v325 + 8);
                if (v326 <= 7)
                {
                  *(void *)(v325 + 8) = v282 & 0xFFFFFFFFFFFFFFFBLL;
                  uint64_t v125 = v471;
                }
                else
                {
                  uint64_t v125 = v471;
                  if ((v326 & 4) == 0) {
                    operator new();
                  }
                  unint64_t v327 = v326 & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v328 = *(unsigned int *)((v326 & 0xFFFFFFFFFFFFFFF8) + 8);
                  if (v328 >= *(unsigned int *)((v326 & 0xFFFFFFFFFFFFFFF8) + 12)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*(void *)v327 + 8 * v328) = v282;
                  ++*(_DWORD *)(v327 + 8);
                }
                *(void *)(v325 + 16) = v281;
                *(_DWORD *)(v325 + 24) = v486;
                goto LABEL_459;
              }
              int v510 = (void *)v323;
              LODWORD(v511) = 0;
              sub_1CBA73414((uint64_t)&v525, &v510, &v511, (uint64_t)&v513);
              if (v515[0])
              {
                unint64_t v329 = v282 & 0xFFFFFFFFFFFFFFFBLL;
                uint64_t v330 = v534;
                *((_DWORD *)v513 + 2) = v534;
                uint64_t v125 = v471;
                if (v330 < HIDWORD(v534))
                {
                  int v331 = &v533[32 * v330];
                  *(void *)int v331 = v323;
                  *((void *)v331 + 1) = v329;
                  *((void *)v331 + 2) = v281;
                  *((_DWORD *)v331 + 6) = v486;
                  LODWORD(v534) = v534 + 1;
                  goto LABEL_459;
                }
                if (HIDWORD(v534) == -1) {
                  sub_1CD0A89A8(0xFFFFFFFFuLL);
                }
                if (((2 * HIDWORD(v534)) | 1uLL) >= 0xFFFFFFFF) {
                  uint64_t v332 = 0xFFFFFFFFLL;
                }
                else {
                  uint64_t v332 = (2 * HIDWORD(v534)) | 1;
                }
                uint64_t v333 = (char *)malloc_type_malloc(32 * v332, 0x4065EBACuLL);
                if (!v333) {
                  llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
                }
                int v334 = v333;
                unint64_t v335 = &v333[32 * v534];
                *(void *)unint64_t v335 = v323;
                *((void *)v335 + 1) = v329;
                *((void *)v335 + 2) = v281;
                *((_DWORD *)v335 + 6) = v486;
                uint64_t v336 = v533;
                if (v534)
                {
                  uint64_t v337 = &v533[32 * v534];
                  unsigned int v338 = v334;
                  do
                  {
                    *(void *)unsigned int v338 = *v336;
                    *((void *)v338 + 1) = v336[1];
                    v336[1] = 0;
                    uint64_t v339 = v336[2];
                    *((_DWORD *)v338 + 6) = *((_DWORD *)v336 + 6);
                    *((void *)v338 + 2) = v339;
                    v336 += 4;
                    v338 += 32;
                  }
                  while (v336 != (void *)v337);
                  uint64_t v336 = v533;
                  if (v534)
                  {
                    int32x2_t v340 = v533 - 24;
                    uint64_t v341 = 32 * v534;
                    do
                    {
                      uint64_t v342 = *(void *)&v340[v341];
                      if ((v342 & 4) != 0)
                      {
                        BOOL v343 = (void **)(v342 & 0xFFFFFFFFFFFFFFF8);
                        if ((v342 & 0xFFFFFFFFFFFFFFF8) != 0)
                        {
                          if (*v343 != v343 + 2) {
                            free(*v343);
                          }
                          MEMORY[0x1D25D9CE0](v343, 0x1080C40ED926357);
                        }
                      }
                      v341 -= 32;
                    }
                    while (v341);
                    uint64_t v336 = v533;
                  }
                }
                if (v336 != (void *)v535) {
                  free(v336);
                }
                v533 = v334;
                HIDWORD(v534) = v332;
                LODWORD(v534) = v534 + 1;
                __n128 v3 = v498;
              }
            }
            uint64_t v125 = v471;
LABEL_459:
            unsigned int v128 = v476;
LABEL_460:
            ++v279;
            uint64_t v280 = v281;
            if (v279 >= *(unsigned int *)(v281 + 40))
            {
              uint64_t v108 = v278;
              int v109 = 1;
              goto LABEL_521;
            }
          }
        }
        int v109 = 1;
        uint64_t v125 = v471;
LABEL_521:
        if (v128 == v125)
        {
          int v110 = v540;
          goto LABEL_531;
        }
      }
      int v153 = 1;
      while (v152 != -4096)
      {
        int v154 = v150 + v153++;
        uint64_t v150 = v154 & (v149 - 1);
        uint64_t v152 = *(void *)(v148 + 16 * v150);
        if (v142 == v152)
        {
          uint64_t v151 = (uint64_t *)(v148 + 16 * v150);
          goto LABEL_213;
        }
      }
LABEL_212:
      uint64_t v151 = (uint64_t *)(v148 + 16 * v149);
      goto LABEL_213;
    }
LABEL_531:
    LODWORD(v540) = v110 - 1;
    if (v110 != 1) {
      sub_1CB93B280((llvm::SmallPtrSetImplBase *)&v536);
    }
    int v107 = v520[0];
    unsigned int v472 = v470;
  }
LABEL_534:
  if (*((_DWORD **)&v519 + 1) != &v520[2]) {
    free(*((void **)&v519 + 1));
  }
  if ((unsigned int **)v517 != v516) {
    free((void *)v517);
  }
  if (v539 != (char *)&v540 + 8) {
    free(v539);
  }
  if ((uint64_t *)v537 != v536) {
    free((void *)v537);
  }
  if (v523)
  {
    unint64_t v354 = v522;
    int v355 = (char *)&v522[v523];
    while (1)
    {
      char v356 = *v354;
      char v357 = *(int32x2_t **)(v3[34] + 288);
      int32x2_t v358 = v357[46];
      uint64_t v359 = v357[48].u32[0];
      if (!v359) {
        goto LABEL_550;
      }
      LODWORD(v360) = (v359 - 1) & ((v356 >> 4) ^ (v356 >> 9));
      uint64_t v361 = (llvm::MachineInstr **)(*(void *)&v358 + 16 * v360);
      int v362 = *v361;
      if (*v361 != v356) {
        break;
      }
LABEL_551:
      if (v361 != (llvm::MachineInstr **)(*(void *)&v358 + 16 * v359))
      {
        unint64_t v365 = (unint64_t)v361[1] & 0xFFFFFFFFFFFFFFF8;
        *uint64_t v361 = (llvm::MachineInstr *)-8192;
        v357[47] = vadd_s32(v357[47], (int32x2_t)0x1FFFFFFFFLL);
        *(void *)(v365 + 16) = 0;
      }
      llvm::MachineInstr::eraseFromParent(v356);
      if (++v354 == (llvm::MachineInstr **)v355) {
        goto LABEL_554;
      }
    }
    int v363 = 1;
    while (v362 != (llvm::MachineInstr *)-4096)
    {
      int v364 = v360 + v363++;
      uint64_t v360 = v364 & (v359 - 1);
      int v362 = *(llvm::MachineInstr **)(*(void *)&v358 + 16 * v360);
      if (v362 == v356)
      {
        uint64_t v361 = (llvm::MachineInstr **)(*(void *)&v358 + 16 * v360);
        goto LABEL_551;
      }
    }
LABEL_550:
    uint64_t v361 = (llvm::MachineInstr **)(*(void *)&v358 + 16 * v359);
    goto LABEL_551;
  }
LABEL_554:
  uint64_t v366 = (void *)*((void *)v469 + 41);
  char v496 = v108;
  if (v366 != (void *)((char *)v469 + 320))
  {
    while (1)
    {
      v536 = v538;
      uint64_t v537 = 0x800000000;
      int v513 = 0;
      uint64_t v514 = 0;
      unsigned int v367 = v366 + 6;
      uint64_t v368 = v366[7];
      if ((void *)v368 != v366 + 6) {
        break;
      }
LABEL_657:
      unint64_t v432 = v366[7];
      if ((void *)v432 == v367)
      {
        char v433 = 0;
      }
      else
      {
        char v433 = 0;
        while (1)
        {
          uint64_t v434 = v432;
          if (!v432 || (unint64_t v435 = v432, (*(unsigned char *)v432 & 4) == 0))
          {
            unint64_t v435 = v432;
            if ((*(_WORD *)(v432 + 44) & 8) != 0)
            {
              unint64_t v435 = v432;
              do
                unint64_t v435 = *(void *)(v435 + 8);
              while ((*(_WORD *)(v435 + 44) & 8) != 0);
            }
          }
          unint64_t v432 = *(void *)(v435 + 8);
          if ((void *)v432 == v367) {
            break;
          }
          if (((*(uint64_t (**)(uint64_t *, void))(*v3 + 184))(v3, **(unsigned __int16 **)(v434 + 16)) & 1) != 0
            || (*(unsigned char *)(*(void *)(v434 + 16) + 9) & 0x20) != 0)
          {
            v536 = (uint64_t *)v432;
            uint64_t v436 = *(void *)(*(void *)(v434 + 24) + 32);
            if (v436)
            {
              uint64_t v437 = *(void *)(v436 + 728);
              if (v437) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v437 + 32))(v437, v434);
              }
              uint64_t v438 = *(unsigned int *)(v434 + 40);
              if (v438)
              {
                uint64_t v439 = *(void *)(v434 + 32);
                uint64_t v440 = *(void *)(v436 + 40);
                uint64_t v441 = 32 * v438;
                do
                {
                  if (!*(unsigned char *)v439)
                  {
                    uint64_t v442 = *(unsigned int *)(v439 + 4);
                    if ((v442 & 0x80000000) != 0) {
                      long long v443 = (uint64_t *)(*(void *)(v440 + 24) + 16 * (v442 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      long long v443 = (uint64_t *)(*(void *)(v440 + 272) + 8 * v442);
                    }
                    uint64_t v444 = *v443;
                    uint64_t v446 = *(void *)(v439 + 16);
                    uint64_t v445 = *(void *)(v439 + 24);
                    if (v439 != *v443) {
                      long long v443 = (uint64_t *)(v446 + 24);
                    }
                    *long long v443 = v445;
                    if (v445) {
                      uint64_t v447 = v445;
                    }
                    else {
                      uint64_t v447 = v444;
                    }
                    *(void *)(v447 + 16) = v446;
                    *(void *)(v439 + 16) = 0;
                    *(void *)(v439 + 24) = 0;
                  }
                  v439 += 32;
                  v441 -= 32;
                }
                while (v441);
              }
            }
            *(void *)(v434 + 24) = 0;
            unsigned int v448 = *(unint64_t **)(v434 + 8);
            unint64_t v449 = *(void *)v434 & 0xFFFFFFFFFFFFFFF8;
            *unsigned int v448 = v449 | *v448 & 7;
            *(void *)(v449 + 8) = v448;
            *(void *)v434 &= 7uLL;
            *(void *)(v434 + 8) = 0;
            sub_1CBA72BAC(v3, (unint64_t *)&v536, v434, *(_DWORD *)(*(void *)(v434 + 32) + 4));
            uint64_t v450 = v536;
            uint64_t v451 = v366[5];
            *(void *)(v434 + 24) = v451;
            uint64_t v452 = *(void *)(v451 + 32);
            uint64_t v453 = *(unsigned int *)(v434 + 40);
            if (v453)
            {
              uint64_t v456 = *(void *)(v434 + 32);
              uint64_t v457 = *(void *)(v452 + 40);
              uint64_t v458 = 32 * v453;
              do
              {
                if (!*(unsigned char *)v456)
                {
                  uint64_t v459 = *(unsigned int *)(v456 + 4);
                  if ((int)v459 >= 0) {
                    unint64_t v460 = (uint64_t *)(*(void *)(v457 + 272) + 8 * v459);
                  }
                  else {
                    unint64_t v460 = (uint64_t *)(*(void *)(v457 + 24) + 16 * (v459 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v461 = *v460;
                  if (*v460)
                  {
                    uint64_t v462 = *(void *)(v461 + 16);
                    *(void *)(v461 + 16) = v456;
                    *(void *)(v456 + 16) = v462;
                    if (*(unsigned char *)(v456 + 3))
                    {
                      *(void *)(v456 + 24) = v461;
                    }
                    else
                    {
                      *(void *)(v456 + 24) = 0;
                      unint64_t v460 = (uint64_t *)(v462 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v456 + 16) = v456;
                    *(void *)(v456 + 24) = 0;
                  }
                  *unint64_t v460 = v456;
                }
                v456 += 32;
                v458 -= 32;
              }
              while (v458);
            }
            uint64_t v454 = *(void *)(v452 + 728);
            if (v454) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v454 + 24))(v454, v434);
            }
            unint64_t v455 = *v450 & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t v434 = v455 | *(void *)v434 & 7;
            *(void *)(v434 + 8) = v450;
            *(void *)(v455 + 8) = v434;
            *uint64_t v450 = *v450 & 7 | v434;
            if (v450 != (uint64_t *)v432)
            {
              llvm::LiveIntervals::handleMove((llvm::LiveIntervals *)v3[34], (llvm::MachineInstr *)v434, 0);
              char v433 = 1;
            }
          }
        }
      }
      v496 |= v433;
      uint64_t v366 = (void *)v366[1];
      if (v366 == (void *)((char *)v469 + 320)) {
        goto LABEL_705;
      }
    }
    int v488 = v366;
    uint64_t v369 = 0;
    int v370 = 0;
    while (1)
    {
      if (!v368 || (uint64_t v371 = v368, (*(unsigned char *)v368 & 4) == 0))
      {
        uint64_t v371 = v368;
        if ((*(_WORD *)(v368 + 44) & 8) != 0)
        {
          uint64_t v371 = v368;
          do
            uint64_t v371 = *(void *)(v371 + 8);
          while ((*(_WORD *)(v371 + 44) & 8) != 0);
        }
      }
      unsigned int v372 = *(void **)(v371 + 8);
      int v373 = *(unsigned __int16 **)(v368 + 16);
      int v374 = *v373;
      BOOL v376 = (v374 - 9) <= 0x3C && ((1 << (v374 - 9)) & 0x1000000000000605) != 0
          || v374 == 0;
      if (!v376 && (v373[4] & 0x10) == 0)
      {
        if (((*(uint64_t (**)(uint64_t *, uint64_t))(*v3 + 192))(v3, v368) & 1) == 0)
        {
          uint64_t v368 = 0;
          int v513 = 0;
          goto LABEL_577;
        }
        if (++v370 >= 0xF)
        {
          uint64_t v369 = 0;
          int v513 = 0;
        }
        if ((*(unsigned int (**)(uint64_t *, void))(*v3 + 296))(v3, **(unsigned __int16 **)(v368 + 16)))
        {
          int v377 = *(_DWORD *)(*(void *)(v368 + 32) + 4);
          if (v377 < 0)
          {
            uint64_t v378 = v377 & 0x7FFFFFFF;
            unint64_t v379 = *(void *)(*(void *)(v3[33] + 24) + 16 * v378) & 0xFFFFFFFFFFFFFFF8;
            if ((*(uint64_t (**)(uint64_t *))(*v3 + 248))(v3) != v379
              || (uint64_t v380 = v3[33], (v381 = *(void *)(*(void *)(v380 + 24) + 16 * v378 + 8)) == 0))
            {
              uint64_t v368 = v369;
              goto LABEL_577;
            }
            if ((*(unsigned char *)(v381 + 3) & 1) != 0
              || (uint64_t v381 = *(void *)(v381 + 24)) != 0 && (*(unsigned char *)(v381 + 3) & 1) != 0)
            {
              uint64_t v382 = *(void *)(v381 + 24);
              if (!v382 || (*(unsigned char *)(v382 + 3) & 1) == 0)
              {
                if (!v369)
                {
                  int v370 = 0;
                  int v513 = (uint64_t *)v368;
                  goto LABEL_577;
                }
                uint64_t v514 = v368;
                unint64_t v492 = *(unsigned __int16 *)(*(void *)(v369 + 32) + 80);
                uint64_t v383 = *(void *)(*(void *)(v368 + 32) + 80);
                long long v384 = v3;
                uint64_t v385 = (*(uint64_t (**)(uint64_t *))(*v3 + 256))(v3);
                uint64_t v386 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v380, "", 0);
                unint64_t v485 = v386 & 0x7FFFFFFF;
                *(void *)(*(void *)(v380 + 24) + 16 * v485) = v385 & 0xFFFFFFFFFFFFFFFBLL;
                uint64_t v387 = *(void *)(v380 + 8);
                if (v387) {
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v387 + 24))(v387, v386);
                }
                unsigned int v388 = (*(uint64_t (**)(uint64_t *, void))(*v384 + 304))(v384, **(unsigned __int16 **)(v368 + 16));
                uint64_t v389 = sub_1CB84B030(*(void *)(v369 + 24), v369, (unsigned __int8 **)(v369 + 56), *(void *)(v384[31] + 8) + 48 * v388, v386);
                uint64_t v391 = v390;
                unsigned int v392 = (*(uint64_t (**)(uint64_t *))(*v384 + 320))(v384);
                char v393 = 1;
                LODWORD(v516) = 1;
                uint64_t v517 = 0;
                v518[0] = v392;
                llvm::MachineInstr::addOperand(v391, v389, (const llvm::MachineOperand *)&v516);
                LODWORD(v516) = 1;
                uint64_t v517 = 0;
                v518[0] = (v383 << 16) | v492;
                uint64_t v482 = (uint64_t)v391;
                llvm::MachineInstr::addOperand(v391, v389, (const llvm::MachineOperand *)&v516);
                uint64_t v394 = 0;
                while (2)
                {
                  char v395 = v393;
                  uint64_t v396 = *(unsigned int *)((&v513)[v394][4] + 4);
                  uint64_t v516 = (unsigned int **)v518;
                  uint64_t v517 = 0x800000000;
                  uint64_t v397 = v498[33];
                  if ((v396 & 0x80000000) != 0) {
                    uint64_t v398 = (uint64_t *)(*(void *)(v397 + 24) + 16 * (v396 & 0x7FFFFFFF) + 8);
                  }
                  else {
                    uint64_t v398 = (uint64_t *)(*(void *)(v397 + 272) + 8 * v396);
                  }
                  uint64_t v399 = *v398;
                  if (*v398)
                  {
                    while ((*(unsigned char *)(v399 + 3) & 1) != 0)
                    {
                      uint64_t v399 = *(void *)(v399 + 24);
                      if (!v399) {
                        goto LABEL_616;
                      }
                    }
                    LODWORD(v400) = 0;
                    unsigned int v401 = 8;
LABEL_597:
                    if (v400 >= v401) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    v516[v400] = (unsigned int *)v399;
                    uint64_t v400 = (v517 + 1);
                    LODWORD(v517) = v517 + 1;
                    while (1)
                    {
                      uint64_t v399 = *(void *)(v399 + 24);
                      if (!v399) {
                        break;
                      }
                      if ((*(unsigned char *)(v399 + 3) & 1) == 0)
                      {
                        unsigned int v401 = HIDWORD(v517);
                        goto LABEL_597;
                      }
                    }
                    uint64_t v402 = v516;
                    if (v400)
                    {
                      char v493 = v393;
                      uint64_t v403 = 8 * v400;
                      while (1)
                      {
                        int v404 = *v402;
                        uint64_t v405 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v498 + 280))(v498, v394);
                        if (v405)
                        {
                          LOWORD(v406) = v405;
                          if (((*v404 >> 8) & 0xFFF) != 0)
                          {
                            int v406 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v498[32] + 208))(v498[32], v405);
                            llvm::MachineOperand::setReg((uint64_t)v404, v386);
                            if (!v406) {
                              goto LABEL_610;
                            }
                          }
                          else
                          {
                            llvm::MachineOperand::setReg((uint64_t)v404, v386);
                          }
                          *int v404 = *v404 & 0xFFF000FF | ((v406 & 0xFFF) << 8);
                        }
                        else
                        {
                          llvm::MachineOperand::setReg((uint64_t)v404, v386);
                        }
LABEL_610:
                        ++v402;
                        v403 -= 8;
                        if (!v403)
                        {
                          uint64_t v402 = v516;
                          char v395 = v493;
                          break;
                        }
                      }
                    }
                    if (v402 != v518) {
                      free(v402);
                    }
                  }
LABEL_616:
                  char v393 = 0;
                  uint64_t v394 = 1;
                  if ((v395 & 1) == 0)
                  {
                    sub_1CB914C88(*(void *)(v498[34] + 288), v482, 0);
                    uint64_t v407 = v498[34];
                    unint64_t v408 = *(unsigned int *)(v407 + 416);
                    BOOL v73 = v485 >= v408;
                    unint64_t v409 = v485 - v408;
                    if (v73) {
                      sub_1CB9153B8(v407 + 408, v409 + 1, *(void *)(v407 + 424));
                    }
                    operator new();
                  }
                  continue;
                }
              }
            }
          }
        }
      }
      uint64_t v368 = v369;
LABEL_577:
      uint64_t v369 = v368;
      uint64_t v368 = (uint64_t)v372;
      if (v372 == v367)
      {
        int v410 = (char *)v536;
        uint64_t v411 = &v536[v537];
        if (!v537)
        {
LABEL_654:
          if (v410 != (char *)v538) {
            free(v410);
          }
          uint64_t v366 = v488;
          goto LABEL_657;
        }
        while (1)
        {
          int v416 = *(llvm::MachineInstr **)v410;
          uint64_t v417 = v3[34];
          uint64_t v418 = *(_DWORD *)(*(void *)(*(void *)v410 + 32) + 4) & 0x7FFFFFFF;
          uint64_t v419 = *(void *)(v417 + 408);
          uint64_t v420 = *(void *)(v419 + 8 * v418);
          if (v420)
          {
            uint64_t v415 = *(void *)(v420 + 104);
            if (v415)
            {
              do
              {
                uint64_t v412 = *(void *)(v415 + 96);
                uint64_t v413 = *(void *)(v415 + 104);
                *(void *)(v415 + 96) = 0;
                if (v412)
                {
                  sub_1CB833A08(v412, *(void **)(v412 + 8));
                  MEMORY[0x1D25D9CE0](v412, 0x1020C4062D53EE8);
                }
                unsigned int v414 = *(void **)(v415 + 64);
                if (v414 != (void *)(v415 + 80)) {
                  free(v414);
                }
                if (*(void *)v415 != v415 + 16) {
                  free(*(void **)v415);
                }
                uint64_t v415 = v413;
              }
              while (v413);
            }
            uint64_t v421 = *(void *)(v420 + 96);
            *(void *)(v420 + 96) = 0;
            *(void *)(v420 + 104) = 0;
            if (v421)
            {
              sub_1CB833A08(v421, *(void **)(v421 + 8));
              MEMORY[0x1D25D9CE0](v421, 0x1020C4062D53EE8);
            }
            v422 = *(void **)(v420 + 64);
            if (v422 != (void *)(v420 + 80)) {
              free(v422);
            }
            if (*(void *)v420 != v420 + 16) {
              free(*(void **)v420);
            }
            MEMORY[0x1D25D9CE0](v420, 0x10A0C408DA535C6);
            uint64_t v419 = *(void *)(v417 + 408);
          }
          *(void *)(v419 + 8 * v418) = 0;
          __n128 v3 = v498;
          v423 = *(int32x2_t **)(v498[34] + 288);
          int32x2_t v424 = v423[46];
          uint64_t v425 = v423[48].u32[0];
          if (!v425) {
            goto LABEL_649;
          }
          LODWORD(v426) = (v425 - 1) & ((v416 >> 4) ^ (v416 >> 9));
          uint64_t v427 = (llvm::MachineInstr **)(*(void *)&v424 + 16 * v426);
          uint64_t v428 = *v427;
          if (*v427 != v416) {
            break;
          }
LABEL_650:
          if (v427 != (llvm::MachineInstr **)(*(void *)&v424 + 16 * v425))
          {
            unint64_t v431 = (unint64_t)v427[1] & 0xFFFFFFFFFFFFFFF8;
            void *v427 = (llvm::MachineInstr *)-8192;
            v423[47] = vadd_s32(v423[47], (int32x2_t)0x1FFFFFFFFLL);
            *(void *)(v431 + 16) = 0;
          }
          llvm::MachineInstr::eraseFromParent(v416);
          v410 += 8;
          if (v410 == (char *)v411)
          {
            int v410 = (char *)v536;
            goto LABEL_654;
          }
        }
        int v429 = 1;
        while (v428 != (llvm::MachineInstr *)-4096)
        {
          int v430 = v426 + v429++;
          uint64_t v426 = v430 & (v425 - 1);
          uint64_t v428 = *(llvm::MachineInstr **)(*(void *)&v424 + 16 * v426);
          if (v428 == v416)
          {
            uint64_t v427 = (llvm::MachineInstr **)(*(void *)&v424 + 16 * v426);
            goto LABEL_650;
          }
        }
LABEL_649:
        uint64_t v427 = (llvm::MachineInstr **)(*(void *)&v424 + 16 * v425);
        goto LABEL_650;
      }
    }
  }
LABEL_705:
  if (v522 != (llvm::MachineInstr **)v524) {
    free(v522);
  }
  size_t v463 = v533;
  if (v534)
  {
    v464 = v533 - 24;
    uint64_t v465 = 32 * v534;
    do
    {
      uint64_t v466 = *(void *)&v464[v465];
      if ((v466 & 4) != 0)
      {
        v467 = (void **)(v466 & 0xFFFFFFFFFFFFFFF8);
        if ((v466 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if (*v467 != v467 + 2) {
            free(*v467);
          }
          MEMORY[0x1D25D9CE0](v467, 0x1080C40ED926357);
        }
      }
      v465 -= 32;
    }
    while (v465);
    size_t v463 = v533;
  }
  if (v463 != v535) {
    free(v463);
  }
  if ((v525 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v526, 8);
  }
  if (v505 >= 0x41 && v504) {
    MEMORY[0x1D25D9CB0](v504, 0x1000C8000313F17);
  }
  if (v507 >= 0x41 && v506) {
    MEMORY[0x1D25D9CB0](v506, 0x1000C8000313F17);
  }
  if (v509 >= 0x41 && v508) {
    MEMORY[0x1D25D9CB0](v508, 0x1000C8000313F17);
  }
  return v496 & 1;
}

uint64_t sub_1CBA72590(uint64_t a1, int a2)
{
  return ((a2 - 4566) < 0x20) & (0xC0005FFF >> (a2 + 42));
}

uint64_t sub_1CBA725B4(uint64_t a1, int a2)
{
  return ((a2 - 4570) < 0xB) & (0x50Fu >> (a2 + 38));
}

uint64_t sub_1CBA725D4(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int16 **)(a2 + 16);
  int v3 = *v2;
  BOOL v5 = (v3 - 9) <= 0x3C && ((1 << (v3 - 9)) & 0x1000000000000605) != 0 || v3 == 0;
  if (v5 || (v2[4] & 0x10) != 0) {
    return 1;
  }
  else {
    return v2[8] & 1;
  }
}

BOOL sub_1CBA72620(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 16);
  unsigned int v4 = **(unsigned __int16 **)(a2 + 16);
  if (v4 > 0x865)
  {
    if (v4 == 4578 || v4 == 4580) {
      return 1;
    }
    if (v4 == 2150) {
      return *(unsigned char *)(v3 + 338) != 0;
    }
  }
  else
  {
    if (v4 != 1100)
    {
      if (v4 != 2114) {
        return result;
      }
      return *(unsigned char *)(v3 + 338) != 0;
    }
    return *(unsigned char *)(v3 + 338) && *(unsigned char *)(*(void *)(a2 + 32) + 64) == 7;
  }
  return result;
}

uint64_t sub_1CBA726A8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(void *)(a2 + 16) + 16) >> 3) & 1;
}

uint64_t sub_1CBA726B8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(void *)(a2 + 16) + 16) >> 4) & 1;
}

uint64_t sub_1CBA726C8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(void *)(a2 + 16) + 16) >> 1) & 1;
}

BOOL sub_1CBA726D8(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int16 **)(a2 + 16);
  int v3 = *v2;
  BOOL v5 = (v3 - 9) <= 0x3C && ((1 << (v3 - 9)) & 0x1000000000000605) != 0 || v3 == 0;
  return !v5 && (v2[4] & 0x10) == 0 && (v2[8] & 1) == 0;
}

uint64_t sub_1CBA72728(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8), *(void *)a2)+ 329);
}

__int16 ***sub_1CBA72768()
{
  return &off_1E66AB048;
}

__int16 ***sub_1CBA72774()
{
  return &off_1E66AB080;
}

BOOL sub_1CBA72780(uint64_t a1, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t sub_1CBA72790(uint64_t a1, int a2)
{
  if (a2 == 1) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t sub_1CBA727A0(uint64_t a1, int a2)
{
  if (a2) {
    return 2;
  }
  else {
    return 1;
  }
}

uint64_t sub_1CBA727B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result = 0;
  switch(**(_WORD **)(a2 + 16))
  {
    case 0xFE4:
      if (*(unsigned char *)(*(void *)(a2 + 32) + 64) != 1) {
        return 0;
      }
      int v4 = 4066;
      goto LABEL_12;
    case 0xFE5:
      if (*(unsigned char *)(*(void *)(a2 + 32) + 64) != 1) {
        return 0;
      }
      int v4 = 4067;
      goto LABEL_12;
    case 0xFE6:
    case 0xFE7:
    case 0xFE8:
    case 0xFE9:
    case 0xFEA:
    case 0xFEC:
      return result;
    case 0xFEB:
      if (*(unsigned char *)(*(void *)(a2 + 32) + 64) != 1) {
        return 0;
      }
      int v4 = 4072;
      goto LABEL_12;
    case 0xFED:
      if (*(unsigned char *)(*(void *)(a2 + 32) + 64) != 1) {
        return 0;
      }
      int v4 = 4073;
LABEL_12:
      *a3 = v4;
      return 1;
    default:
      if (**(_WORD **)(a2 + 16) != 4578) {
        return result;
      }
      int v4 = 4580;
      goto LABEL_12;
  }
}

uint64_t sub_1CBA72894(uint64_t a1, int a2)
{
  return ((a2 - 4066) < 8) & (0xC3u >> (a2 + 30));
}

uint64_t sub_1CBA728B0(uint64_t a1, int a2)
{
  if (a2 == 4072 || a2 == 4066) {
    return 4068;
  }
  else {
    return 4069;
  }
}

void sub_1CBA728C8(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 32);
  if (a2 == 4578)
  {
    *(_DWORD *)(v4 + 64) = *(_DWORD *)(v4 + 64) & 0xFFF000FF | 0x100;
    if (a3 == 2)
    {
      int v5 = *(_DWORD *)(v4 + 88);
      uint64_t v6 = *(unsigned int *)(v4 + 68) + 1;
      *(_DWORD *)(v4 + 68) = v6;
      *(_DWORD *)(v4 + 88) = v5 + HIDWORD(v6);
    }
  }
  else
  {
    if (a3 == 1) {
      uint64_t v7 = (unsigned __int16)*(void *)(v4 + 80);
    }
    else {
      uint64_t v7 = *(uint64_t *)(v4 + 80) >> 16;
    }
    *(void *)(v4 + 80) = v7;
  }
}

uint64_t sub_1CBA72930()
{
  return 0;
}

BOOL sub_1CBA72938(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  char v7 = (*(uint64_t (**)(void *, void))(*a1 + 176))(a1, **(unsigned __int16 **)(a2 + 16));
  uint64_t v8 = *(void *)(*(void *)(v6 + 32) + 16);
  BOOL v9 = *(unsigned char *)(v8 + 318) == 0;
  if (*(unsigned char *)(v8 + 318) || (v7 & 1) != 0 || !sub_1CBA732B8((uint64_t)a1, a3)) {
    return v9;
  }
  uint64_t v10 = *(unsigned int *)(a3 + 40);
  if (!v10) {
    goto LABEL_13;
  }
  unsigned int v11 = 0;
  unsigned int v12 = *(unsigned __int16 *)(*(void *)(a3 + 16) + 6);
  uint64_t v13 = *(void *)(a1[37] + 40);
  int v14 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
  uint64_t v15 = *(int **)(a3 + 32);
  while (1)
  {
    int v16 = *v15;
    if (*v15 == 1 || !*v15 && (v16 & 0x1000000) != 0) {
      goto LABEL_12;
    }
    if ((v16 & 0x10000FF) == 0 && v15[1] == v14) {
      break;
    }
    ++v11;
LABEL_12:
    v15 += 8;
    if (!--v10) {
      goto LABEL_13;
    }
  }
  unint64_t v19 = *(void *)(*(void *)(a1[33] + 24) + 16 * (v14 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v6 + 32) + 16) + 176))(*(void *)(*(void *)(v6 + 32) + 16));
  if ((*(_DWORD *)(*(void *)(v20 + 264)
                  + 24
                  * (*(unsigned __int16 *)(*(void *)v19 + 24)
                   + *(_DWORD *)(v20 + 272) * ((*(void *)(v20 + 248) - *(void *)(v20 + 240)) >> 3))
                  + 4) & 0xFFFFFFF8) != 0x10
    && (*v15 & 0xFFF00) == 0)
  {
    uint64_t v30 = v13 + 24 * v12;
    int v31 = *(unsigned __int16 *)(v30 + 20);
    if (*(_WORD *)(v30 + 20))
    {
      uint64_t v25 = (unsigned int *)(*(void *)(v8 + 152) + 12 * *(unsigned __int16 *)(v30 + 18));
      int v26 = &v25[3 * v31];
      goto LABEL_28;
    }
    goto LABEL_32;
  }
  uint64_t v21 = v13 + 24 * v12;
  uint64_t v22 = *(unsigned __int16 *)(v21 + 20);
  if (*(_WORD *)(v21 + 20))
  {
    uint64_t v23 = *(void *)(v8 + 152);
    unsigned int v24 = *(unsigned __int16 *)(v21 + 18);
    uint64_t v25 = (unsigned int *)(v23 + 12 * *(unsigned __int16 *)(v21 + 18));
    int v26 = &v25[3 * v22];
    int v27 = (_DWORD *)(v23 + 12 * v24 + 8);
    uint64_t v28 = 12 * v22;
    do
    {
      unsigned int v29 = *(v27 - 2);
      if (v29 >= v11)
      {
        if (v29 > v11) {
          break;
        }
        if (!*(v27 - 1))
        {
          if ((*v27 & 0x80000000) == 0) {
            break;
          }
          int v17 = 1;
          return v17 + v9;
        }
      }
      v27 += 3;
      v28 -= 12;
    }
    while (v28);
LABEL_28:
    do
    {
      if (*v25 >= v11)
      {
        if (*v25 > v11) {
          goto LABEL_32;
        }
        if (!v25[1]) {
          break;
        }
      }
      v25 += 3;
    }
    while (v25 != v26);
    if (v25[2])
    {
LABEL_13:
      int v17 = -1;
      return v17 + v9;
    }
  }
LABEL_32:
  int v17 = 0;
  return v17 + v9;
}

uint64_t sub_1CBA72BAC(void *a1, unint64_t *a2, uint64_t a3, int a4)
{
  unint64_t v8 = *a2;
  int v32 = (*(uint64_t (**)(void *, void))(*a1 + 176))(a1, **(unsigned __int16 **)(a3 + 16));
  int v31 = (uint64_t *)a2;
  uint64_t v9 = *(void *)(*a2 + 24);
  int v10 = (*(uint64_t (**)(void *, uint64_t, unint64_t))(*a1 + 328))(a1, a3, v8);
  int v11 = 0;
  while (1)
  {
    uint64_t v12 = v8;
    if (((*(uint64_t (**)(void *, unint64_t))(*a1 + 232))(a1, v8) & 1) != 0
      || *(void *)(v9 + 56) == v8)
    {
      return 0;
    }
    uint64_t v13 = *(void *)v8;
    unint64_t v8 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
    if ((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(unsigned char *)v8 & 4) == 0)
    {
      while ((*(_WORD *)(v8 + 44) & 4) != 0)
        unint64_t v8 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v14 = v12;
    if ((v13 & 4) == 0)
    {
      uint64_t v14 = v12;
      if ((*(_WORD *)(v12 + 44) & 8) != 0)
      {
        uint64_t v14 = v12;
        do
          uint64_t v14 = *(void *)(v14 + 8);
        while ((*(_WORD *)(v14 + 44) & 8) != 0);
      }
    }
    uint64_t v15 = *(void *)(v14 + 8);
    int v16 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 200))(a1, v12);
    int v17 = (*(uint64_t (**)(void *, unint64_t))(*a1 + 200))(a1, v8);
    if (v32 && ((*(unsigned int (**)(void *, uint64_t))(*a1 + 208))(a1, v12) ^ 1 | v17) != 1) {
      goto LABEL_48;
    }
    if (v10)
    {
      uint64_t *v31 = v12;
      goto LABEL_17;
    }
    if (sub_1CBA732B8((uint64_t)a1, v8))
    {
      if (sub_1CBA732B8((uint64_t)a1, v12))
      {
        uint64_t v20 = *(void *)(v8 + 32);
        if (!*(unsigned char *)v20
          && (*(_WORD *)(*(void *)(a1[37] + 40) + 24 * *(unsigned __int16 *)(*(void *)(v8 + 16) + 6) + 8) & 0x1FFF) == 1)
        {
          uint64_t v21 = *(unsigned int *)(v12 + 40);
          if (v21 >= 2) {
            break;
          }
        }
      }
    }
LABEL_37:
    if ((sub_1CBA732B8((uint64_t)a1, v8) & v16) == 1 && v15 != v9 + 48)
    {
      if ((*(unsigned int (**)(void *, uint64_t))(*a1 + 208))(a1, v15))
      {
        uint64_t v25 = *(void *)(v8 + 32);
        if (!*(unsigned char *)v25)
        {
          uint64_t v26 = *(unsigned int *)(v15 + 40);
          if (v26 >= 2)
          {
            int v27 = *(_DWORD *)(v25 + 4);
            uint64_t v28 = v26 - 1;
            unsigned int v29 = (_DWORD *)(*(void *)(v15 + 32) + 36);
            while (*((unsigned char *)v29 - 4) || *v29 != v27)
            {
              v29 += 8;
              if (!--v28) {
                goto LABEL_17;
              }
            }
            goto LABEL_48;
          }
        }
      }
    }
LABEL_17:
    if (a4)
    {
      uint64_t v18 = *(unsigned int *)(v8 + 40);
      if (v18)
      {
        unint64_t v19 = (_DWORD *)(*(void *)(v8 + 32) + 4);
        while (*((unsigned char *)v19 - 4) || *v19 != a4)
        {
          v19 += 8;
          if (!--v18) {
            goto LABEL_23;
          }
        }
        return 0;
      }
    }
LABEL_23:
    if (v10) {
      --v10;
    }
    else {
      int v10 = 0;
    }
    if (++v11 == 6) {
      return 0;
    }
  }
  int v22 = *(_DWORD *)(v20 + 4);
  uint64_t v23 = v21 - 1;
  unsigned int v24 = (_DWORD *)(*(void *)(v12 + 32) + 36);
  while (*((unsigned char *)v24 - 4) || *v24 != v22)
  {
    v24 += 8;
    if (!--v23) {
      goto LABEL_37;
    }
  }
LABEL_48:
  uint64_t *v31 = v12;
  return 1;
}

unint64_t *sub_1CBA72F64(unint64_t *a1, char *__dst)
{
  int v2 = __dst;
  unint64_t v3 = *a1;
  if ((*a1 & 4) != 0)
  {
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      int v5 = __dst + 8;
      uint64_t v6 = *(unsigned int *)(v4 + 8);
      uint64_t v7 = *(void *)v4 + 8 * v6;
      if ((char *)v7 != v2 + 8)
      {
        memmove(v2, v5, v7 - (void)(v2 + 8));
        LODWORD(v6) = *(_DWORD *)(v4 + 8);
      }
      *(_DWORD *)(v4 + 8) = v6 - 1;
    }
  }
  else
  {
    if (a1 == (unint64_t *)__dst)
    {
      unint64_t v3 = 0;
      *(void *)__dst = 0;
    }
    return &a1[v3 > 7];
  }
  return (unint64_t *)v2;
}

void *sub_1CBA72FE8(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)sub_1CBA731F0((int *)a1, a2);
  if (result == (void *)(*(void *)(a1 + 520) + 32 * *(unsigned int *)(a1 + 528))) {
    return result;
  }
  unint64_t v4 = result;
  uint64_t result = (void *)sub_1CBA7337C(a1, result);
  uint64_t v5 = *(void *)(a1 + 520);
  uint64_t v6 = *(unsigned int *)(a1 + 528);
  uint64_t v7 = (void *)(v5 + 32 * v6);
  unint64_t v8 = v4 + 4;
  if (v4 + 4 != v7)
  {
    do
    {
      *(v8 - 4) = *v8;
      uint64_t result = sub_1CB9138A0(v8 - 3, v8 + 1);
      *(v8 - 2) = v8[2];
      *((_DWORD *)v8 - 2) = *((_DWORD *)v8 + 6);
      v8 += 4;
    }
    while (v8 != v7);
    LODWORD(v6) = *(_DWORD *)(a1 + 528);
    uint64_t v5 = *(void *)(a1 + 520);
  }
  uint64_t v9 = (v6 - 1);
  *(_DWORD *)(a1 + 528) = v9;
  uint64_t v10 = *(void *)(v5 + 32 * v9 + 8);
  if ((v10 & 4) != 0)
  {
    int v11 = (void **)(v10 & 0xFFFFFFFFFFFFFFF8);
    if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if (*v11 != v11 + 2) {
        free(*v11);
      }
      uint64_t result = (void *)MEMORY[0x1D25D9CE0](v11, 0x1080C40ED926357);
      uint64_t v5 = *(void *)(a1 + 520);
      uint64_t v9 = *(unsigned int *)(a1 + 528);
    }
  }
  if ((void *)(v5 + 32 * v9) == v4) {
    return result;
  }
  int v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 <= 1u)
  {
    if (v12)
    {
      uint64_t v19 = a1 + 8;
      uint64_t v20 = 32;
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 8);
      uint64_t v20 = *(unsigned int *)(a1 + 16);
    }
    uint64_t v15 = v19 + 16 * v20;
    uint64_t v13 = v15;
    if (v12)
    {
LABEL_16:
      uint64_t v16 = a1 + 8;
      uint64_t v17 = 32;
LABEL_27:
      uint64_t v14 = v13;
      goto LABEL_28;
    }
LABEL_26:
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v17 = *(unsigned int *)(a1 + 16);
    goto LABEL_27;
  }
  if (v12)
  {
    uint64_t v13 = a1 + 520;
    uint64_t v14 = a1 + 8;
LABEL_11:
    uint64_t v15 = v14;
    while ((*(void *)v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v15 += 16;
      if (v15 == v13)
      {
        uint64_t v15 = v13;
        break;
      }
    }
    if (*(_DWORD *)a1) {
      goto LABEL_16;
    }
    goto LABEL_26;
  }
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v18 = *(unsigned int *)(a1 + 16);
  if (v18)
  {
    uint64_t v13 = v14 + 16 * v18;
    goto LABEL_11;
  }
  uint64_t v17 = 0;
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v16 = v15;
LABEL_28:
  uint64_t v21 = v16 + 16 * v17;
  if (v15 != v21)
  {
    unint64_t v22 = ((uint64_t)v4 - v5) >> 5;
    do
    {
      unint64_t v23 = *(unsigned int *)(v15 + 8);
      if (v22 < v23) {
        *(_DWORD *)(v15 + 8) = v23 - 1;
      }
      uint64_t v24 = v15 + 16;
      uint64_t v15 = v14;
      if (v24 != v14)
      {
        uint64_t v15 = v24;
        while ((*(void *)v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v15 += 16;
          if (v15 == v14)
          {
            uint64_t v15 = v14;
            break;
          }
        }
      }
    }
    while (v15 != v21);
  }
  return result;
}

uint64_t sub_1CBA731F0(int *a1, uint64_t a2)
{
  int v2 = a1 + 2;
  int v3 = *a1;
  if (*a1)
  {
    int v4 = 32;
    uint64_t v5 = a1 + 2;
  }
  else
  {
    uint64_t v5 = (int *)*((void *)a1 + 1);
    int v4 = a1[4];
    if (!v4)
    {
      uint64_t v7 = 0;
      goto LABEL_10;
    }
  }
  int v6 = v4 - 1;
  LODWORD(v7) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unint64_t v8 = &v5[4 * v7];
  uint64_t v9 = *(void *)v8;
  if (*(void *)v8 == a2) {
    goto LABEL_11;
  }
  int v10 = 1;
  while (v9 != -4096)
  {
    int v11 = v7 + v10++;
    uint64_t v7 = v11 & v6;
    uint64_t v9 = *(void *)&v5[4 * v7];
    if (v9 == a2) {
      goto LABEL_10;
    }
  }
  if (v3)
  {
    uint64_t v7 = 32;
    uint64_t v5 = a1 + 2;
  }
  else
  {
    uint64_t v5 = (int *)*((void *)a1 + 1);
    uint64_t v7 = a1[4];
  }
LABEL_10:
  unint64_t v8 = &v5[4 * v7];
LABEL_11:
  if (v3)
  {
    uint64_t v12 = 32;
  }
  else
  {
    int v2 = (int *)*((void *)a1 + 1);
    uint64_t v12 = a1[4];
  }
  if (&v2[4 * v12] == v8) {
    uint64_t v13 = (unsigned int *)(a1 + 132);
  }
  else {
    uint64_t v13 = (unsigned int *)(v8 + 2);
  }
  return *((void *)a1 + 65) + 32 * *v13;
}

uint64_t sub_1CBA732B8(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int16 **)(a2 + 16);
  int v3 = *v2;
  BOOL v5 = (v3 - 9) <= 0x3C && ((1 << (v3 - 9)) & 0x1000000000000605) != 0 || v3 == 0;
  if (v5 || (v2[4] & 0x2010) != 0) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192))(a1);
  if (result) {
    return (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 200))(a1, a2) ^ 1;
  }
  return result;
}

uint64_t sub_1CBA7337C(uint64_t a1, void *a2)
{
  uint64_t v2 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v3 = 32;
  }
  else
  {
    int v3 = *(_DWORD *)(a1 + 16);
    if (!v3) {
      return 0;
    }
    uint64_t v2 = *(void *)(a1 + 8);
  }
  int v4 = v3 - 1;
  LODWORD(v5) = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  int v6 = (uint64_t *)(v2 + 16 * v5);
  uint64_t v7 = *v6;
  if (*a2 == *v6)
  {
LABEL_10:
    *int v6 = -8192;
    int v10 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)a1 -= 2;
    *(_DWORD *)(a1 + 4) = v10;
    return 1;
  }
  int v8 = 1;
  while (v7 != -4096)
  {
    int v9 = v5 + v8++;
    uint64_t v5 = v9 & v4;
    uint64_t v7 = *(void *)(v2 + 16 * v5);
    if (*a2 == v7)
    {
      int v6 = (uint64_t *)(v2 + 16 * v5);
      goto LABEL_10;
    }
  }
  return 0;
}

void *sub_1CBA73414@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = a1 + 8;
  int v8 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v10 = 32;
    uint64_t v11 = a1 + 8;
  }
  else
  {
    int v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
    {
      uint64_t v21 = 0;
      goto LABEL_17;
    }
    uint64_t v11 = *(void *)(a1 + 8);
  }
  int v12 = v10 - 1;
  unsigned int v13 = ((*a2 >> 4) ^ (*a2 >> 9)) & v12;
  uint64_t result = (void *)(v11 + 16 * v13);
  uint64_t v15 = *result;
  if (*a2 == *result)
  {
LABEL_12:
    if (v8)
    {
      uint64_t v20 = 32;
    }
    else
    {
      uint64_t v9 = *(void *)(a1 + 8);
      uint64_t v20 = *(unsigned int *)(a1 + 16);
    }
    char v24 = 0;
    uint64_t v23 = v9 + 16 * v20;
    goto LABEL_20;
  }
  uint64_t v16 = 0;
  int v17 = 1;
  while (v15 != -4096)
  {
    if (v16) {
      BOOL v18 = 0;
    }
    else {
      BOOL v18 = v15 == -8192;
    }
    if (v18) {
      uint64_t v16 = result;
    }
    unsigned int v19 = v13 + v17++;
    unsigned int v13 = v19 & v12;
    uint64_t result = (void *)(v11 + 16 * v13);
    uint64_t v15 = *result;
    if (*a2 == *result) {
      goto LABEL_12;
    }
  }
  if (v16) {
    uint64_t v21 = v16;
  }
  else {
    uint64_t v21 = result;
  }
LABEL_17:
  uint64_t result = sub_1CBA7354C(a1, (uint64_t)a2, a2, v21);
  *uint64_t result = *a2;
  *((_DWORD *)result + 2) = *a3;
  if (*(unsigned char *)a1)
  {
    uint64_t v22 = 32;
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v22 = *(unsigned int *)(a1 + 16);
  }
  uint64_t v23 = v9 + 16 * v22;
  char v24 = 1;
LABEL_20:
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v23;
  *(unsigned char *)(a4 + 16) = v24;
  return result;
}

void *sub_1CBA7354C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 32;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 < 3 * v8)
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
    {
      int v9 = *(_DWORD *)a1 & 1;
      goto LABEL_6;
    }
    sub_1CBA73724(a1, v8);
    uint64_t v20 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v21 = 32;
LABEL_24:
      int v9 = *(_DWORD *)a1 & 1;
      int v22 = v21 - 1;
      unsigned int v23 = ((*a3 >> 4) ^ (*a3 >> 9)) & v22;
      a4 = (void *)(v20 + 16 * v23);
      uint64_t v24 = *a4;
      if (*a3 == *a4) {
        goto LABEL_6;
      }
      uint64_t v16 = 0;
      int v25 = 1;
      while (v24 != -4096)
      {
        if (v16) {
          BOOL v26 = 0;
        }
        else {
          BOOL v26 = v24 == -8192;
        }
        if (v26) {
          uint64_t v16 = a4;
        }
        unsigned int v27 = v23 + v25++;
        unsigned int v23 = v27 & v22;
        a4 = (void *)(v20 + 16 * v23);
        uint64_t v24 = *a4;
        if (*a3 == *a4) {
          goto LABEL_6;
        }
      }
      goto LABEL_34;
    }
    int v21 = *(_DWORD *)(a1 + 16);
    if (v21)
    {
      uint64_t v20 = *(void *)(a1 + 8);
      goto LABEL_24;
    }
LABEL_41:
    int v9 = 0;
    a4 = 0;
    goto LABEL_6;
  }
  sub_1CBA73724(a1, 2 * v8);
  uint64_t v11 = a1 + 8;
  int v6 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v12 = 32;
  }
  else
  {
    int v12 = *(_DWORD *)(a1 + 16);
    if (!v12) {
      goto LABEL_41;
    }
    uint64_t v11 = *(void *)(a1 + 8);
  }
  int v9 = *(_DWORD *)a1 & 1;
  int v13 = v12 - 1;
  unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
  a4 = (void *)(v11 + 16 * v14);
  uint64_t v15 = *a4;
  if (*a3 == *a4) {
    goto LABEL_6;
  }
  uint64_t v16 = 0;
  int v17 = 1;
  while (v15 != -4096)
  {
    if (v16) {
      BOOL v18 = 0;
    }
    else {
      BOOL v18 = v15 == -8192;
    }
    if (v18) {
      uint64_t v16 = a4;
    }
    unsigned int v19 = v14 + v17++;
    unsigned int v14 = v19 & v13;
    a4 = (void *)(v11 + 16 * v14);
    uint64_t v15 = *a4;
    if (*a3 == *a4) {
      goto LABEL_6;
    }
  }
LABEL_34:
  if (v16) {
    a4 = v16;
  }
LABEL_6:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

int *sub_1CBA73724(uint64_t a1, unsigned int a2)
{
  v14[64] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x21)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x20)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CBA738BC((int *)a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t *v7 = v8;
      *((_DWORD *)v7 + 2) = *(_DWORD *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 512);
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CBA738BC((int *)a1, v14, v7);
}

int *sub_1CBA738BC(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    uint64_t v6 = result + 130;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    uint64_t v6 = &v5[2 * v4];
  }
  do
  {
    *int v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v8 = 32;
        uint64_t v9 = result + 2;
      }
      else
      {
        uint64_t v9 = (int *)*((void *)result + 1);
        int v8 = result[4];
      }
      int v10 = v8 - 1;
      unsigned int v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v12 = (uint64_t *)&v9[4 * v11];
      uint64_t v13 = *v12;
      if (v7 != *v12)
      {
        unsigned int v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            unsigned int v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          uint64_t v12 = (uint64_t *)&v9[4 * (v17 & v10)];
          uint64_t v13 = *v12;
          if (v7 == *v12) {
            goto LABEL_21;
          }
        }
        if (v14) {
          uint64_t v12 = v14;
        }
      }
LABEL_21:
      *uint64_t v12 = v7;
      *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CBA739C4()
{
  int v4 = 1;
  *(void *)&long long v3 = "Use scaling rematerializations limit (100000 virtual registers) or user a supplied value that grows w"
                   "ith program size beyond that value";
  *((void *)&v3 + 1) = 135;
  int v1 = 100000;
  uint64_t v2 = &v1;
  sub_1CD413D64((uint64_t)&unk_1EBCBF050, "agx2-rematerialize-large-programs", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCBF050, &dword_1CB82C000);
}

void sub_1CBA73A58()
{
}

void sub_1CBA74238(llvm::ScheduleDAGMILive *a1)
{
  llvm::ScheduleDAGMILive::~ScheduleDAGMILive(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CBA74270(uint64_t a1)
{
  *(void *)a1 = &unk_1F25F3E38;
  if ((*(unsigned char *)(a1 + 3272) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 3280), 8);
  }
  if ((*(unsigned char *)(a1 + 2368) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 2376), 8);
  }
  sub_1CB9012EC(a1 + 2328);
  sub_1CB90133C(a1 + 2288);
  uint64_t v2 = *(void **)(a1 + 2136);
  if (v2 != *(void **)(a1 + 2128)) {
    free(v2);
  }
  long long v3 = *(void **)(a1 + 1848);
  if (v3 != *(void **)(a1 + 1840)) {
    free(v3);
  }
  for (uint64_t i = 0; i != -160; i -= 80)
  {
    int v5 = *(void **)(a1 + i + 1760);
    if ((void *)(a1 + i + 1776) != v5) {
      free(v5);
    }
  }
  uint64_t v6 = *(void **)(a1 + 1600);
  if (v6 != (void *)(a1 + 1616)) {
    free(v6);
  }
  uint64_t v7 = *(void **)(a1 + 1576);
  if (v7)
  {
    *(void *)(a1 + 1584) = v7;
    operator delete(v7);
  }
  int v8 = *(void **)(a1 + 1552);
  if (v8)
  {
    *(void *)(a1 + 1560) = v8;
    operator delete(v8);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1528), 8);
  uint64_t v9 = *(void **)(a1 + 1440);
  if (v9 != *(void **)(a1 + 1432)) {
    free(v9);
  }
  int v10 = *(void **)(a1 + 1344);
  if (v10 != *(void **)(a1 + 1336)) {
    free(v10);
  }
  for (uint64_t j = 0; j != -504; j -= 56)
  {
    uint64_t v12 = a1 + j;
    uint64_t v13 = *(void **)(a1 + j + 1312);
    if (v13)
    {
      *(void *)(v12 + 1320) = v13;
      operator delete(v13);
    }
    if (*(char *)(v12 + 1311) < 0) {
      operator delete(*(void **)(a1 + j + 1288));
    }
  }
  if ((*(unsigned char *)(a1 + 696) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 704), 8);
  }
  unsigned int v14 = *(void **)(a1 + 408);
  if (v14 != (void *)(a1 + 424)) {
    free(v14);
  }
  if ((*(unsigned char *)(a1 + 144) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 152), 4);
  }
  return a1;
}

void sub_1CBA74434(uint64_t a1)
{
  sub_1CBA74270(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CBA7446C()
{
  return 1;
}

void sub_1CBA74474(uint64_t a1, int8x16_t *a2)
{
  v289[8] = *MEMORY[0x1E4F143B8];
  int v4 = (int64x2_t *)(a1 + 2376);
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = (char *)a2 + 632;
  *(int8x16_t *)(a1 + 24) = vextq_s8(a2[1], a2[1], 8uLL);
  uint64_t v5 = a2->i64[1];
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = (void *)a2[2].i64[0];
  *(void *)(a1 + 48) = v6[5];
  *(void *)(a1 + 56) = *(void *)(*v6 + 40) + 272;
  *(void *)(a1 + 64) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  uint64_t v7 = *(void **)(a1 + 24);
  uint64_t v8 = *(void *)(v7[30] + 48);
  uint64_t v9 = (_DWORD *)(*(uint64_t (**)(void))(*v7 + 320))();
  int v10 = (int64x2_t *)(a1 + 3144);
  *(_DWORD *)(a1 + 3144) = *v9;
  uint64_t v268 = a2;
  unsigned int v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 312))();
  if (v9[1] != -1)
  {
    unsigned int v12 = v11;
    uint64_t v13 = v9 + 2;
    do
    {
      unsigned int v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 312))(*(void *)(a1 + 24), v268[2].i64[0]);
      if (v14 > v12)
      {
        v10->i32[0] = *(v13 - 1);
        unsigned int v12 = v14;
      }
      int v15 = *v13++;
    }
    while (v15 != -1);
  }
  BOOL v16 = (int *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 280))(*(void *)(a1 + 24), v8);
  uint64_t v17 = 0;
  int v18 = *v16;
  *(_DWORD *)(a1 + 3148) = *v16;
  unsigned int v19 = *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 3128) + 4 * *(unsigned int *)(a1 + 3144));
  *(unsigned char *)(a1 + 3251) = v19 >= 24 * v18;
  *(unsigned char *)(a1 + 3252) = v19 >= v18 << 7;
  do
  {
    *(void *)(a1 + v17 + 872) = *(void *)(a1 + v17 + 864);
    v17 += 56;
  }
  while (v17 != 504);
  *(_DWORD *)(a1 + 3152) = 0;
  int v20 = *(_DWORD *)(a1 + 1536);
  if (v20 || *(_DWORD *)(a1 + 1540))
  {
    uint64_t v248 = *(unsigned int *)(a1 + 1544);
    if (v248 > 4 * v20 && v248 >= 0x41)
    {
      sub_1CBA7B248((_DWORD *)(a1 + 1528));
    }
    else
    {
      if (v248)
      {
        unsigned int v249 = *(void **)(a1 + 1528);
        uint64_t v250 = 16 * v248;
        do
        {
          *unsigned int v249 = -4096;
          v249 += 2;
          v250 -= 16;
        }
        while (v250);
      }
      *(void *)(a1 + 1536) = 0;
    }
  }
  unsigned int v21 = *(_DWORD *)(a1 + 2368);
  if (v21 > 1 || *(_DWORD *)(a1 + 2372))
  {
    if (v21)
    {
      unsigned int v245 = (int64x2_t *)(a1 + 2376);
    }
    else
    {
      uint64_t v246 = *(unsigned int *)(a1 + 2384);
      if (((2 * v21) & 0xFFFFFFFC) < v246 && v246 >= 0x41)
      {
        unsigned int v251 = 1 << (33 - __clz((v21 >> 1) - 1));
        if (v21 >= 2) {
          uint64_t v252 = v251;
        }
        else {
          uint64_t v252 = 0;
        }
        if (v252 == v246)
        {
          *(void *)(a1 + 2368) = 0;
          unsigned int v256 = *(int64x2_t **)(a1 + 2376);
          uint64_t v257 = 24 * v246;
          int64x2_t v258 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
          do
          {
            *unsigned int v256 = v258;
            unsigned int v256 = (int64x2_t *)((char *)v256 + 24);
            v257 -= 24;
          }
          while (v257);
        }
        else
        {
          MEMORY[0x1D25D9CD0](v4->i64[0], 8);
          if (v252 > 0x20)
          {
            *(_DWORD *)(a1 + 2368) &= ~1u;
            BOOL v254 = (int64x2_t *)operator new(24 * v252, (std::align_val_t)8uLL);
            *(void *)(a1 + 2376) = v254;
            *(void *)(a1 + 2384) = v252;
            BOOL v76 = (*(_DWORD *)(a1 + 2368) & 1) == 0;
            *(_DWORD *)(a1 + 2368) &= 1u;
            *(_DWORD *)(a1 + 2372) = 0;
            if (v76)
            {
              int v10 = (int64x2_t *)((char *)v254 + 24 * v252);
              uint64_t v253 = v254;
            }
            else
            {
              uint64_t v253 = v4;
            }
          }
          else
          {
            *(void *)(a1 + 2368) = 1;
            uint64_t v253 = v4;
          }
          int64x2_t v255 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
          do
          {
            *uint64_t v253 = v255;
            uint64_t v253 = (int64x2_t *)((char *)v253 + 24);
          }
          while (v253 != v10);
        }
        goto LABEL_12;
      }
      if (!v246)
      {
LABEL_401:
        *(_DWORD *)(a1 + 2368) = v246;
        *(_DWORD *)(a1 + 2372) = 0;
        goto LABEL_12;
      }
      unsigned int v245 = *(int64x2_t **)(a1 + 2376);
      int v10 = (int64x2_t *)((char *)v245 + 24 * v246);
    }
    do
    {
      v245->i64[0] = -4096;
      v245->i64[1] = -4096;
      unsigned int v245 = (int64x2_t *)((char *)v245 + 24);
    }
    while (v245 != v10);
    LODWORD(v246) = *(_DWORD *)(a1 + 2368) & 1;
    goto LABEL_401;
  }
LABEL_12:
  unsigned int v22 = *(_DWORD *)(a1 + 144);
  if (v22 <= 1 && !*(_DWORD *)(a1 + 148)) {
    goto LABEL_18;
  }
  if (v22)
  {
    unsigned int v23 = (void *)(a1 + 152);
    size_t v24 = 256;
LABEL_16:
    memset_pattern16(v23, &unk_1CDB15640, v24);
    LODWORD(v25) = *(_DWORD *)(a1 + 144) & 1;
    goto LABEL_17;
  }
  unsigned int v247 = (2 * v22) & 0xFFFFFFFC;
  uint64_t v25 = *(unsigned int *)(a1 + 160);
  if (v247 < v25 && v25 >= 0x41)
  {
    sub_1CD4140C0((unsigned int *)(a1 + 144));
    goto LABEL_18;
  }
  if (v25)
  {
    unsigned int v23 = *(void **)(a1 + 152);
    size_t v24 = 8 * v25;
    goto LABEL_16;
  }
LABEL_17:
  *(_DWORD *)(a1 + 144) = v25;
  *(_DWORD *)(a1 + 148) = 0;
LABEL_18:
  uint64_t v26 = 0;
  *(_DWORD *)(a1 + 416) = 0;
  do
  {
    uint64_t v27 = a1 + v26;
    *(_DWORD *)(a1 + v26 + 1688) = 0;
    uint64_t v28 = *(unsigned int *)(*(void *)(a1 + 16) + 48);
    if (v28)
    {
      if (*(_DWORD *)(v27 + 1692) < v28) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      bzero(*(void **)(v27 + 1680), 4 * v28);
      *(_DWORD *)(v27 + 1688) = v28;
    }
    v26 += 80;
  }
  while (v26 != 160);
  *(_DWORD *)(a1 + 3156) = 0;
  unint64_t v287 = v289;
  uint64_t v288 = 0x1000000000;
  uint64_t v275 = (void **)(a1 + 1600);
  *(_DWORD *)(a1 + 1608) = 0;
  uint64_t v29 = *(void *)(a1 + 16);
  uint64_t v30 = *(unsigned int *)(v29 + 48);
  uint64_t v269 = (uint64_t *)v4;
  if (v30)
  {
    if (*(_DWORD *)(a1 + 1612) < v30) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    bzero(*v275, 4 * v30);
    *(_DWORD *)(a1 + 1608) = v30;
    uint64_t v29 = *(void *)(a1 + 16);
    uint64_t v31 = *(unsigned int *)(v29 + 48);
    LODWORD(v288) = 0;
    if (v31)
    {
      if (HIDWORD(v288) < v31) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      bzero(v287, 4 * v31);
      LODWORD(v288) = v31;
      uint64_t v29 = *(void *)(a1 + 16);
    }
  }
  uint64_t v32 = *(void *)(a1 + 32);
  unint64_t v33 = *(unsigned char **)(a1 + 64);
  unsigned int v34 = sub_1CB952700(20, 244, v33);
  uint64_t v35 = *(void *)(v32 + 8);
  unsigned int v36 = *(unsigned __int16 *)(v35 + 48 * v34 + 6);
  unsigned int v37 = sub_1CB952700(6, 385, v33);
  unsigned int v38 = *(unsigned __int16 *)(v35 + 219750);
  unsigned int v39 = *(unsigned __int16 *)(v35 + 195606);
  uint64_t v40 = *(void *)(v29 + 40);
  uint64_t v41 = v40 + 24 * v36;
  uint64_t v42 = v40 + 24 * *(unsigned __int16 *)(v35 + 48 * v37 + 6);
  *(void *)(a1 + 72) = v41;
  *(void *)(a1 + 80) = v42;
  uint64_t v43 = v40 + 24 * v38;
  uint64_t v44 = v40 + 24 * v39;
  *(void *)(a1 + 88) = v43;
  *(void *)(a1 + 96) = v44;
  uint64_t v273 = v29;
  uint64_t v45 = *(void *)(*(void *)(v29 + 176) + 136);
  *(_DWORD *)(a1 + 104) = *(unsigned __int16 *)(v45 + 4 * *(unsigned __int16 *)(v44 + 10));
  *(_DWORD *)(a1 + 108) = *(unsigned __int16 *)(v45 + 4 * *(unsigned __int16 *)(v43 + 10));
  *(_DWORD *)(a1 + 112) = *(unsigned __int16 *)(v45 + 4 * *(unsigned __int16 *)(v42 + 10));
  *(_DWORD *)(a1 + 116) = *(unsigned __int16 *)(v45 + 4 * *(unsigned __int16 *)(v41 + 10));
  uint64_t v46 = *(void *)(a1 + 8);
  uint64_t v47 = *(void *)(v46 + 48);
  uint64_t v277 = *(void *)(v46 + 56);
  if (v47 == v277) {
    goto LABEL_45;
  }
  do
  {
    uint64_t v48 = *(_WORD **)(v47 + 24);
    if (!v48)
    {
      uint64_t v49 = *(void *)(a1 + 8);
      uint64_t v48 = (_WORD *)(*(void *)(v49 + 672)
                    + 24 * *(unsigned __int16 *)(*(void *)(*(void *)(v47 + 8) + 16) + 6));
      if ((v48[4] & 0x1FFF) == 0x1FFE)
      {
        do
        {
          unsigned int v58 = (*(uint64_t (**)(void))(**(void **)(v49 + 808) + 200))(*(void *)(v49 + 808));
          uint64_t v59 = *(void *)(v49 + 672);
        }
        while ((*(_WORD *)(v59 + 24 * v58 + 8) & 0x1FFF) == 0x1FFE);
        uint64_t v48 = (_WORD *)(v59 + 24 * v58);
        uint64_t v273 = *(void *)(a1 + 16);
      }
      *(void *)(v47 + 24) = v48;
    }
    if (v48[6])
    {
      unint64_t v50 = (unsigned __int16 *)(*(void *)(*(void *)(v273 + 176) + 136) + 4 * (unsigned __int16)v48[5]);
      unint64_t v51 = &v50[2 * (unsigned __int16)v48[6]];
      unint64_t v52 = *v275;
      unsigned int v53 = v287;
      int v54 = *(unsigned __int16 **)(*(void *)(v47 + 8) + 16);
      do
      {
        uint64_t v55 = *v50;
        int v56 = v50[1];
        int v57 = sub_1CBA7B134(a1, *v50, v54);
        v52[v55] += v57 * v56;
        v53[v55] += v57 * v56;
        v50 += 2;
      }
      while (v50 != v51);
    }
    v47 += 272;
  }
  while (v47 != v277);
  uint64_t v60 = *(void *)(a1 + 8);
  uint64_t v62 = *(void *)(v60 + 48);
  uint64_t v61 = *(void *)(v60 + 56);
  if (v61 == v62 || 0xF0F0F0F0F0F0F0F1 * ((v61 - v62) >> 4) < 0x1069) {
    goto LABEL_45;
  }
  unsigned int v241 = 0;
  unsigned int v242 = 0;
  do
  {
    if ((*(unsigned char *)(v62 + 236) & 1) == 0) {
      llvm::SUnit::ComputeDepth((llvm::SUnit *)v62);
    }
    if (*(_DWORD *)(v62 + 240) > v241)
    {
      unsigned int v241 = *(_DWORD *)(v62 + 240);
      if ((*(unsigned char *)(v62 + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth((llvm::SUnit *)v62);
        unsigned int v241 = *(_DWORD *)(v62 + 240);
      }
    }
    v242 += sub_1CBA7B1D8(*(void *)(v62 + 8));
    v62 += 272;
  }
  while (v62 != v61);
  if (v241 < 0x2A8 || v242 < 0x1E) {
LABEL_45:
  }
    char v64 = 0;
  else {
    char v64 = 1;
  }
  *(unsigned char *)(a1 + 3253) = v64;
  uint64_t v65 = *(void *)(a1 + 16);
  uint64_t v66 = *(unsigned int *)(v65 + 48);
  unsigned int v67 = v287;
  if (v66)
  {
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = *(void *)(a1 + 1600);
    int v71 = *(_DWORD *)(v65 + 276);
    uint64_t v72 = *(unsigned int *)(a1 + 3156);
    do
    {
      if (*(_DWORD *)(v70 + 4 * v68) - *(_DWORD *)(v70 + 4 * v72) >= v71)
      {
        *(_DWORD *)(a1 + 3156) = v68;
        uint64_t v72 = v68;
      }
      if (v67[v68] - v67[v69] >= v71) {
        uint64_t v69 = v68;
      }
      ++v68;
    }
    while (v66 != v68);
  }
  else
  {
    uint64_t v69 = 0;
  }
  *(float *)(a1 + 3168) = (float)v67[v69] / 12.0;
  sub_1CB901390((void *)(a1 + 696));
  BOOL v73 = *(llvm::ScheduleDAGMILive **)(a1 + 8);
  unint64_t v74 = *(unsigned __int16 **)(*((void *)v73 + 116) + 16);
  int v75 = *v74;
  BOOL v76 = (v75 - 9) > 0x3C || ((1 << (v75 - 9)) & 0x1000000000000605) == 0;
  BOOL v77 = !v76 || v75 == 0;
  BOOL v78 = !v77 && (v74[4] & 0x10) == 0 && (v74[8] & 1) == 0;
  unint64_t v260 = (_DWORD *)v269 + 207;
  *(uint64_t *)((char *)v269 + 828) = 0;
  *(unsigned char *)(a1 + 3263) = 0;
  *(_DWORD *)(a1 + 3196) = 0;
  *(_OWORD *)(a1 + 3180) = 0u;
  int v79 = *(unsigned __int8 *)(*(void *)(a1 + 64) + 318);
  if (*(unsigned char *)(*(void *)(a1 + 64) + 318)) {
    int v79 = *(_DWORD *)(a1 + 3224);
  }
  *(_DWORD *)(a1 + 3200) = v79;
  *(_DWORD *)(a1 + 3176) = 0;
  *(void *)(a1 + 688) = 0;
  *(unsigned char *)(a1 + 3260) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  uint64_t v80 = *((void *)v73 + 77);
  uint64_t v81 = *((void *)v73 + 4);
  uint64_t v82 = *(void *)(v81 + 48);
  if (!v82)
  {
    BOOL v83 = v78;
    uint64_t v84 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v81 + 8) + 216))(*(void *)(v81 + 8), v81 + 128, v81);
    BOOL v78 = v83;
    uint64_t v82 = v84;
    *(void *)(v81 + 48) = v84;
    BOOL v73 = *(llvm::ScheduleDAGMILive **)(a1 + 8);
  }
  if (!*(unsigned char *)(v82 + 432))
  {
    BOOL v85 = v78;
    sub_1CD10B93C(*(llvm::Module **)(**((void **)v73 + 4) + 40), v82 + 384, v82 + 208, v82 + 408);
    BOOL v78 = v85;
    *(unsigned char *)(v82 + 432) = 1;
    BOOL v73 = *(llvm::ScheduleDAGMILive **)(a1 + 8);
  }
  uint64_t v86 = *((void *)v73 + 6);
  uint64_t v267 = *((void *)v73 + 7);
  if (v86 != v267)
  {
    int v87 = 0;
    uint64_t v259 = (uint64_t ***)(a1 + 2304);
    uint64_t v261 = v82;
    uint64_t v262 = v80;
    while (1)
    {
      unint64_t v88 = *(void **)(v86 + 8);
      if (!v88) {
        goto LABEL_362;
      }
      BOOL v276 = v78;
      uint64_t v89 = (unsigned __int16 *)v88[2];
      uint64_t v90 = *((void *)v89 + 2);
      int v91 = *v89;
      if ((v91 - 9) <= 0x3C && ((1 << (v91 - 9)) & 0x1000000000000605) != 0
        || v91 == 0)
      {
        BOOL v274 = 0;
        if ((v90 & 8) == 0) {
          goto LABEL_86;
        }
      }
      else
      {
        BOOL v94 = (v89[4] & 0x10) == 0 && (*((void *)v89 + 2) & 1) == 0;
        BOOL v274 = v94;
        if ((v90 & 8) == 0) {
          goto LABEL_86;
        }
      }
      ++*(_DWORD *)(a1 + 3208);
LABEL_86:
      int v278 = v90;
      if ((~v90 & 0x800100) != 0) {
        goto LABEL_170;
      }
      int v95 = *(_DWORD *)(v80 + 264);
      if (v95)
      {
        uint64_t v96 = v88[3];
        uint64_t v97 = *(void *)(v80 + 248);
        unsigned int v98 = v95 - 1;
        uint64_t v99 = ((v96 >> 4) ^ (v96 >> 9)) & (v95 - 1);
        uint64_t v100 = *(void *)(v97 + 16 * v99);
        if (v96 == v100)
        {
LABEL_92:
          if (*(void *)(v97 + 16 * v99 + 8)) {
            goto LABEL_170;
          }
        }
        else
        {
          int v101 = 1;
          while (v100 != -4096)
          {
            int v102 = v99 + v101++;
            uint64_t v99 = v102 & v98;
            uint64_t v100 = *(void *)(v97 + 16 * v99);
            if (v96 == v100) {
              goto LABEL_92;
            }
          }
        }
      }
      uint64_t v103 = v88 + 6;
      uint64_t v104 = v88[6];
      if ((v104 & 7) != 0) {
        uint64_t v103 = (unint64_t *)((v104 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else {
        *uint64_t v103 = v104 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v265 = v88;
      uint64_t v270 = v86;
      uint64_t v105 = *(unsigned int *)(v82 + 216);
      if (v105)
      {
        int v263 = v87;
        int v106 = 0;
        int v107 = 0;
        uint64_t v108 = *(void *)(v82 + 208);
        uint64_t v109 = v108 + 16 * v105;
        int v110 = (unint64_t *)((*(void *)*v103 & ((uint64_t)(*(void *)*v103 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)
                                  + 16);
        while (1)
        {
          *(void *)&long long v280 = 1;
          if ((*(void *)v108 & 1) == 0) {
            operator new();
          }
          *(void *)&long long v280 = *(void *)v108;
          sub_1CBA7B2F4((unint64_t *)&v280, v110);
          uint64_t v111 = v280;
          if (v280)
          {
            if ((((unint64_t)v280 >> 1) & ~(-1 << ((unint64_t)v280 >> 58))) == 0) {
              goto LABEL_112;
            }
          }
          else
          {
            uint64_t v112 = *(unsigned int *)(v280 + 8);
            if (!v112) {
              goto LABEL_108;
            }
            BOOL v113 = *(void **)v280;
            uint64_t v114 = 8 * v112;
            while (!*v113)
            {
              ++v113;
              v114 -= 8;
              if (!v114)
              {
                if (v280) {
                  goto LABEL_112;
                }
                goto LABEL_108;
              }
            }
          }
          v106 |= 1 << *(_WORD *)(v108 + 8);
          v107 |= 1 << *(_WORD *)(v108 + 10);
          if ((v280 & 1) == 0)
          {
LABEL_108:
            if ((void)v280)
            {
              if (*(void *)v280 != (void)v280 + 16) {
                free(*(void **)v280);
              }
              MEMORY[0x1D25D9CE0](v111, 0x1080C40EF38A13ELL);
            }
          }
LABEL_112:
          v108 += 16;
          if (v108 == v109)
          {
            unsigned int v115 = (unsigned __int16)(v107 | v106);
            uint64_t v82 = v261;
            uint64_t v80 = v262;
            int v87 = v263;
            goto LABEL_116;
          }
        }
      }
      unsigned int v115 = 0;
LABEL_116:
      *(void *)&long long v280 = v270;
      *((_DWORD *)sub_1CBA7B7CC((_DWORD *)(a1 + 1528), &v280) + 2) = v115;
      int v284 = v286;
      HIDWORD(v285) = 16;
      v286[0] = v270;
      *(void *)&long long v280 = v283;
      *((void *)&v280 + 1) = v283;
      uint64_t v281 = 32;
      unsigned int v116 = 1;
      int v282 = 0;
      do
      {
        uint64_t v117 = *((void *)v284 + --v116);
        LODWORD(v285) = v116;
        uint64_t v118 = *(unsigned int *)(v117 + 120);
        if (!v118) {
          continue;
        }
        unsigned int v119 = *(void **)(v117 + 112);
        uint64_t v120 = &v119[2 * v118];
        do
        {
          unint64_t v121 = *v119 & 0xFFFFFFFFFFFFFFF8;
          if (*(_DWORD *)(v121 + 192) == -1) {
            goto LABEL_156;
          }
          uint64_t v122 = *((void *)&v280 + 1);
          uint64_t v123 = HIDWORD(v281);
          if (*((void *)&v280 + 1) == (void)v280)
          {
            if (HIDWORD(v281))
            {
              unsigned int v124 = 0;
              uint64_t v125 = 8 * HIDWORD(v281);
              uint64_t v126 = (unint64_t *)*((void *)&v280 + 1);
              while (*v126 != v121)
              {
                if (*v126 == -2) {
                  unsigned int v124 = v126;
                }
                ++v126;
                v125 -= 8;
                if (!v125)
                {
                  if (!v124) {
                    goto LABEL_128;
                  }
                  *unsigned int v124 = v121;
                  --v282;
                  goto LABEL_152;
                }
              }
              goto LABEL_156;
            }
LABEL_128:
            unsigned int v127 = v281;
            if (HIDWORD(v281) < v281)
            {
              ++HIDWORD(v281);
              *(void *)(*((void *)&v280 + 1) + 8 * v123) = v121;
LABEL_152:
              unint64_t v279 = v121;
              uint64_t v137 = sub_1CBA7B7CC((_DWORD *)(a1 + 1528), &v279);
              unsigned int v138 = *((_DWORD *)v137 + 2);
              if (v138 <= v115) {
                unsigned int v138 = v115;
              }
              *((_DWORD *)v137 + 2) = v138;
              if (v285 >= (unint64_t)HIDWORD(v285)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v284 + v285) = v121;
              LODWORD(v285) = v285 + 1;
              goto LABEL_156;
            }
          }
          else
          {
            unsigned int v127 = v281;
          }
          if (3 * v127 <= 4 * (HIDWORD(v281) - v282))
          {
            if (v127 >= 0x40) {
              v127 *= 2;
            }
            else {
              unsigned int v127 = 128;
            }
          }
          else if (v127 - HIDWORD(v281) >= v127 >> 3)
          {
            goto LABEL_133;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v280, v127);
          unsigned int v127 = v281;
          uint64_t v122 = *((void *)&v280 + 1);
LABEL_133:
          unsigned int v128 = v127 - 1;
          unsigned int v129 = (v127 - 1) & ((v121 >> 4) ^ (v121 >> 9));
          uint64_t v130 = (unint64_t *)(v122 + 8 * v129);
          unint64_t v131 = *v130;
          if (*v130 == -1)
          {
            uint64_t v132 = 0;
LABEL_145:
            if (v132) {
              uint64_t v136 = v132;
            }
            else {
              uint64_t v136 = v130;
            }
            if (*v136 != v121)
            {
              if (*v136 == -2) {
                --v282;
              }
              else {
                ++HIDWORD(v281);
              }
              unint64_t *v136 = v121;
              goto LABEL_152;
            }
          }
          else
          {
            uint64_t v132 = 0;
            int v133 = 1;
            while (v131 != v121)
            {
              if (v132) {
                BOOL v134 = 0;
              }
              else {
                BOOL v134 = v131 == -2;
              }
              if (v134) {
                uint64_t v132 = v130;
              }
              unsigned int v135 = v129 + v133++;
              unsigned int v129 = v135 & v128;
              uint64_t v130 = (unint64_t *)(v122 + 8 * (v135 & v128));
              unint64_t v131 = *v130;
              if (*v130 == -1) {
                goto LABEL_145;
              }
            }
          }
LABEL_156:
          v119 += 2;
        }
        while (v119 != v120);
        unsigned int v116 = v285;
      }
      while (v116);
      if (*((void *)&v280 + 1) != (void)v280) {
        free(*((void **)&v280 + 1));
      }
      uint64_t v86 = v270;
      unint64_t v88 = v265;
      if (v284 != v286) {
        free(v284);
      }
LABEL_170:
      if ((*(void *)&v278 & 0x800200) == 0x800200)
      {
        uint64_t v139 = *(void *)(v86 + 8);
        int v140 = *(_DWORD *)(v80 + 264);
        if (!v140) {
          goto LABEL_177;
        }
        uint64_t v141 = *(void *)(v139 + 24);
        uint64_t v142 = *(void *)(v80 + 248);
        unsigned int v143 = v140 - 1;
        uint64_t v144 = ((v141 >> 4) ^ (v141 >> 9)) & (v140 - 1);
        uint64_t v145 = *(void *)(v142 + 16 * v144);
        if (v141 == v145)
        {
LABEL_176:
          if (!*(void *)(v142 + 16 * v144 + 8)) {
            goto LABEL_177;
          }
        }
        else
        {
          int v146 = 1;
          while (v145 != -4096)
          {
            int v147 = v144 + v146++;
            uint64_t v144 = v147 & v143;
            uint64_t v145 = *(void *)(v142 + 16 * v144);
            if (v141 == v145) {
              goto LABEL_176;
            }
          }
LABEL_177:
          uint64_t v150 = *(void *)(v139 + 48);
          uint64_t v148 = (unint64_t *)(v139 + 48);
          uint64_t v149 = v150;
          uint64_t v271 = v86;
          if ((v150 & 7) != 0) {
            uint64_t v148 = (unint64_t *)((v149 & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          else {
            *uint64_t v148 = v149 & 0xFFFFFFFFFFFFFFF8;
          }
          unint64_t v266 = v88;
          uint64_t v151 = *(unsigned int *)(v82 + 216);
          if (v151)
          {
            int v264 = v87;
            int v152 = 0;
            int v153 = 0;
            uint64_t v154 = *(void *)(v82 + 208);
            uint64_t v155 = v154 + 16 * v151;
            uint64_t v156 = (unint64_t *)((*(void *)*v148 & ((uint64_t)(*(void *)*v148 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)
                                      + 16);
            while (1)
            {
              *(void *)&long long v280 = 1;
              if ((*(void *)v154 & 1) == 0) {
                operator new();
              }
              *(void *)&long long v280 = *(void *)v154;
              sub_1CBA7B2F4((unint64_t *)&v280, v156);
              uint64_t v157 = v280;
              if (v280)
              {
                if ((((unint64_t)v280 >> 1) & ~(-1 << ((unint64_t)v280 >> 58))) == 0) {
                  goto LABEL_196;
                }
              }
              else
              {
                uint64_t v158 = *(unsigned int *)(v280 + 8);
                if (!v158) {
                  goto LABEL_192;
                }
                unint64_t v159 = *(void **)v280;
                uint64_t v160 = 8 * v158;
                while (!*v159)
                {
                  ++v159;
                  v160 -= 8;
                  if (!v160)
                  {
                    if (v280) {
                      goto LABEL_196;
                    }
                    goto LABEL_192;
                  }
                }
              }
              v152 |= 1 << *(_WORD *)(v154 + 8);
              v153 |= 1 << *(_WORD *)(v154 + 10);
              if ((v280 & 1) == 0)
              {
LABEL_192:
                if ((void)v280)
                {
                  if (*(void *)v280 != (void)v280 + 16) {
                    free(*(void **)v280);
                  }
                  MEMORY[0x1D25D9CE0](v157, 0x1080C40EF38A13ELL);
                }
              }
LABEL_196:
              v154 += 16;
              if (v154 == v155)
              {
                int v161 = (unsigned __int16)(v153 | v152);
                uint64_t v82 = v261;
                uint64_t v80 = v262;
                int v87 = v264;
                goto LABEL_200;
              }
            }
          }
          int v161 = 0;
LABEL_200:
          uint64_t v86 = v271;
          *(void *)&long long v280 = v271;
          *((_DWORD *)sub_1CBA7B7CC((_DWORD *)(a1 + 1528), &v280) + 2) = v161;
          unint64_t v88 = v266;
        }
      }
      uint64_t v162 = v88;
      unint64_t v163 = (unsigned __int16 *)v88[2];
      if (*v163 - 4821 <= 3) {
        *(void *)(a1 + 688) = v86;
      }
      v87 += v276 && !v274;
      if (!v274)
      {
        uint64_t v165 = *(void *)(a1 + 1848);
        uint64_t v166 = *(unsigned int *)(a1 + 1860);
        if (v165 == *(void *)(a1 + 1840))
        {
          if (v166)
          {
            int v167 = 0;
            uint64_t v168 = 8 * v166;
            uint64_t v169 = *(void **)(a1 + 1848);
            while (*v169 != v86)
            {
              if (*v169 == -2) {
                int v167 = v169;
              }
              ++v169;
              v168 -= 8;
              if (!v168)
              {
                if (!v167) {
                  goto LABEL_220;
                }
                BOOL v78 = 0;
                *int v167 = v86;
                --*(_DWORD *)(a1 + 1864);
                goto LABEL_362;
              }
            }
            goto LABEL_254;
          }
LABEL_220:
          unsigned int v170 = *(_DWORD *)(a1 + 1856);
          if (v166 < v170)
          {
            BOOL v78 = 0;
            *(_DWORD *)(a1 + 1860) = v166 + 1;
            *(void *)(v165 + 8 * v166) = v86;
            goto LABEL_362;
          }
        }
        else
        {
          unsigned int v170 = *(_DWORD *)(a1 + 1856);
        }
        if (3 * v170 <= 4 * ((int)v166 - *(_DWORD *)(a1 + 1864)))
        {
          if (v170 >= 0x40) {
            v170 *= 2;
          }
          else {
            unsigned int v170 = 128;
          }
        }
        else if (v170 - v166 >= v170 >> 3)
        {
          goto LABEL_225;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 1840), v170);
        unsigned int v170 = *(_DWORD *)(a1 + 1856);
        uint64_t v165 = *(void *)(a1 + 1848);
LABEL_225:
        unsigned int v171 = v170 - 1;
        unsigned int v172 = (v170 - 1) & ((v86 >> 4) ^ (v86 >> 9));
        uint64_t v173 = (void *)(v165 + 8 * v172);
        uint64_t v174 = *v173;
        if (*v173 == -1)
        {
          int v175 = 0;
LABEL_247:
          if (v175) {
            uint64_t v191 = v175;
          }
          else {
            uint64_t v191 = v173;
          }
          if (*v191 != v86)
          {
            if (*v191 == -2) {
              --*(_DWORD *)(a1 + 1864);
            }
            else {
              ++*(_DWORD *)(a1 + 1860);
            }
            BOOL v78 = 0;
            *uint64_t v191 = v86;
            goto LABEL_362;
          }
        }
        else
        {
          int v175 = 0;
          int v176 = 1;
          while (v174 != v86)
          {
            if (v175) {
              BOOL v177 = 0;
            }
            else {
              BOOL v177 = v174 == -2;
            }
            if (v177) {
              int v175 = v173;
            }
            unsigned int v178 = v172 + v176++;
            unsigned int v172 = v178 & v171;
            uint64_t v173 = (void *)(v165 + 8 * (v178 & v171));
            uint64_t v174 = *v173;
            if (*v173 == -1) {
              goto LABEL_247;
            }
          }
        }
LABEL_254:
        BOOL v78 = 0;
        goto LABEL_362;
      }
      if (!sub_1CBA7B1D8((uint64_t)v162)) {
        goto LABEL_349;
      }
      ++*v260;
      if ((v278 & 2) != 0)
      {
        uint64_t v179 = *((unsigned __int8 *)v163 + 4) + 2;
        uint64_t v180 = v162[4];
        if (*(unsigned char *)(v180 + 32 * v179) != 7) {
          goto LABEL_349;
        }
        int v181 = v87;
        unint64_t v182 = *(unsigned int *)(v180 + 32 * v179 + 4);
        unsigned int v183 = operator new(0x20uLL);
        v183[4] = v182;
        *((void *)v183 + 3) = v86;
        *(void *)unsigned int v183 = 0;
        *((void *)v183 + 1) = v182;
        unint64_t v184 = *(void *)(a1 + 2296);
        float v185 = (float)(unint64_t)(*(void *)(a1 + 2312) + 1);
        float v186 = *(float *)(a1 + 2320);
        if (!v184 || (float)(v186 * (float)v184) < v185)
        {
          uint64_t v272 = v86;
          BOOL v187 = (v184 & (v184 - 1)) != 0;
          if (v184 < 3) {
            BOOL v187 = 1;
          }
          unint64_t v188 = v187 | (2 * v184);
          unint64_t v189 = vcvtps_u32_f32(v185 / v186);
          if (v188 <= v189) {
            int8x8_t prime = (int8x8_t)v189;
          }
          else {
            int8x8_t prime = (int8x8_t)v188;
          }
          if (*(void *)&prime == 1)
          {
            int8x8_t prime = (int8x8_t)2;
          }
          else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
          {
            int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
            unint64_t v184 = *(void *)(a1 + 2296);
          }
          if (*(void *)&prime <= v184)
          {
            if (*(void *)&prime < v184)
            {
              unint64_t v197 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 2312) / *(float *)(a1 + 2320));
              if (v184 < 3
                || (uint8x8_t v198 = (uint8x8_t)vcnt_s8((int8x8_t)v184), v198.i16[0] = vaddlv_u8(v198), v198.u32[0] > 1uLL))
              {
                unint64_t v197 = std::__next_prime(v197);
              }
              else
              {
                uint64_t v199 = 1 << -(char)__clz(v197 - 1);
                if (v197 >= 2) {
                  unint64_t v197 = v199;
                }
              }
              if (*(void *)&prime <= v197) {
                int8x8_t prime = (int8x8_t)v197;
              }
              if (*(void *)&prime >= v184)
              {
                unint64_t v184 = *(void *)(a1 + 2296);
              }
              else
              {
                if (prime) {
                  goto LABEL_263;
                }
                uint64_t v209 = *(void **)(a1 + 2288);
                *(void *)(a1 + 2288) = 0;
                if (v209) {
                  operator delete(v209);
                }
                unint64_t v184 = 0;
                *(void *)(a1 + 2296) = 0;
                uint64_t v82 = v261;
                uint64_t v80 = v262;
              }
            }
          }
          else
          {
LABEL_263:
            if (*(void *)&prime >> 61) {
              sub_1CB833614();
            }
            uint64_t v193 = operator new(8 * *(void *)&prime);
            uint64_t v194 = *(void **)(a1 + 2288);
            *(void *)(a1 + 2288) = v193;
            if (v194) {
              operator delete(v194);
            }
            uint64_t v195 = 0;
            *(int8x8_t *)(a1 + 2296) = prime;
            do
              *(void *)(*(void *)(a1 + 2288) + 8 * v195++) = 0;
            while (*(void *)&prime != v195);
            uint64_t v196 = *v259;
            if (*v259)
            {
              unint64_t v202 = (unint64_t)v196[1];
              uint8x8_t v203 = (uint8x8_t)vcnt_s8(prime);
              v203.i16[0] = vaddlv_u8(v203);
              if (v203.u32[0] <= 1uLL)
              {
                v202 &= *(void *)&prime - 1;
              }
              else if (v202 >= *(void *)&prime)
              {
                v202 %= *(void *)&prime;
              }
              *(void *)(*(void *)(a1 + 2288) + 8 * v202) = v259;
              for (uint64_t i = *v196; *v196; uint64_t i = *v196)
              {
                unint64_t v205 = i[1];
                if (v203.u32[0] <= 1uLL)
                {
                  v205 &= *(void *)&prime - 1;
                }
                else if (v205 >= *(void *)&prime)
                {
                  v205 %= *(void *)&prime;
                }
                if (v205 == v202)
                {
                  uint64_t v196 = (uint64_t **)i;
                }
                else
                {
                  uint64_t v206 = *(void *)(a1 + 2288);
                  uint64_t v207 = i;
                  if (*(void *)(v206 + 8 * v205))
                  {
                    do
                    {
                      unsigned int v208 = v207;
                      uint64_t v207 = (uint64_t *)*v207;
                    }
                    while (v207 && *((_DWORD *)i + 4) == *((_DWORD *)v207 + 4));
                    uint64_t *v196 = v207;
                    *unsigned int v208 = **(void **)(*(void *)(a1 + 2288) + 8 * v205);
                    **(void **)(*(void *)(a1 + 2288) + 8 * v205) = i;
                  }
                  else
                  {
                    *(void *)(v206 + 8 * v205) = v196;
                    uint64_t v196 = (uint64_t **)i;
                    unint64_t v202 = v205;
                  }
                }
              }
            }
            unint64_t v184 = (unint64_t)prime;
          }
          uint64_t v86 = v272;
        }
        uint8x8_t v210 = (uint8x8_t)vcnt_s8((int8x8_t)v184);
        v210.i16[0] = vaddlv_u8(v210);
        if (v210.u32[0] > 1uLL)
        {
          unint64_t v211 = v182;
          if (v184 <= v182) {
            unint64_t v211 = v182 % v184;
          }
        }
        else
        {
          unint64_t v211 = (v184 - 1) & v182;
        }
        uint64_t v212 = *(void *)(a1 + 2288);
        char v213 = *(uint64_t ***)(v212 + 8 * v211);
        if (v213)
        {
          uint64_t v214 = *v213;
          if (*v213)
          {
            int v215 = 0;
            do
            {
              unint64_t v216 = v214;
              unint64_t v217 = v214[1];
              if (v210.u32[0] > 1uLL)
              {
                unint64_t v218 = v217;
                if (v217 >= v184) {
                  unint64_t v218 = v217 % v184;
                }
              }
              else
              {
                unint64_t v218 = v217 & (v184 - 1);
              }
              if (v218 != v211) {
                break;
              }
              BOOL v219 = v217 == v182 && *((_DWORD *)v216 + 4) == v183[4];
              if ((v215 & !v219) == 1) {
                break;
              }
              v215 |= v219;
              uint64_t v214 = (uint64_t *)*v216;
              char v213 = (uint64_t **)v216;
            }
            while (*v216);
          }
        }
        unint64_t v220 = *((void *)v183 + 1);
        if (v210.u32[0] <= 1uLL)
        {
          v220 &= v184 - 1;
          int v87 = v181;
          if (!v213) {
            goto LABEL_330;
          }
        }
        else
        {
          int v87 = v181;
          if (v220 >= v184) {
            v220 %= v184;
          }
          if (!v213)
          {
LABEL_330:
            *(void *)unsigned int v183 = *v259;
            *uint64_t v259 = (uint64_t **)v183;
            *(void *)(v212 + 8 * v220) = v259;
            if (*(void *)v183)
            {
              unint64_t v221 = *(void *)(*(void *)v183 + 8);
              if (v210.u32[0] <= 1uLL)
              {
                v221 &= v184 - 1;
              }
              else if (v221 >= v184)
              {
                v221 %= v184;
              }
              goto LABEL_347;
            }
            goto LABEL_348;
          }
        }
        *(void *)unsigned int v183 = *v213;
        *char v213 = (uint64_t *)v183;
        if (*(void *)v183)
        {
          unint64_t v221 = *(void *)(*(void *)v183 + 8);
          if (v210.u32[0] <= 1uLL)
          {
            v221 &= v184 - 1;
          }
          else if (v221 >= v184)
          {
            v221 %= v184;
          }
          if (v221 != v220) {
LABEL_347:
          }
            *(void *)(*(void *)(a1 + 2288) + 8 * v221) = v183;
        }
LABEL_348:
        ++*(void *)(a1 + 2312);
        goto LABEL_349;
      }
      unint64_t v164 = v162[6];
      if (v164 < 8) {
        goto LABEL_349;
      }
      if ((v164 & 7) != 0)
      {
        if ((v162[6] & 7) != 3 || (v164 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_DWORD *)(v164 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_349;
        }
      }
      else
      {
        v164 &= 0xFFFFFFFFFFFFFFF8;
        v162[6] = v164;
      }
      if ((v164 & 7) != 0)
      {
        int v192 = *(uint64_t **)((v164 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        int v192 = (uint64_t *)(v164 & 0xFFFFFFFFFFFFFFF8);
        v162[6] = v192;
      }
      uint64_t v200 = *v192;
      if ((v200 & 4) == 0 && (v200 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        UnderlyingObject = llvm::getUnderlyingObject((llvm *)(v200 & 0xFFFFFFFFFFFFFFF8), (const llvm::Value *)6);
        if (UnderlyingObject)
        {
          *(void *)&long long v280 = UnderlyingObject;
          *((void *)&v280 + 1) = v86;
          sub_1CB90140C((void *)(a1 + 2328), &v280);
        }
      }
LABEL_349:
      if ((*(unsigned char *)(v162[2] + 16) & 0x10) != 0)
      {
        int v284 = (void *)v86;
        uint64_t v285 = 0;
        sub_1CB9019C0(a1 + 696, &v284, &v285, (uint64_t)&v280);
        uint64_t v222 = *(unsigned int *)(v86 + 120);
        if (v222)
        {
          uint64_t v223 = v280;
          uint64_t v224 = *(void **)(v86 + 112);
          uint64_t v225 = 16 * v222;
          while (1)
          {
            unint64_t v226 = *v224 & 0xFFFFFFFFFFFFFFF8;
            if ((*v224 & 6) != 0 || v226 == 0) {
              break;
            }
            uint64_t v228 = *(void *)(v226 + 8);
            if (!v228 || (*(unsigned char *)(*(void *)(v228 + 16) + 16) & 2) == 0) {
              break;
            }
            ++*(_DWORD *)(v223 + 8);
            v224 += 2;
            BOOL v78 = 1;
            v225 -= 16;
            if (!v225) {
              goto LABEL_362;
            }
          }
          *(_DWORD *)(v223 + 8) = -1;
        }
      }
      BOOL v78 = 1;
LABEL_362:
      v86 += 272;
      if (v86 == v267)
      {
        BOOL v73 = *(llvm::ScheduleDAGMILive **)(a1 + 8);
        goto LABEL_367;
      }
    }
  }
  int v87 = 0;
LABEL_367:
  *(_DWORD *)(a1 + 3172) = v87;
  *(_DWORD *)(a1 + 3212) = -1;
  uint64_t v229 = *(void *)(*((void *)v73 + 116) + 24);
  uint64_t v230 = v268[2].i64[0];
  if (v229 == *(void *)(v230 + 320))
  {
    *(_DWORD *)(a1 + 3188) = 0;
    *(unsigned char *)(a1 + 3248) = 0;
    goto LABEL_394;
  }
  if (v229 == *(void *)(v230 + 328))
  {
    *(_DWORD *)(a1 + 3188) = 2;
    *(unsigned char *)(a1 + 3248) = 1;
    goto LABEL_394;
  }
  int v231 = *(_DWORD *)(v80 + 264);
  if (v231)
  {
    uint64_t v232 = *(void *)(v80 + 248);
    unsigned int v233 = v231 - 1;
    uint64_t v234 = (v231 - 1) & ((v229 >> 4) ^ (v229 >> 9));
    uint64_t v235 = *(void *)(v232 + 16 * v234);
    if (v229 == v235)
    {
LABEL_374:
      uint64_t v238 = *(void *)(v232 + 16 * v234 + 8);
      int v239 = 1;
      *(unsigned char *)(a1 + 3248) = 1;
      if (v238)
      {
        uint64_t v240 = *(void **)(v229 + 88);
        if (((*(void *)(v229 + 96) - (void)v240) & 0x7FFFFFFF8) == 8 && *v240 == **(void **)(v238 + 32))
        {
          int v239 = 0;
          *(unsigned char *)(a1 + 3248) = 0;
        }
        else
        {
          int v239 = 1;
        }
      }
      goto LABEL_390;
    }
    int v236 = 1;
    while (v235 != -4096)
    {
      int v237 = v234 + v236++;
      uint64_t v234 = v237 & v233;
      uint64_t v235 = *(void *)(v232 + 16 * v234);
      if (v229 == v235) {
        goto LABEL_374;
      }
    }
  }
  int v239 = 1;
  *(unsigned char *)(a1 + 3248) = 1;
LABEL_390:
  *(_DWORD *)(a1 + 3188) = v239;
  uint64_t v244 = v229 + 88;
  uint64_t v243 = *(void *)(v229 + 88);
  if (((*(void *)(v244 + 8) - v243) & 0x7FFFFFFF8) == 8
    && ((*(void *)(*(void *)v243 + 72) - *(void *)(*(void *)v243 + 64)) & 0x7FFFFFFF8) == 8)
  {
    *(_DWORD *)(a1 + 3188) = 0;
  }
LABEL_394:
  llvm::ScheduleDAGMILive::computeDFSResult(v73);
  if (v287 != v289) {
    free(v287);
  }
}

void sub_1CBA75F64(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if ((*(unsigned char *)(v2 + 580) & 1) == 0) {
    llvm::SUnit::ComputeDepth((llvm::SUnit *)(v2 + 344));
  }
  unsigned int v3 = *(_DWORD *)(v2 + 584);
  uint64_t v4 = a1 + 832;
  do
  {
    uint64_t v5 = *(llvm::SUnit ***)(v4 + 32);
    uint64_t v6 = *(llvm::SUnit ***)(v4 + 40);
    while (v5 != v6)
    {
      uint64_t v7 = *v5;
      if ((*((unsigned char *)*v5 + 236) & 1) == 0) {
        llvm::SUnit::ComputeDepth(*v5);
      }
      if (*((_DWORD *)v7 + 60) > v3)
      {
        unsigned int v3 = *((_DWORD *)v7 + 60);
        if ((*((unsigned char *)v7 + 236) & 1) == 0)
        {
          llvm::SUnit::ComputeDepth(v7);
          unsigned int v3 = *((_DWORD *)v7 + 60);
        }
      }
      ++v5;
    }
    v4 += 56;
  }
  while (v4 != a1 + 1336);
  float v8 = *(float *)(a1 + 3168);
  float v9 = 0.0;
  if (v8 > 0.0) {
    float v9 = (float)(v3 + 10 * *(_DWORD *)(a1 + 3172)) / (float)(v8 * 12.0);
  }
  unsigned int v10 = vcvtps_u32_f32(v9);
  if (v10 <= 1) {
    unsigned int v10 = 1;
  }
  unsigned int v11 = (0x120 / v10) & 0x1F8;
  if (v11 <= 0x18) {
    unsigned int v11 = 24;
  }
  if (v11 >= 0x80) {
    unsigned int v12 = 128;
  }
  else {
    unsigned int v12 = v11;
  }
  unsigned int v13 = *(_DWORD *)(a1 + 3148);
  int32x2_t v14 = vmul_s32((int32x2_t)(v12 | 0x1E00000000), vdup_n_s32(v13));
  *(int32x2_t *)(a1 + 3160) = v14;
  uint64_t v15 = *(void *)(*(void *)(a1 + 8) + 32);
  uint64_t v16 = v15 + 320;
  uint64_t v17 = *(void *)(v15 + 328);
  if (v17 != v16 && *(void *)(v17 + 8) != v16)
  {
    *(_DWORD *)(a1 + 3160) = v14.i32[0] - v13;
    *(_DWORD *)(a1 + 3164) = 29 * v13;
  }
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
}

uint64_t sub_1CBA760CC(uint64_t a1, unsigned char *a2)
{
  uint64_t v3 = 0;
  v756[32] = *MEMORY[0x1E4F143B8];
  while (*(void *)(a1 + v3 + 864) == *(void *)(a1 + v3 + 872))
  {
    v3 += 56;
    if (v3 == 504) {
      return 0;
    }
  }
  *a2 = 0;
  unsigned int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 4912) + 4 * *(unsigned int *)(a1 + 3144));
  float v6 = (float)v5;
  unsigned int v7 = *(_DWORD *)(a1 + 3160);
  *(unsigned char *)(a1 + 3249) = (float)(*(float *)(a1 + 3240) * (float)v7) <= (float)v5;
  if (v5 > v7) {
    unsigned int v7 = v5;
  }
  *(_DWORD *)(a1 + 3160) = v7;
  if (*(unsigned char *)(a1 + 3253))
  {
    if (*(_DWORD *)(a1 + 3148) * *(_DWORD *)(a1 + 3256) < v7) {
      unsigned int v7 = *(_DWORD *)(a1 + 3148) * *(_DWORD *)(a1 + 3256);
    }
    *(_DWORD *)(a1 + 3160) = v7;
  }
  float v8 = *(void **)(a1 + 2136);
  unsigned int v717 = v5;
  v715 = (llvm::SmallPtrSetImplBase *)(a1 + 2128);
  if (v8 != *(void **)(a1 + 2128))
  {
    uint64_t v240 = *(unsigned int *)(a1 + 2144);
    if (v240 >= 0x21 && 4 * (*(_DWORD *)(a1 + 2148) - *(_DWORD *)(a1 + 2152)) < v240)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(a1 + 2128));
      goto LABEL_13;
    }
    memset(v8, 255, 8 * v240);
  }
  *(void *)(a1 + 2148) = 0;
LABEL_13:
  BOOL v26 = *(_DWORD *)(a1 + 3176) == 0;
  int v732 = v736;
  v733 = v736;
  if (v26) {
    int v9 = 512;
  }
  else {
    int v9 = 32;
  }
  unsigned int v707 = v9;
  uint64_t v734 = 32;
  int v735 = 0;
  unsigned int v10 = v756;
  int v752 = v756;
  int v753 = v756;
  uint64_t v754 = 32;
  int v755 = 0;
  v722 = (llvm::SUnit *)v727;
  uint64_t v723 = (llvm::SUnit *)v727;
  unint64_t v724 = 32;
  int v725 = 0;
  unsigned int v11 = *(uint64_t **)(a1 + 920);
  unsigned int v12 = *(uint64_t **)(a1 + 928);
  if (v11 != v12)
  {
    unsigned int v13 = 0;
    unsigned int v14 = 32;
    uint64_t v15 = v756;
    while (1)
    {
      uint64_t v16 = *v11;
      if (v15 != v10) {
        break;
      }
      if (v13)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 8 * v13;
        unsigned int v19 = v10;
        while (*v19 != v16)
        {
          if (*v19 == -2) {
            uint64_t v17 = v19;
          }
          ++v19;
          v18 -= 8;
          if (!v18)
          {
            if (!v17) {
              goto LABEL_26;
            }
            void *v17 = v16;
            --v755;
            goto LABEL_49;
          }
        }
        goto LABEL_49;
      }
LABEL_26:
      if (v14 <= v13) {
        break;
      }
      HIDWORD(v754) = v13 + 1;
      v10[v13] = v16;
LABEL_49:
      uint64_t v15 = v753;
      unsigned int v10 = v752;
      unsigned int v13 = HIDWORD(v754);
      unsigned int v14 = v754;
      if (++v11 == v12) {
        goto LABEL_57;
      }
    }
    if (3 * v14 <= 4 * (v13 - v755))
    {
      if (v14 >= 0x40) {
        v14 *= 2;
      }
      else {
        unsigned int v14 = 128;
      }
    }
    else if (v14 - v13 >= v14 >> 3)
    {
      goto LABEL_30;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v752, v14);
    unsigned int v14 = v754;
    uint64_t v15 = v753;
LABEL_30:
    unsigned int v20 = v14 - 1;
    unsigned int v21 = (v14 - 1) & ((v16 >> 4) ^ (v16 >> 9));
    unsigned int v22 = &v15[v21];
    uint64_t v23 = *v22;
    if (*v22 == -1)
    {
      size_t v24 = 0;
LABEL_42:
      if (v24) {
        uint64_t v28 = v24;
      }
      else {
        uint64_t v28 = v22;
      }
      if (*v28 != v16)
      {
        if (*v28 == -2) {
          --v755;
        }
        else {
          ++HIDWORD(v754);
        }
        *uint64_t v28 = v16;
      }
    }
    else
    {
      size_t v24 = 0;
      int v25 = 1;
      while (v23 != v16)
      {
        if (v24) {
          BOOL v26 = 0;
        }
        else {
          BOOL v26 = v23 == -2;
        }
        if (v26) {
          size_t v24 = v22;
        }
        unsigned int v27 = v21 + v25++;
        unsigned int v21 = v27 & v20;
        unsigned int v22 = &v15[v27 & v20];
        uint64_t v23 = *v22;
        if (*v22 == -1) {
          goto LABEL_42;
        }
      }
    }
    goto LABEL_49;
  }
LABEL_57:
  uint64_t v29 = *(uint64_t **)(a1 + 976);
  *(void *)v713 = a1;
  uint64_t v30 = *(uint64_t **)(a1 + 984);
  if (v29 != v30)
  {
    unsigned int v708 = 0;
    while (1)
    {
      uint64_t v31 = *v29;
      uint64_t v32 = v733;
      uint64_t v33 = HIDWORD(v734);
      if (v733 == v732)
      {
        if (HIDWORD(v734))
        {
          unsigned int v34 = 0;
          uint64_t v35 = 8 * HIDWORD(v734);
          unsigned int v36 = v733;
          while (*v36 != v31)
          {
            if (*v36 == -2) {
              unsigned int v34 = v36;
            }
            ++v36;
            v35 -= 8;
            if (!v35)
            {
              if (!v34) {
                goto LABEL_67;
              }
              *unsigned int v34 = v31;
              --v735;
              goto LABEL_91;
            }
          }
          goto LABEL_95;
        }
LABEL_67:
        unsigned int v37 = v734;
        if (HIDWORD(v734) < v734)
        {
          ++HIDWORD(v734);
          *(void *)&v733[8 * v33] = v31;
          goto LABEL_91;
        }
      }
      else
      {
        unsigned int v37 = v734;
      }
      if (3 * v37 <= 4 * (HIDWORD(v734) - v735)) {
        break;
      }
      if (v37 - HIDWORD(v734) < v37 >> 3) {
        goto LABEL_104;
      }
LABEL_72:
      unsigned int v38 = v37 - 1;
      unsigned int v39 = (v37 - 1) & ((v31 >> 4) ^ (v31 >> 9));
      uint64_t v40 = &v32[8 * v39];
      uint64_t v41 = *(void *)v40;
      if (*(void *)v40 != -1)
      {
        uint64_t v42 = 0;
        int v43 = 1;
        while (v41 != v31)
        {
          if (v42) {
            BOOL v44 = 0;
          }
          else {
            BOOL v44 = v41 == -2;
          }
          if (v44) {
            uint64_t v42 = v40;
          }
          unsigned int v45 = v39 + v43++;
          unsigned int v39 = v45 & v38;
          uint64_t v40 = &v32[8 * (v45 & v38)];
          uint64_t v41 = *(void *)v40;
          if (*(void *)v40 == -1) {
            goto LABEL_84;
          }
        }
        goto LABEL_95;
      }
      uint64_t v42 = 0;
LABEL_84:
      if (v42) {
        uint64_t v46 = v42;
      }
      else {
        uint64_t v46 = v40;
      }
      if (*(void *)v46 == v31) {
        goto LABEL_95;
      }
      if (*(void *)v46 == -2) {
        --v735;
      }
      else {
        ++HIDWORD(v734);
      }
      *(void *)uint64_t v46 = v31;
LABEL_91:
      uint64_t v47 = *(void *)(v31 + 24);
      if (!v47)
      {
        uint64_t v48 = *(void *)(*(void *)v713 + 8);
        uint64_t v47 = *(void *)(v48 + 672) + 24 * *(unsigned __int16 *)(*(void *)(*(void *)(v31 + 8) + 16) + 6);
        if ((*(_WORD *)(v47 + 8) & 0x1FFF) == 0x1FFE)
        {
          do
          {
            unsigned int v49 = (*(uint64_t (**)(void))(**(void **)(v48 + 808) + 200))(*(void *)(v48 + 808));
            uint64_t v50 = *(void *)(v48 + 672);
          }
          while ((*(_WORD *)(v50 + 24 * v49 + 8) & 0x1FFF) == 0x1FFE);
          uint64_t v47 = v50 + 24 * v49;
        }
        *(void *)(v31 + 24) = v47;
      }
      v708 += *(_WORD *)(v47 + 8) & 0x1FFF;
LABEL_95:
      if (++v29 == v30) {
        goto LABEL_106;
      }
    }
    if (v37 >= 0x40) {
      v37 *= 2;
    }
    else {
      unsigned int v37 = 128;
    }
LABEL_104:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v732, v37);
    unsigned int v37 = v734;
    uint64_t v32 = v733;
    goto LABEL_72;
  }
  unsigned int v708 = 0;
LABEL_106:
  unint64_t v51 = *(uint64_t **)(*(void *)v713 + 864);
  unint64_t v52 = *(uint64_t **)(*(void *)v713 + 872);
  if (v51 == v52)
  {
    int v54 = 0x7FFFFFFF;
    int v720 = -1;
    int v53 = -1;
    goto LABEL_229;
  }
  int v53 = -1;
  int v54 = 0x7FFFFFFF;
  int v720 = -1;
  do
  {
    uint64_t v55 = *v51;
    uint64_t v56 = *(void *)(*v51 + 8);
    int v57 = *(unsigned __int16 **)(v56 + 16);
    int v58 = *v57;
    BOOL v60 = (v58 - 9) <= 0x3C && ((1 << (v58 - 9)) & 0x1000000000000605) != 0
       || v58 == 0;
    if (!v60 && (v57[4] & 0x10) == 0 && (v57[8] & 1) == 0 || (sub_1CBA7D8B4(v56) & 1) != 0) {
      goto LABEL_218;
    }
    uint64_t v61 = v733;
    uint64_t v62 = HIDWORD(v734);
    if (v733 == v732)
    {
      if (HIDWORD(v734))
      {
        unint64_t v63 = 0;
        uint64_t v64 = 8 * HIDWORD(v734);
        uint64_t v65 = v733;
        while (*v65 != v55)
        {
          if (*v65 == -2) {
            unint64_t v63 = v65;
          }
          ++v65;
          v64 -= 8;
          if (!v64)
          {
            if (!v63) {
              goto LABEL_126;
            }
            void *v63 = v55;
            --v735;
            goto LABEL_150;
          }
        }
        goto LABEL_154;
      }
LABEL_126:
      unsigned int v66 = v734;
      if (HIDWORD(v734) < v734)
      {
        ++HIDWORD(v734);
        *(void *)&v733[8 * v62] = v55;
LABEL_150:
        uint64_t v76 = *(void *)(v55 + 24);
        if (!v76)
        {
          BOOL v77 = v52;
          uint64_t v78 = *(void *)(*(void *)v713 + 8);
          uint64_t v76 = *(void *)(v78 + 672) + 24 * *(unsigned __int16 *)(*(void *)(*(void *)(v55 + 8) + 16) + 6);
          if ((*(_WORD *)(v76 + 8) & 0x1FFF) == 0x1FFE)
          {
            do
            {
              unsigned int v105 = (*(uint64_t (**)(void))(**(void **)(v78 + 808) + 200))(*(void *)(v78 + 808));
              uint64_t v106 = *(void *)(v78 + 672);
            }
            while ((*(_WORD *)(v106 + 24 * v105 + 8) & 0x1FFF) == 0x1FFE);
            uint64_t v76 = v106 + 24 * v105;
          }
          *(void *)(v55 + 24) = v76;
          unint64_t v52 = v77;
        }
        v708 += *(_WORD *)(v76 + 8) & 0x1FFF;
        goto LABEL_154;
      }
    }
    else
    {
      unsigned int v66 = v734;
    }
    if (3 * v66 <= 4 * (HIDWORD(v734) - v735))
    {
      if (v66 >= 0x40) {
        v66 *= 2;
      }
      else {
        unsigned int v66 = 128;
      }
    }
    else if (v66 - HIDWORD(v734) >= v66 >> 3)
    {
      goto LABEL_131;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v732, v66);
    unsigned int v66 = v734;
    uint64_t v61 = v733;
LABEL_131:
    unsigned int v67 = v66 - 1;
    unsigned int v68 = (v66 - 1) & ((v55 >> 4) ^ (v55 >> 9));
    uint64_t v69 = &v61[8 * v68];
    uint64_t v70 = *(void *)v69;
    if (*(void *)v69 != -1)
    {
      int v71 = 0;
      int v72 = 1;
      while (v70 != v55)
      {
        if (v71) {
          BOOL v73 = 0;
        }
        else {
          BOOL v73 = v70 == -2;
        }
        if (v73) {
          int v71 = v69;
        }
        unsigned int v74 = v68 + v72++;
        unsigned int v68 = v74 & v67;
        uint64_t v69 = &v61[8 * (v74 & v67)];
        uint64_t v70 = *(void *)v69;
        if (*(void *)v69 == -1) {
          goto LABEL_143;
        }
      }
      goto LABEL_154;
    }
    int v71 = 0;
LABEL_143:
    if (v71) {
      int v75 = v71;
    }
    else {
      int v75 = v69;
    }
    if (*(void *)v75 != v55)
    {
      if (*(void *)v75 == -2) {
        --v735;
      }
      else {
        ++HIDWORD(v734);
      }
      *(void *)int v75 = v55;
      goto LABEL_150;
    }
LABEL_154:
    char v79 = *(unsigned char *)(v55 + 236);
    if ((v79 & 1) == 0)
    {
      llvm::SUnit::ComputeDepth((llvm::SUnit *)v55);
      char v79 = *(unsigned char *)(v55 + 236);
    }
    int v80 = *(_DWORD *)(v55 + 240) + *(unsigned __int16 *)(v55 + 226);
    int v81 = v720;
    if (v720 <= v80) {
      int v81 = *(_DWORD *)(v55 + 240) + *(unsigned __int16 *)(v55 + 226);
    }
    int v720 = v81;
    if ((v79 & 1) == 0)
    {
      llvm::SUnit::ComputeDepth((llvm::SUnit *)v55);
      int v80 = *(_DWORD *)(v55 + 240) + *(unsigned __int16 *)(v55 + 226);
    }
    if (v54 >= v80) {
      int v54 = v80;
    }
    if (v708 >= v707) {
      goto LABEL_526;
    }
    uint64_t v82 = *(unsigned int *)(v55 + 40);
    if (v82)
    {
      BOOL v83 = *(void **)(v55 + 32);
      uint64_t v84 = &v83[2 * v82];
      do
      {
        unint64_t v85 = *v83 & 0xFFFFFFFFFFFFFFF8;
        if ((*(unsigned char *)(v85 + 236) & 1) == 0) {
          llvm::SUnit::ComputeDepth((llvm::SUnit *)(*v83 & 0xFFFFFFFFFFFFFFF8));
        }
        uint64_t v86 = *(unsigned __int16 **)(*(void *)(v85 + 8) + 16);
        int v87 = *v86;
        BOOL v89 = (v87 - 9) <= 0x3C && ((1 << (v87 - 9)) & 0x1000000000000605) != 0
           || v87 == 0;
        if (v89 || (v86[4] & 0x10) != 0 || (v86[8] & 1) != 0)
        {
          uint64_t v90 = v723;
          uint64_t v91 = HIDWORD(v724);
          if (v723 != v722)
          {
            unsigned int v95 = v724;
LABEL_189:
            if (3 * v95 <= 4 * (HIDWORD(v724) - v725))
            {
              if (v95 >= 0x40) {
                v95 *= 2;
              }
              else {
                unsigned int v95 = 128;
              }
            }
            else if (v95 - HIDWORD(v724) >= v95 >> 3)
            {
              goto LABEL_191;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v722, v95);
            unsigned int v95 = v724;
            uint64_t v90 = v723;
LABEL_191:
            unsigned int v96 = v95 - 1;
            unsigned int v97 = (v95 - 1) & ((v85 >> 4) ^ (v85 >> 9));
            unsigned int v98 = (unint64_t *)((char *)v90 + 8 * v97);
            unint64_t v99 = *v98;
            if (*v98 == -1)
            {
              uint64_t v100 = 0;
LABEL_203:
              if (v100) {
                uint64_t v104 = v100;
              }
              else {
                uint64_t v104 = v98;
              }
              if (*v104 != v85)
              {
                if (*v104 == -2) {
                  --v725;
                }
                else {
                  ++HIDWORD(v724);
                }
                *uint64_t v104 = v85;
              }
            }
            else
            {
              uint64_t v100 = 0;
              int v101 = 1;
              while (v99 != v85)
              {
                if (v100) {
                  BOOL v102 = 0;
                }
                else {
                  BOOL v102 = v99 == -2;
                }
                if (v102) {
                  uint64_t v100 = v98;
                }
                unsigned int v103 = v97 + v101++;
                unsigned int v97 = v103 & v96;
                unsigned int v98 = (unint64_t *)((char *)v90 + 8 * (v103 & v96));
                unint64_t v99 = *v98;
                if (*v98 == -1) {
                  goto LABEL_203;
                }
              }
            }
            goto LABEL_210;
          }
          if (HIDWORD(v724))
          {
            uint64_t v92 = 0;
            uint64_t v93 = 8 * HIDWORD(v724);
            BOOL v94 = v723;
            while (*(void *)v94 != v85)
            {
              if (*(void *)v94 == -2) {
                uint64_t v92 = v94;
              }
              BOOL v94 = (llvm::SUnit *)((char *)v94 + 8);
              v93 -= 8;
              if (!v93)
              {
                if (!v92) {
                  goto LABEL_186;
                }
                *uint64_t v92 = v85;
                --v725;
                goto LABEL_210;
              }
            }
            goto LABEL_210;
          }
LABEL_186:
          unsigned int v95 = v724;
          if (HIDWORD(v724) >= v724) {
            goto LABEL_189;
          }
          ++HIDWORD(v724);
          *((void *)v723 + v91) = v85;
        }
        else if (v53 <= *(_DWORD *)(v85 + 240) + *(unsigned __int16 *)(v85 + 226))
        {
          int v53 = *(_DWORD *)(v85 + 240) + *(unsigned __int16 *)(v85 + 226);
        }
LABEL_210:
        v83 += 2;
      }
      while (v83 != v84);
    }
LABEL_218:
    ++v51;
  }
  while (v51 != v52);
  do
  {
LABEL_229:
    v743 = &v745;
    uint64_t v744 = 0x1000000000;
    v740 = v742;
    uint64_t v741 = 0x1000000000;
    if (v723 == v722) {
      int v107 = (unint64_t *)((char *)&v724 + 4);
    }
    else {
      int v107 = &v724;
    }
    uint64_t v108 = *(unsigned int *)v107;
    if (v108)
    {
      uint64_t v109 = 8 * v108;
      int v110 = v723;
      while (*(void *)v110 >= 0xFFFFFFFFFFFFFFFELL)
      {
        int v110 = (llvm::SUnit *)((char *)v110 + 8);
        v109 -= 8;
        if (!v109) {
          goto LABEL_438;
        }
      }
    }
    else
    {
      int v110 = v723;
    }
    uint64_t v111 = (llvm::SUnit *)((char *)v723 + 8 * v108);
    if (v110 == v111)
    {
LABEL_438:
      char v112 = 0;
LABEL_473:
      if (!v741)
      {
LABEL_515:
        int v229 = 0;
        goto LABEL_516;
      }
      unint64_t v211 = (uint64_t *)v740;
      uint64_t v212 = (char *)v740 + 8 * v741;
      char v213 = v723;
      while (1)
      {
        uint64_t v214 = *v211;
        uint64_t v215 = HIDWORD(v724);
        if (v213 != v722) {
          break;
        }
        if (HIDWORD(v724))
        {
          unint64_t v216 = 0;
          uint64_t v217 = 8 * HIDWORD(v724);
          unint64_t v218 = v213;
          while (*(void *)v218 != v214)
          {
            if (*(void *)v218 == -2) {
              unint64_t v216 = v218;
            }
            unint64_t v218 = (llvm::SUnit *)((char *)v218 + 8);
            v217 -= 8;
            if (!v217)
            {
              if (!v216) {
                goto LABEL_483;
              }
              *(void *)unint64_t v216 = v214;
              --v725;
              goto LABEL_507;
            }
          }
          goto LABEL_507;
        }
LABEL_483:
        unsigned int v219 = v724;
        if (HIDWORD(v724) >= v724) {
          goto LABEL_486;
        }
        ++HIDWORD(v724);
        *((void *)v213 + v215) = v214;
LABEL_507:
        char v213 = v723;
        if (++v211 == (uint64_t *)v212) {
          goto LABEL_515;
        }
      }
      unsigned int v219 = v724;
LABEL_486:
      if (3 * v219 <= 4 * (HIDWORD(v724) - v725))
      {
        if (v219 >= 0x40) {
          v219 *= 2;
        }
        else {
          unsigned int v219 = 128;
        }
      }
      else if (v219 - HIDWORD(v724) >= v219 >> 3)
      {
        goto LABEL_488;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v722, v219);
      unsigned int v219 = v724;
      char v213 = v723;
LABEL_488:
      unsigned int v220 = v219 - 1;
      unsigned int v221 = (v219 - 1) & ((v214 >> 4) ^ (v214 >> 9));
      uint64_t v222 = (void *)((char *)v213 + 8 * v221);
      uint64_t v223 = *v222;
      if (*v222 == -1)
      {
        uint64_t v224 = 0;
LABEL_500:
        if (v224) {
          uint64_t v228 = v224;
        }
        else {
          uint64_t v228 = v222;
        }
        if (*v228 != v214)
        {
          if (*v228 == -2) {
            --v725;
          }
          else {
            ++HIDWORD(v724);
          }
          *uint64_t v228 = v214;
        }
      }
      else
      {
        uint64_t v224 = 0;
        int v225 = 1;
        while (v223 != v214)
        {
          if (v224) {
            BOOL v226 = 0;
          }
          else {
            BOOL v226 = v223 == -2;
          }
          if (v226) {
            uint64_t v224 = v222;
          }
          unsigned int v227 = v221 + v225++;
          unsigned int v221 = v227 & v220;
          uint64_t v222 = (void *)((char *)v213 + 8 * (v227 & v220));
          uint64_t v223 = *v222;
          if (*v222 == -1) {
            goto LABEL_500;
          }
        }
      }
      goto LABEL_507;
    }
    char v112 = 0;
    unint64_t v113 = *(void *)v110;
    while (1)
    {
      uint64_t v114 = *(void *)(v113 + 8);
      if (sub_1CBA7D8B4(v114)) {
        goto LABEL_383;
      }
      uint64_t v115 = *(void *)(*(void *)v713 + 64);
      unsigned int v116 = *(unsigned __int16 **)(v114 + 16);
      unsigned int v117 = *v116;
      if (v117 > 0x865)
      {
        if (v117 == 4578 || v117 == 4580)
        {
LABEL_390:
          uint64_t v122 = v753;
          uint64_t v123 = HIDWORD(v754);
          if (v753 != v752) {
            goto LABEL_399;
          }
          if (HIDWORD(v754))
          {
            unsigned int v124 = 0;
            uint64_t v183 = 8 * HIDWORD(v754);
            unint64_t v184 = (unint64_t *)v753;
            while (*v184 != v113)
            {
              if (*v184 == -2) {
                unsigned int v124 = v184;
              }
              ++v184;
              v183 -= 8;
              if (!v183)
              {
                if (!v124) {
                  goto LABEL_398;
                }
LABEL_420:
                *unsigned int v124 = v113;
                --v755;
                goto LABEL_383;
              }
            }
            goto LABEL_383;
          }
LABEL_398:
          if (HIDWORD(v754) >= v754)
          {
LABEL_399:
            unsigned int v185 = v754;
            if (3 * (int)v754 <= (4 * (HIDWORD(v754) - v755)))
            {
              if (v754 >= 0x40) {
                unsigned int v185 = 2 * v754;
              }
              else {
                unsigned int v185 = 128;
              }
            }
            else if ((int)v754 - HIDWORD(v754) >= v754 >> 3)
            {
              goto LABEL_401;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v752, v185);
            unsigned int v185 = v754;
            uint64_t v122 = v753;
LABEL_401:
            unsigned int v186 = v185 - 1;
            unsigned int v187 = (v185 - 1) & ((v113 >> 4) ^ (v113 >> 9));
            unint64_t v163 = &v122[v187];
            unint64_t v188 = *v163;
            if (*v163 != -1)
            {
              uint64_t v165 = 0;
              int v189 = 1;
              while (v188 != v113)
              {
                if (v165) {
                  BOOL v190 = 0;
                }
                else {
                  BOOL v190 = v188 == -2;
                }
                if (v190) {
                  uint64_t v165 = v163;
                }
                unsigned int v191 = v187 + v189++;
                unsigned int v187 = v191 & v186;
                unint64_t v163 = &v122[v191 & v186];
                unint64_t v188 = *v163;
                if (*v163 == -1) {
                  goto LABEL_413;
                }
              }
              goto LABEL_383;
            }
LABEL_412:
            uint64_t v165 = 0;
LABEL_413:
            if (v165) {
              int v192 = v165;
            }
            else {
              int v192 = v163;
            }
            if (*v192 != v113)
            {
              if (*v192 == -2) {
                --v755;
              }
              else {
                ++HIDWORD(v754);
              }
              unint64_t *v192 = v113;
            }
            goto LABEL_383;
          }
LABEL_270:
          HIDWORD(v754) = v123 + 1;
          v122[v123] = v113;
          goto LABEL_383;
        }
        if (v117 == 2150) {
          goto LABEL_244;
        }
      }
      else
      {
        if (v117 != 1100)
        {
          if (v117 != 2114) {
            goto LABEL_251;
          }
LABEL_244:
          if (*(unsigned char *)(v115 + 338)) {
            goto LABEL_390;
          }
          goto LABEL_251;
        }
        if (*(unsigned char *)(v115 + 338) && *(unsigned char *)(*(void *)(v114 + 32) + 64) == 7) {
          goto LABEL_390;
        }
      }
LABEL_251:
      uint64_t v119 = *((void *)v116 + 2);
      if ((v119 & 0xD00) != 0x900 && (v119 & 0xE00) != 0xA00) {
        break;
      }
      BOOL v120 = v117 - 9 > 0x3C || ((1 << (v117 - 9)) & 0x1000000000000605) == 0;
      BOOL v121 = !v120 || v117 == 0;
      if (!v121 && !(*((void *)v116 + 1) & 0x10 | v119 & 1)) {
        break;
      }
      uint64_t v122 = v753;
      uint64_t v123 = HIDWORD(v754);
      if (v753 == v752)
      {
        if (HIDWORD(v754))
        {
          unsigned int v124 = 0;
          uint64_t v125 = 8 * HIDWORD(v754);
          uint64_t v126 = (unint64_t *)v753;
          while (*v126 != v113)
          {
            if (*v126 == -2) {
              unsigned int v124 = v126;
            }
            ++v126;
            v125 -= 8;
            if (!v125)
            {
              if (v124) {
                goto LABEL_420;
              }
              goto LABEL_269;
            }
          }
          goto LABEL_383;
        }
LABEL_269:
        if (HIDWORD(v754) < v754) {
          goto LABEL_270;
        }
      }
      unsigned int v160 = v754;
      if (3 * (int)v754 <= (4 * (HIDWORD(v754) - v755)))
      {
        if (v754 >= 0x40) {
          unsigned int v160 = 2 * v754;
        }
        else {
          unsigned int v160 = 128;
        }
LABEL_432:
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v752, v160);
        unsigned int v160 = v754;
        uint64_t v122 = v753;
        goto LABEL_337;
      }
      if ((int)v754 - HIDWORD(v754) < v754 >> 3) {
        goto LABEL_432;
      }
LABEL_337:
      unsigned int v161 = v160 - 1;
      unsigned int v162 = (v160 - 1) & ((v113 >> 4) ^ (v113 >> 9));
      unint64_t v163 = &v122[v162];
      unint64_t v164 = *v163;
      if (*v163 == -1) {
        goto LABEL_412;
      }
      uint64_t v165 = 0;
      int v166 = 1;
      while (v164 != v113)
      {
        if (v165) {
          BOOL v167 = 0;
        }
        else {
          BOOL v167 = v164 == -2;
        }
        if (v167) {
          uint64_t v165 = v163;
        }
        unsigned int v168 = v162 + v166++;
        unsigned int v162 = v168 & v161;
        unint64_t v163 = &v122[v168 & v161];
        unint64_t v164 = *v163;
        if (*v163 == -1) {
          goto LABEL_413;
        }
      }
LABEL_383:
      int v181 = (unint64_t *)((char *)v110 + 8);
      do
      {
        if (v181 == (unint64_t *)v111)
        {
          if (v744)
          {
            uint64_t v195 = (char *)v743;
            uint64_t v196 = (char *)v743 + 8 * v744;
            int v197 = v725;
            do
            {
              uint64_t v198 = *(void *)v195;
              uint64_t v199 = v722;
              if (v723 == v722)
              {
                unsigned int v200 = HIDWORD(v724);
                uint64_t v201 = (llvm::SUnit *)((char *)v723 + 8 * HIDWORD(v724));
                if (HIDWORD(v724))
                {
                  uint64_t v202 = 0;
                  while (*(void *)((char *)v723 + v202) != v198)
                  {
                    v202 += 8;
                    if (8 * HIDWORD(v724) == v202) {
                      goto LABEL_460;
                    }
                  }
                  uint64_t v201 = (llvm::SUnit *)((char *)v723 + v202);
                }
LABEL_460:
                uint64_t v199 = v723;
              }
              else
              {
                int v203 = v724 - 1;
                unsigned int v204 = (v724 - 1) & ((v198 >> 4) ^ (v198 >> 9));
                uint64_t v201 = (llvm::SUnit *)((char *)v723 + 8 * v204);
                uint64_t v205 = *(void *)v201;
                if (*(void *)v201 == -1)
                {
                  uint64_t v206 = 0;
LABEL_468:
                  if (v206) {
                    uint64_t v201 = v206;
                  }
                  unsigned int v200 = HIDWORD(v724);
                  if (*(void *)v201 != v198) {
                    uint64_t v201 = (llvm::SUnit *)((char *)v723 + 8 * v724);
                  }
                }
                else
                {
                  uint64_t v206 = 0;
                  int v207 = 1;
                  while (v205 != v198)
                  {
                    if (v206) {
                      BOOL v208 = 0;
                    }
                    else {
                      BOOL v208 = v205 == -2;
                    }
                    if (v208) {
                      uint64_t v206 = v201;
                    }
                    unsigned int v209 = v204 + v207++;
                    unsigned int v204 = v209 & v203;
                    uint64_t v201 = (llvm::SUnit *)((char *)v723 + 8 * (v209 & v203));
                    uint64_t v205 = *(void *)v201;
                    if (*(void *)v201 == -1) {
                      goto LABEL_468;
                    }
                  }
                  unsigned int v200 = HIDWORD(v724);
                }
              }
              unsigned int v210 = v724;
              if (v723 == v199) {
                unsigned int v210 = v200;
              }
              if (v201 != (llvm::SUnit *)((char *)v723 + 8 * v210))
              {
                *(void *)uint64_t v201 = -2;
                int v725 = ++v197;
              }
              v195 += 8;
            }
            while (v195 != v196);
          }
          goto LABEL_473;
        }
        unint64_t v182 = *v181++;
        unint64_t v113 = v182;
      }
      while (v182 > 0xFFFFFFFFFFFFFFFDLL);
      int v110 = (llvm::SUnit *)(v181 - 1);
    }
    uint64_t v127 = *(unsigned int *)(v113 + 120);
    unsigned int v128 = v733;
    uint64_t v129 = HIDWORD(v734);
    if (v127)
    {
      uint64_t v130 = *(void **)(v113 + 112);
      unint64_t v131 = &v130[2 * v127];
      int v132 = v734 - 1;
      do
      {
        unint64_t v133 = *v130 & 0xFFFFFFFFFFFFFFF8;
        if ((*v130 & 6) == 0 && (*(_WORD *)(v133 + 228) & 0x400) == 0)
        {
          if (v733 == v732)
          {
            if (HIDWORD(v734))
            {
              uint64_t v135 = 0;
              while (*(void *)&v733[v135] != v133)
              {
                v135 += 8;
                if (8 * HIDWORD(v734) == v135)
                {
                  int v136 = HIDWORD(v734);
                  goto LABEL_298;
                }
              }
              uint64_t v145 = &v733[v135];
              int v136 = HIDWORD(v734);
              int v146 = v733;
            }
            else
            {
              int v136 = 0;
LABEL_298:
              int v146 = v733;
              uint64_t v145 = &v733[8 * HIDWORD(v734)];
            }
          }
          else
          {
            unsigned int v137 = v132 & ((v133 >> 4) ^ (v133 >> 9));
            unsigned int v138 = &v733[8 * v137];
            unint64_t v139 = *(void *)v138;
            if (*(void *)v138 == -1)
            {
              int v140 = 0;
LABEL_300:
              if (v140) {
                unsigned int v138 = v140;
              }
              unint64_t v144 = *(void *)v138;
            }
            else
            {
              int v140 = 0;
              int v141 = 1;
              while (v139 != v133)
              {
                if (v140) {
                  BOOL v142 = 0;
                }
                else {
                  BOOL v142 = v139 == -2;
                }
                if (v142) {
                  int v140 = v138;
                }
                unsigned int v143 = v137 + v141++;
                unsigned int v137 = v143 & v132;
                unsigned int v138 = &v733[8 * (v143 & v132)];
                unint64_t v139 = *(void *)v138;
                if (*(void *)v138 == -1) {
                  goto LABEL_300;
                }
              }
              unint64_t v144 = *v130 & 0xFFFFFFFFFFFFFFF8;
            }
            uint64_t v145 = v144 == v133 ? v138 : &v733[8 * v734];
            int v136 = HIDWORD(v734);
            int v146 = v732;
          }
          if (v733 != v146) {
            int v136 = v734;
          }
          if (v145 == &v733[8 * v136]) {
            goto LABEL_383;
          }
        }
        v130 += 2;
      }
      while (v130 != v131);
    }
    if (v733 == v732)
    {
      unsigned int v147 = v708;
      if (HIDWORD(v734))
      {
        uint64_t v148 = 0;
        uint64_t v149 = 8 * HIDWORD(v734);
        uint64_t v150 = (unint64_t *)v733;
        while (*v150 != v113)
        {
          if (*v150 == -2) {
            uint64_t v148 = v150;
          }
          ++v150;
          v149 -= 8;
          if (!v149)
          {
            if (!v148) {
              goto LABEL_319;
            }
            *uint64_t v148 = v113;
            --v735;
            goto LABEL_356;
          }
        }
        goto LABEL_360;
      }
LABEL_319:
      unsigned int v151 = v734;
      if (HIDWORD(v734) < v734)
      {
        ++HIDWORD(v734);
        *(void *)&v733[8 * v129] = v113;
LABEL_356:
        uint64_t v170 = *(void *)(v113 + 24);
        if (!v170)
        {
          uint64_t v171 = *(void *)(*(void *)v713 + 8);
          uint64_t v170 = *(void *)(v171 + 672) + 24 * *(unsigned __int16 *)(*(void *)(*(void *)(v113 + 8) + 16) + 6);
          if ((*(_WORD *)(v170 + 8) & 0x1FFF) == 0x1FFE)
          {
            do
            {
              unsigned int v193 = (*(uint64_t (**)(void))(**(void **)(v171 + 808) + 200))(*(void *)(v171 + 808));
              uint64_t v194 = *(void *)(v171 + 672);
            }
            while ((*(_WORD *)(v194 + 24 * v193 + 8) & 0x1FFF) == 0x1FFE);
            uint64_t v170 = v194 + 24 * v193;
          }
          *(void *)(v113 + 24) = v170;
        }
        v147 += *(_WORD *)(v170 + 8) & 0x1FFF;
        goto LABEL_360;
      }
    }
    else
    {
      unsigned int v151 = v734;
      unsigned int v147 = v708;
    }
    if (3 * v151 <= 4 * (HIDWORD(v734) - v735))
    {
      if (v151 >= 0x40) {
        v151 *= 2;
      }
      else {
        unsigned int v151 = 128;
      }
    }
    else if (v151 - HIDWORD(v734) >= v151 >> 3)
    {
      goto LABEL_324;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v732, v151);
    unsigned int v151 = v734;
    unsigned int v128 = v733;
LABEL_324:
    unsigned int v152 = v151 - 1;
    unsigned int v153 = (v151 - 1) & ((v113 >> 4) ^ (v113 >> 9));
    uint64_t v154 = &v128[8 * v153];
    uint64_t v155 = *(void *)v154;
    if (*(void *)v154 != -1)
    {
      uint64_t v156 = 0;
      int v157 = 1;
      while (v155 != v113)
      {
        if (v156) {
          BOOL v158 = 0;
        }
        else {
          BOOL v158 = v155 == -2;
        }
        if (v158) {
          uint64_t v156 = (unint64_t *)v154;
        }
        unsigned int v159 = v153 + v157++;
        unsigned int v153 = v159 & v152;
        uint64_t v154 = &v128[8 * (v159 & v152)];
        uint64_t v155 = *(void *)v154;
        if (*(void *)v154 == -1) {
          goto LABEL_349;
        }
      }
      goto LABEL_360;
    }
    uint64_t v156 = 0;
LABEL_349:
    if (v156) {
      uint64_t v169 = v156;
    }
    else {
      uint64_t v169 = (unint64_t *)v154;
    }
    if (*v169 != v113)
    {
      if (*v169 == -2) {
        --v735;
      }
      else {
        ++HIDWORD(v734);
      }
      *uint64_t v169 = v113;
      goto LABEL_356;
    }
LABEL_360:
    if (v744 >= (unint64_t)HIDWORD(v744)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v708 = v147;
    *((void *)v743 + v744) = v113;
    LODWORD(v744) = v744 + 1;
    uint64_t v172 = *(unsigned int *)(v113 + 40);
    if (v172)
    {
      uint64_t v173 = *(void **)(v113 + 32);
      uint64_t v174 = 16 * v172;
      do
      {
        unint64_t v175 = *v173 & 0xFFFFFFFFFFFFFFF8;
        if ((*(unsigned char *)(v175 + 236) & 1) == 0) {
          llvm::SUnit::ComputeDepth((llvm::SUnit *)(*v173 & 0xFFFFFFFFFFFFFFF8));
        }
        int v176 = *(_DWORD *)(v175 + 240) + *(unsigned __int16 *)(v175 + 226);
        BOOL v177 = *(unsigned __int16 **)(*(void *)(v175 + 8) + 16);
        int v178 = *v177;
        BOOL v180 = (v178 - 9) <= 0x3C && ((1 << (v178 - 9)) & 0x1000000000000605) != 0
            || v178 == 0;
        if (v180 || (v177[4] & 0x10) != 0 || (v177[8] & 1) != 0)
        {
          if (v741 >= (unint64_t)HIDWORD(v741)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v740 + v741) = v175;
          LODWORD(v741) = v741 + 1;
          if (v54 >= v176) {
            int v54 = v176;
          }
        }
        else if (v53 <= v176)
        {
          int v53 = *(_DWORD *)(v175 + 240) + *(unsigned __int16 *)(v175 + 226);
        }
        v173 += 2;
        v174 -= 16;
      }
      while (v174);
    }
    char v112 = 1;
    if (v708 < v707) {
      goto LABEL_383;
    }
    int v229 = 1;
LABEL_516:
    if (v740 != v742) {
      free(v740);
    }
    if (v743 != &v745) {
      free(v743);
    }
    if (v112) {
      int v230 = v229;
    }
    else {
      int v230 = 1;
    }
  }
  while (v230 != 1);
LABEL_526:
  int v706 = HIDWORD(v754) - v755;
  if (v54 != 0x7FFFFFFF && v53 == -1) {
    int v232 = v54;
  }
  else {
    int v232 = v53;
  }
  uint64_t v233 = *(void *)v713;
  if (v708 < v707)
  {
    if (*(unsigned char *)(*(void *)(*(void *)v713 + 64) + 318))
    {
      unsigned int v234 = *(_DWORD *)(*(void *)v713 + 3200);
      if (*(_DWORD *)(*(void *)v713 + 3188) >= v234
        && ((*(void *)(*(void *)v713 + 984) - *(void *)(*(void *)v713 + 976)) >> 3)
         - (v706
          + v708)
         + ((*(void *)(*(void *)v713 + 928) - *(void *)(*(void *)v713 + 920)) >> 3) != *(_DWORD *)(*(void *)v713 + 1864) - *(_DWORD *)(*(void *)v713 + 1860)
        && *(_DWORD *)(*(void *)v713 + 1860) - *(_DWORD *)(*(void *)v713 + 1864) < v234)
      {
        uint64_t v235 = *(void *)(*(void *)v713 + 1848);
        uint64_t v236 = 1856;
        if (v235 == *(void *)(*(void *)v713 + 1840)) {
          uint64_t v236 = 1860;
        }
        uint64_t v237 = *(unsigned int *)(*(void *)v713 + v236);
        if (v237)
        {
          uint64_t v238 = 8 * v237;
          int v239 = *(unint64_t **)(*(void *)v713 + 1848);
          while (*v239 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v239;
            v238 -= 8;
            if (!v238) {
              goto LABEL_652;
            }
          }
        }
        else
        {
          int v239 = *(unint64_t **)(*(void *)v713 + 1848);
        }
        unsigned int v241 = (unint64_t *)(v235 + 8 * v237);
        if (v239 != v241)
        {
          unint64_t v242 = *v239;
LABEL_550:
          uint64_t v243 = v732;
          if (v733 == v732)
          {
            int v244 = HIDWORD(v734);
            unsigned int v245 = &v733[8 * HIDWORD(v734)];
            if (HIDWORD(v734))
            {
              uint64_t v246 = 0;
              while (*(void *)&v733[v246] != v242)
              {
                v246 += 8;
                if (8 * HIDWORD(v734) == v246) {
                  goto LABEL_569;
                }
              }
              unsigned int v245 = &v733[v246];
            }
LABEL_569:
            uint64_t v243 = v733;
          }
          else
          {
            int v247 = v734 - 1;
            unsigned int v248 = (v734 - 1) & ((v242 >> 4) ^ (v242 >> 9));
            unsigned int v245 = &v733[8 * v248];
            uint64_t v249 = *(void *)v245;
            if (*(void *)v245 == -1)
            {
              uint64_t v250 = 0;
LABEL_592:
              if (v250) {
                unsigned int v245 = v250;
              }
              int v244 = HIDWORD(v734);
              if (*(void *)v245 != v242) {
                unsigned int v245 = &v733[8 * v734];
              }
            }
            else
            {
              uint64_t v250 = 0;
              int v251 = 1;
              while (v249 != v242)
              {
                if (v250) {
                  BOOL v252 = 0;
                }
                else {
                  BOOL v252 = v249 == -2;
                }
                if (v252) {
                  uint64_t v250 = v245;
                }
                unsigned int v253 = v248 + v251++;
                unsigned int v248 = v253 & v247;
                unsigned int v245 = &v733[8 * (v253 & v247)];
                uint64_t v249 = *(void *)v245;
                if (*(void *)v245 == -1) {
                  goto LABEL_592;
                }
              }
              int v244 = HIDWORD(v734);
            }
          }
          if (v733 == v243) {
            int v254 = v244;
          }
          else {
            int v254 = v734;
          }
          if (v245 == &v733[8 * v254])
          {
            int64x2_t v255 = v752;
            if (v753 == v752)
            {
              int v256 = HIDWORD(v754);
              uint64_t v257 = (char *)v753 + 8 * HIDWORD(v754);
              if (HIDWORD(v754))
              {
                uint64_t v258 = 0;
                while (*(void *)((char *)v753 + v258) != v242)
                {
                  v258 += 8;
                  if (8 * HIDWORD(v754) == v258) {
                    goto LABEL_599;
                  }
                }
                uint64_t v257 = (char *)v753 + v258;
              }
LABEL_599:
              int64x2_t v255 = v753;
            }
            else
            {
              int v259 = v754 - 1;
              unsigned int v260 = (v754 - 1) & ((v242 >> 4) ^ (v242 >> 9));
              uint64_t v257 = (char *)v753 + 8 * v260;
              uint64_t v261 = *(void *)v257;
              if (*(void *)v257 == -1)
              {
                uint64_t v262 = 0;
LABEL_629:
                if (v262) {
                  uint64_t v257 = v262;
                }
                int v256 = HIDWORD(v754);
                if (*(void *)v257 != v242) {
                  uint64_t v257 = (char *)v753 + 8 * v754;
                }
              }
              else
              {
                uint64_t v262 = 0;
                int v263 = 1;
                while (v261 != v242)
                {
                  if (v262) {
                    BOOL v264 = 0;
                  }
                  else {
                    BOOL v264 = v261 == -2;
                  }
                  if (v264) {
                    uint64_t v262 = v257;
                  }
                  unsigned int v265 = v260 + v263++;
                  unsigned int v260 = v265 & v259;
                  uint64_t v257 = (char *)v753 + 8 * (v265 & v259);
                  uint64_t v261 = *(void *)v257;
                  if (*(void *)v257 == -1) {
                    goto LABEL_629;
                  }
                }
                int v256 = HIDWORD(v754);
              }
            }
            unsigned int v266 = v753 == v255 ? v256 : v754;
            if (v257 == (char *)v753 + 8 * v266)
            {
              uint64_t v267 = *(void *)(*(void *)v713 + 2136);
              uint64_t v268 = *(unsigned int *)(*(void *)v713 + 2148);
              if (v267 == *(void *)(*(void *)v713 + 2128))
              {
                if (v268)
                {
                  uint64_t v269 = 0;
                  uint64_t v270 = 8 * v268;
                  uint64_t v271 = *(unint64_t **)(*(void *)v713 + 2136);
                  while (*v271 != v242)
                  {
                    if (*v271 == -2) {
                      uint64_t v269 = v271;
                    }
                    ++v271;
                    v270 -= 8;
                    if (!v270)
                    {
                      if (!v269) {
                        goto LABEL_612;
                      }
                      unint64_t *v269 = v242;
                      --*(_DWORD *)(*(void *)v713 + 2152);
                      goto LABEL_642;
                    }
                  }
                  goto LABEL_642;
                }
LABEL_612:
                unsigned int v272 = *(_DWORD *)(*(void *)v713 + 2144);
                if (v268 < v272)
                {
                  *(_DWORD *)(*(void *)v713 + 2148) = v268 + 1;
                  *(void *)(v267 + 8 * v268) = v242;
                  goto LABEL_642;
                }
              }
              else
              {
                unsigned int v272 = *(_DWORD *)(*(void *)v713 + 2144);
              }
              if (3 * v272 <= 4 * ((int)v268 - *(_DWORD *)(*(void *)v713 + 2152)))
              {
                if (v272 >= 0x40) {
                  v272 *= 2;
                }
                else {
                  unsigned int v272 = 128;
                }
              }
              else if (v272 - v268 >= v272 >> 3)
              {
                goto LABEL_617;
              }
              llvm::SmallPtrSetImplBase::Grow(v715, v272);
              unsigned int v272 = *(_DWORD *)(*(void *)v713 + 2144);
              uint64_t v267 = *(void *)(*(void *)v713 + 2136);
LABEL_617:
              unsigned int v273 = v272 - 1;
              unsigned int v274 = (v272 - 1) & ((v242 >> 4) ^ (v242 >> 9));
              uint64_t v275 = (unint64_t *)(v267 + 8 * v274);
              unint64_t v276 = *v275;
              if (*v275 == -1)
              {
                uint64_t v277 = 0;
LABEL_635:
                if (v277) {
                  uint64_t v281 = v277;
                }
                else {
                  uint64_t v281 = v275;
                }
                if (*v281 != v242)
                {
                  if (*v281 == -2) {
                    --*(_DWORD *)(*(void *)v713 + 2152);
                  }
                  else {
                    ++*(_DWORD *)(*(void *)v713 + 2148);
                  }
                  *uint64_t v281 = v242;
                }
              }
              else
              {
                uint64_t v277 = 0;
                int v278 = 1;
                while (v276 != v242)
                {
                  if (v277) {
                    BOOL v279 = 0;
                  }
                  else {
                    BOOL v279 = v276 == -2;
                  }
                  if (v279) {
                    uint64_t v277 = v275;
                  }
                  unsigned int v280 = v274 + v278++;
                  unsigned int v274 = v280 & v273;
                  uint64_t v275 = (unint64_t *)(v267 + 8 * (v280 & v273));
                  unint64_t v276 = *v275;
                  if (*v275 == -1) {
                    goto LABEL_635;
                  }
                }
              }
            }
          }
LABEL_642:
          int v282 = v239 + 1;
          while (v282 != v241)
          {
            unint64_t v283 = *v282++;
            unint64_t v242 = v283;
            if (v283 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              int v239 = v282 - 1;
              goto LABEL_550;
            }
          }
        }
      }
    }
  }
LABEL_652:
  if (v723 != v722) {
    free(v723);
  }
  if (v753 != v752) {
    free(v753);
  }
  if (v733 != v732) {
    free(v733);
  }
  *(unsigned char *)(*(void *)v713 + 3261) = (int)(v706 + v708) > 15;
  if (v708 < v707)
  {
    unsigned int v284 = v708;
    *(unsigned char *)(*(void *)v713 + 3260) = v720 - v232 >= (int)v708;
    if (v720 - v232 < (int)v708) {
      unsigned int v284 = v708 - v720 + v232;
    }
LABEL_663:
    *(_DWORD *)(*(void *)v713 + 3176) = v284;
  }
  else if (!*(_DWORD *)(*(void *)v713 + 3176))
  {
    unsigned int v284 = v707 >> 1;
    goto LABEL_663;
  }
  uint64_t v285 = *(void **)(*(void *)v713 + 1344);
  if (v285 == *(void **)(*(void *)v713 + 1336))
  {
LABEL_665:
    *(void *)(*(void *)v713 + 1356) = 0;
  }
  else
  {
    uint64_t v353 = *(unsigned int *)(*(void *)v713 + 1352);
    if (v353 < 0x21
      || 4 * (*(_DWORD *)(*(void *)v713 + 1356) - *(_DWORD *)(*(void *)v713 + 1360)) >= v353)
    {
      memset(v285, 255, 8 * v353);
      goto LABEL_665;
    }
    llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(*(void *)v713 + 1336));
  }
  uint64_t v286 = *(uint64_t **)(*(void *)v713 + 1096);
  unint64_t v287 = *(uint64_t **)(*(void *)v713 + 1088);
  unint64_t v288 = (unint64_t)((char *)v286 - (char *)v287) >> 3;
  if (v286 == v287) {
    goto LABEL_799;
  }
  while (2)
  {
    uint64_t v289 = *v287;
    if (*v287)
    {
      if ((*(unsigned char *)(*(void *)(*(void *)(v289 + 8) + 16) + 16) & 2) != 0)
      {
        uint64_t v290 = *(unsigned int *)(v289 + 40);
        if (v290)
        {
          __int16 v291 = *(void **)(v289 + 32);
          uint64_t v292 = 16 * v290;
          do
          {
            unint64_t v293 = *v291 & 0xFFFFFFFFFFFFFFF8;
            if ((*v291 & 6) == 0 && v293 != 0)
            {
              uint64_t v295 = *(void *)(v293 + 8);
              if (v295)
              {
                if ((*(unsigned char *)(*(void *)(v295 + 16) + 16) & 0x10) != 0
                  && (*(_DWORD *)(sub_1CB904224(*(void *)v713 + 696, v293) + 8) + 1) > 1)
                {
                  goto LABEL_721;
                }
              }
            }
            v291 += 2;
            v292 -= 16;
          }
          while (v292);
        }
      }
    }
    uint64_t v233 = *(void *)v713;
    if (sub_1CBA7D95C(v289, *(void *)(*(void *)v713 + 680))) {
      goto LABEL_779;
    }
    int v296 = *(void **)(v289 + 8);
    uint64_t v297 = *(void *)(v296[2] + 16);
    if ((*(unsigned char *)(v289 + 236) & 1) == 0) {
      llvm::SUnit::ComputeDepth((llvm::SUnit *)v289);
    }
    unsigned int v298 = *(_DWORD *)(v289 + 240);
    if ((v297 & 2) == 0
      || (uint64_t v299 = *(unsigned __int8 *)(v296[2] + 4) + 2, v300 = v296[4], *(unsigned char *)(v300 + 32 * v299) != 7))
    {
      if ((v297 & 0xD00) != 0x500) {
        goto LABEL_778;
      }
      unint64_t v308 = v296[6];
      if (v308 < 8) {
        goto LABEL_778;
      }
      if ((v308 & 7) != 0)
      {
        unsigned int v309 = (_DWORD *)(v308 & 0xFFFFFFFFFFFFFFF8);
        BOOL v310 = (v296[6] & 7) != 3 || v309 == 0;
        if (v310 || !*v309) {
          goto LABEL_778;
        }
      }
      else
      {
        v308 &= 0xFFFFFFFFFFFFFFF8;
        v296[6] = v308;
      }
      if ((v308 & 7) != 0)
      {
        uint64_t v320 = *(uint64_t **)((v308 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        uint64_t v320 = (uint64_t *)(v308 & 0xFFFFFFFFFFFFFFF8);
        v296[6] = v320;
      }
      uint64_t v321 = *v320;
      if ((v321 & 4) != 0) {
        goto LABEL_778;
      }
      if ((v321 & 0xFFFFFFFFFFFFFFF8) == 0) {
        goto LABEL_778;
      }
      UnderlyingObject = llvm::getUnderlyingObject((llvm *)(v321 & 0xFFFFFFFFFFFFFFF8), (const llvm::Value *)6);
      if (!UnderlyingObject) {
        goto LABEL_778;
      }
      int8x8_t v323 = *(int8x8_t *)(*(void *)v713 + 2336);
      if (!*(void *)&v323) {
        goto LABEL_778;
      }
      unint64_t v324 = 0x9DDFEA08EB382D69
           * (((8 * UnderlyingObject) + 8) ^ ((unint64_t)UnderlyingObject >> 32));
      unint64_t v325 = 0x9DDFEA08EB382D69 * (((unint64_t)UnderlyingObject >> 32) ^ (v324 >> 47) ^ v324);
      unint64_t v326 = 0x9DDFEA08EB382D69 * (v325 ^ (v325 >> 47));
      uint8x8_t v327 = (uint8x8_t)vcnt_s8(v323);
      v327.i16[0] = vaddlv_u8(v327);
      if (v327.u32[0] <= 1uLL) {
        uint64_t v328 = (*(void *)&v323 - 1) & v326;
      }
      else {
        uint64_t v328 = v326 < *(void *)&v323 ? v326 : v326 % *(void *)&v323;
      }
      unint64_t v329 = *(uint64_t ***)(*(void *)(*(void *)v713 + 2328) + 8 * v328);
      if (!v329) {
        goto LABEL_778;
      }
      uint64_t v330 = *v329;
      if (!*v329) {
        goto LABEL_778;
      }
      while (1)
      {
        unint64_t v331 = v330[1];
        if (v331 == v326)
        {
          if ((llvm *)v330[2] == UnderlyingObject)
          {
            int32x2_t v340 = v330;
            do
              int32x2_t v340 = (uint64_t *)*v340;
            while (v340 && (llvm *)v340[2] == UnderlyingObject);
            while (1)
            {
              if (v330 == v340) {
                goto LABEL_778;
              }
              uint64_t v341 = v330[3];
              uint64_t v342 = v341;
              if ((*(unsigned char *)(v341 + 236) & 1) == 0)
              {
                llvm::SUnit::ComputeDepth((llvm::SUnit *)v330[3]);
                uint64_t v342 = v330[3];
              }
              if (*(_DWORD *)(v341 + 240) + *(unsigned __int16 *)(v342 + 226) >= v298) {
                break;
              }
              uint64_t v330 = (uint64_t *)*v330;
            }
LABEL_721:
            uint64_t v233 = *(void *)v713;
            uint64_t v314 = *(void *)(*(void *)v713 + 1344);
            uint64_t v315 = *(unsigned int *)(*(void *)v713 + 1356);
            if (v314 == *(void *)(*(void *)v713 + 1336))
            {
              if (v315)
              {
                unint64_t v316 = 0;
                uint64_t v317 = 8 * v315;
                uint64_t v318 = *(uint64_t **)(*(void *)v713 + 1344);
                while (*v318 != v289)
                {
                  if (*v318 == -2) {
                    unint64_t v316 = v318;
                  }
                  ++v318;
                  v317 -= 8;
                  if (!v317)
                  {
                    if (!v316) {
                      goto LABEL_729;
                    }
                    *unint64_t v316 = v289;
                    --*(_DWORD *)(*(void *)v713 + 1360);
                    goto LABEL_790;
                  }
                }
                goto LABEL_790;
              }
LABEL_729:
              unsigned int v319 = *(_DWORD *)(*(void *)v713 + 1352);
              if (v315 < v319)
              {
                *(_DWORD *)(*(void *)v713 + 1356) = v315 + 1;
                *(void *)(v314 + 8 * v315) = v289;
LABEL_790:
                LODWORD(v288) = v288 - 1;
                goto LABEL_779;
              }
            }
            else
            {
              unsigned int v319 = *(_DWORD *)(*(void *)v713 + 1352);
            }
            if (3 * v319 <= 4 * ((int)v315 - *(_DWORD *)(*(void *)v713 + 1360)))
            {
              if (v319 >= 0x40) {
                v319 *= 2;
              }
              else {
                unsigned int v319 = 128;
              }
            }
            else if (v319 - v315 >= v319 >> 3)
            {
              goto LABEL_757;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(*(void *)v713 + 1336), v319);
            unsigned int v319 = *(_DWORD *)(*(void *)v713 + 1352);
            uint64_t v314 = *(void *)(*(void *)v713 + 1344);
LABEL_757:
            unsigned int v332 = v319 - 1;
            unsigned int v333 = (v319 - 1) & ((v289 >> 4) ^ (v289 >> 9));
            int v334 = (uint64_t *)(v314 + 8 * v333);
            uint64_t v335 = *v334;
            if (*v334 == -1)
            {
              uint64_t v336 = 0;
LABEL_783:
              if (v336) {
                BOOL v343 = v336;
              }
              else {
                BOOL v343 = v334;
              }
              if (*v343 != v289)
              {
                if (*v343 == -2) {
                  --*(_DWORD *)(*(void *)v713 + 1360);
                }
                else {
                  ++*(_DWORD *)(*(void *)v713 + 1356);
                }
                *BOOL v343 = v289;
              }
            }
            else
            {
              uint64_t v336 = 0;
              int v337 = 1;
              while (v335 != v289)
              {
                if (v336) {
                  BOOL v338 = 0;
                }
                else {
                  BOOL v338 = v335 == -2;
                }
                if (v338) {
                  uint64_t v336 = v334;
                }
                unsigned int v339 = v333 + v337++;
                unsigned int v333 = v339 & v332;
                int v334 = (uint64_t *)(v314 + 8 * (v339 & v332));
                uint64_t v335 = *v334;
                if (*v334 == -1) {
                  goto LABEL_783;
                }
              }
            }
            goto LABEL_790;
          }
        }
        else
        {
          if (v327.u32[0] <= 1uLL)
          {
            v331 &= *(void *)&v323 - 1;
          }
          else if (v331 >= *(void *)&v323)
          {
            v331 %= *(void *)&v323;
          }
          if (v331 != v328) {
            goto LABEL_778;
          }
        }
        uint64_t v330 = (uint64_t *)*v330;
        if (!v330) {
          goto LABEL_778;
        }
      }
    }
    int8x8_t v301 = *(int8x8_t *)(*(void *)v713 + 2296);
    if (!*(void *)&v301) {
      goto LABEL_778;
    }
    unint64_t v302 = *(unsigned int *)(v300 + 32 * v299 + 4);
    uint8x8_t v303 = (uint8x8_t)vcnt_s8(v301);
    v303.i16[0] = vaddlv_u8(v303);
    if (v303.u32[0] <= 1uLL)
    {
      unint64_t v304 = (v301.i32[0] - 1) & v302;
    }
    else
    {
      unint64_t v304 = v302;
      if (*(void *)&v301 <= v302) {
        unint64_t v304 = v302 % *(void *)&v301;
      }
    }
    unint64_t v305 = *(uint64_t ***)(*(void *)(*(void *)v713 + 2288) + 8 * v304);
    if (!v305) {
      goto LABEL_778;
    }
    unsigned int v306 = *v305;
    if (!*v305) {
      goto LABEL_778;
    }
    while (2)
    {
      unint64_t v307 = v306[1];
      if (v307 != v302)
      {
        if (v303.u32[0] > 1uLL)
        {
          if (v307 >= *(void *)&v301) {
            v307 %= *(void *)&v301;
          }
        }
        else
        {
          v307 &= *(void *)&v301 - 1;
        }
        if (v307 != v304) {
          goto LABEL_778;
        }
        goto LABEL_701;
      }
      if (*((_DWORD *)v306 + 4) != v302)
      {
LABEL_701:
        unsigned int v306 = (uint64_t *)*v306;
        if (!v306) {
          goto LABEL_778;
        }
        continue;
      }
      break;
    }
    uint64_t v311 = v306;
    do
      uint64_t v311 = (uint64_t *)*v311;
    while (v311 && *((_DWORD *)v311 + 4) == v302);
    while (v306 != v311)
    {
      uint64_t v312 = v306[3];
      uint64_t v313 = v312;
      if ((*(unsigned char *)(v312 + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth((llvm::SUnit *)v306[3]);
        uint64_t v313 = v306[3];
      }
      if (*(_DWORD *)(v312 + 240) + *(unsigned __int16 *)(v313 + 226) >= v298) {
        goto LABEL_721;
      }
      unsigned int v306 = (uint64_t *)*v306;
    }
LABEL_778:
    uint64_t v233 = *(void *)v713;
LABEL_779:
    if (++v287 != v286) {
      continue;
    }
    break;
  }
LABEL_799:
  if (!*(unsigned char *)(v233 + 3263))
  {
    unsigned int v345 = *(_DWORD *)(v233 + 3216);
    if (v288 >= v345
      && *(_DWORD *)(v233 + 3204)
       - v288
       + ((*(void *)(v233 + 1096) - *(void *)(v233 + 1088)) >> 3) >= v345)
    {
      char v344 = *(unsigned char *)(v233 + 3261);
      if (v344)
      {
        unsigned int v354 = *(_DWORD *)(v233 + 3188);
        if (v354) {
          BOOL v355 = v354 >= *(_DWORD *)(v233 + 3200);
        }
        else {
          BOOL v355 = 1;
        }
        char v344 = v355;
      }
      goto LABEL_805;
    }
LABEL_804:
    char v344 = 0;
LABEL_805:
    *(unsigned char *)(v233 + 3263) = v344;
    goto LABEL_806;
  }
  if (!v288) {
    goto LABEL_804;
  }
  char v344 = 1;
LABEL_806:
  unsigned __int8 v346 = *(unsigned char *)(v233 + 3261);
  *(unsigned char *)(v233 + 3264) = v346;
  if (!(v346 | v344) && *(_DWORD *)(v233 + 3204) && v288)
  {
    uint64_t v347 = *(llvm::SUnit ***)(v233 + 1088);
    uint64_t v348 = *(llvm::SUnit ***)(v233 + 1096);
    if (v347 == v348)
    {
      char v352 = 1;
    }
    else
    {
      do
      {
        v349 = *v347;
        uint64_t v350 = v233 + 2344;
        while (1)
        {
          uint64_t v350 = *(void *)v350;
          if (!v350) {
            break;
          }
          if (sub_1CBA7BAFC(v233, v349, *(llvm::SUnit **)(v350 + 24)))
          {
LABEL_823:
            char v352 = 0;
            goto LABEL_832;
          }
        }
        uint64_t v351 = v233 + 2304;
        while (1)
        {
          uint64_t v351 = *(void *)v351;
          if (!v351) {
            break;
          }
          if (sub_1CBA7BAFC(v233, v349, *(llvm::SUnit **)(v351 + 24))) {
            goto LABEL_823;
          }
        }
        ++v347;
        char v352 = 1;
      }
      while (v347 != v348);
    }
LABEL_832:
    *(unsigned char *)(v233 + 3264) |= v352;
  }
  uint64_t v356 = 0;
  unsigned int v357 = *(_DWORD *)(v233 + 3164);
  *(unsigned char *)(v233 + 3250) = (float)(*(float *)(v233 + 3244) * (float)v357) <= v6;
  if (v717 > v357) {
    unsigned int v357 = v717;
  }
  *(_DWORD *)(v233 + 3164) = v357;
  *(unsigned char *)(v233 + 3262) = 0;
  uint64_t v744 = 0;
  v743 = 0;
  unint64_t v745 = 0xFFFFFFFF7FFFFFFFLL;
  char v746 = 0;
  char v747 = 0;
  __int16 v749 = 7679;
  unsigned int v358 = (v750 | (v751 << 16)) & 0xFFFC4FDC;
  memset(v748, 255, sizeof(v748));
  v750 &= 0x4FDCu;
  unsigned __int8 v751 = BYTE2(v358);
  do
  {
    uint64_t v359 = &(&v732)[v356];
    *uint64_t v359 = 0;
    v359[1] = 0;
    v359[2] = (char *)0xFFFFFFFF7FFFFFFFLL;
    *((unsigned char *)v359 + 24) = 0;
    *((unsigned char *)v359 + 28) = 0;
    *((_WORD *)v359 + 23) = 7679;
    v359[4] = (char *)-1;
    *(char **)((char *)v359 + 37) = (char *)-1;
    uint64_t v360 = &v736[v356 * 8 + 16];
    int v361 = (*(unsigned __int16 *)&v736[v356 * 8 + 16] | (v736[v356 * 8 + 18] << 16)) & 0xFC4FDC;
    *(_WORD *)v360 &= 0x4FDCu;
    v360[2] = BYTE2(v361);
    v356 += 7;
  }
  while (v356 != 63);
  uint64_t v362 = 0;
  v714 = (unsigned int *)(v233 + 1356);
  v712 = (unsigned int *)(v233 + 1352);
  while (2)
  {
    uint64_t v710 = v362;
    v719 = &(&v732)[7 * v362];
    uint64_t v363 = v233 + 56 * v362;
    int v364 = *(llvm::SUnit ***)(v363 + 864);
    unint64_t v365 = *(llvm::SmallPtrSetImplBase **)(v363 + 872);
    v716 = v365;
    while (2)
    {
      if (v364 != (llvm::SUnit **)v365)
      {
        unint64_t v724 = 0xFFFFFFFF7FFFFFFFLL;
        LOBYTE(v725) = 0;
        char v726 = 0;
        __int16 v729 = 7679;
        memset(v727, 255, sizeof(v727));
        int v366 = v730 | (v731 << 16);
        v730 &= 0x4FDCu;
        unsigned __int8 v731 = (v366 & 0xFC4FDCu) >> 16;
        v722 = (llvm::SUnit *)v364;
        uint64_t v723 = 0;
        unsigned int v367 = *v364;
        uint64_t v723 = *v364;
        v721 = (llvm::SmallPtrSetImplBase *)v364;
        uint64_t v368 = *((void *)*v364 + 1);
        uint64_t v369 = *(unsigned __int16 **)(v368 + 16);
        int v370 = *v369;
        BOOL v372 = (v370 - 9) <= 0x3C && ((1 << (v370 - 9)) & 0x1000000000000605) != 0
            || v370 == 0;
        if (v372 || (v369[4] & 0x10) != 0)
        {
          BOOL v374 = 0;
          int v375 = 0;
        }
        else
        {
          uint64_t v373 = *((void *)v369 + 2) & 1;
          BOOL v374 = v373 == 0;
          int v375 = (4 * v373) ^ 4;
        }
        unsigned int v376 = v375 | v366 & 0xFC4FD8;
        int v377 = v376 | v374 ^ (*(unsigned char *)(v233 + 3248) != 0);
        unsigned int v378 = HIWORD(v376);
        unsigned __int8 v731 = BYTE2(v376);
        unsigned __int16 v730 = v377;
        int v379 = v377 | (32 * (*v369 - 4581 < 0xC));
        unsigned __int8 v731 = v378;
        unsigned __int16 v730 = v379;
        uint64_t v380 = *(unsigned __int16 **)(v368 + 16);
        if ((~*((_DWORD *)v380 + 4) & 0x800100) != 0 && *v380 - 4821 > 3) {
          int v381 = 0;
        }
        else {
          int v381 = 512;
        }
        int v382 = v379 & 0xFC4DFD;
        int v383 = v381 | v382;
        unsigned __int8 v731 = BYTE2(v382);
        unsigned __int16 v730 = v381 | v382;
        if ((*(unsigned char *)(*(void *)(v368 + 16) + 20) & 0x10) == 0)
        {
          int v384 = 0;
          goto LABEL_901;
        }
        v718 = v369;
        if (sub_1CBA7E748(v233, (uint64_t)v367, 1u))
        {
          unsigned int NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(v368);
          if (NumExplicitOperands)
          {
            unsigned int v386 = 0;
            uint64_t v387 = 0;
            uint64_t v388 = NumExplicitOperands;
            uint64_t v711 = v368;
            uint64_t v389 = *(void *)(v368 + 32);
            uint64_t v369 = v718;
            while (1)
            {
              if ((*(_DWORD *)(v389 + 32 * v387) & 0x10000FF) == 0)
              {
                int v390 = *(_DWORD *)(v389 + 32 * v387 + 4);
                if (v390 < 0)
                {
                  uint64_t v391 = *(void *)(v233 + 48);
                  uint64_t v392 = *(void *)(v391 + 24) + 16 * (v390 & 0x7FFFFFFF);
                  char v393 = *(int **)(v392 + 8);
                  if (!v393) {
                    goto LABEL_899;
                  }
                  int v394 = *v393;
                  uint64_t v395 = *(void *)(v392 + 8);
                  if ((*v393 & 0x1000000) == 0)
                  {
                    uint64_t v395 = *((void *)v393 + 3);
                    if (!v395 || (*(unsigned char *)(v395 + 3) & 1) == 0) {
                      goto LABEL_875;
                    }
                  }
                  uint64_t v396 = *(void *)(v395 + 8);
                  LOBYTE(v397) = 1;
LABEL_864:
                  uint64_t v398 = *(void *)(v396 + 16);
                  if (*(_WORD *)v398 == 19)
                  {
                    unsigned int v709 = v386;
                    uint64_t v399 = sub_1CD4141A8(v391, *(_DWORD *)(*(void *)(v396 + 32) + 36));
                    unsigned int v386 = v709;
                    uint64_t v369 = v718;
                    if (v399) {
                      uint64_t v398 = *(void *)(*(void *)(v399 + 8) + 16);
                    }
                  }
                  if ((*(void *)(v398 + 16) & 0xD00) == 0x900)
                  {
                    int v397 = ((*(void *)(v398 + 16) & 0xD00) == 2304) & v397;
                    while (1)
                    {
                      uint64_t v395 = *(void *)(v395 + 24);
                      if (!v395 || (*(unsigned char *)(v395 + 3) & 1) == 0) {
                        break;
                      }
                      if (*(void *)(v395 + 8) != v396)
                      {
                        uint64_t v396 = *(void *)(v395 + 8);
                        goto LABEL_864;
                      }
                    }
                    uint64_t v233 = *(void *)v713;
                    if (!v397) {
                      goto LABEL_894;
                    }
LABEL_875:
                    if ((v394 & 0x81000000) != 0)
                    {
                      while (1)
                      {
                        char v393 = (int *)*((void *)v393 + 3);
                        if (!v393) {
                          break;
                        }
                        if ((*v393 & 0x81000000) == 0) {
                          goto LABEL_878;
                        }
                      }
LABEL_899:
                      int v400 = 0;
                    }
                    else
                    {
LABEL_878:
                      int v400 = 0;
                      uint64_t v401 = *((void *)v393 + 1);
LABEL_879:
                      uint64_t v402 = *(void *)(*(void *)(v401 + 16) + 16);
                      if (v400 == 3) {
                        int v403 = 7;
                      }
                      else {
                        int v403 = 0;
                      }
                      BOOL v404 = (v402 & 0x1000000000) == 0;
                      if ((v402 & 0x1000000000) != 0) {
                        int v405 = v403;
                      }
                      else {
                        int v405 = 8;
                      }
                      if (!v404) {
                        ++v400;
                      }
                      if ((v405 | 8) == 8)
                      {
                        while (1)
                        {
                          char v393 = (int *)*((void *)v393 + 3);
                          if (!v393) {
                            break;
                          }
                          if ((*v393 & 0x81000000) == 0 && *((void *)v393 + 1) != v401)
                          {
                            uint64_t v401 = *((void *)v393 + 1);
                            goto LABEL_879;
                          }
                        }
                      }
                    }
                    if (v400 == 4) {
                      ++v386;
                    }
                    goto LABEL_894;
                  }
                  uint64_t v233 = *(void *)v713;
                }
              }
LABEL_894:
              if (++v387 == v388)
              {
                int v383 = v730 | (v731 << 16);
                int v384 = (v386 > 1) << 10;
                uint64_t v368 = v711;
                goto LABEL_901;
              }
            }
          }
        }
        int v384 = 0;
        int v383 = v730 | (v731 << 16);
        uint64_t v369 = v718;
LABEL_901:
        int v406 = 0;
        unsigned int v407 = v383 & 0xFFFFFBFF | v384;
        unsigned __int8 v731 = BYTE2(v383);
        unsigned __int16 v730 = v407;
        uint64_t v408 = *(void *)(v233 + 64);
        unsigned int v409 = **(unsigned __int16 **)(v368 + 16);
        if (v409 <= 0x865)
        {
          if (v409 != 1100)
          {
            if (v409 == 2114) {
              goto LABEL_904;
            }
            goto LABEL_911;
          }
          int v406 = *(unsigned __int8 *)(v408 + 338);
          if (!*(unsigned char *)(v408 + 338)) {
            goto LABEL_911;
          }
          if (*(_DWORD *)(*(void *)(v368 + 32) + 64) != 7)
          {
            int v406 = 0;
            goto LABEL_911;
          }
LABEL_1255:
          int v406 = 64;
          goto LABEL_911;
        }
        if (v409 == 4578 || v409 == 4580) {
          goto LABEL_1255;
        }
        if (v409 != 2150) {
          goto LABEL_911;
        }
LABEL_904:
        int v406 = *(unsigned __int8 *)(v408 + 338);
        if (*(unsigned char *)(v408 + 338)) {
          goto LABEL_1255;
        }
LABEL_911:
        unsigned int v411 = v406 | v407 & 0xFFFFFFBF;
        unsigned __int8 v731 = BYTE2(v407);
        unsigned __int16 v730 = v406 | v407 & 0xFFBF;
        uint64_t v412 = *((void *)v369 + 2);
        if ((v412 & 0xD00) == 0x900 || (v412 & 0xE00) == 0xA00)
        {
          if ((uint64_t v413 = *(unsigned __int16 **)(v368 + 16), v414 = *v413, (v414 - 9) <= 0x3C)
            && ((1 << (v414 - 9)) & 0x1000000000000605) != 0
            || !*v413
            || (v413[4] & 0x10) != 0
            || (v413[8] & 1) != 0)
          {
            unsigned int v411 = v407 | 0x40;
            unsigned __int8 v731 = BYTE2(v407);
            unsigned __int16 v730 = v407 | 0x40;
          }
        }
        uint64_t v415 = v369;
        int v416 = *((_DWORD *)v369 + 2) >> 13;
        unsigned int v417 = v411 & 0xFFFFFEFF | (((*((_DWORD *)v369 + 2) & 0x2000) != 0) << 8);
        unsigned __int8 v731 = BYTE2(v411);
        unsigned __int16 v730 = v411 & 0xFEFF | ((v416 & 1) << 8);
        if (sub_1CBA7B1D8(v368)) {
          int v418 = 2;
        }
        else {
          int v418 = 0;
        }
        __int16 v419 = v417 & 0xFFFD;
        unsigned int v420 = v417 & 0xFFFFFFFD | v418;
        unsigned __int8 v731 = BYTE2(v411);
        unsigned __int16 v730 = v419 | v418;
        if (sub_1CBA7BA60(v368)) {
          int v421 = 8;
        }
        else {
          int v421 = 0;
        }
        __int16 v422 = v420 & 0xFFF7;
        unsigned int v423 = v420 & 0xFFFFFFF7 | v421;
        unsigned __int8 v731 = BYTE2(v411);
        unsigned __int16 v730 = v422 | v421;
        if (sub_1CBA7DE84(v368)) {
          int v424 = 16;
        }
        else {
          int v424 = 0;
        }
        __int16 v425 = v423 & 0xFFEF;
        unsigned int v426 = v423 & 0xFFFFFFEF | v424;
        unsigned __int8 v731 = BYTE2(v411);
        unsigned __int16 v730 = v425 | v424;
        if (sub_1CBA7D8B4(v368)) {
          int v428 = 128;
        }
        else {
          int v428 = 0;
        }
        unsigned int v429 = v426 & 0xFFFFF77F | v428;
        unsigned __int8 v731 = BYTE2(v411);
        unsigned __int16 v730 = v426 & 0xF77F | v428;
        if ((v411 & 4) != 0)
        {
          __int16 v513 = v426 & 0xB77F | v428 & 0xB7FF;
          unsigned __int8 v731 = BYTE2(v429);
          unsigned __int16 v730 = v429 & 0xB7FF;
          goto LABEL_1082;
        }
        int v752 = (void *)1;
        for (uint64_t i = 8; i != 72; i += 8)
          *(_DWORD *)((char *)&v752 + i) = -1;
        uint64_t v431 = *((unsigned __int8 *)v415 + 4);
        unsigned int v432 = v415[1];
        if (v432 > v431)
        {
          uint64_t v427 = v415;
          while (1)
          {
            uint64_t v433 = *(void *)(v368 + 32);
            unsigned int v434 = *(_DWORD *)(v433 + 32 * v431);
            if (!(_BYTE)v434)
            {
              int v435 = *(_DWORD *)(v433 + 32 * v431 + 4);
              int v436 = (int)v752;
              int v437 = v752 & 1;
              if (v752)
              {
                int v438 = 8;
                uint64_t v439 = (char *)&v753;
              }
              else
              {
                int v438 = v754;
                if (!v754)
                {
                  unsigned int v448 = 0;
                  unsigned int v449 = 0;
                  uint64_t v233 = *(void *)v713;
                  uint64_t v427 = v415;
                  goto LABEL_954;
                }
                uint64_t v439 = (char *)v753;
                uint64_t v233 = *(void *)v713;
                uint64_t v427 = v415;
              }
              int v440 = v438 - 1;
              unsigned int v441 = v440 & (37 * v435);
              uint64_t v442 = &v439[8 * v441];
              int v443 = *(_DWORD *)v442;
              if (v435 != *(_DWORD *)v442) {
                break;
              }
            }
LABEL_959:
            if (++v431 >= (unint64_t)v432) {
              goto LABEL_997;
            }
          }
          uint64_t v444 = 0;
          int v445 = 1;
          while (v443 != -1)
          {
            if (v444) {
              BOOL v446 = 0;
            }
            else {
              BOOL v446 = v443 == -2;
            }
            if (v446) {
              uint64_t v444 = v442;
            }
            unsigned int v447 = v441 + v445++;
            unsigned int v441 = v447 & v440;
            uint64_t v442 = &v439[8 * v441];
            int v443 = *(_DWORD *)v442;
            if (v435 == *(_DWORD *)v442) {
              goto LABEL_959;
            }
          }
          if (v444) {
            unsigned int v448 = v444;
          }
          else {
            unsigned int v448 = v442;
          }
          if (v752) {
            unsigned int v449 = 8;
          }
          else {
            unsigned int v449 = v754;
          }
LABEL_954:
          if (4 * (v752 >> 1) + 4 < 3 * v449)
          {
            if (v449 + ~(v752 >> 1) - HIDWORD(v752) > v449 >> 3)
            {
LABEL_956:
              LODWORD(v752) = (v436 & 0xFFFFFFFE | v437) + 2;
              if (*(_DWORD *)v448 != -1) {
                --HIDWORD(v752);
              }
              *(_DWORD *)unsigned int v448 = v435;
              *((_DWORD *)v448 + 1) = (v434 >> 8) & 0xFFF;
              unsigned int v432 = v427[1];
              goto LABEL_959;
            }
            sub_1CD3F1F64((uint64_t)&v752, v449);
            int v436 = (int)v752;
            if (v752)
            {
              int v459 = 8;
              unint64_t v460 = (char *)&v753;
              goto LABEL_978;
            }
            int v459 = v754;
            if (v754)
            {
              unint64_t v460 = (char *)v753;
LABEL_978:
              int v437 = v752 & 1;
              int v461 = v459 - 1;
              unsigned int v462 = (v459 - 1) & (37 * v435);
              unsigned int v448 = &v460[8 * v462];
              int v463 = *(_DWORD *)v448;
              if (v435 != *(_DWORD *)v448)
              {
                unint64_t v455 = 0;
                int v464 = 1;
                while (v463 != -1)
                {
                  if (v455) {
                    BOOL v465 = 0;
                  }
                  else {
                    BOOL v465 = v463 == -2;
                  }
                  if (v465) {
                    unint64_t v455 = v448;
                  }
                  unsigned int v466 = v462 + v464++;
                  unsigned int v462 = v466 & v461;
                  unsigned int v448 = &v460[8 * (v466 & v461)];
                  int v463 = *(_DWORD *)v448;
                  if (v435 == *(_DWORD *)v448) {
                    goto LABEL_990;
                  }
                }
                goto LABEL_988;
              }
              goto LABEL_990;
            }
LABEL_996:
            int v437 = 0;
            unsigned int v448 = 0;
            goto LABEL_990;
          }
          sub_1CD3F1F64((uint64_t)&v752, 2 * v449);
          int v436 = (int)v752;
          if (v752)
          {
            int v450 = 8;
            uint64_t v451 = (char *)&v753;
          }
          else
          {
            int v450 = v754;
            if (!v754) {
              goto LABEL_996;
            }
            uint64_t v451 = (char *)v753;
          }
          int v437 = v752 & 1;
          int v452 = v450 - 1;
          unsigned int v453 = (v450 - 1) & (37 * v435);
          unsigned int v448 = &v451[8 * v453];
          int v454 = *(_DWORD *)v448;
          if (v435 != *(_DWORD *)v448)
          {
            unint64_t v455 = 0;
            int v456 = 1;
            while (v454 != -1)
            {
              if (v455) {
                BOOL v457 = 0;
              }
              else {
                BOOL v457 = v454 == -2;
              }
              if (v457) {
                unint64_t v455 = v448;
              }
              unsigned int v458 = v453 + v456++;
              unsigned int v453 = v458 & v452;
              unsigned int v448 = &v451[8 * (v458 & v452)];
              int v454 = *(_DWORD *)v448;
              if (v435 == *(_DWORD *)v448) {
                goto LABEL_990;
              }
            }
LABEL_988:
            if (v455) {
              unsigned int v448 = v455;
            }
          }
LABEL_990:
          uint64_t v233 = *(void *)v713;
          uint64_t v427 = v415;
          goto LABEL_956;
        }
LABEL_997:
        uint64_t v467 = *((unsigned int *)v723 + 10);
        if (v467)
        {
          int v468 = (uint64_t *)*((void *)v723 + 4);
          unsigned int v469 = &v468[2 * v467];
          while (1)
          {
            uint64_t v470 = *v468;
            if ((*v468 & 6) == 0)
            {
              unint64_t v471 = v470 & 0xFFFFFFFFFFFFFFF8;
              if (*(_DWORD *)((v470 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
              {
                uint64_t v472 = *(void *)(v471 + 8);
                uint64_t v473 = *(unsigned __int16 **)(v472 + 16);
                int v474 = *v473;
                BOOL v475 = (v474 - 9) > 0x3C
                    || ((1 << (v474 - 9)) & 0x1000000000000605) == 0;
                if (v475 && v474 != 0 && (v473[4] & 0x10) == 0 && (v473[8] & 1) == 0)
                {
                  unsigned int v477 = *(_DWORD **)(v472 + 32);
                  if ((*v477 & 0x10000FF) == 0x1000000) {
                    break;
                  }
                }
              }
            }
LABEL_1000:
            v468 += 2;
            if (v468 == v469) {
              goto LABEL_1051;
            }
          }
          int v478 = v477[1];
          if (v752)
          {
            int v479 = 8;
            char v480 = &v753;
            goto LABEL_1015;
          }
          char v480 = v753;
          int v479 = v754;
          if (v754)
          {
            uint64_t v233 = *(void *)v713;
LABEL_1015:
            int v481 = v479 - 1;
            LODWORD(v482) = (v479 - 1) & (37 * v478);
            unsigned int v483 = (char *)&v480[2 * v482];
            int v484 = *(_DWORD *)v483;
            if (v478 != *(_DWORD *)v483)
            {
              int v485 = 1;
              while (v484 != -1)
              {
                int v486 = v482 + v485++;
                uint64_t v482 = v486 & v481;
                int v484 = v480[2 * v482];
                if (v478 == v484) {
                  goto LABEL_1022;
                }
              }
              if (v752)
              {
                char v480 = &v753;
                uint64_t v482 = 8;
              }
              else
              {
                char v480 = v753;
                uint64_t v482 = v754;
              }
LABEL_1022:
              unsigned int v483 = (char *)&v480[2 * v482];
            }
            if (v752) {
              unint64_t v487 = (char *)&v753;
            }
            else {
              unint64_t v487 = (char *)v753;
            }
            unsigned int v488 = v754;
            if (v752) {
              unsigned int v488 = 8;
            }
            if (&v487[8 * v488] != v483)
            {
              uint64_t v489 = *(unsigned int *)(v471 + 120);
              if (v489)
              {
                int v490 = *((_DWORD *)v483 + 1);
                unint64_t v491 = *(void **)(v471 + 112);
                unint64_t v492 = &v491[2 * v489];
                while (1)
                {
                  if ((*v491 & 6) == 0)
                  {
                    unint64_t v493 = *v491 & 0xFFFFFFFFFFFFFFF8;
                    if (*(_DWORD *)(v493 + 192) != -1
                      && v723 != (llvm::SUnit *)v493
                      && (*(_WORD *)(v493 + 228) & 0x400) == 0)
                    {
                      uint64_t v495 = *(void *)(v493 + 8);
                      uint64_t v496 = *(void *)(v495 + 16);
                      uint64_t v497 = *(unsigned __int8 *)(v496 + 4);
                      uint64_t v498 = *(unsigned __int16 *)(v496 + 2);
                      if (v498 > v497) {
                        break;
                      }
                    }
                  }
LABEL_1045:
                  v491 += 2;
                  if (v491 == v492) {
                    goto LABEL_1046;
                  }
                }
                uint64_t v499 = *(void *)(v495 + 32);
                uint64_t v500 = v498 - v497;
                unint64_t v501 = (_DWORD *)(v499 + 32 * v497 + 4);
                while (*(v501 - 1) || *v501 != v478 || ((*(v501 - 1) >> 8) & 0xFFF) != v490)
                {
                  v501 += 8;
                  if (!--v500) {
                    goto LABEL_1045;
                  }
                }
              }
              else
              {
LABEL_1046:
                LODWORD(v740) = v478;
                sub_1CB9046D8((uint64_t)&v752, &v740);
              }
            }
            goto LABEL_1000;
          }
          uint64_t v482 = 0;
          uint64_t v233 = *(void *)v713;
          goto LABEL_1022;
        }
LABEL_1051:
        LOWORD(v503) = *(_WORD *)&v727[10];
        if (*(unsigned __int16 *)&v727[10] == 0xFFFF)
        {
          uint64_t v504 = *((unsigned int *)v723 + 10);
          if (v504)
          {
            int v503 = 0;
            unsigned int v505 = (void *)*((void *)v723 + 4);
            uint64_t v506 = 16 * v504;
            while (1)
            {
              unint64_t v507 = *v505 & 0xFFFFFFFFFFFFFFF8;
              if (*(_DWORD *)(v507 + 212) != 1)
              {
                int v508 = 0;
                goto LABEL_1065;
              }
              int v508 = 0;
              uint64_t v509 = *(void *)(v507 + 8);
              uint64_t v510 = *(void *)(v233 + 64);
              unsigned int v511 = **(unsigned __int16 **)(v509 + 16);
              if (v511 > 0x865)
              {
                if (v511 == 4578 || v511 == 4580)
                {
                  int v508 = 1;
                  goto LABEL_1065;
                }
                if (v511 == 2150) {
LABEL_1058:
                }
                  int v508 = *(unsigned char *)(v510 + 338) != 0;
              }
              else
              {
                if (v511 == 1100)
                {
                  int v508 = *(unsigned __int8 *)(v510 + 338);
                  if (*(unsigned char *)(v510 + 338)) {
                    int v508 = *(unsigned __int8 *)(*(void *)(v509 + 32) + 64) == 7;
                  }
                  goto LABEL_1065;
                }
                if (v511 == 2114) {
                  goto LABEL_1058;
                }
              }
LABEL_1065:
              v503 += v508;
              v505 += 2;
              v506 -= 16;
              if (!v506) {
                goto LABEL_1072;
              }
            }
          }
          LOWORD(v503) = 0;
LABEL_1072:
          *(_WORD *)&v727[10] = v503;
        }
        unsigned __int16 v514 = v730;
        int v515 = v730 & 0xBFFF | (v731 << 16);
        unsigned __int16 v730 = v730 & 0xBFFF | ((v752 >> 1 <= (unsigned __int16)v503) << 14);
        unsigned __int8 v731 = BYTE2(v515);
        if (*(_DWORD *)(v233 + 2148) != *(_DWORD *)(v233 + 2152) && (v514 & 0x140) == 0)
        {
          uint64_t v516 = v723;
          if ((*((unsigned char *)v723 + 236) & 1) == 0) {
            llvm::SUnit::ComputeDepth(v723);
          }
          if (*((_DWORD *)v516 + 60) <= 0x1Du && *(void *)(v233 + 1256) == *(void *)(v233 + 1264))
          {
            v730 |= 0x800u;
            uint64_t v526 = *(void *)(v233 + 2136);
            uint64_t v527 = 2144;
            if (v526 == *(void *)(v233 + 2128)) {
              uint64_t v527 = 2148;
            }
            uint64_t v528 = *(unsigned int *)(v233 + v527);
            if (v528)
            {
              uint64_t v529 = 8 * v528;
              v530 = *(unsigned __int16 ***)(v233 + 2136);
              while ((unint64_t)*v530 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v530;
                v529 -= 8;
                if (!v529) {
                  goto LABEL_1079;
                }
              }
            }
            else
            {
              v530 = *(unsigned __int16 ***)(v233 + 2136);
            }
            v612 = (unsigned __int16 **)(v526 + 8 * v528);
            if (v530 != v612)
            {
              uint64_t v427 = *v530;
LABEL_1248:
              if (sub_1CBA7BAFC(v233, v723, (llvm::SUnit *)v427))
              {
                int v613 = v730 & 0xF7FF | (v731 << 16);
                v730 &= ~0x800u;
                unsigned __int8 v731 = BYTE2(v613);
              }
              else
              {
                while (++v530 != v612)
                {
                  uint64_t v427 = *v530;
                  if ((unint64_t)*v530 < 0xFFFFFFFFFFFFFFFELL) {
                    goto LABEL_1248;
                  }
                }
              }
            }
          }
        }
LABEL_1079:
        if ((v752 & 1) == 0) {
          MEMORY[0x1D25D9CD0](v753, 4, v427);
        }
        __int16 v513 = v730;
        if ((v730 & 0x800) == 0)
        {
LABEL_1082:
          uint64_t v517 = *(llvm::SUnit **)(v233 + 688);
          if (v517 && v723 != v517)
          {
            if ((v513 & 4) != 0)
            {
              if ((v513 & 0x100) != 0) {
                goto LABEL_1091;
              }
            }
            else if ((v513 & 0x100) != 0 || *(unsigned char *)(*(void *)(v233 + 64) + 318))
            {
              goto LABEL_1091;
            }
            if (!sub_1CBA7BAFC(v233, v723, v517)) {
              v730 |= 0x800u;
            }
          }
        }
LABEL_1091:
        char v728 = 0;
        if ((*(unsigned char *)(*(void *)(v368 + 16) + 20) & 4) != 0 && !*(unsigned char *)(*(void *)(v233 + 64) + 318))
        {
          uint64_t v518 = v723;
          if (*((_DWORD *)v723 + 51) == 1)
          {
            long long v519 = *(unsigned int **)(v368 + 32);
            unsigned int v520 = *v519;
            if ((*v519 & 0x10000FF) == 0x1000000)
            {
              uint64_t v521 = v368;
              unsigned int v522 = (uint64_t *)*((void *)v723 + 14);
              uint64_t v523 = *v522;
              uint64_t v524 = *((void *)v723 + 3);
              if (v524) {
                goto LABEL_1096;
              }
              if (byte_1EBD06248 && (v531 = *(void *)(v233 + 8), (uint64_t v532 = *(void *)(v531 + 672)) != 0))
              {
                uint64_t v524 = v532 + 24 * *(unsigned __int16 *)(*(void *)(*((void *)v723 + 1) + 16) + 6);
                uint64_t v525 = *v522;
                if ((*(_WORD *)(v524 + 8) & 0x1FFF) == 0x1FFE)
                {
                  do
                  {
                    unsigned int v614 = (*(uint64_t (**)(void))(**(void **)(v531 + 808) + 200))(*(void *)(v531 + 808));
                    uint64_t v615 = *(void *)(v531 + 672);
                  }
                  while ((*(_WORD *)(v615 + 24 * v614 + 8) & 0x1FFF) == 0x1FFE);
                  uint64_t v524 = v615 + 24 * v614;
                  long long v519 = *(unsigned int **)(v521 + 32);
                  uint64_t v525 = *v522;
                }
                *((void *)v518 + 3) = v524;
                unsigned int v520 = *v519;
              }
              else
              {
                uint64_t v524 = 0;
LABEL_1096:
                uint64_t v525 = *v522;
              }
              unsigned int v533 = sub_1CBA7DEF4(*(void *)(v233 + 24), *(void *)(*(void *)(v233 + 48) + 24), v519[1], (v520 >> 8) & 0xFFF);
              if ((v525 & 6) == 0 && *(_DWORD *)((v523 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
              {
                unsigned int v604 = v533;
                uint64_t v605 = *(unsigned __int16 **)(*(void *)((v523 & 0xFFFFFFFFFFFFFFF8) + 8) + 16);
                int v606 = *v605;
                BOOL v607 = (v606 - 9) > 0x3C
                    || ((1 << (v606 - 9)) & 0x1000000000000605) == 0;
                BOOL v608 = !v607 || v606 == 0;
                if (v608 || (v605[4] & 0x10) != 0 || (v605[8])
                  && (~*(unsigned __int16 *)(v524 + 8) & 0x1FFF) != 0
                  && sub_1CBA7DF54(v233, (uint64_t)v723, 1) >= *(_DWORD *)(v233 + 3152)
                                                                          + (*(_WORD *)(v524 + 8) & 0x1FFFu)
                                                                          - 1)
                {
                  if (v604 >= 2) {
                    int v609 = 2;
                  }
                  else {
                    int v609 = v604;
                  }
                  BOOL v610 = v609 != 1;
                  char v728 = 1;
                  if (sub_1CBA7E604(v233, v523 & 0xFFFFFFFFFFFFFFF8)) {
                    char v611 = 0;
                  }
                  else {
                    char v611 = 2;
                  }
                  v728 |= (4 * v610) | v611;
                }
              }
            }
          }
        }
        uint64_t v534 = *(void *)(v233 + 8);
        uint64_t v535 = *(void *)(v534 + 2720);
        uint64_t v536 = *(void *)(v535 + 8);
        uint64_t v537 = *((unsigned int *)v723 + 48);
        if (v536 == *(void *)(v535 + 16)) {
          unsigned int v538 = 0;
        }
        else {
          unsigned int v538 = *(_DWORD *)(v536 + 8 * v537 + 4);
        }
        unsigned int v539 = *(_DWORD *)(v536 + 8 * v537);
        char v540 = v730;
        __int16 v541 = ((*(void *)(*(void *)(v534 + 2728) + 8 * (v538 >> 6)) >> v538) & 1) << 15;
        int v542 = v730 & 0x7FFF | (v731 << 16);
        unsigned __int8 v731 = BYTE2(v542);
        unsigned __int16 v730 = v542 | v541;
        if (v539 >= *(_DWORD *)(v535 + 4)) {
          __int16 v543 = v541;
        }
        else {
          __int16 v543 = 0x8000;
        }
        if ((v540 & 4) != 0) {
          __int16 v543 = 0;
        }
        unsigned __int8 v731 = BYTE2(v542);
        unsigned __int16 v730 = v543 | v542;
        BOOL v544 = sub_1CBA7D95C((uint64_t)v723, *(void *)(v233 + 680));
        int v545 = v730 | (v731 << 16);
        if (v544) {
          int v546 = 0x10000;
        }
        else {
          int v546 = 0;
        }
        unsigned int v547 = v545 & 0xFFFEFFFF | v546;
        unsigned int v548 = HIWORD(v547);
        unsigned __int8 v731 = BYTE2(v547);
        if (v723 && (uint64_t v549 = *(void *)(v233 + 120)) != 0)
        {
          uint64_t v550 = *(void *)(v233 + 48);
          uint64_t v551 = *((void *)v723 + 1);
          if ((*(unsigned char *)(*(void *)(v551 + 16) + 16) & 0x10) != 0
            && (uint64_t v552 = *(void *)(v549 + 8), (*(void *)(*(void *)(v552 + 16) + 16) & 2) != 0)
            && ((uint64_t v553 = *(unsigned int *)(*(void *)(v551 + 32) + 4), (v553 & 0x80000000) == 0)
              ? (int v554 = (uint64_t *)(*(void *)(v550 + 272) + 8 * v553))
              : (int v554 = (uint64_t *)(*(void *)(v550 + 24) + 16 * (v553 & 0x7FFFFFFF) + 8)),
                (uint64_t v555 = *v554) != 0))
          {
            while ((*(unsigned char *)(v555 + 3) & 1) != 0)
            {
              uint64_t v555 = *(void *)(v555 + 24);
              if (!v555) {
                goto LABEL_1129;
              }
            }
            uint64_t v559 = *(void *)(v555 + 8);
            if (v559 != v552)
            {
              while (1)
              {
                uint64_t v555 = *(void *)(v555 + 24);
                if (!v555) {
                  break;
                }
                if ((*(unsigned char *)(v555 + 3) & 1) == 0)
                {
                  uint64_t v560 = *(void *)(v555 + 8);
                  if (v560 != v559)
                  {
                    int v556 = 4096;
                    uint64_t v559 = *(void *)(v555 + 8);
                    if (v560 == v552) {
                      goto LABEL_1139;
                    }
                  }
                }
              }
LABEL_1129:
              int v556 = 0;
              goto LABEL_1139;
            }
            int v556 = 4096;
LABEL_1139:
            unsigned int v558 = v556 | v547 & 0xFFFFEFFF;
          }
          else
          {
            unsigned int v558 = v547 & 0xFFFFEFFF;
          }
          unsigned __int8 v731 = v548;
          unsigned __int16 v730 = v558;
          if (*(void *)(v233 + 1032) == *(void *)(v233 + 1040)
            && *(void *)(v233 + 1088) == *(void *)(v233 + 1096))
          {
            goto LABEL_1158;
          }
          uint64_t v561 = *((void *)v723 + 1);
          uint64_t v562 = *(void *)(v549 + 8);
          unint64_t v563 = *(unsigned __int16 **)(v561 + 16);
          int v564 = *v563;
          BOOL v565 = (v564 - 9) > 0x3C || ((1 << (v564 - 9)) & 0x1000000000000605) == 0;
          BOOL v566 = !v565 || v564 == 0;
          if (v566 || (v563[4] & 0x10) != 0 || (v563[8])
            && **(unsigned __int16 **)(v562 + 16) - 4581 <= 0xB
            && ((uint64_t v567 = *(unsigned int *)(*(void *)(v561 + 32) + 4), (v567 & 0x80000000) != 0)
              ? (v568 = (uint64_t *)(*(void *)(v550 + 24) + 16 * (v567 & 0x7FFFFFFF) + 8))
              : (v568 = (uint64_t *)(*(void *)(v550 + 272) + 8 * v567)),
                (uint64_t v569 = *v568) != 0))
          {
            while ((*(unsigned char *)(v569 + 3) & 1) != 0)
            {
              uint64_t v569 = *(void *)(v569 + 24);
              if (!v569) {
                goto LABEL_1158;
              }
            }
            uint64_t v602 = *(void *)(v569 + 8);
            if (v602 != v562)
            {
              while (1)
              {
                uint64_t v569 = *(void *)(v569 + 24);
                if (!v569) {
                  goto LABEL_1158;
                }
                if ((*(unsigned char *)(v569 + 3) & 1) == 0)
                {
                  uint64_t v603 = *(void *)(v569 + 8);
                  if (v603 != v602)
                  {
                    __int16 v557 = 0x2000;
                    uint64_t v602 = *(void *)(v569 + 8);
                    if (v603 == v562) {
                      goto LABEL_1159;
                    }
                  }
                }
              }
            }
            __int16 v557 = 0x2000;
          }
          else
          {
LABEL_1158:
            __int16 v557 = 0;
          }
        }
        else
        {
          __int16 v557 = 0;
          unsigned int v558 = v547 & 0xFFFFEFFF;
        }
LABEL_1159:
        unsigned __int8 v731 = BYTE2(v558);
        unsigned __int16 v730 = v557 | v558 & 0xDFFF;
        if ((v545 & 0x20) != 0 && (*(_DWORD *)(v233 + 3212) & 0x80000000) != 0)
        {
          *(_DWORD *)(v233 + 3212) = 0;
          for (uint64_t j = *(uint64_t ***)(v233 + 2304); j; uint64_t j = (uint64_t **)*j)
          {
            unint64_t v577 = j[3];
            if ((*((unsigned char *)v577 + 236) & 1) == 0) {
              llvm::SUnit::ComputeDepth((llvm::SUnit *)j[3]);
            }
            int v578 = *((_DWORD *)v577 + 60);
            int v579 = *((unsigned __int16 *)v577 + 113);
            int v580 = v723;
            if ((*((unsigned char *)v723 + 236) & 1) == 0) {
              llvm::SUnit::ComputeDepth(v723);
            }
            if (*((_DWORD *)v580 + 60) >= v578 + ((3 * v579) >> 1))
            {
              int v583 = 0;
            }
            else
            {
              v581 = v723;
              if ((*((unsigned char *)v723 + 236) & 1) == 0) {
                llvm::SUnit::ComputeDepth(v723);
              }
              unsigned int v582 = *((_DWORD *)v581 + 60);
              if ((*((unsigned char *)v577 + 236) & 1) == 0) {
                llvm::SUnit::ComputeDepth((llvm::SUnit *)v577);
              }
              int v583 = v582 > *((_DWORD *)v577 + 60);
            }
            *(_DWORD *)(v233 + 3212) += v583;
          }
          v584 = *(llvm::SUnit ***)(v233 + 1088);
          v585 = *(llvm::SUnit ***)(v233 + 1096);
          while (v584 != v585)
          {
            v586 = *v584;
            if ((*(unsigned char *)(*(void *)(*((void *)*v584 + 1) + 16) + 16) & 2) != 0)
            {
              if ((*((unsigned char *)v586 + 236) & 1) == 0) {
                llvm::SUnit::ComputeDepth(*v584);
              }
              int v587 = *((_DWORD *)v586 + 60);
              int v588 = *((unsigned __int16 *)v586 + 113);
              v589 = v723;
              if ((*((unsigned char *)v723 + 236) & 1) == 0) {
                llvm::SUnit::ComputeDepth(v723);
              }
              if (*((_DWORD *)v589 + 60) >= v587 + ((3 * v588) >> 1))
              {
                int v592 = 0;
              }
              else
              {
                v590 = v723;
                if ((*((unsigned char *)v723 + 236) & 1) == 0) {
                  llvm::SUnit::ComputeDepth(v723);
                }
                unsigned int v591 = *((_DWORD *)v590 + 60);
                if ((*((unsigned char *)v586 + 236) & 1) == 0) {
                  llvm::SUnit::ComputeDepth(v586);
                }
                int v592 = v591 > *((_DWORD *)v586 + 60);
              }
              *(_DWORD *)(v233 + 3212) += v592;
            }
            ++v584;
          }
        }
        if ((v730 & 2) != 0)
        {
          uint64_t v570 = *(void *)(v233 + 1344);
          uint64_t v571 = *(void *)(v233 + 1336);
          if (v570 == v571)
          {
            uint64_t v572 = *v714;
            v573 = (llvm::SUnit **)(v570 + 8 * v572);
            if (v572)
            {
              uint64_t v574 = 0;
              uint64_t v575 = 8 * v572;
              while (*(llvm::SUnit **)(v570 + v574) != v723)
              {
                v574 += 8;
                if (v575 == v574) {
                  goto LABEL_1209;
                }
              }
              v573 = (llvm::SUnit **)(v570 + v574);
            }
LABEL_1209:
            uint64_t v571 = *(void *)(v233 + 1344);
          }
          else
          {
            uint64_t v593 = *v712;
            int v594 = v593 - 1;
            unsigned int v595 = (v593 - 1) & ((v723 >> 4) ^ (v723 >> 9));
            v573 = (llvm::SUnit **)(v570 + 8 * v595);
            v596 = *v573;
            if (*v573 == (llvm::SUnit *)-1)
            {
              v597 = 0;
LABEL_1221:
              if (v597) {
                v573 = v597;
              }
              if (*v573 != v723) {
                v573 = (llvm::SUnit **)(v570 + 8 * v593);
              }
            }
            else
            {
              v597 = 0;
              int v598 = 1;
              while (v596 != v723)
              {
                if (v597) {
                  BOOL v599 = 0;
                }
                else {
                  BOOL v599 = v596 == (llvm::SUnit *)-2;
                }
                if (v599) {
                  v597 = v573;
                }
                unsigned int v600 = v595 + v598++;
                unsigned int v595 = v600 & v594;
                v573 = (llvm::SUnit **)(v570 + 8 * (v600 & v594));
                v596 = *v573;
                if (*v573 == (llvm::SUnit *)-1) {
                  goto LABEL_1221;
                }
              }
            }
          }
          BOOL v26 = v570 == v571;
          int v601 = v714;
          if (!v26) {
            int v601 = v712;
          }
          unsigned __int8 v731 = ((v730 | (v731 << 16)) & 0xFFFDFFFF | ((v573 != (llvm::SUnit **)(v570 + 8 * *v601)) << 17)) >> 16;
        }
        sub_1CBA7BFB4(v233, (uint64_t)v719, (uint64_t)&v722);
        int v364 = (llvm::SUnit **)((char *)v721 + 8);
        unint64_t v365 = v716;
        continue;
      }
      break;
    }
    uint64_t v616 = v710;
    if ((&v732)[7 * v710 + 1])
    {
      v736[56 * v710 + 15] = 29;
      HIBYTE(v749) = 29;
      sub_1CBA7BFB4(v233, (uint64_t)&v743, (uint64_t)v719);
      uint64_t v616 = v710;
    }
    uint64_t v362 = v616 + 1;
    if (v362 != 9) {
      continue;
    }
    break;
  }
  if (!v738) {
    goto LABEL_1343;
  }
  uint64_t v617 = *(void *)(v233 + 120);
  if (v617)
  {
    v618 = *(unsigned __int16 **)(*(void *)(v617 + 8) + 16);
    int v619 = *v618;
    BOOL v621 = (v619 - 9) <= 0x3C && ((1 << (v619 - 9)) & 0x1000000000000605) != 0
        || v619 == 0;
    if (v621 || (v618[4] & 0x10) != 0 || (v618[8] & 1) != 0)
    {
      BOOL v622 = (v618[8] & 8) != 0 && sub_1CBA7D51C(v233, (uint64_t)&v737) == 0;
      *(unsigned char *)(v233 + 3262) |= v622;
      if (!*(_DWORD *)(v233 + 3208) && !*(unsigned char *)(v233 + 3260)) {
LABEL_1289:
      }
        *(unsigned char *)(v233 + 3262) = 1;
    }
  }
  else
  {
    uint64_t v623 = *(void *)(*(void *)(v738 + 8) + 24);
    if (*(void *)(v623 + 64) == *(void *)(v623 + 72)) {
      goto LABEL_1290;
    }
    uint64_t FirstInstrTerminator = llvm::MachineBasicBlock::getFirstInstrTerminator(*(llvm::MachineBasicBlock **)(*(void *)(v738 + 8) + 24));
    if (v623 + 48 == FirstInstrTerminator) {
      goto LABEL_1290;
    }
    uint64_t v625 = *(void *)(FirstInstrTerminator + 16);
    uint64_t v626 = *(void *)(v625 + 8);
    if ((*(_WORD *)(FirstInstrTerminator + 44) & 0xC) != 0 && (*(_WORD *)(FirstInstrTerminator + 44) & 4) == 0)
    {
      if ((v626 & 0x400) == 0)
      {
        uint64_t v704 = FirstInstrTerminator;
        uint64_t v233 = *(void *)v713;
        while ((*(_WORD *)(v704 + 44) & 8) != 0)
        {
          uint64_t v704 = *(void *)(v704 + 8);
          if ((*(unsigned char *)(*(void *)(v704 + 16) + 9) & 4) != 0) {
            goto LABEL_1443;
          }
        }
        goto LABEL_1290;
      }
LABEL_1443:
      uint64_t v233 = *(void *)v713;
      if ((v626 & 0x100) != 0) {
        goto LABEL_1290;
      }
      uint64_t v705 = FirstInstrTerminator;
      uint64_t v233 = *(void *)v713;
      while ((*(_WORD *)(v705 + 44) & 8) != 0)
      {
        uint64_t v705 = *(void *)(v705 + 8);
        if (*(unsigned char *)(*(void *)(v705 + 16) + 9)) {
          goto LABEL_1290;
        }
      }
      uint64_t v233 = *(void *)v713;
      if ((v626 & 0x800) != 0) {
        goto LABEL_1290;
      }
      while ((*(_WORD *)(FirstInstrTerminator + 44) & 8) != 0)
      {
        uint64_t FirstInstrTerminator = *(void *)(FirstInstrTerminator + 8);
        if ((*(unsigned char *)(*(void *)(FirstInstrTerminator + 16) + 9) & 8) != 0) {
          goto LABEL_1290;
        }
      }
    }
    else if ((*(void *)(v625 + 8) & 0xD00) != 0x400)
    {
      goto LABEL_1290;
    }
    if ((*(unsigned char *)(v625 + 16) & 8) != 0) {
      goto LABEL_1289;
    }
  }
LABEL_1290:
  if (v744)
  {
    uint64_t v628 = *(unsigned __int16 **)(*(void *)(v744 + 8) + 16);
    int v629 = *v628;
    BOOL v630 = (v629 - 9) > 0x3C || ((1 << (v629 - 9)) & 0x1000000000000605) == 0;
    BOOL v631 = !v630 || v629 == 0;
    if (!v631 && (v628[4] & 0x10) == 0 && (v628[8] & 1) == 0)
    {
      if (v750) {
        goto LABEL_1342;
      }
LABEL_1341:
      *(unsigned char *)(v233 + 3262) = 1;
      goto LABEL_1342;
    }
  }
  if (v708 < v707 && (int)v708 >= v706) {
    goto LABEL_1342;
  }
  int v632 = *(unsigned __int8 *)(v233 + 3260);
  int v633 = 4;
  if (!*(unsigned char *)(v233 + 3260))
  {
    if (*(int *)(v233 + 3208) >= 4) {
      int v633 = 4;
    }
    else {
      int v633 = *(_DWORD *)(v233 + 3208);
    }
    if (!v744) {
      goto LABEL_1329;
    }
LABEL_1306:
    LOWORD(v634) = *(_WORD *)&v748[10];
    if (*(unsigned __int16 *)&v748[10] == 0xFFFF)
    {
      uint64_t v635 = *(unsigned int *)(v744 + 40);
      if (v635)
      {
        uint64_t v634 = 0;
        int v636 = *(void **)(v744 + 32);
        uint64_t v637 = 16 * v635;
        while (1)
        {
          unint64_t v638 = *v636 & 0xFFFFFFFFFFFFFFF8;
          if (*(_DWORD *)(v638 + 212) != 1)
          {
            unsigned int v639 = 0;
            goto LABEL_1320;
          }
          unsigned int v639 = 0;
          uint64_t v640 = *(void *)(v638 + 8);
          uint64_t v641 = *(void *)(v233 + 64);
          unsigned int v642 = **(unsigned __int16 **)(v640 + 16);
          if (v642 > 0x865)
          {
            if (v642 == 4578 || v642 == 4580)
            {
              unsigned int v639 = 1;
              goto LABEL_1320;
            }
            if (v642 == 2150) {
LABEL_1313:
            }
              unsigned int v639 = *(unsigned char *)(v641 + 338) != 0;
          }
          else
          {
            if (v642 == 1100)
            {
              unsigned int v639 = *(unsigned __int8 *)(v641 + 338);
              if (*(unsigned char *)(v641 + 338)) {
                unsigned int v639 = *(unsigned __int8 *)(*(void *)(v640 + 32) + 64) == 7;
              }
              goto LABEL_1320;
            }
            if (v642 == 2114) {
              goto LABEL_1313;
            }
          }
LABEL_1320:
          v634 += v639;
          v636 += 2;
          v637 -= 16;
          if (!v637) {
            goto LABEL_1331;
          }
        }
      }
      LOWORD(v634) = 0;
LABEL_1331:
      *(_WORD *)&v748[10] = v634;
    }
    LODWORD(v634) = (unsigned __int16)v634;
    goto LABEL_1333;
  }
  if (v744) {
    goto LABEL_1306;
  }
LABEL_1329:
  LODWORD(v634) = 0;
LABEL_1333:
  int v644 = v634 - 1;
  if (!v634) {
    int v644 = 0;
  }
  int v645 = v633 - v644;
  int v646 = v708 - v634;
  if (v645 < v646) {
    int v646 = v645;
  }
  if (v632) {
    int v647 = v645;
  }
  else {
    int v647 = v646;
  }
  if (v647 <= (int)((*(void *)(v233 + 928) - *(void *)(v233 + 920)) >> 3)) {
    goto LABEL_1341;
  }
LABEL_1342:
  char v739 = 29;
  HIBYTE(v749) = 29;
  sub_1CBA7BFB4(v233, (uint64_t)&v743, (uint64_t)&v737);
LABEL_1343:
  uint64_t v648 = v744;
  uint64_t v649 = sub_1CBA7D738(v233, *(void *)(v744 + 8));
  uint64_t v650 = v649;
  if (v649 == v233 + 888)
  {
    int v752 = &v754;
    int v753 = (void *)0x400000000;
    char v660 = *(char **)(v649 + 32);
    v659 = *(char **)(v649 + 40);
    uint64_t v661 = v659 - v660;
    if (v659 == v660)
    {
      *(void *)(v233 + 928) = *(void *)(v233 + 920);
      *(_DWORD *)(v648 + 196) &= ~2u;
    }
    else
    {
      unsigned int v662 = 0;
      uint64_t v663 = 8 * (v661 >> 3);
      do
      {
        if (v662 >= HIDWORD(v753)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v752 + v662) = *(void *)v660;
        unsigned int v662 = v753 + 1;
        LODWORD(v753) = v753 + 1;
        v660 += 8;
        v663 -= 8;
      }
      while (v663);
      uint64_t v670 = (uint64_t *)v752;
      *(void *)(v233 + 928) = *(void *)(v233 + 920);
      if (v662)
      {
        uint64_t v671 = &v670[v662];
        do
        {
          uint64_t v672 = *v670;
          if (*v670 != v744)
          {
            uint64_t v674 = *(uint64_t **)(v650 + 40);
            unint64_t v673 = *(void *)(v650 + 48);
            if ((unint64_t)v674 >= v673)
            {
              v676 = *(void **)(v650 + 32);
              uint64_t v677 = v674 - v676;
              unint64_t v678 = v677 + 1;
              if ((unint64_t)(v677 + 1) >> 61) {
                abort();
              }
              uint64_t v679 = v673 - (void)v676;
              if (v679 >> 2 > v678) {
                unint64_t v678 = v679 >> 2;
              }
              if ((unint64_t)v679 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v680 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v680 = v678;
              }
              if (v680)
              {
                if (v680 >> 61) {
                  sub_1CB833614();
                }
                v681 = (char *)operator new(8 * v680);
              }
              else
              {
                v681 = 0;
              }
              unint64_t v682 = &v681[8 * v677];
              *(void *)unint64_t v682 = v672;
              v675 = v682 + 8;
              if (v674 != v676)
              {
                do
                {
                  uint64_t v683 = *--v674;
                  *((void *)v682 - 1) = v683;
                  v682 -= 8;
                }
                while (v674 != v676);
                uint64_t v674 = *(uint64_t **)(v650 + 32);
              }
              *(void *)(v650 + 32) = v682;
              *(void *)(v650 + 40) = v675;
              *(void *)(v650 + 48) = &v681[8 * v680];
              if (v674) {
                operator delete(v674);
              }
              uint64_t v233 = *(void *)v713;
            }
            else
            {
              *uint64_t v674 = v672;
              v675 = v674 + 1;
            }
            *(void *)(v650 + 40) = v675;
            *(_DWORD *)(v672 + 196) |= *(_DWORD *)v650;
          }
          ++v670;
        }
        while (v670 != v671);
        uint64_t v670 = (uint64_t *)v752;
      }
      *(_DWORD *)(v744 + 196) &= ~2u;
      if (v670 != &v754) {
        free(v670);
      }
    }
  }
  else
  {
    char v651 = v743;
    *(_DWORD *)(*(void *)v743 + 196) &= ~*(_DWORD *)v649;
    *char v651 = *(void *)(*(void *)(v649 + 40) - 8);
    *(void *)(v649 + 40) -= 8;
  }
  if ((v750 & 2) != 0)
  {
    *(int32x2_t *)(v233 + 3180) = vadd_s32(*(int32x2_t *)(v233 + 3180), (int32x2_t)0x100000001);
  }
  else
  {
    if ((v750 & 4) == 0)
    {
      *(void *)(v233 + 3180) = 0;
      uint64_t v652 = v744;
      uint64_t v653 = *(void *)(v233 + 1848);
      uint64_t v654 = *(void *)(v233 + 1840);
      if (v653 == v654)
      {
        uint64_t v655 = *(unsigned int *)(v233 + 1860);
        uint64_t v656 = (void *)(v653 + 8 * v655);
        if (v655)
        {
          uint64_t v657 = 0;
          uint64_t v658 = 8 * v655;
          while (*(void *)(v653 + v657) != v744)
          {
            v657 += 8;
            if (v658 == v657) {
              goto LABEL_1411;
            }
          }
          uint64_t v656 = (void *)(v653 + v657);
        }
LABEL_1411:
        uint64_t v654 = *(void *)(v233 + 1848);
      }
      else
      {
        uint64_t v684 = *(unsigned int *)(v233 + 1856);
        int v685 = v684 - 1;
        unsigned int v686 = (v684 - 1) & ((v744 >> 4) ^ (v744 >> 9));
        uint64_t v656 = (void *)(v653 + 8 * v686);
        uint64_t v687 = *v656;
        if (*v656 == -1)
        {
          unsigned int v688 = 0;
LABEL_1427:
          if (v688) {
            uint64_t v656 = v688;
          }
          if (*v656 != v744) {
            uint64_t v656 = (void *)(v653 + 8 * v684);
          }
        }
        else
        {
          unsigned int v688 = 0;
          int v689 = 1;
          while (v687 != v744)
          {
            if (v688) {
              BOOL v690 = 0;
            }
            else {
              BOOL v690 = v687 == -2;
            }
            if (v690) {
              unsigned int v688 = v656;
            }
            unsigned int v691 = v686 + v689++;
            unsigned int v686 = v691 & v685;
            uint64_t v656 = (void *)(v653 + 8 * (v691 & v685));
            uint64_t v687 = *v656;
            if (*v656 == -1) {
              goto LABEL_1427;
            }
          }
        }
      }
      BOOL v26 = v653 == v654;
      uint64_t v692 = 1856;
      if (v26) {
        uint64_t v692 = 1860;
      }
      if (v656 != (void *)(v653 + 8 * *(unsigned int *)(v233 + v692)))
      {
        *uint64_t v656 = -2;
        ++*(_DWORD *)(v233 + 1864);
        uint64_t v652 = v744;
      }
      uint64_t v693 = *(void *)(v652 + 24);
      if (!v693)
      {
        uint64_t v694 = *(void *)(v233 + 8);
        uint64_t v693 = *(void *)(v694 + 672) + 24 * *(unsigned __int16 *)(*(void *)(*(void *)(v652 + 8) + 16) + 6);
        uint64_t v695 = v652;
        if ((*(_WORD *)(v693 + 8) & 0x1FFF) == 0x1FFE)
        {
          do
          {
            unsigned int v702 = (*(uint64_t (**)(void))(**(void **)(v694 + 808) + 200))(*(void *)(v694 + 808));
            uint64_t v703 = *(void *)(v694 + 672);
          }
          while ((*(_WORD *)(v703 + 24 * v702 + 8) & 0x1FFF) == 0x1FFE);
          uint64_t v693 = v703 + 24 * v702;
          uint64_t v695 = v744;
        }
        *(void *)(v652 + 24) = v693;
        uint64_t v652 = v695;
      }
      __int16 v696 = *(_WORD *)(v693 + 8);
      int v697 = v696 & 0x1FFF;
      if ((v696 & 0x1FFE) != 0) {
        int v698 = v696 & 0x1FFF;
      }
      else {
        int v698 = 1;
      }
      if (v697 == 0x1FFF) {
        int v698 = 1;
      }
      *(_DWORD *)(v233 + 3188) += v698;
      if ((*(unsigned char *)(*(void *)(*(void *)(v652 + 8) + 16) + 20) & 0x10) != 0)
      {
        v699.i32[1] = 1;
        v699.i32[0] = *(unsigned __int16 *)(v652 + 226);
        *(int32x2_t *)(v233 + 3192) = vadd_s32(*(int32x2_t *)(v233 + 3192), v699);
      }
      goto LABEL_1362;
    }
    ++*(_DWORD *)(v233 + 3184);
  }
  *(_DWORD *)(v233 + 3188) = 0;
  *(void *)(v233 + 3192) = 0;
LABEL_1362:
  uint64_t v664 = v744;
  if ((*(unsigned char *)(*(void *)(*(void *)(v744 + 8) + 16) + 16) & 8) != 0) {
    --*(_DWORD *)(v233 + 3208);
  }
  if (v664 == *(void *)(v233 + 688)) {
    *(void *)(v233 + 688) = 0;
  }
  int v665 = *(_DWORD *)(v233 + 3152) + sub_1CBA7D51C(v233, (uint64_t)&v743);
  *(_DWORD *)(v233 + 3152) = v665;
  uint64_t v666 = v744;
  uint64_t v667 = *(void *)(v744 + 24);
  if (!v667)
  {
    uint64_t v668 = *(void *)(v233 + 8);
    uint64_t v667 = *(void *)(v668 + 672) + 24 * *(unsigned __int16 *)(*(void *)(*(void *)(v744 + 8) + 16) + 6);
    if ((*(_WORD *)(v667 + 8) & 0x1FFF) == 0x1FFE)
    {
      do
      {
        unsigned int v700 = (*(uint64_t (**)(void))(**(void **)(v668 + 808) + 200))(*(void *)(v668 + 808));
        uint64_t v701 = *(void *)(v668 + 672);
      }
      while ((*(_WORD *)(v701 + 24 * v700 + 8) & 0x1FFF) == 0x1FFE);
      uint64_t v667 = v701 + 24 * v700;
      int v665 = *(_DWORD *)(v233 + 3152);
    }
    *(void *)(v666 + 24) = v667;
  }
  int v669 = *(_WORD *)(v667 + 8) & 0x1FFF;
  if (v669 != 0x1FFF)
  {
    int v665 = v665 + v669 - 1;
    *(_DWORD *)(v233 + 3152) = v665;
  }
  uint64_t result = v744;
  *(_DWORD *)(v744 + 252) = v665;
  return result;
}

void sub_1CBA7A108(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(_WORD **)(a2 + 24);
  uint64_t v118 = a2;
  if (!v3)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a2 + 8);
    uint64_t v6 = *(unsigned __int16 *)(*(void *)(v5 + 16) + 6);
    uint64_t v3 = (_WORD *)(*(void *)(v4 + 672) + 24 * v6);
    if ((v3[4] & 0x1FFF) == 0x1FFE)
    {
      do
      {
        uint64_t v111 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 808) + 200))(*(void *)(v4 + 808), v6, v5, v4 + 632);
        uint64_t v6 = v111;
        uint64_t v112 = *(void *)(v4 + 672);
      }
      while ((*(_WORD *)(v112 + 24 * v111 + 8) & 0x1FFF) == 0x1FFE);
      uint64_t v3 = (_WORD *)(v112 + 24 * v111);
      a2 = v118;
    }
    *(void *)(a2 + 24) = v3;
  }
  if (v3[6])
  {
    uint64_t v7 = *(void *)(a1 + 16);
    float v8 = (unsigned __int16 *)(*(void *)(*(void *)(v7 + 176) + 136) + 4 * (unsigned __int16)v3[5]);
    int v9 = &v8[2 * (unsigned __int16)v3[6]];
    uint64_t v10 = *(void *)(v7 + 32);
    uint64_t v11 = *(void *)(a1 + 1600);
    uint64_t v117 = *(void *)(a2 + 8);
    unsigned int v12 = *(unsigned __int16 **)(v117 + 16);
    do
    {
      uint64_t v13 = *v8;
      uint64_t v14 = *(unsigned int *)(v10 + 32 * v13 + 8);
      if (v14)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = (uint64_t *)(a1 + 1680);
        do
        {
          uint64_t v18 = *v17;
          v17 += 10;
          if (*(unsigned int *)(v18 + 4 * v13) < (unint64_t)*(unsigned int *)(*(void *)(a1 + 80 * v16 + 1680)
                                                                                    + 4 * v13))
            uint64_t v16 = v15;
          ++v15;
        }
        while (v14 != v15);
      }
      else
      {
        uint64_t v16 = 0;
      }
      int v19 = v8[1];
      *(_DWORD *)(*(void *)(a1 + 80 * v16 + 1680) + 4 * v13) = *(_DWORD *)(a1 + 3152);
      *(_DWORD *)(v11 + 4 * v13) -= sub_1CBA7B134(a1, v13, v12) * v19;
      if (*(_DWORD *)(a1 + 3156) == v13)
      {
        uint64_t v20 = *(unsigned int *)(v7 + 48);
        if (v20)
        {
          uint64_t v21 = 0;
          int v22 = *(_DWORD *)(v7 + 276);
          do
          {
            if (*(_DWORD *)(v11 + 4 * v21) - *(_DWORD *)(v11 + 4 * v13) >= v22)
            {
              *(_DWORD *)(a1 + 3156) = v21;
              LODWORD(v13) = v21;
            }
            ++v21;
          }
          while (v20 != v21);
        }
      }
      v8 += 2;
    }
    while (v8 != v9);
    uint64_t v23 = (void *)v117;
  }
  else
  {
    uint64_t v23 = *(void **)(a2 + 8);
  }
  size_t v24 = (unsigned __int16 *)v23[2];
  uint64_t v25 = *((void *)v24 + 2);
  int v26 = *v24;
  unsigned int v27 = v26 - 9;
  BOOL v29 = (v26 - 9) <= 0x3C && ((1 << (v26 - 9)) & 0x1000000000000605) != 0 || v26 == 0;
  BOOL v30 = !v29 && (v24[4] & 0x10) == 0 && (*((void *)v24 + 2) & 1) == 0;
  *(unsigned char *)(a1 + 3248) = !v30;
  if ((sub_1CBA7D8B4((uint64_t)v23) & 1) == 0)
  {
    int v31 = 0;
    uint64_t v32 = *(void *)(a1 + 64);
    if (v26 > 2149)
    {
      if (v26 == 4578 || v26 == 4580)
      {
        int v31 = 1;
        goto LABEL_42;
      }
      if (v26 == 2150) {
        goto LABEL_36;
      }
    }
    else if (v26 == 1100)
    {
      if (*(unsigned char *)(v32 + 338)) {
        int v31 = *(unsigned __int8 *)(v23[4] + 64) == 7;
      }
      else {
        int v31 = 0;
      }
    }
    else if (v26 == 2114)
    {
LABEL_36:
      int v31 = *(unsigned __int8 *)(v32 + 338) != 0;
    }
LABEL_42:
    uint64_t v34 = v25 & 0xE00;
    if ((v25 & 0xD00) == 0x900 || v34 == 2560)
    {
      BOOL v35 = v27 > 0x3C || ((1 << v27) & 0x1000000000000605) == 0;
      int v36 = 1;
      if (v35 && v26 != 0)
      {
        if ((v24[4] & 0x10) != 0) {
          int v36 = 1;
        }
        else {
          int v36 = v25 & 1;
        }
      }
      v31 |= v36;
    }
    uint64_t v38 = *(void *)(a1 + 120);
    if (v38)
    {
      if (v31 && (*(unsigned char *)(*(void *)(*(void *)(v38 + 8) + 16) + 16) & 8) != 0) {
        goto LABEL_66;
      }
    }
    else
    {
      unsigned int v39 = (llvm::MachineBasicBlock *)v23[3];
      uint64_t FirstInstrTerminator = llvm::MachineBasicBlock::getFirstInstrTerminator(v39);
      if (v31
        && *((void *)v39 + 8) != *((void *)v39 + 9)
        && (llvm::MachineBasicBlock *)((char *)v39 + 48) != (llvm::MachineBasicBlock *)FirstInstrTerminator)
      {
        __int16 v41 = *(_WORD *)(FirstInstrTerminator + 44);
        uint64_t v42 = *(void *)(*(void *)(FirstInstrTerminator + 16) + 8);
        if ((v41 & 0xC) != 0 && (v41 & 4) == 0)
        {
          uint64_t v114 = v23;
          if ((v42 & 0x400) != 0)
          {
LABEL_209:
            uint64_t v23 = v114;
            if ((v42 & 0x100) == 0)
            {
              uint64_t v116 = FirstInstrTerminator;
              while ((*(_WORD *)(v116 + 44) & 8) != 0)
              {
                uint64_t v116 = *(void *)(v116 + 8);
                uint64_t v23 = v114;
                if (*(unsigned char *)(*(void *)(v116 + 16) + 9)) {
                  goto LABEL_65;
                }
              }
              uint64_t v23 = v114;
              if ((v42 & 0x800) == 0)
              {
                while ((*(_WORD *)(FirstInstrTerminator + 44) & 8) != 0)
                {
                  uint64_t FirstInstrTerminator = *(void *)(FirstInstrTerminator + 8);
                  if ((*(unsigned char *)(*(void *)(FirstInstrTerminator + 16) + 9) & 8) != 0) {
                    goto LABEL_65;
                  }
                }
                goto LABEL_66;
              }
            }
          }
          else
          {
            uint64_t v115 = FirstInstrTerminator;
            while (1)
            {
              uint64_t v23 = v114;
              if ((*(_WORD *)(v115 + 44) & 8) == 0) {
                break;
              }
              uint64_t v115 = *(void *)(v115 + 8);
              if ((*(unsigned char *)(*(void *)(v115 + 16) + 9) & 4) != 0) {
                goto LABEL_209;
              }
            }
          }
        }
        else if ((*(void *)(*(void *)(FirstInstrTerminator + 16) + 8) & 0xD00) == 0x400)
        {
          goto LABEL_66;
        }
      }
    }
LABEL_65:
    ++*(_DWORD *)(a1 + 3152);
LABEL_66:
    if (v34 == 1536 || (v25 & 2) != 0 || (v25 & 0xD00) == 0x500) {
      *(void *)(a1 + 680) = v118;
    }
    int v43 = (unsigned __int16 *)v23[2];
    int v44 = *v43;
    BOOL v46 = (v44 - 9) <= 0x3C && ((1 << (v44 - 9)) & 0x1000000000000605) != 0
       || v44 == 0;
    if (!v46 && (v43[4] & 0x10) == 0 && (v43[8] & 1) == 0)
    {
      unsigned int v47 = *(_DWORD *)(a1 + 144);
      *(unsigned char *)(a1 + 3260) = 0;
      *(_DWORD *)(a1 + 3176) = 0;
      if (v47 <= 1 && !*(_DWORD *)(a1 + 148)) {
        goto LABEL_85;
      }
      if (v47)
      {
        uint64_t v48 = (void *)(a1 + 152);
        size_t v49 = 256;
      }
      else
      {
        unsigned int v113 = (2 * v47) & 0xFFFFFFFC;
        uint64_t v50 = *(unsigned int *)(a1 + 160);
        if (v113 < v50 && v50 >= 0x41)
        {
          sub_1CD4140C0((unsigned int *)(a1 + 144));
          goto LABEL_85;
        }
        if (!v50)
        {
LABEL_84:
          *(_DWORD *)(a1 + 144) = v50;
          *(_DWORD *)(a1 + 148) = 0;
LABEL_85:
          *(_DWORD *)(a1 + 416) = 0;
          *(_DWORD *)(a1 + 136) = 0;
          goto LABEL_89;
        }
        uint64_t v48 = *(void **)(a1 + 152);
        size_t v49 = 8 * v50;
      }
      memset_pattern16(v48, &unk_1CDB15640, v49);
      LODWORD(v50) = *(_DWORD *)(a1 + 144) & 1;
      goto LABEL_84;
    }
    int v51 = *(_DWORD *)(a1 + 3176);
    if (v51) {
      *(_DWORD *)(a1 + 3176) = v51 - 1;
    }
    if (*(unsigned char *)(*(void *)(a1 + 64) + 318)
      || !llvm::MachineInstr::getNumExplicitOperands((uint64_t)v23))
    {
      goto LABEL_89;
    }
    uint64_t v53 = 0;
    int v54 = (unsigned int *)(a1 + 144);
    while (2)
    {
      uint64_t v55 = v23[4];
      if (*(_DWORD *)(v55 + 32 * v53)) {
        goto LABEL_153;
      }
      uint64_t v56 = *(unsigned int *)(v55 + 32 * v53 + 4);
      if ((v56 & 0x80000000) == 0) {
        goto LABEL_153;
      }
      unsigned int v57 = (*(_DWORD *)(v55 + 32 * v53) >> 8) & 0xFFF;
      if (*(unsigned char *)v54)
      {
        int v58 = 32;
        uint64_t v59 = a1 + 152;
      }
      else
      {
        int v58 = *(_DWORD *)(a1 + 160);
        if (!v58)
        {
LABEL_118:
          uint64_t v65 = v23;
          __int16 v71 = 0;
          unsigned int v74 = *(_DWORD *)(a1 + 136)
              + sub_1CBA7DEF4(*(void *)(a1 + 24), *(void *)(*(void *)(a1 + 48) + 24), v56, v57);
          *(_DWORD *)(a1 + 136) = v74;
LABEL_119:
          if (v74 >= 0x21)
          {
            do
            {
              uint64_t v75 = *(void *)(a1 + 408);
              *(_DWORD *)(a1 + 136) = v74
                                    - sub_1CBA7DEF4(*(void *)(a1 + 24), *(void *)(*(void *)(a1 + 48) + 24), *(_DWORD *)v75, *(_WORD *)(v75 + 4) & 0xFFF);
              sub_1CBA7F25C(a1 + 144, *(_DWORD *)v75, *(_WORD *)(v75 + 4));
              uint64_t v76 = *(unsigned int *)(a1 + 416);
              uint64_t v77 = *(void *)(a1 + 408) + 8 * v76;
              if (v77 != v75 + 8)
              {
                memmove((void *)v75, (const void *)(v75 + 8), v77 - (v75 + 8));
                LODWORD(v76) = *(_DWORD *)(a1 + 416);
              }
              *(_DWORD *)(a1 + 416) = v76 - 1;
              unsigned int v74 = *(_DWORD *)(a1 + 136);
            }
            while (v74 > 0x20);
          }
          unsigned int v78 = *v54;
          int v79 = *v54 & 1;
          if (v79)
          {
            int v80 = 32;
            uint64_t v81 = a1 + 152;
            uint64_t v23 = v65;
          }
          else
          {
            int v80 = *(_DWORD *)(a1 + 160);
            uint64_t v23 = v65;
            if (!v80)
            {
              uint64_t v90 = 0;
              unsigned int v91 = 0;
              goto LABEL_146;
            }
            uint64_t v81 = *(void *)(a1 + 152);
          }
          uint64_t v82 = 0;
          unsigned int v83 = (37 * v56) ^ (37 * v57);
          int v84 = v80 - 1;
          for (int i = 1; ; ++i)
          {
            unsigned int v86 = v83 & v84;
            uint64_t v87 = v81 + 8 * v86;
            int v88 = *(_DWORD *)v87;
            if (v56 == *(_DWORD *)v87 && (*(_WORD *)(v87 + 4) & 0xFFF) == v57) {
              goto LABEL_153;
            }
            if (v88 == -1) {
              break;
            }
            if (v88 != -2) {
              goto LABEL_131;
            }
            BOOL v89 = (*(_WORD *)(v87 + 4) & 0xFFF) == 4094;
LABEL_135:
            if (v89 && v82 == 0) {
              uint64_t v82 = v81 + 8 * v86;
            }
            unsigned int v83 = v86 + i;
          }
          if ((~*(unsigned __int16 *)(v87 + 4) & 0xFFF) == 0)
          {
            if (v82) {
              uint64_t v90 = v82;
            }
            else {
              uint64_t v90 = v81 + 8 * v86;
            }
            if (v79) {
              unsigned int v91 = 32;
            }
            else {
              unsigned int v91 = *(_DWORD *)(a1 + 160);
            }
LABEL_146:
            if (4 * (v78 >> 1) + 4 >= 3 * v91)
            {
              sub_1CBA7F308(a1 + 144, 2 * v91);
              unsigned int v78 = *v54;
              if (*v54)
              {
                int v103 = 32;
                uint64_t v104 = a1 + 152;
              }
              else
              {
                int v103 = *(_DWORD *)(a1 + 160);
                if (!v103)
                {
                  int v79 = 0;
                  uint64_t v90 = 0;
                  goto LABEL_148;
                }
                uint64_t v104 = *(void *)(a1 + 152);
              }
              uint64_t v96 = 0;
              int v79 = *v54 & 1;
              unsigned int v105 = (37 * v56) ^ (37 * v57);
              int v106 = v103 - 1;
              int v107 = 1;
              while (2)
              {
                unsigned int v108 = v105 & v106;
                uint64_t v90 = v104 + 8 * v108;
                int v109 = *(_DWORD *)v90;
                if (v56 == *(_DWORD *)v90 && (*(_WORD *)(v90 + 4) & 0xFFF) == v57) {
                  goto LABEL_148;
                }
                if (v109 == -1)
                {
                  if ((~*(unsigned __int16 *)(v90 + 4) & 0xFFF) == 0)
                  {
LABEL_189:
                    if (v96) {
                      uint64_t v90 = v96;
                    }
                    goto LABEL_148;
                  }
LABEL_180:
                  BOOL v110 = 0;
                }
                else
                {
                  if (v109 != -2) {
                    goto LABEL_180;
                  }
                  BOOL v110 = (*(_WORD *)(v90 + 4) & 0xFFF) == 4094;
                }
                if (v110 && v96 == 0) {
                  uint64_t v96 = v104 + 8 * v108;
                }
                unsigned int v105 = v108 + v107++;
                continue;
              }
            }
            if (v91 + ~(v78 >> 1) - *(_DWORD *)(a1 + 148) <= v91 >> 3)
            {
              sub_1CBA7F308(a1 + 144, v91);
              unsigned int v78 = *v54;
              if (*v54)
              {
                int v94 = 32;
                uint64_t v95 = a1 + 152;
              }
              else
              {
                int v94 = *(_DWORD *)(a1 + 160);
                if (!v94)
                {
                  int v79 = 0;
                  uint64_t v90 = 0;
                  goto LABEL_148;
                }
                uint64_t v95 = *(void *)(a1 + 152);
              }
              uint64_t v96 = 0;
              int v79 = *v54 & 1;
              unsigned int v97 = (37 * v56) ^ (37 * v57);
              int v98 = v94 - 1;
              int v99 = 1;
              while (2)
              {
                unsigned int v100 = v97 & v98;
                uint64_t v90 = v95 + 8 * v100;
                int v101 = *(_DWORD *)v90;
                if (v56 == *(_DWORD *)v90 && (*(_WORD *)(v90 + 4) & 0xFFF) == v57) {
                  break;
                }
                if (v101 == -1)
                {
                  if ((~*(unsigned __int16 *)(v90 + 4) & 0xFFF) == 0) {
                    goto LABEL_189;
                  }
LABEL_163:
                  BOOL v102 = 0;
                }
                else
                {
                  if (v101 != -2) {
                    goto LABEL_163;
                  }
                  BOOL v102 = (*(_WORD *)(v90 + 4) & 0xFFF) == 4094;
                }
                if (v102 && v96 == 0) {
                  uint64_t v96 = v95 + 8 * v100;
                }
                unsigned int v97 = v100 + v99++;
                continue;
              }
            }
LABEL_148:
            *int v54 = (v78 & 0xFFFFFFFE | v79) + 2;
            if (*(_DWORD *)v90 != -1 || (~*(unsigned __int16 *)(v90 + 4) & 0xFFF) != 0) {
              --*(_DWORD *)(a1 + 148);
            }
            unint64_t v92 = v56 | ((unint64_t)(unsigned __int16)(v57 | (v71 << 12)) << 32);
            *(void *)uint64_t v90 = v92;
            unint64_t v93 = *(unsigned int *)(a1 + 416);
            if (v93 >= *(unsigned int *)(a1 + 420)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(a1 + 408) + 8 * v93) = v92;
            ++*(_DWORD *)(a1 + 416);
LABEL_153:
            if (++v53 >= (unint64_t)llvm::MachineInstr::getNumExplicitOperands((uint64_t)v23))
            {
LABEL_89:
              uint64_t v52 = *(void *)(a1 + 120);
              *(void *)(a1 + 120) = v118;
              *(void *)(a1 + 128) = v52;
              return;
            }
            continue;
          }
LABEL_131:
          BOOL v89 = 0;
          goto LABEL_135;
        }
        uint64_t v59 = *(void *)(a1 + 152);
      }
      break;
    }
    unsigned int v60 = (37 * v56) ^ (37 * v57);
    int v61 = v58 - 1;
    for (int j = 1; ; ++j)
    {
      unsigned int v63 = v60 & v61;
      uint64_t v64 = v59 + 8 * v63;
      if (v56 == *(_DWORD *)v64 && (*(_WORD *)(v64 + 4) & 0xFFF) == v57) {
        break;
      }
      if (*(_DWORD *)v64 == -1 && (~*(unsigned __int16 *)(v64 + 4) & 0xFFF) == 0) {
        goto LABEL_118;
      }
      unsigned int v60 = v63 + j;
    }
    uint64_t v65 = v23;
    uint64_t v66 = *(void *)(a1 + 408);
    uint64_t v67 = *(unsigned int *)(a1 + 416);
    if (v67)
    {
      uint64_t v68 = 8 * v67;
      uint64_t v69 = v66 + 8 * v67;
      do
      {
        if (*(_DWORD *)v66 == v56 && (*(_WORD *)(v66 + 4) & 0xFFF) == v57) {
          goto LABEL_112;
        }
        v66 += 8;
        v68 -= 8;
      }
      while (v68);
      uint64_t v66 = v69;
    }
LABEL_112:
    unsigned int v70 = *(unsigned __int16 *)(v66 + 4);
    if (v70 >> 12 == 15) {
      __int16 v71 = 15;
    }
    else {
      __int16 v71 = (*(_WORD *)(v66 + 4) >> 12) + 1;
    }
    sub_1CBA7F25C(a1 + 144, *(_DWORD *)v66, v70);
    uint64_t v72 = *(unsigned int *)(a1 + 416);
    uint64_t v73 = *(void *)(a1 + 408) + 8 * v72;
    if (v73 != v66 + 8)
    {
      memmove((void *)v66, (const void *)(v66 + 8), v73 - (v66 + 8));
      LODWORD(v72) = *(_DWORD *)(a1 + 416);
    }
    *(_DWORD *)(a1 + 416) = v72 - 1;
    unsigned int v74 = *(_DWORD *)(a1 + 136);
    goto LABEL_119;
  }
}

void sub_1CBA7ABB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = (void *)sub_1CBA7D738(a1, v4);
  uint64_t v6 = v5;
  float v8 = (void *)v5[5];
  unint64_t v7 = v5[6];
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = (void *)v5[4];
    uint64_t v11 = v8 - v10;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      abort();
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_1CB833614();
      }
      uint64_t v15 = (char *)operator new(8 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    *(void *)uint64_t v16 = a2;
    int v9 = v16 + 8;
    if (v8 != v10)
    {
      do
      {
        uint64_t v17 = *--v8;
        *((void *)v16 - 1) = v17;
        v16 -= 8;
      }
      while (v8 != v10);
      float v8 = (void *)v6[4];
    }
    v6[4] = v16;
    v6[5] = v9;
    v6[6] = &v15[8 * v14];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    void *v8 = a2;
    int v9 = v8 + 1;
  }
  v6[5] = v9;
  *(_DWORD *)(a2 + 196) |= *(_DWORD *)v6;
  uint64_t v18 = *(unsigned __int16 **)(v4 + 16);
  int v19 = *v18;
  BOOL v21 = (v19 - 9) <= 0x3C && ((1 << (v19 - 9)) & 0x1000000000000605) != 0 || v19 == 0;
  if (v21 || (v18[4] & 0x10) != 0 || (v18[8] & 1) != 0) {
    return;
  }
  if (sub_1CBA7B1D8(v4)) {
    --*(_DWORD *)(a1 + 3204);
  }
  int v22 = *(void **)(a2 + 8);
  uint64_t v23 = v22[2];
  if ((*(unsigned char *)(v23 + 16) & 2) == 0)
  {
    if (!sub_1CBA7B1D8(*(void *)(a2 + 8))) {
      return;
    }
    unint64_t v24 = v22[6];
    if (v24 >= 8)
    {
      if ((v24 & 7) != 0)
      {
        UnderlyingObject = 0;
        if ((v22[6] & 7) != 3 || (v24 & 0xFFFFFFFFFFFFFFF8) == 0) {
          goto LABEL_83;
        }
        if (!*(_DWORD *)(v24 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_36;
        }
      }
      else
      {
        v24 &= 0xFFFFFFFFFFFFFFF8;
        v22[6] = v24;
      }
      if ((v24 & 7) != 0)
      {
        unsigned int v45 = *(uint64_t **)((v24 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        unsigned int v45 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFF8);
        v22[6] = v45;
      }
      UnderlyingObject = 0;
      uint64_t v46 = *v45;
      if ((v46 & 4) == 0)
      {
        unsigned int v47 = (llvm *)(v46 & 0xFFFFFFFFFFFFFFF8);
        if (v47) {
          UnderlyingObject = llvm::getUnderlyingObject(v47, (const llvm::Value *)6);
        }
      }
LABEL_83:
      int8x8_t v48 = *(int8x8_t *)(a1 + 2336);
      if (!*(void *)&v48) {
        return;
      }
      unint64_t v49 = 0x9DDFEA08EB382D69
          * (((8 * UnderlyingObject) + 8) ^ ((unint64_t)UnderlyingObject >> 32));
      unint64_t v50 = 0x9DDFEA08EB382D69 * (((unint64_t)UnderlyingObject >> 32) ^ (v49 >> 47) ^ v49);
      unint64_t v51 = 0x9DDFEA08EB382D69 * (v50 ^ (v50 >> 47));
      uint8x8_t v52 = (uint8x8_t)vcnt_s8(v48);
      v52.i16[0] = vaddlv_u8(v52);
      if (v52.u32[0] <= 1uLL) {
        uint64_t v53 = v51 & (*(void *)&v48 - 1);
      }
      else {
        uint64_t v53 = v51 < *(void *)&v48 ? v51 : v51 % *(void *)&v48;
      }
      int v54 = *(void ***)(*(void *)(a1 + 2328) + 8 * v53);
      if (!v54) {
        return;
      }
      uint64_t v55 = *v54;
      if (!*v54) {
        return;
      }
      while (1)
      {
        unint64_t v56 = v55[1];
        if (v56 == v51)
        {
          if ((llvm *)v55[2] == UnderlyingObject)
          {
            unsigned int v57 = v55;
            do
              unsigned int v57 = (void *)*v57;
            while (v57 && (llvm *)v57[2] == UnderlyingObject);
            while (v55 != v57)
            {
              if (v55[3] == a2)
              {
                sub_1CB904FC4((void *)(a1 + 2328), v55, (uint64_t)__p);
                goto LABEL_108;
              }
              uint64_t v55 = (void *)*v55;
            }
            return;
          }
        }
        else
        {
          if (v52.u32[0] <= 1uLL)
          {
            v56 &= *(void *)&v48 - 1;
          }
          else if (v56 >= *(void *)&v48)
          {
            v56 %= *(void *)&v48;
          }
          if (v56 != v53) {
            return;
          }
        }
        uint64_t v55 = (void *)*v55;
        if (!v55) {
          return;
        }
      }
    }
LABEL_36:
    UnderlyingObject = 0;
    goto LABEL_83;
  }
  uint64_t v26 = *(unsigned int *)(a2 + 40);
  if (v26)
  {
    unsigned int v27 = *(void **)(a2 + 32);
    uint64_t v28 = 16 * v26;
    do
    {
      unint64_t v29 = *v27 & 0xFFFFFFFFFFFFFFF8;
      if ((*v27 & 6) == 0 && v29 != 0)
      {
        uint64_t v31 = *(void *)(v29 + 8);
        if (v31)
        {
          if ((*(unsigned char *)(*(void *)(v31 + 16) + 16) & 0x10) != 0)
          {
            uint64_t v32 = sub_1CB904224(a1 + 696, v29);
            int v33 = *(_DWORD *)(v32 + 8);
            if (v33 != -1) {
              *(_DWORD *)(v32 + 8) = v33 - 1;
            }
          }
        }
      }
      v27 += 2;
      v28 -= 16;
    }
    while (v28);
    int v22 = *(void **)(a2 + 8);
    uint64_t v23 = v22[2];
  }
  uint64_t v34 = *(unsigned __int8 *)(v23 + 4) + 2;
  uint64_t v35 = v22[4];
  if (*(unsigned char *)(v35 + 32 * v34) != 7) {
    return;
  }
  int8x8_t v36 = *(int8x8_t *)(a1 + 2296);
  if (!*(void *)&v36) {
    return;
  }
  unint64_t v37 = *(unsigned int *)(v35 + 32 * v34 + 4);
  uint64_t v38 = (void *)(a1 + 2288);
  uint8x8_t v39 = (uint8x8_t)vcnt_s8(v36);
  v39.i16[0] = vaddlv_u8(v39);
  if (v39.u32[0] <= 1uLL)
  {
    unint64_t v40 = (v36.i32[0] - 1) & v37;
  }
  else
  {
    unint64_t v40 = v37;
    if (*(void *)&v36 <= v37) {
      unint64_t v40 = v37 % *(void *)&v36;
    }
  }
  __int16 v41 = *(uint64_t ***)(*v38 + 8 * v40);
  if (!v41) {
    return;
  }
  uint64_t v42 = *v41;
  if (!*v41) {
    return;
  }
  while (1)
  {
    unint64_t v43 = v42[1];
    if (v43 == v37) {
      break;
    }
    if (v39.u32[0] > 1uLL)
    {
      if (v43 >= *(void *)&v36) {
        v43 %= *(void *)&v36;
      }
    }
    else
    {
      v43 &= *(void *)&v36 - 1;
    }
    if (v43 != v40) {
      return;
    }
LABEL_65:
    uint64_t v42 = (uint64_t *)*v42;
    if (!v42) {
      return;
    }
  }
  if (*((_DWORD *)v42 + 4) != v37) {
    goto LABEL_65;
  }
  int v44 = v42;
  do
    int v44 = (uint64_t *)*v44;
  while (v44 && *((_DWORD *)v44 + 4) == v37);
  while (1)
  {
    if (v42 == v44) {
      return;
    }
    if (v42[3] == a2) {
      break;
    }
    uint64_t v42 = (uint64_t *)*v42;
  }
  sub_1CB904E74(v38, v42, (uint64_t)__p);
LABEL_108:
  int v58 = __p[0];
  __p[0] = 0;
  if (v58) {
    operator delete(v58);
  }
}

void sub_1CBA7B090(void *a1, unsigned int a2)
{
  if (a2 <= 0x20)
  {
    *a1 = 1;
LABEL_3:
    uint64_t v2 = a1 + 1;
    size_t v3 = 256;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  uint64_t v4 = a2;
  size_t v6 = 8 * a2;
  unint64_t v7 = a1;
  uint64_t v2 = operator new(v6, (std::align_val_t)4uLL);
  a1 = v7;
  v7[1] = v2;
  v7[2] = v4;
  int v5 = *(_DWORD *)v7;
  void *v7 = *(_DWORD *)v7 & 1;
  if (v5) {
    goto LABEL_3;
  }
  size_t v3 = v6;
LABEL_4:

  memset_pattern16(v2, &unk_1CDB15640, v3);
}

uint64_t sub_1CBA7B134(uint64_t a1, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t result = *(unsigned int *)(*(void *)(*(void *)(a1 + 16) + 192) + 4 * a2);
  int v5 = *a3;
  BOOL v7 = (v5 - 9) <= 0x3C && ((1 << (v5 - 9)) & 0x1000000000000605) != 0 || v5 == 0;
  if (v7 || (a3[4] & 0x10) != 0 || (a3[8])
    && *(_DWORD *)(a1 + 104) != a2
    && *(_DWORD *)(a1 + 108) != a2
    && *(_DWORD *)(a1 + 112) != a2)
  {
    int v8 = *(_DWORD *)(a1 + 116);
    uint64_t v9 = *(void *)(a1 + 64);
    if (v8 == a2)
    {
      return (result << *(unsigned char *)(v9 + 318));
    }
    else if (*(unsigned char *)(v9 + 326))
    {
      return (2 * result);
    }
    else
    {
      return (4 * result);
    }
  }
  return result;
}

BOOL sub_1CBA7B1D8(uint64_t a1)
{
  int v1 = *(unsigned __int16 **)(a1 + 16);
  int v2 = *v1;
  BOOL v4 = (v2 - 9) <= 0x3C && ((1 << (v2 - 9)) & 0x1000000000000605) != 0 || v2 == 0;
  return !v4 && (v1[4] & 0x10) == 0 && (*((void *)v1 + 2) & 5) == 4 && !sub_1CBA7BA60(a1);
}

_DWORD *sub_1CBA7B248(_DWORD *result)
{
  int v1 = result;
  uint64_t v2 = result[4];
  int v3 = result[2];
  int v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v5 == v2)
  {
    *((void *)result + 1) = 0;
    if (v2)
    {
      size_t v6 = *(void **)result;
      uint64_t v7 = 16 * v2;
      do
      {
        *size_t v6 = -4096;
        v6 += 2;
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)result, 8);
    return sub_1CB837D60(v1, v5);
  }
  return result;
}

unint64_t *sub_1CBA7B2F4(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  if (*a1) {
    unint64_t v5 = v4 >> 58;
  }
  else {
    unint64_t v5 = *(unsigned int *)(v4 + 64);
  }
  unint64_t v6 = *a2;
  if (*a2) {
    unint64_t v7 = v6 >> 58;
  }
  else {
    unint64_t v7 = *(unsigned int *)(v6 + 64);
  }
  if (v5 <= v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = v5;
  }
  sub_1CBA7B5AC(a1, v8, 0);
  unint64_t v9 = *a1;
  unint64_t v10 = *a2;
  if (*a1)
  {
    unint64_t v11 = v9 >> 58;
    if (v10)
    {
      *a1 = (v10 & (2 * ~((-1 << (v10 >> 58)) | (-1 << v11))) | 0xFC00000000000000) & v9 | 1;
      return a1;
    }
    unint64_t v13 = *(unsigned int *)(v10 + 64);
  }
  else
  {
    if ((v10 & 1) == 0)
    {
      unsigned int v25 = *(_DWORD *)(v9 + 8);
      unsigned int v26 = *(_DWORD *)(v10 + 8);
      if (v26 >= v25) {
        uint64_t v27 = v25;
      }
      else {
        uint64_t v27 = v26;
      }
      if (v27)
      {
        uint64_t v28 = *(uint64_t **)v10;
        unint64_t v29 = *(void **)v9;
        uint64_t v30 = v27;
        do
        {
          uint64_t v31 = *v28++;
          *v29++ &= v31;
          --v30;
        }
        while (v30);
      }
      if (v25 > v26)
      {
        uint64_t v32 = *(void **)v9;
        do
        {
          v32[v27] = 0;
          LODWORD(v27) = v27 + 1;
        }
        while (v25 != v27);
      }
      return a1;
    }
    unint64_t v11 = *(unsigned int *)(v9 + 64);
    unint64_t v13 = v10 >> 58;
  }
  if (v13 < v11) {
    unint64_t v11 = v13;
  }
  if (v11)
  {
    uint64_t v14 = 0;
    while (1)
    {
      unint64_t v15 = *a1;
      uint64_t v16 = v14 >> 6;
      if (*a1) {
        uint64_t v17 = (1 << v14) & (v15 >> 1) & ~(-1 << (v15 >> 58));
      }
      else {
        uint64_t v17 = *(void *)(*(void *)v15 + 8 * v16) & (1 << v14);
      }
      if (v17
        && ((unint64_t v20 = *a2, (*a2 & 1) == 0)
          ? (uint64_t v21 = *(void *)(*(void *)v20 + 8 * v16) & (1 << v14))
          : (uint64_t v21 = (1 << v14) & (v20 >> 1) & ~(-1 << (v20 >> 58))),
            v21))
      {
        if (v15)
        {
          unint64_t v22 = v15 & 0xFC00000000000000 | (2
                                            * (((v15 >> 1) & ~(-1 << (v15 >> 58)) | (1 << v14)) & ~(-1 << (v15 >> 58))));
LABEL_31:
          *a1 = v22 | 1;
          goto LABEL_24;
        }
        uint64_t v18 = *(void *)v15;
        uint64_t v19 = *(void *)(v18 + 8 * v16) | (1 << v14);
      }
      else
      {
        if (v15)
        {
          unint64_t v22 = ((2 * ~((-1 << (v15 >> 58)) | (1 << v14))) | 0xFC00000000000000) & v15;
          goto LABEL_31;
        }
        uint64_t v18 = *(void *)v15;
        uint64_t v19 = *(void *)(v18 + 8 * v16) & ~(1 << v14);
      }
      *(void *)(v18 + 8 * v16) = v19;
LABEL_24:
      if (v11 == ++v14)
      {
        unint64_t v9 = *a1;
        break;
      }
    }
  }
  if (v9) {
    unint64_t v23 = v9 >> 58;
  }
  else {
    unint64_t v23 = *(unsigned int *)(v9 + 64);
  }
  for (; v23 != v11; ++v11)
  {
    unint64_t v24 = *a1;
    if (*a1) {
      *a1 = ((2 * ~((-1 << (v24 >> 58)) | (1 << v11))) | 0xFC00000000000000) & v24 | 1;
    }
    else {
      *(void *)(*(void *)v24 + 8 * (v11 >> 6)) &= ~(1 << v11);
    }
  }
  return a1;
}

unint64_t *sub_1CBA7B5AC(unint64_t *result, uint64_t a2, uint64_t a3)
{
  LOBYTE(v3) = a2;
  unint64_t v4 = *result;
  if (*result)
  {
    if (a2 > 0x39) {
      operator new();
    }
    if (a3) {
      uint64_t v5 = -1 << (v4 >> 58);
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v6 = v4 & (2 * ~(-1 << (v4 >> 58))) | (a2 << 58);
    *uint64_t result = v6 & 0xFC00000000000000 | (2 * (((v6 >> 1) & ~(-1 << (v6 >> 58)) | v5) & ~(-1 << (v6 >> 58)))) | 1;
  }
  else
  {
    if ((*(_DWORD *)(v4 + 64) & 0x3F) != 0)
    {
      uint64_t v14 = -1 << (*(_DWORD *)(v4 + 64) & 0x3F);
      uint64_t v7 = *(unsigned int *)(v4 + 8);
      uint64_t v15 = *(void *)v4 + 8 * v7;
      if (a3) {
        uint64_t v16 = *(void *)(v15 - 8) | v14;
      }
      else {
        uint64_t v16 = *(void *)(v15 - 8) & ~v14;
      }
      *(void *)(v15 - 8) = v16;
    }
    else
    {
      uint64_t v7 = *(unsigned int *)(v4 + 8);
    }
    unsigned int v8 = v7;
    *(_DWORD *)(v4 + 64) = a2;
    unsigned int v9 = a2 + 63;
    if (v7 != (a2 + 63) >> 6)
    {
      uint64_t v10 = v9 >> 6;
      if (v7 > v10)
      {
        *(_DWORD *)(v4 + 8) = v10;
        unsigned int v8 = v9 >> 6;
      }
      else
      {
        if (v10 > *(_DWORD *)(v4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v10 != v7)
        {
          unint64_t v11 = (uint64_t *)(*(void *)v4 + 8 * v7);
          uint64_t v12 = v7 - v10;
          do
            *v11++ = a3 << 63 >> 63;
          while (!__CFADD__(v12++, 1));
        }
        unsigned int v8 = v9 >> 6;
        *(_DWORD *)(v4 + 8) = v10;
        int v3 = *(_DWORD *)(v4 + 64);
      }
    }
    if ((v3 & 0x3F) != 0) {
      *(void *)(*(void *)v4 + 8 * v8 - 8) &= ~(-1 << (v3 & 0x3F));
    }
  }
  return result;
}

void *sub_1CBA7B7CC(_DWORD *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CBA0E618((uint64_t)a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CBA7B830(a1, (uint64_t)a2, a2, v7);
    *uint64_t v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

void *sub_1CBA7B830(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = a1[2];
  unsigned int v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CBA7B8E4((uint64_t)a1, v7);
  unsigned int v9 = 0;
  sub_1CBA0E618((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096) {
    --a1[3];
  }
  return a4;
}

void *sub_1CBA7B8E4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CBA7B9B0(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CBA7B9B0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      uint64_t result = sub_1CBA0E618(v5, (void *)a2, &v10);
      unsigned int v9 = v10;
      *uint64_t v10 = *(void *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

BOOL sub_1CBA7BA60(uint64_t a1)
{
  int v1 = *(unsigned __int16 **)(a1 + 16);
  int v2 = *v1;
  if ((v2 - 9) <= 0x3C && ((1 << (v2 - 9)) & 0x1000000000000605) != 0 || v2 == 0) {
    return 0;
  }
  if ((v1[4] & 0x10) != 0) {
    return 0;
  }
  if (v1[8]) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 40);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(_DWORD **)(a1 + 32);
  if (!*v6) {
    return (*v6 & 0x1000000) == 0;
  }
  if (v5 < 2) {
    return 0;
  }
  uint64_t v7 = v5 - 2;
  uint64_t v8 = (unsigned __int8 *)(v6 + 8);
  do
  {
    int v9 = *v8;
    v8 += 32;
    BOOL result = v9 == 0;
    if (v9) {
      BOOL v11 = v7 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    --v7;
  }
  while (!v11);
  return result;
}

BOOL sub_1CBA7BAFC(uint64_t a1, llvm::SUnit *a2, llvm::SUnit *a3)
{
  int v6 = *(_DWORD *)(a1 + 2368);
  uint64_t v7 = a1 + 2376;
  unsigned int v8 = a2 >> 4;
  unsigned int v9 = a3 >> 4;
  if (v6)
  {
    int v11 = 32;
    uint64_t v10 = a1 + 2376;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 2376);
    int v11 = *(_DWORD *)(a1 + 2384);
    if (!v11)
    {
      unsigned int v26 = 0;
      goto LABEL_21;
    }
  }
  unint64_t v12 = (v9 ^ (a3 >> 9) | ((unint64_t)(v8 ^ (a2 >> 9)) << 32))
      + ~((unint64_t)(v9 ^ (a3 >> 9)) << 32);
  unint64_t v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  unint64_t v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  int v15 = v11 - 1;
  unsigned int v16 = v15 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~(v14 << 27)));
  uint64_t v17 = v10 + 24 * v16;
  uint64_t v19 = *(llvm::SUnit **)v17;
  uint64_t v18 = *(llvm::SUnit **)(v17 + 8);
  if (*(llvm::SUnit **)v17 != a2 || v18 != a3)
  {
    int v21 = 1;
    while (v19 != (llvm::SUnit *)-4096 || v18 != (llvm::SUnit *)-4096)
    {
      unsigned int v22 = v16 + v21++;
      unsigned int v16 = v22 & v15;
      uint64_t v17 = v10 + 24 * (v22 & v15);
      uint64_t v19 = *(llvm::SUnit **)v17;
      uint64_t v18 = *(llvm::SUnit **)(v17 + 8);
      if (*(llvm::SUnit **)v17 == a2 && v18 == a3) {
        goto LABEL_15;
      }
    }
    if (v6)
    {
      unsigned int v26 = 32;
      uint64_t v10 = a1 + 2376;
    }
    else
    {
      uint64_t v10 = *(void *)(a1 + 2376);
      unsigned int v26 = *(_DWORD *)(a1 + 2384);
    }
LABEL_21:
    uint64_t v17 = v10 + 24 * v26;
    if (v6) {
      goto LABEL_22;
    }
LABEL_16:
    uint64_t v24 = *(void *)(a1 + 2376);
    unsigned int v25 = *(_DWORD *)(a1 + 2384);
    goto LABEL_23;
  }
LABEL_15:
  if ((v6 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_22:
  unsigned int v25 = 32;
  uint64_t v24 = a1 + 2376;
LABEL_23:
  if (v24 + 24 * v25 != v17) {
    return *(unsigned char *)(v17 + 16) != 0;
  }
  BOOL IsReachable = llvm::ScheduleDAGTopologicalSort::IsReachable((llvm::ScheduleDAGTopologicalSort *)(*(void *)(a1 + 8) + 2120), a2, a3);
  unsigned int v28 = *(_DWORD *)(a1 + 2368);
  int v29 = v28 & 1;
  if (v28)
  {
    int v30 = 32;
    uint64_t v31 = v7;
  }
  else
  {
    int v30 = *(_DWORD *)(a1 + 2384);
    if (!v30)
    {
      unsigned int v47 = 0;
      unsigned int v48 = 0;
      goto LABEL_56;
    }
    uint64_t v31 = *(void *)(a1 + 2376);
  }
  unint64_t v32 = (v9 ^ (a3 >> 9) | ((unint64_t)(v8 ^ (a2 >> 9)) << 32))
      + ~((unint64_t)(v9 ^ (a3 >> 9)) << 32);
  unint64_t v33 = (v32 ^ (v32 >> 22)) + ~((v32 ^ (v32 >> 22)) << 13);
  unint64_t v34 = (9 * (v33 ^ (v33 >> 8))) ^ ((9 * (v33 ^ (v33 >> 8))) >> 15);
  int v35 = v30 - 1;
  unsigned int v36 = v35 & (((v34 + ~(v34 << 27)) >> 31) ^ (v34 + ~(v34 << 27)));
  unint64_t v37 = (llvm::SUnit **)(v31 + 24 * v36);
  uint8x8_t v39 = *v37;
  uint64_t v38 = v37[1];
  if (*v37 == a2 && v38 == a3) {
    return IsReachable;
  }
  __int16 v41 = 0;
  int v42 = 1;
  while (v39 != (llvm::SUnit *)-4096 || v38 != (llvm::SUnit *)-4096)
  {
    if (v41) {
      BOOL v43 = 0;
    }
    else {
      BOOL v43 = v38 == (llvm::SUnit *)-8192;
    }
    if (v43 && v39 == (llvm::SUnit *)-8192) {
      __int16 v41 = v37;
    }
    unsigned int v45 = v36 + v42++;
    unsigned int v36 = v45 & v35;
    unint64_t v37 = (llvm::SUnit **)(v31 + 24 * v36);
    uint8x8_t v39 = *v37;
    uint64_t v38 = v37[1];
    if (*v37 == a2 && v38 == a3) {
      return IsReachable;
    }
  }
  if (v41) {
    unsigned int v47 = v41;
  }
  else {
    unsigned int v47 = v37;
  }
  if (v28) {
    unsigned int v48 = 32;
  }
  else {
    unsigned int v48 = *(_DWORD *)(a1 + 2384);
  }
LABEL_56:
  unint64_t v49 = (unsigned int *)(a1 + 2368);
  if (4 * (v28 >> 1) + 4 >= 3 * v48)
  {
    sub_1CBA7DB34(a1 + 2368, 2 * v48);
    unsigned int v28 = *v49;
    if (*v49)
    {
      int v51 = 32;
    }
    else
    {
      int v51 = *(_DWORD *)(a1 + 2384);
      if (!v51) {
        goto LABEL_118;
      }
      uint64_t v7 = *(void *)(a1 + 2376);
    }
    int v29 = *v49 & 1;
    unint64_t v52 = (v9 ^ (a3 >> 9) | ((unint64_t)(v8 ^ (a2 >> 9)) << 32))
        + ~((unint64_t)(v9 ^ (a3 >> 9)) << 32);
    unint64_t v53 = (v52 ^ (v52 >> 22)) + ~((v52 ^ (v52 >> 22)) << 13);
    unint64_t v54 = (9 * (v53 ^ (v53 >> 8))) ^ ((9 * (v53 ^ (v53 >> 8))) >> 15);
    int v55 = ((v54 + ~(v54 << 27)) >> 31) ^ (v54 + ~(v54 << 27));
    int v56 = v51 - 1;
    unsigned int v57 = (v51 - 1) & v55;
    unsigned int v47 = (llvm::SUnit **)(v7 + 24 * v57);
    int v58 = *v47;
    uint64_t v59 = v47[1];
    if (*v47 == a2 && v59 == a3) {
      goto LABEL_58;
    }
    int v61 = 0;
    int v62 = 1;
    while (v58 != (llvm::SUnit *)-4096 || v59 != (llvm::SUnit *)-4096)
    {
      if (v61) {
        BOOL v63 = 0;
      }
      else {
        BOOL v63 = v59 == (llvm::SUnit *)-8192;
      }
      if (v63 && v58 == (llvm::SUnit *)-8192) {
        int v61 = v47;
      }
      unsigned int v65 = v57 + v62++;
      unsigned int v57 = v65 & v56;
      unsigned int v47 = (llvm::SUnit **)(v7 + 24 * (v65 & v56));
      int v58 = *v47;
      uint64_t v59 = v47[1];
      if (*v47 == a2 && v59 == a3) {
        goto LABEL_58;
      }
    }
    goto LABEL_114;
  }
  if (v48 + ~(v28 >> 1) - *(_DWORD *)(a1 + 2372) > v48 >> 3) {
    goto LABEL_58;
  }
  sub_1CBA7DB34(a1 + 2368, v48);
  unsigned int v28 = *v49;
  if (*v49)
  {
    int v67 = 32;
    goto LABEL_93;
  }
  int v67 = *(_DWORD *)(a1 + 2384);
  if (v67)
  {
    uint64_t v7 = *(void *)(a1 + 2376);
LABEL_93:
    int v29 = *v49 & 1;
    unint64_t v68 = (v9 ^ (a3 >> 9) | ((unint64_t)(v8 ^ (a2 >> 9)) << 32))
        + ~((unint64_t)(v9 ^ (a3 >> 9)) << 32);
    unint64_t v69 = (v68 ^ (v68 >> 22)) + ~((v68 ^ (v68 >> 22)) << 13);
    unint64_t v70 = (9 * (v69 ^ (v69 >> 8))) ^ ((9 * (v69 ^ (v69 >> 8))) >> 15);
    int v71 = ((v70 + ~(v70 << 27)) >> 31) ^ (v70 + ~(v70 << 27));
    int v72 = v67 - 1;
    unsigned int v73 = (v67 - 1) & v71;
    unsigned int v47 = (llvm::SUnit **)(v7 + 24 * v73);
    unsigned int v74 = *v47;
    uint64_t v75 = v47[1];
    if (*v47 == a2 && v75 == a3) {
      goto LABEL_58;
    }
    int v61 = 0;
    int v77 = 1;
    while (v74 != (llvm::SUnit *)-4096 || v75 != (llvm::SUnit *)-4096)
    {
      if (v61) {
        BOOL v78 = 0;
      }
      else {
        BOOL v78 = v75 == (llvm::SUnit *)-8192;
      }
      if (v78 && v74 == (llvm::SUnit *)-8192) {
        int v61 = v47;
      }
      unsigned int v80 = v73 + v77++;
      unsigned int v73 = v80 & v72;
      unsigned int v47 = (llvm::SUnit **)(v7 + 24 * (v80 & v72));
      unsigned int v74 = *v47;
      uint64_t v75 = v47[1];
      if (*v47 == a2 && v75 == a3) {
        goto LABEL_58;
      }
    }
LABEL_114:
    if (v61) {
      unsigned int v47 = v61;
    }
    goto LABEL_58;
  }
LABEL_118:
  int v29 = 0;
  unsigned int v47 = 0;
LABEL_58:
  *unint64_t v49 = (v28 & 0xFFFFFFFE | v29) + 2;
  if (*v47 != (llvm::SUnit *)-4096 || v47[1] != (llvm::SUnit *)-4096) {
    --*(_DWORD *)(a1 + 2372);
  }
  *unsigned int v47 = a2;
  v47[1] = a3;
  *((unsigned char *)v47 + 16) = IsReachable;
  return IsReachable;
}

__n128 sub_1CBA7BFB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unsigned int v6 = *(unsigned __int16 *)(a3 + 48);
    unsigned int v7 = (v6 >> 7) & 1;
    unsigned int v8 = *(unsigned __int16 *)(a2 + 48);
    unsigned int v9 = (v8 >> 7) & 1;
    if (v7 > v9)
    {
      *(unsigned char *)(a3 + 47) = 0;
      goto LABEL_48;
    }
    if (v7 < v9)
    {
      if (*(unsigned char *)(a2 + 47)) {
        *(unsigned char *)(a2 + 47) = 0;
      }
      goto LABEL_48;
    }
    unsigned int v11 = v6 | (*(unsigned __int8 *)(a3 + 50) << 16);
    unsigned int v12 = v8 | (*(unsigned __int8 *)(a2 + 50) << 16);
    if (*(unsigned char *)(a1 + 3262))
    {
      unsigned int v13 = (v11 >> 6) & 1;
      unsigned int v14 = (v12 >> 6) & 1;
      if (v13 > v14) {
        goto LABEL_46;
      }
      if (v13 < v14) {
        goto LABEL_52;
      }
    }
    if ((v11 & v12 & 0x40) != 0)
    {
      uint64_t v15 = *(void *)(a3 + 8);
      uint64_t v16 = *(unsigned int *)(v15 + 120);
      if (v16)
      {
        uint64_t v17 = *(void **)(v15 + 112);
        uint64_t v18 = 16 * v16;
        while (1)
        {
          if ((*v17 & 6) == 0)
          {
            uint64_t v19 = *(unsigned __int16 **)(*(void *)((*v17 & 0xFFFFFFFFFFFFFFF8) + 8) + 16);
            int v20 = *v19;
            BOOL v21 = (v20 - 9) > 0x3C || ((1 << (v20 - 9)) & 0x1000000000000605) == 0;
            BOOL v22 = !v21 || v20 == 0;
            if (v22 || (v19[4] & 0x10) != 0 || (v19[8] & 1) != 0) {
              break;
            }
          }
          v17 += 2;
          v18 -= 16;
          if (!v18) {
            goto LABEL_24;
          }
        }
        int v23 = 1;
      }
      else
      {
LABEL_24:
        int v23 = 0;
      }
      uint64_t v27 = *(unsigned int *)(v5 + 120);
      if (v27)
      {
        unsigned int v28 = *(void **)(v5 + 112);
        uint64_t v29 = 16 * v27;
        while (1)
        {
          if ((*v28 & 6) == 0)
          {
            int v30 = *(unsigned __int16 **)(*(void *)((*v28 & 0xFFFFFFFFFFFFFFF8) + 8) + 16);
            int v31 = *v30;
            BOOL v32 = (v31 - 9) > 0x3C || ((1 << (v31 - 9)) & 0x1000000000000605) == 0;
            BOOL v33 = !v32 || v31 == 0;
            if (v33 || (v30[4] & 0x10) != 0 || (v30[8] & 1) != 0) {
              break;
            }
          }
          v28 += 2;
          v29 -= 16;
          if (!v29) {
            goto LABEL_45;
          }
        }
        if (v23)
        {
LABEL_48:
          if (*(unsigned char *)(a3 + 47) == 29) {
            return result;
          }
          goto LABEL_49;
        }
        goto LABEL_52;
      }
LABEL_45:
      if (!v23) {
        goto LABEL_48;
      }
      goto LABEL_46;
    }
    if (!*(unsigned char *)(a1 + 3260) || ((v12 ^ v11) & 1) != 0)
    {
      if ((~v11 & 0x101) != 0)
      {
        unsigned int v26 = 0;
      }
      else
      {
        int v24 = sub_1CBA7D51C(a1, a3);
        unsigned int v12 = *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16);
        if (v24) {
          unsigned int v26 = (*(_WORD *)(a2 + 48) & 1) == 0;
        }
        else {
          unsigned int v26 = 1;
        }
      }
      if ((~v12 & 0x101) != 0)
      {
        unsigned int v39 = 0;
      }
      else
      {
        int v38 = sub_1CBA7D51C(a1, a2);
        unsigned int v39 = 1;
        if (v38) {
          unsigned int v39 = (*(_WORD *)(a3 + 48) & 1) == 0;
        }
      }
      if (v26 > v39)
      {
        char v34 = 2;
        goto LABEL_47;
      }
      if (v26 < v39)
      {
        if (*(unsigned __int8 *)(a2 + 47) < 3u) {
          goto LABEL_48;
        }
        char v37 = 2;
        goto LABEL_54;
      }
    }
    if (*(unsigned char *)(a1 + 3249) && *(unsigned char *)(a1 + 3253))
    {
      unsigned int v40 = *(unsigned __int8 *)(a3 + 50);
      unsigned int v41 = (v40 >> 1) & 1;
      unsigned int v42 = *(unsigned __int8 *)(a2 + 50);
      unsigned int v43 = (v42 >> 1) & 1;
      if (v41 < v43)
      {
LABEL_68:
        char v34 = 13;
        goto LABEL_47;
      }
      if (v41 > v43) {
        goto LABEL_70;
      }
      unsigned int v44 = *(unsigned __int16 *)(a3 + 48) | (v40 << 16);
      unsigned int v45 = *(unsigned __int16 *)(a2 + 48) | (v42 << 16);
      if (!*(_DWORD *)(a1 + 3180) && *(unsigned char *)(a1 + 3264))
      {
        unsigned int v56 = (v44 >> 1) & 1;
        unsigned int v57 = (v45 >> 1) & 1;
        if (v56 < v57)
        {
LABEL_95:
          char v34 = 10;
          goto LABEL_47;
        }
        if (v56 > v57) {
          goto LABEL_102;
        }
      }
      unsigned int v46 = HIWORD(v44) & 1;
      unsigned int v47 = HIWORD(v45) & 1;
      if (v46 > v47)
      {
LABEL_74:
        char v34 = 22;
        goto LABEL_47;
      }
      if (v46 < v47)
      {
LABEL_76:
        if (*(unsigned __int8 *)(a2 + 47) < 0x17u) {
          goto LABEL_48;
        }
        char v37 = 22;
        goto LABEL_54;
      }
    }
    int v48 = sub_1CBA7EACC(a1, a3);
    int v49 = sub_1CBA7EACC(a1, a2);
    if (v48 < v49) {
      goto LABEL_79;
    }
    if (v48 > v49)
    {
      if (*(unsigned __int8 *)(a2 + 47) < 0x15u) {
        goto LABEL_48;
      }
      char v37 = 20;
      goto LABEL_54;
    }
    if (*(unsigned char *)(a1 + 3249))
    {
      if (*(unsigned char *)(a1 + 3253))
      {
        int v50 = sub_1CBA7EACC(a1, a2);
        int v51 = sub_1CBA7EACC(a1, a3);
        if (v50)
        {
          if (v50 == v51 && *(_DWORD *)(*(void *)(a2 + 8) + 192) > *(_DWORD *)(*(void *)(a3 + 8) + 192))
          {
LABEL_79:
            char v34 = 20;
            goto LABEL_47;
          }
        }
      }
    }
    unsigned int v52 = *(unsigned __int16 *)(a3 + 48);
    unsigned int v53 = (v52 >> 11) & 1;
    unsigned int v54 = *(unsigned __int16 *)(a2 + 48);
    unsigned int v55 = (v54 >> 11) & 1;
    if (v53 < v55)
    {
      char v34 = 14;
      goto LABEL_47;
    }
    if (v53 > v55)
    {
      if (*(unsigned __int8 *)(a2 + 47) < 0xFu) {
        goto LABEL_48;
      }
      char v37 = 14;
      goto LABEL_54;
    }
    unsigned int v58 = v52 | (*(unsigned __int8 *)(a3 + 50) << 16);
    unsigned int v59 = v54 | (*(unsigned __int8 *)(a2 + 50) << 16);
    unsigned int v60 = (v58 >> 12) & 1;
    unsigned int v61 = (v59 >> 12) & 1;
    if (v60 > v61)
    {
      char v34 = 21;
      goto LABEL_47;
    }
    if (v60 < v61)
    {
      if (*(unsigned __int8 *)(a2 + 47) < 0x16u) {
        goto LABEL_48;
      }
      char v37 = 21;
      goto LABEL_54;
    }
    if (*(unsigned char *)(a1 + 3249))
    {
      unsigned int v62 = *(unsigned __int16 *)(a3 + 40);
      if (v62 == 0xFFFF)
      {
        uint64_t v63 = *(void *)(a3 + 8);
        uint64_t v64 = *(unsigned int *)(v63 + 40);
        if (v64)
        {
          unsigned __int16 v65 = 0;
          uint64_t v66 = *(uint64_t **)(v63 + 32);
          uint64_t v67 = 16 * v64;
          do
          {
            uint64_t v68 = *v66;
            v66 += 2;
            if (*(_DWORD *)((v68 & 0xFFFFFFFFFFFFFFF8) + 212) == 1) {
              ++v65;
            }
            v67 -= 16;
          }
          while (v67);
        }
        else
        {
          unsigned __int16 v65 = 0;
        }
        unsigned int v62 = v65;
        *(_WORD *)(a3 + 40) = v65;
      }
      unsigned int v69 = *(unsigned __int16 *)(a2 + 40);
      if (v69 == 0xFFFF)
      {
        uint64_t v70 = *(void *)(a2 + 8);
        uint64_t v71 = *(unsigned int *)(v70 + 40);
        if (v71)
        {
          unsigned __int16 v72 = 0;
          unsigned int v73 = *(uint64_t **)(v70 + 32);
          uint64_t v74 = 16 * v71;
          do
          {
            uint64_t v75 = *v73;
            v73 += 2;
            if (*(_DWORD *)((v75 & 0xFFFFFFFFFFFFFFF8) + 212) == 1) {
              ++v72;
            }
            v74 -= 16;
          }
          while (v74);
        }
        else
        {
          unsigned __int16 v72 = 0;
        }
        unsigned int v69 = v72;
        *(_WORD *)(a2 + 40) = v72;
      }
      if (v62 > v69)
      {
        char v34 = 24;
        goto LABEL_47;
      }
      if (v62 < v69)
      {
        if (*(unsigned __int8 *)(a2 + 47) < 0x19u) {
          goto LABEL_48;
        }
        char v37 = 24;
        goto LABEL_54;
      }
      unsigned int v58 = *(unsigned __int16 *)(a3 + 48) | (*(unsigned __int8 *)(a3 + 50) << 16);
      unsigned int v59 = *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16);
    }
    unsigned int v76 = (v58 >> 13) & 1;
    unsigned int v77 = (v59 >> 13) & 1;
    if (v76 > v77)
    {
      char v34 = 11;
      goto LABEL_47;
    }
    if (v76 < v77)
    {
      if (*(unsigned __int8 *)(a2 + 47) < 0xCu) {
        goto LABEL_48;
      }
      char v37 = 11;
      goto LABEL_54;
    }
    if (((v58 | v59) & 0x20) != 0
      && (*(int *)(a1 + 3212) > 2
       || ((v58 | v59) & 2) == 0
       || !*(unsigned char *)(*(void *)(a1 + 64) + 300)))
    {
      unsigned int v86 = (v58 >> 5) & 1;
      unsigned int v87 = (v59 >> 5) & 1;
      if (v86 < v87)
      {
        char v34 = 7;
        goto LABEL_47;
      }
      if (v86 > v87)
      {
        if (*(unsigned __int8 *)(a2 + 47) < 8u) {
          goto LABEL_48;
        }
        char v37 = 7;
        goto LABEL_54;
      }
    }
    unsigned int v78 = (v58 >> 17) & 1;
    unsigned int v79 = (v59 >> 17) & 1;
    if (v78 < v79) {
      goto LABEL_68;
    }
    if (v78 > v79)
    {
LABEL_70:
      if (*(unsigned __int8 *)(a2 + 47) < 0xEu) {
        goto LABEL_48;
      }
      char v37 = 13;
      goto LABEL_54;
    }
    uint64_t v80 = *(void *)(a3 + 8);
    uint64_t v81 = *(void *)(v80 + 8);
    uint64_t v82 = *(unsigned __int16 **)(v81 + 16);
    unsigned int v83 = *v82;
    int v84 = 1;
    if (v83 > 0x979)
    {
      if (v83 - 8260 < 5 || v83 - 2426 < 4) {
        goto LABEL_156;
      }
    }
    else
    {
      BOOL v85 = v83 - 489 > 0x15 || ((1 << (v83 + 23)) & 0x3FFC03) == 0;
      if (!v85 || v83 == 337)
      {
LABEL_156:
        uint64_t v88 = *(void *)(a2 + 8);
        uint64_t v89 = *(void *)(v88 + 8);
        uint64_t v90 = *(unsigned __int16 **)(v89 + 16);
        unsigned int v91 = *v90;
        if (v91 > 0x979)
        {
          if (v91 - 8260 < 5 || v91 - 2426 < 4) {
            goto LABEL_168;
          }
        }
        else
        {
          BOOL v92 = v91 - 489 > 0x15 || ((1 << (v91 + 23)) & 0x3FFC03) == 0;
          if (!v92 || v91 == 337)
          {
LABEL_168:
            if ((v84 & 1) == 0)
            {
              if (*(unsigned __int8 *)(a2 + 47) < 0xAu) {
                goto LABEL_48;
              }
              char v37 = 9;
              goto LABEL_54;
            }
LABEL_169:
            if (*(unsigned char *)(a1 + 3263))
            {
              unsigned int v93 = (v58 >> 2) & 1;
              unsigned int v94 = (v59 >> 2) & 1;
              if (v93 > v94) {
                goto LABEL_95;
              }
              if (v93 < v94) {
                goto LABEL_102;
              }
            }
            else if (*(_DWORD *)(a1 + 3180) != 1 {
                   && *(_DWORD *)(a1 + 3204) + ((*(void *)(a1 + 1096) - *(void *)(a1 + 1088)) >> 3) != 1
            }
                   && ((v58 ^ v59) & 2) != 0
                   || (v59 & v58 & 2) != 0)
            {
              BOOL v95 = *(_DWORD *)(v88 + 200) == 1
                 && (*(unsigned __int8 *)(*(void *)(*(void *)((**(void **)(v88 + 32) & 0xFFFFFFFFFFFFFFF8) + 8)
                                                    + 16)
                                        + 16) >> 4) & 1;
              BOOL v96 = *(_DWORD *)(v80 + 200) == 1
                 && (*(unsigned __int8 *)(*(void *)(*(void *)((**(void **)(v80 + 32) & 0xFFFFFFFFFFFFFFF8) + 8)
                                                    + 16)
                                        + 16) >> 4) & 1;
              if (((v58 ^ v59) & 0x10000) == 0)
              {
                int v97 = v96 & (v58 >> 1);
                int v98 = v95 & (v59 >> 1);
                if (v98 == 1 && !v97) {
                  goto LABEL_95;
                }
                if ((v97 & (v98 ^ 1)) == 1) {
                  goto LABEL_102;
                }
              }
              if (*(unsigned char *)(a1 + 3264))
              {
                unsigned int v99 = (v58 >> 1) & 1;
                unsigned int v100 = (v59 >> 1) & 1;
                if (v99 < v100) {
                  goto LABEL_95;
                }
                if (v99 > v100) {
                  goto LABEL_102;
                }
              }
            }
            if ((v58 & v59 & 4) != 0)
            {
              unsigned int v108 = (v58 >> 1) & 1;
              unsigned int v109 = (v59 >> 1) & 1;
              if (v108 < v109) {
                goto LABEL_199;
              }
              if (v108 > v109) {
                goto LABEL_205;
              }
              unsigned int v112 = HIWORD(v58) & 1;
              unsigned int v113 = HIWORD(v59) & 1;
              if (v112 > v113) {
                goto LABEL_74;
              }
              if (v112 < v113) {
                goto LABEL_76;
              }
            }
            if ((v58 ^ v59))
            {
              if (!*(unsigned char *)(a1 + 3261)) {
                goto LABEL_250;
              }
              unsigned int v110 = *(_DWORD *)(a1 + 3188);
              if (v110)
              {
                if (v110 < *(_DWORD *)(a1 + 3200))
                {
LABEL_220:
                  if (*(unsigned char *)(a1 + 3260))
                  {
                    if (((v58 ^ v59) & 0x10) == 0 || !*(unsigned char *)(a1 + 3250)) {
                      goto LABEL_250;
                    }
                  }
                  else
                  {
                    if (((v58 ^ v59) & 8) != 0)
                    {
                      unsigned int v118 = *(_DWORD *)(a1 + 3220);
                      if (*(_DWORD *)(a1 + 3184) >= v118
                        && v118 <= ((*(void *)(a1 + 1208) - *(void *)(a1 + 1200)) >> 3))
                      {
                        unsigned int v119 = (v58 >> 3) & 1;
                        unsigned int v120 = (v59 >> 3) & 1;
                        if (v119 < v120) {
                          goto LABEL_95;
                        }
                        if (v119 > v120) {
                          goto LABEL_102;
                        }
                      }
                    }
                    if (((v58 ^ v59) & 0x10) == 0) {
                      goto LABEL_250;
                    }
                  }
                  unsigned int v121 = *(_DWORD *)(a1 + 3192);
                  if (v121 || *(_DWORD *)(a1 + 3188) <= 0xFu)
                  {
                    if (*(unsigned char *)(a1 + 3236))
                    {
                      unsigned int v121 = *(_DWORD *)(a1 + 3196);
                      unsigned int v122 = *(_DWORD *)(a1 + 3232);
                    }
                    else
                    {
                      unsigned int v122 = *(_DWORD *)(a1 + 3228);
                    }
                    if (v121 < v122) {
                      goto LABEL_250;
                    }
                  }
                  if (*(_DWORD *)(a1 + 3220) > ((*(void *)(a1 + 1152) - *(void *)(a1 + 1144)) >> 3)) {
                    goto LABEL_250;
                  }
                  unsigned int v127 = (v58 >> 4) & 1;
                  unsigned int v128 = (v59 >> 4) & 1;
                  if (v127 > v128) {
                    goto LABEL_95;
                  }
                  if (v127 >= v128) {
                    goto LABEL_250;
                  }
LABEL_102:
                  if (*(unsigned __int8 *)(a2 + 47) < 0xBu) {
                    goto LABEL_48;
                  }
                  char v37 = 10;
                  goto LABEL_54;
                }
              }
            }
            uint64_t v101 = *(void *)(a1 + 1528);
            uint64_t v102 = *(unsigned int *)(a1 + 1544);
            if (v102)
            {
              unsigned int v114 = v102 - 1;
              LODWORD(v103) = (v102 - 1) & ((v80 >> 4) ^ (v80 >> 9));
              uint64_t v104 = (uint64_t *)(v101 + 16 * v103);
              uint64_t v115 = *v104;
              if (v80 == *v104) {
                goto LABEL_240;
              }
              int v116 = 1;
              while (v115 != -4096)
              {
                int v117 = v103 + v116++;
                uint64_t v103 = v117 & v114;
                uint64_t v115 = *(void *)(v101 + 16 * v103);
                if (v80 == v115) {
                  goto LABEL_194;
                }
              }
            }
            uint64_t v103 = *(unsigned int *)(a1 + 1544);
LABEL_194:
            uint64_t v104 = (uint64_t *)(v101 + 16 * v103);
            if (!v102) {
              goto LABEL_195;
            }
            unsigned int v114 = v102 - 1;
LABEL_240:
            LODWORD(v123) = v114 & ((v88 >> 4) ^ (v88 >> 9));
            unsigned int v105 = (uint64_t *)(v101 + 16 * v123);
            uint64_t v124 = *v105;
            if (v88 == *v105)
            {
LABEL_196:
              int v106 = (uint64_t *)(v101 + 16 * v102);
              if (v104 == v106) {
                int v107 = 0x7FFFFFFF;
              }
              else {
                int v107 = *((_DWORD *)v104 + 2);
              }
              if (v105 == v106) {
                int v111 = 0x7FFFFFFF;
              }
              else {
                int v111 = *((_DWORD *)v105 + 2);
              }
              if (v107 < v111)
              {
                char v34 = 12;
                goto LABEL_47;
              }
              if (v107 > v111)
              {
                if (*(unsigned __int8 *)(a2 + 47) < 0xDu) {
                  goto LABEL_48;
                }
                char v37 = 12;
                goto LABEL_54;
              }
              if (!*(unsigned char *)(a1 + 3261))
              {
LABEL_250:
                unsigned int v129 = v58 & 1;
                unsigned int v130 = v59 & 1;
                if (v129 > v130)
                {
                  char v34 = 8;
                  goto LABEL_47;
                }
                if (v129 < v130)
                {
                  if (*(unsigned __int8 *)(a2 + 47) < 9u) {
                    goto LABEL_48;
                  }
                  char v37 = 8;
                  goto LABEL_54;
                }
                uint64_t v235 = 0;
                uint64_t v131 = *((void *)v82 + 2);
                if ((v131 & 0xD00) == 0x500 && (*((void *)v90 + 2) & 0xD00) == 0x500
                  || (v131 & 0xE00) == 0x600 && (*((void *)v90 + 2) & 0xE00) == 0x600)
                {
                  uint64_t v236 = 0;
                  uint64_t v237 = 0;
                  if (sub_1CB9572E8(v81, (int *)&v236 + 1, (_DWORD *)&v235 + 1, (_DWORD *)&v237 + 1))
                  {
                    if (sub_1CB9572E8(v89, (int *)&v236, &v235, &v237) && HIDWORD(v236) == v236)
                    {
                      if (SHIDWORD(v235) > (int)v235)
                      {
                        int v132 = (unsigned char *)(a3 + 47);
LABEL_266:
                        unsigned char *v132 = 22;
                        goto LABEL_48;
                      }
                      if (SHIDWORD(v235) < (int)v235)
                      {
                        int v132 = (unsigned char *)(a2 + 47);
                        if (*(unsigned __int8 *)(a2 + 47) <= 0x16u) {
                          goto LABEL_48;
                        }
                        goto LABEL_266;
                      }
                    }
                  }
                }
                if ((*(_WORD *)(a3 + 48) & 2) != 0
                  && (*(_WORD *)(a2 + 48) & 2) != 0
                  && *(unsigned __int16 *)(*(void *)(a2 + 8) + 226) == *(unsigned __int16 *)(*(void *)(a3 + 8)
                                                                                               + 226))
                {
                  int v133 = *(_DWORD *)(a3 + 36);
                  if (v133 == -1)
                  {
                    unsigned int v134 = sub_1CBA7D51C(a1, a3);
                    unsigned int v135 = *(unsigned __int16 *)(*(void *)(a3 + 8) + 226);
                    unsigned int v136 = v135 - v134;
                    if (v135 < v134) {
                      unsigned int v136 = 0;
                    }
                    if (v134) {
                      int v133 = v136;
                    }
                    else {
                      int v133 = *(unsigned __int16 *)(*(void *)(a3 + 8) + 226);
                    }
                    *(_DWORD *)(a3 + 36) = v133;
                  }
                  signed int v137 = *(_DWORD *)(a2 + 36);
                  if (v137 == -1)
                  {
                    unsigned int v138 = sub_1CBA7D51C(a1, a2);
                    signed int v137 = *(unsigned __int16 *)(*(void *)(a2 + 8) + 226);
                    int v139 = v137 - v138;
                    if (v137 < v138) {
                      int v139 = 0;
                    }
                    if (v138) {
                      signed int v137 = v139;
                    }
                    *(_DWORD *)(a2 + 36) = v137;
                  }
                  if (v133 > v137)
                  {
                    char v34 = 4;
                    goto LABEL_47;
                  }
                  if (v133 < v137)
                  {
                    if (*(unsigned __int8 *)(a2 + 47) < 5u) {
                      goto LABEL_48;
                    }
                    char v37 = 4;
                    goto LABEL_54;
                  }
                }
                else if ((*(_WORD *)(a3 + 48) & 0x20) == 0 && (*(_WORD *)(a2 + 48) & 0x20) == 0)
                {
                  unsigned int v140 = sub_1CBA7D51C(a1, a3);
                  if (((v140 < 0x10) & ((*(unsigned __int16 *)(a3 + 48) | (*(unsigned __int8 *)(a3 + 50) << 16)) >> 2)) != 0) {
                    signed int v141 = 0;
                  }
                  else {
                    signed int v141 = v140;
                  }
                  unsigned int v142 = sub_1CBA7D51C(a1, a2);
                  if (((v142 < 0x10) & ((*(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16)) >> 2)) != 0) {
                    signed int v143 = 0;
                  }
                  else {
                    signed int v143 = v142;
                  }
                  if (v141 < v143) {
                    goto LABEL_199;
                  }
                  if (v141 > v143) {
                    goto LABEL_205;
                  }
                }
                if (*(unsigned char *)(a1 + 3262)) {
                  goto LABEL_300;
                }
                unsigned int v155 = (*(unsigned __int16 *)(a3 + 48) >> 6) & 1;
                unsigned int v156 = (*(unsigned __int16 *)(a2 + 48) >> 6) & 1;
                if (v155 >= v156)
                {
                  if (v155 <= v156)
                  {
LABEL_300:
                    if (!*(unsigned char *)(*(void *)(a1 + 64) + 323)) {
                      goto LABEL_309;
                    }
                    uint64_t v144 = *(void *)(a1 + 128);
                    if (v144)
                    {
                      int v145 = sub_1CBA7EB80(a1, *(void *)(a3 + 8), v144, 2u);
                      int v146 = sub_1CBA7EB80(a1, *(void *)(a2 + 8), *(void *)(a1 + 128), 2u);
                      if (v146 && !v145) {
                        goto LABEL_199;
                      }
                      if ((v145 & (v146 ^ 1)) == 1) {
                        goto LABEL_205;
                      }
                    }
                    uint64_t v147 = *(void *)(a1 + 120);
                    if (!v147) {
                      goto LABEL_309;
                    }
                    int v148 = sub_1CBA7EB80(a1, *(void *)(a3 + 8), v147, 1u);
                    int v149 = sub_1CBA7EB80(a1, *(void *)(a2 + 8), *(void *)(a1 + 120), 1u);
                    if (!v149 || v148)
                    {
                      if ((v148 & (v149 ^ 1)) != 1)
                      {
LABEL_309:
                        if (!*(unsigned char *)(a1 + 3260))
                        {
                          unsigned int v157 = (*(unsigned __int16 *)(a3 + 48) >> 14) & 1;
                          unsigned int v158 = (*(unsigned __int16 *)(a2 + 48) >> 14) & 1;
                          if (v157 > v158)
                          {
                            char v34 = 19;
                            goto LABEL_47;
                          }
                          if (v157 < v158)
                          {
                            if (*(unsigned __int8 *)(a2 + 47) < 0x14u) {
                              goto LABEL_48;
                            }
                            char v37 = 19;
                            goto LABEL_54;
                          }
                        }
                        if (*(unsigned char *)(a1 + 3250) || *(unsigned char *)(a1 + 3251))
                        {
                          if (!*(unsigned char *)(a1 + 3260))
                          {
                            int v150 = *(unsigned __int16 *)(a3 + 48);
                            unsigned int v151 = v150 | (*(unsigned __int8 *)(a3 + 50) << 16);
                            if ((v150 & 0x400) == 0)
                            {
                              unsigned int v152 = *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16);
                              if (!(*(_WORD *)(a2 + 48) & 0x420 | v151 & 0x20) && ((v152 ^ v151) & 1) == 0)
                              {
                                unsigned int v153 = (v151 >> 15) & 1;
                                unsigned int v154 = (v152 >> 15) & 1;
                                if (v153 > v154)
                                {
                                  char v34 = 17;
                                  goto LABEL_47;
                                }
                                if (v153 < v154)
                                {
                                  if (*(unsigned __int8 *)(a2 + 47) < 0x12u) {
                                    goto LABEL_48;
                                  }
                                  char v37 = 17;
                                  goto LABEL_54;
                                }
                              }
                            }
                          }
                          if (*(unsigned char *)(a1 + 3250)) {
                            goto LABEL_335;
                          }
                        }
                        uint64_t v159 = *(void *)(a1 + 64);
                        if (*(unsigned char *)(v159 + 318)) {
                          goto LABEL_335;
                        }
                        if (!*(unsigned char *)(a1 + 3260))
                        {
                          unsigned int v174 = *(unsigned __int8 *)(a3 + 45);
                          unsigned int v175 = *(unsigned __int8 *)(a2 + 45);
                          if (v174 > v175) {
                            goto LABEL_445;
                          }
                          if (v174 < v175)
                          {
LABEL_447:
                            if (*(unsigned __int8 *)(a2 + 47) < 4u) {
                              goto LABEL_48;
                            }
                            char v37 = 3;
                            goto LABEL_54;
                          }
                        }
                        if (*(unsigned char *)(v159 + 401))
                        {
LABEL_335:
                          uint64_t v160 = *(void *)(a3 + 8);
                          if ((*(unsigned char *)(v160 + 236) & 1) == 0) {
                            llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a3 + 8));
                          }
                          int v161 = *(_DWORD *)(v160 + 240);
                          uint64_t v162 = *(void *)(a2 + 8);
                          if ((*(unsigned char *)(v162 + 236) & 1) == 0) {
                            llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a2 + 8));
                          }
                          if (v161 - *(_DWORD *)(v162 + 240) >= 0) {
                            unsigned int v163 = v161 - *(_DWORD *)(v162 + 240);
                          }
                          else {
                            unsigned int v163 = *(_DWORD *)(v162 + 240) - v161;
                          }
                          unint64_t v164 = *(llvm::SUnit ***)(a1 + 1088);
                          uint64_t v165 = *(llvm::SUnit ***)(a1 + 1096);
                          if (v164 == v165)
                          {
                            BOOL v170 = 0;
                          }
                          else
                          {
                            if ((*(_WORD *)(a2 + 48) & 4) != 0 || (*(_WORD *)(a3 + 48) & 4) != 0) {
                              goto LABEL_357;
                            }
                            unsigned int v166 = -1;
                            do
                            {
                              BOOL v167 = *v164;
                              if ((*((unsigned char *)*v164 + 236) & 1) == 0) {
                                llvm::SUnit::ComputeDepth(*v164);
                              }
                              if (v166 >= *((_DWORD *)v167 + 60) + *((unsigned __int16 *)v167 + 113)) {
                                unsigned int v166 = *((_DWORD *)v167 + 60) + *((unsigned __int16 *)v167 + 113);
                              }
                              ++v164;
                            }
                            while (v164 != v165);
                            uint64_t v168 = *(void *)(a2 + 8);
                            if ((*(unsigned char *)(v168 + 236) & 1) == 0) {
                              llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a2 + 8));
                            }
                            if (*(_DWORD *)(v168 + 240) >= v166)
                            {
LABEL_357:
                              BOOL v170 = 1;
                            }
                            else
                            {
                              uint64_t v169 = *(void *)(a3 + 8);
                              if ((*(unsigned char *)(v169 + 236) & 1) == 0) {
                                llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a3 + 8));
                              }
                              BOOL v170 = *(_DWORD *)(v169 + 240) >= v166;
                            }
                          }
                          char v171 = v163 > 4 && v170;
                          if (*(void *)(a1 + 920) == *(void *)(a1 + 928) && (v171 & 1) == 0)
                          {
                            unsigned int v172 = sub_1CBA7D654(a1, a3);
                            unsigned int v173 = sub_1CBA7D654(a1, a2);
                            if ((!v172 || !v173) && (v172 > 1 || v173 >= 2))
                            {
                              if (v172 > v173)
                              {
                                char v34 = 25;
                                goto LABEL_47;
                              }
                              if (v172 < v173)
                              {
                                if (*(unsigned __int8 *)(a2 + 47) < 0x1Au) {
                                  goto LABEL_48;
                                }
                                char v37 = 25;
                                goto LABEL_54;
                              }
                            }
                          }
                          if (*(_WORD *)(a3 + 48) & 0x400 | *(_WORD *)(a2 + 48) & 0x400
                            || !*(unsigned char *)(a1 + 3250)
                            && (*(unsigned char *)(a1 + 3260) ? (char v179 = 1) : (char v179 = v171), (v179 & 1) == 0))
                          {
                            int v176 = *(_DWORD *)(a3 + 16);
                            if (v176 == 0x7FFFFFFF)
                            {
                              uint64_t v177 = 0;
                              unint64_t v178 = *(void *)(*(void *)(a1 + 8) + 3104)
                                   + ((unint64_t)*(unsigned int *)(*(void *)(a3 + 8) + 192) << 6);
                              while (!(unsigned __int16)*(_DWORD *)(v178 + v177)
                                   || (unsigned __int16)*(_DWORD *)(v178 + v177) - 1 != *(_DWORD *)(a1 + 3144))
                              {
                                v177 += 4;
                                if (v177 == 64)
                                {
                                  int v176 = 0;
                                  goto LABEL_390;
                                }
                              }
                              int v176 = *(int *)(v178 + v177) >> 16;
LABEL_390:
                              *(_DWORD *)(a3 + 16) = v176;
                            }
                            int v180 = *(_DWORD *)(a2 + 16);
                            if (v180 == 0x7FFFFFFF)
                            {
                              uint64_t v181 = 0;
                              unint64_t v182 = *(void *)(*(void *)(a1 + 8) + 3104)
                                   + ((unint64_t)*(unsigned int *)(*(void *)(a2 + 8) + 192) << 6);
                              while (!(unsigned __int16)*(_DWORD *)(v182 + v181)
                                   || (unsigned __int16)*(_DWORD *)(v182 + v181) - 1 != *(_DWORD *)(a1 + 3144))
                              {
                                v181 += 4;
                                if (v181 == 64)
                                {
                                  int v180 = 0;
                                  goto LABEL_398;
                                }
                              }
                              int v180 = *(int *)(v182 + v181) >> 16;
LABEL_398:
                              *(_DWORD *)(a2 + 16) = v180;
                            }
                            if (v176 < v180) {
                              goto LABEL_400;
                            }
                            if (v176 > v180)
                            {
LABEL_402:
                              if (*(unsigned __int8 *)(a2 + 47) < 0x13u) {
                                goto LABEL_48;
                              }
                              char v37 = 18;
                              goto LABEL_54;
                            }
                          }
                          uint64_t v183 = *(void *)(a3 + 8);
                          if ((*(unsigned char *)(v183 + 236) & 1) == 0) {
                            llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a3 + 8));
                          }
                          unsigned int v184 = *(_DWORD *)(v183 + 240);
                          uint64_t v185 = *(void *)(a2 + 8);
                          if ((*(unsigned char *)(v185 + 236) & 1) == 0) {
                            llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a2 + 8));
                          }
                          unsigned int v186 = *(_DWORD *)(v185 + 240);
                          if (v184 > v186) {
                            unsigned int v186 = v184;
                          }
                          if (*(_DWORD *)(*(void *)(a1 + 1600) + 4 * *(unsigned int *)(a1 + 3156)) > *(_DWORD *)(*(void *)(a1 + 16) + 276) * v186)
                          {
                            int v187 = sub_1CBA7EF80(a1, a3);
                            int v188 = sub_1CBA7EF80(a1, a2);
                            if (v187 > v188)
                            {
                              char v34 = 23;
                              goto LABEL_47;
                            }
                            if (v187 < v188)
                            {
                              if (*(unsigned __int8 *)(a2 + 47) < 0x18u) {
                                goto LABEL_48;
                              }
                              char v37 = 23;
                              goto LABEL_54;
                            }
                          }
                          if (!*(unsigned char *)(a1 + 3250) || *(unsigned char *)(a1 + 3260))
                          {
                            uint64_t v189 = *(void *)(a3 + 8);
                            if ((*(unsigned char *)(v189 + 236) & 1) == 0) {
                              llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a3 + 8));
                            }
                            int v190 = *(_DWORD *)(v189 + 240);
                            uint64_t v191 = *(void *)(a2 + 8);
                            if ((*(unsigned char *)(v191 + 236) & 1) == 0) {
                              llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a2 + 8));
                            }
                            int v192 = *(_DWORD *)(v191 + 240);
                            if (v190 > v192)
                            {
                              char v34 = 26;
                              goto LABEL_47;
                            }
                            if (v190 < v192)
                            {
                              if (*(unsigned __int8 *)(a2 + 47) < 0x1Bu) {
                                goto LABEL_48;
                              }
                              char v37 = 26;
                              goto LABEL_54;
                            }
                          }
                          if (*(unsigned char *)(*(void *)(a1 + 64) + 318)
                            || (*(_WORD *)(a2 + 48) & 4) != 0
                            || (*(_WORD *)(a3 + 48) & 4) != 0
                            || *(unsigned char *)(a1 + 3249)
                            || *(unsigned char *)(a1 + 3252))
                          {
                            goto LABEL_432;
                          }
                          uint64_t v205 = *(void *)(*(void *)(a2 + 8) + 8);
                          uint64_t v206 = *(unsigned int *)(v205 + 40);
                          if (v206)
                          {
                            int v207 = 0;
                            BOOL v208 = *(unsigned int **)(v205 + 32);
                            unsigned int v209 = &v208[8 * v206];
                            while (1)
                            {
                              unsigned int v210 = *v208;
                              if (!*v208)
                              {
                                unsigned int v211 = v208[1];
                                if (*(unsigned char *)(a1 + 144))
                                {
                                  int v212 = 32;
                                  uint64_t v213 = a1 + 152;
                                  goto LABEL_476;
                                }
                                int v212 = *(_DWORD *)(a1 + 160);
                                if (v212)
                                {
                                  uint64_t v213 = *(void *)(a1 + 152);
LABEL_476:
                                  int v214 = (37 * v211) ^ (37 * ((v210 >> 8) & 0xFFF));
                                  int v215 = v212 - 1;
                                  for (int i = 1; ; ++i)
                                  {
                                    unsigned int v217 = v214 & v215;
                                    uint64_t v218 = v213 + 8 * v217;
                                    if (v211 == *(_DWORD *)v218
                                      && ((*(_WORD *)(v218 + 4) ^ (unsigned __int16)(v210 >> 8)) & 0xFFF) == 0)
                                    {
                                      break;
                                    }
                                    if (*(_DWORD *)v218 == -1 && (~*(unsigned __int16 *)(v218 + 4) & 0xFFF) == 0) {
                                      goto LABEL_470;
                                    }
                                    int v214 = v217 + i;
                                  }
                                  if ((v210 & 0x1000000) != 0) {
                                    v207 += 4;
                                  }
                                  else {
                                    ++v207;
                                  }
                                }
                              }
LABEL_470:
                              v208 += 8;
                              if (v208 == v209) {
                                goto LABEL_487;
                              }
                            }
                          }
                          int v207 = 0;
LABEL_487:
                          uint64_t v219 = *(void *)(*(void *)(a3 + 8) + 8);
                          uint64_t v220 = *(unsigned int *)(v219 + 40);
                          if (v220)
                          {
                            int v221 = 0;
                            uint64_t v222 = *(unsigned int **)(v219 + 32);
                            uint64_t v223 = &v222[8 * v220];
                            while (1)
                            {
                              unsigned int v224 = *v222;
                              if (!*v222)
                              {
                                unsigned int v225 = v222[1];
                                if (*(unsigned char *)(a1 + 144))
                                {
                                  int v226 = 32;
                                  uint64_t v227 = a1 + 152;
                                  goto LABEL_496;
                                }
                                int v226 = *(_DWORD *)(a1 + 160);
                                if (v226)
                                {
                                  uint64_t v227 = *(void *)(a1 + 152);
LABEL_496:
                                  int v228 = (37 * v225) ^ (37 * ((v224 >> 8) & 0xFFF));
                                  int v229 = v226 - 1;
                                  for (int j = 1; ; ++j)
                                  {
                                    unsigned int v231 = v228 & v229;
                                    uint64_t v232 = v227 + 8 * v231;
                                    if (v225 == *(_DWORD *)v232
                                      && ((*(_WORD *)(v232 + 4) ^ (unsigned __int16)(v224 >> 8)) & 0xFFF) == 0)
                                    {
                                      break;
                                    }
                                    if (*(_DWORD *)v232 == -1 && (~*(unsigned __int16 *)(v232 + 4) & 0xFFF) == 0) {
                                      goto LABEL_490;
                                    }
                                    int v228 = v231 + j;
                                  }
                                  if ((v224 & 0x1000000) != 0) {
                                    v221 += 4;
                                  }
                                  else {
                                    ++v221;
                                  }
                                }
                              }
LABEL_490:
                              v222 += 8;
                              if (v222 == v223) {
                                goto LABEL_507;
                              }
                            }
                          }
                          int v221 = 0;
LABEL_507:
                          if (v221 > v207)
                          {
LABEL_508:
                            char v34 = 28;
                            goto LABEL_47;
                          }
                          if (v221 >= v207)
                          {
                            unsigned int v233 = sub_1CBA7F0B8(a1, a3);
                            unsigned int v234 = sub_1CBA7F0B8(a1, a2);
                            if (v233 > v234) {
                              goto LABEL_508;
                            }
                            if (v233 >= v234)
                            {
LABEL_432:
                              if (*(unsigned char *)(a1 + 3250)) {
                                goto LABEL_433;
                              }
                              unsigned int v198 = *(unsigned __int8 *)(a3 + 45);
                              unsigned int v199 = *(unsigned __int8 *)(a2 + 45);
                              if (v198 > v199)
                              {
LABEL_445:
                                char v34 = 3;
                                goto LABEL_47;
                              }
                              if (v198 >= v199)
                              {
LABEL_433:
                                int v193 = *(_DWORD *)(a3 + 16);
                                if (v193 == 0x7FFFFFFF)
                                {
                                  uint64_t v194 = 0;
                                  unint64_t v195 = *(void *)(*(void *)(a1 + 8) + 3104)
                                       + ((unint64_t)*(unsigned int *)(*(void *)(a3 + 8) + 192) << 6);
                                  while (!(unsigned __int16)*(_DWORD *)(v195 + v194)
                                       || (unsigned __int16)*(_DWORD *)(v195 + v194) - 1 != *(_DWORD *)(a1 + 3144))
                                  {
                                    v194 += 4;
                                    if (v194 == 64)
                                    {
                                      int v193 = 0;
                                      goto LABEL_450;
                                    }
                                  }
                                  int v193 = *(int *)(v195 + v194) >> 16;
LABEL_450:
                                  *(_DWORD *)(a3 + 16) = v193;
                                }
                                int v200 = *(_DWORD *)(a2 + 16);
                                if (v200 == 0x7FFFFFFF)
                                {
                                  uint64_t v201 = 0;
                                  unint64_t v202 = *(void *)(*(void *)(a1 + 8) + 3104)
                                       + ((unint64_t)*(unsigned int *)(*(void *)(a2 + 8) + 192) << 6);
                                  while (!(unsigned __int16)*(_DWORD *)(v202 + v201)
                                       || (unsigned __int16)*(_DWORD *)(v202 + v201) - 1 != *(_DWORD *)(a1 + 3144))
                                  {
                                    v201 += 4;
                                    if (v201 == 64)
                                    {
                                      int v200 = 0;
                                      goto LABEL_458;
                                    }
                                  }
                                  int v200 = *(int *)(v202 + v201) >> 16;
LABEL_458:
                                  *(_DWORD *)(a2 + 16) = v200;
                                }
                                if (v193 >= v200)
                                {
                                  if (v193 <= v200)
                                  {
                                    if (*(_DWORD *)(*(void *)(a3 + 8) + 192) <= *(_DWORD *)(*(void *)(a2 + 8)
                                                                                               + 192))
                                      goto LABEL_48;
                                    char v34 = 27;
LABEL_47:
                                    *(unsigned char *)(a3 + 47) = v34;
                                    goto LABEL_48;
                                  }
                                  goto LABEL_402;
                                }
LABEL_400:
                                char v34 = 18;
                                goto LABEL_47;
                              }
                              goto LABEL_447;
                            }
                          }
                          if (*(unsigned __int8 *)(a2 + 47) < 0x1Du) {
                            goto LABEL_48;
                          }
                          char v37 = 28;
LABEL_54:
                          *(unsigned char *)(a2 + 47) = v37;
                          goto LABEL_48;
                        }
                        BOOL v196 = sub_1CBA7EC68(a1, *(void *)(a3 + 8));
                        BOOL v197 = sub_1CBA7EC68(a1, *(void *)(a2 + 8));
                        if (!v196 || v197)
                        {
                          if (v197 && !v196) {
                            goto LABEL_442;
                          }
                          unsigned int v203 = sub_1CBA7ED88((void *)a1, a3);
                          unsigned int v204 = sub_1CBA7ED88((void *)a1, a2);
                          if (v203 <= v204)
                          {
                            if (v203 >= v204) {
                              goto LABEL_335;
                            }
LABEL_442:
                            if (*(unsigned __int8 *)(a2 + 47) < 0x10u) {
                              goto LABEL_48;
                            }
                            char v37 = 15;
                            goto LABEL_54;
                          }
                        }
                        char v34 = 15;
                        goto LABEL_47;
                      }
LABEL_205:
                      if (*(unsigned __int8 *)(a2 + 47) < 6u) {
                        goto LABEL_48;
                      }
                      char v37 = 5;
                      goto LABEL_54;
                    }
LABEL_199:
                    char v34 = 5;
                    goto LABEL_47;
                  }
LABEL_52:
                  if (*(unsigned __int8 *)(a2 + 47) < 2u) {
                    goto LABEL_48;
                  }
                  char v37 = 1;
                  goto LABEL_54;
                }
LABEL_46:
                char v34 = 1;
                goto LABEL_47;
              }
              goto LABEL_220;
            }
            int v125 = 1;
            while (v124 != -4096)
            {
              int v126 = v123 + v125++;
              uint64_t v123 = v126 & v114;
              uint64_t v124 = *(void *)(v101 + 16 * v123);
              if (v88 == v124)
              {
                unsigned int v105 = (uint64_t *)(v101 + 16 * v123);
                goto LABEL_196;
              }
            }
LABEL_195:
            unsigned int v105 = (uint64_t *)(v101 + 16 * v102);
            goto LABEL_196;
          }
        }
        if (v84)
        {
          char v34 = 9;
          goto LABEL_47;
        }
        goto LABEL_169;
      }
    }
    int v84 = 0;
    goto LABEL_156;
  }
LABEL_49:
  __n128 result = *(__n128 *)a3;
  long long v35 = *(_OWORD *)(a3 + 16);
  long long v36 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 47) = *(_DWORD *)(a3 + 47);
  *(_OWORD *)(a2 + 16) = v35;
  *(_OWORD *)(a2 + 32) = v36;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_1CBA7D51C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(unsigned int *)(a2 + 32);
  if (result == -1)
  {
    unsigned int v5 = sub_1CBA7DF54(a1, *(void *)(a2 + 8), 0);
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v7 = *(void *)(v6 + 24);
    if (!v7)
    {
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v7 = *(void *)(v8 + 672) + 24 * *(unsigned __int16 *)(*(void *)(*(void *)(v6 + 8) + 16) + 6);
      if ((*(_WORD *)(v7 + 8) & 0x1FFF) == 0x1FFE)
      {
        do
        {
          unsigned int v13 = (*(uint64_t (**)(void))(**(void **)(v8 + 808) + 200))(*(void *)(v8 + 808));
          uint64_t v14 = *(void *)(v8 + 672);
        }
        while ((*(_WORD *)(v14 + 24 * v13 + 8) & 0x1FFF) == 0x1FFE);
        uint64_t v7 = v14 + 24 * v13;
      }
      *(void *)(v6 + 24) = v7;
    }
    int v9 = *(_WORD *)(v7 + 8) & 0x1FFF;
    if (v9 == 0x1FFF) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = (v9 - 1);
    }
    uint64_t v11 = v5 - v10;
    uint64_t v12 = *(unsigned int *)(a1 + 3152);
    if (v11 <= v12) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = (v11 - v12);
    }
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t sub_1CBA7D654(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(a2 + 42);
  if (v2 == 0xFFFF)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(unsigned int *)(v3 + 40);
    if (v4)
    {
      LOWORD(v2) = 0;
      unsigned int v5 = *(void **)(v3 + 32);
      uint64_t v6 = 16 * v4;
      while (1)
      {
        unint64_t v7 = *v5 & 0xFFFFFFFFFFFFFFF8;
        if (*(_DWORD *)(v7 + 212) != 1)
        {
          __int16 v8 = 0;
          goto LABEL_15;
        }
        __int16 v8 = 0;
        uint64_t v9 = *(void *)(v7 + 8);
        uint64_t v10 = *(void *)(a1 + 64);
        unsigned int v11 = **(unsigned __int16 **)(v9 + 16);
        if (v11 > 0x865)
        {
          if (v11 == 4578 || v11 == 4580)
          {
            __int16 v8 = 1;
            goto LABEL_15;
          }
          if (v11 == 2150) {
LABEL_8:
          }
            __int16 v8 = *(unsigned char *)(v10 + 338) != 0;
        }
        else
        {
          if (v11 == 1100)
          {
            __int16 v8 = *(unsigned __int8 *)(v10 + 338);
            if (*(unsigned char *)(v10 + 338)) {
              __int16 v8 = *(unsigned __int8 *)(*(void *)(v9 + 32) + 64) == 7;
            }
            goto LABEL_15;
          }
          if (v11 == 2114) {
            goto LABEL_8;
          }
        }
LABEL_15:
        LOWORD(v2) = v2 + v8;
        v5 += 2;
        v6 -= 16;
        if (!v6) {
          goto LABEL_21;
        }
      }
    }
    LOWORD(v2) = 0;
LABEL_21:
    *(_WORD *)(a2 + 42) = v2;
  }
  return (unsigned __int16)v2;
}

uint64_t sub_1CBA7D738(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int16 **)(a2 + 16);
  int v5 = *v4;
  BOOL v7 = (v5 - 9) <= 0x3C && ((1 << (v5 - 9)) & 0x1000000000000605) != 0 || v5 == 0;
  if (!v7 && !(*((void *)v4 + 1) & 0x10 | *((void *)v4 + 2) & 1))
  {
    if ((*((void *)v4 + 2) & 0x10) != 0) {
      return a1 + 1000;
    }
    if ((v5 - 4581) <= 0xB) {
      return a1 + 1224;
    }
    if (sub_1CBA7B1D8(a2)) {
      return a1 + 1056;
    }
    if (sub_1CBA7DE84(a2)) {
      return a1 + 1112;
    }
    if (sub_1CBA7BA60(a2)) {
      return a1 + 1168;
    }
    return a1 + 1280;
  }
  BOOL v9 = 0;
  uint64_t v10 = *(void *)(a1 + 64);
  if (*v4 > 0x865u)
  {
    if (v5 == 4578 || v5 == 4580) {
      return a1 + 888;
    }
    if (v5 != 2150) {
      goto LABEL_21;
    }
    goto LABEL_15;
  }
  if (v5 == 1100)
  {
    if (*(unsigned char *)(v10 + 338)) {
      BOOL v9 = *(unsigned char *)(*(void *)(a2 + 32) + 64) == 7;
    }
    else {
      BOOL v9 = 0;
    }
  }
  else if (v5 == 2114)
  {
LABEL_15:
    BOOL v9 = *(unsigned char *)(v10 + 338) != 0;
  }
LABEL_21:
  if (v9 || (*((void *)v4 + 2) & 0xD00) == 0x900 || (*((void *)v4 + 2) & 0xE00) == 0xA00) {
    return a1 + 888;
  }
  if ((*((unsigned char *)v4 + 9) & 0x20) != 0) {
    return a1 + 944;
  }
  else {
    return a1 + 832;
  }
}

uint64_t sub_1CBA7D8B4(uint64_t a1)
{
  int v1 = *(unsigned __int16 **)(a1 + 16);
  unsigned int v2 = *v1;
  uint64_t v3 = 1;
  if (v2 > 0x12)
  {
    if (v2 == 19)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      return *(unsigned char *)v6
          || *(unsigned char *)(v6 + 32)
          || (*(_DWORD *)(v6 + 4) - 1) < 0x3FFFFFFF
          || (*(_DWORD *)(v6 + 36) - 1) <= 0x3FFFFFFE;
    }
    if (v2 == 69) {
      return v3;
    }
    return (v1[4] & 0x10) != 0;
  }
  if (*v1 <= 0x11u && v2 != 0 && v2 != 9)
  {
    if (v2 == 11) {
      return 1;
    }
    return (v1[4] & 0x10) != 0;
  }
  return v3;
}

BOOL sub_1CBA7D95C(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (!a1 || !a2) {
    return result;
  }
  uint64_t v4 = *(void **)(a1 + 8);
  int v5 = *(void **)(a2 + 8);
  uint64_t v6 = v4[2];
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v5[2];
  if ((v7 & 0xD00) == 0x500 && (*(void *)(v8 + 16) & 0xD00) == 0x500
    || (v7 & 0xE00) == 0x600 && (*(void *)(v8 + 16) & 0xE00) == 0x600)
  {
    unint64_t v9 = v4[6];
    if (v9 >= 8)
    {
      if ((v9 & 7) != 0)
      {
        uint64_t v10 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
        BOOL v11 = (v4[6] & 7) != 3 || v10 == 0;
        if (v11 || !*v10) {
          goto LABEL_14;
        }
      }
      else
      {
        v9 &= 0xFFFFFFFFFFFFFFF8;
        v4[6] = v9;
      }
      if ((v9 & 7) != 0)
      {
        BOOL v22 = *(uint64_t **)((v9 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        BOOL v22 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF8);
        v4[6] = v22;
      }
      UnderlyingObject = 0;
      uint64_t v24 = *v22;
      if ((*v22 & 4) == 0 && (v24 & 0xFFFFFFFFFFFFFFF8) != 0) {
        UnderlyingObject = llvm::getUnderlyingObject((llvm *)(v24 & 0xFFFFFFFFFFFFFFF8), (const llvm::Value *)6);
      }
LABEL_15:
      unint64_t v13 = v5[6];
      if (v13 >= 8)
      {
        if ((v13 & 7) != 0)
        {
          uint64_t v14 = (_DWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
          BOOL v15 = (v5[6] & 7) != 3 || v14 == 0;
          if (v15 || !*v14) {
            goto LABEL_22;
          }
        }
        else
        {
          v13 &= 0xFFFFFFFFFFFFFFF8;
          v5[6] = v13;
        }
        if ((v13 & 7) != 0)
        {
          int v23 = *(uint64_t **)((v13 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          int v23 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF8);
          v5[6] = v23;
        }
        uint64_t v16 = 0;
        uint64_t v25 = *v23;
        if ((v25 & 4) == 0)
        {
          unsigned int v26 = (llvm *)(v25 & 0xFFFFFFFFFFFFFFF8);
          if (v26) {
            uint64_t v16 = llvm::getUnderlyingObject(v26, (const llvm::Value *)6);
          }
        }
        return UnderlyingObject && UnderlyingObject == v16;
      }
LABEL_22:
      uint64_t v16 = 0;
      return UnderlyingObject && UnderlyingObject == v16;
    }
LABEL_14:
    UnderlyingObject = 0;
    goto LABEL_15;
  }
  BOOL result = 0;
  if ((v7 & 2) != 0 && (*(void *)(v8 + 16) & 2) != 0)
  {
    uint64_t v18 = v4[4] + 32 * *(unsigned __int8 *)(v6 + 4);
    int v20 = *(unsigned __int8 *)(v18 + 64);
    uint64_t v19 = (llvm::MachineOperand *)(v18 + 64);
    if (v20 == 7
      && (BOOL v21 = (const llvm::MachineOperand *)(v5[4] + 32 * *(unsigned __int8 *)(v8 + 4) + 64), *(unsigned char *)v21 == 7))
    {
      return llvm::MachineOperand::isIdenticalTo(v19, v21);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

int *sub_1CBA7DB34(uint64_t a1, unsigned int a2)
{
  v15[96] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x21)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v12 = *(uint64_t **)(a1 + 8);
    unsigned int v13 = *(_DWORD *)(a1 + 16);
    if (a2 <= 0x20)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v14 = a2;
      *(void *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v14;
    }
    sub_1CBA7DD00((int *)a1, v12, &v12[3 * v13]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  uint64_t v7 = v15;
  do
  {
    uint64_t v9 = *(void *)(a1 + v6 + 8);
    uint64_t v8 = *(void *)(a1 + v6 + 16);
    if ((v9 != -4096 || v8 != -4096) && (v9 != -8192 || v8 != -8192))
    {
      *(_OWORD *)uint64_t v7 = *(_OWORD *)(a1 + v6 + 8);
      *((unsigned char *)v7 + 16) = *(unsigned char *)(a1 + v6 + 24);
      v7 += 3;
    }
    v6 += 24;
  }
  while (v6 != 768);
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v10 = a2;
    *(void *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v10;
  }
  return sub_1CBA7DD00((int *)a1, v15, v7);
}

int *sub_1CBA7DD00(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    unint64_t v4 = (int64x2_t *)(result + 194);
    int v5 = (int64x2_t *)(result + 2);
  }
  else
  {
    unsigned int v27 = result[4];
    if (!v27) {
      goto LABEL_5;
    }
    int v5 = (int64x2_t *)*((void *)result + 1);
    unint64_t v4 = (int64x2_t *)((char *)v5 + 24 * v27);
  }
  int64x2_t v6 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *int v5 = v6;
    int v5 = (int64x2_t *)((char *)v5 + 24);
  }
  while (v5 != v4);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    if ((*a2 != -4096 || v8 != -4096) && (v7 != -8192 || v8 != -8192))
    {
      if (*(unsigned char *)result)
      {
        int v10 = 32;
        uint64_t v9 = result + 2;
      }
      else
      {
        uint64_t v9 = (int *)*((void *)result + 1);
        int v10 = result[4];
      }
      unint64_t v11 = ((v8 >> 4) ^ (v8 >> 9) | ((unint64_t)((v7 >> 4) ^ (v7 >> 9)) << 32))
          + ~((unint64_t)((v8 >> 4) ^ (v8 >> 9)) << 32);
      unint64_t v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
      unint64_t v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
      int v14 = ((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~(v13 << 27));
      int v15 = v10 - 1;
      unsigned int v16 = (v10 - 1) & v14;
      uint64_t v17 = (uint64_t *)&v9[6 * v16];
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      if (v7 != *v17 || v8 != v19)
      {
        BOOL v21 = 0;
        int v22 = 1;
        while (v18 != -4096 || v19 != -4096)
        {
          if (v21) {
            BOOL v23 = 0;
          }
          else {
            BOOL v23 = v19 == -8192;
          }
          if (v23 && v18 == -8192) {
            BOOL v21 = v17;
          }
          unsigned int v25 = v16 + v22++;
          unsigned int v16 = v25 & v15;
          uint64_t v17 = (uint64_t *)&v9[6 * (v25 & v15)];
          uint64_t v18 = *v17;
          uint64_t v19 = v17[1];
          if (v7 == *v17 && v8 == v19) {
            goto LABEL_32;
          }
        }
        if (v21) {
          uint64_t v17 = v21;
        }
      }
LABEL_32:
      uint64_t *v17 = v7;
      v17[1] = a2[1];
      *((unsigned char *)v17 + 16) = *((unsigned char *)a2 + 16);
      *result += 2;
    }
    a2 += 3;
  }
  return result;
}

uint64_t sub_1CBA7DE84(uint64_t a1)
{
  int v1 = *(unsigned __int16 **)(a1 + 16);
  int v2 = *v1;
  BOOL v4 = (v2 - 9) <= 0x3C && ((1 << (v2 - 9)) & 0x1000000000000605) != 0 || v2 == 0;
  if (v4 || (v1[4] & 0x10) != 0 || (v1[8] & 5) != 0 || !*(_DWORD *)(a1 + 40) || **(_DWORD **)(a1 + 32)) {
    return 0;
  }
  else {
    return HIBYTE(**(_DWORD **)(a1 + 32)) & 1;
  }
}

uint64_t sub_1CBA7DEF4(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  if (!a4) {
    return *(_DWORD *)(*(void *)(a1 + 264)
  }
                     + 24
                     * (*(unsigned __int16 *)(*(void *)(*(void *)(a2 + 16 * (a3 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                            + 24)
                      + *(_DWORD *)(a1 + 272) * ((*(void *)(a1 + 248) - *(void *)(a1 + 240)) >> 3))
                     + 4) >> 4;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(*(void *)(a1 + 232) + 8 * a4));
  v4.i16[0] = vaddlv_u8(v4);
  return v4.u32[0];
}

uint64_t sub_1CBA7DF54(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 252);
  if (!*(unsigned char *)(*(void *)(a1 + 64) + 318))
  {
    uint64_t v44 = *(void *)(a2 + 8);
    unsigned int v45 = *(unsigned __int16 **)(v44 + 16);
    int v46 = *v45;
    BOOL v47 = (v46 - 9) > 0x3C || ((1 << (v46 - 9)) & 0x1000000000000605) == 0;
    BOOL v48 = !v47 || v46 == 0;
    if (v48 || (v45[4] & 0x10) != 0 || (v45[8] & 1) != 0)
    {
      int v49 = *(_DWORD **)(v44 + 32);
      if ((*v49 & 0x10000FF) == 0x1000000)
      {
        uint64_t v50 = *(unsigned int *)(a2 + 120);
        if (v50)
        {
          int v51 = *(uint64_t **)(a2 + 112);
          unsigned int v52 = &v51[2 * v50];
          int v53 = v49[1];
          unsigned int v54 = &unk_1EBD06000;
          do
          {
            uint64_t v55 = *v51;
            if ((*v51 & 6) == 0)
            {
              unint64_t v56 = v55 & 0xFFFFFFFFFFFFFFF8;
              if (*(_DWORD *)((v55 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
              {
                uint64_t v57 = *(void *)(v56 + 8);
                uint64_t v58 = *(void *)(v57 + 16);
                int v59 = *(unsigned __int16 *)(v58 + 2);
                if (*(_WORD *)(v58 + 2))
                {
                  uint64_t v60 = *(unsigned __int8 *)(v58 + 4);
                  unsigned int v61 = *(_WORD **)(v56 + 24);
                  if (!v61)
                  {
                    if (v54[584] && (uint64_t v62 = *(void *)(a1 + 8), (v63 = *(void *)(v62 + 672)) != 0))
                    {
                      uint64_t v64 = *(unsigned __int16 *)(v58 + 6);
                      unsigned int v61 = (_WORD *)(v63 + 24 * v64);
                      if ((v61[4] & 0x1FFF) == 0x1FFE)
                      {
                        int v86 = v53;
                        uint64_t v88 = v52;
                        int v90 = a3;
                        do
                        {
                          uint64_t v78 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v62 + 808)
                                                                                             + 200))(*(void *)(v62 + 808), v64, v57, v62 + 632);
                          uint64_t v64 = v78;
                          uint64_t v79 = *(void *)(v62 + 672);
                        }
                        while ((*(_WORD *)(v79 + 24 * v78 + 8) & 0x1FFF) == 0x1FFE);
                        unsigned int v61 = (_WORD *)(v79 + 24 * v78);
                        a3 = v90;
                        unsigned int v52 = v88;
                        int v53 = v86;
                        unsigned int v54 = (unsigned char *)&unk_1EBD06000;
                      }
                      *(void *)(v56 + 24) = v61;
                    }
                    else
                    {
                      unsigned int v61 = 0;
                    }
                  }
                  uint64_t v65 = (v59 - 1);
                  if ((int)v65 > (int)v60)
                  {
                    unsigned int v66 = 0;
                    uint64_t v67 = v61;
                    do
                    {
                      uint64_t v68 = *(void *)(v57 + 32);
                      uint64_t v69 = v60 + 1;
                      if (!*(unsigned char *)(v68 + 32 * v60))
                      {
                        if (*(_DWORD *)(v68 + 32 * v60 + 4) == v53 && *(unsigned char *)(v68 + 32 * v69) == 1)
                        {
                          if (a3 && v61[10])
                          {
                            uint64_t v70 = (_DWORD *)(*(void *)(*(void *)(a1 + 64) + 152)
                                           + 12 * (unsigned __int16)v61[9]
                                           + 8);
                            uint64_t v71 = 12 * (unsigned __int16)v61[10];
                            while (1)
                            {
                              unsigned int v72 = *(v70 - 2);
                              if (v72 >= v66)
                              {
                                if (v72 > v66) {
                                  goto LABEL_110;
                                }
                                if (!*(v70 - 1)) {
                                  break;
                                }
                              }
                              v70 += 3;
                              v71 -= 12;
                              if (!v71) {
                                goto LABEL_110;
                              }
                            }
                            if (*v70) {
                              return 0xFFFFFFFFLL;
                            }
                          }
LABEL_110:
                          if (*(unsigned char *)(v68 + 32 * v69 + 16))
                          {
                            if (!v67)
                            {
                              if (v54[584])
                              {
                                uint64_t v73 = *(void *)(a1 + 8);
                                uint64_t v74 = *(void *)(v73 + 672);
                                if (v74)
                                {
                                  uint64_t v67 = (_WORD *)(v74
                                                + 24
                                                * *(unsigned __int16 *)(*(void *)(*(void *)(v56 + 8) + 16) + 6));
                                  if ((v67[4] & 0x1FFF) == 0x1FFE)
                                  {
                                    int v85 = v53;
                                    unsigned int v87 = v52;
                                    int v89 = a3;
                                    int v84 = v61;
                                    do
                                    {
                                      unsigned int v76 = (*(uint64_t (**)(void))(**(void **)(v73 + 808) + 200))(*(void *)(v73 + 808));
                                      uint64_t v77 = *(void *)(v73 + 672);
                                    }
                                    while ((*(_WORD *)(v77 + 24 * v76 + 8) & 0x1FFF) == 0x1FFE);
                                    uint64_t v67 = (_WORD *)(v77 + 24 * v76);
                                    a3 = v89;
                                    unsigned int v52 = v87;
                                    int v53 = v85;
                                    unsigned int v54 = (unsigned char *)&unk_1EBD06000;
                                    unsigned int v61 = v84;
                                  }
                                  *(void *)(v56 + 24) = v67;
                                }
                              }
                            }
                            if (v67 == *(_WORD **)(a1 + 80))
                            {
                              if (a3) {
                                return 0xFFFFFFFFLL;
                              }
                              int v75 = *(_DWORD *)(v56 + 252) + *(unsigned __int16 *)(v56 + 226);
                              if (v5 <= v75 + 1) {
                                uint64_t v5 = (v75 + 1);
                              }
                              else {
                                uint64_t v5 = v5;
                              }
                            }
                          }
                        }
                        ++v66;
                      }
                      uint64_t v60 = v69;
                    }
                    while (v69 != v65);
                  }
                }
              }
            }
            v51 += 2;
          }
          while (v51 != v52);
        }
      }
    }
  }
  if ((a3 & 1) == 0)
  {
    int64x2_t v6 = *(_WORD **)(a2 + 24);
    if (!v6)
    {
      uint64_t v7 = *(void *)(a1 + 8);
      int64x2_t v6 = (_WORD *)(*(void *)(v7 + 672) + 24 * *(unsigned __int16 *)(*(void *)(*(void *)(a2 + 8) + 16) + 6));
      if ((v6[4] & 0x1FFF) == 0x1FFE)
      {
        do
        {
          unsigned int v82 = (*(uint64_t (**)(void))(**(void **)(v7 + 808) + 200))(*(void *)(v7 + 808));
          uint64_t v83 = *(void *)(v7 + 672);
        }
        while ((*(_WORD *)(v83 + 24 * v82 + 8) & 0x1FFF) == 0x1FFE);
        int64x2_t v6 = (_WORD *)(v83 + 24 * v82);
      }
      *(void *)(a2 + 24) = v6;
    }
    uint64_t v8 = (unsigned __int16)v6[6];
    if (v6[6])
    {
      uint64_t v9 = *(void *)(a1 + 16);
      int v10 = (unsigned __int16 *)(*(void *)(*(void *)(v9 + 176) + 136) + 4 * (unsigned __int16)v6[5]);
      unint64_t v11 = &v10[2 * v8];
      uint64_t v12 = *(void *)(v9 + 32);
      do
      {
        uint64_t v13 = *v10;
        uint64_t v14 = *(unsigned int *)(v12 + 32 * v13 + 8);
        if (v14)
        {
          unsigned int v15 = -1;
          unsigned int v16 = (uint64_t *)(a1 + 1680);
          do
          {
            uint64_t v17 = *v16;
            v16 += 10;
            unsigned int v18 = *(_DWORD *)(v17 + 4 * v13) + v10[1];
            if (v15 >= v18) {
              unsigned int v15 = v18;
            }
            --v14;
          }
          while (v14);
        }
        else
        {
          unsigned int v15 = -1;
        }
        if (v15 <= v5) {
          uint64_t v5 = v5;
        }
        else {
          uint64_t v5 = v15;
        }
        v10 += 2;
      }
      while (v10 != v11);
    }
  }
  uint64_t v19 = *(void *)(a1 + 120);
  if (v19)
  {
    int v20 = *(unsigned __int16 **)(*(void *)(v19 + 8) + 16);
    int v21 = *v20;
    BOOL v22 = (v21 - 9) > 0x3C || ((1 << (v21 - 9)) & 0x1000000000000605) == 0;
    BOOL v23 = !v22 || v21 == 0;
    if (!v23 && (v20[4] & 0x10) == 0 && (v20[8] & 1) == 0)
    {
      uint64_t v24 = *(unsigned __int16 **)(*(void *)(a2 + 8) + 16);
      int v25 = *v24;
      BOOL v26 = (v25 - 9) > 0x3C || ((1 << (v25 - 9)) & 0x1000000000000605) == 0;
      BOOL v27 = !v26 || v25 == 0;
      if (v27 || (v24[4] & 0x10) != 0 || (v24[8] & 1) != 0) {
        uint64_t v5 = *(unsigned int *)(a1 + 3152);
      }
    }
  }
  unsigned int v28 = *(unsigned __int16 *)(a2 + 226);
  if (*(_DWORD *)(a1 + 3152) >= v28) {
    return v5;
  }
  uint64_t v29 = *(void *)(a2 + 8);
  if (!*(unsigned char *)(*(void *)(v29 + 16) + 4)) {
    return v5;
  }
  uint64_t v30 = *(unsigned int *)(a2 + 120);
  if (!v30) {
    return v5;
  }
  int v31 = *(_DWORD *)(*(void *)(v29 + 32) + 4);
  BOOL v32 = *(void **)(a2 + 112);
  BOOL v33 = &v32[2 * v30];
  while (1)
  {
    unint64_t v34 = *v32 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v35 = *(void *)(v34 + 8);
    if (*(_DWORD *)(v34 + 192) != -1 || v35 == 0) {
      goto LABEL_52;
    }
    uint64_t v37 = *(void *)(*(void *)(v35 + 16) + 8);
    if ((*(_WORD *)(v35 + 44) & 0xC) != 0 && (*(_WORD *)(v35 + 44) & 4) == 0) {
      break;
    }
    if ((*(void *)(*(void *)(v35 + 16) + 8) & 0xD00) == 0x400) {
      goto LABEL_67;
    }
LABEL_52:
    v32 += 2;
    if (v32 == v33) {
      return v5;
    }
  }
  uint64_t v39 = v35;
  if ((v37 & 0x400) == 0)
  {
    while ((*(_WORD *)(v39 + 44) & 8) != 0)
    {
      uint64_t v39 = *(void *)(v39 + 8);
      if ((*(unsigned char *)(*(void *)(v39 + 16) + 9) & 4) != 0) {
        goto LABEL_57;
      }
    }
    goto LABEL_52;
  }
LABEL_57:
  if ((v37 & 0x100) != 0) {
    goto LABEL_52;
  }
  uint64_t v40 = v35;
  while ((*(_WORD *)(v40 + 44) & 8) != 0)
  {
    uint64_t v40 = *(void *)(v40 + 8);
    if (*(unsigned char *)(*(void *)(v40 + 16) + 9)) {
      goto LABEL_52;
    }
  }
  if ((v37 & 0x800) != 0) {
    goto LABEL_52;
  }
  uint64_t v41 = v35;
  while ((*(_WORD *)(v41 + 44) & 8) != 0)
  {
    uint64_t v41 = *(void *)(v41 + 8);
    if ((*(unsigned char *)(*(void *)(v41 + 16) + 9) & 8) != 0) {
      goto LABEL_52;
    }
  }
LABEL_67:
  uint64_t v42 = *(unsigned int *)(v35 + 40);
  if (!v42) {
    goto LABEL_52;
  }
  unsigned int v43 = (_DWORD *)(*(void *)(v35 + 32) + 4);
  while ((*(v43 - 1) & 0x10000FF) != 0 || *v43 != v31)
  {
    v43 += 8;
    if (!--v42) {
      goto LABEL_52;
    }
  }
  unsigned int v80 = v28 - (*(void *)(*(void *)(v35 + 24) + 64) == *(void *)(*(void *)(v35 + 24) + 72));
  if (v80 <= v5) {
    return v5;
  }
  else {
    return v80;
  }
}

uint64_t sub_1CBA7E604(uint64_t a1, uint64_t a2)
{
  int v3 = *(_WORD **)(a2 + 24);
  if (!v3)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    int v3 = (_WORD *)(*(void *)(v5 + 672) + 24 * *(unsigned __int16 *)(*(void *)(*(void *)(a2 + 8) + 16) + 6));
    if ((v3[4] & 0x1FFF) == 0x1FFE)
    {
      do
      {
        unsigned int v11 = (*(uint64_t (**)(void))(**(void **)(v5 + 808) + 200))(*(void *)(v5 + 808));
        uint64_t v12 = *(void *)(v5 + 672);
      }
      while ((*(_WORD *)(v12 + 24 * v11 + 8) & 0x1FFF) == 0x1FFE);
      int v3 = (_WORD *)(v12 + 24 * v11);
    }
    *(void *)(a2 + 24) = v3;
  }
  uint64_t v6 = (unsigned __int16)v3[6];
  if (!v3[6]) {
    return 0;
  }
  uint64_t v7 = (unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 176) + 136)
                          + 4 * (unsigned __int16)v3[5]);
  uint64_t v8 = 4 * v6;
  while (1)
  {
    int v9 = *v7;
    if (*(_DWORD *)(a1 + 112) != v9
      && *(_DWORD *)(a1 + 116) != v9
      && *(_DWORD *)(a1 + 108) != v9
      && *(_DWORD *)(a1 + 104) != v9)
    {
      break;
    }
    v7 += 2;
    v8 -= 4;
    if (!v8) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1CBA7E748(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if ((*(unsigned char *)(*(void *)(v3 + 16) + 20) & 0x10) != 0)
  {
    uint64_t v8 = (_DWORD *)(a1 + 3272);
    unsigned int v18 = *(void **)(a2 + 8);
    char v19 = 0;
    int v20 = 0;
    if (sub_1CBA7E898(a1 + 3272, v3, &v20))
    {
      char v4 = *((unsigned char *)v20 + 8) != 0;
    }
    else
    {
      int v10 = sub_1CBA7E944(v8, (uint64_t *)&v18, v20);
      *int v10 = v3;
      *((unsigned char *)v10 + 8) = 0;
      uint64_t v11 = *(unsigned int *)(a2 + 40);
      if (v11)
      {
        int v12 = 0;
        uint64_t v13 = *(void **)(a2 + 32);
        uint64_t v14 = 16 * v11;
        do
        {
          if ((*v13 & 6) == 0) {
            v12 |= sub_1CBA7E748(a1, *v13 & 0xFFFFFFFFFFFFFFF8, a3 + 1);
          }
          v13 += 2;
          v14 -= 16;
        }
        while (v14);
      }
      else
      {
        LOBYTE(v12) = 0;
      }
      unsigned int v15 = *(void **)(a2 + 8);
      char v4 = (a3 > 3) | v12;
      int v20 = v15;
      unsigned int v18 = 0;
      char v16 = sub_1CBA7E898((uint64_t)v8, (uint64_t)v15, &v18);
      uint64_t v17 = v18;
      if ((v16 & 1) == 0)
      {
        uint64_t v17 = sub_1CBA7E944(v8, (uint64_t *)&v20, v18);
        void *v17 = v15;
        *((unsigned char *)v17 + 8) = 0;
      }
      *((unsigned char *)v17 + 8) = v4 & 1;
    }
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t sub_1CBA7E898(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_6;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    int v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        int v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_6;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_6:
  *a3 = v7;
  return result;
}

void *sub_1CBA7E944(_DWORD *a1, uint64_t *a2, void *a3)
{
  int v5 = *a1 >> 1;
  if (*a1) {
    unsigned int v6 = 4;
  }
  else {
    unsigned int v6 = a1[4];
  }
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_5;
  }
  sub_1CD414208((uint64_t)a1, v6);
  uint64_t v8 = 0;
  sub_1CBA7E898((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -4096) {
    --a1[1];
  }
  return a3;
}

uint64_t sub_1CBA7EA08(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    int v9 = (void *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    int v9 = &v8[2 * v7];
  }
  do
  {
    void *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      BOOL v12 = 0;
      uint64_t result = sub_1CBA7E898((uint64_t)v5, v10, &v12);
      int v11 = v12;
      *BOOL v12 = *(void *)a2;
      *((unsigned char *)v11 + 8) = *(unsigned char *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1CBA7EACC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 28)) {
    return *(unsigned int *)(a2 + 24);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(a1 + 3144);
  int v5 = *(_DWORD *)(*(void *)(v3 + 4912) + 4 * v4);
  int v6 = *(_DWORD *)(a2 + 16);
  if (v6 == 0x7FFFFFFF)
  {
    uint64_t v7 = 0;
    unint64_t v8 = *(void *)(v3 + 3104) + ((unint64_t)*(unsigned int *)(*(void *)(a2 + 8) + 192) << 6);
    while (1)
    {
      int v9 = (unsigned __int16)*(_DWORD *)(v8 + v7);
      BOOL v10 = v9 != 0;
      int v11 = v9 - 1;
      if (v10 && v11 == v4) {
        break;
      }
      v7 += 4;
      if (v7 == 64)
      {
        int v6 = 0;
        goto LABEL_12;
      }
    }
    int v6 = *(int *)(v8 + v7) >> 16;
LABEL_12:
    *(_DWORD *)(a2 + 16) = v6;
  }
  uint64_t v2 = (v6 + v5);
  if ((float)(*(float *)(a1 + 3240) * (float)*(unsigned int *)(a1 + 3160)) <= (float)v2)
  {
    *(_DWORD *)(a2 + 24) = v2;
  }
  else
  {
    uint64_t v2 = 0;
    *(_DWORD *)(a2 + 24) = 0;
  }
  *(unsigned char *)(a2 + 28) = 1;
  return v2;
}

uint64_t sub_1CBA7EB80(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t result = sub_1CBA7E604(a1, a2);
  if (result)
  {
    uint64_t result = sub_1CBA7E604(a1, a3);
    if (result)
    {
      int v9 = *(unsigned __int16 **)(*(void *)(a1 + 32) + 8);
      int v10 = v9[38451];
      int v11 = *(unsigned __int16 *)(*(void *)(*(void *)(a2 + 8) + 16) + 6);
      int v12 = *(unsigned __int16 *)(*(void *)(*(void *)(a3 + 8) + 16) + 6);
      if (v11 == v10 || v12 == v10)
      {
        uint64_t v14 = v9 + 193755;
        unsigned int v15 = v9 + 47187;
        int v16 = v9[28515];
        int v17 = *v15;
        int v18 = *v14;
        if (v12 != v10) {
          return v11 == v16 || v11 == v17 || v11 == v18 || v12 == v16 || v12 == v17 || v12 == v18;
        }
        uint64_t result = 0;
        if (a4 <= 1 && v11 == v16) {
          return v11 == v16 || v11 == v17 || v11 == v18 || v12 == v16 || v12 == v17 || v12 == v18;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_1CBA7EC68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(_WORD **)(a2 + 24);
  if (!v3)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v3 = (_WORD *)(*(void *)(v5 + 672) + 24 * *(unsigned __int16 *)(*(void *)(*(void *)(a2 + 8) + 16) + 6));
    if ((v3[4] & 0x1FFF) == 0x1FFE)
    {
      do
      {
        unsigned int v13 = (*(uint64_t (**)(void))(**(void **)(v5 + 808) + 200))(*(void *)(v5 + 808));
        uint64_t v14 = *(void *)(v5 + 672);
      }
      while ((*(_WORD *)(v14 + 24 * v13 + 8) & 0x1FFF) == 0x1FFE);
      uint64_t v3 = (_WORD *)(v14 + 24 * v13);
    }
    *(void *)(a2 + 24) = v3;
  }
  uint64_t v6 = (unsigned __int16)v3[6];
  if (!v3[6]) {
    return 0;
  }
  uint64_t v7 = (unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 176) + 136)
                          + 4 * (unsigned __int16)v3[5]);
  int v8 = *(_DWORD *)(a1 + 116);
  uint64_t v9 = 4 * v6 - 4;
  do
  {
    int v10 = *v7;
    v7 += 2;
    BOOL result = v8 == v10;
    BOOL v12 = v8 == v10 || v9 == 0;
    v9 -= 4;
  }
  while (!v12);
  return result;
}

uint64_t sub_1CBA7ED88(void *a1, uint64_t a2)
{
  v28[1] = *MEMORY[0x1E4F143B8];
  uint64_t result = *(unsigned __int8 *)(a2 + 44);
  if (result == 255)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    v28[0] = 0;
    uint64_t v6 = (uint64_t *)a1[108];
    uint64_t v7 = (uint64_t *)a1[109];
    if (v6 == v7)
    {
      int v10 = 0;
      int v9 = 0;
LABEL_11:
      BOOL v12 = (uint64_t *)a1[122];
      unsigned int v13 = (uint64_t *)a1[123];
      if (v12 == v13)
      {
LABEL_18:
        uint64_t v16 = *(unsigned int *)(v5 + 40);
        if (v16)
        {
          int v17 = *(void **)(v5 + 32);
          uint64_t v18 = 16 * v16 - 16;
          do
          {
            unint64_t v19 = *v17 & 0xFFFFFFFFFFFFFFF8;
            if (*(_DWORD *)(v19 + 212) == 1)
            {
              uint64_t v20 = *(void *)(v19 + 8);
              if (v20)
              {
                int v21 = *(unsigned __int16 **)(v20 + 16);
                int v22 = *v21;
                BOOL v23 = (v22 - 9) > 0x3C
                   || ((1 << (v22 - 9)) & 0x1000000000000605) == 0;
                BOOL v24 = !v23 || v22 == 0;
                if (v24 || (v21[4] & 0x10) != 0 || (v21[8] & 1) != 0)
                {
                  BOOL v25 = sub_1CBA7EC68((uint64_t)a1, v19);
                  ++*(_DWORD *)((unint64_t)v28 | (4 * v25));
                  int v9 = v28[0];
                  int v10 = HIDWORD(v28[0]);
                }
              }
            }
            if (v9) {
              BOOL v26 = v10 == 0;
            }
            else {
              BOOL v26 = 1;
            }
            uint64_t result = !v26;
            if (!v26) {
              break;
            }
            v17 += 2;
            uint64_t v27 = v18;
            v18 -= 16;
          }
          while (v27);
        }
        else
        {
          uint64_t result = 0;
        }
        goto LABEL_44;
      }
      while (1)
      {
        BOOL v14 = sub_1CBA7EC68((uint64_t)a1, *v12);
        ++*(_DWORD *)((unint64_t)v28 | (4 * v14));
        int v9 = v28[0];
        int v10 = HIDWORD(v28[0]);
        if (LODWORD(v28[0]) && HIDWORD(v28[0]) != 0) {
          break;
        }
        if (++v12 == v13) {
          goto LABEL_18;
        }
      }
    }
    else
    {
      while (1)
      {
        BOOL v8 = sub_1CBA7EC68((uint64_t)a1, *v6);
        ++*(_DWORD *)((unint64_t)v28 | (4 * v8));
        int v9 = v28[0];
        int v10 = HIDWORD(v28[0]);
        if (LODWORD(v28[0]) && HIDWORD(v28[0]) != 0) {
          break;
        }
        if (++v6 == v7) {
          goto LABEL_11;
        }
      }
    }
    uint64_t result = 1;
LABEL_44:
    *(unsigned char *)(a2 + 44) = result;
  }
  return result;
}

uint64_t sub_1CBA7EF80(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(unsigned int *)(a2 + 20);
  if (result == -1)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    uint64_t v6 = *(_WORD **)(v5 + 24);
    if (!v6)
    {
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v6 = (_WORD *)(*(void *)(v7 + 672) + 24 * *(unsigned __int16 *)(*(void *)(*(void *)(v5 + 8) + 16) + 6));
      if ((v6[4] & 0x1FFF) == 0x1FFE)
      {
        do
        {
          unsigned int v10 = (*(uint64_t (**)(void))(**(void **)(v7 + 808) + 200))(*(void *)(v7 + 808));
          uint64_t v11 = *(void *)(v7 + 672);
        }
        while ((*(_WORD *)(v11 + 24 * v10 + 8) & 0x1FFF) == 0x1FFE);
        uint64_t v6 = (_WORD *)(v11 + 24 * v10);
      }
      *(void *)(v5 + 24) = v6;
    }
    if (v6[6])
    {
      BOOL v8 = (unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 176) + 136)
                              + 4 * (unsigned __int16)v6[5]
                              + 2);
      uint64_t v9 = 4 * (unsigned __int16)v6[6];
      while (*(_DWORD *)(a1 + 3156) != *(v8 - 1))
      {
        v8 += 2;
        v9 -= 4;
        if (!v9) {
          goto LABEL_9;
        }
      }
      uint64_t result = *v8;
    }
    else
    {
LABEL_9:
      uint64_t result = 0;
    }
    *(_DWORD *)(a2 + 20) = result;
  }
  return result;
}

uint64_t sub_1CBA7F0B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 46);
  if (v2 == 255)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(unsigned int *)(v3 + 40);
    if (v4)
    {
      LODWORD(v2) = 0;
      uint64_t v5 = *(void **)(v3 + 32);
      uint64_t v6 = &v5[2 * v4];
      while (1)
      {
        unint64_t v7 = *v5 & 0xFFFFFFFFFFFFFFF8;
        if (*(_DWORD *)(v7 + 212) == 1)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          if (v8)
          {
            uint64_t v9 = *(unsigned int *)(v8 + 40);
            if (v9) {
              break;
            }
          }
        }
LABEL_32:
        v5 += 2;
        if (v5 == v6) {
          goto LABEL_35;
        }
      }
      unsigned int v10 = *(unsigned int **)(v8 + 32);
      uint64_t v11 = &v10[8 * v9];
      while (1)
      {
        unsigned int v12 = *v10;
        if (!*v10)
        {
          unsigned int v13 = v10[1];
          if (*(unsigned char *)(a1 + 144))
          {
            int v14 = 32;
            uint64_t v15 = a1 + 152;
            goto LABEL_15;
          }
          int v14 = *(_DWORD *)(a1 + 160);
          if (v14)
          {
            uint64_t v15 = *(void *)(a1 + 152);
LABEL_15:
            unsigned __int16 v16 = v12 >> 8;
            int v17 = (37 * v13) ^ (37 * ((v12 >> 8) & 0xFFF));
            int v18 = v14 - 1;
            for (int i = 1; ; ++i)
            {
              unsigned int v20 = v17 & v18;
              uint64_t v21 = v15 + 8 * v20;
              if (v13 == *(_DWORD *)v21 && ((*(_WORD *)(v21 + 4) ^ v16) & 0xFFF) == 0) {
                break;
              }
              if (*(_DWORD *)v21 == -1 && (~*(unsigned __int16 *)(v21 + 4) & 0xFFF) == 0) {
                goto LABEL_9;
              }
              int v17 = v20 + i;
            }
            uint64_t v22 = *(void *)(a1 + 408);
            uint64_t v23 = *(unsigned int *)(a1 + 416);
            if (v23)
            {
              uint64_t v24 = 8 * v23;
              uint64_t v25 = v22 + 8 * v23;
              while (*(_DWORD *)v22 != v13 || ((*(_WORD *)(v22 + 4) ^ v16) & 0xFFF) != 0)
              {
                v22 += 8;
                v24 -= 8;
                if (!v24)
                {
                  uint64_t v22 = v25;
                  break;
                }
              }
            }
            if (*(unsigned __int16 *)(v22 + 4) >> 13) {
              int v26 = 2;
            }
            else {
              int v26 = 1;
            }
            LODWORD(v2) = (v26 << ((v12 >> 23) & 2)) + v2;
          }
        }
LABEL_9:
        v10 += 8;
        if (v10 == v11) {
          goto LABEL_32;
        }
      }
    }
    LODWORD(v2) = 0;
LABEL_35:
    if (v2 >= 0xFE) {
      uint64_t v2 = 254;
    }
    else {
      uint64_t v2 = v2;
    }
    *(unsigned char *)(a2 + 46) = v2;
  }
  return v2;
}

uint64_t sub_1CBA7F25C(uint64_t result, int a2, unsigned __int16 a3)
{
  uint64_t v3 = result + 8;
  if (*(unsigned char *)result)
  {
    int v4 = 32;
  }
  else
  {
    int v4 = *(_DWORD *)(result + 16);
    if (!v4) {
      return result;
    }
    uint64_t v3 = *(void *)(result + 8);
  }
  int v5 = (37 * (a3 & 0xFFF)) ^ (37 * a2);
  int v6 = v4 - 1;
  for (int i = 1; ; ++i)
  {
    unsigned int v8 = v5 & v6;
    uint64_t v9 = v3 + 8 * v8;
    if (*(_DWORD *)v9 == a2 && ((*(_WORD *)(v9 + 4) ^ a3) & 0xFFF) == 0) {
      break;
    }
    if (*(_DWORD *)v9 == -1 && (~*(unsigned __int16 *)(v9 + 4) & 0xFFF) == 0) {
      return result;
    }
    int v5 = v8 + i;
  }
  *(void *)uint64_t v9 = 0xFFEFFFFFFFELL;
  int v10 = *(_DWORD *)(result + 4) + 1;
  *(_DWORD *)result -= 2;
  *(_DWORD *)(result + 4) = v10;
  return result;
}

void sub_1CBA7F308(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x21)
  {
    unint64_t v7 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
    int v9 = ((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8);
    if ((v9 + 1) > 0x40) {
      a2 = v9 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v10 = *(int **)(a1 + 8);
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x20)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v12 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
      *(void *)(a1 + 16) = v12;
    }
    sub_1CBA7F4D4((_DWORD *)a1, v10, &v10[2 * v11]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v3 = 0;
  int v4 = v14;
  do
  {
    uint64_t v5 = a1 + v3;
    int v6 = *(_DWORD *)(a1 + v3 + 8);
    if (v6 == -2)
    {
      if ((*(_WORD *)(v5 + 12) & 0xFFF) != 0xFFE) {
        goto LABEL_6;
      }
    }
    else if (v6 != -1 || (~*(unsigned __int16 *)(a1 + v3 + 12) & 0xFFF) != 0)
    {
LABEL_6:
      *(void *)int v4 = *(void *)(v5 + 8);
      v4 += 2;
    }
    v3 += 8;
  }
  while (v3 != 256);
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v13 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
    *(void *)(a1 + 16) = v13;
  }
  sub_1CBA7F4D4((_DWORD *)a1, v14, v4);
}

void sub_1CBA7F4D4(_DWORD *a1, int *a2, int *a3)
{
  int v6 = *a1;
  *(void *)a1 = *a1 & 1;
  unint64_t v7 = a1 + 2;
  if (v6)
  {
    size_t v8 = 256;
    int v9 = a1 + 2;
LABEL_3:
    memset_pattern16(v9, &unk_1CDB15640, v8);
    goto LABEL_4;
  }
  uint64_t v22 = a1[4];
  if (v22)
  {
    int v9 = (void *)*((void *)a1 + 1);
    size_t v8 = 8 * v22;
    goto LABEL_3;
  }
LABEL_4:
  while (a2 != a3)
  {
    int v10 = *a2;
    if (*a2 == -2)
    {
      if ((a2[1] & 0xFFF) != 0xFFE) {
        goto LABEL_7;
      }
    }
    else if (v10 != -1 || (~*((unsigned __int16 *)a2 + 2) & 0xFFF) != 0)
    {
LABEL_7:
      if (*(unsigned char *)a1)
      {
        int v11 = 32;
        uint64_t v12 = v7;
      }
      else
      {
        uint64_t v12 = (_DWORD *)*((void *)a1 + 1);
        int v11 = a1[4];
      }
      uint64_t v13 = 0;
      unsigned __int16 v14 = *((_WORD *)a2 + 2);
      int v15 = (37 * (v14 & 0xFFF)) ^ (37 * v10);
      int v16 = v11 - 1;
      int v17 = 1;
      while (2)
      {
        unsigned int v18 = v15 & v16;
        unint64_t v19 = &v12[2 * (v15 & v16)];
        int v20 = *v19;
        if (v10 == *v19 && ((*((_WORD *)v19 + 2) ^ v14) & 0xFFF) == 0)
        {
LABEL_24:
          *(void *)unint64_t v19 = *(void *)a2;
          *a1 += 2;
          break;
        }
        if (v20 == -1)
        {
          if ((~*((unsigned __int16 *)v19 + 2) & 0xFFF) == 0)
          {
            if (v13) {
              unint64_t v19 = v13;
            }
            goto LABEL_24;
          }
LABEL_13:
          BOOL v21 = 0;
        }
        else
        {
          if (v20 != -2) {
            goto LABEL_13;
          }
          BOOL v21 = (v19[1] & 0xFFF) == 4094;
        }
        if (v21 && v13 == 0) {
          uint64_t v13 = &v12[2 * v18];
        }
        int v15 = v18 + v17++;
        continue;
      }
    }
    a2 += 2;
  }
}

void sub_1CBA7F670()
{
}

void sub_1CBA7F684(uint64_t a1, uint64_t a2)
{
  v54[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v2 = *(void *)(a2 + 56);
  if (v3 != v2)
  {
    uint64_t v4 = *(void *)(a2 + 48);
    do
    {
      int v5 = **(unsigned __int16 **)(*(void *)(v4 + 8) + 16);
      unsigned int v6 = v5 - 2426;
      unsigned int v7 = v5 - 8262;
      if (v6 < 4 || v7 < 3)
      {
        char v9 = 0;
        goto LABEL_10;
      }
      v4 += 272;
    }
    while (v4 != v2);
    char v9 = 1;
LABEL_10:
    int v10 = &v48;
    int v11 = &v45;
    uint64_t v40 = *(void *)(a2 + 56);
LABEL_11:
    if ((*(unsigned char *)(*(void *)(*(void *)(v3 + 8) + 16) + 16) & 2) == 0) {
      goto LABEL_65;
    }
    unsigned int v52 = v54;
    uint64_t v53 = 0x400000000;
    int v49 = v51;
    uint64_t v50 = 0x400000000;
    uint64_t v12 = v10;
    int v46 = v10;
    uint64_t v47 = 0x400000000;
    uint64_t v13 = v11;
    unsigned int v43 = v11;
    uint64_t v44 = 0x400000000;
    uint64_t v14 = *(unsigned int *)(v3 + 120);
    if (!v14) {
      goto LABEL_28;
    }
    int v15 = *(uint64_t **)(v3 + 112);
    uint64_t v16 = 16 * v14;
    while (1)
    {
      uint64_t v17 = *v15;
      if ((~*(_DWORD *)v15 & 6) == 0)
      {
        if ((v9 & 1) != 0 || *((_DWORD *)v15 + 2)) {
          goto LABEL_19;
        }
        if (sub_1CBA7FA50((uint64_t)&v49, v17 & 0xFFFFFFFFFFFFFFF8, 0, 0)) {
          break;
        }
      }
LABEL_22:
      v15 += 2;
      v16 -= 16;
      if (!v16)
      {
        if (v53)
        {
          unsigned int v18 = v52;
          uint64_t v19 = 8 * v53;
          do
          {
            uint64_t v20 = *v18++;
            sub_1CB905384(v20, v3);
            v19 -= 8;
          }
          while (v19);
        }
LABEL_28:
        uint64_t v21 = *(unsigned int *)(v3 + 40);
        if (v21)
        {
          uint64_t v22 = *(uint64_t **)(v3 + 32);
          uint64_t v23 = 16 * v21;
          while (1)
          {
            uint64_t v24 = *v22;
            if ((~*(_DWORD *)v22 & 6) == 0)
            {
              if ((v9 & 1) != 0 || *((_DWORD *)v22 + 2)) {
                goto LABEL_35;
              }
              if (sub_1CBA7FA50((uint64_t)&v43, v24 & 0xFFFFFFFFFFFFFFF8, 0, 1)) {
                break;
              }
            }
LABEL_38:
            v22 += 2;
            v23 -= 16;
            if (!v23) {
              goto LABEL_41;
            }
          }
          uint64_t v24 = *v22;
LABEL_35:
          if (*(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
          {
            if (v47 >= (unint64_t)HIDWORD(v47)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v46 + v47) = v24 & 0xFFFFFFFFFFFFFFF8;
            LODWORD(v47) = v47 + 1;
          }
          goto LABEL_38;
        }
LABEL_41:
        if (v47)
        {
          uint64_t v25 = (uint64_t *)v46;
          uint64_t v26 = 8 * v47;
          do
          {
            uint64_t v27 = *v25++;
            sub_1CB905384(v3, v27);
            v26 -= 8;
          }
          while (v26);
        }
        if (v44)
        {
          unsigned int v28 = (uint64_t *)v43;
          uint64_t v29 = 8 * v44;
          do
          {
            uint64_t v30 = *v28++;
            uint64_t v41 = v30 | 6;
            uint64_t v42 = 0;
            llvm::SUnit::addPred(v3, &v41, 1);
            v29 -= 8;
          }
          while (v29);
        }
        if (v50)
        {
          int v31 = (uint64_t *)v49;
          uint64_t v32 = 8 * v50;
          do
          {
            uint64_t v33 = *v31++;
            uint64_t v41 = v3 | 6;
            uint64_t v42 = 0;
            llvm::SUnit::addPred(v33, &v41, 1);
            v32 -= 8;
          }
          while (v32);
        }
        if (v53)
        {
          unint64_t v34 = v52;
          uint64_t v35 = &v52[v53];
          do
          {
            if (v47)
            {
              uint64_t v36 = *v34;
              uint64_t v37 = (uint64_t *)v46;
              uint64_t v38 = 8 * v47;
              do
              {
                uint64_t v39 = *v37++;
                uint64_t v41 = v39 | 6;
                uint64_t v42 = 0;
                llvm::SUnit::addPred(v36, &v41, 1);
                v38 -= 8;
              }
              while (v38);
            }
            ++v34;
          }
          while (v34 != v35);
        }
        int v11 = v13;
        if (v43 != v13) {
          free(v43);
        }
        int v10 = v12;
        if (v46 != v12) {
          free(v46);
        }
        if (v49 != v51) {
          free(v49);
        }
        if (v52 != v54) {
          free(v52);
        }
        uint64_t v2 = v40;
LABEL_65:
        v3 += 272;
        if (v3 == v2) {
          return;
        }
        goto LABEL_11;
      }
    }
    uint64_t v17 = *v15;
LABEL_19:
    if (*(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
    {
      if (v53 >= (unint64_t)HIDWORD(v53)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v52[v53] = v17 & 0xFFFFFFFFFFFFFFF8;
      LODWORD(v53) = v53 + 1;
    }
    goto LABEL_22;
  }
}

uint64_t sub_1CBA7FA50(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  if (a3 > 0x20) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    int v7 = **(unsigned __int16 **)(v6 + 16);
    BOOL v8 = (v7 - 2426) >= 4;
    unsigned int v9 = v7 - 8262;
    if (!v8 || v9 <= 2)
    {
      unsigned int v11 = *(_DWORD *)(a1 + 8);
      if (v11 >= *(_DWORD *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a1 + 8 * v11) = a2;
      ++*(_DWORD *)(a1 + 8);
      return 1;
    }
  }
  uint64_t v12 = a2 + 32;
  uint64_t v13 = 112;
  if (a4) {
    uint64_t v13 = 32;
  }
  else {
    uint64_t v12 = a2 + 112;
  }
  uint64_t v14 = *(unsigned int *)(v12 + 8);
  if (!v14) {
    return 1;
  }
  uint64_t v15 = 16 * v14;
  for (int i = (_DWORD *)(*(void *)(a2 + v13) + 8); ; i += 4)
  {
    if ((~*(i - 2) & 6) == 0 && !*i)
    {
      if (*(void *)((*((void *)i - 1) & 0xFFFFFFFFFFFFFFF8) + 8))
      {
        uint64_t result = sub_1CBA7FA50(a1);
        if (!result) {
          break;
        }
      }
    }
    v15 -= 16;
    if (!v15) {
      return 1;
    }
  }
  return result;
}

void sub_1CBA7FB8C()
{
}

void sub_1CBA7FBA0(uint64_t a1, uint64_t a2)
{
  v102[24] = *MEMORY[0x1E4F143B8];
  unsigned int v100 = v102;
  uint64_t v101 = 0x800000000;
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v2 = *(void *)(a2 + 56);
  if (v3 != v2)
  {
    uint64_t v4 = *(void *)(a2 + 48);
    int v5 = 1;
    while (1)
    {
      uint64_t v6 = *(unsigned __int16 **)(*(void *)(v4 + 8) + 16);
      if ((v6[8] & 0x20) != 0) {
        break;
      }
      int v7 = *v6;
      if (v7 > 2425)
      {
        if ((v7 - 8260) < 5 || (v7 - 2426) < 4) {
          goto LABEL_17;
        }
      }
      else
      {
        BOOL v8 = (v7 - 489) > 0x15 || ((1 << (v7 + 23)) & 0x3FFC03) == 0;
        if (!v8 || v7 == 337) {
          goto LABEL_17;
        }
      }
      v4 += 272;
      if (v4 == v2)
      {
        int v5 = 0;
        goto LABEL_17;
      }
    }
    int v5 = 1;
LABEL_17:
    unsigned int v9 = &v93;
    int v83 = v5;
    uint64_t v82 = *(void *)(a2 + 56);
    while (1)
    {
      uint64_t v10 = *(void *)(*(void *)(*(void *)(v3 + 8) + 16) + 16);
      uint64_t v11 = v10 & 0x800200;
      if ((v10 & 0x800200) == 0x800200 || (v10 & 0x800100) == 8388864) {
        break;
      }
LABEL_147:
      v3 += 272;
      if (v3 == v2)
      {
        if (v100 != v102) {
          free(v100);
        }
        return;
      }
    }
    int v97 = v99;
    uint64_t v98 = 0x400000000;
    unsigned int v94 = v96;
    uint64_t v95 = 0x400000000;
    uint64_t v13 = v9;
    unsigned int v91 = v9;
    uint64_t v92 = 0x400000000;
    unsigned int v14 = *(_DWORD *)(v3 + 40);
    while (v14)
    {
      --v14;
      uint64_t v15 = *(void *)(v3 + 32);
      uint64_t v16 = (uint64_t *)(v15 + 16 * v14);
      uint64_t v17 = *v16;
      if ((~*(_DWORD *)v16 & 6) != 0) {
        continue;
      }
      unint64_t v18 = v17 & 0xFFFFFFFFFFFFFFF8;
      if (*(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 192) == -1) {
        continue;
      }
      uint64_t v19 = *(void *)(v18 + 8);
      uint64_t v20 = *(unsigned __int16 **)(v19 + 16);
      int v21 = *v20;
      if ((v21 - 4821) < 4 || (*((void *)v20 + 2) & 0x20) != 0) {
        continue;
      }
      if ((v21 - 4581) < 0xC || (*((void *)v20 + 2) & 0x80) != 0) {
        goto LABEL_40;
      }
      uint64_t v23 = *((void *)v20 + 1);
      if ((*(_WORD *)(v19 + 44) & 0xC) != 0 && (*(_WORD *)(v19 + 44) & 4) == 0)
      {
        uint64_t v28 = *(void *)(v18 + 8);
        if ((v23 & 0x1000000) != 0) {
          continue;
        }
        while ((*(_WORD *)(v28 + 44) & 8) != 0)
        {
          uint64_t v28 = *(void *)(v28 + 8);
          if (*(unsigned char *)(*(void *)(v28 + 16) + 11)) {
            goto LABEL_47;
          }
        }
      }
      else if ((v23 & 0x1000000) != 0)
      {
        continue;
      }
      if ((v21 - 1) <= 1)
      {
        if (*(unsigned char *)(*(void *)(v19 + 32) + 48)) {
          continue;
        }
      }
      else
      {
LABEL_40:
        if (v11 == 8389120 && (v21 - 4581) < 0xC) {
          continue;
        }
      }
      if (!v5 || *(_DWORD *)(v15 + 16 * v14 + 8)) {
        goto LABEL_45;
      }
      int v25 = sub_1CBA803A8((uint64_t)&v94, v18, 0, 1);
      int v5 = v83;
      if (v25)
      {
        uint64_t v17 = *v16;
LABEL_45:
        uint64_t v26 = v16[1];
        if (v92 >= (unint64_t)HIDWORD(v92)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v27 = (char *)v91 + 16 * v92;
        *uint64_t v27 = v17;
        v27[1] = v26;
        LODWORD(v92) = v92 + 1;
      }
LABEL_47:
      ;
    }
    uint64_t v88 = v90;
    uint64_t v89 = 0x400000000;
    uint64_t v29 = *(unsigned int *)(v3 + 120);
    if (v29)
    {
      uint64_t v30 = *(uint64_t **)(v3 + 112);
      int v31 = &v30[2 * v29];
      do
      {
        uint64_t v32 = *v30;
        if ((~*(_DWORD *)v30 & 6) != 0) {
          goto LABEL_81;
        }
        unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFF8;
        if (*(_DWORD *)((v32 & 0xFFFFFFFFFFFFFFF8) + 192) == -1) {
          goto LABEL_81;
        }
        uint64_t v34 = *(void *)(v33 + 8);
        uint64_t v35 = *(unsigned __int16 **)(v34 + 16);
        int v36 = *v35;
        if ((v36 - 4821) < 4 || (*((void *)v35 + 2) & 0x20) != 0) {
          goto LABEL_81;
        }
        if ((v36 - 4581) < 0xC || (*((void *)v35 + 2) & 0x80) != 0) {
          goto LABEL_74;
        }
        uint64_t v38 = *((void *)v35 + 1);
        if ((*(_WORD *)(v34 + 44) & 0xC) != 0 && (*(_WORD *)(v34 + 44) & 4) == 0)
        {
          uint64_t v41 = *(void *)(v33 + 8);
          if ((v38 & 0x1000000) != 0) {
            goto LABEL_81;
          }
          while ((*(_WORD *)(v41 + 44) & 8) != 0)
          {
            uint64_t v41 = *(void *)(v41 + 8);
            if (*(unsigned char *)(*(void *)(v41 + 16) + 11)) {
              goto LABEL_81;
            }
          }
        }
        else if ((v38 & 0x1000000) != 0)
        {
          goto LABEL_81;
        }
        if ((v36 - 1) <= 1)
        {
          if (*(unsigned char *)(*(void *)(v34 + 32) + 48)) {
            goto LABEL_81;
          }
        }
        else
        {
LABEL_74:
          if (v11 == 8389120 && (v36 - 4581) < 0xC) {
            goto LABEL_81;
          }
        }
        if (!v5 || *((_DWORD *)v30 + 2)) {
          goto LABEL_79;
        }
        int v40 = sub_1CBA803A8((uint64_t)&v97, v33, 0, 0);
        int v5 = v83;
        if (v40)
        {
          unint64_t v33 = *v30 & 0xFFFFFFFFFFFFFFF8;
LABEL_79:
          if (v89 >= (unint64_t)HIDWORD(v89)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v88 + v89) = v33;
          LODWORD(v89) = v89 + 1;
        }
LABEL_81:
        v30 += 2;
      }
      while (v30 != v31);
    }
    if (v92)
    {
      uint64_t v42 = (long long *)v91;
      uint64_t v43 = 16 * v92;
      do
      {
        long long v44 = *v42++;
        long long v86 = v44;
        llvm::SUnit::removePred(v3, (uint64_t)&v86);
        v43 -= 16;
      }
      while (v43);
    }
    if (v89)
    {
      uint64_t v45 = (uint64_t *)v88;
      uint64_t v46 = 8 * v89;
      do
      {
        uint64_t v47 = *v45++;
        sub_1CB905384(v47, v3);
        v46 -= 8;
      }
      while (v46);
    }
    *((void *)&v86 + 1) = 0;
    uint64_t v48 = *(void *)(v3 + 8);
    unsigned int v9 = v13;
    int v49 = (void *)(*(void *)(v48 + 48) & 0xFFFFFFFFFFFFFFF8);
    if ((*(void *)(v48 + 48) & 7) != 0) {
      int v49 = (void *)v49[1];
    }
    else {
      *(void *)(v48 + 48) = v49;
    }
    uint64_t v50 = (unint64_t *)((*v49 & ((uint64_t)(*v49 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) + 16);
    unint64_t v51 = *(void *)((*v49 & ((uint64_t)(*v49 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) + 0x10);
    if (v51)
    {
      unint64_t v63 = (v51 >> 1) & ~(-1 << (v51 >> 58));
      if (v63)
      {
        int v62 = __clz(__rbit64(v63));
LABEL_112:
        LODWORD(v86) = v62;
        DWORD1(v86) = sub_1CB9E5BDC(v50);
        int v64 = **(unsigned __int16 **)(v48 + 16);
        unsigned int v65 = sub_1CBC7A3F8(v64, 0x3Eu);
        if (v65 == -1) {
          unsigned int v65 = sub_1CBC7A3F8(v64, 0x3Du);
        }
        uint64_t v66 = *(void *)(v48 + 32);
        int v67 = *(unsigned __int8 *)(v66 + 32 * v65);
        uint64_t v68 = v66 + 32 * v65;
        if (v67 == 1) {
          unint64_t v69 = *(unsigned int *)(v68 + 16);
        }
        else {
          unint64_t v69 = (unint64_t)*(unsigned int *)(v68 + 4) << 32;
        }
        *((void *)&v86 + 1) = v69;
        uint64_t v87 = v3;
        if (!v101)
        {
LABEL_131:
          if (v95)
          {
            uint64_t v74 = (uint64_t *)v94;
            uint64_t v75 = 8 * v95;
            do
            {
              uint64_t v76 = *v74++;
              uint64_t v84 = v76 | 6;
              uint64_t v85 = 0;
              llvm::SUnit::addPred(v3, &v84, 1);
              v75 -= 8;
            }
            while (v75);
          }
          if (v98)
          {
            uint64_t v77 = (uint64_t *)v97;
            uint64_t v78 = 8 * v98;
            do
            {
              uint64_t v79 = *v77++;
              uint64_t v84 = v3 | 6;
              uint64_t v85 = 0;
              llvm::SUnit::addPred(v79, &v84, 1);
              v78 -= 8;
            }
            while (v78);
          }
          if (v101 >= HIDWORD(v101))
          {
            if (v100 > &v86 || (char *)v100 + 24 * v101 <= (char *)&v86) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unsigned int v80 = (char *)v100 + 24 * v101;
          long long v81 = v86;
          *((void *)v80 + 2) = v87;
          *(_OWORD *)unsigned int v80 = v81;
          LODWORD(v101) = v101 + 1;
          if (v88 != v90) {
            free(v88);
          }
          if (v91 != v13) {
            free(v91);
          }
          if (v94 != v96) {
            free(v94);
          }
          if (v97 != v99) {
            free(v97);
          }
          int v5 = v83;
          uint64_t v2 = v82;
          goto LABEL_147;
        }
        uint64_t v70 = 24 * v101;
        uint64_t v71 = (char *)v100 + 8;
        while (1)
        {
          if (DWORD2(v86) == *(_DWORD *)v71 && HIDWORD(v86) == *((_DWORD *)v71 + 1))
          {
            int v73 = *((_DWORD *)v71 - 2);
            if ((int)v86 <= v73)
            {
              if (SDWORD1(v86) < v73) {
                goto LABEL_124;
              }
            }
            else if (*((_DWORD *)v71 - 1) < (int)v86)
            {
              goto LABEL_124;
            }
          }
          uint64_t v84 = *((void *)v71 + 1) | 6;
          uint64_t v85 = 0;
          llvm::SUnit::addPred(v3, &v84, 1);
LABEL_124:
          v71 += 24;
          v70 -= 24;
          if (!v70) {
            goto LABEL_131;
          }
        }
      }
    }
    else
    {
      int v52 = *(_DWORD *)(v51 + 64);
      if (v52)
      {
        uint64_t v53 = 0;
        int v54 = v52 - 1;
        uint64_t v55 = *(uint64_t **)v51;
        unint64_t v56 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v52;
        uint64_t v57 = v54 & 0xFFFFFFC0;
        while (1)
        {
          uint64_t v59 = *v55++;
          uint64_t v58 = v59;
          unint64_t v60 = v57 == v53 ? v56 : -1;
          unint64_t v61 = v60 & v58;
          if (v61) {
            break;
          }
          v53 += 64;
          int v62 = -1;
          if (v57 + 64 == v53) {
            goto LABEL_112;
          }
        }
        int v62 = __clz(__rbit64(v61)) + v53;
        goto LABEL_112;
      }
    }
    int v62 = -1;
    goto LABEL_112;
  }
}

uint64_t sub_1CBA803A8(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  if (a3 > 0x20) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  if (!v6) {
    goto LABEL_15;
  }
  int v7 = *(unsigned __int16 **)(v6 + 16);
  if ((v7[8] & 0x20) != 0)
  {
LABEL_26:
    unsigned int v15 = *(_DWORD *)(a1 + 8);
    if (v15 >= *(_DWORD *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a1 + 8 * v15) = a2;
    ++*(_DWORD *)(a1 + 8);
    return 1;
  }
  int v8 = *v7;
  if (v8 > 2425)
  {
    if ((v8 - 8260) >= 5 && (v8 - 2426) > 3) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
  BOOL v9 = (v8 - 489) > 0x15 || ((1 << (v8 + 23)) & 0x3FFC03) == 0;
  if (!v9 || v8 == 337) {
    goto LABEL_26;
  }
LABEL_15:
  uint64_t v10 = a2 + 32;
  uint64_t v11 = 112;
  if (a4) {
    uint64_t v11 = 32;
  }
  else {
    uint64_t v10 = a2 + 112;
  }
  uint64_t v12 = *(unsigned int *)(v10 + 8);
  if (!v12) {
    return 1;
  }
  uint64_t v13 = 16 * v12;
  for (int i = (_DWORD *)(*(void *)(a2 + v11) + 8); ; i += 4)
  {
    if ((~*(i - 2) & 6) == 0 && !*i)
    {
      if (*(void *)((*((void *)i - 1) & 0xFFFFFFFFFFFFFFF8) + 8))
      {
        uint64_t result = sub_1CBA803A8(a1);
        if (!result) {
          break;
        }
      }
    }
    v13 -= 16;
    if (!v13) {
      return 1;
    }
  }
  return result;
}

void sub_1CBA80524()
{
}

void sub_1CBA80538(uint64_t a1, void *a2)
{
  v20[8] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2[2];
  do
  {
    uint64_t v4 = a2[6];
    uint64_t v5 = a2[7];
    if (v4 == v5) {
      break;
    }
    char v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v4 + 8);
      unint64_t v18 = v20;
      uint64_t v19 = 0x400000000;
      uint64_t v8 = *(unsigned int *)(v4 + 40);
      if (v8)
      {
        BOOL v9 = *(void **)(v4 + 32);
        uint64_t v10 = 16 * v8;
        do
        {
          if ((~*(_DWORD *)v9 & 6) == 0)
          {
            unint64_t v11 = *v9 & 0xFFFFFFFFFFFFFFF8;
            if (*(_DWORD *)(v11 + 192) != -1
              && ((**(_WORD **)(v7 + 16) | 2) == 0x2053
               || (**(unsigned __int16 **)(*(void *)(v11 + 8) + 16) | 2) == 0x2053))
            {
              if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)v3 + 1064))(v3, v7, *(void *)(v11 + 8)))
              {
                if (v19 >= (unint64_t)HIDWORD(v19)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((_OWORD *)v18 + v19) = *(_OWORD *)v9;
                LODWORD(v19) = v19 + 1;
              }
            }
          }
          v9 += 2;
          v10 -= 16;
        }
        while (v10);
        uint64_t v12 = (char *)v18;
        uint64_t v13 = (char *)v18 + 16 * v19;
        if (v19)
        {
          do
          {
            *(_OWORD *)uint64_t v17 = *(_OWORD *)v12;
            llvm::SUnit::removePred(v4, (uint64_t)v17);
            uint64_t v14 = *(unsigned int *)(v4 + 120);
            if (v14)
            {
              unsigned int v15 = *(void **)(v4 + 112);
              uint64_t v16 = 16 * v14;
              do
              {
                if ((~*(_DWORD *)v15 & 6) == 0) {
                  llvm::SUnit::addPred(*v15 & 0xFFFFFFFFFFFFFFF8, v17, 1);
                }
                v15 += 2;
                v16 -= 16;
              }
              while (v16);
            }
            v12 += 16;
          }
          while (v12 != v13);
          char v6 = 1;
          uint64_t v12 = (char *)v18;
        }
        if (v12 != (char *)v20) {
          free(v12);
        }
      }
      v4 += 272;
    }
    while (v4 != v5);
  }
  while ((v6 & 1) != 0);
}

uint64_t sub_1CBA8076C()
{
  qword_1EBCBF120 = 0;
  *(void *)algn_1EBCBF128 = "agx2";
  qword_1EBCBF130 = 4;
  unk_1EBCBF138 = "Custom AGX2 scheduler.";
  qword_1EBCBF140 = 22;
  unk_1EBCBF148 = sub_1CBA73A58;
  sub_1CB835A84(&llvm::MachineSchedRegistry::Registry, &qword_1EBCBF120);

  return __cxa_atexit((void (*)(void *))sub_1CB835A50, &qword_1EBCBF120, &dword_1CB82C000);
}

void sub_1CBA807FC(llvm *a1)
{
  llvm::initializeFunctionGroupInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLiveIntervalsPass((uint64_t)a1);
  llvm::initializeMachineBlockFrequencyInfoPass(a1, v2);
  llvm::initializeMachineModuleInfoWrapperPassPass(a1, v3);
  operator new();
}

uint64_t sub_1CBA808B4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCBF150;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25F3F60;
  *(void *)(a1 + 264) = a1 + 280;
  *(void *)(a1 + 272) = 0x600000000;
  *(_DWORD *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBF158, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBA807FC;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCBF158, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CBA809CC()
{
}

void sub_1CBA80A08(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F25F3F60;
  MEMORY[0x1D25D9CD0](*((void *)a1 + 42), 4);
  uint64_t v2 = (void *)*((void *)a1 + 33);
  if (v2 != (void *)((char *)a1 + 280)) {
    free(v2);
  }
  *(void *)a1 = &unk_1F260E110;
  uint64_t v3 = (void *)*((void *)a1 + 22);
  if (v3 != (void *)((char *)a1 + 192)) {
    free(v3);
  }
  uint64_t v4 = (void *)*((void *)a1 + 13);
  if (v4 != (void *)((char *)a1 + 120)) {
    free(v4);
  }
  uint64_t v5 = (void *)*((void *)a1 + 4);
  if (v5 != (void *)((char *)a1 + 48)) {
    free(v5);
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBA80ADC(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F25F3F60;
  MEMORY[0x1D25D9CD0](*((void *)a1 + 42), 4);
  uint64_t v2 = (void *)*((void *)a1 + 33);
  if (v2 != (void *)((char *)a1 + 280)) {
    free(v2);
  }
  *(void *)a1 = &unk_1F260E110;
  uint64_t v3 = (void *)*((void *)a1 + 22);
  if (v3 != (void *)((char *)a1 + 192)) {
    free(v3);
  }
  uint64_t v4 = (void *)*((void *)a1 + 13);
  if (v4 != (void *)((char *)a1 + 120)) {
    free(v4);
  }
  uint64_t v5 = (void *)*((void *)a1 + 4);
  if (v5 != (void *)((char *)a1 + 48)) {
    free(v5);
  }
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBA80BC4()
{
  return "AGX2SetSpillToLMTarget";
}

uint64_t sub_1CBA80BD4(uint64_t a1)
{
  *(unsigned char *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  int v1 = *(_DWORD *)(a1 + 344);
  if (v1 || *(_DWORD *)(a1 + 348))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 352);
    if (v3 > 4 * v1 && v3 >= 0x41)
    {
      sub_1CD414440((_DWORD *)(a1 + 336));
    }
    else
    {
      if (v3)
      {
        uint64_t v4 = *(_DWORD **)(a1 + 336);
        uint64_t v5 = 8 * v3;
        do
        {
          *uint64_t v4 = -1;
          v4 += 2;
          v5 -= 8;
        }
        while (v5);
      }
      *(void *)(a1 + 344) = 0;
    }
  }
  return 0;
}

void sub_1CBA80C54(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineModuleInfoWrapperPass::ID);
  *(unsigned char *)(a2 + 160) = 1;

  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1CBA80CE4(uint64_t a1, uint64_t *a2)
{
  v589[16] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 248)) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *(llvm::Module **)(*a2 + 40);
  if (word_1EBCBF168)
  {
    int v6 = dword_1EBCBF1E0;
  }
  else
  {
    uint64_t v534 = "agx.max_work_group_size";
    v539[0] = 259;
    uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v5, (const char **)&v534);
    if (!NamedMetadata)
    {
      uint64_t v10 = getenv("AGX_SPILL_TO_LM_THREADGROUP_SIZE");
      unsigned int v7 = 0;
      BOOL v8 = v10 != 0;
      LOBYTE(v6) = 32 * v8;
      goto LABEL_9;
    }
    uint64_t v185 = *(void *)(*(void *)(***(void ***)(NamedMetadata + 48)
                                 - 8 * *(unsigned int *)(***(void ***)(NamedMetadata + 48) + 8))
                     + 128);
    unsigned int v186 = (void *)(v185 + 24);
    if (*(_DWORD *)(v185 + 32) >= 0x41u) {
      unsigned int v186 = (void *)*v186;
    }
    int v6 = *(_DWORD *)v186;
  }
  unsigned int v7 = v6 & 0xFFFFFF00;
  BOOL v8 = 1;
LABEL_9:
  uint64_t v2 = 0;
  if (!v8) {
    return v2;
  }
  int v11 = v7 | v6;
  if (!v11) {
    return v2;
  }
  *(_DWORD *)(a1 + 252) = v11;
  uint64_t v12 = *(uint64_t **)(a1 + 8);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (v13 == v14)
  {
LABEL_14:
    uint64_t v15 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v13 != &llvm::FunctionGroupInfoWrapperPass::ID)
    {
      v13 += 16;
      if (v13 == v14) {
        goto LABEL_14;
      }
    }
    uint64_t v15 = *(void *)(v13 + 8);
  }
  uint64_t v16 = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v15 + 96))(v15, &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  (*(void (**)(uint64_t, llvm::Module *))(*(void *)v16 + 16))(v16, v5);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v16 + 24))(v16, v4);
  if ((*(uint64_t (**)(void))(*(void *)v17 + 560))() != v4) {
    return 0;
  }
  *(unsigned char *)(a1 + 248) = 1;
  int v18 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v16 + 64))(v16) + 12);
  if (!v18) {
    int v18 = -1;
  }
  unsigned int v468 = v18;
  uint64_t v19 = *(uint64_t **)(a1 + 8);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  if (v20 == v21)
  {
LABEL_22:
    uint64_t v22 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v20 != &llvm::MachineModuleInfoWrapperPass::ID)
    {
      v20 += 16;
      if (v20 == v21) {
        goto LABEL_22;
      }
    }
    uint64_t v22 = *(void *)(v20 + 8);
  }
  uint64_t v23 = (llvm::MachineModuleInfo *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v22 + 96))(v22, &llvm::MachineModuleInfoWrapperPass::ID)+ 32);
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 560))(v17);
  MachineFunctiounsigned int n = (void *)llvm::MachineModuleInfo::getMachineFunction(v23, (const Function *)v24);
  uint64_t v26 = *(llvm::Module **)(v24 + 40);
  uint64_t v27 = MachineFunction[2];
  int v489 = 0;
  uint64_t v471 = (uint64_t)MachineFunction;
  uint64_t v2 = 0;
  if (!sub_1CBA9F924(v27, MachineFunction, &v489)) {
    return v2;
  }
  sub_1CD1157F4(v26, 0, (uint64_t)&v534);
  unsigned int v28 = v534;
  if (v534 >= 0x80) {
    unsigned int v28 = 128;
  }
  if (!(_BYTE)v535) {
    unsigned int v28 = 128;
  }
  unsigned int v469 = v28;
  if (v28 >= dword_1EBCBF2A0) {
    unsigned int v29 = dword_1EBCBF2A0;
  }
  else {
    unsigned int v29 = v28;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v17 + 72))(&v534, v17);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v17 + 80))(&v582, v17);
  uint64_t v2 = (uint64_t)v534;
  uint64_t v30 = v582;
  if (v534)
  {
    (*(void (**)(void **__return_ptr, void *))(*(void *)v534 + 16))(&v534, v534);
    int v31 = v534;
    if (v30)
    {
LABEL_34:
      (*(void (**)(void **__return_ptr, void *))(*v30 + 16))(&v534, v30);
      uint64_t v32 = v534;
      goto LABEL_35;
    }
  }
  else
  {
    int v31 = 0;
    if (v582) {
      goto LABEL_34;
    }
  }
  uint64_t v32 = 0;
LABEL_35:
  unsigned int v33 = 4;
  while (((*(uint64_t (**)(void *, void *))(*(void *)v31 + 24))(v31, v32) & 1) == 0)
  {
    uint64_t v34 = *(void *)(*(uint64_t (**)(void *))(*(void *)v31 + 32))(v31);
    if (v34 != v24)
    {
      uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v17 + 640))(v17, v34);
      if ((v35 & 0xFF00000000) != 0)
      {
        if (v33 <= v35) {
          unsigned int v33 = v35;
        }
      }
      else
      {
        if ((*(_WORD *)(v34 + 18) & 0x3FF0) != 0x640)
        {
          if (v32) {
            (*(void (**)(void *))(*(void *)v32 + 8))(v32);
          }
          (*(void (**)(void *))(*(void *)v31 + 8))(v31);
          if (v30) {
            (*(void (**)(void *))(*v30 + 8))(v30);
          }
          if (!v2) {
            return v2;
          }
          (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
          return 0;
        }
        if (dword_1EBCBF2A0 >= v469) {
          LODWORD(v35) = v469;
        }
        else {
          LODWORD(v35) = dword_1EBCBF2A0;
        }
      }
      if (v29 <= v35) {
        unsigned int v29 = v35;
      }
    }
    (*(void (**)(void *))(*(void *)v31 + 40))(v31);
  }
  if (v32) {
    (*(void (**)(void *))(*(void *)v32 + 8))(v32);
  }
  (*(void (**)(void *))(*(void *)v31 + 8))(v31);
  if (v30) {
    (*(void (**)(void *))(*v30 + 8))(v30);
  }
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unsigned int v36 = v469;
  uint64_t v37 = a1;
  uint64_t v38 = (void *)*(unsigned int *)(a1 + 252);
  if (v469 >= v29) {
    unsigned int v39 = v29;
  }
  else {
    unsigned int v39 = v469;
  }
  if (v469 >= v33) {
    unsigned int v36 = v33;
  }
  unsigned int v466 = v39;
  unsigned int v467 = v36;
  int v481 = v26;
  __int16 v482 = 1;
  LOBYTE(v483) = 0;
  LOBYTE(v485) = 0;
  uint64_t v534 = "agx.local.store.spill";
  v539[0] = 259;
  uint64_t inserted = llvm::Module::getNamedMetadata(v26, (const char **)&v534);
  if (!inserted)
  {
    HIBYTE(v482) = 1;
    uint64_t inserted = llvm::Module::getOrInsertNamedMetadata(v26, "agx.local.store.spill", 0x15uLL);
  }
  uint64_t v45 = *(uint64_t **)(inserted + 48);
  uint64_t v46 = *((unsigned int *)v45 + 2);
  int v47 = v485;
  int v48 = v483;
  if (v46)
  {
    uint64_t v49 = 0;
    int v50 = 0;
    int v51 = 0;
    int v52 = 0;
    int v53 = 0;
    uint64_t v54 = *v45;
    uint64_t v40 = 0x6C6C6970732D6461;
    uint64_t v41 = 0x73657479622D6C6CLL;
    do
    {
      uint64_t v55 = (void *)(*(void *)(v54 + 8 * v49) - 8 * *(unsigned int *)(*(void *)(v54 + 8 * v49) + 8));
      uint64_t v56 = *(void *)(v55[1] + 128);
      uint64_t v57 = (unsigned int *)(v56 + 24);
      if (*(_DWORD *)(v56 + 32) >= 0x41u) {
        uint64_t v57 = *(unsigned int **)v57;
      }
      uint64_t v43 = *(void *)(*v55 + 8);
      uint64_t v42 = *v57;
      if (*(void *)v43 == 17)
      {
        uint64_t v62 = *(void *)(v43 + 24);
        uint64_t v63 = *(void *)(v43 + 32);
        uint64_t v43 = *(unsigned __int8 *)(v43 + 40);
        if (v62 == 0x672D646165726874 && v63 == 0x7A69732D70756F72 && v43 == 101)
        {
          int v50 = 1;
          int v51 = v49;
          int v47 = v42;
        }
      }
      else if (*(void *)v43 == 22)
      {
        uint64_t v58 = *(void *)(v43 + 24);
        uint64_t v59 = *(void *)(v43 + 32);
        uint64_t v43 = *(void *)(v43 + 38);
        BOOL v60 = v58 == 0x657268742D726570 && v59 == 0x6C6C6970732D6461;
        if (v60 && v43 == 0x73657479622D6C6CLL)
        {
          int v52 = 1;
          int v53 = v49;
          int v48 = v42;
        }
      }
      ++v49;
    }
    while (v46 != v49);
  }
  else
  {
    int v53 = 0;
    int v52 = 0;
    int v51 = 0;
    int v50 = 0;
  }
  char v486 = v50;
  int v485 = v47;
  char v484 = v52;
  int v483 = v48;
  int v488 = v51;
  int v487 = v53;
  uint64_t v66 = *(uint64_t **)v26;
  if (v52)
  {
    if (!v48) {
      sub_1CBA84528((uint64_t)&v481, 0xE7u);
    }
  }
  else
  {
    LODWORD(v535) = 32;
    uint64_t v534 = (void *)231;
    int v583 = 0;
    unsigned int v582 = 0;
    unsigned int v582 = llvm::MDString::get(v66, "per-thread-spill-bytes", 0x16uLL);
    uint64_t v68 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get((llvm::ConstantInt *)v66, (llvm::LLVMContext *)&v534, v67);
    int v583 = (void *)llvm::ValueAsMetadata::get(v68, v69);
    Impl = llvm::MDTuple::getImpl((uint64_t)v66, &v582, 2, 0, 1);
    uint64_t v572 = Impl;
    uint64_t v71 = *(void *)(inserted + 48);
    uint64_t v72 = *(unsigned int *)(v71 + 8);
    if (v72 >= *(_DWORD *)(v71 + 12))
    {
      sub_1CC608328(*(void *)(inserted + 48), (unsigned __int8 **)&v572);
    }
    else
    {
      uint64_t v40 = (uint64_t)Impl;
      int v73 = (uint64_t *)(*(void *)v71 + 8 * v72);
      *int v73 = v40;
      if (v40)
      {
        llvm::MetadataTracking::track((uint64_t)v73, (unsigned __int8 *)v40, 2);
        LODWORD(v72) = *(_DWORD *)(v71 + 8);
      }
      *(_DWORD *)(v71 + 8) = v72 + 1;
    }
    int v487 = v46;
    uint64_t v37 = a1;
    if (v535 >= 0x41 && v534) {
      MEMORY[0x1D25D9CB0](v534, 0x1000C8000313F17);
    }
    LODWORD(v46) = v46 + 1;
  }
  if (!v50)
  {
    LODWORD(v535) = 32;
    uint64_t v534 = v38;
    int v583 = 0;
    unsigned int v582 = 0;
    unsigned int v582 = llvm::MDString::get(v66, "thread-group-size", 0x11uLL);
    uint64_t v75 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get((llvm::ConstantInt *)v66, (llvm::LLVMContext *)&v534, v74);
    int v583 = (void *)llvm::ValueAsMetadata::get(v75, v76);
    uint64_t v77 = llvm::MDTuple::getImpl((uint64_t)v66, &v582, 2, 0, 1);
    uint64_t v572 = v77;
    uint64_t v78 = *(void *)(inserted + 48);
    uint64_t v79 = *(unsigned int *)(v78 + 8);
    if (v79 >= *(_DWORD *)(v78 + 12))
    {
      sub_1CC608328(*(void *)(inserted + 48), (unsigned __int8 **)&v572);
    }
    else
    {
      uint64_t v40 = (uint64_t)v77;
      unsigned int v80 = (uint64_t *)(*(void *)v78 + 8 * v79);
      *unsigned int v80 = v40;
      if (v40)
      {
        llvm::MetadataTracking::track((uint64_t)v80, (unsigned __int8 *)v40, 2);
        LODWORD(v79) = *(_DWORD *)(v78 + 8);
      }
      *(_DWORD *)(v78 + 8) = v79 + 1;
    }
    int v488 = v46;
    if (v535 >= 0x41 && v534) {
      MEMORY[0x1D25D9CB0](v534, 0x1000C8000313F17);
    }
  }
  unsigned int v503 = v469;
  unint64_t v501 = 0;
  unsigned __int8 v502 = 1;
  uint64_t v81 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v471 + 16) + 176))(*(void *)(v471 + 16), v40, v41, v42, v43);
  uint64_t v472 = *(void *)(v471 + 40);
  (*(void (**)(void **__return_ptr))(*(void *)v81 + 88))(&v515);
  unint64_t v479 = v81;
  int v82 = *(_DWORD *)(v81 + 44);
  uint64_t v510 = v513;
  int v512 = 6;
  if ((v82 + 63) >= 0x1C0)
  {
    unsigned int v511 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v82 + 63) >= 0x40) {
    bzero(v513, 8 * ((v82 + 63) >> 6));
  }
  unsigned int v511 = (v82 + 63) >> 6;
  int v514 = v82;
  int v500 = 0;
  unsigned int v83 = v503;
  uint64_t v84 = *(void *)(v81 + 8);
  uint64_t v85 = *(void *)(v81 + 56);
  long long v86 = (unsigned __int16 *)(v85
                           + (((unint64_t)*(unsigned int *)(v84 + 24 * (v503 + 55) + 16) >> 3) & 0x1FFFFFFE));
  int v88 = *v86;
  uint64_t v87 = v86 + 1;
  int v89 = v88 + (*(_DWORD *)(v84 + 24 * (v503 + 55) + 16) & 0xF) * (v503 + 55);
  do
  {
    unsigned __int16 v90 = v89;
    int v91 = *v87++;
    v89 += v91;
  }
  while (v91);
  int v500 = v90;
  int v92 = v517;
  if (!v517) {
    goto LABEL_121;
  }
  uint64_t v93 = 0;
  uint64_t v94 = (v517 - 1) >> 6;
  uint64_t v95 = (char *)v515;
  uint64_t v96 = v94 << 6;
  int v97 = (uint64_t *)v515;
  while (1)
  {
    uint64_t v99 = *v97++;
    uint64_t v98 = v99;
    unint64_t v100 = v96 + v93 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v517;
    unint64_t v101 = v100 & v98;
    if (v101) {
      break;
    }
    v93 -= 64;
    if (v96 + v93 == -64) {
      goto LABEL_121;
    }
  }
  int v102 = __clz(__rbit64(v101));
  if (v102 + 1 != v93)
  {
    int v187 = 0;
    int v474 = 0;
    LODWORD(v188) = v102 - v93;
    uint64_t v189 = (v102 - v93);
    int v190 = v510;
    do
    {
      if ((v188 - 1) <= 0xB6
        && ((byte_1CDE6FE30[(unint64_t)v188 >> 3] >> (v188 & 7)) & 1) != 0)
      {
        unint64_t v191 = *(unsigned int *)(v84 + 24 * v189 + 16);
        uint64_t v192 = (v191 >> 3) & 0x1FFFFFFE;
        int v193 = *(unsigned __int16 *)(v85 + v192) + (v191 & 0xF) * v188;
        uint64_t v194 = (unsigned __int16 *)(v85 + 2 + v192);
        do
        {
          v190[(unsigned __int16)v193 >> 6] |= 1 << v193;
          int v195 = *v194++;
          v193 += v195;
        }
        while (v195);
        int v196 = v474;
        if ((int)v188 - 56 < v83) {
          int v196 = v474 + 1;
        }
        int v474 = v196;
        if ((int)v188 - 56 < v83) {
          int v187 = v188;
        }
      }
      unsigned int v197 = v188 + 1;
      if (v188 + 1 == v92) {
        break;
      }
      unsigned int v198 = v197 >> 6;
      if (v197 >> 6 > v94) {
        break;
      }
      uint64_t v199 = 0;
      int v200 = v197 & 0x3F;
      BOOL v60 = v200 == 0;
      unint64_t v201 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v200;
      uint64_t v202 = v60 ? -1 : ~v201;
      unint64_t v203 = (unint64_t)v198 << 6;
      uint64_t v204 = v94 - v198;
      uint64_t v205 = &v95[8 * v198];
      while (1)
      {
        uint64_t v206 = v199 ? -1 : v202;
        unint64_t v207 = v204 == v199 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v92 : -1;
        unint64_t v208 = v206 & v207 & *(void *)&v205[8 * v199];
        if (v208) {
          break;
        }
        v203 += 64;
        ++v199;
        uint64_t v37 = a1;
        if (v204 + 1 == v199) {
          goto LABEL_384;
        }
      }
      unint64_t v188 = __clz(__rbit64(v208)) + v203;
      uint64_t v189 = v188;
      uint64_t v37 = a1;
    }
    while (v188 != -1);
LABEL_384:
    if (v187)
    {
      LODWORD(v501) = v187 - 55;
      HIDWORD(v501) = v187 - 55;
    }
  }
  else
  {
LABEL_121:
    int v474 = 0;
  }
  v498[0] = 0;
  v498[1] = 0;
  unsigned int v499 = 0;
  uint64_t v103 = *(void **)(v471 + 328);
  for (i = (void *)(v471 + 320); v103 != i; uint64_t v37 = a1)
  {
    uint64_t v534 = v103;
    if (v499)
    {
      unsigned int v104 = (v499 - 1) & ((v103 >> 4) ^ (v103 >> 9));
      unsigned int v105 = (void *)(v498[0] + 200 * v104);
      int v106 = (void *)*v105;
      if (v103 == (void *)*v105) {
        goto LABEL_136;
      }
      int v107 = 0;
      int v108 = 1;
      while (v106 != (void *)-4096)
      {
        if (v107) {
          BOOL v109 = 0;
        }
        else {
          BOOL v109 = v106 == (void *)-8192;
        }
        if (v109) {
          int v107 = v105;
        }
        unsigned int v110 = v104 + v108++;
        unsigned int v104 = v110 & (v499 - 1);
        unsigned int v105 = (void *)(v498[0] + 200 * v104);
        int v106 = (void *)*v105;
        if (v103 == (void *)*v105) {
          goto LABEL_136;
        }
      }
      if (v107) {
        int v111 = v107;
      }
      else {
        int v111 = v105;
      }
    }
    else
    {
      int v111 = 0;
    }
    unsigned int v105 = sub_1CBA8520C((uint64_t)v498, (uint64_t *)&v534, v111);
    *unsigned int v105 = v103;
    *(_OWORD *)(v105 + 1) = 0u;
    *(_OWORD *)(v105 + 3) = 0u;
    *(_OWORD *)(v105 + 5) = 0u;
    *(_OWORD *)(v105 + 7) = 0u;
    *(_OWORD *)(v105 + 9) = 0u;
    *(_OWORD *)(v105 + 11) = 0u;
    *(_OWORD *)(v105 + 13) = 0u;
    *(_OWORD *)(v105 + 15) = 0u;
    *(_OWORD *)(v105 + 17) = 0u;
    *(_OWORD *)(v105 + 19) = 0u;
    *(_OWORD *)(v105 + 21) = 0u;
    *(_OWORD *)(v105 + 23) = 0u;
LABEL_136:
    unsigned int v112 = v103 + 6;
    unint64_t v113 = v103[6] & 0xFFFFFFFFFFFFFFF8;
    if (!v113 || (*(unsigned char *)v113 & 4) == 0)
    {
      while ((*(_WORD *)(v113 + 44) & 4) != 0)
        unint64_t v113 = *(void *)v113 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((void *)v113 != v112)
    {
      unsigned int v114 = (int32x2_t *)(v105 + 1);
      uint64_t v115 = (uint64_t)(v105 + 7);
      do
      {
        if (**(unsigned __int16 **)(v113 + 16) - 13 >= 5)
        {
          uint64_t v116 = *(unsigned int *)(v113 + 40);
          if (v116)
          {
            int v117 = *(_DWORD **)(v113 + 32);
            uint64_t v118 = 32 * v116;
            do
            {
              if ((*v117 & 0x10000FF) == 0x1000000)
              {
                LODWORD(v534) = v117[1];
                if (v534 >> 30)
                {
                  if ((*v117 & 0xFFF00) == 0 || (*v117 & 0x10000000) != 0)
                  {
                    sub_1CBA84648(v115, (int *)&v534);
                    sub_1CBA84A18(v114, &v534);
                  }
                }
              }
              v117 += 8;
              v118 -= 32;
            }
            while (v118);
            uint64_t v120 = *(unsigned int *)(v113 + 40);
            if (v120)
            {
              uint64_t v121 = 32 * v120;
              unsigned int v122 = (_DWORD *)(*(void *)(v113 + 32) + 4);
              do
              {
                if ((*(v122 - 1) & 0x10000FF) == 0)
                {
                  LODWORD(v534) = *v122;
                  if (v534 >> 30) {
                    sub_1CBA84648((uint64_t)v114, (int *)&v534);
                  }
                }
                v122 += 8;
                v121 -= 32;
              }
              while (v121);
            }
          }
        }
        unint64_t v113 = *(void *)v113 & 0xFFFFFFFFFFFFFFF8;
        if (!v113 || (*(unsigned char *)v113 & 4) == 0)
        {
          while ((*(_WORD *)(v113 + 44) & 4) != 0)
            unint64_t v113 = *(void *)v113 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      while ((void *)v113 != v112);
    }
    uint64_t v103 = (void *)v103[1];
  }
  uint64_t v473 = v586;
  do
  {
    uint64_t v123 = *(void *)(v471 + 328);
    int v564 = v568;
    __src = v568;
    LODWORD(v567) = 0;
    uint64_t v566 = 0x100000008;
    uint64_t v569 = v571;
    v568[0] = v123;
    uint64_t v124 = *(void *)(v123 + 88);
    v571[0] = v123;
    v571[1] = v124;
    uint64_t v570 = 0x800000001;
    sub_1CB93B280((llvm::SmallPtrSetImplBase *)&v564);
    uint64_t v563 = 0;
    memset(v562, 0, sizeof(v562));
    long long v559 = 0u;
    uint64_t v560 = 0;
    long long v557 = 0u;
    long long v558 = 0u;
    long long v556 = 0u;
    uint64_t v553 = (long long *)((char *)&v556 + 8);
    int v554 = (char *)&v556 + 8;
    uint64_t v555 = 8;
    uint64_t v561 = &v562[2];
    v562[1] = 8;
    int v125 = v530;
    uint64_t v526 = v530;
    int v126 = __src;
    if (__src == v564)
    {
      uint64_t v527 = v530;
      unsigned int v127 = __src;
    }
    else
    {
      int v177 = v566;
      int v125 = malloc_type_malloc(8 * v566, 0x4065EBACuLL);
      if (!v125)
      {
        if (v177 || (v125 = malloc_type_malloc(1uLL, 0x4065EBACuLL), uint64_t v37 = a1, !v125)) {
LABEL_351:
        }
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      }
      uint64_t v527 = v125;
      unsigned int v127 = v564;
      int v126 = __src;
    }
    int v128 = HIDWORD(v566);
    LODWORD(v528) = v566;
    if (v126 == v127) {
      unsigned int v129 = HIDWORD(v566);
    }
    else {
      unsigned int v129 = v566;
    }
    if (v129)
    {
      memmove(v125, v126, 8 * v129);
      int v128 = HIDWORD(v566);
    }
    int v130 = v570;
    HIDWORD(v528) = v128;
    LODWORD(v529) = v567;
    uint64_t v531 = v533;
    uint64_t v532 = 0x800000000;
    if (v570)
    {
      if (v570 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v533, v569, 16 * v570);
      LODWORD(v532) = v130;
    }
    uint64_t v131 = v522;
    uint64_t v518 = v522;
    int v132 = v554;
    if (v554 == v553)
    {
      long long v519 = v522;
      int v133 = v554;
    }
    else
    {
      int v178 = v555;
      uint64_t v131 = malloc_type_malloc(8 * v555, 0x4065EBACuLL);
      if (!v131)
      {
        if (v178) {
          goto LABEL_351;
        }
        uint64_t v131 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        uint64_t v37 = a1;
        if (!v131) {
          goto LABEL_351;
        }
      }
      long long v519 = v131;
      int v133 = v553;
      int v132 = v554;
    }
    int v134 = HIDWORD(v555);
    LODWORD(v520) = v555;
    if (v132 == v133) {
      unsigned int v135 = HIDWORD(v555);
    }
    else {
      unsigned int v135 = v555;
    }
    if (v135)
    {
      memmove(v131, v132, 8 * v135);
      int v134 = HIDWORD(v555);
    }
    int v136 = v562[0];
    HIDWORD(v520) = v134;
    LODWORD(v521) = v556;
    uint64_t v523 = v525;
    uint64_t v524 = 0x800000000;
    if (v562[0])
    {
      if (v562[0] >= 9u) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v525, v561, 16 * v562[0]);
      LODWORD(v524) = v136;
    }
    unsigned int v582 = v586;
    if (v527 == v526)
    {
      int v583 = v586;
      unsigned int v137 = HIDWORD(v528);
      if (HIDWORD(v528)) {
        memmove(v586, v527, 8 * HIDWORD(v528));
      }
    }
    else
    {
      int v583 = v527;
      uint64_t v527 = v526;
      unsigned int v137 = HIDWORD(v528);
    }
    unint64_t v584 = __PAIR64__(v137, v528);
    LODWORD(v585) = v529;
    uint64_t v528 = 8;
    LODWORD(v529) = 0;
    int v587 = v589;
    uint64_t v588 = 0x800000000;
    int v138 = v532;
    if (v532)
    {
      if (v531 == v533)
      {
        if (v532 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v589, v533, 16 * v532);
        LODWORD(v588) = v138;
      }
      else
      {
        int v587 = v531;
        uint64_t v588 = v532;
        uint64_t v531 = v533;
        HIDWORD(v532) = 0;
      }
      LODWORD(v532) = 0;
    }
    uint64_t v572 = v576;
    if (v519 == v518)
    {
      v573 = v576;
      unsigned int v139 = HIDWORD(v520);
      if (HIDWORD(v520)) {
        memmove(v576, v519, 8 * HIDWORD(v520));
      }
    }
    else
    {
      v573 = v519;
      long long v519 = v518;
      unsigned int v139 = HIDWORD(v520);
    }
    unint64_t v574 = __PAIR64__(v139, v520);
    int v575 = (int)v521;
    uint64_t v520 = 8;
    LODWORD(v521) = 0;
    int v579 = v581;
    uint64_t v580 = 0x800000000;
    int v140 = v524;
    if (v524)
    {
      if (v523 == v525)
      {
        if (v524 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v581, v525, 16 * v524);
        LODWORD(v580) = v140;
      }
      else
      {
        int v579 = v523;
        uint64_t v580 = v524;
        uint64_t v523 = v525;
        HIDWORD(v524) = 0;
      }
      LODWORD(v524) = 0;
    }
    uint64_t v534 = v539;
    if (v583 == v582)
    {
      uint64_t v535 = v539;
      unsigned int v141 = HIDWORD(v584);
      if (HIDWORD(v584)) {
        memmove(v539, v583, 8 * HIDWORD(v584));
      }
    }
    else
    {
      uint64_t v535 = v583;
      int v583 = v582;
      unsigned int v141 = HIDWORD(v584);
    }
    unsigned int v536 = v584;
    unsigned int v537 = v141;
    int v538 = v585;
    unint64_t v584 = 8;
    LODWORD(v585) = 0;
    __int16 v541 = v543;
    uint64_t v542 = 0x800000000;
    int v142 = v588;
    if (v588)
    {
      if (v587 == v589)
      {
        if (v588 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v543, v589, 16 * v588);
        LODWORD(v542) = v142;
      }
      else
      {
        __int16 v541 = v587;
        uint64_t v542 = v588;
        int v587 = v589;
        HIDWORD(v588) = 0;
      }
      LODWORD(v588) = 0;
    }
    BOOL v544 = v549;
    if (v573 == v572)
    {
      int v545 = v549;
      unsigned int v143 = HIDWORD(v574);
      if (HIDWORD(v574)) {
        memmove(v549, v573, 8 * HIDWORD(v574));
      }
    }
    else
    {
      int v545 = v573;
      v573 = v572;
      unsigned int v143 = HIDWORD(v574);
    }
    unsigned int v546 = v574;
    unsigned int v547 = v143;
    int v548 = v575;
    unint64_t v574 = 8;
    int v575 = 0;
    uint64_t v550 = v552;
    uint64_t v551 = 0x800000000;
    int v144 = v580;
    int v145 = v579;
    if (v580)
    {
      if (v579 == v581)
      {
        if (v580 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v552, v581, 16 * v580);
        LODWORD(v551) = v144;
        int v145 = v579;
      }
      else
      {
        uint64_t v550 = v579;
        uint64_t v551 = v580;
        int v579 = v581;
        HIDWORD(v580) = 0;
        int v145 = v581;
      }
      LODWORD(v580) = 0;
    }
    if (v145 != v581) {
      free(v145);
    }
    if (v573 != v572) {
      free(v573);
    }
    if (v587 != v589) {
      free(v587);
    }
    if (v583 != v582) {
      free(v583);
    }
    if (v523 != v525) {
      free(v523);
    }
    if (v519 != v518) {
      free(v519);
    }
    if (v531 != v533) {
      free(v531);
    }
    if (v527 != v526) {
      free(v527);
    }
    unsigned int v582 = v586;
    int v146 = v535;
    if (v535 == v534)
    {
      int v583 = v586;
      uint64_t v147 = v586;
      int v148 = v535;
    }
    else
    {
      unsigned int v179 = v536;
      uint64_t v147 = malloc_type_malloc(8 * v536, 0x4065EBACuLL);
      if (!v147)
      {
        if (v179) {
          goto LABEL_351;
        }
        uint64_t v147 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        uint64_t v37 = a1;
        if (!v147) {
          goto LABEL_351;
        }
      }
      int v583 = v147;
      int v148 = v534;
      int v146 = v535;
    }
    unsigned int v149 = v537;
    LODWORD(v584) = v536;
    if (v146 == v148) {
      unsigned int v150 = v537;
    }
    else {
      unsigned int v150 = v536;
    }
    if (v150)
    {
      memmove(v147, v146, 8 * v150);
      unsigned int v149 = v537;
    }
    int v151 = v542;
    HIDWORD(v584) = v149;
    LODWORD(v585) = v538;
    int v587 = v589;
    uint64_t v588 = 0x800000000;
    if (v542)
    {
      if (v542 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v589, v541, 16 * v542);
      LODWORD(v588) = v151;
    }
    unsigned int v152 = v576;
    uint64_t v572 = v576;
    unsigned int v153 = v545;
    if (v545 == v544)
    {
      v573 = v576;
      unsigned int v154 = v545;
    }
    else
    {
      unsigned int v180 = v546;
      unsigned int v152 = malloc_type_malloc(8 * v546, 0x4065EBACuLL);
      if (!v152)
      {
        if (v180) {
          goto LABEL_351;
        }
        unsigned int v152 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        uint64_t v37 = a1;
        if (!v152) {
          goto LABEL_351;
        }
      }
      v573 = v152;
      unsigned int v154 = v544;
      unsigned int v153 = v545;
    }
    LODWORD(v574) = v546;
    unsigned int v155 = v547;
    if (v153 == v154) {
      unsigned int v156 = v547;
    }
    else {
      unsigned int v156 = v546;
    }
    if (v156)
    {
      memmove(v152, v153, 8 * v156);
      unsigned int v155 = v547;
    }
    HIDWORD(v574) = v155;
    int v575 = v548;
    int v579 = v581;
    uint64_t v580 = 0x800000000;
    uint64_t v157 = v551;
    if (v551)
    {
      if (v551 >= 9uLL) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v581, v550, 16 * v551);
      LODWORD(v580) = v157;
    }
    int v158 = 0;
    while (1)
    {
      if (v588 != v157) {
        goto LABEL_271;
      }
      if (!v157) {
        break;
      }
      uint64_t v159 = v579;
      uint64_t v160 = v587;
      while (*v160 == *v159 && v160[1] == v159[1])
      {
        v160 += 2;
        v159 += 2;
        if (v160 == (void *)((char *)v587 + 16 * v157)) {
          goto LABEL_290;
        }
      }
LABEL_271:
      int v477 = v158;
      v491[0] = *((void *)v587 + 2 * v588 - 2);
      uint64_t v162 = v491[0];
      unsigned int v163 = sub_1CBA84F2C((uint64_t)v498, v491);
      uint64_t v165 = v163[21];
      uint64_t v164 = v163[22];
      uint64_t v166 = (uint64_t)(v163 + 12);
      uint64_t v167 = v163[15];
      uint64_t v168 = v163[16];
      uint64_t v169 = *(int32x2_t **)(v162 + 88);
      BOOL v170 = *(int32x2_t **)(v162 + 96);
      while (v169 != v170)
      {
        v496[0] = *v169;
        char v171 = sub_1CBA84F2C((uint64_t)v498, (uint64_t *)v496);
        int32x2_t v504 = 0;
        uint64_t v505 = 0;
        int v506 = 0;
        sub_1CBA85A00((uint64_t)&v504, (uint64_t)(v171 + 18));
        __p = 0;
        int v508 = 0;
        uint64_t v509 = 0;
        sub_1CBA85A80(&__p, (const void *)v171[21], v171[22], (uint64_t)(v171[22] - v171[21]) >> 2);
        sub_1CBA84FC8(v166, (int *)__p, v508);
        if (__p)
        {
          int v508 = (int *)__p;
          operator delete(__p);
        }
        MEMORY[0x1D25D9CD0](*(void *)&v504, 4);
        ++v169;
      }
      sub_1CBA84FC8((uint64_t)(v163 + 18), (int *)v163[3], (int *)v163[4]);
      int32x2_t v504 = 0;
      uint64_t v505 = 0;
      int v506 = 0;
      sub_1CBA85A00((uint64_t)&v504, v166);
      __p = 0;
      int v508 = 0;
      uint64_t v509 = 0;
      sub_1CBA85A80(&__p, (const void *)v163[15], v163[16], (uint64_t)(v163[16] - v163[15]) >> 2);
      unsigned int v172 = (__int32 *)v163[9];
      unsigned int v173 = (__int32 *)v163[10];
      while (v172 != v173)
      {
        __int32 v174 = *v172++;
        v496[0].i32[0] = v174;
        sub_1CBA84A18(&v504, v496);
      }
      sub_1CBA84FC8((uint64_t)(v163 + 18), (int *)__p, v508);
      BOOL v176 = ((unint64_t)(v164 - v165) >> 2) != (uint64_t)(v163[22] - v163[21]) >> 2
          || ((unint64_t)(v168 - v167) >> 2) != (uint64_t)(v163[16] - v163[15]) >> 2;
      if (__p)
      {
        int v508 = (int *)__p;
        operator delete(__p);
      }
      MEMORY[0x1D25D9CD0](*(void *)&v504, 4);
      BOOL v60 = v588 == 1;
      LODWORD(v588) = v588 - 1;
      uint64_t v37 = a1;
      if (!v60) {
        sub_1CB93B280((llvm::SmallPtrSetImplBase *)&v582);
      }
      int v158 = v477 | v176;
      uint64_t v157 = v580;
    }
LABEL_290:
    if (v579 != v581) {
      free(v579);
    }
    if (v573 != v572) {
      free(v573);
    }
    if (v587 != v589) {
      free(v587);
    }
    if (v583 != v582) {
      free(v583);
    }
    if (v550 != v552) {
      free(v550);
    }
    if (v545 != v544) {
      free(v545);
    }
    if (v541 != v543) {
      free(v541);
    }
    if (v535 != v534) {
      free(v535);
    }
    if (v561 != &v562[2]) {
      free(v561);
    }
    if (v554 != v553) {
      free(v554);
    }
    if (v569 != v571) {
      free(v569);
    }
    if (__src != v564) {
      free(__src);
    }
  }
  while ((v158 & 1) != 0);
  if (*(unsigned char *)(v37 + 256)) {
    goto LABEL_451;
  }
  *(unsigned char *)(v37 + 256) = 1;
  int v181 = *(_DWORD *)(v479 + 44);
  unsigned int v182 = v181 + 63;
  uint64_t v183 = (v181 + 63) >> 6;
  uint64_t v534 = &v536;
  HIDWORD(v535) = 6;
  if ((v181 + 63) >= 0x1C0)
  {
    LODWORD(v535) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v184 = &v536;
  if (v182 >= 0x40)
  {
    bzero(&v536, 8 * v183);
    unsigned int v184 = &v536;
  }
  LODWORD(v535) = (v181 + 63) >> 6;
  int v540 = v181;
  unsigned int v209 = (void **)(a1 + 264);
  if ((void **)(a1 + 264) == &v534)
  {
    uint64_t v211 = a1;
  }
  else
  {
    uint64_t v210 = *(unsigned int *)(a1 + 272);
    if (v210 < v183)
    {
      uint64_t v211 = a1;
      if (*(_DWORD *)(a1 + 276) < v183)
      {
        *(_DWORD *)(a1 + 272) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v210) {
        memmove(*v209, &v536, 8 * v210);
      }
      else {
        uint64_t v210 = 0;
      }
      if (v210 != v535) {
        memcpy((char *)*v209 + 8 * v210, (char *)v534 + 8 * v210, 8 * v535 - 8 * v210);
      }
    }
    else
    {
      if (v182 >= 0x40) {
        memmove(*v209, &v536, 8 * v183);
      }
      uint64_t v211 = a1;
    }
    *(_DWORD *)(v211 + 272) = v183;
    LODWORD(v535) = 0;
    int v181 = v540;
    unsigned int v184 = (unsigned int *)v534;
  }
  *(_DWORD *)(v211 + 328) = v181;
  if (v184 != &v536) {
    free(v184);
  }
  uint64_t v212 = v211 + 336;
  uint64_t v213 = 56;
  uint64_t v214 = *(void *)(v211 + 336);
  while (2)
  {
    unint64_t v215 = *(unsigned int *)(*(void *)(v479 + 8) + 24 * v213 + 16);
    unint64_t v216 = (_WORD *)(*(void *)(v479 + 56) + ((v215 >> 3) & 0x1FFFFFFE));
    unsigned __int16 v217 = *v216 + (v215 & 0xF) * v213;
    while (2)
    {
      int v218 = v217;
      *(void *)(*(void *)(v211 + 264) + 8 * (v217 >> 6)) |= 1 << v217;
      unsigned int v219 = *(_DWORD *)(v211 + 352);
      if (!v219)
      {
        uint64_t v222 = 0;
        goto LABEL_416;
      }
      unsigned int v220 = v219 - 1;
      unsigned int v221 = (v219 - 1) & (37 * v217);
      uint64_t v222 = (_DWORD *)(v214 + 8 * v221);
      int v223 = *v222;
      if (*v222 != v218)
      {
        unsigned int v224 = 0;
        int v225 = 1;
        while (v223 != -1)
        {
          if (v224) {
            BOOL v226 = 0;
          }
          else {
            BOOL v226 = v223 == -2;
          }
          if (v226) {
            unsigned int v224 = v222;
          }
          unsigned int v227 = v221 + v225++;
          unsigned int v221 = v227 & v220;
          uint64_t v222 = (_DWORD *)(v214 + 8 * (v227 & v220));
          int v223 = *v222;
          if (*v222 == v218) {
            goto LABEL_421;
          }
        }
        if (v224) {
          uint64_t v222 = v224;
        }
LABEL_416:
        int v228 = *(_DWORD *)(v211 + 344);
        if (4 * v228 + 4 < 3 * v219)
        {
          if (v219 + ~v228 - *(_DWORD *)(v211 + 348) > v219 >> 3) {
            goto LABEL_418;
          }
          sub_1CD4144EC(v212, v219);
          uint64_t v214 = *(void *)(v211 + 336);
          int v238 = *(_DWORD *)(v211 + 352);
          if (v238)
          {
            int v239 = v238 - 1;
            unsigned int v240 = (v238 - 1) & (37 * v218);
            uint64_t v222 = (_DWORD *)(v214 + 8 * v240);
            int v241 = *v222;
            if (*v222 != v218)
            {
              unsigned int v234 = 0;
              int v242 = 1;
              while (v241 != -1)
              {
                if (v234) {
                  BOOL v243 = 0;
                }
                else {
                  BOOL v243 = v241 == -2;
                }
                if (v243) {
                  unsigned int v234 = v222;
                }
                unsigned int v244 = v240 + v242++;
                unsigned int v240 = v244 & v239;
                uint64_t v222 = (_DWORD *)(v214 + 8 * (v244 & v239));
                int v241 = *v222;
                if (*v222 == v218) {
                  goto LABEL_448;
                }
              }
              goto LABEL_446;
            }
            goto LABEL_448;
          }
LABEL_449:
          uint64_t v222 = 0;
          goto LABEL_448;
        }
        sub_1CD4144EC(v212, 2 * v219);
        uint64_t v214 = *(void *)(v211 + 336);
        int v230 = *(_DWORD *)(v211 + 352);
        if (!v230) {
          goto LABEL_449;
        }
        int v231 = v230 - 1;
        unsigned int v232 = (v230 - 1) & (37 * v218);
        uint64_t v222 = (_DWORD *)(v214 + 8 * v232);
        int v233 = *v222;
        if (*v222 != v218)
        {
          unsigned int v234 = 0;
          int v235 = 1;
          while (v233 != -1)
          {
            if (v234) {
              BOOL v236 = 0;
            }
            else {
              BOOL v236 = v233 == -2;
            }
            if (v236) {
              unsigned int v234 = v222;
            }
            unsigned int v237 = v232 + v235++;
            unsigned int v232 = v237 & v231;
            uint64_t v222 = (_DWORD *)(v214 + 8 * (v237 & v231));
            int v233 = *v222;
            if (*v222 == v218) {
              goto LABEL_448;
            }
          }
LABEL_446:
          if (v234) {
            uint64_t v222 = v234;
          }
        }
LABEL_448:
        uint64_t v211 = a1;
LABEL_418:
        ++*(_DWORD *)(v211 + 344);
        if (*v222 != -1) {
          --*(_DWORD *)(v211 + 348);
        }
        *uint64_t v222 = v218;
        v222[1] = 0;
      }
LABEL_421:
      v222[1] = v213;
      int v229 = (unsigned __int16)v216[1];
      ++v216;
      unsigned __int16 v217 = v229 + v218;
      if (v229) {
        continue;
      }
      break;
    }
    if (++v213 != 184) {
      continue;
    }
    break;
  }
LABEL_451:
  unsigned int v245 = *(void **)(v471 + 328);
  if (v245 == i)
  {
    BOOL v350 = 1;
    goto LABEL_636;
  }
  uint64_t v246 = &off_1E66AB080;
  while (2)
  {
    uint64_t v572 = &v574;
    v573 = (void *)0x800000000;
    unint64_t v577 = v479;
    uint64_t v578 = v472;
    unsigned int v247 = (*(uint64_t (**)(unint64_t))(*(void *)v479 + 296))(v479);
    unsigned int v248 = v247;
    uint64_t v249 = v247;
    if (v573 != v247)
    {
      if (v573 <= v247)
      {
        if (HIDWORD(v573) < v247) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v573 != v247) {
          bzero((char *)v572 + 4 * v573, 4 * (v247 - (unint64_t)v573));
        }
      }
      LODWORD(v573) = v248;
    }
    if (v248) {
      bzero(v572, 4 * v249);
    }
    uint64_t v534 = &v536;
    uint64_t v535 = (void *)0x600000000;
    unsigned int v250 = v511;
    if (v511)
    {
      if (v511 >= 7uLL) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(&v536, v510, 8 * v511);
      LODWORD(v535) = v250;
    }
    int v540 = v514;
    v496[0] = 0;
    v496[1] = 0;
    int v497 = 0;
    __src = 0;
    int v564 = 0;
    LODWORD(v566) = 0;
    v568[0] = 0;
    v568[1] = 0;
    uint64_t v567 = 0;
    unsigned int v582 = (void *)a1;
    int v583 = &v501;
    unint64_t v584 = v479;
    uint64_t v585 = v472;
    v586[0] = &v503;
    v586[1] = &v500;
    v586[2] = &v564;
    v586[3] = v496;
    v586[4] = &v534;
    if (v499)
    {
      unsigned int v251 = (v499 - 1) & ((v245 >> 4) ^ (v245 >> 9));
      uint64_t v252 = v498[0] + 200 * v251;
      uint64_t v253 = *(void *)v252;
      if (v245 != *(void **)v252)
      {
        int v254 = 1;
        while (v253 != -4096)
        {
          unsigned int v255 = v251 + v254++;
          unsigned int v251 = v255 & (v499 - 1);
          uint64_t v252 = v498[0] + 200 * v251;
          uint64_t v253 = *(void *)v252;
          if (v245 == *(void **)v252) {
            goto LABEL_472;
          }
        }
        uint64_t v252 = v498[0] + 200 * v499;
      }
    }
    else
    {
      uint64_t v252 = v498[0];
    }
LABEL_472:
    int v554 = 0;
    uint64_t v553 = 0;
    LODWORD(v555) = 0;
    sub_1CBA85A00((uint64_t)&v553, v252 + 104);
    long long v556 = 0uLL;
    *(void *)&long long v557 = 0;
    sub_1CBA85A80(&v556, *(const void **)(v252 + 128), *(void *)(v252 + 136), (uint64_t)(*(void *)(v252 + 136) - *(void *)(v252 + 128)) >> 2);
    int v256 = *(uint64_t **)(a1 + 8);
    uint64_t v257 = *v256;
    uint64_t v258 = v256[1];
    BOOL v475 = v245;
    if (v257 == v258)
    {
LABEL_475:
      uint64_t v259 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v257 != &llvm::LiveIntervals::ID)
      {
        v257 += 16;
        if (v257 == v258) {
          goto LABEL_475;
        }
      }
      uint64_t v259 = *(void *)(v257 + 8);
    }
    uint64_t v260 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v259 + 96))(v259, &llvm::LiveIntervals::ID);
    uint64_t v261 = v260;
    int v263 = (_DWORD *)*((void *)&v556 + 1);
    uint64_t v262 = (_DWORD *)v556;
    if ((void)v556 != *((void *)&v556 + 1))
    {
      BOOL v264 = (void *)(v260 + 408);
      do
      {
        LODWORD(v526) = *v262;
        uint64_t v265 = v526 & 0x7FFFFFFF;
        uint64_t v266 = *(unsigned int *)(v261 + 416);
        if ((v526 & 0x7FFFFFFF) >= v266)
        {
          sub_1CB9153B8(v261 + 408, v265 - v266 + 1, *(void *)(v261 + 424));
LABEL_491:
          operator new();
        }
        uint64_t v267 = *(void *)(*v264 + 8 * v265);
        if (!v267) {
          goto LABEL_491;
        }
        if (*(float *)(v267 + 116) == INFINITY)
        {
          if (word_1EBCBF468) {
            BOOL v268 = byte_1EBCBF4E0 == 0;
          }
          else {
            BOOL v268 = 1;
          }
          if (v268
            || (sub_1CBA84648((uint64_t)&v564, (int *)&v526),
                (int v269 = sub_1CBA847DC(a1, *(void *)(v479 + 8), *(void *)(v479 + 56), *(void *)(v472 + 24), v526, (uint64_t)v534)) == 0))
          {
            LODWORD(v473) = v503;
            int v270 = 1;
            goto LABEL_622;
          }
          sub_1CD4145B8((uint64_t)v496, (int *)&v526)[1] = v269;
        }
        sub_1CBA848E0((uint64_t *)&v572, v526);
        ++v262;
      }
      while (v262 != v263);
    }
    uint64_t v271 = (int *)(*(uint64_t (**)(unint64_t, __int16 ***))(*(void *)v577 + 320))(v577, v246);
    int v272 = *v271;
    if (*v271 == -1)
    {
      int v278 = -1;
      uint64_t v275 = v245;
    }
    else
    {
      unsigned int v273 = 0;
      unsigned int v274 = v271 + 1;
      uint64_t v275 = v245;
      do
      {
        unsigned int v276 = *((_DWORD *)v572 + v272);
        if (v273 <= v276) {
          unsigned int v273 = v276;
        }
        int v277 = *v274++;
        int v272 = v277;
      }
      while (v277 != -1);
      int v278 = v273 - 1;
    }
    BOOL v279 = (_DWORD *)(*(uint64_t (**)(unint64_t, __int16 ***))(*(void *)v577 + 280))(v577, v246);
    unsigned int v280 = (*v279 + v278) / *v279 + v474;
    if (HIDWORD(v501) > v280) {
      unsigned int v280 = HIDWORD(v501);
    }
    HIDWORD(v501) = v280;
    uint64_t v281 = v275 + 6;
    unint64_t v282 = v275[6] & 0xFFFFFFFFFFFFFFF8;
    if (!v282 || (*(unsigned char *)v282 & 4) == 0)
    {
      while ((*(_WORD *)(v282 + 44) & 4) != 0)
        unint64_t v282 = *(void *)v282 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((void *)v282 == v281)
    {
LABEL_621:
      int v270 = 0;
      goto LABEL_622;
    }
    uint64_t v476 = v275 + 6;
    int v478 = (void *)(v261 + 408);
    while (2)
    {
      if (**(unsigned __int16 **)(v282 + 16) - 13 < 5) {
        goto LABEL_615;
      }
      uint64_t v527 = 0;
      uint64_t v526 = 0;
      LODWORD(v528) = 0;
      v530[0] = 0;
      v530[1] = 0;
      uint64_t v529 = 0;
      long long v519 = 0;
      uint64_t v518 = 0;
      LODWORD(v520) = 0;
      v522[0] = 0;
      v522[1] = 0;
      uint64_t v521 = 0;
      int32x2_t v504 = 0;
      uint64_t v505 = 0;
      int v506 = 0;
      int v508 = 0;
      uint64_t v509 = 0;
      __p = 0;
      v491[0] = 0;
      v491[1] = 0;
      int v492 = 0;
      uint64_t v494 = 0;
      uint64_t v495 = 0;
      unint64_t v493 = 0;
      uint64_t v283 = *(unsigned int *)(v282 + 40);
      if (v283)
      {
        unsigned int v284 = *(_DWORD **)(v282 + 32);
        uint64_t v285 = &v284[8 * v283];
        while (1)
        {
          if ((*v284 & 0x10000FF) != 0x1000000) {
            goto LABEL_539;
          }
          unint64_t v286 = v284[1];
          unsigned int v490 = v286;
          if (!v286) {
            goto LABEL_539;
          }
          if (v286 >> 30)
          {
            if ((v286 & 0x80000000) != 0) {
              goto LABEL_519;
            }
          }
          else if ((*(void *)((char *)v515 + ((v286 >> 3) & 0x1FFFFFF8)) >> v286))
          {
            goto LABEL_539;
          }
          if (sub_1CBA849C0(*(void *)(a1 + 264), v286, *(void *)(v479 + 8), *(void *)(v479 + 56)))
          {
LABEL_519:
            sub_1CBA84648((uint64_t)&v504, (int *)&v490);
            LODWORD(v286) = v490;
          }
          if ((v286 - 1) <= 0x3FFFFFFE)
          {
            unint64_t v287 = v246;
            int v288 = 0;
            unint64_t v289 = *(unsigned int *)(*(void *)(v479 + 8) + 24 * v286 + 16);
            uint64_t v290 = (_WORD *)(*(void *)(v479 + 56) + ((v289 >> 3) & 0x1FFFFFFE));
            __int16 v292 = *v290;
            __int16 v291 = v290 + 1;
            unsigned __int16 v293 = v292 + (v289 & 0xF) * v286;
            uint64_t v294 = *(void *)(a1 + 264);
            do
            {
              unsigned __int16 v295 = v293;
              if ((*(void *)(v294 + 8 * (v293 >> 6)) >> v293)) {
                int v288 = sub_1CBA86078(*(void *)(a1 + 336), *(_DWORD *)(a1 + 352), v293)[1];
              }
              int v296 = *v291++;
              unsigned __int16 v293 = v296 + v295;
            }
            while (v296);
            unsigned int v297 = v288 - 55;
            if (v501 > v297) {
              unsigned int v297 = v501;
            }
            LODWORD(v501) = v297;
            uint64_t v246 = v287;
            goto LABEL_539;
          }
          if ((*v284 & 0xFFF00) == 0 || (*v284 & 0x10000000) != 0)
          {
            if (sub_1CBA84A18((int32x2_t *)&v553, &v490))
            {
              sub_1CBA84648((uint64_t)&v526, (int *)&v490);
              if (sub_1CBA84A18((int32x2_t *)&v564, &v490))
              {
                unsigned int v299 = sub_1CBA84AA4((uint64_t *)v496, &v490)[1];
                uint64_t v300 = (unsigned __int16 *)(*(void *)(v479 + 56)
                                          + (((unint64_t)*(unsigned int *)(*(void *)(v479 + 8)
                                                                                + 24 * v299
                                                                                + 16) >> 3) & 0x1FFFFFFE));
                int v302 = *v300;
                int8x8_t v301 = v300 + 1;
                int v303 = v302 + (*(_DWORD *)(*(void *)(v479 + 8) + 24 * v299 + 16) & 0xF) * v299;
                unint64_t v304 = v534;
                do
                {
                  v304[(unsigned __int16)v303 >> 6] &= ~(1 << v303);
                  int v305 = *v301++;
                  v303 += v305;
                }
                while (v305);
                sub_1CBA84B14(v496, &v490);
              }
              goto LABEL_539;
            }
            if (v528)
            {
              unsigned int v306 = (37 * v490) & (v528 - 1);
              int v307 = *((_DWORD *)v526 + v306);
              if (v490 == v307) {
                goto LABEL_539;
              }
              int v308 = 1;
              while (v307 != -1)
              {
                unsigned int v309 = v306 + v308++;
                unsigned int v306 = v309 & (v528 - 1);
                int v307 = *((_DWORD *)v526 + v306);
                if (v490 == v307) {
                  goto LABEL_539;
                }
              }
            }
            unsigned int v298 = (uint64_t *)&v518;
          }
          else
          {
            unsigned int v298 = v491;
          }
          sub_1CBA84648((uint64_t)v298, (int *)&v490);
LABEL_539:
          v284 += 8;
          if (v284 == v285)
          {
            BOOL v310 = (unsigned int *)v521;
            uint64_t v311 = (unsigned int *)v522[0];
            while (v310 != v311)
            {
              unsigned int v312 = *v310++;
              sub_1CBA848E0((uint64_t *)&v572, v312);
            }
            break;
          }
        }
      }
      uint64_t v313 = (int *)(*(uint64_t (**)(unint64_t, __int16 ***))(*(void *)v577 + 320))(v577, v246);
      int v314 = *v313;
      if (*v313 == -1)
      {
        int v319 = -1;
      }
      else
      {
        unsigned int v315 = 0;
        unint64_t v316 = v313 + 1;
        do
        {
          unsigned int v317 = *((_DWORD *)v572 + v314);
          if (v315 <= v317) {
            unsigned int v315 = v317;
          }
          int v318 = *v316++;
          int v314 = v318;
        }
        while (v318 != -1);
        int v319 = v315 - 1;
      }
      uint64_t v320 = (_DWORD *)(*(uint64_t (**)(unint64_t, __int16 ***))(*(void *)v577 + 280))(v577, v246);
      unsigned int v321 = (*v320 + v319) / *v320 + v474;
      if (HIDWORD(v501) > v321) {
        unsigned int v321 = HIDWORD(v501);
      }
      HIDWORD(v501) = v321;
      sub_1CBA84BA0((uint64_t)&v582, (uint64_t)&v504);
      unint64_t v322 = (unsigned int *)v521;
      int8x8_t v323 = (unsigned int *)v522[0];
      while (v322 != v323)
      {
        unsigned int v324 = *v322++;
        sub_1CBA84E4C((uint64_t *)&v572, v324);
      }
      unint64_t v325 = (unsigned int *)v529;
      unint64_t v326 = (unsigned int *)v530[0];
      while (v325 != v326)
      {
        unsigned int v327 = *v325++;
        sub_1CBA84E4C((uint64_t *)&v572, v327);
      }
      uint64_t v328 = *(unsigned int *)(v282 + 40);
      if (v328)
      {
        uint64_t v329 = 32 * v328;
        uint64_t v330 = (unsigned int *)(*(void *)(v282 + 32) + 4);
        do
        {
          if ((*(v330 - 1) & 0x10000FF) == 0)
          {
            unint64_t v331 = *v330;
            unsigned int v490 = v331;
            if (v331)
            {
              if (v331 >> 30)
              {
                if ((v331 & 0x80000000) != 0) {
                  goto LABEL_574;
                }
LABEL_573:
                if (sub_1CBA849C0(*(void *)(a1 + 264), v331, *(void *)(v479 + 8), *(void *)(v479 + 56)))
                {
LABEL_574:
                  sub_1CBA84648((uint64_t)v491, (int *)&v490);
                  LODWORD(v331) = v490;
                }
                if ((v331 - 1) >= 0x3FFFFFFF && sub_1CBA84648((uint64_t)&v553, (int *)&v490)) {
                  sub_1CBA848E0((uint64_t *)&v572, v490);
                }
                goto LABEL_566;
              }
              if (((*(void *)((char *)v515 + ((v331 >> 3) & 0x1FFFFFF8)) >> v331) & 1) == 0) {
                goto LABEL_573;
              }
            }
          }
LABEL_566:
          v330 += 8;
          v329 -= 32;
        }
        while (v329);
      }
      unsigned int v332 = (int *)(*(uint64_t (**)(unint64_t, __int16 ***))(*(void *)v577 + 320))(v577, v246);
      int v333 = *v332;
      if (*v332 == -1)
      {
        int v338 = -1;
      }
      else
      {
        unsigned int v334 = 0;
        uint64_t v335 = v332 + 1;
        do
        {
          unsigned int v336 = *((_DWORD *)v572 + v333);
          if (v334 <= v336) {
            unsigned int v334 = v336;
          }
          int v337 = *v335++;
          int v333 = v337;
        }
        while (v337 != -1);
        int v338 = v334 - 1;
      }
      unsigned int v339 = (_DWORD *)(*(uint64_t (**)(unint64_t, __int16 ***))(*(void *)v577 + 280))(v577, v246);
      unsigned int v340 = (*v339 + v338) / *v339 + v474;
      if (HIDWORD(v501) > v340) {
        unsigned int v340 = HIDWORD(v501);
      }
      HIDWORD(v501) = v340;
      sub_1CBA84BA0((uint64_t)&v582, (uint64_t)v491);
      uint64_t v342 = v493;
      uint64_t v341 = v494;
      if (v493 == v494)
      {
        int v270 = 0;
        int v349 = 1;
        if (v493) {
          goto LABEL_607;
        }
        goto LABEL_608;
      }
      while (1)
      {
        unsigned int v343 = *v342;
        unsigned int v490 = v343;
        if (v343 - 1 < 0x3FFFFFFF) {
          goto LABEL_599;
        }
        uint64_t v344 = v343 & 0x7FFFFFFF;
        uint64_t v345 = *(unsigned int *)(v261 + 416);
        if ((v343 & 0x7FFFFFFF) >= v345)
        {
          sub_1CB9153B8((uint64_t)v478, v344 - v345 + 1, *(void *)(v261 + 424));
LABEL_602:
          operator new();
        }
        uint64_t v346 = *(void *)(*v478 + 8 * v344);
        if (!v346) {
          goto LABEL_602;
        }
        if (*(float *)(v346 + 116) != INFINITY) {
          goto LABEL_599;
        }
        if (!word_1EBCBF468 || byte_1EBCBF4E0 == 0) {
          break;
        }
        if (sub_1CBA84648((uint64_t)&v564, (int *)&v490))
        {
          int v348 = sub_1CBA847DC(a1, *(void *)(v479 + 8), *(void *)(v479 + 56), *(void *)(v472 + 24), v490, (uint64_t)v534);
          if (!v348) {
            break;
          }
          sub_1CD4145B8((uint64_t)v496, (int *)&v490)[1] = v348;
        }
LABEL_599:
        if (++v342 == v341)
        {
          int v270 = 0;
          int v349 = 1;
          goto LABEL_606;
        }
      }
      int v349 = 0;
      LODWORD(v473) = v503;
      int v270 = 1;
LABEL_606:
      uint64_t v342 = v493;
      if (v493)
      {
LABEL_607:
        uint64_t v494 = v342;
        operator delete(v342);
      }
LABEL_608:
      MEMORY[0x1D25D9CD0](v491[0], 4);
      if (__p)
      {
        int v508 = (int *)__p;
        operator delete(__p);
      }
      MEMORY[0x1D25D9CD0](*(void *)&v504, 4);
      if (v521)
      {
        v522[0] = v521;
        operator delete(v521);
      }
      MEMORY[0x1D25D9CD0](v518, 4);
      if (v529)
      {
        v530[0] = v529;
        operator delete(v529);
      }
      MEMORY[0x1D25D9CD0](v526, 4);
      uint64_t v281 = v476;
      if (v349)
      {
LABEL_615:
        unint64_t v282 = *(void *)v282 & 0xFFFFFFFFFFFFFFF8;
        if (!v282 || (*(unsigned char *)v282 & 4) == 0)
        {
          while ((*(_WORD *)(v282 + 44) & 4) != 0)
            unint64_t v282 = *(void *)v282 & 0xFFFFFFFFFFFFFFF8;
        }
        if ((void *)v282 == v281) {
          goto LABEL_621;
        }
        continue;
      }
      break;
    }
LABEL_622:
    if ((void)v556)
    {
      *((void *)&v556 + 1) = v556;
      operator delete((void *)v556);
    }
    MEMORY[0x1D25D9CD0](v553, 4);
    if (v567)
    {
      v568[0] = v567;
      operator delete(v567);
    }
    MEMORY[0x1D25D9CD0](v564, 4);
    MEMORY[0x1D25D9CD0](*(void *)v496, 4);
    if (v534 != &v536) {
      free(v534);
    }
    if (v572 != &v574) {
      free(v572);
    }
    BOOL v350 = v270 == 0;
    if (!v270)
    {
      unsigned int v245 = (void *)v475[1];
      if (v245 != i) {
        continue;
      }
    }
    break;
  }
LABEL_636:
  unint64_t v351 = v501;
  int v352 = v502;
  uint64_t v353 = v498[0];
  if (v499)
  {
    uint64_t v354 = 200 * v499;
    BOOL v355 = (void *)(v498[0] + 104);
    do
    {
      if ((*(v355 - 13) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v356 = (void *)v355[9];
        if (v356)
        {
          v355[10] = v356;
          operator delete(v356);
        }
        MEMORY[0x1D25D9CD0](v355[6], 4);
        unsigned int v357 = (void *)v355[3];
        if (v357)
        {
          v355[4] = v357;
          operator delete(v357);
        }
        MEMORY[0x1D25D9CD0](*v355, 4);
        unsigned int v358 = (void *)*(v355 - 3);
        if (v358)
        {
          *(v355 - 2) = v358;
          operator delete(v358);
        }
        MEMORY[0x1D25D9CD0](*(v355 - 6), 4);
        uint64_t v359 = (void *)*(v355 - 9);
        if (v359)
        {
          *(v355 - 8) = v359;
          operator delete(v359);
        }
        MEMORY[0x1D25D9CD0](*(v355 - 12), 4);
      }
      v355 += 25;
      v354 -= 200;
    }
    while (v354);
  }
  MEMORY[0x1D25D9CD0](v353, 8);
  if (v510 != v513) {
    free(v510);
  }
  if (v515 != &v516) {
    free(v515);
  }
  if (v350) {
    unsigned int v360 = v351;
  }
  else {
    unsigned int v360 = v473;
  }
  unint64_t v361 = HIDWORD(v351);
  if (v350) {
    unsigned int v362 = HIDWORD(v351);
  }
  else {
    unsigned int v362 = 0;
  }
  if (v360 <= v466) {
    uint64_t v363 = v466;
  }
  else {
    uint64_t v363 = v360;
  }
  unsigned int v364 = (v489 + 3) & 0xFFFFFFFC;
  unsigned int v365 = v469;
  if (v362 < v469) {
    unsigned int v365 = v362;
  }
  BOOL v366 = v352 != 0;
  if (v365 <= v363) {
    unsigned int v365 = v363;
  }
  BOOL v367 = v350 && v366;
  if (!v350 || !v366) {
    unsigned int v365 = v467;
  }
  int v368 = *(unsigned __int8 *)(*(void *)(v471 + 16) + 323);
  if (*(unsigned char *)(*(void *)(v471 + 16) + 323)) {
    int v369 = -8;
  }
  else {
    int v369 = -4;
  }
  if (*(unsigned char *)(*(void *)(v471 + 16) + 323)) {
    uint64_t v370 = 7;
  }
  else {
    uint64_t v370 = 3;
  }
  unsigned int v371 = (v370 + v365) & v369;
  unsigned int v372 = *(_DWORD *)(a1 + 252);
  unsigned int v373 = 0x340 / v371;
  if (v373 >= 0x30) {
    unsigned int v373 = 48;
  }
  float v374 = 100.0;
  float v375 = (float)((float)((v373 << 6) / v372 * v372) / 3072.0) * 100.0;
  unsigned int v376 = v364 + 255;
  if (((v364 + 255) & 0xFFFFFF00) != 0)
  {
    unsigned int v377 = 0x10000 / ((v364 + 255) & 0xFFFFFF00) * v372;
    if (v377 >= 0xC00) {
      unsigned int v377 = 3072;
    }
    float v374 = (float)((float)v377 / 3072.0) * 100.0;
  }
  unsigned int v378 = 0;
  int v379 = 4;
  if (v374 >= v375) {
    float v380 = v375;
  }
  else {
    float v380 = v374;
  }
  while (1)
  {
    unsigned int v381 = (v376 + (v378 + v379) * v372) & 0xFFFFFF00;
    if (v381)
    {
      unsigned int v382 = 0x10000 / v381 * v372;
      if (v382 >= 0xC00) {
        unsigned int v382 = 3072;
      }
      float v383 = (float)((float)v382 / 3072.0) * 100.0;
    }
    else
    {
      float v383 = 100.0;
    }
    BOOL v385 = v383 < v380 || v381 > v468;
    if (v385) {
      int v386 = 1;
    }
    else {
      int v386 = v379;
    }
    if (!v385) {
      v378 += v379;
    }
    BOOL v60 = v379 == 1;
    int v379 = v386;
    if (v60)
    {
      int v379 = v386;
      if (v385) {
        break;
      }
    }
  }
  uint64_t v387 = *(uint64_t **)(a1 + 8);
  uint64_t v388 = *v387;
  uint64_t v389 = v387[1];
  if (v388 == v389)
  {
LABEL_705:
    uint64_t v390 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v388 != &llvm::MachineBlockFrequencyInfo::ID)
    {
      v388 += 16;
      if (v388 == v389) {
        goto LABEL_705;
      }
    }
    uint64_t v390 = *(void *)(v388 + 8);
  }
  uint64_t v391 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v390 + 96))(v390, &llvm::MachineBlockFrequencyInfo::ID);
  sub_1CBA9FB98(v471, v391, 0, &v534);
  if (v535)
  {
    unsigned int v392 = 0;
    uint64_t v393 = 8 * v535;
    int v394 = (int *)((char *)v534 + 4);
    unsigned int v395 = v468;
    do
    {
      int v396 = *v394;
      v394 += 2;
      unsigned int v397 = v396 + v392;
      if (v396 + v392 <= v378)
      {
        int v398 = *(_DWORD *)(a1 + 252);
        if (((v376 + v398 * v397) & 0xFFFFFF00) != 0)
        {
          unsigned int v399 = 0x10000 / ((v376 + v398 * v397) & 0xFFFFFF00) * v398;
          if (v399 >= 0xC00) {
            unsigned int v399 = 3072;
          }
          float v400 = (float)((float)v399 / 3072.0) * 100.0;
        }
        else
        {
          float v400 = 100.0;
        }
        if (v400 >= v380) {
          unsigned int v392 = v397;
        }
      }
      v393 -= 8;
    }
    while (v393);
  }
  else
  {
    unsigned int v392 = 0;
    unsigned int v395 = v468;
  }
  if (v367 && v363 < v362)
  {
    unsigned int v401 = *(_DWORD *)(a1 + 252);
    unsigned int v402 = v469;
    unsigned int v403 = v362 - v469;
    if (v362 <= v469)
    {
      unsigned int v403 = 0;
      float v413 = 0.0;
      BOOL v414 = 1;
      unsigned int v402 = v361;
      unsigned int v415 = v392;
    }
    else
    {
      unsigned int v404 = 0x340 / v469;
      if (0x340 / v469 >= 0x30) {
        unsigned int v404 = 48;
      }
      float v405 = (float)((v404 << 6) / v401 * v401) / 3072.0;
      if (((v376 + v401 * v392) & 0xFFFFFF00) != 0)
      {
        unsigned int v406 = 0x10000 / ((v376 + v401 * v392) & 0xFFFFFF00) * v401;
        if (v406 >= 0xC00) {
          unsigned int v406 = 3072;
        }
        float v407 = (float)((float)v406 / 3072.0) * 100.0;
      }
      else
      {
        float v407 = 100.0;
      }
      float v413 = v405 * 100.0;
      if (v403)
      {
        int v424 = 0;
        int v425 = v364 + v401 * (v392 + 4) + 255;
        unsigned int v426 = v392;
        while (1)
        {
          unsigned int v427 = v425 & 0xFFFFFF00;
          if ((v425 & 0xFFFFFF00) != 0)
          {
            unsigned int v428 = 0x10000 / v427 * v401;
            if (v428 >= 0xC00) {
              unsigned int v428 = 3072;
            }
            float v429 = (float)((float)v428 / 3072.0) * 100.0;
            unsigned int v415 = (v427 - v364) / v401;
          }
          else
          {
            unsigned int v415 = 0;
            float v429 = 100.0;
          }
          if (v427 > v395) {
            break;
          }
          if (v429 <= v407 && v429 < v413) {
            break;
          }
          int v431 = v424 + 1;
          v425 += 4 * v401;
          unsigned int v432 = v424 + 2;
          ++v424;
          unsigned int v426 = v415;
          if (v432 > v403) {
            goto LABEL_777;
          }
        }
        unsigned int v415 = v426;
        int v431 = v424;
      }
      else
      {
        int v431 = 0;
        unsigned int v415 = v392;
      }
LABEL_777:
      BOOL v414 = v431 == v403;
    }
    unint64_t v433 = v370 + v402;
    unsigned int v434 = 0x340 / (v433 & v369);
    if (v434 >= 0x30) {
      unsigned int v434 = 48;
    }
    float v435 = (float)dword_1EBCBF420;
    if (!word_1EBCBF3A8) {
      float v435 = 50.0;
    }
    if (v413 == 0.0) {
      float v436 = (float)((float)((v434 << 6) / v401 * v401) / 3072.0) * 100.0;
    }
    else {
      float v436 = v413;
    }
    if ((float)((float)((float)((v434 << 6) / v401 * v401) / 3072.0) * 100.0) < v435 && v414)
    {
      char v438 = v368 ? 3 : 2;
      unint64_t v439 = (unint64_t)(v370 + v363) >> v438;
      unint64_t v440 = v433 >> v438;
      if (v440 >= v439)
      {
        unsigned int v441 = 0;
        if (v368) {
          char v442 = 3;
        }
        else {
          char v442 = 2;
        }
        char v443 = 1;
LABEL_797:
        unsigned int v444 = v415;
        float v445 = v436;
        do
        {
          unsigned int v446 = v439 << v442;
          unsigned int v447 = 0x340u / (v439 << v442);
          if (v447 >= 0x30) {
            unsigned int v447 = 48;
          }
          unsigned int v448 = v402 - v446;
          if (v402 < v446) {
            unsigned int v448 = 0;
          }
          unsigned int v449 = v448 + dword_1EBCBF360;
          if (v402 <= v446) {
            unsigned int v449 = 0;
          }
          unsigned int v450 = (v376 + (v392 + 4 * (v449 + v403)) * v401) & 0xFFFFFF00;
          if (v450)
          {
            unsigned int v451 = 0x10000 / v450 * v401;
            if (v451 >= 0xC00) {
              unsigned int v451 = 3072;
            }
            float v452 = (float)((float)v451 / 3072.0) * 100.0;
            unsigned int v415 = (v450 - v364) / v401;
          }
          else
          {
            unsigned int v415 = 0;
            float v452 = 100.0;
          }
          float v453 = (float)((v447 << 6) / v401 * v401) / 3072.0;
          if (v452 >= (float)(v453 * 100.0)) {
            float v436 = v453 * 100.0;
          }
          else {
            float v436 = v452;
          }
          if (v450 <= v395)
          {
            if (v445 < v436 || (v445 == v436 ? (BOOL v454 = v444 > v415) : (BOOL v454 = 0), v454))
            {
              char v443 = 0;
              LODWORD(v439) = v439 + 1;
              unsigned int v441 = v446;
              if (v439 <= v440) {
                goto LABEL_797;
              }
              goto LABEL_823;
            }
          }
          LODWORD(v439) = v439 + 1;
        }
        while (v439 <= v440);
        unsigned int v446 = v441;
        unsigned int v415 = v444;
        float v436 = v445;
        if (v443) {
          goto LABEL_825;
        }
LABEL_823:
        sub_1CD112C68(v481, v446, 0);
        unsigned int v395 = v468;
        LOBYTE(v482) = 0;
      }
    }
    unsigned int v444 = v415;
    float v445 = v436;
LABEL_825:
    if (v444)
    {
      unsigned int v378 = 0;
      int v455 = 4;
      int v456 = *(_DWORD *)(a1 + 252);
      while (1)
      {
        unsigned int v457 = (v376 + (v378 + v455) * v456) & 0xFFFFFF00;
        if (v457)
        {
          unsigned int v458 = 0x10000 / v457 * v456;
          if (v458 >= 0xC00) {
            unsigned int v458 = 3072;
          }
          float v459 = (float)((float)v458 / 3072.0) * 100.0;
        }
        else
        {
          float v459 = 100.0;
        }
        BOOL v461 = v459 < v445 || v457 > v395;
        if (v461) {
          int v462 = 1;
        }
        else {
          int v462 = v455;
        }
        if (!v461) {
          v378 += v455;
        }
        BOOL v60 = v455 == 1;
        int v455 = v462;
        if (v60)
        {
          int v455 = v462;
          if (v461) {
            break;
          }
        }
      }
      goto LABEL_846;
    }
    goto LABEL_847;
  }
  if (v367 && v362 > v469) {
    unsigned int v408 = v378;
  }
  else {
    unsigned int v408 = v392;
  }
  if (v408)
  {
    int v409 = *(_DWORD *)(a1 + 252);
    unsigned int v410 = (v376 + v409 * v408) & 0xFFFFFF00;
    if (v410)
    {
      unsigned int v411 = 0x10000 / v410 * v409;
      if (v411 >= 0xC00) {
        unsigned int v411 = 3072;
      }
      float v412 = (float)((float)v411 / 3072.0) * 100.0;
    }
    else
    {
      float v412 = 100.0;
    }
    int v416 = 0;
    int v417 = 4;
    while (1)
    {
      unsigned int v418 = (v376 + (v416 + v417) * v409) & 0xFFFFFF00;
      if (v418)
      {
        unsigned int v419 = 0x10000 / v418 * v409;
        if (v419 >= 0xC00) {
          unsigned int v419 = 3072;
        }
        float v420 = (float)((float)v419 / 3072.0) * 100.0;
      }
      else
      {
        float v420 = 100.0;
      }
      BOOL v422 = v420 < v412 || v418 > v395;
      if (v422) {
        int v423 = 1;
      }
      else {
        int v423 = v417;
      }
      if (!v422) {
        v416 += v417;
      }
      BOOL v60 = v417 == 1;
      int v417 = v423;
      if (v60)
      {
        int v417 = v423;
        if (v422) {
          break;
        }
      }
    }
LABEL_846:
    sub_1CBA84528((uint64_t)&v481, v378);
    LOBYTE(v482) = 0;
LABEL_847:
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (v534 != &v536) {
    free(v534);
  }
  if ((_BYTE)v482)
  {
    int v463 = v481;
    uint64_t v534 = "agx.local.store.spill";
    v539[0] = 259;
    int v464 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v481, (const char **)&v534);
    unsigned int v465 = v484 ? v483 : 0;
    sub_1CBA84528((uint64_t)&v481, v465);
    if (HIBYTE(v482))
    {
      llvm::NamedMDNode::clearOperands((uint64_t)v464);
      llvm::Module::eraseNamedMetadata(v463, v464);
    }
  }
  return v2;
}

unsigned __int8 **sub_1CBA84528(uint64_t a1, unsigned int a2)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t ***)a1;
  unint64_t v13 = (unint64_t)"agx.local.store.spill";
  __int16 v15 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata((llvm::Module *)v4, (const char **)&v13);
  int v6 = **(uint64_t ***)a1;
  unsigned int v14 = 32;
  unint64_t v13 = a2;
  v16[0] = llvm::MDString::get(v6, "per-thread-spill-bytes", 0x16uLL);
  BOOL v8 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get((llvm::ConstantInt *)v6, (llvm::LLVMContext *)&v13, v7);
  v16[1] = llvm::ValueAsMetadata::get(v8, v9);
  uint64_t v10 = *(unsigned int *)(a1 + 28);
  Impl = (unsigned __int8 *)llvm::MDTuple::getImpl((uint64_t)v6, v16, 2, 0, 1);
  uint64_t result = sub_1CC19E068((unsigned __int8 **)(**(void **)(NamedMetadata + 48) + 8 * v10), Impl);
  if (v14 >= 0x41)
  {
    uint64_t result = (unsigned __int8 **)v13;
    if (v13) {
      return (unsigned __int8 **)MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t sub_1CBA84648(uint64_t a1, int *a2)
{
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(char **)a1;
    int v6 = v4 - 1;
    unsigned int v7 = (37 * *a2) & v6;
    BOOL v8 = (char *)(*(void *)a1 + 4 * v7);
    int v9 = *(_DWORD *)v8;
    if (*a2 == *(_DWORD *)v8) {
      return 0;
    }
    uint64_t v10 = 0;
    int v11 = 1;
    while (v9 != -1)
    {
      uint64_t result = 0;
      if (v10) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v9 == -2;
      }
      if (v13) {
        uint64_t v10 = v8;
      }
      unsigned int v14 = v7 + v11++;
      unsigned int v7 = v14 & v6;
      BOOL v8 = &v5[4 * v7];
      int v9 = *(_DWORD *)v8;
      if (*a2 == *(_DWORD *)v8) {
        return result;
      }
    }
    if (v10) {
      __int16 v15 = v10;
    }
    else {
      __int16 v15 = v8;
    }
  }
  else
  {
    __int16 v15 = 0;
  }
  *(_DWORD *)sub_1CBA855C4((char **)a1, (uint64_t)a2, a2, v15) = *a2;
  uint64_t v17 = *(int **)(a1 + 32);
  unint64_t v16 = *(void *)(a1 + 40);
  if ((unint64_t)v17 >= v16)
  {
    uint64_t v19 = *(int **)(a1 + 24);
    uint64_t v20 = v17 - v19;
    unint64_t v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 62) {
      abort();
    }
    uint64_t v22 = v16 - (void)v19;
    if (v22 >> 1 > v21) {
      unint64_t v21 = v22 >> 1;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      if (v23 >> 62) {
        sub_1CB833614();
      }
      uint64_t v24 = (char *)operator new(4 * v23);
    }
    else
    {
      uint64_t v24 = 0;
    }
    int v25 = (int *)&v24[4 * v20];
    *int v25 = *a2;
    int v18 = v25 + 1;
    while (v17 != v19)
    {
      int v26 = *--v17;
      *--int v25 = v26;
    }
    *(void *)(a1 + 24) = v25;
    *(void *)(a1 + 32) = v18;
    *(void *)(a1 + 40) = &v24[4 * v23];
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    int *v17 = *a2;
    int v18 = v17 + 1;
  }
  *(void *)(a1 + 32) = v18;
  return 1;
}

uint64_t sub_1CBA847DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = a5;
  if ((a5 - 1) >= 0x3FFFFFFF)
  {
    BOOL v8 = *(unsigned __int16 ***)(*(void *)(a4 + 16 * (a5 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v9 = *((unsigned __int16 *)v8 + 10);
    if (!*((_WORD *)v8 + 10)) {
      return 0;
    }
    uint64_t v10 = *v8;
    int v11 = &v10[v9];
LABEL_4:
    uint64_t result = *v10;
    unint64_t v12 = *(unsigned int *)(a2 + 24 * result + 16);
    uint64_t v13 = (v12 >> 3) & 0x1FFFFFFE;
    unsigned __int16 v14 = *(_WORD *)(a3 + v13) + (v12 & 0xF) * result;
    __int16 v15 = (unsigned __int16 *)(a3 + 2 + v13);
    do
    {
      if ((*(void *)(a6 + 8 * (v14 >> 6)) >> v14))
      {
        uint64_t result = 0;
        if (++v10 != v11) {
          goto LABEL_4;
        }
        return result;
      }
      int v16 = *v15++;
      v14 += v16;
    }
    while (v16);
    if (!result) {
      return result;
    }
  }
  unint64_t v17 = *(unsigned int *)(a2 + 24 * result + 16);
  __int16 v18 = v17 & 0xF;
  uint64_t v19 = (_WORD *)(a3 + ((v17 >> 3) & 0x1FFFFFFE));
  __int16 v21 = *v19;
  uint64_t v20 = v19 + 1;
  unsigned __int16 v22 = v21 + v18 * result;
  uint64_t v23 = *(void *)(a1 + 264);
  do
  {
    if (((1 << v22) & *(void *)(v23 + 8 * (v22 >> 6))) == 0) {
      break;
    }
    *(void *)(a6 + 8 * (v22 >> 6)) |= 1 << v22;
    int v24 = *v20++;
    v22 += v24;
  }
  while (v24);
  return result;
}

uint64_t sub_1CBA848E0(uint64_t *a1, unsigned int a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1F25F4020;
  int v4 = v3;
  sub_1CBA85E20(a1, a2, (uint64_t)v3);
  uint64_t result = (uint64_t)v4;
  if (v4 == v3) {
    return (*(uint64_t (**)(void *))(v3[0] + 32))(v3);
  }
  if (v4) {
    return (*(uint64_t (**)(void))(*v4 + 40))();
  }
  return result;
}

BOOL sub_1CBA849C0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(unsigned int *)(a3 + 24 * a2 + 16);
  __int16 v5 = v4 & 0xF;
  int v6 = (_WORD *)(a4 + ((v4 >> 3) & 0x1FFFFFFE));
  __int16 v8 = *v6;
  unsigned int v7 = v6 + 1;
  unsigned __int16 v9 = v8 + v5 * a2;
  do
  {
    uint64_t v10 = (1 << v9) & *(void *)(a1 + 8 * (v9 >> 6));
    if (v10) {
      break;
    }
    int v11 = *v7++;
    v9 += v11;
  }
  while (v11);
  return v10 != 0;
}

uint64_t sub_1CBA84A18(int32x2_t *a1, _DWORD *a2)
{
  uint64_t v4 = sub_1CBA860DC(a1, a2);
  if (v4)
  {
    unsigned int v7 = (char *)a1[3];
    int v6 = (char *)a1[4];
    if (v7 != v6)
    {
      while (*(_DWORD *)v7 != *a2)
      {
        v7 += 4;
        if (v7 == v6)
        {
          unsigned int v7 = (char *)a1[4];
          break;
        }
      }
    }
    int64_t v8 = v6 - (v7 + 4);
    if (v6 != v7 + 4) {
      memmove(v7, v7 + 4, v6 - (v7 + 4));
    }
    a1[4] = (int32x2_t)&v7[v8];
  }
  return v4;
}

int *sub_1CBA84AA4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 4);
  if (v3)
  {
    LODWORD(v4) = (37 * *a2) & (v3 - 1);
    uint64_t result = (int *)(v2 + 8 * v4);
    int v6 = *result;
    if (*a2 == *result) {
      return result;
    }
    int v7 = 1;
    while (v6 != -1)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      int v6 = *(_DWORD *)(v2 + 8 * v4);
      if (*a2 == v6) {
        return (int *)(v2 + 8 * v4);
      }
    }
  }
  return (int *)(v2 + 8 * v3);
}

uint64_t sub_1CBA84B14(int32x2_t *a1, _DWORD *a2)
{
  __int32 v2 = a1[2].i32[0];
  if (v2)
  {
    int32x2_t v3 = *a1;
    __int32 v4 = v2 - 1;
    LODWORD(v5) = (37 * *a2) & (v2 - 1);
    int v6 = (int *)(*(void *)a1 + 8 * v5);
    int v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_3:
      *int v6 = -2;
      a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
      return 1;
    }
    int v9 = 1;
    while (v7 != -1)
    {
      int v10 = v5 + v9++;
      uint64_t v5 = v10 & v4;
      int v7 = *(_DWORD *)(*(void *)&v3 + 8 * v5);
      if (*a2 == v7)
      {
        int v6 = (int *)(*(void *)&v3 + 8 * v5);
        goto LABEL_3;
      }
    }
  }
  return 0;
}

void sub_1CBA84BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 64);
  __dst = v35;
  uint64_t v34 = 0x600000000;
  unsigned int v6 = *(_DWORD *)(v5 + 8);
  if (&__dst != (void **)v5 && v6 != 0)
  {
    if (v6 >= 7) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v35, *(const void **)v5, 8 * *(unsigned int *)(v5 + 8));
    LODWORD(v34) = v6;
  }
  v35[12] = *(_DWORD *)(v5 + 64);
  v28[0] = 0;
  v28[1] = 0;
  int v29 = 0;
  int v31 = 0;
  uint64_t v32 = 0;
  __p = 0;
  int v8 = *(int **)(a2 + 24);
  int v9 = *(int **)(a2 + 32);
  if (v8 != v9)
  {
    do
    {
      int v27 = *v8;
      if ((v27 - 1) <= 0x3FFFFFFE) {
        sub_1CBA84648((uint64_t)v28, &v27);
      }
      ++v8;
    }
    while (v8 != v9);
    int v11 = *(int **)(a2 + 24);
    for (int i = *(int **)(a2 + 32); v11 != i; ++v11)
    {
      int v27 = *v11;
      if ((v27 - 1) >= 0x3FFFFFFF) {
        sub_1CBA84648((uint64_t)v28, &v27);
      }
    }
  }
  unint64_t v12 = (int *)__p;
  uint64_t v13 = v31;
  if (__p != v31)
  {
    while (1)
    {
      uint64_t v14 = *v12;
      int v27 = *v12;
      __int16 v15 = *(uint64_t **)(a1 + 48);
      int v16 = *((_DWORD *)v15 + 4);
      if (!v16) {
        goto LABEL_27;
      }
      uint64_t v17 = *v15;
      int v18 = v16 - 1;
      unsigned int v19 = v18 & (37 * v14);
      int v20 = *(_DWORD *)(v17 + 4 * v19);
      if (v14 != v20) {
        break;
      }
LABEL_19:
      if (!sub_1CBA84AA4(*(uint64_t **)(a1 + 56), &v27)[1]) {
        goto LABEL_20;
      }
LABEL_21:
      if (++v12 == v13) {
        goto LABEL_29;
      }
    }
    int v21 = 1;
    while (v20 != -1)
    {
      unsigned int v22 = v19 + v21++;
      unsigned int v19 = v22 & v18;
      int v20 = *(_DWORD *)(v17 + 4 * v19);
      if (v14 == v20) {
        goto LABEL_19;
      }
    }
LABEL_27:
    if (sub_1CBA847DC(v4, *(void *)(*(void *)(a1 + 16) + 8), *(void *)(*(void *)(a1 + 16) + 56), *(void *)(*(void *)(a1 + 24) + 24), v14, (uint64_t)__dst))goto LABEL_21; {
LABEL_20:
    }
    **(_DWORD **)(a1 + 8) = **(_DWORD **)(a1 + 32);
    goto LABEL_21;
  }
LABEL_29:
  int v23 = sub_1CB9FA02C(&__dst, 0, **(_DWORD **)(a1 + 40) + 1);
  if (v23 != -1)
  {
    int v24 = sub_1CBA86078(*(void *)(v4 + 336), *(_DWORD *)(v4 + 352), v23);
    int v25 = *(unsigned int **)(a1 + 8);
    unsigned int v26 = v24[1] - 55;
    if (*v25 > v26) {
      unsigned int v26 = *v25;
    }
    *int v25 = v26;
  }
  if (__p)
  {
    int v31 = (int *)__p;
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v28[0], 4);
  if (__dst != v35) {
    free(__dst);
  }
}

uint64_t sub_1CBA84E4C(uint64_t *a1, unsigned int a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1F25F4068;
  uint64_t v4 = v3;
  sub_1CBA85E20(a1, a2, (uint64_t)v3);
  uint64_t result = (uint64_t)v4;
  if (v4 == v3) {
    return (*(uint64_t (**)(void *))(v3[0] + 32))(v3);
  }
  if (v4) {
    return (*(uint64_t (**)(void))(*v4 + 40))();
  }
  return result;
}

void *sub_1CBA84F2C(uint64_t a1, uint64_t *a2)
{
  int v7 = 0;
  char v4 = sub_1CBA85174(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CBA8520C(a1, a2, v7);
    *uint64_t v5 = *a2;
    *(_OWORD *)(v5 + 23) = 0u;
    *(_OWORD *)(v5 + 21) = 0u;
    *(_OWORD *)(v5 + 19) = 0u;
    *(_OWORD *)(v5 + 17) = 0u;
    *(_OWORD *)(v5 + 15) = 0u;
    *(_OWORD *)(v5 + 13) = 0u;
    *(_OWORD *)(v5 + 11) = 0u;
    *(_OWORD *)(v5 + 9) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
  }
  return v5 + 1;
}

void sub_1CBA84FC8(uint64_t a1, int *a2, int *a3)
{
  if (a2 != a3)
  {
    char v4 = a2;
    while (1)
    {
      int v6 = *(_DWORD *)(a1 + 16);
      if (!v6) {
        break;
      }
      int v7 = v6 - 1;
      unsigned int v8 = (37 * *v4) & v7;
      int v9 = (char *)(*(void *)a1 + 4 * v8);
      int v10 = *(_DWORD *)v9;
      if (*v4 != *(_DWORD *)v9)
      {
        int v11 = 0;
        int v12 = 1;
        while (v10 != -1)
        {
          if (v11) {
            BOOL v13 = 0;
          }
          else {
            BOOL v13 = v10 == -2;
          }
          if (v13) {
            int v11 = v9;
          }
          unsigned int v14 = v8 + v12++;
          unsigned int v8 = v14 & v7;
          int v9 = (char *)(*(void *)a1 + 4 * v8);
          int v10 = *(_DWORD *)v9;
          if (*v4 == *(_DWORD *)v9) {
            goto LABEL_36;
          }
        }
        if (v11) {
          __int16 v15 = v11;
        }
        else {
          __int16 v15 = v9;
        }
        goto LABEL_18;
      }
LABEL_36:
      if (++v4 == a3) {
        return;
      }
    }
    __int16 v15 = 0;
LABEL_18:
    *(_DWORD *)sub_1CBA855C4((char **)a1, (uint64_t)v4, v4, v15) = *v4;
    uint64_t v17 = *(int **)(a1 + 32);
    unint64_t v16 = *(void *)(a1 + 40);
    if ((unint64_t)v17 >= v16)
    {
      unsigned int v19 = *(int **)(a1 + 24);
      uint64_t v20 = v17 - v19;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62) {
        abort();
      }
      uint64_t v22 = v16 - (void)v19;
      if (v22 >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 >> 62) {
          sub_1CB833614();
        }
        int v24 = (char *)operator new(4 * v23);
      }
      else
      {
        int v24 = 0;
      }
      int v25 = (int *)&v24[4 * v20];
      *int v25 = *v4;
      int v18 = v25 + 1;
      while (v17 != v19)
      {
        int v26 = *--v17;
        *--int v25 = v26;
      }
      *(void *)(a1 + 24) = v25;
      *(void *)(a1 + 32) = v18;
      *(void *)(a1 + 40) = &v24[4 * v23];
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      int *v17 = *v4;
      int v18 = v17 + 1;
    }
    *(void *)(a1 + 32) = v18;
    goto LABEL_36;
  }
}

uint64_t sub_1CBA85174(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v6 = (void *)(a1 + 200 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      int v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          int v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        int v6 = (void *)(a1 + 200 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        int v6 = v10;
      }
    }
  }
  else
  {
    int v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *sub_1CBA8520C(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v37 = a3;
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    int v7 = 2 * v6;
  }
  else
  {
    int v7 = *(_DWORD *)(a1 + 16);
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3) {
      goto LABEL_3;
    }
  }
  uint64_t v9 = *(void *)a1;
  unint64_t v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  int v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40) {
    unsigned int v13 = v12 + 1;
  }
  else {
    unsigned int v13 = 64;
  }
  *(_DWORD *)(a1 + 16) = v13;
  unsigned int v14 = operator new(200 * v13, (std::align_val_t)8uLL);
  *(void *)a1 = v14;
  if (v9)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v15 = *(_DWORD *)(a1 + 16);
    if (v15)
    {
      uint64_t v16 = 200 * v15;
      do
      {
        *unsigned int v14 = -4096;
        v14 += 25;
        v16 -= 200;
      }
      while (v16);
    }
    if (v6)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 200 * v6;
      do
      {
        uint64_t v19 = *(void *)(v9 + v17);
        if ((v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v38 = 0;
          sub_1CBA85174(*(void *)a1, *(_DWORD *)(a1 + 16), v19, &v38);
          uint64_t v20 = v38;
          uint64_t v21 = v9 + v17;
          *(_DWORD *)(v38 + 24) = 0;
          *(void *)(v20 + 8) = 0;
          *(void *)(v20 + 16) = 0;
          *(void *)uint64_t v20 = v19;
          *(void *)(v20 + 8) = *(void *)(v9 + v17 + 8);
          *(void *)(v21 + 8) = 0;
          *(_DWORD *)(v20 + 16) = *(_DWORD *)(v9 + v17 + 16);
          *(_DWORD *)(v21 + 16) = 0;
          int v22 = *(_DWORD *)(v20 + 20);
          *(_DWORD *)(v20 + 20) = *(_DWORD *)(v9 + v17 + 20);
          *(_DWORD *)(v21 + 20) = v22;
          int v23 = *(_DWORD *)(v20 + 24);
          *(_DWORD *)(v20 + 24) = *(_DWORD *)(v9 + v17 + 24);
          *(_DWORD *)(v21 + 24) = v23;
          *(void *)(v20 + 32) = 0;
          *(void *)(v20 + 40) = 0;
          *(void *)(v20 + 48) = 0;
          int v24 = (_OWORD *)(v9 + v17 + 32);
          *(_OWORD *)(v20 + 32) = *v24;
          *(void *)(v20 + 48) = *(void *)(v9 + v17 + 48);
          *(void *)int v24 = 0;
          *(void *)(v21 + 40) = 0;
          *(void *)(v21 + 48) = 0;
          *(void *)(v20 + 56) = 0;
          *(void *)(v20 + 64) = 0;
          *(_DWORD *)(v20 + 72) = 0;
          *(void *)(v20 + 56) = *(void *)(v9 + v17 + 56);
          *(void *)(v21 + 56) = 0;
          *(_DWORD *)(v20 + 64) = *(_DWORD *)(v9 + v17 + 64);
          *(_DWORD *)(v21 + 64) = 0;
          int v25 = *(_DWORD *)(v20 + 68);
          *(_DWORD *)(v20 + 68) = *(_DWORD *)(v9 + v17 + 68);
          *(_DWORD *)(v21 + 68) = v25;
          int v26 = *(_DWORD *)(v20 + 72);
          *(_DWORD *)(v20 + 72) = *(_DWORD *)(v9 + v17 + 72);
          *(_DWORD *)(v21 + 72) = v26;
          *(void *)(v20 + 80) = 0;
          *(void *)(v20 + 88) = 0;
          *(void *)(v20 + 96) = 0;
          int v27 = (_OWORD *)(v9 + v17 + 80);
          *(_OWORD *)(v20 + 80) = *v27;
          *(void *)(v20 + 96) = *(void *)(v9 + v17 + 96);
          *(void *)int v27 = 0;
          *(void *)(v21 + 88) = 0;
          *(void *)(v21 + 96) = 0;
          *(void *)(v20 + 104) = 0;
          *(void *)(v20 + 112) = 0;
          *(_DWORD *)(v20 + 120) = 0;
          *(void *)(v20 + 104) = *(void *)(v9 + v17 + 104);
          *(void *)(v21 + 104) = 0;
          *(_DWORD *)(v20 + 112) = *(_DWORD *)(v9 + v17 + 112);
          *(_DWORD *)(v21 + 112) = 0;
          int v28 = *(_DWORD *)(v20 + 116);
          *(_DWORD *)(v20 + 116) = *(_DWORD *)(v9 + v17 + 116);
          *(_DWORD *)(v21 + 116) = v28;
          int v29 = *(_DWORD *)(v20 + 120);
          *(_DWORD *)(v20 + 120) = *(_DWORD *)(v9 + v17 + 120);
          *(_DWORD *)(v21 + 120) = v29;
          *(void *)(v20 + 128) = 0;
          *(void *)(v20 + 136) = 0;
          *(void *)(v20 + 144) = 0;
          *(_OWORD *)(v20 + 128) = *(_OWORD *)(v9 + v17 + 128);
          *(void *)(v20 + 144) = *(void *)(v9 + v17 + 144);
          *(void *)(v21 + 128) = 0;
          *(void *)(v21 + 136) = 0;
          *(void *)(v21 + 144) = 0;
          *(void *)(v20 + 152) = 0;
          *(void *)(v20 + 160) = 0;
          *(_DWORD *)(v20 + 168) = 0;
          *(void *)(v20 + 152) = *(void *)(v9 + v17 + 152);
          *(void *)(v21 + 152) = 0;
          *(_DWORD *)(v20 + 160) = *(_DWORD *)(v9 + v17 + 160);
          *(_DWORD *)(v21 + 160) = 0;
          int v30 = *(_DWORD *)(v20 + 164);
          *(_DWORD *)(v20 + 164) = *(_DWORD *)(v9 + v17 + 164);
          *(_DWORD *)(v21 + 164) = v30;
          int v31 = *(_DWORD *)(v20 + 168);
          *(_DWORD *)(v20 + 168) = *(_DWORD *)(v9 + v17 + 168);
          *(_DWORD *)(v21 + 168) = v31;
          *(void *)(v20 + 176) = 0;
          *(void *)(v20 + 184) = 0;
          *(void *)(v20 + 192) = 0;
          *(_OWORD *)(v20 + 176) = *(_OWORD *)(v9 + v17 + 176);
          *(void *)(v20 + 192) = *(void *)(v9 + v17 + 192);
          *(void *)(v21 + 176) = 0;
          *(void *)(v21 + 184) = 0;
          *(void *)(v21 + 192) = 0;
          ++*(_DWORD *)(a1 + 8);
          MEMORY[0x1D25D9CD0](*(void *)(v9 + v17 + 152), 4);
          uint64_t v32 = *(void **)(v9 + v17 + 128);
          if (v32)
          {
            *(void *)(v21 + 136) = v32;
            operator delete(v32);
          }
          MEMORY[0x1D25D9CD0](*(void *)(v21 + 104), 4);
          unsigned int v33 = *(void **)v27;
          if (*(void *)v27)
          {
            *(void *)(v21 + 88) = v33;
            operator delete(v33);
          }
          MEMORY[0x1D25D9CD0](*(void *)(v21 + 56), 4);
          uint64_t v34 = *(void **)v24;
          if (*(void *)v24)
          {
            *(void *)(v21 + 40) = v34;
            operator delete(v34);
          }
          MEMORY[0x1D25D9CD0](*(void *)(v21 + 8), 4);
        }
        v17 += 200;
      }
      while (v18 != v17);
    }
    MEMORY[0x1D25D9CD0](v9, 8);
    unsigned int v14 = *(void **)a1;
    unsigned int v35 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v35 = *(_DWORD *)(a1 + 16);
    if (v35)
    {
      uint64_t v36 = 0;
      do
      {
        v14[v36] = -4096;
        v36 += 25;
      }
      while (25 * v35 != v36);
    }
  }
  sub_1CBA85174((uint64_t)v14, v35, *a2, &v37);
  int v5 = *(_DWORD *)(a1 + 8);
  a3 = v37;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

char *sub_1CBA855C4(char **a1, uint64_t a2, int *a3, char *a4)
{
  int v6 = *((_DWORD *)a1 + 2);
  uint64_t v7 = *((unsigned int *)a1 + 4);
  if (4 * v6 + 4 >= (3 * v7))
  {
    unint64_t v10 = (int *)*a1;
    unint64_t v11 = (2 * v7 - 1) | ((unint64_t)(2 * v7 - 1) >> 1);
    unint64_t v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
    int v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
    if ((v13 + 1) > 0x40) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 64;
    }
    *((_DWORD *)a1 + 4) = v14;
    unsigned int v15 = (char *)operator new(4 * v14, (std::align_val_t)4uLL);
    *a1 = v15;
    if (v10)
    {
      sub_1CBA85840(a1, v10, &v10[v7]);
      MEMORY[0x1D25D9CD0](v10, 4);
      LODWORD(v10) = *((_DWORD *)a1 + 4);
      uint64_t v16 = *a1;
    }
    else
    {
      uint64_t v16 = v15;
      a1[1] = 0;
      unint64_t v10 = (int *)*((unsigned int *)a1 + 4);
      memset(v15, 255, 4 * (void)v10);
    }
    int v8 = *a3;
    unsigned int v17 = (37 * *a3) & (v10 - 1);
    a4 = &v16[4 * v17];
    int v18 = *(_DWORD *)a4;
    if (*a3 == *(_DWORD *)a4) {
      goto LABEL_4;
    }
    uint64_t v19 = 0;
    int v20 = 1;
    while (v18 != -1)
    {
      if (v19) {
        BOOL v21 = 0;
      }
      else {
        BOOL v21 = v18 == -2;
      }
      if (v21) {
        uint64_t v19 = a4;
      }
      unsigned int v22 = v17 + v20++;
      unsigned int v17 = v22 & (v10 - 1);
      a4 = &v16[4 * v17];
      int v18 = *(_DWORD *)a4;
      if (v8 == *(_DWORD *)a4) {
        goto LABEL_4;
      }
    }
LABEL_15:
    if (v19) {
      a4 = v19;
    }
    goto LABEL_3;
  }
  if ((int)v7 + ~v6 - *((_DWORD *)a1 + 3) <= v7 >> 3)
  {
    int v23 = (int *)*a1;
    unint64_t v24 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
    unint64_t v25 = v24 | (v24 >> 2) | ((v24 | (v24 >> 2)) >> 4);
    int v26 = ((v25 | (v25 >> 8)) >> 16) | v25 | (v25 >> 8);
    if ((v26 + 1) > 0x40) {
      unsigned int v27 = v26 + 1;
    }
    else {
      unsigned int v27 = 64;
    }
    *((_DWORD *)a1 + 4) = v27;
    int v28 = (char *)operator new(4 * v27, (std::align_val_t)4uLL);
    *a1 = v28;
    if (v23)
    {
      sub_1CBA85840(a1, v23, &v23[v7]);
      MEMORY[0x1D25D9CD0](v23, 4);
      LODWORD(v23) = *((_DWORD *)a1 + 4);
      int v29 = *a1;
    }
    else
    {
      int v29 = v28;
      a1[1] = 0;
      int v23 = (int *)*((unsigned int *)a1 + 4);
      memset(v28, 255, 4 * (void)v23);
    }
    int v8 = *a3;
    unsigned int v30 = (37 * *a3) & (v23 - 1);
    a4 = &v29[4 * v30];
    int v31 = *(_DWORD *)a4;
    if (*a3 == *(_DWORD *)a4) {
      goto LABEL_4;
    }
    uint64_t v19 = 0;
    int v32 = 1;
    while (v31 != -1)
    {
      if (v19) {
        BOOL v33 = 0;
      }
      else {
        BOOL v33 = v31 == -2;
      }
      if (v33) {
        uint64_t v19 = a4;
      }
      unsigned int v34 = v30 + v32++;
      unsigned int v30 = v34 & (v23 - 1);
      a4 = &v29[4 * v30];
      int v31 = *(_DWORD *)a4;
      if (v8 == *(_DWORD *)a4) {
        goto LABEL_4;
      }
    }
    goto LABEL_15;
  }
LABEL_3:
  int v8 = *(_DWORD *)a4;
LABEL_4:
  ++*((_DWORD *)a1 + 2);
  if (v8 != -1) {
    --*((_DWORD *)a1 + 3);
  }
  return a4;
}

void *sub_1CBA85840(void *result, int *a2, int *a3)
{
  int v5 = result;
  result[1] = 0;
  int v6 = (char *)*result;
  uint64_t v7 = *((unsigned int *)result + 4);
  if (v7) {
    uint64_t result = memset((void *)*result, 255, 4 * v7);
  }
  for (; a2 != a3; ++a2)
  {
    int v8 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      int v9 = *((_DWORD *)v5 + 4) - 1;
      unsigned int v10 = v9 & (37 * v8);
      unint64_t v11 = &v6[4 * v10];
      int v12 = *(_DWORD *)v11;
      if (v8 != *(_DWORD *)v11)
      {
        int v13 = 0;
        int v14 = 1;
        while (v12 != -1)
        {
          if (v13) {
            BOOL v15 = 0;
          }
          else {
            BOOL v15 = v12 == -2;
          }
          if (v15) {
            int v13 = v11;
          }
          unsigned int v16 = v10 + v14++;
          unsigned int v10 = v16 & v9;
          unint64_t v11 = &v6[4 * (v16 & v9)];
          int v12 = *(_DWORD *)v11;
          if (v8 == *(_DWORD *)v11) {
            goto LABEL_10;
          }
        }
        if (v13) {
          unint64_t v11 = v13;
        }
      }
LABEL_10:
      *(_DWORD *)unint64_t v11 = v8;
      ++*((_DWORD *)v5 + 2);
    }
  }
  return result;
}

uint64_t sub_1CBA85930(uint64_t result, int *a2, int *a3)
{
  *(void *)(result + 8) = 0;
  int32x2_t v3 = *(_DWORD **)result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    int v6 = *(_DWORD **)result;
    do
    {
      *int v6 = -1;
      v6 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    int v7 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      int v8 = *(_DWORD *)(result + 16) - 1;
      unsigned int v9 = v8 & (37 * v7);
      unsigned int v10 = &v3[2 * v9];
      int v11 = *v10;
      if (v7 != *v10)
      {
        int v12 = 0;
        int v13 = 1;
        while (v11 != -1)
        {
          if (v12) {
            BOOL v14 = 0;
          }
          else {
            BOOL v14 = v11 == -2;
          }
          if (v14) {
            int v12 = v10;
          }
          unsigned int v15 = v9 + v13++;
          unsigned int v9 = v15 & v8;
          unsigned int v10 = &v3[2 * (v15 & v8)];
          int v11 = *v10;
          if (v7 == *v10) {
            goto LABEL_11;
          }
        }
        if (v12) {
          unsigned int v10 = v12;
        }
      }
LABEL_11:
      *unsigned int v10 = v7;
      v10[1] = a2[1];
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

void *sub_1CBA85A00(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)MEMORY[0x1D25D9CD0](*(void *)a1, 4);
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if (v5)
  {
    int v6 = operator new(4 * v5, (std::align_val_t)4uLL);
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    int v7 = *(const void **)a2;
    size_t v8 = 4 * *(unsigned int *)(a1 + 16);
    return memcpy(v6, v7, v8);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  return result;
}

void *sub_1CBA85A80(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 62) {
      abort();
    }
    int v7 = result;
    uint64_t result = operator new(4 * a4);
    size_t v8 = result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 4 * a4;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memcpy(result, a2, v9);
    }
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

_DWORD *sub_1CBA85B04(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CBA85C80(a1, 2 * v7);
    int v8 = *a3;
    int v10 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v11 = (37 * *a3) & v10;
    a4 = (_DWORD *)(*(void *)a1 + 8 * v11);
    int v12 = *a4;
    if (*a3 != *a4)
    {
      int v13 = 0;
      int v14 = 1;
      while (v12 != -1)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -2;
        }
        if (v15) {
          int v13 = a4;
        }
        unsigned int v16 = v11 + v14++;
        unsigned int v11 = v16 & v10;
        a4 = (_DWORD *)(*(void *)a1 + 8 * v11);
        int v12 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      int v8 = *a4;
      goto LABEL_4;
    }
    sub_1CBA85C80(a1, v7);
    int v8 = *a3;
    int v17 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v18 = (37 * *a3) & v17;
    a4 = (_DWORD *)(*(void *)a1 + 8 * v18);
    int v19 = *a4;
    if (*a3 != *a4)
    {
      int v13 = 0;
      int v20 = 1;
      while (v19 != -1)
      {
        if (v13) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v19 == -2;
        }
        if (v21) {
          int v13 = a4;
        }
        unsigned int v22 = v18 + v20++;
        unsigned int v18 = v22 & v17;
        a4 = (_DWORD *)(*(void *)a1 + 8 * v18);
        int v19 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
LABEL_20:
      if (v13) {
        a4 = v13;
      }
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_DWORD *sub_1CBA85C80(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(int **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CBA85D4C(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *uint64_t result = -1;
      result += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CBA85D4C(uint64_t result, int *a2, int *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(_DWORD **)result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    unint64_t v6 = *(_DWORD **)result;
    do
    {
      *unint64_t v6 = -1;
      v6 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    int v7 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      int v8 = *(_DWORD *)(result + 16) - 1;
      unsigned int v9 = v8 & (37 * v7);
      uint64_t v10 = &v3[2 * v9];
      int v11 = *v10;
      if (v7 != *v10)
      {
        int v12 = 0;
        int v13 = 1;
        while (v11 != -1)
        {
          if (v12) {
            BOOL v14 = 0;
          }
          else {
            BOOL v14 = v11 == -2;
          }
          if (v14) {
            int v12 = v10;
          }
          unsigned int v15 = v9 + v13++;
          unsigned int v9 = v15 & v8;
          uint64_t v10 = &v3[2 * (v15 & v8)];
          int v11 = *v10;
          if (v7 == *v10) {
            goto LABEL_11;
          }
        }
        if (v12) {
          uint64_t v10 = v12;
        }
      }
LABEL_11:
      *uint64_t v10 = v7;
      v10[1] = a2[1];
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

int *sub_1CBA85E20(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  if ((a2 & 0x80000000) != 0)
  {
    uint64_t v5 = (void *)a1[6];
    int v8 = (uint64_t *)(*(void *)(*(void *)(a1[7] + 24) + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    uint64_t v5 = (void *)a1[6];
    unint64_t v6 = (uint64_t **)v5[30];
    int v7 = (uint64_t **)v5[31];
    if (v6 == v7)
    {
      int v8 = 0;
    }
    else
    {
      int v8 = 0;
      do
      {
        if (a2 - 0x40000000 >= 0xC0000001)
        {
          uint64_t v9 = **v6;
          if (a2 >> 3 < *(unsigned __int16 *)(v9 + 22)
            && ((1 << (a2 & 7)) & *(unsigned __int8 *)(*(void *)(v9 + 8) + (a2 >> 3))) != 0
            && (!v8
             || *v6 != v8
             && ((*(_DWORD *)(v8[1] + ((*(unsigned __int16 *)(v9 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v9 + 24)) & 1) != 0))
          {
            int v8 = *v6;
          }
        }
        ++v6;
      }
      while (v6 != v7);
    }
  }
  int v10 = *(_DWORD *)(*(uint64_t (**)(void *, uint64_t *))(*v5 + 280))(v5, v8);
  uint64_t result = (int *)(*(uint64_t (**)(void))(*(void *)a1[6] + 320))();
  int v12 = *result;
  if (*result != -1)
  {
    int v13 = result + 1;
    do
    {
      uint64_t v14 = *a1;
      int v17 = v10;
      uint64_t v15 = *(void *)(a3 + 24);
      if (!v15)
      {
        sub_1CB920400();
        JUMPOUT(0x1CBA85FECLL);
      }
      uint64_t result = (int *)(*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v15 + 48))(v15, v14 + 4 * v12, &v17);
      int v16 = *v13++;
      int v12 = v16;
    }
    while (v16 != -1);
  }
  return result;
}

void sub_1CBA85FF0()
{
}

void *sub_1CBA86004()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F25F4020;
  return result;
}

void sub_1CBA8603C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F4020;
}

void sub_1CBA86064(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 += *a3;
}

int *sub_1CBA86078(uint64_t a1, unsigned int a2, int a3)
{
  if (!a2) {
    return (int *)(a1 + 8 * a2);
  }
  LODWORD(v3) = (37 * a3) & (a2 - 1);
  uint64_t v4 = (int *)(a1 + 8 * v3);
  int v5 = *v4;
  if (*v4 != a3)
  {
    int v7 = 1;
    while (v5 != -1)
    {
      int v8 = v3 + v7++;
      uint64_t v3 = v8 & (a2 - 1);
      int v5 = *(_DWORD *)(a1 + 8 * v3);
      if (v5 == a3) {
        return (int *)(a1 + 8 * v3);
      }
    }
    return (int *)(a1 + 8 * a2);
  }
  return v4;
}

uint64_t sub_1CBA860DC(int32x2_t *a1, _DWORD *a2)
{
  __int32 v2 = a1[2].i32[0];
  if (v2)
  {
    int32x2_t v3 = *a1;
    __int32 v4 = v2 - 1;
    LODWORD(v5) = (37 * *a2) & (v2 - 1);
    unint64_t v6 = (int *)(*(void *)a1 + 4 * v5);
    int v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_7:
      *unint64_t v6 = -2;
      a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
      return 1;
    }
    int v8 = 1;
    while (v7 != -1)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & v4;
      int v7 = *(_DWORD *)(*(void *)&v3 + 4 * v5);
      if (*a2 == v7)
      {
        unint64_t v6 = (int *)(*(void *)&v3 + 4 * v5);
        goto LABEL_7;
      }
    }
  }
  return 0;
}

void sub_1CBA86164()
{
}

void *sub_1CBA86178()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F25F4068;
  return result;
}

void sub_1CBA861B0(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F4068;
}

void sub_1CBA861D8(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 -= *a3;
}

uint64_t sub_1CBA861EC()
{
  v3.n128_u64[0] = (unint64_t)"Option to set the threadgroup size for the Set Spill to LM Target pass";
  v3.n128_u64[1] = 70;
  int v4 = 0;
  int v1 = 0;
  __int32 v2 = &v1;
  sub_1CD414678((long long *)&v3, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCBF160, &dword_1CB82C000);
  v3.n128_u64[0] = (unint64_t)"Minimum number of registers we allocate for functions we don't know when processing"
                                     " the representative function (cprog in particular)";
  v3.n128_u64[1] = 133;
  int v4 = 0;
  int v1 = 16;
  __int32 v2 = &v1;
  sub_1CD414798((long long *)&v3, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCBF220, &dword_1CB82C000);
  v3.n128_u64[0] = (unint64_t)"Number of memory slots (1 slot == 4 Bytes) we should give to account for spilling h"
                                     "euristic imperfection.";
  v3.n128_u64[1] = 105;
  int v4 = 0;
  int v1 = 3;
  __int32 v2 = &v1;
  sub_1CD4148B8((long long *)&v3, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCBF2E0, &dword_1CB82C000);
  v3.n128_u64[0] = (unint64_t)"Occupancy limit in percent over which the shaders are not even considered for spilling to LM";
  v3.n128_u64[1] = 92;
  LODWORD(v2) = 0;
  sub_1CD4149D8((long long *)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCBF3A0, &dword_1CB82C000);
  v3.n128_u64[0] = (unint64_t)"Enable the handling of unspillable live-range (unsafe)";
  v3.n128_u64[1] = 54;
  LODWORD(v2) = 0;
  sub_1CD414ADC((long long *)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCBF460, &dword_1CB82C000);
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Print the full liveness information";
  v3.n128_u64[1] = 35;
  LOBYTE(v1) = 0;
  __int32 v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCBF520, "agx2-set-spill-to-lm-tgt-print-liveness", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCBF520, &dword_1CB82C000);
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Print the full regpressure information";
  v3.n128_u64[1] = 38;
  LOBYTE(v1) = 0;
  __int32 v2 = &v1;
  sub_1CD414BE0(&v4, &v3, (char **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCBF5E0, &dword_1CB82C000);
}

uint64_t sub_1CBA864B8(uint64_t a1)
{
  return *(void *)(a1 + 416);
}

uint64_t sub_1CBA864C0(uint64_t a1)
{
  return *(void *)(a1 + 424);
}

uint64_t sub_1CBA864C8(uint64_t a1)
{
  return *(void *)(a1 + 432);
}

uint64_t sub_1CBA864D0(uint64_t a1)
{
  return *(void *)(a1 + 440);
}

uint64_t sub_1CBA864D8(int a1, uint64_t a2, char *__s, int *a4)
{
  uint64_t v6 = *(void *)(a2 + 112);
  if (__s) {
    size_t v7 = strlen(__s);
  }
  else {
    size_t v7 = 0;
  }
  if (!v6) {
    goto LABEL_11;
  }
  if (!*(_DWORD *)(v6 + 8)) {
    goto LABEL_11;
  }
  uint64_t v8 = *(void *)(v6 + 40);
  if (!v8) {
    goto LABEL_11;
  }
  int v9 = *(_DWORD *)(v8 + 40);
  if (!v9) {
    goto LABEL_11;
  }
  uint64_t v10 = *(void *)(v8 + 24);
  int v11 = sub_1CD0B03C8(__s, (uint64_t)&__s[v7]);
  unsigned int v12 = v9 - 1;
  for (int i = 1; ; ++i)
  {
    int v14 = v11 & v12;
    uint64_t v15 = v10 + 24 * (v11 & v12);
    int v16 = *(const void **)v15;
    if (*(void *)v15 == -1)
    {
      if (__s == (char *)-1) {
        goto LABEL_17;
      }
      goto LABEL_10;
    }
    if (v16 != (const void *)-2) {
      break;
    }
    if (__s == (char *)-2) {
      goto LABEL_17;
    }
LABEL_10:
    if (v16 == (const void *)-1) {
      goto LABEL_11;
    }
    int v11 = i + v14;
  }
  if (v7 != *(void *)(v15 + 8) || v7 && memcmp(__s, *(const void **)v15, v7)) {
    goto LABEL_10;
  }
LABEL_17:
  uint64_t v18 = *(void *)(v15 + 16);
  *a4 = -1;
  if (!v18 || *(unsigned char *)(v18 + 8) != 2)
  {
LABEL_11:
    uint64_t result = 0;
    *a4 = 0;
    return result;
  }
  uint64_t v19 = v18 + 24;
  uint64_t v21 = *(unsigned int *)(v18 + 12);
  size_t v20 = *(unsigned int *)(v18 + 16);
  if (v20 >= 0x17)
  {
    if ((v20 | 7) == 0x17) {
      uint64_t v23 = (v20 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v23 = v20 | 7;
    }
    p_dst = (void **)operator new(v23 + 1);
    size_t v90 = v20;
    uint64_t v91 = v23 - 0x7FFFFFFFFFFFFFFFLL;
    __dst = p_dst;
    goto LABEL_27;
  }
  HIBYTE(v91) = *(_DWORD *)(v18 + 16);
  p_dst = (void **)&__dst;
  if (v20) {
LABEL_27:
  }
    memmove(p_dst, (const void *)(v19 + v21 + 1), v20);
  *((unsigned char *)p_dst + v20) = 0;
  if (v91 < 0)
  {
    size_t v84 = v90;
    if (v90)
    {
      uint64_t v85 = __dst;
      do
      {
        unsigned char *v85 = __tolower((char)*v85);
        ++v85;
        --v84;
      }
      while (v84);
    }
  }
  else if ((v91 & 0x7F00000000000000) != 0)
  {
    uint64_t v24 = HIBYTE(v91) & 0x7F;
    unint64_t v25 = (void **)&__dst;
    do
    {
      *(unsigned char *)unint64_t v25 = __tolower(*(char *)v25);
      unint64_t v25 = (void **)((char *)v25 + 1);
      --v24;
    }
    while (v24);
  }
  size_t v26 = strlen(__s);
  if (v26 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_171;
  }
  size_t v27 = v26;
  if (v26 >= 0x17)
  {
    uint64_t v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v29 = v26 | 7;
    }
    uint64_t v30 = v29 + 1;
    int v28 = operator new(v29 + 1);
    size_t v87 = v27;
    int64_t v88 = v30 | 0x8000000000000000;
    long long v86 = v28;
    goto LABEL_39;
  }
  HIBYTE(v88) = v26;
  int v28 = &v86;
  if (v26) {
LABEL_39:
  }
    memcpy(v28, __s, v27);
  *((unsigned char *)v28 + v27) = 0;
  uint64_t v31 = HIBYTE(v88);
  int v32 = SHIBYTE(v88);
  BOOL v33 = v86;
  if (v88 >= 0)
  {
    unsigned int v34 = &v86;
  }
  else
  {
    uint64_t v31 = v87;
    unsigned int v34 = v86;
  }
  unsigned int v35 = (char *)v34 + v31;
  if (v31 >= 8)
  {
    uint64_t v42 = v34;
    do
    {
      uint64_t v36 = (char *)memchr(v42, 67, v31 - 7);
      if (!v36) {
        break;
      }
      if (*(void *)v36 == 0x6C74436568636143) {
        goto LABEL_45;
      }
      uint64_t v42 = v36 + 1;
      uint64_t v31 = v35 - (unsigned char *)v42;
    }
    while (v35 - (unsigned char *)v42 > 7);
  }
  uint64_t v36 = v35;
LABEL_45:
  BOOL v38 = v36 == v35 || v36 - (char *)v34 == -1;
  if (v32 < 0) {
    operator delete(v33);
  }
  if (!v38)
  {
    if (sub_1CBA86C10(&__dst, "cacl1_cacl2")) {
      *a4 = 0;
    }
    if (sub_1CBA86C10(&__dst, "bypl1_cacl2")) {
      *a4 = 1;
    }
    if (!sub_1CBA86C10(&__dst, "bypl1_bypl2")) {
      goto LABEL_109;
    }
    int v57 = 3;
    goto LABEL_181;
  }
  size_t v39 = strlen(__s);
  if (v39 > 0x7FFFFFFFFFFFFFF7) {
LABEL_171:
  }
    abort();
  size_t v40 = v39;
  if (v39 >= 0x17)
  {
    uint64_t v43 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39 | 7) != 0x17) {
      uint64_t v43 = v39 | 7;
    }
    uint64_t v44 = v43 + 1;
    uint64_t v41 = operator new(v43 + 1);
    size_t v87 = v40;
    int64_t v88 = v44 | 0x8000000000000000;
    long long v86 = v41;
    goto LABEL_66;
  }
  HIBYTE(v88) = v39;
  uint64_t v41 = &v86;
  if (v39) {
LABEL_66:
  }
    memcpy(v41, __s, v40);
  *((unsigned char *)v41 + v40) = 0;
  uint64_t v45 = HIBYTE(v88);
  int v46 = SHIBYTE(v88);
  int v47 = v86;
  if (v88 >= 0)
  {
    int v48 = &v86;
  }
  else
  {
    uint64_t v45 = v87;
    int v48 = v86;
  }
  uint64_t v49 = (char *)v48 + v45;
  if (v45 >= 6)
  {
    uint64_t v58 = v48;
    do
    {
      int v50 = (char *)memchr(v58, 76, v45 - 5);
      if (!v50) {
        break;
      }
      if (*(_DWORD *)v50 == 1699754572 && *((_WORD *)v50 + 2) == 29554) {
        goto LABEL_72;
      }
      uint64_t v58 = v50 + 1;
      uint64_t v45 = v49 - (unsigned char *)v58;
    }
    while (v49 - (unsigned char *)v58 > 5);
  }
  int v50 = v49;
LABEL_72:
  BOOL v52 = v50 == v49 || v50 - (char *)v48 == -1;
  if (v46 < 0) {
    operator delete(v47);
  }
  if (v52) {
    goto LABEL_109;
  }
  unint64_t v53 = HIBYTE(v91);
  if (v91 >= 0) {
    size_t v54 = HIBYTE(v91) & 0x7F;
  }
  else {
    size_t v54 = v90;
  }
  if (v54 == 4)
  {
    if (v91 < 0)
    {
      BOOL v60 = __dst;
      unint64_t v53 = v90;
    }
    else
    {
      BOOL v60 = (void **)&__dst;
    }
    if (v53 >= 4) {
      size_t v61 = 4;
    }
    else {
      size_t v61 = v53;
    }
    if (memcmp(v60, "high", v61) || v53 != 4) {
      goto LABEL_109;
    }
    int v57 = 1;
LABEL_181:
    *a4 = v57;
    goto LABEL_109;
  }
  if (v54 == 3)
  {
    if (v91 < 0)
    {
      uint64_t v55 = __dst;
      unint64_t v53 = v90;
    }
    else
    {
      uint64_t v55 = (void **)&__dst;
    }
    size_t v56 = v53 >= 3 ? 3 : v53;
    if (!memcmp(v55, "low", v56) && v53 == 3)
    {
      int v57 = 0;
      goto LABEL_181;
    }
  }
LABEL_109:
  char v62 = HIBYTE(v91);
  unint64_t v63 = v90;
  if (v91 >= 0) {
    size_t v64 = HIBYTE(v91) & 0x7F;
  }
  else {
    size_t v64 = v90;
  }
  switch(v64)
  {
    case 2uLL:
      if (v91 < 0)
      {
        unsigned int v65 = __dst;
      }
      else
      {
        unsigned int v65 = (void **)&__dst;
        unint64_t v63 = HIBYTE(v91);
      }
      if (v63 >= 2) {
        size_t v66 = 2;
      }
      else {
        size_t v66 = v63;
      }
      if (!memcmp(v65, "no", v66) && v63 == 2) {
        goto LABEL_179;
      }
      break;
    case 3uLL:
      if (v91 < 0)
      {
        uint64_t v81 = __dst;
      }
      else
      {
        uint64_t v81 = (void **)&__dst;
        unint64_t v63 = HIBYTE(v91);
      }
      if (v63 >= 3) {
        size_t v82 = 3;
      }
      else {
        size_t v82 = v63;
      }
      if (!memcmp(v81, "yes", v82) && v63 == 3) {
        goto LABEL_157;
      }
      break;
    case 4uLL:
      if (v91 < 0)
      {
        int v67 = __dst;
      }
      else
      {
        int v67 = (void **)&__dst;
        unint64_t v63 = HIBYTE(v91);
      }
      if (v63 >= 4) {
        size_t v68 = 4;
      }
      else {
        size_t v68 = v63;
      }
      if (!memcmp(v67, "true", v68) && v63 == 4)
      {
LABEL_157:
        int v83 = 1;
        goto LABEL_158;
      }
      break;
    case 5uLL:
      if (v91 < 0)
      {
        unint64_t v69 = __dst;
      }
      else
      {
        unint64_t v69 = (void **)&__dst;
        unint64_t v63 = HIBYTE(v91);
      }
      if (v63 >= 5) {
        size_t v70 = 5;
      }
      else {
        size_t v70 = v63;
      }
      if (!memcmp(v69, "false", v70) && v63 == 5)
      {
LABEL_179:
        int v83 = 0;
LABEL_158:
        *a4 = v83;
      }
      break;
    default:
      break;
  }
  if (v62 < 0) {
    operator delete(__dst);
  }
  if (*a4 != -1) {
    return 1;
  }
  uint64_t result = 0;
  int v71 = *(unsigned __int8 *)(v18 + 8);
  *a4 = 0;
  if (v71 == 2)
  {
    size_t v72 = *(unsigned int *)(v18 + 16);
    __dst = (void **)(v19 + *(unsigned int *)(v18 + 12) + 1);
    size_t v90 = v72;
    unsigned int v73 = sub_1CD0AF898((uint64_t)&__dst);
    size_t v74 = v90;
    if (v90)
    {
      unint64_t v75 = 0;
      for (int j = __dst; ; int j = (void **)((char *)j + 1))
      {
        int v77 = *(unsigned __int8 *)j;
        if ((v77 - 48) >= 0xA)
        {
          if ((v77 - 97) >= 0x1A)
          {
            if ((v77 - 65) > 0x19) {
              return 0;
            }
            int v78 = -55;
          }
          else
          {
            int v78 = -87;
          }
        }
        else
        {
          int v78 = -48;
        }
        unsigned int v79 = v78 + v77;
        if (v79 >= v73) {
          break;
        }
        unint64_t v80 = v75 * v73 + v79;
        if (v80 / v73 < v75) {
          break;
        }
        unint64_t v75 = v80;
        if (!--v74)
        {
          if (HIDWORD(v80)) {
            return 0;
          }
          *a4 = v80;
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

BOOL sub_1CBA86C10(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  size_t v5 = *((unsigned __int8 *)a1 + 23);
  size_t v6 = a1[1];
  if ((v5 & 0x80u) == 0) {
    size_t v7 = v5 & 0x7F;
  }
  else {
    size_t v7 = a1[1];
  }
  if (v4 != v7) {
    return 0;
  }
  size_t v8 = v4;
  if ((v5 & 0x80) != 0)
  {
    if (v4 != -1)
    {
      a1 = (void *)*a1;
      size_t v5 = v6;
      goto LABEL_7;
    }
LABEL_16:
    abort();
  }
  if (v4 == -1) {
    goto LABEL_16;
  }
LABEL_7:
  if (v5 >= v4) {
    size_t v9 = v4;
  }
  else {
    size_t v9 = v5;
  }
  BOOL v10 = memcmp(a1, __s, v9) == 0;
  return v5 == v8 && v10;
}

uint64_t sub_1CBA86CB4(uint64_t a1)
{
  return a1 + 456;
}

uint64_t sub_1CBA86CBC(uint64_t a1)
{
  return *(void *)(a1 + 448);
}

uint64_t sub_1CBA86CC4(uint64_t a1)
{
  return *(void *)(a1 + 928);
}

uint64_t sub_1CBA86CCC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) + 88;
}

uint64_t sub_1CBA86D08()
{
  return 1;
}

uint64_t sub_1CBA86D10()
{
  return 0;
}

uint64_t sub_1CBA86D18(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 281);
}

uint64_t sub_1CBA86D20(uint64_t a1, llvm::Function **a2)
{
  if ((*((unsigned char *)a2[1] + 1042) & 8) == 0) {
    return 0;
  }
  __int32 v2 = *a2;
  if ((*((_DWORD *)*a2 + 8) & 0xFu) - 7 > 1) {
    return 0;
  }
  hasAddressTakeunsigned int n = llvm::Function::hasAddressTaken(*a2, 0, 0, 1, 0, 0);
  uint64_t result = 0;
  if ((hasAddressTaken & 1) == 0)
  {
    uint64_t v5 = *((void *)v2 + 14);
    if (v5 && (*(unsigned char *)(v5 + 15) & 0x40) != 0)
    {
      uint64_t v6 = *((void *)v2 + 1);
      if (!v6) {
        return 1;
      }
      uint64_t result = 1;
      while (1)
      {
        uint64_t v7 = *(void *)(v6 + 24);
        if (*(unsigned char *)(v7 + 16) == 84 && (*(_WORD *)(v7 + 18) & 3u) - 1 < 2) {
          break;
        }
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6) {
          return result;
        }
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_1CBA86DE0(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 80) += 480;
  if (((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 480 > *(void *)(a2 + 8) - *(void *)a2)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    unint64_t v3 = (unint64_t)operator new(4096 << v5, (std::align_val_t)8uLL);
    unsigned int v7 = *(_DWORD *)(a2 + 24);
    if (v7 >= *(_DWORD *)(a2 + 28)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v7) = v3;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = v3 + v6;
  }
  else
  {
    unint64_t v3 = (*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a2 = v3 + 480;
  *(_DWORD *)(v3 + 8) = -1;
  *(unsigned char *)(v3 + 12) = 0;
  *(void *)unint64_t v3 = &unk_1F25F3528;
  *(void *)(v3 + 16) = v3 + 32;
  *(void *)(v3 + 24) = 0x1000000000;
  *(void *)(v3 + 160) = 0;
  *(void *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = 0;
  *(void *)(v3 + 192) = 0;
  *(_DWORD *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = v3 + 224;
  *(void *)(v3 + 216) = 0xA00000000;
  *(unsigned char *)(v3 + 432) = 0;
  *(void *)(v3 + 384) = 0;
  *(void *)(v3 + 392) = 0;
  *(_DWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 424) = 0;
  *(void *)(v3 + 408) = 0;
  *(void *)(v3 + 416) = 0;
  *(void *)(v3 + 440) = 0;
  *(void *)(v3 + 448) = 0;
  *(unsigned char *)(v3 + 456) = 0;
  *(void *)(v3 + 460) = 0xFFFFFFFFLL;
  *(unsigned char *)(v3 + 468) = 0;
  *(unsigned char *)(v3 + 472) = 0;
  return v3;
}

uint64_t sub_1CBA86F44()
{
  return 1;
}

void sub_1CBA86F68()
{
  if (!byte_1EBCBF8A0) {
    sub_1CBA73A58();
  }
  sub_1CD41C6D0();
}

uint64_t sub_1CBA86F80(uint64_t a1, const llvm::Function *a2)
{
  uint64_t v4 = *((void *)a2 + 14);
  if (!v4 || !*(_DWORD *)(v4 + 8))
  {
    uint64_t v24 = 0;
    goto LABEL_21;
  }
  uint64_t v5 = *(void *)(v4 + 40);
  if (!v5 || (int v6 = *(_DWORD *)(v5 + 40)) == 0)
  {
    uint64_t v14 = 0;
    goto LABEL_12;
  }
  uint64_t v7 = *(void *)(v5 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v68 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v68 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v68;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  unint64_t v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xBC30287DAC2F782DLL)) ^ ((0x9DDFEA08EB382D69
                                                                            * (qword_1EBCBE580 ^ 0xBC30287DAC2F782DLL)) >> 47) ^ 0xDF1D5C18CB5D1959);
  unsigned int v9 = (-348639895 * ((v8 >> 47) ^ v8)) ^ 0x74656772;
  for (int i = 1; ; ++i)
  {
    unsigned int v11 = v9 & (v6 - 1);
    unsigned int v12 = (uint64_t *)(v7 + 24 * v11);
    uint64_t v13 = *v12;
    if (*v12 == -1)
    {
      if ("target-cpu" == (char *)-1) {
        goto LABEL_70;
      }
      goto LABEL_9;
    }
    if (v13 != -2) {
      break;
    }
    if ("target-cpu" == (char *)-2) {
      goto LABEL_70;
    }
LABEL_9:
    if (v13 == -1)
    {
      uint64_t v14 = 0;
      goto LABEL_11;
    }
    unsigned int v9 = i + v11;
  }
  if (v12[1] != 10) {
    goto LABEL_9;
  }
  if (*(void *)v13 != 0x632D746567726174 || *(_WORD *)(v13 + 8) != 30064) {
    goto LABEL_9;
  }
LABEL_70:
  uint64_t v14 = v12[2];
LABEL_11:
  if (!*(_DWORD *)(v4 + 8))
  {
LABEL_19:
    uint64_t v24 = 0;
    goto LABEL_20;
  }
LABEL_12:
  uint64_t v15 = *(void *)(v4 + 40);
  if (!v15) {
    goto LABEL_19;
  }
  int v16 = *(_DWORD *)(v15 + 40);
  if (!v16) {
    goto LABEL_19;
  }
  uint64_t v17 = *(void *)(v15 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v69 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v69 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v69;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  unint64_t v18 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xACC792AF839889B6)) ^ ((0x9DDFEA08EB382D69
                                                                             * (qword_1EBCBE580 ^ 0xACC792AF839889B6)) >> 47) ^ 0xCAEAE6CAE4EAE8C2);
  unsigned int v19 = (-348639895 * ((v18 >> 47) ^ v18)) ^ 0x74616566;
  for (int j = 1; ; ++j)
  {
    unsigned int v21 = v19 & (v16 - 1);
    uint64_t v22 = v17 + 24 * v21;
    uint64_t v23 = *(void **)v22;
    if (*(void *)v22 == -1)
    {
      if ("target-features" == (char *)-1) {
        goto LABEL_78;
      }
      goto LABEL_18;
    }
    if (v23 != (void *)-2) {
      break;
    }
    if ("target-features" == (char *)-2) {
      goto LABEL_78;
    }
LABEL_18:
    if (v23 == (void *)-1) {
      goto LABEL_19;
    }
    unsigned int v19 = j + v21;
  }
  if (*(void *)(v22 + 8) != 15) {
    goto LABEL_18;
  }
  if (*v23 != 0x662D746567726174 || *(void *)((char *)v23 + 7) != 0x7365727574616566) {
    goto LABEL_18;
  }
LABEL_78:
  uint64_t v24 = *(void *)(v22 + 16);
LABEL_20:
  if (v14)
  {
    if (*(unsigned char *)(v14 + 8) == 2)
    {
      unsigned int v49 = *(_DWORD *)(v14 + 12);
    }
    else
    {
      unsigned int v49 = *(_DWORD *)(v14 + 12);
      if (!v49) {
        goto LABEL_21;
      }
    }
    std::string::__init(&v88, (const std::string::value_type *)(v14 + v49 + 25), *(unsigned int *)(v14 + 16));
  }
  else
  {
LABEL_21:
    if (*(char *)(a1 + 519) < 0) {
      sub_1CB8BDF7C((uint64_t)&v88, *(const void **)(a1 + 496), *(void *)(a1 + 504));
    }
    else {
      std::string v88 = *(std::string *)(a1 + 496);
    }
  }
  if (v24)
  {
    if (*(unsigned char *)(v24 + 8) == 2)
    {
      unsigned int v45 = *(_DWORD *)(v24 + 12);
    }
    else
    {
      unsigned int v45 = *(_DWORD *)(v24 + 12);
      if (!v45) {
        goto LABEL_24;
      }
    }
    std::string::size_type v46 = *(unsigned int *)(v24 + 16);
    uint64_t v47 = v24 + 24;
    if (v46 >= 0x17)
    {
      if ((v46 | 7) == 0x17) {
        uint64_t v50 = (v46 & 0xFFFFFFF8) + 8;
      }
      else {
        uint64_t v50 = v46 | 7;
      }
      p_dst = (std::string *)operator new(v50 + 1);
      __dst.__r_.__value_.__l.__size_ = v46;
      __dst.__r_.__value_.__r.__words[2] = v50 - 0x7FFFFFFFFFFFFFFFLL;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(_DWORD *)(v24 + 16);
      p_dst = &__dst;
      if (!v46)
      {
LABEL_94:
        p_dst->__r_.__value_.__s.__data_[v46] = 0;
        uint64_t v51 = *(unsigned int *)(v24 + 12);
        size_t v52 = *(unsigned int *)(v24 + 16);
        if (v52 >= 0x17)
        {
          if ((v52 | 7) == 0x17) {
            uint64_t v54 = (v52 & 0xFFFFFFF8) + 8;
          }
          else {
            uint64_t v54 = v52 | 7;
          }
          unint64_t v53 = operator new(v54 + 1);
          size_t v83 = v52;
          uint64_t v84 = v54 - 0x7FFFFFFFFFFFFFFFLL;
          size_t v82 = v53;
        }
        else
        {
          HIBYTE(v84) = *(_DWORD *)(v24 + 16);
          unint64_t v53 = &v82;
          if (!v52) {
            goto LABEL_102;
          }
        }
        memmove(v53, (const void *)(v47 + v51 + 1), v52);
LABEL_102:
        *((unsigned char *)v53 + v52) = 0;
        int v55 = SHIBYTE(v84);
        size_t v56 = HIBYTE(v84) & 0x7F;
        if (v84 < 0) {
          size_t v56 = v83;
        }
        if (v56) {
          int v57 = ",";
        }
        else {
          int v57 = (const std::string::value_type *)&unk_1CFB3DBA7;
        }
        uint64_t v58 = std::string::append(&__dst, v57);
        std::string::size_type v59 = v58->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v79.__r_.__value_.__l.__data_ = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        v79.__r_.__value_.__r.__words[2] = v59;
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        char v60 = *(unsigned char *)(a1 + 543);
        int v61 = v60;
        if (v60 >= 0) {
          char v62 = (const std::string::value_type *)(a1 + 520);
        }
        else {
          char v62 = *(const std::string::value_type **)(a1 + 520);
        }
        std::string::size_type v63 = v60 & 0x7F;
        if (v61 >= 0) {
          std::string::size_type v64 = v63;
        }
        else {
          std::string::size_type v64 = *(void *)(a1 + 528);
        }
        unsigned int v65 = std::string::append(&v79, v62, v64);
        std::string::size_type v66 = v65->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
        std::string::size_type v87 = v66;
        v65->__r_.__value_.__l.__size_ = 0;
        v65->__r_.__value_.__r.__words[2] = 0;
        v65->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79.__r_.__value_.__l.__data_);
        }
        if (v55 < 0) {
          operator delete(v82);
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        goto LABEL_26;
      }
    }
    memmove(p_dst, (const void *)(v47 + v45 + 1), v46);
    goto LABEL_94;
  }
LABEL_24:
  if (*(char *)(a1 + 543) < 0)
  {
    sub_1CB8BDF7C((uint64_t)__p, *(const void **)(a1 + 520), *(void *)(a1 + 528));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 520);
    std::string::size_type v87 = *(void *)(a1 + 536);
  }
LABEL_26:
  sub_1CB906918((const void **)&v88.__r_.__value_.__l.__data_, (const void **)__p, (uint64_t)&v79);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v25 = &v79;
  }
  else {
    unint64_t v25 = (std::string *)v79.__r_.__value_.__r.__words[0];
  }
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = *((unsigned char *)&v79.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t size = v79.__r_.__value_.__l.__size_;
  }
  unsigned int v27 = *(_DWORD *)(a1 + 2272);
  if (!v27)
  {
    *(void *)(a1 + 2276) = 0;
    int v67 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v67) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v67[16] = 2;
    *(void *)(a1 + 2264) = v67;
    unsigned int v27 = 16;
    *(_DWORD *)(a1 + 2272) = 16;
  }
  uint64_t v76 = (llvm::StringMapImpl *)(a1 + 2264);
  int v77 = a2;
  int v28 = 0;
  if (size)
  {
    size_t v29 = size;
    uint64_t v30 = v25;
    do
    {
      int v31 = v30->__r_.__value_.__s.__data_[0];
      uint64_t v30 = (std::string *)((char *)v30 + 1);
      int v28 = 33 * v28 + v31;
      --v29;
    }
    while (v29);
  }
  uint64_t v78 = a1;
  uint64_t v32 = *(void *)(a1 + 2264);
  unsigned int v33 = v27 - 1;
  uint64_t v34 = v32 + 8 * v27 + 8;
  int v35 = -1;
  int v36 = 1;
  int v37 = v28;
  while (1)
  {
    uint64_t v38 = v37 & v33;
    size_t v39 = *(void **)(v32 + 8 * v38);
    if (!v39) {
      break;
    }
    if (v39 == (void *)-8)
    {
      if (v35 == -1) {
        int v35 = v37 & v33;
      }
    }
    else if (*(_DWORD *)(v34 + 4 * v38) == v28 {
           && size == *v39
    }
           && (!size || !memcmp(v25, (char *)v39 + *(unsigned int *)(v78 + 2284), size)))
    {
      goto LABEL_48;
    }
    int v37 = v36 + v38;
    ++v36;
  }
  uint64_t v40 = v35;
  if (v35 == -1)
  {
    uint64_t v40 = v38;
    uint64_t v38 = v38;
  }
  else
  {
    uint64_t v38 = v35;
  }
  *(_DWORD *)(v34 + 4 * v40) = v28;
  size_t v39 = *(void **)(v32 + 8 * v38);
LABEL_48:
  if (v39)
  {
    if (v39 != (void *)-8) {
      goto LABEL_50;
    }
    --*(_DWORD *)(v78 + 2280);
  }
  uint64_t v70 = v32;
  int v71 = operator new(size + 17, (std::align_val_t)8uLL);
  size_t v72 = v71;
  unsigned int v73 = (char *)(v71 + 2);
  if (size) {
    memcpy(v71 + 2, v25, size);
  }
  v73[size] = 0;
  size_t *v72 = size;
  v72[1] = 0;
  *(void *)(v70 + 8 * v38) = v72;
  ++*(_DWORD *)(v78 + 2276);
  for (unsigned int k = (void **)(*(void *)(v78 + 2264) + 8 * llvm::StringMapImpl::RehashTable(v76, v38)); ; ++k)
  {
    size_t v39 = *k;
    if (*k && v39 + 1 != 0) {
      break;
    }
  }
LABEL_50:
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  uint64_t v41 = v39[1];
  if (!v41)
  {
    llvm::TargetMachine::resetTargetOptions((llvm::TargetMachine *)v78, v77);
    if (*(char *)(v78 + 471) < 0) {
      sub_1CB8BDF7C((uint64_t)&v79, *(const void **)(v78 + 448), *(void *)(v78 + 456));
    }
    else {
      std::string v79 = *(std::string *)(v78 + 448);
    }
    uint64_t v81 = *(void *)(v78 + 488);
    long long v80 = *(_OWORD *)(v78 + 472);
    sub_1CBA87838();
  }
  if (SHIBYTE(v87) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v88.__r_.__value_.__l.__data_);
  }
  return v41;
}

void sub_1CBA87838()
{
}

void sub_1CBA878D8(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  (*(void (**)(uint64_t))(*(void *)v1 + 120))(v1);
  operator new();
}

void sub_1CBA879E8()
{
}

uint64_t sub_1CBA87A40()
{
  return 1;
}

uint64_t sub_1CBA87A48(uint64_t a1)
{
  return *(void *)(a1 + 1320);
}

uint64_t sub_1CBA87A50()
{
  return 0;
}

uint64_t sub_1CBA87A58()
{
  return 0;
}

uint64_t sub_1CBA87A60()
{
  return 0;
}

void sub_1CBA87A68()
{
}

uint64_t sub_1CBA87A7C()
{
  return 1;
}

uint64_t sub_1CBA87A84()
{
  return 0;
}

uint64_t sub_1CBA87A8C()
{
  return 150;
}

uint64_t sub_1CBA87A94(uint64_t a1, llvm::ShuffleVectorInst *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1CBA88738(a1 + 16, a2, a3, a4, a5);
}

uint64_t sub_1CBA87A9C()
{
  return 2126008812;
}

BOOL sub_1CBA87AA8(uint64_t a1, int a2)
{
  return a2 == 0;
}

uint64_t sub_1CBA87AB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 40) + 8) + 80))();
}

uint64_t sub_1CBA87AE0(uint64_t a1, uint64_t ***a2)
{
  return sub_1CB9091FC(a1 + 16, a2);
}

void sub_1CBA87AE8(uint64_t a1, llvm::Loop *a2, uint64_t a3, uint64_t a4)
{
}

void sub_1CBA87AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)a4 = 0;
  *(_WORD *)(a4 + 4) = 1;
  *(unsigned char *)(a4 + 6) = 1;
}

uint64_t sub_1CBA87B04()
{
  return 0;
}

uint64_t sub_1CBA87B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = a1 + 8;
  unsigned int v8 = *((_DWORD *)a4 + 2);
  if (v8 > 0x40) {
    operator new[]();
  }
  uint64_t v7 = *a4;
  uint64_t result = sub_1CBA8D9B8(v4, a2, a3, (uint64_t)&v7);
  if (v8 >= 0x41)
  {
    if (v7)
    {
      uint64_t v6 = result;
      MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
      return v6;
    }
  }
  return result;
}

uint64_t sub_1CBA87BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a4 + 8) > 0x40u) {
    operator new[]();
  }
  sub_1CB90D414((uint64_t)v9, a8);
  sub_1CB90D414((uint64_t)v11, (uint64_t)v9);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return 0;
}

uint64_t sub_1CBA87E0C()
{
  return 0;
}

uint64_t sub_1CBA87E14()
{
  return 1;
}

uint64_t sub_1CBA87E1C(uint64_t a1, llvm::IntegerType *this, llvm::LLVMContext *a3)
{
  if ((int)a3 <= 31)
  {
    if (a3 != 1 && a3 != 16 && a3 != 8) {
      goto LABEL_14;
    }
  }
  else if (a3 != 32 && a3 != 64 && a3 != 128)
  {
LABEL_14:
    llvm::IntegerType::get(this, a3);
  }
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 40) + 648);

  return v4();
}

uint64_t sub_1CBA87F30(uint64_t a1, llvm::EVT *this)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unsigned __int8 v3 = sub_1CB87DC14(v2, *(void *)(a1 + 16), this, 0);
  if (v3 && (v3 == 1 || *(void *)(v2 + 8 * v3 + 96)) && (unint64_t v4 = *(char *)(v2 + 390 * v3 + 3958), v4 <= 4)) {
    return qword_1CDB15670[v4];
  }
  else {
    return 4;
  }
}

uint64_t sub_1CBA87FB0(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 0;
  return 0;
}

unint64_t sub_1CBA87FBC(uint64_t a1, unsigned int a2, uint64_t a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t a9, unint64_t a10, uint64_t a11)
{
  return sub_1CBA89F84(a1 + 8, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

unint64_t sub_1CBA87FD4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7)
{
  return sub_1CBA8B020(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1CBA87FDC()
{
  return 0;
}

BOOL sub_1CBA87FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CBA65B28(a1 + 8, a2, a3);
}

BOOL sub_1CBA87FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CB90D6C8(a1 + 16, a2, a3);
}

uint64_t sub_1CBA87FF4()
{
  return 128;
}

uint64_t sub_1CBA87FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  if (v3
    && *(void *)(v3 + 56)
    && *(unsigned char *)((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24)) + 389))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 - 32);
  int v5 = *(_DWORD *)(*(void *)v4 + 8);
  if ((v5 & 0xFE) == 0x12) {
    int v5 = *(_DWORD *)(**(void **)(*(void *)v4 + 16) + 8);
  }
  if ((v5 & 0xFFFFFF00) != 0x4000) {
    return 1;
  }
  char v7 = sub_1CD0FF880(v4, 0);
  uint64_t result = 0;
  if ((v7 & 1) == 0) {
    return 1;
  }
  return result;
}

BOOL sub_1CBA880B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = **(void **)(a2 - 32);
  int v3 = *(_DWORD *)(v2 + 8);
  if ((v3 & 0xFE) == 0x12) {
    int v3 = *(_DWORD *)(**(void **)(v2 + 16) + 8);
  }
  return (v3 & 0xFFFFFF00) != 0x4000;
}

BOOL sub_1CBA880EC(uint64_t a1, unsigned int a2, char a3, unsigned int a4)
{
  return sub_1CD1103C4(a2, 1 << a3, a4);
}

BOOL sub_1CBA88100(uint64_t a1, unsigned int a2, char a3, unsigned int a4)
{
  return sub_1CD1103C4(a2, 1 << a3, a4);
}

uint64_t sub_1CBA88114(int a1, uint64_t a2, unsigned int a3, int a4, llvm::Type ***a5)
{
  return sub_1CBA65C98(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_1CBA8811C(int a1, uint64_t a2, unsigned int a3, int a4, llvm::Type ***a5)
{
  return sub_1CBA65C98(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_1CBA88124()
{
  return 0;
}

uint64_t sub_1CBA8812C()
{
  return 1;
}

BOOL sub_1CBA88134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CBA65D48(a1 + 8, a2, a3);
}

uint64_t sub_1CBA8813C(llvm::DataLayout **a1, uint64_t a2, llvm::Value *this, llvm::Constant **a4, uint64_t a5)
{
  BOOL v10 = llvm::Value::stripPointerCasts(this);
  if (*((unsigned __int8 *)v10 + 16) >= 4u) {
    unsigned int v11 = 0;
  }
  else {
    unsigned int v11 = v10;
  }
  unsigned int v12 = *a1;
  unsigned int v13 = *(_DWORD *)(*(void *)this + 8);
  if ((v13 & 0xFE) == 0x12) {
    unsigned int v13 = *(_DWORD *)(**(void **)(*(void *)this + 16) + 8);
  }
  uint64_t v14 = *((void *)v12 + 29);
  if (v13 < 0x100) {
    goto LABEL_15;
  }
  unsigned int v15 = v13 >> 8;
  unint64_t v16 = *((unsigned int *)v12 + 60);
  uint64_t v17 = *((void *)v12 + 29);
  if (v16)
  {
    uint64_t v17 = v14;
    unint64_t v18 = v16;
    do
    {
      unint64_t v19 = v18 >> 1;
      uint64_t v20 = v17 + 16 * (v18 >> 1);
      unsigned int v21 = *(_DWORD *)(v20 + 8);
      uint64_t v22 = v20 + 16;
      v18 += ~(v18 >> 1);
      if (v21 < v15) {
        uint64_t v17 = v22;
      }
      else {
        unint64_t v18 = v19;
      }
    }
    while (v18);
  }
  if (v17 == v14 + 16 * v16 || *(_DWORD *)(v17 + 8) != v15) {
LABEL_15:
  }
    uint64_t v17 = v14;
  unsigned int v23 = *(_DWORD *)(v17 + 4);
  unsigned int v80 = v23;
  if (v23 > 0x40) {
    operator new[]();
  }
  unint64_t v79 = 0;
  int v77 = a4;
  uint64_t v78 = a2 | 4;
  if (!a5)
  {
    unsigned int v66 = v11 != 0;
    goto LABEL_99;
  }
  unsigned int v73 = v11;
  size_t v74 = this;
  uint64_t v24 = 0;
  unint64_t v25 = &a4[a5];
  do
  {
    uint64_t v26 = v24;
    unint64_t v27 = v78 & 0xFFFFFFFFFFFFFFF8;
    if ((v78 & 4) == 0 || !v27)
    {
      AggregateElement = *v77;
      if (*v77) {
        BOOL v29 = *((unsigned char *)*v77 + 16) == 16;
      }
      else {
        BOOL v29 = 0;
      }
      if (!v29) {
        AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement(AggregateElement, 0);
      }
      uint64_t v32 = (unsigned int *)*((void *)AggregateElement + 3);
      uint64_t v30 = (unsigned int *)((char *)AggregateElement + 24);
      int v31 = v32;
      if (v30[2] < 0x41) {
        int v31 = v30;
      }
      unint64_t v27 = *(void *)(*(void *)(v27 + 16) + 8 * *v31);
    }
    unsigned int v33 = (unsigned int *)*a4;
    unsigned int v34 = *((unsigned __int8 *)*a4 + 16);
    if (*a4) {
      BOOL v35 = v34 == 16;
    }
    else {
      BOOL v35 = 0;
    }
    if (!v35)
    {
      if (v34 <= 0x14 && (*(_DWORD *)(*(void *)v33 + 8) & 0xFE) == 18)
      {
        SplatValue = (unsigned int *)llvm::Constant::getSplatValue(*a4, 0);
        if (!SplatValue)
        {
LABEL_79:
          unsigned int v33 = 0;
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v85 = 0;
        size_t v82 = (void **)&v85;
        int v37 = sub_1CC189A5C((uint64_t)&v81, (uint64_t)v33);
        unsigned int v33 = 0;
        if (!v37) {
          goto LABEL_38;
        }
        SplatValue = v85;
        if (!v85) {
          goto LABEL_79;
        }
      }
      if (*((unsigned char *)SplatValue + 16) == 16) {
        unsigned int v33 = SplatValue;
      }
      else {
        unsigned int v33 = 0;
      }
    }
LABEL_38:
    uint64_t v38 = (llvm::Type *)(v78 & 0xFFFFFFFFFFFFFFF8);
    if ((v78 & 4) == 0 && v38)
    {
      size_t v39 = v33 + 6;
      if (v33[8] >= 0x41) {
        size_t v39 = *(unsigned int **)v39;
      }
      uint64_t v40 = *v39;
      StructLayout = llvm::DataLayout::getStructLayout(*a1, (llvm::StructType *)(v78 & 0xFFFFFFFFFFFFFFF8));
      llvm::APInt::operator+=((uint64_t)&v79, *((void *)StructLayout + v40 + 2));
LABEL_69:
      uint64_t v24 = v26;
      goto LABEL_70;
    }
    if (*(unsigned char *)(v27 + 8) == 19) {
      goto LABEL_98;
    }
    uint64_t v42 = *a1;
    if (!v38 || (v78 & 4) == 0)
    {
      uint64_t v43 = *v77;
      if (*v77) {
        BOOL v44 = *((unsigned char *)*v77 + 16) == 16;
      }
      else {
        BOOL v44 = 0;
      }
      if (!v44) {
        uint64_t v43 = (llvm::Constant *)llvm::Constant::getAggregateElement(v43, 0);
      }
      uint64_t v47 = (unsigned int *)*((void *)v43 + 3);
      unsigned int v45 = (unsigned int *)((char *)v43 + 24);
      std::string::size_type v46 = v47;
      if (v45[2] < 0x41) {
        std::string::size_type v46 = v45;
      }
      uint64_t v38 = *(llvm::Type **)(*((void *)v38 + 2) + 8 * *v46);
    }
    unint64_t v48 = (unint64_t)(sub_1CB83544C((uint64_t)v42, (uint64_t)v38) + 7) >> 3;
    char Alignment = llvm::DataLayout::getAlignment(v42, v38, 1);
    uint64_t v24 = ((1 << Alignment) + v48 - 1) & -(1 << Alignment);
    if (v33)
    {
      llvm::APInt::sextOrTrunc((uint64_t)(v33 + 6), v23, (uint64_t)&v75);
      unsigned int v50 = v76;
      if (v76 <= 0x40)
      {
        unint64_t v75 = (llvm::APInt *)((void)v75 * v24);
        if (v76) {
          goto LABEL_57;
        }
LABEL_87:
        unint64_t v51 = 0;
        goto LABEL_58;
      }
      llvm::APInt::tcMultiplyPart(v75, (unint64_t *)v75, (const unint64_t *)v24, 0, ((unint64_t)v76 + 63) >> 6, ((unint64_t)v76 + 63) >> 6, 0);
      unsigned int v50 = v76;
      if (!v76) {
        goto LABEL_87;
      }
LABEL_57:
      unint64_t v51 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v50;
      if (v50 >= 0x41) {
        size_t v52 = (llvm::APInt **)((char *)v75 + 8 * (((unint64_t)v50 + 63) >> 6) - 8);
      }
      else {
LABEL_58:
      }
        size_t v52 = &v75;
      *size_t v52 = (llvm::APInt *)((unint64_t)*v52 & v51);
      unsigned int v53 = v76;
      uint64_t v54 = v75;
      unsigned int v76 = 0;
      char v55 = v80;
      if (v80 >= 0x41)
      {
        uint64_t v58 = 0;
        std::string::size_type v59 = (unint64_t *)v79;
        unint64_t v60 = ((unint64_t)v80 + 63) >> 6;
        int v61 = v75;
        unint64_t v62 = v60;
        do
        {
          uint64_t v63 = *(void *)v61;
          int v61 = (llvm::APInt *)((char *)v61 + 8);
          unint64_t v64 = v63 + *v59;
          BOOL v65 = v64 + 1 <= *v59;
          if (v58)
          {
            ++v64;
            uint64_t v58 = v65;
          }
          else
          {
            uint64_t v58 = v64 < *v59;
          }
          *v59++ = v64;
          --v62;
        }
        while (v62);
        *(void *)(v79 + 8 * (v60 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v55;
      }
      else
      {
        if (v80) {
          unint64_t v56 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v80;
        }
        else {
          unint64_t v56 = 0;
        }
        unint64_t v79 = v56 & ((unint64_t)v75 + v79);
      }
      if (v53 >= 0x41 && v54) {
        MEMORY[0x1D25D9CB0](v54, 0x1000C8000313F17);
      }
      if (v76 >= 0x41 && v75) {
        MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
      }
      goto LABEL_69;
    }
    if (v26)
    {
LABEL_98:
      unsigned int v66 = 1;
      goto LABEL_99;
    }
LABEL_70:
    ++a4;
    sub_1CB90797C((uint64_t)&v77);
  }
  while (a4 != v25);
  if (v80 <= 0x3F)
  {
    uint64_t v68 = (uint64_t)(v79 << -(char)v80) >> -(char)v80;
    unint64_t v69 = v73;
    int v67 = v74;
  }
  else
  {
    int v67 = v74;
    if (v80 == 64) {
      uint64_t v68 = v79;
    }
    else {
      uint64_t v68 = *(void *)v79;
    }
    unint64_t v69 = v73;
  }
  uint64_t v70 = *(void *)v67;
  unsigned int v71 = *(_DWORD *)(*(void *)v67 + 8);
  if ((v71 & 0xFE) == 0x12) {
    unsigned int v71 = *(_DWORD *)(**(void **)(v70 + 16) + 8);
  }
  uint64_t v81 = v69;
  size_t v82 = (void **)v68;
  BOOL v83 = v69 == 0;
  uint64_t v84 = v24;
  unsigned int v66 = (*(uint64_t (**)(llvm::DataLayout *, llvm::DataLayout *, llvm::Value **, unint64_t, void, void))(*(void *)a1[3] + 1064))(a1[3], *a1, &v81, v27, v71 >> 8, 0) ^ 1;
LABEL_99:
  if (v80 >= 0x41 && v79) {
    MEMORY[0x1D25D9CB0](v79, 0x1000C8000313F17);
  }
  return v66;
}

uint64_t sub_1CBA88738(uint64_t a1, llvm::ShuffleVectorInst *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v129[7] = *MEMORY[0x1E4F143B8];
  unsigned int v7 = *((unsigned __int8 *)this + 16);
  uint64_t v8 = v7 - 28;
  if (v7 < 0x1C) {
    goto LABEL_16;
  }
  if (v7 == 33 || v7 == 39) {
    goto LABEL_9;
  }
  if (v7 == 84)
  {
    uint64_t v9 = *((void *)this - 4);
    if (!v9
      || *(unsigned char *)(v9 + 16)
      || *(void *)(v9 + 24) != *((void *)this + 9)
      || (BOOL v10 = this, (*(unsigned char *)(v9 + 33) & 0x20) == 0))
    {
LABEL_9:
      uint64_t v11 = *((void *)this - 4);
      if (!v11 || *(unsigned char *)(v11 + 16) || *(void *)(v11 + 24) != *((void *)this + 9))
      {
        if (v7 == 84)
        {
          uint64_t v12 = 0;
        }
        else if (v7 == 39)
        {
          uint64_t v12 = (*((_DWORD *)this + 20) + 1);
        }
        else
        {
          uint64_t v12 = 2;
        }
        int v13 = 0;
        int v14 = *((_DWORD *)this + 5);
        uint64_t v15 = -(uint64_t)(v14 & 0x7FFFFFF);
        if (v14 < 0)
        {
          unsigned int v114 = (char *)this - 32 * (v14 & 0x7FFFFFF);
          uint64_t v115 = *((void *)v114 - 1);
          if ((v115 & 0xFFFFFFFF0) != 0) {
            int v13 = *((_DWORD *)v114 - 3) - *(_DWORD *)&v114[-v115];
          }
          else {
            int v13 = 0;
          }
        }
        return ((-32 * v12 + 32 * (unint64_t)-v13 - 32 * v15 - 32) >> 5) + 1;
      }
      if (sub_1CB9091FC(a1, *((uint64_t ****)this - 4))) {
        return *(unsigned int *)(*(void *)(v11 + 24) + 12);
      }
      return 1;
    }
  }
  else
  {
LABEL_16:
    BOOL v10 = 0;
  }
  int v17 = *((_DWORD *)this + 5);
  uint64_t v18 = v17 & 0x7FFFFFF;
  if ((v17 & 0x7FFFFFF) == 1)
  {
    if ((v17 & 0x40000000) != 0) {
      unint64_t v19 = (llvm::Type *****)*((void *)this - 1);
    }
    else {
      unint64_t v19 = (llvm::Type *****)((char *)this - 32);
    }
    uint64_t v20 = **v19;
  }
  else
  {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(void *)this;
  if (v7 <= 0x1B)
  {
    if (v7 != 5) {
      return 1;
    }
    uint64_t v8 = *((unsigned __int16 *)this + 9);
  }
  if (v7 <= 0x1B) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = this;
  }
  unint64_t v16 = 0;
  uint64_t v23 = a1 - 8;
  switch((int)v8)
  {
    case 1:
    case 2:
    case 3:
    case 55:
      if (a5) {
        BOOL v39 = v8 == 55;
      }
      else {
        BOOL v39 = 0;
      }
      return !v39;
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      LODWORD(v121) = 0;
      LODWORD(v119) = 0;
      if ((v17 & 0x40000000) != 0) {
        uint64_t v24 = (uint64_t *)*((void *)this - 1);
      }
      else {
        uint64_t v24 = (uint64_t *)((char *)this - 32 * v18);
      }
      unsigned int OperandInfo = llvm::TargetTransformInfo::getOperandInfo(*v24, &v121);
      if (v8 == 12)
      {
        unsigned int v28 = 0;
      }
      else
      {
        int v29 = *((_DWORD *)this + 5);
        if ((v29 & 0x40000000) != 0) {
          uint64_t v30 = (char *)*((void *)this - 1);
        }
        else {
          uint64_t v30 = (char *)this - 32 * (v29 & 0x7FFFFFF);
        }
        unsigned int v28 = llvm::TargetTransformInfo::getOperandInfo(*((void *)v30 + 4), &v119);
      }
      int v31 = *((_DWORD *)this + 5);
      if ((v31 & 0x40000000) != 0)
      {
        unsigned int v33 = (uint64_t *)*((void *)this - 1);
        unint64_t v32 = v31 & 0x7FFFFFF;
      }
      else
      {
        unint64_t v32 = v31 & 0x7FFFFFF;
        unsigned int v33 = (uint64_t *)((char *)this - 32 * v32);
      }
      uint64_t v123 = &v125;
      uint64_t v124 = 0x200000000;
      if (v32 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v32)
      {
        uint64_t v34 = 32 * v32;
        BOOL v35 = &v125;
        do
        {
          uint64_t v36 = *v33;
          v33 += 4;
          *v35++ = v36;
          v34 -= 32;
        }
        while (v34);
        int v37 = (uint64_t *)v123;
      }
      else
      {
        int v37 = &v125;
      }
      LODWORD(v124) = v32;
      unint64_t v16 = sub_1CBA89F84(v23, v8, v21, a5, OperandInfo, v28, v121, v119, (uint64_t)v37, v32, (uint64_t)v22);
      uint64_t v38 = v123;
      if (v123 != &v125) {
        goto LABEL_51;
      }
      return v16;
    case 31:
      if (*(unsigned char *)(*((void *)this - 4) + 16) != 16) {
        return 1;
      }
      uint64_t v41 = *((void *)this + 5);
      uint64_t v42 = *(void *)(*(void *)(v41 + 56) + 80);
      uint64_t v43 = v42 ? v42 - 24 : 0;
      return v41 != v43 || (*((_WORD *)this + 9) & 0x40) != 0;
    case 32:
      if (a5 == 2)
      {
        uint64_t v54 = *((void *)this + 1);
        if (v54)
        {
          if (!*(void *)(v54 + 8) && (*(_DWORD *)(v21 + 8) & 0xFE) != 0x12)
          {
            uint64_t v55 = *(void *)(v54 + 24);
            if (v55)
            {
              if (*(unsigned char *)(v55 + 16) == 66) {
                uint64_t v21 = *(void *)v55;
              }
            }
          }
        }
      }
      uint64_t v56 = **((void **)this - 4);
      unsigned int v57 = *(_DWORD *)(v56 + 8);
      if ((v57 & 0xFE) == 0x12) {
        unsigned int v57 = *(_DWORD *)(**(void **)(v56 + 16) + 8);
      }
      if (a5) {
        return 1;
      }
      unint64_t v58 = ((unint64_t)*((unsigned __int16 *)this + 9) >> 1) & 0x3F | 0x100;
      uint64_t v59 = v57 >> 8;
      uint64_t v60 = a1 - 8;
      int v61 = 32;
      unint64_t v62 = (llvm::EVT *)v21;
      return sub_1CD412EA8(v60, v61, v62, v58, v59, 0);
    case 33:
      if ((v17 & 0x40000000) != 0) {
        unsigned int v53 = (llvm::EVT ***)*((void *)this - 1);
      }
      else {
        unsigned int v53 = (llvm::EVT ***)((char *)this - 32 * v18);
      }
      uint64_t v71 = **((void **)this - 4);
      unsigned int v72 = *(_DWORD *)(v71 + 8);
      if ((v72 & 0xFE) == 0x12) {
        unsigned int v72 = *(_DWORD *)(**(void **)(v71 + 16) + 8);
      }
      if (a5) {
        return 1;
      }
      unint64_t v62 = **v53;
      unint64_t v58 = ((unint64_t)*((unsigned __int16 *)this + 9) >> 1) & 0x3F | 0x100;
      uint64_t v59 = v72 >> 8;
      uint64_t v60 = a1 - 8;
      int v61 = 33;
      return sub_1CD412EA8(v60, v61, v62, v58, v59, 0);
    case 34:
      BOOL v39 = v7 == 62;
      uint64_t v44 = 24;
      if (v39) {
        uint64_t v44 = 64;
      }
      uint64_t v45 = *(void *)((char *)this + v44);
      if ((v17 & 0x40000000) != 0) {
        std::string::size_type v46 = (llvm::Value **)*((void *)this - 1);
      }
      else {
        std::string::size_type v46 = (llvm::Value **)((char *)this - 32 * v18);
      }
      return sub_1CBA8813C((llvm::DataLayout **)a1, v45, *v46, (llvm::Constant **)(a3 + 8), a4 - 1);
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      unsigned int CastContextHint = llvm::TargetTransformInfo::getCastContextHint((uint64_t)v22);
      return sub_1CBA8A664(v23, v8, (llvm::Type ***)v21, v20, CastContextHint, a5, (uint64_t)v22);
    case 53:
    case 54:
      if ((v17 & 0x40000000) != 0) {
        uint64_t v40 = (uint64_t **)*((void *)this - 1);
      }
      else {
        uint64_t v40 = (uint64_t **)((char *)this - 32 * v18);
      }
      if (v22) {
        unsigned int v47 = *((_WORD *)v22 + 9) & 0x3F;
      }
      else {
        unsigned int v47 = 42;
      }
      return sub_1CBA8B020(a1 - 8, v8, **v40, *(void *)this, v47, a5, (uint64_t)v22);
    case 56:
      llvm::IntrinsicCostAttributes::IntrinsicCostAttributes((uint64_t)&v123, *(_DWORD *)(*((void *)this - 4) + 36), (uint64_t)v10, 0, 1);
      unint64_t v16 = sub_1CBA8952C(v23, (uint64_t)&v123, a5);
      if (v128 != v129) {
        free(v128);
      }
      uint64_t v38 = v126;
      if (v126 != &v127) {
LABEL_51:
      }
        free(v38);
      return v16;
    case 57:
      *(void *)uint64_t v118 = 0;
      uint64_t v119 = 0;
      uint64_t v123 = &v119;
      uint64_t v124 = (uint64_t)v118;
      if ((sub_1CB90D004((void **)&v123, (uint64_t)this) & 1) != 0
        || (uint64_t v121 = (llvm::Type *)&v119, v122 = v118, (sub_1CB90D1A4((void **)&v121, (uint64_t)this) & 1) != 0))
      {
        LODWORD(v121) = 0;
        int v117 = 0;
        unsigned int v48 = llvm::TargetTransformInfo::getOperandInfo(v119, &v121);
        unsigned int v49 = llvm::TargetTransformInfo::getOperandInfo(*(uint64_t *)v118, &v117);
        uint64_t v123 = &v125;
        uint64_t v125 = v119;
        int v126 = *(uint64_t **)v118;
        uint64_t v124 = 0x200000002;
        if (sub_1CB90D2C0((uint64_t)v116, (unsigned __int8 *)this)) {
          unsigned int v50 = 29;
        }
        else {
          unsigned int v50 = 28;
        }
        unint64_t v16 = sub_1CBA89F84(v23, v50, v21, a5, v48, v49, v121, v117, (uint64_t)v123, v124, (uint64_t)v22);
        if (v123 != &v125) {
          free(v123);
        }
      }
      else
      {
        int v73 = *((_DWORD *)this + 5);
        if ((v73 & 0x40000000) != 0) {
          size_t v74 = (uint64_t **)*((void *)this - 1);
        }
        else {
          size_t v74 = (uint64_t **)((char *)this - 32 * (v73 & 0x7FFFFFF));
        }
        return sub_1CBA8B020(v23, 0x39u, *(void *)this, **v74, 0x2Au, a5, (uint64_t)v22);
      }
      return v16;
    case 61:
      if (v7 != 89) {
        return 1;
      }
      if ((v17 & 0x40000000) != 0) {
        size_t v52 = (uint64_t **)*((void *)this - 1);
      }
      else {
        size_t v52 = (uint64_t **)((char *)this - 32 * v18);
      }
      uint64_t v83 = **v52;
      unint64_t v84 = *(void *)(a1 + 24);
      if ((*(_DWORD *)(v83 + 8) & 0xFE) == 0x12) {
        uint64_t v83 = **(void **)(v83 + 16);
      }
      uint64_t v85 = *(llvm::LLVMContext **)v83;
      unint64_t v86 = sub_1CB87DC14(*(void *)(a1 + 24), *(void *)a1, (llvm::EVT *)v83, 0);
      uint64_t v88 = v87;
      uint64_t v119 = 1;
      LODWORD(v120) = 0;
      while (2)
      {
        llvm::TargetLoweringBase::getTypeConversion(v84, v85, v86, v88, (uint64_t)&v123);
        if (!(_BYTE)v123) {
          return v119;
        }
        if (v123 == 10) {
          return 0;
        }
        if ((v123 & 0xFB) == 2)
        {
          uint64_t v121 = (llvm::Type *)2;
          LODWORD(v122) = 0;
          sub_1CB90C9D4((uint64_t)&v119, (uint64_t)&v121);
        }
        int v89 = v86;
        unint64_t v86 = v124;
        if (v89 != v124)
        {
          uint64_t v90 = v125;
LABEL_155:
          uint64_t v88 = v90;
          continue;
        }
        break;
      }
      if (!v89)
      {
        uint64_t v90 = v125;
        if (v88 != v125) {
          goto LABEL_155;
        }
      }
      return v119;
    case 62:
      if (v7 != 90) {
        return 1;
      }
      unint64_t v63 = *(void *)(a1 + 24);
      if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12) {
        uint64_t v21 = **(void **)(v21 + 16);
      }
      unint64_t v64 = *(llvm::Type ***)v21;
      unint64_t v65 = sub_1CB87DC14(*(void *)(a1 + 24), *(void *)a1, (llvm::EVT *)v21, 0);
      uint64_t v67 = v66;
      uint64_t v119 = 1;
      LODWORD(v120) = 0;
      while (2)
      {
        llvm::TargetLoweringBase::getTypeConversion(v63, (llvm::LLVMContext *)v64, v65, v67, (uint64_t)&v123);
        if (!(_BYTE)v123) {
          return v119;
        }
        if (v123 == 10) {
          return 0;
        }
        if ((v123 & 0xFB) == 2)
        {
          uint64_t v121 = (llvm::Type *)2;
          LODWORD(v122) = 0;
          sub_1CB90C9D4((uint64_t)&v119, (uint64_t)&v121);
        }
        int v68 = v65;
        unint64_t v65 = v124;
        if (v68 == v124)
        {
          if (v68) {
            return v119;
          }
          uint64_t v69 = v125;
          if (v67 == v125) {
            return v119;
          }
        }
        else
        {
          uint64_t v69 = v125;
        }
        uint64_t v67 = v69;
        continue;
      }
    case 63:
      if (v7 != 91) {
        return 1;
      }
      if ((v17 & 0x40000000) != 0) {
        unint64_t v51 = (uint64_t **)*((void *)this - 1);
      }
      else {
        unint64_t v51 = (uint64_t **)((char *)this - 32 * v18);
      }
      uint64_t v75 = **v51;
      LODWORD(v121) = 0;
      LODWORD(v119) = 0;
      unsigned int v76 = (uint64_t *)*((void *)this - 8);
      uint64_t v77 = *v76;
      uint64_t v78 = *(unsigned int *)(*v76 + 32);
      uint64_t v79 = *((unsigned int *)this + 18);
      if (v78 != v79)
      {
        if (v78 >= v79 || (llvm::ShuffleVectorInst::isIdentityWithPadding(this) & 1) == 0)
        {
          if (*(unsigned char *)(v21 + 8) == 19) {
            goto LABEL_141;
          }
          int v92 = (int *)*((void *)this + 8);
          if (llvm::ShuffleVectorInst::isExtractSubvectorMask(v92, v79, v78, (int *)&v119))
          {
            uint64_t v81 = v23;
            int v82 = 5;
            uint64_t v93 = v75;
            uint64_t v94 = v92;
            uint64_t v95 = v79;
            uint64_t v96 = v21;
            return sub_1CBA8B210(v81, v82, v93, v94, v95, v96);
          }
          if (*(unsigned char *)(v21 + 8) == 19
            || !llvm::ShuffleVectorInst::isInsertSubvectorMask(v92, v79, *(_DWORD *)(v77 + 32), &v121, (signed int *)&v119))
          {
LABEL_141:
            int v117 = 0;
            v118[0] = 0;
            if (llvm::ShuffleVectorInst::isReplicationMask(this, v118, &v117))
            {
              unsigned int v109 = *((_DWORD *)this + 18);
              LODWORD(v124) = v109;
              if (v109 > 0x40) {
                operator new[]();
              }
              unint64_t v110 = 0;
              uint64_t v123 = 0;
              if (v109)
              {
                uint64_t v111 = 0;
                uint64_t v112 = *((void *)this + 8);
                uint64_t v113 = 4 * v109;
                do
                {
                  if (*(_DWORD *)(v112 + 4 * v111) != -1)
                  {
                    v110 |= 1 << v111;
                    uint64_t v123 = (void *)v110;
                  }
                  ++v111;
                  v113 -= 4;
                }
                while (v113);
              }
              unint64_t v16 = sub_1CD41871C(v23, *(llvm::FixedVectorType **)(v75 + 24), v118[0], (llvm::Type *)v117, (llvm::APIntOps *)&v123);
              if (v124 >= 0x41 && v123) {
                MEMORY[0x1D25D9CB0](v123, 0x1000C8000313F17);
              }
            }
            else if (a5)
            {
              return 1;
            }
            else
            {
              return -1;
            }
            return v16;
          }
          int v97 = (int *)*((void *)this + 8);
          uint64_t v98 = *((unsigned int *)this + 18);
          uint64_t v99 = (llvm::FixedVectorType *)v21;
          if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12) {
            uint64_t v99 = **(llvm::FixedVectorType ***)(v21 + 16);
          }
          llvm::FixedVectorType::get(v99, (llvm::Type *)v121);
          uint64_t v96 = v100;
          uint64_t v81 = v23;
          int v82 = 4;
          uint64_t v93 = v21;
          uint64_t v94 = v97;
          uint64_t v95 = v98;
          return sub_1CBA8B210(v81, v82, v93, v94, v95, v96);
        }
        return 0;
      }
      unsigned int v80 = (int *)*((void *)this + 8);
      if (sub_1CC5D47FC(v80, *(unsigned int *)(*v76 + 32), *(_DWORD *)(*v76 + 32))) {
        return 0;
      }
      if (llvm::ShuffleVectorInst::isReverseMask(v80, v78))
      {
        uint64_t v81 = v23;
        int v82 = 1;
LABEL_202:
        uint64_t v93 = v21;
        uint64_t v94 = v80;
        uint64_t v95 = v78;
        uint64_t v96 = 0;
        return sub_1CBA8B210(v81, v82, v93, v94, v95, v96);
      }
      if (llvm::ShuffleVectorInst::isSelectMask(v80, v78))
      {
        uint64_t v81 = v23;
        int v82 = 2;
        goto LABEL_202;
      }
      if (llvm::ShuffleVectorInst::isTransposeMask(v80, v78))
      {
        uint64_t v81 = v23;
        int v82 = 3;
        goto LABEL_202;
      }
      if (llvm::ShuffleVectorInst::isZeroEltSplatMask(v80, v78))
      {
        uint64_t v81 = v23;
        int v82 = 0;
        goto LABEL_202;
      }
      if (v78)
      {
        char v101 = 0;
        char v102 = 0;
        uint64_t v103 = 4 * v78;
        unsigned int v104 = v80;
        while (1)
        {
          int v105 = *v104;
          if (*v104 != -1)
          {
            v101 |= v105 < (int)v78;
            v102 |= v105 >= (int)v78;
            if (v101 & 1) != 0 && (v102) {
              break;
            }
          }
          ++v104;
          v103 -= 4;
          if (!v103)
          {
            if (v101) {
              goto LABEL_201;
            }
            goto LABEL_184;
          }
        }
      }
      else
      {
        char v102 = 0;
LABEL_184:
        if (v102)
        {
LABEL_201:
          uint64_t v81 = v23;
          int v82 = 7;
          goto LABEL_202;
        }
      }
      if (*(unsigned char *)(v21 + 8) == 19
        || (isInsertSubvectorMask = llvm::ShuffleVectorInst::isInsertSubvectorMask(v80, v78, v78, &v121, (signed int *)&v119), uint64_t v78 = *((unsigned int *)this + 18), v80 = (int *)*((void *)this + 8), !isInsertSubvectorMask))
      {
        uint64_t v81 = v23;
        int v82 = 6;
        goto LABEL_202;
      }
      int v107 = (llvm::FixedVectorType *)v21;
      if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12) {
        int v107 = **(llvm::FixedVectorType ***)(v21 + 16);
      }
      llvm::FixedVectorType::get(v107, (llvm::Type *)v121);
      uint64_t v96 = v108;
      uint64_t v81 = v23;
      int v82 = 4;
      uint64_t v93 = v21;
      uint64_t v94 = v80;
      uint64_t v95 = v78;
      return sub_1CBA8B210(v81, v82, v93, v94, v95, v96);
    case 64:
    case 67:
      return v16;
    default:
      return 1;
  }
}

uint64_t sub_1CBA8952C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1 + 8;
  uint64_t v7 = sub_1CB90A9F8(a1 + 8, a2);
  BOOL v9 = v7 < 0;
  if (v8) {
    BOOL v9 = v8 < 0;
  }
  if (!v9)
  {
    BOOL v10 = v8 < 1;
    if (!v8) {
      BOOL v10 = v7 < 1;
    }
    if (v10) {
      return 0;
    }
  }
  int v12 = *(_DWORD *)(a2 + 16);
  if (v12 > 0x181) {
    return 1;
  }
  unsigned int v13 = *(_DWORD *)(a2 + 80);
  if (!v13) {
    return sub_1CBA8B9CC(a1, a2, a3);
  }
  uint64_t v14 = *(void *)(a2 + 8);
  int v15 = *(_DWORD *)(v14 + 8);
  if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12) {
    unint64_t v16 = *(unsigned int *)(v14 + 32) | ((unint64_t)(v15 == 19) << 32);
  }
  else {
    unint64_t v16 = 1;
  }
  uint64_t v18 = *(void *)a2;
  int v19 = *(_DWORD *)(a2 + 120);
  if (v12 <= 185)
  {
    if (v12 <= 147)
    {
      switch(v12)
      {
        case 130:
          if (v15 == 19) {
            return sub_1CB90A9F8(v6, a2);
          }
          return 1;
        case 131:
          if (v15 == 19) {
            return sub_1CB90A9F8(v6, a2);
          }
          uint64_t v48 = ***(void ***)(a2 + 72);
          uint64_t v49 = a1;
          int v50 = 5;
          goto LABEL_65;
        case 132:
          unint64_t v51 = *(uint64_t ***)(a2 + 72);
          uint64_t v52 = *v51[1];
          if (*(unsigned char *)(v52 + 8) == 19) {
            return sub_1CB90A9F8(v6, a2);
          }
          uint64_t v48 = **v51;
          uint64_t v49 = a1;
          int v50 = 4;
          return sub_1CBA8B210(v49, v50, v48, 0, 0, v52);
        case 133:
          uint64_t v48 = ***(void ***)(a2 + 72);
          uint64_t v49 = a1;
          int v50 = 1;
          goto LABEL_65;
        case 134:
          uint64_t v48 = ***(void ***)(a2 + 72);
          uint64_t v49 = a1;
          int v50 = 8;
LABEL_65:
          uint64_t v52 = *(void *)(a2 + 8);
          return sub_1CBA8B210(v49, v50, v48, 0, 0, v52);
        default:
          if (v12 == 52)
          {
            if (v16 != 1) {
              goto LABEL_108;
            }
            char v33 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 224))(*(void *)(a1 + 32));
          }
          else
          {
            if (v12 != 54 || v16 != 1) {
              goto LABEL_108;
            }
            char v33 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 216))(*(void *)(a1 + 32));
          }
          unint64_t v53 = 0;
          unint64_t v11 = 1;
          if (v33) {
            return v11;
          }
          break;
      }
      goto LABEL_118;
    }
    if ((v12 - 148) >= 2)
    {
      if (v12 == 153)
      {
        unint64_t v37 = sub_1CB87DC14(*(void *)(a1 + 32), *(void *)(a1 + 8), *(llvm::EVT **)(a2 + 8), (llvm::Type *)1);
        uint64_t v39 = v38;
        unint64_t v40 = sub_1CB87DC14(*(void *)(a1 + 32), *(void *)(a1 + 8), **(llvm::EVT ***)(a2 + 24), (llvm::Type *)1);
        if ((*(uint64_t (**)(void, unint64_t, uint64_t, unint64_t, uint64_t))(**(void **)(a1 + 32) + 104))(*(void *)(a1 + 32), v37, v39, v40, v41))
        {
          uint64_t v42 = **(uint64_t ****)(a2 + 24);
          uint64_t v43 = (llvm::Type *)*(unsigned int *)(v14 + 32);
          if (*(unsigned char *)(v14 + 8) == 19) {
            llvm::ScalableVectorType::get(v42, v43);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v42, v43);
          }
          uint64_t v45 = v44;
          uint64_t v102 = 0;
          unint64_t v103 = v44;
          LODWORD(v104) = 300;
          int v105 = v107;
          uint64_t v108 = v110;
          uint64_t v109 = 0x400000000;
          int v111 = v19;
          long long v112 = xmmword_1CD96D880;
          uint64_t v106 = 0x400000000;
          unint64_t v46 = sub_1CBA8B9CC(a1, (uint64_t)&v102, a3);
          unint64_t v47 = sub_1CBA8B020(a1, 0x35u, v45, v14, 0x24u, a3, 0);
          if (__OFADD__(v46, v47)) {
            unint64_t v11 = ((uint64_t)(v46 + v47) >> 63) ^ 0x8000000000000000;
          }
          else {
            unint64_t v11 = v46 + v47;
          }
          if (v108 != v110) {
            free(v108);
          }
          uint64_t v22 = v105;
          if (v105 != v107) {
            goto LABEL_24;
          }
        }
        else
        {
          unint64_t v54 = *(void *)(a1 + 32);
          uint64_t v55 = *(void *)(a1 + 8);
          uint64_t v56 = *(llvm::LLVMContext **)v14;
          unint64_t v57 = sub_1CB87DC14(v54, v55, (llvm::EVT *)v14, 0);
          uint64_t v59 = v58;
          uint64_t v100 = 1;
          LODWORD(v101) = 0;
          while (1)
          {
            llvm::TargetLoweringBase::getTypeConversion(v54, v56, v57, v59, (uint64_t)&v102);
            if (!(_BYTE)v102) {
              return v100;
            }
            if (v102 == 10) {
              break;
            }
            if ((v102 & 0xFB) == 2)
            {
              uint64_t __src = 2;
              LODWORD(v114) = 0;
              sub_1CB90C9D4((uint64_t)&v100, (uint64_t)&__src);
            }
            int v60 = v57;
            unint64_t v57 = v103;
            if (v60 == v103)
            {
              if (v60) {
                return v100;
              }
              uint64_t v61 = v104;
              if (v59 == v104) {
                return v100;
              }
            }
            else
            {
              uint64_t v61 = v104;
            }
            uint64_t v59 = v61;
          }
          return 0;
        }
        return v11;
      }
      if (v12 == 184)
      {
        uint64_t v89 = *(void *)(a2 + 72);
        uint64_t v90 = *(void *)(v89 + 8);
        unsigned int v91 = *(unsigned __int8 *)(*(void *)(v89 + 16) + 16);
        int v92 = (unint64_t *)(v90 + 24);
        if (*(_DWORD *)(v90 + 32) >= 0x41u) {
          int v92 = (unint64_t *)*v92;
        }
        BOOL v66 = v91 > 0x14;
        unint64_t v93 = *v92;
        unint64_t v94 = __clz(v93) ^ 0x3F;
        if (v93) {
          unsigned __int8 v70 = v94;
        }
        else {
          unsigned __int8 v70 = 0;
        }
        uint64_t v71 = a1;
        int v72 = 32;
        uint64_t v69 = *(void *)(a2 + 8);
        return sub_1CD418BEC(v71, v72, v69, v70, v66, 1, a3);
      }
      goto LABEL_108;
    }
    if (v15 != 19)
    {
      uint64_t v24 = *(uint64_t **)(a2 + 72);
      uint64_t v25 = *v24;
      uint64_t v26 = v24[1];
      uint64_t v27 = v24[2];
      LODWORD(v102) = 0;
      LODWORD(__src) = 0;
      LODWORD(v100) = 0;
      uint64_t v99 = v25;
      unsigned int OperandInfo = llvm::TargetTransformInfo::getOperandInfo(v25, &v102);
      unsigned int v29 = llvm::TargetTransformInfo::getOperandInfo(v26, &__src);
      unsigned int v30 = llvm::TargetTransformInfo::getOperandInfo(v27, &v100);
      int v31 = (llvm::Type *)v14;
      if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12) {
        int v31 = **(llvm::Type ***)(v14 + 16);
      }
      int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v31);
      if (PrimitiveSizeInBits) {
        unsigned int v98 = (PrimitiveSizeInBits & (PrimitiveSizeInBits - 1)) == 0;
      }
      else {
        unsigned int v98 = 0;
      }
      unint64_t v73 = sub_1CBA89F84(a1, 0x1Du, v14, a3, 0, 0, 0, 0, 0, 0, 0);
      unint64_t v74 = sub_1CBA89F84(a1, 0xFu, v14, a3, 0, 0, 0, 0, 0, 0, 0);
      if (__OFADD__(v73, v74)) {
        unint64_t v75 = ((uint64_t)(v73 + v74) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v75 = v73 + v74;
      }
      unint64_t v76 = sub_1CBA89F84(a1, 0x19u, v14, a3, OperandInfo, v30, v102, 0, 0, 0, 0);
      if (__OFADD__(v75, v76)) {
        unint64_t v77 = ((uint64_t)(v75 + v76) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v77 = v75 + v76;
      }
      unint64_t v78 = sub_1CBA89F84(a1, 0x1Au, v14, a3, v29, v30, __src, 0, 0, 0, 0);
      if (__OFADD__(v77, v78)) {
        unint64_t v11 = ((uint64_t)(v77 + v78) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v11 = v77 + v78;
      }
      if (v30 - 4 <= 0xFFFFFFFD)
      {
        unint64_t v79 = sub_1CBA89F84(a1, 0x16u, v14, a3, v30, 2u, v100, v98, 0, 0, 0);
        if (__OFADD__(v11, v79)) {
          unint64_t v11 = ((uint64_t)(v11 + v79) >> 63) ^ 0x8000000000000000;
        }
        else {
          v11 += v79;
        }
      }
      if (v99 != v26)
      {
        uint64_t v80 = **(void **)v14 + 1888;
        if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12)
        {
          uint64_t v95 = (llvm::Type *)*(unsigned int *)(v14 + 32);
          uint64_t v96 = (uint64_t **)(**(void **)v14 + 1888);
          if (*(_DWORD *)(v14 + 8) == 19) {
            llvm::ScalableVectorType::get(v96, v95);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v96, v95);
          }
          uint64_t v80 = v97;
        }
        unint64_t v81 = sub_1CBA8B020(a1, 0x35u, v14, v80, 0x20u, a3, 0);
        if (__OFADD__(v11, v81)) {
          unint64_t v82 = ((uint64_t)(v11 + v81) >> 63) ^ 0x8000000000000000;
        }
        else {
          unint64_t v82 = v11 + v81;
        }
        unint64_t v83 = sub_1CBA8B020(a1, 0x39u, v14, v80, 0x20u, a3, 0);
        if (__OFADD__(v82, v83)) {
          return ((uint64_t)(v82 + v83) >> 63) ^ 0x8000000000000000;
        }
        else {
          return v82 + v83;
        }
      }
      return v11;
    }
    return sub_1CB90A9F8(v6, a2);
  }
  if ((v12 - 317) <= 0xC)
  {
    if (((1 << (v12 - 61)) & 0x1FDB) != 0)
    {
      uint64_t __src = ***(void ***)(a2 + 72);
      uint64_t v102 = v18;
      unint64_t v103 = v14;
      LODWORD(v104) = v12;
      int v105 = v107;
      uint64_t v106 = 0x400000000;
      uint64_t v108 = v110;
      uint64_t v109 = 0x400000000;
      int v111 = v19;
      long long v112 = xmmword_1CD91D2E0;
      uint64_t v20 = (char *)&v114;
    }
    else
    {
      uint64_t v34 = *(uint64_t ***)(a2 + 72);
      uint64_t v36 = *v34;
      BOOL v35 = v34[1];
      uint64_t __src = *v36;
      uint64_t v114 = *v35;
      uint64_t v102 = v18;
      unint64_t v103 = v14;
      LODWORD(v104) = v12;
      int v105 = v107;
      uint64_t v106 = 0x400000000;
      uint64_t v108 = v110;
      uint64_t v109 = 0x400000000;
      int v111 = v19;
      long long v112 = xmmword_1CD91D2E0;
      uint64_t v20 = (char *)&v115;
    }
    p_src = (char *)&__src;
    goto LABEL_21;
  }
  if (v12 == 194) {
    return 4;
  }
  if (v12 == 186)
  {
    uint64_t v62 = *(void *)(a2 + 72);
    uint64_t v63 = *(void *)(v62 + 16);
    unsigned int v64 = *(unsigned __int8 *)(*(void *)(v62 + 24) + 16);
    unint64_t v65 = (unint64_t *)(v63 + 24);
    if (*(_DWORD *)(v63 + 32) >= 0x41u) {
      unint64_t v65 = (unint64_t *)*v65;
    }
    BOOL v66 = v64 > 0x14;
    unint64_t v67 = *v65;
    unint64_t v68 = __clz(v67) ^ 0x3F;
    uint64_t v69 = **(void **)(a2 + 24);
    if (v67) {
      unsigned __int8 v70 = v68;
    }
    else {
      unsigned __int8 v70 = 0;
    }
    uint64_t v71 = a1;
    int v72 = 33;
    return sub_1CD418BEC(v71, v72, v69, v70, v66, 1, a3);
  }
LABEL_108:
  unint64_t v53 = 0;
  unint64_t v11 = 1;
  if (!HIDWORD(v16) && v16 >= 2)
  {
    if (v15 == 7)
    {
      unint64_t v11 = 0;
      unint64_t v84 = 0;
    }
    else
    {
      unint64_t v84 = sub_1CBA65E40(a1, *(void *)(a2 + 8), 1, 0);
      unint64_t v11 = v85 == 1;
      unsigned int v13 = *(_DWORD *)(a2 + 80);
    }
    unint64_t v86 = sub_1CBA8D710(a1, *(void *)(a2 + 72), v13, *(void *)(a2 + 24));
    if (v87 == 1) {
      unint64_t v11 = 1;
    }
    if (__OFADD__(v84, v86)) {
      unint64_t v53 = ((uint64_t)(v84 + v86) >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v53 = v84 + v86;
    }
  }
LABEL_118:
  p_src = *(char **)(a2 + 24);
  uint64_t v88 = *(unsigned int *)(a2 + 32);
  uint64_t v102 = v18;
  unint64_t v103 = v14;
  LODWORD(v104) = v12;
  int v105 = v107;
  uint64_t v106 = 0x400000000;
  uint64_t v108 = v110;
  uint64_t v109 = 0x400000000;
  int v111 = v19;
  uint64_t v20 = &p_src[8 * v88];
  *(void *)&long long v112 = v53;
  *((void *)&v112 + 1) = v11;
LABEL_21:
  sub_1CC1587C8((uint64_t)&v105, (uint64_t)v107, p_src, v20);
  unint64_t v11 = sub_1CBA8B9CC(a1, (uint64_t)&v102, a3);
  if (v108 != v110) {
    free(v108);
  }
  uint64_t v22 = v105;
  if (v105 != v107) {
LABEL_24:
  }
    free(v22);
  return v11;
}

unint64_t sub_1CBA89F84(uint64_t a1, unsigned int a2, uint64_t a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t a9, unint64_t a10, uint64_t a11)
{
  v52[7] = *MEMORY[0x1E4F143B8];
  int v11 = 0;
  unsigned int v12 = 0;
  switch(a2)
  {
    case 0xCu:
      int v11 = 0;
      unsigned int v12 = 222;
      break;
    case 0xDu:
      int v11 = 0;
      unsigned int v12 = 56;
      break;
    case 0xEu:
      int v11 = 0;
      unsigned int v12 = 96;
      break;
    case 0xFu:
      int v11 = 0;
      unsigned int v12 = 57;
      break;
    case 0x10u:
      int v11 = 0;
      unsigned int v12 = 97;
      break;
    case 0x11u:
      int v11 = 0;
      unsigned int v12 = 58;
      break;
    case 0x12u:
      int v11 = 0;
      unsigned int v12 = 98;
      break;
    case 0x13u:
      int v11 = 0;
      unsigned int v12 = 60;
      break;
    case 0x14u:
      int v11 = 0;
      unsigned int v12 = 59;
      break;
    case 0x15u:
      int v11 = 0;
      unsigned int v12 = 99;
      break;
    case 0x16u:
      int v11 = 0;
      unsigned int v12 = 62;
      break;
    case 0x17u:
      unsigned int v12 = 61;
      int v11 = 1;
      break;
    case 0x18u:
      int v11 = 0;
      unsigned int v12 = 100;
      break;
    case 0x19u:
      int v11 = 0;
      unsigned int v12 = 175;
      break;
    case 0x1Au:
      int v11 = 0;
      unsigned int v12 = 177;
      break;
    case 0x1Bu:
      int v11 = 0;
      unsigned int v12 = 176;
      break;
    case 0x1Cu:
      int v11 = 0;
      unsigned int v12 = 171;
      break;
    case 0x1Du:
      int v11 = 0;
      unsigned int v12 = 172;
      break;
    case 0x1Eu:
      int v11 = 0;
      unsigned int v12 = 173;
      break;
    case 0x20u:
      int v11 = 0;
      unsigned int v12 = 253;
      break;
    case 0x21u:
      int v11 = 0;
      unsigned int v12 = 254;
      break;
    case 0x26u:
      int v11 = 0;
      unsigned int v12 = 201;
      break;
    case 0x27u:
      int v11 = 0;
      unsigned int v12 = 199;
      break;
    case 0x28u:
      int v11 = 0;
      unsigned int v12 = 198;
      break;
    case 0x29u:
      int v11 = 0;
      unsigned int v12 = 209;
      break;
    case 0x2Au:
      int v11 = 0;
      unsigned int v12 = 208;
      break;
    case 0x2Bu:
      int v11 = 0;
      unsigned int v12 = 203;
      break;
    case 0x2Cu:
      int v11 = 0;
      unsigned int v12 = 202;
      break;
    case 0x2Du:
      int v11 = 0;
      unsigned int v12 = 212;
      break;
    case 0x2Eu:
      int v11 = 0;
      unsigned int v12 = 215;
      break;
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
      int v11 = 0;
      unsigned int v12 = 216;
      break;
    case 0x32u:
      int v11 = 0;
      unsigned int v12 = 217;
      break;
    case 0x35u:
    case 0x36u:
      int v11 = 0;
      unsigned int v12 = 193;
      break;
    case 0x39u:
      int v11 = 0;
      unsigned int v12 = 190;
      break;
    case 0x3Du:
      int v11 = 0;
      unsigned int v12 = 148;
      break;
    case 0x3Eu:
      int v11 = 0;
      unsigned int v12 = 147;
      break;
    case 0x3Fu:
      int v11 = 0;
      unsigned int v12 = 153;
      break;
    case 0x40u:
    case 0x41u:
      int v11 = 0;
      unsigned int v12 = 55;
      break;
    case 0x43u:
      int v11 = 0;
      unsigned int v12 = 52;
      break;
    default:
      break;
  }
  if (!a4)
  {
    uint64_t v14 = *(llvm::TargetLoweringBase **)(a1 + 32);
    llvm::TargetLoweringBase::getTypeLegalizationCost(v14, *(const llvm::DataLayout **)(a1 + 8), (llvm::LLVMContext **)a3, (uint64_t)&v47);
    uint64_t v38 = a3;
    int v16 = *(_DWORD *)(a3 + 8);
    int v17 = *(_DWORD *)(a3 + 8) & 0xFE;
    unsigned int v18 = v16;
    if (v17 == 18) {
      unsigned int v18 = *(unsigned __int8 *)(**(void **)(a3 + 16) + 8);
    }
    BOOL v19 = v18 >= 7;
    uint64_t v20 = 1;
    if (!v19) {
      uint64_t v20 = 2;
    }
    unint64_t v21 = v20;
    uint64_t v45 = v20;
    LODWORD(v46) = 0;
    if (v48 && (v48 == 1 || *((void *)v14 + v48 + 12)))
    {
      unsigned int v22 = *((unsigned __int8 *)v14 + 390 * v48 + v12 + 3862);
      if (v22 <= 1)
      {
        long long v23 = v47;
LABEL_46:
        *(_OWORD *)unint64_t v51 = v23;
        sub_1CB90C9D4((uint64_t)v51, (uint64_t)&v45);
        return (unint64_t)v51[0];
      }
      if (*((void *)v14 + v48 + 12)) {
        BOOL v24 = v22 == 2;
      }
      else {
        BOOL v24 = 1;
      }
      if (!v24)
      {
        uint64_t v49 = 2;
        int v50 = 0;
        *(_OWORD *)unint64_t v51 = v47;
        sub_1CB90C9D4((uint64_t)v51, (uint64_t)&v49);
        long long v23 = *(_OWORD *)v51;
        goto LABEL_46;
      }
    }
    if (v12 - 61 > 1) {
      goto LABEL_71;
    }
    uint64_t v25 = 65;
    if (!v11) {
      uint64_t v25 = 66;
    }
    if (!v48 || v48 != 1 && !*((void *)v14 + v48 + 12)) {
      goto LABEL_71;
    }
    if ((*((unsigned char *)v14 + 390 * v48 + v25 + 3862) & 0xFB) == 0) {
      goto LABEL_75;
    }
    uint64_t v26 = 59;
    if (!v11) {
      uint64_t v26 = 60;
    }
    if ((*((unsigned char *)v14 + 390 * v48 + v26 + 3862) & 0xFB) == 0)
    {
LABEL_75:
      if (v11) {
        uint64_t v27 = 20;
      }
      else {
        uint64_t v27 = 19;
      }
      uint64_t v28 = sub_1CBA89F84(a1, v27, v38, 0, a5, a6, a7, a8, 0, 0, 0);
      uint64_t v29 = sub_1CBA89F84(a1, 17, v38, 0, 0, 0, 0, 0, 0, 0, 0);
      uint64_t v30 = sub_1CBA89F84(a1, 15, v38, 0, 0, 0, 0, 0, 0, 0, 0);
      unint64_t v31 = v28 + v29;
      if (__OFADD__(v28, v29)) {
        unint64_t v31 = ((v28 + v29) >> 63) ^ 0x8000000000000000;
      }
      BOOL v32 = __OFADD__(v31, v30);
      uint64_t v33 = v31 + v30;
      if (v32) {
        return (v33 >> 63) ^ 0x8000000000000000;
      }
      else {
        return v33;
      }
    }
    else
    {
LABEL_71:
      if (v16 == 19)
      {
        return 0;
      }
      else if (v16 == 18)
      {
        uint64_t v34 = v38;
        if (v17 == 18) {
          uint64_t v34 = **(void **)(v38 + 16);
        }
        v44[0] = sub_1CBA89F84(a1, a2, v34, 0, a5, a6, a7, a8, a9, a10, a11);
        v44[1] = v35;
        v51[0] = v52;
        v51[1] = (void *)0x600000000;
        sub_1CB90CB08((uint64_t)v51, a10, v38);
        unint64_t v36 = sub_1CD41925C(a1, v38, a9, a10, (uint64_t)v51[0]);
        uint64_t v49 = *(unsigned int *)(v38 + 32);
        int v50 = 0;
        sub_1CB90C9D4((uint64_t)&v49, (uint64_t)v44);
        if (__OFADD__(v36, v49)) {
          unint64_t v21 = ((uint64_t)(v36 + v49) >> 63) ^ 0x8000000000000000;
        }
        else {
          unint64_t v21 = v36 + v49;
        }
        if (v51[0] != v52) {
          free(v51[0]);
        }
      }
    }
    return v21;
  }
  if (a2 - 19 >= 6) {
    return 1;
  }
  else {
    return 4;
  }
}

uint64_t sub_1CBA8A664(uint64_t a1, uint64_t a2, llvm::Type ***a3, llvm::Type ***a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v10 = (uint64_t)a4;
  int v11 = a3;
  uint64_t v14 = (uint64_t *)(a1 + 8);
  uint64_t v15 = sub_1CB90CBC0((uint64_t *)(a1 + 8), a2, a3, a4);
  BOOL v17 = v15 < 0;
  if (v16) {
    BOOL v17 = v16 < 0;
  }
  if (!v17)
  {
    BOOL v18 = v16 < 1;
    if (!v16) {
      BOOL v18 = v15 < 1;
    }
    if (v18) {
      return 0;
    }
  }
  unsigned int v99 = a5;
  unsigned int v96 = a6;
  unint64_t v20 = *(void *)(a1 + 32);
  uint64_t v100 = qword_1CDB15698[(int)a2 - 1];
  uint64_t v101 = a7;
  unint64_t v21 = *(llvm::LLVMContext **)v10;
  unint64_t v22 = sub_1CB87DC14(v20, *(void *)(a1 + 8), (llvm::EVT *)v10, 0);
  uint64_t v24 = v23;
  *(void *)&long long v102 = 1;
  DWORD2(v102) = 0;
  while (1)
  {
    int v25 = v22;
    llvm::TargetLoweringBase::getTypeConversion(v20, v21, v22, v24, (uint64_t)&v106);
    if (!(_BYTE)v106)
    {
LABEL_18:
      long long v27 = v102;
      goto LABEL_19;
    }
    if (v106 == 10) {
      break;
    }
    if ((v106 & 0xFB) == 2)
    {
      *(void *)&long long v104 = 2;
      DWORD2(v104) = 0;
      sub_1CB90C9D4((uint64_t)&v102, (uint64_t)&v104);
    }
    unint64_t v22 = *((void *)&v106 + 1);
    if (v25 == BYTE8(v106))
    {
      if (v25) {
        goto LABEL_18;
      }
      uint64_t v26 = v107;
      if (v24 == v107) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v26 = v107;
    }
    uint64_t v24 = v26;
  }
  if (!v25) {
    LOBYTE(v25) = 6;
  }
  long long v27 = xmmword_1CD96D880;
LABEL_19:
  long long v104 = v27;
  v105[0] = v25;
  uint64_t v28 = (llvm::LLVMContext *)*v11;
  unint64_t v29 = sub_1CB87DC14(v20, *v14, (llvm::EVT *)v11, 0);
  uint64_t v31 = v30;
  *(void *)&long long v108 = 1;
  DWORD2(v108) = 0;
  while (1)
  {
    int v32 = v29;
    llvm::TargetLoweringBase::getTypeConversion(v20, v28, v29, v31, (uint64_t)&v106);
    if (!(_BYTE)v106)
    {
LABEL_29:
      long long v34 = v108;
      goto LABEL_30;
    }
    if (v106 == 10) {
      break;
    }
    if ((v106 & 0xFB) == 2)
    {
      *(void *)&long long v102 = 2;
      DWORD2(v102) = 0;
      sub_1CB90C9D4((uint64_t)&v108, (uint64_t)&v102);
    }
    unint64_t v29 = *((void *)&v106 + 1);
    if (v32 == BYTE8(v106))
    {
      if (v32) {
        goto LABEL_29;
      }
      uint64_t v33 = v107;
      if (v31 == v107) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v33 = v107;
    }
    uint64_t v31 = v33;
  }
  if (!v32) {
    LOBYTE(v32) = 6;
  }
  long long v34 = xmmword_1CD96D880;
LABEL_30:
  long long v102 = v34;
  v103[0] = v32;
  uint64_t v98 = sub_1CB87E200(v105);
  int v36 = v35;
  uint64_t v97 = sub_1CB87E200(v103);
  int v95 = v38;
  unsigned int v39 = *(_DWORD *)(v10 + 8);
  unsigned int v40 = *((_DWORD *)v11 + 2);
  switch((int)a2)
  {
    case '&':
      char v41 = (*(uint64_t (**)(unint64_t, void, void, void, void))(*(void *)v20 + 1160))(v20, v105[0], 0, v103[0], 0);
      uint64_t result = 0;
      if ((v41 & 1) == 0) {
        goto LABEL_32;
      }
      return result;
    case '\'':
      char v44 = (*(uint64_t (**)(unint64_t, void, void, void, void))(*(void *)v20 + 1192))(v20, v105[0], 0, v103[0], 0);
      uint64_t result = 0;
      if ((v44 & 1) == 0) {
        goto LABEL_50;
      }
      return result;
    case '(':
LABEL_50:
      if (v101 && (sub_1CB90CE98(*(void *)(a1 + 32), v101, v37) & 1) != 0) {
        return 0;
      }
      if (v99 == 1)
      {
        unsigned __int8 EVT = llvm::EVT::getEVT((llvm::EVT *)v11, 0, v37);
        unsigned __int8 v47 = llvm::EVT::getEVT((llvm::EVT *)v10, 0, v46);
        BOOL v48 = (uint64_t)v102 < (uint64_t)v104;
        if (DWORD2(v102) != DWORD2(v104)) {
          BOOL v48 = SDWORD2(v102) < SDWORD2(v104);
        }
        if (!v48)
        {
          BOOL v49 = DWORD2(v102) == DWORD2(v104) ? (uint64_t)v104 >= (uint64_t)v102 : SDWORD2(v104) >= SDWORD2(v102);
          if (v49 && EVT && v47)
          {
            __int16 v50 = a2 == 39 ? -4096 : 3840;
            if (((unsigned __int16)v50 & *(_WORD *)(v20 + 358 * EVT + 2 * v47 + 73672)) == 0) {
              return 0;
            }
          }
        }
      }
      goto LABEL_69;
    case '.':
      if (v101 && (sub_1CB90CE98(*(void *)(a1 + 32), v101, v37) & 1) != 0) {
        return 0;
      }
      goto LABEL_69;
    case '1':
LABEL_32:
      BOOL v42 = (uint64_t)v104 < (uint64_t)v102;
      if (DWORD2(v104) != DWORD2(v102)) {
        BOOL v42 = SDWORD2(v104) < SDWORD2(v102);
      }
      if (!v42)
      {
        BOOL v43 = DWORD2(v104) == DWORD2(v102) ? (uint64_t)v102 < (uint64_t)v104 : SDWORD2(v102) < SDWORD2(v104);
        if (!v43 && ((v39 & 0xFD) == 13) == ((v40 & 0xFD) == 13) && v98 == v97 && v36 == v95) {
          return 0;
        }
      }
      goto LABEL_69;
    case '2':
      if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12) {
        unsigned int v39 = *(_DWORD *)(**(void **)(v10 + 16) + 8);
      }
      if ((v11[1] & 0xFE) == 0x12) {
        unsigned int v40 = *((_DWORD *)*v11[2] + 2);
      }
      if ((*(uint64_t (**)(unint64_t, void, void))(*(void *)v20 + 840))(v20, v39 >> 8, v40 >> 8))return 0; {
      goto LABEL_69;
      }
    default:
LABEL_69:
      int v51 = v36;
      int v52 = *(_DWORD *)(v10 + 8) & 0xFE;
      if (v52 == 18) {
        uint64_t v53 = v10;
      }
      else {
        uint64_t v53 = 0;
      }
      int v54 = v11[1] & 0xFE;
      if (v54 == 18) {
        uint64_t v55 = (uint64_t)v11;
      }
      else {
        uint64_t v55 = 0;
      }
      uint64_t result = v104;
      BOOL v56 = (uint64_t)v104 < (uint64_t)v102;
      if (DWORD2(v104) != DWORD2(v102)) {
        BOOL v56 = SDWORD2(v104) < SDWORD2(v102);
      }
      if (!v56)
      {
        BOOL v57 = SDWORD2(v102) >= SDWORD2(v104);
        if (DWORD2(v104) == DWORD2(v102)) {
          BOOL v57 = (uint64_t)v102 >= (uint64_t)v104;
        }
        if (v57
          && v103[0]
          && (v103[0] == 1 || *(void *)(v20 + 8 * v103[0] + 96))
          && *(unsigned __int8 *)(v20 + 390 * v103[0] + v100 + 3862) <= 1u)
        {
          return result;
        }
      }
      if (v52 == 18 || v54 == 18)
      {
        if (v52 == 18 && v54 == 18)
        {
          if (!v56)
          {
            BOOL v58 = SDWORD2(v102) >= SDWORD2(v104);
            if (DWORD2(v104) == DWORD2(v102)) {
              BOOL v58 = (uint64_t)v102 >= (uint64_t)v104;
            }
            if (v58 && v98 == v97 && v51 == v95)
            {
              if (a2 == 40)
              {
                uint64_t v94 = 2;
              }
              else
              {
                if (a2 == 39) {
                  return result;
                }
                if (!v103[0]
                  || !*(void *)(v20 + 8 * v103[0] + 96)
                  || *(unsigned char *)(v20 + 390 * v103[0] + v100 + 3862) == 2)
                {
                  goto LABEL_106;
                }
                uint64_t v94 = 1;
              }
              *(void *)&long long v108 = v94;
              DWORD2(v108) = 0;
              long long v106 = v104;
              sub_1CB90C9D4((uint64_t)&v106, (uint64_t)&v108);
              return v106;
            }
          }
LABEL_106:
          uint64_t v59 = *(llvm::LLVMContext **)v10;
          unint64_t v60 = sub_1CB87DC14(v20, *v14, (llvm::EVT *)v10, 0);
          llvm::TargetLoweringBase::getTypeConversion(v20, v59, v60, v61, (uint64_t)&v106);
          int v62 = v106;
          uint64_t v63 = (llvm::LLVMContext *)*v11;
          unint64_t v64 = sub_1CB87DC14(v20, *v14, (llvm::EVT *)v11, 0);
          llvm::TargetLoweringBase::getTypeConversion(v20, v63, v64, v65, (uint64_t)&v106);
          int v67 = v106;
          if (v62 == 6 || v106 == 6)
          {
            unsigned int v68 = *(_DWORD *)(v53 + 32);
            BOOL v69 = v68 && *(unsigned char *)(v53 + 8) == 19;
            BOOL v70 = v69;
            if (v68 > 1 || v70)
            {
              unsigned int v71 = *(_DWORD *)(v55 + 32);
              int v72 = *(unsigned __int8 *)(v55 + 8);
              BOOL v73 = v71 && v72 == 19;
              BOOL v74 = v73;
              if (v71 > 1 || v74)
              {
                unint64_t v83 = *(uint64_t ***)(v55 + 24);
                unint64_t v84 = (llvm::Type *)(v71 >> 1);
                if (v72 == 19) {
                  llvm::ScalableVectorType::get(v83, v84);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v83, v84);
                }
                uint64_t v86 = v85;
                int v87 = *(uint64_t ***)(v53 + 24);
                uint64_t v88 = (llvm::Type *)(*(_DWORD *)(v53 + 32) >> 1);
                if (*(unsigned char *)(v53 + 8) == 19) {
                  v90.n128_f64[0] = llvm::ScalableVectorType::get(v87, v88);
                }
                else {
                  v90.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v87, v88);
                }
                BOOL v92 = v62 != 6 || v67 != 6;
                *(void *)&long long v108 = sub_1CBA8A664(a1, a2, v86, v89, v99, v96, v101, v90);
                *((void *)&v108 + 1) = v93;
                *(void *)&long long v106 = 2;
                DWORD2(v106) = 0;
                sub_1CB90C9D4((uint64_t)&v106, (uint64_t)&v108);
                BOOL v77 = __OFADD__(v92, (void)v106);
                uint64_t v78 = v92 + v106;
                unint64_t v82 = 0x7FFFFFFFFFFFFFFFLL;
                goto LABEL_139;
              }
            }
          }
          if (*(unsigned char *)(v55 + 8) == 19) {
            return 0;
          }
          uint64_t v79 = *(unsigned int *)(v55 + 32);
          if ((v11[1] & 0xFE) == 0x12) {
            int v11 = (llvm::Type ***)*v11[2];
          }
          if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12) {
            uint64_t v10 = **(void **)(v10 + 16);
          }
          *(void *)&long long v108 = sub_1CBA8A664(a1, a2, v11, v10, v99, v96, v101, v66);
          *((void *)&v108 + 1) = v80;
          unint64_t v81 = sub_1CBA65E40(a1, v55, 1, 1);
          *(void *)&long long v106 = v79;
          DWORD2(v106) = 0;
          sub_1CB90C9D4((uint64_t)&v106, (uint64_t)&v108);
          BOOL v77 = __OFADD__(v81, (void)v106);
          uint64_t v78 = v81 + v106;
LABEL_138:
          unint64_t v82 = (v78 >> 63) ^ 0x8000000000000000;
LABEL_139:
          if (v77) {
            return v82;
          }
          else {
            return v78;
          }
        }
        if (v52 == 18)
        {
          unint64_t v75 = sub_1CBA65E40(a1, v10, 0, 1);
          if (v55)
          {
LABEL_129:
            unint64_t v76 = sub_1CBA65E40(a1, v55, 1, 0);
LABEL_132:
            BOOL v77 = __OFADD__(v75, v76);
            uint64_t v78 = v75 + v76;
            goto LABEL_138;
          }
        }
        else
        {
          unint64_t v75 = 0;
          if (v55) {
            goto LABEL_129;
          }
        }
        unint64_t v76 = 0;
        goto LABEL_132;
      }
      if (!v103[0] || !*(void *)(v20 + 8 * v103[0] + 96)) {
        return 4;
      }
      if (*(unsigned char *)(v20 + 390 * v103[0] + v100 + 3862) == 2) {
        return 4;
      }
      return 1;
  }
}

unint64_t sub_1CBA8B020(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7)
{
  if (a6) {
    return 1;
  }
  uint64_t v27 = v7;
  uint64_t v28 = v8;
  uint64_t v10 = *(llvm::TargetLoweringBase **)(a1 + 32);
  unsigned int v11 = llvm::TargetLoweringBase::InstructionOpcodeToISD(v10, a2);
  if (v11 == 190)
  {
    if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
      unsigned int v11 = 191;
    }
    else {
      unsigned int v11 = 190;
    }
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(v10, *(const llvm::DataLayout **)(a1 + 8), (llvm::LLVMContext **)a3, (uint64_t)&v24);
  int v12 = *(_DWORD *)(a3 + 8) & 0xFE;
  if (v12 == 18)
  {
    if (v25 - 15 >= 0x9C) {
      goto LABEL_9;
    }
  }
  else if (!v25)
  {
    return 1;
  }
  if (*((void *)v10 + v25 + 12) && (v11 > 0x185 || *((unsigned char *)v10 + 390 * v25 + v11 + 3862) != 2))
  {
    uint64_t v22 = 1;
    LODWORD(v23) = 0;
    long long v26 = v24;
    sub_1CB90C9D4((uint64_t)&v26, (uint64_t)&v22);
    return v26;
  }
  if (v12 != 18) {
    return 1;
  }
LABEL_9:
  uint64_t v13 = *(unsigned int *)(a3 + 32);
  if (a4)
  {
    if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
      a4 = **(void **)(a4 + 16);
    }
  }
  else
  {
    a4 = 0;
  }
  uint64_t v22 = sub_1CBA8B020(a1, a2, **(void **)(a3 + 16), a4, a5, 0, a7);
  uint64_t v23 = v14;
  unint64_t v15 = sub_1CBA65E40(a1, a3, 1, 0);
  *(void *)&long long v26 = v13;
  DWORD2(v26) = 0;
  sub_1CB90C9D4((uint64_t)&v26, (uint64_t)&v22);
  if (__OFADD__(v15, (void)v26)) {
    return ((uint64_t)(v15 + v26) >> 63) ^ 0x8000000000000000;
  }
  else {
    return v15 + v26;
  }
}

unint64_t sub_1CBA8B210(uint64_t a1, int a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  if (a5)
  {
    uint64_t v10 = 4 * a5;
    unsigned int v11 = a4;
    while (*v11 < 2 * (int)a5)
    {
      ++v11;
      v10 -= 4;
      if (!v10)
      {
        switch(a2)
        {
          case 1:
          case 2:
          case 3:
          case 6:
          case 8:
            goto LABEL_32;
          case 4:
            return sub_1CD3F6F74(a1, a3, a6);
          case 5:
            goto LABEL_67;
          case 7:
            if ((llvm::ShuffleVectorInst::isReverseMask(a4, a5) & 1) == 0
              && (llvm::ShuffleVectorInst::isZeroEltSplatMask(a4, a5) & 1) != 0)
            {
              goto LABEL_8;
            }
            goto LABEL_32;
          default:
            goto LABEL_8;
        }
      }
    }
  }
  switch(a2)
  {
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 8:
LABEL_32:
      unint64_t v12 = 0;
      if (!a3 || *(unsigned char *)(a3 + 8) != 18) {
        return v12;
      }
      int v32 = *(_DWORD *)(a3 + 32);
      if (v32 < 1) {
        return 0;
      }
      int v33 = 0;
      unint64_t v12 = 0;
      do
      {
        long long v34 = (llvm::EVT *)a3;
        if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
          long long v34 = **(llvm::EVT ***)(a3 + 16);
        }
        unint64_t v35 = *(void *)(a1 + 32);
        int v36 = *(llvm::LLVMContext **)v34;
        unint64_t v37 = sub_1CB87DC14(v35, *(void *)(a1 + 8), v34, 0);
        uint64_t v39 = v38;
        uint64_t v85 = 1;
        int v86 = 0;
        while (1)
        {
          llvm::TargetLoweringBase::getTypeConversion(v35, v36, v37, v39, (uint64_t)v82);
          if (!v82[0])
          {
LABEL_40:
            uint64_t v40 = v85;
            goto LABEL_41;
          }
          if (v82[0] == 10) {
            break;
          }
          if ((v82[0] & 0xFB) == 2)
          {
            uint64_t v87 = 2;
            int v88 = 0;
            sub_1CB90C9D4((uint64_t)&v85, (uint64_t)&v87);
          }
          int v51 = v37;
          unint64_t v37 = v83;
          if (v51 == v83)
          {
            if (v51) {
              goto LABEL_40;
            }
            uint64_t v52 = v84;
            if (v39 == v84) {
              goto LABEL_40;
            }
          }
          else
          {
            uint64_t v52 = v84;
          }
          uint64_t v39 = v52;
        }
        uint64_t v40 = 0;
LABEL_41:
        BOOL v28 = __OFADD__(v12, v40);
        uint64_t v41 = v12 + v40;
        if (v28) {
          unint64_t v42 = (v41 >> 63) ^ 0x8000000000000000;
        }
        else {
          unint64_t v42 = v41;
        }
        unint64_t v43 = *(void *)(a1 + 32);
        char v44 = (llvm::EVT *)a3;
        if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
          char v44 = **(llvm::EVT ***)(a3 + 16);
        }
        uint64_t v45 = *(llvm::LLVMContext **)v44;
        unint64_t v46 = sub_1CB87DC14(*(void *)(a1 + 32), *(void *)(a1 + 8), v44, 0);
        uint64_t v48 = v47;
        uint64_t v85 = 1;
        int v86 = 0;
        while (1)
        {
          llvm::TargetLoweringBase::getTypeConversion(v43, v45, v46, v48, (uint64_t)v82);
          if (!v82[0])
          {
LABEL_48:
            uint64_t v49 = v85;
            goto LABEL_49;
          }
          if (v82[0] == 10) {
            break;
          }
          if ((v82[0] & 0xFB) == 2)
          {
            uint64_t v87 = 2;
            int v88 = 0;
            sub_1CB90C9D4((uint64_t)&v85, (uint64_t)&v87);
          }
          int v53 = v46;
          unint64_t v46 = v83;
          if (v53 == v83)
          {
            if (v53) {
              goto LABEL_48;
            }
            uint64_t v54 = v84;
            if (v48 == v84) {
              goto LABEL_48;
            }
          }
          else
          {
            uint64_t v54 = v84;
          }
          uint64_t v48 = v54;
        }
        uint64_t v49 = 0;
LABEL_49:
        BOOL v28 = __OFADD__(v42, v49);
        uint64_t v50 = v42 + v49;
        if (v28) {
          unint64_t v12 = (v50 >> 63) ^ 0x8000000000000000;
        }
        else {
          unint64_t v12 = v50;
        }
        ++v33;
      }
      while (v33 != v32);
      return v12;
    case 4:
      return sub_1CD3F6F74(a1, a3, a6);
    case 5:
LABEL_67:
      int v55 = *(_DWORD *)(a6 + 32);
      if (!v55) {
        return 0;
      }
      int v56 = 0;
      unint64_t v12 = 0;
      do
      {
        BOOL v57 = (llvm::EVT *)a3;
        if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
          BOOL v57 = **(llvm::EVT ***)(a3 + 16);
        }
        unint64_t v58 = *(void *)(a1 + 32);
        uint64_t v59 = *(llvm::LLVMContext **)v57;
        unint64_t v60 = sub_1CB87DC14(v58, *(void *)(a1 + 8), v57, 0);
        uint64_t v62 = v61;
        uint64_t v85 = 1;
        int v86 = 0;
        while (1)
        {
          llvm::TargetLoweringBase::getTypeConversion(v58, v59, v60, v62, (uint64_t)v82);
          if (!v82[0])
          {
LABEL_73:
            uint64_t v63 = v85;
            goto LABEL_74;
          }
          if (v82[0] == 10) {
            break;
          }
          if ((v82[0] & 0xFB) == 2)
          {
            uint64_t v87 = 2;
            int v88 = 0;
            sub_1CB90C9D4((uint64_t)&v85, (uint64_t)&v87);
          }
          int v77 = v60;
          unint64_t v60 = v83;
          if (v77 == v83)
          {
            if (v77) {
              goto LABEL_73;
            }
            uint64_t v78 = v84;
            if (v62 == v84) {
              goto LABEL_73;
            }
          }
          else
          {
            uint64_t v78 = v84;
          }
          uint64_t v62 = v78;
        }
        uint64_t v63 = 0;
LABEL_74:
        BOOL v28 = __OFADD__(v12, v63);
        uint64_t v64 = v12 + v63;
        if (v28) {
          unint64_t v65 = (v64 >> 63) ^ 0x8000000000000000;
        }
        else {
          unint64_t v65 = v64;
        }
        unint64_t v66 = *(void *)(a1 + 32);
        int v67 = (llvm::EVT *)a6;
        if ((*(_DWORD *)(a6 + 8) & 0xFE) == 0x12) {
          int v67 = **(llvm::EVT ***)(a6 + 16);
        }
        unsigned int v68 = *(llvm::LLVMContext **)v67;
        unint64_t v69 = sub_1CB87DC14(*(void *)(a1 + 32), *(void *)(a1 + 8), v67, 0);
        uint64_t v71 = v70;
        uint64_t v85 = 1;
        int v86 = 0;
        while (1)
        {
          llvm::TargetLoweringBase::getTypeConversion(v66, v68, v69, v71, (uint64_t)v82);
          if (!v82[0])
          {
LABEL_81:
            uint64_t v72 = v85;
            goto LABEL_82;
          }
          if (v82[0] == 10) {
            break;
          }
          if ((v82[0] & 0xFB) == 2)
          {
            uint64_t v87 = 2;
            int v88 = 0;
            sub_1CB90C9D4((uint64_t)&v85, (uint64_t)&v87);
          }
          int v79 = v69;
          unint64_t v69 = v83;
          if (v79 == v83)
          {
            if (v79) {
              goto LABEL_81;
            }
            uint64_t v80 = v84;
            if (v71 == v84) {
              goto LABEL_81;
            }
          }
          else
          {
            uint64_t v80 = v84;
          }
          uint64_t v71 = v80;
        }
        uint64_t v72 = 0;
LABEL_82:
        BOOL v28 = __OFADD__(v65, v72);
        uint64_t v73 = v65 + v72;
        if (v28) {
          unint64_t v12 = (v73 >> 63) ^ 0x8000000000000000;
        }
        else {
          unint64_t v12 = v73;
        }
        ++v56;
      }
      while (v56 != v55);
      return v12;
    default:
LABEL_8:
      unint64_t v12 = 0;
      if (!a3 || *(unsigned char *)(a3 + 8) != 18) {
        return v12;
      }
      unint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = **(llvm::EVT ***)(a3 + 16);
      unint64_t v15 = *(llvm::LLVMContext **)v14;
      unint64_t v16 = sub_1CB87DC14(v13, *(void *)(a1 + 8), v14, 0);
      uint64_t v18 = v17;
      uint64_t v85 = 1;
      int v86 = 0;
      while (2)
      {
        llvm::TargetLoweringBase::getTypeConversion(v13, v15, v16, v18, (uint64_t)v82);
        if (!v82[0]) {
          goto LABEL_12;
        }
        if (v82[0] == 10)
        {
          unint64_t v12 = 0;
        }
        else
        {
          if ((v82[0] & 0xFB) == 2)
          {
            uint64_t v87 = 2;
            int v88 = 0;
            sub_1CB90C9D4((uint64_t)&v85, (uint64_t)&v87);
          }
          int v75 = v16;
          unint64_t v16 = v83;
          if (v75 != v83)
          {
            uint64_t v76 = v84;
LABEL_94:
            uint64_t v18 = v76;
            continue;
          }
          if (!v75)
          {
            uint64_t v76 = v84;
            if (v18 != v84) {
              goto LABEL_94;
            }
          }
LABEL_12:
          unint64_t v12 = v85;
        }
        break;
      }
      int v19 = *(_DWORD *)(a3 + 32);
      if (v19 >= 1)
      {
        for (int i = 0; i != v19; ++i)
        {
          unint64_t v21 = (llvm::EVT *)a3;
          if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
            unint64_t v21 = **(llvm::EVT ***)(a3 + 16);
          }
          unint64_t v22 = *(void *)(a1 + 32);
          uint64_t v23 = *(llvm::LLVMContext **)v21;
          unint64_t v24 = sub_1CB87DC14(v22, *(void *)(a1 + 8), v21, 0);
          uint64_t v26 = v25;
          uint64_t v85 = 1;
          int v86 = 0;
          while (1)
          {
            llvm::TargetLoweringBase::getTypeConversion(v22, v23, v24, v26, (uint64_t)v82);
            if (!v82[0])
            {
LABEL_19:
              uint64_t v27 = v85;
              goto LABEL_20;
            }
            if (v82[0] == 10) {
              break;
            }
            if ((v82[0] & 0xFB) == 2)
            {
              uint64_t v87 = 2;
              int v88 = 0;
              sub_1CB90C9D4((uint64_t)&v85, (uint64_t)&v87);
            }
            int v30 = v24;
            unint64_t v24 = v83;
            if (v30 == v83)
            {
              if (v30) {
                goto LABEL_19;
              }
              uint64_t v31 = v84;
              if (v26 == v84) {
                goto LABEL_19;
              }
            }
            else
            {
              uint64_t v31 = v84;
            }
            uint64_t v26 = v31;
          }
          uint64_t v27 = 0;
LABEL_20:
          BOOL v28 = __OFADD__(v12, v27);
          uint64_t v29 = v12 + v27;
          if (v28) {
            unint64_t v12 = (v29 >> 63) ^ 0x8000000000000000;
          }
          else {
            unint64_t v12 = v29;
          }
        }
      }
      return v12;
  }
}

unint64_t sub_1CBA8B9CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a1;
  uint64_t v253 = *MEMORY[0x1E4F143B8];
  int v5 = *(_DWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(unsigned int *)(a2 + 120);
  unint64_t v9 = *(void *)(a2 + 128);
  uint64_t v8 = *(void *)(a2 + 136);
  uint64_t v218 = v8;
  uint64_t v10 = *(unsigned int *)(a2 + 32);
  if (v10)
  {
    BOOL v11 = v5 == 319 || v5 == 322;
    unsigned int v12 = v11;
    uint64_t v13 = *(void *)(*(void *)(a2 + 24) + 8 * v12);
    if ((*(_DWORD *)(v13 + 8) & 0xFE) == 0x12) {
      uint64_t v14 = (llvm::FixedVectorType **)v13;
    }
    else {
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  unint64_t v15 = 0;
  if (a3 == 2) {
    int v16 = 1;
  }
  else {
    int v16 = 10;
  }
  unsigned int v250 = &v252;
  uint64_t v251 = 0x200000000;
  if (v5 <= 186)
  {
    if (v5 > 75)
    {
      if (v5 > 166)
      {
        switch(v5)
        {
          case 167:
          case 168:
            goto LABEL_246;
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
            goto LABEL_300;
          case 175:
            int v17 = 230;
            goto LABEL_151;
          case 176:
            int v17 = 232;
            goto LABEL_151;
          case 177:
            int v17 = 231;
            goto LABEL_151;
          default:
            if (v5 != 185) {
              goto LABEL_300;
            }
            unsigned __int8 Alignment = llvm::DataLayout::getAlignment(*(llvm::DataLayout **)(a1 + 8), (llvm::Type *)v6, 1);
            uint64_t v171 = v4;
            int v172 = 32;
            goto LABEL_363;
        }
      }
      switch(v5)
      {
        case 139:
          int v17 = 223;
          break;
        case 140:
          int v17 = 241;
          break;
        case 141:
          goto LABEL_300;
        case 142:
        case 143:
          int v17 = 141;
          break;
        default:
          if (v5 == 76)
          {
            int v17 = 234;
          }
          else
          {
            if (v5 != 90) {
              goto LABEL_300;
            }
            int v17 = 106;
          }
          break;
      }
    }
    else
    {
      if (v5 <= 50)
      {
        switch(v5)
        {
          case 5:
            goto LABEL_246;
          case 6:
          case 7:
          case 10:
          case 11:
          case 12:
          case 15:
          case 16:
          case 17:
          case 18:
            goto LABEL_300;
          case 8:
            int v17 = 186;
            goto LABEL_151;
          case 9:
            int v17 = 182;
            goto LABEL_151;
          case 13:
            int v17 = 145;
            goto LABEL_151;
          case 14:
            int v17 = 235;
            goto LABEL_151;
          case 19:
            int v17 = 143;
            goto LABEL_151;
          default:
            if (v5 != 1) {
              goto LABEL_300;
            }
            uint64_t v96 = **(void **)v6 + 1888;
            if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
            {
              uint64_t v204 = (llvm::Type *)*(unsigned int *)(v6 + 32);
              uint64_t v205 = (uint64_t **)(**(void **)v6 + 1888);
              if (*(_DWORD *)(v6 + 8) == 19) {
                llvm::ScalableVectorType::get(v205, v204);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v205, v204);
              }
              uint64_t v96 = v206;
            }
            unint64_t v97 = sub_1CBA8B020(v4, 0x35u, v6, v96, 0x26u, v3, 0);
            unint64_t v98 = sub_1CBA8B020(v4, 0x39u, v6, v96, 0x26u, v3, 0);
            if (__OFADD__(v97, v98)) {
              unint64_t v99 = ((uint64_t)(v97 + v98) >> 63) ^ 0x8000000000000000;
            }
            else {
              unint64_t v99 = v97 + v98;
            }
            unint64_t v100 = sub_1CBA89F84(v4, 0xFu, v6, v3, 2u, 0, 0, 0, 0, 0, 0);
            BOOL v30 = __OFADD__(v99, v100);
            uint64_t v31 = v99 + v100;
            goto LABEL_126;
        }
      }
      switch(v5)
      {
        case '3':
          int v17 = 227;
          break;
        case '4':
          int v17 = 184;
          break;
        case '5':
          int v16 = 4;
          int v17 = 185;
          break;
        case '6':
          int v17 = 183;
          break;
        default:
          if (v5 != 75) {
            goto LABEL_300;
          }
          int v17 = 233;
          break;
      }
    }
LABEL_151:
    unsigned int v210 = v16;
    uint64_t v207 = v8;
    int v208 = v7;
    int v219 = v5;
    int v252 = v17;
    LODWORD(v251) = 1;
    unint64_t v101 = *(void *)(a1 + 32);
    long long v102 = *(llvm::LLVMContext **)v6;
    unint64_t v103 = sub_1CB87DC14(v101, *(void *)(a1 + 8), (llvm::EVT *)v6, 0);
    uint64_t v105 = v104;
    unsigned int v237 = (void *)1;
    LODWORD(v238) = 0;
    unint64_t v217 = v9;
    while (1)
    {
      llvm::TargetLoweringBase::getTypeConversion(v101, v102, v103, v105, (uint64_t)&v240);
      if (!(_BYTE)v240)
      {
LABEL_161:
        uint64_t v107 = (uint64_t)v237;
        uint64_t v108 = v238;
        goto LABEL_162;
      }
      if (v240 == 10) {
        break;
      }
      if ((v240 & 0xFB) == 2)
      {
        uint64_t __src = 2;
        LODWORD(v226) = 0;
        sub_1CB90C9D4((uint64_t)&v237, (uint64_t)&__src);
      }
      if (v103 == BYTE8(v240))
      {
        if ((_BYTE)v103) {
          goto LABEL_161;
        }
        uint64_t v106 = v241;
        if (v105 == v241) {
          goto LABEL_161;
        }
      }
      else
      {
        uint64_t v106 = v241;
      }
      uint64_t v105 = v106;
      unint64_t v103 = *((void *)&v240 + 1);
    }
    uint64_t v107 = 0;
    if (!(_BYTE)v103) {
      LOBYTE(v103) = 6;
    }
    uint64_t v108 = 1;
LABEL_162:
    unsigned int v237 = v239;
    uint64_t v238 = 0x200000000;
    unsigned int v234 = v236;
    uint64_t v235 = 0x200000000;
    if (!v251) {
      goto LABEL_221;
    }
    uint64_t v211 = v4;
    unsigned int v215 = v3;
    uint64_t v109 = (unsigned int *)v250;
    unint64_t v110 = (uint64_t *)(v101 + 8 * v103 + 96);
    BOOL v111 = v107 > 1;
    if (v108) {
      BOOL v111 = (int)v108 > 0;
    }
    BOOL v221 = v111;
    BOOL v115 = ((v103 - 8) < 7u
         || (v103 - 75) < 0x2Du
         || (v103 + 104) < 0x13u)
        && v219 == 139;
    uint64_t v116 = 4 * v251;
    while (!(_BYTE)v103)
    {
LABEL_200:
      ++v109;
      v116 -= 4;
      if (!v116)
      {
        uint64_t v121 = (unint64_t *)v237;
        if (v238 >= 2)
        {
          unsigned int v122 = (char *)v237 + 16;
          uint64_t v123 = *(void *)v237;
          uint64_t v124 = 16 * v238 - 16;
          uint64_t v4 = v211;
          uint64_t v3 = v215;
          do
          {
            int v125 = *((_DWORD *)v122 + 2);
            int v126 = *((_DWORD *)v121 + 2);
            BOOL v11 = v125 == v126;
            BOOL v127 = v125 < v126;
            if (v11) {
              BOOL v127 = *(void *)v122 < v123;
            }
            if (v127)
            {
              uint64_t v123 = *(void *)v122;
              uint64_t v121 = (unint64_t *)v122;
            }
            v122 += 16;
            v124 -= 16;
          }
          while (v124);
        }
        else
        {
          uint64_t v4 = v211;
          uint64_t v3 = v215;
        }
        if (v121 != (unint64_t *)((char *)v237 + 16 * v238)) {
          goto LABEL_220;
        }
        uint64_t v121 = (unint64_t *)v234;
        if (v235 >= 2)
        {
          int v128 = (char *)v234 + 16;
          uint64_t v129 = *(void *)v234;
          uint64_t v130 = 16 * v235 - 16;
          do
          {
            int v131 = *((_DWORD *)v128 + 2);
            int v132 = *((_DWORD *)v121 + 2);
            BOOL v11 = v131 == v132;
            BOOL v133 = v131 < v132;
            if (v11) {
              BOOL v133 = *(void *)v128 < v129;
            }
            if (v133)
            {
              uint64_t v129 = *(void *)v128;
              uint64_t v121 = (unint64_t *)v128;
            }
            v128 += 16;
            v130 -= 16;
          }
          while (v130);
        }
        if (v121 != (unint64_t *)((char *)v234 + 16 * v235))
        {
LABEL_220:
          unint64_t v15 = *v121;
          goto LABEL_242;
        }
LABEL_221:
        int v134 = v219;
        if (v219 == 90)
        {
          unsigned int v137 = *(char **)(a2 + 24);
          uint64_t v138 = *(unsigned int *)(a2 + 32);
          *(void *)&long long v240 = 0;
          *((void *)&v240 + 1) = v6;
          LODWORD(v241) = 89;
          int v242 = v244;
          uint64_t v243 = 0x400000000;
          unsigned int v245 = v247;
          uint64_t v246 = 0x400000000;
          int v248 = 0;
          long long v249 = xmmword_1CD96D880;
          sub_1CC1587C8((uint64_t)&v242, (uint64_t)v244, v137, &v137[8 * v138]);
          unsigned int v139 = *(char **)(a2 + 24);
          uint64_t v140 = *(unsigned int *)(a2 + 32);
          uint64_t __src = 0;
          uint64_t v226 = v6;
          int v227 = 83;
          v228[0] = v229;
          v228[1] = (void *)0x400000000;
          int v230 = v232;
          uint64_t v231 = 0x400000000;
          v232[8] = 0;
          long long v233 = xmmword_1CD96D880;
          sub_1CC1587C8((uint64_t)v228, (uint64_t)v229, v139, &v139[8 * v140]);
          uint64_t v141 = sub_1CBA8952C(v4, &v240, v3);
          uint64_t v142 = sub_1CBA8952C(v4, &__src, v3);
          if (__OFADD__(v141, v142)) {
            unint64_t v15 = ((v141 + v142) >> 63) ^ 0x8000000000000000;
          }
          else {
            unint64_t v15 = v141 + v142;
          }
          if (v230 != v232) {
            free(v230);
          }
          if (v228[0] != v229) {
            free(v228[0]);
          }
          if (v245 != v247) {
            free(v245);
          }
          unsigned int v143 = (char *)v242;
          if (v242 == v244) {
            goto LABEL_242;
          }
        }
        else
        {
          if (v219 == 143)
          {
            unint64_t v135 = sub_1CBA89F84(v4, 0x12u, v6, v3, 0, 0, 0, 0, 0, 0, 0);
            unint64_t v136 = sub_1CBA89F84(v4, 0xEu, v6, v3, 0, 0, 0, 0, 0, 0, 0);
            if (__OFADD__(v135, v136)) {
              unint64_t v15 = ((uint64_t)(v135 + v136) >> 63) ^ 0x8000000000000000;
            }
            else {
              unint64_t v15 = v135 + v136;
            }
            goto LABEL_242;
          }
          if ((*(_DWORD *)(v6 + 8) & 0xFE) != 0x12)
          {
            unint64_t v15 = v210;
            goto LABEL_242;
          }
          if (*(_DWORD *)(v6 + 8) == 19)
          {
            unint64_t v15 = 0;
            goto LABEL_242;
          }
          uint64_t v145 = *(unsigned int *)(a2 + 32);
          if (v145)
          {
            uint64_t v146 = *(void *)(a2 + 24);
            uint64_t v147 = 8 * v145;
            while (*(unsigned char *)(*(void *)v146 + 8) != 19)
            {
              v146 += 8;
              v147 -= 8;
              if (!v147) {
                goto LABEL_253;
              }
            }
            unint64_t v15 = 0;
LABEL_242:
            if (v234 != v236) {
              free(v234);
            }
            unint64_t v42 = v237;
            if (v237 != v239) {
LABEL_245:
            }
              free(v42);
            goto LABEL_246;
          }
LABEL_253:
          uint64_t v148 = v3;
          if (v218)
          {
            unint64_t v217 = sub_1CBA65E40(v4, v6, 1, 0);
            uint64_t v150 = v149;
            LODWORD(v145) = *(_DWORD *)(a2 + 32);
          }
          else
          {
            uint64_t v150 = v207;
          }
          unsigned int v153 = *(_DWORD *)(v6 + 32);
          uint64_t __src = (uint64_t)&v227;
          uint64_t v226 = 0x400000000;
          if (v145)
          {
            uint64_t v154 = 0;
            LODWORD(v155) = 0;
            do
            {
              uint64_t v156 = *(void *)(*(void *)(a2 + 24) + v154);
              if ((*(_DWORD *)(v156 + 8) & 0xFE) == 0x12) {
                uint64_t v156 = **(void **)(v156 + 16);
              }
              if (v155 >= HIDWORD(v226)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(__src + 8 * v155) = v156;
              uint64_t v155 = (v226 + 1);
              LODWORD(v226) = v226 + 1;
              v154 += 8;
            }
            while (8 * v145 != v154);
            int v134 = v219;
          }
          else
          {
            uint64_t v155 = 0;
          }
          uint64_t v157 = v150;
          if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
            uint64_t v6 = **(void **)(v6 + 16);
          }
          *(void *)&long long v240 = 0;
          *((void *)&v240 + 1) = v6;
          LODWORD(v241) = v134;
          int v242 = v244;
          uint64_t v243 = 0x400000000;
          unsigned int v245 = v247;
          uint64_t v246 = 0x400000000;
          int v248 = v208;
          long long v249 = xmmword_1CD96D880;
          sub_1CC1587C8((uint64_t)&v242, (uint64_t)v244, (char *)__src, (char *)(__src + 8 * v155));
          v222[0] = sub_1CBA8952C(v4, &v240, v148);
          v222[1] = v158;
          uint64_t v159 = *(unsigned int *)(a2 + 32);
          if (v159)
          {
            uint64_t v160 = v4;
            uint64_t v161 = 0;
            uint64_t v162 = 8 * v159;
            uint64_t v163 = v157;
            do
            {
              uint64_t v164 = *(void *)(*(void *)(a2 + 24) + v161);
              if (v164) {
                BOOL v165 = (*(_DWORD *)(v164 + 8) & 0xFE) == 18;
              }
              else {
                BOOL v165 = 0;
              }
              if (v165)
              {
                if (*(_DWORD *)(a2 + 136))
                {
                  uint64_t v166 = v163;
                  unint64_t v167 = sub_1CBA65E40(v160, *(void *)(*(void *)(a2 + 24) + v161), 0, 1);
                  if (v168 == 1) {
                    uint64_t v163 = 1;
                  }
                  else {
                    uint64_t v163 = v166;
                  }
                  unint64_t v169 = v217 + v167;
                  if (__OFADD__(v217, v167)) {
                    unint64_t v169 = ((uint64_t)(v217 + v167) >> 63) ^ 0x8000000000000000;
                  }
                  unint64_t v217 = v169;
                }
                if (v153 <= *(_DWORD *)(v164 + 32)) {
                  unsigned int v153 = *(_DWORD *)(v164 + 32);
                }
              }
              v161 += 8;
            }
            while (v162 != v161);
          }
          uint64_t v223 = v153;
          LODWORD(v224) = 0;
          sub_1CB90C9D4((uint64_t)&v223, (uint64_t)v222);
          if (__OFADD__(v223, v217)) {
            unint64_t v15 = ((uint64_t)(v223 + v217) >> 63) ^ 0x8000000000000000;
          }
          else {
            unint64_t v15 = v223 + v217;
          }
          if (v245 != v247) {
            free(v245);
          }
          if (v242 != v244) {
            free(v242);
          }
          unsigned int v143 = (char *)__src;
          if ((int *)__src == &v227) {
            goto LABEL_242;
          }
        }
        free(v143);
        goto LABEL_242;
      }
    }
    uint64_t v117 = *v109;
    if (v103 == 1)
    {
      if (v117 > 0x185)
      {
LABEL_194:
        uint64_t v118 = *v110;
        goto LABEL_195;
      }
    }
    else
    {
      uint64_t v118 = *v110;
      if (v117 > 0x185 || v118 == 0)
      {
LABEL_195:
        if (v118 && (v117 > 0x185 || *(unsigned char *)(v101 + 390 * v103 + v117 + 3862) != 2))
        {
          uint64_t __src = 2;
          LODWORD(v226) = 0;
          *(void *)&long long v240 = v107;
          *((void *)&v240 + 1) = v108;
          sub_1CB90C9D4((uint64_t)&v240, (uint64_t)&__src);
          if (v235 >= (unint64_t)HIDWORD(v235)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_OWORD *)v234 + v235) = v240;
          LODWORD(v235) = v235 + 1;
        }
        goto LABEL_200;
      }
    }
    if (*(unsigned __int8 *)(v101 + 390 * v103 + v117 + 3862) <= 1u)
    {
      if (v115
        && ((*(uint64_t (**)(unint64_t, void, void))(*(void *)v101 + 1328))(v101, v103, 0) & 1) != 0)
      {
        unint64_t v15 = 0;
        goto LABEL_242;
      }
      if (v221) {
        uint64_t v120 = 2;
      }
      else {
        uint64_t v120 = 1;
      }
      uint64_t __src = v120;
      LODWORD(v226) = 0;
      *(void *)&long long v240 = v107;
      *((void *)&v240 + 1) = v108;
      sub_1CB90C9D4((uint64_t)&v240, (uint64_t)&__src);
      if (v238 >= (unint64_t)HIDWORD(v238)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v237 + v238) = v240;
      LODWORD(v238) = v238 + 1;
      goto LABEL_200;
    }
    goto LABEL_194;
  }
  int v17 = 224;
  switch(v5)
  {
    case 238:
      int v17 = 229;
      goto LABEL_151;
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 261:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 277:
    case 279:
    case 281:
    case 282:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 297:
    case 298:
    case 299:
    case 302:
    case 303:
    case 304:
    case 308:
    case 310:
    case 313:
    case 314:
    case 315:
    case 316:
LABEL_300:
      int v173 = *(unsigned __int8 *)(v6 + 8);
      if (v173 == 19)
      {
        unint64_t v15 = 0;
        goto LABEL_246;
      }
      if (!v10) {
        goto LABEL_306;
      }
      uint64_t v174 = *(void *)(a2 + 24);
      uint64_t v175 = 8 * v10;
      break;
    case 244:
    case 272:
      goto LABEL_246;
    case 258:
      int v17 = 237;
      goto LABEL_151;
    case 259:
      int v17 = 239;
      goto LABEL_151;
    case 260:
      int v17 = 240;
      goto LABEL_151;
    case 262:
    case 283:
      int v32 = v7;
      int v33 = (uint64_t **)(**(void **)v6 + 1888);
      unsigned int v213 = a3;
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
      {
        int v196 = (llvm::Type *)*(unsigned int *)(v6 + 32);
        if (*(_DWORD *)(v6 + 8) == 19) {
          llvm::ScalableVectorType::get(v33, v196);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v33, v196);
        }
        int v33 = v197;
      }
      *(void *)&long long v240 = v6;
      *((void *)&v240 + 1) = v33;
      uint64_t v35 = llvm::StructType::create(*(uint64_t **)v6, 0, 0);
      llvm::StructType::setBody(v35, (uint64_t)&v240, 2, 0);
      if (v5 == 262) {
        int v36 = 263;
      }
      else {
        int v36 = 284;
      }
      uint64_t __src = v6;
      uint64_t v226 = v6;
      *(void *)&long long v240 = 0;
      *((void *)&v240 + 1) = v35;
      LODWORD(v241) = v36;
      int v242 = v244;
      uint64_t v243 = 0x400000000;
      unsigned int v245 = v247;
      uint64_t v246 = 0x400000000;
      int v248 = v32;
      *(void *)&long long v249 = v9;
      *((void *)&v249 + 1) = v8;
      sub_1CC1587C8((uint64_t)&v242, (uint64_t)v244, (char *)&__src, (char *)&v227);
      uint64_t v37 = sub_1CBA8952C(a1, &v240, v213);
      unint64_t v38 = sub_1CBA8B020(a1, 0x35u, v6, (uint64_t)v33, 0x26u, v213, 0);
      uint64_t v39 = v6;
      if (__OFADD__(v37, v38)) {
        unint64_t v40 = ((uint64_t)(v37 + v38) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v40 = v37 + v38;
      }
      unsigned int v237 = (void *)sub_1CBA8B020(a1, 0x39u, v39, (uint64_t)v33, 0x26u, v213, 0);
      uint64_t v238 = v41;
      uint64_t __src = 2;
      LODWORD(v226) = 0;
      sub_1CB90C9D4((uint64_t)&__src, (uint64_t)&v237);
      if (__OFADD__(v40, __src)) {
        unint64_t v15 = ((uint64_t)(v40 + __src) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v15 = v40 + __src;
      }
      if (v245 != v247) {
        free(v245);
      }
      unint64_t v42 = v242;
      if (v242 != v244) {
        goto LABEL_245;
      }
      goto LABEL_246;
    case 263:
    case 284:
      uint64_t v80 = *(uint64_t **)(v6 + 16);
      uint64_t v82 = *v80;
      uint64_t v81 = v80[1];
      if (v5 == 263) {
        unsigned int v83 = 13;
      }
      else {
        unsigned int v83 = 15;
      }
      unint64_t v84 = sub_1CBA89F84(a1, v83, v82, a3, 0, 0, 0, 0, 0, 0, 0);
      uint64_t __src = sub_1CBA8B020(v4, 0x35u, v82, v81, 0x26u, v3, 0);
      uint64_t v226 = v85;
      *(void *)&long long v240 = 2;
      DWORD2(v240) = 0;
      sub_1CB90C9D4((uint64_t)&v240, (uint64_t)&__src);
      int v86 = v3;
      if (__OFADD__(v84, (void)v240)) {
        unint64_t v60 = ((uint64_t)(v84 + v240) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v60 = v84 + v240;
      }
      unint64_t v62 = sub_1CBA89F84(v4, 0x1Eu, v81, v86, 0, 0, 0, 0, 0, 0, 0);
      goto LABEL_106;
    case 273:
      int v17 = 226;
      goto LABEL_151;
    case 274:
    case 275:
    case 305:
    case 306:
      uint64_t v18 = **(void **)v6 + 1888;
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
      {
        int v193 = (llvm::Type *)*(unsigned int *)(v6 + 32);
        uint64_t v194 = (uint64_t **)(**(void **)v6 + 1888);
        if (*(_DWORD *)(v6 + 8) == 19) {
          llvm::ScalableVectorType::get(v194, v193);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v194, v193);
        }
        uint64_t v18 = v195;
      }
      if ((v5 - 305) >= 2) {
        unsigned int v19 = 38;
      }
      else {
        unsigned int v19 = 34;
      }
      unint64_t v20 = sub_1CBA8B020(v4, 0x35u, v6, v18, v19, v3, 0);
      uint64_t v21 = v4;
      unint64_t v22 = v20;
      uint64_t v23 = v21;
      unsigned int v24 = 57;
      goto LABEL_45;
    case 276:
    case 307:
      uint64_t v63 = (llvm::Type *)v6;
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
        uint64_t v63 = **(llvm::Type ***)(v6 + 16);
      }
      int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v63);
      unint64_t v65 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v6, (llvm::LLVMContext *)(2 * PrimitiveSizeInBits));
      unint64_t v66 = (llvm::Type ***)v65;
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
      {
        int v200 = (llvm::Type *)*(unsigned int *)(v6 + 32);
        if (*(_DWORD *)(v6 + 8) == 19) {
          llvm::ScalableVectorType::get(v65, v200);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v65, v200);
        }
        unint64_t v66 = v201;
      }
      if (v5 == 276) {
        uint64_t v67 = 40;
      }
      else {
        uint64_t v67 = 39;
      }
      uint64_t __src = sub_1CBA8A664(v4, v67, v66, (llvm::Type ***)v6, 0, v3, 0);
      uint64_t v226 = v68;
      *(void *)&long long v240 = 2;
      DWORD2(v240) = 0;
      sub_1CB90C9D4((uint64_t)&v240, (uint64_t)&__src);
      unint64_t v69 = (llvm::Type ***)v6;
      uint64_t v70 = v240;
      unint64_t v71 = sub_1CBA89F84(v4, 0x11u, (uint64_t)v66, v3, 0, 0, 0, 0, 0, 0, 0);
      if (__OFADD__(v70, v71)) {
        unint64_t v72 = ((uint64_t)(v70 + v71) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v72 = v70 + v71;
      }
      uint64_t __src = sub_1CBA8A664(v4, 38, v69, v66, 0, v3, 0);
      uint64_t v226 = v73;
      *(void *)&long long v240 = 2;
      DWORD2(v240) = 0;
      sub_1CB90C9D4((uint64_t)&v240, (uint64_t)&__src);
      if (__OFADD__(v72, (void)v240)) {
        unint64_t v74 = ((uint64_t)(v72 + v240) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v74 = v72 + v240;
      }
      unint64_t v75 = sub_1CBA89F84(v4, 0x1Au, (uint64_t)v69, v3, 0, 2u, 0, 0, 0, 0, 0);
      if (__OFADD__(v74, v75)) {
        unint64_t v76 = ((uint64_t)(v74 + v75) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v76 = v74 + v75;
      }
      unint64_t v77 = sub_1CBA89F84(v4, 0x19u, (uint64_t)v69, v3, 0, 2u, 0, 0, 0, 0, 0);
      if (__OFADD__(v76, v77)) {
        unint64_t v78 = ((uint64_t)(v76 + v77) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v78 = v76 + v77;
      }
      unint64_t v79 = sub_1CBA89F84(v4, 0x1Du, (uint64_t)v69, v3, 0, 0, 0, 0, 0, 0, 0);
      BOOL v30 = __OFADD__(v78, v79);
      uint64_t v31 = v78 + v79;
      goto LABEL_126;
    case 278:
    case 309:
      unint64_t v43 = *(uint64_t **)(v6 + 16);
      uint64_t v44 = *v43;
      uint64_t v45 = (llvm::Type *)*v43;
      if ((*(_DWORD *)(*v43 + 8) & 0xFE) == 0x12) {
        uint64_t v45 = **(llvm::Type ***)(v44 + 16);
      }
      uint64_t v46 = v43[1];
      int v47 = llvm::Type::getPrimitiveSizeInBits(v45);
      uint64_t v48 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v44, (llvm::LLVMContext *)(2 * v47));
      uint64_t v49 = (llvm::Type ***)v48;
      if ((*(_DWORD *)(v44 + 8) & 0xFE) == 0x12)
      {
        unsigned int v198 = (llvm::Type *)*(unsigned int *)(v44 + 32);
        if (*(_DWORD *)(v44 + 8) == 19) {
          llvm::ScalableVectorType::get(v48, v198);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v48, v198);
        }
        uint64_t v49 = v199;
      }
      if (v5 == 278) {
        uint64_t v50 = 40;
      }
      else {
        uint64_t v50 = 39;
      }
      uint64_t __src = sub_1CBA8A664(v4, v50, v49, (llvm::Type ***)v44, 0, v3, 0);
      uint64_t v226 = v51;
      int v52 = v3;
      *(void *)&long long v240 = 2;
      DWORD2(v240) = 0;
      sub_1CB90C9D4((uint64_t)&v240, (uint64_t)&__src);
      int v53 = v5;
      uint64_t v54 = v240;
      unint64_t v55 = sub_1CBA89F84(v4, 0x11u, (uint64_t)v49, v3, 0, 0, 0, 0, 0, 0, 0);
      if (__OFADD__(v54, v55)) {
        unint64_t v56 = ((uint64_t)(v54 + v55) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v56 = v54 + v55;
      }
      uint64_t __src = sub_1CBA8A664(v4, 38, (llvm::Type ***)v44, v49, 0, v3, 0);
      uint64_t v226 = v57;
      *(void *)&long long v240 = 2;
      DWORD2(v240) = 0;
      sub_1CB90C9D4((uint64_t)&v240, (uint64_t)&__src);
      if (__OFADD__(v56, (void)v240)) {
        unint64_t v58 = ((uint64_t)(v56 + v240) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v58 = v56 + v240;
      }
      unint64_t v59 = sub_1CBA89F84(v4, 0x1Au, (uint64_t)v49, v3, 0, 2u, 0, 0, 0, 0, 0);
      if (__OFADD__(v58, v59)) {
        unint64_t v60 = ((uint64_t)(v58 + v59) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v60 = v58 + v59;
      }
      if (v53 == 278)
      {
        unint64_t v61 = sub_1CBA89F84(v4, 0x1Bu, v44, v52, 0, 2u, 0, 0, 0, 0, 0);
        if (__OFADD__(v60, v61)) {
          unint64_t v60 = ((uint64_t)(v60 + v61) >> 63) ^ 0x8000000000000000;
        }
        else {
          v60 += v61;
        }
      }
      unint64_t v62 = sub_1CBA8B020(v4, 0x35u, v44, v46, 0x21u, v52, 0);
LABEL_106:
      BOOL v30 = __OFADD__(v60, v62);
      uint64_t v31 = v60 + v62;
      goto LABEL_126;
    case 280:
      goto LABEL_151;
    case 296:
      int v17 = 236;
      goto LABEL_151;
    case 300:
    case 311:
      unsigned int v214 = a3;
      uint64_t v87 = (uint64_t **)(**(void **)v6 + 1888);
      uint64_t v88 = v6;
      int v89 = *(_DWORD *)(v6 + 8);
      int v90 = v7;
      if ((v89 & 0xFE) == 0x12)
      {
        uint64_t v202 = (llvm::Type *)*(unsigned int *)(v88 + 32);
        if (v89 == 19) {
          llvm::ScalableVectorType::get(v87, v202);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v87, v202);
        }
        uint64_t v87 = v203;
      }
      *(void *)&long long v240 = v88;
      *((void *)&v240 + 1) = v87;
      uint64_t v92 = llvm::StructType::create(*(uint64_t **)v88, 0, 0);
      llvm::StructType::setBody(v92, (uint64_t)&v240, 2, 0);
      if (v5 == 300) {
        int v93 = 301;
      }
      else {
        int v93 = 312;
      }
      uint64_t __src = v88;
      uint64_t v226 = v88;
      *(void *)&long long v240 = 0;
      *((void *)&v240 + 1) = v92;
      LODWORD(v241) = v93;
      int v242 = v244;
      uint64_t v243 = 0x400000000;
      unsigned int v245 = v247;
      uint64_t v246 = 0x400000000;
      int v248 = v90;
      *(void *)&long long v249 = v9;
      *((void *)&v249 + 1) = v8;
      sub_1CC1587C8((uint64_t)&v242, (uint64_t)v244, (char *)&__src, (char *)&v227);
      uint64_t v94 = sub_1CBA8952C(a1, &v240, v214);
      unint64_t v95 = sub_1CBA8B020(a1, 0x39u, v88, (uint64_t)v87, 0x2Au, v214, 0);
      if (__OFADD__(v94, v95)) {
        unint64_t v15 = ((uint64_t)(v94 + v95) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v15 = v94 + v95;
      }
      if (v245 != v247) {
        free(v245);
      }
      unint64_t v42 = v242;
      if (v242 != v244) {
        goto LABEL_245;
      }
      goto LABEL_246;
    case 301:
    case 312:
      uint64_t v25 = *(uint64_t **)(v6 + 16);
      uint64_t v6 = *v25;
      uint64_t v18 = v25[1];
      if (v5 == 301) {
        unsigned int v26 = 13;
      }
      else {
        unsigned int v26 = 15;
      }
      if (v5 == 301) {
        unsigned int v19 = 36;
      }
      else {
        unsigned int v19 = 34;
      }
      unint64_t v27 = sub_1CBA89F84(a1, v26, v6, a3, 0, 0, 0, 0, 0, 0, 0);
      uint64_t v28 = v4;
      unint64_t v22 = v27;
      uint64_t v23 = v28;
      unsigned int v24 = 53;
LABEL_45:
      unint64_t v29 = sub_1CBA8B020(v23, v24, v6, v18, v19, v3, 0);
      BOOL v30 = __OFADD__(v22, v29);
      uint64_t v31 = v22 + v29;
LABEL_126:
      if (v30) {
        unint64_t v15 = (v31 >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v15 = v31;
      }
      goto LABEL_246;
    case 317:
      unsigned int v190 = 13;
      goto LABEL_359;
    case 318:
      unsigned int v190 = 28;
      goto LABEL_359;
    case 319:
      uint64_t v188 = v7 | 0x100000000;
      unsigned int v189 = 14;
      goto LABEL_361;
    case 320:
    case 321:
    case 325:
    case 326:
    case 327:
    case 328:
      int v151 = (uint64_t **)(*(void *)*v14 + 1888);
      if (v14 && (v14[1] & 0xFE) == 0x12)
      {
        unint64_t v191 = (llvm::Type *)*((unsigned int *)v14 + 8);
        if (*((_DWORD *)v14 + 2) == 19) {
          llvm::ScalableVectorType::get(v151, v191);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v151, v191);
        }
        int v151 = v192;
      }
      unint64_t v152 = sub_1CD418844(v4, v14, (uint64_t)v151, v3);
      goto LABEL_364;
    case 322:
      uint64_t v188 = v7 | 0x100000000;
      unsigned int v189 = 18;
LABEL_361:
      unint64_t v152 = sub_1CD418828(a1, v189, v14, v188, a3);
      goto LABEL_364;
    case 323:
      unsigned int v190 = 17;
      goto LABEL_359;
    case 324:
      unsigned int v190 = 29;
      goto LABEL_359;
    case 329:
      unsigned int v190 = 30;
LABEL_359:
      unint64_t v152 = sub_1CD418ED8(a1, v190, v14, a3);
      goto LABEL_364;
    default:
      switch(v5)
      {
        case 192:
          int v17 = 251;
          goto LABEL_151;
        case 193:
          int v17 = 247;
          goto LABEL_151;
        case 194:
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
          goto LABEL_300;
        case 201:
          int v17 = 250;
          goto LABEL_151;
        case 202:
          int v17 = 246;
          goto LABEL_151;
        case 203:
          int v17 = 238;
          goto LABEL_151;
        default:
          if (v5 != 187) {
            goto LABEL_300;
          }
          uint64_t v6 = **(void **)(a2 + 24);
          unsigned __int8 Alignment = llvm::DataLayout::getAlignment(*(llvm::DataLayout **)(a1 + 8), (llvm::Type *)v6, 1);
          uint64_t v171 = v4;
          int v172 = 33;
LABEL_363:
          unint64_t v152 = sub_1CD418BEC(v171, v172, v6, Alignment, 1, 0, v3);
          break;
      }
LABEL_364:
      unint64_t v15 = v152;
      goto LABEL_246;
  }
  do
  {
    if (*(unsigned char *)(*(void *)v174 + 8) == 19)
    {
      unint64_t v15 = 0;
      goto LABEL_246;
    }
    v174 += 8;
    v175 -= 8;
  }
  while (v175);
LABEL_306:
  int v209 = v7;
  if (v8) {
    unint64_t v176 = 0;
  }
  else {
    unint64_t v176 = v9;
  }
  unsigned int v177 = 1;
  if ((v173 & 0xFE) == 0x12 && v6)
  {
    if (v218)
    {
      unint64_t v9 = sub_1CBA65E40(a1, v6, 1, 0);
      int v173 = *(_DWORD *)(v6 + 8);
    }
    if (*(_DWORD *)(v6 + 32) <= 1u) {
      unsigned int v177 = 1;
    }
    else {
      unsigned int v177 = *(_DWORD *)(v6 + 32);
    }
    if ((v173 & 0xFE) == 0x12) {
      uint64_t v6 = **(void **)(v6 + 16);
    }
  }
  else
  {
    unint64_t v9 = v176;
  }
  uint64_t __src = (uint64_t)&v227;
  uint64_t v226 = 0x400000000;
  uint64_t v178 = *(unsigned int *)(a2 + 32);
  if (v178)
  {
    uint64_t v212 = v6;
    unsigned int v216 = v3;
    uint64_t v179 = 0;
    uint64_t v180 = 8 * v178;
    do
    {
      uint64_t v181 = *(void *)(*(void *)(a2 + 24) + v179);
      int v182 = *(_DWORD *)(v181 + 8);
      if (v181) {
        BOOL v183 = (*(_DWORD *)(v181 + 8) & 0xFE) == 18;
      }
      else {
        BOOL v183 = 0;
      }
      if (v183)
      {
        if (v218)
        {
          unint64_t v184 = sub_1CBA65E40(v4, *(void *)(*(void *)(a2 + 24) + v179), 0, 1);
          if (__OFADD__(v9, v184)) {
            unint64_t v9 = ((uint64_t)(v9 + v184) >> 63) ^ 0x8000000000000000;
          }
          else {
            v9 += v184;
          }
          int v182 = *(_DWORD *)(v181 + 8);
        }
        if (v177 <= *(_DWORD *)(v181 + 32)) {
          unsigned int v177 = *(_DWORD *)(v181 + 32);
        }
        if ((v182 & 0xFE) == 0x12) {
          uint64_t v181 = **(void **)(v181 + 16);
        }
      }
      if (v226 >= (unint64_t)HIDWORD(v226)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(__src + 8 * v226) = v181;
      uint64_t v185 = (v226 + 1);
      LODWORD(v226) = v226 + 1;
      v179 += 8;
    }
    while (v180 != v179);
    unsigned int v186 = (char *)__src;
    uint64_t v3 = v216;
    uint64_t v6 = v212;
  }
  else
  {
    uint64_t v185 = 0;
    unsigned int v186 = (char *)&v227;
  }
  if (v177 == 1)
  {
    unint64_t v15 = 1;
  }
  else
  {
    *(void *)&long long v240 = 0;
    *((void *)&v240 + 1) = v6;
    LODWORD(v241) = v5;
    int v242 = v244;
    uint64_t v243 = 0x400000000;
    unsigned int v245 = v247;
    uint64_t v246 = 0x400000000;
    int v248 = v209;
    long long v249 = xmmword_1CD96D880;
    sub_1CC1587C8((uint64_t)&v242, (uint64_t)v244, v186, &v186[8 * v185]);
    unsigned int v234 = (void *)sub_1CBA8952C(v4, &v240, v3);
    uint64_t v235 = v187;
    unsigned int v237 = (void *)v177;
    LODWORD(v238) = 0;
    sub_1CB90C9D4((uint64_t)&v237, (uint64_t)&v234);
    if (__OFADD__(v237, v9)) {
      unint64_t v15 = ((uint64_t)((uint64_t)v237 + v9) >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v15 = (unint64_t)v237 + v9;
    }
    if (v245 != v247) {
      free(v245);
    }
    if (v242 != v244) {
      free(v242);
    }
    unsigned int v186 = (char *)__src;
  }
  if (v186 != (char *)&v227)
  {
    unint64_t v42 = v186;
    goto LABEL_245;
  }
LABEL_246:
  if (v250 != &v252) {
    free(v250);
  }
  return v15;
}

unint64_t sub_1CBA8D710(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v31 = v35;
  int v32 = v35;
  uint64_t v33 = 4;
  int v34 = 0;
  uint64_t v4 = a3;
  if (!a3) {
    return 0;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  do
  {
    uint64_t v10 = *(void *)(a2 + 8 * v8);
    uint64_t v11 = *(void *)(a4 + 8 * v8);
    if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12) {
      unsigned int v12 = *(unsigned __int8 *)(**(void **)(v11 + 16) + 8);
    }
    else {
      unsigned int v12 = *(_DWORD *)(v11 + 8);
    }
    BOOL v13 = v12 < 7 || v12 == 13;
    if (!v13 && v12 != 15 || *(unsigned __int8 *)(v10 + 16) < 0x15u) {
      goto LABEL_51;
    }
    uint64_t v14 = v32;
    uint64_t v15 = HIDWORD(v33);
    if (v32 == v31)
    {
      if (HIDWORD(v33))
      {
        int v16 = 0;
        uint64_t v17 = 8 * HIDWORD(v33);
        uint64_t v18 = v32;
        while (*(void *)v18 != v10)
        {
          if (*(void *)v18 == -2) {
            int v16 = v18;
          }
          v18 += 8;
          v17 -= 8;
          if (!v17)
          {
            if (!v16) {
              goto LABEL_20;
            }
            *(void *)int v16 = v10;
            --v34;
            if (v11) {
              goto LABEL_47;
            }
            goto LABEL_51;
          }
        }
        goto LABEL_51;
      }
LABEL_20:
      unsigned int v19 = v33;
      if (HIDWORD(v33) < v33)
      {
        ++HIDWORD(v33);
        *(void *)&v32[8 * v15] = v10;
        if (!v11) {
          goto LABEL_51;
        }
LABEL_47:
        if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
        {
          unint64_t v29 = sub_1CBA65E40(a1, v11, 0, 1);
          if (__OFADD__(v9, v29)) {
            unint64_t v9 = ((uint64_t)(v9 + v29) >> 63) ^ 0x8000000000000000;
          }
          else {
            v9 += v29;
          }
        }
        goto LABEL_51;
      }
    }
    else
    {
      unsigned int v19 = v33;
    }
    if (3 * v19 <= 4 * (HIDWORD(v33) - v34))
    {
      if (v19 >= 0x40) {
        v19 *= 2;
      }
      else {
        unsigned int v19 = 128;
      }
    }
    else if (v19 - HIDWORD(v33) >= v19 >> 3)
    {
      goto LABEL_26;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v31, v19);
    unsigned int v19 = v33;
    uint64_t v14 = v32;
LABEL_26:
    unsigned int v20 = v19 - 1;
    unsigned int v21 = (v19 - 1) & ((v10 >> 4) ^ (v10 >> 9));
    unint64_t v22 = &v14[8 * v21];
    uint64_t v23 = *(void *)v22;
    if (*(void *)v22 == -1)
    {
      unsigned int v24 = 0;
LABEL_40:
      if (v24) {
        uint64_t v28 = v24;
      }
      else {
        uint64_t v28 = v22;
      }
      if (*(void *)v28 != v10)
      {
        if (*(void *)v28 == -2) {
          --v34;
        }
        else {
          ++HIDWORD(v33);
        }
        *(void *)uint64_t v28 = v10;
        if (v11) {
          goto LABEL_47;
        }
      }
    }
    else
    {
      unsigned int v24 = 0;
      int v25 = 1;
      while (v23 != v10)
      {
        if (v24) {
          BOOL v26 = 0;
        }
        else {
          BOOL v26 = v23 == -2;
        }
        if (v26) {
          unsigned int v24 = v22;
        }
        unsigned int v27 = v21 + v25++;
        unsigned int v21 = v27 & v20;
        unint64_t v22 = &v14[8 * (v27 & v20)];
        uint64_t v23 = *(void *)v22;
        if (*(void *)v22 == -1) {
          goto LABEL_40;
        }
      }
    }
LABEL_51:
    ++v8;
  }
  while (v8 != v4);
  if (v32 != v31) {
    free(v32);
  }
  return v9;
}

uint64_t sub_1CBA8D9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a4 + 8) >= 0x41u) {
    operator new[]();
  }
  return 0;
}

void sub_1CBA8DA48()
{
}

uint64_t sub_1CBA8DA5C(uint64_t a1, int a2)
{
  uint64_t result = 1;
  if (a2 > 117)
  {
    if (a2 != 270 && ((a2 - 118) > 0xB || ((1 << (a2 - 118)) & 0xF4F) == 0) && a2 != 193) {
      return 0;
    }
  }
  else if ((a2 - 45) > 0x25 || ((1 << (a2 - 45)) & 0x2830F3C007) == 0)
  {
    return 0;
  }
  return result;
}

void sub_1CBA8DAD4()
{
}

void *sub_1CBA8DAE8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F4B30;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8DB30(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F4B30;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA8DB5C(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 348);
}

void sub_1CBA8DBA4()
{
}

void *sub_1CBA8DBB8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F4B78;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8DC00(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F4B78;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA8DC2C(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 285);
}

void sub_1CBA8DC74()
{
}

void *sub_1CBA8DC88(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F4BC0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8DCD0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F4BC0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA8DCFC(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 286);
}

void sub_1CBA8DD44()
{
}

void *sub_1CBA8DD58(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F4C08;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8DDA0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F4C08;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA8DDCC(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 378);
}

void sub_1CBA8DE14()
{
}

void *sub_1CBA8DE28(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F4C50;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8DE70(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F4C50;
  a2[1] = v2;
  return result;
}

BOOL sub_1CBA8DE9C(uint64_t a1)
{
  return *(unsigned char *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                  + 318) == 0;
}

void sub_1CBA8DEEC()
{
}

void *sub_1CBA8DF00(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F4C98;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8DF48(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F4C98;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA8DF74(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 318);
}

void sub_1CBA8DFBC()
{
}

void *sub_1CBA8DFD0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F4CE0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8E018(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F4CE0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA8E044(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 391);
}

void sub_1CBA8E08C()
{
}

void *sub_1CBA8E0A0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F4D28;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8E0E8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F4D28;
  a2[1] = v2;
  return result;
}

BOOL sub_1CBA8E114(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  return *(unsigned char *)((*(uint64_t (**)(void))(**(void **)(v3 + 112) + 16))(*(void *)(v3 + 112)) + 317)
      || *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 112) + 16))(*(void *)(v3 + 112), a2)+ 330) != 0;
}

void sub_1CBA8E1AC()
{
}

void *sub_1CBA8E1C0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F4D70;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8E208(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F4D70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA8E234(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 374);
}

void sub_1CBA8E27C()
{
}

void *sub_1CBA8E290(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F4DB8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8E2D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F4DB8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA8E304(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 326);
}

void sub_1CBA8E34C()
{
}

void *sub_1CBA8E360(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F4E00;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8E3A8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F4E00;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA8E3D4(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112));
  if (v1[312])
  {
    int v2 = 1;
  }
  else if (v1[313])
  {
    int v2 = 2;
  }
  else if (v1[315])
  {
    int v2 = 4;
  }
  else
  {
    int v2 = 8 * v1[314];
  }
  return v2 | (16 * v1[394]);
}

void sub_1CBA8E458()
{
}

void *sub_1CBA8E46C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F4E48;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8E4B4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F4E48;
  a2[1] = v2;
  return result;
}

BOOL sub_1CBA8E4E0(uint64_t a1)
{
  return *(unsigned char *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                  + 318) == 0;
}

void sub_1CBA8E530()
{
}

void *sub_1CBA8E544(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F4E90;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8E58C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F4E90;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA8E5B8(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 349);
}

void sub_1CBA8E600()
{
}

void *sub_1CBA8E614(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F4ED8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8E65C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F4ED8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA8E688(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 350);
}

void sub_1CBA8E6D0()
{
}

void *sub_1CBA8E6E4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F4F20;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8E72C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F4F20;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA8E758(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 351);
}

void sub_1CBA8E7A0()
{
}

void *sub_1CBA8E7B4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F4F68;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8E7FC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F4F68;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA8E828(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 352);
}

void sub_1CBA8E870()
{
}

void *sub_1CBA8E884(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F4FB0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8E8CC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F4FB0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA8E8F8(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 385);
}

void sub_1CBA8E940()
{
}

void *sub_1CBA8E954(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F4FF8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8E99C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F4FF8;
  a2[1] = v2;
  return result;
}

BOOL sub_1CBA8E9C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(llvm::Module **)(a2 + 40);
  if (!*(unsigned char *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                 + 386))
    return 0;
  uint64_t v4 = "agx.promote_tex_state";
  __int16 v5 = 259;
  return llvm::Module::getNamedMetadata(v2, &v4) != 0;
}

void sub_1CBA8EA58()
{
}

void *sub_1CBA8EA6C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F5040;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8EAB4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F5040;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA8EAE0(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 387);
}

void sub_1CBA8EB28()
{
}

void *sub_1CBA8EB3C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F5088;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8EB84(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F5088;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA8EBB0(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 355);
}

void sub_1CBA8EBF8()
{
}

void *sub_1CBA8EC0C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F50D0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8EC54(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F50D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA8EC80(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 318);
}

void sub_1CBA8ECC8()
{
}

void *sub_1CBA8ECDC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F5118;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBA8ED24(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F5118;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBA8ED50(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 370);
}

uint64_t sub_1CBA8ED94()
{
  v4.n128_u64[0] = (unint64_t)"FMA contraction at IR level";
  v4.n128_u64[1] = 27;
  LOBYTE(v2) = 0;
  uint64_t v3 = &v2;
  sub_1CD3F48AC((uint64_t)&unk_1EBCBF6A0, "disable-agx2-fma-contraction", &v4, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCBF6A0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Enable expansion of AGX specific builtins";
  v4.n128_u64[1] = 41;
  LOBYTE(v2) = 0;
  uint64_t v3 = &v2;
  sub_1CD3F48AC((uint64_t)&unk_1EBCBF760, "run-agx-expand-builtins-agx2", &v4, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCBF760, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Use the new AGX2 scheduling heuristics";
  v4.n128_u64[1] = 38;
  LOBYTE(v2) = 0;
  uint64_t v3 = &v2;
  sub_1CD3F48AC((uint64_t)&unk_1EBCBF820, "agx2-new-scheduler", &v4, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCBF820, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Use the optimization that decides how much to spill to LM";
  v4.n128_u64[1] = 57;
  LOBYTE(v2) = 0;
  uint64_t v3 = &v2;
  sub_1CD3F48AC((uint64_t)&unk_1EBCBF8E0, "agx2-run-set-spill-to-lm-tgt", &v4, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCBF8E0, &dword_1CB82C000);
  int v2 = 1;
  v4.n128_u64[0] = (unint64_t)"Enable canonicalization passes";
  v4.n128_u64[1] = 30;
  char v1 = 0;
  uint64_t v3 = (int *)&v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCBF9A0, "enable-agx2-canonicalize-passes", &v2, &v4, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCBF9A0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Disable combining instructions in to wider tuples";
  v4.n128_u64[1] = 49;
  sub_1CD3F4B2C((llvm::cl::Option *)&unk_1EBCBFA60, "disable-agx2-combining", &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCBFA60, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Enable verification of presence of Mem Operands";
  v4.n128_u64[1] = 47;
  LOBYTE(v2) = 0;
  uint64_t v3 = &v2;
  sub_1CD3F48AC((uint64_t)&unk_1EBCBFB20, "enable-agx2-memop-verifier", &v4, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCBFB20, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Add relaxed-math flags to fp operations that have fast.";
  v4.n128_u64[1] = 55;
  LOBYTE(v2) = 0;
  uint64_t v3 = &v2;
  sub_1CD3F48AC((uint64_t)&unk_1EBCBFBE0, "agx2-replace-fast-math-with-relaxed", &v4, (unsigned char **)&v3);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCBFBE0, &dword_1CB82C000);
}

void sub_1CBA8F010()
{
}

uint64_t sub_1CBA8F0AC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCBFCA0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25EDF80;
  *(void *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 296) = xmmword_1CFB28DF0;
  *(_OWORD *)(a1 + 312) = unk_1CFB28E00;
  *(_OWORD *)(a1 + 264) = llvm::MCSchedModel::Default;
  *(_OWORD *)(a1 + 280) = unk_1CFB28DE0;
  *(void *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 368) = xmmword_1CFB28DF0;
  *(_OWORD *)(a1 + 384) = unk_1CFB28E00;
  *(_OWORD *)(a1 + 336) = llvm::MCSchedModel::Default;
  *(_OWORD *)(a1 + 352) = unk_1CFB28DE0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(void *)(a1 + 456) = a1 + 472;
  *(void *)(a1 + 464) = 0x1000000000;
  *(void *)(a1 + 536) = 0;
  int v2 = (_DWORD *)(a1 + 1328);
  *(void *)a1 = &unk_1F25F5210;
  uint64_t v3 = 560;
  do
  {
    __n128 v4 = (void *)(a1 + v3);
    *__n128 v4 = -1;
    v4[1] = 0;
    v3 += 16;
  }
  while (v4 + 2 != (void *)v2);
  uint64_t v5 = a1 + 1336;
  uint64_t v6 = v2;
  do
  {
    uint64_t v7 = 0;
    *uint64_t v6 = 1;
    v6 += 5;
    do
    {
      *(_DWORD *)(v5 + v7) = -1;
      v7 += 8;
    }
    while (v7 != 32);
    v5 += 40;
  }
  while (v6 != (void *)(a1 + 1408));
  *(void *)(a1 + 552) = 0;
  sub_1CBA904E0(v2);
  uint64_t v8 = (llvm::PassRegistry *)sub_1CBA904E0((_DWORD *)(a1 + 1368));
  *(void *)(a1 + 1408) = a1 + 1424;
  *(void *)(a1 + 1416) = 0x800000000;
  *(void *)(a1 + 1552) = 0;
  *(_DWORD *)(a1 + 1560) = 0;
  *(void *)(a1 + 1568) = 0xFFFFFFFFLL;
  *(void *)(a1 + 1576) = a1 + 1592;
  *(void *)(a1 + 1584) = 0x800000000;
  *(void *)(a1 + 1720) = 0;
  *(_DWORD *)(a1 + 1728) = 0;
  *(void *)(a1 + 1736) = 0xFFFFFFFFLL;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v8);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBFCA8, memory_order_acquire) != -1)
  {
    v12[0] = sub_1CBA8F010;
    v12[1] = &PassRegistry;
    uint64_t v11 = v12;
    std::__call_once(&qword_1EBCBFCA8, &v11, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CBA8F2CC()
{
}

void sub_1CBA8F308(uint64_t a1)
{
  *(void *)a1 = &unk_1F25F5210;
  free(*(void **)(a1 + 1720));
  int v2 = *(void **)(a1 + 1576);
  if (v2 != (void *)(a1 + 1592)) {
    free(v2);
  }
  free(*(void **)(a1 + 1552));
  uint64_t v3 = *(void **)(a1 + 1408);
  if (v3 != (void *)(a1 + 1424)) {
    free(v3);
  }
  for (uint64_t i = 0; i != -80; i -= 40)
  {
    if ((*(unsigned char *)(a1 + i + 1368) & 1) == 0) {
      MEMORY[0x1D25D9CD0](*(void *)(a1 + i + 1376), 4);
    }
  }
  for (uint64_t j = 1320; j != 552; j -= 16)
  {
    uint64_t v6 = *(void *)(a1 + j);
    if ((v6 & 4) != 0)
    {
      uint64_t v7 = (void **)(v6 & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        if (*v7 != v7 + 2) {
          free(*v7);
        }
        MEMORY[0x1D25D9CE0](v7, 0x1080C40ED926357);
      }
    }
  }
  *(void *)a1 = &unk_1F25EDF80;
  uint64_t v8 = *(void **)(a1 + 456);
  if (v8 != (void *)(a1 + 472)) {
    free(v8);
  }
  *(void *)a1 = &unk_1F260E110;
  unint64_t v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 192)) {
    free(v9);
  }
  uint64_t v10 = *(void **)(a1 + 104);
  if (v10 != (void *)(a1 + 120)) {
    free(v10);
  }
  uint64_t v11 = *(void **)(a1 + 32);
  if (v11 != (void *)(a1 + 48)) {
    free(v11);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CBA8F4A8(uint64_t a1)
{
  sub_1CBA8F308(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBA8F4E0()
{
  return "AGX2 TOC Optimizer Pass";
}

uint64_t sub_1CBA8F4F0(uint64_t a1, uint64_t a2)
{
  uint64_t v203 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 248) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  *(void *)(a1 + 256) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  *(void *)(a1 + 544) = *(void *)(a2 + 40);
  __n128 v4 = (const llvm::TargetSubtargetInfo *)(*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8), *(void *)a2);
  uint64_t v181 = a1;
  llvm::TargetSchedModel::init((llvm::TargetSchedModel *)(a1 + 264), v4);
  if (*((unsigned char *)v4 + 294))
  {
    int v5 = 24;
  }
  else if (*((unsigned char *)v4 + 293))
  {
    int v5 = 20;
  }
  else if (*((unsigned char *)v4 + 292))
  {
    int v5 = 16;
  }
  else if (*((unsigned char *)v4 + 291))
  {
    int v5 = 12;
  }
  else if (*((unsigned char *)v4 + 290))
  {
    int v5 = 8;
  }
  else if (*((unsigned char *)v4 + 289))
  {
    int v5 = 7;
  }
  else if (*((unsigned char *)v4 + 288))
  {
    int v5 = 6;
  }
  else if (*((unsigned char *)v4 + 287))
  {
    int v5 = 4;
  }
  else if (*((unsigned char *)v4 + 318))
  {
    int v5 = 12;
  }
  else
  {
    int v5 = 8;
  }
  *(_DWORD *)(a1 + 1744) = v5;
  uint64_t v6 = (uint64_t *)(a1 + 1576);
  *(_DWORD *)(a1 + 1584) = 0;
  *(void *)(a1 + 1736) = 0xFFFFFFFFLL;
  sub_1CBA90558((void *)(a1 + 1576), *(_DWORD *)(*(void *)(a1 + 248) + 44));
  uint64_t v7 = a1 + 1408;
  *(_DWORD *)(a1 + 1416) = 0;
  *(void *)(a1 + 1568) = 0xFFFFFFFFLL;
  sub_1CBA90558((void *)(a1 + 1408), *(_DWORD *)(*(void *)(a1 + 248) + 44));
  *(void *)(a1 + 552) = 0;
  sub_1CBA904E0((_DWORD *)(a1 + 1328));
  sub_1CBA904E0((_DWORD *)(a1 + 1368));
  uint64_t v195 = (char *)&v197;
  uint64_t v196 = 0xA00000000;
  uint64_t v8 = *(void *)(a1 + 248);
  int v9 = *(_DWORD *)(v8 + 44);
  unint64_t v191 = v194;
  int v193 = 6;
  if ((v9 + 63) >= 0x1C0)
  {
    unsigned int v192 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v9 + 63) >= 0x40) {
    bzero(v194, 8 * ((v9 + 63) >> 6));
  }
  unsigned int v192 = (v9 + 63) >> 6;
  v194[12] = v9;
  llvm::AGXTOCOptimizer::collectImplicitDefs(v181, a2, (uint64_t *)&v191, v8, (uint64_t *)&off_1E66A9CA8);
  llvm::AGXTOCOptimizer::collectOptimizableBlocks(v181, a2, &v195, (uint64_t)&v191, *(void *)(v181 + 248), *(void *)(v181 + 544));
  unsigned int v10 = *(_DWORD *)(*(void *)(v181 + 248) + 44);
  unsigned int v11 = v10 + 63;
  uint64_t v12 = (v10 + 63) >> 6;
  BOOL v13 = v189;
  uint64_t __src = v189;
  int v188 = 6;
  uint64_t v180 = v7;
  if (v10 + 63 >= 0x1C0)
  {
    unsigned int v187 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v11 >= 0x40) {
    bzero(v189, 8 * v12);
  }
  unsigned int v187 = (v10 + 63) >> 6;
  unsigned int v190 = v10;
  int v14 = *((unsigned __int8 *)v4 + 377);
  if (!*((unsigned char *)v4 + 377))
  {
    int v15 = (*(unsigned __int16 *)(*(void *)a2 + 18) >> 4) & 0x3FF;
    if (!v15 || v15 == 255 || v15 == 8)
    {
      if (v10)
      {
        if (v10 >= 0x40)
        {
          v189[0] = -1;
          if (v10 + 1 > 0x80) {
            int v173 = v10 + 1;
          }
          else {
            int v173 = 128;
          }
          memset(v189, 255, (((v173 - 65) >> 3) & 0x1FFFFFF8) + 8);
          if (v10 <= 0x7F) {
            unsigned int v174 = 127;
          }
          else {
            unsigned int v174 = v10;
          }
          if (v10 <= (v174 & 0xFFFFFFC0)) {
            goto LABEL_36;
          }
          BOOL v13 = &v189[v174 >> 6];
        }
        *v13 |= ~(-1 << v10);
      }
    }
  }
LABEL_36:
  uint64_t v16 = *(void *)(*(void *)(v181 + 544) + 352);
  uint64_t v17 = -127;
  uint64_t v18 = __src;
  uint64_t v19 = 7552;
  do
  {
    if ((*(void *)(v16 + (((unint64_t)(v17 + 441) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v17 - 71)))
    {
      uint64_t v20 = *(void *)(v181 + 248);
      if (v20) {
        unsigned int v21 = (void *)(v20 + 8);
      }
      else {
        unsigned int v21 = 0;
      }
      int v22 = *(unsigned __int16 *)(v21[6] + (((unint64_t)*(unsigned int *)(*v21 + v19) >> 3) & 0x1FFFFFFE))
          + (*(_DWORD *)(*v21 + v19) & 0xF) * (v17 + 441);
      v18[(unsigned __int16)v22 >> 6] |= 1 << v22;
    }
    if ((*(void *)(v16 + (((unint64_t)(v17 + 313) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v17 + 57)))
    {
      uint64_t v23 = *(void *)(v181 + 248);
      if (v23) {
        unsigned int v24 = (void *)(v23 + 8);
      }
      else {
        unsigned int v24 = 0;
      }
      unint64_t v25 = *(unsigned int *)(*v24 + v19 - 3072);
      unsigned __int16 v26 = *(_WORD *)(v24[6] + ((v25 >> 3) & 0x1FFFFFFE)) + (v25 & 0xF) * (v17 + 313);
      v18[v26 >> 6] |= 1 << v26;
    }
    v19 += 24;
  }
  while (!__CFADD__(v17++, 1));
  uint64_t v175 = a2;
  if (v14)
  {
    if (v196)
    {
      uint64_t v28 = v195;
      uint64_t v29 = 80 * v196;
      do
      {
        BOOL v30 = (void **)(v28 + 8);
        if (v28 + 8 != (char *)&__src)
        {
          unsigned int v31 = v187;
          uint64_t v32 = *((unsigned int *)v28 + 4);
          if (v32 >= v187)
          {
            if (v187) {
              memmove(*v30, __src, 8 * v187);
            }
          }
          else
          {
            if (*((_DWORD *)v28 + 5) < v187)
            {
              *((_DWORD *)v28 + 4) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v32) {
              memmove(*v30, __src, 8 * v32);
            }
            else {
              uint64_t v32 = 0;
            }
            if (v32 != v187) {
              memcpy((char *)*v30 + 8 * v32, (char *)__src + 8 * v32, 8 * v187 - 8 * v32);
            }
          }
          *((_DWORD *)v28 + 4) = v31;
          unsigned int v10 = v190;
        }
        *((_DWORD *)v28 + 18) = v10;
        v28 += 80;
        v29 -= 80;
      }
      while (v29);
    }
  }
  else if (v11 >= 0x40)
  {
    uint64_t v33 = 8 * v12;
    while (!*v18)
    {
      ++v18;
      v33 -= 8;
      if (!v33) {
        goto LABEL_91;
      }
    }
    if (v196)
    {
      int v34 = v195;
      uint64_t v35 = &v195[80 * v196];
      do
      {
        int v36 = v34 + 8;
        unsigned int v37 = v190;
        if (*((_DWORD *)v34 + 18) < v190)
        {
          int v38 = *((_DWORD *)v34 + 18) & 0x3F;
          uint64_t v39 = *((unsigned int *)v34 + 4);
          if (v38)
          {
            uint64_t v48 = *((void *)v34 + 1) + 8 * v39;
            *(void *)(v48 - 8) &= ~(-1 << v38);
          }
          unsigned int v40 = v39;
          *((_DWORD *)v34 + 18) = v37;
          unsigned int v41 = v37 + 63;
          if (v39 != (v37 + 63) >> 6)
          {
            uint64_t v42 = v41 >> 6;
            if (v39 > v42)
            {
              *((_DWORD *)v34 + 4) = v42;
              unsigned int v40 = v41 >> 6;
            }
            else
            {
              if (v42 > *((_DWORD *)v34 + 5)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v42 != v39) {
                bzero((void *)(*v36 + 8 * v39), 8 * (v42 - v39));
              }
              unsigned int v40 = v42;
              *((_DWORD *)v34 + 4) = v42;
              unsigned int v37 = *((_DWORD *)v34 + 18);
            }
          }
          int v43 = v37 & 0x3F;
          if (v43) {
            *(void *)(*v36 + 8 * v40 - 8) &= ~(-1 << v43);
          }
        }
        uint64_t v44 = v187;
        if (v187)
        {
          uint64_t v45 = (uint64_t *)__src;
          uint64_t v46 = (void *)*v36;
          do
          {
            uint64_t v47 = *v45++;
            *v46++ |= v47;
            --v44;
          }
          while (v44);
        }
        v34 += 80;
      }
      while (v34 != v35);
    }
  }
LABEL_91:
  uint64_t v49 = (uint64_t *)v195;
  uint64_t v50 = &v195[80 * v196];
  int v183 = 0;
  if (*((unsigned char *)v4 + 282))
  {
    uint64_t v51 = *(void **)(v175 + 328);
    if (v51 != (void *)(v175 + 320))
    {
      uint64_t v52 = 0;
      uint64_t v53 = v180;
      unint64_t v176 = &v195[80 * v196];
      while (1)
      {
        uint64_t v54 = v50;
        if (v49 != (uint64_t *)v50)
        {
          while ((void *)*v49 != v51)
          {
            v49 += 10;
            if (v49 == (uint64_t *)v50)
            {
              uint64_t v54 = v50;
              goto LABEL_99;
            }
          }
          uint64_t v54 = (char *)v49;
        }
LABEL_99:
        p_src = (void **)(v54 + 8);
        unsigned int v177 = (uint64_t *)v54;
        if (v54 == v50) {
          p_src = &__src;
        }
        int v182 = p_src;
        int v56 = *(_DWORD *)(*(void *)(v181 + 248) + 44);
        unsigned int v198 = v201;
        int v200 = 6;
        if ((v56 + 63) >= 0x1C0)
        {
          unsigned int v199 = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if ((v56 + 63) >= 0x40) {
          bzero(v201, 8 * ((v56 + 63) >> 6));
        }
        unsigned int v199 = (v56 + 63) >> 6;
        int v202 = v56;
        uint64_t v57 = v51 + 6;
        uint64_t v178 = v51;
        uint64_t v58 = v51[7];
        uint64_t v59 = v52;
        if ((void *)v58 != v57)
        {
          uint64_t v59 = v52;
          uint64_t v179 = v57;
          do
          {
            unint64_t v60 = *(unsigned __int8 **)(v58 + 16);
            int v61 = *(unsigned __int16 *)v60;
            BOOL v62 = (v61 - 9) > 0x3C || ((1 << (v61 - 9)) & 0x1000000000000605) == 0;
            BOOL v63 = !v62 || v61 == 0;
            if (!v63 && (v60[8] & 0x10) == 0)
            {
              unint64_t v64 = v60[4];
              for (unint64_t i = *(unsigned int *)(v58 + 40); v64 < i; ++v64)
              {
                uint64_t v66 = *(void *)(v58 + 32);
                if (!*(_DWORD *)(v66 + 32 * v64) && (*(_DWORD *)(v66 + 32 * v64) & 0x1000000) == 0)
                {
                  unint64_t v67 = *(unsigned int *)(v66 + 32 * v64 + 4);
                  if (v67)
                  {
                    if ((v67 - 1) > 0xBE || ((byte_1CDE70110[v67 >> 3] >> (v67 & 7)) & 1) == 0)
                    {
                      uint64_t v68 = *(void *)(v181 + 248);
                      if (v68) {
                        unint64_t v69 = (void *)(v68 + 8);
                      }
                      else {
                        unint64_t v69 = 0;
                      }
                      uint64_t v70 = (unsigned __int16 *)(v69[6]
                                               + (((unint64_t)*(unsigned int *)(*v69
                                                                                     + 24 * v67
                                                                                     + 16) >> 3) & 0x1FFFFFFE));
                      int v72 = *v70;
                      unint64_t v71 = v70 + 1;
                      int v73 = v72 + (*(_DWORD *)(*v69 + 24 * v67 + 16) & 0xF) * v67;
                      do
                      {
                        *(void *)&v198[8 * ((unsigned __int16)v73 >> 6)] |= 1 << v73;
                        unsigned int v184 = (unsigned __int16)v73;
                        int v185 = v59;
                        sub_1CBA91A6C((uint64_t)v6, &v184);
                        int v74 = *v71++;
                        v73 += v74;
                      }
                      while (v74);
                      unint64_t i = *(unsigned int *)(v58 + 40);
                      uint64_t v53 = v180;
                    }
                  }
                }
              }
              if ((v60[16] & 0x40) != 0)
              {
                unsigned int v75 = *(_DWORD *)(*(void *)(v58 + 32) + 4);
                uint64_t v76 = *(void *)(v181 + 248);
                if (v76) {
                  unint64_t v77 = (void *)(v76 + 8);
                }
                else {
                  unint64_t v77 = 0;
                }
                unint64_t v78 = (unsigned __int16 *)(v77[6]
                                         + (((unint64_t)*(unsigned int *)(*v77 + 24 * v75 + 16) >> 3) & 0x1FFFFFFE));
                int v80 = *v78;
                unint64_t v79 = v78 + 1;
                int v81 = v80 + (*(_DWORD *)(*v77 + 24 * v75 + 16) & 0xF) * v75;
                do
                {
                  *(void *)&v198[8 * ((unsigned __int16)v81 >> 6)] |= 1 << v81;
                  unsigned int v184 = (unsigned __int16)v81;
                  int v185 = v59;
                  sub_1CBA91A6C((uint64_t)v6, &v184);
                  int v82 = *v79++;
                  v81 += v82;
                }
                while (v82);
              }
              unsigned int v83 = *(_DWORD **)(v58 + 32);
              uint64_t v84 = *(void *)(v58 + 16);
              int v85 = *(unsigned __int8 *)(v84 + 4);
              if ((*(unsigned char *)(v84 + 8) & 2) != 0)
              {
                int v106 = *(_DWORD *)(v58 + 40);
                uint64_t v57 = v179;
                if (v106 == v85)
                {
                  int v86 = v85;
                }
                else
                {
                  int v107 = v106 - 1;
                  int v86 = v85;
                  do
                  {
                    int v108 = v83[8 * v85];
                    if ((v108 & 0x10000FF) != 0x1000000) {
                      break;
                    }
                    v86 += (v108 & 0x2000000) == 0;
                    if (v107 == v85) {
                      break;
                    }
                    ++v85;
                  }
                  while ((v108 & 0x2000000) == 0);
                }
              }
              else
              {
                int v86 = *(unsigned __int8 *)(v84 + 4);
                uint64_t v57 = v179;
              }
              if (v86)
              {
                uint64_t v87 = &v83[8 * v86];
                do
                {
                  if ((*v83 & 0x20000FF) == 0 && (*v83 & 0x1000000) != 0)
                  {
                    unint64_t v88 = v83[1];
                    if (v88)
                    {
                      if (v88 > 0xBF || ((byte_1CDE70110[v88 >> 3] >> (v88 & 7)) & 1) == 0)
                      {
                        uint64_t v89 = *(void *)(v181 + 248);
                        if (v89) {
                          int v90 = (void *)(v89 + 8);
                        }
                        else {
                          int v90 = 0;
                        }
                        unint64_t v91 = *(unsigned int *)(*v90 + 24 * v88 + 16);
                        uint64_t v92 = (_WORD *)(v90[6] + ((v91 >> 3) & 0x1FFFFFFE));
                        __int16 v94 = *v92;
                        int v93 = v92 + 1;
                        unsigned __int16 v95 = v94 + (v91 & 0xF) * v88;
                        do
                        {
                          unsigned int v96 = v95;
                          if (v6 != sub_1CBA91B88(v6, v95) || v97 != 0xFFFFFFFFLL)
                          {
                            unint64_t v100 = sub_1CBA91B88(v6, v98);
                            long long v102 = (unsigned int *)(*v6 + 16 * *(unsigned int *)(*v100 + 16 * v101 + 8));
                            if ((int)v102[1] >= (int)v52)
                            {
                              uint64_t v103 = v96 >> 6;
                              if ((*((void *)*v182 + v103) & (1 << v96)) != 0)
                              {
                                *(void *)&v198[8 * v103] |= 1 << v96;
                                unsigned int v184 = v96;
                                int v185 = v59;
                                long long v102 = &v184;
                                uint64_t v104 = (uint64_t)v6;
                              }
                              else
                              {
                                uint64_t v104 = v53;
                              }
                              sub_1CBA91A6C(v104, v102);
                            }
                          }
                          int v105 = *v93++;
                          unsigned __int16 v95 = v105 + v96;
                        }
                        while (v105);
                      }
                    }
                  }
                  v83 += 8;
                }
                while (v83 != v87);
                uint64_t v59 = (v59 + 1);
                uint64_t v57 = v179;
                if (!v58)
                {
LABEL_167:
                  while ((*(_WORD *)(v58 + 44) & 8) != 0)
                    uint64_t v58 = *(void *)(v58 + 8);
                  goto LABEL_168;
                }
              }
              else
              {
                uint64_t v59 = (v59 + 1);
              }
            }
            if ((*(unsigned char *)v58 & 4) == 0) {
              goto LABEL_167;
            }
LABEL_168:
            uint64_t v58 = *(void *)(v58 + 8);
          }
          while ((void *)v58 != v57);
        }
        int v109 = -1;
        unint64_t v110 = v57;
        do
        {
          unint64_t v110 = (void *)v110[1];
          ++v109;
        }
        while (v110 != v57);
        if (v109)
        {
          unint64_t v111 = *v57 & 0xFFFFFFFFFFFFFFF8;
          if (!v111 || (*(unsigned char *)v111 & 4) == 0)
          {
            while ((*(_WORD *)(v111 + 44) & 4) != 0)
              unint64_t v111 = *(void *)v111 & 0xFFFFFFFFFFFFFFF8;
          }
          if ((*(unsigned char *)(*(void *)(v111 + 16) + 8) & 0x20) != 0) {
            break;
          }
        }
        if ((**(unsigned char **)(**(void **)(v181 + 544) + 360) & 4) != 0)
        {
          uint64_t v112 = v178[11];
          for (uint64_t j = v178[12]; v112 != j; v112 += 8)
          {
            uint64_t v114 = *(unsigned __int16 **)(*(void *)v112 + 152);
            BOOL v115 = *(unsigned __int16 **)(*(void *)v112 + 160);
            if (v115 != v114)
            {
              uint64_t v116 = *(void *)(v181 + 248);
              if (v116) {
                uint64_t v117 = (uint64_t *)(v116 + 8);
              }
              else {
                uint64_t v117 = 0;
              }
              uint64_t v118 = *v117;
              uint64_t v119 = v117[6];
              uint64_t v120 = v117[7];
              do
              {
                uint64_t v121 = v118 + 24 * *v114;
                unint64_t v122 = *(unsigned int *)(v121 + 16);
                uint64_t v123 = (v122 >> 3) & 0x1FFFFFFE;
                unsigned __int16 v124 = *(_WORD *)(v119 + v123) + (v122 & 0xF) * *v114;
                int v125 = (void *)(v120 + 8 * *(unsigned __int16 *)(v121 + 20));
                int v126 = v198;
                BOOL v127 = (unsigned __int16 *)(v119 + 2 + v123);
                do
                {
                  if (!*v125 || (*((void *)v114 + 1) & *v125) != 0) {
                    v126[v124 >> 6] &= ~(1 << v124);
                  }
                  ++v125;
                  int v128 = *v127++;
                  v124 += v128;
                }
                while (v128);
                v114 += 8;
              }
              while (v114 != v115);
            }
          }
          goto LABEL_210;
        }
LABEL_239:
        if (v198 != v201) {
          free(v198);
        }
        uint64_t v49 = v177;
        uint64_t v52 = v59;
        uint64_t v51 = (void *)v178[1];
        uint64_t v50 = v176;
        if (v51 == (void *)(v175 + 320))
        {
          uint64_t v49 = (uint64_t *)v195;
          goto LABEL_243;
        }
      }
      uint64_t v129 = *(unsigned int *)(v111 + 40);
      if (v129)
      {
        uint64_t v130 = *(void *)(v111 + 32);
        uint64_t v131 = v130 + 32 * v129;
        int v132 = v198;
        do
        {
          if (!*(unsigned char *)v130)
          {
            unsigned int v133 = *(_DWORD *)(v130 + 4);
            uint64_t v134 = *(void *)(v181 + 248);
            if (v134) {
              unint64_t v135 = (void *)(v134 + 8);
            }
            else {
              unint64_t v135 = 0;
            }
            unint64_t v136 = *(unsigned int *)(*v135 + 24 * v133 + 16);
            unsigned int v137 = (unsigned __int16 *)(v135[6] + ((v136 >> 3) & 0x1FFFFFFE));
            int v139 = *v137;
            uint64_t v138 = v137 + 1;
            int v140 = v139 + (v136 & 0xF) * v133;
            do
            {
              v132[(unsigned __int16)v140 >> 6] &= ~(1 << v140);
              int v141 = *v138++;
              v140 += v141;
            }
            while (v141);
          }
          v130 += 32;
        }
        while (v130 != v131);
      }
LABEL_210:
      int v142 = v202;
      if (v202)
      {
        uint64_t v143 = 0;
        int v144 = (uint64_t *)v198;
        uint64_t v145 = (v202 - 1) & 0xFFFFFFC0;
        while (1)
        {
          uint64_t v147 = *v144++;
          uint64_t v146 = v147;
          unint64_t v148 = v145 == v143 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v202 : -1;
          unint64_t v149 = v148 & v146;
          if (v149) {
            break;
          }
          v143 += 64;
          if (v145 + 64 == v143) {
            goto LABEL_239;
          }
        }
        signed int v150 = __clz(__rbit64(v149)) + v143;
        if ((v150 & 0x80000000) == 0)
        {
          do
          {
            if (v6 != sub_1CBA91B88(v6, v150) || v151 != 0xFFFFFFFFLL)
            {
              unsigned int v153 = sub_1CBA91B88(v6, v152);
              uint64_t v155 = (unsigned int *)(*v6 + 16 * *(unsigned int *)(*v153 + 16 * v154 + 8));
              if ((int)v155[1] >= (int)v52)
              {
                sub_1CBA91A6C(v53, v155);
                int v142 = v202;
              }
            }
            unsigned int v156 = v150 + 1;
            if (v150 + 1 == v142) {
              break;
            }
            unsigned int v157 = v156 >> 6;
            unsigned int v158 = v142 - 1;
            if (v156 >> 6 > (v142 - 1) >> 6) {
              break;
            }
            uint64_t v159 = 0;
            uint64_t v160 = v158 >> 6;
            int v161 = v156 & 0x3F;
            BOOL v62 = v161 == 0;
            unint64_t v162 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v161;
            unint64_t v163 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v158;
            uint64_t v164 = v62 ? -1 : ~v162;
            int v165 = -64 * v157;
            uint64_t v166 = v160 - v157;
            unint64_t v167 = &v198[8 * v157];
            while (1)
            {
              uint64_t v168 = v159 ? -1 : v164;
              unint64_t v169 = v166 == v159 ? v163 : -1;
              unint64_t v170 = v168 & v169 & *(void *)&v167[8 * v159];
              if (v170) {
                break;
              }
              v165 -= 64;
              if (v166 + 1 == ++v159) {
                goto LABEL_239;
              }
            }
            signed int v150 = __clz(__rbit64(v170)) - v165;
          }
          while (v150 >= 0);
        }
      }
      goto LABEL_239;
    }
  }
LABEL_243:
  int v183 = 0;
  uint64_t v171 = *(void *)(v175 + 328);
  if (v171 != v175 + 320)
  {
    while (v49 != (uint64_t *)v50)
    {
      if (*v49 == v171)
      {
        if (v49 == (uint64_t *)v50) {
          break;
        }
        sub_1CBA905E0(v181, *v49, v49 + 1, &v183, 1);
LABEL_250:
        uint64_t v171 = *(void *)(v171 + 8);
        if (v171 == v175 + 320) {
          goto LABEL_251;
        }
      }
      else
      {
        v49 += 10;
      }
    }
    sub_1CBA905E0(v181, v171, (uint64_t *)&__src, &v183, 0);
    uint64_t v49 = (uint64_t *)v50;
    goto LABEL_250;
  }
LABEL_251:
  if (__src != v189) {
    free(__src);
  }
  if (v191 != v194) {
    free(v191);
  }
  sub_1CB913F50(&v195);
  return 0;
}

_DWORD *sub_1CBA904E0(_DWORD *result)
{
  int v1 = *result;
  if (*result > 1u || result[1])
  {
    if (v1)
    {
      uint64_t v3 = result + 2;
      __n128 v4 = result + 10;
    }
    else
    {
      uint64_t v2 = result[4];
      if (((2 * v1) & 0xFFFFFFFC) < v2 && v2 >= 0x41) {
        return sub_1CD419D7C(result);
      }
      if (!v2)
      {
        int v5 = 0;
LABEL_10:
        *uint64_t result = v5;
        result[1] = 0;
        return result;
      }
      uint64_t v3 = (_DWORD *)*((void *)result + 1);
      __n128 v4 = &v3[2 * v2];
    }
    do
    {
      _DWORD *v3 = -1;
      v3 += 2;
    }
    while (v3 != v4);
    int v5 = *result & 1;
    goto LABEL_10;
  }
  return result;
}

void *sub_1CBA90558(void *result, unsigned int a2)
{
  unsigned int v2 = *((_DWORD *)result + 38);
  if (v2 < a2 || v2 >> 2 > a2)
  {
    int v5 = result;
    free(*((void **)result + 18));
    uint64_t result = malloc_type_calloc(a2, 2uLL, 0x6D9A4F0CuLL);
    if (!result && (a2 || (uint64_t result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v5[18] = result;
    *((_DWORD *)v5 + 38) = a2;
  }
  return result;
}

void sub_1CBA905E0(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4, int a5)
{
  uint64_t v250 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a2 + 32) + 8) + 16))(*(void *)(*(void *)(a2 + 32) + 8), **(void **)(a2 + 32));
  uint64_t v8 = v7;
  int v223 = *(unsigned __int8 *)(v7 + 326);
  if (*(unsigned char *)(v7 + 326))
  {
    int v9 = 0;
  }
  else if (*(unsigned char *)(v7 + 319))
  {
    int v9 = -1;
  }
  else
  {
    int v9 = -4;
  }
  uint64_t v10 = a2 + 48;
  uint64_t v11 = *(void *)(a2 + 56);
  if (v11 != a2 + 48)
  {
    uint64_t v12 = (void *)(a1 + 552);
    uint64_t v224 = v7;
    uint64_t v210 = a2 + 48;
    while (1)
    {
      BOOL v13 = *(unsigned __int16 **)(v11 + 16);
      int v14 = *v13;
      BOOL v16 = (v14 - 9) <= 0x3C && ((1 << (v14 - 9)) & 0x1000000000000605) != 0
         || v14 == 0;
      if (v16 || (v13[4] & 0x10) != 0) {
        goto LABEL_333;
      }
      uint64_t v245 = 1;
      for (uint64_t i = 8; i != 40; i += 16)
        *(_DWORD *)((char *)&v245 + i) = -1;
      unsigned int v220 = v13;
      int v18 = *v13;
      BOOL v19 = (v18 - 1452) >= 0x90 && (v18 - 971) > 0xF;
      uint64_t v233 = v11;
      if (!v19)
      {
        uint64_t v20 = *(void *)(v11 + 32);
        unsigned int v21 = *(unsigned char *)(v20 + 160) == 1 ? 6 : 7;
        int v22 = *(unsigned char *)(v20 + 32 * v21) == 1 ? 1 : 2;
        int v228 = v22;
        uint64_t v23 = *(void *)(a1 + 248);
        uint64_t v24 = *a3;
        unsigned int v217 = *(_DWORD *)(v20 + 100);
        if (sub_1CBA91BF4(v217, *a3, v23)) {
          int v215 = 0;
        }
        else {
          int v215 = ((*(_DWORD *)(v20 + 96) >> 26) & ~HIBYTE(*(_DWORD *)(v20 + 96)) & 1) != 0
        }
               ? 1
               : sub_1CBA91C5C(a1, *a4, v217);
        uint64_t v229 = v228 + v21;
        unint64_t v25 = (_DWORD *)(v20 + 32 * v229);
        unsigned int v26 = v25[1];
        BOOL v27 = sub_1CBA91BF4(v26, v24, v23);
        uint64_t v8 = v224;
        uint64_t v11 = v233;
        uint64_t v28 = v20 + 96;
        if (v27
          || (((*v25 >> 26) & ~HIBYTE(*v25) & 1) == 0 ? (v29 = sub_1CBA91C5C(a1, *a4, v26), uint64_t v28 = v20 + 96) : (v29 = 1),
              (v215 & v29 & 1) == 0))
        {
          LODWORD(v239) = v217;
          uint64_t v240 = v28;
          sub_1CBA92C8C((uint64_t)&__base, (uint64_t)&v245, (int *)&v239, &v240);
          LODWORD(v239) = *(_DWORD *)(v20 + 32 * v229 + 4);
          uint64_t v240 = v20 + 32 * v229;
          sub_1CBA92C8C((uint64_t)&__base, (uint64_t)&v245, (int *)&v239, &v240);
          unsigned int v220 = *(unsigned __int16 **)(v233 + 16);
          int v18 = *v220;
        }
      }
      if ((v18 - 5396) <= 0x1DF)
      {
        uint64_t v30 = *(void *)(v11 + 32);
        unsigned int v31 = *(_DWORD *)(v30 + 64);
        if (!(_BYTE)v31)
        {
          uint64_t v32 = *(unsigned char *)(v30 + 128) == 1 ? 5 : 6;
          uint64_t v33 = *(void *)(a1 + 248);
          uint64_t v34 = *a3;
          unsigned int v230 = *(_DWORD *)(v30 + 68);
          if (sub_1CBA91BF4(v230, *a3, v33)) {
            int v218 = 0;
          }
          else {
            int v218 = ((v31 >> 26) & ~HIBYTE(v31) & 1) != 0 ? 1 : sub_1CBA91C5C(a1, *a4, v230);
          }
          uint64_t v225 = v32;
          uint64_t v35 = (_DWORD *)(v30 + 32 * v32);
          unsigned int v36 = v35[1];
          BOOL v37 = sub_1CBA91BF4(v36, v34, v33);
          uint64_t v8 = v224;
          if (v37
            || (((*v35 >> 26) & ~HIBYTE(*v35) & 1) == 0 ? (int v38 = sub_1CBA91C5C(a1, *a4, v36)) : (int v38 = 1),
                (v218 & v38 & 1) == 0))
          {
            LODWORD(v239) = v230;
            uint64_t v240 = v30 + 64;
            sub_1CBA92C8C((uint64_t)&__base, (uint64_t)&v245, (int *)&v239, &v240);
            LODWORD(v239) = *(_DWORD *)(v30 + 32 * v225 + 4);
            uint64_t v240 = (uint64_t)v35;
            sub_1CBA92C8C((uint64_t)&__base, (uint64_t)&v245, (int *)&v239, &v240);
            unsigned int v220 = *(unsigned __int16 **)(v233 + 16);
          }
        }
      }
      if (*(unsigned char *)(v8 + 327))
      {
        uint64_t v39 = v220;
        int v40 = *v220;
        unsigned int v41 = v40 - 2079;
        BOOL v42 = (v40 - 3562) < 0x48;
        if (v41 < 0x48) {
          BOOL v42 = 1;
        }
        BOOL v219 = v42;
      }
      else
      {
        BOOL v219 = 0;
        uint64_t v39 = v220;
      }
      int v43 = 0;
      unint64_t v44 = *((void *)v39 + 2);
      if (*(unsigned char *)(v8 + 283))
      {
        if (a5)
        {
          int v45 = *v39;
          int v43 = 1;
          if ((v45 - 9) > 0x3C || ((1 << (v45 - 9)) & 0x1000000000000605) == 0)
          {
            if (*v39)
            {
              if (*((void *)v39 + 1) & 0x10 | *((void *)v39 + 2) & 1) {
                int v43 = 1;
              }
              else {
                int v43 = (v44 >> 1) & 1;
              }
            }
          }
        }
      }
      uint64_t v46 = v39[1];
      uint64_t v242 = 1;
      for (uint64_t j = 8; j != 40; j += 16)
        *(_DWORD *)((char *)&v242 + j) = -1;
      uint64_t v226 = v46;
      uint64_t v231 = v44 & 0xE00;
      int v239 = v241;
      uint64_t v240 = 0x400000000;
      uint64_t v48 = *((unsigned __int8 *)v39 + 4);
      if ((int)v48 + 1 < v46) {
        int v49 = v43;
      }
      else {
        int v49 = 0;
      }
      if (v49 == 1)
      {
        for (uint64_t k = v48 + 1; k != v226; ++k)
        {
          BOOL v51 = v231 == 2560 && v48 == 2;
          uint64_t v52 = *(void *)(v233 + 32);
          uint64_t v53 = (_DWORD *)(v52 + 32 * v48);
          if (v51) {
            uint64_t v54 = 0;
          }
          else {
            uint64_t v54 = k;
          }
          if (!*(unsigned char *)v53)
          {
            unint64_t v55 = (unsigned char *)(v52 + 32 * v54);
            if (*v55 == 1)
            {
              int v56 = *(_DWORD *)(v52 + 32 * v48 + 4);
              if (v56)
              {
                if (v245)
                {
                  int v57 = 2;
                  uint64_t v58 = &v246;
                }
                else
                {
                  int v57 = v247;
                  if (!v247) {
                    goto LABEL_93;
                  }
                  uint64_t v58 = v246;
                }
                int v59 = v57 - 1;
                unsigned int v60 = v59 & (37 * v56);
                int v61 = v58[2 * v60];
                if (v56 != v61)
                {
                  int v62 = 1;
                  while (v61 != -1)
                  {
                    unsigned int v63 = v60 + v62++;
                    unsigned int v60 = v63 & v59;
                    int v61 = v58[2 * v60];
                    if (v56 == v61) {
                      goto LABEL_100;
                    }
                  }
LABEL_93:
                  if (v240 >= (unint64_t)HIDWORD(v240)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v239 + v240) = v53;
                  unsigned int v64 = v240 + 1;
                  LODWORD(v240) = v64;
                  if (v64 >= HIDWORD(v240)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v239 + v64) = v55;
                  LODWORD(v240) = v240 + 1;
                  unsigned int v65 = v53[1];
                  if (!sub_1CBA91BF4(v65, *a3, *(void *)(a1 + 248))
                    && (((*v53 >> 26) & ~HIBYTE(*v53) & 1) != 0 || sub_1CBA91C5C(a1, *a4, v65)))
                  {
                    *(void *)(v52 + 32 * v54 + 16) |= 0x10uLL;
                    if (v219)
                    {
                      LODWORD(v236) = v65;
                      uint64_t v237 = v52 + 32 * v48;
                      sub_1CBA92C8C((uint64_t)&__base, (uint64_t)&v242, (int *)&v236, &v237);
                    }
                  }
                }
              }
            }
          }
LABEL_100:
          ++v48;
        }
      }
      unsigned int v66 = v242;
      if (v242 >= 2)
      {
        unint64_t v67 = v240;
        if (v240)
        {
          unint64_t v68 = 0;
          unint64_t v69 = v239;
          uint64_t v70 = v243;
          while (1)
          {
            int v71 = *(_DWORD *)(v69[v68] + 4);
            if (v66) {
              break;
            }
            int v72 = v244;
            int v73 = v70;
            if (v244) {
              goto LABEL_109;
            }
LABEL_114:
            v68 += 2;
            if (v68 >= v67)
            {
              unsigned int v79 = 0;
              while (1)
              {
                uint64_t v80 = 0;
                int v81 = 0;
                unsigned int v82 = *(_DWORD *)(*((void *)v239 + v79) + 4);
                uint64_t v211 = *((void *)v239 + (v79 | 1));
                do
                {
                  if (v79 != v81)
                  {
                    unsigned int v83 = *(_DWORD *)(*((void *)v239 + v80) + 4);
                    uint64_t v84 = *((void *)v239 + (v81 | 1u));
                    if (v82 == v83
                      || v82 - 1 <= 0x3FFFFFFE
                      && v83 - 1 <= 0x3FFFFFFE
                      && llvm::MCRegisterInfo::regsOverlap((void *)(*(void *)(a1 + 248) + 8), v82, v83))
                    {
                      if (v66)
                      {
                        int v85 = 2;
                        int v86 = &v243;
                      }
                      else
                      {
                        int v85 = v244;
                        if (!v244) {
                          goto LABEL_147;
                        }
                        int v86 = v243;
                      }
                      int v87 = v85 - 1;
                      unsigned int v88 = (v85 - 1) & (37 * v82);
                      int v89 = v86[2 * v88];
                      if (v82 == v89)
                      {
                        BOOL v91 = 1;
                      }
                      else
                      {
                        int v90 = 1;
                        do
                        {
                          BOOL v91 = v89 != -1;
                          if (v89 == -1) {
                            break;
                          }
                          unsigned int v92 = v88 + v90++;
                          unsigned int v88 = v92 & v87;
                          int v89 = v86[2 * v88];
                        }
                        while (v82 != v89);
                      }
                      if (v66)
                      {
                        int v93 = 2;
                        __int16 v94 = &v243;
                      }
                      else
                      {
                        int v93 = v244;
                        if (!v244) {
                          goto LABEL_145;
                        }
                        __int16 v94 = v243;
                      }
                      int v95 = v93 - 1;
                      unsigned int v96 = v95 & (37 * v83);
                      int v97 = v94[2 * v96];
                      if (v83 != v97)
                      {
                        int v98 = 1;
                        while (v97 != -1)
                        {
                          unsigned int v99 = v96 + v98++;
                          unsigned int v96 = v99 & v95;
                          int v97 = v94[2 * v96];
                          if (v83 == v97) {
                            goto LABEL_139;
                          }
                        }
LABEL_145:
                        if (!v91) {
                          goto LABEL_147;
                        }
LABEL_146:
                        *(void *)(v211 + 16) = 0;
                        *(void *)(v84 + 16) = 0;
                        sub_1CBA91D40((uint64_t)&v242, v82);
                        sub_1CBA91D40((uint64_t)&v242, v83);
                        unsigned int v66 = v242;
                        goto LABEL_147;
                      }
LABEL_139:
                      if (!v91) {
                        goto LABEL_146;
                      }
                    }
                  }
LABEL_147:
                  if (v66 < 2) {
                    goto LABEL_150;
                  }
                  uint64_t v80 = (v81 + 2);
                  int v81 = v80;
                }
                while (v240 > v80);
                v79 += 2;
                if (v240 <= v79) {
                  goto LABEL_150;
                }
              }
            }
          }
          int v72 = 2;
          int v73 = &v243;
LABEL_109:
          int v74 = v72 - 1;
          unsigned int v75 = v74 & (37 * v71);
          int v76 = v73[2 * v75];
          if (v71 == v76)
          {
LABEL_113:
            *(void *)(*(void *)((char *)v69 + ((8 * v68) | 8)) + 16) |= 0x10uLL;
          }
          else
          {
            int v77 = 1;
            while (v76 != -1)
            {
              unsigned int v78 = v75 + v77++;
              unsigned int v75 = v78 & v74;
              int v76 = v73[2 * v75];
              if (v71 == v76) {
                goto LABEL_113;
              }
            }
          }
          goto LABEL_114;
        }
      }
LABEL_150:
      uint64_t v8 = v224;
      uint64_t v11 = v233;
      unint64_t v100 = v220;
      if (*(unsigned char *)(v224 + 282)) {
        break;
      }
LABEL_326:
      ++*a4;
      if (v239 != v241) {
        free(v239);
      }
      if ((v242 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v243, 8);
      }
      if ((v245 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v246, 8);
      }
      uint64_t v10 = v210;
      if (!v11)
      {
LABEL_336:
        while ((*(_WORD *)(v11 + 44) & 8) != 0)
          uint64_t v11 = *(void *)(v11 + 8);
        goto LABEL_337;
      }
LABEL_333:
      if ((*(unsigned char *)v11 & 4) == 0) {
        goto LABEL_336;
      }
LABEL_337:
      uint64_t v11 = *(void *)(v11 + 8);
      if (v11 == v10) {
        return;
      }
    }
    unsigned int v101 = *(unsigned __int16 **)(v233 + 16);
    int v102 = *v101;
    BOOL v104 = (v102 - 9) <= 0x3C && ((1 << (v102 - 9)) & 0x1000000000000605) != 0
        || v102 == 0;
    if (!v104 && (v101[4] & 0x10) == 0 && (v101[8] & 1) == 0)
    {
      *uint64_t v12 = 0;
LABEL_220:
      BOOL v144 = (v102 - 9) <= 0x3C && ((1 << (v102 - 9)) & 0x1000000000000605) != 0
          || v102 == 0;
      if (v144 || (v101[4] & 0x10) != 0 || (v101[8] & 1) != 0)
      {
        unsigned int v145 = v101[3];
        uint64_t v146 = *(void *)(a1 + 304);
        if (*((unsigned char *)v100 + 4))
        {
          uint64_t v147 = *(_DWORD **)(v11 + 32);
          if ((*v147 & 0x10000FF) == 0x1000000)
          {
            uint64_t v148 = v147[1];
            *(void *)&long long __base = v249;
            *((void *)&__base + 1) = 0x400000000;
            sub_1CBA91DC8(v148, (uint64_t)&__base, *(void **)(a1 + 248));
            if (*(_WORD *)(v146 + 24 * v145 + 16)) {
              int v149 = *(__int16 *)(*(void *)(v8 + 144) + 4 * *(unsigned __int16 *)(v146 + 24 * v145 + 14));
            }
            else {
              int v149 = 1;
            }
            int v221 = v149;
            BOOL v236 = v238;
            uint64_t v237 = 0x400000000;
            if (DWORD2(__base))
            {
              uint64_t v207 = v146;
              unsigned int v212 = v145;
              unsigned __int8 v150 = 0;
              int v151 = (unsigned int *)__base;
              uint64_t v152 = 4 * DWORD2(__base);
              do
              {
                uint64_t v153 = *v151;
                __int16 v154 = *(_WORD *)(*(void *)(*(void *)(a1 + 248) + 112) + 2 * v153);
                int v155 = sub_1CBA92238((void *)a1, *a4, *v151);
                if (v237 >= (unint64_t)HIDWORD(v237)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((_DWORD *)v236 + v237) = v155;
                LODWORD(v237) = v237 + 1;
                v150 |= v155 != 0x7FFFFFFF;
                sub_1CBA923F4(a1 + 552, v153, v154 & 1, *(_DWORD *)(a1 + 1744), v221);
                ++v151;
                v152 -= 4;
              }
              while (v152);
              unint64_t v156 = DWORD2(__base);
              int v157 = v150 & (DWORD2(__base) != 0);
              uint64_t v11 = v233;
              unsigned int v145 = v212;
              uint64_t v146 = v207;
              if (v157 == 1)
              {
                unint64_t v158 = 0;
                do
                {
                  int v159 = *((_DWORD *)v236 + v158);
                  if (v159 != 0x7FFFFFFF)
                  {
                    unsigned int v160 = *(_WORD *)(*(void *)(*(void *)(a1 + 248) + 112)
                                    + 2 * *(unsigned int *)(__base + 4 * v158)) & 1;
                    int v161 = v159 + ~*a4;
                    uint64_t v162 = *(void *)(v233 + 32) + 32;
                    LODWORD(v234) = *(_DWORD *)(__base + 4 * v158);
                    HIDWORD(v234) = v161;
                    unint64_t v235 = v162 & 0xFFFFFFFFFFFFFFFBLL;
                    sub_1CBA92788(a1 + 552, (uint64_t)&v234, v160, *(_DWORD *)(a1 + 1744));
                    if ((v235 & 4) != 0)
                    {
                      unint64_t v163 = (void **)(v235 & 0xFFFFFFFFFFFFFFF8);
                      if ((v235 & 0xFFFFFFFFFFFFFFF8) != 0)
                      {
                        if (*v163 != v163 + 2) {
                          free(*v163);
                        }
                        MEMORY[0x1D25D9CE0](v163, 0x1080C40ED926357);
                      }
                    }
                    unint64_t v156 = DWORD2(__base);
                  }
                  ++v158;
                }
                while (v158 < v156);
              }
            }
            if (v236 != v238) {
              free(v236);
            }
            if ((_OWORD *)__base != v249) {
              free((void *)__base);
            }
          }
        }
        memset(v249, 0, sizeof(v249));
        long long __base = 0u;
        if (v226 >= 2)
        {
          uint64_t v208 = v146;
          unsigned int v213 = v145;
          uint64_t v164 = 0;
          int v165 = 0;
          unsigned int v166 = 0;
          do
          {
            uint64_t v167 = *(void *)(v233 + 32);
            if ((*(_DWORD *)(v167 + v164) & 0x10000FF) == 0)
            {
              unsigned int v168 = *(_DWORD *)(v167 + v164 + 4);
              if (v168)
              {
                int v169 = *a4;
                if (sub_1CBA91C5C(a1, *a4, v168)) {
                  int v170 = 0x7FFFFFFF;
                }
                else {
                  int v170 = sub_1CBA92238((void *)a1, v169, v168);
                }
                uint64_t v171 = (int *)&v249[-1] + 3 * v166;
                *uint64_t v171 = v170;
                v171[1] = v165;
                v171[2] = v166++;
              }
            }
            ++v165;
            v164 += 32;
          }
          while (32 * (v226 - 1) != v164);
          if (v166 >= 2) {
            qsort(&__base, v166, 0xCuLL, (int (__cdecl *)(const void *, const void *))sub_1CBA9363C);
          }
          uint64_t v172 = v166 - 1;
          if ((int)(v166 - 1) >= 0)
          {
            uint64_t v216 = 0;
            unsigned int v222 = 0;
            uint64_t v173 = v208 + 24 * v213;
            int v227 = (unsigned __int16 *)(v173 + 18);
            unsigned int v174 = (_WORD *)(v173 + 20);
            do
            {
              uint64_t v175 = (char *)&v249[-1] + 12 * v172;
              int v176 = *((_DWORD *)v175 + 2);
              unint64_t v177 = *(unsigned int *)(*(void *)(v233 + 32) + 32 * *((unsigned int *)v175 + 1) + 4);
              BOOL v236 = v238;
              uint64_t v237 = 0x400000000;
              sub_1CBA91DC8(v177, (uint64_t)&v236, *(void **)(a1 + 248));
              if (*v174)
              {
                uint64_t v178 = (int *)(*(void *)(v224 + 152) + 12 * *v227 + 8);
                uint64_t v179 = 12 * (unsigned __int16)*v174;
                while (1)
                {
                  unsigned int v180 = *(v178 - 2);
                  if (v180 >= v166)
                  {
                    if (v180 > v166) {
                      goto LABEL_274;
                    }
                    if (!*(v178 - 1)) {
                      break;
                    }
                  }
                  v178 += 3;
                  v179 -= 12;
                  if (!v179) {
                    goto LABEL_274;
                  }
                }
                int v181 = *v178;
              }
              else
              {
LABEL_274:
                int v181 = 0;
              }
              if (!v223
                || v181 < 0
                || (v177 - 1) <= 0x71E
                && ((byte_1CDE710C6[v177 >> 3] >> (v177 & 7)) & 1) != 0)
              {
                goto LABEL_288;
              }
              uint64_t v234 = 0;
              int v182 = (unsigned int *)v236;
              if (v237)
              {
                uint64_t v183 = *(void *)(*(void *)(a1 + 248) + 112);
                uint64_t v184 = 4 * v237;
                int v185 = (unsigned int *)v236;
                do
                {
                  unsigned int v186 = *v185++;
                  unsigned int v187 = (_DWORD *)((unint64_t)&v234 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                                    * (*(_WORD *)(v183 + 2 * v186) & 1)));
                  ++*v187;
                  v184 -= 4;
                }
                while (v184);
                int v188 = v234;
              }
              else
              {
                int v188 = 0;
              }
              unsigned int v189 = v188 + v222;
              if (v189 >= 3
                || (HIDWORD(v234) + HIDWORD(v216)) > 2
                || (((v176 & 0xFFFFFFFD) == 0) & v216) != 0)
              {
LABEL_288:
                int v182 = (unsigned int *)v236;
                if (v237)
                {
                  int v190 = 2 * (v181 > 0);
                  uint64_t v191 = 4 * v237;
                  do
                  {
                    unsigned int v192 = *v182++;
                    sub_1CBA923F4(a1 + 552, v192, *(_WORD *)(*(void *)(*(void *)(a1 + 248) + 112) + 2 * v192) & 1, *(_DWORD *)(a1 + 1744), v190);
                    v191 -= 4;
                  }
                  while (v191);
                  int v182 = (unsigned int *)v236;
                }
              }
              else
              {
                if ((v176 & 0xFFFFFFFD) == 0) {
                  LOBYTE(v216) = (*(unsigned char *)(v224 + 327) == 0) | v216;
                }
                HIDWORD(v216) += HIDWORD(v234);
                unsigned int v222 = v189;
              }
              if (v182 != (unsigned int *)v238) {
                free(v182);
              }
              BOOL v19 = v172-- <= 0;
            }
            while (!v19);
          }
          uint64_t v11 = v233;
          if (v166)
          {
            uint64_t v193 = 0;
            uint64_t v194 = v166;
            do
            {
              uint64_t v195 = *((unsigned int *)&v249[-1] + 3 * v193 + 1);
              if (v231 == 2560 && v195 == 2) {
                uint64_t v197 = 0;
              }
              else {
                uint64_t v197 = (v195 + 1);
              }
              if (DWORD1(__base) != 0x7FFFFFFF)
              {
                uint64_t v198 = *(void *)(v11 + 32);
                uint64_t v199 = v198 + 32 * v197;
                if ((*(unsigned char *)(v199 + 16) & 0x10) == 0
                  && word_1CDE19A64[word_1CDE15928[**(unsigned __int16 **)(v11 + 16)]
                                  + (unint64_t)(unsigned __int16)v197] != 84)
                {
                  uint64_t v200 = *(unsigned int *)(v198 + 32 * v195 + 4);
                  BOOL v236 = v238;
                  uint64_t v237 = 0x400000000;
                  sub_1CBA91DC8(v200, (uint64_t)&v236, *(void **)(a1 + 248));
                  if (v237)
                  {
                    unint64_t v201 = 0;
                    unint64_t v202 = v199 & 0xFFFFFFFFFFFFFFFBLL;
                    do
                    {
                      int v203 = sub_1CBA92238((void *)a1, *a4, *((_DWORD *)v236 + v201));
                      if (v203 != 0x7FFFFFFF)
                      {
                        unsigned int v204 = *(_WORD *)(*(void *)(*(void *)(a1 + 248) + 112)
                                        + 2 * *((unsigned int *)v236 + v201)) & 1;
                        int v205 = v203 + ~*a4;
                        LODWORD(v234) = *((_DWORD *)v236 + v201);
                        HIDWORD(v234) = v205;
                        unint64_t v235 = v202;
                        sub_1CBA92788(a1 + 552, (uint64_t)&v234, v204, *(_DWORD *)(a1 + 1744));
                        if ((v235 & 4) != 0)
                        {
                          uint64_t v206 = (void **)(v235 & 0xFFFFFFFFFFFFFFF8);
                          if ((v235 & 0xFFFFFFFFFFFFFFF8) != 0)
                          {
                            if (*v206 != v206 + 2) {
                              free(*v206);
                            }
                            MEMORY[0x1D25D9CE0](v206, 0x1080C40ED926357);
                          }
                        }
                      }
                      ++v201;
                    }
                    while (v201 < v237);
                  }
                  if (v236 != v238) {
                    free(v236);
                  }
                  uint64_t v11 = v233;
                }
              }
              ++v193;
            }
            while (v193 != v194);
          }
        }
        uint64_t v8 = v224;
      }
      goto LABEL_326;
    }
    uint64_t v105 = 0;
    char v106 = 1;
    do
    {
      char v107 = v106;
      uint64_t v108 = *((unsigned int *)v12 + v105);
      if (v108)
      {
        for (uint64_t m = 0; m != v108; ++m)
        {
          if (!*(_DWORD *)(a1 + 384 * v105 + 16 * m + 564))
          {
            uint64_t v110 = a1 + 384 * v105 + 16 * m;
            unint64_t v111 = *(void *)(v110 + 568);
            if ((v111 & 4) != 0)
            {
              unint64_t v114 = v111 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v112 = *(uint64_t **)v114;
              uint64_t v113 = *(void *)v114 + 8 * *(unsigned int *)(v114 + 8);
            }
            else
            {
              uint64_t v112 = (uint64_t *)(v110 + 568);
              uint64_t v113 = (uint64_t)&v112[v111 > 7];
            }
            while (v112 != (uint64_t *)v113)
            {
              uint64_t v115 = *v112++;
              *(void *)(v115 + 16) |= 0x20uLL;
            }
          }
        }
      }
      char v106 = 0;
      uint64_t v105 = 1;
    }
    while ((v107 & 1) != 0);
    uint64_t v116 = 0;
    char v117 = 1;
    while (1)
    {
      char v118 = v117;
      unint64_t v119 = *((unsigned int *)v12 + v116);
      if (v119)
      {
        unint64_t v120 = 0;
        unsigned int v121 = 0;
        unint64_t v122 = (unint64_t *)(a1 + 568 + 384 * v116);
        do
        {
          if (*((_DWORD *)v122 - 1) > v9)
          {
            uint64_t v123 = a1 + 384 * v116 + 16 * v121;
            *(void *)(v123 + 560) = *(v122 - 1);
            sub_1CB91202C((unint64_t *)(v123 + 568), v122);
            --*(_DWORD *)(v123 + 564);
            ++v121;
            unint64_t v119 = *((unsigned int *)v12 + v116);
          }
          ++v120;
          v122 += 2;
        }
        while (v120 < v119);
      }
      else
      {
        unsigned int v121 = 0;
      }
      *((_DWORD *)v12 + v116) = v121;
      *(void *)&long long __base = v249;
      *((void *)&__base + 1) = 0x800000000;
      unsigned __int16 v124 = (int *)(a1 + 40 * v116 + 1328);
      int v125 = *v124;
      uint64_t v126 = a1 + 40 * v116;
      if (*v124 <= 1) {
        break;
      }
      uint64_t v130 = (unsigned int *)(v126 + 1336);
      if (v125)
      {
        uint64_t v132 = a1 + 40 * v116 + 1368;
        goto LABEL_187;
      }
      uint64_t v130 = *(unsigned int **)v130;
      uint64_t v131 = *(unsigned int *)(a1 + 40 * v116 + 1344);
      if (v131)
      {
        uint64_t v132 = (uint64_t)&v130[2 * v131];
LABEL_187:
        int v125 = *v124 & 1;
        uint64_t v129 = v130;
        while (*v129 >= 0xFFFFFFFE)
        {
          v129 += 2;
          if (v129 == (unsigned int *)v132)
          {
            uint64_t v129 = (unsigned int *)v132;
            break;
          }
        }
        uint64_t v130 = (unsigned int *)v132;
LABEL_192:
        unsigned int v133 = (unsigned int *)(a1 + 40 * v116 + 1336);
        if (v125)
        {
          uint64_t v134 = 4;
        }
        else
        {
          unsigned int v133 = *(unsigned int **)v133;
          uint64_t v134 = *(unsigned int *)(a1 + 40 * v116 + 1344);
        }
        goto LABEL_195;
      }
      uint64_t v134 = 0;
      uint64_t v129 = v130;
      unsigned int v133 = v130;
LABEL_195:
      unint64_t v135 = &v133[2 * v134];
      if (v129 != v135)
      {
        unsigned int v136 = 0;
        do
        {
          int v137 = v129[1];
          if (v137 <= v9)
          {
            if (v136 >= HIDWORD(__base)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(__base + 4 * v136) = *v129;
            unsigned int v136 = ++DWORD2(__base);
          }
          else
          {
            v129[1] = v137 - 1;
          }
          uint64_t v138 = v129 + 2;
          while (v138 != v130)
          {
            unsigned int v139 = *v138;
            v138 += 2;
            if (v139 <= 0xFFFFFFFD)
            {
              uint64_t v129 = v138 - 2;
              goto LABEL_206;
            }
          }
          uint64_t v129 = v130;
LABEL_206:
          ;
        }
        while (v129 != v135);
        int v140 = (int *)__base;
        if (v136)
        {
          uint64_t v141 = 4 * v136;
          do
          {
            int v142 = *v140++;
            sub_1CBA93238((uint64_t)v124, v142);
            v141 -= 4;
          }
          while (v141);
          int v140 = (int *)__base;
        }
        if (v140 != (int *)v249) {
          free(v140);
        }
      }
      char v117 = 0;
      uint64_t v116 = 1;
      if ((v118 & 1) == 0)
      {
        uint64_t v11 = v233;
        unsigned int v101 = *(unsigned __int16 **)(v233 + 16);
        int v102 = *v101;
        uint64_t v8 = v224;
        unint64_t v100 = v220;
        goto LABEL_220;
      }
    }
    BOOL v127 = (void *)(v126 + 1336);
    if (v125)
    {
      uint64_t v128 = 4;
    }
    else
    {
      BOOL v127 = (void *)*v127;
      uint64_t v128 = *(unsigned int *)(a1 + 40 * v116 + 1344);
    }
    uint64_t v129 = (unsigned int *)&v127[v128];
    uint64_t v130 = v129;
    goto LABEL_192;
  }
}

uint64_t *sub_1CBA91A6C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *a2;
  uint64_t result = sub_1CBA91B88((uint64_t *)a1, *a2);
  if (*(_DWORD *)(a1 + 164))
  {
    uint64_t v7 = *(unsigned int *)(a1 + 160);
    uint64_t v8 = *(void *)a1 + 16 * v7;
    int v9 = *(_DWORD *)(v8 + 12);
    *(void *)uint64_t v8 = *(void *)a2;
    *(void *)(v8 + 8) = -1;
    LODWORD(v8) = *(_DWORD *)(a1 + 164) - 1;
    *(_DWORD *)(a1 + 160) = v9;
    *(_DWORD *)(a1 + 164) = v8;
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    unsigned int v11 = *(_DWORD *)(a1 + 8);
    if (v11 >= *(_DWORD *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v7 = *(void *)a1 + 16 * v11;
    *(void *)uint64_t v7 = v10;
    *(void *)(v7 + 8) = -1;
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v7 + 1;
  }
  if (result == (uint64_t *)a1 && v6 == 0xFFFFFFFFLL)
  {
    *(_WORD *)(*(void *)(a1 + 144) + 2 * v4) = v7;
    *(_DWORD *)(*(void *)a1 + 16 * v7 + 8) = v7;
  }
  else
  {
    uint64_t v13 = *(unsigned int *)(*result + 16 * v6 + 8);
    uint64_t v14 = *(void *)a1;
    *(_DWORD *)(*(void *)a1 + 16 * v13 + 12) = v7;
    *(_DWORD *)(v14 + 16 * v6 + 8) = v7;
    *(_DWORD *)(v14 + 16 * v7 + 8) = v13;
  }
  return result;
}

uint64_t *sub_1CBA91B88(uint64_t *result, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(result[18] + 2 * a2);
  unsigned int v3 = *((_DWORD *)result + 2);
  if (v3 > v2)
  {
    uint64_t v4 = *result;
    do
    {
      if (*(_DWORD *)(v4 + 16 * v2) == a2)
      {
        uint64_t v5 = *(unsigned int *)(v4 + 16 * v2 + 8);
        if (v5 != -1 && *(_DWORD *)(v4 + 16 * v5 + 12) == -1) {
          break;
        }
      }
      v2 += 0x10000;
    }
    while (v2 < v3);
  }
  return result;
}

BOOL sub_1CBA91BF4(unsigned int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = (void *)(a3 + 8);
  if (!a3) {
    unsigned int v3 = 0;
  }
  unint64_t v4 = *(unsigned int *)(*v3 + 24 * a1 + 16);
  uint64_t v5 = (_WORD *)(v3[6] + ((v4 >> 3) & 0x1FFFFFFE));
  __int16 v7 = *v5;
  unsigned int v6 = v5 + 1;
  unsigned __int16 v8 = v7 + (v4 & 0xF) * a1;
  do
  {
    uint64_t v9 = (1 << v8) & *(void *)(a2 + 8 * (v8 >> 6));
    if (v9) {
      break;
    }
    int v10 = *v6++;
    v8 += v10;
  }
  while (v10);
  return v9 != 0;
}

uint64_t sub_1CBA91C5C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = *(void *)(a1 + 248);
  if (v4) {
    uint64_t v5 = (void *)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = *(unsigned int *)(*v5 + 24 * a3 + 16);
  __int16 v7 = (_WORD *)(v5[6] + ((v6 >> 3) & 0x1FFFFFFE));
  unsigned __int16 v8 = *v7 + (v6 & 0xF) * a3;
  uint64_t v9 = (uint64_t *)(a1 + 1408);
  while (2)
  {
    int v10 = sub_1CBA91B88(v9, v8);
    BOOL v12 = v9 == v10 && v11 == -1;
    int v13 = v12;
    if (!v12)
    {
      ++v7;
      uint64_t v14 = v11;
      uint64_t v15 = *v10;
      while (1)
      {
        int v16 = *(_DWORD *)(v15 + 16 * v14 + 4);
        if (v16 > a2) {
          return 0;
        }
        if (v16 == a2) {
          break;
        }
        uint64_t v14 = *(unsigned int *)(v15 + 16 * v14 + 12);
        if (v9 == v10 && v14 == 0xFFFFFFFFLL) {
          return 0;
        }
      }
      v8 += *v7;
      if (*v7) {
        continue;
      }
    }
    break;
  }
  return v13 ^ 1u;
}

uint64_t sub_1CBA91D40(uint64_t result, int a2)
{
  uint64_t v2 = result + 8;
  if (*(unsigned char *)result)
  {
    int v3 = 2;
  }
  else
  {
    int v3 = *(_DWORD *)(result + 16);
    if (!v3) {
      return result;
    }
    uint64_t v2 = *(void *)(result + 8);
  }
  int v4 = v3 - 1;
  LODWORD(v5) = (v3 - 1) & (37 * a2);
  unint64_t v6 = (int *)(v2 + 16 * v5);
  int v7 = *v6;
  if (*v6 == a2)
  {
LABEL_8:
    *unint64_t v6 = -2;
    int v10 = *(_DWORD *)(result + 4) + 1;
    *(_DWORD *)result -= 2;
    *(_DWORD *)(result + 4) = v10;
  }
  else
  {
    int v8 = 1;
    while (v7 != -1)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & v4;
      int v7 = *(_DWORD *)(v2 + 16 * v5);
      if (v7 == a2)
      {
        unint64_t v6 = (int *)(v2 + 16 * v5);
        goto LABEL_8;
      }
    }
  }
  return result;
}

uint64_t sub_1CBA91DC8(uint64_t result, uint64_t a2, void *a3)
{
  if ((result - 1) > 0x3FFFFFFE) {
    return result;
  }
  int v3 = result;
  unint64_t v4 = (unint64_t)result >> 3;
  if (result > 0x1BF)
  {
    if (result > 0x71F) {
      return result;
    }
    unint64_t v4 = v4;
    int v5 = 1 << (result & 7);
    goto LABEL_14;
  }
  int v5 = 1 << (result & 7);
  if ((v5 & byte_1CDE6F3CA[v4]) == 0)
  {
    if (result <= 0xB7 && (v5 & byte_1CDE6FE30[v4]) != 0)
    {
      uint64_t v7 = a3[1];
      uint64_t v8 = a3[7];
      uint64_t v9 = *(unsigned int *)(v7 + 24 * result + 4);
      int v10 = *(unsigned __int16 *)(v8 + 2 * v9);
      if (*(_WORD *)(v8 + 2 * v9))
      {
        LOWORD(v10) = v10 + result;
        unsigned int v11 = (_WORD *)(a3[11] + 2 * *(unsigned int *)(v7 + 24 * result + 12));
        BOOL v12 = (unsigned __int16 *)(v8 + 2 * v9 + 2);
        while (*v11 != 1)
        {
          int v13 = *v12++;
          LOWORD(v10) = v13 + v10;
          ++v11;
          if (!v13)
          {
            int v10 = 0;
            goto LABEL_42;
          }
        }
        int v10 = (unsigned __int16)v10;
      }
LABEL_42:
      unsigned int v45 = *(_DWORD *)(a2 + 8);
      if (v45 >= *(_DWORD *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a2 + 4 * v45) = v10;
      unsigned int v6 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v6;
      uint64_t v46 = a3[1];
      uint64_t v47 = a3[7];
      uint64_t v48 = *(unsigned int *)(v46 + 24 * result + 4);
      if (*(_WORD *)(v47 + 2 * v48))
      {
        unsigned __int16 v41 = *(_WORD *)(v47 + 2 * v48) + result;
        int v49 = (_WORD *)(a3[11] + 2 * *(unsigned int *)(v46 + 24 * result + 12));
        uint64_t v50 = (unsigned __int16 *)(v47 + 2 * v48 + 2);
        while (*v49 != 2)
        {
          int v51 = *v50++;
          v41 += v51;
          ++v49;
          if (!v51) {
            goto LABEL_47;
          }
        }
LABEL_48:
        int v3 = v41;
        goto LABEL_49;
      }
      goto LABEL_47;
    }
LABEL_14:
    if ((v5 & byte_1CDE710C6[v4]) == 0) {
      return result;
    }
    uint64_t v14 = a3[1];
    uint64_t v15 = a3[7];
    uint64_t v16 = *(unsigned int *)(v14 + 24 * result + 4);
    int v17 = *(unsigned __int16 *)(v15 + 2 * v16);
    if (*(_WORD *)(v15 + 2 * v16))
    {
      LOWORD(v17) = v17 + result;
      int v18 = (_WORD *)(a3[11] + 2 * *(unsigned int *)(v14 + 24 * result + 12));
      BOOL v19 = (unsigned __int16 *)(v15 + 2 * v16 + 2);
      while (*v18 != 1)
      {
        int v20 = *v19++;
        LOWORD(v17) = v20 + v17;
        ++v18;
        if (!v20)
        {
          int v17 = 0;
          goto LABEL_21;
        }
      }
      int v17 = (unsigned __int16)v17;
    }
LABEL_21:
    unsigned int v21 = *(_DWORD *)(a2 + 8);
    if (v21 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v21) = v17;
    unsigned int v22 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v22;
    uint64_t v23 = a3[1];
    uint64_t v24 = a3[7];
    uint64_t v25 = *(unsigned int *)(v23 + 24 * result + 4);
    int v26 = *(unsigned __int16 *)(v24 + 2 * v25);
    if (*(_WORD *)(v24 + 2 * v25))
    {
      LOWORD(v26) = v26 + result;
      BOOL v27 = (_WORD *)(a3[11] + 2 * *(unsigned int *)(v23 + 24 * result + 12));
      uint64_t v28 = (unsigned __int16 *)(v24 + 2 * v25 + 2);
      while (*v27 != 2)
      {
        int v29 = *v28++;
        LOWORD(v26) = v29 + v26;
        ++v27;
        if (!v29)
        {
          int v26 = 0;
          goto LABEL_28;
        }
      }
      int v26 = (unsigned __int16)v26;
    }
LABEL_28:
    if (v22 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v22) = v26;
    unsigned int v30 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v30;
    uint64_t v31 = a3[1];
    uint64_t v32 = a3[7];
    uint64_t v33 = *(unsigned int *)(v31 + 24 * result + 4);
    int v34 = *(unsigned __int16 *)(v32 + 2 * v33);
    if (*(_WORD *)(v32 + 2 * v33))
    {
      LOWORD(v34) = v34 + result;
      uint64_t v35 = (_WORD *)(a3[11] + 2 * *(unsigned int *)(v31 + 24 * result + 12));
      unsigned int v36 = (unsigned __int16 *)(v32 + 2 * v33 + 2);
      while (*v35 != 3)
      {
        int v37 = *v36++;
        LOWORD(v34) = v37 + v34;
        ++v35;
        if (!v37)
        {
          int v34 = 0;
          goto LABEL_35;
        }
      }
      int v34 = (unsigned __int16)v34;
    }
LABEL_35:
    if (v30 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v30) = v34;
    unsigned int v6 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v6;
    uint64_t v38 = a3[1];
    uint64_t v39 = a3[7];
    uint64_t v40 = *(unsigned int *)(v38 + 24 * result + 4);
    if (*(_WORD *)(v39 + 2 * v40))
    {
      unsigned __int16 v41 = *(_WORD *)(v39 + 2 * v40) + result;
      BOOL v42 = (_WORD *)(a3[11] + 2 * *(unsigned int *)(v38 + 24 * result + 12));
      int v43 = (unsigned __int16 *)(v39 + 2 * v40 + 2);
      while (*v42 != 4)
      {
        int v44 = *v43++;
        v41 += v44;
        ++v42;
        if (!v44) {
          goto LABEL_47;
        }
      }
      goto LABEL_48;
    }
LABEL_47:
    int v3 = 0;
    goto LABEL_49;
  }
  unsigned int v6 = *(_DWORD *)(a2 + 8);
LABEL_49:
  if (v6 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a2 + 4 * v6) = v3;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_1CBA92238(void *a1, int a2, unsigned int a3)
{
  uint64_t v4 = a1[31];
  if (v4) {
    int v5 = (void *)(v4 + 8);
  }
  else {
    int v5 = 0;
  }
  unint64_t v6 = *(unsigned int *)(*v5 + 24 * a3 + 16);
  uint64_t v7 = (_WORD *)(v5[6] + ((v6 >> 3) & 0x1FFFFFFE));
  unsigned __int16 v8 = *v7 + (v6 & 0xF) * a3;
  uint64_t v9 = a1 + 176;
  int v10 = a1 + 197;
  unsigned int v30 = a2 + 1;
  LODWORD(v11) = 0x7FFFFFFF;
  while (1)
  {
    unsigned int v12 = v8;
    int v13 = sub_1CBA91B88(v9, v8);
    uint64_t v15 = v14;
    if (v9 == v13 && v14 == 0xFFFFFFFFLL)
    {
LABEL_15:
      int v20 = 0x7FFFFFFF;
    }
    else
    {
      int v17 = v13;
      unsigned int v18 = v14;
      while (1)
      {
        uint64_t v19 = *v17 + 16 * v15;
        int v20 = *(_DWORD *)(v19 + 4);
        if (v20 > a2) {
          break;
        }
        uint64_t v15 = *(unsigned int *)(v19 + 12);
        if (v20 != a2) {
          sub_1CBA932C0(v9, (uint64_t)v17, v18);
        }
        unsigned int v18 = v15;
        if (v9 == v17 && v15 == -1) {
          goto LABEL_15;
        }
      }
    }
    unsigned int v22 = sub_1CBA91B88(v10, v12);
    unsigned int v23 = v21;
    uint64_t v24 = v21;
    if (v10 == v22 && v21 == 0xFFFFFFFFLL)
    {
LABEL_23:
      int v26 = 0x7FFFFFFF;
    }
    else
    {
      while (1)
      {
        uint64_t v25 = *v22 + 16 * v24;
        int v26 = *(_DWORD *)(v25 + 4);
        if (v26 > a2) {
          break;
        }
        uint64_t v24 = *(unsigned int *)(v25 + 12);
        if (v26 != a2) {
          sub_1CBA932C0(v10, (uint64_t)v22, v23);
        }
        unsigned int v23 = v24;
        if (v10 == v22 && v24 == -1) {
          goto LABEL_23;
        }
      }
    }
    unsigned int v27 = (int)v11 >= v26 ? v26 : v11;
    uint64_t v11 = v26 <= v20 ? v27 : v11;
    if (v11 == v30) {
      return v30;
    }
    int v28 = (unsigned __int16)v7[1];
    ++v7;
    unsigned __int16 v8 = v28 + v12;
    if (!v28) {
      return v11;
    }
  }
}

uint64_t sub_1CBA923F4(uint64_t a1, int a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v9 = a3;
  uint64_t v10 = a1 + 40 * a3;
  uint64_t v11 = (unsigned int *)(v10 + 776);
  uint64_t result = sub_1CBA93238(v10 + 776, a2);
  unsigned int v13 = *(_DWORD *)(v10 + 776);
  int v14 = v13 & 1;
  uint64_t v15 = (void *)(v10 + 784);
  if (v13)
  {
    int v16 = 4;
    int v17 = v15;
  }
  else
  {
    int v16 = *(_DWORD *)(a1 + 40 * v9 + 792);
    if (!v16)
    {
      int v26 = 0;
      unsigned int v27 = 0;
      goto LABEL_19;
    }
    int v17 = (void *)*v15;
  }
  int v18 = v16 - 1;
  unsigned int v19 = v18 & (37 * a2);
  int v20 = (int *)&v17[v19];
  int v21 = *v20;
  if (*v20 == a2) {
    goto LABEL_24;
  }
  unsigned int v22 = 0;
  int v23 = 1;
  while (v21 != -1)
  {
    if (v22) {
      BOOL v24 = 0;
    }
    else {
      BOOL v24 = v21 == -2;
    }
    if (v24) {
      unsigned int v22 = v20;
    }
    unsigned int v25 = v19 + v23++;
    unsigned int v19 = v25 & v18;
    int v20 = (int *)&v17[v19];
    int v21 = *v20;
    if (*v20 == a2) {
      goto LABEL_24;
    }
  }
  if (v22) {
    int v26 = v22;
  }
  else {
    int v26 = v20;
  }
  if (v13) {
    unsigned int v27 = 4;
  }
  else {
    unsigned int v27 = *(_DWORD *)(a1 + 40 * v9 + 792);
  }
LABEL_19:
  if (4 * (v13 >> 1) + 4 >= 3 * v27)
  {
    uint64_t result = (uint64_t)sub_1CBA933A4((uint64_t)v11, 2 * v27);
    unsigned int v13 = *v11;
    if (*v11)
    {
      int v49 = 4;
      uint64_t v50 = v15;
    }
    else
    {
      int v49 = *(_DWORD *)(a1 + 40 * v9 + 792);
      if (!v49) {
        goto LABEL_77;
      }
      uint64_t v50 = (void *)*v15;
    }
    int v14 = *v11 & 1;
    int v51 = v49 - 1;
    unsigned int v52 = (v49 - 1) & (37 * a2);
    int v26 = (int *)&v50[v52];
    int v53 = *v26;
    if (*v26 == a2) {
      goto LABEL_21;
    }
    unsigned int v45 = 0;
    int v54 = 1;
    while (v53 != -1)
    {
      if (v45) {
        BOOL v55 = 0;
      }
      else {
        BOOL v55 = v53 == -2;
      }
      if (v55) {
        unsigned int v45 = v26;
      }
      unsigned int v56 = v52 + v54++;
      unsigned int v52 = v56 & v51;
      int v26 = (int *)&v50[v56 & v51];
      int v53 = *v26;
      if (*v26 == a2) {
        goto LABEL_21;
      }
    }
    goto LABEL_72;
  }
  if (v27 + ~(v13 >> 1) - *(_DWORD *)(a1 + 40 * v9 + 780) <= v27 >> 3)
  {
    uint64_t result = (uint64_t)sub_1CBA933A4((uint64_t)v11, v27);
    unsigned int v13 = *v11;
    if (*v11)
    {
      int v40 = 4;
      unsigned __int16 v41 = v15;
      goto LABEL_48;
    }
    int v40 = *(_DWORD *)(a1 + 40 * v9 + 792);
    if (v40)
    {
      unsigned __int16 v41 = (void *)*v15;
LABEL_48:
      int v14 = *v11 & 1;
      int v42 = v40 - 1;
      unsigned int v43 = (v40 - 1) & (37 * a2);
      int v26 = (int *)&v41[v43];
      int v44 = *v26;
      if (*v26 == a2) {
        goto LABEL_21;
      }
      unsigned int v45 = 0;
      int v46 = 1;
      while (v44 != -1)
      {
        if (v45) {
          BOOL v47 = 0;
        }
        else {
          BOOL v47 = v44 == -2;
        }
        if (v47) {
          unsigned int v45 = v26;
        }
        unsigned int v48 = v43 + v46++;
        unsigned int v43 = v48 & v42;
        int v26 = (int *)&v41[v48 & v42];
        int v44 = *v26;
        if (*v26 == a2) {
          goto LABEL_21;
        }
      }
LABEL_72:
      if (v45) {
        int v26 = v45;
      }
      goto LABEL_21;
    }
LABEL_77:
    int v14 = 0;
    int v26 = 0;
  }
LABEL_21:
  *uint64_t v11 = (v13 & 0xFFFFFFFE | v14) + 2;
  if (*v26 != -1) {
    --*(_DWORD *)(a1 + 40 * v9 + 780);
  }
  *int v26 = a2;
  v26[1] = a5;
  unsigned int v13 = *v11;
LABEL_24:
  unsigned int v28 = v13 >> 1;
  uint64_t v29 = *(unsigned int *)(a1 + 4 * v9);
  if (v29)
  {
    for (uint64_t i = 0; i != v29; ++i)
    {
      if (v13)
      {
        int v31 = 4;
        uint64_t v32 = v15;
      }
      else
      {
        int v31 = *(_DWORD *)(a1 + 40 * v9 + 792);
        if (!v31) {
          goto LABEL_34;
        }
        uint64_t v32 = (void *)*v15;
      }
      int v33 = *(_DWORD *)(a1 + 384 * v9 + 16 * i + 8);
      int v34 = v31 - 1;
      uint64_t result = (37 * v33) & v34;
      int v35 = v32[result];
      if (v33 != v35)
      {
        int v36 = 1;
        while (v35 != -1)
        {
          int v37 = result + v36++;
          uint64_t result = v37 & v34;
          int v35 = v32[result];
          if (v33 == v35) {
            goto LABEL_33;
          }
        }
LABEL_34:
        int v38 = 0;
        goto LABEL_35;
      }
LABEL_33:
      int v38 = -1;
LABEL_35:
      v28 += v38;
    }
  }
  unsigned int v39 = a4 - v28;
  if (a4 < v28) {
    unsigned int v39 = 0;
  }
  if (v39 >= v29) {
    unsigned int v39 = *(_DWORD *)(a1 + 4 * v9);
  }
  *(_DWORD *)(a1 + 4 * v9) = v39;
  return result;
}

uint64_t sub_1CBA92788(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a3;
  uint64_t v7 = *(unsigned int *)(result + 4 * a3);
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    while (*(_DWORD *)(result + 384 * a3 + v9 + 8) != *(_DWORD *)a2)
    {
      v9 += 16;
      --v8;
      if (16 * v7 == v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = result + 40 * a3;
        unsigned int v12 = (_DWORD *)(v11 + 776);
        unsigned int v13 = *(_DWORD *)(v11 + 776) >> 1;
        int v14 = *(_DWORD *)(v11 + 776) & 1;
        uint64_t v15 = (void *)(v11 + 784);
        int v16 = (int *)(v11 + 792);
        while (1)
        {
          if (v14)
          {
            int v17 = 4;
            int v18 = v15;
          }
          else
          {
            int v17 = *v16;
            if (!*v16) {
              goto LABEL_14;
            }
            int v18 = (void *)*v15;
          }
          int v19 = *(_DWORD *)(v5 + 384 * v6 + 16 * v10 + 8);
          int v20 = v17 - 1;
          uint64_t result = (37 * v19) & v20;
          int v21 = v18[result];
          if (v19 != v21)
          {
            int v22 = 1;
            while (v21 != -1)
            {
              int v23 = result + v22++;
              uint64_t result = v23 & v20;
              int v21 = v18[result];
              if (v19 == v21) {
                goto LABEL_13;
              }
            }
LABEL_14:
            int v24 = 0;
            goto LABEL_15;
          }
LABEL_13:
          int v24 = -1;
LABEL_15:
          v13 += v24;
          if (++v10 == v7) {
            goto LABEL_19;
          }
        }
      }
    }
    uint64_t v39 = result + 384 * a3 + v9;
    *(_DWORD *)(v39 + 12) = *(_DWORD *)(a2 + 4);
    uint64_t v40 = *(void *)(a2 + 8);
    unint64_t v41 = v40 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v42 = v40 & 0xFFFFFFFFFFFFFFF8;
    if ((v40 & 4) != 0) {
      unint64_t v42 = **(void **)v41;
    }
    unint64_t v43 = -v8;
    unint64_t v44 = *(void *)(v39 + 16);
    unint64_t v45 = v44 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v46 = v44 & 0xFFFFFFFFFFFFFFF8;
    if ((v44 & 4) != 0) {
      unint64_t v46 = **(void **)v45;
    }
    if (v42 != v46)
    {
      if ((v40 & 4) != 0) {
        unint64_t v41 = **(void **)v41;
      }
      if (v44 <= 7)
      {
        *(void *)(v39 + 16) = v41 & 0xFFFFFFFFFFFFFFFBLL;
      }
      else
      {
        if ((v44 & 4) == 0) {
          operator new();
        }
        unsigned int v47 = *(_DWORD *)(v45 + 8);
        if (v47 >= *(_DWORD *)(v45 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)v45 + 8 * v47) = v41;
        ++*(_DWORD *)(v45 + 8);
        LODWORD(v7) = *(_DWORD *)(result + 4 * a3);
      }
    }
    if ((int)v7 - 1 > v43)
    {
      uint64_t v48 = v39 + 16;
      do
      {
        if (*(_DWORD *)(v48 - 4) <= *(_DWORD *)(v48 + 12)) {
          break;
        }
        long long v56 = *(_OWORD *)(v48 - 8);
        *(void *)(v48 - 8) = *(void *)(v48 + 8);
        *(void *)uint64_t v48 = 0;
        uint64_t v49 = v48 + 16;
        sub_1CB9138A0((uint64_t *)v48, (uint64_t *)(v48 + 16));
        *(void *)(v48 + 8) = v56;
        uint64_t result = (uint64_t)sub_1CB9138A0((uint64_t *)(v48 + 16), (uint64_t *)&v56 + 1);
        if ((BYTE8(v56) & 4) != 0)
        {
          uint64_t v50 = (void **)(*((void *)&v56 + 1) & 0xFFFFFFFFFFFFFFF8);
          if ((*((void *)&v56 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if (*v50 != v50 + 2) {
              free(*v50);
            }
            uint64_t result = MEMORY[0x1D25D9CE0](v50, 0x1080C40ED926357);
          }
        }
        ++v43;
        uint64_t v48 = v49;
      }
      while (v43 < (*(_DWORD *)(v5 + 4 * v6) - 1));
    }
    return result;
  }
  unsigned int v12 = (_DWORD *)(result + 40 * a3 + 776);
  unsigned int v13 = *v12 >> 1;
  int v14 = *v12 & 1;
LABEL_19:
  BOOL v25 = a4 >= v13;
  unsigned int v26 = a4 - v13;
  if (!v25) {
    unsigned int v26 = 0;
  }
  unsigned int v27 = (void *)(v5 + 40 * v6 + 784);
  if (v14)
  {
    int v28 = 4;
  }
  else
  {
    int v28 = *(_DWORD *)(v5 + 40 * v6 + 792);
    if (!v28)
    {
LABEL_29:
      int v34 = 0;
      goto LABEL_30;
    }
    unsigned int v27 = (void *)*v27;
  }
  int v29 = v28 - 1;
  unsigned int v30 = (37 * *(_DWORD *)a2) & v29;
  int v31 = v27[v30];
  if (*(_DWORD *)a2 != v31)
  {
    int v32 = 1;
    while (v31 != -1)
    {
      unsigned int v33 = v30 + v32++;
      unsigned int v30 = v33 & v29;
      int v31 = v27[v30];
      if (*(_DWORD *)a2 == v31) {
        goto LABEL_28;
      }
    }
    goto LABEL_29;
  }
LABEL_28:
  int v34 = 1;
LABEL_30:
  unsigned int v35 = v34 + v26;
  if (v35 - 25 < 0xFFFFFFE8) {
    return result;
  }
  if (v7 >= v35)
  {
    LODWORD(v7) = v35 - 1;
    if (*(_DWORD *)(a2 + 4) >= *(_DWORD *)(v5 + 384 * v6 + 16 * (v35 - 1) + 12)) {
      return result;
    }
    *(_DWORD *)(v5 + 4 * v6) = v7;
  }
  if (v7)
  {
    uint64_t v36 = 0;
    int v37 = (int *)(v5 + 384 * v6 + 12);
    while (1)
    {
      int v38 = *v37;
      v37 += 4;
      if (*(_DWORD *)(a2 + 4) < v38) {
        break;
      }
      if (v7 == ++v36)
      {
        LODWORD(v36) = v7;
        break;
      }
    }
  }
  else
  {
    LODWORD(v36) = 0;
  }
  if (v7 > v36)
  {
    uint64_t v51 = 16 * v7;
    uint64_t v52 = v5 + 384 * v6;
    uint64_t v53 = 16 * (v7 - 1);
    do
    {
      *(void *)(v52 + v51 + 8) = *(void *)(v52 + v53 + 8);
      sub_1CB9138A0((uint64_t *)(v52 + v51 + 16), (uint64_t *)(v52 + v53 + 16));
      v52 -= 16;
      LODWORD(v7) = v7 - 1;
    }
    while (v36 < v7);
  }
  uint64_t v54 = v5 + 384 * v6 + 16 * v36;
  *(void *)(v54 + 8) = *(void *)a2;
  sub_1CB91202C((unint64_t *)(v54 + 16), (unint64_t *)(a2 + 8));
  ++*(_DWORD *)(v5 + 4 * v6);
  int v55 = *(_DWORD *)a2;

  return sub_1CBA93238((uint64_t)v12, v55);
}

uint64_t sub_1CBA92C8C(uint64_t result, uint64_t a2, int *a3, void *a4)
{
  uint64_t v7 = result;
  uint64_t v9 = a2 + 8;
  unsigned int v8 = *(_DWORD *)a2;
  int v10 = *(_DWORD *)a2 & 1;
  if (v10)
  {
    int v11 = 2;
    uint64_t v12 = a2 + 8;
  }
  else
  {
    int v11 = *(_DWORD *)(a2 + 16);
    if (!v11)
    {
      uint64_t v15 = 0;
      unsigned int v18 = 0;
      goto LABEL_10;
    }
    uint64_t v12 = *(void *)(a2 + 8);
  }
  int v13 = v11 - 1;
  unsigned int v14 = (37 * *a3) & (v11 - 1);
  uint64_t v15 = v12 + 16 * v14;
  int v16 = *(_DWORD *)v15;
  if (*a3 == *(_DWORD *)v15)
  {
LABEL_39:
    if (v10)
    {
      uint64_t v30 = 2;
    }
    else
    {
      uint64_t v9 = *(void *)(a2 + 8);
      uint64_t v30 = *(unsigned int *)(a2 + 16);
    }
    char v21 = 0;
    uint64_t v20 = v9 + 16 * v30;
    goto LABEL_18;
  }
  uint64_t v17 = 0;
  uint64_t result = 1;
  while (v16 != -1)
  {
    if (v17) {
      BOOL v28 = 0;
    }
    else {
      BOOL v28 = v16 == -2;
    }
    if (v28) {
      uint64_t v17 = v15;
    }
    int v29 = v14 + result;
    uint64_t result = (result + 1);
    unsigned int v14 = v29 & v13;
    uint64_t v15 = v12 + 16 * (v29 & v13);
    int v16 = *(_DWORD *)v15;
    if (*a3 == *(_DWORD *)v15) {
      goto LABEL_39;
    }
  }
  if (v17) {
    uint64_t v15 = v17;
  }
  if (v10) {
    unsigned int v18 = 2;
  }
  else {
    unsigned int v18 = *(_DWORD *)(a2 + 16);
  }
LABEL_10:
  if (4 * (v8 >> 1) + 4 < 3 * v18)
  {
    if (v18 + ~(v8 >> 1) - *(_DWORD *)(a2 + 4) <= v18 >> 3)
    {
      sub_1CBA92FA0(a2, v18);
      uint64_t v33 = 0;
      uint64_t result = sub_1CBA92F08(a2, *a3, &v33);
      uint64_t v15 = v33;
      unsigned int v8 = *(_DWORD *)a2;
      int v10 = *(_DWORD *)a2 & 1;
    }
    goto LABEL_13;
  }
  uint64_t result = (uint64_t)sub_1CBA92FA0(a2, 2 * v18);
  unsigned int v8 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
  {
    int v22 = 2;
    uint64_t v23 = v9;
    goto LABEL_22;
  }
  int v22 = *(_DWORD *)(a2 + 16);
  if (v22)
  {
    uint64_t v23 = *(void *)(a2 + 8);
LABEL_22:
    int v10 = *(_DWORD *)a2 & 1;
    int v24 = v22 - 1;
    unsigned int v25 = (37 * *a3) & (v22 - 1);
    uint64_t v15 = v23 + 16 * v25;
    int v26 = *(_DWORD *)v15;
    if (*a3 != *(_DWORD *)v15)
    {
      uint64_t v27 = 0;
      uint64_t result = 1;
      while (v26 != -1)
      {
        if (v27) {
          BOOL v31 = 0;
        }
        else {
          BOOL v31 = v26 == -2;
        }
        if (v31) {
          uint64_t v27 = v15;
        }
        int v32 = v25 + result;
        uint64_t result = (result + 1);
        unsigned int v25 = v32 & v24;
        uint64_t v15 = v23 + 16 * (v32 & v24);
        int v26 = *(_DWORD *)v15;
        if (*a3 == *(_DWORD *)v15) {
          goto LABEL_13;
        }
      }
      if (v27) {
        uint64_t v15 = v27;
      }
    }
    goto LABEL_13;
  }
  int v10 = 0;
  uint64_t v15 = 0;
LABEL_13:
  *(_DWORD *)a2 = (v8 & 0xFFFFFFFE | v10) + 2;
  if (*(_DWORD *)v15 != -1) {
    --*(_DWORD *)(a2 + 4);
  }
  *(_DWORD *)uint64_t v15 = *a3;
  *(void *)(v15 + 8) = *a4;
  if (*(unsigned char *)a2)
  {
    uint64_t v19 = 2;
  }
  else
  {
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v19 = *(unsigned int *)(a2 + 16);
  }
  uint64_t v20 = v9 + 16 * v19;
  char v21 = 1;
LABEL_18:
  *(void *)uint64_t v7 = v15;
  *(void *)(v7 + 8) = v20;
  *(unsigned char *)(v7 + 16) = v21;
  return result;
}

uint64_t sub_1CBA92F08(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = result + 8;
  if (*(unsigned char *)result)
  {
    int v4 = 2;
  }
  else
  {
    int v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(result + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & (37 * a2);
  uint64_t v7 = (_DWORD *)(v3 + 16 * v6);
  int v8 = *v7;
  if (*v7 != a2)
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -1)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -2;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (_DWORD *)(v3 + 16 * (v12 & v5));
      int v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_8;
      }
    }
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_DWORD *sub_1CBA92FA0(uint64_t a1, unsigned int a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2 >= 3)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v13 = *(int **)(a1 + 8);
    uint64_t v14 = *(unsigned int *)(a1 + 16);
    if (a2 > 2)
    {
      uint64_t v15 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CBA93138((_DWORD *)a1, v13, &v13[4 * v14]);
    JUMPOUT(0x1D25D9CD0);
  }
  char v6 = 0;
  uint64_t v7 = v16;
  uint64_t v8 = 1;
  uint64_t v9 = a1 + 8;
  do
  {
    char v10 = v6;
    if (*(_DWORD *)v9 <= 0xFFFFFFFD)
    {
      int *v7 = *(_DWORD *)v9;
      *((void *)v7 + 1) = *(void *)(v9 + 8);
      v7 += 4;
    }
    uint64_t v9 = a1 + 8 + 16 * v8;
    char v6 = 1;
    uint64_t v8 = 2;
  }
  while ((v10 & 1) == 0);
  if (a2 > 2)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CBA93138((_DWORD *)a1, v16, v7);
}

_DWORD *sub_1CBA93138(_DWORD *result, int *a2, int *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    char v6 = result + 10;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (_DWORD *)*((void *)result + 1);
    char v6 = &v5[4 * v4];
  }
  do
  {
    *int v5 = -1;
    v5 += 4;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    int v7 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      if (*(unsigned char *)result)
      {
        int v8 = 2;
        uint64_t v9 = result + 2;
      }
      else
      {
        uint64_t v9 = (_DWORD *)*((void *)result + 1);
        int v8 = result[4];
      }
      int v10 = v8 - 1;
      unsigned int v11 = (v8 - 1) & (37 * v7);
      unsigned int v12 = &v9[4 * v11];
      int v13 = *v12;
      if (v7 != *v12)
      {
        uint64_t v14 = 0;
        int v15 = 1;
        while (v13 != -1)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -2;
          }
          if (v16) {
            uint64_t v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          unsigned int v12 = &v9[4 * (v17 & v10)];
          int v13 = *v12;
          if (v7 == *v12) {
            goto LABEL_14;
          }
        }
        if (v14) {
          unsigned int v12 = v14;
        }
      }
LABEL_14:
      *unsigned int v12 = v7;
      *((void *)v12 + 1) = *((void *)a2 + 1);
      *result += 2;
    }
    a2 += 4;
  }
  return result;
}

uint64_t sub_1CBA93238(uint64_t result, int a2)
{
  uint64_t v2 = result + 8;
  if (*(unsigned char *)result)
  {
    int v3 = 4;
  }
  else
  {
    int v3 = *(_DWORD *)(result + 16);
    if (!v3) {
      return result;
    }
    uint64_t v2 = *(void *)(result + 8);
  }
  int v4 = v3 - 1;
  LODWORD(v5) = (v3 - 1) & (37 * a2);
  char v6 = (int *)(v2 + 8 * v5);
  int v7 = *v6;
  if (*v6 == a2)
  {
LABEL_9:
    *char v6 = -2;
    int v10 = *(_DWORD *)(result + 4) + 1;
    *(_DWORD *)result -= 2;
    *(_DWORD *)(result + 4) = v10;
  }
  else
  {
    int v8 = 1;
    while (v7 != -1)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & v4;
      int v7 = *(_DWORD *)(v2 + 8 * v5);
      if (v7 == a2)
      {
        char v6 = (int *)(v2 + 8 * v5);
        goto LABEL_9;
      }
    }
  }
  return result;
}

uint64_t *sub_1CBA932C0(uint64_t *result, uint64_t a2, unsigned int a3)
{
  int v4 = result;
  uint64_t v5 = a3;
  uint64_t v6 = *result;
  int v7 = (unsigned int *)(*result + 16 * a3);
  int v8 = v7 + 2;
  uint64_t v9 = v7[2];
  if (a3 != v9)
  {
    uint64_t v10 = *(unsigned int *)(v6 + 16 * a3 + 12);
    if (*(_DWORD *)(v6 + 16 * v9 + 12) == -1)
    {
      *(_WORD *)(result[18] + 2 * *v7) = v10;
      *(_DWORD *)(v6 + 16 * v10 + 8) = v9;
    }
    else if (v10 == -1)
    {
      uint64_t result = sub_1CBA91B88(result, *v7);
      *(_DWORD *)(*result + 16 * v11 + 8) = v9;
      *(_DWORD *)(v6 + 16 * *v8 + 12) = -1;
    }
    else
    {
      *(_DWORD *)(v6 + 16 * v10 + 8) = v9;
      *(_DWORD *)(v6 + 16 * *v8 + 12) = v10;
    }
  }
  _DWORD *v8 = -1;
  int v12 = *((_DWORD *)v4 + 41);
  *(_DWORD *)(v6 + 16 * v5 + 12) = *((_DWORD *)v4 + 40);
  *((_DWORD *)v4 + 40) = a3;
  *((_DWORD *)v4 + 41) = v12 + 1;
  return result;
}

_DWORD *sub_1CBA933A4(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(int **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v8 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
      *(void *)(a1 + 16) = v8;
    }
    sub_1CBA93534((_DWORD *)a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v9 = 0;
  uint64_t v10 = v14;
  do
  {
    unsigned int v11 = *(_DWORD *)(a1 + v9 + 8);
    if (v11 <= 0xFFFFFFFD)
    {
      *uint64_t v10 = v11;
      v10[1] = *(_DWORD *)(a1 + v9 + 12);
      v10 += 2;
    }
    v9 += 8;
  }
  while (v9 != 32);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v13 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
    *(void *)(a1 + 16) = v13;
  }
  return sub_1CBA93534((_DWORD *)a1, v14, v10);
}

_DWORD *sub_1CBA93534(_DWORD *result, int *a2, int *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    uint64_t v6 = result + 10;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (_DWORD *)*((void *)result + 1);
    uint64_t v6 = &v5[2 * v4];
  }
  do
  {
    *int v5 = -1;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    int v7 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      if (*(unsigned char *)result)
      {
        int v9 = 4;
        uint64_t v8 = result + 2;
      }
      else
      {
        uint64_t v8 = (_DWORD *)*((void *)result + 1);
        int v9 = result[4];
      }
      int v10 = v9 - 1;
      unsigned int v11 = (v9 - 1) & (37 * v7);
      int v12 = &v8[2 * v11];
      int v13 = *v12;
      if (v7 != *v12)
      {
        uint64_t v14 = 0;
        int v15 = 1;
        while (v13 != -1)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -2;
          }
          if (v16) {
            uint64_t v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          int v12 = &v8[2 * (v17 & v10)];
          int v13 = *v12;
          if (v7 == *v12) {
            goto LABEL_23;
          }
        }
        if (v14) {
          int v12 = v14;
        }
      }
LABEL_23:
      *int v12 = v7;
      v12[1] = a2[1];
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CBA9363C(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  if (*a2 < *a1) {
    return 1;
  }
  unsigned int v2 = a1[1];
  unsigned int v3 = a2[1];
  if (v2 < v3) {
    return 0xFFFFFFFFLL;
  }
  if (v3 < v2) {
    return 1;
  }
  unsigned int v5 = a1[2];
  unsigned int v6 = a2[2];
  if (v5 >= v6) {
    return v6 < v5;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_1CBA936A0()
{
}

void sub_1CBA936B4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unsigned int v35 = 0;
  if (a3 + 48 == a2)
  {
    unint64_t v10 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (!v10 || (*(unsigned char *)v10 & 4) == 0)
    {
      while ((*(_WORD *)(v10 + 44) & 4) != 0)
        unint64_t v10 = *(void *)v10 & 0xFFFFFFFFFFFFFFF8;
    }
    int v9 = (unsigned __int8 **)(v10 + 56);
  }
  else
  {
    if (**(unsigned __int16 **)(a2 + 16) - 789 < 3) {
      return;
    }
    int v9 = (unsigned __int8 **)(a2 + 56);
  }
  if (v9 != &v35 && (unsigned int v11 = *v9, (v35 = v11) != 0))
  {
    llvm::MetadataTracking::track((uint64_t)&v35, v11, 2);
    uint64_t v12 = *(void *)(a5 + 8) + 397296;
    int v13 = *(llvm::MachineFunction **)(a3 + 32);
    int v37 = v35;
    if (v35) {
      llvm::MetadataTracking::track((uint64_t)&v37, v35, 2);
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a5 + 8) + 397296;
    int v13 = *(llvm::MachineFunction **)(a3 + 32);
    int v37 = 0;
  }
  uint64_t v14 = llvm::MachineFunction::CreateMachineInstr(v13, v12, &v37, 0);
  if (v37)
  {
    int v31 = *v37;
    if ((v31 - 4) > 0x1E)
    {
      if ((v31 - 3) >= 0xFFFFFFFE) {
        int v34 = v37;
      }
      else {
        int v34 = 0;
      }
      if ((v31 - 3) < 0xFFFFFFFE)
      {
        if (v31 == 3) {
          *((void *)v37 + 1) = 0;
        }
        goto LABEL_14;
      }
      unint64_t v33 = (unint64_t)(v34 + 8);
    }
    else
    {
      if ((v37[1] & 0x7F) != 2 && !*((_DWORD *)v37 + 3)) {
        goto LABEL_14;
      }
      uint64_t v32 = *((void *)v37 + 2);
      if ((v32 & 4) == 0) {
        goto LABEL_14;
      }
      unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFF8;
      if (!v33) {
        goto LABEL_14;
      }
    }
    v36[0] = &v37;
    sub_1CC5FA668(v33 + 16, v36);
  }
LABEL_14:
  uint64_t v15 = *(void *)(a3 + 40);
  *((void *)v14 + 3) = v15;
  uint64_t v16 = *(void *)(v15 + 32);
  uint64_t v17 = *((unsigned int *)v14 + 10);
  if (v17)
  {
    uint64_t v23 = *((void *)v14 + 4);
    uint64_t v24 = *(void *)(v16 + 40);
    uint64_t v25 = 32 * v17;
    do
    {
      if (!*(unsigned char *)v23)
      {
        uint64_t v26 = *(unsigned int *)(v23 + 4);
        if ((int)v26 >= 0) {
          uint64_t v27 = (uint64_t *)(*(void *)(v24 + 272) + 8 * v26);
        }
        else {
          uint64_t v27 = (uint64_t *)(*(void *)(v24 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
        }
        uint64_t v28 = *v27;
        if (*v27)
        {
          uint64_t v29 = *(void *)(v28 + 16);
          *(void *)(v28 + 16) = v23;
          *(void *)(v23 + 16) = v29;
          if (*(unsigned char *)(v23 + 3))
          {
            *(void *)(v23 + 24) = v28;
          }
          else
          {
            *(void *)(v23 + 24) = 0;
            uint64_t v27 = (uint64_t *)(v29 + 24);
          }
        }
        else
        {
          *(void *)(v23 + 16) = v23;
          *(void *)(v23 + 24) = 0;
        }
        *uint64_t v27 = v23;
      }
      v23 += 32;
      v25 -= 32;
    }
    while (v25);
  }
  uint64_t v18 = *(void *)(v16 + 728);
  if (v18) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v18 + 24))(v18, v14);
  }
  unint64_t v19 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v14 = v19 | *(void *)v14 & 7;
  *((void *)v14 + 1) = a2;
  *(void *)(v19 + 8) = v14;
  *(void *)a2 = *(void *)a2 & 7 | (unint64_t)v14;
  LODWORD(v36[0]) = 1;
  v36[1] = 0;
  _DWORD v36[2] = a4;
  llvm::MachineInstr::addOperand(v14, v13, (const llvm::MachineOperand *)v36);
  if (v35)
  {
    int v20 = *v35;
    if ((v20 - 4) > 0x1E)
    {
      if ((v20 - 3) >= 0xFFFFFFFE) {
        char v21 = v35;
      }
      else {
        char v21 = 0;
      }
      if ((v20 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v22 = (unint64_t)(v21 + 8);
LABEL_27:
        v36[0] = &v35;
        sub_1CC5FA668(v22 + 16, v36);
        return;
      }
      if (v20 == 3) {
        *((void *)v35 + 1) = 0;
      }
    }
    else if ((v35[1] & 0x7F) == 2 || *((_DWORD *)v35 + 3))
    {
      uint64_t v30 = *((void *)v35 + 2);
      if ((v30 & 4) != 0)
      {
        unint64_t v22 = v30 & 0xFFFFFFFFFFFFFFF8;
        if (v22) {
          goto LABEL_27;
        }
      }
    }
  }
}

uint64_t sub_1CBA939D8()
{
  return 0;
}

BOOL sub_1CBA939E0(uint64_t a1, uint64_t a2)
{
  return (~*(_DWORD *)(*(void *)(a2 + 16) + 16) & 0x800100) != 0;
}

uint64_t sub_1CBA93A00(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(void *)(a2 + 16) + 16) >> 5) & 1;
}

BOOL sub_1CBA93A10(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 **)(a2 + 16);
  int v3 = *v2;
  BOOL v5 = (v3 - 9) <= 0x3C && ((1 << (v3 - 9)) & 0x1000000000000605) != 0 || v3 == 0;
  return !v5 && (v2[4] & 0x10) == 0 && (v2[8] & 1) == 0;
}

uint64_t sub_1CBA93A60()
{
  return 0;
}

uint64_t sub_1CBA93A68()
{
  return 0;
}

BOOL sub_1CBA93A74(uint64_t a1, int a2)
{
  return a2 == 7;
}

uint64_t sub_1CBA93A80(uint64_t result, unint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = result;
  unint64_t v7 = a2;
  if ((*(_WORD *)(a2 + 44) & 4) != 0)
  {
    unint64_t v7 = a2;
    do
      unint64_t v7 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v7 + 44) & 4) != 0);
  }
  uint64_t v8 = *(void *)(a2 + 24) + 48;
  int v9 = *(int **)(v7 + 32);
  uint64_t v10 = *(unsigned int *)(v7 + 40);
  unsigned int v11 = &v9[8 * v10];
  if (!v10)
  {
    unint64_t v24 = *(void *)(v7 + 8);
    if (v24 == v8)
    {
      unint64_t v7 = *(void *)(a2 + 24) + 48;
    }
    else
    {
      unint64_t v7 = *(void *)(a2 + 24) + 48;
      if ((*(_WORD *)(v24 + 44) & 4) != 0)
      {
        do
        {
          unint64_t v25 = v24;
          uint64_t v26 = *(unsigned int *)(v24 + 40);
          if (v26)
          {
            unint64_t v7 = v24;
            goto LABEL_40;
          }
          unint64_t v24 = *(void *)(v24 + 8);
        }
        while (v24 != v8 && (*(_WORD *)(v24 + 44) & 4) != 0);
        unint64_t v7 = *(void *)(a2 + 24) + 48;
LABEL_40:
        int v9 = *(int **)(v25 + 32);
        unsigned int v11 = &v9[8 * v26];
      }
    }
  }
  if (v9 != v11)
  {
    while (1)
    {
      int v12 = *v9;
      if (!*v9)
      {
        uint64_t v16 = v9[1];
        if (v16)
        {
          if ((v12 & 0x2000000) != 0 || *(unsigned char *)(*(void *)(a3[27] + 16) + v16))
          {
            if ((v12 & 0x2000000) == 0) {
              goto LABEL_18;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 80))(v6);
            if (result) {
              break;
            }
          }
        }
      }
LABEL_5:
      v9 += 8;
      if (v9 == v11)
      {
        unint64_t v13 = *(void *)(v7 + 8);
        if (v13 == v8) {
          return result;
        }
        int v9 = v11;
        unint64_t v7 = v8;
        if ((*(_WORD *)(v13 + 44) & 4) != 0)
        {
          while (1)
          {
            unint64_t v14 = v13;
            uint64_t v15 = *(unsigned int *)(v13 + 40);
            if (v15) {
              break;
            }
            unint64_t v13 = *(void *)(v13 + 8);
            if (v13 == v8 || (*(_WORD *)(v13 + 44) & 4) == 0)
            {
              unint64_t v7 = v8;
              goto LABEL_26;
            }
          }
          unint64_t v7 = v13;
LABEL_26:
          int v9 = *(int **)(v14 + 32);
          unsigned int v11 = &v9[8 * v15];
        }
      }
      if (v9 == v11) {
        return result;
      }
    }
    LODWORD(v16) = v9[1];
LABEL_18:
    unint64_t v17 = *(unsigned int *)(a3[1] + 24 * v16 + 16);
    uint64_t v18 = (_WORD *)(a3[7] + ((v17 >> 3) & 0x1FFFFFFE));
    __int16 v20 = *v18;
    unint64_t v19 = v18 + 1;
    unsigned __int16 v21 = v20 + (v17 & 0xF) * v16;
    do
    {
      if (*((unsigned char *)v9 + 3))
      {
        unint64_t v22 = *(unsigned int *)(a4 + 8);
        if (v22 >= *(unsigned int *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a4 + 4 * v22) = v21;
        ++*(_DWORD *)(a4 + 8);
      }
      int v23 = *v19++;
      v21 += v23;
    }
    while (v23);
    goto LABEL_5;
  }
  return result;
}

uint64_t sub_1CBA93CC0(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(void *)(a2 + 16) + 16) >> 2) & 1;
}

uint64_t sub_1CBA93CD0(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v4 = *(unsigned __int16 **)(a2 + 16);
  uint64_t v5 = *((void *)v4 + 2);
  *a3 = 3;
  uint64_t v6 = v5 & 0x800200;
  uint64_t v7 = v5 & 0xE00;
  if ((v7 == 1536 || v7 == 3584 || v7 == 2560) && (uint64_t v8 = v5 & 0xD00, v8 != 1280) && v8 != 3328 && v8 != 2304
    || v6 == 8389120)
  {
    BOOL v9 = 0;
  }
  else
  {
    int v10 = *v4;
    unsigned int v11 = v10 - 2970;
    BOOL v9 = (v10 - 4593) < 0xFFFFFFF4;
    if (v11 < 0x48) {
      BOOL v9 = 0;
    }
  }
  a3[1] = v9;
  uint64_t result = sub_1CBA95978(a2);
  a3[2] = result;
  a3[3] = (v5 & 2) != 0;
  BOOL v13 = 1;
  if (v6 != 8389120)
  {
    BOOL v14 = v7 == 2560 || (v5 & 0x800100) == 8388864;
    if (!v14 && (v5 & 0xD00) != 0x900)
    {
      HIDWORD(v15) = *v4;
      LODWORD(v15) = HIDWORD(v15) - 4104;
      BOOL v13 = (v15 >> 3) < 8;
    }
  }
  a3[6] = v13;
  a3[5] = (~(_WORD)v5 & 0x500) == 0;
  a3[4] = (v5 & 0x10) != 0;
  return result;
}

uint64_t sub_1CBA93E10()
{
  return 0;
}

void sub_1CBA93E18(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v265 = *MEMORY[0x1E4F143B8];
  int v3 = a2 + 6;
  uint64_t v4 = a2[7];
  if (a2 + 6 == (void *)v4) {
    return;
  }
  uint64_t v5 = a2;
  uint64_t v6 = 0;
  unsigned int v7 = -1;
  do
  {
    uint64_t v8 = v4;
    if (!v4 || (uint64_t v9 = v4, (*(unsigned char *)v4 & 4) == 0))
    {
      uint64_t v9 = v4;
      if ((*(_WORD *)(v4 + 44) & 8) != 0)
      {
        uint64_t v9 = v4;
        do
          uint64_t v9 = *(void *)(v9 + 8);
        while ((*(_WORD *)(v9 + 44) & 8) != 0);
      }
    }
    uint64_t v4 = *(void *)(v9 + 8);
    int v10 = *(unsigned __int16 **)(v8 + 16);
    int v11 = *v10;
    if (v11 == 8277)
    {
      if ((unint64_t *)v4 == v3
        || ((int v12 = *(unsigned __int16 **)(v4 + 16), v13 = *v12, (v13 - 9) <= 0x3C)
          ? (BOOL v14 = ((1 << (v13 - 9)) & 0x1000000000000605) == 0)
          : (BOOL v14 = 1),
            v14 ? (BOOL v15 = v13 == 0) : (BOOL v15 = 1),
            v15 || (v12[4] & 0x10) != 0 || (v12[8] & 1) != 0))
      {
        if (!v6 || v7 > 7)
        {
          unsigned int v7 = 0;
          uint64_t v6 = (uint64_t *)v8;
          goto LABEL_54;
        }
        uint64_t v16 = *(void *)(*(void *)(v8 + 24) + 32);
        if (v16)
        {
          uint64_t v17 = *(void *)(v16 + 728);
          if (v17) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 32))(v17, v8);
          }
          uint64_t v18 = *(unsigned int *)(v8 + 40);
          if (v18)
          {
            uint64_t v19 = *(void *)(v8 + 32);
            uint64_t v20 = *(void *)(v16 + 40);
            uint64_t v21 = 32 * v18;
            do
            {
              if (!*(unsigned char *)v19)
              {
                uint64_t v22 = *(unsigned int *)(v19 + 4);
                if ((v22 & 0x80000000) != 0) {
                  int v23 = (uint64_t *)(*(void *)(v20 + 24) + 16 * (v22 & 0x7FFFFFFF) + 8);
                }
                else {
                  int v23 = (uint64_t *)(*(void *)(v20 + 272) + 8 * v22);
                }
                uint64_t v24 = *v23;
                uint64_t v26 = *(void *)(v19 + 16);
                uint64_t v25 = *(void *)(v19 + 24);
                if (v19 != *v23) {
                  int v23 = (uint64_t *)(v26 + 24);
                }
                *int v23 = v25;
                if (v25) {
                  uint64_t v27 = v25;
                }
                else {
                  uint64_t v27 = v24;
                }
                *(void *)(v27 + 16) = v26;
                *(void *)(v19 + 16) = 0;
                *(void *)(v19 + 24) = 0;
              }
              v19 += 32;
              v21 -= 32;
            }
            while (v21);
          }
        }
        uint64_t v30 = *(unint64_t **)(v8 + 8);
        unint64_t v31 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
        unint64_t *v30 = v31 | *v30 & 7;
        *(void *)(v31 + 8) = v30;
        *(void *)v8 &= 7uLL;
        *(void *)(v8 + 8) = 0;
        uint64_t v32 = v5[5];
        *(void *)(v8 + 24) = v32;
        uint64_t v33 = *(void *)(v32 + 32);
        uint64_t v34 = *(unsigned int *)(v8 + 40);
        if (v34)
        {
          uint64_t v37 = *(void *)(v8 + 32);
          uint64_t v38 = *(void *)(v33 + 40);
          uint64_t v39 = 32 * v34;
          do
          {
            if (!*(unsigned char *)v37)
            {
              uint64_t v40 = *(unsigned int *)(v37 + 4);
              if ((int)v40 >= 0) {
                unint64_t v41 = (uint64_t *)(*(void *)(v38 + 272) + 8 * v40);
              }
              else {
                unint64_t v41 = (uint64_t *)(*(void *)(v38 + 24) + 16 * (v40 & 0x7FFFFFFF) + 8);
              }
              uint64_t v42 = *v41;
              if (*v41)
              {
                uint64_t v43 = *(void *)(v42 + 16);
                *(void *)(v42 + 16) = v37;
                *(void *)(v37 + 16) = v43;
                if (*(unsigned char *)(v37 + 3))
                {
                  *(void *)(v37 + 24) = v42;
                }
                else
                {
                  *(void *)(v37 + 24) = 0;
                  unint64_t v41 = (uint64_t *)(v43 + 24);
                }
              }
              else
              {
                *(void *)(v37 + 16) = v37;
                *(void *)(v37 + 24) = 0;
              }
              *unint64_t v41 = v37;
            }
            v37 += 32;
            v39 -= 32;
          }
          while (v39);
        }
        uint64_t v35 = *(void *)(v33 + 728);
        if (v35) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 24))(v35, v8);
        }
        unint64_t v36 = *v6 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v8 = v36 | *(void *)v8 & 7;
        *(void *)(v8 + 8) = v6;
        *(void *)(v36 + 8) = v8;
        *uint64_t v6 = *v6 & 7 | v8;
      }
LABEL_53:
      uint64_t v6 = 0;
      goto LABEL_54;
    }
    BOOL v29 = (v11 - 9) <= 0x3C && ((1 << (v11 - 9)) & 0x1000000000000605) != 0
       || v11 == 0;
    if (!v29 && (v10[4] & 0x10) == 0 && (*((void *)v10 + 2) & 1) == 0) {
      goto LABEL_53;
    }
LABEL_54:
    ++v7;
  }
  while ((unint64_t *)v4 != v3);
  unint64_t v44 = (void **)v5[4];
  uint64_t v45 = (*(uint64_t (**)(void *, void))(*v44[1] + 16))(v44[1], *v44);
  unint64_t v46 = (unsigned char *)v45;
  int v250 = (*((unsigned __int16 *)*v44 + 9) >> 4) & 0x3FF;
  if (*(unsigned char *)(v45 + 318)) {
    int v47 = 4670;
  }
  else {
    int v47 = 4671;
  }
  unsigned int v246 = v47;
  uint64_t v245 = (*(uint64_t (**)(void *))(*v44[2] + 104))(v44[2]);
  long long v249 = v46;
  int v247 = v5;
  if (v46[311])
  {
    if (v250 != 100)
    {
      uint64_t v48 = (unint64_t *)v5[7];
      if (v48 != v3)
      {
        while (!v48 || (*(unsigned char *)v48 & 4) == 0)
        {
          __int16 v49 = *((_WORD *)v48 + 22);
          if ((v49 & 8) == 0) {
            goto LABEL_82;
          }
          uint64_t v50 = v48;
          do
            uint64_t v50 = (unint64_t *)v50[1];
          while ((*((_WORD *)v50 + 22) & 8) != 0);
LABEL_83:
          uint64_t v51 = (unint64_t *)v50[1];
          uint64_t v52 = *(void *)(v48[2] + 8);
          if ((v49 & 0xC) == 0 || (v49 & 4) != 0)
          {
            if ((v52 & 0x400) == 0) {
              goto LABEL_98;
            }
          }
          else
          {
            uint64_t v53 = v48;
            if ((v52 & 0x400) == 0)
            {
              while ((*((_WORD *)v53 + 22) & 8) != 0)
              {
                uint64_t v53 = (unint64_t *)v53[1];
                if ((*(unsigned char *)(v53[2] + 9) & 4) != 0) {
                  goto LABEL_90;
                }
              }
              goto LABEL_98;
            }
          }
LABEL_90:
          int v252 = 0;
          uint64_t v54 = *(void *)(v245 + 8) + 48 * v246;
          int v55 = (llvm::MachineFunction *)v5[4];
          uint64_t v259 = 0;
          long long v56 = llvm::MachineFunction::CreateMachineInstr(v55, v54, &v259, 0);
          if (v259)
          {
            int v73 = *v259;
            if ((v73 - 4) > 0x1E)
            {
              if ((v73 - 3) >= 0xFFFFFFFE) {
                int v76 = v259;
              }
              else {
                int v76 = 0;
              }
              if ((v73 - 3) < 0xFFFFFFFE)
              {
                uint64_t v5 = v247;
                if (v73 == 3) {
                  *((void *)v259 + 1) = 0;
                }
                goto LABEL_91;
              }
              unint64_t v75 = (unint64_t)(v76 + 8);
            }
            else
            {
              uint64_t v5 = v247;
              if ((v259[1] & 0x7F) != 2 && !*((_DWORD *)v259 + 3)) {
                goto LABEL_91;
              }
              uint64_t v74 = *((void *)v259 + 2);
              if ((v74 & 4) == 0) {
                goto LABEL_91;
              }
              unint64_t v75 = v74 & 0xFFFFFFFFFFFFFFF8;
              if (!v75) {
                goto LABEL_91;
              }
            }
            uint64_t v253 = &v259;
            sub_1CC5FA668(v75 + 16, &v253);
            uint64_t v5 = v247;
          }
LABEL_91:
          uint64_t v57 = v5[5];
          *((void *)v56 + 3) = v57;
          uint64_t v58 = *(void *)(v57 + 32);
          uint64_t v59 = *((unsigned int *)v56 + 10);
          if (v59)
          {
            uint64_t v65 = *((void *)v56 + 4);
            uint64_t v66 = *(void *)(v58 + 40);
            uint64_t v67 = 32 * v59;
            do
            {
              if (!*(unsigned char *)v65)
              {
                uint64_t v68 = *(unsigned int *)(v65 + 4);
                if ((int)v68 >= 0) {
                  unint64_t v69 = (uint64_t *)(*(void *)(v66 + 272) + 8 * v68);
                }
                else {
                  unint64_t v69 = (uint64_t *)(*(void *)(v66 + 24) + 16 * (v68 & 0x7FFFFFFF) + 8);
                }
                uint64_t v70 = *v69;
                if (*v69)
                {
                  uint64_t v71 = *(void *)(v70 + 16);
                  *(void *)(v70 + 16) = v65;
                  *(void *)(v65 + 16) = v71;
                  if (*(unsigned char *)(v65 + 3))
                  {
                    *(void *)(v65 + 24) = v70;
                  }
                  else
                  {
                    *(void *)(v65 + 24) = 0;
                    unint64_t v69 = (uint64_t *)(v71 + 24);
                  }
                }
                else
                {
                  *(void *)(v65 + 16) = v65;
                  *(void *)(v65 + 24) = 0;
                }
                uint64_t *v69 = v65;
              }
              v65 += 32;
              v67 -= 32;
            }
            while (v67);
          }
          uint64_t v60 = *(void *)(v58 + 728);
          if (v60) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v60 + 24))(v60, v56);
          }
          unint64_t v61 = *v48 & 0xFFFFFFFFFFFFFFF8;
          *(void *)long long v56 = v61 | *(void *)v56 & 7;
          *((void *)v56 + 1) = v48;
          *(void *)(v61 + 8) = v56;
          *uint64_t v48 = *v48 & 7 | (unint64_t)v56;
          LODWORD(v253) = 1;
          uint64_t v254 = 0;
          v255[0] = 0;
          llvm::MachineInstr::addOperand(v56, v55, (const llvm::MachineOperand *)&v253);
          if (!v252) {
            goto LABEL_98;
          }
          int v62 = *v252;
          if ((v62 - 4) > 0x1E)
          {
            if ((v62 - 3) >= 0xFFFFFFFE) {
              unsigned int v63 = v252;
            }
            else {
              unsigned int v63 = 0;
            }
            if ((v62 - 3) < 0xFFFFFFFE)
            {
              if (v62 == 3) {
                *((void *)v252 + 1) = 0;
              }
              goto LABEL_98;
            }
            unint64_t v64 = (unint64_t)(v63 + 8);
          }
          else
          {
            if ((v252[1] & 0x7F) != 2 && !*((_DWORD *)v252 + 3)) {
              goto LABEL_98;
            }
            uint64_t v72 = *((void *)v252 + 2);
            if ((v72 & 4) == 0) {
              goto LABEL_98;
            }
            unint64_t v64 = v72 & 0xFFFFFFFFFFFFFFF8;
            if (!v64) {
              goto LABEL_98;
            }
          }
          uint64_t v253 = &v252;
          sub_1CC5FA668(v64 + 16, &v253);
LABEL_98:
          uint64_t v48 = v51;
          if (v51 == v3) {
            goto LABEL_138;
          }
        }
        __int16 v49 = *((_WORD *)v48 + 22);
LABEL_82:
        uint64_t v50 = v48;
        goto LABEL_83;
      }
    }
  }
LABEL_138:
  if (v46[306])
  {
    unsigned int v77 = 16;
  }
  else if (v46[307])
  {
    unsigned int v77 = 32;
  }
  else if (v46[308])
  {
    unsigned int v77 = 48;
  }
  else if (v46[309])
  {
    unsigned int v77 = 64;
  }
  else
  {
    unsigned int v77 = -(char)v46[305];
  }
  int v78 = v46[302];
  int v79 = v46[303];
  int v80 = (v46[304] | v78);
  BOOL v81 = v80 != 0;
  BOOL v82 = (v80 | v79) != 0;
  if (v250 == 100) {
    uint64_t v83 = 0;
  }
  else {
    uint64_t v83 = v77;
  }
  BOOL v84 = v250 != 100 && v81;
  BOOL v251 = v84;
  BOOL v85 = v250 != 100 && v82;
  if (v85 || v83)
  {
    uint64_t v86 = v5[7];
    if ((unint64_t *)v86 != v3)
    {
      int v87 = 0;
      unsigned int v88 = 0;
      int v89 = 0;
      int v90 = 0;
      if (v79 | v78) {
        BOOL v91 = v250 == 100;
      }
      else {
        BOOL v91 = 1;
      }
      int v92 = !v91;
      int v248 = v92;
      do
      {
        int v93 = (void *)v86;
        if (!v86 || (uint64_t v94 = v86, (*(unsigned char *)v86 & 4) == 0))
        {
          uint64_t v94 = v86;
          if ((*(_WORD *)(v86 + 44) & 8) != 0)
          {
            uint64_t v94 = v86;
            do
              uint64_t v94 = *(void *)(v94 + 8);
            while ((*(_WORD *)(v94 + 44) & 8) != 0);
          }
        }
        uint64_t v86 = *(void *)(v94 + 8);
        int v95 = (unsigned __int16 *)v93[2];
        uint64_t v96 = *((void *)v95 + 2);
        if (v83)
        {
          int v97 = *v95;
          BOOL v99 = (v97 - 9) <= 0x3C && ((1 << (v97 - 9)) & 0x1000000000000605) != 0
             || v97 == 0;
          if (v99 || *((void *)v95 + 1) & 0x10 | *((void *)v95 + 2) & 1)
          {
            if (!v89
              || ((unsigned int v101 = (unsigned __int16 *)v89[2], v102 = *v101, (v102 - 9) <= 0x3C)
                ? (BOOL v103 = ((1 << (v102 - 9)) & 0x1000000000000605) == 0)
                : (BOOL v103 = 1),
                  v103 ? (BOOL v104 = v102 == 0) : (BOOL v104 = 1),
                  v104 || (v101[4] & 0x10) != 0 || (v101[8] & 1) != 0))
            {
              if (v90 == v83)
              {
                if ((unint64_t *)v86 != v3)
                {
                  unsigned int v105 = 0;
                  uint64_t v106 = v86;
                  while (1)
                  {
                    char v107 = *(unsigned __int16 **)(v106 + 16);
                    int v108 = *v107;
                    BOOL v109 = (v108 - 9) > 0x3C
                        || ((1 << (v108 - 9)) & 0x1000000000000605) == 0;
                    BOOL v110 = !v109 || v108 == 0;
                    if (!v110 && (v107[4] & 0x10) == 0 && (v107[8] & 1) == 0) {
                      break;
                    }
                    if ((*(unsigned char *)v106 & 4) == 0)
                    {
                      while ((*(_WORD *)(v106 + 44) & 8) != 0)
                        uint64_t v106 = *(void *)(v106 + 8);
                    }
                    int v90 = 0;
                    BOOL v100 = v105 > 6;
                    if (v105 <= 6)
                    {
                      ++v105;
                      uint64_t v106 = *(void *)(v106 + 8);
                      if ((unint64_t *)v106 != v3) {
                        continue;
                      }
                    }
                    goto LABEL_213;
                  }
                }
                BOOL v100 = 0;
                int v90 = 0;
              }
              else
              {
                BOOL v100 = 0;
              }
            }
            else
            {
              BOOL v100 = 1;
            }
LABEL_213:
            ++v90;
          }
          else
          {
            BOOL v100 = 0;
            int v90 = 0;
          }
        }
        else
        {
          BOOL v100 = 0;
        }
        if (v251 && (v96 & 2) != 0 && v250 != 102)
        {
          if (v88
            && llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(v93[4] + 96), (const llvm::MachineOperand *)(v88[4] + 96)))
          {
            unsigned int v88 = v93;
            goto LABEL_262;
          }
          uint64_t v112 = (unint64_t *)v5[7];
          unint64_t v113 = (unint64_t)v93;
          while ((unint64_t *)v113 != v112)
          {
            unint64_t v114 = (unint64_t *)v113;
            unint64_t v113 = *(void *)v113 & 0xFFFFFFFFFFFFFFF8;
            if (!v113 || (*(unsigned char *)v113 & 4) == 0)
            {
              while ((*(_WORD *)(v113 + 44) & 4) != 0)
                unint64_t v113 = *(void *)v113 & 0xFFFFFFFFFFFFFFF8;
            }
            uint64_t v115 = *(unsigned __int16 **)(v113 + 16);
            if ((v115[8] & 0x10) == 0
              || (*(unsigned char *)(*(void *)(v113 + 32) + 32 * sub_1CBC7A3F8(*v115, 0x16u) + 16) & 8) == 0)
            {
              unsigned int v88 = v93;
              uint64_t v112 = v114;
              goto LABEL_250;
            }
          }
          unsigned int v88 = v93;
        }
        else if (v248 && (v96 & 0xD00) == 0x500 && v250 != 102)
        {
          if (!v87 || (unint64_t v111 = v93[6], v111 < 8))
          {
LABEL_249:
            int v87 = v93;
            uint64_t v112 = v93;
            goto LABEL_250;
          }
          if ((v111 & 7) != 0)
          {
            if ((v93[6] & 7) != 3 || (v111 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_DWORD *)(v111 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_249;
            }
          }
          else
          {
            v111 &= 0xFFFFFFFFFFFFFFF8;
            v93[6] = v111;
          }
          unint64_t v116 = v87[6];
          if (v116 < 8) {
            goto LABEL_249;
          }
          if ((v116 & 7) != 0)
          {
            if ((v87[6] & 7) != 3 || (v116 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_DWORD *)(v116 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_249;
            }
          }
          else
          {
            v116 &= 0xFFFFFFFFFFFFFFF8;
            v87[6] = v116;
            unint64_t v111 = v93[6];
          }
          if ((v111 & 7) != 0)
          {
            int v137 = *(uint64_t **)((v111 & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          else
          {
            int v137 = (uint64_t *)(v111 & 0xFFFFFFFFFFFFFFF8);
            v93[6] = v137;
            unint64_t v116 = v87[6];
          }
          uint64_t v138 = v83;
          if ((v116 & 7) != 0)
          {
            unsigned int v139 = *(void **)((v116 & 0xFFFFFFFFFFFFFFF8) + 8);
            if (!v137) {
              goto LABEL_309;
            }
          }
          else
          {
            unsigned int v139 = (void *)(v116 & 0xFFFFFFFFFFFFFFF8);
            v87[6] = v116 & 0xFFFFFFFFFFFFFFF8;
            if (!v137) {
              goto LABEL_309;
            }
          }
          if (!v139
            || ((uint64_t v140 = *v137, (v140 & 4) != 0) ? (v141 = 0) : (v141 = (llvm *)(v140 & 0xFFFFFFFFFFFFFFF8)),
                !v141
             || *v139 < 8uLL
             || (*v139 & 4) != 0
             || ((UnderlyingObject = llvm::getUnderlyingObject(v141, (const llvm::Value *)6), (*v139 & 4) != 0)
               ? (uint64_t v143 = 0)
               : (uint64_t v143 = (llvm *)(*v139 & 0xFFFFFFFFFFFFFFF8)),
                 BOOL v144 = llvm::getUnderlyingObject(v143, (const llvm::Value *)6),
                 !UnderlyingObject)))
          {
LABEL_309:
            int v87 = v93;
            uint64_t v112 = v93;
            uint64_t v83 = v138;
LABEL_310:
            uint64_t v5 = v247;
            goto LABEL_250;
          }
          uint64_t v83 = v138;
          int v87 = v93;
          uint64_t v112 = v93;
          if (!v144) {
            goto LABEL_310;
          }
          uint64_t v5 = v247;
          if (UnderlyingObject == v144) {
            goto LABEL_262;
          }
        }
        else
        {
          uint64_t v112 = v93;
          if (!v100) {
            goto LABEL_262;
          }
        }
LABEL_250:
        char v117 = (llvm::MachineFunction *)v5[4];
        if (v249[310]) {
          BOOL v118 = 0;
        }
        else {
          BOOL v118 = v112 == *(unint64_t **)(*((void *)v117 + 41) + 56);
        }
        if (v118) {
          goto LABEL_262;
        }
        uint64_t v119 = v83;
        int v252 = 0;
        uint64_t v120 = *(void *)(v245 + 8) + 48 * v246;
        uint64_t v259 = 0;
        unsigned int v121 = llvm::MachineFunction::CreateMachineInstr(v117, v120, &v259, 0);
        if (!v259) {
          goto LABEL_255;
        }
        int v146 = *v259;
        if ((v146 - 4) > 0x1E)
        {
          if ((v146 - 3) >= 0xFFFFFFFE) {
            int v149 = v259;
          }
          else {
            int v149 = 0;
          }
          if ((v146 - 3) < 0xFFFFFFFE)
          {
            if (v146 == 3) {
              *((void *)v259 + 1) = 0;
            }
            goto LABEL_255;
          }
          unint64_t v148 = (unint64_t)(v149 + 8);
        }
        else
        {
          if ((v259[1] & 0x7F) != 2 && !*((_DWORD *)v259 + 3)) {
            goto LABEL_255;
          }
          uint64_t v147 = *((void *)v259 + 2);
          if ((v147 & 4) == 0) {
            goto LABEL_255;
          }
          unint64_t v148 = v147 & 0xFFFFFFFFFFFFFFF8;
          if (!v148) {
            goto LABEL_255;
          }
        }
        uint64_t v253 = &v259;
        sub_1CC5FA668(v148 + 16, &v253);
LABEL_255:
        uint64_t v122 = v247[5];
        *((void *)v121 + 3) = v122;
        uint64_t v123 = *(void *)(v122 + 32);
        uint64_t v124 = *((unsigned int *)v121 + 10);
        if (v124)
        {
          uint64_t v130 = *((void *)v121 + 4);
          uint64_t v131 = *(void *)(v123 + 40);
          uint64_t v132 = 32 * v124;
          do
          {
            if (!*(unsigned char *)v130)
            {
              uint64_t v133 = *(unsigned int *)(v130 + 4);
              if ((int)v133 >= 0) {
                uint64_t v134 = (uint64_t *)(*(void *)(v131 + 272) + 8 * v133);
              }
              else {
                uint64_t v134 = (uint64_t *)(*(void *)(v131 + 24) + 16 * (v133 & 0x7FFFFFFF) + 8);
              }
              uint64_t v135 = *v134;
              if (*v134)
              {
                uint64_t v136 = *(void *)(v135 + 16);
                *(void *)(v135 + 16) = v130;
                *(void *)(v130 + 16) = v136;
                if (*(unsigned char *)(v130 + 3))
                {
                  *(void *)(v130 + 24) = v135;
                }
                else
                {
                  *(void *)(v130 + 24) = 0;
                  uint64_t v134 = (uint64_t *)(v136 + 24);
                }
              }
              else
              {
                *(void *)(v130 + 16) = v130;
                *(void *)(v130 + 24) = 0;
              }
              *uint64_t v134 = v130;
            }
            v130 += 32;
            v132 -= 32;
          }
          while (v132);
        }
        uint64_t v125 = *(void *)(v123 + 728);
        if (v125) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v125 + 24))(v125, v121);
        }
        unint64_t v126 = *v112 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unsigned int v121 = v126 | *(void *)v121 & 7;
        *((void *)v121 + 1) = v112;
        *(void *)(v126 + 8) = v121;
        *uint64_t v112 = *v112 & 7 | (unint64_t)v121;
        LODWORD(v253) = 1;
        uint64_t v254 = 0;
        v255[0] = 0;
        llvm::MachineInstr::addOperand(v121, v117, (const llvm::MachineOperand *)&v253);
        uint64_t v83 = v119;
        uint64_t v5 = v247;
        if (!v252) {
          goto LABEL_262;
        }
        int v127 = *v252;
        if ((v127 - 4) > 0x1E)
        {
          if ((v127 - 3) >= 0xFFFFFFFE) {
            uint64_t v128 = v252;
          }
          else {
            uint64_t v128 = 0;
          }
          if ((v127 - 3) < 0xFFFFFFFE)
          {
            if (v127 == 3) {
              *((void *)v252 + 1) = 0;
            }
            goto LABEL_262;
          }
          unint64_t v129 = (unint64_t)(v128 + 8);
        }
        else
        {
          if ((v252[1] & 0x7F) != 2 && !*((_DWORD *)v252 + 3)) {
            goto LABEL_262;
          }
          uint64_t v145 = *((void *)v252 + 2);
          if ((v145 & 4) == 0) {
            goto LABEL_262;
          }
          unint64_t v129 = v145 & 0xFFFFFFFFFFFFFFF8;
          if (!v129) {
            goto LABEL_262;
          }
        }
        uint64_t v253 = &v252;
        sub_1CC5FA668(v129 + 16, &v253);
LABEL_262:
        if (*(_WORD *)v93[2] == 8277)
        {
          unsigned int v88 = 0;
          int v87 = 0;
        }
        int v89 = v93;
      }
      while ((unint64_t *)v86 != v3);
    }
  }
  uint64_t v253 = v255;
  uint64_t v254 = 0x1000000000;
  uint64_t v257 = 0;
  uint64_t v258 = 0;
  int v256 = &v257;
  unint64_t v150 = *v3 & 0xFFFFFFFFFFFFFFF8;
  if (!v150 || (*(unsigned char *)v150 & 4) == 0)
  {
    while ((*(_WORD *)(v150 + 44) & 4) != 0)
      unint64_t v150 = *(void *)v150 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v150 == v5[7])
  {
    uint64_t v242 = 0;
    goto LABEL_519;
  }
  char v151 = 0;
  uint64_t v152 = 0;
  if (a3) {
    uint64_t v153 = (void *)(a3 + 8);
  }
  else {
    uint64_t v153 = 0;
  }
  while (2)
  {
    uint64_t v154 = v150;
    unint64_t v150 = *(void *)v150 & 0xFFFFFFFFFFFFFFF8;
    if (!v150 || (*(unsigned char *)v150 & 4) == 0)
    {
      while ((*(_WORD *)(v150 + 44) & 4) != 0)
        unint64_t v150 = *(void *)v150 & 0xFFFFFFFFFFFFFFF8;
    }
    int v155 = *(unsigned __int16 **)(v154 + 16);
    int v156 = *v155;
    if ((v156 - 13) < 5 || v156 == 3) {
      goto LABEL_347;
    }
    if (((v156 == 8277) & v151) == 1)
    {
      LODWORD(v254) = 0;
      sub_1CB833A08((uint64_t)&v256, v257);
      uint64_t v257 = 0;
      uint64_t v258 = 0;
      char v151 = 1;
      uint64_t v152 = v154;
      int v256 = &v257;
      goto LABEL_347;
    }
    unsigned int v158 = v156 - 9;
    BOOL v160 = (v156 - 9) <= 0x3C && ((1 << (v156 - 9)) & 0x1000000000000605) != 0
        || v156 == 0;
    if (v160 || (v155[4] & 0x10) != 0)
    {
      char v151 = 1;
      if (!v152) {
        goto LABEL_347;
      }
    }
    else
    {
      char v151 = v155[8] & 1;
      if (!v152) {
        goto LABEL_347;
      }
    }
    if ((v158 > 0x3C || ((1 << v158) & 0x1000000000000605) == 0)
      && *v155
      && (v155[4] & 0x10) == 0
      && (v155[8] & 1) == 0)
    {
      goto LABEL_367;
    }
    __int16 v161 = *(_WORD *)(v154 + 44);
    uint64_t v162 = *((void *)v155 + 1);
    if ((v161 & 0xC) != 0 && (v161 & 4) == 0)
    {
      uint64_t v241 = v154;
      if ((v162 & 0x1000000) != 0)
      {
LABEL_517:
        uint64_t v152 = 0;
        uint64_t v5 = v247;
        goto LABEL_347;
      }
      while (1)
      {
        uint64_t v5 = v247;
        if ((*(_WORD *)(v241 + 44) & 8) == 0) {
          break;
        }
        uint64_t v241 = *(void *)(v241 + 8);
        if (*(unsigned char *)(*(void *)(v241 + 16) + 11)) {
          goto LABEL_517;
        }
      }
    }
    else if ((v162 & 0x1000000) != 0)
    {
      goto LABEL_367;
    }
    if (v156 - 1) <= 1 && (*(unsigned char *)(*(void *)(v154 + 32) + 48))
    {
LABEL_367:
      uint64_t v152 = 0;
      goto LABEL_347;
    }
    if (((v156 - 4566) > 0x1F || ((1 << (v156 + 42)) & 0xC0005FFF) == 0) && (v162 & 0x2000) == 0
      || (v156 - 8188) <= 0x1F && ((1 << (v156 + 4)) & 0xC0300C03) != 0
      || (v156 - 4596) < 2)
    {
LABEL_401:
      unint64_t v187 = *(unsigned int *)(v154 + 40);
      if (v187)
      {
        for (unint64_t i = 0; i < v187; ++i)
        {
          uint64_t v189 = *(void *)(v154 + 32);
          if (!*(unsigned char *)(v189 + 32 * i))
          {
            unsigned int v190 = *(_DWORD *)(v189 + 32 * i + 4);
            uint64_t v191 = (unsigned __int16 *)(v153[6]
                                      + (((unint64_t)*(unsigned int *)(*v153 + 24 * v190 + 16) >> 3) & 0x1FFFFFFE));
            int v193 = *v191;
            unsigned int v192 = v191 + 1;
            int v194 = v193 + (*(_DWORD *)(*v153 + 24 * v190 + 16) & 0xF) * v190;
            do
            {
              LODWORD(v259) = (unsigned __int16)v194;
              sub_1CB8F4B90((uint64_t)&v253, (unsigned int *)&v259);
              int v195 = *v192++;
              v194 += v195;
            }
            while (v195);
            unint64_t v187 = *(unsigned int *)(v154 + 40);
          }
        }
      }
      goto LABEL_347;
    }
    unsigned int v163 = *(_DWORD *)(*(void *)(v154 + 32) + 4);
    unint64_t v164 = *(unsigned int *)(*v153 + 24 * v163 + 16);
    __int16 v165 = v164 & 0xF;
    unsigned int v166 = (_WORD *)(v153[6] + ((v164 >> 3) & 0x1FFFFFFE));
    unsigned __int16 v167 = *v166 + v165 * v163;
    do
    {
      if (v258)
      {
        for (uint64_t j = v257; j; uint64_t j = (void *)*j)
        {
          unsigned int v169 = *((_DWORD *)j + 7);
          if (v169 <= v167)
          {
            if (v169 >= v167) {
              goto LABEL_401;
            }
            ++j;
          }
        }
      }
      else if (v254)
      {
        uint64_t v170 = 4 * v254;
        uint64_t v171 = v253;
        while (*v171 != v167)
        {
          ++v171;
          v170 -= 4;
          if (!v170) {
            goto LABEL_392;
          }
        }
        if (v170) {
          goto LABEL_401;
        }
      }
LABEL_392:
      int v172 = (unsigned __int16)v166[1];
      ++v166;
      v167 += v172;
    }
    while (v172);
    uint64_t v259 = v261;
    uint64_t v260 = 0x400000000;
    int v263 = 0;
    uint64_t v264 = 0;
    uint64_t v262 = &v263;
    uint64_t v173 = *(void *)(v152 + 24);
    unint64_t v174 = *(unsigned int *)(v154 + 40);
    if (v174)
    {
      uint64_t v244 = *(void *)(v152 + 24);
      for (unint64_t k = 0; k < v174; ++k)
      {
        uint64_t v176 = *(void *)(v154 + 32);
        if (!*(unsigned char *)(v176 + 32 * k))
        {
          unsigned int v177 = *(_DWORD *)(v176 + 32 * k + 4);
          uint64_t v178 = (unsigned __int16 *)(v153[6]
                                    + (((unint64_t)*(unsigned int *)(*v153 + 24 * v177 + 16) >> 3) & 0x1FFFFFFE));
          int v180 = *v178;
          uint64_t v179 = v178 + 1;
          int v181 = v180 + (*(_DWORD *)(*v153 + 24 * v177 + 16) & 0xF) * v177;
          do
          {
            LODWORD(v252) = (unsigned __int16)v181;
            sub_1CB918828((uint64_t)&v259, (unsigned int *)&v252);
            int v182 = *v179++;
            v181 += v182;
          }
          while (v182);
          unint64_t v174 = *(unsigned int *)(v154 + 40);
        }
      }
      uint64_t v183 = v263;
      uint64_t v184 = v264;
      int v185 = v259;
      uint64_t v186 = v260;
      uint64_t v173 = v244;
    }
    else
    {
      uint64_t v186 = 0;
      uint64_t v183 = 0;
      uint64_t v184 = 0;
      int v185 = v261;
    }
    int v196 = 0;
    uint64_t v197 = v173 + 48;
    uint64_t v198 = *(unsigned __int16 **)(v154 + 16);
    int v199 = *v198;
    unint64_t v200 = *((void *)v198 + 2);
    uint64_t v201 = v152;
    while (2)
    {
      if (!v201 || (uint64_t v202 = v201, (*(unsigned char *)v201 & 4) == 0))
      {
        uint64_t v202 = v201;
        if ((*(_WORD *)(v201 + 44) & 8) != 0)
        {
          uint64_t v202 = v201;
          do
            uint64_t v202 = *(void *)(v202 + 8);
          while ((*(_WORD *)(v202 + 44) & 8) != 0);
        }
      }
      if (*(void *)(v202 + 8) == *(void *)(v201 + 24) + 48)
      {
        uint64_t v204 = 0;
      }
      else
      {
        uint64_t v203 = v201;
        if ((*(unsigned char *)v201 & 4) == 0)
        {
          uint64_t v203 = v201;
          if ((*(_WORD *)(v201 + 44) & 8) != 0)
          {
            uint64_t v203 = v201;
            do
              uint64_t v203 = *(void *)(v203 + 8);
            while ((*(_WORD *)(v203 + 44) & 8) != 0);
          }
        }
        uint64_t v204 = *(void *)(v203 + 8);
      }
      int v205 = 0;
      unsigned int v206 = **(unsigned __int16 **)(v201 + 16);
      if (v206 > 0x865)
      {
        if (v206 == 4578 || v206 == 4580)
        {
          int v205 = 1;
        }
        else if (v206 == 2150)
        {
LABEL_426:
          int v205 = v249[338] != 0;
        }
      }
      else if (v206 == 1100)
      {
        int v205 = v249[338];
        if (v249[338]) {
          int v205 = *(unsigned __int8 *)(*(void *)(v201 + 32) + 64) == 7;
        }
      }
      else if (v206 == 2114)
      {
        goto LABEL_426;
      }
      int v208 = 0;
      if (v199 > 2149)
      {
        if (v199 == 4578 || v199 == 4580)
        {
          int v208 = 1;
        }
        else if (v199 == 2150)
        {
LABEL_435:
          int v208 = v249[338] != 0;
        }
      }
      else if (v199 == 1100)
      {
        int v208 = v249[338];
        if (v249[338]) {
          int v208 = *(unsigned __int8 *)(*(void *)(v154 + 32) + 64) == 7;
        }
      }
      else if (v199 == 2114)
      {
        goto LABEL_435;
      }
      if (v204) {
        LODWORD(v204) = (*(unsigned __int8 *)(*(void *)(v204 + 16) + 16) >> 3) & 1;
      }
      if (v205 ^ 1 | (v208 ^ 1) & (v200 >> 3) & 1) == 1 && ((v208 ^ 1 | v204)) {
        goto LABEL_492;
      }
      if ((*(unsigned char *)v201 & 4) == 0)
      {
        while ((*(_WORD *)(v201 + 44) & 8) != 0)
          uint64_t v201 = *(void *)(v201 + 8);
      }
      uint64_t v201 = *(void *)(v201 + 8);
      if (v201 != v197)
      {
        int v209 = *(unsigned __int16 **)(v201 + 16);
        int v210 = *v209;
        BOOL v211 = (v210 - 9) > 0x3C || ((1 << (v210 - 9)) & 0x1000000000000605) == 0;
        BOOL v212 = !v211 || v210 == 0;
        if (v212 || (v209[4] & 0x10) != 0 || (v209[8]) && (v209[8] & 0x40) == 0)
        {
          if ((v210 - 13) >= 5 && v210 != 3)
          {
            uint64_t v214 = *(unsigned int *)(v201 + 40);
            if (v214)
            {
              uint64_t v215 = 0;
              uint64_t v216 = *(void *)(v201 + 32);
              do
              {
                if (!*(unsigned char *)(v216 + 32 * v215))
                {
                  unsigned int v217 = *(_DWORD *)(v216 + 32 * v215 + 4);
                  unint64_t v218 = *(unsigned int *)(*v153 + 24 * v217 + 16);
                  __int16 v219 = v218 & 0xF;
                  unsigned int v220 = (_WORD *)(v153[6] + ((v218 >> 3) & 0x1FFFFFFE));
                  unsigned __int16 v221 = *v220 + v219 * v217;
                  do
                  {
                    if (v184)
                    {
                      for (uint64_t m = v183; m; uint64_t m = (void *)*m)
                      {
                        unsigned int v223 = *((_DWORD *)m + 7);
                        if (v223 <= v221)
                        {
                          if (v223 >= v221) {
                            goto LABEL_491;
                          }
                          ++m;
                        }
                      }
                    }
                    else if (v186)
                    {
                      uint64_t v224 = 4 * v186;
                      uint64_t v225 = v185;
                      while (*(_DWORD *)v225 != v221)
                      {
                        v225 += 4;
                        v224 -= 4;
                        if (!v224) {
                          goto LABEL_483;
                        }
                      }
                      if (v224) {
                        goto LABEL_491;
                      }
                    }
LABEL_483:
                    int v226 = (unsigned __int16)v220[1];
                    ++v220;
                    v221 += v226;
                  }
                  while (v226);
                }
                ++v215;
              }
              while (v215 != v214);
            }
          }
          if (++v196 != 16) {
            continue;
          }
        }
      }
      break;
    }
LABEL_491:
    uint64_t v201 = v152;
LABEL_492:
    sub_1CB833A08((uint64_t)&v262, v183);
    if (v259 != v261) {
      free(v259);
    }
    uint64_t v227 = *(void *)(*(void *)(v154 + 24) + 32);
    if (v227)
    {
      uint64_t v228 = *(void *)(v227 + 728);
      if (v228) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v228 + 32))(v228, v154);
      }
      uint64_t v229 = *(unsigned int *)(v154 + 40);
      if (v229)
      {
        uint64_t v230 = *(void *)(v154 + 32);
        uint64_t v231 = *(void *)(v227 + 40);
        uint64_t v232 = 32 * v229;
        do
        {
          if (!*(unsigned char *)v230)
          {
            uint64_t v233 = *(unsigned int *)(v230 + 4);
            if ((v233 & 0x80000000) != 0) {
              uint64_t v234 = (uint64_t *)(*(void *)(v231 + 24) + 16 * (v233 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v234 = (uint64_t *)(*(void *)(v231 + 272) + 8 * v233);
            }
            uint64_t v235 = *v234;
            uint64_t v237 = *(void *)(v230 + 16);
            uint64_t v236 = *(void *)(v230 + 24);
            if (v230 != *v234) {
              uint64_t v234 = (uint64_t *)(v237 + 24);
            }
            *uint64_t v234 = v236;
            if (v236) {
              uint64_t v238 = v236;
            }
            else {
              uint64_t v238 = v235;
            }
            *(void *)(v238 + 16) = v237;
            *(void *)(v230 + 16) = 0;
            *(void *)(v230 + 24) = 0;
          }
          v230 += 32;
          v232 -= 32;
        }
        while (v232);
      }
    }
    *(void *)(v154 + 24) = 0;
    int v239 = *(unint64_t **)(v154 + 8);
    unint64_t v240 = *(void *)v154 & 0xFFFFFFFFFFFFFFF8;
    *int v239 = v240 | *v239 & 7;
    *(void *)(v240 + 8) = v239;
    *(void *)v154 &= 7uLL;
    *(void *)(v154 + 8) = 0;
    sub_1CBA959D4((uint64_t *)(*(void *)(v152 + 24) + 40), v201, v154);
LABEL_347:
    if (v150 != v5[7]) {
      continue;
    }
    break;
  }
  uint64_t v242 = v257;
LABEL_519:
  sub_1CB833A08((uint64_t)&v256, v242);
  if (v253 != v255) {
    free(v253);
  }
}