uint64_t sub_1CC0CD14C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  if (a2 && *(unsigned __int8 *)(a2 + 16) >= 0x1Cu)
  {
    v2 = *(_DWORD *)(a1 + 40);
    if (v2 >= *(_DWORD *)(a1 + 44)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 32) + 8 * v2) = a2;
    ++*(_DWORD *)(a1 + 40);
  }
  return a2;
}

unsigned __int8 *sub_1CC0CD1CC(unsigned __int8 *result, uint64_t a2)
{
  if (result)
  {
    v2 = result;
    if (result[16] >= 0x1Cu)
    {
      uint64_t v4 = *(unsigned int *)(a2 + 8);
      uint64_t v5 = *(void *)a2 + 8 * v4;
      if (v4)
      {
        uint64_t v6 = 8 * v4;
        result = *(unsigned __int8 **)a2;
        while (*(unsigned __int8 **)result != v2)
        {
          result += 8;
          v6 -= 8;
          if (!v6)
          {
            result = (unsigned __int8 *)(*(void *)a2 + 8 * v4);
            break;
          }
        }
      }
      else
      {
        result = *(unsigned __int8 **)a2;
      }
      if (v4 == (uint64_t)&result[-*(void *)a2] >> 3)
      {
        uint64_t v7 = *((_DWORD *)v2 + 5) & 0x7FFFFFF;
        if (v7)
        {
          uint64_t v8 = 0;
          uint64_t v9 = 32 * v7;
          do
          {
            int v10 = *((_DWORD *)v2 + 5);
            if ((v10 & 0x40000000) != 0) {
              v11 = (unsigned __int8 *)*((void *)v2 - 1);
            }
            else {
              v11 = &v2[-32 * (v10 & 0x7FFFFFF)];
            }
            result = *(unsigned __int8 **)&v11[v8];
            if (result) {
              BOOL v12 = result[16] >= 0x1Cu;
            }
            else {
              BOOL v12 = 0;
            }
            if (v12) {
              result = (unsigned __int8 *)sub_1CC0CD1CC();
            }
            v8 += 32;
          }
          while (v9 != v8);
        }
      }
      else
      {
        if ((unsigned __int8 *)v5 != result + 8)
        {
          result = (unsigned __int8 *)memmove(result, result + 8, v5 - (void)(result + 8));
          LODWORD(v4) = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(a2 + 8) = v4 - 1;
      }
    }
  }
  return result;
}

uint64_t llvm::PHITransAddr::PHITranslateValue(llvm::PHITransAddr *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, const llvm::DominatorTree *a4)
{
  if (a4) {
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
  }
  *(void *)this = 0;
  return 1;
}

unsigned __int8 **llvm::PHITransAddr::PHITranslateWithInsertion(uint64_t *a1, llvm::BasicBlock *a2, llvm::BasicBlock *a3, const llvm::DominatorTree *a4, uint64_t a5)
{
  int v7 = *(_DWORD *)(a5 + 8);
  result = llvm::PHITransAddr::InsertPHITranslatedSubExpr(a1, *a1, a2, a3, a4, a5);
  *a1 = (uint64_t)result;
  if (!result)
  {
    unsigned int v9 = *(_DWORD *)(a5 + 8);
    if (v9 != v7)
    {
      int v10 = *(llvm::Instruction **)(*(void *)a5 + 8 * v9 - 8);
      *(_DWORD *)(a5 + 8) = v9 - 1;
      llvm::Instruction::eraseFromParent(v10);
    }
    return 0;
  }
  return result;
}

unsigned __int8 **llvm::PHITransAddr::InsertPHITranslatedSubExpr(uint64_t *a1, uint64_t a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4, const llvm::DominatorTree *a5, uint64_t a6)
{
  v11 = a1;
  v54[4] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a1[1];
  uint64_t v13 = a1[3];
  v51[0] = a2;
  v51[1] = v12;
  v51[2] = 0;
  v51[3] = v13;
  v52 = v54;
  uint64_t v53 = 0x400000000;
  if (a2 && *(unsigned __int8 *)(a2 + 16) >= 0x1Cu)
  {
    v54[0] = a2;
    LODWORD(v53) = 1;
  }
  if ((llvm::PHITransAddr::PHITranslateValue((llvm::PHITransAddr *)v51, a3, a4, a5) & 1) == 0)
  {
    v14 = (unsigned __int8 **)v51[0];
    goto LABEL_6;
  }
  v14 = 0;
  if (a2)
  {
    unsigned int v16 = *(unsigned __int8 *)(a2 + 16);
    if (v16 >= 0x1C)
    {
      if (v16 - 79 >= 0xFFFFFFF3)
      {
        if (llvm::isSafeToSpeculativelyExecute(a2, 0, 0, 0))
        {
          uint64_t inserted = llvm::PHITransAddr::InsertPHITranslatedSubExpr(v11, *(void *)(a2 - 32), a3, a4, a5, a6);
          if (inserted)
          {
            uint64_t v34 = inserted;
            int v35 = *(unsigned __int8 *)(a2 + 16) - 28;
            uint64_t v36 = *(void *)a2;
            __int16 v50 = 773;
            Name = llvm::Value::getName((llvm::Value *)a2);
            uint64_t v48 = v37;
            v49[0] = ".phi.trans.insert";
            v38 = (void *)*((void *)a4 + 5);
            if (v38 == (void *)((char *)a4 + 40))
            {
              uint64_t v40 = 0;
            }
            else
            {
              if (v38) {
                uint64_t v39 = (uint64_t)(v38 - 3);
              }
              else {
                uint64_t v39 = 0;
              }
              if (*(unsigned __int8 *)(v39 + 16) - 29 >= 0xB) {
                uint64_t v40 = 0;
              }
              else {
                uint64_t v40 = v39;
              }
            }
            v14 = (unsigned __int8 **)llvm::CastInst::Create(v35, v34, v36, (const char **)&Name, v40);
            v41 = *(unsigned __int8 **)(a2 + 48);
            v46 = v41;
            if (v41) {
              llvm::MetadataTracking::track((uint64_t)&v46, v41, 2);
            }
            sub_1CB8F69CC(v14 + 6, &v46);
            if (v46) {
              llvm::MetadataTracking::untrack((uint64_t)&v46, v46);
            }
            unsigned int v42 = *(_DWORD *)(a6 + 8);
            if (v42 >= *(_DWORD *)(a6 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)a6 + 8 * v42) = v14;
            ++*(_DWORD *)(a6 + 8);
            goto LABEL_6;
          }
        }
      }
      else if (v16 == 62)
      {
        Name = v49;
        uint64_t v48 = 0x800000000;
        int v17 = *(_DWORD *)(a2 + 20);
        uint64_t v18 = v17 & 0x7FFFFFF;
        if ((v17 & 0x7FFFFFF) != 0)
        {
          uint64_t v19 = *(void *)(a2 + 40);
          uint64_t v20 = a2;
          while (1)
          {
            uint64_t v21 = llvm::PHITransAddr::InsertPHITranslatedSubExpr(v11, *(void *)(v20 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), v19, a4, a5, a6);
            if (!v21) {
              break;
            }
            if (v48 >= (unint64_t)HIDWORD(v48)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)Name + v48) = v21;
            uint64_t v22 = (v48 + 1);
            LODWORD(v48) = v48 + 1;
            v20 += 32;
            if (!--v18)
            {
              v23 = Name;
              v11 = *(uint64_t **)Name;
              uint64_t v24 = v22 - 1;
              goto LABEL_19;
            }
          }
          v14 = 0;
        }
        else
        {
          uint64_t v24 = -1;
          v23 = v49;
LABEL_19:
          uint64_t v25 = *(void *)(a2 + 64);
          v26 = v23 + 1;
          __int16 v45 = 773;
          v44[0] = llvm::Value::getName((llvm::Value *)a2);
          v44[1] = v27;
          v44[2] = ".phi.trans.insert";
          v28 = (void *)*((void *)a4 + 5);
          if (v28 == (void *)((char *)a4 + 40))
          {
            uint64_t v30 = 0;
          }
          else
          {
            if (v28) {
              uint64_t v29 = (uint64_t)(v28 - 3);
            }
            else {
              uint64_t v29 = 0;
            }
            if (*(unsigned __int8 *)(v29 + 16) - 29 >= 0xB) {
              uint64_t v30 = 0;
            }
            else {
              uint64_t v30 = v29;
            }
          }
          v14 = (unsigned __int8 **)llvm::User::operator new((llvm::User *)0x50, (int)v24 + 1);
          sub_1CB845960((uint64_t)v14, v25, v11, v26, v24, v24 + 1, v44, v30);
          v31 = *(unsigned __int8 **)(a2 + 48);
          v43 = v31;
          if (v31) {
            llvm::MetadataTracking::track((uint64_t)&v43, v31, 2);
          }
          sub_1CB8F69CC(v14 + 6, &v43);
          if (v43) {
            llvm::MetadataTracking::untrack((uint64_t)&v43, v43);
          }
          llvm::GetElementPtrInst::setIsInBounds((uint64_t)v14, (*(unsigned __int8 *)(a2 + 17) >> 1) & 1);
          unsigned int v32 = *(_DWORD *)(a6 + 8);
          if (v32 >= *(_DWORD *)(a6 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a6 + 8 * v32) = v14;
          ++*(_DWORD *)(a6 + 8);
        }
        if (Name != v49) {
          free(Name);
        }
        goto LABEL_6;
      }
      v14 = 0;
    }
  }
LABEL_6:
  if (v52 != v54) {
    free(v52);
  }
  return v14;
}

void llvm::PhiValues::invalidateValue(llvm::PhiValues *this, const llvm::Value *a2)
{
  v39[4] = *MEMORY[0x1E4F143B8];
  uint64_t v37 = v39;
  uint64_t v38 = 0x800000000;
  uint64_t v2 = *((void *)this + 7);
  uint64_t v3 = *((unsigned int *)this + 18);
  uint64_t v4 = (unsigned int *)(v2 + 96 * v3);
  if (*((_DWORD *)this + 16))
  {
    if (v3)
    {
      uint64_t v13 = 96 * v3;
      uint64_t v5 = (unsigned int *)*((void *)this + 7);
      while (*v5 >= 0xFFFFFFFE)
      {
        v5 += 24;
        v13 -= 96;
        if (!v13) {
          goto LABEL_2;
        }
      }
    }
    else
    {
      uint64_t v5 = (unsigned int *)*((void *)this + 7);
    }
  }
  else
  {
LABEL_2:
    uint64_t v5 = (unsigned int *)(v2 + 96 * v3);
  }
  uint64_t v6 = (unsigned int *)(v2 + 96 * v3);
  if (v5 != v6)
  {
    unsigned int v32 = (char *)this + 56;
    v33 = a2;
    v14 = this;
    do
    {
      uint64_t v36 = 0;
      if (sub_1CD426E14((uint64_t)(v5 + 2), (uint64_t)v33, &v36))
      {
        if (v38 >= (unint64_t)HIDWORD(v38)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v37 + v38) = *v5;
        LODWORD(v38) = v38 + 1;
      }
      v15 = v5 + 24;
      while (v15 != v4)
      {
        unsigned int v16 = *v15;
        v15 += 24;
        if (v16 <= 0xFFFFFFFD)
        {
          uint64_t v5 = v15 - 24;
          goto LABEL_25;
        }
      }
      uint64_t v5 = v4;
LABEL_25:
      ;
    }
    while (v5 != v6);
    a2 = v33;
    this = v14;
    uint64_t v17 = (uint64_t)v32;
    if (v38)
    {
      uint64_t v18 = (int *)v37;
      uint64_t v19 = (int *)((char *)v37 + 4 * v38);
      do
      {
        int v20 = *v18;
        int v35 = *v18;
        uint64_t v21 = sub_1CD4B5440(v17, &v35);
        uint64_t v22 = v21[14];
        if (v22)
        {
          v23 = (uint64_t *)*((void *)v21 + 6);
          uint64_t v24 = 8 * v22;
          do
          {
            uint64_t v25 = *v23;
            if (*(unsigned char *)(*v23 + 16) != 83) {
              uint64_t v25 = 0;
            }
            uint64_t v34 = v25;
            if (v25)
            {
              uint64_t v36 = 0;
              if (sub_1CD3C8538((uint64_t *)v14 + 1, &v34, &v36))
              {
                *uint64_t v36 = -8192;
                *((int32x2_t *)v14 + 2) = vadd_s32(*(int32x2_t *)((char *)v14 + 16), (int32x2_t)0x1FFFFFFFFLL);
              }
            }
            ++v23;
            v24 -= 8;
          }
          while (v24);
        }
        sub_1CD4B45FC((uint64_t)v14 + 32, v20);
        uint64_t v17 = (uint64_t)v32;
        sub_1CD4B468C((uint64_t)v32, v20);
        this = v14;
        ++v18;
        a2 = v33;
      }
      while (v18 != v19);
    }
  }
  uint64_t v9 = *((void *)this + 10);
  int v7 = (int32x2_t *)((char *)this + 80);
  uint64_t v8 = v9;
  unsigned __int32 v10 = v7[2].u32[0];
  if (!v10) {
    goto LABEL_5;
  }
  v26 = v7;
  unsigned __int32 v27 = v10 - 1;
  unsigned int v28 = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v12 = v8 + 40 * v28;
  uint64_t v29 = *(const llvm::Value **)(v12 + 24);
  if (v29 != a2)
  {
    int v30 = 1;
    while (1)
    {
      int v7 = v26;
      if (v29 == (const llvm::Value *)-4096) {
        break;
      }
      unsigned int v31 = v28 + v30++;
      unsigned int v28 = v31 & v27;
      uint64_t v12 = v8 + 40 * (v31 & v27);
      uint64_t v29 = *(const llvm::Value **)(v12 + 24);
      if (v29 == a2) {
        goto LABEL_40;
      }
    }
LABEL_5:
    uint64_t v11 = v8 + 40 * v10;
    uint64_t v12 = v11;
    goto LABEL_6;
  }
LABEL_40:
  uint64_t v11 = v8 + 40 * v10;
  int v7 = v26;
LABEL_6:
  if (v11 != v12) {
    sub_1CD4B5ED0(v7, v12);
  }
  if (v37 != v39) {
    free(v37);
  }
}

BOOL llvm::PhiValues::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v18[0] = (void **)a3;
  v18[1] = (void **)&llvm::PhiValuesAnalysis::Key;
  uint64_t v4 = *(void *)(a3 + 48);
  uint64_t v3 = *(void *)(a3 + 56);
  if (v3 == v4)
  {
    uint64_t v5 = *(unsigned int *)(a3 + 68);
    uint64_t v6 = (void **)(v3 + 8 * v5);
    if (v5)
    {
      uint64_t v7 = 0;
      while (*(_UNKNOWN **)(v3 + v7) != &llvm::PhiValuesAnalysis::Key)
      {
        v7 += 8;
        if (8 * v5 == v7) {
          goto LABEL_6;
        }
      }
      uint64_t v6 = (void **)(v3 + v7);
    }
LABEL_6:
    uint64_t v4 = *(void *)(a3 + 56);
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a3 + 64);
    int v11 = v10 - 1;
    unsigned int v12 = (v10 - 1) & ((&llvm::PhiValuesAnalysis::Key >> 4) ^ (&llvm::PhiValuesAnalysis::Key >> 9));
    uint64_t v6 = (void **)(v3 + 8 * v12);
    uint64_t v13 = *v6;
    if (*v6 == (void *)-1)
    {
      v14 = 0;
LABEL_26:
      if (v14) {
        uint64_t v6 = v14;
      }
      if (*v6 != &llvm::PhiValuesAnalysis::Key)
      {
        LODWORD(v5) = *(_DWORD *)(a3 + 68);
        uint64_t v6 = (void **)(v3 + 8 * v10);
        goto LABEL_7;
      }
    }
    else
    {
      v14 = 0;
      int v15 = 1;
      while (v13 != &llvm::PhiValuesAnalysis::Key)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == (void *)-2;
        }
        if (v16) {
          v14 = v6;
        }
        unsigned int v17 = v12 + v15++;
        unsigned int v12 = v17 & v11;
        uint64_t v6 = (void **)(v3 + 8 * (v17 & v11));
        uint64_t v13 = *v6;
        if (*v6 == (void *)-1) {
          goto LABEL_26;
        }
      }
    }
    LODWORD(v5) = *(_DWORD *)(a3 + 68);
  }
LABEL_7:
  if (v3 == v4) {
    unsigned int v8 = v5;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a3 + 64);
  }
  BOOL v19 = v6 != (void **)(v3 + 8 * v8);
  return !sub_1CBF75724(v18) && !sub_1CBF7593C((uint64_t)v18);
}

char *llvm::PhiValues::processPhi(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = *(_DWORD *)a1;
  uint64_t v95 = a2;
  unsigned int v7 = v5 + 1;
  *(_DWORD *)a1 = v5 + 1;
  uint64_t v8 = (uint64_t)(a1 + 10);
  int v94 = v5 + 1;
  *((_DWORD *)sub_1CD4B4E64(a1 + 1, &v95) + 2) = v5 + 1;
  uint64_t v90 = 2;
  v91 = 0;
  v92 = (int32x2_t ****)v95;
  if (v95 != -8192 && v95 != -4096 && v95 != 0) {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v90);
  }
  v89 = off_1F26068B0;
  v93 = a1;
  sub_1CD4B4F78((uint64_t)v96, v8, (uint64_t *)&v89);
  if (v92 != (int32x2_t ****)-8192 && v92 != (int32x2_t ****)-4096 && v92)
  {
    unint64_t v10 = v90 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v90 & 0xFFFFFFFFFFFFFFF8) = v91;
    if (v91)
    {
      unint64_t *v91 = *v91 & 7 | v10;
    }
    else
    {
      int v11 = v92;
      unsigned int v12 = ***v92;
      unint64_t v13 = (unint64_t)v12[303];
      if (v13 <= v10)
      {
        uint64_t v14 = v12[305].u32[0];
        if (v13 + 16 * v14 > v10)
        {
          unsigned int v15 = v14 - 1;
          LODWORD(v16) = v15 & ((v92 >> 4) ^ (v92 >> 9));
          unsigned int v17 = (int32x2_t *****)(v13 + 16 * v16);
          uint64_t v18 = *v17;
          if (v92 == *v17)
          {
LABEL_18:
            *unsigned int v17 = (int32x2_t ****)-8192;
            v12[304] = vadd_s32(v12[304], (int32x2_t)0x1FFFFFFFFLL);
            int v11 = v92;
          }
          else
          {
            int v19 = 1;
            while (v18 != (int32x2_t ****)-4096)
            {
              int v20 = v16 + v19++;
              uint64_t v16 = v20 & v15;
              uint64_t v18 = *(int32x2_t *****)(v13 + 16 * v16);
              if (v92 == v18)
              {
                unsigned int v17 = (int32x2_t *****)(v13 + 16 * v16);
                goto LABEL_18;
              }
            }
          }
          *((unsigned char *)v11 + 17) &= ~1u;
        }
      }
    }
  }
  uint64_t v21 = v95;
  int v22 = *(_DWORD *)(v95 + 20);
  if ((v22 & 0x40000000) != 0)
  {
    uint64_t v24 = *(uint64_t (****)(llvm::CallbackVH *__hidden))(v95 - 8);
    uint64_t v23 = v22 & 0x7FFFFFF;
    if (!v23) {
      goto LABEL_65;
    }
    goto LABEL_25;
  }
  uint64_t v23 = v22 & 0x7FFFFFF;
  uint64_t v24 = (uint64_t (***)(llvm::CallbackVH *__hidden))(v95 - 32 * v23);
  if (v23)
  {
LABEL_25:
    uint64_t v25 = &v24[4 * v23];
    while (1)
    {
      v26 = *v24;
      if (!*v24 || *((unsigned char *)v26 + 16) != 83)
      {
        uint64_t v90 = 2;
        v91 = 0;
        v92 = (int32x2_t ****)v26;
        if (v26 != (uint64_t (**)(llvm::CallbackVH *__hidden))-8192
          && v26 != (uint64_t (**)(llvm::CallbackVH *__hidden))-4096
          && v26 != 0)
        {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v90);
        }
        v89 = off_1F26068B0;
        v93 = a1;
        sub_1CD4B4F78((uint64_t)v96, v8, (uint64_t *)&v89);
        if (v92 != (int32x2_t ****)-8192 && v92 != (int32x2_t ****)-4096 && v92)
        {
          unint64_t v29 = v90 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v90 & 0xFFFFFFFFFFFFFFF8) = v91;
          if (v91)
          {
            unint64_t *v91 = *v91 & 7 | v29;
          }
          else
          {
            int v30 = v92;
            unsigned int v31 = ***v92;
            unint64_t v32 = (unint64_t)v31[303];
            if (v32 <= v29)
            {
              uint64_t v33 = v31[305].u32[0];
              if (v32 + 16 * v33 > v29)
              {
                unsigned int v34 = v33 - 1;
                LODWORD(v35) = v34 & ((v92 >> 4) ^ (v92 >> 9));
                uint64_t v36 = (int32x2_t *****)(v32 + 16 * v35);
                uint64_t v37 = *v36;
                if (v92 == *v36)
                {
LABEL_49:
                  *uint64_t v36 = (int32x2_t ****)-8192;
                  v31[304] = vadd_s32(v31[304], (int32x2_t)0x1FFFFFFFFLL);
                  int v30 = v92;
                }
                else
                {
                  int v38 = 1;
                  while (v37 != (int32x2_t ****)-4096)
                  {
                    int v39 = v35 + v38++;
                    uint64_t v35 = v39 & v34;
                    uint64_t v37 = *(int32x2_t *****)(v32 + 16 * v35);
                    if (v92 == v37)
                    {
                      uint64_t v36 = (int32x2_t *****)(v32 + 16 * v35);
                      goto LABEL_49;
                    }
                  }
                }
                *((unsigned char *)v30 + 17) &= ~1u;
              }
            }
          }
        }
        goto LABEL_58;
      }
      v89 = *v24;
      v96[0] = 0;
      if ((sub_1CD3C8538(v6, &v89, v96) & 1) == 0 || (unsigned int v27 = *(_DWORD *)(v96[0] + 8)) == 0)
      {
        llvm::PhiValues::processPhi(a1, v26, a3);
        v89 = v26;
        v96[0] = 0;
        if (sub_1CD3C8538(v6, &v89, v96)) {
          unsigned int v27 = *(_DWORD *)(v96[0] + 8);
        }
        else {
          unsigned int v27 = 0;
        }
      }
      int v40 = *((_DWORD *)a1 + 18);
      if (!v40) {
        goto LABEL_53;
      }
      uint64_t v43 = a1[7];
      int v44 = v40 - 1;
      unsigned int v45 = v44 & (37 * v27);
      int v46 = *(_DWORD *)(v43 + 96 * v45);
      if (v27 != v46) {
        break;
      }
LABEL_58:
      v24 += 4;
      if (v24 == v25)
      {
        uint64_t v21 = v95;
        goto LABEL_65;
      }
    }
    int v47 = 1;
    while (v46 != -1)
    {
      unsigned int v48 = v45 + v47++;
      unsigned int v45 = v48 & v44;
      int v46 = *(_DWORD *)(v43 + 96 * v45);
      if (v27 == v46) {
        goto LABEL_58;
      }
    }
LABEL_53:
    unsigned int v41 = *((_DWORD *)sub_1CD4B4E64(v6, &v95) + 2);
    if (v27 >= v41) {
      unsigned int v42 = v41;
    }
    else {
      unsigned int v42 = v27;
    }
    *((_DWORD *)sub_1CD4B4E64(v6, &v95) + 2) = v42;
    goto LABEL_58;
  }
LABEL_65:
  unsigned int v49 = *(_DWORD *)(a3 + 8);
  if (v49 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v49) = v21;
  ++*(_DWORD *)(a3 + 8);
  result = (char *)sub_1CD4B4E64(v6, &v95);
  if (*((_DWORD *)result + 2) == v7)
  {
    v51 = sub_1CD4B5440((uint64_t)(a1 + 7), &v94);
    v52 = v51 + 2;
    while (1)
    {
      uint64_t v53 = *(unsigned int *)(a3 + 8);
      v54 = *(uint64_t (***)(llvm::CallbackVH *__hidden))(*(void *)a3 + 8 * v53 - 8);
      *(_DWORD *)(a3 + 8) = v53 - 1;
      v89 = v54;
      sub_1CD4B43C4((uint64_t)v52, (uint64_t *)&v89);
      int v55 = *((_DWORD *)v54 + 5);
      if ((v55 & 0x40000000) != 0)
      {
        v57 = (uint64_t (***)(llvm::CallbackVH *__hidden))*(v54 - 1);
        uint64_t v56 = v55 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v56 = v55 & 0x7FFFFFF;
        v57 = (uint64_t (***)(llvm::CallbackVH *__hidden))&v54[-4 * v56];
      }
      v58 = &v57[4 * v56];
      if (v56) {
        break;
      }
LABEL_73:
      uint64_t v59 = *(unsigned int *)(a3 + 8);
      if (!v59 || (v60 = sub_1CD4B4E64(v6, (void *)(*(void *)a3 + 8 * v59 - 8)), *((_DWORD *)v60 + 2) < v7))
      {
        result = (char *)sub_1CD4B5BB8((uint64_t)(a1 + 4), &v94);
        uint64_t v70 = v51[14];
        if (!v70) {
          return result;
        }
        v71 = result;
        v72 = (uint64_t (***)(llvm::CallbackVH *__hidden))*((void *)v51 + 6);
        v73 = &v72[v70];
        v74 = result + 8;
        v75 = result + 16;
        while (1)
        {
          v76 = *v72;
          if (*((unsigned char *)*v72 + 16) != 83)
          {
            v89 = *v72;
            if (*v74)
            {
              int v77 = 4;
              v78 = v75;
            }
            else
            {
              int v77 = *((_DWORD *)v71 + 6);
              if (!v77)
              {
                v87 = 0;
LABEL_110:
                result = (char *)sub_1CC00AEB8((uint64_t)v74, (uint64_t)&v89, &v89, v87);
                *(void *)result = v89;
                unint64_t v88 = *((unsigned int *)v71 + 14);
                if (v88 >= *((unsigned int *)v71 + 15)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*((void *)v71 + 6) + 8 * v88) = v89;
                ++*((_DWORD *)v71 + 14);
                goto LABEL_112;
              }
              v78 = (char *)*((void *)v71 + 2);
            }
            int v79 = v77 - 1;
            unsigned int v80 = v79 & ((v76 >> 4) ^ (v76 >> 9));
            v81 = (uint64_t (***)(llvm::CallbackVH *__hidden))&v78[8 * v80];
            v82 = *v81;
            if (v76 != *v81)
            {
              v83 = 0;
              int v84 = 1;
              while (v82 != (uint64_t (**)(llvm::CallbackVH *__hidden))-4096)
              {
                if (v83) {
                  BOOL v85 = 0;
                }
                else {
                  BOOL v85 = v82 == (uint64_t (**)(llvm::CallbackVH *__hidden))-8192;
                }
                if (v85) {
                  v83 = v81;
                }
                unsigned int v86 = v80 + v84++;
                unsigned int v80 = v86 & v79;
                v81 = (uint64_t (***)(llvm::CallbackVH *__hidden))&v78[8 * v80];
                v82 = *v81;
                if (v76 == *v81) {
                  goto LABEL_112;
                }
              }
              if (v83) {
                v87 = v83;
              }
              else {
                v87 = v81;
              }
              goto LABEL_110;
            }
          }
LABEL_112:
          if (++v72 == v73) {
            return result;
          }
        }
      }
      *((_DWORD *)v60 + 2) = v7;
    }
    while (1)
    {
      v61 = *v57;
      v89 = v61;
      if (*((unsigned char *)v61 + 16) != 83) {
        v61 = 0;
      }
      v96[0] = v61;
      if (v61)
      {
        int v62 = *((_DWORD *)sub_1CD4B4E64(v6, v96) + 2);
        if (v62 != v7)
        {
          uint64_t v63 = a1[7];
          unsigned int v64 = *((_DWORD *)a1 + 18);
          if (!v64) {
            goto LABEL_82;
          }
          unsigned int v66 = (v64 - 1) & (37 * v62);
          v65 = (uint64_t **)(v63 + 96 * v66);
          int v67 = *(_DWORD *)v65;
          if (v62 != *(_DWORD *)v65)
          {
            int v68 = 1;
            while (v67 != -1)
            {
              unsigned int v69 = v66 + v68++;
              unsigned int v66 = v69 & (v64 - 1);
              v65 = (uint64_t **)(v63 + 96 * v66);
              int v67 = *(_DWORD *)v65;
              if (v62 == *(_DWORD *)v65) {
                goto LABEL_84;
              }
            }
LABEL_82:
            v65 = (uint64_t **)(v63 + 96 * v64);
          }
LABEL_84:
          if (v65 != (uint64_t **)(v63 + 96 * v64)) {
            sub_1CD4B4448(v52, v65[6], &v65[6][*((unsigned int *)v65 + 14)]);
          }
        }
      }
      else
      {
        sub_1CD4B43C4((uint64_t)v52, (uint64_t *)&v89);
      }
      v57 += 4;
      if (v57 == v58) {
        goto LABEL_73;
      }
    }
  }
  return result;
}

void llvm::PhiValues::releaseMemory(llvm::PhiValues *this)
{
  sub_1CD3C7F68((_DWORD *)this + 2);
  sub_1CD4B4718((_DWORD *)this + 8);

  sub_1CD4B47F4((_DWORD *)this + 14);
}

void llvm::PhiValues::print(llvm::PhiValues *this, llvm::raw_ostream *a2)
{
  uint64_t v2 = *((void *)this + 13);
  uint64_t v3 = v2 + 72;
  uint64_t v4 = *(void *)(v2 + 80);
  if (v4 != v2 + 72)
  {
    unsigned int v7 = (uint64_t *)((char *)this + 8);
    while (1)
    {
      uint64_t v8 = v4 - 24;
      if (!v4) {
        uint64_t v8 = 0;
      }
      if (*(void *)(v8 + 40) != v8 + 40) {
        break;
      }
LABEL_52:
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == v3) {
        return;
      }
    }
    for (uint64_t i = *(void *)(v8 + 48); ; uint64_t i = *((void *)v10 + 4))
    {
      unint64_t v10 = (llvm::Value *)(i - 24);
      if (i) {
        uint64_t v11 = i - 24;
      }
      else {
        uint64_t v11 = 0;
      }
      if (!i || *(unsigned char *)(v11 + 16) != 83) {
        goto LABEL_52;
      }
      unsigned int v12 = (_DWORD *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v12 > 3uLL)
      {
        *unsigned int v12 = 541673552;
        *((void *)a2 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(a2, "PHI ", 4uLL);
      }
      llvm::Value::printAsOperand(v10, a2, 0, 0);
      unint64_t v13 = (void *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v13 > 0xCuLL)
      {
        qmemcpy(v13, " has values:\n", 13);
        *((void *)a2 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(a2, " has values:\n", 0xDuLL);
      }
      uint64_t v35 = 0;
      uint64_t v36 = v10;
      if (sub_1CD3C8538(v7, &v36, &v35)) {
        int v14 = *(_DWORD *)(v35 + 8);
      }
      else {
        int v14 = 0;
      }
      uint64_t v15 = *((void *)this + 4);
      unsigned int v16 = *((_DWORD *)this + 12);
      if (v16)
      {
        unsigned int v17 = (v16 - 1) & (37 * v14);
        uint64_t v18 = (int *)(v15 + 96 * v17);
        int v19 = *v18;
        if (v14 == *v18) {
          goto LABEL_26;
        }
        int v20 = 1;
        while (v19 != -1)
        {
          unsigned int v21 = v17 + v20++;
          unsigned int v17 = v21 & (v16 - 1);
          uint64_t v18 = (int *)(v15 + 96 * v17);
          int v19 = *v18;
          if (v14 == *v18) {
            goto LABEL_26;
          }
        }
      }
      uint64_t v18 = (int *)(v15 + 96 * v16);
LABEL_26:
      if (v18 == (int *)(v15 + 96 * v16))
      {
        uint64_t v29 = *((void *)a2 + 4);
        if ((unint64_t)(*((void *)a2 + 3) - v29) <= 9)
        {
          int v30 = a2;
          unsigned int v31 = "  UNKNOWN\n";
          size_t v32 = 10;
LABEL_45:
          llvm::raw_ostream::write(v30, v31, v32);
          continue;
        }
        *(_WORD *)(v29 + 8) = 2638;
        *(void *)uint64_t v29 = *(void *)"  UNKNOWN\n";
        uint64_t v34 = *((void *)a2 + 4) + 10;
        goto LABEL_51;
      }
      uint64_t v22 = v18[14];
      if (!v22)
      {
        uint64_t v33 = (_DWORD *)*((void *)a2 + 4);
        if (*((void *)a2 + 3) - (void)v33 <= 6uLL)
        {
          int v30 = a2;
          unsigned int v31 = "  NONE\n";
          size_t v32 = 7;
          goto LABEL_45;
        }
        *(_DWORD *)((char *)v33 + 3) = 172314191;
        _DWORD *v33 = 1330520096;
        uint64_t v34 = *((void *)a2 + 4) + 7;
LABEL_51:
        *((void *)a2 + 4) = v34;
        continue;
      }
      uint64_t v23 = (llvm::Value **)*((void *)v18 + 6);
      uint64_t v24 = 8 * v22;
      do
      {
        uint64_t v25 = *v23;
        if (*v23) {
          BOOL v26 = *((unsigned __int8 *)*v23 + 16) >= 0x1Cu;
        }
        else {
          BOOL v26 = 0;
        }
        if (!v26)
        {
          unsigned int v27 = (_WORD *)*((void *)a2 + 4);
          if (*((void *)a2 + 3) - (void)v27 > 1uLL)
          {
            _WORD *v27 = 8224;
            *((void *)a2 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(a2, "  ", 2uLL);
          }
        }
        llvm::Value::print(v25, a2, 0);
        unsigned int v28 = (unsigned char *)*((void *)a2 + 4);
        if (*((unsigned char **)a2 + 3) == v28)
        {
          llvm::raw_ostream::write(a2, "\n", 1uLL);
        }
        else
        {
          unsigned char *v28 = 10;
          ++*((void *)a2 + 4);
        }
        ++v23;
        v24 -= 8;
      }
      while (v24);
    }
  }
}

void llvm::PhiValuesAnalysis::run(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(_DWORD *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = a1;
}

void sub_1CC0CE7B4()
{
}

_DWORD *sub_1CC0CE854(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    result = operator new(96 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 96 * v5;
      do
      {
        char *result = -1;
        result += 24;
        v6 -= 96;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void sub_1CC0CE8F0(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)a1 + 64;
    uint64_t v3 = 96 * v1;
    do
    {
      if (*(_DWORD *)(v2 - 64) <= 0xFFFFFFFD)
      {
        unint64_t v4 = *(void **)(v2 - 16);
        if ((void *)v2 != v4) {
          free(v4);
        }
        if ((*(unsigned char *)(v2 - 56) & 1) == 0) {
          MEMORY[0x1D25D9CD0](*(void *)(v2 - 48), 8);
        }
      }
      v2 += 96;
      v3 -= 96;
    }
    while (v3);
  }
}

void sub_1CC0CE968(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)a1 + 64;
    uint64_t v3 = 96 * v1;
    do
    {
      if (*(_DWORD *)(v2 - 64) <= 0xFFFFFFFD)
      {
        unint64_t v4 = *(void **)(v2 - 16);
        if ((void *)v2 != v4) {
          free(v4);
        }
        if ((*(unsigned char *)(v2 - 56) & 1) == 0) {
          MEMORY[0x1D25D9CD0](*(void *)(v2 - 48), 8);
        }
      }
      v2 += 96;
      v3 -= 96;
    }
    while (v3);
  }
}

void *sub_1CC0CE9E0(void *a1)
{
  return a1;
}

void *sub_1CC0CEA4C(void *result)
{
  uint64_t v1 = *((unsigned int *)result + 4);
  if (v1)
  {
    uint64_t v11 = 2;
    uint64_t v12 = 0;
    uint64_t v13 = -4096;
    uint64_t v14 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = off_1F26068B0;
    uint64_t v6 = 2;
    uint64_t v7 = 0;
    uint64_t v8 = -8192;
    uint64_t v2 = 40 * v1;
    uint64_t v3 = (uint64_t *)(*result + 24);
    do
    {
      uint64_t v4 = *v3;
      if (*v3 != -8192 && v4 != -4096 && v4 != 0) {
        result = llvm::ValueHandleBase::RemoveFromUseList(v3 - 2);
      }
      v3 += 5;
      v2 -= 40;
    }
    while (v2);
  }
  return result;
}

void llvm::initializePostDominatorTreeWrapperPassPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC6D50, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC0CEBDC;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCC6D50, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC0CEBDC()
{
}

BOOL llvm::PostDominatorTree::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v18[0] = (void **)a3;
  v18[1] = (void **)&llvm::PostDominatorTreeAnalysis::Key;
  uint64_t v4 = *(void *)(a3 + 48);
  uint64_t v3 = *(void *)(a3 + 56);
  if (v3 == v4)
  {
    uint64_t v5 = *(unsigned int *)(a3 + 68);
    uint64_t v6 = (void **)(v3 + 8 * v5);
    if (v5)
    {
      uint64_t v7 = 0;
      while (*(_UNKNOWN **)(v3 + v7) != &llvm::PostDominatorTreeAnalysis::Key)
      {
        v7 += 8;
        if (8 * v5 == v7) {
          goto LABEL_6;
        }
      }
      uint64_t v6 = (void **)(v3 + v7);
    }
LABEL_6:
    uint64_t v4 = *(void *)(a3 + 56);
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a3 + 64);
    int v11 = v10 - 1;
    unsigned int v12 = (v10 - 1) & ((&llvm::PostDominatorTreeAnalysis::Key >> 4) ^ (&llvm::PostDominatorTreeAnalysis::Key >> 9));
    uint64_t v6 = (void **)(v3 + 8 * v12);
    uint64_t v13 = *v6;
    if (*v6 == (void *)-1)
    {
      uint64_t v14 = 0;
LABEL_27:
      if (v14) {
        uint64_t v6 = v14;
      }
      if (*v6 != &llvm::PostDominatorTreeAnalysis::Key)
      {
        LODWORD(v5) = *(_DWORD *)(a3 + 68);
        uint64_t v6 = (void **)(v3 + 8 * v10);
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v14 = 0;
      int v15 = 1;
      while (v13 != &llvm::PostDominatorTreeAnalysis::Key)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == (void *)-2;
        }
        if (v16) {
          uint64_t v14 = v6;
        }
        unsigned int v17 = v12 + v15++;
        unsigned int v12 = v17 & v11;
        uint64_t v6 = (void **)(v3 + 8 * (v17 & v11));
        uint64_t v13 = *v6;
        if (*v6 == (void *)-1) {
          goto LABEL_27;
        }
      }
    }
    LODWORD(v5) = *(_DWORD *)(a3 + 68);
  }
LABEL_7:
  if (v3 == v4) {
    unsigned int v8 = v5;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a3 + 64);
  }
  BOOL v19 = v6 != (void **)(v3 + 8 * v8);
  return !sub_1CBF75724(v18) && !sub_1CBF7593C((uint64_t)v18) && !sub_1CBF75B60((uint64_t)v18);
}

uint64_t llvm::PostDominatorTreeWrapperPass::runOnFunction(llvm::PostDominatorTreeWrapperPass *this, llvm::Function *a2)
{
  *((void *)this + 14) = a2;
  sub_1CC5A46F8((uint64_t)this + 32, 0);
  return 0;
}

void llvm::PostDominatorTreeAnalysis::run(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x400000000;
  *(_DWORD *)(a2 + 92) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 88) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = a1;
  sub_1CC5A46F8(a2, 0);
}

void *llvm::PostDominatorTreePrinterPass::PostDominatorTreePrinterPass(void *result, uint64_t a2)
{
  char *result = a2;
  return result;
}

uint64_t *sub_1CC0CEE28(uint64_t a1)
{
  result = sub_1CC0CEEC8((uint64_t *)(a1 + 80));
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  return result;
}

void sub_1CC0CEE60(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1F26068D8;
  sub_1CBF8FF88(a1 + 10);
  uint64_t v2 = (uint64_t *)a1[4];
  if (v2 != a1 + 6) {
    free(v2);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

uint64_t *sub_1CC0CEEC8(uint64_t *result)
{
  uint64_t v1 = result;
  int v2 = *((_DWORD *)result + 2);
  if (!v2 && !*((_DWORD *)result + 3)) {
    return result;
  }
  uint64_t v3 = *((unsigned int *)result + 4);
  if (v3 <= 4 * v2 || v3 < 0x41)
  {
    if (!v3)
    {
LABEL_15:
      v1[1] = 0;
      return result;
    }
    uint64_t v4 = 16 * v3;
    result = (uint64_t *)(*result + 8);
    while (1)
    {
      uint64_t v5 = *(result - 1);
      if (v5 == -8192) {
        goto LABEL_13;
      }
      if (v5 != -4096) {
        break;
      }
LABEL_14:
      result += 2;
      v4 -= 16;
      if (!v4) {
        goto LABEL_15;
      }
    }
    result = sub_1CB9313C0(result);
LABEL_13:
    *(result - 1) = -4096;
    goto LABEL_14;
  }

  return sub_1CC0CEF78(result);
}

uint64_t *sub_1CC0CEF78(uint64_t *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *((unsigned int *)result + 4);
  int v3 = *((_DWORD *)result + 2);
  if (v2)
  {
    uint64_t v4 = 16 * v2;
    result = (uint64_t *)(*result + 8);
    do
    {
      if ((*(result - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        result = sub_1CB9313C0(result);
      }
      result += 2;
      v4 -= 16;
    }
    while (v4);
  }
  if (v3)
  {
    int v5 = 1 << (33 - __clz(v3 - 1));
    if (v5 <= 64) {
      unsigned int v6 = 64;
    }
    else {
      unsigned int v6 = v5;
    }
    result = (uint64_t *)*v1;
    if (v6 == *((_DWORD *)v1 + 4))
    {
      v1[1] = 0;
      uint64_t v7 = 16 * v6;
      do
      {
        uint64_t *result = -4096;
        result += 2;
        v7 -= 16;
      }
      while (v7);
      return result;
    }
  }
  else
  {
    if (!*((_DWORD *)v1 + 4))
    {
      v1[1] = 0;
      return result;
    }
    unsigned int v6 = 0;
    result = (uint64_t *)*v1;
  }
  MEMORY[0x1D25D9CD0](result, 8);

  return (uint64_t *)sub_1CB837D60(v1, v6);
}

uint64_t llvm::ProfileSummaryInfo::refresh(uint64_t this)
{
  uint64_t v1 = (uint64_t *)(this + 8);
  if (*(void *)(this + 8)) {
    return this;
  }
  uint64_t v2 = (llvm::Module **)this;
  uint64_t ProfileSummary = llvm::Module::getProfileSummary(*(llvm::Module **)this, 1);
  if (!ProfileSummary) {
    goto LABEL_5;
  }
  uint64_t v4 = llvm::ProfileSummary::getFromMD(ProfileSummary);
  uint64_t v5 = *v1;
  *uint64_t v1 = v4;
  if (v5)
  {
    sub_1CC025ED8((uint64_t)v1, v5);
LABEL_5:
    uint64_t v4 = *v1;
  }
  if (v4) {
    goto LABEL_7;
  }
  uint64_t v6 = llvm::Module::getProfileSummary(*v2, 0);
  if (!v6) {
    goto LABEL_7;
  }
  this = llvm::ProfileSummary::getFromMD(v6);
  uint64_t v7 = *v1;
  *uint64_t v1 = this;
  if (v7)
  {
    sub_1CC025ED8((uint64_t)v1, v7);
LABEL_7:
    this = *v1;
  }
  if (this)
  {
    return llvm::ProfileSummaryInfo::computeThresholds((llvm::ProfileSummaryInfo *)v2);
  }
  return this;
}

BOOL llvm::ProfileSummaryInfo::isFunctionEntryHot(llvm::ProfileSummaryInfo *this, uint64_t ***a2)
{
  if (!a2) {
    return 0;
  }
  if (*((void *)this + 1))
  {
    llvm::Function::getEntryCount(a2, 0, (uint64_t)&v4);
    if (v5)
    {
      if (*((unsigned char *)this + 24)) {
        return *((void *)this + 2) <= v4;
      }
    }
  }
  return 0;
}

uint64_t llvm::ProfileSummaryInfo::isFunctionHotInCallGraph(llvm::ProfileSummaryInfo *this, uint64_t ***a2, llvm::BlockFrequencyInfoImplBase **a3)
{
  if (!a2) {
    return 0;
  }
  if (!*((void *)this + 1)) {
    return 0;
  }
  llvm::Function::getEntryCount(a2, 0, (uint64_t)&v23);
  if (!v24 || !*((unsigned char *)this + 24) || *((void *)this + 2) > v23)
  {
    uint64_t v6 = (_DWORD *)*((void *)this + 1);
    if (!v6 || *v6 != 2) {
      goto LABEL_30;
    }
    uint64_t v7 = (uint64_t ***)a2[10];
    if (v7 == a2 + 9)
    {
      unint64_t v8 = 0;
    }
    else
    {
      unint64_t v8 = 0;
      do
      {
        uint64_t v9 = v7 - 3;
        if (!v7) {
          uint64_t v9 = 0;
        }
        uint64_t v10 = (uint64_t **)(v9 + 5);
        for (uint64_t i = v9[6]; i != v10; uint64_t i = (uint64_t **)i[1])
        {
          if (i) {
            unsigned int v12 = i - 3;
          }
          else {
            unsigned int v12 = 0;
          }
          int v13 = *((unsigned __int8 *)v12 + 16);
          if (v13 == 84 || v13 == 33)
          {
            unint64_t ProfileCount = llvm::ProfileSummaryInfo::getProfileCount(this, (const llvm::BasicBlock **)v12, 0, 0);
            if (v15) {
              unint64_t v16 = ProfileCount;
            }
            else {
              unint64_t v16 = 0;
            }
            v8 += v16;
          }
        }
        uint64_t v7 = (uint64_t ***)v7[1];
      }
      while (v7 != a2 + 9);
    }
    if (!*((unsigned char *)this + 24) || *((void *)this + 2) > v8)
    {
LABEL_30:
      uint64_t v18 = (char *)(a2 + 9);
      BOOL v19 = a2[10];
      if (v19 != (uint64_t **)v18)
      {
        while (1)
        {
          int v20 = v19 ? (const llvm::BasicBlock *)(v19 - 3) : 0;
          Blockunint64_t ProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount(a3, v20, 0);
          if (v22)
          {
            if (*((unsigned char *)this + 24) && *((void *)this + 2) <= BlockProfileCount) {
              break;
            }
          }
          uint64_t result = 0;
          BOOL v19 = (uint64_t **)v19[1];
          if (v19 == (uint64_t **)v18) {
            return result;
          }
        }
        return 1;
      }
      return 0;
    }
  }
  return 1;
}

BOOL llvm::ProfileSummaryInfo::isHotBlock(llvm::ProfileSummaryInfo *this, const llvm::BasicBlock *a2, llvm::BlockFrequencyInfoImplBase **a3)
{
  Blockunint64_t ProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount(a3, a2, 0);
  return v5 && *((unsigned char *)this + 24) && *((void *)this + 2) <= BlockProfileCount;
}

uint64_t llvm::ProfileSummaryInfo::isFunctionColdInCallGraph(llvm::ProfileSummaryInfo *this, uint64_t ***a2, llvm::BlockFrequencyInfoImplBase **a3)
{
  if (!a2) {
    return 0;
  }
  if (*((void *)this + 1))
  {
    llvm::Function::getEntryCount(a2, 0, (uint64_t)&v23);
    if (!v24 || *((unsigned char *)this + 40) && *((void *)this + 4) >= v23)
    {
      uint64_t v6 = (_DWORD *)*((void *)this + 1);
      if (!v6 || *v6 != 2) {
        goto LABEL_32;
      }
      uint64_t v7 = (uint64_t ***)a2[10];
      if (v7 == a2 + 9)
      {
        unint64_t v8 = 0;
      }
      else
      {
        unint64_t v8 = 0;
        do
        {
          uint64_t v9 = v7 - 3;
          if (!v7) {
            uint64_t v9 = 0;
          }
          uint64_t v10 = (uint64_t **)(v9 + 5);
          for (uint64_t i = v9[6]; i != v10; uint64_t i = (uint64_t **)i[1])
          {
            if (i) {
              unsigned int v12 = i - 3;
            }
            else {
              unsigned int v12 = 0;
            }
            int v13 = *((unsigned __int8 *)v12 + 16);
            if (v13 == 84 || v13 == 33)
            {
              unint64_t ProfileCount = llvm::ProfileSummaryInfo::getProfileCount(this, (const llvm::BasicBlock **)v12, 0, 0);
              if (v15) {
                unint64_t v16 = ProfileCount;
              }
              else {
                unint64_t v16 = 0;
              }
              v8 += v16;
            }
          }
          uint64_t v7 = (uint64_t ***)v7[1];
        }
        while (v7 != a2 + 9);
      }
      if (*((unsigned char *)this + 40) && *((void *)this + 4) >= v8)
      {
LABEL_32:
        uint64_t v18 = (char *)(a2 + 9);
        BOOL v19 = a2[10];
        if (v19 == (uint64_t **)v18) {
          return 1;
        }
        while (1)
        {
          int v20 = v19 ? (const llvm::BasicBlock *)(v19 - 3) : 0;
          Blockunint64_t ProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount(a3, v20, 0);
          if (!v22 || !*((unsigned char *)this + 40) || *((void *)this + 4) < BlockProfileCount) {
            break;
          }
          BOOL v19 = (uint64_t **)v19[1];
          uint64_t result = 1;
          if (v19 == (uint64_t **)v18) {
            return result;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t llvm::ProfileSummaryInfo::isFunctionHotInCallGraphNthPercentile(llvm::ProfileSummaryInfo *this, int a2, uint64_t ***a3, llvm::BlockFrequencyInfoImplBase **a4)
{
  if (!a3) {
    return 0;
  }
  if (*((void *)this + 1))
  {
    llvm::Function::getEntryCount(a3, 0, (uint64_t)&v33);
    if (v34)
    {
      unint64_t v18 = v33;
      unint64_t v19 = llvm::ProfileSummaryInfo::computeThreshold(this, a2);
      if (v20)
      {
        if (v19 <= v18) {
          return 1;
        }
      }
    }
    unint64_t v8 = (_DWORD *)*((void *)this + 1);
    if (v8 && *v8 == 2)
    {
      unsigned int v21 = (uint64_t ***)a3[10];
      if (v21 == a3 + 9)
      {
        unint64_t v22 = 0;
      }
      else
      {
        unint64_t v22 = 0;
        do
        {
          unint64_t v23 = v21 - 3;
          if (!v21) {
            unint64_t v23 = 0;
          }
          char v24 = (uint64_t **)(v23 + 5);
          for (uint64_t i = v23[6]; i != v24; uint64_t i = (uint64_t **)i[1])
          {
            if (i) {
              BOOL v26 = i - 3;
            }
            else {
              BOOL v26 = 0;
            }
            int v27 = *((unsigned __int8 *)v26 + 16);
            if (v27 == 84 || v27 == 33)
            {
              unint64_t ProfileCount = llvm::ProfileSummaryInfo::getProfileCount(this, (const llvm::BasicBlock **)v26, 0, 0);
              if (v29) {
                unint64_t v30 = ProfileCount;
              }
              else {
                unint64_t v30 = 0;
              }
              v22 += v30;
            }
          }
          unsigned int v21 = (uint64_t ***)v21[1];
        }
        while (v21 != a3 + 9);
      }
      unint64_t v31 = llvm::ProfileSummaryInfo::computeThreshold(this, a2);
      if (v32)
      {
        if (v31 <= v22) {
          return 1;
        }
      }
    }
    uint64_t v9 = a3 + 9;
    uint64_t v10 = (uint64_t ***)a3[10];
    if (v10 != a3 + 9)
    {
      while (1)
      {
        int v11 = v10 ? (const llvm::BasicBlock *)(v10 - 3) : 0;
        Blockunint64_t ProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount(a4, v11, 0);
        if (v13)
        {
          unint64_t v15 = BlockProfileCount;
          unint64_t v16 = llvm::ProfileSummaryInfo::computeThreshold(this, a2);
          if (v17)
          {
            if (v16 <= v15) {
              break;
            }
          }
        }
        uint64_t result = 0;
        uint64_t v10 = (uint64_t ***)v10[1];
        if (v10 == v9) {
          return result;
        }
      }
      return 1;
    }
  }
  return 0;
}

uint64_t llvm::ProfileSummaryInfo::isFunctionColdInCallGraphNthPercentile(llvm::ProfileSummaryInfo *this, int a2, uint64_t ***a3, llvm::BlockFrequencyInfoImplBase **a4)
{
  if (!a3) {
    return 0;
  }
  if (!*((void *)this + 1)) {
    return 0;
  }
  llvm::Function::getEntryCount(a3, 0, (uint64_t)&v33);
  if (v34)
  {
    unint64_t v18 = v33;
    unint64_t v19 = llvm::ProfileSummaryInfo::computeThreshold(this, a2);
    if (!v20 || v19 < v18) {
      return 0;
    }
  }
  unint64_t v8 = (_DWORD *)*((void *)this + 1);
  if (!v8 || *v8 != 2) {
    goto LABEL_6;
  }
  unsigned int v21 = (uint64_t ***)a3[10];
  if (v21 == a3 + 9)
  {
    unint64_t v22 = 0;
  }
  else
  {
    unint64_t v22 = 0;
    do
    {
      unint64_t v23 = v21 - 3;
      if (!v21) {
        unint64_t v23 = 0;
      }
      char v24 = (uint64_t **)(v23 + 5);
      for (uint64_t i = v23[6]; i != v24; uint64_t i = (uint64_t **)i[1])
      {
        if (i) {
          BOOL v26 = i - 3;
        }
        else {
          BOOL v26 = 0;
        }
        int v27 = *((unsigned __int8 *)v26 + 16);
        if (v27 == 84 || v27 == 33)
        {
          unint64_t ProfileCount = llvm::ProfileSummaryInfo::getProfileCount(this, (const llvm::BasicBlock **)v26, 0, 0);
          if (v29) {
            unint64_t v30 = ProfileCount;
          }
          else {
            unint64_t v30 = 0;
          }
          v22 += v30;
        }
      }
      unsigned int v21 = (uint64_t ***)v21[1];
    }
    while (v21 != a3 + 9);
  }
  unint64_t v31 = llvm::ProfileSummaryInfo::computeThreshold(this, a2);
  uint64_t result = 0;
  if (v32)
  {
    if (v31 >= v22)
    {
LABEL_6:
      uint64_t v9 = a3 + 9;
      uint64_t v10 = (uint64_t ***)a3[10];
      if (v10 == a3 + 9) {
        return 1;
      }
      while (1)
      {
        int v11 = v10 ? (const llvm::BasicBlock *)(v10 - 3) : 0;
        Blockunint64_t ProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount(a4, v11, 0);
        if (!v13) {
          break;
        }
        unint64_t v14 = BlockProfileCount;
        unint64_t v15 = llvm::ProfileSummaryInfo::computeThreshold(this, a2);
        uint64_t result = 0;
        if (v17)
        {
          if (v15 >= v14)
          {
            uint64_t v10 = (uint64_t ***)v10[1];
            uint64_t result = 1;
            if (v10 != v9) {
              continue;
            }
          }
        }
        return result;
      }
      return 0;
    }
  }
  return result;
}

BOOL llvm::ProfileSummaryInfo::isFunctionEntryCold(llvm::ProfileSummaryInfo *this, const llvm::Function *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = *((void *)a2 + 14);
  if (v2 && (*(unsigned char *)(v2 + 12) & 0x20) != 0) {
    return 1;
  }
  if (*((void *)this + 1))
  {
    llvm::Function::getEntryCount((uint64_t ***)a2, 0, (uint64_t)&v5);
    if (v6)
    {
      if (*((unsigned char *)this + 40)) {
        return *((void *)this + 4) >= v5;
      }
    }
  }
  return 0;
}

BOOL llvm::ProfileSummaryInfo::hasHugeWorkingSetSize(llvm::ProfileSummaryInfo *this)
{
  return *((unsigned char *)this + 49) && *((unsigned char *)this + 48) != 0;
}

uint64_t llvm::ProfileSummaryInfo::getOrCompHotCountThreshold(llvm::ProfileSummaryInfo *this)
{
  if (*((unsigned char *)this + 24)) {
    return *((void *)this + 2);
  }
  else {
    return -1;
  }
}

void sub_1CC0CF9B4()
{
}

void llvm::ProfileSummaryInfoWrapperPass::doInitialization(llvm::ProfileSummaryInfoWrapperPass *this, llvm::Module *a2)
{
}

uint64_t llvm::ProfileSummaryInfoWrapperPass::doFinalization(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v1)
  {
    MEMORY[0x1D25D9CD0](*(void *)(v1 + 56), 8);
    uint64_t v2 = *(void *)(v1 + 8);
    *(void *)(v1 + 8) = 0;
    if (v2) {
      sub_1CC025ED8(v1 + 8, v2);
    }
    MEMORY[0x1D25D9CE0](v1, 0x1060C40BAADE331);
  }
  return 0;
}

uint64_t llvm::ProfileSummaryAnalysis::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(_DWORD *)(a2 + 72) = 0;
  return llvm::ProfileSummaryInfo::refresh(a2);
}

uint64_t sub_1CC0CFB78(uint64_t a1)
{
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 56), 8);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    sub_1CC025ED8(a1 + 8, v2);
  }
  return a1;
}

uint64_t sub_1CC0CFBBC()
{
  LODWORD(v2) = 1;
  LOBYTE(v4) = 0;
  int v3 = (uint64_t *)&v4;
  v1.n128_u64[0] = (unint64_t)"Specify the current profile is used as a partial profile.";
  v1.n128_u64[1] = 57;
  sub_1CD4B6FB0(&v2, (char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBD048B8, &dword_1CB82C000);
  LODWORD(v2) = 1;
  LOBYTE(v4) = 1;
  int v3 = (uint64_t *)&v4;
  v1.n128_u64[0] = (unint64_t)"If true, scale the working set size of the partial sample profile by the partial pr"
                                     "ofile ratio to reflect the size of the program being compiled.";
  v1.n128_u64[1] = 145;
  sub_1CC025F34((llvm::cl::Option *)&ScalePartialSampleProfileWorkingSetSize, "scale-partial-sample-profile-working-set-size", &v2, (unsigned char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &ScalePartialSampleProfileWorkingSetSize, &dword_1CB82C000);
  int v4 = 1;
  uint64_t v2 = 0x3F80624DD2F1A9FCLL;
  int v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"The scale factor used to scale the working set size of the partial sample profile a"
                                     "long with the partial profile ratio. This includes the factor of the profile counte"
                                     "r per block and the factor to scale the working set size to use the same shared thresholds as PGO.";
  v1.n128_u64[1] = 264;
  sub_1CD4B7128(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CBF801A0, &qword_1EBCC6D58, &dword_1CB82C000);
}

void llvm::detail::PtrUseVisitorBase::enqueueUsers(llvm::detail::PtrUseVisitorBase *this, llvm::Instruction *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (v2)
  {
    int v4 = (llvm::detail::PtrUseVisitorBase *)((char *)this + 232);
    unint64_t v5 = (unint64_t *)((char *)this + 24);
    while (1)
    {
      uint64_t v6 = *((void *)this + 30);
      uint64_t v7 = *((unsigned int *)this + 63);
      if (v6 == *((void *)this + 29))
      {
        if (v7)
        {
          unint64_t v8 = 0;
          uint64_t v9 = 8 * v7;
          uint64_t v10 = (void *)*((void *)this + 30);
          while (*v10 != v2)
          {
            if (*v10 == -2) {
              unint64_t v8 = v10;
            }
            ++v10;
            v9 -= 8;
            if (!v9)
            {
              if (!v8) {
                goto LABEL_11;
              }
              *unint64_t v8 = v2;
              --*((_DWORD *)this + 64);
              goto LABEL_13;
            }
          }
          goto LABEL_17;
        }
LABEL_11:
        unsigned int v11 = *((_DWORD *)this + 62);
        if (v7 < v11)
        {
          *((_DWORD *)this + 63) = v7 + 1;
          *(void *)(v6 + 8 * v7) = v2;
          goto LABEL_13;
        }
      }
      else
      {
        unsigned int v11 = *((_DWORD *)this + 62);
      }
      if (3 * v11 <= 4 * ((int)v7 - *((_DWORD *)this + 64))) {
        break;
      }
      if (v11 - v7 < v11 >> 3) {
        goto LABEL_50;
      }
LABEL_22:
      unsigned int v16 = v11 - 1;
      unsigned int v17 = (v11 - 1) & ((v2 >> 4) ^ (v2 >> 9));
      unint64_t v18 = (void *)(v6 + 8 * v17);
      uint64_t v19 = *v18;
      if (*v18 != -1)
      {
        char v20 = 0;
        int v21 = 1;
        while (v19 != v2)
        {
          if (v20) {
            BOOL v22 = 0;
          }
          else {
            BOOL v22 = v19 == -2;
          }
          if (v22) {
            char v20 = v18;
          }
          unsigned int v23 = v17 + v21++;
          unsigned int v17 = v23 & v16;
          unint64_t v18 = (void *)(v6 + 8 * (v23 & v16));
          uint64_t v19 = *v18;
          if (*v18 == -1) {
            goto LABEL_34;
          }
        }
        goto LABEL_17;
      }
      char v20 = 0;
LABEL_34:
      if (v20) {
        char v24 = v20;
      }
      else {
        char v24 = v18;
      }
      if (*v24 == v2) {
        goto LABEL_17;
      }
      if (*v24 == -2) {
        --*((_DWORD *)this + 64);
      }
      else {
        ++*((_DWORD *)this + 63);
      }
      *char v24 = v2;
LABEL_13:
      unint64_t v28 = v2 & 0xFFFFFFFFFFFFFFFBLL | (4 * *((unsigned __int8 *)this + 336));
      unsigned int v30 = *((_DWORD *)this + 88);
      if (v30 > 0x40) {
        operator new[]();
      }
      uint64_t v29 = *((void *)this + 43);
      uint64_t v12 = *((unsigned int *)this + 8);
      unint64_t v13 = *((void *)this + 3);
      if (v12 < *((_DWORD *)this + 9)) {
        goto LABEL_15;
      }
      unint64_t v25 = v12 + 1;
      BOOL v26 = v13 + 24 * v12 > (unint64_t)&v28;
      if (v13 > (unint64_t)&v28 || !v26)
      {
        sub_1CC0D036C((uint64_t)v5, v25);
        unint64_t v13 = *v5;
LABEL_15:
        unint64_t v14 = &v28;
        goto LABEL_16;
      }
      int v27 = (char *)&v28 - v13;
      sub_1CC0D036C((uint64_t)v5, v25);
      unint64_t v13 = *v5;
      unint64_t v14 = (unint64_t *)&v27[*v5];
LABEL_16:
      uint64_t v15 = v13 + 24 * *((unsigned int *)this + 8);
      *(void *)uint64_t v15 = *v14;
      *(_DWORD *)(v15 + 16) = *((_DWORD *)v14 + 4);
      *(void *)(v15 + 8) = v14[1];
      *((_DWORD *)v14 + 4) = 0;
      ++*((_DWORD *)this + 8);
      if (v30 >= 0x41)
      {
        if (v29) {
          MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
        }
      }
LABEL_17:
      uint64_t v2 = *(void *)(v2 + 8);
      if (!v2) {
        return;
      }
    }
    if (v11 >= 0x40) {
      v11 *= 2;
    }
    else {
      unsigned int v11 = 128;
    }
LABEL_50:
    llvm::SmallPtrSetImplBase::Grow(v4, v11);
    unsigned int v11 = *((_DWORD *)this + 62);
    uint64_t v6 = *((void *)this + 30);
    goto LABEL_22;
  }
}

uint64_t llvm::detail::PtrUseVisitorBase::adjustOffsetForGEP(llvm::detail::PtrUseVisitorBase *this, llvm::GetElementPtrInst *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v45[6] = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 336)) {
    return 0;
  }
  uint64_t v9 = *(void *)this;
  unsigned int v10 = *(_DWORD *)(*(void *)a2 + 8);
  if ((v10 & 0xFE) == 0x12) {
    unsigned int v10 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  if (v10 < 0x100) {
    goto LABEL_13;
  }
  unsigned int v11 = v10 >> 8;
  uint64_t v12 = *(unsigned int *)(v9 + 240);
  uint64_t v13 = *(void *)(v9 + 232);
  if (v12)
  {
    uint64_t v13 = *(void *)(v9 + 232);
    unint64_t v14 = *(unsigned int *)(v9 + 240);
    do
    {
      unint64_t v15 = v14 >> 1;
      uint64_t v16 = v13 + 16 * (v14 >> 1);
      unsigned int v17 = *(_DWORD *)(v16 + 8);
      uint64_t v18 = v16 + 16;
      v14 += ~(v14 >> 1);
      if (v17 < v11) {
        uint64_t v13 = v18;
      }
      else {
        unint64_t v14 = v15;
      }
    }
    while (v14);
  }
  if (v13 == *(void *)(v9 + 232) + 16 * v12 || *(_DWORD *)(v13 + 8) != v11) {
LABEL_13:
  }
    uint64_t v13 = *(void *)(v9 + 232);
  unsigned int v42 = *(_DWORD *)(v13 + 12);
  if (v42 > 0x40) {
    operator new[]();
  }
  uint64_t v41 = 0;
  int v19 = *((_DWORD *)a2 + 5);
  if ((v19 & 0x40000000) != 0)
  {
    int v21 = (char *)*((void *)a2 - 1);
    uint64_t v20 = v19 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v20 = v19 & 0x7FFFFFF;
    int v21 = (char *)a2 - 32 * v20;
  }
  uint64_t v43 = v45;
  uint64_t v44 = 0x600000000;
  unint64_t v22 = 32 * v20 - 32;
  if (v22 >= 0xC1) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v23 = (llvm::Constant **)v45;
  if (v20 != 1)
  {
    char v24 = (uint64_t *)(v21 + 32);
    unint64_t v25 = v45;
    uint64_t v26 = 32 * v20 - 32;
    do
    {
      uint64_t v27 = *v24;
      v24 += 4;
      *v25++ = v27;
      v26 -= 32;
    }
    while (v26);
    unsigned int v23 = (llvm::Constant **)v43;
  }
  LODWORD(v44) = v22 >> 5;
  if (*((unsigned char *)a2 + 16) == 62) {
    unint64_t v28 = (uint64_t *)((char *)a2 + 64);
  }
  else {
    unint64_t v28 = (uint64_t *)((char *)a2 + 24);
  }
  uint64_t v29 = llvm::GEPOperator::accumulateConstantOffset(*v28, v23, (v22 >> 5), (llvm::DataLayout *)v9, (llvm::APInt *)&v41, 0, a7);
  if (v43 != v45) {
    free(v43);
  }
  if (v29)
  {
    llvm::APInt::sextOrTrunc((uint64_t)&v41, *((_DWORD *)this + 88), (uint64_t)&v43);
    uint64_t v30 = *((unsigned int *)this + 88);
    if (v30 >= 0x41)
    {
      uint64_t v33 = 0;
      char v34 = (unint64_t *)*((void *)this + 43);
      uint64_t v35 = (uint64_t *)v43;
      unint64_t v36 = (unint64_t)(v30 + 63) >> 6;
      unint64_t v37 = v36;
      do
      {
        uint64_t v38 = *v35++;
        unint64_t v39 = v38 + *v34;
        BOOL v40 = v39 + 1 <= *v34;
        if (v33)
        {
          ++v39;
          uint64_t v33 = v40;
        }
        else
        {
          uint64_t v33 = v39 < *v34;
        }
        *v34++ = v39;
        --v37;
      }
      while (v37);
      *(void *)(*((void *)this + 43) + 8 * (v36 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v30;
    }
    else
    {
      if (v30) {
        unint64_t v31 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v30;
      }
      else {
        unint64_t v31 = 0;
      }
      *((void *)this + 43) = v31 & ((unint64_t)v43 + *((void *)this + 43));
    }
    if (v44 >= 0x41 && v43) {
      MEMORY[0x1D25D9CB0](v43, 0x1000C8000313F17);
    }
  }
  if (v42 >= 0x41 && v41) {
    MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
  }
  return v29;
}

void sub_1CC0D036C(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = malloc_type_malloc(24 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  unint64_t v8 = *(char **)a1;
  int v9 = *(_DWORD *)(a1 + 8);
  if (v9)
  {
    unsigned int v10 = &v8[24 * v9];
    unsigned int v11 = v7;
    do
    {
      *(void *)unsigned int v11 = *(void *)v8;
      v11[4] = *((_DWORD *)v8 + 4);
      *((void *)v11 + 1) = *((void *)v8 + 1);
      *((_DWORD *)v8 + 4) = 0;
      v8 += 24;
      v11 += 6;
    }
    while (v8 != v10);
    unint64_t v8 = *(char **)a1;
    uint64_t v12 = *(unsigned int *)(a1 + 8);
    if (v12)
    {
      uint64_t v13 = 24 * v12;
      do
      {
        if (*(_DWORD *)&v8[v13 - 8] >= 0x41u)
        {
          uint64_t v14 = *(void *)&v8[v13 - 16];
          if (v14)
          {
            uint64_t v15 = v13;
            uint64_t v16 = v8;
            MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
            uint64_t v13 = v15;
            unint64_t v8 = v16;
          }
        }
        v13 -= 24;
      }
      while (v13);
      unint64_t v8 = *(char **)a1;
    }
  }
  if (v8 != (char *)(a1 + 16)) {
    free(v8);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

void llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::verifyBBInRegion()
{
}

{
  while (1)
    ;
}

unint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getEntry(void *a1)
{
  return *a1 & 0xFFFFFFFFFFFFFFF8;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getExit(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::begin(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

{
  return *(void *)(a1 + 40);
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::end(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

{
  return *(void *)(a1 + 48);
}

uint64_t *llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::RegionBase(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *result = a2 | 4;
  result[1] = a6;
  result[2] = a4;
  result[3] = a5;
  result[4] = a3;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[10] = 0;
  result[9] = 0;
  result[8] = (uint64_t)(result + 9);
  return result;
}

{
  uint64_t *result = a2 | 4;
  result[1] = a6;
  result[2] = a4;
  result[3] = a5;
  result[4] = a3;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[10] = 0;
  result[9] = 0;
  result[8] = (uint64_t)(result + 9);
  return result;
}

unint64_t *llvm::RegionNodeBase<llvm::RegionTraits<llvm::Function>>::RegionNodeBase(unint64_t *result, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = 4;
  if (!a4) {
    uint64_t v4 = 0;
  }
  uint64_t *result = a3 & 0xFFFFFFFFFFFFFFFBLL | v4;
  result[1] = a2;
  return result;
}

{
  uint64_t v4;

  uint64_t v4 = 4;
  if (!a4) {
    uint64_t v4 = 0;
  }
  uint64_t *result = a3 & 0xFFFFFFFFFFFFFFFBLL | v4;
  result[1] = a2;
  return result;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::~RegionBase(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 72);
  sub_1CD4B9F64(*(void **)(a1 + 72));
  *(void *)(a1 + 64) = v2;
  *(void *)(a1 + 80) = 0;
  void *v2 = 0;
  uint64_t v4 = (void **)(a1 + 40);
  sub_1CC0D3220(&v4);
  return a1;
}

{
  void *v2;
  void **v4;

  uint64_t v2 = (void *)(a1 + 72);
  sub_1CD4B9F64(*(void **)(a1 + 72));
  *(void *)(a1 + 64) = v2;
  *(void *)(a1 + 80) = 0;
  void *v2 = 0;
  uint64_t v4 = (void **)(a1 + 40);
  sub_1CC0D3220(&v4);
  return a1;
}

unint64_t llvm::RegionNodeBase<llvm::RegionTraits<llvm::Function>>::getEntry(void *a1)
{
  return *a1 & 0xFFFFFFFFFFFFFFF8;
}

uint64_t *llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::replaceEntry(uint64_t *result, uint64_t a2)
{
  uint64_t *result = *result & 7 | a2;
  return result;
}

void llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::replaceExitRecursive(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (char *)operator new(8uLL);
  *(void *)uint64_t v4 = a1;
  uint64_t v5 = v4 + 8;
  uint64_t v6 = v4 + 8;
  do
  {
    uint64_t v7 = (void *)*((void *)v6 - 1);
    unint64_t v8 = v6 - 8;
    v7[4] = a2;
    int v9 = (uint64_t *)v7[5];
    unsigned int v10 = (uint64_t *)v7[6];
    if (v9 != v10)
    {
      while (1)
      {
        uint64_t v11 = *v9;
        if (*(void *)(*v9 + 32) == v3)
        {
          if (v8 >= v5)
          {
            uint64_t v12 = (v8 - v4) >> 3;
            unint64_t v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 61) {
              abort();
            }
            if ((v5 - v4) >> 2 > v13) {
              unint64_t v13 = (v5 - v4) >> 2;
            }
            if ((unint64_t)(v5 - v4) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v14 = v13;
            }
            if (v14)
            {
              if (v14 >> 61) {
                sub_1CB833614();
              }
              uint64_t v15 = (char *)operator new(8 * v14);
            }
            else
            {
              uint64_t v15 = 0;
            }
            uint64_t v16 = &v15[8 * v12];
            *(void *)uint64_t v16 = v11;
            uint64_t v6 = v16 + 8;
            if (v8 != v4)
            {
              do
              {
                uint64_t v17 = *((void *)v8 - 1);
                v8 -= 8;
                *((void *)v16 - 1) = v17;
                v16 -= 8;
              }
              while (v8 != v4);
              unint64_t v8 = v4;
            }
            uint64_t v4 = v16;
            uint64_t v5 = &v15[8 * v14];
            if (v8) {
              operator delete(v8);
            }
            goto LABEL_7;
          }
          *(void *)unint64_t v8 = v11;
          v8 += 8;
        }
        uint64_t v6 = v8;
LABEL_7:
        ++v9;
        unint64_t v8 = v6;
        if (v9 == v10) {
          goto LABEL_25;
        }
      }
    }
    v6 -= 8;
LABEL_25:
    ;
  }
  while (v4 != v6);
  if (v4)
  {
    operator delete(v4);
  }
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getParent(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t llvm::RegionNodeBase<llvm::RegionTraits<llvm::Function>>::getParent(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

BOOL llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::isTopLevelRegion(uint64_t a1)
{
  return *(void *)(a1 + 32) == 0;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getExpandedRegion(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 40);
  if (v3 == v2 + 40)
  {
    uint64_t v4 = 0;
  }
  else
  {
    if (v3) {
      uint64_t v4 = v3 - 24;
    }
    else {
      uint64_t v4 = 0;
    }
    if (*(unsigned __int8 *)(v4 + 16) - 29 >= 0xB) {
      uint64_t v4 = 0;
    }
  }
  if (*(unsigned char *)(v4 + 16) != 30)
  {
    switch(*(unsigned char *)(v4 + 16))
    {
      case 0x1E:
LABEL_53:
        __break(1u);
        goto LABEL_54;
      case 0x1F:
        int v20 = (*(_DWORD *)(v4 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_46;
      case 0x20:
      case 0x26:
LABEL_54:
        int v20 = (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_46;
      case 0x21:
      case 0x25:
        break;
      case 0x24:
        int v20 = *(_WORD *)(v4 + 18) & 1;
        goto LABEL_46;
      case 0x27:
        int v20 = *(_DWORD *)(v4 + 80) + 1;
LABEL_46:
        if (v20) {
          break;
        }
        return 0;
      default:
        return 0;
    }
  }
  uint64_t v5 = (uint64_t *)(*(void *)(a1 + 16) + 40);
  uint64_t v23 = 0;
  uint64_t v24 = v2;
  sub_1CD3C8538(v5, &v24, &v23);
  uint64_t v6 = *(void **)(v23 + 8);
  unint64_t v7 = *v6 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8 == v7)
  {
    do
      uint64_t v6 = (void *)v6[1];
    while (v6 && v7 == (*v6 & 0xFFFFFFFFFFFFFFF8));
    for (uint64_t i = *(void *)(v7 + 8); i; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v16 = *(void *)(i + 24);
      unsigned int v17 = *(unsigned __int8 *)(v16 + 16);
      if (v16) {
        BOOL v18 = v17 >= 0x1C;
      }
      else {
        BOOL v18 = 0;
      }
      if (v18 && v17 - 29 <= 0xA) {
        llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains();
      }
    }
    operator new();
  }
  for (uint64_t j = *(void *)(v8 + 8); j; uint64_t j = *(void *)(j + 8))
  {
    uint64_t v10 = *(void *)(j + 24);
    unsigned int v11 = *(unsigned __int8 *)(v10 + 16);
    if (v10) {
      BOOL v12 = v11 >= 0x1C;
    }
    else {
      BOOL v12 = 0;
    }
    if (v12 && v11 - 29 <= 0xA) {
      llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains();
    }
  }
  uint64_t v14 = *(void *)(v8 + 40);
  if (v14 == v8 + 40)
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = v14 - 24;
    if (!v14) {
      uint64_t v2 = 0;
    }
    if (*(unsigned __int8 *)(v2 + 16) - 29 >= 0xB) {
      uint64_t v2 = 0;
    }
  }
  uint64_t v4 = *(unsigned __int8 *)(v2 + 16);
  if (v4 != 30)
  {
    switch(*(unsigned char *)(v2 + 16))
    {
      case 0x1E:
        goto LABEL_53;
      case 0x1F:
        int v21 = (*(_DWORD *)(v2 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_50;
      case 0x20:
      case 0x26:
        int v21 = (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_50;
      case 0x24:
        int v21 = *(_WORD *)(v2 + 18) & 1;
        goto LABEL_50;
      case 0x25:
        goto LABEL_51;
      case 0x27:
        int v21 = *(_DWORD *)(v2 + 80) + 1;
LABEL_50:
        if (v21 == 1) {
          goto LABEL_51;
        }
        return 0;
      default:
        return 0;
    }
  }
  if ((*(_DWORD *)(v2 + 20) & 0x7FFFFFF) != 3) {
LABEL_51:
  }
    operator new();
  return 0;
}

uint64_t *llvm::Region::Region(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *result = a2 | 4;
  result[1] = a6;
  result[2] = a4;
  result[3] = a5;
  result[4] = a3;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[10] = 0;
  result[9] = 0;
  result[8] = (uint64_t)(result + 9);
  return result;
}

{
  uint64_t *result = a2 | 4;
  result[1] = a6;
  result[2] = a4;
  result[3] = a5;
  result[4] = a3;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[10] = 0;
  result[9] = 0;
  result[8] = (uint64_t)(result + 9);
  return result;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getEnteringBlock(void *a1)
{
  uint64_t v1 = *(void *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 8);
  if (!v1) {
    return 0;
  }
  while (1)
  {
    uint64_t v2 = *(void *)(v1 + 24);
    unsigned int v3 = *(unsigned __int8 *)(v2 + 16);
    BOOL v4 = v2 && v3 >= 0x1C;
    if (v4 && v3 - 29 < 0xB) {
      break;
    }
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      return 0;
    }
  }
LABEL_12:
  uint64_t v7 = *(void *)(v2 + 40);
  uint64_t v8 = a1[3];
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v10 = *(unsigned int *)(v8 + 40);
  if (v10)
  {
    LODWORD(v11) = ((v7 >> 4) ^ (v7 >> 9)) & (v10 - 1);
    BOOL v12 = (uint64_t *)(v9 + 16 * v11);
    uint64_t v13 = *v12;
    if (v7 == *v12) {
      goto LABEL_19;
    }
    int v14 = 1;
    while (v13 != -4096)
    {
      int v15 = v11 + v14++;
      uint64_t v11 = v15 & (v10 - 1);
      uint64_t v13 = *(void *)(v9 + 16 * v11);
      if (v7 == v13)
      {
        BOOL v12 = (uint64_t *)(v9 + 16 * v11);
        goto LABEL_19;
      }
    }
  }
  BOOL v12 = (uint64_t *)(v9 + 16 * v10);
LABEL_19:
  if (v12 != (uint64_t *)(v9 + 16 * v10) && v12[1]) {
    llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains();
  }
  while (1)
  {
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      return 0;
    }
    uint64_t v2 = *(void *)(v1 + 24);
    unsigned int v16 = *(unsigned __int8 *)(v2 + 16);
    if (v2) {
      BOOL v17 = v16 >= 0x1C;
    }
    else {
      BOOL v17 = 0;
    }
    if (v17 && v16 - 29 < 0xB) {
      goto LABEL_12;
    }
  }
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getExitingBlock(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    for (uint64_t i = *(void *)(v1 + 8); i; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v3 = *(void *)(i + 24);
      unsigned int v4 = *(unsigned __int8 *)(v3 + 16);
      if (v3) {
        BOOL v5 = v4 >= 0x1C;
      }
      else {
        BOOL v5 = 0;
      }
      if (v5 && v4 - 29 <= 0xA) {
        llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains();
      }
    }
  }
  return 0;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getExitingBlocks(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    for (uint64_t i = *(void *)(v1 + 8); i; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v3 = *(void *)(i + 24);
      unsigned int v4 = *(unsigned __int8 *)(v3 + 16);
      if (v3) {
        BOOL v5 = v4 >= 0x1C;
      }
      else {
        BOOL v5 = 0;
      }
      if (v5 && v4 - 29 < 0xB) {
        llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains();
      }
    }
  }
  return 1;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getRegionInfo(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::print(uint64_t a1, llvm::raw_ostream *a2, int a3, unsigned int a4)
{
  llvm::raw_ostream::indent(a2, 2 * a4);
  if (a3)
  {
    uint64_t v7 = (unsigned char *)*((void *)a2 + 4);
    if ((unint64_t)v7 >= *((void *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 91);
    }
    else
    {
      *((void *)a2 + 4) = v7 + 1;
      *uint64_t v7 = 91;
    }
    sub_1CD098D14(a2, a4, 0, 0, 0);
    uint64_t v8 = (_WORD *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v8 > 1uLL)
    {
      *uint64_t v8 = 8285;
      *((void *)a2 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a2, "] ", 2uLL);
    }
  }
  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getNameStr();
}

void llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::dump(llvm *a1)
{
  int v2 = -1;
  llvm::dbgs(a1);
  uint64_t v3 = a1;
  do
  {
    uint64_t v3 = (llvm *)*((void *)v3 + 1);
    ++v2;
  }
  while (v3);

  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::print();
}

void llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains()
{
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

BOOL llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (a2) {
    llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains();
  }
  return *(void *)(a1 + 32) == 0;
}

void llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::outermostLoopInRegion()
{
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::outermostLoopInRegion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 16);
  if (v3)
  {
    int v4 = v3 - 1;
    unsigned int v5 = (v3 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v6 = *(void *)(*(void *)a2 + 16 * v5);
    if (v6 == a3) {
LABEL_6:
    }
      llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains();
    int v7 = 1;
    while (v6 != -4096)
    {
      unsigned int v8 = v5 + v7++;
      unsigned int v5 = v8 & v4;
      uint64_t v6 = *(void *)(*(void *)a2 + 16 * v5);
      if (v6 == a3) {
        goto LABEL_6;
      }
    }
  }
  return 0;
}

uint64_t *llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::addSubRegion(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a2 + 8) = a1;
  unsigned int v5 = (uint64_t **)(a1 + 40);
  uint64_t v9 = a2;
  uint64_t v6 = *(uint64_t **)(a1 + 48);
  if ((unint64_t)v6 >= *(void *)(a1 + 56))
  {
    int v7 = sub_1CC0D3528(v5, &v9);
  }
  else
  {
    uint64_t v9 = 0;
    *uint64_t v6 = a2;
    int v7 = v6 + 1;
  }
  *(void *)(a1 + 48) = v7;
  uint64_t result = sub_1CC0D349C(&v9, 0);
  if (a3) {
    llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::elements();
  }
  return result;
}

uint64_t llvm::RegionNodeBase<llvm::RegionTraits<llvm::Function>>::isSubRegion(unsigned __int8 *a1)
{
  return (*a1 >> 2) & 1;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::removeSubRegion(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = 0;
  unsigned int v5 = *(uint64_t **)(a1 + 40);
  int v4 = *(uint64_t **)(a1 + 48);
  if (v5 != v4)
  {
    while (*v5 != a2)
    {
      if (++v5 == v4)
      {
        unsigned int v5 = *(uint64_t **)(a1 + 48);
        break;
      }
    }
  }
  uint64_t v6 = v5 + 1;
  if (v5 + 1 != v4)
  {
    do
    {
      int v7 = v6 - 1;
      uint64_t v8 = *v6;
      *v6++ = 0;
      sub_1CC0D349C(v7, v8);
      ++v5;
    }
    while (v6 != v4);
    int v4 = *(uint64_t **)(a1 + 48);
  }
  while (v4 != v5)
    sub_1CC0D349C(--v4, 0);
  *(void *)(a1 + 48) = v5;
  return a2;
}

uint64_t *llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::transferChildrenTo(uint64_t *result, uint64_t a2)
{
  int v2 = result;
  int v3 = (uint64_t *)result[5];
  int v4 = (uint64_t *)result[6];
  if (v3 != v4)
  {
    uint64_t v6 = (uint64_t **)(a2 + 40);
    uint64_t result = *(uint64_t **)(a2 + 48);
    do
    {
      *(void *)(*v3 + 8) = a2;
      if ((unint64_t)result >= *(void *)(a2 + 56))
      {
        uint64_t result = sub_1CC0D3528(v6, v3);
      }
      else
      {
        uint64_t v7 = *v3;
        *int v3 = 0;
        *result++ = v7;
      }
      *(void *)(a2 + 48) = result;
      ++v3;
    }
    while (v3 != v4);
    uint64_t v8 = (uint64_t *)v2[5];
    int v3 = (uint64_t *)v2[6];
    if (v3 != v8)
    {
      do
        uint64_t result = sub_1CC0D349C(--v3, 0);
      while (v3 != v8);
      int v3 = v8;
    }
  }
  v2[6] = (uint64_t)v3;
  return result;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::block_begin@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1CD4BA79C(a2, *a1 & 0xFFFFFFFFFFFFFFF8, a1[4]);
}

{
  return sub_1CD4BA8F0(a2, *a1 & 0xFFFFFFFFFFFFFFF8, a1[4]);
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::block_end@<X0>(uint64_t a1@<X8>)
{
  return sub_1CD4BA860(a1);
}

{
  return sub_1CD4BA860(a1);
}

void llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::element_begin()
{
}

{
  sub_1CD4B80EC();
}

void llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::element_end()
{
}

{
  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getSubRegionNode();
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::RegionInfoBase(uint64_t result)
{
  *(void *)uint64_t result = &unk_1F2606A20;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

_DWORD *llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::wipe(uint64_t a1)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  return sub_1CD3C7F68((_DWORD *)(a1 + 40));
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 40), 8);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  int v4 = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = v4;
  int v5 = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = v5;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  sub_1CD3C7F68((_DWORD *)(a2 + 40));
  return a1;
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::isCommonDomFrontier(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a2 + 8); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v3 = *(void *)(i + 24);
    unsigned int v4 = *(unsigned __int8 *)(v3 + 16);
    if (v3) {
      BOOL v5 = v4 >= 0x1C;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5 && v4 - 29 < 0xB) {
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
    }
  }
  return 1;
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::getTopMostParent(uint64_t a1, uint64_t a2)
{
  do
  {
    uint64_t result = a2;
    a2 = *(void *)(a2 + 8);
  }
  while (a2);
  return result;
}

void llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::print(int a1, llvm::raw_ostream *this)
{
  int v2 = (void *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v2 > 0xCuLL)
  {
    qmemcpy(v2, "Region tree:\n", 13);
    *((void *)this + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(this, "Region tree:\n", 0xDuLL);
  }
  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::print();
}

void llvm::Region::~Region(llvm::Region *this)
{
  int v2 = (void *)((char *)this + 72);
  sub_1CD4B9F64(*((void **)this + 9));
  *((void *)this + 8) = v2;
  *((void *)this + 10) = 0;
  void *v2 = 0;
  uint64_t v3 = (void **)((char *)this + 40);
  sub_1CC0D3220(&v3);
}

{
  void *v2;
  void **v3;

  int v2 = (void *)((char *)this + 72);
  sub_1CD4B9F64(*((void **)this + 9));
  *((void *)this + 8) = v2;
  *((void *)this + 10) = 0;
  void *v2 = 0;
  uint64_t v3 = (void **)((char *)this + 40);
  sub_1CC0D3220(&v3);
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = a2;
  int v2 = sub_1CD3C8538((uint64_t *)(a1 + 40), &v5, &v4);
  uint64_t result = 0;
  if (v2) {
    return *(void *)(v4 + 8);
  }
  return result;
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::getMaxRegionExit(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 40);
  uint64_t v19 = 0;
  uint64_t v20 = a2;
  int v4 = sub_1CD3C8538((uint64_t *)(a1 + 40), &v20, &v19);
  uint64_t v5 = 0;
  if (v4) {
    uint64_t v5 = *(void **)(v19 + 8);
  }
  do
  {
    uint64_t v6 = v5;
    if (!v5) {
      goto LABEL_7;
    }
    uint64_t v5 = (void *)v5[1];
  }
  while (v5 && a2 == (*v5 & 0xFFFFFFFFFFFFFFF8));
  if (a2 == (*v6 & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t Successor = v6[4];
LABEL_14:
    uint64_t v19 = 0;
    uint64_t v20 = Successor;
    int v10 = sub_1CD3C8538(v3, &v20, &v19);
    uint64_t v11 = 0;
    if (v10) {
      uint64_t v11 = *(void **)(v19 + 8);
    }
    do
    {
      if (!v11) {
        break;
      }
      uint64_t v11 = (void *)v11[1];
      if (!v11) {
        break;
      }
    }
    while (Successor == (*v11 & 0xFFFFFFFFFFFFFFF8));
    for (uint64_t i = *(void *)(Successor + 8); i; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v13 = *(void *)(i + 24);
      unsigned int v14 = *(unsigned __int8 *)(v13 + 16);
      if (v13) {
        BOOL v15 = v14 >= 0x1C;
      }
      else {
        BOOL v15 = 0;
      }
      if (v15 && v14 - 29 <= 0xA) {
        llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains();
      }
    }
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
  }
LABEL_7:
  uint64_t v7 = *(void *)(a2 + 40);
  if (v7 != a2 + 40)
  {
    if (v7) {
      uint64_t v8 = v7 - 24;
    }
    else {
      uint64_t v8 = 0;
    }
    if (*(unsigned char *)(v8 + 16) != 30)
    {
      switch(*(unsigned char *)(v8 + 16))
      {
        case 0x1E:
          __break(1u);
          JUMPOUT(0x1CC0D2BA8);
        case 0x1F:
          int v17 = (*(_DWORD *)(v8 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_32;
        case 0x20:
        case 0x26:
          int v17 = (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_32;
        case 0x24:
          int v17 = *(_WORD *)(v8 + 18) & 1;
          goto LABEL_32;
        case 0x25:
          goto LABEL_13;
        case 0x27:
          int v17 = *(_DWORD *)(v8 + 80) + 1;
LABEL_32:
          if (v17 != 1) {
            return 0;
          }
          goto LABEL_13;
        default:
          return 0;
      }
    }
    if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) != 3)
    {
LABEL_13:
      uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v8, 0);
      goto LABEL_14;
    }
  }
  return 0;
}

void llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::getCommonRegion()
{
}

void llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::getCommonRegion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = (uint64_t *)(a1 + 40);
  uint64_t v5 = 0;
  uint64_t v6 = a2;
  sub_1CD3C8538((uint64_t *)(a1 + 40), &v6, &v5);
  uint64_t v5 = 0;
  uint64_t v6 = a3;
  sub_1CD3C8538(v4, &v6, &v5);
  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains();
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::getCommonRegion(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 8);
  uint64_t v3 = *(void *)(*(void *)a2 + 8 * v2 - 8);
  LODWORD(v2) = v2 - 1;
  *(_DWORD *)(a2 + 8) = v2;
  if (v2) {
    llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains();
  }
  return v3;
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::getCommonRegion(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = (*a2)[*((unsigned int *)a2 + 2) - 1];
  int v4 = (uint64_t *)(a1 + 40);
  uint64_t v9 = 0;
  uint64_t v10 = v3;
  uint64_t v5 = 0;
  if (sub_1CD3C8538((uint64_t *)(a1 + 40), &v10, &v9)) {
    uint64_t v5 = *(void *)(v9 + 8);
  }
  int v6 = *((_DWORD *)a2 + 2) - 1;
  *((_DWORD *)a2 + 2) = v6;
  if (v6)
  {
    uint64_t v7 = **a2;
    uint64_t v9 = 0;
    uint64_t v10 = v7;
    sub_1CD3C8538(v4, &v10, &v9);
    llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains();
  }
  return v5;
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::getTopLevelRegion(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::clearNodeCache(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::clearNodeCache();
  }
  return result;
}

void llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::verifyAnalysis()
{
  if (llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::VerifyRegionInfo) {
    llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::verifyRegionNest();
  }
}

uint64_t llvm::RegionInfo::RegionInfo(uint64_t this)
{
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(void *)(this + 48) = 0;
  *(void *)this = &unk_1F2606A48;
  return this;
}

{
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(void *)(this + 48) = 0;
  *(void *)this = &unk_1F2606A48;
  return this;
}

void llvm::RegionInfoPass::~RegionInfoPass(llvm::RegionInfoPass *this)
{
  *(void *)this = &unk_1F2606A70;
  llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::~RegionInfoBase();
}

{
  *(void *)this = &unk_1F2606A70;
  llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::~RegionInfoBase();
}

{
  *(void *)this = &unk_1F2606A70;
  llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::~RegionInfoBase();
}

void sub_1CC0D3040(llvm *a1)
{
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializePostDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeDominanceFrontierWrapperPassPass(a1, v2);
  operator new();
}

void *llvm::RegionInfoPrinterPass::RegionInfoPrinterPass(void *result, uint64_t a2)
{
  uint64_t *result = a2;
  return result;
}

char *sub_1CC0D30FC(void **a1, uint64_t a2)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    abort();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 3) > v5) {
    unint64_t v5 = 0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - v3) >> 3) >= 0x333333333333333) {
    unint64_t v8 = 0x666666666666666;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x666666666666666) {
      sub_1CB833614();
    }
    uint64_t v9 = (char *)operator new(40 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[40 * v4];
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v11;
  *((void *)v10 + 4) = *(void *)(a2 + 32);
  BOOL v12 = v10 + 40;
  if (v2 != v3)
  {
    do
    {
      long long v13 = *(_OWORD *)(v2 - 40);
      long long v14 = *(_OWORD *)(v2 - 24);
      *((void *)v10 - 1) = *((void *)v2 - 1);
      *(_OWORD *)(v10 - 24) = v14;
      *(_OWORD *)(v10 - 40) = v13;
      v10 -= 40;
      v2 -= 40;
    }
    while (v2 != v3);
    uint64_t v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = &v9[40 * v8];
  if (v2) {
    operator delete(v2);
  }
  return v12;
}

void sub_1CC0D3220(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    unint64_t v4 = v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *unint64_t v4 = 0;
        if (v7)
        {
          sub_1CD4B9F64(*(void **)(v6 + 72));
          *(void *)(v6 + 64) = v6 + 72;
          *(void *)(v6 + 80) = 0;
          *(void *)(v6 + 72) = 0;
          uint64_t v8 = v6 + 40;
          sub_1CC0D3220(&v8);
          MEMORY[0x1D25D9CE0](v6, 0x1020C406A19994FLL);
        }
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_1CC0D3304(void *result, unsigned char *a2, unsigned char *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x666666666666667) {
      abort();
    }
    uint64_t v6 = result;
    uint64_t v7 = 5 * a4;
    uint64_t result = operator new(40 * a4);
    uint64_t v8 = result;
    *uint64_t v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    if (a2 != a3)
    {
      size_t v9 = 40 * ((a3 - a2 - 40) / 0x28uLL) + 40;
      uint64_t result = memcpy(result, a2, v9);
      uint64_t v8 = (void *)((char *)v8 + v9);
    }
    v6[1] = v8;
  }
  return result;
}

BOOL sub_1CC0D33B8(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (*(unsigned char *)(a1 + 32) == 0) ^ (v3 != 0);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if ((v5 & 6) != 0) {
    return ((*(_DWORD *)(a2 + 8) ^ v5) & 6) == 0;
  }
  else {
    return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  }
}

void sub_1CC0D342C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v2 = v1[5];
      v1[5] = 0;
      if (v2) {
        MEMORY[0x1D25D9CE0](v2, 0x1020C405730B0C9);
      }
    }
    operator delete(v1);
  }
}

uint64_t *sub_1CC0D349C(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  uint64_t *result = a2;
  if (v2)
  {
    sub_1CD4B9F64(*(void **)(v2 + 72));
    *(void *)(v2 + 64) = v2 + 72;
    *(void *)(v2 + 80) = 0;
    *(void *)(v2 + 72) = 0;
    int v3 = (void **)(v2 + 40);
    sub_1CC0D3220(&v3);
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t *sub_1CC0D3528(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61) {
    abort();
  }
  uint64_t v6 = (char *)a1[2] - (char *)*a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (v7)
  {
    if (v7 >> 61) {
      sub_1CB833614();
    }
    uint64_t v8 = (char *)operator new(8 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  size_t v9 = (uint64_t *)&v8[8 * v2];
  uint64_t v10 = (uint64_t *)&v8[8 * v7];
  uint64_t v11 = *a2;
  *a2 = 0;
  *size_t v9 = v11;
  BOOL v12 = v9 + 1;
  long long v13 = *a1;
  long long v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    do
    {
      uint64_t v15 = *--v14;
      uint64_t *v14 = 0;
      *--size_t v9 = v15;
    }
    while (v14 != v13);
    long long v14 = *a1;
    unsigned int v16 = a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    while (v16 != v14)
      sub_1CC0D349C(--v16, 0);
  }
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

uint64_t sub_1CC0D362C()
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v1 = &llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::VerifyRegionInfo;
  *(void *)&long long v4 = "Verify region info (time consuming)";
  *((void *)&v4 + 1) = 35;
  sub_1CD4BAE8C((unsigned char **)&v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1CC086C1C, qword_1EBCC6E30, &dword_1CB82C000);
  int v2 = 1;
  *(void *)&long long v1 = "style of printing regions";
  *((void *)&v1 + 1) = 25;
  unint64_t v3 = (llvm *)&llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::printStyle;
  *(void *)&long long v4 = v5;
  v5[0] = "none";
  v5[1] = 4;
  int v6 = 0;
  unint64_t v7 = "print no details";
  uint64_t v8 = 16;
  int v11 = 1;
  BOOL v12 = "print regions in detail with block_iterator";
  uint64_t v13 = 43;
  size_t v9 = "bb";
  uint64_t v10 = 2;
  long long v14 = "rn";
  uint64_t v15 = 2;
  int v16 = 2;
  int v17 = "print regions in detail with element_iterator";
  uint64_t v18 = 45;
  *((void *)&v4 + 1) = 0x400000003;
  sub_1CD4BAF98(&v3, &v2, &v1, (uint64_t)&v4);
  if ((void *)v4 != v5) {
    free((void *)v4);
  }
  return __cxa_atexit((void (*)(void *))sub_1CD4B8FDC, &qword_1EBCC6EF0, &dword_1CB82C000);
}

void sub_1CC0D37B0(uint64_t a1, void *a2)
{
  uint64_t v7 = a1;
  sub_1CD45F140(a2, &v7);
  uint64_t v5 = *(uint64_t **)(a1 + 40);
  long long v4 = *(uint64_t **)(a1 + 48);
  while (v5 != v4)
  {
    uint64_t v6 = *v5++;
    sub_1CC0D37B0(v6, a2);
  }
}

uint64_t llvm::RegionPass::skipRegion(llvm::RegionPass *this, llvm::Region *a2)
{
  uint64_t v3 = *(void *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  uint64_t OptPassGate = llvm::LLVMContextImpl::getOptPassGate(***(llvm::LLVMContextImpl ****)v3);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)OptPassGate + 24))(OptPassGate)) {
    goto LABEL_4;
  }
  char v10 = 6;
  strcpy((char *)__p, "region");
  int v5 = (*(uint64_t (**)(uint64_t, llvm::RegionPass *, void **, uint64_t))(*(void *)OptPassGate + 16))(OptPassGate, this, __p, 6);
  int v6 = v5;
  if ((v10 & 0x80000000) == 0)
  {
    if (v5) {
      goto LABEL_4;
    }
    return 1;
  }
  operator delete(__p[0]);
  if (!v6) {
    return 1;
  }
LABEL_4:
  uint64_t v7 = *(void *)(v3 + 112);
  if (v7) {
    return (*(unsigned __int8 *)(v7 + 17) >> 3) & 1;
  }
  else {
    return 0;
  }
}

void sub_1CC0D3920(void **this)
{
  *this = &unk_1F2606DF0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }

  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1CC0D3980(void **this)
{
  *this = &unk_1F2606DF0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  llvm::Pass::~Pass((llvm::Pass *)this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC0D39F4()
{
  return "Print Region IR";
}

void sub_1CC0D3A04(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

uint64_t sub_1CC0D3A10(uint64_t a1, void *a2)
{
  uint64_t v3 = *(uint64_t ****)((*a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  if ((*((unsigned char *)v3 + 23) & 0x10) != 0)
  {
    uint64_t v4 = ***v3;
    uint64_t v5 = *(void *)(v4 + 152);
    uint64_t v6 = *(unsigned int *)(v4 + 168);
    if (v6)
    {
      LODWORD(v7) = (v6 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      uint64_t v8 = (uint64_t ****)(v5 + 16 * v7);
      size_t v9 = *v8;
      if (*v8 == v3)
      {
LABEL_9:
        BOOL v12 = v8[1];
        std::string::size_type v15 = (std::string::size_type)*v12;
        uint64_t v13 = (const std::string::value_type *)(v12 + 2);
        std::string::size_type v14 = v15;
        goto LABEL_10;
      }
      int v10 = 1;
      while (v9 != (uint64_t ***)-4096)
      {
        int v11 = v7 + v10++;
        uint64_t v7 = v11 & (v6 - 1);
        size_t v9 = *(uint64_t ****)(v5 + 16 * v7);
        if (v9 == v3)
        {
          uint64_t v8 = (uint64_t ****)(v5 + 16 * v7);
          goto LABEL_9;
        }
      }
    }
    uint64_t v8 = (uint64_t ****)(v5 + 16 * v6);
    goto LABEL_9;
  }
  std::string::size_type v14 = 0;
  uint64_t v13 = &byte_1CFBCE98E;
LABEL_10:
  if (llvm::isFunctionInPrintList(v13, v14))
  {
    char v17 = *(unsigned char *)(a1 + 55);
    if (v17 >= 0) {
      uint64_t v18 = (const char *)(a1 + 32);
    }
    else {
      uint64_t v18 = *(const char **)(a1 + 32);
    }
    if (v17 >= 0) {
      size_t v19 = v17 & 0x7F;
    }
    else {
      size_t v19 = *(void *)(a1 + 40);
    }
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 56), v18, v19);
    llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::blocks();
  }
  return 0;
}

void sub_1CC0D3E0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  while (2)
  {
    uint64_t v3 = *(void *)(v2 - 32);
    if (!*(unsigned char *)(v2 - 8))
    {
      uint64_t v4 = *(void *)(v3 + 40);
      if (v4 == v3 + 40)
      {
LABEL_85:
        uint64_t v5 = 0;
      }
      else
      {
        if (v4) {
          uint64_t v5 = v4 - 24;
        }
        else {
          uint64_t v5 = 0;
        }
        if (*(unsigned __int8 *)(v5 + 16) - 29 >= 0xB) {
          uint64_t v5 = 0;
        }
      }
      *(void *)(v2 - 24) = v5;
      *(void *)(v2 - 16) = 0;
      *(unsigned char *)(v2 - 8) = 1;
    }
    uint64_t v6 = (void *)(v3 + 40);
    while (1)
    {
      uint64_t v7 = (void *)*v6;
      if ((void *)*v6 == v6)
      {
LABEL_83:
        LODWORD(v3) = 0;
      }
      else
      {
        uint64_t v8 = v7 - 3;
        if (!v7) {
          uint64_t v8 = 0;
        }
        int v9 = *((unsigned __int8 *)v8 + 16);
        int v10 = v9 - 29;
        if (v9 == 30)
        {
          LODWORD(v3) = (*((_DWORD *)v8 + 5) & 0x7FFFFFF) == 3 ? 2 : 1;
        }
        else
        {
          uint64_t v3 = 0;
          switch(v10)
          {
            case 0:
            case 5:
            case 6:
              break;
            case 1:
              __break(1u);
              goto LABEL_85;
            case 2:
              LODWORD(v3) = (*((_DWORD *)v8 + 5) >> 1) & 0x3FFFFFF;
              break;
            case 3:
            case 9:
              LODWORD(v3) = (*((_DWORD *)v8 + 5) & 0x7FFFFFF) - 1;
              break;
            case 4:
              LODWORD(v3) = 2;
              break;
            case 7:
              LODWORD(v3) = *((_WORD *)v8 + 9) & 1;
              break;
            case 8:
              LODWORD(v3) = 1;
              break;
            case 10:
              LODWORD(v3) = *((_DWORD *)v8 + 20) + 1;
              break;
            default:
              goto LABEL_83;
          }
        }
      }
      int v11 = *(_DWORD *)(v2 - 16);
      if (v11 == v3) {
        break;
      }
      BOOL v12 = *(llvm::Instruction **)(v2 - 24);
      unsigned int v13 = *(_DWORD *)(v2 - 16);
      *(_DWORD *)(v2 - 16) = v11 + 1;
      uint64_t Successor = llvm::Instruction::getSuccessor(v12, v13);
      uint64_t v15 = Successor;
      uint64_t v16 = *(void *)(a1 + 8);
      uint64_t v17 = *(unsigned int *)(a1 + 20);
      if (v16 != *(void *)a1)
      {
        unsigned int v21 = *(_DWORD *)(a1 + 16);
        goto LABEL_44;
      }
      if (v17)
      {
        uint64_t v18 = 0;
        uint64_t v19 = 8 * v17;
        uint64_t v20 = *(uint64_t **)(a1 + 8);
        while (*v20 != Successor)
        {
          if (*v20 == -2) {
            uint64_t v18 = v20;
          }
          ++v20;
          v19 -= 8;
          if (!v19)
          {
            if (!v18) {
              goto LABEL_28;
            }
            *uint64_t v18 = Successor;
            --*(_DWORD *)(a1 + 24);
            goto LABEL_51;
          }
        }
      }
      else
      {
LABEL_28:
        unsigned int v21 = *(_DWORD *)(a1 + 16);
        if (v17 < v21)
        {
          *(_DWORD *)(a1 + 20) = v17 + 1;
          *(void *)(v16 + 8 * v17) = Successor;
LABEL_51:
          uint64_t v33 = *(unsigned char **)(a1 + 104);
          unint64_t v32 = *(void *)(a1 + 112);
          if ((unint64_t)v33 >= v32)
          {
            uint64_t v35 = *(unsigned char **)(a1 + 96);
            uint64_t v36 = (v33 - v35) >> 5;
            unint64_t v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 59) {
              abort();
            }
            uint64_t v38 = v32 - (void)v35;
            if (v38 >> 4 > v37) {
              unint64_t v37 = v38 >> 4;
            }
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v39 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v39 = v37;
            }
            if (v39)
            {
              if (v39 >> 59) {
                sub_1CB833614();
              }
              BOOL v40 = (char *)operator new(32 * v39);
            }
            else
            {
              BOOL v40 = 0;
            }
            uint64_t v41 = &v40[32 * v36];
            *(void *)uint64_t v41 = v15;
            v41[8] = 0;
            v41[24] = 0;
            char v34 = v41 + 32;
            if (v33 != v35)
            {
              do
              {
                long long v42 = *((_OWORD *)v33 - 1);
                *((_OWORD *)v41 - 2) = *((_OWORD *)v33 - 2);
                *((_OWORD *)v41 - 1) = v42;
                v41 -= 32;
                v33 -= 32;
              }
              while (v33 != v35);
              uint64_t v33 = *(unsigned char **)(a1 + 96);
            }
            *(void *)(a1 + 96) = v41;
            *(void *)(a1 + 104) = v34;
            *(void *)(a1 + 112) = &v40[32 * v39];
            if (v33) {
              operator delete(v33);
            }
          }
          else
          {
            *(void *)uint64_t v33 = v15;
            v33[8] = 0;
            char v34 = v33 + 32;
            v33[24] = 0;
          }
          *(void *)(a1 + 104) = v34;
          return;
        }
LABEL_44:
        if (3 * v21 <= 4 * ((int)v17 - *(_DWORD *)(a1 + 24)))
        {
          if (v21 >= 0x40) {
            v21 *= 2;
          }
          else {
            unsigned int v21 = 128;
          }
LABEL_80:
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a1, v21);
          unsigned int v21 = *(_DWORD *)(a1 + 16);
          uint64_t v16 = *(void *)(a1 + 8);
          goto LABEL_46;
        }
        if (v21 - v17 < v21 >> 3) {
          goto LABEL_80;
        }
LABEL_46:
        unsigned int v30 = v21 - 1;
        unsigned int v26 = (v21 - 1) & ((v15 >> 4) ^ (v15 >> 9));
        uint64_t v27 = (uint64_t *)(v16 + 8 * v26);
        uint64_t v28 = *v27;
        if (*v27 == -1)
        {
          uint64_t v23 = 0;
LABEL_38:
          if (v23) {
            uint64_t v29 = v23;
          }
          else {
            uint64_t v29 = v27;
          }
          if (*v29 != v15)
          {
            if (*v29 == -2) {
              --*(_DWORD *)(a1 + 24);
            }
            else {
              ++*(_DWORD *)(a1 + 20);
            }
            *uint64_t v29 = v15;
            goto LABEL_51;
          }
        }
        else
        {
          uint64_t v23 = 0;
          int v25 = 1;
          while (v28 != v15)
          {
            if (v23) {
              BOOL v22 = 0;
            }
            else {
              BOOL v22 = v28 == -2;
            }
            if (v22) {
              uint64_t v23 = v27;
            }
            unsigned int v24 = v26 + v25++;
            unsigned int v26 = v24 & v30;
            uint64_t v27 = (uint64_t *)(v16 + 8 * (v24 & v30));
            uint64_t v28 = *v27;
            if (*v27 == -1) {
              goto LABEL_38;
            }
          }
        }
      }
    }
    uint64_t v31 = *(void *)(a1 + 96);
    uint64_t v2 = *(void *)(a1 + 104) - 32;
    *(void *)(a1 + 104) = v2;
    if (v31 != v2) {
      continue;
    }
    break;
  }
}

void sub_1CC0D41E4(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if (v1 == v2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = ((v1 - v2) << 6) - 1;
  }
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x400)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

void llvm::initializeRegionPrinterPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC7210, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC0D42B4;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCC7210, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC0D42B4()
{
}

void llvm::initializeRegionOnlyPrinterPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC7218, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC0D43C4;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCC7218, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC0D43C4()
{
}

void llvm::initializeRegionViewerPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC7220, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC0D44D4;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCC7220, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC0D44D4()
{
}

void llvm::initializeRegionOnlyViewerPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC7228, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC0D45E4;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCC7228, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC0D45E4()
{
}

uint64_t sub_1CC0D4684(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC7208;
  *(_DWORD *)(a1 + 24) = 2;
  *(unsigned char *)(a1 + 55) = 3;
  *(_DWORD *)(a1 + 32) = 6776178;
  *(void *)a1 = &unk_1F2606EA0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC7210, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC0D42B4;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCC7210, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CC0D4748(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC7209;
  *(_DWORD *)(a1 + 24) = 2;
  *(unsigned char *)(a1 + 55) = 3;
  *(_DWORD *)(a1 + 32) = 6776178;
  *(void *)a1 = &unk_1F2606FF0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC7218, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC0D43C4;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCC7218, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CC0D480C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC720A;
  *(_DWORD *)(a1 + 24) = 2;
  *(unsigned char *)(a1 + 55) = 3;
  *(_DWORD *)(a1 + 32) = 6776178;
  *(void *)a1 = &unk_1F2607140;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC7220, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC0D44D4;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCC7220, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CC0D48D0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC720B;
  *(_DWORD *)(a1 + 24) = 2;
  *(unsigned char *)(a1 + 55) = 7;
  strcpy((char *)(a1 + 32), "regonly");
  *(void *)a1 = &unk_1F2607290;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC7228, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC0D45E4;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCC7228, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC0D49A4()
{
}

void sub_1CC0D49E0()
{
}

void sub_1CC0D4A1C()
{
}

void sub_1CC0D4A58()
{
}

void sub_1CC0D4A94(void **this)
{
  *this = &unk_1F2606F48;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }

  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1CC0D4AF4(void **this)
{
  *this = &unk_1F2606F48;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  llvm::Pass::~Pass((llvm::Pass *)this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC0D4B68(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  sub_1CB843600(a2, a2, (uint64_t)&llvm::RegionInfoPass::ID);
}

uint64_t sub_1CC0D4B80(uint64_t a1, uint64_t ***a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::RegionInfoPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::RegionInfoPass::ID);
  if ((*(unsigned int (**)(uint64_t, uint64_t ***, uint64_t))(*(void *)a1 + 144))(a1, a2, v8))
  {
    uint64_t v87 = v8 + 32;
    char v10 = *(unsigned char *)(a1 + 55);
    int v11 = v10;
    size_t v12 = v10 & 0x7F;
    if (v11 >= 0) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = *(void *)(a1 + 40);
    }
    p_p = &__p;
    sub_1CB907098((uint64_t)&__p, v13 + 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v13)
    {
      uint64_t v17 = *(char **)(a1 + 32);
      uint64_t v16 = (char *)(a1 + 32);
      uint64_t v15 = v17;
      if (v16[23] >= 0) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = v15;
      }
      memmove(p_p, v18, v13);
    }
    *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v13) = 46;
    unsigned int v19 = a2 >> 4;
    if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
    {
      size_t v29 = 0;
      HIBYTE(v84) = 0;
      p_dst = &__dst;
      goto LABEL_34;
    }
    uint64_t v20 = ***a2;
    uint64_t v21 = *(void *)(v20 + 152);
    uint64_t v22 = *(unsigned int *)(v20 + 168);
    if (v22)
    {
      LODWORD(v23) = (v22 - 1) & (v19 ^ (a2 >> 9));
      unsigned int v24 = (uint64_t ****)(v21 + 16 * v23);
      int v25 = *v24;
      if (*v24 == a2) {
        goto LABEL_26;
      }
      int v26 = 1;
      while (v25 != (uint64_t ***)-4096)
      {
        int v27 = v23 + v26++;
        uint64_t v23 = v27 & (v22 - 1);
        int v25 = *(uint64_t ****)(v21 + 16 * v23);
        if (v25 == a2)
        {
          unsigned int v24 = (uint64_t ****)(v21 + 16 * v23);
          goto LABEL_26;
        }
      }
    }
    unsigned int v24 = (uint64_t ****)(v21 + 16 * v22);
LABEL_26:
    uint64_t v28 = (unint64_t *)v24[1];
    unint64_t v31 = *v28;
    unsigned int v30 = v28 + 2;
    size_t v29 = v31;
    if (v31 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_106;
    }
    if (v29 >= 0x17)
    {
      uint64_t v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17) {
        uint64_t v33 = v29 | 7;
      }
      uint64_t v34 = v33 + 1;
      p_dst = (long long *)operator new(v33 + 1);
      *((void *)&__dst + 1) = v29;
      int64_t v84 = v34 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v84) = v29;
      p_dst = &__dst;
      if (!v29)
      {
LABEL_34:
        *((unsigned char *)p_dst + v29) = 0;
        if (v84 >= 0) {
          uint64_t v35 = (const std::string::value_type *)&__dst;
        }
        else {
          uint64_t v35 = (const std::string::value_type *)__dst;
        }
        if (v84 >= 0) {
          std::string::size_type v36 = HIBYTE(v84) & 0x7F;
        }
        else {
          std::string::size_type v36 = *((void *)&__dst + 1);
        }
        unint64_t v37 = std::string::append(&__p, v35, v36);
        std::string::size_type v38 = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v81.__r_.__value_.__l.__data_ = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v81.__r_.__value_.__r.__words[2] = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        unint64_t v39 = std::string::append(&v81, ".dot");
        std::string::size_type v40 = v39->__r_.__value_.__r.__words[2];
        long long v85 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        uint64_t v86 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v81.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v84) < 0) {
          operator delete((void *)__dst);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        v82[0] = 0;
        uint64_t v41 = (llvm *)std::system_category();
        long long v42 = (llvm::raw_ostream *)llvm::errs(v41);
        uint64_t v43 = *((void *)v42 + 4);
        if ((unint64_t)(*((void *)v42 + 3) - v43) > 8)
        {
          *(unsigned char *)(v43 + 8) = 39;
          *(void *)uint64_t v43 = *(void *)"Writing '";
          *((void *)v42 + 4) += 9;
        }
        else
        {
          long long v42 = llvm::raw_ostream::write(v42, "Writing '", 9uLL);
        }
        if (v86 >= 0) {
          uint64_t v44 = (const char *)&v85;
        }
        else {
          uint64_t v44 = (const char *)v85;
        }
        if (v86 >= 0) {
          size_t v45 = HIBYTE(v86) & 0x7F;
        }
        else {
          size_t v45 = *((void *)&v85 + 1);
        }
        int v46 = llvm::raw_ostream::write(v42, v44, v45);
        int v47 = (_DWORD *)*((void *)v46 + 4);
        if (*((void *)v46 + 3) - (void)v47 > 3uLL)
        {
          *int v47 = 774778407;
          *((void *)v46 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v46, "'...", 4uLL);
        }
        if (v86 >= 0) {
          unsigned int v48 = &v85;
        }
        else {
          unsigned int v48 = (long long *)v85;
        }
        if (v86 >= 0) {
          uint64_t v49 = HIBYTE(v86) & 0x7F;
        }
        else {
          uint64_t v49 = *((void *)&v85 + 1);
        }
        llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v81, v48, v49, (uint64_t)v82, 3);
        strcpy((char *)&v80, "Region Graph for '");
        v80.__r_.__value_.__s.__data_[19] = 0;
        HIDWORD(v80.__r_.__value_.__r.__words[2]) = 0;
        if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
        {
          size_t v59 = 0;
          HIBYTE(v79) = 0;
          int v62 = &v77;
          goto LABEL_78;
        }
        uint64_t v50 = ***a2;
        uint64_t v51 = *(void *)(v50 + 152);
        uint64_t v52 = *(unsigned int *)(v50 + 168);
        if (v52)
        {
          LODWORD(v53) = (v52 - 1) & (v19 ^ (a2 >> 9));
          v54 = (uint64_t ****)(v51 + 16 * v53);
          int v55 = *v54;
          if (*v54 == a2) {
            goto LABEL_70;
          }
          int v56 = 1;
          while (v55 != (uint64_t ***)-4096)
          {
            int v57 = v53 + v56++;
            uint64_t v53 = v57 & (v52 - 1);
            int v55 = *(uint64_t ****)(v51 + 16 * v53);
            if (v55 == a2)
            {
              v54 = (uint64_t ****)(v51 + 16 * v53);
              goto LABEL_70;
            }
          }
        }
        v54 = (uint64_t ****)(v51 + 16 * v52);
LABEL_70:
        v58 = (unint64_t *)v54[1];
        unint64_t v61 = *v58;
        v60 = v58 + 2;
        size_t v59 = v61;
        if (v61 <= 0x7FFFFFFFFFFFFFF7)
        {
          if (v59 >= 0x17)
          {
            uint64_t v63 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v59 | 7) != 0x17) {
              uint64_t v63 = v59 | 7;
            }
            uint64_t v64 = v63 + 1;
            int v62 = operator new(v63 + 1);
            std::string::size_type v78 = v59;
            int64_t v79 = v64 | 0x8000000000000000;
            int v77 = v62;
          }
          else
          {
            HIBYTE(v79) = v59;
            int v62 = &v77;
            if (!v59) {
              goto LABEL_78;
            }
          }
          memmove(v62, v60, v59);
LABEL_78:
          *((unsigned char *)v62 + v59) = 0;
          if (v79 >= 0) {
            v65 = (const std::string::value_type *)&v77;
          }
          else {
            v65 = (const std::string::value_type *)v77;
          }
          if (v79 >= 0) {
            std::string::size_type v66 = HIBYTE(v79) & 0x7F;
          }
          else {
            std::string::size_type v66 = v78;
          }
          int v67 = std::string::append(&v80, v65, v66);
          std::string::size_type v68 = v67->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v68;
          v67->__r_.__value_.__l.__size_ = 0;
          v67->__r_.__value_.__r.__words[2] = 0;
          v67->__r_.__value_.__r.__words[0] = 0;
          unsigned int v69 = std::string::append(&__p, "' function");
          int64_t v70 = v69->__r_.__value_.__r.__words[2];
          long long __dst = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
          int64_t v84 = v70;
          v69->__r_.__value_.__l.__size_ = 0;
          v69->__r_.__value_.__r.__words[2] = 0;
          v69->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v79) < 0) {
            operator delete(v77);
          }
          if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v80.__r_.__value_.__l.__data_);
          }
          if (!v82[0])
          {
            __int16 v76 = 260;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
            sub_1CD4BC284((llvm::raw_ostream *)&v81, (llvm::raw_ostream *)&v87, 0, (llvm::Twine *)&__p);
          }
          v71 = (llvm::raw_ostream *)llvm::errs((llvm *)v69);
          v72 = (void *)*((void *)v71 + 4);
          if (*((void *)v71 + 3) - (void)v72 > 0x20uLL)
          {
            qmemcpy(v72, "  error opening file for writing!", 33);
            *((void *)v71 + 4) += 33;
          }
          else
          {
            v71 = llvm::raw_ostream::write(v71, "  error opening file for writing!", 0x21uLL);
          }
          v73 = (llvm::raw_ostream *)llvm::errs(v71);
          v74 = (unsigned char *)*((void *)v73 + 4);
          if (*((unsigned char **)v73 + 3) == v74)
          {
            llvm::raw_ostream::write(v73, "\n", 1uLL);
          }
          else
          {
            unsigned char *v74 = 10;
            ++*((void *)v73 + 4);
          }
          if (SHIBYTE(v84) < 0) {
            operator delete((void *)__dst);
          }
          llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v81);
          if (SHIBYTE(v86) < 0) {
            operator delete((void *)v85);
          }
          return 0;
        }
LABEL_106:
        abort();
      }
    }
    memmove(p_dst, v30, v29);
    goto LABEL_34;
  }
  return 0;
}

uint64_t sub_1CC0D51E8()
{
  return 1;
}

void sub_1CC0D51F0(void **this)
{
  *this = &unk_1F2606F48;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }

  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1CC0D5250(void **this)
{
  *this = &unk_1F2606F48;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  llvm::Pass::~Pass((llvm::Pass *)this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC0D52C4(uint64_t a1, uint64_t *a2)
{
  char v69 = 0;
  LOBYTE(v68[0]) = 0;
  uint64_t v4 = *(llvm::raw_ostream **)a1;
  uint64_t v5 = *(void *)(*(void *)a1 + 32);
  if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v5) > 4)
  {
    *(unsigned char *)(v5 + 4) = 101;
    *(_DWORD *)uint64_t v5 = 1685016073;
    *((void *)v4 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "\tNode", 5uLL);
  }
  llvm::write_hex(v4, (unint64_t)a2, 3, 0, 0);
  uint64_t v6 = (void *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v6 > 7uLL)
  {
    *uint64_t v6 = 0x3D65706168735B20;
    *((void *)v4 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v4, " [shape=", 8uLL);
  }
  uint64_t v7 = *(llvm::raw_ostream **)a1;
  uint64_t v8 = *(void *)(*(void *)a1 + 32);
  unint64_t v9 = *(void *)(*(void *)a1 + 24) - v8;
  if (*(unsigned char *)(a1 + 16))
  {
    if (v9 <= 4)
    {
      char v10 = "none,";
      size_t v11 = 5;
      goto LABEL_10;
    }
    *(unsigned char *)(v8 + 4) = 44;
    *(_DWORD *)uint64_t v8 = 1701736302;
    uint64_t v51 = *((void *)v7 + 4) + 5;
  }
  else
  {
    if (v9 <= 6)
    {
      char v10 = "record,";
      size_t v11 = 7;
LABEL_10:
      llvm::raw_ostream::write(v7, v10, v11);
      goto LABEL_11;
    }
    *(_DWORD *)(v8 + 3) = 744780399;
    *(_DWORD *)uint64_t v8 = 1868785010;
    uint64_t v51 = *((void *)v7 + 4) + 7;
  }
  *((void *)v7 + 4) = v51;
LABEL_11:
  if (v69 >= 0) {
    size_t v12 = v69 & 0x7F;
  }
  else {
    size_t v12 = (size_t)v68[1];
  }
  if (v12)
  {
    if (v69 >= 0) {
      size_t v13 = (const char *)v68;
    }
    else {
      size_t v13 = (const char *)v68[0];
    }
    std::string::size_type v14 = llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v13, v12);
    uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
    if (*((unsigned char **)v14 + 3) == v15)
    {
      llvm::raw_ostream::write(v14, ",", 1uLL);
    }
    else
    {
      unsigned char *v15 = 44;
      ++*((void *)v14 + 4);
    }
  }
  uint64_t v16 = *(llvm::raw_ostream **)a1;
  uint64_t v17 = *(void *)(*(void *)a1 + 32);
  if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v17) > 5)
  {
    *(_WORD *)(v17 + 4) = 15724;
    *(_DWORD *)uint64_t v17 = 1700946284;
    *((void *)v16 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v16, "label=", 6uLL);
  }
  if (!*(unsigned char *)(a1 + 16))
  {
    uint64_t v18 = *(llvm::raw_ostream **)a1;
    unsigned int v19 = *(_WORD **)(*(void *)a1 + 32);
    if (*(void *)(*(void *)a1 + 24) - (void)v19 <= 1uLL)
    {
      uint64_t v20 = "\"{";
LABEL_59:
      llvm::raw_ostream::write(v18, v20, 2uLL);
      goto LABEL_60;
    }
    *unsigned int v19 = 31522;
    *((void *)v18 + 4) += 2;
    goto LABEL_60;
  }
  sub_1CD4BC9D8((uint64_t)&__p, a2);
  unint64_t v21 = *a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = *(void *)(v21 + 40);
  if (v22 == v21 + 40)
  {
LABEL_34:
    int v54 = 0;
LABEL_35:
    if (v59 == v54 && __p == a2)
    {
      unsigned int v24 = 0;
      int v25 = 0;
    }
    else
    {
      int v26 = 0;
      do
      {
        sub_1CD4BC7B4((uint64_t)&__p);
        unsigned int v24 = v26 + 1;
        BOOL v27 = v59 == v54 && __p == a2;
        int v25 = !v27;
        if (v27) {
          break;
        }
        BOOL v27 = v26++ == 63;
      }
      while (!v27);
    }
    if (v24 <= 1) {
      int v28 = 1;
    }
    else {
      int v28 = v24;
    }
    size_t v29 = *(llvm::raw_ostream **)a1;
    unsigned int v30 = *(void **)(*(void *)a1 + 32);
    if (*(void *)(*(void *)a1 + 24) - (void)v30 <= 0x30uLL)
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
      uint64_t v53 = (void *)*((void *)v29 + 4);
    }
    else
    {
      qmemcpy(v30, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
      uint64_t v53 = (void *)(*((void *)v29 + 4) + 49);
      *((void *)v29 + 4) = v53;
    }
    unint64_t v31 = (v28 + v25);
    if (*((void *)v29 + 3) - (void)v53 <= 0x2EuLL)
    {
      llvm::raw_ostream::write(v29, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
    }
    else
    {
      qmemcpy(v53, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
      *((void *)v29 + 4) += 47;
    }
    sub_1CD098D14(v29, v31, 0, 0, 0);
    unint64_t v32 = (_WORD *)*((void *)v29 + 4);
    if (*((void *)v29 + 3) - (void)v32 <= 1uLL)
    {
      uint64_t v20 = "\">";
      uint64_t v18 = v29;
      goto LABEL_59;
    }
    *unint64_t v32 = 15906;
    *((void *)v29 + 4) += 2;
LABEL_60:
    uint64_t v33 = *(llvm::raw_ostream **)a1;
    uint64_t v34 = (unsigned char *)(a1 + 17);
    if (*(unsigned char *)(a1 + 16))
    {
      sub_1CD4BCAC0((uint64_t)&__p, v34, *a2);
      if (v59 >= 0) {
        p_p = (const char *)&__p;
      }
      else {
        p_p = (const char *)__p;
      }
      if (v59 >= 0) {
        size_t v39 = HIBYTE(v59) & 0x7F;
      }
      else {
        size_t v39 = v58;
      }
      llvm::raw_ostream::write(v33, p_p, v39);
      uint64_t v40 = *((void *)v33 + 4);
      if ((unint64_t)(*((void *)v33 + 3) - v40) > 4)
      {
        *(unsigned char *)(v40 + 4) = 62;
        *(_DWORD *)uint64_t v40 = 1685335868;
        *((void *)v33 + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(v33, "</td>", 5uLL);
      }
      if (SHIBYTE(v59) < 0)
      {
        unint64_t v37 = __p;
        goto LABEL_81;
      }
    }
    else
    {
      sub_1CD4BCAC0((uint64_t)v66, v34, *a2);
      llvm::DOT::EscapeString((char *)v66, (uint64_t)&__p);
      if (v59 >= 0) {
        uint64_t v35 = (const char *)&__p;
      }
      else {
        uint64_t v35 = (const char *)__p;
      }
      if (v59 >= 0) {
        size_t v36 = HIBYTE(v59) & 0x7F;
      }
      else {
        size_t v36 = v58;
      }
      llvm::raw_ostream::write(v33, v35, v36);
      if (SHIBYTE(v59) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v67) < 0)
      {
        unint64_t v37 = v66[0];
LABEL_81:
        operator delete(v37);
      }
    }
    v66[0] = 0;
    v66[1] = 0;
    uint64_t v67 = 0;
    LODWORD(v58) = 0;
    char v62 = 0;
    uint64_t v63 = 0;
    v65 = v66;
    int v64 = 0;
    std::string __p = &unk_1F2646F30;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    sub_1CD4BC850(a1, (llvm::raw_ostream *)&__p, a2);
    uint64_t v41 = *(llvm::raw_ostream **)a1;
    long long v42 = *(_WORD **)(*(void *)a1 + 32);
    unint64_t v43 = *(void *)(*(void *)a1 + 24) - (void)v42;
    if (*(unsigned char *)(a1 + 16))
    {
      if (v43 <= 0xD)
      {
        uint64_t v44 = "</tr></table>>";
        size_t v45 = 14;
        goto LABEL_87;
      }
      qmemcpy(v42, "</tr></table>>", 14);
      uint64_t v52 = *((void *)v41 + 4) + 14;
    }
    else
    {
      if (v43 <= 1)
      {
        uint64_t v44 = "}\"";
        size_t v45 = 2;
LABEL_87:
        llvm::raw_ostream::write(v41, v44, v45);
        goto LABEL_88;
      }
      *long long v42 = 8829;
      uint64_t v52 = *((void *)v41 + 4) + 2;
    }
    *((void *)v41 + 4) = v52;
LABEL_88:
    int v46 = *(llvm::raw_ostream **)a1;
    uint64_t v47 = *(void *)(*(void *)a1 + 32);
    if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v47) > 2)
    {
      *(unsigned char *)(v47 + 2) = 10;
      *(_WORD *)uint64_t v47 = 15197;
      *((void *)v46 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v46, "];\n", 3uLL);
    }
    sub_1CD4BC9D8((uint64_t)v55, a2);
    unint64_t v48 = *a2 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v49 = *(void *)(v48 + 40);
    if (v49 == v48 + 40)
    {
LABEL_99:
      int v50 = 0;
    }
    else
    {
      if (v49) {
        uint64_t v23 = v49 - 24;
      }
      else {
        uint64_t v23 = 0;
      }
      if (*(unsigned char *)(v23 + 16) == 30)
      {
        if ((*(_DWORD *)(v23 + 20) & 0x7FFFFFF) == 3) {
          int v50 = 2;
        }
        else {
          int v50 = 1;
        }
      }
      else
      {
        int v50 = 0;
        switch(*(unsigned char *)(v23 + 16))
        {
          case 0x1D:
          case 0x22:
          case 0x23:
            goto LABEL_100;
          case 0x1E:
            goto LABEL_129;
          case 0x1F:
            int v50 = (*(_DWORD *)(v23 + 20) >> 1) & 0x3FFFFFF;
            break;
          case 0x20:
          case 0x26:
            goto LABEL_130;
          case 0x21:
            int v50 = 2;
            break;
          case 0x24:
            int v50 = *(_WORD *)(v23 + 18) & 1;
            break;
          case 0x25:
            int v50 = 1;
            break;
          case 0x27:
            int v50 = *(_DWORD *)(v23 + 80) + 1;
            break;
          default:
            goto LABEL_99;
        }
      }
    }
    goto LABEL_100;
  }
  if (v22) {
    uint64_t v23 = v22 - 24;
  }
  else {
    uint64_t v23 = 0;
  }
  if (*(unsigned char *)(v23 + 16) == 30)
  {
    if ((*(_DWORD *)(v23 + 20) & 0x7FFFFFF) == 3) {
      int v54 = 2;
    }
    else {
      int v54 = 1;
    }
    goto LABEL_35;
  }
  int v54 = 0;
  switch(*(unsigned char *)(v23 + 16))
  {
    case 0x1D:
    case 0x22:
    case 0x23:
      goto LABEL_35;
    case 0x1E:
LABEL_129:
      __break(1u);
LABEL_130:
      int v50 = (*(_DWORD *)(v23 + 20) & 0x7FFFFFF) - 1;
      break;
    case 0x1F:
      int v54 = (*(_DWORD *)(v23 + 20) >> 1) & 0x3FFFFFF;
      goto LABEL_35;
    case 0x20:
    case 0x26:
      int v54 = (*(_DWORD *)(v23 + 20) & 0x7FFFFFF) - 1;
      goto LABEL_35;
    case 0x21:
      int v54 = 2;
      goto LABEL_35;
    case 0x24:
      int v54 = *(_WORD *)(v23 + 18) & 1;
      goto LABEL_35;
    case 0x25:
      int v54 = 1;
      goto LABEL_35;
    case 0x27:
      int v54 = *(_DWORD *)(v23 + 80) + 1;
      goto LABEL_35;
    default:
      goto LABEL_34;
  }
LABEL_100:
  if (v56[0] != v50 || (uint64_t *)v55[0] != a2)
  {
    llvm::Instruction::getSuccessor(v55[1], v56[0]);
    llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getBBNode();
  }
  std::string __p = &unk_1F2646B98;
  if (v64 == 1 && v59) {
    MEMORY[0x1D25D9CB0](v59, 0x1000C8077774924);
  }
  if (SHIBYTE(v67) < 0) {
    operator delete(v66[0]);
  }
  if (v69 < 0) {
    operator delete(v68[0]);
  }
}

uint64_t sub_1CC0D5BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 - a1 != a4 - a3) {
    return 0;
  }
  while (a1 != a2)
  {
    if (*(void *)a1 != *(void *)a3) {
      return 0;
    }
    int v4 = *(unsigned __int8 *)(a3 + 32);
    if (*(unsigned char *)(a1 + 32)) {
      BOOL v5 = v4 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      if ((*(unsigned char *)(a1 + 32) == 0) == (v4 != 0)) {
        return 0;
      }
    }
    else if (*(_DWORD *)(a1 + 24) != *(_DWORD *)(a3 + 24) || *(void *)(a1 + 8) != *(void *)(a3 + 8))
    {
      return 0;
    }
    a1 += 40;
    a3 += 40;
  }
  return 1;
}

void sub_1CC0D5C70(unint64_t a1, llvm::raw_ostream **a2, int a3)
{
  uint64_t v6 = *a2;
  llvm::raw_ostream::indent(*a2, 2 * a3);
  uint64_t v7 = *((void *)v6 + 4);
  if ((unint64_t)(*((void *)v6 + 3) - v7) > 0x10)
  {
    *(unsigned char *)(v7 + 16) = 95;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)"subgraph cluster_";
    *((void *)v6 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(v6, "subgraph cluster_", 0x11uLL);
  }
  llvm::write_hex(v6, a1, 3, 0, 0);
  uint64_t v8 = *((void *)v6 + 4);
  if ((unint64_t)(*((void *)v6 + 3) - v8) > 2)
  {
    *(unsigned char *)(v8 + 2) = 10;
    *(_WORD *)uint64_t v8 = 31520;
    *((void *)v6 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v6, " {\n", 3uLL);
  }
  uint64_t v9 = (a3 + 1);
  llvm::raw_ostream::indent(v6, 2 * v9);
  uint64_t v10 = *((void *)v6 + 4);
  if ((unint64_t)(*((void *)v6 + 3) - v10) > 0xB)
  {
    *(_DWORD *)(v10 + 8) = 171647522;
    *(void *)uint64_t v10 = *(void *)"label = \"\";\n";
    *((void *)v6 + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(v6, "label = \"\";\n", 0xCuLL);
  }
  if (byte_1EBCC71C8) {
    llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::isSimple();
  }
  llvm::raw_ostream::indent(v6, 2 * v9);
  size_t v11 = (_OWORD *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v11 > 0xFuLL)
  {
    _OWORD *v11 = *(_OWORD *)"style = filled;\n";
    *((void *)v6 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(v6, "style = filled;\n", 0x10uLL);
  }
  llvm::raw_ostream::indent(v6, 2 * v9);
  size_t v12 = (void *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v12 > 7uLL)
  {
    *size_t v12 = 0x203D20726F6C6F63;
    *((void *)v6 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v6, "color = ", 8uLL);
  }
  int v13 = -1;
  unsigned int v14 = -2;
  unint64_t v15 = a1;
  do
  {
    unint64_t v15 = *(void *)(v15 + 8);
    v13 += 2;
    v14 += 2;
  }
  while (v15);
  sub_1CD098D14(v6, v13 - 12 * (v14 / 0xC), 0, 0, 0);
  uint64_t v16 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v16)
  {
    llvm::raw_ostream::write(v6, "\n", 1uLL);
  }
  else
  {
    *uint64_t v16 = 10;
    ++*((void *)v6 + 4);
  }
  uint64_t v17 = *(uint64_t **)(a1 + 40);
  uint64_t v18 = *(uint64_t **)(a1 + 48);
  while (v17 != v18)
  {
    uint64_t v19 = *v17++;
    sub_1CC0D5C70(v19, a2, v9);
  }
  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::blocks();
}

void sub_1CC0D63C4(void **this)
{
  *this = &unk_1F2607098;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }

  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1CC0D6424(void **this)
{
  *this = &unk_1F2607098;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  llvm::Pass::~Pass((llvm::Pass *)this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC0D6498(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  sub_1CB843600(a2, a2, (uint64_t)&llvm::RegionInfoPass::ID);
}

uint64_t sub_1CC0D64B0(uint64_t a1, uint64_t ***a2)
{
  int v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::RegionInfoPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::RegionInfoPass::ID);
  if ((*(unsigned int (**)(uint64_t, uint64_t ***, uint64_t))(*(void *)a1 + 144))(a1, a2, v8))
  {
    uint64_t v87 = v8 + 32;
    char v10 = *(unsigned char *)(a1 + 55);
    int v11 = v10;
    size_t v12 = v10 & 0x7F;
    if (v11 >= 0) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = *(void *)(a1 + 40);
    }
    p_p = &__p;
    sub_1CB907098((uint64_t)&__p, v13 + 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v13)
    {
      uint64_t v17 = *(char **)(a1 + 32);
      uint64_t v16 = (char *)(a1 + 32);
      unint64_t v15 = v17;
      if (v16[23] >= 0) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = v15;
      }
      memmove(p_p, v18, v13);
    }
    *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v13) = 46;
    unsigned int v19 = a2 >> 4;
    if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
    {
      size_t v29 = 0;
      HIBYTE(v84) = 0;
      p_dst = &__dst;
      goto LABEL_34;
    }
    uint64_t v20 = ***a2;
    uint64_t v21 = *(void *)(v20 + 152);
    uint64_t v22 = *(unsigned int *)(v20 + 168);
    if (v22)
    {
      LODWORD(v23) = (v22 - 1) & (v19 ^ (a2 >> 9));
      unsigned int v24 = (uint64_t ****)(v21 + 16 * v23);
      int v25 = *v24;
      if (*v24 == a2) {
        goto LABEL_26;
      }
      int v26 = 1;
      while (v25 != (uint64_t ***)-4096)
      {
        int v27 = v23 + v26++;
        uint64_t v23 = v27 & (v22 - 1);
        int v25 = *(uint64_t ****)(v21 + 16 * v23);
        if (v25 == a2)
        {
          unsigned int v24 = (uint64_t ****)(v21 + 16 * v23);
          goto LABEL_26;
        }
      }
    }
    unsigned int v24 = (uint64_t ****)(v21 + 16 * v22);
LABEL_26:
    int v28 = (unint64_t *)v24[1];
    unint64_t v31 = *v28;
    unsigned int v30 = v28 + 2;
    size_t v29 = v31;
    if (v31 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_106;
    }
    if (v29 >= 0x17)
    {
      uint64_t v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17) {
        uint64_t v33 = v29 | 7;
      }
      uint64_t v34 = v33 + 1;
      p_dst = (long long *)operator new(v33 + 1);
      *((void *)&__dst + 1) = v29;
      int64_t v84 = v34 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v84) = v29;
      p_dst = &__dst;
      if (!v29)
      {
LABEL_34:
        *((unsigned char *)p_dst + v29) = 0;
        if (v84 >= 0) {
          uint64_t v35 = (const std::string::value_type *)&__dst;
        }
        else {
          uint64_t v35 = (const std::string::value_type *)__dst;
        }
        if (v84 >= 0) {
          std::string::size_type v36 = HIBYTE(v84) & 0x7F;
        }
        else {
          std::string::size_type v36 = *((void *)&__dst + 1);
        }
        unint64_t v37 = std::string::append(&__p, v35, v36);
        std::string::size_type v38 = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v81.__r_.__value_.__l.__data_ = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v81.__r_.__value_.__r.__words[2] = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        size_t v39 = std::string::append(&v81, ".dot");
        std::string::size_type v40 = v39->__r_.__value_.__r.__words[2];
        long long v85 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        uint64_t v86 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v81.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v84) < 0) {
          operator delete((void *)__dst);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        v82[0] = 0;
        uint64_t v41 = (llvm *)std::system_category();
        long long v42 = (llvm::raw_ostream *)llvm::errs(v41);
        uint64_t v43 = *((void *)v42 + 4);
        if ((unint64_t)(*((void *)v42 + 3) - v43) > 8)
        {
          *(unsigned char *)(v43 + 8) = 39;
          *(void *)uint64_t v43 = *(void *)"Writing '";
          *((void *)v42 + 4) += 9;
        }
        else
        {
          long long v42 = llvm::raw_ostream::write(v42, "Writing '", 9uLL);
        }
        if (v86 >= 0) {
          uint64_t v44 = (const char *)&v85;
        }
        else {
          uint64_t v44 = (const char *)v85;
        }
        if (v86 >= 0) {
          size_t v45 = HIBYTE(v86) & 0x7F;
        }
        else {
          size_t v45 = *((void *)&v85 + 1);
        }
        int v46 = llvm::raw_ostream::write(v42, v44, v45);
        uint64_t v47 = (_DWORD *)*((void *)v46 + 4);
        if (*((void *)v46 + 3) - (void)v47 > 3uLL)
        {
          *uint64_t v47 = 774778407;
          *((void *)v46 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v46, "'...", 4uLL);
        }
        if (v86 >= 0) {
          unint64_t v48 = &v85;
        }
        else {
          unint64_t v48 = (long long *)v85;
        }
        if (v86 >= 0) {
          uint64_t v49 = HIBYTE(v86) & 0x7F;
        }
        else {
          uint64_t v49 = *((void *)&v85 + 1);
        }
        llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v81, v48, v49, (uint64_t)v82, 3);
        strcpy((char *)&v80, "Region Graph for '");
        v80.__r_.__value_.__s.__data_[19] = 0;
        HIDWORD(v80.__r_.__value_.__r.__words[2]) = 0;
        if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
        {
          size_t v59 = 0;
          HIBYTE(v79) = 0;
          char v62 = &v77;
          goto LABEL_78;
        }
        uint64_t v50 = ***a2;
        uint64_t v51 = *(void *)(v50 + 152);
        uint64_t v52 = *(unsigned int *)(v50 + 168);
        if (v52)
        {
          LODWORD(v53) = (v52 - 1) & (v19 ^ (a2 >> 9));
          int v54 = (uint64_t ****)(v51 + 16 * v53);
          int v55 = *v54;
          if (*v54 == a2) {
            goto LABEL_70;
          }
          int v56 = 1;
          while (v55 != (uint64_t ***)-4096)
          {
            int v57 = v53 + v56++;
            uint64_t v53 = v57 & (v52 - 1);
            int v55 = *(uint64_t ****)(v51 + 16 * v53);
            if (v55 == a2)
            {
              int v54 = (uint64_t ****)(v51 + 16 * v53);
              goto LABEL_70;
            }
          }
        }
        int v54 = (uint64_t ****)(v51 + 16 * v52);
LABEL_70:
        size_t v58 = (unint64_t *)v54[1];
        unint64_t v61 = *v58;
        uint64_t v60 = v58 + 2;
        size_t v59 = v61;
        if (v61 <= 0x7FFFFFFFFFFFFFF7)
        {
          if (v59 >= 0x17)
          {
            uint64_t v63 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v59 | 7) != 0x17) {
              uint64_t v63 = v59 | 7;
            }
            uint64_t v64 = v63 + 1;
            char v62 = operator new(v63 + 1);
            std::string::size_type v78 = v59;
            int64_t v79 = v64 | 0x8000000000000000;
            int v77 = v62;
          }
          else
          {
            HIBYTE(v79) = v59;
            char v62 = &v77;
            if (!v59) {
              goto LABEL_78;
            }
          }
          memmove(v62, v60, v59);
LABEL_78:
          *((unsigned char *)v62 + v59) = 0;
          if (v79 >= 0) {
            v65 = (const std::string::value_type *)&v77;
          }
          else {
            v65 = (const std::string::value_type *)v77;
          }
          if (v79 >= 0) {
            std::string::size_type v66 = HIBYTE(v79) & 0x7F;
          }
          else {
            std::string::size_type v66 = v78;
          }
          uint64_t v67 = std::string::append(&v80, v65, v66);
          std::string::size_type v68 = v67->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v68;
          v67->__r_.__value_.__l.__size_ = 0;
          v67->__r_.__value_.__r.__words[2] = 0;
          v67->__r_.__value_.__r.__words[0] = 0;
          char v69 = std::string::append(&__p, "' function");
          int64_t v70 = v69->__r_.__value_.__r.__words[2];
          long long __dst = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
          int64_t v84 = v70;
          v69->__r_.__value_.__l.__size_ = 0;
          v69->__r_.__value_.__r.__words[2] = 0;
          v69->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v79) < 0) {
            operator delete(v77);
          }
          if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v80.__r_.__value_.__l.__data_);
          }
          if (!v82[0])
          {
            __int16 v76 = 260;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
            sub_1CD4BC284((llvm::raw_ostream *)&v81, (llvm::raw_ostream *)&v87, 1, (llvm::Twine *)&__p);
          }
          v71 = (llvm::raw_ostream *)llvm::errs((llvm *)v69);
          v72 = (void *)*((void *)v71 + 4);
          if (*((void *)v71 + 3) - (void)v72 > 0x20uLL)
          {
            qmemcpy(v72, "  error opening file for writing!", 33);
            *((void *)v71 + 4) += 33;
          }
          else
          {
            v71 = llvm::raw_ostream::write(v71, "  error opening file for writing!", 0x21uLL);
          }
          v73 = (llvm::raw_ostream *)llvm::errs(v71);
          v74 = (unsigned char *)*((void *)v73 + 4);
          if (*((unsigned char **)v73 + 3) == v74)
          {
            llvm::raw_ostream::write(v73, "\n", 1uLL);
          }
          else
          {
            unsigned char *v74 = 10;
            ++*((void *)v73 + 4);
          }
          if (SHIBYTE(v84) < 0) {
            operator delete((void *)__dst);
          }
          llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v81);
          if (SHIBYTE(v86) < 0) {
            operator delete((void *)v85);
          }
          return 0;
        }
LABEL_106:
        abort();
      }
    }
    memmove(p_dst, v30, v29);
    goto LABEL_34;
  }
  return 0;
}

uint64_t sub_1CC0D6B18()
{
  return 1;
}

void sub_1CC0D6B20(void **this)
{
  *this = &unk_1F2607098;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }

  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1CC0D6B80(void **this)
{
  *this = &unk_1F2607098;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  llvm::Pass::~Pass((llvm::Pass *)this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC0D6BF4(void **this)
{
  *this = &unk_1F26071E8;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }

  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1CC0D6C54(void **this)
{
  *this = &unk_1F26071E8;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  llvm::Pass::~Pass((llvm::Pass *)this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC0D6CC8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  sub_1CB843600(a2, a2, (uint64_t)&llvm::RegionInfoPass::ID);
}

uint64_t sub_1CC0D6CE0(void *a1, uint64_t ***a2)
{
  int v4 = (uint64_t *)a1[1];
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::RegionInfoPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::RegionInfoPass::ID);
  if ((*(unsigned int (**)(void *, uint64_t ***, uint64_t))(*a1 + 144))(a1, a2, v8))
  {
    uint64_t v40 = v8 + 32;
    strcpy((char *)&v31, "Region Graph for '");
    v31.__r_.__value_.__s.__data_[19] = 0;
    HIDWORD(v31.__r_.__value_.__r.__words[2]) = 0;
    if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
    {
      size_t v19 = 0;
      HIBYTE(v37) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_24;
    }
    uint64_t v10 = ***a2;
    uint64_t v11 = *(void *)(v10 + 152);
    uint64_t v12 = *(unsigned int *)(v10 + 168);
    if (v12)
    {
      LODWORD(v13) = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      unsigned int v14 = (uint64_t ****)(v11 + 16 * v13);
      unint64_t v15 = *v14;
      if (*v14 == a2)
      {
LABEL_16:
        uint64_t v18 = (unint64_t *)v14[1];
        unint64_t v21 = *v18;
        uint64_t v20 = v18 + 2;
        size_t v19 = v21;
        if (v21 >= 0x7FFFFFFFFFFFFFF8) {
          abort();
        }
        if (v19 >= 0x17)
        {
          uint64_t v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17) {
            uint64_t v23 = v19 | 7;
          }
          uint64_t v24 = v23 + 1;
          p_dst = (void **)operator new(v23 + 1);
          std::string::size_type v36 = v19;
          int64_t v37 = v24 | 0x8000000000000000;
          long long __dst = p_dst;
        }
        else
        {
          HIBYTE(v37) = v19;
          p_dst = (void **)&__dst;
          if (!v19) {
            goto LABEL_24;
          }
        }
        memmove(p_dst, v20, v19);
LABEL_24:
        *((unsigned char *)p_dst + v19) = 0;
        if (v37 >= 0) {
          int v25 = (const std::string::value_type *)&__dst;
        }
        else {
          int v25 = (const std::string::value_type *)__dst;
        }
        if (v37 >= 0) {
          std::string::size_type v26 = HIBYTE(v37) & 0x7F;
        }
        else {
          std::string::size_type v26 = v36;
        }
        int v27 = std::string::append(&v31, v25, v26);
        std::string::size_type v28 = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        size_t v29 = std::string::append(&v33, "' function");
        std::string::size_type v30 = v29->__r_.__value_.__r.__words[2];
        long long v38 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        std::string::size_type v39 = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v37) < 0) {
          operator delete(__dst);
        }
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
        __int16 v34 = 260;
        v33.__r_.__value_.__r.__words[0] = (std::string::size_type)(a1 + 4);
        __int16 v32 = 260;
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
        sub_1CD4BCDF8((llvm::raw_ostream *)&v40, (llvm::Twine *)&v33, 0, (llvm::Twine *)&v31);
        if (SHIBYTE(v39) < 0) {
          operator delete((void *)v38);
        }
        return 0;
      }
      int v16 = 1;
      while (v15 != (uint64_t ***)-4096)
      {
        int v17 = v13 + v16++;
        uint64_t v13 = v17 & (v12 - 1);
        unint64_t v15 = *(uint64_t ****)(v11 + 16 * v13);
        if (v15 == a2)
        {
          unsigned int v14 = (uint64_t ****)(v11 + 16 * v13);
          goto LABEL_16;
        }
      }
    }
    unsigned int v14 = (uint64_t ****)(v11 + 16 * v12);
    goto LABEL_16;
  }
  return 0;
}

uint64_t sub_1CC0D6FD4()
{
  return 1;
}

void sub_1CC0D6FDC(void **this)
{
  *this = &unk_1F26071E8;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }

  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1CC0D703C(void **this)
{
  *this = &unk_1F26071E8;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  llvm::Pass::~Pass((llvm::Pass *)this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC0D70B0(unsigned char *a1, llvm::raw_ostream *a2, llvm::Twine *this, char a4, llvm::Twine *a5, uint64_t a6)
{
  if (*(char *)(a6 + 23) < 0) {
    uint64_t v11 = *(void *)(a6 + 8);
  }
  else {
    uint64_t v11 = *(unsigned __int8 *)(a6 + 23);
  }
  int v46 = 0;
  if (v11)
  {
    __int16 v41 = 260;
    uint64_t v39 = a6;
    *(void *)&long long v44 = llvm::sys::fs::openFile((unsigned __int8 *)&v39, &v46, 0, 2, 1, 438);
    *((void *)&v44 + 1) = v12;
    uint64_t v13 = std::generic_category();
    uint64_t v39 = 17;
    uint64_t v40 = v13;
    unsigned int v14 = (llvm *)(*(uint64_t (**)(void, void, uint64_t *))(**((void **)&v44 + 1) + 32))(*((void *)&v44 + 1), v44, &v39);
    if (v14
      || (unsigned int v14 = (llvm *)((uint64_t (*)(const std::error_category *, long long *, void))v40->equivalent_0)(v40, &v44, v39), v14))
    {
      uint64_t v20 = (llvm::raw_ostream *)llvm::errs(v14);
      unint64_t v21 = (void *)*((void *)v20 + 4);
      if (*((void *)v20 + 3) - (void)v21 > 0x17uLL)
      {
        qmemcpy(v21, "file exists, overwriting", 24);
        uint64_t v22 = (unsigned char *)(*((void *)v20 + 4) + 24);
        *((void *)v20 + 4) = v22;
      }
      else
      {
        uint64_t v20 = llvm::raw_ostream::write(v20, "file exists, overwriting", 0x18uLL);
        uint64_t v22 = (unsigned char *)*((void *)v20 + 4);
      }
      uint64_t v23 = (unsigned char *)*((void *)v20 + 3);
    }
    else
    {
      int v15 = v44;
      int v16 = (llvm::raw_ostream *)llvm::errs(v14);
      int v17 = (char *)*((void *)v16 + 4);
      unint64_t v18 = *((void *)v16 + 3) - (void)v17;
      if (v15)
      {
        if (v18 > 0x16)
        {
          qmemcpy(v17, "error writing into file", 23);
          size_t v19 = (unsigned char *)(*((void *)v16 + 4) + 23);
          *((void *)v16 + 4) = v19;
        }
        else
        {
          int v16 = llvm::raw_ostream::write(v16, "error writing into file", 0x17uLL);
          size_t v19 = (unsigned char *)*((void *)v16 + 4);
        }
        if (*((unsigned char **)v16 + 3) == v19)
        {
          llvm::raw_ostream::write(v16, "\n", 1uLL);
        }
        else
        {
          *size_t v19 = 10;
          ++*((void *)v16 + 4);
        }
        a1[23] = 0;
        *a1 = 0;
        return;
      }
      if (v18 > 0x21)
      {
        qmemcpy(v17, "writing to the newly created file ", 34);
        *((void *)v16 + 4) += 34;
      }
      else
      {
        int v16 = llvm::raw_ostream::write(v16, "writing to the newly created file ", 0x22uLL);
      }
      char v24 = *(unsigned char *)(a6 + 23);
      BOOL v25 = v24 < 0;
      if (v24 >= 0) {
        std::string::size_type v26 = (const char *)a6;
      }
      else {
        std::string::size_type v26 = *(const char **)a6;
      }
      size_t v27 = v24 & 0x7F;
      if (v25) {
        size_t v28 = *(void *)(a6 + 8);
      }
      else {
        size_t v28 = v27;
      }
      uint64_t v20 = llvm::raw_ostream::write(v16, v26, v28);
      uint64_t v23 = (unsigned char *)*((void *)v20 + 3);
      uint64_t v22 = (unsigned char *)*((void *)v20 + 4);
    }
    if (v23 == v22)
    {
      llvm::raw_ostream::write(v20, "\n", 1uLL);
    }
    else
    {
      *uint64_t v22 = 10;
      ++*((void *)v20 + 4);
    }
  }
  else
  {
    llvm::Twine::str(this, __p);
    __int16 v41 = 260;
    uint64_t v39 = (uint64_t)__p;
    llvm::createGraphFilename((llvm *)&v39, (const llvm::Twine *)&v46, (uint64_t)&v44);
    if (*(char *)(a6 + 23) < 0) {
      operator delete(*(void **)a6);
    }
    *(_OWORD *)a6 = v44;
    *(void *)(a6 + 16) = v45;
    HIBYTE(v45) = 0;
    LOBYTE(v44) = 0;
    if (v43 < 0) {
      operator delete(__p[0]);
    }
  }
  size_t v29 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v39, v46, 1, 0, 0);
  if (v46 != -1) {
    sub_1CD4BC284((llvm::raw_ostream *)&v39, a2, a4, a5);
  }
  std::string::size_type v30 = (llvm::raw_ostream *)llvm::errs(v29);
  uint64_t v31 = *((void *)v30 + 4);
  if ((unint64_t)(*((void *)v30 + 3) - v31) > 0x13)
  {
    *(_DWORD *)(v31 + 16) = 656434540;
    *(_OWORD *)uint64_t v31 = *(_OWORD *)"error opening file '";
    *((void *)v30 + 4) += 20;
  }
  else
  {
    std::string::size_type v30 = llvm::raw_ostream::write(v30, "error opening file '", 0x14uLL);
  }
  char v32 = *(unsigned char *)(a6 + 23);
  BOOL v33 = v32 < 0;
  if (v32 >= 0) {
    __int16 v34 = (const char *)a6;
  }
  else {
    __int16 v34 = *(const char **)a6;
  }
  size_t v35 = v32 & 0x7F;
  if (v33) {
    size_t v36 = *(void *)(a6 + 8);
  }
  else {
    size_t v36 = v35;
  }
  int64_t v37 = llvm::raw_ostream::write(v30, v34, v36);
  long long v38 = (void *)*((void *)v37 + 4);
  if (*((void *)v37 + 3) - (void)v38 > 0xEuLL)
  {
    qmemcpy(v38, "' for writing!\n", 15);
    *((void *)v37 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v37, "' for writing!\n", 0xFuLL);
  }
  a1[23] = 0;
  *a1 = 0;
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v39);
}

void sub_1CC0D7504(void **this)
{
  *this = &unk_1F2607338;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }

  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1CC0D7564(void **this)
{
  *this = &unk_1F2607338;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  llvm::Pass::~Pass((llvm::Pass *)this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC0D75D8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  sub_1CB843600(a2, a2, (uint64_t)&llvm::RegionInfoPass::ID);
}

uint64_t sub_1CC0D75F0(void *a1, uint64_t ***a2)
{
  int v4 = (uint64_t *)a1[1];
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::RegionInfoPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::RegionInfoPass::ID);
  if ((*(unsigned int (**)(void *, uint64_t ***, uint64_t))(*a1 + 144))(a1, a2, v8))
  {
    uint64_t v40 = v8 + 32;
    strcpy((char *)&v31, "Region Graph for '");
    v31.__r_.__value_.__s.__data_[19] = 0;
    HIDWORD(v31.__r_.__value_.__r.__words[2]) = 0;
    if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
    {
      size_t v19 = 0;
      HIBYTE(v37) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_24;
    }
    uint64_t v10 = ***a2;
    uint64_t v11 = *(void *)(v10 + 152);
    uint64_t v12 = *(unsigned int *)(v10 + 168);
    if (v12)
    {
      LODWORD(v13) = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      unsigned int v14 = (uint64_t ****)(v11 + 16 * v13);
      int v15 = *v14;
      if (*v14 == a2)
      {
LABEL_16:
        unint64_t v18 = (unint64_t *)v14[1];
        unint64_t v21 = *v18;
        uint64_t v20 = v18 + 2;
        size_t v19 = v21;
        if (v21 >= 0x7FFFFFFFFFFFFFF8) {
          abort();
        }
        if (v19 >= 0x17)
        {
          uint64_t v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17) {
            uint64_t v23 = v19 | 7;
          }
          uint64_t v24 = v23 + 1;
          p_dst = (void **)operator new(v23 + 1);
          std::string::size_type v36 = v19;
          int64_t v37 = v24 | 0x8000000000000000;
          long long __dst = p_dst;
        }
        else
        {
          HIBYTE(v37) = v19;
          p_dst = (void **)&__dst;
          if (!v19) {
            goto LABEL_24;
          }
        }
        memmove(p_dst, v20, v19);
LABEL_24:
        *((unsigned char *)p_dst + v19) = 0;
        if (v37 >= 0) {
          BOOL v25 = (const std::string::value_type *)&__dst;
        }
        else {
          BOOL v25 = (const std::string::value_type *)__dst;
        }
        if (v37 >= 0) {
          std::string::size_type v26 = HIBYTE(v37) & 0x7F;
        }
        else {
          std::string::size_type v26 = v36;
        }
        size_t v27 = std::string::append(&v31, v25, v26);
        std::string::size_type v28 = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        size_t v29 = std::string::append(&v33, "' function");
        std::string::size_type v30 = v29->__r_.__value_.__r.__words[2];
        long long v38 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        std::string::size_type v39 = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v37) < 0) {
          operator delete(__dst);
        }
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
        __int16 v34 = 260;
        v33.__r_.__value_.__r.__words[0] = (std::string::size_type)(a1 + 4);
        __int16 v32 = 260;
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
        sub_1CD4BCDF8((llvm::raw_ostream *)&v40, (llvm::Twine *)&v33, 1, (llvm::Twine *)&v31);
        if (SHIBYTE(v39) < 0) {
          operator delete((void *)v38);
        }
        return 0;
      }
      int v16 = 1;
      while (v15 != (uint64_t ***)-4096)
      {
        int v17 = v13 + v16++;
        uint64_t v13 = v17 & (v12 - 1);
        int v15 = *(uint64_t ****)(v11 + 16 * v13);
        if (v15 == a2)
        {
          unsigned int v14 = (uint64_t ****)(v11 + 16 * v13);
          goto LABEL_16;
        }
      }
    }
    unsigned int v14 = (uint64_t ****)(v11 + 16 * v12);
    goto LABEL_16;
  }
  return 0;
}

uint64_t sub_1CC0D78E4()
{
  return 1;
}

void sub_1CC0D78EC(void **this)
{
  *this = &unk_1F2607338;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }

  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1CC0D794C(void **this)
{
  *this = &unk_1F2607338;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  llvm::Pass::~Pass((llvm::Pass *)this);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC0D79C0()
{
  v4.n128_u64[0] = (unint64_t)"Show only simple regions in the graphviz viewer";
  v4.n128_u64[1] = 47;
  int v3 = 1;
  char v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCC7148, "only-simple-regions", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC7148, &dword_1CB82C000);
}

void sub_1CC0D7A50()
{
}

void sub_1CC0D7B40()
{
}

void sub_1CC0D7C30()
{
}

uint64_t sub_1CC0D7CD8(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 8 * v3;
      do
      {
        uint64_t v6 = *(void *)(*(void *)a1 + v4);
        if (v6) {
          BOOL v7 = v6 == -8;
        }
        else {
          BOOL v7 = 1;
        }
        if (!v7) {
          MEMORY[0x1D25D9CD0]();
        }
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

void *sub_1CC0D7D50(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n)
{
  unsigned int v5 = *((_DWORD *)a1 + 2);
  if (!v5)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    uint64_t v20 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v20) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v20[16] = 2;
    *(void *)a1 = v20;
    unsigned int v5 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  int v6 = 0;
  if (__n)
  {
    size_t v7 = __n;
    uint64_t v8 = a2;
    do
    {
      int v9 = *v8++;
      int v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  uint64_t v10 = *(void *)a1;
  unsigned int v11 = v5 - 1;
  uint64_t v12 = *(void *)a1 + 8 * v5 + 8;
  int v13 = -1;
  int v14 = 1;
  int v15 = v6;
  while (1)
  {
    uint64_t v16 = v15 & v11;
    int v17 = *(void **)(v10 + 8 * v16);
    if (!v17) {
      break;
    }
    if (v17 == (void *)-8)
    {
      if (v13 == -1) {
        int v13 = v15 & v11;
      }
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6 {
           && __n == *v17
    }
           && (!__n || !memcmp(a2, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_17;
    }
    int v15 = v14 + v16;
    ++v14;
  }
  uint64_t v18 = v13;
  if (v13 == -1)
  {
    uint64_t v18 = v16;
    uint64_t v16 = v16;
  }
  else
  {
    uint64_t v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  int v17 = *(void **)(v10 + 8 * v16);
LABEL_17:
  uint64_t i = (void *)(v10 + 8 * v16);
  if (v17)
  {
    if (v17 != (void *)-8) {
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  unint64_t v21 = (char *)operator new(__n + 17, (std::align_val_t)8uLL);
  uint64_t v22 = v21;
  uint64_t v23 = v21 + 16;
  if (__n) {
    memcpy(v21 + 16, a2, __n);
  }
  v23[__n] = 0;
  *(void *)uint64_t v22 = __n;
  v22[8] = 0;
  *uint64_t i = v22;
  ++*((_DWORD *)a1 + 3);
  for (uint64_t i = (void *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v16));
        !*i || *i == -8;
  return i;
}

void *sub_1CC0D7F54(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n)
{
  unsigned int v5 = *((_DWORD *)a1 + 2);
  if (!v5)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    BOOL v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v25[16] = 2;
    *(void *)a1 = v25;
    unsigned int v5 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  int v6 = 0;
  if (__n)
  {
    size_t v7 = __n;
    uint64_t v8 = a2;
    do
    {
      int v9 = *v8++;
      int v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  uint64_t v10 = *(void *)a1;
  unsigned int v11 = v5 - 1;
  uint64_t v12 = *(void *)a1 + 8 * v5 + 8;
  int v13 = -1;
  int v14 = 1;
  int v15 = v6;
  while (1)
  {
    uint64_t v16 = v15 & v11;
    int v17 = *(void **)(v10 + 8 * v16);
    if (!v17) {
      break;
    }
    if (v17 == (void *)-8)
    {
      if (v13 == -1) {
        int v13 = v15 & v11;
      }
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6 {
           && __n == *v17
    }
           && (!__n || !memcmp(a2, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_17;
    }
    int v15 = v14 + v16;
    ++v14;
  }
  uint64_t v18 = v13;
  if (v13 == -1)
  {
    uint64_t v18 = v16;
    uint64_t v16 = v16;
  }
  else
  {
    uint64_t v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  int v17 = *(void **)(v10 + 8 * v16);
LABEL_17:
  uint64_t i = (void *)(v10 + 8 * v16);
  if (v17)
  {
    if (v17 != (void *)-8) {
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  uint64_t v20 = operator new(__n + 9, (std::align_val_t)8uLL);
  unint64_t v21 = v20;
  uint64_t v22 = (char *)(v20 + 1);
  if (__n) {
    memcpy(v20 + 1, a2, __n);
  }
  v22[__n] = 0;
  *unint64_t v21 = __n;
  *uint64_t i = v21;
  ++*((_DWORD *)a1 + 3);
  for (uint64_t i = (void *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v16));
        !*i || *i == -8;
  return i;
}

uint64_t llvm::SCEV::getType(llvm::SCEV *this)
{
  while (2)
  {
    switch(*((_WORD *)this + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        char v1 = (char *)this + 40;
        return *(void *)v1;
      case 4:
        char v1 = (char *)this + 48;
        return *(void *)v1;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v3 = (llvm::SCEV **)*((void *)this + 4);
        goto LABEL_7;
      case 6:
        uint64_t v3 = (llvm::SCEV **)((char *)this + 40);
LABEL_7:
        this = *v3;
        continue;
      case 0xE:
        char v1 = (char *)*((void *)this - 1);
        return *(void *)v1;
      default:
        char v1 = (char *)*((void *)this + 4);
        return *(void *)v1;
    }
  }
}

uint64_t llvm::SCEVUnknown::isSizeOf(llvm::SCEVUnknown *this, llvm::Type **a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    BOOL v3 = *(unsigned char *)(v2 + 16) == 5;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3 || *(_WORD *)(v2 + 18) != 47) {
    return 0;
  }
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
  BOOL v5 = v4 && *(unsigned char *)(v4 + 16) == 5;
  if (!v5 || *(_WORD *)(v4 + 18) != 34) {
    return 0;
  }
  int v7 = *(_DWORD *)(v4 + 20);
  uint64_t v8 = *(void *)(v4 - 32 * (v7 & 0x7FFFFFF));
  unsigned int v9 = *(unsigned __int8 *)(v8 + 16);
  if (v8) {
    BOOL v10 = v9 == 16;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v11 = *(unsigned int *)(v8 + 32);
    if (v11 >= 0x41)
    {
      int v24 = 0;
      int64_t v25 = (unint64_t)(v11 + 63) >> 6;
      do
      {
        BOOL v16 = v25-- < 1;
        if (v16) {
          break;
        }
        unint64_t v26 = *(void *)(*(void *)(v8 + 24) + 8 * v25);
        v24 += __clz(v26);
      }
      while (!v26);
      uint64_t result = 0;
      int v27 = v11 | 0xFFFFFFC0;
      if ((v11 & 0x3F) == 0) {
        int v27 = 0;
      }
      if (v24 + v27 != v11) {
        return result;
      }
    }
    else if (*(void *)(v8 + 24))
    {
      return 0;
    }
  }
  else
  {
    if (v8) {
      BOOL v15 = v9 == 17;
    }
    else {
      BOOL v15 = 0;
    }
    if (v15)
    {
      uint64_t result = sub_1CB844168(v8, 0.0);
      if (!result) {
        return result;
      }
      int v7 = *(_DWORD *)(v4 + 20);
    }
    else
    {
      BOOL v16 = v9 > 0x14;
      int v17 = (1 << v9) & 0x1C2000;
      if (v16 || v17 == 0) {
        return 0;
      }
    }
  }
  if ((v7 & 0x7FFFFFF) != 2) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v13 = *(void *)(v4 - 32);
  if (!v13 || *(unsigned char *)(v13 + 16) != 16) {
    return result;
  }
  uint64_t v14 = *(unsigned int *)(v13 + 32);
  if (v14 <= 0x40)
  {
    if (*(void *)(v13 + 24) == 1)
    {
LABEL_43:
      uint64_t v23 = 24;
      if (*(unsigned char *)(v4 + 16) == 62) {
        uint64_t v23 = 64;
      }
      *a2 = *(llvm::Type **)(v4 + v23);
      return 1;
    }
    return 0;
  }
  int v19 = 0;
  int64_t v20 = (unint64_t)(v14 + 63) >> 6;
  do
  {
    BOOL v16 = v20-- < 1;
    if (v16) {
      break;
    }
    unint64_t v21 = *(void *)(*(void *)(v13 + 24) + 8 * v20);
    v19 += __clz(v21);
  }
  while (!v21);
  uint64_t result = 0;
  int v22 = v14 | 0xFFFFFFC0;
  if ((v14 & 0x3F) == 0) {
    int v22 = 0;
  }
  if (v19 + v22 == v14 - 1) {
    goto LABEL_43;
  }
  return result;
}

uint64_t llvm::SCEVUnknown::isAlignOf(llvm::SCEVUnknown *this, llvm::Type **a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    BOOL v3 = *(unsigned char *)(v2 + 16) == 5;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3 || *(_WORD *)(v2 + 18) != 47) {
    return 0;
  }
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
  BOOL v5 = v4 && *(unsigned char *)(v4 + 16) == 5;
  if (!v5 || *(_WORD *)(v4 + 18) != 34) {
    return 0;
  }
  uint64_t v7 = *(void *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
  unsigned int v8 = *(unsigned __int8 *)(v7 + 16);
  if (v7) {
    BOOL v9 = v8 == 16;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    uint64_t v10 = *(unsigned int *)(v7 + 32);
    if (v10 >= 0x41)
    {
      int v32 = 0;
      int64_t v33 = (unint64_t)(v10 + 63) >> 6;
      do
      {
        BOOL v22 = v33-- < 1;
        if (v22) {
          break;
        }
        unint64_t v34 = *(void *)(*(void *)(v7 + 24) + 8 * v33);
        v32 += __clz(v34);
      }
      while (!v34);
      uint64_t result = 0;
      int v35 = v10 | 0xFFFFFFC0;
      if ((v10 & 0x3F) == 0) {
        int v35 = 0;
      }
      if (v32 + v35 != v10) {
        return result;
      }
    }
    else if (*(void *)(v7 + 24))
    {
      return 0;
    }
    goto LABEL_20;
  }
  if (v7) {
    BOOL v21 = v8 == 17;
  }
  else {
    BOOL v21 = 0;
  }
  if (!v21)
  {
    BOOL v22 = v8 > 0x14;
    int v23 = (1 << v8) & 0x1C2000;
    if (v22 || v23 == 0) {
      return 0;
    }
LABEL_20:
    uint64_t v11 = (uint64_t *)(v4 + 24);
    goto LABEL_21;
  }
  if ((sub_1CB844168(v7, 0.0) & 1) == 0) {
    return 0;
  }
  if (*(unsigned char *)(v4 + 16) == 62) {
    uint64_t v11 = (uint64_t *)(v4 + 64);
  }
  else {
    uint64_t v11 = (uint64_t *)(v4 + 24);
  }
LABEL_21:
  uint64_t v12 = *v11;
  if (v12) {
    BOOL v13 = (*(_DWORD *)(v12 + 8) & 0x2FF) == 16;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13 || (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) != 3) {
    return 0;
  }
  uint64_t v14 = *(void *)(v4 - 64);
  int v15 = *(unsigned __int8 *)(v14 + 16);
  if (v14 && v15 == 16)
  {
    uint64_t v16 = *(unsigned int *)(v14 + 32);
    if (v16 >= 0x41)
    {
      int v36 = 0;
      int64_t v37 = (unint64_t)(v16 + 63) >> 6;
      do
      {
        BOOL v22 = v37-- < 1;
        if (v22) {
          break;
        }
        unint64_t v38 = *(void *)(*(void *)(v14 + 24) + 8 * v37);
        v36 += __clz(v38);
      }
      while (!v38);
      uint64_t result = 0;
      int v39 = v16 | 0xFFFFFFC0;
      if ((v16 & 0x3F) == 0) {
        int v39 = 0;
      }
      if (v36 + v39 != v16) {
        return result;
      }
    }
    else if (*(void *)(v14 + 24))
    {
      return 0;
    }
  }
  else
  {
    if (v14 && v15 == 17)
    {
      uint64_t v40 = v12;
      uint64_t result = sub_1CB844168(v14, 0.0);
      if (!result) {
        return result;
      }
      uint64_t v17 = *(_DWORD *)(v4 + 20) & 0x7FFFFFF;
      uint64_t v12 = v40;
      goto LABEL_32;
    }
    unsigned __int8 v26 = v15 - 13;
    if (v26 >= 8u || ((0xE1u >> v26) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v17 = 3;
LABEL_32:
  uint64_t v18 = *(void *)(v4 - 32 * v17 + 64);
  if (v18) {
    BOOL v19 = *(unsigned char *)(v18 + 16) == 16;
  }
  else {
    BOOL v19 = 0;
  }
  if (!v19) {
    return 0;
  }
  uint64_t v20 = *(unsigned int *)(v18 + 32);
  if (v20 <= 0x40)
  {
    if (*(void *)(v18 + 24) == 1) {
      goto LABEL_66;
    }
    return 0;
  }
  int v27 = 0;
  int64_t v28 = (unint64_t)(v20 + 63) >> 6;
  do
  {
    BOOL v22 = v28-- < 1;
    if (v22) {
      break;
    }
    unint64_t v29 = *(void *)(*(void *)(v18 + 24) + 8 * v28);
    v27 += __clz(v29);
  }
  while (!v29);
  uint64_t result = 0;
  int v30 = v20 | 0xFFFFFFC0;
  if ((v20 & 0x3F) == 0) {
    int v30 = 0;
  }
  if (v27 + v30 == v20 - 1)
  {
LABEL_66:
    if (*(_DWORD *)(v12 + 12) == 2)
    {
      std::string v31 = *(void **)(v12 + 16);
      if (*(_DWORD *)(*v31 + 8) == 269)
      {
        *a2 = (llvm::Type *)v31[1];
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t llvm::SCEVUnknown::isOffsetOf(llvm::SCEVUnknown *this, llvm::Type **a2, llvm::Constant **a3)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    BOOL v4 = *(unsigned char *)(v3 + 16) == 5;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4 || *(_WORD *)(v3 + 18) != 47) {
    return 0;
  }
  uint64_t v5 = *(void *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF));
  BOOL v6 = v5 && *(unsigned char *)(v5 + 16) == 5;
  if (!v6 || *(_WORD *)(v5 + 18) != 34 || (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) != 3) {
    return 0;
  }
  uint64_t v9 = *(void *)(v5 - 96);
  int v10 = *(unsigned __int8 *)(v9 + 16);
  if (v9) {
    BOOL v11 = v10 == 16;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    uint64_t v12 = *(unsigned int *)(v9 + 32);
    if (v12 >= 0x41)
    {
      int v27 = 0;
      int64_t v28 = (unint64_t)(v12 + 63) >> 6;
      do
      {
        BOOL v24 = v28-- < 1;
        if (v24) {
          break;
        }
        unint64_t v29 = *(void *)(*(void *)(v9 + 24) + 8 * v28);
        v27 += __clz(v29);
      }
      while (!v29);
      uint64_t result = 0;
      int v30 = v12 | 0xFFFFFFC0;
      if ((v12 & 0x3F) == 0) {
        int v30 = 0;
      }
      if (v27 + v30 != v12) {
        return result;
      }
    }
    else if (*(void *)(v9 + 24))
    {
      return 0;
    }
  }
  else
  {
    if (v9) {
      BOOL v21 = v10 == 17;
    }
    else {
      BOOL v21 = 0;
    }
    if (v21)
    {
      uint64_t result = sub_1CB844168(v9, 0.0);
      if (!result) {
        return result;
      }
      uint64_t v13 = *(_DWORD *)(v5 + 20) & 0x7FFFFFF;
      goto LABEL_22;
    }
    unsigned __int8 v22 = v10 - 13;
    if (v22 >= 8u || ((0xE1u >> v22) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v13 = 3;
LABEL_22:
  uint64_t v14 = *(void *)(v5 - 32 * v13 + 32);
  unsigned int v15 = *(unsigned __int8 *)(v14 + 16);
  if (v14) {
    BOOL v16 = v15 == 16;
  }
  else {
    BOOL v16 = 0;
  }
  if (!v16)
  {
    if (v14) {
      BOOL v23 = v15 == 17;
    }
    else {
      BOOL v23 = 0;
    }
    if (!v23)
    {
      BOOL v24 = v15 > 0x14;
      int v25 = (1 << v15) & 0x1C2000;
      if (v24 || v25 == 0) {
        return 0;
      }
LABEL_29:
      uint64_t v18 = 24;
      if (*(unsigned char *)(v5 + 16) == 62) {
        uint64_t v18 = 64;
      }
      BOOL v19 = *(llvm::Type **)(v5 + v18);
      if ((*((_DWORD *)v19 + 2) & 0xFE) == 0x10)
      {
        *a2 = v19;
        *a3 = *(llvm::Constant **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) + 64);
        return 1;
      }
      return 0;
    }
    if (sub_1CB844168(v14, 0.0)) {
      goto LABEL_29;
    }
    return 0;
  }
  uint64_t v17 = *(unsigned int *)(v14 + 32);
  if (v17 < 0x41)
  {
    if (!*(void *)(v14 + 24)) {
      goto LABEL_29;
    }
    return 0;
  }
  int v31 = 0;
  int64_t v32 = (unint64_t)(v17 + 63) >> 6;
  do
  {
    BOOL v24 = v32-- < 1;
    if (v24) {
      break;
    }
    unint64_t v33 = *(void *)(*(void *)(v14 + 24) + 8 * v32);
    v31 += __clz(v33);
  }
  while (!v33);
  uint64_t result = 0;
  int v34 = v17 | 0xFFFFFFC0;
  if ((v17 & 0x3F) == 0) {
    int v34 = 0;
  }
  if (v31 + v34 == v17) {
    goto LABEL_29;
  }
  return result;
}

BOOL llvm::SCEV::isZero(llvm::SCEV *this)
{
  BOOL result = 0;
  if (this && !*((_WORD *)this + 12))
  {
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = *(unsigned int *)(v3 + 32);
    if (v4 > 0x40)
    {
      int v6 = 0;
      int64_t v7 = (unint64_t)(v4 + 63) >> 6;
      do
      {
        if (v7-- < 1) {
          break;
        }
        unint64_t v9 = *(void *)(*(void *)(v3 + 24) + 8 * v7);
        v6 += __clz(v9);
      }
      while (!v9);
      int v10 = v4 | 0xFFFFFFC0;
      if ((v4 & 0x3F) == 0) {
        int v10 = 0;
      }
      return v6 + v10 == v4;
    }
    else
    {
      return *(void *)(v3 + 24) == 0;
    }
  }
  return result;
}

BOOL llvm::SCEV::isOne(llvm::SCEV *this)
{
  BOOL result = 0;
  if (this && !*((_WORD *)this + 12))
  {
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = *(unsigned int *)(v3 + 32);
    if (v4 > 0x40)
    {
      int v6 = 0;
      int64_t v7 = (unint64_t)(v4 + 63) >> 6;
      do
      {
        if (v7-- < 1) {
          break;
        }
        unint64_t v9 = *(void *)(*(void *)(v3 + 24) + 8 * v7);
        v6 += __clz(v9);
      }
      while (!v9);
      int v10 = v4 | 0xFFFFFFC0;
      if ((v4 & 0x3F) == 0) {
        int v10 = 0;
      }
      return v6 + v10 == v4 - 1;
    }
    else
    {
      return *(void *)(v3 + 24) == 1;
    }
  }
  return result;
}

BOOL llvm::SCEV::isAllOnesValue(llvm::SCEV *this)
{
  BOOL result = 0;
  if (this && !*((_WORD *)this + 12))
  {
    uint64_t v3 = *((void *)this + 4);
    unsigned int v4 = *(_DWORD *)(v3 + 32);
    if (v4)
    {
      uint64_t v5 = (llvm::APInt *)(v3 + 24);
      if (v4 > 0x40) {
        return llvm::APInt::countTrailingOnesSlowCase(v5) == v4;
      }
      else {
        return *(void *)v5 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t llvm::SCEV::isNonConstantNegative(llvm::SCEV *this)
{
  uint64_t result = 0;
  if (this && *((_WORD *)this + 12) == 5)
  {
    uint64_t v3 = **((void **)this + 4);
    if (v3) {
      BOOL v4 = *(unsigned __int16 *)(v3 + 24) == 0;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4)
    {
      uint64_t v5 = *(void *)(v3 + 32);
      int v6 = (void *)(v5 + 24);
      unsigned int v7 = *(_DWORD *)(v5 + 32);
      unsigned int v8 = v7 - 1;
      if (v7 >= 0x41) {
        int v6 = (void *)(*v6 + 8 * (v8 >> 6));
      }
      return (*v6 >> v8) & 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::SCEVCouldNotCompute::SCEVCouldNotCompute(uint64_t this)
{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 15;
  *(_WORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 15;
  *(_WORD *)(this + 28) = 0;
  return this;
}

BOOL llvm::SCEVCouldNotCompute::classof(llvm::SCEVCouldNotCompute *this, const llvm::SCEV *a2)
{
  return *((unsigned __int16 *)this + 12) == 15;
}

unint64_t llvm::ScalarEvolution::getConstant(llvm::ScalarEvolution *this, llvm::ConstantInt *a2)
{
  v27[16] = *MEMORY[0x1E4F143B8];
  *(_DWORD *)BOOL v24 = 0;
  *(void *)&v24[4] = a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v23 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v23 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v23;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  unint64_t v4 = 0x9DDFEA08EB382D69 * (*(void *)v24 ^ qword_1EBCBE580 ^ __ROR8__(*(void *)&v24[4] + 12, 12));
  unint64_t v5 = __ROR8__(*(void *)&v24[4] + 12, 12) ^ (v4 >> 47);
  uint64_t v6 = *((void *)this + 104)
     + 8
     * ((*((_DWORD *)this + 210) - 1) & ((-348639895
                                        * ((((0x9DDFEA08EB382D69 * (v5 ^ v4)) >> 32) >> 15) ^ (-348639895 * (v5 ^ v4)))) ^ *(_DWORD *)&v24[4]));
  unint64_t v7 = *(void *)v6;
  int v25 = v27;
  uint64_t v26 = 0x2000000000;
  if (v7) {
    BOOL v8 = (v7 & 1) == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    while (*(void *)(v7 + 16) != 3 || memcmp(v24, *(const void **)(v7 + 8), 0xCuLL))
    {
      LODWORD(v26) = 0;
      unint64_t v7 = *(void *)v7;
      if (v7) {
        BOOL v9 = (v7 & 1) == 0;
      }
      else {
        BOOL v9 = 0;
      }
      if (!v9) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    *((void *)this + 118) += 40;
    uint64_t v10 = *((void *)this + 108);
    if (((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v10 + 40 > *((void *)this + 109) - v10)
    {
      unsigned int v20 = *((_DWORD *)this + 222) >> 7;
      if (v20 >= 0x1E) {
        LOBYTE(v20) = 30;
      }
      uint64_t v21 = 4096 << v20;
      unint64_t v7 = (unint64_t)operator new(4096 << v20, (std::align_val_t)8uLL);
      unsigned int v22 = *((_DWORD *)this + 222);
      if (v22 >= *((_DWORD *)this + 223)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*((void *)this + 110) + 8 * v22) = v7;
      ++*((_DWORD *)this + 222);
      *((void *)this + 109) = v7 + v21;
    }
    else
    {
      unint64_t v7 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 108) = v7 + 40;
    uint64_t v11 = sub_1CB906F34((uint64_t *)this + 108, 12, 2);
    uint64_t v12 = (int *)v24;
    uint64_t v13 = 12;
    uint64_t v14 = (_DWORD *)v11;
    do
    {
      int v15 = *v12++;
      *v14++ = v15;
      v13 -= 4;
    }
    while (v13);
    *(void *)unint64_t v7 = 0;
    *(void *)(v7 + 8) = v11;
    *(void *)(v7 + 16) = 3;
    *(_DWORD *)(v7 + 24) = 0x10000;
    *(_WORD *)(v7 + 28) = 0;
    *(void *)(v7 + 32) = a2;
    unsigned int v16 = *((_DWORD *)this + 211) + 1;
    int v17 = *((_DWORD *)this + 210);
    if (v16 > 2 * v17)
    {
      llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v17, (uint64_t)off_1F2607658);
      int v25 = v27;
      uint64_t v26 = 0x2000000000;
      uint64_t v6 = *((void *)this + 104)
         + 8
         * ((*((_DWORD *)this + 210) - 1) & sub_1CC13A6B8(*(void **)(v7 + 8), *(void *)(v7 + 8) + 4 * *(void *)(v7 + 16)));
      if (v25 != v27) {
        free(v25);
      }
      unsigned int v16 = *((_DWORD *)this + 211) + 1;
    }
    *((_DWORD *)this + 211) = v16;
    uint64_t v18 = *(void *)v6;
    if (!*(void *)v6) {
      uint64_t v18 = v6 | 1;
    }
    *(void *)unint64_t v7 = v18;
    *(void *)uint64_t v6 = v7;
  }
  return v7;
}

unint64_t llvm::ScalarEvolution::getConstant(llvm::ConstantInt ****this, const llvm::APInt *a2, const llvm::APInt *a3)
{
  unint64_t v4 = (llvm::ConstantInt *)llvm::ConstantInt::get(***this, a2, a3);

  return llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)this, v4);
}

unint64_t llvm::ScalarEvolution::getConstant(llvm::ScalarEvolution *this, llvm::Type *a2, unint64_t a3, const llvm::APInt *a4)
{
  uint64_t v6 = a2;
  unsigned int v8 = *((_DWORD *)a2 + 2);
  if (v8 != 13)
  {
    uint64_t v9 = *(void *)(*(void *)this + 40);
    if ((v8 & 0xFE) == 0x12) {
      unsigned int v8 = *(_DWORD *)(**((void **)a2 + 2) + 8);
    }
    uint64_t v10 = *(void *)(v9 + 504);
    if (v8 < 0x100) {
      goto LABEL_13;
    }
    unsigned int v11 = v8 >> 8;
    unint64_t v12 = *(unsigned int *)(v9 + 512);
    uint64_t v13 = v10;
    if (v12)
    {
      uint64_t v13 = v10;
      unint64_t v14 = v12;
      do
      {
        unint64_t v15 = v14 >> 1;
        uint64_t v16 = v13 + 16 * (v14 >> 1);
        unsigned int v17 = *(_DWORD *)(v16 + 8);
        uint64_t v18 = v16 + 16;
        v14 += ~(v14 >> 1);
        if (v17 < v11) {
          uint64_t v13 = v18;
        }
        else {
          unint64_t v14 = v15;
        }
      }
      while (v14);
    }
    if (v13 == v10 + 16 * v12 || *(_DWORD *)(v13 + 8) != v11) {
LABEL_13:
    }
      uint64_t v13 = v10;
    BOOL v19 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)a2, (llvm::LLVMContext *)*(unsigned int *)(v13 + 12));
    if ((*((_DWORD *)v6 + 2) & 0xFE) == 0x12) {
      llvm::VectorType::get(v19, (llvm::Type *)(*((unsigned int *)v6 + 8) | ((unint64_t)(*((_DWORD *)v6 + 2) == 19) << 32)));
    }
    uint64_t v6 = v19;
  }
  unsigned int v20 = (llvm::ConstantInt *)llvm::ConstantInt::get(v6, a3, a4);

  return llvm::ScalarEvolution::getConstant(this, v20);
}

double llvm::ScalarEvolution::getEffectiveSCEVType(llvm::ScalarEvolution *this, llvm::Type *a2)
{
  if (*((unsigned char *)a2 + 8) != 13) {
    return llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(void *)(*(void *)this + 40) + 272), a2);
  }
  return result;
}

uint64_t llvm::SCEVCastExpr::SCEVCastExpr(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6)
{
  int v21 = 16;
  uint64_t v20 = 1;
  uint64_t v12 = *(unsigned __int16 *)(a5 + 26);
  int v17 = 16;
  uint64_t v16 = v12;
  llvm::APInt::uadd_sat((llvm::APInt *)&v20, (const llvm::APInt *)&v16, (uint64_t)&v18);
  __int16 v13 = (__int16)v18;
  if (v19 >= 0x41)
  {
    uint64_t v14 = *v18;
    MEMORY[0x1D25D9CB0]();
    __int16 v13 = v14;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 26) = v13;
  *(_WORD *)(a1 + 28) = 0;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  return a1;
}

{
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;

  int v21 = 16;
  uint64_t v20 = 1;
  uint64_t v12 = *(unsigned __int16 *)(a5 + 26);
  int v17 = 16;
  uint64_t v16 = v12;
  llvm::APInt::uadd_sat((llvm::APInt *)&v20, (const llvm::APInt *)&v16, (uint64_t)&v18);
  __int16 v13 = (__int16)v18;
  if (v19 >= 0x41)
  {
    uint64_t v14 = *v18;
    MEMORY[0x1D25D9CB0]();
    __int16 v13 = v14;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 26) = v13;
  *(_WORD *)(a1 + 28) = 0;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  return a1;
}

uint64_t llvm::SCEVPtrToIntExpr::SCEVPtrToIntExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v19 = 16;
  uint64_t v18 = 1;
  uint64_t v10 = *(unsigned __int16 *)(a4 + 26);
  int v15 = 16;
  uint64_t v14 = v10;
  llvm::APInt::uadd_sat((llvm::APInt *)&v18, (const llvm::APInt *)&v14, (uint64_t)&v16);
  __int16 v11 = (__int16)v16;
  if (v17 >= 0x41)
  {
    uint64_t v12 = *v16;
    MEMORY[0x1D25D9CB0]();
    __int16 v11 = v12;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 13;
  *(_WORD *)(a1 + 26) = v11;
  *(_WORD *)(a1 + 28) = 0;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a5;
  return a1;
}

{
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;

  int v19 = 16;
  uint64_t v18 = 1;
  uint64_t v10 = *(unsigned __int16 *)(a4 + 26);
  int v15 = 16;
  uint64_t v14 = v10;
  llvm::APInt::uadd_sat((llvm::APInt *)&v18, (const llvm::APInt *)&v14, (uint64_t)&v16);
  __int16 v11 = (__int16)v16;
  if (v17 >= 0x41)
  {
    uint64_t v12 = *v16;
    MEMORY[0x1D25D9CB0]();
    __int16 v11 = v12;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 13;
  *(_WORD *)(a1 + 26) = v11;
  *(_WORD *)(a1 + 28) = 0;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a5;
  return a1;
}

uint64_t llvm::SCEVIntegralCastExpr::SCEVIntegralCastExpr(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6)
{
  int v21 = 16;
  uint64_t v20 = 1;
  uint64_t v12 = *(unsigned __int16 *)(a5 + 26);
  int v17 = 16;
  uint64_t v16 = v12;
  llvm::APInt::uadd_sat((llvm::APInt *)&v20, (const llvm::APInt *)&v16, (uint64_t)&v18);
  __int16 v13 = (__int16)v18;
  if (v19 >= 0x41)
  {
    uint64_t v14 = *v18;
    MEMORY[0x1D25D9CB0]();
    __int16 v13 = v14;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 26) = v13;
  *(_WORD *)(a1 + 28) = 0;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  return a1;
}

{
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;

  int v21 = 16;
  uint64_t v20 = 1;
  uint64_t v12 = *(unsigned __int16 *)(a5 + 26);
  int v17 = 16;
  uint64_t v16 = v12;
  llvm::APInt::uadd_sat((llvm::APInt *)&v20, (const llvm::APInt *)&v16, (uint64_t)&v18);
  __int16 v13 = (__int16)v18;
  if (v19 >= 0x41)
  {
    uint64_t v14 = *v18;
    MEMORY[0x1D25D9CB0]();
    __int16 v13 = v14;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 26) = v13;
  *(_WORD *)(a1 + 28) = 0;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  return a1;
}

uint64_t llvm::SCEVTruncateExpr::SCEVTruncateExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v19 = 16;
  uint64_t v18 = 1;
  uint64_t v10 = *(unsigned __int16 *)(a4 + 26);
  int v15 = 16;
  uint64_t v14 = v10;
  llvm::APInt::uadd_sat((llvm::APInt *)&v18, (const llvm::APInt *)&v14, (uint64_t)&v16);
  __int16 v11 = (__int16)v16;
  if (v17 >= 0x41)
  {
    uint64_t v12 = *v16;
    MEMORY[0x1D25D9CB0]();
    __int16 v11 = v12;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 1;
  *(_WORD *)(a1 + 26) = v11;
  *(_WORD *)(a1 + 28) = 0;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a5;
  return a1;
}

{
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;

  int v19 = 16;
  uint64_t v18 = 1;
  uint64_t v10 = *(unsigned __int16 *)(a4 + 26);
  int v15 = 16;
  uint64_t v14 = v10;
  llvm::APInt::uadd_sat((llvm::APInt *)&v18, (const llvm::APInt *)&v14, (uint64_t)&v16);
  __int16 v11 = (__int16)v16;
  if (v17 >= 0x41)
  {
    uint64_t v12 = *v16;
    MEMORY[0x1D25D9CB0]();
    __int16 v11 = v12;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 1;
  *(_WORD *)(a1 + 26) = v11;
  *(_WORD *)(a1 + 28) = 0;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a5;
  return a1;
}

uint64_t llvm::SCEVZeroExtendExpr::SCEVZeroExtendExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v19 = 16;
  uint64_t v18 = 1;
  uint64_t v10 = *(unsigned __int16 *)(a4 + 26);
  int v15 = 16;
  uint64_t v14 = v10;
  llvm::APInt::uadd_sat((llvm::APInt *)&v18, (const llvm::APInt *)&v14, (uint64_t)&v16);
  __int16 v11 = (__int16)v16;
  if (v17 >= 0x41)
  {
    uint64_t v12 = *v16;
    MEMORY[0x1D25D9CB0]();
    __int16 v11 = v12;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 2;
  *(_WORD *)(a1 + 26) = v11;
  *(_WORD *)(a1 + 28) = 0;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a5;
  return a1;
}

{
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;

  int v19 = 16;
  uint64_t v18 = 1;
  uint64_t v10 = *(unsigned __int16 *)(a4 + 26);
  int v15 = 16;
  uint64_t v14 = v10;
  llvm::APInt::uadd_sat((llvm::APInt *)&v18, (const llvm::APInt *)&v14, (uint64_t)&v16);
  __int16 v11 = (__int16)v16;
  if (v17 >= 0x41)
  {
    uint64_t v12 = *v16;
    MEMORY[0x1D25D9CB0]();
    __int16 v11 = v12;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 2;
  *(_WORD *)(a1 + 26) = v11;
  *(_WORD *)(a1 + 28) = 0;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a5;
  return a1;
}

uint64_t llvm::SCEVSignExtendExpr::SCEVSignExtendExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v19 = 16;
  uint64_t v18 = 1;
  uint64_t v10 = *(unsigned __int16 *)(a4 + 26);
  int v15 = 16;
  uint64_t v14 = v10;
  llvm::APInt::uadd_sat((llvm::APInt *)&v18, (const llvm::APInt *)&v14, (uint64_t)&v16);
  __int16 v11 = (__int16)v16;
  if (v17 >= 0x41)
  {
    uint64_t v12 = *v16;
    MEMORY[0x1D25D9CB0]();
    __int16 v11 = v12;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 3;
  *(_WORD *)(a1 + 26) = v11;
  *(_WORD *)(a1 + 28) = 0;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a5;
  return a1;
}

{
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;

  int v19 = 16;
  uint64_t v18 = 1;
  uint64_t v10 = *(unsigned __int16 *)(a4 + 26);
  int v15 = 16;
  uint64_t v14 = v10;
  llvm::APInt::uadd_sat((llvm::APInt *)&v18, (const llvm::APInt *)&v14, (uint64_t)&v16);
  __int16 v11 = (__int16)v16;
  if (v17 >= 0x41)
  {
    uint64_t v12 = *v16;
    MEMORY[0x1D25D9CB0]();
    __int16 v11 = v12;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 3;
  *(_WORD *)(a1 + 26) = v11;
  *(_WORD *)(a1 + 28) = 0;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a5;
  return a1;
}

BOOL llvm::SCEVUnknown::deleted(llvm::SCEVUnknown *this)
{
  uint64_t v2 = (int32x2_t *)*((void *)this + 8);
  uint64_t v17 = (uint64_t)this + 32;
  llvm::ScalarEvolution::forgetMemoizedResults(v2, &v17, 1);
  BOOL result = llvm::FoldingSetBase::RemoveNode(*((void *)this + 8) + 832, (void *)this + 4);
  uint64_t v4 = *((void *)this + 3);
  if (v4)
  {
    if ((v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unint64_t v5 = *((void *)this + 1) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v5 = *((void *)this + 2);
      uint64_t v6 = (unint64_t *)*((void *)this + 2);
      if (v6)
      {
        *uint64_t v6 = *v6 & 7 | v5;
      }
      else
      {
        uint64_t v7 = *((void *)this + 3);
        unsigned int v8 = ***(int32x2_t ****)v7;
        unint64_t v9 = (unint64_t)v8[303];
        if (v9 <= v5)
        {
          uint64_t v10 = v8[305].u32[0];
          if (v9 + 16 * v10 > v5)
          {
            unsigned int v11 = v10 - 1;
            LODWORD(v12) = v11 & ((v7 >> 4) ^ (v7 >> 9));
            __int16 v13 = (uint64_t *)(v9 + 16 * v12);
            uint64_t v14 = *v13;
            if (v7 == *v13)
            {
LABEL_11:
              *__int16 v13 = -8192;
              v8[304] = vadd_s32(v8[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v7 = *((void *)this + 3);
            }
            else
            {
              int v15 = 1;
              while (v14 != -4096)
              {
                int v16 = v12 + v15++;
                uint64_t v12 = v16 & v11;
                uint64_t v14 = *(void *)(v9 + 16 * v12);
                if (v7 == v14)
                {
                  __int16 v13 = (uint64_t *)(v9 + 16 * v12);
                  goto LABEL_11;
                }
              }
            }
            *(unsigned char *)(v7 + 17) &= ~1u;
          }
        }
      }
    }
    *((void *)this + 3) = 0;
  }
  return result;
}

void llvm::ScalarEvolution::forgetMemoizedResults(int32x2_t *this, uint64_t *a2, uint64_t a3)
{
  v113[8] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unint64_t *)v110;
  v106 = v110;
  v107 = v110;
  uint64_t v108 = 8;
  int v109 = 0;
  if (a3)
  {
    unsigned int v6 = 8;
    uint64_t v7 = (unint64_t *)v110;
    unsigned int v8 = &a2[a3];
    while (1)
    {
      unint64_t v9 = *a2;
      uint64_t v10 = HIDWORD(v108);
      if (v7 != v4) {
        break;
      }
      if (HIDWORD(v108))
      {
        unsigned int v11 = 0;
        uint64_t v12 = 8 * HIDWORD(v108);
        __int16 v13 = v4;
        while (*v13 != v9)
        {
          if (*v13 == -2) {
            unsigned int v11 = v13;
          }
          ++v13;
          v12 -= 8;
          if (!v12)
          {
            if (!v11) {
              goto LABEL_11;
            }
            unint64_t *v11 = v9;
            --v109;
            goto LABEL_34;
          }
        }
        goto LABEL_34;
      }
LABEL_11:
      if (HIDWORD(v108) >= v6) {
        break;
      }
      ++HIDWORD(v108);
      v4[v10] = v9;
LABEL_34:
      uint64_t v4 = (unint64_t *)v106;
      uint64_t v7 = (unint64_t *)v107;
      if (++a2 == v8)
      {
        unsigned int v24 = v108;
        unsigned int v23 = HIDWORD(v108);
        goto LABEL_43;
      }
    }
    if (3 * v6 <= 4 * (HIDWORD(v108) - v109))
    {
      if (v6 >= 0x40) {
        v6 *= 2;
      }
      else {
        unsigned int v6 = 128;
      }
    }
    else if (v6 - HIDWORD(v108) >= v6 >> 3)
    {
      goto LABEL_15;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v106, v6);
    unsigned int v6 = v108;
    uint64_t v7 = (unint64_t *)v107;
LABEL_15:
    unsigned int v14 = v6 - 1;
    unsigned int v15 = (v6 - 1) & ((v9 >> 4) ^ (v9 >> 9));
    int v16 = &v7[v15];
    unint64_t v17 = *v16;
    if (*v16 == -1)
    {
      uint64_t v18 = 0;
LABEL_27:
      if (v18) {
        unsigned int v22 = v18;
      }
      else {
        unsigned int v22 = v16;
      }
      if (*v22 != v9)
      {
        if (*v22 == -2) {
          --v109;
        }
        else {
          ++HIDWORD(v108);
        }
        *unsigned int v22 = v9;
      }
    }
    else
    {
      uint64_t v18 = 0;
      int v19 = 1;
      while (v17 != v9)
      {
        if (v18) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v17 == -2;
        }
        if (v20) {
          uint64_t v18 = v16;
        }
        unsigned int v21 = v15 + v19++;
        unsigned int v15 = v21 & v14;
        int v16 = &v7[v21 & v14];
        unint64_t v17 = *v16;
        if (*v16 == -1) {
          goto LABEL_27;
        }
      }
    }
    goto LABEL_34;
  }
  unsigned int v23 = 0;
  unsigned int v24 = 8;
  uint64_t v7 = (unint64_t *)v110;
LABEL_43:
  if (v7 == v4) {
    uint64_t v25 = v23;
  }
  else {
    uint64_t v25 = v24;
  }
  uint64_t v26 = v7;
  if (v25)
  {
    uint64_t v27 = 8 * v25;
    uint64_t v26 = v7;
    do
    {
      if (*v26 < 0xFFFFFFFFFFFFFFFELL) {
        goto LABEL_52;
      }
      ++v26;
      v27 -= 8;
    }
    while (v27);
    v111 = v113;
    HIDWORD(v112) = 8;
    goto LABEL_51;
  }
LABEL_52:
  int64_t v28 = &v7[v25];
  v111 = v113;
  uint64_t v112 = 0x800000000;
  if (v26 == v28)
  {
LABEL_51:
    LODWORD(v112) = 0;
    goto LABEL_131;
  }
  unint64_t v29 = 0;
  int v30 = v26;
LABEL_54:
  int v31 = v29 + 1;
  int64_t v32 = v30 + 1;
  while (v32 != v28)
  {
    unint64_t v33 = *v32++;
    if (v33 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      int v30 = v32 - 1;
      ++v29;
      goto LABEL_54;
    }
  }
  if (v29 >= 8) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v34 = v113;
  unint64_t v35 = *v26;
LABEL_60:
  *int v34 = v35;
  int v36 = v26 + 1;
  while (v36 != v28)
  {
    unint64_t v37 = *v36++;
    unint64_t v35 = v37;
    if (v37 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      ++v34;
      uint64_t v26 = v36 - 1;
      goto LABEL_60;
    }
  }
  unsigned int v38 = v29 + 1;
  LODWORD(v112) = v31;
  if (v31)
  {
    while (1)
    {
      uint64_t v39 = *((void *)v111 + --v38);
      LODWORD(v112) = v38;
      int32x2_t v40 = this[95];
      unsigned __int32 v41 = this[97].u32[0];
      if (!v41) {
        goto LABEL_71;
      }
      unsigned __int32 v42 = v41 - 1;
      unsigned int v43 = ((v39 >> 4) ^ (v39 >> 9)) & (v41 - 1);
      long long v44 = (uint64_t *)(*(void *)&v40 + 104 * v43);
      uint64_t v45 = *v44;
      if (*v44 != v39) {
        break;
      }
LABEL_72:
      if ((uint64_t *)(*(void *)&v40 + 104 * v41) == v44) {
        goto LABEL_130;
      }
      uint64_t v48 = v44[2];
      uint64_t v49 = v48 == v44[1] ? 28 : 24;
      uint64_t v50 = *(unsigned int *)((char *)v44 + v49);
      if (v50)
      {
        uint64_t v51 = 8 * v50;
        uint64_t v52 = (unint64_t *)v44[2];
        while (*v52 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v52;
          v51 -= 8;
          if (!v51) {
            goto LABEL_130;
          }
        }
      }
      else
      {
        uint64_t v52 = (unint64_t *)v44[2];
      }
      uint64_t v53 = (unint64_t *)(v48 + 8 * v50);
      if (v52 == v53) {
        goto LABEL_130;
      }
      unint64_t v54 = *v52;
LABEL_84:
      int v55 = v107;
      uint64_t v56 = HIDWORD(v108);
      if (v107 == v106)
      {
        if (HIDWORD(v108))
        {
          int v57 = 0;
          uint64_t v58 = 8 * HIDWORD(v108);
          size_t v59 = (unint64_t *)v107;
          while (*v59 != v54)
          {
            if (*v59 == -2) {
              int v57 = v59;
            }
            ++v59;
            v58 -= 8;
            if (!v58)
            {
              if (!v57) {
                goto LABEL_92;
              }
              *int v57 = v54;
              --v109;
              goto LABEL_116;
            }
          }
          goto LABEL_118;
        }
LABEL_92:
        unsigned int v60 = v108;
        if (HIDWORD(v108) < v108)
        {
          ++HIDWORD(v108);
          *(void *)&v107[8 * v56] = v54;
          goto LABEL_116;
        }
      }
      else
      {
        unsigned int v60 = v108;
      }
      if (3 * v60 <= 4 * (HIDWORD(v108) - v109))
      {
        if (v60 >= 0x40) {
          v60 *= 2;
        }
        else {
          unsigned int v60 = 128;
        }
LABEL_127:
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v106, v60);
        unsigned int v60 = v108;
        int v55 = v107;
        goto LABEL_97;
      }
      if (v60 - HIDWORD(v108) < v60 >> 3) {
        goto LABEL_127;
      }
LABEL_97:
      unsigned int v61 = v60 - 1;
      unsigned int v62 = (v60 - 1) & ((v54 >> 4) ^ (v54 >> 9));
      uint64_t v63 = &v55[8 * v62];
      uint64_t v64 = *(void *)v63;
      if (*(void *)v63 != -1)
      {
        v65 = 0;
        int v66 = 1;
        while (v64 != v54)
        {
          if (v65) {
            BOOL v67 = 0;
          }
          else {
            BOOL v67 = v64 == -2;
          }
          if (v67) {
            v65 = (unint64_t *)v63;
          }
          unsigned int v68 = v62 + v66++;
          unsigned int v62 = v68 & v61;
          uint64_t v63 = &v55[8 * (v68 & v61)];
          uint64_t v64 = *(void *)v63;
          if (*(void *)v63 == -1) {
            goto LABEL_109;
          }
        }
        goto LABEL_118;
      }
      v65 = 0;
LABEL_109:
      if (v65) {
        char v69 = v65;
      }
      else {
        char v69 = (unint64_t *)v63;
      }
      if (*v69 == v54) {
        goto LABEL_118;
      }
      if (*v69 == -2) {
        --v109;
      }
      else {
        ++HIDWORD(v108);
      }
      *char v69 = v54;
LABEL_116:
      if (v112 >= (unint64_t)HIDWORD(v112)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v111 + v112) = v54;
      LODWORD(v112) = v112 + 1;
LABEL_118:
      int64_t v70 = v52 + 1;
      while (v70 != v53)
      {
        unint64_t v71 = *v70++;
        unint64_t v54 = v71;
        if (v71 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v52 = v70 - 1;
          goto LABEL_84;
        }
      }
      unsigned int v38 = v112;
LABEL_130:
      if (!v38) {
        goto LABEL_131;
      }
    }
    int v46 = 1;
    while (v45 != -4096)
    {
      unsigned int v47 = v43 + v46++;
      unsigned int v43 = v47 & v42;
      long long v44 = (uint64_t *)(*(void *)&v40 + 104 * (v47 & v42));
      uint64_t v45 = *v44;
      if (*v44 == v39) {
        goto LABEL_72;
      }
    }
LABEL_71:
    long long v44 = (uint64_t *)(*(void *)&v40 + 104 * v41);
    goto LABEL_72;
  }
LABEL_131:
  if (v107 == v106) {
    v72 = (uint64_t *)((char *)&v108 + 4);
  }
  else {
    v72 = &v108;
  }
  uint64_t v73 = *(unsigned int *)v72;
  if (v73)
  {
    uint64_t v74 = 8 * v73;
    v75 = v107;
    while (*(void *)v75 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v75 += 8;
      v74 -= 8;
      if (!v74) {
        goto LABEL_146;
      }
    }
  }
  else
  {
    v75 = v107;
  }
  __int16 v76 = &v107[8 * v73];
  if (v75 != v76)
  {
    int v77 = *(const llvm::SCEV **)v75;
LABEL_142:
    llvm::ScalarEvolution::forgetMemoizedResultsImpl(this, v77);
    std::string::size_type v78 = (unint64_t *)(v75 + 8);
    while (v78 != (unint64_t *)v76)
    {
      unint64_t v79 = *v78++;
      int v77 = (const llvm::SCEV *)v79;
      if (v79 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v75 = (char *)(v78 - 1);
        goto LABEL_142;
      }
    }
  }
LABEL_146:
  __int32 v80 = this[124].i32[0];
  int32x2_t v81 = this[123];
  uint64_t v82 = this[125].u32[0];
  v83 = (void *)(*(void *)&v81 + (v82 << 6));
  uint64_t v84 = v82;
  long long v85 = v83;
  if (v80)
  {
    if (this[125].i32[0])
    {
      uint64_t v86 = v82 << 6;
      long long v85 = (void *)this[123];
      while (1)
      {
        uint64_t v87 = v85[1];
        if ((*v85 != -4096 || v87 != -4096) && (*v85 != -8192 || v87 != -8192)) {
          break;
        }
        v85 += 8;
        v86 -= 64;
        if (!v86)
        {
          uint64_t v84 = this[125].u32[0];
          long long v85 = (void *)(*(void *)&v81 + (v82 << 6));
          goto LABEL_157;
        }
      }
      uint64_t v84 = this[125].u32[0];
    }
    else
    {
      uint64_t v84 = 0;
      long long v85 = (void *)this[123];
    }
  }
LABEL_157:
  if (v85 != (void *)(*(void *)&v81 + (v84 << 6)))
  {
    do
    {
      if (*v85) {
        uint64_t v88 = *v85 + 32;
      }
      else {
        uint64_t v88 = 0;
      }
      v89 = v106;
      if (v107 == v106)
      {
        int v90 = HIDWORD(v108);
        v91 = &v107[8 * HIDWORD(v108)];
        if (HIDWORD(v108))
        {
          uint64_t v92 = 0;
          while (*(void *)&v107[v92] != v88)
          {
            v92 += 8;
            if (8 * HIDWORD(v108) == v92) {
              goto LABEL_180;
            }
          }
          v91 = &v107[v92];
        }
LABEL_180:
        v89 = v107;
      }
      else
      {
        int v93 = v108 - 1;
        unsigned int v94 = (v108 - 1) & ((v88 >> 4) ^ (v88 >> 9));
        v91 = &v107[8 * v94];
        uint64_t v95 = *(void *)v91;
        if (*(void *)v91 == -1)
        {
          v96 = 0;
LABEL_206:
          if (v96) {
            v91 = v96;
          }
          int v90 = HIDWORD(v108);
          if (*(void *)v91 != v88) {
            v91 = &v107[8 * v108];
          }
        }
        else
        {
          v96 = 0;
          int v97 = 1;
          while (v95 != v88)
          {
            if (v96) {
              BOOL v98 = 0;
            }
            else {
              BOOL v98 = v95 == -2;
            }
            if (v98) {
              v96 = v91;
            }
            unsigned int v99 = v94 + v97++;
            unsigned int v94 = v99 & v93;
            v91 = &v107[8 * (v99 & v93)];
            uint64_t v95 = *(void *)v91;
            if (*(void *)v91 == -1) {
              goto LABEL_206;
            }
          }
          int v90 = HIDWORD(v108);
        }
      }
      int v100 = v108;
      if (v107 == v89) {
        int v100 = v90;
      }
      v101 = v85 + 8;
      if (v91 == &v107[8 * v100])
      {
        while (v101 != v83)
        {
          uint64_t v104 = v101[1];
          if ((*v101 != -4096 || v104 != -4096) && (*v101 != -8192 || v104 != -8192))
          {
            v102 = v101;
            goto LABEL_203;
          }
          v101 += 8;
        }
        v102 = v83;
      }
      else
      {
        v102 = v83;
        if (v101 != v83)
        {
          while (1)
          {
            uint64_t v103 = v101[1];
            if ((*v101 != -4096 || v103 != -4096) && (*v101 != -8192 || v103 != -8192)) {
              break;
            }
            v101 += 8;
            if (v101 == v83)
            {
              v102 = v83;
              goto LABEL_200;
            }
          }
          v102 = v101;
        }
LABEL_200:
        v105 = (void *)v85[3];
        if (v105 != v85 + 5)
        {
          free(v105);
          __int32 v80 = this[124].i32[0];
          int32x2_t v81 = this[123];
          uint64_t v82 = this[125].u32[0];
        }
        *long long v85 = -8192;
        v85[1] = -8192;
        this[124].i32[0] = --v80;
        ++this[124].i32[1];
      }
LABEL_203:
      long long v85 = v102;
    }
    while (v102 != (void *)(*(void *)&v81 + (v82 << 6)));
  }
  if (v111 != v113) {
    free(v111);
  }
  if (v107 != v106) {
    free(v107);
  }
}

uint64_t ****llvm::SCEVUnknown::allUsesReplacedWith(llvm::SCEVUnknown *this, llvm::Value *a2)
{
  uint64_t v4 = (int32x2_t *)*((void *)this + 8);
  uint64_t v19 = (uint64_t)this + 32;
  llvm::ScalarEvolution::forgetMemoizedResults(v4, &v19, 1);
  BOOL result = (uint64_t ****)llvm::FoldingSetBase::RemoveNode(*((void *)this + 8) + 832, (void *)this + 4);
  unsigned int v6 = (llvm::Value *)*((void *)this + 3);
  if (v6 != a2)
  {
    if (v6 && v6 != (llvm::Value *)-8192 && v6 != (llvm::Value *)-4096)
    {
      unint64_t v7 = *((void *)this + 1) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v7 = *((void *)this + 2);
      unsigned int v8 = (unint64_t *)*((void *)this + 2);
      if (v8)
      {
        *unsigned int v8 = *v8 & 7 | v7;
      }
      else
      {
        uint64_t v9 = *((void *)this + 3);
        uint64_t v10 = ***(int32x2_t ****)v9;
        unint64_t v11 = (unint64_t)v10[303];
        if (v11 <= v7)
        {
          uint64_t v12 = v10[305].u32[0];
          if (v11 + 16 * v12 > v7)
          {
            unsigned int v13 = v12 - 1;
            LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
            unsigned int v15 = (uint64_t *)(v11 + 16 * v14);
            uint64_t v16 = *v15;
            if (v9 == *v15)
            {
LABEL_18:
              uint64_t *v15 = -8192;
              v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v9 = *((void *)this + 3);
            }
            else
            {
              int v17 = 1;
              while (v16 != -4096)
              {
                int v18 = v14 + v17++;
                uint64_t v14 = v18 & v13;
                uint64_t v16 = *(void *)(v11 + 16 * v14);
                if (v9 == v16)
                {
                  unsigned int v15 = (uint64_t *)(v11 + 16 * v14);
                  goto LABEL_18;
                }
              }
            }
            *(unsigned char *)(v9 + 17) &= ~1u;
          }
        }
      }
    }
    *((void *)this + 3) = a2;
    if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096)
    {
      if (a2) {
        return llvm::ValueHandleBase::AddToUseList((llvm::SCEVUnknown *)((char *)this + 8));
      }
    }
  }
  return result;
}

uint64_t llvm::SCEVAddRecExpr::evaluateAtIteration(uint64_t **this, const llvm::SCEV *a2, llvm::ScalarEvolution *a3)
{
  return llvm::SCEVAddRecExpr::evaluateAtIteration(this[4], (int)this[5], a2, a3);
}

uint64_t llvm::SCEVAddRecExpr::evaluateAtIteration(uint64_t *a1, int a2, const llvm::SCEV *a3, llvm::ScalarEvolution *a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t AddExpr = *a1;
  if (a2 != 1)
  {
    uint64_t v10 = 0;
    unint64_t v11 = &v55;
    unint64_t v12 = 1;
    while (1)
    {
      uint64_t v13 = AddExpr;
      while (2)
      {
        switch(*(_WORD *)(v13 + 24))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            uint64_t v14 = (llvm::Type **)(v13 + 40);
            goto LABEL_7;
          case 4:
            uint64_t v14 = (llvm::Type **)(v13 + 48);
            goto LABEL_7;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            uint64_t v19 = *(uint64_t **)(v13 + 32);
            goto LABEL_19;
          case 6:
            uint64_t v19 = (uint64_t *)(v13 + 40);
LABEL_19:
            uint64_t v13 = *v19;
            continue;
          case 0xE:
            uint64_t v14 = *(llvm::Type ***)(v13 - 8);
            goto LABEL_7;
          default:
            uint64_t v14 = *(llvm::Type ***)(v13 + 32);
LABEL_7:
            unsigned int v15 = *v14;
            if (v12 == 1)
            {
              uint64_t TruncateOrZeroExtend = llvm::ScalarEvolution::getTruncateOrZeroExtend(a4, a3, v15, 0);
            }
            else
            {
              unsigned __int32 v41 = v11;
              unsigned __int32 v42 = *v14;
              unint64_t v43 = v12;
              uint64_t v44 = v10;
              if (v12 < 0x3E9)
              {
                unsigned int TypeSizeInBits = llvm::ScalarEvolution::getTypeSizeInBits(a4, v15);
                unsigned int v21 = 1;
                sub_1CB8F1EEC((uint64_t)&v53, TypeSizeInBits, 1);
                if (v12 >= 3)
                {
                  unsigned int v23 = 3;
                  unsigned int v21 = 1;
                  do
                  {
                    sub_1CB8F1EEC((uint64_t)&v51, TypeSizeInBits, v23);
                    if (v52 > 0x40)
                    {
                      unsigned int v25 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v51);
                      llvm::APInt::lshrSlowCase((void **)&v51, v25);
                    }
                    else
                    {
                      unsigned int v24 = __clz(__rbit64(v51));
                      if (v52 >= v24) {
                        unsigned int v25 = v24;
                      }
                      else {
                        unsigned int v25 = v52;
                      }
                      if (v52 > v24) {
                        v51 >>= v25;
                      }
                      else {
                        unint64_t v51 = 0;
                      }
                    }
                    llvm::APInt::operator*=((uint64_t)&v53, &v51);
                    if (v52 >= 0x41 && v51) {
                      MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
                    }
                    v21 += v25;
                    ++v23;
                  }
                  while (v23 <= v43);
                }
                sub_1CB8F1EEC((uint64_t)&v51, v21 + TypeSizeInBits, 0);
                uint64_t v22 = 1 << v21;
                if (v52 > 0x40) {
                  *(void *)(v51 + 8 * (v21 >> 6)) |= v22;
                }
                else {
                  v51 |= v22;
                }
                sub_1CBA62420(TypeSizeInBits + 1, (llvm::APInt *)&v49);
                llvm::APInt::zext((uint64_t *)&v53, TypeSizeInBits + 1, (uint64_t)&v47);
                llvm::APInt::multiplicativeInverse((llvm::APInt *)&v47, (const llvm::APInt *)&v49, (uint64_t)&v45);
                if (v48 >= 0x41 && v47) {
                  MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
                }
                uint64_t v47 = v45;
                unsigned int v48 = v46;
                llvm::APInt::trunc((uint64_t)&v47, TypeSizeInBits, (uint64_t)&v45);
                if (v48 >= 0x41 && v47) {
                  MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
                }
                uint64_t v47 = v45;
                unsigned int v48 = v46;
                uint64_t v26 = (llvm::Type *)llvm::IntegerType::get(***(llvm::IntegerType ****)a4, (llvm::LLVMContext *)(v21 + TypeSizeInBits));
                uint64_t v27 = (const llvm::SCEV *)llvm::ScalarEvolution::getTruncateOrZeroExtend(a4, a3, v26, 0);
                unint64_t v28 = 0;
                do
                {
                  ++v28;
                  Type = (llvm::Type *)llvm::SCEV::getType(a3);
                  Constant = (const llvm::APInt *)llvm::ScalarEvolution::getConstant(a4, Type, v28, 0);
                  MinusSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(a4, a3, Constant, 0, 0);
                  uint64_t v32 = llvm::ScalarEvolution::getTruncateOrZeroExtend(a4, MinusSCEV, v26, 0);
                  uint64_t v27 = (const llvm::SCEV *)sub_1CBFD7CB4(a4, v27, v32, 0, 0);
                }
                while (v44 != v28);
                int v34 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)a4, (llvm::LLVMContext *)&v51, v33);
                unint64_t v35 = llvm::ScalarEvolution::getConstant(a4, v34);
                UDivExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getUDivExpr(a4, v27, v35);
                unsigned int v38 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)a4, (llvm::LLVMContext *)&v47, v37);
                unint64_t v39 = llvm::ScalarEvolution::getConstant(a4, v38);
                uint64_t v40 = llvm::ScalarEvolution::getTruncateOrZeroExtend(a4, UDivExpr, v42, 0);
                uint64_t TruncateOrZeroExtend = sub_1CBFD7CB4(a4, v39, v40, 0, 0);
                if (v48 >= 0x41 && v47) {
                  MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
                }
                if (v50 >= 0x41 && v49) {
                  MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
                }
                if (v52 >= 0x41 && v51) {
                  MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
                }
                if (v54 >= 0x41 && v53) {
                  MEMORY[0x1D25D9CB0](v53, 0x1000C8000313F17);
                }
              }
              else
              {
                uint64_t TruncateOrZeroExtend = *((void *)a4 + 6);
              }
              unint64_t v12 = v43;
              uint64_t v10 = v44;
              unint64_t v11 = v41;
            }
            if (*(_WORD *)(TruncateOrZeroExtend + 24) == 15) {
              return TruncateOrZeroExtend;
            }
            uint64_t v17 = a1[v12];
            uint64_t v53 = v11;
            uint64_t v55 = v17;
            uint64_t v56 = TruncateOrZeroExtend;
            uint64_t v54 = 0x200000002;
            uint64_t MulExpr = llvm::ScalarEvolution::getMulExpr(a4, &v53, 0, 0);
            if (v53 != v11) {
              free(v53);
            }
            uint64_t v53 = v11;
            uint64_t v55 = AddExpr;
            uint64_t v56 = MulExpr;
            uint64_t v54 = 0x200000002;
            uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(a4, &v53, 0, 0);
            if (v53 != v11) {
              free(v53);
            }
            ++v12;
            ++v10;
            if (v12 == a2) {
              return AddExpr;
            }
            break;
        }
        break;
      }
    }
  }
  return AddExpr;
}

const llvm::SCEV *llvm::ScalarEvolution::getLosslessPtrToIntExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  unsigned int v94 = a2;
  uint64_t v4 = a2;
  while (2)
  {
    switch(*((_WORD *)v4 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        unsigned int v6 = (char *)v4 + 40;
        goto LABEL_9;
      case 4:
        unsigned int v6 = (char *)v4 + 48;
        goto LABEL_9;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        unint64_t v5 = (const llvm::SCEV **)*((void *)v4 + 4);
        goto LABEL_4;
      case 6:
        unint64_t v5 = (const llvm::SCEV **)((char *)v4 + 40);
LABEL_4:
        uint64_t v4 = *v5;
        continue;
      case 0xE:
        unsigned int v6 = (char *)*((void *)v4 - 1);
        goto LABEL_9;
      default:
        unsigned int v6 = (char *)*((void *)v4 + 4);
LABEL_9:
        if (*(unsigned char *)(*(void *)v6 + 8) != 15) {
          return a2;
        }
        __s1 = v101;
        LODWORD(v101[0]) = 13;
        *(void *)((char *)v101 + 4) = a2;
        uint64_t v100 = 0x2000000003;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_1EBCBE588))
        {
          unint64_t v89 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override) {
            unint64_t v89 = 0xFF51AFD7ED558CCDLL;
          }
          qword_1EBCBE580 = v89;
          __cxa_guard_release(&qword_1EBCBE588);
        }
        uint64_t v7 = __ROR8__(*(void *)((char *)v101 + 4) + 12, 12);
        unint64_t v8 = 0x9DDFEA08EB382D69 * (v101[0] ^ qword_1EBCBE580 ^ v7);
        uint64_t v9 = *((void *)this + 104)
           + 8
           * ((*((_DWORD *)this + 210) - 1) & ((-348639895
                                              * ((((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 32) >> 15) ^ (-348639895 * (v7 ^ (v8 >> 47) ^ v8)))) ^ HIDWORD(v101[0])));
        uint64_t Constant = *(void *)v9;
        v102 = &v104;
        uint64_t v103 = 0x2000000000;
        if (Constant) {
          BOOL v11 = (Constant & 1) == 0;
        }
        else {
          BOOL v11 = 0;
        }
        if (!v11) {
          goto LABEL_22;
        }
        break;
    }
    break;
  }
  while (*(void *)(Constant + 16) != v100
       || memcmp(__s1, *(const void **)(Constant + 8), 4 * v100))
  {
    LODWORD(v103) = 0;
    uint64_t Constant = *(void *)Constant;
    if (Constant) {
      BOOL v12 = (Constant & 1) == 0;
    }
    else {
      BOOL v12 = 0;
    }
    if (!v12)
    {
LABEL_22:
      uint64_t v13 = a2;
      while (2)
      {
        switch(*((_WORD *)v13 + 12))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            unsigned int v15 = (uint64_t *)((char *)v13 + 40);
            goto LABEL_31;
          case 4:
            unsigned int v15 = (uint64_t *)((char *)v13 + 48);
            goto LABEL_31;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            uint64_t v14 = (const llvm::SCEV **)*((void *)v13 + 4);
            goto LABEL_25;
          case 6:
            uint64_t v14 = (const llvm::SCEV **)((char *)v13 + 40);
LABEL_25:
            uint64_t v13 = *v14;
            continue;
          case 0xE:
            unsigned int v15 = (uint64_t *)*((void *)v13 - 1);
            goto LABEL_31;
          default:
            unsigned int v15 = (uint64_t *)*((void *)v13 + 4);
LABEL_31:
            if (sub_1CBFB72C8(*(void *)(*(void *)this + 40) + 272, *v15))
            {
LABEL_81:
              uint64_t Constant = *((void *)this + 6);
            }
            else
            {
              uint64_t v16 = *(void *)(*(void *)this + 40);
              uint64_t v17 = a2;
              while (2)
              {
                switch(*((_WORD *)v17 + 12))
                {
                  case 1:
                  case 2:
                  case 3:
                  case 0xD:
                    uint64_t v19 = (char *)v17 + 40;
                    goto LABEL_41;
                  case 4:
                    uint64_t v19 = (char *)v17 + 48;
                    goto LABEL_41;
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                  case 0xA:
                  case 0xB:
                  case 0xC:
                    int v18 = (const llvm::SCEV **)*((void *)v17 + 4);
                    goto LABEL_35;
                  case 6:
                    int v18 = (const llvm::SCEV **)((char *)v17 + 40);
LABEL_35:
                    uint64_t v17 = *v18;
                    continue;
                  case 0xE:
                    uint64_t v19 = (char *)*((void *)v17 - 1);
                    goto LABEL_41;
                  default:
                    uint64_t v19 = (char *)*((void *)v17 + 4);
LABEL_41:
                    uint64_t v20 = *(void *)v19;
                    unsigned int v21 = *(_DWORD *)(*(void *)v19 + 8);
                    if ((v21 & 0xFE) == 0x12) {
                      unsigned int v21 = *(_DWORD *)(**(void **)(v20 + 16) + 8);
                    }
                    uint64_t v22 = *(void *)(v16 + 504);
                    if (v21 < 0x100) {
                      goto LABEL_52;
                    }
                    unsigned int v23 = v21 >> 8;
                    unint64_t v24 = *(unsigned int *)(v16 + 512);
                    uint64_t v25 = *(void *)(v16 + 504);
                    if (v24)
                    {
                      uint64_t v25 = v22;
                      unint64_t v26 = v24;
                      do
                      {
                        unint64_t v27 = v26 >> 1;
                        uint64_t v28 = v25 + 16 * (v26 >> 1);
                        unsigned int v29 = *(_DWORD *)(v28 + 8);
                        uint64_t v30 = v28 + 16;
                        v26 += ~(v26 >> 1);
                        if (v29 < v23) {
                          uint64_t v25 = v30;
                        }
                        else {
                          unint64_t v26 = v27;
                        }
                      }
                      while (v26);
                    }
                    if (v25 == v22 + 16 * v24 || *(_DWORD *)(v25 + 8) != v23) {
LABEL_52:
                    }
                      uint64_t v25 = v22;
                    int v31 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v20, (llvm::LLVMContext *)*(unsigned int *)(v25 + 4));
                    uint64_t v32 = (uint64_t)v31;
                    if ((*(_DWORD *)(v20 + 8) & 0xFE) == 0x12)
                    {
                      int v90 = (llvm::Type *)*(unsigned int *)(v20 + 32);
                      if (*(_DWORD *)(v20 + 8) == 19) {
                        llvm::ScalableVectorType::get(v31, v90);
                      }
                      else {
                        llvm::FixedVectorType::get((llvm::FixedVectorType *)v31, v90);
                      }
                      uint64_t v32 = v91;
                    }
                    uint64_t v33 = *(void *)(*(void *)this + 40);
                    uint64_t v34 = v33 + 272;
                    unint64_t v35 = a2;
                    while (2)
                    {
                      switch(*((_WORD *)v35 + 12))
                      {
                        case 1:
                        case 2:
                        case 3:
                        case 0xD:
                          unint64_t v37 = (uint64_t *)((char *)v35 + 40);
                          goto LABEL_62;
                        case 4:
                          unint64_t v37 = (uint64_t *)((char *)v35 + 48);
                          goto LABEL_62;
                        case 5:
                        case 7:
                        case 8:
                        case 9:
                        case 0xA:
                        case 0xB:
                        case 0xC:
                          int v36 = (const llvm::SCEV **)*((void *)v35 + 4);
                          goto LABEL_57;
                        case 6:
                          int v36 = (const llvm::SCEV **)((char *)v35 + 40);
LABEL_57:
                          unint64_t v35 = *v36;
                          continue;
                        case 0xE:
                          unint64_t v37 = (uint64_t *)*((void *)v35 - 1);
                          goto LABEL_62;
                        default:
                          unint64_t v37 = (uint64_t *)*((void *)v35 + 4);
LABEL_62:
                          uint64_t v38 = *v37;
                          unsigned int v39 = *(_DWORD *)(*v37 + 8);
                          if (v39 != 13)
                          {
                            if ((v39 & 0xFE) == 0x12) {
                              unsigned int v39 = *(_DWORD *)(**(void **)(v38 + 16) + 8);
                            }
                            uint64_t v40 = *(void *)(v33 + 504);
                            if (v39 < 0x100) {
                              goto LABEL_74;
                            }
                            unsigned int v41 = v39 >> 8;
                            unint64_t v42 = *(unsigned int *)(v33 + 512);
                            uint64_t v43 = *(void *)(v33 + 504);
                            if (v42)
                            {
                              uint64_t v43 = v40;
                              unint64_t v44 = v42;
                              do
                              {
                                unint64_t v45 = v44 >> 1;
                                uint64_t v46 = v43 + 16 * (v44 >> 1);
                                unsigned int v47 = *(_DWORD *)(v46 + 8);
                                uint64_t v48 = v46 + 16;
                                v44 += ~(v44 >> 1);
                                if (v47 < v41) {
                                  uint64_t v43 = v48;
                                }
                                else {
                                  unint64_t v44 = v45;
                                }
                              }
                              while (v44);
                            }
                            if (v43 == v40 + 16 * v42 || *(_DWORD *)(v43 + 8) != v41) {
LABEL_74:
                            }
                              uint64_t v43 = v40;
                            uint64_t v49 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v38, (llvm::LLVMContext *)*(unsigned int *)(v43 + 12));
                            if ((*(_DWORD *)(v38 + 8) & 0xFE) == 0x12)
                            {
                              uint64_t v92 = (llvm::Type *)*(unsigned int *)(v38 + 32);
                              if (*(_DWORD *)(v38 + 8) == 19) {
                                llvm::ScalableVectorType::get(v49, v92);
                              }
                              else {
                                llvm::FixedVectorType::get((llvm::FixedVectorType *)v49, v92);
                              }
                            }
                            uint64_t v38 = (uint64_t)v49;
                          }
                          uint64_t v50 = sub_1CB83544C(v34, v38);
                          int v52 = v51;
                          if (v50 != sub_1CB83544C(*(void *)(*(void *)this + 40) + 272, v32) || v52 != v53) {
                            goto LABEL_81;
                          }
                          if (a2 && *((_WORD *)a2 + 12) == 14)
                          {
                            if (*(unsigned char *)(*((void *)a2 - 1) + 16) == 19)
                            {
                              unsigned int v57 = *(_DWORD *)(v32 + 8);
                              if (v57 != 13)
                              {
                                uint64_t v58 = *(void *)(*(void *)this + 40);
                                if ((v57 & 0xFE) == 0x12) {
                                  unsigned int v57 = *(_DWORD *)(**(void **)(v32 + 16) + 8);
                                }
                                uint64_t v59 = *(void *)(v58 + 504);
                                if (v57 < 0x100) {
                                  goto LABEL_100;
                                }
                                unsigned int v60 = v57 >> 8;
                                unint64_t v61 = *(unsigned int *)(v58 + 512);
                                uint64_t v62 = v59;
                                if (v61)
                                {
                                  uint64_t v62 = v59;
                                  unint64_t v63 = v61;
                                  do
                                  {
                                    unint64_t v64 = v63 >> 1;
                                    uint64_t v65 = v62 + 16 * (v63 >> 1);
                                    unsigned int v66 = *(_DWORD *)(v65 + 8);
                                    uint64_t v67 = v65 + 16;
                                    v63 += ~(v63 >> 1);
                                    if (v66 < v60) {
                                      uint64_t v62 = v67;
                                    }
                                    else {
                                      unint64_t v63 = v64;
                                    }
                                  }
                                  while (v63);
                                }
                                if (v62 == v59 + 16 * v61 || *(_DWORD *)(v62 + 8) != v60) {
LABEL_100:
                                }
                                  uint64_t v62 = v59;
                                unsigned int v68 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v32, (llvm::LLVMContext *)*(unsigned int *)(v62 + 12));
                                if ((*(_DWORD *)(v32 + 8) & 0xFE) == 0x12)
                                {
                                  int v93 = (llvm::Type *)*(unsigned int *)(v32 + 32);
                                  if (*(_DWORD *)(v32 + 8) == 19) {
                                    llvm::ScalableVectorType::get(v68, v93);
                                  }
                                  else {
                                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v68, v93);
                                  }
                                }
                                uint64_t v32 = (uint64_t)v68;
                              }
                              char v69 = *(llvm::ConstantInt **)v32;
                              unsigned int v70 = *(_DWORD *)(v32 + 8);
                              LODWORD(v103) = v70 >> 8;
                              if (v70 >> 8 >= 0x41) {
                                operator new[]();
                              }
                              v102 = 0;
                              unint64_t v71 = (llvm::ConstantInt *)llvm::ConstantInt::get(v69, (llvm::LLVMContext *)&v102, v54);
                              if (v103 >= 0x41 && v102) {
                                MEMORY[0x1D25D9CB0](v102, 0x1000C8000313F17);
                              }
                              uint64_t Constant = llvm::ScalarEvolution::getConstant(this, v71);
                            }
                            else
                            {
                              *((void *)this + 118) += 48;
                              uint64_t v72 = *((void *)this + 108);
                              if (((v72 + 7) & 0xFFFFFFFFFFFFFFF8) - v72 + 48 > *((void *)this + 109) - v72)
                              {
                                unsigned int v86 = *((_DWORD *)this + 222) >> 7;
                                if (v86 >= 0x1E) {
                                  LOBYTE(v86) = 30;
                                }
                                uint64_t v87 = 4096 << v86;
                                uint64_t Constant = (uint64_t)operator new(4096 << v86, (std::align_val_t)8uLL);
                                unsigned int v88 = *((_DWORD *)this + 222);
                                if (v88 >= *((_DWORD *)this + 223)) {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                }
                                *(void *)(*((void *)this + 110) + 8 * v88) = Constant;
                                ++*((_DWORD *)this + 222);
                                *((void *)this + 109) = Constant + v87;
                              }
                              else
                              {
                                uint64_t Constant = (v72 + 7) & 0xFFFFFFFFFFFFFFF8;
                              }
                              *((void *)this + 108) = Constant + 48;
                              uint64_t v73 = sub_1CB906F34((uint64_t *)this + 108, 4 * v100, 2);
                              uint64_t v74 = v73;
                              if (v100)
                              {
                                v75 = (int *)__s1;
                                uint64_t v76 = 4 * v100;
                                int v77 = (_DWORD *)v73;
                                do
                                {
                                  int v78 = *v75++;
                                  *v77++ = v78;
                                  v76 -= 4;
                                }
                                while (v76);
                                uint64_t v79 = v100;
                              }
                              else
                              {
                                uint64_t v79 = 0;
                              }
                              LODWORD(v103) = 16;
                              v102 = (void *)1;
                              uint64_t v80 = *((unsigned __int16 *)a2 + 13);
                              int v96 = 16;
                              uint64_t v95 = v80;
                              llvm::APInt::uadd_sat((llvm::APInt *)&v102, (const llvm::APInt *)&v95, (uint64_t)&v97);
                              __int16 v81 = (__int16)v97;
                              if (v98 > 0x40)
                              {
                                uint64_t v82 = *v97;
                                MEMORY[0x1D25D9CB0]();
                                __int16 v81 = v82;
                              }
                              *(void *)uint64_t Constant = 0;
                              *(void *)(Constant + 8) = v74;
                              *(void *)(Constant + 16) = v79;
                              *(_WORD *)(Constant + 24) = 13;
                              *(_WORD *)(Constant + 26) = v81;
                              *(_WORD *)(Constant + 28) = 0;
                              *(void *)(Constant + 32) = a2;
                              *(void *)(Constant + 40) = v32;
                              unsigned int v83 = *((_DWORD *)this + 211) + 1;
                              int v84 = *((_DWORD *)this + 210);
                              if (v83 > 2 * v84)
                              {
                                llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v84, (uint64_t)off_1F2607658);
                                v102 = &v104;
                                uint64_t v103 = 0x2000000000;
                                uint64_t v9 = *((void *)this + 104)
                                   + 8
                                   * ((*((_DWORD *)this + 210) - 1) & sub_1CC13A6B8(*(void **)(Constant + 8), *(void *)(Constant + 8)+ 4 * *(void *)(Constant + 16)));
                                if (v102 != &v104) {
                                  free(v102);
                                }
                                unsigned int v83 = *((_DWORD *)this + 211) + 1;
                              }
                              *((_DWORD *)this + 211) = v83;
                              uint64_t v85 = *(void *)v9;
                              if (!*(void *)v9) {
                                uint64_t v85 = v9 | 1;
                              }
                              *(void *)uint64_t Constant = v85;
                              *(void *)uint64_t v9 = Constant;
                              llvm::ScalarEvolution::registerUser((uint64_t)this, Constant, (uint64_t *)&v94, 1);
                            }
                          }
                          else
                          {
                            uint64_t v103 = 0;
                            uint64_t v104 = 0;
                            v102 = this;
                            int v105 = 0;
                            uint64_t Constant = sub_1CC131398((llvm::ScalarEvolution **)&v102, (uint64_t)a2, v54);
                            MEMORY[0x1D25D9CD0](v103, 8);
                          }
                          break;
                      }
                      break;
                    }
                    break;
                }
                break;
              }
            }
            break;
        }
        goto LABEL_82;
      }
    }
  }
LABEL_82:
  if (__s1 != v101) {
    free(__s1);
  }
  return (const llvm::SCEV *)Constant;
}

void llvm::ScalarEvolution::registerUser(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = a3;
    uint64_t v7 = &a3[a4];
    unint64_t v8 = (uint64_t *)(a1 + 760);
    while (1)
    {
      uint64_t v9 = *v4;
      if (!*(_WORD *)(*v4 + 24)) {
        goto LABEL_34;
      }
      unsigned int v10 = *(_DWORD *)(a1 + 776);
      unsigned int v11 = v9 >> 4;
      if (!v10)
      {
        uint64_t v14 = 0;
        goto LABEL_17;
      }
      uint64_t v12 = *(void *)(a1 + 760);
      unsigned int v13 = (v10 - 1) & (v11 ^ (v9 >> 9));
      uint64_t v14 = (uint64_t *)(v12 + 104 * v13);
      uint64_t v15 = *v14;
      if (v9 != *v14) {
        break;
      }
LABEL_24:
      uint64_t v22 = v14[2];
      uint64_t v23 = *((unsigned int *)v14 + 7);
      if (v22 != v14[1])
      {
        unsigned int v27 = *((_DWORD *)v14 + 6);
LABEL_37:
        if (3 * v27 <= 4 * ((int)v23 - *((_DWORD *)v14 + 8)))
        {
          if (v27 >= 0x40) {
            v27 *= 2;
          }
          else {
            unsigned int v27 = 128;
          }
        }
        else if (v27 - v23 >= v27 >> 3)
        {
          goto LABEL_39;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v14 + 1), v27);
        unsigned int v27 = *((_DWORD *)v14 + 6);
        uint64_t v22 = v14[2];
LABEL_39:
        unsigned int v28 = v27 - 1;
        unsigned int v29 = (v27 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        uint64_t v30 = (void *)(v22 + 8 * v29);
        uint64_t v31 = *v30;
        if (*v30 == -1)
        {
          uint64_t v32 = 0;
LABEL_51:
          if (v32) {
            int v36 = v32;
          }
          else {
            int v36 = v30;
          }
          if (*v36 != a2)
          {
            if (*v36 == -2) {
              --*((_DWORD *)v14 + 8);
            }
            else {
              ++*((_DWORD *)v14 + 7);
            }
            *int v36 = a2;
          }
        }
        else
        {
          uint64_t v32 = 0;
          int v33 = 1;
          while (v31 != a2)
          {
            if (v32) {
              BOOL v34 = 0;
            }
            else {
              BOOL v34 = v31 == -2;
            }
            if (v34) {
              uint64_t v32 = v30;
            }
            unsigned int v35 = v29 + v33++;
            unsigned int v29 = v35 & v28;
            uint64_t v30 = (void *)(v22 + 8 * (v35 & v28));
            uint64_t v31 = *v30;
            if (*v30 == -1) {
              goto LABEL_51;
            }
          }
        }
        goto LABEL_34;
      }
      if (v23)
      {
        unint64_t v24 = 0;
        uint64_t v25 = 8 * v23;
        unint64_t v26 = (void *)v14[2];
        while (*v26 != a2)
        {
          if (*v26 == -2) {
            unint64_t v24 = v26;
          }
          ++v26;
          v25 -= 8;
          if (!v25)
          {
            if (!v24) {
              goto LABEL_32;
            }
            *unint64_t v24 = a2;
            --*((_DWORD *)v14 + 8);
            goto LABEL_34;
          }
        }
        goto LABEL_34;
      }
LABEL_32:
      unsigned int v27 = *((_DWORD *)v14 + 6);
      if (v23 >= v27) {
        goto LABEL_37;
      }
      *((_DWORD *)v14 + 7) = v23 + 1;
      *(void *)(v22 + 8 * v23) = a2;
LABEL_34:
      if (++v4 == v7) {
        return;
      }
    }
    uint64_t v16 = 0;
    int v17 = 1;
    while (v15 != -4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -8192;
      }
      if (v18) {
        uint64_t v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & (v10 - 1);
      uint64_t v14 = (uint64_t *)(v12 + 104 * v13);
      uint64_t v15 = *v14;
      if (v9 == *v14) {
        goto LABEL_24;
      }
    }
    if (v16) {
      uint64_t v14 = v16;
    }
LABEL_17:
    int v20 = *(_DWORD *)(a1 + 768);
    if (4 * v20 + 4 >= 3 * v10)
    {
      sub_1CC13F4B0(v8, 2 * v10);
      uint64_t v37 = *(void *)(a1 + 760);
      int v38 = *(_DWORD *)(a1 + 776) - 1;
      unsigned int v39 = v38 & (v11 ^ (v9 >> 9));
      uint64_t v14 = (uint64_t *)(v37 + 104 * v39);
      uint64_t v40 = *v14;
      if (v9 == *v14)
      {
        uint64_t v21 = v9;
        goto LABEL_21;
      }
      unsigned int v41 = 0;
      int v42 = 1;
      while (v40 != -4096)
      {
        if (v41) {
          BOOL v43 = 0;
        }
        else {
          BOOL v43 = v40 == -8192;
        }
        if (v43) {
          unsigned int v41 = v14;
        }
        unsigned int v44 = v39 + v42++;
        unsigned int v39 = v44 & v38;
        uint64_t v14 = (uint64_t *)(v37 + 104 * v39);
        uint64_t v40 = *v14;
        if (v9 == *v14)
        {
          uint64_t v21 = v9;
          goto LABEL_21;
        }
      }
      if (v41) {
        uint64_t v14 = v41;
      }
    }
    else if (v10 + ~v20 - *(_DWORD *)(a1 + 772) <= v10 >> 3)
    {
      sub_1CC13F4B0(v8, v10);
      unint64_t v45 = 0;
      sub_1CC13F0F0(*(void *)(a1 + 760), *(_DWORD *)(a1 + 776), v9, &v45);
      uint64_t v14 = v45;
    }
    uint64_t v21 = *v14;
LABEL_21:
    ++*(_DWORD *)(a1 + 768);
    if (v21 != -4096) {
      --*(_DWORD *)(a1 + 772);
    }
    uint64_t *v14 = v9;
    v14[1] = (uint64_t)(v14 + 5);
    v14[2] = (uint64_t)(v14 + 5);
    v14[3] = 8;
    *((_DWORD *)v14 + 8) = 0;
    goto LABEL_24;
  }
}

llvm::detail::IEEEFloat **llvm::ScalarEvolution::getTruncateOrZeroExtend(llvm::ScalarEvolution *this, llvm::detail::IEEEFloat **a2, llvm::Type *a3, uint64_t a4)
{
  unint64_t v8 = a2;
  while (2)
  {
    switch(*((_WORD *)v8 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        uint64_t v9 = v8 + 5;
        goto LABEL_4;
      case 4:
        uint64_t v9 = v8 + 6;
        goto LABEL_4;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        int v20 = (llvm::detail::IEEEFloat ***)v8[4];
        goto LABEL_15;
      case 6:
        int v20 = (llvm::detail::IEEEFloat ***)(v8 + 5);
LABEL_15:
        unint64_t v8 = *v20;
        continue;
      case 0xE:
        uint64_t v9 = (llvm::detail::IEEEFloat **)*(v8 - 1);
        goto LABEL_4;
      default:
        uint64_t v9 = (llvm::detail::IEEEFloat **)v8[4];
LABEL_4:
        uint64_t v10 = (uint64_t)*v9;
        unsigned int v11 = *((_DWORD *)*v9 + 2);
        uint64_t v12 = *(void *)(*(void *)this + 40);
        if (v11 == 15)
        {
          if ((v11 & 0xFE) == 0x12) {
            unsigned int v11 = *(_DWORD *)(**(void **)(v10 + 16) + 8);
          }
          uint64_t v29 = *(void *)(v12 + 504);
          if (v11 < 0x100) {
            goto LABEL_41;
          }
          unsigned int v30 = v11 >> 8;
          unint64_t v31 = *(unsigned int *)(v12 + 512);
          uint64_t v32 = *(void *)(v12 + 504);
          if (v31)
          {
            uint64_t v32 = v29;
            unint64_t v33 = v31;
            do
            {
              unint64_t v34 = v33 >> 1;
              uint64_t v35 = v32 + 16 * (v33 >> 1);
              unsigned int v36 = *(_DWORD *)(v35 + 8);
              uint64_t v37 = v35 + 16;
              v33 += ~(v33 >> 1);
              if (v36 < v30) {
                uint64_t v32 = v37;
              }
              else {
                unint64_t v33 = v34;
              }
            }
            while (v33);
          }
          if (v32 == v29 + 16 * v31 || *(_DWORD *)(v32 + 8) != v30) {
LABEL_41:
          }
            uint64_t v32 = v29;
          uint64_t v14 = *(unsigned int *)(v32 + 12);
        }
        else
        {
          uint64_t v14 = sub_1CB83544C(v12 + 272, v10);
          if (v13 == 1) {
        }
          }
        unsigned int v15 = *((_DWORD *)a3 + 2);
        uint64_t v16 = *(void *)(*(void *)this + 40);
        if (v15 == 15)
        {
          if ((v15 & 0xFE) == 0x12) {
            unsigned int v15 = *(_DWORD *)(**((void **)a3 + 2) + 8);
          }
          uint64_t v38 = *(void *)(v16 + 504);
          if (v15 < 0x100) {
            goto LABEL_54;
          }
          unsigned int v39 = v15 >> 8;
          unint64_t v40 = *(unsigned int *)(v16 + 512);
          uint64_t v41 = *(void *)(v16 + 504);
          if (v40)
          {
            uint64_t v41 = v38;
            unint64_t v42 = v40;
            do
            {
              unint64_t v43 = v42 >> 1;
              uint64_t v44 = v41 + 16 * (v42 >> 1);
              unsigned int v45 = *(_DWORD *)(v44 + 8);
              uint64_t v46 = v44 + 16;
              v42 += ~(v42 >> 1);
              if (v45 < v39) {
                uint64_t v41 = v46;
              }
              else {
                unint64_t v42 = v43;
              }
            }
            while (v42);
          }
          if (v41 == v38 + 16 * v40 || *(_DWORD *)(v41 + 8) != v39) {
LABEL_54:
          }
            uint64_t v41 = v38;
          uint64_t v17 = *(unsigned int *)(v41 + 12);
        }
        else
        {
          uint64_t v17 = sub_1CB83544C(v16 + 272, (uint64_t)a3);
          if (v18 == 1)
          {
            uint64_t v65 = v17;
            uint64_t v17 = v65;
          }
        }
        if (v14 == v17) {
          return a2;
        }
        unsigned int v21 = *(_DWORD *)(v10 + 8);
        uint64_t v22 = *(void *)(*(void *)this + 40);
        if (v21 == 15)
        {
          if ((v21 & 0xFE) == 0x12) {
            unsigned int v21 = *(_DWORD *)(**(void **)(v10 + 16) + 8);
          }
          uint64_t v47 = *(void *)(v22 + 504);
          if (v21 < 0x100) {
            goto LABEL_67;
          }
          unsigned int v48 = v21 >> 8;
          unint64_t v49 = *(unsigned int *)(v22 + 512);
          uint64_t v50 = *(void *)(v22 + 504);
          if (v49)
          {
            uint64_t v50 = v47;
            unint64_t v51 = v49;
            do
            {
              unint64_t v52 = v51 >> 1;
              uint64_t v53 = v50 + 16 * (v51 >> 1);
              unsigned int v54 = *(_DWORD *)(v53 + 8);
              uint64_t v55 = v53 + 16;
              v51 += ~(v51 >> 1);
              if (v54 < v48) {
                uint64_t v50 = v55;
              }
              else {
                unint64_t v51 = v52;
              }
            }
            while (v51);
          }
          if (v50 == v47 + 16 * v49 || *(_DWORD *)(v50 + 8) != v48) {
LABEL_67:
          }
            uint64_t v50 = v47;
          unint64_t v24 = *(unsigned int *)(v50 + 12);
        }
        else
        {
          unint64_t v24 = sub_1CB83544C(v22 + 272, v10);
          if (v23 == 1) {
        }
          }
        unsigned int v25 = *((_DWORD *)a3 + 2);
        uint64_t v26 = *(void *)(*(void *)this + 40);
        if (v25 == 15)
        {
          if ((v25 & 0xFE) == 0x12) {
            unsigned int v25 = *(_DWORD *)(**((void **)a3 + 2) + 8);
          }
          uint64_t v56 = *(void *)(v26 + 504);
          if (v25 < 0x100) {
            goto LABEL_80;
          }
          unsigned int v57 = v25 >> 8;
          unint64_t v58 = *(unsigned int *)(v26 + 512);
          uint64_t v59 = *(void *)(v26 + 504);
          if (v58)
          {
            uint64_t v59 = v56;
            unint64_t v60 = v58;
            do
            {
              unint64_t v61 = v60 >> 1;
              uint64_t v62 = v59 + 16 * (v60 >> 1);
              unsigned int v63 = *(_DWORD *)(v62 + 8);
              uint64_t v64 = v62 + 16;
              v60 += ~(v60 >> 1);
              if (v63 < v57) {
                uint64_t v59 = v64;
              }
              else {
                unint64_t v60 = v61;
              }
            }
            while (v60);
          }
          if (v59 == v56 + 16 * v58 || *(_DWORD *)(v59 + 8) != v57) {
LABEL_80:
          }
            uint64_t v59 = v56;
          unint64_t v28 = *(unsigned int *)(v59 + 12);
        }
        else
        {
          unint64_t v28 = sub_1CB83544C(v26 + 272, (uint64_t)a3);
          if (v27 == 1) {
        }
          }
        if (v24 <= v28)
        {
          return (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::getZeroExtendExpr(this, a2, (uint64_t **)a3, a4);
        }
        else
        {
          return (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::getTruncateExpr(this, (const llvm::SCEV *)a2, a3, a4);
        }
    }
  }
}

uint64_t llvm::ScalarEvolution::getTruncateExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2, llvm::Type *a3, unsigned int a4)
{
  unint64_t v5 = a3;
  v183[16] = *MEMORY[0x1E4F143B8];
  v172 = a2;
  unsigned int v8 = *((_DWORD *)a3 + 2);
  if (v8 != 13)
  {
    uint64_t v9 = *(void *)(*(void *)this + 40);
    if ((v8 & 0xFE) == 0x12) {
      unsigned int v8 = *(_DWORD *)(**((void **)a3 + 2) + 8);
    }
    uint64_t v10 = *(void *)(v9 + 504);
    if (v8 < 0x100) {
      goto LABEL_13;
    }
    unsigned int v11 = v8 >> 8;
    unint64_t v12 = *(unsigned int *)(v9 + 512);
    uint64_t v13 = v10;
    if (v12)
    {
      uint64_t v13 = v10;
      unint64_t v14 = v12;
      do
      {
        unint64_t v15 = v14 >> 1;
        uint64_t v16 = v13 + 16 * (v14 >> 1);
        unsigned int v17 = *(_DWORD *)(v16 + 8);
        uint64_t v18 = v16 + 16;
        v14 += ~(v14 >> 1);
        if (v17 < v11) {
          uint64_t v13 = v18;
        }
        else {
          unint64_t v14 = v15;
        }
      }
      while (v14);
    }
    if (v13 == v10 + 16 * v12 || *(_DWORD *)(v13 + 8) != v11) {
LABEL_13:
    }
      uint64_t v13 = v10;
    unsigned int v19 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)a3, (llvm::LLVMContext *)*(unsigned int *)(v13 + 12));
    if ((*((_DWORD *)v5 + 2) & 0xFE) == 0x12)
    {
      v169 = (llvm::Type *)*((unsigned int *)v5 + 8);
      if (*((_DWORD *)v5 + 2) == 19) {
        llvm::ScalableVectorType::get(v19, v169);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v19, v169);
      }
    }
    unint64_t v5 = (llvm::Type *)v19;
  }
  __s1 = v180;
  *(_DWORD *)v180 = 1;
  *(void *)&v180[4] = a2;
  *(void *)&v180[12] = v5;
  uint64_t v179 = 0x2000000005;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v168 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v168 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v168;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  uint64_t v20 = __ROR8__(0xB492B66FBE98F273 * *(void *)v180 - *(void *)&v180[8], 43)
      - 0x3C5A37A36834CED9 * *(void *)&v180[4]
      + __ROR8__((0x9AE16A3B2F90404FLL * *(void *)&v180[12]) ^ qword_1EBCBE580, 30);
  unint64_t v21 = qword_1EBCBE580
      + __ROR8__(*(void *)&v180[8] ^ 0xC949D7C7509E6557, 20)
      - 0x4B6D499041670D8DLL * *(void *)v180
      - 0x9AE16A3B2F90404FLL * *(void *)&v180[12]
      + 20;
  unint64_t v22 = 0x9DDFEA08EB382D69
      * (v21 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v21)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v21)));
  uint64_t v23 = *((void *)this + 104)
      + 8 * ((-348639895 * ((v22 >> 47) ^ v22)) & (*((_DWORD *)this + 210) - 1));
  uint64_t AddRecExpr = *(void *)v23;
  v181 = v183;
  uint64_t v182 = 0x2000000000;
  if (AddRecExpr) {
    BOOL v25 = (AddRecExpr & 1) == 0;
  }
  else {
    BOOL v25 = 0;
  }
  if (v25)
  {
    while (*(void *)(AddRecExpr + 16) != v179
         || memcmp(__s1, *(const void **)(AddRecExpr + 8), 4 * v179))
    {
      LODWORD(v182) = 0;
      uint64_t AddRecExpr = *(void *)AddRecExpr;
      if (AddRecExpr) {
        BOOL v26 = (AddRecExpr & 1) == 0;
      }
      else {
        BOOL v26 = 0;
      }
      if (!v26) {
        goto LABEL_28;
      }
    }
    goto LABEL_37;
  }
LABEL_28:
  unsigned int v27 = v172;
  int v28 = *((unsigned __int16 *)v172 + 12);
  if (v172 && !*((_WORD *)v172 + 12))
  {
    uint64_t v29 = sub_1CC56C0C0((llvm *)0x26, *((llvm::detail::IEEEFloat **)v172 + 4), v5, 0);
    unsigned int v30 = this;
LABEL_31:
    uint64_t Constant = llvm::ScalarEvolution::getConstant(v30, v29);
LABEL_36:
    uint64_t AddRecExpr = Constant;
    goto LABEL_37;
  }
  if (v172 && v28 == 1)
  {
    uint64_t v32 = (const llvm::SCEV *)*((void *)v172 + 4);
    unsigned int v33 = a4 + 1;
    unint64_t v34 = this;
    uint64_t v35 = v5;
LABEL_35:
    uint64_t Constant = llvm::ScalarEvolution::getTruncateExpr(v34, v32, v35, v33);
    goto LABEL_36;
  }
  if (v172 && v28 == 3)
  {
    uint64_t AddRecExpr = *((void *)v172 + 4);
    uint64_t v37 = a4 + 1;
    uint64_t v38 = AddRecExpr;
    while (2)
    {
      switch(*(_WORD *)(v38 + 24))
      {
        case 1:
        case 2:
        case 3:
        case 0xD:
          uint64_t v56 = (uint64_t *)(v38 + 40);
          goto LABEL_76;
        case 4:
          uint64_t v56 = (uint64_t *)(v38 + 48);
          goto LABEL_76;
        case 5:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          unsigned int v39 = *(uint64_t **)(v38 + 32);
          goto LABEL_45;
        case 6:
          unsigned int v39 = (uint64_t *)(v38 + 40);
LABEL_45:
          uint64_t v38 = *v39;
          continue;
        case 0xE:
          uint64_t v56 = *(uint64_t **)(v38 - 8);
          goto LABEL_76;
        default:
          uint64_t v56 = *(uint64_t **)(v38 + 32);
LABEL_76:
          uint64_t v61 = *v56;
          unsigned int v62 = *(_DWORD *)(*v56 + 8);
          uint64_t v63 = *(void *)(*(void *)this + 40);
          if (v62 == 15)
          {
            if ((v62 & 0xFE) == 0x12) {
              unsigned int v62 = *(_DWORD *)(**(void **)(v61 + 16) + 8);
            }
            uint64_t v117 = *(void *)(v63 + 504);
            if (v62 < 0x100) {
              goto LABEL_166;
            }
            unsigned int v118 = v62 >> 8;
            unint64_t v119 = *(unsigned int *)(v63 + 512);
            uint64_t v120 = *(void *)(v63 + 504);
            if (v119)
            {
              uint64_t v120 = v117;
              unint64_t v121 = v119;
              do
              {
                unint64_t v122 = v121 >> 1;
                uint64_t v123 = v120 + 16 * (v121 >> 1);
                unsigned int v124 = *(_DWORD *)(v123 + 8);
                uint64_t v125 = v123 + 16;
                v121 += ~(v121 >> 1);
                if (v124 < v118) {
                  uint64_t v120 = v125;
                }
                else {
                  unint64_t v121 = v122;
                }
              }
              while (v121);
            }
            if (v120 == v117 + 16 * v119 || *(_DWORD *)(v120 + 8) != v118) {
LABEL_166:
            }
              uint64_t v120 = v117;
            uint64_t v65 = *(unsigned int *)(v120 + 12);
          }
          else
          {
            uint64_t v65 = sub_1CB83544C(v63 + 272, v61);
            if (v64 == 1) {
          }
            }
          unsigned int v66 = *((_DWORD *)v5 + 2);
          uint64_t v67 = *(void *)(*(void *)this + 40);
          if (v66 == 15)
          {
            if ((v66 & 0xFE) == 0x12) {
              unsigned int v66 = *(_DWORD *)(**((void **)v5 + 2) + 8);
            }
            uint64_t v126 = *(void *)(v67 + 504);
            if (v66 < 0x100) {
              goto LABEL_179;
            }
            unsigned int v127 = v66 >> 8;
            unint64_t v128 = *(unsigned int *)(v67 + 512);
            uint64_t v129 = *(void *)(v67 + 504);
            if (v128)
            {
              uint64_t v129 = v126;
              unint64_t v130 = v128;
              do
              {
                unint64_t v131 = v130 >> 1;
                uint64_t v132 = v129 + 16 * (v130 >> 1);
                unsigned int v133 = *(_DWORD *)(v132 + 8);
                uint64_t v134 = v132 + 16;
                v130 += ~(v130 >> 1);
                if (v133 < v127) {
                  uint64_t v129 = v134;
                }
                else {
                  unint64_t v130 = v131;
                }
              }
              while (v130);
            }
            if (v129 == v126 + 16 * v128 || *(_DWORD *)(v129 + 8) != v127) {
LABEL_179:
            }
              uint64_t v129 = v126;
            uint64_t v69 = *(unsigned int *)(v129 + 12);
          }
          else
          {
            uint64_t v69 = sub_1CB83544C(v67 + 272, (uint64_t)v5);
            if (v68 == 1) {
          }
            }
          if (v65 == v69) {
            goto LABEL_37;
          }
          unsigned int v70 = *(_DWORD *)(v61 + 8);
          uint64_t v71 = *(void *)(*(void *)this + 40);
          if (v70 == 15)
          {
            if ((v70 & 0xFE) == 0x12) {
              unsigned int v70 = *(_DWORD *)(**(void **)(v61 + 16) + 8);
            }
            uint64_t v150 = *(void *)(v71 + 504);
            if (v70 < 0x100) {
              goto LABEL_221;
            }
            unsigned int v151 = v70 >> 8;
            unint64_t v152 = *(unsigned int *)(v71 + 512);
            uint64_t v153 = *(void *)(v71 + 504);
            if (v152)
            {
              uint64_t v153 = v150;
              unint64_t v154 = v152;
              do
              {
                unint64_t v155 = v154 >> 1;
                uint64_t v156 = v153 + 16 * (v154 >> 1);
                unsigned int v157 = *(_DWORD *)(v156 + 8);
                uint64_t v158 = v156 + 16;
                v154 += ~(v154 >> 1);
                if (v157 < v151) {
                  uint64_t v153 = v158;
                }
                else {
                  unint64_t v154 = v155;
                }
              }
              while (v154);
            }
            if (v153 == v150 + 16 * v152 || *(_DWORD *)(v153 + 8) != v151) {
LABEL_221:
            }
              uint64_t v153 = v150;
            unint64_t v73 = *(unsigned int *)(v153 + 12);
          }
          else
          {
            unint64_t v73 = sub_1CB83544C(v71 + 272, v61);
            if (v72 == 1) {
          }
            }
          unsigned int v74 = *((_DWORD *)v5 + 2);
          uint64_t v75 = *(void *)(*(void *)this + 40);
          if (v74 == 15)
          {
            if ((v74 & 0xFE) == 0x12) {
              unsigned int v74 = *(_DWORD *)(**((void **)v5 + 2) + 8);
            }
            uint64_t v159 = *(void *)(v75 + 504);
            if (v74 < 0x100) {
              goto LABEL_234;
            }
            unsigned int v160 = v74 >> 8;
            unint64_t v161 = *(unsigned int *)(v75 + 512);
            uint64_t v162 = *(void *)(v75 + 504);
            if (v161)
            {
              uint64_t v162 = v159;
              unint64_t v163 = v161;
              do
              {
                unint64_t v164 = v163 >> 1;
                uint64_t v165 = v162 + 16 * (v163 >> 1);
                unsigned int v166 = *(_DWORD *)(v165 + 8);
                uint64_t v167 = v165 + 16;
                v163 += ~(v163 >> 1);
                if (v166 < v160) {
                  uint64_t v162 = v167;
                }
                else {
                  unint64_t v163 = v164;
                }
              }
              while (v163);
            }
            if (v162 == v159 + 16 * v161 || *(_DWORD *)(v162 + 8) != v160) {
LABEL_234:
            }
              uint64_t v162 = v159;
            unint64_t v77 = *(unsigned int *)(v162 + 12);
          }
          else
          {
            unint64_t v77 = sub_1CB83544C(v75 + 272, (uint64_t)v5);
            if (v76 == 1) {
          }
            }
          unint64_t v34 = this;
          uint64_t v32 = (const llvm::SCEV *)AddRecExpr;
          uint64_t v35 = v5;
          unsigned int v33 = v37;
          if (v73 > v77) {
            goto LABEL_35;
          }
          uint64_t Constant = llvm::ScalarEvolution::getSignExtendExpr(this, (llvm::detail::IEEEFloat **)AddRecExpr, (uint64_t **)v5, v37);
          break;
      }
      goto LABEL_36;
    }
  }
  if (v28 == 2)
  {
    uint64_t Constant = (uint64_t)llvm::ScalarEvolution::getTruncateOrZeroExtend(this, *((llvm::detail::IEEEFloat ***)v172 + 4), v5, a4 + 1);
    goto LABEL_36;
  }
  unint64_t v40 = (char *)this + 832;
  if (dword_1EBCC7BB8 < a4)
  {
    *((void *)this + 118) += 48;
    uint64_t v41 = *((void *)this + 108);
    if (((v41 + 7) & 0xFFFFFFFFFFFFFFF8) - v41 + 48 > *((void *)this + 109) - v41)
    {
      unsigned int v135 = *((_DWORD *)this + 222) >> 7;
      if (v135 >= 0x1E) {
        LOBYTE(v135) = 30;
      }
      uint64_t v136 = 4096 << v135;
      uint64_t AddRecExpr = (uint64_t)operator new(4096 << v135, (std::align_val_t)8uLL);
      unsigned int v137 = *((_DWORD *)this + 222);
      if (v137 >= *((_DWORD *)this + 223)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*((void *)this + 110) + 8 * v137) = AddRecExpr;
      ++*((_DWORD *)this + 222);
      *((void *)this + 109) = AddRecExpr + v136;
    }
    else
    {
      uint64_t AddRecExpr = (v41 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 108) = AddRecExpr + 48;
    uint64_t v42 = sub_1CB906F34((uint64_t *)this + 108, 4 * v179, 2);
    uint64_t v43 = v42;
    if (v179)
    {
      uint64_t v44 = (int *)__s1;
      uint64_t v45 = 4 * v179;
      uint64_t v46 = (_DWORD *)v42;
      do
      {
        int v47 = *v44++;
        *v46++ = v47;
        v45 -= 4;
      }
      while (v45);
LABEL_55:
      uint64_t v48 = v179;
LABEL_56:
      unint64_t v49 = v172;
      LODWORD(v182) = 16;
      v181 = (void *)1;
      uint64_t v50 = *((unsigned __int16 *)v172 + 13);
      int v174 = 16;
      uint64_t v173 = v50;
      llvm::APInt::uadd_sat((llvm::APInt *)&v181, (const llvm::APInt *)&v173, (uint64_t)&v175);
      __int16 v51 = (__int16)v175;
      uint64_t v171 = (uint64_t)v40;
      if (v176 > 0x40)
      {
        uint64_t v52 = *(void *)v175;
        MEMORY[0x1D25D9CB0]();
        __int16 v51 = v52;
      }
      *(void *)uint64_t AddRecExpr = 0;
      *(void *)(AddRecExpr + 8) = v43;
      *(void *)(AddRecExpr + 16) = v48;
      *(_WORD *)(AddRecExpr + 24) = 1;
      *(_WORD *)(AddRecExpr + 26) = v51;
      *(_WORD *)(AddRecExpr + 28) = 0;
      *(void *)(AddRecExpr + 32) = v49;
      *(void *)(AddRecExpr + 40) = v5;
      unsigned int v53 = *((_DWORD *)this + 211) + 1;
      int v54 = *((_DWORD *)this + 210);
      if (v53 > 2 * v54)
      {
        llvm::FoldingSetBase::GrowBucketCount(v171, 2 * v54, (uint64_t)off_1F2607658);
        v181 = v183;
        uint64_t v182 = 0x2000000000;
        uint64_t v23 = *((void *)this + 104)
            + 8
            * ((*((_DWORD *)this + 210) - 1) & sub_1CC13A6B8(*(void **)(AddRecExpr + 8), *(void *)(AddRecExpr + 8)+ 4 * *(void *)(AddRecExpr + 16)));
        if (v181 != v183) {
          free(v181);
        }
        unsigned int v53 = *((_DWORD *)this + 211) + 1;
      }
      *((_DWORD *)this + 211) = v53;
      uint64_t v55 = *(void *)v23;
      if (!*(void *)v23) {
        uint64_t v55 = v23 | 1;
      }
      *(void *)uint64_t AddRecExpr = v55;
      *(void *)uint64_t v23 = AddRecExpr;
      llvm::ScalarEvolution::registerUser((uint64_t)this, AddRecExpr, (uint64_t *)&v172, 1);
      goto LABEL_37;
    }
    goto LABEL_136;
  }
  if ((v28 & 0xFFFE) == 4)
  {
    v175 = v177;
    uint64_t v176 = 0x400000000;
    if (*((_DWORD *)v172 + 10))
    {
      uint64_t v57 = 0;
      unsigned int v58 = 0;
      uint64_t v59 = 8 * *((unsigned int *)v172 + 10) - 8;
      do
      {
        uint64_t TruncateExpr = llvm::ScalarEvolution::getTruncateExpr(this, *(const llvm::SCEV **)(*((void *)v27 + 4) + v57), v5, a4 + 1);
        if (*(unsigned __int16 *)(*(void *)(*((void *)v27 + 4) + v57) + 24) - 1 >= 3
          && *(_WORD *)(TruncateExpr + 24) == 1)
        {
          ++v58;
        }
        if (v176 >= (unint64_t)HIDWORD(v176)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v175 + v176) = TruncateExpr;
        LODWORD(v176) = v176 + 1;
        if (v59 == v57) {
          break;
        }
        v57 += 8;
      }
      while (v58 < 2);
      if (v58 > 1)
      {
        uint64_t v23 = *((void *)this + 104)
            + 8
            * ((*((_DWORD *)this + 210) - 1) & sub_1CC13A6B8(__s1, (uint64_t)__s1 + 4 * v179));
        uint64_t AddRecExpr = *(void *)v23;
        v181 = v183;
        uint64_t v182 = 0x2000000000;
        if (AddRecExpr) {
          BOOL v80 = (AddRecExpr & 1) == 0;
        }
        else {
          BOOL v80 = 0;
        }
        if (v80)
        {
          uint64_t v81 = v179;
          uint64_t v82 = __s1;
          size_t v83 = 4 * v179;
          while (*(void *)(AddRecExpr + 16) != v81 || memcmp(v82, *(const void **)(AddRecExpr + 8), v83))
          {
            LODWORD(v182) = 0;
            uint64_t AddRecExpr = *(void *)AddRecExpr;
            if (AddRecExpr) {
              BOOL v84 = (AddRecExpr & 1) == 0;
            }
            else {
              BOOL v84 = 0;
            }
            if (!v84) {
              goto LABEL_109;
            }
          }
          uint64_t v23 = 0;
        }
        else
        {
LABEL_109:
          uint64_t AddRecExpr = 0;
        }
        BOOL v79 = AddRecExpr != 0;
        unint64_t v40 = (char *)this + 832;
        goto LABEL_113;
      }
      unint64_t v40 = (char *)this + 832;
      int v28 = *((unsigned __int16 *)v172 + 12);
    }
    if (v28 == 4) {
      uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(this, &v175, 0, 0);
    }
    else {
      uint64_t AddExpr = llvm::ScalarEvolution::getMulExpr(this, &v175, 0, 0);
    }
    uint64_t AddRecExpr = AddExpr;
    BOOL v79 = 1;
LABEL_113:
    if (v175 != v177) {
      free(v175);
    }
    if (v79) {
      goto LABEL_37;
    }
    unsigned int v27 = v172;
    int v28 = *((unsigned __int16 *)v172 + 12);
  }
  if (v28 != 7)
  {
    unint64_t MinTrailingZeros = llvm::ScalarEvolution::GetMinTrailingZeros(this, v27);
    unsigned int v92 = *((_DWORD *)v5 + 2);
    uint64_t v93 = *(void *)(*(void *)this + 40);
    if (v92 == 15)
    {
      if ((v92 & 0xFE) == 0x12) {
        unsigned int v92 = *(_DWORD *)(**((void **)v5 + 2) + 8);
      }
      uint64_t v138 = *(void *)(v93 + 504);
      if (v92 < 0x100) {
        goto LABEL_196;
      }
      unsigned int v139 = v92 >> 8;
      unint64_t v140 = *(unsigned int *)(v93 + 512);
      uint64_t v141 = *(void *)(v93 + 504);
      if (v140)
      {
        uint64_t v141 = v138;
        unint64_t v142 = v140;
        do
        {
          unint64_t v143 = v142 >> 1;
          uint64_t v144 = v141 + 16 * (v142 >> 1);
          unsigned int v145 = *(_DWORD *)(v144 + 8);
          uint64_t v146 = v144 + 16;
          v142 += ~(v142 >> 1);
          if (v145 < v139) {
            uint64_t v141 = v146;
          }
          else {
            unint64_t v142 = v143;
          }
        }
        while (v142);
      }
      if (v141 == v138 + 16 * v140 || *(_DWORD *)(v141 + 8) != v139) {
LABEL_196:
      }
        uint64_t v141 = v138;
      unint64_t v95 = *(unsigned int *)(v141 + 12);
    }
    else
    {
      unint64_t v95 = sub_1CB83544C(v93 + 272, (uint64_t)v5);
      if (v94 == 1) {
    }
      }
    if (v95 <= MinTrailingZeros)
    {
      unsigned int v102 = *((_DWORD *)v5 + 2);
      if (v102 != 13)
      {
        uint64_t v103 = *(void *)(*(void *)this + 40);
        if ((v102 & 0xFE) == 0x12) {
          unsigned int v102 = *(_DWORD *)(**((void **)v5 + 2) + 8);
        }
        uint64_t v104 = *(void *)(v103 + 504);
        if (v102 < 0x100) {
          goto LABEL_149;
        }
        unsigned int v105 = v102 >> 8;
        unint64_t v106 = *(unsigned int *)(v103 + 512);
        uint64_t v107 = v104;
        if (v106)
        {
          uint64_t v107 = v104;
          unint64_t v108 = v106;
          do
          {
            unint64_t v109 = v108 >> 1;
            uint64_t v110 = v107 + 16 * (v108 >> 1);
            unsigned int v111 = *(_DWORD *)(v110 + 8);
            uint64_t v112 = v110 + 16;
            v108 += ~(v108 >> 1);
            if (v111 < v105) {
              uint64_t v107 = v112;
            }
            else {
              unint64_t v108 = v109;
            }
          }
          while (v108);
        }
        if (v107 == v104 + 16 * v106 || *(_DWORD *)(v107 + 8) != v105) {
LABEL_149:
        }
          uint64_t v107 = v104;
        v113 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v5, (llvm::LLVMContext *)*(unsigned int *)(v107 + 12));
        if ((*((_DWORD *)v5 + 2) & 0xFE) == 0x12)
        {
          v170 = (llvm::Type *)*((unsigned int *)v5 + 8);
          if (*((_DWORD *)v5 + 2) == 19) {
            llvm::ScalableVectorType::get(v113, v170);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v113, v170);
          }
        }
        unint64_t v5 = (llvm::Type *)v113;
      }
      v114 = *(llvm::ConstantInt **)v5;
      unsigned int v115 = *((_DWORD *)v5 + 2);
      LODWORD(v182) = v115 >> 8;
      if (v115 >> 8 >= 0x41) {
        operator new[]();
      }
      v181 = 0;
      v116 = (llvm::ConstantInt *)llvm::ConstantInt::get(v114, (llvm::LLVMContext *)&v181, v90);
      if (v182 >= 0x41 && v181) {
        MEMORY[0x1D25D9CB0](v181, 0x1000C8000313F17);
      }
      unsigned int v30 = this;
      uint64_t v29 = v116;
      goto LABEL_31;
    }
    *((void *)this + 118) += 48;
    uint64_t v96 = *((void *)this + 108);
    if (((v96 + 7) & 0xFFFFFFFFFFFFFFF8) - v96 + 48 > *((void *)this + 109) - v96)
    {
      unsigned int v147 = *((_DWORD *)this + 222) >> 7;
      if (v147 >= 0x1E) {
        LOBYTE(v147) = 30;
      }
      uint64_t v148 = 4096 << v147;
      uint64_t AddRecExpr = (uint64_t)operator new(4096 << v147, (std::align_val_t)8uLL);
      unsigned int v149 = *((_DWORD *)this + 222);
      if (v149 >= *((_DWORD *)this + 223)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*((void *)this + 110) + 8 * v149) = AddRecExpr;
      ++*((_DWORD *)this + 222);
      *((void *)this + 109) = AddRecExpr + v148;
    }
    else
    {
      uint64_t AddRecExpr = (v96 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 108) = AddRecExpr + 48;
    uint64_t v97 = sub_1CB906F34((uint64_t *)this + 108, 4 * v179, 2);
    uint64_t v43 = v97;
    if (v179)
    {
      unsigned int v98 = (int *)__s1;
      uint64_t v99 = 4 * v179;
      uint64_t v100 = (_DWORD *)v97;
      do
      {
        int v101 = *v98++;
        *v100++ = v101;
        v99 -= 4;
      }
      while (v99);
      goto LABEL_55;
    }
LABEL_136:
    uint64_t v48 = 0;
    goto LABEL_56;
  }
  v181 = v183;
  uint64_t v182 = 0x400000000;
  uint64_t v85 = *((void *)v27 + 5);
  if (v85)
  {
    unsigned int v86 = (const llvm::SCEV **)*((void *)v27 + 4);
    unsigned int v87 = a4 + 1;
    uint64_t v88 = 8 * v85;
    do
    {
      uint64_t v89 = llvm::ScalarEvolution::getTruncateExpr(this, *v86, v5, v87);
      if (v182 >= (unint64_t)HIDWORD(v182)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v181 + v182) = v89;
      LODWORD(v182) = v182 + 1;
      ++v86;
      v88 -= 8;
    }
    while (v88);
  }
  uint64_t AddRecExpr = llvm::ScalarEvolution::getAddRecExpr(this, (uint64_t **)&v181, *((const llvm::Loop **)v27 + 6), 0);
  if (v181 != v183) {
    free(v181);
  }
LABEL_37:
  if (__s1 != v180) {
    free(__s1);
  }
  return AddRecExpr;
}

const llvm::SCEV *llvm::ScalarEvolution::getTruncateOrSignExtend(llvm::ScalarEvolution *this, const llvm::SCEV *a2, llvm::Type *a3, unsigned int a4)
{
  unsigned int v8 = a2;
  while (2)
  {
    switch(*((_WORD *)v8 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        uint64_t v9 = (uint64_t *)((char *)v8 + 40);
        goto LABEL_4;
      case 4:
        uint64_t v9 = (uint64_t *)((char *)v8 + 48);
        goto LABEL_4;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v20 = (const llvm::SCEV **)*((void *)v8 + 4);
        goto LABEL_15;
      case 6:
        uint64_t v20 = (const llvm::SCEV **)((char *)v8 + 40);
LABEL_15:
        unsigned int v8 = *v20;
        continue;
      case 0xE:
        uint64_t v9 = (uint64_t *)*((void *)v8 - 1);
        goto LABEL_4;
      default:
        uint64_t v9 = (uint64_t *)*((void *)v8 + 4);
LABEL_4:
        uint64_t v10 = *v9;
        unsigned int v11 = *(_DWORD *)(*v9 + 8);
        uint64_t v12 = *(void *)(*(void *)this + 40);
        if (v11 == 15)
        {
          if ((v11 & 0xFE) == 0x12) {
            unsigned int v11 = *(_DWORD *)(**(void **)(v10 + 16) + 8);
          }
          uint64_t v21 = *(void *)(v12 + 504);
          if (v11 < 0x100) {
            goto LABEL_28;
          }
          unsigned int v22 = v11 >> 8;
          unint64_t v23 = *(unsigned int *)(v12 + 512);
          uint64_t v24 = *(void *)(v12 + 504);
          if (v23)
          {
            uint64_t v24 = v21;
            unint64_t v25 = v23;
            do
            {
              unint64_t v26 = v25 >> 1;
              uint64_t v27 = v24 + 16 * (v25 >> 1);
              unsigned int v28 = *(_DWORD *)(v27 + 8);
              uint64_t v29 = v27 + 16;
              v25 += ~(v25 >> 1);
              if (v28 < v22) {
                uint64_t v24 = v29;
              }
              else {
                unint64_t v25 = v26;
              }
            }
            while (v25);
          }
          if (v24 == v21 + 16 * v23 || *(_DWORD *)(v24 + 8) != v22) {
LABEL_28:
          }
            uint64_t v24 = v21;
          uint64_t v14 = *(unsigned int *)(v24 + 12);
        }
        else
        {
          uint64_t v14 = sub_1CB83544C(v12 + 272, v10);
          if (v13 == 1) {
        }
          }
        unsigned int v15 = *((_DWORD *)a3 + 2);
        uint64_t v16 = *(void *)(*(void *)this + 40);
        if (v15 == 15)
        {
          if ((v15 & 0xFE) == 0x12) {
            unsigned int v15 = *(_DWORD *)(**((void **)a3 + 2) + 8);
          }
          uint64_t v30 = *(void *)(v16 + 504);
          if (v15 < 0x100) {
            goto LABEL_41;
          }
          unsigned int v31 = v15 >> 8;
          unint64_t v32 = *(unsigned int *)(v16 + 512);
          uint64_t v33 = *(void *)(v16 + 504);
          if (v32)
          {
            uint64_t v33 = v30;
            unint64_t v34 = v32;
            do
            {
              unint64_t v35 = v34 >> 1;
              uint64_t v36 = v33 + 16 * (v34 >> 1);
              unsigned int v37 = *(_DWORD *)(v36 + 8);
              uint64_t v38 = v36 + 16;
              v34 += ~(v34 >> 1);
              if (v37 < v31) {
                uint64_t v33 = v38;
              }
              else {
                unint64_t v34 = v35;
              }
            }
            while (v34);
          }
          if (v33 == v30 + 16 * v32 || *(_DWORD *)(v33 + 8) != v31) {
LABEL_41:
          }
            uint64_t v33 = v30;
          uint64_t v17 = *(unsigned int *)(v33 + 12);
        }
        else
        {
          uint64_t v17 = sub_1CB83544C(v16 + 272, (uint64_t)a3);
          if (v18 == 1)
          {
            uint64_t v45 = v17;
            uint64_t v17 = v45;
          }
        }
        if (v14 == v17) {
          return a2;
        }
        uint64_t v39 = *(void *)(*(void *)this + 40) + 272;
        if (*(unsigned char *)(v10 + 8) == 15)
        {
          Indexunsigned int TypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v39, v10);
        }
        else
        {
          Indexunsigned int TypeSizeInBits = sub_1CB83544C(v39, v10);
          if (v40 == 1) {
        }
          }
        uint64_t v42 = *(void *)(*(void *)this + 40) + 272;
        if (*((unsigned char *)a3 + 8) == 15)
        {
          unint64_t v44 = llvm::DataLayout::getIndexTypeSizeInBits(v42, (uint64_t)a3);
        }
        else
        {
          unint64_t v44 = sub_1CB83544C(v42, (uint64_t)a3);
          if (v43 == 1) {
        }
          }
        if (IndexTypeSizeInBits <= v44)
        {
          return (const llvm::SCEV *)llvm::ScalarEvolution::getSignExtendExpr(this, a2, a3, a4);
        }
        else
        {
          return (const llvm::SCEV *)llvm::ScalarEvolution::getTruncateExpr(this, a2, a3, a4);
        }
    }
  }
}

uint64_t llvm::ScalarEvolution::getAddExpr(uint64_t a1, unint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v424 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)a2 + 2) == 1) {
    return **a2;
  }
  sub_1CC0ECBE8((uint64_t)a2, *(uint64_t **)(a1 + 40), *(void *)(a1 + 32));
  uint64_t v9 = *a2;
  unint64_t v10 = **a2;
  if (v10) {
    BOOL v11 = *(unsigned __int16 *)(v10 + 24) == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (!v11)
  {
    LODWORD(v12) = 0;
    unsigned int v13 = *((_DWORD *)a2 + 2);
    goto LABEL_38;
  }
  unint64_t v14 = v9[1];
  if (v14) {
    BOOL v15 = *(unsigned __int16 *)(v14 + 24) == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    do
    {
      uint64_t v18 = *(void *)(v10 + 32);
      unsigned int v19 = *(_DWORD *)(v18 + 32);
      if (v19 >= 0x41) {
        operator new[]();
      }
      unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
      if (!v19) {
        unint64_t v20 = 0;
      }
      uint64_t v21 = (llvm::SCEV *)(v20 & (*(void *)(*(void *)(v14 + 32) + 24) + *(void *)(v18 + 24)));
      LODWORD(v421) = *(_DWORD *)(v18 + 32);
      v420 = v21;
      unsigned int v22 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)a1, (llvm::LLVMContext *)&v420, v8);
      **a2 = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a1, v22);
      if (v421 >= 0x41 && v420) {
        MEMORY[0x1D25D9CB0](v420, 0x1000C8000313F17);
      }
      uint64_t v23 = *((unsigned int *)a2 + 2);
      if (v23 == 2) {
        return **a2;
      }
      memmove(*a2 + 1, *a2 + 2, 8 * v23 - 16);
      --*((_DWORD *)a2 + 2);
      uint64_t v9 = *a2;
      unint64_t v10 = **a2;
      unint64_t v14 = (*a2)[1];
    }
    while (v14 && !*(_WORD *)(v14 + 24));
  }
  uint64_t v16 = *(void *)(v10 + 32);
  uint64_t v17 = *(unsigned int *)(v16 + 32);
  if (v17 > 0x40)
  {
    int v24 = 0;
    int64_t v25 = (unint64_t)(v17 + 63) >> 6;
    do
    {
      BOOL v195 = v25-- < 1;
      if (v195) {
        break;
      }
      unint64_t v26 = *(void *)(*(void *)(v16 + 24) + 8 * v25);
      v24 += __clz(v26);
    }
    while (!v26);
    int v27 = v17 | 0xFFFFFFC0;
    if ((v17 & 0x3F) == 0) {
      int v27 = 0;
    }
    if (v24 + v27 != v17) {
      goto LABEL_14;
    }
  }
  else if (*(void *)(v16 + 24))
  {
LABEL_14:
    unsigned int v13 = *((_DWORD *)a2 + 2);
    LODWORD(v12) = 1;
    goto LABEL_36;
  }
  uint64_t v28 = *((unsigned int *)a2 + 2);
  if (v28 != 1)
  {
    memmove(v9, v9 + 1, 8 * v28 - 8);
    LODWORD(v28) = *((_DWORD *)a2 + 2);
    uint64_t v9 = *a2;
  }
  LODWORD(v12) = 0;
  unsigned int v13 = v28 - 1;
  *((_DWORD *)a2 + 2) = v13;
LABEL_36:
  if (v13 == 1) {
    return *v9;
  }
LABEL_38:
  uint64_t v29 = v13;
  if (dword_1EBCC7A38 < a4)
  {
LABEL_39:
    __int16 v30 = sub_1CC0EF280(a1, 4, v9, v13, a3);
    uint64_t v31 = a1;
    unint64_t v32 = (uint64_t *)v9;
    uint64_t v33 = v29;
    return llvm::ScalarEvolution::getOrCreateAddExpr(v31, v32, v33, v30);
  }
  if (v13)
  {
    uint64_t v36 = 8 * v13;
    uint64_t v37 = v36;
    uint64_t v38 = v9;
    do
    {
      if (dword_1EBCC7D38 <= *(unsigned __int16 *)(*v38 + 26)) {
        goto LABEL_39;
      }
      ++v38;
      v37 -= 8;
    }
    while (v37);
    __s1 = &v418;
    LODWORD(v418) = 4;
    uint64_t v417 = 0x2000000001;
    unsigned int v39 = 1;
    do
    {
      unint64_t v40 = *v9;
      if (v39 >= HIDWORD(v417)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__s1 + v39) = v40;
      unsigned int v41 = v417 + 1;
      LODWORD(v417) = v41;
      if (v41 >= HIDWORD(v417)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__s1 + v41) = HIDWORD(v40);
      unsigned int v39 = v417 + 1;
      LODWORD(v417) = v417 + 1;
      ++v9;
      v36 -= 8;
    }
    while (v36);
    uint64_t v42 = __s1;
  }
  else
  {
    uint64_t v42 = &v418;
    __s1 = &v418;
    LODWORD(v418) = 4;
    uint64_t v417 = 0x2000000001;
    unsigned int v39 = 1;
  }
  uint64_t MulExpr = *(void *)(*(void *)(a1 + 832)
                      + 8 * ((*(_DWORD *)(a1 + 840) - 1) & sub_1CC13A6B8(v42, (uint64_t)v42 + 4 * v39)));
  v420 = (llvm::SCEV *)&v422;
  uint64_t v421 = 0x2000000000;
  if (MulExpr) {
    BOOL v44 = (MulExpr & 1) == 0;
  }
  else {
    BOOL v44 = 0;
  }
  if (v44)
  {
    while (*(void *)(MulExpr + 16) != v417
         || memcmp(__s1, *(const void **)(MulExpr + 8), 4 * v417))
    {
      LODWORD(v421) = 0;
      uint64_t MulExpr = *(void *)MulExpr;
      if (MulExpr) {
        BOOL v45 = (MulExpr & 1) == 0;
      }
      else {
        BOOL v45 = 0;
      }
      if (!v45) {
        goto LABEL_66;
      }
    }
  }
  else
  {
LABEL_66:
    uint64_t MulExpr = 0;
  }
  if (__s1 == &v418)
  {
    if (MulExpr) {
      goto LABEL_69;
    }
  }
  else
  {
    free(__s1);
    if (MulExpr)
    {
LABEL_69:
      if ((a3 & ~*(unsigned __int16 *)(MulExpr + 28)) != 0) {
        *(_WORD *)(MulExpr + 28) |= sub_1CC0EF280(a1, 4, *a2, *((unsigned int *)a2 + 2), a3);
      }
      return MulExpr;
    }
  }
  uint64_t v46 = a4;
  int v47 = *a2;
  uint64_t v48 = *a2;
  while (2)
  {
    unint64_t v49 = *v48;
    switch(*(_WORD *)(v49 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        uint64_t v50 = (llvm::Type **)(v49 + 40);
        break;
      case 4:
        uint64_t v50 = (llvm::Type **)(v49 + 48);
        break;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v48 = *(unint64_t **)(v49 + 32);
        continue;
      case 6:
        uint64_t v48 = (unint64_t *)(v49 + 40);
        continue;
      case 0xE:
        uint64_t v50 = *(llvm::Type ***)(v49 - 8);
        break;
      default:
        uint64_t v50 = *(llvm::Type ***)(v49 + 32);
        break;
    }
    break;
  }
  unsigned int v406 = a3;
  __int16 v51 = *v50;
  LODWORD(v52) = *((_DWORD *)a2 + 2);
  v399 = *v50;
  if (v52 == 1)
  {
    LODWORD(v52) = 1;
    goto LABEL_129;
  }
  char v53 = 0;
  int v54 = 0;
  unsigned int v401 = v46 + 1;
  uint64_t MulExpr = -1;
  int v55 = *((_DWORD *)a2 + 2);
LABEL_82:
  unint64_t v56 = v47[v54];
  do
  {
    if (v56 == v47[v54 + 1])
    {
      if (v54 + 2 == v55)
      {
        unsigned int v57 = 2;
      }
      else
      {
        int v58 = 0;
        unsigned int v57 = v55 - v54;
        while (v47[v54 + v58 + 2] == v56)
        {
          ++v58;
          if (v54 - v55 + v58 == -2) {
            goto LABEL_94;
          }
        }
        unsigned int v57 = v58 + 2;
      }
LABEL_94:
      unsigned int v59 = *((_DWORD *)v51 + 2);
      uint64_t v60 = (uint64_t)v51;
      if (v59 != 13)
      {
        if ((v59 & 0xFE) == 0x12) {
          unsigned int v59 = *(_DWORD *)(**((void **)v51 + 2) + 8);
        }
        uint64_t v61 = *(void *)(*(void *)a1 + 40);
        uint64_t v62 = *(void *)(v61 + 504);
        if (v59 < 0x100) {
          goto LABEL_106;
        }
        unsigned int v63 = v59 >> 8;
        unint64_t v64 = *(unsigned int *)(v61 + 512);
        uint64_t v65 = v62;
        if (v64)
        {
          uint64_t v65 = v62;
          unint64_t v66 = v64;
          do
          {
            unint64_t v67 = v66 >> 1;
            uint64_t v68 = v65 + 16 * (v66 >> 1);
            unsigned int v69 = *(_DWORD *)(v68 + 8);
            uint64_t v70 = v68 + 16;
            v66 += ~(v66 >> 1);
            if (v69 < v63) {
              uint64_t v65 = v70;
            }
            else {
              unint64_t v66 = v67;
            }
          }
          while (v66);
        }
        if (v65 == v62 + 16 * v64 || *(_DWORD *)(v65 + 8) != v63) {
LABEL_106:
        }
          uint64_t v65 = v62;
        uint64_t v60 = llvm::IntegerType::get(*(llvm::IntegerType **)v51, (llvm::LLVMContext *)*(unsigned int *)(v65 + 12));
        if ((*((_DWORD *)v51 + 2) & 0xFE) == 0x12)
        {
          unsigned int v86 = (llvm::Type *)*((unsigned int *)v51 + 8);
          if (*((_DWORD *)v51 + 2) == 19) {
            llvm::ScalableVectorType::get((uint64_t **)v60, v86);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v60, v86);
          }
        }
      }
      uint64_t v71 = v46;
      uint64_t v72 = v57;
      unint64_t v73 = *(uint64_t **)v60;
      unsigned int v74 = *(_DWORD *)(v60 + 8);
      LODWORD(v421) = v74 >> 8;
      if (v74 >> 8 > 0x40) {
        operator new[]();
      }
      if (v74 <= 0xFF) {
        unint64_t v75 = 0;
      }
      else {
        unint64_t v75 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v74) + 63);
      }
      v420 = (llvm::SCEV *)(v75 & v72);
      uint64_t v76 = (llvm::ConstantInt *)llvm::ConstantInt::get((llvm::ConstantInt *)v73, (llvm::LLVMContext *)&v420, v43);
      if (v421 >= 0x41 && v420) {
        MEMORY[0x1D25D9CB0](v420, 0x1000C8000313F17);
      }
      unint64_t Constant = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a1, v76);
      size_t v78 = (*a2)[v54];
      v420 = (llvm::SCEV *)&v422;
      unint64_t v422 = Constant;
      size_t v423 = v78;
      uint64_t v421 = 0x200000002;
      uint64_t MulExpr = llvm::ScalarEvolution::getMulExpr(a1, &v420, 0, v401);
      if (v420 != (llvm::SCEV *)&v422) {
        free(v420);
      }
      uint64_t v79 = *((unsigned int *)a2 + 2);
      if (v79 == v72) {
        return MulExpr;
      }
      (*a2)[v54] = MulExpr;
      int v47 = *a2;
      uint64_t v80 = (uint64_t)&(*a2)[v54];
      uint64_t v81 = v80 + 8;
      uint64_t v82 = (const void *)(v80 + 8 * v72);
      uint64_t v83 = (uint64_t)&(*a2)[v79];
      uint64_t v84 = v83 - (void)v82;
      if ((const void *)v83 != v82)
      {
        memmove((void *)(v80 + 8), v82, v83 - (void)v82);
        int v47 = *a2;
      }
      unint64_t v52 = (unint64_t)(v81 + v84 - (void)v47) >> 3;
      *((_DWORD *)a2 + 2) = v52;
      int v85 = v55 - v72;
      int v55 = v55 - v72 + 1;
      char v53 = 1;
      uint64_t v46 = v71;
      __int16 v51 = v399;
      uint64_t MulExpr = -1;
      if (v54 == v85)
      {
LABEL_127:
        uint64_t v87 = a1;
        uint64_t v88 = a2;
        uint64_t v89 = v406;
        uint64_t v90 = v401;
        return llvm::ScalarEvolution::getAddExpr(v87, v88, v89, v90);
      }
      goto LABEL_82;
    }
    unint64_t v56 = v47[v54 + 1];
    BOOL v11 = v54++ == v55 - 2;
  }
  while (!v11);
  if (v53) {
    goto LABEL_127;
  }
LABEL_129:
  unint64_t v91 = v47[v12];
  int v92 = *(unsigned __int16 *)(v91 + 24);
  if (v91) {
    BOOL v93 = v92 == 1;
  }
  else {
    BOOL v93 = 0;
  }
  if (!v93)
  {
    if (v91) {
      BOOL v94 = v92 == 5;
    }
    else {
      BOOL v94 = 0;
    }
    if (v94)
    {
      uint64_t v95 = *(void *)(*(void *)(v91 + 32) + 8 * (*(_DWORD *)(v91 + 40) - 1));
      if (v95 && *(_WORD *)(v95 + 24) == 1)
      {
        uint64_t v100 = (uint64_t *)(v95 + 32);
        uint64_t v97 = v406;
        while (2)
        {
          uint64_t v99 = *v100;
          switch(*(_WORD *)(v99 + 24))
          {
            case 1:
            case 2:
            case 3:
            case 0xD:
              goto LABEL_418;
            case 4:
              goto LABEL_153;
            case 5:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
              uint64_t v100 = *(uint64_t **)(v99 + 32);
              continue;
            case 6:
              uint64_t v100 = (uint64_t *)(v99 + 40);
              continue;
            case 0xE:
              goto LABEL_152;
            default:
              goto LABEL_151;
          }
        }
      }
    }
    uint64_t v97 = v406;
    goto LABEL_239;
  }
  unsigned int v98 = (uint64_t *)(v91 + 32);
  uint64_t v97 = v406;
  while (2)
  {
    uint64_t v99 = *v98;
    switch(*(_WORD *)(v99 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
LABEL_418:
        int v101 = (uint64_t *)(v99 + 40);
        break;
      case 4:
LABEL_153:
        int v101 = (uint64_t *)(v99 + 48);
        break;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        unsigned int v98 = *(uint64_t **)(v99 + 32);
        continue;
      case 6:
        unsigned int v98 = (uint64_t *)(v99 + 40);
        continue;
      case 0xE:
LABEL_152:
        int v101 = *(uint64_t **)(v99 - 8);
        break;
      default:
LABEL_151:
        int v101 = *(uint64_t **)(v99 + 32);
        break;
    }
    break;
  }
  uint64_t MulExpr = *v101;
  if (!*v101)
  {
LABEL_239:
    if (v52 != 2) {
      goto LABEL_257;
    }
    uint64_t v134 = v46;
    unsigned int v135 = *a2;
    unint64_t v136 = **a2;
    if (*(_WORD *)((*a2)[1] + 24) == 4) {
      unint64_t v137 = (*a2)[1];
    }
    else {
      unint64_t v137 = 0;
    }
    int v138 = *(unsigned __int16 *)(v136 + 24);
    if (*(_WORD *)(v136 + 24)) {
      unint64_t v139 = 0;
    }
    else {
      unint64_t v139 = **a2;
    }
    if (v137) {
      BOOL v140 = v139 == 0;
    }
    else {
      BOOL v140 = 1;
    }
    if (v140 || (uint64_t v141 = **(void **)(v137 + 32), *(_WORD *)(v141 + 24)))
    {
LABEL_251:
      if (v138 != 5 || *(void *)(v136 + 40) != 2)
      {
        LODWORD(v52) = 2;
        uint64_t v46 = v134;
        goto LABEL_260;
      }
      unint64_t v142 = *(llvm::SCEV ***)(v136 + 32);
      uint64_t v46 = v134;
      if (!llvm::SCEV::isAllOnesValue(*v142))
      {
        LODWORD(v52) = 2;
        goto LABEL_260;
      }
      v420 = 0;
      __s1 = 0;
      if (llvm::ScalarEvolution::matchURem((llvm::ScalarEvolution *)a1, v142[1], &v420, (const llvm::SCEV **)&__s1)&& v420 == (llvm::SCEV *)(*a2)[1])
      {
        v252 = __s1;
        uint64_t UDivExpr = llvm::ScalarEvolution::getUDivExpr((llvm::ScalarEvolution *)a1, v420, (unint64_t)__s1);
        return sub_1CBFD7CB4(a1, v252, UDivExpr, 0, 0);
      }
      LODWORD(v52) = *((_DWORD *)a2 + 2);
LABEL_257:
      if (v52 <= v12)
      {
LABEL_272:
        if (v52 <= v12) {
          goto LABEL_495;
        }
        uint64_t v148 = *a2;
        uint64_t v12 = v12;
        while (*(unsigned __int16 *)(v148[v12] + 24) <= 4u)
        {
          if (v52 == ++v12) {
            goto LABEL_597;
          }
        }
        if (*(_WORD *)(v148[v12] + 24) != 5) {
          goto LABEL_495;
        }
        unsigned int v149 = *((_DWORD *)v399 + 2);
        uint64_t v150 = *(void *)(*(void *)a1 + 40);
        if (v149 == 15)
        {
          if ((v149 & 0xFE) == 0x12) {
            unsigned int v149 = *(_DWORD *)(**((void **)v399 + 2) + 8);
          }
          uint64_t v254 = *(void *)(v150 + 504);
          if (v149 < 0x100) {
            goto LABEL_469;
          }
          unsigned int v255 = v149 >> 8;
          unint64_t v256 = *(unsigned int *)(v150 + 512);
          uint64_t v257 = *(void *)(v150 + 504);
          if (v256)
          {
            uint64_t v257 = v254;
            unint64_t v258 = v256;
            do
            {
              unint64_t v259 = v258 >> 1;
              uint64_t v260 = v257 + 16 * (v258 >> 1);
              unsigned int v261 = *(_DWORD *)(v260 + 8);
              uint64_t v262 = v260 + 16;
              v258 += ~(v258 >> 1);
              if (v261 < v255) {
                uint64_t v257 = v262;
              }
              else {
                unint64_t v258 = v259;
              }
            }
            while (v258);
          }
          if (v257 == v254 + 16 * v256 || *(_DWORD *)(v257 + 8) != v255) {
LABEL_469:
          }
            uint64_t v257 = v254;
          unsigned int v152 = *(_DWORD *)(v257 + 12);
          uint64_t v97 = v406;
        }
        else
        {
          unsigned int v152 = sub_1CB83544C(v150 + 272, (uint64_t)v399);
          if (v151 == 1) {
        }
          }
        __s1 = 0;
        uint64_t v417 = 0;
        LODWORD(v418) = 0;
        v420 = (llvm::SCEV *)&v422;
        uint64_t v421 = 0x800000000;
        unsigned int v410 = v152;
        if (v152 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v409);
        }
        v409 = 0;
        uint64_t v153 = (uint64_t *)*a2;
        uint64_t v154 = *((unsigned int *)a2 + 2);
        LODWORD(v414) = v152;
        if (v152) {
          unint64_t v155 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v152;
        }
        else {
          LOBYTE(v155) = 0;
        }
        v413 = (void *)(v155 & 1);
        if ((sub_1CC0ED65C((uint64_t)&__s1, (uint64_t)&v420, (uint64_t)&v409, v153, v154, (uint64_t)&v413, a1) & 1) == 0)
        {
          char v251 = 0;
          goto LABEL_479;
        }
        uint64_t v414 = 0;
        v415[0] = 0;
        v413 = &v414;
        if (!v421) {
          goto LABEL_349;
        }
        unsigned int v157 = v420;
        v403 = (llvm::SCEV *)((char *)v420 + 8 * v421);
        while (1)
        {
          uint64_t v158 = v46;
          uint64_t v159 = *(void *)v157;
          unint64_t v411 = 0;
          unsigned int v160 = (char *)__s1;
          int v161 = v418;
          if (sub_1CC133950((uint64_t)__s1, v418, v159, &v411)) {
            uint64_t v162 = (char *)v411;
          }
          else {
            uint64_t v162 = &v160[24 * v161];
          }
          uint64_t v163 = v414;
          unint64_t v164 = &v414;
          uint64_t v165 = &v414;
          if (!v414)
          {
LABEL_309:
            uint64_t v179 = (uint64_t *)operator new(0x60uLL);
            v178 = v179;
            unsigned int v180 = *((_DWORD *)v162 + 4);
            *((_DWORD *)v179 + 10) = v180;
            if (v180 > 0x40) {
              operator new[]();
            }
            v179[4] = *((void *)v162 + 1);
            v179[6] = (uint64_t)(v179 + 8);
            v179[7] = 0x400000000;
            *uint64_t v179 = 0;
            v179[1] = 0;
            v179[2] = (uint64_t)v165;
            *unint64_t v164 = (uint64_t)v179;
            v181 = v179;
            uint64_t v97 = v406;
            if (*(void *)v413)
            {
              v413 = *(void **)v413;
              v181 = (uint64_t *)*v164;
            }
            sub_1CB8358B8((uint64_t *)v414, v181);
            ++v415[0];
            goto LABEL_315;
          }
          uint64_t v166 = *((unsigned int *)v162 + 4);
          while (1)
          {
            while (1)
            {
              uint64_t v165 = (uint64_t *)v163;
              if (v166 > 0x40) {
                break;
              }
              unint64_t v167 = *((void *)v162 + 1);
              unint64_t v168 = *(void *)(v163 + 32);
              if (v167 >= v168) {
                goto LABEL_300;
              }
LABEL_294:
              uint64_t v163 = *v165;
              unint64_t v164 = v165;
              if (!*v165) {
                goto LABEL_309;
              }
            }
            unint64_t v167 = *((void *)v162 + 1);
            unint64_t v168 = *(void *)(v163 + 32);
            unint64_t v169 = ((unint64_t)(v166 + 63) >> 3) & 0x3FFFFFF8;
            while (v169)
            {
              unint64_t v170 = *(void *)(v167 + v169 - 8);
              unint64_t v171 = *(void *)(v168 + v169 - 8);
              v169 -= 8;
              if (v170 != v171)
              {
                if (v170 <= v171) {
                  goto LABEL_294;
                }
                break;
              }
            }
LABEL_300:
            uint64_t v172 = *((unsigned int *)v165 + 10);
            if (v172 > 0x40) {
              break;
            }
            if (v168 >= v167) {
              goto LABEL_308;
            }
LABEL_302:
            uint64_t v163 = v165[1];
            if (!v163)
            {
              unint64_t v164 = v165 + 1;
              goto LABEL_309;
            }
          }
          unint64_t v173 = v167 - 8;
          unint64_t v174 = ((unint64_t)(v172 + 63) >> 3) & 0x3FFFFFF8;
          unint64_t v175 = v168 - 8;
          while (v174)
          {
            unint64_t v176 = *(void *)(v175 + v174);
            unint64_t v177 = *(void *)(v173 + v174);
            v174 -= 8;
            if (v176 != v177)
            {
              if (v176 <= v177) {
                goto LABEL_302;
              }
              break;
            }
          }
LABEL_308:
          v178 = v165;
          uint64_t v97 = v406;
LABEL_315:
          uint64_t v46 = v158;
          unint64_t v182 = *((unsigned int *)v178 + 14);
          if (v182 >= *((unsigned int *)v178 + 15)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(v178[6] + 8 * v182) = v159;
          ++*((_DWORD *)v178 + 14);
          unsigned int v157 = (llvm::SCEV *)((char *)v157 + 8);
          if (v157 == v403)
          {
LABEL_349:
            *((_DWORD *)a2 + 2) = 0;
            unint64_t v196 = (unint64_t)v409;
            if (v410 < 0x41) {
              goto LABEL_357;
            }
            int v197 = 0;
            int64_t v198 = ((unint64_t)v410 + 63) >> 6;
            do
            {
              BOOL v195 = v198-- < 1;
              if (v195) {
                break;
              }
              unint64_t v199 = v409[v198];
              v197 += __clz(v199);
            }
            while (!v199);
            unsigned int v200 = v410 | 0xFFFFFFC0;
            if ((v410 & 0x3F) == 0) {
              unsigned int v200 = 0;
            }
            if (v410 - v197 - v200 > 0x40) {
              goto LABEL_358;
            }
            unint64_t v196 = *v409;
LABEL_357:
            if (v196)
            {
LABEL_358:
              v201 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)a1, (llvm::LLVMContext *)&v409, v156);
              unint64_t v202 = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a1, v201);
              unsigned int v203 = *((_DWORD *)a2 + 2);
              if (v203 >= *((_DWORD *)a2 + 3)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              (*a2)[v203] = v202;
              LODWORD(v196) = *((_DWORD *)a2 + 2) + 1;
              *((_DWORD *)a2 + 2) = v196;
            }
            v204 = (uint64_t *)v413;
            if (v413 != &v414)
            {
              int v205 = v46;
              while (1)
              {
                v206 = (llvm::LLVMContext *)(v204 + 4);
                uint64_t v207 = *((unsigned int *)v204 + 10);
                if (v207 >= 0x41)
                {
                  int v209 = 0;
                  int64_t v210 = (unint64_t)(v207 + 63) >> 6;
                  uint64_t v211 = v210;
                  do
                  {
                    BOOL v195 = v211-- < 1;
                    if (v195) {
                      break;
                    }
                    unint64_t v212 = *(void *)(*(void *)v206 + 8 * v211);
                    v209 += __clz(v212);
                  }
                  while (!v212);
                  int v213 = v207 | 0xFFFFFFC0;
                  if ((v207 & 0x3F) == 0) {
                    int v213 = 0;
                  }
                  if ((v207 - v209 - v213) < 0x41 && **(void **)v206 == 1)
                  {
LABEL_372:
                    uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(a1, v204 + 6, 0, (v46 + 1));
LABEL_380:
                    unint64_t v196 = *((unsigned int *)a2 + 2);
                    if (v196 >= *((unsigned int *)a2 + 3)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    (*a2)[v196] = AddExpr;
                    LODWORD(v196) = *((_DWORD *)a2 + 2) + 1;
                    *((_DWORD *)a2 + 2) = v196;
                    goto LABEL_382;
                  }
                  int v215 = 0;
                  do
                  {
                    BOOL v195 = v210-- < 1;
                    if (v195) {
                      break;
                    }
                    unint64_t v216 = *(void *)(*(void *)v206 + 8 * v210);
                    v215 += __clz(v216);
                  }
                  while (!v216);
                  if ((v207 - (v213 + v215)) > 0x40)
                  {
LABEL_379:
                    v217 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)a1, v206, v156);
                    unint64_t v218 = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a1, v217);
                    uint64_t v219 = llvm::ScalarEvolution::getAddExpr(a1, v204 + 6, 0, (v46 + 1));
                    uint64_t AddExpr = sub_1CBFD7CB4(a1, v218, v219, 0, (v46 + 1));
                    goto LABEL_380;
                  }
                  v208 = **(void ***)v206;
                }
                else
                {
                  v208 = *(void **)v206;
                  if (*(void *)v206 == 1) {
                    goto LABEL_372;
                  }
                }
                if (v208) {
                  goto LABEL_379;
                }
LABEL_382:
                v220 = (uint64_t *)v204[1];
                if (v220)
                {
                  do
                  {
                    v221 = (uint64_t **)v220;
                    v220 = (uint64_t *)*v220;
                  }
                  while (v220);
                }
                else
                {
                  do
                  {
                    v221 = (uint64_t **)v204[2];
                    BOOL v11 = *v221 == v204;
                    v204 = (uint64_t *)v221;
                  }
                  while (!v11);
                }
                v204 = (uint64_t *)v221;
                if (v221 == (uint64_t **)&v414) {
                  goto LABEL_434;
                }
              }
            }
            int v205 = v46;
LABEL_434:
            if (v196)
            {
              LODWORD(v46) = v205;
              if (v196 == 1)
              {
                uint64_t MulExpr = **a2;
                goto LABEL_456;
              }
              unint64_t v250 = llvm::ScalarEvolution::getAddExpr(a1, a2, 0, (v205 + 1));
            }
            else
            {
              unsigned int v235 = *((_DWORD *)v399 + 2);
              uint64_t v236 = (uint64_t)v399;
              LODWORD(v46) = v205;
              if (v235 != 13)
              {
                uint64_t v237 = *(void *)(*(void *)a1 + 40);
                if ((v235 & 0xFE) == 0x12) {
                  unsigned int v235 = *(_DWORD *)(**((void **)v399 + 2) + 8);
                }
                uint64_t v238 = *(void *)(v237 + 504);
                if (v235 < 0x100) {
                  goto LABEL_449;
                }
                unsigned int v239 = v235 >> 8;
                unint64_t v240 = *(unsigned int *)(v237 + 512);
                uint64_t v241 = v238;
                if (v240)
                {
                  uint64_t v241 = v238;
                  unint64_t v242 = v240;
                  do
                  {
                    unint64_t v243 = v242 >> 1;
                    uint64_t v244 = v241 + 16 * (v242 >> 1);
                    unsigned int v245 = *(_DWORD *)(v244 + 8);
                    uint64_t v246 = v244 + 16;
                    v242 += ~(v242 >> 1);
                    if (v245 < v239) {
                      uint64_t v241 = v246;
                    }
                    else {
                      unint64_t v242 = v243;
                    }
                  }
                  while (v242);
                }
                if (v241 == v238 + 16 * v240 || *(_DWORD *)(v241 + 8) != v239) {
LABEL_449:
                }
                  uint64_t v241 = v238;
                uint64_t v236 = llvm::IntegerType::get(*(llvm::IntegerType **)v399, (llvm::LLVMContext *)*(unsigned int *)(v241 + 12));
                if ((*((_DWORD *)v399 + 2) & 0xFE) == 0x12)
                {
                  v391 = (llvm::Type *)*((unsigned int *)v399 + 8);
                  if (*((_DWORD *)v399 + 2) == 19) {
                    llvm::ScalableVectorType::get((uint64_t **)v236, v391);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v236, v391);
                  }
                  uint64_t v97 = v406;
                }
              }
              v247 = *(uint64_t **)v236;
              unsigned int v248 = *(_DWORD *)(v236 + 8);
              unsigned int v412 = v248 >> 8;
              if (v248 >> 8 >= 0x41) {
                operator new[]();
              }
              unint64_t v411 = 0;
              v249 = (llvm::ConstantInt *)llvm::ConstantInt::get((llvm::ConstantInt *)v247, (llvm::LLVMContext *)&v411, v156);
              if (v412 >= 0x41 && v411) {
                MEMORY[0x1D25D9CB0](v411, 0x1000C8000313F17);
              }
              unint64_t v250 = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a1, v249);
            }
            uint64_t MulExpr = v250;
LABEL_456:
            sub_1CC13AE20((void *)v414);
            char v251 = 1;
LABEL_479:
            if (v410 >= 0x41 && v409) {
              MEMORY[0x1D25D9CB0](v409, 0x1000C8000313F17);
            }
            int v266 = v46;
            if (v420 != (llvm::SCEV *)&v422) {
              free(v420);
            }
            v267 = __s1;
            if (v418)
            {
              uint64_t v268 = 24 * v418;
              v269 = (char *)__s1 + 8;
              do
              {
                uint64_t v270 = *((void *)v269 - 1);
                if (v270 != -4096 && v270 != -8192 && *((_DWORD *)v269 + 2) >= 0x41u && *(void *)v269) {
                  MEMORY[0x1D25D9CB0](*(void *)v269, 0x1000C8000313F17);
                }
                v269 += 24;
                v268 -= 24;
              }
              while (v268);
            }
            MEMORY[0x1D25D9CD0](v267, 8);
            if (v251) {
              return MulExpr;
            }
            LODWORD(v52) = *((_DWORD *)a2 + 2);
            LODWORD(v46) = v266;
LABEL_495:
            if (v52 <= v12)
            {
LABEL_516:
              if (v52 > v12)
              {
                uint64_t v286 = (uint64_t)&(*a2)[v12];
                while (*(unsigned __int16 *)(*(void *)v286 + 24) <= 6u)
                {
                  LODWORD(v12) = v12 + 1;
                  v286 += 8;
                  if (v52 == v12) {
                    goto LABEL_597;
                  }
                }
              }
              if (v52 > v12)
              {
                unsigned int v400 = v46 + 1;
                for (unint64_t i = v12; i < v52; ++i)
                {
                  v288 = *a2;
                  if (*(_WORD *)((*a2)[i] + 24) != 7) {
                    break;
                  }
                  int v289 = 0;
                  v420 = (llvm::SCEV *)&v422;
                  uint64_t v421 = 0x800000000;
                  unint64_t v290 = v288[i];
                  v291 = *(const llvm::BasicBlock ****)(v290 + 48);
                  do
                  {
                    v292 = (const llvm::SCEV *)(*a2)[v289];
                    if (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a1, v292, (const llvm::Loop *)v291) == 1&& llvm::ScalarEvolution::getBlockDisposition((llvm::ScalarEvolution *)a1, v292, *v291[4]) == 2)
                    {
                      if (v421 >= (unint64_t)HIDWORD(v421)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v420 + v421) = (*a2)[v289];
                      LODWORD(v421) = v421 + 1;
                      uint64_t v293 = (uint64_t)&(*a2)[v289];
                      uint64_t v294 = *((unsigned int *)a2 + 2);
                      uint64_t v295 = (uint64_t)&(*a2)[v294];
                      if (v295 != v293 + 8)
                      {
                        memmove((void *)v293, (const void *)(v293 + 8), v295 - (v293 + 8));
                        LODWORD(v294) = *((_DWORD *)a2 + 2);
                      }
                      uint64_t v97 = v406;
                      *((_DWORD *)a2 + 2) = v294 - 1;
                      --v289;
                      LODWORD(v52) = v52 - 1;
                    }
                    ++v289;
                  }
                  while (v289 != v52);
                  if (v421)
                  {
                    if (v421 >= (unint64_t)HIDWORD(v421)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v420 + v421) = v290;
                    LODWORD(v421) = v421 + 1;
                    unsigned int v296 = sub_1CC0EF280(a1, 4, v420, v421, v97);
                    unsigned int v297 = v421 - 1;
                    LODWORD(v421) = v297;
                    if (v297 >= HIDWORD(v421)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v420 + v297) = **(void **)(v290 + 32);
                    LODWORD(v421) = v421 + 1;
                    v299 = *(const void **)(v290 + 32);
                    unint64_t v298 = *(void *)(v290 + 40);
                    __s1 = &v418;
                    uint64_t v417 = 0x400000000;
                    if (v298 >= 5) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    if (v298)
                    {
                      memcpy(&v418, v299, 8 * v298);
                      int v306 = v417;
                    }
                    else
                    {
                      int v306 = 0;
                    }
                    LODWORD(v417) = v306 + v298;
                    uint64_t v97 = v406;
                    if (v296)
                    {
                      v307 = (llvm::ScalarEvolution *)a1;
                      DefiningScopeBound = llvm::ScalarEvolution::getDefiningScopeBound((llvm::ScalarEvolution *)a1, (uint64_t *)v420, v421, &v413);
                      uint64_t v309 = *((void *)*v291[4] + 6);
                      if (v309) {
                        v310 = (const llvm::Instruction *)(v309 - 24);
                      }
                      else {
                        v310 = 0;
                      }
                      if (llvm::ScalarEvolution::isGuaranteedToTransferExecutionTo((llvm::ScalarEvolution *)a1, DefiningScopeBound, v310))uint64_t v311 = v296; {
                      else
                      }
                        uint64_t v311 = 0;
                    }
                    else
                    {
                      uint64_t v311 = 0;
                      v307 = (llvm::ScalarEvolution *)a1;
                    }
                    uint64_t v312 = llvm::ScalarEvolution::getAddExpr(v307, &v420, v311, v400);
                    *(void *)__s1 = v312;
                    uint64_t AddRecExpr = llvm::ScalarEvolution::getAddRecExpr(v307, (uint64_t **)&__s1, (const llvm::Loop *)v291, ((unsigned __int16)v296 | 1u) & *(_WORD *)(v290 + 28));
                    uint64_t MulExpr = AddRecExpr;
                    if (*((_DWORD *)a2 + 2) != 1)
                    {
                      int v314 = 0;
                      v315 = *a2;
                      do
                      {
                        int v316 = v314;
                        unint64_t v317 = v315[v314++];
                      }
                      while (v317 != v290);
                      v315[v316] = AddRecExpr;
                      uint64_t MulExpr = llvm::ScalarEvolution::getAddExpr(a1, a2, 0, v400);
                    }
                    if (__s1 != &v418) {
                      free(__s1);
                    }
                    char v305 = 0;
                  }
                  else
                  {
                    unsigned int v300 = *((_DWORD *)a2 + 2);
                    int v301 = i;
                    do
                    {
                      if (v300 > ++v301)
                      {
                        unint64_t v302 = (*a2)[v301];
                        if (*(_WORD *)(v302 + 24) == 7) {
                          continue;
                        }
                      }
                      char v305 = 1;
                      goto LABEL_588;
                    }
                    while (v291 != *(const llvm::BasicBlock ****)(v302 + 48));
                    v304 = *(const void **)(v290 + 32);
                    unint64_t v303 = *(void *)(v290 + 40);
                    __s1 = &v418;
                    uint64_t v417 = 0x400000000;
                    if (v303 >= 5) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    if (v303)
                    {
                      memcpy(&v418, v304, 8 * v303);
                      int v318 = v417;
                      unsigned int v300 = *((_DWORD *)a2 + 2);
                    }
                    else
                    {
                      int v318 = 0;
                    }
                    LODWORD(v417) = v318 + v303;
                    while (v300 != v301)
                    {
                      unint64_t v319 = (*a2)[v301];
                      if (*(_WORD *)(v319 + 24) != 7) {
                        break;
                      }
                      if (*(const llvm::BasicBlock ****)(v319 + 48) == v291)
                      {
                        uint64_t v320 = *(unsigned int *)(v319 + 40);
                        if (*(_DWORD *)(v319 + 40))
                        {
                          unint64_t v321 = 0;
                          while (1)
                          {
                            int v322 = v417;
                            if (v321 >= v417) {
                              break;
                            }
                            uint64_t v323 = *((void *)__s1 + v321);
                            uint64_t v324 = *(void *)(*(void *)(v319 + 32) + 8 * v321);
                            v413 = v415;
                            v415[0] = v323;
                            v415[1] = v324;
                            uint64_t v414 = 0x200000002;
                            uint64_t v325 = llvm::ScalarEvolution::getAddExpr(a1, &v413, 0, v400);
                            *((void *)__s1 + v321) = v325;
                            if (v413 != v415) {
                              free(v413);
                            }
                            if (++v321 == v320) {
                              goto LABEL_581;
                            }
                          }
                          uint64_t v326 = *(void *)(v319 + 32);
                          uint64_t v327 = *(void *)(v319 + 40);
                          uint64_t v328 = 8 * v327 - 8 * v321;
                          if ((unint64_t)v417 + (v328 >> 3) > HIDWORD(v417)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          if (v321 != v327)
                          {
                            memcpy((char *)__s1 + 8 * v417, (const void *)(v326 + 8 * v321), 8 * v327 - 8 * v321);
                            int v322 = v417;
                          }
                          LODWORD(v417) = v322 + ((unint64_t)v328 >> 3);
                        }
LABEL_581:
                        uint64_t v329 = (uint64_t)&(*a2)[v301];
                        uint64_t v330 = *((unsigned int *)a2 + 2);
                        uint64_t v331 = (uint64_t)&(*a2)[v330];
                        if (v331 != v329 + 8)
                        {
                          memmove((void *)v329, (const void *)(v329 + 8), v331 - (v329 + 8));
                          LODWORD(v330) = *((_DWORD *)a2 + 2);
                        }
                        unsigned int v300 = v330 - 1;
                        *((_DWORD *)a2 + 2) = v300;
                        --v301;
                      }
                      ++v301;
                    }
                    (*a2)[i] = llvm::ScalarEvolution::getAddRecExpr((llvm::ScalarEvolution *)a1, (uint64_t **)&__s1, (const llvm::Loop *)v291, 0);
                    uint64_t MulExpr = llvm::ScalarEvolution::getAddExpr(a1, a2, 0, v400);
                    if (__s1 != &v418) {
                      free(__s1);
                    }
                    char v305 = 0;
                  }
LABEL_588:
                  if (v420 != (llvm::SCEV *)&v422) {
                    free(v420);
                  }
                  if ((v305 & 1) == 0) {
                    return MulExpr;
                  }
                  unint64_t v52 = *((unsigned int *)a2 + 2);
                }
              }
LABEL_597:
              v332 = (uint64_t *)*a2;
              __int16 v30 = sub_1CC0EF280(a1, 4, v332, v52, v97);
              uint64_t v31 = a1;
              unint64_t v32 = v332;
              uint64_t v33 = v52;
              return llvm::ScalarEvolution::getOrCreateAddExpr(v31, v32, v33, v30);
            }
            v271 = *a2;
            while (1)
            {
              unint64_t v272 = v271[v12];
              if (*(_WORD *)(v272 + 24) != 5) {
                goto LABEL_516;
              }
              uint64_t v273 = *(void *)(v272 + 40);
              if (v273) {
                break;
              }
              unsigned int v276 = v12 + 1;
LABEL_514:
              LODWORD(v12) = v276;
              if (v276 == v52) {
                goto LABEL_597;
              }
            }
            int v398 = v46;
            uint64_t v274 = 0;
            v275 = *(void **)(v272 + 32);
            unsigned int v276 = v12 + 1;
            while (1)
            {
              unint64_t v277 = v275[v274];
              if (*(_WORD *)(v277 + 24)) {
                break;
              }
LABEL_511:
              if (++v274 == *(void *)(v272 + 40))
              {
                uint64_t v97 = v406;
                LODWORD(v46) = v398;
                goto LABEL_514;
              }
            }
            unint64_t v278 = 0;
            int v279 = 1;
            while (v277 != v271[v278 / 8])
            {
              ++v279;
              v278 += 8;
              if (8 * v52 == v278)
              {
                uint64_t v280 = (v12 + 1);
                if (v52 > v276)
                {
                  while (1)
                  {
                    unint64_t v281 = v271[v280];
                    if (*(_WORD *)(v281 + 24) != 5) {
                      break;
                    }
                    uint64_t v282 = *(void *)(v281 + 40);
                    if (v282)
                    {
                      uint64_t v283 = 0;
                      v284 = *(void **)(v281 + 32);
                      uint64_t v285 = 8;
                      while (v284[v283] != v277)
                      {
                        ++v283;
                        v285 += 8;
                        if (*(void *)(v281 + 40) == v283) {
                          goto LABEL_510;
                        }
                      }
                      uint64_t v407 = v280;
                      if (v273 == 2)
                      {
                        uint64_t v335 = v275[v274 == 0];
                      }
                      else
                      {
                        v420 = (llvm::SCEV *)&v422;
                        uint64_t v421 = 0x400000000;
                        if (v274 >= 5) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        int v336 = 0;
                        if (v274)
                        {
                          unint64_t v337 = v272;
                          unint64_t v371 = v281;
                          memcpy(&v422, v275, 8 * v274);
                          v275 = *(void **)(v337 + 32);
                          uint64_t v273 = *(void *)(v337 + 40);
                          int v336 = v421;
                          unsigned int v372 = HIDWORD(v421);
                        }
                        else
                        {
                          unint64_t v371 = v281;
                          unsigned int v372 = 4;
                        }
                        uint64_t v373 = (v336 + v274);
                        LODWORD(v421) = v373;
                        v374 = (char *)&v275[v274 + 1];
                        v375 = (char *)&v275[v273];
                        unint64_t v376 = v375 - v374;
                        if (v373 + ((v375 - v374) >> 3) > (unint64_t)v372) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        if (v374 != v375)
                        {
                          memcpy((char *)v420 + 8 * v373, v374, v375 - v374);
                          LODWORD(v373) = v421;
                        }
                        unint64_t v281 = v371;
                        LODWORD(v421) = v373 + (v376 >> 3);
                        uint64_t v335 = llvm::ScalarEvolution::getMulExpr(a1, &v420, 0, (v398 + 1));
                        if (v420 != (llvm::SCEV *)&v422) {
                          free(v420);
                        }
                        v284 = *(void **)(v371 + 32);
                        uint64_t v282 = *(void *)(v281 + 40);
                      }
                      if (v282 == 2)
                      {
                        unint64_t v377 = v277;
                        uint64_t v378 = v284[v283 == 0];
                        uint64_t v379 = (v398 + 1);
                      }
                      else
                      {
                        v420 = (llvm::SCEV *)&v422;
                        uint64_t v421 = 0x400000000;
                        if (v283 >= 5) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        if (v283)
                        {
                          memcpy(&v422, v284, v285 - 8);
                          v284 = *(void **)(v281 + 32);
                          uint64_t v282 = *(void *)(v281 + 40);
                          int v380 = v421;
                          unint64_t v381 = HIDWORD(v421);
                        }
                        else
                        {
                          int v380 = 0;
                          unint64_t v381 = 4;
                        }
                        unsigned int v382 = v283 + v380;
                        LODWORD(v421) = v382;
                        int64_t v383 = 8 * v282 - v285;
                        if ((v383 >> 3) + (unint64_t)v382 > v381) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        if (8 * v282 != v285)
                        {
                          memcpy((char *)v420 + 8 * v382, &v284[v283 + 1], v383);
                          unsigned int v382 = v421;
                        }
                        LODWORD(v421) = v382 + ((unint64_t)v383 >> 3);
                        uint64_t v379 = (v398 + 1);
                        uint64_t v378 = llvm::ScalarEvolution::getMulExpr(a1, &v420, 0, v379);
                        if (v420 != (llvm::SCEV *)&v422) {
                          free(v420);
                        }
                        unint64_t v377 = v277;
                      }
                      __s1 = &v418;
                      unint64_t v418 = v335;
                      uint64_t v419 = v378;
                      uint64_t v417 = 0x200000002;
                      uint64_t v384 = llvm::ScalarEvolution::getAddExpr(a1, &__s1, 0, v379);
                      v420 = (llvm::SCEV *)&v422;
                      unint64_t v422 = v377;
                      size_t v423 = v384;
                      uint64_t v421 = 0x200000002;
                      uint64_t MulExpr = llvm::ScalarEvolution::getMulExpr(a1, &v420, 0, v379);
                      if (v420 != (llvm::SCEV *)&v422) {
                        free(v420);
                      }
                      uint64_t v385 = *((unsigned int *)a2 + 2);
                      if (v385 != 2)
                      {
                        uint64_t v386 = (uint64_t)&(*a2)[v12];
                        uint64_t v387 = (uint64_t)&(*a2)[v385];
                        if (v387 != v386 + 8)
                        {
                          memmove((void *)v386, (const void *)(v386 + 8), v387 - (v386 + 8));
                          LODWORD(v385) = *((_DWORD *)a2 + 2);
                        }
                        int v388 = v385 - 1;
                        *((_DWORD *)a2 + 2) = v388;
                        int v389 = v407;
                        if (v388 != v407)
                        {
                          memmove(&(*a2)[v407 - 1], &(*a2)[v407], (char *)&(*a2)[v388] - (char *)&(*a2)[v407]);
                          int v389 = *((_DWORD *)a2 + 2);
                        }
                        *((_DWORD *)a2 + 2) = v389 - 1;
                        if ((v389 - 1) >= *((_DWORD *)a2 + 3)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        (*a2)[v389 - 1] = MulExpr;
                        ++*((_DWORD *)a2 + 2);
                        uint64_t MulExpr = llvm::ScalarEvolution::getAddExpr(a1, a2, 0, v379);
                      }
                      v370 = __s1;
                      if (__s1 == &v418) {
                        return MulExpr;
                      }
                      goto LABEL_683;
                    }
LABEL_510:
                    if (v52 == ++v280) {
                      goto LABEL_511;
                    }
                  }
                }
                goto LABEL_511;
              }
            }
            size_t v395 = v275[v274];
            if (v273 == 2)
            {
              uint64_t v333 = v275[v274 == 0];
            }
            else
            {
              v420 = (llvm::SCEV *)&v422;
              uint64_t v421 = 0x400000000;
              if (v274 >= 5) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v274)
              {
                unint64_t v334 = v272;
                memcpy(&v422, v275, 8 * v274);
                v275 = *(void **)(v334 + 32);
                uint64_t v273 = *(void *)(v334 + 40);
                int v338 = v421;
                unsigned int v339 = HIDWORD(v421);
              }
              else
              {
                int v338 = 0;
                unsigned int v339 = 4;
              }
              uint64_t v340 = (v338 + v274);
              LODWORD(v421) = v340;
              v341 = (char *)&v275[v274 + 1];
              v342 = (char *)&v275[v273];
              if (v340 + ((v342 - v341) >> 3) > (unint64_t)v339) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v341 != v342)
              {
                memcpy((char *)v420 + 8 * v340, v341, v342 - v341);
                LODWORD(v340) = v421;
              }
              LODWORD(v421) = v340 + ((unint64_t)(v342 - v341) >> 3);
              uint64_t v333 = llvm::ScalarEvolution::getMulExpr(a1, &v420, 0, (v398 + 1));
              if (v420 != (llvm::SCEV *)&v422) {
                free(v420);
              }
            }
            v343 = v399;
            unsigned int v344 = *((_DWORD *)v399 + 2);
            if (v344 != 13)
            {
              uint64_t v345 = *(void *)(*(void *)a1 + 40);
              if ((v344 & 0xFE) == 0x12) {
                unsigned int v344 = *(_DWORD *)(**((void **)v399 + 2) + 8);
              }
              uint64_t v346 = *(void *)(v345 + 504);
              if (v344 < 0x100) {
                goto LABEL_627;
              }
              unsigned int v347 = v344 >> 8;
              unint64_t v348 = *(unsigned int *)(v345 + 512);
              uint64_t v349 = v346;
              if (v348)
              {
                uint64_t v349 = v346;
                unint64_t v350 = v348;
                do
                {
                  unint64_t v351 = v350 >> 1;
                  uint64_t v352 = v349 + 16 * (v350 >> 1);
                  unsigned int v353 = *(_DWORD *)(v352 + 8);
                  uint64_t v354 = v352 + 16;
                  v350 += ~(v350 >> 1);
                  if (v353 < v347) {
                    uint64_t v349 = v354;
                  }
                  else {
                    unint64_t v350 = v351;
                  }
                }
                while (v350);
              }
              if (v349 == v346 + 16 * v348 || *(_DWORD *)(v349 + 8) != v347) {
LABEL_627:
              }
                uint64_t v349 = v346;
              v355 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v399, (llvm::LLVMContext *)*(unsigned int *)(v349 + 12));
              if ((*((_DWORD *)v399 + 2) & 0xFE) == 0x12)
              {
                v390 = (llvm::Type *)*((unsigned int *)v399 + 8);
                if (*((_DWORD *)v399 + 2) == 19) {
                  llvm::ScalableVectorType::get(v355, v390);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v355, v390);
                }
              }
              v343 = v355;
            }
            v356 = *(llvm::ConstantInt **)v343;
            unsigned int v357 = *((_DWORD *)v343 + 2);
            LODWORD(v421) = v357 >> 8;
            if (v357 >> 8 > 0x40) {
              operator new[]();
            }
            if (v357 <= 0xFF) {
              LOBYTE(v358) = 0;
            }
            else {
              unint64_t v358 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v357) + 63);
            }
            v420 = (llvm::SCEV *)(v358 & 1);
            v359 = (llvm::ConstantInt *)llvm::ConstantInt::get(v356, (llvm::LLVMContext *)&v420, v43);
            if (v421 >= 0x41 && v420) {
              MEMORY[0x1D25D9CB0](v420, 0x1000C8000313F17);
            }
            unint64_t v360 = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a1, v359);
            __s1 = &v418;
            unint64_t v418 = v360;
            uint64_t v419 = v333;
            uint64_t v417 = 0x200000002;
            uint64_t v361 = (v398 + 1);
            uint64_t v362 = llvm::ScalarEvolution::getAddExpr(a1, &__s1, 0, v361);
            v420 = (llvm::SCEV *)&v422;
            unint64_t v422 = v362;
            size_t v423 = v395;
            uint64_t v421 = 0x200000002;
            uint64_t MulExpr = llvm::ScalarEvolution::getMulExpr(a1, &v420, 0, v361);
            if (v420 != (llvm::SCEV *)&v422) {
              free(v420);
            }
            uint64_t v363 = *((unsigned int *)a2 + 2);
            if (v363 != 2)
            {
              v364 = *a2;
              if (v12 <= v279 - 1)
              {
                v368 = (char *)&v364[v363];
                v369 = &v364[v12];
                if (v368 != (char *)(v369 + 1))
                {
                  memmove(v369, v369 + 1, v368 - (char *)(v369 + 1));
                  LODWORD(v363) = *((_DWORD *)a2 + 2);
                }
                *((_DWORD *)a2 + 2) = v363 - 1;
                LODWORD(v12) = v279 - 1;
                if (v363 != v279)
                {
                  v366 = &(*a2)[v278 / 8];
                  uint64_t v367 = (uint64_t)&(*a2)[(v363 - 1)];
LABEL_647:
                  memmove(v366 - 1, v366, v367 - (void)v366);
                  LODWORD(v12) = *((_DWORD *)a2 + 2);
                }
              }
              else
              {
                if (8 * v363 - 8 != v278)
                {
                  memmove(&v364[v278 / 8], &v364[v278 / 8 + 1], 8 * v363 - v278 - 8);
                  LODWORD(v363) = *((_DWORD *)a2 + 2);
                }
                int v365 = v363 - 1;
                *((_DWORD *)a2 + 2) = v365;
                if (v365 != v12)
                {
                  v366 = &(*a2)[v12];
                  uint64_t v367 = (uint64_t)&(*a2)[v365];
                  goto LABEL_647;
                }
              }
              *((_DWORD *)a2 + 2) = v12 - 1;
              if ((v12 - 1) >= *((_DWORD *)a2 + 3)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              (*a2)[(v12 - 1)] = MulExpr;
              ++*((_DWORD *)a2 + 2);
              uint64_t MulExpr = llvm::ScalarEvolution::getAddExpr(a1, a2, 0, v361);
            }
            v370 = __s1;
            if (__s1 != &v418) {
LABEL_683:
            }
              free(v370);
            return MulExpr;
          }
        }
      }
      unsigned int v135 = *a2;
LABEL_260:
      uint64_t v12 = v12;
      while (*(unsigned __int16 *)(v135[v12] + 24) <= 3u)
      {
        if (v52 == ++v12) {
          goto LABEL_597;
        }
      }
      unint64_t v143 = &v135[v12];
      unint64_t v144 = *v143;
      if (*v143) {
        BOOL v145 = *(unsigned __int16 *)(*v143 + 24) == 4;
      }
      else {
        BOOL v145 = 0;
      }
      if (v145 && v52 <= dword_1EBCC7738)
      {
        unsigned int v147 = (unint64_t *)(v144 + 40);
        unint64_t v146 = *(void *)(v144 + 40);
        if (v146 <= dword_1EBCC7738)
        {
          unint64_t v392 = *(void *)(v144 + 40);
          unint64_t v393 = dword_1EBCC7738;
          unsigned int v397 = v46;
          LOBYTE(v46) = v406 & 2;
          do
          {
            v192 = (char *)&v135[v52];
            if (v192 != (char *)(v143 + 1))
            {
              memmove(v143, v143 + 1, v192 - (char *)(v143 + 1));
              LODWORD(v52) = *((_DWORD *)a2 + 2);
              unint64_t v146 = *v147;
            }
            uint64_t v193 = (v52 - 1);
            *((_DWORD *)a2 + 2) = v193;
            uint64_t v43 = (const llvm::APInt *)(v146 + v193);
            if (v146 + v193 > *((unsigned int *)a2 + 3)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            unsigned int v135 = *a2;
            if (v146)
            {
              memcpy(&v135[v193], *(const void **)(v144 + 32), 8 * v146);
              LODWORD(v193) = *((_DWORD *)a2 + 2);
              unsigned int v135 = *a2;
            }
            LODWORD(v52) = v193 + v146;
            *((_DWORD *)a2 + 2) = v193 + v146;
            uint64_t v46 = *(_WORD *)(v144 + 28) & v46 & 7;
            unint64_t v143 = &v135[v12];
            unint64_t v144 = *v143;
            if (*v143) {
              BOOL v194 = *(unsigned __int16 *)(*v143 + 24) == 4;
            }
            else {
              BOOL v194 = 0;
            }
            BOOL v195 = !v194 || v52 > dword_1EBCC7738;
            if (v195) {
              goto LABEL_396;
            }
            unsigned int v147 = (unint64_t *)(v144 + 40);
            unint64_t v146 = *(void *)(v144 + 40);
          }
          while (v146 <= dword_1EBCC7738);
          if (v392 <= v393)
          {
LABEL_396:
            uint64_t v90 = v397 + 1;
            uint64_t v87 = a1;
            uint64_t v88 = a2;
            uint64_t v89 = v46;
            return llvm::ScalarEvolution::getAddExpr(v87, v88, v89, v90);
          }
          uint64_t v97 = v406;
          uint64_t v46 = v397;
        }
        else
        {
          uint64_t v97 = v406;
        }
      }
      goto LABEL_272;
    }
    uint64_t v183 = *(void *)(v141 + 32);
    unsigned int v184 = *(_DWORD *)(v183 + 32);
    LODWORD(v417) = v184;
    if (v184 > 0x40) {
      operator new[]();
    }
    __s1 = *(void **)(v183 + 24);
    uint64_t v185 = *(void *)(v139 + 32);
    if (*(_DWORD *)(v185 + 32) > 0x40u) {
      operator new[]();
    }
    unint64_t v186 = (unint64_t)__s1 + *(void *)(v185 + 24);
    if (v184) {
      unint64_t v187 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v184;
    }
    else {
      unint64_t v187 = 0;
    }
    unint64_t v188 = v187 & v186;
    LODWORD(v414) = v184;
    v413 = (void *)(v187 & v186);
    __int16 v189 = *(_WORD *)(v137 + 28);
    if ((v189 & 2) != 0 && v188 <= (unint64_t)__s1)
    {
      char v191 = 0;
      int v190 = 2;
      if ((v189 & 4) == 0) {
        goto LABEL_394;
      }
    }
    else
    {
      int v190 = 0;
      char v191 = 1;
      if ((v189 & 4) == 0) {
        goto LABEL_394;
      }
    }
    unsigned int v222 = v417 - 1;
    p_s1 = &__s1;
    if (v417 >= 0x41) {
      p_s1 = (void **)((char *)__s1 + 8 * (v222 >> 6));
    }
    if (((((unint64_t)v413 >> (v184 - 1)) ^ ((unint64_t)*p_s1 >> v222)) & 1) == 0)
    {
      int v404 = v190;
      sub_1CBF71A98((const llvm::APInt *)&v413, (llvm::APInt *)&v420);
      sub_1CBF71A98((const llvm::APInt *)&__s1, (llvm::APInt *)&v411);
      unsigned int v225 = v421;
      if (v421 > 0x40)
      {
        unint64_t v226 = v411;
        unint64_t v263 = (((unint64_t)v421 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v263)
          {
            int v227 = 0;
            goto LABEL_401;
          }
          unint64_t v264 = *(void *)((char *)v420 + v263 - 8);
          unint64_t v265 = *(void *)(v411 + v263 - 8);
          v263 -= 8;
        }
        while (v264 == v265);
        if (v264 > v265) {
          int v227 = 1;
        }
        else {
          int v227 = -1;
        }
      }
      else
      {
        unint64_t v226 = v411;
        if ((unint64_t)v420 < v411) {
          int v227 = -1;
        }
        else {
          int v227 = (unint64_t)v420 > v411;
        }
      }
LABEL_401:
      BOOL v228 = v412 < 0x41 || v226 == 0;
      uint64_t v97 = v406;
      if (!v228)
      {
        MEMORY[0x1D25D9CB0]();
        unsigned int v225 = v421;
      }
      if (v225 >= 0x41 && v420) {
        MEMORY[0x1D25D9CB0](v420, 0x1000C8000313F17);
      }
      int v190 = v404;
      if (v227 > 0) {
        char v229 = v191;
      }
      else {
        char v229 = 0;
      }
      if (v227 <= 0) {
        int v190 = v404 | 4;
      }
      if (v229) {
        goto LABEL_395;
      }
      goto LABEL_415;
    }
LABEL_394:
    uint64_t v97 = v406;
    if (v191)
    {
LABEL_395:
      int v224 = 1;
      uint64_t v46 = v134;
LABEL_424:
      if (v414 >= 0x41 && v413) {
        MEMORY[0x1D25D9CB0](v413, 0x1000C8000313F17);
      }
      if (v417 >= 0x41 && __s1) {
        MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
      }
      if (!v224) {
        return MulExpr;
      }
      LODWORD(v52) = *((_DWORD *)a2 + 2);
      if (v52 != 2) {
        goto LABEL_257;
      }
      unsigned int v135 = *a2;
      unint64_t v136 = **a2;
      int v138 = *(unsigned __int16 *)(v136 + 24);
      goto LABEL_251;
    }
LABEL_415:
    unsigned int v405 = v190;
    v230 = *(const void **)(v137 + 32);
    unint64_t v231 = *(void *)(v137 + 40);
    v420 = (llvm::SCEV *)&v422;
    uint64_t v421 = 0x400000000;
    if (v231 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v232 = 0;
    if (v231)
    {
      memcpy(&v422, v230, 8 * v231);
      int v232 = v421;
    }
    LODWORD(v421) = v232 + v231;
    v233 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)a1, (llvm::LLVMContext *)&v413, v43);
    unint64_t v234 = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a1, v233);
    *(void *)v420 = v234;
    uint64_t MulExpr = llvm::ScalarEvolution::getAddExpr(a1, &v420, v405, 0);
    uint64_t v46 = v134;
    if (v420 != (llvm::SCEV *)&v422) {
      free(v420);
    }
    int v224 = 0;
    goto LABEL_424;
  }
  v420 = (llvm::SCEV *)&v422;
  uint64_t v421 = 0x800000000;
  if (!v52)
  {
    uint64_t v129 = (v46 + 1);
    goto LABEL_225;
  }
  unsigned int v102 = v46;
  uint64_t v103 = 0;
  uint64_t v104 = &v418;
  unsigned int v396 = v102;
  unsigned int v394 = v102 + 1;
  uint64_t v105 = v52;
  char v402 = 1;
  while (1)
  {
    unint64_t v106 = (*a2)[v103];
    int v107 = *(unsigned __int16 *)(v106 + 24);
    if (v106 && v107 == 1) {
      break;
    }
    if (v106) {
      BOOL v109 = v107 == 0;
    }
    else {
      BOOL v109 = 0;
    }
    if (!v109)
    {
      if (v106) {
        BOOL v110 = v107 == 5;
      }
      else {
        BOOL v110 = 0;
      }
      if (!v110)
      {
        int v133 = 1;
        uint64_t v97 = v406;
        goto LABEL_234;
      }
      unsigned int v111 = v104;
      __s1 = v104;
      uint64_t v417 = 0x800000000;
      uint64_t v112 = *(unsigned int *)(v106 + 40);
      if (((*(_DWORD *)(v106 + 40) != 0) & v402) == 1)
      {
        unsigned int v113 = 0;
        uint64_t v114 = 0;
        while (1)
        {
          uint64_t v115 = *(void *)(*(void *)(v106 + 32) + 8 * v114);
          int v116 = *(unsigned __int16 *)(v115 + 24);
          if (v115) {
            BOOL v117 = v116 == 1;
          }
          else {
            BOOL v117 = 0;
          }
          if (v117)
          {
            AnyExtendExpr = *(const llvm::SCEV **)(v115 + 32);
            uint64_t v120 = AnyExtendExpr;
            while (2)
            {
              switch(*((_WORD *)v120 + 12))
              {
                case 1:
                case 2:
                case 3:
                case 0xD:
                  unint64_t v122 = (void *)((char *)v120 + 40);
                  goto LABEL_190;
                case 4:
                  unint64_t v122 = (void *)((char *)v120 + 48);
                  goto LABEL_190;
                case 5:
                case 7:
                case 8:
                case 9:
                case 0xA:
                case 0xB:
                case 0xC:
                  unint64_t v121 = (const llvm::SCEV **)*((void *)v120 + 4);
                  goto LABEL_185;
                case 6:
                  unint64_t v121 = (const llvm::SCEV **)((char *)v120 + 40);
LABEL_185:
                  uint64_t v120 = *v121;
                  continue;
                case 0xE:
                  unint64_t v122 = (void *)*((void *)v120 - 1);
                  goto LABEL_190;
                default:
                  unint64_t v122 = (void *)*((void *)v120 + 4);
LABEL_190:
                  if (*v122 == MulExpr) {
                    goto LABEL_191;
                  }
                  goto LABEL_208;
              }
            }
          }
          if (!v115 || v116 != 0) {
            break;
          }
          AnyExtendExpr = llvm::ScalarEvolution::getAnyExtendExpr((llvm::ScalarEvolution *)a1, (const llvm::SCEV *)v115, (llvm::Type *)MulExpr);
          unsigned int v113 = v417;
LABEL_191:
          if (v113 >= HIDWORD(v417)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)__s1 + v113) = AnyExtendExpr;
          unsigned int v113 = v417 + 1;
          LODWORD(v417) = v417 + 1;
          if (++v114 == v112) {
            goto LABEL_204;
          }
        }
      }
      else
      {
LABEL_204:
        if (v402)
        {
          uint64_t v128 = llvm::ScalarEvolution::getMulExpr(a1, &__s1, 0, v394);
          if (v421 >= (unint64_t)HIDWORD(v421)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v104 = v111;
          *((void *)v420 + v421) = v128;
          LODWORD(v421) = v421 + 1;
          char v402 = 1;
          goto LABEL_209;
        }
      }
LABEL_208:
      char v402 = 0;
      uint64_t v104 = v111;
LABEL_209:
      if (__s1 != v104) {
        free(__s1);
      }
      goto LABEL_216;
    }
    uint64_t v126 = llvm::ScalarEvolution::getAnyExtendExpr((llvm::ScalarEvolution *)a1, (const llvm::SCEV *)(*a2)[v103], (llvm::Type *)MulExpr);
    if (v421 >= (unint64_t)HIDWORD(v421)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v420 + v421) = v126;
LABEL_215:
    LODWORD(v421) = v421 + 1;
LABEL_216:
    if (++v103 == v105)
    {
      uint64_t v97 = v406;
      uint64_t v46 = v396;
      uint64_t v129 = v394;
      if ((v402 & 1) == 0)
      {
LABEL_231:
        int v133 = 1;
        goto LABEL_235;
      }
LABEL_225:
      unint64_t v130 = (unsigned __int16 *)llvm::ScalarEvolution::getAddExpr(a1, &v420, 0, v129);
      int v131 = v130[12];
      if (v131 == 14 || v131 == 0)
      {
        uint64_t MulExpr = llvm::ScalarEvolution::getTruncateExpr((llvm::ScalarEvolution *)a1, (const llvm::SCEV *)v130, v399, 0);
        int v133 = 0;
        goto LABEL_235;
      }
      goto LABEL_231;
    }
  }
  uint64_t v123 = *(void *)(v106 + 32);
  uint64_t v124 = v123;
  uint64_t v97 = v406;
  while (2)
  {
    switch(*(_WORD *)(v124 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        unsigned int v127 = (void *)(v124 + 40);
        goto LABEL_212;
      case 4:
        unsigned int v127 = (void *)(v124 + 48);
        goto LABEL_212;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v125 = *(uint64_t **)(v124 + 32);
        goto LABEL_199;
      case 6:
        uint64_t v125 = (uint64_t *)(v124 + 40);
LABEL_199:
        uint64_t v124 = *v125;
        continue;
      case 0xE:
        unsigned int v127 = *(void **)(v124 - 8);
        goto LABEL_212;
      default:
        unsigned int v127 = *(void **)(v124 + 32);
LABEL_212:
        if (*v127 == MulExpr)
        {
          if (v421 >= (unint64_t)HIDWORD(v421)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v420 + v421) = v123;
          goto LABEL_215;
        }
        int v133 = 1;
LABEL_234:
        uint64_t v46 = v396;
LABEL_235:
        if (v420 != (llvm::SCEV *)&v422) {
          free(v420);
        }
        if (v133)
        {
          LODWORD(v52) = *((_DWORD *)a2 + 2);
          goto LABEL_239;
        }
        return MulExpr;
    }
  }
}

uint64_t llvm::ScalarEvolution::getMulExpr(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = (uint64_t **)a2;
  v259[8] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 8) == 1) {
    return **v4;
  }
  uint64_t v8 = a1;
  sub_1CC0ECBE8(a2, *(uint64_t **)(a1 + 40), *(void *)(a1 + 32));
  uint64_t v9 = *v4;
  uint64_t AddRecExpr = **v4;
  if (AddRecExpr) {
    BOOL v10 = *(unsigned __int16 *)(AddRecExpr + 24) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    while (1)
    {
      uint64_t v20 = v9[1];
      if (!v20 || *(_WORD *)(v20 + 24) != 0) {
        break;
      }
      llvm::APInt::operator*(*(void *)(AddRecExpr + 32) + 24, (void *)(*(void *)(v20 + 32) + 24), (uint64_t)&p_s1);
      uint64_t v23 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)v8, (llvm::LLVMContext *)&p_s1, v22);
      **uint64_t v4 = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)v8, v23);
      if (v252 >= 0x41 && p_s1) {
        MEMORY[0x1D25D9CB0](p_s1, 0x1000C8000313F17);
      }
      uint64_t v24 = *((unsigned int *)v4 + 2);
      if (v24 == 2) {
        return **v4;
      }
      memmove(*v4 + 1, *v4 + 2, 8 * v24 - 16);
      --*((_DWORD *)v4 + 2);
      uint64_t v9 = *v4;
      uint64_t AddRecExpr = **v4;
    }
    uint64_t v25 = *(void *)(AddRecExpr + 32);
    uint64_t v26 = *(unsigned int *)(v25 + 32);
    if (v26 > 0x40)
    {
      int v35 = 0;
      int64_t v36 = (unint64_t)(v26 + 63) >> 6;
      do
      {
        BOOL v216 = v36-- < 1;
        if (v216) {
          break;
        }
        unint64_t v37 = *(void *)(*(void *)(v25 + 24) + 8 * v36);
        v35 += __clz(v37);
      }
      while (!v37);
      int v38 = v26 | 0xFFFFFFC0;
      if ((v26 & 0x3F) == 0) {
        int v38 = 0;
      }
      int v39 = v35 + v38;
      if (v39 == v26) {
        return AddRecExpr;
      }
      if (v39 == v26 - 1) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v27 = *(void *)(v25 + 24);
      if (!v27) {
        return AddRecExpr;
      }
      if (v27 == 1)
      {
LABEL_26:
        uint64_t v28 = *((unsigned int *)v4 + 2);
        if (v28 != 1)
        {
          memmove(v9, v9 + 1, 8 * v28 - 8);
          LODWORD(v28) = *((_DWORD *)v4 + 2);
          uint64_t v9 = *v4;
        }
        unsigned int v11 = 0;
        unsigned int v12 = v28 - 1;
        *((_DWORD *)v4 + 2) = v12;
LABEL_48:
        if (v12 == 1) {
          return *v9;
        }
        goto LABEL_8;
      }
    }
    unsigned int v12 = *((_DWORD *)v4 + 2);
    unsigned int v11 = 1;
    goto LABEL_48;
  }
  unsigned int v11 = 0;
  unsigned int v12 = *((_DWORD *)v4 + 2);
LABEL_8:
  uint64_t v13 = v12;
  if (dword_1EBCC7A38 < a4)
  {
LABEL_9:
    __int16 v14 = sub_1CC0EF280(v8, 5, v9, v12, a3);
    uint64_t v15 = v8;
    uint64_t v16 = v9;
    uint64_t v17 = v13;
    return llvm::ScalarEvolution::getOrCreateMulExpr(v15, v16, v17, v14);
  }
  if (v12)
  {
    uint64_t v29 = 8 * v12;
    uint64_t v30 = v29;
    uint64_t v31 = v9;
    do
    {
      if (dword_1EBCC7D38 <= *(unsigned __int16 *)(*v31 + 26)) {
        goto LABEL_9;
      }
      ++v31;
      v30 -= 8;
    }
    while (v30);
    __s1 = v250;
    v250[0] = 5;
    uint64_t v249 = 0x2000000001;
    unsigned int v32 = 1;
    do
    {
      uint64_t v33 = *v9;
      if (v32 >= HIDWORD(v249)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__s1 + v32) = v33;
      unsigned int v34 = v249 + 1;
      LODWORD(v249) = v34;
      if (v34 >= HIDWORD(v249)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__s1 + v34) = HIDWORD(v33);
      unsigned int v32 = v249 + 1;
      LODWORD(v249) = v249 + 1;
      ++v9;
      v29 -= 8;
    }
    while (v29);
    unint64_t v40 = __s1;
  }
  else
  {
    unint64_t v40 = v250;
    __s1 = v250;
    v250[0] = 5;
    uint64_t v249 = 0x2000000001;
    unsigned int v32 = 1;
  }
  uint64_t AddRecExpr = *(void *)(*(void *)(v8 + 832)
                         + 8
                         * ((*(_DWORD *)(v8 + 840) - 1) & sub_1CC13A6B8(v40, (uint64_t)v40 + 4 * v32)));
  p_s1 = &v253;
  v252 = (void *)0x2000000000;
  if (AddRecExpr) {
    BOOL v41 = (AddRecExpr & 1) == 0;
  }
  else {
    BOOL v41 = 0;
  }
  if (v41)
  {
    while (*(void *)(AddRecExpr + 16) != v249
         || memcmp(__s1, *(const void **)(AddRecExpr + 8), 4 * v249))
    {
      LODWORD(v252) = 0;
      uint64_t AddRecExpr = *(void *)AddRecExpr;
      if (AddRecExpr) {
        BOOL v42 = (AddRecExpr & 1) == 0;
      }
      else {
        BOOL v42 = 0;
      }
      if (!v42)
      {
        uint64_t AddRecExpr = 0;
        break;
      }
    }
  }
  else
  {
    uint64_t AddRecExpr = 0;
  }
  if (__s1 == v250)
  {
    if (AddRecExpr) {
      goto LABEL_65;
    }
  }
  else
  {
    free(__s1);
    if (AddRecExpr)
    {
LABEL_65:
      if ((a3 & ~*(unsigned __int16 *)(AddRecExpr + 28)) != 0) {
        *(_WORD *)(AddRecExpr + 28) |= sub_1CC0EF280(v8, 5, *v4, *((unsigned int *)v4 + 2), a3);
      }
      return AddRecExpr;
    }
  }
  unsigned int v222 = a3;
  uint64_t v43 = *v4;
  BOOL v44 = (llvm::SCEV *)**v4;
  if (*((_WORD *)v44 + 12)) {
    uint64_t v45 = 0;
  }
  else {
    uint64_t v45 = **v4;
  }
  if (v45) {
    BOOL v46 = *((_DWORD *)v4 + 2) == 2;
  }
  else {
    BOOL v46 = 0;
  }
  if (!v46) {
    goto LABEL_134;
  }
  uint64_t AddRecExpr = v43[1];
  if (AddRecExpr) {
    BOOL v47 = *(unsigned __int16 *)(AddRecExpr + 24) == 4;
  }
  else {
    BOOL v47 = 0;
  }
  if (v47 && *(void *)(AddRecExpr + 40) == 2)
  {
    LOBYTE(__s1) = 0;
    p_s1 = &__s1;
    v252 = v254;
    uint64_t v253 = 0x800000000;
    unsigned int v255 = v259;
    unint64_t v256 = v259;
    uint64_t v257 = 8;
    int v258 = 0;
    sub_1CC133C9C((uint64_t)&p_s1, AddRecExpr);
    unsigned int v48 = v253;
    while (v48)
    {
      if (*(unsigned char *)p_s1) {
        break;
      }
      uint64_t v49 = *((void *)v252 + --v48);
      LODWORD(v253) = v48;
      switch(*(_WORD *)(v49 + 24))
      {
        case 1:
        case 2:
        case 3:
        case 0xD:
          int v55 = (uint64_t *)(v49 + 32);
          goto LABEL_95;
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          uint64_t v50 = *(void *)(v49 + 40);
          if (v50)
          {
            __int16 v51 = *(uint64_t **)(v49 + 32);
            uint64_t v52 = 8 * v50 - 8;
            do
            {
              uint64_t v53 = *v51++;
              sub_1CC133C9C((uint64_t)&p_s1, v53);
              if (*(unsigned char *)p_s1) {
                BOOL v54 = 1;
              }
              else {
                BOOL v54 = v52 == 0;
              }
              v52 -= 8;
            }
            while (!v54);
          }
          goto LABEL_96;
        case 6:
          sub_1CC133C9C((uint64_t)&p_s1, *(void *)(v49 + 32));
          int v55 = (uint64_t *)(v49 + 40);
LABEL_95:
          sub_1CC133C9C((uint64_t)&p_s1, *v55);
LABEL_96:
          unsigned int v48 = v253;
          break;
        default:
          break;
      }
    }
    int v56 = __s1;
    if (v256 != v255) {
      free(v256);
    }
    if (v252 != v254) {
      free(v252);
    }
    if (v56)
    {
      uint64_t v57 = sub_1CBFD7CB4(v8, v45, **(void **)(AddRecExpr + 32), 0, a4 + 1);
      uint64_t v58 = sub_1CBFD7CB4(v8, v45, *(void *)(*(void *)(AddRecExpr + 32) + 8), 0, a4 + 1);
      return sub_1CBFD7D6C(v8, v57, v58, 0, a4 + 1);
    }
    uint64_t v43 = *v4;
    BOOL v44 = (llvm::SCEV *)**v4;
  }
  if (!llvm::SCEV::isAllOnesValue(v44)) {
    goto LABEL_134;
  }
  uint64_t v59 = v43[1];
  int v60 = *(unsigned __int16 *)(v59 + 24);
  if (v59) {
    BOOL v61 = v60 == 4;
  }
  else {
    BOOL v61 = 0;
  }
  if (!v61)
  {
    if (v59 && v60 == 7)
    {
      p_s1 = &v253;
      v252 = (void *)0x400000000;
      uint64_t v62 = *(void *)(v59 + 40);
      if (v62)
      {
        unsigned int v63 = *(void **)(v59 + 32);
        uint64_t v64 = 8 * v62;
        do
        {
          uint64_t v65 = sub_1CBFD7CB4(v8, **v4, *v63, 0, a4 + 1);
          if (v252 >= (unint64_t)HIDWORD(v252)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)p_s1 + v252) = v65;
          LODWORD(v252) = v252 + 1;
          ++v63;
          v64 -= 8;
        }
        while (v64);
      }
      uint64_t AddRecExpr = llvm::ScalarEvolution::getAddRecExpr((llvm::ScalarEvolution *)v8, (uint64_t **)&p_s1, *(const llvm::Loop **)(v59 + 48), *(_WORD *)(v59 + 28) & 1);
      if (p_s1 != &v253) {
        free(p_s1);
      }
      return AddRecExpr;
    }
    goto LABEL_134;
  }
  p_s1 = &v253;
  v252 = (void *)0x400000000;
  uint64_t v66 = *(void *)(v59 + 40);
  if (v66)
  {
    char v67 = 0;
    uint64_t v68 = *(void **)(v59 + 32);
    unsigned int v69 = a4;
    uint64_t AddRecExpr = a4 + 1;
    uint64_t v70 = 8 * v66;
    do
    {
      uint64_t v71 = v4;
      uint64_t v72 = sub_1CBFD7CB4(v8, **v4, *v68, 0, AddRecExpr);
      BOOL v73 = *(unsigned __int16 *)(v72 + 24) != 5;
      if (v252 >= (unint64_t)HIDWORD(v252)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)p_s1 + v252) = v72;
      v67 |= v73;
      LODWORD(v252) = v252 + 1;
      ++v68;
      v70 -= 8;
      uint64_t v4 = v71;
    }
    while (v70);
    if (v67)
    {
      uint64_t AddRecExpr = llvm::ScalarEvolution::getAddExpr(v8, (unint64_t **)&p_s1, 0, AddRecExpr);
      char v74 = 1;
    }
    else
    {
      char v74 = 0;
    }
    a4 = v69;
  }
  else
  {
    char v74 = 0;
  }
  if (p_s1 != &v253) {
    free(p_s1);
  }
  if ((v74 & 1) == 0)
  {
LABEL_134:
    LODWORD(v75) = *((_DWORD *)v4 + 2);
    if (v75 > v11)
    {
      uint64_t v76 = *v4;
      uint64_t v77 = v11;
      while (1)
      {
        uint64_t v78 = v76[v77];
        unsigned int v79 = *(unsigned __int16 *)(v78 + 24);
        if (v79 >= 5) {
          break;
        }
        ++v77;
        if (v75 == ++v11) {
          goto LABEL_364;
        }
      }
      if (v79 == 5 && v75 <= dword_1EBCC7678)
      {
        unint64_t v212 = &v76[v77];
        do
        {
          int v213 = (char *)&v76[v75];
          if (v213 != (char *)(v212 + 1))
          {
            memmove(v212, v212 + 1, v213 - (char *)(v212 + 1));
            LODWORD(v75) = *((_DWORD *)v4 + 2);
          }
          uint64_t v214 = (v75 - 1);
          *((_DWORD *)v4 + 2) = v214;
          unint64_t v75 = *(void *)(v78 + 40);
          if (v75 + v214 > *((unsigned int *)v4 + 3)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v76 = *v4;
          if (v75)
          {
            memcpy(&v76[v214], *(const void **)(v78 + 32), 8 * v75);
            LODWORD(v214) = *((_DWORD *)v4 + 2);
            uint64_t v76 = *v4;
          }
          LODWORD(v75) = v214 + v75;
          *((_DWORD *)v4 + 2) = v75;
          unint64_t v212 = &v76[v77];
          uint64_t v78 = v76[v77];
          if (v78) {
            BOOL v215 = *(unsigned __int16 *)(v78 + 24) == 5;
          }
          else {
            BOOL v215 = 0;
          }
          BOOL v216 = !v215 || v75 > dword_1EBCC7678;
        }
        while (!v216);
        return llvm::ScalarEvolution::getMulExpr(v8, v4, 0, a4 + 1);
      }
    }
    if (v75 > v11)
    {
      uint64_t v80 = (uint64_t)&(*v4)[v11];
      while (*(unsigned __int16 *)(*(void *)v80 + 24) <= 6u)
      {
        ++v11;
        v80 += 8;
        if (v75 == v11) {
          goto LABEL_364;
        }
      }
    }
    if (v75 <= v11)
    {
LABEL_364:
      uint64_t v211 = *v4;
      __int16 v14 = sub_1CC0EF280(v8, 5, *v4, v75, v222);
      uint64_t v15 = v8;
      uint64_t v16 = v211;
      uint64_t v17 = v75;
      return llvm::ScalarEvolution::getOrCreateMulExpr(v15, v16, v17, v14);
    }
    unsigned int v238 = a4 + 1;
    uint64_t v81 = v11;
    uint64_t v236 = (llvm::ScalarEvolution *)v8;
    v220 = v4;
    while (1)
    {
      uint64_t v82 = *v4;
      if (*(_WORD *)((*v4)[v81] + 24) != 7) {
        goto LABEL_364;
      }
      int v83 = 0;
      p_s1 = &v253;
      v252 = (void *)0x800000000;
      uint64_t v223 = v81;
      uint64_t v240 = v82[v81];
      uint64_t v84 = *(const llvm::BasicBlock ****)(v240 + 48);
      do
      {
        int v85 = (const llvm::SCEV *)(*v4)[v83];
        if (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)v8, v85, (const llvm::Loop *)v84) == 1&& llvm::ScalarEvolution::getBlockDisposition((llvm::ScalarEvolution *)v8, v85, *v84[4]) == 2)
        {
          if (v252 >= (unint64_t)HIDWORD(v252)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)p_s1 + v252) = (*v4)[v83];
          LODWORD(v252) = v252 + 1;
          uint64_t v87 = (uint64_t)&(*v4)[v83];
          uint64_t v88 = *((unsigned int *)v4 + 2);
          uint64_t v89 = (uint64_t)&(*v4)[v88];
          unsigned int v86 = (const llvm::APInt *)(v89 - (v87 + 8));
          if (v89 != v87 + 8)
          {
            memmove((void *)v87, (const void *)(v87 + 8), (size_t)v86);
            LODWORD(v88) = *((_DWORD *)v4 + 2);
          }
          *((_DWORD *)v4 + 2) = v88 - 1;
          --v83;
          LODWORD(v75) = v75 - 1;
        }
        ++v83;
      }
      while (v83 != v75);
      if (v252)
      {
        __s1 = v250;
        uint64_t v249 = 0x400000000;
        if (*(void *)(v240 + 40) >= 5uLL) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t MulExpr = (void *)llvm::ScalarEvolution::getMulExpr(v8, &p_s1, 0, v238);
        if (*(_DWORD *)(v240 + 40))
        {
          uint64_t v91 = 0;
          uint64_t v92 = 8 * *(unsigned int *)(v240 + 40);
          do
          {
            uint64_t v93 = sub_1CBFD7CB4(v8, MulExpr, *(void *)(*(void *)(v240 + 32) + v91), 0, v238);
            if (v249 >= (unint64_t)HIDWORD(v249)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)__s1 + v249) = v93;
            LODWORD(v249) = v249 + 1;
            v91 += 8;
          }
          while (v92 != v91);
        }
        unint64_t v242 = MulExpr;
        uint64_t v243 = v240;
        __int16 v94 = sub_1CC0EF280(v8, 5, &v242, 2, v222);
        uint64_t v95 = llvm::ScalarEvolution::getAddRecExpr((llvm::ScalarEvolution *)v8, (uint64_t **)&__s1, (const llvm::Loop *)v84, (unsigned __int16)(v94 & *(_WORD *)(v240 + 28)));
        uint64_t AddRecExpr = v95;
        if (*((_DWORD *)v4 + 2) != 1)
        {
          int v96 = 0;
          uint64_t v97 = *v4;
          do
          {
            int v98 = v96;
            uint64_t v99 = v97[v96++];
          }
          while (v99 != v240);
          v97[v98] = v95;
          uint64_t AddRecExpr = llvm::ScalarEvolution::getMulExpr(v8, v4, 0, v238);
        }
        if (__s1 != v250) {
          free(__s1);
        }
        int v100 = 1;
        uint64_t v101 = v223;
        goto LABEL_360;
      }
      unsigned int v102 = v223 + 1;
      uint64_t v103 = *((unsigned int *)v4 + 2);
      if (v223 + 1 == v103)
      {
        int v100 = 0;
        uint64_t v101 = v223;
        goto LABEL_360;
      }
      char v221 = 0;
      int v104 = v223;
      do
      {
        uint64_t v105 = (const llvm::BasicBlock ****)(*v4)[v102];
        if (*((_WORD *)v105 + 12) != 7) {
          break;
        }
        if (v105[6] != v84 || (unint64_t)v105[5] + *(void *)(v240 + 40) - 1 > dword_1EBCC7C78) {
          goto LABEL_337;
        }
        char v106 = 0;
        uint64_t v107 = 0;
        __s1 = (void *)v240;
        uint64_t v249 = (uint64_t)v105;
        do
        {
          char v108 = v106;
          if (dword_1EBCC7D38 <= *((unsigned __int16 *)*(&__s1 + v107) + 13)) {
            goto LABEL_337;
          }
          char v106 = 1;
          uint64_t v107 = 1;
        }
        while ((v108 & 1) == 0);
        unsigned int v219 = v104;
        uint64_t v109 = v240;
        while (2)
        {
          BOOL v110 = *(uint64_t **)(v109 + 32);
LABEL_186:
          uint64_t v109 = *v110;
          switch(*(_WORD *)(v109 + 24))
          {
            case 1:
            case 2:
            case 3:
            case 0xD:
              unsigned int v111 = (uint64_t *)(v109 + 40);
              break;
            case 4:
              unsigned int v111 = (uint64_t *)(v109 + 48);
              break;
            case 5:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
              continue;
            case 6:
              BOOL v110 = (uint64_t *)(v109 + 40);
              goto LABEL_186;
            case 0xE:
              unsigned int v111 = *(uint64_t **)(v109 - 8);
              break;
            default:
              unsigned int v111 = *(uint64_t **)(v109 + 32);
              break;
          }
          break;
        }
        uint64_t v112 = *v111;
        unsigned int v113 = *(_DWORD *)(*v111 + 8);
        uint64_t v114 = *(void *)(*(void *)v8 + 40);
        uint64_t v218 = v102;
        if (v113 == 15)
        {
          if ((v113 & 0xFE) == 0x12) {
            unsigned int v113 = *(_DWORD *)(**(void **)(v112 + 16) + 8);
          }
          uint64_t v200 = *(void *)(v114 + 504);
          if (v113 < 0x100) {
            goto LABEL_351;
          }
          unsigned int v201 = v113 >> 8;
          unint64_t v202 = *(unsigned int *)(v114 + 512);
          uint64_t v203 = *(void *)(v114 + 504);
          if (v202)
          {
            uint64_t v203 = v200;
            unint64_t v204 = v202;
            do
            {
              unint64_t v205 = v204 >> 1;
              uint64_t v206 = v203 + 16 * (v204 >> 1);
              unsigned int v207 = *(_DWORD *)(v206 + 8);
              uint64_t v208 = v206 + 16;
              v204 += ~(v204 >> 1);
              if (v207 < v201) {
                uint64_t v203 = v208;
              }
              else {
                unint64_t v204 = v205;
              }
            }
            while (v204);
          }
          if (v203 == v200 + 16 * v202 || *(_DWORD *)(v203 + 8) != v201) {
LABEL_351:
          }
            uint64_t v203 = v200;
          unint64_t v237 = *(unsigned int *)(v203 + 12);
        }
        else
        {
          unint64_t v237 = sub_1CB83544C(v114 + 272, v112);
          if (v115 == 1) {
        }
          }
        __s1 = v250;
        uint64_t v249 = 0x700000000;
        uint64_t v225 = (*((_DWORD *)v105 + 10) + *(_DWORD *)(v240 + 40) - 1);
        unsigned int v226 = v102;
        if (*((_DWORD *)v105 + 10) + *(_DWORD *)(v240 + 40) == 1) {
          goto LABEL_325;
        }
        unsigned int v239 = v105;
        uint64_t v217 = AddRecExpr;
        unint64_t v116 = 0;
        int v117 = 1;
        int v224 = v84;
        do
        {
          int v118 = 0;
          uint64_t v243 = 0x700000000;
          uint64_t v241 = 2 * v116;
          unint64_t v242 = v244;
          uint64_t v229 = (2 * v116) | 1;
          unint64_t v228 = v116 >> 1;
          LODWORD(v119) = v116 + 1;
          unint64_t v234 = v116;
          unint64_t v235 = v116;
          int v120 = v117;
          unint64_t v121 = v116;
          int v227 = v120;
          int v232 = v120;
          unsigned int v233 = 0;
          unint64_t v230 = v116 + 1;
          do
          {
            char v122 = 0;
            unint64_t v123 = v241 - v121;
            if (!v116) {
              goto LABEL_215;
            }
            unint64_t v124 = 1;
            unint64_t v125 = v116 - v123;
            if (v116 == v123) {
              goto LABEL_216;
            }
            if (v116 < v123)
            {
              char v122 = 0;
              unint64_t v124 = 0;
              goto LABEL_216;
            }
            char v122 = 0;
            if (v228 >= v123) {
              unint64_t v125 = v241 - v121;
            }
            if (v125)
            {
              if (v125 + 1 > 2) {
                uint64_t v126 = v125 + 1;
              }
              else {
                uint64_t v126 = 2;
              }
              unint64_t v127 = v116;
              unint64_t v128 = 1;
              unint64_t v124 = 1;
              do
              {
                unint64_t v129 = v127 * v124;
                BOOL v130 = !is_mul_ok(v127, v124);
                BOOL v216 = v127-- > 1;
                int v131 = v216;
                if ((v131 & v130) != 0) {
                  char v122 = 1;
                }
                unint64_t v124 = v129 / v128++;
              }
              while (v126 != v128);
            }
            else
            {
LABEL_215:
              unint64_t v124 = 1;
            }
LABEL_216:
            int v132 = *(_DWORD *)(v240 + 40);
            unint64_t v231 = v121 + 1;
            int v133 = v121 + 1 - v132;
            if ((int)v121 - (int)v116 > v133) {
              int v133 = v121 - v116;
            }
            int v134 = *((_DWORD *)v239 + 10);
            if ((int)v119 < v134) {
              int v134 = v119;
            }
            if (v133 < v134 && v122 == 0)
            {
              if ((int)v233 <= v232 - v132) {
                uint64_t v136 = (v232 - v132);
              }
              else {
                uint64_t v136 = v233;
              }
              uint64_t v137 = v134;
              do
              {
                char v138 = 0;
                if (v241 == v121) {
                  goto LABEL_250;
                }
                unint64_t v139 = v235 - v136;
                unint64_t v140 = 1;
                if (v123 != v235 - v136)
                {
                  if (v139 <= v123)
                  {
                    if (v123 >> 1 >= v139) {
                      uint64_t v141 = v235 - v136;
                    }
                    else {
                      uint64_t v141 = v123 - v139;
                    }
                    if (v141)
                    {
                      char v138 = 0;
                      uint64_t v142 = 2;
                      if ((unint64_t)(v141 + 1) > 2) {
                        uint64_t v142 = v141 + 1;
                      }
                      unint64_t v143 = v234;
                      unint64_t v144 = 1;
                      unint64_t v140 = 1;
                      do
                      {
                        unint64_t v145 = v143 * v140;
                        BOOL v146 = (v143 * (unsigned __int128)v140) >> 64 != 0;
                        BOOL v216 = v143-- > 1;
                        int v147 = v216;
                        if ((v147 & v146) != 0) {
                          char v138 = 1;
                        }
                        unint64_t v140 = v145 / v144++;
                      }
                      while (v142 != v144);
                      goto LABEL_251;
                    }
                    char v138 = 0;
LABEL_250:
                    unint64_t v140 = 1;
                    goto LABEL_251;
                  }
                  char v138 = 0;
                  unint64_t v140 = 0;
                }
LABEL_251:
                unint64_t v148 = v140 * v124;
                if (((v140 > 1) & !is_mul_ok(v140, v124)) != 0) {
                  char v149 = 1;
                }
                else {
                  char v149 = v138;
                }
                if (v237 >= 0x41) {
                  char v122 = v149;
                }
                else {
                  char v122 = v138;
                }
                unint64_t v150 = v148;
                unsigned int v151 = *(_DWORD *)(v112 + 8);
                uint64_t v152 = v112;
                if (v151 != 13)
                {
                  if ((v151 & 0xFE) == 0x12) {
                    unsigned int v151 = *(_DWORD *)(**(void **)(v112 + 16) + 8);
                  }
                  uint64_t v153 = *(void *)(*(void *)v8 + 40);
                  uint64_t v154 = *(void *)(v153 + 504);
                  if (v151 < 0x100) {
                    goto LABEL_269;
                  }
                  unsigned int v155 = v151 >> 8;
                  unint64_t v156 = *(unsigned int *)(v153 + 512);
                  uint64_t v157 = v154;
                  if (v156)
                  {
                    uint64_t v157 = v154;
                    unint64_t v158 = v156;
                    do
                    {
                      unint64_t v159 = v158 >> 1;
                      uint64_t v160 = v157 + 16 * (v158 >> 1);
                      unsigned int v161 = *(_DWORD *)(v160 + 8);
                      uint64_t v162 = v160 + 16;
                      v158 += ~(v158 >> 1);
                      if (v161 < v155) {
                        uint64_t v157 = v162;
                      }
                      else {
                        unint64_t v158 = v159;
                      }
                    }
                    while (v158);
                  }
                  if (v157 == v154 + 16 * v156 || *(_DWORD *)(v157 + 8) != v155) {
LABEL_269:
                  }
                    uint64_t v157 = v154;
                  uint64_t v152 = llvm::IntegerType::get(*(llvm::IntegerType **)v112, (llvm::LLVMContext *)*(unsigned int *)(v157 + 12));
                  if ((*(_DWORD *)(v112 + 8) & 0xFE) == 0x12)
                  {
                    unint64_t v171 = (llvm::Type *)*(unsigned int *)(v112 + 32);
                    if (*(_DWORD *)(v112 + 8) == 19) {
                      llvm::ScalableVectorType::get((uint64_t **)v152, v171);
                    }
                    else {
                      llvm::FixedVectorType::get((llvm::FixedVectorType *)v152, v171);
                    }
                  }
                }
                uint64_t v163 = *(uint64_t **)v152;
                unsigned int v164 = *(_DWORD *)(v152 + 8);
                LODWORD(v246) = v164 >> 8;
                if (v164 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v164 <= 0xFF) {
                  unint64_t v165 = 0;
                }
                else {
                  unint64_t v165 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v164) + 63);
                }
                unsigned int v245 = (void *)(v165 & v150);
                uint64_t v166 = (llvm::ConstantInt *)llvm::ConstantInt::get((llvm::ConstantInt *)v163, (llvm::LLVMContext *)&v245, v86);
                uint64_t v8 = (uint64_t)v236;
                if (v246 >= 0x41 && v245) {
                  MEMORY[0x1D25D9CB0](v245, 0x1000C8000313F17);
                }
                unint64_t Constant = llvm::ScalarEvolution::getConstant(v236, v166);
                uint64_t v168 = *(void *)(*(void *)(v240 + 32) + 8 * (v121 - v136));
                unint64_t v169 = v239[4][v136];
                unsigned int v245 = v247;
                v247[0] = Constant;
                v247[1] = v168;
                v247[2] = v169;
                uint64_t v246 = 0x300000003;
                uint64_t v170 = llvm::ScalarEvolution::getMulExpr(v236, &v245, 0, v238);
                if (v245 != v247) {
                  free(v245);
                }
                if (v243 >= (unint64_t)HIDWORD(v243)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v242 + v243) = v170;
                int v118 = v243 + 1;
                LODWORD(v243) = v243 + 1;
                ++v136;
              }
              while (v136 < v137 && !v122);
            }
            unint64_t v119 = v230;
            ++v121;
            unint64_t v116 = v235;
            if (v231 == v229) {
              break;
            }
            ++v232;
            ++v233;
            --v234;
          }
          while (!v122);
          uint64_t v84 = v224;
          unsigned int v172 = v226;
          int v173 = v227;
          if (!v118)
          {
            unsigned int v174 = *(_DWORD *)(v112 + 8);
            uint64_t v175 = v112;
            if (v174 != 13)
            {
              if ((v174 & 0xFE) == 0x12) {
                unsigned int v174 = *(_DWORD *)(**(void **)(v112 + 16) + 8);
              }
              uint64_t v176 = *(void *)(*(void *)v8 + 40);
              uint64_t v177 = *(void *)(v176 + 504);
              if (v174 < 0x100) {
                goto LABEL_302;
              }
              unsigned int v178 = v174 >> 8;
              unint64_t v179 = *(unsigned int *)(v176 + 512);
              uint64_t v180 = v177;
              if (v179)
              {
                uint64_t v180 = v177;
                unint64_t v181 = v179;
                do
                {
                  unint64_t v182 = v181 >> 1;
                  uint64_t v183 = v180 + 16 * (v181 >> 1);
                  unsigned int v184 = *(_DWORD *)(v183 + 8);
                  uint64_t v185 = v183 + 16;
                  v181 += ~(v181 >> 1);
                  if (v184 < v178) {
                    uint64_t v180 = v185;
                  }
                  else {
                    unint64_t v181 = v182;
                  }
                }
                while (v181);
              }
              if (v180 == v177 + 16 * v179 || *(_DWORD *)(v180 + 8) != v178) {
LABEL_302:
              }
                uint64_t v180 = v177;
              uint64_t v175 = llvm::IntegerType::get(*(llvm::IntegerType **)v112, (llvm::LLVMContext *)*(unsigned int *)(v180 + 12));
              if ((*(_DWORD *)(v112 + 8) & 0xFE) == 0x12)
              {
                char v191 = (llvm::Type *)*(unsigned int *)(v112 + 32);
                if (*(_DWORD *)(v112 + 8) == 19) {
                  llvm::ScalableVectorType::get((uint64_t **)v175, v191);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v175, v191);
                }
                uint64_t v8 = (uint64_t)v236;
                uint64_t v84 = v224;
                unsigned int v172 = v226;
                int v173 = v227;
                unint64_t v119 = v230;
              }
            }
            unint64_t v186 = *(uint64_t **)v175;
            unsigned int v187 = *(_DWORD *)(v175 + 8);
            LODWORD(v246) = v187 >> 8;
            if (v187 >> 8 >= 0x41) {
              operator new[]();
            }
            unsigned int v245 = 0;
            unint64_t v188 = (llvm::ConstantInt *)llvm::ConstantInt::get((llvm::ConstantInt *)v186, (llvm::LLVMContext *)&v245, v86);
            if (v246 >= 0x41 && v245) {
              MEMORY[0x1D25D9CB0](v245, 0x1000C8000313F17);
            }
            unint64_t v189 = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)v8, v188);
            if (v243 >= (unint64_t)HIDWORD(v243)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v242 + v243) = v189;
            LODWORD(v243) = v243 + 1;
          }
          uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(v8, (unint64_t **)&v242, 0, v238);
          if (v249 >= (unint64_t)HIDWORD(v249)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)__s1 + v249) = AddExpr;
          LODWORD(v249) = v249 + 1;
          if (v242 != v244) {
            free(v242);
          }
          if (v119 == v225) {
            break;
          }
          int v117 = v173 + 1;
          unint64_t v116 = v119;
        }
        while (!v122);
        uint64_t AddRecExpr = v217;
        if (v122)
        {
          unsigned int v192 = v172;
          uint64_t v193 = v240;
          unsigned int v194 = v192;
          uint64_t v4 = v220;
LABEL_331:
          int v100 = 0;
          int v197 = 1;
          uint64_t v240 = v193;
LABEL_332:
          unsigned int v102 = v194;
          goto LABEL_333;
        }
LABEL_325:
        uint64_t v195 = llvm::ScalarEvolution::getAddRecExpr((llvm::ScalarEvolution *)v8, (uint64_t **)&__s1, (const llvm::Loop *)v84, 0);
        uint64_t v193 = v195;
        uint64_t v4 = v220;
        uint64_t v196 = *((unsigned int *)v220 + 2);
        if (v196 != 2)
        {
          (*v220)[v223] = v195;
          uint64_t v198 = (uint64_t)&(*v220)[v218];
          uint64_t v199 = (uint64_t)&(*v220)[v196];
          unsigned int v86 = (const llvm::APInt *)(v199 - (v198 + 8));
          if (v199 != v198 + 8)
          {
            memmove((void *)v198, (const void *)(v198 + 8), (size_t)v86);
            LODWORD(v196) = *((_DWORD *)v220 + 2);
          }
          unsigned int v194 = v219;
          uint64_t v240 = 0;
          int v197 = 0;
          *((_DWORD *)v220 + 2) = v196 - 1;
          char v221 = 1;
          int v100 = 26;
          if (*(_WORD *)(v193 + 24) != 7 || !v193) {
            goto LABEL_332;
          }
          goto LABEL_331;
        }
        int v197 = 0;
        int v100 = 1;
        uint64_t AddRecExpr = v195;
        unsigned int v102 = v226;
LABEL_333:
        if (__s1 != v250) {
          free(__s1);
        }
        if (!v197) {
          goto LABEL_354;
        }
        LODWORD(v103) = *((_DWORD *)v4 + 2);
LABEL_337:
        int v104 = v102++;
      }
      while (v103 != v102);
      int v100 = 26;
LABEL_354:
      BOOL v209 = v100 == 26;
      if (v100 == 26) {
        int v100 = 0;
      }
      uint64_t v101 = v223;
      if (v209 && (v221 & 1) != 0)
      {
        uint64_t v210 = llvm::ScalarEvolution::getMulExpr(v8, v4, 0, v238);
        uint64_t v101 = v223;
        uint64_t AddRecExpr = v210;
        int v100 = 1;
      }
LABEL_360:
      if (p_s1 != &v253)
      {
        free(p_s1);
        uint64_t v101 = v223;
      }
      if (v100) {
        return AddRecExpr;
      }
      unint64_t v75 = *((unsigned int *)v4 + 2);
      uint64_t v81 = v101 + 1;
      if (v101 + 1 >= v75) {
        goto LABEL_364;
      }
    }
  }
  return AddRecExpr;
}

uint64_t llvm::ScalarEvolution::getAddRecExpr(llvm::ScalarEvolution *a1, uint64_t **a2, const llvm::Loop *a3, uint64_t a4)
{
  v40[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((unsigned int *)a2 + 2);
  uint64_t v7 = *a2;
  if (v6 == 1) {
    return *v7;
  }
  for (uint64_t i = v7[v6 - 1]; i && *(_WORD *)(i + 24) == 0; uint64_t i = v7[v6 - 1])
  {
    uint64_t v13 = *(void *)(i + 32);
    uint64_t v14 = *(unsigned int *)(v13 + 32);
    if (v14 >= 0x41)
    {
      int v15 = 0;
      int64_t v16 = (unint64_t)(v14 + 63) >> 6;
      do
      {
        if (v16-- < 1) {
          break;
        }
        unint64_t v18 = *(void *)(*(void *)(v13 + 24) + 8 * v16);
        v15 += __clz(v18);
      }
      while (!v18);
      int v19 = v14 | 0xFFFFFFC0;
      if ((v14 & 0x3F) == 0) {
        int v19 = 0;
      }
      if (v15 + v19 != v14) {
        break;
      }
    }
    else if (*(void *)(v13 + 24))
    {
      break;
    }
    uint64_t v6 = (v6 - 1);
    *((_DWORD *)a2 + 2) = v6;
    if (v6 == 1) {
      return *v7;
    }
    a4 = 0;
  }
  int v20 = sub_1CC0EF280((uint64_t)a1, 7, v7, v6, a4);
  uint64_t v21 = **a2;
  if (v21) {
    BOOL v22 = *(unsigned __int16 *)(v21 + 24) == 7;
  }
  else {
    BOOL v22 = 0;
  }
  if (!v22) {
    return llvm::ScalarEvolution::getOrCreateAddRecExpr((uint64_t)a1, *a2, *((unsigned int *)a2 + 2), (uint64_t)a3, v20);
  }
  uint64_t AddRecExpr = *(const llvm::Loop **)(v21 + 48);
  if (AddRecExpr != a3)
  {
    uint64_t v23 = *(const llvm::Loop **)(v21 + 48);
    while (v23)
    {
      uint64_t v23 = *(const llvm::Loop **)v23;
      if (v23 == a3) {
        goto LABEL_29;
      }
    }
    uint64_t v29 = a3;
    do
    {
      if (!v29) {
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
      }
      uint64_t v29 = *(const llvm::Loop **)v29;
    }
    while (v29 != AddRecExpr);
    return llvm::ScalarEvolution::getOrCreateAddRecExpr((uint64_t)a1, *a2, *((unsigned int *)a2 + 2), (uint64_t)a3, v20);
  }
LABEL_29:
  unsigned int v24 = 0;
  uint64_t v25 = a3;
  do
  {
    uint64_t v25 = *(const llvm::Loop **)v25;
    ++v24;
  }
  while (v25);
  uint64_t v26 = *(void **)(v21 + 48);
  do
  {
    uint64_t v26 = (void *)*v26;
    LODWORD(v25) = v25 + 1;
  }
  while (v26);
  if (v24 >= v25) {
    return llvm::ScalarEvolution::getOrCreateAddRecExpr((uint64_t)a1, *a2, *((unsigned int *)a2 + 2), (uint64_t)a3, v20);
  }
  uint64_t v28 = *(uint64_t **)(v21 + 32);
  unint64_t v27 = *(void *)(v21 + 40);
  int v38 = v40;
  uint64_t v39 = 0x400000000;
  if (v27 >= 5) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v27)
  {
    memcpy(v40, v28, 8 * v27);
    int v30 = v39;
    uint64_t v28 = *(uint64_t **)(v21 + 32);
  }
  else
  {
    int v30 = 0;
  }
  LODWORD(v39) = v30 + v27;
  **a2 = *v28;
  uint64_t v31 = *((unsigned int *)a2 + 2);
  if (v31)
  {
    unsigned int v32 = *a2;
    uint64_t v33 = 8 * v31;
    while (llvm::ScalarEvolution::getLoopDisposition(a1, (const llvm::SCEV *)*v32, a3) == 1)
    {
      ++v32;
      v33 -= 8;
      if (!v33) {
        goto LABEL_46;
      }
    }
  }
  else
  {
LABEL_46:
    *(void *)int v38 = llvm::ScalarEvolution::getAddRecExpr(a1, a2, a3, v20 & (*(_WORD *)(v21 + 28) & 6 | 1u));
    if (!v39)
    {
LABEL_50:
      uint64_t AddRecExpr = (const llvm::Loop *)llvm::ScalarEvolution::getAddRecExpr(a1, &v38, AddRecExpr, *(_WORD *)(v21 + 28) & ((unsigned __int16)v20 | 1) & 7);
      int v36 = 0;
      goto LABEL_52;
    }
    unsigned int v34 = (const llvm::SCEV **)v38;
    uint64_t v35 = 8 * v39;
    while (llvm::ScalarEvolution::getLoopDisposition(a1, *v34, AddRecExpr) == 1)
    {
      ++v34;
      v35 -= 8;
      if (!v35) {
        goto LABEL_50;
      }
    }
  }
  **a2 = v21;
  int v36 = 1;
LABEL_52:
  if (v38 != v40) {
    free(v38);
  }
  if (v36) {
    return llvm::ScalarEvolution::getOrCreateAddRecExpr((uint64_t)a1, *a2, *((unsigned int *)a2 + 2), (uint64_t)a3, v20);
  }
  return (uint64_t)AddRecExpr;
}

uint64_t llvm::ScalarEvolution::GetMinTrailingZeros(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  uint64_t v4 = *((void *)this + 65);
  uint64_t v5 = *((unsigned int *)this + 134);
  unsigned int v6 = a2 >> 4;
  if (v5)
  {
    LODWORD(v7) = (v5 - 1) & (v6 ^ (a2 >> 9));
    uint64_t v8 = v4 + 16 * v7;
    uint64_t v9 = *(const llvm::SCEV **)v8;
    if (*(const llvm::SCEV **)v8 == a2) {
      goto LABEL_8;
    }
    int v10 = 1;
    while (v9 != (const llvm::SCEV *)-4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v5 - 1);
      uint64_t v9 = *(const llvm::SCEV **)(v4 + 16 * v7);
      if (v9 == a2)
      {
        uint64_t v8 = v4 + 16 * v7;
        goto LABEL_8;
      }
    }
  }
  uint64_t v8 = v4 + 16 * v5;
LABEL_8:
  if (v8 != v4 + 16 * v5) {
    return *(unsigned int *)(v8 + 8);
  }
  int MinTrailingZerosImpl = llvm::ScalarEvolution::GetMinTrailingZerosImpl((const llvm::DataLayout **)this, a2);
  unsigned int v14 = *((_DWORD *)this + 134);
  if (v14)
  {
    uint64_t v15 = *((void *)this + 65);
    unsigned int v16 = v14 - 1;
    unsigned int v17 = (v14 - 1) & (v6 ^ (a2 >> 9));
    uint64_t v8 = v15 + 16 * v17;
    unint64_t v18 = *(const llvm::SCEV **)v8;
    if (*(const llvm::SCEV **)v8 == a2) {
      return *(unsigned int *)(v8 + 8);
    }
    uint64_t v19 = 0;
    int v20 = 1;
    while (v18 != (const llvm::SCEV *)-4096)
    {
      if (v19) {
        BOOL v21 = 0;
      }
      else {
        BOOL v21 = v18 == (const llvm::SCEV *)-8192;
      }
      if (v21) {
        uint64_t v19 = v8;
      }
      unsigned int v22 = v17 + v20++;
      unsigned int v17 = v22 & v16;
      uint64_t v8 = v15 + 16 * (v22 & v16);
      unint64_t v18 = *(const llvm::SCEV **)v8;
      if (*(const llvm::SCEV **)v8 == a2) {
        return *(unsigned int *)(v8 + 8);
      }
    }
    if (v19) {
      uint64_t v8 = v19;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v23 = (uint64_t *)((char *)this + 520);
  int v24 = *((_DWORD *)this + 132);
  if (4 * v24 + 4 >= 3 * v14)
  {
    sub_1CBF8BE34(v23, 2 * v14);
    uint64_t v26 = *((void *)this + 65);
    int v27 = *((_DWORD *)this + 134) - 1;
    unsigned int v28 = v27 & (v6 ^ (a2 >> 9));
    uint64_t v8 = v26 + 16 * v28;
    uint64_t v29 = *(const llvm::SCEV **)v8;
    if (*(const llvm::SCEV **)v8 != a2)
    {
      uint64_t v30 = 0;
      int v31 = 1;
      while (v29 != (const llvm::SCEV *)-4096)
      {
        if (v30) {
          BOOL v32 = 0;
        }
        else {
          BOOL v32 = v29 == (const llvm::SCEV *)-8192;
        }
        if (v32) {
          uint64_t v30 = v8;
        }
        unsigned int v33 = v28 + v31++;
        unsigned int v28 = v33 & v27;
        uint64_t v8 = v26 + 16 * (v33 & v27);
        uint64_t v29 = *(const llvm::SCEV **)v8;
        if (*(const llvm::SCEV **)v8 == a2) {
          goto LABEL_38;
        }
      }
      goto LABEL_50;
    }
LABEL_38:
    uint64_t v25 = a2;
    goto LABEL_26;
  }
  if (v14 + ~v24 - *((_DWORD *)this + 133) <= v14 >> 3)
  {
    sub_1CBF8BE34(v23, v14);
    uint64_t v34 = *((void *)this + 65);
    int v35 = *((_DWORD *)this + 134) - 1;
    unsigned int v36 = v35 & (v6 ^ (a2 >> 9));
    uint64_t v8 = v34 + 16 * v36;
    unint64_t v37 = *(const llvm::SCEV **)v8;
    if (*(const llvm::SCEV **)v8 != a2)
    {
      uint64_t v30 = 0;
      int v38 = 1;
      while (v37 != (const llvm::SCEV *)-4096)
      {
        if (v30) {
          BOOL v39 = 0;
        }
        else {
          BOOL v39 = v37 == (const llvm::SCEV *)-8192;
        }
        if (v39) {
          uint64_t v30 = v8;
        }
        unsigned int v40 = v36 + v38++;
        unsigned int v36 = v40 & v35;
        uint64_t v8 = v34 + 16 * (v40 & v35);
        unint64_t v37 = *(const llvm::SCEV **)v8;
        if (*(const llvm::SCEV **)v8 == a2) {
          goto LABEL_38;
        }
      }
LABEL_50:
      if (v30) {
        uint64_t v8 = v30;
      }
      goto LABEL_25;
    }
    goto LABEL_38;
  }
LABEL_25:
  uint64_t v25 = *(const llvm::SCEV **)v8;
LABEL_26:
  ++*((_DWORD *)this + 132);
  if (v25 != (const llvm::SCEV *)-4096) {
    --*((_DWORD *)this + 133);
  }
  *(void *)uint64_t v8 = a2;
  *(_DWORD *)(v8 + 8) = MinTrailingZerosImpl;
  return *(unsigned int *)(v8 + 8);
}

uint64_t llvm::ScalarEvolution::getTypeSizeInBits(llvm::ScalarEvolution *this, llvm::Type *a2)
{
  unsigned int v2 = *((_DWORD *)a2 + 2);
  uint64_t v3 = *(void *)(*(void *)this + 40);
  if (v2 == 15)
  {
    if ((v2 & 0xFE) == 0x12) {
      unsigned int v2 = *(_DWORD *)(**((void **)a2 + 2) + 8);
    }
    uint64_t v6 = *(void *)(v3 + 504);
    if (v2 < 0x100) {
      goto LABEL_16;
    }
    unsigned int v7 = v2 >> 8;
    unint64_t v8 = *(unsigned int *)(v3 + 512);
    uint64_t v9 = *(void *)(v3 + 504);
    if (v8)
    {
      uint64_t v9 = v6;
      unint64_t v10 = v8;
      do
      {
        unint64_t v11 = v10 >> 1;
        uint64_t v12 = v9 + 16 * (v10 >> 1);
        unsigned int v13 = *(_DWORD *)(v12 + 8);
        uint64_t v14 = v12 + 16;
        v10 += ~(v10 >> 1);
        if (v13 < v7) {
          uint64_t v9 = v14;
        }
        else {
          unint64_t v10 = v11;
        }
      }
      while (v10);
    }
    if (v9 == v6 + 16 * v8 || *(_DWORD *)(v9 + 8) != v7) {
LABEL_16:
    }
      uint64_t v9 = v6;
    return *(unsigned int *)(v9 + 12);
  }
  else
  {
    uint64_t result = sub_1CB83544C(v3 + 272, (uint64_t)a2);
    if (v5 == 1)
    {
      uint64_t v15 = result;
      return v15;
    }
  }
  return result;
}

unint64_t llvm::ScalarEvolution::getZeroExtendExpr(llvm::ScalarEvolution *this, llvm::detail::IEEEFloat **a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v359 = *MEMORY[0x1E4F143B8];
  while (1)
  {
    unsigned int v8 = *((_DWORD *)a3 + 2);
    if (v8 != 13)
    {
      if ((v8 & 0xFE) == 0x12) {
        unsigned int v8 = *(_DWORD *)(*a3[2] + 8);
      }
      uint64_t v9 = *(void *)(*(void *)this + 40);
      uint64_t v10 = *(void *)(v9 + 504);
      if (v8 < 0x100) {
        goto LABEL_14;
      }
      unsigned int v11 = v8 >> 8;
      unint64_t v12 = *(unsigned int *)(v9 + 512);
      uint64_t v13 = v10;
      if (v12)
      {
        uint64_t v13 = v10;
        unint64_t v14 = v12;
        do
        {
          unint64_t v15 = v14 >> 1;
          uint64_t v16 = v13 + 16 * (v14 >> 1);
          unsigned int v17 = *(_DWORD *)(v16 + 8);
          uint64_t v18 = v16 + 16;
          v14 += ~(v14 >> 1);
          if (v17 < v11) {
            uint64_t v13 = v18;
          }
          else {
            unint64_t v14 = v15;
          }
        }
        while (v14);
      }
      if (v13 == v10 + 16 * v12 || *(_DWORD *)(v13 + 8) != v11) {
LABEL_14:
      }
        uint64_t v13 = v10;
      uint64_t v19 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*a3, (llvm::LLVMContext *)*(unsigned int *)(v13 + 12));
      if ((a3[1] & 0xFE) == 0x12)
      {
        int v20 = (llvm::Type *)*((unsigned int *)a3 + 8);
        if (*((_DWORD *)a3 + 2) == 19) {
          llvm::ScalableVectorType::get(v19, v20);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v19, v20);
        }
      }
      a3 = v19;
    }
    if (a2 && !*((_WORD *)a2 + 12))
    {
      BOOL v21 = sub_1CC56C0C0((llvm *)0x27, a2[4], (llvm::Constant *)a3, 0);
      return llvm::ScalarEvolution::getConstant(this, v21);
    }
    if (!a2 || *((_WORD *)a2 + 12) != 2) {
      break;
    }
    a2 = (llvm::detail::IEEEFloat **)a2[4];
    a4 = (a4 + 1);
  }
  unsigned int v344 = (llvm::SCEV *)a2;
  __s1 = v350;
  *(_DWORD *)unint64_t v350 = 2;
  *(void *)&v350[4] = a2;
  *(void *)&v350[12] = a3;
  uint64_t v349 = 0x2000000005;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v318 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v318 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v318;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  uint64_t v23 = __ROR8__(0xB492B66FBE98F273 * *(void *)v350 - *(void *)&v350[8], 43)
      - 0x3C5A37A36834CED9 * *(void *)&v350[4]
      + __ROR8__((0x9AE16A3B2F90404FLL * *(void *)&v350[12]) ^ qword_1EBCBE580, 30);
  unint64_t v24 = qword_1EBCBE580
      + __ROR8__(*(void *)&v350[8] ^ 0xC949D7C7509E6557, 20)
      - 0x4B6D499041670D8DLL * *(void *)v350
      - 0x9AE16A3B2F90404FLL * *(void *)&v350[12]
      + 20;
  unint64_t v25 = 0x9DDFEA08EB382D69
      * (v24 ^ ((0x9DDFEA08EB382D69 * (v23 ^ v24)) >> 47) ^ (0x9DDFEA08EB382D69 * (v23 ^ v24)));
  uint64_t v26 = *((void *)this + 104)
      + 8 * ((-348639895 * ((v25 >> 47) ^ v25)) & (*((_DWORD *)this + 210) - 1));
  uint64_t v27 = *(void *)v26;
  __src = &v357;
  uint64_t v356 = 0x2000000000;
  if (v27) {
    BOOL v28 = (v27 & 1) == 0;
  }
  else {
    BOOL v28 = 0;
  }
  if (v28)
  {
    while (*(void *)(v27 + 16) != v349
         || memcmp(__s1, *(const void **)(v27 + 8), 4 * v349))
    {
      LODWORD(v356) = 0;
      uint64_t v27 = *(void *)v27;
      if (v27) {
        BOOL v29 = (v27 & 1) == 0;
      }
      else {
        BOOL v29 = 0;
      }
      if (!v29) {
        goto LABEL_40;
      }
    }
    goto LABEL_399;
  }
LABEL_40:
  uint64_t v30 = (char *)this + 832;
  if (dword_1EBCC7BB8 < a4)
  {
    *((void *)this + 118) += 48;
    uint64_t v31 = *((void *)this + 108);
    if (((v31 + 7) & 0xFFFFFFFFFFFFFFF8) - v31 + 48 > *((void *)this + 109) - v31)
    {
      unsigned int v88 = *((_DWORD *)this + 222) >> 7;
      if (v88 >= 0x1E) {
        LOBYTE(v88) = 30;
      }
      uint64_t v89 = 4096 << v88;
      uint64_t v27 = (uint64_t)operator new(4096 << v88, (std::align_val_t)8uLL);
      unsigned int v90 = *((_DWORD *)this + 222);
      if (v90 >= *((_DWORD *)this + 223)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*((void *)this + 110) + 8 * v90) = v27;
      ++*((_DWORD *)this + 222);
      *((void *)this + 109) = v27 + v89;
    }
    else
    {
      uint64_t v27 = (v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 108) = v27 + 48;
    uint64_t v32 = sub_1CB906F34((uint64_t *)this + 108, 4 * v349, 2);
    uint64_t v33 = v32;
    if (v349)
    {
      uint64_t v34 = (int *)__s1;
      uint64_t v35 = 4 * v349;
      unsigned int v36 = (_DWORD *)v32;
      do
      {
        int v37 = *v34++;
        *v36++ = v37;
        v35 -= 4;
      }
      while (v35);
      uint64_t v38 = v349;
    }
    else
    {
      uint64_t v38 = 0;
    }
    BOOL v39 = v344;
    LODWORD(v356) = 16;
    __src = (void *)1;
    uint64_t v40 = *((unsigned __int16 *)v344 + 13);
    DWORD2(v345) = 16;
    *(void *)&long long v345 = v40;
    llvm::APInt::uadd_sat((llvm::APInt *)&__src, (const llvm::APInt *)&v345, (uint64_t)&v351);
    __int16 v41 = (__int16)v351;
    if (v352 > 0x40)
    {
      uint64_t v42 = *(void *)v351;
      MEMORY[0x1D25D9CB0]();
      __int16 v41 = v42;
    }
    *(void *)uint64_t v27 = 0;
    *(void *)(v27 + 8) = v33;
    *(void *)(v27 + 16) = v38;
    *(_WORD *)(v27 + 24) = 2;
    *(_WORD *)(v27 + 26) = v41;
    *(_WORD *)(v27 + 28) = 0;
    *(void *)(v27 + 32) = v39;
    *(void *)(v27 + 40) = a3;
    unsigned int v43 = *((_DWORD *)this + 211) + 1;
    int v44 = *((_DWORD *)this + 210);
    if (v43 > 2 * v44)
    {
      llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v44, (uint64_t)off_1F2607658);
      __src = &v357;
      uint64_t v356 = 0x2000000000;
      uint64_t v26 = *((void *)this + 104)
          + 8
          * ((*((_DWORD *)this + 210) - 1) & sub_1CC13A6B8(*(void **)(v27 + 8), *(void *)(v27 + 8) + 4 * *(void *)(v27 + 16)));
      if (__src != &v357) {
        free(__src);
      }
      unsigned int v43 = *((_DWORD *)this + 211) + 1;
    }
    *((_DWORD *)this + 211) = v43;
    uint64_t v45 = *(void *)v26;
    if (!*(void *)v26) {
      uint64_t v45 = v26 | 1;
    }
    *(void *)uint64_t v27 = v45;
    *(void *)uint64_t v26 = v27;
    goto LABEL_53;
  }
  BOOL v46 = v344;
  int v47 = *((unsigned __int16 *)v344 + 12);
  if (!v344 || v47 != 1)
  {
LABEL_76:
    if (v47 == 7 && *((void *)v46 + 5) == 2)
    {
      uint64_t v59 = (llvm::SCEV **)*((void *)v46 + 4);
      int v60 = *v59;
      unint64_t v61 = (unint64_t)v59[1];
      uint64_t v62 = *v59;
      while (2)
      {
        switch(*((_WORD *)v62 + 12))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            uint64_t v64 = (uint64_t *)((char *)v62 + 40);
            goto LABEL_87;
          case 4:
            uint64_t v64 = (uint64_t *)((char *)v62 + 48);
            goto LABEL_87;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            unsigned int v63 = (llvm::SCEV **)*((void *)v62 + 4);
            goto LABEL_81;
          case 6:
            unsigned int v63 = (llvm::SCEV **)((char *)v62 + 40);
LABEL_81:
            uint64_t v62 = *v63;
            continue;
          case 0xE:
            uint64_t v64 = (uint64_t *)*((void *)v62 - 1);
            goto LABEL_87;
          default:
            uint64_t v64 = (uint64_t *)*((void *)v62 + 4);
LABEL_87:
            uint64_t v65 = *v64;
            unsigned int v66 = *(_DWORD *)(*v64 + 8);
            uint64_t v67 = *(void *)(*(void *)this + 40);
            unint64_t v337 = v60;
            if (v66 == 15)
            {
              if ((v66 & 0xFE) == 0x12) {
                unsigned int v66 = *(_DWORD *)(**(void **)(v65 + 16) + 8);
              }
              uint64_t v230 = *(void *)(v67 + 504);
              if (v66 < 0x100) {
                goto LABEL_313;
              }
              unsigned int v231 = v66 >> 8;
              unint64_t v232 = *(unsigned int *)(v67 + 512);
              uint64_t v233 = *(void *)(v67 + 504);
              if (v232)
              {
                uint64_t v233 = v230;
                unint64_t v234 = v232;
                do
                {
                  unint64_t v235 = v234 >> 1;
                  uint64_t v236 = v233 + 16 * (v234 >> 1);
                  unsigned int v237 = *(_DWORD *)(v236 + 8);
                  uint64_t v238 = v236 + 16;
                  v234 += ~(v234 >> 1);
                  if (v237 < v231) {
                    uint64_t v233 = v238;
                  }
                  else {
                    unint64_t v234 = v235;
                  }
                }
                while (v234);
              }
              if (v233 == v230 + 16 * v232 || *(_DWORD *)(v233 + 8) != v231) {
LABEL_313:
              }
                uint64_t v233 = v230;
              unsigned int v336 = *(_DWORD *)(v233 + 12);
            }
            else
            {
              unsigned int v336 = sub_1CB83544C(v67 + 272, v65);
              if (v68 == 1) {
            }
              }
            unsigned int v69 = (const llvm::Loop *)*((void *)v46 + 6);
            __int16 v70 = *((_WORD *)v46 + 14);
            if ((v70 & 2) == 0)
            {
              int v71 = llvm::ScalarEvolution::proveNoWrapViaConstantRanges(this, v46);
              llvm::ScalarEvolution::setNoWrapFlags((int32x2_t *)this, (uint64_t)v46, v71);
              __int16 v70 = *((_WORD *)v46 + 14);
            }
            if ((v70 & 2) != 0)
            {
              unsigned int v77 = a4 + 1;
              uint64_t v78 = v69;
              uint64_t v79 = sub_1CC0E4EF0((uint64_t)v46, (llvm::Type *)a3, this, v77);
              uint64_t ZeroExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr(this, (const llvm::SCEV *)v61, (llvm::Type *)a3, v77);
              uint64_t v81 = *((_WORD *)v46 + 14) & 7;
              uint64_t v82 = this;
              uint64_t v83 = v79;
              uint64_t v84 = v78;
LABEL_397:
              uint64_t AddRecExpr = llvm::ScalarEvolution::getAddRecExpr(v82, v83, ZeroExtendExpr, v84, v81);
              goto LABEL_398;
            }
            uint64_t v331 = v69;
            BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(this, v69);
            BOOL v73 = BackedgeTakenInfo[13];
            if (!v73) {
              goto LABEL_100;
            }
            unsigned int v74 = *((_DWORD *)BackedgeTakenInfo + 2);
            if (v74)
            {
              unint64_t v75 = (_DWORD *)((char *)*BackedgeTakenInfo + 48);
              uint64_t v76 = 88 * v74;
              while (*(v75 - 1) == *v75)
              {
                v75 += 22;
                v76 -= 88;
                if (!v76) {
                  goto LABEL_101;
                }
              }
LABEL_100:
              BOOL v73 = (const llvm::SCEV *)*((void *)this + 6);
            }
LABEL_101:
            if (*((_WORD *)v73 + 12) != 15)
            {
              int v85 = v337;
              while (2)
              {
                switch(*((_WORD *)v85 + 12))
                {
                  case 1:
                  case 2:
                  case 3:
                  case 0xD:
                    uint64_t v87 = (llvm::Type **)((char *)v85 + 40);
                    goto LABEL_114;
                  case 4:
                    uint64_t v87 = (llvm::Type **)((char *)v85 + 48);
                    goto LABEL_114;
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                  case 0xA:
                  case 0xB:
                  case 0xC:
                    unsigned int v86 = (llvm::SCEV **)*((void *)v85 + 4);
                    goto LABEL_105;
                  case 6:
                    unsigned int v86 = (llvm::SCEV **)((char *)v85 + 40);
LABEL_105:
                    int v85 = *v86;
                    continue;
                  case 0xE:
                    uint64_t v87 = (llvm::Type **)*((void *)v85 - 1);
                    goto LABEL_114;
                  default:
                    uint64_t v87 = (llvm::Type **)*((void *)v85 + 4);
LABEL_114:
                    uint64_t TruncateOrZeroExtend = (const llvm::SCEV *)llvm::ScalarEvolution::getTruncateOrZeroExtend(this, v73, *v87, a4);
                    uint64_t v92 = v73;
                    v332 = (llvm::SCEV *)v61;
                    break;
                }
                break;
              }
              while (2)
              {
                switch(*((_WORD *)v92 + 12))
                {
                  case 1:
                  case 2:
                  case 3:
                  case 0xD:
                    __int16 v94 = (llvm::Type **)((char *)v92 + 40);
                    goto LABEL_122;
                  case 4:
                    __int16 v94 = (llvm::Type **)((char *)v92 + 48);
                    goto LABEL_122;
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                  case 0xA:
                  case 0xB:
                  case 0xC:
                    uint64_t v93 = (const llvm::SCEV **)*((void *)v92 + 4);
                    goto LABEL_117;
                  case 6:
                    uint64_t v93 = (const llvm::SCEV **)((char *)v92 + 40);
LABEL_117:
                    uint64_t v92 = *v93;
                    continue;
                  case 0xE:
                    __int16 v94 = (llvm::Type **)*((void *)v92 - 1);
                    goto LABEL_122;
                  default:
                    __int16 v94 = (llvm::Type **)*((void *)v92 + 4);
LABEL_122:
                    uint64_t v95 = TruncateOrZeroExtend;
                    if (v73 != (const llvm::SCEV *)llvm::ScalarEvolution::getTruncateOrZeroExtend(this, TruncateOrZeroExtend, *v94, a4))goto LABEL_123; {
                    unint64_t v321 = v73;
                    }
                    unint64_t v129 = (llvm::Type *)llvm::IntegerType::get(***(llvm::IntegerType ****)this, (llvm::LLVMContext *)(2 * v336));
                    uint64_t v130 = (a4 + 1);
                    uint64_t v131 = sub_1CBFD7CB4(this, v95, v332, 0, v130);
                    int v132 = (const llvm::SCEV *)sub_1CBFD7D6C(this, v337, v131, 0, v130);
                    uint64_t v328 = llvm::ScalarEvolution::getZeroExtendExpr(this, v132, v129, (int)a4 + 1);
                    uint64_t v325 = (llvm::ConstantInt *)llvm::ScalarEvolution::getZeroExtendExpr(this, v337, v129, (int)a4 + 1);
                    uint64_t v133 = llvm::ScalarEvolution::getZeroExtendExpr(this, v95, v129, (int)a4 + 1);
                    int v134 = v129;
                    uint64_t v135 = v133;
                    uint64_t v323 = (uint64_t **)v134;
                    uint64_t v136 = llvm::ScalarEvolution::getZeroExtendExpr(this, v332, v134, (int)a4 + 1);
                    uint64_t v137 = sub_1CBFD7CB4(this, v135, v136, 0, v130);
                    if (v328 == sub_1CBFD7D6C(this, v325, v137, 0, v130))
                    {
                      llvm::ScalarEvolution::setNoWrapFlags((int32x2_t *)this, (uint64_t)v46, 2);
                      uint64_t v140 = sub_1CC0E4EF0((uint64_t)v46, (llvm::Type *)a3, this, (int)a4 + 1);
                      unint64_t v141 = llvm::ScalarEvolution::getZeroExtendExpr(this, v332, (llvm::Type *)a3, v130);
                      goto LABEL_198;
                    }
                    unint64_t SignExtendExpr = llvm::ScalarEvolution::getSignExtendExpr(this, (llvm::detail::IEEEFloat **)v332, v323, (a4 + 1));
                    uint64_t v139 = sub_1CBFD7CB4(this, v135, SignExtendExpr, 0, (a4 + 1));
                    BOOL v73 = v321;
                    if (v328 == sub_1CBFD7D6C(this, v325, v139, 0, (a4 + 1)))
                    {
                      llvm::ScalarEvolution::setNoWrapFlags((int32x2_t *)this, (uint64_t)v46, 1);
                      uint64_t v140 = sub_1CC0E4EF0((uint64_t)v46, (llvm::Type *)a3, this, (int)a4 + 1);
                      unint64_t v141 = llvm::ScalarEvolution::getSignExtendExpr(this, (llvm::detail::IEEEFloat **)v332, a3, v130);
LABEL_198:
                      uint64_t ZeroExtendExpr = v141;
                      uint64_t v81 = *((_WORD *)v46 + 14) & 7;
                      uint64_t v82 = this;
                      uint64_t v83 = v140;
                      goto LABEL_396;
                    }
LABEL_123:
                    unint64_t v61 = (unint64_t)v332;
                    uint64_t v30 = (char *)this + 832;
                    if (*((_WORD *)v73 + 12) != 15) {
                      goto LABEL_128;
                    }
                    break;
                }
                break;
              }
            }
            if (!*((unsigned char *)this + 8))
            {
              uint64_t v96 = *((void *)this + 3);
              if (!*(unsigned char *)(v96 + 184)) {
                llvm::AssumptionCache::scanFunction(*((llvm::AssumptionCache **)this + 3));
              }
              if (!*(_DWORD *)(v96 + 24)) {
                goto LABEL_153;
              }
            }
LABEL_128:
            int v97 = llvm::ScalarEvolution::proveNoUnsignedWrapViaInduction(this, v46);
            llvm::ScalarEvolution::setNoWrapFlags((int32x2_t *)this, (uint64_t)v46, v97);
            if ((*((_WORD *)v46 + 14) & 2) != 0) {
              goto LABEL_394;
            }
            if (llvm::ScalarEvolution::isKnownNegative(this, (const llvm::SCEV *)v61))
            {
              LODWORD(v352) = v336;
              if (v336 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v351);
              }
              if (v336) {
                int v98 = (llvm::SCEV *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v336);
              }
              else {
                int v98 = 0;
              }
              unint64_t v351 = v98;
              uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef((uint64_t)this, v61, 1, 0);
              llvm::ConstantRange::getSignedMin(RangeRef, (uint64_t)&v345);
              if (DWORD2(v345) > 0x40)
              {
                llvm::APInt::flipAllBitsSlowCase((uint64_t)&v345);
              }
              else
              {
                if (DWORD2(v345)) {
                  unint64_t v100 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v345);
                }
                else {
                  unint64_t v100 = 0;
                }
                *(void *)&long long v345 = v100 & ~(void)v345;
              }
              uint64_t v333 = (llvm::detail::IEEEFloat **)v61;
              llvm::APInt::operator++((uint64_t)&v345);
              int v102 = DWORD2(v345);
              if (DWORD2(v345) >= 0x41)
              {
                uint64_t v310 = 0;
                BOOL v311 = 0;
                uint64_t v312 = v345;
                uint64_t v103 = v351;
                unint64_t v313 = ((unint64_t)DWORD2(v345) + 63) >> 6;
                do
                {
                  unint64_t v314 = *(void *)(v312 + v310);
                  unint64_t v315 = *(void *)((char *)v103 + v310) + v314;
                  BOOL v316 = v315 < v314;
                  BOOL v317 = v315 + 1 <= v314;
                  if (v311)
                  {
                    ++v315;
                    BOOL v311 = v317;
                  }
                  else
                  {
                    BOOL v311 = v316;
                  }
                  *(void *)(v312 + v310) = v315;
                  v310 += 8;
                }
                while (8 * v313 != v310);
                *(void *)(v345 + 8 * (v313 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v102;
                int v102 = DWORD2(v345);
                uint64_t v105 = (void *)v345;
              }
              else
              {
                uint64_t v103 = v351;
                if (DWORD2(v345)) {
                  unint64_t v104 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v345);
                }
                else {
                  unint64_t v104 = 0;
                }
                uint64_t v105 = (void *)(v104 & ((unint64_t)v351 + v345));
                *(void *)&long long v345 = v105;
              }
              LODWORD(v356) = v102;
              __src = v105;
              DWORD2(v345) = 0;
              char v106 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&__src, v101);
              unint64_t Constant = llvm::ScalarEvolution::getConstant(this, v106);
              if (v356 >= 0x41 && __src) {
                MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
              }
              if (DWORD2(v345) >= 0x41 && (void)v345) {
                MEMORY[0x1D25D9CB0](v345, 0x1000C8000313F17);
              }
              if (v352 >= 0x41 && v103) {
                MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
              }
              unint64_t v61 = (unint64_t)v333;
              if ((llvm::ScalarEvolution::isLoopBackedgeGuardedByCond((uint64_t)this, (uint64_t)v331, 34, (uint64_t)v46, Constant) & 1) != 0|| llvm::ScalarEvolution::isKnownOnEveryIteration(this, 34, (uint64_t)v46, Constant))
              {
                llvm::ScalarEvolution::setNoWrapFlags((int32x2_t *)this, (uint64_t)v46, 1);
                uint64_t v108 = (a4 + 1);
                uint64_t v109 = sub_1CC0E4EF0((uint64_t)v46, (llvm::Type *)a3, this, v108);
                unint64_t v110 = llvm::ScalarEvolution::getSignExtendExpr(this, v333, a3, v108);
                goto LABEL_395;
              }
            }
LABEL_153:
            unsigned int v111 = v337;
            int v112 = *((unsigned __int16 *)v337 + 12);
            if (*((_WORD *)v337 + 12) || !v337) {
              goto LABEL_211;
            }
            uint64_t v113 = *((void *)v337 + 4);
            sub_1CC0E851C((llvm::APInt *)&__src, this, v113 + 24, (llvm::SCEV *)v61);
            unsigned int v115 = v356;
            unint64_t v116 = __src;
            unint64_t v334 = (llvm::SCEV *)v61;
            if (v356 < 0x41) {
              goto LABEL_163;
            }
            int v117 = 0;
            int64_t v118 = ((unint64_t)v356 + 63) >> 6;
            do
            {
              BOOL v119 = v118-- < 1;
              if (v119) {
                break;
              }
              unint64_t v120 = *((void *)__src + v118);
              v117 += __clz(v120);
            }
            while (!v120);
            int v121 = v356 | 0xFFFFFFC0;
            if ((v356 & 0x3F) == 0) {
              int v121 = 0;
            }
            if ((v356 - v117 - v121) > 0x40) {
              goto LABEL_164;
            }
            unint64_t v116 = *(void **)__src;
LABEL_163:
            if (v116)
            {
LABEL_164:
              char v122 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&__src, v114);
              unint64_t v123 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(this, v122);
              uint64_t v125 = llvm::ScalarEvolution::getZeroExtendExpr(this, v123, (llvm::Type *)a3, a4);
              unsigned int v126 = *(_DWORD *)(v113 + 32);
              if (v126 >= 0x41) {
                operator new[]();
              }
              unint64_t v127 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v126;
              if (!v126) {
                unint64_t v127 = 0;
              }
              unint64_t v128 = (llvm::SCEV *)(v127 & (*(void *)(v113 + 24) - (void)__src));
              LODWORD(v352) = v126;
              unint64_t v351 = v128;
              uint64_t v160 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&v351, v124);
              unint64_t v161 = llvm::ScalarEvolution::getConstant(this, v160);
              uint64_t v162 = (const llvm::SCEV *)llvm::ScalarEvolution::getAddRecExpr(this, v161, (uint64_t)v334, v331, *((_WORD *)v46 + 14) & 7);
              if (v352 >= 0x41 && v351) {
                MEMORY[0x1D25D9CB0](v351, 0x1000C8000313F17);
              }
              uint64_t v163 = llvm::ScalarEvolution::getZeroExtendExpr(this, v162, (llvm::Type *)a3, (int)a4 + 1);
              uint64_t v27 = sub_1CBFD7D6C(this, v125, v163, 6, (a4 + 1));
              char v164 = 1;
              unsigned int v115 = v356;
            }
            else
            {
              char v164 = 0;
            }
            if (v115 >= 0x41 && __src) {
              MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
            }
            unint64_t v61 = (unint64_t)v334;
            if (v164) {
              goto LABEL_399;
            }
            unsigned int v111 = v337;
            int v112 = *((unsigned __int16 *)v337 + 12);
LABEL_211:
            if (v111 && !v112)
            {
              uint64_t v252 = *((void *)v111 + 4);
              unsigned int v253 = *(_DWORD *)(v252 + 32);
              unsigned int v324 = v253;
              if (v253 > 0x40) {
                operator new[]();
              }
              int v322 = *(void **)(v252 + 24);
              uint64_t v254 = 0;
              long long v345 = xmmword_1CFAC4410;
              unint64_t v320 = HIDWORD(v61);
              uint64_t v330 = v30;
              uint64_t v335 = (llvm::SCEV *)v61;
              while (1)
              {
                unint64_t v255 = *((unsigned int *)&v345 + v254);
                unsigned int v341 = v253;
                uint64_t v329 = v254;
                if (v253 > 0x40) {
                  operator new[]();
                }
                uint64_t v340 = v322;
                unint64_t v319 = v255;
                llvm::APInt::operator-=((uint64_t)&v340, v255);
                LODWORD(v356) = v341;
                __src = v340;
                unsigned int v341 = 0;
                uint64_t v257 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&__src, v256);
                unint64_t v258 = llvm::ScalarEvolution::getConstant(this, v257);
                if (v356 >= 0x41 && __src) {
                  MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                }
                if (v341 >= 0x41 && v340) {
                  MEMORY[0x1D25D9CB0](v340, 0x1000C8000313F17);
                }
                unint64_t v351 = (llvm::SCEV *)v353;
                *(_DWORD *)unsigned int v353 = 7;
                *(void *)&v353[4] = v258;
                *(_DWORD *)&v353[12] = v61;
                *(_DWORD *)&v353[16] = v320;
                uint64_t v354 = v331;
                uint64_t v352 = 0x2000000007;
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_1EBCBE588))
                {
                  unint64_t v286 = llvm::hashing::detail::fixed_seed_override;
                  if (!llvm::hashing::detail::fixed_seed_override) {
                    unint64_t v286 = 0xFF51AFD7ED558CCDLL;
                  }
                  qword_1EBCBE580 = v286;
                  __cxa_guard_release(&qword_1EBCBE588);
                }
                uint64_t v259 = __ROR8__(0xB492B66FBE98F273 * *(void *)v353 - *(void *)&v353[8], 43)
                     - 0x3C5A37A36834CED9 * *(void *)&v353[12]
                     + __ROR8__((0x9AE16A3B2F90404FLL * (void)v354) ^ qword_1EBCBE580, 30);
                unint64_t v260 = qword_1EBCBE580
                     + __ROR8__(*(void *)&v353[8] ^ 0xC949D7C7509E6557, 20)
                     - 0x4B6D499041670D8DLL * *(void *)v353
                     - 0x9AE16A3B2F90404FLL * (void)v354
                     + 28;
                unint64_t v261 = 0x9DDFEA08EB382D69
                     * (v260 ^ ((0x9DDFEA08EB382D69 * (v259 ^ v260)) >> 47) ^ (0x9DDFEA08EB382D69 * (v259 ^ v260)));
                uint64_t v262 = *(void *)(*((void *)this + 104)
                                 + 8
                                 * ((-348639895 * ((v261 >> 47) ^ v261)) & (*((_DWORD *)this + 210) - 1)));
                __src = &v357;
                uint64_t v356 = 0x2000000000;
                if (v262 && (v262 & 1) == 0)
                {
                  uint64_t v264 = v352;
                  uint64_t v326 = v351;
                  size_t v265 = 4 * v352;
                  while (*(void *)(v262 + 16) != v264 || memcmp(v326, *(const void **)(v262 + 8), v265))
                  {
                    LODWORD(v356) = 0;
                    uint64_t v262 = *(void *)v262;
                    if (v262) {
                      BOOL v267 = (v262 & 1) == 0;
                    }
                    else {
                      BOOL v267 = 0;
                    }
                    if (!v267) {
                      goto LABEL_347;
                    }
                  }
                  unint64_t v61 = (unint64_t)v335;
                  if ((*(_WORD *)(v262 + 28) & 2) != 0) {
                    break;
                  }
                }
LABEL_349:
                uint64_t v30 = v330;
                if (v351 != (llvm::SCEV *)v353) {
                  free(v351);
                }
                uint64_t v254 = v329 + 1;
                unsigned int v253 = v324;
                if (v329 == 3)
                {
                  char v288 = 0;
                  goto LABEL_391;
                }
              }
              uint64_t v268 = (uint64_t **)**((void **)v337 + 4);
              unsigned int v269 = *((_DWORD *)v268 + 2);
              if (v269 != 13)
              {
                if ((v269 & 0xFE) == 0x12) {
                  unsigned int v269 = *(_DWORD *)(*v268[2] + 8);
                }
                uint64_t v270 = *(void *)(*(void *)this + 40);
                uint64_t v271 = *(void *)(v270 + 504);
                if (v269 < 0x100) {
                  goto LABEL_365;
                }
                unsigned int v272 = v269 >> 8;
                unint64_t v273 = *(unsigned int *)(v270 + 512);
                uint64_t v274 = v271;
                if (v273)
                {
                  uint64_t v274 = v271;
                  unint64_t v275 = v273;
                  do
                  {
                    unint64_t v276 = v275 >> 1;
                    uint64_t v277 = v274 + 16 * (v275 >> 1);
                    unsigned int v278 = *(_DWORD *)(v277 + 8);
                    uint64_t v279 = v277 + 16;
                    v275 += ~(v275 >> 1);
                    if (v278 < v272) {
                      uint64_t v274 = v279;
                    }
                    else {
                      unint64_t v275 = v276;
                    }
                  }
                  while (v275);
                }
                if (v274 == v271 + 16 * v273 || *(_DWORD *)(v274 + 8) != v272) {
LABEL_365:
                }
                  uint64_t v274 = v271;
                uint64_t v280 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v268, (llvm::LLVMContext *)*(unsigned int *)(v274 + 12));
                if ((v268[1] & 0xFE) == 0x12)
                {
                  v287 = (llvm::Type *)*((unsigned int *)v268 + 8);
                  if (*((_DWORD *)v268 + 2) == 19) {
                    llvm::ScalableVectorType::get(v280, v287);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v280, v287);
                  }
                }
                uint64_t v268 = v280;
              }
              uint64_t v327 = (llvm::ConstantInt *)*v268;
              unsigned int v281 = *((_DWORD *)v268 + 2);
              LODWORD(v356) = v281 >> 8;
              if (v281 >> 8 > 0x40) {
                operator new[]();
              }
              if (v281 <= 0xFF) {
                unint64_t v282 = 0;
              }
              else {
                unint64_t v282 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v281) + 63);
              }
              __src = (void *)(v282 & v319);
              uint64_t v283 = (llvm::ConstantInt *)llvm::ConstantInt::get(v327, (llvm::LLVMContext *)&__src, v266);
              if (v356 >= 0x41 && __src) {
                MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
              }
              unint64_t v284 = llvm::ScalarEvolution::getConstant(this, v283);
              LODWORD(__src) = 42;
              uint64_t v285 = (const llvm::SCEV *)sub_1CC13AA88(v284, &__src, (llvm::ConstantInt ****)this);
              if (!v285
                || (llvm::ScalarEvolution::isKnownPredicate(this, __src, (const llvm::SCEV *)v262, v285) & 1) == 0)
              {
LABEL_347:
                unint64_t v61 = (unint64_t)v335;
                goto LABEL_349;
              }
              if (v351 != (llvm::SCEV *)v353) {
                free(v351);
              }
              char v288 = 1;
              uint64_t v30 = v330;
              unint64_t v61 = (unint64_t)v335;
              unsigned int v253 = v324;
LABEL_391:
              if (v253 >= 0x41 && v322) {
                MEMORY[0x1D25D9CB0](v322, 0x1000C8000313F17);
              }
              if (v288)
              {
                llvm::ScalarEvolution::setNoWrapFlags((int32x2_t *)this, (uint64_t)v46, 2);
LABEL_394:
                unsigned int v289 = a4 + 1;
                uint64_t v109 = sub_1CC0E4EF0((uint64_t)v46, (llvm::Type *)a3, this, v289);
                unint64_t v110 = llvm::ScalarEvolution::getZeroExtendExpr(this, (const llvm::SCEV *)v61, (llvm::Type *)a3, v289);
LABEL_395:
                uint64_t ZeroExtendExpr = v110;
                uint64_t v81 = *((_WORD *)v46 + 14) & 7;
                uint64_t v82 = this;
                uint64_t v83 = v109;
LABEL_396:
                uint64_t v84 = v331;
                goto LABEL_397;
              }
            }
            BOOL v46 = v344;
            break;
        }
        break;
      }
    }
    __src = 0;
    unint64_t v351 = 0;
    if (llvm::ScalarEvolution::matchURem(this, v46, (const llvm::SCEV **)&__src, &v351))
    {
      unsigned int v165 = a4 + 1;
      uint64_t v166 = (const llvm::SCEV *)llvm::ScalarEvolution::getZeroExtendExpr(this, (const llvm::SCEV *)__src, (llvm::Type *)a3, v165);
      unint64_t v167 = (const llvm::SCEV *)llvm::ScalarEvolution::getZeroExtendExpr(this, v351, (llvm::Type *)a3, v165);
      uint64_t AddRecExpr = llvm::ScalarEvolution::getURemExpr(this, v166, v167);
LABEL_398:
      uint64_t v27 = AddRecExpr;
      goto LABEL_399;
    }
    unint64_t v169 = v344;
    int v170 = *((unsigned __int16 *)v344 + 12);
    if (v344 && v170 == 6)
    {
      unsigned int v171 = a4 + 1;
      unsigned int v172 = (const llvm::SCEV *)llvm::ScalarEvolution::getZeroExtendExpr(this, *((const llvm::SCEV **)v344 + 4), (llvm::Type *)a3, v171);
      unint64_t v173 = llvm::ScalarEvolution::getZeroExtendExpr(this, *((const llvm::SCEV **)v169 + 5), (llvm::Type *)a3, v171);
      uint64_t AddRecExpr = llvm::ScalarEvolution::getUDivExpr(this, v172, v173);
      goto LABEL_398;
    }
    if (!v344 || v170 != 4) {
      goto LABEL_258;
    }
    if ((*((_WORD *)v344 + 14) & 2) != 0)
    {
      __src = &v357;
      uint64_t v356 = 0x400000000;
      uint64_t v185 = *((void *)v344 + 5);
      uint64_t v186 = (a4 + 1);
      if (v185)
      {
        unsigned int v187 = (const llvm::SCEV **)*((void *)v344 + 4);
        uint64_t v188 = 8 * v185;
        do
        {
          uint64_t v189 = llvm::ScalarEvolution::getZeroExtendExpr(this, *v187, (llvm::Type *)a3, v186);
          if (v356 >= (unint64_t)HIDWORD(v356)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)__src + v356) = v189;
          LODWORD(v356) = v356 + 1;
          ++v187;
          v188 -= 8;
        }
        while (v188);
      }
      uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(this, &__src, 2, v186);
      goto LABEL_296;
    }
    uint64_t v174 = **((void **)v344 + 4);
    if (!v174 || *(_WORD *)(v174 + 24)) {
      goto LABEL_265;
    }
    sub_1CC0EAEEC((llvm::APInt *)&__src, this, *(void *)(v174 + 32), (uint64_t)v344);
    unsigned int v176 = v356;
    uint64_t v177 = __src;
    if (v356 >= 0x41)
    {
      int v178 = 0;
      int64_t v179 = ((unint64_t)v356 + 63) >> 6;
      do
      {
        BOOL v119 = v179-- < 1;
        if (v119) {
          break;
        }
        unint64_t v180 = *((void *)__src + v179);
        v178 += __clz(v180);
      }
      while (!v180);
      int v181 = v356 | 0xFFFFFFC0;
      if ((v356 & 0x3F) == 0) {
        int v181 = 0;
      }
      if ((v356 - v178 - v181) > 0x40) {
        goto LABEL_233;
      }
      uint64_t v177 = *(void **)__src;
    }
    if (!v177)
    {
      char v197 = 0;
LABEL_253:
      if (v176 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      if (v197) {
        goto LABEL_399;
      }
      unint64_t v169 = v344;
      int v170 = *((unsigned __int16 *)v344 + 12);
LABEL_258:
      if (v170 != 5) {
        goto LABEL_265;
      }
      if ((*((_WORD *)v169 + 14) & 2) == 0)
      {
        if (*((void *)v169 + 5) == 2)
        {
          uint64_t v198 = (const llvm::SCEV **)*((void *)v169 + 4);
          uint64_t v199 = *v198;
          if (*v198 && *((_WORD *)*v198 + 12) == 0)
          {
            int v227 = (int8x8_t *)*((void *)v199 + 4);
            uint64_t v228 = v227[4].u32[0];
            if (v228 > 0x40)
            {
              int v239 = 0;
              unint64_t v240 = (unint64_t)(v228 + 63) >> 6;
              uint64_t v241 = (int8x8_t *)v227[3];
              do
              {
                int8x8_t v242 = *v241++;
                uint8x8_t v243 = (uint8x8_t)vcnt_s8(v242);
                v243.i16[0] = vaddlv_u8(v243);
                v239 += v243.i32[0];
                --v240;
              }
              while (v240);
              if (v239 != 1) {
                goto LABEL_265;
              }
            }
            else
            {
              uint8x8_t v229 = (uint8x8_t)vcnt_s8(v227[3]);
              v229.i16[0] = vaddlv_u8(v229);
              if (v229.u32[0] != 1) {
                goto LABEL_265;
              }
            }
            uint64_t v244 = v198[1];
            if (v244) {
              BOOL v245 = *((unsigned __int16 *)v244 + 12) == 1;
            }
            else {
              BOOL v245 = 0;
            }
            if (v245)
            {
              uint64_t v246 = *((void *)v244 + 5);
              unsigned int v247 = *(_DWORD *)(v246 + 8);
              uint64_t v248 = *(void *)(*(void *)this + 40);
              if (v247 == 15)
              {
                if ((v247 & 0xFE) == 0x12) {
                  unsigned int v247 = *(_DWORD *)(**(void **)(v246 + 16) + 8);
                }
                uint64_t v301 = *(void *)(v248 + 504);
                if (v247 < 0x100) {
                  goto LABEL_448;
                }
                unsigned int v302 = v247 >> 8;
                unint64_t v303 = *(unsigned int *)(v248 + 512);
                uint64_t v304 = *(void *)(v248 + 504);
                if (v303)
                {
                  uint64_t v304 = v301;
                  unint64_t v305 = v303;
                  do
                  {
                    unint64_t v306 = v305 >> 1;
                    uint64_t v307 = v304 + 16 * (v305 >> 1);
                    unsigned int v308 = *(_DWORD *)(v307 + 8);
                    uint64_t v309 = v307 + 16;
                    v305 += ~(v305 >> 1);
                    if (v308 < v302) {
                      uint64_t v304 = v309;
                    }
                    else {
                      unint64_t v305 = v306;
                    }
                  }
                  while (v305);
                }
                if (v304 == v301 + 16 * v303 || *(_DWORD *)(v304 + 8) != v302) {
LABEL_448:
                }
                  uint64_t v304 = v301;
                int v250 = *(_DWORD *)(v304 + 12);
              }
              else
              {
                int v250 = sub_1CB83544C(v248 + 272, v246);
                if (v249 == 1) {
                int v227 = (int8x8_t *)*((void *)v199 + 4);
                }
                LODWORD(v228) = v227[4].i32[0];
              }
              if (v228 > 0x40)
              {
                int v290 = 0;
                int64_t v291 = ((unint64_t)v228 + 63) >> 6;
                do
                {
                  BOOL v119 = v291-- < 1;
                  if (v119) {
                    break;
                  }
                  unint64_t v292 = *(void *)(*(void *)&v227[3] + 8 * v291);
                  v290 += __clz(v292);
                }
                while (!v292);
                int v293 = v228 | 0xFFFFFFC0;
                if ((v228 & 0x3F) == 0) {
                  int v293 = 0;
                }
                int v251 = v290 + v293;
              }
              else
              {
                int v251 = v228 + __clz(*(void *)&v227[3]) - 64;
              }
              uint64_t v294 = (llvm::Type *)llvm::IntegerType::get(***(llvm::IntegerType ****)this, (llvm::LLVMContext *)(v250 - v228 + v251 + 1));
              uint64_t v295 = llvm::ScalarEvolution::getZeroExtendExpr(this, v199, (llvm::Type *)a3, 0);
              uint64_t TruncateExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getTruncateExpr(this, *((const llvm::SCEV **)v244 + 4), v294, 0);
              uint64_t v297 = llvm::ScalarEvolution::getZeroExtendExpr(this, TruncateExpr, (llvm::Type *)a3, 0);
              uint64_t AddRecExpr = sub_1CBFD7CB4(this, v295, v297, 2, (a4 + 1));
              goto LABEL_398;
            }
          }
        }
LABEL_265:
        uint64_t v201 = *((void *)this + 104)
             + 8
             * ((*((_DWORD *)this + 210) - 1) & sub_1CC13A6B8(__s1, (uint64_t)__s1 + 4 * v349));
        uint64_t v27 = *(void *)v201;
        __src = &v357;
        uint64_t v356 = 0x2000000000;
        if (v27) {
          BOOL v202 = (v27 & 1) == 0;
        }
        else {
          BOOL v202 = 0;
        }
        if (v202)
        {
          uint64_t v203 = v349;
          unint64_t v204 = __s1;
          size_t v205 = 4 * v349;
          while (*(void *)(v27 + 16) != v203 || memcmp(v204, *(const void **)(v27 + 8), v205))
          {
            LODWORD(v356) = 0;
            uint64_t v27 = *(void *)v27;
            if (v27) {
              BOOL v206 = (v27 & 1) == 0;
            }
            else {
              BOOL v206 = 0;
            }
            if (!v206) {
              goto LABEL_277;
            }
          }
        }
        else
        {
LABEL_277:
          *((void *)this + 118) += 48;
          uint64_t v207 = *((void *)this + 108);
          if (((v207 + 7) & 0xFFFFFFFFFFFFFFF8) - v207 + 48 > *((void *)this + 109) - v207)
          {
            unsigned int v298 = *((_DWORD *)this + 222) >> 7;
            if (v298 >= 0x1E) {
              LOBYTE(v298) = 30;
            }
            uint64_t v299 = 4096 << v298;
            uint64_t v27 = (uint64_t)operator new(4096 << v298, (std::align_val_t)8uLL);
            unsigned int v300 = *((_DWORD *)this + 222);
            if (v300 >= *((_DWORD *)this + 223)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*((void *)this + 110) + 8 * v300) = v27;
            ++*((_DWORD *)this + 222);
            *((void *)this + 109) = v27 + v299;
          }
          else
          {
            uint64_t v27 = (v207 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *((void *)this + 108) = v27 + 48;
          uint64_t v208 = sub_1CB906F34((uint64_t *)this + 108, 4 * v349, 2);
          uint64_t v209 = v208;
          if (v349)
          {
            uint64_t v210 = (int *)__s1;
            uint64_t v211 = 4 * v349;
            unint64_t v212 = (_DWORD *)v208;
            do
            {
              int v213 = *v210++;
              *v212++ = v213;
              v211 -= 4;
            }
            while (v211);
            uint64_t v214 = v349;
          }
          else
          {
            uint64_t v214 = 0;
          }
          BOOL v215 = v344;
          LODWORD(v356) = 16;
          __src = (void *)1;
          uint64_t v216 = *((unsigned __int16 *)v344 + 13);
          DWORD2(v345) = 16;
          *(void *)&long long v345 = v216;
          llvm::APInt::uadd_sat((llvm::APInt *)&__src, (const llvm::APInt *)&v345, (uint64_t)&v351);
          __int16 v217 = (__int16)v351;
          if (v352 > 0x40)
          {
            uint64_t v218 = *(void *)v351;
            MEMORY[0x1D25D9CB0]();
            __int16 v217 = v218;
          }
          *(void *)uint64_t v27 = 0;
          *(void *)(v27 + 8) = v209;
          *(void *)(v27 + 16) = v214;
          *(_WORD *)(v27 + 24) = 2;
          *(_WORD *)(v27 + 26) = v217;
          *(_WORD *)(v27 + 28) = 0;
          *(void *)(v27 + 32) = v215;
          *(void *)(v27 + 40) = a3;
          unsigned int v219 = *((_DWORD *)this + 211) + 1;
          int v220 = *((_DWORD *)this + 210);
          if (v219 > 2 * v220)
          {
            llvm::FoldingSetBase::GrowBucketCount((uint64_t)v30, 2 * v220, (uint64_t)off_1F2607658);
            __src = &v357;
            uint64_t v356 = 0x2000000000;
            uint64_t v201 = *((void *)this + 104)
                 + 8
                 * ((*((_DWORD *)this + 210) - 1) & sub_1CC13A6B8(*(void **)(v27 + 8), *(void *)(v27 + 8) + 4 * *(void *)(v27 + 16)));
            if (__src != &v357) {
              free(__src);
            }
            unsigned int v219 = *((_DWORD *)this + 211) + 1;
          }
          *((_DWORD *)this + 211) = v219;
          uint64_t v221 = *(void *)v201;
          if (!*(void *)v201) {
            uint64_t v221 = v201 | 1;
          }
          *(void *)uint64_t v27 = v221;
          *(void *)uint64_t v201 = v27;
LABEL_53:
          llvm::ScalarEvolution::registerUser((uint64_t)this, v27, (uint64_t *)&v344, 1);
        }
        goto LABEL_399;
      }
      __src = &v357;
      uint64_t v356 = 0x400000000;
      uint64_t v222 = *((void *)v169 + 5);
      uint64_t v223 = (a4 + 1);
      if (v222)
      {
        int v224 = (const llvm::SCEV **)*((void *)v169 + 4);
        uint64_t v225 = 8 * v222;
        do
        {
          uint64_t v226 = llvm::ScalarEvolution::getZeroExtendExpr(this, *v224, (llvm::Type *)a3, v223);
          if (v356 >= (unint64_t)HIDWORD(v356)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)__src + v356) = v226;
          LODWORD(v356) = v356 + 1;
          ++v224;
          v225 -= 8;
        }
        while (v225);
      }
      uint64_t AddExpr = llvm::ScalarEvolution::getMulExpr(this, &__src, 2, v223);
LABEL_296:
      uint64_t v27 = AddExpr;
      if (__src != &v357) {
        free(__src);
      }
      goto LABEL_399;
    }
LABEL_233:
    unint64_t v182 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&__src, v175);
    uint64_t v183 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(this, v182);
    uint64_t v184 = llvm::ScalarEvolution::getZeroExtendExpr(this, v183, (llvm::Type *)a3, a4);
    unsigned int v339 = v356;
    if (v356 > 0x40) {
      operator new[]();
    }
    unint64_t v191 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v356;
    if (!v356) {
      unint64_t v191 = 0;
    }
    int v338 = (llvm::SCEV *)(v191 & ~(unint64_t)__src);
    llvm::APInt::operator++((uint64_t)&v338);
    LODWORD(v352) = v339;
    unint64_t v351 = v338;
    unsigned int v339 = 0;
    uint64_t v193 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&v351, v192);
    unint64_t v194 = llvm::ScalarEvolution::getConstant(this, v193);
    uint64_t v195 = (const llvm::SCEV *)sub_1CBFD7D6C(this, v194, v169, 0, a4);
    if (v352 >= 0x41 && v351) {
      MEMORY[0x1D25D9CB0](v351, 0x1000C8000313F17);
    }
    if (v339 >= 0x41 && v338) {
      MEMORY[0x1D25D9CB0](v338, 0x1000C8000313F17);
    }
    uint64_t v196 = llvm::ScalarEvolution::getZeroExtendExpr(this, v195, (llvm::Type *)a3, (int)a4 + 1);
    uint64_t v27 = sub_1CBFD7D6C(this, v184, v196, 6, (a4 + 1));
    char v197 = 1;
    unsigned int v176 = v356;
    goto LABEL_253;
  }
  unsigned int v48 = (const llvm::SCEV *)*((void *)v344 + 4);
  uint64_t v49 = llvm::ScalarEvolution::getRangeRef((uint64_t)this, (uint64_t)v48, 0, 0);
  LODWORD(v356) = *(_DWORD *)(v49 + 8);
  if (v356 > 0x40) {
    operator new[]();
  }
  __src = *(void **)v49;
  unsigned int v358 = *(_DWORD *)(v49 + 24);
  if (v358 > 0x40) {
    operator new[]();
  }
  uint64_t v357 = *(void *)(v49 + 16);
  uint64_t v50 = *((void *)v344 + 5);
  unsigned int v51 = *(_DWORD *)(v50 + 8);
  uint64_t v52 = *(void *)(*(void *)this + 40);
  if (v51 == 15)
  {
    if ((v51 & 0xFE) == 0x12) {
      unsigned int v51 = *(_DWORD *)(**(void **)(v50 + 16) + 8);
    }
    uint64_t v142 = *(void *)(v52 + 504);
    if (v51 < 0x100) {
      goto LABEL_182;
    }
    unsigned int v143 = v51 >> 8;
    unint64_t v144 = *(unsigned int *)(v52 + 512);
    uint64_t v145 = *(void *)(v52 + 504);
    if (v144)
    {
      uint64_t v145 = v142;
      unint64_t v146 = v144;
      do
      {
        unint64_t v147 = v146 >> 1;
        uint64_t v148 = v145 + 16 * (v146 >> 1);
        unsigned int v149 = *(_DWORD *)(v148 + 8);
        uint64_t v150 = v148 + 16;
        v146 += ~(v146 >> 1);
        if (v149 < v143) {
          uint64_t v145 = v150;
        }
        else {
          unint64_t v146 = v147;
        }
      }
      while (v146);
    }
    if (v145 == v142 + 16 * v144 || *(_DWORD *)(v145 + 8) != v143) {
LABEL_182:
    }
      uint64_t v145 = v142;
    uint64_t v27 = *(unsigned int *)(v145 + 12);
  }
  else
  {
    uint64_t v27 = sub_1CB83544C(v52 + 272, v50);
    if (v53 == 1) {
  }
    }
  unsigned int v54 = *((_DWORD *)a3 + 2);
  uint64_t v55 = *(void *)(*(void *)this + 40);
  if (v54 == 15)
  {
    if ((v54 & 0xFE) == 0x12) {
      unsigned int v54 = *(_DWORD *)(*a3[2] + 8);
    }
    uint64_t v151 = *(void *)(v55 + 504);
    if (v54 < 0x100) {
      goto LABEL_195;
    }
    unsigned int v152 = v54 >> 8;
    unint64_t v153 = *(unsigned int *)(v55 + 512);
    uint64_t v154 = *(void *)(v55 + 504);
    if (v153)
    {
      uint64_t v154 = v151;
      unint64_t v155 = v153;
      do
      {
        unint64_t v156 = v155 >> 1;
        uint64_t v157 = v154 + 16 * (v155 >> 1);
        unsigned int v158 = *(_DWORD *)(v157 + 8);
        uint64_t v159 = v157 + 16;
        v155 += ~(v155 >> 1);
        if (v158 < v152) {
          uint64_t v154 = v159;
        }
        else {
          unint64_t v155 = v156;
        }
      }
      while (v155);
    }
    if (v154 == v151 + 16 * v153 || *(_DWORD *)(v154 + 8) != v152) {
LABEL_195:
    }
      uint64_t v154 = v151;
    unsigned int v57 = *(_DWORD *)(v154 + 12);
  }
  else
  {
    unsigned int v57 = sub_1CB83544C(v55 + 272, (uint64_t)a3);
    if (v56 == 1) {
  }
    }
  llvm::ConstantRange::truncate((uint64_t)&__src, v27, (uint64_t)&v345);
  llvm::ConstantRange::zeroExtend((uint64_t)&v345, v57, (uint64_t)&v351);
  llvm::ConstantRange::zextOrTrunc((llvm::ConstantRange *)&__src, v57, &v340);
  BOOL v58 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v351, (const llvm::ConstantRange *)&v340);
  if (v343 >= 0x41 && v342) {
    MEMORY[0x1D25D9CB0](v342, 0x1000C8000313F17);
  }
  if (v341 >= 0x41 && v340) {
    MEMORY[0x1D25D9CB0](v340, 0x1000C8000313F17);
  }
  if (*(_DWORD *)&v353[8] >= 0x41u && *(void *)v353) {
    MEMORY[0x1D25D9CB0](*(void *)v353, 0x1000C8000313F17);
  }
  if (v352 >= 0x41 && v351) {
    MEMORY[0x1D25D9CB0](v351, 0x1000C8000313F17);
  }
  if (v347 >= 0x41 && v346) {
    MEMORY[0x1D25D9CB0](v346, 0x1000C8000313F17);
  }
  if (DWORD2(v345) >= 0x41 && (void)v345) {
    MEMORY[0x1D25D9CB0](v345, 0x1000C8000313F17);
  }
  if (v58) {
    uint64_t v27 = llvm::ScalarEvolution::getTruncateOrZeroExtend(this, v48, (llvm::Type *)a3, a4);
  }
  if (v358 >= 0x41 && v357) {
    MEMORY[0x1D25D9CB0](v357, 0x1000C8000313F17);
  }
  if (v356 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  if (!v58)
  {
    BOOL v46 = v344;
    int v47 = *((unsigned __int16 *)v344 + 12);
    goto LABEL_76;
  }
LABEL_399:
  if (__s1 != v350) {
    free(__s1);
  }
  return v27;
}

uint64_t llvm::ScalarEvolution::proveNoWrapViaConstantRanges(llvm::ScalarEvolution *this, const llvm::SCEVAddRecExpr *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*((void *)a2 + 5) != 2) {
    return 0;
  }
  __int16 v4 = *((_WORD *)a2 + 14);
  if ((v4 & 4) != 0)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef((uint64_t)this, (uint64_t)a2, 1, 0);
    unsigned int v22 = *(_DWORD *)(RangeRef + 8);
    if (v22 > 0x40) {
      operator new[]();
    }
    uint64_t v21 = *(void *)RangeRef;
    unsigned int v24 = *(_DWORD *)(RangeRef + 24);
    if (v24 > 0x40) {
      operator new[]();
    }
    uint64_t v23 = *(void *)(RangeRef + 16);
    uint64_t v6 = *((void *)a2 + 5);
    if (v6 == 2)
    {
      uint64_t v7 = *(void *)(*((void *)a2 + 4) + 8);
    }
    else
    {
      uint64_t v15 = *((void *)a2 + 4);
      unint64_t v25 = &v27;
      uint64_t v26 = 0x300000000;
      sub_1CD47792C((unsigned int *)&v25, (unsigned char *)(v15 + 8), (unsigned char *)(v15 + 8 * v6));
      uint64_t v7 = sub_1CD478318(this, (uint64_t)&v25, *((const llvm::Loop **)a2 + 6), 0);
      if (v25 != &v27) {
        free(v25);
      }
    }
    uint64_t v8 = llvm::ScalarEvolution::getRangeRef((uint64_t)this, v7, 1, 0);
    LODWORD(v26) = *(_DWORD *)(v8 + 8);
    if (v26 > 0x40) {
      operator new[]();
    }
    unint64_t v25 = *(void **)v8;
    unsigned int v28 = *(_DWORD *)(v8 + 24);
    if (v28 > 0x40) {
      operator new[]();
    }
    uint64_t v27 = *(void *)(v8 + 16);
    llvm::ConstantRange::makeGuaranteedNoWrapRegion((llvm::APInt *)&v25, 13, 2, (uint64_t)&v17);
    if (llvm::ConstantRange::contains((llvm::ConstantRange *)&v17, (const llvm::ConstantRange *)&v21)) {
      uint64_t v9 = 4;
    }
    else {
      uint64_t v9 = 0;
    }
    if (v20 >= 0x41 && v19) {
      MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
    }
    if (v18 >= 0x41 && v17) {
      MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
    }
    if (v28 >= 0x41 && v27) {
      MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
    }
    if (v26 >= 0x41 && v25) {
      MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
    }
    if (v24 >= 0x41 && v23) {
      MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
    }
    if (v22 >= 0x41 && v21) {
      MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
    }
    __int16 v4 = *((_WORD *)a2 + 14);
  }
  if ((v4 & 2) == 0)
  {
    uint64_t v10 = llvm::ScalarEvolution::getRangeRef((uint64_t)this, (uint64_t)a2, 0, 0);
    unsigned int v22 = *(_DWORD *)(v10 + 8);
    if (v22 > 0x40) {
      operator new[]();
    }
    uint64_t v21 = *(void *)v10;
    unsigned int v24 = *(_DWORD *)(v10 + 24);
    if (v24 > 0x40) {
      operator new[]();
    }
    uint64_t v23 = *(void *)(v10 + 16);
    uint64_t v11 = *((void *)a2 + 5);
    if (v11 == 2)
    {
      uint64_t v12 = *(void *)(*((void *)a2 + 4) + 8);
    }
    else
    {
      uint64_t v16 = *((void *)a2 + 4);
      unint64_t v25 = &v27;
      uint64_t v26 = 0x300000000;
      sub_1CD47792C((unsigned int *)&v25, (unsigned char *)(v16 + 8), (unsigned char *)(v16 + 8 * v11));
      uint64_t v12 = sub_1CD478318(this, (uint64_t)&v25, *((const llvm::Loop **)a2 + 6), 0);
      if (v25 != &v27) {
        free(v25);
      }
    }
    uint64_t v13 = llvm::ScalarEvolution::getRangeRef((uint64_t)this, v12, 0, 0);
    LODWORD(v26) = *(_DWORD *)(v13 + 8);
    if (v26 > 0x40) {
      operator new[]();
    }
    unint64_t v25 = *(void **)v13;
    unsigned int v28 = *(_DWORD *)(v13 + 24);
    if (v28 > 0x40) {
      operator new[]();
    }
    uint64_t v27 = *(void *)(v13 + 16);
    llvm::ConstantRange::makeGuaranteedNoWrapRegion((llvm::APInt *)&v25, 13, 1, (uint64_t)&v17);
    if (llvm::ConstantRange::contains((llvm::ConstantRange *)&v17, (const llvm::ConstantRange *)&v21)) {
      uint64_t v9 = v9 | 2;
    }
    else {
      uint64_t v9 = v9;
    }
    if (v20 >= 0x41 && v19) {
      MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
    }
    if (v18 >= 0x41 && v17) {
      MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
    }
    if (v28 >= 0x41 && v27) {
      MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
    }
    if (v26 >= 0x41 && v25) {
      MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
    }
    if (v24 >= 0x41 && v23) {
      MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
    }
    if (v22 >= 0x41 && v21) {
      MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
    }
  }
  return v9;
}

int32x2_t llvm::ScalarEvolution::setNoWrapFlags(int32x2_t *a1, uint64_t a2, int a3)
{
  int v3 = *(unsigned __int16 *)(a2 + 28);
  if ((a3 & ~v3) != 0)
  {
    *(_WORD *)(a2 + 28) = v3 | ((a3 & 6) != 0) | (unsigned __int16)a3;
    __int32 v6 = a1[100].i32[0];
    unsigned int v7 = a2 >> 4;
    if (v6)
    {
      int32x2_t v8 = a1[98];
      __int32 v9 = v6 - 1;
      unsigned int v10 = v9 & (v7 ^ (a2 >> 9));
      uint64_t v11 = *(void *)&v8 + 40 * v10;
      uint64_t v12 = *(void *)v11;
      if (*(void *)v11 == a2)
      {
LABEL_8:
        if (*(_DWORD *)(v11 + 32) >= 0x41u)
        {
          uint64_t v24 = *(void *)(v11 + 24);
          if (v24) {
            MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
          }
        }
        if (*(_DWORD *)(v11 + 16) >= 0x41u)
        {
          uint64_t v25 = *(void *)(v11 + 8);
          if (v25) {
            MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
          }
        }
        *(void *)uint64_t v11 = -8192;
        int32x2_t result = vadd_s32(a1[99], (int32x2_t)0x1FFFFFFFFLL);
        a1[99] = result;
      }
      else
      {
        int v13 = 1;
        while (v12 != -4096)
        {
          unsigned int v14 = v10 + v13++;
          unsigned int v10 = v14 & v9;
          uint64_t v11 = *(void *)&v8 + 40 * v10;
          uint64_t v12 = *(void *)v11;
          if (*(void *)v11 == a2) {
            goto LABEL_8;
          }
        }
      }
    }
    __int32 v16 = a1[103].i32[0];
    if (v16)
    {
      int32x2_t v17 = a1[101];
      __int32 v18 = v16 - 1;
      unsigned int v19 = v18 & (v7 ^ (a2 >> 9));
      uint64_t v20 = *(void *)&v17 + 40 * v19;
      uint64_t v21 = *(void *)v20;
      if (*(void *)v20 == a2)
      {
LABEL_16:
        if (*(_DWORD *)(v20 + 32) >= 0x41u)
        {
          uint64_t v26 = *(void *)(v20 + 24);
          if (v26) {
            MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
          }
        }
        if (*(_DWORD *)(v20 + 16) >= 0x41u)
        {
          uint64_t v27 = *(void *)(v20 + 8);
          if (v27) {
            MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
          }
        }
        *(void *)uint64_t v20 = -8192;
        int32x2_t result = vadd_s32(a1[102], (int32x2_t)0x1FFFFFFFFLL);
        a1[102] = result;
      }
      else
      {
        int v22 = 1;
        while (v21 != -4096)
        {
          unsigned int v23 = v19 + v22++;
          unsigned int v19 = v23 & v18;
          uint64_t v20 = *(void *)&v17 + 40 * v19;
          uint64_t v21 = *(void *)v20;
          if (*(void *)v20 == a2) {
            goto LABEL_16;
          }
        }
      }
    }
  }
  return result;
}

uint64_t llvm::ScalarEvolution::getAddRecExpr(llvm::ScalarEvolution *a1, uint64_t a2, uint64_t a3, const llvm::Loop *a4, uint64_t a5)
{
  v12[4] = *MEMORY[0x1E4F143B8];
  unsigned int v10 = v12;
  v12[0] = a2;
  uint64_t v11 = 0x400000001;
  if (a3 && *(_WORD *)(a3 + 24) == 7 && *(const llvm::Loop **)(a3 + 48) == a4)
  {
    __int32 v9 = a1;
    char v8 = a5;
    unsigned int v7 = a4;
    sub_1CD47792C((unsigned int *)&v10, *(unsigned char **)(a3 + 32), (unsigned char *)(*(void *)(a3 + 32) + 8 * *(void *)(a3 + 40)));
    a1 = v9;
    a4 = v7;
    a5 = v8 & 1;
  }
  else
  {
    v12[1] = a3;
    LODWORD(v11) = 2;
  }
  uint64_t result = llvm::ScalarEvolution::getAddRecExpr(a1, (uint64_t **)&v10, a4, a5);
  if (v10 != v12)
  {
    uint64_t v6 = result;
    free(v10);
    return v6;
  }
  return result;
}

uint64_t sub_1CC0E4EF0(uint64_t a1, llvm::Type *a2, llvm::ScalarEvolution *this, unsigned int a4)
{
  v61[4] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a1 + 40);
  char v8 = *(const llvm::Loop **)(a1 + 48);
  unsigned int v10 = *(uint64_t **)(a1 + 32);
  uint64_t v11 = *v10;
  if (v9 == 2)
  {
    uint64_t v12 = (const llvm::SCEV *)v10[1];
  }
  else
  {
    uint64_t v59 = v61;
    uint64_t v60 = 0x300000000;
    unint64_t v52 = 8 * v9 - 8;
    if (v52 >= 0x19) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v53 = 0;
    if (v9 != 1)
    {
      memcpy(v59, v10 + 1, 8 * v9 - 8);
      int v53 = v60;
    }
    LODWORD(v60) = v53 + (v52 >> 3);
    uint64_t v12 = (const llvm::SCEV *)sub_1CD478318(this, (uint64_t)&v59, *(const llvm::Loop **)(a1 + 48), 0);
    if (v59 != v61) {
      free(v59);
    }
  }
  if (*(_WORD *)(v11 + 24) != 4 || v11 == 0) {
    return llvm::ScalarEvolution::getZeroExtendExpr(this, **(const llvm::SCEV ***)(a1 + 32), a2, a4);
  }
  uint64_t v59 = v61;
  uint64_t v60 = 0x400000000;
  uint64_t v14 = *(void *)(v11 + 40);
  if (v14)
  {
    unsigned int v15 = 0;
    __int32 v16 = *(void **)(v11 + 32);
    uint64_t v17 = 8 * v14;
    do
    {
      if ((const llvm::SCEV *)*v16 != v12)
      {
        if (v15 >= HIDWORD(v60)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v59 + v15) = *v16;
        unsigned int v15 = v60 + 1;
        LODWORD(v60) = v60 + 1;
      }
      ++v16;
      v17 -= 8;
    }
    while (v17);
    uint64_t v14 = *(void *)(v11 + 40);
  }
  else
  {
    unsigned int v15 = 0;
  }
  if (v14 == v15)
  {
    uint64_t AddExpr = 0;
  }
  else
  {
    uint64_t AddExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getAddExpr(this, &v59, *(_WORD *)(v11 + 28) & 2, 0);
    uint64_t AddRecExpr = llvm::ScalarEvolution::getAddRecExpr(this, (uint64_t)AddExpr, (uint64_t)v12, v8, 0);
    if (*(_WORD *)(AddRecExpr + 24) == 7) {
      uint64_t v20 = AddRecExpr;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(this, v8);
    Exact = (const llvm::SCEV *)llvm::ScalarEvolution::BackedgeTakenInfo::getExact(BackedgeTakenInfo, (uint64_t)v8, (uint64_t)this);
    if (!v20
      || (*(_WORD *)(v20 + 28) & 2) == 0
      || *((_WORD *)Exact + 12) == 15
      || !llvm::ScalarEvolution::isKnownPositive(this, Exact))
    {
      unsigned int v23 = *(uint64_t **)(a1 + 32);
      while (2)
      {
        uint64_t v24 = *v23;
        switch(*(_WORD *)(v24 + 24))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            uint64_t v25 = (uint64_t *)(v24 + 40);
            break;
          case 4:
            uint64_t v25 = (uint64_t *)(v24 + 48);
            break;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            unsigned int v23 = *(uint64_t **)(v24 + 32);
            continue;
          case 6:
            unsigned int v23 = (uint64_t *)(v24 + 40);
            continue;
          case 0xE:
            uint64_t v25 = *(uint64_t **)(v24 - 8);
            break;
          default:
            uint64_t v25 = *(uint64_t **)(v24 + 32);
            break;
        }
        break;
      }
      uint64_t v26 = *v25;
      unsigned int v27 = *(_DWORD *)(*v25 + 8);
      unsigned int v28 = *(llvm::IntegerType ****)this;
      uint64_t v29 = *(void *)(*(void *)this + 40);
      uint64_t v57 = v20;
      if (v27 == 15)
      {
        if ((v27 & 0xFE) == 0x12) {
          unsigned int v27 = *(_DWORD *)(**(void **)(v26 + 16) + 8);
        }
        uint64_t v43 = *(void *)(v29 + 504);
        if (v27 < 0x100) {
          goto LABEL_64;
        }
        unsigned int v44 = v27 >> 8;
        unint64_t v45 = *(unsigned int *)(v29 + 512);
        uint64_t v46 = *(void *)(v29 + 504);
        if (v45)
        {
          uint64_t v46 = v43;
          unint64_t v47 = v45;
          do
          {
            unint64_t v48 = v47 >> 1;
            uint64_t v49 = v46 + 16 * (v47 >> 1);
            unsigned int v50 = *(_DWORD *)(v49 + 8);
            uint64_t v51 = v49 + 16;
            v47 += ~(v47 >> 1);
            if (v50 < v44) {
              uint64_t v46 = v51;
            }
            else {
              unint64_t v47 = v48;
            }
          }
          while (v47);
        }
        if (v46 == v43 + 16 * v45 || *(_DWORD *)(v46 + 8) != v44) {
LABEL_64:
        }
          uint64_t v46 = v43;
        int v31 = *(_DWORD *)(v46 + 12);
      }
      else
      {
        int v31 = sub_1CB83544C(v29 + 272, v26);
        if (v30 == 1) {
        unsigned int v28 = *(llvm::IntegerType ****)this;
        }
      }
      uint64_t v32 = (llvm::Type *)llvm::IntegerType::get(**v28, (llvm::LLVMContext *)(2 * v31));
      uint64_t ZeroExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr(this, AddExpr, v32, a4);
      uint64_t v34 = llvm::ScalarEvolution::getZeroExtendExpr(this, v12, v32, a4);
      uint64_t v35 = sub_1CBFD7D6C(this, ZeroExtendExpr, v34, 0, 0);
      if (llvm::ScalarEvolution::getZeroExtendExpr(this, (const llvm::SCEV *)v11, v32, a4) == v35)
      {
        if (v57 && (*(_WORD *)(a1 + 28) & 2) != 0) {
          llvm::ScalarEvolution::setNoWrapFlags((int32x2_t *)this, v57, 2);
        }
      }
      else
      {
        unsigned int v58 = 0;
        unint64_t v36 = sub_1CC13AA88((uint64_t)v12, &v58, (llvm::ConstantInt ****)this);
        if (!v36
          || (llvm::ScalarEvolution::isLoopEntryGuardedByCond((uint64_t)this, (uint64_t)v8, v58, (uint64_t)AddExpr, v36) & 1) == 0)
        {
          uint64_t AddExpr = 0;
        }
      }
    }
  }
  if (v59 != v61) {
    free(v59);
  }
  if (!AddExpr) {
    return llvm::ScalarEvolution::getZeroExtendExpr(this, **(const llvm::SCEV ***)(a1 + 32), a2, a4);
  }
  uint64_t v37 = *(void *)(a1 + 40);
  if (v37 == 2)
  {
    uint64_t v38 = *(const llvm::SCEV **)(*(void *)(a1 + 32) + 8);
  }
  else
  {
    uint64_t v54 = *(void *)(a1 + 32);
    uint64_t v59 = v61;
    uint64_t v60 = 0x300000000;
    unint64_t v55 = 8 * v37 - 8;
    if (v55 >= 0x19) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v56 = 0;
    if (v37 != 1)
    {
      memcpy(v59, (const void *)(v54 + 8), 8 * v37 - 8);
      int v56 = v60;
    }
    LODWORD(v60) = v56 + (v55 >> 3);
    uint64_t v38 = (const llvm::SCEV *)sub_1CD478318(this, (uint64_t)&v59, *(const llvm::Loop **)(a1 + 48), 0);
    if (v59 != v61) {
      free(v59);
    }
  }
  uint64_t v39 = llvm::ScalarEvolution::getZeroExtendExpr(this, v38, a2, a4);
  uint64_t v40 = llvm::ScalarEvolution::getZeroExtendExpr(this, AddExpr, a2, a4);
  uint64_t v59 = v61;
  v61[0] = v39;
  v61[1] = v40;
  uint64_t v60 = 0x200000002;
  uint64_t v41 = llvm::ScalarEvolution::getAddExpr(this, &v59, 0, 0);
  if (v59 != v61) {
    free(v59);
  }
  return v41;
}

unint64_t llvm::ScalarEvolution::getSignExtendExpr(llvm::ScalarEvolution *this, llvm::detail::IEEEFloat **a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v266 = *MEMORY[0x1E4F143B8];
  while (1)
  {
    unsigned int v8 = *((_DWORD *)a3 + 2);
    if (v8 != 13)
    {
      if ((v8 & 0xFE) == 0x12) {
        unsigned int v8 = *(_DWORD *)(*a3[2] + 8);
      }
      uint64_t v9 = *(void *)(*(void *)this + 40);
      uint64_t v10 = *(void *)(v9 + 504);
      if (v8 < 0x100) {
        goto LABEL_14;
      }
      unsigned int v11 = v8 >> 8;
      unint64_t v12 = *(unsigned int *)(v9 + 512);
      uint64_t v13 = v10;
      if (v12)
      {
        uint64_t v13 = v10;
        unint64_t v14 = v12;
        do
        {
          unint64_t v15 = v14 >> 1;
          uint64_t v16 = v13 + 16 * (v14 >> 1);
          unsigned int v17 = *(_DWORD *)(v16 + 8);
          uint64_t v18 = v16 + 16;
          v14 += ~(v14 >> 1);
          if (v17 < v11) {
            uint64_t v13 = v18;
          }
          else {
            unint64_t v14 = v15;
          }
        }
        while (v14);
      }
      if (v13 == v10 + 16 * v12 || *(_DWORD *)(v13 + 8) != v11) {
LABEL_14:
      }
        uint64_t v13 = v10;
      unsigned int v19 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*a3, (llvm::LLVMContext *)*(unsigned int *)(v13 + 12));
      if ((a3[1] & 0xFE) == 0x12)
      {
        uint64_t v21 = (llvm::Type *)*((unsigned int *)a3 + 8);
        if (*((_DWORD *)a3 + 2) == 19) {
          llvm::ScalableVectorType::get(v19, v21);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v19, v21);
        }
      }
      a3 = v19;
    }
    int v20 = *((unsigned __int16 *)a2 + 12);
    if (a2 && !*((_WORD *)a2 + 12))
    {
      int v22 = sub_1CC56C0C0((llvm *)0x28, a2[4], (llvm::Constant *)a3, 0);
      return llvm::ScalarEvolution::getConstant(this, v22);
    }
    if (!a2 || v20 != 3) {
      break;
    }
    a2 = (llvm::detail::IEEEFloat **)a2[4];
    a4 = (a4 + 1);
  }
  int v251 = (llvm::SCEV *)a2;
  if (a2 && v20 == 2)
  {
    uint64_t v24 = a2[4];
    return llvm::ScalarEvolution::getZeroExtendExpr(this, v24, (llvm::Type *)a3, (int)a4 + 1);
  }
  __s1 = v257;
  *(_DWORD *)uint64_t v257 = 3;
  *(void *)&v257[4] = a2;
  *(void *)&v257[12] = a3;
  uint64_t v256 = 0x2000000005;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v233 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v233 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v233;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  uint64_t v25 = __ROR8__(0xB492B66FBE98F273 * *(void *)v257 - *(void *)&v257[8], 43)
      - 0x3C5A37A36834CED9 * *(void *)&v257[4]
      + __ROR8__((0x9AE16A3B2F90404FLL * *(void *)&v257[12]) ^ qword_1EBCBE580, 30);
  unint64_t v26 = qword_1EBCBE580
      + __ROR8__(*(void *)&v257[8] ^ 0xC949D7C7509E6557, 20)
      - 0x4B6D499041670D8DLL * *(void *)v257
      - 0x9AE16A3B2F90404FLL * *(void *)&v257[12]
      + 20;
  unint64_t v27 = 0x9DDFEA08EB382D69
      * (v26 ^ ((0x9DDFEA08EB382D69 * (v25 ^ v26)) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ v26)));
  uint64_t v28 = *((void *)this + 104)
      + 8 * ((-348639895 * ((v27 >> 47) ^ v27)) & (*((_DWORD *)this + 210) - 1));
  uint64_t AddExpr = *(void *)v28;
  __src = &v264;
  uint64_t v263 = 0x2000000000;
  if (AddExpr) {
    BOOL v30 = (AddExpr & 1) == 0;
  }
  else {
    BOOL v30 = 0;
  }
  if (v30)
  {
    while (*(void *)(AddExpr + 16) != v256
         || memcmp(__s1, *(const void **)(AddExpr + 8), 4 * v256))
    {
      LODWORD(v263) = 0;
      uint64_t AddExpr = *(void *)AddExpr;
      if (AddExpr) {
        BOOL v31 = (AddExpr & 1) == 0;
      }
      else {
        BOOL v31 = 0;
      }
      if (!v31) {
        goto LABEL_45;
      }
    }
    goto LABEL_59;
  }
LABEL_45:
  uint64_t v32 = (char *)this + 832;
  if (dword_1EBCC7BB8 < a4)
  {
    *((void *)this + 118) += 48;
    uint64_t v33 = *((void *)this + 108);
    if (((v33 + 7) & 0xFFFFFFFFFFFFFFF8) - v33 + 48 > *((void *)this + 109) - v33)
    {
      unsigned int v110 = *((_DWORD *)this + 222) >> 7;
      if (v110 >= 0x1E) {
        LOBYTE(v110) = 30;
      }
      uint64_t v111 = 4096 << v110;
      uint64_t AddExpr = (uint64_t)operator new(4096 << v110, (std::align_val_t)8uLL);
      unsigned int v112 = *((_DWORD *)this + 222);
      if (v112 >= *((_DWORD *)this + 223)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*((void *)this + 110) + 8 * v112) = AddExpr;
      ++*((_DWORD *)this + 222);
      *((void *)this + 109) = AddExpr + v111;
    }
    else
    {
      uint64_t AddExpr = (v33 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 108) = AddExpr + 48;
    uint64_t v34 = sub_1CB906F34((uint64_t *)this + 108, 4 * v256, 2);
    uint64_t v35 = v34;
    if (v256)
    {
      unint64_t v36 = (int *)__s1;
      uint64_t v37 = 4 * v256;
      uint64_t v38 = (_DWORD *)v34;
      do
      {
        int v39 = *v36++;
        *v38++ = v39;
        v37 -= 4;
      }
      while (v37);
      uint64_t v40 = v256;
    }
    else
    {
      uint64_t v40 = 0;
    }
    LODWORD(v263) = 16;
    __src = (void *)1;
    uint64_t v41 = *((unsigned __int16 *)a2 + 13);
    DWORD2(v252) = 16;
    *(void *)&long long v252 = v41;
    llvm::APInt::uadd_sat((llvm::APInt *)&__src, (const llvm::APInt *)&v252, (uint64_t)&v258);
    __int16 v42 = (__int16)v258;
    if (v259 > 0x40)
    {
      uint64_t v43 = *(void *)v258;
      MEMORY[0x1D25D9CB0]();
      __int16 v42 = v43;
    }
    *(void *)uint64_t AddExpr = 0;
    *(void *)(AddExpr + 8) = v35;
    *(void *)(AddExpr + 16) = v40;
    *(_WORD *)(AddExpr + 24) = 3;
    *(_WORD *)(AddExpr + 26) = v42;
    *(_WORD *)(AddExpr + 28) = 0;
    *(void *)(AddExpr + 32) = a2;
    *(void *)(AddExpr + 40) = a3;
    unsigned int v44 = *((_DWORD *)this + 211) + 1;
    int v45 = *((_DWORD *)this + 210);
    if (v44 > 2 * v45)
    {
      llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v45, (uint64_t)off_1F2607658);
      __src = &v264;
      uint64_t v263 = 0x2000000000;
      uint64_t v28 = *((void *)this + 104)
          + 8
          * ((*((_DWORD *)this + 210) - 1) & sub_1CC13A6B8(*(void **)(AddExpr + 8), *(void *)(AddExpr + 8) + 4 * *(void *)(AddExpr + 16)));
      if (__src != &v264) {
        free(__src);
      }
      unsigned int v44 = *((_DWORD *)this + 211) + 1;
    }
    *((_DWORD *)this + 211) = v44;
    uint64_t v46 = *(void *)v28;
    if (!*(void *)v28) {
      uint64_t v46 = v28 | 1;
    }
    *(void *)uint64_t AddExpr = v46;
    *(void *)uint64_t v28 = AddExpr;
    unint64_t v47 = (uint64_t *)&v251;
    goto LABEL_58;
  }
  int v48 = *((unsigned __int16 *)a2 + 12);
  if (!a2 || v48 != 1)
  {
LABEL_84:
    if (v48 != 4)
    {
LABEL_124:
      if (v48 != 7 || a2[5] != (llvm::detail::IEEEFloat *)2) {
        goto LABEL_236;
      }
      uint64_t v84 = a2[4];
      uint64_t v85 = *(void *)v84;
      uint64_t v244 = (llvm::SCEV *)*((void *)v84 + 1);
      uint64_t v86 = *(void *)v84;
      while (2)
      {
        switch(*(_WORD *)(v86 + 24))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            unsigned int v88 = (uint64_t *)(v86 + 40);
            goto LABEL_134;
          case 4:
            unsigned int v88 = (uint64_t *)(v86 + 48);
            goto LABEL_134;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            uint64_t v87 = *(uint64_t **)(v86 + 32);
            goto LABEL_129;
          case 6:
            uint64_t v87 = (uint64_t *)(v86 + 40);
LABEL_129:
            uint64_t v86 = *v87;
            continue;
          case 0xE:
            unsigned int v88 = *(uint64_t **)(v86 - 8);
            goto LABEL_134;
          default:
            unsigned int v88 = *(uint64_t **)(v86 + 32);
LABEL_134:
            uint64_t v89 = *v88;
            unsigned int v90 = *(_DWORD *)(*v88 + 8);
            uint64_t v91 = *(void *)(*(void *)this + 40);
            if (v90 == 15)
            {
              if ((v90 & 0xFE) == 0x12) {
                unsigned int v90 = *(_DWORD *)(**(void **)(v89 + 16) + 8);
              }
              uint64_t v199 = *(void *)(v91 + 504);
              if (v90 < 0x100) {
                goto LABEL_281;
              }
              unsigned int v200 = v90 >> 8;
              unint64_t v201 = *(unsigned int *)(v91 + 512);
              uint64_t v202 = *(void *)(v91 + 504);
              if (v201)
              {
                uint64_t v202 = v199;
                unint64_t v203 = v201;
                do
                {
                  unint64_t v204 = v203 >> 1;
                  uint64_t v205 = v202 + 16 * (v203 >> 1);
                  unsigned int v206 = *(_DWORD *)(v205 + 8);
                  uint64_t v207 = v205 + 16;
                  v203 += ~(v203 >> 1);
                  if (v206 < v200) {
                    uint64_t v202 = v207;
                  }
                  else {
                    unint64_t v203 = v204;
                  }
                }
                while (v203);
              }
              if (v202 == v199 + 16 * v201 || *(_DWORD *)(v202 + 8) != v200) {
LABEL_281:
              }
                uint64_t v202 = v199;
              int v239 = *(_DWORD *)(v202 + 12);
            }
            else
            {
              int v239 = sub_1CB83544C(v91 + 272, v89);
              if (v92 == 1) {
            }
              }
            uint64_t v93 = a2[6];
            __int16 v94 = *((_WORD *)a2 + 14);
            if ((v94 & 4) == 0)
            {
              int v95 = llvm::ScalarEvolution::proveNoWrapViaConstantRanges(this, (const llvm::SCEVAddRecExpr *)a2);
              llvm::ScalarEvolution::setNoWrapFlags((int32x2_t *)this, (uint64_t)a2, v95);
              __int16 v94 = *((_WORD *)a2 + 14);
            }
            if ((v94 & 4) != 0)
            {
              unsigned int v101 = a4 + 1;
              uint64_t v102 = sub_1CC0EB218((uint64_t)a2, (llvm::Type *)a3, this, (int)a4 + 1);
              uint64_t SignExtendExpr = llvm::ScalarEvolution::getSignExtendExpr(this, v244, (llvm::Type *)a3, v101);
              unint64_t v104 = this;
              uint64_t v105 = v102;
              char v106 = v93;
              uint64_t v107 = 4;
              goto LABEL_225;
            }
            uint64_t v242 = v85;
            uint64_t BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(this, v93);
            int v97 = *(const llvm::SCEV **)(BackedgeTakenInfo + 104);
            uint8x8_t v243 = v93;
            if (!v97) {
              goto LABEL_147;
            }
            unsigned int v98 = *(_DWORD *)(BackedgeTakenInfo + 8);
            if (v98)
            {
              uint64_t v99 = (_DWORD *)(*(void *)BackedgeTakenInfo + 48);
              uint64_t v100 = 88 * v98;
              while (*(v99 - 1) == *v99)
              {
                v99 += 22;
                v100 -= 88;
                if (!v100) {
                  goto LABEL_148;
                }
              }
LABEL_147:
              int v97 = (const llvm::SCEV *)*((void *)this + 6);
            }
LABEL_148:
            if (*((_WORD *)v97 + 12) != 15)
            {
              uint64_t v108 = v242;
              while (2)
              {
                switch(*(_WORD *)(v108 + 24))
                {
                  case 1:
                  case 2:
                  case 3:
                  case 0xD:
                    uint64_t v113 = (llvm::Type **)(v108 + 40);
                    goto LABEL_187;
                  case 4:
                    uint64_t v113 = (llvm::Type **)(v108 + 48);
                    goto LABEL_187;
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                  case 0xA:
                  case 0xB:
                  case 0xC:
                    uint64_t v109 = *(uint64_t **)(v108 + 32);
                    goto LABEL_152;
                  case 6:
                    uint64_t v109 = (uint64_t *)(v108 + 40);
LABEL_152:
                    uint64_t v108 = *v109;
                    continue;
                  case 0xE:
                    uint64_t v113 = *(llvm::Type ***)(v108 - 8);
                    goto LABEL_187;
                  default:
                    uint64_t v113 = *(llvm::Type ***)(v108 + 32);
LABEL_187:
                    uint64_t TruncateOrZeroExtend = (const llvm::SCEV *)llvm::ScalarEvolution::getTruncateOrZeroExtend(this, v97, *v113, a4);
                    uint64_t v133 = v97;
                    while (2)
                    {
                      switch(*((_WORD *)v133 + 12))
                      {
                        case 1:
                        case 2:
                        case 3:
                        case 0xD:
                          uint64_t v135 = (llvm::Type **)((char *)v133 + 40);
                          goto LABEL_195;
                        case 4:
                          uint64_t v135 = (llvm::Type **)((char *)v133 + 48);
                          goto LABEL_195;
                        case 5:
                        case 7:
                        case 8:
                        case 9:
                        case 0xA:
                        case 0xB:
                        case 0xC:
                          int v134 = (const llvm::SCEV **)*((void *)v133 + 4);
                          goto LABEL_190;
                        case 6:
                          int v134 = (const llvm::SCEV **)((char *)v133 + 40);
LABEL_190:
                          uint64_t v133 = *v134;
                          continue;
                        case 0xE:
                          uint64_t v135 = (llvm::Type **)*((void *)v133 - 1);
                          goto LABEL_195;
                        default:
                          uint64_t v135 = (llvm::Type **)*((void *)v133 + 4);
LABEL_195:
                          if (v97 != (const llvm::SCEV *)llvm::ScalarEvolution::getTruncateOrZeroExtend(this, TruncateOrZeroExtend, *v135, a4))goto LABEL_196; {
                          unint64_t v156 = (llvm::Type *)llvm::IntegerType::get(***(llvm::IntegerType ****)this, (llvm::LLVMContext *)(2 * v239));
                          }
                          uint64_t v157 = sub_1CBFD7CB4(this, TruncateOrZeroExtend, v244, 0, (a4 + 1));
                          unsigned int v158 = (const llvm::SCEV *)sub_1CBFD7D6C(this, v242, v157, 0, (a4 + 1));
                          uint64_t v241 = llvm::ScalarEvolution::getSignExtendExpr(this, v158, v156, (int)a4 + 1);
                          uint64_t v159 = v156;
                          uint64_t v160 = llvm::ScalarEvolution::getSignExtendExpr(this, (const llvm::SCEV *)v242, v156, (int)a4 + 1);
                          uint64_t ZeroExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr(this, TruncateOrZeroExtend, v159, (int)a4 + 1);
                          uint64_t v162 = llvm::ScalarEvolution::getSignExtendExpr(this, v244, v159, (int)a4 + 1);
                          uint64_t v163 = sub_1CBFD7CB4(this, ZeroExtendExpr, v162, 0, (a4 + 1));
                          if (v241 == sub_1CBFD7D6C(this, v160, v163, 0, (a4 + 1)))
                          {
                            llvm::ScalarEvolution::setNoWrapFlags((int32x2_t *)this, (uint64_t)a2, 4);
                            uint64_t v166 = sub_1CC0EB218((uint64_t)a2, (llvm::Type *)a3, this, (int)a4 + 1);
                            uint64_t v167 = llvm::ScalarEvolution::getSignExtendExpr(this, v244, (llvm::Type *)a3, (int)a4 + 1);
                          }
                          else
                          {
                            uint64_t v164 = llvm::ScalarEvolution::getZeroExtendExpr(this, v244, v159, (int)a4 + 1);
                            uint64_t v165 = sub_1CBFD7CB4(this, ZeroExtendExpr, v164, 0, (a4 + 1));
                            if (v241 != sub_1CBFD7D6C(this, v160, v165, 0, (a4 + 1))) {
                              goto LABEL_196;
                            }
                            llvm::ScalarEvolution::setNoWrapFlags((int32x2_t *)this, (uint64_t)a2, 1);
                            uint64_t v166 = sub_1CC0EB218((uint64_t)a2, (llvm::Type *)a3, this, (int)a4 + 1);
                            uint64_t v167 = llvm::ScalarEvolution::getZeroExtendExpr(this, v244, (llvm::Type *)a3, (int)a4 + 1);
                          }
                          uint64_t SignExtendExpr = v167;
                          uint64_t v107 = *((_WORD *)a2 + 14) & 7;
                          unint64_t v104 = this;
                          uint64_t v105 = v166;
                          break;
                      }
                      break;
                    }
                    break;
                }
                goto LABEL_224;
              }
            }
LABEL_196:
            int v136 = llvm::ScalarEvolution::proveNoSignedWrapViaInduction(this, (const llvm::SCEVAddRecExpr *)a2);
            llvm::ScalarEvolution::setNoWrapFlags((int32x2_t *)this, (uint64_t)a2, v136);
            if ((*((_WORD *)a2 + 14) & 4) == 0)
            {
              uint64_t v137 = v242;
              int v138 = *(unsigned __int16 *)(v242 + 24);
              if (*(_WORD *)(v242 + 24))
              {
                uint64_t v32 = (char *)this + 832;
              }
              else
              {
                uint64_t v32 = (char *)this + 832;
                if (v242)
                {
                  uint64_t v139 = *(void *)(v242 + 32);
                  unint64_t v240 = (void *)(v139 + 24);
                  sub_1CC0E851C((llvm::APInt *)&__src, this, v139 + 24, v244);
                  unsigned int v141 = v263;
                  uint64_t v142 = __src;
                  if (v263 >= 0x41)
                  {
                    int v143 = 0;
                    int64_t v144 = ((unint64_t)v263 + 63) >> 6;
                    do
                    {
                      BOOL v66 = v144-- < 1;
                      if (v66) {
                        break;
                      }
                      unint64_t v145 = *((void *)__src + v144);
                      v143 += __clz(v145);
                    }
                    while (!v145);
                    int v146 = v263 | 0xFFFFFFC0;
                    if ((v263 & 0x3F) == 0) {
                      int v146 = 0;
                    }
                    if ((v263 - v143 - v146) > 0x40) {
                      goto LABEL_208;
                    }
                    uint64_t v142 = *(void **)__src;
                  }
                  if (!v142)
                  {
                    char v172 = 0;
LABEL_228:
                    if (v141 >= 0x41 && __src) {
                      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                    }
                    if (v172) {
                      goto LABEL_59;
                    }
                    int v138 = *(unsigned __int16 *)(v137 + 24);
                    goto LABEL_233;
                  }
LABEL_208:
                  unint64_t v147 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&__src, v140);
                  unint64_t Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(this, v147);
                  uint64_t v149 = llvm::ScalarEvolution::getSignExtendExpr(this, Constant, (llvm::Type *)a3, a4);
                  unsigned int v151 = *(_DWORD *)(v139 + 32);
                  uint64_t v237 = v149;
                  if (v151 >= 0x41) {
                    operator new[]();
                  }
                  unint64_t v152 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v151;
                  if (!v151) {
                    unint64_t v152 = 0;
                  }
                  unint64_t v153 = (void *)(v152 & (*v240 - (void)__src));
                  LODWORD(v259) = v151;
                  unint64_t v258 = v153;
                  uint64_t v168 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&v258, v150);
                  unint64_t v169 = llvm::ScalarEvolution::getConstant(this, v168);
                  uint64_t AddRecExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getAddRecExpr(this, v169, (uint64_t)v244, v243, *((_WORD *)a2 + 14) & 7);
                  if (v259 >= 0x41 && v258) {
                    MEMORY[0x1D25D9CB0](v258, 0x1000C8000313F17);
                  }
                  uint64_t v171 = llvm::ScalarEvolution::getSignExtendExpr(this, AddRecExpr, (llvm::Type *)a3, (int)a4 + 1);
                  uint64_t AddExpr = sub_1CBFD7D6C(this, v237, v171, 6, (a4 + 1));
                  char v172 = 1;
                  unsigned int v141 = v263;
                  uint64_t v137 = v242;
                  goto LABEL_228;
                }
              }
LABEL_233:
              if (v137 && !v138)
              {
                uint64_t v211 = *(void *)(v137 + 32);
                uint64_t v212 = *(unsigned int *)(v211 + 32);
                if (v212 > 0x40) {
                  operator new[]();
                }
                unint64_t v235 = *(llvm::Type **)(v211 + 24);
                uint64_t v213 = 0;
                long long v252 = xmmword_1CFAC4410;
                while (1)
                {
                  unint64_t v214 = *((unsigned int *)&v252 + v213);
                  unsigned int v248 = v212;
                  uint64_t v238 = v213;
                  unsigned int v247 = v235;
                  llvm::APInt::operator-=((uint64_t)&v247, v214);
                  LODWORD(v263) = v248;
                  __src = v247;
                  unsigned int v248 = 0;
                  uint64_t v216 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&__src, v215);
                  unint64_t v217 = llvm::ScalarEvolution::getConstant(this, v216);
                  if (v263 >= 0x41 && __src) {
                    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                  }
                  unint64_t v234 = v214;
                  if (v248 >= 0x41 && v247) {
                    MEMORY[0x1D25D9CB0](v247, 0x1000C8000313F17);
                  }
                  uint64_t v218 = v212;
                  unint64_t v258 = v260;
                  *(_DWORD *)unint64_t v260 = 7;
                  *(void *)&v260[4] = v217;
                  *(void *)&v260[12] = v244;
                  unint64_t v261 = v243;
                  uint64_t v259 = 0x2000000007;
                  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
                    && __cxa_guard_acquire(&qword_1EBCBE588))
                  {
                    unint64_t v229 = llvm::hashing::detail::fixed_seed_override;
                    if (!llvm::hashing::detail::fixed_seed_override) {
                      unint64_t v229 = 0xFF51AFD7ED558CCDLL;
                    }
                    qword_1EBCBE580 = v229;
                    __cxa_guard_release(&qword_1EBCBE588);
                  }
                  uint64_t v219 = __ROR8__(0xB492B66FBE98F273 * *(void *)v260 - *(void *)&v260[8], 43)
                       - 0x3C5A37A36834CED9 * *(void *)&v260[12]
                       + __ROR8__((0x9AE16A3B2F90404FLL * (void)v261) ^ qword_1EBCBE580, 30);
                  unint64_t v220 = qword_1EBCBE580
                       + __ROR8__(*(void *)&v260[8] ^ 0xC949D7C7509E6557, 20)
                       - 0x4B6D499041670D8DLL * *(void *)v260
                       - 0x9AE16A3B2F90404FLL * (void)v261
                       + 28;
                  unint64_t v221 = 0x9DDFEA08EB382D69
                       * (v220 ^ ((0x9DDFEA08EB382D69 * (v219 ^ v220)) >> 47) ^ (0x9DDFEA08EB382D69 * (v219 ^ v220)));
                  uint64_t v222 = *(void *)(*((void *)this + 104)
                                   + 8
                                   * ((-348639895 * ((v221 >> 47) ^ v221)) & (*((_DWORD *)this + 210) - 1)));
                  __src = &v264;
                  uint64_t v263 = 0x2000000000;
                  if (v222 && (v222 & 1) == 0)
                  {
                    uint64_t v224 = v259;
                    uint64_t v236 = v258;
                    size_t v225 = 4 * v259;
                    while (*(void *)(v222 + 16) != v224 || memcmp(v236, *(const void **)(v222 + 8), v225))
                    {
                      LODWORD(v263) = 0;
                      uint64_t v222 = *(void *)v222;
                      if (v222) {
                        BOOL v226 = (v222 & 1) == 0;
                      }
                      else {
                        BOOL v226 = 0;
                      }
                      if (!v226) {
                        goto LABEL_306;
                      }
                    }
                    if ((*(_WORD *)(v222 + 28) & 4) != 0)
                    {
                      unint64_t v227 = llvm::ScalarEvolution::getConstant(this, **(llvm::Type ***)(v242 + 32), v234, 0);
                      LODWORD(__src) = 42;
                      unint64_t v228 = sub_1CC0F6340(v227, &__src, (llvm::ConstantInt ****)this);
                      if (v228)
                      {
                        if (llvm::ScalarEvolution::isKnownPredicate(this, __src, v222, v228)) {
                          break;
                        }
                      }
                    }
                  }
LABEL_306:
                  if (v258 != v260) {
                    free(v258);
                  }
                  uint64_t v213 = v238 + 1;
                  uint64_t v212 = v218;
                  if (v238 == 3)
                  {
                    char v230 = 0;
                    goto LABEL_321;
                  }
                }
                if (v258 != v260) {
                  free(v258);
                }
                char v230 = 1;
LABEL_321:
                if (v230)
                {
                  llvm::ScalarEvolution::setNoWrapFlags((int32x2_t *)this, (uint64_t)a2, 4);
                  unsigned int v231 = a4 + 1;
                  uint64_t v232 = sub_1CC0EB218((uint64_t)a2, (llvm::Type *)a3, this, (int)a4 + 1);
                  uint64_t SignExtendExpr = llvm::ScalarEvolution::getSignExtendExpr(this, v244, (llvm::Type *)a3, v231);
                  uint64_t v107 = *((_WORD *)a2 + 14) & 7;
                  unint64_t v104 = this;
                  uint64_t v105 = v232;
LABEL_224:
                  char v106 = v243;
                  goto LABEL_225;
                }
              }
              a2 = (llvm::detail::IEEEFloat **)v251;
LABEL_236:
              uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(this, a2, 1, 0);
              llvm::ConstantRange::getSignedMin(RangeRef, (uint64_t)&__src);
              unsigned int v175 = v263 - 1;
              if (v263 >= 0x41) {
                p_src = (void **)((char *)__src + 8 * (v175 >> 6));
              }
              else {
                p_src = &__src;
              }
              unint64_t v177 = (unint64_t)*p_src;
              if (v263 >= 0x41 && __src) {
                MEMORY[0x1D25D9CB0]();
              }
              if ((v177 >> v175))
              {
                uint64_t v178 = *((void *)this + 104)
                     + 8
                     * ((*((_DWORD *)this + 210) - 1) & sub_1CC13A6B8(__s1, (uint64_t)__s1 + 4 * v256));
                uint64_t AddExpr = *(void *)v178;
                __src = &v264;
                uint64_t v263 = 0x2000000000;
                if (AddExpr) {
                  BOOL v179 = (AddExpr & 1) == 0;
                }
                else {
                  BOOL v179 = 0;
                }
                if (v179)
                {
                  uint64_t v180 = v256;
                  int v181 = __s1;
                  size_t v182 = 4 * v256;
                  while (*(void *)(AddExpr + 16) != v180 || memcmp(v181, *(const void **)(AddExpr + 8), v182))
                  {
                    LODWORD(v263) = 0;
                    uint64_t AddExpr = *(void *)AddExpr;
                    if (AddExpr) {
                      BOOL v183 = (AddExpr & 1) == 0;
                    }
                    else {
                      BOOL v183 = 0;
                    }
                    if (!v183) {
                      goto LABEL_255;
                    }
                  }
                }
                else
                {
LABEL_255:
                  *((void *)this + 118) += 48;
                  uint64_t v184 = *((void *)this + 108);
                  if (((v184 + 7) & 0xFFFFFFFFFFFFFFF8) - v184 + 48 > *((void *)this + 109) - v184)
                  {
                    unsigned int v208 = *((_DWORD *)this + 222) >> 7;
                    if (v208 >= 0x1E) {
                      LOBYTE(v208) = 30;
                    }
                    uint64_t v209 = 4096 << v208;
                    uint64_t AddExpr = (uint64_t)operator new(4096 << v208, (std::align_val_t)8uLL);
                    unsigned int v210 = *((_DWORD *)this + 222);
                    if (v210 >= *((_DWORD *)this + 223)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *(void *)(*((void *)this + 110) + 8 * v210) = AddExpr;
                    ++*((_DWORD *)this + 222);
                    *((void *)this + 109) = AddExpr + v209;
                  }
                  else
                  {
                    uint64_t AddExpr = (v184 + 7) & 0xFFFFFFFFFFFFFFF8;
                  }
                  *((void *)this + 108) = AddExpr + 48;
                  uint64_t v185 = sub_1CB906F34((uint64_t *)this + 108, 4 * v256, 2);
                  uint64_t v186 = v185;
                  if (v256)
                  {
                    unsigned int v187 = (int *)__s1;
                    uint64_t v188 = 4 * v256;
                    uint64_t v189 = (_DWORD *)v185;
                    do
                    {
                      int v190 = *v187++;
                      *v189++ = v190;
                      v188 -= 4;
                    }
                    while (v188);
                    uint64_t v191 = v256;
                  }
                  else
                  {
                    uint64_t v191 = 0;
                  }
                  unsigned int v192 = v251;
                  LODWORD(v263) = 16;
                  __src = (void *)1;
                  uint64_t v193 = *((unsigned __int16 *)v251 + 13);
                  DWORD2(v252) = 16;
                  *(void *)&long long v252 = v193;
                  llvm::APInt::uadd_sat((llvm::APInt *)&__src, (const llvm::APInt *)&v252, (uint64_t)&v258);
                  __int16 v194 = (__int16)v258;
                  if (v259 > 0x40)
                  {
                    uint64_t v195 = *(void *)v258;
                    MEMORY[0x1D25D9CB0]();
                    __int16 v194 = v195;
                  }
                  *(void *)uint64_t AddExpr = 0;
                  *(void *)(AddExpr + 8) = v186;
                  *(void *)(AddExpr + 16) = v191;
                  *(_WORD *)(AddExpr + 24) = 3;
                  *(_WORD *)(AddExpr + 26) = v194;
                  *(_WORD *)(AddExpr + 28) = 0;
                  *(void *)(AddExpr + 32) = v192;
                  *(void *)(AddExpr + 40) = a3;
                  unsigned int v196 = *((_DWORD *)this + 211) + 1;
                  int v197 = *((_DWORD *)this + 210);
                  if (v196 > 2 * v197)
                  {
                    llvm::FoldingSetBase::GrowBucketCount((uint64_t)v32, 2 * v197, (uint64_t)off_1F2607658);
                    __src = &v264;
                    uint64_t v263 = 0x2000000000;
                    uint64_t v178 = *((void *)this + 104)
                         + 8
                         * ((*((_DWORD *)this + 210) - 1) & sub_1CC13A6B8(*(void **)(AddExpr + 8), *(void *)(AddExpr + 8)+ 4 * *(void *)(AddExpr + 16)));
                    if (__src != &v264) {
                      free(__src);
                    }
                    unsigned int v196 = *((_DWORD *)this + 211) + 1;
                  }
                  *((_DWORD *)this + 211) = v196;
                  uint64_t v198 = *(void *)v178;
                  if (!*(void *)v178) {
                    uint64_t v198 = v178 | 1;
                  }
                  *(void *)uint64_t AddExpr = v198;
                  *(void *)uint64_t v178 = AddExpr;
                  __src = v192;
                  unint64_t v47 = (uint64_t *)&__src;
LABEL_58:
                  llvm::ScalarEvolution::registerUser((uint64_t)this, AddExpr, v47, 1);
                }
              }
              else
              {
                uint64_t v173 = llvm::ScalarEvolution::getZeroExtendExpr(this, v251, (llvm::Type *)a3, (int)a4 + 1);
LABEL_268:
                uint64_t AddExpr = v173;
              }
              goto LABEL_59;
            }
            unsigned int v154 = a4 + 1;
            uint64_t v155 = sub_1CC0EB218((uint64_t)a2, (llvm::Type *)a3, this, (int)a4 + 1);
            uint64_t SignExtendExpr = llvm::ScalarEvolution::getSignExtendExpr(this, v244, (llvm::Type *)a3, v154);
            uint64_t v107 = *((_WORD *)a2 + 14) & 7;
            unint64_t v104 = this;
            uint64_t v105 = v155;
            char v106 = v93;
LABEL_225:
            uint64_t v173 = llvm::ScalarEvolution::getAddRecExpr(v104, v105, SignExtendExpr, v106, v107);
            goto LABEL_268;
        }
      }
    }
    if ((*((_WORD *)a2 + 14) & 4) != 0)
    {
      __src = &v264;
      uint64_t v263 = 0x400000000;
      uint64_t v72 = a2[5];
      uint64_t v73 = (a4 + 1);
      if (v72)
      {
        unsigned int v74 = (const llvm::SCEV **)a2[4];
        uint64_t v75 = 8 * (void)v72;
        do
        {
          uint64_t v76 = llvm::ScalarEvolution::getSignExtendExpr(this, *v74, (llvm::Type *)a3, v73);
          if (v263 >= (unint64_t)HIDWORD(v263)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)__src + v263) = v76;
          LODWORD(v263) = v263 + 1;
          ++v74;
          v75 -= 8;
        }
        while (v75);
      }
      uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(this, &__src, 4, v73);
      if (__src != &v264) {
        free(__src);
      }
      goto LABEL_59;
    }
    uint64_t v60 = *(void *)a2[4];
    if (!v60 || *(_WORD *)(v60 + 24)) {
      goto LABEL_236;
    }
    sub_1CC0EAEEC((llvm::APInt *)&__src, this, *(void *)(v60 + 32), (uint64_t)a2);
    unsigned int v62 = v263;
    unsigned int v63 = __src;
    if (v263 >= 0x41)
    {
      int v64 = 0;
      int64_t v65 = ((unint64_t)v263 + 63) >> 6;
      do
      {
        BOOL v66 = v65-- < 1;
        if (v66) {
          break;
        }
        unint64_t v67 = *((void *)__src + v65);
        v64 += __clz(v67);
      }
      while (!v67);
      int v68 = v263 | 0xFFFFFFC0;
      if ((v263 & 0x3F) == 0) {
        int v68 = 0;
      }
      if ((v263 - v64 - v68) > 0x40) {
        goto LABEL_97;
      }
      unsigned int v63 = *(void **)__src;
    }
    if (!v63)
    {
      char v83 = 0;
LABEL_119:
      if (v62 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      if (v83) {
        goto LABEL_59;
      }
      a2 = (llvm::detail::IEEEFloat **)v251;
      int v48 = *((unsigned __int16 *)v251 + 12);
      goto LABEL_124;
    }
LABEL_97:
    unsigned int v69 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&__src, v61);
    __int16 v70 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(this, v69);
    uint64_t v71 = llvm::ScalarEvolution::getSignExtendExpr(this, v70, (llvm::Type *)a3, a4);
    unsigned int v246 = v263;
    if (v263 > 0x40) {
      operator new[]();
    }
    unint64_t v77 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v263;
    if (!v263) {
      unint64_t v77 = 0;
    }
    BOOL v245 = (void *)(v77 & ~(unint64_t)__src);
    llvm::APInt::operator++((uint64_t)&v245);
    LODWORD(v259) = v246;
    unint64_t v258 = v245;
    unsigned int v246 = 0;
    uint64_t v79 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&v258, v78);
    unint64_t v80 = llvm::ScalarEvolution::getConstant(this, v79);
    uint64_t v81 = (const llvm::SCEV *)sub_1CBFD7D6C(this, v80, a2, 0, a4);
    if (v259 >= 0x41 && v258) {
      MEMORY[0x1D25D9CB0](v258, 0x1000C8000313F17);
    }
    if (v246 >= 0x41 && v245) {
      MEMORY[0x1D25D9CB0](v245, 0x1000C8000313F17);
    }
    uint64_t v82 = llvm::ScalarEvolution::getSignExtendExpr(this, v81, (llvm::Type *)a3, (int)a4 + 1);
    uint64_t AddExpr = sub_1CBFD7D6C(this, v71, v82, 6, (a4 + 1));
    char v83 = 1;
    unsigned int v62 = v263;
    goto LABEL_119;
  }
  uint64_t v49 = a2[4];
  uint64_t v50 = llvm::ScalarEvolution::getRangeRef(this, v49, 1, 0);
  LODWORD(v263) = *(_DWORD *)(v50 + 8);
  if (v263 > 0x40) {
    operator new[]();
  }
  __src = *(void **)v50;
  unsigned int v265 = *(_DWORD *)(v50 + 24);
  if (v265 > 0x40) {
    operator new[]();
  }
  uint64_t v264 = *(void *)(v50 + 16);
  uint64_t v51 = (uint64_t)a2[5];
  unsigned int v52 = *(_DWORD *)(v51 + 8);
  uint64_t v53 = *(void *)(*(void *)this + 40);
  if (v52 == 15)
  {
    if ((v52 & 0xFE) == 0x12) {
      unsigned int v52 = *(_DWORD *)(**(void **)(v51 + 16) + 8);
    }
    uint64_t v114 = *(void *)(v53 + 504);
    if (v52 < 0x100) {
      goto LABEL_170;
    }
    unsigned int v115 = v52 >> 8;
    unint64_t v116 = *(unsigned int *)(v53 + 512);
    uint64_t v117 = *(void *)(v53 + 504);
    if (v116)
    {
      uint64_t v117 = v114;
      unint64_t v118 = v116;
      do
      {
        unint64_t v119 = v118 >> 1;
        uint64_t v120 = v117 + 16 * (v118 >> 1);
        unsigned int v121 = *(_DWORD *)(v120 + 8);
        uint64_t v122 = v120 + 16;
        v118 += ~(v118 >> 1);
        if (v121 < v115) {
          uint64_t v117 = v122;
        }
        else {
          unint64_t v118 = v119;
        }
      }
      while (v118);
    }
    if (v117 == v114 + 16 * v116 || *(_DWORD *)(v117 + 8) != v115) {
LABEL_170:
    }
      uint64_t v117 = v114;
    unsigned int v55 = *(_DWORD *)(v117 + 12);
  }
  else
  {
    unsigned int v55 = sub_1CB83544C(v53 + 272, v51);
    if (v54 == 1) {
  }
    }
  unsigned int v56 = *((_DWORD *)a3 + 2);
  uint64_t v57 = *(void *)(*(void *)this + 40);
  if (v56 == 15)
  {
    if ((v56 & 0xFE) == 0x12) {
      unsigned int v56 = *(_DWORD *)(*a3[2] + 8);
    }
    uint64_t v123 = *(void *)(v57 + 504);
    if (v56 < 0x100) {
      goto LABEL_183;
    }
    unsigned int v124 = v56 >> 8;
    unint64_t v125 = *(unsigned int *)(v57 + 512);
    uint64_t v126 = *(void *)(v57 + 504);
    if (v125)
    {
      uint64_t v126 = v123;
      unint64_t v127 = v125;
      do
      {
        unint64_t v128 = v127 >> 1;
        uint64_t v129 = v126 + 16 * (v127 >> 1);
        unsigned int v130 = *(_DWORD *)(v129 + 8);
        uint64_t v131 = v129 + 16;
        v127 += ~(v127 >> 1);
        if (v130 < v124) {
          uint64_t v126 = v131;
        }
        else {
          unint64_t v127 = v128;
        }
      }
      while (v127);
    }
    if (v126 == v123 + 16 * v125 || *(_DWORD *)(v126 + 8) != v124) {
LABEL_183:
    }
      uint64_t v126 = v123;
    uint64_t AddExpr = *(unsigned int *)(v126 + 12);
  }
  else
  {
    uint64_t AddExpr = sub_1CB83544C(v57 + 272, (uint64_t)a3);
    if (v58 == 1) {
  }
    }
  llvm::ConstantRange::truncate((uint64_t)&__src, v55, (uint64_t)&v252);
  llvm::ConstantRange::signExtend((llvm::ConstantRange *)&v252, AddExpr, (uint64_t)&v258);
  llvm::ConstantRange::sextOrTrunc((unint64_t *)&__src, AddExpr, (uint64_t)&v247);
  BOOL v59 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v258, (const llvm::ConstantRange *)&v247);
  if (v250 >= 0x41 && v249) {
    MEMORY[0x1D25D9CB0](v249, 0x1000C8000313F17);
  }
  if (v248 >= 0x41 && v247) {
    MEMORY[0x1D25D9CB0](v247, 0x1000C8000313F17);
  }
  if (*(_DWORD *)&v260[8] >= 0x41u && *(void *)v260) {
    MEMORY[0x1D25D9CB0](*(void *)v260, 0x1000C8000313F17);
  }
  if (v259 >= 0x41 && v258) {
    MEMORY[0x1D25D9CB0](v258, 0x1000C8000313F17);
  }
  if (v254 >= 0x41 && v253) {
    MEMORY[0x1D25D9CB0](v253, 0x1000C8000313F17);
  }
  if (DWORD2(v252) >= 0x41 && (void)v252) {
    MEMORY[0x1D25D9CB0](v252, 0x1000C8000313F17);
  }
  if (v59) {
    uint64_t AddExpr = (uint64_t)llvm::ScalarEvolution::getTruncateOrSignExtend(this, v49, (llvm::Type *)a3, a4);
  }
  if (v265 >= 0x41 && v264) {
    MEMORY[0x1D25D9CB0](v264, 0x1000C8000313F17);
  }
  if (v263 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  if (!v59)
  {
    a2 = (llvm::detail::IEEEFloat **)v251;
    int v48 = *((unsigned __int16 *)v251 + 12);
    goto LABEL_84;
  }
LABEL_59:
  if (__s1 != v257) {
    free(__s1);
  }
  return AddExpr;
}

uint64_t llvm::ScalarEvolution::proveNoUnsignedWrapViaInduction(llvm::ScalarEvolution *this, const llvm::SCEVAddRecExpr *a2)
{
  v77[3] = *MEMORY[0x1E4F143B8];
  __int16 v2 = *((_WORD *)a2 + 14);
  uint64_t v3 = v2 & 7;
  if ((v2 & 2) != 0 || *((void *)a2 + 5) != 2) {
    return v3;
  }
  uint64_t v6 = *((void *)this + 127);
  uint64_t v7 = *((unsigned int *)this + 257);
  if (v6 == *((void *)this + 126))
  {
    if (v7)
    {
      unsigned int v8 = 0;
      uint64_t v9 = 8 * v7;
      uint64_t v10 = (void *)*((void *)this + 127);
      while ((const llvm::SCEVAddRecExpr *)*v10 != a2)
      {
        if (*v10 == -2) {
          unsigned int v8 = v10;
        }
        ++v10;
        v9 -= 8;
        if (!v9)
        {
          if (!v8) {
            goto LABEL_11;
          }
          *unsigned int v8 = a2;
          --*((_DWORD *)this + 258);
          goto LABEL_13;
        }
      }
      return v3;
    }
LABEL_11:
    unsigned int v11 = *((_DWORD *)this + 256);
    if (v7 < v11)
    {
      *((_DWORD *)this + 257) = v7 + 1;
      *(void *)(v6 + 8 * v7) = a2;
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 256);
  }
  if (3 * v11 <= 4 * ((int)v7 - *((_DWORD *)this + 258)))
  {
    if (v11 >= 0x40) {
      v11 *= 2;
    }
    else {
      unsigned int v11 = 128;
    }
  }
  else if (v11 - v7 >= v11 >> 3)
  {
    goto LABEL_47;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::ScalarEvolution *)((char *)this + 1008), v11);
  unsigned int v11 = *((_DWORD *)this + 256);
  uint64_t v6 = *((void *)this + 127);
LABEL_47:
  unsigned int v40 = v11 - 1;
  unsigned int v41 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  __int16 v42 = (const llvm::SCEVAddRecExpr **)(v6 + 8 * v41);
  uint64_t v43 = *v42;
  if (*v42 != (const llvm::SCEVAddRecExpr *)-1)
  {
    unsigned int v44 = 0;
    int v45 = 1;
    while (v43 != a2)
    {
      if (v44) {
        BOOL v46 = 0;
      }
      else {
        BOOL v46 = v43 == (const llvm::SCEVAddRecExpr *)-2;
      }
      if (v46) {
        unsigned int v44 = v42;
      }
      unsigned int v47 = v41 + v45++;
      unsigned int v41 = v47 & v40;
      __int16 v42 = (const llvm::SCEVAddRecExpr **)(v6 + 8 * (v47 & v40));
      uint64_t v43 = *v42;
      if (*v42 == (const llvm::SCEVAddRecExpr *)-1) {
        goto LABEL_61;
      }
    }
    return v3;
  }
  unsigned int v44 = 0;
LABEL_61:
  if (v44) {
    int v48 = v44;
  }
  else {
    int v48 = v42;
  }
  if (*v48 != a2)
  {
    if (*v48 == (const llvm::SCEVAddRecExpr *)-2) {
      --*((_DWORD *)this + 258);
    }
    else {
      ++*((_DWORD *)this + 257);
    }
    *int v48 = a2;
    uint64_t v49 = *((void *)a2 + 5);
    if (v49 != 2)
    {
      uint64_t v50 = *((void *)a2 + 4);
      uint64_t v75 = v77;
      uint64_t v76 = 0x300000000;
      sub_1CD47792C((unsigned int *)&v75, (unsigned char *)(v50 + 8), (unsigned char *)(v50 + 8 * v49));
      uint64_t v13 = sub_1CD478318(this, (uint64_t)&v75, *((const llvm::Loop **)a2 + 6), 0);
      if (v75 != v77) {
        free(v75);
      }
      unint64_t v12 = (uint64_t *)*((void *)a2 + 4);
LABEL_14:
      while (2)
      {
        uint64_t v14 = *v12;
        switch(*(_WORD *)(v14 + 24))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            unint64_t v15 = (uint64_t *)(v14 + 40);
            break;
          case 4:
            unint64_t v15 = (uint64_t *)(v14 + 48);
            break;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            unint64_t v12 = *(uint64_t **)(v14 + 32);
            continue;
          case 6:
            unint64_t v12 = (uint64_t *)(v14 + 40);
            continue;
          case 0xE:
            unint64_t v15 = *(uint64_t **)(v14 - 8);
            break;
          default:
            unint64_t v15 = *(uint64_t **)(v14 + 32);
            break;
        }
        break;
      }
      uint64_t v16 = *v15;
      unsigned int v17 = *(_DWORD *)(*v15 + 8);
      uint64_t v18 = *(void *)(*(void *)this + 40);
      if (v17 == 15)
      {
        if ((v17 & 0xFE) == 0x12) {
          unsigned int v17 = *(_DWORD *)(**(void **)(v16 + 16) + 8);
        }
        uint64_t v52 = *(void *)(v18 + 504);
        if (v17 < 0x100) {
          goto LABEL_90;
        }
        unsigned int v53 = v17 >> 8;
        unint64_t v54 = *(unsigned int *)(v18 + 512);
        uint64_t v55 = *(void *)(v18 + 504);
        if (v54)
        {
          uint64_t v55 = v52;
          unint64_t v56 = v54;
          do
          {
            unint64_t v57 = v56 >> 1;
            uint64_t v58 = v55 + 16 * (v56 >> 1);
            unsigned int v59 = *(_DWORD *)(v58 + 8);
            uint64_t v60 = v58 + 16;
            v56 += ~(v56 >> 1);
            if (v59 < v53) {
              uint64_t v55 = v60;
            }
            else {
              unint64_t v56 = v57;
            }
          }
          while (v56);
        }
        if (v55 == v52 + 16 * v54 || *(_DWORD *)(v55 + 8) != v53) {
LABEL_90:
        }
          uint64_t v55 = v52;
        unsigned int v20 = *(_DWORD *)(v55 + 12);
      }
      else
      {
        unsigned int v20 = sub_1CB83544C(v18 + 272, v16);
        if (v19 == 1) {
      }
        }
      uint64_t v21 = (const llvm::Loop *)*((void *)a2 + 6);
      uint64_t BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(this, v21);
      unsigned int v23 = BackedgeTakenInfo[13];
      if (v23)
      {
        unsigned int v24 = *((_DWORD *)BackedgeTakenInfo + 2);
        if (!v24) {
          goto LABEL_21;
        }
        uint64_t v38 = (_DWORD *)((char *)*BackedgeTakenInfo + 48);
        uint64_t v39 = 88 * v24;
        while (*(v38 - 1) == *v38)
        {
          v38 += 22;
          v39 -= 88;
          if (!v39) {
            goto LABEL_21;
          }
        }
      }
      unsigned int v23 = (const llvm::Loop *)*((void *)this + 6);
LABEL_21:
      if (*((_WORD *)v23 + 12) != 15 || *((unsigned char *)this + 8)) {
        goto LABEL_22;
      }
      uint64_t v51 = *((void *)this + 3);
      if (!*(unsigned char *)(v51 + 184)) {
        llvm::AssumptionCache::scanFunction(*((llvm::AssumptionCache **)this + 3));
      }
      if (*(_DWORD *)(v51 + 24))
      {
LABEL_22:
        uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef((uint64_t)this, v13, 1, 0);
        llvm::ConstantRange::getSignedMin(RangeRef, (uint64_t)&v75);
        int v26 = v76;
        unsigned int v27 = v76 - 1;
        if (v76 > 0x40)
        {
          unint64_t v61 = v75;
          if ((*((void *)v75 + (v27 >> 6)) >> v27))
          {
            MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
            return v3;
          }
          int v62 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v75);
          MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
          if (v62 == v26) {
            return v3;
          }
        }
        else if ((((unint64_t)v75 >> v27) & 1) != 0 || !v75)
        {
          return v3;
        }
        unsigned int v74 = v20;
        if (v20 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v73);
        }
        uint64_t v73 = 0;
        uint64_t v28 = (char **)llvm::ScalarEvolution::getRangeRef((uint64_t)this, v13, 0, 0);
        llvm::ConstantRange::getUnsignedMax(v28, (uint64_t)&v71);
        if (v72 > 0x40)
        {
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v71);
        }
        else
        {
          if (v72) {
            unint64_t v29 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v72;
          }
          else {
            unint64_t v29 = 0;
          }
          unint64_t v71 = v29 & ~v71;
        }
        llvm::APInt::operator++((uint64_t)&v71);
        unsigned int v31 = v72;
        if (v72 >= 0x41)
        {
          uint64_t v63 = 0;
          BOOL v64 = 0;
          unint64_t v65 = v71;
          uint64_t v32 = v73;
          unint64_t v66 = ((unint64_t)v72 + 63) >> 6;
          do
          {
            unint64_t v67 = *(void *)(v65 + v63);
            unint64_t v68 = *(void *)(v32 + v63) + v67;
            BOOL v69 = v68 < v67;
            BOOL v70 = v68 + 1 <= v67;
            if (v64)
            {
              ++v68;
              BOOL v64 = v70;
            }
            else
            {
              BOOL v64 = v69;
            }
            *(void *)(v65 + v63) = v68;
            v63 += 8;
          }
          while (8 * v66 != v63);
          *(void *)(v71 + 8 * (v66 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v31;
          unsigned int v31 = v72;
          uint64_t v34 = (void *)v71;
        }
        else
        {
          uint64_t v32 = v73;
          if (v72) {
            unint64_t v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v72;
          }
          else {
            unint64_t v33 = 0;
          }
          uint64_t v34 = (void *)(v33 & (v71 + v73));
          unint64_t v71 = (unint64_t)v34;
        }
        LODWORD(v76) = v31;
        uint64_t v75 = v34;
        unsigned int v72 = 0;
        uint64_t v35 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&v75, v30);
        unint64_t Constant = llvm::ScalarEvolution::getConstant(this, v35);
        if (v76 >= 0x41 && v75) {
          MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
        }
        if (v72 >= 0x41 && v71) {
          MEMORY[0x1D25D9CB0](v71, 0x1000C8000313F17);
        }
        if (v74 >= 0x41 && v32) {
          MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
        }
        if ((llvm::ScalarEvolution::isLoopBackedgeGuardedByCond((uint64_t)this, (uint64_t)v21, 36, (uint64_t)a2, Constant) & 1) != 0|| llvm::ScalarEvolution::isKnownOnEveryIteration(this, 36, (uint64_t)a2, Constant))
        {
          return v3 | 2;
        }
      }
      return v3;
    }
LABEL_13:
    unint64_t v12 = (uint64_t *)*((void *)a2 + 4);
    uint64_t v13 = v12[1];
    goto LABEL_14;
  }
  return v3;
}

unint64_t llvm::ScalarEvolution::isKnownNegative(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  uint64_t RangeRef = (_DWORD *)llvm::ScalarEvolution::getRangeRef(this, a2, 1, 0);
  llvm::ConstantRange::getSignedMax(RangeRef, (uint64_t)&v10);
  unsigned int v3 = v11 - 1;
  if (v11 >= 0x41) {
    __int16 v4 = (unint64_t *)(v10 + 8 * (v3 >> 6));
  }
  else {
    __int16 v4 = (unint64_t *)&v10;
  }
  unint64_t v5 = *v4;
  if (v11 >= 0x41 && v10 != 0)
  {
    unint64_t v8 = v5;
    char v9 = v11 - 1;
    MEMORY[0x1D25D9CB0]();
    unint64_t v5 = v8;
    LOBYTE(v3) = v9;
  }
  return (v5 >> v3) & 1;
}

uint64_t llvm::ScalarEvolution::isLoopBackedgeGuardedByCond(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2) {
    return 1;
  }
  if ((llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, a3, a4, a5) & 1) == 0) {
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
  }
  return 1;
}

uint64_t llvm::ScalarEvolution::isKnownOnEveryIteration(llvm::ScalarEvolution *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 + 48);
  uint64_t result = llvm::ScalarEvolution::isLoopEntryGuardedByCond((uint64_t)a1, v8, a2, **(void **)(a3 + 32), a4);
  if (result)
  {
    uint64_t PostIncExpr = llvm::SCEVAddRecExpr::getPostIncExpr((llvm::SCEVAddRecExpr *)a3, a1);
    return llvm::ScalarEvolution::isLoopBackedgeGuardedByCond(a1, v8, a2, PostIncExpr, a4);
  }
  return result;
}

uint64_t sub_1CC0E851C(llvm::APInt *a1, llvm::ScalarEvolution *this, uint64_t a3, llvm::SCEV *a4)
{
  uint64_t v4 = a3;
  unsigned int v6 = *(_DWORD *)(a3 + 8);
  uint64_t result = llvm::ScalarEvolution::GetMinTrailingZeros(this, a4);
  if (result)
  {
    if (result >= v6)
    {
      unsigned int v11 = *(_DWORD *)(v4 + 8);
      *((_DWORD *)a1 + 2) = v11;
      if (v11 > 0x40) {
        operator new[]();
      }
      *(void *)a1 = *(void *)v4;
    }
    else
    {
      unsigned int v8 = *(_DWORD *)(v4 + 8);
      if (result > 0x40)
      {
        if (v8 != result) {
          operator new[]();
        }
        uint64_t result = sub_1CD0463BC((uint64_t)&__src, v4);
      }
      else
      {
        if (v8 >= 0x41) {
          uint64_t v4 = *(void *)v4;
        }
        uint64_t v9 = *(void *)v4;
        unsigned int v13 = result;
        unint64_t __src = v9 & (0xFFFFFFFFFFFFFFFFLL >> -(char)result);
      }
      if (v6 > 0x40)
      {
        if (v13 != v6) {
          operator new[]();
        }
        uint64_t result = sub_1CD0463BC((uint64_t)a1, (uint64_t)&__src);
      }
      else
      {
        unint64_t v10 = __src;
        *((_DWORD *)a1 + 2) = v6;
        *(void *)a1 = v10 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v6);
      }
      if (v13 >= 0x41)
      {
        uint64_t result = __src;
        if (__src) {
          return MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
      }
    }
  }
  else
  {
    *((_DWORD *)a1 + 2) = v6;
    if (v6 > 0x40)
    {
      llvm::APInt::initSlowCase(a1);
    }
    *(void *)a1 = 0;
  }
  return result;
}

uint64_t llvm::ScalarEvolution::matchURem(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV **a3, const llvm::SCEV **a4)
{
  unsigned int v6 = a2;
  int v8 = *((unsigned __int16 *)a2 + 12);
  if (a2 && v8 == 2)
  {
    uint64_t v9 = *((void *)a2 + 4);
    if (v9) {
      BOOL v10 = *(unsigned __int16 *)(v9 + 24) == 1;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10) {
      return 0;
    }
    uint64_t v11 = *(void *)(v9 + 32);
    *a3 = (const llvm::SCEV *)v11;
    while (2)
    {
      switch(*(_WORD *)(v11 + 24))
      {
        case 1:
        case 2:
        case 3:
        case 0xD:
          uint64_t v21 = (uint64_t *)(v11 + 40);
          goto LABEL_30;
        case 4:
          uint64_t v21 = (uint64_t *)(v11 + 48);
          goto LABEL_30;
        case 5:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          unint64_t v12 = *(uint64_t **)(v11 + 32);
          goto LABEL_11;
        case 6:
          unint64_t v12 = (uint64_t *)(v11 + 40);
LABEL_11:
          uint64_t v11 = *v12;
          continue;
        case 0xE:
          uint64_t v21 = *(uint64_t **)(v11 - 8);
          goto LABEL_30;
        default:
          uint64_t v21 = *(uint64_t **)(v11 + 32);
LABEL_30:
          uint64_t v22 = *v21;
          unsigned int v23 = *(_DWORD *)(*v21 + 8);
          uint64_t v24 = *(void *)(*(void *)this + 40);
          if (v23 == 15)
          {
            if ((v23 & 0xFE) == 0x12) {
              unsigned int v23 = *(_DWORD *)(**(void **)(v22 + 16) + 8);
            }
            uint64_t v64 = *(void *)(v24 + 504);
            if (v23 < 0x100) {
              goto LABEL_121;
            }
            unsigned int v65 = v23 >> 8;
            unint64_t v66 = *(unsigned int *)(v24 + 512);
            uint64_t v67 = *(void *)(v24 + 504);
            if (v66)
            {
              uint64_t v67 = v64;
              unint64_t v68 = v66;
              do
              {
                unint64_t v69 = v68 >> 1;
                uint64_t v70 = v67 + 16 * (v68 >> 1);
                unsigned int v71 = *(_DWORD *)(v70 + 8);
                uint64_t v72 = v70 + 16;
                v68 += ~(v68 >> 1);
                if (v71 < v65) {
                  uint64_t v67 = v72;
                }
                else {
                  unint64_t v68 = v69;
                }
              }
              while (v68);
            }
            if (v67 == v64 + 16 * v66 || *(_DWORD *)(v67 + 8) != v65) {
LABEL_121:
            }
              uint64_t v67 = v64;
            unint64_t v26 = *(unsigned int *)(v67 + 12);
          }
          else
          {
            unint64_t v26 = sub_1CB83544C(v24 + 272, v22);
            if (v25 == 1) {
          }
            }
          unsigned int v27 = v6;
          while (2)
          {
            switch(*((_WORD *)v27 + 12))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                unint64_t v29 = (uint64_t *)((char *)v27 + 40);
                goto LABEL_41;
              case 4:
                unint64_t v29 = (uint64_t *)((char *)v27 + 48);
                goto LABEL_41;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                uint64_t v28 = (const llvm::SCEV **)*((void *)v27 + 4);
                goto LABEL_36;
              case 6:
                uint64_t v28 = (const llvm::SCEV **)((char *)v27 + 40);
LABEL_36:
                unsigned int v27 = *v28;
                continue;
              case 0xE:
                unint64_t v29 = (uint64_t *)*((void *)v27 - 1);
                goto LABEL_41;
              default:
                unint64_t v29 = (uint64_t *)*((void *)v27 + 4);
LABEL_41:
                uint64_t v30 = *v29;
                unsigned int v31 = *(_DWORD *)(*v29 + 8);
                uint64_t v32 = *(void *)(*(void *)this + 40);
                if (v31 == 15)
                {
                  if ((v31 & 0xFE) == 0x12) {
                    unsigned int v31 = *(_DWORD *)(**(void **)(v30 + 16) + 8);
                  }
                  uint64_t v73 = *(void *)(v32 + 504);
                  if (v31 < 0x100) {
                    goto LABEL_134;
                  }
                  unsigned int v74 = v31 >> 8;
                  unint64_t v75 = *(unsigned int *)(v32 + 512);
                  uint64_t v76 = *(void *)(v32 + 504);
                  if (v75)
                  {
                    uint64_t v76 = v73;
                    unint64_t v77 = v75;
                    do
                    {
                      unint64_t v78 = v77 >> 1;
                      uint64_t v79 = v76 + 16 * (v77 >> 1);
                      unsigned int v80 = *(_DWORD *)(v79 + 8);
                      uint64_t v81 = v79 + 16;
                      v77 += ~(v77 >> 1);
                      if (v80 < v74) {
                        uint64_t v76 = v81;
                      }
                      else {
                        unint64_t v77 = v78;
                      }
                    }
                    while (v77);
                  }
                  if (v76 == v73 + 16 * v75 || *(_DWORD *)(v76 + 8) != v74) {
LABEL_134:
                  }
                    uint64_t v76 = v73;
                  unint64_t v33 = *(unsigned int *)(v76 + 12);
                }
                else
                {
                  unint64_t v33 = sub_1CB83544C(v32 + 272, v30);
                  if (v34 == 1)
                  {
                    unint64_t v100 = v33;
                    unint64_t v33 = v100;
                  }
                }
                if (v26 > v33) {
                  return 0;
                }
                uint64_t v35 = *a3;
                while (2)
                {
                  switch(*((_WORD *)v35 + 12))
                  {
                    case 1:
                    case 2:
                    case 3:
                    case 0xD:
                      uint64_t v37 = (uint64_t *)((char *)v35 + 40);
                      goto LABEL_55;
                    case 4:
                      uint64_t v37 = (uint64_t *)((char *)v35 + 48);
                      goto LABEL_55;
                    case 5:
                    case 7:
                    case 8:
                    case 9:
                    case 0xA:
                    case 0xB:
                    case 0xC:
                      unint64_t v36 = (const llvm::SCEV **)*((void *)v35 + 4);
                      goto LABEL_50;
                    case 6:
                      unint64_t v36 = (const llvm::SCEV **)((char *)v35 + 40);
LABEL_50:
                      uint64_t v35 = *v36;
                      continue;
                    case 0xE:
                      uint64_t v37 = (uint64_t *)*((void *)v35 - 1);
                      goto LABEL_55;
                    default:
                      uint64_t v37 = (uint64_t *)*((void *)v35 + 4);
LABEL_55:
                      uint64_t v38 = *v37;
                      uint64_t v39 = v6;
                      while (2)
                      {
                        switch(*((_WORD *)v39 + 12))
                        {
                          case 1:
                          case 2:
                          case 3:
                          case 0xD:
                            unsigned int v41 = (void *)((char *)v39 + 40);
                            goto LABEL_63;
                          case 4:
                            unsigned int v41 = (void *)((char *)v39 + 48);
                            goto LABEL_63;
                          case 5:
                          case 7:
                          case 8:
                          case 9:
                          case 0xA:
                          case 0xB:
                          case 0xC:
                            unsigned int v40 = (const llvm::SCEV **)*((void *)v39 + 4);
                            goto LABEL_58;
                          case 6:
                            unsigned int v40 = (const llvm::SCEV **)((char *)v39 + 40);
LABEL_58:
                            uint64_t v39 = *v40;
                            continue;
                          case 0xE:
                            unsigned int v41 = (void *)*((void *)v39 - 1);
                            goto LABEL_63;
                          default:
                            unsigned int v41 = (void *)*((void *)v39 + 4);
LABEL_63:
                            if (v38 != *v41)
                            {
                              __int16 v42 = v6;
                              while (2)
                              {
                                switch(*((_WORD *)v42 + 12))
                                {
                                  case 1:
                                  case 2:
                                  case 3:
                                  case 0xD:
                                    unsigned int v44 = (llvm::Type **)((char *)v42 + 40);
                                    goto LABEL_77;
                                  case 4:
                                    unsigned int v44 = (llvm::Type **)((char *)v42 + 48);
                                    goto LABEL_77;
                                  case 5:
                                  case 7:
                                  case 8:
                                  case 9:
                                  case 0xA:
                                  case 0xB:
                                  case 0xC:
                                    uint64_t v43 = (const llvm::SCEV **)*((void *)v42 + 4);
                                    goto LABEL_67;
                                  case 6:
                                    uint64_t v43 = (const llvm::SCEV **)((char *)v42 + 40);
LABEL_67:
                                    __int16 v42 = *v43;
                                    continue;
                                  case 0xE:
                                    unsigned int v44 = (llvm::Type **)*((void *)v42 - 1);
                                    goto LABEL_77;
                                  default:
                                    unsigned int v44 = (llvm::Type **)*((void *)v42 + 4);
LABEL_77:
                                    *a3 = (const llvm::SCEV *)llvm::ScalarEvolution::getZeroExtendExpr(this, *a3, *v44, 0);
                                    break;
                                }
                                break;
                              }
                            }
                            while (2)
                            {
                              switch(*((_WORD *)v6 + 12))
                              {
                                case 1:
                                case 2:
                                case 3:
                                case 0xD:
                                  unsigned int v47 = (uint64_t *)((char *)v6 + 40);
                                  goto LABEL_85;
                                case 4:
                                  unsigned int v47 = (uint64_t *)((char *)v6 + 48);
                                  goto LABEL_85;
                                case 5:
                                case 7:
                                case 8:
                                case 9:
                                case 0xA:
                                case 0xB:
                                case 0xC:
                                  BOOL v46 = (const llvm::SCEV **)*((void *)v6 + 4);
                                  goto LABEL_80;
                                case 6:
                                  BOOL v46 = (const llvm::SCEV **)((char *)v6 + 40);
LABEL_80:
                                  unsigned int v6 = *v46;
                                  continue;
                                case 0xE:
                                  unsigned int v47 = (uint64_t *)*((void *)v6 - 1);
                                  goto LABEL_85;
                                default:
                                  unsigned int v47 = (uint64_t *)*((void *)v6 + 4);
LABEL_85:
                                  uint64_t v48 = *v47;
                                  unsigned int v49 = *(_DWORD *)(*v47 + 8);
                                  uint64_t v50 = *(void *)(*(void *)this + 40);
                                  if (v49 == 15)
                                  {
                                    if ((v49 & 0xFE) == 0x12) {
                                      unsigned int v49 = *(_DWORD *)(**(void **)(v48 + 16) + 8);
                                    }
                                    uint64_t v82 = *(void *)(v50 + 504);
                                    if (v49 < 0x100) {
                                      goto LABEL_150;
                                    }
                                    unsigned int v83 = v49 >> 8;
                                    unint64_t v84 = *(unsigned int *)(v50 + 512);
                                    uint64_t v85 = *(void *)(v50 + 504);
                                    if (v84)
                                    {
                                      uint64_t v85 = v82;
                                      unint64_t v86 = v84;
                                      do
                                      {
                                        unint64_t v87 = v86 >> 1;
                                        uint64_t v88 = v85 + 16 * (v86 >> 1);
                                        unsigned int v89 = *(_DWORD *)(v88 + 8);
                                        uint64_t v90 = v88 + 16;
                                        v86 += ~(v86 >> 1);
                                        if (v89 < v83) {
                                          uint64_t v85 = v90;
                                        }
                                        else {
                                          unint64_t v86 = v87;
                                        }
                                      }
                                      while (v86);
                                    }
                                    if (v85 == v82 + 16 * v84 || *(_DWORD *)(v85 + 8) != v83) {
LABEL_150:
                                    }
                                      uint64_t v85 = v82;
                                    unsigned int v52 = *(_DWORD *)(v85 + 12);
                                  }
                                  else
                                  {
                                    unsigned int v52 = sub_1CB83544C(v50 + 272, v48);
                                    if (v51 == 1) {
                                  }
                                    }
                                  unsigned int v102 = v52;
                                  if (v52 > 0x40) {
                                    llvm::APInt::initSlowCase((llvm::APInt *)&__src);
                                  }
                                  if (v52) {
                                    unint64_t v53 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v52;
                                  }
                                  else {
                                    LOBYTE(v53) = 0;
                                  }
                                  unint64_t __src = (void *)(v53 & 1);
                                  uint64_t v54 = *(void *)(v9 + 40);
                                  unsigned int v55 = *(_DWORD *)(v54 + 8);
                                  uint64_t v56 = *(void *)(*(void *)this + 40);
                                  if (v55 == 15)
                                  {
                                    if ((v55 & 0xFE) == 0x12) {
                                      unsigned int v55 = *(_DWORD *)(**(void **)(v54 + 16) + 8);
                                    }
                                    uint64_t v91 = *(void *)(v56 + 504);
                                    if (v55 < 0x100) {
                                      goto LABEL_163;
                                    }
                                    unsigned int v92 = v55 >> 8;
                                    unint64_t v93 = *(unsigned int *)(v56 + 512);
                                    uint64_t v94 = *(void *)(v56 + 504);
                                    if (v93)
                                    {
                                      uint64_t v94 = v91;
                                      unint64_t v95 = v93;
                                      do
                                      {
                                        unint64_t v96 = v95 >> 1;
                                        uint64_t v97 = v94 + 16 * (v95 >> 1);
                                        unsigned int v98 = *(_DWORD *)(v97 + 8);
                                        uint64_t v99 = v97 + 16;
                                        v95 += ~(v95 >> 1);
                                        if (v98 < v92) {
                                          uint64_t v94 = v99;
                                        }
                                        else {
                                          unint64_t v95 = v96;
                                        }
                                      }
                                      while (v95);
                                    }
                                    if (v94 == v91 + 16 * v93 || *(_DWORD *)(v94 + 8) != v92) {
LABEL_163:
                                    }
                                      uint64_t v94 = v91;
                                    int v58 = *(_DWORD *)(v94 + 12);
                                  }
                                  else
                                  {
                                    int v58 = sub_1CB83544C(v56 + 272, v54);
                                    if (v57 == 1) {
                                  }
                                    }
                                  unsigned int v59 = v102;
                                  unsigned int v104 = v102;
                                  if (v102 > 0x40) {
                                    operator new[]();
                                  }
                                  uint64_t v60 = __src;
                                  uint64_t v61 = (void)__src << v58;
                                  if (v102 == v58) {
                                    uint64_t v61 = 0;
                                  }
                                  unint64_t v62 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v102;
                                  if (!v102) {
                                    unint64_t v62 = 0;
                                  }
                                  unint64_t v103 = v62 & v61;
                                  uint64_t v63 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&v103, (const llvm::APInt *)a3);
                                  *a4 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(this, v63);
                                  if (v104 >= 0x41 && v103) {
                                    MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
                                  }
                                  if (v59 >= 0x41)
                                  {
                                    if (v60) {
                                      MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
                                    }
                                  }
                                  break;
                              }
                              break;
                            }
                            break;
                        }
                        break;
                      }
                      break;
                  }
                  break;
                }
                break;
            }
            break;
          }
          break;
      }
      return 1;
    }
  }
  uint64_t result = 0;
  if (a2 && v8 == 4)
  {
    if (*((void *)a2 + 5) != 2) {
      return 0;
    }
    uint64_t v14 = (void *)*((void *)a2 + 4);
    uint64_t v15 = *v14;
    if (!*v14 || *(_WORD *)(*v14 + 24) != 5) {
      return 0;
    }
    unsigned int v17 = (const llvm::SCEV *)v14[1];
    uint64_t v18 = *(void *)(v15 + 40);
    if (v18 != 2)
    {
      if (v18 != 3) {
        return 0;
      }
      unsigned int v19 = *(void **)(v15 + 32);
      if (*(_WORD *)(*v19 + 24)) {
        return 0;
      }
      NegativeSCEV = (const llvm::SCEV *)v19[1];
      if ((const llvm::SCEV *)llvm::ScalarEvolution::getURemExpr(this, v17, NegativeSCEV) != a2)
      {
        NegativeSCEV = *(const llvm::SCEV **)(*(void *)(v15 + 32) + 16);
        if ((const llvm::SCEV *)llvm::ScalarEvolution::getURemExpr(this, v17, NegativeSCEV) != v6) {
          return 0;
        }
      }
      goto LABEL_75;
    }
    NegativeSCEV = *(const llvm::SCEV **)(*(void *)(v15 + 32) + 8);
    if ((const llvm::SCEV *)llvm::ScalarEvolution::getURemExpr(this, v17, NegativeSCEV) == a2
      || (NegativeSCEV = **(const llvm::SCEV ***)(v15 + 32),
          (const llvm::SCEV *)llvm::ScalarEvolution::getURemExpr(this, v17, NegativeSCEV) == v6)
      || (NegativeSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(this, *(void *)(*(void *)(v15 + 32) + 8), 0), (const llvm::SCEV *)llvm::ScalarEvolution::getURemExpr(this, v17, NegativeSCEV) == v6)|| (NegativeSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(this, **(void **)(v15 + 32), 0), URemExpr = llvm::ScalarEvolution::getURemExpr(this, v17, NegativeSCEV), uint64_t result = 0, (const llvm::SCEV *)URemExpr == v6))
    {
LABEL_75:
      *a3 = v17;
      *a4 = NegativeSCEV;
      return 1;
    }
  }
  return result;
}

uint64_t llvm::ScalarEvolution::getURemExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV *a3)
{
  v48[2] = *MEMORY[0x1E4F143B8];
  if (!a3 || *((_WORD *)a3 + 12))
  {
LABEL_3:
    BOOL v46 = v48;
    v48[0] = llvm::ScalarEvolution::getUDivExpr(this, a2, (unint64_t)a3);
    v48[1] = a3;
    uint64_t v47 = 0x200000002;
    uint64_t MulExpr = (const llvm::APInt *)llvm::ScalarEvolution::getMulExpr(this, &v46, 2, 0);
    if (v46 != v48) {
      free(v46);
    }
    return llvm::ScalarEvolution::getMinusSCEV(this, a2, MulExpr, 2, 0);
  }
  uint64_t v8 = *((void *)a3 + 4);
  uint64_t v9 = (llvm::APInt *)(v8 + 24);
  uint64_t v10 = *(unsigned int *)(v8 + 32);
  if (v10 > 0x40)
  {
    unsigned int v44 = (unint64_t *)(v8 + 24);
    if (llvm::APInt::countLeadingZerosSlowCase(v9) != v10 - 1)
    {
      int v21 = 0;
      unint64_t v22 = (unint64_t)(v10 + 63) >> 6;
      unint64_t v11 = *v44;
      unsigned int v23 = (int8x8_t *)*v44;
      do
      {
        int8x8_t v24 = *v23++;
        uint8x8_t v25 = (uint8x8_t)vcnt_s8(v24);
        v25.i16[0] = vaddlv_u8(v25);
        v21 += v25.i32[0];
        --v22;
      }
      while (v22);
      uint64_t v9 = (llvm::APInt *)v44;
      if (v21 != 1) {
        goto LABEL_3;
      }
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v11 = *(void *)v9;
    if (*(void *)v9 != 1)
    {
      uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
      v12.i16[0] = vaddlv_u8(v12);
      if (v12.u32[0] != 1) {
        goto LABEL_3;
      }
LABEL_9:
      unsigned int v13 = a2;
      while (2)
      {
        switch(*((_WORD *)v13 + 12))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            uint64_t v14 = (llvm::Type **)((char *)v13 + 40);
            goto LABEL_12;
          case 4:
            uint64_t v14 = (llvm::Type **)((char *)v13 + 48);
            goto LABEL_12;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            unsigned int v20 = (const llvm::SCEV **)*((void *)v13 + 4);
            goto LABEL_20;
          case 6:
            unsigned int v20 = (const llvm::SCEV **)((char *)v13 + 40);
LABEL_20:
            unsigned int v13 = *v20;
            continue;
          case 0xE:
            uint64_t v14 = (llvm::Type **)*((void *)v13 - 1);
            goto LABEL_12;
          default:
            uint64_t v14 = (llvm::Type **)*((void *)v13 + 4);
LABEL_12:
            uint64_t v15 = *v14;
            uint64_t v16 = ***(llvm::IntegerType ****)this;
            if (v10 > 0x40)
            {
              int v45 = ***(llvm::IntegerType ****)this;
              int v17 = llvm::APInt::countLeadingZerosSlowCase(v9);
              uint64_t v16 = v45;
            }
            else
            {
              int v17 = v10 + __clz(v11) - 64;
            }
            uint64_t v18 = (llvm::Type *)llvm::IntegerType::get(v16, (llvm::LLVMContext *)(v10 + ~v17));
            uint64_t TruncateExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getTruncateExpr(this, a2, v18, 0);
            uint64_t result = llvm::ScalarEvolution::getZeroExtendExpr(this, TruncateExpr, v15, 0);
            break;
        }
        return result;
      }
    }
  }
  while (2)
  {
    switch(*((_WORD *)a2 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        unint64_t v26 = (char *)a2 + 40;
        goto LABEL_31;
      case 4:
        unint64_t v26 = (char *)a2 + 48;
        goto LABEL_31;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v43 = (const llvm::SCEV **)*((void *)a2 + 4);
        goto LABEL_55;
      case 6:
        uint64_t v43 = (const llvm::SCEV **)((char *)a2 + 40);
LABEL_55:
        a2 = *v43;
        continue;
      case 0xE:
        unint64_t v26 = (char *)*((void *)a2 - 1);
        goto LABEL_31;
      default:
        unint64_t v26 = (char *)*((void *)a2 + 4);
LABEL_31:
        unsigned int v27 = *(llvm::FixedVectorType **)v26;
        unsigned int v28 = *(_DWORD *)(*(void *)v26 + 8);
        if (v28 != 13)
        {
          uint64_t v29 = *(void *)(*(void *)this + 40);
          if ((v28 & 0xFE) == 0x12) {
            unsigned int v28 = *(_DWORD *)(**((void **)v27 + 2) + 8);
          }
          uint64_t v30 = *(void *)(v29 + 504);
          if (v28 < 0x100) {
            goto LABEL_43;
          }
          unsigned int v31 = v28 >> 8;
          unint64_t v32 = *(unsigned int *)(v29 + 512);
          uint64_t v33 = v30;
          if (v32)
          {
            uint64_t v33 = v30;
            unint64_t v34 = v32;
            do
            {
              unint64_t v35 = v34 >> 1;
              uint64_t v36 = v33 + 16 * (v34 >> 1);
              unsigned int v37 = *(_DWORD *)(v36 + 8);
              uint64_t v38 = v36 + 16;
              v34 += ~(v34 >> 1);
              if (v37 < v31) {
                uint64_t v33 = v38;
              }
              else {
                unint64_t v34 = v35;
              }
            }
            while (v34);
          }
          if (v33 == v30 + 16 * v32 || *(_DWORD *)(v33 + 8) != v31) {
LABEL_43:
          }
            uint64_t v33 = v30;
          uint64_t v39 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v27, (llvm::LLVMContext *)*(unsigned int *)(v33 + 12));
          if ((*((_DWORD *)v27 + 2) & 0xFE) == 0x12) {
            llvm::VectorType::get(v39, (llvm::Type *)(*((unsigned int *)v27 + 8) | ((unint64_t)(*((_DWORD *)v27 + 2) == 19) << 32)));
          }
          unsigned int v27 = v39;
        }
        unsigned int v40 = *(llvm::ConstantInt **)v27;
        unsigned int v41 = *((_DWORD *)v27 + 2);
        LODWORD(v47) = v41 >> 8;
        if (v41 >> 8 >= 0x41) {
          operator new[]();
        }
        BOOL v46 = 0;
        __int16 v42 = (llvm::ConstantInt *)llvm::ConstantInt::get(v40, (llvm::LLVMContext *)&v46, a3);
        if (v47 >= 0x41 && v46) {
          MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
        }
        uint64_t result = llvm::ScalarEvolution::getConstant(this, v42);
        break;
    }
    return result;
  }
}

uint64_t llvm::ScalarEvolution::getUDivExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2, unint64_t a3)
{
  unsigned int v3 = (const llvm::SCEV *)a3;
  uint64_t v4 = a2;
  v226[16] = *MEMORY[0x1E4F143B8];
  __s1 = v222;
  *(_DWORD *)uint64_t v222 = 6;
  *(void *)&v222[4] = a2;
  *(void *)&v222[12] = a3;
  unint64_t v6 = HIDWORD(a3);
  uint64_t v221 = 0x2000000005;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v205 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v205 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v205;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  uint64_t v7 = __ROR8__(0xB492B66FBE98F273 * *(void *)v222 - *(void *)&v222[8], 43)
     - 0x3C5A37A36834CED9 * *(void *)&v222[4]
     + __ROR8__((0x9AE16A3B2F90404FLL * *(void *)&v222[12]) ^ qword_1EBCBE580, 30);
  unint64_t v8 = qword_1EBCBE580
     + __ROR8__(*(void *)&v222[8] ^ 0xC949D7C7509E6557, 20)
     - 0x4B6D499041670D8DLL * *(void *)v222
     - 0x9AE16A3B2F90404FLL * *(void *)&v222[12]
     + 20;
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v8)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v8)));
  uint64_t AddExpr = *(void *)(*((void *)this + 104)
                      + 8
                      * ((-348639895 * ((v9 >> 47) ^ v9)) & (*((_DWORD *)this + 210) - 1)));
  uint64_t v224 = v226;
  uint64_t v225 = 0x2000000000;
  if (AddExpr) {
    BOOL v11 = (AddExpr & 1) == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    while (*(void *)(AddExpr + 16) != v221
         || memcmp(__s1, *(const void **)(AddExpr + 8), 4 * v221))
    {
      LODWORD(v225) = 0;
      uint64_t AddExpr = *(void *)AddExpr;
      if (AddExpr) {
        BOOL v12 = (AddExpr & 1) == 0;
      }
      else {
        BOOL v12 = 0;
      }
      if (!v12) {
        goto LABEL_13;
      }
    }
    goto LABEL_277;
  }
LABEL_13:
  int v13 = *((unsigned __int16 *)v4 + 12);
  if (v4 && !*((_WORD *)v4 + 12))
  {
    uint64_t v14 = *((void *)v4 + 4);
    uint64_t v15 = *(unsigned int *)(v14 + 32);
    if (v15 > 0x40)
    {
      int v16 = 0;
      int64_t v17 = (unint64_t)(v15 + 63) >> 6;
      do
      {
        BOOL v18 = v17-- < 1;
        if (v18) {
          break;
        }
        unint64_t v19 = *(void *)(*(void *)(v14 + 24) + 8 * v17);
        v16 += __clz(v19);
      }
      while (!v19);
      int v20 = v15 | 0xFFFFFFC0;
      if ((v15 & 0x3F) == 0) {
        int v20 = 0;
      }
      if (v16 + v20 == v15) {
        goto LABEL_36;
      }
    }
    else if (!*(void *)(v14 + 24))
    {
      goto LABEL_36;
    }
  }
  if (!v3 || *((_WORD *)v3 + 12)) {
    goto LABEL_247;
  }
  uint64_t v21 = *((void *)v3 + 4);
  uint64_t v22 = *(unsigned int *)(v21 + 32);
  if (v22 <= 0x40)
  {
    uint64_t v23 = *(void *)(v21 + 24);
    if (v23)
    {
      if (v23 == 1)
      {
LABEL_36:
        uint64_t AddExpr = (uint64_t)v4;
        goto LABEL_277;
      }
      goto LABEL_38;
    }
LABEL_247:
    uint64_t v167 = *((void *)this + 104)
         + 8
         * ((*((_DWORD *)this + 210) - 1) & sub_1CC13A6B8(__s1, (uint64_t)__s1 + 4 * v221));
    uint64_t AddExpr = *(void *)v167;
    uint64_t v224 = v226;
    uint64_t v225 = 0x2000000000;
    if (AddExpr) {
      BOOL v168 = (AddExpr & 1) == 0;
    }
    else {
      BOOL v168 = 0;
    }
    if (v168)
    {
      uint64_t v169 = v221;
      int v170 = __s1;
      size_t v171 = 4 * v221;
      while (*(void *)(AddExpr + 16) != v169 || memcmp(v170, *(const void **)(AddExpr + 8), v171))
      {
        LODWORD(v225) = 0;
        uint64_t AddExpr = *(void *)AddExpr;
        if (AddExpr) {
          BOOL v172 = (AddExpr & 1) == 0;
        }
        else {
          BOOL v172 = 0;
        }
        if (!v172) {
          goto LABEL_259;
        }
      }
    }
    else
    {
LABEL_259:
      *((void *)this + 118) += 48;
      uint64_t v173 = *((void *)this + 108);
      if (((v173 + 7) & 0xFFFFFFFFFFFFFFF8) - v173 + 48 > *((void *)this + 109) - v173)
      {
        unsigned int v190 = *((_DWORD *)this + 222) >> 7;
        if (v190 >= 0x1E) {
          LOBYTE(v190) = 30;
        }
        uint64_t v191 = 4096 << v190;
        uint64_t AddExpr = (uint64_t)operator new(4096 << v190, (std::align_val_t)8uLL);
        unsigned int v192 = *((_DWORD *)this + 222);
        if (v192 >= *((_DWORD *)this + 223)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*((void *)this + 110) + 8 * v192) = AddExpr;
        ++*((_DWORD *)this + 222);
        *((void *)this + 109) = AddExpr + v191;
      }
      else
      {
        uint64_t AddExpr = (v173 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *((void *)this + 108) = AddExpr + 48;
      uint64_t v174 = sub_1CB906F34((uint64_t *)this + 108, 4 * v221, 2);
      uint64_t v175 = v174;
      if (v221)
      {
        unsigned int v176 = (int *)__s1;
        uint64_t v177 = 4 * v221;
        uint64_t v178 = (_DWORD *)v174;
        do
        {
          int v179 = *v176++;
          *v178++ = v179;
          v177 -= 4;
        }
        while (v177);
        uint64_t v212 = (llvm::APInt *)v221;
      }
      else
      {
        uint64_t v212 = 0;
      }
      uint64_t v180 = 0;
      v223[0] = v4;
      v223[1] = v3;
      LODWORD(v225) = 16;
      uint64_t v181 = 1;
      uint64_t v224 = (void *)1;
      unsigned int v182 = 16;
      do
      {
        uint64_t v183 = *(unsigned __int16 *)(v223[v180] + 26);
        int v216 = 16;
        *(void *)BOOL v215 = v183;
        llvm::APInt::uadd_sat((llvm::APInt *)&v224, (const llvm::APInt *)v215, (uint64_t)&v217);
        if (v182 >= 0x41 && v181) {
          MEMORY[0x1D25D9CB0](v181, 0x1000C8000313F17);
        }
        uint64_t v181 = (uint64_t)v217;
        uint64_t v224 = v217;
        unsigned int v182 = v218;
        LODWORD(v225) = v218;
        ++v180;
      }
      while (v180 != 2);
      if (v218 >= 0x41)
      {
        uint64_t v184 = *(void **)v217;
        MEMORY[0x1D25D9CB0](v217, 0x1000C8000313F17);
        LOWORD(v181) = (_WORD)v184;
      }
      uint64_t v185 = v3;
      *(void *)uint64_t AddExpr = 0;
      *(void *)(AddExpr + 8) = v175;
      *(void *)(AddExpr + 16) = v212;
      *(_WORD *)(AddExpr + 24) = 6;
      *(_WORD *)(AddExpr + 26) = v181;
      *(_WORD *)(AddExpr + 28) = 0;
      *(void *)(AddExpr + 32) = v4;
      *(void *)(AddExpr + 40) = v3;
      unsigned int v186 = *((_DWORD *)this + 211) + 1;
      int v187 = *((_DWORD *)this + 210);
      if (v186 > 2 * v187)
      {
        llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v187, (uint64_t)off_1F2607658);
        uint64_t v224 = v226;
        uint64_t v225 = 0x2000000000;
        uint64_t v167 = *((void *)this + 104)
             + 8
             * ((*((_DWORD *)this + 210) - 1) & sub_1CC13A6B8(*(void **)(AddExpr + 8), *(void *)(AddExpr + 8)+ 4 * *(void *)(AddExpr + 16)));
        if (v224 != v226) {
          free(v224);
        }
        unsigned int v186 = *((_DWORD *)this + 211) + 1;
        uint64_t v185 = v3;
      }
      *((_DWORD *)this + 211) = v186;
      uint64_t v188 = *(void *)v167;
      if (!*(void *)v167) {
        uint64_t v188 = v167 | 1;
      }
      *(void *)uint64_t AddExpr = v188;
      *(void *)uint64_t v167 = AddExpr;
      uint64_t v224 = v4;
      uint64_t v225 = (uint64_t)v185;
      llvm::ScalarEvolution::registerUser((uint64_t)this, AddExpr, (uint64_t *)&v224, 2);
    }
    goto LABEL_277;
  }
  int v24 = 0;
  int64_t v25 = (unint64_t)(v22 + 63) >> 6;
  do
  {
    BOOL v18 = v25-- < 1;
    if (v18) {
      break;
    }
    unint64_t v26 = *(void *)(*(void *)(v21 + 24) + 8 * v25);
    v24 += __clz(v26);
  }
  while (!v26);
  int v27 = v22 | 0xFFFFFFC0;
  if ((v22 & 0x3F) == 0) {
    int v27 = 0;
  }
  int v28 = v24 + v27;
  if (v28 == v22 - 1) {
    goto LABEL_36;
  }
  if (v28 == v22) {
    goto LABEL_247;
  }
LABEL_38:
  uint64_t v29 = v4;
  while (2)
  {
    switch(v13)
    {
      case 1:
      case 2:
      case 3:
      case 13:
        unsigned int v31 = (uint64_t *)((char *)v29 + 40);
        goto LABEL_46;
      case 4:
        unsigned int v31 = (uint64_t *)((char *)v29 + 48);
        goto LABEL_46;
      case 5:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        uint64_t v30 = (const llvm::SCEV **)*((void *)v29 + 4);
        goto LABEL_41;
      case 6:
        uint64_t v30 = (const llvm::SCEV **)((char *)v29 + 40);
LABEL_41:
        uint64_t v29 = *v30;
        int v13 = *((unsigned __int16 *)*v30 + 12);
        continue;
      case 14:
        unsigned int v31 = (uint64_t *)*((void *)v29 - 1);
        goto LABEL_46;
      default:
        unsigned int v31 = (uint64_t *)*((void *)v29 + 4);
LABEL_46:
        uint64_t v32 = *v31;
        if (v22 > 0x40)
        {
          int v34 = 0;
          int64_t v35 = (unint64_t)(v22 + 63) >> 6;
          do
          {
            BOOL v18 = v35-- < 1;
            if (v18) {
              break;
            }
            unint64_t v36 = *(void *)(*(void *)(v21 + 24) + 8 * v35);
            v34 += __clz(v36);
          }
          while (!v36);
          if ((v22 & 0x3F) != 0) {
            int v37 = v22 | 0xFFFFFFC0;
          }
          else {
            int v37 = 0;
          }
          unsigned int v33 = v34 + v37;
        }
        else
        {
          unsigned int v33 = v22 + __clz(*(void *)(v21 + 24)) - 64;
        }
        unsigned int v38 = *(_DWORD *)(v32 + 8);
        uint64_t v39 = *(void *)(*(void *)this + 40);
        if (v38 == 15)
        {
          if ((v38 & 0xFE) == 0x12) {
            unsigned int v38 = *(_DWORD *)(**(void **)(v32 + 16) + 8);
          }
          uint64_t v113 = *(void *)(v39 + 504);
          if (v38 < 0x100) {
            goto LABEL_166;
          }
          unsigned int v114 = v38 >> 8;
          unint64_t v115 = *(unsigned int *)(v39 + 512);
          uint64_t v116 = *(void *)(v39 + 504);
          if (v115)
          {
            uint64_t v116 = v113;
            unint64_t v117 = v115;
            do
            {
              unint64_t v118 = v117 >> 1;
              uint64_t v119 = v116 + 16 * (v117 >> 1);
              unsigned int v120 = *(_DWORD *)(v119 + 8);
              uint64_t v121 = v119 + 16;
              v117 += ~(v117 >> 1);
              if (v120 < v114) {
                uint64_t v116 = v121;
              }
              else {
                unint64_t v117 = v118;
              }
            }
            while (v117);
          }
          if (v116 == v113 + 16 * v115 || *(_DWORD *)(v116 + 8) != v114) {
LABEL_166:
          }
            uint64_t v116 = v113;
          int v41 = *(_DWORD *)(v116 + 12);
        }
        else
        {
          int v41 = sub_1CB83544C(v39 + 272, v32);
          if (v40 == 1) {
        }
          }
        uint64_t v42 = *((void *)v3 + 4);
        uint64_t v43 = *(unsigned int *)(v42 + 32);
        if (v43 > 0x40)
        {
          int v46 = 0;
          unint64_t v47 = (unint64_t)(v43 + 63) >> 6;
          uint64_t v48 = *(int8x8_t **)(v42 + 24);
          do
          {
            int8x8_t v49 = *v48++;
            uint8x8_t v50 = (uint8x8_t)vcnt_s8(v49);
            v50.i16[0] = vaddlv_u8(v50);
            v46 += v50.i32[0];
            --v47;
          }
          while (v47);
          if (v46 != 1) {
            goto LABEL_61;
          }
        }
        else
        {
          uint64_t v44 = *(void *)(v42 + 24);
          if (!v44 || (v44 & (v44 - 1)) != 0)
          {
LABEL_61:
            uint64_t v45 = -(uint64_t)v33;
            goto LABEL_66;
          }
        }
        LODWORD(v45) = ~v33;
LABEL_66:
        int v51 = v45 + v41;
        unsigned int v52 = ***(llvm::IntegerType ****)this;
        unsigned int v53 = *(_DWORD *)(v32 + 8);
        uint64_t v54 = *(void *)(*(void *)this + 40);
        if (v53 == 15)
        {
          if ((v53 & 0xFE) == 0x12) {
            unsigned int v53 = *(_DWORD *)(**(void **)(v32 + 16) + 8);
          }
          uint64_t v122 = *(void *)(v54 + 504);
          if (v53 < 0x100) {
            goto LABEL_179;
          }
          unsigned int v123 = v53 >> 8;
          unint64_t v124 = *(unsigned int *)(v54 + 512);
          uint64_t v125 = *(void *)(v54 + 504);
          if (v124)
          {
            uint64_t v125 = v122;
            unint64_t v126 = v124;
            do
            {
              unint64_t v127 = v126 >> 1;
              uint64_t v128 = v125 + 16 * (v126 >> 1);
              unsigned int v129 = *(_DWORD *)(v128 + 8);
              uint64_t v130 = v128 + 16;
              v126 += ~(v126 >> 1);
              if (v129 < v123) {
                uint64_t v125 = v130;
              }
              else {
                unint64_t v126 = v127;
              }
            }
            while (v126);
          }
          if (v125 == v122 + 16 * v124 || *(_DWORD *)(v125 + 8) != v123) {
LABEL_179:
          }
            uint64_t v125 = v122;
          int v56 = *(_DWORD *)(v125 + 12);
        }
        else
        {
          int v56 = sub_1CB83544C(v54 + 272, v32);
          if (v55 == 1) {
        }
          }
        uint64_t v57 = llvm::IntegerType::get(v52, (llvm::LLVMContext *)(v51 + v56));
        unsigned int v59 = (llvm::Type *)v57;
        uint64_t AddExpr = 0;
        if (!v4 || *((_WORD *)v4 + 12) != 7) {
          goto LABEL_78;
        }
        uint64_t v60 = *((void *)v4 + 5);
        if (v60 == 2)
        {
          uint64_t v61 = *(void *)(*((void *)v4 + 4) + 8);
        }
        else
        {
          unsigned int v206 = (llvm::Type *)v57;
          uint64_t v207 = *((void *)v4 + 4);
          uint64_t v224 = v226;
          uint64_t v225 = 0x300000000;
          unint64_t v208 = 8 * v60 - 8;
          if (v208 >= 0x19) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v209 = 0;
          if (v60 != 1)
          {
            memcpy(v224, (const void *)(v207 + 8), 8 * v60 - 8);
            int v209 = v225;
          }
          LODWORD(v225) = v209 + (v208 >> 3);
          uint64_t v61 = sub_1CD478318(this, (uint64_t)&v224, *((const llvm::Loop **)v4 + 6), 0);
          if (v224 != v226) {
            free(v224);
          }
          unsigned int v59 = v206;
        }
        uint64_t AddExpr = 0;
        if (!v61 || *(_WORD *)(v61 + 24))
        {
LABEL_78:
          uint64_t v64 = (uint64_t)v4;
          goto LABEL_134;
        }
        unint64_t v62 = (llvm::APInt *)(*(void *)(v61 + 32) + 24);
        uint64_t v63 = (const llvm::APInt *)(*((void *)v3 + 4) + 24);
        llvm::APInt::urem(v62, v63, (uint64_t)&v224);
        uint64_t v213 = v3;
        if (v225 > 0x40)
        {
          int v65 = 0;
          int64_t v66 = ((unint64_t)v225 + 63) >> 6;
          do
          {
            BOOL v18 = v66-- < 1;
            if (v18) {
              break;
            }
            unint64_t v67 = *((void *)v224 + v66);
            v65 += __clz(v67);
          }
          while (!v67);
          int v68 = v225 | 0xFFFFFFC0;
          if ((v225 & 0x3F) == 0) {
            int v68 = 0;
          }
          if (v65 + v68 != v225)
          {
            if (v224) {
              MEMORY[0x1D25D9CB0](v224, 0x1000C8000313F17);
            }
            goto LABEL_97;
          }
        }
        else if (v224)
        {
          goto LABEL_97;
        }
        uint64_t ZeroExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr(this, v4, v59, 0);
        uint64_t v70 = llvm::ScalarEvolution::getZeroExtendExpr(this, **((const llvm::SCEV ***)v4 + 4), v59, 0);
        uint64_t v71 = llvm::ScalarEvolution::getZeroExtendExpr(this, (const llvm::SCEV *)v61, v59, 0);
        uint64_t AddRecExpr = llvm::ScalarEvolution::getAddRecExpr(this, v70, v71, *((const llvm::Loop **)v4 + 6), 0);
        if (v225 >= 0x41 && v224) {
          MEMORY[0x1D25D9CB0](v224, 0x1000C8000313F17);
        }
        if (ZeroExtendExpr == AddRecExpr)
        {
          uint64_t v224 = v226;
          uint64_t v225 = 0x400000000;
          uint64_t v73 = *((void *)v4 + 5);
          if (v73)
          {
            unsigned int v74 = (const llvm::SCEV **)*((void *)v4 + 4);
            uint64_t v75 = 8 * v73;
            do
            {
              uint64_t UDivExpr = llvm::ScalarEvolution::getUDivExpr(this, *v74, v213);
              if (v225 >= (unint64_t)HIDWORD(v225)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v224 + v225) = UDivExpr;
              LODWORD(v225) = v225 + 1;
              ++v74;
              v75 -= 8;
            }
            while (v75);
          }
          uint64_t AddExpr = llvm::ScalarEvolution::getAddRecExpr(this, (uint64_t **)&v224, *((const llvm::Loop **)v4 + 6), 1);
          if (v224 != v226) {
            free(v224);
          }
          goto LABEL_277;
        }
LABEL_97:
        uint64_t v77 = **((void **)v4 + 4);
        if (v77) {
          BOOL v78 = *(unsigned __int16 *)(v77 + 24) == 0;
        }
        else {
          BOOL v78 = 0;
        }
        if (!v78) {
          goto LABEL_133;
        }
        llvm::APInt::urem(v63, v62, (uint64_t)&v224);
        if (v225 > 0x40)
        {
          int v79 = 0;
          int64_t v80 = ((unint64_t)v225 + 63) >> 6;
          do
          {
            BOOL v18 = v80-- < 1;
            if (v18) {
              break;
            }
            unint64_t v81 = *((void *)v224 + v80);
            v79 += __clz(v81);
          }
          while (!v81);
          int v82 = v225 | 0xFFFFFFC0;
          if ((v225 & 0x3F) == 0) {
            int v82 = 0;
          }
          if (v79 + v82 != v225)
          {
            if (v224) {
              MEMORY[0x1D25D9CB0](v224, 0x1000C8000313F17);
            }
            goto LABEL_133;
          }
        }
        else if (v224)
        {
LABEL_133:
          uint64_t AddExpr = 0;
          uint64_t v64 = (uint64_t)v4;
          unsigned int v3 = v213;
          goto LABEL_134;
        }
        uint64_t v83 = llvm::ScalarEvolution::getZeroExtendExpr(this, v4, v59, 0);
        uint64_t v84 = llvm::ScalarEvolution::getZeroExtendExpr(this, **((const llvm::SCEV ***)v4 + 4), v59, 0);
        uint64_t v85 = llvm::ScalarEvolution::getZeroExtendExpr(this, (const llvm::SCEV *)v61, v59, 0);
        uint64_t v86 = llvm::ScalarEvolution::getAddRecExpr(this, v84, v85, *((const llvm::Loop **)v4 + 6), 0);
        if (v225 >= 0x41 && v224) {
          MEMORY[0x1D25D9CB0](v224, 0x1000C8000313F17);
        }
        if (v83 != v86) {
          goto LABEL_133;
        }
        uint64_t v87 = *(void *)(v77 + 32);
        llvm::APInt::urem((llvm::APInt *)(v87 + 24), v62, (uint64_t)&v217);
        unsigned int v89 = v217;
        unsigned int v3 = v213;
        if (v218 < 0x41) {
          goto LABEL_123;
        }
        int v90 = 0;
        int64_t v91 = ((unint64_t)v218 + 63) >> 6;
        do
        {
          BOOL v18 = v91-- < 1;
          if (v18) {
            break;
          }
          unint64_t v92 = *((void *)v217 + v91);
          v90 += __clz(v92);
        }
        while (!v92);
        int v93 = v218 | 0xFFFFFFC0;
        if ((v218 & 0x3F) == 0) {
          int v93 = 0;
        }
        if ((v218 - v90 - v93) <= 0x40)
        {
          unsigned int v89 = *(void **)v217;
LABEL_123:
          if (!v89) {
            goto LABEL_305;
          }
        }
        unsigned int v94 = *(_DWORD *)(v87 + 32);
        if (v94 >= 0x41) {
          operator new[]();
        }
        uint64_t v95 = *(void *)(v87 + 24) - (void)v217;
        unint64_t v96 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v94;
        if (!v94) {
          unint64_t v96 = 0;
        }
        LODWORD(v225) = *(_DWORD *)(v87 + 32);
        uint64_t v224 = (void *)(v96 & v95);
        uint64_t v193 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&v224, v88);
        unint64_t Constant = llvm::ScalarEvolution::getConstant(this, v193);
        uint64_t v195 = llvm::ScalarEvolution::getAddRecExpr(this, Constant, v61, *((const llvm::Loop **)v4 + 6), 1);
        uint64_t v64 = v195;
        if (v225 >= 0x41 && v224) {
          MEMORY[0x1D25D9CB0](v224, 0x1000C8000313F17);
        }
        if ((const llvm::SCEV *)v64 != v4)
        {
          LODWORD(v221) = 0;
          if (!HIDWORD(v221)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)__s1 = 6;
          unsigned int v196 = v221 + 1;
          LODWORD(v221) = v196;
          if (v196 >= HIDWORD(v221)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)__s1 + v196) = v64;
          unsigned int v197 = v221 + 1;
          LODWORD(v221) = v197;
          if (v197 >= HIDWORD(v221)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)__s1 + v197) = HIDWORD(v64);
          unsigned int v198 = v221 + 1;
          LODWORD(v221) = v198;
          if (v198 >= HIDWORD(v221)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)__s1 + v198) = v213;
          unsigned int v199 = v221 + 1;
          LODWORD(v221) = v199;
          if (v199 >= HIDWORD(v221)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)__s1 + v199) = v6;
          LODWORD(v221) = v221 + 1;
          uint64_t AddExpr = *(void *)(*((void *)this + 104)
                              + 8
                              * ((*((_DWORD *)this + 210) - 1) & sub_1CC13A6B8(__s1, (uint64_t)__s1 + 4 * v221)));
          uint64_t v224 = v226;
          uint64_t v225 = 0x2000000000;
          if (!AddExpr || (AddExpr & 1) != 0)
          {
LABEL_304:
            uint64_t AddExpr = 0;
            int v204 = 1;
          }
          else
          {
            uint64_t v200 = v221;
            unint64_t v201 = __s1;
            size_t v202 = 4 * v221;
            while (*(void *)(AddExpr + 16) != v200 || memcmp(v201, *(const void **)(AddExpr + 8), v202))
            {
              LODWORD(v225) = 0;
              uint64_t AddExpr = *(void *)AddExpr;
              if (AddExpr) {
                BOOL v203 = (AddExpr & 1) == 0;
              }
              else {
                BOOL v203 = 0;
              }
              if (!v203) {
                goto LABEL_304;
              }
            }
            int v204 = 0;
          }
          goto LABEL_307;
        }
LABEL_305:
        uint64_t AddExpr = 0;
        int v204 = 1;
        uint64_t v64 = (uint64_t)v4;
LABEL_307:
        if (v218 >= 0x41 && v217) {
          MEMORY[0x1D25D9CB0](v217, 0x1000C8000313F17);
        }
        if (!v204) {
          goto LABEL_277;
        }
LABEL_134:
        int v97 = *(unsigned __int16 *)(v64 + 24);
        if (v64 && v97 == 5)
        {
          uint64_t v224 = v226;
          uint64_t v225 = 0x400000000;
          uint64_t v98 = *(void *)(v64 + 40);
          if (v98)
          {
            uint64_t v99 = *(const llvm::SCEV ***)(v64 + 32);
            uint64_t v100 = 8 * v98;
            do
            {
              uint64_t v101 = llvm::ScalarEvolution::getZeroExtendExpr(this, *v99, v59, 0);
              if (v225 >= (unint64_t)HIDWORD(v225)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v224 + v225) = v101;
              LODWORD(v225) = v225 + 1;
              ++v99;
              v100 -= 8;
            }
            while (v100);
          }
          uint64_t v102 = llvm::ScalarEvolution::getZeroExtendExpr(this, (const llvm::SCEV *)v64, v59, 0);
          if (v102 == llvm::ScalarEvolution::getMulExpr(this, &v224, 0, 0) && *(_DWORD *)(v64 + 40))
          {
            uint64_t v211 = v59;
            uint64_t v104 = 0;
            uint64_t v105 = 8 * *(unsigned int *)(v64 + 40);
            unint64_t v214 = v3;
            while (1)
            {
              char v106 = *(const llvm::SCEV **)(*(void *)(v64 + 32) + v104);
              uint64_t v107 = llvm::ScalarEvolution::getUDivExpr(this, v106, v3);
              if (*(_WORD *)(v107 + 24) != 6)
              {
                uint64_t v108 = v107;
                unint64_t v217 = v219;
                v219[0] = v107;
                v219[1] = v3;
                uint64_t v218 = 0x200000002;
                uint64_t MulExpr = llvm::ScalarEvolution::getMulExpr(this, &v217, 0, 0);
                if (v217 != v219) {
                  free(v217);
                }
                BOOL v11 = MulExpr == (void)v106;
                unsigned int v3 = v214;
                if (v11) {
                  break;
                }
              }
              v104 += 8;
              if (v105 == v104)
              {
                int v103 = 1;
                unsigned int v59 = v211;
                goto LABEL_186;
              }
            }
            uint64_t v111 = *(const void **)(v64 + 32);
            unint64_t v110 = *(void *)(v64 + 40);
            unint64_t v217 = v219;
            uint64_t v218 = 0x400000000;
            if (v110 >= 5) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v112 = 0;
            unsigned int v59 = v211;
            if (v110)
            {
              memcpy(v219, v111, 8 * v110);
              int v112 = v218;
            }
            LODWORD(v218) = v112 + v110;
            sub_1CC133E7C((uint64_t)&v224, (uint64_t)&v217);
            if (v217 != v219) {
              free(v217);
            }
            *(void *)((char *)v224 + v104) = v108;
            uint64_t AddExpr = llvm::ScalarEvolution::getMulExpr(this, &v224, 0, 0);
            int v103 = 0;
            unsigned int v3 = v214;
          }
          else
          {
            int v103 = 1;
          }
LABEL_186:
          if (v224 != v226) {
            free(v224);
          }
          if (!v103) {
            goto LABEL_277;
          }
          int v97 = *(unsigned __int16 *)(v64 + 24);
        }
        if (v64 && v97 == 6)
        {
          uint64_t v131 = *(void *)(v64 + 40);
          if (v131 && !*(_WORD *)(v131 + 24))
          {
            v215[0] = 0;
            llvm::APInt::umul_ov((llvm::APInt *)(*(void *)(v131 + 32) + 24), (const llvm::APInt *)(*((void *)v3 + 4) + 24), v215, (uint64_t)&v217);
            if (v215[0])
            {
              uint64_t v133 = (uint64_t **)**((void **)v3 + 4);
              unsigned int v134 = *((_DWORD *)v133 + 2);
              if (v134 != 13)
              {
                uint64_t v135 = *(void *)(*(void *)this + 40);
                if ((v134 & 0xFE) == 0x12) {
                  unsigned int v134 = *(_DWORD *)(*v133[2] + 8);
                }
                uint64_t v136 = *(void *)(v135 + 504);
                if (v134 < 0x100) {
                  goto LABEL_207;
                }
                unsigned int v137 = v134 >> 8;
                unint64_t v138 = *(unsigned int *)(v135 + 512);
                uint64_t v139 = v136;
                if (v138)
                {
                  uint64_t v139 = v136;
                  unint64_t v140 = v138;
                  do
                  {
                    unint64_t v141 = v140 >> 1;
                    uint64_t v142 = v139 + 16 * (v140 >> 1);
                    unsigned int v143 = *(_DWORD *)(v142 + 8);
                    uint64_t v144 = v142 + 16;
                    v140 += ~(v140 >> 1);
                    if (v143 < v137) {
                      uint64_t v139 = v144;
                    }
                    else {
                      unint64_t v140 = v141;
                    }
                  }
                  while (v140);
                }
                if (v139 == v136 + 16 * v138 || *(_DWORD *)(v139 + 8) != v137) {
LABEL_207:
                }
                  uint64_t v139 = v136;
                unint64_t v145 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v133, (llvm::LLVMContext *)*(unsigned int *)(v139 + 12));
                if ((v133[1] & 0xFE) == 0x12)
                {
                  unsigned int v210 = (llvm::Type *)*((unsigned int *)v133 + 8);
                  if (*((_DWORD *)v133 + 2) == 19) {
                    llvm::ScalableVectorType::get(v145, v210);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v145, v210);
                  }
                }
                uint64_t v133 = v145;
              }
              int v146 = (llvm::ConstantInt *)*v133;
              unsigned int v147 = *((_DWORD *)v133 + 2);
              LODWORD(v225) = v147 >> 8;
              if (v147 >> 8 >= 0x41) {
                operator new[]();
              }
              uint64_t v224 = 0;
              uint64_t v148 = (llvm::ConstantInt *)llvm::ConstantInt::get(v146, (llvm::LLVMContext *)&v224, v132);
              if (v225 >= 0x41 && v224) {
                MEMORY[0x1D25D9CB0](v224, 0x1000C8000313F17);
              }
              unint64_t v149 = llvm::ScalarEvolution::getConstant(this, v148);
            }
            else
            {
              uint64_t v162 = *(const llvm::SCEV **)(v64 + 32);
              uint64_t v163 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&v217, v132);
              uint64_t v164 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(this, v163);
              unint64_t v149 = llvm::ScalarEvolution::getUDivExpr(this, v162, v164);
            }
            uint64_t AddExpr = v149;
            if (v218 >= 0x41 && v217) {
              MEMORY[0x1D25D9CB0](v217, 0x1000C8000313F17);
            }
            goto LABEL_277;
          }
LABEL_246:
          uint64_t v4 = (const llvm::SCEV *)v64;
          goto LABEL_247;
        }
        if (!v64 || v97 != 4)
        {
LABEL_243:
          if (v64 && !v97)
          {
            UDiv = llvm::ConstantExpr::getUDiv(*(llvm::ConstantExpr **)(v64 + 32), *((llvm::Constant **)v3 + 4), 0, v58);
            uint64_t AddExpr = llvm::ScalarEvolution::getConstant(this, UDiv);
            goto LABEL_277;
          }
          goto LABEL_246;
        }
        uint64_t v224 = v226;
        uint64_t v225 = 0x400000000;
        uint64_t v150 = *(void *)(v64 + 40);
        if (v150)
        {
          unsigned int v151 = *(const llvm::SCEV ***)(v64 + 32);
          uint64_t v152 = 8 * v150;
          do
          {
            uint64_t v153 = llvm::ScalarEvolution::getZeroExtendExpr(this, *v151, v59, 0);
            if (v225 >= (unint64_t)HIDWORD(v225)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v224 + v225) = v153;
            LODWORD(v225) = v225 + 1;
            ++v151;
            v152 -= 8;
          }
          while (v152);
        }
        uint64_t v154 = llvm::ScalarEvolution::getZeroExtendExpr(this, (const llvm::SCEV *)v64, v59, 0);
        if (v154 != llvm::ScalarEvolution::getAddExpr(this, &v224, 0, 0)) {
          goto LABEL_238;
        }
        LODWORD(v225) = 0;
        uint64_t v155 = *(void *)(v64 + 40);
        int v156 = v155;
        if (v155)
        {
          uint64_t v157 = 0;
          uint64_t v158 = 8 * v155;
          while (1)
          {
            uint64_t v159 = llvm::ScalarEvolution::getUDivExpr(this, *(const llvm::SCEV **)(*(void *)(v64 + 32) + v157), v3);
            if (*(_WORD *)(v159 + 24) == 6) {
              break;
            }
            uint64_t v160 = v159;
            uint64_t v161 = sub_1CBFD7CB4(this, v159, v3, 0, 0);
            int v156 = v225;
            if (v161 == *(void *)(*(void *)(v64 + 32) + v157))
            {
              if (v225 >= HIDWORD(v225)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v224 + v225) = v160;
              int v156 = v225 + 1;
              LODWORD(v225) = v225 + 1;
              v157 += 8;
              if (v158 != v157) {
                continue;
              }
            }
            goto LABEL_235;
          }
          int v156 = v225;
LABEL_235:
          uint64_t v155 = *(void *)(v64 + 40);
        }
        if (v155 == v156)
        {
          uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(this, &v224, 0, 0);
          int v165 = 0;
        }
        else
        {
LABEL_238:
          int v165 = 1;
        }
        if (v224 != v226) {
          free(v224);
        }
        if (v165)
        {
          int v97 = *(unsigned __int16 *)(v64 + 24);
          goto LABEL_243;
        }
LABEL_277:
        if (__s1 != v222) {
          free(__s1);
        }
        return AddExpr;
    }
  }
}

llvm::APInt *sub_1CC0EAEEC(llvm::APInt *this, llvm::ScalarEvolution *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = this;
  unsigned int v6 = *(_DWORD *)(a3 + 32);
  BOOL v7 = v6 != 0;
  if ((*(void *)(a4 + 40) & 0xFFFFFFFELL) == 0 || v6 == 0)
  {
    unsigned int v13 = *(_DWORD *)(a3 + 32);
  }
  else
  {
    unint64_t v11 = *(void *)(a4 + 40);
    unint64_t v12 = 1;
    unsigned int v13 = *(_DWORD *)(a3 + 32);
    do
    {
      this = (llvm::APInt *)llvm::ScalarEvolution::GetMinTrailingZeros(a2, *(const llvm::SCEV **)(*(void *)(a4 + 32) + 8 * v12));
      if (this < v13) {
        unsigned int v13 = this;
      }
      ++v12;
      BOOL v7 = v13 != 0;
    }
    while (v12 < v11 && v13);
  }
  if (v7)
  {
    uint64_t v14 = (void *)(a3 + 24);
    if (v13 >= v6)
    {
      unsigned int v19 = *(_DWORD *)(a3 + 32);
      *((_DWORD *)v5 + 2) = v19;
      if (v19 > 0x40) {
        operator new[]();
      }
      *(void *)unint64_t v5 = *v14;
    }
    else
    {
      unsigned int v15 = *(_DWORD *)(a3 + 32);
      if (v13 > 0x40)
      {
        if (v15 != v13) {
          operator new[]();
        }
        this = (llvm::APInt *)sub_1CD0463BC((uint64_t)&v20, a3 + 24);
      }
      else
      {
        if (v15 >= 0x41) {
          uint64_t v14 = (void *)*v14;
        }
        uint64_t v16 = *v14;
        unsigned int v21 = v13;
        unint64_t v17 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
        if (!v13) {
          unint64_t v17 = 0;
        }
        uint64_t v20 = v17 & v16;
      }
      if (v6 > 0x40)
      {
        if (v21 != v6) {
          operator new[]();
        }
        this = (llvm::APInt *)sub_1CD0463BC((uint64_t)v5, (uint64_t)&v20);
      }
      else
      {
        uint64_t v18 = v20;
        *((_DWORD *)v5 + 2) = v6;
        *(void *)unint64_t v5 = v18 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v6);
      }
      if (v21 >= 0x41)
      {
        this = (llvm::APInt *)v20;
        if (v20) {
          return (llvm::APInt *)MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
        }
      }
    }
  }
  else
  {
    *((_DWORD *)v5 + 2) = v6;
    if (v6 > 0x40)
    {
      llvm::APInt::initSlowCase(v5);
    }
    *(void *)unint64_t v5 = 0;
  }
  return this;
}

uint64_t sub_1CC0EB218(uint64_t a1, llvm::Type *a2, llvm::ScalarEvolution *this, unsigned int a4)
{
  v61[4] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a1 + 40);
  unint64_t v8 = *(const llvm::Loop **)(a1 + 48);
  uint64_t v10 = *(uint64_t **)(a1 + 32);
  uint64_t v11 = *v10;
  if (v9 == 2)
  {
    unint64_t v12 = (const llvm::SCEV *)v10[1];
  }
  else
  {
    unsigned int v59 = v61;
    uint64_t v60 = 0x300000000;
    unint64_t v52 = 8 * v9 - 8;
    if (v52 >= 0x19) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v53 = 0;
    if (v9 != 1)
    {
      memcpy(v59, v10 + 1, 8 * v9 - 8);
      int v53 = v60;
    }
    LODWORD(v60) = v53 + (v52 >> 3);
    unint64_t v12 = (const llvm::SCEV *)sub_1CD478318(this, (uint64_t)&v59, *(const llvm::Loop **)(a1 + 48), 0);
    if (v59 != v61) {
      free(v59);
    }
  }
  if (*(_WORD *)(v11 + 24) != 4 || v11 == 0) {
    return llvm::ScalarEvolution::getSignExtendExpr(this, **(const llvm::SCEV ***)(a1 + 32), a2, a4);
  }
  unsigned int v59 = v61;
  uint64_t v60 = 0x400000000;
  uint64_t v14 = *(void *)(v11 + 40);
  if (v14)
  {
    unsigned int v15 = 0;
    uint64_t v16 = *(void **)(v11 + 32);
    uint64_t v17 = 8 * v14;
    do
    {
      if ((const llvm::SCEV *)*v16 != v12)
      {
        if (v15 >= HIDWORD(v60)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v59 + v15) = *v16;
        unsigned int v15 = v60 + 1;
        LODWORD(v60) = v60 + 1;
      }
      ++v16;
      v17 -= 8;
    }
    while (v17);
    uint64_t v14 = *(void *)(v11 + 40);
  }
  else
  {
    unsigned int v15 = 0;
  }
  if (v14 == v15)
  {
    uint64_t AddExpr = 0;
  }
  else
  {
    uint64_t AddExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getAddExpr(this, &v59, *(_WORD *)(v11 + 28) & 2, 0);
    uint64_t AddRecExpr = llvm::ScalarEvolution::getAddRecExpr(this, (uint64_t)AddExpr, (uint64_t)v12, v8, 0);
    if (*(_WORD *)(AddRecExpr + 24) == 7) {
      uint64_t v20 = AddRecExpr;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(this, v8);
    Exact = (const llvm::SCEV *)llvm::ScalarEvolution::BackedgeTakenInfo::getExact(BackedgeTakenInfo, (uint64_t)v8, (uint64_t)this);
    if (!v20
      || (*(_WORD *)(v20 + 28) & 4) == 0
      || *((_WORD *)Exact + 12) == 15
      || !llvm::ScalarEvolution::isKnownPositive(this, Exact))
    {
      uint64_t v23 = *(uint64_t **)(a1 + 32);
      while (2)
      {
        uint64_t v24 = *v23;
        switch(*(_WORD *)(v24 + 24))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            int64_t v25 = (uint64_t *)(v24 + 40);
            break;
          case 4:
            int64_t v25 = (uint64_t *)(v24 + 48);
            break;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            uint64_t v23 = *(uint64_t **)(v24 + 32);
            continue;
          case 6:
            uint64_t v23 = (uint64_t *)(v24 + 40);
            continue;
          case 0xE:
            int64_t v25 = *(uint64_t **)(v24 - 8);
            break;
          default:
            int64_t v25 = *(uint64_t **)(v24 + 32);
            break;
        }
        break;
      }
      uint64_t v26 = *v25;
      unsigned int v27 = *(_DWORD *)(*v25 + 8);
      int v28 = *(llvm::IntegerType ****)this;
      uint64_t v29 = *(void *)(*(void *)this + 40);
      uint64_t v57 = v20;
      if (v27 == 15)
      {
        if ((v27 & 0xFE) == 0x12) {
          unsigned int v27 = *(_DWORD *)(**(void **)(v26 + 16) + 8);
        }
        uint64_t v43 = *(void *)(v29 + 504);
        if (v27 < 0x100) {
          goto LABEL_64;
        }
        unsigned int v44 = v27 >> 8;
        unint64_t v45 = *(unsigned int *)(v29 + 512);
        uint64_t v46 = *(void *)(v29 + 504);
        if (v45)
        {
          uint64_t v46 = v43;
          unint64_t v47 = v45;
          do
          {
            unint64_t v48 = v47 >> 1;
            uint64_t v49 = v46 + 16 * (v47 >> 1);
            unsigned int v50 = *(_DWORD *)(v49 + 8);
            uint64_t v51 = v49 + 16;
            v47 += ~(v47 >> 1);
            if (v50 < v44) {
              uint64_t v46 = v51;
            }
            else {
              unint64_t v47 = v48;
            }
          }
          while (v47);
        }
        if (v46 == v43 + 16 * v45 || *(_DWORD *)(v46 + 8) != v44) {
LABEL_64:
        }
          uint64_t v46 = v43;
        int v31 = *(_DWORD *)(v46 + 12);
      }
      else
      {
        int v31 = sub_1CB83544C(v29 + 272, v26);
        if (v30 == 1) {
        int v28 = *(llvm::IntegerType ****)this;
        }
      }
      uint64_t v32 = (llvm::Type *)llvm::IntegerType::get(**v28, (llvm::LLVMContext *)(2 * v31));
      uint64_t SignExtendExpr = llvm::ScalarEvolution::getSignExtendExpr(this, AddExpr, v32, a4);
      uint64_t v34 = llvm::ScalarEvolution::getSignExtendExpr(this, v12, v32, a4);
      uint64_t v35 = sub_1CBFD7D6C(this, SignExtendExpr, v34, 0, 0);
      if (llvm::ScalarEvolution::getSignExtendExpr(this, (const llvm::SCEV *)v11, v32, a4) == v35)
      {
        if (v57 && (*(_WORD *)(a1 + 28) & 4) != 0) {
          llvm::ScalarEvolution::setNoWrapFlags((int32x2_t *)this, v57, 4);
        }
      }
      else
      {
        unsigned int v58 = 0;
        unint64_t v36 = sub_1CC0F6340((uint64_t)v12, &v58, (llvm::ConstantInt ****)this);
        if (!v36
          || (llvm::ScalarEvolution::isLoopEntryGuardedByCond((uint64_t)this, (uint64_t)v8, v58, (uint64_t)AddExpr, v36) & 1) == 0)
        {
          uint64_t AddExpr = 0;
        }
      }
    }
  }
  if (v59 != v61) {
    free(v59);
  }
  if (!AddExpr) {
    return llvm::ScalarEvolution::getSignExtendExpr(this, **(const llvm::SCEV ***)(a1 + 32), a2, a4);
  }
  uint64_t v37 = *(void *)(a1 + 40);
  if (v37 == 2)
  {
    unsigned int v38 = *(const llvm::SCEV **)(*(void *)(a1 + 32) + 8);
  }
  else
  {
    uint64_t v54 = *(void *)(a1 + 32);
    unsigned int v59 = v61;
    uint64_t v60 = 0x300000000;
    unint64_t v55 = 8 * v37 - 8;
    if (v55 >= 0x19) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v56 = 0;
    if (v37 != 1)
    {
      memcpy(v59, (const void *)(v54 + 8), 8 * v37 - 8);
      int v56 = v60;
    }
    LODWORD(v60) = v56 + (v55 >> 3);
    unsigned int v38 = (const llvm::SCEV *)sub_1CD478318(this, (uint64_t)&v59, *(const llvm::Loop **)(a1 + 48), 0);
    if (v59 != v61) {
      free(v59);
    }
  }
  uint64_t v39 = llvm::ScalarEvolution::getSignExtendExpr(this, v38, a2, a4);
  uint64_t v40 = llvm::ScalarEvolution::getSignExtendExpr(this, AddExpr, a2, a4);
  unsigned int v59 = v61;
  v61[0] = v39;
  v61[1] = v40;
  uint64_t v60 = 0x200000002;
  uint64_t v41 = llvm::ScalarEvolution::getAddExpr(this, &v59, 0, 0);
  if (v59 != v61) {
    free(v59);
  }
  return v41;
}

uint64_t llvm::ScalarEvolution::proveNoSignedWrapViaInduction(llvm::ScalarEvolution *this, const llvm::SCEVAddRecExpr *a2)
{
  v36[3] = *MEMORY[0x1E4F143B8];
  __int16 v2 = *((_WORD *)a2 + 14);
  uint64_t v3 = v2 & 7;
  if ((v2 & 4) != 0 || *((void *)a2 + 5) != 2) {
    return v3;
  }
  uint64_t v6 = *((void *)this + 147);
  uint64_t v7 = *((unsigned int *)this + 297);
  if (v6 == *((void *)this + 146))
  {
    if (v7)
    {
      unint64_t v8 = 0;
      uint64_t v9 = 8 * v7;
      uint64_t v10 = (void *)*((void *)this + 147);
      while ((const llvm::SCEVAddRecExpr *)*v10 != a2)
      {
        if (*v10 == -2) {
          unint64_t v8 = v10;
        }
        ++v10;
        v9 -= 8;
        if (!v9)
        {
          if (!v8) {
            goto LABEL_11;
          }
          *unint64_t v8 = a2;
          --*((_DWORD *)this + 298);
          goto LABEL_13;
        }
      }
      return v3;
    }
LABEL_11:
    unsigned int v11 = *((_DWORD *)this + 296);
    if (v7 < v11)
    {
      *((_DWORD *)this + 297) = v7 + 1;
      *(void *)(v6 + 8 * v7) = a2;
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 296);
  }
  if (3 * v11 <= 4 * ((int)v7 - *((_DWORD *)this + 298)))
  {
    if (v11 >= 0x40) {
      v11 *= 2;
    }
    else {
      unsigned int v11 = 128;
    }
  }
  else if (v11 - v7 >= v11 >> 3)
  {
    goto LABEL_28;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::ScalarEvolution *)((char *)this + 1168), v11);
  unsigned int v11 = *((_DWORD *)this + 296);
  uint64_t v6 = *((void *)this + 147);
LABEL_28:
  unsigned int v22 = v11 - 1;
  unsigned int v23 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v24 = (const llvm::SCEVAddRecExpr **)(v6 + 8 * v23);
  int64_t v25 = *v24;
  if (*v24 != (const llvm::SCEVAddRecExpr *)-1)
  {
    uint64_t v26 = 0;
    int v27 = 1;
    while (v25 != a2)
    {
      if (v26) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = v25 == (const llvm::SCEVAddRecExpr *)-2;
      }
      if (v28) {
        uint64_t v26 = v24;
      }
      unsigned int v29 = v23 + v27++;
      unsigned int v23 = v29 & v22;
      uint64_t v24 = (const llvm::SCEVAddRecExpr **)(v6 + 8 * (v29 & v22));
      int64_t v25 = *v24;
      if (*v24 == (const llvm::SCEVAddRecExpr *)-1) {
        goto LABEL_44;
      }
    }
    return v3;
  }
  uint64_t v26 = 0;
LABEL_44:
  if (v26) {
    uint64_t v32 = v26;
  }
  else {
    uint64_t v32 = v24;
  }
  if (*v32 != a2)
  {
    if (*v32 == (const llvm::SCEVAddRecExpr *)-2) {
      --*((_DWORD *)this + 298);
    }
    else {
      ++*((_DWORD *)this + 297);
    }
    *uint64_t v32 = a2;
    uint64_t v33 = *((void *)a2 + 5);
    if (v33 != 2)
    {
      uint64_t v34 = *((void *)a2 + 4);
      v35[0] = v36;
      v35[1] = (void *)0x300000000;
      sub_1CD47792C((unsigned int *)v35, (unsigned char *)(v34 + 8), (unsigned char *)(v34 + 8 * v33));
      uint64_t v12 = sub_1CD478318(this, (uint64_t)v35, *((const llvm::Loop **)a2 + 6), 0);
      if (v35[0] != v36) {
        free(v35[0]);
      }
LABEL_14:
      unsigned int v13 = (const llvm::Loop *)*((void *)a2 + 6);
      uint64_t BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(this, v13);
      uint64_t v15 = *(void *)(BackedgeTakenInfo + 104);
      if (v15)
      {
        unsigned int v16 = *(_DWORD *)(BackedgeTakenInfo + 8);
        if (!v16) {
          goto LABEL_16;
        }
        uint64_t v30 = (_DWORD *)(*(void *)BackedgeTakenInfo + 48);
        uint64_t v31 = 88 * v16;
        while (*(v30 - 1) == *v30)
        {
          v30 += 22;
          v31 -= 88;
          if (!v31) {
            goto LABEL_16;
          }
        }
      }
      uint64_t v15 = *((void *)this + 6);
LABEL_16:
      if (*(_WORD *)(v15 + 24) != 15 || *((unsigned char *)this + 8)) {
        goto LABEL_21;
      }
      uint64_t v17 = *((void *)this + 3);
      if (!*(unsigned char *)(v17 + 184)) {
        llvm::AssumptionCache::scanFunction(*((llvm::AssumptionCache **)this + 3));
      }
      if (*(_DWORD *)(v17 + 24))
      {
LABEL_21:
        LODWORD(v35[0]) = 0;
        unint64_t v18 = sub_1CC0F6340(v12, v35, (llvm::ConstantInt ****)this);
        if (v18)
        {
          uint64_t v19 = v18;
          uint64_t v20 = LODWORD(v35[0]);
          if ((llvm::ScalarEvolution::isLoopBackedgeGuardedByCond(this, v13, LODWORD(v35[0]), a2, v18) & 1) != 0
            || llvm::ScalarEvolution::isKnownOnEveryIteration(this, v20, (uint64_t)a2, v19))
          {
            return v3 | 4;
          }
        }
      }
      return v3;
    }
LABEL_13:
    uint64_t v12 = *(void *)(*((void *)a2 + 4) + 8);
    goto LABEL_14;
  }
  return v3;
}

BOOL llvm::ScalarEvolution::isKnownNonNegative(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef((uint64_t)this, (uint64_t)a2, 1, 0);
  llvm::ConstantRange::getSignedMin(RangeRef, (uint64_t)&v10);
  unsigned int v3 = v11 - 1;
  if (v11 >= 0x41) {
    uint64_t v4 = (unint64_t *)(v10 + 8 * (v3 >> 6));
  }
  else {
    uint64_t v4 = (unint64_t *)&v10;
  }
  unint64_t v5 = *v4;
  if (v11 >= 0x41 && v10 != 0)
  {
    unint64_t v8 = v5;
    char v9 = v11 - 1;
    MEMORY[0x1D25D9CB0]();
    unint64_t v5 = v8;
    LOBYTE(v3) = v9;
  }
  return ((v5 >> v3) & 1) == 0;
}

const llvm::SCEV *llvm::ScalarEvolution::getAnyExtendExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2, llvm::Type *a3)
{
  v25[4] = *MEMORY[0x1E4F143B8];
  do
  {
    if (*((unsigned char *)a3 + 8) != 13)
    {
      llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(void *)(*(void *)this + 40) + 272), a3);
      a3 = v14;
    }
    BOOL v6 = a2 == 0;
    if (a2 && !*((_WORD *)a2 + 12))
    {
      uint64_t v7 = *((void *)a2 + 4);
      unint64_t v8 = (void *)(v7 + 24);
      unsigned int v9 = *(_DWORD *)(v7 + 32);
      unsigned int v10 = v9 - 1;
      if (v9 >= 0x41) {
        unint64_t v8 = (void *)(*v8 + 8 * (v10 >> 6));
      }
      if ((*v8 >> v10))
      {
        return (const llvm::SCEV *)llvm::ScalarEvolution::getSignExtendExpr(this, (llvm::detail::IEEEFloat **)a2, (uint64_t **)a3, 0);
      }
      BOOL v6 = 0;
LABEL_13:
      uint64_t result = (const llvm::SCEV *)llvm::ScalarEvolution::getZeroExtendExpr(this, (llvm::detail::IEEEFloat **)a2, (uint64_t **)a3, 0);
      if (*((_WORD *)result + 12) == 2)
      {
        uint64_t v15 = result;
        uint64_t result = (const llvm::SCEV *)llvm::ScalarEvolution::getSignExtendExpr(this, (llvm::detail::IEEEFloat **)a2, (uint64_t **)a3, 0);
        if (*((_WORD *)result + 12) == 3)
        {
          int v16 = *((unsigned __int16 *)a2 + 12);
          char v17 = v16 != 7 || v6;
          if (v17)
          {
            if (v16 != 9) {
              return v15;
            }
          }
          else
          {
            unsigned int v23 = v25;
            uint64_t v24 = 0x400000000;
            uint64_t v18 = *((void *)a2 + 5);
            if (v18)
            {
              uint64_t v19 = (const llvm::SCEV **)*((void *)a2 + 4);
              uint64_t v20 = 8 * v18;
              do
              {
                uint64_t AnyExtendExpr = llvm::ScalarEvolution::getAnyExtendExpr(this, *v19, a3);
                if (v24 >= (unint64_t)HIDWORD(v24)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v23 + v24) = AnyExtendExpr;
                LODWORD(v24) = v24 + 1;
                ++v19;
                v20 -= 8;
              }
              while (v20);
            }
            uint64_t AddRecExpr = llvm::ScalarEvolution::getAddRecExpr(this, (uint64_t **)&v23, *((const llvm::Loop **)a2 + 6), 1);
            if (v23 != v25) {
              free(v23);
            }
            return (const llvm::SCEV *)AddRecExpr;
          }
        }
      }
      return result;
    }
    if (!a2 || *((_WORD *)a2 + 12) != 1) {
      goto LABEL_13;
    }
    a2 = (const llvm::SCEV *)*((void *)a2 + 4);
    Type = (llvm::Type *)llvm::SCEV::getType(a2);
    unint64_t TypeSizeInBits = llvm::ScalarEvolution::getTypeSizeInBits(this, Type);
  }
  while (TypeSizeInBits < llvm::ScalarEvolution::getTypeSizeInBits(this, a3));

  return llvm::ScalarEvolution::getTruncateOrNoop(this, a2, a3);
}

const llvm::SCEV *llvm::ScalarEvolution::getTruncateOrNoop(llvm::ScalarEvolution *this, const llvm::SCEV *a2, llvm::Type *a3)
{
  BOOL v6 = a2;
  while (2)
  {
    switch(*((_WORD *)v6 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        uint64_t v7 = (uint64_t *)((char *)v6 + 40);
        goto LABEL_4;
      case 4:
        uint64_t v7 = (uint64_t *)((char *)v6 + 48);
        goto LABEL_4;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        int v16 = (const llvm::SCEV **)*((void *)v6 + 4);
        goto LABEL_15;
      case 6:
        int v16 = (const llvm::SCEV **)((char *)v6 + 40);
LABEL_15:
        BOOL v6 = *v16;
        continue;
      case 0xE:
        uint64_t v7 = (uint64_t *)*((void *)v6 - 1);
        goto LABEL_4;
      default:
        uint64_t v7 = (uint64_t *)*((void *)v6 + 4);
LABEL_4:
        uint64_t v8 = *v7;
        uint64_t v9 = *(void *)(*(void *)this + 40) + 272;
        if (*(unsigned char *)(*v7 + 8) == 15)
        {
          Indexunint64_t TypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v9, v8);
        }
        else
        {
          Indexunint64_t TypeSizeInBits = sub_1CB83544C(v9, v8);
          if (v10 == 1) {
        }
          }
        uint64_t v12 = *(void *)(*(void *)this + 40) + 272;
        if (*((unsigned char *)a3 + 8) == 15)
        {
          uint64_t v13 = llvm::DataLayout::getIndexTypeSizeInBits(v12, (uint64_t)a3);
        }
        else
        {
          uint64_t v13 = sub_1CB83544C(v12, (uint64_t)a3);
          if (v14 == 1)
          {
            uint64_t v17 = v13;
            uint64_t v13 = v17;
          }
        }
        if (IndexTypeSizeInBits == v13) {
          return a2;
        }
        return (const llvm::SCEV *)llvm::ScalarEvolution::getTruncateExpr(this, a2, a3, 0);
    }
  }
}

BOOL llvm::ScalarEvolution::willNotOverflow(llvm::ScalarEvolution *a1, int a2, int a3, llvm::detail::IEEEFloat **a4, llvm::detail::IEEEFloat **a5)
{
  uint64_t v8 = sub_1CBFD7D6C;
  if (a2 != 13)
  {
    if (a2 == 15) {
      uint64_t v8 = llvm::ScalarEvolution::getMinusSCEV;
    }
    else {
      uint64_t v8 = sub_1CBFD7CB4;
    }
  }
  uint64_t v9 = (uint64_t (*)(llvm::ScalarEvolution *, llvm::detail::IEEEFloat **, llvm::detail::IEEEFloat **, void, void))v8;
  if (a3) {
    unsigned int v10 = llvm::ScalarEvolution::getSignExtendExpr;
  }
  else {
    unsigned int v10 = llvm::ScalarEvolution::getZeroExtendExpr;
  }
  unsigned int v11 = a4;
  while (2)
  {
    switch(*((_WORD *)v11 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        uint64_t v12 = (llvm::IntegerType ***)(v11 + 5);
        goto LABEL_8;
      case 4:
        uint64_t v12 = (llvm::IntegerType ***)(v11 + 6);
        goto LABEL_8;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v19 = (llvm::detail::IEEEFloat ***)v11[4];
        goto LABEL_14;
      case 6:
        uint64_t v19 = (llvm::detail::IEEEFloat ***)(v11 + 5);
LABEL_14:
        unsigned int v11 = *v19;
        continue;
      case 0xE:
        uint64_t v12 = (llvm::IntegerType ***)*(v11 - 1);
        goto LABEL_8;
      default:
        uint64_t v12 = (llvm::IntegerType ***)v11[4];
LABEL_8:
        uint64_t v13 = llvm::IntegerType::get(**v12, (llvm::LLVMContext *)((*((_DWORD *)*v12 + 2) >> 7) & 0x1FFFFFE));
        uint64_t v14 = v9(a1, a4, a5, 0, 0);
        uint64_t v15 = v10(a1, (llvm::detail::IEEEFloat **)v14, (uint64_t **)v13, 0);
        uint64_t v16 = v10(a1, a4, (uint64_t **)v13, 0);
        uint64_t v17 = v10(a1, a5, (uint64_t **)v13, 0);
        return v15 == v9(a1, (llvm::detail::IEEEFloat **)v16, (llvm::detail::IEEEFloat **)v17, 0, 0);
    }
  }
}

unint64_t llvm::ScalarEvolution::getMinusSCEV(llvm::ScalarEvolution *a1, llvm::SCEV *a2, const llvm::APInt *a3, char a4, uint64_t a5)
{
  unint64_t v5 = a2;
  v54[2] = *MEMORY[0x1E4F143B8];
  if (a2 == a3)
  {
    while (2)
    {
      switch(*((_WORD *)v5 + 12))
      {
        case 1:
        case 2:
        case 3:
        case 0xD:
          uint64_t v34 = (char *)v5 + 40;
          goto LABEL_50;
        case 4:
          uint64_t v34 = (char *)v5 + 48;
          goto LABEL_50;
        case 5:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          uint64_t v51 = (llvm::SCEV **)*((void *)v5 + 4);
          goto LABEL_76;
        case 6:
          uint64_t v51 = (llvm::SCEV **)((char *)v5 + 40);
LABEL_76:
          unint64_t v5 = *v51;
          continue;
        case 0xE:
          uint64_t v34 = (char *)*((void *)v5 - 1);
          goto LABEL_50;
        default:
          uint64_t v34 = (char *)*((void *)v5 + 4);
LABEL_50:
          uint64_t v35 = *(llvm::FixedVectorType **)v34;
          unsigned int v36 = *(_DWORD *)(*(void *)v34 + 8);
          if (v36 != 13)
          {
            uint64_t v37 = *(void *)(*(void *)a1 + 40);
            if ((v36 & 0xFE) == 0x12) {
              unsigned int v36 = *(_DWORD *)(**((void **)v35 + 2) + 8);
            }
            uint64_t v38 = *(void *)(v37 + 504);
            if (v36 < 0x100) {
              goto LABEL_62;
            }
            unsigned int v39 = v36 >> 8;
            unint64_t v40 = *(unsigned int *)(v37 + 512);
            uint64_t v41 = v38;
            if (v40)
            {
              uint64_t v41 = v38;
              unint64_t v42 = v40;
              do
              {
                unint64_t v43 = v42 >> 1;
                uint64_t v44 = v41 + 16 * (v42 >> 1);
                unsigned int v45 = *(_DWORD *)(v44 + 8);
                uint64_t v46 = v44 + 16;
                v42 += ~(v42 >> 1);
                if (v45 < v39) {
                  uint64_t v41 = v46;
                }
                else {
                  unint64_t v42 = v43;
                }
              }
              while (v42);
            }
            if (v41 == v38 + 16 * v40 || *(_DWORD *)(v41 + 8) != v39) {
LABEL_62:
            }
              uint64_t v41 = v38;
            unint64_t v47 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v35, (llvm::LLVMContext *)*(unsigned int *)(v41 + 12));
            if ((*((_DWORD *)v35 + 2) & 0xFE) == 0x12) {
              llvm::VectorType::get(v47, (llvm::Type *)(*((unsigned int *)v35 + 8) | ((unint64_t)(*((_DWORD *)v35 + 2) == 19) << 32)));
            }
            uint64_t v35 = v47;
          }
          unint64_t v48 = *(llvm::ConstantInt **)v35;
          unsigned int v49 = *((_DWORD *)v35 + 2);
          LODWORD(v53) = v49 >> 8;
          if (v49 >> 8 >= 0x41) {
            operator new[]();
          }
          unint64_t v52 = 0;
          unsigned int v50 = (llvm::ConstantInt *)llvm::ConstantInt::get(v48, (llvm::LLVMContext *)&v52, a3);
          if (v53 >= 0x41 && v52) {
            MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
          }
          unint64_t result = llvm::ScalarEvolution::getConstant(a1, v50);
          break;
      }
      break;
    }
  }
  else
  {
    uint64_t v9 = a3;
    unsigned int v10 = a3;
    while (2)
    {
      switch(*((_WORD *)v10 + 12))
      {
        case 1:
        case 2:
        case 3:
        case 0xD:
          unsigned int v11 = (char *)v10 + 40;
          goto LABEL_5;
        case 4:
          unsigned int v11 = (char *)v10 + 48;
          goto LABEL_5;
        case 5:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          uint64_t v24 = (const llvm::APInt **)*((void *)v10 + 4);
          goto LABEL_27;
        case 6:
          uint64_t v24 = (const llvm::APInt **)((char *)v10 + 40);
LABEL_27:
          unsigned int v10 = *v24;
          continue;
        case 0xE:
          unsigned int v11 = (char *)*((void *)v10 - 1);
          goto LABEL_5;
        default:
          unsigned int v11 = (char *)*((void *)v10 + 4);
LABEL_5:
          if (*(unsigned char *)(*(void *)v11 + 8) == 15)
          {
            uint64_t v12 = a2;
            while (2)
            {
              switch(*((_WORD *)v12 + 12))
              {
                case 1:
                case 2:
                case 3:
                case 0xD:
                  uint64_t v13 = (char *)v12 + 40;
                  goto LABEL_9;
                case 4:
                  uint64_t v13 = (char *)v12 + 48;
                  goto LABEL_9;
                case 5:
                case 7:
                case 8:
                case 9:
                case 0xA:
                case 0xB:
                case 0xC:
                  int64_t v25 = (llvm::SCEV **)*((void *)v12 + 4);
                  goto LABEL_29;
                case 6:
                  int64_t v25 = (llvm::SCEV **)((char *)v12 + 40);
LABEL_29:
                  uint64_t v12 = *v25;
                  continue;
                case 0xE:
                  uint64_t v13 = (char *)*((void *)v12 - 1);
                  goto LABEL_9;
                default:
                  uint64_t v13 = (char *)*((void *)v12 + 4);
LABEL_9:
                  if (*(unsigned char *)(*(void *)v13 + 8) == 15)
                  {
                    PointerBase = llvm::ScalarEvolution::getPointerBase(a1, a2);
                    if (PointerBase == llvm::ScalarEvolution::getPointerBase(PointerBase, v9))
                    {
                      unint64_t v5 = (llvm::SCEV *)llvm::ScalarEvolution::removePointerBase(a1, v5, v15);
                      uint64_t v9 = (const llvm::SCEV *)llvm::ScalarEvolution::removePointerBase(a1, v9, v16);
                      goto LABEL_12;
                    }
                  }
                  uint64_t AddExpr = *((void *)a1 + 6);
                  break;
              }
              break;
            }
          }
          else
          {
LABEL_12:
            uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(a1, v9, 1, 0);
            llvm::ConstantRange::getSignedMin(RangeRef, (uint64_t)&v52);
            if (v53 >= 0x41)
            {
              uint64_t v32 = v52;
              if ((*((void *)v52 + ((v53 - 1) >> 6)) >> (v53 - 1)))
              {
                int v31 = v53 - 1;
                BOOL v33 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v52) == v31;
              }
              else
              {
                BOOL v33 = 0;
              }
              MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
              BOOL v18 = v33;
            }
            else
            {
              BOOL v18 = v52 == (void *)(1 << (v53 - 1));
            }
            if ((a4 & 4) == 0) {
              goto LABEL_15;
            }
            if (!v18) {
              goto LABEL_36;
            }
            BOOL v26 = v18;
            uint64_t v27 = llvm::ScalarEvolution::getRangeRef(a1, v5, 1, 0);
            llvm::ConstantRange::getSignedMin(v27, (uint64_t)&v52);
            unsigned int v28 = v53 - 1;
            if (v53 >= 0x41) {
              unsigned int v29 = (void **)((char *)v52 + 8 * (v28 >> 6));
            }
            else {
              unsigned int v29 = &v52;
            }
            uint64_t v30 = (1 << v28) & (unint64_t)*v29;
            if (v53 >= 0x41 && v52) {
              MEMORY[0x1D25D9CB0]();
            }
            BOOL v18 = v26;
            if (v30) {
LABEL_15:
            }
              uint64_t v19 = 0;
            else {
LABEL_36:
            }
              uint64_t v19 = 4;
            if (v18) {
              uint64_t v20 = 0;
            }
            else {
              uint64_t v20 = 4;
            }
            unint64_t NegativeSCEV = llvm::ScalarEvolution::getNegativeSCEV(a1, (uint64_t)v9, (const llvm::APInt *)v20);
            unint64_t v52 = v54;
            v54[0] = v5;
            v54[1] = NegativeSCEV;
            uint64_t v53 = 0x200000002;
            uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(a1, &v52, v19, a5);
            if (v52 != v54) {
              free(v52);
            }
          }
          unint64_t result = AddExpr;
          break;
      }
      break;
    }
  }
  return result;
}

unint64_t llvm::ScalarEvolution::getStrengthenedNoWrapFlagsFromBinOp(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned char *)(a2 + 17) & 6;
  if (v2 == 6) {
    goto LABEL_43;
  }
  unsigned int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 <= 0x1B)
  {
    unsigned int v6 = *(unsigned __int16 *)(a2 + 18);
    if ((v6 | 2) == 0xF) {
      goto LABEL_4;
    }
  }
  else
  {
    unsigned int v6 = v5 - 28;
    if ((v6 & 0xFFFFFFFD) == 0xD) {
      goto LABEL_4;
    }
  }
  if (v6 != 17)
  {
LABEL_43:
    uint64_t v31 = 0;
    return v2 | (unint64_t)(v31 << 32);
  }
LABEL_4:
  int v7 = *(_DWORD *)(a2 + 20);
  if ((v7 & 0x40000000) != 0) {
    uint64_t v8 = *(unint64_t **)(a2 - 8);
  }
  else {
    uint64_t v8 = (unint64_t *)(a2 - 32 * (v7 & 0x7FFFFFF));
  }
  unint64_t v9 = *v8;
  uint64_t v10 = *(void *)(a1 + 104);
  unsigned int v11 = *(_DWORD *)(a1 + 120);
  if (!v11)
  {
LABEL_12:
    uint64_t v13 = v10 + 48 * v11;
    goto LABEL_13;
  }
  unsigned int v12 = ((v9 >> 4) ^ (v9 >> 9)) & (v11 - 1);
  uint64_t v13 = v10 + 48 * v12;
  uint64_t v14 = *(void *)(v13 + 24);
  if (v14 != v9)
  {
    int v15 = 1;
    while (v14 != -4096)
    {
      unsigned int v16 = v12 + v15++;
      unsigned int v12 = v16 & (v11 - 1);
      uint64_t v13 = v10 + 48 * v12;
      uint64_t v14 = *(void *)(v13 + 24);
      if (v14 == v9) {
        goto LABEL_13;
      }
    }
    goto LABEL_12;
  }
LABEL_13:
  if (v13 == v10 + 48 * v11 || (SCEVIter = *(llvm::detail::IEEEFloat ***)(v13 + 40)) == 0)
  {
    SCEVIter = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v9);
    int v7 = *(_DWORD *)(a2 + 20);
  }
  if ((v7 & 0x40000000) != 0) {
    uint64_t v18 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v18 = a2 - 32 * (v7 & 0x7FFFFFF);
  }
  unint64_t v19 = *(void *)(v18 + 32);
  uint64_t v20 = *(void *)(a1 + 104);
  unsigned int v21 = *(_DWORD *)(a1 + 120);
  if (v21)
  {
    unsigned int v22 = ((v19 >> 4) ^ (v19 >> 9)) & (v21 - 1);
    uint64_t v23 = v20 + 48 * v22;
    uint64_t v24 = *(void *)(v23 + 24);
    if (v24 == v19) {
      goto LABEL_24;
    }
    int v25 = 1;
    while (v24 != -4096)
    {
      unsigned int v26 = v22 + v25++;
      unsigned int v22 = v26 & (v21 - 1);
      uint64_t v23 = v20 + 48 * v22;
      uint64_t v24 = *(void *)(v23 + 24);
      if (v24 == v19) {
        goto LABEL_24;
      }
    }
  }
  uint64_t v23 = v20 + 48 * v21;
LABEL_24:
  if (v23 == v20 + 48 * v21 || (uint64_t v27 = *(llvm::detail::IEEEFloat ***)(v23 + 40)) == 0) {
    uint64_t v27 = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v19);
  }
  char v28 = *(unsigned char *)(a2 + 17);
  if ((v28 & 2) != 0)
  {
    uint64_t v31 = 0;
  }
  else
  {
    unsigned int v29 = *(unsigned __int8 *)(a2 + 16);
    if (v29 <= 0x1B) {
      int v30 = *(unsigned __int16 *)(a2 + 18);
    }
    else {
      int v30 = v29 - 28;
    }
    uint64_t v31 = llvm::ScalarEvolution::willNotOverflow((llvm::ScalarEvolution *)a1, v30, 0, SCEVIter, v27);
    if (v31) {
      v2 |= 2u;
    }
    char v28 = *(unsigned char *)(a2 + 17);
  }
  if ((v28 & 4) == 0)
  {
    unsigned int v32 = *(unsigned __int8 *)(a2 + 16);
    if (v32 <= 0x1B) {
      int v33 = *(unsigned __int16 *)(a2 + 18);
    }
    else {
      int v33 = v32 - 28;
    }
    if (llvm::ScalarEvolution::willNotOverflow((llvm::ScalarEvolution *)a1, v33, 1, SCEVIter, v27))
    {
      v2 |= 4u;
      uint64_t v31 = 1;
    }
    else
    {
      uint64_t v31 = v31;
    }
  }
  return v2 | (unint64_t)(v31 << 32);
}

uint64_t llvm::ScalarEvolution::getSCEV(llvm::ScalarEvolution *this, llvm::Value *a2)
{
  uint64_t v2 = *((void *)this + 13);
  unsigned int v3 = *((_DWORD *)this + 30);
  if (!v3)
  {
LABEL_7:
    uint64_t v5 = v2 + 48 * v3;
    goto LABEL_8;
  }
  unsigned int v4 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v5 = v2 + 48 * v4;
  unsigned int v6 = *(llvm::Value **)(v5 + 24);
  if (v6 != a2)
  {
    int v7 = 1;
    while (v6 != (llvm::Value *)-4096)
    {
      unsigned int v8 = v4 + v7++;
      unsigned int v4 = v8 & (v3 - 1);
      uint64_t v5 = v2 + 48 * v4;
      unsigned int v6 = *(llvm::Value **)(v5 + 24);
      if (v6 == a2) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v5 == v2 + 48 * v3 || !*(void *)(v5 + 40)) {
    return llvm::ScalarEvolution::createSCEVIter(this, (unint64_t)a2);
  }
  else {
    return *(void *)(v5 + 40);
  }
}

BOOL llvm::ScalarEvolution::isLoopInvariant(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::Loop *a3)
{
  return llvm::ScalarEvolution::getLoopDisposition(this, a2, a3) == 1;
}

BOOL llvm::ScalarEvolution::properlyDominates(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::BasicBlock *a3)
{
  return llvm::ScalarEvolution::getBlockDisposition(this, a2, a3) == 2;
}

void sub_1CC0ECBE8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v28 = a2;
  unint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= 2)
  {
    v27[0] = 0;
    v27[1] = 0;
    unsigned int v26 = v27;
    v25[0] = 0;
    v25[1] = 0;
    v23[3] = a3;
    uint64_t v24 = (uint64_t *)v25;
    v23[0] = &v26;
    v23[1] = &v24;
    v23[2] = &v28;
    uint64_t v5 = *(int8x16_t **)a1;
    if (v3 == 2)
    {
      unint64_t v6 = sub_1CC1320A4((uint64_t)&v26, &v24, a2, v5->u64[1], v5->i64[0], a3, 0);
      if (HIDWORD(v6)) {
        BOOL v7 = (v6 & 0x80000000) == 0;
      }
      else {
        BOOL v7 = 1;
      }
      if (!v7) {
        *uint64_t v5 = vextq_s8(*v5, *v5, 8uLL);
      }
    }
    else
    {
      unsigned int v29 = v23;
      if (v3 < 0x81)
      {
LABEL_12:
        sub_1CC132DE8((unint64_t)v5, (unint64_t *)v5 + v3, &v29, v3, 0, 0);
      }
      else
      {
        unsigned int v8 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
        unint64_t v9 = v3;
        while (1)
        {
          uint64_t v10 = (unint64_t *)operator new(8 * v9, v8);
          if (v10) {
            break;
          }
          BOOL v11 = v9 > 1;
          v9 >>= 1;
          if (!v11) {
            goto LABEL_12;
          }
        }
        unsigned int v12 = v10;
        sub_1CC132DE8((unint64_t)v5, (unint64_t *)v5 + v3, &v29, v3, v10, v9);
        operator delete(v12);
      }
      unsigned int v13 = *(_DWORD *)(a1 + 8);
      unsigned int v14 = v13 - 2;
      if (v13 != 2)
      {
        unsigned int v15 = 0;
        do
        {
          unsigned int v16 = v15 + 1;
          unsigned int v17 = v13;
          if (v15 + 1 != v13)
          {
            uint64_t v18 = *(void *)(*(void *)a1 + 8 * v15);
            int v19 = *(unsigned __int16 *)(v18 + 24);
            do
            {
              uint64_t v20 = *(int8x16_t **)a1;
              uint64_t v21 = *(void *)(*(void *)a1 + 8 * v16);
              if (*(unsigned __int16 *)(v21 + 24) != v19) {
                break;
              }
              if (v21 == v18)
              {
                uint64_t v22 = v20->i64[++v15];
                v20->i64[v15] = v18;
                v20->i64[v16] = v22;
                if (v15 == v14) {
                  goto LABEL_24;
                }
              }
              ++v16;
            }
            while (v13 != v16);
            unsigned int v17 = v15 + 1;
          }
          unsigned int v15 = v17;
        }
        while (v17 != v14);
      }
    }
LABEL_24:
    sub_1CD40B1BC(v25[0]);
    sub_1CD40B1BC(v27[0]);
  }
}

uint64_t llvm::ScalarEvolution::getOrCreateAddExpr(uint64_t a1, uint64_t *a2, uint64_t a3, __int16 a4)
{
  unint64_t v6 = a2;
  v69[16] = *MEMORY[0x1E4F143B8];
  __s1 = v66;
  v66[0] = 4;
  uint64_t v65 = 0x2000000001;
  uint64_t v8 = 8 * a3;
  unsigned int v9 = 1;
  if (a3)
  {
    uint64_t v10 = 8 * a3;
    BOOL v11 = a2;
    do
    {
      uint64_t v12 = *v11;
      if (v9 >= HIDWORD(v65)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__s1 + v9) = v12;
      unsigned int v13 = v65 + 1;
      LODWORD(v65) = v13;
      if (v13 >= HIDWORD(v65)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__s1 + v13) = HIDWORD(v12);
      unsigned int v9 = v65 + 1;
      LODWORD(v65) = v65 + 1;
      ++v11;
      v10 -= 8;
    }
    while (v10);
    unsigned int v14 = __s1;
  }
  else
  {
    unsigned int v14 = v66;
  }
  unsigned int v15 = (uint64_t *)(*(void *)(a1 + 832)
                  + 8 * ((*(_DWORD *)(a1 + 840) - 1) & sub_1CC13A6B8(v14, (uint64_t)v14 + 4 * v9)));
  uint64_t v16 = *v15;
  unint64_t v67 = v69;
  uint64_t v68 = 0x2000000000;
  if (v16) {
    BOOL v17 = (v16 & 1) == 0;
  }
  else {
    BOOL v17 = 0;
  }
  if (v17)
  {
    uint64_t v18 = v6;
    int v19 = __s1;
    while (*(void *)(v16 + 16) != v65
         || memcmp(__s1, *(const void **)(v16 + 8), 4 * v65))
    {
      LODWORD(v68) = 0;
      uint64_t v16 = *(void *)v16;
      if (v16) {
        BOOL v20 = (v16 & 1) == 0;
      }
      else {
        BOOL v20 = 0;
      }
      if (!v20)
      {
        unint64_t v6 = v18;
        goto LABEL_20;
      }
    }
  }
  else
  {
LABEL_20:
    uint64_t v21 = sub_1CB906F34((uint64_t *)(a1 + 864), v8, 3);
    uint64_t v22 = (void *)v21;
    if (a3)
    {
      uint64_t v23 = v8;
      uint64_t v24 = (void *)v21;
      int v25 = v6;
      do
      {
        uint64_t v26 = *v25++;
        *v24++ = v26;
        v23 -= 8;
      }
      while (v23);
    }
    *(void *)(a1 + 944) += 56;
    uint64_t v27 = *(void *)(a1 + 864);
    if (((v27 + 7) & 0xFFFFFFFFFFFFFFF8) - v27 + 56 > *(void *)(a1 + 872) - v27)
    {
      uint64_t v51 = v21;
      __int16 v52 = a4;
      unsigned int v53 = *(_DWORD *)(a1 + 888) >> 7;
      if (v53 >= 0x1E) {
        LOBYTE(v53) = 30;
      }
      uint64_t v54 = 4096 << v53;
      uint64_t v16 = (uint64_t)operator new(4096 << v53, (std::align_val_t)8uLL);
      unsigned int v55 = *(_DWORD *)(a1 + 888);
      if (v55 >= *(_DWORD *)(a1 + 892)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 880) + 8 * v55) = v16;
      ++*(_DWORD *)(a1 + 888);
      *(void *)(a1 + 872) = v16 + v54;
      a4 = v52;
      uint64_t v22 = (void *)v51;
    }
    else
    {
      uint64_t v16 = (v27 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(a1 + 864) = v16 + 56;
    uint64_t v28 = sub_1CB906F34((uint64_t *)(a1 + 864), 4 * v65, 2);
    uint64_t v29 = v28;
    __int16 v59 = a4;
    unsigned int v58 = v15;
    if (v65)
    {
      int v30 = (int *)__s1;
      uint64_t v31 = 4 * v65;
      unsigned int v32 = (_DWORD *)v28;
      do
      {
        int v33 = *v30++;
        *v32++ = v33;
        v31 -= 4;
      }
      while (v31);
      uint64_t v34 = v65;
    }
    else
    {
      uint64_t v34 = 0;
    }
    LODWORD(v68) = 16;
    LOWORD(v35) = 1;
    unint64_t v67 = (void *)1;
    if (a3)
    {
      uint64_t v57 = v6;
      uint64_t v35 = 1;
      unsigned int v36 = v22;
      unsigned int v37 = 16;
      int v56 = v36;
      do
      {
        uint64_t v38 = *(unsigned __int16 *)(*v36 + 26);
        int v61 = 16;
        uint64_t v60 = v38;
        llvm::APInt::uadd_sat((llvm::APInt *)&v67, (const llvm::APInt *)&v60, (uint64_t)&v62);
        if (v37 >= 0x41 && v35) {
          MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
        }
        uint64_t v35 = (uint64_t)v62;
        unint64_t v67 = v62;
        unsigned int v37 = v63;
        LODWORD(v68) = v63;
        ++v36;
        v8 -= 8;
      }
      while (v8);
      if (v63 >= 0x41)
      {
        uint64_t v39 = *v62;
        MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
        LOWORD(v35) = v39;
      }
      uint64_t v22 = v56;
      unint64_t v6 = v57;
    }
    *(void *)uint64_t v16 = 0;
    *(void *)(v16 + 8) = v29;
    *(void *)(v16 + 16) = v34;
    *(_WORD *)(v16 + 24) = 4;
    *(_WORD *)(v16 + 26) = v35;
    *(_WORD *)(v16 + 28) = 0;
    *(void *)(v16 + 32) = v22;
    *(void *)(v16 + 40) = a3;
    if (!a3)
    {
      a4 = v59;
      uint64_t v41 = (uint64_t)v58;
LABEL_52:
      while (2)
      {
        uint64_t v46 = *v22;
        switch(*(_WORD *)(*v22 + 24))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            goto LABEL_79;
          case 4:
            goto LABEL_78;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            uint64_t v22 = *(void **)(v46 + 32);
            continue;
          case 6:
            uint64_t v22 = (void *)(v46 + 40);
            continue;
          case 0xE:
            goto LABEL_77;
          default:
            goto LABEL_53;
        }
      }
    }
    unint64_t v40 = v22;
    a4 = v59;
    uint64_t v41 = (uint64_t)v58;
    while (1)
    {
      unint64_t v42 = v40;
      while (2)
      {
        uint64_t v43 = *v42;
        switch(*(_WORD *)(v43 + 24))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            uint64_t v44 = v43 + 40;
            break;
          case 4:
            uint64_t v44 = v43 + 48;
            break;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            unint64_t v42 = *(uint64_t **)(v43 + 32);
            continue;
          case 6:
            unint64_t v42 = (uint64_t *)(v43 + 40);
            continue;
          case 0xE:
            uint64_t v44 = *(void *)(v43 - 8);
            break;
          default:
            uint64_t v44 = *(void *)(v43 + 32);
            break;
        }
        break;
      }
      if (*(unsigned char *)(*(void *)v44 + 8) == 15) {
        break;
      }
      if (++v40 == &v22[a3]) {
        goto LABEL_52;
      }
    }
    while (2)
    {
      uint64_t v46 = *v40;
      switch(*(_WORD *)(v46 + 24))
      {
        case 1:
        case 2:
        case 3:
        case 0xD:
LABEL_79:
          unint64_t v47 = (void *)(v46 + 40);
          break;
        case 4:
LABEL_78:
          unint64_t v47 = (void *)(v46 + 48);
          break;
        case 5:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          unint64_t v40 = *(uint64_t **)(v46 + 32);
          continue;
        case 6:
          unint64_t v40 = (uint64_t *)(v46 + 40);
          continue;
        case 0xE:
LABEL_77:
          unint64_t v47 = *(void **)(v46 - 8);
          break;
        default:
LABEL_53:
          unint64_t v47 = *(void **)(v46 + 32);
          break;
      }
      break;
    }
    *(void *)(v16 + 48) = *v47;
    unsigned int v48 = *(_DWORD *)(a1 + 844) + 1;
    int v49 = *(_DWORD *)(a1 + 840);
    if (v48 > 2 * v49)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 832, 2 * v49, (uint64_t)off_1F2607658);
      unint64_t v67 = v69;
      uint64_t v68 = 0x2000000000;
      uint64_t v41 = *(void *)(a1 + 832)
          + 8
          * ((*(_DWORD *)(a1 + 840) - 1) & sub_1CC13A6B8(*(void **)(v16 + 8), *(void *)(v16 + 8) + 4 * *(void *)(v16 + 16)));
      if (v67 != v69) {
        free(v67);
      }
      unsigned int v48 = *(_DWORD *)(a1 + 844) + 1;
    }
    *(_DWORD *)(a1 + 844) = v48;
    uint64_t v50 = *(void *)v41;
    if (!*(void *)v41) {
      uint64_t v50 = v41 | 1;
    }
    *(void *)uint64_t v16 = v50;
    *(void *)uint64_t v41 = v16;
    llvm::ScalarEvolution::registerUser(a1, v16, v6, a3);
    int v19 = __s1;
  }
  *(_WORD *)(v16 + 28) |= a4;
  if (v19 != v66) {
    free(v19);
  }
  return v16;
}

uint64_t llvm::ScalarEvolution::findExistingSCEVInCache(uint64_t a1, int a2, uint64_t *a3, uint64_t a4)
{
  v17[16] = *MEMORY[0x1E4F143B8];
  LODWORD(v15[0]) = a2;
  unsigned int v13 = 1;
  if (a4)
  {
    uint64_t v5 = 8 * a4;
    LODWORD(v6) = 1;
    do
    {
      uint64_t v7 = *a3;
      if (v6 >= 0x20) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v15 + v6) = v7;
      unsigned int v8 = v13 + 1;
      unsigned int v14 = v8;
      if (v8 >= 0x20) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v15 + v8) = HIDWORD(v7);
      uint64_t v6 = v8 + 1;
      unsigned int v13 = v14 + 1;
      ++a3;
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = 1;
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 832)
                 + 8 * ((*(_DWORD *)(a1 + 840) - 1) & sub_1CC13A6B8(v15, (uint64_t)v15 + 4 * v6)));
  v15[16] = v17;
  uint64_t v16 = 0x2000000000;
  if (v9) {
    BOOL v10 = (v9 & 1) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (!v10) {
    return 0;
  }
  while (*(void *)(v9 + 16) != v13 || memcmp(v15, *(const void **)(v9 + 8), 4 * v13))
  {
    LODWORD(v16) = 0;
    uint64_t v9 = *(void *)v9;
    if (v9) {
      BOOL v11 = (v9 & 1) == 0;
    }
    else {
      BOOL v11 = 0;
    }
    if (!v11) {
      return 0;
    }
  }
  return v9;
}

uint64_t sub_1CC0ED65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v8 = a4;
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *a4;
  if (*a4) {
    BOOL v13 = *(unsigned __int16 *)(*a4 + 24) == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    int v113 = 0;
    int v14 = 0;
    while (1)
    {
      uint64_t v17 = *(unsigned int *)(a6 + 8);
      uint64_t v18 = *(void **)a6;
      if (v17 >= 0x41)
      {
        int v19 = 0;
        int64_t v20 = (unint64_t)(v17 + 63) >> 6;
        do
        {
          BOOL v21 = v20-- < 1;
          if (v21) {
            break;
          }
          unint64_t v22 = v18[v20];
          v19 += __clz(v22);
        }
        while (!v22);
        int v23 = v17 | 0xFFFFFFC0;
        if ((v17 & 0x3F) == 0) {
          int v23 = 0;
        }
        if ((v17 - v19 - v23) > 0x40) {
          goto LABEL_27;
        }
        uint64_t v18 = (void *)*v18;
      }
      if (v18 == (void *)1)
      {
        uint64_t v24 = *(unsigned int *)(a3 + 8);
        int v25 = *(void **)a3;
        if (v24 >= 0x41)
        {
          int v26 = 0;
          int64_t v27 = (unint64_t)(v24 + 63) >> 6;
          do
          {
            BOOL v21 = v27-- < 1;
            if (v21) {
              break;
            }
            unint64_t v28 = v25[v27];
            v26 += __clz(v28);
          }
          while (!v28);
          int v29 = v24 | 0xFFFFFFC0;
          if ((v24 & 0x3F) == 0) {
            int v29 = 0;
          }
          if ((v24 - v26 - v29) > 0x40) {
            goto LABEL_27;
          }
          int v25 = (void *)*v25;
        }
        if (!v25)
        {
          uint64_t v30 = *(void *)(v12 + 32);
          uint64_t v34 = *(unsigned int *)(v30 + 32);
          if (v34 > 0x40)
          {
            int v35 = 0;
            int64_t v36 = (unint64_t)(v34 + 63) >> 6;
            do
            {
              BOOL v21 = v36-- < 1;
              if (v21) {
                break;
              }
              unint64_t v37 = *(void *)(*(void *)(v30 + 24) + 8 * v36);
              v35 += __clz(v37);
            }
            while (!v37);
            int v38 = v34 | 0xFFFFFFC0;
            if ((v34 & 0x3F) == 0) {
              int v38 = 0;
            }
            if (v35 + v38 != v34) {
              goto LABEL_28;
            }
          }
          else if (*(void *)(v30 + 24))
          {
            goto LABEL_28;
          }
        }
      }
LABEL_27:
      uint64_t v30 = *(void *)(v12 + 32);
      int v113 = 1;
LABEL_28:
      llvm::APInt::operator*(a6, (void *)(v30 + 24), (uint64_t)&v118);
      uint64_t v31 = *(unsigned int *)(a3 + 8);
      if (v31 >= 0x41)
      {
        uint64_t v39 = 0;
        BOOL v40 = 0;
        uint64_t v41 = *(void **)a3;
        unsigned int v32 = (char *)v118;
        unint64_t v42 = (unint64_t)(v31 + 63) >> 6;
        do
        {
          unint64_t v43 = v41[v39];
          unint64_t v44 = *(void *)&v32[v39 * 8] + v43;
          BOOL v45 = v44 < v43;
          BOOL v46 = v44 + 1 <= v43;
          if (v40)
          {
            ++v44;
            BOOL v40 = v46;
          }
          else
          {
            BOOL v40 = v45;
          }
          v41[v39++] = v44;
        }
        while (v42 != v39);
        *(void *)(*(void *)a3 + 8 * (v42 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v31;
      }
      else
      {
        unsigned int v32 = (char *)v118;
        if (v31) {
          unint64_t v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v31;
        }
        else {
          unint64_t v33 = 0;
        }
        *(void *)a3 = v33 & ((unint64_t)v118 + *(void *)a3);
      }
      if (v119 >= 0x41 && v32) {
        MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
      }
      uint64_t v15 = (v14 + 1);
      int v14 = v15;
      uint64_t v12 = v8[v15];
      if (!v12 || *(_WORD *)(v12 + 24)) {
        goto LABEL_6;
      }
    }
  }
  int v14 = 0;
  int v113 = 0;
  uint64_t v15 = 0;
LABEL_6:
  if (v15 != a5)
  {
    uint64_t v111 = v8;
    while (1)
    {
      uint64_t v47 = v8[v15];
      if (v47) {
        BOOL v48 = *(unsigned __int16 *)(v47 + 24) == 5;
      }
      else {
        BOOL v48 = 0;
      }
      if (v48)
      {
        uint64_t v49 = **(void **)(v47 + 32);
        if (!*(_WORD *)(v49 + 24))
        {
          llvm::APInt::operator*(a6, (void *)(*(void *)(v49 + 32) + 24), (uint64_t)&__src);
          uint64_t v69 = *(void *)(v47 + 32);
          uint64_t v70 = *(void *)(v47 + 40);
          if (v70 == 2)
          {
            uint64_t v71 = *(void *)(v69 + 8);
            if (*(_WORD *)(v71 + 24) == 4)
            {
              v113 |= sub_1CC0ED65C(a1, a2, a3, *(void *)(v71 + 32), *(void *)(v71 + 40), &__src, a7);
              unsigned int v72 = v117;
              unsigned int v8 = v111;
LABEL_126:
              if (v72 >= 0x41 && __src) {
                MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
              }
              goto LABEL_88;
            }
          }
          unint64_t v118 = v120;
          uint64_t v119 = 0x400000000;
          unint64_t v73 = 8 * v70 - 8;
          if (v73 >= 0x21) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v74 = 0;
          if (v70 != 1)
          {
            memcpy(v118, (const void *)(v69 + 8), 8 * v70 - 8);
            int v74 = v119;
          }
          unsigned int v8 = v111;
          LODWORD(v119) = v74 + (v73 >> 3);
          uint64_t MulExpr = llvm::ScalarEvolution::getMulExpr(a7, &v118, 0, 0);
          v114[0] = MulExpr;
          unsigned int v72 = v117;
          unsigned int v115 = v117;
          if (v117 > 0x40) {
            operator new[]();
          }
          uint64_t v76 = __src;
          uint64_t v109 = (uint64_t *)__src;
          v114[1] = (uint64_t)__src;
          int v77 = *(_DWORD *)(a1 + 16);
          if (v77)
          {
            uint64_t v78 = *(void *)a1;
            int v79 = v77 - 1;
            unsigned int v80 = v79 & ((MulExpr >> 4) ^ (MulExpr >> 9));
            unint64_t v81 = (uint64_t *)(*(void *)a1 + 24 * v80);
            uint64_t v82 = *v81;
            if (MulExpr == *v81)
            {
LABEL_111:
              uint64_t v87 = v78 + 24 * v80;
              uint64_t v88 = (unint64_t *)(v87 + 8);
              uint64_t v89 = *(unsigned int *)(v87 + 16);
              if (v89 >= 0x41)
              {
                uint64_t v102 = 0;
                int v103 = (unint64_t *)*v88;
                unint64_t v104 = (unint64_t)(v89 + 63) >> 6;
                unint64_t v105 = v104;
                do
                {
                  uint64_t v106 = *v109++;
                  unint64_t v107 = v106 + *v103;
                  BOOL v108 = v107 + 1 <= *v103;
                  if (v102)
                  {
                    ++v107;
                    uint64_t v102 = v108;
                  }
                  else
                  {
                    uint64_t v102 = v107 < *v103;
                  }
                  *v103++ = v107;
                  --v105;
                }
                while (v105);
                *(void *)(*v88 + 8 * (v104 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v89;
              }
              else
              {
                if (v89) {
                  unint64_t v90 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v89;
                }
                else {
                  unint64_t v90 = 0;
                }
                *uint64_t v88 = v90 & ((unint64_t)__src + *v88);
              }
              int v113 = 1;
              unsigned int v8 = v111;
            }
            else
            {
              uint64_t v83 = 0;
              int v84 = 1;
              while (v82 != -4096)
              {
                if (v83) {
                  BOOL v85 = 0;
                }
                else {
                  BOOL v85 = v82 == -8192;
                }
                if (v85) {
                  uint64_t v83 = v81;
                }
                unsigned int v86 = v80 + v84++;
                unsigned int v80 = v86 & v79;
                unint64_t v81 = (uint64_t *)(v78 + 24 * (v86 & v79));
                uint64_t v82 = *v81;
                if (MulExpr == *v81) {
                  goto LABEL_111;
                }
              }
              if (v83) {
                int64_t v91 = v83;
              }
              else {
                int64_t v91 = v81;
              }
              unsigned int v8 = v111;
LABEL_122:
              unint64_t v92 = sub_1CC1339EC(a1, v114, v91);
              *((_DWORD *)v92 + 4) = v72;
              *unint64_t v92 = MulExpr;
              v92[1] = (uint64_t)v76;
              unint64_t v93 = *(unsigned int *)(a2 + 8);
              if (v93 >= *(unsigned int *)(a2 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)a2 + 8 * v93) = MulExpr;
              ++*(_DWORD *)(a2 + 8);
            }
            if (v118 != v120) {
              free(v118);
            }
            goto LABEL_126;
          }
          int64_t v91 = 0;
          goto LABEL_122;
        }
      }
      unint64_t v118 = (void *)v8[v15];
      unsigned int v50 = *(_DWORD *)(a6 + 8);
      v120[0] = v50;
      if (v50 > 0x40) {
        operator new[]();
      }
      uint64_t v51 = *(void **)a6;
      uint64_t v119 = *(void *)a6;
      int v52 = *(_DWORD *)(a1 + 16);
      if (!v52) {
        break;
      }
      uint64_t v53 = *(void *)a1;
      int v54 = v52 - 1;
      unsigned int v55 = v54 & ((v47 >> 4) ^ (v47 >> 9));
      int v56 = (uint64_t *)(*(void *)a1 + 24 * v55);
      uint64_t v57 = *v56;
      if (v47 != *v56)
      {
        unsigned int v58 = 0;
        int v59 = 1;
        while (v57 != -4096)
        {
          if (v58) {
            BOOL v60 = 0;
          }
          else {
            BOOL v60 = v57 == -8192;
          }
          if (v60) {
            unsigned int v58 = v56;
          }
          unsigned int v61 = v55 + v59++;
          unsigned int v55 = v61 & v54;
          int v56 = (uint64_t *)(v53 + 24 * (v61 & v54));
          uint64_t v57 = *v56;
          if (v47 == *v56) {
            goto LABEL_75;
          }
        }
        if (v58) {
          int64_t v66 = v58;
        }
        else {
          int64_t v66 = v56;
        }
        unsigned int v8 = v111;
        goto LABEL_86;
      }
LABEL_75:
      uint64_t v62 = v53 + 24 * v55;
      unsigned int v63 = (unint64_t *)(v62 + 8);
      uint64_t v64 = *(unsigned int *)(v62 + 16);
      if (v64 >= 0x41)
      {
        uint64_t v94 = 0;
        uint64_t v95 = (unint64_t *)*v63;
        unint64_t v96 = *(uint64_t **)a6;
        unint64_t v97 = (unint64_t)(v64 + 63) >> 6;
        unint64_t v98 = v97;
        do
        {
          uint64_t v99 = *v96++;
          unint64_t v100 = v99 + *v95;
          BOOL v101 = v100 + 1 <= *v95;
          if (v94)
          {
            ++v100;
            uint64_t v94 = v101;
          }
          else
          {
            uint64_t v94 = v100 < *v95;
          }
          *v95++ = v100;
          --v98;
        }
        while (v98);
        *(void *)(*v63 + 8 * (v97 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v64;
      }
      else
      {
        if (v64) {
          unint64_t v65 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v64;
        }
        else {
          unint64_t v65 = 0;
        }
        *unsigned int v63 = v65 & (*v63 + *(void *)a6);
      }
      int v113 = 1;
      unsigned int v8 = v111;
LABEL_88:
      uint64_t v15 = ++v14;
      if (v14 == a5) {
        return v113 & 1;
      }
    }
    int64_t v66 = 0;
LABEL_86:
    unint64_t v67 = sub_1CC1339EC(a1, (uint64_t *)&v118, v66);
    *((_DWORD *)v67 + 4) = v50;
    *unint64_t v67 = v47;
    v67[1] = (uint64_t)v51;
    unint64_t v68 = *(unsigned int *)(a2 + 8);
    if (v68 >= *(unsigned int *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a2 + 8 * v68) = v47;
    ++*(_DWORD *)(a2 + 8);
    goto LABEL_88;
  }
  return v113 & 1;
}

const llvm::Value *llvm::ScalarEvolution::getDefiningScopeBound(llvm::ScalarEvolution *a1, uint64_t *a2, uint64_t a3)
{
  return llvm::ScalarEvolution::getDefiningScopeBound(a1, a2, a3, &v4);
}

uint64_t llvm::ScalarEvolution::isGuaranteedToTransferExecutionTo(llvm::ScalarEvolution *this, const llvm::Instruction *a2, const llvm::Instruction *a3)
{
  uint64_t v5 = *((void *)a3 + 5);
  if (*((void *)a2 + 5) == v5)
  {
    if (llvm::isGuaranteedToTransferExecutionToSuccessor((uint64_t)a2 + 24, (uint64_t)a3 + 24, 32)) {
      return 1;
    }
    uint64_t v5 = *((void *)a3 + 5);
  }
  uint64_t v6 = (uint64_t *)*((void *)this + 5);
  int v7 = *((_DWORD *)v6 + 4);
  if (v7)
  {
    uint64_t v8 = *v6;
    unsigned int v9 = v7 - 1;
    uint64_t v10 = ((v5 >> 4) ^ (v5 >> 9)) & (v7 - 1);
    uint64_t v11 = *(void *)(v8 + 16 * v10);
    if (v5 == v11)
    {
LABEL_7:
      uint64_t v14 = *(void *)(v8 + 16 * v10 + 8);
      if (v14)
      {
        if (**(void **)(v14 + 32) == v5) {
          llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
        }
      }
    }
    else
    {
      int v12 = 1;
      while (v11 != -4096)
      {
        int v13 = v10 + v12++;
        uint64_t v10 = v13 & v9;
        uint64_t v11 = *(void *)(v8 + 16 * v10);
        if (v5 == v11) {
          goto LABEL_7;
        }
      }
    }
  }
  return 0;
}

uint64_t llvm::ScalarEvolution::getOrCreateAddRecExpr(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = a4;
  v80[16] = *MEMORY[0x1E4F143B8];
  __s1 = v77;
  v77[0] = 7;
  uint64_t v76 = 0x2000000001;
  uint64_t v10 = 8 * a3;
  unsigned int v11 = 1;
  if (a3)
  {
    uint64_t v12 = 8 * a3;
    int v13 = a2;
    do
    {
      uint64_t v14 = *v13;
      if (v11 >= HIDWORD(v76)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__s1 + v11) = v14;
      unsigned int v15 = v76 + 1;
      LODWORD(v76) = v15;
      if (v15 >= HIDWORD(v76)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__s1 + v15) = HIDWORD(v14);
      unsigned int v11 = v76 + 1;
      LODWORD(v76) = v76 + 1;
      ++v13;
      v12 -= 8;
    }
    while (v12);
    if (v11 >= HIDWORD(v76)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  *((_DWORD *)__s1 + v11) = a4;
  unsigned int v16 = v76 + 1;
  LODWORD(v76) = v16;
  if (v16 >= HIDWORD(v76)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((_DWORD *)__s1 + v16) = HIDWORD(a4);
  LODWORD(v76) = v76 + 1;
  uint64_t v17 = *(void *)(a1 + 832)
      + 8 * ((*(_DWORD *)(a1 + 840) - 1) & sub_1CC13A6B8(__s1, (uint64_t)__s1 + 4 * v76));
  uint64_t v18 = *(void *)v17;
  uint64_t v78 = v80;
  uint64_t v79 = 0x2000000000;
  if (v18) {
    BOOL v19 = (v18 & 1) == 0;
  }
  else {
    BOOL v19 = 0;
  }
  if (!v19)
  {
    uint64_t v70 = a3;
LABEL_20:
    uint64_t v69 = sub_1CB906F34((uint64_t *)(a1 + 864), v10, 3);
    if (v70)
    {
      uint64_t v21 = v10;
      unint64_t v22 = (void *)v69;
      int v23 = a2;
      do
      {
        uint64_t v24 = *v23++;
        *v22++ = v24;
        v21 -= 8;
      }
      while (v21);
    }
    *(void *)(a1 + 944) += 56;
    uint64_t v25 = *(void *)(a1 + 864);
    if (((v25 + 7) & 0xFFFFFFFFFFFFFFF8) - v25 + 56 > *(void *)(a1 + 872) - v25)
    {
      unsigned int v64 = *(_DWORD *)(a1 + 888) >> 7;
      if (v64 >= 0x1E) {
        LOBYTE(v64) = 30;
      }
      uint64_t v65 = 4096 << v64;
      uint64_t v18 = (uint64_t)operator new(4096 << v64, (std::align_val_t)8uLL);
      unsigned int v66 = *(_DWORD *)(a1 + 888);
      if (v66 >= *(_DWORD *)(a1 + 892)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 880) + 8 * v66) = v18;
      ++*(_DWORD *)(a1 + 888);
      *(void *)(a1 + 872) = v18 + v65;
    }
    else
    {
      uint64_t v18 = (v25 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(a1 + 864) = v18 + 56;
    uint64_t v26 = sub_1CB906F34((uint64_t *)(a1 + 864), 4 * v76, 2);
    uint64_t v27 = v26;
    if (v76)
    {
      unint64_t v28 = (int *)__s1;
      uint64_t v29 = 4 * v76;
      uint64_t v30 = (_DWORD *)v26;
      do
      {
        int v31 = *v28++;
        *v30++ = v31;
        v29 -= 4;
      }
      while (v29);
      uint64_t v32 = v76;
    }
    else
    {
      uint64_t v32 = 0;
    }
    LODWORD(v79) = 16;
    LOWORD(v33) = 1;
    uint64_t v78 = (void *)1;
    if (v70)
    {
      uint64_t v67 = v6;
      int v68 = a5;
      uint64_t v33 = 1;
      unsigned int v34 = 16;
      uint64_t v35 = v69;
      do
      {
        uint64_t v36 = *(unsigned __int16 *)(*(void *)v35 + 26);
        int v72 = 16;
        uint64_t v71 = v36;
        llvm::APInt::uadd_sat((llvm::APInt *)&v78, (const llvm::APInt *)&v71, (uint64_t)&v73);
        if (v34 >= 0x41 && v33) {
          MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
        }
        uint64_t v33 = (uint64_t)v73;
        uint64_t v78 = v73;
        unsigned int v34 = v74;
        LODWORD(v79) = v74;
        v35 += 8;
        v10 -= 8;
      }
      while (v10);
      if (v74 >= 0x41)
      {
        uint64_t v37 = *v73;
        MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
        LOWORD(v33) = v37;
      }
      a5 = v68;
      uint64_t v6 = v67;
    }
    *(void *)uint64_t v18 = 0;
    *(void *)(v18 + 8) = v27;
    *(void *)(v18 + 16) = v32;
    *(_WORD *)(v18 + 24) = 7;
    *(_WORD *)(v18 + 26) = v33;
    *(_WORD *)(v18 + 28) = 0;
    *(void *)(v18 + 32) = v69;
    *(void *)(v18 + 40) = v70;
    *(void *)(v18 + 48) = v6;
    unsigned int v38 = *(_DWORD *)(a1 + 844) + 1;
    int v39 = *(_DWORD *)(a1 + 840);
    if (v38 > 2 * v39)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 832, 2 * v39, (uint64_t)off_1F2607658);
      uint64_t v78 = v80;
      uint64_t v79 = 0x2000000000;
      uint64_t v17 = *(void *)(a1 + 832)
          + 8
          * ((*(_DWORD *)(a1 + 840) - 1) & sub_1CC13A6B8(*(void **)(v18 + 8), *(void *)(v18 + 8) + 4 * *(void *)(v18 + 16)));
      if (v78 != v80) {
        free(v78);
      }
      unsigned int v38 = *(_DWORD *)(a1 + 844) + 1;
    }
    *(_DWORD *)(a1 + 844) = v38;
    uint64_t v40 = *(void *)v17;
    if (!*(void *)v17) {
      uint64_t v40 = v17 | 1;
    }
    *(void *)uint64_t v18 = v40;
    *(void *)uint64_t v17 = v18;
    unsigned int v41 = *(_DWORD *)(a1 + 976);
    unsigned int v42 = v6 >> 4;
    if (v41)
    {
      uint64_t v43 = *(void *)(a1 + 960);
      unsigned int v44 = (v41 - 1) & (v42 ^ (v6 >> 9));
      BOOL v45 = (_DWORD *)(v43 + 56 * v44);
      uint64_t v46 = *(void *)v45;
      if (*(void *)v45 == v6)
      {
LABEL_41:
        unsigned int v47 = v45[4];
        if (v47 >= v45[5]) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*((void *)v45 + 1) + 8 * v47) = v18;
        ++v45[4];
        llvm::ScalarEvolution::registerUser(a1, v18, a2, v70);
        goto LABEL_43;
      }
      uint64_t v49 = 0;
      int v50 = 1;
      while (v46 != -4096)
      {
        if (v49) {
          BOOL v51 = 0;
        }
        else {
          BOOL v51 = v46 == -8192;
        }
        if (v51) {
          uint64_t v49 = v45;
        }
        unsigned int v52 = v44 + v50++;
        unsigned int v44 = v52 & (v41 - 1);
        BOOL v45 = (_DWORD *)(v43 + 56 * v44);
        uint64_t v46 = *(void *)v45;
        if (*(void *)v45 == v6) {
          goto LABEL_41;
        }
      }
      if (v49) {
        BOOL v45 = v49;
      }
    }
    else
    {
      BOOL v45 = 0;
    }
    uint64_t v53 = (uint64_t *)(a1 + 960);
    int v54 = *(_DWORD *)(a1 + 968);
    if (4 * v54 + 4 >= 3 * v41)
    {
      sub_1CC13AF34(v53, 2 * v41);
      uint64_t v56 = *(void *)(a1 + 960);
      int v57 = *(_DWORD *)(a1 + 976) - 1;
      unsigned int v58 = v57 & (v42 ^ (v6 >> 9));
      BOOL v45 = (_DWORD *)(v56 + 56 * v58);
      uint64_t v59 = *(void *)v45;
      if (*(void *)v45 == v6)
      {
LABEL_67:
        uint64_t v55 = v6;
        goto LABEL_61;
      }
      BOOL v60 = 0;
      int v61 = 1;
      while (v59 != -4096)
      {
        if (v60) {
          BOOL v62 = 0;
        }
        else {
          BOOL v62 = v59 == -8192;
        }
        if (v62) {
          BOOL v60 = v45;
        }
        unsigned int v63 = v58 + v61++;
        unsigned int v58 = v63 & v57;
        BOOL v45 = (_DWORD *)(v56 + 56 * v58);
        uint64_t v59 = *(void *)v45;
        if (*(void *)v45 == v6) {
          goto LABEL_67;
        }
      }
      if (v60) {
        BOOL v45 = v60;
      }
    }
    else if (v41 + ~v54 - *(_DWORD *)(a1 + 972) <= v41 >> 3)
    {
      sub_1CC13AF34(v53, v41);
      uint64_t v78 = 0;
      sub_1CC13AEB0(*(void *)(a1 + 960), *(_DWORD *)(a1 + 976), v6, &v78);
      BOOL v45 = v78;
    }
    uint64_t v55 = *(void *)v45;
LABEL_61:
    ++*(_DWORD *)(a1 + 968);
    if (v55 != -4096) {
      --*(_DWORD *)(a1 + 972);
    }
    *(void *)BOOL v45 = v6;
    *((void *)v45 + 1) = v45 + 6;
    *((void *)v45 + 2) = 0x400000000;
    goto LABEL_41;
  }
  while (*(void *)(v18 + 16) != v76 || memcmp(__s1, *(const void **)(v18 + 8), 4 * v76))
  {
    LODWORD(v79) = 0;
    uint64_t v18 = *(void *)v18;
    if (v18) {
      BOOL v20 = (v18 & 1) == 0;
    }
    else {
      BOOL v20 = 0;
    }
    if (!v20)
    {
      uint64_t v70 = a3;
      goto LABEL_20;
    }
  }
LABEL_43:
  llvm::ScalarEvolution::setNoWrapFlags((int32x2_t *)a1, v18, a5);
  if (__s1 != v77) {
    free(__s1);
  }
  return v18;
}

uint64_t llvm::ScalarEvolution::getOrCreateMulExpr(uint64_t a1, void *a2, uint64_t a3, __int16 a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  v64[16] = *MEMORY[0x1E4F143B8];
  __s1 = v61;
  v61[0] = 5;
  uint64_t v60 = 0x2000000001;
  uint64_t v8 = 8 * a3;
  if (a3)
  {
    LODWORD(v9) = 1;
    uint64_t v10 = 8 * a3;
    unsigned int v11 = a2;
    do
    {
      uint64_t v12 = *v11;
      if (v9 >= HIDWORD(v60)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__s1 + v9) = v12;
      unsigned int v13 = v60 + 1;
      LODWORD(v60) = v13;
      if (v13 >= HIDWORD(v60)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__s1 + v13) = HIDWORD(v12);
      uint64_t v9 = (v60 + 1);
      LODWORD(v60) = v60 + 1;
      ++v11;
      v10 -= 8;
    }
    while (v10);
    uint64_t v14 = __s1;
  }
  else
  {
    uint64_t v9 = 1;
    uint64_t v14 = v61;
  }
  uint64_t v15 = *(void *)(a1 + 832)
      + 8 * ((*(_DWORD *)(a1 + 840) - 1) & sub_1CC13A6B8(v14, (uint64_t)v14 + 4 * v9));
  uint64_t v16 = *(void *)v15;
  BOOL v62 = v64;
  uint64_t v63 = 0x2000000000;
  if (v16) {
    BOOL v17 = (v16 & 1) == 0;
  }
  else {
    BOOL v17 = 0;
  }
  if (v17)
  {
    uint64_t v52 = a1;
    uint64_t v18 = v5;
    uint64_t v19 = v15;
    BOOL v20 = v6;
    uint64_t v21 = __s1;
    while (*(void *)(v16 + 16) != v60
         || memcmp(__s1, *(const void **)(v16 + 8), 4 * v60))
    {
      LODWORD(v63) = 0;
      uint64_t v16 = *(void *)v16;
      if (v16) {
        BOOL v22 = (v16 & 1) == 0;
      }
      else {
        BOOL v22 = 0;
      }
      if (!v22)
      {
        uint64_t v6 = v20;
        uint64_t v15 = v19;
        uint64_t v5 = v18;
        a1 = v52;
        goto LABEL_20;
      }
    }
  }
  else
  {
LABEL_20:
    uint64_t v23 = sub_1CB906F34((uint64_t *)(a1 + 864), v8, 3);
    uint64_t v24 = v23;
    if (v5)
    {
      uint64_t v25 = v8;
      uint64_t v26 = (void *)v23;
      uint64_t v27 = v6;
      do
      {
        uint64_t v28 = *v27++;
        *v26++ = v28;
        v25 -= 8;
      }
      while (v25);
    }
    *(void *)(a1 + 944) += 48;
    uint64_t v29 = *(void *)(a1 + 864);
    if (((v29 + 7) & 0xFFFFFFFFFFFFFFF8) - v29 + 48 > *(void *)(a1 + 872) - v29)
    {
      uint64_t v54 = v23;
      __int16 v46 = a4;
      unsigned int v47 = *(_DWORD *)(a1 + 888) >> 7;
      if (v47 >= 0x1E) {
        LOBYTE(v47) = 30;
      }
      uint64_t v48 = 4096 << v47;
      uint64_t v16 = (uint64_t)operator new(4096 << v47, (std::align_val_t)8uLL);
      unsigned int v49 = *(_DWORD *)(a1 + 888);
      if (v49 >= *(_DWORD *)(a1 + 892)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 880) + 8 * v49) = v16;
      ++*(_DWORD *)(a1 + 888);
      *(void *)(a1 + 872) = v16 + v48;
      a4 = v46;
      uint64_t v24 = v54;
    }
    else
    {
      uint64_t v16 = (v29 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(a1 + 864) = v16 + 48;
    uint64_t v30 = sub_1CB906F34((uint64_t *)(a1 + 864), 4 * v60, 2);
    uint64_t v31 = v30;
    __int16 v51 = a4;
    if (v60)
    {
      uint64_t v32 = (int *)__s1;
      uint64_t v33 = 4 * v60;
      unsigned int v34 = (_DWORD *)v30;
      do
      {
        int v35 = *v32++;
        *v34++ = v35;
        v33 -= 4;
      }
      while (v33);
      uint64_t v36 = v60;
    }
    else
    {
      uint64_t v36 = 0;
    }
    LODWORD(v63) = 16;
    LOWORD(v37) = 1;
    BOOL v62 = (void *)1;
    if (v5)
    {
      uint64_t v50 = v36;
      uint64_t v37 = 1;
      unsigned int v38 = 16;
      uint64_t v53 = v24;
      do
      {
        uint64_t v39 = *(unsigned __int16 *)(*(void *)v24 + 26);
        int v56 = 16;
        uint64_t v55 = v39;
        llvm::APInt::uadd_sat((llvm::APInt *)&v62, (const llvm::APInt *)&v55, (uint64_t)&v57);
        if (v38 >= 0x41 && v37) {
          MEMORY[0x1D25D9CB0](v37, 0x1000C8000313F17);
        }
        uint64_t v37 = (uint64_t)v57;
        BOOL v62 = v57;
        unsigned int v38 = v58;
        LODWORD(v63) = v58;
        v24 += 8;
        v8 -= 8;
      }
      while (v8);
      if (v58 >= 0x41)
      {
        uint64_t v40 = *v57;
        MEMORY[0x1D25D9CB0](v57, 0x1000C8000313F17);
        LOWORD(v37) = v40;
      }
      uint64_t v36 = v50;
      uint64_t v24 = v53;
    }
    *(void *)uint64_t v16 = 0;
    *(void *)(v16 + 8) = v31;
    *(void *)(v16 + 16) = v36;
    *(_WORD *)(v16 + 24) = 5;
    *(_WORD *)(v16 + 26) = v37;
    *(_WORD *)(v16 + 28) = 0;
    *(void *)(v16 + 32) = v24;
    *(void *)(v16 + 40) = v5;
    unsigned int v41 = *(_DWORD *)(a1 + 844) + 1;
    int v42 = *(_DWORD *)(a1 + 840);
    if (v41 > 2 * v42)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 832, 2 * v42, (uint64_t)off_1F2607658);
      BOOL v62 = v64;
      uint64_t v63 = 0x2000000000;
      uint64_t v15 = *(void *)(a1 + 832)
          + 8
          * ((*(_DWORD *)(a1 + 840) - 1) & sub_1CC13A6B8(*(void **)(v16 + 8), *(void *)(v16 + 8) + 4 * *(void *)(v16 + 16)));
      a4 = v51;
      uint64_t v43 = v6;
      if (v62 != v64) {
        free(v62);
      }
      unsigned int v41 = *(_DWORD *)(a1 + 844) + 1;
    }
    else
    {
      a4 = v51;
      uint64_t v43 = v6;
    }
    *(_DWORD *)(a1 + 844) = v41;
    uint64_t v44 = *(void *)v15;
    if (!*(void *)v15) {
      uint64_t v44 = v15 | 1;
    }
    *(void *)uint64_t v16 = v44;
    *(void *)uint64_t v15 = v16;
    llvm::ScalarEvolution::registerUser(a1, v16, v43, v5);
    uint64_t v21 = __s1;
  }
  *(_WORD *)(v16 + 28) |= a4;
  if (v21 != v61) {
    free(v21);
  }
  return v16;
}

const llvm::SCEV *llvm::ScalarEvolution::getUDivExactExpr(llvm::ConstantInt ****this, uint64_t **a2, const llvm::SCEV *a3)
{
  unint64_t v3 = a3;
  uint64_t MulExpr = (const llvm::SCEV *)a2;
  v44[2] = *MEMORY[0x1E4F143B8];
  if (a2 && *((_WORD *)a2 + 12) == 5 && (*((_WORD *)a2 + 14) & 2) != 0)
  {
    if (a3
      && !*((_WORD *)a3 + 12)
      && ((int v7 = a2[4], (UDivExactExpr = (const llvm::SCEV *)*v7) != 0)
        ? (BOOL v9 = *(unsigned __int16 *)(*v7 + 24) == 0)
        : (BOOL v9 = 0),
          v9))
    {
      if (UDivExactExpr == a3)
      {
        uint64_t v15 = a2[5];
        int v42 = v44;
        uint64_t v43 = 0x200000000;
        unint64_t v16 = 8 * (void)v15 - 8;
        if (v16 >= 0x11) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v17 = 0;
        if (v15 != (uint64_t *)1)
        {
          memcpy(v42, v7 + 1, 8 * (void)v15 - 8);
          int v17 = v43;
        }
        int v22 = v17 + (v16 >> 3);
        goto LABEL_35;
      }
      gcd(*v7, (uint64_t)a3, (uint64_t)&v40);
      if (v41 > 0x40)
      {
        int v24 = 0;
        int64_t v25 = ((unint64_t)v41 + 63) >> 6;
        do
        {
          if (v25-- < 1) {
            break;
          }
          unint64_t v27 = *(void *)(v40 + 8 * v25);
          v24 += __clz(v27);
        }
        while (!v27);
        unsigned int v28 = v41 | 0xFFFFFFC0;
        if ((v41 & 0x3F) == 0) {
          unsigned int v28 = 0;
        }
        int v23 = v24 + v28;
      }
      else
      {
        int v23 = v41 + __clz(v40) - 64;
      }
      if (v41 - v23 < 2) {
        goto LABEL_70;
      }
      llvm::APInt::udiv(*((void *)UDivExactExpr + 4) + 24, (const llvm::APInt *)&v40, (uint64_t)&v42);
      uint64_t v30 = (llvm::ConstantInt *)llvm::ConstantInt::get(***this, (llvm::LLVMContext *)&v42, v29);
      unint64_t Constant = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)this, v30);
      if (v43 >= 0x41 && v42) {
        MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
      }
      llvm::APInt::udiv(*((void *)v3 + 4) + 24, (const llvm::APInt *)&v40, (uint64_t)&v42);
      uint64_t v33 = (llvm::ConstantInt *)llvm::ConstantInt::get(***this, (llvm::LLVMContext *)&v42, v32);
      unint64_t v3 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)this, v33);
      if (v43 >= 0x41 && v42) {
        MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
      }
      int v42 = v44;
      v44[0] = Constant;
      uint64_t v43 = 0x200000001;
      UDivExactExpr = (const llvm::SCEV *)*((void *)MulExpr + 4);
      uint64_t v34 = *((void *)MulExpr + 5);
      uint64_t v35 = 8 * v34 - 8;
      if ((unint64_t)((v35 >> 3) + 1) >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v36 = 1;
      if (v34 != 1)
      {
        memcpy((char *)v42 + 8, (char *)UDivExactExpr + 8, 8 * v34 - 8);
        int v36 = v43;
      }
      LODWORD(v43) = v36 + ((unint64_t)v35 >> 3);
      uint64_t MulExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getMulExpr(this, &v42, 0, 0);
      if (MulExpr) {
        BOOL v37 = *((unsigned __int16 *)MulExpr + 12) == 5;
      }
      else {
        BOOL v37 = 0;
      }
      char v38 = !v37;
      if (!v37) {
        UDivExactExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getUDivExactExpr((llvm::ScalarEvolution *)this, MulExpr, v3);
      }
      if (v42 != v44) {
        free(v42);
      }
      if (v38)
      {
        uint64_t v10 = 0;
        int v39 = 0;
      }
      else
      {
LABEL_70:
        int v39 = 1;
        uint64_t v10 = MulExpr;
      }
      if (v41 >= 0x41 && v40) {
        MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
      }
      if (!v39) {
        return UDivExactExpr;
      }
    }
    else
    {
      uint64_t v10 = (const llvm::SCEV *)a2;
    }
    uint64_t v11 = *((void *)v10 + 5);
    if (!v11) {
      return (const llvm::SCEV *)llvm::ScalarEvolution::getUDivExpr((llvm::ScalarEvolution *)this, MulExpr, (unint64_t)v3);
    }
    uint64_t v12 = 0;
    unsigned int v13 = (const llvm::SCEV **)*((void *)v10 + 4);
    uint64_t v14 = 8;
    while (v13[v12] != v3)
    {
      ++v12;
      v14 += 8;
      if (*((void *)v10 + 5) == v12) {
        return (const llvm::SCEV *)llvm::ScalarEvolution::getUDivExpr((llvm::ScalarEvolution *)this, MulExpr, (unint64_t)v3);
      }
    }
    int v42 = v44;
    uint64_t v43 = 0x200000000;
    if (v12 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v12)
    {
      memcpy(v44, v13, v14 - 8);
      unsigned int v13 = (const llvm::SCEV **)*((void *)v10 + 4);
      uint64_t v11 = *((void *)v10 + 5);
      int v18 = v43;
      unint64_t v19 = HIDWORD(v43);
    }
    else
    {
      int v18 = 0;
      unint64_t v19 = 2;
    }
    unsigned int v20 = v12 + v18;
    LODWORD(v43) = v20;
    int64_t v21 = 8 * v11 - v14;
    if ((v21 >> 3) + (unint64_t)v20 > v19) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (8 * v11 != v14)
    {
      memcpy((char *)v42 + 8 * v20, &v13[v12 + 1], v21);
      unsigned int v20 = v43;
    }
    int v22 = v20 + ((unint64_t)v21 >> 3);
LABEL_35:
    LODWORD(v43) = v22;
    UDivExactExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getMulExpr(this, &v42, 0, 0);
    if (v42 != v44) {
      free(v42);
    }
    return UDivExactExpr;
  }

  return (const llvm::SCEV *)llvm::ScalarEvolution::getUDivExpr((llvm::ScalarEvolution *)this, (const llvm::SCEV *)a2, (unint64_t)a3);
}

uint64_t sub_1CC0EF280(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  int v10 = a5 & 6;
  if (v10 == 4)
  {
    if (!a4)
    {
LABEL_14:
      uint64_t v5 = v5 | 6;
      BOOL v18 = a4 == 2;
      goto LABEL_53;
    }
    uint64_t v11 = 8 * a4;
    uint64_t v12 = a3;
    while (1)
    {
      uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(a1, *v12, 1, 0);
      llvm::ConstantRange::getSignedMin(RangeRef, (uint64_t)&v52);
      unsigned int v14 = v53 - 1;
      if (v53 >= 0x41) {
        uint64_t v15 = &v52[8 * (v14 >> 6)];
      }
      else {
        uint64_t v15 = (char *)&v52;
      }
      unint64_t v16 = *(void *)v15;
      if (v53 >= 0x41 && v52 != 0)
      {
        unint64_t v47 = v16;
        MEMORY[0x1D25D9CB0]();
        unint64_t v16 = v47;
      }
      if ((v16 >> v14)) {
        break;
      }
      ++v12;
      v11 -= 8;
      if (!v11) {
        goto LABEL_14;
      }
    }
    int v10 = 4;
  }
  BOOL v18 = a4 == 2;
  if ((a2 & 0xFFFE) == 4 && v10 != 6 && a4 == 2)
  {
    if (*(_WORD *)(*a3 + 24))
    {
LABEL_52:
      BOOL v18 = 1;
      goto LABEL_53;
    }
    if (a2 == 4) {
      int v19 = 13;
    }
    else {
      int v19 = 17;
    }
    uint64_t v20 = *(void *)(*a3 + 32);
    uint64_t v21 = v5;
    if ((v5 & 4) == 0)
    {
      unsigned int v22 = *(_DWORD *)(v20 + 32);
      if (v22 > 0x40) {
        operator new[]();
      }
      int v23 = *(char **)(v20 + 24);
      unsigned int v49 = *(_DWORD *)(v20 + 32);
      unint64_t __src = v23;
      unsigned int v53 = v22;
      uint64_t v52 = v23;
      llvm::APInt::operator+=((uint64_t)&v52, 1uLL);
      unsigned int v51 = v53;
      uint64_t v50 = v52;
      llvm::ConstantRange::makeGuaranteedNoWrapRegion((llvm::APInt *)&__src, v19, 2, (uint64_t)&v52);
      if (v51 >= 0x41 && v50) {
        MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
      }
      if (v49 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      uint64_t v24 = llvm::ScalarEvolution::getRangeRef(a1, a3[1], 1, 0);
      unsigned int v49 = *(_DWORD *)(v24 + 8);
      if (v49 > 0x40) {
        operator new[]();
      }
      unint64_t __src = *(void **)v24;
      unsigned int v51 = *(_DWORD *)(v24 + 24);
      if (v51 > 0x40) {
        operator new[]();
      }
      uint64_t v50 = *(char **)(v24 + 16);
      BOOL v25 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v52, (const llvm::ConstantRange *)&__src);
      if (v49 >= 0x41 && __src)
      {
        BOOL v46 = v25;
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        BOOL v25 = v46;
      }
      if (v25) {
        uint64_t v21 = v5 | 4;
      }
      else {
        uint64_t v21 = v5;
      }
      if (v55 >= 0x41 && v54) {
        MEMORY[0x1D25D9CB0](v54, 0x1000C8000313F17);
      }
      if (v53 >= 0x41 && v52) {
        MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
      }
    }
    if ((v5 & 2) == 0)
    {
      unsigned int v26 = *(_DWORD *)(v20 + 32);
      if (v26 > 0x40) {
        operator new[]();
      }
      unint64_t v27 = *(char **)(v20 + 24);
      unsigned int v49 = *(_DWORD *)(v20 + 32);
      unint64_t __src = v27;
      unsigned int v53 = v26;
      uint64_t v52 = v27;
      llvm::APInt::operator+=((uint64_t)&v52, 1uLL);
      unsigned int v51 = v53;
      uint64_t v50 = v52;
      llvm::ConstantRange::makeGuaranteedNoWrapRegion((llvm::APInt *)&__src, v19, 1, (uint64_t)&v52);
      if (v51 >= 0x41 && v50) {
        MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
      }
      if (v49 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      uint64_t v28 = llvm::ScalarEvolution::getRangeRef(a1, a3[1], 0, 0);
      unsigned int v49 = *(_DWORD *)(v28 + 8);
      if (v49 > 0x40) {
        operator new[]();
      }
      unint64_t __src = *(void **)v28;
      unsigned int v51 = *(_DWORD *)(v28 + 24);
      if (v51 > 0x40) {
        operator new[]();
      }
      uint64_t v50 = *(char **)(v28 + 16);
      BOOL v29 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v52, (const llvm::ConstantRange *)&__src);
      if (v49 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      if (v29) {
        uint64_t v5 = v21 | 2;
      }
      else {
        uint64_t v5 = v21;
      }
      if (v55 >= 0x41 && v54) {
        MEMORY[0x1D25D9CB0](v54, 0x1000C8000313F17);
      }
      if (v53 >= 0x41 && v52) {
        MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
      }
      goto LABEL_52;
    }
    BOOL v18 = 1;
    uint64_t v5 = v21;
  }
LABEL_53:
  if (a2 == 7 && (v5 & 1) != 0 && (v5 & 2) == 0 && v18)
  {
    uint64_t v30 = *a3;
    if (!*a3 || *(_WORD *)(v30 + 24)) {
      return v5;
    }
    uint64_t v31 = *(void *)(v30 + 32);
    uint64_t v32 = *(unsigned int *)(v31 + 32);
    if (v32 < 0x41)
    {
      if (*(void *)(v31 + 24)) {
        return v5;
      }
      goto LABEL_86;
    }
    int v36 = 0;
    int64_t v37 = (unint64_t)(v32 + 63) >> 6;
    do
    {
      if (v37-- < 1) {
        break;
      }
      unint64_t v39 = *(void *)(*(void *)(v31 + 24) + 8 * v37);
      v36 += __clz(v39);
    }
    while (!v39);
    int v40 = v32 | 0xFFFFFFC0;
    if ((v32 & 0x3F) == 0) {
      int v40 = 0;
    }
    if (v36 + v40 == v32)
    {
LABEL_86:
      uint64_t v41 = llvm::ScalarEvolution::getRangeRef(a1, a3[1], 1, 0);
      llvm::ConstantRange::getSignedMin(v41, (uint64_t)&v52);
      unsigned int v42 = v53 - 1;
      if (v53 >= 0x41) {
        uint64_t v43 = &v52[8 * (v42 >> 6)];
      }
      else {
        uint64_t v43 = (char *)&v52;
      }
      unint64_t v44 = *(void *)v43;
      if (v53 >= 0x41 && v52) {
        MEMORY[0x1D25D9CB0]();
      }
      if ((v44 >> v42)) {
        return v5;
      }
      else {
        return v5 | 2;
      }
    }
  }
  else
  {
    if ((v5 & 2) != 0 || a2 != 5) {
      BOOL v18 = 0;
    }
    if (v18)
    {
      uint64_t v34 = *a3;
      if (*a3 && *(_WORD *)(v34 + 24) == 6)
      {
        uint64_t v35 = a3[1];
        if (*(void *)(v34 + 40) == v35) {
          uint64_t v5 = v5 | 2;
        }
        else {
          uint64_t v5 = v5;
        }
        if (!v35) {
          return v5;
        }
      }
      else
      {
        uint64_t v35 = a3[1];
        if (!v35) {
          return v5;
        }
      }
      if (*(_WORD *)(v35 + 24) == 6)
      {
        if (*(void *)(v35 + 40) == v34) {
          return v5 | 2;
        }
        else {
          return v5;
        }
      }
    }
  }
  return v5;
}

uint64_t llvm::ScalarEvolution::getGEPExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v149 = *MEMORY[0x1E4F143B8];
  int v5 = *(_DWORD *)(a2 + 20);
  if ((v5 & 0x40000000) != 0) {
    uint64_t v6 = *(llvm::Value ***)(a2 - 8);
  }
  else {
    uint64_t v6 = (llvm::Value **)(a2 - 32 * (v5 & 0x7FFFFFF));
  }
  int v7 = *v6;
  uint64_t v8 = *(void *)(a1 + 104);
  unsigned int v9 = *(_DWORD *)(a1 + 120);
  if (!v9)
  {
LABEL_9:
    uint64_t v11 = v8 + 48 * v9;
    goto LABEL_10;
  }
  unsigned int v10 = ((v7 >> 4) ^ (v7 >> 9)) & (v9 - 1);
  uint64_t v11 = v8 + 48 * v10;
  uint64_t v12 = *(llvm::Value **)(v11 + 24);
  if (v12 != v7)
  {
    int v13 = 1;
    while (v12 != (llvm::Value *)-4096)
    {
      unsigned int v14 = v10 + v13++;
      unsigned int v10 = v14 & (v9 - 1);
      uint64_t v11 = v8 + 48 * v10;
      uint64_t v12 = *(llvm::Value **)(v11 + 24);
      if (v12 == v7) {
        goto LABEL_10;
      }
    }
    goto LABEL_9;
  }
LABEL_10:
  if (v11 == v8 + 48 * v9 || (uint64_t SCEVIter = *(void *)(v11 + 40)) == 0) {
    uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v7);
  }
  uint64_t v16 = SCEVIter;
  while (2)
  {
    switch(*(_WORD *)(v16 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        int v17 = (llvm::FixedVectorType **)(v16 + 40);
        goto LABEL_15;
      case 4:
        int v17 = (llvm::FixedVectorType **)(v16 + 48);
        goto LABEL_15;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v75 = *(uint64_t **)(v16 + 32);
        goto LABEL_95;
      case 6:
        uint64_t v75 = (uint64_t *)(v16 + 40);
LABEL_95:
        uint64_t v16 = *v75;
        continue;
      case 0xE:
        int v17 = *(llvm::FixedVectorType ***)(v16 - 8);
        goto LABEL_15;
      default:
        int v17 = *(llvm::FixedVectorType ***)(v16 + 32);
LABEL_15:
        BOOL v18 = *v17;
        unsigned int v19 = *((_DWORD *)*v17 + 2);
        if (v19 != 13 && (v19 & 0xFE) != 18)
        {
          uint64_t v21 = *(void *)(*(void *)a1 + 40);
          uint64_t v22 = *(void *)(v21 + 504);
          if (v19 < 0x100) {
            goto LABEL_28;
          }
          unsigned int v23 = v19 >> 8;
          unint64_t v24 = *(unsigned int *)(v21 + 512);
          uint64_t v25 = v22;
          if (v24)
          {
            uint64_t v25 = v22;
            unint64_t v26 = v24;
            do
            {
              unint64_t v27 = v26 >> 1;
              uint64_t v28 = v25 + 16 * (v26 >> 1);
              unsigned int v29 = *(_DWORD *)(v28 + 8);
              uint64_t v30 = v28 + 16;
              v26 += ~(v26 >> 1);
              if (v29 < v23) {
                uint64_t v25 = v30;
              }
              else {
                unint64_t v26 = v27;
              }
            }
            while (v26);
          }
          if (v25 == v22 + 16 * v24 || *(_DWORD *)(v25 + 8) != v23) {
LABEL_28:
          }
            uint64_t v25 = v22;
          uint64_t v31 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v18, (llvm::LLVMContext *)*(unsigned int *)(v25 + 12));
          uint64_t v32 = v31;
          if ((*((_DWORD *)v18 + 2) & 0xFE) == 0x12)
          {
            llvm::VectorType::get(v31, (llvm::Type *)(*((unsigned int *)v18 + 8) | ((unint64_t)(*((_DWORD *)v18 + 2) == 19) << 32)));
            uint64_t v32 = v127;
          }
          if ((*(unsigned char *)(a2 + 17) & 2) != 0 && *(unsigned __int8 *)(a2 + 16) >= 0x1Cu)
          {
            int isSCEVExprNeverPoison = llvm::ScalarEvolution::isSCEVExprNeverPoison((llvm::ScalarEvolution *)a1, (const llvm::Instruction *)a2);
            if (isSCEVExprNeverPoison) {
              uint64_t v33 = 4;
            }
            else {
              uint64_t v33 = 0;
            }
          }
          else
          {
            int isSCEVExprNeverPoison = 0;
            uint64_t v33 = 0;
          }
          uint64_t v34 = *(llvm::Type **)a2;
          uint64_t v142 = v144;
          uint64_t v143 = 0x400000000;
          uint64_t v35 = *(unsigned int *)(a3 + 8);
          if (!v35)
          {
LABEL_88:
            unint64_t v73 = v142;
            if (v142 == v144) {
              return SCEVIter;
            }
            goto LABEL_195;
          }
          int v36 = *(const llvm::SCEV ***)a3;
          uint64_t v140 = *(void *)a3 + 8 * v35;
          char v37 = 1;
          while (1)
          {
            char v38 = *v36;
            int v39 = *((unsigned __int8 *)v34 + 8);
            if (v34 && v39 == 16)
            {
              AggregateElement = (void *)*((void *)v38 + 4);
              BOOL v46 = (unsigned int *)(AggregateElement + 3);
              uint64_t v135 = SCEVIter;
              if (*((_DWORD *)AggregateElement + 8) >= 0x41u) {
                BOOL v46 = *(unsigned int **)v46;
              }
              uint64_t v47 = *v46;
              uint64_t v49 = *((void *)llvm::DataLayout::getStructLayout((llvm::DataLayout *)(*(void *)(*(void *)a1 + 40) + 272), v34)+ v47+ 2);
              unsigned int v50 = *((_DWORD *)v32 + 2);
              unsigned int v51 = v32;
              if (v50 != 13)
              {
                uint64_t v52 = v49;
                if ((v50 & 0xFE) == 0x12) {
                  unsigned int v50 = *(_DWORD *)(**((void **)v32 + 2) + 8);
                }
                uint64_t v53 = *(void *)(*(void *)a1 + 40);
                uint64_t v54 = *(void *)(v53 + 504);
                if (v50 < 0x100) {
                  goto LABEL_69;
                }
                unsigned int v55 = v50 >> 8;
                unint64_t v56 = *(unsigned int *)(v53 + 512);
                uint64_t v57 = v54;
                if (v56)
                {
                  uint64_t v57 = v54;
                  unint64_t v58 = v56;
                  do
                  {
                    unint64_t v59 = v58 >> 1;
                    uint64_t v60 = v57 + 16 * (v58 >> 1);
                    unsigned int v61 = *(_DWORD *)(v60 + 8);
                    uint64_t v62 = v60 + 16;
                    v58 += ~(v58 >> 1);
                    if (v61 < v55) {
                      uint64_t v57 = v62;
                    }
                    else {
                      unint64_t v58 = v59;
                    }
                  }
                  while (v58);
                }
                if (v57 == v54 + 16 * v56 || *(_DWORD *)(v57 + 8) != v55) {
LABEL_69:
                }
                  uint64_t v57 = v54;
                unsigned int v51 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v32, (llvm::LLVMContext *)*(unsigned int *)(v57 + 12));
                if ((*((_DWORD *)v32 + 2) & 0xFE) == 0x12) {
                  llvm::VectorType::get(v51, (llvm::Type *)(*((unsigned int *)v32 + 8) | ((unint64_t)(*((_DWORD *)v32 + 2) == 19) << 32)));
                }
                uint64_t v49 = v52;
              }
              uint64_t v63 = *(llvm::ConstantInt **)v51;
              unsigned int v64 = *((_DWORD *)v51 + 2);
              LODWORD(v146) = v64 >> 8;
              if (v64 >> 8 > 0x40) {
                operator new[]();
              }
              if (v64 <= 0xFF) {
                unint64_t v65 = 0;
              }
              else {
                unint64_t v65 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v64) + 63);
              }
              unint64_t v145 = (void *)(v65 & v49);
              unsigned int v66 = (llvm::ConstantInt *)llvm::ConstantInt::get(v63, (llvm::LLVMContext *)&v145, v48);
              uint64_t SCEVIter = v135;
              if (v146 >= 0x41 && v145) {
                MEMORY[0x1D25D9CB0](v145, 0x1000C8000313F17);
              }
              unint64_t Constant = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a1, v66);
              if (v143 >= (unint64_t)HIDWORD(v143)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v142 + v143) = Constant;
              LODWORD(v143) = v143 + 1;
              if (!AggregateElement || *((unsigned char *)AggregateElement + 16) != 16) {
                AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)AggregateElement, 0);
              }
              uint64_t v70 = (unsigned int *)AggregateElement[3];
              uint64_t v69 = (unsigned int *)(AggregateElement + 3);
              int v68 = v70;
              if (v69[2] < 0x41) {
                int v68 = v69;
              }
              uint64_t v41 = *(llvm::Type **)(*((void *)v34 + 2) + 8 * *v68);
              goto LABEL_48;
            }
            if (v37)
            {
              int v40 = (llvm::Type **)(a2 + 64);
              if (*(unsigned char *)(a2 + 16) != 62) {
                int v40 = (llvm::Type **)(a2 + 24);
              }
            }
            else
            {
              if (!v34 || v39 != 17)
              {
                uint64_t v41 = 0;
                if (!v34 || (v39 & 0xFE) != 0x12) {
                  goto LABEL_44;
                }
              }
              int v40 = (llvm::Type **)((char *)v34 + 24);
            }
            uint64_t v41 = *v40;
LABEL_44:
            unint64_t SizeOfExpr = llvm::ScalarEvolution::getSizeOfExpr((llvm::ScalarEvolution *)a1, v32, v41);
            TruncateOrSignExtend = llvm::ScalarEvolution::getTruncateOrSignExtend((llvm::ScalarEvolution *)a1, v38, v32, 0);
            unint64_t v145 = &v147;
            uint64_t v147 = (uint64_t)TruncateOrSignExtend;
            unint64_t v148 = SizeOfExpr;
            uint64_t v146 = 0x200000002;
            uint64_t MulExpr = llvm::ScalarEvolution::getMulExpr(a1, (uint64_t)&v145, v33, 0);
            if (v145 != &v147) {
              free(v145);
            }
            if (v143 >= (unint64_t)HIDWORD(v143)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            char v37 = 0;
            *((void *)v142 + v143) = MulExpr;
            LODWORD(v143) = v143 + 1;
LABEL_48:
            ++v36;
            uint64_t v34 = v41;
            if (v36 == (const llvm::SCEV **)v140)
            {
              if (v143)
              {
                uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(a1, (unint64_t **)&v142, v33, 0);
                uint64_t v72 = 0;
                if (isSCEVExprNeverPoison)
                {
                  uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(a1, AddExpr, 1, 0);
                  llvm::ConstantRange::getSignedMin(RangeRef, (uint64_t)&v145);
                  unsigned int v77 = v146 - 1;
                  if (v146 >= 0x41) {
                    uint64_t v78 = (void **)((char *)v145 + 8 * (v77 >> 6));
                  }
                  else {
                    uint64_t v78 = &v145;
                  }
                  uint64_t v79 = (1 << v77) & (unint64_t)*v78;
                  if (v146 >= 0x41 && v145) {
                    MEMORY[0x1D25D9CB0]();
                  }
                  uint64_t v72 = 2 * (v79 == 0);
                }
                unint64_t v145 = &v147;
                uint64_t v147 = SCEVIter;
                unint64_t v148 = AddExpr;
                uint64_t v146 = 0x200000002;
                uint64_t SCEVIter = llvm::ScalarEvolution::getAddExpr(a1, (unint64_t **)&v145, v72, 0);
                if (v145 != &v147) {
                  free(v145);
                }
              }
              goto LABEL_88;
            }
          }
        }
        uint64_t v136 = SCEVIter;
        if (v19 != 13)
        {
          uint64_t v80 = *(void *)(*(void *)a1 + 40);
          if ((v19 & 0xFE) == 0x12) {
            unsigned int v19 = *(_DWORD *)(**((void **)v18 + 2) + 8);
          }
          uint64_t v81 = *(void *)(v80 + 504);
          if (v19 <= 0xFF) {
            goto LABEL_123;
          }
          unsigned int v82 = v19 >> 8;
          unint64_t v83 = *(unsigned int *)(v80 + 512);
          uint64_t v84 = v81;
          if (v83)
          {
            uint64_t v84 = v81;
            unint64_t v85 = v83;
            do
            {
              unint64_t v86 = v85 >> 1;
              uint64_t v87 = v84 + 16 * (v85 >> 1);
              unsigned int v88 = *(_DWORD *)(v87 + 8);
              uint64_t v89 = v87 + 16;
              v85 += ~(v85 >> 1);
              if (v88 < v82) {
                uint64_t v84 = v89;
              }
              else {
                unint64_t v85 = v86;
              }
            }
            while (v85);
          }
          if (v84 == v81 + 16 * v83 || *(_DWORD *)(v84 + 8) != v82) {
LABEL_123:
          }
            uint64_t v84 = v81;
          unint64_t v90 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v18, (llvm::LLVMContext *)*(unsigned int *)(v84 + 12));
          if ((*((_DWORD *)v18 + 2) & 0xFE) == 0x12) {
            llvm::VectorType::get(v90, (llvm::Type *)(*((unsigned int *)v18 + 8) | ((unint64_t)(*((_DWORD *)v18 + 2) == 19) << 32)));
          }
          BOOL v18 = v90;
        }
        if ((*(unsigned char *)(a2 + 17) & 2) != 0 && *(unsigned __int8 *)(a2 + 16) >= 0x1Cu)
        {
          int v137 = llvm::ScalarEvolution::isSCEVExprNeverPoison((llvm::ScalarEvolution *)a1, (const llvm::Instruction *)a2);
          if (v137) {
            uint64_t v91 = 4;
          }
          else {
            uint64_t v91 = 0;
          }
        }
        else
        {
          int v137 = 0;
          uint64_t v91 = 0;
        }
        unint64_t v92 = *(llvm::Type **)a2;
        uint64_t v142 = v144;
        uint64_t v143 = 0x400000000;
        uint64_t v93 = *(unsigned int *)(a3 + 8);
        if (!v93) {
          goto LABEL_184;
        }
        uint64_t v94 = *(const llvm::SCEV ***)a3;
        uint64_t v141 = *(void *)a3 + 8 * v93;
        char v95 = 1;
        break;
    }
    break;
  }
  do
  {
    unint64_t v96 = *v94;
    int v97 = *((unsigned __int8 *)v92 + 8);
    if (!v92 || v97 != 16)
    {
      if (v95)
      {
        unint64_t v98 = (llvm::Type **)(a2 + 64);
        if (*(unsigned char *)(a2 + 16) != 62) {
          unint64_t v98 = (llvm::Type **)(a2 + 24);
        }
      }
      else
      {
        if (!v92 || v97 != 17)
        {
          uint64_t v99 = 0;
          if (!v92 || (v97 & 0xFE) != 0x12) {
            goto LABEL_140;
          }
        }
        unint64_t v98 = (llvm::Type **)((char *)v92 + 24);
      }
      uint64_t v99 = *v98;
LABEL_140:
      unint64_t v100 = llvm::ScalarEvolution::getSizeOfExpr((llvm::ScalarEvolution *)a1, v18, v99);
      BOOL v101 = llvm::ScalarEvolution::getTruncateOrSignExtend((llvm::ScalarEvolution *)a1, v96, v18, 0);
      unint64_t v145 = &v147;
      uint64_t v147 = (uint64_t)v101;
      unint64_t v148 = v100;
      uint64_t v146 = 0x200000002;
      uint64_t v102 = llvm::ScalarEvolution::getMulExpr(a1, (uint64_t)&v145, v91, 0);
      if (v145 != &v147) {
        free(v145);
      }
      if (v143 >= (unint64_t)HIDWORD(v143)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      char v95 = 0;
      *((void *)v142 + v143) = v102;
      LODWORD(v143) = v143 + 1;
      goto LABEL_144;
    }
    int v103 = (void *)*((void *)v96 + 4);
    unint64_t v104 = (unsigned int *)(v103 + 3);
    if (*((_DWORD *)v103 + 8) > 0x40u) {
      unint64_t v104 = *(unsigned int **)v104;
    }
    uint64_t v105 = *v104;
    uint64_t v134 = *((void *)llvm::DataLayout::getStructLayout((llvm::DataLayout *)(*(void *)(*(void *)a1 + 40) + 272), v92)+ v105+ 2);
    unsigned int v107 = *((_DWORD *)v18 + 2);
    BOOL v108 = v18;
    if (v107 != 13)
    {
      if ((v107 & 0xFE) == 0x12) {
        unsigned int v107 = *(_DWORD *)(**((void **)v18 + 2) + 8);
      }
      uint64_t v109 = *(void *)(*(void *)a1 + 40);
      uint64_t v110 = *(void *)(v109 + 504);
      if (v107 <= 0xFF) {
        goto LABEL_164;
      }
      unsigned int v111 = v107 >> 8;
      unint64_t v112 = *(unsigned int *)(v109 + 512);
      uint64_t v113 = v110;
      unint64_t v114 = v112;
      if (v112)
      {
        do
        {
          unint64_t v115 = v114 >> 1;
          uint64_t v116 = v113 + 16 * (v114 >> 1);
          unsigned int v117 = *(_DWORD *)(v116 + 8);
          uint64_t v118 = v116 + 16;
          v114 += ~(v114 >> 1);
          if (v117 < v111) {
            uint64_t v113 = v118;
          }
          else {
            unint64_t v114 = v115;
          }
        }
        while (v114);
      }
      if (v113 == v110 + 16 * v112 || *(_DWORD *)(v113 + 8) != v111) {
LABEL_164:
      }
        uint64_t v113 = v110;
      BOOL v108 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v18, (llvm::LLVMContext *)*(unsigned int *)(v113 + 12));
      if ((*((_DWORD *)v18 + 2) & 0xFE) == 0x12) {
        llvm::VectorType::get(v108, (llvm::Type *)(*((unsigned int *)v18 + 8) | ((unint64_t)(*((_DWORD *)v18 + 2) == 19) << 32)));
      }
    }
    uint64_t v119 = *(llvm::ConstantInt **)v108;
    unsigned int v120 = *((_DWORD *)v108 + 2);
    LODWORD(v146) = v120 >> 8;
    if (v120 >> 8 > 0x40) {
      operator new[]();
    }
    if (v120 <= 0xFF) {
      unint64_t v121 = 0;
    }
    else {
      unint64_t v121 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v120) + 63);
    }
    unint64_t v145 = (void *)(v121 & v134);
    uint64_t v122 = (llvm::ConstantInt *)llvm::ConstantInt::get(v119, (llvm::LLVMContext *)&v145, v106);
    if (v146 >= 0x41 && v145) {
      MEMORY[0x1D25D9CB0](v145, 0x1000C8000313F17);
    }
    unint64_t v123 = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a1, v122);
    if (v143 >= (unint64_t)HIDWORD(v143)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v142 + v143) = v123;
    LODWORD(v143) = v143 + 1;
    if (!v103 || *((unsigned char *)v103 + 16) != 16) {
      int v103 = llvm::Constant::getAggregateElement((llvm::Constant *)v103, 0);
    }
    unint64_t v126 = (unsigned int *)v103[3];
    uint64_t v125 = (unsigned int *)(v103 + 3);
    unint64_t v124 = v126;
    if (v125[2] < 0x41) {
      unint64_t v124 = v125;
    }
    uint64_t v99 = *(llvm::Type **)(*((void *)v92 + 2) + 8 * *v124);
LABEL_144:
    ++v94;
    unint64_t v92 = v99;
  }
  while (v94 != (const llvm::SCEV **)v141);
  if (v143)
  {
    uint64_t v128 = llvm::ScalarEvolution::getAddExpr(a1, (unint64_t **)&v142, v91, 0);
    uint64_t v129 = 0;
    if (v137)
    {
      uint64_t v130 = llvm::ScalarEvolution::getRangeRef(a1, v128, 1, 0);
      llvm::ConstantRange::getSignedMin(v130, (uint64_t)&v145);
      unsigned int v131 = v146 - 1;
      if (v146 >= 0x41) {
        int v132 = (void **)((char *)v145 + 8 * (v131 >> 6));
      }
      else {
        int v132 = &v145;
      }
      uint64_t v133 = (1 << v131) & (unint64_t)*v132;
      if (v146 >= 0x41 && v145) {
        MEMORY[0x1D25D9CB0]();
      }
      uint64_t v129 = 2 * (v133 == 0);
    }
    unint64_t v145 = &v147;
    uint64_t v147 = v136;
    unint64_t v148 = v128;
    uint64_t v146 = 0x200000002;
    uint64_t v136 = llvm::ScalarEvolution::getAddExpr(a1, (unint64_t **)&v145, v129, 0);
    if (v145 != &v147) {
      free(v145);
    }
  }
LABEL_184:
  unint64_t v73 = v142;
  if (v142 == v144) {
    return v136;
  }
  uint64_t SCEVIter = v136;
LABEL_195:
  free(v73);
  return SCEVIter;
}

unint64_t llvm::ScalarEvolution::getOffsetOfExpr(llvm::ScalarEvolution *this, uint64_t **a2, llvm::StructType *a3, unsigned int a4)
{
  uint64_t v7 = *((void *)llvm::DataLayout::getStructLayout((llvm::DataLayout *)(*(void *)(*(void *)this + 40) + 272), a3)+ a4+ 2);
  unsigned int v8 = *((_DWORD *)a2 + 2);
  if (v8 != 13)
  {
    uint64_t v9 = *(void *)(*(void *)this + 40);
    if ((v8 & 0xFE) == 0x12) {
      unsigned int v8 = *(_DWORD *)(*a2[2] + 8);
    }
    uint64_t v10 = *(void *)(v9 + 504);
    if (v8 < 0x100) {
      goto LABEL_13;
    }
    unsigned int v11 = v8 >> 8;
    unint64_t v12 = *(unsigned int *)(v9 + 512);
    uint64_t v13 = v10;
    if (v12)
    {
      uint64_t v13 = v10;
      unint64_t v14 = v12;
      do
      {
        unint64_t v15 = v14 >> 1;
        uint64_t v16 = v13 + 16 * (v14 >> 1);
        unsigned int v17 = *(_DWORD *)(v16 + 8);
        uint64_t v18 = v16 + 16;
        v14 += ~(v14 >> 1);
        if (v17 < v11) {
          uint64_t v13 = v18;
        }
        else {
          unint64_t v14 = v15;
        }
      }
      while (v14);
    }
    if (v13 == v10 + 16 * v12 || *(_DWORD *)(v13 + 8) != v11) {
LABEL_13:
    }
      uint64_t v13 = v10;
    unsigned int v19 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*a2, (llvm::LLVMContext *)*(unsigned int *)(v13 + 12));
    if ((a2[1] & 0xFE) == 0x12)
    {
      uint64_t v25 = (llvm::Type *)*((unsigned int *)a2 + 8);
      if (*((_DWORD *)a2 + 2) == 19) {
        llvm::ScalableVectorType::get(v19, v25);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v19, v25);
      }
    }
    a2 = v19;
  }
  uint64_t v20 = (llvm::ConstantInt *)*a2;
  unsigned int v21 = *((_DWORD *)a2 + 2);
  unsigned int v27 = v21 >> 8;
  if (v21 >> 8 > 0x40) {
    operator new[]();
  }
  if (v21 <= 0xFF) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v21) + 63);
  }
  unint64_t v26 = v22 & v7;
  unsigned int v23 = (llvm::ConstantInt *)llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&v26, v6);
  if (v27 >= 0x41 && v26) {
    MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
  }

  return llvm::ScalarEvolution::getConstant(this, v23);
}

unint64_t llvm::ScalarEvolution::getSizeOfExpr(llvm::ScalarEvolution *this, llvm::Type *a2, llvm::Type *a3)
{
  char v4 = a2;
  if (a3 && *((unsigned char *)a3 + 8) == 19)
  {
    return llvm::ScalarEvolution::getSizeOfScalableVectorExpr(this, a2, a3);
  }
  else
  {
    uint64_t v6 = (llvm::DataLayout *)(*(void *)(*(void *)this + 40) + 272);
    unint64_t v7 = (unint64_t)(sub_1CB83544C((uint64_t)v6, (uint64_t)a3) + 7) >> 3;
    BOOL v9 = v8 == 1;
    uint64_t v12 = 1 << llvm::DataLayout::getAlignment(v6, a3, 1);
    if (v9) {
    uint64_t v13 = v12 + v7 - 1;
    }
    uint64_t v14 = -v12;
    unsigned int v15 = *((_DWORD *)v4 + 2);
    if (v15 != 13)
    {
      uint64_t v16 = *(void *)(*(void *)this + 40);
      if ((v15 & 0xFE) == 0x12) {
        unsigned int v15 = *(_DWORD *)(**((void **)v4 + 2) + 8);
      }
      uint64_t v17 = *(void *)(v16 + 504);
      if (v15 < 0x100) {
        goto LABEL_17;
      }
      unsigned int v18 = v15 >> 8;
      unint64_t v19 = *(unsigned int *)(v16 + 512);
      uint64_t v20 = v17;
      if (v19)
      {
        uint64_t v20 = v17;
        unint64_t v21 = v19;
        do
        {
          unint64_t v22 = v21 >> 1;
          uint64_t v23 = v20 + 16 * (v21 >> 1);
          unsigned int v24 = *(_DWORD *)(v23 + 8);
          uint64_t v25 = v23 + 16;
          v21 += ~(v21 >> 1);
          if (v24 < v18) {
            uint64_t v20 = v25;
          }
          else {
            unint64_t v21 = v22;
          }
        }
        while (v21);
      }
      if (v20 == v17 + 16 * v19 || *(_DWORD *)(v20 + 8) != v18) {
LABEL_17:
      }
        uint64_t v20 = v17;
      unint64_t v26 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v4, (llvm::LLVMContext *)*(unsigned int *)(v20 + 12));
      if ((*((_DWORD *)v4 + 2) & 0xFE) == 0x12) {
        llvm::VectorType::get(v26, (llvm::Type *)(*((unsigned int *)v4 + 8) | ((unint64_t)(*((_DWORD *)v4 + 2) == 19) << 32)));
      }
      char v4 = v26;
    }
    uint64_t v27 = v13 & v14;
    uint64_t v28 = *(llvm::ConstantInt **)v4;
    unsigned int v29 = *((_DWORD *)v4 + 2);
    unsigned int v34 = v29 >> 8;
    if (v29 >> 8 > 0x40) {
      operator new[]();
    }
    if (v29 <= 0xFF) {
      unint64_t v30 = 0;
    }
    else {
      unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v29) + 63);
    }
    unint64_t v33 = v30 & v27;
    uint64_t v31 = (llvm::ConstantInt *)llvm::ConstantInt::get(v28, (llvm::LLVMContext *)&v33, v11);
    if (v34 >= 0x41)
    {
      if (v33) {
        MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
      }
    }
    return llvm::ScalarEvolution::getConstant(this, v31);
  }
}

uint64_t llvm::ScalarEvolution::getAbsExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2, int a3)
{
  if (a3) {
    uint64_t v5 = 4;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t NegativeSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(this, (uint64_t)a2, (const llvm::APInt *)v5);

  return llvm::ScalarEvolution::getSMaxExpr(this, a2, NegativeSCEV);
}

uint64_t llvm::ScalarEvolution::getSMaxExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV *a3)
{
  v6[2] = *MEMORY[0x1E4F143B8];
  v5[0] = v6;
  v6[0] = a2;
  v6[1] = a3;
  v5[1] = (void *)0x200000002;
  uint64_t MinMaxExpr = llvm::ScalarEvolution::getMinMaxExpr((uint64_t)this, 9, (uint64_t **)v5);
  if (v5[0] != v6) {
    free(v5[0]);
  }
  return MinMaxExpr;
}

unint64_t llvm::ScalarEvolution::getNegativeSCEV(llvm::ScalarEvolution *a1, uint64_t a2, const llvm::APInt *a3)
{
  v34[2] = *MEMORY[0x1E4F143B8];
  int v6 = *(unsigned __int16 *)(a2 + 24);
  uint64_t v7 = a2;
  if (!a2 || *(_WORD *)(a2 + 24))
  {
    while (2)
    {
      switch(v6)
      {
        case 1:
        case 2:
        case 3:
        case 13:
          uint64_t v17 = (llvm::Type **)(v7 + 40);
          goto LABEL_17;
        case 4:
          uint64_t v17 = (llvm::Type **)(v7 + 48);
          goto LABEL_17;
        case 5:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
          uint64_t v25 = *(uint64_t **)(v7 + 32);
          goto LABEL_29;
        case 6:
          uint64_t v25 = (uint64_t *)(v7 + 40);
LABEL_29:
          uint64_t v7 = *v25;
          int v6 = *(unsigned __int16 *)(v7 + 24);
          continue;
        case 14:
          uint64_t v17 = *(llvm::Type ***)(v7 - 8);
          goto LABEL_17;
        default:
          uint64_t v17 = *(llvm::Type ***)(v7 + 32);
LABEL_17:
          unsigned int v18 = *v17;
          unsigned int v19 = *((_DWORD *)*v17 + 2);
          if (v19 != 13)
          {
            llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(void *)(*(void *)a1 + 40) + 272), v18);
            unsigned int v18 = v26;
            unsigned int v19 = *((_DWORD *)v26 + 2);
            if (v19 != 13)
            {
              llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(void *)(*(void *)a1 + 40) + 272), v26);
              unsigned int v18 = (llvm::Type *)v27;
              unsigned int v19 = v27[2];
            }
          }
          uint64_t v20 = *(llvm::ConstantInt **)v18;
          LODWORD(v29) = v19 >> 8;
          if (v19 >> 8 > 0x40) {
            operator new[]();
          }
          if (v19 <= 0xFF) {
            unint64_t v21 = 0;
          }
          else {
            unint64_t v21 = (void *)(0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v19) + 63));
          }
          uint64_t v28 = v21;
          unint64_t v22 = (llvm::ConstantInt *)llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&v28, a3);
          if (v29 >= 0x41 && v28) {
            MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
          }
          unint64_t Constant = llvm::ScalarEvolution::getConstant(a1, v22);
          uint64_t v28 = &v30;
          uint64_t v30 = a2;
          *(void *)&long long v31 = Constant;
          uint64_t v29 = 0x200000002;
          uint64_t MulExpr = llvm::ScalarEvolution::getMulExpr(a1, &v28, a3, 0);
          if (v28 != &v30) {
            free(v28);
          }
          unint64_t result = MulExpr;
          break;
      }
      break;
    }
  }
  else
  {
    int v8 = *(llvm::Constant **)(a2 + 32);
    BOOL v9 = *(llvm::ConstantFP **)v8;
    if ((*(_DWORD *)(*(void *)v8 + 8) & 0xFE) == 0x12) {
      unsigned int v10 = *(unsigned __int8 *)(**((void **)v9 + 2) + 8);
    }
    else {
      unsigned int v10 = *(_DWORD *)(*(void *)v8 + 8);
    }
    if (v10 <= 6) {
      Zero = llvm::ConstantFP::getZero(v9, (llvm::Type *)1, a3);
    }
    else {
      Zero = llvm::Constant::getNullValue(v9, (llvm::Type *)a2, a3);
    }
    uint64_t v13 = (llvm::ConstantInt **)Zero;
    uint64_t v14 = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, v8, v12);
    if (!v14)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        v34[0] = v13;
        v34[1] = v8;
        uint64_t v16 = **(void **)v14 + 1512;
        LODWORD(v28) = 15;
        uint64_t v29 = (uint64_t)v34;
        uint64_t v30 = 2;
        long long v31 = 0u;
        long long v32 = 0u;
        uint64_t v33 = 0;
        uint64_t v14 = (llvm::ConstantInt *)sub_1CC56C20C(v16, (uint64_t)v14, (unsigned __int8 *)&v28);
      }
    }
    return llvm::ScalarEvolution::getConstant(a1, v14);
  }
  return result;
}

uint64_t llvm::ScalarEvolution::getMinMaxExpr(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  v146[16] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)a3 + 2) == 1) {
    return **a3;
  }
  sub_1CC0ECBE8((uint64_t)a3, *(uint64_t **)(a1 + 40), *(void *)(a1 + 32));
  uint64_t ExistingSCEVInCache = llvm::ScalarEvolution::findExistingSCEVInCache(a1, a2, *a3, *((unsigned int *)a3 + 2));
  if (ExistingSCEVInCache) {
    return ExistingSCEVInCache;
  }
  int v9 = a2 & 0xFFFE;
  uint64_t ExistingSCEVInCache = **a3;
  if (ExistingSCEVInCache) {
    BOOL v10 = *(unsigned __int16 *)(ExistingSCEVInCache + 24) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (!v10)
  {
    unsigned int v11 = 0;
    unsigned int v12 = *((_DWORD *)a3 + 2);
    goto LABEL_10;
  }
  uint64_t v19 = (*a3)[1];
  if (v19) {
    BOOL v20 = *(unsigned __int16 *)(v19 + 24) == 0;
  }
  else {
    BOOL v20 = 0;
  }
  if (v20)
  {
    do
    {
      uint64_t v25 = ***(llvm::ConstantInt ****)a1;
      uint64_t v26 = *(void *)(ExistingSCEVInCache + 32);
      uint64_t v27 = v26 + 24;
      uint64_t v28 = *(void *)(v19 + 32);
      uint64_t v29 = v28 + 24;
      switch(a2)
      {
        case 8:
          uint64_t v36 = *(unsigned int *)(v26 + 32);
          if (v36 > 0x40)
          {
            unint64_t v62 = ((unint64_t)(v36 + 63) >> 3) & 0x3FFFFFF8;
            while (v62)
            {
              unint64_t v63 = *(void *)(*(void *)v27 - 8 + v62);
              unint64_t v64 = *(void *)(*(void *)v29 - 8 + v62);
              v62 -= 8;
              BOOL v37 = v63 > v64;
              if (v63 != v64) {
                goto LABEL_38;
              }
            }
          }
          else
          {
            BOOL v37 = *(void *)v27 >= *(void *)v29 && *(void *)v27 > *(void *)v29;
LABEL_38:
            if (v37) {
LABEL_40:
            }
              uint64_t v29 = v27;
          }
LABEL_41:
          LODWORD(v145) = *(_DWORD *)(v29 + 8);
          if (v145 > 0x40) {
            operator new[]();
          }
          char v38 = *(void **)v29;
          goto LABEL_49;
        case 0xB:
          uint64_t v35 = *(unsigned int *)(v26 + 32);
          if (v35 > 0x40)
          {
            uint64_t v43 = *(void *)(*(void *)v27 + 8 * ((v35 - 1) >> 6)) & (1 << (v35 - 1));
            unsigned int v44 = *(_DWORD *)(v28 + 32);
            unsigned int v45 = v44 - 1;
            uint64_t v46 = *(void *)(v28 + 24);
            if (v44 >= 0x41) {
              uint64_t v47 = (void *)(v46 + 8 * (v45 >> 6));
            }
            else {
              uint64_t v47 = (void *)v29;
            }
            if ((v43 != 0) == ((*v47 >> v45) & 1))
            {
              uint64_t v53 = v46 - 8;
              unint64_t v54 = ((unint64_t)(v35 + 63) >> 3) & 0x3FFFFFF8;
              while (v54)
              {
                unint64_t v55 = *(void *)(*(void *)v27 - 8 + v54);
                unint64_t v56 = *(void *)(v53 + v54);
                v54 -= 8;
                BOOL v57 = v55 > v56;
                if (v55 != v56)
                {
LABEL_86:
                  if (v57) {
                    goto LABEL_46;
                  }
                  goto LABEL_47;
                }
              }
            }
            else if (v43)
            {
              break;
            }
            goto LABEL_46;
          }
          if ((uint64_t)(*(void *)v27 << -(char)v35) >> -(char)v35 >= (uint64_t)(*(void *)v29 << -(char)v35) >> -(char)v35) {
            goto LABEL_46;
          }
          break;
        case 9:
          uint64_t v30 = *(unsigned int *)(v26 + 32);
          if (v30 > 0x40)
          {
            uint64_t v48 = *(void *)(*(void *)v27 + 8 * ((v30 - 1) >> 6)) & (1 << (v30 - 1));
            unsigned int v49 = *(_DWORD *)(v28 + 32);
            unsigned int v50 = v49 - 1;
            uint64_t v51 = *(void *)(v28 + 24);
            if (v49 >= 0x41) {
              uint64_t v52 = (void *)(v51 + 8 * (v50 >> 6));
            }
            else {
              uint64_t v52 = (void *)v29;
            }
            if ((v48 != 0) == ((*v52 >> v50) & 1))
            {
              uint64_t v58 = v51 - 8;
              unint64_t v59 = ((unint64_t)(v30 + 63) >> 3) & 0x3FFFFFF8;
              while (v59)
              {
                unint64_t v60 = *(void *)(*(void *)v27 - 8 + v59);
                unint64_t v61 = *(void *)(v58 + v59);
                v59 -= 8;
                BOOL v37 = v60 > v61;
                if (v60 != v61) {
                  goto LABEL_38;
                }
              }
            }
            else if (!v48)
            {
              goto LABEL_40;
            }
          }
          else
          {
            uint64_t v31 = -v30;
            uint64_t v32 = (uint64_t)(*(void *)v27 << v31) >> v31;
            uint64_t v33 = (uint64_t)(*(void *)v29 << v31) >> v31;
            BOOL v34 = v32 < v33 || v32 <= v33;
            if (!v34) {
              goto LABEL_40;
            }
          }
          goto LABEL_41;
        default:
          uint64_t v39 = *(unsigned int *)(v26 + 32);
          if (v39 > 0x40)
          {
            unint64_t v65 = ((unint64_t)(v39 + 63) >> 3) & 0x3FFFFFF8;
            while (v65)
            {
              unint64_t v66 = *(void *)(*(void *)v27 - 8 + v65);
              unint64_t v67 = *(void *)(*(void *)v29 - 8 + v65);
              v65 -= 8;
              BOOL v57 = v66 > v67;
              if (v66 != v67) {
                goto LABEL_86;
              }
            }
LABEL_46:
            uint64_t v27 = v29;
            break;
          }
          if (*(void *)v27 >= *(void *)v29) {
            goto LABEL_46;
          }
          break;
      }
LABEL_47:
      LODWORD(v145) = *(_DWORD *)(v27 + 8);
      if (v145 > 0x40) {
        operator new[]();
      }
      char v38 = *(void **)v27;
LABEL_49:
      uint64_t v144 = v38;
      int v40 = (llvm::ConstantInt *)llvm::ConstantInt::get(v25, (llvm::LLVMContext *)&v144, v7);
      if (v145 >= 0x41 && v144) {
        MEMORY[0x1D25D9CB0](v144, 0x1000C8000313F17);
      }
      **a3 = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a1, v40);
      uint64_t v41 = *((unsigned int *)a3 + 2);
      if (v41 == 2)
      {
        *((_DWORD *)a3 + 2) = 1;
        return **a3;
      }
      memmove(*a3 + 1, *a3 + 2, 8 * v41 - 16);
      int v42 = *((_DWORD *)a3 + 2) - 1;
      *((_DWORD *)a3 + 2) = v42;
      if (v42 == 1) {
        return **a3;
      }
      uint64_t ExistingSCEVInCache = **a3;
      uint64_t v19 = (*a3)[1];
    }
    while (v19 && !*(_WORD *)(v19 + 24));
  }
  uint64_t v21 = *(void *)(ExistingSCEVInCache + 32);
  unint64_t v22 = (unint64_t **)(v21 + 24);
  uint64_t v23 = *(unsigned int *)(v21 + 32);
  if ((a2 & 0xFFFD) != 9)
  {
    if (v23 > 0x40)
    {
      int v95 = 0;
      int64_t v96 = (unint64_t)(v23 + 63) >> 6;
      do
      {
        BOOL v34 = v96-- < 1;
        if (v34) {
          break;
        }
        unint64_t v97 = (*v22)[v96];
        v95 += __clz(v97);
      }
      while (!v97);
      int v98 = v23 | 0xFFFFFFC0;
      if ((v23 & 0x3F) == 0) {
        int v98 = 0;
      }
      BOOL v24 = v95 + v98 == v23;
    }
    else
    {
      BOOL v24 = *v22 == 0;
    }
    goto LABEL_142;
  }
  if (v23 <= 0x40)
  {
    BOOL v24 = *v22 == (unint64_t *)(1 << (v23 - 1));
    goto LABEL_142;
  }
  if (((*v22)[(v23 - 1) >> 6] >> (v23 - 1)))
  {
    BOOL v24 = llvm::APInt::countTrailingZerosSlowCase(v22) == v23 - 1;
LABEL_142:
    int v99 = v24;
    goto LABEL_145;
  }
  int v99 = 0;
LABEL_145:
  int v100 = sub_1CC0F1DDC(v21, (a2 & 0xFFFD) == 9);
  if (v9 == 8) {
    int v101 = v99;
  }
  else {
    int v101 = v100;
  }
  if (v101 == 1)
  {
    uint64_t v102 = *((unsigned int *)a3 + 2);
    if (v102 != 1)
    {
      memmove(*a3, *a3 + 1, 8 * v102 - 8);
      LODWORD(v102) = *((_DWORD *)a3 + 2);
    }
    unsigned int v11 = 0;
    unsigned int v12 = v102 - 1;
    *((_DWORD *)a3 + 2) = v102 - 1;
  }
  else
  {
    if (v9 == 8) {
      char v103 = v100;
    }
    else {
      char v103 = v99;
    }
    if (v103) {
      return ExistingSCEVInCache;
    }
    unsigned int v12 = *((_DWORD *)a3 + 2);
    unsigned int v11 = 1;
  }
  if (v12 == 1) {
    return **a3;
  }
LABEL_10:
  unsigned int v13 = v12;
  if (v12 > v11)
  {
    uint64_t v14 = *a3;
    uint64_t v15 = v11;
    uint64_t v16 = -8 * v11;
    while (1)
    {
      uint64_t v17 = v14[v15];
      unsigned int v18 = *(unsigned __int16 *)(v17 + 24);
      if (v18 >= a2) {
        break;
      }
      ++v15;
      v16 -= 8;
      if (v13 == v15) {
        goto LABEL_101;
      }
    }
    if (v18 == a2)
    {
      int v68 = &v14[v16 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v69 = -v16;
      do
      {
        uint64_t v70 = &v14[v13];
        if (v70 != v68 + 1)
        {
          memmove(v68, v68 + 1, (char *)v70 - (char *)(v68 + 1));
          unsigned int v13 = *((_DWORD *)a3 + 2);
        }
        uint64_t v71 = v13 - 1;
        *((_DWORD *)a3 + 2) = v71;
        uint64_t v72 = *(void *)(v17 + 40);
        if (v72 + v71 > (unint64_t)*((unsigned int *)a3 + 3)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v14 = *a3;
        if (v72)
        {
          memcpy(&v14[v71], *(const void **)(v17 + 32), 8 * v72);
          LODWORD(v71) = *((_DWORD *)a3 + 2);
          uint64_t v14 = *a3;
        }
        unsigned int v13 = v71 + v72;
        *((_DWORD *)a3 + 2) = v13;
        int v68 = (uint64_t *)((char *)v14 + v69);
        uint64_t v17 = v14[v15];
      }
      while (*(unsigned __int16 *)(v17 + 24) == a2);
      return llvm::ScalarEvolution::getMinMaxExpr(a1, a2, a3);
    }
  }
LABEL_101:
  if ((a2 & 0xFFFD) == 9) {
    int v73 = 39;
  }
  else {
    int v73 = 35;
  }
  if ((a2 & 0xFFFD) == 9) {
    int v74 = 41;
  }
  else {
    int v74 = 37;
  }
  if (v9 == 8) {
    unsigned int v75 = v73;
  }
  else {
    unsigned int v75 = v74;
  }
  if (v9 == 8) {
    unsigned int v76 = v74;
  }
  else {
    unsigned int v76 = v73;
  }
  unsigned int v77 = v13 - 1;
  if (v13 == 1) {
    return **a3;
  }
  int v78 = 0;
  do
  {
    uint64_t v79 = *a3;
    uint64_t v80 = (*a3)[v78];
    uint64_t v81 = (v78 + 1);
    uint64_t v82 = (*a3)[v81];
    if (v80 == v82
      || (isKnownViaNonRecursiveReasoning = llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning((llvm::ScalarEvolution *)a1, v75, v80, v82), uint64_t v79 = *a3, isKnownViaNonRecursiveReasoning))
    {
      uint64_t v84 = &v79[v78];
      unint64_t v85 = v84 + 1;
      unint64_t v86 = v84 + 2;
    }
    else
    {
      if (!llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning((llvm::ScalarEvolution *)a1, v76, v79[v78], v79[v81]))
      {
        ++v78;
        continue;
      }
      uint64_t v79 = *a3;
      unint64_t v85 = &(*a3)[v78];
      unint64_t v86 = v85 + 1;
    }
    uint64_t v87 = &v79[*((unsigned int *)a3 + 2)];
    int64_t v88 = (char *)v87 - (char *)v86;
    if (v87 != v86)
    {
      memmove(v85, v86, (char *)v87 - (char *)v86);
      uint64_t v79 = *a3;
    }
    *((_DWORD *)a3 + 2) = (unint64_t)((char *)v85 + v88 - (char *)v79) >> 3;
    --v77;
  }
  while (v78 != v77);
  uint64_t v89 = *((unsigned int *)a3 + 2);
  if (v89 == 1) {
    return **a3;
  }
  __s1 = v143;
  v143[0] = a2;
  uint64_t v142 = 0x2000000001;
  if (v89)
  {
    unint64_t v90 = 0;
    uint64_t v91 = 8 * v89;
    LODWORD(v89) = 1;
    do
    {
      uint64_t v92 = (*a3)[v90 / 8];
      if (v89 >= HIDWORD(v142)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__s1 + v89) = v92;
      unsigned int v93 = v142 + 1;
      LODWORD(v142) = v93;
      if (v93 >= HIDWORD(v142)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)__s1 + v93) = HIDWORD(v92);
      uint64_t v89 = (v142 + 1);
      LODWORD(v142) = v142 + 1;
      v90 += 8;
    }
    while (v91 != v90);
    uint64_t v94 = __s1;
  }
  else
  {
    uint64_t v89 = 1;
    uint64_t v94 = v143;
  }
  uint64_t v104 = *(void *)(a1 + 832)
       + 8 * ((*(_DWORD *)(a1 + 840) - 1) & sub_1CC13A6B8(v94, (uint64_t)v94 + 4 * v89));
  uint64_t ExistingSCEVInCache = *(void *)v104;
  uint64_t v144 = v146;
  uint64_t v145 = 0x2000000000;
  if (ExistingSCEVInCache) {
    BOOL v105 = (ExistingSCEVInCache & 1) == 0;
  }
  else {
    BOOL v105 = 0;
  }
  if (v105)
  {
    uint64_t v106 = __s1;
    while (*(void *)(ExistingSCEVInCache + 16) != v142
         || memcmp(__s1, *(const void **)(ExistingSCEVInCache + 8), 4 * v142))
    {
      LODWORD(v145) = 0;
      uint64_t ExistingSCEVInCache = *(void *)ExistingSCEVInCache;
      if (ExistingSCEVInCache) {
        BOOL v107 = (ExistingSCEVInCache & 1) == 0;
      }
      else {
        BOOL v107 = 0;
      }
      if (!v107) {
        goto LABEL_172;
      }
    }
  }
  else
  {
LABEL_172:
    uint64_t v136 = sub_1CB906F34((uint64_t *)(a1 + 864), 8 * *((unsigned int *)a3 + 2), 3);
    uint64_t v108 = *((unsigned int *)a3 + 2);
    if (v108)
    {
      uint64_t v109 = *a3;
      uint64_t v110 = 8 * v108;
      unsigned int v111 = (void *)v136;
      do
      {
        uint64_t v112 = *v109++;
        *v111++ = v112;
        v110 -= 8;
      }
      while (v110);
    }
    *(void *)(a1 + 944) += 48;
    uint64_t v113 = *(void *)(a1 + 864);
    if (((v113 + 7) & 0xFFFFFFFFFFFFFFF8) - v113 + 48 > *(void *)(a1 + 872) - v113)
    {
      unsigned int v130 = *(_DWORD *)(a1 + 888) >> 7;
      if (v130 >= 0x1E) {
        LOBYTE(v130) = 30;
      }
      uint64_t v131 = 4096 << v130;
      uint64_t ExistingSCEVInCache = (uint64_t)operator new(4096 << v130, (std::align_val_t)8uLL);
      unsigned int v132 = *(_DWORD *)(a1 + 888);
      if (v132 >= *(_DWORD *)(a1 + 892)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 880) + 8 * v132) = ExistingSCEVInCache;
      ++*(_DWORD *)(a1 + 888);
      *(void *)(a1 + 872) = ExistingSCEVInCache + v131;
    }
    else
    {
      uint64_t ExistingSCEVInCache = (v113 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(a1 + 864) = ExistingSCEVInCache + 48;
    uint64_t v114 = sub_1CB906F34((uint64_t *)(a1 + 864), 4 * v142, 2);
    if (v142)
    {
      unint64_t v115 = (int *)__s1;
      uint64_t v116 = 4 * v142;
      unsigned int v117 = (_DWORD *)v114;
      do
      {
        int v118 = *v115++;
        *v117++ = v118;
        v116 -= 4;
      }
      while (v116);
      uint64_t v119 = v142;
    }
    else
    {
      uint64_t v119 = 0;
    }
    uint64_t v120 = *((unsigned int *)a3 + 2);
    LODWORD(v145) = 16;
    LOWORD(v121) = 1;
    uint64_t v144 = (void *)1;
    if (v120)
    {
      uint64_t v133 = v119;
      uint64_t v134 = v114;
      uint64_t v135 = v104;
      uint64_t v122 = 8 * v120;
      uint64_t v121 = 1;
      unsigned int v123 = 16;
      uint64_t v124 = v136;
      do
      {
        uint64_t v125 = *(unsigned __int16 *)(*(void *)v124 + 26);
        int v138 = 16;
        uint64_t v137 = v125;
        llvm::APInt::uadd_sat((llvm::APInt *)&v144, (const llvm::APInt *)&v137, (uint64_t)&v139);
        if (v123 >= 0x41 && v121) {
          MEMORY[0x1D25D9CB0](v121, 0x1000C8000313F17);
        }
        uint64_t v121 = (uint64_t)v139;
        uint64_t v144 = v139;
        unsigned int v123 = v140;
        LODWORD(v145) = v140;
        v124 += 8;
        v122 -= 8;
      }
      while (v122);
      if (v140 >= 0x41)
      {
        uint64_t v126 = *v139;
        MEMORY[0x1D25D9CB0](v139, 0x1000C8000313F17);
        LOWORD(v121) = v126;
      }
      uint64_t v104 = v135;
      uint64_t v119 = v133;
      uint64_t v114 = v134;
    }
    *(void *)uint64_t ExistingSCEVInCache = 0;
    *(void *)(ExistingSCEVInCache + 8) = v114;
    *(void *)(ExistingSCEVInCache + 16) = v119;
    *(_WORD *)(ExistingSCEVInCache + 24) = a2;
    *(_WORD *)(ExistingSCEVInCache + 26) = v121;
    *(void *)(ExistingSCEVInCache + 32) = v136;
    *(void *)(ExistingSCEVInCache + 40) = v120;
    *(_WORD *)(ExistingSCEVInCache + 28) = 6;
    unsigned int v127 = *(_DWORD *)(a1 + 844) + 1;
    int v128 = *(_DWORD *)(a1 + 840);
    if (v127 > 2 * v128)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 832, 2 * v128, (uint64_t)off_1F2607658);
      uint64_t v144 = v146;
      uint64_t v145 = 0x2000000000;
      uint64_t v104 = *(void *)(a1 + 832)
           + 8
           * ((*(_DWORD *)(a1 + 840) - 1) & sub_1CC13A6B8(*(void **)(ExistingSCEVInCache + 8), *(void *)(ExistingSCEVInCache + 8)+ 4 * *(void *)(ExistingSCEVInCache + 16)));
      if (v144 != v146) {
        free(v144);
      }
      unsigned int v127 = *(_DWORD *)(a1 + 844) + 1;
    }
    *(_DWORD *)(a1 + 844) = v127;
    uint64_t v129 = *(void *)v104;
    if (!*(void *)v104) {
      uint64_t v129 = v104 | 1;
    }
    *(void *)uint64_t ExistingSCEVInCache = v129;
    *(void *)uint64_t v104 = ExistingSCEVInCache;
    llvm::ScalarEvolution::registerUser(a1, ExistingSCEVInCache, *a3, *((unsigned int *)a3 + 2));
    uint64_t v106 = __s1;
  }
  if (v106 != v143) {
    free(v106);
  }
  return ExistingSCEVInCache;
}

uint64_t sub_1CC0F1DDC(uint64_t a1, int a2)
{
  unint64_t v3 = (llvm::APInt *)(a1 + 24);
  unsigned int v4 = *(_DWORD *)(a1 + 32);
  if (a2)
  {
    if (v4 <= 0x40)
    {
      uint64_t v5 = *(void *)v3;
      unint64_t v6 = ~(-1 << (v4 - 1));
      return v5 == v6;
    }
    unsigned int v9 = v4 - 1;
    if ((*(void *)(*(void *)v3 + 8 * ((v4 - 1) >> 6)) >> (v4 - 1))) {
      return 0;
    }
  }
  else
  {
    if (!v4) {
      return 1;
    }
    if (v4 <= 0x40)
    {
      uint64_t v5 = *(void *)v3;
      unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
      return v5 == v6;
    }
    unsigned int v9 = v4;
  }
  return llvm::APInt::countTrailingOnesSlowCase(v3) == v9;
}

uint64_t llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(llvm::ScalarEvolution *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8 = a2 - 35;
  uint64_t v9 = a3;
  uint64_t v10 = a4;
  uint64_t v11 = a3;
  uint64_t v12 = a4;
  switch(a2)
  {
    case '#':
      uint64_t v11 = a4;
      uint64_t v12 = a3;
      goto LABEL_2;
    case '%':
LABEL_2:
      if (*(_WORD *)(v11 + 24) == 2) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = 0;
      }
      if (*(_WORD *)(v12 + 24) == 3) {
        uint64_t v9 = v12;
      }
      else {
        uint64_t v9 = 0;
      }
      goto LABEL_8;
    case '\'':
      uint64_t v9 = a4;
      uint64_t v10 = a3;
      goto LABEL_38;
    case ')':
LABEL_38:
      if (*(_WORD *)(v9 + 24) != 3) {
        uint64_t v9 = 0;
      }
      if (*(_WORD *)(v10 + 24) != 2) {
        uint64_t v10 = 0;
      }
LABEL_8:
      if (v9) {
        BOOL v13 = v10 == 0;
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13 && *(void *)(v9 + 32) == *(void *)(v10 + 32)) {
        return 1;
      }
      goto LABEL_13;
    default:
LABEL_13:
      if (llvm::ScalarEvolution::isKnownPredicateViaConstantRanges(a1, a2, (llvm::SCEV *)a3, (const llvm::APInt *)a4)) {
        return 1;
      }
      uint64_t v15 = a3;
      uint64_t v16 = a4;
      uint64_t v17 = a3;
      uint64_t v18 = a4;
      switch(v8)
      {
        case 0u:
          uint64_t v17 = a4;
          uint64_t v18 = a3;
          goto LABEL_15;
        case 2u:
LABEL_15:
          if (!v17 || *(_WORD *)(v17 + 24) != 10) {
            goto LABEL_17;
          }
          uint64_t v28 = *(void *)(v17 + 32);
          uint64_t v29 = *(void *)(v17 + 40);
          if (v29)
          {
            uint64_t v30 = 8 * v29;
            uint64_t v31 = *(void **)(v17 + 32);
            do
            {
              if (*v31 == v18) {
                goto LABEL_64;
              }
              ++v31;
              v30 -= 8;
            }
            while (v30);
            uint64_t v31 = (void *)(v28 + 8 * v29);
          }
          else
          {
            uint64_t v31 = *(void **)(v17 + 32);
          }
LABEL_64:
          if (v29 != ((uint64_t)v31 - v28) >> 3) {
            return 1;
          }
LABEL_17:
          if (!v18 || *(_WORD *)(v18 + 24) != 8) {
            goto LABEL_19;
          }
          uint64_t v36 = *(void *)(v18 + 32);
          uint64_t v24 = *(void *)(v18 + 40);
          if (v24)
          {
            uint64_t v37 = 8 * v24;
            char v38 = *(void **)(v18 + 32);
            do
            {
              if (*v38 == v17) {
                goto LABEL_83;
              }
              ++v38;
              v37 -= 8;
            }
            while (v37);
            char v38 = (void *)(v36 + 8 * v24);
          }
          else
          {
            char v38 = *(void **)(v18 + 32);
          }
LABEL_83:
          uint64_t v27 = (uint64_t)v38 - v36;
          goto LABEL_54;
        case 4u:
          uint64_t v15 = a4;
          uint64_t v16 = a3;
          goto LABEL_44;
        case 6u:
LABEL_44:
          if (!v15 || *(_WORD *)(v15 + 24) != 11) {
            goto LABEL_46;
          }
          uint64_t v32 = *(void *)(v15 + 32);
          uint64_t v33 = *(void *)(v15 + 40);
          if (v33)
          {
            uint64_t v34 = 8 * v33;
            uint64_t v35 = *(void **)(v15 + 32);
            do
            {
              if (*v35 == v16) {
                goto LABEL_73;
              }
              ++v35;
              v34 -= 8;
            }
            while (v34);
            uint64_t v35 = (void *)(v32 + 8 * v33);
          }
          else
          {
            uint64_t v35 = *(void **)(v15 + 32);
          }
LABEL_73:
          if (v33 != ((uint64_t)v35 - v32) >> 3) {
            return 1;
          }
LABEL_46:
          if (!v16 || *(_WORD *)(v16 + 24) != 9) {
            goto LABEL_19;
          }
          uint64_t v23 = *(char **)(v16 + 32);
          uint64_t v24 = *(void *)(v16 + 40);
          if (v24)
          {
            uint64_t v25 = 8 * v24;
            uint64_t v26 = v23;
            do
            {
              if (*(void *)v26 == v15) {
                goto LABEL_53;
              }
              v26 += 8;
              v25 -= 8;
            }
            while (v25);
            uint64_t v26 = &v23[8 * v24];
          }
          else
          {
            uint64_t v26 = v23;
          }
LABEL_53:
          uint64_t v27 = v26 - v23;
LABEL_54:
          if (v24 != v27 >> 3) {
            return 1;
          }
LABEL_19:
          if ((a2 & 0xFFFFFFFE) != 0x20)
          {
            if (a3)
            {
              if (*(_WORD *)(a3 + 24) == 7)
              {
                if (a4)
                {
                  if (*(_WORD *)(a4 + 24) == 7
                    && *(void *)(a3 + 48) == *(void *)(a4 + 48)
                    && *(void *)(a3 + 40) == 2
                    && *(void *)(a4 + 40) == 2)
                  {
                    uint64_t v19 = *(void *)(a3 + 32);
                    uint64_t v20 = *(void *)(a4 + 32);
                    if (*(void *)(v19 + 8) == *(void *)(v20 + 8))
                    {
                      __int16 v21 = a2 - 38 >= 4 ? 2 : 4;
                      if (((unsigned __int16)v21 & *(_WORD *)(a3 + 28)) != 0
                        && ((unsigned __int16)v21 & *(_WORD *)(a4 + 28)) != 0
                        && (llvm::ScalarEvolution::isKnownPredicate(a1, a2, *(const llvm::SCEV **)v19, *(const llvm::SCEV **)v20) & 1) != 0)
                      {
                        return 1;
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t result = llvm::ScalarEvolution::isKnownPredicateViaNoOverflow(a1, a2, (const llvm::APInt *)a3, (const llvm::APInt *)a4, v14);
          break;
        default:
          goto LABEL_19;
      }
      return result;
  }
}

uint64_t llvm::ScalarEvolution::getSequentialMinMaxExpr(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  v84[16] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a3[2];
  if (v6 == 2)
  {
    char v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = *(uint64_t **)a3;
    while (1)
    {
      char v10 = v7;
      if (!*(_WORD *)(v9[v8] + 24)) {
        break;
      }
      char v7 = 1;
      uint64_t v8 = 1;
      if (v10) {
        goto LABEL_5;
      }
    }
    return llvm::ScalarEvolution::getMinMaxExpr(a1, 10, a3);
  }
  else
  {
    if (v6 == 1) {
      return **(void **)a3;
    }
    uint64_t v9 = *(uint64_t **)a3;
LABEL_5:
    uint64_t ExistingSCEVInCache = llvm::ScalarEvolution::findExistingSCEVInCache(a1, a2, v9, v6);
    if (ExistingSCEVInCache) {
      return ExistingSCEVInCache;
    }
    int v78 = (void *)a1;
    LOWORD(v79) = a2;
    WORD1(v79) = 10;
    uint64_t v80 = v84;
    uint64_t v81 = v84;
    uint64_t v82 = 16;
    int v83 = 0;
    int v12 = sub_1CC0F29FC((uint64_t)&v78, *(uint64_t **)a3, a3[2], (uint64_t)a3);
    char v13 = v12;
    if (v12) {
      Sequentialuint64_t MinMaxExpr = llvm::ScalarEvolution::getSequentialMinMaxExpr(a1, a2, a3);
    }
    else {
      Sequentialuint64_t MinMaxExpr = 0;
    }
    if (v81 != v80) {
      free(v81);
    }
    if ((v13 & 1) == 0)
    {
      unsigned int v15 = a3[2];
      if (!v15)
      {
        uint64_t v29 = v77;
        __s1 = v77;
        v77[0] = a2;
        uint64_t v76 = 0x2000000001;
        uint64_t v26 = 1;
        goto LABEL_29;
      }
      unint64_t v16 = 0;
      LODWORD(v17) = 0;
      for (char i = 0; ; char i = 1)
      {
        uint64_t v19 = *(uint64_t **)a3;
        unint64_t v17 = v17;
        while (1)
        {
          uint64_t v20 = v19[v16];
          if (*(unsigned __int16 *)(v20 + 24) == a2) {
            break;
          }
          unint64_t v16 = ++v17;
          if (v17 >= v15)
          {
            if ((i & 1) == 0)
            {
              __s1 = v77;
              v77[0] = a2;
              uint64_t v76 = 0x2000000001;
              if (v15)
              {
                uint64_t v25 = 0;
                LODWORD(v26) = 1;
                do
                {
                  uint64_t v27 = *(void *)(*(void *)a3 + v25);
                  if (v26 >= HIDWORD(v76)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_DWORD *)__s1 + v26) = v27;
                  unsigned int v28 = v76 + 1;
                  LODWORD(v76) = v28;
                  if (v28 >= HIDWORD(v76)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_DWORD *)__s1 + v28) = HIDWORD(v27);
                  uint64_t v26 = (v76 + 1);
                  LODWORD(v76) = v76 + 1;
                  v25 += 8;
                }
                while (8 * v15 != v25);
                uint64_t v29 = __s1;
              }
              else
              {
                uint64_t v26 = 1;
                uint64_t v29 = v77;
              }
LABEL_29:
              uint64_t v30 = *(void *)(a1 + 832)
                  + 8 * ((*(_DWORD *)(a1 + 840) - 1) & sub_1CC13A6B8(v29, (uint64_t)v29 + 4 * v26));
              Sequentialuint64_t MinMaxExpr = *(void *)v30;
              int v78 = &v80;
              uint64_t v79 = 0x2000000000;
              if (SequentialMinMaxExpr) {
                BOOL v31 = (SequentialMinMaxExpr & 1) == 0;
              }
              else {
                BOOL v31 = 0;
              }
              if (v31)
              {
                uint64_t v32 = __s1;
                while (*(void *)(SequentialMinMaxExpr + 16) != v76
                     || memcmp(__s1, *(const void **)(SequentialMinMaxExpr + 8), 4 * v76))
                {
                  LODWORD(v79) = 0;
                  Sequentialuint64_t MinMaxExpr = *(void *)SequentialMinMaxExpr;
                  if (SequentialMinMaxExpr) {
                    BOOL v33 = (SequentialMinMaxExpr & 1) == 0;
                  }
                  else {
                    BOOL v33 = 0;
                  }
                  if (!v33) {
                    goto LABEL_41;
                  }
                }
              }
              else
              {
LABEL_41:
                uint64_t v34 = sub_1CB906F34((uint64_t *)(a1 + 864), 8 * a3[2], 3);
                uint64_t v35 = a3[2];
                if (v35)
                {
                  uint64_t v36 = *(uint64_t **)a3;
                  uint64_t v37 = 8 * v35;
                  char v38 = (void *)v34;
                  do
                  {
                    uint64_t v39 = *v36++;
                    *v38++ = v39;
                    v37 -= 8;
                  }
                  while (v37);
                }
                uint64_t v69 = v34;
                *(void *)(a1 + 944) += 48;
                uint64_t v40 = *(void *)(a1 + 864);
                if (((v40 + 7) & 0xFFFFFFFFFFFFFFF8) - v40 + 48 > *(void *)(a1 + 872) - v40)
                {
                  unsigned int v63 = *(_DWORD *)(a1 + 888) >> 7;
                  if (v63 >= 0x1E) {
                    LOBYTE(v63) = 30;
                  }
                  uint64_t v64 = 4096 << v63;
                  Sequentialuint64_t MinMaxExpr = (uint64_t)operator new(4096 << v63, (std::align_val_t)8uLL);
                  unsigned int v65 = *(_DWORD *)(a1 + 888);
                  if (v65 >= *(_DWORD *)(a1 + 892)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*(void *)(a1 + 880) + 8 * v65) = SequentialMinMaxExpr;
                  ++*(_DWORD *)(a1 + 888);
                  *(void *)(a1 + 872) = SequentialMinMaxExpr + v64;
                }
                else
                {
                  Sequentialuint64_t MinMaxExpr = (v40 + 7) & 0xFFFFFFFFFFFFFFF8;
                }
                *(void *)(a1 + 864) = SequentialMinMaxExpr + 48;
                uint64_t v41 = sub_1CB906F34((uint64_t *)(a1 + 864), 4 * v76, 2);
                if (v76)
                {
                  int v42 = (int *)__s1;
                  uint64_t v43 = 4 * v76;
                  unsigned int v44 = (_DWORD *)v41;
                  uint64_t v45 = v69;
                  do
                  {
                    int v46 = *v42++;
                    *v44++ = v46;
                    v43 -= 4;
                  }
                  while (v43);
                  uint64_t v47 = v76;
                }
                else
                {
                  uint64_t v47 = 0;
                  uint64_t v45 = v69;
                }
                uint64_t v48 = a3[2];
                LODWORD(v79) = 16;
                LOWORD(v49) = 1;
                int v78 = (void *)1;
                if (v48)
                {
                  uint64_t v66 = v47;
                  uint64_t v67 = v41;
                  uint64_t v68 = v30;
                  uint64_t v50 = 8 * v48;
                  uint64_t v49 = 1;
                  unsigned int v51 = 16;
                  do
                  {
                    uint64_t v52 = *(unsigned __int16 *)(*(void *)v45 + 26);
                    int v72 = 16;
                    uint64_t v71 = v52;
                    llvm::APInt::uadd_sat((llvm::APInt *)&v78, (const llvm::APInt *)&v71, (uint64_t)&v73);
                    if (v51 >= 0x41 && v49) {
                      MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
                    }
                    uint64_t v49 = (uint64_t)v73;
                    int v78 = v73;
                    unsigned int v51 = v74;
                    LODWORD(v79) = v74;
                    v45 += 8;
                    v50 -= 8;
                  }
                  while (v50);
                  if (v74 >= 0x41)
                  {
                    uint64_t v53 = *v73;
                    MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
                    LOWORD(v49) = v53;
                  }
                  uint64_t v30 = v68;
                  uint64_t v45 = v69;
                  uint64_t v47 = v66;
                  uint64_t v41 = v67;
                }
                *(void *)Sequentialuint64_t MinMaxExpr = 0;
                *(void *)(SequentialMinMaxExpr + 8) = v41;
                *(void *)(SequentialMinMaxExpr + 16) = v47;
                *(_WORD *)(SequentialMinMaxExpr + 24) = a2;
                *(_WORD *)(SequentialMinMaxExpr + 26) = v49;
                *(void *)(SequentialMinMaxExpr + 32) = v45;
                *(void *)(SequentialMinMaxExpr + 40) = v48;
                *(_WORD *)(SequentialMinMaxExpr + 28) = 6;
                unsigned int v54 = *(_DWORD *)(a1 + 844) + 1;
                int v55 = *(_DWORD *)(a1 + 840);
                if (v54 > 2 * v55)
                {
                  llvm::FoldingSetBase::GrowBucketCount(a1 + 832, 2 * v55, (uint64_t)off_1F2607658);
                  int v78 = &v80;
                  uint64_t v79 = 0x2000000000;
                  uint64_t v30 = *(void *)(a1 + 832)
                      + 8
                      * ((*(_DWORD *)(a1 + 840) - 1) & sub_1CC13A6B8(*(void **)(SequentialMinMaxExpr + 8), *(void *)(SequentialMinMaxExpr + 8)+ 4 * *(void *)(SequentialMinMaxExpr + 16)));
                  if (v78 != &v80) {
                    free(v78);
                  }
                  unsigned int v54 = *(_DWORD *)(a1 + 844) + 1;
                }
                *(_DWORD *)(a1 + 844) = v54;
                uint64_t v56 = *(void *)v30;
                if (!*(void *)v30) {
                  uint64_t v56 = v30 | 1;
                }
                *(void *)Sequentialuint64_t MinMaxExpr = v56;
                *(void *)uint64_t v30 = SequentialMinMaxExpr;
                llvm::ScalarEvolution::registerUser(a1, SequentialMinMaxExpr, *(uint64_t **)a3, a3[2]);
                uint64_t v32 = __s1;
              }
              if (v32 != v77) {
                free(v32);
              }
              return SequentialMinMaxExpr;
            }
            return llvm::ScalarEvolution::getSequentialMinMaxExpr(a1, a2, a3);
          }
        }
        uint64_t v58 = &v19[v16];
        unint64_t v59 = &v19[v15];
        if (v59 != v58 + 1)
        {
          memmove(v58, v58 + 1, (char *)v59 - (char *)(v58 + 1));
          unsigned int v15 = a3[2];
          uint64_t v19 = *(uint64_t **)a3;
        }
        uint64_t v60 = v15 - 1;
        a3[2] = v60;
        __int16 v21 = *(uint64_t **)(v20 + 32);
        unint64_t v61 = *(void *)(v20 + 40);
        if (v16 == v60)
        {
          sub_1CD47792C(a3, *(unsigned char **)(v20 + 32), &v21[v61]);
        }
        else
        {
          uint64_t v70 = (char *)&v21[v61];
          if (v61 + v60 > a3[3]) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v23 = &v19[v16];
          unint64_t v62 = &v19[v60];
          unint64_t v24 = v62 - v23;
          if (v24 >= v61)
          {
            sub_1CD4570C8((uint64_t)a3, (char *)&v62[-v61], (char *)&v19[v60]);
            if (&v62[-v61] != v23) {
              memmove(&v23[v61], v23, (char *)&v62[-v61] - (char *)v23);
            }
            if (v61) {
              memmove(v23, v21, 8 * v61);
            }
          }
          else
          {
            a3[2] = v60 + v61;
            if (v16 != v60)
            {
              memcpy(&v19[(v60 + v61) - v24], v23, (char *)v62 - (char *)v23);
              do
              {
                uint64_t v22 = *v21++;
                *v23++ = v22;
                --v24;
              }
              while (v24);
            }
            if (v21 != (uint64_t *)v70) {
              memcpy(v62, v21, v70 - (char *)v21);
            }
          }
        }
        unsigned int v15 = a3[2];
        unint64_t v16 = v17;
        if (v15 <= v17) {
          return llvm::ScalarEvolution::getSequentialMinMaxExpr(a1, a2, a3);
        }
      }
    }
    return SequentialMinMaxExpr;
  }
}

uint64_t sub_1CC0F29FC(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  v33[6] = *MEMORY[0x1E4F143B8];
  BOOL v31 = v33;
  uint64_t v32 = 0x600000000;
  if (a3 >= 7) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (!a3)
  {
LABEL_59:
    uint64_t v29 = 0;
    goto LABEL_60;
  }
  char v7 = 0;
  uint64_t v8 = &a2[a3];
  do
  {
    while (1)
    {
      uint64_t v9 = *v5;
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v11 = *(unsigned int *)(a1 + 36);
      if (v10 == *(void *)(a1 + 16))
      {
        if (v11)
        {
          int v12 = 0;
          uint64_t v13 = 8 * v11;
          uint64_t v14 = *(uint64_t **)(a1 + 24);
          while (*v14 != v9)
          {
            if (*v14 == -2) {
              int v12 = v14;
            }
            ++v14;
            v13 -= 8;
            if (!v13)
            {
              if (!v12) {
                goto LABEL_13;
              }
              *int v12 = v9;
              --*(_DWORD *)(a1 + 40);
              goto LABEL_37;
            }
          }
          goto LABEL_48;
        }
LABEL_13:
        unsigned int v15 = *(_DWORD *)(a1 + 32);
        if (v11 < v15)
        {
          *(_DWORD *)(a1 + 36) = v11 + 1;
          *(void *)(v10 + 8 * v11) = v9;
          goto LABEL_37;
        }
      }
      else
      {
        unsigned int v15 = *(_DWORD *)(a1 + 32);
      }
      if (3 * v15 <= 4 * ((int)v11 - *(_DWORD *)(a1 + 40)))
      {
        if (v15 >= 0x40) {
          v15 *= 2;
        }
        else {
          unsigned int v15 = 128;
        }
      }
      else if (v15 - v11 >= v15 >> 3)
      {
        goto LABEL_18;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 16), v15);
      unsigned int v15 = *(_DWORD *)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 24);
LABEL_18:
      unsigned int v16 = v15 - 1;
      unsigned int v17 = (v15 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      uint64_t v18 = (uint64_t *)(v10 + 8 * v17);
      uint64_t v19 = *v18;
      if (*v18 == -1) {
        break;
      }
      uint64_t v20 = 0;
      int v21 = 1;
      while (v19 != v9)
      {
        if (v20) {
          BOOL v22 = 0;
        }
        else {
          BOOL v22 = v19 == -2;
        }
        if (v22) {
          uint64_t v20 = v18;
        }
        unsigned int v23 = v17 + v21++;
        unsigned int v17 = v23 & v16;
        uint64_t v18 = (uint64_t *)(v10 + 8 * (v23 & v16));
        uint64_t v19 = *v18;
        if (*v18 == -1) {
          goto LABEL_30;
        }
      }
LABEL_48:
      ++v5;
      char v7 = 1;
      if (v5 == v8) {
        goto LABEL_58;
      }
    }
    uint64_t v20 = 0;
LABEL_30:
    if (v20) {
      unint64_t v24 = v20;
    }
    else {
      unint64_t v24 = v18;
    }
    if (*v24 == v9) {
      goto LABEL_48;
    }
    if (*v24 == -2) {
      --*(_DWORD *)(a1 + 40);
    }
    else {
      ++*(_DWORD *)(a1 + 36);
    }
    *unint64_t v24 = v9;
LABEL_37:
    switch(*(_WORD *)(v9 + 24))
    {
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v25 = sub_1CC133FAC((uint64_t *)a1, v9);
        break;
      default:
        uint64_t v25 = v9;
        char v26 = 1;
        break;
    }
    BOOL v27 = v9 != v25 || v26 == 0;
    if (v26)
    {
      int v28 = v32;
      if (v32 >= HIDWORD(v32)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v31 + v32) = v25;
      LODWORD(v32) = v28 + 1;
    }
    v7 |= v27;
    ++v5;
  }
  while (v5 != v8);
  if ((v7 & 1) == 0) {
    goto LABEL_59;
  }
LABEL_58:
  sub_1CC133E7C(a4, (uint64_t)&v31);
  uint64_t v29 = 1;
LABEL_60:
  if (v31 != v33) {
    free(v31);
  }
  return v29;
}

uint64_t llvm::ScalarEvolution::getUMaxExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV *a3)
{
  v6[2] = *MEMORY[0x1E4F143B8];
  v5[0] = v6;
  v6[0] = a2;
  v6[1] = a3;
  v5[1] = (void *)0x200000002;
  uint64_t MinMaxExpr = llvm::ScalarEvolution::getMinMaxExpr((uint64_t)this, 8, (uint64_t **)v5);
  if (v5[0] != v6) {
    free(v5[0]);
  }
  return MinMaxExpr;
}

uint64_t llvm::ScalarEvolution::getSMinExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV *a3)
{
  v6[2] = *MEMORY[0x1E4F143B8];
  v5[0] = v6;
  v6[0] = a2;
  v6[1] = a3;
  v5[1] = (void *)0x200000002;
  uint64_t MinMaxExpr = llvm::ScalarEvolution::getMinMaxExpr((uint64_t)this, 11, (uint64_t **)v5);
  if (v5[0] != v6) {
    free(v5[0]);
  }
  return MinMaxExpr;
}

uint64_t llvm::ScalarEvolution::getUMinExpr(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV *a3, int a4)
{
  v8[2] = *MEMORY[0x1E4F143B8];
  v7[0] = v8;
  v8[0] = a2;
  v8[1] = a3;
  v7[1] = (void *)0x200000002;
  if (a4) {
    Sequentialuint64_t MinMaxExpr = llvm::ScalarEvolution::getSequentialMinMaxExpr((uint64_t)this, 12, (unsigned int *)v7);
  }
  else {
    Sequentialuint64_t MinMaxExpr = llvm::ScalarEvolution::getMinMaxExpr((uint64_t)this, 10, (uint64_t **)v7);
  }
  uint64_t v5 = SequentialMinMaxExpr;
  if (v7[0] != v8) {
    free(v7[0]);
  }
  return v5;
}

unint64_t llvm::ScalarEvolution::getUnknown(llvm::ScalarEvolution *this, llvm::Value *a2)
{
  v29[16] = *MEMORY[0x1E4F143B8];
  *(_DWORD *)char v26 = 14;
  *(void *)&v26[4] = a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v25 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v25 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v25;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  unint64_t v4 = 0x9DDFEA08EB382D69 * (*(void *)v26 ^ qword_1EBCBE580 ^ __ROR8__(*(void *)&v26[4] + 12, 12));
  unint64_t v5 = __ROR8__(*(void *)&v26[4] + 12, 12) ^ (v4 >> 47);
  uint64_t v6 = *((void *)this + 104)
     + 8
     * ((*((_DWORD *)this + 210) - 1) & ((-348639895
                                        * ((((0x9DDFEA08EB382D69 * (v5 ^ v4)) >> 32) >> 15) ^ (-348639895 * (v5 ^ v4)))) ^ *(_DWORD *)&v26[4]));
  unint64_t v7 = *(void *)v6;
  BOOL v27 = v29;
  uint64_t v28 = 0x2000000000;
  if (v7) {
    BOOL v8 = (v7 & 1) == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    while (*(void *)(v7 + 16) != 3 || memcmp(v26, *(const void **)(v7 + 8), 0xCuLL))
    {
      LODWORD(v28) = 0;
      unint64_t v7 = *(void *)v7;
      if (v7) {
        BOOL v9 = (v7 & 1) == 0;
      }
      else {
        BOOL v9 = 0;
      }
      if (!v9) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    *((void *)this + 118) += 80;
    uint64_t v10 = *((void *)this + 108);
    if (((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v10 + 80 > *((void *)this + 109) - v10)
    {
      unsigned int v22 = *((_DWORD *)this + 222) >> 7;
      if (v22 >= 0x1E) {
        LOBYTE(v22) = 30;
      }
      uint64_t v23 = 4096 << v22;
      unint64_t v11 = (unint64_t)operator new(4096 << v22, (std::align_val_t)8uLL);
      unsigned int v24 = *((_DWORD *)this + 222);
      if (v24 >= *((_DWORD *)this + 223)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*((void *)this + 110) + 8 * v24) = v11;
      ++*((_DWORD *)this + 222);
      *((void *)this + 109) = v11 + v23;
    }
    else
    {
      unint64_t v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 108) = v11 + 80;
    uint64_t v12 = sub_1CB906F34((uint64_t *)this + 108, 12, 2);
    uint64_t v13 = (int *)v26;
    uint64_t v14 = 12;
    unsigned int v15 = (_DWORD *)v12;
    do
    {
      int v16 = *v13++;
      *v15++ = v16;
      v14 -= 4;
    }
    while (v14);
    uint64_t v17 = *((void *)this + 166);
    *(void *)(v11 + 32) = 0;
    *(void *)(v11 + 40) = v12;
    unint64_t v7 = v11 + 32;
    *(void *)(v11 + 48) = 3;
    *(_DWORD *)(v11 + 56) = 65550;
    *(_WORD *)(v11 + 60) = 0;
    *(void *)(v11 + 8) = 2;
    *(void *)(v11 + 16) = 0;
    *(void *)(v11 + 24) = a2;
    if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096 && a2) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v11 + 8));
    }
    *(void *)unint64_t v11 = &unk_1F26075B0;
    *(void *)(v11 + 64) = this;
    *(void *)(v11 + 72) = v17;
    *((void *)this + 166) = v11;
    unsigned int v18 = *((_DWORD *)this + 211) + 1;
    int v19 = *((_DWORD *)this + 210);
    if (v18 > 2 * v19)
    {
      llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 832, 2 * v19, (uint64_t)off_1F2607658);
      BOOL v27 = v29;
      uint64_t v28 = 0x2000000000;
      uint64_t v6 = *((void *)this + 104)
         + 8
         * ((*((_DWORD *)this + 210) - 1) & sub_1CC13A6B8(*(void **)(v11 + 40), *(void *)(v11 + 40) + 4 * *(void *)(v11 + 48)));
      if (v27 != v29) {
        free(v27);
      }
      unsigned int v18 = *((_DWORD *)this + 211) + 1;
    }
    *((_DWORD *)this + 211) = v18;
    uint64_t v20 = *(void *)v6;
    if (!*(void *)v6) {
      uint64_t v20 = v6 | 1;
    }
    *(void *)unint64_t v7 = v20;
    *(void *)uint64_t v6 = v7;
  }
  return v7;
}

unint64_t llvm::ScalarEvolution::getStoreSizeOfExpr(llvm::ScalarEvolution *this, llvm::Type *a2, llvm::Type *a3)
{
  unint64_t v3 = a2;
  if (a3 && *((unsigned char *)a3 + 8) == 19)
  {
    return llvm::ScalarEvolution::getSizeOfScalableVectorExpr(this, a2, a3);
  }
  else
  {
    uint64_t v7 = sub_1CB83544C(*(void *)(*(void *)this + 40) + 272, (uint64_t)a3);
    if (v5 == 1) {
    unint64_t v8 = v7 + 7;
    }
    unsigned int v9 = *((_DWORD *)v3 + 2);
    if (v9 != 13)
    {
      uint64_t v10 = *(void *)(*(void *)this + 40);
      if ((v9 & 0xFE) == 0x12) {
        unsigned int v9 = *(_DWORD *)(**((void **)v3 + 2) + 8);
      }
      uint64_t v11 = *(void *)(v10 + 504);
      if (v9 < 0x100) {
        goto LABEL_17;
      }
      unsigned int v12 = v9 >> 8;
      unint64_t v13 = *(unsigned int *)(v10 + 512);
      uint64_t v14 = v11;
      if (v13)
      {
        uint64_t v14 = v11;
        unint64_t v15 = v13;
        do
        {
          unint64_t v16 = v15 >> 1;
          uint64_t v17 = v14 + 16 * (v15 >> 1);
          unsigned int v18 = *(_DWORD *)(v17 + 8);
          uint64_t v19 = v17 + 16;
          v15 += ~(v15 >> 1);
          if (v18 < v12) {
            uint64_t v14 = v19;
          }
          else {
            unint64_t v15 = v16;
          }
        }
        while (v15);
      }
      if (v14 == v11 + 16 * v13 || *(_DWORD *)(v14 + 8) != v12) {
LABEL_17:
      }
        uint64_t v14 = v11;
      uint64_t v20 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v3, (llvm::LLVMContext *)*(unsigned int *)(v14 + 12));
      if ((*((_DWORD *)v3 + 2) & 0xFE) == 0x12) {
        llvm::VectorType::get(v20, (llvm::Type *)(*((unsigned int *)v3 + 8) | ((unint64_t)(*((_DWORD *)v3 + 2) == 19) << 32)));
      }
      unint64_t v3 = v20;
    }
    unint64_t v21 = v8 >> 3;
    unsigned int v22 = *(llvm::ConstantInt **)v3;
    unsigned int v23 = *((_DWORD *)v3 + 2);
    unsigned int v28 = v23 >> 8;
    if (v23 >> 8 > 0x40) {
      operator new[]();
    }
    if (v23 <= 0xFF) {
      unint64_t v24 = 0;
    }
    else {
      unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v23) + 63);
    }
    unint64_t v27 = v24 & v21;
    unint64_t v25 = (llvm::ConstantInt *)llvm::ConstantInt::get(v22, (llvm::LLVMContext *)&v27, v6);
    if (v28 >= 0x41)
    {
      if (v27) {
        MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
      }
    }
    return llvm::ScalarEvolution::getConstant(this, v25);
  }
}

BOOL llvm::ScalarEvolution::isSCEVable(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 8) & 0xFD) == 13;
}

llvm::Type *llvm::ScalarEvolution::getWiderType(llvm::ScalarEvolution *this, llvm::Type *a2, llvm::Type *a3)
{
  uint64_t v6 = *(void *)(*(void *)this + 40) + 272;
  if (*((unsigned char *)a2 + 8) == 15)
  {
    Indexunint64_t TypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v6, (uint64_t)a2);
  }
  else
  {
    Indexunint64_t TypeSizeInBits = sub_1CB83544C(v6, (uint64_t)a2);
    if (v7 == 1) {
  }
    }
  uint64_t v9 = *(void *)(*(void *)this + 40) + 272;
  if (*((unsigned char *)a3 + 8) == 15)
  {
    unint64_t v11 = llvm::DataLayout::getIndexTypeSizeInBits(v9, (uint64_t)a3);
  }
  else
  {
    unint64_t v11 = sub_1CB83544C(v9, (uint64_t)a3);
    if (v10 == 1) {
  }
    }
  if (IndexTypeSizeInBits >= v11) {
    return a2;
  }
  else {
    return a3;
  }
}

const llvm::Value *llvm::ScalarEvolution::getDefiningScopeBound(llvm::ScalarEvolution *NonTrivialDefiningScopeBound, uint64_t *a2, uint64_t a3, unsigned char *a4)
{
  unint64_t v4 = (llvm::DominatorTree **)NonTrivialDefiningScopeBound;
  v60[6] = *MEMORY[0x1E4F143B8];
  *a4 = 1;
  uint64_t v50 = v54;
  unsigned int v51 = v54;
  uint64_t v52 = 16;
  int v53 = 0;
  uint64_t v58 = v60;
  uint64_t v59 = 0x600000000;
  if (!a3) {
    goto LABEL_100;
  }
  uint64_t v6 = a2;
  uint64_t v7 = &a2[a3];
  do
  {
    uint64_t v8 = *v6;
    uint64_t v9 = v51;
    uint64_t v10 = HIDWORD(v52);
    if (v51 == v50)
    {
      if (HIDWORD(v52))
      {
        unint64_t v11 = 0;
        uint64_t v12 = 8 * HIDWORD(v52);
        unint64_t v13 = v51;
        while (*(void *)v13 != v8)
        {
          if (*(void *)v13 == -2) {
            unint64_t v11 = v13;
          }
          v13 += 8;
          v12 -= 8;
          if (!v12)
          {
            if (!v11) {
              goto LABEL_11;
            }
            *(void *)unint64_t v11 = v8;
            --v53;
            goto LABEL_13;
          }
        }
        goto LABEL_17;
      }
LABEL_11:
      unsigned int v14 = v52;
      if (HIDWORD(v52) < v52)
      {
        ++HIDWORD(v52);
        *(void *)&v51[8 * v10] = v8;
        goto LABEL_13;
      }
    }
    else
    {
      unsigned int v14 = v52;
    }
    if (3 * v14 <= 4 * (HIDWORD(v52) - v53))
    {
      if (v14 >= 0x40) {
        v14 *= 2;
      }
      else {
        unsigned int v14 = 128;
      }
    }
    else if (v14 - HIDWORD(v52) >= v14 >> 3)
    {
      goto LABEL_22;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v50, v14);
    unsigned int v14 = v52;
    uint64_t v9 = v51;
LABEL_22:
    unsigned int v15 = v14 - 1;
    unsigned int v16 = (v14 - 1) & ((v8 >> 4) ^ (v8 >> 9));
    uint64_t v17 = &v9[8 * v16];
    uint64_t v18 = *(void *)v17;
    if (*(void *)v17 == -1)
    {
      uint64_t v19 = 0;
LABEL_34:
      if (v19) {
        unsigned int v23 = v19;
      }
      else {
        unsigned int v23 = v17;
      }
      if (*(void *)v23 != v8)
      {
        if (*(void *)v23 == -2) {
          --v53;
        }
        else {
          ++HIDWORD(v52);
        }
        *(void *)unsigned int v23 = v8;
LABEL_13:
        if ((HIDWORD(v52) - v53) < 0x1F)
        {
          if (v59 >= (unint64_t)HIDWORD(v59)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v58[v59] = v8;
          LODWORD(v59) = v59 + 1;
        }
        else
        {
          *a4 = 0;
        }
      }
    }
    else
    {
      uint64_t v19 = 0;
      int v20 = 1;
      while (v18 != v8)
      {
        if (v19) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v18 == -2;
        }
        if (v21) {
          uint64_t v19 = v17;
        }
        unsigned int v22 = v16 + v20++;
        unsigned int v16 = v22 & v15;
        uint64_t v17 = &v9[8 * (v22 & v15)];
        uint64_t v18 = *(void *)v17;
        if (*(void *)v17 == -1) {
          goto LABEL_34;
        }
      }
    }
LABEL_17:
    ++v6;
  }
  while (v6 != v7);
  unsigned int v24 = v59;
  if (v59)
  {
    unint64_t v25 = 0;
    while (1)
    {
      char v26 = (const llvm::SCEV *)v58[v24 - 1];
      LODWORD(v59) = v24 - 1;
      NonTrivialDefiningScopeBound = (llvm::ScalarEvolution *)llvm::ScalarEvolution::getNonTrivialDefiningScopeBound(NonTrivialDefiningScopeBound, v26);
      if (NonTrivialDefiningScopeBound)
      {
        unsigned int v28 = NonTrivialDefiningScopeBound;
        if (v25)
        {
          NonTrivialDefiningScopeBound = (llvm::ScalarEvolution *)llvm::DominatorTree::dominates(v4[4], v25, NonTrivialDefiningScopeBound);
          if (NonTrivialDefiningScopeBound) {
            unint64_t v25 = v28;
          }
        }
        else
        {
          unint64_t v25 = NonTrivialDefiningScopeBound;
        }
        goto LABEL_47;
      }
      int v55 = v57;
      uint64_t v56 = 0x400000000;
      sub_1CC104DBC((uint64_t)v26, (uint64_t)&v55);
      unint64_t v27 = (uint64_t *)v55;
      if (v56) {
        break;
      }
LABEL_45:
      if (v27 != (uint64_t *)v57) {
        free(v27);
      }
LABEL_47:
      unsigned int v24 = v59;
      if (!v59)
      {
        if (v25) {
          goto LABEL_95;
        }
        goto LABEL_100;
      }
    }
    uint64_t v29 = (char *)v55 + 8 * v56;
    while (2)
    {
      uint64_t v30 = *v27;
      BOOL v31 = v51;
      uint64_t v32 = HIDWORD(v52);
      if (v51 == v50)
      {
        if (HIDWORD(v52))
        {
          BOOL v33 = 0;
          uint64_t v34 = 8 * HIDWORD(v52);
          uint64_t v35 = v51;
          while (*(void *)v35 != v30)
          {
            if (*(void *)v35 == -2) {
              BOOL v33 = v35;
            }
            v35 += 8;
            v34 -= 8;
            if (!v34)
            {
              if (!v33) {
                goto LABEL_60;
              }
              *(void *)BOOL v33 = v30;
              --v53;
              goto LABEL_62;
            }
          }
          goto LABEL_66;
        }
LABEL_60:
        unsigned int v36 = v52;
        if (HIDWORD(v52) < v52)
        {
          ++HIDWORD(v52);
          *(void *)&v51[8 * v32] = v30;
          goto LABEL_62;
        }
      }
      else
      {
        unsigned int v36 = v52;
      }
      if (3 * v36 <= 4 * (HIDWORD(v52) - v53))
      {
        if (v36 >= 0x40) {
          v36 *= 2;
        }
        else {
          unsigned int v36 = 128;
        }
      }
      else if (v36 - HIDWORD(v52) >= v36 >> 3)
      {
LABEL_71:
        unsigned int v37 = v36 - 1;
        unsigned int v38 = (v36 - 1) & ((v30 >> 4) ^ (v30 >> 9));
        uint64_t v39 = &v31[8 * v38];
        uint64_t v40 = *(void *)v39;
        if (*(void *)v39 != -1)
        {
          uint64_t v41 = 0;
          int v42 = 1;
          while (v40 != v30)
          {
            if (v41) {
              BOOL v43 = 0;
            }
            else {
              BOOL v43 = v40 == -2;
            }
            if (v43) {
              uint64_t v41 = v39;
            }
            unsigned int v44 = v38 + v42++;
            unsigned int v38 = v44 & v37;
            uint64_t v39 = &v31[8 * (v44 & v37)];
            uint64_t v40 = *(void *)v39;
            if (*(void *)v39 == -1) {
              goto LABEL_83;
            }
          }
          goto LABEL_66;
        }
        uint64_t v41 = 0;
LABEL_83:
        if (v41) {
          uint64_t v45 = v41;
        }
        else {
          uint64_t v45 = v39;
        }
        if (*(void *)v45 == v30)
        {
LABEL_66:
          if (++v27 == (uint64_t *)v29)
          {
            unint64_t v27 = (uint64_t *)v55;
            goto LABEL_45;
          }
          continue;
        }
        if (*(void *)v45 == -2) {
          --v53;
        }
        else {
          ++HIDWORD(v52);
        }
        *(void *)uint64_t v45 = v30;
LABEL_62:
        if ((HIDWORD(v52) - v53) < 0x1F)
        {
          if (v59 >= (unint64_t)HIDWORD(v59)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v58[v59] = v30;
          LODWORD(v59) = v59 + 1;
        }
        else
        {
          *a4 = 0;
        }
        goto LABEL_66;
      }
      break;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v50, v36);
    unsigned int v36 = v52;
    BOOL v31 = v51;
    goto LABEL_71;
  }
LABEL_100:
  uint64_t v47 = *((void *)*v4 + 10);
  if (v47) {
    uint64_t v48 = v47 - 24;
  }
  else {
    uint64_t v48 = 0;
  }
  uint64_t v49 = *(void *)(v48 + 48);
  if (v49) {
    unint64_t v25 = (const llvm::Value *)(v49 - 24);
  }
  else {
    unint64_t v25 = 0;
  }
LABEL_95:
  if (v58 != v60) {
    free(v58);
  }
  if (v51 != v50) {
    free(v51);
  }
  return v25;
}

BOOL llvm::ScalarEvolution::checkValidity(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  v20[8] = *MEMORY[0x1E4F143B8];
  char v11 = 0;
  uint64_t v12 = &v11;
  unint64_t v13 = v15;
  uint64_t v14 = 0x800000000;
  unsigned int v16 = v20;
  uint64_t v17 = v20;
  uint64_t v18 = 8;
  int v19 = 0;
  sub_1CC13B1C0((uint64_t)&v12, (uint64_t)a2);
  unsigned int v2 = v14;
  while (v2)
  {
    if (*v12) {
      break;
    }
    uint64_t v3 = *((void *)v13 + --v2);
    LODWORD(v14) = v2;
    switch(*(_WORD *)(v3 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        uint64_t v9 = (uint64_t *)(v3 + 32);
        goto LABEL_14;
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v4 = *(void *)(v3 + 40);
        if (v4)
        {
          unint64_t v5 = *(uint64_t **)(v3 + 32);
          uint64_t v6 = 8 * v4 - 8;
          do
          {
            uint64_t v7 = *v5++;
            sub_1CC13B1C0((uint64_t)&v12, v7);
            if (*v12) {
              BOOL v8 = 1;
            }
            else {
              BOOL v8 = v6 == 0;
            }
            v6 -= 8;
          }
          while (!v8);
        }
        goto LABEL_15;
      case 6:
        sub_1CC13B1C0((uint64_t)&v12, *(void *)(v3 + 32));
        uint64_t v9 = (uint64_t *)(v3 + 40);
LABEL_14:
        sub_1CC13B1C0((uint64_t)&v12, *v9);
LABEL_15:
        unsigned int v2 = v14;
        break;
      default:
        break;
    }
  }
  if (v17 != v16) {
    free(v17);
  }
  if (v13 != v15) {
    free(v13);
  }
  return v11 == 0;
}

BOOL llvm::ScalarEvolution::containsAddRecurrence(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  v51[8] = *MEMORY[0x1E4F143B8];
  unint64_t v5 = (char *)this + 56;
  uint64_t v4 = *((void *)this + 7);
  uint64_t v6 = *((unsigned int *)this + 18);
  if (!v6)
  {
LABEL_2:
    uint64_t v7 = v4 + 16 * v6;
    goto LABEL_3;
  }
  LODWORD(v10) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = v4 + 16 * v10;
  char v11 = *(const llvm::SCEV **)v7;
  if (*(const llvm::SCEV **)v7 != a2)
  {
    int v12 = 1;
    while (v11 != (const llvm::SCEV *)-4096)
    {
      int v13 = v10 + v12++;
      uint64_t v10 = v13 & (v6 - 1);
      char v11 = *(const llvm::SCEV **)(v4 + 16 * v10);
      if (v11 == a2)
      {
        uint64_t v7 = v4 + 16 * v10;
        goto LABEL_3;
      }
    }
    goto LABEL_2;
  }
LABEL_3:
  if (v7 != v4 + 16 * v6)
  {
    int v8 = *(unsigned __int8 *)(v7 + 8);
    return v8 != 0;
  }
  unsigned __int8 v42 = 0;
  BOOL v43 = (const llvm::SCEV **)&v42;
  unsigned int v44 = v46;
  uint64_t v45 = 0x800000000;
  uint64_t v47 = v51;
  uint64_t v48 = v51;
  uint64_t v49 = 8;
  int v50 = 0;
  sub_1CC13B424((uint64_t)&v43, (uint64_t)a2);
  unsigned int v14 = v45;
  while (v14)
  {
    if (*(unsigned char *)v43) {
      break;
    }
    uint64_t v15 = *((void *)v44 + --v14);
    LODWORD(v45) = v14;
    switch(*(_WORD *)(v15 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        BOOL v21 = (uint64_t *)(v15 + 32);
        goto LABEL_25;
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v16 = *(void *)(v15 + 40);
        if (v16)
        {
          uint64_t v17 = *(uint64_t **)(v15 + 32);
          uint64_t v18 = 8 * v16 - 8;
          do
          {
            uint64_t v19 = *v17++;
            sub_1CC13B424((uint64_t)&v43, v19);
            if (*(unsigned char *)v43) {
              BOOL v20 = 1;
            }
            else {
              BOOL v20 = v18 == 0;
            }
            v18 -= 8;
          }
          while (!v20);
        }
        goto LABEL_26;
      case 6:
        sub_1CC13B424((uint64_t)&v43, *(void *)(v15 + 32));
        BOOL v21 = (uint64_t *)(v15 + 40);
LABEL_25:
        sub_1CC13B424((uint64_t)&v43, *v21);
LABEL_26:
        unsigned int v14 = v45;
        break;
      default:
        break;
    }
  }
  if (v48 != v47) {
    free(v48);
  }
  if (v44 != v46) {
    free(v44);
  }
  int v8 = v42;
  unsigned int v22 = *((_DWORD *)this + 18);
  if (v22)
  {
    uint64_t v25 = *((void *)this + 7);
    unsigned int v26 = (v22 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unint64_t v27 = (const llvm::SCEV **)(v25 + 16 * v26);
    unsigned int v28 = *v27;
    if (*v27 == a2) {
      return v8 != 0;
    }
    uint64_t v29 = 0;
    int v30 = 1;
    while (v28 != (const llvm::SCEV *)-4096)
    {
      if (v29) {
        BOOL v38 = 0;
      }
      else {
        BOOL v38 = v28 == (const llvm::SCEV *)-8192;
      }
      if (v38) {
        uint64_t v29 = v27;
      }
      unsigned int v39 = v26 + v30++;
      unsigned int v26 = v39 & (v22 - 1);
      unint64_t v27 = (const llvm::SCEV **)(v25 + 16 * v26);
      unsigned int v28 = *v27;
      if (*v27 == a2) {
        return v8 != 0;
      }
    }
    if (v29) {
      unsigned int v23 = v29;
    }
    else {
      unsigned int v23 = v27;
    }
  }
  else
  {
    unsigned int v23 = 0;
  }
  int v24 = *((_DWORD *)this + 16);
  if (4 * v24 + 4 >= 3 * v22)
  {
    sub_1CC13B5F8((uint64_t)v5, 2 * v22);
    uint64_t v31 = *((void *)this + 7);
    int v32 = *((_DWORD *)this + 18) - 1;
    unsigned int v33 = v32 & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v23 = (const llvm::SCEV **)(v31 + 16 * v33);
    uint64_t v34 = *v23;
    if (*v23 == a2)
    {
LABEL_65:
      unsigned int v37 = a2;
      goto LABEL_48;
    }
    uint64_t v35 = 0;
    int v36 = 1;
    while (v34 != (const llvm::SCEV *)-4096)
    {
      if (v35) {
        BOOL v40 = 0;
      }
      else {
        BOOL v40 = v34 == (const llvm::SCEV *)-8192;
      }
      if (v40) {
        uint64_t v35 = v23;
      }
      unsigned int v41 = v33 + v36++;
      unsigned int v33 = v41 & v32;
      unsigned int v23 = (const llvm::SCEV **)(v31 + 16 * (v41 & v32));
      uint64_t v34 = *v23;
      if (*v23 == a2) {
        goto LABEL_65;
      }
    }
    if (v35) {
      unsigned int v23 = v35;
    }
  }
  else if (v22 + ~v24 - *((_DWORD *)this + 17) <= v22 >> 3)
  {
    sub_1CC13B5F8((uint64_t)v5, v22);
    BOOL v43 = 0;
    sub_1CC13B3A8(*((void *)this + 7), *((_DWORD *)this + 18), (uint64_t)a2, &v43);
    unsigned int v23 = v43;
  }
  unsigned int v37 = *v23;
LABEL_48:
  ++*((_DWORD *)this + 16);
  if (v37 != (const llvm::SCEV *)-4096) {
    --*((_DWORD *)this + 17);
  }
  char *v23 = a2;
  *((unsigned char *)v23 + 8) = v8;
  return v8 != 0;
}

const llvm::SCEV *llvm::ScalarEvolution::getSCEVValues(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  uint64_t v2 = *((void *)this + 10);
  unsigned int v3 = *((_DWORD *)this + 24);
  if (v3)
  {
    unsigned int v4 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unint64_t v5 = (const llvm::SCEV **)(v2 + 96 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      goto LABEL_8;
    }
    int v7 = 1;
    while (v6 != (const llvm::SCEV *)-4096)
    {
      unsigned int v8 = v4 + v7++;
      unsigned int v4 = v8 & (v3 - 1);
      unint64_t v5 = (const llvm::SCEV **)(v2 + 96 * v4);
      uint64_t v6 = *v5;
      if (*v5 == a2) {
        goto LABEL_8;
      }
    }
  }
  unint64_t v5 = (const llvm::SCEV **)(v2 + 96 * v3);
LABEL_8:
  if (v5 == (const llvm::SCEV **)(v2 + 96 * v3)) {
    return 0;
  }
  else {
    return v5[6];
  }
}

int32x2_t llvm::ScalarEvolution::eraseValueFromMap(llvm::ScalarEvolution *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 13);
  unsigned int v5 = *((_DWORD *)this + 30);
  unsigned int v6 = a2 >> 4;
  if (v5)
  {
    unsigned int v7 = (v5 - 1) & (v6 ^ (a2 >> 9));
    unsigned int v8 = (void *)(v4 + 48 * v7);
    uint64_t v9 = (llvm::Value *)v8[3];
    if (v9 == a2) {
      goto LABEL_8;
    }
    int v10 = 1;
    while (v9 != (llvm::Value *)-4096)
    {
      unsigned int v11 = v7 + v10++;
      unsigned int v7 = v11 & (v5 - 1);
      unsigned int v8 = (void *)(v4 + 48 * v7);
      uint64_t v9 = (llvm::Value *)v8[3];
      if (v9 == a2) {
        goto LABEL_8;
      }
    }
  }
  unsigned int v8 = (void *)(v4 + 48 * v5);
LABEL_8:
  if ((void *)(v4 + 48 * v5) == v8) {
    return result;
  }
  int v12 = sub_1CC0F4460(*((void *)this + 10), *((_DWORD *)this + 24), v8[5]);
  int v13 = v12;
  if (v12[1])
  {
    unsigned int v14 = v12 + 2;
    int v15 = 4;
    goto LABEL_11;
  }
  int v15 = *((_DWORD *)v12 + 6);
  if (v15)
  {
    unsigned int v14 = (uint64_t *)v12[2];
LABEL_11:
    int v16 = v15 - 1;
    LODWORD(v17) = (v15 - 1) & (v6 ^ (a2 >> 9));
    uint64_t v18 = (llvm::Value **)&v14[v17];
    uint64_t v19 = *v18;
    if (*v18 == a2)
    {
LABEL_16:
      *uint64_t v18 = (llvm::Value *)-8192;
      int v22 = *((_DWORD *)v12 + 3) + 1;
      *((_DWORD *)v12 + 2) -= 2;
      *((_DWORD *)v12 + 3) = v22;
      unsigned int v23 = (llvm::Value **)v12[6];
      uint64_t v24 = *((unsigned int *)v13 + 14);
      uint64_t v25 = &v23[v24];
      if (v24)
      {
        uint64_t v26 = 8 * v24;
        while (*v23 != a2)
        {
          ++v23;
          v26 -= 8;
          if (!v26)
          {
            unsigned int v23 = v25;
            break;
          }
        }
      }
      if (v25 != v23 + 1)
      {
        memmove(v23, v23 + 1, (char *)v25 - (char *)(v23 + 1));
        LODWORD(v24) = *((_DWORD *)v13 + 14);
      }
      *((_DWORD *)v13 + 14) = v24 - 1;
    }
    else
    {
      int v20 = 1;
      while (v19 != (llvm::Value *)-4096)
      {
        int v21 = v17 + v20++;
        uint64_t v17 = v21 & v16;
        uint64_t v19 = (llvm::Value *)v14[v17];
        if (v19 == a2)
        {
          uint64_t v18 = (llvm::Value **)&v14[v17];
          goto LABEL_16;
        }
      }
    }
  }
  uint64_t v27 = v8[3];
  if (v27 != -8192)
  {
    if (v27 != -4096 && v27 != 0)
    {
      unint64_t v30 = v8[1] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v30 = v8[2];
      uint64_t v31 = (unint64_t *)v8[2];
      if (v31)
      {
        unint64_t *v31 = *v31 & 7 | v30;
      }
      else
      {
        uint64_t v32 = v8[3];
        unsigned int v33 = ***(int32x2_t ****)v32;
        unint64_t v34 = (unint64_t)v33[303];
        if (v34 <= v30)
        {
          uint64_t v35 = v33[305].u32[0];
          if (v34 + 16 * v35 > v30)
          {
            unsigned int v36 = v35 - 1;
            LODWORD(v37) = v36 & ((v32 >> 4) ^ (v32 >> 9));
            BOOL v38 = (uint64_t *)(v34 + 16 * v37);
            uint64_t v39 = *v38;
            if (v32 == *v38)
            {
LABEL_41:
              uint64_t *v38 = -8192;
              v33[304] = vadd_s32(v33[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v32 = v8[3];
            }
            else
            {
              int v40 = 1;
              while (v39 != -4096)
              {
                int v41 = v37 + v40++;
                uint64_t v37 = v41 & v36;
                uint64_t v39 = *(void *)(v34 + 16 * v37);
                if (v32 == v39)
                {
                  BOOL v38 = (uint64_t *)(v34 + 16 * v37);
                  goto LABEL_41;
                }
              }
            }
            *(unsigned char *)(v32 + 17) &= ~1u;
          }
        }
      }
    }
    void v8[3] = -8192;
  }
  v8[4] = 0;
  int32x2_t result = vadd_s32(*(int32x2_t *)((char *)this + 112), (int32x2_t)0x1FFFFFFFFLL);
  *((int32x2_t *)this + 14) = result;
  return result;
}

uint64_t *sub_1CC0F4460(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return (uint64_t *)(a1 + 96 * a2);
  }
  unsigned int v3 = a2 - 1;
  unsigned int v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  unsigned int v5 = (uint64_t *)(a1 + 96 * v4);
  uint64_t v6 = *v5;
  if (*v5 != a3)
  {
    int v7 = 1;
    while (v6 != -4096)
    {
      unsigned int v8 = v4 + v7++;
      unsigned int v4 = v8 & v3;
      unsigned int v5 = (uint64_t *)(a1 + 96 * (v8 & v3));
      uint64_t v6 = *v5;
      if (*v5 == a3) {
        return v5;
      }
    }
    return (uint64_t *)(a1 + 96 * a2);
  }
  return v5;
}

void *llvm::ScalarEvolution::insertValueToMap(void *this, llvm::Value *a2, const llvm::SCEV *a3)
{
  unsigned int v5 = this;
  int v78 = a3;
  uint64_t v79 = a2;
  uint64_t v7 = (uint64_t)(this + 13);
  uint64_t v6 = this[13];
  unsigned int v8 = *((_DWORD *)this + 30);
  unsigned int v9 = a2 >> 4;
  if (v8)
  {
    unsigned int v10 = (v8 - 1) & (v9 ^ (a2 >> 9));
    uint64_t v11 = v6 + 48 * v10;
    int v12 = *(llvm::Value **)(v11 + 24);
    if (v12 == a2) {
      goto LABEL_8;
    }
    int v13 = 1;
    while (v12 != (llvm::Value *)-4096)
    {
      unsigned int v14 = v10 + v13++;
      unsigned int v10 = v14 & (v8 - 1);
      uint64_t v11 = v6 + 48 * v10;
      int v12 = *(llvm::Value **)(v11 + 24);
      if (v12 == a2) {
        goto LABEL_8;
      }
    }
  }
  uint64_t v11 = v6 + 48 * v8;
LABEL_8:
  if (v11 != v6 + 48 * v8) {
    return this;
  }
  uint64_t v15 = 2;
  uint64_t v68 = 2;
  uint64_t v69 = 0;
  uint64_t v70 = a2;
  if (a2 == (llvm::Value *)-8192 || a2 == (llvm::Value *)-4096)
  {
    int v16 = a2;
  }
  else
  {
    int v16 = a2;
    if (a2)
    {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v68);
      uint64_t v15 = v68;
      int v16 = v70;
    }
  }
  v67[3] = off_1F2607428;
  uint64_t v71 = v5;
  unint64_t v73 = v15 & 6;
  unsigned int v74 = 0;
  unsigned int v75 = (int32x2_t ****)v16;
  uint64_t v17 = v5;
  if (v16 != (llvm::Value *)-8192)
  {
    uint64_t v17 = v5;
    if (v16 != (llvm::Value *)-4096)
    {
      uint64_t v17 = v5;
      if (v16)
      {
        unsigned int v74 = *(unint64_t **)(v15 & 0xFFFFFFFFFFFFFFF8);
        *(void *)(v15 & 0xFFFFFFFFFFFFFFF8) = &v73;
        unint64_t v73 = v15 & 0xFFFFFFFFFFFFFFFELL;
        if (v74) {
          unint64_t *v74 = *v74 & 7 | (unint64_t)&v74;
        }
        uint64_t v17 = v71;
      }
    }
  }
  int v72 = off_1F2607428;
  uint64_t v76 = v17;
  unsigned int v77 = a3;
  sub_1CC13B798(v7, &v72, &v77, (uint64_t)v67);
  if (v75 != (int32x2_t ****)-8192 && v75 != (int32x2_t ****)-4096 && v75)
  {
    unint64_t v18 = v73 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v73 & 0xFFFFFFFFFFFFFFF8) = v74;
    if (v74)
    {
      unint64_t *v74 = *v74 & 7 | v18;
    }
    else
    {
      uint64_t v19 = v75;
      int v20 = ***v75;
      unint64_t v21 = (unint64_t)v20[303];
      if (v21 <= v18)
      {
        uint64_t v22 = v20[305].u32[0];
        if (v21 + 16 * v22 > v18)
        {
          unsigned int v23 = v22 - 1;
          LODWORD(v24) = v23 & ((v75 >> 4) ^ (v75 >> 9));
          uint64_t v25 = (int32x2_t *****)(v21 + 16 * v24);
          uint64_t v26 = *v25;
          if (v75 == *v25)
          {
LABEL_30:
            *uint64_t v25 = (int32x2_t ****)-8192;
            v20[304] = vadd_s32(v20[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v19 = v75;
          }
          else
          {
            int v27 = 1;
            while (v26 != (int32x2_t ****)-4096)
            {
              int v28 = v24 + v27++;
              uint64_t v24 = v28 & v23;
              uint64_t v26 = *(int32x2_t *****)(v21 + 16 * v24);
              if (v75 == v26)
              {
                uint64_t v25 = (int32x2_t *****)(v21 + 16 * v24);
                goto LABEL_30;
              }
            }
          }
          *((unsigned char *)v19 + 17) &= ~1u;
        }
      }
    }
  }
  if (v70 != (llvm::Value *)-8192 && v70 != (llvm::Value *)-4096 && v70 != 0)
  {
    unint64_t v30 = v68 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v68 & 0xFFFFFFFFFFFFFFF8) = v69;
    if (v69)
    {
      *uint64_t v69 = *v69 & 7 | v30;
    }
    else
    {
      uint64_t v31 = v70;
      uint64_t v32 = ***(int32x2_t ****)v70;
      unint64_t v33 = (unint64_t)v32[303];
      if (v33 <= v30)
      {
        uint64_t v34 = v32[305].u32[0];
        if (v33 + 16 * v34 > v30)
        {
          unsigned int v35 = v34 - 1;
          LODWORD(v36) = v35 & ((v70 >> 4) ^ (v70 >> 9));
          uint64_t v37 = (llvm::Value **)(v33 + 16 * v36);
          BOOL v38 = *v37;
          if (v70 == *v37)
          {
LABEL_46:
            *uint64_t v37 = (llvm::Value *)-8192;
            v32[304] = vadd_s32(v32[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v31 = v70;
          }
          else
          {
            int v39 = 1;
            while (v38 != (llvm::Value *)-4096)
            {
              int v40 = v36 + v39++;
              uint64_t v36 = v40 & v35;
              BOOL v38 = *(llvm::Value **)(v33 + 16 * v36);
              if (v70 == v38)
              {
                uint64_t v37 = (llvm::Value **)(v33 + 16 * v36);
                goto LABEL_46;
              }
            }
          }
          *((unsigned char *)v31 + 17) &= ~1u;
        }
      }
    }
  }
  uint64_t v43 = v5[10];
  uint64_t v42 = (uint64_t)(v5 + 10);
  uint64_t v41 = v43;
  int v44 = *(_DWORD *)(v42 + 16);
  if (v44)
  {
    int v45 = v44 - 1;
    unsigned int v46 = v45 & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v47 = (void *)(v41 + 96 * v46);
    uint64_t v48 = (const llvm::SCEV *)*v47;
    if ((const llvm::SCEV *)*v47 == a3) {
      goto LABEL_64;
    }
    uint64_t v49 = 0;
    int v50 = 1;
    while (v48 != (const llvm::SCEV *)-4096)
    {
      if (v49) {
        BOOL v51 = 0;
      }
      else {
        BOOL v51 = v48 == (const llvm::SCEV *)-8192;
      }
      if (v51) {
        uint64_t v49 = v47;
      }
      unsigned int v52 = v46 + v50++;
      unsigned int v46 = v52 & v45;
      uint64_t v47 = (void *)(v41 + 96 * v46);
      uint64_t v48 = (const llvm::SCEV *)*v47;
      if ((const llvm::SCEV *)*v47 == a3) {
        goto LABEL_64;
      }
    }
    if (v49) {
      int v53 = v49;
    }
    else {
      int v53 = v47;
    }
  }
  else
  {
    int v53 = 0;
  }
  uint64_t v47 = sub_1CC13C12C(v42, (uint64_t)&v78, (uint64_t *)&v78, v53);
  *uint64_t v47 = v78;
  *((_OWORD *)v47 + 3) = 0u;
  *((_OWORD *)v47 + 5) = 0u;
  *((_OWORD *)v47 + 4) = 0u;
  v47[1] = 1;
  int64x2_t v54 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *((int64x2_t *)v47 + 1) = v54;
  *((int64x2_t *)v47 + 2) = v54;
  v47[6] = v47 + 8;
  v47[7] = 0x400000000;
LABEL_64:
  this = v47 + 1;
  if (v47[1])
  {
    int v55 = v47 + 2;
    int v56 = 4;
  }
  else
  {
    int v56 = *((_DWORD *)v47 + 6);
    if (!v56)
    {
      unsigned int v63 = 0;
      goto LABEL_72;
    }
    int v55 = (void *)v47[2];
  }
  int v57 = v56 - 1;
  unsigned int v58 = v57 & (v9 ^ (a2 >> 9));
  uint64_t v59 = (llvm::Value **)&v55[v58];
  uint64_t v60 = *v59;
  if (*v59 == a2) {
    return this;
  }
  unint64_t v61 = 0;
  int v62 = 1;
  while (v60 != (llvm::Value *)-4096)
  {
    if (v61) {
      BOOL v65 = 0;
    }
    else {
      BOOL v65 = v60 == (llvm::Value *)-8192;
    }
    if (v65) {
      unint64_t v61 = v59;
    }
    unsigned int v66 = v58 + v62++;
    unsigned int v58 = v66 & v57;
    uint64_t v59 = (llvm::Value **)&v55[v58];
    uint64_t v60 = *v59;
    if (*v59 == a2) {
      return this;
    }
  }
  if (v61) {
    unsigned int v63 = v61;
  }
  else {
    unsigned int v63 = v59;
  }
LABEL_72:
  this = sub_1CC00AEB8((uint64_t)this, (uint64_t)&v79, &v79, v63);
  *this = v79;
  unsigned int v64 = *((_DWORD *)v47 + 14);
  if (v64 >= *((_DWORD *)v47 + 15)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(v47[6] + 8 * v64) = v79;
  ++*((_DWORD *)v47 + 14);
  return this;
}

llvm::ScalarEvolution::SCEVCallbackVH *llvm::ScalarEvolution::SCEVCallbackVH::SCEVCallbackVH(llvm::ScalarEvolution::SCEVCallbackVH *this, llvm::Value *a2, llvm::ScalarEvolution *a3)
{
  *((void *)this + 1) = 2;
  *((void *)this + 2) = 0;
  unsigned int v5 = (llvm::ScalarEvolution::SCEVCallbackVH *)((char *)this + 8);
  *((void *)v5 + 2) = a2;
  if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096 && a2) {
    llvm::ValueHandleBase::AddToUseList(v5);
  }
  *(void *)this = off_1F2607428;
  *((void *)this + 4) = a3;
  return this;
}

{
  llvm::ValueHandleBase *v5;

  *((void *)this + 1) = 2;
  *((void *)this + 2) = 0;
  unsigned int v5 = (llvm::ScalarEvolution::SCEVCallbackVH *)((char *)this + 8);
  *((void *)v5 + 2) = a2;
  if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096 && a2) {
    llvm::ValueHandleBase::AddToUseList(v5);
  }
  *(void *)this = off_1F2607428;
  *((void *)this + 4) = a3;
  return this;
}

uint64_t llvm::ScalarEvolution::getExistingSCEV(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 104);
  unsigned int v3 = *(_DWORD *)(a1 + 120);
  if (v3)
  {
    unsigned int v4 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v5 = v2 + 48 * v4;
    uint64_t v6 = *(void *)(v5 + 24);
    if (v6 == a2) {
      goto LABEL_8;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      unsigned int v8 = v4 + v7++;
      unsigned int v4 = v8 & (v3 - 1);
      uint64_t v5 = v2 + 48 * v4;
      uint64_t v6 = *(void *)(v5 + 24);
      if (v6 == a2) {
        goto LABEL_8;
      }
    }
  }
  uint64_t v5 = v2 + 48 * v3;
LABEL_8:
  if (v5 == v2 + 48 * v3) {
    return 0;
  }
  else {
    return *(void *)(v5 + 40);
  }
}

uint64_t llvm::ScalarEvolution::createSCEVIter(llvm::ScalarEvolution *this, unint64_t a2)
{
  v39[6] = *MEMORY[0x1E4F143B8];
  uint64_t v36 = v39;
  unsigned int v38 = 6;
  v39[0] = a2 | 4;
  v39[1] = a2 & 0xFFFFFFFFFFFFFFFBLL;
  unsigned int v4 = 2;
  do
  {
    while (1)
    {
      uint64_t v5 = *((void *)v36 + --v4);
      unsigned int v37 = v4;
      uint64_t v6 = (llvm::Value *)(v5 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v32 = (llvm::Value *)(v5 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v7 = *((void *)this + 13);
      unsigned int v8 = *((_DWORD *)this + 30);
      if (!v8) {
        goto LABEL_8;
      }
      unsigned int v9 = v8 - 1;
      unsigned int v10 = (v8 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      uint64_t v11 = v7 + 48 * v10;
      int v12 = *(llvm::Value **)(v11 + 24);
      if (v12 != v6)
      {
        int v13 = 1;
        while (v12 != (llvm::Value *)-4096)
        {
          unsigned int v14 = v10 + v13++;
          unsigned int v10 = v14 & v9;
          uint64_t v11 = v7 + 48 * (v14 & v9);
          int v12 = *(llvm::Value **)(v11 + 24);
          if (v12 == v6) {
            goto LABEL_9;
          }
        }
LABEL_8:
        uint64_t v11 = v7 + 48 * v8;
      }
LABEL_9:
      if (v11 == v7 + 48 * v8 || !*(void *)(v11 + 40)) {
        break;
      }
      if (!v4) {
        goto LABEL_30;
      }
    }
    unint64_t v33 = v35;
    uint64_t v34 = 0x600000000;
    if ((v5 & 4) != 0) {
      SCEV = llvm::ScalarEvolution::createSCEV((const llvm::APInt **)this, v6);
    }
    else {
      SCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getOperandsToCreate((const llvm::APInt **)this, v6, (uint64_t)&v33);
    }
    if (SCEV)
    {
      llvm::ScalarEvolution::insertValueToMap(this, v32, SCEV);
    }
    else
    {
      LOBYTE(v31) = 1;
      unsigned int v16 = v37;
      if (v37 >= v38)
      {
        sub_1CC13CB2C((uint64_t)&v36, &v32, &v31);
      }
      else
      {
        *((void *)v36 + v37) = (unint64_t)v32 | 4;
        unsigned int v37 = v16 + 1;
      }
      if (v34)
      {
        uint64_t v17 = (uint64_t *)v33;
        uint64_t v18 = 8 * v34;
        do
        {
          uint64_t v31 = 0;
          uint64_t v19 = *v17;
          uint64_t v31 = *v17;
          char v30 = 0;
          unsigned int v20 = v37;
          if (v37 >= v38)
          {
            sub_1CC13CB2C((uint64_t)&v36, &v31, &v30);
          }
          else
          {
            *((void *)v36 + v37) = v19 & 0xFFFFFFFFFFFFFFFBLL;
            unsigned int v37 = v20 + 1;
          }
          ++v17;
          v18 -= 8;
        }
        while (v18);
      }
    }
    if (v33 != v35) {
      free(v33);
    }
    unsigned int v4 = v37;
  }
  while (v37);
LABEL_30:
  uint64_t v21 = *((void *)this + 13);
  unsigned int v22 = *((_DWORD *)this + 30);
  if (!v22) {
    goto LABEL_36;
  }
  unsigned int v23 = (v22 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v24 = v21 + 48 * v23;
  uint64_t v25 = *(llvm::Value **)(v24 + 24);
  if (v25 != (llvm::Value *)a2)
  {
    int v26 = 1;
    while (v25 != (llvm::Value *)-4096)
    {
      unsigned int v27 = v23 + v26++;
      unsigned int v23 = v27 & (v22 - 1);
      uint64_t v24 = v21 + 48 * v23;
      uint64_t v25 = *(llvm::Value **)(v24 + 24);
      if (v25 == (llvm::Value *)a2) {
        goto LABEL_37;
      }
    }
LABEL_36:
    uint64_t v24 = v21 + 48 * v22;
  }
LABEL_37:
  if (v24 == v21 + 48 * v22) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = *(void *)(v24 + 40);
  }
  if (v36 != v39) {
    free(v36);
  }
  return v28;
}

unint64_t llvm::ScalarEvolution::getNotSCEV(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::APInt *a3)
{
  v60[2] = *MEMORY[0x1E4F143B8];
  __int16 v5 = *((_WORD *)a2 + 12);
  if (!a2 || *((_WORD *)a2 + 12))
  {
    if (!a2 || (v5 & 0xFFFC) != 8) {
      goto LABEL_34;
    }
    unsigned int v58 = v60;
    uint64_t v59 = 0x200000000;
    uint64_t v8 = *((void *)a2 + 5);
    if (v8)
    {
      unsigned int v9 = 0;
      unsigned int v10 = (uint64_t *)*((void *)a2 + 4);
      uint64_t v11 = 8 * v8;
      while (1)
      {
        uint64_t v12 = *v10;
        if (!*v10 || *(_WORD *)(*v10 + 24) != 4) {
          break;
        }
        if (*(void *)(v12 + 40) != 2) {
          break;
        }
        uint64_t v14 = *(void *)(v12 + 32);
        if (!llvm::SCEV::isAllOnesValue(*(llvm::SCEV **)v14)) {
          break;
        }
        uint64_t v15 = *(void *)(v14 + 8);
        if (!v15 || *(_WORD *)(v15 + 24) != 5) {
          break;
        }
        if (*(void *)(v15 + 40) != 2) {
          break;
        }
        uint64_t v17 = *(void *)(v15 + 32);
        if (!llvm::SCEV::isAllOnesValue(*(llvm::SCEV **)v17)) {
          break;
        }
        uint64_t v18 = *(void *)(v17 + 8);
        if (!v18) {
          break;
        }
        if (v9 >= HIDWORD(v59)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v58 + v9) = v18;
        unsigned int v9 = v59 + 1;
        LODWORD(v59) = v59 + 1;
        ++v10;
        v11 -= 8;
        if (!v11)
        {
          __int16 v5 = *((_WORD *)a2 + 12);
          goto LABEL_30;
        }
      }
      unint64_t MinMaxExpr = 0;
    }
    else
    {
LABEL_30:
      unint64_t MinMaxExpr = llvm::ScalarEvolution::getMinMaxExpr(this, (unsigned __int16)(0x90008000B000AuLL >> (16 * (v5 - 8))), &v58);
    }
    if (v58 != v60) {
      free(v58);
    }
    if (!MinMaxExpr)
    {
LABEL_34:
      unsigned int v20 = a2;
      while (2)
      {
        switch(*((_WORD *)v20 + 12))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            unsigned int v22 = (char *)v20 + 40;
            goto LABEL_42;
          case 4:
            unsigned int v22 = (char *)v20 + 48;
            goto LABEL_42;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            uint64_t v21 = (const llvm::SCEV **)*((void *)v20 + 4);
            goto LABEL_37;
          case 6:
            uint64_t v21 = (const llvm::SCEV **)((char *)v20 + 40);
LABEL_37:
            unsigned int v20 = *v21;
            continue;
          case 0xE:
            unsigned int v22 = (char *)*((void *)v20 - 1);
            goto LABEL_42;
          default:
            unsigned int v22 = (char *)*((void *)v20 + 4);
LABEL_42:
            unsigned int v23 = *(uint64_t ***)v22;
            unsigned int v24 = *(_DWORD *)(*(void *)v22 + 8);
            if (v24 != 13)
            {
              uint64_t v25 = *(void *)(*(void *)this + 40);
              if ((v24 & 0xFE) == 0x12) {
                unsigned int v24 = *(_DWORD *)(*v23[2] + 8);
              }
              uint64_t v26 = *(void *)(v25 + 504);
              if (v24 < 0x100) {
                goto LABEL_54;
              }
              unsigned int v27 = v24 >> 8;
              unint64_t v28 = *(unsigned int *)(v25 + 512);
              uint64_t v29 = v26;
              if (v28)
              {
                uint64_t v29 = v26;
                unint64_t v30 = v28;
                do
                {
                  unint64_t v31 = v30 >> 1;
                  uint64_t v32 = v29 + 16 * (v30 >> 1);
                  unsigned int v33 = *(_DWORD *)(v32 + 8);
                  uint64_t v34 = v32 + 16;
                  v30 += ~(v30 >> 1);
                  if (v33 < v27) {
                    uint64_t v29 = v34;
                  }
                  else {
                    unint64_t v30 = v31;
                  }
                }
                while (v30);
              }
              if (v29 == v26 + 16 * v28 || *(_DWORD *)(v29 + 8) != v27) {
LABEL_54:
              }
                uint64_t v29 = v26;
              unsigned int v35 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v23, (llvm::LLVMContext *)*(unsigned int *)(v29 + 12));
              uint64_t v36 = v35;
              if ((v23[1] & 0xFE) == 0x12)
              {
                int64x2_t v54 = (llvm::Type *)*((unsigned int *)v23 + 8);
                if (*((_DWORD *)v23 + 2) == 19) {
                  llvm::ScalableVectorType::get(v35, v54);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v35, v54);
                }
                uint64_t v36 = v55;
              }
              unsigned int v37 = *((_DWORD *)v36 + 2);
              if (v37 == 13)
              {
                unsigned int v23 = v36;
              }
              else
              {
                uint64_t v38 = *(void *)(*(void *)this + 40);
                if ((v37 & 0xFE) == 0x12) {
                  unsigned int v37 = *(_DWORD *)(*v36[2] + 8);
                }
                uint64_t v39 = *(void *)(v38 + 504);
                if (v37 < 0x100) {
                  goto LABEL_68;
                }
                unsigned int v40 = v37 >> 8;
                unint64_t v41 = *(unsigned int *)(v38 + 512);
                uint64_t v42 = v39;
                if (v41)
                {
                  uint64_t v42 = v39;
                  unint64_t v43 = v41;
                  do
                  {
                    unint64_t v44 = v43 >> 1;
                    uint64_t v45 = v42 + 16 * (v43 >> 1);
                    unsigned int v46 = *(_DWORD *)(v45 + 8);
                    uint64_t v47 = v45 + 16;
                    v43 += ~(v43 >> 1);
                    if (v46 < v40) {
                      uint64_t v42 = v47;
                    }
                    else {
                      unint64_t v43 = v44;
                    }
                  }
                  while (v43);
                }
                if (v42 == v39 + 16 * v41 || *(_DWORD *)(v42 + 8) != v40) {
LABEL_68:
                }
                  uint64_t v42 = v39;
                uint64_t v48 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v36, (llvm::LLVMContext *)*(unsigned int *)(v42 + 12));
                unsigned int v23 = v48;
                if ((v36[1] & 0xFE) == 0x12)
                {
                  int v56 = (llvm::Type *)*((unsigned int *)v36 + 8);
                  if (*((_DWORD *)v36 + 2) == 19) {
                    llvm::ScalableVectorType::get(v48, v56);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v48, v56);
                  }
                  unsigned int v23 = v57;
                }
              }
            }
            uint64_t v49 = (llvm::ConstantInt *)*v23;
            unsigned int v50 = *((_DWORD *)v23 + 2);
            LODWORD(v59) = v50 >> 8;
            if (v50 >> 8 > 0x40) {
              operator new[]();
            }
            if (v50 <= 0xFF) {
              BOOL v51 = 0;
            }
            else {
              BOOL v51 = (void *)(0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v50) + 63));
            }
            unsigned int v58 = v51;
            unsigned int v52 = (llvm::ConstantInt *)llvm::ConstantInt::get(v49, (llvm::LLVMContext *)&v58, a3);
            if (v59 >= 0x41 && v58) {
              MEMORY[0x1D25D9CB0](v58, 0x1000C8000313F17);
            }
            unint64_t Constant = (llvm::SCEV *)llvm::ScalarEvolution::getConstant(this, v52);
            unint64_t MinMaxExpr = llvm::ScalarEvolution::getMinusSCEV(this, Constant, a2, 0, 0);
            break;
        }
        break;
      }
    }
    return MinMaxExpr;
  }
  else
  {
    Not = llvm::ConstantExpr::getNot(*((llvm::Constant ***)a2 + 4), a2, a3);
    return llvm::ScalarEvolution::getConstant(this, Not);
  }
}

uint64_t llvm::ScalarEvolution::removePointerBase(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::APInt *a3)
{
  unsigned int v3 = a2;
  v41[6] = *MEMORY[0x1E4F143B8];
  int v5 = *((unsigned __int16 *)a2 + 12);
  if (a2 && v5 == 7)
  {
    uint64_t v18 = (const void *)*((void *)a2 + 4);
    unint64_t v17 = *((void *)a2 + 5);
    uint64_t v39 = v41;
    uint64_t v40 = 0x600000000;
    if (v17 >= 7) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v41, v18, 8 * v17);
    uint64_t v19 = *(const llvm::SCEV **)v39;
    LODWORD(v40) = v40 + v17;
    *(void *)uint64_t v39 = llvm::ScalarEvolution::removePointerBase(this, v19);
    uint64_t AddRecExpr = llvm::ScalarEvolution::getAddRecExpr(this, (uint64_t **)&v39, *((const llvm::Loop **)v3 + 6), 0);
    unsigned int v16 = v39;
    if (v39 != v41) {
      goto LABEL_20;
    }
  }
  else if (a2 && v5 == 4)
  {
    uint64_t v7 = (const void *)*((void *)a2 + 4);
    unint64_t v6 = *((void *)a2 + 5);
    uint64_t v39 = v41;
    uint64_t v40 = 0x600000000;
    if (v6 >= 7) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v6)
    {
      memcpy(v41, v7, 8 * v6);
      int v8 = v40;
      unsigned int v9 = (uint64_t *)v39;
    }
    else
    {
      int v8 = 0;
      unsigned int v9 = v41;
    }
    unsigned int v10 = 0;
    LODWORD(v40) = v8 + v6;
    uint64_t v11 = &v9[(v8 + v6)];
    do
    {
      uint64_t v12 = v9;
      while (2)
      {
        uint64_t v13 = *v12;
        switch(*(_WORD *)(v13 + 24))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            uint64_t v14 = v13 + 40;
            break;
          case 4:
            uint64_t v14 = v13 + 48;
            break;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            uint64_t v12 = *(uint64_t **)(v13 + 32);
            continue;
          case 6:
            uint64_t v12 = (uint64_t *)(v13 + 40);
            continue;
          case 0xE:
            uint64_t v14 = *(void *)(v13 - 8);
            break;
          default:
            uint64_t v14 = *(void *)(v13 + 32);
            break;
        }
        break;
      }
      if (*(unsigned char *)(*(void *)v14 + 8) == 15) {
        unsigned int v10 = (const llvm::SCEV **)v9;
      }
      ++v9;
    }
    while (v9 != v11);
    *unsigned int v10 = (const llvm::SCEV *)llvm::ScalarEvolution::removePointerBase(this, *v10);
    uint64_t AddRecExpr = llvm::ScalarEvolution::getAddExpr(this, &v39, 0, 0);
    unsigned int v16 = v39;
    if (v39 != v41) {
LABEL_20:
    }
      free(v16);
  }
  else
  {
    while (2)
    {
      switch(v5)
      {
        case 1:
        case 2:
        case 3:
        case 13:
          unsigned int v20 = (char *)v3 + 40;
          goto LABEL_30;
        case 4:
          unsigned int v20 = (char *)v3 + 48;
          goto LABEL_30;
        case 5:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
          uint64_t v38 = (const llvm::SCEV **)*((void *)v3 + 4);
          goto LABEL_55;
        case 6:
          uint64_t v38 = (const llvm::SCEV **)((char *)v3 + 40);
LABEL_55:
          unsigned int v3 = *v38;
          int v5 = *((unsigned __int16 *)*v38 + 12);
          continue;
        case 14:
          unsigned int v20 = (char *)*((void *)v3 - 1);
          goto LABEL_30;
        default:
          unsigned int v20 = (char *)*((void *)v3 + 4);
LABEL_30:
          uint64_t v21 = *(llvm::FixedVectorType **)v20;
          unsigned int v22 = *(_DWORD *)(*(void *)v20 + 8);
          if (v22 != 13)
          {
            uint64_t v23 = *(void *)(*(void *)this + 40);
            if ((v22 & 0xFE) == 0x12) {
              unsigned int v22 = *(_DWORD *)(**((void **)v21 + 2) + 8);
            }
            uint64_t v24 = *(void *)(v23 + 504);
            if (v22 < 0x100) {
              goto LABEL_42;
            }
            unsigned int v25 = v22 >> 8;
            unint64_t v26 = *(unsigned int *)(v23 + 512);
            uint64_t v27 = v24;
            if (v26)
            {
              uint64_t v27 = v24;
              unint64_t v28 = v26;
              do
              {
                unint64_t v29 = v28 >> 1;
                uint64_t v30 = v27 + 16 * (v28 >> 1);
                unsigned int v31 = *(_DWORD *)(v30 + 8);
                uint64_t v32 = v30 + 16;
                v28 += ~(v28 >> 1);
                if (v31 < v25) {
                  uint64_t v27 = v32;
                }
                else {
                  unint64_t v28 = v29;
                }
              }
              while (v28);
            }
            if (v27 == v24 + 16 * v26 || *(_DWORD *)(v27 + 8) != v25) {
LABEL_42:
            }
              uint64_t v27 = v24;
            unsigned int v33 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v21, (llvm::LLVMContext *)*(unsigned int *)(v27 + 12));
            if ((*((_DWORD *)v21 + 2) & 0xFE) == 0x12) {
              llvm::VectorType::get(v33, (llvm::Type *)(*((unsigned int *)v21 + 8) | ((unint64_t)(*((_DWORD *)v21 + 2) == 19) << 32)));
            }
            uint64_t v21 = v33;
          }
          uint64_t v34 = *(llvm::ConstantInt **)v21;
          unsigned int v35 = *((_DWORD *)v21 + 2);
          LODWORD(v40) = v35 >> 8;
          if (v35 >> 8 >= 0x41) {
            operator new[]();
          }
          uint64_t v39 = 0;
          uint64_t v36 = (llvm::ConstantInt *)llvm::ConstantInt::get(v34, (llvm::LLVMContext *)&v39, a3);
          if (v40 >= 0x41 && v39) {
            MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
          }
          uint64_t AddRecExpr = llvm::ScalarEvolution::getConstant(this, v36);
          break;
      }
      break;
    }
  }
  return AddRecExpr;
}

const llvm::SCEV *llvm::ScalarEvolution::getPointerBase(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  int32x2_t result = a2;
  unsigned int v3 = a2;
  while (2)
  {
    switch(*((_WORD *)v3 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        int v5 = (char *)v3 + 40;
        goto LABEL_9;
      case 4:
        int v5 = (char *)v3 + 48;
        goto LABEL_9;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        unsigned int v4 = (const llvm::SCEV **)*((void *)v3 + 4);
        goto LABEL_4;
      case 6:
        unsigned int v4 = (const llvm::SCEV **)((char *)v3 + 40);
LABEL_4:
        unsigned int v3 = *v4;
        continue;
      case 0xE:
        int v5 = (char *)*((void *)v3 - 1);
        goto LABEL_9;
      default:
        int v5 = (char *)*((void *)v3 + 4);
LABEL_9:
        if (*(unsigned char *)(*(void *)v5 + 8) == 15)
        {
          while (1)
          {
LABEL_10:
            while (1)
            {
              unint64_t v6 = result;
              int v7 = *((unsigned __int16 *)result + 12);
              if (!result || v7 != 7) {
                break;
              }
              int32x2_t result = (const llvm::SCEV *)**((void **)result + 4);
            }
            if (!result || v7 != 4) {
              break;
            }
            int32x2_t result = 0;
            uint64_t v8 = *((void *)v6 + 5);
            if (v8)
            {
              int32x2_t result = 0;
              unsigned int v9 = (uint64_t *)*((void *)v6 + 4);
              unsigned int v10 = &v9[v8];
LABEL_17:
              uint64_t v11 = *v9;
              while (2)
              {
                switch(*(_WORD *)(v11 + 24))
                {
                  case 1:
                  case 2:
                  case 3:
                  case 0xD:
                    uint64_t v13 = v11 + 40;
                    goto LABEL_25;
                  case 4:
                    uint64_t v13 = v11 + 48;
                    goto LABEL_25;
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                  case 0xA:
                  case 0xB:
                  case 0xC:
                    uint64_t v12 = *(uint64_t **)(v11 + 32);
                    goto LABEL_20;
                  case 6:
                    uint64_t v12 = (uint64_t *)(v11 + 40);
LABEL_20:
                    uint64_t v11 = *v12;
                    continue;
                  case 0xE:
                    uint64_t v13 = *(void *)(v11 - 8);
                    goto LABEL_25;
                  default:
                    uint64_t v13 = *(void *)(v11 + 32);
LABEL_25:
                    if (*(unsigned char *)(*(void *)v13 + 8) == 15) {
                      int32x2_t result = (const llvm::SCEV *)*v9;
                    }
                    if (++v9 == v10) {
                      goto LABEL_10;
                    }
                    goto LABEL_17;
                }
              }
            }
          }
        }
        return result;
    }
  }
}

const llvm::SCEV *llvm::ScalarEvolution::getNoopOrZeroExtend(llvm::ScalarEvolution *this, const llvm::SCEV *a2, llvm::Type *a3)
{
  unint64_t v6 = a2;
  while (2)
  {
    switch(*((_WORD *)v6 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        int v7 = (uint64_t *)((char *)v6 + 40);
        goto LABEL_4;
      case 4:
        int v7 = (uint64_t *)((char *)v6 + 48);
        goto LABEL_4;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v18 = (const llvm::SCEV **)*((void *)v6 + 4);
        goto LABEL_18;
      case 6:
        uint64_t v18 = (const llvm::SCEV **)((char *)v6 + 40);
LABEL_18:
        unint64_t v6 = *v18;
        continue;
      case 0xE:
        int v7 = (uint64_t *)*((void *)v6 - 1);
        goto LABEL_4;
      default:
        int v7 = (uint64_t *)*((void *)v6 + 4);
LABEL_4:
        uint64_t v8 = *v7;
        unsigned int v9 = *(_DWORD *)(*v7 + 8);
        uint64_t v10 = *(void *)(*(void *)this + 40);
        if (v9 == 15)
        {
          if ((v9 & 0xFE) == 0x12) {
            unsigned int v9 = *(_DWORD *)(**(void **)(v8 + 16) + 8);
          }
          uint64_t v19 = *(void *)(v10 + 504);
          if (v9 < 0x100) {
            goto LABEL_31;
          }
          unsigned int v20 = v9 >> 8;
          unint64_t v21 = *(unsigned int *)(v10 + 512);
          uint64_t v22 = *(void *)(v10 + 504);
          if (v21)
          {
            uint64_t v22 = v19;
            unint64_t v23 = v21;
            do
            {
              unint64_t v24 = v23 >> 1;
              uint64_t v25 = v22 + 16 * (v23 >> 1);
              unsigned int v26 = *(_DWORD *)(v25 + 8);
              uint64_t v27 = v25 + 16;
              v23 += ~(v23 >> 1);
              if (v26 < v20) {
                uint64_t v22 = v27;
              }
              else {
                unint64_t v23 = v24;
              }
            }
            while (v23);
          }
          if (v22 == v19 + 16 * v21 || *(_DWORD *)(v22 + 8) != v20) {
LABEL_31:
          }
            uint64_t v22 = v19;
          uint64_t v12 = *(unsigned int *)(v22 + 12);
        }
        else
        {
          uint64_t v12 = sub_1CB83544C(v10 + 272, v8);
          if (v11 == 1) {
        }
          }
        unsigned int v13 = *((_DWORD *)a3 + 2);
        uint64_t v14 = *(void *)(*(void *)this + 40);
        if (v13 == 15)
        {
          if ((v13 & 0xFE) == 0x12) {
            unsigned int v13 = *(_DWORD *)(**((void **)a3 + 2) + 8);
          }
          uint64_t v28 = *(void *)(v14 + 504);
          if (v13 < 0x100) {
            goto LABEL_44;
          }
          unsigned int v29 = v13 >> 8;
          unint64_t v30 = *(unsigned int *)(v14 + 512);
          uint64_t v31 = *(void *)(v14 + 504);
          if (v30)
          {
            uint64_t v31 = v28;
            unint64_t v32 = v30;
            do
            {
              unint64_t v33 = v32 >> 1;
              uint64_t v34 = v31 + 16 * (v32 >> 1);
              unsigned int v35 = *(_DWORD *)(v34 + 8);
              uint64_t v36 = v34 + 16;
              v32 += ~(v32 >> 1);
              if (v35 < v29) {
                uint64_t v31 = v36;
              }
              else {
                unint64_t v32 = v33;
              }
            }
            while (v32);
          }
          if (v31 == v28 + 16 * v30 || *(_DWORD *)(v31 + 8) != v29) {
LABEL_44:
          }
            uint64_t v31 = v28;
          uint64_t v15 = *(unsigned int *)(v31 + 12);
        }
        else
        {
          uint64_t v15 = sub_1CB83544C(v14 + 272, (uint64_t)a3);
          if (v16 == 1)
          {
            uint64_t v37 = v15;
            uint64_t v15 = v37;
          }
        }
        if (v12 == v15) {
          return a2;
        }
        return (const llvm::SCEV *)llvm::ScalarEvolution::getZeroExtendExpr(this, a2, a3, 0);
    }
  }
}

llvm::detail::IEEEFloat **llvm::ScalarEvolution::getNoopOrSignExtend(llvm::ScalarEvolution *this, llvm::detail::IEEEFloat **a2, llvm::Type *a3)
{
  unint64_t v6 = a2;
  while (2)
  {
    switch(*((_WORD *)v6 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        int v7 = v6 + 5;
        goto LABEL_4;
      case 4:
        int v7 = v6 + 6;
        goto LABEL_4;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v18 = (llvm::detail::IEEEFloat ***)v6[4];
        goto LABEL_15;
      case 6:
        uint64_t v18 = (llvm::detail::IEEEFloat ***)(v6 + 5);
LABEL_15:
        unint64_t v6 = *v18;
        continue;
      case 0xE:
        int v7 = (llvm::detail::IEEEFloat **)*(v6 - 1);
        goto LABEL_4;
      default:
        int v7 = (llvm::detail::IEEEFloat **)v6[4];
LABEL_4:
        uint64_t v8 = (uint64_t)*v7;
        unsigned int v9 = *((_DWORD *)*v7 + 2);
        uint64_t v10 = *(void *)(*(void *)this + 40);
        if (v9 == 15)
        {
          if ((v9 & 0xFE) == 0x12) {
            unsigned int v9 = *(_DWORD *)(**(void **)(v8 + 16) + 8);
          }
          uint64_t v19 = *(void *)(v10 + 504);
          if (v9 < 0x100) {
            goto LABEL_28;
          }
          unsigned int v20 = v9 >> 8;
          unint64_t v21 = *(unsigned int *)(v10 + 512);
          uint64_t v22 = *(void *)(v10 + 504);
          if (v21)
          {
            uint64_t v22 = v19;
            unint64_t v23 = v21;
            do
            {
              unint64_t v24 = v23 >> 1;
              uint64_t v25 = v22 + 16 * (v23 >> 1);
              unsigned int v26 = *(_DWORD *)(v25 + 8);
              uint64_t v27 = v25 + 16;
              v23 += ~(v23 >> 1);
              if (v26 < v20) {
                uint64_t v22 = v27;
              }
              else {
                unint64_t v23 = v24;
              }
            }
            while (v23);
          }
          if (v22 == v19 + 16 * v21 || *(_DWORD *)(v22 + 8) != v20) {
LABEL_28:
          }
            uint64_t v22 = v19;
          uint64_t v12 = *(unsigned int *)(v22 + 12);
        }
        else
        {
          uint64_t v12 = sub_1CB83544C(v10 + 272, v8);
          if (v11 == 1) {
        }
          }
        unsigned int v13 = *((_DWORD *)a3 + 2);
        uint64_t v14 = *(void *)(*(void *)this + 40);
        if (v13 == 15)
        {
          if ((v13 & 0xFE) == 0x12) {
            unsigned int v13 = *(_DWORD *)(**((void **)a3 + 2) + 8);
          }
          uint64_t v28 = *(void *)(v14 + 504);
          if (v13 < 0x100) {
            goto LABEL_41;
          }
          unsigned int v29 = v13 >> 8;
          unint64_t v30 = *(unsigned int *)(v14 + 512);
          uint64_t v31 = *(void *)(v14 + 504);
          if (v30)
          {
            uint64_t v31 = v28;
            unint64_t v32 = v30;
            do
            {
              unint64_t v33 = v32 >> 1;
              uint64_t v34 = v31 + 16 * (v32 >> 1);
              unsigned int v35 = *(_DWORD *)(v34 + 8);
              uint64_t v36 = v34 + 16;
              v32 += ~(v32 >> 1);
              if (v35 < v29) {
                uint64_t v31 = v36;
              }
              else {
                unint64_t v32 = v33;
              }
            }
            while (v32);
          }
          if (v31 == v28 + 16 * v30 || *(_DWORD *)(v31 + 8) != v29) {
LABEL_41:
          }
            uint64_t v31 = v28;
          uint64_t v15 = *(unsigned int *)(v31 + 12);
        }
        else
        {
          uint64_t v15 = sub_1CB83544C(v14 + 272, (uint64_t)a3);
          if (v16 == 1)
          {
            uint64_t v37 = v15;
            uint64_t v15 = v37;
          }
        }
        if (v12 == v15) {
          return a2;
        }
        return (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::getSignExtendExpr(this, a2, (uint64_t **)a3, 0);
    }
  }
}

uint64_t llvm::ScalarEvolution::getUMinFromMismatchedTypes(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV *a3, int a4)
{
  v7[2] = *MEMORY[0x1E4F143B8];
  v6[0] = v7;
  v7[0] = a2;
  v7[1] = a3;
  v6[1] = (void *)0x200000002;
  uint64_t UMinFromMismatchedTypes = llvm::ScalarEvolution::getUMinFromMismatchedTypes(this, (unsigned int *)v6, a4);
  if (v6[0] != v7) {
    free(v6[0]);
  }
  return UMinFromMismatchedTypes;
}

uint64_t llvm::ScalarEvolution::getUMinFromMismatchedTypes(llvm::ScalarEvolution *this, unsigned int *a2, int a3)
{
  v32[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2[2];
  if (v4 == 1) {
    return **(void **)a2;
  }
  if (v4)
  {
    unsigned int v9 = 0;
    uint64_t v10 = *(uint64_t **)a2;
    uint64_t v11 = *(void *)a2 + 8 * v4;
    do
    {
      uint64_t v12 = *v10;
      if (v9)
      {
        while (2)
        {
          switch(*(_WORD *)(v12 + 24))
          {
            case 1:
            case 2:
            case 3:
            case 0xD:
              uint64_t v15 = (uint64_t *)(v12 + 40);
              goto LABEL_16;
            case 4:
              uint64_t v15 = (uint64_t *)(v12 + 48);
              goto LABEL_16;
            case 5:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
              unint64_t v23 = *(uint64_t **)(v12 + 32);
              goto LABEL_29;
            case 6:
              unint64_t v23 = (uint64_t *)(v12 + 40);
LABEL_29:
              uint64_t v12 = *v23;
              continue;
            case 0xE:
              uint64_t v15 = *(uint64_t **)(v12 - 8);
              goto LABEL_16;
            default:
              uint64_t v15 = *(uint64_t **)(v12 + 32);
LABEL_16:
              uint64_t v16 = *v15;
              uint64_t v17 = *(void *)(*(void *)this + 40) + 272;
              if (*((unsigned char *)v9 + 8) == 15)
              {
                Indexunint64_t TypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v17, (uint64_t)v9);
              }
              else
              {
                Indexunint64_t TypeSizeInBits = sub_1CB83544C(v17, (uint64_t)v9);
                if (v18 == 1) {
              }
                }
              uint64_t v20 = *(void *)(*(void *)this + 40) + 272;
              if (*(unsigned char *)(v16 + 8) == 15)
              {
                unint64_t v21 = llvm::DataLayout::getIndexTypeSizeInBits(v20, v16);
              }
              else
              {
                unint64_t v21 = sub_1CB83544C(v20, v16);
                if (v22 == 1)
                {
                  unint64_t v29 = v21;
                  unint64_t v21 = v29;
                }
              }
              if (IndexTypeSizeInBits < v21) {
                unsigned int v9 = (llvm::Type *)v16;
              }
              break;
          }
          break;
        }
      }
      else
      {
        while (2)
        {
          switch(*(_WORD *)(v12 + 24))
          {
            case 1:
            case 2:
            case 3:
            case 0xD:
              unsigned int v13 = (llvm::Type **)(v12 + 40);
              goto LABEL_9;
            case 4:
              unsigned int v13 = (llvm::Type **)(v12 + 48);
              goto LABEL_9;
            case 5:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
              uint64_t v14 = *(uint64_t **)(v12 + 32);
              goto LABEL_13;
            case 6:
              uint64_t v14 = (uint64_t *)(v12 + 40);
LABEL_13:
              uint64_t v12 = *v14;
              continue;
            case 0xE:
              unsigned int v13 = *(llvm::Type ***)(v12 - 8);
              goto LABEL_9;
            default:
              unsigned int v13 = *(llvm::Type ***)(v12 + 32);
LABEL_9:
              unsigned int v9 = *v13;
              break;
          }
          break;
        }
      }
      ++v10;
    }
    while (v10 != (uint64_t *)v11);
    unint64_t v24 = *(const llvm::SCEV ***)a2;
    uint64_t v25 = a2[2];
    unint64_t v30 = v32;
    uint64_t v31 = 0x200000000;
    if (v25)
    {
      uint64_t v26 = 8 * v25;
      do
      {
        NoopOrZeroExtend = llvm::ScalarEvolution::getNoopOrZeroExtend(this, *v24, v9);
        if (v31 >= (unint64_t)HIDWORD(v31)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v30 + v31) = NoopOrZeroExtend;
        LODWORD(v31) = v31 + 1;
        ++v24;
        v26 -= 8;
      }
      while (v26);
    }
  }
  else
  {
    unint64_t v30 = v32;
    uint64_t v31 = 0x200000000;
  }
  if (a3) {
    Sequentialunint64_t MinMaxExpr = llvm::ScalarEvolution::getSequentialMinMaxExpr((uint64_t)this, 12, (unsigned int *)&v30);
  }
  else {
    Sequentialunint64_t MinMaxExpr = llvm::ScalarEvolution::getMinMaxExpr((uint64_t)this, 10, (uint64_t **)&v30);
  }
  uint64_t v5 = SequentialMinMaxExpr;
  if (v30 != v32) {
    free(v30);
  }
  return v5;
}

unint64_t sub_1CC0F6340(uint64_t a1, _DWORD *a2, llvm::ConstantInt ****a3)
{
  uint64_t v6 = a1;
  while (2)
  {
    switch(*(_WORD *)(v6 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        uint64_t v8 = (uint64_t *)(v6 + 40);
        goto LABEL_9;
      case 4:
        uint64_t v8 = (uint64_t *)(v6 + 48);
        goto LABEL_9;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        int v7 = *(uint64_t **)(v6 + 32);
        goto LABEL_4;
      case 6:
        int v7 = (uint64_t *)(v6 + 40);
LABEL_4:
        uint64_t v6 = *v7;
        continue;
      case 0xE:
        uint64_t v8 = *(uint64_t **)(v6 - 8);
        goto LABEL_9;
      default:
        uint64_t v8 = *(uint64_t **)(v6 + 32);
LABEL_9:
        uint64_t v9 = *v8;
        unsigned int v10 = *(_DWORD *)(*v8 + 8);
        uint64_t v11 = (*a3)[5];
        if (v10 == 15)
        {
          if ((v10 & 0xFE) == 0x12) {
            unsigned int v10 = *(_DWORD *)(**(void **)(v9 + 16) + 8);
          }
          unint64_t v30 = v11[63];
          if (v10 < 0x100) {
            goto LABEL_39;
          }
          unsigned int v31 = v10 >> 8;
          unint64_t v32 = *((unsigned int *)v11 + 128);
          unint64_t v33 = v11[63];
          if (v32)
          {
            unint64_t v33 = v30;
            unint64_t v34 = v32;
            do
            {
              unint64_t v35 = v34 >> 1;
              uint64_t v36 = (uint64_t)v33 + 16 * (v34 >> 1);
              unsigned int v37 = *(_DWORD *)(v36 + 8);
              uint64_t v38 = (llvm::ConstantInt *)(v36 + 16);
              v34 += ~(v34 >> 1);
              if (v37 < v31) {
                unint64_t v33 = v38;
              }
              else {
                unint64_t v34 = v35;
              }
            }
            while (v34);
          }
          if (v33 == (llvm::ConstantInt *)((char *)v30 + 16 * v32) || *((_DWORD *)v33 + 2) != v31) {
LABEL_39:
          }
            unint64_t v33 = v30;
          unsigned int v13 = *((_DWORD *)v33 + 3);
        }
        else
        {
          unsigned int v13 = sub_1CB83544C((uint64_t)(v11 + 34), v9);
          if (v12 == 1) {
        }
          }
        uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(a3, a1, 1, 0);
        llvm::ConstantRange::getSignedMin(RangeRef, (uint64_t)&v69);
        unsigned int v15 = v70;
        unsigned int v16 = v70 - 1;
        if (v70 > 0x40)
        {
          if ((*(void *)(v69 + 8 * (v16 >> 6)) >> v16))
          {
            MEMORY[0x1D25D9CB0]();
          }
          else
          {
            int v39 = 0;
            int64_t v40 = ((unint64_t)v70 + 63) >> 6;
            do
            {
              if (v40-- < 1) {
                break;
              }
              unint64_t v42 = *(void *)(v69 + 8 * v40);
              v39 += __clz(v42);
            }
            while (!v42);
            unsigned int v43 = v70 | 0xFFFFFFC0;
            if ((v70 & 0x3F) == 0) {
              unsigned int v43 = 0;
            }
            int v44 = v39 + v43;
            MEMORY[0x1D25D9CB0]();
            if (v44 != v15)
            {
LABEL_15:
              *a2 = 40;
              unsigned int v68 = v13;
              if (v13 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v67);
              }
              uint64_t v67 = 1 << (v13 - 1);
              uint64_t v17 = (_DWORD *)llvm::ScalarEvolution::getRangeRef(a3, a1, 1, 0);
              llvm::ConstantRange::getSignedMax(v17, (uint64_t)&v65);
              if (v66 > 0x40)
              {
                llvm::APInt::flipAllBitsSlowCase((uint64_t)&v65);
              }
              else
              {
                if (v66) {
                  unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v66;
                }
                else {
                  unint64_t v18 = 0;
                }
                unint64_t v65 = v18 & ~v65;
              }
              llvm::APInt::operator++((uint64_t)&v65);
              unsigned int v20 = v66;
              if (v66 >= 0x41)
              {
                uint64_t v21 = 0;
                BOOL v22 = 0;
                unint64_t v23 = v65;
                uint64_t v24 = v67;
                unint64_t v25 = ((unint64_t)v66 + 63) >> 6;
                do
                {
                  unint64_t v26 = *(void *)(v23 + v21);
                  unint64_t v27 = *(void *)(v24 + v21) + v26;
                  BOOL v28 = v27 < v26;
                  BOOL v29 = v27 + 1 <= v26;
                  if (v22)
                  {
                    ++v27;
                    BOOL v22 = v29;
                  }
                  else
                  {
                    BOOL v22 = v28;
                  }
                  *(void *)(v23 + v21) = v27;
                  v21 += 8;
                }
                while (8 * v25 != v21);
LABEL_87:
                *(void *)(v65 + 8 * (v25 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
                unsigned int v20 = v66;
                unint64_t v53 = v65;
                goto LABEL_68;
              }
              goto LABEL_65;
            }
          }
        }
        else if (((v69 >> v16) & 1) == 0 && v69)
        {
          goto LABEL_15;
        }
        uint64_t v45 = (_DWORD *)llvm::ScalarEvolution::getRangeRef(a3, a1, 1, 0);
        llvm::ConstantRange::getSignedMax(v45, (uint64_t)&v69);
        unsigned int v46 = v70 - 1;
        if (v70 >= 0x41) {
          uint64_t v47 = (unint64_t *)(v69 + 8 * (v46 >> 6));
        }
        else {
          uint64_t v47 = &v69;
        }
        uint64_t v48 = (1 << v46) & *v47;
        if (v70 >= 0x41 && v69) {
          MEMORY[0x1D25D9CB0]();
        }
        if (!v48) {
          return 0;
        }
        *a2 = 38;
        unsigned int v68 = v13;
        if (v13 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v67);
        }
        if (v13) {
          unint64_t v49 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
        }
        else {
          unint64_t v49 = 0;
        }
        uint64_t v67 = v49 & ~(1 << (v13 - 1));
        uint64_t v50 = llvm::ScalarEvolution::getRangeRef(a3, a1, 1, 0);
        llvm::ConstantRange::getSignedMin(v50, (uint64_t)&v65);
        if (v66 > 0x40)
        {
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v65);
        }
        else
        {
          if (v66) {
            unint64_t v51 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v66;
          }
          else {
            unint64_t v51 = 0;
          }
          unint64_t v65 = v51 & ~v65;
        }
        llvm::APInt::operator++((uint64_t)&v65);
        unsigned int v20 = v66;
        if (v66 >= 0x41)
        {
          uint64_t v57 = 0;
          BOOL v58 = 0;
          unint64_t v59 = v65;
          uint64_t v60 = v67;
          unint64_t v25 = ((unint64_t)v66 + 63) >> 6;
          do
          {
            unint64_t v61 = *(void *)(v59 + v57);
            unint64_t v62 = *(void *)(v60 + v57) + v61;
            BOOL v63 = v62 < v61;
            BOOL v64 = v62 + 1 <= v61;
            if (v58)
            {
              ++v62;
              BOOL v58 = v64;
            }
            else
            {
              BOOL v58 = v63;
            }
            *(void *)(v59 + v57) = v62;
            v57 += 8;
          }
          while (8 * v25 != v57);
          goto LABEL_87;
        }
LABEL_65:
        if (v20) {
          unint64_t v52 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
        }
        else {
          unint64_t v52 = 0;
        }
        unint64_t v53 = v52 & (v65 + v67);
        unint64_t v65 = v53;
LABEL_68:
        unsigned int v70 = v20;
        unint64_t v69 = v53;
        unsigned int v66 = 0;
        int64x2_t v54 = (llvm::ConstantInt *)llvm::ConstantInt::get(***a3, (llvm::LLVMContext *)&v69, v19);
        unint64_t Constant = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a3, v54);
        if (v70 >= 0x41 && v69) {
          MEMORY[0x1D25D9CB0](v69, 0x1000C8000313F17);
        }
        if (v66 >= 0x41 && v65) {
          MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
        }
        return Constant;
    }
  }
}

BOOL llvm::ScalarEvolution::isKnownPositive(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(this, a2, 1, 0);
  llvm::ConstantRange::getSignedMin(RangeRef, (uint64_t)&v9);
  unsigned int v3 = v10;
  unsigned int v4 = v10 - 1;
  if (v10 <= 0x40) {
    return ((v9 >> v4) & 1) == 0 && v9 != 0;
  }
  unint64_t v8 = v9;
  BOOL v6 = ((*(void *)(v9 + 8 * (v4 >> 6)) >> v4) & 1) == 0
    && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v9) != v3;
  MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
  return v6;
}

void llvm::ScalarEvolution::createAddRecFromPHIWithCastsImpl(llvm::ScalarEvolution *this@<X0>, const llvm::SCEVUnknown *a2@<X1>, unsigned char *a3@<X8>)
{
  v132[3] = *MEMORY[0x1E4F143B8];
  unsigned int v130 = v132;
  uint64_t v131 = 0x300000000;
  uint64_t v5 = *((void *)a2 + 3);
  uint64_t v6 = sub_1CC0F7674((void *)v5, **((void **)this + 5), *(_DWORD *)(*((void *)this + 5) + 16));
  int v7 = *(_DWORD *)(v5 + 20);
  uint64_t v8 = v7 & 0x7FFFFFF;
  if ((v7 & 0x7FFFFFF) == 0) {
    goto LABEL_51;
  }
  unint64_t v9 = (const llvm::Loop *)v6;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v13 = (unsigned int *)(v6 + 76);
  uint64_t v14 = (unsigned int *)(v6 + 72);
  uint64_t v16 = *(void *)(v6 + 56);
  uint64_t v15 = *(void *)(v6 + 64);
  do
  {
    uint64_t v17 = v5 - 32 * v8;
    if ((v7 & 0x40000000) != 0) {
      uint64_t v17 = *(void *)(v5 - 8);
    }
    uint64_t v18 = *(void *)(v17 + 32 * *(unsigned int *)(v5 + 60) + 8 * v10);
    if (v15 == v16)
    {
      uint64_t v19 = *v13;
      unsigned int v20 = (void *)(v15 + 8 * v19);
      if (v19)
      {
        uint64_t v21 = 0;
        uint64_t v22 = 8 * v19;
        while (*(void *)(v15 + v21) != v18)
        {
          v21 += 8;
          if (v22 == v21) {
            goto LABEL_23;
          }
        }
        unsigned int v20 = (void *)(v15 + v21);
      }
LABEL_23:
      uint64_t v31 = v15;
    }
    else
    {
      uint64_t v23 = *v14;
      int v24 = v23 - 1;
      unsigned int v25 = (v23 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      unsigned int v20 = (void *)(v15 + 8 * v25);
      uint64_t v26 = *v20;
      if (*v20 == -1)
      {
        unint64_t v27 = 0;
LABEL_25:
        if (v27) {
          unsigned int v20 = v27;
        }
        if (*v20 != v18) {
          unsigned int v20 = (void *)(v15 + 8 * v23);
        }
      }
      else
      {
        unint64_t v27 = 0;
        int v28 = 1;
        while (v26 != v18)
        {
          if (v27) {
            BOOL v29 = 0;
          }
          else {
            BOOL v29 = v26 == -2;
          }
          if (v29) {
            unint64_t v27 = v20;
          }
          unsigned int v30 = v25 + v28++;
          unsigned int v25 = v30 & v24;
          unsigned int v20 = (void *)(v15 + 8 * (v30 & v24));
          uint64_t v26 = *v20;
          if (*v20 == -1) {
            goto LABEL_25;
          }
        }
      }
      uint64_t v31 = v16;
    }
    unint64_t v32 = *(llvm::Value **)(v17 + 32 * v10);
    if (v15 == v31) {
      unint64_t v33 = v13;
    }
    else {
      unint64_t v33 = v14;
    }
    if (v20 == (void *)(v15 + 8 * *v33))
    {
      if (v12)
      {
        if (v12 != v32) {
          goto LABEL_51;
        }
      }
      else
      {
        uint64_t v12 = v32;
      }
    }
    else if (v11)
    {
      if (v11 != v32) {
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v11 = v32;
    }
    ++v10;
  }
  while (v10 != v8);
  if (!v11 || !v12)
  {
LABEL_51:
    *a3 = 0;
    a3[48] = 0;
    goto LABEL_52;
  }
  uint64_t v34 = *((void *)this + 13);
  unsigned int v35 = *((_DWORD *)this + 30);
  uint64_t v120 = a3;
  if (!v35) {
    goto LABEL_55;
  }
  unsigned int v36 = (v35 - 1) & ((v11 >> 4) ^ (v11 >> 9));
  uint64_t v37 = v34 + 48 * v36;
  uint64_t v38 = *(llvm::Value **)(v37 + 24);
  if (v38 != v11)
  {
    int v39 = 1;
    while (v38 != (llvm::Value *)-4096)
    {
      unsigned int v40 = v36 + v39++;
      unsigned int v36 = v40 & (v35 - 1);
      uint64_t v37 = v34 + 48 * v36;
      uint64_t v38 = *(llvm::Value **)(v37 + 24);
      if (v38 == v11) {
        goto LABEL_56;
      }
    }
LABEL_55:
    uint64_t v37 = v34 + 48 * v35;
  }
LABEL_56:
  if (v37 == v34 + 48 * v35 || (uint64_t SCEVIter = *(void *)(v37 + 40)) == 0) {
    uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter(this, v11);
  }
  if (SCEVIter) {
    BOOL v42 = *(unsigned __int16 *)(SCEVIter + 24) == 4;
  }
  else {
    BOOL v42 = 0;
  }
  if (!v42) {
    goto LABEL_129;
  }
  uint64_t v43 = *(void *)(SCEVIter + 40);
  uint64_t v44 = v43;
  if (v43)
  {
    uint64_t v118 = *(void *)(SCEVIter + 40);
    uint64_t v45 = 0;
    BOOL v119 = 0;
    unsigned int v46 = a2 ? (char *)a2 + 32 : 0;
    do
    {
      uint64_t v47 = *(void *)(*(void *)(SCEVIter + 32) + 8 * v45);
      if (v46 != (char *)v47)
      {
        uint64_t v48 = **((void **)a2 + 3);
        unsigned int v49 = *(_DWORD *)(v48 + 8);
        uint64_t v50 = *(void *)(*(void *)this + 40);
        if (v49 == 15)
        {
          if ((v49 & 0xFE) == 0x12) {
            unsigned int v49 = *(_DWORD *)(**(void **)(v48 + 16) + 8);
          }
          uint64_t v66 = *(void *)(v50 + 504);
          if (v49 < 0x100) {
            goto LABEL_111;
          }
          unsigned int v67 = v49 >> 8;
          unint64_t v68 = *(unsigned int *)(v50 + 512);
          uint64_t v69 = *(void *)(v50 + 504);
          if (v68)
          {
            uint64_t v69 = v66;
            unint64_t v70 = v68;
            do
            {
              unint64_t v71 = v70 >> 1;
              uint64_t v72 = v69 + 16 * (v70 >> 1);
              unsigned int v73 = *(_DWORD *)(v72 + 8);
              uint64_t v74 = v72 + 16;
              v70 += ~(v70 >> 1);
              if (v73 < v67) {
                uint64_t v69 = v74;
              }
              else {
                unint64_t v70 = v71;
              }
            }
            while (v70);
          }
          if (v69 == v66 + 16 * v68 || *(_DWORD *)(v69 + 8) != v67) {
LABEL_111:
          }
            uint64_t v69 = v66;
          int v52 = *(_DWORD *)(v69 + 12);
        }
        else
        {
          int v52 = sub_1CB83544C(v50 + 272, v48);
          if (v51 == 1) {
        }
          }
        uint64_t v53 = v47;
        while (2)
        {
          switch(*(_WORD *)(v53 + 24))
          {
            case 1:
            case 2:
            case 3:
            case 0xD:
              int v55 = (uint64_t *)(v53 + 40);
              goto LABEL_80;
            case 4:
              int v55 = (uint64_t *)(v53 + 48);
              goto LABEL_80;
            case 5:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
              int64x2_t v54 = *(uint64_t **)(v53 + 32);
              goto LABEL_75;
            case 6:
              int64x2_t v54 = (uint64_t *)(v53 + 40);
LABEL_75:
              uint64_t v53 = *v54;
              continue;
            case 0xE:
              int v55 = *(uint64_t **)(v53 - 8);
              goto LABEL_80;
            default:
              int v55 = *(uint64_t **)(v53 + 32);
LABEL_80:
              uint64_t v56 = *v55;
              unsigned int v57 = *(_DWORD *)(*v55 + 8);
              uint64_t v58 = *(void *)(*(void *)this + 40);
              if (v57 == 15)
              {
                if ((v57 & 0xFE) == 0x12) {
                  unsigned int v57 = *(_DWORD *)(**(void **)(v56 + 16) + 8);
                }
                uint64_t v75 = *(void *)(v58 + 504);
                if (v57 < 0x100) {
                  goto LABEL_124;
                }
                unsigned int v76 = v57 >> 8;
                unint64_t v77 = *(unsigned int *)(v58 + 512);
                uint64_t v78 = *(void *)(v58 + 504);
                if (v77)
                {
                  uint64_t v78 = v75;
                  unint64_t v79 = v77;
                  do
                  {
                    unint64_t v80 = v79 >> 1;
                    uint64_t v81 = v78 + 16 * (v79 >> 1);
                    unsigned int v82 = *(_DWORD *)(v81 + 8);
                    uint64_t v83 = v81 + 16;
                    v79 += ~(v79 >> 1);
                    if (v82 < v76) {
                      uint64_t v78 = v83;
                    }
                    else {
                      unint64_t v79 = v80;
                    }
                  }
                  while (v79);
                }
                if (v78 == v75 + 16 * v77 || *(_DWORD *)(v78 + 8) != v76) {
LABEL_124:
                }
                  uint64_t v78 = v75;
                int v60 = *(_DWORD *)(v78 + 12);
              }
              else
              {
                int v60 = sub_1CB83544C(v58 + 272, v56);
                if (v59 == 1) {
              }
                }
              if (v52 != v60) {
                goto LABEL_97;
              }
              int v61 = *(unsigned __int16 *)(v47 + 24);
              uint64_t v62 = v61 == 3 ? v47 : 0;
              uint64_t v63 = v61 == 2 ? v47 : 0;
              if (!(v62 | v63)) {
                goto LABEL_97;
              }
              uint64_t v64 = v62 ? *(void *)(v62 + 32) : *(void *)(v63 + 32);
              if (*(_WORD *)(v64 + 24) != 1) {
                goto LABEL_97;
              }
              if (*(char **)(v64 + 32) != v46) {
                goto LABEL_97;
              }
              BOOL v119 = v62 != 0;
              unint64_t v65 = *(llvm::Type **)(v64 + 40);
              if (!v65) {
                goto LABEL_97;
              }
              goto LABEL_126;
          }
        }
      }
LABEL_97:
      ++v45;
    }
    while (v45 != v44);
    unint64_t v65 = 0;
    LODWORD(v45) = v118;
LABEL_126:
    uint64_t v43 = *(void *)(SCEVIter + 40);
  }
  else
  {
    unint64_t v65 = 0;
    BOOL v119 = 0;
    LODWORD(v45) = 0;
  }
  if (v43 == v45)
  {
LABEL_129:
    *uint64_t v120 = 0;
    v120[48] = 0;
    goto LABEL_52;
  }
  unsigned int v127 = v129;
  uint64_t v128 = 0x800000000;
  if (v43)
  {
    uint64_t v84 = 0;
    unsigned int v85 = 0;
    do
    {
      if (8 * v45 != v84)
      {
        if (v85 >= HIDWORD(v128)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v127 + v85) = *(void *)(*(void *)(SCEVIter + 32) + v84);
        unsigned int v85 = v128 + 1;
        LODWORD(v128) = v128 + 1;
      }
      v84 += 8;
    }
    while (8 * v43 != v84);
  }
  uint64_t AddExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getAddExpr(this, &v127, 0, 0);
  if (llvm::ScalarEvolution::getLoopDisposition(this, AddExpr, v9) == 1)
  {
    uint64_t v87 = *((void *)this + 13);
    unsigned int v88 = *((_DWORD *)this + 30);
    if (v88)
    {
      unsigned int v89 = v88 - 1;
      unsigned int v90 = (v88 - 1) & ((v12 >> 4) ^ (v12 >> 9));
      uint64_t v91 = v87 + 48 * v90;
      uint64_t v92 = *(llvm::Value **)(v91 + 24);
      if (v92 == v12)
      {
LABEL_147:
        if (v91 == v87 + 48 * v88 || (int v95 = *(const llvm::SCEV **)(v91 + 40)) == 0) {
          int v95 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v12);
        }
        uint64_t TruncateExpr = llvm::ScalarEvolution::getTruncateExpr(this, v95, v65, 0);
        uint64_t v97 = llvm::ScalarEvolution::getTruncateExpr(this, AddExpr, v65, 0);
        uint64_t AddRecExpr = llvm::ScalarEvolution::getAddRecExpr(this, TruncateExpr, v97, v9, 0);
        if (AddRecExpr) {
          BOOL v99 = *(unsigned __int16 *)(AddRecExpr + 24) == 7;
        }
        else {
          BOOL v99 = 0;
        }
        if (v99)
        {
          if (v119) {
            int v105 = 2;
          }
          else {
            int v105 = 1;
          }
          uint64_t WrapPredicate = llvm::ScalarEvolution::getWrapPredicate((uint64_t)this, AddRecExpr, v105);
          if (v131 >= HIDWORD(v131)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v130[v131] = WrapPredicate;
          LODWORD(v131) = v131 + 1;
        }
        int v100 = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::getTruncateExpr(this, v95, v65, 0);
        int v101 = v95;
        if (v119)
        {
          while (2)
          {
            switch(*((_WORD *)v101 + 12))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                char v103 = (uint64_t ***)((char *)v101 + 40);
                goto LABEL_162;
              case 4:
                char v103 = (uint64_t ***)((char *)v101 + 48);
                goto LABEL_162;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                uint64_t v102 = (const llvm::SCEV **)*((void *)v101 + 4);
                goto LABEL_157;
              case 6:
                uint64_t v102 = (const llvm::SCEV **)((char *)v101 + 40);
LABEL_157:
                int v101 = *v102;
                continue;
              case 0xE:
                char v103 = (uint64_t ***)*((void *)v101 - 1);
                goto LABEL_162;
              default:
                char v103 = (uint64_t ***)*((void *)v101 + 4);
LABEL_162:
                uint64_t SignExtendExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getSignExtendExpr(this, v100, *v103, 0);
                break;
            }
            break;
          }
        }
        else
        {
          while (2)
          {
            switch(*((_WORD *)v101 + 12))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                uint64_t v108 = (llvm::Type **)((char *)v101 + 40);
                goto LABEL_175;
              case 4:
                uint64_t v108 = (llvm::Type **)((char *)v101 + 48);
                goto LABEL_175;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                BOOL v107 = (const llvm::SCEV **)*((void *)v101 + 4);
                goto LABEL_169;
              case 6:
                BOOL v107 = (const llvm::SCEV **)((char *)v101 + 40);
LABEL_169:
                int v101 = *v107;
                continue;
              case 0xE:
                uint64_t v108 = (llvm::Type **)*((void *)v101 - 1);
                goto LABEL_175;
              default:
                uint64_t v108 = (llvm::Type **)*((void *)v101 + 4);
LABEL_175:
                uint64_t SignExtendExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getZeroExtendExpr(this, (const llvm::SCEV *)v100, *v108, 0);
                break;
            }
            break;
          }
        }
        uint64_t v109 = SignExtendExpr;
        if (v95 != SignExtendExpr
          && llvm::ScalarEvolution::isKnownPredicate(this, 0x21u, v95, SignExtendExpr))
        {
LABEL_188:
          *uint64_t v120 = 0;
          v120[48] = 0;
        }
        else
        {
          uint64_t v110 = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::getTruncateExpr(this, AddExpr, v65, 0);
          unsigned int v111 = AddExpr;
          while (2)
          {
            switch(*((_WORD *)v111 + 12))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                uint64_t v113 = (uint64_t ***)((char *)v111 + 40);
                goto LABEL_186;
              case 4:
                uint64_t v113 = (uint64_t ***)((char *)v111 + 48);
                goto LABEL_186;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                uint64_t v112 = (const llvm::SCEV **)*((void *)v111 + 4);
                goto LABEL_181;
              case 6:
                uint64_t v112 = (const llvm::SCEV **)((char *)v111 + 40);
LABEL_181:
                unsigned int v111 = *v112;
                continue;
              case 0xE:
                uint64_t v113 = (uint64_t ***)*((void *)v111 - 1);
                goto LABEL_186;
              default:
                uint64_t v113 = (uint64_t ***)*((void *)v111 + 4);
LABEL_186:
                uint64_t v114 = (const llvm::SCEV *)llvm::ScalarEvolution::getSignExtendExpr(this, v110, *v113, 0);
                if (AddExpr != v114
                  && llvm::ScalarEvolution::isKnownPredicate(this, 0x21u, AddExpr, v114))
                {
                  goto LABEL_188;
                }
                if (v95 != v109 && (llvm::ScalarEvolution::isKnownPredicate(this, 0x20u, v95, v109) & 1) == 0)
                {
                  uint64_t ComparePredicate = llvm::ScalarEvolution::getComparePredicate((uint64_t)this, 32, (uint64_t)v95, (uint64_t)v109);
                  if (v131 >= HIDWORD(v131)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  v130[v131] = ComparePredicate;
                  LODWORD(v131) = v131 + 1;
                }
                if (AddExpr != v114 && (llvm::ScalarEvolution::isKnownPredicate(this, 0x20u, AddExpr, v114) & 1) == 0)
                {
                  uint64_t v116 = llvm::ScalarEvolution::getComparePredicate((uint64_t)this, 32, (uint64_t)AddExpr, (uint64_t)v114);
                  if (v131 >= HIDWORD(v131)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  v130[v131] = v116;
                  LODWORD(v131) = v131 + 1;
                }
                uint64_t v123 = llvm::ScalarEvolution::getAddRecExpr(this, (uint64_t)v95, (uint64_t)AddExpr, v9, 0);
                uint64_t v124 = v126;
                uint64_t v125 = 0x300000000;
                if (v131) {
                  sub_1CD4C0D94((uint64_t)&v124, (uint64_t)&v130);
                }
                v122[0] = (uint64_t)a2;
                v122[1] = (uint64_t)v9;
                sub_1CC13C4D0((uint64_t)this + 984, v122);
                *(void *)(v117 + 16) = v123;
                sub_1CD4C0D94(v117 + 24, (uint64_t)&v124);
                *(void *)uint64_t v120 = v123;
                *((void *)v120 + 1) = v120 + 24;
                *((void *)v120 + 2) = 0x300000000;
                if (v125) {
                  sub_1CC1340B4((uint64_t)(v120 + 8), (uint64_t)&v124);
                }
                v120[48] = 1;
                if (v124 != v126) {
                  free(v124);
                }
                break;
            }
            break;
          }
        }
        goto LABEL_189;
      }
      int v93 = 1;
      while (v92 != (llvm::Value *)-4096)
      {
        unsigned int v94 = v90 + v93++;
        unsigned int v90 = v94 & v89;
        uint64_t v91 = v87 + 48 * (v94 & v89);
        uint64_t v92 = *(llvm::Value **)(v91 + 24);
        if (v92 == v12) {
          goto LABEL_147;
        }
      }
    }
    uint64_t v91 = v87 + 48 * v88;
    goto LABEL_147;
  }
  *uint64_t v120 = 0;
  v120[48] = 0;
LABEL_189:
  if (v127 != v129) {
    free(v127);
  }
LABEL_52:
  if (v130 != v132) {
    free(v130);
  }
}

uint64_t sub_1CC0F7674(void *a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(*a1 + 8) != 13 || !a3) {
    return 0;
  }
  uint64_t v3 = a1[5];
  uint64_t v4 = ((v3 >> 4) ^ (v3 >> 9)) & (a3 - 1);
  uint64_t v5 = *(void *)(a2 + 16 * v4);
  if (v3 != v5)
  {
    int v6 = 1;
    while (v5 != -4096)
    {
      int v7 = v4 + v6++;
      uint64_t v4 = v7 & (a3 - 1);
      uint64_t v5 = *(void *)(a2 + 16 * v4);
      if (v3 == v5) {
        goto LABEL_7;
      }
    }
    return 0;
  }
LABEL_7:
  uint64_t v8 = *(void *)(a2 + 16 * v4 + 8);
  if (!v8) {
    return 0;
  }
  if (**(void **)(v8 + 32) == v3) {
    return v8;
  }
  else {
    return 0;
  }
}

void llvm::ScalarEvolution::createAddRecFromPHIWithCasts(llvm::ScalarEvolution *this@<X0>, const llvm::SCEVUnknown *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = sub_1CC0F7674(*((void **)a2 + 3), **((void **)this + 5), *(_DWORD *)(*((void *)this + 5) + 16));
  if (!v6)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 48) = 0;
    return;
  }
  uint64_t v7 = v6;
  uint64_t v22 = 0;
  int v8 = sub_1CC13C5D8(*((void *)this + 123), *((_DWORD *)this + 250), (uint64_t)a2, v6, &v22);
  unint64_t v9 = v22;
  if (v8) {
    BOOL v10 = v22 == (const llvm::SCEVUnknown **)(*((void *)this + 123)
  }
                                            + ((unint64_t)*((unsigned int *)this + 250) << 6));
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    llvm::ScalarEvolution::createAddRecFromPHIWithCastsImpl(this, a2, &v22);
    if (v26)
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 48) = 0;
      sub_1CD4C0E78(a3, (uint64_t)&v22);
    }
    else
    {
      uint64_t v19 = v21;
      uint64_t v20 = 0x300000000;
      uint64_t v16 = (char *)a2 + 32;
      v17[0] = v18;
      v17[1] = (void *)0x300000000;
      v15[0] = (uint64_t)a2;
      v15[1] = v7;
      sub_1CC13C4D0((uint64_t)this + 984, v15);
      *(void *)(v14 + 16) = v16;
      sub_1CC1340B4(v14 + 24, (uint64_t)v17);
      if (v17[0] != v18) {
        free(v17[0]);
      }
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 48) = 0;
      if (v19 != v21) {
        free(v19);
      }
    }
    if (v26)
    {
      unsigned int v13 = v23;
      if (v23 != v25) {
        goto LABEL_22;
      }
    }
  }
  else
  {
    uint64_t v11 = v22[2];
    uint64_t v22 = (const llvm::SCEVUnknown **)v11;
    uint64_t v23 = v25;
    uint64_t v24 = 0x300000000;
    if (*((_DWORD *)v9 + 8))
    {
      sub_1CD4C0D94((uint64_t)&v23, (uint64_t)(v9 + 3));
      uint64_t v11 = (const llvm::SCEVUnknown *)v22;
    }
    if (v11 == (const llvm::SCEVUnknown *)((char *)a2 + 32))
    {
      char v12 = 0;
      *(unsigned char *)a3 = 0;
    }
    else
    {
      *(void *)a3 = v11;
      *(void *)(a3 + 8) = a3 + 24;
      *(void *)(a3 + 16) = 0x300000000;
      if (v24) {
        sub_1CC1340B4(a3 + 8, (uint64_t)&v23);
      }
      char v12 = 1;
    }
    *(unsigned char *)(a3 + 48) = v12;
    unsigned int v13 = v23;
    if (v23 != v25) {
LABEL_22:
    }
      free(v13);
  }
}

uint64_t sub_1CC0F7938(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3) {
    return 1;
  }
  uint64_t v6 = *a1;
  uint64_t v7 = *(void *)(*a1 + 104);
  uint64_t ComparePredicate = llvm::ScalarEvolution::getComparePredicate(*(void *)(*a1 + 88), 32, a2, a3);
  if (llvm::SCEVUnionPredicate::implies(v7, ComparePredicate)) {
    return 1;
  }
  uint64_t v9 = *(void *)(v6 + 104);
  uint64_t v10 = llvm::ScalarEvolution::getComparePredicate(*(void *)(v6 + 88), 32, a3, a2);
  uint64_t result = llvm::SCEVUnionPredicate::implies(v9, v10);
  if (result) {
    return 1;
  }
  return result;
}

const llvm::SCEV *llvm::ScalarEvolution::createSimpleAffineAddRec(llvm::ScalarEvolution *this, llvm::PHINode *a2, llvm::Value *a3, llvm::Value *a4)
{
  v51[2] = *MEMORY[0x1E4F143B8];
  int v8 = (uint64_t *)*((void *)this + 5);
  int v9 = *((_DWORD *)v8 + 4);
  if (v9)
  {
    uint64_t v10 = *((void *)a2 + 5);
    uint64_t v11 = *v8;
    unsigned int v12 = v9 - 1;
    uint64_t v13 = ((v10 >> 4) ^ (v10 >> 9)) & (v9 - 1);
    uint64_t v14 = *(void *)(v11 + 16 * v13);
    if (v10 == v14)
    {
LABEL_6:
      uint64_t v17 = *(const llvm::Loop **)(v11 + 16 * v13 + 8);
      goto LABEL_8;
    }
    int v15 = 1;
    while (v14 != -4096)
    {
      int v16 = v13 + v15++;
      uint64_t v13 = v16 & v12;
      uint64_t v14 = *(void *)(v11 + 16 * v13);
      if (v10 == v14) {
        goto LABEL_6;
      }
    }
  }
  uint64_t v17 = 0;
LABEL_8:
  sub_1CC0F7D20((uint64_t)&v44, (uint64_t)a3, *((const llvm::APInt **)this + 4));
  if (v49) {
    BOOL v18 = v44 == 13;
  }
  else {
    BOOL v18 = 0;
  }
  if (!v18) {
    return 0;
  }
  if (v45 == a2 && llvm::Loop::isLoopInvariant((uint64_t)v17, (uint64_t)v46))
  {
    uint64_t v19 = v46;
    uint64_t v20 = *((void *)this + 13);
    unsigned int v21 = *((_DWORD *)this + 30);
    if (v21)
    {
      unsigned int v22 = ((v46 >> 4) ^ (v46 >> 9)) & (v21 - 1);
      uint64_t v23 = v20 + 48 * v22;
      uint64_t v24 = *(llvm::Value **)(v23 + 24);
      if (v24 == v46) {
        goto LABEL_22;
      }
      int v25 = 1;
      while (v24 != (llvm::Value *)-4096)
      {
        unsigned int v26 = v22 + v25++;
        unsigned int v22 = v26 & (v21 - 1);
        uint64_t v23 = v20 + 48 * v22;
        uint64_t v24 = *(llvm::Value **)(v23 + 24);
        if (v24 == v46) {
          goto LABEL_22;
        }
      }
    }
    uint64_t v23 = v20 + 48 * v21;
LABEL_22:
    if (v23 != v20 + 48 * v21)
    {
      uint64_t SCEVIter = *(void *)(v23 + 40);
      if (SCEVIter) {
        goto LABEL_24;
      }
    }
    BOOL v42 = this;
LABEL_45:
    uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter(v42, v19);
    if (!SCEVIter) {
      return 0;
    }
    goto LABEL_24;
  }
  if (v46 != a2 || !llvm::Loop::isLoopInvariant((uint64_t)v17, (uint64_t)v45)) {
    return 0;
  }
  uint64_t v43 = v45;
  uint64_t SCEVIter = llvm::ScalarEvolution::getExistingSCEV((uint64_t)this, (uint64_t)v45);
  if (!SCEVIter)
  {
    BOOL v42 = this;
    uint64_t v19 = v43;
    goto LABEL_45;
  }
LABEL_24:
  unsigned int v28 = 2 * v48;
  if (v47) {
    uint64_t v29 = v28 | 4;
  }
  else {
    uint64_t v29 = v28;
  }
  uint64_t v30 = *((void *)this + 13);
  unsigned int v31 = *((_DWORD *)this + 30);
  if (v31)
  {
    unsigned int v32 = v31 - 1;
    unsigned int v33 = (v31 - 1) & ((a4 >> 4) ^ (a4 >> 9));
    uint64_t v34 = v30 + 48 * v33;
    unsigned int v35 = *(llvm::Value **)(v34 + 24);
    if (v35 == a4) {
      goto LABEL_34;
    }
    int v36 = 1;
    while (v35 != (llvm::Value *)-4096)
    {
      unsigned int v37 = v33 + v36++;
      unsigned int v33 = v37 & v32;
      uint64_t v34 = v30 + 48 * (v37 & v32);
      unsigned int v35 = *(llvm::Value **)(v34 + 24);
      if (v35 == a4) {
        goto LABEL_34;
      }
    }
  }
  uint64_t v34 = v30 + 48 * v31;
LABEL_34:
  if (v34 == v30 + 48 * v31 || (uint64_t v38 = *(void *)(v34 + 40)) == 0) {
    uint64_t v38 = llvm::ScalarEvolution::createSCEVIter(this, a4);
  }
  uint64_t AddRecExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getAddRecExpr(this, v38, SCEVIter, v17, v29);
  llvm::ScalarEvolution::insertValueToMap(this, a2, AddRecExpr);
  if (a3
    && *((unsigned __int8 *)a3 + 16) >= 0x1Cu
    && llvm::ScalarEvolution::isAddRecNeverPoison(this, a3, v17))
  {
    v50[0] = v51;
    v51[0] = v38;
    v51[1] = SCEVIter;
    v50[1] = (void *)0x200000002;
    uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)this, (unint64_t **)v50, 0, 0);
    if (v50[0] != v51) {
      free(v50[0]);
    }
    llvm::ScalarEvolution::getAddRecExpr(this, AddExpr, SCEVIter, v17, v29);
  }
  return AddRecExpr;
}

uint64_t sub_1CC0F7D20(uint64_t result, uint64_t a2, const llvm::APInt *a3)
{
  uint64_t v3 = result;
  unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
  int v5 = v4 - 28;
  BOOL v7 = v4 < 0x1C && v4 != 5;
  if (!a2 || v7) {
    goto LABEL_76;
  }
  if (v4 <= 0x1B) {
    int v5 = *(unsigned __int16 *)(a2 + 18);
  }
  if (v5 > 25)
  {
    if (v5 <= 29)
    {
      if ((v5 - 27) >= 3)
      {
        if (v5 != 26) {
          goto LABEL_69;
        }
        int v10 = *(_DWORD *)(a2 + 20);
        uint64_t v11 = (v10 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v10 & 0x7FFFFFF);
        uint64_t v21 = *(void *)(v11 + 32);
        if (v21)
        {
          if (*(unsigned char *)(v21 + 16) == 16)
          {
            unint64_t v22 = *(unsigned int *)(*(void *)a2 + 8);
            uint64_t v23 = *(unsigned int *)(v21 + 32);
            if (v23 >= 0x41)
            {
              int v28 = 0;
              int64_t v29 = (unint64_t)(v23 + 63) >> 6;
              do
              {
                if (v29-- < 1) {
                  break;
                }
                unint64_t v31 = *(void *)(*(void *)(v21 + 24) + 8 * v29);
                v28 += __clz(v31);
              }
              while (!v31);
              int v32 = v23 | 0xFFFFFFC0;
              if ((v23 & 0x3F) == 0) {
                int v32 = 0;
              }
              if ((v23 - v28 - v32) > 0x40) {
                goto LABEL_84;
              }
              unint64_t v24 = **(void **)(v21 + 24);
            }
            else
            {
              unint64_t v24 = *(void *)(v21 + 24);
            }
            if (v24 < v22 >> 8)
            {
              unsigned int v33 = **(llvm::ConstantInt ***)v21;
              unsigned int v48 = *(_DWORD *)(*(void *)a2 + 8) >> 8;
              if (v22 >> 8 > 0x40) {
                operator new[]();
              }
              uint64_t v47 = 1 << v24;
              uint64_t result = (uint64_t)llvm::ConstantInt::get(v33, (llvm::LLVMContext *)&v47, a3);
              uint64_t v34 = result;
              if (v48 >= 0x41)
              {
                uint64_t result = v47;
                if (v47) {
                  uint64_t result = MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
                }
              }
              int v35 = *(_DWORD *)(a2 + 20);
              if ((v35 & 0x40000000) != 0) {
                int v36 = *(uint64_t **)(a2 - 8);
              }
              else {
                int v36 = (uint64_t *)(a2 - 32 * (v35 & 0x7FFFFFF));
              }
              uint64_t v37 = *v36;
              *(_DWORD *)uint64_t v3 = 19;
              *(void *)(v3 + 8) = v37;
              *(void *)(v3 + 16) = v34;
              goto LABEL_91;
            }
          }
        }
      }
LABEL_84:
      uint64_t result = sub_1CC1341F0(v3, a2);
LABEL_85:
      char v43 = 1;
      goto LABEL_86;
    }
    if (v5 != 30)
    {
      if (v5 == 64 && *(_DWORD *)(a2 + 72) == 1 && !**(_DWORD **)(a2 + 64))
      {
        uint64_t v12 = *(void *)(a2 - 32);
        uint64_t result = sub_1CC062BC4(v12);
        if (v12 && (result & 1) != 0)
        {
          int v13 = 13;
          unsigned int v14 = *(_DWORD *)(*(void *)(v12 - 32) + 36) - 262;
          char v15 = 0;
          if (((1 << (*(unsigned char *)(*(void *)(v12 - 32) + 36) - 6)) & 0xC000000003) == 0)
          {
            if (((1 << v14) & 0x6000000600000) != 0)
            {
              char v15 = 0;
              int v13 = 15;
            }
            else
            {
              int v13 = 17;
              char v15 = 1;
            }
          }
          if ((v15 & 1) == 0)
          {
            uint64_t result = llvm::isOverflowIntrinsicNoWrap(v12, a3);
            if (result)
            {
              int v16 = (uint64_t *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
              uint64_t v17 = *v16;
              uint64_t v18 = v16[4];
              *(_DWORD *)uint64_t v3 = v13;
              *(void *)(v3 + 8) = v17;
              *(void *)(v3 + 16) = v18;
              *(unsigned char *)(v3 + 24) = (v14 < 0x17) & (0x610003u >> v14);
              *(unsigned char *)(v3 + 25) = !((v14 < 0x17) & (0x610003u >> v14));
LABEL_92:
              *(void *)(v3 + 32) = 0;
              goto LABEL_85;
            }
          }
          int v44 = (uint64_t *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
          uint64_t v40 = *v44;
          uint64_t v41 = v44[4];
          *(_DWORD *)uint64_t v3 = v13;
          goto LABEL_90;
        }
        unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
      }
      goto LABEL_69;
    }
    int v19 = *(_DWORD *)(a2 + 20);
    if ((v19 & 0x40000000) != 0) {
      uint64_t v20 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v20 = a2 - 32 * (v19 & 0x7FFFFFF);
    }
    uint64_t v25 = *(void *)(v20 + 32);
    if (v25 && *(unsigned char *)(v25 + 16) == 16)
    {
      uint64_t result = v25 + 24;
      unsigned int v26 = *(_DWORD *)(v25 + 32);
      if (v26 > 0x40)
      {
        unsigned int v45 = v26 - 1;
        if ((*(void *)(*(void *)result + 8 * ((v26 - 1) >> 6)) >> (v26 - 1)))
        {
          uint64_t result = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)result);
          if (result == v45)
          {
LABEL_50:
            if ((v19 & 0x40000000) == 0)
            {
              uint64_t v27 = v19 & 0x7FFFFFF;
LABEL_83:
              unsigned int v46 = (uint64_t *)(a2 - 32 * v27);
LABEL_88:
              uint64_t v40 = *v46;
              uint64_t v41 = v46[4];
              int v42 = 13;
              goto LABEL_89;
            }
            goto LABEL_87;
          }
        }
      }
      else if (*(void *)result == 1 << (v26 - 1))
      {
        goto LABEL_50;
      }
    }
    if (*(_DWORD *)(*(void *)a2 + 8) != 269) {
      goto LABEL_84;
    }
    if ((v19 & 0x40000000) == 0)
    {
      uint64_t v27 = v19 & 0x7FFFFFF;
      goto LABEL_83;
    }
LABEL_87:
    unsigned int v46 = *(uint64_t **)(a2 - 8);
    goto LABEL_88;
  }
  if (v5 <= 18)
  {
    if (v5 != 13 && v5 != 15 && v5 != 17) {
      goto LABEL_69;
    }
    goto LABEL_84;
  }
  if (v5 == 19 || v5 == 22 || v5 == 25) {
    goto LABEL_84;
  }
LABEL_69:
  if (v4 == 84)
  {
    uint64_t v38 = *(void *)(a2 - 32);
    if (v38)
    {
      if (!*(unsigned char *)(v38 + 16)
        && *(void *)(v38 + 24) == *(void *)(a2 + 72)
        && (*(unsigned char *)(v38 + 33) & 0x20) != 0
        && *(_DWORD *)(v38 + 36) == 179)
      {
        int v39 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        uint64_t v40 = *v39;
        uint64_t v41 = v39[4];
        int v42 = 15;
LABEL_89:
        *(_DWORD *)uint64_t v3 = v42;
LABEL_90:
        *(void *)(v3 + 8) = v40;
        *(void *)(v3 + 16) = v41;
LABEL_91:
        *(_WORD *)(v3 + 24) = 0;
        goto LABEL_92;
      }
    }
  }
LABEL_76:
  char v43 = 0;
  *(unsigned char *)uint64_t v3 = 0;
LABEL_86:
  *(unsigned char *)(v3 + 40) = v43;
  return result;
}

uint64_t llvm::ScalarEvolution::isAddRecNeverPoison(llvm::ScalarEvolution *this, const llvm::Instruction *a2, const llvm::Loop *a3)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if ((llvm::ScalarEvolution::isSCEVExprNeverPoison(this, a2) & 1) == 0) {
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock();
  }
  return 1;
}

const llvm::SCEV *llvm::ScalarEvolution::createAddRecFromPHI(llvm::ScalarEvolution *this, llvm::PHINode *a2)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)*((void *)this + 5);
  int v3 = *((_DWORD *)v2 + 4);
  if (!v3) {
    return 0;
  }
  uint64_t v6 = *((void *)a2 + 5);
  uint64_t v7 = *v2;
  unsigned int v8 = v3 - 1;
  uint64_t v9 = ((v6 >> 4) ^ (v6 >> 9)) & (v3 - 1);
  uint64_t v10 = *(void *)(v7 + 16 * v9);
  if (v6 != v10)
  {
    int v11 = 1;
    while (v10 != -4096)
    {
      int v12 = v9 + v11++;
      uint64_t v9 = v12 & v8;
      uint64_t v10 = *(void *)(v7 + 16 * v9);
      if (v6 == v10) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:
  uint64_t v13 = *(void *)(v7 + 16 * v9 + 8);
  if (!v13) {
    return 0;
  }
  if (**(void **)(v13 + 32) != v6) {
    return 0;
  }
  int v16 = *((_DWORD *)a2 + 5);
  uint64_t v17 = v16 & 0x7FFFFFF;
  if ((v16 & 0x7FFFFFF) == 0) {
    return 0;
  }
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = *(void *)(v13 + 64);
  do
  {
    unint64_t v22 = (char *)a2 - 32 * v17;
    if ((v16 & 0x40000000) != 0) {
      unint64_t v22 = (char *)*((void *)a2 - 1);
    }
    uint64_t v23 = *(void *)&v22[32 * *((unsigned int *)a2 + 15) + 8 * v18];
    if (v21 == *(void *)(v13 + 56))
    {
      uint64_t v24 = *(unsigned int *)(v13 + 76);
      uint64_t v25 = (void *)(v21 + 8 * v24);
      if (v24)
      {
        uint64_t v26 = 0;
        uint64_t v27 = 8 * v24;
        while (*(void *)(v21 + v26) != v23)
        {
          v26 += 8;
          if (v27 == v26) {
            goto LABEL_32;
          }
        }
        uint64_t v25 = (void *)(v21 + v26);
      }
LABEL_32:
      uint64_t v36 = *(void *)(v13 + 64);
    }
    else
    {
      uint64_t v28 = *(unsigned int *)(v13 + 72);
      int v29 = v28 - 1;
      unsigned int v30 = (v28 - 1) & ((v23 >> 4) ^ (v23 >> 9));
      uint64_t v25 = (void *)(v21 + 8 * v30);
      uint64_t v31 = *v25;
      if (*v25 == -1)
      {
        int v32 = 0;
LABEL_34:
        if (v32) {
          uint64_t v25 = v32;
        }
        if (*v25 != v23) {
          uint64_t v25 = (void *)(v21 + 8 * v28);
        }
      }
      else
      {
        int v32 = 0;
        int v33 = 1;
        while (v31 != v23)
        {
          if (v32) {
            BOOL v34 = 0;
          }
          else {
            BOOL v34 = v31 == -2;
          }
          if (v34) {
            int v32 = v25;
          }
          unsigned int v35 = v30 + v33++;
          unsigned int v30 = v35 & v29;
          uint64_t v25 = (void *)(v21 + 8 * (v35 & v29));
          uint64_t v31 = *v25;
          if (*v25 == -1) {
            goto LABEL_34;
          }
        }
      }
      uint64_t v36 = *(void *)(v13 + 56);
    }
    uint64_t v37 = *(llvm::Value **)&v22[32 * v18];
    if (v21 == v36) {
      uint64_t v38 = (unsigned int *)(v13 + 76);
    }
    else {
      uint64_t v38 = (unsigned int *)(v13 + 72);
    }
    if (v25 == (void *)(v21 + 8 * *v38))
    {
      if (v19)
      {
        if (v19 != v37) {
          return 0;
        }
      }
      else
      {
        int v19 = v37;
      }
    }
    else if (v20)
    {
      if ((llvm::Value *)v20 != v37) {
        return 0;
      }
    }
    else
    {
      uint64_t v20 = (uint64_t)v37;
    }
    ++v18;
  }
  while (v18 != v17);
  SimpleAffineAddRec = 0;
  if (!v20) {
    return SimpleAffineAddRec;
  }
  if (!v19) {
    return SimpleAffineAddRec;
  }
  SimpleAffineAddRec = llvm::ScalarEvolution::createSimpleAffineAddRec(this, a2, (llvm::Value *)v20, v19);
  if (SimpleAffineAddRec) {
    return SimpleAffineAddRec;
  }
  Unknown = (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(this, a2);
  int64_t v96 = Unknown;
  llvm::ScalarEvolution::insertValueToMap(this, a2, Unknown);
  uint64_t v40 = *((void *)this + 13);
  unsigned int v41 = *((_DWORD *)this + 30);
  if (!v41) {
    goto LABEL_61;
  }
  unsigned int v42 = (v41 - 1) & ((v20 >> 4) ^ (v20 >> 9));
  uint64_t v43 = v40 + 48 * v42;
  uint64_t v44 = *(void *)(v43 + 24);
  if (v44 != v20)
  {
    int v45 = 1;
    while (v44 != -4096)
    {
      unsigned int v46 = v42 + v45++;
      unsigned int v42 = v46 & (v41 - 1);
      uint64_t v43 = v40 + 48 * v42;
      uint64_t v44 = *(void *)(v43 + 24);
      if (v44 == v20) {
        goto LABEL_62;
      }
    }
LABEL_61:
    uint64_t v43 = v40 + 48 * v41;
  }
LABEL_62:
  if (v43 == v40 + 48 * v41 || (uint64_t SCEVIter = *(void *)(v43 + 40)) == 0) {
    uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter(this, (llvm::Value *)v20);
  }
  if (SCEVIter) {
    BOOL v48 = *(unsigned __int16 *)(SCEVIter + 24) == 4;
  }
  else {
    BOOL v48 = 0;
  }
  if (!v48)
  {
    uint64_t v102 = 0;
    uint64_t v103 = 0;
    int v101 = this;
    int v104 = 0;
    uint64_t v105 = v13;
    char v106 = 1;
    uint64_t v49 = sub_1CC1350F8((uint64_t)&v101, SCEVIter);
    if (v106) {
      SimpleAffineAddRec = (const llvm::SCEV *)v49;
    }
    else {
      SimpleAffineAddRec = (const llvm::SCEV *)*((void *)this + 6);
    }
    MEMORY[0x1D25D9CD0](v102, 8);
    uint64_t v50 = sub_1CC0F8EA0((uint64_t)SimpleAffineAddRec, v13, (uint64_t)this, 0);
    unint64_t v51 = (const llvm::SCEV *)*((void *)this + 6);
    if (SimpleAffineAddRec != v51 && v50 != (void)v51)
    {
      uint64_t v53 = v50;
      uint64_t v54 = *((void *)this + 13);
      unsigned int v55 = *((_DWORD *)this + 30);
      if (v55)
      {
        unsigned int v56 = (v55 - 1) & ((v19 >> 4) ^ (v19 >> 9));
        uint64_t v57 = v54 + 48 * v56;
        uint64_t v58 = *(llvm::Value **)(v57 + 24);
        if (v58 == v19)
        {
LABEL_96:
          if (v57 == v54 + 48 * v55 || (uint64_t v64 = *(void *)(v57 + 40)) == 0) {
            uint64_t v64 = llvm::ScalarEvolution::createSCEVIter(this, v19);
          }
          if (v53 == v64)
          {
            llvm::ScalarEvolution::forgetMemoizedResults((int32x2_t *)this, (uint64_t *)&v96, 1);
            llvm::ScalarEvolution::insertValueToMap(this, a2, SimpleAffineAddRec);
            return SimpleAffineAddRec;
          }
          goto LABEL_138;
        }
        int v59 = 1;
        while (v58 != (llvm::Value *)-4096)
        {
          unsigned int v60 = v56 + v59++;
          unsigned int v56 = v60 & (v55 - 1);
          uint64_t v57 = v54 + 48 * v56;
          uint64_t v58 = *(llvm::Value **)(v57 + 24);
          if (v58 == v19) {
            goto LABEL_96;
          }
        }
      }
      uint64_t v57 = v54 + 48 * v55;
      goto LABEL_96;
    }
LABEL_138:
    llvm::ScalarEvolution::eraseValueFromMap(this, a2);
    return 0;
  }
  uint64_t v61 = *(void *)(SCEVIter + 40);
  if (v61)
  {
    uint64_t v62 = 0;
    while (*(const llvm::SCEV **)(*(void *)(SCEVIter + 32) + 8 * v62) != Unknown)
    {
      if (v61 == ++v62)
      {
        uint64_t v62 = *(void *)(SCEVIter + 40);
        break;
      }
    }
    if (v61 == v62) {
      goto LABEL_138;
    }
    uint64_t v63 = 0;
    int v101 = &v103;
    uint64_t v102 = 0x800000000;
    do
    {
      if (v62 != v63) {
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
      }
      ++v63;
    }
    while (v61 != v63);
  }
  else
  {
    if (!v61) {
      goto LABEL_138;
    }
    int v101 = &v103;
    uint64_t v102 = 0x800000000;
  }
  uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)this, (unint64_t **)&v101, 0, 0);
  if (llvm::ScalarEvolution::getLoopDisposition(this, (const llvm::SCEV *)AddExpr, (const llvm::Loop *)v13) != 1&& (*(_WORD *)(AddExpr + 24) != 7 || *(void *)(AddExpr + 48) != v13))
  {
    SimpleAffineAddRec = 0;
    char v68 = 1;
    goto LABEL_135;
  }
  sub_1CC0F7D20((uint64_t)v97, v20, *((const llvm::APInt **)this + 4));
  if ((_BYTE)v100)
  {
    uint64_t v66 = 0;
    if (LODWORD(v97[0]) == 13 && (llvm::PHINode *)v97[1] == a2)
    {
      unsigned int v67 = 2 * v99;
      if (v98) {
        uint64_t v66 = v67 | 4;
      }
      else {
        uint64_t v66 = v67;
      }
    }
    goto LABEL_120;
  }
  int v69 = *(unsigned __int8 *)(v20 + 16);
  if (v69 != 62 && (v69 != 5 || *(_WORD *)(v20 + 18) != 34)
    || (*(unsigned char *)(v20 + 17) & 2) == 0
    || ((int v70 = *(_DWORD *)(v20 + 20), (v70 & 0x40000000) != 0)
      ? (unint64_t v71 = *(llvm::PHINode ***)(v20 - 8))
      : (unint64_t v71 = (llvm::PHINode **)(v20 - 32 * (v70 & 0x7FFFFFF))),
        *v71 != a2))
  {
    uint64_t v66 = 0;
    goto LABEL_120;
  }
  uint64_t v81 = *((void *)this + 13);
  unsigned int v82 = *((_DWORD *)this + 30);
  if (!v82) {
    goto LABEL_145;
  }
  unsigned int v83 = (v82 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v84 = v81 + 48 * v83;
  unsigned int v85 = *(llvm::PHINode **)(v84 + 24);
  if (v85 != a2)
  {
    int v86 = 1;
    while (v85 != (llvm::PHINode *)-4096)
    {
      unsigned int v87 = v83 + v86++;
      unsigned int v83 = v87 & (v82 - 1);
      uint64_t v84 = v81 + 48 * v83;
      unsigned int v85 = *(llvm::PHINode **)(v84 + 24);
      if (v85 == a2) {
        goto LABEL_146;
      }
    }
LABEL_145:
    uint64_t v84 = v81 + 48 * v82;
  }
LABEL_146:
  if (v84 == v81 + 48 * v82 || (unsigned int v88 = *(const llvm::APInt **)(v84 + 40)) == 0)
  {
    unsigned int v88 = (const llvm::APInt *)llvm::ScalarEvolution::createSCEVIter(this, a2);
    uint64_t v81 = *((void *)this + 13);
    unsigned int v82 = *((_DWORD *)this + 30);
  }
  if (v82)
  {
    unsigned int v89 = (v82 - 1) & ((v20 >> 4) ^ (v20 >> 9));
    uint64_t v90 = v81 + 48 * v89;
    uint64_t v91 = *(void *)(v90 + 24);
    if (v91 == v20) {
      goto LABEL_156;
    }
    int v92 = 1;
    while (v91 != -4096)
    {
      unsigned int v93 = v89 + v92++;
      unsigned int v89 = v93 & (v82 - 1);
      uint64_t v90 = v81 + 48 * v89;
      uint64_t v91 = *(void *)(v90 + 24);
      if (v91 == v20) {
        goto LABEL_156;
      }
    }
  }
  uint64_t v90 = v81 + 48 * v82;
LABEL_156:
  if (v90 == v81 + 48 * v82 || (unsigned int v94 = *(llvm::SCEV **)(v90 + 40)) == 0) {
    unsigned int v94 = (llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, (llvm::Value *)v20);
  }
  MinusSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(this, v94, v88, 0, 0);
  if (llvm::ScalarEvolution::isKnownPositive(this, MinusSCEV)) {
    uint64_t v66 = 3;
  }
  else {
    uint64_t v66 = 1;
  }
LABEL_120:
  uint64_t v72 = *((void *)this + 13);
  unsigned int v73 = *((_DWORD *)this + 30);
  if (v73)
  {
    unsigned int v74 = (v73 - 1) & ((v19 >> 4) ^ (v19 >> 9));
    uint64_t v75 = v72 + 48 * v74;
    unsigned int v76 = *(llvm::Value **)(v75 + 24);
    if (v76 == v19) {
      goto LABEL_127;
    }
    int v77 = 1;
    while (v76 != (llvm::Value *)-4096)
    {
      unsigned int v78 = v74 + v77++;
      unsigned int v74 = v78 & (v73 - 1);
      uint64_t v75 = v72 + 48 * v74;
      unsigned int v76 = *(llvm::Value **)(v75 + 24);
      if (v76 == v19) {
        goto LABEL_127;
      }
    }
  }
  uint64_t v75 = v72 + 48 * v73;
LABEL_127:
  if (v75 == v72 + 48 * v73 || (uint64_t v79 = *(void *)(v75 + 40)) == 0) {
    uint64_t v79 = llvm::ScalarEvolution::createSCEVIter(this, v19);
  }
  SimpleAffineAddRec = (const llvm::SCEV *)llvm::ScalarEvolution::getAddRecExpr(this, v79, AddExpr, (const llvm::Loop *)v13, v66);
  llvm::ScalarEvolution::forgetMemoizedResults((int32x2_t *)this, (uint64_t *)&v96, 1);
  llvm::ScalarEvolution::insertValueToMap(this, a2, SimpleAffineAddRec);
  if (*(unsigned __int8 *)(v20 + 16) >= 0x1Cu
    && llvm::ScalarEvolution::getLoopDisposition(this, (const llvm::SCEV *)AddExpr, (const llvm::Loop *)v13) == 1&& llvm::ScalarEvolution::isAddRecNeverPoison(this, (const llvm::Instruction *)v20, (const llvm::Loop *)v13))
  {
    uint64_t v80 = sub_1CBFD7D6C((uint64_t)this, v79, AddExpr, 0, 0);
    llvm::ScalarEvolution::getAddRecExpr(this, v80, AddExpr, (const llvm::Loop *)v13, v66);
  }
  char v68 = 0;
LABEL_135:
  if (v101 != &v103) {
    free(v101);
  }
  if (v68) {
    goto LABEL_138;
  }
  return SimpleAffineAddRec;
}

uint64_t sub_1CC0F8EA0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = a3;
  int v12 = 0;
  uint64_t v13 = a2;
  __int16 v14 = 0;
  uint64_t v6 = sub_1CC1359F8(&v9, a1);
  if ((_BYTE)v14 || (uint64_t v7 = v6, HIBYTE(v14)) && (a4 & 1) == 0) {
    uint64_t v7 = *(void *)(a3 + 48);
  }
  MEMORY[0x1D25D9CD0](v10, 8);
  return v7;
}

uint64_t llvm::ScalarEvolution::createNodeFromSelectLikePHI(llvm::ScalarEvolution *this, llvm::PHINode *a2)
{
  if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 2) {
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
  }
  return 0;
}

BOOL sub_1CC0F93AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v26[8] = *MEMORY[0x1E4F143B8];
  __int16 v14 = 256;
  uint64_t v15 = a1;
  uint64_t v16 = a4;
  uint64_t v17 = a2;
  uint64_t v18 = &v14;
  int v19 = v21;
  uint64_t v20 = 0x800000000;
  unint64_t v22 = v26;
  uint64_t v23 = v26;
  uint64_t v24 = 8;
  int v25 = 0;
  sub_1CC1362E4((uint64_t *)&v18, a3);
  unsigned int v4 = v20;
  while (v4)
  {
    if (*(unsigned char *)v18) {
      break;
    }
    uint64_t v5 = *((void *)v19 + --v4);
    LODWORD(v20) = v4;
    switch(*(_WORD *)(v5 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        uint64_t v11 = (uint64_t *)(v5 + 32);
        goto LABEL_14;
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v6 = *(void *)(v5 + 40);
        if (v6)
        {
          uint64_t v7 = *(uint64_t **)(v5 + 32);
          uint64_t v8 = 8 * v6 - 8;
          do
          {
            uint64_t v9 = *v7++;
            sub_1CC1362E4((uint64_t *)&v18, v9);
            if (*(unsigned char *)v18) {
              BOOL v10 = 1;
            }
            else {
              BOOL v10 = v8 == 0;
            }
            v8 -= 8;
          }
          while (!v10);
        }
        goto LABEL_15;
      case 6:
        sub_1CC1362E4((uint64_t *)&v18, *(void *)(v5 + 32));
        uint64_t v11 = (uint64_t *)(v5 + 40);
LABEL_14:
        sub_1CC1362E4((uint64_t *)&v18, *v11);
LABEL_15:
        unsigned int v4 = v20;
        break;
      default:
        break;
    }
  }
  int v12 = HIBYTE(v14);
  if (v23 != v22) {
    free(v23);
  }
  if (v19 != v21) {
    free(v19);
  }
  return v12 != 0;
}

uint64_t llvm::ScalarEvolution::createNodeForSelectOrPHI(llvm::ScalarEvolution *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, llvm::Value *a5)
{
  int v10 = *((unsigned __int8 *)a3 + 16);
  if (!a3 || v10 != 16)
  {
    BOOL v13 = v10 != 81 || a2 == 0 || *((unsigned __int8 *)a2 + 16) < 0x1Cu || a3 == 0;
    if (v13
      || (uint64_t result = llvm::ScalarEvolution::createNodeForSelectOrPHIInstWithICmpInstCond(this, (llvm::Type **)a2, a3, a4, a5), *(_WORD *)(result + 24) == 14))
    {
      return llvm::ScalarEvolution::createNodeForSelectOrPHIViaUMinSeq(this, a2, a3, a4, a5);
    }
    return result;
  }
  uint64_t v15 = (llvm::Value *)((char *)a3 + 24);
  unsigned int v16 = *((_DWORD *)a3 + 8);
  if (v16 > 0x40) {
    BOOL v17 = llvm::APInt::countLeadingZerosSlowCase(v15) == v16 - 1;
  }
  else {
    BOOL v17 = *(void *)v15 == 1;
  }
  if (v17) {
    int v19 = a4;
  }
  else {
    int v19 = a5;
  }
  uint64_t v20 = *((void *)this + 13);
  unsigned int v21 = *((_DWORD *)this + 30);
  if (!v21) {
    goto LABEL_31;
  }
  unsigned int v22 = ((v19 >> 4) ^ (v19 >> 9)) & (v21 - 1);
  uint64_t v23 = v20 + 48 * v22;
  uint64_t v24 = *(llvm::Value **)(v23 + 24);
  if (v24 != v19)
  {
    int v25 = 1;
    while (v24 != (llvm::Value *)-4096)
    {
      unsigned int v26 = v22 + v25++;
      unsigned int v22 = v26 & (v21 - 1);
      uint64_t v23 = v20 + 48 * v22;
      uint64_t v24 = *(llvm::Value **)(v23 + 24);
      if (v24 == v19) {
        goto LABEL_32;
      }
    }
LABEL_31:
    uint64_t v23 = v20 + 48 * v21;
  }
LABEL_32:
  if (v23 == v20 + 48 * v21 || (uint64_t result = *(void *)(v23 + 40)) == 0)
  {
    return llvm::ScalarEvolution::createSCEVIter(this, v19);
  }
  return result;
}

const llvm::SCEV *llvm::ScalarEvolution::createNodeForPHI(llvm::ScalarEvolution *this, llvm::PHINode *a2)
{
  v47[8] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ScalarEvolution::createAddRecFromPHI(this, a2);
  if (result) {
    return result;
  }
  uint64_t result = (const llvm::SCEV *)llvm::ScalarEvolution::createNodeFromSelectLikePHI(this, a2);
  if (result) {
    return result;
  }
  uint64_t v8 = *((void *)this + 2);
  v41[0] = *(void *)(*(void *)this + 40) + 272;
  v41[1] = v8;
  int8x16_t v42 = vextq_s8(*(int8x16_t *)((char *)this + 24), *(int8x16_t *)((char *)this + 24), 8uLL);
  uint64_t v43 = 0;
  __int16 v44 = 257;
  int v9 = *((_DWORD *)a2 + 5);
  if ((v9 & 0x40000000) != 0)
  {
    uint64_t v11 = (uint64_t *)*((void *)a2 - 1);
    unint64_t v10 = v9 & 0x7FFFFFF;
  }
  else
  {
    unint64_t v10 = v9 & 0x7FFFFFF;
    uint64_t v11 = (uint64_t *)((char *)a2 - 32 * v10);
  }
  int v45 = v47;
  uint64_t v46 = 0x800000000;
  if (v10 >= 9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v10)
  {
    uint64_t v12 = 32 * v10;
    BOOL v13 = v47;
    do
    {
      uint64_t v14 = *v11;
      v11 += 4;
      *v13++ = v14;
      v12 -= 32;
    }
    while (v12);
    uint64_t v15 = v45;
  }
  else
  {
    uint64_t v15 = v47;
  }
  LODWORD(v46) = v10;
  unsigned int v16 = llvm::SimplifyInstructionWithOperands(a2, (uint64_t)v15, v10, (uint64_t)v41, v5, v6, v7);
  if (v45 != v47) {
    free(v45);
  }
  if (!v16) {
    return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(this, a2);
  }
  if (*((unsigned __int8 *)v16 + 16) >= 0x1Cu)
  {
    uint64_t v24 = *((void *)v16 + 5);
    uint64_t v25 = *((void *)a2 + 5);
    if (v24 != v25)
    {
      unsigned int v26 = (uint64_t *)*((void *)this + 5);
      int v27 = *((_DWORD *)v26 + 4);
      if (v27)
      {
        uint64_t v28 = *v26;
        unsigned int v29 = v27 - 1;
        LODWORD(v30) = v29 & ((v24 >> 4) ^ (v24 >> 9));
        uint64_t v31 = (uint64_t *)(v28 + 16 * v30);
        uint64_t v32 = *v31;
        if (v24 == *v31)
        {
          unsigned int v35 = (void *)v31[1];
          if (v35)
          {
LABEL_38:
            uint64_t v36 = v29 & ((v25 >> 4) ^ (v25 >> 9));
            uint64_t v37 = *(void *)(v28 + 16 * v36);
            if (v25 == v37)
            {
LABEL_42:
              uint64_t v40 = *(void **)(v28 + 16 * v36 + 8);
              goto LABEL_46;
            }
            int v38 = 1;
            while (v37 != -4096)
            {
              int v39 = v36 + v38++;
              uint64_t v36 = v39 & v29;
              uint64_t v37 = *(void *)(v28 + 16 * v36);
              if (v25 == v37) {
                goto LABEL_42;
              }
            }
            uint64_t v40 = 0;
LABEL_46:
            while (v40 != v35)
            {
              if (!v40) {
                return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown(this, a2);
              }
              uint64_t v40 = (void *)*v40;
            }
          }
        }
        else
        {
          int v33 = 1;
          while (v32 != -4096)
          {
            int v34 = v30 + v33++;
            uint64_t v30 = v34 & v29;
            uint64_t v32 = *(void *)(v28 + 16 * v30);
            if (v24 == v32)
            {
              unsigned int v35 = *(void **)(v28 + 16 * v30 + 8);
              if (v35) {
                goto LABEL_38;
              }
              break;
            }
          }
        }
      }
    }
  }
  uint64_t v17 = *((void *)this + 13);
  unsigned int v18 = *((_DWORD *)this + 30);
  if (!v18) {
    goto LABEL_24;
  }
  unsigned int v19 = (v18 - 1) & ((v16 >> 4) ^ (v16 >> 9));
  uint64_t v20 = v17 + 48 * v19;
  unsigned int v21 = *(llvm::UndefValue **)(v20 + 24);
  if (v21 != v16)
  {
    int v22 = 1;
    while (v21 != (llvm::UndefValue *)-4096)
    {
      unsigned int v23 = v19 + v22++;
      unsigned int v19 = v23 & (v18 - 1);
      uint64_t v20 = v17 + 48 * v19;
      unsigned int v21 = *(llvm::UndefValue **)(v20 + 24);
      if (v21 == v16) {
        goto LABEL_25;
      }
    }
LABEL_24:
    uint64_t v20 = v17 + 48 * v18;
  }
LABEL_25:
  if (v20 == v17 + 48 * v18) {
    return (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v16);
  }
  uint64_t result = *(const llvm::SCEV **)(v20 + 40);
  if (!result) {
    return (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v16);
  }
  return result;
}

uint64_t SCEVMinMaxExprContains(uint64_t a1, uint64_t a2, __int16 a3)
{
  v24[8] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  __int16 v13 = a3;
  __int16 v14 = 10;
  unsigned __int8 v15 = 0;
  unsigned int v16 = &v12;
  uint64_t v17 = v19;
  uint64_t v18 = 0x800000000;
  uint64_t v20 = v24;
  unsigned int v21 = v24;
  uint64_t v22 = 8;
  int v23 = 0;
  sub_1CC13C790((uint64_t)&v16, a1);
  unsigned int v3 = v18;
  while (v3)
  {
    if (*((unsigned char *)v16 + 12)) {
      break;
    }
    uint64_t v6 = *((void *)v17 + --v3);
    LODWORD(v18) = v3;
    switch(*(_WORD *)(v6 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        uint64_t v5 = (uint64_t *)(v6 + 32);
        goto LABEL_19;
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v7 = *(void *)(v6 + 40);
        if (v7)
        {
          uint64_t v8 = *(uint64_t **)(v6 + 32);
          uint64_t v9 = 8 * v7 - 8;
          do
          {
            uint64_t v10 = *v8++;
            sub_1CC13C790((uint64_t)&v16, v10);
            if (*((unsigned char *)v16 + 12)) {
              BOOL v11 = 1;
            }
            else {
              BOOL v11 = v9 == 0;
            }
            v9 -= 8;
          }
          while (!v11);
        }
        goto LABEL_20;
      case 6:
        sub_1CC13C790((uint64_t)&v16, *(void *)(v6 + 32));
        uint64_t v5 = (uint64_t *)(v6 + 40);
LABEL_19:
        sub_1CC13C790((uint64_t)&v16, *v5);
LABEL_20:
        unsigned int v3 = v18;
        break;
      default:
        break;
    }
  }
  if (v21 != v20) {
    free(v21);
  }
  if (v17 != v19) {
    free(v17);
  }
  return v15;
}

unint64_t llvm::ScalarEvolution::createNodeForSelectOrPHIInstWithICmpInstCond(llvm::ScalarEvolution *this, llvm::Type **a2, llvm::ICmpInst *a3, llvm::Value *a4, llvm::Value *a5)
{
  void v223[2] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a5;
  uint64_t v10 = (llvm::Value *)*((void *)a3 - 8);
  uint64_t v11 = *((void *)a3 - 4);
  uint64_t v12 = v10;
  __int16 v13 = a4;
  switch(*((_WORD *)a3 + 9) & 0x3F)
  {
    case ' ':
      goto LABEL_58;
    case '!':
      __int16 v13 = a5;
      uint64_t v7 = a4;
LABEL_58:
      uint64_t v56 = *(void *)v10;
      unsigned int v57 = *(_DWORD *)(*(void *)v10 + 8);
      uint64_t v58 = *(void *)(*(void *)this + 40);
      if (v57 == 15)
      {
        if ((v57 & 0xFE) == 0x12) {
          unsigned int v57 = *(_DWORD *)(**(void **)(v56 + 16) + 8);
        }
        uint64_t v167 = *(void *)(v58 + 504);
        if (v57 < 0x100) {
          goto LABEL_261;
        }
        unsigned int v168 = v57 >> 8;
        unint64_t v169 = *(unsigned int *)(v58 + 512);
        uint64_t v170 = *(void *)(v58 + 504);
        if (v169)
        {
          uint64_t v170 = v167;
          unint64_t v171 = v169;
          do
          {
            unint64_t v172 = v171 >> 1;
            uint64_t v173 = v170 + 16 * (v171 >> 1);
            unsigned int v174 = *(_DWORD *)(v173 + 8);
            uint64_t v175 = v173 + 16;
            v171 += ~(v171 >> 1);
            if (v174 < v168) {
              uint64_t v170 = v175;
            }
            else {
              unint64_t v171 = v172;
            }
          }
          while (v171);
        }
        if (v170 == v167 + 16 * v169 || *(_DWORD *)(v170 + 8) != v168) {
LABEL_261:
        }
          uint64_t v170 = v167;
        unint64_t v60 = *(unsigned int *)(v170 + 12);
      }
      else
      {
        unint64_t v60 = sub_1CB83544C(v58 + 272, v56);
        if (v59 == 1) {
      }
        }
      uint64_t v61 = (uint64_t)*a2;
      unsigned int v62 = *((_DWORD *)*a2 + 2);
      uint64_t v63 = *(void *)(*(void *)this + 40);
      if (v62 == 15)
      {
        if ((v62 & 0xFE) == 0x12) {
          unsigned int v62 = *(_DWORD *)(**(void **)(v61 + 16) + 8);
        }
        uint64_t v176 = *(void *)(v63 + 504);
        if (v62 < 0x100) {
          goto LABEL_274;
        }
        unsigned int v177 = v62 >> 8;
        unint64_t v178 = *(unsigned int *)(v63 + 512);
        uint64_t v179 = *(void *)(v63 + 504);
        if (v178)
        {
          uint64_t v179 = v176;
          unint64_t v180 = v178;
          do
          {
            unint64_t v181 = v180 >> 1;
            uint64_t v182 = v179 + 16 * (v180 >> 1);
            unsigned int v183 = *(_DWORD *)(v182 + 8);
            uint64_t v184 = v182 + 16;
            v180 += ~(v180 >> 1);
            if (v183 < v177) {
              uint64_t v179 = v184;
            }
            else {
              unint64_t v180 = v181;
            }
          }
          while (v180);
        }
        if (v179 == v176 + 16 * v178 || *(_DWORD *)(v179 + 8) != v177) {
LABEL_274:
        }
          uint64_t v179 = v176;
        unint64_t v65 = *(unsigned int *)(v179 + 12);
      }
      else
      {
        unint64_t v65 = sub_1CB83544C(v63 + 272, v61);
        if (v64 == 1) {
      }
        }
      if (v60 > v65 || *(unsigned char *)(v11 + 16) != 16) {
        goto LABEL_188;
      }
      uint64_t v66 = *(unsigned int *)(v11 + 32);
      if (v66 > 0x40)
      {
        int v82 = 0;
        int64_t v83 = (unint64_t)(v66 + 63) >> 6;
        do
        {
          BOOL v84 = v83-- < 1;
          if (v84) {
            break;
          }
          unint64_t v85 = *(void *)(*(void *)(v11 + 24) + 8 * v83);
          v82 += __clz(v85);
        }
        while (!v85);
        int v86 = v66 | 0xFFFFFFC0;
        if ((v66 & 0x3F) == 0) {
          int v86 = 0;
        }
        if (v82 + v86 != v66)
        {
LABEL_188:
          if (*(unsigned char *)(v11 + 16) != 16) {
            goto LABEL_298;
          }
          uint64_t v135 = *(unsigned int *)(v11 + 32);
          if (v135 > 0x40)
          {
            int v136 = 0;
            int64_t v137 = (unint64_t)(v135 + 63) >> 6;
            do
            {
              BOOL v84 = v137-- < 1;
              if (v84) {
                break;
              }
              unint64_t v138 = *(void *)(*(void *)(v11 + 24) + 8 * v137);
              v136 += __clz(v138);
            }
            while (!v138);
            int v139 = v135 | 0xFFFFFFC0;
            if ((v135 & 0x3F) == 0) {
              int v139 = 0;
            }
            if (v136 + v139 != v135) {
              goto LABEL_298;
            }
          }
          else if (*(void *)(v11 + 24))
          {
            goto LABEL_298;
          }
          if (*((unsigned char *)v13 + 16) != 16) {
            goto LABEL_298;
          }
          uint64_t v140 = *((unsigned int *)v13 + 8);
          if (v140 > 0x40)
          {
            int v142 = 0;
            int64_t v143 = (unint64_t)(v140 + 63) >> 6;
            do
            {
              BOOL v84 = v143-- < 1;
              if (v84) {
                break;
              }
              unint64_t v144 = *(void *)(*((void *)v13 + 3) + 8 * v143);
              v142 += __clz(v144);
            }
            while (!v144);
            int v145 = v140 | 0xFFFFFFC0;
            if ((v140 & 0x3F) == 0) {
              int v145 = 0;
            }
            if (v142 + v145 != v140) {
              goto LABEL_298;
            }
          }
          else if (*((void *)v13 + 3))
          {
            goto LABEL_298;
          }
          uint64_t v146 = *((void *)this + 13);
          unsigned int v147 = *((_DWORD *)this + 30);
          if (v147)
          {
            unsigned int v148 = (v147 - 1) & ((v10 >> 4) ^ (v10 >> 9));
            uint64_t v149 = v146 + 48 * v148;
            uint64_t v150 = *(llvm::Value **)(v149 + 24);
            if (v150 == v10) {
              goto LABEL_237;
            }
            int v151 = 1;
            while (v150 != (llvm::Value *)-4096)
            {
              unsigned int v152 = v148 + v151++;
              unsigned int v148 = v152 & (v147 - 1);
              uint64_t v149 = v146 + 48 * v148;
              uint64_t v150 = *(llvm::Value **)(v149 + 24);
              if (v150 == v10) {
                goto LABEL_237;
              }
            }
          }
          uint64_t v149 = v146 + 48 * v147;
LABEL_237:
          if (v149 == v146 + 48 * v147 || (uint64_t SCEVIter = *(void *)(v149 + 40)) == 0) {
            uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter(this, v10);
          }
          while (SCEVIter && *(_WORD *)(SCEVIter + 24) == 2)
            uint64_t SCEVIter = *(void *)(SCEVIter + 32);
          uint64_t v165 = SCEVIter;
          while (2)
          {
            switch(*(_WORD *)(v165 + 24))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                uint64_t v185 = (uint64_t *)(v165 + 40);
                goto LABEL_279;
              case 4:
                uint64_t v185 = (uint64_t *)(v165 + 48);
                goto LABEL_279;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                uint64_t v166 = *(uint64_t **)(v165 + 32);
                goto LABEL_248;
              case 6:
                uint64_t v166 = (uint64_t *)(v165 + 40);
LABEL_248:
                uint64_t v165 = *v166;
                continue;
              case 0xE:
                uint64_t v185 = *(uint64_t **)(v165 - 8);
                goto LABEL_279;
              default:
                uint64_t v185 = *(uint64_t **)(v165 + 32);
LABEL_279:
                uint64_t v186 = *v185;
                unsigned int v187 = *(_DWORD *)(*v185 + 8);
                uint64_t v188 = *(void *)(*(void *)this + 40);
                if (v187 == 15)
                {
                  if ((v187 & 0xFE) == 0x12) {
                    unsigned int v187 = *(_DWORD *)(**(void **)(v186 + 16) + 8);
                  }
                  uint64_t v204 = *(void *)(v188 + 504);
                  if (v187 < 0x100) {
                    goto LABEL_313;
                  }
                  unsigned int v205 = v187 >> 8;
                  unint64_t v206 = *(unsigned int *)(v188 + 512);
                  uint64_t v207 = *(void *)(v188 + 504);
                  if (v206)
                  {
                    uint64_t v207 = v204;
                    unint64_t v208 = v206;
                    do
                    {
                      unint64_t v209 = v208 >> 1;
                      uint64_t v210 = v207 + 16 * (v208 >> 1);
                      unsigned int v211 = *(_DWORD *)(v210 + 8);
                      uint64_t v212 = v210 + 16;
                      v208 += ~(v208 >> 1);
                      if (v211 < v205) {
                        uint64_t v207 = v212;
                      }
                      else {
                        unint64_t v208 = v209;
                      }
                    }
                    while (v208);
                  }
                  if (v207 == v204 + 16 * v206 || *(_DWORD *)(v207 + 8) != v205) {
LABEL_313:
                  }
                    uint64_t v207 = v204;
                  unint64_t v190 = *(unsigned int *)(v207 + 12);
                }
                else
                {
                  unint64_t v190 = sub_1CB83544C(v188 + 272, v186);
                  if (v189 == 1) {
                }
                  }
                uint64_t v191 = (uint64_t)*a2;
                unsigned int v192 = *((_DWORD *)*a2 + 2);
                uint64_t v193 = *(void *)(*(void *)this + 40);
                if (v192 == 15)
                {
                  if ((v192 & 0xFE) == 0x12) {
                    unsigned int v192 = *(_DWORD *)(**(void **)(v191 + 16) + 8);
                  }
                  uint64_t v213 = *(void *)(v193 + 504);
                  if (v192 < 0x100) {
                    goto LABEL_326;
                  }
                  unsigned int v214 = v192 >> 8;
                  unint64_t v215 = *(unsigned int *)(v193 + 512);
                  uint64_t v216 = *(void *)(v193 + 504);
                  if (v215)
                  {
                    uint64_t v216 = v213;
                    unint64_t v217 = v215;
                    do
                    {
                      unint64_t v218 = v217 >> 1;
                      uint64_t v219 = v216 + 16 * (v217 >> 1);
                      unsigned int v220 = *(_DWORD *)(v219 + 8);
                      uint64_t v221 = v219 + 16;
                      v217 += ~(v217 >> 1);
                      if (v220 < v214) {
                        uint64_t v216 = v221;
                      }
                      else {
                        unint64_t v217 = v218;
                      }
                    }
                    while (v217);
                  }
                  if (v216 == v213 + 16 * v215 || *(_DWORD *)(v216 + 8) != v214) {
LABEL_326:
                  }
                    uint64_t v216 = v213;
                  unint64_t v195 = *(unsigned int *)(v216 + 12);
                }
                else
                {
                  unint64_t v195 = sub_1CB83544C(v193 + 272, v191);
                  if (v194 == 1) {
                }
                  }
                if (v190 > v195) {
                  goto LABEL_298;
                }
                uint64_t v196 = *((void *)this + 13);
                unsigned int v197 = *((_DWORD *)this + 30);
                if (!v197) {
                  goto LABEL_292;
                }
                unsigned int v198 = (v197 - 1) & ((v7 >> 4) ^ (v7 >> 9));
                uint64_t v199 = v196 + 48 * v198;
                uint64_t v200 = *(llvm::Value **)(v199 + 24);
                if (v200 == v7) {
                  goto LABEL_293;
                }
                int v201 = 1;
                break;
            }
            break;
          }
          while (v200 != (llvm::Value *)-4096)
          {
            unsigned int v202 = v198 + v201++;
            unsigned int v198 = v202 & (v197 - 1);
            uint64_t v199 = v196 + 48 * v198;
            uint64_t v200 = *(llvm::Value **)(v199 + 24);
            if (v200 == v7) {
              goto LABEL_293;
            }
          }
LABEL_292:
          uint64_t v199 = v196 + 48 * v197;
LABEL_293:
          if (v199 == v196 + 48 * v197 || (uint64_t v203 = *(void *)(v199 + 40)) == 0) {
            uint64_t v203 = llvm::ScalarEvolution::createSCEVIter(this, v7);
          }
          if (SCEVMinMaxExprContains(v203, SCEVIter, 12))
          {
            NoopOrZeroExtend = llvm::ScalarEvolution::getNoopOrZeroExtend(this, (const llvm::SCEV *)SCEVIter, *a2);
            unsigned int v94 = this;
            int64_t v96 = (const llvm::SCEV *)v203;
            int v97 = 1;
LABEL_132:
            return llvm::ScalarEvolution::getUMinExpr(v94, NoopOrZeroExtend, v96, v97);
          }
LABEL_298:
          return llvm::ScalarEvolution::getUnknown(this, (llvm::Value *)a2);
        }
      }
      else if (*(void *)(v11 + 24))
      {
        goto LABEL_188;
      }
      uint64_t v87 = *((void *)this + 13);
      unsigned int v88 = *((_DWORD *)this + 30);
      if (!v88) {
        goto LABEL_163;
      }
      unsigned int v89 = (v88 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      uint64_t v90 = v87 + 48 * v89;
      uint64_t v91 = *(llvm::Value **)(v90 + 24);
      if (v91 != v10)
      {
        int v92 = 1;
        while (v91 != (llvm::Value *)-4096)
        {
          unsigned int v93 = v89 + v92++;
          unsigned int v89 = v93 & (v88 - 1);
          uint64_t v90 = v87 + 48 * v89;
          uint64_t v91 = *(llvm::Value **)(v90 + 24);
          if (v91 == v10) {
            goto LABEL_164;
          }
        }
LABEL_163:
        uint64_t v90 = v87 + 48 * v88;
      }
LABEL_164:
      if (v90 == v87 + 48 * v88 || (uint64_t v117 = *(const llvm::SCEV **)(v90 + 40)) == 0) {
        uint64_t v117 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v10);
      }
      uint64_t v118 = llvm::ScalarEvolution::getNoopOrZeroExtend(this, v117, *a2);
      uint64_t v119 = *((void *)this + 13);
      unsigned int v120 = *((_DWORD *)this + 30);
      if (!v120) {
        goto LABEL_173;
      }
      unsigned int v121 = (v120 - 1) & ((v13 >> 4) ^ (v13 >> 9));
      uint64_t v122 = v119 + 48 * v121;
      uint64_t v123 = *(llvm::Value **)(v122 + 24);
      if (v123 != v13)
      {
        int v124 = 1;
        while (v123 != (llvm::Value *)-4096)
        {
          unsigned int v125 = v121 + v124++;
          unsigned int v121 = v125 & (v120 - 1);
          uint64_t v122 = v119 + 48 * v121;
          uint64_t v123 = *(llvm::Value **)(v122 + 24);
          if (v123 == v13) {
            goto LABEL_174;
          }
        }
LABEL_173:
        uint64_t v122 = v119 + 48 * v120;
      }
LABEL_174:
      if (v122 == v119 + 48 * v120 || (uint64_t v126 = *(llvm::SCEV **)(v122 + 40)) == 0)
      {
        uint64_t v126 = (llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v13);
        uint64_t v119 = *((void *)this + 13);
        unsigned int v120 = *((_DWORD *)this + 30);
      }
      if (!v120) {
        goto LABEL_183;
      }
      unsigned int v127 = (v120 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v128 = v119 + 48 * v127;
      uint64_t v129 = *(llvm::Value **)(v128 + 24);
      if (v129 != v7)
      {
        int v130 = 1;
        while (v129 != (llvm::Value *)-4096)
        {
          unsigned int v131 = v127 + v130++;
          unsigned int v127 = v131 & (v120 - 1);
          uint64_t v128 = v119 + 48 * v127;
          uint64_t v129 = *(llvm::Value **)(v128 + 24);
          if (v129 == v7) {
            goto LABEL_184;
          }
        }
LABEL_183:
        uint64_t v128 = v119 + 48 * v120;
      }
LABEL_184:
      if (v128 == v119 + 48 * v120 || (unsigned int v132 = *(llvm::SCEV **)(v128 + 40)) == 0) {
        unsigned int v132 = (llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v7);
      }
      MinusSCEV = (const llvm::APInt *)llvm::ScalarEvolution::getMinusSCEV(this, v132, v118, 0, 0);
      unint64_t v134 = llvm::ScalarEvolution::getMinusSCEV(this, v126, MinusSCEV, 0, 0);
      if (*(_WORD *)(v134 + 24)) {
        goto LABEL_188;
      }
      uint64_t v153 = *(void *)(v134 + 32);
      uint64_t v154 = (void *)(v153 + 24);
      uint64_t v155 = *(unsigned int *)(v153 + 32);
      if (v155 >= 0x41)
      {
        int v156 = 0;
        int64_t v157 = (unint64_t)(v155 + 63) >> 6;
        do
        {
          BOOL v84 = v157-- < 1;
          if (v84) {
            break;
          }
          unint64_t v158 = *(void *)(*v154 + 8 * v157);
          v156 += __clz(v158);
        }
        while (!v158);
        int v159 = v155 | 0xFFFFFFC0;
        if ((v155 & 0x3F) == 0) {
          int v159 = 0;
        }
        if ((v155 - v156 - v159) > 0x40) {
          goto LABEL_188;
        }
        uint64_t v154 = (void *)*v154;
      }
      if (*v154 > 1uLL) {
        goto LABEL_188;
      }
      uint64_t UMaxExpr = llvm::ScalarEvolution::getUMaxExpr(this, v118, (const llvm::SCEV *)v134);
      uint64_t v161 = this;
      uint64_t v162 = (uint64_t)MinusSCEV;
LABEL_233:
      return sub_1CBFD7D6C((uint64_t)v161, UMaxExpr, v162, 0, 0);
    case '""':
    case '#':
    case '&':
    case '\'':
      goto LABEL_3;
    case '$':
    case '%':
    case '(':
    case ')':
      uint64_t v12 = (llvm::Value *)*((void *)a3 - 4);
      uint64_t v11 = *((void *)a3 - 8);
LABEL_3:
      uint64_t v14 = *(void *)v12;
      unsigned int v15 = *(_DWORD *)(*(void *)v12 + 8);
      uint64_t v16 = *(void *)(*(void *)this + 40);
      if (v15 == 15)
      {
        if ((v15 & 0xFE) == 0x12) {
          unsigned int v15 = *(_DWORD *)(**(void **)(v14 + 16) + 8);
        }
        uint64_t v99 = *(void *)(v16 + 504);
        if (v15 < 0x100) {
          goto LABEL_148;
        }
        unsigned int v100 = v15 >> 8;
        unint64_t v101 = *(unsigned int *)(v16 + 512);
        uint64_t v102 = *(void *)(v16 + 504);
        if (v101)
        {
          uint64_t v102 = v99;
          unint64_t v103 = v101;
          do
          {
            unint64_t v104 = v103 >> 1;
            uint64_t v105 = v102 + 16 * (v103 >> 1);
            unsigned int v106 = *(_DWORD *)(v105 + 8);
            uint64_t v107 = v105 + 16;
            v103 += ~(v103 >> 1);
            if (v106 < v100) {
              uint64_t v102 = v107;
            }
            else {
              unint64_t v103 = v104;
            }
          }
          while (v103);
        }
        if (v102 == v99 + 16 * v101 || *(_DWORD *)(v102 + 8) != v100) {
LABEL_148:
        }
          uint64_t v102 = v99;
        unint64_t v18 = *(unsigned int *)(v102 + 12);
      }
      else
      {
        unint64_t v18 = sub_1CB83544C(v16 + 272, v14);
        if (v17 == 1) {
      }
        }
      unsigned int v19 = *a2;
      unsigned int v20 = *((_DWORD *)*a2 + 2);
      uint64_t v21 = *(void *)(*(void *)this + 40);
      if (v20 == 15)
      {
        if ((v20 & 0xFE) == 0x12) {
          unsigned int v20 = *(_DWORD *)(**((void **)v19 + 2) + 8);
        }
        uint64_t v108 = *(void *)(v21 + 504);
        if (v20 < 0x100) {
          goto LABEL_161;
        }
        unsigned int v109 = v20 >> 8;
        unint64_t v110 = *(unsigned int *)(v21 + 512);
        uint64_t v111 = *(void *)(v21 + 504);
        if (v110)
        {
          uint64_t v111 = v108;
          unint64_t v112 = v110;
          do
          {
            unint64_t v113 = v112 >> 1;
            uint64_t v114 = v111 + 16 * (v112 >> 1);
            unsigned int v115 = *(_DWORD *)(v114 + 8);
            uint64_t v116 = v114 + 16;
            v112 += ~(v112 >> 1);
            if (v115 < v109) {
              uint64_t v111 = v116;
            }
            else {
              unint64_t v112 = v113;
            }
          }
          while (v112);
        }
        if (v111 == v108 + 16 * v110 || *(_DWORD *)(v111 + 8) != v109) {
LABEL_161:
        }
          uint64_t v111 = v108;
        unint64_t v23 = *(unsigned int *)(v111 + 12);
      }
      else
      {
        unint64_t v23 = sub_1CB83544C(v21 + 272, (uint64_t)v19);
        if (v22 == 1) {
      }
        }
      if (v18 > v23) {
        goto LABEL_298;
      }
      uint64_t v24 = *((void *)this + 13);
      unsigned int v25 = *((_DWORD *)this + 30);
      if (!v25) {
        goto LABEL_16;
      }
      unsigned int v26 = v25 - 1;
      unsigned int v27 = (v25 - 1) & ((a4 >> 4) ^ (a4 >> 9));
      uint64_t v28 = v24 + 48 * v27;
      unsigned int v29 = *(llvm::Value **)(v28 + 24);
      if (v29 == a4) {
        goto LABEL_17;
      }
      int v30 = 1;
      while (v29 != (llvm::Value *)-4096)
      {
        unsigned int v31 = v27 + v30++;
        unsigned int v27 = v31 & v26;
        uint64_t v28 = v24 + 48 * (v31 & v26);
        unsigned int v29 = *(llvm::Value **)(v28 + 24);
        if (v29 == a4) {
          goto LABEL_17;
        }
      }
LABEL_16:
      uint64_t v28 = v24 + 48 * v25;
LABEL_17:
      __int16 v32 = *((_WORD *)a3 + 9);
      if (v28 == v24 + 48 * v25 || (int v33 = *(const llvm::SCEV **)(v28 + 40)) == 0)
      {
        int v33 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, a4);
        uint64_t v24 = *((void *)this + 13);
        unsigned int v25 = *((_DWORD *)this + 30);
      }
      if (!v25) {
        goto LABEL_26;
      }
      unsigned int v34 = (v25 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v35 = v24 + 48 * v34;
      uint64_t v36 = *(llvm::Value **)(v35 + 24);
      if (v36 != v7)
      {
        int v37 = 1;
        while (v36 != (llvm::Value *)-4096)
        {
          unsigned int v38 = v34 + v37++;
          unsigned int v34 = v38 & (v25 - 1);
          uint64_t v35 = v24 + 48 * v34;
          uint64_t v36 = *(llvm::Value **)(v35 + 24);
          if (v36 == v7) {
            goto LABEL_27;
          }
        }
LABEL_26:
        uint64_t v35 = v24 + 48 * v25;
      }
LABEL_27:
      if (v35 == v24 + 48 * v25 || (int v39 = *(const llvm::SCEV **)(v35 + 40)) == 0)
      {
        int v39 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v7);
        uint64_t v24 = *((void *)this + 13);
        unsigned int v25 = *((_DWORD *)this + 30);
      }
      if (!v25) {
        goto LABEL_36;
      }
      unsigned int v40 = (v25 - 1) & ((v12 >> 4) ^ (v12 >> 9));
      uint64_t v41 = v24 + 48 * v40;
      int8x16_t v42 = *(llvm::Value **)(v41 + 24);
      if (v42 != v12)
      {
        int v43 = 1;
        while (v42 != (llvm::Value *)-4096)
        {
          unsigned int v44 = v40 + v43++;
          unsigned int v40 = v44 & (v25 - 1);
          uint64_t v41 = v24 + 48 * v40;
          int8x16_t v42 = *(llvm::Value **)(v41 + 24);
          if (v42 == v12) {
            goto LABEL_37;
          }
        }
LABEL_36:
        uint64_t v41 = v24 + 48 * v25;
      }
LABEL_37:
      if (v41 == v24 + 48 * v25 || (LosslessPtrToIntExpr = *(const llvm::SCEV **)(v41 + 40)) == 0)
      {
        LosslessPtrToIntExpr = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v12);
        uint64_t v24 = *((void *)this + 13);
        unsigned int v25 = *((_DWORD *)this + 30);
      }
      if (!v25) {
        goto LABEL_46;
      }
      unsigned int v46 = (v25 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      uint64_t v47 = v24 + 48 * v46;
      uint64_t v48 = *(void *)(v47 + 24);
      if (v48 != v11)
      {
        int v49 = 1;
        while (v48 != -4096)
        {
          unsigned int v50 = v46 + v49++;
          unsigned int v46 = v50 & (v25 - 1);
          uint64_t v47 = v24 + 48 * v46;
          uint64_t v48 = *(void *)(v47 + 24);
          if (v48 == v11) {
            goto LABEL_47;
          }
        }
LABEL_46:
        uint64_t v47 = v24 + 48 * v25;
      }
LABEL_47:
      if (v47 == v24 + 48 * v25 || (unint64_t v51 = *(const llvm::SCEV **)(v47 + 40)) == 0) {
        unint64_t v51 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, (llvm::Value *)v11);
      }
      unsigned int v52 = (v32 & 0x3E) - 38;
      uint64_t v53 = v33;
      while (2)
      {
        switch(*((_WORD *)v53 + 12))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            unsigned int v55 = (char *)v53 + 40;
            goto LABEL_70;
          case 4:
            unsigned int v55 = (char *)v53 + 48;
            goto LABEL_70;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            uint64_t v54 = (const llvm::SCEV **)*((void *)v53 + 4);
            goto LABEL_53;
          case 6:
            uint64_t v54 = (const llvm::SCEV **)((char *)v53 + 40);
LABEL_53:
            uint64_t v53 = *v54;
            continue;
          case 0xE:
            unsigned int v55 = (char *)*((void *)v53 - 1);
            goto LABEL_70;
          default:
            unsigned int v55 = (char *)*((void *)v53 + 4);
LABEL_70:
            int v67 = *(unsigned __int8 *)(*(void *)v55 + 8);
            char v68 = LosslessPtrToIntExpr;
            if (v67 != 15) {
              goto LABEL_83;
            }
            if (v33 == LosslessPtrToIntExpr && v39 == v51)
            {
              if (v52 > 3)
              {
                return llvm::ScalarEvolution::getUMaxExpr(this, v33, v39);
              }
              else
              {
                return llvm::ScalarEvolution::getSMaxExpr(this, v33, v39);
              }
            }
            char v68 = LosslessPtrToIntExpr;
            if (v33 != v51 || (char v68 = LosslessPtrToIntExpr, v39 != LosslessPtrToIntExpr))
            {
LABEL_83:
              while (2)
              {
                switch(*((_WORD *)v68 + 12))
                {
                  case 1:
                  case 2:
                  case 3:
                  case 0xD:
                    unint64_t v71 = (char *)v68 + 40;
                    goto LABEL_90;
                  case 4:
                    unint64_t v71 = (char *)v68 + 48;
                    goto LABEL_90;
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                  case 0xA:
                  case 0xB:
                  case 0xC:
                    int v70 = (const llvm::SCEV **)*((void *)v68 + 4);
                    goto LABEL_85;
                  case 6:
                    int v70 = (const llvm::SCEV **)((char *)v68 + 40);
LABEL_85:
                    char v68 = *v70;
                    continue;
                  case 0xE:
                    unint64_t v71 = (char *)*((void *)v68 - 1);
                    goto LABEL_90;
                  default:
                    unint64_t v71 = (char *)*((void *)v68 + 4);
LABEL_90:
                    if (*(unsigned char *)(*(void *)v71 + 8) != 15
                      || (LosslessPtrToIntExpr = llvm::ScalarEvolution::getLosslessPtrToIntExpr(this, LosslessPtrToIntExpr), *((_WORD *)LosslessPtrToIntExpr + 12) != 15))
                    {
                      uint64_t v72 = *a2;
                      if (v52 > 3) {
                        NoopOrSignExtend = llvm::ScalarEvolution::getNoopOrZeroExtend(this, LosslessPtrToIntExpr, v72);
                      }
                      else {
                        NoopOrSignExtend = (const llvm::SCEV *)llvm::ScalarEvolution::getNoopOrSignExtend(this, (llvm::detail::IEEEFloat **)LosslessPtrToIntExpr, v72);
                      }
                      LosslessPtrToIntExpr = NoopOrSignExtend;
                    }
                    unsigned int v74 = v51;
                    while (2)
                    {
                      switch(*((_WORD *)v74 + 12))
                      {
                        case 1:
                        case 2:
                        case 3:
                        case 0xD:
                          unsigned int v76 = (char *)v74 + 40;
                          goto LABEL_104;
                        case 4:
                          unsigned int v76 = (char *)v74 + 48;
                          goto LABEL_104;
                        case 5:
                        case 7:
                        case 8:
                        case 9:
                        case 0xA:
                        case 0xB:
                        case 0xC:
                          uint64_t v75 = (const llvm::SCEV **)*((void *)v74 + 4);
                          goto LABEL_99;
                        case 6:
                          uint64_t v75 = (const llvm::SCEV **)((char *)v74 + 40);
LABEL_99:
                          unsigned int v74 = *v75;
                          continue;
                        case 0xE:
                          unsigned int v76 = (char *)*((void *)v74 - 1);
                          goto LABEL_104;
                        default:
                          unsigned int v76 = (char *)*((void *)v74 + 4);
LABEL_104:
                          if (*(unsigned char *)(*(void *)v76 + 8) != 15
                            || (unint64_t v51 = llvm::ScalarEvolution::getLosslessPtrToIntExpr(this, v51),
                                *((_WORD *)v51 + 12) != 15))
                          {
                            int v77 = *a2;
                            if (v52 > 3) {
                              unsigned int v78 = llvm::ScalarEvolution::getNoopOrZeroExtend(this, v51, v77);
                            }
                            else {
                              unsigned int v78 = (const llvm::SCEV *)llvm::ScalarEvolution::getNoopOrSignExtend(this, (llvm::detail::IEEEFloat **)v51, v77);
                            }
                            unint64_t v51 = v78;
                          }
                          if (*((_WORD *)LosslessPtrToIntExpr + 12) == 15 || *((_WORD *)v51 + 12) == 15) {
                            goto LABEL_298;
                          }
                          unint64_t v79 = llvm::ScalarEvolution::getMinusSCEV(this, v33, LosslessPtrToIntExpr, 0, 0);
                          if (v79 == llvm::ScalarEvolution::getMinusSCEV(this, v39, v51, 0, 0))
                          {
                            if (v52 > 3) {
                              uint64_t SMaxExpr = llvm::ScalarEvolution::getUMaxExpr(this, LosslessPtrToIntExpr, v51);
                            }
                            else {
                              uint64_t SMaxExpr = llvm::ScalarEvolution::getSMaxExpr(this, LosslessPtrToIntExpr, v51);
                            }
                            v222[0] = v223;
                            v223[0] = SMaxExpr;
                            v223[1] = v79;
                            v222[1] = (void *)0x200000002;
                            uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)this, (unint64_t **)v222, 0, 0);
                            if (v222[0] != v223) {
                              free(v222[0]);
                            }
                            return AddExpr;
                          }
                          unint64_t v80 = llvm::ScalarEvolution::getMinusSCEV(this, v33, v51, 0, 0);
                          if (v80 != llvm::ScalarEvolution::getMinusSCEV(this, v39, LosslessPtrToIntExpr, 0, 0)) {
                            goto LABEL_298;
                          }
                          if (v52 > 3) {
                            uint64_t UMinExpr = llvm::ScalarEvolution::getUMinExpr(this, LosslessPtrToIntExpr, v51, 0);
                          }
                          else {
                            uint64_t UMinExpr = llvm::ScalarEvolution::getSMinExpr(this, LosslessPtrToIntExpr, v51);
                          }
                          uint64_t UMaxExpr = UMinExpr;
                          uint64_t v161 = this;
                          uint64_t v162 = v80;
                          break;
                      }
                      break;
                    }
                    break;
                }
                goto LABEL_233;
              }
            }
            if (v52 > 3)
            {
              unsigned int v94 = this;
              NoopOrZeroExtend = v39;
              int64_t v96 = v33;
              int v97 = 0;
              goto LABEL_132;
            }
            unint64_t result = llvm::ScalarEvolution::getSMinExpr(this, v39, v33);
            break;
        }
        return result;
      }
    default:
      goto LABEL_298;
  }
}

unint64_t llvm::ScalarEvolution::createNodeForSelectOrPHIViaUMinSeq(llvm::ScalarEvolution *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, llvm::Value *a5)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(*(void *)a2 + 8) != 269
    || *(_DWORD *)(*(void *)a3 + 8) != 269
    || *(_DWORD *)(*(void *)a4 + 8) != 269
    || *(_DWORD *)(*(void *)a5 + 8) != 269
    || *((unsigned char *)a4 + 16) != 16 && *((unsigned char *)a5 + 16) != 16)
  {
    return llvm::ScalarEvolution::getUnknown(this, a2);
  }
  uint64_t v9 = *((void *)this + 13);
  unsigned int v10 = *((_DWORD *)this + 30);
  if (!v10) {
    goto LABEL_16;
  }
  unsigned int v11 = (v10 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v12 = v9 + 48 * v11;
  __int16 v13 = *(llvm::Value **)(v12 + 24);
  if (v13 != a3)
  {
    int v14 = 1;
    while (v13 != (llvm::Value *)-4096)
    {
      unsigned int v15 = v11 + v14++;
      unsigned int v11 = v15 & (v10 - 1);
      uint64_t v12 = v9 + 48 * v11;
      __int16 v13 = *(llvm::Value **)(v12 + 24);
      if (v13 == a3) {
        goto LABEL_17;
      }
    }
LABEL_16:
    uint64_t v12 = v9 + 48 * v10;
  }
LABEL_17:
  if (v12 == v9 + 48 * v10 || (uint64_t SCEVIter = *(const llvm::SCEV **)(v12 + 40)) == 0)
  {
    uint64_t SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, a3);
    uint64_t v9 = *((void *)this + 13);
    unsigned int v10 = *((_DWORD *)this + 30);
  }
  if (!v10)
  {
LABEL_25:
    uint64_t v18 = v9 + 48 * v10;
    goto LABEL_26;
  }
  unsigned int v17 = (v10 - 1) & ((a4 >> 4) ^ (a4 >> 9));
  uint64_t v18 = v9 + 48 * v17;
  unsigned int v19 = *(llvm::Value **)(v18 + 24);
  if (v19 != a4)
  {
    int v20 = 1;
    while (v19 != (llvm::Value *)-4096)
    {
      unsigned int v21 = v17 + v20++;
      unsigned int v17 = v21 & (v10 - 1);
      uint64_t v18 = v9 + 48 * v17;
      unsigned int v19 = *(llvm::Value **)(v18 + 24);
      if (v19 == a4) {
        goto LABEL_26;
      }
    }
    goto LABEL_25;
  }
LABEL_26:
  if (v18 == v9 + 48 * v10 || (uint64_t v22 = *(const llvm::APInt **)(v18 + 40)) == 0)
  {
    uint64_t v22 = (const llvm::APInt *)llvm::ScalarEvolution::createSCEVIter(this, a4);
    uint64_t v9 = *((void *)this + 13);
    unsigned int v10 = *((_DWORD *)this + 30);
  }
  if (v10)
  {
    unsigned int v23 = (v10 - 1) & ((a5 >> 4) ^ (a5 >> 9));
    uint64_t v24 = v9 + 48 * v23;
    unsigned int v25 = *(llvm::Value **)(v24 + 24);
    if (v25 == a5) {
      goto LABEL_35;
    }
    int v26 = 1;
    while (v25 != (llvm::Value *)-4096)
    {
      unsigned int v27 = v23 + v26++;
      unsigned int v23 = v27 & (v10 - 1);
      uint64_t v24 = v9 + 48 * v23;
      unsigned int v25 = *(llvm::Value **)(v24 + 24);
      if (v25 == a5) {
        goto LABEL_35;
      }
    }
  }
  uint64_t v24 = v9 + 48 * v10;
LABEL_35:
  if (v24 == v9 + 48 * v10 || (uint64_t v28 = *(void *)(v24 + 40)) == 0) {
    uint64_t v28 = llvm::ScalarEvolution::createSCEVIter(this, a5);
  }
  if (*((unsigned char *)a4 + 16) == 16)
  {
    uint64_t SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::getNotSCEV(this, SCEVIter, a3);
    unsigned int v29 = (llvm::SCEV *)v28;
  }
  else
  {
    unsigned int v29 = v22;
    uint64_t v22 = (const llvm::APInt *)v28;
  }
  __int16 v32 = &v34;
  unsigned int v34 = SCEVIter;
  unint64_t MinusSCEV = llvm::ScalarEvolution::getMinusSCEV(this, v29, v22, 0, 0);
  uint64_t v33 = 0x200000002;
  Sequentialunint64_t MinMaxExpr = llvm::ScalarEvolution::getSequentialMinMaxExpr((uint64_t)this, 12, (unsigned int *)&v32);
  if (v32 != &v34) {
    free(v32);
  }
  __int16 v32 = &v34;
  unsigned int v34 = v22;
  unint64_t MinusSCEV = SequentialMinMaxExpr;
  uint64_t v33 = 0x200000002;
  uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)this, (unint64_t **)&v32, 0, 0);
  if (v32 != &v34) {
    free(v32);
  }
  return AddExpr;
}

unint64_t llvm::ScalarEvolution::createNodeForGEP(llvm::ScalarEvolution *this, llvm::GEPOperator *a2)
{
  v29[4] = *MEMORY[0x1E4F143B8];
  BOOL v4 = *((unsigned char *)a2 + 16) != 62 || a2 == 0;
  uint64_t v5 = 64;
  if (v4) {
    uint64_t v5 = 24;
  }
  uint64_t v6 = *(void *)((char *)a2 + v5);
  unsigned int v7 = *(unsigned __int8 *)(v6 + 8);
  if (v7 - 16 >= 2)
  {
    if (v7 <= 0xF && ((1 << v7) & 0xAC7F) != 0) {
      goto LABEL_8;
    }
    if ((v7 & 0xFE) != 0x12 && v7 != 21) {
      goto LABEL_37;
    }
  }
  if ((llvm::Type::isSizedDerivedType(v6, 0) & 1) == 0)
  {
LABEL_37:
    return llvm::ScalarEvolution::getUnknown(this, a2);
  }
LABEL_8:
  unsigned int v27 = v29;
  uint64_t v28 = 0x400000000;
  int v8 = *((_DWORD *)a2 + 5);
  if ((v8 & 0x40000000) != 0)
  {
    unsigned int v10 = (char *)*((void *)a2 - 1);
    uint64_t v9 = v8 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v9 = v8 & 0x7FFFFFF;
    unsigned int v10 = (char *)a2 - 32 * v9;
  }
  if (v9 != 1)
  {
    unsigned int v11 = 0;
    uint64_t v12 = (llvm::Value **)(v10 + 32);
    __int16 v13 = (llvm::Value **)&v10[32 * v9];
    do
    {
      int v14 = *v12;
      uint64_t v15 = *((void *)this + 13);
      unsigned int v16 = *((_DWORD *)this + 30);
      if (v16)
      {
        unsigned int v17 = ((v14 >> 4) ^ (v14 >> 9)) & (v16 - 1);
        uint64_t v18 = v15 + 48 * v17;
        unsigned int v19 = *(llvm::Value **)(v18 + 24);
        if (v19 == v14) {
          goto LABEL_19;
        }
        int v20 = 1;
        while (v19 != (llvm::Value *)-4096)
        {
          unsigned int v21 = v17 + v20++;
          unsigned int v17 = v21 & (v16 - 1);
          uint64_t v18 = v15 + 48 * v17;
          unsigned int v19 = *(llvm::Value **)(v18 + 24);
          if (v19 == v14) {
            goto LABEL_19;
          }
        }
      }
      uint64_t v18 = v15 + 48 * v16;
LABEL_19:
      if (v18 == v15 + 48 * v16 || (uint64_t SCEVIter = *(void *)(v18 + 40)) == 0)
      {
        uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter(this, v14);
        unsigned int v11 = v28;
      }
      if (v11 >= HIDWORD(v28)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v27 + v11) = SCEVIter;
      unsigned int v11 = v28 + 1;
      LODWORD(v28) = v28 + 1;
      v12 += 4;
    }
    while (v12 != v13);
  }
  uint64_t GEPExpr = llvm::ScalarEvolution::getGEPExpr((uint64_t)this, (uint64_t)a2, (uint64_t)&v27);
  if (v27 != v29) {
    free(v27);
  }
  return GEPExpr;
}

uint64_t llvm::ScalarEvolution::GetMinTrailingZerosImpl(const llvm::DataLayout **this, const llvm::SCEV *a2)
{
  int v4 = *((unsigned __int16 *)a2 + 12);
  if (a2 && !*((_WORD *)a2 + 12))
  {
    uint64_t v5 = *((void *)a2 + 4);
    uint64_t v6 = (unint64_t **)(v5 + 24);
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v7 > 0x40)
    {
      return llvm::APInt::countTrailingZerosSlowCase(v6);
    }
    else
    {
      unsigned int v8 = __clz(__rbit64((unint64_t)*v6));
      if (v7 >= v8) {
        return v8;
      }
      else {
        return v7;
      }
    }
  }
  if (a2 && v4 == 13)
  {
    unsigned int v10 = (const llvm::SCEV *)*((void *)a2 + 4);
    return llvm::ScalarEvolution::GetMinTrailingZeros((llvm::ScalarEvolution *)this, v10);
  }
  if (!a2 || v4 != 1)
  {
    if (a2 && v4 == 2)
    {
      unsigned int v17 = (char *)a2 + 32;
      uint64_t MinTrailingZeros = llvm::ScalarEvolution::GetMinTrailingZeros((llvm::ScalarEvolution *)this, *((const llvm::SCEV **)a2 + 4));
      while (2)
      {
        uint64_t v19 = *(void *)v17;
        switch(*(_WORD *)(*(void *)v17 + 24))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            unsigned int v27 = (uint64_t *)(v19 + 40);
            break;
          case 4:
            unsigned int v27 = (uint64_t *)(v19 + 48);
            break;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            unsigned int v17 = *(char **)(v19 + 32);
            continue;
          case 6:
            unsigned int v17 = (char *)(v19 + 40);
            continue;
          case 0xE:
            unsigned int v27 = *(uint64_t **)(v19 - 8);
            break;
          default:
            unsigned int v27 = *(uint64_t **)(v19 + 32);
            break;
        }
        break;
      }
      uint64_t v30 = *v27;
      unsigned int v31 = *(_DWORD *)(*v27 + 8);
      uint64_t v32 = *((void *)*this + 5);
      if (v31 == 15)
      {
        if ((v31 & 0xFE) == 0x12) {
          unsigned int v31 = *(_DWORD *)(**(void **)(v30 + 16) + 8);
        }
        uint64_t v84 = *(void *)(v32 + 504);
        if (v31 < 0x100) {
          goto LABEL_162;
        }
        unsigned int v85 = v31 >> 8;
        unint64_t v86 = *(unsigned int *)(v32 + 512);
        uint64_t v87 = *(void *)(v32 + 504);
        if (v86)
        {
          uint64_t v87 = v84;
          unint64_t v88 = v86;
          do
          {
            unint64_t v89 = v88 >> 1;
            uint64_t v90 = v87 + 16 * (v88 >> 1);
            unsigned int v91 = *(_DWORD *)(v90 + 8);
            uint64_t v92 = v90 + 16;
            v88 += ~(v88 >> 1);
            if (v91 < v85) {
              uint64_t v87 = v92;
            }
            else {
              unint64_t v88 = v89;
            }
          }
          while (v88);
        }
        if (v87 == v84 + 16 * v86 || *(_DWORD *)(v87 + 8) != v85) {
LABEL_162:
        }
          uint64_t v87 = v84;
        uint64_t v34 = *(unsigned int *)(v87 + 12);
      }
      else
      {
        uint64_t v34 = sub_1CB83544C(v32 + 272, v30);
        if (v33 == 1) {
      }
        }
      if (v34 != MinTrailingZeros) {
        return MinTrailingZeros;
      }
      uint64_t v35 = *((void *)a2 + 5);
      unsigned int v36 = *(_DWORD *)(v35 + 8);
      uint64_t v37 = *((void *)*this + 5);
      if (v36 != 15)
      {
        uint64_t MinTrailingZeros = sub_1CB83544C(v37 + 272, v35);
        if (v38 == 1) {
LABEL_64:
        }
        return MinTrailingZeros;
      }
      if ((v36 & 0xFE) == 0x12) {
        unsigned int v36 = *(_DWORD *)(**(void **)(v35 + 16) + 8);
      }
      uint64_t v107 = *(void *)(v37 + 504);
      if (v36 >= 0x100)
      {
        unsigned int v108 = v36 >> 8;
        unint64_t v109 = *(unsigned int *)(v37 + 512);
        uint64_t v110 = *(void *)(v37 + 504);
        if (v109)
        {
          uint64_t v110 = v107;
          unint64_t v111 = v109;
          do
          {
            unint64_t v112 = v111 >> 1;
            uint64_t v113 = v110 + 16 * (v111 >> 1);
            unsigned int v114 = *(_DWORD *)(v113 + 8);
            uint64_t v115 = v113 + 16;
            v111 += ~(v111 >> 1);
            if (v114 < v108) {
              uint64_t v110 = v115;
            }
            else {
              unint64_t v111 = v112;
            }
          }
          while (v111);
        }
        goto LABEL_205;
      }
    }
    else
    {
      if (!a2 || v4 != 3)
      {
        if (a2 && v4 == 4)
        {
          uint64_t MinTrailingZeros = llvm::ScalarEvolution::GetMinTrailingZeros((llvm::ScalarEvolution *)this, **((const llvm::SCEV ***)a2 + 4));
          if (MinTrailingZeros)
          {
            int v22 = *((_DWORD *)a2 + 10);
            if (v22 != 1)
            {
              uint64_t v23 = 0;
              int v24 = v22 - 2;
              do
              {
                unsigned int v25 = llvm::ScalarEvolution::GetMinTrailingZeros((llvm::ScalarEvolution *)this, *(const llvm::SCEV **)(*((void *)a2 + 4) + 8 * v23 + 8));
                if (v25 >= MinTrailingZeros) {
                  uint64_t MinTrailingZeros = MinTrailingZeros;
                }
                else {
                  uint64_t MinTrailingZeros = v25;
                }
                if (MinTrailingZeros) {
                  BOOL v26 = v24 == v23;
                }
                else {
                  BOOL v26 = 1;
                }
                ++v23;
              }
              while (!v26);
            }
          }
        }
        else if (a2 && v4 == 5)
        {
          uint64_t MinTrailingZeros = llvm::ScalarEvolution::GetMinTrailingZeros((llvm::ScalarEvolution *)this, **((const llvm::SCEV ***)a2 + 4));
          uint64_t v28 = (uint64_t *)*((void *)a2 + 4);
          while (2)
          {
            uint64_t v29 = *v28;
            switch(*(_WORD *)(v29 + 24))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                uint64_t v58 = (uint64_t *)(v29 + 40);
                break;
              case 4:
                uint64_t v58 = (uint64_t *)(v29 + 48);
                break;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                uint64_t v28 = *(uint64_t **)(v29 + 32);
                continue;
              case 6:
                uint64_t v28 = (uint64_t *)(v29 + 40);
                continue;
              case 0xE:
                uint64_t v58 = *(uint64_t **)(v29 - 8);
                break;
              default:
                uint64_t v58 = *(uint64_t **)(v29 + 32);
                break;
            }
            break;
          }
          uint64_t v73 = *v58;
          unsigned int v74 = *(_DWORD *)(*v58 + 8);
          uint64_t v75 = *((void *)*this + 5);
          if (v74 == 15)
          {
            if ((v74 & 0xFE) == 0x12) {
              unsigned int v74 = *(_DWORD *)(**(void **)(v73 + 16) + 8);
            }
            uint64_t v121 = *(void *)(v75 + 504);
            if (v74 < 0x100) {
              goto LABEL_226;
            }
            unsigned int v122 = v74 >> 8;
            unint64_t v123 = *(unsigned int *)(v75 + 512);
            uint64_t v124 = *(void *)(v75 + 504);
            if (v123)
            {
              uint64_t v124 = v121;
              unint64_t v125 = v123;
              do
              {
                unint64_t v126 = v125 >> 1;
                uint64_t v127 = v124 + 16 * (v125 >> 1);
                unsigned int v128 = *(_DWORD *)(v127 + 8);
                uint64_t v129 = v127 + 16;
                v125 += ~(v125 >> 1);
                if (v128 < v122) {
                  uint64_t v124 = v129;
                }
                else {
                  unint64_t v125 = v126;
                }
              }
              while (v125);
            }
            if (v124 == v121 + 16 * v123 || *(_DWORD *)(v124 + 8) != v122) {
LABEL_226:
            }
              uint64_t v124 = v121;
            unsigned int v77 = *(_DWORD *)(v124 + 12);
          }
          else
          {
            unsigned int v77 = sub_1CB83544C(v75 + 272, v73);
            if (v76 == 1) {
          }
            }
          int v78 = *((_DWORD *)a2 + 10);
          if (MinTrailingZeros != v77 && v78 != 1)
          {
            uint64_t v80 = 0;
            int v81 = v78 - 2;
            do
            {
              unsigned int v82 = llvm::ScalarEvolution::GetMinTrailingZeros((llvm::ScalarEvolution *)this, *(const llvm::SCEV **)(*((void *)a2 + 4) + 8 * v80 + 8))+ MinTrailingZeros;
              if (v82 >= v77) {
                uint64_t MinTrailingZeros = v77;
              }
              else {
                uint64_t MinTrailingZeros = v82;
              }
            }
            while (v77 > v82 && v81 != v80++);
          }
        }
        else if (a2 && v4 == 7)
        {
          uint64_t MinTrailingZeros = llvm::ScalarEvolution::GetMinTrailingZeros((llvm::ScalarEvolution *)this, **((const llvm::SCEV ***)a2 + 4));
          if (MinTrailingZeros)
          {
            int v40 = *((_DWORD *)a2 + 10);
            if (v40 != 1)
            {
              uint64_t v41 = 0;
              int v42 = v40 - 2;
              do
              {
                unsigned int v43 = llvm::ScalarEvolution::GetMinTrailingZeros((llvm::ScalarEvolution *)this, *(const llvm::SCEV **)(*((void *)a2 + 4) + 8 * v41 + 8));
                if (v43 >= MinTrailingZeros) {
                  uint64_t MinTrailingZeros = MinTrailingZeros;
                }
                else {
                  uint64_t MinTrailingZeros = v43;
                }
                if (MinTrailingZeros) {
                  BOOL v44 = v42 == v41;
                }
                else {
                  BOOL v44 = 1;
                }
                ++v41;
              }
              while (!v44);
            }
          }
        }
        else if (a2 && v4 == 9)
        {
          uint64_t MinTrailingZeros = llvm::ScalarEvolution::GetMinTrailingZeros((llvm::ScalarEvolution *)this, **((const llvm::SCEV ***)a2 + 4));
          if (MinTrailingZeros)
          {
            int v53 = *((_DWORD *)a2 + 10);
            if (v53 != 1)
            {
              uint64_t v54 = 0;
              int v55 = v53 - 2;
              do
              {
                unsigned int v56 = llvm::ScalarEvolution::GetMinTrailingZeros((llvm::ScalarEvolution *)this, *(const llvm::SCEV **)(*((void *)a2 + 4) + 8 * v54 + 8));
                if (v56 >= MinTrailingZeros) {
                  uint64_t MinTrailingZeros = MinTrailingZeros;
                }
                else {
                  uint64_t MinTrailingZeros = v56;
                }
                if (MinTrailingZeros) {
                  BOOL v57 = v55 == v54;
                }
                else {
                  BOOL v57 = 1;
                }
                ++v54;
              }
              while (!v57);
            }
          }
        }
        else if (a2 && v4 == 8)
        {
          uint64_t MinTrailingZeros = llvm::ScalarEvolution::GetMinTrailingZeros((llvm::ScalarEvolution *)this, **((const llvm::SCEV ***)a2 + 4));
          if (MinTrailingZeros)
          {
            int v68 = *((_DWORD *)a2 + 10);
            if (v68 != 1)
            {
              uint64_t v69 = 0;
              int v70 = v68 - 2;
              do
              {
                unsigned int v71 = llvm::ScalarEvolution::GetMinTrailingZeros((llvm::ScalarEvolution *)this, *(const llvm::SCEV **)(*((void *)a2 + 4) + 8 * v69 + 8));
                if (v71 >= MinTrailingZeros) {
                  uint64_t MinTrailingZeros = MinTrailingZeros;
                }
                else {
                  uint64_t MinTrailingZeros = v71;
                }
                if (MinTrailingZeros) {
                  BOOL v72 = v70 == v69;
                }
                else {
                  BOOL v72 = 1;
                }
                ++v69;
              }
              while (!v72);
            }
          }
        }
        else
        {
          uint64_t MinTrailingZeros = 0;
          if (a2 && v4 == 14)
          {
            uint64_t v93 = *((void *)a2 - 1);
            int v95 = this[3];
            unsigned int v94 = this[4];
            if (!v93
              || *(unsigned __int8 *)(v93 + 16) < 0x1Cu
              || (int64_t v96 = (const llvm::DataLayout *)*((void *)a2 - 1), !*(void *)(v93 + 40)))
            {
              int64_t v96 = 0;
            }
            v134[0] = (const llvm::DataLayout *)(*((void *)*this + 5) + 272);
            v134[1] = v95;
            v134[2] = v96;
            v134[3] = v94;
            v134[4] = 0;
            char v135 = 1;
            sub_1CC16089C((uint64_t *)v93, 0, v134, (uint64_t)&v130);
            unsigned int v97 = v131;
            if (v131 > 0x40) {
              uint64_t MinTrailingZeros = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v130);
            }
            else {
              uint64_t MinTrailingZeros = __clz(__rbit64(~v130));
            }
            if (v133 >= 0x41 && v132)
            {
              MEMORY[0x1D25D9CB0](v132, 0x1000C8000313F17);
              unsigned int v97 = v131;
            }
            if (v97 >= 0x41 && v130) {
              MEMORY[0x1D25D9CB0](v130, 0x1000C8000313F17);
            }
          }
        }
        return MinTrailingZeros;
      }
      int v20 = (char *)a2 + 32;
      uint64_t MinTrailingZeros = llvm::ScalarEvolution::GetMinTrailingZeros((llvm::ScalarEvolution *)this, *((const llvm::SCEV **)a2 + 4));
      while (2)
      {
        uint64_t v21 = *(void *)v20;
        switch(*(_WORD *)(*(void *)v20 + 24))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            int v39 = (uint64_t *)(v21 + 40);
            break;
          case 4:
            int v39 = (uint64_t *)(v21 + 48);
            break;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            int v20 = *(char **)(v21 + 32);
            continue;
          case 6:
            int v20 = (char *)(v21 + 40);
            continue;
          case 0xE:
            int v39 = *(uint64_t **)(v21 - 8);
            break;
          default:
            int v39 = *(uint64_t **)(v21 + 32);
            break;
        }
        break;
      }
      uint64_t v45 = *v39;
      unsigned int v46 = *(_DWORD *)(*v39 + 8);
      uint64_t v47 = *((void *)*this + 5);
      if (v46 == 15)
      {
        if ((v46 & 0xFE) == 0x12) {
          unsigned int v46 = *(_DWORD *)(**(void **)(v45 + 16) + 8);
        }
        uint64_t v98 = *(void *)(v47 + 504);
        if (v46 < 0x100) {
          goto LABEL_184;
        }
        unsigned int v99 = v46 >> 8;
        unint64_t v100 = *(unsigned int *)(v47 + 512);
        uint64_t v101 = *(void *)(v47 + 504);
        if (v100)
        {
          uint64_t v101 = v98;
          unint64_t v102 = v100;
          do
          {
            unint64_t v103 = v102 >> 1;
            uint64_t v104 = v101 + 16 * (v102 >> 1);
            unsigned int v105 = *(_DWORD *)(v104 + 8);
            uint64_t v106 = v104 + 16;
            v102 += ~(v102 >> 1);
            if (v105 < v99) {
              uint64_t v101 = v106;
            }
            else {
              unint64_t v102 = v103;
            }
          }
          while (v102);
        }
        if (v101 == v98 + 16 * v100 || *(_DWORD *)(v101 + 8) != v99) {
LABEL_184:
        }
          uint64_t v101 = v98;
        uint64_t v49 = *(unsigned int *)(v101 + 12);
      }
      else
      {
        uint64_t v49 = sub_1CB83544C(v47 + 272, v45);
        if (v48 == 1) {
      }
        }
      if (v49 != MinTrailingZeros) {
        return MinTrailingZeros;
      }
      uint64_t v50 = *((void *)a2 + 5);
      unsigned int v51 = *(_DWORD *)(v50 + 8);
      uint64_t v52 = *((void *)*this + 5);
      if (v51 != 15)
      {
        uint64_t MinTrailingZeros = sub_1CB83544C(v52 + 272, v50);
        if (v38 != 1) {
          return MinTrailingZeros;
        }
        goto LABEL_64;
      }
      if ((v51 & 0xFE) == 0x12) {
        unsigned int v51 = *(_DWORD *)(**(void **)(v50 + 16) + 8);
      }
      uint64_t v107 = *(void *)(v52 + 504);
      if (v51 >= 0x100)
      {
        unsigned int v108 = v51 >> 8;
        unint64_t v109 = *(unsigned int *)(v52 + 512);
        uint64_t v110 = *(void *)(v52 + 504);
        if (v109)
        {
          uint64_t v110 = v107;
          unint64_t v116 = v109;
          do
          {
            unint64_t v117 = v116 >> 1;
            uint64_t v118 = v110 + 16 * (v116 >> 1);
            unsigned int v119 = *(_DWORD *)(v118 + 8);
            uint64_t v120 = v118 + 16;
            v116 += ~(v116 >> 1);
            if (v119 < v108) {
              uint64_t v110 = v120;
            }
            else {
              unint64_t v116 = v117;
            }
          }
          while (v116);
        }
LABEL_205:
        if (v110 != v107 + 16 * v109 && *(_DWORD *)(v110 + 8) == v108) {
          return *(unsigned int *)(v110 + 12);
        }
      }
    }
    uint64_t v110 = v107;
    return *(unsigned int *)(v110 + 12);
  }
  unsigned int v11 = llvm::ScalarEvolution::GetMinTrailingZeros((llvm::ScalarEvolution *)this, *((const llvm::SCEV **)a2 + 4));
  uint64_t v12 = *((void *)a2 + 5);
  unsigned int v13 = *(_DWORD *)(v12 + 8);
  uint64_t v14 = *((void *)*this + 5);
  if (v13 == 15)
  {
    if ((v13 & 0xFE) == 0x12) {
      unsigned int v13 = *(_DWORD *)(**(void **)(v12 + 16) + 8);
    }
    uint64_t v59 = *(void *)(v14 + 504);
    if (v13 < 0x100) {
      goto LABEL_115;
    }
    unsigned int v60 = v13 >> 8;
    unint64_t v61 = *(unsigned int *)(v14 + 512);
    uint64_t v62 = *(void *)(v14 + 504);
    if (v61)
    {
      uint64_t v62 = v59;
      unint64_t v63 = v61;
      do
      {
        unint64_t v64 = v63 >> 1;
        uint64_t v65 = v62 + 16 * (v63 >> 1);
        unsigned int v66 = *(_DWORD *)(v65 + 8);
        uint64_t v67 = v65 + 16;
        v63 += ~(v63 >> 1);
        if (v66 < v60) {
          uint64_t v62 = v67;
        }
        else {
          unint64_t v63 = v64;
        }
      }
      while (v63);
    }
    if (v62 == v59 + 16 * v61 || *(_DWORD *)(v62 + 8) != v60) {
LABEL_115:
    }
      uint64_t v62 = v59;
    unsigned int v16 = *(_DWORD *)(v62 + 12);
  }
  else
  {
    unsigned int v16 = sub_1CB83544C(v14 + 272, v12);
    if (v15 == 1) {
  }
    }
  if (v11 >= v16) {
    return v16;
  }
  else {
    return v11;
  }
}

uint64_t llvm::ScalarEvolution::getRangeForUnknownRecurrence@<X0>(uint64_t this@<X0>, const llvm::SCEVUnknown *a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = (llvm::ScalarEvolution *)this;
  uint64_t v6 = *(void *)(*(void *)this + 40);
  unsigned int v7 = (const llvm::DataLayout *)(v6 + 272);
  uint64_t v8 = **((void **)a2 + 3);
  unsigned int v9 = *(_DWORD *)(v8 + 8);
  if (v9 == 15)
  {
    if ((v9 & 0xFE) == 0x12) {
      unsigned int v9 = *(_DWORD *)(**(void **)(v8 + 16) + 8);
    }
    uint64_t v53 = *(void *)(v6 + 504);
    if (v9 < 0x100) {
      goto LABEL_68;
    }
    unsigned int v54 = v9 >> 8;
    unint64_t v55 = *(unsigned int *)(v6 + 512);
    uint64_t v56 = *(void *)(v6 + 504);
    if (v55)
    {
      uint64_t v56 = v53;
      unint64_t v57 = v55;
      do
      {
        unint64_t v58 = v57 >> 1;
        uint64_t v59 = v56 + 16 * (v57 >> 1);
        unsigned int v60 = *(_DWORD *)(v59 + 8);
        uint64_t v61 = v59 + 16;
        v57 += ~(v57 >> 1);
        if (v60 < v54) {
          uint64_t v56 = v61;
        }
        else {
          unint64_t v57 = v58;
        }
      }
      while (v57);
    }
    if (v56 == v53 + 16 * v55 || *(_DWORD *)(v56 + 8) != v54) {
LABEL_68:
    }
      uint64_t v56 = v53;
    unsigned int v11 = *(_DWORD *)(v56 + 12);
  }
  else
  {
    this = sub_1CB83544C(v6 + 272, v8);
    unsigned int v11 = this;
    if (v10 == 1) {
  }
    }
  unsigned int v137 = v11;
  if (v11 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v136);
  }
  unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
  if (!v11) {
    unint64_t v12 = 0;
  }
  uint64_t v136 = v12;
  unsigned int v139 = v11;
  unsigned int v13 = v11;
  unint64_t v14 = v12;
  unint64_t v15 = v12;
  uint64_t v138 = v12;
  uint64_t v16 = *((void *)a2 + 3);
  if (!v16 || *(unsigned char *)(v16 + 16) != 83) {
    goto LABEL_84;
  }
  for (uint64_t i = *(void *)(*(void *)(v16 + 40) + 8); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v18 = *(void *)(i + 24);
    unsigned int v19 = *(unsigned __int8 *)(v18 + 16);
    if (v18) {
      BOOL v20 = v19 >= 0x1C;
    }
    else {
      BOOL v20 = 0;
    }
    if (v20 && v19 - 29 < 0xB) {
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
    }
  }
  unint64_t v134 = 0;
  uint64_t v135 = 0;
  unsigned int v133 = 0;
  this = llvm::matchSimpleRecurrence(v16, &v135, &v134, &v133);
  if ((this & 1) == 0) {
    goto LABEL_84;
  }
  int v22 = (uint64_t *)*((void *)v4 + 5);
  int v23 = *((_DWORD *)v22 + 4);
  if (v23)
  {
    uint64_t v24 = *(void *)(v16 + 40);
    uint64_t v25 = *v22;
    unsigned int v26 = v23 - 1;
    uint64_t v27 = ((v24 >> 4) ^ (v24 >> 9)) & (v23 - 1);
    uint64_t v28 = *(void *)(v25 + 16 * v27);
    if (v24 == v28)
    {
LABEL_25:
      uint64_t v31 = *(void *)(v25 + 16 * v27 + 8);
      goto LABEL_27;
    }
    int v29 = 1;
    while (v28 != -4096)
    {
      int v30 = v27 + v29++;
      uint64_t v27 = v30 & v26;
      uint64_t v28 = *(void *)(v25 + 16 * v27);
      if (v24 == v28) {
        goto LABEL_25;
      }
    }
  }
  uint64_t v31 = 0;
LABEL_27:
  uint64_t v32 = v135;
  uint64_t v33 = *(void *)(v135 + 40);
  uint64_t v35 = *(void *)(v31 + 56);
  uint64_t v34 = *(void *)(v31 + 64);
  if (v34 == v35)
  {
    uint64_t v36 = *(unsigned int *)(v31 + 76);
    uint64_t v37 = (void *)(v34 + 8 * v36);
    if (v36)
    {
      uint64_t v38 = 0;
      uint64_t v39 = 8 * v36;
      while (*(void *)(v34 + v38) != v33)
      {
        v38 += 8;
        if (v39 == v38) {
          goto LABEL_45;
        }
      }
      uint64_t v37 = (void *)(v34 + v38);
    }
LABEL_45:
    uint64_t v35 = *(void *)(v31 + 64);
  }
  else
  {
    uint64_t v40 = *(unsigned int *)(v31 + 72);
    unsigned int v41 = v40 - 1;
    unsigned int v42 = (v40 - 1) & ((v33 >> 4) ^ (v33 >> 9));
    uint64_t v37 = (void *)(v34 + 8 * v42);
    uint64_t v43 = *v37;
    if (*v37 == -1)
    {
      BOOL v44 = 0;
LABEL_71:
      if (v44) {
        uint64_t v37 = v44;
      }
      if (*v37 != v33) {
        uint64_t v37 = (void *)(v34 + 8 * v40);
      }
    }
    else
    {
      BOOL v44 = 0;
      this = 1;
      while (v43 != v33)
      {
        if (v44) {
          BOOL v45 = 0;
        }
        else {
          BOOL v45 = v43 == -2;
        }
        if (v45) {
          BOOL v44 = v37;
        }
        int v46 = v42 + this;
        this = (this + 1);
        unsigned int v42 = v46 & v41;
        uint64_t v37 = (void *)(v34 + 8 * (v46 & v41));
        uint64_t v43 = *v37;
        if (*v37 == -1) {
          goto LABEL_71;
        }
      }
    }
  }
  BOOL v45 = v34 == v35;
  uint64_t v47 = 72;
  if (v45) {
    uint64_t v47 = 76;
  }
  if (v37 == (void *)(v34 + 8 * *(unsigned int *)(v31 + v47))
    || *(unsigned __int8 *)(v135 + 16) - 53 >= 3
    || *(void *)(v135 - 64) != v16)
  {
    goto LABEL_84;
  }
  uint64_t BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(v4, (const llvm::Loop *)v31);
  uint64_t v49 = BackedgeTakenInfo[13];
  if (v49)
  {
    unsigned int v50 = *((_DWORD *)BackedgeTakenInfo + 2);
    if (!v50) {
      goto LABEL_76;
    }
    unsigned int v51 = (_DWORD *)((char *)*BackedgeTakenInfo + 48);
    uint64_t v52 = 88 * v50;
    while (*(v51 - 1) == *v51)
    {
      v51 += 22;
      v52 -= 88;
      if (!v52) {
        goto LABEL_76;
      }
    }
  }
  uint64_t v49 = (const llvm::Loop *)*((void *)v4 + 6);
LABEL_76:
  if (*((_WORD *)v49 + 12)) {
    uint64_t v62 = 0;
  }
  else {
    uint64_t v62 = (uint64_t)v49;
  }
  this = sub_1CC10ADDC(v62);
  if (this) {
    BOOL v63 = this >= v11;
  }
  else {
    BOOL v63 = 1;
  }
  if (v63)
  {
LABEL_84:
    *(_DWORD *)(a3 + 8) = v11;
    *(void *)a3 = v14;
    *(_DWORD *)(a3 + 24) = v11;
    *(void *)(a3 + 16) = v15;
    goto LABEL_85;
  }
  int v64 = this;
  uint64_t v66 = *((void *)v4 + 3);
  uint64_t v65 = *((void *)v4 + 4);
  if (!v134 || *((unsigned __int8 *)v134 + 16) < 0x1Cu || (uint64_t v67 = v134, !v134[5])) {
    uint64_t v67 = 0;
  }
  unint64_t v141 = (unint64_t)v7;
  uint64_t v142 = v66;
  uint64_t v143 = (uint64_t)v67;
  uint64_t v144 = v65;
  uint64_t v145 = 0;
  char v146 = 1;
  sub_1CC16089C(v134, 0, (const llvm::DataLayout **)&v141, (uint64_t)&v129);
  uint64_t v69 = *((void *)v4 + 3);
  uint64_t v68 = *((void *)v4 + 4);
  if (!v133 || *((unsigned __int8 *)v133 + 16) < 0x1Cu || (int v70 = v133, !v133[5])) {
    int v70 = 0;
  }
  unint64_t v141 = (unint64_t)v7;
  uint64_t v142 = v69;
  uint64_t v143 = (uint64_t)v70;
  uint64_t v144 = v68;
  uint64_t v145 = 0;
  char v146 = 1;
  sub_1CC16089C(v133, 0, (const llvm::DataLayout **)&v141, (uint64_t)&__src);
  LODWORD(v142) = v126;
  if (v126 > 0x40) {
    operator new[]();
  }
  if (v126) {
    unint64_t v71 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v126;
  }
  else {
    unint64_t v71 = 0;
  }
  unsigned int v124 = v126;
  unint64_t v123 = v71 & ~(unint64_t)__src;
  unsigned int v122 = v11;
  unint64_t v121 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v11) & (v64 - 1);
  BOOL v120 = 0;
  this = llvm::APInt::umul_ov((llvm::APInt *)&v123, (const llvm::APInt *)&v121, &v120, (uint64_t)&v118);
  if (v120) {
    goto LABEL_100;
  }
  int v73 = *(unsigned __int8 *)(v32 + 16);
  if (v73 == 53)
  {
    unsigned int v140 = v119;
    if (v119 > 0x40) {
      operator new[]();
    }
    if (v119) {
      unint64_t v75 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v119;
    }
    else {
      unint64_t v75 = 0;
    }
    unsigned int v115 = v119;
    unint64_t v114 = v75 & ~(unint64_t)v118;
    unsigned int v117 = v119;
    unint64_t v116 = v118;
    llvm::KnownBits::shl((llvm::KnownBits *)&v129, (int8x8_t *)&v114, (uint64_t)&v141);
    if (v117 >= 0x41 && v116) {
      MEMORY[0x1D25D9CB0](v116, 0x1000C8000313F17);
    }
    if (v115 >= 0x41 && v114) {
      MEMORY[0x1D25D9CB0](v114, 0x1000C8000313F17);
    }
    if (v130 > 0x40)
    {
      this = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v129);
    }
    else if (v130)
    {
      this = __clz(~(v129 << -(char)v130));
    }
    else
    {
      this = 0;
    }
    if (v119 >= 0x41)
    {
      int v80 = 0;
      unint64_t v79 = v118;
      int64_t v81 = ((unint64_t)v119 + 63) >> 6;
      do
      {
        if (v81-- < 1) {
          break;
        }
        unint64_t v83 = *((void *)v118 + v81);
        v80 += __clz(v83);
      }
      while (!v83);
      unsigned int v84 = v119 | 0xFFFFFFC0;
      if ((v119 & 0x3F) == 0) {
        unsigned int v84 = 0;
      }
      if (v119 - v80 - v84 > 0x40) {
        goto LABEL_163;
      }
    }
    else
    {
      unint64_t v79 = &v118;
    }
    if (*v79 < (unint64_t)this)
    {
      unsigned int v85 = v132;
      if (v132 > 0x40) {
        operator new[]();
      }
      uint64_t v86 = v131;
      unsigned int v115 = v142;
      if (v142 > 0x40) {
        operator new[]();
      }
      if (v142) {
        unint64_t v90 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v142;
      }
      else {
        unint64_t v90 = 0;
      }
      int v95 = v142;
      unint64_t v94 = v90 & ~v141;
      this = llvm::APInt::operator+=((uint64_t)&v94, 1uLL);
      int v91 = v95;
      unint64_t v92 = v94;
      int v95 = 0;
      *(_DWORD *)(a3 + 8) = v85;
      *(void *)a3 = v86;
      *(_DWORD *)(a3 + 24) = v91;
      *(void *)(a3 + 16) = v92;
      goto LABEL_198;
    }
  }
  else
  {
    if (v73 == 54)
    {
      LODWORD(v142) = v119;
      if (v119 > 0x40) {
        operator new[]();
      }
      if (v119) {
        unint64_t v74 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v119;
      }
      else {
        unint64_t v74 = 0;
      }
      unsigned int v115 = v119;
      unint64_t v114 = v74 & ~(unint64_t)v118;
      unsigned int v117 = v119;
      unint64_t v116 = v118;
      llvm::KnownBits::lshr((llvm::KnownBits *)&v129, (int8x8_t *)&v114, (uint64_t)&v141);
      if (v117 >= 0x41 && v116) {
        MEMORY[0x1D25D9CB0](v116, 0x1000C8000313F17);
      }
      if (v115 >= 0x41 && v114) {
        MEMORY[0x1D25D9CB0](v114, 0x1000C8000313F17);
      }
      unsigned int v101 = v144;
      if (v144 > 0x40) {
        operator new[]();
      }
      uint64_t v100 = v143;
      unsigned int v115 = v130;
      if (v130 > 0x40) {
        operator new[]();
      }
      if (v130) {
        unint64_t v78 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v130;
      }
      else {
        unint64_t v78 = 0;
      }
      unsigned int v97 = v130;
      uint64_t v96 = v78 & ~v129;
      llvm::APInt::operator+=((uint64_t)&v96, 1uLL);
      unsigned int v99 = v97;
      uint64_t v98 = v96;
      unsigned int v97 = 0;
      this = (uint64_t)sub_1CC062A8C((unint64_t *)&v100, (uint64_t)&v98, a3);
      if (v99 >= 0x41)
      {
        this = v98;
        if (v98) {
          this = MEMORY[0x1D25D9CB0](v98, 0x1000C8000313F17);
        }
      }
      if (v97 >= 0x41)
      {
        this = v96;
        if (v96) {
          this = MEMORY[0x1D25D9CB0](v96, 0x1000C8000313F17);
        }
      }
      if (v101 < 0x41) {
        goto LABEL_198;
      }
      this = v100;
      if (!v100) {
        goto LABEL_198;
      }
      goto LABEL_197;
    }
    unsigned int v140 = v119;
    if (v119 > 0x40) {
      operator new[]();
    }
    if (v119) {
      unint64_t v76 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v119;
    }
    else {
      unint64_t v76 = 0;
    }
    unsigned int v115 = v119;
    unint64_t v114 = v76 & ~(unint64_t)v118;
    unsigned int v117 = v119;
    unint64_t v116 = v118;
    this = llvm::KnownBits::ashr((uint64_t)&v129, (int8x8_t *)&v114, v72, &v141);
    if (v117 >= 0x41)
    {
      this = (uint64_t)v116;
      if (v116) {
        this = MEMORY[0x1D25D9CB0](v116, 0x1000C8000313F17);
      }
    }
    if (v115 >= 0x41)
    {
      this = v114;
      if (v114) {
        this = MEMORY[0x1D25D9CB0](v114, 0x1000C8000313F17);
      }
    }
    unsigned int v77 = (uint64_t *)(v129 + 8 * ((v130 - 1) >> 6));
    if (v130 < 0x41) {
      unsigned int v77 = &v129;
    }
    if (((unint64_t)*v77 >> (v130 - 1)))
    {
      unsigned int v113 = v144;
      if (v144 > 0x40) {
        operator new[]();
      }
      uint64_t v112 = v143;
      unsigned int v115 = v130;
      if (v130 > 0x40) {
        operator new[]();
      }
      if (v130) {
        unint64_t v89 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v130;
      }
      else {
        unint64_t v89 = 0;
      }
      unsigned int v109 = v130;
      uint64_t v108 = v89 & ~v129;
      llvm::APInt::operator+=((uint64_t)&v108, 1uLL);
      unsigned int v111 = v109;
      uint64_t v110 = v108;
      unsigned int v109 = 0;
      this = (uint64_t)sub_1CC062A8C((unint64_t *)&v112, (uint64_t)&v110, a3);
      if (v111 >= 0x41)
      {
        this = v110;
        if (v110) {
          this = MEMORY[0x1D25D9CB0](v110, 0x1000C8000313F17);
        }
      }
      if (v109 >= 0x41)
      {
        this = v108;
        if (v108) {
          this = MEMORY[0x1D25D9CB0](v108, 0x1000C8000313F17);
        }
      }
      if (v113 < 0x41) {
        goto LABEL_198;
      }
      this = v112;
      if (!v112) {
        goto LABEL_198;
      }
      goto LABEL_197;
    }
    uint64_t v87 = &v131;
    unsigned int v88 = v132 - 1;
    if (v132 >= 0x41) {
      uint64_t v87 = (uint64_t *)(v131 + 8 * (v88 >> 6));
    }
    if (((unint64_t)*v87 >> v88))
    {
      unsigned int v107 = v132;
      if (v132 > 0x40) {
        operator new[]();
      }
      uint64_t v106 = v131;
      unsigned int v115 = v142;
      if (v142 > 0x40) {
        operator new[]();
      }
      if (v142) {
        unint64_t v93 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v142;
      }
      else {
        unint64_t v93 = 0;
      }
      unsigned int v103 = v142;
      unint64_t v102 = v93 & ~v141;
      llvm::APInt::operator+=((uint64_t)&v102, 1uLL);
      unsigned int v105 = v103;
      uint64_t v104 = v102;
      unsigned int v103 = 0;
      this = (uint64_t)sub_1CC062A8C((unint64_t *)&v106, (uint64_t)&v104, a3);
      if (v105 >= 0x41)
      {
        this = v104;
        if (v104) {
          this = MEMORY[0x1D25D9CB0](v104, 0x1000C8000313F17);
        }
      }
      if (v103 >= 0x41)
      {
        this = v102;
        if (v102) {
          this = MEMORY[0x1D25D9CB0](v102, 0x1000C8000313F17);
        }
      }
      if (v107 < 0x41) {
        goto LABEL_198;
      }
      this = v106;
      if (!v106) {
        goto LABEL_198;
      }
LABEL_197:
      this = MEMORY[0x1D25D9CB0](this, 0x1000C8000313F17);
LABEL_198:
      if (v144 >= 0x41)
      {
        this = v143;
        if (v143) {
          this = MEMORY[0x1D25D9CB0](v143, 0x1000C8000313F17);
        }
      }
      if (v142 >= 0x41)
      {
        this = v141;
        if (v141) {
          this = MEMORY[0x1D25D9CB0](v141, 0x1000C8000313F17);
        }
      }
      goto LABEL_200;
    }
  }
LABEL_163:
  if (v144 >= 0x41)
  {
    this = v143;
    if (v143) {
      this = MEMORY[0x1D25D9CB0](v143, 0x1000C8000313F17);
    }
  }
  if (v142 >= 0x41)
  {
    this = v141;
    if (v141) {
      this = MEMORY[0x1D25D9CB0](v141, 0x1000C8000313F17);
    }
  }
LABEL_100:
  *(_DWORD *)(a3 + 8) = v11;
  *(void *)a3 = v14;
  *(_DWORD *)(a3 + 24) = v11;
  *(void *)(a3 + 16) = v15;
LABEL_200:
  if (v119 >= 0x41)
  {
    this = (uint64_t)v118;
    if (v118) {
      this = MEMORY[0x1D25D9CB0](v118, 0x1000C8000313F17);
    }
  }
  if (v122 >= 0x41)
  {
    this = v121;
    if (v121) {
      this = MEMORY[0x1D25D9CB0](v121, 0x1000C8000313F17);
    }
  }
  if (v124 >= 0x41)
  {
    this = v123;
    if (v123) {
      this = MEMORY[0x1D25D9CB0](v123, 0x1000C8000313F17);
    }
  }
  if (v128 >= 0x41)
  {
    this = v127;
    if (v127) {
      this = MEMORY[0x1D25D9CB0](v127, 0x1000C8000313F17);
    }
  }
  if (v126 >= 0x41)
  {
    this = (uint64_t)__src;
    if (__src) {
      this = MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
  }
  if (v132 >= 0x41)
  {
    this = v131;
    if (v131) {
      this = MEMORY[0x1D25D9CB0](v131, 0x1000C8000313F17);
    }
  }
  if (v130 >= 0x41)
  {
    this = v129;
    if (v129) {
      this = MEMORY[0x1D25D9CB0](v129, 0x1000C8000313F17);
    }
  }
  unsigned int v13 = v139;
LABEL_85:
  if (v13 >= 0x41)
  {
    this = v138;
    if (v138) {
      this = MEMORY[0x1D25D9CB0](v138, 0x1000C8000313F17);
    }
  }
  if (v137 >= 0x41)
  {
    this = v136;
    if (v136) {
      return MEMORY[0x1D25D9CB0](v136, 0x1000C8000313F17);
    }
  }
  return this;
}

uint64_t llvm::ScalarEvolution::getSmallConstantMaxTripCount(const llvm::Loop **this, const llvm::Loop *a2)
{
  uint64_t BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo((llvm::ScalarEvolution *)this, a2);
  int v4 = BackedgeTakenInfo[13];
  if (v4)
  {
    unsigned int v5 = *((_DWORD *)BackedgeTakenInfo + 2);
    if (!v5) {
      goto LABEL_3;
    }
    uint64_t v8 = (_DWORD *)((char *)*BackedgeTakenInfo + 48);
    uint64_t v9 = 88 * v5;
    while (*(v8 - 1) == *v8)
    {
      v8 += 22;
      v9 -= 88;
      if (!v9) {
        goto LABEL_3;
      }
    }
  }
  int v4 = this[6];
LABEL_3:
  if (*((_WORD *)v4 + 12)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = (uint64_t)v4;
  }

  return sub_1CC10ADDC(v6);
}

uint64_t llvm::ScalarEvolution::getRangeRefIter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  v77[6] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1 + 784;
  uint64_t v76 = 0x600000000;
  int v70 = v74;
  unint64_t v71 = v74;
  unint64_t v75 = v77;
  if (a3) {
    uint64_t v6 = a1 + 808;
  }
  uint64_t v72 = 8;
  int v73 = 0;
  v69[0] = (uint64_t)&v75;
  v69[1] = (uint64_t)&v70;
  v69[2] = v6;
  sub_1CC0FD94C(v69, a2);
  if (!v76) {
    goto LABEL_112;
  }
  uint64_t v68 = v4;
  LODWORD(v7) = 0;
  uint64_t v8 = (_DWORD *)(a1 + 340);
  uint64_t v9 = (unsigned int *)(a1 + 336);
  do
  {
    int v10 = v7;
    uint64_t v11 = *((void *)v75 + v7);
    unsigned int v12 = *(unsigned __int16 *)(v11 + 24);
    if (v12 <= 0xC)
    {
      if (((1 << v12) & 0x1FB0) != 0)
      {
        uint64_t v13 = *(void *)(v11 + 40);
        if (v13)
        {
          unint64_t v14 = *(uint64_t **)(v11 + 32);
          uint64_t v15 = 8 * v13;
          do
          {
            uint64_t v16 = *v14++;
            sub_1CC0FD94C(v69, v16);
            v15 -= 8;
          }
          while (v15);
        }
        goto LABEL_10;
      }
      if (v12 == 6)
      {
        sub_1CC0FD94C(v69, *(void *)(v11 + 32));
        sub_1CC0FD94C(v69, *(void *)(v11 + 40));
        goto LABEL_10;
      }
    }
    uint64_t v17 = *(void *)(v11 - 8);
    if (!v17 || *(unsigned char *)(v17 + 16) != 83) {
      goto LABEL_10;
    }
    uint64_t v18 = *(void *)(a1 + 328);
    uint64_t v19 = *(unsigned int *)(a1 + 340);
    if (v18 == *(void *)(a1 + 320))
    {
      if (v19)
      {
        BOOL v20 = 0;
        uint64_t v21 = 8 * v19;
        int v22 = *(void **)(a1 + 328);
        do
        {
          if (*v22 == v17) {
            goto LABEL_10;
          }
          if (*v22 == -2) {
            BOOL v20 = v22;
          }
          ++v22;
          v21 -= 8;
        }
        while (v21);
        if (v20)
        {
          *BOOL v20 = v17;
          --*(_DWORD *)(a1 + 344);
          goto LABEL_48;
        }
      }
      unsigned int v23 = *v9;
      if (v19 < *v9)
      {
        *uint64_t v8 = v19 + 1;
        *(void *)(v18 + 8 * v19) = v17;
LABEL_48:
        int v33 = *(_DWORD *)(v17 + 20);
        if ((v33 & 0x40000000) != 0)
        {
          uint64_t v35 = *(void *)(v17 - 8);
          uint64_t v34 = v33 & 0x7FFFFFF;
          if (!v34) {
            goto LABEL_10;
          }
LABEL_52:
          uint64_t v36 = v35 + 32 * v34;
          while (2)
          {
            uint64_t v38 = *(llvm::Value **)(v36 - 32);
            v36 -= 32;
            uint64_t v37 = v38;
            uint64_t v39 = *(void *)(a1 + 104);
            unsigned int v40 = *(_DWORD *)(a1 + 120);
            if (v40)
            {
              unsigned int v41 = ((v37 >> 4) ^ (v37 >> 9)) & (v40 - 1);
              uint64_t v42 = v39 + 48 * v41;
              uint64_t v43 = *(llvm::Value **)(v42 + 24);
              if (v43 != v37)
              {
                int v44 = 1;
                while (v43 != (llvm::Value *)-4096)
                {
                  unsigned int v45 = v41 + v44++;
                  unsigned int v41 = v45 & (v40 - 1);
                  uint64_t v42 = v39 + 48 * v41;
                  uint64_t v43 = *(llvm::Value **)(v42 + 24);
                  if (v43 == v37) {
                    goto LABEL_60;
                  }
                }
                goto LABEL_59;
              }
            }
            else
            {
LABEL_59:
              uint64_t v42 = v39 + 48 * v40;
            }
LABEL_60:
            if (v42 == v39 + 48 * v40 || (uint64_t SCEVIter = *(void *)(v42 + 40)) == 0) {
              uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v37);
            }
            sub_1CC0FD94C(v69, SCEVIter);
            if (v36 == v35) {
              goto LABEL_10;
            }
            continue;
          }
        }
        uint64_t v34 = v33 & 0x7FFFFFF;
        uint64_t v35 = v17 - 32 * v34;
        if (v34) {
          goto LABEL_52;
        }
        goto LABEL_10;
      }
    }
    else
    {
      unsigned int v23 = *v9;
    }
    if (3 * v23 <= 4 * ((int)v19 - *(_DWORD *)(a1 + 344)))
    {
      if (v23 >= 0x40) {
        v23 *= 2;
      }
      else {
        unsigned int v23 = 128;
      }
    }
    else if (v23 - v19 >= v23 >> 3)
    {
      goto LABEL_29;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 320), v23);
    unsigned int v23 = *(_DWORD *)(a1 + 336);
    uint64_t v18 = *(void *)(a1 + 328);
LABEL_29:
    unsigned int v24 = v23 - 1;
    unsigned int v25 = (v23 - 1) & ((v17 >> 4) ^ (v17 >> 9));
    unsigned int v26 = (void *)(v18 + 8 * v25);
    uint64_t v27 = *v26;
    if (*v26 != -1)
    {
      uint64_t v28 = 0;
      int v29 = 1;
      while (v27 != v17)
      {
        if (v28) {
          BOOL v30 = 0;
        }
        else {
          BOOL v30 = v27 == -2;
        }
        if (v30) {
          uint64_t v28 = v26;
        }
        unsigned int v31 = v25 + v29++;
        unsigned int v25 = v31 & v24;
        unsigned int v26 = (void *)(v18 + 8 * (v31 & v24));
        uint64_t v27 = *v26;
        if (*v26 == -1) {
          goto LABEL_41;
        }
      }
      goto LABEL_10;
    }
    uint64_t v28 = 0;
LABEL_41:
    if (v28) {
      uint64_t v32 = v28;
    }
    else {
      uint64_t v32 = v26;
    }
    if (*v32 != v17)
    {
      if (*v32 == -2) {
        --*(_DWORD *)(a1 + 344);
      }
      else {
        ++*v8;
      }
      *uint64_t v32 = v17;
      goto LABEL_48;
    }
LABEL_10:
    uint64_t v7 = (v10 + 1);
  }
  while (v76 != v7);
  uint64_t v4 = v68;
  if (v10 != -1 && v10)
  {
    uint64_t v47 = v75;
    do
    {
      uint64_t v48 = v47[--v7];
      llvm::ScalarEvolution::getRangeRef(a1, v48, a3, 0);
      if (v48) {
        BOOL v49 = *(unsigned __int16 *)(v48 + 24) == 14;
      }
      else {
        BOOL v49 = 0;
      }
      if (v49)
      {
        uint64_t v50 = *(void *)(v48 - 8);
        if (v50)
        {
          if (*(unsigned char *)(v50 + 16) == 83)
          {
            uint64_t v52 = *(void *)(a1 + 320);
            uint64_t v51 = *(void *)(a1 + 328);
            if (v51 == v52)
            {
              uint64_t v53 = *v8;
              unsigned int v54 = (void *)(v51 + 8 * v53);
              if (v53)
              {
                uint64_t v55 = 0;
                uint64_t v56 = 8 * v53;
                while (*(void *)(v51 + v55) != v50)
                {
                  v55 += 8;
                  if (v56 == v55) {
                    goto LABEL_99;
                  }
                }
                unsigned int v54 = (void *)(v51 + v55);
              }
LABEL_99:
              uint64_t v52 = *(void *)(a1 + 328);
            }
            else
            {
              uint64_t v57 = *v9;
              int v58 = v57 - 1;
              unsigned int v59 = (v57 - 1) & ((v50 >> 4) ^ (v50 >> 9));
              unsigned int v54 = (void *)(v51 + 8 * v59);
              uint64_t v60 = *v54;
              if (*v54 == -1)
              {
                uint64_t v61 = 0;
LABEL_108:
                if (v61) {
                  unsigned int v54 = v61;
                }
                if (*v54 != v50) {
                  unsigned int v54 = (void *)(v51 + 8 * v57);
                }
              }
              else
              {
                uint64_t v61 = 0;
                int v62 = 1;
                while (v60 != v50)
                {
                  if (v61) {
                    BOOL v63 = 0;
                  }
                  else {
                    BOOL v63 = v60 == -2;
                  }
                  if (v63) {
                    uint64_t v61 = v54;
                  }
                  unsigned int v64 = v59 + v62++;
                  unsigned int v59 = v64 & v58;
                  unsigned int v54 = (void *)(v51 + 8 * (v64 & v58));
                  uint64_t v60 = *v54;
                  if (*v54 == -1) {
                    goto LABEL_108;
                  }
                }
              }
            }
            if (v51 == v52) {
              uint64_t v65 = (unsigned int *)(a1 + 340);
            }
            else {
              uint64_t v65 = (unsigned int *)(a1 + 336);
            }
            if (v54 != (void *)(v51 + 8 * *v65))
            {
              *unsigned int v54 = -2;
              ++*(_DWORD *)(a1 + 344);
            }
          }
        }
      }
    }
    while (v7 != 1);
  }
LABEL_112:
  uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(a1, v4, a3, 0);
  if (v71 != v70) {
    free(v71);
  }
  if (v75 != v77) {
    free(v75);
  }
  return RangeRef;
}

void sub_1CC0FD94C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = *(void *)(v4 + 8);
  uint64_t v6 = *(unsigned int *)(v4 + 20);
  if (v5 == *(void *)v4)
  {
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 8 * v6;
      uint64_t v9 = *(uint64_t **)(v4 + 8);
      while (*v9 != a2)
      {
        if (*v9 == -2) {
          uint64_t v7 = v9;
        }
        ++v9;
        v8 -= 8;
        if (!v8)
        {
          if (!v7) {
            goto LABEL_9;
          }
          *uint64_t v7 = a2;
          --*(_DWORD *)(v4 + 24);
          goto LABEL_33;
        }
      }
      return;
    }
LABEL_9:
    unsigned int v10 = *(_DWORD *)(v4 + 16);
    if (v6 < v10)
    {
      *(_DWORD *)(v4 + 20) = v6 + 1;
      *(void *)(v5 + 8 * v6) = a2;
      goto LABEL_33;
    }
  }
  else
  {
    unsigned int v10 = *(_DWORD *)(v4 + 16);
  }
  if (3 * v10 <= 4 * ((int)v6 - *(_DWORD *)(v4 + 24)))
  {
    if (v10 >= 0x40) {
      v10 *= 2;
    }
    else {
      unsigned int v10 = 128;
    }
  }
  else if (v10 - v6 >= v10 >> 3)
  {
    goto LABEL_14;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a1[1], v10);
  unsigned int v10 = *(_DWORD *)(v4 + 16);
  uint64_t v5 = *(void *)(v4 + 8);
LABEL_14:
  unsigned int v11 = v10 - 1;
  unsigned int v12 = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v13 = (uint64_t *)(v5 + 8 * v12);
  uint64_t v14 = *v13;
  if (*v13 != -1)
  {
    uint64_t v15 = 0;
    int v16 = 1;
    while (v14 != a2)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == -2;
      }
      if (v17) {
        uint64_t v15 = v13;
      }
      unsigned int v18 = v12 + v16++;
      unsigned int v12 = v18 & v11;
      uint64_t v13 = (uint64_t *)(v5 + 8 * (v18 & v11));
      uint64_t v14 = *v13;
      if (*v13 == -1) {
        goto LABEL_26;
      }
    }
    return;
  }
  uint64_t v15 = 0;
LABEL_26:
  if (v15) {
    uint64_t v19 = v15;
  }
  else {
    uint64_t v19 = v13;
  }
  if (*v19 != a2)
  {
    if (*v19 == -2) {
      --*(_DWORD *)(v4 + 24);
    }
    else {
      ++*(_DWORD *)(v4 + 20);
    }
    *uint64_t v19 = a2;
LABEL_33:
    uint64_t v20 = a1[2];
    uint64_t v21 = *(void *)v20;
    unsigned int v22 = *(_DWORD *)(v20 + 16);
    if ((uint64_t *)(v21 + 40 * v22) == sub_1CBBEF5AC(*(void *)v20, v22, a2))
    {
      int v23 = *(unsigned __int16 *)(a2 + 24);
      if ((v23 - 4) <= 8 || v23 == 14 && *(unsigned char *)(*(void *)(a2 - 8) + 16) == 83)
      {
        uint64_t v24 = *a1;
        unsigned int v25 = *(_DWORD *)(v24 + 8);
        if (v25 >= *(_DWORD *)(v24 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)v24 + 8 * v25) = a2;
        ++*(_DWORD *)(v24 + 8);
      }
    }
  }
}

uint64_t llvm::ScalarEvolution::getRangeRef(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5 = a3;
  uint64_t v421 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1 + 784;
  uint64_t v9 = 808;
  if (a3) {
    uint64_t v8 = a1 + 808;
  }
  else {
    uint64_t v9 = 784;
  }
  if (a3) {
    uint64_t v10 = 2;
  }
  else {
    uint64_t v10 = 1;
  }
  uint64_t v11 = *(void *)(a1 + v9);
  unsigned int v12 = *(_DWORD *)(v8 + 16);
  uint64_t v13 = sub_1CBBEF5AC(v11, v12, a2);
  if ((uint64_t *)(v11 + 40 * v12) != v13) {
    return (uint64_t)(v13 + 1);
  }
  int v15 = *(unsigned __int16 *)(a2 + 24);
  if (a2 && !*(_WORD *)(a2 + 24))
  {
    uint64_t v16 = *(void *)(a2 + 32);
    unsigned int v17 = *(_DWORD *)(v16 + 32);
    if (v17 > 0x40) {
      operator new[]();
    }
    unsigned int v18 = *(void ***)(v16 + 24);
    unsigned int v410 = v17;
    v409 = v18;
    LODWORD(v414) = v17;
    unint64_t v413 = (unint64_t)v18;
    llvm::APInt::operator+=((uint64_t)&v413, 1uLL);
    unsigned int v412 = v414;
    unint64_t v411 = (void **)v413;
    uint64_t v14 = sub_1CC1022E4(a1, a2, v5, (uint64_t)&v409);
    if (v412 >= 0x41 && v411) {
      MEMORY[0x1D25D9CB0](v411, 0x1000C8000313F17);
    }
    if (v410 < 0x41) {
      return (uint64_t)v14;
    }
    unsigned int v22 = v409;
    if (!v409) {
      return (uint64_t)v14;
    }
    goto LABEL_216;
  }
  if (dword_1EBCC7DF8 >= a4)
  {
    uint64_t v20 = a2;
    while (2)
    {
      switch(v15)
      {
        case 1:
        case 2:
        case 3:
        case 13:
          int v23 = (uint64_t *)(v20 + 40);
          goto LABEL_30;
        case 4:
          int v23 = (uint64_t *)(v20 + 48);
          goto LABEL_30;
        case 5:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
          uint64_t v21 = *(uint64_t **)(v20 + 32);
          goto LABEL_20;
        case 6:
          uint64_t v21 = (uint64_t *)(v20 + 40);
LABEL_20:
          uint64_t v20 = *v21;
          int v15 = *(unsigned __int16 *)(v20 + 24);
          continue;
        case 14:
          int v23 = *(uint64_t **)(v20 - 8);
          goto LABEL_30;
        default:
          int v23 = *(uint64_t **)(v20 + 32);
LABEL_30:
          uint64_t v24 = *v23;
          unsigned int v25 = *(_DWORD *)(*v23 + 8);
          uint64_t v26 = *(void *)(*(void *)a1 + 40);
          if (v25 == 15)
          {
            if ((v25 & 0xFE) == 0x12) {
              unsigned int v25 = *(_DWORD *)(**(void **)(v24 + 16) + 8);
            }
            uint64_t v81 = *(void *)(v26 + 504);
            if (v25 < 0x100) {
              goto LABEL_188;
            }
            unsigned int v82 = v25 >> 8;
            unint64_t v83 = *(unsigned int *)(v26 + 512);
            uint64_t v84 = *(void *)(v26 + 504);
            if (v83)
            {
              uint64_t v84 = v81;
              unint64_t v85 = v83;
              do
              {
                unint64_t v86 = v85 >> 1;
                uint64_t v87 = v84 + 16 * (v85 >> 1);
                unsigned int v88 = *(_DWORD *)(v87 + 8);
                uint64_t v89 = v87 + 16;
                v85 += ~(v85 >> 1);
                if (v88 < v82) {
                  uint64_t v84 = v89;
                }
                else {
                  unint64_t v85 = v86;
                }
              }
              while (v85);
            }
            if (v84 == v81 + 16 * v83 || *(_DWORD *)(v84 + 8) != v82) {
LABEL_188:
            }
              uint64_t v84 = v81;
            unsigned int v28 = *(_DWORD *)(v84 + 12);
          }
          else
          {
            unsigned int v28 = sub_1CB83544C(v26 + 272, v24);
            if (v27 == 1) {
          }
            }
          unsigned int v406 = v28;
          if (v28 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v405);
          }
          if (v28) {
            unint64_t v29 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
          }
          else {
            unint64_t v29 = 0;
          }
          unsigned int v405 = (void **)v29;
          unsigned int v408 = v28;
          unint64_t v407 = v29;
          unsigned int MinTrailingZeros = llvm::ScalarEvolution::GetMinTrailingZeros((llvm::ScalarEvolution *)a1, (const llvm::SCEV *)a2);
          if (!MinTrailingZeros) {
            goto LABEL_70;
          }
          if (v5)
          {
            unsigned int v400 = v28;
            uint64_t v399 = 1 << (v28 - 1);
            unsigned int v341 = v28;
            if (v28) {
              unint64_t v31 = 0xFFFFFFFFFFFFFFFFLL >> ((v28 - 1) & 0x3F ^ 0x3F);
            }
            else {
              unint64_t v31 = 0;
            }
            uint64_t v340 = (void *)(v31 & ~(1 << (v28 - 1)));
            LODWORD(v414) = v28;
            if (v28 == MinTrailingZeros) {
              char v32 = 63;
            }
            else {
              char v32 = MinTrailingZeros;
            }
            uint64_t v33 = (uint64_t)((void)v340 << -(char)v28) >> -(char)v28 >> v32;
            if (v28) {
              unint64_t v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
            }
            else {
              unint64_t v34 = 0;
            }
            unint64_t v413 = v34 & v33;
            unsigned int v398 = v28;
            unint64_t v35 = (v34 & v33) << MinTrailingZeros;
            if (v28 == MinTrailingZeros) {
              unint64_t v35 = 0;
            }
            if (v28) {
              unint64_t v36 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
            }
            else {
              unint64_t v36 = 0;
            }
            unint64_t v397 = v36 & v35;
            llvm::APInt::operator+=((uint64_t)&v397, 1uLL);
            unsigned int v37 = v398;
            unint64_t v38 = v397;
            unsigned int v398 = 0;
            unsigned int v39 = v400;
            unsigned int v40 = (void **)v399;
            unsigned int v400 = 0;
            if (v406 >= 0x41 && v405) {
              MEMORY[0x1D25D9CB0](v405, 0x1000C8000313F17);
            }
            unsigned int v405 = v40;
            unsigned int v406 = v39;
            if (v408 >= 0x41 && v407) {
              MEMORY[0x1D25D9CB0](v407, 0x1000C8000313F17);
            }
            unint64_t v407 = v38;
            unsigned int v408 = v37;
            if (v398 < 0x41 || (unint64_t v41 = v397) == 0)
            {
LABEL_67:
              if (v414 >= 0x41 && v413) {
                MEMORY[0x1D25D9CB0](v413, 0x1000C8000313F17);
              }
LABEL_70:
              int v52 = *(unsigned __int16 *)(a2 + 24);
              if (a2 && v52 == 4)
              {
                uint64_t v53 = a4 + 1;
                uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(a1, **(void **)(a2 + 32), v5, v53);
                LODWORD(v414) = *(_DWORD *)(RangeRef + 8);
                if (v414 > 0x40) {
                  operator new[]();
                }
                unint64_t v413 = *(void *)RangeRef;
                LODWORD(v416) = *(_DWORD *)(RangeRef + 24);
                if (v416 > 0x40) {
                  operator new[]();
                }
                v415 = *(void ***)(RangeRef + 16);
                uint64_t v55 = *(void *)(a2 + 40);
                if (v55 != 1)
                {
                  int v63 = (*(unsigned __int16 *)(a2 + 28) >> 1) & 3;
                  uint64_t v64 = 1;
                  do
                  {
                    uint64_t v65 = (llvm::ConstantRange *)llvm::ScalarEvolution::getRangeRef(a1, *(void *)(*(void *)(a2 + 32) + 8 * v64), v5, v53);
                    llvm::ConstantRange::addWithNoWrap((llvm::ConstantRange *)&v413, v65, v63, v10, (uint64_t)&v340);
                    if (v414 >= 0x41 && v413) {
                      MEMORY[0x1D25D9CB0](v413, 0x1000C8000313F17);
                    }
                    unint64_t v413 = (unint64_t)v340;
                    LODWORD(v414) = v341;
                    unsigned int v341 = 0;
                    if (v416 >= 0x41 && v415)
                    {
                      MEMORY[0x1D25D9CB0](v415, 0x1000C8000313F17);
                      v415 = v342;
                      LODWORD(v416) = v343;
                      unsigned int v343 = 0;
                      if (v341 >= 0x41 && v340) {
                        MEMORY[0x1D25D9CB0](v340, 0x1000C8000313F17);
                      }
                    }
                    else
                    {
                      v415 = v342;
                      LODWORD(v416) = v343;
                    }
                    ++v64;
                  }
                  while (v55 != v64);
                }
                llvm::ConstantRange::intersectWith((uint64_t)&v405, (llvm::ConstantRange *)&v413, v10, (uint64_t)&v393);
                uint64_t v14 = sub_1CC1022E4(a1, a2, v5, (uint64_t)&v393);
                if (v396 >= 0x41 && v395) {
                  MEMORY[0x1D25D9CB0](v395, 0x1000C8000313F17);
                }
                if (v394 < 0x41) {
                  goto LABEL_172;
                }
                uint64_t v56 = v393;
                if (!v393) {
                  goto LABEL_172;
                }
LABEL_349:
                MEMORY[0x1D25D9CB0](v56, 0x1000C8000313F17);
                goto LABEL_172;
              }
              if (a2 && v52 == 5)
              {
                uint64_t v57 = a4 + 1;
                uint64_t v58 = llvm::ScalarEvolution::getRangeRef(a1, **(void **)(a2 + 32), v5, v57);
                LODWORD(v414) = *(_DWORD *)(v58 + 8);
                if (v414 > 0x40) {
                  operator new[]();
                }
                unint64_t v413 = *(void *)v58;
                LODWORD(v416) = *(_DWORD *)(v58 + 24);
                if (v416 > 0x40) {
                  operator new[]();
                }
                v415 = *(void ***)(v58 + 16);
                uint64_t v59 = *(void *)(a2 + 40);
                if (v59 != 1)
                {
                  uint64_t v71 = 1;
                  do
                  {
                    uint64_t v72 = (const void **)llvm::ScalarEvolution::getRangeRef(a1, *(void *)(*(void *)(a2 + 32) + 8 * v71), v5, v57);
                    llvm::ConstantRange::multiply((llvm::ConstantRange *)&v413, v72, (uint64_t)&v340);
                    if (v414 >= 0x41 && v413) {
                      MEMORY[0x1D25D9CB0](v413, 0x1000C8000313F17);
                    }
                    unint64_t v413 = (unint64_t)v340;
                    LODWORD(v414) = v341;
                    unsigned int v341 = 0;
                    if (v416 >= 0x41 && v415)
                    {
                      MEMORY[0x1D25D9CB0](v415, 0x1000C8000313F17);
                      v415 = v342;
                      LODWORD(v416) = v343;
                      unsigned int v343 = 0;
                      if (v341 >= 0x41 && v340) {
                        MEMORY[0x1D25D9CB0](v340, 0x1000C8000313F17);
                      }
                    }
                    else
                    {
                      v415 = v342;
                      LODWORD(v416) = v343;
                    }
                    ++v71;
                  }
                  while (v59 != v71);
                }
                llvm::ConstantRange::intersectWith((uint64_t)&v405, (llvm::ConstantRange *)&v413, v10, (uint64_t)&v389);
                uint64_t v14 = sub_1CC1022E4(a1, a2, v5, (uint64_t)&v389);
                if (v392 >= 0x41 && v391) {
                  MEMORY[0x1D25D9CB0](v391, 0x1000C8000313F17);
                }
                if (v390 >= 0x41)
                {
                  uint64_t v56 = v389;
                  if (v389) {
                    goto LABEL_349;
                  }
                }
LABEL_172:
                if (v416 >= 0x41 && v415) {
                  MEMORY[0x1D25D9CB0](v415, 0x1000C8000313F17);
                }
                if (v414 >= 0x41 && v413) {
LABEL_231:
                }
                  MEMORY[0x1D25D9CB0]();
LABEL_174:
                if (v408 >= 0x41 && v407) {
                  MEMORY[0x1D25D9CB0](v407, 0x1000C8000313F17);
                }
                if (v406 < 0x41) {
                  return (uint64_t)v14;
                }
                unsigned int v22 = v405;
                if (!v405) {
                  return (uint64_t)v14;
                }
LABEL_216:
                MEMORY[0x1D25D9CB0](v22, 0x1000C8000313F17);
                return (uint64_t)v14;
              }
              if (v52 == 12 || (v52 & 0xFFFC) == 8)
              {
                unsigned int v307 = v5;
                unsigned int v304 = a4 + 1;
                int v305 = dword_1CFAC4420[(__int16)(v52 - 8)];
                uint64_t v66 = llvm::ScalarEvolution::getRangeRef(a1, **(void **)(a2 + 32), v5, a4 + 1);
                unint64_t v67 = *(unsigned int *)(v66 + 8);
                unsigned int v341 = v67;
                unsigned int v300 = v10;
                if (v67 > 0x40) {
                  operator new[]();
                }
                uint64_t v68 = *(void ***)v66;
                uint64_t v340 = *(void **)v66;
                unint64_t v69 = *(unsigned int *)(v66 + 24);
                unsigned int v343 = v69;
                if (v69 > 0x40) {
                  operator new[]();
                }
                int v70 = *(void ***)(v66 + 16);
                uint64_t v342 = v70;
                int v303 = *(_DWORD *)(a2 + 40);
                if (v303 != 1)
                {
                  uint64_t v73 = 1;
                  do
                  {
                    LODWORD(v414) = v67;
                    if (v67 > 0x40) {
                      operator new[]();
                    }
                    unint64_t v413 = (unint64_t)v68;
                    LODWORD(v416) = v69;
                    if (v69 > 0x40) {
                      operator new[]();
                    }
                    v415 = v70;
                    uint64_t v74 = llvm::ScalarEvolution::getRangeRef(a1, *(void *)(*(void *)(a2 + 32) + 8 * v73), v307, v304);
                    unsigned int v418 = *(_DWORD *)(v74 + 8);
                    if (v418 > 0x40) {
                      operator new[]();
                    }
                    uint64_t v417 = *(void *)v74;
                    v420[0] = *(_DWORD *)(v74 + 24);
                    if (v420[0] > 0x40u) {
                      operator new[]();
                    }
                    uint64_t v419 = *(void *)(v74 + 16);
                    llvm::ConstantRange::intrinsic((const void **)&v413, v305, (unint64_t *)&__src);
                    uint64_t v68 = (void **)__src;
                    uint64_t v340 = __src;
                    unint64_t v67 = v386;
                    unsigned int v341 = v386;
                    unsigned int v386 = 0;
                    int v70 = v387;
                    uint64_t v342 = v387;
                    unint64_t v69 = v388;
                    unsigned int v343 = v388;
                    unsigned int v388 = 0;
                    for (uint64_t i = 0; i != -16; i -= 8)
                    {
                      uint64_t v76 = (void ***)((char *)&v413 + i * 4);
                      if (v420[i] >= 0x41u)
                      {
                        unsigned int v77 = v76[6];
                        if (v77) {
                          MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
                        }
                      }
                      if (*((_DWORD *)v76 + 10) >= 0x41u)
                      {
                        unint64_t v78 = v76[4];
                        if (v78) {
                          MEMORY[0x1D25D9CB0](v78, 0x1000C8000313F17);
                        }
                      }
                    }
                    ++v73;
                  }
                  while (v73 != v303);
                }
                llvm::ConstantRange::intersectWith((uint64_t)&v405, (llvm::ConstantRange *)&v340, v300, (uint64_t)&v381);
                uint64_t v14 = sub_1CC1022E4(a1, a2, v307, (uint64_t)&v381);
                if (v384 >= 0x41 && v383) {
                  MEMORY[0x1D25D9CB0](v383, 0x1000C8000313F17);
                }
                if (v382 >= 0x41 && v381) {
                  MEMORY[0x1D25D9CB0](v381, 0x1000C8000313F17);
                }
                if (v343 >= 0x41 && v342) {
                  MEMORY[0x1D25D9CB0](v342, 0x1000C8000313F17);
                }
                if (v341 >= 0x41 && v340) {
                  goto LABEL_231;
                }
                goto LABEL_174;
              }
              if (a2 && v52 == 6)
              {
                uint64_t v60 = llvm::ScalarEvolution::getRangeRef(a1, *(void *)(a2 + 32), v5, a4 + 1);
                LODWORD(v414) = *(_DWORD *)(v60 + 8);
                if (v414 > 0x40) {
                  operator new[]();
                }
                unint64_t v413 = *(void *)v60;
                LODWORD(v416) = *(_DWORD *)(v60 + 24);
                if (v416 > 0x40) {
                  operator new[]();
                }
                v415 = *(void ***)(v60 + 16);
                uint64_t v61 = llvm::ScalarEvolution::getRangeRef(a1, *(void *)(a2 + 40), v5, a4 + 1);
                unsigned int v341 = *(_DWORD *)(v61 + 8);
                if (v341 > 0x40) {
                  operator new[]();
                }
                uint64_t v340 = *(void **)v61;
                unsigned int v343 = *(_DWORD *)(v61 + 24);
                if (v343 > 0x40) {
                  operator new[]();
                }
                uint64_t v342 = *(void ***)(v61 + 16);
                llvm::ConstantRange::udiv((const void **)&v413, (const void **)&v340, (uint64_t)&__src);
                llvm::ConstantRange::intersectWith((uint64_t)&v405, (llvm::ConstantRange *)&__src, v10, (uint64_t)&v377);
                uint64_t v14 = sub_1CC1022E4(a1, a2, v5, (uint64_t)&v377);
                if (v380 >= 0x41 && v379) {
                  MEMORY[0x1D25D9CB0](v379, 0x1000C8000313F17);
                }
                if (v378 >= 0x41 && v377) {
                  MEMORY[0x1D25D9CB0](v377, 0x1000C8000313F17);
                }
                if (v388 >= 0x41 && v387) {
                  MEMORY[0x1D25D9CB0](v387, 0x1000C8000313F17);
                }
                if (v386 < 0x41) {
                  goto LABEL_170;
                }
                int v62 = __src;
                if (!__src) {
                  goto LABEL_170;
                }
LABEL_666:
                MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
                goto LABEL_170;
              }
              if (a2 && v52 == 2)
              {
                uint64_t v79 = llvm::ScalarEvolution::getRangeRef(a1, *(void *)(a2 + 32), v5, a4 + 1);
                LODWORD(v414) = *(_DWORD *)(v79 + 8);
                if (v414 > 0x40) {
                  operator new[]();
                }
                unint64_t v413 = *(void *)v79;
                LODWORD(v416) = *(_DWORD *)(v79 + 24);
                if (v416 > 0x40) {
                  operator new[]();
                }
                v415 = *(void ***)(v79 + 16);
                llvm::ConstantRange::zeroExtend((uint64_t)&v413, v28, (uint64_t)&v340);
                llvm::ConstantRange::intersectWith((uint64_t)&v405, (llvm::ConstantRange *)&v340, v10, (uint64_t)&v373);
                uint64_t v14 = sub_1CC1022E4(a1, a2, v5, (uint64_t)&v373);
                if (v376 >= 0x41 && v375) {
                  MEMORY[0x1D25D9CB0](v375, 0x1000C8000313F17);
                }
                if (v374 >= 0x41)
                {
                  int v62 = v373;
                  if (v373) {
                    goto LABEL_666;
                  }
                }
LABEL_170:
                if (v343 >= 0x41 && v342) {
                  MEMORY[0x1D25D9CB0](v342, 0x1000C8000313F17);
                }
                if (v341 >= 0x41)
                {
                  uint64_t v56 = v340;
                  if (v340) {
                    goto LABEL_349;
                  }
                }
                goto LABEL_172;
              }
              if (a2 && v52 == 3)
              {
                uint64_t v80 = llvm::ScalarEvolution::getRangeRef(a1, *(void *)(a2 + 32), v5, a4 + 1);
                LODWORD(v414) = *(_DWORD *)(v80 + 8);
                if (v414 > 0x40) {
                  operator new[]();
                }
                unint64_t v413 = *(void *)v80;
                LODWORD(v416) = *(_DWORD *)(v80 + 24);
                if (v416 > 0x40) {
                  operator new[]();
                }
                v415 = *(void ***)(v80 + 16);
                llvm::ConstantRange::signExtend((llvm::ConstantRange *)&v413, v28, (uint64_t)&v340);
                llvm::ConstantRange::intersectWith((uint64_t)&v405, (llvm::ConstantRange *)&v340, v10, (uint64_t)&v369);
                uint64_t v14 = sub_1CC1022E4(a1, a2, v5, (uint64_t)&v369);
                if (v372 >= 0x41 && v371) {
                  MEMORY[0x1D25D9CB0](v371, 0x1000C8000313F17);
                }
                if (v370 >= 0x41)
                {
                  int v62 = v369;
                  if (v369) {
                    goto LABEL_666;
                  }
                }
                goto LABEL_170;
              }
              if (a2 && v52 == 13)
              {
                uint64_t v90 = llvm::ScalarEvolution::getRangeRef(a1, *(void *)(a2 + 32), v5, a4 + 1);
                if (*(_DWORD *)(v90 + 8) > 0x40u) {
                  operator new[]();
                }
                uint64_t v91 = *(void *)v90;
                unsigned int v92 = *(_DWORD *)(v90 + 24);
                if (v92 > 0x40) {
                  operator new[]();
                }
                uint64_t v93 = *(void *)(v90 + 16);
                unsigned int v366 = *(_DWORD *)(v90 + 8);
                uint64_t v365 = v91;
                unsigned int v368 = v92;
                uint64_t v367 = v93;
                uint64_t v14 = sub_1CC1022E4(a1, a2, v5, (uint64_t)&v365);
                if (v368 >= 0x41 && v367) {
                  MEMORY[0x1D25D9CB0](v367, 0x1000C8000313F17);
                }
                if (v366 >= 0x41 && v365) {
                  MEMORY[0x1D25D9CB0](v365, 0x1000C8000313F17);
                }
                goto LABEL_174;
              }
              if (a2 && v52 == 1)
              {
                uint64_t v94 = llvm::ScalarEvolution::getRangeRef(a1, *(void *)(a2 + 32), v5, a4 + 1);
                LODWORD(v414) = *(_DWORD *)(v94 + 8);
                if (v414 > 0x40) {
                  operator new[]();
                }
                unint64_t v413 = *(void *)v94;
                LODWORD(v416) = *(_DWORD *)(v94 + 24);
                if (v416 > 0x40) {
                  operator new[]();
                }
                v415 = *(void ***)(v94 + 16);
                llvm::ConstantRange::truncate((uint64_t)&v413, v28, (uint64_t)&v340);
                llvm::ConstantRange::intersectWith((uint64_t)&v405, (llvm::ConstantRange *)&v340, v10, (uint64_t)&v361);
                uint64_t v14 = sub_1CC1022E4(a1, a2, v5, (uint64_t)&v361);
                if (v364 >= 0x41 && v363) {
                  MEMORY[0x1D25D9CB0](v363, 0x1000C8000313F17);
                }
                if (v362 >= 0x41)
                {
                  int v62 = v361;
                  if (v361) {
                    goto LABEL_666;
                  }
                }
                goto LABEL_170;
              }
              if (a2 && v52 == 7)
              {
                __int16 v95 = *(_WORD *)(a2 + 28);
                if ((v95 & 2) == 0) {
                  goto LABEL_286;
                }
                uint64_t v96 = llvm::ScalarEvolution::getRangeRef(a1, **(void **)(a2 + 32), 0, 0);
                llvm::ConstantRange::getUnsignedMin(v96, (uint64_t)&__src);
                if (v386 > 0x40)
                {
                  int v119 = 0;
                  int64_t v120 = ((unint64_t)v386 + 63) >> 6;
                  unint64_t v121 = __src;
                  do
                  {
                    BOOL v185 = v120-- < 1;
                    if (v185) {
                      break;
                    }
                    unint64_t v122 = *((void *)__src + v120);
                    v119 += __clz(v122);
                  }
                  while (!v122);
                  unsigned int v123 = v386 | 0xFFFFFFC0;
                  if ((v386 & 0x3F) == 0) {
                    unsigned int v123 = 0;
                  }
                  if (v119 + v123 != v386) {
                    operator new[]();
                  }
                }
                else
                {
                  if (!__src) {
                    goto LABEL_285;
                  }
                  uint64_t v359 = 0;
                  unsigned int v341 = v386;
                  uint64_t v340 = __src;
                  unsigned int v343 = v28;
                  uint64_t v342 = 0;
                  int v360 = 0;
                  llvm::ConstantRange::intersectWith((uint64_t)&v405, (llvm::ConstantRange *)&v340, v10, (uint64_t)&v413);
                  if (v406 >= 0x41 && v405) {
                    MEMORY[0x1D25D9CB0](v405, 0x1000C8000313F17);
                  }
                  unsigned int v405 = (void **)v413;
                  unsigned int v406 = v414;
                  LODWORD(v414) = 0;
                  if (v408 >= 0x41 && v407)
                  {
                    MEMORY[0x1D25D9CB0](v407, 0x1000C8000313F17);
                    unint64_t v407 = (unint64_t)v415;
                    unsigned int v408 = v416;
                    LODWORD(v416) = 0;
                    if (v414 >= 0x41 && v413) {
                      MEMORY[0x1D25D9CB0](v413, 0x1000C8000313F17);
                    }
                  }
                  else
                  {
                    unint64_t v407 = (unint64_t)v415;
                    unsigned int v408 = v416;
                    LODWORD(v416) = 0;
                  }
                  if (v343 >= 0x41 && v342) {
                    MEMORY[0x1D25D9CB0](v342, 0x1000C8000313F17);
                  }
                  if (v341 >= 0x41 && v340) {
                    MEMORY[0x1D25D9CB0](v340, 0x1000C8000313F17);
                  }
                  if (v386 < 0x41) {
                    goto LABEL_285;
                  }
                  unint64_t v121 = __src;
                }
                if (v121) {
                  MEMORY[0x1D25D9CB0](v121, 0x1000C8000313F17);
                }
LABEL_285:
                __int16 v95 = *(_WORD *)(a2 + 28);
LABEL_286:
                unsigned int v309 = v5;
                unsigned int v302 = v10;
                if ((v95 & 4) == 0) {
                  goto LABEL_311;
                }
                uint64_t v124 = *(void *)(a2 + 40);
                if (v124 == 1) {
                  goto LABEL_299;
                }
                uint64_t v125 = 1;
                int v126 = 1;
                char v127 = 1;
                do
                {
                  uint64_t v128 = llvm::ScalarEvolution::getRangeRef(a1, *(void *)(*(void *)(a2 + 32) + 8 * v125), 1, 0);
                  llvm::ConstantRange::getSignedMin(v128, (uint64_t)&v413);
                  unsigned int v129 = v414 - 1;
                  if (v414 >= 0x41) {
                    unsigned int v130 = (void ***)(v413 + 8 * (v129 >> 6));
                  }
                  else {
                    unsigned int v130 = (void ***)&v413;
                  }
                  uint64_t v131 = *v130;
                  if (v414 >= 0x41 && v413 != 0) {
                    MEMORY[0x1D25D9CB0]();
                  }
                  v127 &= (((unint64_t)v131 >> v129) & 1) == 0;
                  v126 &= llvm::ScalarEvolution::isKnownNonPositive((llvm::ScalarEvolution *)a1, *(const llvm::SCEV **)(*(void *)(a2 + 32) + 8 * v125++));
                }
                while (v124 != v125);
                if (v127)
                {
LABEL_299:
                  uint64_t v133 = llvm::ScalarEvolution::getRangeRef(a1, **(void **)(a2 + 32), 1, 0);
                  llvm::ConstantRange::getSignedMin(v133, (uint64_t)&v357);
                  unsigned int v356 = v28;
                  uint64_t v355 = 1 << (v28 - 1);
                  sub_1CC062A8C(&v357, (uint64_t)&v355, (uint64_t)&v340);
                  llvm::ConstantRange::intersectWith((uint64_t)&v405, (llvm::ConstantRange *)&v340, v302, (uint64_t)&v413);
                  if (v406 >= 0x41 && v405) {
                    MEMORY[0x1D25D9CB0](v405, 0x1000C8000313F17);
                  }
                  unsigned int v405 = (void **)v413;
                  unsigned int v406 = v414;
                  LODWORD(v414) = 0;
                  if (v408 >= 0x41 && v407)
                  {
                    MEMORY[0x1D25D9CB0](v407, 0x1000C8000313F17);
                    unint64_t v407 = (unint64_t)v415;
                    unsigned int v408 = v416;
                    LODWORD(v416) = 0;
                    if (v414 >= 0x41 && v413) {
                      MEMORY[0x1D25D9CB0](v413, 0x1000C8000313F17);
                    }
                  }
                  else
                  {
                    unint64_t v407 = (unint64_t)v415;
                    unsigned int v408 = v416;
                    LODWORD(v416) = 0;
                  }
                  if (v343 >= 0x41 && v342) {
                    MEMORY[0x1D25D9CB0](v342, 0x1000C8000313F17);
                  }
                  if (v341 >= 0x41 && v340) {
                    MEMORY[0x1D25D9CB0](v340, 0x1000C8000313F17);
                  }
                  if (v356 >= 0x41 && v355) {
                    MEMORY[0x1D25D9CB0](v355, 0x1000C8000313F17);
                  }
                  if (v358 < 0x41) {
                    goto LABEL_310;
                  }
                  unint64_t v134 = v357;
                  if (!v357) {
                    goto LABEL_310;
                  }
                }
                else
                {
                  LODWORD(v5) = v309;
                  if (!v126)
                  {
LABEL_311:
                    if (*(void *)(a2 + 40) != 2) {
                      goto LABEL_549;
                    }
                    uint64_t BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo((llvm::ScalarEvolution *)a1, *(const llvm::Loop **)(a2 + 48));
                    uint64_t v136 = BackedgeTakenInfo[13];
                    if (v136)
                    {
                      unsigned int v137 = *((_DWORD *)BackedgeTakenInfo + 2);
                      if (!v137)
                      {
LABEL_319:
                        int v140 = *((unsigned __int16 *)v136 + 12);
                        if (v140 != 15)
                        {
                          unint64_t v141 = v136;
                          while (2)
                          {
                            switch(v140)
                            {
                              case 1:
                              case 2:
                              case 3:
                              case 13:
                                uint64_t v144 = (uint64_t *)((char *)v141 + 40);
                                goto LABEL_370;
                              case 4:
                                uint64_t v144 = (uint64_t *)((char *)v141 + 48);
                                goto LABEL_370;
                              case 5:
                              case 7:
                              case 8:
                              case 9:
                              case 10:
                              case 11:
                              case 12:
                                uint64_t v142 = (const llvm::Loop **)*((void *)v141 + 4);
                                goto LABEL_323;
                              case 6:
                                uint64_t v142 = (const llvm::Loop **)((char *)v141 + 40);
LABEL_323:
                                unint64_t v141 = *v142;
                                int v140 = *((unsigned __int16 *)v141 + 12);
                                continue;
                              case 14:
                                uint64_t v144 = (uint64_t *)*((void *)v141 - 1);
                                goto LABEL_370;
                              default:
                                uint64_t v144 = (uint64_t *)*((void *)v141 + 4);
LABEL_370:
                                uint64_t v151 = *v144;
                                unsigned int v152 = *(_DWORD *)(*v144 + 8);
                                uint64_t v153 = *(void *)(*(void *)a1 + 40);
                                if (v152 == 15)
                                {
                                  if ((v152 & 0xFE) == 0x12) {
                                    unsigned int v152 = *(_DWORD *)(**(void **)(v151 + 16) + 8);
                                  }
                                  uint64_t v278 = *(void *)(v153 + 504);
                                  if (v152 < 0x100) {
                                    goto LABEL_699;
                                  }
                                  unsigned int v279 = v152 >> 8;
                                  unint64_t v280 = *(unsigned int *)(v153 + 512);
                                  uint64_t v281 = *(void *)(v153 + 504);
                                  if (v280)
                                  {
                                    uint64_t v281 = v278;
                                    unint64_t v282 = v280;
                                    do
                                    {
                                      unint64_t v283 = v282 >> 1;
                                      uint64_t v284 = v281 + 16 * (v282 >> 1);
                                      unsigned int v285 = *(_DWORD *)(v284 + 8);
                                      uint64_t v286 = v284 + 16;
                                      v282 += ~(v282 >> 1);
                                      if (v285 < v279) {
                                        uint64_t v281 = v286;
                                      }
                                      else {
                                        unint64_t v282 = v283;
                                      }
                                    }
                                    while (v282);
                                  }
                                  if (v281 == v278 + 16 * v280 || *(_DWORD *)(v281 + 8) != v279) {
LABEL_699:
                                  }
                                    uint64_t v281 = v278;
                                  unint64_t v155 = *(unsigned int *)(v281 + 12);
                                }
                                else
                                {
                                  unint64_t v155 = sub_1CB83544C(v153 + 272, v151);
                                  if (v154 == 1) {
                                }
                                  }
                                if (v155 <= v28)
                                {
                                  int64_t v157 = *(const llvm::SCEV ***)(a2 + 32);
                                  uint64_t v156 = *(void *)(a2 + 40);
                                  unint64_t v158 = *v157;
                                  if (v156 == 2)
                                  {
                                    int v159 = v157[1];
                                  }
                                  else
                                  {
                                    unint64_t v413 = (unint64_t)&v415;
                                    uint64_t v414 = 0x300000000;
                                    unint64_t v296 = 8 * v156 - 8;
                                    if (v296 >= 0x19) {
                                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                                    }
                                    int v297 = 0;
                                    if (v156 != 1)
                                    {
                                      memcpy((void *)v413, v157 + 1, 8 * v156 - 8);
                                      int v297 = v414;
                                    }
                                    LODWORD(v414) = v297 + (v296 >> 3);
                                    int v159 = (const llvm::SCEV *)sub_1CD478318((llvm::ScalarEvolution *)a1, (uint64_t)&v413, *(const llvm::Loop **)(a2 + 48), 0);
                                    if ((void ***)v413 != &v415) {
                                      free((void *)v413);
                                    }
                                  }
                                  llvm::ScalarEvolution::getRangeForAffineAR((llvm::ScalarEvolution *)a1, v158, v159, v136, v28, (uint64_t)&v340);
                                  llvm::ConstantRange::intersectWith((uint64_t)&v405, (llvm::ConstantRange *)&v340, v302, (uint64_t)&v413);
                                  if (v406 >= 0x41 && v405) {
                                    MEMORY[0x1D25D9CB0](v405, 0x1000C8000313F17);
                                  }
                                  unsigned int v405 = (void **)v413;
                                  unsigned int v406 = v414;
                                  LODWORD(v414) = 0;
                                  if (v408 >= 0x41 && v407)
                                  {
                                    MEMORY[0x1D25D9CB0](v407, 0x1000C8000313F17);
                                    unint64_t v407 = (unint64_t)v415;
                                    unsigned int v408 = v416;
                                    LODWORD(v416) = 0;
                                    if (v414 >= 0x41 && v413) {
                                      MEMORY[0x1D25D9CB0](v413, 0x1000C8000313F17);
                                    }
                                  }
                                  else
                                  {
                                    unint64_t v407 = (unint64_t)v415;
                                    unsigned int v408 = v416;
                                  }
                                  uint64_t v161 = *(const llvm::SCEV ***)(a2 + 32);
                                  uint64_t v160 = *(void *)(a2 + 40);
                                  uint64_t v162 = *v161;
                                  if (v160 == 2)
                                  {
                                    uint64_t v163 = v161[1];
                                  }
                                  else
                                  {
                                    unint64_t v413 = (unint64_t)&v415;
                                    uint64_t v414 = 0x300000000;
                                    unint64_t v298 = 8 * v160 - 8;
                                    if (v298 >= 0x19) {
                                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                                    }
                                    int v299 = 0;
                                    if (v160 != 1)
                                    {
                                      memcpy((void *)v413, v161 + 1, 8 * v160 - 8);
                                      int v299 = v414;
                                    }
                                    LODWORD(v414) = v299 + (v298 >> 3);
                                    uint64_t v163 = (const llvm::SCEV *)sub_1CD478318((llvm::ScalarEvolution *)a1, (uint64_t)&v413, *(const llvm::Loop **)(a2 + 48), 0);
                                    if ((void ***)v413 != &v415) {
                                      free((void *)v413);
                                    }
                                  }
                                  llvm::ScalarEvolution::getRangeViaFactoring((llvm::ConstantInt ****)a1, v162, v163, v136, v28, (uint64_t)&v413);
                                  llvm::ConstantRange::intersectWith((uint64_t)&v405, (llvm::ConstantRange *)&v413, v302, (uint64_t)&__src);
                                  if (v406 >= 0x41 && v405) {
                                    MEMORY[0x1D25D9CB0](v405, 0x1000C8000313F17);
                                  }
                                  unsigned int v405 = (void **)__src;
                                  unsigned int v406 = v386;
                                  unsigned int v386 = 0;
                                  if (v408 >= 0x41 && v407)
                                  {
                                    MEMORY[0x1D25D9CB0](v407, 0x1000C8000313F17);
                                    unint64_t v407 = (unint64_t)v387;
                                    unsigned int v408 = v388;
                                    unsigned int v388 = 0;
                                    if (v386 >= 0x41 && __src) {
                                      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                                    }
                                  }
                                  else
                                  {
                                    unint64_t v407 = (unint64_t)v387;
                                    unsigned int v408 = v388;
                                  }
                                  if (v416 >= 0x41 && v415) {
                                    MEMORY[0x1D25D9CB0](v415, 0x1000C8000313F17);
                                  }
                                  if (v414 >= 0x41 && v413) {
                                    MEMORY[0x1D25D9CB0](v413, 0x1000C8000313F17);
                                  }
                                  if (v343 >= 0x41 && v342) {
                                    MEMORY[0x1D25D9CB0](v342, 0x1000C8000313F17);
                                  }
                                  if (v341 >= 0x41 && v340) {
                                    MEMORY[0x1D25D9CB0](v340, 0x1000C8000313F17);
                                  }
                                }
                                break;
                            }
                            break;
                          }
                        }
                        LODWORD(v5) = v309;
                        if (byte_1EBCC7F78)
                        {
                          uint64_t v164 = *(const llvm::Loop **)(a2 + 48);
                          uint64_t v165 = llvm::ScalarEvolution::getBackedgeTakenInfo((llvm::ScalarEvolution *)a1, v164)[15];
                          if (!v165) {
                            llvm::ScalarEvolution::computeSymbolicMaxBackedgeTakenCount((llvm::ScalarEvolution *)a1, v164);
                          }
                          LODWORD(v5) = v309;
                          if (*((_WORD *)v165 + 12) != 15)
                          {
                            while (2)
                            {
                              switch(*((_WORD *)v136 + 12))
                              {
                                case 1:
                                case 2:
                                case 3:
                                case 0xD:
                                  uint64_t v167 = (uint64_t *)((char *)v136 + 40);
                                  goto LABEL_544;
                                case 4:
                                  uint64_t v167 = (uint64_t *)((char *)v136 + 48);
                                  goto LABEL_544;
                                case 5:
                                case 7:
                                case 8:
                                case 9:
                                case 0xA:
                                case 0xB:
                                case 0xC:
                                  uint64_t v166 = (const llvm::Loop **)*((void *)v136 + 4);
                                  goto LABEL_394;
                                case 6:
                                  uint64_t v166 = (const llvm::Loop **)((char *)v136 + 40);
LABEL_394:
                                  uint64_t v136 = *v166;
                                  continue;
                                case 0xE:
                                  uint64_t v167 = (uint64_t *)*((void *)v136 - 1);
                                  goto LABEL_544;
                                default:
                                  uint64_t v167 = (uint64_t *)*((void *)v136 + 4);
LABEL_544:
                                  uint64_t v237 = *v167;
                                  unsigned int v238 = *(_DWORD *)(*v167 + 8);
                                  uint64_t v239 = *(void *)(*(void *)a1 + 40);
                                  if (v238 == 15)
                                  {
                                    if ((v238 & 0xFE) == 0x12) {
                                      unsigned int v238 = *(_DWORD *)(**(void **)(v237 + 16) + 8);
                                    }
                                    uint64_t v287 = *(void *)(v239 + 504);
                                    if (v238 < 0x100) {
                                      goto LABEL_723;
                                    }
                                    unsigned int v288 = v238 >> 8;
                                    unint64_t v289 = *(unsigned int *)(v239 + 512);
                                    uint64_t v290 = *(void *)(v239 + 504);
                                    if (v289)
                                    {
                                      uint64_t v290 = v287;
                                      unint64_t v291 = v289;
                                      do
                                      {
                                        unint64_t v292 = v291 >> 1;
                                        uint64_t v293 = v290 + 16 * (v291 >> 1);
                                        unsigned int v294 = *(_DWORD *)(v293 + 8);
                                        uint64_t v295 = v293 + 16;
                                        v291 += ~(v291 >> 1);
                                        if (v294 < v288) {
                                          uint64_t v290 = v295;
                                        }
                                        else {
                                          unint64_t v291 = v292;
                                        }
                                      }
                                      while (v291);
                                    }
                                    if (v290 == v287 + 16 * v289 || *(_DWORD *)(v290 + 8) != v288) {
LABEL_723:
                                    }
                                      uint64_t v290 = v287;
                                    unint64_t v241 = *(unsigned int *)(v290 + 12);
                                  }
                                  else
                                  {
                                    unint64_t v241 = sub_1CB83544C(v239 + 272, v237);
                                    if (v240 == 1) {
                                  }
                                    }
                                  LODWORD(v5) = v309;
                                  if (v241 <= v28 && (*(_WORD *)(a2 + 28) & 1) != 0)
                                  {
                                    llvm::ScalarEvolution::getRangeForAffineNoSelfWrappingAR((llvm::ScalarEvolution *)a1, a2, v165, v28, v309, (uint64_t)&v413);
                                    llvm::ConstantRange::intersectWith((uint64_t)&v405, (llvm::ConstantRange *)&v413, v302, (uint64_t)&v340);
                                    if (v406 >= 0x41 && v405) {
                                      MEMORY[0x1D25D9CB0](v405, 0x1000C8000313F17);
                                    }
                                    unsigned int v405 = (void **)v340;
                                    unsigned int v406 = v341;
                                    unsigned int v341 = 0;
                                    if (v408 >= 0x41 && v407)
                                    {
                                      MEMORY[0x1D25D9CB0](v407, 0x1000C8000313F17);
                                      unint64_t v407 = (unint64_t)v342;
                                      unsigned int v408 = v343;
                                      unsigned int v343 = 0;
                                      if (v341 >= 0x41 && v340) {
                                        MEMORY[0x1D25D9CB0](v340, 0x1000C8000313F17);
                                      }
                                    }
                                    else
                                    {
                                      unint64_t v407 = (unint64_t)v342;
                                      unsigned int v408 = v343;
                                    }
                                    if (v416 >= 0x41 && v415) {
                                      MEMORY[0x1D25D9CB0](v415, 0x1000C8000313F17);
                                    }
                                    if (v414 >= 0x41 && v413) {
                                      MEMORY[0x1D25D9CB0](v413, 0x1000C8000313F17);
                                    }
                                    LODWORD(v5) = v309;
                                  }
                                  break;
                              }
                              break;
                            }
                          }
                        }
LABEL_549:
                        unsigned int v346 = v406;
                        long long v345 = v405;
                        unsigned int v348 = v408;
                        unint64_t v347 = v407;
                        unsigned int v406 = 0;
                        unsigned int v408 = 0;
                        uint64_t v14 = sub_1CC1022E4(a1, a2, v5, (uint64_t)&v345);
                        if (v348 >= 0x41 && v347) {
                          MEMORY[0x1D25D9CB0](v347, 0x1000C8000313F17);
                        }
                        if (v346 >= 0x41 && v345) {
                          goto LABEL_231;
                        }
                        goto LABEL_174;
                      }
                      uint64_t v138 = (_DWORD *)((char *)*BackedgeTakenInfo + 48);
                      uint64_t v139 = 88 * v137;
                      while (*(v138 - 1) == *v138)
                      {
                        v138 += 22;
                        v139 -= 88;
                        if (!v139) {
                          goto LABEL_319;
                        }
                      }
                    }
                    uint64_t v136 = *(const llvm::Loop **)(a1 + 48);
                    goto LABEL_319;
                  }
                  unsigned int v354 = v28;
                  uint64_t v353 = 1 << (v28 - 1);
                  uint64_t v143 = (_DWORD *)llvm::ScalarEvolution::getRangeRef(a1, **(void **)(a2 + 32), 1, 0);
                  llvm::ConstantRange::getSignedMax(v143, (uint64_t)&v349);
                  llvm::APInt::operator+=((uint64_t)&v349, 1uLL);
                  unsigned int v352 = v350;
                  uint64_t v351 = v349;
                  unsigned int v350 = 0;
                  sub_1CC062A8C((unint64_t *)&v353, (uint64_t)&v351, (uint64_t)&v340);
                  llvm::ConstantRange::intersectWith((uint64_t)&v405, (llvm::ConstantRange *)&v340, v302, (uint64_t)&v413);
                  if (v406 >= 0x41 && v405) {
                    MEMORY[0x1D25D9CB0](v405, 0x1000C8000313F17);
                  }
                  unsigned int v405 = (void **)v413;
                  unsigned int v406 = v414;
                  LODWORD(v414) = 0;
                  if (v408 >= 0x41 && v407)
                  {
                    MEMORY[0x1D25D9CB0](v407, 0x1000C8000313F17);
                    unint64_t v407 = (unint64_t)v415;
                    unsigned int v408 = v416;
                    LODWORD(v416) = 0;
                    if (v414 >= 0x41 && v413) {
                      MEMORY[0x1D25D9CB0](v413, 0x1000C8000313F17);
                    }
                  }
                  else
                  {
                    unint64_t v407 = (unint64_t)v415;
                    unsigned int v408 = v416;
                    LODWORD(v416) = 0;
                  }
                  if (v343 >= 0x41 && v342) {
                    MEMORY[0x1D25D9CB0](v342, 0x1000C8000313F17);
                  }
                  if (v341 >= 0x41 && v340) {
                    MEMORY[0x1D25D9CB0](v340, 0x1000C8000313F17);
                  }
                  if (v352 >= 0x41 && v351) {
                    MEMORY[0x1D25D9CB0](v351, 0x1000C8000313F17);
                  }
                  if (v350 >= 0x41 && v349) {
                    MEMORY[0x1D25D9CB0](v349, 0x1000C8000313F17);
                  }
                  if (v354 < 0x41 || (unint64_t v134 = v353) == 0)
                  {
LABEL_310:
                    LODWORD(v5) = v309;
                    goto LABEL_311;
                  }
                }
                MEMORY[0x1D25D9CB0](v134, 0x1000C8000313F17);
                goto LABEL_310;
              }
              if (a2) {
                BOOL v97 = v52 == 14;
              }
              else {
                BOOL v97 = 0;
              }
              if (v97) {
                uint64_t v98 = a2 - 32;
              }
              else {
                uint64_t v98 = 0;
              }
              if (!v97)
              {
                unsigned int v311 = v406;
                uint64_t v310 = v405;
                unsigned int v313 = v408;
                unint64_t v312 = v407;
                unsigned int v406 = 0;
                unsigned int v408 = 0;
                uint64_t v14 = sub_1CC1022E4(a1, a2, v5, (uint64_t)&v310);
                if (v313 >= 0x41 && v312) {
                  MEMORY[0x1D25D9CB0](v312, 0x1000C8000313F17);
                }
                if (v311 >= 0x41 && v310) {
                  goto LABEL_231;
                }
                goto LABEL_174;
              }
              unsigned int v301 = v10;
              unsigned int v308 = v5;
              *(void *)unint64_t v306 = v98;
              unsigned int v99 = *(uint64_t ****)(a2 - 8);
              if (!v99 || *((unsigned __int8 *)v99 + 16) < 0x1Cu || (*((unsigned char *)v99 + 23) & 0x20) == 0) {
                goto LABEL_251;
              }
              uint64_t v100 = ***v99;
              unint64_t v413 = *(void *)(a2 - 8);
              int v101 = *(_DWORD *)(v100 + 2496);
              if (v101)
              {
                uint64_t v102 = *(void *)(v100 + 2480);
                int v103 = v101 - 1;
                unsigned int v104 = v103 & ((v99 >> 4) ^ (v99 >> 9));
                unsigned int v105 = (uint64_t ****)(v102 + 40 * v104);
                uint64_t v106 = *v105;
                if (*v105 == v99)
                {
LABEL_247:
                  uint64_t v111 = *((unsigned int *)v105 + 4);
                  if (v111)
                  {
                    uint64_t v112 = (uint64_t *)(v105[1] + 1);
                    uint64_t v113 = 16 * v111;
                    while (*((_DWORD *)v112 - 2) != 4)
                    {
                      v112 += 2;
                      v113 -= 16;
                      if (!v113) {
                        goto LABEL_251;
                      }
                    }
                    if (*v112)
                    {
                      llvm::getConstantRangeFromMetadata(*v112, (uint64_t)&v413);
                      unsigned int v341 = v414;
                      uint64_t v340 = (void *)v413;
                      unsigned int v343 = v416;
                      uint64_t v342 = v415;
                      char v344 = 1;
                      llvm::ConstantRange::intersectWith((uint64_t)&v405, (llvm::ConstantRange *)&v340, v10, (uint64_t)&v413);
                      if (v406 >= 0x41 && v405) {
                        MEMORY[0x1D25D9CB0](v405, 0x1000C8000313F17);
                      }
                      unsigned int v405 = (void **)v413;
                      unsigned int v406 = v414;
                      LODWORD(v414) = 0;
                      if (v408 >= 0x41 && v407)
                      {
                        MEMORY[0x1D25D9CB0](v407, 0x1000C8000313F17);
                        unint64_t v407 = (unint64_t)v415;
                        unsigned int v408 = v416;
                        LODWORD(v416) = 0;
                        if (v414 >= 0x41 && v413) {
                          MEMORY[0x1D25D9CB0](v413, 0x1000C8000313F17);
                        }
                      }
                      else
                      {
                        unint64_t v407 = (unint64_t)v415;
                        unsigned int v408 = v416;
                      }
LABEL_252:
                      llvm::ScalarEvolution::getRangeForUnknownRecurrence(a1, (const llvm::SCEVUnknown *)(a2 - 32), (uint64_t)&__src);
                      llvm::ConstantRange::intersectWith((uint64_t)&v405, (llvm::ConstantRange *)&__src, 0, (uint64_t)&v413);
                      if (v406 >= 0x41 && v405) {
                        MEMORY[0x1D25D9CB0](v405, 0x1000C8000313F17);
                      }
                      unsigned int v405 = (void **)v413;
                      unsigned int v406 = v414;
                      LODWORD(v414) = 0;
                      if (v408 >= 0x41 && v407)
                      {
                        MEMORY[0x1D25D9CB0](v407, 0x1000C8000313F17);
                        unint64_t v407 = (unint64_t)v415;
                        unsigned int v408 = v416;
                        LODWORD(v416) = 0;
                        if (v414 >= 0x41 && v413) {
                          MEMORY[0x1D25D9CB0](v413, 0x1000C8000313F17);
                        }
                      }
                      else
                      {
                        unint64_t v407 = (unint64_t)v415;
                        unsigned int v408 = v416;
                      }
                      uint64_t v114 = *(void *)(*(void *)a1 + 40);
                      uint64_t v115 = *(void *)(a2 - 8);
                      uint64_t v117 = *(void *)(a1 + 24);
                      uint64_t v116 = *(void *)(a1 + 32);
                      if (!v115
                        || *(unsigned __int8 *)(v115 + 16) < 0x1Cu
                        || (uint64_t v118 = *(void ***)(a2 - 8), !*(void *)(v115 + 40)))
                      {
                        uint64_t v118 = 0;
                      }
                      unint64_t v413 = v114 + 272;
                      uint64_t v414 = v117;
                      v415 = v118;
                      uint64_t v416 = v116;
                      uint64_t v417 = 0;
                      LOBYTE(v418) = 1;
                      sub_1CC16089C((uint64_t *)v115, 0, (const llvm::DataLayout **)&v413, (uint64_t)&v336);
                      if (v337 != v28)
                      {
                        if (v337 >= v28)
                        {
                          if (v337 > v28)
                          {
                            if (v337 >= 0x41) {
                              uint64_t v145 = (uint64_t *)v336;
                            }
                            else {
                              uint64_t v145 = (uint64_t *)&v336;
                            }
                            unint64_t v146 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
                            unint64_t v147 = v146;
                            if (!v28) {
                              unint64_t v147 = 0;
                            }
                            uint64_t v148 = *v145;
                            if (v339 >= 0x41) {
                              uint64_t v149 = v338;
                            }
                            else {
                              uint64_t v149 = &v338;
                            }
                            if (!v28) {
                              unint64_t v146 = 0;
                            }
                            uint64_t v150 = (void **)(v146 & *v149);
                            LODWORD(v414) = v28;
                            unint64_t v413 = v147 & v148;
                            LODWORD(v416) = v28;
                            v415 = v150;
                          }
                          else
                          {
                            LODWORD(v414) = v337;
                            if (v337 > 0x40) {
                              operator new[]();
                            }
                            unint64_t v413 = (unint64_t)v336;
                            LODWORD(v416) = v339;
                            if (v339 > 0x40) {
                              operator new[]();
                            }
                            v415 = (void **)v338;
                          }
                        }
                        else
                        {
                          sub_1CB9F87DC((uint64_t *)&v336, v28, (uint64_t)&v413);
                        }
                        if (v337 >= 0x41 && v336) {
                          MEMORY[0x1D25D9CB0](v336, 0x1000C8000313F17);
                        }
                        unsigned int v336 = (void *)v413;
                        unsigned int v337 = v414;
                        LODWORD(v414) = 0;
                        if (v339 >= 0x41 && v338)
                        {
                          MEMORY[0x1D25D9CB0](v338, 0x1000C8000313F17);
                          int v338 = v415;
                          unsigned int v339 = v416;
                          LODWORD(v416) = 0;
                          if (v414 >= 0x41 && v413) {
                            MEMORY[0x1D25D9CB0](v413, 0x1000C8000313F17);
                          }
                        }
                        else
                        {
                          int v338 = v415;
                          unsigned int v339 = v416;
                        }
                      }
                      uint64_t v168 = *(void *)(a2 - 8);
                      uint64_t v170 = *(void *)(a1 + 24);
                      uint64_t v169 = *(void *)(a1 + 32);
                      if (!v168
                        || *(unsigned __int8 *)(v168 + 16) < 0x1Cu
                        || (unint64_t v171 = *(void ***)(a2 - 8), !*(void *)(v168 + 40)))
                      {
                        unint64_t v171 = 0;
                      }
                      unint64_t v413 = v114 + 272;
                      uint64_t v414 = v170;
                      v415 = v171;
                      uint64_t v416 = v169;
                      uint64_t v417 = 0;
                      LOBYTE(v418) = 1;
                      unsigned int v172 = sub_1CC162D6C((llvm::Constant *)v168, 0, (uint64_t)&v413);
                      unsigned int v173 = v172;
                      uint64_t v174 = **(void **)(a2 - 8);
                      unsigned int v175 = *(_DWORD *)(v174 + 8);
                      if (v175 == 15)
                      {
                        if ((v175 & 0xFE) == 0x12) {
                          unsigned int v175 = *(_DWORD *)(**(void **)(v174 + 16) + 8);
                        }
                        if (v175 < 0x100) {
                          goto LABEL_415;
                        }
                        unsigned int v176 = v175 >> 8;
                        uint64_t v177 = *(unsigned int *)(v114 + 512);
                        uint64_t v178 = *(void *)(v114 + 504);
                        if (v177)
                        {
                          uint64_t v178 = *(void *)(v114 + 504);
                          unint64_t v179 = *(unsigned int *)(v114 + 512);
                          do
                          {
                            unint64_t v180 = v179 >> 1;
                            uint64_t v181 = v178 + 16 * (v179 >> 1);
                            unsigned int v182 = *(_DWORD *)(v181 + 8);
                            uint64_t v183 = v181 + 16;
                            v179 += ~(v179 >> 1);
                            if (v182 < v176) {
                              uint64_t v178 = v183;
                            }
                            else {
                              unint64_t v179 = v180;
                            }
                          }
                          while (v179);
                        }
                        if (v178 == *(void *)(v114 + 504) + 16 * v177 || *(_DWORD *)(v178 + 8) != v176) {
LABEL_415:
                        }
                          uint64_t v178 = *(void *)(v114 + 504);
                        unsigned int v184 = *(_DWORD *)(v178 + 4);
                        BOOL v185 = v172 <= v184 - v28 || (int)(v184 - v28) <= 0;
                        if (!v185 && v184 > v28) {
                          int v187 = v184 - v28;
                        }
                        else {
                          int v187 = 0;
                        }
                        unsigned int v173 = v172 - v187;
                      }
                      if (v173 < 2) {
                        goto LABEL_455;
                      }
                      llvm::APInt::getHiBits((llvm::APInt *)&v336, v173, (uint64_t)&v413);
                      int v188 = v414;
                      if (v414 > 0x40)
                      {
                        int v189 = 0;
                        int64_t v190 = ((unint64_t)v414 + 63) >> 6;
                        do
                        {
                          BOOL v185 = v190-- < 1;
                          if (v185) {
                            break;
                          }
                          unint64_t v191 = *(void *)(v413 + 8 * v190);
                          v189 += __clz(v191);
                        }
                        while (!v191);
                        int v192 = v414 | 0xFFFFFFC0;
                        if ((v414 & 0x3F) == 0) {
                          int v192 = 0;
                        }
                        int v193 = v189 + v192;
                        if (v413) {
                          MEMORY[0x1D25D9CB0](v413, 0x1000C8000313F17);
                        }
                        if (v193 == v188) {
                          goto LABEL_441;
                        }
                      }
                      else if (!v413)
                      {
LABEL_441:
                        llvm::APInt::getHiBits((llvm::APInt *)&v338, v173, (uint64_t)&v413);
                        int v195 = v414;
                        if (v414 <= 0x40)
                        {
                          if (!v413) {
                            goto LABEL_455;
                          }
                          goto LABEL_452;
                        }
                        int v196 = 0;
                        int64_t v197 = ((unint64_t)v414 + 63) >> 6;
                        do
                        {
                          BOOL v185 = v197-- < 1;
                          if (v185) {
                            break;
                          }
                          unint64_t v198 = *(void *)(v413 + 8 * v197);
                          v196 += __clz(v198);
                        }
                        while (!v198);
                        int v199 = v414 | 0xFFFFFFC0;
                        if ((v414 & 0x3F) == 0) {
                          int v199 = 0;
                        }
                        int v200 = v196 + v199;
                        if (v413) {
                          MEMORY[0x1D25D9CB0](v413, 0x1000C8000313F17);
                        }
                        if (v200 != v195)
                        {
LABEL_452:
                          unsigned int v201 = v339 - v173;
                          if (v339 > 0x40 || v201 > 0x3F) {
                            llvm::APInt::setBitsSlowCase(&v338, v201, v339);
                          }
                          else {
                            int v338 = (void *)((unint64_t)v338 | (0xFFFFFFFFFFFFFFFFLL >> -(char)v173 << v201));
                          }
                        }
LABEL_455:
                        uint64_t v202 = v339;
                        if (v339 > 0x40) {
                          operator new[]();
                        }
                        uint64_t v203 = v338;
                        LODWORD(v414) = v337;
                        if (v337 > 0x40) {
                          operator new[]();
                        }
                        if (v337) {
                          unint64_t v204 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v337;
                        }
                        else {
                          unint64_t v204 = 0;
                        }
                        unsigned int v335 = v337;
                        __s2 = (void *)(v204 & ~(unint64_t)v336);
                        llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
                        unsigned int v205 = v335;
                        unint64_t v206 = __s2;
                        unsigned int v335 = 0;
                        if (v202 > 0x40) {
                          BOOL v207 = memcmp(v203, __s2, ((unint64_t)(v202 + 63) >> 3) & 0x3FFFFFF8) == 0;
                        }
                        else {
                          BOOL v207 = v203 == __s2;
                        }
                        char v208 = v207;
                        if (v205 >= 0x41)
                        {
                          if (v206)
                          {
                            MEMORY[0x1D25D9CB0](v206, 0x1000C8000313F17);
                            if (v335 >= 0x41)
                            {
                              if (__s2) {
                                MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
                              }
                            }
                          }
                        }
                        if (v202 >= 0x41 && v203) {
                          MEMORY[0x1D25D9CB0](v203, 0x1000C8000313F17);
                        }
                        if ((v208 & 1) == 0)
                        {
                          unsigned int v209 = v339;
                          if (v339 > 0x40) {
                            operator new[]();
                          }
                          uint64_t v210 = (void **)v338;
                          LODWORD(v414) = v337;
                          if (v337 > 0x40) {
                            operator new[]();
                          }
                          if (v337) {
                            unint64_t v211 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v337;
                          }
                          else {
                            unint64_t v211 = 0;
                          }
                          unsigned int v329 = v337;
                          unint64_t v328 = v211 & ~(unint64_t)v336;
                          llvm::APInt::operator+=((uint64_t)&v328, 1uLL);
                          unsigned int v212 = v329;
                          unsigned int v329 = 0;
                          unsigned int v331 = v209;
                          uint64_t v330 = v210;
                          unsigned int v333 = v212;
                          unint64_t v332 = v328;
                          llvm::ConstantRange::intersectWith((uint64_t)&v405, (llvm::ConstantRange *)&v330, v301, (uint64_t)&v413);
                          if (v406 >= 0x41 && v405) {
                            MEMORY[0x1D25D9CB0](v405, 0x1000C8000313F17);
                          }
                          unsigned int v405 = (void **)v413;
                          unsigned int v406 = v414;
                          LODWORD(v414) = 0;
                          if (v408 >= 0x41 && v407)
                          {
                            MEMORY[0x1D25D9CB0](v407, 0x1000C8000313F17);
                            unint64_t v407 = (unint64_t)v415;
                            unsigned int v408 = v416;
                            LODWORD(v416) = 0;
                            if (v414 >= 0x41 && v413) {
                              MEMORY[0x1D25D9CB0](v413, 0x1000C8000313F17);
                            }
                          }
                          else
                          {
                            unint64_t v407 = (unint64_t)v415;
                            unsigned int v408 = v416;
                            LODWORD(v416) = 0;
                          }
                          if (v333 >= 0x41 && v332) {
                            MEMORY[0x1D25D9CB0](v332, 0x1000C8000313F17);
                          }
                          if (v331 >= 0x41 && v330) {
                            MEMORY[0x1D25D9CB0](v330, 0x1000C8000313F17);
                          }
                          if (v329 >= 0x41 && v328) {
                            MEMORY[0x1D25D9CB0](v328, 0x1000C8000313F17);
                          }
                        }
                        if (v173 >= 2)
                        {
                          unsigned int v319 = v28;
                          unint64_t v318 = (void *)(1 << (v28 - 1));
                          unsigned int v327 = v28;
                          if (v28 == v173 - 1) {
                            char v213 = 63;
                          }
                          else {
                            char v213 = v173 - 1;
                          }
                          uint64_t v214 = (uint64_t)((void)v318 << -(char)v28) >> -(char)v28 >> v213;
                          if (v28) {
                            unint64_t v215 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
                          }
                          else {
                            unint64_t v215 = 0;
                          }
                          unint64_t v326 = v215 & v214;
                          unsigned int v323 = v28;
                          if (v28) {
                            unint64_t v216 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
                          }
                          else {
                            unint64_t v216 = 0;
                          }
                          int v322 = (void *)(v216 & ~(1 << (v28 - 1)));
                          unsigned int v325 = v28;
                          if (v28 == v173 - 1) {
                            char v217 = 63;
                          }
                          else {
                            char v217 = v173 - 1;
                          }
                          uint64_t v218 = (uint64_t)((void)v322 << -(char)v28) >> -(char)v28 >> v217;
                          if (v28) {
                            unint64_t v219 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
                          }
                          else {
                            unint64_t v219 = 0;
                          }
                          unint64_t v324 = v219 & v218;
                          llvm::APInt::operator+=((uint64_t)&v324, 1uLL);
                          unsigned int v220 = v325;
                          unsigned int v325 = 0;
                          unsigned int v331 = v327;
                          uint64_t v330 = (void **)v326;
                          unsigned int v327 = 0;
                          unsigned int v333 = v220;
                          unint64_t v332 = v324;
                          llvm::ConstantRange::intersectWith((uint64_t)&v405, (llvm::ConstantRange *)&v330, v301, (uint64_t)&v413);
                          if (v406 >= 0x41 && v405) {
                            MEMORY[0x1D25D9CB0](v405, 0x1000C8000313F17);
                          }
                          unsigned int v405 = (void **)v413;
                          unsigned int v406 = v414;
                          LODWORD(v414) = 0;
                          if (v408 >= 0x41 && v407)
                          {
                            MEMORY[0x1D25D9CB0](v407, 0x1000C8000313F17);
                            unint64_t v407 = (unint64_t)v415;
                            unsigned int v408 = v416;
                            LODWORD(v416) = 0;
                            if (v414 >= 0x41 && v413) {
                              MEMORY[0x1D25D9CB0](v413, 0x1000C8000313F17);
                            }
                          }
                          else
                          {
                            unint64_t v407 = (unint64_t)v415;
                            unsigned int v408 = v416;
                            LODWORD(v416) = 0;
                          }
                          if (v333 >= 0x41 && v332) {
                            MEMORY[0x1D25D9CB0](v332, 0x1000C8000313F17);
                          }
                          if (v331 >= 0x41 && v330) {
                            MEMORY[0x1D25D9CB0](v330, 0x1000C8000313F17);
                          }
                          if (v325 >= 0x41 && v324) {
                            MEMORY[0x1D25D9CB0](v324, 0x1000C8000313F17);
                          }
                          if (v327 >= 0x41 && v326) {
                            MEMORY[0x1D25D9CB0](v326, 0x1000C8000313F17);
                          }
                        }
                        uint64_t v221 = *(void *)(a2 - 8);
                        if (!v221 || *(unsigned char *)(v221 + 16) != 83) {
                          goto LABEL_639;
                        }
                        uint64_t v222 = *(void *)(a1 + 232);
                        uint64_t v224 = (_DWORD *)(a1 + 244);
                        uint64_t v223 = *(unsigned int *)(a1 + 244);
                        if (v222 == *(void *)(a1 + 224))
                        {
                          if (v223)
                          {
                            uint64_t v225 = 0;
                            uint64_t v226 = 8 * v223;
                            unint64_t v227 = *(void **)(a1 + 232);
                            do
                            {
                              if (*v227 == v221) {
                                goto LABEL_639;
                              }
                              if (*v227 == -2) {
                                uint64_t v225 = v227;
                              }
                              ++v227;
                              v226 -= 8;
                            }
                            while (v226);
                            if (v225)
                            {
                              *uint64_t v225 = v221;
                              --*(_DWORD *)(a1 + 248);
                              goto LABEL_561;
                            }
                          }
                          unsigned int v228 = *(_DWORD *)(a1 + 240);
                          if (v223 < v228)
                          {
                            *uint64_t v224 = v223 + 1;
                            *(void *)(v222 + 8 * v223) = v221;
LABEL_561:
                            LODWORD(v414) = v28;
                            unint64_t v413 = 0;
                            LODWORD(v416) = v28;
                            v415 = 0;
                            int v243 = *(_DWORD *)(v221 + 20);
                            if ((v243 & 0x40000000) != 0)
                            {
                              BOOL v245 = *(llvm::Value ***)(v221 - 8);
                              uint64_t v244 = v243 & 0x7FFFFFF;
                            }
                            else
                            {
                              uint64_t v244 = v243 & 0x7FFFFFF;
                              BOOL v245 = (llvm::Value **)(v221 - 32 * v244);
                            }
                            if (v244)
                            {
                              unsigned int v246 = &v245[4 * v244];
                              while (1)
                              {
                                unsigned int v247 = *v245;
                                uint64_t v248 = *(void *)(a1 + 104);
                                unsigned int v249 = *(_DWORD *)(a1 + 120);
                                if (!v249) {
                                  goto LABEL_572;
                                }
                                unsigned int v250 = ((v247 >> 4) ^ (v247 >> 9)) & (v249 - 1);
                                uint64_t v251 = v248 + 48 * v250;
                                long long v252 = *(llvm::Value **)(v251 + 24);
                                if (v252 != v247) {
                                  break;
                                }
LABEL_573:
                                if (v251 == v248 + 48 * v249 || (uint64_t SCEVIter = *(void *)(v251 + 40)) == 0) {
                                  uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v247);
                                }
                                uint64_t v256 = llvm::ScalarEvolution::getRangeRef(a1, SCEVIter, v308, a4 + 1);
                                unsigned int v331 = *(_DWORD *)(v256 + 8);
                                if (v331 > 0x40) {
                                  operator new[]();
                                }
                                uint64_t v330 = *(void ***)v256;
                                unsigned int v333 = *(_DWORD *)(v256 + 24);
                                if (v333 > 0x40) {
                                  operator new[]();
                                }
                                unint64_t v332 = *(void *)(v256 + 16);
                                llvm::ConstantRange::unionWith((uint64_t)&v413, (unsigned int *)&v330, 0, (uint64_t)&v318);
                                if (v414 >= 0x41 && v413) {
                                  MEMORY[0x1D25D9CB0](v413, 0x1000C8000313F17);
                                }
                                unint64_t v413 = (unint64_t)v318;
                                LODWORD(v414) = v319;
                                unsigned int v319 = 0;
                                if (v416 >= 0x41 && v415)
                                {
                                  MEMORY[0x1D25D9CB0](v415, 0x1000C8000313F17);
                                  v415 = v320;
                                  LODWORD(v416) = v321;
                                  int v321 = 0;
                                  if (v319 >= 0x41 && v318) {
                                    MEMORY[0x1D25D9CB0](v318, 0x1000C8000313F17);
                                  }
                                }
                                else
                                {
                                  v415 = v320;
                                  LODWORD(v416) = v321;
                                }
                                int v257 = v414;
                                if (v414 > 0x40)
                                {
                                  if (!memcmp((const void *)v413, v415, (((unint64_t)v414 + 63) >> 3) & 0x3FFFFFF8))
                                  {
                                    BOOL v260 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v413) == v257;
LABEL_593:
                                    int v258 = v260;
                                    goto LABEL_584;
                                  }
LABEL_583:
                                  int v258 = 0;
                                  goto LABEL_584;
                                }
                                if ((void **)v413 != v415) {
                                  goto LABEL_583;
                                }
                                if (v414)
                                {
                                  BOOL v260 = v413 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v414;
                                  goto LABEL_593;
                                }
                                int v258 = 1;
LABEL_584:
                                if (v333 >= 0x41 && v332) {
                                  MEMORY[0x1D25D9CB0](v332, 0x1000C8000313F17);
                                }
                                if (v331 >= 0x41 && v330) {
                                  MEMORY[0x1D25D9CB0](v330, 0x1000C8000313F17);
                                }
                                v245 += 4;
                                if (v245 == v246) {
                                  int v259 = 1;
                                }
                                else {
                                  int v259 = v258;
                                }
                                if (v259 == 1) {
                                  goto LABEL_611;
                                }
                              }
                              int v253 = 1;
                              while (v252 != (llvm::Value *)-4096)
                              {
                                unsigned int v254 = v250 + v253++;
                                unsigned int v250 = v254 & (v249 - 1);
                                uint64_t v251 = v248 + 48 * v250;
                                long long v252 = *(llvm::Value **)(v251 + 24);
                                if (v252 == v247) {
                                  goto LABEL_573;
                                }
                              }
LABEL_572:
                              uint64_t v251 = v248 + 48 * v249;
                              goto LABEL_573;
                            }
LABEL_611:
                            llvm::ConstantRange::intersectWith((uint64_t)&v405, (llvm::ConstantRange *)&v413, v301, (uint64_t)&v330);
                            if (v406 >= 0x41 && v405) {
                              MEMORY[0x1D25D9CB0](v405, 0x1000C8000313F17);
                            }
                            unsigned int v405 = v330;
                            unsigned int v406 = v331;
                            unsigned int v331 = 0;
                            if (v408 >= 0x41 && v407)
                            {
                              MEMORY[0x1D25D9CB0](v407, 0x1000C8000313F17);
                              unint64_t v407 = v332;
                              unsigned int v408 = v333;
                              unsigned int v333 = 0;
                              if (v331 >= 0x41 && v330) {
                                MEMORY[0x1D25D9CB0](v330, 0x1000C8000313F17);
                              }
                            }
                            else
                            {
                              unint64_t v407 = v332;
                              unsigned int v408 = v333;
                            }
                            unint64_t v261 = (unsigned int *)(a1 + 240);
                            uint64_t v263 = *(void *)(a1 + 224);
                            uint64_t v262 = *(void *)(a1 + 232);
                            if (v262 == v263)
                            {
                              uint64_t v264 = *v224;
                              unsigned int v265 = (void *)(v262 + 8 * v264);
                              if (v264)
                              {
                                uint64_t v266 = 0;
                                uint64_t v267 = 8 * v264;
                                while (*(void *)(v262 + v266) != v221)
                                {
                                  v266 += 8;
                                  if (v267 == v266) {
                                    goto LABEL_632;
                                  }
                                }
                                unsigned int v265 = (void *)(v262 + v266);
                              }
LABEL_632:
                              uint64_t v263 = *(void *)(a1 + 232);
                            }
                            else
                            {
                              uint64_t v268 = *v261;
                              int v269 = v268 - 1;
                              unsigned int v270 = (v268 - 1) & ((v221 >> 4) ^ (v221 >> 9));
                              unsigned int v265 = (void *)(v262 + 8 * v270);
                              uint64_t v271 = *v265;
                              if (*v265 == -1)
                              {
                                unsigned int v272 = 0;
LABEL_659:
                                if (v272) {
                                  unsigned int v265 = v272;
                                }
                                if (*v265 != v221) {
                                  unsigned int v265 = (void *)(v262 + 8 * v268);
                                }
                              }
                              else
                              {
                                unsigned int v272 = 0;
                                int v273 = 1;
                                while (v271 != v221)
                                {
                                  if (v272) {
                                    BOOL v274 = 0;
                                  }
                                  else {
                                    BOOL v274 = v271 == -2;
                                  }
                                  if (v274) {
                                    unsigned int v272 = v265;
                                  }
                                  unsigned int v275 = v270 + v273++;
                                  unsigned int v270 = v275 & v269;
                                  unsigned int v265 = (void *)(v262 + 8 * (v275 & v269));
                                  uint64_t v271 = *v265;
                                  if (*v265 == -1) {
                                    goto LABEL_659;
                                  }
                                }
                              }
                            }
                            if (v262 == v263) {
                              unint64_t v261 = (unsigned int *)(a1 + 244);
                            }
                            if (v265 != (void *)(v262 + 8 * *v261))
                            {
                              *unsigned int v265 = -2;
                              ++*(_DWORD *)(a1 + 248);
                            }
                            if (v416 >= 0x41 && v415) {
                              MEMORY[0x1D25D9CB0](v415, 0x1000C8000313F17);
                            }
                            if (v414 >= 0x41 && v413) {
                              MEMORY[0x1D25D9CB0](v413, 0x1000C8000313F17);
                            }
LABEL_639:
                            unsigned int v315 = v406;
                            unint64_t v314 = v405;
                            unsigned int v317 = v408;
                            unint64_t v316 = v407;
                            unsigned int v406 = 0;
                            unsigned int v408 = 0;
                            uint64_t v14 = sub_1CC1022E4(a1, *(void *)v306 + 32, v308, (uint64_t)&v314);
                            if (v317 >= 0x41 && v316) {
                              MEMORY[0x1D25D9CB0](v316, 0x1000C8000313F17);
                            }
                            if (v315 >= 0x41 && v314) {
                              MEMORY[0x1D25D9CB0](v314, 0x1000C8000313F17);
                            }
                            if (v339 >= 0x41 && v338) {
                              MEMORY[0x1D25D9CB0](v338, 0x1000C8000313F17);
                            }
                            if (v337 >= 0x41 && v336) {
                              MEMORY[0x1D25D9CB0](v336, 0x1000C8000313F17);
                            }
                            if (v388 >= 0x41 && v387) {
                              MEMORY[0x1D25D9CB0](v387, 0x1000C8000313F17);
                            }
                            if (v386 >= 0x41 && __src) {
                              MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                            }
                            if (v344)
                            {
                              if (v343 >= 0x41 && v342) {
                                MEMORY[0x1D25D9CB0](v342, 0x1000C8000313F17);
                              }
                              if (v341 >= 0x41 && v340) {
                                MEMORY[0x1D25D9CB0](v340, 0x1000C8000313F17);
                              }
                              char v344 = 0;
                            }
                            goto LABEL_174;
                          }
                        }
                        else
                        {
                          unsigned int v228 = *(_DWORD *)(a1 + 240);
                        }
                        if (3 * v228 <= 4 * ((int)v223 - *(_DWORD *)(a1 + 248)))
                        {
                          if (v228 >= 0x40) {
                            v228 *= 2;
                          }
                          else {
                            unsigned int v228 = 128;
                          }
                        }
                        else if (v228 - v223 >= v228 >> 3)
                        {
LABEL_529:
                          unsigned int v229 = v228 - 1;
                          unsigned int v230 = (v228 - 1) & ((v221 >> 4) ^ (v221 >> 9));
                          unsigned int v231 = (void *)(v222 + 8 * v230);
                          uint64_t v232 = *v231;
                          if (*v231 != -1)
                          {
                            unint64_t v233 = 0;
                            int v234 = 1;
                            while (v232 != v221)
                            {
                              if (v233) {
                                BOOL v235 = 0;
                              }
                              else {
                                BOOL v235 = v232 == -2;
                              }
                              if (v235) {
                                unint64_t v233 = v231;
                              }
                              unsigned int v236 = v230 + v234++;
                              unsigned int v230 = v236 & v229;
                              unsigned int v231 = (void *)(v222 + 8 * (v236 & v229));
                              uint64_t v232 = *v231;
                              if (*v231 == -1) {
                                goto LABEL_554;
                              }
                            }
                            goto LABEL_639;
                          }
                          unint64_t v233 = 0;
LABEL_554:
                          if (v233) {
                            uint64_t v242 = v233;
                          }
                          else {
                            uint64_t v242 = v231;
                          }
                          if (*v242 == v221) {
                            goto LABEL_639;
                          }
                          if (*v242 == -2) {
                            --*(_DWORD *)(a1 + 248);
                          }
                          else {
                            ++*v224;
                          }
                          *uint64_t v242 = v221;
                          goto LABEL_561;
                        }
                        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 224), v228);
                        unsigned int v228 = *(_DWORD *)(a1 + 240);
                        uint64_t v222 = *(void *)(a1 + 232);
                        goto LABEL_529;
                      }
                      unsigned int v194 = v337 - v173;
                      if (v337 > 0x40 || v194 > 0x3F) {
                        llvm::APInt::setBitsSlowCase(&v336, v194, v337);
                      }
                      else {
                        unsigned int v336 = (void *)((unint64_t)v336 | (0xFFFFFFFFFFFFFFFFLL >> -(char)v173 << v194));
                      }
                      goto LABEL_441;
                    }
                  }
LABEL_251:
                  LOBYTE(v340) = 0;
                  char v344 = 0;
                  goto LABEL_252;
                }
                unsigned int v107 = 0;
                int v108 = 1;
                while (v106 != (uint64_t ***)-4096)
                {
                  if (v107) {
                    BOOL v109 = 0;
                  }
                  else {
                    BOOL v109 = v106 == (uint64_t ***)-8192;
                  }
                  if (v109) {
                    unsigned int v107 = v105;
                  }
                  unsigned int v110 = v104 + v108++;
                  unsigned int v104 = v110 & v103;
                  unsigned int v105 = (uint64_t ****)(v102 + 40 * v104);
                  uint64_t v106 = *v105;
                  if (*v105 == v99) {
                    goto LABEL_247;
                  }
                }
                if (v107) {
                  unint64_t v276 = v107;
                }
                else {
                  unint64_t v276 = v105;
                }
              }
              else
              {
                unint64_t v276 = 0;
              }
              unsigned int v105 = (uint64_t ****)sub_1CC609054(v100 + 2480, (uint64_t)&v413, (uint64_t *)&v413, v276);
              uint64_t v277 = (void **)v413;
              v105[3] = 0;
              v105[4] = 0;
              void *v105 = (uint64_t ***)v277;
              v105[1] = (uint64_t ***)(v105 + 3);
              v105[2] = (uint64_t ***)0x100000000;
              goto LABEL_247;
            }
          }
          else
          {
            unsigned int v404 = v28;
            v403 = 0;
            unsigned int v341 = v28;
            if (v28) {
              unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
            }
            else {
              unint64_t v42 = 0;
            }
            uint64_t v340 = (void *)v42;
            LODWORD(v414) = v28;
            unsigned int v43 = v28;
            uint64_t v44 = v10;
            if (v28 == MinTrailingZeros)
            {
              unint64_t v45 = 0;
              unint64_t v413 = 0;
              unsigned int v402 = MinTrailingZeros;
              unsigned int v43 = MinTrailingZeros;
              if (MinTrailingZeros >= 0x41) {
                operator new[]();
              }
            }
            else
            {
              unint64_t v45 = v42 >> MinTrailingZeros;
              unint64_t v413 = v42 >> MinTrailingZeros;
              unsigned int v402 = v28;
            }
            unint64_t v46 = v45 << MinTrailingZeros;
            if (v43 == MinTrailingZeros) {
              unint64_t v46 = 0;
            }
            if (v43) {
              unint64_t v47 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v43;
            }
            else {
              unint64_t v47 = 0;
            }
            uint64_t v10 = v44;
            unint64_t v401 = v47 & v46;
            llvm::APInt::operator+=((uint64_t)&v401, 1uLL);
            unsigned int v48 = v402;
            unint64_t v49 = v401;
            unsigned int v402 = 0;
            unsigned int v50 = v404;
            uint64_t v51 = v403;
            unsigned int v404 = 0;
            if (v406 >= 0x41 && v405) {
              MEMORY[0x1D25D9CB0](v405, 0x1000C8000313F17);
            }
            unsigned int v405 = v51;
            unsigned int v406 = v50;
            if (v408 >= 0x41 && v407) {
              MEMORY[0x1D25D9CB0](v407, 0x1000C8000313F17);
            }
            unint64_t v407 = v49;
            unsigned int v408 = v48;
            if (v402 < 0x41) {
              goto LABEL_67;
            }
            unint64_t v41 = v401;
            if (!v401) {
              goto LABEL_67;
            }
          }
          MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
          goto LABEL_67;
      }
    }
  }

  return llvm::ScalarEvolution::getRangeRefIter(a1, a2, v5);
}

uint64_t *sub_1CC1022E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3) {
    uint64_t v7 = 808;
  }
  else {
    uint64_t v7 = 784;
  }
  if (a3) {
    uint64_t v8 = a1 + 808;
  }
  else {
    uint64_t v8 = a1 + 784;
  }
  unsigned int v9 = *(_DWORD *)(v8 + 16);
  unsigned int v10 = a2 >> 4;
  if (v9)
  {
    uint64_t v11 = *(void *)(a1 + v7);
    unsigned int v12 = v9 - 1;
    unsigned int v13 = (v9 - 1) & (v10 ^ (a2 >> 9));
    uint64_t v14 = (uint64_t *)(v11 + 40 * v13);
    uint64_t v15 = *v14;
    if (*v14 == a2)
    {
LABEL_17:
      if (*((_DWORD *)v14 + 4) >= 0x41u)
      {
        uint64_t v41 = v14[1];
        if (v41)
        {
          unint64_t v42 = v14;
          MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
          uint64_t v14 = v42;
        }
      }
      v14[1] = *(void *)a4;
      *((_DWORD *)v14 + 4) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = 0;
      if (*((_DWORD *)v14 + 8) >= 0x41u)
      {
        uint64_t v43 = v14[3];
        if (v43)
        {
          uint64_t v44 = v14;
          MEMORY[0x1D25D9CB0](v43, 0x1000C8000313F17);
          uint64_t v14 = v44;
        }
      }
      v14[3] = *(void *)(a4 + 16);
      int v21 = *(_DWORD *)(a4 + 24);
      uint64_t v20 = (_DWORD *)(a4 + 24);
      *((_DWORD *)v14 + 8) = v21;
      goto LABEL_20;
    }
    uint64_t v16 = 0;
    int v17 = 1;
    while (v15 != -4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -8192;
      }
      if (v18) {
        uint64_t v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      uint64_t v14 = (uint64_t *)(v11 + 40 * (v19 & v12));
      uint64_t v15 = *v14;
      if (*v14 == a2) {
        goto LABEL_17;
      }
    }
    if (v16) {
      uint64_t v14 = v16;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  int v23 = *(_DWORD *)(v8 + 8);
  if (4 * v23 + 4 >= 3 * v9)
  {
    sub_1CC136564((uint64_t *)v8, 2 * v9);
    uint64_t v26 = *(void *)(a1 + v7);
    int v27 = *(_DWORD *)(v8 + 16) - 1;
    unsigned int v28 = v27 & (v10 ^ (a2 >> 9));
    uint64_t v14 = (uint64_t *)(v26 + 40 * v28);
    uint64_t v29 = *v14;
    if (*v14 != a2)
    {
      BOOL v30 = 0;
      int v31 = 1;
      while (v29 != -4096)
      {
        if (v30) {
          BOOL v32 = 0;
        }
        else {
          BOOL v32 = v29 == -8192;
        }
        if (v32) {
          BOOL v30 = v14;
        }
        unsigned int v33 = v28 + v31++;
        unsigned int v28 = v33 & v27;
        uint64_t v14 = (uint64_t *)(v26 + 40 * (v33 & v27));
        uint64_t v29 = *v14;
        if (*v14 == a2) {
          goto LABEL_38;
        }
      }
      goto LABEL_50;
    }
LABEL_38:
    uint64_t v24 = a2;
    goto LABEL_26;
  }
  if (v9 + ~v23 - *(_DWORD *)(v8 + 12) <= v9 >> 3)
  {
    sub_1CC136564((uint64_t *)v8, v9);
    uint64_t v34 = *(void *)(a1 + v7);
    int v35 = *(_DWORD *)(v8 + 16) - 1;
    unsigned int v36 = v35 & (v10 ^ (a2 >> 9));
    uint64_t v14 = (uint64_t *)(v34 + 40 * v36);
    uint64_t v37 = *v14;
    if (*v14 != a2)
    {
      BOOL v30 = 0;
      int v38 = 1;
      while (v37 != -4096)
      {
        if (v30) {
          BOOL v39 = 0;
        }
        else {
          BOOL v39 = v37 == -8192;
        }
        if (v39) {
          BOOL v30 = v14;
        }
        unsigned int v40 = v36 + v38++;
        unsigned int v36 = v40 & v35;
        uint64_t v14 = (uint64_t *)(v34 + 40 * (v40 & v35));
        uint64_t v37 = *v14;
        if (*v14 == a2) {
          goto LABEL_38;
        }
      }
LABEL_50:
      if (v30) {
        uint64_t v14 = v30;
      }
      goto LABEL_25;
    }
    goto LABEL_38;
  }
LABEL_25:
  uint64_t v24 = *v14;
LABEL_26:
  ++*(_DWORD *)(v8 + 8);
  if (v24 != -4096) {
    --*(_DWORD *)(v8 + 12);
  }
  uint64_t *v14 = a2;
  *((_DWORD *)v14 + 4) = *(_DWORD *)(a4 + 8);
  v14[1] = *(void *)a4;
  *(_DWORD *)(a4 + 8) = 0;
  int v25 = *(_DWORD *)(a4 + 24);
  uint64_t v20 = (_DWORD *)(a4 + 24);
  *((_DWORD *)v14 + 8) = v25;
  v14[3] = *((void *)v20 - 1);
LABEL_20:
  *uint64_t v20 = 0;
  return v14 + 1;
}

BOOL llvm::ScalarEvolution::isKnownNonPositive(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  uint64_t RangeRef = (_DWORD *)llvm::ScalarEvolution::getRangeRef(this, a2, 1, 0);
  llvm::ConstantRange::getSignedMax(RangeRef, (uint64_t)&v12);
  unsigned int v3 = v13 - 1;
  if (v13 > 0x40)
  {
    if ((*(void *)(v12 + 8 * (v3 >> 6)) >> v3))
    {
      BOOL v5 = 0;
    }
    else
    {
      int v7 = 0;
      int64_t v8 = ((unint64_t)v13 + 63) >> 6;
      do
      {
        if (v8-- < 1) {
          break;
        }
        unint64_t v10 = *(void *)(v12 + 8 * v8);
        v7 += __clz(v10);
      }
      while (!v10);
      unsigned int v11 = v13 | 0xFFFFFFC0;
      if ((v13 & 0x3F) == 0) {
        unsigned int v11 = 0;
      }
      BOOL v5 = v7 + v11 != v13;
    }
    MEMORY[0x1D25D9CB0]();
  }
  else
  {
    BOOL v5 = ((v12 >> v3) & 1) == 0 && v12 != 0;
  }
  return !v5;
}

uint64_t llvm::ScalarEvolution::getRangeForAffineAR@<X0>(llvm::ScalarEvolution *this@<X0>, const llvm::SCEV *a2@<X1>, const llvm::SCEV *a3@<X2>, const llvm::SCEV *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  unsigned int v11 = a2;
  while (2)
  {
    switch(*((_WORD *)v11 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        unsigned int v13 = (llvm::Type **)((char *)v11 + 40);
        goto LABEL_9;
      case 4:
        unsigned int v13 = (llvm::Type **)((char *)v11 + 48);
        goto LABEL_9;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        unint64_t v12 = (const llvm::SCEV **)*((void *)v11 + 4);
        goto LABEL_4;
      case 6:
        unint64_t v12 = (const llvm::SCEV **)((char *)v11 + 40);
LABEL_4:
        unsigned int v11 = *v12;
        continue;
      case 0xE:
        unsigned int v13 = (llvm::Type **)*((void *)v11 - 1);
        goto LABEL_9;
      default:
        unsigned int v13 = (llvm::Type **)*((void *)v11 + 4);
LABEL_9:
        NoopOrZeroExtend = llvm::ScalarEvolution::getNoopOrZeroExtend(this, a4, *v13);
        uint64_t RangeRef = (char **)llvm::ScalarEvolution::getRangeRef(this, NoopOrZeroExtend, 0, 0);
        llvm::ConstantRange::getUnsignedMax(RangeRef, (uint64_t)&v47);
        uint64_t v16 = llvm::ScalarEvolution::getRangeRef(this, a2, 1, 0);
        unsigned int v44 = *(_DWORD *)(v16 + 8);
        if (v44 > 0x40) {
          operator new[]();
        }
        uint64_t v43 = *(void *)v16;
        unsigned int v46 = *(_DWORD *)(v16 + 24);
        if (v46 > 0x40) {
          operator new[]();
        }
        uint64_t v45 = *(void *)(v16 + 16);
        uint64_t v17 = llvm::ScalarEvolution::getRangeRef(this, a3, 1, 0);
        unsigned int v40 = *(_DWORD *)(v17 + 8);
        if (v40 > 0x40) {
          operator new[]();
        }
        uint64_t v39 = *(void *)v17;
        unsigned int v42 = *(_DWORD *)(v17 + 24);
        if (v42 > 0x40) {
          operator new[]();
        }
        uint64_t v41 = *(void *)(v17 + 16);
        llvm::ConstantRange::getSignedMin((uint64_t)&v39, (uint64_t)&v33);
        sub_1CC10308C((uint64_t)&v35, (unsigned int *)&v33, (uint64_t)&v43, (uint64_t)&v47, a5, 1);
        if (v34 >= 0x41 && v33) {
          MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
        }
        llvm::ConstantRange::getSignedMax(&v39, (uint64_t)&v23);
        sub_1CC10308C((uint64_t)&v25, (unsigned int *)&v23, (uint64_t)&v43, (uint64_t)&v47, a5, 1);
        llvm::ConstantRange::unionWith((uint64_t)&v35, (unsigned int *)&v25, 0, (uint64_t)&v29);
        if (v36 >= 0x41 && v35) {
          MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
        }
        uint64_t v35 = v29;
        unsigned int v36 = v30;
        unsigned int v30 = 0;
        if (v38 >= 0x41 && v37)
        {
          MEMORY[0x1D25D9CB0](v37, 0x1000C8000313F17);
          uint64_t v37 = v31;
          unsigned int v38 = v32;
          unsigned int v32 = 0;
          if (v30 >= 0x41 && v29) {
            MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
          }
        }
        else
        {
          uint64_t v37 = v31;
          unsigned int v38 = v32;
          unsigned int v32 = 0;
        }
        if (v28 >= 0x41 && v27) {
          MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
        }
        if (v26 >= 0x41 && v25) {
          MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
        }
        if (v24 >= 0x41 && v23) {
          MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
        }
        BOOL v18 = (char **)llvm::ScalarEvolution::getRangeRef(this, a3, 0, 0);
        llvm::ConstantRange::getUnsignedMax(v18, (uint64_t)&v21);
        uint64_t v19 = llvm::ScalarEvolution::getRangeRef(this, a2, 0, 0);
        unsigned int v26 = *(_DWORD *)(v19 + 8);
        if (v26 > 0x40) {
          operator new[]();
        }
        uint64_t v25 = *(void *)v19;
        unsigned int v28 = *(_DWORD *)(v19 + 24);
        if (v28 > 0x40) {
          operator new[]();
        }
        uint64_t v27 = *(void *)(v19 + 16);
        sub_1CC10308C((uint64_t)&v29, (unsigned int *)&v21, (uint64_t)&v25, (uint64_t)&v47, a5, 0);
        if (v28 >= 0x41 && v27) {
          MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
        }
        if (v26 >= 0x41 && v25) {
          MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
        }
        if (v22 >= 0x41 && v21) {
          MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
        }
        uint64_t result = llvm::ConstantRange::intersectWith((uint64_t)&v35, (llvm::ConstantRange *)&v29, 0, a6);
        if (v32 >= 0x41)
        {
          uint64_t result = v31;
          if (v31) {
            uint64_t result = MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
          }
        }
        if (v30 >= 0x41)
        {
          uint64_t result = v29;
          if (v29) {
            uint64_t result = MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
          }
        }
        if (v38 >= 0x41)
        {
          uint64_t result = v37;
          if (v37) {
            uint64_t result = MEMORY[0x1D25D9CB0](v37, 0x1000C8000313F17);
          }
        }
        if (v36 >= 0x41)
        {
          uint64_t result = v35;
          if (v35) {
            uint64_t result = MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
          }
        }
        if (v42 >= 0x41)
        {
          uint64_t result = v41;
          if (v41) {
            uint64_t result = MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
          }
        }
        if (v40 >= 0x41)
        {
          uint64_t result = v39;
          if (v39) {
            uint64_t result = MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
          }
        }
        if (v46 >= 0x41)
        {
          uint64_t result = v45;
          if (v45) {
            uint64_t result = MEMORY[0x1D25D9CB0](v45, 0x1000C8000313F17);
          }
        }
        if (v44 >= 0x41)
        {
          uint64_t result = v43;
          if (v43) {
            uint64_t result = MEMORY[0x1D25D9CB0](v43, 0x1000C8000313F17);
          }
        }
        if (v48 >= 0x41)
        {
          uint64_t result = v47;
          if (v47) {
            return MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
          }
        }
        return result;
    }
  }
}

uint64_t llvm::ScalarEvolution::getRangeViaFactoring@<X0>(llvm::ConstantInt ****this@<X0>, const llvm::SCEV *a2@<X1>, const llvm::SCEV *a3@<X2>, const llvm::SCEV *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t result = sub_1CC104294((unint64_t)&v30, a5, (uint64_t)a2);
  if (v30)
  {
    sub_1CC104294((unint64_t)&v27, a5, (uint64_t)a3);
    if (v27 && v30 == v27)
    {
      uint64_t v14 = (llvm::ConstantInt *)llvm::ConstantInt::get(***this, (llvm::LLVMContext *)&v31, v13);
      unint64_t Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)this, v14);
      uint64_t v17 = (llvm::ConstantInt *)llvm::ConstantInt::get(***this, (llvm::LLVMContext *)&v28, v16);
      BOOL v18 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)this, v17);
      uint64_t v20 = (llvm::ConstantInt *)llvm::ConstantInt::get(***this, (llvm::LLVMContext *)&v33, v19);
      uint64_t v21 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)this, v20);
      uint64_t v23 = (llvm::ConstantInt *)llvm::ConstantInt::get(***this, (llvm::LLVMContext *)&v29, v22);
      unsigned int v24 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)this, v23);
      llvm::ScalarEvolution::getRangeForAffineAR((llvm::ScalarEvolution *)this, Constant, v18, a4, a5, (uint64_t)v26);
      llvm::ScalarEvolution::getRangeForAffineAR((llvm::ScalarEvolution *)this, v21, v24, a4, a5, (uint64_t)v25);
      llvm::ConstantRange::unionWith((uint64_t)v26, v25, 0, a6);
      sub_1CC05EB8C((uint64_t)v25);
      sub_1CC05EB8C((uint64_t)v26);
    }
    else
    {
      llvm::ConstantRange::ConstantRange((unint64_t *)a6, a5, 1);
    }
    uint64_t result = sub_1CD456C40((uint64_t)&v27);
  }
  else
  {
    *(_DWORD *)(a6 + 8) = a5;
    if (a5 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)a6);
    }
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a5;
    if (!a5) {
      unint64_t v12 = 0;
    }
    *(void *)a6 = v12;
    *(_DWORD *)(a6 + 24) = a5;
    *(void *)(a6 + 16) = *(void *)a6;
  }
  if (v34 >= 0x41)
  {
    uint64_t result = v33;
    if (v33) {
      uint64_t result = MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
    }
  }
  if (v32 >= 0x41)
  {
    uint64_t result = v31;
    if (v31) {
      return MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t sub_1CC10308C(uint64_t this, unsigned int *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6)
{
  uint64_t v11 = this;
  uint64_t v12 = a2[2];
  unsigned int v13 = a2;
  if (v12 >= 0x41)
  {
    int v14 = 0;
    int64_t v15 = (unint64_t)(v12 + 63) >> 6;
    do
    {
      BOOL v16 = v15-- < 1;
      if (v16) {
        break;
      }
      unint64_t v17 = *(void *)(*(void *)a2 + 8 * v15);
      v14 += __clz(v17);
    }
    while (!v17);
    int v18 = v12 | 0xFFFFFFC0;
    if ((v12 & 0x3F) == 0) {
      int v18 = 0;
    }
    if ((v12 - v14 - v18) > 0x40) {
      goto LABEL_10;
    }
    unsigned int v13 = *(unsigned int **)a2;
  }
  if (!*(void *)v13) {
    goto LABEL_28;
  }
LABEL_10:
  uint64_t v19 = *(unsigned int *)(a4 + 8);
  uint64_t v20 = *(void **)a4;
  if (v19 < 0x41) {
    goto LABEL_18;
  }
  int v21 = 0;
  int64_t v22 = (unint64_t)(v19 + 63) >> 6;
  do
  {
    BOOL v16 = v22-- < 1;
    if (v16) {
      break;
    }
    unint64_t v23 = v20[v22];
    v21 += __clz(v23);
  }
  while (!v23);
  int v24 = v19 | 0xFFFFFFC0;
  if ((v19 & 0x3F) == 0) {
    int v24 = 0;
  }
  if ((v19 - v21 - v24) <= 0x40)
  {
    uint64_t v20 = (void *)*v20;
LABEL_18:
    if (v20) {
      goto LABEL_19;
    }
LABEL_28:
    unsigned int v29 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(this + 8) = v29;
    if (v29 > 0x40) {
      operator new[]();
    }
    *(void *)this = *(void *)a3;
    unsigned int v30 = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(this + 24) = v30;
    if (v30 > 0x40) {
      operator new[]();
    }
    uint64_t v31 = *(void *)(a3 + 16);
    goto LABEL_45;
  }
LABEL_19:
  uint64_t v25 = *(unsigned int *)(a3 + 8);
  if (v25 > 0x40)
  {
    if (!memcmp(*(const void **)a3, *(const void **)(a3 + 16), ((unint64_t)(v25 + 63) >> 3) & 0x3FFFFFF8))
    {
      this = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)a3);
      if (this == v25) {
        goto LABEL_80;
      }
    }
  }
  else if (*(void *)a3 == *(void *)(a3 + 16) {
         && (!v25 || *(void *)a3 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v25))
  }
  {
LABEL_80:
    *(_DWORD *)(v11 + 8) = a5;
    if (a5 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)v11);
    }
    if (a5) {
      unint64_t v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a5;
    }
    else {
      unint64_t v34 = 0;
    }
LABEL_44:
    *(void *)uint64_t v11 = v34;
    *(_DWORD *)(v11 + 24) = a5;
    uint64_t v31 = *(void *)v11;
LABEL_45:
    *(void *)(v11 + 16) = v31;
    return this;
  }
  if (a6)
  {
    unsigned int v26 = v12 - 1;
    uint64_t v27 = a2;
    if (v12 >= 0x41) {
      uint64_t v27 = (unsigned int *)(*(void *)a2 + 8 * (v26 >> 6));
    }
    uint64_t v28 = (*(void *)v27 >> v26) & 1;
    sub_1CBF71A98((const llvm::APInt *)a2, (llvm::APInt *)&v77);
    if (a2[2] >= 0x41 && *(void *)a2) {
      MEMORY[0x1D25D9CB0](*(void *)a2, 0x1000C8000313F17);
    }
    *(void *)a2 = v77;
    a2[2] = v78;
    LODWORD(v25) = *(_DWORD *)(a3 + 8);
  }
  else
  {
    LODWORD(v28) = 0;
  }
  unsigned int v76 = v25;
  if (v25 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v75);
  }
  if (v25) {
    unint64_t v32 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
  }
  else {
    unint64_t v32 = 0;
  }
  uint64_t v75 = v32;
  this = llvm::APInt::udiv((uint64_t)&v75, (const llvm::APInt *)a2, (uint64_t)&v77);
  if (v78 > 0x40)
  {
    this = v77;
    unint64_t v47 = (((unint64_t)v78 + 63) >> 3) & 0x3FFFFFF8;
    while (v47)
    {
      unint64_t v48 = *(void *)(v77 + v47 - 8);
      unint64_t v49 = *(void *)(*(void *)a4 - 8 + v47);
      v47 -= 8;
      if (v48 != v49)
      {
        BOOL v50 = v48 <= v49;
LABEL_109:
        this = MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
        BOOL v33 = v50;
        goto LABEL_37;
      }
    }
    BOOL v50 = 0;
    BOOL v33 = 0;
    if (v77) {
      goto LABEL_109;
    }
  }
  else
  {
    BOOL v33 = v77 < *(void *)a4;
  }
LABEL_37:
  if (v76 >= 0x41)
  {
    this = v75;
    if (v75) {
      this = MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
    }
  }
  if (v33)
  {
    *(_DWORD *)(v11 + 8) = a5;
    if (a5 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)v11);
    }
    unint64_t v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a5;
    if (!a5) {
      unint64_t v34 = 0;
    }
    goto LABEL_44;
  }
  llvm::APInt::operator*((uint64_t)a2, (void *)a4, (uint64_t)&v77);
  unsigned int v35 = *(_DWORD *)(a3 + 8);
  if (v35 > 0x40) {
    operator new[]();
  }
  unsigned int v36 = *(uint64_t **)a3;
  unsigned int v74 = *(_DWORD *)(a3 + 24);
  if (v74 > 0x40) {
    operator new[]();
  }
  uint64_t v73 = *(uint64_t **)(a3 + 16);
  llvm::APInt::operator-=((uint64_t)&v73, 1uLL);
  unsigned int v37 = v74;
  unsigned int v38 = v73;
  unsigned int v74 = 0;
  unsigned int v39 = v78;
  uint64_t v66 = (uint64_t)v73;
  if (v28)
  {
    if (v78 > 0x40)
    {
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v77);
    }
    else
    {
      unint64_t v40 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v78;
      if (!v78) {
        unint64_t v40 = 0;
      }
      unint64_t v77 = v40 & ~v77;
    }
    llvm::APInt::operator++((uint64_t)&v77);
    unsigned int v39 = v78;
    if (v78 >= 0x41)
    {
      uint64_t v51 = 0;
      int v52 = (unint64_t *)v77;
      unint64_t v53 = ((unint64_t)v78 + 63) >> 6;
      unsigned int v54 = v36;
      unint64_t v55 = v53;
      do
      {
        uint64_t v56 = *v54++;
        unint64_t v57 = v56 + *v52;
        BOOL v58 = v57 + 1 <= *v52;
        if (v51)
        {
          ++v57;
          uint64_t v51 = v58;
        }
        else
        {
          uint64_t v51 = v57 < *v52;
        }
        *v52++ = v57;
        --v55;
      }
      while (v55);
      *(void *)(v77 + 8 * (v53 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v39;
      unsigned int v39 = v78;
    }
    else
    {
      if (v78) {
        unint64_t v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v78;
      }
      else {
        unint64_t v41 = 0;
      }
      unint64_t v77 = v41 & ((unint64_t)v36 + v77);
    }
    unsigned int v42 = v39;
  }
  else
  {
    if (v78 >= 0x41)
    {
      uint64_t v59 = 0;
      uint64_t v60 = (unint64_t *)v77;
      unint64_t v61 = ((unint64_t)v78 + 63) >> 6;
      unint64_t v62 = v61;
      do
      {
        uint64_t v63 = *v38++;
        unint64_t v64 = v63 + *v60;
        BOOL v65 = v64 + 1 <= *v60;
        if (v59)
        {
          ++v64;
          uint64_t v59 = v65;
        }
        else
        {
          uint64_t v59 = v64 < *v60;
        }
        *v60++ = v64;
        --v62;
      }
      while (v62);
      *(void *)(v77 + 8 * (v61 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v39;
      unsigned int v39 = v78;
    }
    else
    {
      if (v78) {
        unint64_t v43 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v78;
      }
      else {
        unint64_t v43 = 0;
      }
      unint64_t v77 = v43 & ((unint64_t)v73 + v77);
    }
    unsigned int v42 = v35;
  }
  unsigned int v76 = v39;
  unint64_t v44 = v77;
  uint64_t v75 = v77;
  unsigned int v78 = 0;
  if (llvm::ConstantRange::contains((llvm::ConstantRange *)a3, (const llvm::APInt *)&v75))
  {
    *(_DWORD *)(v11 + 8) = a5;
    if (a5 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)v11);
    }
    if (a5) {
      unint64_t v45 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a5;
    }
    else {
      unint64_t v45 = 0;
    }
    *(void *)uint64_t v11 = v45;
    *(_DWORD *)(v11 + 24) = a5;
    *(void *)(v11 + 16) = *(void *)v11;
  }
  else
  {
    if (v28) {
      unint64_t v46 = v44;
    }
    else {
      unint64_t v46 = (unint64_t)v36;
    }
    if (v28)
    {
      unsigned int v76 = 0;
      unsigned int v72 = v37;
      unint64_t v44 = v66;
      unsigned int v37 = 0;
    }
    else
    {
      unsigned int v72 = v39;
      unsigned int v76 = 0;
    }
    unint64_t v71 = v44;
    llvm::APInt::operator+=((uint64_t)&v71, 1uLL);
    unsigned int v70 = v42;
    unint64_t v69 = v46;
    unsigned int v68 = v72;
    unint64_t v67 = v71;
    unsigned int v72 = 0;
    sub_1CC062A8C(&v69, (uint64_t)&v67, v11);
    if (v68 >= 0x41 && v67) {
      MEMORY[0x1D25D9CB0](v67, 0x1000C8000313F17);
    }
    if (v70 >= 0x41 && v69) {
      MEMORY[0x1D25D9CB0](v69, 0x1000C8000313F17);
    }
    if (v72 >= 0x41 && v71) {
      MEMORY[0x1D25D9CB0](v71, 0x1000C8000313F17);
    }
  }
  if (v76 >= 0x41 && v75) {
    MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
  }
  this = v66;
  if (v37 >= 0x41 && v66) {
    this = MEMORY[0x1D25D9CB0](v66, 0x1000C8000313F17);
  }
  if (v78 >= 0x41)
  {
    this = v77;
    if (v77) {
      return MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
    }
  }
  return this;
}

unint64_t llvm::ScalarEvolution::isKnownPredicateViaConstantRanges(llvm::ScalarEvolution *a1, unsigned int a2, llvm::SCEV *a3, const llvm::APInt *a4)
{
  if (sub_1CC11DF8C((uint64_t)a3, (uint64_t)a4))
  {
    if (a2 >= 0x2A) {
      return 0;
    }
    else {
      return (0x2A90000AA00uLL >> a2) & 1;
    }
  }
  if (a2 != 33)
  {
    if (a2 != 32)
    {
      if (a2 - 38 <= 3)
      {
        uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(a1, a3, 1, 0);
        unsigned int v37 = *(_DWORD *)(RangeRef + 8);
        if (v37 > 0x40) {
          operator new[]();
        }
        unsigned int v36 = *(void **)RangeRef;
        unsigned int v39 = *(_DWORD *)(RangeRef + 24);
        if (v39 > 0x40) {
          operator new[]();
        }
        uint64_t v38 = *(void *)(RangeRef + 16);
        unsigned int v9 = a1;
        unint64_t v10 = a4;
        uint64_t v11 = 1;
      }
      else
      {
        uint64_t v8 = llvm::ScalarEvolution::getRangeRef(a1, a3, 0, 0);
        unsigned int v37 = *(_DWORD *)(v8 + 8);
        if (v37 > 0x40) {
          operator new[]();
        }
        unsigned int v36 = *(void **)v8;
        unsigned int v39 = *(_DWORD *)(v8 + 24);
        if (v39 > 0x40) {
          operator new[]();
        }
        uint64_t v38 = *(void *)(v8 + 16);
        unsigned int v9 = a1;
        unint64_t v10 = a4;
        uint64_t v11 = 0;
      }
      uint64_t v12 = llvm::ScalarEvolution::getRangeRef(v9, v10, v11, 0);
      unsigned int v33 = *(_DWORD *)(v12 + 8);
      if (v33 > 0x40) {
        operator new[]();
      }
      uint64_t v32 = *(void *)v12;
      unsigned int v35 = *(_DWORD *)(v12 + 24);
      if (v35 > 0x40) {
        operator new[]();
      }
      uint64_t v34 = *(void *)(v12 + 16);
      BOOL v13 = llvm::ConstantRange::icmp((const llvm::ConstantRange *)&v36, a2, (llvm::ConstantRange *)&v32);
      if (v35 >= 0x41 && v34) {
        MEMORY[0x1D25D9CB0](v34, 0x1000C8000313F17);
      }
      if (v33 >= 0x41 && v32) {
        MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
      }
      if (v39 >= 0x41 && v38) {
        MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
      }
      if (v37 >= 0x41 && v36)
      {
LABEL_52:
        MEMORY[0x1D25D9CB0]();
        return v13;
      }
      return v13;
    }
    return 0;
  }
  uint64_t v16 = llvm::ScalarEvolution::getRangeRef(a1, a3, 1, 0);
  unsigned int v37 = *(_DWORD *)(v16 + 8);
  if (v37 > 0x40) {
    operator new[]();
  }
  unsigned int v36 = *(void **)v16;
  unsigned int v39 = *(_DWORD *)(v16 + 24);
  if (v39 > 0x40) {
    operator new[]();
  }
  uint64_t v38 = *(void *)(v16 + 16);
  uint64_t v17 = llvm::ScalarEvolution::getRangeRef(a1, a4, 1, 0);
  unsigned int v33 = *(_DWORD *)(v17 + 8);
  if (v33 > 0x40) {
    operator new[]();
  }
  uint64_t v32 = *(void *)v17;
  unsigned int v35 = *(_DWORD *)(v17 + 24);
  if (v35 > 0x40) {
    operator new[]();
  }
  uint64_t v34 = *(void *)(v17 + 16);
  if (llvm::ConstantRange::icmp((const llvm::ConstantRange *)&v36, 33, (llvm::ConstantRange *)&v32))
  {
    BOOL v20 = 1;
  }
  else
  {
    uint64_t v18 = llvm::ScalarEvolution::getRangeRef(a1, a3, 0, 0);
    unsigned int v29 = *(_DWORD *)(v18 + 8);
    if (v29 > 0x40) {
      operator new[]();
    }
    uint64_t v28 = *(void *)v18;
    unsigned int v31 = *(_DWORD *)(v18 + 24);
    if (v31 > 0x40) {
      operator new[]();
    }
    uint64_t v30 = *(void *)(v18 + 16);
    uint64_t v19 = llvm::ScalarEvolution::getRangeRef(a1, a4, 0, 0);
    unsigned int v25 = *(_DWORD *)(v19 + 8);
    if (v25 > 0x40) {
      operator new[]();
    }
    uint64_t v24 = *(void *)v19;
    unsigned int v27 = *(_DWORD *)(v19 + 24);
    if (v27 > 0x40) {
      operator new[]();
    }
    uint64_t v26 = *(void *)(v19 + 16);
    BOOL v20 = llvm::ConstantRange::icmp((const llvm::ConstantRange *)&v28, 33, (llvm::ConstantRange *)&v24);
    if (v27 >= 0x41 && v26) {
      MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
    }
    if (v25 >= 0x41 && v24) {
      MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
    }
    if (v31 >= 0x41 && v30) {
      MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
    }
    if (v29 >= 0x41 && v28) {
      MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
    }
  }
  if (v35 >= 0x41 && v34) {
    MEMORY[0x1D25D9CB0](v34, 0x1000C8000313F17);
  }
  if (v33 >= 0x41 && v32) {
    MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
  }
  if (v39 >= 0x41 && v38) {
    MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
  }
  if (v37 >= 0x41 && v36) {
    MEMORY[0x1D25D9CB0](v36, 0x1000C8000313F17);
  }
  if (v20) {
    return 1;
  }
  unint64_t MinusSCEV = llvm::ScalarEvolution::getMinusSCEV(a1, a3, a4, 0, 0);
  if (*(_WORD *)(MinusSCEV + 24) == 15) {
    return 0;
  }
  uint64_t v22 = llvm::ScalarEvolution::getRangeRef(a1, MinusSCEV, 0, 0);
  llvm::ConstantRange::getUnsignedMin(v22, (uint64_t)&v36);
  unsigned int v23 = v37;
  if (v37 >= 0x41)
  {
    if (v23 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v36) > 0x40)
    {
      BOOL v13 = 1;
      if (!v36) {
        return v13;
      }
    }
    else
    {
      BOOL v13 = *v36 != 0;
    }
    goto LABEL_52;
  }
  return v36 != 0;
}

unint64_t sub_1CC104294(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = (void **)(a1 + 8);
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  int v7 = (void **)(a1 + 24);
  *(_DWORD *)(a1 + 32) = 1;
  unsigned int v64 = a2;
  if (a2 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&__dst);
  }
  long long __dst = 0;
  int v8 = *(unsigned __int16 *)(a3 + 24);
  if (a3 && v8 == 4)
  {
    if (*(void *)(a3 + 40) != 2) {
      goto LABEL_34;
    }
    unsigned int v9 = *(void **)(a3 + 32);
    if (*(_WORD *)(*v9 + 24)) {
      goto LABEL_34;
    }
    uint64_t v10 = *(void *)(*v9 + 32);
    unsigned int v11 = *(_DWORD *)(v10 + 32);
    if (v64 > 0x40 || v11 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&__dst, v11);
      if (v64 <= 0x40) {
        long long __dst = *(void **)(v10 + 24);
      }
      else {
        memcpy(__dst, *(const void **)(v10 + 24), (((unint64_t)v64 + 63) >> 3) & 0x3FFFFFF8);
      }
      unsigned int v9 = *(void **)(v3 + 32);
    }
    else
    {
      long long __dst = *(void **)(v10 + 24);
      unsigned int v64 = v11;
    }
    uint64_t v3 = v9[1];
    int v8 = *(unsigned __int16 *)(v3 + 24);
  }
  unsigned int v12 = v8 - 4;
  if ((v8 - 4) >= 0xFFFFFFFD)
  {
    uint64_t v3 = *(void *)(v3 + 32);
    int v13 = *(unsigned __int16 *)(v3 + 24);
  }
  else
  {
    int v13 = v8;
    int v8 = 0;
  }
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  if (v13 != 14) {
    goto LABEL_33;
  }
  uint64_t v14 = *(void *)(v3 - 8);
  unint64_t v58 = a1;
  v59[0] = &v62;
  v59[1] = 0;
  v60[0] = &v61;
  v60[1] = 0;
  if (*(unsigned char *)(v14 + 16) != 85) {
    goto LABEL_33;
  }
  int v15 = *(_DWORD *)(v14 + 20);
  uint64_t v16 = (v15 & 0x40000000) != 0 ? *(uint64_t **)(v14 - 8) : (uint64_t *)(v14 - 32 * (v15 & 0x7FFFFFF));
  uint64_t v17 = *v16;
  if (!v17
    || ((*(void *)a1 = v17, int v18 = *(_DWORD *)(v14 + 20), (v18 & 0x40000000) != 0)
      ? (uint64_t v19 = *(void *)(v14 - 8))
      : (uint64_t v19 = v14 - 32 * (v18 & 0x7FFFFFF)),
        !sub_1CBF528D8((uint64_t)v59, *(unsigned __int8 **)(v19 + 32))
     || ((int v20 = *(_DWORD *)(v14 + 20), (v20 & 0x40000000) != 0)
       ? (uint64_t v21 = *(void *)(v14 - 8))
       : (uint64_t v21 = v14 - 32 * (v20 & 0x7FFFFFF)),
         (sub_1CBF528D8((uint64_t)v60, *(unsigned __int8 **)(v21 + 64)) & 1) == 0)))
  {
LABEL_33:
    *(void *)a1 = 0;
    goto LABEL_34;
  }
  uint64_t v22 = v62;
  if (*(_DWORD *)(a1 + 16) > 0x40u || *(_DWORD *)(v62 + 8) > 0x40u)
  {
    if (v6 != (void **)v62)
    {
      llvm::APInt::reallocate((uint64_t)v6, *(_DWORD *)(v62 + 8));
      uint64_t v41 = *(unsigned int *)(a1 + 16);
      if (v41 <= 0x40) {
        *uint64_t v6 = *(void **)v22;
      }
      else {
        memcpy(*v6, *(const void **)v22, ((unint64_t)(v41 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)v62;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(v22 + 8);
  }
  uint64_t v24 = v61;
  if (*(_DWORD *)(a1 + 32) > 0x40u || *(_DWORD *)(v61 + 8) > 0x40u)
  {
    if (v7 != (void **)v61)
    {
      llvm::APInt::reallocate((uint64_t)v7, *(_DWORD *)(v61 + 8));
      uint64_t v42 = *(unsigned int *)(a1 + 32);
      if (v42 <= 0x40) {
        *int v7 = *(void **)v24;
      }
      else {
        memcpy(*v7, *(const void **)v24, ((unint64_t)(v42 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
  }
  else
  {
    *(void *)(a1 + 24) = *(void *)v61;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v24 + 8);
  }
  if (v12 >= 0xFFFFFFFD)
  {
    if (v8 == 1)
    {
      unsigned int v28 = *(_DWORD *)(a1 + 16);
      if (a2 > 0x40)
      {
        if (v28 != a2) {
          operator new[]();
        }
        sub_1CD0463BC((uint64_t)&v58, (uint64_t)v6);
      }
      else
      {
        unsigned int v29 = (uint64_t *)v6;
        if (v28 >= 0x41) {
          unsigned int v29 = (uint64_t *)*v6;
        }
        uint64_t v30 = *v29;
        LODWORD(v59[0]) = a2;
        if (a2) {
          unint64_t v31 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
        }
        else {
          unint64_t v31 = 0;
        }
        unint64_t v58 = v31 & v30;
      }
      if (*(_DWORD *)(a1 + 16) >= 0x41u && *v6) {
        MEMORY[0x1D25D9CB0](*v6, 0x1000C8000313F17);
      }
      *(void *)(a1 + 8) = v58;
      *(_DWORD *)(a1 + 16) = v59[0];
      unsigned int v32 = *(_DWORD *)(a1 + 32);
      if (a2 <= 0x40)
      {
        unsigned int v33 = v7;
        if (v32 >= 0x41) {
          unsigned int v33 = (void **)*v7;
        }
        unint64_t v27 = (unint64_t)*v33;
        goto LABEL_68;
      }
      if (v32 != a2) {
        operator new[]();
      }
    }
    else
    {
      if (v8 != 2)
      {
        llvm::APInt::sext((uint64_t)v6, a2, (uint64_t)&v58);
        if (*(_DWORD *)(a1 + 16) >= 0x41u && *v6) {
          MEMORY[0x1D25D9CB0](*v6, 0x1000C8000313F17);
        }
        *(void *)(a1 + 8) = v58;
        *(_DWORD *)(a1 + 16) = v59[0];
        llvm::APInt::sext((uint64_t)v7, a2, (uint64_t)&v58);
        goto LABEL_75;
      }
      if (a2 > 0x40)
      {
        if (*(_DWORD *)(a1 + 16) != a2) {
          operator new[]();
        }
        sub_1CD0463BC((uint64_t)&v58, (uint64_t)v6);
      }
      else
      {
        unint64_t v25 = (unint64_t)*v6;
        LODWORD(v59[0]) = a2;
        if (a2) {
          unint64_t v26 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
        }
        else {
          unint64_t v26 = 0;
        }
        unint64_t v58 = v26 & v25;
      }
      if (*(_DWORD *)(a1 + 16) >= 0x41u && *v6) {
        MEMORY[0x1D25D9CB0](*v6, 0x1000C8000313F17);
      }
      *(void *)(a1 + 8) = v58;
      *(_DWORD *)(a1 + 16) = v59[0];
      if (a2 <= 0x40)
      {
        unint64_t v27 = (unint64_t)*v7;
LABEL_68:
        LODWORD(v59[0]) = a2;
        if (a2) {
          unint64_t v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
        }
        else {
          unint64_t v34 = 0;
        }
        unint64_t v58 = v34 & v27;
        goto LABEL_75;
      }
      if (*(_DWORD *)(a1 + 32) != a2) {
        operator new[]();
      }
    }
    sub_1CD0463BC((uint64_t)&v58, (uint64_t)v7);
LABEL_75:
    if (*(_DWORD *)(a1 + 32) >= 0x41u && *v7) {
      MEMORY[0x1D25D9CB0](*v7, 0x1000C8000313F17);
    }
    *(void *)(a1 + 24) = v58;
    *(_DWORD *)(a1 + 32) = v59[0];
  }
  uint64_t v35 = *(unsigned int *)(a1 + 16);
  if (v35 >= 0x41)
  {
    uint64_t v43 = 0;
    BOOL v44 = 0;
    unint64_t v45 = (char *)*v6;
    unsigned int v36 = (uint64_t *)__dst;
    unint64_t v46 = (unint64_t)(v35 + 63) >> 6;
    do
    {
      unint64_t v47 = *(void *)&v45[v43 * 8];
      unint64_t v48 = v36[v43] + v47;
      BOOL v49 = v48 < v47;
      BOOL v50 = v48 + 1 <= v47;
      if (v44)
      {
        ++v48;
        BOOL v44 = v50;
      }
      else
      {
        BOOL v44 = v49;
      }
      *(void *)&v45[v43 * 8] = v48;
      ++v43;
    }
    while (v46 != v43);
    *((void *)*v6 + (v46 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v35;
  }
  else
  {
    unsigned int v36 = (uint64_t *)__dst;
    if (v35) {
      unint64_t v37 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v35;
    }
    else {
      unint64_t v37 = 0;
    }
    *uint64_t v6 = (void *)(v37 & ((unint64_t)__dst + (void)*v6));
  }
  uint64_t v38 = *(unsigned int *)(a1 + 32);
  if (v38 >= 0x41)
  {
    uint64_t v51 = 0;
    int v52 = (unint64_t *)*v7;
    unint64_t v53 = (unint64_t)(v38 + 63) >> 6;
    unint64_t v54 = v53;
    do
    {
      uint64_t v55 = *v36++;
      unint64_t v56 = v55 + *v52;
      BOOL v57 = v56 + 1 <= *v52;
      if (v51)
      {
        ++v56;
        uint64_t v51 = v57;
      }
      else
      {
        uint64_t v51 = v56 < *v52;
      }
      *v52++ = v56;
      --v54;
    }
    while (v54);
    *((void *)*v7 + (v53 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v38;
  }
  else
  {
    unint64_t v39 = (unint64_t)v36 + (void)*v7;
    if (v38) {
      unint64_t v40 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v38;
    }
    else {
      unint64_t v40 = 0;
    }
    *int v7 = (void *)(v40 & v39);
  }
LABEL_34:
  if (v64 >= 0x41 && __dst) {
    MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
  }
  return a1;
}

uint64_t llvm::ScalarEvolution::getNoWrapFlagsFromUB(llvm::ScalarEvolution *this, const llvm::Value *a2)
{
  if (*((unsigned char *)a2 + 16) == 5) {
    return 0;
  }
  unsigned int v2 = *((unsigned char *)a2 + 17) & 6;
  if ((*((unsigned char *)a2 + 17) & 6) == 0) {
    return 0;
  }
  if (llvm::ScalarEvolution::isSCEVExprNeverPoison(this, a2)) {
    return v2;
  }
  return 0;
}

uint64_t llvm::ScalarEvolution::isSCEVExprNeverPoison(llvm::ScalarEvolution *this, const llvm::Instruction *a2)
{
  v25[6] = *MEMORY[0x1E4F143B8];
  if (!sub_1CC16BAFC((uint64_t)a2, 1, 0)) {
    return 0;
  }
  unsigned int v23 = v25;
  uint64_t v24 = 0x600000000;
  int v4 = *((_DWORD *)a2 + 5);
  if ((v4 & 0x40000000) != 0)
  {
    uint64_t v6 = (char *)*((void *)a2 - 1);
    uint64_t v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v5 = v4 & 0x7FFFFFF;
    uint64_t v6 = (char *)a2 - 32 * v5;
  }
  unsigned int v7 = 0;
  if (!v5)
  {
    int v18 = v25;
    goto LABEL_21;
  }
  int v8 = &v6[32 * v5];
  do
  {
    unsigned int v9 = *(llvm::Value **)v6;
    if ((*(_DWORD *)(**(void **)v6 + 8) & 0xFD) != 0xD) {
      goto LABEL_18;
    }
    uint64_t v10 = *((void *)this + 13);
    unsigned int v11 = *((_DWORD *)this + 30);
    if (v11)
    {
      unsigned int v12 = (v11 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      uint64_t v13 = v10 + 48 * v12;
      uint64_t v14 = *(llvm::Value **)(v13 + 24);
      if (v14 == v9) {
        goto LABEL_14;
      }
      int v15 = 1;
      while (v14 != (llvm::Value *)-4096)
      {
        unsigned int v16 = v12 + v15++;
        unsigned int v12 = v16 & (v11 - 1);
        uint64_t v13 = v10 + 48 * v12;
        uint64_t v14 = *(llvm::Value **)(v13 + 24);
        if (v14 == v9) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v13 = v10 + 48 * v11;
LABEL_14:
    if (v13 == v10 + 48 * v11 || (uint64_t SCEVIter = *(void *)(v13 + 40)) == 0)
    {
      uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter(this, v9);
      unsigned int v7 = v24;
    }
    if (v7 >= HIDWORD(v24)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v23 + v7) = SCEVIter;
    unsigned int v7 = v24 + 1;
    LODWORD(v24) = v24 + 1;
LABEL_18:
    v6 += 32;
  }
  while (v6 != v8);
  int v18 = (uint64_t *)v23;
LABEL_21:
  DefiningScopeBound = llvm::ScalarEvolution::getDefiningScopeBound(this, v18, v7, &v22);
  uint64_t isGuaranteedToTransferExecutionTo = llvm::ScalarEvolution::isGuaranteedToTransferExecutionTo(this, DefiningScopeBound, a2);
  if (v23 != v25) {
    free(v23);
  }
  return isGuaranteedToTransferExecutionTo;
}

uint64_t llvm::ScalarEvolution::getNonTrivialDefiningScopeBound(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  int v2 = *((unsigned __int16 *)a2 + 12);
  if (a2 && v2 == 7)
  {
    uint64_t v3 = *(void *)(**(void **)(*((void *)a2 + 6) + 32) + 48);
    if (v3) {
      return v3 - 24;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (!a2) {
      return 0;
    }
    if (v2 != 14) {
      return 0;
    }
    uint64_t result = *((void *)a2 - 1);
    if (!result || *(unsigned __int8 *)(result + 16) <= 0x1Bu) {
      return 0;
    }
  }
  return result;
}

void sub_1CC104DBC(uint64_t a1, uint64_t a2)
{
  unint64_t v45 = (char *)v49;
  unint64_t v46 = (char *)v49;
  uint64_t v47 = 4;
  int v48 = 0;
  unsigned int v2 = *(unsigned __int16 *)(a1 + 24);
  if (v2 > 0xD) {
    goto LABEL_51;
  }
  if (((1 << v2) & 0x1FB0) == 0)
  {
    if (((1 << v2) & 0x200E) != 0)
    {
      uint64_t v24 = *(void *)(a1 + 32);
      HIDWORD(v47) = 1;
      v49[0] = v24;
      unsigned int v25 = *(_DWORD *)(a2 + 8);
      if (v25 >= *(_DWORD *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a2 + 8 * v25) = v24;
      ++*(_DWORD *)(a2 + 8);
      goto LABEL_51;
    }
    if (v2 != 6) {
      goto LABEL_51;
    }
    unint64_t v26 = (uint64_t *)(a1 + 32);
    unint64_t v27 = (uint64_t *)(a1 + 48);
    while (1)
    {
      uint64_t v28 = *v26;
      unsigned int v29 = v46;
      uint64_t v30 = HIDWORD(v47);
      if (v46 == v45)
      {
        if (HIDWORD(v47))
        {
          unint64_t v31 = 0;
          uint64_t v32 = 8 * HIDWORD(v47);
          unsigned int v33 = v46;
          while (*(void *)v33 != v28)
          {
            if (*(void *)v33 == -2) {
              unint64_t v31 = v33;
            }
            v33 += 8;
            v32 -= 8;
            if (!v32)
            {
              if (!v31) {
                goto LABEL_64;
              }
              *(void *)unint64_t v31 = v28;
              --v48;
              goto LABEL_88;
            }
          }
          goto LABEL_90;
        }
LABEL_64:
        unsigned int v34 = v47;
        if (HIDWORD(v47) < v47)
        {
          ++HIDWORD(v47);
          *(void *)&v46[8 * v30] = v28;
          goto LABEL_88;
        }
      }
      else
      {
        unsigned int v34 = v47;
      }
      if (3 * v34 <= 4 * (HIDWORD(v47) - v48)) {
        break;
      }
      if (v34 - HIDWORD(v47) < v34 >> 3) {
        goto LABEL_97;
      }
LABEL_69:
      unsigned int v35 = v34 - 1;
      unsigned int v36 = (v34 - 1) & ((v28 >> 4) ^ (v28 >> 9));
      unint64_t v37 = &v29[8 * v36];
      uint64_t v38 = *(void *)v37;
      if (*(void *)v37 != -1)
      {
        unint64_t v39 = 0;
        int v40 = 1;
        while (v38 != v28)
        {
          if (v39) {
            BOOL v41 = 0;
          }
          else {
            BOOL v41 = v38 == -2;
          }
          if (v41) {
            unint64_t v39 = v37;
          }
          unsigned int v42 = v36 + v40++;
          unsigned int v36 = v42 & v35;
          unint64_t v37 = &v29[8 * (v42 & v35)];
          uint64_t v38 = *(void *)v37;
          if (*(void *)v37 == -1) {
            goto LABEL_81;
          }
        }
        goto LABEL_90;
      }
      unint64_t v39 = 0;
LABEL_81:
      if (v39) {
        uint64_t v43 = v39;
      }
      else {
        uint64_t v43 = v37;
      }
      if (*(void *)v43 == v28) {
        goto LABEL_90;
      }
      if (*(void *)v43 == -2) {
        --v48;
      }
      else {
        ++HIDWORD(v47);
      }
      *(void *)uint64_t v43 = v28;
LABEL_88:
      unint64_t v44 = *(unsigned int *)(a2 + 8);
      if (v44 >= *(unsigned int *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a2 + 8 * v44) = v28;
      ++*(_DWORD *)(a2 + 8);
LABEL_90:
      if (++v26 == v27) {
        goto LABEL_51;
      }
    }
    if (v34 >= 0x40) {
      v34 *= 2;
    }
    else {
      unsigned int v34 = 128;
    }
LABEL_97:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v45, v34);
    unsigned int v34 = v47;
    unsigned int v29 = v46;
    goto LABEL_69;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)(a1 + 32);
    uint64_t v6 = &v5[v4];
    while (1)
    {
      uint64_t v7 = *v5;
      int v8 = v46;
      uint64_t v9 = HIDWORD(v47);
      if (v46 == v45)
      {
        if (HIDWORD(v47))
        {
          uint64_t v10 = 0;
          uint64_t v11 = 8 * HIDWORD(v47);
          unsigned int v12 = v46;
          while (*(void *)v12 != v7)
          {
            if (*(void *)v12 == -2) {
              uint64_t v10 = v12;
            }
            v12 += 8;
            v11 -= 8;
            if (!v11)
            {
              if (!v10) {
                goto LABEL_13;
              }
              *(void *)uint64_t v10 = v7;
              --v48;
              goto LABEL_37;
            }
          }
          goto LABEL_39;
        }
LABEL_13:
        unsigned int v13 = v47;
        if (HIDWORD(v47) < v47)
        {
          ++HIDWORD(v47);
          *(void *)&v46[8 * v9] = v7;
          goto LABEL_37;
        }
      }
      else
      {
        unsigned int v13 = v47;
      }
      if (3 * v13 <= 4 * (HIDWORD(v47) - v48)) {
        break;
      }
      if (v13 - HIDWORD(v47) < v13 >> 3) {
        goto LABEL_46;
      }
LABEL_18:
      unsigned int v14 = v13 - 1;
      unsigned int v15 = (v13 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      unsigned int v16 = &v8[8 * v15];
      uint64_t v17 = *(void *)v16;
      if (*(void *)v16 != -1)
      {
        int v18 = 0;
        int v19 = 1;
        while (v17 != v7)
        {
          if (v18) {
            BOOL v20 = 0;
          }
          else {
            BOOL v20 = v17 == -2;
          }
          if (v20) {
            int v18 = v16;
          }
          unsigned int v21 = v15 + v19++;
          unsigned int v15 = v21 & v14;
          unsigned int v16 = &v8[8 * (v21 & v14)];
          uint64_t v17 = *(void *)v16;
          if (*(void *)v16 == -1) {
            goto LABEL_30;
          }
        }
        goto LABEL_39;
      }
      int v18 = 0;
LABEL_30:
      if (v18) {
        char v22 = v18;
      }
      else {
        char v22 = v16;
      }
      if (*(void *)v22 == v7) {
        goto LABEL_39;
      }
      if (*(void *)v22 == -2) {
        --v48;
      }
      else {
        ++HIDWORD(v47);
      }
      *(void *)char v22 = v7;
LABEL_37:
      unint64_t v23 = *(unsigned int *)(a2 + 8);
      if (v23 >= *(unsigned int *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a2 + 8 * v23) = v7;
      ++*(_DWORD *)(a2 + 8);
LABEL_39:
      if (++v5 == v6) {
        goto LABEL_51;
      }
    }
    if (v13 >= 0x40) {
      v13 *= 2;
    }
    else {
      unsigned int v13 = 128;
    }
LABEL_46:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v45, v13);
    unsigned int v13 = v47;
    int v8 = v46;
    goto LABEL_18;
  }
LABEL_51:
  if (v46 != v45) {
    free(v46);
  }
}

uint64_t llvm::ScalarEvolution::getLoopProperties(llvm::ScalarEvolution *this, const llvm::Loop *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)this + 89);
  uint64_t v5 = (const llvm::Value *)*((unsigned int *)this + 182);
  unsigned int v6 = a2 >> 4;
  if (v5)
  {
    LODWORD(v7) = (v5 - 1) & (v6 ^ (a2 >> 9));
    uint64_t v8 = v4 + 16 * v7;
    uint64_t v9 = *(const llvm::Loop **)v8;
    if (*(const llvm::Loop **)v8 == a2) {
      goto LABEL_8;
    }
    int v10 = 1;
    while (v9 != (const llvm::Loop *)-4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v5 - 1);
      uint64_t v9 = *(const llvm::Loop **)(v4 + 16 * v7);
      if (v9 == a2)
      {
        uint64_t v8 = v4 + 16 * v7;
        goto LABEL_8;
      }
    }
  }
  uint64_t v8 = v4 + 16 * (void)v5;
LABEL_8:
  if (v8 != v4 + 16 * (void)v5) {
    return *(unsigned __int16 *)(v8 + 8);
  }
  uint64_t v13 = *((void *)a2 + 4);
  uint64_t v14 = *((void *)a2 + 5);
  if (v14 != v13)
  {
    unsigned int v60 = a2 >> 4;
    uint64_t v62 = a2;
    int v15 = 1;
    uint64_t v16 = 1;
    while (1)
    {
      uint64_t v17 = *(void *)v13 + 40;
      for (uint64_t i = *(void *)(*(void *)v13 + 48); i != v17; uint64_t i = *(void *)(i + 8))
      {
        if (i) {
          uint64_t v19 = i - 24;
        }
        else {
          uint64_t v19 = 0;
        }
        int v20 = *(unsigned __int8 *)(v19 + 16);
        if (v20 != 84)
        {
          uint64_t v21 = 0;
          switch(*(unsigned char *)(v19 + 16))
          {
            case 0x1D:
            case 0x22:
            case 0x23:
              goto LABEL_31;
            case 0x1E:
            case 0x1F:
            case 0x20:
            case 0x21:
            case 0x25:
              goto LABEL_20;
            case 0x24:
            case 0x26:
              if ((*(_WORD *)(v19 + 18) & 1) == 0) {
                goto LABEL_21;
              }
              goto LABEL_20;
            default:
              if (v20 != 80) {
                goto LABEL_20;
              }
              uint64_t v48 = *(void *)(*(void *)(v19 + 40) + 56);
              int v49 = *(_DWORD *)(v48 + 20);
              if ((v49 & 0x40000000) != 0) {
                BOOL v50 = *(llvm::Value ***)(v48 - 8);
              }
              else {
                BOOL v50 = (llvm::Value **)(v48 - 32 * (v49 & 0x7FFFFFF));
              }
              if (llvm::classifyEHPersonality(*v50, v5) == 10) {
                goto LABEL_22;
              }
              goto LABEL_21;
          }
        }
        uint64_t v27 = *(void *)(v19 + 64);
        if ((!v27 || (*(unsigned char *)(v27 + 16) & 0x20) == 0)
          && !llvm::CallBase::hasFnAttrOnCalledFunction(v19, 37))
        {
LABEL_21:
          uint64_t v16 = 0;
          goto LABEL_22;
        }
LABEL_20:
        if (!llvm::Instruction::willReturn((llvm::Instruction *)v19)) {
          goto LABEL_21;
        }
LABEL_22:
        int v20 = *(unsigned __int8 *)(v19 + 16);
        if (i && v20 == 61)
        {
          int v25 = *(unsigned __int16 *)(v19 + 18);
          int v26 = 897;
LABEL_54:
          if ((v25 & v26) != 0) {
            goto LABEL_40;
          }
          goto LABEL_41;
        }
        if (!i || v20 != 84)
        {
          if (i && v20 == 36 || i && v20 == 38)
          {
            if ((*(_WORD *)(v19 + 18) & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_41;
          }
          uint64_t v21 = v16;
LABEL_31:
          uint64_t v16 = v21;
          if (v20 == 34) {
            goto LABEL_40;
          }
          goto LABEL_32;
        }
        uint64_t v28 = *(void *)(v19 + 64);
        if (!v28 || (*(unsigned char *)(v28 + 16) & 0x20) == 0)
        {
          if (!llvm::CallBase::hasFnAttrOnCalledFunction(v19, 37)) {
            goto LABEL_40;
          }
          int v20 = *(unsigned __int8 *)(v19 + 16);
LABEL_32:
          uint64_t v22 = (v20 - 33);
          if (v22 > 0x37) {
            goto LABEL_41;
          }
          if (((1 << v22) & 0x808001D0000010) != 0) {
            goto LABEL_40;
          }
          if (((1 << v22) & 0x8000000000041) == 0)
          {
            if (v22 != 27) {
              goto LABEL_41;
            }
            int v25 = *(unsigned __int16 *)(v19 + 18);
            int v26 = 769;
            goto LABEL_54;
          }
        }
        uint64_t v23 = *(void *)(v19 + 64);
        if (!v23 || (*(unsigned char *)(v23 + 17) & 0x30) == 0)
        {
          int v24 = *(_DWORD *)(v19 + 20);
          if (v24 < 0)
          {
            uint64_t v51 = v19 - 32 * (v24 & 0x7FFFFFF);
            uint64_t v54 = *(void *)(v51 - 8);
            uint64_t v52 = v51 - 8;
            uint64_t v53 = v54;
            if (v54)
            {
              uint64_t v55 = -v53;
              while (1)
              {
                unsigned int v56 = *(_DWORD *)(*(void *)(v52 + v55) + 8);
                BOOL v57 = v56 > 7;
                int v58 = (1 << v56) & 0x83;
                if (v57 || v58 == 0) {
                  break;
                }
                v55 += 16;
                if (!v55) {
                  goto LABEL_38;
                }
              }
LABEL_40:
              int v15 = 0;
              goto LABEL_41;
            }
          }
LABEL_38:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v19, 45) & 1) == 0
            && (llvm::CallBase::hasFnAttrOnCalledFunction(v19, 44) & 1) == 0)
          {
            goto LABEL_40;
          }
        }
LABEL_41:
        if (!(v16 | v15))
        {
          uint64_t v16 = 0;
          int v15 = 0;
          break;
        }
      }
      v13 += 8;
      if (v13 == v14)
      {
        uint64_t v3 = this;
        a2 = v62;
        uint64_t v4 = *((void *)this + 89);
        LODWORD(v5) = *((_DWORD *)this + 182);
        unsigned int v6 = v60;
        goto LABEL_59;
      }
    }
  }
  LOBYTE(v16) = 1;
  LOWORD(v15) = 1;
LABEL_59:
  if (v5)
  {
    int v29 = v5 - 1;
    unsigned int v30 = (v5 - 1) & (v6 ^ (a2 >> 9));
    uint64_t v8 = v4 + 16 * v30;
    unint64_t v31 = *(const llvm::Loop **)v8;
    if (*(const llvm::Loop **)v8 == a2) {
      return *(unsigned __int16 *)(v8 + 8);
    }
    uint64_t v32 = 0;
    int v33 = 1;
    while (v31 != (const llvm::Loop *)-4096)
    {
      if (v32) {
        BOOL v34 = 0;
      }
      else {
        BOOL v34 = v31 == (const llvm::Loop *)-8192;
      }
      if (v34) {
        uint64_t v32 = v8;
      }
      unsigned int v35 = v30 + v33++;
      unsigned int v30 = v35 & v29;
      uint64_t v8 = v4 + 16 * (v35 & v29);
      unint64_t v31 = *(const llvm::Loop **)v8;
      if (*(const llvm::Loop **)v8 == a2) {
        return *(unsigned __int16 *)(v8 + 8);
      }
    }
    if (v32) {
      uint64_t v8 = v32;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v36 = (uint64_t)v3 + 712;
  int v37 = *((_DWORD *)v3 + 180);
  if (4 * v37 + 4 >= (3 * v5))
  {
    sub_1CC13C984(v36, 2 * v5);
    uint64_t v40 = *((void *)v3 + 89);
    int v41 = *((_DWORD *)v3 + 182) - 1;
    unsigned int v42 = v41 & (v6 ^ (a2 >> 9));
    uint64_t v8 = v40 + 16 * v42;
    uint64_t v43 = *(const llvm::Loop **)v8;
    if (*(const llvm::Loop **)v8 == a2)
    {
LABEL_88:
      uint64_t v38 = a2;
      goto LABEL_76;
    }
    uint64_t v44 = 0;
    int v45 = 1;
    while (v43 != (const llvm::Loop *)-4096)
    {
      if (v44) {
        BOOL v46 = 0;
      }
      else {
        BOOL v46 = v43 == (const llvm::Loop *)-8192;
      }
      if (v46) {
        uint64_t v44 = v8;
      }
      unsigned int v47 = v42 + v45++;
      unsigned int v42 = v47 & v41;
      uint64_t v8 = v40 + 16 * (v47 & v41);
      uint64_t v43 = *(const llvm::Loop **)v8;
      if (*(const llvm::Loop **)v8 == a2) {
        goto LABEL_88;
      }
    }
    if (v44) {
      uint64_t v8 = v44;
    }
  }
  else if ((int)v5 + ~v37 - *((_DWORD *)v3 + 181) <= v5 >> 3)
  {
    sub_1CC13C984(v36, (int)v5);
    uint64_t v63 = 0;
    sub_1CC0B17CC(*((void *)v3 + 89), *((_DWORD *)v3 + 182), (uint64_t)a2, &v63);
    uint64_t v8 = v63;
  }
  uint64_t v38 = *(const llvm::Loop **)v8;
LABEL_76:
  __int16 v39 = v16 | (unsigned __int16)((_WORD)v15 << 8);
  ++*((_DWORD *)v3 + 180);
  if (v38 != (const llvm::Loop *)-4096) {
    --*((_DWORD *)v3 + 181);
  }
  *(void *)uint64_t v8 = a2;
  *(_WORD *)(v8 + 8) = v39;
  return *(unsigned __int16 *)(v8 + 8);
}

uint64_t llvm::ScalarEvolution::loopIsFiniteByAssumption(llvm::ScalarEvolution *this, const llvm::Loop *a2)
{
  uint64_t v4 = *(void *)(*(void *)(**((void **)a2 + 4) + 56) + 112);
  if (v4 && (*(unsigned char *)(v4 + 20) & 2) != 0) {
    return 1;
  }
  uint64_t result = llvm::isMustProgress(a2, a2);
  if (result) {
    return (llvm::ScalarEvolution::getLoopProperties(this, a2) >> 8) & 1;
  }
  return result;
}

const llvm::SCEV *llvm::ScalarEvolution::createSCEV(const llvm::APInt **this, llvm::Value *a2)
{
  uint64_t v803 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFD) != 0xD) {
    goto LABEL_63;
  }
  unsigned int v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 >= 0x1C) {
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
  }
  if (v4 != 1)
  {
    if (v4 != 5)
    {
      if (v4 == 16)
      {
        return (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)this, a2);
      }
      goto LABEL_63;
    }
    sub_1CC0F7D20((uint64_t)v791, (uint64_t)a2, this[4]);
    if (!LOBYTE(v793[1])) {
      goto LABEL_687;
    }
    switch(LODWORD(v791[0]))
    {
      case 0xD:
        unint64_t v797 = (unint64_t)&v799;
        uint64_t v798 = 0x400000000;
        while (2)
        {
          uint64_t v7 = v793[0];
          if (!v793[0]) {
            goto LABEL_34;
          }
          uint64_t v8 = this[13];
          unsigned int v9 = *((_DWORD *)this + 30);
          if (!v9) {
            goto LABEL_20;
          }
          unsigned int v10 = (v9 - 1) & ((LODWORD(v793[0]) >> 4) ^ (LODWORD(v793[0]) >> 9));
          int v11 = (char *)v8 + 48 * v10;
          unsigned int v12 = (llvm::Instruction *)*((void *)v11 + 3);
          if (v12 == v793[0]) {
            goto LABEL_21;
          }
          int v13 = 1;
          while (v12 != (llvm::Instruction *)-4096)
          {
            unsigned int v14 = v10 + v13++;
            unsigned int v10 = v14 & (v9 - 1);
            int v11 = (char *)v8 + 48 * v10;
            unsigned int v12 = (llvm::Instruction *)*((void *)v11 + 3);
            if (v12 == v793[0]) {
              goto LABEL_21;
            }
          }
LABEL_20:
          int v11 = (char *)v8 + 48 * v9;
LABEL_21:
          int v15 = (char *)v8 + 48 * v9;
          if (v11 != v15)
          {
            uint64_t v16 = *((void *)v11 + 5);
            if (v16) {
              goto LABEL_255;
            }
          }
          if (!v9) {
            goto LABEL_30;
          }
          unsigned int v17 = v9 - 1;
          unsigned int v18 = ((LODWORD(v792[0]) >> 4) ^ (LODWORD(v792[0]) >> 9)) & v17;
          uint64_t v19 = (char *)v8 + 48 * v18;
          int v20 = (llvm::Value *)*((void *)v19 + 3);
          if (v20 != v792[0])
          {
            int v21 = 1;
            while (v20 != (llvm::Value *)-4096)
            {
              unsigned int v22 = v18 + v21++;
              unsigned int v18 = v22 & v17;
              uint64_t v19 = (char *)v8 + 48 * v18;
              int v20 = (llvm::Value *)*((void *)v19 + 3);
              if (v20 == v792[0]) {
                goto LABEL_28;
              }
            }
            goto LABEL_30;
          }
LABEL_28:
          if (v19 == v15 || (uint64_t SCEVIter = (const llvm::APInt *)*((void *)v19 + 5)) == 0)
          {
LABEL_30:
            uint64_t SCEVIter = (const llvm::APInt *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v792[0]);
            uint64_t v7 = v793[0];
          }
          if (*((unsigned char *)v7 + 16) == 5
            || (uint64_t v24 = *((unsigned char *)v7 + 17) & 6, (*((unsigned char *)v7 + 17) & 6) == 0)
            || !llvm::ScalarEvolution::isSCEVExprNeverPoison((llvm::ScalarEvolution *)this, v7))
          {
LABEL_34:
            int v25 = this[13];
            unsigned int v26 = *((_DWORD *)this + 30);
            if (LODWORD(v791[0]) == 15)
            {
              if (v26)
              {
                unsigned int v27 = ((LODWORD(v792[0]) >> 4) ^ (LODWORD(v792[0]) >> 9)) & (v26 - 1);
                uint64_t v28 = (char *)v25 + 48 * v27;
                int v29 = (llvm::Value *)*((void *)v28 + 3);
                if (v29 == v792[0]) {
                  goto LABEL_48;
                }
                int v30 = 1;
                while (v29 != (llvm::Value *)-4096)
                {
                  unsigned int v31 = v27 + v30++;
                  unsigned int v27 = v31 & (v26 - 1);
                  uint64_t v28 = (char *)v25 + 48 * v27;
                  int v29 = (llvm::Value *)*((void *)v28 + 3);
                  if (v29 == v792[0]) {
                    goto LABEL_48;
                  }
                }
              }
              uint64_t v28 = (char *)v25 + 48 * v26;
LABEL_48:
              if (v28 == (char *)v25 + 48 * v26 || (uint64_t v37 = *((void *)v28 + 5)) == 0) {
                uint64_t v37 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v792[0]);
              }
              unint64_t NegativeSCEV = llvm::ScalarEvolution::getNegativeSCEV((llvm::ScalarEvolution *)this, v37, 0);
              goto LABEL_56;
            }
            if (v26)
            {
              unsigned int v32 = ((LODWORD(v792[0]) >> 4) ^ (LODWORD(v792[0]) >> 9)) & (v26 - 1);
              int v33 = (char *)v25 + 48 * v32;
              BOOL v34 = (llvm::Value *)*((void *)v33 + 3);
              if (v34 == v792[0]) {
                goto LABEL_53;
              }
              int v35 = 1;
              while (v34 != (llvm::Value *)-4096)
              {
                unsigned int v36 = v32 + v35++;
                unsigned int v32 = v36 & (v26 - 1);
                int v33 = (char *)v25 + 48 * v32;
                BOOL v34 = (llvm::Value *)*((void *)v33 + 3);
                if (v34 == v792[0]) {
                  goto LABEL_53;
                }
              }
            }
            int v33 = (char *)v25 + 48 * v26;
LABEL_53:
            if (v33 != (char *)v25 + 48 * v26)
            {
              unint64_t v39 = *((void *)v33 + 5);
              if (v39)
              {
LABEL_57:
                if (v798 >= (unint64_t)HIDWORD(v798)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(v797 + 8 * v798) = v39;
                LODWORD(v798) = v798 + 1;
                sub_1CC0F7D20((uint64_t)&__src, (uint64_t)v791[1], this[4]);
                if (BYTE8(v796) && (__src | 2) == 0xF)
                {
                  *(_OWORD *)v791 = __src;
                  *(_OWORD *)v792 = v795;
                  *(_OWORD *)v793 = v796;
                  continue;
                }
                uint64_t v164 = this[13];
                unsigned int v165 = *((_DWORD *)this + 30);
                if (v165)
                {
                  unsigned int v166 = ((LODWORD(v791[1]) >> 4) ^ (LODWORD(v791[1]) >> 9)) & (v165 - 1);
                  uint64_t v167 = (char *)v164 + 48 * v166;
                  uint64_t v168 = (llvm::Value *)*((void *)v167 + 3);
                  if (v168 == v791[1]) {
                    goto LABEL_252;
                  }
                  int v169 = 1;
                  while (v168 != (llvm::Value *)-4096)
                  {
                    unsigned int v170 = v166 + v169++;
                    unsigned int v166 = v170 & (v165 - 1);
                    uint64_t v167 = (char *)v164 + 48 * v166;
                    uint64_t v168 = (llvm::Value *)*((void *)v167 + 3);
                    if (v168 == v791[1]) {
                      goto LABEL_252;
                    }
                  }
                }
                uint64_t v167 = (char *)v164 + 48 * v165;
LABEL_252:
                if (v167 == (char *)v164 + 48 * v165 || (uint64_t v16 = *((void *)v167 + 5)) == 0) {
                  uint64_t v16 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v791[1]);
                }
LABEL_255:
                if (v798 >= HIDWORD(v798)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(v797 + 8 * v798) = v16;
                goto LABEL_420;
              }
            }
            unint64_t NegativeSCEV = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v792[0]);
LABEL_56:
            unint64_t v39 = NegativeSCEV;
            goto LABEL_57;
          }
          break;
        }
        uint64_t v251 = this[13];
        unsigned int v252 = *((_DWORD *)this + 30);
        if (!v252) {
          goto LABEL_403;
        }
        unsigned int v253 = ((LODWORD(v791[1]) >> 4) ^ (LODWORD(v791[1]) >> 9)) & (v252 - 1);
        unsigned int v254 = (llvm::Value **)((char *)v251 + 48 * v253);
        unint64_t v255 = v254[3];
        if (v255 != v791[1])
        {
          int v256 = 1;
          while (v255 != (llvm::Value *)-4096)
          {
            unsigned int v257 = v253 + v256++;
            unsigned int v253 = v257 & (v252 - 1);
            unsigned int v254 = (llvm::Value **)((char *)v251 + 48 * v253);
            unint64_t v255 = v254[3];
            if (v255 == v791[1]) {
              goto LABEL_404;
            }
          }
LABEL_403:
          unsigned int v254 = (llvm::Value **)((char *)v251 + 48 * v252);
        }
LABEL_404:
        if (v254 == (llvm::Value **)((char *)v251 + 48 * v252) || (unsigned int v279 = v254[5]) == 0) {
          unsigned int v279 = (llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v791[1]);
        }
        if (LODWORD(v791[0]) == 15)
        {
          unint64_t MinusSCEV = llvm::ScalarEvolution::getMinusSCEV((llvm::ScalarEvolution *)this, v279, SCEVIter, v24, 0);
        }
        else
        {
          *(void *)&long long __src = &v795;
          *(void *)&long long v795 = v279;
          *((void *)&v795 + 1) = SCEVIter;
          *((void *)&__src + 1) = 0x200000002;
          unint64_t MinusSCEV = llvm::ScalarEvolution::getAddExpr((uint64_t)this, (unint64_t **)&__src, v24, 0);
          if ((long long *)__src != &v795) {
            free((void *)__src);
          }
        }
        if (v798 >= HIDWORD(v798)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(v797 + 8 * v798) = MinusSCEV;
LABEL_420:
        LODWORD(v798) = v798 + 1;
        uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)this, (unint64_t **)&v797, 0, 0);
LABEL_421:
        uint64_t SignExtendExpr = AddExpr;
        if ((llvm::Value **)v797 != &v799) {
          free((void *)v797);
        }
        return (const llvm::SCEV *)SignExtendExpr;
      case 0xF:
        if (!v793[0] || *((unsigned char *)v793[0] + 16) == 5)
        {
          char v91 = 0;
        }
        else
        {
          char v91 = *((unsigned char *)v793[0] + 17) & 6;
          if (v91
            && !llvm::ScalarEvolution::isSCEVExprNeverPoison((llvm::ScalarEvolution *)this, v793[0]))
          {
            char v91 = 0;
          }
        }
        unint64_t v171 = this[13];
        unsigned int v172 = *((_DWORD *)this + 30);
        if (!v172) {
          goto LABEL_264;
        }
        unsigned int v173 = ((LODWORD(v791[1]) >> 4) ^ (LODWORD(v791[1]) >> 9)) & (v172 - 1);
        uint64_t v174 = (char *)v171 + 48 * v173;
        unsigned int v175 = (llvm::Value *)*((void *)v174 + 3);
        if (v175 == v791[1]) {
          goto LABEL_265;
        }
        int v176 = 1;
        while (v175 != (llvm::Value *)-4096)
        {
          unsigned int v177 = v173 + v176++;
          unsigned int v173 = v177 & (v172 - 1);
          uint64_t v174 = (char *)v171 + 48 * v173;
          unsigned int v175 = (llvm::Value *)*((void *)v174 + 3);
          if (v175 == v791[1]) {
            goto LABEL_265;
          }
        }
LABEL_264:
        uint64_t v174 = (char *)v171 + 48 * v172;
LABEL_265:
        if (v174 == (char *)v171 + 48 * v172 || (uint64_t v178 = *((void *)v174 + 5)) == 0)
        {
          uint64_t v178 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v791[1]);
          unint64_t v171 = this[13];
          unsigned int v172 = *((_DWORD *)this + 30);
        }
        if (!v172) {
          goto LABEL_274;
        }
        unsigned int v179 = ((LODWORD(v792[0]) >> 4) ^ (LODWORD(v792[0]) >> 9)) & (v172 - 1);
        unint64_t v180 = (llvm::Value **)((char *)v171 + 48 * v179);
        uint64_t v181 = v180[3];
        if (v181 != v792[0])
        {
          int v182 = 1;
          while (v181 != (llvm::Value *)-4096)
          {
            unsigned int v183 = v179 + v182++;
            unsigned int v179 = v183 & (v172 - 1);
            unint64_t v180 = (llvm::Value **)((char *)v171 + 48 * v179);
            uint64_t v181 = v180[3];
            if (v181 == v792[0]) {
              goto LABEL_275;
            }
          }
LABEL_274:
          unint64_t v180 = (llvm::Value **)((char *)v171 + 48 * v172);
        }
LABEL_275:
        if (v180 == (llvm::Value **)((char *)v171 + 48 * v172) || (unsigned int v184 = v180[5]) == 0) {
          unsigned int v184 = (const llvm::APInt *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v792[0]);
        }
        BOOL v185 = (llvm::ScalarEvolution *)this;
        uint64_t v186 = (llvm::SCEV *)v178;
        char v187 = v91;
        return (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(v185, v186, v184, v187, 0);
      case 0x11:
        unint64_t v797 = (unint64_t)&v799;
        uint64_t v798 = 0x400000000;
        while (2)
        {
          int v49 = this[13];
          unsigned int v50 = *((_DWORD *)this + 30);
          if (!v793[0]) {
            goto LABEL_92;
          }
          if (!v50) {
            goto LABEL_86;
          }
          unsigned int v51 = v50 - 1;
          unsigned int v52 = ((LODWORD(v793[0]) >> 4) ^ (LODWORD(v793[0]) >> 9)) & (v50 - 1);
          uint64_t v53 = (char *)v49 + 48 * v52;
          uint64_t v54 = (llvm::Instruction *)*((void *)v53 + 3);
          if (v54 != v793[0])
          {
            int v55 = 1;
            while (v54 != (llvm::Instruction *)-4096)
            {
              unsigned int v56 = v52 + v55++;
              unsigned int v52 = v56 & v51;
              uint64_t v53 = (char *)v49 + 48 * (v56 & v51);
              uint64_t v54 = (llvm::Instruction *)*((void *)v53 + 3);
              if (v54 == v793[0]) {
                goto LABEL_87;
              }
            }
LABEL_86:
            uint64_t v53 = (char *)v49 + 48 * v50;
          }
LABEL_87:
          if (v53 != (char *)v49 + 48 * v50)
          {
            uint64_t MulExpr = *((void *)v53 + 5);
            if (MulExpr) {
              goto LABEL_378;
            }
          }
          if (*((unsigned char *)v793[0] + 16) == 5
            || (uint64_t v58 = *((unsigned char *)v793[0] + 17) & 6, (*((unsigned char *)v793[0] + 17) & 6) == 0)
            || (isSCEVExprNeverPoison = llvm::ScalarEvolution::isSCEVExprNeverPoison((llvm::ScalarEvolution *)this, v793[0]), v49 = this[13], unsigned int v50 = *((_DWORD *)this + 30), !isSCEVExprNeverPoison))
          {
LABEL_92:
            unsigned int v60 = (char *)v49 + 48 * v50;
            if (v50)
            {
              unsigned int v61 = v50 - 1;
              unsigned int v62 = ((LODWORD(v792[0]) >> 4) ^ (LODWORD(v792[0]) >> 9)) & v61;
              uint64_t v63 = (char *)v49 + 48 * v62;
              unsigned int v64 = (llvm::Value *)*((void *)v63 + 3);
              if (v64 == v792[0])
              {
LABEL_99:
                if (v63 == v60 || (uint64_t v67 = *((void *)v63 + 5)) == 0) {
                  uint64_t v67 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v792[0]);
                }
                if (v798 >= (unint64_t)HIDWORD(v798)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(v797 + 8 * v798) = v67;
                LODWORD(v798) = v798 + 1;
                sub_1CC0F7D20((uint64_t)&__src, (uint64_t)v791[1], this[4]);
                if (BYTE8(v796)) {
                  BOOL v68 = __src == 17;
                }
                else {
                  BOOL v68 = 0;
                }
                char v69 = v68;
                if (v68)
                {
                  *(_OWORD *)v791 = __src;
                  *(_OWORD *)v792 = v795;
                  *(_OWORD *)v793 = v796;
                  if ((v69 & 1) == 0) {
                    goto LABEL_380;
                  }
                  continue;
                }
                unsigned int v70 = this[13];
                unsigned int v71 = *((_DWORD *)this + 30);
                if (v71)
                {
                  unsigned int v72 = ((LODWORD(v791[1]) >> 4) ^ (LODWORD(v791[1]) >> 9)) & (v71 - 1);
                  uint64_t v73 = (char *)v70 + 48 * v72;
                  unsigned int v74 = (llvm::Value *)*((void *)v73 + 3);
                  if (v74 == v791[1])
                  {
LABEL_120:
                    if (v73 == (char *)v70 + 48 * v71 || (uint64_t v77 = *((void *)v73 + 5)) == 0) {
                      uint64_t v77 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v791[1]);
                    }
                    if (v798 >= (unint64_t)HIDWORD(v798)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *(void *)(v797 + 8 * v798) = v77;
                    LODWORD(v798) = v798 + 1;
                    if ((v69 & 1) == 0) {
                      goto LABEL_380;
                    }
                    continue;
                  }
                  int v75 = 1;
                  while (v74 != (llvm::Value *)-4096)
                  {
                    unsigned int v76 = v72 + v75++;
                    unsigned int v72 = v76 & (v71 - 1);
                    uint64_t v73 = (char *)v70 + 48 * v72;
                    unsigned int v74 = (llvm::Value *)*((void *)v73 + 3);
                    if (v74 == v791[1]) {
                      goto LABEL_120;
                    }
                  }
                }
                uint64_t v73 = (char *)v70 + 48 * v71;
                goto LABEL_120;
              }
              int v65 = 1;
              while (v64 != (llvm::Value *)-4096)
              {
                unsigned int v66 = v62 + v65++;
                unsigned int v62 = v66 & v61;
                uint64_t v63 = (char *)v49 + 48 * v62;
                unsigned int v64 = (llvm::Value *)*((void *)v63 + 3);
                if (v64 == v792[0]) {
                  goto LABEL_99;
                }
              }
            }
            uint64_t v63 = v60;
            goto LABEL_99;
          }
          break;
        }
        if (!v50) {
          goto LABEL_362;
        }
        unsigned int v192 = ((LODWORD(v791[1]) >> 4) ^ (LODWORD(v791[1]) >> 9)) & (v50 - 1);
        int v193 = (char *)v49 + 48 * v192;
        unsigned int v194 = (llvm::Value *)*((void *)v193 + 3);
        if (v194 != v791[1])
        {
          int v195 = 1;
          while (v194 != (llvm::Value *)-4096)
          {
            unsigned int v196 = v192 + v195++;
            unsigned int v192 = v196 & (v50 - 1);
            int v193 = (char *)v49 + 48 * v192;
            unsigned int v194 = (llvm::Value *)*((void *)v193 + 3);
            if (v194 == v791[1]) {
              goto LABEL_363;
            }
          }
LABEL_362:
          int v193 = (char *)v49 + 48 * v50;
        }
LABEL_363:
        if (v193 == (char *)v49 + 48 * v50 || (uint64_t v258 = *((void *)v193 + 5)) == 0)
        {
          uint64_t v258 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v791[1]);
          int v49 = this[13];
          unsigned int v50 = *((_DWORD *)this + 30);
        }
        if (!v50) {
          goto LABEL_372;
        }
        unsigned int v259 = ((LODWORD(v792[0]) >> 4) ^ (LODWORD(v792[0]) >> 9)) & (v50 - 1);
        BOOL v260 = (char *)v49 + 48 * v259;
        unint64_t v261 = (llvm::Value *)*((void *)v260 + 3);
        if (v261 != v792[0])
        {
          int v262 = 1;
          while (v261 != (llvm::Value *)-4096)
          {
            unsigned int v263 = v259 + v262++;
            unsigned int v259 = v263 & (v50 - 1);
            BOOL v260 = (char *)v49 + 48 * v259;
            unint64_t v261 = (llvm::Value *)*((void *)v260 + 3);
            if (v261 == v792[0]) {
              goto LABEL_373;
            }
          }
LABEL_372:
          BOOL v260 = (char *)v49 + 48 * v50;
        }
LABEL_373:
        if (v260 == (char *)v49 + 48 * v50 || (uint64_t v264 = *((void *)v260 + 5)) == 0) {
          uint64_t v264 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v792[0]);
        }
        *(void *)&long long __src = &v795;
        *(void *)&long long v795 = v258;
        *((void *)&v795 + 1) = v264;
        *((void *)&__src + 1) = 0x200000002;
        uint64_t MulExpr = llvm::ScalarEvolution::getMulExpr((uint64_t)this, (uint64_t)&__src, v58, 0);
        if ((long long *)__src != &v795) {
          free((void *)__src);
        }
LABEL_378:
        if (v798 >= HIDWORD(v798)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(v797 + 8 * v798) = MulExpr;
        LODWORD(v798) = v798 + 1;
LABEL_380:
        uint64_t AddExpr = llvm::ScalarEvolution::getMulExpr((uint64_t)this, (uint64_t)&v797, 0, 0);
        goto LABEL_421;
      case 0x13:
        uint64_t v116 = this[13];
        unsigned int v117 = *((_DWORD *)this + 30);
        if (!v117) {
          goto LABEL_213;
        }
        unsigned int v118 = ((LODWORD(v791[1]) >> 4) ^ (LODWORD(v791[1]) >> 9)) & (v117 - 1);
        int v119 = (char *)v116 + 48 * v118;
        int64_t v120 = (llvm::Value *)*((void *)v119 + 3);
        if (v120 == v791[1]) {
          goto LABEL_214;
        }
        int v121 = 1;
        while (v120 != (llvm::Value *)-4096)
        {
          unsigned int v122 = v118 + v121++;
          unsigned int v118 = v122 & (v117 - 1);
          int v119 = (char *)v116 + 48 * v118;
          int64_t v120 = (llvm::Value *)*((void *)v119 + 3);
          if (v120 == v791[1]) {
            goto LABEL_214;
          }
        }
LABEL_213:
        int v119 = (char *)v116 + 48 * v117;
LABEL_214:
        if (v119 == (char *)v116 + 48 * v117 || (uint64_t v145 = *((void *)v119 + 5)) == 0)
        {
          uint64_t v145 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v791[1]);
          uint64_t v116 = this[13];
          unsigned int v117 = *((_DWORD *)this + 30);
        }
        if (!v117) {
          goto LABEL_223;
        }
        unsigned int v146 = ((LODWORD(v792[0]) >> 4) ^ (LODWORD(v792[0]) >> 9)) & (v117 - 1);
        unint64_t v147 = (char *)v116 + 48 * v146;
        uint64_t v148 = (llvm::Value *)*((void *)v147 + 3);
        if (v148 != v792[0])
        {
          int v149 = 1;
          while (v148 != (llvm::Value *)-4096)
          {
            unsigned int v150 = v146 + v149++;
            unsigned int v146 = v150 & (v117 - 1);
            unint64_t v147 = (char *)v116 + 48 * v146;
            uint64_t v148 = (llvm::Value *)*((void *)v147 + 3);
            if (v148 == v792[0]) {
              goto LABEL_224;
            }
          }
LABEL_223:
          unint64_t v147 = (char *)v116 + 48 * v117;
        }
LABEL_224:
        if (v147 == (char *)v116 + 48 * v117 || (unint64_t v151 = *((void *)v147 + 5)) == 0) {
          unint64_t v151 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v792[0]);
        }
        unsigned int v152 = (llvm::ScalarEvolution *)this;
        uint64_t v153 = (const llvm::SCEV *)v145;
        return (const llvm::SCEV *)llvm::ScalarEvolution::getUDivExpr(v152, v153, v151);
      case 0x16:
        unsigned int v123 = this[13];
        unsigned int v124 = *((_DWORD *)this + 30);
        if (!v124) {
          goto LABEL_229;
        }
        unsigned int v125 = ((LODWORD(v791[1]) >> 4) ^ (LODWORD(v791[1]) >> 9)) & (v124 - 1);
        int v126 = (char *)v123 + 48 * v125;
        char v127 = (llvm::Value *)*((void *)v126 + 3);
        if (v127 == v791[1]) {
          goto LABEL_230;
        }
        int v128 = 1;
        while (v127 != (llvm::Value *)-4096)
        {
          unsigned int v129 = v125 + v128++;
          unsigned int v125 = v129 & (v124 - 1);
          int v126 = (char *)v123 + 48 * v125;
          char v127 = (llvm::Value *)*((void *)v126 + 3);
          if (v127 == v791[1]) {
            goto LABEL_230;
          }
        }
LABEL_229:
        int v126 = (char *)v123 + 48 * v124;
LABEL_230:
        if (v126 == (char *)v123 + 48 * v124 || (uint64_t v155 = *((void *)v126 + 5)) == 0)
        {
          uint64_t v155 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v791[1]);
          unsigned int v123 = this[13];
          unsigned int v124 = *((_DWORD *)this + 30);
        }
        if (!v124) {
          goto LABEL_239;
        }
        unsigned int v156 = ((LODWORD(v792[0]) >> 4) ^ (LODWORD(v792[0]) >> 9)) & (v124 - 1);
        int64_t v157 = (llvm::Value **)((char *)v123 + 48 * v156);
        unint64_t v158 = v157[3];
        if (v158 != v792[0])
        {
          int v159 = 1;
          while (v158 != (llvm::Value *)-4096)
          {
            unsigned int v160 = v156 + v159++;
            unsigned int v156 = v160 & (v124 - 1);
            int64_t v157 = (llvm::Value **)((char *)v123 + 48 * v156);
            unint64_t v158 = v157[3];
            if (v158 == v792[0]) {
              goto LABEL_240;
            }
          }
LABEL_239:
          int64_t v157 = (llvm::Value **)((char *)v123 + 48 * v124);
        }
LABEL_240:
        if (v157 == (llvm::Value **)((char *)v123 + 48 * v124) || (uint64_t v161 = v157[5]) == 0) {
          uint64_t v161 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v792[0]);
        }
        uint64_t v162 = (llvm::ScalarEvolution *)this;
        uint64_t v163 = (const llvm::SCEV *)v155;
        return (const llvm::SCEV *)llvm::ScalarEvolution::getURemExpr(v162, v163, v161);
      case 0x19:
        unsigned int v78 = v792[0];
        if (!v792[0] || *((unsigned char *)v792[0] + 16) != 16) {
          goto LABEL_687;
        }
        unint64_t v79 = *(unsigned int *)(*(void *)v792[0] + 8);
        uint64_t v80 = (unint64_t *)((char *)v792[0] + 24);
        uint64_t v81 = *((unsigned int *)v792[0] + 8);
        unsigned int v82 = (unint64_t *)((char *)v792[0] + 24);
        if (v81 < 0x41) {
          goto LABEL_138;
        }
        int v83 = 0;
        int64_t v84 = (unint64_t)(v81 + 63) >> 6;
        do
        {
          BOOL v85 = v84-- < 1;
          if (v85) {
            break;
          }
          unint64_t v86 = *(void *)(*v80 + 8 * v84);
          v83 += __clz(v86);
        }
        while (!v86);
        int v87 = v81 | 0xFFFFFFC0;
        if ((v81 & 0x3F) == 0) {
          int v87 = 0;
        }
        if ((v81 - v83 - v87) > 0x40) {
          goto LABEL_687;
        }
        unsigned int v82 = (unint64_t *)*v80;
LABEL_138:
        unint64_t v88 = v79 >> 8;
        if (*v82 >= v79 >> 8) {
          goto LABEL_687;
        }
        if (!v793[0])
        {
          uint64_t v285 = 0;
          goto LABEL_477;
        }
        if (*((unsigned char *)v793[0] + 16) == 5)
        {
          LOBYTE(v89) = 0;
          goto LABEL_142;
        }
        int v89 = *((unsigned char *)v793[0] + 17) & 6;
        if ((*((unsigned char *)v793[0] + 17) & 6) == 0) {
          goto LABEL_142;
        }
        if (llvm::ScalarEvolution::isSCEVExprNeverPoison((llvm::ScalarEvolution *)this, v793[0])) {
          unsigned int v295 = v89;
        }
        else {
          unsigned int v295 = 0;
        }
        if (v295 >= 4)
        {
          if ((v295 & 2) == 0)
          {
            uint64_t v309 = *((unsigned int *)v78 + 8);
            uint64_t v310 = (void *)((char *)v78 + 24);
            if (v309 >= 0x41)
            {
              int v311 = 0;
              int64_t v312 = (unint64_t)(v309 + 63) >> 6;
              do
              {
                BOOL v85 = v312-- < 1;
                if (v85) {
                  break;
                }
                unint64_t v313 = *(void *)(*v80 + 8 * v312);
                v311 += __clz(v313);
              }
              while (!v313);
              int v314 = v309 | 0xFFFFFFC0;
              if ((v309 & 0x3F) == 0) {
                int v314 = 0;
              }
              if ((v309 - v311 - v314) > 0x40) {
                goto LABEL_142;
              }
              uint64_t v310 = (void *)*v80;
            }
            if (*v310 >= (unint64_t)(v88 - 1))
            {
LABEL_142:
              int v90 = 0;
              goto LABEL_476;
            }
          }
          int v90 = 4;
        }
        else
        {
          int v90 = 0;
          LOBYTE(v89) = v295;
        }
LABEL_476:
        uint64_t v285 = v89 & 2 | v90;
        LODWORD(v81) = *((_DWORD *)v78 + 8);
LABEL_477:
        if (v81 >= 0x41) {
          uint64_t v80 = (unint64_t *)*v80;
        }
        unsigned int v315 = **(llvm::ConstantInt ***)*this;
        unint64_t v316 = (unint64_t *)*v80;
        LODWORD(v798) = v79 >> 8;
        if (v79 >> 8 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v797);
        }
        unint64_t v797 = 0;
        uint64_t v317 = 1 << (char)v316;
        if (v88 > 0x40) {
          *(void *)(v797 + 8 * (v316 >> 6)) |= v317;
        }
        else {
          v797 |= v317;
        }
        unint64_t v318 = (llvm::Value *)llvm::ConstantInt::get(v315, (llvm::LLVMContext *)&v797, v6);
        if (v798 >= 0x41 && v797) {
          MEMORY[0x1D25D9CB0](v797, 0x1000C8000313F17);
        }
        unsigned int v319 = this[13];
        unsigned int v320 = *((_DWORD *)this + 30);
        if (!v320) {
          goto LABEL_492;
        }
        unsigned int v321 = ((LODWORD(v791[1]) >> 4) ^ (LODWORD(v791[1]) >> 9)) & (v320 - 1);
        int v322 = (char *)v319 + 48 * v321;
        unsigned int v323 = (llvm::Value *)*((void *)v322 + 3);
        if (v323 != v791[1])
        {
          int v324 = 1;
          while (v323 != (llvm::Value *)-4096)
          {
            unsigned int v325 = v321 + v324++;
            unsigned int v321 = v325 & (v320 - 1);
            int v322 = (char *)v319 + 48 * v321;
            unsigned int v323 = (llvm::Value *)*((void *)v322 + 3);
            if (v323 == v791[1]) {
              goto LABEL_493;
            }
          }
LABEL_492:
          int v322 = (char *)v319 + 48 * v320;
        }
LABEL_493:
        if (v322 == (char *)v319 + 48 * v320 || (uint64_t v326 = *((void *)v322 + 5)) == 0)
        {
          uint64_t v326 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v791[1]);
          unsigned int v319 = this[13];
          unsigned int v320 = *((_DWORD *)this + 30);
        }
        if (!v320) {
          goto LABEL_502;
        }
        unsigned int v327 = (v320 - 1) & ((v318 >> 4) ^ (v318 >> 9));
        unint64_t v328 = (char *)v319 + 48 * v327;
        unsigned int v329 = (llvm::Value *)*((void *)v328 + 3);
        if (v329 != v318)
        {
          int v330 = 1;
          while (v329 != (llvm::Value *)-4096)
          {
            unsigned int v331 = v327 + v330++;
            unsigned int v327 = v331 & (v320 - 1);
            unint64_t v328 = (char *)v319 + 48 * v327;
            unsigned int v329 = (llvm::Value *)*((void *)v328 + 3);
            if (v329 == v318) {
              goto LABEL_503;
            }
          }
LABEL_502:
          unint64_t v328 = (char *)v319 + 48 * v320;
        }
LABEL_503:
        if (v328 == (char *)v319 + 48 * v320 || (uint64_t v332 = *((void *)v328 + 5)) == 0) {
          uint64_t v332 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v318);
        }
        return (const llvm::SCEV *)sub_1CBFD7CB4((uint64_t)this, v326, v332, v285, 0);
      case 0x1B:
        unsigned int v92 = v792[0];
        if (!v792[0] || *((unsigned char *)v792[0] + 16) != 16) {
          goto LABEL_687;
        }
        uint64_t v93 = *(uint64_t ***)v791[1];
        unsigned int v94 = *(_DWORD *)(*(void *)v791[1] + 8);
        uint64_t v95 = *((void *)*this + 5);
        if (v94 == 15)
        {
          if ((v94 & 0xFE) == 0x12) {
            unsigned int v94 = *(_DWORD *)(*v93[2] + 8);
          }
          uint64_t v368 = *(void *)(v95 + 504);
          if (v94 < 0x100) {
            goto LABEL_576;
          }
          unsigned int v369 = v94 >> 8;
          unint64_t v370 = *(unsigned int *)(v95 + 512);
          uint64_t v371 = *(void *)(v95 + 504);
          if (v370)
          {
            uint64_t v371 = v368;
            unint64_t v372 = v370;
            do
            {
              unint64_t v373 = v372 >> 1;
              uint64_t v374 = v371 + 16 * (v372 >> 1);
              unsigned int v375 = *(_DWORD *)(v374 + 8);
              uint64_t v376 = v374 + 16;
              v372 += ~(v372 >> 1);
              if (v375 < v369) {
                uint64_t v371 = v376;
              }
              else {
                unint64_t v372 = v373;
              }
            }
            while (v372);
          }
          if (v371 == v368 + 16 * v370 || *(_DWORD *)(v371 + 8) != v369) {
LABEL_576:
          }
            uint64_t v371 = v368;
          unint64_t v97 = *(unsigned int *)(v371 + 12);
        }
        else
        {
          unint64_t v97 = sub_1CB83544C(v95 + 272, *(void *)v791[1]);
          if (v96 == 1) {
        }
          }
        uint64_t v98 = *((unsigned int *)v92 + 8);
        if (v98 >= 0x41)
        {
          int v197 = 0;
          int64_t v198 = (unint64_t)(v98 + 63) >> 6;
          uint64_t v199 = v198;
          do
          {
            BOOL v85 = v199-- < 1;
            if (v85) {
              break;
            }
            unint64_t v200 = *(void *)(*((void *)v92 + 3) + 8 * v199);
            v197 += __clz(v200);
          }
          while (!v200);
          int v201 = v98 | 0xFFFFFFC0;
          if ((v98 & 0x3F) == 0) {
            int v201 = 0;
          }
          if ((v98 - v197 - v201) >= 0x41) {
            goto LABEL_687;
          }
          uint64_t v202 = (unint64_t *)*((void *)v92 + 3);
          unint64_t v99 = *v202;
          if (*v202 >= v97) {
            goto LABEL_687;
          }
          int v203 = 0;
          do
          {
            BOOL v85 = v198-- < 1;
            if (v85) {
              break;
            }
            unint64_t v204 = v202[v198];
            v203 += __clz(v204);
          }
          while (!v204);
          if (v203 + v201 != v98)
          {
LABEL_156:
            uint64_t v100 = llvm::IntegerType::get(**(llvm::IntegerType ***)*this, (llvm::LLVMContext *)(v97 - v99));
            int v101 = v791[1];
            unsigned int v102 = *((unsigned __int8 *)v791[1] + 16);
            unsigned int v103 = v102 - 28;
            BOOL v105 = v102 < 0x1C && v102 != 5;
            if (!v791[1] || v105) {
              goto LABEL_687;
            }
            uint64_t v106 = (llvm::Type *)v100;
            if (v102 <= 0x1B) {
              unsigned int v103 = *((unsigned __int16 *)v791[1] + 9);
            }
            if (v103 != 25) {
              goto LABEL_687;
            }
            int v107 = *((_DWORD *)v791[1] + 5);
            if ((v107 & 0x40000000) != 0) {
              int v108 = (llvm::Value **)*((void *)v791[1] - 1);
            }
            else {
              int v108 = (llvm::Value **)((char *)v791[1] - 32 * (v107 & 0x7FFFFFF));
            }
            uint64_t v349 = *v108;
            unsigned int v350 = this[13];
            unsigned int v351 = *((_DWORD *)this + 30);
            if (v351)
            {
              unsigned int v352 = ((v349 >> 4) ^ (v349 >> 9)) & (v351 - 1);
              uint64_t v353 = (llvm::Value **)((char *)v350 + 48 * v352);
              unsigned int v354 = v353[3];
              if (v354 == v349)
              {
LABEL_540:
                if (v353 == (llvm::Value **)((char *)v350 + 48 * v351) || (unint64_t v357 = v353[5]) == 0)
                {
                  unint64_t v357 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v349);
                  int v107 = *((_DWORD *)v101 + 5);
                }
                if ((v107 & 0x40000000) != 0) {
                  unsigned int v358 = (char *)*((void *)v101 - 1);
                }
                else {
                  unsigned int v358 = (char *)v101 - 32 * (v107 & 0x7FFFFFF);
                }
                uint64_t v359 = *((void *)v358 + 4);
                if ((llvm::Value *)v359 == v792[0])
                {
                  uint64_t TruncateExpr = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::getTruncateExpr((llvm::ScalarEvolution *)this, v357, v106, 0);
                  unsigned int v378 = (llvm::ScalarEvolution *)this;
                  uint64_t v379 = v93;
                  return (const llvm::SCEV *)llvm::ScalarEvolution::getSignExtendExpr(v378, TruncateExpr, v379, 0);
                }
                if (v359 && *(unsigned char *)(v359 + 16) == 16)
                {
                  uint64_t v360 = *(unsigned int *)(v359 + 32);
                  if (v360 >= 0x41)
                  {
                    int v380 = 0;
                    int64_t v381 = (unint64_t)(v360 + 63) >> 6;
                    do
                    {
                      BOOL v85 = v381-- < 1;
                      if (v85) {
                        break;
                      }
                      unint64_t v382 = *(void *)(*(void *)(v359 + 24) + 8 * v381);
                      v380 += __clz(v382);
                    }
                    while (!v382);
                    int v383 = v360 | 0xFFFFFFC0;
                    if ((v360 & 0x3F) == 0) {
                      int v383 = 0;
                    }
                    if ((v360 - v380 - v383) >= 0x41) {
                      goto LABEL_687;
                    }
                    unint64_t v361 = **(void **)(v359 + 24);
                  }
                  else
                  {
                    unint64_t v361 = *(void *)(v359 + 24);
                  }
                  if (v361 < v97 && v361 > v99)
                  {
                    LODWORD(v798) = v97 - v99;
                    if ((v97 - v99) > 0x40) {
                      llvm::APInt::initSlowCase((llvm::APInt *)&v797);
                    }
                    unint64_t v797 = 1 << (v361 - v99);
                    uint64_t v384 = llvm::ScalarEvolution::getTruncateExpr((llvm::ScalarEvolution *)this, v357, v106, 0);
                    unsigned int v386 = (llvm::ConstantInt *)llvm::ConstantInt::get(**(llvm::ConstantInt ***)*this, (llvm::LLVMContext *)&v797, v385);
                    unint64_t Constant = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)this, v386);
                    unsigned int v388 = (llvm::detail::IEEEFloat **)sub_1CBFD7CB4((uint64_t)this, v384, Constant, 0, 0);
                    uint64_t SignExtendExpr = llvm::ScalarEvolution::getSignExtendExpr((llvm::ScalarEvolution *)this, v388, v93, 0);
                    if (v798 >= 0x41 && v797) {
                      MEMORY[0x1D25D9CB0](v797, 0x1000C8000313F17);
                    }
                    return (const llvm::SCEV *)SignExtendExpr;
                  }
                }
LABEL_687:
                unsigned int v445 = *((unsigned __int8 *)a2 + 16);
                if (v445 > 0x1B) {
                  int v446 = v445 - 28;
                }
                else {
                  int v446 = *((unsigned __int16 *)a2 + 9);
                }
                if (v446 > 33)
                {
                  switch(v446)
                  {
                    case '""':
                      return (const llvm::SCEV *)llvm::ScalarEvolution::createNodeForGEP((llvm::ScalarEvolution *)this, a2);
                    case '&':
                      int v465 = *((_DWORD *)a2 + 5);
                      if ((v465 & 0x40000000) != 0) {
                        v466 = (llvm::Value **)*((void *)a2 - 1);
                      }
                      else {
                        v466 = (llvm::Value **)((char *)a2 - 32 * (v465 & 0x7FFFFFF));
                      }
                      v486 = *v466;
                      v487 = this[13];
                      unsigned int v488 = *((_DWORD *)this + 30);
                      if (!v488) {
                        goto LABEL_756;
                      }
                      unsigned int v489 = ((v486 >> 4) ^ (v486 >> 9)) & (v488 - 1);
                      v490 = (llvm::Value **)((char *)v487 + 48 * v489);
                      v491 = v490[3];
                      if (v491 == v486) {
                        goto LABEL_757;
                      }
                      int v492 = 1;
                      while (v491 != (llvm::Value *)-4096)
                      {
                        unsigned int v493 = v489 + v492++;
                        unsigned int v489 = v493 & (v488 - 1);
                        v490 = (llvm::Value **)((char *)v487 + 48 * v489);
                        v491 = v490[3];
                        if (v491 == v486) {
                          goto LABEL_757;
                        }
                      }
LABEL_756:
                      v490 = (llvm::Value **)((char *)v487 + 48 * v488);
LABEL_757:
                      if (v490 == (llvm::Value **)((char *)v487 + 48 * v488) || (v494 = v490[5]) == 0) {
                        v494 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v486);
                      }
                      return (const llvm::SCEV *)llvm::ScalarEvolution::getTruncateExpr((llvm::ScalarEvolution *)this, v494, *(llvm::Type **)a2, 0);
                    case '\'':
                      int v463 = *((_DWORD *)a2 + 5);
                      if ((v463 & 0x40000000) != 0) {
                        v464 = (llvm::Value **)*((void *)a2 - 1);
                      }
                      else {
                        v464 = (llvm::Value **)((char *)a2 - 32 * (v463 & 0x7FFFFFF));
                      }
                      v477 = *v464;
                      v478 = this[13];
                      unsigned int v479 = *((_DWORD *)this + 30);
                      if (!v479) {
                        goto LABEL_743;
                      }
                      unsigned int v480 = ((v477 >> 4) ^ (v477 >> 9)) & (v479 - 1);
                      v481 = (char *)v478 + 48 * v480;
                      v482 = (llvm::Value *)*((void *)v481 + 3);
                      if (v482 == v477) {
                        goto LABEL_744;
                      }
                      int v483 = 1;
                      while (v482 != (llvm::Value *)-4096)
                      {
                        unsigned int v484 = v480 + v483++;
                        unsigned int v480 = v484 & (v479 - 1);
                        v481 = (char *)v478 + 48 * v480;
                        v482 = (llvm::Value *)*((void *)v481 + 3);
                        if (v482 == v477) {
                          goto LABEL_744;
                        }
                      }
LABEL_743:
                      v481 = (char *)v478 + 48 * v479;
LABEL_744:
                      if (v481 == (char *)v478 + 48 * v479 || (uint64_t v485 = *((void *)v481 + 5)) == 0) {
                        uint64_t v485 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v477);
                      }
                      v429 = *(uint64_t ***)a2;
                      v428 = (llvm::ScalarEvolution *)this;
                      v427 = (llvm::detail::IEEEFloat **)v485;
                      return (const llvm::SCEV *)llvm::ScalarEvolution::getZeroExtendExpr(v428, v427, v429, 0);
                    case '(':
                      int v469 = *((_DWORD *)a2 + 5);
                      if ((v469 & 0x40000000) != 0) {
                        v470 = (uint64_t *)*((void *)a2 - 1);
                      }
                      else {
                        v470 = (uint64_t *)((char *)a2 - 32 * (v469 & 0x7FFFFFF));
                      }
                      sub_1CC0F7D20((uint64_t)&v797, *v470, this[4]);
                      if (v802 && v797 == 15 && (_BYTE)v800)
                      {
                        v495 = *(uint64_t ***)a2;
                        v496 = this[13];
                        unsigned int v497 = *((_DWORD *)this + 30);
                        if (v497)
                        {
                          unsigned int v498 = v497 - 1;
                          unsigned int v499 = ((v798 >> 4) ^ (v798 >> 9)) & (v497 - 1);
                          v500 = (char *)v496 + 48 * v499;
                          v501 = (llvm::Value *)*((void *)v500 + 3);
                          if (v501 == (llvm::Value *)v798)
                          {
LABEL_830:
                            if (v500 == (char *)v496 + 48 * v497
                              || (v547 = (llvm::detail::IEEEFloat **)*((void *)v500 + 5)) == 0)
                            {
                              v547 = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, (llvm::Value *)v798);
                            }
                            unint64_t v548 = llvm::ScalarEvolution::getSignExtendExpr((llvm::ScalarEvolution *)this, v547, v495, 0);
                            v549 = this[13];
                            unsigned int v550 = *((_DWORD *)this + 30);
                            if (v550)
                            {
                              unsigned int v551 = v550 - 1;
                              unsigned int v552 = ((v799 >> 4) ^ (v799 >> 9)) & (v550 - 1);
                              v553 = (char *)v549 + 48 * v552;
                              v554 = (llvm::Value *)*((void *)v553 + 3);
                              if (v554 == v799) {
                                goto LABEL_840;
                              }
                              int v555 = 1;
                              while (v554 != (llvm::Value *)-4096)
                              {
                                unsigned int v556 = v552 + v555++;
                                unsigned int v552 = v556 & v551;
                                v553 = (char *)v549 + 48 * (v556 & v551);
                                v554 = (llvm::Value *)*((void *)v553 + 3);
                                if (v554 == v799) {
                                  goto LABEL_840;
                                }
                              }
                            }
                            v553 = (char *)v549 + 48 * v550;
LABEL_840:
                            if (v553 == (char *)v549 + 48 * v550
                              || (v557 = (llvm::detail::IEEEFloat **)*((void *)v553 + 5)) == 0)
                            {
                              v557 = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v799);
                            }
                            unsigned int v184 = (const llvm::APInt *)llvm::ScalarEvolution::getSignExtendExpr((llvm::ScalarEvolution *)this, v557, v495, 0);
                            BOOL v185 = (llvm::ScalarEvolution *)this;
                            uint64_t v186 = (llvm::SCEV *)v548;
                            char v187 = 4;
                            return (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(v185, v186, v184, v187, 0);
                          }
                          int v502 = 1;
                          while (v501 != (llvm::Value *)-4096)
                          {
                            unsigned int v503 = v499 + v502++;
                            unsigned int v499 = v503 & v498;
                            v500 = (char *)v496 + 48 * (v503 & v498);
                            v501 = (llvm::Value *)*((void *)v500 + 3);
                            if (v501 == (llvm::Value *)v798) {
                              goto LABEL_830;
                            }
                          }
                        }
                        v500 = (char *)v496 + 48 * v497;
                        goto LABEL_830;
                      }
                      int v504 = *((_DWORD *)a2 + 5);
                      if ((v504 & 0x40000000) != 0) {
                        v505 = (llvm::Value **)*((void *)a2 - 1);
                      }
                      else {
                        v505 = (llvm::Value **)((char *)a2 - 32 * (v504 & 0x7FFFFFF));
                      }
                      v558 = *v505;
                      v559 = this[13];
                      unsigned int v560 = *((_DWORD *)this + 30);
                      if (!v560) {
                        goto LABEL_852;
                      }
                      unsigned int v561 = ((v558 >> 4) ^ (v558 >> 9)) & (v560 - 1);
                      v562 = (char *)v559 + 48 * v561;
                      v563 = (llvm::Value *)*((void *)v562 + 3);
                      if (v563 != v558)
                      {
                        int v564 = 1;
                        while (v563 != (llvm::Value *)-4096)
                        {
                          unsigned int v565 = v561 + v564++;
                          unsigned int v561 = v565 & (v560 - 1);
                          v562 = (char *)v559 + 48 * v561;
                          v563 = (llvm::Value *)*((void *)v562 + 3);
                          if (v563 == v558) {
                            goto LABEL_853;
                          }
                        }
LABEL_852:
                        v562 = (char *)v559 + 48 * v560;
                      }
LABEL_853:
                      if (v562 == (char *)v559 + 48 * v560 || (uint64_t v566 = *((void *)v562 + 5)) == 0) {
                        uint64_t v566 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v558);
                      }
                      uint64_t v379 = *(uint64_t ***)a2;
                      unsigned int v378 = (llvm::ScalarEvolution *)this;
                      uint64_t TruncateExpr = (llvm::detail::IEEEFloat **)v566;
                      break;
                    case '/':
                      int v473 = *((_DWORD *)a2 + 5);
                      if ((v473 & 0x40000000) != 0) {
                        v474 = (llvm::Value **)*((void *)a2 - 1);
                      }
                      else {
                        v474 = (llvm::Value **)((char *)a2 - 32 * (v473 & 0x7FFFFFF));
                      }
                      v506 = *v474;
                      v507 = this[13];
                      unsigned int v508 = *((_DWORD *)this + 30);
                      if (!v508) {
                        goto LABEL_782;
                      }
                      unsigned int v509 = ((v506 >> 4) ^ (v506 >> 9)) & (v508 - 1);
                      v510 = (llvm::Value **)((char *)v507 + 48 * v509);
                      v511 = v510[3];
                      if (v511 == v506) {
                        goto LABEL_783;
                      }
                      int v512 = 1;
                      while (v511 != (llvm::Value *)-4096)
                      {
                        unsigned int v513 = v509 + v512++;
                        unsigned int v509 = v513 & (v508 - 1);
                        v510 = (llvm::Value **)((char *)v507 + 48 * v509);
                        v511 = v510[3];
                        if (v511 == v506) {
                          goto LABEL_783;
                        }
                      }
LABEL_782:
                      v510 = (llvm::Value **)((char *)v507 + 48 * v508);
LABEL_783:
                      if (v510 == (llvm::Value **)((char *)v507 + 48 * v508) || (v514 = v510[5]) == 0) {
                        v514 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v506);
                      }
                      v515 = *(llvm::Type **)a2;
                      LosslessPtrToIntExpr = llvm::ScalarEvolution::getLosslessPtrToIntExpr((llvm::ScalarEvolution *)this, v514);
                      if (*((_WORD *)LosslessPtrToIntExpr + 12) != 15)
                      {
                        uint64_t SignExtendExpr = (uint64_t)llvm::ScalarEvolution::getTruncateOrZeroExtend((llvm::ScalarEvolution *)this, (llvm::detail::IEEEFloat **)LosslessPtrToIntExpr, v515, 0);
                        if (*(_WORD *)(SignExtendExpr + 24) != 15) {
                          return (const llvm::SCEV *)SignExtendExpr;
                        }
                      }
                      return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
                    case '1':
                      if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFD) != 0xD) {
                        return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
                      }
                      int v471 = *((_DWORD *)a2 + 5);
                      v472 = (v471 & 0x40000000) != 0
                           ? (llvm::Value *)*((void *)a2 - 1)
                           : (llvm::Value *)((char *)a2 - 32 * (v471 & 0x7FFFFFF));
                      unsigned int v205 = *(llvm::Value **)v472;
                      if ((*(_DWORD *)(**(void **)v472 + 8) & 0xFD) != 0xD) {
                        return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
                      }
                      unint64_t v206 = this[13];
                      unsigned int v207 = *((_DWORD *)this + 30);
                      if (!v207) {
                        goto LABEL_1177;
                      }
                      unsigned int v567 = ((v205 >> 4) ^ (v205 >> 9)) & (v207 - 1);
                      unsigned int v209 = (char *)v206 + 48 * v567;
                      v568 = (llvm::Value *)*((void *)v209 + 3);
                      if (v568 == v205) {
                        goto LABEL_1178;
                      }
                      int v569 = 1;
                      while (v568 != (llvm::Value *)-4096)
                      {
                        unsigned int v570 = v567 + v569++;
                        unsigned int v567 = v570 & (v207 - 1);
                        unsigned int v209 = (char *)v206 + 48 * v567;
                        v568 = (llvm::Value *)*((void *)v209 + 3);
                        if (v568 == v205) {
                          goto LABEL_1178;
                        }
                      }
                      goto LABEL_1177;
                    case '7':
                      return llvm::ScalarEvolution::createNodeForPHI((llvm::ScalarEvolution *)this, a2);
                    case '8':
                      goto LABEL_698;
                    case '9':
                      int v467 = *((_DWORD *)a2 + 5);
                      if ((v467 & 0x40000000) != 0) {
                        v468 = (llvm::Value **)*((void *)a2 - 1);
                      }
                      else {
                        v468 = (llvm::Value **)((char *)a2 - 32 * (v467 & 0x7FFFFFF));
                      }
                      return (const llvm::SCEV *)llvm::ScalarEvolution::createNodeForSelectOrPHI((llvm::ScalarEvolution *)this, a2, *v468, v468[4], v468[8]);
                    default:
                      return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
                  }
                  return (const llvm::SCEV *)llvm::ScalarEvolution::getSignExtendExpr(v378, TruncateExpr, v379, 0);
                }
                if (v446 != 5)
                {
                  if (v446 != 20)
                  {
                    if (v446 != 23) {
                      return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
                    }
                    int v447 = *((_DWORD *)a2 + 5);
                    if ((v447 & 0x40000000) != 0) {
                      v448 = (llvm::Value **)*((void *)a2 - 1);
                    }
                    else {
                      v448 = (llvm::Value **)((char *)a2 - 32 * (v447 & 0x7FFFFFF));
                    }
                    v517 = *v448;
                    v518 = this[13];
                    unsigned int v519 = *((_DWORD *)this + 30);
                    if (v519)
                    {
                      unsigned int v520 = ((v517 >> 4) ^ (v517 >> 9)) & (v519 - 1);
                      v521 = (char *)v518 + 48 * v520;
                      v522 = (llvm::Value *)*((void *)v521 + 3);
                      if (v522 == v517)
                      {
LABEL_797:
                        if (v521 == (char *)v518 + 48 * v519 || (uint64_t v525 = *((void *)v521 + 5)) == 0) {
                          uint64_t v525 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v517);
                        }
                        uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef((uint64_t)this, v525, 1, 0);
                        llvm::ConstantRange::getSignedMin(RangeRef, (uint64_t)&v797);
                        unsigned int v527 = v798 - 1;
                        if (v798 >= 0x41) {
                          v528 = (unint64_t *)(v797 + 8 * (v527 >> 6));
                        }
                        else {
                          v528 = &v797;
                        }
                        unint64_t v529 = *v528;
                        if (v798 >= 0x41 && v797) {
                          MEMORY[0x1D25D9CB0]();
                        }
                        if ((v529 >> v527)) {
                          return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
                        }
                        int v530 = *((_DWORD *)a2 + 5);
                        if ((v530 & 0x40000000) != 0) {
                          v531 = (char *)*((void *)a2 - 1);
                        }
                        else {
                          v531 = (char *)a2 - 32 * (v530 & 0x7FFFFFF);
                        }
                        v571 = (llvm::Value *)*((void *)v531 + 4);
                        v572 = this[13];
                        unsigned int v573 = *((_DWORD *)this + 30);
                        if (v573)
                        {
                          unsigned int v574 = ((v571 >> 4) ^ (v571 >> 9)) & (v573 - 1);
                          v575 = (char *)v572 + 48 * v574;
                          v576 = (llvm::Value *)*((void *)v575 + 3);
                          if (v576 == v571)
                          {
LABEL_874:
                            if (v575 == (char *)v572 + 48 * v573 || (uint64_t v579 = *((void *)v575 + 5)) == 0) {
                              uint64_t v579 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v571);
                            }
                            uint64_t v580 = llvm::ScalarEvolution::getRangeRef((uint64_t)this, v579, 1, 0);
                            llvm::ConstantRange::getSignedMin(v580, (uint64_t)&v797);
                            unsigned int v581 = v798 - 1;
                            if (v798 >= 0x41) {
                              v582 = (unint64_t *)(v797 + 8 * (v581 >> 6));
                            }
                            else {
                              v582 = &v797;
                            }
                            unint64_t v583 = *v582;
                            if (v798 >= 0x41 && v797) {
                              MEMORY[0x1D25D9CB0]();
                            }
                            if (((v583 >> v581) & 1) == 0)
                            {
                              int v584 = *((_DWORD *)a2 + 5);
                              if ((v584 & 0x40000000) != 0) {
                                v585 = (llvm::Value **)*((void *)a2 - 1);
                              }
                              else {
                                v585 = (llvm::Value **)((char *)a2 - 32 * (v584 & 0x7FFFFFF));
                              }
                              v601 = *v585;
                              v602 = this[13];
                              unsigned int v603 = *((_DWORD *)this + 30);
                              if (v603)
                              {
                                unsigned int v604 = ((v601 >> 4) ^ (v601 >> 9)) & (v603 - 1);
                                v605 = (char *)v602 + 48 * v604;
                                v606 = (llvm::Value *)*((void *)v605 + 3);
                                if (v606 == v601)
                                {
LABEL_917:
                                  if (v605 == (char *)v602 + 48 * v603 || (uint64_t v609 = *((void *)v605 + 5)) == 0)
                                  {
                                    uint64_t v609 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v601);
                                    int v584 = *((_DWORD *)a2 + 5);
                                  }
                                  if ((v584 & 0x40000000) != 0) {
                                    v610 = (char *)*((void *)a2 - 1);
                                  }
                                  else {
                                    v610 = (char *)a2 - 32 * (v584 & 0x7FFFFFF);
                                  }
                                  v611 = (llvm::Value *)*((void *)v610 + 4);
                                  v612 = this[13];
                                  unsigned int v613 = *((_DWORD *)this + 30);
                                  if (v613)
                                  {
                                    unsigned int v614 = ((v611 >> 4) ^ (v611 >> 9)) & (v613 - 1);
                                    v615 = (llvm::Value **)((char *)v612 + 48 * v614);
                                    v616 = v615[3];
                                    if (v616 == v611)
                                    {
LABEL_930:
                                      if (v615 == (llvm::Value **)((char *)v612 + 48 * v613) || (uint64_t v161 = v615[5]) == 0) {
                                        uint64_t v161 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v611);
                                      }
                                      uint64_t v162 = (llvm::ScalarEvolution *)this;
                                      uint64_t v163 = (const llvm::SCEV *)v609;
                                      return (const llvm::SCEV *)llvm::ScalarEvolution::getURemExpr(v162, v163, v161);
                                    }
                                    int v617 = 1;
                                    while (v616 != (llvm::Value *)-4096)
                                    {
                                      unsigned int v618 = v614 + v617++;
                                      unsigned int v614 = v618 & (v613 - 1);
                                      v615 = (llvm::Value **)((char *)v612 + 48 * v614);
                                      v616 = v615[3];
                                      if (v616 == v611) {
                                        goto LABEL_930;
                                      }
                                    }
                                  }
                                  v615 = (llvm::Value **)((char *)v612 + 48 * v613);
                                  goto LABEL_930;
                                }
                                int v607 = 1;
                                while (v606 != (llvm::Value *)-4096)
                                {
                                  unsigned int v608 = v604 + v607++;
                                  unsigned int v604 = v608 & (v603 - 1);
                                  v605 = (char *)v602 + 48 * v604;
                                  v606 = (llvm::Value *)*((void *)v605 + 3);
                                  if (v606 == v601) {
                                    goto LABEL_917;
                                  }
                                }
                              }
                              v605 = (char *)v602 + 48 * v603;
                              goto LABEL_917;
                            }
                            return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
                          }
                          int v577 = 1;
                          while (v576 != (llvm::Value *)-4096)
                          {
                            unsigned int v578 = v574 + v577++;
                            unsigned int v574 = v578 & (v573 - 1);
                            v575 = (char *)v572 + 48 * v574;
                            v576 = (llvm::Value *)*((void *)v575 + 3);
                            if (v576 == v571) {
                              goto LABEL_874;
                            }
                          }
                        }
                        v575 = (char *)v572 + 48 * v573;
                        goto LABEL_874;
                      }
                      int v523 = 1;
                      while (v522 != (llvm::Value *)-4096)
                      {
                        unsigned int v524 = v520 + v523++;
                        unsigned int v520 = v524 & (v519 - 1);
                        v521 = (char *)v518 + 48 * v520;
                        v522 = (llvm::Value *)*((void *)v521 + 3);
                        if (v522 == v517) {
                          goto LABEL_797;
                        }
                      }
                    }
                    v521 = (char *)v518 + 48 * v519;
                    goto LABEL_797;
                  }
                  int v475 = *((_DWORD *)a2 + 5);
                  if ((v475 & 0x40000000) != 0) {
                    v476 = (llvm::Value **)*((void *)a2 - 1);
                  }
                  else {
                    v476 = (llvm::Value **)((char *)a2 - 32 * (v475 & 0x7FFFFFF));
                  }
                  v532 = *v476;
                  v533 = this[13];
                  unsigned int v534 = *((_DWORD *)this + 30);
                  if (v534)
                  {
                    unsigned int v535 = ((v532 >> 4) ^ (v532 >> 9)) & (v534 - 1);
                    v536 = (char *)v533 + 48 * v535;
                    v537 = (llvm::Value *)*((void *)v536 + 3);
                    if (v537 == v532)
                    {
LABEL_817:
                      if (v536 == (char *)v533 + 48 * v534 || (uint64_t v540 = *((void *)v536 + 5)) == 0) {
                        uint64_t v540 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v532);
                      }
                      uint64_t v541 = llvm::ScalarEvolution::getRangeRef((uint64_t)this, v540, 1, 0);
                      llvm::ConstantRange::getSignedMin(v541, (uint64_t)&v797);
                      unsigned int v542 = v798 - 1;
                      if (v798 >= 0x41) {
                        v543 = (unint64_t *)(v797 + 8 * (v542 >> 6));
                      }
                      else {
                        v543 = &v797;
                      }
                      unint64_t v544 = *v543;
                      if (v798 >= 0x41 && v797) {
                        MEMORY[0x1D25D9CB0]();
                      }
                      if ((v544 >> v542)) {
                        return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
                      }
                      int v545 = *((_DWORD *)a2 + 5);
                      if ((v545 & 0x40000000) != 0) {
                        v546 = (char *)*((void *)a2 - 1);
                      }
                      else {
                        v546 = (char *)a2 - 32 * (v545 & 0x7FFFFFF);
                      }
                      v586 = (llvm::Value *)*((void *)v546 + 4);
                      v587 = this[13];
                      unsigned int v588 = *((_DWORD *)this + 30);
                      if (v588)
                      {
                        unsigned int v589 = ((v586 >> 4) ^ (v586 >> 9)) & (v588 - 1);
                        v590 = (char *)v587 + 48 * v589;
                        v591 = (llvm::Value *)*((void *)v590 + 3);
                        if (v591 == v586)
                        {
LABEL_894:
                          if (v590 == (char *)v587 + 48 * v588 || (uint64_t v594 = *((void *)v590 + 5)) == 0) {
                            uint64_t v594 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v586);
                          }
                          uint64_t v595 = llvm::ScalarEvolution::getRangeRef((uint64_t)this, v594, 1, 0);
                          llvm::ConstantRange::getSignedMin(v595, (uint64_t)&v797);
                          unsigned int v596 = v798 - 1;
                          if (v798 >= 0x41) {
                            v597 = (unint64_t *)(v797 + 8 * (v596 >> 6));
                          }
                          else {
                            v597 = &v797;
                          }
                          unint64_t v598 = *v597;
                          if (v798 >= 0x41 && v797) {
                            MEMORY[0x1D25D9CB0]();
                          }
                          if ((v598 >> v596)) {
                            return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
                          }
                          int v599 = *((_DWORD *)a2 + 5);
                          if ((v599 & 0x40000000) != 0) {
                            v600 = (llvm::Value **)*((void *)a2 - 1);
                          }
                          else {
                            v600 = (llvm::Value **)((char *)a2 - 32 * (v599 & 0x7FFFFFF));
                          }
                          v619 = *v600;
                          v620 = this[13];
                          unsigned int v621 = *((_DWORD *)this + 30);
                          if (v621)
                          {
                            unsigned int v622 = ((v619 >> 4) ^ (v619 >> 9)) & (v621 - 1);
                            v623 = (char *)v620 + 48 * v622;
                            v624 = (llvm::Value *)*((void *)v623 + 3);
                            if (v624 == v619)
                            {
LABEL_942:
                              if (v623 == (char *)v620 + 48 * v621 || (uint64_t v627 = *((void *)v623 + 5)) == 0)
                              {
                                uint64_t v627 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v619);
                                int v599 = *((_DWORD *)a2 + 5);
                              }
                              if ((v599 & 0x40000000) != 0) {
                                v628 = (char *)*((void *)a2 - 1);
                              }
                              else {
                                v628 = (char *)a2 - 32 * (v599 & 0x7FFFFFF);
                              }
                              v629 = (llvm::Value *)*((void *)v628 + 4);
                              v630 = this[13];
                              unsigned int v631 = *((_DWORD *)this + 30);
                              if (v631)
                              {
                                unsigned int v632 = ((v629 >> 4) ^ (v629 >> 9)) & (v631 - 1);
                                v633 = (char *)v630 + 48 * v632;
                                v634 = (llvm::Value *)*((void *)v633 + 3);
                                if (v634 == v629)
                                {
LABEL_955:
                                  if (v633 == (char *)v630 + 48 * v631 || (unint64_t v151 = *((void *)v633 + 5)) == 0) {
                                    unint64_t v151 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v629);
                                  }
                                  unsigned int v152 = (llvm::ScalarEvolution *)this;
                                  uint64_t v153 = (const llvm::SCEV *)v627;
                                  return (const llvm::SCEV *)llvm::ScalarEvolution::getUDivExpr(v152, v153, v151);
                                }
                                int v635 = 1;
                                while (v634 != (llvm::Value *)-4096)
                                {
                                  unsigned int v636 = v632 + v635++;
                                  unsigned int v632 = v636 & (v631 - 1);
                                  v633 = (char *)v630 + 48 * v632;
                                  v634 = (llvm::Value *)*((void *)v633 + 3);
                                  if (v634 == v629) {
                                    goto LABEL_955;
                                  }
                                }
                              }
                              v633 = (char *)v630 + 48 * v631;
                              goto LABEL_955;
                            }
                            int v625 = 1;
                            while (v624 != (llvm::Value *)-4096)
                            {
                              unsigned int v626 = v622 + v625++;
                              unsigned int v622 = v626 & (v621 - 1);
                              v623 = (char *)v620 + 48 * v622;
                              v624 = (llvm::Value *)*((void *)v623 + 3);
                              if (v624 == v619) {
                                goto LABEL_942;
                              }
                            }
                          }
                          v623 = (char *)v620 + 48 * v621;
                          goto LABEL_942;
                        }
                        int v592 = 1;
                        while (v591 != (llvm::Value *)-4096)
                        {
                          unsigned int v593 = v589 + v592++;
                          unsigned int v589 = v593 & (v588 - 1);
                          v590 = (char *)v587 + 48 * v589;
                          v591 = (llvm::Value *)*((void *)v590 + 3);
                          if (v591 == v586) {
                            goto LABEL_894;
                          }
                        }
                      }
                      v590 = (char *)v587 + 48 * v588;
                      goto LABEL_894;
                    }
                    int v538 = 1;
                    while (v537 != (llvm::Value *)-4096)
                    {
                      unsigned int v539 = v535 + v538++;
                      unsigned int v535 = v539 & (v534 - 1);
                      v536 = (char *)v533 + 48 * v535;
                      v537 = (llvm::Value *)*((void *)v536 + 3);
                      if (v537 == v532) {
                        goto LABEL_817;
                      }
                    }
                  }
                  v536 = (char *)v533 + 48 * v534;
                  goto LABEL_817;
                }
LABEL_698:
                uint64_t v449 = *((void *)a2 + 8);
                if (v449 && (*(unsigned char *)(v449 + 29) & 0x40) != 0)
                {
                  uint64_t v770 = *(unsigned int *)(v449 + 8);
                  if (v770)
                  {
                    uint64_t v771 = v449 + 40;
                    int v772 = -1;
                    while (!*(void *)v771 || (*(unsigned char *)(*(void *)v771 + 17) & 0x40) == 0)
                    {
                      ++v772;
                      v771 += 8;
                      if (!--v770) {
                        goto LABEL_1169;
                      }
                    }
                    goto LABEL_1170;
                  }
                }
                else
                {
                  uint64_t v450 = *((void *)a2 - 4);
                  if (!v450
                    || *(unsigned char *)(v450 + 16)
                    || *(void *)(v450 + 24) != *((void *)a2 + 9)
                    || (uint64_t v451 = *(void *)(v450 + 112)) == 0
                    || (*(unsigned char *)(v451 + 29) & 0x40) == 0)
                  {
LABEL_705:
                    if (v445 != 84) {
                      return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
                    }
                    uint64_t v452 = *((void *)a2 - 4);
                    if (!v452
                      || *(unsigned char *)(v452 + 16)
                      || *(void *)(v452 + 24) != *((void *)a2 + 9)
                      || (*(unsigned char *)(v452 + 33) & 0x20) == 0)
                    {
                      return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
                    }
                    int v453 = *(_DWORD *)(v452 + 36);
                    if (v453 <= 299)
                    {
                      if (v453 <= 274)
                      {
                        if (v453 != 1)
                        {
                          if (v453 != 274) {
                            return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
                          }
                          uint64_t v454 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                          v455 = (llvm::Value *)*((void *)a2 - 4 * v454);
                          v456 = this[13];
                          unsigned int v457 = *((_DWORD *)this + 30);
                          if (v457)
                          {
                            unsigned int v458 = ((v455 >> 4) ^ (v455 >> 9)) & (v457 - 1);
                            v459 = (llvm::Value **)((char *)v456 + 48 * v458);
                            v460 = v459[3];
                            if (v460 == v455)
                            {
LABEL_1060:
                              if (v459 == (llvm::Value **)((char *)v456 + 48 * v457) || (v695 = v459[5]) == 0)
                              {
                                v695 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v455);
                                v456 = this[13];
                                unsigned int v457 = *((_DWORD *)this + 30);
                                uint64_t v454 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                              }
                              v723 = (llvm::Value *)((void *)a2 - 4 * v454)[4];
                              if (v457)
                              {
                                unsigned int v724 = ((v723 >> 4) ^ (v723 >> 9)) & (v457 - 1);
                                v725 = (llvm::Value **)((char *)v456 + 48 * v724);
                                v726 = v725[3];
                                if (v726 == v723) {
                                  goto LABEL_1090;
                                }
                                int v727 = 1;
                                while (v726 != (llvm::Value *)-4096)
                                {
                                  unsigned int v728 = v724 + v727++;
                                  unsigned int v724 = v728 & (v457 - 1);
                                  v725 = (llvm::Value **)((char *)v456 + 48 * v724);
                                  v726 = v725[3];
                                  if (v726 == v723) {
                                    goto LABEL_1090;
                                  }
                                }
                              }
                              v725 = (llvm::Value **)((char *)v456 + 48 * v457);
LABEL_1090:
                              if (v725 != (llvm::Value **)((char *)v456 + 48 * v457))
                              {
                                v743 = v725[5];
                                if (v743) {
                                  return (const llvm::SCEV *)llvm::ScalarEvolution::getSMaxExpr((llvm::ScalarEvolution *)this, v695, v743);
                                }
                              }
                              unint64_t v744 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v723);
LABEL_1116:
                              v743 = (const llvm::SCEV *)v744;
                              return (const llvm::SCEV *)llvm::ScalarEvolution::getSMaxExpr((llvm::ScalarEvolution *)this, v695, v743);
                            }
                            int v461 = 1;
                            while (v460 != (llvm::Value *)-4096)
                            {
                              unsigned int v462 = v458 + v461++;
                              unsigned int v458 = v462 & (v457 - 1);
                              v459 = (llvm::Value **)((char *)v456 + 48 * v458);
                              v460 = v459[3];
                              if (v460 == v455) {
                                goto LABEL_1060;
                              }
                            }
                          }
                          v459 = (llvm::Value **)((char *)v456 + 48 * v457);
                          goto LABEL_1060;
                        }
                        uint64_t v659 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                        v660 = (llvm::Value *)*((void *)a2 - 4 * v659);
                        v661 = this[13];
                        unsigned int v662 = *((_DWORD *)this + 30);
                        if (v662)
                        {
                          unsigned int v663 = ((v660 >> 4) ^ (v660 >> 9)) & (v662 - 1);
                          v664 = (llvm::Value **)((char *)v661 + 48 * v663);
                          v665 = v664[3];
                          if (v665 == v660) {
                            goto LABEL_1009;
                          }
                          int v666 = 1;
                          while (v665 != (llvm::Value *)-4096)
                          {
                            unsigned int v667 = v663 + v666++;
                            unsigned int v663 = v667 & (v662 - 1);
                            v664 = (llvm::Value **)((char *)v661 + 48 * v663);
                            v665 = v664[3];
                            if (v665 == v660) {
                              goto LABEL_1009;
                            }
                          }
                        }
                        v664 = (llvm::Value **)((char *)v661 + 48 * v662);
LABEL_1009:
                        if (v664 == (llvm::Value **)((char *)v661 + 48 * v662) || (v695 = v664[5]) == 0)
                        {
                          v695 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v660);
                          uint64_t v659 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                        }
                        uint64_t v696 = ((void *)a2 - 4 * v659)[4];
                        uint64_t v697 = *(unsigned int *)(v696 + 32);
                        if (v697 > 0x40)
                        {
                          int v746 = 0;
                          int64_t v747 = (unint64_t)(v697 + 63) >> 6;
                          do
                          {
                            BOOL v85 = v747-- < 1;
                            if (v85) {
                              break;
                            }
                            unint64_t v748 = *(void *)(*(void *)(v696 + 24) + 8 * v747);
                            v746 += __clz(v748);
                          }
                          while (!v748);
                          int v749 = v697 | 0xFFFFFFC0;
                          if ((v697 & 0x3F) == 0) {
                            int v749 = 0;
                          }
                          BOOL v698 = v746 + v749 == v697 - 1;
                        }
                        else
                        {
                          BOOL v698 = *(void *)(v696 + 24) == 1;
                        }
                        if (v698) {
                          uint64_t v751 = 4;
                        }
                        else {
                          uint64_t v751 = 0;
                        }
                        unint64_t v744 = llvm::ScalarEvolution::getNegativeSCEV((llvm::ScalarEvolution *)this, (uint64_t)v695, (const llvm::APInt *)v751);
                        goto LABEL_1116;
                      }
                      if (v453 != 275)
                      {
                        if (v453 != 289) {
                          return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
                        }
                        unsigned int v205 = (llvm::Value *)*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
                        unint64_t v206 = this[13];
                        unsigned int v207 = *((_DWORD *)this + 30);
                        if (v207)
                        {
                          unsigned int v646 = ((v205 >> 4) ^ (v205 >> 9)) & (v207 - 1);
                          unsigned int v209 = (char *)v206 + 48 * v646;
                          v647 = (llvm::Value *)*((void *)v209 + 3);
                          if (v647 == v205) {
                            goto LABEL_1178;
                          }
                          int v648 = 1;
                          while (v647 != (llvm::Value *)-4096)
                          {
                            unsigned int v649 = v646 + v648++;
                            unsigned int v646 = v649 & (v207 - 1);
                            unsigned int v209 = (char *)v206 + 48 * v646;
                            v647 = (llvm::Value *)*((void *)v209 + 3);
                            if (v647 == v205) {
                              goto LABEL_1178;
                            }
                          }
                        }
                        goto LABEL_1177;
                      }
                      uint64_t v677 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                      v678 = (llvm::Value *)*((void *)a2 - 4 * v677);
                      v679 = this[13];
                      unsigned int v680 = *((_DWORD *)this + 30);
                      if (v680)
                      {
                        unsigned int v681 = ((v678 >> 4) ^ (v678 >> 9)) & (v680 - 1);
                        v682 = (llvm::Value **)((char *)v679 + 48 * v681);
                        v683 = v682[3];
                        if (v683 == v678)
                        {
LABEL_1025:
                          if (v682 == (llvm::Value **)((char *)v679 + 48 * v680) || (v706 = v682[5]) == 0)
                          {
                            v706 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v678);
                            v679 = this[13];
                            unsigned int v680 = *((_DWORD *)this + 30);
                            uint64_t v677 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                          }
                          v707 = (llvm::Value *)((void *)a2 - 4 * v677)[4];
                          if (v680)
                          {
                            unsigned int v708 = ((v707 >> 4) ^ (v707 >> 9)) & (v680 - 1);
                            v709 = (llvm::Value **)((char *)v679 + 48 * v708);
                            v710 = v709[3];
                            if (v710 == v707) {
                              goto LABEL_1050;
                            }
                            int v711 = 1;
                            while (v710 != (llvm::Value *)-4096)
                            {
                              unsigned int v712 = v708 + v711++;
                              unsigned int v708 = v712 & (v680 - 1);
                              v709 = (llvm::Value **)((char *)v679 + 48 * v708);
                              v710 = v709[3];
                              if (v710 == v707) {
                                goto LABEL_1050;
                              }
                            }
                          }
                          v709 = (llvm::Value **)((char *)v679 + 48 * v680);
LABEL_1050:
                          if (v709 == (llvm::Value **)((char *)v679 + 48 * v680) || (v722 = v709[5]) == 0) {
                            v722 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v707);
                          }
                          return (const llvm::SCEV *)llvm::ScalarEvolution::getSMinExpr((llvm::ScalarEvolution *)this, v706, v722);
                        }
                        int v684 = 1;
                        while (v683 != (llvm::Value *)-4096)
                        {
                          unsigned int v685 = v681 + v684++;
                          unsigned int v681 = v685 & (v680 - 1);
                          v682 = (llvm::Value **)((char *)v679 + 48 * v681);
                          v683 = v682[3];
                          if (v683 == v678) {
                            goto LABEL_1025;
                          }
                        }
                      }
                      v682 = (llvm::Value **)((char *)v679 + 48 * v680);
                      goto LABEL_1025;
                    }
                    if (v453 <= 305)
                    {
                      if (v453 != 300)
                      {
                        if (v453 != 305) {
                          return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
                        }
                        uint64_t v637 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                        v638 = (llvm::Value *)*((void *)a2 - 4 * v637);
                        v639 = this[13];
                        unsigned int v640 = *((_DWORD *)this + 30);
                        if (v640)
                        {
                          unsigned int v641 = ((v638 >> 4) ^ (v638 >> 9)) & (v640 - 1);
                          v642 = (char *)v639 + 48 * v641;
                          v643 = (llvm::Value *)*((void *)v642 + 3);
                          if (v643 == v638)
                          {
LABEL_1070:
                            if (v642 == (char *)v639 + 48 * v640 || (uint64_t v729 = *((void *)v642 + 5)) == 0)
                            {
                              uint64_t v729 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v638);
                              v639 = this[13];
                              unsigned int v640 = *((_DWORD *)this + 30);
                              uint64_t v637 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                            }
                            v730 = (llvm::Value *)((void *)a2 - 4 * v637)[4];
                            if (v640)
                            {
                              unsigned int v731 = ((v730 >> 4) ^ (v730 >> 9)) & (v640 - 1);
                              v732 = (llvm::Value **)((char *)v639 + 48 * v731);
                              v733 = v732[3];
                              if (v733 == v730) {
                                goto LABEL_1094;
                              }
                              int v734 = 1;
                              while (v733 != (llvm::Value *)-4096)
                              {
                                unsigned int v735 = v731 + v734++;
                                unsigned int v731 = v735 & (v640 - 1);
                                v732 = (llvm::Value **)((char *)v639 + 48 * v731);
                                v733 = v732[3];
                                if (v733 == v730) {
                                  goto LABEL_1094;
                                }
                              }
                            }
                            v732 = (llvm::Value **)((char *)v639 + 48 * v640);
LABEL_1094:
                            if (v732 == (llvm::Value **)((char *)v639 + 48 * v640) || (unint64_t v241 = v732[5]) == 0) {
                              unint64_t v241 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v730);
                            }
                            uint64_t v242 = (llvm::ScalarEvolution *)this;
                            int v243 = (const llvm::SCEV *)v729;
                            return (const llvm::SCEV *)llvm::ScalarEvolution::getUMaxExpr(v242, v243, v241);
                          }
                          int v644 = 1;
                          while (v643 != (llvm::Value *)-4096)
                          {
                            unsigned int v645 = v641 + v644++;
                            unsigned int v641 = v645 & (v640 - 1);
                            v642 = (char *)v639 + 48 * v641;
                            v643 = (llvm::Value *)*((void *)v642 + 3);
                            if (v643 == v638) {
                              goto LABEL_1070;
                            }
                          }
                        }
                        v642 = (char *)v639 + 48 * v640;
                        goto LABEL_1070;
                      }
                      uint64_t v668 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                      v669 = (llvm::Value *)*((void *)a2 - 4 * v668);
                      v670 = this[13];
                      unsigned int v671 = *((_DWORD *)this + 30);
                      if (v671)
                      {
                        unsigned int v672 = ((v669 >> 4) ^ (v669 >> 9)) & (v671 - 1);
                        v673 = (llvm::Value **)((char *)v670 + 48 * v672);
                        v674 = v673[3];
                        if (v674 == v669)
                        {
LABEL_1015:
                          if (v673 == (llvm::Value **)((char *)v670 + 48 * v671) || (v699 = v673[5]) == 0)
                          {
                            v699 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v669);
                            v670 = this[13];
                            unsigned int v671 = *((_DWORD *)this + 30);
                            uint64_t v668 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                          }
                          v700 = (llvm::Value *)((void *)a2 - 4 * v668)[4];
                          if (v671)
                          {
                            unsigned int v701 = ((v700 >> 4) ^ (v700 >> 9)) & (v671 - 1);
                            v702 = (llvm::Value **)((char *)v670 + 48 * v701);
                            v703 = v702[3];
                            if (v703 == v700) {
                              goto LABEL_1045;
                            }
                            int v704 = 1;
                            while (v703 != (llvm::Value *)-4096)
                            {
                              unsigned int v705 = v701 + v704++;
                              unsigned int v701 = v705 & (v671 - 1);
                              v702 = (llvm::Value **)((char *)v670 + 48 * v701);
                              v703 = v702[3];
                              if (v703 == v700) {
                                goto LABEL_1045;
                              }
                            }
                          }
                          v702 = (llvm::Value **)((char *)v670 + 48 * v671);
LABEL_1045:
                          if (v702 == (llvm::Value **)((char *)v670 + 48 * v671) || (v720 = v702[5]) == 0) {
                            v720 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v700);
                          }
                          NotSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getNotSCEV((llvm::ScalarEvolution *)this, v720, v6);
                          uint64_t UMinExpr = llvm::ScalarEvolution::getUMinExpr((llvm::ScalarEvolution *)this, v699, NotSCEV, 0);
                          uint64_t v267 = (llvm::ScalarEvolution *)this;
                          uint64_t v266 = (uint64_t)v720;
                          uint64_t v269 = 2;
                          return (const llvm::SCEV *)sub_1CBFD7D6C((uint64_t)v267, UMinExpr, v266, v269, 0);
                        }
                        int v675 = 1;
                        while (v674 != (llvm::Value *)-4096)
                        {
                          unsigned int v676 = v672 + v675++;
                          unsigned int v672 = v676 & (v671 - 1);
                          v673 = (llvm::Value **)((char *)v670 + 48 * v672);
                          v674 = v673[3];
                          if (v674 == v669) {
                            goto LABEL_1015;
                          }
                        }
                      }
                      v673 = (llvm::Value **)((char *)v670 + 48 * v671);
                      goto LABEL_1015;
                    }
                    if (v453 != 306)
                    {
                      if (v453 != 311) {
                        return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
                      }
                      uint64_t v650 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                      v651 = (llvm::Value *)*((void *)a2 - 4 * v650);
                      v652 = this[13];
                      unsigned int v653 = *((_DWORD *)this + 30);
                      if (v653)
                      {
                        unsigned int v654 = ((v651 >> 4) ^ (v651 >> 9)) & (v653 - 1);
                        v655 = (llvm::Value **)((char *)v652 + 48 * v654);
                        v656 = v655[3];
                        if (v656 == v651)
                        {
LABEL_1080:
                          if (v655 == (llvm::Value **)((char *)v652 + 48 * v653) || (v736 = v655[5]) == 0)
                          {
                            v736 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v651);
                            v652 = this[13];
                            unsigned int v653 = *((_DWORD *)this + 30);
                            uint64_t v650 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                          }
                          v737 = (llvm::Value *)((void *)a2 - 4 * v650)[4];
                          if (v653)
                          {
                            unsigned int v738 = ((v737 >> 4) ^ (v737 >> 9)) & (v653 - 1);
                            v739 = (llvm::Value **)((char *)v652 + 48 * v738);
                            v740 = v739[3];
                            if (v740 == v737)
                            {
LABEL_1099:
                              if (v739 == (llvm::Value **)((char *)v652 + 48 * v653) || (v745 = v739[5]) == 0) {
                                v745 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v737);
                              }
                              unsigned int v184 = (const llvm::APInt *)llvm::ScalarEvolution::getUMinExpr((llvm::ScalarEvolution *)this, v736, v745, 0);
                              BOOL v185 = (llvm::ScalarEvolution *)this;
                              uint64_t v186 = v736;
                              char v187 = 2;
                              return (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(v185, v186, v184, v187, 0);
                            }
                            int v741 = 1;
                            while (v740 != (llvm::Value *)-4096)
                            {
                              unsigned int v742 = v738 + v741++;
                              unsigned int v738 = v742 & (v653 - 1);
                              v739 = (llvm::Value **)((char *)v652 + 48 * v738);
                              v740 = v739[3];
                              if (v740 == v737) {
                                goto LABEL_1099;
                              }
                            }
                          }
                          v739 = (llvm::Value **)((char *)v652 + 48 * v653);
                          goto LABEL_1099;
                        }
                        int v657 = 1;
                        while (v656 != (llvm::Value *)-4096)
                        {
                          unsigned int v658 = v654 + v657++;
                          unsigned int v654 = v658 & (v653 - 1);
                          v655 = (llvm::Value **)((char *)v652 + 48 * v654);
                          v656 = v655[3];
                          if (v656 == v651) {
                            goto LABEL_1080;
                          }
                        }
                      }
                      v655 = (llvm::Value **)((char *)v652 + 48 * v653);
                      goto LABEL_1080;
                    }
                    uint64_t v686 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                    v687 = (llvm::Value *)*((void *)a2 - 4 * v686);
                    v688 = this[13];
                    unsigned int v689 = *((_DWORD *)this + 30);
                    if (v689)
                    {
                      unsigned int v690 = ((v687 >> 4) ^ (v687 >> 9)) & (v689 - 1);
                      v691 = (char *)v688 + 48 * v690;
                      v692 = (llvm::Value *)*((void *)v691 + 3);
                      if (v692 == v687)
                      {
LABEL_1035:
                        if (v691 == (char *)v688 + 48 * v689 || (uint64_t v713 = *((void *)v691 + 5)) == 0)
                        {
                          uint64_t v713 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v687);
                          v688 = this[13];
                          unsigned int v689 = *((_DWORD *)this + 30);
                          uint64_t v686 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
                        }
                        v714 = (llvm::Value *)((void *)a2 - 4 * v686)[4];
                        if (v689)
                        {
                          unsigned int v715 = ((v714 >> 4) ^ (v714 >> 9)) & (v689 - 1);
                          v716 = (llvm::Value **)((char *)v688 + 48 * v715);
                          v717 = v716[3];
                          if (v717 == v714) {
                            goto LABEL_1055;
                          }
                          int v718 = 1;
                          while (v717 != (llvm::Value *)-4096)
                          {
                            unsigned int v719 = v715 + v718++;
                            unsigned int v715 = v719 & (v689 - 1);
                            v716 = (llvm::Value **)((char *)v688 + 48 * v715);
                            v717 = v716[3];
                            if (v717 == v714) {
                              goto LABEL_1055;
                            }
                          }
                        }
                        v716 = (llvm::Value **)((char *)v688 + 48 * v689);
LABEL_1055:
                        if (v716 == (llvm::Value **)((char *)v688 + 48 * v689) || (uint64_t v419 = v716[5]) == 0) {
                          uint64_t v419 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v714);
                        }
                        v420 = (llvm::ScalarEvolution *)this;
                        uint64_t v421 = (const llvm::SCEV *)v713;
                        return (const llvm::SCEV *)llvm::ScalarEvolution::getUMinExpr(v420, v421, v419, 0);
                      }
                      int v693 = 1;
                      while (v692 != (llvm::Value *)-4096)
                      {
                        unsigned int v694 = v690 + v693++;
                        unsigned int v690 = v694 & (v689 - 1);
                        v691 = (char *)v688 + 48 * v690;
                        v692 = (llvm::Value *)*((void *)v691 + 3);
                        if (v692 == v687) {
                          goto LABEL_1035;
                        }
                      }
                    }
                    v691 = (char *)v688 + 48 * v689;
                    goto LABEL_1035;
                  }
                  uint64_t v773 = *(unsigned int *)(v451 + 8);
                  if (v773)
                  {
                    uint64_t v774 = v451 + 40;
                    int v772 = -1;
                    while (!*(void *)v774 || (*(unsigned char *)(*(void *)v774 + 17) & 0x40) == 0)
                    {
                      ++v772;
                      v774 += 8;
                      if (!--v773) {
                        goto LABEL_1169;
                      }
                    }
                    goto LABEL_1170;
                  }
                }
LABEL_1169:
                int v772 = 0;
LABEL_1170:
                unsigned int v205 = (llvm::Value *)*((void *)a2
                                      + 4 * (v772 - 1)
                                      + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
                if (!v205) {
                  goto LABEL_705;
                }
                unint64_t v206 = this[13];
                unsigned int v207 = *((_DWORD *)this + 30);
                if (v207)
                {
                  unsigned int v775 = (v207 - 1) & ((v205 >> 4) ^ (v205 >> 9));
                  unsigned int v209 = (char *)v206 + 48 * v775;
                  v776 = (llvm::Value *)*((void *)v209 + 3);
                  if (v776 == v205) {
                    goto LABEL_1178;
                  }
                  int v777 = 1;
                  while (v776 != (llvm::Value *)-4096)
                  {
                    unsigned int v778 = v775 + v777++;
                    unsigned int v775 = v778 & (v207 - 1);
                    unsigned int v209 = (char *)v206 + 48 * v775;
                    v776 = (llvm::Value *)*((void *)v209 + 3);
                    if (v776 == v205) {
                      goto LABEL_1178;
                    }
                  }
                }
LABEL_1177:
                unsigned int v209 = (char *)v206 + 48 * v207;
LABEL_1178:
                if (v209 != (char *)v206 + 48 * v207)
                {
                  uint64_t SignExtendExpr = *((void *)v209 + 5);
                  if (SignExtendExpr) {
                    return (const llvm::SCEV *)SignExtendExpr;
                  }
                }
                uint64_t v278 = (llvm::ScalarEvolution *)this;
                return (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(v278, v205);
              }
              int v355 = 1;
              while (v354 != (llvm::Value *)-4096)
              {
                unsigned int v356 = v352 + v355++;
                unsigned int v352 = v356 & (v351 - 1);
                uint64_t v353 = (llvm::Value **)((char *)v350 + 48 * v352);
                unsigned int v354 = v353[3];
                if (v354 == v349) {
                  goto LABEL_540;
                }
              }
            }
            uint64_t v353 = (llvm::Value **)((char *)v350 + 48 * v351);
            goto LABEL_540;
          }
        }
        else
        {
          unint64_t v99 = *((void *)v92 + 3);
          if (v99 >= v97) {
            goto LABEL_687;
          }
          if (v99) {
            goto LABEL_156;
          }
        }
        unsigned int v205 = v791[1];
        unint64_t v206 = this[13];
        unsigned int v207 = *((_DWORD *)this + 30);
        if (v207)
        {
          unsigned int v208 = ((LODWORD(v791[1]) >> 4) ^ (LODWORD(v791[1]) >> 9)) & (v207 - 1);
          unsigned int v209 = (char *)v206 + 48 * v208;
          uint64_t v210 = (llvm::Value *)*((void *)v209 + 3);
          if (v210 == v791[1]) {
            goto LABEL_1178;
          }
          int v211 = 1;
          while (v210 != (llvm::Value *)-4096)
          {
            unsigned int v212 = v208 + v211++;
            unsigned int v208 = v212 & (v207 - 1);
            unsigned int v209 = (char *)v206 + 48 * v208;
            uint64_t v210 = (llvm::Value *)*((void *)v209 + 3);
            if (v210 == v791[1]) {
              goto LABEL_1178;
            }
          }
        }
        goto LABEL_1177;
      case 0x1C:
        BOOL v109 = v792[0];
        if (!v792[0] || *((unsigned char *)v792[0] + 16) != 16) {
          goto LABEL_622;
        }
        unsigned int v110 = (unint64_t *)((char *)v792[0] + 24);
        uint64_t v111 = *((unsigned int *)v792[0] + 8);
        if (v111 > 0x40)
        {
          int v213 = 0;
          int64_t v214 = (unint64_t)(v111 + 63) >> 6;
          do
          {
            BOOL v85 = v214-- < 1;
            if (v85) {
              break;
            }
            unint64_t v215 = *(void *)(*v110 + 8 * v214);
            v213 += __clz(v215);
          }
          while (!v215);
          int v216 = v111 | 0xFFFFFFC0;
          if ((v111 & 0x3F) == 0) {
            int v216 = 0;
          }
          if (v213 + v216 != v111)
          {
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::Value *)((char *)v792[0] + 24)) != v111)
            {
              llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v109 + 3);
              DWORD2(__src) = v111;
              llvm::APInt::initSlowCase((llvm::APInt *)&__src);
            }
            goto LABEL_410;
          }
        }
        else
        {
          unint64_t v112 = *v110;
          if (*v110)
          {
            if (v111 && v112 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v111)
            {
              int v113 = v111 + __clz(v112) - 64;
              unsigned int v114 = __clz(__rbit64(v112));
              DWORD2(__src) = *((_DWORD *)v792[0] + 8);
              *(void *)&long long __src = 0;
              if (v111 >= v114) {
                unsigned int v115 = v114;
              }
              else {
                unsigned int v115 = v111;
              }
              DWORD2(v795) = v111;
              *(void *)&long long v795 = 0;
              uint64_t v287 = this[3];
              uint64_t v286 = this[4];
              if (!v791[1] || *((unsigned __int8 *)v791[1] + 16) < 0x1Cu || (unsigned int v288 = v791[1], !*((void *)v791[1] + 5))) {
                unsigned int v288 = 0;
              }
              unint64_t v797 = *((void *)*this + 5) + 272;
              uint64_t v798 = (uint64_t)v287;
              v799 = v288;
              v800 = v286;
              uint64_t v801 = 0;
              char v802 = 1;
              sub_1CC15FBF8((uint64_t)v791[1], (int8x8_t *)&__src, 0, (const llvm::DataLayout **)&v797);
              uint64_t SignExtendExpr = v111 - (v115 + v113);
              LODWORD(v798) = v111;
              unint64_t v797 = 0;
              if (v111 != v115 + v113)
              {
                if (SignExtendExpr > 0x40) {
                  llvm::APInt::setBitsSlowCase(&v797, 0, v111 - (v115 + v113));
                }
                else {
                  v797 |= 0xFFFFFFFFFFFFFFFFLL >> (v115 + v113 - v111);
                }
              }
              unsigned int v790 = v798;
              if (v798 > 0x40) {
                operator new[]();
              }
              unint64_t v289 = v797 << v115;
              if (v798 == v115) {
                unint64_t v289 = 0;
              }
              if (v798) {
                unint64_t v290 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v798;
              }
              else {
                unint64_t v290 = 0;
              }
              unint64_t v789 = v290 & v289;
              if (!(v113 | v115)) {
                goto LABEL_464;
              }
              unsigned int v291 = *((_DWORD *)v109 + 8);
              unsigned int v788 = v291;
              if (v291 > 0x40) {
                operator new[]();
              }
              unint64_t v292 = ~*v110;
              if (v291) {
                unint64_t v293 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v291;
              }
              else {
                unint64_t v293 = 0;
              }
              unint64_t v294 = v293 & v292;
              unint64_t v787 = v293 & v292;
              unsigned int v788 = 0;
              int v786 = DWORD2(__src);
              if (DWORD2(__src) > 0x40) {
                operator new[]();
              }
              uint64_t v296 = ~(void)__src;
              unint64_t v297 = DWORD2(__src) ? 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(__src) : 0;
              unint64_t v785 = v297 & v296;
              int v786 = 0;
              if ((v297 & v296 & v789 & v294) != 0)
              {
LABEL_464:
                char v308 = 0;
                goto LABEL_616;
              }
              LODWORD(v798) = v111;
              unint64_t v797 = 1 << v115;
              unint64_t v298 = (llvm::ConstantInt *)llvm::ConstantInt::get(**(llvm::ConstantInt ***)*this, (llvm::LLVMContext *)&v797, v6);
              unint64_t v300 = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)this, v298);
              if (v798 >= 0x41 && v797) {
                MEMORY[0x1D25D9CB0](v797, 0x1000C8000313F17);
              }
              unsigned int v301 = this[13];
              unsigned int v302 = *((_DWORD *)this + 30);
              if (v302)
              {
                unsigned int v303 = ((LODWORD(v791[1]) >> 4) ^ (LODWORD(v791[1]) >> 9)) & (v302 - 1);
                unsigned int v304 = (char *)v301 + 48 * v303;
                int v305 = (llvm::Value *)*((void *)v304 + 3);
                if (v305 == v791[1]) {
                  goto LABEL_515;
                }
                int v306 = 1;
                while (v305 != (llvm::Value *)-4096)
                {
                  unsigned int v307 = v303 + v306++;
                  unsigned int v303 = v307 & (v302 - 1);
                  unsigned int v304 = (char *)v301 + 48 * v303;
                  int v305 = (llvm::Value *)*((void *)v304 + 3);
                  if (v305 == v791[1]) {
                    goto LABEL_515;
                  }
                }
              }
              unsigned int v304 = (char *)v301 + 48 * v302;
LABEL_515:
              if (v304 == (char *)v301 + 48 * v302 || (uint64_t v340 = *((void *)v304 + 5)) == 0) {
                uint64_t v340 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v791[1]);
              }
              if (v340) {
                BOOL v341 = *(unsigned __int16 *)(v340 + 24) == 5;
              }
              else {
                BOOL v341 = 0;
              }
              if (!v341) {
                goto LABEL_614;
              }
              uint64_t v342 = **(void **)(v340 + 32);
              if (!v342 || *(_WORD *)(v342 + 24) != 0) {
                goto LABEL_614;
              }
              uint64_t v344 = *(void *)(v342 + 32);
              long long v345 = (unint64_t **)(v344 + 24);
              unsigned int v346 = *(_DWORD *)(v344 + 32);
              if (v346 > 0x40)
              {
                unsigned int v348 = llvm::APInt::countTrailingZerosSlowCase(v345);
              }
              else
              {
                unsigned int v347 = __clz(__rbit64((unint64_t)*v345));
                if (v346 >= v347) {
                  unsigned int v348 = v347;
                }
                else {
                  unsigned int v348 = v346;
                }
              }
              if (v115 >= v348) {
                unsigned int v390 = v348;
              }
              else {
                unsigned int v390 = v115;
              }
              unsigned int v780 = v390;
              unsigned int v784 = v111;
              uint64_t v783 = 1 << (v115 - v390);
              unint64_t v797 = (unint64_t)&v799;
              uint64_t v798 = 0x400000000;
              uint64_t v391 = *(void *)(v342 + 32);
              unsigned int v392 = *(_DWORD *)(v391 + 32);
              unsigned int v782 = v392;
              if (v392 > 0x40) {
                operator new[]();
              }
              if (v392 == v780) {
                uint64_t v781 = 0;
              }
              else {
                uint64_t v781 = *(void *)(v391 + 24) >> v780;
              }
              unint64_t v393 = (llvm::ConstantInt *)llvm::ConstantInt::get(**(llvm::ConstantInt ***)*this, (llvm::LLVMContext *)&v781, v299);
              unint64_t v394 = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)this, v393);
              if (v798 >= HIDWORD(v798)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(v797 + 8 * v798) = v394;
              unsigned int v395 = v798 + 1;
              LODWORD(v798) = v798 + 1;
              if (v782 >= 0x41 && v781)
              {
                MEMORY[0x1D25D9CB0](v781, 0x1000C8000313F17);
                unsigned int v395 = v798;
              }
              uint64_t v396 = *(void *)(v340 + 40);
              uint64_t v397 = 8 * v396 - 8;
              if ((v397 >> 3) + (unint64_t)v395 > HIDWORD(v798)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v396 != 1)
              {
                memcpy((void *)(v797 + 8 * v395), (const void *)(*(void *)(v340 + 32) + 8), 8 * v396 - 8);
                unsigned int v395 = v798;
              }
              LODWORD(v798) = v395 + ((unint64_t)v397 >> 3);
              unsigned int v398 = (const llvm::SCEV *)llvm::ScalarEvolution::getMulExpr((uint64_t)this, (uint64_t)&v797, *(_WORD *)(v340 + 28) & 7, 0);
              unsigned int v400 = (llvm::ConstantInt *)llvm::ConstantInt::get(**(llvm::ConstantInt ***)*this, (llvm::LLVMContext *)&v783, v399);
              unint64_t v401 = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)this, v400);
              uint64_t UDivExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getUDivExpr((llvm::ScalarEvolution *)this, v398, v401);
              if ((llvm::Value **)v797 != &v799) {
                free((void *)v797);
              }
              if (v784 >= 0x41 && v783) {
                MEMORY[0x1D25D9CB0](v783, 0x1000C8000313F17);
              }
              if (!UDivExpr) {
LABEL_614:
              }
                uint64_t UDivExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getUDivExpr((llvm::ScalarEvolution *)this, (const llvm::SCEV *)v340, v300);
              v403 = (llvm::Type *)llvm::IntegerType::get(**(llvm::IntegerType ***)*this, (llvm::LLVMContext *)SignExtendExpr);
              unsigned int v404 = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::getTruncateExpr((llvm::ScalarEvolution *)this, UDivExpr, v403, 0);
              unint64_t ZeroExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr((llvm::ScalarEvolution *)this, v404, *(uint64_t ***)v791[1], 0);
              uint64_t SignExtendExpr = sub_1CBFD7CB4((uint64_t)this, ZeroExtendExpr, v300, 0, 0);
              char v308 = 1;
LABEL_616:
              if (v790 >= 0x41 && v789) {
                MEMORY[0x1D25D9CB0](v789, 0x1000C8000313F17);
              }
              if (DWORD2(v795) >= 0x41 && (void)v795) {
                MEMORY[0x1D25D9CB0](v795, 0x1000C8000313F17);
              }
              if (DWORD2(__src) >= 0x41 && (void)__src) {
                MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
              }
              if (v308) {
                return (const llvm::SCEV *)SignExtendExpr;
              }
LABEL_622:
              if (*(_DWORD *)(*(void *)v791[1] + 8) != 269) {
                goto LABEL_687;
              }
              unsigned int v406 = this[13];
              unsigned int v407 = *((_DWORD *)this + 30);
              if (v407)
              {
                unsigned int v408 = (v407 - 1) & ((LODWORD(v791[1]) >> 4) ^ (LODWORD(v791[1]) >> 9));
                v409 = (char *)v406 + 48 * v408;
                unsigned int v410 = (llvm::Value *)*((void *)v409 + 3);
                if (v410 == v791[1])
                {
LABEL_630:
                  if (v409 == (char *)v406 + 48 * v407 || (uint64_t v413 = *((void *)v409 + 5)) == 0)
                  {
                    uint64_t v413 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v791[1]);
                    unsigned int v406 = this[13];
                    unsigned int v407 = *((_DWORD *)this + 30);
                  }
                  if (v407)
                  {
                    unsigned int v414 = ((LODWORD(v792[0]) >> 4) ^ (LODWORD(v792[0]) >> 9)) & (v407 - 1);
                    v415 = (llvm::Value **)((char *)v406 + 48 * v414);
                    uint64_t v416 = v415[3];
                    if (v416 == v792[0]) {
                      goto LABEL_640;
                    }
                    int v417 = 1;
                    while (v416 != (llvm::Value *)-4096)
                    {
                      unsigned int v418 = v414 + v417++;
                      unsigned int v414 = v418 & (v407 - 1);
                      v415 = (llvm::Value **)((char *)v406 + 48 * v414);
                      uint64_t v416 = v415[3];
                      if (v416 == v792[0]) {
                        goto LABEL_640;
                      }
                    }
                  }
                  v415 = (llvm::Value **)((char *)v406 + 48 * v407);
LABEL_640:
                  if (v415 == (llvm::Value **)((char *)v406 + 48 * v407) || (uint64_t v419 = v415[5]) == 0) {
                    uint64_t v419 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v792[0]);
                  }
                  v420 = (llvm::ScalarEvolution *)this;
                  uint64_t v421 = (const llvm::SCEV *)v413;
                  return (const llvm::SCEV *)llvm::ScalarEvolution::getUMinExpr(v420, v421, v419, 0);
                }
                int v411 = 1;
                while (v410 != (llvm::Value *)-4096)
                {
                  unsigned int v412 = v408 + v411++;
                  unsigned int v408 = v412 & (v407 - 1);
                  v409 = (char *)v406 + 48 * v408;
                  unsigned int v410 = (llvm::Value *)*((void *)v409 + 3);
                  if (v410 == v791[1]) {
                    goto LABEL_630;
                  }
                }
              }
              v409 = (char *)v406 + 48 * v407;
              goto LABEL_630;
            }
LABEL_410:
            unsigned int v205 = v791[1];
            unint64_t v206 = this[13];
            unsigned int v207 = *((_DWORD *)this + 30);
            if (v207)
            {
              unsigned int v281 = ((LODWORD(v791[1]) >> 4) ^ (LODWORD(v791[1]) >> 9)) & (v207 - 1);
              unsigned int v209 = (char *)v206 + 48 * v281;
              unint64_t v282 = (llvm::Value *)*((void *)v209 + 3);
              if (v282 == v791[1]) {
                goto LABEL_1178;
              }
              int v283 = 1;
              while (v282 != (llvm::Value *)-4096)
              {
                unsigned int v284 = v281 + v283++;
                unsigned int v281 = v284 & (v207 - 1);
                unsigned int v209 = (char *)v206 + 48 * v281;
                unint64_t v282 = (llvm::Value *)*((void *)v209 + 3);
                if (v282 == v791[1]) {
                  goto LABEL_1178;
                }
              }
            }
            goto LABEL_1177;
          }
        }
        char v217 = this[13];
        unsigned int v218 = *((_DWORD *)this + 30);
        if (!v218) {
          goto LABEL_399;
        }
        unsigned int v219 = (v218 - 1) & ((LODWORD(v792[0]) >> 4) ^ (LODWORD(v792[0]) >> 9));
        unsigned int v220 = (char *)v217 + 48 * v219;
        uint64_t v221 = (llvm::Value *)*((void *)v220 + 3);
        if (v221 != v792[0])
        {
          int v222 = 1;
          while (v221 != (llvm::Value *)-4096)
          {
            unsigned int v223 = v219 + v222++;
            unsigned int v219 = v223 & (v218 - 1);
            unsigned int v220 = (char *)v217 + 48 * v219;
            uint64_t v221 = (llvm::Value *)*((void *)v220 + 3);
            if (v221 == v792[0]) {
              goto LABEL_400;
            }
          }
LABEL_399:
          unsigned int v220 = (char *)v217 + 48 * v218;
        }
LABEL_400:
        if (v220 != (char *)v217 + 48 * v218)
        {
          uint64_t SignExtendExpr = *((void *)v220 + 5);
          if (SignExtendExpr) {
            return (const llvm::SCEV *)SignExtendExpr;
          }
        }
        uint64_t v278 = (llvm::ScalarEvolution *)this;
        unsigned int v205 = v792[0];
        return (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(v278, v205);
      case 0x1D:
        uint64_t v136 = v792[0];
        if (!v792[0] || *((unsigned char *)v792[0] + 16) != 16) {
          goto LABEL_327;
        }
        unsigned int v137 = this[13];
        unsigned int v138 = *((_DWORD *)this + 30);
        if (!v138) {
          goto LABEL_279;
        }
        unsigned int v139 = v138 - 1;
        unsigned int v140 = ((LODWORD(v791[1]) >> 4) ^ (LODWORD(v791[1]) >> 9)) & (v138 - 1);
        unint64_t v141 = (llvm::Value **)((char *)v137 + 48 * v140);
        uint64_t v142 = v141[3];
        if (v142 == v791[1]) {
          goto LABEL_280;
        }
        int v143 = 1;
        while (v142 != (llvm::Value *)-4096)
        {
          unsigned int v144 = v140 + v143++;
          unsigned int v140 = v144 & v139;
          unint64_t v141 = (llvm::Value **)((char *)v137 + 48 * (v144 & v139));
          uint64_t v142 = v141[3];
          if (v142 == v791[1]) {
            goto LABEL_280;
          }
        }
LABEL_279:
        unint64_t v141 = (llvm::Value **)((char *)v137 + 48 * v138);
LABEL_280:
        if (v141 == (llvm::Value **)((char *)v137 + 48 * v138) || (int v188 = v141[5]) == 0) {
          int v188 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v791[1]);
        }
        unsigned int MinTrailingZeros = llvm::ScalarEvolution::GetMinTrailingZeros((llvm::ScalarEvolution *)this, v188);
        uint64_t v190 = *((unsigned int *)v136 + 8);
        if (v190 > 0x40)
        {
          int v224 = 0;
          int64_t v225 = (unint64_t)(v190 + 63) >> 6;
          do
          {
            BOOL v85 = v225-- < 1;
            if (v85) {
              break;
            }
            unint64_t v226 = *(void *)(*((void *)v136 + 3) + 8 * v225);
            v224 += __clz(v226);
          }
          while (!v226);
          int v227 = v190 | 0xFFFFFFC0;
          if ((v190 & 0x3F) == 0) {
            int v227 = 0;
          }
          int v191 = v224 + v227;
        }
        else
        {
          int v191 = v190 + __clz(*((void *)v136 + 3)) - 64;
        }
        if (MinTrailingZeros < (int)v190 - v191)
        {
LABEL_327:
          if (*(_DWORD *)(*(void *)v791[1] + 8) != 269) {
            goto LABEL_687;
          }
          unsigned int v228 = this[13];
          unsigned int v229 = *((_DWORD *)this + 30);
          if (v229)
          {
            unsigned int v230 = (v229 - 1) & ((LODWORD(v791[1]) >> 4) ^ (LODWORD(v791[1]) >> 9));
            unsigned int v231 = (char *)v228 + 48 * v230;
            uint64_t v232 = (llvm::Value *)*((void *)v231 + 3);
            if (v232 == v791[1])
            {
LABEL_335:
              if (v231 == (char *)v228 + 48 * v229 || (uint64_t v235 = *((void *)v231 + 5)) == 0)
              {
                uint64_t v235 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v791[1]);
                unsigned int v228 = this[13];
                unsigned int v229 = *((_DWORD *)this + 30);
              }
              if (v229)
              {
                unsigned int v236 = ((LODWORD(v792[0]) >> 4) ^ (LODWORD(v792[0]) >> 9)) & (v229 - 1);
                uint64_t v237 = (llvm::Value **)((char *)v228 + 48 * v236);
                unsigned int v238 = v237[3];
                if (v238 == v792[0]) {
                  goto LABEL_345;
                }
                int v239 = 1;
                while (v238 != (llvm::Value *)-4096)
                {
                  unsigned int v240 = v236 + v239++;
                  unsigned int v236 = v240 & (v229 - 1);
                  uint64_t v237 = (llvm::Value **)((char *)v228 + 48 * v236);
                  unsigned int v238 = v237[3];
                  if (v238 == v792[0]) {
                    goto LABEL_345;
                  }
                }
              }
              uint64_t v237 = (llvm::Value **)((char *)v228 + 48 * v229);
LABEL_345:
              if (v237 == (llvm::Value **)((char *)v228 + 48 * v229) || (unint64_t v241 = v237[5]) == 0) {
                unint64_t v241 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v792[0]);
              }
              uint64_t v242 = (llvm::ScalarEvolution *)this;
              int v243 = (const llvm::SCEV *)v235;
              return (const llvm::SCEV *)llvm::ScalarEvolution::getUMaxExpr(v242, v243, v241);
            }
            int v233 = 1;
            while (v232 != (llvm::Value *)-4096)
            {
              unsigned int v234 = v230 + v233++;
              unsigned int v230 = v234 & (v229 - 1);
              unsigned int v231 = (char *)v228 + 48 * v230;
              uint64_t v232 = (llvm::Value *)*((void *)v231 + 3);
              if (v232 == v791[1]) {
                goto LABEL_335;
              }
            }
          }
          unsigned int v231 = (char *)v228 + 48 * v229;
          goto LABEL_335;
        }
        uint64_t v244 = this[13];
        unsigned int v245 = *((_DWORD *)this + 30);
        if (!v245) {
          goto LABEL_381;
        }
        unsigned int v246 = (v245 - 1) & ((v136 >> 4) ^ (v136 >> 9));
        unsigned int v247 = (char *)v244 + 48 * v246;
        uint64_t v248 = (llvm::Value *)*((void *)v247 + 3);
        if (v248 != v136)
        {
          int v249 = 1;
          while (v248 != (llvm::Value *)-4096)
          {
            unsigned int v250 = v246 + v249++;
            unsigned int v246 = v250 & (v245 - 1);
            unsigned int v247 = (char *)v244 + 48 * v246;
            uint64_t v248 = (llvm::Value *)*((void *)v247 + 3);
            if (v248 == v136) {
              goto LABEL_382;
            }
          }
LABEL_381:
          unsigned int v247 = (char *)v244 + 48 * v245;
        }
LABEL_382:
        if (v247 == (char *)v244 + 48 * v245 || (uint64_t v266 = *((void *)v247 + 5)) == 0) {
          uint64_t v266 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v136);
        }
        uint64_t v267 = (llvm::ScalarEvolution *)this;
        uint64_t UMinExpr = (uint64_t)v188;
        uint64_t v269 = 6;
        return (const llvm::SCEV *)sub_1CBFD7D6C((uint64_t)v267, UMinExpr, v266, v269, 0);
      case 0x1E:
        unsigned int v130 = v792[0];
        if (!v792[0] || *((unsigned char *)v792[0] + 16) != 16) {
          goto LABEL_687;
        }
        unsigned int v131 = *((_DWORD *)v792[0] + 8);
        if (!v131) {
          goto LABEL_388;
        }
        uint64_t SignExtendExpr = (uint64_t)v792[0] + 24;
        if (v131 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::Value *)((char *)v792[0] + 24)) != v131) {
            goto LABEL_196;
          }
        }
        else if (*(void *)SignExtendExpr != 0xFFFFFFFFFFFFFFFFLL >> -(char)v131)
        {
LABEL_196:
          unsigned int v132 = v791[1];
          if (!v791[1]) {
            goto LABEL_687;
          }
          unsigned int v133 = *((unsigned __int8 *)v791[1] + 16);
          if (v133 < 0x1C) {
            goto LABEL_687;
          }
          if (v133 - 59 < 0xFFFFFFEE) {
            goto LABEL_687;
          }
          if (v133 != 56) {
            goto LABEL_687;
          }
          uint64_t v134 = *((void *)v791[1] - 4);
          if (!v134 || *(unsigned char *)(v134 + 16) != 16) {
            goto LABEL_687;
          }
          uint64_t v135 = *(unsigned int *)(v134 + 32);
          if (v135 > 0x40)
          {
            if (memcmp(*(const void **)(v134 + 24), *(const void **)SignExtendExpr, ((unint64_t)(v135 + 63) >> 3) & 0x3FFFFFF8))
            {
              goto LABEL_687;
            }
          }
          else if (*(void *)(v134 + 24) != *(void *)SignExtendExpr)
          {
            goto LABEL_687;
          }
          unsigned int v333 = this[13];
          unsigned int v334 = *((_DWORD *)this + 30);
          if (v334)
          {
            unsigned int v335 = (v334 - 1) & ((v132 >> 4) ^ (v132 >> 9));
            unsigned int v336 = (char *)v333 + 48 * v335;
            unsigned int v337 = (llvm::Value *)*((void *)v336 + 3);
            if (v337 == v132) {
              goto LABEL_552;
            }
            int v338 = 1;
            while (v337 != (llvm::Value *)-4096)
            {
              unsigned int v339 = v335 + v338++;
              unsigned int v335 = v339 & (v334 - 1);
              unsigned int v336 = (char *)v333 + 48 * v335;
              unsigned int v337 = (llvm::Value *)*((void *)v336 + 3);
              if (v337 == v132) {
                goto LABEL_552;
              }
            }
          }
          unsigned int v336 = (char *)v333 + 48 * v334;
LABEL_552:
          if (v336 == (char *)v333 + 48 * v334 || (uint64_t v362 = *((void *)v336 + 5)) == 0) {
            uint64_t v362 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v132);
          }
          if (v362) {
            BOOL v363 = *(unsigned __int16 *)(v362 + 24) == 2;
          }
          else {
            BOOL v363 = 0;
          }
          if (!v363) {
            goto LABEL_687;
          }
          uint64_t v364 = *(void *)v791[1];
          uint64_t v365 = *(const llvm::SCEV **)(v362 + 32);
          unsigned int v366 = v365;
          while (2)
          {
            switch(*((_WORD *)v366 + 12))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                int v389 = (uint64_t *)((char *)v366 + 40);
                goto LABEL_647;
              case 4:
                int v389 = (uint64_t *)((char *)v366 + 48);
                goto LABEL_647;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                uint64_t v367 = (const llvm::SCEV **)*((void *)v366 + 4);
                goto LABEL_563;
              case 6:
                uint64_t v367 = (const llvm::SCEV **)((char *)v366 + 40);
LABEL_563:
                unsigned int v366 = *v367;
                continue;
              case 0xE:
                int v389 = (uint64_t *)*((void *)v366 - 1);
                goto LABEL_647;
              default:
                int v389 = (uint64_t *)*((void *)v366 + 4);
LABEL_647:
                uint64_t v422 = *v389;
                unsigned int v423 = *(_DWORD *)(*v389 + 8);
                uint64_t v424 = *((void *)*this + 5);
                if (v423 == 15)
                {
                  if ((v423 & 0xFE) == 0x12) {
                    unsigned int v423 = *(_DWORD *)(**(void **)(v422 + 16) + 8);
                  }
                  uint64_t v752 = *(void *)(v424 + 504);
                  if (v423 < 0x100) {
                    goto LABEL_1131;
                  }
                  unsigned int v753 = v423 >> 8;
                  unint64_t v754 = *(unsigned int *)(v424 + 512);
                  uint64_t v755 = *(void *)(v424 + 504);
                  if (v754)
                  {
                    uint64_t v755 = v752;
                    unint64_t v756 = v754;
                    do
                    {
                      unint64_t v757 = v756 >> 1;
                      uint64_t v758 = v755 + 16 * (v756 >> 1);
                      unsigned int v759 = *(_DWORD *)(v758 + 8);
                      uint64_t v760 = v758 + 16;
                      v756 += ~(v756 >> 1);
                      if (v759 < v753) {
                        uint64_t v755 = v760;
                      }
                      else {
                        unint64_t v756 = v757;
                      }
                    }
                    while (v756);
                  }
                  if (v755 == v752 + 16 * v754 || *(_DWORD *)(v755 + 8) != v753) {
LABEL_1131:
                  }
                    uint64_t v755 = v752;
                  unsigned int v426 = *(_DWORD *)(v755 + 12);
                }
                else
                {
                  unsigned int v426 = sub_1CB83544C(v424 + 272, v422);
                  if (v425 == 1) {
                }
                  }
                if (sub_1CC10A920((llvm::Value *)((char *)v130 + 24), v426))
                {
                  v427 = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::getNotSCEV((llvm::ScalarEvolution *)this, v365, v6);
                  v428 = (llvm::ScalarEvolution *)this;
                  v429 = (uint64_t **)v364;
                  return (const llvm::SCEV *)llvm::ScalarEvolution::getZeroExtendExpr(v428, v427, v429, 0);
                }
                unsigned int v430 = *((_DWORD *)v130 + 8);
                if (v426 > 0x40)
                {
                  if (v430 != v426) {
                    operator new[]();
                  }
                  sub_1CD0463BC((uint64_t)&v797, (uint64_t)v130 + 24);
                }
                else
                {
                  v431 = (uint64_t *)((char *)v130 + 24);
                  if (v430 >= 0x41) {
                    v431 = *(uint64_t **)SignExtendExpr;
                  }
                  uint64_t v432 = *v431;
                  LODWORD(v798) = v426;
                  if (v426) {
                    unint64_t v433 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v426;
                  }
                  else {
                    unint64_t v433 = 0;
                  }
                  unint64_t v797 = v433 & v432;
                }
                unsigned int v434 = *(_DWORD *)(v364 + 8);
                uint64_t v435 = *((void *)*this + 5);
                if (v434 == 15)
                {
                  if ((v434 & 0xFE) == 0x12) {
                    unsigned int v434 = *(_DWORD *)(**(void **)(v364 + 16) + 8);
                  }
                  uint64_t v761 = *(void *)(v435 + 504);
                  if (v434 < 0x100) {
                    goto LABEL_1148;
                  }
                  unsigned int v762 = v434 >> 8;
                  unint64_t v763 = *(unsigned int *)(v435 + 512);
                  uint64_t v764 = *(void *)(v435 + 504);
                  if (v763)
                  {
                    uint64_t v764 = v761;
                    unint64_t v765 = v763;
                    do
                    {
                      unint64_t v766 = v765 >> 1;
                      uint64_t v767 = v764 + 16 * (v765 >> 1);
                      unsigned int v768 = *(_DWORD *)(v767 + 8);
                      uint64_t v769 = v767 + 16;
                      v765 += ~(v765 >> 1);
                      if (v768 < v762) {
                        uint64_t v764 = v769;
                      }
                      else {
                        unint64_t v765 = v766;
                      }
                    }
                    while (v765);
                  }
                  if (v764 == v761 + 16 * v763 || *(_DWORD *)(v764 + 8) != v762) {
LABEL_1148:
                  }
                    uint64_t v764 = v761;
                  unsigned int v437 = *(_DWORD *)(v764 + 12);
                }
                else
                {
                  unsigned int v437 = sub_1CB83544C(v435 + 272, v364);
                  if (v436 == 1) {
                }
                  }
                if (v437 > 0x40)
                {
                  if (v798 != v437) {
                    operator new[]();
                  }
                  sub_1CD0463BC((uint64_t)&__src, (uint64_t)&v797);
                  unsigned int v437 = DWORD2(__src);
                  if (DWORD2(__src) > 0x40)
                  {
                    uint64_t v439 = __src;
                    if (memcmp((const void *)__src, *(const void **)SignExtendExpr, (((unint64_t)DWORD2(__src) + 63) >> 3) & 0x3FFFFFF8))
                    {
                      if (v439) {
                        MEMORY[0x1D25D9CB0](v439, 0x1000C8000313F17);
                      }
                      goto LABEL_682;
                    }
                    goto LABEL_666;
                  }
                }
                else
                {
                  DWORD2(__src) = v437;
                  unint64_t v438 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v437;
                  if (!v437) {
                    unint64_t v438 = 0;
                  }
                  *(void *)&long long __src = v438 & v797;
                }
                uint64_t v439 = __src;
                if ((void)__src != *(void *)SignExtendExpr) {
                  goto LABEL_682;
                }
LABEL_666:
                if (v798 > 0x40)
                {
                  if (((*(void *)(v797 + 8 * ((v798 - 1) >> 6)) >> (v798 - 1)) & 1) == 0)
                  {
                    uint64_t SignExtendExpr = 0;
                    goto LABEL_671;
                  }
                  int v779 = v798 - 1;
                  BOOL v440 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v797) == v779;
                }
                else
                {
                  BOOL v440 = v797 == 1 << (v798 - 1);
                }
                uint64_t SignExtendExpr = v440;
LABEL_671:
                if (v437 >= 0x41 && v439) {
                  MEMORY[0x1D25D9CB0](v439, 0x1000C8000313F17);
                }
                if (SignExtendExpr)
                {
                  v441 = (llvm::ConstantInt *)llvm::ConstantInt::get(**(llvm::ConstantInt ***)*this, (llvm::LLVMContext *)&v797, v6);
                  unint64_t v442 = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)this, v441);
                  v443 = (llvm::detail::IEEEFloat **)sub_1CBFD7D6C((uint64_t)this, (uint64_t)v365, v442, 0, 0);
                  uint64_t SignExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr((llvm::ScalarEvolution *)this, v443, (uint64_t **)v364, 0);
                  char v444 = 0;
LABEL_683:
                  if (v798 >= 0x41 && v797) {
                    MEMORY[0x1D25D9CB0](v797, 0x1000C8000313F17);
                  }
                  if ((v444 & 1) == 0) {
                    return (const llvm::SCEV *)SignExtendExpr;
                  }
                  goto LABEL_687;
                }
LABEL_682:
                char v444 = 1;
                goto LABEL_683;
            }
          }
        }
LABEL_388:
        unsigned int v270 = this[13];
        unsigned int v271 = *((_DWORD *)this + 30);
        if (!v271) {
          goto LABEL_394;
        }
        unsigned int v272 = ((LODWORD(v791[1]) >> 4) ^ (LODWORD(v791[1]) >> 9)) & (v271 - 1);
        int v273 = (llvm::Value **)((char *)v270 + 48 * v272);
        BOOL v274 = v273[3];
        if (v274 != v791[1])
        {
          int v275 = 1;
          while (v274 != (llvm::Value *)-4096)
          {
            unsigned int v276 = v272 + v275++;
            unsigned int v272 = v276 & (v271 - 1);
            int v273 = (llvm::Value **)((char *)v270 + 48 * v272);
            BOOL v274 = v273[3];
            if (v274 == v791[1]) {
              goto LABEL_395;
            }
          }
LABEL_394:
          int v273 = (llvm::Value **)((char *)v270 + 48 * v271);
        }
LABEL_395:
        if (v273 == (llvm::Value **)((char *)v270 + 48 * v271) || (uint64_t v277 = v273[5]) == 0) {
          uint64_t v277 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v791[1]);
        }
        return (const llvm::SCEV *)llvm::ScalarEvolution::getNotSCEV((llvm::ScalarEvolution *)this, v277, v6);
      default:
        goto LABEL_687;
    }
  }
  if (llvm::GlobalValue::isInterposable(a2))
  {
LABEL_63:
    return (const llvm::SCEV *)llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
  }
  uint64_t v40 = (llvm::Value *)*((void *)a2 - 4);
  int v41 = this[13];
  unsigned int v42 = *((_DWORD *)this + 30);
  if (!v42) {
    goto LABEL_72;
  }
  unsigned int v43 = ((v40 >> 4) ^ (v40 >> 9)) & (v42 - 1);
  uint64_t v44 = (char *)v41 + 48 * v43;
  int v45 = (llvm::Value *)*((void *)v44 + 3);
  if (v45 != v40)
  {
    int v46 = 1;
    while (v45 != (llvm::Value *)-4096)
    {
      unsigned int v47 = v43 + v46++;
      unsigned int v43 = v47 & (v42 - 1);
      uint64_t v44 = (char *)v41 + 48 * v43;
      int v45 = (llvm::Value *)*((void *)v44 + 3);
      if (v45 == v40) {
        goto LABEL_73;
      }
    }
LABEL_72:
    uint64_t v44 = (char *)v41 + 48 * v42;
  }
LABEL_73:
  if (v44 != (char *)v41 + 48 * v42)
  {
    uint64_t SignExtendExpr = *((void *)v44 + 5);
    if (SignExtendExpr) {
      return (const llvm::SCEV *)SignExtendExpr;
    }
  }

  return (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)this, v40);
}

uint64_t llvm::ScalarEvolution::getOperandsToCreate(const llvm::APInt **this, llvm::GlobalValue *a2, uint64_t a3)
{
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFD) != 0xD) {
    goto LABEL_25;
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + 16);
  if (v6 >= 0x1C) {
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
  }
  if (v6 == 1)
  {
    if ((llvm::GlobalValue::isInterposable(a2) & 1) == 0)
    {
      uint64_t v16 = *((void *)a2 - 4);
LABEL_89:
      unsigned int v40 = *(_DWORD *)(a3 + 8);
LABEL_96:
      unsigned int v39 = *(_DWORD *)(a3 + 12);
LABEL_97:
      if (v40 >= v39) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t result = 0;
      *(void *)(*(void *)a3 + 8 * v40) = v16;
LABEL_99:
      ++*(_DWORD *)(a3 + 8);
      return result;
    }
LABEL_25:
    return llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
  }
  if (v6 != 5)
  {
    if (v6 == 16)
    {
      return llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)this, a2);
    }
    goto LABEL_25;
  }
  sub_1CC0F7D20((uint64_t)&v109, (uint64_t)a2, this[4]);
  if (BYTE8(v111))
  {
    if (v109 > 0x1E) {
      goto LABEL_29;
    }
    int v8 = *(unsigned __int8 *)(v110 + 16);
    if (((1 << v109) & 0x4A000000) != 0)
    {
      if (v8 != 16) {
        return 0;
      }
      goto LABEL_29;
    }
    if (((1 << v109) & 0x22000) == 0)
    {
      if (((1 << v109) & 0x30000000) != 0 && v8 != 16 && *(_DWORD *)(**((void **)&v109 + 1) + 8) == 269) {
        return 0;
      }
LABEL_29:
      unsigned int v13 = *(_DWORD *)(a3 + 8);
      if (v13 >= *(_DWORD *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a3 + 8 * v13) = *((void *)&v109 + 1);
      unsigned int v14 = *(_DWORD *)(a3 + 12);
      unsigned int v15 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v15;
      if (v15 >= v14) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a3 + 8 * v15) = v110;
      goto LABEL_64;
    }
    while (1)
    {
      if ((void)v111) {
        BOOL v17 = (void)v111 == (void)a2;
      }
      else {
        BOOL v17 = 1;
      }
      if (v17) {
        goto LABEL_46;
      }
      unsigned int v18 = this[13];
      unsigned int v19 = *((_DWORD *)this + 30);
      if (!v19) {
        goto LABEL_43;
      }
      unsigned int v20 = (v19 - 1) & ((v111 >> 4) ^ (v111 >> 9));
      int v21 = (void *)((char *)v18 + 48 * v20);
      uint64_t v22 = v21[3];
      if (v22 != (void)v111) {
        break;
      }
LABEL_44:
      if (v21 != (void *)((char *)v18 + 48 * v19) && v21[5])
      {
        unsigned int v52 = *(_DWORD *)(a3 + 8);
        if (v52 >= *(_DWORD *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a3 + 8 * v52) = v111;
LABEL_64:
        ++*(_DWORD *)(a3 + 8);
        return 0;
      }
LABEL_46:
      unint64_t v25 = *(unsigned int *)(a3 + 8);
      if (v25 >= *(unsigned int *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a3 + 8 * v25) = v110;
      ++*(_DWORD *)(a3 + 8);
      sub_1CC0F7D20((uint64_t)&v106, *((uint64_t *)&v109 + 1), this[4]);
      if (!BYTE8(v108)) {
        goto LABEL_62;
      }
      unsigned int v26 = *((unsigned __int8 *)a2 + 16);
      unsigned int v27 = v26 - 28;
      unsigned int v28 = v26 - 28;
      if (v26 <= 0x1B) {
        unsigned int v28 = *((unsigned __int16 *)a2 + 9);
      }
      if (v28 == 13 && (v106 | 2) != 0xF) {
        goto LABEL_62;
      }
      if (v26 <= 0x1B) {
        unsigned int v27 = *((unsigned __int16 *)a2 + 9);
      }
      if (v27 == 17 && v106 != 17
        || (void)v108
        && BYTE8(v107) | BYTE9(v107)
        && *(unsigned __int8 *)(v108 + 16) >= 0x1Cu
        && sub_1CC16BAFC(v108, 1, 0))
      {
LABEL_62:
        unsigned int v29 = *(_DWORD *)(a3 + 8);
        if (v29 >= *(_DWORD *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a3 + 8 * v29) = *((void *)&v109 + 1);
        goto LABEL_64;
      }
      long long v109 = v106;
      long long v110 = v107;
      long long v111 = v108;
    }
    int v23 = 1;
    while (v22 != -4096)
    {
      unsigned int v24 = v20 + v23++;
      unsigned int v20 = v24 & (v19 - 1);
      int v21 = (void *)((char *)v18 + 48 * v20);
      uint64_t v22 = v21[3];
      if (v22 == (void)v111) {
        goto LABEL_44;
      }
    }
LABEL_43:
    int v21 = (void *)((char *)v18 + 48 * v19);
    goto LABEL_44;
  }
  unsigned int v9 = *((unsigned __int8 *)a2 + 16);
  int v10 = v9 - 28;
  if (v9 < 0x1C) {
    int v10 = *((unsigned __int16 *)a2 + 9);
  }
  uint64_t result = 0;
  if (v10 <= 33)
  {
    if (v10 != 5)
    {
      if (v10 != 20 && v10 != 23) {
        return result;
      }
      int v30 = *((_DWORD *)a2 + 5);
      if ((v30 & 0x40000000) != 0) {
        unsigned int v31 = (uint64_t *)*((void *)a2 - 1);
      }
      else {
        unsigned int v31 = (uint64_t *)((char *)a2 - 32 * (v30 & 0x7FFFFFF));
      }
      uint64_t v41 = *v31;
      unsigned int v42 = *(_DWORD *)(a3 + 8);
      if (v42 >= *(_DWORD *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a3 + 8 * v42) = v41;
      unsigned int v40 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v40;
      int v43 = *((_DWORD *)a2 + 5);
      if ((v43 & 0x40000000) != 0) {
        uint64_t v44 = (char *)*((void *)a2 - 1);
      }
      else {
        uint64_t v44 = (char *)a2 - 32 * (v43 & 0x7FFFFFF);
      }
      uint64_t v16 = *((void *)v44 + 4);
      goto LABEL_96;
    }
LABEL_71:
    uint64_t v32 = *((void *)a2 + 8);
    if (v32 && (*(unsigned char *)(v32 + 29) & 0x40) != 0)
    {
      uint64_t v98 = *(unsigned int *)(v32 + 8);
      if (v98)
      {
        uint64_t v99 = v32 + 40;
        int v100 = -1;
        while (!*(void *)v99 || (*(unsigned char *)(*(void *)v99 + 17) & 0x40) == 0)
        {
          ++v100;
          v99 += 8;
          if (!--v98) {
            goto LABEL_201;
          }
        }
LABEL_202:
        uint64_t v103 = *((void *)a2 + 4 * (v100 - 1) + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        if (v103)
        {
          unsigned int v104 = *(_DWORD *)(a3 + 8);
          if (v104 >= *(_DWORD *)(a3 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t result = 0;
          *(void *)(*(void *)a3 + 8 * v104) = v103;
          goto LABEL_99;
        }
LABEL_78:
        if (v9 != 84) {
          return 0;
        }
        uint64_t v35 = *((void *)a2 - 4);
        if (!v35
          || *(unsigned char *)(v35 + 16)
          || *(void *)(v35 + 24) != *((void *)a2 + 9)
          || (*(unsigned char *)(v35 + 33) & 0x20) == 0)
        {
          return 0;
        }
        int v36 = *(_DWORD *)(v35 + 36);
        uint64_t v37 = (v36 - 274);
        if (v37 > 0x25) {
          goto LABEL_154;
        }
        if (((1 << (v36 - 18)) & 0x2184000003) != 0)
        {
          unsigned int v38 = *(_DWORD *)(a3 + 8);
          if (v38 >= *(_DWORD *)(a3 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a3 + 8 * v38) = *((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
          unsigned int v39 = *(_DWORD *)(a3 + 12);
          unsigned int v40 = *(_DWORD *)(a3 + 8) + 1;
          *(_DWORD *)(a3 + 8) = v40;
          uint64_t v16 = ((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
          goto LABEL_97;
        }
        if (v37 != 15)
        {
LABEL_154:
          if (v36 != 1) {
            return 0;
          }
        }
        int v11 = *((_DWORD *)a2 + 5);
LABEL_23:
        unsigned int v12 = (uint64_t *)((char *)a2 - 32 * (v11 & 0x7FFFFFF));
LABEL_88:
        uint64_t v16 = *v12;
        goto LABEL_89;
      }
    }
    else
    {
      uint64_t v33 = *((void *)a2 - 4);
      if (!v33) {
        goto LABEL_78;
      }
      if (*(unsigned char *)(v33 + 16)) {
        goto LABEL_78;
      }
      if (*(void *)(v33 + 24) != *((void *)a2 + 9)) {
        goto LABEL_78;
      }
      uint64_t v34 = *(void *)(v33 + 112);
      if (!v34 || (*(unsigned char *)(v34 + 29) & 0x40) == 0) {
        goto LABEL_78;
      }
      uint64_t v101 = *(unsigned int *)(v34 + 8);
      if (v101)
      {
        uint64_t v102 = v34 + 40;
        int v100 = -1;
        while (!*(void *)v102 || (*(unsigned char *)(*(void *)v102 + 17) & 0x40) == 0)
        {
          ++v100;
          v102 += 8;
          if (!--v101) {
            goto LABEL_201;
          }
        }
        goto LABEL_202;
      }
    }
LABEL_201:
    int v100 = 0;
    goto LABEL_202;
  }
  switch(v10)
  {
    case '&':
    case '\'':
    case '(':
    case '/':
      int v11 = *((_DWORD *)a2 + 5);
      if ((v11 & 0x40000000) == 0) {
        goto LABEL_23;
      }
      unsigned int v12 = (uint64_t *)*((void *)a2 - 1);
      goto LABEL_88;
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
      return result;
    case '0':
      return llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
    case '1':
      if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFD) != 0xD) {
        return llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
      }
      int v48 = *((_DWORD *)a2 + 5);
      int v49 = (v48 & 0x40000000) != 0
          ? (llvm::GlobalValue *)*((void *)a2 - 1)
          : (llvm::GlobalValue *)((char *)a2 - 32 * (v48 & 0x7FFFFFF));
      uint64_t v55 = *(void *)v49;
      if ((*(_DWORD *)(**(void **)v49 + 8) & 0xFD) != 0xD) {
        return llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
      }
      unsigned int v56 = *(_DWORD *)(a3 + 8);
      if (v56 >= *(_DWORD *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t result = 0;
      *(void *)(*(void *)a3 + 8 * v56) = v55;
      goto LABEL_99;
    case '8':
      goto LABEL_71;
    case '9':
      if (*(_DWORD *)(*(void *)a2 + 8) == 269) {
        goto LABEL_137;
      }
      int v50 = *((_DWORD *)a2 + 5);
      unsigned int v51 = (v50 & 0x40000000) != 0
          ? (llvm::GlobalValue *)*((void *)a2 - 1)
          : (llvm::GlobalValue *)((char *)a2 - 32 * (v50 & 0x7FFFFFF));
      uint64_t v57 = *(void *)v51;
      if (*(unsigned char *)(v57 + 16) != 81) {
        goto LABEL_137;
      }
      if ((*(_WORD *)(v57 + 18) & 0x3E) == 0x20)
      {
        uint64_t v58 = *(void *)(v57 - 32);
        if (*(unsigned char *)(v58 + 16) != 16) {
          return llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
        }
        uint64_t v59 = *(unsigned int *)(v58 + 32);
        if (v59 > 0x40)
        {
          int v75 = 0;
          int64_t v76 = (unint64_t)(v59 + 63) >> 6;
          do
          {
            if (v76-- < 1) {
              break;
            }
            unint64_t v78 = *(void *)(*(void *)(v58 + 24) + 8 * v76);
            v75 += __clz(v78);
          }
          while (!v78);
          int v79 = v59 | 0xFFFFFFC0;
          if ((v59 & 0x3F) == 0) {
            int v79 = 0;
          }
          if (v75 + v79 != v59) {
            return llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
          }
        }
        else if (*(void *)(v58 + 24))
        {
          return llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
        }
      }
      else
      {
        uint64_t v60 = **(void **)(v57 - 64);
        unsigned int v61 = *(_DWORD *)(v60 + 8);
        uint64_t v62 = *((void *)*this + 5);
        if (v61 == 15)
        {
          if ((v61 & 0xFE) == 0x12) {
            unsigned int v61 = *(_DWORD *)(**(void **)(v60 + 16) + 8);
          }
          uint64_t v80 = *(void *)(v62 + 504);
          if (v61 < 0x100) {
            goto LABEL_172;
          }
          unsigned int v81 = v61 >> 8;
          unint64_t v82 = *(unsigned int *)(v62 + 512);
          uint64_t v83 = *(void *)(v62 + 504);
          if (v82)
          {
            uint64_t v83 = v80;
            unint64_t v84 = v82;
            do
            {
              unint64_t v85 = v84 >> 1;
              uint64_t v86 = v83 + 16 * (v84 >> 1);
              unsigned int v87 = *(_DWORD *)(v86 + 8);
              uint64_t v88 = v86 + 16;
              v84 += ~(v84 >> 1);
              if (v87 < v81) {
                uint64_t v83 = v88;
              }
              else {
                unint64_t v84 = v85;
              }
            }
            while (v84);
          }
          if (v83 == v80 + 16 * v82 || *(_DWORD *)(v83 + 8) != v81) {
LABEL_172:
          }
            uint64_t v83 = v80;
          unint64_t v64 = *(unsigned int *)(v83 + 12);
        }
        else
        {
          unint64_t v64 = sub_1CB83544C(v62 + 272, v60);
          if (v63 == 1) {
        }
          }
        uint64_t v65 = *(void *)a2;
        unsigned int v66 = *(_DWORD *)(*(void *)a2 + 8);
        uint64_t v67 = *((void *)*this + 5);
        if (v66 == 15)
        {
          if ((v66 & 0xFE) == 0x12) {
            unsigned int v66 = *(_DWORD *)(**(void **)(v65 + 16) + 8);
          }
          uint64_t v89 = *(void *)(v67 + 504);
          if (v66 < 0x100) {
            goto LABEL_185;
          }
          unsigned int v90 = v66 >> 8;
          unint64_t v91 = *(unsigned int *)(v67 + 512);
          uint64_t v92 = *(void *)(v67 + 504);
          if (v91)
          {
            uint64_t v92 = v89;
            unint64_t v93 = v91;
            do
            {
              unint64_t v94 = v93 >> 1;
              uint64_t v95 = v92 + 16 * (v93 >> 1);
              unsigned int v96 = *(_DWORD *)(v95 + 8);
              uint64_t v97 = v95 + 16;
              v93 += ~(v93 >> 1);
              if (v96 < v90) {
                uint64_t v92 = v97;
              }
              else {
                unint64_t v93 = v94;
              }
            }
            while (v93);
          }
          if (v92 == v89 + 16 * v91 || *(_DWORD *)(v92 + 8) != v90) {
LABEL_185:
          }
            uint64_t v92 = v89;
          unint64_t v68 = *(unsigned int *)(v92 + 12);
        }
        else
        {
          unint64_t v68 = sub_1CB83544C(v67 + 272, v65);
          if (v69 == 1)
          {
            unint64_t v105 = v68;
            unint64_t v68 = v105;
          }
        }
        if (v64 > v68) {
          return llvm::ScalarEvolution::getUnknown((llvm::ScalarEvolution *)this, a2);
        }
      }
LABEL_137:
      int v70 = *((_DWORD *)a2 + 5);
      if ((v70 & 0x40000000) != 0)
      {
        unsigned int v72 = (void *)*((void *)a2 - 1);
        uint64_t v71 = v70 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v71 = v70 & 0x7FFFFFF;
        unsigned int v72 = (void *)((char *)a2 - 32 * v71);
      }
      if (!v71) {
        return 0;
      }
      unsigned int v73 = *(_DWORD *)(a3 + 8);
      uint64_t v74 = 32 * v71;
      do
      {
        if (v73 >= *(_DWORD *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t result = 0;
        *(void *)(*(void *)a3 + 8 * v73) = *v72;
        unsigned int v73 = *(_DWORD *)(a3 + 8) + 1;
        *(_DWORD *)(a3 + 8) = v73;
        v72 += 4;
        v74 -= 32;
      }
      while (v74);
      return result;
    default:
      if (v10 != 34) {
        return result;
      }
      int v45 = *((_DWORD *)a2 + 5);
      if ((v45 & 0x40000000) != 0)
      {
        unsigned int v47 = (void *)*((void *)a2 - 1);
        uint64_t v46 = v45 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v46 = v45 & 0x7FFFFFF;
        unsigned int v47 = (void *)((char *)a2 - 32 * v46);
      }
      if (!v46) {
        return 0;
      }
      unsigned int v53 = *(_DWORD *)(a3 + 8);
      uint64_t v54 = 32 * v46;
      do
      {
        if (v53 >= *(_DWORD *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t result = 0;
        *(void *)(*(void *)a3 + 8 * v53) = *v47;
        unsigned int v53 = *(_DWORD *)(a3 + 8) + 1;
        *(_DWORD *)(a3 + 8) = v53;
        v47 += 4;
        v54 -= 32;
      }
      while (v54);
      return result;
  }
}

BOOL sub_1CC10A920(llvm::APInt *a1, int a2)
{
  if (*((_DWORD *)a1 + 2) > 0x40u)
  {
    int v5 = *((_DWORD *)a1 + 2);
    if (llvm::APInt::countTrailingOnesSlowCase(a1) != a2) {
      return 0;
    }
    return llvm::APInt::countLeadingZerosSlowCase(a1) + a2 == v5;
  }
  else
  {
    return *(void *)a1 == 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
  }
}

uint64_t llvm::ScalarEvolution::getTripCountFromExitCount(llvm::ScalarEvolution *this, const llvm::SCEV *a2, char a3)
{
  int v4 = *((unsigned __int16 *)a2 + 12);
  if (v4 == 15) {
    return *((void *)this + 6);
  }
  NoopOrZeroExtend = a2;
  unsigned int v6 = a2;
  while (2)
  {
    switch(v4)
    {
      case 1:
      case 2:
      case 3:
      case 13:
        uint64_t v7 = (uint64_t *)((char *)v6 + 40);
        goto LABEL_5;
      case 4:
        uint64_t v7 = (uint64_t *)((char *)v6 + 48);
        goto LABEL_5;
      case 5:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        unsigned int v31 = (const llvm::SCEV **)*((void *)v6 + 4);
        goto LABEL_36;
      case 6:
        unsigned int v31 = (const llvm::SCEV **)((char *)v6 + 40);
LABEL_36:
        unsigned int v6 = *v31;
        int v4 = *((unsigned __int16 *)v6 + 12);
        continue;
      case 14:
        uint64_t v7 = (uint64_t *)*((void *)v6 - 1);
        goto LABEL_5;
      default:
        uint64_t v7 = (uint64_t *)*((void *)v6 + 4);
LABEL_5:
        uint64_t v8 = *v7;
        if (a3)
        {
          unsigned int v9 = *(llvm::IntegerType **)v8;
          if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12) {
            uint64_t v8 = **(void **)(v8 + 16);
          }
          int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v8);
          uint64_t v11 = llvm::IntegerType::get(v9, (llvm::LLVMContext *)(PrimitiveSizeInBits + 1));
          NoopOrZeroExtend = llvm::ScalarEvolution::getNoopOrZeroExtend(this, NoopOrZeroExtend, (llvm::Type *)v11);
          unsigned int v13 = *(_DWORD *)(v11 + 8);
          if (v13 != 13)
          {
            uint64_t v14 = *(void *)(*(void *)this + 40);
            if ((v13 & 0xFE) == 0x12) {
              unsigned int v13 = *(_DWORD *)(**(void **)(v11 + 16) + 8);
            }
            uint64_t v15 = *(void *)(v14 + 504);
            if (v13 < 0x100) {
              goto LABEL_20;
            }
            unsigned int v16 = v13 >> 8;
            unint64_t v17 = *(unsigned int *)(v14 + 512);
            uint64_t v18 = v15;
            if (v17)
            {
              uint64_t v18 = v15;
              unint64_t v19 = v17;
              do
              {
                unint64_t v20 = v19 >> 1;
                uint64_t v21 = v18 + 16 * (v19 >> 1);
                unsigned int v22 = *(_DWORD *)(v21 + 8);
                uint64_t v23 = v21 + 16;
                v19 += ~(v19 >> 1);
                if (v22 < v16) {
                  uint64_t v18 = v23;
                }
                else {
                  unint64_t v19 = v20;
                }
              }
              while (v19);
            }
            if (v18 == v15 + 16 * v17 || *(_DWORD *)(v18 + 8) != v16) {
LABEL_20:
            }
              uint64_t v18 = v15;
            unsigned int v24 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v11, (llvm::LLVMContext *)*(unsigned int *)(v18 + 12));
            if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12) {
              llvm::VectorType::get(v24, (llvm::Type *)(*(unsigned int *)(v11 + 32) | ((unint64_t)(*(_DWORD *)(v11 + 8) == 19) << 32)));
            }
            uint64_t v11 = (uint64_t)v24;
          }
          unint64_t v25 = *(llvm::ConstantInt **)v11;
          unsigned int v26 = *(_DWORD *)(v11 + 8);
          unsigned int v33 = v26 >> 8;
          if (v26 >> 8 > 0x40) {
            operator new[]();
          }
          if (v26 <= 0xFF) {
            LOBYTE(v27) = 0;
          }
          else {
            unint64_t v27 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v26) + 63);
          }
          unint64_t v32 = v27 & 1;
          unsigned int v28 = (llvm::ConstantInt *)llvm::ConstantInt::get(v25, (llvm::LLVMContext *)&v32, v12);
          if (v33 >= 0x41 && v32) {
            MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
          }
          unint64_t Constant = llvm::ScalarEvolution::getConstant(this, v28);
        }
        else
        {
          unint64_t Constant = llvm::ScalarEvolution::getConstant(this, (llvm::Type *)v8, 1uLL, 0);
        }
        uint64_t result = sub_1CBFD7D6C((uint64_t)this, (uint64_t)NoopOrZeroExtend, Constant, 0, 0);
        break;
    }
    return result;
  }
}

const llvm::Loop *llvm::ScalarEvolution::getBackedgeTakenCount(llvm::ScalarEvolution *a1, const llvm::Loop *a2, int a3)
{
  if (a3)
  {
    if (a3 == 1)
    {
      uint64_t BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(a1, a2);
      uint64_t result = BackedgeTakenInfo[13];
      if (result)
      {
        unsigned int v8 = *((_DWORD *)BackedgeTakenInfo + 2);
        if (!v8) {
          return result;
        }
        unsigned int v9 = (_DWORD *)((char *)*BackedgeTakenInfo + 48);
        uint64_t v10 = 88 * v8;
        while (*(v9 - 1) == *v9)
        {
          v9 += 22;
          v10 -= 88;
          if (!v10) {
            return result;
          }
        }
      }
      return (const llvm::Loop *)*((void *)a1 + 6);
    }
    uint64_t result = llvm::ScalarEvolution::getBackedgeTakenInfo(a1, a2)[15];
    if (!result) {
      llvm::ScalarEvolution::computeSymbolicMaxBackedgeTakenCount(a1, a2);
    }
  }
  else
  {
    int v5 = llvm::ScalarEvolution::getBackedgeTakenInfo(a1, a2);
    return (const llvm::Loop *)llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)v5, (uint64_t)a2, (uint64_t)a1);
  }
  return result;
}

uint64_t sub_1CC10ADDC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 32);
    uint64_t v2 = *(unsigned int *)(v1 + 32);
    if (v2 <= 0x40)
    {
      unint64_t v3 = *(void *)(v1 + 24);
      if (HIDWORD(v3)) {
        return 0;
      }
      return (v3 + 1);
    }
    int v4 = 0;
    int64_t v5 = (unint64_t)(v2 + 63) >> 6;
    do
    {
      if (v5-- < 1) {
        break;
      }
      unint64_t v7 = *(void *)(*(void *)(v1 + 24) + 8 * v5);
      v4 += __clz(v7);
    }
    while (!v7);
    uint64_t result = 0;
    int v8 = v2 | 0xFFFFFFC0;
    if ((v2 & 0x3F) == 0) {
      int v8 = 0;
    }
    if ((v2 - v4 - v8) <= 0x20)
    {
      unint64_t v3 = **(void **)(v1 + 24);
      return (v3 + 1);
    }
  }
  return result;
}

uint64_t llvm::ScalarEvolution::getSmallConstantTripCount(llvm::ScalarEvolution *this, const llvm::Loop *a2, const llvm::BasicBlock *a3)
{
  uint64_t BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(this, a2);
  unsigned int v6 = *((_DWORD *)BackedgeTakenInfo + 2);
  if (v6)
  {
    unint64_t v7 = (const llvm::BasicBlock **)((char *)*BackedgeTakenInfo + 48);
    uint64_t v8 = 88 * v6;
    while (*(v7 - 6) != a3 || *((_DWORD *)v7 - 1) != *(_DWORD *)v7)
    {
      v7 += 11;
      v8 -= 88;
      if (!v8) {
        goto LABEL_13;
      }
    }
    unsigned int v9 = (uint64_t *)(v7 - 5);
  }
  else
  {
LABEL_13:
    unsigned int v9 = (uint64_t *)((char *)this + 48);
  }
  uint64_t v10 = *v9;
  if (*(_WORD *)(v10 + 24)) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10;
  }

  return sub_1CC10ADDC(v11);
}

uint64_t llvm::ScalarEvolution::getExitCount(llvm::ScalarEvolution *a1, const llvm::Loop *a2, uint64_t a3, int a4)
{
  uint64_t BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(a1, a2);
  uint64_t v8 = *BackedgeTakenInfo;
  unsigned int v9 = *((_DWORD *)BackedgeTakenInfo + 2);
  if (a4 != 1)
  {
    if (v9)
    {
      uint64_t v10 = (_DWORD *)((char *)v8 + 48);
      uint64_t v11 = 88 * v9;
      while (*((void *)v10 - 6) != a3 || *(v10 - 1) != *v10)
      {
        v10 += 22;
        v11 -= 88;
        if (!v11) {
          goto LABEL_9;
        }
      }
      unsigned int v12 = v10 - 10;
      return *(void *)v12;
    }
LABEL_9:
    unsigned int v12 = (_DWORD *)((char *)a1 + 48);
    return *(void *)v12;
  }
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v14 = (_DWORD *)((char *)v8 + 48);
  uint64_t v15 = 88 * v9;
  while (*((void *)v14 - 6) != a3 || *(v14 - 1) != *v14)
  {
    v14 += 22;
    v15 -= 88;
    if (!v15) {
      goto LABEL_9;
    }
  }
  unsigned int v12 = v14 - 8;
  return *(void *)v12;
}

void llvm::ScalarEvolution::getConstantMaxTripCountFromArray(llvm::ScalarEvolution *this, const llvm::Loop *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  llvm::Loop::isLoopSimplifyForm(a2);
}

uint64_t llvm::ScalarEvolution::getUDivCeilSCEV(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV *a3)
{
  v34[2] = *MEMORY[0x1E4F143B8];
  unsigned int v6 = a2;
  while (2)
  {
    switch(*((_WORD *)v6 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        unint64_t v7 = (char *)v6 + 40;
        goto LABEL_4;
      case 4:
        unint64_t v7 = (char *)v6 + 48;
        goto LABEL_4;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        unsigned int v31 = (const llvm::SCEV **)*((void *)v6 + 4);
        goto LABEL_31;
      case 6:
        unsigned int v31 = (const llvm::SCEV **)((char *)v6 + 40);
LABEL_31:
        unsigned int v6 = *v31;
        continue;
      case 0xE:
        unint64_t v7 = (char *)*((void *)v6 - 1);
        goto LABEL_4;
      default:
        unint64_t v7 = (char *)*((void *)v6 + 4);
LABEL_4:
        uint64_t v8 = *(llvm::FixedVectorType **)v7;
        unsigned int v9 = *(_DWORD *)(*(void *)v7 + 8);
        if (v9 != 13)
        {
          uint64_t v10 = *(void *)(*(void *)this + 40);
          if ((v9 & 0xFE) == 0x12) {
            unsigned int v9 = *(_DWORD *)(**((void **)v8 + 2) + 8);
          }
          uint64_t v11 = *(void *)(v10 + 504);
          if (v9 < 0x100) {
            goto LABEL_16;
          }
          unsigned int v12 = v9 >> 8;
          unint64_t v13 = *(unsigned int *)(v10 + 512);
          uint64_t v14 = v11;
          if (v13)
          {
            uint64_t v14 = v11;
            unint64_t v15 = v13;
            do
            {
              unint64_t v16 = v15 >> 1;
              uint64_t v17 = v14 + 16 * (v15 >> 1);
              unsigned int v18 = *(_DWORD *)(v17 + 8);
              uint64_t v19 = v17 + 16;
              v15 += ~(v15 >> 1);
              if (v18 < v12) {
                uint64_t v14 = v19;
              }
              else {
                unint64_t v15 = v16;
              }
            }
            while (v15);
          }
          if (v14 == v11 + 16 * v13 || *(_DWORD *)(v14 + 8) != v12) {
LABEL_16:
          }
            uint64_t v14 = v11;
          unint64_t v20 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v8, (llvm::LLVMContext *)*(unsigned int *)(v14 + 12));
          if ((*((_DWORD *)v8 + 2) & 0xFE) == 0x12) {
            llvm::VectorType::get(v20, (llvm::Type *)(*((unsigned int *)v8 + 8) | ((unint64_t)(*((_DWORD *)v8 + 2) == 19) << 32)));
          }
          uint64_t v8 = v20;
        }
        uint64_t v21 = *(llvm::ConstantInt **)v8;
        unsigned int v22 = *((_DWORD *)v8 + 2);
        LODWORD(v33) = v22 >> 8;
        if (v22 >> 8 > 0x40) {
          operator new[]();
        }
        if (v22 <= 0xFF) {
          LOBYTE(v23) = 0;
        }
        else {
          unint64_t v23 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v22) + 63);
        }
        unint64_t v32 = (void *)(v23 & 1);
        unsigned int v24 = (llvm::ConstantInt *)llvm::ConstantInt::get(v21, (llvm::LLVMContext *)&v32, a3);
        if (v33 >= 0x41 && v32) {
          MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
        }
        unint64_t Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(this, v24);
        uint64_t UMinExpr = (const llvm::APInt *)llvm::ScalarEvolution::getUMinExpr(this, a2, Constant, 0);
        unint64_t MinusSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(this, a2, UMinExpr, 0, 0);
        uint64_t UDivExpr = llvm::ScalarEvolution::getUDivExpr(this, MinusSCEV, (unint64_t)a3);
        unint64_t v32 = v34;
        v34[0] = UMinExpr;
        v34[1] = UDivExpr;
        uint64_t v33 = 0x200000002;
        uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(this, &v32, 0, 0);
        if (v32 != v34) {
          free(v32);
        }
        return AddExpr;
    }
  }
}

void llvm::ScalarEvolution::getSmallConstantTripMultiple(llvm::ScalarEvolution *this, const llvm::Loop *a2)
{
}

unint64_t llvm::ScalarEvolution::getSmallConstantTripMultiple(llvm::ScalarEvolution *this, const llvm::Loop *a2, const llvm::BasicBlock *a3)
{
  uint64_t BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(this, a2);
  unsigned int v7 = *((_DWORD *)BackedgeTakenInfo + 2);
  if (v7)
  {
    uint64_t v8 = (const llvm::BasicBlock **)((char *)*BackedgeTakenInfo + 48);
    uint64_t v9 = 88 * v7;
    while (*(v8 - 6) != a3 || *((_DWORD *)v8 - 1) != *(_DWORD *)v8)
    {
      v8 += 11;
      v9 -= 88;
      if (!v9) {
        goto LABEL_10;
      }
    }
    uint64_t v10 = v8 - 5;
  }
  else
  {
LABEL_10:
    uint64_t v10 = (const llvm::SCEV **)((char *)this + 48);
  }
  uint64_t v11 = *v10;

  return llvm::ScalarEvolution::getSmallConstantTripMultiple((const llvm::SCEV **)this, a2, v11);
}

unint64_t llvm::ScalarEvolution::getSmallConstantTripMultiple(const llvm::SCEV **this, const llvm::Loop *a2, const llvm::SCEV *a3)
{
  if (this[6] == a3) {
    return 1;
  }
  uint64_t TripCountFromExitCount = llvm::ScalarEvolution::getTripCountFromExitCount((llvm::ScalarEvolution *)this, a3, 1);
  if (!TripCountFromExitCount || *(_WORD *)(TripCountFromExitCount + 24)) {
    llvm::ScalarEvolution::applyLoopGuards((llvm::ScalarEvolution *)this, (const llvm::SCEV *)TripCountFromExitCount, a2);
  }
  uint64_t v6 = *(void *)(TripCountFromExitCount + 32);
  if (!v6) {
    return 1;
  }
  uint64_t v7 = *(unsigned int *)(v6 + 32);
  if (v7 > 0x40)
  {
    int v10 = 0;
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    do
    {
      if (v11-- < 1) {
        break;
      }
      unint64_t v13 = *(void *)(*(void *)(v6 + 24) + 8 * v11);
      v10 += __clz(v13);
    }
    while (!v13);
    int v14 = v7 | 0xFFFFFFC0;
    if ((v7 & 0x3F) == 0) {
      int v14 = 0;
    }
    unint64_t result = 1;
    unsigned int v15 = v7 - (v10 + v14);
    if (v15 && v15 <= 0x20) {
      return **(void **)(v6 + 24);
    }
  }
  else
  {
    unint64_t result = *(void *)(v6 + 24);
    unsigned int v9 = __clz(result);
    if (v9 < 0x20 || v7 == v7 + v9 - 64) {
      return 1;
    }
  }
  return result;
}

void llvm::ScalarEvolution::applyLoopGuards(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::Loop *a3)
{
}

const llvm::Loop **llvm::ScalarEvolution::getBackedgeTakenInfo(llvm::ScalarEvolution *this, const llvm::Loop *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  *(void *)uint64_t v21 = 0;
  v21[8] = 0;
  *(void *)&v21[16] = 0;
  char v22 = 0;
  unint64_t v23 = a2;
  unsigned int v24 = v26;
  uint64_t v25 = 0x100000000;
  v27[0] = *(_OWORD *)v21;
  *(_OWORD *)((char *)v27 + 9) = *(unint64_t *)&v21[9];
  int v4 = *((_DWORD *)this + 140);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 68);
    int v6 = v4 - 1;
    unsigned int v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v8 = (const llvm::Loop **)(v5 + 144 * v7);
    unsigned int v9 = *v8;
    if (*v8 == a2)
    {
      int v10 = 1;
      goto LABEL_21;
    }
    int64_t v11 = 0;
    int v12 = 1;
    int v10 = 1;
    while (v9 != (const llvm::Loop *)-4096)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v9 == (const llvm::Loop *)-8192;
      }
      if (v13) {
        int64_t v11 = v8;
      }
      unsigned int v14 = v7 + v12++;
      unsigned int v7 = v14 & v6;
      uint64_t v8 = (const llvm::Loop **)(v5 + 144 * v7);
      unsigned int v9 = *v8;
      if (*v8 == a2) {
        goto LABEL_21;
      }
    }
    if (v11) {
      uint64_t v15 = (uint64_t)v11;
    }
    else {
      uint64_t v15 = (uint64_t)v8;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v8 = (const llvm::Loop **)sub_1CC13CBAC((uint64_t)this + 544, v15, (uint64_t *)&v23, (uint64_t)&v24);
  unint64_t v16 = (char *)v24;
  if (v25)
  {
    uint64_t v17 = 88 * v25;
    do
    {
      unsigned int v18 = *(void **)&v16[v17 - 56];
      if (v18 != *(void **)&v16[v17 - 64])
      {
        unint64_t v20 = v16;
        free(v18);
        unint64_t v16 = v20;
      }
      v17 -= 88;
    }
    while (v17);
    unint64_t v16 = (char *)v24;
  }
  if (v16 != v26) {
    free(v16);
  }
  int v10 = 0;
LABEL_21:
  if (!v10) {
    llvm::ScalarEvolution::computeBackedgeTakenCount(this, a2);
  }
  return v8 + 1;
}

uint64_t llvm::ScalarEvolution::BackedgeTakenInfo::getExact(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = a1[2];
  if (v3)
  {
    int v4 = (_DWORD *)(*(void *)a1 + 48);
    uint64_t v5 = 88 * v3;
    while (*((void *)v4 - 6) != a2 || *(v4 - 1) != *v4)
    {
      v4 += 22;
      v5 -= 88;
      if (!v5) {
        goto LABEL_6;
      }
    }
    int v6 = v4 - 10;
  }
  else
  {
LABEL_6:
    int v6 = (_DWORD *)(a3 + 48);
  }
  return *(void *)v6;
}

uint64_t llvm::ScalarEvolution::BackedgeTakenInfo::getConstantMax(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = a1[2];
  if (v3)
  {
    int v4 = (_DWORD *)(*(void *)a1 + 48);
    uint64_t v5 = 88 * v3;
    while (*((void *)v4 - 6) != a2 || *(v4 - 1) != *v4)
    {
      v4 += 22;
      v5 -= 88;
      if (!v5) {
        goto LABEL_6;
      }
    }
    int v6 = v4 - 8;
  }
  else
  {
LABEL_6:
    int v6 = (_DWORD *)(a3 + 48);
  }
  return *(void *)v6;
}

const llvm::Loop **llvm::ScalarEvolution::getPredicatedBackedgeTakenInfo(llvm::ScalarEvolution *this, const llvm::Loop *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(this, a2);
  if (*((unsigned char *)BackedgeTakenInfo + 112)) {
    return BackedgeTakenInfo;
  }
  *(void *)char v22 = 0;
  v22[8] = 0;
  *(void *)&v22[16] = 0;
  char v23 = 0;
  unsigned int v24 = a2;
  uint64_t v25 = v27;
  uint64_t v26 = 0x100000000;
  v28[0] = *(_OWORD *)v22;
  *(_OWORD *)((char *)v28 + 9) = *(unint64_t *)&v22[9];
  int v5 = *((_DWORD *)this + 146);
  if (!v5)
  {
    uint64_t v16 = 0;
LABEL_18:
    unsigned int v9 = (const llvm::Loop **)sub_1CC13CBAC((uint64_t)this + 568, v16, (uint64_t *)&v24, (uint64_t)&v25);
    uint64_t v17 = (char *)v25;
    if (v26)
    {
      uint64_t v18 = 88 * v26;
      do
      {
        uint64_t v19 = *(void **)&v17[v18 - 56];
        if (v19 != *(void **)&v17[v18 - 64])
        {
          uint64_t v21 = v17;
          free(v19);
          uint64_t v17 = v21;
        }
        v18 -= 88;
      }
      while (v18);
      uint64_t v17 = (char *)v25;
    }
    if (v17 != v27) {
      free(v17);
    }
    int v11 = 0;
    goto LABEL_22;
  }
  uint64_t v6 = *((void *)this + 71);
  int v7 = v5 - 1;
  unsigned int v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v9 = (const llvm::Loop **)(v6 + 144 * v8);
  int v10 = *v9;
  if (*v9 != a2)
  {
    int v12 = 0;
    int v13 = 1;
    int v11 = 1;
    while (v10 != (const llvm::Loop *)-4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v10 == (const llvm::Loop *)-8192;
      }
      if (v14) {
        int v12 = v9;
      }
      unsigned int v15 = v8 + v13++;
      unsigned int v8 = v15 & v7;
      unsigned int v9 = (const llvm::Loop **)(v6 + 144 * v8);
      int v10 = *v9;
      if (*v9 == a2) {
        goto LABEL_22;
      }
    }
    if (v12) {
      uint64_t v16 = (uint64_t)v12;
    }
    else {
      uint64_t v16 = (uint64_t)v9;
    }
    goto LABEL_18;
  }
  int v11 = 1;
LABEL_22:
  if (!v11) {
    llvm::ScalarEvolution::computeBackedgeTakenCount(this, a2);
  }
  return v9 + 1;
}

uint64_t llvm::ScalarEvolution::BackedgeTakenInfo::getExact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 112) && *(_DWORD *)(a1 + 8)) {
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
  }
  return *(void *)(a3 + 48);
}

uint64_t llvm::ScalarEvolution::BackedgeTakenInfo::getConstantMax(llvm::ScalarEvolution::BackedgeTakenInfo *this, llvm::ScalarEvolution *a2)
{
  uint64_t result = *((void *)this + 13);
  if (!result) {
    return *((void *)a2 + 6);
  }
  unsigned int v4 = *((_DWORD *)this + 2);
  if (v4)
  {
    int v5 = (_DWORD *)(*(void *)this + 48);
    uint64_t v6 = 88 * v4;
    while (*(v5 - 1) == *v5)
    {
      v5 += 22;
      v6 -= 88;
      if (!v6) {
        return result;
      }
    }
    return *((void *)a2 + 6);
  }
  return result;
}

uint64_t llvm::ScalarEvolution::BackedgeTakenInfo::getSymbolicMax(llvm::ScalarEvolution::BackedgeTakenInfo *this, const llvm::Loop *a2, llvm::ScalarEvolution *a3)
{
  uint64_t result = *((void *)this + 15);
  if (!result) {
    llvm::ScalarEvolution::computeSymbolicMaxBackedgeTakenCount(a3, a2);
  }
  return result;
}

BOOL llvm::ScalarEvolution::isBackedgeTakenCountMaxOrZero(llvm::ScalarEvolution *this, const llvm::Loop *a2)
{
  uint64_t BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(this, a2);
  if (!*((unsigned char *)BackedgeTakenInfo + 128)) {
    return 0;
  }
  unsigned int v4 = *((_DWORD *)BackedgeTakenInfo + 2);
  if (!v4) {
    return 1;
  }
  uint64_t v5 = 88 * v4 - 88;
  uint64_t v6 = (_DWORD *)((char *)*BackedgeTakenInfo + 48);
  do
  {
    int v7 = *(v6 - 1);
    BOOL result = v7 == *v6;
    BOOL v8 = v7 != *v6 || v5 == 0;
    v5 -= 88;
    v6 += 22;
  }
  while (!v8);
  return result;
}

BOOL llvm::ScalarEvolution::BackedgeTakenInfo::isConstantMaxOrZero(llvm::ScalarEvolution::BackedgeTakenInfo *this, llvm::ScalarEvolution *a2)
{
  if (!*((unsigned char *)this + 128)) {
    return 0;
  }
  unsigned int v2 = *((_DWORD *)this + 2);
  if (!v2) {
    return 1;
  }
  uint64_t v3 = 88 * v2 - 88;
  unsigned int v4 = (_DWORD *)(*(void *)this + 48);
  do
  {
    int v5 = *(v4 - 1);
    BOOL result = v5 == *v4;
    BOOL v7 = v5 != *v4 || v3 == 0;
    v3 -= 88;
    v4 += 22;
  }
  while (!v7);
  return result;
}

void llvm::ScalarEvolution::computeBackedgeTakenCount(llvm::ScalarEvolution *this, const llvm::Loop *a2)
{
}

uint64_t *sub_1CC10DEC8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return (uint64_t *)(a1 + 144 * a2);
  }
  unsigned int v3 = a2 - 1;
  unsigned int v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  int v5 = (uint64_t *)(a1 + 144 * v4);
  uint64_t v6 = *v5;
  if (*v5 != a3)
  {
    int v7 = 1;
    while (v6 != -4096)
    {
      unsigned int v8 = v4 + v7++;
      unsigned int v4 = v8 & v3;
      int v5 = (uint64_t *)(a1 + 144 * (v8 & v3));
      uint64_t v6 = *v5;
      if (*v5 == a3) {
        return v5;
      }
    }
    return (uint64_t *)(a1 + 144 * a2);
  }
  return v5;
}

uint64_t *sub_1CC10DF2C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return (uint64_t *)(a1 + 56 * a2);
  }
  unsigned int v3 = a2 - 1;
  unsigned int v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  int v5 = (uint64_t *)(a1 + 56 * v4);
  uint64_t v6 = *v5;
  if (*v5 != a3)
  {
    int v7 = 1;
    while (v6 != -4096)
    {
      unsigned int v8 = v4 + v7++;
      unsigned int v4 = v8 & v3;
      int v5 = (uint64_t *)(a1 + 56 * (v8 & v3));
      uint64_t v6 = *v5;
      if (*v5 == a3) {
        return v5;
      }
    }
    return (uint64_t *)(a1 + 56 * a2);
  }
  return v5;
}

char **sub_1CC10DF90(char **result)
{
  int v1 = *((_DWORD *)result + 2);
  if (v1 || *((_DWORD *)result + 3))
  {
    unsigned int v2 = *((_DWORD *)result + 4);
    if (v2 > 4 * v1 && v2 >= 0x41)
    {
      return sub_1CD4C1B88(result);
    }
    else
    {
      if (v2)
      {
        unsigned int v3 = *result;
        uint64_t v4 = (uint64_t)&(*result)[144 * v2];
        do
        {
          if (*(void *)v3 != -4096)
          {
            if (*(void *)v3 != -8192)
            {
              int v5 = (char *)*((void *)v3 + 1);
              unsigned int v6 = *((_DWORD *)v3 + 4);
              if (v6)
              {
                uint64_t v7 = 88 * v6;
                do
                {
                  unsigned int v8 = *(void **)&v5[v7 - 56];
                  if (v8 != *(void **)&v5[v7 - 64])
                  {
                    uint64_t v16 = result;
                    unsigned int v9 = v5;
                    int v12 = v3;
                    uint64_t v14 = v4;
                    uint64_t v10 = v7;
                    free(v8);
                    uint64_t v7 = v10;
                    unsigned int v3 = v12;
                    uint64_t v4 = v14;
                    BOOL result = v16;
                    int v5 = v9;
                  }
                  v7 -= 88;
                }
                while (v7);
                int v5 = (char *)*((void *)v3 + 1);
              }
              if (v5 != v3 + 24)
              {
                unsigned int v15 = result;
                int v11 = v3;
                uint64_t v13 = v4;
                free(v5);
                uint64_t v4 = v13;
                BOOL result = v15;
                unsigned int v3 = v11;
              }
            }
            *(void *)unsigned int v3 = -4096;
          }
          v3 += 144;
        }
        while (v3 != (char *)v4);
      }
      result[1] = 0;
    }
  }
  return result;
}

void *sub_1CC10E0D0(void *result)
{
  int v1 = (void **)result;
  int v2 = *((_DWORD *)result + 2);
  if (v2 || *((_DWORD *)result + 3))
  {
    unsigned int v3 = *((_DWORD *)result + 4);
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_1CC13D2B0(result);
      int v27 = 1 << (33 - __clz(v2 - 1));
      if (v27 <= 64) {
        int v27 = 64;
      }
      if (v2) {
        int v28 = v27;
      }
      else {
        int v28 = 0;
      }
      if (v28 != *((_DWORD *)v1 + 4))
      {
        BOOL result = (void *)MEMORY[0x1D25D9CD0](*v1, 8);
        if (!v28)
        {
          *int v1 = 0;
          v1[1] = 0;
          *((_DWORD *)v1 + 4) = 0;
          return result;
        }
        unint64_t v29 = (4 * v28 / 3u + 1) | ((unint64_t)(4 * v28 / 3u + 1) >> 1);
        unint64_t v30 = v29 | (v29 >> 2) | ((v29 | (v29 >> 2)) >> 4);
        LODWORD(v30) = (((v30 | (v30 >> 8)) >> 16) | v30 | (v30 >> 8)) + 1;
        *((_DWORD *)v1 + 4) = v30;
        *int v1 = operator new(48 * v30, (std::align_val_t)8uLL);
      }
      return sub_1CC13BC3C(v1);
    }
    else
    {
      v35[0] = 2;
      v35[1] = 0;
      uint64_t v36 = -4096;
      uint64_t v37 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = off_1F2607428;
      v31[0] = 2;
      v31[1] = 0;
      uint64_t v32 = -8192;
      if (v3)
      {
        BOOL result = v31;
        uint64_t v4 = *v1;
        uint64_t v5 = (uint64_t)*v1 + 48 * v3;
        do
        {
          uint64_t v6 = v4[3];
          uint64_t v7 = v36;
          if (v6 != v36)
          {
            BOOL v8 = v6 == -4096 || v6 == 0;
            if (!v8 && v6 != -8192)
            {
              unint64_t v13 = v4[1] & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v13 = v4[2];
              uint64_t v14 = (unint64_t *)v4[2];
              if (v14)
              {
                unint64_t *v14 = *v14 & 7 | v13;
              }
              else
              {
                uint64_t v15 = v4[3];
                uint64_t v16 = ***(int32x2_t ****)v15;
                unint64_t v17 = (unint64_t)v16[303];
                if (v17 <= v13)
                {
                  uint64_t v18 = v16[305].u32[0];
                  if (v17 + 16 * v18 > v13)
                  {
                    unsigned int v19 = v18 - 1;
                    LODWORD(v20) = v19 & ((v15 >> 4) ^ (v15 >> 9));
                    uint64_t v21 = (uint64_t *)(v17 + 16 * v20);
                    uint64_t v22 = *v21;
                    if (v15 == *v21)
                    {
LABEL_32:
                      *uint64_t v21 = -8192;
                      v16[304] = vadd_s32(v16[304], (int32x2_t)0x1FFFFFFFFLL);
                      uint64_t v15 = v4[3];
                    }
                    else
                    {
                      int v23 = 1;
                      while (v22 != -4096)
                      {
                        int v24 = v20 + v23++;
                        uint64_t v20 = v24 & v19;
                        uint64_t v22 = *(void *)(v17 + 16 * v20);
                        if (v15 == v22)
                        {
                          uint64_t v21 = (uint64_t *)(v17 + 16 * v20);
                          goto LABEL_32;
                        }
                      }
                    }
                    *(unsigned char *)(v15 + 17) &= ~1u;
                  }
                }
              }
              uint64_t v7 = v36;
            }
            v4[3] = v7;
            if (v7 != -4096 && v7 != -8192 && v7 != 0)
            {
              uint64_t v10 = v35[0];
              int v11 = (void *)(v35[0] & 0xFFFFFFFFFFFFFFF8);
              v4[2] = *(void *)(v35[0] & 0xFFFFFFFFFFFFFFF8);
              void *v11 = v4 + 1;
              v4[1] = v10 & 0xFFFFFFFFFFFFFFF8 | v4[1] & 7;
              int v12 = (unint64_t *)v4[2];
              if (v12) {
                *int v12 = *v12 & 7 | (unint64_t)(v4 + 2);
              }
            }
          }
          v4[4] = v37;
          v4 += 6;
        }
        while (v4 != (void *)v5);
        uint64_t v25 = v32;
        v1[1] = 0;
        if (v25 != -8192 && v25 != -4096 && v25 != 0) {
          BOOL result = llvm::ValueHandleBase::RemoveFromUseList(v31);
        }
      }
      else
      {
        result[1] = 0;
      }
      if (v36 != -4096 && v36 != -8192)
      {
        if (v36) {
          return llvm::ValueHandleBase::RemoveFromUseList(v35);
        }
      }
    }
  }
  return result;
}

void sub_1CC10E410(_DWORD *a1)
{
  int v2 = a1[2];
  if (v2 || a1[3])
  {
    uint64_t v3 = a1[4];
    if (v3 <= 4 * v2 || v3 < 0x41)
    {
      if (v3)
      {
        uint64_t v4 = 40 * v3;
        uint64_t v5 = *(void *)a1 + 24;
        do
        {
          uint64_t v6 = *(void *)(v5 - 24);
          if (v6 != -4096)
          {
            if (v6 != -8192)
            {
              uint64_t v7 = *(void **)(v5 - 16);
              if ((void *)v5 != v7) {
                free(v7);
              }
            }
            *(void *)(v5 - 24) = -4096;
          }
          v5 += 40;
          v4 -= 40;
        }
        while (v4);
      }
      *((void *)a1 + 1) = 0;
    }
    else
    {
      sub_1CC13D4F4(a1);
    }
  }
}

void sub_1CC10E4DC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 || *(_DWORD *)(a1 + 12))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 16);
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_1CC13D614(a1);
      int v8 = 1 << (33 - __clz(v2 - 1));
      if (v8 <= 64) {
        int v8 = 64;
      }
      if (v2) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      if (v9 == *(_DWORD *)(a1 + 16))
      {
        *(void *)(a1 + 8) = 0;
        if (v9)
        {
          uint64_t v15 = *(void **)a1;
          uint64_t v16 = 96 * v9;
          do
          {
            void *v15 = -4096;
            v15 += 12;
            v16 -= 96;
          }
          while (v16);
        }
      }
      else
      {
        MEMORY[0x1D25D9CD0](*(void *)a1, 8);
        if (v9)
        {
          unint64_t v10 = (4 * (int)v9 / 3u + 1) | ((unint64_t)(4 * (int)v9 / 3u + 1) >> 1);
          unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
          LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
          *(_DWORD *)(a1 + 16) = v11;
          int v12 = operator new(96 * v11, (std::align_val_t)8uLL);
          *(void *)a1 = v12;
          *(void *)(a1 + 8) = 0;
          uint64_t v13 = *(unsigned int *)(a1 + 16);
          if (v13)
          {
            uint64_t v14 = 96 * v13;
            do
            {
              *int v12 = -4096;
              v12 += 12;
              v14 -= 96;
            }
            while (v14);
          }
        }
        else
        {
          *(void *)a1 = 0;
          *(void *)(a1 + 8) = 0;
          *(_DWORD *)(a1 + 16) = 0;
        }
      }
    }
    else
    {
      if (v3)
      {
        uint64_t v4 = 96 * v3;
        uint64_t v5 = *(void *)a1 + 64;
        do
        {
          uint64_t v6 = *(void *)(v5 - 64);
          if (v6 != -4096)
          {
            if (v6 != -8192)
            {
              uint64_t v7 = *(void **)(v5 - 16);
              if ((void *)v5 != v7) {
                free(v7);
              }
              if ((*(unsigned char *)(v5 - 56) & 1) == 0) {
                MEMORY[0x1D25D9CD0](*(void *)(v5 - 48), 8);
              }
            }
            *(void *)(v5 - 64) = -4096;
          }
          v5 += 96;
          v4 -= 96;
        }
        while (v4);
      }
      *(void *)(a1 + 8) = 0;
    }
  }
}

void llvm::ScalarEvolution::forgetLoop(int32x2_t *this, const llvm::Loop *a2)
{
  v82[16] = *MEMORY[0x1E4F143B8];
  uint64_t v80 = v82;
  uint64_t v81 = 0x1000000000;
  v82[0] = a2;
  uint64_t v77 = v79;
  uint64_t v78 = 0x2000000000;
  char v69 = v73;
  int v70 = v73;
  uint64_t v71 = 16;
  int v72 = 0;
  unsigned int v3 = 1;
  uint64_t v74 = v76;
  uint64_t v75 = 0x1000000000;
  do
  {
    uint64_t v4 = v80[v3 - 1];
    LODWORD(v81) = v3 - 1;
    llvm::ScalarEvolution::forgetBackedgeTakenCounts((llvm::ScalarEvolution *)this, v4, 0);
    llvm::ScalarEvolution::forgetBackedgeTakenCounts((llvm::ScalarEvolution *)this, v4, 1);
    __int32 v5 = this[124].i32[0];
    int32x2_t v6 = this[123];
    uint64_t v7 = this[125].u32[0];
    int v8 = (void *)(*(void *)&v6 + (v7 << 6));
    if (v5)
    {
      if (this[125].i32[0])
      {
        uint64_t v9 = v7 << 6;
        unint64_t v10 = (void *)this[123];
        while (1)
        {
          uint64_t v11 = v10[1];
          if ((*v10 != -4096 || v11 != -4096) && (*v10 != -8192 || v11 != -8192)) {
            break;
          }
          v10 += 8;
          v9 -= 64;
          if (!v9) {
            goto LABEL_10;
          }
        }
      }
      else
      {
        unint64_t v10 = (void *)this[123];
      }
    }
    else
    {
LABEL_10:
      unint64_t v10 = (void *)(*(void *)&v6 + (v7 << 6));
    }
    if (v10 != (void *)(*(void *)&v6 + (v7 << 6)))
    {
      do
      {
        int v12 = v10 + 8;
        if (v10[1] == v4)
        {
          uint64_t v14 = v8;
          if (v12 != v8)
          {
            while (1)
            {
              uint64_t v15 = v12[1];
              if ((*v12 != -4096 || v15 != -4096) && (*v12 != -8192 || v15 != -8192)) {
                break;
              }
              v12 += 8;
              if (v12 == v8)
              {
                uint64_t v14 = v8;
                goto LABEL_30;
              }
            }
            uint64_t v14 = v12;
          }
LABEL_30:
          uint64_t v16 = (void *)v10[3];
          if (v16 != v10 + 5)
          {
            free(v16);
            __int32 v5 = this[124].i32[0];
            int32x2_t v6 = this[123];
            uint64_t v7 = this[125].u32[0];
          }
          *unint64_t v10 = -8192;
          v10[1] = -8192;
          this[124].i32[0] = --v5;
          ++this[124].i32[1];
        }
        else
        {
          while (1)
          {
            if (v12 == v8)
            {
              uint64_t v14 = v8;
              goto LABEL_33;
            }
            uint64_t v13 = v12[1];
            if ((*v12 != -4096 || v13 != -4096) && (*v12 != -8192 || v13 != -8192)) {
              break;
            }
            v12 += 8;
          }
          uint64_t v14 = v12;
        }
LABEL_33:
        unint64_t v10 = v14;
      }
      while (v14 != (void *)(*(void *)&v6 + (v7 << 6)));
    }
    uint64_t v17 = (uint64_t)this[120];
    unsigned int v18 = this[122].u32[0];
    unsigned int v19 = sub_1CC10DF2C(v17, v18, v4);
    if ((uint64_t *)(v17 + 56 * v18) != v19) {
      sub_1CC10F004((uint64_t)&v74, (uint64_t)v74 + 8 * v75, (char *)v19[1], (char *)(v19[1] + 8 * *((unsigned int *)v19 + 4)));
    }
    if (*(void *)(**(void **)(v4 + 32) + 40) != **(void **)(v4 + 32) + 40)
    {
      for (uint64_t i = *(void *)(**(void **)(v4 + 32) + 48); ; uint64_t i = *(void *)(v21 + 32))
      {
        uint64_t v21 = i - 24;
        if (i) {
          uint64_t v22 = i - 24;
        }
        else {
          uint64_t v22 = 0;
        }
        if (!i || *(unsigned char *)(v22 + 16) != 83) {
          break;
        }
        int v23 = v70;
        uint64_t v24 = HIDWORD(v71);
        if (v70 == v69)
        {
          if (HIDWORD(v71))
          {
            uint64_t v25 = 0;
            uint64_t v26 = 8 * HIDWORD(v71);
            int v27 = v70;
            while (*(void *)v27 != v21)
            {
              if (*(void *)v27 == -2) {
                uint64_t v25 = v27;
              }
              v27 += 8;
              v26 -= 8;
              if (!v26)
              {
                if (!v25) {
                  goto LABEL_51;
                }
                *(void *)uint64_t v25 = v21;
                --v72;
                goto LABEL_75;
              }
            }
            continue;
          }
LABEL_51:
          unsigned int v28 = v71;
          if (HIDWORD(v71) < v71)
          {
            ++HIDWORD(v71);
            *(void *)&v70[8 * v24] = v21;
LABEL_75:
            if (v78 >= (unint64_t)HIDWORD(v78)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v77 + v78) = v21;
            LODWORD(v78) = v78 + 1;
            continue;
          }
        }
        else
        {
          unsigned int v28 = v71;
        }
        if (3 * v28 <= 4 * (HIDWORD(v71) - v72))
        {
          if (v28 >= 0x40) {
            v28 *= 2;
          }
          else {
            unsigned int v28 = 128;
          }
        }
        else if (v28 - HIDWORD(v71) >= v28 >> 3)
        {
          goto LABEL_56;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v69, v28);
        unsigned int v28 = v71;
        int v23 = v70;
LABEL_56:
        unsigned int v29 = v28 - 1;
        unsigned int v30 = (v28 - 1) & ((v21 >> 4) ^ (v21 >> 9));
        unsigned int v31 = &v23[8 * v30];
        uint64_t v32 = *(void *)v31;
        if (*(void *)v31 == -1)
        {
          uint64_t v33 = 0;
LABEL_68:
          if (v33) {
            uint64_t v37 = v33;
          }
          else {
            uint64_t v37 = v31;
          }
          if (*(void *)v37 != v21)
          {
            if (*(void *)v37 == -2) {
              --v72;
            }
            else {
              ++HIDWORD(v71);
            }
            *(void *)uint64_t v37 = v21;
            goto LABEL_75;
          }
        }
        else
        {
          uint64_t v33 = 0;
          int v34 = 1;
          while (v32 != v21)
          {
            if (v33) {
              BOOL v35 = 0;
            }
            else {
              BOOL v35 = v32 == -2;
            }
            if (v35) {
              uint64_t v33 = v31;
            }
            unsigned int v36 = v30 + v34++;
            unsigned int v30 = v36 & v29;
            unsigned int v31 = &v23[8 * (v36 & v29)];
            uint64_t v32 = *(void *)v31;
            if (*(void *)v31 == -1) {
              goto LABEL_68;
            }
          }
        }
      }
    }
    while (v78)
    {
      uint64_t v38 = *((void *)v77 + v78 - 1);
      LODWORD(v78) = v78 - 1;
      int32x2_t v39 = this[13];
      unsigned __int32 v40 = this[15].u32[0];
      if (!v40) {
        goto LABEL_91;
      }
      unsigned int v41 = ((v38 >> 4) ^ (v38 >> 9)) & (v40 - 1);
      uint64_t v42 = *(void *)&v39 + 48 * v41;
      uint64_t v43 = *(void *)(v42 + 24);
      if (v38 != v43)
      {
        int v44 = 1;
        while (v43 != -4096)
        {
          unsigned int v45 = v41 + v44++;
          unsigned int v41 = v45 & (v40 - 1);
          uint64_t v42 = *(void *)&v39 + 48 * v41;
          uint64_t v43 = *(void *)(v42 + 24);
          if (v38 == v43) {
            goto LABEL_92;
          }
        }
LABEL_91:
        uint64_t v42 = *(void *)&v39 + 48 * v40;
      }
LABEL_92:
      if (v42 != *(void *)&v39 + 48 * v40)
      {
        llvm::ScalarEvolution::eraseValueFromMap((llvm::ScalarEvolution *)this, *(llvm::Value **)(v42 + 24));
        uint64_t v46 = *(void *)(v42 + 40);
        if (v75 >= (unint64_t)HIDWORD(v75)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v74 + v75) = v46;
        LODWORD(v75) = v75 + 1;
        if (*(unsigned char *)(v38 + 16) == 83)
        {
          if (v38)
          {
            __int32 v47 = this[79].i32[0];
            if (v47)
            {
              int32x2_t v48 = this[77];
              __int32 v49 = v47 - 1;
              LODWORD(v50) = (v47 - 1) & ((v38 >> 4) ^ (v38 >> 9));
              unsigned int v51 = (uint64_t *)(*(void *)&v48 + 16 * v50);
              uint64_t v52 = *v51;
              if (v38 == *v51)
              {
LABEL_104:
                uint64_t *v51 = -8192;
                this[78] = vadd_s32(this[78], (int32x2_t)0x1FFFFFFFFLL);
              }
              else
              {
                int v53 = 1;
                while (v52 != -4096)
                {
                  int v54 = v50 + v53++;
                  uint64_t v50 = v54 & v49;
                  uint64_t v52 = *(void *)(*(void *)&v48 + 16 * v50);
                  if (v38 == v52)
                  {
                    unsigned int v51 = (uint64_t *)(*(void *)&v48 + 16 * v50);
                    goto LABEL_104;
                  }
                }
              }
            }
          }
        }
      }
      sub_1CC10F184(*(void *)(v38 + 8), (uint64_t)&v77, (llvm::SmallPtrSetImplBase *)&v69);
    }
    __int32 v55 = this[91].i32[0];
    if (v55)
    {
      int32x2_t v56 = this[89];
      __int32 v57 = v55 - 1;
      LODWORD(v58) = (v55 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      uint64_t v59 = (uint64_t *)(*(void *)&v56 + 16 * v58);
      uint64_t v60 = *v59;
      if (v4 == *v59)
      {
LABEL_112:
        *uint64_t v59 = -8192;
        this[90] = vadd_s32(this[90], (int32x2_t)0x1FFFFFFFFLL);
      }
      else
      {
        int v61 = 1;
        while (v60 != -4096)
        {
          int v62 = v58 + v61++;
          uint64_t v58 = v62 & v57;
          uint64_t v60 = *(void *)(*(void *)&v56 + 16 * v58);
          if (v4 == v60)
          {
            uint64_t v59 = (uint64_t *)(*(void *)&v56 + 16 * v58);
            goto LABEL_112;
          }
        }
      }
    }
    uint64_t v63 = *(char **)(v4 + 8);
    unint64_t v64 = *(char **)(v4 + 16);
    unint64_t v65 = v64 - v63;
    int v66 = v81;
    if ((unint64_t)v81 + ((v64 - v63) >> 3) > HIDWORD(v81)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v63 != v64)
    {
      uint64_t v67 = &v80[v81];
      do
      {
        uint64_t v68 = *(void *)v63;
        v63 += 8;
        *v67++ = v68;
      }
      while (v63 != v64);
    }
    unsigned int v3 = v66 + (v65 >> 3);
    LODWORD(v81) = v3;
  }
  while (v3);
  llvm::ScalarEvolution::forgetMemoizedResults(this, (uint64_t *)v74, v75);
  if (v74 != v76) {
    free(v74);
  }
  if (v70 != v69) {
    free(v70);
  }
  if (v77 != v79) {
    free(v77);
  }
  if (v80 != v82) {
    free(v80);
  }
}

int32x2_t llvm::ScalarEvolution::forgetBackedgeTakenCounts(llvm::ScalarEvolution *this, uint64_t a2, int a3)
{
  uint64_t v6 = 544;
  if (a3)
  {
    uint64_t v6 = 568;
    uint64_t v7 = (int32x2_t *)((char *)this + 568);
  }
  else
  {
    uint64_t v7 = (int32x2_t *)((char *)this + 544);
  }
  uint64_t v8 = *(void *)((char *)this + v6);
  unsigned int v9 = v7[2].u32[0];
  unint64_t v10 = sub_1CC10DEC8(v8, v9, a2);
  if ((uint64_t *)(v8 + 144 * v9) != v10)
  {
    int v12 = v10;
    uint64_t v13 = (uint64_t *)v10[1];
    unsigned int v14 = *((_DWORD *)v10 + 4);
    if (v14)
    {
      unsigned int v40 = *((_DWORD *)v10 + 4);
      uint64_t v15 = &v13[11 * v14];
      unint64_t v16 = a2 & 0xFFFFFFFFFFFFFFFBLL;
      uint64_t v17 = 4;
      if (!a3) {
        uint64_t v17 = 0;
      }
      unint64_t v18 = v16 | v17;
      unsigned int v19 = ((v16 | v17) >> 4) ^ ((v16 | v17) >> 9);
      do
      {
        uint64_t v20 = v13[1];
        if (*(_WORD *)(v20 + 24))
        {
          uint64_t v21 = sub_1CC129FE4(*((void *)this + 74), *((_DWORD *)this + 152), v20);
          uint64_t v23 = v21[1];
          uint64_t v22 = v21[2];
          if (v22 == v23)
          {
            uint64_t v24 = *((unsigned int *)v21 + 7);
            uint64_t v25 = (void *)(v22 + 8 * v24);
            if (v24)
            {
              uint64_t v26 = 0;
              uint64_t v27 = 8 * v24;
              while (*(void *)(v22 + v26) != v18)
              {
                v26 += 8;
                if (v27 == v26) {
                  goto LABEL_28;
                }
              }
              uint64_t v25 = (void *)(v22 + v26);
            }
LABEL_28:
            uint64_t v23 = v21[2];
          }
          else
          {
            uint64_t v28 = *((unsigned int *)v21 + 6);
            int v29 = v28 - 1;
            unsigned int v30 = (v28 - 1) & v19;
            uint64_t v25 = (void *)(v22 + 8 * v30);
            uint64_t v31 = *v25;
            if (*v25 == -1)
            {
              uint64_t v32 = 0;
LABEL_37:
              if (v32) {
                uint64_t v25 = v32;
              }
              if (*v25 != v18) {
                uint64_t v25 = (void *)(v22 + 8 * v28);
              }
            }
            else
            {
              uint64_t v32 = 0;
              int v33 = 1;
              while (v31 != v18)
              {
                if (v32) {
                  BOOL v34 = 0;
                }
                else {
                  BOOL v34 = v31 == -2;
                }
                if (v34) {
                  uint64_t v32 = v25;
                }
                unsigned int v35 = v30 + v33++;
                unsigned int v30 = v35 & v29;
                uint64_t v25 = (void *)(v22 + 8 * (v35 & v29));
                uint64_t v31 = *v25;
                if (*v25 == -1) {
                  goto LABEL_37;
                }
              }
            }
          }
          if (v22 == v23) {
            uint64_t v36 = 28;
          }
          else {
            uint64_t v36 = 24;
          }
          if (v25 != (void *)(v22 + 8 * *(unsigned int *)((char *)v21 + v36)))
          {
            *uint64_t v25 = -2;
            ++*((_DWORD *)v21 + 8);
          }
        }
        v13 += 11;
      }
      while (v13 != v15);
      uint64_t v37 = v12[1];
      uint64_t v38 = 88 * v40;
      do
      {
        int32x2_t v39 = *(void **)(v37 + v38 - 56);
        if (v39 != *(void **)(v37 + v38 - 64)) {
          free(v39);
        }
        v38 -= 88;
      }
      while (v38);
      uint64_t v13 = (uint64_t *)v12[1];
    }
    if (v13 != v12 + 3) {
      free(v13);
    }
    *int v12 = -8192;
    int32x2_t result = vadd_s32(v7[1], (int32x2_t)0x1FFFFFFFFLL);
    v7[1] = result;
  }
  return result;
}

uint64_t sub_1CC10F004(uint64_t result, uint64_t a2, char *a3, char *a4)
{
  __int32 v5 = a3;
  uint64_t v6 = *(void *)result;
  uint64_t v7 = *(unsigned int *)(result + 8);
  unint64_t v8 = *(unsigned int *)(result + 12);
  uint64_t v9 = a4 - a3;
  unint64_t v10 = v7 + ((a4 - a3) >> 3);
  if (*(void *)result + 8 * v7 == a2)
  {
    if (v10 > v8) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v5 != a4)
    {
      uint64_t v11 = (void *)(v6 + 8 * v7);
      do
      {
        uint64_t v12 = *(void *)v5;
        v5 += 8;
        *v11++ = v12;
      }
      while (v5 != a4);
    }
    *(_DWORD *)(result + 8) = v7 + ((unint64_t)v9 >> 3);
  }
  else
  {
    uint64_t v13 = (a2 - v6) >> 3;
    unint64_t v14 = v9 >> 3;
    if (v10 > v8) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v15 = (char *)(v6 + 8 * v13);
    unint64_t v16 = (char *)(v6 + 8 * v7);
    unint64_t v17 = (v16 - v15) >> 3;
    if (v17 >= v14)
    {
      int32x2_t result = sub_1CD4570C8(result, &v16[-8 * v14], (char *)(v6 + 8 * v7));
      if (&v16[-8 * v14] != v15) {
        int32x2_t result = (uint64_t)memmove(&v15[8 * v14], v15, &v16[-8 * v14] - v15);
      }
      while (v5 != a4)
      {
        uint64_t v21 = *(void *)v5;
        v5 += 8;
        *(void *)uint64_t v15 = v21;
        v15 += 8;
      }
    }
    else
    {
      unsigned int v18 = v7 + ((unint64_t)v9 >> 3);
      *(_DWORD *)(result + 8) = v18;
      if (v13 != v7)
      {
        int32x2_t result = (uint64_t)memcpy((void *)(v6 + 8 * v18 - 8 * v17), (const void *)(v6 + 8 * v13), v16 - v15);
        do
        {
          uint64_t v19 = *(void *)v5;
          v5 += 8;
          *(void *)uint64_t v15 = v19;
          v15 += 8;
          --v17;
        }
        while (v17);
      }
      while (v5 != a4)
      {
        uint64_t v20 = *(void *)v5;
        v5 += 8;
        *(void *)unint64_t v16 = v20;
        v16 += 8;
      }
    }
  }
  return result;
}

void sub_1CC10F184(uint64_t a1, uint64_t a2, llvm::SmallPtrSetImplBase *this)
{
  if (a1)
  {
    uint64_t v5 = a1;
    while (1)
    {
      uint64_t v6 = *(void *)(v5 + 24);
      uint64_t v7 = *((void *)this + 1);
      uint64_t v8 = *((unsigned int *)this + 5);
      if (v7 == *(void *)this)
      {
        if (v8)
        {
          uint64_t v9 = 0;
          uint64_t v10 = 8 * v8;
          uint64_t v11 = (void *)*((void *)this + 1);
          while (*v11 != v6)
          {
            if (*v11 == -2) {
              uint64_t v9 = v11;
            }
            ++v11;
            v10 -= 8;
            if (!v10)
            {
              if (!v9) {
                goto LABEL_11;
              }
              *uint64_t v9 = v6;
              --*((_DWORD *)this + 6);
              goto LABEL_35;
            }
          }
          goto LABEL_37;
        }
LABEL_11:
        unsigned int v12 = *((_DWORD *)this + 4);
        if (v8 < v12)
        {
          *((_DWORD *)this + 5) = v8 + 1;
          *(void *)(v7 + 8 * v8) = v6;
          goto LABEL_35;
        }
      }
      else
      {
        unsigned int v12 = *((_DWORD *)this + 4);
      }
      if (3 * v12 <= 4 * ((int)v8 - *((_DWORD *)this + 6))) {
        break;
      }
      if (v12 - v8 < v12 >> 3) {
        goto LABEL_44;
      }
LABEL_16:
      unsigned int v13 = v12 - 1;
      unsigned int v14 = (v12 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      uint64_t v15 = (void *)(v7 + 8 * v14);
      uint64_t v16 = *v15;
      if (*v15 != -1)
      {
        unint64_t v17 = 0;
        int v18 = 1;
        while (v16 != v6)
        {
          if (v17) {
            BOOL v19 = 0;
          }
          else {
            BOOL v19 = v16 == -2;
          }
          if (v19) {
            unint64_t v17 = v15;
          }
          unsigned int v20 = v14 + v18++;
          unsigned int v14 = v20 & v13;
          uint64_t v15 = (void *)(v7 + 8 * (v20 & v13));
          uint64_t v16 = *v15;
          if (*v15 == -1) {
            goto LABEL_28;
          }
        }
        goto LABEL_37;
      }
      unint64_t v17 = 0;
LABEL_28:
      if (v17) {
        uint64_t v21 = v17;
      }
      else {
        uint64_t v21 = v15;
      }
      if (*v21 == v6) {
        goto LABEL_37;
      }
      if (*v21 == -2) {
        --*((_DWORD *)this + 6);
      }
      else {
        ++*((_DWORD *)this + 5);
      }
      *uint64_t v21 = v6;
LABEL_35:
      unint64_t v22 = *(unsigned int *)(a2 + 8);
      if (v22 >= *(unsigned int *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a2 + 8 * v22) = v6;
      ++*(_DWORD *)(a2 + 8);
LABEL_37:
      uint64_t v5 = *(void *)(v5 + 8);
      if (!v5) {
        return;
      }
    }
    if (v12 >= 0x40) {
      v12 *= 2;
    }
    else {
      unsigned int v12 = 128;
    }
LABEL_44:
    llvm::SmallPtrSetImplBase::Grow(this, v12);
    unsigned int v12 = *((_DWORD *)this + 4);
    uint64_t v7 = *((void *)this + 1);
    goto LABEL_16;
  }
}

void llvm::ScalarEvolution::forgetTopmostLoop(int32x2_t *this, const llvm::Loop **a2)
{
  do
  {
    int v2 = (const llvm::Loop *)a2;
    a2 = (const llvm::Loop **)*a2;
  }
  while (a2);
  llvm::ScalarEvolution::forgetLoop(this, v2);
}

void llvm::ScalarEvolution::forgetValue(llvm::ScalarEvolution *this, llvm::Value *a2)
{
  v29[16] = *MEMORY[0x1E4F143B8];
  if (!a2 || *((unsigned __int8 *)a2 + 16) < 0x1Cu) {
    return;
  }
  uint64_t v26 = v29;
  int v28 = 16;
  unint64_t v17 = v21;
  int v18 = v21;
  int v20 = 0;
  uint64_t v23 = v25;
  uint64_t v24 = 0x800000000;
  v29[0] = a2;
  uint64_t v19 = 0x100000008;
  v21[0] = a2;
  unsigned int v3 = 1;
  do
  {
    uint64_t v4 = *((void *)v26 + v3 - 1);
    unsigned int v27 = v3 - 1;
    uint64_t v5 = *((void *)this + 13);
    unsigned int v6 = *((_DWORD *)this + 30);
    if (v6)
    {
      unsigned int v7 = v6 - 1;
      unsigned int v8 = ((v4 >> 4) ^ (v4 >> 9)) & (v6 - 1);
      uint64_t v9 = v5 + 48 * v8;
      uint64_t v10 = *(void *)(v9 + 24);
      if (v4 == v10) {
        goto LABEL_11;
      }
      int v11 = 1;
      while (v10 != -4096)
      {
        unsigned int v12 = v8 + v11++;
        unsigned int v8 = v12 & v7;
        uint64_t v9 = v5 + 48 * (v12 & v7);
        uint64_t v10 = *(void *)(v9 + 24);
        if (v4 == v10) {
          goto LABEL_11;
        }
      }
    }
    uint64_t v9 = v5 + 48 * v6;
LABEL_11:
    if (v9 != v5 + 48 * v6)
    {
      uint64_t v16 = v4;
      uint64_t v13 = v9;
      llvm::ScalarEvolution::eraseValueFromMap(this, *(llvm::Value **)(v9 + 24));
      uint64_t v14 = *(void *)(v13 + 40);
      if (v24 >= (unint64_t)HIDWORD(v24)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v23 + v24) = v14;
      LODWORD(v24) = v24 + 1;
      uint64_t v4 = v16;
      if (*(unsigned char *)(v16 + 16) == 83)
      {
        if (v16)
        {
          unint64_t v22 = 0;
          int v15 = sub_1CC13D070(*((void *)this + 77), *((_DWORD *)this + 158), v16, &v22);
          uint64_t v4 = v16;
          if (v15)
          {
            *unint64_t v22 = -8192;
            *((int32x2_t *)this + 78) = vadd_s32(*(int32x2_t *)((char *)this + 624), (int32x2_t)0x1FFFFFFFFLL);
          }
        }
      }
    }
    sub_1CC10F184(*(void *)(v4 + 8), (uint64_t)&v26, (llvm::SmallPtrSetImplBase *)&v17);
    unsigned int v3 = v27;
  }
  while (v27);
  llvm::ScalarEvolution::forgetMemoizedResults((int32x2_t *)this, (uint64_t *)v23, v24);
  if (v23 != v25) {
    free(v23);
  }
  if (v18 != v17) {
    free(v18);
  }
  if (v26 != v29) {
    free(v26);
  }
}

void llvm::ScalarEvolution::forgetLoopDispositions(llvm::ScalarEvolution *this, const llvm::Loop *a2)
{
}

void llvm::ScalarEvolution::computeSymbolicMaxBackedgeTakenCount(llvm::ScalarEvolution *this, const llvm::Loop *a2)
{
  v4[16] = *MEMORY[0x1E4F143B8];
  int v2 = v4;
  uint64_t v3 = 0x1000000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks();
}

uint64_t llvm::ScalarEvolution::ExitLimit::ExitLimit(llvm::ScalarEvolution::ExitLimit *this, const llvm::SCEV *a2)
{
  return llvm::ScalarEvolution::ExitLimit::ExitLimit((uint64_t)this, (uint64_t)a2, (uint64_t)a2, 0, 0, 0);
}

{
  return llvm::ScalarEvolution::ExitLimit::ExitLimit((uint64_t)this, (uint64_t)a2, (uint64_t)a2, 0, 0, 0);
}

uint64_t llvm::ScalarEvolution::ExitLimit::ExitLimit(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a5;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  unsigned int v8 = (unint64_t *)(a1 + 56);
  *(void *)(a1 + 24) = a1 + 56;
  uint64_t v9 = (llvm::SmallPtrSetImplBase *)(a1 + 24);
  *(unsigned char *)(a1 + 16) = a4;
  *(void *)(a1 + 32) = a1 + 56;
  *(void *)(a1 + 40) = 4;
  *(_DWORD *)(a1 + 48) = 0;
  if (a3 && !*(_WORD *)(a3 + 24))
  {
    uint64_t v10 = *(void *)(a3 + 32);
    uint64_t v11 = *(unsigned int *)(v10 + 32);
    if (v11 < 0x41)
    {
      if (*(void *)(v10 + 24)) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    int v12 = 0;
    int64_t v13 = (unint64_t)(v11 + 63) >> 6;
    do
    {
      if (v13-- < 1) {
        break;
      }
      unint64_t v15 = *(void *)(*(void *)(v10 + 24) + 8 * v13);
      v12 += __clz(v15);
    }
    while (!v15);
    int v16 = v11 | 0xFFFFFFC0;
    if ((v11 & 0x3F) == 0) {
      int v16 = 0;
    }
    if (v12 + v16 == v11) {
LABEL_12:
    }
      *(void *)a1 = a3;
  }
LABEL_13:
  if (a6)
  {
    unsigned int v17 = 4;
    int v18 = (unint64_t *)(a1 + 56);
    uint64_t v19 = a5 + 8 * a6;
    while (1)
    {
      uint64_t v20 = *(void *)(*(void *)v6 + 8);
      if (v20 == **(void **)v6) {
        uint64_t v21 = 20;
      }
      else {
        uint64_t v21 = 16;
      }
      uint64_t v22 = *(unsigned int *)(*(void *)v6 + v21);
      if (v22)
      {
        uint64_t v23 = 8 * v22;
        uint64_t v24 = *(unint64_t **)(*(void *)v6 + 8);
        while (*v24 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v24;
          v23 -= 8;
          if (!v23) {
            goto LABEL_67;
          }
        }
      }
      else
      {
        uint64_t v24 = *(unint64_t **)(*(void *)v6 + 8);
      }
      uint64_t v25 = (unint64_t *)(v20 + 8 * v22);
      if (v24 == v25) {
        goto LABEL_67;
      }
      unint64_t v26 = *v24;
LABEL_26:
      uint64_t v27 = *(unsigned int *)(a1 + 44);
      if (v8 != v18) {
        break;
      }
      if (v27)
      {
        int v28 = 0;
        uint64_t v29 = 8 * v27;
        unsigned int v30 = v18;
        while (*v30 != v26)
        {
          if (*v30 == -2) {
            int v28 = v30;
          }
          ++v30;
          v29 -= 8;
          if (!v29)
          {
            if (!v28) {
              goto LABEL_34;
            }
            unint64_t *v28 = v26;
            --*(_DWORD *)(a1 + 48);
            goto LABEL_57;
          }
        }
        goto LABEL_57;
      }
LABEL_34:
      if (v27 >= v17) {
        break;
      }
      *(_DWORD *)(a1 + 44) = v27 + 1;
      v18[v27] = v26;
LABEL_57:
      int v18 = *(unint64_t **)(a1 + 24);
      unsigned int v8 = *(unint64_t **)(a1 + 32);
      unsigned int v40 = v24 + 1;
      while (v40 != v25)
      {
        unint64_t v41 = *v40++;
        unint64_t v26 = v41;
        if (v41 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v24 = v40 - 1;
          goto LABEL_26;
        }
      }
LABEL_67:
      v6 += 8;
      if (v6 == v19) {
        return a1;
      }
    }
    if (3 * v17 <= 4 * ((int)v27 - *(_DWORD *)(a1 + 48)))
    {
      if (v17 >= 0x40) {
        v17 *= 2;
      }
      else {
        unsigned int v17 = 128;
      }
    }
    else if (v17 - v27 >= v17 >> 3)
    {
      goto LABEL_38;
    }
    llvm::SmallPtrSetImplBase::Grow(v9, v17);
    unsigned int v17 = *(_DWORD *)(a1 + 40);
    unsigned int v8 = *(unint64_t **)(a1 + 32);
LABEL_38:
    unsigned int v31 = v17 - 1;
    unsigned int v32 = (v17 - 1) & ((v26 >> 4) ^ (v26 >> 9));
    int v33 = &v8[v32];
    unint64_t v34 = *v33;
    if (*v33 == -1)
    {
      unsigned int v35 = 0;
LABEL_50:
      if (v35) {
        int32x2_t v39 = v35;
      }
      else {
        int32x2_t v39 = v33;
      }
      if (*v39 != v26)
      {
        if (*v39 == -2) {
          --*(_DWORD *)(a1 + 48);
        }
        else {
          ++*(_DWORD *)(a1 + 44);
        }
        *int32x2_t v39 = v26;
      }
    }
    else
    {
      unsigned int v35 = 0;
      int v36 = 1;
      while (v34 != v26)
      {
        if (v35) {
          BOOL v37 = 0;
        }
        else {
          BOOL v37 = v34 == -2;
        }
        if (v37) {
          unsigned int v35 = v33;
        }
        unsigned int v38 = v32 + v36++;
        unsigned int v32 = v38 & v31;
        int v33 = &v8[v38 & v31];
        unint64_t v34 = *v33;
        if (*v33 == -1) {
          goto LABEL_50;
        }
      }
    }
    goto LABEL_57;
  }
  return a1;
}

uint64_t llvm::ScalarEvolution::ExitLimit::ExitLimit(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  v6[0] = a5;
  return llvm::ScalarEvolution::ExitLimit::ExitLimit(a1, a2, a3, a4, (uint64_t)v6, 1);
}

{
  void v6[2];

  v6[1] = *MEMORY[0x1E4F143B8];
  v6[0] = a5;
  return llvm::ScalarEvolution::ExitLimit::ExitLimit(a1, a2, a3, a4, (uint64_t)v6, 1);
}

uint64_t llvm::ScalarEvolution::ExitLimit::ExitLimit(llvm::ScalarEvolution::ExitLimit *this, const llvm::SCEV *a2, const llvm::SCEV *a3, char a4)
{
  return llvm::ScalarEvolution::ExitLimit::ExitLimit((uint64_t)this, (uint64_t)a2, (uint64_t)a3, a4, 0, 0);
}

{
  return llvm::ScalarEvolution::ExitLimit::ExitLimit((uint64_t)this, (uint64_t)a2, (uint64_t)a3, a4, 0, 0);
}

uint64_t llvm::ScalarEvolution::BackedgeTakenInfo::BackedgeTakenInfo(uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, char a6)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x100000000;
  *(void *)(a1 + 104) = a5;
  *(unsigned char *)(a1 + 112) = a4;
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = a6;
  if (a3 >= 2)
  {
    sub_1CC136A84(a1, a3);
  }
  else if (!a3)
  {
    return a1;
  }
  uint64_t v10 = (_DWORD *)(a2 + 56);
  uint64_t v11 = 96 * a3;
  do
  {
    uint64_t v12 = *((void *)v10 - 6);
    v33[0] = *((void *)v10 - 7);
    v33[1] = v12;
    v33[2] = v12;
    unint64_t v34 = v39;
    int64_t v13 = (const void *)*((void *)v10 - 2);
    if (v13 == *((const void **)v10 - 3))
    {
      unsigned int v35 = v39;
      uint64_t v14 = v39;
      unint64_t v15 = v13;
    }
    else
    {
      uint64_t v29 = *(v10 - 2);
      uint64_t v14 = malloc_type_malloc(8 * v29, 0x4065EBACuLL);
      if (!v14 && (v29 || (uint64_t v14 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      }
      unsigned int v35 = v14;
      unint64_t v15 = (const void *)*((void *)v10 - 3);
      int64_t v13 = (const void *)*((void *)v10 - 2);
    }
    unsigned int v16 = *(v10 - 2);
    unsigned int v36 = v16;
    int v17 = *(v10 - 1);
    if (v13 == v15) {
      unsigned int v18 = *(v10 - 1);
    }
    else {
      unsigned int v18 = v16;
    }
    if (v18)
    {
      memmove(v14, v13, 8 * v18);
      int v17 = *(v10 - 1);
    }
    int v37 = v17;
    int v38 = *v10;
    uint64_t v19 = *(unsigned int *)(a1 + 8);
    unint64_t v20 = *(void *)a1;
    uint64_t v21 = (char *)v33;
    if (v19 >= *(_DWORD *)(a1 + 12))
    {
      unint64_t v30 = v19 + 1;
      BOOL v31 = v20 + 88 * v19 > (unint64_t)v33;
      if (v20 <= (unint64_t)v33 && v31)
      {
        unsigned int v32 = (char *)v33 - v20;
        sub_1CC136A84(a1, v30);
        unint64_t v20 = *(void *)a1;
        uint64_t v21 = &v32[*(void *)a1];
      }
      else
      {
        sub_1CC136A84(a1, v30);
        unint64_t v20 = *(void *)a1;
        uint64_t v21 = (char *)v33;
      }
    }
    uint64_t v22 = v20 + 88 * *(unsigned int *)(a1 + 8);
    long long v23 = *(_OWORD *)v21;
    *(void *)(v22 + 16) = *((void *)v21 + 2);
    *(_OWORD *)uint64_t v22 = v23;
    uint64_t v24 = (void *)(v22 + 56);
    *(void *)(v22 + 24) = v22 + 56;
    uint64_t v25 = v22 + 24;
    uint64_t v27 = *((void *)v21 + 3);
    uint64_t v26 = *((void *)v21 + 4);
    if (v26 == v27)
    {
      *(void *)(v25 + 8) = v24;
      uint64_t v28 = *((unsigned int *)v21 + 11);
      if (v28) {
        memmove(v24, *((const void **)v21 + 4), 8 * v28);
      }
    }
    else
    {
      *(void *)(v25 + 8) = v26;
      *((void *)v21 + 4) = v27;
    }
    *(void *)(v25 + 16) = *((void *)v21 + 5);
    *(_DWORD *)(v25 + 24) = *((_DWORD *)v21 + 12);
    *((void *)v21 + 5) = 4;
    *((_DWORD *)v21 + 12) = 0;
    ++*(_DWORD *)(a1 + 8);
    if (v35 != v34) {
      free(v35);
    }
    v10 += 24;
    v11 -= 96;
  }
  while (v11);
  return a1;
}

void llvm::ScalarEvolution::computeExitLimit(llvm::ScalarEvolution *this, const llvm::Loop *a2, llvm::BasicBlock *a3)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
}

int *llvm::ScalarEvolution::computeExitLimitFromCond@<X0>(llvm::ScalarEvolution *this@<X0>, const llvm::Loop *a2@<X1>, llvm::ConstantInt **a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v9[0] = 1;
  for (uint64_t i = 1; i != 49; i += 12)
    v9[i] = -4;
  v9[49] = a2;
  char v10 = a4;
  char v11 = a6;
  llvm::ScalarEvolution::computeExitLimitFromCondCached(a7, this, (llvm::ScalarEvolution::ExitLimitCache *)v9, a2, a3, a4, a5, a6);
  return sub_1CC136C64((int *)v9);
}

void llvm::ScalarEvolution::computeExitLimitFromSingleExitSwitch(llvm::ScalarEvolution *this@<X0>, const llvm::Loop *a2@<X1>, llvm::SwitchInst *a3@<X2>, llvm::BasicBlock *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v12 = *((_DWORD *)a3 + 5);
  if ((v12 & 0x40000000) != 0) {
    int64_t v13 = (llvm::BasicBlock **)*((void *)a3 - 1);
  }
  else {
    int64_t v13 = (llvm::BasicBlock **)((char *)a3 - 32 * (v12 & 0x7FFFFFF));
  }
  if (v13[4] == a4)
  {
    uint64_t v14 = *((void *)this + 6);
    llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, v14, v14, 0, 0, 0);
  }
  else
  {
    unint64_t v15 = *v13;
    ExistingSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getExistingSCEV((uint64_t)this, (uint64_t)*v13);
    if (!ExistingSCEV) {
      ExistingSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v15);
    }
    SCEVAtScope = llvm::ScalarEvolution::getSCEVAtScope(this, ExistingSCEV, a2);
    unsigned int v18 = (llvm::ConstantInt *)sub_1CD4BF244((uint64_t)a3, (uint64_t)a4);
    unint64_t Constant = (const llvm::APInt *)llvm::ScalarEvolution::getConstant(this, v18);
    unint64_t MinusSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(this, SCEVAtScope, Constant, 0, 0);
    llvm::ScalarEvolution::howFarToZero(this, MinusSCEV, (const llvm::Loop **)a2, a5, 0, (uint64_t)&v26);
    if (*(_WORD *)(v26 + 24) == 15 && *(_WORD *)(*((void *)&v26 + 1) + 24) == 15)
    {
      llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, *((void *)this + 6), *((void *)this + 6), 0, 0, 0);
      uint64_t v22 = v28;
      uint64_t v21 = v29;
    }
    else
    {
      *(_OWORD *)a6 = v26;
      *(unsigned char *)(a6 + 16) = v27;
      long long v23 = (void *)(a6 + 56);
      *(void *)(a6 + 24) = a6 + 56;
      uint64_t v22 = v28;
      uint64_t v21 = v29;
      if (v29 == v28)
      {
        *(void *)(a6 + 32) = v23;
        int v24 = HIDWORD(v30);
        if (HIDWORD(v30)) {
          memmove(v23, v21, 8 * HIDWORD(v30));
        }
      }
      else
      {
        *(void *)(a6 + 32) = v29;
        uint64_t v29 = v22;
        uint64_t v21 = v22;
        int v24 = HIDWORD(v30);
      }
      int v25 = v31;
      *(_DWORD *)(a6 + 40) = v30;
      *(_DWORD *)(a6 + 44) = v24;
      *(_DWORD *)(a6 + 48) = v25;
      uint64_t v30 = 4;
      int v31 = 0;
    }
    if (v21 != v22) {
      free(v21);
    }
  }
}

void llvm::ScalarEvolution::computeExitLimitFromCondCached(uint64_t *__return_ptr a1@<X8>, llvm::ScalarEvolution *this@<X0>, llvm::ScalarEvolution::ExitLimitCache *a3@<X1>, const llvm::Loop *a4@<X2>, llvm::ConstantInt **a5@<X3>, int a6@<W4>, int a7@<W5>, int a8@<W6>)
{
  llvm::ScalarEvolution::ExitLimitCache::find(a3, (unint64_t)a5, a7, (uint64_t)&v17);
  if (v21)
  {
    *(_OWORD *)a1 = v17;
    *((unsigned char *)a1 + 16) = v18;
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)(a1 + 3), (const void **)a1 + 7, (const llvm::SmallPtrSetImplBase *)&v19);
    if (v21)
    {
      if (v20 != v19) {
        free(v20);
      }
    }
  }
  else
  {
    llvm::ScalarEvolution::computeExitLimitFromCondImpl(this, a3, a4, a5, a6, a7, a8, (uint64_t)a1);
    llvm::ScalarEvolution::ExitLimitCache::insert(a3, v16, (unint64_t)a5, 0, a7, 0, (const llvm::ScalarEvolution::ExitLimit *)a1);
  }
}

uint64_t llvm::ScalarEvolution::ExitLimitCache::find@<X0>(llvm::ScalarEvolution::ExitLimitCache *this@<X0>, unint64_t a2@<X2>, int a3@<W4>, uint64_t a4@<X8>)
{
  uint64_t v7 = 4;
  if (!a3) {
    uint64_t v7 = 0;
  }
  long long v17 = 0;
  uint64_t result = sub_1CC13DA28((uint64_t)this, v7 | a2 & 0xFFFFFFFFFFFFFFFBLL, &v17);
  uint64_t v9 = (char *)this + 8;
  int v10 = *(_DWORD *)this;
  if (result)
  {
    int64_t v13 = v17;
  }
  else
  {
    if (v10)
    {
      unsigned int v11 = 4;
      int v12 = (char *)this + 8;
    }
    else
    {
      int v12 = (char *)*((void *)this + 1);
      unsigned int v11 = *((_DWORD *)this + 4);
    }
    int64_t v13 = &v12[96 * v11];
  }
  if (v10)
  {
    unsigned int v14 = 4;
  }
  else
  {
    uint64_t v9 = (char *)*((void *)this + 1);
    unsigned int v14 = *((_DWORD *)this + 4);
  }
  if (&v9[96 * v14] == v13)
  {
    char v15 = 0;
    *(unsigned char *)a4 = 0;
  }
  else
  {
    long long v16 = *(_OWORD *)(v13 + 8);
    *(unsigned char *)(a4 + 16) = v13[24];
    *(_OWORD *)a4 = v16;
    uint64_t result = (uint64_t)llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)(a4 + 24), (const void **)(a4 + 56), (const llvm::SmallPtrSetImplBase *)(v13 + 32));
    char v15 = 1;
  }
  *(unsigned char *)(a4 + 88) = v15;
  return result;
}

void llvm::ScalarEvolution::ExitLimitCache::insert(llvm::ScalarEvolution::ExitLimitCache *this, const llvm::Loop *a2, unint64_t a3, BOOL a4, int a5, BOOL a6, const llvm::ScalarEvolution::ExitLimit *a7)
{
  uint64_t v9 = 4;
  if (!a5) {
    uint64_t v9 = 0;
  }
  unint64_t v22 = v9 | a3 & 0xFFFFFFFFFFFFFFFBLL;
  long long v23 = *(_OWORD *)a7;
  char v24 = *((unsigned char *)a7 + 16);
  int v10 = v29;
  unsigned int v11 = (const void *)*((void *)a7 + 4);
  if (v11 == *((const void **)a7 + 3))
  {
    long long __src = v29;
    int v12 = (const void *)*((void *)a7 + 4);
  }
  else
  {
    uint64_t v21 = *((unsigned int *)a7 + 10);
    int v10 = malloc_type_malloc(8 * v21, 0x4065EBACuLL);
    if (!v10 && (v21 || (int v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    long long __src = v10;
    int v12 = (const void *)*((void *)a7 + 3);
    unsigned int v11 = (const void *)*((void *)a7 + 4);
  }
  unsigned int v13 = *((_DWORD *)a7 + 11);
  int v26 = *((_DWORD *)a7 + 10);
  if (v11 == v12) {
    unsigned int v14 = *((_DWORD *)a7 + 11);
  }
  else {
    unsigned int v14 = *((_DWORD *)a7 + 10);
  }
  if (v14)
  {
    memmove(v10, v11, 8 * v14);
    unsigned int v13 = *((_DWORD *)a7 + 11);
  }
  unsigned int v27 = v13;
  int v28 = *((_DWORD *)a7 + 12);
  uint64_t v30 = 0;
  unint64_t v15 = v22;
  if (!sub_1CC13DA28((uint64_t)this, v22, &v30))
  {
    int v16 = *(_DWORD *)this >> 1;
    if (*(_DWORD *)this) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = *((_DWORD *)this + 4);
    }
    if (4 * v16 + 4 >= 3 * v17)
    {
      v17 *= 2;
    }
    else if (v17 + ~v16 - *((_DWORD *)this + 1) > v17 >> 3)
    {
LABEL_15:
      uint64_t v18 = v30;
      *(_DWORD *)this += 2;
      if (*(void *)v18 != -4) {
        --*((_DWORD *)this + 1);
      }
      *(void *)uint64_t v18 = v15;
      *(unsigned char *)(v18 + 24) = v24;
      *(_OWORD *)(v18 + 8) = v23;
      uint64_t v19 = (void *)(v18 + 64);
      *(void *)(v18 + 32) = v18 + 64;
      if (__src == v29)
      {
        *(void *)(v18 + 40) = v19;
        unsigned int v20 = v27;
        if (v27) {
          memmove(v19, __src, 8 * v27);
        }
      }
      else
      {
        *(void *)(v18 + 40) = __src;
        long long __src = v29;
        unsigned int v20 = v27;
      }
      *(_DWORD *)(v18 + 48) = v26;
      *(_DWORD *)(v18 + 52) = v20;
      *(_DWORD *)(v18 + 56) = v28;
      goto LABEL_21;
    }
    sub_1CC13DAD0((uint64_t)this, v17);
    uint64_t v30 = 0;
    unint64_t v15 = v22;
    sub_1CC13DA28((uint64_t)this, v22, &v30);
    goto LABEL_15;
  }
LABEL_21:
  if (__src != v29) {
    free(__src);
  }
}

void llvm::ScalarEvolution::computeExitLimitFromCondImpl(llvm::ScalarEvolution *this@<X0>, llvm::ScalarEvolution::ExitLimitCache *a2@<X1>, const llvm::Loop *a3@<X2>, llvm::ConstantInt **a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  llvm::ScalarEvolution::computeExitLimitFromCondFromBinOp(this, a2, a3, a4, a5, a6, a7, (uint64_t)&v84);
  if (v90)
  {
    *(_OWORD *)a8 = v84;
    *(unsigned char *)(a8 + 16) = v85;
    int v37 = (void *)(a8 + 56);
    *(void *)(a8 + 24) = a8 + 56;
    int v38 = v87;
    if (v87 == v86)
    {
      *(void *)(a8 + 32) = v37;
      int32x2_t v39 = v38;
    }
    else
    {
      int v77 = v88;
      int v37 = malloc_type_malloc(8 * v88, 0x4065EBACuLL);
      if (!v37 && (v77 || (int v37 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      }
      *(void *)(a8 + 32) = v37;
      int32x2_t v39 = v86;
      int v38 = v87;
    }
    unsigned int v41 = v88;
    unsigned int v40 = HIDWORD(v88);
    *(_DWORD *)(a8 + 40) = v88;
    if (v38 == v39) {
      unsigned int v42 = v40;
    }
    else {
      unsigned int v42 = v41;
    }
    if (v42)
    {
      memmove(v37, v38, 8 * v42);
      unsigned int v40 = HIDWORD(v88);
    }
    int v43 = v89;
    *(_DWORD *)(a8 + 44) = v40;
    *(_DWORD *)(a8 + 48) = v43;
    if (v90)
    {
      int v44 = (void *)v87;
      if (v87 != v86) {
        goto LABEL_112;
      }
    }
    return;
  }
  int v16 = *((unsigned __int8 *)a4 + 16);
  if (a4 && v16 == 81)
  {
    llvm::ScalarEvolution::computeExitLimitFromICmp(this, a3, (llvm::ICmpInst *)a4, a5, a6, 0, (uint64_t)&v84);
    if (*(_WORD *)(v84 + 24) == 15 && (a7 & 1) != 0)
    {
      llvm::ScalarEvolution::computeExitLimitFromICmp(this, a3, (llvm::ICmpInst *)a4, a5, a6, 1, a8);
      uint64_t v19 = v86;
      uint64_t v18 = v87;
    }
    else
    {
      *(_OWORD *)a8 = v84;
      *(unsigned char *)(a8 + 16) = v85;
      unsigned int v17 = (void *)(a8 + 56);
      *(void *)(a8 + 24) = a8 + 56;
      uint64_t v19 = v86;
      uint64_t v18 = v87;
      if (v87 == v86)
      {
        *(void *)(a8 + 32) = v17;
        int v20 = HIDWORD(v88);
        if (HIDWORD(v88)) {
          memmove(v17, v18, 8 * HIDWORD(v88));
        }
      }
      else
      {
        *(void *)(a8 + 32) = v87;
        unsigned int v87 = v19;
        uint64_t v18 = v19;
        int v20 = HIDWORD(v88);
      }
      int v21 = v89;
      *(_DWORD *)(a8 + 40) = v88;
      *(_DWORD *)(a8 + 44) = v20;
      *(_DWORD *)(a8 + 48) = v21;
      uint64_t v88 = 4;
      int v89 = 0;
    }
    if (v18 == v19) {
      return;
    }
    int v44 = (void *)v18;
LABEL_112:
    free(v44);
    return;
  }
  if (a4 && v16 == 16)
  {
    unsigned int v45 = a4 + 3;
    if (*((_DWORD *)a4 + 8) >= 0x41u) {
      unsigned int v45 = (void *)*v45;
    }
    if ((*v45 != 0) != a5)
    {
      uint64_t v76 = *((void *)this + 6);
      goto LABEL_91;
    }
    uint64_t v46 = *a4;
    unsigned int v47 = *((_DWORD *)v46 + 2);
    if (v47 != 13)
    {
      uint64_t v48 = *(void *)(*(void *)this + 40);
      if ((v47 & 0xFE) == 0x12) {
        unsigned int v47 = *(_DWORD *)(**((void **)v46 + 2) + 8);
      }
      uint64_t v49 = *(void *)(v48 + 504);
      if (v47 < 0x100) {
        goto LABEL_55;
      }
      unsigned int v50 = v47 >> 8;
      unint64_t v51 = *(unsigned int *)(v48 + 512);
      uint64_t v52 = v49;
      if (v51)
      {
        uint64_t v52 = v49;
        unint64_t v53 = v51;
        do
        {
          unint64_t v54 = v53 >> 1;
          uint64_t v55 = v52 + 16 * (v53 >> 1);
          unsigned int v56 = *(_DWORD *)(v55 + 8);
          uint64_t v57 = v55 + 16;
          v53 += ~(v53 >> 1);
          if (v56 < v50) {
            uint64_t v52 = v57;
          }
          else {
            unint64_t v53 = v54;
          }
        }
        while (v53);
      }
      if (v52 == v49 + 16 * v51 || *(_DWORD *)(v52 + 8) != v50) {
LABEL_55:
      }
        uint64_t v52 = v49;
      uint64_t v58 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v46, (llvm::LLVMContext *)*(unsigned int *)(v52 + 12));
      if ((*((_DWORD *)v46 + 2) & 0xFE) == 0x12) {
        llvm::VectorType::get(v58, (llvm::Type *)(*((unsigned int *)v46 + 8) | ((unint64_t)(*((_DWORD *)v46 + 2) == 19) << 32)));
      }
      uint64_t v46 = v58;
    }
    uint64_t v59 = *(llvm::ConstantInt **)v46;
    unsigned int v60 = *((_DWORD *)v46 + 2);
    DWORD2(v84) = v60 >> 8;
    if (v60 >> 8 >= 0x41) {
      operator new[]();
    }
    *(void *)&long long v84 = 0;
    int v61 = (llvm::ConstantInt *)llvm::ConstantInt::get(v59, (llvm::LLVMContext *)&v84, v15);
    if (DWORD2(v84) >= 0x41 && (void)v84) {
      MEMORY[0x1D25D9CB0](v84, 0x1000C8000313F17);
    }
    unint64_t Constant = llvm::ScalarEvolution::getConstant(this, v61);
LABEL_90:
    uint64_t v76 = Constant;
LABEL_91:
    llvm::ScalarEvolution::ExitLimit::ExitLimit(a8, v76, v76, 0, 0, 0);
    return;
  }
  uint64_t v83 = 0;
  if (v16 != 92
    || *((_DWORD *)a4 + 18) != 1
    || *(_DWORD *)a4[8] != 1
    || (unint64_t v22 = *(a4 - 4), v23 = sub_1CC062BC4((uint64_t)v22), !v22)
    || !v23
    || (char v24 = *(unsigned __int8 **)&v22[-8 * (v22[5] & 0x7FFFFFF) + 8],
        long long v84 = (unint64_t)&v83,
        !sub_1CBF528D8((uint64_t)&v84, v24)))
  {
LABEL_89:
    unint64_t Constant = llvm::ScalarEvolution::computeExitCountExhaustively(this, a3, (llvm::Value *)a4);
    goto LABEL_90;
  }
  int v25 = 13;
  if (((1 << (*(unsigned char *)(*((void *)v22 - 4) + 36) - 6)) & 0xC000000003) == 0)
  {
    if (((1 << (*(unsigned char *)(*((void *)v22 - 4) + 36) - 6)) & 0x6000000600000) != 0) {
      int v25 = 15;
    }
    else {
      int v25 = 17;
    }
  }
  uint64_t v26 = v83;
  int NoWrapKind = llvm::BinaryOpIntrinsic::getNoWrapKind((llvm::BinaryOpIntrinsic *)v22);
  llvm::ConstantRange::makeExactNoWrapRegion(v25, v26, NoWrapKind, (uint64_t)&v84);
  unsigned int v82 = 0;
  unsigned int v81 = 1;
  uint64_t v80 = 0;
  unsigned int v79 = 1;
  uint64_t v78 = 0;
  llvm::ConstantRange::getEquivalentICmp((llvm::ConstantRange *)&v84, (int *)&v82, (unsigned int *)&v80, (uint64_t)&v78);
  if ((a5 & 1) == 0) {
    unsigned int v82 = dword_1CFAC44C8[v82];
  }
  uint64_t v29 = *(llvm::Value **)&v22[-8 * (v22[5] & 0x7FFFFFF)];
  uint64_t v30 = *((void *)this + 13);
  unsigned int v31 = *((_DWORD *)this + 30);
  if (!v31) {
    goto LABEL_63;
  }
  unsigned int v32 = ((v29 >> 4) ^ (v29 >> 9)) & (v31 - 1);
  uint64_t v33 = v30 + 48 * v32;
  unint64_t v34 = *(llvm::Value **)(v33 + 24);
  if (v34 != v29)
  {
    int v35 = 1;
    while (v34 != (llvm::Value *)-4096)
    {
      unsigned int v36 = v32 + v35++;
      unsigned int v32 = v36 & (v31 - 1);
      uint64_t v33 = v30 + 48 * v32;
      unint64_t v34 = *(llvm::Value **)(v33 + 24);
      if (v34 == v29) {
        goto LABEL_64;
      }
    }
LABEL_63:
    uint64_t v33 = v30 + 48 * v31;
  }
LABEL_64:
  if (v33 == v30 + 48 * v31 || (uint64_t SCEVIter = *(const llvm::SCEV **)(v33 + 40)) == 0) {
    uint64_t SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v29);
  }
  unint64_t v64 = v78;
  if (v79 >= 0x41)
  {
    int v65 = 0;
    int64_t v66 = ((unint64_t)v79 + 63) >> 6;
    do
    {
      if (v66-- < 1) {
        break;
      }
      unint64_t v68 = v78[v66];
      v65 += __clz(v68);
    }
    while (!v68);
    unsigned int v69 = v79 | 0xFFFFFFC0;
    if ((v79 & 0x3F) == 0) {
      unsigned int v69 = 0;
    }
    if (v79 - v65 - v69 > 0x40) {
      goto LABEL_77;
    }
    unint64_t v64 = (void *)*v78;
  }
  if (v64)
  {
LABEL_77:
    int v70 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&v78, v28);
    unint64_t v71 = llvm::ScalarEvolution::getConstant(this, v70);
    uint64_t SCEVIter = (const llvm::SCEV *)sub_1CBFD7D6C(this, SCEVIter, v71, 0, 0);
  }
  unsigned int v72 = v82;
  unsigned int v73 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&v80, v28);
  uint64_t v74 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(this, v73);
  llvm::ScalarEvolution::computeExitLimitFromICmp(this, a3, v72, SCEVIter, v74, a6, a7, (void *)a8);
  if (*(_WORD *)(*(void *)a8 + 24) == 15 && *(_WORD *)(*(void *)(a8 + 8) + 24) == 15)
  {
    uint64_t v75 = *(void **)(a8 + 32);
    if (v75 != *(void **)(a8 + 24)) {
      free(v75);
    }
    if (v79 >= 0x41 && v78) {
      MEMORY[0x1D25D9CB0](v78, 0x1000C8000313F17);
    }
    if (v81 >= 0x41 && v80) {
      MEMORY[0x1D25D9CB0](v80, 0x1000C8000313F17);
    }
    sub_1CC05EB8C((uint64_t)&v84);
    goto LABEL_89;
  }
  if (v79 >= 0x41 && v78) {
    MEMORY[0x1D25D9CB0](v78, 0x1000C8000313F17);
  }
  if (v81 >= 0x41 && v80) {
    MEMORY[0x1D25D9CB0](v80, 0x1000C8000313F17);
  }
  if (v86 >= 0x41 && v85) {
    MEMORY[0x1D25D9CB0](v85, 0x1000C8000313F17);
  }
  if (DWORD2(v84) >= 0x41 && (void)v84) {
    MEMORY[0x1D25D9CB0](v84, 0x1000C8000313F17);
  }
}

void llvm::ScalarEvolution::computeExitLimitFromCondFromBinOp(llvm::ScalarEvolution *this@<X0>, llvm::ScalarEvolution::ExitLimitCache *a2@<X1>, const llvm::Loop *a3@<X2>, llvm::ConstantInt **a4@<X3>, BOOL a5@<W4>, char a6@<W5>, BOOL a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v63 = 0;
  unint64_t v64 = 0;
  uint64_t v58 = &v64;
  uint64_t v59 = &v63;
  unsigned int v15 = sub_1CB90D004(&v58, (uint64_t)a4);
  if ((v15 & 1) == 0)
  {
    uint64_t v58 = &v64;
    uint64_t v59 = &v63;
    if ((sub_1CB90D1A4(&v58, (uint64_t)a4) & 1) == 0)
    {
      *(unsigned char *)a8 = 0;
      *(unsigned char *)(a8 + 88) = 0;
      return;
    }
  }
  int v16 = v15 ^ a5;
  char v17 = a6 & ~(v15 ^ a5);
  uint64_t v18 = this;
  llvm::ScalarEvolution::computeExitLimitFromCondCached((uint64_t *)&v58, this, a2, a3, v64, a5, v17, a7);
  llvm::ScalarEvolution::computeExitLimitFromCondCached((uint64_t *)&v53, this, a2, a3, v63, a5, v17, a7);
  uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get(*a4, v15, 0);
  int v20 = v19;
  int v21 = v63;
  if (*((unsigned char *)v63 + 16) != 16)
  {
    int v21 = v64;
    if (*((unsigned char *)v64 + 16) != 16)
    {
      uint64_t Constant = *((void *)this + 6);
      if (v16)
      {
        if (v58 == (llvm::Value **)Constant)
        {
          uint64_t UMinFromMismatchedTypes = (void *)*((void *)this + 6);
        }
        else
        {
          uint64_t UMinFromMismatchedTypes = (void *)*((void *)this + 6);
          if (v53 != (llvm::Value **)Constant)
          {
            unsigned int v37 = *((unsigned __int8 *)a4 + 16);
            BOOL v39 = v37 < 0x1C || v37 - 59 < 0xFFFFFFEE;
            *(void *)&long long v66 = &v67;
            uint64_t v67 = v58;
            unint64_t v68 = v53;
            *((void *)&v66 + 1) = 0x200000002;
            uint64_t UMinFromMismatchedTypes = (void *)llvm::ScalarEvolution::getUMinFromMismatchedTypes(this, (unsigned int *)&v66, v39);
            if ((llvm::Value ***)v66 != &v67) {
              free((void *)v66);
            }
            uint64_t v18 = this;
            uint64_t Constant = *((void *)this + 6);
          }
        }
        if (v59 == (llvm::Value **)Constant)
        {
          uint64_t Constant = (uint64_t)v54;
        }
        else if (v54 == (llvm::Value **)Constant)
        {
          uint64_t Constant = (uint64_t)v59;
        }
        else
        {
          *(void *)&long long v66 = &v67;
          uint64_t v67 = v59;
          unint64_t v68 = v54;
          *((void *)&v66 + 1) = 0x200000002;
          uint64_t Constant = llvm::ScalarEvolution::getUMinFromMismatchedTypes(v18, (unsigned int *)&v66, 0);
          if ((llvm::Value ***)v66 != &v67) {
            free((void *)v66);
          }
          uint64_t v18 = this;
        }
      }
      else if (v58 == v53)
      {
        uint64_t UMinFromMismatchedTypes = v58;
      }
      else
      {
        uint64_t UMinFromMismatchedTypes = (void *)*((void *)this + 6);
      }
      if (*(_WORD *)(Constant + 24) == 15 && *((_WORD *)UMinFromMismatchedTypes + 12) != 15)
      {
        uint64_t RangeRef = (char **)llvm::ScalarEvolution::getRangeRef(v18, UMinFromMismatchedTypes, 0, 0);
        llvm::ConstantRange::getUnsignedMax(RangeRef, (uint64_t)&v66);
        unsigned int v42 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)v18, (llvm::LLVMContext *)&v66, v41);
        uint64_t Constant = llvm::ScalarEvolution::getConstant(v18, v42);
        if (DWORD2(v66) >= 0x41)
        {
          if ((void)v66) {
            MEMORY[0x1D25D9CB0](v66, 0x1000C8000313F17);
          }
        }
      }
      v65[0] = &v60;
      v65[1] = &v55;
      llvm::ScalarEvolution::ExitLimit::ExitLimit((uint64_t)&v66, (uint64_t)UMinFromMismatchedTypes, Constant, 0, (uint64_t)v65, 2);
      *(_OWORD *)a8 = v66;
      *(unsigned char *)(a8 + 16) = (_BYTE)v67;
      int v43 = (void *)(a8 + 56);
      *(void *)(a8 + 24) = a8 + 56;
      unsigned int v45 = v68;
      int v44 = v69;
      if (v69 == v68)
      {
        *(void *)(a8 + 32) = v43;
        int v46 = HIDWORD(v70);
        if (HIDWORD(v70)) {
          memmove(v43, v44, 8 * HIDWORD(v70));
        }
      }
      else
      {
        *(void *)(a8 + 32) = v69;
        unsigned int v69 = v45;
        int v44 = v45;
        int v46 = HIDWORD(v70);
      }
      int v47 = v71;
      *(_DWORD *)(a8 + 40) = v70;
      *(_DWORD *)(a8 + 44) = v46;
      *(_DWORD *)(a8 + 48) = v47;
      uint64_t v70 = 4;
      int v71 = 0;
      *(unsigned char *)(a8 + 88) = 1;
      if (v44 != v45) {
        free(v44);
      }
      goto LABEL_30;
    }
    if (v64 == v19) {
      uint64_t v29 = &v53;
    }
    else {
      uint64_t v29 = &v58;
    }
    *(_OWORD *)a8 = *(_OWORD *)v29;
    *(unsigned char *)(a8 + 16) = *((unsigned char *)v29 + 16);
    int v23 = (void *)(a8 + 56);
    *(void *)(a8 + 24) = a8 + 56;
    char v24 = v29[4];
    if (v24 == v29[3])
    {
      *(void *)(a8 + 32) = v23;
      int v25 = v24;
    }
    else
    {
      unsigned int v50 = v62;
      if (v21 == v20) {
        unsigned int v50 = v57;
      }
      uint64_t v51 = *(unsigned int *)v50;
      int v23 = malloc_type_malloc(8 * v51, 0x4065EBACuLL);
      if (!v23)
      {
        if (v51) {
          goto LABEL_83;
        }
        int v23 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v23) {
          goto LABEL_83;
        }
      }
      *(void *)(a8 + 32) = v23;
      int v25 = v29[3];
      char v24 = v29[4];
    }
    uint64_t v26 = &v53;
    unsigned int v27 = v57;
    int v28 = &v58;
    goto LABEL_17;
  }
  if (v63 == v19) {
    unint64_t v22 = &v58;
  }
  else {
    unint64_t v22 = &v53;
  }
  *(_OWORD *)a8 = *(_OWORD *)v22;
  *(unsigned char *)(a8 + 16) = *((unsigned char *)v22 + 16);
  int v23 = (void *)(a8 + 56);
  *(void *)(a8 + 24) = a8 + 56;
  char v24 = v22[4];
  if (v24 != v22[3])
  {
    uint64_t v48 = v62;
    if (v21 != v20) {
      uint64_t v48 = v57;
    }
    uint64_t v49 = *(unsigned int *)v48;
    int v23 = malloc_type_malloc(8 * v49, 0x4065EBACuLL);
    if (v23 || !v49 && (int v23 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      *(void *)(a8 + 32) = v23;
      int v25 = v22[3];
      char v24 = v22[4];
      goto LABEL_9;
    }
LABEL_83:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  *(void *)(a8 + 32) = v23;
  int v25 = v24;
LABEL_9:
  uint64_t v26 = &v58;
  unsigned int v27 = v62;
  int v28 = &v53;
LABEL_17:
  if (v21 != v20) {
    unsigned int v27 = v28 + 5;
  }
  unsigned int v30 = *(_DWORD *)v27;
  *(_DWORD *)(a8 + 40) = *(_DWORD *)v27;
  if (v21 == v20) {
    unsigned int v31 = v26;
  }
  else {
    unsigned int v31 = v28;
  }
  int v32 = *((_DWORD *)v31 + 11);
  if (v24 == v25) {
    unsigned int v33 = *((_DWORD *)v31 + 11);
  }
  else {
    unsigned int v33 = v30;
  }
  if (v33)
  {
    memmove(v23, v24, 8 * v33);
    int v32 = *((_DWORD *)v31 + 11);
  }
  *(_DWORD *)(a8 + 44) = v32;
  unint64_t v34 = v26 + 6;
  if (v21 != v20) {
    unint64_t v34 = v28 + 6;
  }
  *(_DWORD *)(a8 + 48) = *v34;
  *(unsigned char *)(a8 + 88) = 1;
LABEL_30:
  if (v56 != v55) {
    free(v56);
  }
  if (v61 != v60) {
    free(v61);
  }
}

void llvm::ScalarEvolution::computeExitLimitFromICmp(llvm::ScalarEvolution *this@<X0>, const llvm::Loop *a2@<X1>, llvm::ICmpInst *a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v13 = *((_WORD *)a3 + 9) & 0x3FLL;
  if (a4) {
    LODWORD(v13) = dword_1CFAC44C8[v13];
  }
  unsigned int v14 = (llvm::Value *)*((void *)a3 - 8);
  uint64_t v15 = *((void *)this + 13);
  unsigned int v16 = *((_DWORD *)this + 30);
  if (!v16)
  {
LABEL_9:
    uint64_t v18 = v15 + 48 * v16;
    goto LABEL_10;
  }
  unsigned int v17 = ((v14 >> 4) ^ (v14 >> 9)) & (v16 - 1);
  uint64_t v18 = v15 + 48 * v17;
  uint64_t v19 = *(llvm::Value **)(v18 + 24);
  if (v19 != v14)
  {
    int v20 = 1;
    while (v19 != (llvm::Value *)-4096)
    {
      unsigned int v21 = v17 + v20++;
      unsigned int v17 = v21 & (v16 - 1);
      uint64_t v18 = v15 + 48 * v17;
      uint64_t v19 = *(llvm::Value **)(v18 + 24);
      if (v19 == v14) {
        goto LABEL_10;
      }
    }
    goto LABEL_9;
  }
LABEL_10:
  if (v18 == v15 + 48 * v16 || (uint64_t SCEVIter = *(const llvm::SCEV **)(v18 + 40)) == 0)
  {
    uint64_t SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v14);
    uint64_t v15 = *((void *)this + 13);
    unsigned int v16 = *((_DWORD *)this + 30);
  }
  int v23 = (llvm::Value *)*((void *)a3 - 4);
  if (!v16)
  {
LABEL_19:
    uint64_t v25 = v15 + 48 * v16;
    goto LABEL_20;
  }
  unsigned int v24 = ((v23 >> 4) ^ (v23 >> 9)) & (v16 - 1);
  uint64_t v25 = v15 + 48 * v24;
  uint64_t v26 = *(llvm::Value **)(v25 + 24);
  if (v26 != v23)
  {
    int v27 = 1;
    while (v26 != (llvm::Value *)-4096)
    {
      unsigned int v28 = v24 + v27++;
      unsigned int v24 = v28 & (v16 - 1);
      uint64_t v25 = v15 + 48 * v24;
      uint64_t v26 = *(llvm::Value **)(v25 + 24);
      if (v26 == v23) {
        goto LABEL_20;
      }
    }
    goto LABEL_19;
  }
LABEL_20:
  if (v25 == v15 + 48 * v16 || (uint64_t v29 = *(const llvm::SCEV **)(v25 + 40)) == 0) {
    uint64_t v29 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v23);
  }
  llvm::ScalarEvolution::computeExitLimitFromICmp(this, a2, v13, SCEVIter, v29, a5, a6, &v36);
  if (*(_WORD *)(v36 + 24) == 15 && *(_WORD *)(*((void *)&v36 + 1) + 24) == 15)
  {
    uint64_t v35 = llvm::ScalarEvolution::computeExitCountExhaustively(this, a2, a3);
    if (*(_WORD *)(v35 + 24) == 15) {
      llvm::ScalarEvolution::computeShiftCompareExitLimit((uint64_t)this, *((void *)a3 - 4), a7);
    }
    else {
      llvm::ScalarEvolution::ExitLimit::ExitLimit(a7, v35, v35, 0, 0, 0);
    }
  }
  else
  {
    *(_OWORD *)a7 = v36;
    *(unsigned char *)(a7 + 16) = v37;
    unsigned int v30 = (void *)(a7 + 56);
    *(void *)(a7 + 24) = a7 + 56;
    int v32 = v38;
    unsigned int v31 = v39;
    if (v39 == v38)
    {
      *(void *)(a7 + 32) = v30;
      int v33 = HIDWORD(v40);
      if (HIDWORD(v40)) {
        memmove(v30, v31, 8 * HIDWORD(v40));
      }
    }
    else
    {
      *(void *)(a7 + 32) = v39;
      BOOL v39 = v32;
      int v33 = HIDWORD(v40);
    }
    int v34 = v41;
    *(_DWORD *)(a7 + 40) = v40;
    *(_DWORD *)(a7 + 44) = v33;
    *(_DWORD *)(a7 + 48) = v34;
    uint64_t v40 = 4;
    int v41 = 0;
  }
  if (v39 != v38) {
    free(v39);
  }
}

void llvm::ScalarEvolution::computeExitLimitFromICmp(llvm::ScalarEvolution *a1@<X0>, const llvm::Loop *a2@<X1>, unsigned int a3@<W2>, const llvm::SCEV *a4@<X3>, const llvm::SCEV *a5@<X4>, int a6@<W5>, int a7@<W6>, void *a8@<X8>)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  unsigned int v66 = a3;
  SCEVAtScope = llvm::ScalarEvolution::getSCEVAtScope(a1, a4, a2);
  int v65 = SCEVAtScope;
  unsigned int v16 = llvm::ScalarEvolution::getSCEVAtScope(a1, a5, a2);
  unint64_t v64 = v16;
  if (llvm::ScalarEvolution::getLoopDisposition(a1, SCEVAtScope, a2) == 1
    && llvm::ScalarEvolution::getLoopDisposition(a1, v16, a2) != 1)
  {
    unint64_t v64 = SCEVAtScope;
    int v65 = v16;
    unsigned int v66 = dword_1CFAC4570[a3];
  }
  if (a6 && (llvm::ScalarEvolution::getLoopProperties(a1, a2) & 1) != 0) {
    unsigned int IsFiniteByAssumption = llvm::ScalarEvolution::loopIsFiniteByAssumption(a1, a2);
  }
  else {
    unsigned int IsFiniteByAssumption = 0;
  }
  if (byte_1EBCC80F8) {
    uint64_t v18 = IsFiniteByAssumption;
  }
  else {
    uint64_t v18 = 0;
  }
  llvm::ScalarEvolution::SimplifyICmpOperands(a1, &v66, &v65, (uint64_t *)&v64, 0, v18);
  uint64_t v19 = v64;
  if (!v64
    || *((_WORD *)v64 + 12)
    || (int v20 = v65) == 0
    || *((_WORD *)v65 + 12) != 7
    || *((const llvm::Loop **)v65 + 6) != a2)
  {
LABEL_19:
    if (!IsFiniteByAssumption || llvm::ScalarEvolution::getLoopDisposition(a1, v19, a2) != 1) {
      goto LABEL_32;
    }
    unint64_t v22 = v65;
    int v23 = *((unsigned __int16 *)v65 + 12);
    if (v65 && v23 == 2)
    {
      unint64_t v22 = (llvm::SCEV *)*((void *)v65 + 4);
      int v23 = *((unsigned __int16 *)v22 + 12);
    }
    if (v23 != 7) {
      goto LABEL_32;
    }
    uint64_t v24 = *((void *)v22 + 5);
    if (v24 == 2)
    {
      uint64_t v25 = *(void *)(*((void *)v22 + 4) + 8);
    }
    else
    {
      uint64_t v63 = *((void *)v22 + 4);
      uint64_t v67 = v69;
      uint64_t v68 = 0x300000000;
      uint64_t v60 = v24;
      size_t v61 = 8 * v24 - 8;
      if (v61 >= 0x19) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v62 = 0;
      if (v60 != 1)
      {
        memcpy(v67, (const void *)(v63 + 8), v61);
        int v62 = v68;
      }
      LODWORD(v68) = v62 + (v61 >> 3);
      uint64_t v25 = sub_1CD478318(a1, (uint64_t)&v67, *((const llvm::Loop **)v22 + 6), 0);
      if (v67 != v69) {
        free(v67);
      }
    }
    uint64_t v26 = *(_WORD *)(v25 + 24) ? 0 : v25;
    __int16 v27 = *((_WORD *)v22 + 14);
    if ((v27 & 1) != 0 || *((const llvm::Loop **)v22 + 6) != a2 || *((void *)v22 + 5) != 2 || !v26) {
      goto LABEL_32;
    }
    uint64_t v49 = *(int8x8_t **)(v26 + 32);
    uint64_t v50 = v49[4].u32[0];
    if (v50 > 0x40)
    {
      int v52 = 0;
      unint64_t v53 = (unint64_t)(v50 + 63) >> 6;
      unint64_t v54 = (int8x8_t *)v49[3];
      do
      {
        int8x8_t v55 = *v54++;
        uint8x8_t v56 = (uint8x8_t)vcnt_s8(v55);
        v56.i16[0] = vaddlv_u8(v56);
        v52 += v56.i32[0];
        --v53;
      }
      while (v53);
      if (v52 == 1)
      {
LABEL_99:
        uint64_t v57 = v27 & 6 | 1u;
        uint64_t v58 = (_OWORD *)*((void *)v22 + 4);
        uint64_t v67 = v69;
        uint64_t v68 = 0x600000000;
        v69[0] = *v58;
        LODWORD(v68) = 2;
        int v59 = sub_1CC0EF280((uint64_t)a1, 7, v69, 2, v57);
        llvm::ScalarEvolution::setNoWrapFlags((int32x2_t *)a1, (uint64_t)v22, v59);
        if (v67 != v69) {
          free(v67);
        }
      }
    }
    else
    {
      uint8x8_t v51 = (uint8x8_t)vcnt_s8(v49[3]);
      v51.i16[0] = vaddlv_u8(v51);
      if (v51.u32[0] == 1) {
        goto LABEL_99;
      }
    }
LABEL_32:
    switch(v66)
    {
      case ' ':
        LosslessPtrToIntExpr = v65;
        int v32 = v65;
        while (2)
        {
          switch(*((_WORD *)v32 + 12))
          {
            case 1:
            case 2:
            case 3:
            case 0xD:
              uint64_t v35 = (char *)v32 + 40;
              goto LABEL_65;
            case 4:
              uint64_t v35 = (char *)v32 + 48;
              goto LABEL_65;
            case 5:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
              int v33 = (llvm::SCEV **)*((void *)v32 + 4);
              goto LABEL_43;
            case 6:
              int v33 = (llvm::SCEV **)((char *)v32 + 40);
LABEL_43:
              int v32 = *v33;
              continue;
            case 0xE:
              uint64_t v35 = (char *)*((void *)v32 - 1);
              goto LABEL_65;
            default:
              uint64_t v35 = (char *)*((void *)v32 + 4);
LABEL_65:
              if (*(unsigned char *)(*(void *)v35 + 8) == 15)
              {
                LosslessPtrToIntExpr = llvm::ScalarEvolution::getLosslessPtrToIntExpr(a1, v65);
                if (*((_WORD *)LosslessPtrToIntExpr + 12) == 15)
                {
                  uint64_t v36 = (uint64_t)a8;
                  uint64_t v37 = (uint64_t)LosslessPtrToIntExpr;
                  uint64_t v38 = (uint64_t)LosslessPtrToIntExpr;
                  goto LABEL_89;
                }
              }
              unsigned int v42 = v19;
              while (2)
              {
                switch(*((_WORD *)v42 + 12))
                {
                  case 1:
                  case 2:
                  case 3:
                  case 0xD:
                    int v44 = (char *)v42 + 40;
                    goto LABEL_80;
                  case 4:
                    int v44 = (char *)v42 + 48;
                    goto LABEL_80;
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                  case 0xA:
                  case 0xB:
                  case 0xC:
                    int v43 = (llvm::SCEV **)*((void *)v42 + 4);
                    goto LABEL_71;
                  case 6:
                    int v43 = (llvm::SCEV **)((char *)v42 + 40);
LABEL_71:
                    unsigned int v42 = *v43;
                    continue;
                  case 0xE:
                    int v44 = (char *)*((void *)v42 - 1);
                    goto LABEL_80;
                  default:
                    int v44 = (char *)*((void *)v42 + 4);
LABEL_80:
                    if (*(unsigned char *)(*(void *)v44 + 8) == 15)
                    {
                      uint64_t v19 = llvm::ScalarEvolution::getLosslessPtrToIntExpr(a1, v19);
                      if (*((_WORD *)v19 + 12) == 15) {
                        goto LABEL_82;
                      }
                    }
                    unint64_t MinusSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(a1, LosslessPtrToIntExpr, v19, 0, 0);
                    llvm::ScalarEvolution::howFarToNonZero(a1, MinusSCEV, v47, (uint64_t)a8);
                    break;
                }
                break;
              }
              break;
          }
          goto LABEL_84;
        }
      case '!':
        unsigned int v28 = v65;
        uint64_t v29 = v65;
        while (2)
        {
          switch(*((_WORD *)v29 + 12))
          {
            case 1:
            case 2:
            case 3:
            case 0xD:
              int v34 = (char *)v29 + 40;
              goto LABEL_54;
            case 4:
              int v34 = (char *)v29 + 48;
              goto LABEL_54;
            case 5:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
              unsigned int v30 = (llvm::SCEV **)*((void *)v29 + 4);
              goto LABEL_38;
            case 6:
              unsigned int v30 = (llvm::SCEV **)((char *)v29 + 40);
LABEL_38:
              uint64_t v29 = *v30;
              continue;
            case 0xE:
              int v34 = (char *)*((void *)v29 - 1);
              goto LABEL_54;
            default:
              int v34 = (char *)*((void *)v29 + 4);
LABEL_54:
              if (*(unsigned char *)(*(void *)v34 + 8) == 15
                && (unsigned int v28 = llvm::ScalarEvolution::getLosslessPtrToIntExpr(a1, v65), *((_WORD *)v28 + 12) == 15))
              {
                uint64_t v36 = (uint64_t)a8;
                uint64_t v37 = (uint64_t)v28;
                uint64_t v38 = (uint64_t)v28;
              }
              else
              {
                BOOL v39 = v19;
                while (2)
                {
                  switch(*((_WORD *)v39 + 12))
                  {
                    case 1:
                    case 2:
                    case 3:
                    case 0xD:
                      int v41 = (char *)v39 + 40;
                      goto LABEL_76;
                    case 4:
                      int v41 = (char *)v39 + 48;
                      goto LABEL_76;
                    case 5:
                    case 7:
                    case 8:
                    case 9:
                    case 0xA:
                    case 0xB:
                    case 0xC:
                      uint64_t v40 = (llvm::SCEV **)*((void *)v39 + 4);
                      goto LABEL_60;
                    case 6:
                      uint64_t v40 = (llvm::SCEV **)((char *)v39 + 40);
LABEL_60:
                      BOOL v39 = *v40;
                      continue;
                    case 0xE:
                      int v41 = (char *)*((void *)v39 - 1);
                      goto LABEL_76;
                    default:
                      int v41 = (char *)*((void *)v39 + 4);
LABEL_76:
                      if (*(unsigned char *)(*(void *)v41 + 8) != 15
                        || (uint64_t v19 = llvm::ScalarEvolution::getLosslessPtrToIntExpr(a1, v19), *((_WORD *)v19 + 12) != 15))
                      {
                        unsigned int v45 = (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(a1, v28, v19, 0, 0);
                        llvm::ScalarEvolution::howFarToZero(a1, v45, (const llvm::Loop **)a2, a6, a7, (uint64_t)a8);
                        goto LABEL_84;
                      }
LABEL_82:
                      uint64_t v36 = (uint64_t)a8;
                      uint64_t v37 = (uint64_t)v19;
                      uint64_t v38 = (uint64_t)v19;
                      break;
                  }
                  break;
                }
              }
              break;
          }
          goto LABEL_89;
        }
      case '""':
      case '&':
        llvm::ScalarEvolution::howManyGreaterThans(a1, v65, v19, a2, v66 == 38, a6, a7, (uint64_t)a8);
        goto LABEL_84;
      case '$':
      case '(':
        llvm::ScalarEvolution::howManyLessThans(a1, v65, v19, a2, v66 == 40, a6, a7, (uint64_t)a8);
LABEL_84:
        if (*(_WORD *)(*a8 + 24) != 15 || *(_WORD *)(a8[1] + 24) != 15) {
          return;
        }
        uint64_t v48 = (void *)a8[4];
        if (v48 != (void *)a8[3]) {
          free(v48);
        }
LABEL_88:
        uint64_t v37 = *((void *)a1 + 6);
        uint64_t v36 = (uint64_t)a8;
        uint64_t v38 = v37;
LABEL_89:
        llvm::ScalarEvolution::ExitLimit::ExitLimit(v36, v37, v38, 0, 0, 0);
        break;
      default:
        goto LABEL_88;
    }
    return;
  }
  llvm::ConstantRange::makeExactICmpRegion(v66, *((void *)v64 + 4) + 24, (uint64_t)&v67);
  unint64_t NumIterationsInRange = llvm::SCEVAddRecExpr::getNumIterationsInRange(v20, (const void **)&v67, a1);
  if (*(_WORD *)(NumIterationsInRange + 24) == 15)
  {
    if (DWORD2(v69[0]) >= 0x41 && *(void *)&v69[0]) {
      MEMORY[0x1D25D9CB0](*(void *)&v69[0], 0x1000C8000313F17);
    }
    if (v68 >= 0x41 && v67) {
      MEMORY[0x1D25D9CB0](v67, 0x1000C8000313F17);
    }
    goto LABEL_19;
  }
  llvm::ScalarEvolution::ExitLimit::ExitLimit((uint64_t)a8, NumIterationsInRange, NumIterationsInRange, 0, 0, 0);
  if (DWORD2(v69[0]) >= 0x41 && *(void *)&v69[0]) {
    MEMORY[0x1D25D9CB0](*(void *)&v69[0], 0x1000C8000313F17);
  }
  if (v68 >= 0x41 && v67) {
    MEMORY[0x1D25D9CB0](v67, 0x1000C8000313F17);
  }
}

uint64_t llvm::ScalarEvolution::computeExitCountExhaustively(llvm::ScalarEvolution *this, const llvm::Loop *a2, llvm::Value *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if (*((unsigned __int8 *)a3 + 16) >= 0x1Cu)
    {
      if (sub_1CC136D10((uint64_t)a3, (uint64_t)a2, (uint64_t)a3))
      {
        uint64_t v6 = a3;
        if (*((unsigned char *)a3 + 16) == 83
          || (v8[0] = 0,
              v8[1] = 0,
              int v9 = 0,
              uint64_t v6 = (llvm::Value *)sub_1CC1370F0((uint64_t)a3, (uint64_t)a2, (uint64_t)v8, 0),
              MEMORY[0x1D25D9CD0](v8[0], 8),
              v6))
        {
          if ((*((_DWORD *)v6 + 5) & 0x7FFFFFF) == 2) {
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
          }
        }
      }
    }
  }
  return *((void *)this + 6);
}

uint64_t llvm::ScalarEvolution::computeShiftCompareExitLimit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (a2 && *(unsigned char *)(a2 + 16) == 16) {
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
  }
  uint64_t v3 = *(void *)(a1 + 48);

  return llvm::ScalarEvolution::ExitLimit::ExitLimit(a3, v3, v3, 0, 0, 0);
}

const llvm::SCEV *llvm::ScalarEvolution::getSCEVAtScope(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::Loop *a3)
{
  unint64_t v53 = a2;
  uint64_t v6 = (char *)this + 640;
  int v7 = *((_DWORD *)this + 164);
  unsigned int v8 = a2 >> 4;
  if (v7)
  {
    uint64_t v9 = *((void *)this + 80);
    int v10 = v7 - 1;
    unsigned int v11 = v10 & (v8 ^ (a2 >> 9));
    int v12 = (const llvm::SCEV **)(v9 + 56 * v11);
    uint64_t v13 = *v12;
    if (*v12 == a2) {
      goto LABEL_16;
    }
    unsigned int v14 = 0;
    int v15 = 1;
    while (v13 != (const llvm::SCEV *)-4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v13 == (const llvm::SCEV *)-8192;
      }
      if (v16) {
        unsigned int v14 = v12;
      }
      unsigned int v17 = v11 + v15++;
      unsigned int v11 = v17 & v10;
      int v12 = (const llvm::SCEV **)(v9 + 56 * v11);
      uint64_t v13 = *v12;
      if (*v12 == a2) {
        goto LABEL_16;
      }
    }
    if (v14) {
      uint64_t v18 = v14;
    }
    else {
      uint64_t v18 = v12;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  int v12 = (const llvm::SCEV **)sub_1CC13DF90((uint64_t)this + 640, (uint64_t *)&v53, v18);
  *int v12 = a2;
  v12[1] = (const llvm::SCEV *)(v12 + 3);
  v12[2] = (const llvm::SCEV *)0x200000000;
LABEL_16:
  uint64_t v19 = v12[1];
  uint64_t v20 = *((unsigned int *)v12 + 4);
  if (!v20)
  {
LABEL_20:
    if (v20 >= *((_DWORD *)v12 + 5)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v19 + 2 * v20) = a3;
    *((void *)v19 + 2 * v20 + 1) = 0;
    *((_DWORD *)v12 + 4) = v20 + 1;
    int v23 = llvm::ScalarEvolution::computeSCEVAtScope(this, a2, a3);
    int v52 = v23;
    int v24 = *((_DWORD *)this + 164);
    if (v24)
    {
      uint64_t v25 = *((void *)this + 80);
      int v26 = v24 - 1;
      unsigned int v27 = v26 & (v8 ^ (a2 >> 9));
      unsigned int v28 = (const llvm::SCEV **)(v25 + 56 * v27);
      uint64_t v29 = *v28;
      if (*v28 == a2)
      {
LABEL_36:
        uint64_t v35 = v28[1];
        uint64_t v36 = 16 * *((unsigned int *)v28 + 4);
        do
        {
          if (!v36) {
            return v23;
          }
          uint64_t v37 = *(const llvm::Loop **)((char *)v35 + v36 - 16);
          v36 -= 16;
        }
        while (v37 != a3);
        *(void *)((char *)v35 + v36 + 8) = v23;
        if (!*((_WORD *)v23 + 12)) {
          return v23;
        }
        int v38 = *((_DWORD *)this + 170);
        if (v38)
        {
          uint64_t v39 = *((void *)this + 83);
          int v40 = v38 - 1;
          unsigned int v41 = v40 & ((v23 >> 4) ^ (v23 >> 9));
          unsigned int v42 = (void *)(v39 + 56 * v41);
          uint64_t v43 = *v42;
          if (v23 == (const llvm::SCEV *)*v42)
          {
LABEL_55:
            unsigned int v49 = *((_DWORD *)v42 + 4);
            if (v49 >= *((_DWORD *)v42 + 5)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v50 = (void *)(v42[1] + 16 * v49);
            *uint64_t v50 = a3;
            v50[1] = a2;
            ++*((_DWORD *)v42 + 4);
            return v23;
          }
          int v44 = 0;
          int v45 = 1;
          while (v43 != -4096)
          {
            if (v44) {
              BOOL v46 = 0;
            }
            else {
              BOOL v46 = v43 == -8192;
            }
            if (v46) {
              int v44 = v42;
            }
            unsigned int v47 = v41 + v45++;
            unsigned int v41 = v47 & v40;
            unsigned int v42 = (void *)(v39 + 56 * v41);
            uint64_t v43 = *v42;
            if (v23 == (const llvm::SCEV *)*v42) {
              goto LABEL_55;
            }
          }
          if (v44) {
            uint64_t v48 = v44;
          }
          else {
            uint64_t v48 = v42;
          }
        }
        else
        {
          uint64_t v48 = 0;
        }
        unsigned int v42 = sub_1CC13DF90((uint64_t)this + 664, (uint64_t *)&v52, v48);
        *unsigned int v42 = v23;
        v42[1] = v42 + 3;
        v42[2] = 0x200000000;
        goto LABEL_55;
      }
      unsigned int v30 = 0;
      int v31 = 1;
      while (v29 != (const llvm::SCEV *)-4096)
      {
        if (v30) {
          BOOL v32 = 0;
        }
        else {
          BOOL v32 = v29 == (const llvm::SCEV *)-8192;
        }
        if (v32) {
          unsigned int v30 = v28;
        }
        unsigned int v33 = v27 + v31++;
        unsigned int v27 = v33 & v26;
        unsigned int v28 = (const llvm::SCEV **)(v25 + 56 * v27);
        uint64_t v29 = *v28;
        if (*v28 == a2) {
          goto LABEL_36;
        }
      }
      if (v30) {
        int v34 = v30;
      }
      else {
        int v34 = v28;
      }
    }
    else
    {
      int v34 = 0;
    }
    unsigned int v28 = (const llvm::SCEV **)sub_1CC13DF90((uint64_t)v6, (uint64_t *)&v53, v34);
    llvm::SCEV *v28 = a2;
    v28[1] = (const llvm::SCEV *)(v28 + 3);
    _OWORD v28[2] = (const llvm::SCEV *)0x200000000;
    goto LABEL_36;
  }
  uint64_t v21 = (uint64_t)v19 + 8;
  uint64_t v22 = 16 * v20;
  while (*(const llvm::Loop **)(v21 - 8) != a3)
  {
    v21 += 16;
    v22 -= 16;
    if (!v22) {
      goto LABEL_20;
    }
  }
  if (*(void *)v21) {
    return *(const llvm::SCEV **)v21;
  }
  else {
    return a2;
  }
}

uint64_t llvm::ScalarEvolution::SimplifyICmpOperands(llvm::ScalarEvolution *a1, unsigned int *a2, const llvm::SCEV **a3, uint64_t *a4, unsigned int a5, uint64_t a6)
{
  if (a5 > 2) {
    return 0;
  }
  uint64_t v328 = v6;
  uint64_t v329 = v7;
  uint64_t v15 = (uint64_t)*a3;
  if (*a3) {
    BOOL v16 = *((unsigned __int16 *)*a3 + 12) == 0;
  }
  else {
    BOOL v16 = 0;
  }
  char v17 = v16;
  uint64_t v18 = *a4;
  if (v16)
  {
    if (v18) {
      BOOL v19 = *(unsigned __int16 *)(v18 + 24) == 0;
    }
    else {
      BOOL v19 = 0;
    }
    if (v19)
    {
      ICmp = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)*(unsigned __int16 *)a2, *(llvm::Type **)(v15 + 32), *(llvm::Constant **)(v18 + 32), 0, a5);
      unsigned int v26 = *((unsigned __int8 *)ICmp + 16);
      if (ICmp) {
        BOOL v27 = v26 == 16;
      }
      else {
        BOOL v27 = 0;
      }
      if (v27)
      {
        uint64_t v28 = *((unsigned int *)ICmp + 8);
        if (v28 > 0x40)
        {
          int v244 = 0;
          int64_t v245 = (unint64_t)(v28 + 63) >> 6;
          do
          {
            BOOL v46 = v245-- < 1;
            if (v46) {
              break;
            }
            unint64_t v246 = *(void *)(ICmp[3] + 8 * v245);
            v244 += __clz(v246);
          }
          while (!v246);
          int v247 = v28 | 0xFFFFFFC0;
          if ((v28 & 0x3F) == 0) {
            int v247 = 0;
          }
          BOOL v29 = v244 + v247 == v28;
        }
        else
        {
          BOOL v29 = ICmp[3] == 0;
        }
        int v30 = v29;
      }
      else
      {
        if (ICmp) {
          BOOL v45 = v26 == 17;
        }
        else {
          BOOL v45 = 0;
        }
        if (v45)
        {
          int v30 = sub_1CB844168((uint64_t)ICmp, 0.0);
        }
        else
        {
          BOOL v46 = v26 > 0x14;
          unsigned int v47 = (0x1C2000u >> v26) & 1;
          if (v46) {
            int v30 = 0;
          }
          else {
            int v30 = v47;
          }
        }
      }
      int v31 = ***(uint64_t ****)a1;
      uint64_t v32 = *v31;
      unsigned int v33 = *(llvm::ConstantInt **)(*v31 + 1568);
      if (!v33)
      {
        int v71 = *(llvm::ConstantInt **)(v32 + 1888);
        unsigned int v323 = *(_DWORD *)(v32 + 1896) >> 8;
        if (v323 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&__s1);
        }
        __s1 = 0;
        unsigned int v33 = (llvm::ConstantInt *)llvm::ConstantInt::get(v71, (llvm::LLVMContext *)&__s1, v25);
        if (v323 >= 0x41 && __s1) {
          MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
        }
        *(void *)(v32 + 1568) = v33;
      }
      unint64_t Constant = llvm::ScalarEvolution::getConstant(a1, v33);
      *a4 = Constant;
      *a3 = (const llvm::SCEV *)Constant;
      if (!v30) {
        goto LABEL_149;
      }
LABEL_161:
      int v88 = 33;
      goto LABEL_162;
    }
    *a3 = (const llvm::SCEV *)v18;
    *a4 = v15;
    *a2 = dword_1CFAC4570[*a2];
  }
  else
  {
    uint64_t v15 = *a4;
  }
  if (v15) {
    BOOL v20 = *(unsigned __int16 *)(v15 + 24) == 7;
  }
  else {
    BOOL v20 = 0;
  }
  if (v20)
  {
    uint64_t v21 = *(const llvm::BasicBlock ****)(v15 + 48);
    if (llvm::ScalarEvolution::getLoopDisposition(a1, *a3, (const llvm::Loop *)v21) == 1)
    {
      int BlockDisposition = llvm::ScalarEvolution::getBlockDisposition(a1, *a3, *v21[4]);
      uint64_t v15 = *a4;
      if (BlockDisposition == 2)
      {
        int v23 = *a3;
        *a3 = (const llvm::SCEV *)v15;
        *a4 = (uint64_t)v23;
        *a2 = dword_1CFAC4570[*a2];
        char v17 = 1;
        uint64_t v15 = (uint64_t)v23;
      }
    }
    else
    {
      uint64_t v15 = *a4;
    }
  }
  if (v15 && !*(_WORD *)(v15 + 24))
  {
    uint64_t v35 = *(void *)(v15 + 32);
    uint64_t v36 = (void **)(v35 + 24);
    uint64_t v37 = *a2;
    if ((v37 & 0xFFFFFFFE) == 0x20)
    {
LABEL_41:
      switch((int)v37)
      {
        case ' ':
        case '!':
          uint64_t v38 = *(unsigned int *)(v35 + 32);
          if (v38 > 0x40)
          {
            int v53 = 0;
            int64_t v54 = (unint64_t)(v38 + 63) >> 6;
            do
            {
              BOOL v46 = v54-- < 1;
              if (v46) {
                break;
              }
              unint64_t v55 = *((void *)*v36 + v54);
              v53 += __clz(v55);
            }
            while (!v55);
            int v56 = v38 | 0xFFFFFFC0;
            if ((v38 & 0x3F) == 0) {
              int v56 = 0;
            }
            if (v53 + v56 != v38) {
              goto LABEL_144;
            }
          }
          else if (*v36)
          {
            goto LABEL_144;
          }
          uint64_t v57 = *a3;
          if (*a3) {
            BOOL v58 = *((unsigned __int16 *)*a3 + 12) == 4;
          }
          else {
            BOOL v58 = 0;
          }
          if (v58)
          {
            int v59 = (void *)*((void *)v57 + 4);
            uint64_t v60 = *v59;
            BOOL v61 = *v59 && *(_WORD *)(*v59 + 24) == 5;
            if (v61
              && *((void *)v57 + 5) == 2
              && *(void *)(v60 + 40) == 2
              && llvm::SCEV::isAllOnesValue(**(llvm::SCEV ***)(v60 + 32)))
            {
              *a4 = v59[1];
              *a3 = *(const llvm::SCEV **)(*(void *)(v60 + 32) + 8);
              goto LABEL_123;
            }
          }
          break;
        case '#':
          *a2 = 34;
          unsigned int v320 = *(_DWORD *)(v35 + 32);
          if (v320 > 0x40) {
            operator new[]();
          }
          unsigned int v319 = *v36;
          llvm::APInt::operator-=((uint64_t)&v319, 1uLL);
          unsigned int v323 = v320;
          __s1 = v319;
          unsigned int v320 = 0;
          uint64_t v63 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)a1, (llvm::LLVMContext *)&__s1, v62);
          *a4 = llvm::ScalarEvolution::getConstant(a1, v63);
          if (v323 >= 0x41 && __s1) {
            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
          if (v320 >= 0x41)
          {
            unint64_t v64 = v319;
            if (v319) {
              goto LABEL_122;
            }
          }
          goto LABEL_123;
        case '%':
          *a2 = 36;
          unsigned int v318 = *(_DWORD *)(v35 + 32);
          if (v318 > 0x40) {
            operator new[]();
          }
          uint64_t v317 = *v36;
          llvm::APInt::operator+=((uint64_t)&v317, 1uLL);
          unsigned int v323 = v318;
          __s1 = v317;
          unsigned int v318 = 0;
          uint64_t v68 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)a1, (llvm::LLVMContext *)&__s1, v67);
          *a4 = llvm::ScalarEvolution::getConstant(a1, v68);
          if (v323 >= 0x41 && __s1) {
            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
          if (v318 < 0x41) {
            goto LABEL_123;
          }
          unint64_t v64 = v317;
          if (!v317) {
            goto LABEL_123;
          }
          goto LABEL_122;
        case '\'':
          *a2 = 38;
          unsigned int v316 = *(_DWORD *)(v35 + 32);
          if (v316 > 0x40) {
            operator new[]();
          }
          unsigned int v315 = *v36;
          llvm::APInt::operator-=((uint64_t)&v315, 1uLL);
          unsigned int v323 = v316;
          __s1 = v315;
          unsigned int v316 = 0;
          uint64_t v70 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)a1, (llvm::LLVMContext *)&__s1, v69);
          *a4 = llvm::ScalarEvolution::getConstant(a1, v70);
          if (v323 >= 0x41 && __s1) {
            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
          if (v316 >= 0x41)
          {
            unint64_t v64 = v315;
            if (v315) {
              goto LABEL_122;
            }
          }
          goto LABEL_123;
        case ')':
          *a2 = 40;
          unsigned int v314 = *(_DWORD *)(v35 + 32);
          if (v314 > 0x40) {
            operator new[]();
          }
          unint64_t v313 = *v36;
          llvm::APInt::operator+=((uint64_t)&v313, 1uLL);
          unsigned int v323 = v314;
          __s1 = v313;
          unsigned int v314 = 0;
          unsigned int v66 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)a1, (llvm::LLVMContext *)&__s1, v65);
          *a4 = llvm::ScalarEvolution::getConstant(a1, v66);
          if (v323 >= 0x41 && __s1) {
            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
          if (v314 < 0x41) {
            goto LABEL_123;
          }
          unint64_t v64 = v313;
          if (!v313) {
            goto LABEL_123;
          }
LABEL_122:
          MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
LABEL_123:
          char v17 = 1;
          goto LABEL_144;
        default:
          goto LABEL_144;
      }
      goto LABEL_144;
    }
    unsigned int v312 = a6;
    llvm::ConstantRange::makeExactICmpRegion(v37, v35 + 24, (uint64_t)&__s1);
    unsigned int v40 = v323;
    if (v323 > 0x40)
    {
      uint64_t v72 = __s1;
      unint64_t v311 = v323 + 63;
      if (memcmp(__s1, __s2, (v311 >> 3) & 0x3FFFFFF8)) {
        goto LABEL_48;
      }
      if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__s1) == v40)
      {
LABEL_65:
        uint64_t v48 = ***(uint64_t ****)a1;
        uint64_t v49 = *v48;
        uint64_t v50 = *(llvm::ConstantInt **)(*v48 + 1568);
        if (!v50)
        {
          int v243 = *(llvm::ConstantInt **)(v49 + 1888);
          unsigned int v327 = *(_DWORD *)(v49 + 1896) >> 8;
          if (v327 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v326);
          }
          uint64_t v326 = 0;
          uint64_t v50 = (llvm::ConstantInt *)llvm::ConstantInt::get(v243, (llvm::LLVMContext *)&v326, v39);
          if (v327 >= 0x41 && v326) {
            MEMORY[0x1D25D9CB0](v326, 0x1000C8000313F17);
          }
          *(void *)(v49 + 1568) = v50;
        }
        unint64_t v51 = llvm::ScalarEvolution::getConstant(a1, v50);
        int v44 = 0;
        char v43 = 0;
        *a4 = v51;
        *a3 = (const llvm::SCEV *)v51;
        int v52 = 32;
LABEL_138:
        *a2 = v52;
LABEL_139:
        if (v325 >= 0x41 && __s2) {
          MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
        }
        if (v323 >= 0x41 && __s1) {
          MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
        }
        if (!v44) {
          return 1;
        }
        if (v43)
        {
          a6 = v312;
          goto LABEL_144;
        }
        LODWORD(v37) = *a2;
        a6 = v312;
        goto LABEL_41;
      }
      int v73 = 0;
      uint64_t v74 = v311 >> 6;
      do
      {
        BOOL v46 = v74-- < 1;
        if (v46) {
          break;
        }
        unint64_t v75 = v72[v74];
        v73 += __clz(v75);
      }
      while (!v75);
      unsigned int v76 = v40 | 0xFFFFFFC0;
      if ((v40 & 0x3F) == 0) {
        unsigned int v76 = 0;
      }
      if (v73 + v76 != v40)
      {
LABEL_48:
        unsigned int v327 = 1;
        uint64_t v326 = 0;
        unsigned int v321 = 0;
        if (llvm::ConstantRange::getEquivalentICmp((llvm::ConstantRange *)&__s1, (int *)&v321, (unsigned int *)&v326)
          && (v321 & 0xFFFFFFFE) == 0x20)
        {
          *a2 = v321;
          unsigned int v42 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)a1, (llvm::LLVMContext *)&v326, v41);
          *a4 = llvm::ScalarEvolution::getConstant(a1, v42);
          char v17 = 1;
          char v43 = 1;
        }
        else
        {
          char v43 = 0;
        }
        if (v327 >= 0x41 && v326) {
          MEMORY[0x1D25D9CB0](v326, 0x1000C8000313F17);
        }
        int v44 = 1;
        goto LABEL_139;
      }
    }
    else
    {
      if (__s1 == __s2 && (!v323 || __s1 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v323))) {
        goto LABEL_65;
      }
      if ((unint64_t)__s2 | (unint64_t)__s1) {
        goto LABEL_48;
      }
    }
    int v77 = ***(uint64_t ****)a1;
    uint64_t v78 = *v77;
    unsigned int v79 = *(llvm::ConstantInt **)(*v77 + 1568);
    if (!v79)
    {
      uint64_t v242 = *(llvm::ConstantInt **)(v78 + 1888);
      unsigned int v327 = *(_DWORD *)(v78 + 1896) >> 8;
      if (v327 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v326);
      }
      uint64_t v326 = 0;
      unsigned int v79 = (llvm::ConstantInt *)llvm::ConstantInt::get(v242, (llvm::LLVMContext *)&v326, v39);
      if (v327 >= 0x41 && v326) {
        MEMORY[0x1D25D9CB0](v326, 0x1000C8000313F17);
      }
      *(void *)(v78 + 1568) = v79;
    }
    unint64_t v80 = llvm::ScalarEvolution::getConstant(a1, v79);
    int v44 = 0;
    char v43 = 0;
    *a4 = v80;
    *a3 = (const llvm::SCEV *)v80;
    int v52 = 33;
    goto LABEL_138;
  }
LABEL_144:
  int v81 = sub_1CC11DF8C((uint64_t)*a3, *a4);
  unsigned int v83 = *a2;
  if (!v81)
  {
    switch(v83)
    {
      case '#':
        if (a6) {
          goto LABEL_154;
        }
        uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(a1, *a4, 0, 0);
        llvm::ConstantRange::getUnsignedMin(RangeRef, (uint64_t)&__s1);
        unsigned int v90 = v323;
        if (v323 > 0x40)
        {
          int v113 = 0;
          int64_t v114 = ((unint64_t)v323 + 63) >> 6;
          do
          {
            BOOL v46 = v114-- < 1;
            if (v46) {
              break;
            }
            unint64_t v115 = *((void *)__s1 + v114);
            v113 += __clz(v115);
          }
          while (!v115);
          unsigned int v116 = v323 | 0xFFFFFFC0;
          if ((v323 & 0x3F) == 0) {
            unsigned int v116 = 0;
          }
          int v117 = v113 + v116;
          if (__s1) {
            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
          if (v117 != v90) {
            goto LABEL_154;
          }
        }
        else if (__s1)
        {
LABEL_154:
          unint64_t v91 = a4;
          while (2)
          {
            uint64_t v92 = *v91;
            switch(*(_WORD *)(v92 + 24))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                long long v111 = (uint64_t ***)(v92 + 40);
                break;
              case 4:
                long long v111 = (uint64_t ***)(v92 + 48);
                break;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                unint64_t v91 = *(uint64_t **)(v92 + 32);
                continue;
              case 6:
                unint64_t v91 = (uint64_t *)(v92 + 40);
                continue;
              case 0xE:
                long long v111 = *(uint64_t ****)(v92 - 8);
                break;
              default:
                long long v111 = *(uint64_t ****)(v92 + 32);
                break;
            }
            break;
          }
          int v121 = *v111;
          unsigned int v122 = *((_DWORD *)*v111 + 2);
          if (v122 == 13)
          {
            uint64_t v134 = a6;
          }
          else
          {
            uint64_t v123 = *(void *)(*(void *)a1 + 40);
            if ((v122 & 0xFE) == 0x12) {
              unsigned int v122 = *(_DWORD *)(*v121[2] + 8);
            }
            uint64_t v124 = *(void *)(v123 + 504);
            if (v122 < 0x100) {
              goto LABEL_221;
            }
            unsigned int v125 = v122 >> 8;
            unint64_t v126 = *(unsigned int *)(v123 + 512);
            uint64_t v127 = v124;
            if (v126)
            {
              uint64_t v127 = v124;
              unint64_t v128 = v126;
              do
              {
                unint64_t v129 = v128 >> 1;
                uint64_t v130 = v127 + 16 * (v128 >> 1);
                unsigned int v131 = *(_DWORD *)(v130 + 8);
                uint64_t v132 = v130 + 16;
                v128 += ~(v128 >> 1);
                if (v131 < v125) {
                  uint64_t v127 = v132;
                }
                else {
                  unint64_t v128 = v129;
                }
              }
              while (v128);
            }
            if (v127 == v124 + 16 * v126 || *(_DWORD *)(v127 + 8) != v125) {
LABEL_221:
            }
              uint64_t v127 = v124;
            unsigned int v133 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v121, (llvm::LLVMContext *)*(unsigned int *)(v127 + 12));
            uint64_t v134 = a6;
            if ((v121[1] & 0xFE) == 0x12)
            {
              int v273 = (llvm::Type *)*((unsigned int *)v121 + 8);
              if (*((_DWORD *)v121 + 2) == 19) {
                llvm::ScalableVectorType::get(v133, v273);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v133, v273);
              }
            }
            int v121 = v133;
          }
          uint64_t v135 = (llvm::ConstantInt *)*v121;
          unsigned int v136 = *((_DWORD *)v121 + 2);
          unsigned int v323 = v136 >> 8;
          if (v136 >> 8 > 0x40) {
            operator new[]();
          }
          if (v136 <= 0xFF) {
            unsigned int v137 = 0;
          }
          else {
            unsigned int v137 = (void *)(0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v136) + 63));
          }
          __s1 = v137;
          unsigned int v138 = (llvm::ConstantInt *)llvm::ConstantInt::get(v135, (llvm::LLVMContext *)&__s1, v82);
          if (v323 >= 0x41 && __s1) {
            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
          uint64_t v139 = 0;
          int v140 = 34;
          goto LABEL_522;
        }
        unsigned int v118 = (char **)llvm::ScalarEvolution::getRangeRef(a1, *a3, 0, 0);
        llvm::ConstantRange::getUnsignedMax(v118, (uint64_t)&__s1);
        unsigned int v120 = v323;
        if (!v323) {
          goto LABEL_276;
        }
        if (v323 > 0x40)
        {
          int v169 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__s1);
          if (__s1) {
            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
          if (v169 == v120) {
            goto LABEL_276;
          }
        }
        else if (__s1 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v323))
        {
          goto LABEL_276;
        }
        unsigned int v170 = a4;
        while (2)
        {
          uint64_t v171 = *v170;
          switch(*(_WORD *)(v171 + 24))
          {
            case 1:
            case 2:
            case 3:
            case 0xD:
              unsigned int v223 = (uint64_t ***)(v171 + 40);
              break;
            case 4:
              unsigned int v223 = (uint64_t ***)(v171 + 48);
              break;
            case 5:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
              unsigned int v170 = *(uint64_t **)(v171 + 32);
              continue;
            case 6:
              unsigned int v170 = (uint64_t *)(v171 + 40);
              continue;
            case 0xE:
              unsigned int v223 = *(uint64_t ****)(v171 - 8);
              break;
            default:
              unsigned int v223 = *(uint64_t ****)(v171 + 32);
              break;
          }
          break;
        }
        int64_t v225 = *v223;
        unsigned int v226 = *((_DWORD *)*v223 + 2);
        if (v226 == 13)
        {
          uint64_t v134 = a6;
        }
        else
        {
          uint64_t v227 = *(void *)(*(void *)a1 + 40);
          if ((v226 & 0xFE) == 0x12) {
            unsigned int v226 = *(_DWORD *)(*v225[2] + 8);
          }
          uint64_t v228 = *(void *)(v227 + 504);
          if (v226 < 0x100) {
            goto LABEL_380;
          }
          unsigned int v229 = v226 >> 8;
          unint64_t v230 = *(unsigned int *)(v227 + 512);
          uint64_t v231 = v228;
          if (v230)
          {
            uint64_t v231 = v228;
            unint64_t v232 = v230;
            do
            {
              unint64_t v233 = v232 >> 1;
              uint64_t v234 = v231 + 16 * (v232 >> 1);
              unsigned int v235 = *(_DWORD *)(v234 + 8);
              uint64_t v236 = v234 + 16;
              v232 += ~(v232 >> 1);
              if (v235 < v229) {
                uint64_t v231 = v236;
              }
              else {
                unint64_t v232 = v233;
              }
            }
            while (v232);
          }
          if (v231 == v228 + 16 * v230 || *(_DWORD *)(v231 + 8) != v229) {
LABEL_380:
          }
            uint64_t v231 = v228;
          uint64_t v237 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v225, (llvm::LLVMContext *)*(unsigned int *)(v231 + 12));
          uint64_t v134 = a6;
          if ((v225[1] & 0xFE) == 0x12)
          {
            char v308 = (llvm::Type *)*((unsigned int *)v225 + 8);
            if (*((_DWORD *)v225 + 2) == 19) {
              llvm::ScalableVectorType::get(v237, v308);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v237, v308);
            }
          }
          int64_t v225 = v237;
        }
        unsigned int v238 = (llvm::ConstantInt *)*v225;
        unsigned int v239 = *((_DWORD *)v225 + 2);
        unsigned int v323 = v239 >> 8;
        if (v239 >> 8 > 0x40) {
          operator new[]();
        }
        if (v239 <= 0xFF) {
          LOBYTE(v240) = 0;
        }
        else {
          unint64_t v240 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v239) + 63);
        }
        __s1 = (void *)(v240 & 1);
        unsigned int v138 = (llvm::ConstantInt *)llvm::ConstantInt::get(v238, (llvm::LLVMContext *)&__s1, v119);
        if (v323 >= 0x41 && __s1) {
          MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
        }
        int v140 = 34;
        uint64_t v139 = 2;
        goto LABEL_390;
      case '%':
        if (a6) {
          goto LABEL_174;
        }
        long long v109 = (char **)llvm::ScalarEvolution::getRangeRef(a1, *a4, 0, 0);
        llvm::ConstantRange::getUnsignedMax(v109, (uint64_t)&__s1);
        unsigned int v110 = v323;
        if (!v323) {
          goto LABEL_234;
        }
        if (v323 > 0x40)
        {
          int v141 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__s1);
          if (__s1) {
            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
          if (v141 == v110) {
            goto LABEL_234;
          }
        }
        else if (__s1 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v323))
        {
LABEL_234:
          uint64_t v142 = llvm::ScalarEvolution::getRangeRef(a1, *a3, 0, 0);
          llvm::ConstantRange::getUnsignedMin(v142, (uint64_t)&__s1);
          unsigned int v144 = v323;
          if (v323 > 0x40)
          {
            int v145 = 0;
            int64_t v146 = ((unint64_t)v323 + 63) >> 6;
            do
            {
              BOOL v46 = v146-- < 1;
              if (v46) {
                break;
              }
              unint64_t v147 = *((void *)__s1 + v146);
              v145 += __clz(v147);
            }
            while (!v147);
            unsigned int v148 = v323 | 0xFFFFFFC0;
            if ((v323 & 0x3F) == 0) {
              unsigned int v148 = 0;
            }
            int v149 = v145 + v148;
            if (__s1) {
              MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
            }
            if (v149 == v144) {
              goto LABEL_276;
            }
          }
          else if (!__s1)
          {
            goto LABEL_276;
          }
          unsigned int v150 = a4;
          while (2)
          {
            uint64_t v151 = *v150;
            switch(*(_WORD *)(v151 + 24))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                uint64_t v168 = (uint64_t ***)(v151 + 40);
                break;
              case 4:
                uint64_t v168 = (uint64_t ***)(v151 + 48);
                break;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                unsigned int v150 = *(uint64_t **)(v151 + 32);
                continue;
              case 6:
                unsigned int v150 = (uint64_t *)(v151 + 40);
                continue;
              case 0xE:
                uint64_t v168 = *(uint64_t ****)(v151 - 8);
                break;
              default:
                uint64_t v168 = *(uint64_t ****)(v151 + 32);
                break;
            }
            break;
          }
          unsigned int v175 = *v168;
          unsigned int v176 = *((_DWORD *)*v168 + 2);
          if (v176 == 13)
          {
            uint64_t v134 = a6;
          }
          else
          {
            uint64_t v177 = *(void *)(*(void *)a1 + 40);
            if ((v176 & 0xFE) == 0x12) {
              unsigned int v176 = *(_DWORD *)(*v175[2] + 8);
            }
            uint64_t v178 = *(void *)(v177 + 504);
            if (v176 < 0x100) {
              goto LABEL_301;
            }
            unsigned int v179 = v176 >> 8;
            unint64_t v180 = *(unsigned int *)(v177 + 512);
            uint64_t v181 = v178;
            if (v180)
            {
              uint64_t v181 = v178;
              unint64_t v182 = v180;
              do
              {
                unint64_t v183 = v182 >> 1;
                uint64_t v184 = v181 + 16 * (v182 >> 1);
                unsigned int v185 = *(_DWORD *)(v184 + 8);
                uint64_t v186 = v184 + 16;
                v182 += ~(v182 >> 1);
                if (v185 < v179) {
                  uint64_t v181 = v186;
                }
                else {
                  unint64_t v182 = v183;
                }
              }
              while (v182);
            }
            if (v181 == v178 + 16 * v180 || *(_DWORD *)(v181 + 8) != v179) {
LABEL_301:
            }
              uint64_t v181 = v178;
            char v187 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v175, (llvm::LLVMContext *)*(unsigned int *)(v181 + 12));
            uint64_t v134 = a6;
            if ((v175[1] & 0xFE) == 0x12)
            {
              unsigned int v304 = (llvm::Type *)*((unsigned int *)v175 + 8);
              if (*((_DWORD *)v175 + 2) == 19) {
                llvm::ScalableVectorType::get(v187, v304);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v187, v304);
              }
            }
            unsigned int v175 = v187;
          }
          int v188 = (llvm::ConstantInt *)*v175;
          unsigned int v189 = *((_DWORD *)v175 + 2);
          unsigned int v323 = v189 >> 8;
          if (v189 >> 8 > 0x40) {
            operator new[]();
          }
          if (v189 <= 0xFF) {
            uint64_t v190 = 0;
          }
          else {
            uint64_t v190 = (void *)(0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v189) + 63));
          }
          __s1 = v190;
          unsigned int v138 = (llvm::ConstantInt *)llvm::ConstantInt::get(v188, (llvm::LLVMContext *)&__s1, v143);
          if (v323 >= 0x41 && __s1) {
            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
          uint64_t v139 = 0;
          int v140 = 36;
LABEL_390:
          unint64_t v241 = a3;
LABEL_523:
          unint64_t v302 = llvm::ScalarEvolution::getConstant(a1, v138);
          *unint64_t v241 = sub_1CBFD7D6C(a1, v302, *v241, v139, 0);
          *a2 = v140;
          a6 = v134;
          return llvm::ScalarEvolution::SimplifyICmpOperands(a1, a2, a3, a4, a5 + 1, a6);
        }
LABEL_174:
        uint64_t v102 = a4;
        while (2)
        {
          uint64_t v103 = *v102;
          switch(*(_WORD *)(v103 + 24))
          {
            case 1:
            case 2:
            case 3:
            case 0xD:
              unint64_t v112 = (uint64_t ***)(v103 + 40);
              break;
            case 4:
              unint64_t v112 = (uint64_t ***)(v103 + 48);
              break;
            case 5:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
              uint64_t v102 = *(uint64_t **)(v103 + 32);
              continue;
            case 6:
              uint64_t v102 = (uint64_t *)(v103 + 40);
              continue;
            case 0xE:
              unint64_t v112 = *(uint64_t ****)(v103 - 8);
              break;
            default:
              unint64_t v112 = *(uint64_t ****)(v103 + 32);
              break;
          }
          break;
        }
        unsigned int v152 = *v112;
        unsigned int v153 = *((_DWORD *)*v112 + 2);
        if (v153 == 13)
        {
          uint64_t v134 = a6;
        }
        else
        {
          uint64_t v154 = *(void *)(*(void *)a1 + 40);
          if ((v153 & 0xFE) == 0x12) {
            unsigned int v153 = *(_DWORD *)(*v152[2] + 8);
          }
          uint64_t v155 = *(void *)(v154 + 504);
          if (v153 < 0x100) {
            goto LABEL_262;
          }
          unsigned int v156 = v153 >> 8;
          unint64_t v157 = *(unsigned int *)(v154 + 512);
          uint64_t v158 = v155;
          if (v157)
          {
            uint64_t v158 = v155;
            unint64_t v159 = v157;
            do
            {
              unint64_t v160 = v159 >> 1;
              uint64_t v161 = v158 + 16 * (v159 >> 1);
              unsigned int v162 = *(_DWORD *)(v161 + 8);
              uint64_t v163 = v161 + 16;
              v159 += ~(v159 >> 1);
              if (v162 < v156) {
                uint64_t v158 = v163;
              }
              else {
                unint64_t v159 = v160;
              }
            }
            while (v159);
          }
          if (v158 == v155 + 16 * v157 || *(_DWORD *)(v158 + 8) != v156) {
LABEL_262:
          }
            uint64_t v158 = v155;
          uint64_t v164 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v152, (llvm::LLVMContext *)*(unsigned int *)(v158 + 12));
          uint64_t v134 = a6;
          if ((v152[1] & 0xFE) == 0x12)
          {
            uint64_t v278 = (llvm::Type *)*((unsigned int *)v152 + 8);
            if (*((_DWORD *)v152 + 2) == 19) {
              llvm::ScalableVectorType::get(v164, v278);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v164, v278);
            }
          }
          unsigned int v152 = v164;
        }
        unsigned int v165 = (llvm::ConstantInt *)*v152;
        unsigned int v166 = *((_DWORD *)v152 + 2);
        unsigned int v323 = v166 >> 8;
        if (v166 >> 8 > 0x40) {
          operator new[]();
        }
        if (v166 <= 0xFF) {
          LOBYTE(v167) = 0;
        }
        else {
          unint64_t v167 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v166) + 63);
        }
        __s1 = (void *)(v167 & 1);
        unsigned int v138 = (llvm::ConstantInt *)llvm::ConstantInt::get(v165, (llvm::LLVMContext *)&__s1, v82);
        if (v323 >= 0x41 && __s1) {
          MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
        }
        int v140 = 36;
        uint64_t v139 = 2;
        goto LABEL_522;
      case '\'':
        if (a6) {
          goto LABEL_426;
        }
        uint64_t v97 = llvm::ScalarEvolution::getRangeRef(a1, *a4, 1, 0);
        llvm::ConstantRange::getSignedMin(v97, (uint64_t)&__s1);
        if (v323 >= 0x41)
        {
          uint64_t v248 = a6;
          unsigned int v249 = v323 - 1;
          unsigned int v250 = __s1;
          if ((*((void *)__s1 + ((v323 - 1) >> 6)) >> (v323 - 1)))
          {
            int v309 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&__s1);
            MEMORY[0x1D25D9CB0](v250, 0x1000C8000313F17);
            BOOL v16 = v309 == v249;
            a6 = v248;
            if (v16) {
              goto LABEL_167;
            }
          }
          else
          {
            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
        }
        else if (__s1 == (void *)(1 << (v323 - 1)))
        {
LABEL_167:
          uint64_t v98 = (_DWORD *)llvm::ScalarEvolution::getRangeRef(a1, *a3, 1, 0);
          llvm::ConstantRange::getSignedMax(v98, (uint64_t)&__s1);
          if (v323 >= 0x41)
          {
            uint64_t v279 = a6;
            unsigned int v280 = v323 - 1;
            unsigned int v281 = __s1;
            if ((*((void *)__s1 + ((v323 - 1) >> 6)) >> (v323 - 1)))
            {
              MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
            }
            else
            {
              int v305 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__s1);
              MEMORY[0x1D25D9CB0](v281, 0x1000C8000313F17);
              BOOL v16 = v305 == v280;
              a6 = v279;
              if (v16) {
                goto LABEL_276;
              }
            }
          }
          else if (__s1 == (void *)~(-1 << (v323 - 1)))
          {
            goto LABEL_276;
          }
          int v100 = a4;
          while (2)
          {
            uint64_t v101 = *v100;
            switch(*(_WORD *)(v101 + 24))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                uint64_t v174 = (uint64_t ***)(v101 + 40);
                break;
              case 4:
                uint64_t v174 = (uint64_t ***)(v101 + 48);
                break;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                int v100 = *(uint64_t **)(v101 + 32);
                continue;
              case 6:
                int v100 = (uint64_t *)(v101 + 40);
                continue;
              case 0xE:
                uint64_t v174 = *(uint64_t ****)(v101 - 8);
                break;
              default:
                uint64_t v174 = *(uint64_t ****)(v101 + 32);
                break;
            }
            break;
          }
          unsigned int v207 = *v174;
          unsigned int v208 = *((_DWORD *)*v174 + 2);
          if (v208 == 13)
          {
            uint64_t v134 = a6;
          }
          else
          {
            uint64_t v209 = *(void *)(*(void *)a1 + 40);
            if ((v208 & 0xFE) == 0x12) {
              unsigned int v208 = *(_DWORD *)(*v207[2] + 8);
            }
            uint64_t v210 = *(void *)(v209 + 504);
            if (v208 < 0x100) {
              goto LABEL_349;
            }
            unsigned int v211 = v208 >> 8;
            unint64_t v212 = *(unsigned int *)(v209 + 512);
            uint64_t v213 = v210;
            if (v212)
            {
              uint64_t v213 = v210;
              unint64_t v214 = v212;
              do
              {
                unint64_t v215 = v214 >> 1;
                uint64_t v216 = v213 + 16 * (v214 >> 1);
                unsigned int v217 = *(_DWORD *)(v216 + 8);
                uint64_t v218 = v216 + 16;
                v214 += ~(v214 >> 1);
                if (v217 < v211) {
                  uint64_t v213 = v218;
                }
                else {
                  unint64_t v214 = v215;
                }
              }
              while (v214);
            }
            if (v213 == v210 + 16 * v212 || *(_DWORD *)(v213 + 8) != v211) {
LABEL_349:
            }
              uint64_t v213 = v210;
            unsigned int v219 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v207, (llvm::LLVMContext *)*(unsigned int *)(v213 + 12));
            uint64_t v134 = a6;
            if ((v207[1] & 0xFE) == 0x12)
            {
              unsigned int v307 = (llvm::Type *)*((unsigned int *)v207 + 8);
              if (*((_DWORD *)v207 + 2) == 19) {
                llvm::ScalableVectorType::get(v219, v307);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v219, v307);
              }
            }
            unsigned int v207 = v219;
          }
          unsigned int v220 = (llvm::ConstantInt *)*v207;
          unsigned int v221 = *((_DWORD *)v207 + 2);
          unsigned int v323 = v221 >> 8;
          if (v221 >> 8 > 0x40) {
            operator new[]();
          }
          if (v221 <= 0xFF) {
            LOBYTE(v222) = 0;
          }
          else {
            unint64_t v222 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v221) + 63);
          }
          __s1 = (void *)(v222 & 1);
          unsigned int v138 = (llvm::ConstantInt *)llvm::ConstantInt::get(v220, (llvm::LLVMContext *)&__s1, v99);
          if (v323 >= 0x41 && __s1) {
            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
          int v140 = 38;
LABEL_359:
          uint64_t v139 = 4;
          goto LABEL_390;
        }
LABEL_426:
        uint64_t v251 = a4;
        while (2)
        {
          uint64_t v252 = *v251;
          switch(*(_WORD *)(v252 + 24))
          {
            case 1:
            case 2:
            case 3:
            case 0xD:
              unsigned int v253 = (uint64_t ***)(v252 + 40);
              break;
            case 4:
              unsigned int v253 = (uint64_t ***)(v252 + 48);
              break;
            case 5:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
              uint64_t v251 = *(uint64_t **)(v252 + 32);
              continue;
            case 6:
              uint64_t v251 = (uint64_t *)(v252 + 40);
              continue;
            case 0xE:
              unsigned int v253 = *(uint64_t ****)(v252 - 8);
              break;
            default:
              unsigned int v253 = *(uint64_t ****)(v252 + 32);
              break;
          }
          break;
        }
        unsigned int v254 = *v253;
        unsigned int v255 = *((_DWORD *)*v253 + 2);
        if (v255 == 13)
        {
          uint64_t v134 = a6;
        }
        else
        {
          uint64_t v256 = *(void *)(*(void *)a1 + 40);
          if ((v255 & 0xFE) == 0x12) {
            unsigned int v255 = *(_DWORD *)(*v254[2] + 8);
          }
          uint64_t v257 = *(void *)(v256 + 504);
          if (v255 < 0x100) {
            goto LABEL_445;
          }
          unsigned int v258 = v255 >> 8;
          unint64_t v259 = *(unsigned int *)(v256 + 512);
          uint64_t v260 = v257;
          if (v259)
          {
            uint64_t v260 = v257;
            unint64_t v261 = v259;
            do
            {
              unint64_t v262 = v261 >> 1;
              uint64_t v263 = v260 + 16 * (v261 >> 1);
              unsigned int v264 = *(_DWORD *)(v263 + 8);
              uint64_t v265 = v263 + 16;
              v261 += ~(v261 >> 1);
              if (v264 < v258) {
                uint64_t v260 = v265;
              }
              else {
                unint64_t v261 = v262;
              }
            }
            while (v261);
          }
          if (v260 == v257 + 16 * v259 || *(_DWORD *)(v260 + 8) != v258) {
LABEL_445:
          }
            uint64_t v260 = v257;
          uint64_t v266 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v254, (llvm::LLVMContext *)*(unsigned int *)(v260 + 12));
          uint64_t v134 = a6;
          if ((v254[1] & 0xFE) == 0x12)
          {
            uint64_t v277 = (llvm::Type *)*((unsigned int *)v254 + 8);
            if (*((_DWORD *)v254 + 2) == 19) {
              llvm::ScalableVectorType::get(v266, v277);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v266, v277);
            }
          }
          unsigned int v254 = v266;
        }
        uint64_t v267 = (llvm::ConstantInt *)*v254;
        unsigned int v268 = *((_DWORD *)v254 + 2);
        unsigned int v323 = v268 >> 8;
        if (v268 >> 8 > 0x40) {
          operator new[]();
        }
        if (v268 <= 0xFF) {
          uint64_t v269 = 0;
        }
        else {
          uint64_t v269 = (void *)(0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v268) + 63));
        }
        __s1 = v269;
        unsigned int v138 = (llvm::ConstantInt *)llvm::ConstantInt::get(v267, (llvm::LLVMContext *)&__s1, v82);
        if (v323 >= 0x41 && __s1) {
          MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
        }
        int v140 = 38;
        goto LABEL_521;
      case ')':
        if (a6) {
          goto LABEL_492;
        }
        unsigned int v104 = (_DWORD *)llvm::ScalarEvolution::getRangeRef(a1, *a4, 1, 0);
        llvm::ConstantRange::getSignedMax(v104, (uint64_t)&__s1);
        if (v323 >= 0x41)
        {
          uint64_t v274 = a6;
          unsigned int v275 = v323 - 1;
          unsigned int v276 = __s1;
          if ((*((void *)__s1 + ((v323 - 1) >> 6)) >> (v323 - 1)))
          {
            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
          else
          {
            int v282 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__s1);
            MEMORY[0x1D25D9CB0](v276, 0x1000C8000313F17);
            BOOL v16 = v282 == v275;
            a6 = v274;
            if (v16) {
              goto LABEL_181;
            }
          }
        }
        else if (__s1 == (void *)~(-1 << (v323 - 1)))
        {
LABEL_181:
          uint64_t v105 = llvm::ScalarEvolution::getRangeRef(a1, *a3, 1, 0);
          llvm::ConstantRange::getSignedMin(v105, (uint64_t)&__s1);
          if (v323 >= 0x41)
          {
            uint64_t v270 = a6;
            unsigned int v271 = v323 - 1;
            unsigned int v272 = __s1;
            if ((*((void *)__s1 + ((v323 - 1) >> 6)) >> (v323 - 1)))
            {
              int v310 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&__s1);
              MEMORY[0x1D25D9CB0](v272, 0x1000C8000313F17);
              BOOL v16 = v310 == v271;
              a6 = v270;
              if (v16) {
                goto LABEL_276;
              }
            }
            else
            {
              MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
            }
          }
          else if (__s1 == (void *)(1 << (v323 - 1)))
          {
            goto LABEL_276;
          }
          long long v107 = a4;
          while (2)
          {
            uint64_t v108 = *v107;
            switch(*(_WORD *)(v108 + 24))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                unsigned int v173 = (uint64_t ***)(v108 + 40);
                break;
              case 4:
                unsigned int v173 = (uint64_t ***)(v108 + 48);
                break;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                long long v107 = *(uint64_t **)(v108 + 32);
                continue;
              case 6:
                long long v107 = (uint64_t *)(v108 + 40);
                continue;
              case 0xE:
                unsigned int v173 = *(uint64_t ****)(v108 - 8);
                break;
              default:
                unsigned int v173 = *(uint64_t ****)(v108 + 32);
                break;
            }
            break;
          }
          int v191 = *v173;
          unsigned int v192 = *((_DWORD *)*v173 + 2);
          if (v192 == 13)
          {
            uint64_t v134 = a6;
          }
          else
          {
            uint64_t v193 = *(void *)(*(void *)a1 + 40);
            if ((v192 & 0xFE) == 0x12) {
              unsigned int v192 = *(_DWORD *)(*v191[2] + 8);
            }
            uint64_t v194 = *(void *)(v193 + 504);
            if (v192 < 0x100) {
              goto LABEL_326;
            }
            unsigned int v195 = v192 >> 8;
            unint64_t v196 = *(unsigned int *)(v193 + 512);
            uint64_t v197 = v194;
            if (v196)
            {
              uint64_t v197 = v194;
              unint64_t v198 = v196;
              do
              {
                unint64_t v199 = v198 >> 1;
                uint64_t v200 = v197 + 16 * (v198 >> 1);
                unsigned int v201 = *(_DWORD *)(v200 + 8);
                uint64_t v202 = v200 + 16;
                v198 += ~(v198 >> 1);
                if (v201 < v195) {
                  uint64_t v197 = v202;
                }
                else {
                  unint64_t v198 = v199;
                }
              }
              while (v198);
            }
            if (v197 == v194 + 16 * v196 || *(_DWORD *)(v197 + 8) != v195) {
LABEL_326:
            }
              uint64_t v197 = v194;
            int v203 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v191, (llvm::LLVMContext *)*(unsigned int *)(v197 + 12));
            uint64_t v134 = a6;
            if ((v191[1] & 0xFE) == 0x12)
            {
              int v306 = (llvm::Type *)*((unsigned int *)v191 + 8);
              if (*((_DWORD *)v191 + 2) == 19) {
                llvm::ScalableVectorType::get(v203, v306);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v203, v306);
              }
            }
            int v191 = v203;
          }
          unint64_t v204 = (llvm::ConstantInt *)*v191;
          unsigned int v205 = *((_DWORD *)v191 + 2);
          unsigned int v323 = v205 >> 8;
          if (v205 >> 8 > 0x40) {
            operator new[]();
          }
          if (v205 <= 0xFF) {
            unint64_t v206 = 0;
          }
          else {
            unint64_t v206 = (void *)(0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v205) + 63));
          }
          __s1 = v206;
          unsigned int v138 = (llvm::ConstantInt *)llvm::ConstantInt::get(v204, (llvm::LLVMContext *)&__s1, v106);
          if (v323 >= 0x41 && __s1) {
            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
          int v140 = 40;
          goto LABEL_359;
        }
LABEL_492:
        int v283 = a4;
        while (2)
        {
          uint64_t v284 = *v283;
          switch(*(_WORD *)(v284 + 24))
          {
            case 1:
            case 2:
            case 3:
            case 0xD:
              uint64_t v285 = (uint64_t ***)(v284 + 40);
              break;
            case 4:
              uint64_t v285 = (uint64_t ***)(v284 + 48);
              break;
            case 5:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
              int v283 = *(uint64_t **)(v284 + 32);
              continue;
            case 6:
              int v283 = (uint64_t *)(v284 + 40);
              continue;
            case 0xE:
              uint64_t v285 = *(uint64_t ****)(v284 - 8);
              break;
            default:
              uint64_t v285 = *(uint64_t ****)(v284 + 32);
              break;
          }
          break;
        }
        uint64_t v286 = *v285;
        unsigned int v287 = *((_DWORD *)*v285 + 2);
        if (v287 == 13)
        {
          uint64_t v134 = a6;
        }
        else
        {
          uint64_t v288 = *(void *)(*(void *)a1 + 40);
          if ((v287 & 0xFE) == 0x12) {
            unsigned int v287 = *(_DWORD *)(*v286[2] + 8);
          }
          uint64_t v289 = *(void *)(v288 + 504);
          if (v287 < 0x100) {
            goto LABEL_511;
          }
          unsigned int v290 = v287 >> 8;
          unint64_t v291 = *(unsigned int *)(v288 + 512);
          uint64_t v292 = v289;
          if (v291)
          {
            uint64_t v292 = v289;
            unint64_t v293 = v291;
            do
            {
              unint64_t v294 = v293 >> 1;
              uint64_t v295 = v292 + 16 * (v293 >> 1);
              unsigned int v296 = *(_DWORD *)(v295 + 8);
              uint64_t v297 = v295 + 16;
              v293 += ~(v293 >> 1);
              if (v296 < v290) {
                uint64_t v292 = v297;
              }
              else {
                unint64_t v293 = v294;
              }
            }
            while (v293);
          }
          if (v292 == v289 + 16 * v291 || *(_DWORD *)(v292 + 8) != v290) {
LABEL_511:
          }
            uint64_t v292 = v289;
          unint64_t v298 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v286, (llvm::LLVMContext *)*(unsigned int *)(v292 + 12));
          uint64_t v134 = a6;
          if ((v286[1] & 0xFE) == 0x12)
          {
            unsigned int v303 = (llvm::Type *)*((unsigned int *)v286 + 8);
            if (*((_DWORD *)v286 + 2) == 19) {
              llvm::ScalableVectorType::get(v298, v303);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v298, v303);
            }
          }
          uint64_t v286 = v298;
        }
        int v299 = (llvm::ConstantInt *)*v286;
        unsigned int v300 = *((_DWORD *)v286 + 2);
        unsigned int v323 = v300 >> 8;
        if (v300 >> 8 > 0x40) {
          operator new[]();
        }
        if (v300 <= 0xFF) {
          LOBYTE(v301) = 0;
        }
        else {
          unint64_t v301 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v300) + 63);
        }
        __s1 = (void *)(v301 & 1);
        unsigned int v138 = (llvm::ConstantInt *)llvm::ConstantInt::get(v299, (llvm::LLVMContext *)&__s1, v82);
        if (v323 >= 0x41 && __s1) {
          MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
        }
        int v140 = 40;
LABEL_521:
        uint64_t v139 = 4;
LABEL_522:
        unint64_t v241 = a4;
        goto LABEL_523;
      default:
        goto LABEL_276;
    }
  }
  if (v83 <= 0x29)
  {
    if (((1 << v83) & 0x2A90000AA00) != 0)
    {
      long long v84 = ***(uint64_t ****)a1;
      uint64_t v85 = *v84;
      uint64_t v86 = *(llvm::ConstantInt **)(*v84 + 1568);
      if (!v86)
      {
        unsigned int v172 = *(llvm::ConstantInt **)(v85 + 1888);
        unsigned int v323 = *(_DWORD *)(v85 + 1896) >> 8;
        if (v323 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&__s1);
        }
        __s1 = 0;
        uint64_t v86 = (llvm::ConstantInt *)llvm::ConstantInt::get(v172, (llvm::LLVMContext *)&__s1, v82);
        if (v323 >= 0x41)
        {
          if (__s1) {
            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
        }
        *(void *)(v85 + 1568) = v86;
      }
      unint64_t v87 = llvm::ScalarEvolution::getConstant(a1, v86);
      *a4 = v87;
      *a3 = (const llvm::SCEV *)v87;
LABEL_149:
      int v88 = 32;
LABEL_162:
      *a2 = v88;
      return 1;
    }
    if (((1 << v83) & 0x15600000055) != 0)
    {
      unint64_t v93 = ***(uint64_t ****)a1;
      uint64_t v94 = *v93;
      uint64_t v95 = *(llvm::ConstantInt **)(*v93 + 1568);
      if (!v95)
      {
        int v224 = *(llvm::ConstantInt **)(v94 + 1888);
        unsigned int v323 = *(_DWORD *)(v94 + 1896) >> 8;
        if (v323 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&__s1);
        }
        __s1 = 0;
        uint64_t v95 = (llvm::ConstantInt *)llvm::ConstantInt::get(v224, (llvm::LLVMContext *)&__s1, v82);
        if (v323 >= 0x41 && __s1) {
          MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
        }
        *(void *)(v94 + 1568) = v95;
      }
      unint64_t v96 = llvm::ScalarEvolution::getConstant(a1, v95);
      *a4 = v96;
      *a3 = (const llvm::SCEV *)v96;
      goto LABEL_161;
    }
  }
LABEL_276:
  if ((v17 & 1) == 0) {
    return 0;
  }
  return llvm::ScalarEvolution::SimplifyICmpOperands(a1, a2, a3, a4, a5 + 1, a6);
}

unint64_t llvm::SCEVAddRecExpr::getNumIterationsInRange(llvm::SCEVAddRecExpr *this, const void **a2, llvm::ScalarEvolution *a3)
{
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((unsigned int *)a2 + 2);
  if (v6 > 0x40)
  {
    if (memcmp(*a2, a2[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)a2) != v6)
    {
      goto LABEL_3;
    }
    return *((void *)a3 + 6);
  }
  if (*a2 == a2[2] && (!v6 || *a2 == (const void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v6))) {
    return *((void *)a3 + 6);
  }
LABEL_3:
  uint64_t v7 = (char *)*((void *)this + 4);
  uint64_t v8 = *(void *)v7;
  int v9 = *(unsigned __int16 *)(*(void *)v7 + 24);
  if (*(void *)v7) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (!v10) {
    goto LABEL_7;
  }
  uint64_t v14 = *(void *)(v8 + 32);
  uint64_t v15 = *(unsigned int *)(v14 + 32);
  if (v15 <= 0x40)
  {
    if (!*(void *)(v14 + 24)) {
      goto LABEL_7;
    }
LABEL_21:
    unint64_t v21 = *((void *)this + 5);
    unsigned int v152 = (unint64_t *)v154;
    uint64_t v153 = 0x400000000;
    if (v21 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v21)
    {
      memcpy(v154, v7, 8 * v21);
      int v23 = v153;
      uint64_t v14 = *(void *)(v8 + 32);
    }
    else
    {
      int v23 = 0;
    }
    LODWORD(v153) = v23 + v21;
    int v24 = *(uint64_t ***)v14;
    unsigned int v25 = *(_DWORD *)(*(void *)v14 + 8);
    if (v25 != 13)
    {
      uint64_t v26 = *(void *)(*(void *)a3 + 40);
      if ((v25 & 0xFE) == 0x12) {
        unsigned int v25 = *(_DWORD *)(*v24[2] + 8);
      }
      uint64_t v27 = *(void *)(v26 + 504);
      if (v25 < 0x100) {
        goto LABEL_43;
      }
      unsigned int v28 = v25 >> 8;
      unint64_t v29 = *(unsigned int *)(v26 + 512);
      uint64_t v30 = v27;
      if (v29)
      {
        uint64_t v30 = v27;
        unint64_t v31 = v29;
        do
        {
          unint64_t v32 = v31 >> 1;
          uint64_t v33 = v30 + 16 * (v31 >> 1);
          unsigned int v34 = *(_DWORD *)(v33 + 8);
          uint64_t v35 = v33 + 16;
          v31 += ~(v31 >> 1);
          if (v34 < v28) {
            uint64_t v30 = v35;
          }
          else {
            unint64_t v31 = v32;
          }
        }
        while (v31);
      }
      if (v30 == v27 + 16 * v29 || *(_DWORD *)(v30 + 8) != v28) {
LABEL_43:
      }
        uint64_t v30 = v27;
      uint64_t v36 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v24, (llvm::LLVMContext *)*(unsigned int *)(v30 + 12));
      if ((v24[1] & 0xFE) == 0x12)
      {
        uint64_t v102 = (llvm::Type *)*((unsigned int *)v24 + 8);
        if (*((_DWORD *)v24 + 2) == 19) {
          llvm::ScalableVectorType::get(v36, v102);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v36, v102);
        }
      }
      int v24 = v36;
    }
    uint64_t v37 = (llvm::ConstantInt *)*v24;
    unsigned int v38 = *((_DWORD *)v24 + 2);
    LODWORD(v136) = v38 >> 8;
    if (v38 >> 8 >= 0x41) {
      operator new[]();
    }
    uint64_t v135 = 0;
    uint64_t v39 = (llvm::ConstantInt *)llvm::ConstantInt::get(v37, (llvm::LLVMContext *)&v135, a3);
    if (v136 >= 0x41 && v135) {
      MEMORY[0x1D25D9CB0](v135, 0x1000C8000313F17);
    }
    unint64_t Constant = llvm::ScalarEvolution::getConstant(a3, v39);
    *unsigned int v152 = Constant;
    uint64_t AddRecExpr = llvm::ScalarEvolution::getAddRecExpr(a3, (uint64_t **)&v152, *((const llvm::Loop **)this + 6), *((_WORD *)this + 14) & 1);
    if (AddRecExpr) {
      BOOL v42 = *(unsigned __int16 *)(AddRecExpr + 24) == 7;
    }
    else {
      BOOL v42 = 0;
    }
    int v43 = !v42;
    if (v42)
    {
      int v44 = (llvm::SCEVAddRecExpr *)AddRecExpr;
      llvm::ConstantRange::subtract((unsigned int *)a2, (const llvm::APInt *)(*(void *)(v8 + 32) + 24), &v135);
      this = (llvm::SCEVAddRecExpr *)llvm::SCEVAddRecExpr::getNumIterationsInRange(v44, (const llvm::ConstantRange *)&v135, a3);
      if (v138 >= 0x41 && v137) {
        MEMORY[0x1D25D9CB0](v137, 0x1000C8000313F17);
      }
      if (v136 >= 0x41 && v135) {
        MEMORY[0x1D25D9CB0](v135, 0x1000C8000313F17);
      }
    }
    if (v43) {
      BOOL v45 = (llvm::SCEVAddRecExpr *)*((void *)a3 + 6);
    }
    else {
      BOOL v45 = this;
    }
    if (v152 != (unint64_t *)v154) {
      free(v152);
    }
    return (unint64_t)v45;
  }
  int v16 = 0;
  int64_t v17 = (unint64_t)(v15 + 63) >> 6;
  do
  {
    if (v17-- < 1) {
      break;
    }
    unint64_t v19 = *(void *)(*(void *)(v14 + 24) + 8 * v17);
    v16 += __clz(v19);
  }
  while (!v19);
  int v20 = v15 | 0xFFFFFFC0;
  if ((v15 & 0x3F) == 0) {
    int v20 = 0;
  }
  if (v16 + v20 != v15) {
    goto LABEL_21;
  }
LABEL_7:
  unsigned int v11 = (void **)(a2 + 2);
  uint64_t v12 = *((void *)this + 5);
  if (v12)
  {
    uint64_t v13 = 8 * v12;
    while (!*(_WORD *)(*(void *)v7 + 24))
    {
      v7 += 8;
      v13 -= 8;
      if (!v13) {
        goto LABEL_66;
      }
    }
    return *((void *)a3 + 6);
  }
LABEL_66:
  while (2)
  {
    switch(v9)
    {
      case 1:
      case 2:
      case 3:
      case 13:
        unsigned int v47 = (uint64_t *)(v8 + 40);
        goto LABEL_70;
      case 4:
        unsigned int v47 = (uint64_t *)(v8 + 48);
        goto LABEL_70;
      case 5:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        BOOL v46 = *(uint64_t **)(v8 + 32);
        goto LABEL_64;
      case 6:
        BOOL v46 = (uint64_t *)(v8 + 40);
LABEL_64:
        uint64_t v8 = *v46;
        int v9 = *(unsigned __int16 *)(*v46 + 24);
        continue;
      case 14:
        unsigned int v47 = *(uint64_t **)(v8 - 8);
        goto LABEL_70;
      default:
        unsigned int v47 = *(uint64_t **)(v8 + 32);
LABEL_70:
        uint64_t v48 = *v47;
        unsigned int v49 = *(_DWORD *)(*v47 + 8);
        uint64_t v50 = *(void *)(*(void *)a3 + 40);
        if (v49 == 15)
        {
          if ((v49 & 0xFE) == 0x12) {
            unsigned int v49 = *(_DWORD *)(**(void **)(v48 + 16) + 8);
          }
          uint64_t v68 = *(void *)(v50 + 504);
          if (v49 < 0x100) {
            goto LABEL_172;
          }
          unsigned int v69 = v49 >> 8;
          unint64_t v70 = *(unsigned int *)(v50 + 512);
          uint64_t v71 = *(void *)(v50 + 504);
          if (v70)
          {
            uint64_t v71 = v68;
            unint64_t v72 = v70;
            do
            {
              unint64_t v73 = v72 >> 1;
              uint64_t v74 = v71 + 16 * (v72 >> 1);
              unsigned int v75 = *(_DWORD *)(v74 + 8);
              uint64_t v76 = v74 + 16;
              v72 += ~(v72 >> 1);
              if (v75 < v69) {
                uint64_t v71 = v76;
              }
              else {
                unint64_t v72 = v73;
              }
            }
            while (v72);
          }
          if (v71 == v68 + 16 * v70 || *(_DWORD *)(v71 + 8) != v69) {
LABEL_172:
          }
            uint64_t v71 = v68;
          unsigned int v52 = *(_DWORD *)(v71 + 12);
        }
        else
        {
          unsigned int v52 = sub_1CB83544C(v50 + 272, v48);
          if (v51 == 1) {
        }
          }
        LODWORD(v153) = v52;
        if (v52 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v152);
        }
        unsigned int v152 = 0;
        if (!llvm::ConstantRange::contains((llvm::ConstantRange *)a2, (const llvm::APInt *)&v152))
        {
          int v77 = (uint64_t *)*((void *)this + 4);
          while (2)
          {
            uint64_t v78 = *v77;
            switch(*(_WORD *)(v78 + 24))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                unsigned int v79 = (uint64_t ***)(v78 + 40);
                break;
              case 4:
                unsigned int v79 = (uint64_t ***)(v78 + 48);
                break;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                int v77 = *(uint64_t **)(v78 + 32);
                continue;
              case 6:
                int v77 = (uint64_t *)(v78 + 40);
                continue;
              case 0xE:
                unsigned int v79 = *(uint64_t ****)(v78 - 8);
                break;
              default:
                unsigned int v79 = *(uint64_t ****)(v78 + 32);
                break;
            }
            break;
          }
          unint64_t v80 = *v79;
          unsigned int v81 = *((_DWORD *)*v79 + 2);
          if (v81 != 13)
          {
            uint64_t v82 = *(void *)(*(void *)a3 + 40);
            if ((v81 & 0xFE) == 0x12) {
              unsigned int v81 = *(_DWORD *)(*v80[2] + 8);
            }
            uint64_t v83 = *(void *)(v82 + 504);
            if (v81 < 0x100) {
              goto LABEL_197;
            }
            unsigned int v84 = v81 >> 8;
            unint64_t v85 = *(unsigned int *)(v82 + 512);
            uint64_t v86 = v83;
            if (v85)
            {
              uint64_t v86 = v83;
              unint64_t v87 = v85;
              do
              {
                unint64_t v88 = v87 >> 1;
                uint64_t v89 = v86 + 16 * (v87 >> 1);
                unsigned int v90 = *(_DWORD *)(v89 + 8);
                uint64_t v91 = v89 + 16;
                v87 += ~(v87 >> 1);
                if (v90 < v84) {
                  uint64_t v86 = v91;
                }
                else {
                  unint64_t v87 = v88;
                }
              }
              while (v87);
            }
            if (v86 == v83 + 16 * v85 || *(_DWORD *)(v86 + 8) != v84) {
LABEL_197:
            }
              uint64_t v86 = v83;
            uint64_t v92 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v80, (llvm::LLVMContext *)*(unsigned int *)(v86 + 12));
            if ((v80[1] & 0xFE) == 0x12)
            {
              uint64_t v103 = (llvm::Type *)*((unsigned int *)v80 + 8);
              if (*((_DWORD *)v80 + 2) == 19) {
                llvm::ScalableVectorType::get(v92, v103);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v92, v103);
              }
            }
            unint64_t v80 = v92;
          }
          unint64_t v93 = (llvm::ConstantInt *)*v80;
          unsigned int v94 = *((_DWORD *)v80 + 2);
          LODWORD(v153) = v94 >> 8;
          if (v94 >> 8 >= 0x41) {
            operator new[]();
          }
          unsigned int v152 = 0;
          uint64_t v95 = (llvm::ConstantInt *)llvm::ConstantInt::get(v93, (llvm::LLVMContext *)&v152, v53);
          if (v153 >= 0x41 && v152) {
            MEMORY[0x1D25D9CB0](v152, 0x1000C8000313F17);
          }
          return llvm::ScalarEvolution::getConstant(a3, v95);
        }
        uint64_t v54 = *((void *)this + 5);
        if (v54 != 3)
        {
          if (v54 != 2) {
            return *((void *)a3 + 6);
          }
          uint64_t v55 = *(void *)(*(void *)(*((void *)this + 4) + 8) + 32);
          unsigned int v56 = *(_DWORD *)(v55 + 32);
          LODWORD(v153) = v56;
          if (v56 >= 0x41) {
            operator new[]();
          }
          uint64_t v57 = *(unint64_t **)(v55 + 24);
          unsigned int v152 = v57;
          if ((uint64_t)((void)v57 << -(char)v56) >> -(char)v56 < 1)
          {
            unsigned int v60 = *((_DWORD *)a2 + 2);
            if (v60 > 0x40) {
              operator new[]();
            }
            BOOL v61 = *a2;
          }
          else
          {
            unsigned int v108 = *((_DWORD *)a2 + 6);
            if (v108 > 0x40) {
              operator new[]();
            }
            long long v107 = *v11;
            llvm::APInt::operator-=((uint64_t)&v107, 1uLL);
            unsigned int v60 = v108;
            BOOL v61 = v107;
            unsigned int v108 = 0;
            if (v60 >= 0x41) {
              operator new[]();
            }
          }
          if (v60) {
            unint64_t v97 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v60;
          }
          else {
            unint64_t v97 = 0;
          }
          LODWORD(v131) = v60;
          uint64_t v130 = (uint64_t *)(v97 & ((unint64_t)v61 + (void)v57));
          llvm::APInt::udiv((uint64_t)&v130, (const llvm::APInt *)&v152, (uint64_t)&v135);
          if (v131 >= 0x41 && v130) {
            MEMORY[0x1D25D9CB0](v130, 0x1000C8000313F17);
          }
          uint64_t v99 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)a3, (llvm::LLVMContext *)&v135, v98);
          int v100 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(a3, v99);
          uint64_t v101 = llvm::SCEVAddRecExpr::evaluateAtIteration(*((uint64_t **)this + 4), *((void *)this + 5), v100, a3);
          if (llvm::ConstantRange::contains((llvm::ConstantRange *)a2, (const llvm::APInt *)(*(void *)(v101 + 32) + 24)))
          {
            BOOL v45 = (llvm::SCEVAddRecExpr *)*((void *)a3 + 6);
          }
          else
          {
            BOOL v45 = (llvm::SCEVAddRecExpr *)llvm::ScalarEvolution::getConstant(a3, v99);
          }
          if (v136 >= 0x41 && v135) {
            MEMORY[0x1D25D9CB0](v135, 0x1000C8000313F17);
          }
          if (v153 >= 0x41)
          {
            uint64_t v67 = (uint64_t *)v152;
            if (v152) {
              goto LABEL_226;
            }
          }
          return (unint64_t)v45;
        }
        uint64_t v151 = this;
        unsigned int v150 = 1;
        uint64_t v149 = 0;
        unsigned int v148 = 1;
        uint64_t v147 = 0;
        unsigned int v146 = 1;
        uint64_t v145 = 0;
        unsigned int v144 = 1;
        uint64_t v143 = 0;
        unsigned int v142 = 0;
        sub_1CC137520(&v152, *((void **)this + 4));
        if (!v155)
        {
          LOBYTE(v104) = 0;
          char v106 = 0;
          goto LABEL_144;
        }
        uint64_t v135 = &v143;
        unsigned int v136 = &v142;
        unsigned int v137 = &v149;
        unsigned int v138 = &v147;
        uint64_t v139 = a3;
        int v140 = &v151;
        int v141 = a2;
        uint64_t v130 = &v149;
        unsigned int v131 = &v147;
        uint64_t v132 = &v145;
        unsigned int v133 = &v143;
        uint64_t v134 = &v142;
        sub_1CC137E9C((uint64_t *)&v130, (uint64_t)&v152);
        unsigned int v59 = *((_DWORD *)a2 + 2);
        if (v59 < v150)
        {
          llvm::APInt::sext((uint64_t)a2, v150, (uint64_t)&v128);
        }
        else
        {
          unsigned int v129 = *((_DWORD *)a2 + 2);
          if (v59 > 0x40) {
            operator new[]();
          }
          unint64_t v128 = *a2;
        }
        llvm::APInt::operator-=((uint64_t)&v128, 1uLL);
        unsigned int v62 = v129;
        uint64_t v63 = v128;
        unsigned int v129 = 0;
        unsigned int v64 = *((_DWORD *)a2 + 6);
        if (v64 < v150)
        {
          llvm::APInt::sext((uint64_t)(a2 + 2), v150, (uint64_t)&__src);
        }
        else
        {
          unsigned int v127 = *((_DWORD *)a2 + 6);
          if (v64 > 0x40) {
            operator new[]();
          }
          long long __src = *v11;
        }
        unsigned int v125 = v62;
        if (v62 > 0x40) {
          operator new[]();
        }
        uint64_t v124 = v63;
        sub_1CC138C0C(&v130, (uint64_t)&v135, (uint64_t)&v124);
        if (v125 >= 0x41 && v124) {
          MEMORY[0x1D25D9CB0](v124, 0x1000C8000313F17);
        }
        unsigned int v119 = v127;
        if (v127 > 0x40) {
          operator new[]();
        }
        unsigned int v118 = __src;
        sub_1CC138C0C(&v120, (uint64_t)&v135, (uint64_t)&v118);
        if (v119 >= 0x41 && v118) {
          MEMORY[0x1D25D9CB0](v118, 0x1000C8000313F17);
        }
        if (!(_BYTE)v133 || !v123)
        {
          LOBYTE(v104) = 0;
          int v65 = &v106;
LABEL_130:
          char *v65 = 0;
          goto LABEL_131;
        }
        LOBYTE(v112) = 0;
        char v114 = 0;
        if ((_BYTE)v132) {
          sub_1CD4C103C((uint64_t)&v112, (llvm::APInt *)&v130);
        }
        LOBYTE(v109) = 0;
        char v111 = 0;
        if (v122) {
          sub_1CD4C103C((uint64_t)&v109, (llvm::APInt *)&v120);
        }
        sub_1CC139360((uint64_t)&v115, (llvm::APInt *)&v112, (llvm::APInt *)&v109);
        sub_1CC137CEC((uint64_t)&v104, (uint64_t)&v115, v142);
        if (v117)
        {
          if (v116 >= 0x41 && v115) {
            MEMORY[0x1D25D9CB0](v115, 0x1000C8000313F17);
          }
          char v117 = 0;
        }
        if (v111)
        {
          if (v110 >= 0x41 && v109) {
            MEMORY[0x1D25D9CB0](v109, 0x1000C8000313F17);
          }
          char v111 = 0;
        }
        if (v114)
        {
          int v65 = &v114;
          if (v113 >= 0x41 && v112) {
            MEMORY[0x1D25D9CB0](v112, 0x1000C8000313F17);
          }
          goto LABEL_130;
        }
LABEL_131:
        if (v122 && v121 >= 0x41 && v120) {
          MEMORY[0x1D25D9CB0](v120, 0x1000C8000313F17);
        }
        if ((_BYTE)v132 && v131 >= 0x41 && v130) {
          MEMORY[0x1D25D9CB0](v130, 0x1000C8000313F17);
        }
        if (v127 >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
        if (v155) {
          sub_1CD4C0F04((uint64_t)&v152);
        }
LABEL_144:
        if (v144 >= 0x41 && v143) {
          MEMORY[0x1D25D9CB0](v143, 0x1000C8000313F17);
        }
        if (v146 >= 0x41 && v145) {
          MEMORY[0x1D25D9CB0](v145, 0x1000C8000313F17);
        }
        if (v148 >= 0x41 && v147) {
          MEMORY[0x1D25D9CB0](v147, 0x1000C8000313F17);
        }
        if (v150 >= 0x41 && v149) {
          MEMORY[0x1D25D9CB0](v149, 0x1000C8000313F17);
        }
        if (!v106) {
          return *((void *)a3 + 6);
        }
        unsigned int v66 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)a3, (llvm::LLVMContext *)&v104, v58);
        BOOL v45 = (llvm::SCEVAddRecExpr *)llvm::ScalarEvolution::getConstant(a3, v66);
        if (v106)
        {
          if (v105 >= 0x41)
          {
            uint64_t v67 = v104;
            if (v104) {
LABEL_226:
            }
              MEMORY[0x1D25D9CB0](v67, 0x1000C8000313F17);
          }
        }
        return (unint64_t)v45;
    }
  }
}

void llvm::ScalarEvolution::howFarToZero(llvm::ScalarEvolution *this@<X0>, const llvm::SCEV *a2@<X1>, const llvm::Loop **a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  uint64_t v83 = v87;
  unsigned int v84 = v87;
  uint64_t v85 = 4;
  int v86 = 0;
  int v10 = *((unsigned __int16 *)a2 + 12);
  if (a2 && !*((_WORD *)a2 + 12))
  {
    uint64_t v11 = *((void *)a2 + 4);
    uint64_t v12 = *(unsigned int *)(v11 + 32);
    if (v12 > 0x40)
    {
      int v15 = 0;
      int64_t v16 = (unint64_t)(v12 + 63) >> 6;
      do
      {
        BOOL v14 = v16-- < 1;
        if (v14) {
          break;
        }
        unint64_t v17 = *(void *)(*(void *)(v11 + 24) + 8 * v16);
        v15 += __clz(v17);
      }
      while (!v17);
      int v18 = v12 | 0xFFFFFFC0;
      if ((v12 & 0x3F) == 0) {
        int v18 = 0;
      }
      if (v15 + v18 == v12) {
        goto LABEL_34;
      }
    }
    else if (!*(void *)(v11 + 24))
    {
      goto LABEL_34;
    }
LABEL_33:
    a2 = (const llvm::SCEV *)*((void *)this + 6);
LABEL_34:
    uint64_t v21 = a6;
    uint64_t v22 = a2;
    p_src = 0;
    uint64_t v24 = 0;
LABEL_35:
    llvm::ScalarEvolution::ExitLimit::ExitLimit(v21, (uint64_t)a2, (uint64_t)v22, 0, (uint64_t)p_src, v24);
    goto LABEL_36;
  }
  if (a2)
  {
    uint64_t v13 = a2;
    if ((v10 - 4) >= 0xFFFFFFFE)
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v13 = (const llvm::SCEV *)*((void *)v13 + 4);
        int v10 = *((unsigned __int16 *)v13 + 12);
        if (v13) {
          BOOL v14 = (v10 - 4) > 0xFFFFFFFD;
        }
        else {
          BOOL v14 = 0;
        }
      }
      while (v14);
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  if (v10 == 7) {
    uint64_t v19 = (uint64_t)v13;
  }
  else {
    uint64_t v19 = 0;
  }
  if (v19) {
    BOOL v20 = 1;
  }
  else {
    BOOL v20 = a5 == 0;
  }
  if (!v20) {
    uint64_t v19 = llvm::ScalarEvolution::convertSCEVToAddRecWithPredicates((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (llvm::SmallPtrSetImplBase *)&v83);
  }
  if (!v19 || *(const llvm::Loop ***)(v19 + 48) != a3) {
    goto LABEL_33;
  }
  uint64_t v25 = *(void *)(v19 + 40);
  if (v25 == 2)
  {
    SCEVAtScope = llvm::ScalarEvolution::getSCEVAtScope(this, **(const llvm::SCEV ***)(v19 + 32), *a3);
    unint64_t v29 = llvm::ScalarEvolution::getSCEVAtScope(this, *(const llvm::SCEV **)(*(void *)(v19 + 32) + 8), *a3);
    if (v29) {
      BOOL v30 = *((unsigned __int16 *)v29 + 12) == 0;
    }
    else {
      BOOL v30 = 0;
    }
    if (!v30) {
      goto LABEL_33;
    }
    unint64_t v31 = (unint64_t)v29;
    uint64_t v32 = *((void *)v29 + 4);
    uint64_t v33 = *(unsigned int *)(v32 + 32);
    if (v33 > 0x40)
    {
      int v37 = 0;
      int64_t v38 = (unint64_t)(v33 + 63) >> 6;
      do
      {
        BOOL v14 = v38-- < 1;
        if (v14) {
          break;
        }
        unint64_t v39 = *(void *)(*(void *)(v32 + 24) + 8 * v38);
        v37 += __clz(v39);
      }
      while (!v39);
      int v40 = v33 | 0xFFFFFFC0;
      if ((v33 & 0x3F) == 0) {
        int v40 = 0;
      }
      if (v37 + v40 == v33) {
        goto LABEL_33;
      }
      char v35 = v33 - 1;
      uint64_t v34 = *(void *)(*(void *)(v32 + 24) + 8 * ((v33 - 1) >> 6));
    }
    else
    {
      uint64_t v34 = *(void *)(v32 + 24);
      if (!v34) {
        goto LABEL_33;
      }
      char v35 = v33 - 1;
    }
    unint64_t NegativeSCEV = SCEVAtScope;
    uint64_t v41 = (1 << v35) & v34;
    if (!v41)
    {
      unint64_t NegativeSCEV = (llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(this, (uint64_t)SCEVAtScope, 0);
      uint64_t v32 = *(void *)(v31 + 32);
      LODWORD(v33) = *(_DWORD *)(v32 + 32);
    }
    BOOL v42 = (llvm::APInt *)(v32 + 24);
    if (v33 > 0x40)
    {
      int v51 = 0;
      int64_t v52 = ((unint64_t)v33 + 63) >> 6;
      do
      {
        BOOL v14 = v52-- < 1;
        if (v14) {
          break;
        }
        unint64_t v53 = *(void *)(*(void *)v42 + 8 * v52);
        v51 += __clz(v53);
      }
      while (!v53);
      int v54 = v33 | 0xFFFFFFC0;
      if ((v33 & 0x3F) == 0) {
        int v54 = 0;
      }
      if (v51 + v54 != v33 - 1 && llvm::APInt::countTrailingOnesSlowCase(v42) != v33)
      {
LABEL_139:
        if (a4 && (*(_WORD *)(v19 + 28) & 1) != 0)
        {
          if (llvm::ScalarEvolution::getLoopProperties(this, *(const llvm::Loop **)(v19 + 48)))
          {
            if (v41) {
              unint64_t v31 = llvm::ScalarEvolution::getNegativeSCEV(this, v31, 0);
            }
            uint64_t UDivExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getUDivExpr(this, NegativeSCEV, v31);
            if (UDivExpr != *((const llvm::SCEV **)this + 6)) {
              llvm::ScalarEvolution::applyLoopGuards(this, UDivExpr, (const llvm::Loop *)a3);
            }
            uint64_t __src = (uint64_t)&v83;
            p_src = &__src;
            uint64_t v21 = a6;
            a2 = UDivExpr;
            uint64_t v22 = UDivExpr;
            goto LABEL_190;
          }
          uint64_t v32 = *(void *)(v31 + 32);
        }
        unsigned int v59 = (unint64_t *)(v32 + 24);
        unsigned int v60 = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(this, (uint64_t)SCEVAtScope, 0);
        unsigned int v61 = *(_DWORD *)(v32 + 32);
        if (v61 > 0x40)
        {
          unsigned int v63 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)(v32 + 24));
        }
        else
        {
          unsigned int v62 = __clz(__rbit64(*v59));
          if (v61 >= v62) {
            unsigned int v63 = v62;
          }
          else {
            unsigned int v63 = *(_DWORD *)(v32 + 32);
          }
        }
        if (llvm::ScalarEvolution::GetMinTrailingZeros(this, v60) >= v63)
        {
          unsigned int v65 = *(_DWORD *)(v32 + 32);
          LODWORD(v112) = v65;
          if (v65 > 0x40) {
            operator new[]();
          }
          if (v65 == v63) {
            uint64_t __src = 0;
          }
          else {
            uint64_t __src = *v59 >> v63;
          }
          unsigned int v66 = v61 + 1;
          if (v61 + 1 > 0x40)
          {
            if (v112 != v66) {
              operator new[]();
            }
            sub_1CD0463BC((uint64_t)&__dst, (uint64_t)&__src);
          }
          else
          {
            LODWORD(v98) = v61 + 1;
            if (v61 == -1) {
              unint64_t v67 = 0;
            }
            else {
              unint64_t v67 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v61;
            }
            long long __dst = (void *)(v67 & __src);
          }
          if (v112 >= 0x41 && __src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
          unsigned int v89 = v61 + 1;
          if (v66 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v88);
          }
          uint64_t v88 = 1 << (v61 - v63);
          llvm::APInt::multiplicativeInverse((llvm::APInt *)&__dst, (const llvm::APInt *)&v88, (uint64_t)&__src);
          if (v61 > 0x40)
          {
            if (v112 != v61) {
              operator new[]();
            }
            sub_1CD0463BC((uint64_t)&v80, (uint64_t)&__src);
          }
          else
          {
            if (v112 >= 0x41) {
              unsigned int v69 = (uint64_t *)__src;
            }
            else {
              unsigned int v69 = &__src;
            }
            uint64_t v70 = *v69;
            unsigned int v81 = v61;
            if (v61) {
              unint64_t v71 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v61;
            }
            else {
              unint64_t v71 = 0;
            }
            unint64_t v80 = v71 & v70;
          }
          if (v112 >= 0x41 && __src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
          LODWORD(v112) = v61;
          if (v61 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&__src);
          }
          uint64_t __src = 1 << v63;
          unint64_t v72 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&__src, v68);
          unint64_t Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(this, v72);
          if (v112 >= 0x41 && __src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
          unsigned int v75 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&v80, v73);
          unint64_t v76 = llvm::ScalarEvolution::getConstant(this, v75);
          uint64_t __src = (uint64_t)v113;
          v113[0] = v60;
          v113[1] = v76;
          uint64_t v112 = 0x200000002;
          uint64_t MulExpr = (uint64_t **)llvm::ScalarEvolution::getMulExpr(this, &__src, 0, 0);
          if ((void *)__src != v113) {
            free((void *)__src);
          }
          UDivExactExpr = llvm::ScalarEvolution::getUDivExactExpr((llvm::ConstantInt ****)this, MulExpr, Constant);
          if (v81 >= 0x41 && v80) {
            MEMORY[0x1D25D9CB0](v80, 0x1000C8000313F17);
          }
          if (v89 >= 0x41 && v88) {
            MEMORY[0x1D25D9CB0](v88, 0x1000C8000313F17);
          }
          if (v98 >= 0x41 && __dst) {
            MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
          }
          if (UDivExactExpr != *((const llvm::SCEV **)this + 6)) {
            llvm::ScalarEvolution::applyLoopGuards(this, UDivExactExpr, (const llvm::Loop *)a3);
          }
        }
        else
        {
          UDivExactExpr = (const llvm::SCEV *)*((void *)this + 6);
        }
        uint64_t __src = (uint64_t)&v83;
        p_src = &__src;
        uint64_t v21 = a6;
        a2 = UDivExactExpr;
        uint64_t v22 = UDivExactExpr;
LABEL_190:
        uint64_t v24 = 1;
        goto LABEL_35;
      }
    }
    else if (v33 && *(void *)v42 != 1 && *(void *)v42 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v33)
    {
      goto LABEL_139;
    }
    llvm::ScalarEvolution::applyLoopGuards(this, NegativeSCEV, (const llvm::Loop *)a3);
  }
  if (v25 != 3) {
    goto LABEL_33;
  }
  uint64_t v26 = *(uint64_t **)(v19 + 32);
  while (2)
  {
    uint64_t v27 = *v26;
    switch(*(_WORD *)(v27 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        uint64_t v36 = v27 + 40;
        break;
      case 4:
        uint64_t v36 = v27 + 48;
        break;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v26 = *(uint64_t **)(v27 + 32);
        continue;
      case 6:
        uint64_t v26 = (uint64_t *)(v27 + 40);
        continue;
      case 0xE:
        uint64_t v36 = *(void *)(v27 - 8);
        break;
      default:
        uint64_t v36 = *(void *)(v27 + 32);
        break;
    }
    break;
  }
  if (*(unsigned char *)(*(void *)v36 + 8) != 13) {
    goto LABEL_33;
  }
  unsigned int v110 = 1;
  uint64_t v109 = 0;
  unsigned int v108 = 1;
  uint64_t v107 = 0;
  unsigned int v106 = 1;
  unint64_t v105 = 0;
  unsigned int v104 = 1;
  uint64_t v103 = 0;
  unsigned int v102 = 0;
  sub_1CC137520(&__src, *(void **)(v19 + 32));
  if (!v114)
  {
    LOBYTE(v80) = 0;
    char v82 = 0;
    goto LABEL_102;
  }
  long long __dst = &v109;
  uint64_t v98 = &v107;
  uint64_t v99 = &v105;
  int v100 = &v103;
  uint64_t v101 = &v102;
  sub_1CC137E9C((uint64_t *)&__dst, (uint64_t)&__src);
  unsigned int v96 = v110;
  if (v110 > 0x40) {
    operator new[]();
  }
  uint64_t v95 = v109;
  unsigned int v94 = v108;
  if (v108 > 0x40) {
    operator new[]();
  }
  uint64_t v93 = v107;
  unsigned int v92 = v106;
  if (v106 > 0x40) {
    operator new[]();
  }
  unint64_t v91 = v105;
  llvm::APIntOps::SolveQuadraticEquationWrap(&v95, (uint64_t)&v93, &v91, v102 + 1, (uint64_t)&__dst);
  if (v92 >= 0x41 && v91) {
    MEMORY[0x1D25D9CB0](v91, 0x1000C8000313F17);
  }
  if (v94 >= 0x41 && v93) {
    MEMORY[0x1D25D9CB0](v93, 0x1000C8000313F17);
  }
  if (v96 >= 0x41 && v95) {
    MEMORY[0x1D25D9CB0](v95, 0x1000C8000313F17);
  }
  if (!(_BYTE)v99) {
    goto LABEL_94;
  }
  int v44 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&__dst, v43);
  BOOL v45 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(this, v44);
  uint64_t v46 = *(void *)(llvm::SCEVAddRecExpr::evaluateAtIteration(*(uint64_t **)(v19 + 32), *(void *)(v19 + 40), v45, this)
                  + 32);
  uint64_t v47 = *(unsigned int *)(v46 + 32);
  if (v47 > 0x40)
  {
    int v55 = 0;
    int64_t v56 = (unint64_t)(v47 + 63) >> 6;
    do
    {
      BOOL v14 = v56-- < 1;
      if (v14) {
        break;
      }
      unint64_t v57 = *(void *)(*(void *)(v46 + 24) + 8 * v56);
      v55 += __clz(v57);
    }
    while (!v57);
    int v58 = v47 | 0xFFFFFFC0;
    if ((v47 & 0x3F) == 0) {
      int v58 = 0;
    }
    if (v55 + v58 != v47) {
      goto LABEL_94;
    }
  }
  else if (*(void *)(v46 + 24))
  {
LABEL_94:
    LOBYTE(v80) = 0;
    uint64_t v48 = &v82;
    goto LABEL_95;
  }
  LOBYTE(v88) = 0;
  char v90 = 0;
  if ((_BYTE)v99) {
    sub_1CD4C103C((uint64_t)&v88, (llvm::APInt *)&__dst);
  }
  sub_1CC137CEC((uint64_t)&v80, (uint64_t)&v88, v102);
  if (!v90) {
    goto LABEL_96;
  }
  uint64_t v48 = &v90;
  if (v89 >= 0x41 && v88) {
    MEMORY[0x1D25D9CB0](v88, 0x1000C8000313F17);
  }
LABEL_95:
  *uint64_t v48 = 0;
LABEL_96:
  if ((_BYTE)v99 && v98 >= 0x41 && __dst) {
    MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
  }
  if (v114) {
    sub_1CD4C0F04((uint64_t)&__src);
  }
LABEL_102:
  if (v104 >= 0x41 && v103) {
    MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
  }
  if (v106 >= 0x41 && v105) {
    MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
  }
  if (v108 >= 0x41 && v107) {
    MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
  }
  if (v110 >= 0x41 && v109) {
    MEMORY[0x1D25D9CB0](v109, 0x1000C8000313F17);
  }
  if (!v82) {
    goto LABEL_33;
  }
  unsigned int v49 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&v80, v43);
  unint64_t v50 = llvm::ScalarEvolution::getConstant(this, v49);
  uint64_t __src = (uint64_t)&v83;
  llvm::ScalarEvolution::ExitLimit::ExitLimit(a6, v50, v50, 0, (uint64_t)&__src, 1);
  if (v82 && v81 >= 0x41 && v80) {
    MEMORY[0x1D25D9CB0](v80, 0x1000C8000313F17);
  }
LABEL_36:
  if (v84 != v83) {
    free(v84);
  }
}

uint64_t llvm::ScalarEvolution::howFarToNonZero@<X0>(llvm::ScalarEvolution *this@<X0>, const llvm::SCEV *a2@<X1>, const llvm::Loop *a3@<X2>, uint64_t a4@<X8>)
{
  if (!a2 || *((_WORD *)a2 + 12)) {
    goto LABEL_29;
  }
  uint64_t v6 = *((void *)a2 + 4);
  uint64_t v7 = *(unsigned int *)(v6 + 32);
  if (v7 > 0x40)
  {
    int v25 = 0;
    int64_t v26 = (unint64_t)(v7 + 63) >> 6;
    do
    {
      if (v26-- < 1) {
        break;
      }
      unint64_t v28 = *(void *)(*(void *)(v6 + 24) + 8 * v26);
      v25 += __clz(v28);
    }
    while (!v28);
    int v29 = v7 | 0xFFFFFFC0;
    if ((v7 & 0x3F) == 0) {
      int v29 = 0;
    }
    if (v25 + v29 != v7) {
      goto LABEL_5;
    }
LABEL_29:
    unint64_t Constant = *((void *)this + 6);
    goto LABEL_30;
  }
  if (!*(void *)(v6 + 24)) {
    goto LABEL_29;
  }
LABEL_5:
  uint64_t v8 = *(uint64_t ***)v6;
  unsigned int v9 = *(_DWORD *)(*(void *)v6 + 8);
  if (v9 != 13)
  {
    uint64_t v10 = *(void *)(*(void *)this + 40);
    if ((v9 & 0xFE) == 0x12) {
      unsigned int v9 = *(_DWORD *)(*v8[2] + 8);
    }
    uint64_t v11 = *(void *)(v10 + 504);
    if (v9 < 0x100) {
      goto LABEL_17;
    }
    unsigned int v12 = v9 >> 8;
    unint64_t v13 = *(unsigned int *)(v10 + 512);
    uint64_t v14 = v11;
    if (v13)
    {
      uint64_t v14 = v11;
      unint64_t v15 = v13;
      do
      {
        unint64_t v16 = v15 >> 1;
        uint64_t v17 = v14 + 16 * (v15 >> 1);
        unsigned int v18 = *(_DWORD *)(v17 + 8);
        uint64_t v19 = v17 + 16;
        v15 += ~(v15 >> 1);
        if (v18 < v12) {
          uint64_t v14 = v19;
        }
        else {
          unint64_t v15 = v16;
        }
      }
      while (v15);
    }
    if (v14 == v11 + 16 * v13 || *(_DWORD *)(v14 + 8) != v12) {
LABEL_17:
    }
      uint64_t v14 = v11;
    BOOL v20 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v8, (llvm::LLVMContext *)*(unsigned int *)(v14 + 12));
    if ((v8[1] & 0xFE) == 0x12)
    {
      unint64_t v31 = (llvm::Type *)*((unsigned int *)v8 + 8);
      if (*((_DWORD *)v8 + 2) == 19) {
        llvm::ScalableVectorType::get(v20, v31);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v20, v31);
      }
    }
    uint64_t v8 = v20;
  }
  uint64_t v21 = (llvm::ConstantInt *)*v8;
  unsigned int v22 = *((_DWORD *)v8 + 2);
  unsigned int v33 = v22 >> 8;
  if (v22 >> 8 >= 0x41) {
    operator new[]();
  }
  uint64_t v32 = 0;
  int v23 = (llvm::ConstantInt *)llvm::ConstantInt::get(v21, (llvm::LLVMContext *)&v32, a3);
  if (v33 >= 0x41 && v32) {
    MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
  }
  unint64_t Constant = llvm::ScalarEvolution::getConstant(this, v23);
LABEL_30:

  return llvm::ScalarEvolution::ExitLimit::ExitLimit(a4, Constant, Constant, 0, 0, 0);
}

void llvm::ScalarEvolution::howManyLessThans(llvm::ScalarEvolution *this@<X0>, const llvm::SCEV *a2@<X1>, const llvm::SCEV *a3@<X2>, const llvm::Loop *a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  int v10 = a5;
  unsigned int v12 = a2;
  v333[3] = *MEMORY[0x1E4F143B8];
  unsigned int v318 = v322;
  unsigned int v319 = v322;
  uint64_t v320 = 4;
  int v321 = 0;
  int v15 = *((unsigned __int16 *)a2 + 12);
  if (a2)
  {
    int v16 = 0;
    uint64_t v17 = a2;
    if (v15 == 7) {
      goto LABEL_85;
    }
  }
  if (v15 != 2) {
    goto LABEL_78;
  }
  uint64_t v17 = 0;
  uint64_t v18 = *((void *)a2 + 4);
  if (!v18 || *(_WORD *)(v18 + 24) != 7) {
    goto LABEL_79;
  }
  if (*(const llvm::Loop **)(v18 + 48) != a4 || *(void *)(v18 + 40) != 2) {
    goto LABEL_78;
  }
  __int16 v19 = *(_WORD *)(v18 + 28);
  int v20 = v19 & 7;
  if ((v19 & 2) != 0) {
    goto LABEL_77;
  }
  if (llvm::ScalarEvolution::getLoopDisposition(this, a3, a4) == 1)
  {
    uint64_t v21 = *(void *)(v18 + 40);
    if (v21 == 2)
    {
      uint64_t v22 = *(void *)(*(void *)(v18 + 32) + 8);
    }
    else
    {
      int v308 = v20;
      uint64_t v296 = *(void *)(v18 + 32);
      unint64_t v331 = (unint64_t)v333;
      uint64_t v332 = 0x300000000;
      unint64_t v297 = 8 * v21 - 8;
      if (v297 >= 0x19) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v298 = 0;
      if (v21 != 1)
      {
        memcpy((void *)v331, (const void *)(v296 + 8), 8 * v21 - 8);
        int v298 = v332;
      }
      LODWORD(v332) = v298 + (v297 >> 3);
      uint64_t v22 = sub_1CD478318(this, (uint64_t)&v331, *(const llvm::Loop **)(v18 + 48), 0);
      if ((void *)v331 != v333) {
        free((void *)v331);
      }
      int v20 = v308;
    }
    uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(this, v22, 0, 0);
    llvm::ConstantRange::getUnsignedMin(RangeRef, (uint64_t)&v331);
    if (v332 >= 0x41)
    {
      int v24 = 0;
      int64_t v25 = ((unint64_t)v332 + 63) >> 6;
      do
      {
        BOOL v26 = v25-- < 1;
        if (v26) {
          break;
        }
        unint64_t v27 = *(void *)(v331 + 8 * v25);
        v24 += __clz(v27);
      }
      while (!v27);
      int v28 = v332 | 0xFFFFFFC0;
      if ((v332 & 0x3F) == 0) {
        int v28 = 0;
      }
      if ((v332 - v24 - v28) >= 0x41)
      {
        if (v331) {
          MEMORY[0x1D25D9CB0](v331, 0x1000C8000313F17);
        }
      }
      else
      {
        uint64_t v29 = *(void *)v331;
        MEMORY[0x1D25D9CB0]();
        if (!v29) {
          goto LABEL_76;
        }
      }
    }
    else if (!v331)
    {
      goto LABEL_76;
    }
    BOOL v30 = *(uint64_t **)(v18 + 32);
    while (2)
    {
      uint64_t v31 = *v30;
      switch(*(_WORD *)(v31 + 24))
      {
        case 1:
        case 2:
        case 3:
        case 0xD:
          uint64_t v32 = (uint64_t *)(v31 + 40);
          goto LABEL_32;
        case 4:
          uint64_t v32 = (uint64_t *)(v31 + 48);
          goto LABEL_32;
        case 5:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          BOOL v30 = *(uint64_t **)(v31 + 32);
          continue;
        case 6:
          BOOL v30 = (uint64_t *)(v31 + 40);
          continue;
        case 0xE:
          uint64_t v32 = *(uint64_t **)(v31 - 8);
          goto LABEL_32;
        default:
          uint64_t v32 = *(uint64_t **)(v31 + 32);
LABEL_32:
          uint64_t v33 = *v32;
          unsigned int v34 = *(_DWORD *)(*v32 + 8);
          uint64_t v35 = *(void *)(*(void *)this + 40);
          if (v34 == 15)
          {
            if ((v34 & 0xFE) == 0x12) {
              unsigned int v34 = *(_DWORD *)(**(void **)(v33 + 16) + 8);
            }
            uint64_t v95 = *(void *)(v35 + 504);
            if (v34 < 0x100) {
              goto LABEL_164;
            }
            unsigned int v96 = v34 >> 8;
            unint64_t v97 = *(unsigned int *)(v35 + 512);
            uint64_t v98 = *(void *)(v35 + 504);
            if (v97)
            {
              uint64_t v98 = v95;
              unint64_t v99 = v97;
              do
              {
                unint64_t v100 = v99 >> 1;
                uint64_t v101 = v98 + 16 * (v99 >> 1);
                unsigned int v102 = *(_DWORD *)(v101 + 8);
                uint64_t v103 = v101 + 16;
                v99 += ~(v99 >> 1);
                if (v102 < v96) {
                  uint64_t v98 = v103;
                }
                else {
                  unint64_t v99 = v100;
                }
              }
              while (v99);
            }
            if (v98 == v95 + 16 * v97 || *(_DWORD *)(v98 + 8) != v96) {
LABEL_164:
            }
              uint64_t v98 = v95;
            unsigned int v37 = *(_DWORD *)(v98 + 12);
          }
          else
          {
            unsigned int v37 = sub_1CB83544C(v35 + 272, v33);
            if (v36 == 1) {
          }
            }
          int64_t v38 = a3;
          while (2)
          {
            switch(*((_WORD *)v38 + 12))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                int v40 = (uint64_t *)((char *)v38 + 40);
                goto LABEL_43;
              case 4:
                int v40 = (uint64_t *)((char *)v38 + 48);
                goto LABEL_43;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                unint64_t v39 = (const llvm::SCEV **)*((void *)v38 + 4);
                goto LABEL_38;
              case 6:
                unint64_t v39 = (const llvm::SCEV **)((char *)v38 + 40);
LABEL_38:
                int64_t v38 = *v39;
                continue;
              case 0xE:
                int v40 = (uint64_t *)*((void *)v38 - 1);
                goto LABEL_43;
              default:
                int v40 = (uint64_t *)*((void *)v38 + 4);
LABEL_43:
                unsigned int v309 = v37;
                uint64_t v41 = *v40;
                unsigned int v42 = *(_DWORD *)(*v40 + 8);
                uint64_t v43 = *(void *)(*(void *)this + 40);
                if (v42 == 15)
                {
                  if ((v42 & 0xFE) == 0x12) {
                    unsigned int v42 = *(_DWORD *)(**(void **)(v41 + 16) + 8);
                  }
                  uint64_t v104 = *(void *)(v43 + 504);
                  if (v42 < 0x100) {
                    goto LABEL_177;
                  }
                  unsigned int v105 = v42 >> 8;
                  unint64_t v106 = *(unsigned int *)(v43 + 512);
                  uint64_t v107 = *(void *)(v43 + 504);
                  if (v106)
                  {
                    uint64_t v107 = v104;
                    unint64_t v108 = v106;
                    do
                    {
                      unint64_t v109 = v108 >> 1;
                      uint64_t v110 = v107 + 16 * (v108 >> 1);
                      unsigned int v111 = *(_DWORD *)(v110 + 8);
                      uint64_t v112 = v110 + 16;
                      v108 += ~(v108 >> 1);
                      if (v111 < v105) {
                        uint64_t v107 = v112;
                      }
                      else {
                        unint64_t v108 = v109;
                      }
                    }
                    while (v108);
                  }
                  if (v107 == v104 + 16 * v106 || *(_DWORD *)(v107 + 8) != v105) {
LABEL_177:
                  }
                    uint64_t v107 = v104;
                  unsigned int v45 = *(_DWORD *)(v107 + 12);
                }
                else
                {
                  unsigned int v45 = sub_1CB83544C(v43 + 272, v41);
                  if (v44 == 1) {
                }
                  }
                unsigned int v312 = v45;
                uint64_t v46 = *(void *)(v18 + 40);
                if (v46 == 2)
                {
                  uint64_t v47 = *(void *)(*(void *)(v18 + 32) + 8);
                }
                else
                {
                  uint64_t v301 = *(void *)(v18 + 32);
                  unint64_t v331 = (unint64_t)v333;
                  uint64_t v332 = 0x300000000;
                  size_t v302 = 8 * v46 - 8;
                  if (v302 >= 0x19) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  int v303 = 0;
                  if (v46 != 1)
                  {
                    memcpy((void *)v331, (const void *)(v301 + 8), v302);
                    int v303 = v332;
                  }
                  LODWORD(v332) = v303 + (v302 >> 3);
                  uint64_t v47 = sub_1CD478318(this, (uint64_t)&v331, *(const llvm::Loop **)(v18 + 48), 0);
                  if ((void *)v331 != v333) {
                    free((void *)v331);
                  }
                }
                uint64_t v48 = (char **)llvm::ScalarEvolution::getRangeRef(this, v47, 0, 0);
                llvm::ConstantRange::getUnsignedMax(v48, (uint64_t)&v331);
                unsigned int v328 = v309;
                if (v309 <= 0x40)
                {
                  if (v309) {
                    unint64_t v49 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v309;
                  }
                  else {
                    unint64_t v49 = 0;
                  }
                  unint64_t v327 = v49;
                  unsigned int v324 = v332;
                  if (v332 <= 0x40)
                  {
                    unint64_t v323 = v331;
                    llvm::APInt::operator-=((uint64_t)&v323, 1uLL);
                    unsigned int v50 = v324;
                    unsigned int v326 = v324;
                    unint64_t v325 = v323;
                    unsigned int v324 = 0;
                    if (v326 > 0x40)
                    {
                      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v325);
                    }
                    else
                    {
                      if (v50) {
                        unint64_t v51 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v50;
                      }
                      else {
                        unint64_t v51 = 0;
                      }
                      unint64_t v325 = v51 & ~v323;
                    }
                    llvm::APInt::operator++((uint64_t)&v325);
                    unsigned int v52 = v326;
                    if (v326 >= 0x41)
                    {
                      uint64_t v281 = 0;
                      BOOL v282 = 0;
                      unint64_t v283 = v325;
                      unint64_t v53 = v327;
                      unint64_t v284 = ((unint64_t)v326 + 63) >> 6;
                      do
                      {
                        unint64_t v285 = *(void *)(v283 + v281);
                        unint64_t v286 = *(void *)(v53 + v281) + v285;
                        BOOL v287 = v286 < v285;
                        BOOL v288 = v286 + 1 <= v285;
                        if (v282)
                        {
                          ++v286;
                          BOOL v282 = v288;
                        }
                        else
                        {
                          BOOL v282 = v287;
                        }
                        *(void *)(v283 + v281) = v286;
                        v281 += 8;
                      }
                      while (8 * v284 != v281);
                      *(void *)(v325 + 8 * (v284 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v52;
                      unsigned int v52 = v326;
                      unint64_t v55 = v325;
                    }
                    else
                    {
                      unint64_t v53 = v327;
                      if (v326) {
                        unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v326;
                      }
                      else {
                        unint64_t v54 = 0;
                      }
                      unint64_t v55 = v54 & (v325 + v327);
                      unint64_t v325 = v55;
                    }
                    unsigned int v330 = v52;
                    unint64_t __src = v55;
                    unsigned int v326 = 0;
                    if (v324 >= 0x41 && v323) {
                      MEMORY[0x1D25D9CB0](v323, 0x1000C8000313F17);
                    }
                    if (v328 >= 0x41 && v53) {
                      MEMORY[0x1D25D9CB0](v53, 0x1000C8000313F17);
                    }
                    if (v312 > 0x40)
                    {
                      if (v330 != v312) {
                        operator new[]();
                      }
                      sub_1CD0463BC((uint64_t)&v327, (uint64_t)&__src);
                    }
                    else
                    {
                      unsigned int v328 = v312;
                      if (v312) {
                        unint64_t v56 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v312;
                      }
                      else {
                        unint64_t v56 = 0;
                      }
                      unint64_t v327 = v56 & __src;
                    }
                    if (v330 >= 0x41 && __src) {
                      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                    }
                    unint64_t __src = v327;
                    unsigned int v330 = v328;
                    llvm::ScalarEvolution::applyLoopGuards(this, a3, a4);
                  }
                  operator new[]();
                }
                llvm::APInt::initSlowCase((llvm::APInt *)&v327);
            }
          }
      }
    }
  }
LABEL_76:
  int v10 = a5;
LABEL_77:
  llvm::ScalarEvolution::setNoWrapFlags((int32x2_t *)this, v18, v20);
  if ((*(_WORD *)(v18 + 28) & 2) == 0)
  {
LABEL_78:
    uint64_t v17 = 0;
    goto LABEL_79;
  }
  uint64_t v79 = *(void *)(v18 + 40);
  if (v79 == 2)
  {
    unint64_t v80 = *(const llvm::SCEV **)(*(void *)(v18 + 32) + 8);
  }
  else
  {
    uint64_t v289 = *(void *)(v18 + 32);
    unint64_t v331 = (unint64_t)v333;
    uint64_t v332 = 0x300000000;
    unint64_t v290 = 8 * v79 - 8;
    if (v290 >= 0x19) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v291 = 0;
    if (v79 != 1)
    {
      memcpy((void *)v331, (const void *)(v289 + 8), 8 * v79 - 8);
      int v291 = v332;
    }
    LODWORD(v332) = v291 + (v290 >> 3);
    unint64_t v80 = (const llvm::SCEV *)sub_1CD478318(this, (uint64_t)&v331, *(const llvm::Loop **)(v18 + 48), 0);
    if ((void *)v331 != v333) {
      free((void *)v331);
    }
  }
  unsigned int v81 = (llvm::Type *)*((void *)v12 + 5);
  uint64_t v82 = sub_1CC0E4EF0(v18, v81, this, 0);
  uint64_t ZeroExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr(this, v80, v81, 0);
  uint64_t AddRecExpr = llvm::ScalarEvolution::getAddRecExpr(this, v82, ZeroExtendExpr, a4, *(_WORD *)(v18 + 28) & 7);
  if (*(_WORD *)(AddRecExpr + 24) == 7) {
    uint64_t v17 = (const llvm::SCEV *)AddRecExpr;
  }
  else {
    uint64_t v17 = 0;
  }
  int v10 = a5;
LABEL_79:
  if (v17) {
    int v16 = 0;
  }
  else {
    int v16 = a7;
  }
  if (v16 == 1) {
    uint64_t v17 = (const llvm::SCEV *)llvm::ScalarEvolution::convertSCEVToAddRecWithPredicates((uint64_t)this, (uint64_t)v12, (uint64_t)a4, (llvm::SmallPtrSetImplBase *)&v318);
  }
  if (!v17) {
    goto LABEL_183;
  }
LABEL_85:
  if (*((const llvm::Loop **)v17 + 6) != a4 || *((void *)v17 + 5) != 2) {
    goto LABEL_183;
  }
  if (a6)
  {
    if (v10) {
      __int16 v57 = 4;
    }
    else {
      __int16 v57 = 2;
    }
    BOOL v68 = (unsigned __int16)(v57 & *((_WORD *)v17 + 14)) == 0;
    int v58 = v10;
    int v59 = !v68;
  }
  else
  {
    int v58 = v10;
    int v59 = 0;
  }
  int v316 = v58;
  if (v58) {
    int v60 = 40;
  }
  else {
    int v60 = 36;
  }
  unsigned int v313 = v60;
  unint64_t UMaxExpr = *(void *)(*((void *)v17 + 4) + 8);
  uint64_t v62 = llvm::ScalarEvolution::getRangeRef(this, UMaxExpr, 1, 0);
  llvm::ConstantRange::getSignedMin(v62, (uint64_t)&v331);
  int v63 = v332;
  unsigned int v64 = v332 - 1;
  if (v332 <= 0x40)
  {
    if (((v331 >> v64) & 1) == 0 && v331) {
      goto LABEL_101;
    }
    goto LABEL_180;
  }
  if ((*(void *)(v331 + 8 * (v64 >> 6)) >> v64))
  {
    MEMORY[0x1D25D9CB0]();
    goto LABEL_180;
  }
  int v91 = 0;
  int64_t v92 = ((unint64_t)v332 + 63) >> 6;
  do
  {
    BOOL v26 = v92-- < 1;
    if (v26) {
      break;
    }
    unint64_t v93 = *(void *)(v331 + 8 * v92);
    v91 += __clz(v93);
  }
  while (!v93);
  int v94 = v332 | 0xFFFFFFC0;
  if ((v332 & 0x3F) == 0) {
    int v94 = 0;
  }
  int v310 = v91 + v94;
  MEMORY[0x1D25D9CB0]();
  if (v310 == v63)
  {
LABEL_180:
    if (((v16 | v59 ^ 1) & 1) == 0)
    {
      if (llvm::ScalarEvolution::loopIsFiniteByAssumption(this, a4))
      {
        if (llvm::ScalarEvolution::getLoopProperties(this, a4))
        {
          int v73 = v316;
          if (!v316 || !llvm::ScalarEvolution::isKnownNonPositive(this, (const llvm::SCEV *)UMaxExpr))
          {
            if (llvm::ScalarEvolution::isKnownNonZero(this, (const llvm::SCEV *)UMaxExpr)) {
              goto LABEL_191;
            }
            if (llvm::ScalarEvolution::getLoopDisposition(this, a3, a4) == 1)
            {
              unint64_t MinusSCEV = llvm::ScalarEvolution::getMinusSCEV(this, **((llvm::SCEV ***)v17 + 4), (const llvm::APInt *)UMaxExpr, 0, 0);
              if ((llvm::ScalarEvolution::isLoopEntryGuardedByCond((uint64_t)this, (uint64_t)a4, v313, MinusSCEV, (uint64_t)a3) & 1) == 0)
              {
                unint64_t v141 = UMaxExpr;
                while (2)
                {
                  switch(*(_WORD *)(v141 + 24))
                  {
                    case 1:
                    case 2:
                    case 3:
                    case 0xD:
                      unsigned int v253 = (uint64_t ***)(v141 + 40);
                      goto LABEL_400;
                    case 4:
                      unsigned int v253 = (uint64_t ***)(v141 + 48);
                      goto LABEL_400;
                    case 5:
                    case 7:
                    case 8:
                    case 9:
                    case 0xA:
                    case 0xB:
                    case 0xC:
                      unsigned int v142 = *(unint64_t **)(v141 + 32);
                      goto LABEL_237;
                    case 6:
                      unsigned int v142 = (unint64_t *)(v141 + 40);
LABEL_237:
                      unint64_t v141 = *v142;
                      continue;
                    case 0xE:
                      unsigned int v253 = *(uint64_t ****)(v141 - 8);
                      goto LABEL_400;
                    default:
                      unsigned int v253 = *(uint64_t ****)(v141 + 32);
LABEL_400:
                      unsigned int v254 = *v253;
                      unsigned int v255 = *((_DWORD *)*v253 + 2);
                      if (v255 != 13)
                      {
                        uint64_t v256 = *(void *)(*(void *)this + 40);
                        if ((v255 & 0xFE) == 0x12) {
                          unsigned int v255 = *(_DWORD *)(*v254[2] + 8);
                        }
                        uint64_t v257 = *(void *)(v256 + 504);
                        if (v255 < 0x100) {
                          goto LABEL_412;
                        }
                        unsigned int v258 = v255 >> 8;
                        unint64_t v259 = *(unsigned int *)(v256 + 512);
                        uint64_t v260 = v257;
                        if (v259)
                        {
                          uint64_t v260 = v257;
                          unint64_t v261 = v259;
                          do
                          {
                            unint64_t v262 = v261 >> 1;
                            uint64_t v263 = v260 + 16 * (v261 >> 1);
                            unsigned int v264 = *(_DWORD *)(v263 + 8);
                            uint64_t v265 = v263 + 16;
                            v261 += ~(v261 >> 1);
                            if (v264 < v258) {
                              uint64_t v260 = v265;
                            }
                            else {
                              unint64_t v261 = v262;
                            }
                          }
                          while (v261);
                        }
                        if (v260 == v257 + 16 * v259 || *(_DWORD *)(v260 + 8) != v258) {
LABEL_412:
                        }
                          uint64_t v260 = v257;
                        uint64_t v266 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v254, (llvm::LLVMContext *)*(unsigned int *)(v260 + 12));
                        if ((v254[1] & 0xFE) == 0x12)
                        {
                          int v305 = (llvm::Type *)*((unsigned int *)v254 + 8);
                          if (*((_DWORD *)v254 + 2) == 19) {
                            llvm::ScalableVectorType::get(v266, v305);
                          }
                          else {
                            llvm::FixedVectorType::get((llvm::FixedVectorType *)v266, v305);
                          }
                          unsigned int v254 = v306;
                          int v73 = v316;
                        }
                        else
                        {
                          unsigned int v254 = v266;
                        }
                      }
                      uint64_t v267 = (llvm::ConstantInt *)*v254;
                      unsigned int v268 = *((_DWORD *)v254 + 2);
                      LODWORD(v332) = v268 >> 8;
                      if (v268 >> 8 > 0x40) {
                        operator new[]();
                      }
                      if (v268 <= 0xFF) {
                        LOBYTE(v269) = 0;
                      }
                      else {
                        unint64_t v269 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v268) + 63);
                      }
                      unint64_t v331 = v269 & 1;
                      uint64_t v270 = (llvm::ConstantInt *)llvm::ConstantInt::get(v267, (llvm::LLVMContext *)&v331, v140);
                      if (v332 >= 0x41 && v331) {
                        MEMORY[0x1D25D9CB0](v331, 0x1000C8000313F17);
                      }
                      unint64_t Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(this, v270);
                      unint64_t UMaxExpr = llvm::ScalarEvolution::getUMaxExpr(this, (const llvm::SCEV *)UMaxExpr, Constant);
                      break;
                  }
                  break;
                }
              }
              goto LABEL_191;
            }
          }
        }
      }
    }
    goto LABEL_183;
  }
LABEL_101:
  int v65 = 0;
  if (UMaxExpr && !*(_WORD *)(UMaxExpr + 24))
  {
    uint64_t v66 = *(void *)(UMaxExpr + 32);
    uint64_t v67 = *(unsigned int *)(v66 + 32);
    if (v67 > 0x40)
    {
      int v69 = 0;
      int64_t v70 = (unint64_t)(v67 + 63) >> 6;
      do
      {
        BOOL v26 = v70-- < 1;
        if (v26) {
          break;
        }
        unint64_t v71 = *(void *)(*(void *)(v66 + 24) + 8 * v70);
        v69 += __clz(v71);
      }
      while (!v71);
      int v72 = v67 | 0xFFFFFFC0;
      if ((v67 & 0x3F) == 0) {
        int v72 = 0;
      }
      BOOL v68 = v69 + v72 == v67 - 1;
    }
    else
    {
      BOOL v68 = *(void *)(v66 + 24) == 1;
    }
    int v65 = v68;
  }
  if (((v65 | v59) & 1) == 0)
  {
    int v73 = v316;
    if (!llvm::ScalarEvolution::canIVOverflowOnLT(this, a3, (const llvm::SCEV *)UMaxExpr, v316)) {
      goto LABEL_191;
    }
    if (llvm::ScalarEvolution::getLoopDisposition(this, a3, a4) == 1)
    {
      uint64_t v74 = *((void *)v17 + 5);
      if (v74 == 2)
      {
        uint64_t v75 = *(void *)(*((void *)v17 + 4) + 8);
      }
      else
      {
        uint64_t v293 = *((void *)v17 + 4);
        unint64_t v331 = (unint64_t)v333;
        uint64_t v332 = 0x300000000;
        unint64_t v294 = 8 * v74 - 8;
        if (v294 >= 0x19) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v295 = 0;
        if (v74 != 1)
        {
          memcpy((void *)v331, (const void *)(v293 + 8), 8 * v74 - 8);
          int v295 = v332;
        }
        LODWORD(v332) = v295 + (v294 >> 3);
        uint64_t v75 = sub_1CD478318(this, (uint64_t)&v331, *((const llvm::Loop **)v17 + 6), 0);
        if ((void *)v331 != v333) {
          free((void *)v331);
        }
      }
      int v73 = v316;
      if (v75)
      {
        if (!*(_WORD *)(v75 + 24))
        {
          unint64_t v76 = *(int8x8_t **)(v75 + 32);
          uint64_t v77 = v76[4].u32[0];
          if (v77 > 0x40)
          {
            int v85 = 0;
            unint64_t v86 = (unint64_t)(v77 + 63) >> 6;
            unint64_t v87 = (int8x8_t *)v76[3];
            do
            {
              int8x8_t v88 = *v87++;
              uint8x8_t v89 = (uint8x8_t)vcnt_s8(v88);
              v89.i16[0] = vaddlv_u8(v89);
              v85 += v89.i32[0];
              --v86;
            }
            while (v86);
            if (v85 != 1 || a6 == 0) {
              goto LABEL_183;
            }
          }
          else
          {
            uint8x8_t v78 = (uint8x8_t)vcnt_s8(v76[3]);
            v78.i16[0] = vaddlv_u8(v78);
            if (v78.u32[0] != 1 || (a6 & 1) == 0) {
              goto LABEL_183;
            }
          }
          if ((llvm::ScalarEvolution::getLoopProperties(this, a4) & 1) != 0
            && (llvm::ScalarEvolution::loopIsFiniteByAssumption(this, a4) & 1) != 0)
          {
            goto LABEL_191;
          }
        }
      }
    }
LABEL_183:
    uint64_t v113 = *((void *)this + 6);
    uint64_t v114 = a8;
    unint64_t v115 = v113;
LABEL_184:
    char v116 = 0;
    char v117 = 0;
    uint64_t v118 = 0;
    goto LABEL_185;
  }
  int v73 = v316;
LABEL_191:
  unsigned int v119 = (llvm::SCEV *)**((void **)v17 + 4);
  uint64_t v120 = v119;
  while (2)
  {
    switch(*((_WORD *)v120 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        char v122 = (char *)v120 + 40;
        goto LABEL_199;
      case 4:
        char v122 = (char *)v120 + 48;
        goto LABEL_199;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        unsigned int v121 = (llvm::SCEV **)*((void *)v120 + 4);
        goto LABEL_194;
      case 6:
        unsigned int v121 = (llvm::SCEV **)((char *)v120 + 40);
LABEL_194:
        uint64_t v120 = *v121;
        continue;
      case 0xE:
        char v122 = (char *)*((void *)v120 - 1);
        goto LABEL_199;
      default:
        char v122 = (char *)*((void *)v120 + 4);
LABEL_199:
        LosslessPtrToIntExpr = (const llvm::SCEV *)**((void **)v17 + 4);
        if (*(unsigned char *)(*(void *)v122 + 8) == 15)
        {
          LosslessPtrToIntExpr = llvm::ScalarEvolution::getLosslessPtrToIntExpr(this, **((const llvm::SCEV ***)v17 + 4));
          if (*((_WORD *)LosslessPtrToIntExpr + 12) == 15)
          {
            uint64_t v114 = a8;
            uint64_t v113 = (uint64_t)LosslessPtrToIntExpr;
            unint64_t v115 = (unint64_t)LosslessPtrToIntExpr;
            goto LABEL_184;
          }
        }
        uint64_t v124 = a3;
        break;
    }
    break;
  }
  while (2)
  {
    switch(*((_WORD *)v124 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        unint64_t v126 = (char *)v124 + 40;
        goto LABEL_210;
      case 4:
        unint64_t v126 = (char *)v124 + 48;
        goto LABEL_210;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        unsigned int v125 = (const llvm::SCEV **)*((void *)v124 + 4);
        goto LABEL_205;
      case 6:
        unsigned int v125 = (const llvm::SCEV **)((char *)v124 + 40);
LABEL_205:
        uint64_t v124 = *v125;
        continue;
      case 0xE:
        unint64_t v126 = (char *)*((void *)v124 - 1);
        goto LABEL_210;
      default:
        unint64_t v126 = (char *)*((void *)v124 + 4);
LABEL_210:
        unsigned int v127 = a3;
        if (*(unsigned char *)(*(void *)v126 + 8) == 15)
        {
          unsigned int v127 = llvm::ScalarEvolution::getLosslessPtrToIntExpr(this, a3);
          if (*((_WORD *)v127 + 12) == 15)
          {
            uint64_t v114 = a8;
            uint64_t v113 = (uint64_t)v127;
            unint64_t v115 = (unint64_t)v127;
            goto LABEL_184;
          }
        }
        if (llvm::ScalarEvolution::getLoopDisposition(this, v127, a4) != 1)
        {
          while (2)
          {
            switch(*((_WORD *)v12 + 12))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                unsigned int v133 = (uint64_t *)((char *)v12 + 40);
                goto LABEL_228;
              case 4:
                unsigned int v133 = (uint64_t *)((char *)v12 + 48);
                goto LABEL_228;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                uint64_t v132 = (const llvm::SCEV **)*((void *)v12 + 4);
                goto LABEL_223;
              case 6:
                uint64_t v132 = (const llvm::SCEV **)((char *)v12 + 40);
LABEL_223:
                unsigned int v12 = *v132;
                continue;
              case 0xE:
                unsigned int v133 = (uint64_t *)*((void *)v12 - 1);
                goto LABEL_228;
              default:
                unsigned int v133 = (uint64_t *)*((void *)v12 + 4);
LABEL_228:
                uint64_t v134 = *v133;
                unsigned int v135 = *(_DWORD *)(*v133 + 8);
                uint64_t v136 = *(void *)(*(void *)this + 40);
                if (v135 == 15)
                {
                  if ((v135 & 0xFE) == 0x12) {
                    unsigned int v135 = *(_DWORD *)(**(void **)(v134 + 16) + 8);
                  }
                  uint64_t v244 = *(void *)(v136 + 504);
                  if (v135 < 0x100) {
                    goto LABEL_393;
                  }
                  unsigned int v245 = v135 >> 8;
                  unint64_t v246 = *(unsigned int *)(v136 + 512);
                  uint64_t v247 = *(void *)(v136 + 504);
                  if (v246)
                  {
                    uint64_t v247 = v244;
                    unint64_t v248 = v246;
                    do
                    {
                      unint64_t v249 = v248 >> 1;
                      uint64_t v250 = v247 + 16 * (v248 >> 1);
                      unsigned int v251 = *(_DWORD *)(v250 + 8);
                      uint64_t v252 = v250 + 16;
                      v248 += ~(v248 >> 1);
                      if (v251 < v245) {
                        uint64_t v247 = v252;
                      }
                      else {
                        unint64_t v248 = v249;
                      }
                    }
                    while (v248);
                  }
                  if (v247 == v244 + 16 * v246 || *(_DWORD *)(v247 + 8) != v245) {
LABEL_393:
                  }
                    uint64_t v247 = v244;
                  unsigned int v138 = *(_DWORD *)(v247 + 12);
                }
                else
                {
                  unsigned int v138 = sub_1CB83544C(v136 + 272, v134);
                  if (v137 == 1) {
                }
                  }
                unint64_t v115 = llvm::ScalarEvolution::computeMaxBECountForLT((llvm::ConstantInt ****)this, LosslessPtrToIntExpr, (const llvm::SCEV *)UMaxExpr, v127, v138, v73);
                uint64_t v113 = *((void *)this + 6);
                unint64_t v331 = (unint64_t)&v318;
                char v117 = &v331;
                uint64_t v114 = a8;
                char v116 = 0;
                break;
            }
            goto LABEL_379;
          }
        }
        unint64_t v311 = v127;
        unint64_t v128 = llvm::ScalarEvolution::getMinusSCEV(this, v119, (const llvm::APInt *)UMaxExpr, 0, 0);
        unsigned int v307 = LosslessPtrToIntExpr;
        if (llvm::ScalarEvolution::isLoopEntryGuardedByCond((uint64_t)this, (uint64_t)a4, v313, v128, (uint64_t)v119)&& llvm::ScalarEvolution::isLoopEntryGuardedByCond((uint64_t)this, (uint64_t)a4, v313, v128, (uint64_t)a3))
        {
          unint64_t v130 = UMaxExpr;
          while (2)
          {
            switch(*(_WORD *)(v130 + 24))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                uint64_t v143 = (uint64_t ***)(v130 + 40);
                goto LABEL_244;
              case 4:
                uint64_t v143 = (uint64_t ***)(v130 + 48);
                goto LABEL_244;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                unsigned int v131 = *(unint64_t **)(v130 + 32);
                goto LABEL_219;
              case 6:
                unsigned int v131 = (unint64_t *)(v130 + 40);
LABEL_219:
                unint64_t v130 = *v131;
                continue;
              case 0xE:
                uint64_t v143 = *(uint64_t ****)(v130 - 8);
                goto LABEL_244;
              default:
                uint64_t v143 = *(uint64_t ****)(v130 + 32);
LABEL_244:
                unsigned int v144 = *v143;
                unsigned int v145 = *((_DWORD *)*v143 + 2);
                if (v145 != 13)
                {
                  uint64_t v146 = *(void *)(*(void *)this + 40);
                  if ((v145 & 0xFE) == 0x12) {
                    unsigned int v145 = *(_DWORD *)(*v144[2] + 8);
                  }
                  uint64_t v147 = *(void *)(v146 + 504);
                  if (v145 < 0x100) {
                    goto LABEL_256;
                  }
                  unsigned int v148 = v145 >> 8;
                  unint64_t v149 = *(unsigned int *)(v146 + 512);
                  uint64_t v150 = v147;
                  if (v149)
                  {
                    uint64_t v150 = v147;
                    unint64_t v151 = v149;
                    do
                    {
                      unint64_t v152 = v151 >> 1;
                      uint64_t v153 = v150 + 16 * (v151 >> 1);
                      unsigned int v154 = *(_DWORD *)(v153 + 8);
                      uint64_t v155 = v153 + 16;
                      v151 += ~(v151 >> 1);
                      if (v154 < v148) {
                        uint64_t v150 = v155;
                      }
                      else {
                        unint64_t v151 = v152;
                      }
                    }
                    while (v151);
                  }
                  if (v150 == v147 + 16 * v149 || *(_DWORD *)(v150 + 8) != v148) {
LABEL_256:
                  }
                    uint64_t v150 = v147;
                  uint64_t v156 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v144, (llvm::LLVMContext *)*(unsigned int *)(v150 + 12));
                  if ((v144[1] & 0xFE) == 0x12)
                  {
                    unsigned int v304 = (llvm::Type *)*((unsigned int *)v144 + 8);
                    if (*((_DWORD *)v144 + 2) == 19) {
                      llvm::ScalableVectorType::get(v156, v304);
                    }
                    else {
                      llvm::FixedVectorType::get((llvm::FixedVectorType *)v156, v304);
                    }
                  }
                  unsigned int v144 = v156;
                }
                unint64_t v157 = (llvm::ConstantInt *)*v144;
                unsigned int v158 = *((_DWORD *)v144 + 2);
                LODWORD(v332) = v158 >> 8;
                if (v158 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v158 <= 0xFF) {
                  unint64_t v159 = 0;
                }
                else {
                  unint64_t v159 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v158) + 63);
                }
                unint64_t v331 = v159;
                unint64_t v160 = (llvm::ConstantInt *)llvm::ConstantInt::get(v157, (llvm::LLVMContext *)&v331, v129);
                if (v332 >= 0x41 && v331) {
                  MEMORY[0x1D25D9CB0](v331, 0x1000C8000313F17);
                }
                unint64_t v161 = llvm::ScalarEvolution::getConstant(this, v160);
                unsigned int v162 = (llvm::SCEV *)sub_1CBFD7D6C(this, v311, v161, 0, 0);
                uint64_t v163 = (const llvm::APInt *)llvm::ScalarEvolution::getMinusSCEV(this, LosslessPtrToIntExpr, (const llvm::APInt *)UMaxExpr, 0, 0);
                uint64_t v164 = (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(this, v162, v163, 0, 0);
                uint64_t UDivExpr = llvm::ScalarEvolution::getUDivExpr(this, v164, UMaxExpr);
                int v73 = v316;
                if (!UDivExpr) {
                  goto LABEL_267;
                }
                uint64_t v166 = UDivExpr;
                unint64_t v167 = (_WORD *)(UDivExpr + 24);
                if (!*(_WORD *)(UDivExpr + 24)) {
                  goto LABEL_364;
                }
                goto LABEL_360;
            }
          }
        }
LABEL_267:
        if (v73) {
          uint64_t v168 = 39;
        }
        else {
          uint64_t v168 = 35;
        }
        if (llvm::ScalarEvolution::isLoopEntryGuardedByCond((uint64_t)this, (uint64_t)a4, v168, (uint64_t)a3, (uint64_t)v119))
        {
          unint64_t UDivCeilSCEV = 0;
          uint64_t v171 = v311;
        }
        else
        {
          if (v73) {
            int v172 = 38;
          }
          else {
            int v172 = 34;
          }
          unsigned int v314 = v172;
          unsigned int v173 = v119;
          while (2)
          {
            switch(*((_WORD *)v173 + 12))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                unsigned int v175 = (uint64_t ***)((char *)v173 + 40);
                goto LABEL_283;
              case 4:
                unsigned int v175 = (uint64_t ***)((char *)v173 + 48);
                goto LABEL_283;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                uint64_t v174 = (llvm::SCEV **)*((void *)v173 + 4);
                goto LABEL_278;
              case 6:
                uint64_t v174 = (llvm::SCEV **)((char *)v173 + 40);
LABEL_278:
                unsigned int v173 = *v174;
                continue;
              case 0xE:
                unsigned int v175 = (uint64_t ***)*((void *)v173 - 1);
                goto LABEL_283;
              default:
                unsigned int v175 = (uint64_t ***)*((void *)v173 + 4);
LABEL_283:
                unsigned int v176 = *v175;
                unsigned int v177 = *((_DWORD *)*v175 + 2);
                if (v177 != 13)
                {
                  uint64_t v178 = *(void *)(*(void *)this + 40);
                  if ((v177 & 0xFE) == 0x12) {
                    unsigned int v177 = *(_DWORD *)(*v176[2] + 8);
                  }
                  uint64_t v179 = *(void *)(v178 + 504);
                  if (v177 < 0x100) {
                    goto LABEL_295;
                  }
                  unsigned int v180 = v177 >> 8;
                  unint64_t v181 = *(unsigned int *)(v178 + 512);
                  uint64_t v182 = v179;
                  if (v181)
                  {
                    uint64_t v182 = v179;
                    unint64_t v183 = v181;
                    do
                    {
                      unint64_t v184 = v183 >> 1;
                      uint64_t v185 = v182 + 16 * (v183 >> 1);
                      unsigned int v186 = *(_DWORD *)(v185 + 8);
                      uint64_t v187 = v185 + 16;
                      v183 += ~(v183 >> 1);
                      if (v186 < v180) {
                        uint64_t v182 = v187;
                      }
                      else {
                        unint64_t v183 = v184;
                      }
                    }
                    while (v183);
                  }
                  if (v182 == v179 + 16 * v181 || *(_DWORD *)(v182 + 8) != v180) {
LABEL_295:
                  }
                    uint64_t v182 = v179;
                  int v188 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v176, (llvm::LLVMContext *)*(unsigned int *)(v182 + 12));
                  if ((v176[1] & 0xFE) == 0x12)
                  {
                    int v299 = (llvm::Type *)*((unsigned int *)v176 + 8);
                    if (*((_DWORD *)v176 + 2) == 19) {
                      llvm::ScalableVectorType::get(v188, v299);
                    }
                    else {
                      llvm::FixedVectorType::get((llvm::FixedVectorType *)v188, v299);
                    }
                    unsigned int v176 = v300;
                  }
                  else
                  {
                    unsigned int v176 = v188;
                  }
                }
                unsigned int v189 = (llvm::ConstantInt *)*v176;
                unsigned int v190 = *((_DWORD *)v176 + 2);
                LODWORD(v332) = v190 >> 8;
                if (v190 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v190 <= 0xFF) {
                  unint64_t v191 = 0;
                }
                else {
                  unint64_t v191 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v190) + 63);
                }
                unint64_t v331 = v191;
                unsigned int v192 = (llvm::ConstantInt *)llvm::ConstantInt::get(v189, (llvm::LLVMContext *)&v331, v169);
                if (v332 >= 0x41 && v331) {
                  MEMORY[0x1D25D9CB0](v331, 0x1000C8000313F17);
                }
                unint64_t v193 = llvm::ScalarEvolution::getConstant(this, v192);
                unint64_t v331 = (unint64_t)v333;
                v333[0] = v119;
                v333[1] = v193;
                uint64_t v332 = 0x200000002;
                uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(this, &v331, 0, 0);
                if ((void *)v331 != v333) {
                  free((void *)v331);
                }
                if (llvm::ScalarEvolution::isLoopEntryGuardedByCond((uint64_t)this, (uint64_t)a4, v314, (uint64_t)a3, AddExpr))
                {
                  unint64_t UDivCeilSCEV = 0;
                  uint64_t v171 = v311;
                }
                else
                {
                  if (v316) {
                    uint64_t SMaxExpr = llvm::ScalarEvolution::getSMaxExpr(this, v311, LosslessPtrToIntExpr);
                  }
                  else {
                    uint64_t SMaxExpr = llvm::ScalarEvolution::getUMaxExpr(this, v311, LosslessPtrToIntExpr);
                  }
                  uint64_t v171 = (llvm::SCEV *)SMaxExpr;
                  unint64_t v196 = (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(this, v311, LosslessPtrToIntExpr, 0, 0);
                  unint64_t UDivCeilSCEV = llvm::ScalarEvolution::getUDivCeilSCEV(this, v196, (const llvm::SCEV *)UMaxExpr);
                }
                break;
            }
            break;
          }
        }
        unint64_t v197 = UMaxExpr;
        break;
    }
    break;
  }
  while (2)
  {
    switch(*(_WORD *)(v197 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        unint64_t v199 = (uint64_t ***)(v197 + 40);
        goto LABEL_319;
      case 4:
        unint64_t v199 = (uint64_t ***)(v197 + 48);
        goto LABEL_319;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        unint64_t v198 = *(unint64_t **)(v197 + 32);
        goto LABEL_314;
      case 6:
        unint64_t v198 = (unint64_t *)(v197 + 40);
LABEL_314:
        unint64_t v197 = *v198;
        continue;
      case 0xE:
        unint64_t v199 = *(uint64_t ****)(v197 - 8);
        goto LABEL_319;
      default:
        unint64_t v199 = *(uint64_t ****)(v197 + 32);
LABEL_319:
        uint64_t v200 = *v199;
        unsigned int v201 = *((_DWORD *)*v199 + 2);
        if (v201 != 13)
        {
          uint64_t v202 = *(void *)(*(void *)this + 40);
          if ((v201 & 0xFE) == 0x12) {
            unsigned int v201 = *(_DWORD *)(*v200[2] + 8);
          }
          uint64_t v203 = *(void *)(v202 + 504);
          if (v201 < 0x100) {
            goto LABEL_331;
          }
          unsigned int v204 = v201 >> 8;
          unint64_t v205 = *(unsigned int *)(v202 + 512);
          uint64_t v206 = v203;
          if (v205)
          {
            uint64_t v206 = v203;
            unint64_t v207 = v205;
            do
            {
              unint64_t v208 = v207 >> 1;
              uint64_t v209 = v206 + 16 * (v207 >> 1);
              unsigned int v210 = *(_DWORD *)(v209 + 8);
              uint64_t v211 = v209 + 16;
              v207 += ~(v207 >> 1);
              if (v210 < v204) {
                uint64_t v206 = v211;
              }
              else {
                unint64_t v207 = v208;
              }
            }
            while (v207);
          }
          if (v206 == v203 + 16 * v205 || *(_DWORD *)(v206 + 8) != v204) {
LABEL_331:
          }
            uint64_t v206 = v203;
          unint64_t v212 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v200, (llvm::LLVMContext *)*(unsigned int *)(v206 + 12));
          if ((v200[1] & 0xFE) == 0x12)
          {
            uint64_t v292 = (llvm::Type *)*((unsigned int *)v200 + 8);
            if (*((_DWORD *)v200 + 2) == 19) {
              llvm::ScalableVectorType::get(v212, v292);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v212, v292);
            }
          }
          uint64_t v200 = v212;
        }
        uint64_t v213 = (llvm::ConstantInt *)*v200;
        unsigned int v214 = *((_DWORD *)v200 + 2);
        LODWORD(v332) = v214 >> 8;
        if (v214 >> 8 > 0x40) {
          operator new[]();
        }
        if (v214 <= 0xFF) {
          LOBYTE(v215) = 0;
        }
        else {
          unint64_t v215 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v214) + 63);
        }
        unint64_t v331 = v215 & 1;
        uint64_t v216 = (llvm::ConstantInt *)llvm::ConstantInt::get(v213, (llvm::LLVMContext *)&v331, v169);
        if (v332 >= 0x41 && v331) {
          MEMORY[0x1D25D9CB0](v331, 0x1000C8000313F17);
        }
        unsigned int v217 = (const llvm::APInt *)llvm::ScalarEvolution::getConstant(this, v216);
        if (UMaxExpr && !*(_WORD *)(UMaxExpr + 24))
        {
          uint64_t v218 = *(int8x8_t **)(UMaxExpr + 32);
          uint64_t v219 = v218[4].u32[0];
          if (v219 > 0x40)
          {
            int v226 = 0;
            unint64_t v227 = (unint64_t)(v219 + 63) >> 6;
            uint64_t v228 = (int8x8_t *)v218[3];
            do
            {
              int8x8_t v229 = *v228++;
              uint8x8_t v230 = (uint8x8_t)vcnt_s8(v229);
              v230.i16[0] = vaddlv_u8(v230);
              v226 += v230.i32[0];
              --v227;
            }
            while (v227);
            BOOL v221 = v226 == 1;
          }
          else
          {
            uint8x8_t v220 = (uint8x8_t)vcnt_s8(v218[3]);
            v220.i16[0] = vaddlv_u8(v220);
            BOOL v221 = v220.u32[0] == 1;
          }
          unint64_t v222 = v307;
          if (!v221 && v307 != (const llvm::SCEV *)UMaxExpr) {
            goto LABEL_344;
          }
LABEL_354:
          int v224 = (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(this, v171, v222, 0, 0);
          goto LABEL_355;
        }
        unint64_t v222 = v307;
        if (v307 == (const llvm::SCEV *)UMaxExpr) {
          goto LABEL_354;
        }
LABEL_344:
        unint64_t v223 = llvm::ScalarEvolution::getMinusSCEV(this, (llvm::SCEV *)UMaxExpr, v217, 0, 0);
        int v224 = (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(this, v171, v222, 0, 0);
        if (v222 != (const llvm::APInt *)v223)
        {
          uint64_t v225 = llvm::ScalarEvolution::getUDivCeilSCEV(this, v224, (const llvm::SCEV *)UMaxExpr);
          goto LABEL_356;
        }
LABEL_355:
        unint64_t v232 = llvm::ScalarEvolution::getMinusSCEV(this, (llvm::SCEV *)UMaxExpr, v217, 0, 0);
        unint64_t v233 = (const llvm::SCEV *)sub_1CBFD7D6C(this, v224, v232, 0, 0);
        uint64_t v225 = llvm::ScalarEvolution::getUDivExpr(this, v233, UMaxExpr);
LABEL_356:
        uint64_t v166 = v225;
        unint64_t v167 = (_WORD *)(v225 + 24);
        if (*(_WORD *)(v225 + 24))
        {
          if (UDivCeilSCEV && !*(_WORD *)(UDivCeilSCEV + 24))
          {
            char v116 = 1;
          }
          else
          {
            LosslessPtrToIntExpr = v307;
LABEL_360:
            while (2)
            {
              switch(*((_WORD *)v12 + 12))
              {
                case 1:
                case 2:
                case 3:
                case 0xD:
                  unsigned int v235 = (uint64_t *)((char *)v12 + 40);
                  goto LABEL_369;
                case 4:
                  unsigned int v235 = (uint64_t *)((char *)v12 + 48);
                  goto LABEL_369;
                case 5:
                case 7:
                case 8:
                case 9:
                case 0xA:
                case 0xB:
                case 0xC:
                  uint64_t v234 = (const llvm::SCEV **)*((void *)v12 + 4);
                  goto LABEL_362;
                case 6:
                  uint64_t v234 = (const llvm::SCEV **)((char *)v12 + 40);
LABEL_362:
                  unsigned int v12 = *v234;
                  continue;
                case 0xE:
                  unsigned int v235 = (uint64_t *)*((void *)v12 - 1);
                  goto LABEL_369;
                default:
                  unsigned int v235 = (uint64_t *)*((void *)v12 + 4);
LABEL_369:
                  uint64_t v236 = *v235;
                  unsigned int v237 = *(_DWORD *)(*v235 + 8);
                  uint64_t v238 = *(void *)(*(void *)this + 40);
                  if (v237 == 15)
                  {
                    if ((v237 & 0xFE) == 0x12) {
                      unsigned int v237 = *(_DWORD *)(**(void **)(v236 + 16) + 8);
                    }
                    uint64_t v272 = *(void *)(v238 + 504);
                    if (v237 < 0x100) {
                      goto LABEL_432;
                    }
                    unsigned int v273 = v237 >> 8;
                    unint64_t v274 = *(unsigned int *)(v238 + 512);
                    uint64_t v275 = *(void *)(v238 + 504);
                    if (v274)
                    {
                      uint64_t v275 = v272;
                      unint64_t v276 = v274;
                      do
                      {
                        unint64_t v277 = v276 >> 1;
                        uint64_t v278 = v275 + 16 * (v276 >> 1);
                        unsigned int v279 = *(_DWORD *)(v278 + 8);
                        uint64_t v280 = v278 + 16;
                        v276 += ~(v276 >> 1);
                        if (v279 < v273) {
                          uint64_t v275 = v280;
                        }
                        else {
                          unint64_t v276 = v277;
                        }
                      }
                      while (v276);
                    }
                    if (v275 == v272 + 16 * v274 || *(_DWORD *)(v275 + 8) != v273) {
LABEL_432:
                    }
                      uint64_t v275 = v272;
                    unsigned int v240 = *(_DWORD *)(v275 + 12);
                  }
                  else
                  {
                    unsigned int v240 = sub_1CB83544C(v238 + 272, v236);
                    if (v239 == 1) {
                  }
                    }
                  unint64_t UDivCeilSCEV = llvm::ScalarEvolution::computeMaxBECountForLT((llvm::ConstantInt ****)this, LosslessPtrToIntExpr, (const llvm::SCEV *)UMaxExpr, v311, v240, v316);
                  if (*(_WORD *)(UDivCeilSCEV + 24) == 15 && *v167 != 15)
                  {
                    unint64_t v241 = (char **)llvm::ScalarEvolution::getRangeRef(this, v166, 0, 0);
                    llvm::ConstantRange::getUnsignedMax(v241, (uint64_t)&v331);
                    int v243 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&v331, v242);
                    unint64_t UDivCeilSCEV = llvm::ScalarEvolution::getConstant(this, v243);
                    if (v332 >= 0x41)
                    {
                      if (v331) {
                        MEMORY[0x1D25D9CB0](v331, 0x1000C8000313F17);
                      }
                    }
                  }
                  char v116 = 0;
                  break;
              }
              break;
            }
          }
        }
        else
        {
LABEL_364:
          char v116 = 0;
          unint64_t UDivCeilSCEV = v166;
        }
        unint64_t v331 = (unint64_t)&v318;
        char v117 = &v331;
        uint64_t v114 = a8;
        uint64_t v113 = v166;
        unint64_t v115 = UDivCeilSCEV;
LABEL_379:
        uint64_t v118 = 1;
LABEL_185:
        llvm::ScalarEvolution::ExitLimit::ExitLimit(v114, v113, v115, v116, (uint64_t)v117, v118);
        if (v319 != v318) {
          free(v319);
        }
        return;
    }
  }
}

void llvm::ScalarEvolution::howManyGreaterThans(llvm::ScalarEvolution *this@<X0>, const llvm::SCEV *a2@<X1>, const llvm::SCEV *a3@<X2>, const llvm::Loop *a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  v174[2] = *MEMORY[0x1E4F143B8];
  unsigned int v165 = v169;
  uint64_t v166 = v169;
  uint64_t v167 = 4;
  int v168 = 0;
  if (llvm::ScalarEvolution::getLoopDisposition(this, a3, a4) != 1) {
    goto LABEL_180;
  }
  if (*((_WORD *)a2 + 12) == 7) {
    int v16 = a2;
  }
  else {
    int v16 = 0;
  }
  if (v16) {
    BOOL v17 = 1;
  }
  else {
    BOOL v17 = a7 == 0;
  }
  if (!v17) {
    int v16 = (const llvm::SCEV *)llvm::ScalarEvolution::convertSCEVToAddRecWithPredicates((uint64_t)this, (uint64_t)a2, (uint64_t)a4, (llvm::SmallPtrSetImplBase *)&v165);
  }
  if (!v16 || *((const llvm::Loop **)v16 + 6) != a4 || *((void *)v16 + 5) != 2) {
    goto LABEL_180;
  }
  if (a6)
  {
    if (a5) {
      __int16 v18 = 4;
    }
    else {
      __int16 v18 = 2;
    }
    BOOL v19 = (unsigned __int16)(v18 & *((_WORD *)v16 + 14)) != 0;
  }
  else
  {
    BOOL v19 = 0;
  }
  if (a5) {
    uint64_t v20 = 38;
  }
  else {
    uint64_t v20 = 34;
  }
  unint64_t NegativeSCEV = (llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(this, *(void *)(*((void *)v16 + 4) + 8), 0);
  uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(this, NegativeSCEV, 1, 0);
  llvm::ConstantRange::getSignedMin(RangeRef, (uint64_t)&v172);
  int v22 = v173;
  unsigned int v23 = v173 - 1;
  if (v173 <= 0x40)
  {
    if ((((unint64_t)v172 >> v23) & 1) == 0 && v172) {
      goto LABEL_25;
    }
LABEL_180:
    uint64_t v44 = *((void *)this + 6);
    uint64_t v43 = a8;
    uint64_t v45 = v44;
    goto LABEL_181;
  }
  if ((*(void *)(v172 + 8 * (v23 >> 6)) >> v23))
  {
    MEMORY[0x1D25D9CB0]();
    goto LABEL_180;
  }
  int v125 = 0;
  int64_t v126 = ((unint64_t)v173 + 63) >> 6;
  do
  {
    BOOL v95 = v126-- < 1;
    if (v95) {
      break;
    }
    unint64_t v127 = *(void *)(v172 + 8 * v126);
    v125 += __clz(v127);
  }
  while (!v127);
  int v128 = v173 | 0xFFFFFFC0;
  if ((v173 & 0x3F) == 0) {
    int v128 = 0;
  }
  int v151 = v125 + v128;
  MEMORY[0x1D25D9CB0]();
  if (v151 == v22) {
    goto LABEL_180;
  }
LABEL_25:
  int v24 = 0;
  int64_t v25 = NegativeSCEV;
  if (NegativeSCEV && !*((_WORD *)NegativeSCEV + 12))
  {
    uint64_t v26 = *((void *)NegativeSCEV + 4);
    uint64_t v27 = *(unsigned int *)(v26 + 32);
    if (v27 > 0x40)
    {
      int v29 = 0;
      int64_t v30 = (unint64_t)(v27 + 63) >> 6;
      do
      {
        BOOL v95 = v30-- < 1;
        if (v95) {
          break;
        }
        unint64_t v31 = *(void *)(*(void *)(v26 + 24) + 8 * v30);
        v29 += __clz(v31);
      }
      while (!v31);
      int v32 = v27 | 0xFFFFFFC0;
      if ((v27 & 0x3F) == 0) {
        int v32 = 0;
      }
      BOOL v28 = v29 + v32 == v27 - 1;
    }
    else
    {
      BOOL v28 = *(void *)(v26 + 24) == 1;
    }
    int v24 = v28;
  }
  if (((v24 | v19) & 1) == 0)
  {
    BOOL canIVOverflowOnGT = llvm::ScalarEvolution::canIVOverflowOnGT(this, a3, NegativeSCEV, a5);
    int64_t v25 = NegativeSCEV;
    if (canIVOverflowOnGT) {
      goto LABEL_180;
    }
  }
  LosslessPtrToIntExpr = (const llvm::SCEV *)**((void **)v16 + 4);
  uint64_t v172 = (uint64_t)v174;
  v174[0] = LosslessPtrToIntExpr;
  v174[1] = v25;
  uint64_t v173 = 0x200000002;
  uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(this, &v172, 0, 0);
  if ((void *)v172 != v174) {
    free((void *)v172);
  }
  char isLoopEntryGuardedByCond = llvm::ScalarEvolution::isLoopEntryGuardedByCond((uint64_t)this, (uint64_t)a4, v20, AddExpr, (uint64_t)a3);
  unsigned int v37 = a3;
  if ((isLoopEntryGuardedByCond & 1) == 0)
  {
    uint64_t v38 = a5 ? 39 : 35;
    unsigned int v37 = a3;
    if ((llvm::ScalarEvolution::isLoopEntryGuardedByCond((uint64_t)this, (uint64_t)a4, v38, (uint64_t)LosslessPtrToIntExpr, (uint64_t)a3) & 1) == 0)
    {
      if (a5) {
        uint64_t SMinExpr = llvm::ScalarEvolution::getSMinExpr(this, a3, LosslessPtrToIntExpr);
      }
      else {
        uint64_t SMinExpr = llvm::ScalarEvolution::getUMinExpr(this, a3, LosslessPtrToIntExpr, 0);
      }
      unsigned int v37 = (const llvm::SCEV *)SMinExpr;
    }
  }
  int v40 = LosslessPtrToIntExpr;
  while (2)
  {
    switch(*((_WORD *)v40 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        unsigned int v42 = (char *)v40 + 40;
        goto LABEL_58;
      case 4:
        unsigned int v42 = (char *)v40 + 48;
        goto LABEL_58;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v41 = (const llvm::SCEV **)*((void *)v40 + 4);
        goto LABEL_53;
      case 6:
        uint64_t v41 = (const llvm::SCEV **)((char *)v40 + 40);
LABEL_53:
        int v40 = *v41;
        continue;
      case 0xE:
        unsigned int v42 = (char *)*((void *)v40 - 1);
        goto LABEL_58;
      default:
        unsigned int v42 = (char *)*((void *)v40 + 4);
LABEL_58:
        if (*(unsigned char *)(*(void *)v42 + 8) == 15)
        {
          LosslessPtrToIntExpr = llvm::ScalarEvolution::getLosslessPtrToIntExpr(this, LosslessPtrToIntExpr);
          if (*((_WORD *)LosslessPtrToIntExpr + 12) == 15)
          {
            uint64_t v43 = a8;
            uint64_t v44 = (uint64_t)LosslessPtrToIntExpr;
            uint64_t v45 = (uint64_t)LosslessPtrToIntExpr;
LABEL_181:
            llvm::ScalarEvolution::ExitLimit::ExitLimit(v43, v44, v45, 0, 0, 0);
            goto LABEL_182;
          }
        }
        uint64_t v46 = v37;
        while (2)
        {
          switch(*((_WORD *)v46 + 12))
          {
            case 1:
            case 2:
            case 3:
            case 0xD:
              uint64_t v48 = (char *)v46 + 40;
              goto LABEL_69;
            case 4:
              uint64_t v48 = (char *)v46 + 48;
              goto LABEL_69;
            case 5:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
              uint64_t v47 = (const llvm::SCEV **)*((void *)v46 + 4);
              goto LABEL_64;
            case 6:
              uint64_t v47 = (const llvm::SCEV **)((char *)v46 + 40);
LABEL_64:
              uint64_t v46 = *v47;
              continue;
            case 0xE:
              uint64_t v48 = (char *)*((void *)v46 - 1);
              goto LABEL_69;
            default:
              uint64_t v48 = (char *)*((void *)v46 + 4);
LABEL_69:
              if (*(unsigned char *)(*(void *)v48 + 8) == 15)
              {
                unsigned int v37 = llvm::ScalarEvolution::getLosslessPtrToIntExpr(this, v37);
                if (*((_WORD *)v37 + 12) == 15)
                {
                  uint64_t v43 = a8;
                  uint64_t v44 = (uint64_t)v37;
                  uint64_t v45 = (uint64_t)v37;
                  goto LABEL_181;
                }
              }
              unint64_t v49 = NegativeSCEV;
              while (2)
              {
                switch(*((_WORD *)v49 + 12))
                {
                  case 1:
                  case 2:
                  case 3:
                  case 0xD:
                    unint64_t v51 = (uint64_t ***)((char *)v49 + 40);
                    goto LABEL_80;
                  case 4:
                    unint64_t v51 = (uint64_t ***)((char *)v49 + 48);
                    goto LABEL_80;
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                  case 0xA:
                  case 0xB:
                  case 0xC:
                    unsigned int v50 = (llvm::SCEV **)*((void *)v49 + 4);
                    goto LABEL_75;
                  case 6:
                    unsigned int v50 = (llvm::SCEV **)((char *)v49 + 40);
LABEL_75:
                    unint64_t v49 = *v50;
                    continue;
                  case 0xE:
                    unint64_t v51 = (uint64_t ***)*((void *)v49 - 1);
                    goto LABEL_80;
                  default:
                    unint64_t v51 = (uint64_t ***)*((void *)v49 + 4);
LABEL_80:
                    unsigned int v52 = *v51;
                    unsigned int v53 = *((_DWORD *)*v51 + 2);
                    if (v53 != 13)
                    {
                      uint64_t v54 = *(void *)(*(void *)this + 40);
                      if ((v53 & 0xFE) == 0x12) {
                        unsigned int v53 = *(_DWORD *)(*v52[2] + 8);
                      }
                      uint64_t v55 = *(void *)(v54 + 504);
                      if (v53 < 0x100) {
                        goto LABEL_92;
                      }
                      unsigned int v56 = v53 >> 8;
                      unint64_t v57 = *(unsigned int *)(v54 + 512);
                      uint64_t v58 = v55;
                      if (v57)
                      {
                        uint64_t v58 = v55;
                        unint64_t v59 = v57;
                        do
                        {
                          unint64_t v60 = v59 >> 1;
                          uint64_t v61 = v58 + 16 * (v59 >> 1);
                          unsigned int v62 = *(_DWORD *)(v61 + 8);
                          uint64_t v63 = v61 + 16;
                          v59 += ~(v59 >> 1);
                          if (v62 < v56) {
                            uint64_t v58 = v63;
                          }
                          else {
                            unint64_t v59 = v60;
                          }
                        }
                        while (v59);
                      }
                      if (v58 == v55 + 16 * v57 || *(_DWORD *)(v58 + 8) != v56) {
LABEL_92:
                      }
                        uint64_t v58 = v55;
                      unsigned int v64 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v52, (llvm::LLVMContext *)*(unsigned int *)(v58 + 12));
                      if ((v52[1] & 0xFE) == 0x12)
                      {
                        uint64_t v150 = (llvm::Type *)*((unsigned int *)v52 + 8);
                        if (*((_DWORD *)v52 + 2) == 19) {
                          llvm::ScalableVectorType::get(v64, v150);
                        }
                        else {
                          llvm::FixedVectorType::get((llvm::FixedVectorType *)v64, v150);
                        }
                      }
                      unsigned int v52 = v64;
                    }
                    int v65 = (llvm::ConstantInt *)*v52;
                    unsigned int v66 = *((_DWORD *)v52 + 2);
                    LODWORD(v173) = v66 >> 8;
                    if (v66 >> 8 > 0x40) {
                      operator new[]();
                    }
                    if (v66 <= 0xFF) {
                      LOBYTE(v67) = 0;
                    }
                    else {
                      unint64_t v67 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v66) + 63);
                    }
                    uint64_t v172 = v67 & 1;
                    BOOL v68 = (llvm::ConstantInt *)llvm::ConstantInt::get(v65, (llvm::LLVMContext *)&v172, v36);
                    if (v173 >= 0x41 && v172) {
                      MEMORY[0x1D25D9CB0](v172, 0x1000C8000313F17);
                    }
                    unint64_t Constant = (const llvm::APInt *)llvm::ScalarEvolution::getConstant(this, v68);
                    unint64_t MinusSCEV = llvm::ScalarEvolution::getMinusSCEV(this, LosslessPtrToIntExpr, v37, 0, 0);
                    unint64_t v71 = llvm::ScalarEvolution::getMinusSCEV(this, NegativeSCEV, Constant, 0, 0);
                    int v72 = (const llvm::SCEV *)sub_1CBFD7D6C(this, MinusSCEV, v71, 0, 0);
                    uint64_t UDivExpr = (const llvm::APInt *)llvm::ScalarEvolution::getUDivExpr(this, v72, (unint64_t)NegativeSCEV);
                    if (a5)
                    {
                      uint64_t v74 = (_DWORD *)llvm::ScalarEvolution::getRangeRef(this, LosslessPtrToIntExpr, 1, 0);
                      llvm::ConstantRange::getSignedMax(v74, (uint64_t)&v172);
                      uint64_t v75 = llvm::ScalarEvolution::getRangeRef(this, NegativeSCEV, 1, 0);
                      llvm::ConstantRange::getSignedMin(v75, (uint64_t)&__src);
                    }
                    else
                    {
                      unint64_t v76 = (char **)llvm::ScalarEvolution::getRangeRef(this, LosslessPtrToIntExpr, 0, 0);
                      llvm::ConstantRange::getUnsignedMax(v76, (uint64_t)&v172);
                      uint64_t v77 = llvm::ScalarEvolution::getRangeRef(this, NegativeSCEV, 0, 0);
                      llvm::ConstantRange::getUnsignedMin(v77, (uint64_t)&__src);
                    }
                    break;
                }
                break;
              }
              break;
          }
          break;
        }
        break;
    }
    break;
  }
  while (2)
  {
    switch(*((_WORD *)a2 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        uint64_t v79 = (char *)a2 + 40;
        goto LABEL_110;
      case 4:
        uint64_t v79 = (char *)a2 + 48;
        goto LABEL_110;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint8x8_t v78 = (const llvm::SCEV **)*((void *)a2 + 4);
        goto LABEL_105;
      case 6:
        uint8x8_t v78 = (const llvm::SCEV **)((char *)a2 + 40);
LABEL_105:
        a2 = *v78;
        continue;
      case 0xE:
        uint64_t v79 = (char *)*((void *)a2 - 1);
        goto LABEL_110;
      default:
        uint64_t v79 = (char *)*((void *)a2 + 4);
LABEL_110:
        uint64_t v80 = *(void *)v79;
        unsigned int v81 = *(_DWORD *)(*(void *)v79 + 8);
        uint64_t v82 = *(void *)(*(void *)this + 40);
        if (v81 == 15)
        {
          if ((v81 & 0xFE) == 0x12) {
            unsigned int v81 = *(_DWORD *)(**(void **)(v80 + 16) + 8);
          }
          uint64_t v114 = *(void *)(v82 + 504);
          if (v81 < 0x100) {
            goto LABEL_200;
          }
          unsigned int v115 = v81 >> 8;
          unint64_t v116 = *(unsigned int *)(v82 + 512);
          uint64_t v117 = *(void *)(v82 + 504);
          if (v116)
          {
            uint64_t v117 = v114;
            unint64_t v118 = v116;
            do
            {
              unint64_t v119 = v118 >> 1;
              uint64_t v120 = v117 + 16 * (v118 >> 1);
              unsigned int v121 = *(_DWORD *)(v120 + 8);
              uint64_t v122 = v120 + 16;
              v118 += ~(v118 >> 1);
              if (v121 < v115) {
                uint64_t v117 = v122;
              }
              else {
                unint64_t v118 = v119;
              }
            }
            while (v118);
          }
          if (v117 == v114 + 16 * v116 || *(_DWORD *)(v117 + 8) != v115) {
LABEL_200:
          }
            uint64_t v117 = v114;
          unsigned int v84 = *(_DWORD *)(v117 + 12);
        }
        else
        {
          unsigned int v84 = sub_1CB83544C(v82 + 272, v80);
          if (v83 == 1) {
        }
          }
        if (a5)
        {
          unsigned int v160 = v84;
          if (v84 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v159);
          }
          uint64_t v159 = 1 << (v84 - 1);
          unsigned int v158 = v164;
          if (v164 > 0x40) {
            operator new[]();
          }
          unint64_t v157 = (char *)__src;
          llvm::APInt::operator-=((uint64_t)&v157, 1uLL);
          uint64_t v85 = v158;
          unint64_t v86 = (unint64_t)v157;
          unsigned int v158 = 0;
          if (v85 >= 0x41)
          {
            uint64_t v135 = 0;
            BOOL v136 = 0;
            uint64_t v137 = v159;
            unint64_t v138 = (unint64_t)(v85 + 63) >> 6;
            do
            {
              unint64_t v139 = *(void *)(v86 + v135);
              unint64_t v140 = *(void *)(v137 + v135) + v139;
              BOOL v141 = v140 < v139;
              BOOL v142 = v140 + 1 <= v139;
              if (v136)
              {
                ++v140;
                BOOL v136 = v142;
              }
              else
              {
                BOOL v136 = v141;
              }
              *(void *)(v86 + v135) = v140;
              v135 += 8;
            }
            while (8 * v138 != v135);
            *(void *)(v86 + 8 * (v138 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v85;
            int v161 = v85;
            unint64_t v162 = v86;
            if (v158 >= 0x41 && v157) {
              MEMORY[0x1D25D9CB0](v157, 0x1000C8000313F17);
            }
          }
          else
          {
            unint64_t v87 = (unint64_t)&v157[v159];
            unint64_t v88 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v85;
            if (!v85) {
              unint64_t v88 = 0;
            }
            unint64_t v86 = v88 & v87;
            int v161 = v85;
            unint64_t v162 = v88 & v87;
          }
          uint64_t v89 = llvm::ScalarEvolution::getRangeRef(this, a3, 1, 0);
          llvm::ConstantRange::getSignedMin(v89, (uint64_t)&v159);
          char v90 = &v160;
          if (v160 <= 0x40)
          {
            uint64_t v91 = -(uint64_t)v160;
            uint64_t v92 = v159 << v91 >> v91;
            uint64_t v93 = (uint64_t)(v86 << v91) >> v91;
            BOOL v95 = v92 < v93;
            int v94 = v92 > v93;
            if (v95) {
              int v94 = -1;
            }
            goto LABEL_129;
          }
          uint64_t v123 = *(void *)(v159 + 8 * ((v160 - 1) >> 6)) & (1 << (v160 - 1));
          uint64_t v124 = (unint64_t *)(v86 + 8 * ((v85 - 1) >> 6));
          if (v85 < 0x41) {
            uint64_t v124 = &v162;
          }
          if ((v123 != 0) == ((*v124 >> (v85 - 1)) & 1))
          {
            unint64_t v129 = (((unint64_t)v160 + 63) >> 3) & 0x3FFFFFF8;
            while (v129)
            {
              unint64_t v130 = *(void *)(v159 - 8 + v129);
              unint64_t v131 = *(void *)(v86 - 8 + v129);
              v129 -= 8;
              if (v130 != v131)
              {
                if (v130 > v131) {
                  int v94 = 1;
                }
                else {
                  int v94 = -1;
                }
                goto LABEL_129;
              }
            }
            int v94 = 0;
          }
          else if (v123)
          {
            int v94 = -1;
          }
          else
          {
            int v94 = 1;
          }
LABEL_129:
          BOOL v95 = v94 <= 0;
          unsigned int v96 = &v159;
          goto LABEL_142;
        }
        unsigned int v160 = v84;
        if (v84 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v159);
        }
        uint64_t v159 = 0;
        unsigned int v156 = v164;
        if (v164 > 0x40) {
          operator new[]();
        }
        uint64_t v155 = (char *)__src;
        llvm::APInt::operator-=((uint64_t)&v155, 1uLL);
        uint64_t v85 = v156;
        unint64_t v86 = (unint64_t)v155;
        unsigned int v156 = 0;
        if (v85 >= 0x41)
        {
          uint64_t v143 = 0;
          BOOL v144 = 0;
          uint64_t v97 = v159;
          unint64_t v145 = (unint64_t)(v85 + 63) >> 6;
          do
          {
            unint64_t v146 = *(void *)(v86 + v143);
            unint64_t v147 = *(void *)(v97 + v143) + v146;
            BOOL v148 = v147 < v146;
            BOOL v149 = v147 + 1 <= v146;
            if (v144)
            {
              ++v147;
              BOOL v144 = v149;
            }
            else
            {
              BOOL v144 = v148;
            }
            *(void *)(v86 + v143) = v147;
            v143 += 8;
          }
          while (8 * v145 != v143);
          *(void *)(v86 + 8 * (v145 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v85;
          int v161 = v85;
          unint64_t v162 = v86;
          if (v156 >= 0x41 && v155) {
            MEMORY[0x1D25D9CB0](v155, 0x1000C8000313F17);
          }
        }
        else
        {
          uint64_t v97 = v159;
          unint64_t v98 = (unint64_t)&v155[v159];
          unint64_t v99 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v85;
          if (!v85) {
            unint64_t v99 = 0;
          }
          unint64_t v86 = v99 & v98;
          int v161 = v85;
          unint64_t v162 = v99 & v98;
        }
        if (v160 >= 0x41 && v97) {
          MEMORY[0x1D25D9CB0](v97, 0x1000C8000313F17);
        }
        uint64_t v100 = llvm::ScalarEvolution::getRangeRef(this, a3, 0, 0);
        llvm::ConstantRange::getUnsignedMin(v100, (uint64_t)&v153);
        char v90 = &v154;
        if (v154 > 0x40)
        {
          unint64_t v132 = (((unint64_t)v154 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v132)
            {
              int v101 = 0;
              goto LABEL_141;
            }
            unint64_t v133 = *(void *)(v153 - 8 + v132);
            unint64_t v134 = *(void *)(v86 - 8 + v132);
            v132 -= 8;
          }
          while (v133 == v134);
          if (v133 > v134) {
            int v101 = 1;
          }
          else {
            int v101 = -1;
          }
        }
        else
        {
          int v101 = v153 > v86;
          if (v153 < v86) {
            int v101 = -1;
          }
        }
LABEL_141:
        BOOL v95 = v101 <= 0;
        unsigned int v96 = (uint64_t *)&v153;
LABEL_142:
        if (v95) {
          unsigned int v102 = (uint64_t *)&v162;
        }
        else {
          unsigned int v102 = v96;
        }
        if (v95) {
          char v90 = (unsigned int *)&v161;
        }
        if (*v90 > 0x40) {
          operator new[]();
        }
        uint64_t v103 = *v102;
        if ((a5 & 1) == 0)
        {
          if (v154 < 0x41) {
            goto LABEL_158;
          }
          uint64_t v104 = v153;
          if (!v153) {
            goto LABEL_158;
          }
LABEL_157:
          MEMORY[0x1D25D9CB0](v104, 0x1000C8000313F17);
          goto LABEL_158;
        }
        if (v160 >= 0x41)
        {
          uint64_t v104 = v159;
          if (v159) {
            goto LABEL_157;
          }
        }
LABEL_158:
        uint64_t v105 = (uint64_t)UDivExpr;
        if (*((_WORD *)UDivExpr + 12))
        {
          if (v173 >= 0x41) {
            operator new[]();
          }
          unint64_t v106 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v173;
          if (!v173) {
            unint64_t v106 = 0;
          }
          unsigned int v171 = v173;
          unsigned int v170 = (void *)(v106 & (v172 - v103));
          uint64_t v107 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&v170, UDivExpr);
          unint64_t v108 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(this, v107);
          uint64_t v110 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)this, (llvm::LLVMContext *)&__src, v109);
          unsigned int v111 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(this, v110);
          uint64_t UDivCeilSCEV = llvm::ScalarEvolution::getUDivCeilSCEV(this, v108, v111);
          if (v171 >= 0x41 && v170) {
            MEMORY[0x1D25D9CB0](v170, 0x1000C8000313F17);
          }
          if (*(_WORD *)(UDivCeilSCEV + 24) == 15) {
            uint64_t v105 = (uint64_t)UDivExpr;
          }
          else {
            uint64_t v105 = UDivCeilSCEV;
          }
        }
        unsigned int v170 = &v165;
        llvm::ScalarEvolution::ExitLimit::ExitLimit(a8, (uint64_t)UDivExpr, v105, 0, (uint64_t)&v170, 1);
        if (v85 >= 0x41 && v86) {
          MEMORY[0x1D25D9CB0](v86, 0x1000C8000313F17);
        }
        if (v164 >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
        if (v173 >= 0x41 && v172) {
          MEMORY[0x1D25D9CB0](v172, 0x1000C8000313F17);
        }
LABEL_182:
        if (v166 != v165) {
          free(v166);
        }
        return;
    }
  }
}

const llvm::SCEV *llvm::ScalarEvolution::getSCEVAtScope(llvm::ScalarEvolution *this, llvm::Value *a2, const llvm::Loop *a3)
{
  uint64_t v5 = *((void *)this + 13);
  unsigned int v6 = *((_DWORD *)this + 30);
  if (!v6)
  {
LABEL_7:
    uint64_t v8 = v5 + 48 * v6;
    goto LABEL_8;
  }
  unsigned int v7 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v8 = v5 + 48 * v7;
  unsigned int v9 = *(llvm::Value **)(v8 + 24);
  if (v9 != a2)
  {
    int v10 = 1;
    while (v9 != (llvm::Value *)-4096)
    {
      unsigned int v11 = v7 + v10++;
      unsigned int v7 = v11 & (v6 - 1);
      uint64_t v8 = v5 + 48 * v7;
      unsigned int v9 = *(llvm::Value **)(v8 + 24);
      if (v9 == a2) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v8 == v5 + 48 * v6 || (uint64_t SCEVIter = *(const llvm::SCEV **)(v8 + 40)) == 0) {
    uint64_t SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, (unint64_t)a2);
  }

  return llvm::ScalarEvolution::getSCEVAtScope(this, SCEVIter, a3);
}

uint64_t llvm::ScalarEvolution::getConstantEvolutionLoopExitValue(llvm::ScalarEvolution *this, llvm::PHINode *a2, const llvm::APInt *a3, const llvm::Loop *a4)
{
  v18[18] = *(void **)MEMORY[0x1E4F143B8];
  BOOL v17 = a2;
  v18[0] = 0;
  if (sub_1CC13D070(*((void *)this + 77), *((_DWORD *)this + 158), (uint64_t)a2, v18)) {
    BOOL v6 = v18[0] == (void *)(*((void *)this + 77) + 16 * *((unsigned int *)this + 158));
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    return *((void *)v18[0] + 1);
  }
  unsigned int v9 = (char *)this + 616;
  uint64_t v10 = *((unsigned int *)a3 + 2);
  unsigned int v11 = a3;
  if (v10 < 0x41) {
    goto LABEL_14;
  }
  int v12 = 0;
  unsigned int v11 = *(const llvm::APInt **)a3;
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  do
  {
    if (v13-- < 1) {
      break;
    }
    unint64_t v15 = *((void *)v11 + v13);
    v12 += __clz(v15);
  }
  while (!v15);
  int v16 = v10 | 0xFFFFFFC0;
  if ((v10 & 0x3F) == 0) {
    int v16 = 0;
  }
  if ((v10 - v12 - v16) <= 0x40)
  {
LABEL_14:
    if (*(void *)v11 <= (unint64_t)dword_1EBCC72B8)
    {
      sub_1CD4C21C4((uint64_t)v9, (uint64_t *)&v17);
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
    }
  }
  uint64_t v7 = 0;
  sub_1CD4C21C4((uint64_t)v9, (uint64_t *)&v17)[1] = 0;
  return v7;
}

uint64_t sub_1CC11C600(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 20);
  uint64_t v3 = v2 & 0x7FFFFFF;
  if ((v2 & 0x7FFFFFF) != 0)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 8 * v3;
    uint64_t v8 = a1 - 32 * v3;
    while (1)
    {
      if ((v2 & 0x40000000) != 0)
      {
        uint64_t v10 = *(void *)(a1 - 8);
        uint64_t v9 = *(void *)(v10 + 32 * *(unsigned int *)(a1 + 60) + v5);
      }
      else
      {
        uint64_t v9 = *(void *)(v8 + 32 * *(unsigned int *)(a1 + 60) + v5);
        uint64_t v10 = v8;
      }
      if (v9 == a2) {
        goto LABEL_14;
      }
      uint64_t v11 = *(void *)(v10 + v4);
      if (v11) {
        BOOL v12 = *(unsigned __int8 *)(v11 + 16) > 0x14u;
      }
      else {
        BOOL v12 = 1;
      }
      if (v12) {
        return 0;
      }
      if (v6 == v11)
      {
LABEL_14:
        uint64_t v11 = v6;
      }
      else if (v6)
      {
        return 0;
      }
      v5 += 8;
      v4 += 32;
      uint64_t v6 = v11;
      if (v7 == v5) {
        return v11;
      }
    }
  }
  return 0;
}

llvm *sub_1CC11C69C(uint64_t a1, uint64_t a2, uint64_t a3, llvm::DataLayout *a4, llvm::DSOLocalEquivalent **a5)
{
  unsigned int v10 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v10 < 0x15) {
    return (llvm *)a1;
  }
  if (v10 < 0x1C) {
    return 0;
  }
  int v12 = *(_DWORD *)(a3 + 16);
  if (v12)
  {
    uint64_t v13 = *(void *)a3;
    unsigned int v14 = v12 - 1;
    uint64_t v15 = (v12 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    uint64_t v16 = *(void *)(*(void *)a3 + 16 * v15);
    if (v16 == a1)
    {
LABEL_10:
      uint64_t v11 = *(llvm **)(v13 + 16 * v15 + 8);
      if (v11) {
        return v11;
      }
    }
    else
    {
      int v17 = 1;
      while (v16 != -4096)
      {
        int v18 = v15 + v17++;
        uint64_t v15 = v18 & v14;
        uint64_t v16 = *(void *)(v13 + 16 * v15);
        if (v16 == a1) {
          goto LABEL_10;
        }
      }
    }
  }
  if (!sub_1CC136D10(a1, a2, a3)) {
    return 0;
  }
  int v23 = *(unsigned __int8 *)(a1 + 16);
  if (v23 == 83) {
    return 0;
  }
  int v25 = *(_DWORD *)(a1 + 20);
  uint64_t v26 = v25 & 0x7FFFFFF;
  if ((v25 & 0x7FFFFFF) != 0)
  {
    uint64_t v27 = (char *)operator new(8 * v26);
    bzero(v27, 8 * v26);
    uint64_t v28 = 0;
    uint64_t v43 = &v27[8 * v26];
    uint64_t v44 = (llvm::ConstantExpr **)v27;
    uint64_t v29 = 32 * v26;
    int64_t v30 = (uint64_t *)v27;
    while (1)
    {
      int v31 = *(_DWORD *)(a1 + 20);
      if ((v31 & 0x40000000) != 0) {
        uint64_t v32 = *(void *)(a1 - 8);
      }
      else {
        uint64_t v32 = a1 - 32 * (v31 & 0x7FFFFFF);
      }
      uint64_t v33 = *(void *)(v32 + v28);
      if (*(unsigned __int8 *)(v33 + 16) <= 0x1Bu) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = v33;
      }
      uint64_t v45 = v34;
      if (v34)
      {
        uint64_t v35 = sub_1CC11C69C(v34, a2, a3, a4, a5);
        uint64_t v46 = 0;
        char v36 = sub_1CC136E28(*(void *)a3, *(_DWORD *)(a3 + 16), v34, &v46);
        unsigned int v37 = v46;
        if ((v36 & 1) == 0)
        {
          unsigned int v37 = sub_1CC136EBC(a3, &v45, v46);
          *unsigned int v37 = v34;
          v37[1] = 0;
        }
        v37[1] = v35;
        if (!v35) {
          goto LABEL_43;
        }
        *int64_t v30 = v35;
      }
      else
      {
        if ((v31 & 0x40000000) != 0) {
          uint64_t v38 = *(void *)(a1 - 8);
        }
        else {
          uint64_t v38 = a1 - 32 * (v31 & 0x7FFFFFF);
        }
        uint64_t v39 = *(void *)(v38 + v28);
        if (*(unsigned __int8 *)(v39 + 16) >= 0x15u) {
          uint64_t v39 = 0;
        }
        *int64_t v30 = v39;
        if (!v39)
        {
LABEL_43:
          uint64_t v11 = 0;
          uint64_t v41 = v44;
          goto LABEL_45;
        }
      }
      v28 += 32;
      ++v30;
      if (v29 == v28)
      {
        int v23 = *(unsigned __int8 *)(a1 + 16);
        int v40 = v43;
        uint64_t v41 = v44;
        goto LABEL_37;
      }
    }
  }
  uint64_t v41 = 0;
  int v40 = 0;
LABEL_37:
  if ((v23 - 83) >= 0xFFFFFFFE)
  {
    unsigned int v42 = llvm::ConstantFoldCompareInstOperands(*(_WORD *)(a1 + 18) & 0x3F, *v41, v41[1], a4, (BOOL)a5);
    goto LABEL_42;
  }
  if (v23 == 60 && (*(_WORD *)(a1 + 18) & 1) == 0)
  {
    unsigned int v42 = (llvm *)llvm::ConstantFoldLoadFromConstPtr(*v41, *(llvm::Constant **)a1, a4, v19, v20, v21, v22);
LABEL_42:
    uint64_t v11 = v42;
    goto LABEL_45;
  }
  uint64_t v11 = sub_1CBFB8E50((llvm *)a1, (llvm *)(v23 - 28), (uint64_t **)v41, (v40 - (char *)v41) >> 3, a4, a5);
  if (v41) {
LABEL_45:
  }
    operator delete(v41);
  return v11;
}

const llvm::SCEV *llvm::ScalarEvolution::computeSCEVAtScope(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::Loop *a3)
{
  uint64_t AddRecExpr = a2;
  v176[8] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3;
  switch(*((_WORD *)a2 + 12))
  {
    case 1:
    case 2:
    case 3:
    case 0xD:
      SCEVAtScope = (llvm::SCEV *)llvm::ScalarEvolution::getSCEVAtScope(this, *((const llvm::SCEV **)a2 + 4), a3);
      if (SCEVAtScope == *((llvm::SCEV **)AddRecExpr + 4)) {
        return AddRecExpr;
      }
      int v13 = *((unsigned __int16 *)AddRecExpr + 12);
      unsigned int v14 = (llvm::Type *)*((void *)AddRecExpr + 5);
      return llvm::ScalarEvolution::getCastExpr(this, v13, SCEVAtScope, v14);
    case 4:
    case 5:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
      int v7 = *((_DWORD *)a2 + 10);
      if (!v7) {
        return AddRecExpr;
      }
      size_t v8 = 0;
      uint64_t v9 = 0;
      unsigned int v10 = (const llvm::SCEV **)*((void *)a2 + 4);
      while (1)
      {
        uint64_t v11 = llvm::ScalarEvolution::getSCEVAtScope(this, v10[v9], v5);
        unsigned int v10 = (const llvm::SCEV **)*((void *)AddRecExpr + 4);
        if ((const llvm::SCEV *)v11 != v10[v9]) {
          break;
        }
        ++v9;
        v8 += 8;
        if (v9 == v7) {
          return AddRecExpr;
        }
      }
      uint64_t v16 = v11;
      uint64_t v174 = v176;
      uint64_t v175 = 0x800000000;
      if (v9 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v9)
      {
        memcpy(v176, v10, v8);
        int v39 = v175;
        unsigned int v40 = HIDWORD(v175);
      }
      else
      {
        int v39 = 0;
        unsigned int v40 = 8;
      }
      unsigned int v41 = v9 + v39;
      LODWORD(v175) = v41;
      if (v41 >= v40) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v174 + v41) = v16;
      LODWORD(v175) = v175 + 1;
      if (v9 - v7 != -1)
      {
        unsigned int v42 = v9 + 1;
        do
        {
          uint64_t v43 = llvm::ScalarEvolution::getSCEVAtScope(this, *(const llvm::SCEV **)(*((void *)AddRecExpr + 4) + 8 * v42), v5);
          if (v175 >= (unint64_t)HIDWORD(v175)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v174 + v175) = v43;
          LODWORD(v175) = v175 + 1;
          ++v42;
        }
        while (v7 != v42);
      }
      uint64_t v44 = *((unsigned __int16 *)AddRecExpr + 12);
      if (v44 == 5)
      {
        uint64_t MulExpr = llvm::ScalarEvolution::getMulExpr(this, &v174, *((_WORD *)AddRecExpr + 14) & 7, 0);
      }
      else if (v44 == 4)
      {
        uint64_t MulExpr = llvm::ScalarEvolution::getAddExpr(this, &v174, *((_WORD *)AddRecExpr + 14) & 7, 0);
      }
      else if ((v44 & 0xFFFC) == 8)
      {
        uint64_t MulExpr = llvm::ScalarEvolution::getMinMaxExpr((uint64_t)this, v44, (uint64_t **)&v174);
      }
      else
      {
        uint64_t MulExpr = llvm::ScalarEvolution::getSequentialMinMaxExpr((uint64_t)this, 12, (unsigned int *)&v174);
      }
      uint64_t AddRecExpr = (const llvm::SCEV *)MulExpr;
      if (v174 != v176) {
        free(v174);
      }
      return AddRecExpr;
    case 6:
      int v17 = (const llvm::SCEV *)llvm::ScalarEvolution::getSCEVAtScope(this, *((const llvm::SCEV **)a2 + 4), a3);
      unint64_t v18 = llvm::ScalarEvolution::getSCEVAtScope(this, *((const llvm::SCEV **)AddRecExpr + 5), v5);
      if (__PAIR128__(v18, (unint64_t)v17) == *((_OWORD *)AddRecExpr + 2)) {
        return AddRecExpr;
      }
      return (const llvm::SCEV *)llvm::ScalarEvolution::getUDivExpr(this, v17, v18);
    case 7:
      uint64_t v19 = *((void *)a2 + 5);
      if (!v19) {
        goto LABEL_72;
      }
      size_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = (const llvm::SCEV **)*((void *)a2 + 4);
      while (1)
      {
        uint64_t v23 = llvm::ScalarEvolution::getSCEVAtScope(this, v22[v21], v5);
        uint64_t v22 = (const llvm::SCEV **)*((void *)AddRecExpr + 4);
        if ((const llvm::SCEV *)v23 != v22[v21]) {
          break;
        }
        ++v21;
        v20 += 8;
        if (v19 == v21) {
          goto LABEL_72;
        }
      }
      uint64_t v46 = v23;
      uint64_t v174 = v176;
      uint64_t v175 = 0x800000000;
      if (v21 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v21)
      {
        memcpy(v176, v22, v20);
        int v47 = v175;
        unsigned int v48 = HIDWORD(v175);
      }
      else
      {
        int v47 = 0;
        unsigned int v48 = 8;
      }
      unsigned int v49 = v21 + v47;
      LODWORD(v175) = v49;
      if (v49 >= v48) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v174 + v49) = v46;
      LODWORD(v175) = v175 + 1;
      if (v19 - 1 != v21)
      {
        unsigned int v53 = v21 + 1;
        do
        {
          uint64_t v54 = llvm::ScalarEvolution::getSCEVAtScope(this, *(const llvm::SCEV **)(*((void *)AddRecExpr + 4) + 8 * v53), v5);
          if (v175 >= (unint64_t)HIDWORD(v175)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v174 + v175) = v54;
          LODWORD(v175) = v175 + 1;
          ++v53;
        }
        while (v19 != v53);
      }
      uint64_t AddRecExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getAddRecExpr(this, (uint64_t **)&v174, *((const llvm::Loop **)AddRecExpr + 6), *((_WORD *)AddRecExpr + 14) & 1);
      if (AddRecExpr) {
        BOOL v50 = *((unsigned __int16 *)AddRecExpr + 12) == 7;
      }
      else {
        BOOL v50 = 0;
      }
      char v51 = !v50;
      if (v174 != v176) {
        free(v174);
      }
      if (v51) {
        return AddRecExpr;
      }
LABEL_72:
      uint64_t v52 = *((void *)AddRecExpr + 6);
      if ((const llvm::Loop *)v52 != v5)
      {
        while (v5)
        {
          uint64_t v5 = *(const llvm::Loop **)v5;
          if (v5 == (const llvm::Loop *)v52) {
            return AddRecExpr;
          }
        }
        uint64_t BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(this, *((const llvm::Loop **)AddRecExpr + 6));
        Exact = (const llvm::SCEV *)llvm::ScalarEvolution::BackedgeTakenInfo::getExact(BackedgeTakenInfo, v52, (uint64_t)this);
        if (Exact != *((const llvm::SCEV **)this + 6)) {
          return (const llvm::SCEV *)llvm::SCEVAddRecExpr::evaluateAtIteration(*((uint64_t **)AddRecExpr + 4), *((void *)AddRecExpr + 5), Exact, this);
        }
      }
      return AddRecExpr;
    case 0xE:
      uint64_t v24 = *((void *)a2 - 1);
      unsigned int v25 = *(unsigned __int8 *)(v24 + 16);
      if (v24) {
        BOOL v26 = v25 >= 0x1C;
      }
      else {
        BOOL v26 = 0;
      }
      if (!v26) {
        return AddRecExpr;
      }
      if (v25 != 83) {
        goto LABEL_95;
      }
      uint64_t v27 = (uint64_t *)*((void *)this + 5);
      int v28 = *((_DWORD *)v27 + 4);
      if (!v28) {
        goto LABEL_37;
      }
      uint64_t v29 = *(void *)(v24 + 40);
      uint64_t v30 = *v27;
      unsigned int v31 = v28 - 1;
      uint64_t v32 = ((v29 >> 4) ^ (v29 >> 9)) & (v28 - 1);
      uint64_t v33 = *(void *)(v30 + 16 * v32);
      if (v29 == v33) {
        goto LABEL_34;
      }
      int v34 = 1;
      break;
    default:
      return AddRecExpr;
  }
  do
  {
    if (v33 == -4096) {
      goto LABEL_37;
    }
    int v35 = v32 + v34++;
    uint64_t v32 = v35 & v31;
    uint64_t v33 = *(void *)(v30 + 16 * v32);
  }
  while (v29 != v33);
LABEL_34:
  uint64_t v36 = *(void *)(v30 + 16 * v32 + 8);
  if (v36 && *(const llvm::Loop **)v36 == a3 && v29 == **(void **)(v36 + 32))
  {
    uint64_t v94 = llvm::ScalarEvolution::getBackedgeTakenInfo(this, (const llvm::Loop *)v36);
    uint64_t v95 = llvm::ScalarEvolution::BackedgeTakenInfo::getExact(v94, v36, (uint64_t)this);
    uint64_t v3 = (uint64_t *)v95;
    int v96 = *(unsigned __int16 *)(v95 + 24);
    if (v95) {
      BOOL v97 = v96 == 0;
    }
    else {
      BOOL v97 = 0;
    }
    if (!v97) {
      goto LABEL_141;
    }
    uint64_t v105 = *(void *)(v95 + 32);
    uint64_t v106 = *(unsigned int *)(v105 + 32);
    if (v106 >= 0x41)
    {
      int v109 = 0;
      int64_t v110 = (unint64_t)(v106 + 63) >> 6;
      do
      {
        BOOL v76 = v110-- < 1;
        if (v76) {
          break;
        }
        unint64_t v111 = *(void *)(*(void *)(v105 + 24) + 8 * v110);
        v109 += __clz(v111);
      }
      while (!v111);
      int v112 = v106 | 0xFFFFFFC0;
      if ((v106 & 0x3F) == 0) {
        int v112 = 0;
      }
      if (v109 + v112 != v106) {
        goto LABEL_141;
      }
    }
    else if (*(void *)(v105 + 24))
    {
      goto LABEL_159;
    }
    int v113 = *(_DWORD *)(v24 + 20);
    uint64_t v114 = v113 & 0x7FFFFFF;
    if ((v113 & 0x7FFFFFF) != 0)
    {
      uint64_t v115 = 0;
      a2 = 0;
      uint64_t v116 = *(void *)(v36 + 64);
      do
      {
        uint64_t v117 = v24 - 32 * v114;
        if ((v113 & 0x40000000) != 0) {
          uint64_t v117 = *(void *)(v24 - 8);
        }
        uint64_t v118 = *(void *)(v117 + 32 * *(unsigned int *)(v24 + 60) + 8 * v115);
        if (v116 == *(void *)(v36 + 56))
        {
          uint64_t v119 = *(unsigned int *)(v36 + 76);
          a3 = (const llvm::Loop *)(v116 + 8 * v119);
          if (v119)
          {
            uint64_t v120 = 0;
            uint64_t v121 = 8 * v119;
            while (*(void *)(v116 + v120) != v118)
            {
              v120 += 8;
              if (v121 == v120) {
                goto LABEL_191;
              }
            }
            a3 = (const llvm::Loop *)(v116 + v120);
          }
LABEL_191:
          uint64_t v130 = *(void *)(v36 + 64);
        }
        else
        {
          uint64_t v122 = *(unsigned int *)(v36 + 72);
          int v123 = v122 - 1;
          unsigned int v124 = (v122 - 1) & ((v118 >> 4) ^ (v118 >> 9));
          a3 = (const llvm::Loop *)(v116 + 8 * v124);
          uint64_t v125 = *(void *)a3;
          if (*(void *)a3 == -1)
          {
            int64_t v126 = 0;
LABEL_193:
            if (v126) {
              a3 = v126;
            }
            if (*(void *)a3 != v118) {
              a3 = (const llvm::Loop *)(v116 + 8 * v122);
            }
          }
          else
          {
            int64_t v126 = 0;
            int v127 = 1;
            while (v125 != v118)
            {
              if (v126) {
                BOOL v128 = 0;
              }
              else {
                BOOL v128 = v125 == -2;
              }
              if (v128) {
                int64_t v126 = a3;
              }
              unsigned int v129 = v124 + v127++;
              unsigned int v124 = v129 & v123;
              a3 = (const llvm::Loop *)(v116 + 8 * (v129 & v123));
              uint64_t v125 = *(void *)a3;
              if (*(void *)a3 == -1) {
                goto LABEL_193;
              }
            }
          }
          uint64_t v130 = *(void *)(v36 + 56);
        }
        if (v116 == v130) {
          unint64_t v131 = (unsigned int *)(v36 + 76);
        }
        else {
          unint64_t v131 = (unsigned int *)(v36 + 72);
        }
        if (a3 == (const llvm::Loop *)(v116 + 8 * *v131))
        {
          if (a2)
          {
            uint64_t v132 = v24 - 32 * v114;
            if ((v113 & 0x40000000) != 0) {
              uint64_t v132 = *(void *)(v24 - 8);
            }
            a3 = *(const llvm::Loop **)(v132 + 32 * v115);
            if (a2 != a3) {
              goto LABEL_141;
            }
          }
          else
          {
            uint64_t v133 = v24 - 32 * v114;
            if ((v113 & 0x40000000) != 0) {
              uint64_t v133 = *(void *)(v24 - 8);
            }
            a3 = (const llvm::Loop *)(32 * v115);
            a2 = *(const llvm::SCEV **)(v133 + 32 * v115);
          }
        }
        ++v115;
      }
      while (v115 != v114);
      if (a2)
      {
        uint64_t v134 = *((void *)this + 13);
        unsigned int v135 = *((_DWORD *)this + 30);
        if (v135)
        {
          unsigned int v136 = (v135 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          uint64_t v137 = v134 + 48 * v136;
          unint64_t v138 = *(const llvm::SCEV **)(v137 + 24);
          if (v138 == a2) {
            goto LABEL_262;
          }
          int v139 = 1;
          while (v138 != (const llvm::SCEV *)-4096)
          {
            unsigned int v140 = v136 + v139++;
            unsigned int v136 = v140 & (v135 - 1);
            uint64_t v137 = v134 + 48 * v136;
            unint64_t v138 = *(const llvm::SCEV **)(v137 + 24);
            if (v138 == a2) {
              goto LABEL_262;
            }
          }
        }
        goto LABEL_261;
      }
    }
LABEL_141:
    if (v96 == 15) {
      goto LABEL_252;
    }
LABEL_159:
    if (!llvm::ScalarEvolution::isKnownPositive(this, (const llvm::SCEV *)v95)) {
      goto LABEL_252;
    }
    int v107 = *(_DWORD *)(v24 + 20);
    if ((v107 & 0x7FFFFFF) != 2) {
      goto LABEL_252;
    }
    uint64_t v108 = (v107 & 0x40000000) != 0 ? *(void *)(v24 - 8) : v24 - 64;
    uint64_t v141 = *(void *)(v108 + 32 * *(unsigned int *)(v24 + 60));
    uint64_t v143 = *(void *)(v36 + 56);
    uint64_t v142 = *(void *)(v36 + 64);
    if (v142 == v143)
    {
      uint64_t v144 = *(unsigned int *)(v36 + 76);
      unint64_t v145 = (void *)(v142 + 8 * v144);
      if (v144)
      {
        uint64_t v146 = 0;
        uint64_t v147 = 8 * v144;
        while (*(void *)(v142 + v146) != v141)
        {
          v146 += 8;
          if (v147 == v146) {
            goto LABEL_239;
          }
        }
        unint64_t v145 = (void *)(v142 + v146);
      }
LABEL_239:
      uint64_t v143 = *(void *)(v36 + 64);
    }
    else
    {
      uint64_t v148 = *(unsigned int *)(v36 + 72);
      int v149 = v148 - 1;
      unsigned int v150 = (v148 - 1) & ((v141 >> 4) ^ (v141 >> 9));
      unint64_t v145 = (void *)(v142 + 8 * v150);
      uint64_t v151 = *v145;
      if (*v145 == -1)
      {
        unint64_t v152 = 0;
LABEL_275:
        if (v152) {
          unint64_t v145 = v152;
        }
        if (*v145 != v141) {
          unint64_t v145 = (void *)(v142 + 8 * v148);
        }
      }
      else
      {
        unint64_t v152 = 0;
        int v153 = 1;
        while (v151 != v141)
        {
          if (v152) {
            BOOL v154 = 0;
          }
          else {
            BOOL v154 = v151 == -2;
          }
          if (v154) {
            unint64_t v152 = v145;
          }
          unsigned int v155 = v150 + v153++;
          unsigned int v150 = v155 & v149;
          unint64_t v145 = (void *)(v142 + 8 * (v155 & v149));
          uint64_t v151 = *v145;
          if (*v145 == -1) {
            goto LABEL_275;
          }
        }
      }
    }
    BOOL v50 = v142 == v143;
    uint64_t v156 = 72;
    if (v50) {
      uint64_t v156 = 76;
    }
    unint64_t v157 = (void *)(v142 + 8 * *(unsigned int *)(v36 + v156));
    uint64_t v158 = (v107 & 0x40000000) != 0 ? *(void *)(v24 - 8) : v24 - 64;
    uint64_t v159 = *(const llvm::SCEV **)(v158 + 32 * (v145 == v157));
    if (!llvm::Loop::isLoopInvariant(v36, (uint64_t)v159))
    {
LABEL_252:
      if (!v3) {
        goto LABEL_37;
      }
      if (*((_WORD *)v3 + 12)) {
        goto LABEL_37;
      }
      ConstantEvolutionLoopExitValue = (const llvm::SCEV *)llvm::ScalarEvolution::getConstantEvolutionLoopExitValue(this, (llvm::PHINode *)v24, (const llvm::APInt *)(v3[4] + 24), (const llvm::Loop *)v36);
      if (!ConstantEvolutionLoopExitValue) {
        goto LABEL_37;
      }
      a2 = ConstantEvolutionLoopExitValue;
      uint64_t v134 = *((void *)this + 13);
      unsigned int v135 = *((_DWORD *)this + 30);
      if (v135)
      {
        unsigned int v168 = (v135 - 1) & ((ConstantEvolutionLoopExitValue >> 4) ^ (ConstantEvolutionLoopExitValue >> 9));
        uint64_t v137 = v134 + 48 * v168;
        int v169 = *(const llvm::SCEV **)(v137 + 24);
        if (v169 == ConstantEvolutionLoopExitValue) {
          goto LABEL_262;
        }
        int v170 = 1;
        while (v169 != (const llvm::SCEV *)-4096)
        {
          unsigned int v171 = v168 + v170++;
          unsigned int v168 = v171 & (v135 - 1);
          uint64_t v137 = v134 + 48 * v168;
          int v169 = *(const llvm::SCEV **)(v137 + 24);
          if (v169 == ConstantEvolutionLoopExitValue) {
            goto LABEL_262;
          }
        }
      }
LABEL_261:
      uint64_t v137 = v134 + 48 * v135;
LABEL_262:
      if (v137 != v134 + 48 * v135)
      {
        uint64_t v3 = *(uint64_t **)(v137 + 40);
        if (v3) {
          return (const llvm::SCEV *)v3;
        }
      }
      uint64_t v172 = this;
      return (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(v172, a2);
    }
    uint64_t v160 = *((void *)this + 13);
    unsigned int v161 = *((_DWORD *)this + 30);
    if (v161)
    {
      unsigned int v162 = (v161 - 1) & ((v159 >> 4) ^ (v159 >> 9));
      uint64_t v163 = v160 + 48 * v162;
      unsigned int v164 = *(const llvm::SCEV **)(v163 + 24);
      if (v164 == v159) {
        goto LABEL_270;
      }
      int v165 = 1;
      while (v164 != (const llvm::SCEV *)-4096)
      {
        unsigned int v166 = v162 + v165++;
        unsigned int v162 = v166 & (v161 - 1);
        uint64_t v163 = v160 + 48 * v162;
        unsigned int v164 = *(const llvm::SCEV **)(v163 + 24);
        if (v164 == v159) {
          goto LABEL_270;
        }
      }
    }
    uint64_t v163 = v160 + 48 * v161;
LABEL_270:
    if (v163 != v160 + 48 * v161)
    {
      uint64_t v3 = *(uint64_t **)(v163 + 40);
      if (v3) {
        return (const llvm::SCEV *)v3;
      }
    }
    uint64_t v172 = this;
    a2 = v159;
    return (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(v172, a2);
  }
LABEL_37:
  int v37 = *(_DWORD *)(v24 + 20);
  if ((v37 & 0x7FFFFFF) == 1)
  {
    if ((v37 & 0x40000000) != 0) {
      uint64_t v38 = *(llvm::Value ***)(v24 - 8);
    }
    else {
      uint64_t v38 = (llvm::Value **)(v24 - 32);
    }
    unint64_t v57 = *v38;
    uint64_t v58 = *((void *)this + 13);
    unsigned int v59 = *((_DWORD *)this + 30);
    if (v59)
    {
      unsigned int v60 = ((v57 >> 4) ^ (v57 >> 9)) & (v59 - 1);
      uint64_t v61 = v58 + 48 * v60;
      unsigned int v62 = *(llvm::Value **)(v61 + 24);
      if (v62 == v57)
      {
LABEL_91:
        if (v61 == v58 + 48 * v59 || (uint64_t SCEVIter = *(const llvm::SCEV **)(v61 + 40)) == 0) {
          uint64_t SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v57);
        }
        uint64_t v66 = llvm::ScalarEvolution::getSCEVAtScope(this, SCEVIter, v5);
        if (*(_WORD *)(v66 + 24)) {
          goto LABEL_95;
        }
        return (const llvm::SCEV *)v66;
      }
      int v63 = 1;
      while (v62 != (llvm::Value *)-4096)
      {
        unsigned int v64 = v60 + v63++;
        unsigned int v60 = v64 & (v59 - 1);
        uint64_t v61 = v58 + 48 * v60;
        unsigned int v62 = *(llvm::Value **)(v61 + 24);
        if (v62 == v57) {
          goto LABEL_91;
        }
      }
    }
    uint64_t v61 = v58 + 48 * v59;
    goto LABEL_91;
  }
LABEL_95:
  if (!sub_1CC11D89C(v24, (uint64_t)a2, a3)) {
    return AddRecExpr;
  }
  uint64_t v174 = v176;
  uint64_t v175 = 0x400000000;
  int v70 = *(_DWORD *)(v24 + 20);
  if ((v70 & 0x40000000) != 0)
  {
    int v72 = *(llvm::Value ***)(v24 - 8);
    uint64_t v71 = v70 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v71 = v70 & 0x7FFFFFF;
    int v72 = (llvm::Value **)(v24 - 32 * v71);
  }
  if (!v71)
  {
LABEL_131:
    char v91 = 1;
    goto LABEL_132;
  }
  uint64_t v173 = (llvm *)v24;
  LODWORD(v73) = 0;
  char v74 = 0;
  uint64_t v75 = &v72[4 * v71];
  do
  {
    uint64_t v3 = (uint64_t *)*v72;
    if (*v72) {
      BOOL v76 = *((unsigned __int8 *)*v72 + 16) > 0x14u;
    }
    else {
      BOOL v76 = 1;
    }
    if (!v76)
    {
      unsigned int v84 = HIDWORD(v175);
      goto LABEL_121;
    }
    if ((*(_DWORD *)(*v3 + 8) & 0xFD) != 0xD) {
      goto LABEL_125;
    }
    uint64_t v77 = *((void *)this + 13);
    unsigned int v78 = *((_DWORD *)this + 30);
    if (v78)
    {
      unsigned int v79 = (v78 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      uint64_t v80 = v77 + 48 * v79;
      unsigned int v81 = *(uint64_t **)(v80 + 24);
      if (v81 == v3) {
        goto LABEL_114;
      }
      int v82 = 1;
      while (v81 != (uint64_t *)-4096)
      {
        unsigned int v83 = v79 + v82++;
        unsigned int v79 = v83 & (v78 - 1);
        uint64_t v80 = v77 + 48 * v79;
        unsigned int v81 = *(uint64_t **)(v80 + 24);
        if (v81 == v3) {
          goto LABEL_114;
        }
      }
    }
    uint64_t v80 = v77 + 48 * v78;
LABEL_114:
    if (v80 == v77 + 48 * v78 || (uint64_t v85 = *(const llvm::SCEV **)(v80 + 40)) == 0) {
      uint64_t v85 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, *v72);
    }
    uint64_t v86 = llvm::ScalarEvolution::getSCEVAtScope(this, v85, v5);
    BOOL v87 = v85 != (const llvm::SCEV *)v86;
    unint64_t v88 = sub_1CC11D910(v86);
    if (!v88)
    {
LABEL_125:
      char v91 = 0;
      uint64_t v3 = (uint64_t *)AddRecExpr;
      goto LABEL_132;
    }
    Cast = v88;
    if (*(void *)v88 != *v3)
    {
      CastOpcode = (llvm::ConstantExpr *)llvm::CastInst::getCastOpcode(v88, 0, *v3, 0);
      Cast = llvm::ConstantExpr::getCast(CastOpcode, Cast, (llvm::Constant ***)*v3, 0);
    }
    v74 |= v87;
    LODWORD(v73) = v175;
    unsigned int v84 = HIDWORD(v175);
    uint64_t v3 = (uint64_t *)Cast;
LABEL_121:
    if (v73 >= v84) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v174 + v73) = v3;
    uint64_t v73 = (v175 + 1);
    LODWORD(v175) = v175 + 1;
    v72 += 4;
  }
  while (v72 != v75);
  if ((v74 & 1) == 0) {
    goto LABEL_131;
  }
  int v92 = *((unsigned __int8 *)v173 + 16);
  if ((v92 - 83) >= 0xFFFFFFFE)
  {
    uint64_t v93 = llvm::ConstantFoldCompareInstOperands(*((_WORD *)v173 + 9) & 0x3F, *(llvm::ConstantExpr **)v174, *((llvm::Constant **)v174 + 1), (llvm::DataLayout *)(*(void *)(*(void *)this + 40) + 272), *((void *)this + 2));
    goto LABEL_144;
  }
  if (v92 != 60)
  {
    uint64_t v93 = sub_1CBFB8E50(v173, (llvm *)(v92 - 28), (uint64_t **)v174, v73, (llvm::Type *)(*(void *)(*(void *)this + 40) + 272), *((llvm::DSOLocalEquivalent ***)this + 2));
LABEL_144:
    if (!v93) {
      goto LABEL_151;
    }
    uint64_t v98 = *((void *)this + 13);
    unsigned int v99 = *((_DWORD *)this + 30);
    if (v99)
    {
      unsigned int v100 = (v99 - 1) & ((v93 >> 4) ^ (v93 >> 9));
      uint64_t v101 = v98 + 48 * v100;
      unsigned int v102 = *(llvm::Value **)(v101 + 24);
      if (v102 == v93) {
        goto LABEL_153;
      }
      int v103 = 1;
      while (v102 != (llvm::Value *)-4096)
      {
        unsigned int v104 = v100 + v103++;
        unsigned int v100 = v104 & (v99 - 1);
        uint64_t v101 = v98 + 48 * v100;
        unsigned int v102 = *(llvm::Value **)(v101 + 24);
        if (v102 == v93) {
          goto LABEL_153;
        }
      }
    }
    uint64_t v101 = v98 + 48 * v99;
LABEL_153:
    if (v101 == v98 + 48 * v99 || (uint64_t v3 = *(uint64_t **)(v101 + 40)) == 0) {
      uint64_t v3 = (uint64_t *)llvm::ScalarEvolution::createSCEVIter(this, v93);
    }
    char v91 = 0;
    goto LABEL_132;
  }
  if ((*((_WORD *)v173 + 9) & 1) == 0)
  {
    uint64_t v93 = (llvm::Value *)llvm::ConstantFoldLoadFromConstPtr(*(llvm **)v174, *(llvm::Constant **)v173, (llvm::Type *)(*(void *)(*(void *)this + 40) + 272), (const llvm::DataLayout *)v73, v67, v68, v69);
    goto LABEL_144;
  }
LABEL_151:
  char v91 = 0;
  uint64_t v3 = (uint64_t *)AddRecExpr;
LABEL_132:
  if (v174 != v176) {
    free(v174);
  }
  if ((v91 & 1) == 0) {
    return (const llvm::SCEV *)v3;
  }
  return AddRecExpr;
}

uint64_t sub_1CC11D89C(uint64_t a1, uint64_t a2, const llvm::Function *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v4 = 1;
  if (v3 == 92 || (v3 & 0xFFFFFFFD) == 0x3C) {
    return v4;
  }
  BOOL v5 = v3 != 85 && (v3 - 41) >= 0x12;
  BOOL v6 = v5 && (v3 - 81) >= 2;
  if (!v6 || (v3 - 66) < 0xD) {
    return v4;
  }
  if (v3 != 84) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 - 32);
  if (!v8 || *(unsigned char *)(v8 + 16) || *(void *)(v8 + 24) != *(void *)(a1 + 72)) {
    return 0;
  }
  return llvm::canConstantFoldCallTo((llvm *)a1, (const llvm::CallBase *)v8, a3);
}

llvm::detail::IEEEFloat *sub_1CC11D910(uint64_t a1)
{
  Mul = 0;
  switch(*(_WORD *)(a1 + 24))
  {
    case 1:
      uint64_t v3 = sub_1CC11D910(*(void *)(a1 + 32));
      if (!v3) {
        return 0;
      }
      uint64_t v4 = (llvm::detail::IEEEFloat *)v3;
      BOOL v5 = *(llvm::Constant **)(a1 + 40);
      uint64_t v6 = 38;
      goto LABEL_50;
    case 2:
      uint64_t v7 = sub_1CC11D910(*(void *)(a1 + 32));
      if (!v7) {
        return 0;
      }
      uint64_t v4 = (llvm::detail::IEEEFloat *)v7;
      BOOL v5 = *(llvm::Constant **)(a1 + 40);
      uint64_t v6 = 39;
      goto LABEL_50;
    case 3:
      uint64_t v8 = sub_1CC11D910(*(void *)(a1 + 32));
      if (!v8) {
        return 0;
      }
      uint64_t v4 = (llvm::detail::IEEEFloat *)v8;
      BOOL v5 = *(llvm::Constant **)(a1 + 40);
      uint64_t v6 = 40;
      goto LABEL_50;
    case 4:
      uint64_t v9 = sub_1CC11D910(**(void **)(a1 + 32));
      Mul = (llvm::detail::IEEEFloat *)v9;
      if (!v9) {
        return Mul;
      }
      if (*(void *)v9) {
        BOOL v10 = *(_DWORD *)(*(void *)v9 + 8) == 15;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10)
      {
        uint64_t v11 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(***(void ***)v9 + 1912), (llvm::Type *)(*(_DWORD *)(*(void *)v9 + 8) >> 8));
        if (*(llvm::Constant **)Mul != v11) {
          Mul = sub_1CC56C0C0((llvm *)0x31, Mul, v11, 0);
        }
      }
      uint64_t v12 = *(void *)(a1 + 40);
      if (v12 == 1) {
        return Mul;
      }
      uint64_t v13 = 1;
      while (1)
      {
        uint64_t v14 = sub_1CC11D910(*(void *)(*(void *)(a1 + 32) + 8 * v13));
        if (!v14) {
          break;
        }
        uint64_t v15 = (llvm::detail::IEEEFloat *)v14;
        if (*(unsigned char *)(*(void *)Mul + 8) == 15
          || (uint64_t v16 = *(void ***)v14, v17 = *(_DWORD *)(*(void *)v14 + 8), v17 != 15))
        {
          size_t v20 = (llvm::Constant *)v14;
        }
        else
        {
          if ((v17 & 0xFE) == 0x12) {
            unsigned int v17 = *(_DWORD *)(*v16[2] + 8);
          }
          unint64_t v18 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(**v16 + 1912), (llvm::Type *)(v17 >> 8));
          if (*(llvm::Constant **)v15 == v18)
          {
            size_t v20 = Mul;
            Mul = v15;
          }
          else
          {
            uint64_t v19 = sub_1CC56C0C0((llvm *)0x31, v15, v18, 0);
            size_t v20 = Mul;
            Mul = v19;
          }
        }
        if (*(unsigned char *)(*(void *)v20 + 8) == 15) {
          break;
        }
        if (*(unsigned char *)(*(void *)Mul + 8) == 15)
        {
          uint64_t v21 = ***(void ***)Mul + 1912;
          unsigned int v31 = v20;
          uint64_t ElementPtr = llvm::ConstantExpr::getGetElementPtr(v21, (uint64_t *)Mul, (uint64_t)&v31, 1, 0, 0, 0);
        }
        else
        {
          uint64_t ElementPtr = (uint64_t)llvm::ConstantExpr::getAdd(Mul, v20, 0, 0);
        }
        Mul = (llvm::detail::IEEEFloat *)ElementPtr;
        if (v12 == ++v13) {
          return Mul;
        }
      }
      return 0;
    case 5:
      uint64_t v23 = sub_1CC11D910(**(void **)(a1 + 32));
      Mul = (llvm::detail::IEEEFloat *)v23;
      if (!v23) {
        return Mul;
      }
      if (*(unsigned char *)(*(void *)v23 + 8) == 15) {
        return 0;
      }
      uint64_t v24 = *(void *)(a1 + 40);
      if (v24 == 1) {
        return Mul;
      }
      uint64_t v25 = 1;
      break;
    case 6:
      Mul = (llvm::detail::IEEEFloat *)sub_1CC11D910(*(void *)(a1 + 32));
      if (!Mul) {
        return Mul;
      }
      uint64_t v27 = (llvm::Constant *)sub_1CC11D910(*(void *)(a1 + 40));
      if (!v27 || *(void *)Mul != *(void *)v27) {
        return 0;
      }
      return llvm::ConstantExpr::getUDiv(Mul, v27, 0, v28);
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xF:
      return Mul;
    case 0xD:
      uint64_t v30 = sub_1CC11D910(*(void *)(a1 + 32));
      if (!v30) {
        return 0;
      }
      uint64_t v4 = (llvm::detail::IEEEFloat *)v30;
      BOOL v5 = *(llvm::Constant **)(a1 + 40);
      uint64_t v6 = 47;
LABEL_50:
      return sub_1CC56C0C0((llvm *)v6, v4, v5, 0);
    case 0xE:
      if (*(unsigned __int8 *)(*(void *)(a1 - 8) + 16) >= 0x15u) {
        return 0;
      }
      else {
        return *(llvm::detail::IEEEFloat **)(a1 - 8);
      }
    default:
      return *(llvm::detail::IEEEFloat **)(a1 + 32);
  }
  while (1)
  {
    BOOL v26 = (llvm::Constant *)sub_1CC11D910(*(void *)(*(void *)(a1 + 32) + 8 * v25));
    if (!v26 || *(unsigned char *)(*(void *)v26 + 8) == 15) {
      break;
    }
    Mul = llvm::ConstantExpr::getMul(Mul, v26, 0, 0);
    if (v24 == ++v25) {
      return Mul;
    }
  }
  return 0;
}

const llvm::SCEV *llvm::ScalarEvolution::stripInjectiveFunctions(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  uint64_t result = a2;
  if (a2 && *((unsigned __int16 *)a2 + 12) - 4 >= 0xFFFFFFFE)
  {
    do
    {
      uint64_t result = (const llvm::SCEV *)*((void *)result + 4);
      if (result) {
        BOOL v3 = *((unsigned __int16 *)result + 12) - 4 > 0xFFFFFFFD;
      }
      else {
        BOOL v3 = 0;
      }
    }
    while (v3);
  }
  return result;
}

uint64_t llvm::ScalarEvolution::convertSCEVToAddRecWithPredicates(uint64_t a1, uint64_t a2, uint64_t a3, llvm::SmallPtrSetImplBase *a4)
{
  unsigned int v17 = v21;
  unint64_t v18 = v21;
  uint64_t v19 = 4;
  int v20 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = a1;
  int v25 = 0;
  BOOL v26 = &v17;
  uint64_t v27 = 0;
  uint64_t v28 = a3;
  uint64_t v5 = sub_1CC139810(&v22, a2);
  MEMORY[0x1D25D9CD0](v23, 8);
  if (*(_WORD *)(v5 + 24) != 7) {
    uint64_t v5 = 0;
  }
  uint64_t v7 = v17;
  uint64_t v6 = v18;
  if (v5)
  {
    uint64_t v9 = (uint64_t *)((char *)&v19 + 4);
    if (v18 != v17) {
      uint64_t v9 = &v19;
    }
    uint64_t v10 = *(unsigned int *)v9;
    uint64_t v11 = (uint64_t *)v18;
    if (v10)
    {
      uint64_t v12 = 0;
      while (*(void *)&v18[v12] >= 0xFFFFFFFFFFFFFFFELL)
      {
        v12 += 8;
        if (8 * v10 == v12) {
          goto LABEL_4;
        }
      }
      uint64_t v11 = (uint64_t *)&v18[v12];
    }
    uint64_t v13 = &v18[8 * v10];
    if (v11 != v13)
    {
      uint64_t v14 = *v11;
LABEL_15:
      sub_1CB89694C(a4, v14);
      uint64_t v15 = (unint64_t *)(v11 + 1);
      while (v15 != v13)
      {
        unint64_t v16 = *v15++;
        uint64_t v14 = v16;
        if (v16 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v11 = (uint64_t *)(v15 - 1);
          goto LABEL_15;
        }
      }
      uint64_t v7 = v17;
      uint64_t v6 = v18;
    }
  }
LABEL_4:
  if (v6 != v7) {
    free(v6);
  }
  return v5;
}

uint64_t llvm::ScalarEvolution::isLoopEntryGuardedByCond(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2) {
    return 0;
  }
  if (llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, a3, a4, a5)) {
    return 1;
  }
  uint64_t v10 = **(llvm::BasicBlock ***)(a2 + 32);

  return llvm::ScalarEvolution::isBasicBlockEntryGuardedByCond(a1, v10, a3, a4, a5);
}

uint64_t llvm::ScalarEvolution::getPredecessorWithUniqueSuccessorForBB(llvm::ScalarEvolution *this, const llvm::BasicBlock *a2)
{
  uint64_t result = llvm::BasicBlock::getSinglePredecessor(a2);
  if (!result)
  {
    uint64_t v5 = (uint64_t *)*((void *)this + 5);
    int v6 = *((_DWORD *)v5 + 4);
    if (!v6) {
      return 0;
    }
    uint64_t v7 = *v5;
    unsigned int v8 = v6 - 1;
    uint64_t v9 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v10 = *(const llvm::BasicBlock **)(v7 + 16 * v9);
    if (v10 != a2)
    {
      int v11 = 1;
      while (v10 != (const llvm::BasicBlock *)-4096)
      {
        int v12 = v9 + v11++;
        uint64_t v9 = v12 & v8;
        uint64_t v10 = *(const llvm::BasicBlock **)(v7 + 16 * v9);
        if (v10 == a2) {
          goto LABEL_7;
        }
      }
      return 0;
    }
LABEL_7:
    if (*(void *)(v7 + 16 * v9 + 8)) {
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CC11DF8C(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t result = 0;
  if (a1)
  {
    if (*(_WORD *)(a1 + 24) == 14)
    {
      if (!a2) {
        return 0;
      }
      if (*(_WORD *)(a2 + 24) != 14) {
        return 0;
      }
      uint64_t v4 = *(unsigned __int8 **)(a1 - 8);
      if (!v4) {
        return 0;
      }
      if (v4[16] < 0x1Cu) {
        return 0;
      }
      uint64_t v5 = *(void *)(a2 - 8);
      if (!v5) {
        return 0;
      }
      if (*(unsigned __int8 *)(v5 + 16) < 0x1Cu) {
        return 0;
      }
      if (!llvm::Instruction::isIdenticalToWhenDefined((llvm::Instruction *)v4, *(const llvm::Instruction **)(a2 - 8)))return 0; {
      if ((*(unsigned __int8 *)(v5 + 17) ^ v4[17]) > 1)
      }
        return 0;
      int v6 = v4[16];
      uint64_t result = 1;
      if (v6 != 62 && (v6 - 41) >= 0x12) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t llvm::ScalarEvolution::isKnownNonZero(llvm::ScalarEvolution *this, const llvm::SCEV *a2)
{
  uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(this, a2, 0, 0);
  llvm::ConstantRange::getUnsignedMin(RangeRef, (uint64_t)&v7);
  if (v8 < 0x41) {
    return v7 != 0;
  }
  unsigned int v5 = v8;
  if (v5 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v7) > 0x40)
  {
    uint64_t v3 = 1;
    if (!v7) {
      return v3;
    }
  }
  else
  {
    LODWORD(v3) = *v7 != 0;
  }
  unsigned int v6 = v3;
  MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
  return v6;
}

uint64_t llvm::ScalarEvolution::SplitIntoInitAndPostInc(llvm::ScalarEvolution *this, const llvm::Loop *a2, const llvm::SCEV *a3)
{
  uint64_t v6 = sub_1CC0F8EA0((uint64_t)a3, (uint64_t)a2, (uint64_t)this, 1);
  if (v6 != *((void *)this + 6))
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unsigned int v8 = this;
    int v11 = 0;
    int v12 = a2;
    __int16 v13 = 0;
    sub_1CC1380C0(&v8, (uint64_t)a3);
    MEMORY[0x1D25D9CD0](v9, 8);
  }
  return v6;
}

uint64_t llvm::ScalarEvolution::isKnownViaInduction(llvm::ScalarEvolution *a1, uint64_t a2, const llvm::SCEV *a3, const llvm::SCEV *a4)
{
  BOOL v26 = (const llvm::Loop **)v30;
  uint64_t v27 = (const llvm::Loop **)v30;
  uint64_t v28 = 8;
  int v29 = 0;
  llvm::ScalarEvolution::getUsedLoops((uint64_t)a1, (uint64_t)a3, (uint64_t)&v26);
  llvm::ScalarEvolution::getUsedLoops(v8, (uint64_t)a4, (uint64_t)&v26);
  uint64_t isLoopEntryGuardedByCond = 0;
  if (HIDWORD(v28) != v29)
  {
    int v11 = v27;
    if (v27 == v26) {
      uint64_t v12 = HIDWORD(v28);
    }
    else {
      uint64_t v12 = v28;
    }
    __int16 v13 = &v27[v12];
    if (v12)
    {
      uint64_t v14 = 8 * v12;
      while ((unint64_t)*v11 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v11;
        v14 -= 8;
        if (!v14) {
          goto LABEL_15;
        }
      }
    }
    if (v11 != v13)
    {
      for (uint64_t i = (unint64_t *)(v11 + 1); i != (unint64_t *)v13; ++i)
      {
        unint64_t v25 = *i;
        if (v25 <= 0xFFFFFFFFFFFFFFFDLL) {
          llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates();
        }
      }
      __int16 v13 = v11;
    }
LABEL_15:
    unint64_t v16 = *v13;
    uint64_t v17 = llvm::ScalarEvolution::SplitIntoInitAndPostInc(a1, *v13, a3);
    if (*((void *)a1 + 6) != v17
      && (uint64_t v19 = (const llvm::SCEV *)v17,
          uint64_t v20 = v18,
          uint64_t v21 = llvm::ScalarEvolution::SplitIntoInitAndPostInc(a1, v16, a4),
          *((void *)a1 + 6) != v21)
      && (uint64_t v23 = (const llvm::SCEV *)v21,
          uint64_t v24 = v22,
          llvm::ScalarEvolution::getLoopDisposition(a1, v19, v16) == 1)
      && llvm::ScalarEvolution::getBlockDisposition(a1, v19, **((const llvm::BasicBlock ***)v16 + 4)) == 2
      && llvm::ScalarEvolution::getLoopDisposition(a1, v23, v16) == 1
      && llvm::ScalarEvolution::getBlockDisposition(a1, v23, **((const llvm::BasicBlock ***)v16 + 4)) == 2
      && llvm::ScalarEvolution::isLoopBackedgeGuardedByCond((uint64_t)a1, (uint64_t)v16, a2, v20, v24))
    {
      uint64_t isLoopEntryGuardedByCond = llvm::ScalarEvolution::isLoopEntryGuardedByCond((uint64_t)a1, (uint64_t)v16, a2, (uint64_t)v19, (uint64_t)v23);
    }
    else
    {
      uint64_t isLoopEntryGuardedByCond = 0;
    }
  }
  if (v27 != v26) {
    free(v27);
  }
  return isLoopEntryGuardedByCond;
}

void llvm::ScalarEvolution::getUsedLoops(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v19[8] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a3;
  int v11 = (llvm::SmallPtrSetImplBase **)&v10;
  uint64_t v12 = v14;
  uint64_t v13 = 0x800000000;
  uint64_t v15 = v19;
  unint64_t v16 = v19;
  uint64_t v17 = 8;
  int v18 = 0;
  sub_1CC13F170(&v11, a2);
  unsigned int v3 = v13;
  while (v3)
  {
    uint64_t v4 = *((void *)v12 + --v3);
    LODWORD(v13) = v3;
    switch(*(_WORD *)(v4 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        uint64_t v9 = (uint64_t *)(v4 + 32);
        goto LABEL_10;
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v5 = *(void *)(v4 + 40);
        if (v5)
        {
          uint64_t v6 = *(uint64_t **)(v4 + 32);
          uint64_t v7 = 8 * v5;
          do
          {
            uint64_t v8 = *v6++;
            sub_1CC13F170(&v11, v8);
            v7 -= 8;
          }
          while (v7);
        }
        goto LABEL_11;
      case 6:
        sub_1CC13F170(&v11, *(void *)(v4 + 32));
        uint64_t v9 = (uint64_t *)(v4 + 40);
LABEL_10:
        sub_1CC13F170(&v11, *v9);
LABEL_11:
        unsigned int v3 = v13;
        break;
      default:
        break;
    }
  }
  if (v16 != v15) {
    free(v16);
  }
  if (v12 != v14) {
    free(v12);
  }
}

uint64_t llvm::ScalarEvolution::isKnownPredicate(llvm::ScalarEvolution *a1, unsigned int a2, const llvm::SCEV *a3, const llvm::SCEV *a4)
{
  unsigned int v11 = a2;
  uint64_t v9 = a4;
  uint64_t v10 = a3;
  llvm::ScalarEvolution::SimplifyICmpOperands(a1, &v11, &v10, (uint64_t *)&v9, 0, 0);
  uint64_t v5 = v11;
  uint64_t v7 = v9;
  uint64_t v6 = v10;
  if ((llvm::ScalarEvolution::isKnownViaInduction(a1, v11, v10, v9) & 1) != 0
    || (llvm::ScalarEvolution::isKnownPredicateViaSplitting(a1, v5, (uint64_t)v6, (uint64_t)v7) & 1) != 0)
  {
    return 1;
  }

  return llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, v5, v6, v7);
}

uint64_t llvm::ScalarEvolution::isKnownPredicateViaSplitting(llvm::ScalarEvolution *a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a2 != 36) {
    return 0;
  }
  uint64_t v37 = v4;
  uint64_t v38 = v5;
  if (*((unsigned char *)a1 + 513)) {
    return 0;
  }
  *((unsigned char *)a1 + 513) = 1;
  uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(a1, a4, 1, 0);
  llvm::ConstantRange::getSignedMin(RangeRef, (uint64_t)&v35);
  unsigned int v12 = v36 - 1;
  if (v36 >= 0x41) {
    uint64_t v13 = (uint64_t *)(v35 + 8 * (v12 >> 6));
  }
  else {
    uint64_t v13 = &v35;
  }
  uint64_t v14 = (1 << v12) & *v13;
  if (v36 >= 0x41 && v35) {
    MEMORY[0x1D25D9CB0]();
  }
  if (v14)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t v15 = a3;
    while (2)
    {
      switch(*(_WORD *)(v15 + 24))
      {
        case 1:
        case 2:
        case 3:
        case 0xD:
          unint64_t v16 = (llvm::FixedVectorType **)(v15 + 40);
          goto LABEL_16;
        case 4:
          unint64_t v16 = (llvm::FixedVectorType **)(v15 + 48);
          goto LABEL_16;
        case 5:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          int v34 = *(uint64_t **)(v15 + 32);
          goto LABEL_39;
        case 6:
          int v34 = (uint64_t *)(v15 + 40);
LABEL_39:
          uint64_t v15 = *v34;
          continue;
        case 0xE:
          unint64_t v16 = *(llvm::FixedVectorType ***)(v15 - 8);
          goto LABEL_16;
        default:
          unint64_t v16 = *(llvm::FixedVectorType ***)(v15 + 32);
LABEL_16:
          uint64_t v17 = *v16;
          unsigned int v18 = *((_DWORD *)*v16 + 2);
          if (v18 != 13)
          {
            uint64_t v19 = *(void *)(*(void *)a1 + 40);
            if ((v18 & 0xFE) == 0x12) {
              unsigned int v18 = *(_DWORD *)(**((void **)v17 + 2) + 8);
            }
            uint64_t v20 = *(void *)(v19 + 504);
            if (v18 < 0x100) {
              goto LABEL_28;
            }
            unsigned int v21 = v18 >> 8;
            unint64_t v22 = *(unsigned int *)(v19 + 512);
            uint64_t v23 = v20;
            if (v22)
            {
              uint64_t v23 = v20;
              unint64_t v24 = v22;
              do
              {
                unint64_t v25 = v24 >> 1;
                uint64_t v26 = v23 + 16 * (v24 >> 1);
                unsigned int v27 = *(_DWORD *)(v26 + 8);
                uint64_t v28 = v26 + 16;
                v24 += ~(v24 >> 1);
                if (v27 < v21) {
                  uint64_t v23 = v28;
                }
                else {
                  unint64_t v24 = v25;
                }
              }
              while (v24);
            }
            if (v23 == v20 + 16 * v22 || *(_DWORD *)(v23 + 8) != v21) {
LABEL_28:
            }
              uint64_t v23 = v20;
            int v29 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v17, (llvm::LLVMContext *)*(unsigned int *)(v23 + 12));
            if ((*((_DWORD *)v17 + 2) & 0xFE) == 0x12) {
              llvm::VectorType::get(v29, (llvm::Type *)(*((unsigned int *)v17 + 8) | ((unint64_t)(*((_DWORD *)v17 + 2) == 19) << 32)));
            }
            uint64_t v17 = v29;
          }
          uint64_t v30 = *(llvm::ConstantInt **)v17;
          unsigned int v31 = *((_DWORD *)v17 + 2);
          unsigned int v36 = v31 >> 8;
          if (v31 >> 8 >= 0x41) {
            operator new[]();
          }
          uint64_t v35 = 0;
          uint64_t v32 = (llvm::ConstantInt *)llvm::ConstantInt::get(v30, (llvm::LLVMContext *)&v35, v11);
          if (v36 >= 0x41 && v35) {
            MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
          }
          unint64_t Constant = llvm::ScalarEvolution::getConstant(a1, v32);
          uint64_t result = llvm::ScalarEvolution::isKnownPredicate(a1, 39, a3, Constant);
          if (result) {
            uint64_t result = llvm::ScalarEvolution::isKnownPredicate(a1, 40, a3, a4);
          }
          break;
      }
      break;
    }
  }
  *((unsigned char *)a1 + 513) = 0;
  return result;
}

uint64_t llvm::ScalarEvolution::evaluatePredicate(llvm::ScalarEvolution *a1, unsigned int a2, const llvm::SCEV *a3, const llvm::SCEV *a4)
{
  if (llvm::ScalarEvolution::isKnownPredicate(a1, a2, a3, a4))
  {
    int v9 = 1;
    int isKnownPredicate = 1;
  }
  else
  {
    int isKnownPredicate = llvm::ScalarEvolution::isKnownPredicate(a1, dword_1CFAC44C8[a2], a3, a4);
    int v9 = 0;
  }
  return v9 | (isKnownPredicate << 8);
}

uint64_t llvm::ScalarEvolution::isBasicBlockEntryGuardedByCond(uint64_t a1, llvm::BasicBlock *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v59 = this;
  unsigned int v58 = a3;
  uint64_t v56 = a5;
  uint64_t v57 = a4;
  HIDWORD(v9) = a3;
  LODWORD(v9) = a3 - 2;
  unsigned int v8 = v9 >> 1;
  uint64_t v10 = a3;
  if (v8 <= 0x13)
  {
    uint64_t v10 = a3;
    if ((0xF0033u >> v8)) {
      uint64_t v10 = dword_1CFAC4434[v8];
    }
  }
  int v55 = v10;
  char v53 = 0;
  char v52 = 0;
  unsigned int v49 = &v53;
  BOOL v50 = (unsigned int *)&v55;
  char v51 = &v52;
  BOOL v54 = v10 != a3;
  if (v10 != a3)
  {
    unsigned int v11 = operator new(0x20uLL);
    void *v11 = &unk_1F2607680;
    v11[1] = a1;
    v11[2] = &v57;
    v11[3] = &v56;
    int isKnownViaNonRecursiveReasoning = llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, v10, a4, a5);
    *unsigned int v49 = isKnownViaNonRecursiveReasoning;
    if (*v51)
    {
      int v13 = isKnownViaNonRecursiveReasoning;
      int v14 = 0;
    }
    else
    {
      LODWORD(v48[0]) = 33;
      int v15 = (*(uint64_t (**)(void *, void *))(*v11 + 48))(v11, v48);
      char *v51 = v15;
      int v13 = *v49;
      int v14 = v15 ^ 1;
    }
    (*(void (**)(void *))(*v11 + 40))(v11);
    if (v13 && !v14) {
      return 1;
    }
    this = v59;
  }
  v48[0] = &v59;
  v48[1] = a1;
  v48[2] = &v58;
  void v48[3] = &v57;
  v48[4] = &v56;
  v48[5] = &v54;
  v48[6] = &v49;
  uint64_t v17 = *(uint64_t **)(a1 + 40);
  int v18 = *((_DWORD *)v17 + 4);
  if (v18)
  {
    uint64_t v19 = *v17;
    unsigned int v20 = v18 - 1;
    uint64_t v21 = (v18 - 1) & ((this >> 4) ^ (this >> 9));
    unint64_t v22 = *(llvm::BasicBlock **)(v19 + 16 * v21);
    if (this == v22)
    {
LABEL_17:
      uint64_t v25 = *(void *)(v19 + 16 * v21 + 8);
      if (v25 && **(llvm::BasicBlock ***)(v25 + 32) == this) {
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
      }
    }
    else
    {
      int v23 = 1;
      while (v22 != (llvm::BasicBlock *)-4096)
      {
        int v24 = v21 + v23++;
        uint64_t v21 = v24 & v20;
        unint64_t v22 = *(llvm::BasicBlock **)(v19 + 16 * v21);
        if (this == v22) {
          goto LABEL_17;
        }
      }
    }
  }
  SinglePredecessor = (const llvm::BasicBlock *)llvm::BasicBlock::getSinglePredecessor(this);
  if (SinglePredecessor)
  {
    unsigned int v27 = v59;
    while (1)
    {
      unsigned int v60 = SinglePredecessor;
      if (*(unsigned char *)(a1 + 8))
      {
        uint64_t v28 = (void *)*((void *)SinglePredecessor + 6);
        if (v28 != (void *)((char *)SinglePredecessor + 40)) {
          break;
        }
      }
LABEL_30:
      if (v54)
      {
        uint64_t v33 = operator new(0x28uLL);
        int v34 = v33;
        uint64_t v35 = (uint64_t (**)(void *, unsigned int *))&unk_1F26075D8;
        void *v33 = &unk_1F26075D8;
        v33[1] = a1;
        v33[2] = &v60;
        void v33[3] = &v57;
        v33[4] = &v56;
        if (*v49)
        {
          int v36 = 1;
        }
        else
        {
          unsigned int v61 = *v50;
          int v36 = sub_1CC138A54((uint64_t)v33, &v61);
          *unsigned int v49 = v36;
          uint64_t v35 = (uint64_t (**)(void *, unsigned int *))*v34;
        }
        if (*v51)
        {
          int v37 = 0;
        }
        else
        {
          unsigned int v61 = 33;
          int v38 = v35[6](v34, &v61);
          char *v51 = v38;
          int v36 = *v49;
          int v37 = v38 ^ 1;
          uint64_t v35 = (uint64_t (**)(void *, unsigned int *))*v34;
        }
        ((void (*)(void *))v35[5])(v34);
        if (v36)
        {
          if (!v37) {
            return 1;
          }
        }
      }
      int v39 = (void *)*((void *)SinglePredecessor + 5);
      if (v39 != (void *)((char *)SinglePredecessor + 40))
      {
        unsigned int v40 = v39 - 3;
        if (!v39) {
          unsigned int v40 = 0;
        }
        unsigned int v41 = *((unsigned __int8 *)v40 + 16) - 40;
        if (v41 < 0xFFFFFFF5) {
          unsigned int v40 = 0;
        }
        if (v39)
        {
          BOOL v42 = *((unsigned char *)v40 + 16) == 30 && v41 >= 0xFFFFFFF5;
          if (v42
            && (*((_DWORD *)v40 + 5) & 0x7FFFFFF) != 1
            && sub_1CC121888((uint64_t)v48, *(v40 - 12), *(v40 - 4) != (void)v27))
          {
            return 1;
          }
        }
      }
      SinglePredecessor = (const llvm::BasicBlock *)llvm::ScalarEvolution::getPredecessorWithUniqueSuccessorForBB((llvm::ScalarEvolution *)a1, SinglePredecessor);
      unsigned int v27 = v43;
      if (!SinglePredecessor) {
        goto LABEL_53;
      }
    }
    uint64_t v29 = v58;
    uint64_t v31 = v56;
    uint64_t v30 = v57;
    while (1)
    {
      int v63 = &v64;
      uint64_t v64 = 0;
      uint64_t v32 = v28 ? (uint64_t)(v28 - 3) : 0;
      unsigned int v61 = 125;
      uint64_t v62 = 0;
      if (sub_1CC13E39C((uint64_t)&v61, v32)
        && (llvm::ScalarEvolution::isImpliedCond(a1, v29, v30, v31, v64, 0, 0) & 1) != 0)
      {
        return 1;
      }
      uint64_t v28 = (void *)v28[1];
      if (v28 == (void *)((char *)SinglePredecessor + 40)) {
        goto LABEL_30;
      }
    }
  }
LABEL_53:
  uint64_t v44 = *(void *)(a1 + 24);
  if (!*(unsigned char *)(v44 + 184)) {
    llvm::AssumptionCache::scanFunction(*(llvm::AssumptionCache **)(a1 + 24));
  }
  uint64_t v45 = *(unsigned int *)(v44 + 24);
  if (v45)
  {
    uint64_t v46 = 32 * v45;
    int v47 = (const llvm::Instruction **)(*(void *)(v44 + 16) + 16);
    do
    {
      if (*v47) {
        llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 32), *v47, v59);
      }
      v47 += 4;
      v46 -= 32;
    }
    while (v46);
  }
  return 0;
}

uint64_t llvm::ScalarEvolution::evaluatePredicateAt(llvm::ScalarEvolution *a1, uint64_t a2, const llvm::SCEV *a3, const llvm::SCEV *a4, uint64_t a5)
{
  unsigned __int16 v10 = llvm::ScalarEvolution::evaluatePredicate(a1, a2, a3, a4);
  if (v10 >= 0x100u) {
    goto LABEL_6;
  }
  if (llvm::ScalarEvolution::isBasicBlockEntryGuardedByCond((uint64_t)a1, *(llvm::BasicBlock **)(a5 + 40), a2, (uint64_t)a3, (uint64_t)a4))
  {
    LOBYTE(v10) = 1;
LABEL_6:
    int isBasicBlockEntryGuardedByCond = 1;
    return v10 | (isBasicBlockEntryGuardedByCond << 8);
  }
  int isBasicBlockEntryGuardedByCond = llvm::ScalarEvolution::isBasicBlockEntryGuardedByCond((uint64_t)a1, *(llvm::BasicBlock **)(a5 + 40), dword_1CFAC44C8[(int)a2], (uint64_t)a3, (uint64_t)a4);
  LOBYTE(v10) = 0;
  return v10 | (isBasicBlockEntryGuardedByCond << 8);
}

uint64_t llvm::SCEVAddRecExpr::getPostIncExpr(llvm::SCEVAddRecExpr *this, llvm::ScalarEvolution *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v13 = v15;
  uint64_t v14 = 0x300000000;
  uint64_t v4 = *((void *)this + 5);
  unsigned int v5 = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v6 = **((void **)this + 4);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 8 * (v4 - 1);
    do
    {
      long long v9 = *(_OWORD *)(*((void *)this + 4) + v7);
      v16[0] = &v17;
      long long v17 = v9;
      v16[1] = (void *)0x200000002;
      uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(a2, v16, 0, 0);
      if (v16[0] != &v17) {
        free(v16[0]);
      }
      if (v14 >= (unint64_t)HIDWORD(v14)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v13 + v14) = AddExpr;
      unsigned int v5 = v14 + 1;
      LODWORD(v14) = v14 + 1;
      v7 += 8;
    }
    while (v8 != v7);
    uint64_t v6 = *(void *)(*((void *)this + 4) + 8 * (*((_DWORD *)this + 10) - 1));
    if (v5 >= HIDWORD(v14)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  *((void *)v13 + v5) = v6;
  LODWORD(v14) = v14 + 1;
  uint64_t AddRecExpr = llvm::ScalarEvolution::getAddRecExpr(a2, (uint64_t **)&v13, *((const llvm::Loop **)this + 6), 0);
  if (v13 != v15) {
    free(v13);
  }
  return AddRecExpr;
}

uint64_t llvm::ScalarEvolution::getMonotonicPredicateTypeImpl(llvm::ScalarEvolution *a1, uint64_t a2, int a3)
{
  if ((a3 & 0xFFFFFFFE) == 0x20)
  {
    uint64_t v6 = 0;
    BOOL v8 = 0;
  }
  else
  {
    unsigned int v3 = a3 & 0xFFFFFFFA;
    __int16 v4 = *(_WORD *)(a2 + 28);
    if ((a3 - 34) > 3)
    {
      if ((v4 & 4) != 0)
      {
        unsigned int v11 = (const llvm::SCEV *)sub_1CBFD7EA0(a2, a1);
        if (llvm::ScalarEvolution::isKnownNonNegative(a1, v11))
        {
          BOOL v8 = v3 != 34;
          uint64_t v6 = 0x100000000;
        }
        else
        {
          BOOL isKnownNonPositive = llvm::ScalarEvolution::isKnownNonPositive(a1, v11);
          uint64_t v6 = 0x100000000;
          if (!isKnownNonPositive) {
            uint64_t v6 = 0;
          }
          BOOL v8 = v3 == 34 && isKnownNonPositive;
        }
      }
      else
      {
        uint64_t v6 = 0;
        BOOL v8 = 0;
      }
    }
    else
    {
      uint64_t v5 = v4 & 2;
      BOOL v7 = v5 == 0;
      uint64_t v6 = v5 << 31;
      BOOL v7 = v7 || v3 == 34;
      BOOL v8 = !v7;
    }
  }
  return v6 | v8;
}

unint64_t llvm::ScalarEvolution::getLoopInvariantPredicate@<X0>(llvm::ScalarEvolution *a1@<X0>, unint64_t a2@<X1>, const llvm::SCEV *a3@<X2>, const llvm::SCEV *a4@<X3>, const llvm::Loop *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = (uint64_t)a4;
  unint64_t result = llvm::ScalarEvolution::getLoopDisposition(a1, a4, a5);
  if (result == 1)
  {
    uint64_t v13 = v7;
    uint64_t v7 = (uint64_t)a3;
  }
  else
  {
    unint64_t result = llvm::ScalarEvolution::getLoopDisposition(a1, a3, a5);
    if (result != 1)
    {
LABEL_10:
      LOBYTE(v14) = 0;
      goto LABEL_11;
    }
    unint64_t result = llvm::CmpInst::getSwappedPredicate(a2);
    a2 = result;
    uint64_t v13 = (uint64_t)a3;
  }
  if (!v7 || *(_WORD *)(v7 + 24) != 7 || *(const llvm::Loop **)(v7 + 48) != a5) {
    goto LABEL_10;
  }
  unint64_t result = llvm::ScalarEvolution::getMonotonicPredicateTypeImpl(a1, v7, a2);
  unint64_t v14 = HIDWORD(result);
  if (HIDWORD(result))
  {
    uint64_t v15 = a2;
    if (result) {
      uint64_t v15 = dword_1CFAC44C8[(int)a2];
    }
    unint64_t result = llvm::ScalarEvolution::isLoopBackedgeGuardedByCond((uint64_t)a1, (uint64_t)a5, v15, v7, v13);
    if (result)
    {
      unint64_t v14 = **(void **)(v7 + 32);
      *(_DWORD *)a6 = a2;
      *(void *)(a6 + 8) = v14;
      *(void *)(a6 + 16) = v13;
      LOBYTE(v14) = 1;
      goto LABEL_12;
    }
    goto LABEL_10;
  }
LABEL_11:
  *(unsigned char *)a6 = 0;
LABEL_12:
  *(unsigned char *)(a6 + 24) = v14;
  return result;
}

uint64_t llvm::ScalarEvolution::isKnownPredicateViaNoOverflow(llvm::ScalarEvolution *a1, int a2, const llvm::APInt *a3, const llvm::APInt *a4, uint64_t a5)
{
  unsigned int v35 = 1;
  int v34 = 0;
  unsigned int v33 = 1;
  uint64_t v32 = 0;
  int v5 = a2 - 34;
  uint64_t v6 = a4;
  uint64_t v7 = (uint64_t)a3;
  uint64_t v8 = (uint64_t)a3;
  long long v9 = a3;
  unsigned __int16 v10 = a3;
  switch(v5)
  {
    case 0:
      unsigned __int16 v10 = a4;
      uint64_t v6 = a3;
      goto LABEL_14;
    case 1:
      long long v9 = a4;
      uint64_t v6 = a3;
      goto LABEL_2;
    case 2:
LABEL_14:
      if (!sub_1CC11F6F8(a1, (uint64_t)v6, v10, &v32, &v34, 2)) {
        goto LABEL_3;
      }
      if (v35 <= 0x40)
      {
        if (v34 >= v32) {
          goto LABEL_3;
        }
        goto LABEL_17;
      }
      unint64_t v24 = (((unint64_t)v35 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v24) {
          goto LABEL_3;
        }
        unint64_t v25 = *(void *)((char *)v34 + v24 - 8);
        unint64_t v26 = *(void *)((char *)v32 + v24 - 8);
        v24 -= 8;
        BOOL v12 = v25 > v26;
      }
      while (v25 == v26);
      goto LABEL_25;
    case 3:
LABEL_2:
      if (!sub_1CC11F6F8(a1, (uint64_t)v6, v9, &v32, &v34, 2)) {
        goto LABEL_3;
      }
      if (v35 <= 0x40)
      {
        BOOL v12 = v34 > v32;
        goto LABEL_25;
      }
      unint64_t v27 = (((unint64_t)v35 + 63) >> 3) & 0x3FFFFFF8;
      break;
    case 4:
      uint64_t v8 = (uint64_t)a4;
      uint64_t v6 = a3;
      goto LABEL_19;
    case 5:
      uint64_t v7 = (uint64_t)a4;
      uint64_t v6 = a3;
      goto LABEL_9;
    case 6:
LABEL_19:
      if (!sub_1CC11F6F8(a1, v8, v6, &v34, &v32, 4)) {
        goto LABEL_3;
      }
      if (v35 <= 0x40)
      {
        if ((uint64_t)((void)v34 << -(char)v35) >> -(char)v35 < (uint64_t)((void)v32 << -(char)v35) >> -(char)v35) {
          goto LABEL_17;
        }
        goto LABEL_3;
      }
      uint64_t v13 = *((void *)v34 + ((v35 - 1) >> 6)) & (1 << (v35 - 1));
      unsigned int v14 = v33 - 1;
      uint64_t v15 = &v32;
      if (v33 >= 0x41) {
        uint64_t v15 = (void **)((char *)v32 + 8 * (v14 >> 6));
      }
      if ((v13 != 0) != (((unint64_t)*v15 >> v14) & 1)) {
        goto LABEL_31;
      }
      unint64_t v21 = (((unint64_t)v35 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v21) {
          goto LABEL_3;
        }
        unint64_t v22 = *(void *)((char *)v34 + v21 - 8);
        unint64_t v23 = *(void *)((char *)v32 + v21 - 8);
        v21 -= 8;
        BOOL v12 = v22 > v23;
      }
      while (v22 == v23);
      goto LABEL_25;
    case 7:
LABEL_9:
      if (!sub_1CC11F6F8(a1, v7, v6, &v34, &v32, 4)) {
        goto LABEL_3;
      }
      if (v35 <= 0x40)
      {
        if ((uint64_t)((void)v34 << -(uint64_t)v35) >> -(uint64_t)v35 <= (uint64_t)((void)v32 << -(uint64_t)v35) >> -(uint64_t)v35) {
          goto LABEL_17;
        }
        goto LABEL_3;
      }
      uint64_t v13 = *((void *)v34 + ((v35 - 1) >> 6)) & (1 << (v35 - 1));
      unsigned int v16 = v33 - 1;
      long long v17 = &v32;
      if (v33 >= 0x41) {
        long long v17 = (void **)((char *)v32 + 8 * (v16 >> 6));
      }
      if ((v13 != 0) != (((unint64_t)*v17 >> v16) & 1))
      {
LABEL_31:
        if (!v13) {
          goto LABEL_3;
        }
        goto LABEL_17;
      }
      unint64_t v18 = (((unint64_t)v35 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v18) {
          goto LABEL_17;
        }
        unint64_t v19 = *(void *)((char *)v34 + v18 - 8);
        unint64_t v20 = *(void *)((char *)v32 + v18 - 8);
        v18 -= 8;
        BOOL v12 = v19 > v20;
      }
      while (v19 == v20);
      goto LABEL_25;
    default:
      goto LABEL_3;
  }
  while (v27)
  {
    unint64_t v28 = *(void *)((char *)v34 + v27 - 8);
    unint64_t v29 = *(void *)((char *)v32 + v27 - 8);
    v27 -= 8;
    BOOL v12 = v28 > v29;
    if (v28 != v29)
    {
LABEL_25:
      if (v12)
      {
LABEL_3:
        uint64_t result = 0;
        goto LABEL_4;
      }
      break;
    }
  }
LABEL_17:
  uint64_t result = 1;
LABEL_4:
  if (v33 >= 0x41 && v32)
  {
    unsigned int v30 = result;
    MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17, a3, a4, a5, v8, v9, v10);
    uint64_t result = v30;
  }
  if (v35 >= 0x41)
  {
    if (v34)
    {
      unsigned int v31 = result;
      MEMORY[0x1D25D9CB0](v34, 0x1000C8000313F17, a3, a4, a5, v8, v9, v10);
      return v31;
    }
  }
  return result;
}

uint64_t sub_1CC11F6F8(llvm::ScalarEvolution *a1, uint64_t a2, const llvm::APInt *a3, void **this, void **a5, int a6)
{
  long long v9 = a3;
  unsigned __int16 v10 = (const llvm::APInt *)a2;
  int v12 = *(unsigned __int16 *)(a2 + 24);
  if (a2 && v12 == 4)
  {
    uint64_t v13 = a2;
    if (*(void *)(a2 + 40) == 2)
    {
      unsigned int v14 = *(unint64_t **)(a2 + 32);
      unint64_t Constant = *v14;
      unsigned __int16 v10 = (const llvm::APInt *)v14[1];
      int v16 = *(_WORD *)(a2 + 28) & 7;
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  while (2)
  {
    switch(v12)
    {
      case 1:
      case 2:
      case 3:
      case 13:
        unint64_t v18 = (uint64_t ***)(v13 + 40);
        goto LABEL_13;
      case 4:
        unint64_t v18 = (uint64_t ***)(v13 + 48);
        goto LABEL_13;
      case 5:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        long long v17 = *(uint64_t **)(v13 + 32);
        goto LABEL_8;
      case 6:
        long long v17 = (uint64_t *)(v13 + 40);
LABEL_8:
        uint64_t v13 = *v17;
        int v12 = *(unsigned __int16 *)(v13 + 24);
        continue;
      case 14:
        unint64_t v18 = *(uint64_t ****)(v13 - 8);
        goto LABEL_13;
      default:
        unint64_t v18 = *(uint64_t ****)(v13 + 32);
LABEL_13:
        unint64_t v19 = *v18;
        unsigned int v20 = *((_DWORD *)*v18 + 2);
        if (v20 != 13)
        {
          uint64_t v21 = *(void *)(*(void *)a1 + 40);
          if ((v20 & 0xFE) == 0x12) {
            unsigned int v20 = *(_DWORD *)(*v19[2] + 8);
          }
          uint64_t v22 = *(void *)(v21 + 504);
          if (v20 < 0x100) {
            goto LABEL_25;
          }
          unsigned int v23 = v20 >> 8;
          unint64_t v24 = *(unsigned int *)(v21 + 512);
          uint64_t v25 = v22;
          if (v24)
          {
            uint64_t v25 = v22;
            unint64_t v26 = v24;
            do
            {
              unint64_t v27 = v26 >> 1;
              uint64_t v28 = v25 + 16 * (v26 >> 1);
              unsigned int v29 = *(_DWORD *)(v28 + 8);
              uint64_t v30 = v28 + 16;
              v26 += ~(v26 >> 1);
              if (v29 < v23) {
                uint64_t v25 = v30;
              }
              else {
                unint64_t v26 = v27;
              }
            }
            while (v26);
          }
          if (v25 == v22 + 16 * v24 || *(_DWORD *)(v25 + 8) != v23) {
LABEL_25:
          }
            uint64_t v25 = v22;
          unsigned int v31 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v19, (llvm::LLVMContext *)*(unsigned int *)(v25 + 12));
          if ((v19[1] & 0xFE) == 0x12)
          {
            uint64_t v71 = (llvm::Type *)*((unsigned int *)v19 + 8);
            if (*((_DWORD *)v19 + 2) == 19) {
              llvm::ScalableVectorType::get(v31, v71);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v31, v71);
            }
          }
          unint64_t v19 = v31;
        }
        uint64_t v32 = (llvm::ConstantInt *)*v19;
        unsigned int v33 = *((_DWORD *)v19 + 2);
        unsigned int v74 = v33 >> 8;
        if (v33 >> 8 >= 0x41) {
          operator new[]();
        }
        uint64_t v73 = 0;
        int v34 = (llvm::ConstantInt *)llvm::ConstantInt::get(v32, (llvm::LLVMContext *)&v73, a3);
        if (v74 >= 0x41 && v73) {
          MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
        }
        unint64_t Constant = llvm::ScalarEvolution::getConstant(a1, v34);
        int v16 = a6;
        break;
    }
    break;
  }
LABEL_31:
  int v35 = v16 & a6;
  if (*(_WORD *)(Constant + 24)) {
    BOOL v36 = 0;
  }
  else {
    BOOL v36 = v35 == a6;
  }
  if (!v36) {
    return 0;
  }
  int v37 = *((unsigned __int16 *)v9 + 12);
  if (v9 && v37 == 4)
  {
    int v38 = v9;
    if (*((void *)v9 + 5) == 2)
    {
      int v39 = (unint64_t *)*((void *)v9 + 4);
      __int16 v40 = *((_WORD *)v9 + 14);
      unint64_t v41 = *v39;
      long long v9 = (const llvm::APInt *)v39[1];
      int v42 = v40 & 7;
      goto LABEL_66;
    }
  }
  else
  {
    int v38 = v9;
  }
  while (2)
  {
    switch(v37)
    {
      case 1:
      case 2:
      case 3:
      case 13:
        uint64_t v44 = (uint64_t ***)((char *)v38 + 40);
        goto LABEL_48;
      case 4:
        uint64_t v44 = (uint64_t ***)((char *)v38 + 48);
        goto LABEL_48;
      case 5:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        uint64_t v43 = (const llvm::APInt **)*((void *)v38 + 4);
        goto LABEL_43;
      case 6:
        uint64_t v43 = (const llvm::APInt **)((char *)v38 + 40);
LABEL_43:
        int v38 = *v43;
        int v37 = *((unsigned __int16 *)v38 + 12);
        continue;
      case 14:
        uint64_t v44 = (uint64_t ***)*((void *)v38 - 1);
        goto LABEL_48;
      default:
        uint64_t v44 = (uint64_t ***)*((void *)v38 + 4);
LABEL_48:
        uint64_t v45 = *v44;
        unsigned int v46 = *((_DWORD *)*v44 + 2);
        if (v46 != 13)
        {
          uint64_t v47 = *(void *)(*(void *)a1 + 40);
          if ((v46 & 0xFE) == 0x12) {
            unsigned int v46 = *(_DWORD *)(*v45[2] + 8);
          }
          uint64_t v48 = *(void *)(v47 + 504);
          if (v46 < 0x100) {
            goto LABEL_60;
          }
          unsigned int v49 = v46 >> 8;
          unint64_t v50 = *(unsigned int *)(v47 + 512);
          uint64_t v51 = v48;
          if (v50)
          {
            uint64_t v51 = v48;
            unint64_t v52 = v50;
            do
            {
              unint64_t v53 = v52 >> 1;
              uint64_t v54 = v51 + 16 * (v52 >> 1);
              unsigned int v55 = *(_DWORD *)(v54 + 8);
              uint64_t v56 = v54 + 16;
              v52 += ~(v52 >> 1);
              if (v55 < v49) {
                uint64_t v51 = v56;
              }
              else {
                unint64_t v52 = v53;
              }
            }
            while (v52);
          }
          if (v51 == v48 + 16 * v50 || *(_DWORD *)(v51 + 8) != v49) {
LABEL_60:
          }
            uint64_t v51 = v48;
          uint64_t v57 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v45, (llvm::LLVMContext *)*(unsigned int *)(v51 + 12));
          if ((v45[1] & 0xFE) == 0x12)
          {
            int v72 = (llvm::Type *)*((unsigned int *)v45 + 8);
            if (*((_DWORD *)v45 + 2) == 19) {
              llvm::ScalableVectorType::get(v57, v72);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v57, v72);
            }
          }
          uint64_t v45 = v57;
        }
        unsigned int v58 = (llvm::ConstantInt *)*v45;
        unsigned int v59 = *((_DWORD *)v45 + 2);
        unsigned int v74 = v59 >> 8;
        if (v59 >> 8 >= 0x41) {
          operator new[]();
        }
        uint64_t v73 = 0;
        unsigned int v60 = (llvm::ConstantInt *)llvm::ConstantInt::get(v58, (llvm::LLVMContext *)&v73, a3);
        if (v74 >= 0x41 && v73) {
          MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
        }
        unint64_t v41 = llvm::ScalarEvolution::getConstant(a1, v60);
        int v42 = a6;
        break;
    }
    break;
  }
LABEL_66:
  int v61 = v42 & a6;
  if (*(_WORD *)(v41 + 24)) {
    BOOL v62 = 0;
  }
  else {
    BOOL v62 = v61 == a6;
  }
  if (!v62 || v9 != v10) {
    return 0;
  }
  uint64_t v65 = *(void *)(Constant + 32);
  if (*((_DWORD *)this + 2) > 0x40u || *(_DWORD *)(v65 + 32) > 0x40u)
  {
    uint64_t v66 = (const void **)(v65 + 24);
    if ((void **)(v65 + 24) != this)
    {
      llvm::APInt::reallocate((uint64_t)this, *(_DWORD *)(v65 + 32));
      uint64_t v69 = *((unsigned int *)this + 2);
      if (v69 <= 0x40) {
        *this = (void *)*v66;
      }
      else {
        memcpy(*this, *v66, ((unint64_t)(v69 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
  }
  else
  {
    *this = *(void **)(v65 + 24);
    *((_DWORD *)this + 2) = *(_DWORD *)(v65 + 32);
  }
  uint64_t v67 = *(void *)(v41 + 32);
  if (*((_DWORD *)a5 + 2) > 0x40u || *(_DWORD *)(v67 + 32) > 0x40u)
  {
    uint64_t v68 = (const void **)(v67 + 24);
    if ((void **)(v67 + 24) != a5)
    {
      llvm::APInt::reallocate((uint64_t)a5, *(_DWORD *)(v67 + 32));
      uint64_t v70 = *((unsigned int *)a5 + 2);
      if (v70 <= 0x40) {
        *a5 = (void *)*v68;
      }
      else {
        memcpy(*a5, *v68, ((unint64_t)(v70 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
  }
  else
  {
    *a5 = *(void **)(v67 + 24);
    *((_DWORD *)a5 + 2) = *(_DWORD *)(v67 + 32);
  }
  return 1;
}

uint64_t llvm::ScalarEvolution::isImpliedViaGuard(uint64_t a1, uint64_t a2, unsigned int a3, const llvm::APInt *a4, const llvm::SCEV *a5)
{
  if (!*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  uint64_t v5 = a2 + 40;
  uint64_t v6 = *(void *)(a2 + 48);
  if (v6 == a2 + 40) {
    return 0;
  }
  while (1)
  {
    uint64_t v15 = &v16;
    uint64_t v16 = 0;
    uint64_t v11 = v6 ? v6 - 24 : 0;
    int v13 = 125;
    uint64_t v14 = 0;
    if (sub_1CC13E39C((uint64_t)&v13, v11)
      && (llvm::ScalarEvolution::isImpliedCond(a1, a3, a4, a5, v16, 0, 0) & 1) != 0)
    {
      break;
    }
    uint64_t v6 = *(void *)(v6 + 8);
    if (v6 == v5) {
      return 0;
    }
  }
  return 1;
}

uint64_t llvm::ScalarEvolution::isImpliedCond(uint64_t a1, unsigned int a2, const llvm::APInt *a3, const llvm::SCEV *a4, uint64_t a5, llvm::LLVMContext *a6, uint64_t a7)
{
  int v8 = (int)a6;
  if (llvm::ConstantInt::getBool(**(llvm::ConstantInt ***)a5, a6, a3) == (void *)a5) {
    return 1;
  }
  uint64_t v14 = *(void *)(a1 + 136);
  uint64_t v16 = (_DWORD *)(a1 + 148);
  uint64_t v15 = *(unsigned int *)(a1 + 148);
  if (v14 == *(void *)(a1 + 128))
  {
    if (v15)
    {
      long long v17 = 0;
      uint64_t v18 = 8 * v15;
      unint64_t v19 = *(void **)(a1 + 136);
      while (*v19 != a5)
      {
        if (*v19 == -2) {
          long long v17 = v19;
        }
        ++v19;
        v18 -= 8;
        if (!v18)
        {
          if (!v17) {
            goto LABEL_10;
          }
          unsigned int v97 = a2;
          uint64_t v98 = a7;
          *long long v17 = a5;
          --*(_DWORD *)(a1 + 152);
          goto LABEL_12;
        }
      }
      return 0;
    }
LABEL_10:
    unsigned int v20 = *(_DWORD *)(a1 + 144);
    if (v15 < v20)
    {
      unsigned int v97 = a2;
      uint64_t v98 = a7;
      *uint64_t v16 = v15 + 1;
      *(void *)(v14 + 8 * v15) = a5;
      goto LABEL_12;
    }
  }
  else
  {
    unsigned int v20 = *(_DWORD *)(a1 + 144);
  }
  if (3 * v20 <= 4 * ((int)v15 - *(_DWORD *)(a1 + 152)))
  {
    if (v20 >= 0x40) {
      v20 *= 2;
    }
    else {
      unsigned int v20 = 128;
    }
  }
  else if (v20 - v15 >= v20 >> 3)
  {
    goto LABEL_24;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 128), v20);
  unsigned int v20 = *(_DWORD *)(a1 + 144);
  uint64_t v14 = *(void *)(a1 + 136);
LABEL_24:
  unsigned int v26 = v20 - 1;
  unsigned int v27 = (v20 - 1) & ((a5 >> 4) ^ (a5 >> 9));
  uint64_t v28 = (void *)(v14 + 8 * v27);
  uint64_t v29 = *v28;
  if (*v28 != -1)
  {
    uint64_t v30 = 0;
    int v31 = 1;
    while (v29 != a5)
    {
      if (v30) {
        BOOL v32 = 0;
      }
      else {
        BOOL v32 = v29 == -2;
      }
      if (v32) {
        uint64_t v30 = v28;
      }
      unsigned int v33 = v27 + v31++;
      unsigned int v27 = v33 & v26;
      uint64_t v28 = (void *)(v14 + 8 * (v33 & v26));
      uint64_t v29 = *v28;
      if (*v28 == -1) {
        goto LABEL_36;
      }
    }
    return 0;
  }
  uint64_t v30 = 0;
LABEL_36:
  if (v30) {
    int v34 = v30;
  }
  else {
    int v34 = v28;
  }
  if (*v34 == a5) {
    return 0;
  }
  if (*v34 == -2) {
    --*(_DWORD *)(a1 + 152);
  }
  else {
    ++*v16;
  }
  unsigned int v97 = a2;
  uint64_t v98 = a7;
  *int v34 = a5;
LABEL_12:
  uint64_t v21 = 0;
  unsigned int v22 = *(unsigned __int8 *)(a5 + 16);
  if (!a5 || v22 < 0x1C) {
    goto LABEL_69;
  }
  int v23 = *(_DWORD *)(*(void *)a5 + 8);
  if ((v23 & 0xFE) == 0x12) {
    int v23 = *(_DWORD *)(**(void **)(*(void *)a5 + 16) + 8);
  }
  if (v23 != 269) {
    goto LABEL_67;
  }
  if (v22 != 85)
  {
    if (v22 == 56)
    {
      int v24 = *(_DWORD *)(a5 + 20);
      uint64_t v25 = (v24 & 0x40000000) != 0 ? *(uint64_t **)(a5 - 8) : (uint64_t *)(a5 - 32 * (v24 & 0x7FFFFFF));
      uint64_t v38 = *v25;
      if (*v25)
      {
        uint64_t v39 = v25[4];
        if (!v39)
        {
          uint64_t v21 = *v25;
          goto LABEL_68;
        }
LABEL_51:
        if ((v8 & 1) == 0)
        {
          uint64_t v41 = v98;
          if (llvm::ScalarEvolution::isImpliedCond(a1, v97, a3, a4, v38, 0, v98))
          {
            uint64_t v35 = 1;
            goto LABEL_115;
          }
          uint64_t v42 = a1;
          uint64_t v43 = v97;
          uint64_t v44 = a3;
          uint64_t v45 = a4;
          uint64_t v46 = v39;
          uint64_t v47 = 0;
          goto LABEL_89;
        }
        uint64_t v57 = v98;
        if (*(unsigned char *)(a5 + 16) != 81)
        {
          uint64_t v35 = 0;
          goto LABEL_115;
        }
        goto LABEL_94;
      }
    }
LABEL_67:
    uint64_t v21 = 0;
    goto LABEL_68;
  }
  uint64_t v21 = 0;
  uint64_t v36 = *(void *)(a5 - 32);
  if (!v36) {
    goto LABEL_68;
  }
  unsigned int v37 = *(unsigned __int8 *)(v36 + 16);
  if (v37 > 0x14) {
    goto LABEL_68;
  }
  uint64_t v38 = *(void *)(a5 - 96);
  uint64_t v39 = *(void *)(a5 - 64);
  if (v37 == 16)
  {
    uint64_t v40 = *(unsigned int *)(v36 + 32);
    if (v40 < 0x41)
    {
      uint64_t v21 = 0;
      if (*(void *)(v36 + 24)) {
        goto LABEL_68;
      }
      goto LABEL_49;
    }
    int v91 = 0;
    int64_t v92 = (unint64_t)(v40 + 63) >> 6;
    do
    {
      if (v92-- < 1) {
        break;
      }
      unint64_t v94 = *(void *)(*(void *)(v36 + 24) + 8 * v92);
      v91 += __clz(v94);
    }
    while (!v94);
    int v95 = v40 | 0xFFFFFFC0;
    if ((v40 & 0x3F) == 0) {
      int v95 = 0;
    }
    if (v91 + v95 != v40 || v38 == 0) {
      goto LABEL_67;
    }
  }
  else
  {
    if (v37 == 17)
    {
      uint64_t v21 = 0;
      if (!sub_1CB844168(v36, 0.0)) {
        goto LABEL_68;
      }
LABEL_49:
      if (!v38) {
        goto LABEL_68;
      }
      goto LABEL_50;
    }
    if (v37 - 18 >= 3 && v37 != 13 || !v38) {
      goto LABEL_67;
    }
  }
LABEL_50:
  uint64_t v21 = v38;
  if (v39) {
    goto LABEL_51;
  }
LABEL_68:
  unsigned int v22 = *(unsigned __int8 *)(a5 + 16);
LABEL_69:
  if (!a5 || v22 < 0x1C) {
    goto LABEL_91;
  }
  unsigned int v48 = *(_DWORD *)(*(void *)a5 + 8);
  if ((v48 & 0xFE) == 0x12) {
    unsigned int v48 = *(_DWORD *)(**(void **)(*(void *)a5 + 16) + 8);
  }
  if (v48 != 269)
  {
LABEL_91:
    uint64_t v35 = 0;
    if (!a5 || v22 != 81) {
      goto LABEL_115;
    }
    uint64_t v57 = v98;
    if (!v8)
    {
      unsigned int v58 = *(_WORD *)(a5 + 18) & 0x3F;
LABEL_95:
      unsigned int v59 = *(llvm::Value **)(a5 - 64);
      uint64_t v60 = *(void *)(a1 + 104);
      unsigned int v61 = *(_DWORD *)(a1 + 120);
      if (v61)
      {
        unsigned int v62 = ((v59 >> 4) ^ (v59 >> 9)) & (v61 - 1);
        uint64_t v63 = v60 + 48 * v62;
        uint64_t v64 = *(llvm::Value **)(v63 + 24);
        if (v64 == v59)
        {
LABEL_102:
          if (v63 == v60 + 48 * v61 || (uint64_t SCEVIter = *(llvm::detail::IEEEFloat ***)(v63 + 40)) == 0)
          {
            uint64_t SCEVIter = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v59);
            uint64_t v60 = *(void *)(a1 + 104);
            unsigned int v61 = *(_DWORD *)(a1 + 120);
          }
          uint64_t v68 = *(llvm::Value **)(a5 - 32);
          if (v61)
          {
            unsigned int v69 = ((v68 >> 4) ^ (v68 >> 9)) & (v61 - 1);
            uint64_t v70 = v60 + 48 * v69;
            uint64_t v71 = *(llvm::Value **)(v70 + 24);
            if (v71 == v68) {
              goto LABEL_111;
            }
            int v72 = 1;
            while (v71 != (llvm::Value *)-4096)
            {
              unsigned int v73 = v69 + v72++;
              unsigned int v69 = v73 & (v61 - 1);
              uint64_t v70 = v60 + 48 * v69;
              uint64_t v71 = *(llvm::Value **)(v70 + 24);
              if (v71 == v68) {
                goto LABEL_111;
              }
            }
          }
          uint64_t v70 = v60 + 48 * v61;
LABEL_111:
          if (v70 == v60 + 48 * v61 || (unsigned int v74 = *(llvm::detail::IEEEFloat ***)(v70 + 40)) == 0) {
            unsigned int v74 = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v68);
          }
          uint64_t isImpliedCond = llvm::ScalarEvolution::isImpliedCond((llvm::ScalarEvolution *)a1, v97, a3, a4, v58, SCEVIter, v74, v57);
          goto LABEL_114;
        }
        int v65 = 1;
        while (v64 != (llvm::Value *)-4096)
        {
          unsigned int v66 = v62 + v65++;
          unsigned int v62 = v66 & (v61 - 1);
          uint64_t v63 = v60 + 48 * v62;
          uint64_t v64 = *(llvm::Value **)(v63 + 24);
          if (v64 == v59) {
            goto LABEL_102;
          }
        }
      }
      uint64_t v63 = v60 + 48 * v61;
      goto LABEL_102;
    }
LABEL_94:
    unsigned int v58 = dword_1CFAC44C8[*(_WORD *)(a5 + 18) & 0x3F];
    goto LABEL_95;
  }
  if (v22 == 85)
  {
    int v51 = 0;
    uint64_t v52 = 0;
    unint64_t v53 = *(unsigned __int8 **)(a5 - 64);
    if (!v53) {
      goto LABEL_84;
    }
    unsigned int v48 = v53[16];
    if (v48 > 0x14) {
      goto LABEL_84;
    }
    uint64_t v54 = *(void *)(a5 - 96);
    uint64_t v52 = *(void *)(a5 - 32);
    if (llvm::Constant::isOneValue((llvm::Constant *)v53))
    {
      if (v54)
      {
        unsigned int v48 = v52 != 0;
        int v51 = 1;
        uint64_t v21 = v54;
      }
      else
      {
        uint64_t v52 = 0;
        unsigned int v48 = 0;
        int v51 = 1;
      }
      goto LABEL_84;
    }
LABEL_83:
    uint64_t v52 = 0;
    int v51 = 0;
LABEL_84:
    int v55 = v51 & v48;
    goto LABEL_85;
  }
  if (v22 != 57) {
    goto LABEL_83;
  }
  int v49 = *(_DWORD *)(a5 + 20);
  if ((v49 & 0x40000000) != 0) {
    unint64_t v50 = *(uint64_t **)(a5 - 8);
  }
  else {
    unint64_t v50 = (uint64_t *)(a5 - 32 * (v49 & 0x7FFFFFF));
  }
  uint64_t v35 = 0;
  uint64_t v21 = *v50;
  if (!*v50) {
    goto LABEL_115;
  }
  uint64_t v52 = v50[4];
  if (!v52) {
    goto LABEL_115;
  }
  int v55 = 1;
LABEL_85:
  if (!v55 || (v8 & 1) == 0)
  {
    unsigned int v22 = *(unsigned __int8 *)(a5 + 16);
    goto LABEL_91;
  }
  uint64_t v35 = 1;
  uint64_t v41 = v98;
  if ((llvm::ScalarEvolution::isImpliedCond(a1, v97, a3, a4, v21, 1, v98) & 1) == 0)
  {
    uint64_t v42 = a1;
    uint64_t v43 = v97;
    uint64_t v44 = a3;
    uint64_t v45 = a4;
    uint64_t v46 = v52;
    uint64_t v47 = 1;
LABEL_89:
    uint64_t isImpliedCond = llvm::ScalarEvolution::isImpliedCond(v42, v43, v44, v45, v46, v47, v41);
LABEL_114:
    uint64_t v35 = isImpliedCond;
  }
LABEL_115:
  uint64_t v75 = (unsigned int *)(a1 + 144);
  uint64_t v77 = *(void *)(a1 + 128);
  uint64_t v76 = *(void *)(a1 + 136);
  if (v76 == v77)
  {
    uint64_t v78 = *v16;
    unsigned int v79 = (void *)(v76 + 8 * v78);
    if (v78)
    {
      uint64_t v80 = 0;
      uint64_t v81 = 8 * v78;
      while (*(void *)(v76 + v80) != a5)
      {
        v80 += 8;
        if (v81 == v80) {
          goto LABEL_120;
        }
      }
      unsigned int v79 = (void *)(v76 + v80);
    }
LABEL_120:
    uint64_t v77 = *(void *)(a1 + 136);
  }
  else
  {
    uint64_t v83 = *v75;
    int v84 = v83 - 1;
    unsigned int v85 = (v83 - 1) & ((a5 >> 4) ^ (a5 >> 9));
    unsigned int v79 = (void *)(v76 + 8 * v85);
    uint64_t v86 = *v79;
    if (*v79 == -1)
    {
      BOOL v87 = 0;
LABEL_142:
      if (v87) {
        unsigned int v79 = v87;
      }
      if (*v79 != a5) {
        unsigned int v79 = (void *)(v76 + 8 * v83);
      }
    }
    else
    {
      BOOL v87 = 0;
      int v88 = 1;
      while (v86 != a5)
      {
        if (v87) {
          BOOL v89 = 0;
        }
        else {
          BOOL v89 = v86 == -2;
        }
        if (v89) {
          BOOL v87 = v79;
        }
        unsigned int v90 = v85 + v88++;
        unsigned int v85 = v90 & v84;
        unsigned int v79 = (void *)(v76 + 8 * (v90 & v84));
        uint64_t v86 = *v79;
        if (*v79 == -1) {
          goto LABEL_142;
        }
      }
    }
  }
  if (v76 == v77) {
    uint64_t v75 = (unsigned int *)(a1 + 148);
  }
  if (v79 != (void *)(v76 + 8 * *v75))
  {
    *unsigned int v79 = -2;
    ++*(_DWORD *)(a1 + 152);
  }
  return v35;
}

uint64_t llvm::ScalarEvolution::isImpliedCond(llvm::ScalarEvolution *a1, unsigned int a2, const llvm::APInt *a3, const llvm::SCEV *a4, unsigned int a5, llvm::detail::IEEEFloat **SignExtendExpr, llvm::detail::IEEEFloat **a7, uint64_t a8)
{
  int v13 = a3;
  uint64_t v16 = a3;
  while (2)
  {
    switch(*((_WORD *)v16 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        long long v17 = (uint64_t *)((char *)v16 + 40);
        goto LABEL_4;
      case 4:
        long long v17 = (uint64_t *)((char *)v16 + 48);
        goto LABEL_4;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v45 = (const llvm::APInt **)*((void *)v16 + 4);
        goto LABEL_37;
      case 6:
        uint64_t v45 = (const llvm::APInt **)((char *)v16 + 40);
LABEL_37:
        uint64_t v16 = *v45;
        continue;
      case 0xE:
        long long v17 = (uint64_t *)*((void *)v16 - 1);
        goto LABEL_4;
      default:
        long long v17 = (uint64_t *)*((void *)v16 + 4);
LABEL_4:
        uint64_t v18 = *v17;
        unsigned int v19 = *(_DWORD *)(*v17 + 8);
        uint64_t v20 = *(void *)(*(void *)a1 + 40);
        if (v19 == 15)
        {
          if ((v19 & 0xFE) == 0x12) {
            unsigned int v19 = *(_DWORD *)(**(void **)(v18 + 16) + 8);
          }
          uint64_t v90 = *(void *)(v20 + 504);
          if (v19 < 0x100) {
            goto LABEL_133;
          }
          unsigned int v91 = v19 >> 8;
          unint64_t v92 = *(unsigned int *)(v20 + 512);
          uint64_t v93 = *(void *)(v20 + 504);
          if (v92)
          {
            uint64_t v93 = v90;
            unint64_t v94 = v92;
            do
            {
              unint64_t v95 = v94 >> 1;
              uint64_t v96 = v93 + 16 * (v94 >> 1);
              unsigned int v97 = *(_DWORD *)(v96 + 8);
              uint64_t v98 = v96 + 16;
              v94 += ~(v94 >> 1);
              if (v97 < v91) {
                uint64_t v93 = v98;
              }
              else {
                unint64_t v94 = v95;
              }
            }
            while (v94);
          }
          if (v93 == v90 + 16 * v92 || *(_DWORD *)(v93 + 8) != v91) {
LABEL_133:
          }
            uint64_t v93 = v90;
          unint64_t v22 = *(unsigned int *)(v93 + 12);
        }
        else
        {
          unint64_t v22 = sub_1CB83544C(v20 + 272, v18);
          if (v21 == 1) {
        }
          }
        int v23 = SignExtendExpr;
        break;
    }
    break;
  }
  while (2)
  {
    switch(*((_WORD *)v23 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        int v24 = (uint64_t *)(v23 + 5);
        goto LABEL_10;
      case 4:
        int v24 = (uint64_t *)(v23 + 6);
        goto LABEL_10;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v46 = (llvm::detail::IEEEFloat ***)v23[4];
        goto LABEL_39;
      case 6:
        uint64_t v46 = (llvm::detail::IEEEFloat ***)(v23 + 5);
LABEL_39:
        int v23 = *v46;
        continue;
      case 0xE:
        int v24 = (uint64_t *)*(v23 - 1);
        goto LABEL_10;
      default:
        int v24 = (uint64_t *)v23[4];
LABEL_10:
        uint64_t v25 = *v24;
        unsigned int v26 = *(_DWORD *)(*v24 + 8);
        uint64_t v27 = *(void *)(*(void *)a1 + 40);
        if (v26 == 15)
        {
          if ((v26 & 0xFE) == 0x12) {
            unsigned int v26 = *(_DWORD *)(**(void **)(v25 + 16) + 8);
          }
          uint64_t v99 = *(void *)(v27 + 504);
          if (v26 < 0x100) {
            goto LABEL_146;
          }
          unsigned int v100 = v26 >> 8;
          unint64_t v101 = *(unsigned int *)(v27 + 512);
          uint64_t v102 = *(void *)(v27 + 504);
          if (v101)
          {
            uint64_t v102 = v99;
            unint64_t v103 = v101;
            do
            {
              unint64_t v104 = v103 >> 1;
              uint64_t v105 = v102 + 16 * (v103 >> 1);
              unsigned int v106 = *(_DWORD *)(v105 + 8);
              uint64_t v107 = v105 + 16;
              v103 += ~(v103 >> 1);
              if (v106 < v100) {
                uint64_t v102 = v107;
              }
              else {
                unint64_t v103 = v104;
              }
            }
            while (v103);
          }
          if (v102 == v99 + 16 * v101 || *(_DWORD *)(v102 + 8) != v100) {
LABEL_146:
          }
            uint64_t v102 = v99;
          unint64_t v29 = *(unsigned int *)(v102 + 12);
        }
        else
        {
          unint64_t v29 = sub_1CB83544C(v27 + 272, v25);
          if (v28 == 1) {
        }
          }
        if (v22 >= v29)
        {
          uint64_t v30 = v13;
          while (2)
          {
            switch(*((_WORD *)v30 + 12))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                int v31 = (uint64_t *)((char *)v30 + 40);
                goto LABEL_17;
              case 4:
                int v31 = (uint64_t *)((char *)v30 + 48);
                goto LABEL_17;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                uint64_t v47 = (const llvm::SCEV **)*((void *)v30 + 4);
                goto LABEL_41;
              case 6:
                uint64_t v47 = (const llvm::SCEV **)((char *)v30 + 40);
LABEL_41:
                uint64_t v30 = *v47;
                continue;
              case 0xE:
                int v31 = (uint64_t *)*((void *)v30 - 1);
                goto LABEL_17;
              default:
                int v31 = (uint64_t *)*((void *)v30 + 4);
LABEL_17:
                uint64_t v32 = *v31;
                unsigned int v33 = *(_DWORD *)(*v31 + 8);
                uint64_t v34 = *(void *)(*(void *)a1 + 40);
                if (v33 == 15)
                {
                  if ((v33 & 0xFE) == 0x12) {
                    unsigned int v33 = *(_DWORD *)(**(void **)(v32 + 16) + 8);
                  }
                  uint64_t v108 = *(void *)(v34 + 504);
                  if (v33 < 0x100) {
                    goto LABEL_159;
                  }
                  unsigned int v109 = v33 >> 8;
                  unint64_t v110 = *(unsigned int *)(v34 + 512);
                  uint64_t v111 = *(void *)(v34 + 504);
                  if (v110)
                  {
                    uint64_t v111 = v108;
                    unint64_t v112 = v110;
                    do
                    {
                      unint64_t v113 = v112 >> 1;
                      uint64_t v114 = v111 + 16 * (v112 >> 1);
                      unsigned int v115 = *(_DWORD *)(v114 + 8);
                      uint64_t v116 = v114 + 16;
                      v112 += ~(v112 >> 1);
                      if (v115 < v109) {
                        uint64_t v111 = v116;
                      }
                      else {
                        unint64_t v112 = v113;
                      }
                    }
                    while (v112);
                  }
                  if (v111 == v108 + 16 * v110 || *(_DWORD *)(v111 + 8) != v109) {
LABEL_159:
                  }
                    uint64_t v111 = v108;
                  unint64_t v36 = *(unsigned int *)(v111 + 12);
                }
                else
                {
                  unint64_t v36 = sub_1CB83544C(v34 + 272, v32);
                  if (v35 == 1) {
                }
                  }
                unsigned int v37 = SignExtendExpr;
                while (2)
                {
                  switch(*((_WORD *)v37 + 12))
                  {
                    case 1:
                    case 2:
                    case 3:
                    case 0xD:
                      uint64_t v38 = (uint64_t *)(v37 + 5);
                      goto LABEL_23;
                    case 4:
                      uint64_t v38 = (uint64_t *)(v37 + 6);
                      goto LABEL_23;
                    case 5:
                    case 7:
                    case 8:
                    case 9:
                    case 0xA:
                    case 0xB:
                    case 0xC:
                      unsigned int v48 = (llvm::detail::IEEEFloat ***)v37[4];
                      goto LABEL_43;
                    case 6:
                      unsigned int v48 = (llvm::detail::IEEEFloat ***)(v37 + 5);
LABEL_43:
                      unsigned int v37 = *v48;
                      continue;
                    case 0xE:
                      uint64_t v38 = (uint64_t *)*(v37 - 1);
                      goto LABEL_23;
                    default:
                      uint64_t v38 = (uint64_t *)v37[4];
LABEL_23:
                      uint64_t v39 = *v38;
                      unsigned int v40 = *(_DWORD *)(*v38 + 8);
                      uint64_t v41 = *(void *)(*(void *)a1 + 40);
                      if (v40 == 15)
                      {
                        if ((v40 & 0xFE) == 0x12) {
                          unsigned int v40 = *(_DWORD *)(**(void **)(v39 + 16) + 8);
                        }
                        uint64_t v117 = *(void *)(v41 + 504);
                        if (v40 < 0x100) {
                          goto LABEL_172;
                        }
                        unsigned int v118 = v40 >> 8;
                        unint64_t v119 = *(unsigned int *)(v41 + 512);
                        uint64_t v120 = *(void *)(v41 + 504);
                        if (v119)
                        {
                          uint64_t v120 = v117;
                          unint64_t v121 = v119;
                          do
                          {
                            unint64_t v122 = v121 >> 1;
                            uint64_t v123 = v120 + 16 * (v121 >> 1);
                            unsigned int v124 = *(_DWORD *)(v123 + 8);
                            uint64_t v125 = v123 + 16;
                            v121 += ~(v121 >> 1);
                            if (v124 < v118) {
                              uint64_t v120 = v125;
                            }
                            else {
                              unint64_t v121 = v122;
                            }
                          }
                          while (v121);
                        }
                        if (v120 == v117 + 16 * v119 || *(_DWORD *)(v120 + 8) != v118) {
LABEL_172:
                        }
                          uint64_t v120 = v117;
                        unint64_t v43 = *(unsigned int *)(v120 + 12);
                      }
                      else
                      {
                        unint64_t v43 = sub_1CB83544C(v41 + 272, v39);
                        if (v42 == 1) {
                      }
                        }
                      if (v36 > v43)
                      {
                        int v49 = SignExtendExpr;
                        while (2)
                        {
                          switch(*((_WORD *)v49 + 12))
                          {
                            case 1:
                            case 2:
                            case 3:
                            case 0xD:
                              unint64_t v50 = v49 + 5;
                              goto LABEL_47;
                            case 4:
                              unint64_t v50 = v49 + 6;
                              goto LABEL_47;
                            case 5:
                            case 7:
                            case 8:
                            case 9:
                            case 0xA:
                            case 0xB:
                            case 0xC:
                              int64_t v126 = (llvm::detail::IEEEFloat ***)v49[4];
                              goto LABEL_177;
                            case 6:
                              int64_t v126 = (llvm::detail::IEEEFloat ***)(v49 + 5);
LABEL_177:
                              int v49 = *v126;
                              continue;
                            case 0xE:
                              unint64_t v50 = (llvm::detail::IEEEFloat **)*(v49 - 1);
                              goto LABEL_47;
                            default:
                              unint64_t v50 = (llvm::detail::IEEEFloat **)v49[4];
LABEL_47:
                              if (*((unsigned char *)*v50 + 8) == 15) {
                                return 0;
                              }
                              int v51 = a7;
                              while (2)
                              {
                                switch(*((_WORD *)v51 + 12))
                                {
                                  case 1:
                                  case 2:
                                  case 3:
                                  case 0xD:
                                    uint64_t v52 = v51 + 5;
                                    goto LABEL_51;
                                  case 4:
                                    uint64_t v52 = v51 + 6;
                                    goto LABEL_51;
                                  case 5:
                                  case 7:
                                  case 8:
                                  case 9:
                                  case 0xA:
                                  case 0xB:
                                  case 0xC:
                                    int v127 = (llvm::detail::IEEEFloat ***)v51[4];
                                    goto LABEL_179;
                                  case 6:
                                    int v127 = (llvm::detail::IEEEFloat ***)(v51 + 5);
LABEL_179:
                                    int v51 = *v127;
                                    continue;
                                  case 0xE:
                                    uint64_t v52 = (llvm::detail::IEEEFloat **)*(v51 - 1);
                                    goto LABEL_51;
                                  default:
                                    uint64_t v52 = (llvm::detail::IEEEFloat **)v51[4];
LABEL_51:
                                    if (*((unsigned char *)*v52 + 8) == 15) {
                                      return 0;
                                    }
                                    if (a5 - 38 < 4)
                                    {
                                      unsigned int v140 = v13;
                                      while (2)
                                      {
                                        switch(*((_WORD *)v140 + 12))
                                        {
                                          case 1:
                                          case 2:
                                          case 3:
                                          case 0xD:
                                            uint64_t v141 = (uint64_t ***)((char *)v140 + 40);
                                            goto LABEL_227;
                                          case 4:
                                            uint64_t v141 = (uint64_t ***)((char *)v140 + 48);
                                            goto LABEL_227;
                                          case 5:
                                          case 7:
                                          case 8:
                                          case 9:
                                          case 0xA:
                                          case 0xB:
                                          case 0xC:
                                            int v153 = (const llvm::SCEV **)*((void *)v140 + 4);
                                            goto LABEL_265;
                                          case 6:
                                            int v153 = (const llvm::SCEV **)((char *)v140 + 40);
LABEL_265:
                                            unsigned int v140 = *v153;
                                            continue;
                                          case 0xE:
                                            uint64_t v141 = (uint64_t ***)*((void *)v140 - 1);
                                            goto LABEL_227;
                                          default:
                                            uint64_t v141 = (uint64_t ***)*((void *)v140 + 4);
LABEL_227:
                                            uint64_t SignExtendExpr = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::getSignExtendExpr(a1, SignExtendExpr, *v141, 0);
                                            uint64_t v142 = v13;
                                            while (2)
                                            {
                                              switch(*((_WORD *)v142 + 12))
                                              {
                                                case 1:
                                                case 2:
                                                case 3:
                                                case 0xD:
                                                  uint64_t v143 = (uint64_t ***)((char *)v142 + 40);
                                                  goto LABEL_230;
                                                case 4:
                                                  uint64_t v143 = (uint64_t ***)((char *)v142 + 48);
                                                  goto LABEL_230;
                                                case 5:
                                                case 7:
                                                case 8:
                                                case 9:
                                                case 0xA:
                                                case 0xB:
                                                case 0xC:
                                                  BOOL v154 = (const llvm::SCEV **)*((void *)v142 + 4);
                                                  goto LABEL_267;
                                                case 6:
                                                  BOOL v154 = (const llvm::SCEV **)((char *)v142 + 40);
LABEL_267:
                                                  uint64_t v142 = *v154;
                                                  continue;
                                                case 0xE:
                                                  uint64_t v143 = (uint64_t ***)*((void *)v142 - 1);
                                                  goto LABEL_230;
                                                default:
                                                  uint64_t v143 = (uint64_t ***)*((void *)v142 + 4);
LABEL_230:
                                                  unint64_t ZeroExtendExpr = llvm::ScalarEvolution::getSignExtendExpr(a1, a7, *v143, 0);
                                                  break;
                                              }
                                              break;
                                            }
                                            break;
                                        }
                                        break;
                                      }
                                    }
                                    else
                                    {
                                      unint64_t v53 = v13;
                                      while (2)
                                      {
                                        switch(*((_WORD *)v53 + 12))
                                        {
                                          case 1:
                                          case 2:
                                          case 3:
                                          case 0xD:
                                            uint64_t v54 = (llvm::Type **)((char *)v53 + 40);
                                            goto LABEL_56;
                                          case 4:
                                            uint64_t v54 = (llvm::Type **)((char *)v53 + 48);
                                            goto LABEL_56;
                                          case 5:
                                          case 7:
                                          case 8:
                                          case 9:
                                          case 0xA:
                                          case 0xB:
                                          case 0xC:
                                            BOOL v128 = (const llvm::SCEV **)*((void *)v53 + 4);
                                            goto LABEL_181;
                                          case 6:
                                            BOOL v128 = (const llvm::SCEV **)((char *)v53 + 40);
LABEL_181:
                                            unint64_t v53 = *v128;
                                            continue;
                                          case 0xE:
                                            uint64_t v54 = (llvm::Type **)*((void *)v53 - 1);
                                            goto LABEL_56;
                                          default:
                                            uint64_t v54 = (llvm::Type **)*((void *)v53 + 4);
LABEL_56:
                                            uint64_t SignExtendExpr = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::getZeroExtendExpr(a1, (const llvm::SCEV *)SignExtendExpr, *v54, 0);
                                            int v55 = v13;
                                            while (2)
                                            {
                                              switch(*((_WORD *)v55 + 12))
                                              {
                                                case 1:
                                                case 2:
                                                case 3:
                                                case 0xD:
                                                  uint64_t v56 = (llvm::Type **)((char *)v55 + 40);
                                                  goto LABEL_59;
                                                case 4:
                                                  uint64_t v56 = (llvm::Type **)((char *)v55 + 48);
                                                  goto LABEL_59;
                                                case 5:
                                                case 7:
                                                case 8:
                                                case 9:
                                                case 0xA:
                                                case 0xB:
                                                case 0xC:
                                                  unsigned int v129 = (const llvm::SCEV **)*((void *)v55 + 4);
                                                  goto LABEL_183;
                                                case 6:
                                                  unsigned int v129 = (const llvm::SCEV **)((char *)v55 + 40);
LABEL_183:
                                                  int v55 = *v129;
                                                  continue;
                                                case 0xE:
                                                  uint64_t v56 = (llvm::Type **)*((void *)v55 - 1);
                                                  goto LABEL_59;
                                                default:
                                                  uint64_t v56 = (llvm::Type **)*((void *)v55 + 4);
LABEL_59:
                                                  unint64_t ZeroExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr(a1, (const llvm::SCEV *)a7, *v56, 0);
                                                  break;
                                              }
                                              break;
                                            }
                                            break;
                                        }
                                        break;
                                      }
                                    }
                                    a7 = (llvm::detail::IEEEFloat **)ZeroExtendExpr;
                                    break;
                                }
                                break;
                              }
                              break;
                          }
                          break;
                        }
                      }
                      break;
                  }
                  break;
                }
                break;
            }
            return llvm::ScalarEvolution::isImpliedCondBalancedTypes(a1, a2, v13, a4, a5, (const llvm::SCEV *)SignExtendExpr, (const llvm::SCEV *)a7, a8);
          }
        }
        if (a5 - 38 < 4)
        {
LABEL_86:
          uint64_t v77 = v13;
          while (2)
          {
            switch(*((_WORD *)v77 + 12))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                uint64_t v78 = (char *)v77 + 40;
                goto LABEL_89;
              case 4:
                uint64_t v78 = (char *)v77 + 48;
                goto LABEL_89;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                uint64_t v130 = (const llvm::SCEV **)*((void *)v77 + 4);
                goto LABEL_197;
              case 6:
                uint64_t v130 = (const llvm::SCEV **)((char *)v77 + 40);
LABEL_197:
                uint64_t v77 = *v130;
                continue;
              case 0xE:
                uint64_t v78 = (char *)*((void *)v77 - 1);
                goto LABEL_89;
              default:
                uint64_t v78 = (char *)*((void *)v77 + 4);
LABEL_89:
                if (*(unsigned char *)(*(void *)v78 + 8) == 15) {
                  return 0;
                }
                unsigned int v79 = a4;
                while (2)
                {
                  switch(*((_WORD *)v79 + 12))
                  {
                    case 1:
                    case 2:
                    case 3:
                    case 0xD:
                      uint64_t v80 = (char *)v79 + 40;
                      goto LABEL_93;
                    case 4:
                      uint64_t v80 = (char *)v79 + 48;
                      goto LABEL_93;
                    case 5:
                    case 7:
                    case 8:
                    case 9:
                    case 0xA:
                    case 0xB:
                    case 0xC:
                      unint64_t v131 = (const llvm::SCEV **)*((void *)v79 + 4);
                      goto LABEL_199;
                    case 6:
                      unint64_t v131 = (const llvm::SCEV **)((char *)v79 + 40);
LABEL_199:
                      unsigned int v79 = *v131;
                      continue;
                    case 0xE:
                      uint64_t v80 = (char *)*((void *)v79 - 1);
                      goto LABEL_93;
                    default:
                      uint64_t v80 = (char *)*((void *)v79 + 4);
LABEL_93:
                      if (*(unsigned char *)(*(void *)v80 + 8) == 15) {
                        return 0;
                      }
                      if (a2 - 38 < 4)
                      {
                        uint64_t v86 = SignExtendExpr;
                        while (2)
                        {
                          switch(*((_WORD *)v86 + 12))
                          {
                            case 1:
                            case 2:
                            case 3:
                            case 0xD:
                              BOOL v87 = (uint64_t ***)(v86 + 5);
                              goto LABEL_114;
                            case 4:
                              BOOL v87 = (uint64_t ***)(v86 + 6);
                              goto LABEL_114;
                            case 5:
                            case 7:
                            case 8:
                            case 9:
                            case 0xA:
                            case 0xB:
                            case 0xC:
                              unint64_t v138 = (llvm::detail::IEEEFloat ***)v86[4];
                              goto LABEL_219;
                            case 6:
                              unint64_t v138 = (llvm::detail::IEEEFloat ***)(v86 + 5);
LABEL_219:
                              uint64_t v86 = *v138;
                              continue;
                            case 0xE:
                              BOOL v87 = (uint64_t ***)*(v86 - 1);
                              goto LABEL_114;
                            default:
                              BOOL v87 = (uint64_t ***)v86[4];
LABEL_114:
                              int v13 = (const llvm::SCEV *)llvm::ScalarEvolution::getSignExtendExpr(a1, (llvm::detail::IEEEFloat **)v13, *v87, 0);
                              int v88 = SignExtendExpr;
                              while (2)
                              {
                                switch(*((_WORD *)v88 + 12))
                                {
                                  case 1:
                                  case 2:
                                  case 3:
                                  case 0xD:
                                    BOOL v89 = (uint64_t ***)(v88 + 5);
                                    goto LABEL_117;
                                  case 4:
                                    BOOL v89 = (uint64_t ***)(v88 + 6);
                                    goto LABEL_117;
                                  case 5:
                                  case 7:
                                  case 8:
                                  case 9:
                                  case 0xA:
                                  case 0xB:
                                  case 0xC:
                                    int v139 = (llvm::detail::IEEEFloat ***)v88[4];
                                    goto LABEL_221;
                                  case 6:
                                    int v139 = (llvm::detail::IEEEFloat ***)(v88 + 5);
LABEL_221:
                                    int v88 = *v139;
                                    continue;
                                  case 0xE:
                                    BOOL v89 = (uint64_t ***)*(v88 - 1);
                                    goto LABEL_117;
                                  default:
                                    BOOL v89 = (uint64_t ***)v88[4];
LABEL_117:
                                    unint64_t v85 = llvm::ScalarEvolution::getSignExtendExpr(a1, (llvm::detail::IEEEFloat **)a4, *v89, 0);
                                    break;
                                }
                                break;
                              }
                              break;
                          }
                          break;
                        }
                      }
                      else
                      {
                        uint64_t v81 = SignExtendExpr;
                        while (2)
                        {
                          switch(*((_WORD *)v81 + 12))
                          {
                            case 1:
                            case 2:
                            case 3:
                            case 0xD:
                              int v82 = v81 + 5;
                              goto LABEL_98;
                            case 4:
                              int v82 = v81 + 6;
                              goto LABEL_98;
                            case 5:
                            case 7:
                            case 8:
                            case 9:
                            case 0xA:
                            case 0xB:
                            case 0xC:
                              unsigned int v136 = (llvm::detail::IEEEFloat ***)v81[4];
                              goto LABEL_215;
                            case 6:
                              unsigned int v136 = (llvm::detail::IEEEFloat ***)(v81 + 5);
LABEL_215:
                              uint64_t v81 = *v136;
                              continue;
                            case 0xE:
                              int v82 = (llvm::Type **)*(v81 - 1);
                              goto LABEL_98;
                            default:
                              int v82 = (llvm::Type **)v81[4];
LABEL_98:
                              int v13 = (const llvm::SCEV *)llvm::ScalarEvolution::getZeroExtendExpr(a1, v13, *v82, 0);
                              uint64_t v83 = SignExtendExpr;
                              while (2)
                              {
                                switch(*((_WORD *)v83 + 12))
                                {
                                  case 1:
                                  case 2:
                                  case 3:
                                  case 0xD:
                                    int v84 = v83 + 5;
                                    goto LABEL_101;
                                  case 4:
                                    int v84 = v83 + 6;
                                    goto LABEL_101;
                                  case 5:
                                  case 7:
                                  case 8:
                                  case 9:
                                  case 0xA:
                                  case 0xB:
                                  case 0xC:
                                    uint64_t v137 = (llvm::detail::IEEEFloat ***)v83[4];
                                    goto LABEL_217;
                                  case 6:
                                    uint64_t v137 = (llvm::detail::IEEEFloat ***)(v83 + 5);
LABEL_217:
                                    uint64_t v83 = *v137;
                                    continue;
                                  case 0xE:
                                    int v84 = (llvm::Type **)*(v83 - 1);
                                    goto LABEL_101;
                                  default:
                                    int v84 = (llvm::Type **)v83[4];
LABEL_101:
                                    unint64_t v85 = llvm::ScalarEvolution::getZeroExtendExpr(a1, a4, *v84, 0);
                                    break;
                                }
                                break;
                              }
                              break;
                          }
                          break;
                        }
                      }
                      a4 = (const llvm::SCEV *)v85;
                      break;
                  }
                  break;
                }
                break;
            }
            return llvm::ScalarEvolution::isImpliedCondBalancedTypes(a1, a2, v13, a4, a5, (const llvm::SCEV *)SignExtendExpr, (const llvm::SCEV *)a7, a8);
          }
        }
        unsigned int v58 = SignExtendExpr;
        while (2)
        {
          switch(*((_WORD *)v58 + 12))
          {
            case 1:
            case 2:
            case 3:
            case 0xD:
              unsigned int v59 = v58 + 5;
              goto LABEL_65;
            case 4:
              unsigned int v59 = v58 + 6;
              goto LABEL_65;
            case 5:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
              uint64_t v132 = (llvm::detail::IEEEFloat ***)v58[4];
              goto LABEL_203;
            case 6:
              uint64_t v132 = (llvm::detail::IEEEFloat ***)(v58 + 5);
LABEL_203:
              unsigned int v58 = *v132;
              continue;
            case 0xE:
              unsigned int v59 = (llvm::detail::IEEEFloat **)*(v58 - 1);
              goto LABEL_65;
            default:
              unsigned int v59 = (llvm::detail::IEEEFloat **)v58[4];
LABEL_65:
              if (*((unsigned char *)*v59 + 8) == 15) {
                goto LABEL_86;
              }
              uint64_t v60 = a7;
              while (2)
              {
                switch(*((_WORD *)v60 + 12))
                {
                  case 1:
                  case 2:
                  case 3:
                  case 0xD:
                    unsigned int v61 = v60 + 5;
                    goto LABEL_69;
                  case 4:
                    unsigned int v61 = v60 + 6;
                    goto LABEL_69;
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                  case 0xA:
                  case 0xB:
                  case 0xC:
                    uint64_t v133 = (llvm::detail::IEEEFloat ***)v60[4];
                    goto LABEL_205;
                  case 6:
                    uint64_t v133 = (llvm::detail::IEEEFloat ***)(v60 + 5);
LABEL_205:
                    uint64_t v60 = *v133;
                    continue;
                  case 0xE:
                    unsigned int v61 = (llvm::detail::IEEEFloat **)*(v60 - 1);
                    goto LABEL_69;
                  default:
                    unsigned int v61 = (llvm::detail::IEEEFloat **)v60[4];
LABEL_69:
                    if (*((unsigned char *)*v61 + 8) == 15) {
                      goto LABEL_86;
                    }
                    unsigned int v62 = v13;
                    while (2)
                    {
                      switch(*((_WORD *)v62 + 12))
                      {
                        case 1:
                        case 2:
                        case 3:
                        case 0xD:
                          uint64_t v63 = (uint64_t *)((char *)v62 + 40);
                          goto LABEL_73;
                        case 4:
                          uint64_t v63 = (uint64_t *)((char *)v62 + 48);
                          goto LABEL_73;
                        case 5:
                        case 7:
                        case 8:
                        case 9:
                        case 0xA:
                        case 0xB:
                        case 0xC:
                          uint64_t v134 = (const llvm::SCEV **)*((void *)v62 + 4);
                          goto LABEL_207;
                        case 6:
                          uint64_t v134 = (const llvm::SCEV **)((char *)v62 + 40);
LABEL_207:
                          unsigned int v62 = *v134;
                          continue;
                        case 0xE:
                          uint64_t v63 = (uint64_t *)*((void *)v62 - 1);
                          goto LABEL_73;
                        default:
                          uint64_t v63 = (uint64_t *)*((void *)v62 + 4);
LABEL_73:
                          uint64_t v64 = *v63;
                          int v65 = SignExtendExpr;
                          while (2)
                          {
                            switch(*((_WORD *)v65 + 12))
                            {
                              case 1:
                              case 2:
                              case 3:
                              case 0xD:
                                unsigned int v66 = v65 + 5;
                                goto LABEL_76;
                              case 4:
                                unsigned int v66 = v65 + 6;
                                goto LABEL_76;
                              case 5:
                              case 7:
                              case 8:
                              case 9:
                              case 0xA:
                              case 0xB:
                              case 0xC:
                                unsigned int v135 = (llvm::detail::IEEEFloat ***)v65[4];
                                goto LABEL_209;
                              case 6:
                                unsigned int v135 = (llvm::detail::IEEEFloat ***)(v65 + 5);
LABEL_209:
                                int v65 = *v135;
                                continue;
                              case 0xE:
                                unsigned int v66 = (llvm::Type **)*(v65 - 1);
                                goto LABEL_76;
                              default:
                                unsigned int v66 = (llvm::Type **)v65[4];
LABEL_76:
                                unsigned int v155 = *v66;
                                unsigned int v67 = *(_DWORD *)(v64 + 8);
                                uint64_t v68 = *(void *)(*(void *)a1 + 40);
                                if (v67 == 15)
                                {
                                  if ((v67 & 0xFE) == 0x12) {
                                    unsigned int v67 = *(_DWORD *)(**(void **)(v64 + 16) + 8);
                                  }
                                  uint64_t v144 = *(void *)(v68 + 504);
                                  if (v67 < 0x100) {
                                    goto LABEL_258;
                                  }
                                  unsigned int v145 = v67 >> 8;
                                  unint64_t v146 = *(unsigned int *)(v68 + 512);
                                  uint64_t v147 = *(void *)(v68 + 504);
                                  if (v146)
                                  {
                                    uint64_t v147 = v144;
                                    unint64_t v148 = v146;
                                    do
                                    {
                                      unint64_t v149 = v148 >> 1;
                                      uint64_t v150 = v147 + 16 * (v148 >> 1);
                                      unsigned int v151 = *(_DWORD *)(v150 + 8);
                                      uint64_t v152 = v150 + 16;
                                      v148 += ~(v148 >> 1);
                                      if (v151 < v145) {
                                        uint64_t v147 = v152;
                                      }
                                      else {
                                        unint64_t v148 = v149;
                                      }
                                    }
                                    while (v148);
                                  }
                                  if (v147 == v144 + 16 * v146 || *(_DWORD *)(v147 + 8) != v145) {
LABEL_258:
                                  }
                                    uint64_t v147 = v144;
                                  unsigned int v70 = *(_DWORD *)(v147 + 12);
                                }
                                else
                                {
                                  unsigned int v70 = sub_1CB83544C(v68 + 272, v64);
                                  if (v69 == 1) {
                                }
                                  }
                                unsigned int v157 = v70;
                                if (v70 > 0x40) {
                                  llvm::APInt::initSlowCase((llvm::APInt *)&v156);
                                }
                                unint64_t v71 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v70;
                                if (!v70) {
                                  unint64_t v71 = 0;
                                }
                                unint64_t v156 = v71;
                                int v72 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)a1, (llvm::LLVMContext *)&v156, a3);
                                unint64_t Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(a1, v72);
                                uint64_t v74 = llvm::ScalarEvolution::getZeroExtendExpr(a1, Constant, v155, 0);
                                if (v157 >= 0x41 && v156) {
                                  MEMORY[0x1D25D9CB0](v156, 0x1000C8000313F17);
                                }
                                if (!llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, 37, SignExtendExpr, v74))goto LABEL_86; {
                                if (!llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, 37, a7, v74))goto LABEL_86;
                                }
                                uint64_t TruncateExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getTruncateExpr(a1, (const llvm::SCEV *)SignExtendExpr, (llvm::Type *)v64, 0);
                                uint64_t v76 = (const llvm::SCEV *)llvm::ScalarEvolution::getTruncateExpr(a1, (const llvm::SCEV *)a7, (llvm::Type *)v64, 0);
                                if ((llvm::ScalarEvolution::isImpliedCondBalancedTypes(a1, a2, v13, a4, a5, TruncateExpr, v76, a8) & 1) == 0)goto LABEL_86; {
                                uint64_t result = 1;
                                }
                                break;
                            }
                            break;
                          }
                          break;
                      }
                      break;
                    }
                    break;
                }
                break;
              }
              break;
          }
          return result;
        }
    }
  }
}

BOOL sub_1CC121888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a2;
  char v16 = a3;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(**(void **)a1 + 48);
  if (v5) {
    uint64_t v6 = v5 - 24;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v15 = v6;
  if (llvm::ScalarEvolution::isImpliedCond(v4, **(unsigned int **)(a1 + 16), **(void **)(a1 + 24), **(void **)(a1 + 32), a2, a3, v6))return 1; {
  if (!**(unsigned char **)(a1 + 40))
  }
    return 0;
  uint64_t v7 = *(unsigned __int8 ***)(a1 + 48);
  int v8 = operator new(0x38uLL);
  long long v9 = v8;
  unsigned __int16 v10 = (uint64_t (**)(void *, unsigned int *))&unk_1F2607620;
  *int v8 = &unk_1F2607620;
  v8[1] = v4;
  *((_OWORD *)v8 + 1) = *(_OWORD *)(a1 + 24);
  v8[4] = &v17;
  v8[5] = &v16;
  v8[6] = &v15;
  if (**v7)
  {
    int v11 = 1;
  }
  else
  {
    unsigned int v18 = *(_DWORD *)v7[1];
    int v11 = sub_1CC138BE0((uint64_t)v8, &v18);
    **uint64_t v7 = v11;
    unsigned __int16 v10 = (uint64_t (**)(void *, unsigned int *))*v9;
  }
  if (*v7[2])
  {
    int v12 = 0;
  }
  else
  {
    unsigned int v18 = 33;
    int v13 = v10[6](v9, &v18);
    void *v7[2] = v13;
    int v11 = **v7;
    int v12 = v13 ^ 1;
    unsigned __int16 v10 = (uint64_t (**)(void *, unsigned int *))*v9;
  }
  ((void (*)(void *))v10[5])(v9);
  return v11 && !v12;
}

uint64_t llvm::ScalarEvolution::isImpliedCondBalancedTypes(llvm::ScalarEvolution *a1, unsigned int a2, const llvm::SCEV *a3, const llvm::SCEV *a4, unsigned int a5, const llvm::SCEV *a6, const llvm::SCEV *a7, uint64_t a8)
{
  unsigned int v120 = a2;
  unsigned int v118 = a4;
  unint64_t v119 = a3;
  unsigned int v117 = a5;
  unsigned int v115 = a7;
  uint64_t v116 = a6;
  if (llvm::ScalarEvolution::SimplifyICmpOperands(a1, &v120, &v119, (uint64_t *)&v118, 0, 0)
    && v119 == v118)
  {
    char v88 = v120;
    BOOL v89 = v120 >= 0x2A;
    unint64_t v90 = 0x2A90000AA00;
    goto LABEL_105;
  }
  int v10 = llvm::ScalarEvolution::SimplifyICmpOperands(a1, &v117, &v116, (uint64_t *)&v115, 0, 0);
  int v13 = v115;
  int v12 = v116;
  if (!v10 || v116 != v115)
  {
    uint64_t v15 = (unsigned __int16 *)v118;
    uint64_t v14 = v119;
    if (v119 == v115 || v118 == v116)
    {
      if (!*((_WORD *)v118 + 12))
      {
        unsigned int v115 = v116;
        uint64_t v116 = v13;
        uint64_t v17 = dword_1CFAC4570[v117];
        unsigned int v117 = dword_1CFAC4570[v117];
        unsigned int v18 = v13;
        int v13 = v12;
LABEL_8:
        uint64_t v19 = v120;
        if (v17 == v120)
        {
          int v23 = a1;
          uint64_t v24 = v17;
          uint64_t v25 = v14;
          unsigned int v26 = (const llvm::SCEV *)v15;
        }
        else
        {
          if (dword_1CFAC4570[(int)v17] != v120)
          {
            if ((v17 - 32) >= 0xA)
            {
              if (v17 <= 0xE && ((1 << v17) & 0x4242) != 0) {
                goto LABEL_14;
              }
            }
            else if ((v17 & 0xFFFFFFFE) == 0x20)
            {
              goto LABEL_13;
            }
            if (llvm::CmpInst::getFlippedSignednessPredicate(v17) != v19)
            {
LABEL_13:
              if (v17 != 33)
              {
LABEL_14:
                uint64_t v20 = v117;
                unsigned int v21 = v120;
                if (v117 == 32)
                {
                  if (v120 > 0x29 || ((1 << v120) & 0x2A90000AA00) == 0) {
                    return 0;
                  }
                  if (llvm::ScalarEvolution::isImpliedCondOperands(a1, v120, v119, v118, v116, v115, a8)) {
                    return 1;
                  }
                }
                if (v21 != 33
                  || (v20 - 9) < 0x21 && ((0x154800055uLL >> (v20 - 9)) & 1) != 0)
                {
                  return 0;
                }
                int v31 = v118;
                uint64_t v30 = v119;
                unsigned int v33 = v115;
                uint64_t v32 = v116;
                uint64_t v34 = a1;
                uint64_t v35 = v20;
                return (llvm::ScalarEvolution::isImpliedCondOperands(v34, v35, v30, v31, v32, v33, a8) & 1) != 0;
              }
              unint64_t v36 = v115;
              if (*((_WORD *)v116 + 12))
              {
                unsigned int v37 = v116;
                if (*((_WORD *)v115 + 12)) {
                  goto LABEL_14;
                }
              }
              else
              {
                unsigned int v37 = v115;
                unint64_t v36 = v116;
              }
              if ((v19 - 38) > 3)
              {
                uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(a1, v37, 0, 0);
                llvm::ConstantRange::getUnsignedMin(RangeRef, (uint64_t)&__s1);
              }
              else
              {
                uint64_t v38 = llvm::ScalarEvolution::getRangeRef(a1, v37, 1, 0);
                llvm::ConstantRange::getSignedMin(v38, (uint64_t)&__s1);
              }
              uint64_t v39 = *((void *)v36 + 4);
              unsigned int v40 = v122;
              if (v122 > 0x40)
              {
                if (!memcmp(__s1, *(const void **)(v39 + 24), (((unint64_t)v122 + 63) >> 3) & 0x3FFFFFF8))
                {
                  unsigned int v112 = v40;
                  operator new[]();
                }
              }
              else if (__s1 == *(void **)(v39 + 24))
              {
                unsigned int v112 = v122;
                uint64_t v111 = __s1;
                llvm::APInt::operator+=((uint64_t)&v111, 1uLL);
                unsigned int v114 = v112;
                unint64_t v113 = v111;
                unsigned int v112 = 0;
                uint64_t v66 = 34;
                uint64_t v67 = 39;
                switch((int)v19)
                {
                  case '""':
                  case '&':
                    goto LABEL_82;
                  case '#':
                  case '\'':
                    unsigned int v97 = v118;
                    uint64_t v96 = v119;
                    uint64_t v98 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)a1, (llvm::LLVMContext *)&v113, v65);
                    unint64_t Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(a1, v98);
                    if (llvm::ScalarEvolution::isImpliedCondOperands(a1, v19, v96, v97, v37, Constant, a8)) {
                      goto LABEL_168;
                    }
LABEL_82:
                    unsigned int v69 = v118;
                    uint64_t v68 = v119;
                    unsigned int v70 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)a1, (llvm::LLVMContext *)&__s1, v65);
                    unint64_t v71 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(a1, v70);
                    int v72 = a1;
                    uint64_t v73 = v19;
                    uint64_t v74 = v68;
                    goto LABEL_133;
                  case '$':
                    goto LABEL_132;
                  case '%':
                    uint64_t v67 = 35;
                    goto LABEL_130;
                  case '(':
                    uint64_t v66 = 38;
                    goto LABEL_132;
                  case ')':
LABEL_130:
                    unsigned int v100 = v118;
                    unint64_t v101 = v119;
                    uint64_t v102 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)a1, (llvm::LLVMContext *)&v113, v65);
                    unint64_t v103 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(a1, v102);
                    if (llvm::ScalarEvolution::isImpliedCondOperands(a1, v67, v100, v101, v37, v103, a8)) {
                      goto LABEL_168;
                    }
                    uint64_t v66 = dword_1CFAC449C[(int)v19 - 37];
LABEL_132:
                    unint64_t v104 = v118;
                    unsigned int v69 = v119;
                    uint64_t v105 = (llvm::ConstantInt *)llvm::ConstantInt::get(***(llvm::ConstantInt ****)a1, (llvm::LLVMContext *)&__s1, v65);
                    unint64_t v71 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(a1, v105);
                    int v72 = a1;
                    uint64_t v73 = v66;
                    uint64_t v74 = v104;
LABEL_133:
                    if (llvm::ScalarEvolution::isImpliedCondOperands(v72, v73, v74, v69, v37, v71, a8)) {
LABEL_168:
                    }
                      int v41 = 0;
                    else {
LABEL_134:
                    }
                      int v41 = 1;
                    if (v114 >= 0x41 && v113) {
                      MEMORY[0x1D25D9CB0](v113, 0x1000C8000313F17);
                    }
                    if (!v41) {
                      goto LABEL_34;
                    }
                    break;
                  default:
                    goto LABEL_134;
                }
              }
              int v41 = 1;
LABEL_34:
              if (v122 >= 0x41 && __s1) {
                MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
              }
              if (!v41) {
                return 1;
              }
              goto LABEL_14;
            }
            uint64_t v43 = llvm::ScalarEvolution::getRangeRef(a1, v18, 1, 0);
            llvm::ConstantRange::getSignedMin(v43, (uint64_t)&__s1);
            unsigned int v44 = v122 - 1;
            if (v122 >= 0x41) {
              p_s1 = (void **)((char *)__s1 + 8 * (v44 >> 6));
            }
            else {
              p_s1 = &__s1;
            }
            uint64_t v46 = (1 << v44) & (unint64_t)*p_s1;
            if (v122 >= 0x41 && __s1) {
              MEMORY[0x1D25D9CB0]();
            }
            if (!v46)
            {
              uint64_t v47 = llvm::ScalarEvolution::getRangeRef(a1, v13, 1, 0);
              llvm::ConstantRange::getSignedMin(v47, (uint64_t)&__s1);
              unsigned int v48 = v122 - 1;
              if (v122 >= 0x41) {
                int v49 = (void **)((char *)__s1 + 8 * (v48 >> 6));
              }
              else {
                int v49 = &__s1;
              }
              uint64_t v50 = (1 << v48) & (unint64_t)*v49;
              if (v122 >= 0x41 && __s1) {
                MEMORY[0x1D25D9CB0]();
              }
              if (!v50) {
                goto LABEL_59;
              }
            }
            uint64_t v75 = (_DWORD *)llvm::ScalarEvolution::getRangeRef(a1, v18, 1, 0);
            llvm::ConstantRange::getSignedMax(v75, (uint64_t)&__s1);
            unsigned int v76 = v122 - 1;
            if (v122 >= 0x41) {
              uint64_t v77 = (void **)((char *)__s1 + 8 * (v76 >> 6));
            }
            else {
              uint64_t v77 = &__s1;
            }
            uint64_t v78 = (1 << v76) & (unint64_t)*v77;
            if (v122 >= 0x41 && __s1) {
              MEMORY[0x1D25D9CB0]();
            }
            if (!v78) {
              goto LABEL_90;
            }
            unsigned int v106 = (_DWORD *)llvm::ScalarEvolution::getRangeRef(a1, v13, 1, 0);
            llvm::ConstantRange::getSignedMax(v106, (uint64_t)&__s1);
            unsigned int v107 = v122 - 1;
            if (v122 >= 0x41) {
              uint64_t v108 = (void **)((char *)__s1 + 8 * (v107 >> 6));
            }
            else {
              uint64_t v108 = &__s1;
            }
            uint64_t v109 = (1 << v107) & (unint64_t)*v108;
            if (v122 >= 0x41 && __s1) {
              MEMORY[0x1D25D9CB0]();
            }
            if (v109)
            {
LABEL_59:
              int v23 = a1;
              uint64_t v24 = v19;
              uint64_t v25 = v14;
              unsigned int v26 = (const llvm::SCEV *)v15;
              uint64_t v27 = v18;
              uint64_t v28 = v13;
              uint64_t v29 = a8;
            }
            else
            {
LABEL_90:
              if ((v19 & 0xFFFFFFFA) == 0x22)
              {
                int v81 = dword_1CFAC4484[(int)v19 - 34];
                unsigned int v79 = (llvm::SCEV *)v15;
                uint64_t v80 = v13;
                uint64_t v82 = v17;
                switch((int)v17)
                {
                  case 2:
                    uint64_t v82 = 4;
                    goto LABEL_148;
                  case 3:
                    uint64_t v82 = 5;
                    goto LABEL_148;
                  case 4:
                    uint64_t v82 = 2;
                    goto LABEL_148;
                  case 5:
                    uint64_t v82 = 3;
                    goto LABEL_148;
                  case 10:
                    uint64_t v82 = 12;
                    goto LABEL_148;
                  case 11:
                    uint64_t v82 = 13;
                    goto LABEL_148;
                  case 12:
                    uint64_t v82 = 10;
                    goto LABEL_148;
                  case 13:
                    uint64_t v82 = 11;
                    goto LABEL_148;
                  case 16:
                  case 17:
                  case 18:
                  case 19:
                  case 20:
                  case 21:
                  case 22:
                  case 23:
                  case 24:
                  case 25:
                  case 26:
                  case 27:
                  case 28:
                  case 29:
                  case 30:
                  case 31:
                    __break(1u);
                    JUMPOUT(0x1CC1225C8);
                  case 34:
                    uint64_t v82 = 36;
                    goto LABEL_148;
                  case 35:
                    uint64_t v82 = 37;
                    goto LABEL_148;
                  case 36:
                    uint64_t v82 = 34;
                    goto LABEL_148;
                  case 37:
                    uint64_t v82 = 35;
                    goto LABEL_148;
                  case 38:
                    uint64_t v82 = 40;
                    goto LABEL_148;
                  case 39:
                    uint64_t v82 = 41;
                    goto LABEL_148;
                  case 40:
                    uint64_t v82 = 38;
                    goto LABEL_148;
                  case 41:
                    uint64_t v82 = 39;
LABEL_148:
                    unsigned int v79 = (llvm::SCEV *)v15;
                    uint64_t v80 = v13;
                    break;
                  default:
                    break;
                }
              }
              else
              {
                unsigned int v79 = v14;
                uint64_t v14 = (const llvm::SCEV *)v15;
                uint64_t v80 = v18;
                unsigned int v18 = v13;
                int v81 = v19;
                uint64_t v82 = v17;
              }
              unint64_t v110 = v80;
              if ((v81 - 38) > 3)
              {
                if ((v81 - 34) > 3 || !llvm::ScalarEvolution::isKnownNegative(a1, v14)) {
                  goto LABEL_13;
                }
              }
              else
              {
                uint64_t v83 = llvm::ScalarEvolution::getRangeRef(a1, v14, 1, 0);
                llvm::ConstantRange::getSignedMin(v83, (uint64_t)&__s1);
                unsigned int v84 = v122 - 1;
                if (v122 >= 0x41) {
                  unint64_t v85 = (void **)((char *)__s1 + 8 * (v84 >> 6));
                }
                else {
                  unint64_t v85 = &__s1;
                }
                uint64_t v86 = (1 << v84) & (unint64_t)*v85;
                if (v122 >= 0x41 && __s1) {
                  MEMORY[0x1D25D9CB0]();
                }
                if (v86) {
                  goto LABEL_13;
                }
              }
              int v23 = a1;
              uint64_t v24 = v82;
              uint64_t v25 = v79;
              unsigned int v26 = v14;
              uint64_t v27 = v110;
              uint64_t v28 = v18;
              uint64_t v29 = 0;
            }
            return llvm::ScalarEvolution::isImpliedCondOperands(v23, v24, v25, v26, v27, v28, v29);
          }
          int v51 = v15[12];
          if (!v15[12] || *((_WORD *)v14 + 12) == 7)
          {
            uint64_t v52 = v14;
            if (!*((_WORD *)v13 + 12) || (uint64_t v52 = v14, *((_WORD *)v18 + 12) == 7))
            {
              while (2)
              {
                switch(*((_WORD *)v52 + 12))
                {
                  case 1:
                  case 2:
                  case 3:
                  case 0xD:
                    unint64_t v53 = (char *)v52 + 40;
                    goto LABEL_66;
                  case 4:
                    unint64_t v53 = (char *)v52 + 48;
                    goto LABEL_66;
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                  case 0xA:
                  case 0xB:
                  case 0xC:
                    unint64_t v92 = (const llvm::SCEV **)*((void *)v52 + 4);
                    goto LABEL_119;
                  case 6:
                    unint64_t v92 = (const llvm::SCEV **)((char *)v52 + 40);
LABEL_119:
                    uint64_t v52 = *v92;
                    continue;
                  case 0xE:
                    unint64_t v53 = (char *)*((void *)v52 - 1);
                    goto LABEL_66;
                  default:
                    unint64_t v53 = (char *)*((void *)v52 + 4);
LABEL_66:
                    if (*(unsigned char *)(*(void *)v53 + 8) != 15)
                    {
                      uint64_t v54 = v15;
                      while (2)
                      {
                        switch(v51)
                        {
                          case 1:
                          case 2:
                          case 3:
                          case 13:
                            int v55 = v54 + 20;
                            goto LABEL_70;
                          case 4:
                            int v55 = v54 + 24;
                            goto LABEL_70;
                          case 5:
                          case 7:
                          case 8:
                          case 9:
                          case 10:
                          case 11:
                          case 12:
                            uint64_t v93 = (unsigned __int16 **)*((void *)v54 + 4);
                            goto LABEL_121;
                          case 6:
                            uint64_t v93 = (unsigned __int16 **)(v54 + 20);
LABEL_121:
                            uint64_t v54 = *v93;
                            int v51 = (*v93)[12];
                            continue;
                          case 14:
                            int v55 = (unsigned __int16 *)*((void *)v54 - 1);
                            goto LABEL_70;
                          default:
                            int v55 = (unsigned __int16 *)*((void *)v54 + 4);
LABEL_70:
                            if (*(unsigned char *)(*(void *)v55 + 8) == 15) {
                              goto LABEL_72;
                            }
                            NotSCEV = (llvm::SCEV *)llvm::ScalarEvolution::getNotSCEV(a1, v14, v11);
                            unsigned int v58 = (const llvm::SCEV *)llvm::ScalarEvolution::getNotSCEV(a1, (const llvm::SCEV *)v15, v57);
                            if ((llvm::ScalarEvolution::isImpliedCondOperands(a1, v17, NotSCEV, v58, v18, v13, a8) & 1) == 0) {
                              goto LABEL_72;
                            }
                            return 1;
                        }
                      }
                    }
LABEL_72:
                    unsigned int v59 = v18;
                    while (2)
                    {
                      switch(*((_WORD *)v59 + 12))
                      {
                        case 1:
                        case 2:
                        case 3:
                        case 0xD:
                          uint64_t v60 = (char *)v59 + 40;
                          goto LABEL_75;
                        case 4:
                          uint64_t v60 = (char *)v59 + 48;
                          goto LABEL_75;
                        case 5:
                        case 7:
                        case 8:
                        case 9:
                        case 0xA:
                        case 0xB:
                        case 0xC:
                          unint64_t v94 = (const llvm::SCEV **)*((void *)v59 + 4);
                          goto LABEL_123;
                        case 6:
                          unint64_t v94 = (const llvm::SCEV **)((char *)v59 + 40);
LABEL_123:
                          unsigned int v59 = *v94;
                          continue;
                        case 0xE:
                          uint64_t v60 = (char *)*((void *)v59 - 1);
                          goto LABEL_75;
                        default:
                          uint64_t v60 = (char *)*((void *)v59 + 4);
LABEL_75:
                          if (*(unsigned char *)(*(void *)v60 + 8) == 15) {
                            return 0;
                          }
                          unsigned int v61 = v13;
                          while (2)
                          {
                            switch(*((_WORD *)v61 + 12))
                            {
                              case 1:
                              case 2:
                              case 3:
                              case 0xD:
                                unsigned int v62 = (char *)v61 + 40;
                                goto LABEL_79;
                              case 4:
                                unsigned int v62 = (char *)v61 + 48;
                                goto LABEL_79;
                              case 5:
                              case 7:
                              case 8:
                              case 9:
                              case 0xA:
                              case 0xB:
                              case 0xC:
                                unint64_t v95 = (const llvm::SCEV **)*((void *)v61 + 4);
                                goto LABEL_125;
                              case 6:
                                unint64_t v95 = (const llvm::SCEV **)((char *)v61 + 40);
LABEL_125:
                                unsigned int v61 = *v95;
                                continue;
                              case 0xE:
                                unsigned int v62 = (char *)*((void *)v61 - 1);
                                goto LABEL_79;
                              default:
                                unsigned int v62 = (char *)*((void *)v61 + 4);
LABEL_79:
                                if (*(unsigned char *)(*(void *)v62 + 8) == 15) {
                                  return 0;
                                }
                                unint64_t v63 = llvm::ScalarEvolution::getNotSCEV(a1, v18, v11);
                                unsigned int v33 = (const llvm::SCEV *)llvm::ScalarEvolution::getNotSCEV(a1, v13, v64);
                                uint64_t v34 = a1;
                                uint64_t v35 = v19;
                                uint64_t v30 = v14;
                                int v31 = (const llvm::SCEV *)v15;
                                uint64_t v32 = (llvm::SCEV *)v63;
                                break;
                            }
                            break;
                          }
                          break;
                      }
                      break;
                    }
                    break;
                }
                return (llvm::ScalarEvolution::isImpliedCondOperands(v34, v35, v30, v31, v32, v33, a8) & 1) != 0;
              }
            }
            int v23 = a1;
            uint64_t v24 = v120;
            uint64_t v25 = v14;
            unsigned int v26 = (const llvm::SCEV *)v15;
            uint64_t v27 = v13;
            uint64_t v28 = v18;
            goto LABEL_19;
          }
          int v23 = a1;
          uint64_t v24 = v17;
          uint64_t v25 = (llvm::SCEV *)v15;
          unsigned int v26 = v14;
        }
        uint64_t v27 = v18;
        uint64_t v28 = v13;
LABEL_19:
        uint64_t v29 = a8;
        return llvm::ScalarEvolution::isImpliedCondOperands(v23, v24, v25, v26, v27, v28, v29);
      }
      unsigned int v118 = v119;
      unint64_t v119 = (const llvm::SCEV *)v15;
      unsigned int v120 = dword_1CFAC4570[v120];
      BOOL v87 = (unsigned __int16 *)v14;
      uint64_t v14 = (const llvm::SCEV *)v15;
      uint64_t v15 = v87;
    }
    uint64_t v17 = v117;
    unsigned int v18 = v116;
    goto LABEL_8;
  }
  char v88 = v117;
  BOOL v89 = v117 >= 0x29;
  unint64_t v90 = 0x15600000055;
LABEL_105:
  uint64_t v91 = (v90 >> v88) & 1;
  if (v89) {
    return 0;
  }
  else {
    return v91;
  }
}

uint64_t llvm::ScalarEvolution::isImpliedCondOperands(llvm::ScalarEvolution *a1, uint64_t a2, llvm::SCEV *a3, const llvm::SCEV *a4, llvm::SCEV *a5, const llvm::SCEV *a6, uint64_t a7)
{
  if (llvm::ScalarEvolution::isImpliedCondOperandsViaRanges((uint64_t)a1, a2, a3, (uint64_t)a4, a5, (uint64_t)a6)
    || (llvm::ScalarEvolution::isImpliedCondOperandsViaNoOverflow(a1, a2, (const llvm::BasicBlock ****)a3, a4, a5, a6) & 1) != 0
    || (llvm::ScalarEvolution::isImpliedCondOperandsViaShift(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6) & 1) != 0
    || (llvm::ScalarEvolution::isImpliedCondOperandsViaAddRecStart((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7) & 1) != 0)
  {
    return 1;
  }

  return llvm::ScalarEvolution::isImpliedCondOperandsHelper((uint64_t)a1, a2, a3, a4, (llvm::detail::IEEEFloat **)a5, (llvm::detail::IEEEFloat **)a6);
}

uint64_t llvm::ScalarEvolution::splitBinaryAdd(uint64_t a1, uint64_t a2, void *a3, void *a4, int *a5)
{
  uint64_t result = 0;
  if (a2 && *(_WORD *)(a2 + 24) == 4)
  {
    if (*(void *)(a2 + 40) == 2)
    {
      *a3 = **(void **)(a2 + 32);
      *a4 = *(void *)(*(void *)(a2 + 32) + 8);
      *a5 = *(_WORD *)(a2 + 28) & 7;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::ScalarEvolution::computeConstantDifference@<X0>(uint64_t this@<X0>, const llvm::SCEV *a2@<X1>, const llvm::SCEV *a3@<X2>, uint64_t a4@<X8>)
{
  if (a2 == a3)
  {
    while (2)
    {
      switch(*((_WORD *)a2 + 12))
      {
        case 1:
        case 2:
        case 3:
        case 0xD:
          uint64_t v24 = (char *)a2 + 40;
          goto LABEL_43;
        case 4:
          uint64_t v24 = (char *)a2 + 48;
          goto LABEL_43;
        case 5:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          int v23 = (const llvm::SCEV **)*((void *)a2 + 4);
          goto LABEL_37;
        case 6:
          int v23 = (const llvm::SCEV **)((char *)a2 + 40);
LABEL_37:
          a2 = *v23;
          continue;
        case 0xE:
          uint64_t v24 = (char *)*((void *)a2 - 1);
          goto LABEL_43;
        default:
          uint64_t v24 = (char *)*((void *)a2 + 4);
LABEL_43:
          uint64_t v25 = *(void *)v24;
          unsigned int v26 = *(_DWORD *)(*(void *)v24 + 8);
          uint64_t v27 = *(void *)(*(void *)this + 40);
          if (v26 == 15)
          {
            if ((v26 & 0xFE) == 0x12) {
              unsigned int v26 = *(_DWORD *)(**(void **)(v25 + 16) + 8);
            }
            uint64_t v37 = *(void *)(v27 + 504);
            if (v26 < 0x100) {
              goto LABEL_76;
            }
            unsigned int v38 = v26 >> 8;
            unint64_t v39 = *(unsigned int *)(v27 + 512);
            uint64_t v40 = *(void *)(v27 + 504);
            if (v39)
            {
              uint64_t v40 = v37;
              unint64_t v41 = v39;
              do
              {
                unint64_t v42 = v41 >> 1;
                uint64_t v43 = v40 + 16 * (v41 >> 1);
                unsigned int v44 = *(_DWORD *)(v43 + 8);
                uint64_t v45 = v43 + 16;
                v41 += ~(v41 >> 1);
                if (v44 < v38) {
                  uint64_t v40 = v45;
                }
                else {
                  unint64_t v41 = v42;
                }
              }
              while (v41);
            }
            if (v40 == v37 + 16 * v39 || *(_DWORD *)(v40 + 8) != v38) {
LABEL_76:
            }
              uint64_t v40 = v37;
            unsigned int v29 = *(_DWORD *)(v40 + 12);
          }
          else
          {
            this = sub_1CB83544C(v27 + 272, v25);
            unsigned int v29 = this;
            if (v28 == 1) {
          }
            }
          if (v29 >= 0x41) {
            operator new[]();
          }
          *(_DWORD *)(a4 + 8) = v29;
          *(void *)a4 = 0;
          break;
      }
      goto LABEL_48;
    }
  }
  int v5 = *((unsigned __int16 *)a3 + 12);
  if (v5 == 7)
  {
    if (*((_WORD *)a2 + 12) != 7) {
      goto LABEL_26;
    }
    if (*((void *)a3 + 6) != *((void *)a2 + 6)) {
      goto LABEL_35;
    }
    if (*((void *)a3 + 5) != 2) {
      goto LABEL_35;
    }
    if (*((void *)a2 + 5) != 2) {
      goto LABEL_35;
    }
    uint64_t v6 = (void *)*((void *)a3 + 4);
    uint64_t v7 = *((void *)a2 + 4);
    if (v6[1] != *(void *)(v7 + 8)) {
      goto LABEL_35;
    }
    a3 = (const llvm::SCEV *)*v6;
    a2 = *(const llvm::SCEV **)v7;
    int v5 = *(unsigned __int16 *)(*v6 + 24);
  }
  if (v5 != 4)
  {
    if (!v5 && !*((_WORD *)a2 + 12))
    {
      uint64_t v8 = *((void *)a2 + 4);
      unsigned int v9 = *(_DWORD *)(v8 + 32);
      if (v9 >= 0x41) {
        operator new[]();
      }
      uint64_t v10 = *(void *)(v8 + 24);
      uint64_t v11 = *(void *)(*((void *)a3 + 4) + 24);
LABEL_55:
      uint64_t v32 = v10 - v11;
      unint64_t v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
      if (!v9) {
        unint64_t v33 = 0;
      }
      unint64_t v34 = v33 & v32;
      *(_DWORD *)(a4 + 8) = v9;
LABEL_64:
      *(void *)a4 = v34;
LABEL_48:
      char v22 = 1;
      goto LABEL_49;
    }
    goto LABEL_26;
  }
  if (*((void *)a3 + 5) != 2)
  {
LABEL_26:
    int v13 = 0;
    goto LABEL_27;
  }
  int v12 = (uint64_t *)*((void *)a3 + 4);
  uint64_t v14 = *v12;
  int v13 = (const llvm::SCEV *)v12[1];
  if (v14) {
    BOOL v15 = *(unsigned __int16 *)(v14 + 24) == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    if (v13 == a2)
    {
      uint64_t v16 = *(void *)(v14 + 32);
      unsigned int v17 = *(_DWORD *)(v16 + 32);
      unsigned int v48 = v17;
      if (v17 > 0x40) {
        operator new[]();
      }
      if (v17) {
        unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
      }
      else {
        unint64_t v18 = 0;
      }
      unint64_t v47 = v18 & ~*(void *)(v16 + 24);
      this = llvm::APInt::operator++((uint64_t)&v47);
      unint64_t v46 = v47;
      *(_DWORD *)(a4 + 8) = v48;
      *(void *)a4 = v46;
      goto LABEL_48;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v14 = 0;
LABEL_28:
  if (a2 && *((_WORD *)a2 + 12) == 4 && *((void *)a2 + 5) == 2)
  {
    uint64_t v19 = (void *)*((void *)a2 + 4);
    uint64_t v20 = *v19;
    if (*v19 && *(_WORD *)(*v19 + 24) == 0)
    {
      uint64_t v30 = (const llvm::SCEV *)v19[1];
      if (v30 == a3)
      {
        uint64_t v35 = *(void *)(v20 + 32);
        unsigned int v36 = *(_DWORD *)(v35 + 32);
        *(_DWORD *)(a4 + 8) = v36;
        if (v36 > 0x40) {
          operator new[]();
        }
        unint64_t v34 = *(void *)(v35 + 24);
        goto LABEL_64;
      }
      if (v14 && v13 == v30)
      {
        uint64_t v31 = *(void *)(v20 + 32);
        unsigned int v9 = *(_DWORD *)(v31 + 32);
        if (v9 >= 0x41) {
          operator new[]();
        }
        uint64_t v10 = *(void *)(v31 + 24);
        uint64_t v11 = *(void *)(*(void *)(v14 + 32) + 24);
        goto LABEL_55;
      }
    }
  }
LABEL_35:
  char v22 = 0;
  *(unsigned char *)a4 = 0;
LABEL_49:
  *(unsigned char *)(a4 + 16) = v22;
  return this;
}

uint64_t llvm::ScalarEvolution::isImpliedCondOperandsViaAddRecStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7)
  {
    uint64_t v7 = *(void *)(a7 + 40);
    if (a5 && *(_WORD *)(a5 + 24) == 7)
    {
      uint64_t v8 = *(void *)(a5 + 48);
      uint64_t v10 = *(void *)(v8 + 56);
      uint64_t v9 = *(void *)(v8 + 64);
      if (v9 == v10)
      {
        uint64_t v11 = *(unsigned int *)(v8 + 76);
        int v12 = (void *)(v9 + 8 * v11);
        if (v11)
        {
          uint64_t v13 = 0;
          uint64_t v14 = 8 * v11;
          while (*(void *)(v9 + v13) != v7)
          {
            v13 += 8;
            if (v14 == v13) {
              goto LABEL_30;
            }
          }
          int v12 = (void *)(v9 + v13);
        }
LABEL_30:
        uint64_t v10 = *(void *)(v8 + 64);
      }
      else
      {
        uint64_t v22 = *(unsigned int *)(v8 + 72);
        int v23 = v22 - 1;
        unsigned int v24 = (v22 - 1) & ((v7 >> 4) ^ (v7 >> 9));
        int v12 = (void *)(v9 + 8 * v24);
        uint64_t v25 = *v12;
        if (*v12 == -1)
        {
          unsigned int v26 = 0;
LABEL_54:
          if (v26) {
            int v12 = v26;
          }
          if (*v12 != v7) {
            int v12 = (void *)(v9 + 8 * v22);
          }
        }
        else
        {
          unsigned int v26 = 0;
          int v27 = 1;
          while (v25 != v7)
          {
            if (v26) {
              BOOL v28 = 0;
            }
            else {
              BOOL v28 = v25 == -2;
            }
            if (v28) {
              unsigned int v26 = v12;
            }
            unsigned int v29 = v24 + v27++;
            unsigned int v24 = v29 & v23;
            int v12 = (void *)(v9 + 8 * (v29 & v23));
            uint64_t v25 = *v12;
            if (*v12 == -1) {
              goto LABEL_54;
            }
          }
        }
      }
      BOOL v28 = v9 == v10;
      uint64_t v30 = 72;
      if (v28) {
        uint64_t v30 = 76;
      }
      if (v12 != (void *)(v9 + 8 * *(unsigned int *)(v8 + v30))) {
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
      }
    }
    else if (a6 && *(_WORD *)(a6 + 24) == 7)
    {
      uint64_t v15 = *(void *)(a6 + 48);
      uint64_t v17 = *(void *)(v15 + 56);
      uint64_t v16 = *(void *)(v15 + 64);
      if (v16 == v17)
      {
        uint64_t v18 = *(unsigned int *)(v15 + 76);
        uint64_t v19 = (void *)(v16 + 8 * v18);
        if (v18)
        {
          uint64_t v20 = 0;
          uint64_t v21 = 8 * v18;
          while (*(void *)(v16 + v20) != v7)
          {
            v20 += 8;
            if (v21 == v20) {
              goto LABEL_47;
            }
          }
          uint64_t v19 = (void *)(v16 + v20);
        }
LABEL_47:
        uint64_t v17 = *(void *)(v15 + 64);
      }
      else
      {
        uint64_t v31 = *(unsigned int *)(v15 + 72);
        int v32 = v31 - 1;
        unsigned int v33 = (v31 - 1) & ((v7 >> 4) ^ (v7 >> 9));
        uint64_t v19 = (void *)(v16 + 8 * v33);
        uint64_t v34 = *v19;
        if (*v19 == -1)
        {
          uint64_t v35 = 0;
LABEL_59:
          if (v35) {
            uint64_t v19 = v35;
          }
          if (*v19 != v7) {
            uint64_t v19 = (void *)(v16 + 8 * v31);
          }
        }
        else
        {
          uint64_t v35 = 0;
          int v36 = 1;
          while (v34 != v7)
          {
            if (v35) {
              BOOL v37 = 0;
            }
            else {
              BOOL v37 = v34 == -2;
            }
            if (v37) {
              uint64_t v35 = v19;
            }
            unsigned int v38 = v33 + v36++;
            unsigned int v33 = v38 & v32;
            uint64_t v19 = (void *)(v16 + 8 * (v38 & v32));
            uint64_t v34 = *v19;
            if (*v19 == -1) {
              goto LABEL_59;
            }
          }
        }
      }
      BOOL v28 = v16 == v17;
      uint64_t v39 = 72;
      if (v28) {
        uint64_t v39 = 76;
      }
      if (v19 != (void *)(v16 + 8 * *(unsigned int *)(v15 + v39))) {
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
      }
    }
  }
  return 0;
}

uint64_t llvm::ScalarEvolution::isImpliedCondOperandsViaNoOverflow(llvm::ScalarEvolution *this, uint64_t a2, const llvm::BasicBlock ****a3, const llvm::SCEV *a4, llvm::SCEV *a5, const llvm::SCEV *a6)
{
  if (a2 != 36 && a2 != 40) {
    return 0;
  }
  uint64_t v10 = 0;
  if (a3)
  {
    if (*((_WORD *)a3 + 12) == 7)
    {
      uint64_t v10 = 0;
      if (a5)
      {
        if (*((_WORD *)a5 + 12) == 7)
        {
          int v12 = (const llvm::BasicBlock ***)*((void *)a5 + 6);
          if (v12 != a3[6]) {
            return 0;
          }
          llvm::ScalarEvolution::computeConstantDifference((uint64_t)this, (const llvm::SCEV *)a3, a5, (uint64_t)&v34);
          llvm::ScalarEvolution::computeConstantDifference((uint64_t)this, a4, a6, (uint64_t)&__s2);
          int v13 = v36;
          if (!v36 || !v33)
          {
            uint64_t v10 = 0;
            if (!v33)
            {
LABEL_13:
              if (v13 && v35 >= 0x41 && v34) {
                MEMORY[0x1D25D9CB0](v34, 0x1000C8000313F17);
              }
              return v10;
            }
LABEL_20:
            if (v32 >= 0x41)
            {
              int v15 = v13;
              if (__s2) {
                MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
              }
              int v13 = v15;
            }
            goto LABEL_13;
          }
          unsigned int v14 = v35;
          if (v35 <= 0x40)
          {
            if (v34 != __s2)
            {
              uint64_t v10 = 0;
              goto LABEL_20;
            }
            if (!v34)
            {
              uint64_t v10 = 1;
              goto LABEL_20;
            }
            int v25 = v36;
            unsigned int v24 = v34;
            goto LABEL_27;
          }
          int v25 = v36;
          unsigned int v24 = __s2;
          if (!memcmp(v34, __s2, (((unint64_t)v35 + 63) >> 3) & 0x3FFFFFF8))
          {
            if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v34) != v14)
            {
LABEL_27:
              if (a2 == 36)
              {
                unsigned int v28 = v32;
                if (v32 > 0x40) {
                  operator new[]();
                }
                int v27 = v24;
                uint64_t v18 = &v27;
                sub_1CBA14940((uint64_t)&v27);
                llvm::APInt::operator++((uint64_t)&v27);
              }
              else
              {
                Type = (llvm::Type *)llvm::SCEV::getType(a4);
                uint64_t TypeSizeInBits = llvm::ScalarEvolution::getTypeSizeInBits(this, Type);
                uint64_t v18 = (void **)v26;
                sub_1CBA62420(TypeSizeInBits, (llvm::APInt *)v26);
                llvm::APInt::operator-=((uint64_t)v26, (unint64_t **)&__s2);
              }
              unsigned int v19 = *((_DWORD *)v18 + 2);
              uint64_t v20 = *v18;
              *((_DWORD *)v18 + 2) = 0;
              unsigned int v29 = v20;
              unsigned int v30 = v19;
              if (llvm::ScalarEvolution::getLoopDisposition(this, a6, (const llvm::Loop *)v12) == 1
                && llvm::ScalarEvolution::getBlockDisposition(this, a6, *v12[4]) == 2)
              {
                unint64_t Constant = llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)this, (const llvm::APInt *)&v29, v22);
                uint64_t isLoopEntryGuardedByCond = llvm::ScalarEvolution::isLoopEntryGuardedByCond((uint64_t)this, (uint64_t)v12, a2, (uint64_t)a6, Constant);
                unsigned int v19 = v30;
              }
              else
              {
                uint64_t isLoopEntryGuardedByCond = 0;
              }
              if (v19 >= 0x41 && v29) {
                MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
              }
              uint64_t v10 = isLoopEntryGuardedByCond;
              goto LABEL_33;
            }
            uint64_t v10 = 1;
          }
          else
          {
            uint64_t v10 = 0;
          }
LABEL_33:
          int v13 = v25;
          goto LABEL_20;
        }
      }
    }
  }
  return v10;
}

uint64_t llvm::ScalarEvolution::isImpliedViaMerge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::SCEV *a5, uint64_t a6, unsigned int a7)
{
  uint64_t v11 = a3;
  uint64_t v14 = 0;
  if (!a3 || *(_WORD *)(a3 + 24) != 14) {
    goto LABEL_39;
  }
  uint64_t v14 = *(unsigned char *)(*(void *)(a3 - 8) + 16) == 83 ? *(void *)(a3 - 8) : 0;
  if (!v14) {
    goto LABEL_39;
  }
  uint64_t v15 = *(void *)(a1 + 424);
  uint64_t v16 = *(unsigned int *)(a1 + 436);
  if (v15 == *(void *)(a1 + 416))
  {
    if (v16)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 8 * v16;
      unsigned int v19 = *(uint64_t **)(a1 + 424);
      while (*v19 != v14)
      {
        if (*v19 == -2) {
          uint64_t v17 = v19;
        }
        ++v19;
        v18 -= 8;
        if (!v18)
        {
          if (!v17) {
            goto LABEL_15;
          }
          *uint64_t v17 = v14;
          --*(_DWORD *)(a1 + 440);
          goto LABEL_39;
        }
      }
      return 0;
    }
LABEL_15:
    unsigned int v20 = *(_DWORD *)(a1 + 432);
    if (v16 < v20)
    {
      *(_DWORD *)(a1 + 436) = v16 + 1;
      *(void *)(v15 + 8 * v16) = v14;
      goto LABEL_39;
    }
  }
  else
  {
    unsigned int v20 = *(_DWORD *)(a1 + 432);
  }
  if (3 * v20 <= 4 * ((int)v16 - *(_DWORD *)(a1 + 440)))
  {
    if (v20 >= 0x40) {
      v20 *= 2;
    }
    else {
      unsigned int v20 = 128;
    }
    goto LABEL_238;
  }
  if (v20 - v16 < v20 >> 3)
  {
LABEL_238:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 416), v20);
    unsigned int v20 = *(_DWORD *)(a1 + 432);
    uint64_t v15 = *(void *)(a1 + 424);
  }
  unsigned int v21 = v20 - 1;
  unsigned int v22 = (v20 - 1) & ((v14 >> 4) ^ (v14 >> 9));
  int v23 = (uint64_t *)(v15 + 8 * v22);
  uint64_t v24 = *v23;
  if (*v23 != -1)
  {
    int v25 = 0;
    int v26 = 1;
    while (v24 != v14)
    {
      if (v25) {
        BOOL v27 = 0;
      }
      else {
        BOOL v27 = v24 == -2;
      }
      if (v27) {
        int v25 = v23;
      }
      unsigned int v28 = v22 + v26++;
      unsigned int v22 = v28 & v21;
      int v23 = (uint64_t *)(v15 + 8 * (v28 & v21));
      uint64_t v24 = *v23;
      if (*v23 == -1) {
        goto LABEL_32;
      }
    }
    return 0;
  }
  int v25 = 0;
LABEL_32:
  if (v25) {
    unsigned int v29 = v25;
  }
  else {
    unsigned int v29 = v23;
  }
  if (*v29 == v14) {
    return 0;
  }
  if (*v29 == -2) {
    --*(_DWORD *)(a1 + 440);
  }
  else {
    ++*(_DWORD *)(a1 + 436);
  }
  *unsigned int v29 = v14;
LABEL_39:
  uint64_t v30 = 0;
  if (!a4 || *(_WORD *)(a4 + 24) != 14) {
    goto LABEL_77;
  }
  uint64_t v30 = *(unsigned char *)(*(void *)(a4 - 8) + 16) == 83 ? *(void *)(a4 - 8) : 0;
  if (!v30) {
    goto LABEL_77;
  }
  uint64_t v31 = *(void *)(a1 + 424);
  uint64_t v32 = *(unsigned int *)(a1 + 436);
  if (v31 == *(void *)(a1 + 416))
  {
    if (v32)
    {
      char v33 = 0;
      uint64_t v34 = 8 * v32;
      unsigned int v35 = *(uint64_t **)(a1 + 424);
      while (*v35 != v30)
      {
        if (*v35 == -2) {
          char v33 = v35;
        }
        ++v35;
        v34 -= 8;
        if (!v34)
        {
          if (!v33) {
            goto LABEL_53;
          }
          uint64_t *v33 = v30;
          --*(_DWORD *)(a1 + 440);
          goto LABEL_77;
        }
      }
      goto LABEL_136;
    }
LABEL_53:
    unsigned int v36 = *(_DWORD *)(a1 + 432);
    if (v32 < v36)
    {
      *(_DWORD *)(a1 + 436) = v32 + 1;
      *(void *)(v31 + 8 * v32) = v30;
      goto LABEL_77;
    }
  }
  else
  {
    unsigned int v36 = *(_DWORD *)(a1 + 432);
  }
  if (3 * v36 <= 4 * ((int)v32 - *(_DWORD *)(a1 + 440)))
  {
    if (v36 >= 0x40) {
      v36 *= 2;
    }
    else {
      unsigned int v36 = 128;
    }
    goto LABEL_242;
  }
  if (v36 - v32 < v36 >> 3)
  {
LABEL_242:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 416), v36);
    unsigned int v36 = *(_DWORD *)(a1 + 432);
    uint64_t v31 = *(void *)(a1 + 424);
  }
  unsigned int v37 = v36 - 1;
  unsigned int v38 = (v36 - 1) & ((v30 >> 4) ^ (v30 >> 9));
  uint64_t v39 = (uint64_t *)(v31 + 8 * v38);
  uint64_t v40 = *v39;
  if (*v39 != -1)
  {
    unint64_t v41 = 0;
    int v42 = 1;
    while (v40 != v30)
    {
      if (v41) {
        BOOL v43 = 0;
      }
      else {
        BOOL v43 = v40 == -2;
      }
      if (v43) {
        unint64_t v41 = v39;
      }
      unsigned int v44 = v38 + v42++;
      unsigned int v38 = v44 & v37;
      uint64_t v39 = (uint64_t *)(v31 + 8 * (v44 & v37));
      uint64_t v40 = *v39;
      if (*v39 == -1) {
        goto LABEL_70;
      }
    }
LABEL_136:
    uint64_t v30 = 0;
LABEL_137:
    uint64_t result = 0;
    goto LABEL_140;
  }
  unint64_t v41 = 0;
LABEL_70:
  if (v41) {
    uint64_t v45 = v41;
  }
  else {
    uint64_t v45 = v39;
  }
  if (*v45 == v30) {
    goto LABEL_136;
  }
  if (*v45 == -2) {
    --*(_DWORD *)(a1 + 440);
  }
  else {
    ++*(_DWORD *)(a1 + 436);
  }
  *uint64_t v45 = v30;
LABEL_77:
  if (!(v14 | v30)) {
    return 0;
  }
  if (v14)
  {
    uint64_t v46 = *(void *)(v14 + 40);
    int v47 = *(unsigned __int16 *)(a4 + 24);
    if (!v30 || *(void *)(v30 + 40) != v46)
    {
      unsigned int v48 = a5;
      a5 = (llvm::SCEV *)a6;
      uint64_t v11 = a4;
      if (!a4) {
        goto LABEL_87;
      }
      goto LABEL_85;
    }
    uint64_t v70 = *(void *)(v46 + 8);
    if (!v70) {
      goto LABEL_139;
    }
    while (1)
    {
      uint64_t v71 = *(void *)(v70 + 24);
      unsigned int v72 = *(unsigned __int8 *)(v71 + 16);
      BOOL v73 = v71 && v72 >= 0x1C;
      if (v73 && v72 - 29 < 0xB) {
        break;
      }
      uint64_t v70 = *(void *)(v70 + 8);
      if (!v70) {
        goto LABEL_139;
      }
    }
    unsigned int v129 = a7;
LABEL_199:
    uint64_t v105 = *(void *)(v71 + 40);
    unsigned int v106 = (llvm::Value *)sub_1CBF73380(v14, v105);
    uint64_t v107 = *(void *)(a1 + 104);
    unsigned int v108 = *(_DWORD *)(a1 + 120);
    if (v108)
    {
      unsigned int v109 = v108 - 1;
      unsigned int v110 = ((v106 >> 4) ^ (v106 >> 9)) & (v108 - 1);
      uint64_t v111 = v107 + 48 * v110;
      unsigned int v112 = *(llvm::Value **)(v111 + 24);
      if (v112 == v106)
      {
LABEL_206:
        if (v111 == v107 + 48 * v108 || (uint64_t SCEVIter = *(llvm::SCEV **)(v111 + 40)) == 0) {
          uint64_t SCEVIter = (llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v106);
        }
        uint64_t v116 = (llvm::Value *)sub_1CBF73380(v30, v105);
        uint64_t v117 = *(void *)(a1 + 104);
        unsigned int v118 = *(_DWORD *)(a1 + 120);
        if (v118)
        {
          unsigned int v119 = v118 - 1;
          unsigned int v120 = ((v116 >> 4) ^ (v116 >> 9)) & (v118 - 1);
          uint64_t v121 = v117 + 48 * v120;
          unsigned int v122 = *(llvm::Value **)(v121 + 24);
          if (v122 == v116)
          {
LABEL_216:
            if (v121 == v117 + 48 * v118 || (uint64_t v125 = *(void *)(v121 + 40)) == 0) {
              uint64_t v125 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v116);
            }
            if ((llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, a2, SCEVIter, v125) & 1) != 0
              || llvm::ScalarEvolution::isImpliedCondOperandsViaRanges(a1, a2, SCEVIter, v125, a5, a6)
              || (uint64_t result = llvm::ScalarEvolution::isImpliedViaOperations(a1, a2, SCEVIter, v125, a5, a6, v129),
                  result))
            {
              while (1)
              {
                uint64_t v70 = *(void *)(v70 + 8);
                if (!v70) {
                  goto LABEL_139;
                }
                uint64_t v71 = *(void *)(v70 + 24);
                unsigned int v126 = *(unsigned __int8 *)(v71 + 16);
                if (v71) {
                  BOOL v127 = v126 >= 0x1C;
                }
                else {
                  BOOL v127 = 0;
                }
                if (v127 && v126 - 29 < 0xB) {
                  goto LABEL_199;
                }
              }
            }
            goto LABEL_140;
          }
          int v123 = 1;
          while (v122 != (llvm::Value *)-4096)
          {
            unsigned int v124 = v120 + v123++;
            unsigned int v120 = v124 & v119;
            uint64_t v121 = v117 + 48 * (v124 & v119);
            unsigned int v122 = *(llvm::Value **)(v121 + 24);
            if (v122 == v116) {
              goto LABEL_216;
            }
          }
        }
        uint64_t v121 = v117 + 48 * v118;
        goto LABEL_216;
      }
      int v113 = 1;
      while (v112 != (llvm::Value *)-4096)
      {
        unsigned int v114 = v110 + v113++;
        unsigned int v110 = v114 & v109;
        uint64_t v111 = v107 + 48 * (v114 & v109);
        unsigned int v112 = *(llvm::Value **)(v111 + 24);
        if (v112 == v106) {
          goto LABEL_206;
        }
      }
    }
    uint64_t v111 = v107 + 48 * v108;
    goto LABEL_206;
  }
  a2 = dword_1CFAC4570[(int)a2];
  uint64_t v46 = *(void *)(v30 + 40);
  int v47 = *(unsigned __int16 *)(v11 + 24);
  unsigned int v48 = (llvm::SCEV *)a6;
  uint64_t v14 = v30;
  uint64_t v30 = 0;
LABEL_85:
  if (v47 == 7 && **(void **)(*(void *)(v11 + 48) + 32) == v46)
  {
    if ((*(_DWORD *)(v14 + 20) & 0x7FFFFFF) == 2) {
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
    }
    uint64_t result = 0;
    goto LABEL_141;
  }
LABEL_87:
  uint64_t v50 = *(void *)(v46 + 8);
  if (!v50)
  {
LABEL_139:
    uint64_t result = 1;
    goto LABEL_140;
  }
  while (1)
  {
    uint64_t v51 = *(void *)(v50 + 24);
    unsigned int v52 = *(unsigned __int8 *)(v51 + 16);
    BOOL v53 = v51 && v52 >= 0x1C;
    if (v53 && v52 - 29 < 0xB) {
      break;
    }
    uint64_t v50 = *(void *)(v50 + 8);
    if (!v50) {
      goto LABEL_139;
    }
  }
  uint64_t v130 = v48;
  int v55 = *(const llvm::BasicBlock **)(v51 + 40);
  uint64_t result = llvm::ScalarEvolution::getBlockDisposition((llvm::ScalarEvolution *)a1, (const llvm::SCEV *)v11, v55);
  if (!result) {
    goto LABEL_140;
  }
LABEL_99:
  uint64_t v56 = (llvm::Value *)sub_1CBF73380(v14, (uint64_t)v55);
  uint64_t v57 = *(void *)(a1 + 104);
  unsigned int v58 = *(_DWORD *)(a1 + 120);
  if (!v58) {
    goto LABEL_105;
  }
  unsigned int v59 = v58 - 1;
  unsigned int v60 = ((v56 >> 4) ^ (v56 >> 9)) & (v58 - 1);
  uint64_t v61 = v57 + 48 * v60;
  unsigned int v62 = *(llvm::Value **)(v61 + 24);
  if (v62 != v56)
  {
    int v63 = 1;
    while (v62 != (llvm::Value *)-4096)
    {
      unsigned int v64 = v60 + v63++;
      unsigned int v60 = v64 & v59;
      uint64_t v61 = v57 + 48 * (v64 & v59);
      unsigned int v62 = *(llvm::Value **)(v61 + 24);
      if (v62 == v56) {
        goto LABEL_106;
      }
    }
LABEL_105:
    uint64_t v61 = v57 + 48 * v58;
  }
LABEL_106:
  if (v61 == v57 + 48 * v58 || (int v65 = *(const llvm::SCEV **)(v61 + 40)) == 0) {
    int v65 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v56);
  }
  if (llvm::ScalarEvolution::getBlockDisposition((llvm::ScalarEvolution *)a1, v65, v55) != 2) {
    goto LABEL_137;
  }
  if ((llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, a2, v65, v11) & 1) != 0
    || llvm::ScalarEvolution::isImpliedCondOperandsViaRanges(a1, a2, v65, v11, v130, (uint64_t)a5)
    || (uint64_t result = llvm::ScalarEvolution::isImpliedViaOperations(a1, a2, v65, v11, v130, a5, a7), result))
  {
    while (1)
    {
      uint64_t v50 = *(void *)(v50 + 8);
      if (!v50) {
        goto LABEL_139;
      }
      uint64_t v66 = *(void *)(v50 + 24);
      unsigned int v67 = *(unsigned __int8 *)(v66 + 16);
      if (v66) {
        BOOL v68 = v67 >= 0x1C;
      }
      else {
        BOOL v68 = 0;
      }
      if (v68 && v67 - 29 <= 0xA)
      {
        int v55 = *(const llvm::BasicBlock **)(v66 + 40);
        uint64_t result = llvm::ScalarEvolution::getBlockDisposition((llvm::ScalarEvolution *)a1, (const llvm::SCEV *)v11, v55);
        if (result) {
          goto LABEL_99;
        }
        break;
      }
    }
  }
LABEL_140:
  if (v14)
  {
LABEL_141:
    uint64_t v76 = *(void *)(a1 + 416);
    uint64_t v75 = *(void *)(a1 + 424);
    if (v75 == v76)
    {
      uint64_t v77 = *(unsigned int *)(a1 + 436);
      uint64_t v78 = (void *)(v75 + 8 * v77);
      if (v77)
      {
        uint64_t v79 = 0;
        uint64_t v80 = 8 * v77;
        while (*(void *)(v75 + v79) != v14)
        {
          v79 += 8;
          if (v80 == v79) {
            goto LABEL_159;
          }
        }
        uint64_t v78 = (void *)(v75 + v79);
      }
LABEL_159:
      uint64_t v76 = *(void *)(a1 + 424);
    }
    else
    {
      uint64_t v81 = *(unsigned int *)(a1 + 432);
      int v82 = v81 - 1;
      unsigned int v83 = (v81 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      uint64_t v78 = (void *)(v75 + 8 * v83);
      uint64_t v84 = *v78;
      if (*v78 == -1)
      {
        unint64_t v85 = 0;
LABEL_190:
        if (v85) {
          uint64_t v78 = v85;
        }
        if (*v78 != v14) {
          uint64_t v78 = (void *)(v75 + 8 * v81);
        }
      }
      else
      {
        unint64_t v85 = 0;
        int v86 = 1;
        while (v84 != v14)
        {
          if (v85) {
            BOOL v87 = 0;
          }
          else {
            BOOL v87 = v84 == -2;
          }
          if (v87) {
            unint64_t v85 = v78;
          }
          unsigned int v88 = v83 + v86++;
          unsigned int v83 = v88 & v82;
          uint64_t v78 = (void *)(v75 + 8 * (v88 & v82));
          uint64_t v84 = *v78;
          if (*v78 == -1) {
            goto LABEL_190;
          }
        }
      }
    }
    BOOL v27 = v75 == v76;
    uint64_t v89 = 432;
    if (v27) {
      uint64_t v89 = 436;
    }
    if (v78 != (void *)(v75 + 8 * *(unsigned int *)(a1 + v89)))
    {
      void *v78 = -2;
      ++*(_DWORD *)(a1 + 440);
    }
  }
  if (v30)
  {
    uint64_t v91 = *(void *)(a1 + 416);
    uint64_t v90 = *(void *)(a1 + 424);
    if (v90 == v91)
    {
      uint64_t v92 = *(unsigned int *)(a1 + 436);
      uint64_t v93 = (void *)(v90 + 8 * v92);
      if (v92)
      {
        uint64_t v94 = 0;
        uint64_t v95 = 8 * v92;
        while (*(void *)(v90 + v94) != v30)
        {
          v94 += 8;
          if (v95 == v94) {
            goto LABEL_183;
          }
        }
        uint64_t v93 = (void *)(v90 + v94);
      }
LABEL_183:
      uint64_t v91 = *(void *)(a1 + 424);
    }
    else
    {
      uint64_t v96 = *(unsigned int *)(a1 + 432);
      int v97 = v96 - 1;
      unsigned int v98 = (v96 - 1) & ((v30 >> 4) ^ (v30 >> 9));
      uint64_t v93 = (void *)(v90 + 8 * v98);
      uint64_t v99 = *v93;
      if (*v93 == -1)
      {
        unsigned int v100 = 0;
LABEL_195:
        if (v100) {
          uint64_t v93 = v100;
        }
        if (*v93 != v30) {
          uint64_t v93 = (void *)(v90 + 8 * v96);
        }
      }
      else
      {
        unsigned int v100 = 0;
        int v101 = 1;
        while (v99 != v30)
        {
          if (v100) {
            BOOL v102 = 0;
          }
          else {
            BOOL v102 = v99 == -2;
          }
          if (v102) {
            unsigned int v100 = v93;
          }
          unsigned int v103 = v98 + v101++;
          unsigned int v98 = v103 & v97;
          uint64_t v93 = (void *)(v90 + 8 * (v103 & v97));
          uint64_t v99 = *v93;
          if (*v93 == -1) {
            goto LABEL_195;
          }
        }
      }
    }
    BOOL v27 = v90 == v91;
    uint64_t v104 = 432;
    if (v27) {
      uint64_t v104 = 436;
    }
    if (v93 != (void *)(v90 + 8 * *(unsigned int *)(a1 + v104)))
    {
      void *v93 = -2;
      ++*(_DWORD *)(a1 + 440);
    }
  }
  return result;
}

BOOL llvm::ScalarEvolution::dominates(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::BasicBlock *a3)
{
  return llvm::ScalarEvolution::getBlockDisposition(this, a2, a3) != 0;
}

uint64_t llvm::ScalarEvolution::isImpliedCondOperandsViaShift(llvm::ScalarEvolution *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a3;
  int v7 = a2;
  if (a4 == a6)
  {
    switch(a2)
    {
      case 2:
        int v7 = 4;
        break;
      case 3:
        int v7 = 5;
        break;
      case 4:
        int v7 = 2;
        break;
      case 5:
        int v7 = 3;
        break;
      case 10:
        int v7 = 12;
        break;
      case 11:
        int v7 = 13;
        break;
      case 12:
        int v7 = 10;
        break;
      case 13:
        int v7 = 11;
        break;
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
        __break(1u);
        JUMPOUT(0x1CC124334);
      case 34:
        int v7 = 36;
        break;
      case 35:
        int v7 = 37;
        break;
      case 36:
        int v7 = 34;
        break;
      case 37:
        int v7 = 35;
        break;
      case 38:
        int v7 = 40;
        break;
      case 39:
        int v7 = 41;
        break;
      case 40:
        int v7 = 38;
        break;
      case 41:
        int v7 = 39;
        break;
      default:
        break;
    }
  }
  else
  {
    BOOL v9 = a3 == a5;
    uint64_t v6 = a4;
    a5 = a6;
    if (!v9) {
      return 0;
    }
  }
  uint64_t result = 0;
  if (!a5 || *(_WORD *)(a5 + 24) != 14) {
    return result;
  }
  uint64_t v11 = *(void *)(a5 - 8);
  int v12 = *(unsigned __int8 *)(v11 + 16);
  if (v12 == 5)
  {
    if (*(_WORD *)(v11 + 18) != 26) {
      return 0;
    }
    uint64_t v14 = v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF);
    int v13 = *(llvm::Value **)v14;
    if (!*(void *)v14 || !*(void *)(v14 + 32)) {
      return 0;
    }
  }
  else
  {
    if (v12 != 54) {
      return 0;
    }
    int v13 = *(llvm::Value **)(v11 - 64);
    if (!v13 || !*(void *)(v11 - 32)) {
      return 0;
    }
  }
  uint64_t v15 = *((void *)this + 13);
  unsigned int v16 = *((_DWORD *)this + 30);
  if (v16)
  {
    unsigned int v17 = ((v13 >> 4) ^ (v13 >> 9)) & (v16 - 1);
    uint64_t v18 = v15 + 48 * v17;
    unsigned int v19 = *(llvm::Value **)(v18 + 24);
    if (v19 == v13) {
      goto LABEL_39;
    }
    int v20 = 1;
    while (v19 != (llvm::Value *)-4096)
    {
      unsigned int v21 = v17 + v20++;
      unsigned int v17 = v21 & (v16 - 1);
      uint64_t v18 = v15 + 48 * v17;
      unsigned int v19 = *(llvm::Value **)(v18 + 24);
      if (v19 == v13) {
        goto LABEL_39;
      }
    }
  }
  uint64_t v18 = v15 + 48 * v16;
LABEL_39:
  if (v18 == v15 + 48 * v16 || (uint64_t SCEVIter = *(void *)(v18 + 40)) == 0) {
    uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter(this, v13);
  }
  if ((v7 & 0xFFFFFFFE) == 0x28)
  {
    uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(this, SCEVIter, 1, 0);
    llvm::ConstantRange::getSignedMin(RangeRef, (uint64_t)&v27);
    unsigned int v24 = v28 - 1;
    if (v28 >= 0x41) {
      int v25 = (uint64_t *)(v27 + 8 * (v24 >> 6));
    }
    else {
      int v25 = &v27;
    }
    uint64_t v26 = (1 << v24) & *v25;
    if (v28 >= 0x41 && v27) {
      MEMORY[0x1D25D9CB0]();
    }
    if (!v26) {
      return llvm::ScalarEvolution::isKnownPredicate(this, 41, SCEVIter, v6);
    }
    return 0;
  }
  if ((v7 & 0xFFFFFFFE) != 0x24) {
    return 0;
  }

  return llvm::ScalarEvolution::isKnownPredicate(this, 37, SCEVIter, v6);
}

BOOL llvm::ScalarEvolution::isImpliedCondOperandsViaRanges(uint64_t a1, uint64_t a2, llvm::SCEV *a3, uint64_t a4, llvm::SCEV *a5, uint64_t a6)
{
  if (*(_WORD *)(a4 + 24)) {
    return 0;
  }
  if (*(_WORD *)(a6 + 24)) {
    return 0;
  }
  llvm::ScalarEvolution::computeConstantDifference(a1, a3, a5, (uint64_t)&v28);
  if (!v30) {
    return 0;
  }
  llvm::ConstantRange::makeExactICmpRegion(a2, *(void *)(a6 + 32) + 24, (uint64_t)&v24);
  unsigned int v11 = v29;
  if (v29 > 0x40) {
    operator new[]();
  }
  uint64_t v12 = v28;
  unsigned int v17 = v29;
  uint64_t v16 = v28;
  unsigned int v21 = v29;
  uint64_t v20 = v28;
  llvm::APInt::operator+=((uint64_t)&v20, 1uLL);
  unsigned int v19 = v21;
  uint64_t v18 = v20;
  llvm::ConstantRange::add((uint64_t)&v24, (const llvm::ConstantRange *)&v16, (uint64_t)&v20);
  if (v19 >= 0x41 && v18) {
    MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
  }
  if (v17 >= 0x41 && v16) {
    MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
  }
  uint64_t v13 = *(void *)(a4 + 32);
  unsigned int v14 = *(_DWORD *)(v13 + 32);
  if (v14 > 0x40) {
    operator new[]();
  }
  uint64_t v15 = *(void *)(v13 + 24);
  unsigned int v17 = v14;
  uint64_t v16 = v15;
  unsigned int v32 = v14;
  uint64_t v31 = v15;
  llvm::APInt::operator+=((uint64_t)&v31, 1uLL);
  unsigned int v19 = v32;
  uint64_t v18 = v31;
  BOOL v9 = llvm::ConstantRange::icmp((const llvm::ConstantRange *)&v20, a2, (llvm::ConstantRange *)&v16);
  if (v19 >= 0x41 && v18) {
    MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
  }
  if (v17 >= 0x41 && v16) {
    MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
  }
  if (v23 >= 0x41 && v22) {
    MEMORY[0x1D25D9CB0](v22, 0x1000C8000313F17);
  }
  if (v21 >= 0x41 && v20) {
    MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
  }
  if (v27 >= 0x41 && v26) {
    MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
  }
  if (v25 >= 0x41 && v24) {
    MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
  }
  if (v11 >= 0x41 && v12) {
    MEMORY[0x1D25D9CB0](v12, 0x1000C8000313F17);
  }
  return v9;
}

uint64_t llvm::ScalarEvolution::isImpliedCondOperandsHelper(uint64_t a1, int a2, const llvm::APInt *a3, const llvm::SCEV *a4, llvm::detail::IEEEFloat **a5, llvm::detail::IEEEFloat **a6)
{
  switch(a2)
  {
    case '""':
    case '#':
      if (!llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, 35, a3, a5)) {
        goto LABEL_3;
      }
      uint64_t v13 = a1;
      uint64_t v14 = 37;
      break;
    case '$':
    case '%':
      if (!llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, 37, a3, a5)) {
        goto LABEL_3;
      }
      uint64_t v13 = a1;
      uint64_t v14 = 35;
      break;
    case '&':
    case '\'':
      if (!llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, 39, a3, a5)) {
        goto LABEL_3;
      }
      uint64_t v13 = a1;
      uint64_t v14 = 41;
      break;
    case '(':
    case ')':
      if (!llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, 41, a3, a5)) {
        goto LABEL_3;
      }
      uint64_t v13 = a1;
      uint64_t v14 = 39;
      break;
    default:
      if sub_1CC11DF8C((uint64_t)a3, (uint64_t)a5) && (sub_1CC11DF8C((uint64_t)a4, (uint64_t)a6)) {
        return 1;
      }
      goto LABEL_3;
  }
  if (llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(v13, v14, a4, a6)) {
    return 1;
  }
LABEL_3:

  return llvm::ScalarEvolution::isImpliedViaOperations(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t llvm::ScalarEvolution::isImpliedViaOperations(uint64_t a1, int a2, const llvm::APInt *a3, const llvm::SCEV *a4, llvm::detail::IEEEFloat **a5, llvm::detail::IEEEFloat **a6, unsigned int a7)
{
  if (dword_1EBCC78B8 < a7) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v10 = a5;
  unsigned int v11 = a3;
  uint64_t v12 = (uint64_t)a4;
  uint64_t v13 = (uint64_t)a6;
  switch(a2)
  {
    case '""':
      uint64_t v12 = (uint64_t)a3;
      uint64_t v13 = (uint64_t)a5;
      unsigned int v11 = a4;
      uint64_t v10 = a6;
      goto LABEL_4;
    case '$':
LABEL_4:
      uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(a1, v13, 1, 0);
      llvm::ConstantRange::getSignedMin(RangeRef, (uint64_t)&v203);
      unsigned int v15 = v204 - 1;
      if (v204 >= 0x41) {
        uint64_t v16 = (unint64_t *)(v203 + 8 * (v15 >> 6));
      }
      else {
        uint64_t v16 = &v203;
      }
      uint64_t v17 = (1 << v15) & *v16;
      if (v204 >= 0x41 && v203) {
        MEMORY[0x1D25D9CB0]();
      }
      if (!v17)
      {
        uint64_t v18 = llvm::ScalarEvolution::getRangeRef(a1, v10, 1, 0);
        llvm::ConstantRange::getSignedMin(v18, (uint64_t)&v203);
        unsigned int v20 = v204 - 1;
        if (v204 >= 0x41) {
          unsigned int v21 = (unint64_t *)(v203 + 8 * (v20 >> 6));
        }
        else {
          unsigned int v21 = &v203;
        }
        uint64_t v22 = (1 << v20) & *v21;
        if (v204 >= 0x41 && v203) {
          MEMORY[0x1D25D9CB0]();
        }
        if (!v22)
        {
          uint64_t v23 = v12;
          while (2)
          {
            switch(*(_WORD *)(v23 + 24))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                unsigned int v58 = (uint64_t ***)(v23 + 40);
                goto LABEL_75;
              case 4:
                unsigned int v58 = (uint64_t ***)(v23 + 48);
                goto LABEL_75;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                uint64_t v24 = *(uint64_t **)(v23 + 32);
                goto LABEL_21;
              case 6:
                uint64_t v24 = (uint64_t *)(v23 + 40);
LABEL_21:
                uint64_t v23 = *v24;
                continue;
              case 0xE:
                unsigned int v58 = *(uint64_t ****)(v23 - 8);
                goto LABEL_75;
              default:
                unsigned int v58 = *(uint64_t ****)(v23 + 32);
LABEL_75:
                unsigned int v60 = *v58;
                unsigned int v61 = *((_DWORD *)*v58 + 2);
                if (v61 != 13)
                {
                  uint64_t v62 = *(void *)(*(void *)a1 + 40);
                  if ((v61 & 0xFE) == 0x12) {
                    unsigned int v61 = *(_DWORD *)(*v60[2] + 8);
                  }
                  uint64_t v63 = *(void *)(v62 + 504);
                  if (v61 < 0x100) {
                    goto LABEL_87;
                  }
                  unsigned int v64 = v61 >> 8;
                  unint64_t v65 = *(unsigned int *)(v62 + 512);
                  uint64_t v66 = v63;
                  if (v65)
                  {
                    uint64_t v66 = v63;
                    unint64_t v67 = v65;
                    do
                    {
                      unint64_t v68 = v67 >> 1;
                      uint64_t v69 = v66 + 16 * (v67 >> 1);
                      unsigned int v70 = *(_DWORD *)(v69 + 8);
                      uint64_t v71 = v69 + 16;
                      v67 += ~(v67 >> 1);
                      if (v70 < v64) {
                        uint64_t v66 = v71;
                      }
                      else {
                        unint64_t v67 = v68;
                      }
                    }
                    while (v67);
                  }
                  if (v66 == v63 + 16 * v65 || *(_DWORD *)(v66 + 8) != v64) {
LABEL_87:
                  }
                    uint64_t v66 = v63;
                  unsigned int v72 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v60, (llvm::LLVMContext *)*(unsigned int *)(v66 + 12));
                  if ((v60[1] & 0xFE) == 0x12)
                  {
                    unint64_t v196 = (llvm::Type *)*((unsigned int *)v60 + 8);
                    if (*((_DWORD *)v60 + 2) == 19) {
                      llvm::ScalableVectorType::get(v72, v196);
                    }
                    else {
                      llvm::FixedVectorType::get((llvm::FixedVectorType *)v72, v196);
                    }
                  }
                  unsigned int v60 = v72;
                }
                BOOL v73 = (llvm::ConstantInt *)*v60;
                unsigned int v74 = *((_DWORD *)v60 + 2);
                unsigned int v204 = v74 >> 8;
                if (v74 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v74 <= 0xFF) {
                  unint64_t v75 = 0;
                }
                else {
                  unint64_t v75 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v74) + 63);
                }
                unint64_t v203 = v75;
                uint64_t v76 = (llvm::ConstantInt *)llvm::ConstantInt::get(v73, (llvm::LLVMContext *)&v203, v19);
                if (v204 >= 0x41 && v203) {
                  MEMORY[0x1D25D9CB0](v203, 0x1000C8000313F17);
                }
                unint64_t Constant = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a1, v76);
                uint64_t result = llvm::ScalarEvolution::isImpliedCondOperands(a1, 38, v12, Constant, v13, v10, 0);
                if (!result) {
                  return result;
                }
                if ((llvm::ScalarEvolution::isImpliedCondOperands(a1, 38, v11, Constant, v13, v10, 0) & 1) == 0) {
                  return 0;
                }
                goto LABEL_24;
            }
          }
        }
      }
      return 0;
    case '&':
      uint64_t v12 = (uint64_t)a3;
      uint64_t v13 = (uint64_t)a5;
      unsigned int v11 = a4;
      uint64_t v10 = a6;
      goto LABEL_24;
    case '(':
LABEL_24:
      uint64_t v25 = v12;
      if (v12)
      {
        uint64_t v25 = v12;
        if (*(_WORD *)(v12 + 24) == 3) {
          uint64_t v25 = *(void *)(v12 + 32);
        }
      }
      uint64_t v26 = v13;
      if (v13)
      {
        uint64_t v26 = v13;
        if (*(_WORD *)(v13 + 24) == 3) {
          uint64_t v26 = *(void *)(v13 + 32);
        }
      }
      int v27 = *(unsigned __int16 *)(v25 + 24);
      if (v27 == 4 && v25)
      {
        uint64_t v28 = *(void *)(v25 + 48);
        unsigned int v29 = *(_DWORD *)(v28 + 8);
        uint64_t v30 = *(void *)(*(void *)a1 + 40);
        if (v29 == 15)
        {
          if ((v29 & 0xFE) == 0x12) {
            unsigned int v29 = *(_DWORD *)(**(void **)(v28 + 16) + 8);
          }
          uint64_t v104 = *(void *)(v30 + 504);
          if (v29 < 0x100) {
            goto LABEL_159;
          }
          unsigned int v105 = v29 >> 8;
          unint64_t v106 = *(unsigned int *)(v30 + 512);
          uint64_t v107 = *(void *)(v30 + 504);
          if (v106)
          {
            uint64_t v107 = v104;
            unint64_t v108 = v106;
            do
            {
              unint64_t v109 = v108 >> 1;
              uint64_t v110 = v107 + 16 * (v108 >> 1);
              unsigned int v111 = *(_DWORD *)(v110 + 8);
              uint64_t v112 = v110 + 16;
              v108 += ~(v108 >> 1);
              if (v111 < v105) {
                uint64_t v107 = v112;
              }
              else {
                unint64_t v108 = v109;
              }
            }
            while (v108);
          }
          if (v107 == v104 + 16 * v106 || *(_DWORD *)(v107 + 8) != v105) {
LABEL_159:
          }
            uint64_t v107 = v104;
          uint64_t v32 = *(unsigned int *)(v107 + 12);
        }
        else
        {
          uint64_t v32 = sub_1CB83544C(v30 + 272, v28);
          if (v31 == 1) {
        }
          }
        char v33 = v11;
        while (2)
        {
          switch(*((_WORD *)v33 + 12))
          {
            case 1:
            case 2:
            case 3:
            case 0xD:
              uint64_t v39 = (uint64_t *)((char *)v33 + 40);
              goto LABEL_50;
            case 4:
              uint64_t v39 = (uint64_t *)((char *)v33 + 48);
              goto LABEL_50;
            case 5:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
              uint64_t v34 = (const llvm::SCEV **)*((void *)v33 + 4);
              goto LABEL_38;
            case 6:
              uint64_t v34 = (const llvm::SCEV **)((char *)v33 + 40);
LABEL_38:
              char v33 = *v34;
              continue;
            case 0xE:
              uint64_t v39 = (uint64_t *)*((void *)v33 - 1);
              goto LABEL_50;
            default:
              uint64_t v39 = (uint64_t *)*((void *)v33 + 4);
LABEL_50:
              uint64_t v40 = *v39;
              unsigned int v41 = *(_DWORD *)(*v39 + 8);
              uint64_t v42 = *(void *)(*(void *)a1 + 40);
              if (v41 == 15)
              {
                if ((v41 & 0xFE) == 0x12) {
                  unsigned int v41 = *(_DWORD *)(**(void **)(v40 + 16) + 8);
                }
                uint64_t v113 = *(void *)(v42 + 504);
                if (v41 < 0x100) {
                  goto LABEL_172;
                }
                unsigned int v114 = v41 >> 8;
                unint64_t v115 = *(unsigned int *)(v42 + 512);
                uint64_t v116 = *(void *)(v42 + 504);
                if (v115)
                {
                  uint64_t v116 = v113;
                  unint64_t v117 = v115;
                  do
                  {
                    unint64_t v118 = v117 >> 1;
                    uint64_t v119 = v116 + 16 * (v117 >> 1);
                    unsigned int v120 = *(_DWORD *)(v119 + 8);
                    uint64_t v121 = v119 + 16;
                    v117 += ~(v117 >> 1);
                    if (v120 < v114) {
                      uint64_t v116 = v121;
                    }
                    else {
                      unint64_t v117 = v118;
                    }
                  }
                  while (v117);
                }
                if (v116 == v113 + 16 * v115 || *(_DWORD *)(v116 + 8) != v114) {
LABEL_172:
                }
                  uint64_t v116 = v113;
                uint64_t v44 = *(unsigned int *)(v116 + 12);
              }
              else
              {
                uint64_t v44 = sub_1CB83544C(v42 + 272, v40);
                if (v43 == 1) {
              }
                }
              if (v32 != v44 || (*(_WORD *)(v25 + 28) & 4) == 0) {
                return 0;
              }
              uint64_t v45 = *(uint64_t **)(v25 + 32);
              uint64_t v46 = *v45;
              uint64_t v47 = v45[1];
              unsigned int v48 = v11;
              while (2)
              {
                switch(*((_WORD *)v48 + 12))
                {
                  case 1:
                  case 2:
                  case 3:
                  case 0xD:
                    unsigned int v59 = (uint64_t ***)((char *)v48 + 40);
                    goto LABEL_100;
                  case 4:
                    unsigned int v59 = (uint64_t ***)((char *)v48 + 48);
                    goto LABEL_100;
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                  case 0xA:
                  case 0xB:
                  case 0xC:
                    int v49 = (const llvm::SCEV **)*((void *)v48 + 4);
                    goto LABEL_58;
                  case 6:
                    int v49 = (const llvm::SCEV **)((char *)v48 + 40);
LABEL_58:
                    unsigned int v48 = *v49;
                    continue;
                  case 0xE:
                    unsigned int v59 = (uint64_t ***)*((void *)v48 - 1);
                    goto LABEL_100;
                  default:
                    unsigned int v59 = (uint64_t ***)*((void *)v48 + 4);
LABEL_100:
                    uint64_t v78 = *v59;
                    unsigned int v79 = *((_DWORD *)*v59 + 2);
                    if (v79 != 13)
                    {
                      uint64_t v80 = *(void *)(*(void *)a1 + 40);
                      if ((v79 & 0xFE) == 0x12) {
                        unsigned int v79 = *(_DWORD *)(*v78[2] + 8);
                      }
                      uint64_t v81 = *(void *)(v80 + 504);
                      if (v79 < 0x100) {
                        goto LABEL_112;
                      }
                      unsigned int v82 = v79 >> 8;
                      unint64_t v83 = *(unsigned int *)(v80 + 512);
                      uint64_t v84 = v81;
                      if (v83)
                      {
                        uint64_t v84 = v81;
                        unint64_t v85 = v83;
                        do
                        {
                          unint64_t v86 = v85 >> 1;
                          uint64_t v87 = v84 + 16 * (v85 >> 1);
                          unsigned int v88 = *(_DWORD *)(v87 + 8);
                          uint64_t v89 = v87 + 16;
                          v85 += ~(v85 >> 1);
                          if (v88 < v82) {
                            uint64_t v84 = v89;
                          }
                          else {
                            unint64_t v85 = v86;
                          }
                        }
                        while (v85);
                      }
                      if (v84 == v81 + 16 * v83 || *(_DWORD *)(v84 + 8) != v82) {
LABEL_112:
                      }
                        uint64_t v84 = v81;
                      uint64_t v90 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v78, (llvm::LLVMContext *)*(unsigned int *)(v84 + 12));
                      if ((v78[1] & 0xFE) == 0x12)
                      {
                        unint64_t v197 = (llvm::Type *)*((unsigned int *)v78 + 8);
                        if (*((_DWORD *)v78 + 2) == 19) {
                          llvm::ScalableVectorType::get(v90, v197);
                        }
                        else {
                          llvm::FixedVectorType::get((llvm::FixedVectorType *)v90, v197);
                        }
                      }
                      uint64_t v78 = v90;
                    }
                    uint64_t v91 = (llvm::ConstantInt *)*v78;
                    unsigned int v92 = *((_DWORD *)v78 + 2);
                    unsigned int v204 = v92 >> 8;
                    if (v92 >> 8 > 0x40) {
                      operator new[]();
                    }
                    if (v92 <= 0xFF) {
                      unint64_t v93 = 0;
                    }
                    else {
                      unint64_t v93 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v92) + 63);
                    }
                    unint64_t v203 = v93;
                    uint64_t v94 = (llvm::ConstantInt *)llvm::ConstantInt::get(v91, (llvm::LLVMContext *)&v203, a3);
                    if (v204 >= 0x41 && v203) {
                      MEMORY[0x1D25D9CB0](v203, 0x1000C8000313F17);
                    }
                    unint64_t v95 = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a1, v94);
                    if (((llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, 38, v46, v95) & 1) == 0
                       && !llvm::ScalarEvolution::isImpliedViaOperations(a1, 38, v46, v95, v13, v10, a7 + 1)|| (llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, 38, v47, v11) & 1) == 0&& (llvm::ScalarEvolution::isImpliedViaOperations(a1, 38, v47, v11, v13, v10, a7 + 1) & 1) == 0)&& ((llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, 38, v47, v95) & 1) == 0&& !llvm::ScalarEvolution::isImpliedViaOperations(a1, 38, v47, v95, v13, v10, a7 + 1)|| (llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, 38, v46, v11) & 1) == 0
                       && (llvm::ScalarEvolution::isImpliedViaOperations(a1, 38, v46, v11, v13, v10, a7 + 1) & 1) == 0))
                    {
                      return llvm::ScalarEvolution::isImpliedViaMerge(a1, 38, v12, (uint64_t)v11, (llvm::SCEV *)v13, (uint64_t)v10, a7 + 1);
                    }
                    uint64_t result = 1;
                    break;
                }
                break;
              }
              break;
          }
          return result;
        }
      }
      if (v27 != 14 || !v25) {
        return llvm::ScalarEvolution::isImpliedViaMerge(a1, 38, v12, (uint64_t)v11, (llvm::SCEV *)v13, (uint64_t)v10, a7 + 1);
      }
      uint64_t v35 = *(void *)(v25 - 8);
      int v36 = *(unsigned __int8 *)(v35 + 16);
      if (v36 == 5)
      {
        if (*(_WORD *)(v35 + 18) != 20) {
          return llvm::ScalarEvolution::isImpliedViaMerge(a1, 38, v12, (uint64_t)v11, (llvm::SCEV *)v13, (uint64_t)v10, a7 + 1);
        }
        uint64_t v50 = (uint64_t *)(v35 - 32 * (*(_DWORD *)(v35 + 20) & 0x7FFFFFF));
        uint64_t v37 = *v50;
        if (!*v50) {
          return llvm::ScalarEvolution::isImpliedViaMerge(a1, 38, v12, (uint64_t)v11, (llvm::SCEV *)v13, (uint64_t)v10, a7 + 1);
        }
        unsigned int v38 = (llvm::Value *)v50[4];
        if (!v38) {
          return llvm::ScalarEvolution::isImpliedViaMerge(a1, 38, v12, (uint64_t)v11, (llvm::SCEV *)v13, (uint64_t)v10, a7 + 1);
        }
      }
      else
      {
        if (v36 != 48) {
          return llvm::ScalarEvolution::isImpliedViaMerge(a1, 38, v12, (uint64_t)v11, (llvm::SCEV *)v13, (uint64_t)v10, a7 + 1);
        }
        uint64_t v37 = *(void *)(v35 - 64);
        if (!v37) {
          return llvm::ScalarEvolution::isImpliedViaMerge(a1, 38, v12, (uint64_t)v11, (llvm::SCEV *)v13, (uint64_t)v10, a7 + 1);
        }
        unsigned int v38 = *(llvm::Value **)(v35 - 32);
        if (!v38) {
          return llvm::ScalarEvolution::isImpliedViaMerge(a1, 38, v12, (uint64_t)v11, (llvm::SCEV *)v13, (uint64_t)v10, a7 + 1);
        }
      }
      if (*((unsigned char *)v38 + 16) != 16) {
        return 0;
      }
      uint64_t v51 = *(void *)(a1 + 104);
      unsigned int v52 = *(_DWORD *)(a1 + 120);
      if (!v52) {
        goto LABEL_129;
      }
      unsigned int v53 = (v52 - 1) & ((v38 >> 4) ^ (v38 >> 9));
      uint64_t v54 = v51 + 48 * v53;
      int v55 = *(llvm::Value **)(v54 + 24);
      if (v55 != v38)
      {
        int v56 = 1;
        while (v55 != (llvm::Value *)-4096)
        {
          unsigned int v57 = v53 + v56++;
          unsigned int v53 = v57 & (v52 - 1);
          uint64_t v54 = v51 + 48 * v53;
          int v55 = *(llvm::Value **)(v54 + 24);
          if (v55 == v38) {
            goto LABEL_130;
          }
        }
LABEL_129:
        uint64_t v54 = v51 + 48 * v52;
      }
LABEL_130:
      if (v54 == v51 + 48 * v52 || (uint64_t SCEVIter = *(const llvm::SCEV **)(v54 + 40)) == 0)
      {
        uint64_t SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v38);
        uint64_t v51 = *(void *)(a1 + 104);
        unsigned int v52 = *(_DWORD *)(a1 + 120);
      }
      if (!v52) {
        goto LABEL_139;
      }
      unsigned int v97 = (v52 - 1) & ((v37 >> 4) ^ (v37 >> 9));
      uint64_t v98 = v51 + 48 * v97;
      uint64_t v99 = *(void *)(v98 + 24);
      if (v99 != v37)
      {
        int v100 = 1;
        while (v99 != -4096)
        {
          unsigned int v101 = v97 + v100++;
          unsigned int v97 = v101 & (v52 - 1);
          uint64_t v98 = v51 + 48 * v97;
          uint64_t v99 = *(void *)(v98 + 24);
          if (v99 == v37) {
            goto LABEL_140;
          }
        }
LABEL_139:
        uint64_t v98 = v51 + 48 * v52;
      }
LABEL_140:
      if (v98 == v51 + 48 * v52) {
        return 0;
      }
      uint64_t result = *(void *)(v98 + 40);
      if (result)
      {
        uint64_t v102 = *(void *)(v98 + 40);
        while (2)
        {
          switch(*(_WORD *)(v102 + 24))
          {
            case 1:
            case 2:
            case 3:
            case 0xD:
              unsigned int v122 = (uint64_t *)(v102 + 40);
              goto LABEL_179;
            case 4:
              unsigned int v122 = (uint64_t *)(v102 + 48);
              goto LABEL_179;
            case 5:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
              unsigned int v103 = *(uint64_t **)(v102 + 32);
              goto LABEL_145;
            case 6:
              unsigned int v103 = (uint64_t *)(v102 + 40);
LABEL_145:
              uint64_t v102 = *v103;
              continue;
            case 0xE:
              unsigned int v122 = *(uint64_t **)(v102 - 8);
              goto LABEL_179;
            default:
              unsigned int v122 = *(uint64_t **)(v102 + 32);
LABEL_179:
              uint64_t v123 = *v122;
              uint64_t v124 = v26;
              while (2)
              {
                switch(*(_WORD *)(v124 + 24))
                {
                  case 1:
                  case 2:
                  case 3:
                  case 0xD:
                    unsigned int v126 = (void *)(v124 + 40);
                    goto LABEL_187;
                  case 4:
                    unsigned int v126 = (void *)(v124 + 48);
                    goto LABEL_187;
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                  case 0xA:
                  case 0xB:
                  case 0xC:
                    uint64_t v125 = *(uint64_t **)(v124 + 32);
                    goto LABEL_182;
                  case 6:
                    uint64_t v125 = (uint64_t *)(v124 + 40);
LABEL_182:
                    uint64_t v124 = *v125;
                    continue;
                  case 0xE:
                    unsigned int v126 = *(void **)(v124 - 8);
                    goto LABEL_187;
                  default:
                    unsigned int v126 = *(void **)(v124 + 32);
LABEL_187:
                    if (v123 != *v126) {
                      return 0;
                    }
                    uint64_t result = sub_1CC11DF8C(result, v26);
                    if (result)
                    {
                      uint64_t result = llvm::ScalarEvolution::isKnownPositive((llvm::ScalarEvolution *)a1, SCEVIter);
                      if (result)
                      {
                        uint64_t v127 = **((void **)SCEVIter + 4);
                        BOOL v128 = v10;
                        while (2)
                        {
                          switch(*((_WORD *)v128 + 12))
                          {
                            case 1:
                            case 2:
                            case 3:
                            case 0xD:
                              uint64_t v130 = (uint64_t *)(v128 + 5);
                              goto LABEL_200;
                            case 4:
                              uint64_t v130 = (uint64_t *)(v128 + 6);
                              goto LABEL_200;
                            case 5:
                            case 7:
                            case 8:
                            case 9:
                            case 0xA:
                            case 0xB:
                            case 0xC:
                              unsigned int v129 = (llvm::detail::IEEEFloat ***)v128[4];
                              goto LABEL_193;
                            case 6:
                              unsigned int v129 = (llvm::detail::IEEEFloat ***)(v128 + 5);
LABEL_193:
                              BOOL v128 = *v129;
                              continue;
                            case 0xE:
                              uint64_t v130 = (uint64_t *)*(v128 - 1);
                              goto LABEL_200;
                            default:
                              uint64_t v130 = (uint64_t *)v128[4];
LABEL_200:
                              uint64_t v131 = *v130;
                              unsigned int v132 = *(_DWORD *)(v127 + 8);
                              int v202 = (v132 == 15) ^ (*(unsigned char *)(*v130 + 8) == 15);
                              if (!v202)
                              {
                                uint64_t v133 = *(void *)(*(void *)a1 + 40);
                                if (v132 == 15)
                                {
                                  if ((v132 & 0xFE) == 0x12) {
                                    unsigned int v132 = *(_DWORD *)(**(void **)(v127 + 16) + 8);
                                  }
                                  uint64_t v178 = *(void *)(v133 + 504);
                                  if (v132 < 0x100) {
                                    goto LABEL_270;
                                  }
                                  unsigned int v179 = v132 >> 8;
                                  unint64_t v180 = *(unsigned int *)(v133 + 512);
                                  uint64_t v181 = v178;
                                  if (v180)
                                  {
                                    uint64_t v181 = v178;
                                    unint64_t v182 = v180;
                                    do
                                    {
                                      unint64_t v183 = v182 >> 1;
                                      uint64_t v184 = v181 + 16 * (v182 >> 1);
                                      unsigned int v185 = *(_DWORD *)(v184 + 8);
                                      uint64_t v186 = v184 + 16;
                                      v182 += ~(v182 >> 1);
                                      if (v185 < v179) {
                                        uint64_t v181 = v186;
                                      }
                                      else {
                                        unint64_t v182 = v183;
                                      }
                                    }
                                    while (v182);
                                  }
                                  if (v181 == v178 + 16 * v180 || *(_DWORD *)(v181 + 8) != v179) {
LABEL_270:
                                  }
                                    uint64_t v181 = v178;
                                  unint64_t v200 = *(unsigned int *)(v181 + 12);
                                }
                                else
                                {
                                  unint64_t v200 = sub_1CB83544C(v133 + 272, v127);
                                  if (v134 == 1) {
                                }
                                  }
                                unsigned int v135 = *(_DWORD *)(v131 + 8);
                                uint64_t v136 = *(void *)(*(void *)a1 + 40);
                                if (v135 == 15)
                                {
                                  if ((v135 & 0xFE) == 0x12) {
                                    unsigned int v135 = *(_DWORD *)(**(void **)(v131 + 16) + 8);
                                  }
                                  uint64_t v187 = *(void *)(v136 + 504);
                                  if (v135 < 0x100) {
                                    goto LABEL_283;
                                  }
                                  unsigned int v188 = v135 >> 8;
                                  unint64_t v189 = *(unsigned int *)(v136 + 512);
                                  uint64_t v190 = *(void *)(v136 + 504);
                                  if (v189)
                                  {
                                    uint64_t v190 = v187;
                                    unint64_t v191 = v189;
                                    do
                                    {
                                      unint64_t v192 = v191 >> 1;
                                      uint64_t v193 = v190 + 16 * (v191 >> 1);
                                      unsigned int v194 = *(_DWORD *)(v193 + 8);
                                      uint64_t v195 = v193 + 16;
                                      v191 += ~(v191 >> 1);
                                      if (v194 < v188) {
                                        uint64_t v190 = v195;
                                      }
                                      else {
                                        unint64_t v191 = v192;
                                      }
                                    }
                                    while (v191);
                                  }
                                  if (v190 == v187 + 16 * v189 || *(_DWORD *)(v190 + 8) != v188) {
LABEL_283:
                                  }
                                    uint64_t v190 = v187;
                                  unint64_t v138 = *(unsigned int *)(v190 + 12);
                                }
                                else
                                {
                                  unint64_t v138 = sub_1CB83544C(v136 + 272, v131);
                                  if (v137 == 1) {
                                }
                                  }
                                if (v200 >= v138) {
                                  uint64_t v131 = v127;
                                }
                                NoopOrSignExtend = llvm::ScalarEvolution::getNoopOrSignExtend((llvm::ScalarEvolution *)a1, (llvm::detail::IEEEFloat **)SCEVIter, (llvm::Type *)v131);
                                unsigned int v201 = llvm::ScalarEvolution::getNoopOrSignExtend((llvm::ScalarEvolution *)a1, v10, (llvm::Type *)v131);
                                unsigned int v141 = *(_DWORD *)(v131 + 8);
                                uint64_t v142 = v131;
                                if (v141 != 13)
                                {
                                  uint64_t v143 = *(void *)(*(void *)a1 + 40);
                                  if ((v141 & 0xFE) == 0x12) {
                                    unsigned int v141 = *(_DWORD *)(**(void **)(v131 + 16) + 8);
                                  }
                                  uint64_t v144 = *(void *)(v143 + 504);
                                  if (v141 < 0x100) {
                                    goto LABEL_222;
                                  }
                                  unsigned int v145 = v141 >> 8;
                                  unint64_t v146 = *(unsigned int *)(v143 + 512);
                                  uint64_t v147 = v144;
                                  if (v146)
                                  {
                                    uint64_t v147 = v144;
                                    unint64_t v148 = v146;
                                    do
                                    {
                                      unint64_t v149 = v148 >> 1;
                                      uint64_t v150 = v147 + 16 * (v148 >> 1);
                                      unsigned int v151 = *(_DWORD *)(v150 + 8);
                                      uint64_t v152 = v150 + 16;
                                      v148 += ~(v148 >> 1);
                                      if (v151 < v145) {
                                        uint64_t v147 = v152;
                                      }
                                      else {
                                        unint64_t v148 = v149;
                                      }
                                    }
                                    while (v148);
                                  }
                                  if (v147 == v144 + 16 * v146 || *(_DWORD *)(v147 + 8) != v145) {
LABEL_222:
                                  }
                                    uint64_t v147 = v144;
                                  uint64_t v142 = llvm::IntegerType::get(*(llvm::IntegerType **)v131, (llvm::LLVMContext *)*(unsigned int *)(v147 + 12));
                                  if ((*(_DWORD *)(v131 + 8) & 0xFE) == 0x12)
                                  {
                                    unint64_t v198 = (llvm::Type *)*(unsigned int *)(v131 + 32);
                                    if (*(_DWORD *)(v131 + 8) == 19) {
                                      llvm::ScalableVectorType::get((uint64_t **)v142, v198);
                                    }
                                    else {
                                      llvm::FixedVectorType::get((llvm::FixedVectorType *)v142, v198);
                                    }
                                  }
                                }
                                int v153 = *(uint64_t **)v142;
                                unsigned int v154 = *(_DWORD *)(v142 + 8);
                                unsigned int v204 = v154 >> 8;
                                if (v154 >> 8 > 0x40) {
                                  operator new[]();
                                }
                                if (v154 <= 0xFF) {
                                  LOBYTE(v155) = 0;
                                }
                                else {
                                  unint64_t v155 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v154) + 63);
                                }
                                unint64_t v203 = v155 & 2;
                                unint64_t v156 = (llvm::ConstantInt *)llvm::ConstantInt::get((llvm::ConstantInt *)v153, (llvm::LLVMContext *)&v203, v140);
                                if (v204 >= 0x41 && v203) {
                                  MEMORY[0x1D25D9CB0](v203, 0x1000C8000313F17);
                                }
                                unsigned int v157 = (const llvm::APInt *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a1, v156);
                                unint64_t MinusSCEV = llvm::ScalarEvolution::getMinusSCEV((llvm::ScalarEvolution *)a1, (llvm::SCEV *)NoopOrSignExtend, v157, 0, 0);
                                if (!llvm::ScalarEvolution::isKnownNonPositive((llvm::ScalarEvolution *)a1, v11)
                                  || (llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, 38, v201, MinusSCEV) & 1) == 0
                                  && (llvm::ScalarEvolution::isImpliedViaOperations(a1, 38, v201, MinusSCEV, v13, v10, a7 + 1) & 1) == 0)
                                {
                                  unsigned int v160 = *(_DWORD *)(v131 + 8);
                                  if (v160 != 13)
                                  {
                                    uint64_t v161 = *(void *)(*(void *)a1 + 40);
                                    if ((v160 & 0xFE) == 0x12) {
                                      unsigned int v160 = *(_DWORD *)(**(void **)(v131 + 16) + 8);
                                    }
                                    uint64_t v162 = *(void *)(v161 + 504);
                                    if (v160 < 0x100) {
                                      goto LABEL_244;
                                    }
                                    unsigned int v163 = v160 >> 8;
                                    unint64_t v164 = *(unsigned int *)(v161 + 512);
                                    uint64_t v165 = v162;
                                    if (v164)
                                    {
                                      uint64_t v165 = v162;
                                      unint64_t v166 = v164;
                                      do
                                      {
                                        unint64_t v167 = v166 >> 1;
                                        uint64_t v168 = v165 + 16 * (v166 >> 1);
                                        unsigned int v169 = *(_DWORD *)(v168 + 8);
                                        uint64_t v170 = v168 + 16;
                                        v166 += ~(v166 >> 1);
                                        if (v169 < v163) {
                                          uint64_t v165 = v170;
                                        }
                                        else {
                                          unint64_t v166 = v167;
                                        }
                                      }
                                      while (v166);
                                    }
                                    if (v165 == v162 + 16 * v164 || *(_DWORD *)(v165 + 8) != v163) {
LABEL_244:
                                    }
                                      uint64_t v165 = v162;
                                    unsigned int v171 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v131, (llvm::LLVMContext *)*(unsigned int *)(v165 + 12));
                                    if ((*(_DWORD *)(v131 + 8) & 0xFE) == 0x12)
                                    {
                                      unint64_t v199 = (llvm::Type *)*(unsigned int *)(v131 + 32);
                                      if (*(_DWORD *)(v131 + 8) == 19) {
                                        llvm::ScalableVectorType::get(v171, v199);
                                      }
                                      else {
                                        llvm::FixedVectorType::get((llvm::FixedVectorType *)v171, v199);
                                      }
                                    }
                                    uint64_t v131 = (uint64_t)v171;
                                  }
                                  uint64_t v172 = *(llvm::ConstantInt **)v131;
                                  unsigned int v173 = *(_DWORD *)(v131 + 8);
                                  unsigned int v204 = v173 >> 8;
                                  if (v173 >> 8 > 0x40) {
                                    operator new[]();
                                  }
                                  if (v173 <= 0xFF) {
                                    unint64_t v174 = 0;
                                  }
                                  else {
                                    unint64_t v174 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v173) + 63);
                                  }
                                  unint64_t v203 = v174;
                                  uint64_t v175 = (llvm::ConstantInt *)llvm::ConstantInt::get(v172, (llvm::LLVMContext *)&v203, v159);
                                  if (v204 >= 0x41 && v203) {
                                    MEMORY[0x1D25D9CB0](v203, 0x1000C8000313F17);
                                  }
                                  unsigned int v176 = (llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a1, v175);
                                  unint64_t v177 = llvm::ScalarEvolution::getMinusSCEV((llvm::ScalarEvolution *)a1, v176, (const llvm::APInt *)NoopOrSignExtend, 0, 0);
                                  if (!llvm::ScalarEvolution::isKnownNegative((llvm::ScalarEvolution *)a1, v11)|| (llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(a1, 38, v201, v177) & 1) == 0&& !llvm::ScalarEvolution::isImpliedViaOperations(a1, 38, v201, v177, v13, v10, a7 + 1))
                                  {
                                    return llvm::ScalarEvolution::isImpliedViaMerge(a1, 38, v12, (uint64_t)v11, (llvm::SCEV *)v13, (uint64_t)v10, a7 + 1);
                                  }
                                }
                              }
                              uint64_t result = v202 ^ 1u;
                              break;
                          }
                          break;
                        }
                      }
                    }
                    break;
                }
                break;
              }
              break;
          }
          break;
        }
      }
      return result;
    default:
      return result;
  }
}

uint64_t llvm::ScalarEvolution::canIVOverflowOnLT(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV *a3, int a4)
{
  uint64_t v8 = a2;
  while (2)
  {
    switch(*((_WORD *)v8 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        BOOL v9 = (uint64_t *)((char *)v8 + 40);
        goto LABEL_4;
      case 4:
        BOOL v9 = (uint64_t *)((char *)v8 + 48);
        goto LABEL_4;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v45 = (const llvm::SCEV **)*((void *)v8 + 4);
        goto LABEL_48;
      case 6:
        uint64_t v45 = (const llvm::SCEV **)((char *)v8 + 40);
LABEL_48:
        uint64_t v8 = *v45;
        continue;
      case 0xE:
        BOOL v9 = (uint64_t *)*((void *)v8 - 1);
        goto LABEL_4;
      default:
        BOOL v9 = (uint64_t *)*((void *)v8 + 4);
LABEL_4:
        uint64_t v10 = *v9;
        unsigned int v11 = *(_DWORD *)(*v9 + 8);
        uint64_t v12 = *(void *)(*(void *)this + 40);
        if (v11 == 15)
        {
          if ((v11 & 0xFE) == 0x12) {
            unsigned int v11 = *(_DWORD *)(**(void **)(v10 + 16) + 8);
          }
          uint64_t v56 = *(void *)(v12 + 504);
          if (v11 < 0x100) {
            goto LABEL_72;
          }
          unsigned int v57 = v11 >> 8;
          unint64_t v58 = *(unsigned int *)(v12 + 512);
          uint64_t v59 = *(void *)(v12 + 504);
          if (v58)
          {
            uint64_t v59 = v56;
            unint64_t v60 = v58;
            do
            {
              unint64_t v61 = v60 >> 1;
              uint64_t v62 = v59 + 16 * (v60 >> 1);
              unsigned int v63 = *(_DWORD *)(v62 + 8);
              uint64_t v64 = v62 + 16;
              v60 += ~(v60 >> 1);
              if (v63 < v57) {
                uint64_t v59 = v64;
              }
              else {
                unint64_t v60 = v61;
              }
            }
            while (v60);
          }
          if (v59 == v56 + 16 * v58 || *(_DWORD *)(v59 + 8) != v57) {
LABEL_72:
          }
            uint64_t v59 = v56;
          unsigned int v14 = *(_DWORD *)(v59 + 12);
        }
        else
        {
          unsigned int v14 = sub_1CB83544C(v12 + 272, v10);
          if (v13 == 1) {
        }
          }
        unsigned int v15 = a3;
        while (2)
        {
          switch(*((_WORD *)v15 + 12))
          {
            case 1:
            case 2:
            case 3:
            case 0xD:
              uint64_t v16 = (char *)v15 + 40;
              goto LABEL_10;
            case 4:
              uint64_t v16 = (char *)v15 + 48;
              goto LABEL_10;
            case 5:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
              uint64_t v46 = (const llvm::SCEV **)*((void *)v15 + 4);
              goto LABEL_50;
            case 6:
              uint64_t v46 = (const llvm::SCEV **)((char *)v15 + 40);
LABEL_50:
              unsigned int v15 = *v46;
              continue;
            case 0xE:
              uint64_t v16 = (char *)*((void *)v15 - 1);
              goto LABEL_10;
            default:
              uint64_t v16 = (char *)*((void *)v15 + 4);
LABEL_10:
              uint64_t v17 = *(llvm::FixedVectorType **)v16;
              unsigned int v18 = *(_DWORD *)(*(void *)v16 + 8);
              if (v18 != 13)
              {
                uint64_t v19 = *(void *)(*(void *)this + 40);
                if ((v18 & 0xFE) == 0x12) {
                  unsigned int v18 = *(_DWORD *)(**((void **)v17 + 2) + 8);
                }
                uint64_t v20 = *(void *)(v19 + 504);
                if (v18 < 0x100) {
                  goto LABEL_22;
                }
                unsigned int v21 = v18 >> 8;
                unint64_t v22 = *(unsigned int *)(v19 + 512);
                uint64_t v23 = v20;
                if (v22)
                {
                  uint64_t v23 = v20;
                  unint64_t v24 = v22;
                  do
                  {
                    unint64_t v25 = v24 >> 1;
                    uint64_t v26 = v23 + 16 * (v24 >> 1);
                    unsigned int v27 = *(_DWORD *)(v26 + 8);
                    uint64_t v28 = v26 + 16;
                    v24 += ~(v24 >> 1);
                    if (v27 < v21) {
                      uint64_t v23 = v28;
                    }
                    else {
                      unint64_t v24 = v25;
                    }
                  }
                  while (v24);
                }
                if (v23 == v20 + 16 * v22 || *(_DWORD *)(v23 + 8) != v21) {
LABEL_22:
                }
                  uint64_t v23 = v20;
                unsigned int v29 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v17, (llvm::LLVMContext *)*(unsigned int *)(v23 + 12));
                if ((*((_DWORD *)v17 + 2) & 0xFE) == 0x12) {
                  llvm::VectorType::get(v29, (llvm::Type *)(*((unsigned int *)v17 + 8) | ((unint64_t)(*((_DWORD *)v17 + 2) == 19) << 32)));
                }
                uint64_t v17 = v29;
              }
              uint64_t v30 = *(llvm::ConstantInt **)v17;
              unsigned int v31 = *((_DWORD *)v17 + 2);
              unsigned int v70 = v31 >> 8;
              if (v31 >> 8 > 0x40) {
                operator new[]();
              }
              if (v31 <= 0xFF) {
                LOBYTE(v32) = 0;
              }
              else {
                unint64_t v32 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v31) + 63);
              }
              unint64_t v69 = v32 & 1;
              char v33 = (llvm::ConstantInt *)llvm::ConstantInt::get(v30, (llvm::LLVMContext *)&v69, a3);
              if (v70 >= 0x41 && v69) {
                MEMORY[0x1D25D9CB0](v69, 0x1000C8000313F17);
              }
              unint64_t Constant = (const llvm::APInt *)llvm::ScalarEvolution::getConstant(this, v33);
              if (a4)
              {
                uint64_t RangeRef = (_DWORD *)llvm::ScalarEvolution::getRangeRef(this, a2, 1, 0);
                llvm::ConstantRange::getSignedMax(RangeRef, (uint64_t)&v69);
                unsigned int v68 = v14;
                if (v14 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v67);
                }
                unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
                if (!v14) {
                  unint64_t v48 = 0;
                }
                uint64_t v67 = v48 & ~(1 << (v14 - 1));
                unint64_t MinusSCEV = llvm::ScalarEvolution::getMinusSCEV(this, a3, Constant, 0, 0);
                uint64_t v50 = (_DWORD *)llvm::ScalarEvolution::getRangeRef(this, MinusSCEV, 1, 0);
                llvm::ConstantRange::getSignedMax(v50, (uint64_t)&v65);
                if (v14) {
                  unint64_t v51 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
                }
                else {
                  unint64_t v51 = 0;
                }
                uint64_t v52 = (uint64_t)((v51 & (v67 - v65)) << -(char)v14) >> -(char)v14;
                uint64_t v53 = (uint64_t)(v69 << -(char)v14) >> -(char)v14;
                BOOL v54 = v52 < v53;
                BOOL v55 = v52 > v53;
                if (v54) {
                  unsigned int v43 = -1;
                }
                else {
                  unsigned int v43 = v55;
                }
              }
              else
              {
                uint64_t v35 = (char **)llvm::ScalarEvolution::getRangeRef(this, a2, 0, 0);
                llvm::ConstantRange::getUnsignedMax(v35, (uint64_t)&v69);
                unsigned int v68 = v14;
                if (v14 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v67);
                }
                if (v14) {
                  unint64_t v36 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
                }
                else {
                  unint64_t v36 = 0;
                }
                unint64_t v37 = llvm::ScalarEvolution::getMinusSCEV(this, a3, Constant, 0, 0);
                unsigned int v38 = (char **)llvm::ScalarEvolution::getRangeRef(this, v37, 0, 0);
                llvm::ConstantRange::getUnsignedMax(v38, (uint64_t)&v65);
                unint64_t v39 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
                if (!v14) {
                  unint64_t v39 = 0;
                }
                unint64_t v40 = v39 & (v36 - v65);
                BOOL v41 = v40 >= v69;
                BOOL v42 = v40 > v69;
                if (v41) {
                  unsigned int v43 = v42;
                }
                else {
                  unsigned int v43 = -1;
                }
              }
              if (v66 >= 0x41 && v65) {
                MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
              }
              if (v70 >= 0x41 && v69) {
                MEMORY[0x1D25D9CB0](v69, 0x1000C8000313F17);
              }
              return v43 >> 31;
          }
        }
    }
  }
}

unint64_t llvm::ScalarEvolution::computeMaxBECountForLT(llvm::ConstantInt ****this, const llvm::SCEV *a2, const llvm::SCEV *a3, const llvm::SCEV *a4, unsigned int a5, int a6)
{
  char v11 = a5 - 1;
  if (a5 != 1 || !a6)
  {
    if (a6)
    {
      uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(this, a2, 1, 0);
      llvm::ConstantRange::getSignedMin(RangeRef, (uint64_t)&v110);
      uint64_t v48 = llvm::ScalarEvolution::getRangeRef(this, a3, 1, 0);
      llvm::ConstantRange::getSignedMin(v48, (uint64_t)&v108);
    }
    else
    {
      uint64_t v12 = llvm::ScalarEvolution::getRangeRef(this, a2, 0, 0);
      llvm::ConstantRange::getUnsignedMin(v12, (uint64_t)&v110);
      uint64_t v13 = llvm::ScalarEvolution::getRangeRef(this, a3, 0, 0);
      llvm::ConstantRange::getUnsignedMin(v13, (uint64_t)&v108);
    }
    unsigned int v107 = a5;
    if (a5 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v106);
    }
    if (a5) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a5;
    }
    else {
      LOBYTE(v14) = 0;
    }
    unint64_t v106 = v14 & 1;
    if (a6)
    {
      if (v107 <= 0x40)
      {
        uint64_t v49 = (uint64_t)(v106 << -(char)v107) >> -(char)v107;
        uint64_t v50 = (uint64_t)(v108 << -(char)v107) >> -(char)v107;
        BOOL v66 = v49 < v50;
        int v15 = v49 > v50;
        if (v66) {
          int v15 = -1;
        }
LABEL_12:
        BOOL v66 = v15 <= 0;
        uint64_t v16 = (void **)&v108;
        if (v66)
        {
          unsigned int v17 = v109;
        }
        else
        {
          uint64_t v16 = (void **)&v106;
          unsigned int v17 = v107;
        }
        unsigned int v105 = v17;
        if (v17 > 0x40) {
          operator new[]();
        }
        unsigned int v18 = *v16;
        uint64_t v104 = *v16;
        unsigned int v103 = a5;
        if (a6)
        {
          unint64_t v51 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a5;
          if (!a5) {
            unint64_t v51 = 0;
          }
          uint64_t v102 = v51 & ~(1 << v11);
        }
        else
        {
          unint64_t v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a5;
          if (!a5) {
            unint64_t v19 = 0;
          }
          uint64_t v102 = v19;
        }
        unsigned int v98 = v17;
        unint64_t v97 = (unint64_t)v18;
        llvm::APInt::operator-=((uint64_t)&v97, 1uLL);
        unsigned int v20 = v98;
        unsigned int v100 = v98;
        unint64_t __src = (void *)v97;
        unsigned int v98 = 0;
        if (v100 > 0x40)
        {
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&__src);
        }
        else
        {
          if (v20) {
            unint64_t v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
          }
          else {
            unint64_t v21 = 0;
          }
          unint64_t __src = (void *)(v21 & ~v97);
        }
        llvm::APInt::operator++((uint64_t)&__src);
        unsigned int v22 = v100;
        if (v100 >= 0x41)
        {
          uint64_t v82 = 0;
          unint64_t v83 = (unint64_t *)__src;
          uint64_t v84 = (uint64_t *)v102;
          unint64_t v85 = ((unint64_t)v100 + 63) >> 6;
          unint64_t v86 = v85;
          do
          {
            uint64_t v87 = *v84++;
            unint64_t v88 = v87 + *v83;
            BOOL v89 = v88 + 1 <= *v83;
            if (v82)
            {
              ++v88;
              uint64_t v82 = v89;
            }
            else
            {
              uint64_t v82 = v88 < *v83;
            }
            *v83++ = v88;
            --v86;
          }
          while (v86);
          *((void *)__src + (v85 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
          unsigned int v22 = v100;
          unint64_t v25 = (unint64_t)__src;
        }
        else
        {
          unint64_t v23 = (unint64_t)__src + v102;
          if (v100) {
            unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v100;
          }
          else {
            unint64_t v24 = 0;
          }
          unint64_t v25 = v24 & v23;
          unint64_t __src = (void *)(v24 & v23);
        }
        unint64_t v101 = v25;
        unsigned int v100 = 0;
        if (v98 >= 0x41 && v97) {
          MEMORY[0x1D25D9CB0](v97, 0x1000C8000313F17);
        }
        if (!a6)
        {
          uint64_t v26 = (char **)llvm::ScalarEvolution::getRangeRef(this, a4, 0, 0);
          llvm::ConstantRange::getUnsignedMax(v26, (uint64_t)&v93);
          unsigned int v28 = v94;
          if (v94 > 0x40)
          {
            unint64_t v76 = (((unint64_t)v94 + 63) >> 3) & 0x3FFFFFF8;
            while (v76)
            {
              unint64_t v77 = *(void *)(v93 - 8 + v76);
              unint64_t v78 = *(void *)(v25 - 8 + v76);
              v76 -= 8;
              if (v77 != v78)
              {
                if (v77 <= v78) {
                  goto LABEL_32;
                }
                goto LABEL_82;
              }
            }
          }
          else if (v93 < v25)
          {
LABEL_32:
            unsigned int v29 = (void **)&v93;
            goto LABEL_33;
          }
          goto LABEL_82;
        }
        uint64_t v52 = (_DWORD *)llvm::ScalarEvolution::getRangeRef(this, a4, 1, 0);
        llvm::ConstantRange::getSignedMax(v52, (uint64_t)&v95);
        unsigned int v28 = v96;
        if (v96 > 0x40)
        {
          uint64_t v59 = *(void *)(v95 + 8 * ((v96 - 1) >> 6)) & (1 << (v96 - 1));
          unint64_t v60 = (unint64_t *)(v25 + 8 * ((v22 - 1) >> 6));
          if (v22 < 0x41) {
            unint64_t v60 = &v101;
          }
          if ((v59 != 0) == ((*v60 >> (v22 - 1)) & 1))
          {
            unint64_t v67 = (((unint64_t)v96 + 63) >> 3) & 0x3FFFFFF8;
            while (v67)
            {
              unint64_t v68 = *(void *)(v95 - 8 + v67);
              unint64_t v69 = *(void *)(v25 - 8 + v67);
              v67 -= 8;
              if (v68 != v69)
              {
                if (v68 <= v69) {
                  goto LABEL_66;
                }
                break;
              }
            }
          }
          else if (v59)
          {
            goto LABEL_66;
          }
        }
        else if (v95 << -(char)v96 >> -(char)v96 < (uint64_t)(v25 << -(char)v96) >> -(char)v96)
        {
LABEL_66:
          unsigned int v29 = (void **)&v95;
          goto LABEL_33;
        }
LABEL_82:
        unsigned int v29 = (void **)&v101;
        unsigned int v28 = v22;
LABEL_33:
        unsigned int v100 = v28;
        if (v28 > 0x40) {
          operator new[]();
        }
        unint64_t __src = *v29;
        if (a6)
        {
          if (v96 >= 0x41 && v95) {
            MEMORY[0x1D25D9CB0](v95, 0x1000C8000313F17);
          }
          unsigned int v30 = v100;
          if (v100 <= 0x40)
          {
            uint64_t v53 = -(uint64_t)v100;
            uint64_t v54 = (uint64_t)((void)__src << v53) >> v53;
            uint64_t v55 = (uint64_t)(v110 << v53) >> v53;
            BOOL v66 = v54 <= v55;
            int v31 = v54 < v55;
            BOOL v32 = !v66;
            goto LABEL_38;
          }
          uint64_t v61 = *((void *)__src + ((v100 - 1) >> 6)) & (1 << (v100 - 1));
          uint64_t v62 = (unint64_t *)(v110 + 8 * ((v111 - 1) >> 6));
          if (v111 < 0x41) {
            uint64_t v62 = &v110;
          }
          if ((v61 != 0) != ((*v62 >> (v111 - 1)) & 1))
          {
            if (v61) {
              p_src = (void **)&v110;
            }
            else {
              p_src = &__src;
            }
            goto LABEL_89;
          }
          unint64_t v70 = (((unint64_t)v100 + 63) >> 3) & 0x3FFFFFF8;
          while (v70)
          {
            unint64_t v71 = *(void *)((char *)__src + v70 - 8);
            unint64_t v72 = *(void *)(v110 - 8 + v70);
            v70 -= 8;
            if (v71 != v72)
            {
              int v33 = v71 > v72;
              goto LABEL_105;
            }
          }
          int v33 = 0;
        }
        else
        {
          if (v94 >= 0x41 && v93) {
            MEMORY[0x1D25D9CB0](v93, 0x1000C8000313F17);
          }
          unsigned int v30 = v100;
          if (v100 <= 0x40)
          {
            int v31 = (unint64_t)__src < v110;
            BOOL v32 = (unint64_t)__src > v110;
LABEL_38:
            int v33 = v32 & ~v31;
            if (v33) {
              p_src = &__src;
            }
            else {
              p_src = (void **)&v110;
            }
LABEL_41:
            uint64_t v35 = (void **)&v110;
            if (v33) {
              uint64_t v35 = &__src;
            }
            unsigned int v36 = *((_DWORD *)v35 + 2);
            if (v36 <= 0x40)
            {
              unint64_t v37 = (char *)*p_src;
              unint64_t __src = *p_src;
              unsigned int v100 = v36;
LABEL_45:
              unint64_t v38 = (unint64_t)&v37[-v110];
              unint64_t v39 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v36;
              if (!v36) {
                unint64_t v39 = 0;
              }
              unsigned int v92 = v36;
              unint64_t v91 = v39 & v38;
              unint64_t v40 = (llvm::ConstantInt *)llvm::ConstantInt::get(***this, (llvm::LLVMContext *)&v91, v27);
              unint64_t Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)this, v40);
              unsigned int v43 = (llvm::ConstantInt *)llvm::ConstantInt::get(***this, (llvm::LLVMContext *)&v104, v42);
              uint64_t v44 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)this, v43);
              uint64_t UDivCeilSCEV = llvm::ScalarEvolution::getUDivCeilSCEV((llvm::ScalarEvolution *)this, Constant, v44);
              if (v92 >= 0x41 && v91) {
                MEMORY[0x1D25D9CB0](v91, 0x1000C8000313F17);
              }
              if (v100 >= 0x41 && __src) {
                MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
              }
              if (v22 >= 0x41 && v25) {
                MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
              }
              if (v103 >= 0x41 && v102) {
                MEMORY[0x1D25D9CB0](v102, 0x1000C8000313F17);
              }
              if (v105 >= 0x41 && v104) {
                MEMORY[0x1D25D9CB0](v104, 0x1000C8000313F17);
              }
              if (v107 >= 0x41 && v106) {
                MEMORY[0x1D25D9CB0](v106, 0x1000C8000313F17);
              }
              if (v109 >= 0x41 && v108) {
                MEMORY[0x1D25D9CB0](v108, 0x1000C8000313F17);
              }
              if (v111 >= 0x41)
              {
                if (v110) {
                  MEMORY[0x1D25D9CB0](v110, 0x1000C8000313F17);
                }
              }
              return UDivCeilSCEV;
            }
LABEL_89:
            llvm::APInt::assignSlowCase((const llvm::APInt *)&__src, (const llvm::APInt *)p_src);
            unsigned int v36 = v100;
            if (v100 > 0x40) {
              operator new[]();
            }
            unint64_t v37 = (char *)__src;
            goto LABEL_45;
          }
          unint64_t v79 = (((unint64_t)v100 + 63) >> 3) & 0x3FFFFFF8;
          while (v79)
          {
            unint64_t v80 = *(void *)((char *)__src + v79 - 8);
            unint64_t v81 = *(void *)(v110 - 8 + v79);
            v79 -= 8;
            if (v80 != v81)
            {
              int v33 = v80 > v81;
              goto LABEL_105;
            }
          }
          int v33 = 0;
        }
LABEL_105:
        if (v33) {
          p_src = &__src;
        }
        else {
          p_src = (void **)&v110;
        }
        if (v30 > 0x40) {
          goto LABEL_89;
        }
        goto LABEL_41;
      }
      uint64_t v56 = *(void *)(v106 + 8 * ((v107 - 1) >> 6)) & (1 << (v107 - 1));
      unsigned int v57 = v109 - 1;
      unint64_t v58 = &v108;
      if (v109 >= 0x41) {
        unint64_t v58 = (unint64_t *)(v108 + 8 * (v57 >> 6));
      }
      if ((v56 != 0) != ((*v58 >> v57) & 1))
      {
        if (v56) {
          int v15 = -1;
        }
        else {
          int v15 = 1;
        }
        goto LABEL_12;
      }
      unint64_t v63 = (((unint64_t)v107 + 63) >> 3) & 0x3FFFFFF8;
      while (v63)
      {
        unint64_t v64 = *(void *)(v106 - 8 + v63);
        unint64_t v65 = *(void *)(v108 - 8 + v63);
        v63 -= 8;
        BOOL v66 = v64 > v65;
        if (v64 != v65)
        {
LABEL_113:
          if (v66) {
            int v15 = 1;
          }
          else {
            int v15 = -1;
          }
          goto LABEL_12;
        }
      }
    }
    else
    {
      if (v107 <= 0x40)
      {
        int v15 = v106 > v108;
        if (v106 < v108) {
          int v15 = -1;
        }
        goto LABEL_12;
      }
      unint64_t v73 = (((unint64_t)v107 + 63) >> 3) & 0x3FFFFFF8;
      while (v73)
      {
        unint64_t v74 = *(void *)(v106 - 8 + v73);
        unint64_t v75 = *(void *)(v108 - 8 + v73);
        v73 -= 8;
        BOOL v66 = v74 > v75;
        if (v74 != v75) {
          goto LABEL_113;
        }
      }
    }
    int v15 = 0;
    goto LABEL_12;
  }
  Type = (llvm::Type *)llvm::SCEV::getType(a3);

  return llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)this, Type, 0, 0);
}

int32x2_t llvm::ScalarEvolution::SCEVCallbackVH::deleted(llvm::ScalarEvolution::SCEVCallbackVH *this)
{
  int v1 = (llvm::Value *)*((void *)this + 3);
  if (v1)
  {
    if (*((unsigned char *)v1 + 16) == 83)
    {
      unsigned int v3 = (int32x2_t *)*((void *)this + 4);
      __int32 v4 = v3[79].i32[0];
      if (v4)
      {
        int32x2_t v5 = v3[77];
        __int32 v6 = v4 - 1;
        LODWORD(v7) = (v4 - 1) & ((v1 >> 4) ^ (v1 >> 9));
        uint64_t v8 = (llvm::Value **)(*(void *)&v5 + 16 * v7);
        BOOL v9 = *v8;
        if (v1 == *v8)
        {
LABEL_10:
          *uint64_t v8 = (llvm::Value *)-8192;
          v3[78] = vadd_s32(v3[78], (int32x2_t)0x1FFFFFFFFLL);
          int v1 = (llvm::Value *)*((void *)this + 3);
        }
        else
        {
          int v10 = 1;
          while (v9 != (llvm::Value *)-4096)
          {
            int v11 = v7 + v10++;
            uint64_t v7 = v11 & v6;
            BOOL v9 = *(llvm::Value **)(*(void *)&v5 + 16 * v7);
            if (v1 == v9)
            {
              uint64_t v8 = (llvm::Value **)(*(void *)&v5 + 16 * v7);
              goto LABEL_10;
            }
          }
        }
      }
    }
  }
  return llvm::ScalarEvolution::eraseValueFromMap(*((llvm::ScalarEvolution **)this + 4), v1);
}

void llvm::ScalarEvolution::SCEVCallbackVH::allUsesReplacedWith(llvm::ScalarEvolution::SCEVCallbackVH *this, llvm::Value *a2)
{
  v50[16] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t v48 = v50;
  uint64_t v49 = 0x1000000000;
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v4;
    do
    {
      ++v5;
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6);
    if ((unint64_t)(v5 - 1) >= 0x10) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v7 = v50;
    do
    {
      *v7++ = *(void *)(v4 + 24);
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4);
    unsigned int v8 = v5;
  }
  else
  {
    unsigned int v8 = 0;
  }
  LODWORD(v49) = v8;
  unsigned int v43 = v47;
  uint64_t v44 = v47;
  uint64_t v45 = 8;
  int v46 = 0;
  if (v8)
  {
    while (1)
    {
      uint64_t v9 = *((void *)v48 + --v8);
      LODWORD(v49) = v8;
      if (v9 != v3) {
        break;
      }
LABEL_24:
      if (!v8) {
        goto LABEL_56;
      }
    }
    int v10 = v44;
    uint64_t v11 = HIDWORD(v45);
    if (v44 == v43)
    {
      if (HIDWORD(v45))
      {
        uint64_t v12 = 0;
        uint64_t v13 = 8 * HIDWORD(v45);
        unint64_t v14 = v44;
        while (*(void *)v14 != v9)
        {
          if (*(void *)v14 == -2) {
            uint64_t v12 = v14;
          }
          v14 += 8;
          v13 -= 8;
          if (!v13)
          {
            if (!v12) {
              goto LABEL_18;
            }
            *(void *)uint64_t v12 = v9;
            --v46;
            goto LABEL_20;
          }
        }
        goto LABEL_23;
      }
LABEL_18:
      unsigned int v15 = v45;
      if (HIDWORD(v45) < v45)
      {
        ++HIDWORD(v45);
        *(void *)&v44[8 * v11] = v9;
        goto LABEL_20;
      }
    }
    else
    {
      unsigned int v15 = v45;
    }
    if (3 * v15 <= 4 * (HIDWORD(v45) - v46))
    {
      if (v15 >= 0x40) {
        v15 *= 2;
      }
      else {
        unsigned int v15 = 128;
      }
    }
    else if (v15 - HIDWORD(v45) >= v15 >> 3)
    {
LABEL_29:
      unsigned int v17 = v15 - 1;
      unsigned int v18 = (v15 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      unint64_t v19 = &v10[8 * v18];
      uint64_t v20 = *(void *)v19;
      if (*(void *)v19 != -1)
      {
        unint64_t v21 = 0;
        int v22 = 1;
        while (v20 != v9)
        {
          if (v21) {
            BOOL v23 = 0;
          }
          else {
            BOOL v23 = v20 == -2;
          }
          if (v23) {
            unint64_t v21 = v19;
          }
          unsigned int v24 = v18 + v22++;
          unsigned int v18 = v24 & v17;
          unint64_t v19 = &v10[8 * (v24 & v17)];
          uint64_t v20 = *(void *)v19;
          if (*(void *)v19 == -1) {
            goto LABEL_41;
          }
        }
        goto LABEL_23;
      }
      unint64_t v21 = 0;
LABEL_41:
      if (v21) {
        unint64_t v25 = v21;
      }
      else {
        unint64_t v25 = v19;
      }
      if (*(void *)v25 == v9) {
        goto LABEL_23;
      }
      if (*(void *)v25 == -2) {
        --v46;
      }
      else {
        ++HIDWORD(v45);
      }
      *(void *)unint64_t v25 = v9;
LABEL_20:
      uint64_t v16 = (int32x2_t *)*((void *)this + 4);
      if (v9)
      {
        if (*(unsigned char *)(v9 + 16) == 83)
        {
          __int32 v26 = v16[79].i32[0];
          if (v26)
          {
            int32x2_t v36 = v16[77];
            __int32 v37 = v26 - 1;
            LODWORD(v38) = (v26 - 1) & ((v9 >> 4) ^ (v9 >> 9));
            unint64_t v39 = (uint64_t *)(*(void *)&v36 + 16 * v38);
            uint64_t v40 = *v39;
            if (v9 == *v39)
            {
LABEL_76:
              *unint64_t v39 = -8192;
              v16[78] = vadd_s32(v16[78], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v16 = (int32x2_t *)*((void *)this + 4);
            }
            else
            {
              int v41 = 1;
              while (v40 != -4096)
              {
                int v42 = v38 + v41++;
                uint64_t v38 = v42 & v37;
                uint64_t v40 = *(void *)(*(void *)&v36 + 16 * v38);
                if (v9 == v40)
                {
                  unint64_t v39 = (uint64_t *)(*(void *)&v36 + 16 * v38);
                  goto LABEL_76;
                }
              }
            }
          }
        }
      }
      llvm::ScalarEvolution::eraseValueFromMap((llvm::ScalarEvolution *)v16, (llvm::Value *)v9);
      sub_1CC13E4CC((uint64_t)&v48, (uint64_t)v48 + 8 * v49, *(void *)(v9 + 8), 0);
LABEL_23:
      unsigned int v8 = v49;
      goto LABEL_24;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v43, v15);
    unsigned int v15 = v45;
    int v10 = v44;
    goto LABEL_29;
  }
LABEL_56:
  if (v3)
  {
    if (*(unsigned char *)(v3 + 16) == 83)
    {
      unsigned int v27 = (int32x2_t *)*((void *)this + 4);
      __int32 v28 = v27[79].i32[0];
      if (v28)
      {
        int32x2_t v29 = v27[77];
        __int32 v30 = v28 - 1;
        LODWORD(v31) = (v28 - 1) & ((v3 >> 4) ^ (v3 >> 9));
        BOOL v32 = (uint64_t *)(*(void *)&v29 + 16 * v31);
        uint64_t v33 = *v32;
        if (v3 == *v32)
        {
LABEL_70:
          *BOOL v32 = -8192;
          v27[78] = vadd_s32(v27[78], (int32x2_t)0x1FFFFFFFFLL);
        }
        else
        {
          int v34 = 1;
          while (v33 != -4096)
          {
            int v35 = v31 + v34++;
            uint64_t v31 = v35 & v30;
            uint64_t v33 = *(void *)(*(void *)&v29 + 16 * v31);
            if (v3 == v33)
            {
              BOOL v32 = (uint64_t *)(*(void *)&v29 + 16 * v31);
              goto LABEL_70;
            }
          }
        }
      }
    }
  }
  llvm::ScalarEvolution::eraseValueFromMap(*((llvm::ScalarEvolution **)this + 4), (llvm::Value *)v3);
  if (v44 != v43) {
    free(v44);
  }
  if (v48 != v50) {
    free(v48);
  }
}

void llvm::ScalarEvolution::ScalarEvolution(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *a1 = a2;
  a1[2] = a3;
  a1[3] = a4;
  a1[4] = a5;
  a1[5] = a6;
  operator new();
}

uint64_t llvm::ScalarEvolution::ScalarEvolution(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = v4;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 116);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = v4;
  LODWORD(v4) = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = v4;
  uint64_t v5 = (void *)(a1 + 160);
  *(void *)(a1 + 128) = v5;
  uint64_t v7 = *(void *)(a2 + 128);
  uint64_t v6 = *(void *)(a2 + 136);
  if (v6 == v7)
  {
    *(void *)(a1 + 136) = v5;
    uint64_t v8 = *(unsigned int *)(a2 + 148);
    if (v8) {
      memmove(v5, *(const void **)(a2 + 136), 8 * v8);
    }
  }
  else
  {
    *(void *)(a1 + 136) = v6;
    *(void *)(a2 + 136) = v7;
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(void *)(a2 + 144) = 8;
  *(_DWORD *)(a2 + 152) = 0;
  uint64_t v9 = (void *)(a1 + 256);
  *(void *)(a1 + 224) = a1 + 256;
  uint64_t v11 = *(void *)(a2 + 224);
  uint64_t v10 = *(void *)(a2 + 232);
  if (v10 == v11)
  {
    *(void *)(a1 + 232) = v9;
    uint64_t v12 = *(unsigned int *)(a2 + 244);
    if (v12) {
      memmove(v9, *(const void **)(a2 + 232), 8 * v12);
    }
  }
  else
  {
    *(void *)(a1 + 232) = v10;
    *(void *)(a2 + 232) = v11;
  }
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(void *)(a2 + 240) = 8;
  *(_DWORD *)(a2 + 248) = 0;
  *(void *)(a1 + 320) = a1 + 352;
  *(void *)(a1 + 328) = a1 + 352;
  *(void *)(a1 + 336) = 8;
  *(_DWORD *)(a1 + 344) = 0;
  uint64_t v13 = (void *)(a1 + 448);
  *(void *)(a1 + 416) = a1 + 448;
  uint64_t v15 = *(void *)(a2 + 416);
  uint64_t v14 = *(void *)(a2 + 424);
  if (v14 == v15)
  {
    *(void *)(a1 + 424) = v13;
    uint64_t v16 = *(unsigned int *)(a2 + 436);
    if (v16) {
      memmove(v13, *(const void **)(a2 + 424), 8 * v16);
    }
  }
  else
  {
    *(void *)(a1 + 424) = v14;
    *(void *)(a2 + 424) = v15;
  }
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(_DWORD *)(a1 + 440) = *(_DWORD *)(a2 + 440);
  *(void *)(a2 + 432) = 8;
  *(_DWORD *)(a2 + 440) = 0;
  *(_WORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(void *)(a2 + 520) = 0;
  *(_DWORD *)(a1 + 528) = *(_DWORD *)(a2 + 528);
  *(_DWORD *)(a2 + 528) = 0;
  int v17 = *(_DWORD *)(a1 + 532);
  *(_DWORD *)(a1 + 532) = *(_DWORD *)(a2 + 532);
  *(_DWORD *)(a2 + 532) = v17;
  int v18 = *(_DWORD *)(a1 + 536);
  *(_DWORD *)(a1 + 536) = *(_DWORD *)(a2 + 536);
  *(_DWORD *)(a2 + 536) = v18;
  *(_DWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a2 + 544) = 0;
  *(_DWORD *)(a1 + 552) = *(_DWORD *)(a2 + 552);
  *(_DWORD *)(a2 + 552) = 0;
  int v19 = *(_DWORD *)(a1 + 556);
  *(_DWORD *)(a1 + 556) = *(_DWORD *)(a2 + 556);
  *(_DWORD *)(a2 + 556) = v19;
  int v20 = *(_DWORD *)(a1 + 560);
  *(_DWORD *)(a1 + 560) = *(_DWORD *)(a2 + 560);
  *(_DWORD *)(a2 + 560) = v20;
  *(_DWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(void *)(a2 + 568) = 0;
  *(_DWORD *)(a1 + 576) = *(_DWORD *)(a2 + 576);
  *(_DWORD *)(a2 + 576) = 0;
  int v21 = *(_DWORD *)(a1 + 580);
  *(_DWORD *)(a1 + 580) = *(_DWORD *)(a2 + 580);
  *(_DWORD *)(a2 + 580) = v21;
  int v22 = *(_DWORD *)(a1 + 584);
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  *(_DWORD *)(a2 + 584) = v22;
  *(_DWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a2 + 592) = 0;
  *(_DWORD *)(a1 + 600) = *(_DWORD *)(a2 + 600);
  *(_DWORD *)(a2 + 600) = 0;
  int v23 = *(_DWORD *)(a1 + 604);
  *(_DWORD *)(a1 + 604) = *(_DWORD *)(a2 + 604);
  *(_DWORD *)(a2 + 604) = v23;
  int v24 = *(_DWORD *)(a1 + 608);
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a2 + 608);
  *(_DWORD *)(a2 + 608) = v24;
  *(_DWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a2 + 616) = 0;
  *(_DWORD *)(a1 + 624) = *(_DWORD *)(a2 + 624);
  *(_DWORD *)(a2 + 624) = 0;
  int v25 = *(_DWORD *)(a1 + 628);
  *(_DWORD *)(a1 + 628) = *(_DWORD *)(a2 + 628);
  *(_DWORD *)(a2 + 628) = v25;
  int v26 = *(_DWORD *)(a1 + 632);
  *(_DWORD *)(a1 + 632) = *(_DWORD *)(a2 + 632);
  *(_DWORD *)(a2 + 632) = v26;
  *(_DWORD *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 640) = 0u;
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  *(void *)(a2 + 640) = 0;
  *(_DWORD *)(a1 + 648) = *(_DWORD *)(a2 + 648);
  *(_DWORD *)(a2 + 648) = 0;
  int v27 = *(_DWORD *)(a1 + 652);
  *(_DWORD *)(a1 + 652) = *(_DWORD *)(a2 + 652);
  *(_DWORD *)(a2 + 652) = v27;
  int v28 = *(_DWORD *)(a1 + 656);
  *(_DWORD *)(a1 + 656) = *(_DWORD *)(a2 + 656);
  *(_DWORD *)(a2 + 656) = v28;
  *(_DWORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(void *)(a1 + 664) = *(void *)(a2 + 664);
  *(void *)(a2 + 664) = 0;
  *(_DWORD *)(a1 + 672) = *(_DWORD *)(a2 + 672);
  *(_DWORD *)(a2 + 672) = 0;
  int v29 = *(_DWORD *)(a1 + 676);
  *(_DWORD *)(a1 + 676) = *(_DWORD *)(a2 + 676);
  *(_DWORD *)(a2 + 676) = v29;
  int v30 = *(_DWORD *)(a1 + 680);
  *(_DWORD *)(a1 + 680) = *(_DWORD *)(a2 + 680);
  *(_DWORD *)(a2 + 680) = v30;
  *(_DWORD *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  *(void *)(a2 + 688) = 0;
  *(_DWORD *)(a1 + 696) = *(_DWORD *)(a2 + 696);
  *(_DWORD *)(a2 + 696) = 0;
  int v31 = *(_DWORD *)(a1 + 700);
  *(_DWORD *)(a1 + 700) = *(_DWORD *)(a2 + 700);
  *(_DWORD *)(a2 + 700) = v31;
  int v32 = *(_DWORD *)(a1 + 704);
  *(_DWORD *)(a1 + 704) = *(_DWORD *)(a2 + 704);
  *(_DWORD *)(a2 + 704) = v32;
  *(_DWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(void *)(a1 + 712) = *(void *)(a2 + 712);
  *(void *)(a2 + 712) = 0;
  *(_DWORD *)(a1 + 720) = *(_DWORD *)(a2 + 720);
  *(_DWORD *)(a2 + 720) = 0;
  int v33 = *(_DWORD *)(a1 + 724);
  *(_DWORD *)(a1 + 724) = *(_DWORD *)(a2 + 724);
  *(_DWORD *)(a2 + 724) = v33;
  int v34 = *(_DWORD *)(a1 + 728);
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
  *(_DWORD *)(a2 + 728) = v34;
  *(_DWORD *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 736) = 0u;
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  *(void *)(a2 + 736) = 0;
  *(_DWORD *)(a1 + 744) = *(_DWORD *)(a2 + 744);
  *(_DWORD *)(a2 + 744) = 0;
  int v35 = *(_DWORD *)(a1 + 748);
  *(_DWORD *)(a1 + 748) = *(_DWORD *)(a2 + 748);
  *(_DWORD *)(a2 + 748) = v35;
  int v36 = *(_DWORD *)(a1 + 752);
  *(_DWORD *)(a1 + 752) = *(_DWORD *)(a2 + 752);
  *(_DWORD *)(a2 + 752) = v36;
  *(_DWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(void *)(a1 + 760) = *(void *)(a2 + 760);
  *(void *)(a2 + 760) = 0;
  *(_DWORD *)(a1 + 768) = *(_DWORD *)(a2 + 768);
  *(_DWORD *)(a2 + 768) = 0;
  int v37 = *(_DWORD *)(a1 + 772);
  *(_DWORD *)(a1 + 772) = *(_DWORD *)(a2 + 772);
  *(_DWORD *)(a2 + 772) = v37;
  int v38 = *(_DWORD *)(a1 + 776);
  *(_DWORD *)(a1 + 776) = *(_DWORD *)(a2 + 776);
  *(_DWORD *)(a2 + 776) = v38;
  *(_DWORD *)(a1 + 800) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(void *)(a1 + 784) = *(void *)(a2 + 784);
  *(void *)(a2 + 784) = 0;
  *(_DWORD *)(a1 + 792) = *(_DWORD *)(a2 + 792);
  *(_DWORD *)(a2 + 792) = 0;
  int v39 = *(_DWORD *)(a1 + 796);
  *(_DWORD *)(a1 + 796) = *(_DWORD *)(a2 + 796);
  *(_DWORD *)(a2 + 796) = v39;
  int v40 = *(_DWORD *)(a1 + 800);
  *(_DWORD *)(a1 + 800) = *(_DWORD *)(a2 + 800);
  *(_DWORD *)(a2 + 800) = v40;
  *(_DWORD *)(a1 + 824) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(void *)(a1 + 808) = *(void *)(a2 + 808);
  *(void *)(a2 + 808) = 0;
  *(_DWORD *)(a1 + 816) = *(_DWORD *)(a2 + 816);
  *(_DWORD *)(a2 + 816) = 0;
  int v41 = *(_DWORD *)(a1 + 820);
  *(_DWORD *)(a1 + 820) = *(_DWORD *)(a2 + 820);
  *(_DWORD *)(a2 + 820) = v41;
  int v42 = *(_DWORD *)(a1 + 824);
  *(_DWORD *)(a1 + 824) = *(_DWORD *)(a2 + 824);
  *(_DWORD *)(a2 + 824) = v42;
  *(void *)(a1 + 832) = *(void *)(a2 + 832);
  *(void *)(a1 + 840) = *(void *)(a2 + 840);
  *(_OWORD *)(a2 + 832) = 0u;
  *(void *)(a1 + 848) = *(void *)(a2 + 848);
  *(void *)(a1 + 856) = *(void *)(a2 + 856);
  *(_OWORD *)(a2 + 848) = 0u;
  sub_1CC056A04(a1 + 864, a2 + 864);
  *(_DWORD *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 960) = 0u;
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  *(void *)(a2 + 960) = 0;
  *(_DWORD *)(a1 + 968) = *(_DWORD *)(a2 + 968);
  *(_DWORD *)(a2 + 968) = 0;
  int v43 = *(_DWORD *)(a1 + 972);
  *(_DWORD *)(a1 + 972) = *(_DWORD *)(a2 + 972);
  *(_DWORD *)(a2 + 972) = v43;
  int v44 = *(_DWORD *)(a1 + 976);
  *(_DWORD *)(a1 + 976) = *(_DWORD *)(a2 + 976);
  *(_DWORD *)(a2 + 976) = v44;
  *(_DWORD *)(a1 + 1000) = 0;
  *(_OWORD *)(a1 + 984) = 0u;
  *(void *)(a1 + 984) = *(void *)(a2 + 984);
  *(void *)(a2 + 984) = 0;
  *(_DWORD *)(a1 + 992) = *(_DWORD *)(a2 + 992);
  *(_DWORD *)(a2 + 992) = 0;
  int v45 = *(_DWORD *)(a1 + 996);
  *(_DWORD *)(a1 + 996) = *(_DWORD *)(a2 + 996);
  *(_DWORD *)(a2 + 996) = v45;
  int v46 = *(_DWORD *)(a1 + 1000);
  *(_DWORD *)(a1 + 1000) = *(_DWORD *)(a2 + 1000);
  *(_DWORD *)(a2 + 1000) = v46;
  *(void *)(a1 + 1008) = a1 + 1040;
  *(void *)(a1 + 1016) = a1 + 1040;
  *(void *)(a1 + 1024) = 16;
  *(_DWORD *)(a1 + 1032) = 0;
  *(void *)(a1 + 1168) = a1 + 1200;
  *(void *)(a1 + 1176) = a1 + 1200;
  *(void *)(a1 + 1184) = 16;
  *(_DWORD *)(a1 + 1192) = 0;
  *(void *)(a1 + 1328) = *(void *)(a2 + 1328);
  *(void *)(a2 + 1328) = 0;
  return a1;
}

void llvm::ScalarEvolution::~ScalarEvolution(llvm::ScalarEvolution *this)
{
  int v2 = (void *)*((void *)this + 166);
  while (v2)
  {
    uint64_t v3 = v2;
    int v2 = (void *)v2[9];
    uint64_t v4 = v3[3];
    if (v4 && v4 != -8192 && v4 != -4096)
    {
      unint64_t v5 = v3[1] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v5 = v3[2];
      uint64_t v6 = (unint64_t *)v3[2];
      if (v6)
      {
        *uint64_t v6 = *v6 & 7 | v5;
      }
      else
      {
        uint64_t v7 = v3[3];
        uint64_t v8 = ***(int32x2_t ****)v7;
        unint64_t v9 = (unint64_t)v8[303];
        if (v9 <= v5)
        {
          uint64_t v10 = v8[305].u32[0];
          if (v9 + 16 * v10 > v5)
          {
            unsigned int v11 = v10 - 1;
            LODWORD(v12) = v11 & ((v7 >> 4) ^ (v7 >> 9));
            uint64_t v13 = (uint64_t *)(v9 + 16 * v12);
            uint64_t v14 = *v13;
            if (v7 == *v13)
            {
LABEL_13:
              *uint64_t v13 = -8192;
              v8[304] = vadd_s32(v8[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v7 = v3[3];
            }
            else
            {
              int v15 = 1;
              while (v14 != -4096)
              {
                int v16 = v12 + v15++;
                uint64_t v12 = v16 & v11;
                uint64_t v14 = *(void *)(v9 + 16 * v12);
                if (v7 == v14)
                {
                  uint64_t v13 = (uint64_t *)(v9 + 16 * v12);
                  goto LABEL_13;
                }
              }
            }
            *(unsigned char *)(v7 + 17) &= ~1u;
          }
        }
      }
    }
  }
  *((void *)this + 166) = 0;
  sub_1CC10E4DC((uint64_t)this + 80);
  sub_1CC10E0D0((void *)this + 13);
  sub_1CBB8977C((_DWORD *)this + 14);
  int v17 = (uint64_t *)((char *)this + 544);
  if (*((void *)this + 69))
  {
    unsigned int v76 = *((_DWORD *)this + 140);
    if (v76 > 4 * *((_DWORD *)this + 138) && v76 >= 0x41)
    {
      sub_1CD4C1B88((char **)this + 68);
    }
    else
    {
      if (v76)
      {
        uint64_t v77 = *v17;
        uint64_t v78 = *v17 + 144 * v76;
        do
        {
          if (*(void *)v77 != -4096)
          {
            if (*(void *)v77 != -8192)
            {
              unint64_t v79 = *(char **)(v77 + 8);
              unsigned int v80 = *(_DWORD *)(v77 + 16);
              if (v80)
              {
                uint64_t v88 = 88 * v80;
                do
                {
                  BOOL v89 = *(void **)&v79[v88 - 56];
                  if (v89 != *(void **)&v79[v88 - 64])
                  {
                    uint64_t v98 = v78;
                    free(v89);
                    uint64_t v78 = v98;
                  }
                  v88 -= 88;
                }
                while (v88);
                unint64_t v79 = *(char **)(v77 + 8);
              }
              if (v79 != (char *)(v77 + 24))
              {
                unsigned int v94 = v79;
                uint64_t v95 = v78;
                free(v94);
                uint64_t v78 = v95;
              }
            }
            *(void *)uint64_t v77 = -4096;
          }
          v77 += 144;
        }
        while (v77 != v78);
      }
      *((void *)this + 69) = 0;
    }
  }
  int v18 = (uint64_t *)((char *)this + 568);
  int v19 = *((_DWORD *)this + 144);
  if (v19 || *((_DWORD *)this + 145))
  {
    unsigned int v81 = *((_DWORD *)this + 146);
    if (v81 > 4 * v19 && v81 >= 0x41)
    {
      sub_1CD4C1B88((char **)this + 71);
    }
    else
    {
      if (v81)
      {
        uint64_t v82 = *v18;
        uint64_t v83 = *v18 + 144 * v81;
        do
        {
          if (*(void *)v82 != -4096)
          {
            if (*(void *)v82 != -8192)
            {
              uint64_t v84 = *(char **)(v82 + 8);
              unsigned int v85 = *(_DWORD *)(v82 + 16);
              if (v85)
              {
                uint64_t v90 = 88 * v85;
                do
                {
                  unint64_t v91 = *(void **)&v84[v90 - 56];
                  if (v91 != *(void **)&v84[v90 - 64])
                  {
                    uint64_t v97 = v83;
                    uint64_t v99 = v84;
                    free(v91);
                    uint64_t v83 = v97;
                    uint64_t v84 = v99;
                  }
                  v90 -= 88;
                }
                while (v90);
                uint64_t v84 = *(char **)(v82 + 8);
              }
              if (v84 != (char *)(v82 + 24))
              {
                uint64_t v96 = v83;
                free(v84);
                uint64_t v83 = v96;
              }
            }
            *(void *)uint64_t v82 = -4096;
          }
          v82 += 144;
        }
        while (v82 != v83);
      }
      *((void *)this + 72) = 0;
    }
  }
  int v20 = (void *)*((void *)this + 147);
  if (v20 != *((void **)this + 146)) {
    free(v20);
  }
  int v21 = (void *)*((void *)this + 127);
  if (v21 != *((void **)this + 126)) {
    free(v21);
  }
  sub_1CC13D698((uint64_t)this + 984);
  MEMORY[0x1D25D9CD0](*((void *)this + 123), 8);
  uint64_t v22 = *((unsigned int *)this + 244);
  uint64_t v23 = *((void *)this + 120);
  if (v22)
  {
    BOOL v66 = (void *)(v23 + 24);
    uint64_t v67 = 56 * v22;
    do
    {
      uint64_t v68 = *(v66 - 3);
      if (v68 != -4096 && v68 != -8192)
      {
        unint64_t v69 = (void *)*(v66 - 2);
        if (v66 != v69) {
          free(v69);
        }
      }
      v66 += 7;
      v67 -= 56;
    }
    while (v67);
    uint64_t v23 = *((void *)this + 120);
  }
  MEMORY[0x1D25D9CD0](v23, 8);
  uint64_t v24 = *((unsigned int *)this + 222);
  if (v24)
  {
    int v25 = (uint64_t *)*((void *)this + 110);
    uint64_t v26 = 8 * v24;
    do
    {
      uint64_t v27 = *v25++;
      MEMORY[0x1D25D9CD0](v27, 8);
      v26 -= 8;
    }
    while (v26);
  }
  int v28 = (uint64_t *)*((void *)this + 116);
  uint64_t v29 = *((unsigned int *)this + 234);
  if (v29)
  {
    uint64_t v92 = 16 * v29;
    do
    {
      uint64_t v93 = *v28;
      v28 += 2;
      MEMORY[0x1D25D9CD0](v93, 8);
      v92 -= 16;
    }
    while (v92);
    int v28 = (uint64_t *)*((void *)this + 116);
  }
  if (v28 != (uint64_t *)((char *)this + 944)) {
    free(v28);
  }
  int v30 = (char *)*((void *)this + 110);
  if (v30 != (char *)this + 896) {
    free(v30);
  }
  free(*((void **)this + 106));
  free(*((void **)this + 104));
  uint64_t v31 = *((unsigned int *)this + 206);
  uint64_t v32 = *((void *)this + 101);
  if (v31)
  {
    uint64_t v60 = 40 * v31;
    uint64_t v61 = v32 + 16;
    do
    {
      if ((*(void *)(v61 - 16) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (*(_DWORD *)(v61 + 16) >= 0x41u)
        {
          uint64_t v86 = *(void *)(v61 + 8);
          if (v86) {
            MEMORY[0x1D25D9CB0](v86, 0x1000C8000313F17);
          }
        }
        if (*(_DWORD *)v61 >= 0x41u)
        {
          uint64_t v62 = *(void *)(v61 - 8);
          if (v62) {
            MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
          }
        }
      }
      v61 += 40;
      v60 -= 40;
    }
    while (v60);
    uint64_t v32 = *((void *)this + 101);
  }
  MEMORY[0x1D25D9CD0](v32, 8);
  uint64_t v33 = *((unsigned int *)this + 200);
  uint64_t v34 = *((void *)this + 98);
  if (v33)
  {
    uint64_t v63 = 40 * v33;
    uint64_t v64 = v34 + 16;
    do
    {
      if ((*(void *)(v64 - 16) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (*(_DWORD *)(v64 + 16) >= 0x41u)
        {
          uint64_t v87 = *(void *)(v64 + 8);
          if (v87) {
            MEMORY[0x1D25D9CB0](v87, 0x1000C8000313F17);
          }
        }
        if (*(_DWORD *)v64 >= 0x41u)
        {
          uint64_t v65 = *(void *)(v64 - 8);
          if (v65) {
            MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
          }
        }
      }
      v64 += 40;
      v63 -= 40;
    }
    while (v63);
    uint64_t v34 = *((void *)this + 98);
  }
  MEMORY[0x1D25D9CD0](v34, 8);
  unsigned int v35 = *((_DWORD *)this + 194);
  uint64_t v36 = *((void *)this + 95);
  if (v35)
  {
    unint64_t v58 = (void **)(v36 + 16);
    uint64_t v59 = 104 * v35;
    do
    {
      if (((unint64_t)*(v58 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v58 != *(v58 - 1)) {
        free(*v58);
      }
      v58 += 13;
      v59 -= 104;
    }
    while (v59);
    uint64_t v36 = *((void *)this + 95);
  }
  MEMORY[0x1D25D9CD0](v36, 8);
  sub_1CC13D5A8((uint64_t)this + 736);
  MEMORY[0x1D25D9CD0](*((void *)this + 92), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 89), 8);
  sub_1CC13D5A8((uint64_t)this + 688);
  MEMORY[0x1D25D9CD0](*((void *)this + 86), 8);
  uint64_t v37 = *((unsigned int *)this + 170);
  uint64_t v38 = *((void *)this + 83);
  if (v37)
  {
    uint64_t v39 = 56 * v37;
    int v40 = (void *)(v38 + 24);
    do
    {
      uint64_t v41 = *(v40 - 3);
      if (v41 != -4096 && v41 != -8192)
      {
        int v42 = (void *)*(v40 - 2);
        if (v40 != v42) {
          free(v42);
        }
      }
      v40 += 7;
      v39 -= 56;
    }
    while (v39);
    uint64_t v38 = *((void *)this + 83);
  }
  MEMORY[0x1D25D9CD0](v38, 8);
  uint64_t v43 = *((unsigned int *)this + 164);
  uint64_t v44 = *((void *)this + 80);
  if (v43)
  {
    uint64_t v45 = 56 * v43;
    int v46 = (void *)(v44 + 24);
    do
    {
      uint64_t v47 = *(v46 - 3);
      if (v47 != -4096 && v47 != -8192)
      {
        uint64_t v48 = (void *)*(v46 - 2);
        if (v46 != v48) {
          free(v48);
        }
      }
      v46 += 7;
      v45 -= 56;
    }
    while (v45);
    uint64_t v44 = *((void *)this + 80);
  }
  MEMORY[0x1D25D9CD0](v44, 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 77), 8);
  sub_1CC13D1A0((unsigned int *)this + 148);
  MEMORY[0x1D25D9CD0](*((void *)this + 74), 8);
  uint64_t v49 = *((unsigned int *)this + 146);
  uint64_t v50 = *((void *)this + 71);
  if (v49)
  {
    uint64_t v70 = 144 * v49;
    unint64_t v71 = (char **)(v50 + 8);
    do
    {
      uint64_t v72 = (uint64_t)*(v71 - 1);
      if (v72 != -4096 && v72 != -8192) {
        unint64_t v71 = sub_1CC136BDC(v71);
      }
      v71 += 18;
      v70 -= 144;
    }
    while (v70);
    uint64_t v50 = *v18;
  }
  MEMORY[0x1D25D9CD0](v50, 8);
  uint64_t v51 = *((unsigned int *)this + 140);
  uint64_t v52 = *((void *)this + 68);
  if (v51)
  {
    uint64_t v73 = 144 * v51;
    unint64_t v74 = (char **)(v52 + 8);
    do
    {
      uint64_t v75 = (uint64_t)*(v74 - 1);
      if (v75 != -4096 && v75 != -8192) {
        unint64_t v74 = sub_1CC136BDC(v74);
      }
      v74 += 18;
      v73 -= 144;
    }
    while (v73);
    uint64_t v52 = *v17;
  }
  MEMORY[0x1D25D9CD0](v52, 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 65), 8);
  uint64_t v53 = (void *)*((void *)this + 53);
  if (v53 != *((void **)this + 52)) {
    free(v53);
  }
  uint64_t v54 = (void *)*((void *)this + 41);
  if (v54 != *((void **)this + 40)) {
    free(v54);
  }
  uint64_t v55 = (void *)*((void *)this + 29);
  if (v55 != *((void **)this + 28)) {
    free(v55);
  }
  uint64_t v56 = (void *)*((void *)this + 17);
  if (v56 != *((void **)this + 16)) {
    free(v56);
  }
  sub_1CC13D2B0((void *)this + 13);
  MEMORY[0x1D25D9CD0](*((void *)this + 13), 8);
  sub_1CC13D614((uint64_t)this + 80);
  MEMORY[0x1D25D9CD0](*((void *)this + 10), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 7), 8);
  uint64_t v57 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v57) {
    MEMORY[0x1D25D9CE0](v57, 0x10D0C40EABAF3F2);
  }
}

uint64_t llvm::ScalarEvolution::getLoopDisposition(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::Loop *a3)
{
  uint64_t v38 = a2;
  uint64_t v6 = (char *)this + 688;
  int v7 = *((_DWORD *)this + 176);
  unsigned int v8 = a2 >> 4;
  if (v7)
  {
    uint64_t v9 = *((void *)this + 86);
    int v10 = v7 - 1;
    unsigned int v11 = v10 & (v8 ^ (a2 >> 9));
    uint64_t v12 = (const llvm::SCEV **)(v9 + 40 * v11);
    uint64_t v13 = *v12;
    if (*v12 == a2) {
      goto LABEL_16;
    }
    uint64_t v14 = 0;
    int v15 = 1;
    while (v13 != (const llvm::SCEV *)-4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v13 == (const llvm::SCEV *)-8192;
      }
      if (v16) {
        uint64_t v14 = v12;
      }
      unsigned int v17 = v11 + v15++;
      unsigned int v11 = v17 & v10;
      uint64_t v12 = (const llvm::SCEV **)(v9 + 40 * v11);
      uint64_t v13 = *v12;
      if (*v12 == a2) {
        goto LABEL_16;
      }
    }
    if (v14) {
      int v18 = v14;
    }
    else {
      int v18 = v12;
    }
  }
  else
  {
    int v18 = 0;
  }
  uint64_t v12 = (const llvm::SCEV **)sub_1CC13E6C8((uint64_t)this + 688, (uint64_t *)&v38, v18);
  *uint64_t v12 = a2;
  v12[1] = (const llvm::SCEV *)(v12 + 3);
  v12[2] = (const llvm::SCEV *)0x200000000;
LABEL_16:
  uint64_t v19 = *((unsigned int *)v12 + 4);
  if (!v19)
  {
LABEL_20:
    if (v19 >= *((_DWORD *)v12 + 5)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v12[1] + v19) = (unint64_t)a3 & 0xFFFFFFFFFFFFFFF9;
    *((_DWORD *)v12 + 4) = v19 + 1;
    uint64_t v22 = llvm::ScalarEvolution::computeLoopDisposition(this, a2, a3);
    int v23 = *((_DWORD *)this + 176);
    if (v23)
    {
      uint64_t v24 = *((void *)this + 86);
      int v25 = v23 - 1;
      unsigned int v26 = (v8 ^ (a2 >> 9)) & v25;
      uint64_t v27 = (const llvm::SCEV **)(v24 + 40 * v26);
      int v28 = *v27;
      if (*v27 == a2) {
        goto LABEL_38;
      }
      uint64_t v29 = 0;
      int v30 = 1;
      while (v28 != (const llvm::SCEV *)-4096)
      {
        if (v29) {
          BOOL v31 = 0;
        }
        else {
          BOOL v31 = v28 == (const llvm::SCEV *)-8192;
        }
        if (v31) {
          uint64_t v29 = v27;
        }
        unsigned int v32 = v26 + v30++;
        unsigned int v26 = v32 & v25;
        uint64_t v27 = (const llvm::SCEV **)(v24 + 40 * v26);
        int v28 = *v27;
        if (*v27 == a2) {
          goto LABEL_38;
        }
      }
      if (v29) {
        uint64_t v34 = v29;
      }
      else {
        uint64_t v34 = v27;
      }
    }
    else
    {
      uint64_t v34 = 0;
    }
    uint64_t v27 = (const llvm::SCEV **)sub_1CC13E6C8((uint64_t)v6, (uint64_t *)&v38, v34);
    int32x2_t *v27 = a2;
    v27[1] = (const llvm::SCEV *)(v27 + 3);
    _OWORD v27[2] = (const llvm::SCEV *)0x200000000;
LABEL_38:
    unsigned int v35 = v27[1];
    uint64_t v36 = 8 * *((unsigned int *)v27 + 4);
    while (v36)
    {
      uint64_t v37 = *(void *)((char *)v35 + v36 - 8);
      v36 -= 8;
      if ((const llvm::Loop *)(v37 & 0xFFFFFFFFFFFFFFF8) == a3)
      {
        *(void *)((char *)v35 + v36) = v37 & 0xFFFFFFFFFFFFFFF9 | (2 * v22);
        return v22;
      }
    }
    return v22;
  }
  uint64_t v20 = 8 * v19;
  int v21 = v12[1];
  while ((const llvm::Loop *)(*(void *)v21 & 0xFFFFFFFFFFFFFFF8) != a3)
  {
    int v21 = (const llvm::SCEV *)((char *)v21 + 8);
    v20 -= 8;
    if (!v20) {
      goto LABEL_20;
    }
  }
  return (*(void *)v21 >> 1) & 3;
}

void sub_1CC128B64(llvm::raw_ostream *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(uint64_t **)(a3 + 8);
  int v7 = *(uint64_t **)(a3 + 16);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    sub_1CC128B64(a1, a2, v8);
  }
  uint64_t v9 = *((void *)a1 + 4);
  if ((unint64_t)(*((void *)a1 + 3) - v9) > 4)
  {
    *(unsigned char *)(v9 + 4) = 32;
    *(_DWORD *)uint64_t v9 = 1886351180;
    *((void *)a1 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(a1, "Loop ", 5uLL);
  }
  llvm::Value::printAsOperand(**(llvm::Value ***)(a3 + 32), a1, 0, 0);
  int v10 = (_WORD *)*((void *)a1 + 4);
  if (*((void *)a1 + 3) - (void)v10 > 1uLL)
  {
    *int v10 = 8250;
    *((void *)a1 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a1, ": ", 2uLL);
  }
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks();
}

uint64_t llvm::ScalarEvolution::computeLoopDisposition(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::Loop *a3)
{
  uint64_t result = 1;
  switch(*((_WORD *)a2 + 12))
  {
    case 1:
    case 2:
    case 3:
    case 0xD:
      unsigned int v11 = (const llvm::SCEV *)*((void *)a2 + 4);
      uint64_t result = llvm::ScalarEvolution::getLoopDisposition(this, v11, a3);
      break;
    case 4:
    case 5:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
      uint64_t v7 = *((void *)a2 + 5);
      if (v7)
      {
        char v8 = 0;
        uint64_t v9 = (const llvm::SCEV **)*((void *)a2 + 4);
        uint64_t v10 = 8 * v7;
        while (1)
        {
          uint64_t result = llvm::ScalarEvolution::getLoopDisposition(this, *v9, a3);
          if (!result) {
            break;
          }
          v8 |= result == 2;
          ++v9;
          v10 -= 8;
          if (!v10)
          {
            if (v8) {
              return 2;
            }
            else {
              return 1;
            }
          }
        }
      }
      break;
    case 6:
      uint64_t result = llvm::ScalarEvolution::getLoopDisposition(this, *((const llvm::SCEV **)a2 + 4), a3);
      if (result)
      {
        int v12 = result;
        int LoopDisposition = llvm::ScalarEvolution::getLoopDisposition(this, *((const llvm::SCEV **)a2 + 5), a3);
        BOOL v14 = LoopDisposition == 1 && v12 == 1;
        if (v14) {
          unsigned int v15 = 1;
        }
        else {
          unsigned int v15 = 2;
        }
        if (LoopDisposition) {
          uint64_t result = v15;
        }
        else {
          uint64_t result = 0;
        }
      }
      break;
    case 7:
      if (*((const llvm::Loop **)a2 + 6) != a3)
      {
        if (a3) {
          llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
        }
        goto LABEL_37;
      }
      uint64_t result = 2;
      break;
    case 0xE:
      uint64_t v16 = *((void *)a2 - 1);
      if (v16) {
        BOOL v17 = *(unsigned __int8 *)(v16 + 16) >= 0x1Cu;
      }
      else {
        BOOL v17 = 0;
      }
      if (v17)
      {
        if (a3)
        {
          uint64_t v18 = *(void *)(v16 + 40);
          uint64_t v20 = *((void *)a3 + 7);
          uint64_t v19 = *((void *)a3 + 8);
          if (v19 == v20)
          {
            uint64_t v21 = *((unsigned int *)a3 + 19);
            uint64_t v22 = (void *)(v19 + 8 * v21);
            if (v21)
            {
              uint64_t v23 = 0;
              uint64_t v24 = 8 * v21;
              while (*(void *)(v19 + v23) != v18)
              {
                v23 += 8;
                if (v24 == v23) {
                  goto LABEL_51;
                }
              }
              uint64_t v22 = (void *)(v19 + v23);
            }
LABEL_51:
            uint64_t v20 = *((void *)a3 + 8);
          }
          else
          {
            uint64_t v25 = *((unsigned int *)a3 + 18);
            unsigned int v26 = v25 - 1;
            unsigned int v27 = (v25 - 1) & ((v18 >> 4) ^ (v18 >> 9));
            uint64_t v22 = (void *)(v19 + 8 * v27);
            uint64_t v28 = *v22;
            if (*v22 == -1)
            {
              uint64_t v29 = 0;
LABEL_57:
              if (v29) {
                uint64_t v22 = v29;
              }
              if (*v22 != v18) {
                uint64_t v22 = (void *)(v19 + 8 * v25);
              }
            }
            else
            {
              uint64_t v29 = 0;
              while (v28 != v18)
              {
                if (v29) {
                  BOOL v30 = 0;
                }
                else {
                  BOOL v30 = v28 == -2;
                }
                if (v30) {
                  uint64_t v29 = v22;
                }
                int v31 = v27 + result;
                LODWORD(result) = result + 1;
                unsigned int v27 = v31 & v26;
                uint64_t v22 = (void *)(v19 + 8 * (v31 & v26));
                uint64_t v28 = *v22;
                if (*v22 == -1) {
                  goto LABEL_57;
                }
              }
            }
          }
          BOOL v14 = v19 == v20;
          uint64_t v32 = 72;
          if (v14) {
            uint64_t v32 = 76;
          }
          uint64_t result = v22 == (void *)(v19 + 8 * *(unsigned int *)((char *)a3 + v32));
        }
        else
        {
LABEL_37:
          uint64_t result = 0;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL llvm::ScalarEvolution::hasComputableLoopEvolution(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::Loop *a3)
{
  return llvm::ScalarEvolution::getLoopDisposition(this, a2, a3) == 2;
}

uint64_t llvm::ScalarEvolution::getBlockDisposition(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::BasicBlock *a3)
{
  uint64_t v38 = a2;
  uint64_t v6 = (char *)this + 736;
  int v7 = *((_DWORD *)this + 188);
  unsigned int v8 = a2 >> 4;
  if (v7)
  {
    uint64_t v9 = *((void *)this + 92);
    int v10 = v7 - 1;
    unsigned int v11 = v10 & (v8 ^ (a2 >> 9));
    int v12 = (uint64_t *)(v9 + 40 * v11);
    uint64_t v13 = (const llvm::SCEV *)*v12;
    if ((const llvm::SCEV *)*v12 == a2) {
      goto LABEL_16;
    }
    BOOL v14 = 0;
    int v15 = 1;
    while (v13 != (const llvm::SCEV *)-4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v13 == (const llvm::SCEV *)-8192;
      }
      if (v16) {
        BOOL v14 = v12;
      }
      unsigned int v17 = v11 + v15++;
      unsigned int v11 = v17 & v10;
      int v12 = (uint64_t *)(v9 + 40 * v11);
      uint64_t v13 = (const llvm::SCEV *)*v12;
      if ((const llvm::SCEV *)*v12 == a2) {
        goto LABEL_16;
      }
    }
    if (v14) {
      uint64_t v18 = v14;
    }
    else {
      uint64_t v18 = v12;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  int v12 = sub_1CC13EB54((uint64_t)this + 736, (uint64_t *)&v38, v18);
  *int v12 = (uint64_t)a2;
  v12[1] = (uint64_t)(v12 + 3);
  v12[2] = 0x200000000;
LABEL_16:
  uint64_t v19 = *((unsigned int *)v12 + 4);
  if (!v19)
  {
LABEL_20:
    if (v19 >= *((_DWORD *)v12 + 5)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(v12[1] + 8 * v19) = (unint64_t)a3 & 0xFFFFFFFFFFFFFFF9;
    *((_DWORD *)v12 + 4) = v19 + 1;
    uint64_t v22 = llvm::ScalarEvolution::computeBlockDisposition(this, a2, a3);
    int v23 = *((_DWORD *)this + 188);
    if (v23)
    {
      uint64_t v24 = *((void *)this + 92);
      int v25 = v23 - 1;
      unsigned int v26 = (v8 ^ (a2 >> 9)) & v25;
      unsigned int v27 = (uint64_t *)(v24 + 40 * v26);
      uint64_t v28 = (const llvm::SCEV *)*v27;
      if ((const llvm::SCEV *)*v27 == a2) {
        goto LABEL_37;
      }
      uint64_t v29 = 0;
      int v30 = 1;
      while (v28 != (const llvm::SCEV *)-4096)
      {
        if (v29) {
          BOOL v31 = 0;
        }
        else {
          BOOL v31 = v28 == (const llvm::SCEV *)-8192;
        }
        if (v31) {
          uint64_t v29 = v27;
        }
        unsigned int v32 = v26 + v30++;
        unsigned int v26 = v32 & v25;
        unsigned int v27 = (uint64_t *)(v24 + 40 * v26);
        uint64_t v28 = (const llvm::SCEV *)*v27;
        if ((const llvm::SCEV *)*v27 == a2) {
          goto LABEL_37;
        }
      }
      if (v29) {
        uint64_t v33 = v29;
      }
      else {
        uint64_t v33 = v27;
      }
    }
    else
    {
      uint64_t v33 = 0;
    }
    unsigned int v27 = sub_1CC13EB54((uint64_t)v6, (uint64_t *)&v38, v33);
    uint64_t *v27 = (uint64_t)a2;
    v27[1] = (uint64_t)(v27 + 3);
    _OWORD v27[2] = 0x200000000;
LABEL_37:
    uint64_t v34 = v27[1];
    uint64_t v35 = 8 * *((unsigned int *)v27 + 4);
    while (v35)
    {
      uint64_t v36 = *(void *)(v34 + v35 - 8);
      v35 -= 8;
      if ((const llvm::BasicBlock *)(v36 & 0xFFFFFFFFFFFFFFF8) == a3)
      {
        *(void *)(v34 + v35) = v36 & 0xFFFFFFFFFFFFFFF9 | (2 * v22);
        return v22;
      }
    }
    return v22;
  }
  uint64_t v20 = 8 * v19;
  uint64_t v21 = (void *)v12[1];
  while ((const llvm::BasicBlock *)(*v21 & 0xFFFFFFFFFFFFFFF8) != a3)
  {
    ++v21;
    v20 -= 8;
    if (!v20) {
      goto LABEL_20;
    }
  }
  return (*v21 >> 1) & 3;
}

uint64_t llvm::ScalarEvolution::computeBlockDisposition(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::BasicBlock *a3)
{
  uint64_t result = 2;
  switch(*((_WORD *)a2 + 12))
  {
    case 1:
    case 2:
    case 3:
    case 0xD:
      uint64_t v13 = (const llvm::SCEV *)*((void *)a2 + 4);
      return llvm::ScalarEvolution::getBlockDisposition(this, v13, a3);
    case 4:
    case 5:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
      uint64_t v6 = *((void *)a2 + 5);
      if (v6)
      {
        int v7 = (const llvm::SCEV **)*((void *)a2 + 4);
        uint64_t v8 = 8 * v6;
        char v9 = 1;
        do
        {
          int BlockDisposition = llvm::ScalarEvolution::getBlockDisposition(this, *v7, a3);
          BOOL v11 = BlockDisposition != 0;
          if (!BlockDisposition) {
            break;
          }
          v9 &= BlockDisposition != 1;
          ++v7;
          v8 -= 8;
        }
        while (v8);
        if ((v9 & 1) == 0)
        {
          unsigned int v12 = 1;
          goto LABEL_13;
        }
      }
      else
      {
        BOOL v11 = 1;
      }
      unsigned int v12 = 2;
LABEL_13:
      if (v11) {
        return v12;
      }
      else {
        return 0;
      }
    case 6:
      BOOL v14 = (const llvm::SCEV *)*((void *)a2 + 5);
      uint64_t result = llvm::ScalarEvolution::getBlockDisposition(this, *((const llvm::SCEV **)a2 + 4), a3);
      if (result)
      {
        int v15 = result;
        int v16 = llvm::ScalarEvolution::getBlockDisposition(this, v14, a3);
        if (v16 == 2 && v15 == 2) {
          unsigned int v18 = 2;
        }
        else {
          unsigned int v18 = 1;
        }
        if (v16) {
          return v18;
        }
        else {
          return 0;
        }
      }
      return result;
    case 7:
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
    case 0xE:
      uint64_t v19 = *((void *)a2 - 1);
      if (v19) {
        BOOL v20 = *(unsigned __int8 *)(v19 + 16) >= 0x1Cu;
      }
      else {
        BOOL v20 = 0;
      }
      if (v20)
      {
        if (*(const llvm::BasicBlock **)(v19 + 40) != a3) {
          llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates();
        }
        return 1;
      }
      return result;
    default:
      return result;
  }
}

uint64_t llvm::ScalarEvolution::hasOperand(llvm::ScalarEvolution *this, const llvm::SCEV *a2, const llvm::SCEV *a3)
{
  v23[8] = *MEMORY[0x1E4F143B8];
  unsigned int v12 = a3;
  unsigned __int8 v13 = 0;
  BOOL v14 = &v12;
  int v15 = &v13;
  int v16 = v18;
  uint64_t v17 = 0x800000000;
  uint64_t v19 = v23;
  BOOL v20 = v23;
  uint64_t v21 = 8;
  int v22 = 0;
  sub_1CC13EF18((uint64_t)&v15, (uint64_t)a2);
  unsigned int v3 = v17;
  while (v3)
  {
    if (*v15) {
      break;
    }
    uint64_t v4 = *((void *)v16 + --v3);
    LODWORD(v17) = v3;
    switch(*(_WORD *)(v4 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        int v10 = (uint64_t *)(v4 + 32);
        goto LABEL_14;
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v5 = *(void *)(v4 + 40);
        if (v5)
        {
          uint64_t v6 = *(uint64_t **)(v4 + 32);
          uint64_t v7 = 8 * v5 - 8;
          do
          {
            uint64_t v8 = *v6++;
            sub_1CC13EF18((uint64_t)&v15, v8);
            if (*v15) {
              BOOL v9 = 1;
            }
            else {
              BOOL v9 = v7 == 0;
            }
            v7 -= 8;
          }
          while (!v9);
        }
        goto LABEL_15;
      case 6:
        sub_1CC13EF18((uint64_t)&v15, *(void *)(v4 + 32));
        int v10 = (uint64_t *)(v4 + 40);
LABEL_14:
        sub_1CC13EF18((uint64_t)&v15, *v10);
LABEL_15:
        unsigned int v3 = v17;
        break;
      default:
        break;
    }
  }
  if (v20 != v19) {
    free(v20);
  }
  if (v16 != v18) {
    free(v16);
  }
  return v13;
}

uint64_t *sub_1CC129FE4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return (uint64_t *)(a1 + 72 * a2);
  }
  unsigned int v3 = a2 - 1;
  unsigned int v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  uint64_t v5 = (uint64_t *)(a1 + 72 * v4);
  uint64_t v6 = *v5;
  if (*v5 != a3)
  {
    int v7 = 1;
    while (v6 != -4096)
    {
      unsigned int v8 = v4 + v7++;
      unsigned int v4 = v8 & v3;
      uint64_t v5 = (uint64_t *)(a1 + 72 * (v8 & v3));
      uint64_t v6 = *v5;
      if (*v5 == a3) {
        return v5;
      }
    }
    return (uint64_t *)(a1 + 72 * a2);
  }
  return v5;
}

void llvm::ScalarEvolution::forgetMemoizedResultsImpl(int32x2_t *this, const llvm::SCEV *a2)
{
  __int32 v4 = this[88].i32[0];
  unsigned int v5 = a2 >> 4;
  if (v4)
  {
    int32x2_t v6 = this[86];
    __int32 v7 = v4 - 1;
    unsigned int v8 = v7 & (v5 ^ (a2 >> 9));
    BOOL v9 = (const llvm::SCEV **)(*(void *)&v6 + 40 * v8);
    int v10 = *v9;
    if (*v9 == a2)
    {
LABEL_6:
      unsigned __int8 v13 = (const llvm::SCEV **)v9[1];
      if (v13 != v9 + 3) {
        free(v13);
      }
      *BOOL v9 = (const llvm::SCEV *)-8192;
      this[87] = vadd_s32(this[87], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v11 = 1;
      while (v10 != (const llvm::SCEV *)-4096)
      {
        unsigned int v12 = v8 + v11++;
        unsigned int v8 = v12 & v7;
        BOOL v9 = (const llvm::SCEV **)(*(void *)&v6 + 40 * v8);
        int v10 = *v9;
        if (*v9 == a2) {
          goto LABEL_6;
        }
      }
    }
  }
  __int32 v14 = this[94].i32[0];
  if (v14)
  {
    int32x2_t v15 = this[92];
    __int32 v16 = v14 - 1;
    unsigned int v17 = v16 & (v5 ^ (a2 >> 9));
    unsigned int v18 = (const llvm::SCEV **)(*(void *)&v15 + 40 * v17);
    uint64_t v19 = *v18;
    if (*v18 == a2)
    {
LABEL_14:
      int v22 = (const llvm::SCEV **)v18[1];
      if (v22 != v18 + 3) {
        free(v22);
      }
      *unsigned int v18 = (const llvm::SCEV *)-8192;
      this[93] = vadd_s32(this[93], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v20 = 1;
      while (v19 != (const llvm::SCEV *)-4096)
      {
        unsigned int v21 = v17 + v20++;
        unsigned int v17 = v21 & v16;
        unsigned int v18 = (const llvm::SCEV **)(*(void *)&v15 + 40 * v17);
        uint64_t v19 = *v18;
        if (*v18 == a2) {
          goto LABEL_14;
        }
      }
    }
  }
  __int32 v23 = this[100].i32[0];
  if (v23)
  {
    int32x2_t v24 = this[98];
    __int32 v25 = v23 - 1;
    unsigned int v26 = v25 & (v5 ^ (a2 >> 9));
    uint64_t v27 = *(void *)&v24 + 40 * v26;
    uint64_t v28 = *(const llvm::SCEV **)v27;
    if (*(const llvm::SCEV **)v27 == a2)
    {
LABEL_22:
      if (*(_DWORD *)(v27 + 32) >= 0x41u)
      {
        uint64_t v171 = *(void *)(v27 + 24);
        if (v171) {
          MEMORY[0x1D25D9CB0](v171, 0x1000C8000313F17);
        }
      }
      if (*(_DWORD *)(v27 + 16) >= 0x41u)
      {
        uint64_t v172 = *(void *)(v27 + 8);
        if (v172) {
          MEMORY[0x1D25D9CB0](v172, 0x1000C8000313F17);
        }
      }
      *(void *)uint64_t v27 = -8192;
      this[99] = vadd_s32(this[99], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v29 = 1;
      while (v28 != (const llvm::SCEV *)-4096)
      {
        unsigned int v30 = v26 + v29++;
        unsigned int v26 = v30 & v25;
        uint64_t v27 = *(void *)&v24 + 40 * v26;
        uint64_t v28 = *(const llvm::SCEV **)v27;
        if (*(const llvm::SCEV **)v27 == a2) {
          goto LABEL_22;
        }
      }
    }
  }
  __int32 v31 = this[103].i32[0];
  if (v31)
  {
    int32x2_t v32 = this[101];
    __int32 v33 = v31 - 1;
    unsigned int v34 = v33 & (v5 ^ (a2 >> 9));
    uint64_t v35 = *(void *)&v32 + 40 * v34;
    uint64_t v36 = *(const llvm::SCEV **)v35;
    if (*(const llvm::SCEV **)v35 == a2)
    {
LABEL_30:
      if (*(_DWORD *)(v35 + 32) >= 0x41u)
      {
        uint64_t v173 = *(void *)(v35 + 24);
        if (v173) {
          MEMORY[0x1D25D9CB0](v173, 0x1000C8000313F17);
        }
      }
      if (*(_DWORD *)(v35 + 16) >= 0x41u)
      {
        uint64_t v174 = *(void *)(v35 + 8);
        if (v174) {
          MEMORY[0x1D25D9CB0](v174, 0x1000C8000313F17);
        }
      }
      *(void *)uint64_t v35 = -8192;
      this[102] = vadd_s32(this[102], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v37 = 1;
      while (v36 != (const llvm::SCEV *)-4096)
      {
        unsigned int v38 = v34 + v37++;
        unsigned int v34 = v38 & v33;
        uint64_t v35 = *(void *)&v32 + 40 * v34;
        uint64_t v36 = *(const llvm::SCEV **)v35;
        if (*(const llvm::SCEV **)v35 == a2) {
          goto LABEL_30;
        }
      }
    }
  }
  __int32 v39 = this[9].i32[0];
  if (v39)
  {
    int32x2_t v54 = this[7];
    __int32 v55 = v39 - 1;
    LODWORD(v56) = (v39 - 1) & (v5 ^ (a2 >> 9));
    uint64_t v57 = (const llvm::SCEV **)(*(void *)&v54 + 16 * v56);
    unint64_t v58 = *v57;
    if (*v57 == a2)
    {
LABEL_54:
      *uint64_t v57 = (const llvm::SCEV *)-8192;
      this[8] = vadd_s32(this[8], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v59 = 1;
      while (v58 != (const llvm::SCEV *)-4096)
      {
        int v60 = v56 + v59++;
        uint64_t v56 = v60 & v55;
        unint64_t v58 = *(const llvm::SCEV **)(*(void *)&v54 + 16 * v56);
        if (v58 == a2)
        {
          uint64_t v57 = (const llvm::SCEV **)(*(void *)&v54 + 16 * v56);
          goto LABEL_54;
        }
      }
    }
  }
  __int32 v40 = this[67].i32[0];
  if (v40)
  {
    int32x2_t v41 = this[65];
    __int32 v42 = v40 - 1;
    LODWORD(v43) = (v40 - 1) & (v5 ^ (a2 >> 9));
    uint64_t v44 = (const llvm::SCEV **)(*(void *)&v41 + 16 * v43);
    uint64_t v45 = *v44;
    if (*v44 == a2)
    {
LABEL_40:
      *uint64_t v44 = (const llvm::SCEV *)-8192;
      this[66] = vadd_s32(this[66], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v46 = 1;
      while (v45 != (const llvm::SCEV *)-4096)
      {
        int v47 = v43 + v46++;
        uint64_t v43 = v47 & v42;
        uint64_t v45 = *(const llvm::SCEV **)(*(void *)&v41 + 16 * v43);
        if (v45 == a2)
        {
          uint64_t v44 = (const llvm::SCEV **)(*(void *)&v41 + 16 * v43);
          goto LABEL_40;
        }
      }
    }
  }
  if (a2 && *((_WORD *)a2 + 12) == 7)
  {
    int32x2_t v48 = this[127];
    int32x2_t v49 = this[126];
    if (*(void *)&v48 == *(void *)&v49)
    {
      uint64_t v50 = this[128].u32[1];
      uint64_t v51 = (const llvm::SCEV **)(*(void *)&v48 + 8 * v50);
      if (v50)
      {
        uint64_t v52 = 0;
        uint64_t v53 = 8 * v50;
        while (*(const llvm::SCEV **)(*(void *)&v48 + v52) != a2)
        {
          v52 += 8;
          if (v53 == v52) {
            goto LABEL_67;
          }
        }
        uint64_t v51 = (const llvm::SCEV **)(*(void *)&v48 + v52);
      }
LABEL_67:
      int32x2_t v49 = this[127];
    }
    else
    {
      uint64_t v61 = this[128].u32[0];
      int v62 = v61 - 1;
      unsigned int v63 = (v61 - 1) & (v5 ^ (a2 >> 9));
      uint64_t v51 = (const llvm::SCEV **)(*(void *)&v48 + 8 * v63);
      uint64_t v64 = *v51;
      if (*v51 == (const llvm::SCEV *)-1)
      {
        uint64_t v65 = 0;
LABEL_212:
        if (v65) {
          uint64_t v51 = v65;
        }
        if (*v51 != a2) {
          uint64_t v51 = (const llvm::SCEV **)(*(void *)&v48 + 8 * v61);
        }
      }
      else
      {
        uint64_t v65 = 0;
        int v66 = 1;
        while (v64 != a2)
        {
          if (v65) {
            BOOL v67 = 0;
          }
          else {
            BOOL v67 = v64 == (const llvm::SCEV *)-2;
          }
          if (v67) {
            uint64_t v65 = v51;
          }
          unsigned int v68 = v63 + v66++;
          unsigned int v63 = v68 & v62;
          uint64_t v51 = (const llvm::SCEV **)(*(void *)&v48 + 8 * (v68 & v62));
          uint64_t v64 = *v51;
          if (*v51 == (const llvm::SCEV *)-1) {
            goto LABEL_212;
          }
        }
      }
    }
    BOOL v67 = *(void *)&v48 == *(void *)&v49;
    uint64_t v69 = 256;
    if (v67) {
      uint64_t v69 = 257;
    }
    if (v51 != (const llvm::SCEV **)(*(void *)&v48 + 8 * this->u32[v69]))
    {
      char *v51 = (const llvm::SCEV *)-2;
      ++this[129].i32[0];
    }
    int32x2_t v70 = this[147];
    int32x2_t v71 = this[146];
    if (*(void *)&v70 == *(void *)&v71)
    {
      uint64_t v72 = this[148].u32[1];
      uint64_t v73 = (const llvm::SCEV **)(*(void *)&v70 + 8 * v72);
      if (v72)
      {
        uint64_t v74 = 0;
        uint64_t v75 = 8 * v72;
        while (*(const llvm::SCEV **)(*(void *)&v70 + v74) != a2)
        {
          v74 += 8;
          if (v75 == v74) {
            goto LABEL_90;
          }
        }
        uint64_t v73 = (const llvm::SCEV **)(*(void *)&v70 + v74);
      }
LABEL_90:
      int32x2_t v71 = this[147];
    }
    else
    {
      uint64_t v76 = this[148].u32[0];
      int v77 = v76 - 1;
      unsigned int v78 = (v76 - 1) & (v5 ^ (a2 >> 9));
      uint64_t v73 = (const llvm::SCEV **)(*(void *)&v70 + 8 * v78);
      unint64_t v79 = *v73;
      if (*v73 == (const llvm::SCEV *)-1)
      {
        unsigned int v80 = 0;
LABEL_217:
        if (v80) {
          uint64_t v73 = v80;
        }
        if (*v73 != a2) {
          uint64_t v73 = (const llvm::SCEV **)(*(void *)&v70 + 8 * v76);
        }
      }
      else
      {
        unsigned int v80 = 0;
        int v81 = 1;
        while (v79 != a2)
        {
          if (v80) {
            BOOL v82 = 0;
          }
          else {
            BOOL v82 = v79 == (const llvm::SCEV *)-2;
          }
          if (v82) {
            unsigned int v80 = v73;
          }
          unsigned int v83 = v78 + v81++;
          unsigned int v78 = v83 & v77;
          uint64_t v73 = (const llvm::SCEV **)(*(void *)&v70 + 8 * (v83 & v77));
          unint64_t v79 = *v73;
          if (*v73 == (const llvm::SCEV *)-1) {
            goto LABEL_217;
          }
        }
      }
    }
    BOOL v67 = *(void *)&v70 == *(void *)&v71;
    uint64_t v84 = 296;
    if (v67) {
      uint64_t v84 = 297;
    }
    if (v73 != (const llvm::SCEV **)(*(void *)&v70 + 8 * this->u32[v84]))
    {
      llvm::ConstantInt *v73 = (const llvm::SCEV *)-2;
      ++this[149].i32[0];
    }
  }
  uint64_t v85 = (uint64_t)this[10];
  unsigned int v86 = this[12].u32[0];
  uint64_t v87 = sub_1CC0F4460(v85, v86, (uint64_t)a2);
  if ((uint64_t *)(v85 + 96 * v86) == v87) {
    goto LABEL_133;
  }
  uint64_t v88 = v87;
  BOOL v89 = (uint64_t *)v87[6];
  uint64_t v90 = *((unsigned int *)v88 + 14);
  if (!v90) {
    goto LABEL_128;
  }
  unint64_t v91 = &v89[v90];
  do
  {
    int32x2_t v92 = this[13];
    unsigned __int32 v93 = this[15].u32[0];
    if (v93)
    {
      unsigned __int32 v94 = v93 - 1;
      unsigned int v95 = ((*v89 >> 4) ^ (*v89 >> 9)) & (v93 - 1);
      uint64_t v96 = (void *)(*(void *)&v92 + 48 * v95);
      uint64_t v97 = v96[3];
      if (*v89 == v97) {
        goto LABEL_105;
      }
      int v98 = 1;
      while (v97 != -4096)
      {
        unsigned int v99 = v95 + v98++;
        unsigned int v95 = v99 & v94;
        uint64_t v96 = (void *)(*(void *)&v92 + 48 * (v99 & v94));
        uint64_t v97 = v96[3];
        if (*v89 == v97) {
          goto LABEL_105;
        }
      }
    }
    uint64_t v96 = (void *)(*(void *)&v92 + 48 * v93);
LABEL_105:
    if ((void *)(*(void *)&v92 + 48 * v93) != v96)
    {
      v177[0] = 0;
      uint64_t v100 = v96[3];
      if (v100 != -8192)
      {
        if (v100 != -4096 && v100 != 0)
        {
          unint64_t v102 = v96[1] & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v102 = v96[2];
          unsigned int v103 = (unint64_t *)v96[2];
          if (v103)
          {
            *unsigned int v103 = *v103 & 7 | v102;
          }
          else
          {
            uint64_t v104 = v96[3];
            unsigned int v105 = ***(int32x2_t ****)v104;
            unint64_t v106 = (unint64_t)v105[303];
            if (v106 <= v102)
            {
              uint64_t v107 = v105[305].u32[0];
              if (v106 + 16 * v107 > v102)
              {
                unsigned int v108 = v107 - 1;
                LODWORD(v109) = v108 & ((v104 >> 4) ^ (v104 >> 9));
                unint64_t v110 = (uint64_t *)(v106 + 16 * v109);
                uint64_t v111 = *v110;
                if (v104 == *v110)
                {
LABEL_124:
                  *unint64_t v110 = -8192;
                  v105[304] = vadd_s32(v105[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v104 = v96[3];
                }
                else
                {
                  int v112 = 1;
                  while (v111 != -4096)
                  {
                    int v113 = v109 + v112++;
                    uint64_t v109 = v113 & v108;
                    uint64_t v111 = *(void *)(v106 + 16 * v109);
                    if (v104 == v111)
                    {
                      unint64_t v110 = (uint64_t *)(v106 + 16 * v109);
                      goto LABEL_124;
                    }
                  }
                }
                *(unsigned char *)(v104 + 17) &= ~1u;
              }
            }
          }
        }
        void v96[3] = -8192;
      }
      v96[4] = v177[0];
      this[14] = vadd_s32(this[14], (int32x2_t)0x1FFFFFFFFLL);
    }
    ++v89;
  }
  while (v89 != v91);
  BOOL v89 = (uint64_t *)v88[6];
LABEL_128:
  if (v89 != v88 + 8) {
    free(v89);
  }
  if ((v88[1] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v88[2], 8);
  }
  *uint64_t v88 = -8192;
  this[11] = vadd_s32(this[11], (int32x2_t)0x1FFFFFFFFLL);
LABEL_133:
  uint64_t v114 = (uint64_t)this[80];
  unsigned int v115 = this[82].u32[0];
  uint64_t v116 = sub_1CC12AD74(v114, v115, (uint64_t)a2);
  if ((uint64_t *)(v114 + 56 * v115) == v116) {
    goto LABEL_160;
  }
  unint64_t v117 = v116;
  unint64_t v118 = (uint64_t *)v116[1];
  uint64_t v119 = *((unsigned int *)v116 + 4);
  if (!v119) {
    goto LABEL_157;
  }
  unsigned int v120 = &v118[2 * v119];
  while (2)
  {
    uint64_t v121 = v118[1];
    if (!v121 || *(_WORD *)(v121 + 24))
    {
      __int32 v122 = this[85].i32[0];
      if (!v122)
      {
        unsigned int v132 = 0;
        goto LABEL_152;
      }
      int32x2_t v123 = this[83];
      __int32 v124 = v122 - 1;
      unsigned int v125 = v124 & ((v121 >> 4) ^ (v121 >> 9));
      unsigned int v126 = (void *)(*(void *)&v123 + 56 * v125);
      uint64_t v127 = *v126;
      if (v121 != *v126)
      {
        BOOL v128 = 0;
        int v129 = 1;
        while (v127 != -4096)
        {
          if (v128) {
            BOOL v130 = 0;
          }
          else {
            BOOL v130 = v127 == -8192;
          }
          if (v130) {
            BOOL v128 = v126;
          }
          unsigned int v131 = v125 + v129++;
          unsigned int v125 = v131 & v124;
          unsigned int v126 = (void *)(*(void *)&v123 + 56 * v125);
          uint64_t v127 = *v126;
          if (v121 == *v126) {
            goto LABEL_153;
          }
        }
        if (v128) {
          unsigned int v132 = v128;
        }
        else {
          unsigned int v132 = v126;
        }
LABEL_152:
        unsigned int v126 = sub_1CC13DF90((uint64_t)&this[83], v118 + 1, v132);
        *unsigned int v126 = v118[1];
        v126[1] = v126 + 3;
        v126[2] = 0x200000000;
      }
LABEL_153:
      sub_1CC12ADD8((uint64_t)(v126 + 1), *v118, (uint64_t)a2);
    }
    v118 += 2;
    if (v118 != v120) {
      continue;
    }
    break;
  }
  unint64_t v118 = (uint64_t *)v117[1];
LABEL_157:
  if (v118 != v117 + 3) {
    free(v118);
  }
  *unint64_t v117 = -8192;
  this[81] = vadd_s32(this[81], (int32x2_t)0x1FFFFFFFFLL);
LABEL_160:
  uint64_t v133 = (uint64_t)this[83];
  unsigned int v134 = this[85].u32[0];
  unsigned int v135 = sub_1CC12AD74(v133, v134, (uint64_t)a2);
  if ((uint64_t *)(v133 + 56 * v134) == v135) {
    goto LABEL_184;
  }
  uint64_t v136 = v135;
  uint64_t v137 = (uint64_t *)v135[1];
  uint64_t v138 = *((unsigned int *)v135 + 4);
  if (!v138) {
    goto LABEL_181;
  }
  int v139 = &v137[2 * v138];
  while (2)
  {
    unsigned int v140 = v137 + 1;
    __int32 v141 = this[82].i32[0];
    if (!v141)
    {
      unsigned int v151 = 0;
      goto LABEL_177;
    }
    int32x2_t v142 = this[80];
    __int32 v143 = v141 - 1;
    unsigned int v144 = ((*v140 >> 4) ^ (*v140 >> 9)) & v143;
    unsigned int v145 = (void *)(*(void *)&v142 + 56 * v144);
    uint64_t v146 = *v145;
    if (*v140 != *v145)
    {
      uint64_t v147 = 0;
      int v148 = 1;
      while (v146 != -4096)
      {
        if (v147) {
          BOOL v149 = 0;
        }
        else {
          BOOL v149 = v146 == -8192;
        }
        if (v149) {
          uint64_t v147 = v145;
        }
        unsigned int v150 = v144 + v148++;
        unsigned int v144 = v150 & v143;
        unsigned int v145 = (void *)(*(void *)&v142 + 56 * v144);
        uint64_t v146 = *v145;
        if (*v140 == *v145) {
          goto LABEL_178;
        }
      }
      if (v147) {
        unsigned int v151 = v147;
      }
      else {
        unsigned int v151 = v145;
      }
LABEL_177:
      unsigned int v145 = sub_1CC13DF90((uint64_t)&this[80], v137 + 1, v151);
      *unsigned int v145 = *v140;
      v145[1] = v145 + 3;
      v145[2] = 0x200000000;
    }
LABEL_178:
    uint64_t v152 = *v137;
    v137 += 2;
    sub_1CC12ADD8((uint64_t)(v145 + 1), v152, (uint64_t)a2);
    if (v137 != v139) {
      continue;
    }
    break;
  }
  uint64_t v137 = (uint64_t *)v136[1];
LABEL_181:
  if (v137 != v136 + 3) {
    free(v137);
  }
  *uint64_t v136 = -8192;
  this[84] = vadd_s32(this[84], (int32x2_t)0x1FFFFFFFFLL);
LABEL_184:
  uint64_t v153 = (uint64_t)this[74];
  unsigned int v154 = this[76].u32[0];
  unint64_t v155 = sub_1CC129FE4(v153, v154, (uint64_t)a2);
  if ((uint64_t *)(v153 + 72 * v154) != v155)
  {
    unint64_t v156 = v155;
    unsigned int v157 = v177;
    uint64_t v158 = (const void *)v156[2];
    if (v158 == (const void *)v156[1])
    {
      uint64_t v175 = v177;
      uint64_t v159 = (const void *)v156[2];
    }
    else
    {
      uint64_t v170 = *((unsigned int *)v156 + 6);
      unsigned int v157 = malloc_type_malloc(8 * v170, 0x4065EBACuLL);
      if (!v157 && (v170 || (unsigned int v157 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      }
      uint64_t v175 = v157;
      uint64_t v159 = (const void *)v156[1];
      uint64_t v158 = (const void *)v156[2];
    }
    unsigned int v161 = *((_DWORD *)v156 + 6);
    LODWORD(v160) = *((_DWORD *)v156 + 7);
    unsigned int v176 = v161;
    if (v158 == v159) {
      unsigned int v162 = *((_DWORD *)v156 + 7);
    }
    else {
      unsigned int v162 = *((_DWORD *)v156 + 6);
    }
    if (v162)
    {
      memmove(v157, v158, 8 * v162);
      LODWORD(v160) = *((_DWORD *)v156 + 7);
      unsigned int v157 = v175;
      unsigned int v161 = v176;
    }
    if (v157 == v177) {
      uint64_t v160 = v160;
    }
    else {
      uint64_t v160 = v161;
    }
    unsigned int v163 = v157;
    if (v160)
    {
      uint64_t v164 = 8 * v160;
      unsigned int v163 = v157;
      while (*v163 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v163;
        v164 -= 8;
        if (!v164) {
          goto LABEL_206;
        }
      }
    }
    uint64_t v165 = &v157[v160];
    if (v163 != v165)
    {
      unint64_t v166 = *v163;
LABEL_202:
      llvm::ScalarEvolution::forgetBackedgeTakenCounts((llvm::ScalarEvolution *)this, v166 & 0xFFFFFFFFFFFFFFF8, (v166 >> 2) & 1);
      unint64_t v167 = v163 + 1;
      while (v167 != v165)
      {
        unint64_t v168 = *v167++;
        unint64_t v166 = v168;
        if (v168 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unsigned int v163 = v167 - 1;
          goto LABEL_202;
        }
      }
    }
LABEL_206:
    unsigned int v169 = (void *)v156[2];
    if (v169 != (void *)v156[1]) {
      free(v169);
    }
    *unint64_t v156 = -8192;
    this[75] = vadd_s32(this[75], (int32x2_t)0x1FFFFFFFFLL);
    if (v175 != v177) {
      free(v175);
    }
  }
}

uint64_t *sub_1CC12AD74(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return (uint64_t *)(a1 + 56 * a2);
  }
  unsigned int v3 = a2 - 1;
  unsigned int v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  unsigned int v5 = (uint64_t *)(a1 + 56 * v4);
  uint64_t v6 = *v5;
  if (*v5 != a3)
  {
    int v7 = 1;
    while (v6 != -4096)
    {
      unsigned int v8 = v4 + v7++;
      unsigned int v4 = v8 & v3;
      unsigned int v5 = (uint64_t *)(a1 + 56 * (v8 & v3));
      uint64_t v6 = *v5;
      if (*v5 == a3) {
        return v5;
      }
    }
    return (uint64_t *)(a1 + 56 * a2);
  }
  return v5;
}

uint64_t sub_1CC12ADD8(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(char **)result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4)
  {
    uint64_t v5 = 16 * v4;
    uint64_t v6 = *(char **)result;
    while (*(void *)v6 != a2 || *((void *)v6 + 1) != a3)
    {
      v6 += 16;
      v5 -= 16;
      if (!v5)
      {
        uint64_t v6 = (char *)(*(void *)result + 16 * v4);
        break;
      }
    }
  }
  else
  {
    uint64_t v6 = *(char **)result;
  }
  uint64_t v8 = (v6 - v3) >> 4;
  if (v8 != v4 && v6 + 16 != (char *)(*(void *)result + 16 * v4))
  {
    uint64_t v10 = 16 * v4 - 16 * v8 - 16;
    int v11 = &v3[16 * v8 + 24];
    do
    {
      uint64_t v12 = *((void *)v11 - 1);
      if (v12 != a2 || *(void *)v11 != a3)
      {
        *(void *)uint64_t v6 = v12;
        *((void *)v6 + 1) = *(void *)v11;
        v6 += 16;
      }
      v11 += 16;
      v10 -= 16;
    }
    while (v10);
  }
  *(_DWORD *)(result + 8) = (unint64_t)(v6 - v3) >> 4;
  return result;
}

void llvm::ScalarEvolution::getReachableBlocks(uint64_t a1, llvm::SmallPtrSetImplBase *this, uint64_t a3)
{
  v74[6] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = v74;
  uint64_t v5 = *(void *)(a3 + 80);
  int32x2_t v71 = v74;
  unsigned int v73 = 6;
  if (v5) {
    uint64_t v6 = v5 - 24;
  }
  else {
    uint64_t v6 = 0;
  }
  v74[0] = v6;
  unsigned int v7 = 1;
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = *((void *)v71 + v7 - 1);
        unsigned int v72 = v7 - 1;
        uint64_t v9 = *((void *)this + 1);
        uint64_t v10 = *((unsigned int *)this + 5);
        if (v9 == *(void *)this)
        {
          if (v10)
          {
            int v11 = 0;
            uint64_t v12 = 8 * v10;
            unsigned __int8 v13 = (void *)*((void *)this + 1);
            while (*v13 != v8)
            {
              if (*v13 == -2) {
                int v11 = v13;
              }
              ++v13;
              v12 -= 8;
              if (!v12)
              {
                if (!v11) {
                  goto LABEL_13;
                }
                void *v11 = v8;
                --*((_DWORD *)this + 6);
                goto LABEL_37;
              }
            }
            goto LABEL_118;
          }
LABEL_13:
          unsigned int v14 = *((_DWORD *)this + 4);
          if (v10 < v14)
          {
            *((_DWORD *)this + 5) = v10 + 1;
            *(void *)(v9 + 8 * v10) = v8;
            goto LABEL_37;
          }
        }
        else
        {
          unsigned int v14 = *((_DWORD *)this + 4);
        }
        if (3 * v14 <= 4 * ((int)v10 - *((_DWORD *)this + 6)))
        {
          if (v14 >= 0x40) {
            v14 *= 2;
          }
          else {
            unsigned int v14 = 128;
          }
LABEL_85:
          llvm::SmallPtrSetImplBase::Grow(this, v14);
          unsigned int v14 = *((_DWORD *)this + 4);
          uint64_t v9 = *((void *)this + 1);
          goto LABEL_18;
        }
        if (v14 - v10 < v14 >> 3) {
          goto LABEL_85;
        }
LABEL_18:
        unsigned int v15 = v14 - 1;
        unsigned int v16 = (v14 - 1) & ((v8 >> 4) ^ (v8 >> 9));
        unsigned int v17 = (void *)(v9 + 8 * v16);
        uint64_t v18 = *v17;
        if (*v17 != -1)
        {
          uint64_t v19 = 0;
          int v20 = 1;
          while (v18 != v8)
          {
            if (v19) {
              BOOL v21 = 0;
            }
            else {
              BOOL v21 = v18 == -2;
            }
            if (v21) {
              uint64_t v19 = v17;
            }
            unsigned int v22 = v16 + v20++;
            unsigned int v16 = v22 & v15;
            unsigned int v17 = (void *)(v9 + 8 * (v22 & v15));
            uint64_t v18 = *v17;
            if (*v17 == -1) {
              goto LABEL_30;
            }
          }
          goto LABEL_118;
        }
        uint64_t v19 = 0;
LABEL_30:
        if (v19) {
          __int32 v23 = v19;
        }
        else {
          __int32 v23 = v17;
        }
        if (*v23 == v8) {
          goto LABEL_118;
        }
        if (*v23 == -2) {
          --*((_DWORD *)this + 6);
        }
        else {
          ++*((_DWORD *)this + 5);
        }
        void *v23 = v8;
LABEL_37:
        unsigned int v26 = *(void **)(v8 + 40);
        __int32 v25 = (void *)(v8 + 40);
        int32x2_t v24 = v26;
        if (v26 == v25) {
          goto LABEL_116;
        }
        uint64_t v27 = v24 - 3;
        if (!v24) {
          uint64_t v27 = 0;
        }
        unsigned int v28 = *((unsigned __int8 *)v27 + 16) - 40;
        if (v28 < 0xFFFFFFF5) {
          uint64_t v27 = 0;
        }
        if (v24)
        {
          if (*((unsigned char *)v27 + 16) == 30 && v28 >= 0xFFFFFFF5 && (*((_DWORD *)v27 + 5) & 0x7FFFFFF) == 3)
          {
            uint64_t v30 = *(v27 - 12);
            if (v30)
            {
              uint64_t v31 = *(v27 - 4);
              if (v31)
              {
                uint64_t v32 = *(v27 - 8);
                if (v32) {
                  break;
                }
              }
            }
          }
        }
LABEL_106:
        if (v24 != v25)
        {
          uint64_t v63 = (uint64_t)(v24 - 3);
          if (v24) {
            uint64_t v64 = v24 - 3;
          }
          else {
            uint64_t v64 = 0;
          }
          int v65 = *((unsigned __int8 *)v64 + 16);
          int v66 = v65 - 29;
          if (v65 != 30)
          {
            int v68 = 0;
            switch(v66)
            {
              case 0:
              case 5:
              case 6:
                goto LABEL_115;
              case 1:
                __break(1u);
                JUMPOUT(0x1CC12B4C4);
              case 2:
                int v68 = (*((_DWORD *)v64 + 5) >> 1) & 0x3FFFFFF;
                goto LABEL_115;
              case 3:
              case 9:
                int v68 = (*((_DWORD *)v64 + 5) & 0x7FFFFFF) - 1;
                goto LABEL_115;
              case 4:
                int v68 = 2;
                goto LABEL_115;
              case 7:
                int v68 = *((_WORD *)v64 + 9) & 1;
                goto LABEL_115;
              case 8:
                int v68 = 1;
                goto LABEL_115;
              case 10:
                int v68 = *((_DWORD *)v64 + 20) + 1;
                goto LABEL_115;
              default:
                goto LABEL_116;
            }
          }
          if ((*((_DWORD *)v64 + 5) & 0x7FFFFFF) == 3) {
            int v68 = 2;
          }
          else {
            int v68 = 1;
          }
LABEL_115:
          int v67 = v68;
          goto LABEL_117;
        }
LABEL_116:
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        int v67 = 0;
LABEL_117:
        sub_1CBFC9784((uint64_t)&v71, (uint64_t)v71 + 8 * v72, (llvm::Instruction *)v64, 0, v63, v67);
LABEL_118:
        unsigned int v7 = v72;
        if (!v72) {
          goto LABEL_130;
        }
      }
      int v33 = *(unsigned __int8 *)(v30 + 16);
      if (v33 == 81) {
        break;
      }
      if (v33 != 16) {
        goto LABEL_106;
      }
      uint64_t v34 = *(unsigned int *)(v30 + 32);
      if (v34 > 0x40)
      {
        int v56 = 0;
        int64_t v57 = (unint64_t)(v34 + 63) >> 6;
        do
        {
          if (v57-- < 1) {
            break;
          }
          unint64_t v59 = *(void *)(*(void *)(v30 + 24) + 8 * v57);
          v56 += __clz(v59);
        }
        while (!v59);
        int v60 = v34 | 0xFFFFFFC0;
        if ((v34 & 0x3F) == 0) {
          int v60 = 0;
        }
        BOOL v35 = v56 + v60 == v34 - 1;
      }
      else
      {
        BOOL v35 = *(void *)(v30 + 24) == 1;
      }
      if (v35) {
        uint64_t v62 = v31;
      }
      else {
        uint64_t v62 = v32;
      }
      if (v72 >= (unint64_t)v73) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v71 + v72) = v62;
LABEL_100:
      unsigned int v7 = v72 + 1;
      unsigned int v72 = v7;
      if (!v7) {
        goto LABEL_130;
      }
    }
    unint64_t v36 = *(void *)(v30 - 64);
    uint64_t v37 = *(void *)(a1 + 104);
    unsigned int v38 = *(_DWORD *)(a1 + 120);
    if (!v38) {
      goto LABEL_63;
    }
    unsigned int v39 = v38 - 1;
    unsigned int v40 = ((v36 >> 4) ^ (v36 >> 9)) & (v38 - 1);
    uint64_t v41 = v37 + 48 * v40;
    uint64_t v42 = *(void *)(v41 + 24);
    if (v42 != v36)
    {
      int v43 = 1;
      while (v42 != -4096)
      {
        unsigned int v44 = v40 + v43++;
        unsigned int v40 = v44 & v39;
        uint64_t v41 = v37 + 48 * (v44 & v39);
        uint64_t v42 = *(void *)(v41 + 24);
        if (v42 == v36) {
          goto LABEL_64;
        }
      }
LABEL_63:
      uint64_t v41 = v37 + 48 * v38;
    }
LABEL_64:
    if (v41 == v37 + 48 * v38 || (uint64_t SCEVIter = *(llvm::SCEV **)(v41 + 40)) == 0)
    {
      uint64_t SCEVIter = (llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v36);
      uint64_t v37 = *(void *)(a1 + 104);
      unsigned int v38 = *(_DWORD *)(a1 + 120);
    }
    unint64_t v46 = *(void *)(v30 - 32);
    uint64_t v47 = v37 + 48 * v38;
    uint64_t v69 = v4;
    if (!v38) {
      goto LABEL_73;
    }
    unsigned int v48 = v38 - 1;
    unsigned int v49 = ((v46 >> 4) ^ (v46 >> 9)) & v48;
    uint64_t v50 = v37 + 48 * v49;
    uint64_t v51 = *(void *)(v50 + 24);
    if (v51 != v46)
    {
      int v52 = 1;
      while (v51 != -4096)
      {
        unsigned int v53 = v49 + v52++;
        unsigned int v49 = v53 & v48;
        uint64_t v50 = v37 + 48 * v49;
        uint64_t v51 = *(void *)(v50 + 24);
        if (v51 == v46) {
          goto LABEL_72;
        }
      }
LABEL_73:
      int32x2_t v54 = (llvm::ScalarEvolution *)a1;
      uint64_t v50 = v47;
      goto LABEL_74;
    }
LABEL_72:
    int32x2_t v54 = (llvm::ScalarEvolution *)a1;
LABEL_74:
    if (v50 == v47 || (__int32 v55 = *(const llvm::APInt **)(v50 + 40)) == 0) {
      __int32 v55 = (const llvm::APInt *)llvm::ScalarEvolution::createSCEVIter(v54, v46);
    }
    if (!llvm::ScalarEvolution::isKnownPredicateViaConstantRanges(v54, *(_WORD *)(v30 + 18) & 0x3F, SCEVIter, v55))
    {
      if (llvm::ScalarEvolution::isKnownPredicateViaConstantRanges(v54, dword_1CFAC44C8[*(_WORD *)(v30 + 18) & 0x3F], SCEVIter, v55))
      {
        uint64_t v4 = v69;
        if (v72 >= (unint64_t)v73) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v71 + v72) = v32;
        goto LABEL_100;
      }
      int32x2_t v24 = (void *)*v25;
      uint64_t v4 = v69;
      goto LABEL_106;
    }
    if (v72 >= (unint64_t)v73) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v4 = v69;
    *((void *)v71 + v72) = v31;
    unsigned int v7 = v72 + 1;
    unsigned int v72 = v7;
  }
  while (v7);
LABEL_130:
  if (v71 != v4) {
    free(v71);
  }
}

void llvm::ScalarEvolution::verify(llvm::ScalarEvolution *this)
{
  v1[167] = *MEMORY[0x1E4F143B8];
  llvm::ScalarEvolution::ScalarEvolution(v1, *(void *)this, *((void *)this + 2), *((void *)this + 3), *((void *)this + 4), *((void *)this + 5));
}

uint64_t sub_1CC12CD98(uint64_t a1, uint64_t a2, const llvm::APInt *a3)
{
  v91[2] = *MEMORY[0x1E4F143B8];
  uint64_t v88 = a2;
  uint64_t v6 = a1 + 8;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  if (v7)
  {
    LODWORD(v8) = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v9 = (void *)(v5 + 16 * v8);
    uint64_t v10 = *v9;
    if (*v9 == a2) {
      goto LABEL_8;
    }
    int v11 = 1;
    while (v10 != -4096)
    {
      int v12 = v8 + v11++;
      uint64_t v8 = v12 & (v7 - 1);
      uint64_t v10 = *(void *)(v5 + 16 * v8);
      if (v10 == a2)
      {
        uint64_t v9 = (void *)(v5 + 16 * v8);
        goto LABEL_8;
      }
    }
  }
  uint64_t v9 = (void *)(v5 + 16 * v7);
LABEL_8:
  if (v9 == (void *)(v5 + 16 * v7))
  {
    switch(*(_WORD *)(a2 + 24))
    {
      case 1:
        int v43 = (const llvm::SCEV *)sub_1CC12CD98(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v43 != *(const llvm::SCEV **)(a2 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getTruncateExpr(*(llvm::ScalarEvolution **)a1, v43, *(llvm::Type **)(a2 + 40), 0);
          goto LABEL_73;
        }
        break;
      case 2:
        unsigned int v16 = (llvm::detail::IEEEFloat **)sub_1CC12CD98(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v16 != *(llvm::detail::IEEEFloat ***)(a2 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getZeroExtendExpr(*(llvm::ScalarEvolution **)a1, v16, *(uint64_t ***)(a2 + 40), 0);
          goto LABEL_73;
        }
        break;
      case 3:
        unsigned int v44 = (llvm::detail::IEEEFloat **)sub_1CC12CD98(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v44 != *(llvm::detail::IEEEFloat ***)(a2 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getSignExtendExpr(*(llvm::ScalarEvolution **)a1, v44, *(uint64_t ***)(a2 + 40), 0);
          goto LABEL_73;
        }
        break;
      case 4:
        BOOL v89 = v91;
        uint64_t v90 = 0x200000000;
        uint64_t v18 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v18)
        {
          char v19 = 0;
          int v20 = *(void **)(a2 + 32);
          uint64_t v21 = 8 * v18;
          do
          {
            uint64_t v22 = *v20;
            uint64_t v23 = sub_1CC12CD98(a1, *v20);
            if (v90 >= (unint64_t)HIDWORD(v90)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v89 + v90) = v23;
            LODWORD(v90) = v90 + 1;
            int32x2_t v24 = v89;
            v19 |= v22 != *((void *)v89 + v90 - 1);
            ++v20;
            v21 -= 8;
          }
          while (v21);
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
          if (v19)
          {
            uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(*(void *)a1, (unint64_t **)&v89, 0, 0);
            goto LABEL_91;
          }
          goto LABEL_92;
        }
        break;
      case 5:
        BOOL v89 = v91;
        uint64_t v90 = 0x200000000;
        uint64_t v45 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v45)
        {
          char v46 = 0;
          uint64_t v47 = *(void **)(a2 + 32);
          uint64_t v48 = 8 * v45;
          do
          {
            uint64_t v49 = *v47;
            uint64_t v50 = sub_1CC12CD98(a1, *v47);
            if (v90 >= (unint64_t)HIDWORD(v90)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v89 + v90) = v50;
            LODWORD(v90) = v90 + 1;
            int32x2_t v24 = v89;
            v46 |= v49 != *((void *)v89 + v90 - 1);
            ++v47;
            v48 -= 8;
          }
          while (v48);
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
          if (v46)
          {
            uint64_t AddExpr = llvm::ScalarEvolution::getMulExpr(*(void *)a1, (uint64_t)&v89, 0, 0);
            goto LABEL_91;
          }
          goto LABEL_92;
        }
        break;
      case 6:
        uint64_t v51 = (const llvm::SCEV *)sub_1CC12CD98(a1, *(void *)(a2 + 32));
        unint64_t v52 = sub_1CC12CD98(a1, *(void *)(a2 + 40));
        if (v51 != *(const llvm::SCEV **)(a2 + 32)
          || (LosslessPtrToIntExpr = (const llvm::SCEV *)a2, v52 != *(void *)(a2 + 40)))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getUDivExpr(*(llvm::ScalarEvolution **)a1, v51, v52);
          goto LABEL_73;
        }
        break;
      case 7:
        BOOL v89 = v91;
        uint64_t v90 = 0x200000000;
        uint64_t v53 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v53)
        {
          char v54 = 0;
          __int32 v55 = *(void **)(a2 + 32);
          uint64_t v56 = 8 * v53;
          do
          {
            uint64_t v57 = *v55;
            uint64_t v58 = sub_1CC12CD98(a1, *v55);
            if (v90 >= (unint64_t)HIDWORD(v90)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v89 + v90) = v58;
            LODWORD(v90) = v90 + 1;
            int32x2_t v24 = v89;
            v54 |= v57 != *((void *)v89 + v90 - 1);
            ++v55;
            v56 -= 8;
          }
          while (v56);
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
          if (v54)
          {
            uint64_t AddExpr = llvm::ScalarEvolution::getAddRecExpr(*(llvm::ScalarEvolution **)a1, (uint64_t **)&v89, *(const llvm::Loop **)(a2 + 48), *(_WORD *)(a2 + 28) & 7);
            goto LABEL_91;
          }
          goto LABEL_92;
        }
        break;
      case 8:
        BOOL v89 = v91;
        uint64_t v90 = 0x200000000;
        uint64_t v59 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v59)
        {
          char v60 = 0;
          uint64_t v61 = *(void **)(a2 + 32);
          uint64_t v62 = 8 * v59;
          do
          {
            uint64_t v63 = *v61;
            uint64_t v64 = sub_1CC12CD98(a1, *v61);
            if (v90 >= (unint64_t)HIDWORD(v90)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v89 + v90) = v64;
            LODWORD(v90) = v90 + 1;
            int32x2_t v24 = v89;
            v60 |= v63 != *((void *)v89 + v90 - 1);
            ++v61;
            v62 -= 8;
          }
          while (v62);
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
          if (v60)
          {
            uint64_t v75 = *(llvm::ScalarEvolution **)a1;
            uint64_t v76 = 8;
            goto LABEL_90;
          }
          goto LABEL_92;
        }
        break;
      case 9:
        BOOL v89 = v91;
        uint64_t v90 = 0x200000000;
        uint64_t v25 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v25)
        {
          char v26 = 0;
          uint64_t v27 = *(void **)(a2 + 32);
          uint64_t v28 = 8 * v25;
          do
          {
            uint64_t v29 = *v27;
            uint64_t v30 = sub_1CC12CD98(a1, *v27);
            if (v90 >= (unint64_t)HIDWORD(v90)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v89 + v90) = v30;
            LODWORD(v90) = v90 + 1;
            int32x2_t v24 = v89;
            v26 |= v29 != *((void *)v89 + v90 - 1);
            ++v27;
            v28 -= 8;
          }
          while (v28);
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
          if (v26)
          {
            uint64_t v75 = *(llvm::ScalarEvolution **)a1;
            uint64_t v76 = 9;
            goto LABEL_90;
          }
          goto LABEL_92;
        }
        break;
      case 0xA:
        BOOL v89 = v91;
        uint64_t v90 = 0x200000000;
        uint64_t v65 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v65)
        {
          char v66 = 0;
          int v67 = *(void **)(a2 + 32);
          uint64_t v68 = 8 * v65;
          do
          {
            uint64_t v69 = *v67;
            uint64_t v70 = sub_1CC12CD98(a1, *v67);
            if (v90 >= (unint64_t)HIDWORD(v90)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v89 + v90) = v70;
            LODWORD(v90) = v90 + 1;
            int32x2_t v24 = v89;
            v66 |= v69 != *((void *)v89 + v90 - 1);
            ++v67;
            v68 -= 8;
          }
          while (v68);
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
          if (v66)
          {
            uint64_t v75 = *(llvm::ScalarEvolution **)a1;
            uint64_t v76 = 10;
            goto LABEL_90;
          }
          goto LABEL_92;
        }
        break;
      case 0xB:
        BOOL v89 = v91;
        uint64_t v90 = 0x200000000;
        uint64_t v31 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v31)
        {
          char v32 = 0;
          int v33 = *(void **)(a2 + 32);
          uint64_t v34 = 8 * v31;
          do
          {
            uint64_t v35 = *v33;
            uint64_t v36 = sub_1CC12CD98(a1, *v33);
            if (v90 >= (unint64_t)HIDWORD(v90)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v89 + v90) = v36;
            LODWORD(v90) = v90 + 1;
            int32x2_t v24 = v89;
            v32 |= v35 != *((void *)v89 + v90 - 1);
            ++v33;
            v34 -= 8;
          }
          while (v34);
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
          if ((v32 & 1) == 0) {
            goto LABEL_92;
          }
          uint64_t v75 = *(llvm::ScalarEvolution **)a1;
          uint64_t v76 = 11;
LABEL_90:
          uint64_t AddExpr = llvm::ScalarEvolution::getMinMaxExpr((uint64_t)v75, v76, (uint64_t **)&v89);
          goto LABEL_91;
        }
        break;
      case 0xC:
        BOOL v89 = v91;
        uint64_t v90 = 0x200000000;
        uint64_t v37 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v37)
        {
          char v38 = 0;
          unsigned int v39 = *(void **)(a2 + 32);
          uint64_t v40 = 8 * v37;
          do
          {
            uint64_t v41 = *v39;
            uint64_t v42 = sub_1CC12CD98(a1, *v39);
            if (v90 >= (unint64_t)HIDWORD(v90)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v89 + v90) = v42;
            LODWORD(v90) = v90 + 1;
            int32x2_t v24 = v89;
            v38 |= v41 != *((void *)v89 + v90 - 1);
            ++v39;
            v40 -= 8;
          }
          while (v40);
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
          if (v38)
          {
            uint64_t AddExpr = llvm::ScalarEvolution::getSequentialMinMaxExpr(*(void *)a1, 12, (unsigned int *)&v89);
LABEL_91:
            LosslessPtrToIntExpr = (const llvm::SCEV *)AddExpr;
            int32x2_t v24 = v89;
          }
LABEL_92:
          if (v24 != v91) {
            free(v24);
          }
        }
        break;
      case 0xD:
        int32x2_t v71 = (const llvm::SCEV *)sub_1CC12CD98(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v71 != *(const llvm::SCEV **)(a2 + 32))
        {
          unsigned int v72 = *(llvm::ScalarEvolution **)a1;
          unsigned int v73 = *(llvm::Type **)(a2 + 40);
          LosslessPtrToIntExpr = llvm::ScalarEvolution::getLosslessPtrToIntExpr(*(llvm::ScalarEvolution **)a1, v71);
          if (*((_WORD *)LosslessPtrToIntExpr + 12) != 15)
          {
            uint64_t TruncateExpr = (uint64_t)llvm::ScalarEvolution::getTruncateOrZeroExtend(v72, (llvm::detail::IEEEFloat **)LosslessPtrToIntExpr, v73, 0);
            goto LABEL_73;
          }
        }
        break;
      case 0xE:
        uint64_t TruncateExpr = llvm::ScalarEvolution::getUnknown(*(llvm::ScalarEvolution **)a1, *(llvm::Value **)(a2 - 8));
        goto LABEL_73;
      case 0xF:
        LosslessPtrToIntExpr = *(const llvm::SCEV **)(*(void *)a1 + 48);
        break;
      default:
        unsigned __int8 v13 = *(llvm::ScalarEvolution **)a1;
        unsigned int v14 = (llvm::ConstantInt *)llvm::ConstantInt::get(****(llvm::ConstantInt *****)a1, (llvm::LLVMContext *)(*(void *)(a2 + 32) + 24), a3);
        uint64_t TruncateExpr = llvm::ScalarEvolution::getConstant(v13, v14);
LABEL_73:
        LosslessPtrToIntExpr = (const llvm::SCEV *)TruncateExpr;
        break;
    }
    int v77 = *(_DWORD *)(a1 + 24);
    if (!v77)
    {
      unsigned int v86 = 0;
LABEL_109:
      uint64_t v9 = sub_1CC131DD4(v6, (uint64_t)&v88, &v88, v86);
      *uint64_t v9 = v88;
      v9[1] = LosslessPtrToIntExpr;
      return v9[1];
    }
    uint64_t v78 = *(void *)(a1 + 8);
    int v79 = v77 - 1;
    unsigned int v80 = v79 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v9 = (void *)(v78 + 16 * v80);
    uint64_t v81 = *v9;
    if (*v9 != a2)
    {
      BOOL v82 = 0;
      int v83 = 1;
      while (v81 != -4096)
      {
        if (v82) {
          BOOL v84 = 0;
        }
        else {
          BOOL v84 = v81 == -8192;
        }
        if (v84) {
          BOOL v82 = v9;
        }
        unsigned int v85 = v80 + v83++;
        unsigned int v80 = v85 & v79;
        uint64_t v9 = (void *)(v78 + 16 * v80);
        uint64_t v81 = *v9;
        if (*v9 == a2) {
          return v9[1];
        }
      }
      if (v82) {
        unsigned int v86 = v82;
      }
      else {
        unsigned int v86 = v9;
      }
      goto LABEL_109;
    }
  }
  return v9[1];
}

uint64_t sub_1CC12D740(uint64_t result, int a2)
{
  uint64_t v2 = result + 568;
  uint64_t v3 = 544;
  if (a2) {
    uint64_t v3 = 568;
  }
  else {
    uint64_t v2 = result + 544;
  }
  int v4 = *(_DWORD *)(v2 + 8);
  uint64_t v5 = *(void *)(result + v3);
  uint64_t v6 = *(unsigned int *)(v2 + 16);
  uint64_t v7 = v5 + 144 * v6;
  if (v4)
  {
    if (v6)
    {
      uint64_t v8 = 144 * v6;
      uint64_t v9 = *(void *)(result + v3);
      while ((*(void *)v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v9 += 144;
        v8 -= 144;
        if (!v8) {
          goto LABEL_9;
        }
      }
    }
    else
    {
      uint64_t v9 = *(void *)(result + v3);
    }
  }
  else
  {
LABEL_9:
    uint64_t v9 = v5 + 144 * v6;
  }
  uint64_t v10 = v5 + 144 * v6;
  if (v9 != v10)
  {
    uint64_t v11 = 4;
    if (!a2) {
      uint64_t v11 = 0;
    }
    while (1)
    {
      unsigned int v12 = *(_DWORD *)(v9 + 16);
      if (v12) {
        break;
      }
LABEL_55:
      uint64_t v40 = v9 + 144;
      uint64_t v9 = v7;
      if (v40 != v7)
      {
        uint64_t v9 = v40;
        while ((*(void *)v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v9 += 144;
          if (v9 == v7)
          {
            uint64_t v9 = v7;
            break;
          }
        }
      }
      if (v9 == v10) {
        return result;
      }
    }
    uint64_t v13 = *(void *)(v9 + 8);
    uint64_t v14 = v13 + 88 * v12;
    while (1)
    {
      uint64_t v15 = *(void *)(v13 + 8);
      if (*(_WORD *)(v15 + 24)) {
        break;
      }
LABEL_48:
      v13 += 88;
      if (v13 == v14) {
        goto LABEL_55;
      }
    }
    uint64_t v16 = *(void *)(result + 592);
    unsigned int v17 = *(_DWORD *)(result + 608);
    if (v17)
    {
      unsigned int v18 = v17 - 1;
      unsigned int v19 = (v17 - 1) & ((v15 >> 4) ^ (v15 >> 9));
      int v20 = (uint64_t *)(v16 + 72 * v19);
      uint64_t v21 = *v20;
      if (*v20 == v15)
      {
LABEL_24:
        if ((uint64_t *)(v16 + 72 * v17) == v20) {
          goto LABEL_62;
        }
        unint64_t v24 = *(void *)v9 & 0xFFFFFFFFFFFFFFFBLL | v11;
        uint64_t v26 = v20[1];
        uint64_t v25 = v20[2];
        if (v25 == v26)
        {
          uint64_t v27 = *((unsigned int *)v20 + 7);
          uint64_t v28 = (void *)(v25 + 8 * v27);
          if (v27)
          {
            uint64_t v29 = 0;
            uint64_t v30 = 8 * v27;
            while (*(void *)(v25 + v29) != v24)
            {
              v29 += 8;
              if (v30 == v29) {
                goto LABEL_43;
              }
            }
            uint64_t v28 = (void *)(v25 + v29);
          }
LABEL_43:
          uint64_t v26 = v20[2];
        }
        else
        {
          uint64_t v31 = *((unsigned int *)v20 + 6);
          int v32 = v31 - 1;
          unsigned int v33 = (v31 - 1) & ((v24 >> 4) ^ (v24 >> 9));
          uint64_t v28 = (void *)(v25 + 8 * v33);
          uint64_t v34 = *v28;
          if (*v28 == -1)
          {
            uint64_t v35 = 0;
LABEL_51:
            if (v35) {
              uint64_t v28 = v35;
            }
            if (*v28 != v24) {
              uint64_t v28 = (void *)(v25 + 8 * v31);
            }
          }
          else
          {
            uint64_t v35 = 0;
            int v36 = 1;
            while (v34 != v24)
            {
              if (v35) {
                BOOL v37 = 0;
              }
              else {
                BOOL v37 = v34 == -2;
              }
              if (v37) {
                uint64_t v35 = v28;
              }
              unsigned int v38 = v33 + v36++;
              unsigned int v33 = v38 & v32;
              uint64_t v28 = (void *)(v25 + 8 * (v38 & v32));
              uint64_t v34 = *v28;
              if (*v28 == -1) {
                goto LABEL_51;
              }
            }
          }
        }
        uint64_t v39 = v25 == v26 ? 28 : 24;
        if (v28 == (void *)(v25 + 8 * *(unsigned int *)((char *)v20 + v39)))
        {
LABEL_62:
          uint64_t v41 = llvm::dbgs((llvm *)result);
          uint64_t v42 = sub_1CB8E509C(v41, "Value ");
          int v43 = sub_1CD4BDF50(v42, *(llvm::SCEV **)(v13 + 8));
          sub_1CB8E509C(v43, " for loop ");
          sub_1CD4C0270();
        }
        goto LABEL_48;
      }
      int v22 = 1;
      while (v21 != -4096)
      {
        unsigned int v23 = v19 + v22++;
        unsigned int v19 = v23 & v18;
        int v20 = (uint64_t *)(v16 + 72 * (v23 & v18));
        uint64_t v21 = *v20;
        if (*v20 == v15) {
          goto LABEL_24;
        }
      }
    }
    int v20 = (uint64_t *)(v16 + 72 * v17);
    goto LABEL_24;
  }
  return result;
}

uint64_t llvm::ScalarEvolution::invalidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v22[0] = (void **)a3;
  v22[1] = (void **)&llvm::ScalarEvolutionAnalysis::Key;
  uint64_t v8 = *(void *)(a3 + 48);
  uint64_t v7 = *(void *)(a3 + 56);
  if (v7 == v8)
  {
    uint64_t v9 = *(unsigned int *)(a3 + 68);
    uint64_t v10 = (void **)(v7 + 8 * v9);
    if (v9)
    {
      uint64_t v11 = 0;
      while (*(_UNKNOWN **)(v7 + v11) != &llvm::ScalarEvolutionAnalysis::Key)
      {
        v11 += 8;
        if (8 * v9 == v11) {
          goto LABEL_6;
        }
      }
      uint64_t v10 = (void **)(v7 + v11);
    }
LABEL_6:
    uint64_t v8 = *(void *)(a3 + 56);
  }
  else
  {
    uint64_t v14 = *(unsigned int *)(a3 + 64);
    int v15 = v14 - 1;
    unsigned int v16 = (v14 - 1) & ((&llvm::ScalarEvolutionAnalysis::Key >> 4) ^ (&llvm::ScalarEvolutionAnalysis::Key >> 9));
    uint64_t v10 = (void **)(v7 + 8 * v16);
    unsigned int v17 = *v10;
    if (*v10 == (void *)-1)
    {
      unsigned int v18 = 0;
LABEL_29:
      if (v18) {
        uint64_t v10 = v18;
      }
      if (*v10 != &llvm::ScalarEvolutionAnalysis::Key)
      {
        LODWORD(v9) = *(_DWORD *)(a3 + 68);
        uint64_t v10 = (void **)(v7 + 8 * v14);
        goto LABEL_7;
      }
    }
    else
    {
      unsigned int v18 = 0;
      int v19 = 1;
      while (v17 != &llvm::ScalarEvolutionAnalysis::Key)
      {
        if (v18) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v17 == (void *)-2;
        }
        if (v20) {
          unsigned int v18 = v10;
        }
        unsigned int v21 = v16 + v19++;
        unsigned int v16 = v21 & v15;
        uint64_t v10 = (void **)(v7 + 8 * (v21 & v15));
        unsigned int v17 = *v10;
        if (*v10 == (void *)-1) {
          goto LABEL_29;
        }
      }
    }
    LODWORD(v9) = *(_DWORD *)(a3 + 68);
  }
LABEL_7:
  if (v7 == v8) {
    unsigned int v12 = v9;
  }
  else {
    unsigned int v12 = *(_DWORD *)(a3 + 64);
  }
  BOOL v23 = v10 != (void **)(v7 + 8 * v12);
  if (!sub_1CBF75724(v22) && !sub_1CBF7593C((uint64_t)v22)
    || (sub_1CBF745FC(a4, (uint64_t)&llvm::AssumptionAnalysis::Key, a2, a3) & 1) != 0
    || (llvm::AnalysisManager<llvm::Function>::Invalidator::invalidate(a4, (uint64_t)&llvm::DominatorTreeAnalysis::Key, a2, a3) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_1CBF745FC(a4, (uint64_t)&llvm::LoopAnalysis::Key, a2, a3);
  }
}

void llvm::ScalarEvolutionAnalysis::run()
{
}

void sub_1CC12DC58(uint64_t a1)
{
}

void llvm::ScalarEvolutionWrapperPass::runOnFunction(llvm::ScalarEvolutionWrapperPass *this, llvm::Function *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  operator new();
}

llvm::ScalarEvolution *llvm::ScalarEvolutionWrapperPass::releaseMemory(llvm::ScalarEvolutionWrapperPass *this)
{
  uint64_t result = (llvm::ScalarEvolution *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (result)
  {
    llvm::ScalarEvolution::~ScalarEvolution(result);
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t llvm::SCEVComparePredicate::SCEVComparePredicate(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  *(_DWORD *)(result + 32) = 1;
  *(_DWORD *)(result + 36) = a4;
  *(void *)uint64_t result = &unk_1F2607520;
  *(void *)(result + 40) = a5;
  *(void *)(result + 48) = a6;
  return result;
}

{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  *(_DWORD *)(result + 32) = 1;
  *(_DWORD *)(result + 36) = a4;
  *(void *)uint64_t result = &unk_1F2607520;
  *(void *)(result + 40) = a5;
  *(void *)(result + 48) = a6;
  return result;
}

uint64_t llvm::SCEVWrapPredicate::SCEVWrapPredicate(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  *(_DWORD *)(result + 32) = 2;
  *(void *)uint64_t result = &unk_1F2607550;
  *(void *)(result + 40) = a4;
  *(_DWORD *)(result + 48) = a5;
  return result;
}

{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  *(_DWORD *)(result + 32) = 2;
  *(void *)uint64_t result = &unk_1F2607550;
  *(void *)(result + 40) = a4;
  *(_DWORD *)(result + 48) = a5;
  return result;
}

uint64_t llvm::ScalarEvolution::rewriteUsingPredicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = a1;
  int v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = a4;
  uint64_t v12 = a3;
  uint64_t v4 = sub_1CC139810(&v6, a2);
  MEMORY[0x1D25D9CD0](v7, 8);
  return v4;
}

uint64_t llvm::SCEVPredicate::SCEVPredicate(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)uint64_t result = &unk_1F26074F0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  *(_DWORD *)(result + 32) = a4;
  return result;
}

uint64_t llvm::SCEVWrapPredicate::getImpliedFlags(llvm::SCEVWrapPredicate *this, const llvm::SCEVAddRecExpr *a2, llvm::ScalarEvolution *a3)
{
  v21[3] = *MEMORY[0x1E4F143B8];
  int v4 = *((_WORD *)this + 14) & 7;
  uint64_t result = 2 * ((v4 | 4) == v4);
  if ((v4 | 2) == v4)
  {
    uint64_t v6 = *((void *)this + 5);
    if (v6 == 2)
    {
      uint64_t v7 = *(void *)(*((void *)this + 4) + 8);
    }
    else
    {
      unsigned int v17 = result;
      unsigned int v16 = this;
      uint64_t v13 = *((void *)this + 4);
      int v19 = v21;
      uint64_t v20 = 0x300000000;
      size_t v14 = 8 * v6 - 8;
      if (v14 >= 0x19) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v15 = 0;
      if (v6 != 1)
      {
        memcpy(v19, (const void *)(v13 + 8), v14);
        int v15 = v20;
      }
      LODWORD(v20) = v15 + (v14 >> 3);
      uint64_t v7 = sub_1CD478318(a2, (uint64_t)&v19, *((const llvm::Loop **)v16 + 6), 0);
      if (v19 != v21) {
        free(v19);
      }
      uint64_t result = v17;
    }
    if (v7) {
      BOOL v8 = *(unsigned __int16 *)(v7 + 24) == 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8)
    {
      uint64_t v9 = *(void *)(v7 + 32);
      uint64_t v10 = (void *)(v9 + 24);
      unsigned int v11 = *(_DWORD *)(v9 + 32);
      unsigned int v12 = v11 - 1;
      if (v11 >= 0x41) {
        uint64_t v10 = (void *)(*v10 + 8 * (v12 >> 6));
      }
      return result | (((*v10 >> v12) & 1) == 0);
    }
  }
  return result;
}

uint64_t llvm::SCEVUnionPredicate::SCEVUnionPredicate(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1F2607580;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = a1 + 56;
  *(void *)(a1 + 48) = 0x1000000000;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      uint64_t v6 = *a2++;
      llvm::SCEVUnionPredicate::add(a1, v6);
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

uint64_t llvm::SCEVUnionPredicate::add(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (!a2 || *(_DWORD *)(a2 + 32))
  {
    unsigned int v7 = *(_DWORD *)(result + 48);
    if (v7 >= *(_DWORD *)(result + 52)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(result + 40) + 8 * v7) = a2;
    ++*(_DWORD *)(result + 48);
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a2 + 48);
    if (v3)
    {
      int v4 = *(uint64_t **)(a2 + 40);
      uint64_t v5 = 8 * v3;
      do
      {
        uint64_t v6 = *v4++;
        uint64_t result = llvm::SCEVUnionPredicate::add(v2, v6);
        v5 -= 8;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t llvm::SCEVUnionPredicate::implies(uint64_t a1, uint64_t a2)
{
  if (!a2 || *(_DWORD *)(a2 + 32))
  {
    uint64_t v10 = *(unsigned int *)(a1 + 48);
    if (v10)
    {
      unsigned int v11 = *(uint64_t **)(a1 + 40);
      uint64_t v12 = 8 * v10 - 8;
      do
      {
        uint64_t v13 = *v11++;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, a2);
        if (result) {
          break;
        }
        uint64_t v14 = v12;
        v12 -= 8;
      }
      while (v14);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(a2 + 48);
    if (v4)
    {
      uint64_t v5 = *(uint64_t **)(a2 + 40);
      uint64_t v6 = 8 * v4 - 8;
      do
      {
        uint64_t v7 = *v5++;
        uint64_t result = llvm::SCEVUnionPredicate::implies(a1, v7);
        if (result) {
          BOOL v9 = v6 == 0;
        }
        else {
          BOOL v9 = 1;
        }
        v6 -= 8;
      }
      while (!v9);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void llvm::PredicatedScalarEvolution::PredicatedScalarEvolution(llvm::PredicatedScalarEvolution *this, llvm::ScalarEvolution *a2, llvm::Loop *a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 128;
  *((void *)this + 3) = operator new(0x1800uLL, (std::align_val_t)8uLL);
  sub_1CC078E24((void *)this + 3);
  *((unsigned char *)this + 48) = 0;
  *((unsigned char *)this + 72) = 0;
  *((void *)this + 11) = a2;
  *((void *)this + 12) = a3;
  *((void *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
  *((void *)this + 15) = 0;
  operator new();
}

uint64_t llvm::PredicatedScalarEvolution::getSCEV(int8x16_t *this, llvm::Value *a2)
{
  uint64_t v3 = this[5].i64[1];
  uint64_t v4 = *(void *)(v3 + 104);
  unsigned int v5 = *(_DWORD *)(v3 + 120);
  if (!v5)
  {
LABEL_7:
    uint64_t v7 = v4 + 48 * v5;
    goto LABEL_8;
  }
  unsigned int v6 = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = v4 + 48 * v6;
  BOOL v8 = *(llvm::Value **)(v7 + 24);
  if (v8 != a2)
  {
    int v9 = 1;
    while (v8 != (llvm::Value *)-4096)
    {
      unsigned int v10 = v6 + v9++;
      unsigned int v6 = v10 & (v5 - 1);
      uint64_t v7 = v4 + 48 * v6;
      BOOL v8 = *(llvm::Value **)(v7 + 24);
      if (v8 == a2) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v7 == v4 + 48 * v5 || (uint64_t SCEVIter = *(void *)(v7 + 40)) == 0) {
    uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v3, (unint64_t)a2);
  }
  uint64_t v17 = SCEVIter;
  uint64_t v12 = sub_1CC13F6EC(this->i64, &v17);
  uint64_t v13 = v12;
  uint64_t v14 = v12[2];
  if (!v14)
  {
    uint64_t v14 = v17;
LABEL_15:
    uint64_t v16 = this[5].i64[1];
    uint64_t v22 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v18 = v16;
    int v21 = 0;
    int8x16_t v23 = vextq_s8(this[6], this[6], 8uLL);
    uint64_t v14 = sub_1CC139810(&v18, v14);
    MEMORY[0x1D25D9CD0](v19, 8);
    *((_DWORD *)v13 + 2) = this[7].i32[0];
    v13[2] = v14;
    return v14;
  }
  if (this[7].i32[0] != *((_DWORD *)v12 + 2))
  {
    uint64_t v17 = v12[2];
    goto LABEL_15;
  }
  return v14;
}

uint64_t llvm::PredicatedScalarEvolution::getBackedgeTakenCount(llvm::PredicatedScalarEvolution *this)
{
  uint64_t result = *((void *)this + 15);
  if (!result)
  {
    uint64_t v3 = (llvm::ScalarEvolution *)*((void *)this + 11);
    uint64_t v4 = (const llvm::Loop *)*((void *)this + 12);
    Predicateduint64_t BackedgeTakenInfo = llvm::ScalarEvolution::getPredicatedBackedgeTakenInfo(v3, v4);
    *((void *)this + 15) = llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)PredicatedBackedgeTakenInfo, (uint64_t)v4, (uint64_t)v3);
    return *((void *)this + 15);
  }
  return result;
}

uint64_t llvm::PredicatedScalarEvolution::addPredicate(uint64_t a1, uint64_t a2)
{
  v10[4] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::SCEVUnionPredicate::implies(*(void *)(a1 + 104), a2);
  if ((result & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 104);
    unsigned int v6 = *(unsigned char **)(v5 + 40);
    uint64_t v7 = &v6[8 * *(unsigned int *)(v5 + 48)];
    BOOL v8 = v10;
    uint64_t v9 = 0x400000000;
    sub_1CBFCBB74((unsigned int *)&v8, v6, v7);
    if (v9 < HIDWORD(v9))
    {
      *((void *)v8 + v9) = a2;
      LODWORD(v9) = v9 + 1;
      operator new();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return result;
}

BOOL llvm::PredicatedScalarEvolution::hasNoOverflow(uint64_t a1, llvm::Value *a2, int a3)
{
  uint64_t v9 = a2;
  SCEV = (llvm::SCEVWrapPredicate *)llvm::PredicatedScalarEvolution::getSCEV((int8x16_t *)a1, a2);
  unsigned int v7 = a3 & ~llvm::SCEVWrapPredicate::getImpliedFlags(SCEV, *(const llvm::SCEVAddRecExpr **)(a1 + 88), v6);
  uint64_t v10 = 0;
  if (sub_1CC13F984((uint64_t *)(a1 + 24), &v9, &v10)
    && v10 != *(void *)(a1 + 24) + 48 * *(unsigned int *)(a1 + 40))
  {
    v7 &= ~*(_DWORD *)(v10 + 40);
  }
  return v7 == 0;
}

uint64_t llvm::PredicatedScalarEvolution::getAsAddRec(int8x16_t *this, llvm::Value *a2)
{
  uint64_t SCEV = llvm::PredicatedScalarEvolution::getSCEV(this, a2);
  uint64_t v20 = (uint64_t *)v24;
  int v21 = (uint64_t *)v24;
  uint64_t v22 = 4;
  int v23 = 0;
  uint64_t v5 = llvm::ScalarEvolution::convertSCEVToAddRecWithPredicates(this[5].i64[1], SCEV, this[6].i64[0], (llvm::SmallPtrSetImplBase *)&v20);
  if (v5)
  {
    unsigned int v7 = (uint64_t *)((char *)&v22 + 4);
    if (v21 != v20) {
      unsigned int v7 = &v22;
    }
    uint64_t v8 = *(unsigned int *)v7;
    if (v8)
    {
      uint64_t v9 = 8 * v8;
      uint64_t v10 = v21;
      while ((unint64_t)*v10 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v10;
        v9 -= 8;
        if (!v9) {
          goto LABEL_14;
        }
      }
    }
    else
    {
      uint64_t v10 = v21;
    }
    unsigned int v11 = (char *)&v21[v8];
    if (v10 != (uint64_t *)v11)
    {
      uint64_t v12 = *v10;
LABEL_12:
      llvm::PredicatedScalarEvolution::addPredicate((uint64_t)this, v12);
      uint64_t v13 = (unint64_t *)(v10 + 1);
      while (v13 != (unint64_t *)v11)
      {
        unint64_t v18 = *v13++;
        uint64_t v12 = v18;
        if (v18 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v10 = (uint64_t *)(v13 - 1);
          goto LABEL_12;
        }
      }
    }
LABEL_14:
    __int32 v14 = this[7].i32[0];
    int v15 = (llvm::ScalarEvolution *)this[5].i64[1];
    Existinguint64_t SCEV = llvm::ScalarEvolution::getExistingSCEV((uint64_t)v15, (uint64_t)a2);
    if (!ExistingSCEV) {
      Existinguint64_t SCEV = llvm::ScalarEvolution::createSCEVIter(v15, (unint64_t)a2);
    }
    uint64_t v19 = ExistingSCEV;
    uint64_t v17 = sub_1CC13F6EC(this->i64, &v19);
    *((_DWORD *)v17 + 2) = v14;
    v17[2] = v5;
  }
  if (v21 != v20) {
    free(v21);
  }
  return v5;
}

void llvm::PredicatedScalarEvolution::PredicatedScalarEvolution(llvm::PredicatedScalarEvolution *this, const llvm::PredicatedScalarEvolution *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  MEMORY[0x1D25D9CD0](0, 8);
  uint64_t v4 = *((unsigned int *)a2 + 4);
  *((_DWORD *)this + 4) = v4;
  if (v4)
  {
    *(void *)this = operator new(24 * v4, (std::align_val_t)8uLL);
    *((void *)this + 1) = *((void *)a2 + 1);
    unint64_t v5 = *((unsigned int *)this + 4);
    if (v5)
    {
      uint64_t v6 = 0;
      for (unint64_t i = 0; i < v5; ++i)
      {
        *(void *)(*(void *)this + v6) = *(void *)(*(void *)a2 + v6);
        uint64_t v8 = *(void *)(*(void *)this + v6);
        if (v8 != -4096 && v8 != -8192)
        {
          *(_OWORD *)(*(void *)this + v6 + 8) = *(_OWORD *)(*(void *)a2 + v6 + 8);
          unint64_t v5 = *((unsigned int *)this + 4);
        }
        v6 += 24;
      }
    }
  }
  else
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
  }
  *((_DWORD *)this + 10) = 128;
  *((void *)this + 3) = operator new(0x1800uLL, (std::align_val_t)8uLL);
  sub_1CC078E24((void *)this + 3);
  *((unsigned char *)this + 48) = 0;
  *((unsigned char *)this + 72) = 0;
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)this + 12) = *((void *)a2 + 12);
  operator new();
}

uint64_t llvm::PredicatedScalarEvolution::print(uint64_t this, llvm::raw_ostream *a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(this + 96);
  uint64_t v5 = *(void *)(v3 + 32);
  uint64_t v4 = *(void *)(v3 + 40);
  if (v4 != v5)
  {
    uint64_t v6 = this;
    unsigned int v30 = a3 + 2;
    uint64_t v27 = *(void *)(v3 + 40);
    do
    {
      uint64_t v7 = *(void *)v5 + 40;
      for (uint64_t i = *(void *)(*(void *)v5 + 48); i != v7; uint64_t i = *(void *)(i + 8))
      {
        if (i) {
          uint64_t v9 = (llvm::Value *)(i - 24);
        }
        else {
          uint64_t v9 = 0;
        }
        if ((*(_DWORD *)(*(void *)v9 + 8) & 0xFD) != 0xD) {
          continue;
        }
        uint64_t v10 = *(void *)(v6 + 88);
        uint64_t v11 = *(void *)(v10 + 104);
        unsigned int v12 = *(_DWORD *)(v10 + 120);
        if (v12)
        {
          unsigned int v13 = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
          uint64_t v14 = v11 + 48 * v13;
          int v15 = *(llvm::Value **)(v14 + 24);
          if (v15 == v9) {
            goto LABEL_16;
          }
          int v16 = 1;
          while (v15 != (llvm::Value *)-4096)
          {
            unsigned int v17 = v13 + v16++;
            unsigned int v13 = v17 & (v12 - 1);
            uint64_t v14 = v11 + 48 * v13;
            int v15 = *(llvm::Value **)(v14 + 24);
            if (v15 == v9) {
              goto LABEL_16;
            }
          }
        }
        uint64_t v14 = v11 + 48 * v12;
LABEL_16:
        if (v14 == v11 + 48 * v12 || (uint64_t SCEVIter = *(llvm::SCEV **)(v14 + 40)) == 0) {
          uint64_t SCEVIter = (llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v10, (unint64_t)v9);
        }
        uint64_t v31 = 0;
        int v32 = SCEVIter;
        this = sub_1CC13F758((uint64_t *)v6, &v32, &v31);
        if (this)
        {
          uint64_t v19 = v31;
          uint64_t v20 = *(void *)v6;
          unsigned int v21 = *(_DWORD *)(v6 + 16);
        }
        else
        {
          uint64_t v20 = *(void *)v6;
          unsigned int v21 = *(_DWORD *)(v6 + 16);
          uint64_t v19 = *(void *)v6 + 24 * v21;
        }
        if (v20 + 24 * v21 != v19 && *(llvm::SCEV **)(v19 + 16) != SCEVIter)
        {
          llvm::raw_ostream::indent(a2, a3);
          uint64_t v22 = *((void *)a2 + 4);
          if ((unint64_t)(*((void *)a2 + 3) - v22) > 4)
          {
            *(unsigned char *)(v22 + 4) = 93;
            *(_DWORD *)uint64_t v22 = 1163087963;
            *((void *)a2 + 4) += 5;
          }
          else
          {
            llvm::raw_ostream::write(a2, "[PSE]", 5uLL);
          }
          llvm::Value::print(v9, a2, 0);
          int v23 = (_WORD *)*((void *)a2 + 4);
          if (*((void *)a2 + 3) - (void)v23 > 1uLL)
          {
            _WORD *v23 = 2618;
            *((void *)a2 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(a2, ":\n", 2uLL);
          }
          uint64_t v4 = v27;
          llvm::raw_ostream::indent(a2, v30);
          llvm::SCEV::print(SCEVIter, a2);
          unint64_t v24 = (unsigned char *)*((void *)a2 + 4);
          if (*((unsigned char **)a2 + 3) == v24)
          {
            llvm::raw_ostream::write(a2, "\n", 1uLL);
          }
          else
          {
            *unint64_t v24 = 10;
            ++*((void *)a2 + 4);
          }
          llvm::raw_ostream::indent(a2, v30);
          uint64_t v25 = (_DWORD *)*((void *)a2 + 4);
          if (*((void *)a2 + 3) - (void)v25 > 3uLL)
          {
            *uint64_t v25 = 540945709;
            *((void *)a2 + 4) += 4;
          }
          else
          {
            llvm::raw_ostream::write(a2, "--> ", 4uLL);
          }
          this = (uint64_t)llvm::SCEV::print(*(llvm::SCEV **)(v19 + 16), a2);
          uint64_t v26 = (unsigned char *)*((void *)a2 + 4);
          if (*((unsigned char **)a2 + 3) == v26)
          {
            this = (uint64_t)llvm::raw_ostream::write(a2, "\n", 1uLL);
          }
          else
          {
            unsigned char *v26 = 10;
            ++*((void *)a2 + 4);
          }
        }
      }
      v5 += 8;
    }
    while (v5 != v4);
  }
  return this;
}

uint64_t sub_1CC12F274(uint64_t result, uint64_t a2, llvm::SCEV *a3, llvm::SCEV *a4, uint64_t a5)
{
  uint64_t v5 = a5;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v8 = result;
  uint64_t v233 = *MEMORY[0x1E4F143B8];
  uint64_t v218 = a3;
  uint64_t v9 = *(llvm::ConstantInt *****)result;
  int v10 = *((unsigned __int16 *)a3 + 12);
  if (*((_WORD *)a3 + 12))
  {
    uint64_t v11 = a3;
    uint64_t v6 = a4;
  }
  else
  {
    uint64_t v218 = a4;
    uint64_t v7 = dword_1CFAC4570[(int)a2];
    int v10 = *((unsigned __int16 *)a4 + 12);
    uint64_t v11 = a4;
  }
  if (v10 != 4 || *((void *)v11 + 5) != 2) {
    goto LABEL_26;
  }
  unsigned int v12 = (uint64_t *)*((void *)v11 + 4);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  uint64_t v15 = *(_WORD *)(v14 + 24) ? 0 : v14;
  int v16 = *(unsigned __int16 *)(v13 + 24);
  uint64_t v17 = v13 ? v13 - 32 : 0;
  uint64_t v18 = v16 == 14 ? v17 : 0;
  uint64_t v19 = *((_WORD *)v6 + 12) ? 0 : v6;
  BOOL v20 = !v15 || v19 == 0;
  if (v20 || v18 == 0) {
    goto LABEL_26;
  }
  uint64_t v216 = result;
  uint64_t v32 = *(void *)(result + 8);
  llvm::ConstantRange::makeExactICmpRegion(v7, *((void *)v19 + 4) + 24, (uint64_t)&v223);
  uint64_t v33 = *(void *)(v15 + 32);
  unsigned int v34 = *(_DWORD *)(v33 + 32);
  if (v34 > 0x40) {
    operator new[]();
  }
  uint64_t v35 = *(void **)(v33 + 24);
  unsigned int v220 = *(_DWORD *)(v33 + 32);
  unint64_t __src = v35;
  unsigned int v228 = v34;
  uint64_t v227 = (uint64_t)v35;
  llvm::APInt::operator+=((uint64_t)&v227, 1uLL);
  unsigned int v222 = v228;
  uint64_t v221 = v227;
  llvm::ConstantRange::sub((llvm::ConstantRange *)&v223, (const llvm::ConstantRange *)&__src, (uint64_t)&__s1);
  if (v222 >= 0x41 && v221) {
    MEMORY[0x1D25D9CB0](v221, 0x1000C8000313F17);
  }
  if (v220 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  if (v226 >= 0x41 && v225) {
    MEMORY[0x1D25D9CB0](v225, 0x1000C8000313F17);
  }
  if (v224 >= 0x41 && v223) {
    MEMORY[0x1D25D9CB0](v223, 0x1000C8000313F17);
  }
  unsigned int v44 = v230;
  if (v230 > 0x40)
  {
    uint64_t result = (uint64_t)__s1;
    uint64_t v45 = __s2;
    unint64_t v65 = (((unint64_t)v230 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v65)
      {
        char v46 = __s2;
        goto LABEL_345;
      }
      unint64_t v66 = *(void *)((char *)__s1 + v65 - 8);
      unint64_t v67 = *(void *)((char *)__s2 + v65 - 8);
      v65 -= 8;
    }
    while (v66 == v67);
    char v46 = __s2;
    if (v66 <= v67) {
      goto LABEL_345;
    }
  }
  else
  {
    uint64_t result = (uint64_t)__s1;
    uint64_t v45 = __s2;
    char v46 = __s2;
    if (__s1 <= __s2) {
      goto LABEL_72;
    }
  }
  if (v232 > 0x40)
  {
    int v211 = 0;
    int64_t v212 = ((unint64_t)v232 + 63) >> 6;
    do
    {
      BOOL v37 = v212-- < 1;
      if (v37) {
        break;
      }
      unint64_t v213 = v45[v212];
      v211 += __clz(v213);
    }
    while (!v213);
    unsigned int v214 = v232 | 0xFFFFFFC0;
    if ((v232 & 0x3F) == 0) {
      unsigned int v214 = 0;
    }
    if (v211 + v214 != v232) {
      goto LABEL_126;
    }
  }
  else if (v46)
  {
    goto LABEL_126;
  }
LABEL_345:
  if (v230 <= 0x40)
  {
LABEL_72:
    if ((void *)result == v46 && (!v230 || v46 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v230))) {
      goto LABEL_126;
    }
LABEL_73:
    uint64_t v47 = v18 + 32;
    uint64_t v48 = *(unsigned int *)(a5 + 16);
    uint64_t v49 = (const llvm::SCEV *)(v18 + 32);
    if (v48)
    {
      uint64_t v50 = *(void *)a5;
      LODWORD(v51) = (v48 - 1) & ((v47 >> 4) ^ (v47 >> 9));
      unint64_t v52 = (uint64_t *)(*(void *)a5 + 16 * v51);
      uint64_t v53 = *v52;
      if (v47 == *v52)
      {
LABEL_79:
        uint64_t v49 = (const llvm::SCEV *)(v18 + 32);
        if (v52 != (uint64_t *)(v50 + 16 * v48)) {
          uint64_t v49 = (const llvm::SCEV *)v52[1];
        }
      }
      else
      {
        int v54 = 1;
        while (v53 != -4096)
        {
          int v55 = v51 + v54++;
          uint64_t v51 = v55 & (v48 - 1);
          uint64_t v53 = *(void *)(v50 + 16 * v51);
          if (v47 == v53)
          {
            unint64_t v52 = (uint64_t *)(v50 + 16 * v51);
            goto LABEL_79;
          }
        }
        uint64_t v49 = (const llvm::SCEV *)(v18 + 32);
      }
    }
    llvm::ConstantRange::getUnsignedMin((uint64_t)&__s1, (uint64_t)&v223);
    uint64_t v57 = (llvm::ConstantInt *)llvm::ConstantInt::get(***v9, (llvm::LLVMContext *)&v223, v56);
    unint64_t Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)v9, v57);
    llvm::ConstantRange::getUnsignedMax((char **)&__s1, (uint64_t)&__src);
    char v60 = (llvm::ConstantInt *)llvm::ConstantInt::get(***v9, (llvm::LLVMContext *)&__src, v59);
    uint64_t v61 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)v9, v60);
    uint64_t UMinExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getUMinExpr((llvm::ScalarEvolution *)v9, v49, v61, 0);
    uint64_t UMaxExpr = llvm::ScalarEvolution::getUMaxExpr((llvm::ScalarEvolution *)v9, Constant, UMinExpr);
    uint64_t v227 = v18 + 32;
    uint64_t result = (uint64_t)sub_1CC13A598(a5, &v227);
    *(void *)(result + 8) = UMaxExpr;
    if (v220 >= 0x41)
    {
      uint64_t result = (uint64_t)__src;
      if (__src) {
        uint64_t result = MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
    }
    if (v224 >= 0x41)
    {
      uint64_t result = (uint64_t)v223;
      if (v223) {
        uint64_t result = MEMORY[0x1D25D9CB0](v223, 0x1000C8000313F17);
      }
    }
    unsigned int v64 = *(_DWORD *)(v32 + 8);
    if (v64 >= *(_DWORD *)(v32 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)v32 + 8 * v64) = v47;
    ++*(_DWORD *)(v32 + 8);
    if (v232 >= 0x41)
    {
      uint64_t result = (uint64_t)__s2;
      if (__s2) {
        uint64_t result = MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
      }
    }
    if (v230 >= 0x41)
    {
      uint64_t result = (uint64_t)__s1;
      if (__s1) {
        return MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
      }
    }
    return result;
  }
  if (memcmp((const void *)result, v45, (((unint64_t)v230 + 63) >> 3) & 0x3FFFFFF8)) {
    goto LABEL_73;
  }
  uint64_t result = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__s1);
  if (result != v44) {
    goto LABEL_73;
  }
LABEL_126:
  if (v232 >= 0x41 && v45 != 0)
  {
    uint64_t result = MEMORY[0x1D25D9CB0](v45, 0x1000C8000313F17);
    unsigned int v44 = v230;
  }
  if (v44 >= 0x41)
  {
    uint64_t result = (uint64_t)__s1;
    if (__s1) {
      uint64_t result = MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
    }
  }
  uint64_t v8 = v216;
  uint64_t v5 = a5;
LABEL_26:
  if (*((_WORD *)v6 + 12)) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v6;
  }
  if (v7 != 32 || !v22) {
    goto LABEL_56;
  }
  uint64_t result = *((void *)v22 + 4);
  unsigned int v23 = *(unsigned __int8 *)(result + 16);
  if (result) {
    BOOL v24 = v23 == 16;
  }
  else {
    BOOL v24 = 0;
  }
  if (v24)
  {
    uint64_t v25 = *(unsigned int *)(result + 32);
    if (v25 >= 0x41)
    {
      int v199 = 0;
      int64_t v200 = (unint64_t)(v25 + 63) >> 6;
      do
      {
        BOOL v37 = v200-- < 1;
        if (v37) {
          break;
        }
        unint64_t v201 = *(void *)(*(void *)(result + 24) + 8 * v200);
        v199 += __clz(v201);
      }
      while (!v201);
      int v202 = v25 | 0xFFFFFFC0;
      if ((v25 & 0x3F) == 0) {
        int v202 = 0;
      }
      if (v199 + v202 != v25) {
        goto LABEL_56;
      }
    }
    else if (*(void *)(result + 24))
    {
      goto LABEL_56;
    }
  }
  else
  {
    if (result) {
      BOOL v36 = v23 == 17;
    }
    else {
      BOOL v36 = 0;
    }
    if (v36)
    {
      uint64_t result = sub_1CB844168(result, 0.0);
      if ((result & 1) == 0) {
        goto LABEL_56;
      }
    }
    else
    {
      BOOL v37 = v23 > 0x14;
      int v38 = (1 << v23) & 0x1C2000;
      if (v37 || v38 == 0) {
        goto LABEL_56;
      }
    }
  }
  unint64_t v223 = 0;
  unint64_t __src = 0;
  uint64_t result = llvm::ScalarEvolution::matchURem((llvm::ScalarEvolution *)v9, v11, &v223, (const llvm::SCEV **)&__src);
  if (result)
  {
    uint64_t v26 = v223;
    if (v223)
    {
      if (*((_WORD *)v223 + 12) == 14)
      {
        uint64_t v27 = __src;
        uint64_t UDivExpr = (void *)llvm::ScalarEvolution::getUDivExpr((llvm::ScalarEvolution *)v9, v223, (unint64_t)__src);
        __s1 = &__s2;
        __s2 = UDivExpr;
        unint64_t v232 = v27;
        uint64_t v230 = 0x200000002;
        uint64_t MulExpr = llvm::ScalarEvolution::getMulExpr(v9, &__s1, 0, 0);
        if (__s1 != &__s2) {
          free(__s1);
        }
        __s1 = v26;
        uint64_t result = (uint64_t)sub_1CC13A598(v5, (uint64_t *)&__s1);
        *(void *)(result + 8) = MulExpr;
        uint64_t v30 = *(void *)(v8 + 8);
        unsigned int v31 = *(_DWORD *)(v30 + 8);
        if (v31 >= *(_DWORD *)(v30 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)v30 + 8 * v31) = v26;
LABEL_287:
        ++*(_DWORD *)(v30 + 8);
        return result;
      }
    }
  }
LABEL_56:
  if (!*((_WORD *)v11 + 12)) {
    return result;
  }
  uint64_t result = llvm::ScalarEvolution::containsAddRecurrence((llvm::ScalarEvolution *)v9, v6);
  if (result) {
    return result;
  }
  int v42 = *((unsigned __int16 *)v11 + 12);
  if (v42 == 14)
  {
    uint64_t v43 = (uint64_t)v6;
    uint64_t v6 = v11;
  }
  else if (*((_WORD *)v6 + 12) == 14)
  {
    uint64_t v218 = v6;
    uint64_t v43 = (uint64_t)v11;
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = 4;
        goto LABEL_136;
      case 3:
        LODWORD(v7) = 5;
        goto LABEL_136;
      case 4:
        LODWORD(v7) = 2;
        goto LABEL_136;
      case 5:
        LODWORD(v7) = 3;
        goto LABEL_136;
      case 10:
        LODWORD(v7) = 12;
        goto LABEL_136;
      case 11:
        LODWORD(v7) = 13;
        goto LABEL_136;
      case 12:
        LODWORD(v7) = 10;
        goto LABEL_136;
      case 13:
        LODWORD(v7) = 11;
        goto LABEL_136;
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
        __break(1u);
LABEL_368:
        unsigned int v106 = *(_DWORD *)(**((void **)v6 + 2) + 8);
LABEL_194:
        uint64_t v107 = v41[63];
        if (v106 < 0x100) {
          goto LABEL_203;
        }
        unsigned int v108 = v106 >> 8;
        unint64_t v109 = *((unsigned int *)v41 + 128);
        unint64_t v110 = v107;
        if (v109)
        {
          unint64_t v110 = v107;
          unint64_t v111 = v109;
          do
          {
            unint64_t v112 = v111 >> 1;
            uint64_t v113 = (uint64_t)v110 + 16 * (v111 >> 1);
            unsigned int v114 = *(_DWORD *)(v113 + 8);
            unsigned int v115 = (llvm::ConstantInt *)(v113 + 16);
            v111 += ~(v111 >> 1);
            if (v114 < v108) {
              unint64_t v110 = v115;
            }
            else {
              unint64_t v111 = v112;
            }
          }
          while (v111);
        }
        if (v110 == (llvm::ConstantInt *)((char *)v107 + 16 * v109) || *((_DWORD *)v110 + 2) != v108) {
LABEL_203:
        }
          unint64_t v110 = v107;
        uint64_t v116 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v6, (llvm::LLVMContext *)*((unsigned int *)v110 + 3));
        if ((*((_DWORD *)v6 + 2) & 0xFE) == 0x12)
        {
          unint64_t v207 = (llvm::Type *)*((unsigned int *)v6 + 8);
          if (*((_DWORD *)v6 + 2) == 19) {
            llvm::ScalableVectorType::get(v116, v207);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v116, v207);
          }
        }
        uint64_t v6 = (llvm::SCEV *)v116;
LABEL_206:
        unint64_t v117 = *(llvm::ConstantInt **)v6;
        unsigned int v118 = *((_DWORD *)v6 + 2);
        LODWORD(v230) = v118 >> 8;
        if (v118 >> 8 > 0x40) {
          operator new[]();
        }
        if (v118 <= 0xFF) {
          LOBYTE(v119) = 0;
        }
        else {
          unint64_t v119 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v118) + 63);
        }
        __s1 = (void *)(v119 & 1);
        unsigned int v120 = (llvm::ConstantInt *)llvm::ConstantInt::get(v117, (llvm::LLVMContext *)&__s1, v40);
        if (v230 >= 0x41 && __s1) {
          MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
        }
        uint64_t v121 = (const llvm::APInt *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)v9, v120);
        unint64_t MinusSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV((llvm::ScalarEvolution *)v9, (llvm::SCEV *)v43, v121, 0, 0);
        unsigned int v95 = (llvm::ScalarEvolution *)v9;
        uint64_t v96 = (const llvm::SCEV *)v7;
LABEL_212:
        uint64_t result = llvm::ScalarEvolution::getUMinExpr(v95, v96, MinusSCEV, 0);
        goto LABEL_283;
      case 34:
        LODWORD(v7) = 36;
        goto LABEL_136;
      case 35:
        LODWORD(v7) = 37;
        goto LABEL_136;
      case 36:
        LODWORD(v7) = 34;
        goto LABEL_136;
      case 37:
        LODWORD(v7) = 35;
        goto LABEL_136;
      case 38:
        LODWORD(v7) = 40;
        goto LABEL_136;
      case 39:
        LODWORD(v7) = 41;
        goto LABEL_136;
      case 40:
        LODWORD(v7) = 38;
        goto LABEL_136;
      case 41:
        LODWORD(v7) = 39;
LABEL_136:
        uint64_t v43 = (uint64_t)v11;
        break;
      default:
        break;
    }
  }
  else
  {
    uint64_t v43 = (uint64_t)v6;
    uint64_t v6 = v11;
    if (v42 != 2) {
      return result;
    }
  }
  uint64_t v69 = *(void *)v5;
  uint64_t v70 = *(unsigned int *)(v5 + 16);
  if (!v70) {
    goto LABEL_144;
  }
  LODWORD(v71) = ((v6 >> 4) ^ (v6 >> 9)) & (v70 - 1);
  unsigned int v72 = (void *)(v69 + 16 * v71);
  unsigned int v73 = (llvm::SCEV *)*v72;
  if (v6 != (llvm::SCEV *)*v72)
  {
    int v74 = 1;
    while (v73 != (llvm::SCEV *)-4096)
    {
      int v75 = v71 + v74++;
      uint64_t v71 = v75 & (v70 - 1);
      unsigned int v73 = *(llvm::SCEV **)(v69 + 16 * v71);
      if (v6 == v73)
      {
        unsigned int v72 = (void *)(v69 + 16 * v71);
        goto LABEL_143;
      }
    }
LABEL_144:
    uint64_t v76 = (void *)(v69 + 16 * v70);
    unsigned int v72 = v76;
    goto LABEL_145;
  }
LABEL_143:
  uint64_t v76 = (void *)(v69 + 16 * v70);
LABEL_145:
  BOOL v20 = v72 == v76;
  int v77 = (uint64_t *)&v218;
  if (!v20) {
    int v77 = v72 + 1;
  }
  int v78 = v7 - 32;
  uint64_t v7 = *v77;
  switch(v78)
  {
    case 0:
      if (!*(_WORD *)(v43 + 24)) {
        goto LABEL_284;
      }
      return result;
    case 1:
      if (*(_WORD *)(v43 + 24)) {
        return result;
      }
      uint64_t result = *(void *)(v43 + 32);
      unsigned int v92 = *(unsigned __int8 *)(result + 16);
      if (result && v92 == 16)
      {
        uint64_t v93 = *(unsigned int *)(result + 32);
        if (v93 > 0x40)
        {
          int v203 = 0;
          int64_t v204 = (unint64_t)(v93 + 63) >> 6;
          do
          {
            BOOL v37 = v204-- < 1;
            if (v37) {
              break;
            }
            unint64_t v205 = *(void *)(*(void *)(result + 24) + 8 * v204);
            v203 += __clz(v205);
          }
          while (!v205);
          int v206 = v93 | 0xFFFFFFC0;
          if ((v93 & 0x3F) == 0) {
            int v206 = 0;
          }
          if (v203 + v206 != v93) {
            return result;
          }
        }
        else if (*(void *)(result + 24))
        {
          return result;
        }
      }
      else if (result && v92 == 17)
      {
        uint64_t result = sub_1CB844168(result, 0.0);
        if ((result & 1) == 0) {
          return result;
        }
      }
      else
      {
        BOOL v37 = v92 > 0x14;
        int v178 = (1 << v92) & 0x1C2000;
        if (v37 || v178 == 0) {
          return result;
        }
      }
      while (2)
      {
        switch(*(_WORD *)(v43 + 24))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            uint64_t v180 = v43 + 40;
            goto LABEL_303;
          case 4:
            uint64_t v180 = v43 + 48;
            goto LABEL_303;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            unsigned __int32 v94 = *(uint64_t **)(v43 + 32);
            goto LABEL_170;
          case 6:
            unsigned __int32 v94 = (uint64_t *)(v43 + 40);
LABEL_170:
            uint64_t v43 = *v94;
            continue;
          case 0xE:
            uint64_t v180 = *(void *)(v43 - 8);
            goto LABEL_303;
          default:
            uint64_t v180 = *(void *)(v43 + 32);
LABEL_303:
            uint64_t v181 = *(uint64_t ***)v180;
            unsigned int v182 = *(_DWORD *)(*(void *)v180 + 8);
            if (v182 == 13)
            {
              uint64_t v194 = v8;
            }
            else
            {
              unint64_t v183 = (*v9)[5];
              if ((v182 & 0xFE) == 0x12) {
                unsigned int v182 = *(_DWORD *)(*v181[2] + 8);
              }
              uint64_t v184 = v183[63];
              if (v182 < 0x100) {
                goto LABEL_315;
              }
              unsigned int v185 = v182 >> 8;
              unint64_t v186 = *((unsigned int *)v183 + 128);
              uint64_t v187 = v184;
              if (v186)
              {
                uint64_t v187 = v184;
                unint64_t v188 = v186;
                do
                {
                  unint64_t v189 = v188 >> 1;
                  uint64_t v190 = (uint64_t)v187 + 16 * (v188 >> 1);
                  unsigned int v191 = *(_DWORD *)(v190 + 8);
                  unint64_t v192 = (llvm::ConstantInt *)(v190 + 16);
                  v188 += ~(v188 >> 1);
                  if (v191 < v185) {
                    uint64_t v187 = v192;
                  }
                  else {
                    unint64_t v188 = v189;
                  }
                }
                while (v188);
              }
              if (v187 == (llvm::ConstantInt *)((char *)v184 + 16 * v186) || *((_DWORD *)v187 + 2) != v185) {
LABEL_315:
              }
                uint64_t v187 = v184;
              uint64_t v193 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v181, (llvm::LLVMContext *)*((unsigned int *)v187 + 3));
              uint64_t v194 = v8;
              if ((v181[1] & 0xFE) == 0x12)
              {
                unint64_t v215 = (llvm::Type *)*((unsigned int *)v181 + 8);
                if (*((_DWORD *)v181 + 2) == 19) {
                  llvm::ScalableVectorType::get(v193, v215);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v193, v215);
                }
              }
              uint64_t v181 = v193;
            }
            uint64_t v195 = (llvm::ConstantInt *)*v181;
            unsigned int v196 = *((_DWORD *)v181 + 2);
            LODWORD(v230) = v196 >> 8;
            if (v196 >> 8 > 0x40) {
              operator new[]();
            }
            if (v196 <= 0xFF) {
              LOBYTE(v197) = 0;
            }
            else {
              unint64_t v197 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v196) + 63);
            }
            __s1 = (void *)(v197 & 1);
            unint64_t v198 = (llvm::ConstantInt *)llvm::ConstantInt::get(v195, (llvm::LLVMContext *)&__s1, v40);
            uint64_t v8 = v194;
            if (v230 >= 0x41 && __s1) {
              MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
            }
            unint64_t v140 = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)v9, v198);
            break;
        }
        break;
      }
LABEL_235:
      uint64_t v88 = (const llvm::SCEV *)v140;
      unsigned int v86 = (llvm::ScalarEvolution *)v9;
      uint64_t v87 = (const llvm::SCEV *)v7;
LABEL_236:
      uint64_t result = llvm::ScalarEvolution::getUMaxExpr(v86, v87, v88);
      break;
    case 2:
      uint64_t v84 = v43;
      while (2)
      {
        switch(*(_WORD *)(v84 + 24))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            unsigned int v103 = (uint64_t ***)(v84 + 40);
            goto LABEL_214;
          case 4:
            unsigned int v103 = (uint64_t ***)(v84 + 48);
            goto LABEL_214;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            unsigned int v85 = *(uint64_t **)(v84 + 32);
            goto LABEL_159;
          case 6:
            unsigned int v85 = (uint64_t *)(v84 + 40);
LABEL_159:
            uint64_t v84 = *v85;
            continue;
          case 0xE:
            unsigned int v103 = *(uint64_t ****)(v84 - 8);
            goto LABEL_214;
          default:
            unsigned int v103 = *(uint64_t ****)(v84 + 32);
LABEL_214:
            __int32 v122 = *v103;
            unsigned int v123 = *((_DWORD *)*v103 + 2);
            if (v123 != 13)
            {
              __int32 v124 = (*v9)[5];
              if ((v123 & 0xFE) == 0x12) {
                unsigned int v123 = *(_DWORD *)(*v122[2] + 8);
              }
              unsigned int v125 = v124[63];
              if (v123 < 0x100) {
                goto LABEL_226;
              }
              unsigned int v126 = v123 >> 8;
              unint64_t v127 = *((unsigned int *)v124 + 128);
              BOOL v128 = v125;
              if (v127)
              {
                BOOL v128 = v125;
                unint64_t v129 = v127;
                do
                {
                  unint64_t v130 = v129 >> 1;
                  uint64_t v131 = (uint64_t)v128 + 16 * (v129 >> 1);
                  unsigned int v132 = *(_DWORD *)(v131 + 8);
                  uint64_t v133 = (llvm::ConstantInt *)(v131 + 16);
                  v129 += ~(v129 >> 1);
                  if (v132 < v126) {
                    BOOL v128 = v133;
                  }
                  else {
                    unint64_t v129 = v130;
                  }
                }
                while (v129);
              }
              if (v128 == (llvm::ConstantInt *)((char *)v125 + 16 * v127) || *((_DWORD *)v128 + 2) != v126) {
LABEL_226:
              }
                BOOL v128 = v125;
              unsigned int v134 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v122, (llvm::LLVMContext *)*((unsigned int *)v128 + 3));
              if ((v122[1] & 0xFE) == 0x12)
              {
                unint64_t v208 = (llvm::Type *)*((unsigned int *)v122 + 8);
                if (*((_DWORD *)v122 + 2) == 19) {
                  llvm::ScalableVectorType::get(v134, v208);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v134, v208);
                }
              }
              __int32 v122 = v134;
            }
            unsigned int v135 = (llvm::ConstantInt *)*v122;
            unsigned int v136 = *((_DWORD *)v122 + 2);
            LODWORD(v230) = v136 >> 8;
            if (v136 >> 8 > 0x40) {
              operator new[]();
            }
            if (v136 <= 0xFF) {
              LOBYTE(v137) = 0;
            }
            else {
              unint64_t v137 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v136) + 63);
            }
            __s1 = (void *)(v137 & 1);
            uint64_t v138 = (llvm::ConstantInt *)llvm::ConstantInt::get(v135, (llvm::LLVMContext *)&__s1, v40);
            if (v230 >= 0x41 && __s1) {
              MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
            }
            unint64_t v139 = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)v9, v138);
            unint64_t v140 = sub_1CBFD7D6C(v9, v43, v139, 0, 0);
            break;
        }
        goto LABEL_235;
      }
    case 3:
      unsigned int v86 = (llvm::ScalarEvolution *)v9;
      uint64_t v87 = (const llvm::SCEV *)*v77;
      uint64_t v88 = (const llvm::SCEV *)v43;
      goto LABEL_236;
    case 4:
      uint64_t v79 = v43;
      while (2)
      {
        switch(*(_WORD *)(v79 + 24))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            unint64_t v102 = (llvm::SCEV **)(v79 + 40);
            goto LABEL_192;
          case 4:
            unint64_t v102 = (llvm::SCEV **)(v79 + 48);
            goto LABEL_192;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            unsigned int v80 = *(uint64_t **)(v79 + 32);
            goto LABEL_153;
          case 6:
            unsigned int v80 = (uint64_t *)(v79 + 40);
LABEL_153:
            uint64_t v79 = *v80;
            continue;
          case 0xE:
            unint64_t v102 = *(llvm::SCEV ***)(v79 - 8);
            goto LABEL_192;
          default:
            unint64_t v102 = *(llvm::SCEV ***)(v79 + 32);
LABEL_192:
            uint64_t v6 = *v102;
            unsigned int v106 = *((_DWORD *)*v102 + 2);
            if (v106 == 13) {
              goto LABEL_206;
            }
            uint64_t v41 = (*v9)[5];
            if ((v106 & 0xFE) != 0x12) {
              goto LABEL_194;
            }
            goto LABEL_368;
        }
      }
    case 5:
      unsigned int v95 = (llvm::ScalarEvolution *)v9;
      uint64_t v96 = (const llvm::SCEV *)*v77;
      unint64_t MinusSCEV = (const llvm::SCEV *)v43;
      goto LABEL_212;
    case 6:
      uint64_t v98 = v43;
      while (2)
      {
        switch(*(_WORD *)(v98 + 24))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            uint64_t v104 = (uint64_t ***)(v98 + 40);
            goto LABEL_238;
          case 4:
            uint64_t v104 = (uint64_t ***)(v98 + 48);
            goto LABEL_238;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            unsigned int v99 = *(uint64_t **)(v98 + 32);
            goto LABEL_176;
          case 6:
            unsigned int v99 = (uint64_t *)(v98 + 40);
LABEL_176:
            uint64_t v98 = *v99;
            continue;
          case 0xE:
            uint64_t v104 = *(uint64_t ****)(v98 - 8);
            goto LABEL_238;
          default:
            uint64_t v104 = *(uint64_t ****)(v98 + 32);
LABEL_238:
            __int32 v141 = *v104;
            unsigned int v142 = *((_DWORD *)*v104 + 2);
            if (v142 != 13)
            {
              __int32 v143 = (*v9)[5];
              if ((v142 & 0xFE) == 0x12) {
                unsigned int v142 = *(_DWORD *)(*v141[2] + 8);
              }
              unsigned int v144 = v143[63];
              if (v142 < 0x100) {
                goto LABEL_250;
              }
              unsigned int v145 = v142 >> 8;
              unint64_t v146 = *((unsigned int *)v143 + 128);
              uint64_t v147 = v144;
              if (v146)
              {
                uint64_t v147 = v144;
                unint64_t v148 = v146;
                do
                {
                  unint64_t v149 = v148 >> 1;
                  uint64_t v150 = (uint64_t)v147 + 16 * (v148 >> 1);
                  unsigned int v151 = *(_DWORD *)(v150 + 8);
                  uint64_t v152 = (llvm::ConstantInt *)(v150 + 16);
                  v148 += ~(v148 >> 1);
                  if (v151 < v145) {
                    uint64_t v147 = v152;
                  }
                  else {
                    unint64_t v148 = v149;
                  }
                }
                while (v148);
              }
              if (v147 == (llvm::ConstantInt *)((char *)v144 + 16 * v146) || *((_DWORD *)v147 + 2) != v145) {
LABEL_250:
              }
                uint64_t v147 = v144;
              uint64_t v153 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v141, (llvm::LLVMContext *)*((unsigned int *)v147 + 3));
              if ((v141[1] & 0xFE) == 0x12)
              {
                uint64_t v209 = (llvm::Type *)*((unsigned int *)v141 + 8);
                if (*((_DWORD *)v141 + 2) == 19) {
                  llvm::ScalableVectorType::get(v153, v209);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v153, v209);
                }
              }
              __int32 v141 = v153;
            }
            unsigned int v154 = (llvm::ConstantInt *)*v141;
            unsigned int v155 = *((_DWORD *)v141 + 2);
            LODWORD(v230) = v155 >> 8;
            if (v155 >> 8 > 0x40) {
              operator new[]();
            }
            if (v155 <= 0xFF) {
              LOBYTE(v156) = 0;
            }
            else {
              unint64_t v156 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v155) + 63);
            }
            __s1 = (void *)(v156 & 1);
            unsigned int v157 = (llvm::ConstantInt *)llvm::ConstantInt::get(v154, (llvm::LLVMContext *)&__s1, v40);
            if (v230 >= 0x41 && __s1) {
              MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
            }
            unint64_t v158 = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)v9, v157);
            unint64_t v91 = (const llvm::SCEV *)sub_1CBFD7D6C(v9, v43, v158, 0, 0);
            BOOL v89 = (llvm::ScalarEvolution *)v9;
            uint64_t v90 = (const llvm::SCEV *)v7;
            break;
        }
        goto LABEL_259;
      }
    case 7:
      BOOL v89 = (llvm::ScalarEvolution *)v9;
      uint64_t v90 = (const llvm::SCEV *)*v77;
      unint64_t v91 = (const llvm::SCEV *)v43;
LABEL_259:
      uint64_t result = llvm::ScalarEvolution::getSMaxExpr(v89, v90, v91);
      break;
    case 8:
      uint64_t v100 = v43;
      while (2)
      {
        switch(*(_WORD *)(v100 + 24))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            unsigned int v105 = (uint64_t ***)(v100 + 40);
            goto LABEL_261;
          case 4:
            unsigned int v105 = (uint64_t ***)(v100 + 48);
            goto LABEL_261;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            unint64_t v101 = *(uint64_t **)(v100 + 32);
            goto LABEL_181;
          case 6:
            unint64_t v101 = (uint64_t *)(v100 + 40);
LABEL_181:
            uint64_t v100 = *v101;
            continue;
          case 0xE:
            unsigned int v105 = *(uint64_t ****)(v100 - 8);
            goto LABEL_261;
          default:
            unsigned int v105 = *(uint64_t ****)(v100 + 32);
LABEL_261:
            uint64_t v159 = *v105;
            unsigned int v160 = *((_DWORD *)*v105 + 2);
            if (v160 != 13)
            {
              unsigned int v161 = (*v9)[5];
              if ((v160 & 0xFE) == 0x12) {
                unsigned int v160 = *(_DWORD *)(*v159[2] + 8);
              }
              unsigned int v162 = v161[63];
              if (v160 < 0x100) {
                goto LABEL_273;
              }
              unsigned int v163 = v160 >> 8;
              unint64_t v164 = *((unsigned int *)v161 + 128);
              uint64_t v165 = v162;
              if (v164)
              {
                uint64_t v165 = v162;
                unint64_t v166 = v164;
                do
                {
                  unint64_t v167 = v166 >> 1;
                  uint64_t v168 = (uint64_t)v165 + 16 * (v166 >> 1);
                  unsigned int v169 = *(_DWORD *)(v168 + 8);
                  uint64_t v170 = (llvm::ConstantInt *)(v168 + 16);
                  v166 += ~(v166 >> 1);
                  if (v169 < v163) {
                    uint64_t v165 = v170;
                  }
                  else {
                    unint64_t v166 = v167;
                  }
                }
                while (v166);
              }
              if (v165 == (llvm::ConstantInt *)((char *)v162 + 16 * v164) || *((_DWORD *)v165 + 2) != v163) {
LABEL_273:
              }
                uint64_t v165 = v162;
              uint64_t v171 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*v159, (llvm::LLVMContext *)*((unsigned int *)v165 + 3));
              if ((v159[1] & 0xFE) == 0x12)
              {
                unsigned int v210 = (llvm::Type *)*((unsigned int *)v159 + 8);
                if (*((_DWORD *)v159 + 2) == 19) {
                  llvm::ScalableVectorType::get(v171, v210);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v171, v210);
                }
              }
              uint64_t v159 = v171;
            }
            uint64_t v172 = (llvm::ConstantInt *)*v159;
            unsigned int v173 = *((_DWORD *)v159 + 2);
            LODWORD(v230) = v173 >> 8;
            if (v173 >> 8 > 0x40) {
              operator new[]();
            }
            if (v173 <= 0xFF) {
              LOBYTE(v174) = 0;
            }
            else {
              unint64_t v174 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v173) + 63);
            }
            __s1 = (void *)(v174 & 1);
            uint64_t v175 = (llvm::ConstantInt *)llvm::ConstantInt::get(v172, (llvm::LLVMContext *)&__s1, v40);
            if (v230 >= 0x41 && __s1) {
              MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
            }
            unsigned int v176 = (const llvm::APInt *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)v9, v175);
            int v83 = (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV((llvm::ScalarEvolution *)v9, (llvm::SCEV *)v43, v176, 0, 0);
            uint64_t v81 = (llvm::ScalarEvolution *)v9;
            BOOL v82 = (const llvm::SCEV *)v7;
            break;
        }
        goto LABEL_282;
      }
    case 9:
      uint64_t v81 = (llvm::ScalarEvolution *)v9;
      BOOL v82 = (const llvm::SCEV *)*v77;
      int v83 = (const llvm::SCEV *)v43;
LABEL_282:
      uint64_t result = llvm::ScalarEvolution::getSMinExpr(v81, v82, v83);
      break;
    default:
      return result;
  }
LABEL_283:
  uint64_t v43 = result;
  if (result)
  {
LABEL_284:
    uint64_t result = (uint64_t)sub_1CC13A598(v5, (uint64_t *)&v218);
    *(void *)(result + 8) = v43;
    if (v218 != (llvm::SCEV *)v7) {
      return result;
    }
    uint64_t v30 = *(void *)(v8 + 8);
    unsigned int v177 = *(_DWORD *)(v30 + 8);
    if (v177 >= *(_DWORD *)(v30 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)v30 + 8 * v177) = v7;
    goto LABEL_287;
  }
  return result;
}

uint64_t sub_1CC130A70(llvm::ScalarEvolution **a1, uint64_t a2)
{
  v89[2] = *MEMORY[0x1E4F143B8];
  uint64_t v86 = a2;
  uint64_t v5 = (uint64_t)(a1 + 1);
  uint64_t v4 = a1[1];
  uint64_t v6 = *((unsigned int *)a1 + 6);
  unsigned int v7 = a2 >> 4;
  if (v6)
  {
    LODWORD(v8) = (v6 - 1) & (v7 ^ (a2 >> 9));
    uint64_t v9 = (void *)((char *)v4 + 16 * v8);
    uint64_t v10 = *v9;
    if (*v9 == a2) {
      goto LABEL_6;
    }
    int v11 = 1;
    while (v10 != -4096)
    {
      int v53 = v8 + v11++;
      uint64_t v8 = v53 & (v6 - 1);
      uint64_t v10 = *((void *)v4 + 2 * v8);
      if (v10 == a2)
      {
        uint64_t v9 = (void *)((char *)v4 + 16 * v8);
        goto LABEL_6;
      }
    }
  }
  uint64_t v9 = (void *)((char *)v4 + 16 * v6);
LABEL_6:
  if (v9 == (void *)((char *)v4 + 16 * v6))
  {
    uint64_t v12 = a2;
    switch(*(_WORD *)(a2 + 24))
    {
      case 1:
        uint64_t v62 = (const llvm::SCEV *)sub_1CC130A70(a1, *(void *)(a2 + 32));
        uint64_t v12 = a2;
        if (v62 != *(const llvm::SCEV **)(a2 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getTruncateExpr(*a1, v62, *(llvm::Type **)(a2 + 40), 0);
          goto LABEL_44;
        }
        goto LABEL_8;
      case 2:
        BOOL v37 = a1[4];
        uint64_t v38 = *(void *)v37;
        uint64_t v39 = *((unsigned int *)v37 + 4);
        if (!v39) {
          goto LABEL_40;
        }
        LODWORD(v40) = (v39 - 1) & (v7 ^ (a2 >> 9));
        uint64_t v26 = (uint64_t *)(v38 + 16 * v40);
        uint64_t v41 = *v26;
        if (*v26 == a2) {
          goto LABEL_41;
        }
        int v42 = 1;
        do
        {
          if (v41 == -4096)
          {
LABEL_40:
            uint64_t v26 = (uint64_t *)(v38 + 16 * v39);
            goto LABEL_41;
          }
          int v78 = v40 + v42++;
          uint64_t v40 = v78 & (v39 - 1);
          uint64_t v41 = *(void *)(v38 + 16 * v40);
        }
        while (v41 != a2);
        uint64_t v26 = (uint64_t *)(v38 + 16 * v40);
LABEL_41:
        if (v26 != (uint64_t *)(v38 + 16 * v39)) {
          goto LABEL_24;
        }
        uint64_t v43 = (const llvm::SCEV *)sub_1CC130A70(a1, *(void *)(a2 + 32));
        uint64_t v12 = a2;
        if (v43 != *(const llvm::SCEV **)(a2 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getZeroExtendExpr(*a1, v43, *(llvm::Type **)(a2 + 40), 0);
          goto LABEL_44;
        }
        goto LABEL_8;
      case 3:
        unsigned int v85 = (llvm::detail::IEEEFloat **)sub_1CC130A70(a1, *(void *)(a2 + 32));
        uint64_t v12 = a2;
        if (v85 != *(llvm::detail::IEEEFloat ***)(a2 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getSignExtendExpr(*a1, v85, *(uint64_t ***)(a2 + 40), 0);
          goto LABEL_44;
        }
        goto LABEL_8;
      case 4:
        uint64_t v87 = v89;
        uint64_t v88 = 0x200000000;
        uint64_t v29 = *(void *)(a2 + 40);
        uint64_t v12 = a2;
        if (v29)
        {
          char v30 = 0;
          unsigned int v31 = *(void **)(a2 + 32);
          uint64_t v32 = 8 * v29;
          do
          {
            uint64_t v33 = *v31;
            uint64_t v34 = sub_1CC130A70(a1, *v31);
            if (v88 >= (unint64_t)HIDWORD(v88)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v87 + v88) = v34;
            LODWORD(v88) = v88 + 1;
            uint64_t v35 = v87;
            v30 |= v33 != *((void *)v87 + v88 - 1);
            ++v31;
            v32 -= 8;
          }
          while (v32);
          if (v30)
          {
            uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(*a1, &v87, 0, 0);
            goto LABEL_33;
          }
          uint64_t v12 = a2;
          goto LABEL_34;
        }
        goto LABEL_8;
      case 5:
        uint64_t v87 = v89;
        uint64_t v88 = 0x200000000;
        uint64_t v56 = *(void *)(a2 + 40);
        uint64_t v12 = a2;
        if (v56)
        {
          char v57 = 0;
          uint64_t v58 = *(void **)(a2 + 32);
          uint64_t v59 = 8 * v56;
          do
          {
            uint64_t v60 = *v58;
            uint64_t v61 = sub_1CC130A70(a1, *v58);
            if (v88 >= (unint64_t)HIDWORD(v88)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v87 + v88) = v61;
            LODWORD(v88) = v88 + 1;
            uint64_t v35 = v87;
            v57 |= v60 != *((void *)v87 + v88 - 1);
            ++v58;
            v59 -= 8;
          }
          while (v59);
          uint64_t v12 = a2;
          if (v57)
          {
            uint64_t AddExpr = llvm::ScalarEvolution::getMulExpr(*a1, &v87, 0, 0);
            goto LABEL_33;
          }
          goto LABEL_34;
        }
        goto LABEL_8;
      case 6:
        uint64_t v70 = (const llvm::SCEV *)sub_1CC130A70(a1, *(void *)(a2 + 32));
        unint64_t v71 = sub_1CC130A70(a1, *(void *)(a2 + 40));
        if (v70 != *(const llvm::SCEV **)(a2 + 32) || (uint64_t v12 = a2, v71 != *(void *)(a2 + 40)))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getUDivExpr(*a1, v70, v71);
          goto LABEL_44;
        }
        goto LABEL_8;
      case 8:
        uint64_t v87 = v89;
        uint64_t v88 = 0x200000000;
        uint64_t v45 = *(void *)(a2 + 40);
        uint64_t v12 = a2;
        if (v45)
        {
          char v46 = 0;
          uint64_t v47 = *(void **)(a2 + 32);
          uint64_t v48 = 8 * v45;
          do
          {
            uint64_t v49 = *v47;
            uint64_t v50 = sub_1CC130A70(a1, *v47);
            if (v88 >= (unint64_t)HIDWORD(v88)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v87 + v88) = v50;
            LODWORD(v88) = v88 + 1;
            uint64_t v35 = v87;
            v46 |= v49 != *((void *)v87 + v88 - 1);
            ++v47;
            v48 -= 8;
          }
          while (v48);
          uint64_t v12 = a2;
          if (v46)
          {
            uint64_t v51 = *a1;
            uint64_t v52 = 8;
            goto LABEL_51;
          }
          goto LABEL_34;
        }
        goto LABEL_8;
      case 9:
        uint64_t v87 = v89;
        uint64_t v88 = 0x200000000;
        uint64_t v72 = *(void *)(a2 + 40);
        uint64_t v12 = a2;
        if (v72)
        {
          char v73 = 0;
          int v74 = *(void **)(a2 + 32);
          uint64_t v75 = 8 * v72;
          do
          {
            uint64_t v76 = *v74;
            uint64_t v77 = sub_1CC130A70(a1, *v74);
            if (v88 >= (unint64_t)HIDWORD(v88)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v87 + v88) = v77;
            LODWORD(v88) = v88 + 1;
            uint64_t v35 = v87;
            v73 |= v76 != *((void *)v87 + v88 - 1);
            ++v74;
            v75 -= 8;
          }
          while (v75);
          uint64_t v12 = a2;
          if (v73)
          {
            uint64_t v51 = *a1;
            uint64_t v52 = 9;
            goto LABEL_51;
          }
          goto LABEL_34;
        }
        goto LABEL_8;
      case 0xA:
        uint64_t v87 = v89;
        uint64_t v88 = 0x200000000;
        uint64_t v63 = *(void *)(a2 + 40);
        uint64_t v12 = a2;
        if (v63)
        {
          char v64 = 0;
          unint64_t v65 = *(void **)(a2 + 32);
          uint64_t v66 = 8 * v63;
          do
          {
            uint64_t v67 = *v65;
            uint64_t v68 = sub_1CC130A70(a1, *v65);
            if (v88 >= (unint64_t)HIDWORD(v88)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v87 + v88) = v68;
            LODWORD(v88) = v88 + 1;
            uint64_t v35 = v87;
            v64 |= v67 != *((void *)v87 + v88 - 1);
            ++v65;
            v66 -= 8;
          }
          while (v66);
          uint64_t v12 = a2;
          if (v64)
          {
            uint64_t v51 = *a1;
            uint64_t v52 = 10;
            goto LABEL_51;
          }
          goto LABEL_34;
        }
        goto LABEL_8;
      case 0xB:
        uint64_t v87 = v89;
        uint64_t v88 = 0x200000000;
        uint64_t v79 = *(void *)(a2 + 40);
        uint64_t v12 = a2;
        if (v79)
        {
          char v80 = 0;
          uint64_t v81 = *(void **)(a2 + 32);
          uint64_t v82 = 8 * v79;
          do
          {
            uint64_t v83 = *v81;
            uint64_t v84 = sub_1CC130A70(a1, *v81);
            if (v88 >= (unint64_t)HIDWORD(v88)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v87 + v88) = v84;
            LODWORD(v88) = v88 + 1;
            uint64_t v35 = v87;
            v80 |= v83 != *((void *)v87 + v88 - 1);
            ++v81;
            v82 -= 8;
          }
          while (v82);
          uint64_t v12 = a2;
          if (v80)
          {
            uint64_t v51 = *a1;
            uint64_t v52 = 11;
LABEL_51:
            uint64_t AddExpr = llvm::ScalarEvolution::getMinMaxExpr((uint64_t)v51, v52, (uint64_t **)&v87);
LABEL_33:
            uint64_t v12 = AddExpr;
            uint64_t v35 = v87;
          }
LABEL_34:
          if (v35 != v89) {
            free(v35);
          }
        }
        goto LABEL_8;
      case 0xC:
        uint64_t TruncateExpr = sub_1CD4C2A04((uint64_t *)a1, a2);
        goto LABEL_44;
      case 0xD:
        uint64_t TruncateExpr = sub_1CD4C296C(a1, (const llvm::SCEV *)a2);
LABEL_44:
        uint64_t v12 = TruncateExpr;
        goto LABEL_8;
      case 0xE:
        uint64_t v22 = a1[4];
        uint64_t v23 = *(void *)v22;
        uint64_t v24 = *((unsigned int *)v22 + 4);
        if (!v24) {
          goto LABEL_22;
        }
        LODWORD(v25) = (v24 - 1) & (v7 ^ (a2 >> 9));
        uint64_t v26 = (uint64_t *)(v23 + 16 * v25);
        uint64_t v27 = *v26;
        if (*v26 == a2) {
          goto LABEL_23;
        }
        int v28 = 1;
        break;
      default:
        goto LABEL_8;
    }
    do
    {
      if (v27 == -4096)
      {
LABEL_22:
        uint64_t v26 = (uint64_t *)(v23 + 16 * v24);
        goto LABEL_23;
      }
      int v69 = v25 + v28++;
      uint64_t v25 = v69 & (v24 - 1);
      uint64_t v27 = *(void *)(v23 + 16 * v25);
    }
    while (v27 != a2);
    uint64_t v26 = (uint64_t *)(v23 + 16 * v25);
LABEL_23:
    uint64_t v12 = a2;
    if (v26 != (uint64_t *)(v23 + 16 * v24)) {
LABEL_24:
    }
      uint64_t v12 = v26[1];
LABEL_8:
    int v13 = *((_DWORD *)a1 + 6);
    if (!v13)
    {
      BOOL v20 = 0;
LABEL_15:
      uint64_t v9 = sub_1CC131DD4(v5, (uint64_t)&v86, &v86, v20);
      *uint64_t v9 = v86;
      v9[1] = v12;
      return v9[1];
    }
    uint64_t v14 = a1[1];
    int v15 = v13 - 1;
    unsigned int v16 = v15 & (v7 ^ (a2 >> 9));
    uint64_t v9 = (void *)((char *)v14 + 16 * v16);
    uint64_t v17 = *v9;
    if (*v9 != a2)
    {
      uint64_t v18 = 0;
      int v19 = 1;
      while (v17 != -4096)
      {
        if (v18) {
          BOOL v54 = 0;
        }
        else {
          BOOL v54 = v17 == -8192;
        }
        if (v54) {
          uint64_t v18 = v9;
        }
        unsigned int v55 = v16 + v19++;
        unsigned int v16 = v55 & v15;
        uint64_t v9 = (void *)((char *)v14 + 16 * v16);
        uint64_t v17 = *v9;
        if (*v9 == a2) {
          return v9[1];
        }
      }
      if (v18) {
        BOOL v20 = v18;
      }
      else {
        BOOL v20 = v9;
      }
      goto LABEL_15;
    }
  }
  return v9[1];
}

uint64_t sub_1CC1312F4(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v2) = a2;
  unsigned int v3 = *(_DWORD *)(result + 12);
  unsigned int v4 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v4;
  if (v4 >= v3) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v4) = HIDWORD(a2);
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1CC131398(llvm::ScalarEvolution **a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = a2;
  v92[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2;
  while (2)
  {
    switch(*(_WORD *)(v5 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        uint64_t v7 = v5 + 40;
        goto LABEL_9;
      case 4:
        uint64_t v7 = v5 + 48;
        goto LABEL_9;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v6 = *(uint64_t **)(v5 + 32);
        goto LABEL_4;
      case 6:
        uint64_t v6 = (uint64_t *)(v5 + 40);
LABEL_4:
        uint64_t v5 = *v6;
        continue;
      case 0xE:
        uint64_t v7 = *(void *)(v5 - 8);
        goto LABEL_9;
      default:
        uint64_t v7 = *(void *)(v5 + 32);
LABEL_9:
        if (*(unsigned char *)(*(void *)v7 + 8) != 15) {
          return v3;
        }
        uint64_t v89 = a2;
        uint64_t v8 = a1[1];
        uint64_t v9 = *((unsigned int *)a1 + 6);
        if (!v9) {
          goto LABEL_16;
        }
        LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        int v11 = (void *)((char *)v8 + 16 * v10);
        uint64_t v12 = *v11;
        if (*v11 == a2) {
          goto LABEL_17;
        }
        int v13 = 1;
        break;
    }
    break;
  }
  while (v12 != -4096)
  {
    int v14 = v10 + v13++;
    uint64_t v10 = v14 & (v9 - 1);
    uint64_t v12 = *((void *)v8 + 2 * v10);
    if (v12 == a2)
    {
      int v11 = (void *)((char *)v8 + 16 * v10);
      goto LABEL_17;
    }
  }
LABEL_16:
  int v11 = (void *)((char *)v8 + 16 * v9);
LABEL_17:
  if (v11 == (void *)((char *)v8 + 16 * v9))
  {
    LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
    switch(*(_WORD *)(a2 + 24))
    {
      case 1:
        unsigned int v16 = (const llvm::SCEV *)sub_1CC131398(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)v3;
        if (v16 != *(const llvm::SCEV **)(v3 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getTruncateExpr(*a1, v16, *(llvm::Type **)(v3 + 40), 0);
          goto LABEL_63;
        }
        break;
      case 2:
        int v42 = (const llvm::SCEV *)sub_1CC131398(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)v3;
        if (v42 != *(const llvm::SCEV **)(v3 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getZeroExtendExpr(*a1, v42, *(llvm::Type **)(v3 + 40), 0);
          goto LABEL_63;
        }
        break;
      case 3:
        uint64_t v18 = (llvm::detail::IEEEFloat **)sub_1CC131398(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)v3;
        if (v18 != *(llvm::detail::IEEEFloat ***)(v3 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getSignExtendExpr(*a1, v18, *(uint64_t ***)(v3 + 40), 0);
          goto LABEL_63;
        }
        break;
      case 4:
        uint64_t v90 = v92;
        uint64_t v91 = 0x200000000;
        uint64_t v43 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v43)
        {
          char v44 = 0;
          uint64_t v45 = *(void **)(a2 + 32);
          uint64_t v46 = 8 * v43;
          do
          {
            uint64_t v47 = *v45;
            uint64_t v48 = sub_1CC131398(a1, *v45);
            if (v91 >= (unint64_t)HIDWORD(v91)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v90 + v91) = v48;
            LODWORD(v91) = v91 + 1;
            uint64_t v25 = v90;
            v44 |= v47 != *((void *)v90 + v91 - 1);
            ++v45;
            v46 -= 8;
          }
          while (v46);
          LosslessPtrToIntExpr = (const llvm::SCEV *)v3;
          if (v44)
          {
            uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(*a1, &v90, *(_WORD *)(v3 + 28) & 7, 0);
            goto LABEL_97;
          }
          goto LABEL_98;
        }
        break;
      case 5:
        uint64_t v90 = v92;
        uint64_t v91 = 0x200000000;
        uint64_t v49 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v49)
        {
          char v50 = 0;
          uint64_t v51 = *(void **)(a2 + 32);
          uint64_t v52 = 8 * v49;
          do
          {
            uint64_t v53 = *v51;
            uint64_t v54 = sub_1CC131398(a1, *v51);
            if (v91 >= (unint64_t)HIDWORD(v91)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v90 + v91) = v54;
            LODWORD(v91) = v91 + 1;
            uint64_t v25 = v90;
            v50 |= v53 != *((void *)v90 + v91 - 1);
            ++v51;
            v52 -= 8;
          }
          while (v52);
          LosslessPtrToIntExpr = (const llvm::SCEV *)v3;
          if (v50)
          {
            uint64_t AddExpr = llvm::ScalarEvolution::getMulExpr(*a1, &v90, *(_WORD *)(v3 + 28) & 7, 0);
            goto LABEL_97;
          }
          goto LABEL_98;
        }
        break;
      case 6:
        unsigned int v55 = (const llvm::SCEV *)sub_1CC131398(a1, *(void *)(a2 + 32));
        unint64_t v56 = sub_1CC131398(a1, *(void *)(v3 + 40));
        if (v55 != *(const llvm::SCEV **)(v3 + 32)
          || (LosslessPtrToIntExpr = (const llvm::SCEV *)v3, v56 != *(void *)(v3 + 40)))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getUDivExpr(*a1, v55, v56);
          goto LABEL_63;
        }
        break;
      case 7:
        uint64_t v90 = v92;
        uint64_t v91 = 0x200000000;
        uint64_t v57 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v57)
        {
          char v58 = 0;
          uint64_t v59 = *(void **)(a2 + 32);
          uint64_t v60 = 8 * v57;
          do
          {
            uint64_t v61 = *v59;
            uint64_t v62 = sub_1CC131398(a1, *v59);
            if (v91 >= (unint64_t)HIDWORD(v91)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v90 + v91) = v62;
            LODWORD(v91) = v91 + 1;
            uint64_t v25 = v90;
            v58 |= v61 != *((void *)v90 + v91 - 1);
            ++v59;
            v60 -= 8;
          }
          while (v60);
          LosslessPtrToIntExpr = (const llvm::SCEV *)v3;
          if (v58)
          {
            uint64_t AddExpr = llvm::ScalarEvolution::getAddRecExpr(*a1, (uint64_t **)&v90, *(const llvm::Loop **)(v3 + 48), *(_WORD *)(v3 + 28) & 7);
            goto LABEL_97;
          }
          goto LABEL_98;
        }
        break;
      case 8:
        uint64_t v90 = v92;
        uint64_t v91 = 0x200000000;
        uint64_t v19 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v19)
        {
          char v20 = 0;
          unsigned int v21 = *(void **)(a2 + 32);
          uint64_t v22 = 8 * v19;
          do
          {
            uint64_t v23 = *v21;
            uint64_t v24 = sub_1CC131398(a1, *v21);
            if (v91 >= (unint64_t)HIDWORD(v91)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v90 + v91) = v24;
            LODWORD(v91) = v91 + 1;
            uint64_t v25 = v90;
            v20 |= v23 != *((void *)v90 + v91 - 1);
            ++v21;
            v22 -= 8;
          }
          while (v22);
          LosslessPtrToIntExpr = (const llvm::SCEV *)v3;
          if (v20)
          {
            uint64_t v75 = *a1;
            uint64_t v76 = 8;
            goto LABEL_96;
          }
          goto LABEL_98;
        }
        break;
      case 9:
        uint64_t v90 = v92;
        uint64_t v91 = 0x200000000;
        uint64_t v63 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v63)
        {
          char v64 = 0;
          unint64_t v65 = *(void **)(a2 + 32);
          uint64_t v66 = 8 * v63;
          do
          {
            uint64_t v67 = *v65;
            uint64_t v68 = sub_1CC131398(a1, *v65);
            if (v91 >= (unint64_t)HIDWORD(v91)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v90 + v91) = v68;
            LODWORD(v91) = v91 + 1;
            uint64_t v25 = v90;
            v64 |= v67 != *((void *)v90 + v91 - 1);
            ++v65;
            v66 -= 8;
          }
          while (v66);
          LosslessPtrToIntExpr = (const llvm::SCEV *)v3;
          if (v64)
          {
            uint64_t v75 = *a1;
            uint64_t v76 = 9;
            goto LABEL_96;
          }
          goto LABEL_98;
        }
        break;
      case 0xA:
        uint64_t v90 = v92;
        uint64_t v91 = 0x200000000;
        uint64_t v26 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v26)
        {
          char v27 = 0;
          int v28 = *(void **)(a2 + 32);
          uint64_t v29 = 8 * v26;
          do
          {
            uint64_t v30 = *v28;
            uint64_t v31 = sub_1CC131398(a1, *v28);
            if (v91 >= (unint64_t)HIDWORD(v91)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v90 + v91) = v31;
            LODWORD(v91) = v91 + 1;
            uint64_t v25 = v90;
            v27 |= v30 != *((void *)v90 + v91 - 1);
            ++v28;
            v29 -= 8;
          }
          while (v29);
          LosslessPtrToIntExpr = (const llvm::SCEV *)v3;
          if (v27)
          {
            uint64_t v75 = *a1;
            uint64_t v76 = 10;
            goto LABEL_96;
          }
          goto LABEL_98;
        }
        break;
      case 0xB:
        uint64_t v90 = v92;
        uint64_t v91 = 0x200000000;
        uint64_t v32 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v32)
        {
          char v33 = 0;
          uint64_t v34 = *(void **)(a2 + 32);
          uint64_t v35 = 8 * v32;
          do
          {
            uint64_t v36 = *v34;
            uint64_t v37 = sub_1CC131398(a1, *v34);
            if (v91 >= (unint64_t)HIDWORD(v91)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v90 + v91) = v37;
            LODWORD(v91) = v91 + 1;
            uint64_t v25 = v90;
            v33 |= v36 != *((void *)v90 + v91 - 1);
            ++v34;
            v35 -= 8;
          }
          while (v35);
          LosslessPtrToIntExpr = (const llvm::SCEV *)v3;
          if ((v33 & 1) == 0) {
            goto LABEL_98;
          }
          uint64_t v75 = *a1;
          uint64_t v76 = 11;
LABEL_96:
          uint64_t AddExpr = llvm::ScalarEvolution::getMinMaxExpr(v75, v76, &v90);
          goto LABEL_97;
        }
        break;
      case 0xC:
        uint64_t v90 = v92;
        uint64_t v91 = 0x200000000;
        uint64_t v69 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v69)
        {
          char v70 = 0;
          unint64_t v71 = *(void **)(a2 + 32);
          uint64_t v72 = 8 * v69;
          do
          {
            uint64_t v73 = *v71;
            uint64_t v74 = sub_1CC131398(a1, *v71);
            if (v91 >= (unint64_t)HIDWORD(v91)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v90 + v91) = v74;
            LODWORD(v91) = v91 + 1;
            uint64_t v25 = v90;
            v70 |= v73 != *((void *)v90 + v91 - 1);
            ++v71;
            v72 -= 8;
          }
          while (v72);
          LosslessPtrToIntExpr = (const llvm::SCEV *)v3;
          if (v70)
          {
            uint64_t AddExpr = llvm::ScalarEvolution::getSequentialMinMaxExpr((uint64_t)*a1, 12, (unsigned int *)&v90);
LABEL_97:
            LosslessPtrToIntExpr = (const llvm::SCEV *)AddExpr;
            uint64_t v25 = v90;
          }
LABEL_98:
          if (v25 != v92) {
            free(v25);
          }
        }
        break;
      case 0xD:
        uint64_t v38 = (const llvm::SCEV *)sub_1CC131398(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)v3;
        if (v38 != *(const llvm::SCEV **)(v3 + 32))
        {
          uint64_t v40 = *a1;
          uint64_t v41 = *(llvm::Type **)(v3 + 40);
          LosslessPtrToIntExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getLosslessPtrToIntExpr(*a1, v38, v39);
          if (*((_WORD *)LosslessPtrToIntExpr + 12) != 15)
          {
            uint64_t TruncateExpr = llvm::ScalarEvolution::getTruncateOrZeroExtend(v40, LosslessPtrToIntExpr, v41, 0);
            goto LABEL_63;
          }
        }
        break;
      case 0xE:
        uint64_t TruncateExpr = llvm::ScalarEvolution::getLosslessPtrToIntExpr(*a1, (const llvm::SCEV *)a2, a3);
LABEL_63:
        LosslessPtrToIntExpr = (const llvm::SCEV *)TruncateExpr;
        break;
      default:
        break;
    }
    int v78 = *((_DWORD *)a1 + 6);
    if (!v78)
    {
      uint64_t v87 = 0;
LABEL_115:
      int v11 = sub_1CC131DD4((uint64_t)(a1 + 1), (uint64_t)&v89, &v89, v87);
      void *v11 = v89;
      v11[1] = LosslessPtrToIntExpr;
      return v11[1];
    }
    uint64_t v79 = a1[1];
    int v80 = v78 - 1;
    unsigned int v81 = v80 & ((v3 >> 4) ^ (v3 >> 9));
    int v11 = (void *)((char *)v79 + 16 * v81);
    uint64_t v82 = *v11;
    if (*v11 != v3)
    {
      uint64_t v83 = 0;
      int v84 = 1;
      while (v82 != -4096)
      {
        if (v83) {
          BOOL v85 = 0;
        }
        else {
          BOOL v85 = v82 == -8192;
        }
        if (v85) {
          uint64_t v83 = v11;
        }
        unsigned int v86 = v81 + v84++;
        unsigned int v81 = v86 & v80;
        int v11 = (void *)((char *)v79 + 16 * v81);
        uint64_t v82 = *v11;
        if (*v11 == v3) {
          return v11[1];
        }
      }
      if (v83) {
        uint64_t v87 = v83;
      }
      else {
        uint64_t v87 = v11;
      }
      goto LABEL_115;
    }
  }
  return v11[1];
}

void *sub_1CC131DD4(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CC131F04(a1, 2 * v7);
    uint64_t v8 = *a3;
    int v9 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & v9;
    a4 = (void *)(*(void *)a1 + 16 * v10);
    uint64_t v11 = *a4;
    if (*a3 == *a4) {
      goto LABEL_10;
    }
    uint64_t v12 = 0;
    int v13 = 1;
    while (v11 != -4096)
    {
      if (v12) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v11 == -8192;
      }
      if (v15) {
        uint64_t v12 = a4;
      }
      unsigned int v16 = v10 + v13++;
      unsigned int v10 = v16 & v9;
      a4 = (void *)(*(void *)a1 + 16 * v10);
      uint64_t v11 = *a4;
      if (v8 == *a4) {
        goto LABEL_10;
      }
    }
    if (v12) {
      a4 = v12;
    }
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_1CC131F04(a1, v7);
    uint64_t v17 = 0;
    sub_1CBFFD518((uint64_t *)a1, a3, &v17);
    a4 = v17;
  }
  uint64_t v8 = *a4;
LABEL_10:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC131F04(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unsigned int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC131FD0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      void *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC131FD0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    unsigned int v4 = *(void **)result;
    uint64_t v5 = 16 * v3;
    do
    {
      *unsigned int v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    int v6 = 0;
    int v7 = v3 - 1;
    do
    {
      uint64_t v8 = *a2;
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unsigned int v9 = ((v8 >> 4) ^ (v8 >> 9)) & v7;
        uint64_t v10 = (void *)(*(void *)result + 16 * v9);
        uint64_t v11 = *v10;
        if (v8 != *v10)
        {
          uint64_t v12 = 0;
          int v13 = 1;
          while (v11 != -4096)
          {
            if (v12) {
              BOOL v14 = 0;
            }
            else {
              BOOL v14 = v11 == -8192;
            }
            if (v14) {
              uint64_t v12 = v10;
            }
            unsigned int v15 = v9 + v13++;
            unsigned int v9 = v15 & v7;
            uint64_t v10 = (void *)(*(void *)result + 16 * (v15 & v7));
            uint64_t v11 = *v10;
            if (v8 == *v10) {
              goto LABEL_12;
            }
          }
          if (v12) {
            uint64_t v10 = v12;
          }
        }
LABEL_12:
        *uint64_t v10 = v8;
        v10[1] = a2[1];
        *(_DWORD *)(result + 8) = ++v6;
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

unint64_t sub_1CC1320A4(uint64_t a1, uint64_t **a2, uint64_t *a3, unint64_t a4, unint64_t a5, uint64_t a6, unsigned int a7)
{
  unint64_t v64 = a5;
  if (a4 == a5) {
    goto LABEL_43;
  }
  uint64_t v9 = *(unsigned __int16 *)(a4 + 24);
  int v10 = *(unsigned __int16 *)(a5 + 24);
  int v11 = v9 - v10;
  if (v9 != v10)
  {
LABEL_84:
    unsigned int v32 = v11 & 0xFFFFFF00;
    goto LABEL_85;
  }
  uint64_t v18 = (void *)(a1 + 8);
  uint64_t v17 = *(void **)(a1 + 8);
  if (v17)
  {
    uint64_t v19 = (void *)(a1 + 8);
    do
    {
      unint64_t v20 = v17[6];
      BOOL v21 = v20 >= a4;
      if (v20 >= a4) {
        uint64_t v22 = v17;
      }
      else {
        uint64_t v22 = v17 + 1;
      }
      if (v21) {
        uint64_t v19 = v17;
      }
      uint64_t v17 = (void *)*v22;
    }
    while (*v22);
    if (v19 != v18 && v19[6] <= a4)
    {
      uint64_t v23 = sub_1CC132C7C((uint64_t)(v19 + 4));
      if (v23)
      {
        uint64_t v24 = v23;
        uint64_t v25 = (void *)*v18;
        if (!*v18) {
          goto LABEL_26;
        }
        uint64_t v26 = v18;
        do
        {
          unint64_t v27 = v25[6];
          BOOL v28 = v27 >= a5;
          if (v27 >= a5) {
            uint64_t v29 = v25;
          }
          else {
            uint64_t v29 = v25 + 1;
          }
          if (v28) {
            uint64_t v26 = v25;
          }
          uint64_t v25 = (void *)*v29;
        }
        while (*v29);
        if (v26 != v18 && v26[6] <= a5) {
          uint64_t v30 = sub_1CC132C7C((uint64_t)(v26 + 4));
        }
        else {
LABEL_26:
        }
          uint64_t v30 = 0;
        if (v30 == v24)
        {
LABEL_43:
          LOBYTE(v11) = 0;
          unsigned int v32 = 0;
LABEL_85:
          LOBYTE(v31) = 1;
          return v32 | v11 | ((unint64_t)v31 << 32);
        }
      }
    }
  }
  if (dword_1EBCC77F8 >= a7)
  {
    switch(v9)
    {
      case 1:
      case 2:
      case 3:
      case 13:
        unint64_t v40 = sub_1CC1320A4(a1, a2, a3, *(void *)(a4 + 32), *(void *)(a5 + 32), a6, a7 + 1);
        unint64_t v31 = HIDWORD(v40);
        if (HIDWORD(v40)) {
          BOOL v41 = v40 == 0;
        }
        else {
          BOOL v41 = 0;
        }
        if (!v41) {
          goto LABEL_59;
        }
        sub_1CC132A90((uint64_t **)a1, (uint64_t *)a4, &v64);
        goto LABEL_30;
      case 4:
      case 5:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        uint64_t v33 = *(void *)(a4 + 40);
        int v34 = *(_DWORD *)(a5 + 40);
        int v11 = v33 - v34;
        if (v33 != v34) {
          goto LABEL_84;
        }
        if (!v33) {
          goto LABEL_42;
        }
        uint64_t v35 = 0;
        uint64_t v36 = a7 + 1;
        uint64_t v37 = 8 * *(void *)(a4 + 40);
        while (1)
        {
          unint64_t v38 = sub_1CC1320A4(a1, a2, a3, *(void *)(*(void *)(a4 + 32) + v35), *(void *)(*(void *)(a5 + 32) + v35), a6, v36);
          unint64_t v31 = HIDWORD(v38);
          if (!HIDWORD(v38) || v38 != 0) {
            break;
          }
          v35 += 8;
          if (v37 == v35) {
            goto LABEL_42;
          }
        }
        unsigned int v32 = v38 & 0xFFFFFF00;
        LOBYTE(v11) = v38;
        return v32 | v11 | ((unint64_t)v31 << 32);
      case 6:
        uint64_t v46 = a7 + 1;
        unint64_t v40 = sub_1CC1320A4(a1, a2, a3, *(void *)(a4 + 32), *(void *)(a5 + 32), a6, v46);
        unint64_t v31 = HIDWORD(v40);
        if (HIDWORD(v40)) {
          BOOL v47 = v40 == 0;
        }
        else {
          BOOL v47 = 0;
        }
        if (!v47)
        {
LABEL_59:
          int v11 = v40;
          goto LABEL_60;
        }
        unint64_t v50 = sub_1CC1320A4(a1, a2, a3, *(void *)(a4 + 40), *(void *)(a5 + 40), a6, v46);
        unint64_t v31 = HIDWORD(v50);
        LOBYTE(v11) = v50;
        unsigned int v32 = v50 & 0xFFFFFF00;
        if (!HIDWORD(v50) || v50) {
          return v32 | v11 | ((unint64_t)v31 << 32);
        }
        sub_1CC132A90((uint64_t **)a1, (uint64_t *)a4, &v64);
        goto LABEL_31;
      case 7:
        if (*(void *)(a4 + 48) != *(void *)(a5 + 48)) {
          llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
        }
        uint64_t v51 = *(void *)(a4 + 40);
        int v52 = *(_DWORD *)(a5 + 40);
        int v11 = v51 - v52;
        if (v51 != v52) {
          goto LABEL_84;
        }
        if (!v51) {
          goto LABEL_42;
        }
        uint64_t v53 = 0;
        uint64_t v54 = a7 + 1;
        uint64_t v63 = 8 * *(void *)(a4 + 40);
        break;
      case 14:
        unint64_t v48 = a4 - 32;
        if (!a4) {
          unint64_t v48 = 0;
        }
        unint64_t v49 = a5 - 32;
        if (!a5) {
          unint64_t v49 = 0;
        }
        int v11 = sub_1CC132594(a2, a3, *(uint64_t ****)(v48 + 24), *(uint64_t ****)(v49 + 24), a7 + 1);
        if (!v11) {
          sub_1CC132A90((uint64_t **)a1, (uint64_t *)a4, &v64);
        }
        goto LABEL_84;
      default:
        uint64_t v42 = *(void *)(a4 + 32);
        uint64_t v43 = *(void *)(a5 + 32);
        uint64_t v44 = *(unsigned int *)(v42 + 32);
        int v45 = *(_DWORD *)(v43 + 32);
        if (v44 != v45)
        {
          int v11 = v44 - v45;
          goto LABEL_84;
        }
        if (v44 > 0x40)
        {
          uint64_t v58 = *(void *)(v43 + 24) - 8;
          unint64_t v59 = ((unint64_t)(v44 + 63) >> 3) & 0x3FFFFFF8;
          uint64_t v60 = *(void *)(v42 + 24) - 8;
          do
          {
            if (!v59)
            {
              int v11 = 1;
              goto LABEL_84;
            }
            unint64_t v61 = *(void *)(v60 + v59);
            unint64_t v62 = *(void *)(v58 + v59);
            v59 -= 8;
          }
          while (v61 == v62);
          if (v61 > v62) {
            int v11 = 1;
          }
          else {
            int v11 = -1;
          }
        }
        else if (*(void *)(v42 + 24) < *(void *)(v43 + 24))
        {
          int v11 = -1;
        }
        else
        {
          int v11 = 1;
        }
        goto LABEL_84;
    }
    while (1)
    {
      unint64_t v55 = sub_1CC1320A4(a1, a2, a3, *(void *)(*(void *)(a4 + 32) + v53), *(void *)(*(void *)(a5 + 32) + v53), a6, v54);
      int v11 = v55;
      unint64_t v31 = HIDWORD(v55);
      if (!HIDWORD(v55) || v55 != 0) {
        break;
      }
      v53 += 8;
      if (v63 == v53)
      {
LABEL_42:
        sub_1CC132A90((uint64_t **)a1, (uint64_t *)a4, &v64);
        goto LABEL_43;
      }
    }
LABEL_60:
    unsigned int v32 = v11 & 0xFFFFFF00;
  }
  else
  {
    LOBYTE(v31) = 0;
LABEL_30:
    LOBYTE(v11) = 0;
LABEL_31:
    unsigned int v32 = 0;
  }
  return v32 | v11 | ((unint64_t)v31 << 32);
}

uint64_t sub_1CC132594(uint64_t **a1, uint64_t *a2, uint64_t ***a3, uint64_t ***a4, unsigned int a5)
{
  uint64_t result = 0;
  if (a3 == a4 || dword_1EBCC7978 < a5) {
    return result;
  }
  uint64_t v12 = a1 + 1;
  int v11 = a1[1];
  if (v11)
  {
    int v13 = a1 + 1;
    do
    {
      unint64_t v14 = v11[6];
      BOOL v15 = v14 >= (unint64_t)a3;
      if (v14 >= (unint64_t)a3) {
        unsigned int v16 = (uint64_t **)v11;
      }
      else {
        unsigned int v16 = (uint64_t **)(v11 + 1);
      }
      if (v15) {
        int v13 = (uint64_t **)v11;
      }
      int v11 = *v16;
    }
    while (*v16);
    if (v13 != v12 && v13[6] <= (uint64_t *)a3)
    {
      uint64_t v17 = sub_1CC132CC8((unsigned char *)v13 + 32);
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v19 = *v12;
        if (!*v12) {
          goto LABEL_26;
        }
        unint64_t v20 = (uint64_t *)(a1 + 1);
        do
        {
          unint64_t v21 = v19[6];
          BOOL v22 = v21 >= (unint64_t)a4;
          if (v21 >= (unint64_t)a4) {
            uint64_t v23 = (uint64_t **)v19;
          }
          else {
            uint64_t v23 = (uint64_t **)(v19 + 1);
          }
          if (v22) {
            unint64_t v20 = v19;
          }
          uint64_t v19 = *v23;
        }
        while (*v23);
        if (v20 != (uint64_t *)v12 && v20[6] <= (unint64_t)a4) {
          uint64_t v24 = sub_1CC132CC8((unsigned char *)v20 + 32);
        }
        else {
LABEL_26:
        }
          uint64_t v24 = 0;
        if (v24 == v18) {
          return 0;
        }
      }
    }
  }
  int v25 = *((unsigned __int8 *)*a3 + 8);
  int v26 = *((unsigned __int8 *)*a4 + 8);
  if ((v25 == 15) != (v26 == 15)) {
    return (v25 == 15) - (v26 == 15);
  }
  unsigned int v27 = *((unsigned __int8 *)a3 + 16);
  int v28 = *((unsigned __int8 *)a4 + 16);
  uint64_t result = v27 - v28;
  if (v27 == v28)
  {
    if (v27 == 21) {
      return (*((_DWORD *)a3 + 8) - *((_DWORD *)a4 + 8));
    }
    if (v27 > 3)
    {
      if (v27 >= 0x1C)
      {
        uint64_t v29 = a3[5];
        uint64_t v30 = a4[5];
        if (v29 == v30) {
          goto LABEL_66;
        }
        int v31 = *((_DWORD *)a2 + 4);
        if (!v31) {
          goto LABEL_66;
        }
        uint64_t v32 = *a2;
        unsigned int v33 = v31 - 1;
        uint64_t v34 = v33 & ((v29 >> 4) ^ (v29 >> 9));
        uint64_t v35 = *(uint64_t ***)(*a2 + 16 * v34);
        if (v29 == v35)
        {
LABEL_41:
          unint64_t v38 = *(void **)(v32 + 16 * v34 + 8);
          if (v38)
          {
            int v39 = 0;
            do
            {
              unint64_t v38 = (void *)*v38;
              ++v39;
            }
            while (v38);
LABEL_56:
            uint64_t v48 = v33 & ((v30 >> 4) ^ (v30 >> 9));
            unint64_t v49 = *(uint64_t ***)(v32 + 16 * v48);
            if (v30 == v49)
            {
LABEL_60:
              int v52 = *(void **)(v32 + 16 * v48 + 8);
              if (v52)
              {
                int v53 = 0;
                do
                {
                  int v52 = (void *)*v52;
                  ++v53;
                }
                while (v52);
LABEL_65:
                uint64_t result = (v39 - v53);
                if (v39 != v53) {
                  return result;
                }
LABEL_66:
                uint64_t v54 = *((_DWORD *)a3 + 5) & 0x7FFFFFF;
                int v55 = *((_DWORD *)a4 + 5) & 0x7FFFFFF;
                uint64_t result = (v54 - v55);
                if (v54 != v55) {
                  return result;
                }
                if (v54)
                {
                  unint64_t v56 = 0;
                  uint64_t v57 = a5 + 1;
                  uint64_t v58 = 32 * v54;
                  while (1)
                  {
                    int v59 = *((_DWORD *)a3 + 5);
                    uint64_t v60 = (v59 & 0x40000000) != 0 ? *(a3 - 1) : (uint64_t **)&a3[-4 * (v59 & 0x7FFFFFF)];
                    int v61 = *((_DWORD *)a4 + 5);
                    unint64_t v62 = (v61 & 0x40000000) != 0 ? *(a4 - 1) : (uint64_t **)&a4[-4 * (v61 & 0x7FFFFFF)];
                    uint64_t result = sub_1CC132594(a1, a2, v60[v56 / 8], v62[v56 / 8], v57);
                    if (result) {
                      return result;
                    }
                    v56 += 32;
                    if (v58 == v56) {
                      goto LABEL_77;
                    }
                  }
                }
                goto LABEL_77;
              }
            }
            else
            {
              int v50 = 1;
              while (v49 != (uint64_t **)-4096)
              {
                int v51 = v48 + v50++;
                uint64_t v48 = v51 & v33;
                unint64_t v49 = *(uint64_t ***)(v32 + 16 * v48);
                if (v30 == v49) {
                  goto LABEL_60;
                }
              }
            }
            int v53 = 0;
            goto LABEL_65;
          }
        }
        else
        {
          int v36 = 1;
          while (v35 != (uint64_t **)-4096)
          {
            int v37 = v34 + v36++;
            uint64_t v34 = v37 & v33;
            uint64_t v35 = *(uint64_t ***)(v32 + 16 * v34);
            if (v29 == v35) {
              goto LABEL_41;
            }
          }
        }
        int v39 = 0;
        goto LABEL_56;
      }
LABEL_77:
      uint64_t v63 = sub_1CC132D14(a1, (unint64_t)a3, (uint64_t *)a3);
      unint64_t v64 = sub_1CC132D14(a1, (unint64_t)a4, (uint64_t *)a4);
      if (v12 == v63) {
        unint64_t v65 = 0;
      }
      else {
        unint64_t v65 = sub_1CC132CC8((unsigned char *)v63 + 32);
      }
      if (v12 == v64) {
        unint64_t v66 = 0;
      }
      else {
        unint64_t v66 = (unint64_t)sub_1CC132CC8((unsigned char *)v64 + 32);
      }
      if (v65 != (unsigned char *)v66)
      {
        uint64_t result = 0;
        *(void *)(*(void *)v65 + 8) = *(void *)(*(void *)v65 + 8) & 1 | v66;
        uint64_t v67 = *(void *)(v66 + 8);
        *(void *)unint64_t v65 = *(void *)v66;
        *(void *)unint64_t v66 = v65;
        *(void *)(v66 + 8) = v67 & 0xFFFFFFFFFFFFFFFELL;
        return result;
      }
      return 0;
    }
    if ((a3[4] & 0xFu) - 9 > 0xFFFFFFFD || (a4[4] & 0xFu) - 9 > 0xFFFFFFFD) {
      goto LABEL_77;
    }
    if ((*((unsigned char *)a3 + 23) & 0x10) == 0)
    {
      size_t v70 = 0;
      uint64_t v69 = &byte_1CFBCE98E;
LABEL_85:
      if ((*((unsigned char *)a4 + 23) & 0x10) == 0)
      {
        size_t v82 = 0;
        unsigned int v81 = &byte_1CFBCE98E;
LABEL_94:
        if (v82 >= v70) {
          size_t v84 = v70;
        }
        else {
          size_t v84 = v82;
        }
        if (v84)
        {
          int v85 = memcmp(v69, v81, v84);
          if (v85) {
            return (v85 >> 31) | 1u;
          }
        }
        if (v70 != v82)
        {
          if (v70 < v82) {
            return 0xFFFFFFFFLL;
          }
          else {
            return 1;
          }
        }
        return 0;
      }
      uint64_t v72 = ***a4;
      uint64_t v73 = *(void *)(v72 + 152);
      uint64_t v74 = *(unsigned int *)(v72 + 168);
      if (v74)
      {
        LODWORD(v75) = (v74 - 1) & ((a4 >> 4) ^ (a4 >> 9));
        uint64_t v76 = (uint64_t ****)(v73 + 16 * v75);
        uint64_t v77 = *v76;
        if (*v76 == a4)
        {
LABEL_93:
          int v80 = v76[1];
          size_t v83 = (size_t)*v80;
          unsigned int v81 = (char *)(v80 + 2);
          size_t v82 = v83;
          goto LABEL_94;
        }
        int v78 = 1;
        while (v77 != (uint64_t ***)-4096)
        {
          int v79 = v75 + v78++;
          uint64_t v75 = v79 & (v74 - 1);
          uint64_t v77 = *(uint64_t ****)(v73 + 16 * v75);
          if (v77 == a4)
          {
            uint64_t v76 = (uint64_t ****)(v73 + 16 * v75);
            goto LABEL_93;
          }
        }
      }
      uint64_t v76 = (uint64_t ****)(v73 + 16 * v74);
      goto LABEL_93;
    }
    uint64_t v40 = ***a3;
    uint64_t v41 = *(void *)(v40 + 152);
    uint64_t v42 = *(unsigned int *)(v40 + 168);
    if (v42)
    {
      LODWORD(v43) = (v42 - 1) & ((a3 >> 4) ^ (a3 >> 9));
      uint64_t v44 = (uint64_t ****)(v41 + 16 * v43);
      int v45 = *v44;
      if (*v44 == a3)
      {
LABEL_84:
        uint64_t v68 = v44[1];
        size_t v71 = (size_t)*v68;
        uint64_t v69 = (char *)(v68 + 2);
        size_t v70 = v71;
        goto LABEL_85;
      }
      int v46 = 1;
      while (v45 != (uint64_t ***)-4096)
      {
        int v47 = v43 + v46++;
        uint64_t v43 = v47 & (v42 - 1);
        int v45 = *(uint64_t ****)(v41 + 16 * v43);
        if (v45 == a3)
        {
          uint64_t v44 = (uint64_t ****)(v41 + 16 * v43);
          goto LABEL_84;
        }
      }
    }
    uint64_t v44 = (uint64_t ****)(v41 + 16 * v42);
    goto LABEL_84;
  }
  return result;
}

uint64_t sub_1CC132A90(uint64_t **a1, uint64_t *a2, unint64_t *a3)
{
  int v7 = a1 + 1;
  int v6 = a1[1];
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  int v10 = a1 + 1;
  if (v6)
  {
    int v11 = a1[1];
    do
    {
      while (1)
      {
        int v10 = (uint64_t **)v11;
        unint64_t v12 = v11[6];
        if (v12 <= (unint64_t)a2) {
          break;
        }
        int v11 = *v10;
        uint64_t v9 = v10;
        if (!*v10) {
          goto LABEL_8;
        }
      }
      if (v12 >= (unint64_t)a2) {
        goto LABEL_11;
      }
      int v11 = v10[1];
    }
    while (v11);
    uint64_t v9 = v10 + 1;
  }
LABEL_8:
  int v13 = (uint64_t *)v10;
  int v10 = (uint64_t **)operator new(0x38uLL);
  v10[4] = (uint64_t *)(v10 + 4);
  void v10[5] = (uint64_t *)1;
  v10[6] = a2;
  *int v10 = 0;
  v10[1] = 0;
  v10[2] = v13;
  *uint64_t v9 = (uint64_t *)v10;
  unint64_t v14 = (uint64_t *)**a1;
  BOOL v15 = (uint64_t *)v10;
  if (v14)
  {
    *a1 = v14;
    BOOL v15 = *v9;
  }
  sub_1CB8358B8(a1[1], v15);
  int v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_11:
  unint64_t v16 = *a3;
  uint64_t v17 = v8;
  if (v6)
  {
    do
    {
      while (1)
      {
        uint64_t v17 = (uint64_t **)v6;
        unint64_t v18 = v6[6];
        if (v16 >= v18) {
          break;
        }
        int v6 = *v17;
        uint64_t v8 = v17;
        if (!*v17) {
          goto LABEL_17;
        }
      }
      if (v18 >= v16) {
        goto LABEL_20;
      }
      int v6 = v17[1];
    }
    while (v6);
    uint64_t v8 = v17 + 1;
  }
LABEL_17:
  uint64_t v19 = (uint64_t *)v17;
  uint64_t v17 = (uint64_t **)operator new(0x38uLL);
  v17[4] = (uint64_t *)(v17 + 4);
  v17[5] = (uint64_t *)1;
  v17[6] = (uint64_t *)v16;
  *uint64_t v17 = 0;
  v17[1] = 0;
  v17[2] = v19;
  *uint64_t v8 = (uint64_t *)v17;
  unint64_t v20 = (uint64_t *)**a1;
  unint64_t v21 = (uint64_t *)v17;
  if (v20)
  {
    *a1 = v20;
    unint64_t v21 = *v8;
  }
  sub_1CB8358B8(a1[1], v21);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_20:
  if (v7 == v10) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = sub_1CC132C7C((uint64_t)(v10 + 4));
  }
  if (v7 == v17) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = sub_1CC132C7C((uint64_t)(v17 + 4));
  }
  if (v22 != result)
  {
    *(void *)(*(void *)v22 + 8) = *(void *)(*(void *)v22 + 8) & 1 | result;
    uint64_t v24 = *(void *)(result + 8);
    *(void *)uint64_t v22 = *(void *)result;
    *(void *)uint64_t result = v22;
    *(void *)(result + 8) = v24 & 0xFFFFFFFFFFFFFFFELL;
  }
  return result;
}

uint64_t sub_1CC132C7C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(a1 + 8) & 1) == 0)
  {
    uint64_t v3 = *(void *)a1;
    if ((*(unsigned char *)(*(void *)v1 + 8) & 1) == 0)
    {
      uint64_t v3 = sub_1CC132C7C();
      *(void *)uint64_t v1 = v3;
    }
    return v3;
  }
  return v1;
}

unsigned char *sub_1CC132CC8(unsigned char *result)
{
  if ((result[8] & 1) == 0)
  {
    if (*(unsigned char *)(*(void *)result + 8))
    {
      return *(unsigned char **)result;
    }
    else
    {
      uint64_t v1 = result;
      uint64_t result = (unsigned char *)sub_1CC132CC8(*(void *)result);
      *uint64_t v1 = result;
    }
  }
  return result;
}

uint64_t **sub_1CC132D14(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unint64_t v8 = v5[6];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    int v7 = (uint64_t **)operator new(0x38uLL);
    v7[4] = (uint64_t *)(v7 + 4);
    v7[5] = (uint64_t *)1;
    v7[6] = a3;
    *int v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *int v6 = (uint64_t *)v7;
    int v10 = (uint64_t *)**a1;
    int v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      int v11 = *v6;
    }
    sub_1CB8358B8(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

unint64_t sub_1CC132DE8(unint64_t result, unint64_t *a2, uint64_t **a3, unint64_t a4, unint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    unint64_t v8 = (unint64_t *)result;
    if (a4 == 2)
    {
      uint64_t result = sub_1CC1320A4(**a3, (uint64_t **)(*a3)[1], *(uint64_t **)(*a3)[2], *(a2 - 1), *(void *)result, (*a3)[3], 0);
      if (HIDWORD(result)) {
        BOOL v9 = (result & 0x80000000) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
        unint64_t v10 = *v8;
        *unint64_t v8 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      uint64_t v23 = a5;
      unint64_t v24 = a4 >> 1;
      int v25 = (unint64_t *)(result + 8 * (a4 >> 1));
      unint64_t v26 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1CC1330EC(result, v25, a3, v26, a5);
        unsigned int v27 = &v23[v24];
        uint64_t result = sub_1CC1330EC((unint64_t)&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v27);
        int v28 = &v23[a4];
        uint64_t v29 = v27;
        while (v29 != v28)
        {
          uint64_t v30 = v29;
          uint64_t result = sub_1CC1320A4(**a3, (uint64_t **)(*a3)[1], *(uint64_t **)(*a3)[2], *v29, *v23, (*a3)[3], 0);
          if (HIDWORD(result)) {
            BOOL v31 = (result & 0x80000000) != 0;
          }
          else {
            BOOL v31 = 0;
          }
          unsigned int v32 = !v31;
          if (v32) {
            unsigned int v33 = v23;
          }
          else {
            unsigned int v33 = v30;
          }
          v23 += v32;
          uint64_t v29 = &v30[v32 ^ 1];
          *v8++ = *v33;
          if (v23 == v27)
          {
            if (v29 != v28)
            {
              uint64_t v34 = 0;
              unsigned int v35 = HIDWORD(result) == 0;
              if (v35 <= ((result & 0x80000000) == 0)) {
                LOBYTE(v35) = (result & 0x80000000) == 0;
              }
              int v36 = &v30[((_BYTE)v35 + 1) & 1];
              do
              {
                v8[v34] = v36[v34];
                ++v34;
              }
              while (&v36[v34] != v28);
            }
            return result;
          }
        }
        if (v23 != v27)
        {
          uint64_t v37 = 0;
          do
          {
            v8[v37] = v23[v37];
            ++v37;
          }
          while (&v23[v37] != v27);
        }
      }
      else
      {
        sub_1CC132DE8(result, v25, a3, v26, a5, a6);
        sub_1CC132DE8(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v23, a6);
        return sub_1CC133390((unint64_t)v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v23, a6);
      }
    }
    else if ((unint64_t *)result != a2)
    {
      unint64_t v12 = (unint64_t *)(result + 8);
      if ((unint64_t *)(result + 8) != a2)
      {
        uint64_t v13 = 0;
        unint64_t v14 = (unint64_t *)result;
        do
        {
          unint64_t v16 = *v14;
          unint64_t v15 = v14[1];
          unint64_t v14 = v12;
          uint64_t result = sub_1CC1320A4(**a3, (uint64_t **)(*a3)[1], *(uint64_t **)(*a3)[2], v15, v16, (*a3)[3], 0);
          if (HIDWORD(result)) {
            BOOL v17 = (result & 0x80000000) == 0;
          }
          else {
            BOOL v17 = 1;
          }
          if (!v17)
          {
            unint64_t v18 = *v14;
            uint64_t v19 = v13;
            while (1)
            {
              *(unint64_t *)((char *)v8 + v19 + 8) = *(unint64_t *)((char *)v8 + v19);
              if (!v19) {
                break;
              }
              uint64_t result = sub_1CC1320A4(**a3, (uint64_t **)(*a3)[1], *(uint64_t **)(*a3)[2], v18, *(unint64_t *)((char *)v8 + v19 - 8), (*a3)[3], 0);
              v19 -= 8;
              if (HIDWORD(result)) {
                BOOL v20 = (result & 0x80000000) == 0;
              }
              else {
                BOOL v20 = 1;
              }
              if (v20)
              {
                unint64_t v21 = (unint64_t *)((char *)v8 + v19 + 8);
                goto LABEL_25;
              }
            }
            unint64_t v21 = v8;
LABEL_25:
            *unint64_t v21 = v18;
          }
          unint64_t v12 = v14 + 1;
          v13 += 8;
        }
        while (v14 + 1 != a2);
      }
    }
  }
  return result;
}

unint64_t sub_1CC1330EC(unint64_t result, unint64_t *a2, uint64_t **a3, unint64_t a4, unint64_t *a5)
{
  if (a4)
  {
    uint64_t v5 = a5;
    int v7 = (unint64_t *)result;
    if (a4 == 1)
    {
LABEL_10:
      *uint64_t v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      unint64_t v10 = a2 - 1;
      uint64_t result = sub_1CC1320A4(**a3, (uint64_t **)(*a3)[1], *(uint64_t **)(*a3)[2], *(a2 - 1), *(void *)result, (*a3)[3], 0);
      BOOL v11 = HIDWORD(result) != 0;
      BOOL v12 = (result & 0x80000000) != 0;
      BOOL v13 = !v11 || !v12;
      if (v11 && v12) {
        unint64_t v14 = v10;
      }
      else {
        unint64_t v14 = v7;
      }
      *v5++ = *v14;
      if (v13) {
        int v7 = v10;
      }
      goto LABEL_10;
    }
    if ((uint64_t)a4 > 8)
    {
      int v25 = (unint64_t *)(result + 8 * (a4 >> 1));
      sub_1CC132DE8(result, v25, a3, a4 >> 1, a5, a4 >> 1);
      uint64_t result = sub_1CC132DE8(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      unint64_t v26 = &v7[a4 >> 1];
      while (v26 != a2)
      {
        unsigned int v27 = v26;
        uint64_t result = sub_1CC1320A4(**a3, (uint64_t **)(*a3)[1], *(uint64_t **)(*a3)[2], *v26, *v7, (*a3)[3], 0);
        if (HIDWORD(result) != 0 && (result & 0x80000000) != 0) {
          int v28 = v27;
        }
        else {
          int v28 = v7;
        }
        unint64_t v26 = &v27[(HIDWORD(result) != 0) & ((result & 0x80000000) != 0)];
        v7 += HIDWORD(result) == 0 || (result & 0x80000000) == 0;
        *v5++ = *v28;
        if (v7 == v25)
        {
          if (v26 != a2)
          {
            uint64_t v29 = 0;
            unint64_t v30 = HIDWORD(result) != 0;
            if (v30 >= ((result >> 31) & 1)) {
              unint64_t v30 = (result >> 31) & 1;
            }
            BOOL v31 = &v27[v30];
            do
            {
              v5[v29] = v31[v29];
              ++v29;
            }
            while (&v31[v29] != a2);
          }
          return result;
        }
      }
      if (v7 != v25)
      {
        uint64_t v32 = 0;
        do
        {
          v5[v32] = v7[v32];
          ++v32;
        }
        while (&v7[v32] != v25);
      }
    }
    else if ((unint64_t *)result != a2)
    {
      unint64_t v15 = (unint64_t *)(result + 8);
      *a5 = *(void *)result;
      if ((unint64_t *)(result + 8) != a2)
      {
        uint64_t v16 = 0;
        BOOL v17 = a5;
        do
        {
          unint64_t v18 = v17;
          unint64_t v19 = *v17++;
          uint64_t result = sub_1CC1320A4(**a3, (uint64_t **)(*a3)[1], *(uint64_t **)(*a3)[2], *v15, v19, (*a3)[3], 0);
          if (HIDWORD(result)) {
            BOOL v20 = (result & 0x80000000) == 0;
          }
          else {
            BOOL v20 = 1;
          }
          unint64_t v21 = v17;
          if (!v20)
          {
            v18[1] = *v18;
            unint64_t v21 = v5;
            if (v18 != v5)
            {
              uint64_t v22 = v16;
              while (1)
              {
                unint64_t v21 = (unint64_t *)((char *)v5 + v22);
                uint64_t result = sub_1CC1320A4(**a3, (uint64_t **)(*a3)[1], *(uint64_t **)(*a3)[2], *v15, *(unint64_t *)((char *)v5 + v22 - 8), (*a3)[3], 0);
                if (!HIDWORD(result) || (result & 0x80000000) == 0) {
                  break;
                }
                *unint64_t v21 = *(v21 - 1);
                v22 -= 8;
                if (!v22)
                {
                  unint64_t v21 = v5;
                  break;
                }
              }
            }
          }
          unint64_t v24 = *v15++;
          *unint64_t v21 = v24;
          v16 += 8;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

unint64_t sub_1CC133390(unint64_t result, unint64_t *a2, unint64_t *a3, uint64_t **a4, uint64_t a5, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  uint64_t v10 = a6;
  unint64_t v15 = (unint64_t *)result;
  while (a5 > a8 && v10 > a8)
  {
    if (!a5) {
      return result;
    }
    while (1)
    {
      uint64_t result = sub_1CC1320A4(**a4, (uint64_t **)(*a4)[1], *(uint64_t **)(*a4)[2], *a2, *v15, (*a4)[3], 0);
      if (HIDWORD(result) && (result & 0x80000000) != 0) {
        break;
      }
      ++v15;
      if (!--a5) {
        return result;
      }
    }
    unsigned int v81 = a3;
    uint64_t v82 = v10;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        unint64_t v75 = *v15;
        unint64_t *v15 = *a2;
        *a2 = v75;
        return result;
      }
      uint64_t v78 = a8;
      int v79 = a7;
      int v80 = a4;
      if (a5 >= 0) {
        uint64_t v26 = a5;
      }
      else {
        uint64_t v26 = a5 + 1;
      }
      unsigned int v27 = a3;
      unint64_t v20 = v26 >> 1;
      unint64_t v21 = &v15[v26 >> 1];
      unint64_t v19 = v27;
      if (v27 != a2)
      {
        int v28 = *a4;
        unint64_t v29 = v27 - a2;
        unint64_t v19 = a2;
        do
        {
          unint64_t v30 = &v19[v29 >> 1];
          unint64_t v32 = *v30;
          BOOL v31 = v30 + 1;
          unint64_t v33 = sub_1CC1320A4(*v28, (uint64_t **)v28[1], *(uint64_t **)v28[2], v32, *v21, v28[3], 0);
          BOOL v34 = HIDWORD(v33) != 0;
          BOOL v35 = (v33 & 0x80000000) != 0;
          if (v34 && v35) {
            v29 += ~(v29 >> 1);
          }
          else {
            v29 >>= 1;
          }
          if (v34 && v35) {
            unint64_t v19 = v31;
          }
        }
        while (v29);
      }
      uint64_t v18 = v19 - a2;
      a7 = v79;
    }
    else
    {
      if (v10 >= 0) {
        uint64_t v17 = v10;
      }
      else {
        uint64_t v17 = v10 + 1;
      }
      uint64_t v18 = v17 >> 1;
      unint64_t v19 = &a2[v17 >> 1];
      unint64_t v20 = a2 - v15;
      if (a2 == v15)
      {
        unint64_t v15 = a2;
        unint64_t v21 = a2;
        a2 += v17 >> 1;
        goto LABEL_54;
      }
      uint64_t v77 = v17 >> 1;
      uint64_t v78 = a8;
      unint64_t v21 = v15;
      do
      {
        uint64_t v22 = &v21[v20 >> 1];
        unint64_t v24 = *v22;
        uint64_t v23 = v22 + 1;
        unint64_t v25 = sub_1CC1320A4(**a4, (uint64_t **)(*a4)[1], *(uint64_t **)(*a4)[2], *v19, v24, (*a4)[3], 0);
        if (HIDWORD(v25) != 0 && (v25 & 0x80000000) != 0)
        {
          v20 >>= 1;
        }
        else
        {
          unint64_t v21 = v23;
          v20 += ~(v20 >> 1);
        }
      }
      while (v20);
      int v80 = a4;
      unint64_t v20 = v21 - v15;
      uint64_t v18 = v77;
    }
    a8 = v78;
    uint64_t v10 = v82;
    if (v21 == a2)
    {
      unint64_t v21 = a2;
      a2 = v19;
    }
    else if (a2 == v19)
    {
      unint64_t v19 = a2;
      a2 = v21;
    }
    else if (v21 + 1 == a2)
    {
      unint64_t v42 = *v21;
      int64_t v43 = (char *)v19 - (char *)a2;
      uint64_t v44 = a2;
      size_t v45 = (char *)v19 - (char *)a2;
      uint64_t v46 = v18;
      memmove(v21, v44, v45);
      uint64_t v18 = v46;
      a2 = (unint64_t *)((char *)v21 + v43);
      *(unint64_t *)((char *)v21 + v43) = v42;
      uint64_t v10 = v82;
    }
    else
    {
      if (a2 + 1 == v19)
      {
        unint64_t v49 = *(v19 - 1);
        a2 = v21 + 1;
        if (v19 - 1 != v21)
        {
          uint64_t v50 = v18;
          memmove(v21 + 1, v21, (char *)(v19 - 1) - (char *)v21);
          uint64_t v18 = v50;
        }
        *unint64_t v21 = v49;
        a4 = v80;
        uint64_t v10 = v82;
        goto LABEL_54;
      }
      uint64_t v36 = a2 - v21;
      if (v36 != v19 - a2)
      {
        uint64_t v51 = v19 - a2;
        uint64_t v52 = a2 - v21;
        do
        {
          uint64_t v53 = v52;
          uint64_t v52 = v51;
          uint64_t v51 = v53 % v51;
        }
        while (v51);
        a4 = v80;
        if (v52)
        {
          uint64_t v54 = &v21[v52];
          do
          {
            unint64_t v56 = *--v54;
            unint64_t v55 = v56;
            uint64_t v57 = &v54[v36];
            uint64_t v58 = v54;
            do
            {
              int v59 = v58;
              uint64_t v58 = v57;
              *int v59 = *v57;
              BOOL v60 = __OFSUB__(v36, v19 - v57);
              uint64_t v62 = v36 - (v19 - v57);
              char v61 = (v62 < 0) ^ v60;
              uint64_t v57 = &v21[v62];
              if (v61) {
                uint64_t v57 = &v58[v36];
              }
            }
            while (v57 != v54);
            unint64_t *v58 = v55;
          }
          while (v54 != v21);
        }
        a2 = &v21[v19 - a2];
        goto LABEL_54;
      }
      uint64_t v37 = 0;
      do
      {
        unint64_t v38 = v21[v37];
        v21[v37] = a2[v37];
        uint64_t v39 = (uint64_t)&v21[v37 + 1];
        a2[v37] = v38;
        uint64_t v40 = (uint64_t)&a2[++v37];
      }
      while ((unint64_t *)v39 != a2 && v40 != (void)v19);
    }
    a4 = v80;
LABEL_54:
    a5 -= v20;
    v10 -= v18;
    if ((uint64_t)(v18 + v20) >= v10 + a5)
    {
      uint64_t v47 = a5;
      uint64_t v48 = v18;
      uint64_t result = sub_1CC133390(a2, v19, v81, a4, v47, v10, a7, a8);
      unint64_t v19 = v21;
      uint64_t v10 = v48;
      a5 = v20;
      a3 = a2;
    }
    else
    {
      uint64_t result = sub_1CC133390(v15, v21, a2, a4, v20, v18, a7, a8);
      unint64_t v15 = a2;
      a3 = v81;
    }
    a2 = v19;
    if (!v10) {
      return result;
    }
  }
  if (a5 <= v10)
  {
    if (v15 != a2)
    {
      uint64_t v70 = 0;
      do
      {
        a7[v70] = v15[v70];
        ++v70;
      }
      while (&v15[v70] != a2);
      if (v70 * 8)
      {
        size_t v71 = a7;
        while (a2 != a3)
        {
          uint64_t result = sub_1CC1320A4(**a4, (uint64_t **)(*a4)[1], *(uint64_t **)(*a4)[2], *a2, *v71, (*a4)[3], 0);
          if (HIDWORD(result)) {
            BOOL v72 = (result & 0x80000000) != 0;
          }
          else {
            BOOL v72 = 0;
          }
          unsigned int v73 = !v72;
          if (v73) {
            uint64_t v74 = v71;
          }
          else {
            uint64_t v74 = a2;
          }
          v71 += v73;
          a2 += v73 ^ 1;
          *v15++ = *v74;
          if (&a7[v70] == v71) {
            return result;
          }
        }
        return (unint64_t)memmove(v15, v71, (char *)a7 - (char *)v71 + v70 * 8);
      }
    }
  }
  else if (a2 != a3)
  {
    uint64_t v63 = 0;
    do
    {
      a7[v63] = a2[v63];
      ++v63;
    }
    while (&a2[v63] != a3);
    if (v63 * 8)
    {
      unint64_t v64 = &a7[v63];
      unint64_t v65 = a3 - 1;
      while (a2 != v15)
      {
        uint64_t result = sub_1CC1320A4(**a4, (uint64_t **)(*a4)[1], *(uint64_t **)(*a4)[2], *(v64 - 1), *(a2 - 1), (*a4)[3], 0);
        BOOL v66 = HIDWORD(result) != 0;
        BOOL v67 = (result & 0x80000000) != 0;
        BOOL v68 = !v66 || !v67;
        if (v66 && v67) {
          uint64_t v69 = a2;
        }
        else {
          uint64_t v69 = v64;
        }
        if (v68) {
          --v64;
        }
        else {
          --a2;
        }
        *v65-- = *(v69 - 1);
        if (v64 == a7) {
          return result;
        }
      }
      if (v64 != a7)
      {
        uint64_t v76 = 0;
        do
        {
          v65[v76] = v64[v76 - 1];
          --v76;
        }
        while (&v64[v76] != a7);
      }
    }
  }
  return result;
}

uint64_t sub_1CC133950(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v6 = (void *)(a1 + 24 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v10 = 1;
    }
    else
    {
      unint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          unint64_t v8 = v6;
        }
        unsigned int v13 = v5 + v9++;
        unsigned int v5 = v13 & v4;
        int v6 = (void *)(a1 + 24 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v10 = 1;
        if (*v6 == a3) {
          goto LABEL_7;
        }
      }
      uint64_t v10 = 0;
      if (v8) {
        int v6 = v8;
      }
    }
  }
  else
  {
    int v6 = 0;
    uint64_t v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

uint64_t *sub_1CC1339EC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1CC133BC4(a1, *(_DWORD *)(a1 + 16));
      unint64_t v24 = 0;
      sub_1CC133950(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v24);
      a3 = v24;
    }
  }
  else
  {
    uint64_t v7 = *(void *)a1;
    unint64_t v8 = (2 * v6 - 1) | ((unint64_t)(2 * v6 - 1) >> 1);
    unint64_t v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
    int v10 = ((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8);
    if ((v10 + 1) > 0x40) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 64;
    }
    *(_DWORD *)(a1 + 16) = v11;
    BOOL v12 = (char *)operator new(24 * v11, (std::align_val_t)8uLL);
    *(void *)a1 = v12;
    if (v7)
    {
      sub_1CD4C0CD4(a1, v7, v7 + 24 * v6);
      MEMORY[0x1D25D9CD0](v7, 8);
      LODWORD(v14) = *(_DWORD *)(a1 + 16);
      BOOL v12 = *(char **)a1;
    }
    else
    {
      uint64_t v13 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v14 = *(unsigned int *)(a1 + 16);
      do
      {
        *(void *)&v12[v13] = -4096;
        v13 += 24;
      }
      while (24 * v14 != v13);
    }
    uint64_t v15 = *a2;
    int v16 = v14 - 1;
    unsigned int v17 = ((*a2 >> 4) ^ (*a2 >> 9)) & v16;
    a3 = (uint64_t *)&v12[24 * v17];
    uint64_t v18 = *a3;
    if (*a2 == *a3) {
      goto LABEL_14;
    }
    unint64_t v19 = 0;
    int v20 = 1;
    while (v18 != -4096)
    {
      if (v19) {
        BOOL v22 = 0;
      }
      else {
        BOOL v22 = v18 == -8192;
      }
      if (v22) {
        unint64_t v19 = a3;
      }
      unsigned int v23 = v17 + v20++;
      unsigned int v17 = v23 & v16;
      a3 = (uint64_t *)&v12[24 * v17];
      uint64_t v18 = *a3;
      if (v15 == *a3) {
        goto LABEL_14;
      }
    }
    if (v19) {
      a3 = v19;
    }
  }
  uint64_t v15 = *a3;
LABEL_14:
  ++*(_DWORD *)(a1 + 8);
  if (v15 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC133BC4(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD4C0CD4(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      void *result = -4096;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

void sub_1CC133C9C(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = *(void **)(a1 + 88);
  unint64_t v5 = *(void **)(a1 + 96);
  uint64_t v4 = (unsigned int *)(a1 + 88);
  uint64_t v7 = v4[5];
  if (v5 == v6)
  {
    if (v7)
    {
      unsigned int v8 = 0;
      uint64_t v9 = 8 * v7;
      uint64_t v10 = v5;
      while (*v10 != a2)
      {
        if (*v10 == -2) {
          unsigned int v8 = v10;
        }
        ++v10;
        v9 -= 8;
        if (!v9)
        {
          if (!v8) {
            goto LABEL_9;
          }
          *unsigned int v8 = a2;
          --*(_DWORD *)(a1 + 112);
          goto LABEL_33;
        }
      }
      return;
    }
LABEL_9:
    unsigned int v11 = *(_DWORD *)(a1 + 104);
    if (v7 < v11)
    {
      *(_DWORD *)(a1 + 108) = v7 + 1;
      v5[v7] = a2;
      goto LABEL_33;
    }
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(a1 + 104);
  }
  if (3 * v11 <= 4 * ((int)v7 - *(_DWORD *)(a1 + 112)))
  {
    if (v11 >= 0x40) {
      v11 *= 2;
    }
    else {
      unsigned int v11 = 128;
    }
  }
  else if (v11 - v7 >= v11 >> 3)
  {
    goto LABEL_14;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v4, v11);
  unsigned int v11 = *(_DWORD *)(a1 + 104);
  unint64_t v5 = *(void **)(a1 + 96);
LABEL_14:
  unsigned int v12 = v11 - 1;
  unsigned int v13 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v14 = &v5[v13];
  uint64_t v15 = *v14;
  if (*v14 != -1)
  {
    int v16 = 0;
    int v17 = 1;
    while (v15 != a2)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -2;
      }
      if (v18) {
        int v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      uint64_t v14 = &v5[v19 & v12];
      uint64_t v15 = *v14;
      if (*v14 == -1) {
        goto LABEL_26;
      }
    }
    return;
  }
  int v16 = 0;
LABEL_26:
  if (v16) {
    int v20 = v16;
  }
  else {
    int v20 = v14;
  }
  if (*v20 != a2)
  {
    if (*v20 == -2) {
      --*(_DWORD *)(a1 + 112);
    }
    else {
      ++*(_DWORD *)(a1 + 108);
    }
    *int v20 = a2;
LABEL_33:
    __int16 v21 = *(_WORD *)(a2 + 24);
    **(unsigned char **)a1 |= v21 == 0;
    if ((v21 & 0xFFFE) == 4)
    {
      unsigned int v22 = *(_DWORD *)(a1 + 16);
      if (v22 >= *(_DWORD *)(a1 + 20)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 8) + 8 * v22) = a2;
      ++*(_DWORD *)(a1 + 16);
    }
  }
}

uint64_t sub_1CC133E7C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unint64_t v5 = (const void *)(a2 + 16);
    uint64_t v4 = *(const void **)a2;
    if (v4 == v5)
    {
      uint64_t v7 = (_DWORD *)(a2 + 8);
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      uint64_t v8 = *(unsigned int *)(a1 + 8);
      if (v8 < v6)
      {
        uint64_t v15 = (void *)a2;
        uint64_t v16 = *(unsigned int *)(a1 + 8);
        if (*(_DWORD *)(a1 + 12) < v6)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v8) {
          memmove(*(void **)a1, v4, 8 * v8);
        }
        else {
          uint64_t v16 = 0;
        }
        uint64_t v14 = *v7;
        if (v16 != v14) {
          memcpy((void *)(*(void *)a1 + 8 * v16), (const void *)(*v15 + 8 * v16), *v15 + 8 * v14 - (*v15 + 8 * v16));
        }
      }
      else if (v6)
      {
        memmove(*(void **)a1, v4, 8 * v6);
      }
      *(_DWORD *)(a1 + 8) = v6;
    }
    else
    {
      uint64_t v10 = a2;
      unsigned int v11 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v11);
        uint64_t v4 = *(const void **)v10;
      }
      *(void *)a1 = v4;
      uint64_t v12 = v10;
      uint64_t v13 = *(void *)(v10 + 8);
      uint64_t v7 = (_DWORD *)(v10 + 8);
      *(void *)(a1 + 8) = v13;
      *(void *)uint64_t v12 = v5;
      *(_DWORD *)(v12 + 12) = 0;
    }
    *uint64_t v7 = 0;
  }
  return a1;
}

uint64_t sub_1CC133FAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  v10[6] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(unsigned __int16 *)(a2 + 24);
  if (*((unsigned __int16 *)a1 + 4) == v4 || *((unsigned __int16 *)a1 + 5) == v4)
  {
    uint64_t v8 = v10;
    uint64_t v9 = 0x600000000;
    if (sub_1CC0F29FC(a1, *(void *)(a2 + 32), *(void *)(a2 + 40), &v8))
    {
      if (v9)
      {
        uint64_t v5 = *a1;
        if (*(_WORD *)(v2 + 24) == 12) {
          Sequentialunint64_t MinMaxExpr = llvm::ScalarEvolution::getSequentialMinMaxExpr(v5, v4, &v8);
        }
        else {
          Sequentialunint64_t MinMaxExpr = llvm::ScalarEvolution::getMinMaxExpr(v5, v4, &v8);
        }
        uint64_t v2 = SequentialMinMaxExpr;
      }
      else
      {
        uint64_t v2 = 0;
      }
    }
    if (v8 != v10) {
      free(v8);
    }
  }
  return v2;
}

uint64_t sub_1CC1340B4(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = a2 + 16;
    unsigned int v3 = *(const void **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      uint64_t v6 = (_DWORD *)(a2 + 8);
      uint64_t v5 = *(unsigned int *)(a2 + 8);
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7 < v5)
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v7)
        {
          uint64_t v15 = *(unsigned int *)(a1 + 8);
          uint64_t v16 = a2;
          memmove(*(void **)a1, v3, 8 * v7);
          uint64_t v9 = v15;
          a2 = v16;
        }
        else
        {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *v6;
        if (v9 != v10) {
          memcpy((void *)(*(void *)a1 + 8 * v9), (const void *)(*(void *)a2 + 8 * v9), *(void *)a2 + 8 * v10 - (*(void *)a2 + 8 * v9));
        }
      }
      else if (v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
      }
      *(_DWORD *)(a1 + 8) = v5;
    }
    else
    {
      uint64_t v11 = a2;
      uint64_t v12 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v12);
        unsigned int v3 = *(const void **)v11;
      }
      *(void *)a1 = v3;
      uint64_t v13 = v11;
      uint64_t v14 = *(void *)(v11 + 8);
      uint64_t v6 = (_DWORD *)(v11 + 8);
      *(void *)(a1 + 8) = v14;
      *(void *)uint64_t v13 = v4;
      *(_DWORD *)(v13 + 12) = 0;
    }
    *uint64_t v6 = 0;
  }
  return a1;
}

uint64_t sub_1CC1341F0(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 > 0x1B) {
    unsigned int v3 = v2 - 28;
  }
  else {
    unsigned int v3 = *(unsigned __int16 *)(a2 + 18);
  }
  *(_DWORD *)uint64_t result = v3;
  int v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0) {
    uint64_t v5 = *(void **)(a2 - 8);
  }
  else {
    uint64_t v5 = (void *)(a2 - 32 * (v4 & 0x7FFFFFF));
  }
  *(void *)(result + 8) = *v5;
  int v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0) {
    uint64_t v7 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v7 = a2 - 32 * (v6 & 0x7FFFFFF);
  }
  *(void *)(result + 16) = *(void *)(v7 + 32);
  *(_WORD *)(result + 24) = 0;
  *(void *)(result + 32) = a2;
  if (v2 < 0x1C)
  {
    if (v2 != 5) {
      return result;
    }
    int v8 = *(unsigned __int16 *)(a2 + 18) - 13;
  }
  else
  {
    int v8 = v2 - 41;
  }
  HIDWORD(v10) = v8;
  LODWORD(v10) = v8;
  unsigned int v9 = v10 >> 1;
  BOOL v11 = v9 > 6;
  int v12 = (1 << v9) & 0x47;
  if (!v11 && v12 != 0)
  {
    *(unsigned char *)(result + 24) = (*(unsigned char *)(a2 + 17) & 4) != 0;
    *(unsigned char *)(result + 25) = (*(unsigned char *)(a2 + 17) & 2) != 0;
  }
  return result;
}

uint64_t sub_1CC1342B0(uint64_t a1, uint64_t a2)
{
  v113[2] = *MEMORY[0x1E4F143B8];
  uint64_t v110 = a2;
  uint64_t v5 = a1 + 8;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);
  if (v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    int v8 = (void *)(v4 + 16 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a2) {
      goto LABEL_8;
    }
    int v10 = 1;
    while (v9 != -4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v6 - 1);
      uint64_t v9 = *(void *)(v4 + 16 * v7);
      if (v9 == a2)
      {
        int v8 = (void *)(v4 + 16 * v7);
        goto LABEL_8;
      }
    }
  }
  int v8 = (void *)(v4 + 16 * v6);
LABEL_8:
  if (v8 != (void *)(v4 + 16 * v6)) {
    return v8[1];
  }
  LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
  switch(*(_WORD *)(a2 + 24))
  {
    case 1:
      uint64_t v13 = (const llvm::SCEV *)sub_1CC1342B0(a1, *(void *)(a2 + 32));
      LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
      if (v13 != *(const llvm::SCEV **)(a2 + 32))
      {
        uint64_t TruncateExpr = llvm::ScalarEvolution::getTruncateExpr(*(llvm::ScalarEvolution **)a1, v13, *(llvm::Type **)(a2 + 40), 0);
        goto LABEL_57;
      }
      goto LABEL_94;
    case 2:
      size_t v45 = (llvm::detail::IEEEFloat **)sub_1CC1342B0(a1, *(void *)(a2 + 32));
      LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
      if (v45 != *(llvm::detail::IEEEFloat ***)(a2 + 32))
      {
        uint64_t TruncateExpr = llvm::ScalarEvolution::getZeroExtendExpr(*(llvm::ScalarEvolution **)a1, v45, *(uint64_t ***)(a2 + 40), 0);
        goto LABEL_57;
      }
      goto LABEL_94;
    case 3:
      uint64_t v15 = (llvm::detail::IEEEFloat **)sub_1CC1342B0(a1, *(void *)(a2 + 32));
      LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
      if (v15 != *(llvm::detail::IEEEFloat ***)(a2 + 32))
      {
        uint64_t TruncateExpr = llvm::ScalarEvolution::getSignExtendExpr(*(llvm::ScalarEvolution **)a1, v15, *(uint64_t ***)(a2 + 40), 0);
        goto LABEL_57;
      }
      goto LABEL_94;
    case 4:
      unint64_t v111 = v113;
      uint64_t v112 = 0x200000000;
      uint64_t v46 = *(void *)(a2 + 40);
      LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
      if (v46)
      {
        char v47 = 0;
        uint64_t v48 = *(void **)(a2 + 32);
        uint64_t v49 = 8 * v46;
        do
        {
          uint64_t v50 = *v48;
          uint64_t v51 = sub_1CC1342B0(a1, *v48);
          if (v112 >= (unint64_t)HIDWORD(v112)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v111 + v112) = v51;
          LODWORD(v112) = v112 + 1;
          unsigned int v22 = v111;
          v47 |= v50 != *((void *)v111 + v112 - 1);
          ++v48;
          v49 -= 8;
        }
        while (v49);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v47)
        {
          uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(*(void *)a1, (unint64_t **)&v111, 0, 0);
          goto LABEL_91;
        }
        goto LABEL_92;
      }
      goto LABEL_94;
    case 5:
      unint64_t v111 = v113;
      uint64_t v112 = 0x200000000;
      uint64_t v52 = *(void *)(a2 + 40);
      LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
      if (v52)
      {
        char v53 = 0;
        uint64_t v54 = *(void **)(a2 + 32);
        uint64_t v55 = 8 * v52;
        do
        {
          uint64_t v56 = *v54;
          uint64_t v57 = sub_1CC1342B0(a1, *v54);
          if (v112 >= (unint64_t)HIDWORD(v112)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v111 + v112) = v57;
          LODWORD(v112) = v112 + 1;
          unsigned int v22 = v111;
          v53 |= v56 != *((void *)v111 + v112 - 1);
          ++v54;
          v55 -= 8;
        }
        while (v55);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v53)
        {
          uint64_t AddExpr = llvm::ScalarEvolution::getMulExpr(*(void *)a1, (uint64_t)&v111, 0, 0);
          goto LABEL_91;
        }
        goto LABEL_92;
      }
      goto LABEL_94;
    case 6:
      uint64_t v58 = (const llvm::SCEV *)sub_1CC1342B0(a1, *(void *)(a2 + 32));
      unint64_t v59 = sub_1CC1342B0(a1, *(void *)(a2 + 40));
      if (v58 != *(const llvm::SCEV **)(a2 + 32)
        || (LosslessPtrToIntExpr = (const llvm::SCEV *)a2, v59 != *(void *)(a2 + 40)))
      {
        uint64_t TruncateExpr = llvm::ScalarEvolution::getUDivExpr(*(llvm::ScalarEvolution **)a1, v58, v59);
        goto LABEL_57;
      }
      goto LABEL_94;
    case 7:
      unint64_t v111 = v113;
      uint64_t v112 = 0x200000000;
      uint64_t v60 = *(void *)(a2 + 40);
      LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
      if (v60)
      {
        char v61 = 0;
        uint64_t v62 = *(void **)(a2 + 32);
        uint64_t v63 = 8 * v60;
        do
        {
          uint64_t v64 = *v62;
          uint64_t v65 = sub_1CC1342B0(a1, *v62);
          if (v112 >= (unint64_t)HIDWORD(v112)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v111 + v112) = v65;
          LODWORD(v112) = v112 + 1;
          unsigned int v22 = v111;
          v61 |= v64 != *((void *)v111 + v112 - 1);
          ++v62;
          v63 -= 8;
        }
        while (v63);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v61)
        {
          uint64_t AddExpr = llvm::ScalarEvolution::getAddRecExpr(*(llvm::ScalarEvolution **)a1, (uint64_t **)&v111, *(const llvm::Loop **)(a2 + 48), *(_WORD *)(a2 + 28) & 7);
          goto LABEL_91;
        }
        goto LABEL_92;
      }
      goto LABEL_94;
    case 8:
      unint64_t v111 = v113;
      uint64_t v112 = 0x200000000;
      uint64_t v16 = *(void *)(a2 + 40);
      LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
      if (v16)
      {
        char v17 = 0;
        BOOL v18 = *(void **)(a2 + 32);
        uint64_t v19 = 8 * v16;
        do
        {
          uint64_t v20 = *v18;
          uint64_t v21 = sub_1CC1342B0(a1, *v18);
          if (v112 >= (unint64_t)HIDWORD(v112)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v111 + v112) = v21;
          LODWORD(v112) = v112 + 1;
          unsigned int v22 = v111;
          v17 |= v20 != *((void *)v111 + v112 - 1);
          ++v18;
          v19 -= 8;
        }
        while (v19);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v17)
        {
          uint64_t v78 = *(llvm::ScalarEvolution **)a1;
          uint64_t v79 = 8;
          goto LABEL_90;
        }
        goto LABEL_92;
      }
      goto LABEL_94;
    case 9:
      unint64_t v111 = v113;
      uint64_t v112 = 0x200000000;
      uint64_t v66 = *(void *)(a2 + 40);
      LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
      if (v66)
      {
        char v67 = 0;
        BOOL v68 = *(void **)(a2 + 32);
        uint64_t v69 = 8 * v66;
        do
        {
          uint64_t v70 = *v68;
          uint64_t v71 = sub_1CC1342B0(a1, *v68);
          if (v112 >= (unint64_t)HIDWORD(v112)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v111 + v112) = v71;
          LODWORD(v112) = v112 + 1;
          unsigned int v22 = v111;
          v67 |= v70 != *((void *)v111 + v112 - 1);
          ++v68;
          v69 -= 8;
        }
        while (v69);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v67)
        {
          uint64_t v78 = *(llvm::ScalarEvolution **)a1;
          uint64_t v79 = 9;
          goto LABEL_90;
        }
        goto LABEL_92;
      }
      goto LABEL_94;
    case 0xA:
      unint64_t v111 = v113;
      uint64_t v112 = 0x200000000;
      uint64_t v23 = *(void *)(a2 + 40);
      LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
      if (v23)
      {
        char v24 = 0;
        unint64_t v25 = *(void **)(a2 + 32);
        uint64_t v26 = 8 * v23;
        do
        {
          uint64_t v27 = *v25;
          uint64_t v28 = sub_1CC1342B0(a1, *v25);
          if (v112 >= (unint64_t)HIDWORD(v112)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v111 + v112) = v28;
          LODWORD(v112) = v112 + 1;
          unsigned int v22 = v111;
          v24 |= v27 != *((void *)v111 + v112 - 1);
          ++v25;
          v26 -= 8;
        }
        while (v26);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v24)
        {
          uint64_t v78 = *(llvm::ScalarEvolution **)a1;
          uint64_t v79 = 10;
          goto LABEL_90;
        }
        goto LABEL_92;
      }
      goto LABEL_94;
    case 0xB:
      unint64_t v111 = v113;
      uint64_t v112 = 0x200000000;
      uint64_t v29 = *(void *)(a2 + 40);
      LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
      if (v29)
      {
        char v30 = 0;
        BOOL v31 = *(void **)(a2 + 32);
        uint64_t v32 = 8 * v29;
        do
        {
          uint64_t v33 = *v31;
          uint64_t v34 = sub_1CC1342B0(a1, *v31);
          if (v112 >= (unint64_t)HIDWORD(v112)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v111 + v112) = v34;
          LODWORD(v112) = v112 + 1;
          unsigned int v22 = v111;
          v30 |= v33 != *((void *)v111 + v112 - 1);
          ++v31;
          v32 -= 8;
        }
        while (v32);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if ((v30 & 1) == 0) {
          goto LABEL_92;
        }
        uint64_t v78 = *(llvm::ScalarEvolution **)a1;
        uint64_t v79 = 11;
LABEL_90:
        uint64_t AddExpr = llvm::ScalarEvolution::getMinMaxExpr((uint64_t)v78, v79, (uint64_t **)&v111);
        goto LABEL_91;
      }
      goto LABEL_94;
    case 0xC:
      unint64_t v111 = v113;
      uint64_t v112 = 0x200000000;
      uint64_t v72 = *(void *)(a2 + 40);
      LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
      if (v72)
      {
        char v73 = 0;
        uint64_t v74 = *(void **)(a2 + 32);
        uint64_t v75 = 8 * v72;
        do
        {
          uint64_t v76 = *v74;
          uint64_t v77 = sub_1CC1342B0(a1, *v74);
          if (v112 >= (unint64_t)HIDWORD(v112)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v111 + v112) = v77;
          LODWORD(v112) = v112 + 1;
          unsigned int v22 = v111;
          v73 |= v76 != *((void *)v111 + v112 - 1);
          ++v74;
          v75 -= 8;
        }
        while (v75);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v73)
        {
          uint64_t AddExpr = llvm::ScalarEvolution::getSequentialMinMaxExpr(*(void *)a1, 12, (unsigned int *)&v111);
LABEL_91:
          LosslessPtrToIntExpr = (const llvm::SCEV *)AddExpr;
          unsigned int v22 = v111;
        }
LABEL_92:
        if (v22 != v113) {
          free(v22);
        }
      }
      goto LABEL_94;
    case 0xD:
      BOOL v35 = (const llvm::SCEV *)sub_1CC1342B0(a1, *(void *)(a2 + 32));
      LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
      if (v35 != *(const llvm::SCEV **)(a2 + 32))
      {
        uint64_t v36 = *(llvm::ScalarEvolution **)a1;
        uint64_t v37 = *(llvm::Type **)(a2 + 40);
        LosslessPtrToIntExpr = llvm::ScalarEvolution::getLosslessPtrToIntExpr(*(llvm::ScalarEvolution **)a1, v35);
        if (*((_WORD *)LosslessPtrToIntExpr + 12) != 15)
        {
          uint64_t TruncateExpr = (uint64_t)llvm::ScalarEvolution::getTruncateOrZeroExtend(v36, (llvm::detail::IEEEFloat **)LosslessPtrToIntExpr, v37, 0);
          goto LABEL_57;
        }
      }
      goto LABEL_94;
    case 0xE:
      LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
      if (llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)a1, (const llvm::SCEV *)a2, *(const llvm::Loop **)(a1 + 32)) == 1)goto LABEL_94; {
      uint64_t v39 = *(void *)(a2 - 8);
      }
      if (*(unsigned char *)(v39 + 16) == 85)
      {
        unint64_t v40 = sub_1CC134D6C((llvm::ScalarEvolution **)a1, *(llvm::ScalarEvolution **)(v39 - 96), v38);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v41)
        {
          uint64_t v42 = *(void *)(v40 + 32);
          uint64_t v43 = *(unsigned int *)(v42 + 32);
          if (v43 > 0x40)
          {
            int v94 = 0;
            int64_t v95 = (unint64_t)(v43 + 63) >> 6;
            do
            {
              if (v95-- < 1) {
                break;
              }
              unint64_t v97 = *(void *)(*(void *)(v42 + 24) + 8 * v95);
              v94 += __clz(v97);
            }
            while (!v97);
            int v98 = v43 | 0xFFFFFFC0;
            if ((v43 & 0x3F) == 0) {
              int v98 = 0;
            }
            BOOL v44 = v94 + v98 == v43 - 1;
          }
          else
          {
            BOOL v44 = *(void *)(v42 + 24) == 1;
          }
          int v99 = v44;
          uint64_t v100 = *(llvm::ScalarEvolution **)a1;
          BOOL v44 = v99 == 0;
          uint64_t v101 = -32;
          if (!v44) {
            uint64_t v101 = -64;
          }
          unint64_t v102 = *(llvm::Value **)(v39 + v101);
          uint64_t v103 = *((void *)v100 + 13);
          unsigned int v104 = *((_DWORD *)v100 + 30);
          if (v104)
          {
            unsigned int v105 = ((v102 >> 4) ^ (v102 >> 9)) & (v104 - 1);
            uint64_t v106 = v103 + 48 * v105;
            uint64_t v107 = *(llvm::Value **)(v106 + 24);
            if (v107 == v102)
            {
LABEL_134:
              if (v106 == v103 + 48 * v104 || (LosslessPtrToIntExpr = *(const llvm::SCEV **)(v106 + 40)) == 0)
              {
                uint64_t TruncateExpr = llvm::ScalarEvolution::createSCEVIter(v100, v102);
LABEL_57:
                LosslessPtrToIntExpr = (const llvm::SCEV *)TruncateExpr;
              }
              goto LABEL_94;
            }
            int v108 = 1;
            while (v107 != (llvm::Value *)-4096)
            {
              unsigned int v109 = v105 + v108++;
              unsigned int v105 = v109 & (v104 - 1);
              uint64_t v106 = v103 + 48 * v105;
              uint64_t v107 = *(llvm::Value **)(v106 + 24);
              if (v107 == v102) {
                goto LABEL_134;
              }
            }
          }
          uint64_t v106 = v103 + 48 * v104;
          goto LABEL_134;
        }
      }
      else
      {
        unint64_t v92 = sub_1CC134D6C((llvm::ScalarEvolution **)a1, *(llvm::ScalarEvolution **)(a2 - 8), v38);
        if (v93) {
          LosslessPtrToIntExpr = (const llvm::SCEV *)v92;
        }
        else {
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        }
      }
LABEL_94:
      int v81 = *(_DWORD *)(a1 + 24);
      if (!v81)
      {
        uint64_t v90 = 0;
LABEL_109:
        int v8 = sub_1CC131DD4(v5, (uint64_t)&v110, &v110, v90);
        *int v8 = v110;
        v8[1] = LosslessPtrToIntExpr;
        return v8[1];
      }
      uint64_t v82 = *(void *)(a1 + 8);
      int v83 = v81 - 1;
      unsigned int v84 = v83 & ((a2 >> 4) ^ (a2 >> 9));
      int v8 = (void *)(v82 + 16 * v84);
      uint64_t v85 = *v8;
      if (*v8 != a2)
      {
        unsigned int v86 = 0;
        int v87 = 1;
        while (v85 != -4096)
        {
          if (v86) {
            BOOL v88 = 0;
          }
          else {
            BOOL v88 = v85 == -8192;
          }
          if (v88) {
            unsigned int v86 = v8;
          }
          unsigned int v89 = v84 + v87++;
          unsigned int v84 = v89 & v83;
          int v8 = (void *)(v82 + 16 * v84);
          uint64_t v85 = *v8;
          if (*v8 == a2) {
            return v8[1];
          }
        }
        if (v86) {
          uint64_t v90 = v86;
        }
        else {
          uint64_t v90 = v8;
        }
        goto LABEL_109;
      }
      return v8[1];
    default:
      goto LABEL_94;
  }
}

unint64_t sub_1CC134D6C(llvm::ScalarEvolution **a1, llvm::ScalarEvolution *a2, const llvm::APInt *a3)
{
  if (a1[5] != a2) {
    return 0;
  }
  int v4 = *((unsigned __int8 *)a1 + 48);
  uint64_t v5 = *a1;
  uint64_t v6 = *(uint64_t ****)*a1;
  uint64_t v7 = ***v6;
  uint64_t v8 = v7 + 1888;
  unsigned int v9 = *(_DWORD *)(v7 + 1896);
  if (v4)
  {
    if (v9 != 13)
    {
      int v10 = v6[5];
      if ((v9 & 0xFE) == 0x12) {
        unsigned int v9 = *(_DWORD *)(**(void **)(v7 + 1904) + 8);
      }
      int v11 = v10[63];
      if (v9 < 0x100) {
        goto LABEL_16;
      }
      unsigned int v12 = v9 >> 8;
      unint64_t v13 = *((unsigned int *)v10 + 128);
      uint64_t v14 = v11;
      if (v13)
      {
        uint64_t v14 = v11;
        unint64_t v15 = v13;
        do
        {
          unint64_t v16 = v15 >> 1;
          char v17 = &v14[2 * (v15 >> 1)];
          unsigned int v18 = *((_DWORD *)v17 + 2);
          uint64_t v19 = v17 + 2;
          v15 += ~(v15 >> 1);
          if (v18 < v12) {
            uint64_t v14 = v19;
          }
          else {
            unint64_t v15 = v16;
          }
        }
        while (v15);
      }
      if (v14 == &v11[2 * v13] || *((_DWORD *)v14 + 2) != v12) {
LABEL_16:
      }
        uint64_t v14 = v11;
      uint64_t v8 = llvm::IntegerType::get(*(llvm::IntegerType **)(v7 + 1888), (llvm::LLVMContext *)*((unsigned int *)v14 + 3));
      if ((*(_DWORD *)(v7 + 1896) & 0xFE) == 0x12)
      {
        uint64_t v36 = (llvm::Type *)*(unsigned int *)(v7 + 1920);
        if (*(_DWORD *)(v7 + 1896) == 19) {
          llvm::ScalableVectorType::get((uint64_t **)v8, v36);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v8, v36);
        }
      }
    }
    uint64_t v20 = *(uint64_t **)v8;
    unsigned int v21 = *(_DWORD *)(v8 + 8);
    unsigned int v39 = v21 >> 8;
    if (v21 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v22 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v21) + 63);
    if (v21 <= 0xFF) {
      LOBYTE(v22) = 0;
    }
    unint64_t v38 = v22 & 1;
  }
  else
  {
    if (v9 != 13)
    {
      uint64_t v23 = v6[5];
      if ((v9 & 0xFE) == 0x12) {
        unsigned int v9 = *(_DWORD *)(**(void **)(v7 + 1904) + 8);
      }
      char v24 = v23[63];
      if (v9 < 0x100) {
        goto LABEL_34;
      }
      unsigned int v25 = v9 >> 8;
      unint64_t v26 = *((unsigned int *)v23 + 128);
      uint64_t v27 = v24;
      if (v26)
      {
        uint64_t v27 = v24;
        unint64_t v28 = v26;
        do
        {
          unint64_t v29 = v28 >> 1;
          char v30 = &v27[2 * (v28 >> 1)];
          unsigned int v31 = *((_DWORD *)v30 + 2);
          uint64_t v32 = v30 + 2;
          v28 += ~(v28 >> 1);
          if (v31 < v25) {
            uint64_t v27 = v32;
          }
          else {
            unint64_t v28 = v29;
          }
        }
        while (v28);
      }
      if (v27 == &v24[2 * v26] || *((_DWORD *)v27 + 2) != v25) {
LABEL_34:
      }
        uint64_t v27 = v24;
      uint64_t v8 = llvm::IntegerType::get(*(llvm::IntegerType **)(v7 + 1888), (llvm::LLVMContext *)*((unsigned int *)v27 + 3));
      if ((*(_DWORD *)(v7 + 1896) & 0xFE) == 0x12)
      {
        uint64_t v37 = (llvm::Type *)*(unsigned int *)(v7 + 1920);
        if (*(_DWORD *)(v7 + 1896) == 19) {
          llvm::ScalableVectorType::get((uint64_t **)v8, v37);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v8, v37);
        }
      }
    }
    uint64_t v20 = *(uint64_t **)v8;
    unsigned int v33 = *(_DWORD *)(v8 + 8);
    unsigned int v39 = v33 >> 8;
    if (v33 >> 8 >= 0x41) {
      operator new[]();
    }
    unint64_t v38 = 0;
  }
  uint64_t v34 = (llvm::ConstantInt *)llvm::ConstantInt::get((llvm::ConstantInt *)v20, (llvm::LLVMContext *)&v38, a3);
  if (v39 >= 0x41)
  {
    if (v38)
    {
      BOOL v35 = v34;
      MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
      uint64_t v34 = v35;
    }
  }
  return llvm::ScalarEvolution::getConstant(v5, v34);
}

uint64_t sub_1CC1350F8(uint64_t a1, uint64_t a2)
{
  v82[2] = *MEMORY[0x1E4F143B8];
  uint64_t v79 = a2;
  uint64_t v5 = a1 + 8;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);
  if (v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v8 = (void *)(v4 + 16 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a2) {
      goto LABEL_8;
    }
    int v10 = 1;
    while (v9 != -4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v6 - 1);
      uint64_t v9 = *(void *)(v4 + 16 * v7);
      if (v9 == a2)
      {
        uint64_t v8 = (void *)(v4 + 16 * v7);
        goto LABEL_8;
      }
    }
  }
  uint64_t v8 = (void *)(v4 + 16 * v6);
LABEL_8:
  if (v8 == (void *)(v4 + 16 * v6))
  {
    LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
    switch(*(_WORD *)(a2 + 24))
    {
      case 1:
        unint64_t v13 = (const llvm::SCEV *)sub_1CC1350F8(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v13 != *(const llvm::SCEV **)(a2 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getTruncateExpr(*(llvm::ScalarEvolution **)a1, v13, *(llvm::Type **)(a2 + 40), 0);
          goto LABEL_54;
        }
        goto LABEL_87;
      case 2:
        unint64_t v38 = (llvm::detail::IEEEFloat **)sub_1CC1350F8(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v38 != *(llvm::detail::IEEEFloat ***)(a2 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getZeroExtendExpr(*(llvm::ScalarEvolution **)a1, v38, *(uint64_t ***)(a2 + 40), 0);
          goto LABEL_54;
        }
        goto LABEL_87;
      case 3:
        unint64_t v15 = (llvm::detail::IEEEFloat **)sub_1CC1350F8(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v15 != *(llvm::detail::IEEEFloat ***)(a2 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getSignExtendExpr(*(llvm::ScalarEvolution **)a1, v15, *(uint64_t ***)(a2 + 40), 0);
          goto LABEL_54;
        }
        goto LABEL_87;
      case 4:
        int v80 = v82;
        uint64_t v81 = 0x200000000;
        uint64_t v39 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v39)
        {
          char v40 = 0;
          char v41 = *(void **)(a2 + 32);
          uint64_t v42 = 8 * v39;
          do
          {
            uint64_t v43 = *v41;
            uint64_t v44 = sub_1CC1350F8(a1, *v41);
            if (v81 >= (unint64_t)HIDWORD(v81)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v80 + v81) = v44;
            LODWORD(v81) = v81 + 1;
            unint64_t v22 = v80;
            v40 |= v43 != *((void *)v80 + v81 - 1);
            ++v41;
            v42 -= 8;
          }
          while (v42);
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
          if (v40)
          {
            uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(*(void *)a1, (unint64_t **)&v80, 0, 0);
            break;
          }
          goto LABEL_85;
        }
        goto LABEL_87;
      case 5:
        int v80 = v82;
        uint64_t v81 = 0x200000000;
        uint64_t v45 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v45)
        {
          char v46 = 0;
          char v47 = *(void **)(a2 + 32);
          uint64_t v48 = 8 * v45;
          do
          {
            uint64_t v49 = *v47;
            uint64_t v50 = sub_1CC1350F8(a1, *v47);
            if (v81 >= (unint64_t)HIDWORD(v81)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v80 + v81) = v50;
            LODWORD(v81) = v81 + 1;
            unint64_t v22 = v80;
            v46 |= v49 != *((void *)v80 + v81 - 1);
            ++v47;
            v48 -= 8;
          }
          while (v48);
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
          if (v46)
          {
            uint64_t AddExpr = llvm::ScalarEvolution::getMulExpr(*(void *)a1, (uint64_t)&v80, 0, 0);
            break;
          }
          goto LABEL_85;
        }
        goto LABEL_87;
      case 6:
        uint64_t v51 = (const llvm::SCEV *)sub_1CC1350F8(a1, *(void *)(a2 + 32));
        unint64_t v52 = sub_1CC1350F8(a1, *(void *)(a2 + 40));
        if (v51 != *(const llvm::SCEV **)(a2 + 32)
          || (LosslessPtrToIntExpr = (const llvm::SCEV *)a2, v52 != *(void *)(a2 + 40)))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getUDivExpr(*(llvm::ScalarEvolution **)a1, v51, v52);
          goto LABEL_54;
        }
        goto LABEL_87;
      case 7:
        if (*(void *)(a2 + 48) != *(void *)(a1 + 32) || *(void *)(a2 + 40) != 2) {
          goto LABEL_58;
        }
        uint64_t TruncateExpr = llvm::ScalarEvolution::getMinusSCEV(*(llvm::ScalarEvolution **)a1, (llvm::SCEV *)a2, *(const llvm::APInt **)(*(void *)(a2 + 32) + 8), 0, 0);
        goto LABEL_54;
      case 8:
        int v80 = v82;
        uint64_t v81 = 0x200000000;
        uint64_t v16 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (!v16) {
          goto LABEL_87;
        }
        char v17 = 0;
        unsigned int v18 = *(void **)(a2 + 32);
        uint64_t v19 = 8 * v16;
        do
        {
          uint64_t v20 = *v18;
          uint64_t v21 = sub_1CC1350F8(a1, *v18);
          if (v81 >= (unint64_t)HIDWORD(v81)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v80 + v81) = v21;
          LODWORD(v81) = v81 + 1;
          unint64_t v22 = v80;
          v17 |= v20 != *((void *)v80 + v81 - 1);
          ++v18;
          v19 -= 8;
        }
        while (v19);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if ((v17 & 1) == 0) {
          goto LABEL_85;
        }
        uint64_t v65 = *(llvm::ScalarEvolution **)a1;
        uint64_t v66 = 8;
        goto LABEL_83;
      case 9:
        int v80 = v82;
        uint64_t v81 = 0x200000000;
        uint64_t v53 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (!v53) {
          goto LABEL_87;
        }
        char v54 = 0;
        uint64_t v55 = *(void **)(a2 + 32);
        uint64_t v56 = 8 * v53;
        do
        {
          uint64_t v57 = *v55;
          uint64_t v58 = sub_1CC1350F8(a1, *v55);
          if (v81 >= (unint64_t)HIDWORD(v81)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v80 + v81) = v58;
          LODWORD(v81) = v81 + 1;
          unint64_t v22 = v80;
          v54 |= v57 != *((void *)v80 + v81 - 1);
          ++v55;
          v56 -= 8;
        }
        while (v56);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if ((v54 & 1) == 0) {
          goto LABEL_85;
        }
        uint64_t v65 = *(llvm::ScalarEvolution **)a1;
        uint64_t v66 = 9;
        goto LABEL_83;
      case 0xA:
        int v80 = v82;
        uint64_t v81 = 0x200000000;
        uint64_t v23 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (!v23) {
          goto LABEL_87;
        }
        char v24 = 0;
        unsigned int v25 = *(void **)(a2 + 32);
        uint64_t v26 = 8 * v23;
        do
        {
          uint64_t v27 = *v25;
          uint64_t v28 = sub_1CC1350F8(a1, *v25);
          if (v81 >= (unint64_t)HIDWORD(v81)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v80 + v81) = v28;
          LODWORD(v81) = v81 + 1;
          unint64_t v22 = v80;
          v24 |= v27 != *((void *)v80 + v81 - 1);
          ++v25;
          v26 -= 8;
        }
        while (v26);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if ((v24 & 1) == 0) {
          goto LABEL_85;
        }
        uint64_t v65 = *(llvm::ScalarEvolution **)a1;
        uint64_t v66 = 10;
        goto LABEL_83;
      case 0xB:
        int v80 = v82;
        uint64_t v81 = 0x200000000;
        uint64_t v29 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (!v29) {
          goto LABEL_87;
        }
        char v30 = 0;
        unsigned int v31 = *(void **)(a2 + 32);
        uint64_t v32 = 8 * v29;
        do
        {
          uint64_t v33 = *v31;
          uint64_t v34 = sub_1CC1350F8(a1, *v31);
          if (v81 >= (unint64_t)HIDWORD(v81)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v80 + v81) = v34;
          LODWORD(v81) = v81 + 1;
          unint64_t v22 = v80;
          v30 |= v33 != *((void *)v80 + v81 - 1);
          ++v31;
          v32 -= 8;
        }
        while (v32);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if ((v30 & 1) == 0) {
          goto LABEL_85;
        }
        uint64_t v65 = *(llvm::ScalarEvolution **)a1;
        uint64_t v66 = 11;
LABEL_83:
        uint64_t AddExpr = llvm::ScalarEvolution::getMinMaxExpr((uint64_t)v65, v66, (uint64_t **)&v80);
        break;
      case 0xC:
        int v80 = v82;
        uint64_t v81 = 0x200000000;
        uint64_t v59 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (!v59) {
          goto LABEL_87;
        }
        char v60 = 0;
        char v61 = *(void **)(a2 + 32);
        uint64_t v62 = 8 * v59;
        do
        {
          uint64_t v63 = *v61;
          uint64_t v64 = sub_1CC1350F8(a1, *v61);
          if (v81 >= (unint64_t)HIDWORD(v81)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v80 + v81) = v64;
          LODWORD(v81) = v81 + 1;
          unint64_t v22 = v80;
          v60 |= v63 != *((void *)v80 + v81 - 1);
          ++v61;
          v62 -= 8;
        }
        while (v62);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if ((v60 & 1) == 0) {
          goto LABEL_85;
        }
        uint64_t AddExpr = llvm::ScalarEvolution::getSequentialMinMaxExpr(*(void *)a1, 12, (unsigned int *)&v80);
        break;
      case 0xD:
        BOOL v35 = (const llvm::SCEV *)sub_1CC1350F8(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v35 != *(const llvm::SCEV **)(a2 + 32))
        {
          uint64_t v36 = *(llvm::ScalarEvolution **)a1;
          uint64_t v37 = *(llvm::Type **)(a2 + 40);
          LosslessPtrToIntExpr = llvm::ScalarEvolution::getLosslessPtrToIntExpr(*(llvm::ScalarEvolution **)a1, v35);
          if (*((_WORD *)LosslessPtrToIntExpr + 12) != 15)
          {
            uint64_t TruncateExpr = (uint64_t)llvm::ScalarEvolution::getTruncateOrZeroExtend(v36, (llvm::detail::IEEEFloat **)LosslessPtrToIntExpr, v37, 0);
LABEL_54:
            LosslessPtrToIntExpr = (const llvm::SCEV *)TruncateExpr;
          }
        }
        goto LABEL_87;
      case 0xE:
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)a1, (const llvm::SCEV *)a2, *(const llvm::Loop **)(a1 + 32)) != 1)
        {
LABEL_58:
          *(unsigned char *)(a1 + 40) = 0;
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        }
        goto LABEL_87;
      default:
        goto LABEL_87;
    }
    LosslessPtrToIntExpr = (const llvm::SCEV *)AddExpr;
    unint64_t v22 = v80;
LABEL_85:
    if (v22 != v82) {
      free(v22);
    }
LABEL_87:
    int v68 = *(_DWORD *)(a1 + 24);
    if (!v68)
    {
      uint64_t v77 = 0;
LABEL_102:
      uint64_t v8 = sub_1CC131DD4(v5, (uint64_t)&v79, &v79, v77);
      *uint64_t v8 = v79;
      v8[1] = LosslessPtrToIntExpr;
      return v8[1];
    }
    uint64_t v69 = *(void *)(a1 + 8);
    int v70 = v68 - 1;
    unsigned int v71 = v70 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v8 = (void *)(v69 + 16 * v71);
    uint64_t v72 = *v8;
    if (*v8 != a2)
    {
      char v73 = 0;
      int v74 = 1;
      while (v72 != -4096)
      {
        if (v73) {
          BOOL v75 = 0;
        }
        else {
          BOOL v75 = v72 == -8192;
        }
        if (v75) {
          char v73 = v8;
        }
        unsigned int v76 = v71 + v74++;
        unsigned int v71 = v76 & v70;
        uint64_t v8 = (void *)(v69 + 16 * v71);
        uint64_t v72 = *v8;
        if (*v8 == a2) {
          return v8[1];
        }
      }
      if (v73) {
        uint64_t v77 = v73;
      }
      else {
        uint64_t v77 = v8;
      }
      goto LABEL_102;
    }
  }
  return v8[1];
}

uint64_t sub_1CC1359F8(void *a1, uint64_t a2)
{
  v82[2] = *MEMORY[0x1E4F143B8];
  uint64_t v79 = a2;
  uint64_t v5 = (uint64_t)(a1 + 1);
  uint64_t v4 = a1[1];
  uint64_t v6 = *((unsigned int *)a1 + 6);
  if (v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v8 = (void *)(v4 + 16 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a2) {
      goto LABEL_8;
    }
    int v10 = 1;
    while (v9 != -4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v6 - 1);
      uint64_t v9 = *(void *)(v4 + 16 * v7);
      if (v9 == a2)
      {
        uint64_t v8 = (void *)(v4 + 16 * v7);
        goto LABEL_8;
      }
    }
  }
  uint64_t v8 = (void *)(v4 + 16 * v6);
LABEL_8:
  if (v8 == (void *)(v4 + 16 * v6))
  {
    LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
    switch(*(_WORD *)(a2 + 24))
    {
      case 1:
        unint64_t v13 = (const llvm::SCEV *)sub_1CC1359F8(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v13 != *(const llvm::SCEV **)(a2 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getTruncateExpr((llvm::ScalarEvolution *)*a1, v13, *(llvm::Type **)(a2 + 40), 0);
          goto LABEL_54;
        }
        break;
      case 2:
        unint64_t v38 = (const llvm::SCEV *)sub_1CC1359F8(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v38 != *(const llvm::SCEV **)(a2 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getZeroExtendExpr((llvm::ScalarEvolution *)*a1, v38, *(llvm::Type **)(a2 + 40), 0);
          goto LABEL_54;
        }
        break;
      case 3:
        unint64_t v15 = (llvm::detail::IEEEFloat **)sub_1CC1359F8(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v15 != *(llvm::detail::IEEEFloat ***)(a2 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getSignExtendExpr((llvm::ScalarEvolution *)*a1, v15, *(uint64_t ***)(a2 + 40), 0);
          goto LABEL_54;
        }
        break;
      case 4:
        int v80 = v82;
        uint64_t v81 = 0x200000000;
        uint64_t v39 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v39)
        {
          char v40 = 0;
          char v41 = *(void **)(a2 + 32);
          uint64_t v42 = 8 * v39;
          do
          {
            uint64_t v43 = *v41;
            uint64_t v44 = sub_1CC1359F8(a1, *v41);
            if (v81 >= (unint64_t)HIDWORD(v81)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v80 + v81) = v44;
            LODWORD(v81) = v81 + 1;
            unint64_t v22 = v80;
            v40 |= v43 != *((void *)v80 + v81 - 1);
            ++v41;
            v42 -= 8;
          }
          while (v42);
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
          if (v40)
          {
            uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(*a1, &v80, 0, 0);
            goto LABEL_83;
          }
          goto LABEL_84;
        }
        break;
      case 5:
        int v80 = v82;
        uint64_t v81 = 0x200000000;
        uint64_t v45 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v45)
        {
          char v46 = 0;
          char v47 = *(void **)(a2 + 32);
          uint64_t v48 = 8 * v45;
          do
          {
            uint64_t v49 = *v47;
            uint64_t v50 = sub_1CC1359F8(a1, *v47);
            if (v81 >= (unint64_t)HIDWORD(v81)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v80 + v81) = v50;
            LODWORD(v81) = v81 + 1;
            unint64_t v22 = v80;
            v46 |= v49 != *((void *)v80 + v81 - 1);
            ++v47;
            v48 -= 8;
          }
          while (v48);
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
          if (v46)
          {
            uint64_t AddExpr = llvm::ScalarEvolution::getMulExpr(*a1, &v80, 0, 0);
            goto LABEL_83;
          }
          goto LABEL_84;
        }
        break;
      case 6:
        uint64_t v51 = (const llvm::SCEV *)sub_1CC1359F8(a1, *(void *)(a2 + 32));
        unint64_t v52 = sub_1CC1359F8(a1, *(void *)(a2 + 40));
        if (v51 != *(const llvm::SCEV **)(a2 + 32)
          || (LosslessPtrToIntExpr = (const llvm::SCEV *)a2, v52 != *(void *)(a2 + 40)))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getUDivExpr((llvm::ScalarEvolution *)*a1, v51, v52);
          goto LABEL_54;
        }
        break;
      case 7:
        if (*(void *)(a2 + 48) != a1[4])
        {
          *((unsigned char *)a1 + 41) = 1;
          goto LABEL_57;
        }
        LosslessPtrToIntExpr = **(const llvm::SCEV ***)(a2 + 32);
        break;
      case 8:
        int v80 = v82;
        uint64_t v81 = 0x200000000;
        uint64_t v16 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v16)
        {
          char v17 = 0;
          unsigned int v18 = *(void **)(a2 + 32);
          uint64_t v19 = 8 * v16;
          do
          {
            uint64_t v20 = *v18;
            uint64_t v21 = sub_1CC1359F8(a1, *v18);
            if (v81 >= (unint64_t)HIDWORD(v81)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v80 + v81) = v21;
            LODWORD(v81) = v81 + 1;
            unint64_t v22 = v80;
            v17 |= v20 != *((void *)v80 + v81 - 1);
            ++v18;
            v19 -= 8;
          }
          while (v19);
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
          if (v17)
          {
            uint64_t v65 = (llvm::ScalarEvolution *)*a1;
            uint64_t v66 = 8;
            goto LABEL_82;
          }
          goto LABEL_84;
        }
        break;
      case 9:
        int v80 = v82;
        uint64_t v81 = 0x200000000;
        uint64_t v53 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v53)
        {
          char v54 = 0;
          uint64_t v55 = *(void **)(a2 + 32);
          uint64_t v56 = 8 * v53;
          do
          {
            uint64_t v57 = *v55;
            uint64_t v58 = sub_1CC1359F8(a1, *v55);
            if (v81 >= (unint64_t)HIDWORD(v81)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v80 + v81) = v58;
            LODWORD(v81) = v81 + 1;
            unint64_t v22 = v80;
            v54 |= v57 != *((void *)v80 + v81 - 1);
            ++v55;
            v56 -= 8;
          }
          while (v56);
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
          if (v54)
          {
            uint64_t v65 = (llvm::ScalarEvolution *)*a1;
            uint64_t v66 = 9;
            goto LABEL_82;
          }
          goto LABEL_84;
        }
        break;
      case 0xA:
        int v80 = v82;
        uint64_t v81 = 0x200000000;
        uint64_t v23 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v23)
        {
          char v24 = 0;
          unsigned int v25 = *(void **)(a2 + 32);
          uint64_t v26 = 8 * v23;
          do
          {
            uint64_t v27 = *v25;
            uint64_t v28 = sub_1CC1359F8(a1, *v25);
            if (v81 >= (unint64_t)HIDWORD(v81)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v80 + v81) = v28;
            LODWORD(v81) = v81 + 1;
            unint64_t v22 = v80;
            v24 |= v27 != *((void *)v80 + v81 - 1);
            ++v25;
            v26 -= 8;
          }
          while (v26);
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
          if (v24)
          {
            uint64_t v65 = (llvm::ScalarEvolution *)*a1;
            uint64_t v66 = 10;
            goto LABEL_82;
          }
          goto LABEL_84;
        }
        break;
      case 0xB:
        int v80 = v82;
        uint64_t v81 = 0x200000000;
        uint64_t v29 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v29)
        {
          char v30 = 0;
          unsigned int v31 = *(void **)(a2 + 32);
          uint64_t v32 = 8 * v29;
          do
          {
            uint64_t v33 = *v31;
            uint64_t v34 = sub_1CC1359F8(a1, *v31);
            if (v81 >= (unint64_t)HIDWORD(v81)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v80 + v81) = v34;
            LODWORD(v81) = v81 + 1;
            unint64_t v22 = v80;
            v30 |= v33 != *((void *)v80 + v81 - 1);
            ++v31;
            v32 -= 8;
          }
          while (v32);
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
          if ((v30 & 1) == 0) {
            goto LABEL_84;
          }
          uint64_t v65 = (llvm::ScalarEvolution *)*a1;
          uint64_t v66 = 11;
LABEL_82:
          uint64_t AddExpr = llvm::ScalarEvolution::getMinMaxExpr(v65, v66, &v80);
          goto LABEL_83;
        }
        break;
      case 0xC:
        int v80 = v82;
        uint64_t v81 = 0x200000000;
        uint64_t v59 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v59)
        {
          char v60 = 0;
          char v61 = *(void **)(a2 + 32);
          uint64_t v62 = 8 * v59;
          do
          {
            uint64_t v63 = *v61;
            uint64_t v64 = sub_1CC1359F8(a1, *v61);
            if (v81 >= (unint64_t)HIDWORD(v81)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v80 + v81) = v64;
            LODWORD(v81) = v81 + 1;
            unint64_t v22 = v80;
            v60 |= v63 != *((void *)v80 + v81 - 1);
            ++v61;
            v62 -= 8;
          }
          while (v62);
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
          if (v60)
          {
            uint64_t AddExpr = llvm::ScalarEvolution::getSequentialMinMaxExpr(*a1, 12, (unsigned int *)&v80);
LABEL_83:
            LosslessPtrToIntExpr = (const llvm::SCEV *)AddExpr;
            unint64_t v22 = v80;
          }
LABEL_84:
          if (v22 != v82) {
            free(v22);
          }
        }
        break;
      case 0xD:
        BOOL v35 = (const llvm::SCEV *)sub_1CC1359F8(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v35 != *(const llvm::SCEV **)(a2 + 32))
        {
          uint64_t v36 = (llvm::ScalarEvolution *)*a1;
          uint64_t v37 = *(llvm::Type **)(a2 + 40);
          LosslessPtrToIntExpr = llvm::ScalarEvolution::getLosslessPtrToIntExpr((llvm::ScalarEvolution *)*a1, v35);
          if (*((_WORD *)LosslessPtrToIntExpr + 12) != 15)
          {
            uint64_t TruncateExpr = llvm::ScalarEvolution::getTruncateOrZeroExtend(v36, LosslessPtrToIntExpr, v37, 0);
LABEL_54:
            LosslessPtrToIntExpr = (const llvm::SCEV *)TruncateExpr;
          }
        }
        break;
      case 0xE:
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)*a1, (const llvm::SCEV *)a2, (const llvm::Loop *)a1[4]) != 1)
        {
          *((unsigned char *)a1 + 40) = 1;
LABEL_57:
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        }
        break;
      default:
        break;
    }
    int v68 = *((_DWORD *)a1 + 6);
    if (!v68)
    {
      uint64_t v77 = 0;
LABEL_101:
      uint64_t v8 = sub_1CC131DD4(v5, (uint64_t)&v79, &v79, v77);
      *uint64_t v8 = v79;
      v8[1] = LosslessPtrToIntExpr;
      return v8[1];
    }
    uint64_t v69 = a1[1];
    int v70 = v68 - 1;
    unsigned int v71 = v70 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v8 = (void *)(v69 + 16 * v71);
    uint64_t v72 = *v8;
    if (*v8 != a2)
    {
      char v73 = 0;
      int v74 = 1;
      while (v72 != -4096)
      {
        if (v73) {
          BOOL v75 = 0;
        }
        else {
          BOOL v75 = v72 == -8192;
        }
        if (v75) {
          char v73 = v8;
        }
        unsigned int v76 = v71 + v74++;
        unsigned int v71 = v76 & v70;
        uint64_t v8 = (void *)(v69 + 16 * v71);
        uint64_t v72 = *v8;
        if (*v8 == a2) {
          return v8[1];
        }
      }
      if (v73) {
        uint64_t v77 = v73;
      }
      else {
        uint64_t v77 = v8;
      }
      goto LABEL_101;
    }
  }
  return v8[1];
}

void sub_1CC1362E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v6 = (void *)a1[11];
  uint64_t v5 = (void *)a1[12];
  uint64_t v4 = (unsigned int *)(a1 + 11);
  uint64_t v7 = v4[5];
  if (v5 == v6)
  {
    if (v7)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 8 * v7;
      int v10 = v5;
      while (*v10 != a2)
      {
        if (*v10 == -2) {
          uint64_t v8 = v10;
        }
        ++v10;
        v9 -= 8;
        if (!v9)
        {
          if (!v8) {
            goto LABEL_9;
          }
          *uint64_t v8 = a2;
          --*((_DWORD *)a1 + 28);
          goto LABEL_33;
        }
      }
      return;
    }
LABEL_9:
    unsigned int v11 = *((_DWORD *)a1 + 26);
    if (v7 < v11)
    {
      *((_DWORD *)a1 + 27) = v7 + 1;
      v5[v7] = a2;
LABEL_33:
      uint64_t v21 = *a1;
      switch(*(_WORD *)(a2 + 24))
      {
        case 6:
        case 0xF:
          goto LABEL_45;
        case 7:
          uint64_t v23 = *(void **)(v21 + 8);
          if (!v23) {
            goto LABEL_45;
          }
          char v24 = *(void **)(a2 + 48);
          if (v24 == v23) {
            goto LABEL_34;
          }
          break;
        case 0xE:
          unsigned int v25 = *(unsigned __int8 **)(a2 - 8);
          unsigned int v26 = v25[16];
          if (v26 == 21) {
            return;
          }
          if (v26 >= 0x1C) {
            llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(v21 + 24), (const llvm::Instruction *)v25, *(const llvm::BasicBlock **)(v21 + 16));
          }
          goto LABEL_45;
        default:
          goto LABEL_34;
      }
      do
      {
        if (!v23)
        {
LABEL_45:
          *(_WORD *)uint64_t v21 = 1;
          return;
        }
        uint64_t v23 = (void *)*v23;
      }
      while (v23 != v24);
LABEL_34:
      unsigned int v22 = *((_DWORD *)a1 + 4);
      if (v22 >= *((_DWORD *)a1 + 5)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(a1[1] + 8 * v22) = a2;
      ++*((_DWORD *)a1 + 4);
      return;
    }
  }
  else
  {
    unsigned int v11 = *((_DWORD *)a1 + 26);
  }
  if (3 * v11 <= 4 * ((int)v7 - *((_DWORD *)a1 + 28)))
  {
    if (v11 >= 0x40) {
      v11 *= 2;
    }
    else {
      unsigned int v11 = 128;
    }
  }
  else if (v11 - v7 >= v11 >> 3)
  {
    goto LABEL_14;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v4, v11);
  unsigned int v11 = *((_DWORD *)a1 + 26);
  uint64_t v5 = (void *)a1[12];
LABEL_14:
  unsigned int v12 = v11 - 1;
  unsigned int v13 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v14 = &v5[v13];
  uint64_t v15 = *v14;
  if (*v14 != -1)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    while (v15 != a2)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -2;
      }
      if (v18) {
        uint64_t v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      uint64_t v14 = &v5[v19 & v12];
      uint64_t v15 = *v14;
      if (*v14 == -1) {
        goto LABEL_26;
      }
    }
    return;
  }
  uint64_t v16 = 0;
LABEL_26:
  if (v16) {
    uint64_t v20 = v16;
  }
  else {
    uint64_t v20 = v14;
  }
  if (*v20 != a2)
  {
    if (*v20 == -2) {
      --*((_DWORD *)a1 + 28);
    }
    else {
      ++*((_DWORD *)a1 + 27);
    }
    *uint64_t v20 = a2;
    goto LABEL_33;
  }
}

void *sub_1CC136564(uint64_t *a1, int a2)
{
  unsigned int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = (uint64_t *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  uint64_t result = operator new(40 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v12 = *((unsigned int *)a1 + 4);
    if (v12)
    {
      uint64_t v13 = 40 * v12;
      do
      {
        void *result = -4096;
        result += 5;
        v13 -= 40;
      }
      while (v13);
    }
    if (v3)
    {
      uint64_t v14 = &v4[5 * v3];
      uint64_t v15 = v4;
      do
      {
        uint64_t v16 = *v15;
        if ((*v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v17 = *((_DWORD *)a1 + 4) - 1;
          unsigned int v18 = v17 & ((v16 >> 4) ^ (v16 >> 9));
          uint64_t v19 = *a1 + 40 * v18;
          uint64_t v20 = *(void *)v19;
          if (v16 != *(void *)v19)
          {
            uint64_t v21 = 0;
            int v22 = 1;
            while (v20 != -4096)
            {
              if (v21) {
                BOOL v23 = 0;
              }
              else {
                BOOL v23 = v20 == -8192;
              }
              if (v23) {
                uint64_t v21 = v19;
              }
              unsigned int v24 = v18 + v22++;
              unsigned int v18 = v24 & v17;
              uint64_t v19 = *a1 + 40 * (v24 & v17);
              uint64_t v20 = *(void *)v19;
              if (v16 == *(void *)v19) {
                goto LABEL_27;
              }
            }
            if (v21) {
              uint64_t v19 = v21;
            }
          }
LABEL_27:
          *(void *)uint64_t v19 = v16;
          *(_DWORD *)(v19 + 16) = *((_DWORD *)v15 + 4);
          *(void *)(v19 + 8) = v15[1];
          *((_DWORD *)v15 + 4) = 0;
          *(_DWORD *)(v19 + 32) = *((_DWORD *)v15 + 8);
          *(void *)(v19 + 24) = v15[3];
          *((_DWORD *)v15 + 8) = 0;
          ++*((_DWORD *)a1 + 2);
          if (*((_DWORD *)v15 + 4) >= 0x41u)
          {
            uint64_t v25 = v15[1];
            if (v25) {
              MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
            }
          }
        }
        v15 += 5;
      }
      while (v15 != v14);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v10 = *((unsigned int *)a1 + 4);
  if (v10)
  {
    uint64_t v11 = 40 * v10;
    do
    {
      void *result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC13675C(uint64_t a1, long long **a2)
{
  if ((long long **)a1 != a2)
  {
    unint64_t v5 = a2 + 2;
    uint64_t v4 = *a2;
    if (*a2 != (long long *)(a2 + 2))
    {
      uint64_t v34 = *(char **)a1;
      unsigned int v35 = *(_DWORD *)(a1 + 8);
      if (v35)
      {
        uint64_t v45 = 88 * v35;
        do
        {
          char v46 = *(void **)&v34[v45 - 56];
          if (v46 != *(void **)&v34[v45 - 64]) {
            free(v46);
          }
          v45 -= 88;
        }
        while (v45);
        uint64_t v34 = *(char **)a1;
      }
      if (v34 != (char *)(a1 + 16)) {
        free(v34);
      }
      *(void *)a1 = *a2;
      int v7 = a2 + 1;
      *(void *)(a1 + 8) = a2[1];
      *a2 = (long long *)v5;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_19;
    }
    int v7 = a2 + 1;
    unint64_t v6 = *((unsigned int *)a2 + 2);
    unsigned int v8 = *(_DWORD *)(a1 + 8);
    if (v8 >= v6)
    {
      uint64_t v27 = *(char **)a1;
      if (v6)
      {
        uint64_t v42 = 88 * v6;
        do
        {
          long long v43 = *v4;
          *((void *)v27 + 2) = *((void *)v4 + 2);
          *(_OWORD *)uint64_t v27 = v43;
          if (v4 != (long long *)v27) {
            llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v27 + 24), 4, (double *)v4 + 3);
          }
          uint64_t v4 = (long long *)((char *)v4 + 88);
          v27 += 88;
          v42 -= 88;
        }
        while (v42);
        unsigned int v8 = *(_DWORD *)(a1 + 8);
        uint64_t v28 = *(char **)a1;
      }
      else
      {
        uint64_t v28 = *(char **)a1;
      }
      for (uint64_t i = &v28[88 * v8]; i != v27; i -= 88)
      {
        uint64_t v44 = (void *)*((void *)i - 7);
        if (v44 != *((void **)i - 8)) {
          free(v44);
        }
      }
      *(_DWORD *)(a1 + 8) = v6;
      unsigned int v30 = *((_DWORD *)a2 + 2);
      if (v30)
      {
        unsigned int v31 = *a2;
        uint64_t v32 = 88 * v30;
        do
        {
          uint64_t v33 = *(void **)((char *)v31 + v32 - 56);
          if (v33 != *(void **)((char *)v31 + v32 - 64)) {
            free(v33);
          }
          v32 -= 88;
        }
        while (v32);
      }
      goto LABEL_19;
    }
    if (*(_DWORD *)(a1 + 12) < v6)
    {
      if (v8)
      {
        uint64_t v36 = *(char **)a1;
        uint64_t v37 = 88 * *(unsigned int *)(a1 + 8);
        do
        {
          unint64_t v38 = *(void **)&v36[v37 - 56];
          if (v38 != *(void **)&v36[v37 - 64]) {
            free(v38);
          }
          v37 -= 88;
        }
        while (v37);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1CC136A84(a1, v6);
    }
    else if (v8)
    {
      uint64_t v39 = *(char **)a1;
      uint64_t v9 = *(unsigned int *)(a1 + 8);
      uint64_t v40 = 88 * v8;
      do
      {
        long long v41 = *v4;
        *((void *)v39 + 2) = *((void *)v4 + 2);
        *(_OWORD *)uint64_t v39 = v41;
        if (v4 != (long long *)v39) {
          llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v39 + 24), 4, (double *)v4 + 3);
        }
        uint64_t v4 = (long long *)((char *)v4 + 88);
        v39 += 88;
        v40 -= 88;
      }
      while (v40);
      goto LABEL_7;
    }
    uint64_t v9 = 0;
LABEL_7:
    uint64_t v10 = *a2;
    uint64_t v11 = *((unsigned int *)a2 + 2);
    if (v9 != v11)
    {
      uint64_t v12 = *(char **)a1;
      uint64_t v13 = 88 * v9;
      uint64_t v14 = 88 * v11;
      do
      {
        uint64_t v15 = (uint64_t)v10 + v13;
        uint64_t v16 = &v12[v13];
        uint64_t v17 = *(void *)((char *)v10 + v13 + 16);
        *(_OWORD *)uint64_t v16 = *(long long *)((char *)v10 + v13);
        unsigned int v18 = &v12[v13 + 56];
        *((void *)v16 + 2) = v17;
        *((void *)v16 + 3) = v18;
        uint64_t v20 = *(void *)((char *)v10 + v13 + 24);
        uint64_t v19 = *(void *)((char *)v10 + v13 + 32);
        if (v19 == v20)
        {
          *((void *)v16 + 4) = v18;
          uint64_t v21 = *(unsigned int *)(v15 + 44);
          if (v21) {
            memmove(v18, *(const void **)(v15 + 32), 8 * v21);
          }
        }
        else
        {
          *((void *)v16 + 4) = v19;
          *(void *)(v15 + 32) = v20;
        }
        uint64_t v22 = (uint64_t)v10 + v13;
        BOOL v23 = &v12[v13];
        *((void *)v23 + 5) = *(void *)((char *)v10 + v13 + 40);
        *((_DWORD *)v23 + 12) = *(_DWORD *)((char *)v10 + v13 + 48);
        *(void *)(v22 + 40) = 4;
        *(_DWORD *)(v22 + 48) = 0;
        v12 += 88;
        uint64_t v10 = (long long *)((char *)v10 + 88);
        v14 -= 88;
      }
      while (v13 != v14);
      uint64_t v10 = *a2;
    }
    *(_DWORD *)(a1 + 8) = v6;
    if (*v7)
    {
      uint64_t v24 = 88 * *v7;
      do
      {
        uint64_t v25 = *(void **)((char *)v10 + v24 - 56);
        if (v25 != *(void **)((char *)v10 + v24 - 64)) {
          free(v25);
        }
        v24 -= 88;
      }
      while (v24);
    }
LABEL_19:
    *int v7 = 0;
  }
  return a1;
}

void sub_1CC136A84(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  unint64_t v6 = (char *)malloc_type_malloc(88 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  int v7 = v6;
  unsigned int v8 = *(uint64_t **)a1;
  unsigned int v9 = *(_DWORD *)(a1 + 8);
  if (v9)
  {
    uint64_t v19 = v7;
    int v20 = v5;
    uint64_t v10 = v7 + 56;
    uint64_t v11 = 88 * v9;
    uint64_t v12 = v8 + 3;
    do
    {
      long long v13 = *(_OWORD *)(v12 - 3);
      *(v10 - 5) = *(v12 - 1);
      *(_OWORD *)(v10 - 7) = v13;
      llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(v10 - 4), v10, 4, v12);
      v10 += 11;
      v12 += 11;
      v11 -= 88;
    }
    while (v11);
    unsigned int v8 = *(uint64_t **)a1;
    unsigned int v14 = *(_DWORD *)(a1 + 8);
    int v7 = v19;
    LODWORD(v5) = v20;
    if (v14)
    {
      uint64_t v15 = *(uint64_t **)a1;
      uint64_t v16 = 11 * v14;
      do
      {
        uint64_t v17 = (void *)v15[v16 - 7];
        if (v17 != (void *)v15[v16 - 8]) {
          free(v17);
        }
        v16 -= 11;
      }
      while (v16 * 8);
      unsigned int v8 = *(uint64_t **)a1;
      int v7 = v19;
      LODWORD(v5) = v20;
    }
  }
  if (v8 != (uint64_t *)(a1 + 16))
  {
    unsigned int v18 = v7;
    free(v8);
    int v7 = v18;
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

char **sub_1CC136BDC(char **a1)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    uint64_t v5 = 88 * v3;
    do
    {
      unint64_t v6 = *(void **)&v2[v5 - 56];
      if (v6 != *(void **)&v2[v5 - 64])
      {
        uint64_t v7 = v5;
        unsigned int v8 = v2;
        free(v6);
        uint64_t v5 = v7;
        unsigned int v2 = v8;
      }
      v5 -= 88;
    }
    while (v5);
    unsigned int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

int *sub_1CC136C64(int *a1)
{
  int v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = a1 + 2;
    uint64_t v4 = 4;
  }
  else
  {
    uint64_t v4 = a1[4];
    if (!v4) {
      goto LABEL_13;
    }
    unsigned int v3 = (int *)*((void *)a1 + 1);
  }
  uint64_t v5 = (void **)(v3 + 10);
  uint64_t v6 = 96 * v4;
  do
  {
    uint64_t v7 = (uint64_t)*(v5 - 5);
    BOOL v8 = v7 == -4 || v7 == -16;
    if (!v8 && *v5 != *(v5 - 1))
    {
      uint64_t v10 = v6;
      uint64_t v11 = v5;
      free(*v5);
      uint64_t v6 = v10;
      uint64_t v5 = v11;
    }
    v5 += 12;
    v6 -= 96;
  }
  while (v6);
  int v2 = *a1;
LABEL_13:
  if ((v2 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*((void *)a1 + 1), 8);
  }
  return a1;
}

uint64_t sub_1CC136D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 64);
  if (v4 == v5)
  {
    uint64_t v6 = *(unsigned int *)(a2 + 76);
    uint64_t v7 = (void *)(v4 + 8 * v6);
    if (v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 8 * v6;
      while (*(void *)(v4 + v8) != v3)
      {
        v8 += 8;
        if (v9 == v8) {
          goto LABEL_19;
        }
      }
      uint64_t v7 = (void *)(v4 + v8);
    }
LABEL_19:
    uint64_t v5 = *(void *)(a2 + 64);
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a2 + 72);
    unsigned int v11 = v10 - 1;
    unsigned int v12 = (v10 - 1) & ((v3 >> 4) ^ (v3 >> 9));
    uint64_t v7 = (void *)(v4 + 8 * v12);
    uint64_t v13 = *v7;
    if (*v7 == -1)
    {
      unsigned int v14 = 0;
LABEL_28:
      if (v14) {
        uint64_t v7 = v14;
      }
      if (*v7 != v3) {
        uint64_t v7 = (void *)(v4 + 8 * v10);
      }
    }
    else
    {
      unsigned int v14 = 0;
      a3 = 1;
      while (v13 != v3)
      {
        if (v14) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v13 == -2;
        }
        if (v15) {
          unsigned int v14 = v7;
        }
        int v16 = v12 + a3;
        a3 = (a3 + 1);
        unsigned int v12 = v16 & v11;
        uint64_t v7 = (void *)(v4 + 8 * (v16 & v11));
        uint64_t v13 = *v7;
        if (*v7 == -1) {
          goto LABEL_28;
        }
      }
    }
  }
  BOOL v15 = v4 == v5;
  uint64_t v17 = 72;
  if (v15) {
    uint64_t v17 = 76;
  }
  if (v7 == (void *)(v4 + 8 * *(unsigned int *)(a2 + v17))) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 16) == 83) {
    return **(void **)(a2 + 32) == v3;
  }
  return sub_1CC11D89C(a1, a2, (const llvm::Function *)a3);
}

uint64_t sub_1CC136E28(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v8 = v6;
        }
        unsigned int v13 = v5 + v9++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 16 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v10 = 1;
        if (*v6 == a3) {
          goto LABEL_7;
        }
      }
      uint64_t v10 = 0;
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

void *sub_1CC136EBC(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CC136F74(a1, v6);
  uint64_t v8 = 0;
  sub_1CC136E28(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC136F74(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC137040(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      void *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC137040(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CC136E28(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      uint64_t v10 = v11;
      uint64_t *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CC1370F0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (dword_1EBCC7AF8 < a4) {
    return 0;
  }
  int v6 = *(_DWORD *)(a1 + 20);
  if ((v6 & 0x40000000) == 0)
  {
    uint64_t v7 = v6 & 0x7FFFFFF;
    uint64_t v8 = (uint64_t *)(a1 - 32 * v7);
    if (!v7) {
      return 0;
    }
    goto LABEL_6;
  }
  uint64_t v8 = *(uint64_t **)(a1 - 8);
  uint64_t v7 = v6 & 0x7FFFFFF;
  if (v7)
  {
LABEL_6:
    uint64_t v9 = 0;
    uint64_t v10 = &v8[4 * v7];
    uint64_t v11 = a4 + 1;
    while (1)
    {
      uint64_t v12 = *v8;
      unsigned int v13 = *(unsigned __int8 *)(*v8 + 16);
      if (v13 < 0x15)
      {
        uint64_t v14 = v9;
        goto LABEL_25;
      }
      if (v13 < 0x1C || !sub_1CC136D10(*v8, a2, a3)) {
        return 0;
      }
      if (*(unsigned char *)(v12 + 16) == 83)
      {
        uint64_t v14 = v12;
        goto LABEL_23;
      }
      int v15 = *(_DWORD *)(a3 + 16);
      if (v15)
      {
        uint64_t v20 = *(void *)a3;
        unsigned int v21 = v15 - 1;
        uint64_t v22 = (v15 - 1) & ((v12 >> 4) ^ (v12 >> 9));
        uint64_t v23 = *(void *)(*(void *)a3 + 16 * v22);
        if (v23 == v12)
        {
LABEL_31:
          uint64_t v14 = *(void *)(v20 + 16 * v22 + 8);
          if (v14) {
            goto LABEL_23;
          }
        }
        else
        {
          int v24 = 1;
          while (v23 != -4096)
          {
            int v25 = v22 + v24++;
            uint64_t v22 = v25 & v21;
            uint64_t v23 = *(void *)(v20 + 16 * v22);
            if (v23 == v12) {
              goto LABEL_31;
            }
          }
        }
      }
      uint64_t v14 = sub_1CC1370F0(v12, a2, a3, v11);
      uint64_t v27 = 0;
      char v16 = sub_1CC137310(*(void *)a3, *(_DWORD *)(a3 + 16), v12, &v27);
      uint64_t v17 = v27;
      if ((v16 & 1) == 0) {
        break;
      }
LABEL_22:
      v17[1] = v14;
      if (!v14) {
        return v14;
      }
LABEL_23:
      if (v9 && v9 != v14) {
        return 0;
      }
LABEL_25:
      v8 += 4;
      uint64_t v9 = v14;
      if (v8 == v10) {
        return v14;
      }
    }
    int v18 = *(_DWORD *)(a3 + 8);
    unsigned int v19 = *(_DWORD *)(a3 + 16);
    if (4 * v18 + 4 < 3 * v19)
    {
      if (v19 + ~v18 - *(_DWORD *)(a3 + 12) > v19 >> 3) {
        goto LABEL_19;
      }
    }
    else
    {
      v19 *= 2;
    }
    sub_1CC1373A4(a3, v19);
    uint64_t v27 = 0;
    sub_1CC137310(*(void *)a3, *(_DWORD *)(a3 + 16), v12, &v27);
    uint64_t v17 = v27;
LABEL_19:
    ++*(_DWORD *)(a3 + 8);
    if (*v17 != -4096) {
      --*(_DWORD *)(a3 + 12);
    }
    *uint64_t v17 = v12;
    v17[1] = 0;
    goto LABEL_22;
  }
  return 0;
}

uint64_t sub_1CC137310(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v6 = (void *)(a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v8 = v6;
        }
        unsigned int v13 = v5 + v9++;
        unsigned int v5 = v13 & v4;
        int v6 = (void *)(a1 + 16 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v10 = 1;
        if (*v6 == a3) {
          goto LABEL_7;
        }
      }
      uint64_t v10 = 0;
      if (v8) {
        int v6 = v8;
      }
    }
  }
  else
  {
    int v6 = 0;
    uint64_t v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

void *sub_1CC1373A4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC137470(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      void *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC137470(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CC137310(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      uint64_t v10 = v11;
      uint64_t *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

unsigned char *sub_1CC137520(unsigned char *result, void *a2)
{
  int v2 = result;
  if (*(_WORD *)(*a2 + 24)) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a2;
  }
  if (*(_WORD *)(a2[1] + 24)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = a2[1];
  }
  if (*(_WORD *)(a2[2] + 24)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = a2[2];
  }
  if (v3) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6 || v5 == 0)
  {
    void *result = 0;
    result[72] = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(v3 + 32);
    unsigned int v39 = *(_DWORD *)(v8 + 32);
    if (v39 > 0x40) {
      operator new[]();
    }
    unint64_t v38 = *(unsigned char **)(v8 + 24);
    uint64_t v9 = *(void *)(v4 + 32);
    unsigned int v37 = *(_DWORD *)(v9 + 32);
    if (v37 > 0x40) {
      operator new[]();
    }
    uint64_t v36 = *(unsigned char **)(v9 + 24);
    uint64_t v10 = *(void *)(v5 + 32);
    unsigned int v35 = *(_DWORD *)(v10 + 32);
    if (v35 > 0x40) {
      operator new[]();
    }
    unint64_t __src = *(void **)(v10 + 24);
    int v11 = *(_DWORD *)(*(void *)(v3 + 32) + 32);
    unsigned int v12 = v11 + 1;
    llvm::APInt::sext((uint64_t)&__src, v11 + 1, (uint64_t)&v24);
    if (v35 >= 0x41 && __src) {
      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
    unint64_t __src = v24;
    unsigned int v35 = v25;
    llvm::APInt::sext((uint64_t)&v36, v11 + 1, (uint64_t)&v24);
    if (v37 >= 0x41 && v36) {
      MEMORY[0x1D25D9CB0](v36, 0x1000C8000313F17);
    }
    uint64_t v36 = v24;
    unsigned int v37 = v25;
    llvm::APInt::sext((uint64_t)&v38, v11 + 1, (uint64_t)&v24);
    if (v39 >= 0x41 && v38) {
      MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
    }
    unint64_t v38 = v24;
    unsigned int v39 = v25;
    if (v35 > 0x40) {
      operator new[]();
    }
    unsigned int v22 = v37;
    if (v37 > 0x40) {
      operator new[]();
    }
    if (v37)
    {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v37;
      uint64_t v14 = v13 & (2 * (void)v36);
    }
    else
    {
      uint64_t v14 = 0;
      unint64_t v13 = 0;
    }
    uint64_t v23 = (void *)(v13 & (v14 - (void)__src));
    unsigned int v15 = v39;
    if (v39 > 0x40) {
      operator new[]();
    }
    uint64_t v16 = 2 * (void)v38;
    uint64_t v33 = 2 * (void)v38;
    unint64_t v17 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v39;
    if (!v39) {
      unint64_t v17 = 0;
    }
    uint64_t v33 = v16 & v17;
    unint64_t v18 = v16 & v17;
    if (v12 > 0x40) {
      operator new[]();
    }
    if (v11 == -1) {
      LOBYTE(v19) = 0;
    }
    else {
      unint64_t v19 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v11;
    }
    int v24 = __src;
    uint64_t v20 = __src;
    unsigned int v21 = __src;
    unsigned int v26 = v23;
    uint64_t v28 = v33;
    unint64_t v30 = v19 & 2;
    int v32 = v11;
    *((_DWORD *)v2 + 2) = v35;
    *(void *)int v2 = v20;
    *((_DWORD *)v2 + 6) = v22;
    *((void *)v2 + 2) = v23;
    unsigned int v25 = 0;
    int v27 = 0;
    *((_DWORD *)v2 + 10) = v15;
    *((void *)v2 + 4) = v18;
    *((_DWORD *)v2 + 14) = v12;
    *((void *)v2 + 6) = v19 & 2;
    int v29 = 0;
    int v31 = 0;
    *((_DWORD *)v2 + 16) = v11;
    v2[72] = 1;
    sub_1CD4C0F04((uint64_t)&v24);
    if (v22 >= 0x41 && v23) {
      MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
    }
    uint64_t result = v21;
    if (v35 >= 0x41)
    {
      uint64_t result = __src;
      if (__src) {
        uint64_t result = (unsigned char *)MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
    }
    if (v37 >= 0x41)
    {
      uint64_t result = v36;
      if (v36) {
        uint64_t result = (unsigned char *)MEMORY[0x1D25D9CB0](v36, 0x1000C8000313F17);
      }
    }
    if (v39 >= 0x41)
    {
      uint64_t result = v38;
      if (v38) {
        return (unsigned char *)MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
      }
    }
  }
  return result;
}

uint64_t sub_1CC137CEC(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    unsigned int v3 = a3;
    if (a3 < 2) {
      goto LABEL_19;
    }
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    if (v4 <= a3) {
      goto LABEL_19;
    }
    if (v4 > 0x40)
    {
      int v6 = 0;
      int64_t v7 = (unint64_t)(v4 + 63) >> 6;
      do
      {
        if (v7-- < 1) {
          break;
        }
        unint64_t v9 = *(void *)(*(void *)a2 + 8 * v7);
        v6 += __clz(v9);
      }
      while (!v9);
      int v10 = v4 | 0xFFFFFFC0;
      if ((v4 & 0x3F) == 0) {
        int v10 = 0;
      }
      int v5 = v6 + v10;
    }
    else
    {
      int v5 = v4 + __clz(*(void *)a2) - 64;
    }
    if ((int)v4 - v5 > a3)
    {
LABEL_19:
      *(unsigned char *)uint64_t result = 0;
      *(unsigned char *)(result + 16) = 0;
      return sub_1CD4C0FC8(result, a2);
    }
    else
    {
      if (a3 > 0x40)
      {
        uint64_t v12 = result;
        if (v4 != a3) {
          operator new[]();
        }
        sub_1CD0463BC((uint64_t)&v13, a2);
        unsigned int v3 = v14;
        unint64_t v11 = v13;
        uint64_t result = v12;
      }
      else
      {
        if (v4 >= 0x41) {
          a2 = *(void *)a2;
        }
        unint64_t v11 = *(void *)a2 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a3);
      }
      *(_DWORD *)(result + 8) = v3;
      *(void *)uint64_t result = v11;
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    *(unsigned char *)uint64_t result = 0;
    *(unsigned char *)(result + 16) = 0;
  }
  return result;
}

uint64_t *sub_1CC137E9C(uint64_t *result, uint64_t a2)
{
  unsigned int v3 = result;
  uint64_t v4 = *result;
  if (*(_DWORD *)(*result + 8) > 0x40u || *(_DWORD *)(a2 + 8) > 0x40u)
  {
    if (v4 != a2)
    {
      uint64_t result = (uint64_t *)llvm::APInt::reallocate(*result, *(_DWORD *)(a2 + 8));
      uint64_t v11 = *(unsigned int *)(v4 + 8);
      if (v11 <= 0x40) {
        *(void *)uint64_t v4 = *(void *)a2;
      }
      else {
        uint64_t result = (uint64_t *)memcpy(*(void **)v4, *(const void **)a2, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
  }
  else
  {
    *(void *)uint64_t v4 = *(void *)a2;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  }
  uint64_t v5 = v3[1];
  if (*(_DWORD *)(v5 + 8) > 0x40u || *(_DWORD *)(a2 + 24) > 0x40u)
  {
    int v6 = (const void **)(a2 + 16);
    if (v5 != a2 + 16)
    {
      uint64_t result = (uint64_t *)llvm::APInt::reallocate(v3[1], *(_DWORD *)(a2 + 24));
      uint64_t v12 = *(unsigned int *)(v5 + 8);
      if (v12 <= 0x40) {
        *(void *)uint64_t v5 = *v6;
      }
      else {
        uint64_t result = (uint64_t *)memcpy(*(void **)v5, *v6, ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
  }
  else
  {
    *(void *)uint64_t v5 = *(void *)(a2 + 16);
    *(_DWORD *)(v5 + 8) = *(_DWORD *)(a2 + 24);
  }
  uint64_t v7 = v3[2];
  if (*(_DWORD *)(v7 + 8) > 0x40u || *(_DWORD *)(a2 + 40) > 0x40u)
  {
    uint64_t v8 = (const void **)(a2 + 32);
    if (v7 != a2 + 32)
    {
      uint64_t result = (uint64_t *)llvm::APInt::reallocate(v3[2], *(_DWORD *)(a2 + 40));
      uint64_t v13 = *(unsigned int *)(v7 + 8);
      if (v13 <= 0x40) {
        *(void *)uint64_t v7 = *v8;
      }
      else {
        uint64_t result = (uint64_t *)memcpy(*(void **)v7, *v8, ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
  }
  else
  {
    *(void *)uint64_t v7 = *(void *)(a2 + 32);
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(a2 + 40);
  }
  uint64_t v9 = v3[3];
  if (*(_DWORD *)(v9 + 8) > 0x40u || *(_DWORD *)(a2 + 56) > 0x40u)
  {
    int v10 = (const void **)(a2 + 48);
    if (v9 != a2 + 48)
    {
      uint64_t result = (uint64_t *)llvm::APInt::reallocate(v3[3], *(_DWORD *)(a2 + 56));
      uint64_t v14 = *(unsigned int *)(v9 + 8);
      if (v14 <= 0x40) {
        *(void *)uint64_t v9 = *v10;
      }
      else {
        uint64_t result = (uint64_t *)memcpy(*(void **)v9, *v10, ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
  }
  else
  {
    *(void *)uint64_t v9 = *(void *)(a2 + 48);
    *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + 56);
  }
  *(_DWORD *)v3[4] = *(_DWORD *)(a2 + 64);
  return result;
}

uint64_t sub_1CC1380C0(void *a1, uint64_t a2)
{
  v82[2] = *MEMORY[0x1E4F143B8];
  uint64_t v79 = a2;
  uint64_t v5 = (uint64_t)(a1 + 1);
  uint64_t v4 = a1[1];
  uint64_t v6 = *((unsigned int *)a1 + 6);
  if (v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v8 = (void *)(v4 + 16 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a2) {
      goto LABEL_8;
    }
    int v10 = 1;
    while (v9 != -4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v6 - 1);
      uint64_t v9 = *(void *)(v4 + 16 * v7);
      if (v9 == a2)
      {
        uint64_t v8 = (void *)(v4 + 16 * v7);
        goto LABEL_8;
      }
    }
  }
  uint64_t v8 = (void *)(v4 + 16 * v6);
LABEL_8:
  if (v8 == (void *)(v4 + 16 * v6))
  {
    LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
    switch(*(_WORD *)(a2 + 24))
    {
      case 1:
        uint64_t v13 = (const llvm::SCEV *)sub_1CC1380C0(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v13 != *(const llvm::SCEV **)(a2 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getTruncateExpr((llvm::ScalarEvolution *)*a1, v13, *(llvm::Type **)(a2 + 40), 0);
          goto LABEL_88;
        }
        goto LABEL_89;
      case 2:
        unint64_t v38 = (const llvm::SCEV *)sub_1CC1380C0(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v38 != *(const llvm::SCEV **)(a2 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getZeroExtendExpr((llvm::ScalarEvolution *)*a1, v38, *(llvm::Type **)(a2 + 40), 0);
          goto LABEL_88;
        }
        goto LABEL_89;
      case 3:
        unsigned int v15 = (llvm::detail::IEEEFloat **)sub_1CC1380C0(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v15 != *(llvm::detail::IEEEFloat ***)(a2 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getSignExtendExpr((llvm::ScalarEvolution *)*a1, v15, *(uint64_t ***)(a2 + 40), 0);
          goto LABEL_88;
        }
        goto LABEL_89;
      case 4:
        int v80 = v82;
        uint64_t v81 = 0x200000000;
        uint64_t v39 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v39)
        {
          char v40 = 0;
          long long v41 = *(void **)(a2 + 32);
          uint64_t v42 = 8 * v39;
          do
          {
            uint64_t v43 = *v41;
            uint64_t v44 = sub_1CC1380C0(a1, *v41);
            if (v81 >= (unint64_t)HIDWORD(v81)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v80 + v81) = v44;
            LODWORD(v81) = v81 + 1;
            unsigned int v22 = v80;
            v40 |= v43 != *((void *)v80 + v81 - 1);
            ++v41;
            v42 -= 8;
          }
          while (v42);
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
          if (v40)
          {
            uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(*a1, &v80, 0, 0);
            break;
          }
          goto LABEL_83;
        }
        goto LABEL_89;
      case 5:
        int v80 = v82;
        uint64_t v81 = 0x200000000;
        uint64_t v45 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v45)
        {
          char v46 = 0;
          char v47 = *(void **)(a2 + 32);
          uint64_t v48 = 8 * v45;
          do
          {
            uint64_t v49 = *v47;
            uint64_t v50 = sub_1CC1380C0(a1, *v47);
            if (v81 >= (unint64_t)HIDWORD(v81)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v80 + v81) = v50;
            LODWORD(v81) = v81 + 1;
            unsigned int v22 = v80;
            v46 |= v49 != *((void *)v80 + v81 - 1);
            ++v47;
            v48 -= 8;
          }
          while (v48);
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
          if (v46)
          {
            uint64_t AddExpr = llvm::ScalarEvolution::getMulExpr(*a1, &v80, 0, 0);
            break;
          }
          goto LABEL_83;
        }
        goto LABEL_89;
      case 6:
        uint64_t v51 = (const llvm::SCEV *)sub_1CC1380C0(a1, *(void *)(a2 + 32));
        unint64_t v52 = sub_1CC1380C0(a1, *(void *)(a2 + 40));
        if (v51 != *(const llvm::SCEV **)(a2 + 32)
          || (LosslessPtrToIntExpr = (const llvm::SCEV *)a2, v52 != *(void *)(a2 + 40)))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getUDivExpr((llvm::ScalarEvolution *)*a1, v51, v52);
          goto LABEL_88;
        }
        goto LABEL_89;
      case 7:
        if (*(void *)(a2 + 48) != a1[4])
        {
          *((unsigned char *)a1 + 41) = 1;
          goto LABEL_56;
        }
        uint64_t TruncateExpr = llvm::SCEVAddRecExpr::getPostIncExpr((llvm::SCEVAddRecExpr *)a2, (llvm::ScalarEvolution *)*a1);
        goto LABEL_88;
      case 8:
        int v80 = v82;
        uint64_t v81 = 0x200000000;
        uint64_t v16 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (!v16) {
          goto LABEL_89;
        }
        char v17 = 0;
        unint64_t v18 = *(void **)(a2 + 32);
        uint64_t v19 = 8 * v16;
        do
        {
          uint64_t v20 = *v18;
          uint64_t v21 = sub_1CC1380C0(a1, *v18);
          if (v81 >= (unint64_t)HIDWORD(v81)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v80 + v81) = v21;
          LODWORD(v81) = v81 + 1;
          unsigned int v22 = v80;
          v17 |= v20 != *((void *)v80 + v81 - 1);
          ++v18;
          v19 -= 8;
        }
        while (v19);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if ((v17 & 1) == 0) {
          goto LABEL_83;
        }
        uint64_t v65 = (llvm::ScalarEvolution *)*a1;
        uint64_t v66 = 8;
        goto LABEL_81;
      case 9:
        int v80 = v82;
        uint64_t v81 = 0x200000000;
        uint64_t v53 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (!v53) {
          goto LABEL_89;
        }
        char v54 = 0;
        uint64_t v55 = *(void **)(a2 + 32);
        uint64_t v56 = 8 * v53;
        do
        {
          uint64_t v57 = *v55;
          uint64_t v58 = sub_1CC1380C0(a1, *v55);
          if (v81 >= (unint64_t)HIDWORD(v81)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v80 + v81) = v58;
          LODWORD(v81) = v81 + 1;
          unsigned int v22 = v80;
          v54 |= v57 != *((void *)v80 + v81 - 1);
          ++v55;
          v56 -= 8;
        }
        while (v56);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if ((v54 & 1) == 0) {
          goto LABEL_83;
        }
        uint64_t v65 = (llvm::ScalarEvolution *)*a1;
        uint64_t v66 = 9;
        goto LABEL_81;
      case 0xA:
        int v80 = v82;
        uint64_t v81 = 0x200000000;
        uint64_t v23 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (!v23) {
          goto LABEL_89;
        }
        char v24 = 0;
        unsigned int v25 = *(void **)(a2 + 32);
        uint64_t v26 = 8 * v23;
        do
        {
          uint64_t v27 = *v25;
          uint64_t v28 = sub_1CC1380C0(a1, *v25);
          if (v81 >= (unint64_t)HIDWORD(v81)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v80 + v81) = v28;
          LODWORD(v81) = v81 + 1;
          unsigned int v22 = v80;
          v24 |= v27 != *((void *)v80 + v81 - 1);
          ++v25;
          v26 -= 8;
        }
        while (v26);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if ((v24 & 1) == 0) {
          goto LABEL_83;
        }
        uint64_t v65 = (llvm::ScalarEvolution *)*a1;
        uint64_t v66 = 10;
        goto LABEL_81;
      case 0xB:
        int v80 = v82;
        uint64_t v81 = 0x200000000;
        uint64_t v29 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (!v29) {
          goto LABEL_89;
        }
        char v30 = 0;
        int v31 = *(void **)(a2 + 32);
        uint64_t v32 = 8 * v29;
        do
        {
          uint64_t v33 = *v31;
          uint64_t v34 = sub_1CC1380C0(a1, *v31);
          if (v81 >= (unint64_t)HIDWORD(v81)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v80 + v81) = v34;
          LODWORD(v81) = v81 + 1;
          unsigned int v22 = v80;
          v30 |= v33 != *((void *)v80 + v81 - 1);
          ++v31;
          v32 -= 8;
        }
        while (v32);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if ((v30 & 1) == 0) {
          goto LABEL_83;
        }
        uint64_t v65 = (llvm::ScalarEvolution *)*a1;
        uint64_t v66 = 11;
LABEL_81:
        uint64_t AddExpr = llvm::ScalarEvolution::getMinMaxExpr(v65, v66, &v80);
        break;
      case 0xC:
        int v80 = v82;
        uint64_t v81 = 0x200000000;
        uint64_t v59 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (!v59) {
          goto LABEL_89;
        }
        char v60 = 0;
        char v61 = *(void **)(a2 + 32);
        uint64_t v62 = 8 * v59;
        do
        {
          uint64_t v63 = *v61;
          uint64_t v64 = sub_1CC1380C0(a1, *v61);
          if (v81 >= (unint64_t)HIDWORD(v81)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v80 + v81) = v64;
          LODWORD(v81) = v81 + 1;
          unsigned int v22 = v80;
          v60 |= v63 != *((void *)v80 + v81 - 1);
          ++v61;
          v62 -= 8;
        }
        while (v62);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if ((v60 & 1) == 0) {
          goto LABEL_83;
        }
        uint64_t AddExpr = llvm::ScalarEvolution::getSequentialMinMaxExpr(*a1, 12, (unsigned int *)&v80);
        break;
      case 0xD:
        unsigned int v35 = (const llvm::SCEV *)sub_1CC1380C0(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v35 != *(const llvm::SCEV **)(a2 + 32))
        {
          uint64_t v36 = (llvm::ScalarEvolution *)*a1;
          unsigned int v37 = *(llvm::Type **)(a2 + 40);
          LosslessPtrToIntExpr = llvm::ScalarEvolution::getLosslessPtrToIntExpr((llvm::ScalarEvolution *)*a1, v35);
          if (*((_WORD *)LosslessPtrToIntExpr + 12) != 15)
          {
            uint64_t TruncateExpr = llvm::ScalarEvolution::getTruncateOrZeroExtend(v36, LosslessPtrToIntExpr, v37, 0);
LABEL_88:
            LosslessPtrToIntExpr = (const llvm::SCEV *)TruncateExpr;
          }
        }
        goto LABEL_89;
      case 0xE:
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)*a1, (const llvm::SCEV *)a2, (const llvm::Loop *)a1[4]) != 1)
        {
          *((unsigned char *)a1 + 40) = 1;
LABEL_56:
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        }
        goto LABEL_89;
      default:
        goto LABEL_89;
    }
    LosslessPtrToIntExpr = (const llvm::SCEV *)AddExpr;
    unsigned int v22 = v80;
LABEL_83:
    if (v22 != v82) {
      free(v22);
    }
LABEL_89:
    int v68 = *((_DWORD *)a1 + 6);
    if (!v68)
    {
      uint64_t v77 = 0;
LABEL_104:
      uint64_t v8 = sub_1CC131DD4(v5, (uint64_t)&v79, &v79, v77);
      *uint64_t v8 = v79;
      v8[1] = LosslessPtrToIntExpr;
      return v8[1];
    }
    uint64_t v69 = a1[1];
    int v70 = v68 - 1;
    unsigned int v71 = v70 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v8 = (void *)(v69 + 16 * v71);
    uint64_t v72 = *v8;
    if (*v8 != a2)
    {
      char v73 = 0;
      int v74 = 1;
      while (v72 != -4096)
      {
        if (v73) {
          BOOL v75 = 0;
        }
        else {
          BOOL v75 = v72 == -8192;
        }
        if (v75) {
          char v73 = v8;
        }
        unsigned int v76 = v71 + v74++;
        unsigned int v71 = v76 & v70;
        uint64_t v8 = (void *)(v69 + 16 * v71);
        uint64_t v72 = *v8;
        if (*v8 == a2) {
          return v8[1];
        }
      }
      if (v73) {
        uint64_t v77 = v73;
      }
      else {
        uint64_t v77 = v8;
      }
      goto LABEL_104;
    }
  }
  return v8[1];
}

void sub_1CC1389B4()
{
}

__n128 sub_1CC1389C8(uint64_t a1)
{
  int v2 = (char *)operator new(0x28uLL);
  *(void *)int v2 = &unk_1F26075D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CC138A1C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F26075D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CC138A54(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 8)) {
    return 0;
  }
  uint64_t v3 = **(void **)(a1 + 16);
  uint64_t v4 = v3 + 40;
  uint64_t v5 = *(void *)(v3 + 48);
  if (v5 == v3 + 40) {
    return 0;
  }
  uint64_t v6 = *a2;
  uint64_t v7 = **(void **)(a1 + 24);
  uint64_t v8 = **(void **)(a1 + 32);
  while (1)
  {
    uint64_t v13 = &v14;
    uint64_t v14 = 0;
    uint64_t v9 = v5 ? v5 - 24 : 0;
    int v11 = 125;
    uint64_t v12 = 0;
    if (sub_1CC13E39C((uint64_t)&v11, v9)
      && (llvm::ScalarEvolution::isImpliedCond(v2, v6, v7, v8, v14, 0, 0) & 1) != 0)
    {
      break;
    }
    uint64_t v5 = *(void *)(v5 + 8);
    if (v5 == v4) {
      return 0;
    }
  }
  return 1;
}

void sub_1CC138B30()
{
}

__n128 sub_1CC138B44(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1F2607620;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1CC138BA0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2607620;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CC138BE0(uint64_t a1, unsigned int *a2)
{
  return llvm::ScalarEvolution::isImpliedCond(*(void *)(a1 + 8), *a2, **(void **)(a1 + 16), **(void **)(a1 + 24), **(void **)(a1 + 32), **(unsigned __int8 **)(a1 + 40), **(void **)(a1 + 48));
}

void sub_1CC138C0C(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  llvm::APInt::operator*(a3, *(void **)a2, (uint64_t)&v54);
  if (*(_DWORD *)(a3 + 8) >= 0x41u && *(void *)a3) {
    MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
  }
  *(void *)a3 = v54;
  *(_DWORD *)(a3 + 8) = v55;
  LOBYTE(v54) = 0;
  char v56 = 0;
  if (**(_DWORD **)(a2 + 8) >= 2u)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    unsigned int v50 = *(_DWORD *)(v10 + 8);
    if (v50 > 0x40) {
      operator new[]();
    }
    uint64_t v49 = *(uint64_t **)v10;
    uint64_t v12 = *(uint64_t **)(a2 + 24);
    unsigned int v48 = *((_DWORD *)v12 + 2);
    if (v48 > 0x40) {
      operator new[]();
    }
    uint64_t v47 = *v12;
    unsigned int v13 = *(_DWORD *)(a3 + 8);
    unsigned int v44 = v13;
    if (v13 > 0x40) {
      operator new[]();
    }
    if (v13) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
    }
    else {
      unint64_t v14 = 0;
    }
    unint64_t v43 = v14 & ~*(void *)a3;
    llvm::APInt::operator++((uint64_t)&v43);
    unsigned int v46 = v44;
    unint64_t v45 = v43;
    unsigned int v44 = 0;
    llvm::APIntOps::SolveQuadraticEquationWrap(&v49, (uint64_t)&v47, &v45, **(_DWORD **)(a2 + 8), (uint64_t)&v51);
    sub_1CD424520((uint64_t)&v54, (uint64_t)&v51);
    if (v53)
    {
      if (v52 >= 0x41 && v51) {
        MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
      }
      char v53 = 0;
    }
    if (v46 >= 0x41 && v45) {
      MEMORY[0x1D25D9CB0](v45, 0x1000C8000313F17);
    }
    if (v44 >= 0x41 && v43) {
      MEMORY[0x1D25D9CB0](v43, 0x1000C8000313F17);
    }
    if (v48 >= 0x41 && v47) {
      MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
    }
    if (v50 >= 0x41 && v49) {
      MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
    }
  }
  uint64_t v6 = *(void *)(a2 + 16);
  unsigned int v42 = *(_DWORD *)(v6 + 8);
  if (v42 > 0x40) {
    operator new[]();
  }
  long long v41 = *(uint64_t **)v6;
  uint64_t v7 = *(uint64_t **)(a2 + 24);
  unsigned int v40 = *((_DWORD *)v7 + 2);
  if (v40 > 0x40) {
    operator new[]();
  }
  uint64_t v39 = *v7;
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  unsigned int v36 = v8;
  if (v8 > 0x40) {
    operator new[]();
  }
  if (v8) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
  }
  else {
    unint64_t v9 = 0;
  }
  unint64_t v35 = v9 & ~*(void *)a3;
  llvm::APInt::operator++((uint64_t)&v35);
  unsigned int v38 = v36;
  unint64_t v37 = v35;
  unsigned int v36 = 0;
  llvm::APIntOps::SolveQuadraticEquationWrap(&v41, (uint64_t)&v39, &v37, **(_DWORD **)(a2 + 8) + 1, (uint64_t)&v51);
  if (v38 >= 0x41 && v37) {
    MEMORY[0x1D25D9CB0](v37, 0x1000C8000313F17);
  }
  if (v36 >= 0x41 && v35) {
    MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
  }
  if (v40 >= 0x41 && v39) {
    MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
  }
  if (v42 >= 0x41 && v41) {
    MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
  }
  long long v33 = *(_OWORD *)(a2 + 32);
  uint64_t v34 = *(void *)(a2 + 48);
  if (v56 && v53)
  {
    LOBYTE(v27) = 0;
    char v29 = 0;
    sub_1CD4C103C((uint64_t)&v27, (llvm::APInt *)&v54);
    LOBYTE(v24) = 0;
    char v26 = 0;
    if (v53) {
      sub_1CD4C103C((uint64_t)&v24, (llvm::APInt *)&v51);
    }
    sub_1CC139360((uint64_t)&v30, (llvm::APInt *)&v27, (llvm::APInt *)&v24);
    if (v26)
    {
      if (v25 >= 0x41 && v24) {
        MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
      }
      char v26 = 0;
    }
    if (v29)
    {
      if (v28 >= 0x41 && v27) {
        MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
      }
      char v29 = 0;
    }
    if (sub_1CC13966C((llvm::ConstantInt *****)&v33, (llvm::LLVMContext *)&v30, v11))
    {
      *a1 = 0;
      a1[16] = 0;
      if (v32) {
        sub_1CD4C103C((uint64_t)a1, (llvm::APInt *)&v30);
      }
      a1[24] = 1;
    }
    else
    {
      BOOL v15 = sub_1CD4C10C4((uint64_t)&v30, (uint64_t)&v54);
      LOBYTE(v21) = 0;
      unsigned __int8 v23 = 0;
      if (v15) {
        char v17 = &v51;
      }
      else {
        char v17 = &v54;
      }
      if (*((unsigned char *)v17 + 16))
      {
        if (v15) {
          uint64_t v20 = (llvm::APInt *)&v51;
        }
        else {
          uint64_t v20 = (llvm::APInt *)&v54;
        }
        sub_1CD4C103C((uint64_t)&v21, v20);
      }
      BOOL v18 = sub_1CC13966C((llvm::ConstantInt *****)&v33, (llvm::LLVMContext *)&v21, v16);
      *a1 = 0;
      a1[16] = 0;
      int v19 = v23;
      if (v18 && v23)
      {
        sub_1CD4C103C((uint64_t)a1, (llvm::APInt *)&v21);
        int v19 = v23;
      }
      a1[24] = 1;
      if (v19 && v22 >= 0x41 && v21) {
        MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
      }
    }
    if (v32 && v31 >= 0x41 && v30) {
      MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
    }
  }
  else
  {
    *a1 = 0;
    a1[16] = 0;
    a1[24] = 0;
  }
  if (v53 && v52 >= 0x41 && v51) {
    MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
  }
  if (v56 && v55 >= 0x41)
  {
    if (v54) {
      MEMORY[0x1D25D9CB0](v54, 0x1000C8000313F17);
    }
  }
}

uint64_t sub_1CC139360(uint64_t result, llvm::APInt *this, llvm::APInt *a3)
{
  long long v3 = a3;
  uint64_t v4 = result;
  if (*((unsigned char *)this + 16))
  {
    uint64_t v5 = this;
    if (*((unsigned char *)a3 + 16))
    {
      unsigned int v6 = *((_DWORD *)this + 2);
      unsigned int v7 = *((_DWORD *)a3 + 2);
      if (v6 <= v7) {
        unsigned int v8 = *((_DWORD *)a3 + 2);
      }
      else {
        unsigned int v8 = *((_DWORD *)this + 2);
      }
      if (v6 >= v7)
      {
        unsigned int v21 = *((_DWORD *)this + 2);
        if (v6 > 0x40) {
          operator new[]();
        }
        uint64_t v20 = *(void *)this;
      }
      else
      {
        __n128 result = llvm::APInt::sext((uint64_t)this, v8, (uint64_t)&v20);
      }
      unsigned int v10 = *((_DWORD *)v3 + 2);
      if (v10 < v8)
      {
        __n128 result = llvm::APInt::sext((uint64_t)v3, v8, (uint64_t)&v18);
      }
      else
      {
        unsigned int v19 = *((_DWORD *)v3 + 2);
        if (v10 > 0x40) {
          operator new[]();
        }
        uint64_t v18 = *(void *)v3;
      }
      if (v21 > 0x40)
      {
        uint64_t v12 = *(void *)(v20 + 8 * ((v21 - 1) >> 6)) & (1 << (v21 - 1));
        unsigned int v13 = v19 - 1;
        unint64_t v14 = &v18;
        if (v19 >= 0x41) {
          unint64_t v14 = (uint64_t *)(v18 + 8 * (v13 >> 6));
        }
        if ((v12 != 0) == (((unint64_t)*v14 >> v13) & 1))
        {
          unint64_t v15 = (((unint64_t)v21 + 63) >> 3) & 0x3FFFFFF8;
          while (v15)
          {
            unint64_t v16 = *(void *)(v20 - 8 + v15);
            unint64_t v17 = *(void *)(v18 - 8 + v15);
            v15 -= 8;
            if (v16 != v17)
            {
              if (v16 <= v17) {
                goto LABEL_23;
              }
              break;
            }
          }
        }
        else if (v12)
        {
          goto LABEL_23;
        }
      }
      else if (v20 << -(uint64_t)v21 >> -(uint64_t)v21 < v18 << -(uint64_t)v21 >> -(uint64_t)v21)
      {
LABEL_23:
        unsigned int v11 = *((_DWORD *)v5 + 2);
        *(_DWORD *)(v4 + 8) = v11;
        if (v11 > 0x40) {
          operator new[]();
        }
        *(void *)uint64_t v4 = *(void *)v5;
        *(unsigned char *)(v4 + 16) = 1;
        if (v19 >= 0x41)
        {
          __n128 result = v18;
          if (v18) {
            __n128 result = MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
          }
        }
        if (v21 >= 0x41)
        {
          __n128 result = v20;
          if (v20) {
            return MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
          }
        }
        return result;
      }
      uint64_t v5 = v3;
      goto LABEL_23;
    }
    long long v3 = this;
  }
  else if (!*((unsigned char *)a3 + 16))
  {
    *(unsigned char *)__n128 result = 0;
    *(unsigned char *)(result + 16) = 0;
    return result;
  }
  unsigned int v9 = *((_DWORD *)v3 + 2);
  *(_DWORD *)(result + 8) = v9;
  if (v9 > 0x40) {
    operator new[]();
  }
  *(void *)__n128 result = *(void *)v3;
  *(unsigned char *)(result + 16) = 1;
  return result;
}

BOOL sub_1CC13966C(llvm::ConstantInt *****a1, llvm::LLVMContext *a2, const llvm::APInt *a3)
{
  uint64_t v5 = (llvm::ConstantInt *)llvm::ConstantInt::get(****a1, a2, a3);
  unsigned int v6 = *a1;
  uint64_t v7 = (uint64_t)*a1[1];
  unint64_t Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)*a1, v5);
  uint64_t v9 = llvm::SCEVAddRecExpr::evaluateAtIteration(*(uint64_t **)(v7 + 32), *(void *)(v7 + 40), Constant, (llvm::ScalarEvolution *)v6);
  if (llvm::ConstantRange::contains((llvm::ConstantRange *)a1[2], (const llvm::APInt *)(*(void *)(v9 + 32) + 24))) {
    return 0;
  }
  unsigned int v11 = ****a1;
  unsigned int v19 = *((_DWORD *)a2 + 2);
  if (v19 > 0x40) {
    operator new[]();
  }
  uint64_t v18 = *(void *)a2;
  llvm::APInt::operator-=((uint64_t)&v18, 1uLL);
  unsigned int v21 = v19;
  uint64_t v20 = v18;
  unsigned int v19 = 0;
  unsigned int v13 = (llvm::ConstantInt *)llvm::ConstantInt::get(v11, (llvm::LLVMContext *)&v20, v12);
  if (v21 >= 0x41 && v20) {
    MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
  }
  if (v19 >= 0x41)
  {
    if (v18) {
      MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
    }
  }
  unint64_t v14 = *a1;
  uint64_t v15 = (uint64_t)*a1[1];
  unint64_t v16 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)*a1, v13);
  uint64_t v17 = llvm::SCEVAddRecExpr::evaluateAtIteration(*(uint64_t **)(v15 + 32), *(void *)(v15 + 40), v16, (llvm::ScalarEvolution *)v14);
  return llvm::ConstantRange::contains((llvm::ConstantRange *)a1[2], (const llvm::APInt *)(*(void *)(v17 + 32) + 24));
}

uint64_t sub_1CC139810(uint64_t *a1, uint64_t a2)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  uint64_t v105 = a2;
  uint64_t v5 = (uint64_t)(a1 + 1);
  uint64_t v4 = a1[1];
  uint64_t v6 = *((unsigned int *)a1 + 6);
  if (v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v8 = (void *)(v4 + 16 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a2) {
      goto LABEL_8;
    }
    int v10 = 1;
    while (v9 != -4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v6 - 1);
      uint64_t v9 = *(void *)(v4 + 16 * v7);
      if (v9 == a2)
      {
        unsigned int v8 = (void *)(v4 + 16 * v7);
        goto LABEL_8;
      }
    }
  }
  unsigned int v8 = (void *)(v4 + 16 * v6);
LABEL_8:
  if (v8 == (void *)(v4 + 16 * v6))
  {
    LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
    switch(*(_WORD *)(a2 + 24))
    {
      case 1:
        unsigned int v13 = (const llvm::SCEV *)sub_1CC139810(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v13 != *(const llvm::SCEV **)(a2 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getTruncateExpr((llvm::ScalarEvolution *)*a1, v13, *(llvm::Type **)(a2 + 40), 0);
          goto LABEL_72;
        }
        goto LABEL_109;
      case 2:
        uint64_t v46 = sub_1CC139810(a1, *(void *)(a2 + 32));
        uint64_t v16 = v46;
        if (!v46
          || *(_WORD *)(v46 + 24) != 7
          || *(void *)(v46 + 48) != a1[6]
          || *(void *)(v46 + 40) != 2
          || (unint64_t v97 = *(llvm::detail::IEEEFloat ***)(*(void *)(v46 + 32) + 8),
              int v98 = *(llvm::Type **)(a2 + 40),
              uint64_t WrapPredicate = llvm::ScalarEvolution::getWrapPredicate(*a1, v46, 1),
              !sub_1CC13A3C8((uint64_t)a1, WrapPredicate)))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getZeroExtendExpr((llvm::ScalarEvolution *)*a1, (const llvm::SCEV *)v16, *(llvm::Type **)(a2 + 40), 0);
          goto LABEL_72;
        }
        uint64_t v100 = (llvm::ScalarEvolution *)*a1;
        unint64_t ZeroExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr((llvm::ScalarEvolution *)*a1, **(const llvm::SCEV ***)(v16 + 32), v98, 0);
        goto LABEL_155;
      case 3:
        uint64_t v15 = sub_1CC139810(a1, *(void *)(a2 + 32));
        uint64_t v16 = v15;
        if (v15
          && *(_WORD *)(v15 + 24) == 7
          && *(void *)(v15 + 48) == a1[6]
          && *(void *)(v15 + 40) == 2
          && (unint64_t v97 = *(llvm::detail::IEEEFloat ***)(*(void *)(v15 + 32) + 8),
              int v98 = *(llvm::Type **)(a2 + 40),
              uint64_t v99 = llvm::ScalarEvolution::getWrapPredicate(*a1, v15, 2),
              sub_1CC13A3C8((uint64_t)a1, v99)))
        {
          uint64_t v100 = (llvm::ScalarEvolution *)*a1;
          unint64_t ZeroExtendExpr = llvm::ScalarEvolution::getSignExtendExpr((llvm::ScalarEvolution *)*a1, **(llvm::detail::IEEEFloat ****)(v16 + 32), (uint64_t **)v98, 0);
LABEL_155:
          uint64_t v103 = ZeroExtendExpr;
          unint64_t SignExtendExpr = llvm::ScalarEvolution::getSignExtendExpr((llvm::ScalarEvolution *)*a1, v97, (uint64_t **)v98, 0);
          uint64_t TruncateExpr = llvm::ScalarEvolution::getAddRecExpr(v100, v103, SignExtendExpr, (const llvm::Loop *)a1[6], *(_WORD *)(v16 + 28) & 7);
        }
        else
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getSignExtendExpr((llvm::ScalarEvolution *)*a1, (llvm::detail::IEEEFloat **)v16, *(uint64_t ***)(a2 + 40), 0);
        }
        goto LABEL_72;
      case 4:
        uint64_t v106 = &v108;
        uint64_t v107 = 0x200000000;
        uint64_t v47 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (!v47) {
          goto LABEL_109;
        }
        char v48 = 0;
        uint64_t v49 = *(void **)(a2 + 32);
        uint64_t v50 = 8 * v47;
        do
        {
          uint64_t v51 = *v49;
          uint64_t v52 = sub_1CC139810(a1, *v49);
          if (v107 >= (unint64_t)HIDWORD(v107)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v106 + v107) = v52;
          LODWORD(v107) = v107 + 1;
          unsigned __int8 v23 = (unsigned int *)v106;
          v48 |= v51 != *((void *)v106 + v107 - 1);
          ++v49;
          v50 -= 8;
        }
        while (v50);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if ((v48 & 1) == 0) {
          goto LABEL_107;
        }
        uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(*a1, &v106, 0, 0);
        goto LABEL_106;
      case 5:
        uint64_t v106 = &v108;
        uint64_t v107 = 0x200000000;
        uint64_t v53 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (!v53) {
          goto LABEL_109;
        }
        char v54 = 0;
        unsigned int v55 = *(void **)(a2 + 32);
        uint64_t v56 = 8 * v53;
        do
        {
          uint64_t v57 = *v55;
          uint64_t v58 = sub_1CC139810(a1, *v55);
          if (v107 >= (unint64_t)HIDWORD(v107)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v106 + v107) = v58;
          LODWORD(v107) = v107 + 1;
          unsigned __int8 v23 = (unsigned int *)v106;
          v54 |= v57 != *((void *)v106 + v107 - 1);
          ++v55;
          v56 -= 8;
        }
        while (v56);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if ((v54 & 1) == 0) {
          goto LABEL_107;
        }
        uint64_t AddExpr = llvm::ScalarEvolution::getMulExpr(*a1, &v106, 0, 0);
        goto LABEL_106;
      case 6:
        uint64_t v59 = (const llvm::SCEV *)sub_1CC139810(a1, *(void *)(a2 + 32));
        unint64_t v60 = sub_1CC139810(a1, *(void *)(a2 + 40));
        if (v59 == *(const llvm::SCEV **)(a2 + 32))
        {
          LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
          if (v60 == *(void *)(a2 + 40)) {
            goto LABEL_109;
          }
        }
        uint64_t TruncateExpr = llvm::ScalarEvolution::getUDivExpr((llvm::ScalarEvolution *)*a1, v59, v60);
        goto LABEL_72;
      case 7:
        uint64_t v106 = &v108;
        uint64_t v107 = 0x200000000;
        uint64_t v61 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (!v61) {
          goto LABEL_109;
        }
        char v62 = 0;
        uint64_t v63 = *(void **)(a2 + 32);
        uint64_t v64 = 8 * v61;
        do
        {
          uint64_t v65 = *v63;
          uint64_t v66 = sub_1CC139810(a1, *v63);
          if (v107 >= (unint64_t)HIDWORD(v107)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v106 + v107) = v66;
          LODWORD(v107) = v107 + 1;
          unsigned __int8 v23 = (unsigned int *)v106;
          v62 |= v65 != *((void *)v106 + v107 - 1);
          ++v63;
          v64 -= 8;
        }
        while (v64);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if ((v62 & 1) == 0) {
          goto LABEL_107;
        }
        uint64_t AddExpr = llvm::ScalarEvolution::getAddRecExpr((llvm::ScalarEvolution *)*a1, (uint64_t **)&v106, *(const llvm::Loop **)(a2 + 48), *(_WORD *)(a2 + 28) & 7);
        goto LABEL_106;
      case 8:
        uint64_t v106 = &v108;
        uint64_t v107 = 0x200000000;
        uint64_t v17 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (!v17) {
          goto LABEL_109;
        }
        char v18 = 0;
        unsigned int v19 = *(void **)(a2 + 32);
        uint64_t v20 = 8 * v17;
        do
        {
          uint64_t v21 = *v19;
          uint64_t v22 = sub_1CC139810(a1, *v19);
          if (v107 >= (unint64_t)HIDWORD(v107)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v106 + v107) = v22;
          LODWORD(v107) = v107 + 1;
          unsigned __int8 v23 = (unsigned int *)v106;
          v18 |= v21 != *((void *)v106 + v107 - 1);
          ++v19;
          v20 -= 8;
        }
        while (v20);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if ((v18 & 1) == 0) {
          goto LABEL_107;
        }
        uint64_t v79 = (llvm::ScalarEvolution *)*a1;
        uint64_t v80 = 8;
        goto LABEL_105;
      case 9:
        uint64_t v106 = &v108;
        uint64_t v107 = 0x200000000;
        uint64_t v67 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (!v67) {
          goto LABEL_109;
        }
        char v68 = 0;
        uint64_t v69 = *(void **)(a2 + 32);
        uint64_t v70 = 8 * v67;
        do
        {
          uint64_t v71 = *v69;
          uint64_t v72 = sub_1CC139810(a1, *v69);
          if (v107 >= (unint64_t)HIDWORD(v107)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v106 + v107) = v72;
          LODWORD(v107) = v107 + 1;
          unsigned __int8 v23 = (unsigned int *)v106;
          v68 |= v71 != *((void *)v106 + v107 - 1);
          ++v69;
          v70 -= 8;
        }
        while (v70);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if ((v68 & 1) == 0) {
          goto LABEL_107;
        }
        uint64_t v79 = (llvm::ScalarEvolution *)*a1;
        uint64_t v80 = 9;
        goto LABEL_105;
      case 0xA:
        uint64_t v106 = &v108;
        uint64_t v107 = 0x200000000;
        uint64_t v24 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (!v24) {
          goto LABEL_109;
        }
        char v25 = 0;
        char v26 = *(void **)(a2 + 32);
        uint64_t v27 = 8 * v24;
        do
        {
          uint64_t v28 = *v26;
          uint64_t v29 = sub_1CC139810(a1, *v26);
          if (v107 >= (unint64_t)HIDWORD(v107)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v106 + v107) = v29;
          LODWORD(v107) = v107 + 1;
          unsigned __int8 v23 = (unsigned int *)v106;
          v25 |= v28 != *((void *)v106 + v107 - 1);
          ++v26;
          v27 -= 8;
        }
        while (v27);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if ((v25 & 1) == 0) {
          goto LABEL_107;
        }
        uint64_t v79 = (llvm::ScalarEvolution *)*a1;
        uint64_t v80 = 10;
        goto LABEL_105;
      case 0xB:
        uint64_t v106 = &v108;
        uint64_t v107 = 0x200000000;
        uint64_t v30 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (!v30) {
          goto LABEL_109;
        }
        char v31 = 0;
        char v32 = *(void **)(a2 + 32);
        uint64_t v33 = 8 * v30;
        do
        {
          uint64_t v34 = *v32;
          uint64_t v35 = sub_1CC139810(a1, *v32);
          if (v107 >= (unint64_t)HIDWORD(v107)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v106 + v107) = v35;
          LODWORD(v107) = v107 + 1;
          unsigned __int8 v23 = (unsigned int *)v106;
          v31 |= v34 != *((void *)v106 + v107 - 1);
          ++v32;
          v33 -= 8;
        }
        while (v33);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if ((v31 & 1) == 0) {
          goto LABEL_107;
        }
        uint64_t v79 = (llvm::ScalarEvolution *)*a1;
        uint64_t v80 = 11;
LABEL_105:
        uint64_t AddExpr = llvm::ScalarEvolution::getMinMaxExpr((uint64_t)v79, v80, (uint64_t **)&v106);
        goto LABEL_106;
      case 0xC:
        uint64_t v106 = &v108;
        uint64_t v107 = 0x200000000;
        uint64_t v73 = *(void *)(a2 + 40);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (!v73) {
          goto LABEL_109;
        }
        char v74 = 0;
        BOOL v75 = *(void **)(a2 + 32);
        uint64_t v76 = 8 * v73;
        do
        {
          uint64_t v77 = *v75;
          uint64_t v78 = sub_1CC139810(a1, *v75);
          if (v107 >= (unint64_t)HIDWORD(v107)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v106 + v107) = v78;
          LODWORD(v107) = v107 + 1;
          unsigned __int8 v23 = (unsigned int *)v106;
          v74 |= v77 != *((void *)v106 + v107 - 1);
          ++v75;
          v76 -= 8;
        }
        while (v76);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if ((v74 & 1) == 0) {
          goto LABEL_107;
        }
        uint64_t AddExpr = llvm::ScalarEvolution::getSequentialMinMaxExpr(*a1, 12, (unsigned int *)&v106);
LABEL_106:
        LosslessPtrToIntExpr = (const llvm::SCEV *)AddExpr;
        unsigned __int8 v23 = (unsigned int *)v106;
LABEL_107:
        if (v23 != &v108) {
          goto LABEL_108;
        }
        goto LABEL_109;
      case 0xD:
        unsigned int v36 = (const llvm::SCEV *)sub_1CC139810(a1, *(void *)(a2 + 32));
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (v36 == *(const llvm::SCEV **)(a2 + 32)) {
          goto LABEL_109;
        }
        unint64_t v37 = (llvm::ScalarEvolution *)*a1;
        unsigned int v38 = *(llvm::Type **)(a2 + 40);
        LosslessPtrToIntExpr = llvm::ScalarEvolution::getLosslessPtrToIntExpr((llvm::ScalarEvolution *)*a1, v36);
        if (*((_WORD *)LosslessPtrToIntExpr + 12) == 15) {
          goto LABEL_109;
        }
        uint64_t TruncateExpr = llvm::ScalarEvolution::getTruncateOrZeroExtend(v37, LosslessPtrToIntExpr, v38, 0);
LABEL_72:
        LosslessPtrToIntExpr = (const llvm::SCEV *)TruncateExpr;
        goto LABEL_109;
      case 0xE:
        uint64_t v39 = a1[5];
        if (!v39) {
          goto LABEL_131;
        }
        int v40 = *(_DWORD *)(v39 + 32);
        if (v40 == 1)
        {
          if (*(void *)(v39 + 40) == a2 && *(_DWORD *)(v39 + 36) == 32)
          {
            LosslessPtrToIntExpr = *(const llvm::SCEV **)(v39 + 48);
            goto LABEL_109;
          }
        }
        else if (!v40)
        {
          uint64_t v41 = *(unsigned int *)(v39 + 48);
          if (v41)
          {
            unsigned int v42 = *(uint64_t **)(v39 + 40);
            uint64_t v43 = 8 * v41;
            do
            {
              uint64_t v44 = *v42;
              if (*v42) {
                BOOL v45 = *(_DWORD *)(*v42 + 32) == 1;
              }
              else {
                BOOL v45 = 0;
              }
              if (v45 && *(void *)(v44 + 40) == a2 && *(_DWORD *)(v44 + 36) == 32)
              {
                LosslessPtrToIntExpr = *(const llvm::SCEV **)(v44 + 48);
                goto LABEL_109;
              }
              ++v42;
              v43 -= 8;
            }
            while (v43);
          }
        }
LABEL_131:
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (*(unsigned char *)(*(void *)(a2 - 8) + 16) != 83) {
          goto LABEL_109;
        }
        llvm::ScalarEvolution::createAddRecFromPHIWithCasts((llvm::ScalarEvolution *)*a1, (const llvm::SCEVUnknown *)(a2 - 32), (uint64_t)&v106);
        LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
        if (!v110) {
          goto LABEL_109;
        }
        if (!v108)
        {
          LosslessPtrToIntExpr = (const llvm::SCEV *)v106;
          goto LABEL_148;
        }
        char v93 = (uint64_t *)v107;
        uint64_t v94 = 8 * v108;
        break;
      default:
        goto LABEL_109;
    }
    while (1)
    {
      uint64_t v95 = *v93;
      BOOL v96 = *v93 && *(_DWORD *)(*v93 + 32) == 2;
      if (v96 && a1[6] != *(void *)(*(void *)(v95 + 40) + 48) || (sub_1CC13A3C8((uint64_t)a1, v95) & 1) == 0) {
        break;
      }
      ++v93;
      v94 -= 8;
      if (!v94)
      {
        LosslessPtrToIntExpr = (const llvm::SCEV *)v106;
        if (!v110) {
          goto LABEL_109;
        }
        goto LABEL_148;
      }
    }
    LosslessPtrToIntExpr = (const llvm::SCEV *)a2;
    if (!v110) {
      goto LABEL_109;
    }
LABEL_148:
    unsigned __int8 v23 = (unsigned int *)v107;
    if ((uint64_t *)v107 != &v109) {
LABEL_108:
    }
      free(v23);
LABEL_109:
    int v82 = *((_DWORD *)a1 + 6);
    if (!v82)
    {
      uint64_t v91 = 0;
LABEL_124:
      unsigned int v8 = sub_1CC131DD4(v5, (uint64_t)&v105, &v105, v91);
      *unsigned int v8 = v105;
      v8[1] = LosslessPtrToIntExpr;
      return v8[1];
    }
    uint64_t v83 = a1[1];
    int v84 = v82 - 1;
    unsigned int v85 = v84 & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v8 = (void *)(v83 + 16 * v85);
    uint64_t v86 = *v8;
    if (*v8 != a2)
    {
      int v87 = 0;
      int v88 = 1;
      while (v86 != -4096)
      {
        if (v87) {
          BOOL v89 = 0;
        }
        else {
          BOOL v89 = v86 == -8192;
        }
        if (v89) {
          int v87 = v8;
        }
        unsigned int v90 = v85 + v88++;
        unsigned int v85 = v90 & v84;
        unsigned int v8 = (void *)(v83 + 16 * v85);
        uint64_t v86 = *v8;
        if (*v8 == a2) {
          return v8[1];
        }
      }
      if (v87) {
        uint64_t v91 = v87;
      }
      else {
        uint64_t v91 = v8;
      }
      goto LABEL_124;
    }
  }
  return v8[1];
}

uint64_t sub_1CC13A3C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t v5 = *(unsigned int *)(v3 + 20);
    if (v4 == *(void *)v3)
    {
      if (v5)
      {
        uint64_t v6 = 0;
        uint64_t v7 = 8 * v5;
        unsigned int v8 = *(void **)(v3 + 8);
        while (*v8 != a2)
        {
          if (*v8 == -2) {
            uint64_t v6 = v8;
          }
          ++v8;
          v7 -= 8;
          if (!v7)
          {
            if (!v6) {
              goto LABEL_10;
            }
            *uint64_t v6 = a2;
            --*(_DWORD *)(v3 + 24);
            return 1;
          }
        }
        return 1;
      }
LABEL_10:
      unsigned int v9 = *(_DWORD *)(v3 + 16);
      if (v5 < v9)
      {
        *(_DWORD *)(v3 + 20) = v5 + 1;
        *(void *)(v4 + 8 * v5) = a2;
        return 1;
      }
    }
    else
    {
      unsigned int v9 = *(_DWORD *)(v3 + 16);
    }
    if (3 * v9 <= 4 * ((int)v5 - *(_DWORD *)(v3 + 24)))
    {
      if (v9 >= 0x40) {
        v9 *= 2;
      }
      else {
        unsigned int v9 = 128;
      }
    }
    else if (v9 - v5 >= v9 >> 3)
    {
      goto LABEL_19;
    }
    llvm::SmallPtrSetImplBase::Grow(*(llvm::SmallPtrSetImplBase **)(a1 + 32), v9);
    unsigned int v9 = *(_DWORD *)(v3 + 16);
    uint64_t v4 = *(void *)(v3 + 8);
LABEL_19:
    unsigned int v12 = v9 - 1;
    unsigned int v13 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unint64_t v14 = (void *)(v4 + 8 * v13);
    uint64_t v15 = *v14;
    if (*v14 == -1)
    {
      uint64_t v16 = 0;
LABEL_31:
      if (v16) {
        uint64_t v20 = v16;
      }
      else {
        uint64_t v20 = v14;
      }
      if (*v20 != a2)
      {
        if (*v20 == -2) {
          --*(_DWORD *)(v3 + 24);
        }
        else {
          ++*(_DWORD *)(v3 + 20);
        }
        *uint64_t v20 = a2;
      }
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = 1;
      while (v15 != a2)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -2;
        }
        if (v18) {
          uint64_t v16 = v14;
        }
        unsigned int v19 = v13 + v17++;
        unsigned int v13 = v19 & v12;
        unint64_t v14 = (void *)(v4 + 8 * (v19 & v12));
        uint64_t v15 = *v14;
        if (*v14 == -1) {
          goto LABEL_31;
        }
      }
    }
    return 1;
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    int v11 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v11();
  }
  return result;
}

void *sub_1CC13A598(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    int v10 = 0;
LABEL_8:
    uint64_t v6 = sub_1CC131DD4(a1, (uint64_t)a2, a2, v10);
    *uint64_t v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  uint64_t v6 = (void *)(*(void *)a1 + 16 * v5);
  uint64_t v7 = *v6;
  if (*a2 != *v6)
  {
    unsigned int v8 = 0;
    int v9 = 1;
    while (v7 != -4096)
    {
      if (v8) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v7 == -8192;
      }
      if (v12) {
        unsigned int v8 = v6;
      }
      unsigned int v13 = v5 + v9++;
      unsigned int v5 = v13 & v4;
      uint64_t v6 = (void *)(*(void *)a1 + 16 * (v13 & v4));
      uint64_t v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v8) {
      int v10 = v8;
    }
    else {
      int v10 = v6;
    }
    goto LABEL_8;
  }
  return v6;
}

BOOL sub_1CC13A654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 16);
  return v3 == *(_DWORD *)(a3 + 8) && memcmp(*(const void **)a3, *(const void **)(a2 + 8), 4 * v3) == 0;
}

unint64_t sub_1CC13A698(uint64_t a1, uint64_t a2)
{
  return sub_1CC13A6B8(*(void **)(a2 + 8), *(void *)(a2 + 8) + 4 * *(void *)(a2 + 16));
}

unint64_t sub_1CC13A6B8(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v69 = a1;
    int v65 = __cxa_guard_acquire(&qword_1EBCBE588);
    uint64_t v3 = &unk_1EBCBE000;
    int v66 = v65;
    uint64_t v2 = a2;
    a1 = v69;
    if (v66)
    {
      unint64_t v67 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v67 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v67;
      __cxa_guard_release(&qword_1EBCBE588);
      uint64_t v3 = (void *)&unk_1EBCBE000;
      uint64_t v2 = a2;
      a1 = v69;
    }
  }
  unint64_t v4 = v3[176];
  unint64_t v5 = v2 - (void)a1;
  if ((unint64_t)(v2 - (void)a1) > 0x40)
  {
    unint64_t v7 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    uint64_t v8 = __ROR8__(v4 ^ 0xB492B66FBE98F273, 49);
    unint64_t v9 = v4 ^ (v4 >> 47);
    unint64_t v10 = v4 ^ (((0x9DDFEA08EB382D69 * (v9 ^ (0xB492B66FBE98F273 * v4))) ^ v4) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                           * (v9 ^ (0xB492B66FBE98F273
                                                                                                  * v4)));
    uint64_t v11 = a1[1];
    uint64_t v12 = a1[6];
    uint64_t v13 = a1[7];
    uint64_t v14 = v8 + v4 + v11;
    uint64_t v15 = a1[5];
    unint64_t v16 = v15 + v8 - 0x4B6D499041670D8DLL * __ROR8__(v12 + v4 - 0x4B6D499041670D8DLL * v4, 42);
    unint64_t v17 = v9 - 0x622015F714C7D297 * (v7 ^ (v7 >> 47));
    uint64_t v18 = *a1 - 0x6D8ED9027DD26057 * v4;
    uint64_t v19 = a1[2];
    uint64_t v20 = a1[3];
    uint64_t v21 = v18 + v11 + v19;
    unint64_t v22 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v10) ^ ((0x9DDFEA08EB382D69 * v10) >> 47));
    uint64_t v23 = __ROR8__(v17, 33);
    unint64_t v24 = (0xB492B66FBE98F273 * __ROR8__(v14, 37)) ^ v22;
    uint64_t v25 = __ROR8__(v21, 44) + v18 + __ROR8__(v24 + v9 + v18 + v20, 21);
    unint64_t v26 = 0xB492B66FBE98F273 * v23;
    uint64_t v27 = v21 + v20;
    uint64_t v28 = v22 + a1[4] - 0x4B6D499041670D8DLL * v23;
    uint64_t v29 = __ROR8__(v15 + v12 + v28, 44) + v28 + __ROR8__(v16 + v19 + v13 + v28, 21);
    uint64_t v30 = v15 + v12 + v28 + v13;
    unint64_t v31 = (v5 & 0xFFFFFFFFFFFFFFC0) - 64;
    if ((v5 & 0xFFFFFFFFFFFFFFC0) == 0x40)
    {
      unint64_t v32 = v24;
    }
    else
    {
      uint64_t v51 = a1 + 15;
      do
      {
        uint64_t v52 = *(v51 - 6);
        uint64_t v53 = __ROR8__(v16 + v26 + v27 + v52, 37);
        uint64_t v55 = *(v51 - 2);
        uint64_t v54 = *(v51 - 1);
        unint64_t v16 = v55 + v27 - 0x4B6D499041670D8DLL * __ROR8__(v25 + v16 + v54, 42);
        uint64_t v56 = v30 + v24;
        uint64_t v57 = *(v51 - 7) - 0x4B6D499041670D8DLL * v25;
        uint64_t v58 = *(v51 - 4);
        uint64_t v59 = *(v51 - 5);
        uint64_t v60 = v57 + v52 + v59;
        unint64_t v32 = (0xB492B66FBE98F273 * v53) ^ v29;
        unint64_t v26 = 0xB492B66FBE98F273 * __ROR8__(v56, 33);
        uint64_t v25 = __ROR8__(v60, 44) + v57 + __ROR8__(v32 + v30 + v57 + v58, 21);
        uint64_t v27 = v60 + v58;
        unint64_t v61 = v26 + v29 + *(v51 - 3);
        uint64_t v62 = *v51;
        v51 += 8;
        uint64_t v63 = __ROR8__(v16 + v59 + v61 + v62, 21);
        unint64_t v64 = v55 + v54 + v61;
        uint64_t v29 = __ROR8__(v64, 44) + v61 + v63;
        uint64_t v30 = v64 + v62;
        unint64_t v24 = v32;
        v31 -= 64;
      }
      while (v31);
    }
    if ((v5 & 0x3F) != 0)
    {
      uint64_t v33 = *(void *)(v2 - 56);
      uint64_t v34 = *(void *)(v2 - 16);
      uint64_t v35 = *(void *)(v2 - 8);
      uint64_t v36 = v32 + v30;
      unint64_t v37 = (0xB492B66FBE98F273 * __ROR8__(v16 + v27 + v26 + v33, 37)) ^ v29;
      uint64_t v39 = *(void *)(v2 - 32);
      uint64_t v38 = *(void *)(v2 - 24);
      unint64_t v16 = v38 + v27 - 0x4B6D499041670D8DLL * __ROR8__(v16 + v25 + v34, 42);
      uint64_t v40 = v37 + v30;
      uint64_t v41 = *(void *)(v2 - 64) - 0x4B6D499041670D8DLL * v25;
      uint64_t v44 = v2 - 48;
      uint64_t v42 = *(void *)(v2 - 48);
      uint64_t v43 = *(void *)(v44 + 8);
      uint64_t v45 = v41 + v33 + v42;
      unint64_t v26 = 0xB492B66FBE98F273 * __ROR8__(v36, 33);
      uint64_t v25 = __ROR8__(v45, 44) + v41 + __ROR8__(v40 + v41 + v43, 21);
      uint64_t v27 = v45 + v43;
      unint64_t v46 = v26 + v29 + v39;
      unint64_t v47 = v38 + v34 + v46;
      uint64_t v29 = __ROR8__(v47, 44) + v46 + __ROR8__(v16 + v42 + v46 + v35, 21);
      uint64_t v30 = v47 + v35;
      unint64_t v32 = v37;
    }
    unint64_t v48 = 0x9DDFEA08EB382D69
        * (v29 ^ ((0x9DDFEA08EB382D69 * (v25 ^ v29)) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ v29)));
    uint64_t v49 = v26 - 0x4B6D499041670D8DLL * (v5 ^ (v5 >> 47)) - 0x622015F714C7D297 * (v48 ^ (v48 >> 47));
    unint64_t v50 = 0x9DDFEA08EB382D69
        * ((v32
          - 0x4B6D499041670D8DLL * (v16 ^ (v16 >> 47))
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v30 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v30)))) ^ ((0x9DDFEA08EB382D69 * (v30 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v30)))) >> 47))) ^ v49);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v49 ^ (v50 >> 47) ^ v50)) ^ ((0x9DDFEA08EB382D69 * (v49 ^ (v50 >> 47) ^ v50)) >> 47));
  }
  else
  {
    return sub_1CBAE06B8(a1, v5, v4);
  }
}

unint64_t sub_1CC13AA88(uint64_t a1, _DWORD *a2, llvm::ConstantInt ****a3)
{
  uint64_t v6 = a1;
  while (2)
  {
    switch(*(_WORD *)(v6 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        uint64_t v8 = (uint64_t *)(v6 + 40);
        goto LABEL_9;
      case 4:
        uint64_t v8 = (uint64_t *)(v6 + 48);
        goto LABEL_9;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        unint64_t v7 = *(uint64_t **)(v6 + 32);
        goto LABEL_4;
      case 6:
        unint64_t v7 = (uint64_t *)(v6 + 40);
LABEL_4:
        uint64_t v6 = *v7;
        continue;
      case 0xE:
        uint64_t v8 = *(uint64_t **)(v6 - 8);
        goto LABEL_9;
      default:
        uint64_t v8 = *(uint64_t **)(v6 + 32);
LABEL_9:
        uint64_t v9 = *v8;
        unsigned int v10 = *(_DWORD *)(*v8 + 8);
        uint64_t v11 = (*a3)[5];
        if (v10 == 15)
        {
          if ((v10 & 0xFE) == 0x12) {
            unsigned int v10 = *(_DWORD *)(**(void **)(v9 + 16) + 8);
          }
          unint64_t v24 = v11[63];
          if (v10 < 0x100) {
            goto LABEL_44;
          }
          unsigned int v25 = v10 >> 8;
          unint64_t v26 = *((unsigned int *)v11 + 128);
          uint64_t v27 = v11[63];
          if (v26)
          {
            uint64_t v27 = v24;
            unint64_t v28 = v26;
            do
            {
              unint64_t v29 = v28 >> 1;
              uint64_t v30 = (uint64_t)v27 + 16 * (v28 >> 1);
              unsigned int v31 = *(_DWORD *)(v30 + 8);
              unint64_t v32 = (llvm::ConstantInt *)(v30 + 16);
              v28 += ~(v28 >> 1);
              if (v31 < v25) {
                uint64_t v27 = v32;
              }
              else {
                unint64_t v28 = v29;
              }
            }
            while (v28);
          }
          if (v27 == (llvm::ConstantInt *)((char *)v24 + 16 * v26) || *((_DWORD *)v27 + 2) != v25) {
LABEL_44:
          }
            uint64_t v27 = v24;
          unsigned int v12 = *((_DWORD *)v27 + 3);
        }
        else
        {
          unsigned int v12 = sub_1CB83544C((uint64_t)(v11 + 34), v9);
          if (v13 == 1)
          {
            unsigned int v41 = v12;
            unsigned int v12 = v41;
          }
        }
        *a2 = 36;
        unsigned int v45 = v12;
        if (v12 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v44);
        }
        uint64_t v44 = 0;
        uint64_t RangeRef = (char **)llvm::ScalarEvolution::getRangeRef(a3, a1, 0, 0);
        llvm::ConstantRange::getUnsignedMax(RangeRef, (uint64_t)&v42);
        if (v43 > 0x40)
        {
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v42);
        }
        else
        {
          if (v43) {
            unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v43;
          }
          else {
            unint64_t v15 = 0;
          }
          unint64_t v42 = v15 & ~v42;
        }
        llvm::APInt::operator++((uint64_t)&v42);
        unsigned int v17 = v43;
        if (v43 >= 0x41)
        {
          uint64_t v33 = 0;
          BOOL v34 = 0;
          unint64_t v35 = v42;
          uint64_t v18 = v44;
          unint64_t v36 = ((unint64_t)v43 + 63) >> 6;
          do
          {
            unint64_t v37 = *(void *)(v35 + v33);
            unint64_t v38 = *(void *)(v18 + v33) + v37;
            BOOL v39 = v38 < v37;
            BOOL v40 = v38 + 1 <= v37;
            if (v34)
            {
              ++v38;
              BOOL v34 = v40;
            }
            else
            {
              BOOL v34 = v39;
            }
            *(void *)(v35 + v33) = v38;
            v33 += 8;
          }
          while (8 * v36 != v33);
          *(void *)(v42 + 8 * (v36 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
          unsigned int v17 = v43;
          unint64_t v20 = v42;
        }
        else
        {
          uint64_t v18 = v44;
          if (v43) {
            unint64_t v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v43;
          }
          else {
            unint64_t v19 = 0;
          }
          unint64_t v20 = v19 & (v42 + v44);
          unint64_t v42 = v20;
        }
        unsigned int v47 = v17;
        unint64_t v46 = v20;
        unsigned int v43 = 0;
        uint64_t v21 = (llvm::ConstantInt *)llvm::ConstantInt::get(***a3, (llvm::LLVMContext *)&v46, v16);
        unint64_t Constant = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a3, v21);
        if (v47 >= 0x41 && v46) {
          MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
        }
        if (v43 >= 0x41 && v42) {
          MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
        }
        if (v45 >= 0x41 && v18) {
          MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
        }
        return Constant;
    }
  }
}

void sub_1CC13AE20(void *a1)
{
  if (a1)
  {
    sub_1CC13AE20(*a1);
    sub_1CC13AE20(a1[1]);
    uint64_t v2 = (char *)a1[6];
    if (v2 != (char *)(a1 + 8)) {
      free(v2);
    }
    if (*((_DWORD *)a1 + 10) >= 0x41u)
    {
      uint64_t v3 = a1[4];
      if (v3) {
        MEMORY[0x1D25D9CB0](v3, 0x1000C8000313F17);
      }
    }
    operator delete(a1);
  }
}

uint64_t sub_1CC13AEB0(uint64_t result, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(result + 56 * v5);
    uint64_t v7 = *v6;
    if (*v6 != a3)
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          uint64_t v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        uint64_t v6 = (void *)(result + 56 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_3;
        }
      }
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
LABEL_3:
  *a4 = v6;
  return result;
}

void *sub_1CC13AF34(uint64_t *a1, int a2)
{
  unsigned int v3 = *((_DWORD *)a1 + 4);
  int v4 = (uint64_t *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  uint64_t result = operator new(56 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v12 = *((unsigned int *)a1 + 4);
    if (v12)
    {
      uint64_t v13 = 56 * v12;
      do
      {
        void *result = -4096;
        result += 7;
        v13 -= 56;
      }
      while (v13);
    }
    if (v3)
    {
      uint64_t v14 = &v4[7 * v3];
      unint64_t v15 = v4;
      do
      {
        uint64_t v16 = *v15;
        if ((*v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v17 = *((_DWORD *)a1 + 4) - 1;
          unsigned int v18 = v17 & ((v16 >> 4) ^ (v16 >> 9));
          uint64_t v19 = *a1 + 56 * v18;
          uint64_t v20 = *(void *)v19;
          if (v16 != *(void *)v19)
          {
            uint64_t v25 = 0;
            int v26 = 1;
            while (v20 != -4096)
            {
              if (v25) {
                BOOL v27 = 0;
              }
              else {
                BOOL v27 = v20 == -8192;
              }
              if (v27) {
                uint64_t v25 = v19;
              }
              unsigned int v28 = v18 + v26++;
              unsigned int v18 = v28 & v17;
              uint64_t v19 = *a1 + 56 * v18;
              uint64_t v20 = *(void *)v19;
              if (v16 == *(void *)v19) {
                goto LABEL_16;
              }
            }
            if (v25) {
              uint64_t v19 = v25;
            }
          }
LABEL_16:
          *(void *)(v19 + 8) = v19 + 24;
          *(void *)uint64_t v19 = v16;
          *(void *)(v19 + 16) = 0x400000000;
          unsigned int v21 = *((_DWORD *)v15 + 4);
          unint64_t v22 = (uint64_t *)v15[1];
          if ((uint64_t *)v19 != v15 && v21 != 0)
          {
            if (v22 == v15 + 3)
            {
              if (v21 >= 5) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy((void *)(v19 + 24), v22, 8 * *((unsigned int *)v15 + 4));
              *(_DWORD *)(v19 + 16) = v21;
              unint64_t v22 = (uint64_t *)v15[1];
            }
            else
            {
              *(void *)(v19 + 8) = v22;
              int v24 = *((_DWORD *)v15 + 5);
              *(_DWORD *)(v19 + 16) = v21;
              *(_DWORD *)(v19 + 20) = v24;
              v15[1] = (uint64_t)(v15 + 3);
              *((_DWORD *)v15 + 5) = 0;
              unint64_t v22 = v15 + 3;
            }
            *((_DWORD *)v15 + 4) = 0;
          }
          ++*((_DWORD *)a1 + 2);
          if (v22 != v15 + 3) {
            free(v22);
          }
        }
        v15 += 7;
      }
      while (v15 != v14);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v10 = *((unsigned int *)a1 + 4);
  if (v10)
  {
    uint64_t v11 = 56 * v10;
    do
    {
      void *result = -4096;
      result += 7;
      v11 -= 56;
    }
    while (v11);
  }
  return result;
}

void sub_1CC13B1C0(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = *(void **)(a1 + 88);
  unint64_t v5 = *(void **)(a1 + 96);
  int v4 = (unsigned int *)(a1 + 88);
  uint64_t v7 = v4[5];
  if (v5 == v6)
  {
    if (v7)
    {
      unsigned int v8 = 0;
      uint64_t v9 = 8 * v7;
      uint64_t v10 = v5;
      while (*v10 != a2)
      {
        if (*v10 == -2) {
          unsigned int v8 = v10;
        }
        ++v10;
        v9 -= 8;
        if (!v9)
        {
          if (!v8) {
            goto LABEL_9;
          }
          *unsigned int v8 = a2;
          --*(_DWORD *)(a1 + 112);
          if (a2) {
            goto LABEL_34;
          }
          goto LABEL_36;
        }
      }
      return;
    }
LABEL_9:
    unsigned int v11 = *(_DWORD *)(a1 + 104);
    if (v7 < v11)
    {
      *(_DWORD *)(a1 + 108) = v7 + 1;
      v5[v7] = a2;
      if (!a2)
      {
LABEL_36:
        unsigned int v21 = *(_DWORD *)(a1 + 16);
        if (v21 >= *(_DWORD *)(a1 + 20)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a1 + 8) + 8 * v21) = a2;
        ++*(_DWORD *)(a1 + 16);
        return;
      }
LABEL_34:
      if (*(_WORD *)(a2 + 24) == 14 && !*(void *)(a2 - 8))
      {
        **(unsigned char **)a1 = 1;
        return;
      }
      goto LABEL_36;
    }
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(a1 + 104);
  }
  if (3 * v11 <= 4 * ((int)v7 - *(_DWORD *)(a1 + 112)))
  {
    if (v11 >= 0x40) {
      v11 *= 2;
    }
    else {
      unsigned int v11 = 128;
    }
  }
  else if (v11 - v7 >= v11 >> 3)
  {
    goto LABEL_15;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v4, v11);
  unsigned int v11 = *(_DWORD *)(a1 + 104);
  unint64_t v5 = *(void **)(a1 + 96);
LABEL_15:
  unsigned int v12 = v11 - 1;
  unsigned int v13 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v14 = &v5[v13];
  uint64_t v15 = *v14;
  if (*v14 != -1)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    while (v15 != a2)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -2;
      }
      if (v18) {
        uint64_t v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      uint64_t v14 = &v5[v19 & v12];
      uint64_t v15 = *v14;
      if (*v14 == -1) {
        goto LABEL_27;
      }
    }
    return;
  }
  uint64_t v16 = 0;
LABEL_27:
  if (v16) {
    uint64_t v20 = v16;
  }
  else {
    uint64_t v20 = v14;
  }
  if (*v20 != a2)
  {
    if (*v20 == -2) {
      --*(_DWORD *)(a1 + 112);
    }
    else {
      ++*(_DWORD *)(a1 + 108);
    }
    *uint64_t v20 = a2;
    if (!a2) {
      goto LABEL_36;
    }
    goto LABEL_34;
  }
}

uint64_t sub_1CC13B3A8(uint64_t result, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v5 = a2 - 1;
    unsigned int v6 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v4 = (void *)(result + 16 * v6);
    uint64_t v7 = *v4;
    if (*v4 != a3)
    {
      unsigned int v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          unsigned int v8 = v4;
        }
        unsigned int v11 = v6 + v9++;
        unsigned int v6 = v11 & v5;
        int v4 = (void *)(result + 16 * (v11 & v5));
        uint64_t v7 = *v4;
        if (*v4 == a3) {
          goto LABEL_3;
        }
      }
      if (v8) {
        int v4 = v8;
      }
    }
  }
  else
  {
    int v4 = 0;
  }
LABEL_3:
  *a4 = v4;
  return result;
}

void sub_1CC13B424(uint64_t a1, uint64_t a2)
{
  unsigned int v6 = *(void **)(a1 + 88);
  int v5 = *(void **)(a1 + 96);
  int v4 = (unsigned int *)(a1 + 88);
  uint64_t v7 = v4[5];
  if (v5 == v6)
  {
    if (v7)
    {
      unsigned int v8 = 0;
      uint64_t v9 = 8 * v7;
      BOOL v10 = v5;
      while (*v10 != a2)
      {
        if (*v10 == -2) {
          unsigned int v8 = v10;
        }
        ++v10;
        v9 -= 8;
        if (!v9)
        {
          if (!v8) {
            goto LABEL_9;
          }
          *unsigned int v8 = a2;
          --*(_DWORD *)(a1 + 112);
          goto LABEL_33;
        }
      }
      return;
    }
LABEL_9:
    unsigned int v11 = *(_DWORD *)(a1 + 104);
    if (v7 < v11)
    {
      *(_DWORD *)(a1 + 108) = v7 + 1;
      v5[v7] = a2;
LABEL_33:
      if (*(_WORD *)(a2 + 24) == 7)
      {
        **(unsigned char **)a1 = 1;
      }
      else
      {
        unsigned int v21 = *(_DWORD *)(a1 + 16);
        if (v21 >= *(_DWORD *)(a1 + 20)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a1 + 8) + 8 * v21) = a2;
        ++*(_DWORD *)(a1 + 16);
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(a1 + 104);
  }
  if (3 * v11 <= 4 * ((int)v7 - *(_DWORD *)(a1 + 112)))
  {
    if (v11 >= 0x40) {
      v11 *= 2;
    }
    else {
      unsigned int v11 = 128;
    }
  }
  else if (v11 - v7 >= v11 >> 3)
  {
    goto LABEL_14;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v4, v11);
  unsigned int v11 = *(_DWORD *)(a1 + 104);
  int v5 = *(void **)(a1 + 96);
LABEL_14:
  unsigned int v12 = v11 - 1;
  unsigned int v13 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v14 = &v5[v13];
  uint64_t v15 = *v14;
  if (*v14 != -1)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    while (v15 != a2)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -2;
      }
      if (v18) {
        uint64_t v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      uint64_t v14 = &v5[v19 & v12];
      uint64_t v15 = *v14;
      if (*v14 == -1) {
        goto LABEL_26;
      }
    }
    return;
  }
  uint64_t v16 = 0;
LABEL_26:
  if (v16) {
    uint64_t v20 = v16;
  }
  else {
    uint64_t v20 = v14;
  }
  if (*v20 != a2)
  {
    if (*v20 == -2) {
      --*(_DWORD *)(a1 + 112);
    }
    else {
      ++*(_DWORD *)(a1 + 108);
    }
    *uint64_t v20 = a2;
    goto LABEL_33;
  }
}

void *sub_1CC13B5F8(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC13B6C4(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      void *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC13B6C4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    int v4 = *(void **)result;
    uint64_t v5 = 16 * v3;
    do
    {
      *int v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    int v6 = 0;
    int v7 = v3 - 1;
    do
    {
      uint64_t v8 = *a2;
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unsigned int v9 = ((v8 >> 4) ^ (v8 >> 9)) & v7;
        uint64_t v10 = *(void *)result + 16 * v9;
        uint64_t v11 = *(void *)v10;
        if (v8 != *(void *)v10)
        {
          uint64_t v12 = 0;
          int v13 = 1;
          while (v11 != -4096)
          {
            if (v12) {
              BOOL v14 = 0;
            }
            else {
              BOOL v14 = v11 == -8192;
            }
            if (v14) {
              uint64_t v12 = v10;
            }
            unsigned int v15 = v9 + v13++;
            unsigned int v9 = v15 & v7;
            uint64_t v10 = *(void *)result + 16 * (v15 & v7);
            uint64_t v11 = *(void *)v10;
            if (v8 == *(void *)v10) {
              goto LABEL_12;
            }
          }
          if (v12) {
            uint64_t v10 = v12;
          }
        }
LABEL_12:
        *(void *)uint64_t v10 = v8;
        *(unsigned char *)(v10 + 8) = *((unsigned char *)a2 + 8);
        *(_DWORD *)(result + 8) = ++v6;
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

void *sub_1CC13B798@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)a1;
    uint64_t v10 = a2[3];
    unsigned int v11 = ((v10 >> 4) ^ (v10 >> 9)) & (v8 - 1);
    uint64_t result = (void *)(*(void *)a1 + 48 * v11);
    uint64_t v13 = result[3];
    if (v10 == v13)
    {
LABEL_11:
      char v18 = 0;
      goto LABEL_29;
    }
    BOOL v14 = 0;
    int v15 = 1;
    while (v13 != -4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v13 == -8192;
      }
      if (v16) {
        BOOL v14 = result;
      }
      unsigned int v17 = v11 + v15++;
      unsigned int v11 = v17 & (v8 - 1);
      uint64_t result = (void *)(v9 + 48 * v11);
      uint64_t v13 = result[3];
      if (v10 == v13) {
        goto LABEL_11;
      }
    }
    if (v14) {
      uint64_t v19 = (uint64_t)v14;
    }
    else {
      uint64_t v19 = (uint64_t)result;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t result = (void *)sub_1CC13B9E0(a1, (uint64_t)a2, (uint64_t)a2, v19);
  uint64_t v20 = result[3];
  uint64_t v21 = a2[3];
  if (v20 != v21)
  {
    BOOL v22 = v20 == -4096 || v20 == 0;
    if (!v22 && v20 != -8192)
    {
      unint64_t v26 = result[1] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v26 = result[2];
      BOOL v27 = (unint64_t *)result[2];
      if (v27)
      {
        unint64_t *v27 = *v27 & 7 | v26;
      }
      else
      {
        uint64_t v28 = result[3];
        unint64_t v29 = ***(int32x2_t ****)v28;
        unint64_t v30 = (unint64_t)v29[303];
        if (v30 <= v26)
        {
          uint64_t v31 = v29[305].u32[0];
          if (v30 + 16 * v31 > v26)
          {
            unsigned int v32 = v31 - 1;
            LODWORD(v33) = v32 & ((v28 >> 4) ^ (v28 >> 9));
            BOOL v34 = (uint64_t *)(v30 + 16 * v33);
            uint64_t v35 = *v34;
            if (v28 == *v34)
            {
LABEL_39:
              *BOOL v34 = -8192;
              v29[304] = vadd_s32(v29[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v28 = result[3];
            }
            else
            {
              int v36 = 1;
              while (v35 != -4096)
              {
                int v37 = v33 + v36++;
                uint64_t v33 = v37 & v32;
                uint64_t v35 = *(void *)(v30 + 16 * v33);
                if (v28 == v35)
                {
                  BOOL v34 = (uint64_t *)(v30 + 16 * v33);
                  goto LABEL_39;
                }
              }
            }
            *(unsigned char *)(v28 + 17) &= ~1u;
          }
        }
      }
      uint64_t v21 = a2[3];
    }
    result[3] = v21;
    if (v21 != -4096 && v21 != -8192 && v21 != 0)
    {
      uint64_t v24 = a2[1];
      result[2] = *(void *)(v24 & 0xFFFFFFFFFFFFFFF8);
      *(void *)(v24 & 0xFFFFFFFFFFFFFFF8) = result + 1;
      result[1] = v24 & 0xFFFFFFFFFFFFFFF8 | result[1] & 7;
      uint64_t v25 = (unint64_t *)result[2];
      if (v25) {
        *uint64_t v25 = *v25 & 7 | (unint64_t)(result + 2);
      }
    }
  }
  result[4] = a2[4];
  result[5] = *a3;
  uint64_t v9 = *(void *)a1;
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  char v18 = 1;
LABEL_29:
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v9 + 48 * v8;
  *(unsigned char *)(a4 + 16) = v18;
  return result;
}

uint64_t sub_1CC13B9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3) {
      goto LABEL_3;
    }
    sub_1CC13BB74(a1, v7);
    int v18 = *(_DWORD *)(a1 + 16);
    if (v18)
    {
      uint64_t v19 = *(void *)(a3 + 24);
      int v20 = v18 - 1;
      unsigned int v21 = ((v19 >> 4) ^ (v19 >> 9)) & v20;
      a4 = *(void *)a1 + 48 * v21;
      uint64_t v22 = *(void *)(a4 + 24);
      if (v19 == v22) {
        goto LABEL_3;
      }
      uint64_t v14 = 0;
      int v23 = 1;
      while (v22 != -4096)
      {
        if (v14) {
          BOOL v24 = 0;
        }
        else {
          BOOL v24 = v22 == -8192;
        }
        if (v24) {
          uint64_t v14 = a4;
        }
        unsigned int v25 = v21 + v23++;
        unsigned int v21 = v25 & v20;
        a4 = *(void *)a1 + 48 * v21;
        uint64_t v22 = *(void *)(a4 + 24);
        if (v19 == v22) {
          goto LABEL_3;
        }
      }
      goto LABEL_28;
    }
LABEL_31:
    a4 = 0;
    goto LABEL_3;
  }
  sub_1CC13BB74(a1, 2 * v7);
  int v9 = *(_DWORD *)(a1 + 16);
  if (!v9) {
    goto LABEL_31;
  }
  uint64_t v10 = *(void *)(a3 + 24);
  int v11 = v9 - 1;
  unsigned int v12 = ((v10 >> 4) ^ (v10 >> 9)) & v11;
  a4 = *(void *)a1 + 48 * v12;
  uint64_t v13 = *(void *)(a4 + 24);
  if (v10 == v13) {
    goto LABEL_3;
  }
  uint64_t v14 = 0;
  int v15 = 1;
  while (v13 != -4096)
  {
    if (v14) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v13 == -8192;
    }
    if (v16) {
      uint64_t v14 = a4;
    }
    unsigned int v17 = v12 + v15++;
    unsigned int v12 = v17 & v11;
    a4 = *(void *)a1 + 48 * v12;
    uint64_t v13 = *(void *)(a4 + 24);
    if (v10 == v13) {
      goto LABEL_3;
    }
  }
LABEL_28:
  if (v14) {
    a4 = v14;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)(a4 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC13BB74(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = operator new(48 * v8, (std::align_val_t)8uLL);
  if (v4)
  {
    sub_1CC13BD6C(a1, v4, &v4[6 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }

  return sub_1CC13BC3C((void *)a1);
}

void *sub_1CC13BC3C(void *result)
{
  result[1] = 0;
  v10[0] = 2;
  v10[1] = 0;
  uint64_t v11 = -4096;
  uint64_t v12 = 0;
  uint64_t v1 = *((unsigned int *)result + 4);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t result = v10;
    uint64_t v3 = *v2;
    uint64_t v4 = 48 * v1;
    unint64_t v5 = (void *)(*v2 + 16);
    do
    {
      uint64_t v6 = v10[0] & 6;
      *(v5 - 1) = v6;
      *unint64_t v5 = 0;
      uint64_t v7 = v11;
      v5[1] = v11;
      if (v7 != -4096 && v7 != -8192 && v7 != 0)
      {
        unint64_t v9 = v10[0] & 0xFFFFFFFFFFFFFFF8;
        *unint64_t v5 = *(void *)(v10[0] & 0xFFFFFFFFFFFFFFF8);
        *(void *)unint64_t v9 = v5 - 1;
        *(v5 - 1) = v9 | v6;
        if (*v5) {
          *(void *)*unint64_t v5 = *(void *)*v5 & 7 | (v3 + 16);
        }
      }
      *(v5 - 2) = off_1F2607428;
      void v5[2] = v12;
      v5 += 6;
      v3 += 48;
      v4 -= 48;
    }
    while (v4);
    if (v11 != -8192 && v11 != -4096)
    {
      if (v11) {
        return llvm::ValueHandleBase::RemoveFromUseList(v10);
      }
    }
  }
  return result;
}

void *sub_1CC13BD6C(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = sub_1CC13BC3C((void *)a1);
  v52[0] = 2;
  v52[1] = 0;
  uint64_t v53 = -4096;
  uint64_t v54 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = off_1F2607428;
  v48[0] = 2;
  v48[1] = 0;
  uint64_t v49 = -8192;
  if (a2 != a3)
  {
    uint64_t result = v48;
    do
    {
      uint64_t v7 = a2[3];
      if (v7 != v53 && v7 != v49)
      {
        int v9 = *(_DWORD *)(a1 + 16) - 1;
        unsigned int v10 = v9 & ((v7 >> 4) ^ (v7 >> 9));
        uint64_t v11 = (void *)(*(void *)a1 + 48 * v10);
        uint64_t v12 = v11[3];
        if (v7 != v12)
        {
          uint64_t v13 = 0;
          int v14 = 1;
          while (v12 != -4096)
          {
            if (v13) {
              BOOL v15 = 0;
            }
            else {
              BOOL v15 = v12 == -8192;
            }
            if (v15) {
              uint64_t v13 = v11;
            }
            unsigned int v16 = v10 + v14++;
            unsigned int v10 = v16 & v9;
            uint64_t v11 = (void *)(*(void *)a1 + 48 * (v16 & v9));
            uint64_t v12 = v11[3];
            if (v7 == v12) {
              goto LABEL_32;
            }
          }
          if (v13) {
            uint64_t v11 = v13;
          }
          uint64_t v17 = v11[3];
          if (v17 != v7)
          {
            BOOL v18 = v17 == -4096 || v17 == 0;
            if (!v18 && v17 != -8192)
            {
              unint64_t v35 = v11[1] & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v35 = v11[2];
              int v36 = (unint64_t *)v11[2];
              if (v36)
              {
                *int v36 = *v36 & 7 | v35;
              }
              else
              {
                uint64_t v37 = v11[3];
                unint64_t v38 = ***(int32x2_t ****)v37;
                unint64_t v39 = (unint64_t)v38[303];
                if (v39 <= v35)
                {
                  uint64_t v40 = v38[305].u32[0];
                  if (v39 + 16 * v40 > v35)
                  {
                    unsigned int v41 = v40 - 1;
                    LODWORD(v42) = v41 & ((v37 >> 4) ^ (v37 >> 9));
                    unsigned int v43 = (uint64_t *)(v39 + 16 * v42);
                    uint64_t v44 = *v43;
                    if (v37 == *v43)
                    {
LABEL_60:
                      uint64_t *v43 = -8192;
                      v38[304] = vadd_s32(v38[304], (int32x2_t)0x1FFFFFFFFLL);
                      uint64_t v37 = v11[3];
                    }
                    else
                    {
                      int v45 = 1;
                      while (v44 != -4096)
                      {
                        int v46 = v42 + v45++;
                        uint64_t v42 = v46 & v41;
                        uint64_t v44 = *(void *)(v39 + 16 * v42);
                        if (v37 == v44)
                        {
                          unsigned int v43 = (uint64_t *)(v39 + 16 * v42);
                          goto LABEL_60;
                        }
                      }
                    }
                    *(unsigned char *)(v37 + 17) &= ~1u;
                  }
                }
              }
              uint64_t v7 = a2[3];
            }
            v11[3] = v7;
            if (v7 != -4096 && v7 != -8192 && v7 != 0)
            {
              uint64_t v20 = a2[1];
              v11[2] = *(void *)(v20 & 0xFFFFFFFFFFFFFFF8);
              *(void *)(v20 & 0xFFFFFFFFFFFFFFF8) = v11 + 1;
              v11[1] = v20 & 0xFFFFFFFFFFFFFFF8 | v11[1] & 7;
              unsigned int v21 = (unint64_t *)v11[2];
              if (v21) {
                *unsigned int v21 = *v21 & 7 | (unint64_t)(v11 + 2);
              }
            }
          }
        }
LABEL_32:
        v11[4] = a2[4];
        v11[5] = a2[5];
        ++*(_DWORD *)(a1 + 8);
        uint64_t v7 = a2[3];
      }
      if (v7 != -4096 && v7 != -8192 && v7 != 0)
      {
        unint64_t v23 = a2[1] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v23 = a2[2];
        BOOL v24 = (unint64_t *)a2[2];
        if (v24)
        {
          *BOOL v24 = *v24 & 7 | v23;
        }
        else
        {
          uint64_t v25 = a2[3];
          unint64_t v26 = ***(int32x2_t ****)v25;
          unint64_t v27 = (unint64_t)v26[303];
          if (v27 <= v23)
          {
            uint64_t v28 = v26[305].u32[0];
            if (v27 + 16 * v28 > v23)
            {
              unsigned int v29 = v28 - 1;
              LODWORD(v30) = v29 & ((v25 >> 4) ^ (v25 >> 9));
              uint64_t v31 = (uint64_t *)(v27 + 16 * v30);
              uint64_t v32 = *v31;
              if (v25 == *v31)
              {
LABEL_46:
                uint64_t *v31 = -8192;
                v26[304] = vadd_s32(v26[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v25 = a2[3];
              }
              else
              {
                int v33 = 1;
                while (v32 != -4096)
                {
                  int v34 = v30 + v33++;
                  uint64_t v30 = v34 & v29;
                  uint64_t v32 = *(void *)(v27 + 16 * v30);
                  if (v25 == v32)
                  {
                    uint64_t v31 = (uint64_t *)(v27 + 16 * v30);
                    goto LABEL_46;
                  }
                }
              }
              *(unsigned char *)(v25 + 17) &= ~1u;
            }
          }
        }
      }
      a2 += 6;
    }
    while (a2 != a3);
    if (v49 != -8192 && v49 != -4096 && v49 != 0) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList(v48);
    }
  }
  if (v53 != -4096 && v53 != -8192)
  {
    if (v53) {
      return llvm::ValueHandleBase::RemoveFromUseList(v52);
    }
  }
  return result;
}

void *sub_1CC13C12C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CC13C2B0(a1, 2 * v7);
    uint64_t v8 = *a3;
    int v10 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
    a4 = (void *)(*(void *)a1 + 96 * v11);
    uint64_t v12 = *a4;
    if (*a3 != *a4)
    {
      uint64_t v13 = 0;
      int v14 = 1;
      while (v12 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -8192;
        }
        if (v15) {
          uint64_t v13 = a4;
        }
        unsigned int v16 = v11 + v14++;
        unsigned int v11 = v16 & v10;
        a4 = (void *)(*(void *)a1 + 96 * v11);
        uint64_t v12 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      uint64_t v8 = *a4;
      goto LABEL_4;
    }
    sub_1CC13C2B0(a1, v7);
    uint64_t v8 = *a3;
    int v17 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v18 = ((*a3 >> 4) ^ (*a3 >> 9)) & v17;
    a4 = (void *)(*(void *)a1 + 96 * v18);
    uint64_t v19 = *a4;
    if (*a3 != *a4)
    {
      uint64_t v13 = 0;
      int v20 = 1;
      while (v19 != -4096)
      {
        if (v13) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v19 == -8192;
        }
        if (v21) {
          uint64_t v13 = a4;
        }
        unsigned int v22 = v18 + v20++;
        unsigned int v18 = v22 & v17;
        a4 = (void *)(*(void *)a1 + 96 * v18);
        uint64_t v19 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
LABEL_27:
      if (v13) {
        a4 = v13;
      }
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC13C2B0(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(96 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC13C388(a1, v4, &v4[12 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 96 * v10;
    do
    {
      void *result = -4096;
      result += 12;
      v11 -= 96;
    }
    while (v11);
  }
  return result;
}

void sub_1CC13C388(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = (unsigned int *)a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = 96 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 12;
      v8 -= 96;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *(void *)v4;
      if ((*(void *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v10 = *(_DWORD *)(a1 + 16) - 1;
        unsigned int v11 = v10 & ((v9 >> 4) ^ (v9 >> 9));
        uint64_t v12 = *(void *)a1 + 96 * v11;
        uint64_t v13 = *(void *)v12;
        if (v9 != *(void *)v12)
        {
          uint64_t v14 = 0;
          int v15 = 1;
          while (v13 != -4096)
          {
            if (v14) {
              BOOL v16 = 0;
            }
            else {
              BOOL v16 = v13 == -8192;
            }
            if (v16) {
              uint64_t v14 = v12;
            }
            unsigned int v17 = v11 + v15++;
            unsigned int v11 = v17 & v10;
            uint64_t v12 = *(void *)a1 + 96 * v11;
            uint64_t v13 = *(void *)v12;
            if (v9 == *(void *)v12) {
              goto LABEL_18;
            }
          }
          if (v14) {
            uint64_t v12 = v14;
          }
        }
LABEL_18:
        *(void *)uint64_t v12 = v9;
        sub_1CC00ACE8((unsigned int *)(v12 + 8), v4 + 2);
        ++*(_DWORD *)(a1 + 8);
        unsigned int v18 = (uint64_t *)*((void *)v4 + 6);
        if (v18 != (uint64_t *)(v4 + 16)) {
          free(v18);
        }
        if ((v4[2] & 1) == 0) {
          MEMORY[0x1D25D9CD0](*((void *)v4 + 2), 8);
        }
      }
      v4 += 24;
    }
    while (v4 != (unsigned int *)a3);
  }
}

double sub_1CC13C4D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = 0;
  char v4 = sub_1CC13C5D8(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v9);
  uint64_t v6 = v9;
  if (v4) {
    return result;
  }
  int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - *(_DWORD *)(a1 + 12) > v8 >> 3)
  {
    goto LABEL_4;
  }
  sub_1CC13C6C0(a1, v8);
  uint64_t v9 = 0;
  sub_1CC13C5D8(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v9);
  uint64_t v6 = v9;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*v6 != -4096 || v6[1] != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *uint64_t v6 = *a2;
  v6[1] = a2[1];
  void v6[2] = 0;
  void v6[3] = (uint64_t)(v6 + 5);
  *(void *)&double result = 0x300000000;
  v6[4] = 0x300000000;
  return result;
}

uint64_t sub_1CC13C5D8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    uint64_t v8 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    uint64_t v9 = (void *)(a1 + (v8 << 6));
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    if (*v9 == a3 && v11 == a4)
    {
      uint64_t v18 = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      while (v10 != -4096 || v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15 && v10 == -8192) {
          uint64_t v13 = v9;
        }
        int v17 = v8 + v14++;
        uint64_t v8 = v17 & (a2 - 1);
        uint64_t v9 = (void *)(a1 + (v8 << 6));
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        uint64_t v18 = 1;
        if (*v9 == a3 && v11 == a4) {
          goto LABEL_25;
        }
      }
      uint64_t v18 = 0;
      if (v13) {
        uint64_t v9 = v13;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v18 = 0;
  }
LABEL_25:
  *a5 = v9;
  return v18;
}

_OWORD *sub_1CC13C6C0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD4C1A74(a1, v4, v4 + (v3 << 6));
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = v10 << 6;
    int64x2_t v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      _OWORD *result = v12;
      result += 4;
      v11 -= 64;
    }
    while (v11);
  }
  return result;
}

void sub_1CC13C790(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = *(void **)(a1 + 88);
  unint64_t v5 = *(void **)(a1 + 96);
  uint64_t v4 = (unsigned int *)(a1 + 88);
  uint64_t v7 = v4[5];
  if (v5 == v6)
  {
    if (v7)
    {
      unsigned int v8 = 0;
      uint64_t v9 = 8 * v7;
      uint64_t v10 = v5;
      while (*v10 != a2)
      {
        if (*v10 == -2) {
          unsigned int v8 = v10;
        }
        ++v10;
        v9 -= 8;
        if (!v9)
        {
          if (!v8) {
            goto LABEL_9;
          }
          *unsigned int v8 = a2;
          --*(_DWORD *)(a1 + 112);
          goto LABEL_33;
        }
      }
      return;
    }
LABEL_9:
    unsigned int v11 = *(_DWORD *)(a1 + 104);
    if (v7 < v11)
    {
      *(_DWORD *)(a1 + 108) = v7 + 1;
      v5[v7] = a2;
      goto LABEL_33;
    }
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(a1 + 104);
  }
  if (3 * v11 <= 4 * ((int)v7 - *(_DWORD *)(a1 + 112)))
  {
    if (v11 >= 0x40) {
      v11 *= 2;
    }
    else {
      unsigned int v11 = 128;
    }
  }
  else if (v11 - v7 >= v11 >> 3)
  {
    goto LABEL_14;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v4, v11);
  unsigned int v11 = *(_DWORD *)(a1 + 104);
  unint64_t v5 = *(void **)(a1 + 96);
LABEL_14:
  unsigned int v12 = v11 - 1;
  unsigned int v13 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v14 = &v5[v13];
  uint64_t v15 = *v14;
  if (*v14 != -1)
  {
    BOOL v16 = 0;
    int v17 = 1;
    while (v15 != a2)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -2;
      }
      if (v18) {
        BOOL v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      int v14 = &v5[v19 & v12];
      uint64_t v15 = *v14;
      if (*v14 == -1) {
        goto LABEL_26;
      }
    }
    return;
  }
  BOOL v16 = 0;
LABEL_26:
  if (v16) {
    int v20 = v16;
  }
  else {
    int v20 = v14;
  }
  if (*v20 != a2)
  {
    if (*v20 == -2) {
      --*(_DWORD *)(a1 + 112);
    }
    else {
      ++*(_DWORD *)(a1 + 108);
    }
    *int v20 = a2;
LABEL_33:
    BOOL v21 = *(void **)a1;
    BOOL v18 = **(void **)a1 == a2;
    *(unsigned char *)(*(void *)a1 + 12) = v18;
    if (!v18)
    {
      int v22 = *(unsigned __int16 *)(a2 + 24);
      if (*((unsigned __int16 *)v21 + 4) == v22 || v22 == 2 || *((unsigned __int16 *)v21 + 5) == v22)
      {
        unsigned int v23 = *(_DWORD *)(a1 + 16);
        if (v23 >= *(_DWORD *)(a1 + 20)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a1 + 8) + 8 * v23) = a2;
        ++*(_DWORD *)(a1 + 16);
      }
    }
  }
}

void *sub_1CC13C984(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC13CA50(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      void *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC13CA50(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    uint64_t v4 = *(void **)result;
    uint64_t v5 = 16 * v3;
    do
    {
      *uint64_t v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    uint64_t v6 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      int v7 = *(_DWORD *)(result + 16) - 1;
      unsigned int v8 = v7 & ((v6 >> 4) ^ (v6 >> 9));
      uint64_t v9 = *(void *)result + 16 * v8;
      uint64_t v10 = *(void *)v9;
      if (v6 != *(void *)v9)
      {
        uint64_t v11 = 0;
        int v12 = 1;
        while (v10 != -4096)
        {
          if (v11) {
            BOOL v13 = 0;
          }
          else {
            BOOL v13 = v10 == -8192;
          }
          if (v13) {
            uint64_t v11 = v9;
          }
          unsigned int v14 = v8 + v12++;
          unsigned int v8 = v14 & v7;
          uint64_t v9 = *(void *)result + 16 * (v14 & v7);
          uint64_t v10 = *(void *)v9;
          if (v6 == *(void *)v9) {
            goto LABEL_20;
          }
        }
        if (v11) {
          uint64_t v9 = v11;
        }
      }
LABEL_20:
      *(void *)uint64_t v9 = v6;
      *(_WORD *)(v9 + 8) = *((_WORD *)a2 + 4);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t sub_1CC13CB2C(uint64_t a1, void *a2, unsigned char *a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a1 + 8 * v3) = *a2 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 != 0));
  unsigned int v4 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v4;
  return *(void *)a1 + 8 * v4 - 8;
}

uint64_t sub_1CC13CBAC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 16);
  if (4 * v8 + 4 < 3 * v9)
  {
    if (v9 + ~v8 - *(_DWORD *)(a1 + 12) <= v9 >> 3)
    {
      sub_1CC13CDC8(a1, v9);
      uint64_t v21 = 0;
      sub_1CC13CD44(*(void *)a1, *(_DWORD *)(a1 + 16), *a3, &v21);
      a2 = v21;
    }
LABEL_4:
    uint64_t v10 = *(void *)a2;
    goto LABEL_5;
  }
  sub_1CC13CDC8(a1, 2 * v9);
  uint64_t v10 = *a3;
  int v13 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
  a2 = *(void *)a1 + 144 * v14;
  uint64_t v15 = *(void *)a2;
  if (*a3 != *(void *)a2)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    while (v15 != -4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -8192;
      }
      if (v18) {
        uint64_t v16 = a2;
      }
      unsigned int v19 = v14 + v17++;
      unsigned int v14 = v19 & v13;
      a2 = *(void *)a1 + 144 * (v19 & v13);
      uint64_t v15 = *(void *)a2;
      if (v10 == *(void *)a2) {
        goto LABEL_5;
      }
    }
    if (v16) {
      a2 = v16;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)a2 = *a3;
  *(void *)(a2 + 8) = a2 + 24;
  *(void *)(a2 + 16) = 0x100000000;
  if (*(_DWORD *)(a4 + 8))
  {
    uint64_t v20 = a2;
    sub_1CC13675C(a2 + 8, (long long **)a4);
    a2 = v20;
  }
  long long v11 = *(_OWORD *)(a4 + 104);
  *(_OWORD *)(a2 + 121) = *(_OWORD *)(a4 + 113);
  *(_OWORD *)(a2 + 112) = v11;
  return a2;
}

uint64_t sub_1CC13CD44(uint64_t result, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(result + 144 * v5);
    uint64_t v7 = *v6;
    if (*v6 != a3)
    {
      int v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          int v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        uint64_t v6 = (void *)(result + 144 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_3;
        }
      }
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
LABEL_3:
  *a4 = v6;
  return result;
}

void *sub_1CC13CDC8(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(144 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC13CEA0(a1, v4, &v4[18 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 144 * v10;
    do
    {
      void *result = -4096;
      result += 18;
      v11 -= 144;
    }
    while (v11);
  }
  return result;
}

void sub_1CC13CEA0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v4 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = 144 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 18;
      v8 -= 144;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      int v9 = (long long *)*v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v10 = *(_DWORD *)(a1 + 16);
        if (v10)
        {
          int v11 = v10 - 1;
          unsigned int v12 = v11 & ((v9 >> 4) ^ (v9 >> 9));
          uint64_t v13 = *(void *)a1 + 144 * v12;
          uint64_t v14 = *(void *)v13;
          if (v9 != *(long long **)v13)
          {
            uint64_t v18 = 0;
            int v19 = 1;
            while (v14 != -4096)
            {
              if (v18) {
                BOOL v20 = 0;
              }
              else {
                BOOL v20 = v14 == -8192;
              }
              if (v20) {
                uint64_t v18 = v13;
              }
              unsigned int v21 = v12 + v19++;
              unsigned int v12 = v21 & v11;
              uint64_t v13 = *(void *)a1 + 144 * v12;
              uint64_t v14 = *(void *)v13;
              if (v9 == *(long long **)v13) {
                goto LABEL_10;
              }
            }
            if (v18) {
              uint64_t v13 = v18;
            }
          }
        }
        else
        {
          uint64_t v13 = 0;
        }
LABEL_10:
        *(void *)uint64_t v13 = v9;
        *(void *)(v13 + 8) = v13 + 24;
        *(void *)(v13 + 16) = 0x100000000;
        if (*((_DWORD *)v4 + 4)) {
          sub_1CC13675C(v13 + 8, (long long **)v4 + 1);
        }
        long long v15 = *((_OWORD *)v4 + 7);
        *(_OWORD *)(v13 + 121) = *(_OWORD *)((char *)v4 + 121);
        *(_OWORD *)(v13 + 112) = v15;
        ++*(_DWORD *)(a1 + 8);
        uint64_t v16 = (char *)v4[1];
        unsigned int v17 = *((_DWORD *)v4 + 4);
        if (v17)
        {
          uint64_t v22 = 88 * v17;
          do
          {
            unsigned int v23 = *(void **)&v16[v22 - 56];
            if (v23 != *(void **)&v16[v22 - 64])
            {
              BOOL v24 = v16;
              free(v23);
              uint64_t v16 = v24;
            }
            v22 -= 88;
          }
          while (v22);
          uint64_t v16 = (char *)v4[1];
        }
        if (v16 != (char *)(v4 + 3)) {
          free(v16);
        }
      }
      v4 += 18;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1CC13D070(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v7 = a2 - 1;
    unsigned int v8 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v4 = (void *)(a1 + 16 * v8);
    uint64_t v9 = *v4;
    if (*v4 == a3)
    {
      uint64_t v5 = 1;
    }
    else
    {
      int v10 = 0;
      int v11 = 1;
      while (v9 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v9 == -8192;
        }
        if (v12) {
          int v10 = v4;
        }
        unsigned int v13 = v8 + v11++;
        unsigned int v8 = v13 & v7;
        int v4 = (void *)(a1 + 16 * (v13 & v7));
        uint64_t v9 = *v4;
        uint64_t v5 = 1;
        if (*v4 == a3) {
          goto LABEL_3;
        }
      }
      uint64_t v5 = 0;
      if (v10) {
        int v4 = v10;
      }
    }
  }
  else
  {
    int v4 = 0;
    uint64_t v5 = 0;
  }
LABEL_3:
  *a4 = v4;
  return v5;
}

_DWORD *sub_1CC13D104(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    double result = operator new(144 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 144 * v5;
      do
      {
        *(void *)double result = -4096;
        result += 36;
        v6 -= 144;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)double result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void sub_1CC13D1A0(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = 72 * v1;
    unint64_t v3 = (void **)(*(void *)a1 + 16);
    do
    {
      uint64_t v4 = (uint64_t)*(v3 - 2);
      if (v4 != -4096 && v4 != -8192 && *v3 != *(v3 - 1))
      {
        uint64_t v5 = v3;
        uint64_t v6 = v2;
        free(*v3);
        unint64_t v3 = v5;
        uint64_t v2 = v6;
      }
      v3 += 9;
      v2 -= 72;
    }
    while (v2);
  }
}

_DWORD *sub_1CC13D214(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    double result = operator new(72 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 72 * v5;
      do
      {
        *(void *)double result = -4096;
        result += 18;
        v6 -= 72;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)double result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void *sub_1CC13D2B0(void *result)
{
  unsigned int v1 = *((_DWORD *)result + 4);
  if (v1)
  {
    uint64_t v2 = result;
    double result = v24;
    v24[0] = 2;
    v24[1] = 0;
    uint64_t v25 = -4096;
    uint64_t v26 = 0;
    unsigned int v23 = off_1F2607428;
    v20[0] = 2;
    v20[1] = 0;
    uint64_t v21 = -8192;
    uint64_t v22 = 0;
    unint64_t v3 = (void *)*v2;
    unint64_t v4 = &v3[6 * v1];
    do
    {
      uint64_t v5 = v3[3];
      if (v5 != -4096 && v5 != -8192 && v5 != 0)
      {
        unint64_t v7 = v3[1] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v7 = v3[2];
        unsigned int v8 = (unint64_t *)v3[2];
        if (v8)
        {
          *unsigned int v8 = *v8 & 7 | v7;
        }
        else
        {
          uint64_t v9 = v3[3];
          int v10 = ***(int32x2_t ****)v9;
          unint64_t v11 = (unint64_t)v10[303];
          if (v11 <= v7)
          {
            uint64_t v12 = v10[305].u32[0];
            if (v11 + 16 * v12 > v7)
            {
              unsigned int v13 = v12 - 1;
              LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
              long long v15 = (uint64_t *)(v11 + 16 * v14);
              uint64_t v16 = *v15;
              if (v9 == *v15)
              {
LABEL_19:
                uint64_t *v15 = -8192;
                v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v9 = v3[3];
              }
              else
              {
                int v17 = 1;
                while (v16 != -4096)
                {
                  int v18 = v14 + v17++;
                  uint64_t v14 = v18 & v13;
                  uint64_t v16 = *(void *)(v11 + 16 * v14);
                  if (v9 == v16)
                  {
                    long long v15 = (uint64_t *)(v11 + 16 * v14);
                    goto LABEL_19;
                  }
                }
              }
              *(unsigned char *)(v9 + 17) &= ~1u;
            }
          }
        }
      }
      v3 += 6;
    }
    while (v3 != v4);
    if (v21 != -8192 && v21 != -4096 && v21 != 0)
    {
      llvm::ValueHandleBase::RemoveFromUseList(v20);
      double result = v24;
    }
    if (v25 != -4096 && v25 != -8192)
    {
      if (v25) {
        return llvm::ValueHandleBase::RemoveFromUseList(v24);
      }
    }
  }
  return result;
}

void sub_1CC13D488(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 56 * v1;
    uint64_t v3 = *(void *)a1 + 24;
    do
    {
      uint64_t v4 = *(void *)(v3 - 24);
      if (v4 != -4096 && v4 != -8192)
      {
        uint64_t v5 = *(void **)(v3 - 16);
        if ((void *)v3 != v5) {
          free(v5);
        }
      }
      v3 += 56;
      v2 -= 56;
    }
    while (v2);
  }
}

void sub_1CC13D4F4(_DWORD *a1)
{
  int v2 = a1[2];
  sub_1CC13D5A8((uint64_t)a1);
  int v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64) {
    int v3 = 64;
  }
  if (v2) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4 == a1[4])
  {
    *((void *)a1 + 1) = 0;
    if (v4)
    {
      uint64_t v5 = *(void **)a1;
      uint64_t v6 = 40 * v4;
      do
      {
        *uint64_t v5 = -4096;
        v5 += 5;
        v6 -= 40;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)a1, 8);
    sub_1CBAEFC5C(a1, v4);
  }
}

void sub_1CC13D5A8(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 40 * v1;
    uint64_t v3 = *(void *)a1 + 24;
    do
    {
      uint64_t v4 = *(void *)(v3 - 24);
      if (v4 != -4096 && v4 != -8192)
      {
        uint64_t v5 = *(void **)(v3 - 16);
        if ((void *)v3 != v5) {
          free(v5);
        }
      }
      v3 += 40;
      v2 -= 40;
    }
    while (v2);
  }
}

void sub_1CC13D614(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 96 * v1;
    uint64_t v3 = *(void *)a1 + 64;
    do
    {
      uint64_t v4 = *(void *)(v3 - 64);
      if (v4 != -4096 && v4 != -8192)
      {
        uint64_t v5 = *(void **)(v3 - 16);
        if ((void *)v3 != v5) {
          free(v5);
        }
        if ((*(unsigned char *)(v3 - 56) & 1) == 0) {
          MEMORY[0x1D25D9CD0](*(void *)(v3 - 48), 8);
        }
      }
      v3 += 96;
      v2 -= 96;
    }
    while (v2);
  }
}

void sub_1CC13D698(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)a1 + (v1 << 6);
    uint64_t v3 = *(void *)a1 + 40;
    do
    {
      uint64_t v6 = *(void *)(v3 - 40);
      uint64_t v5 = *(void *)(v3 - 32);
      uint64_t v4 = v3 - 40;
      if ((v6 != -4096 || v5 != -4096) && (v6 != -8192 || v5 != -8192))
      {
        unint64_t v7 = *(void **)(v3 - 16);
        if ((void *)v3 != v7)
        {
          uint64_t v10 = v2;
          uint64_t v8 = v3;
          uint64_t v9 = v3 - 40;
          free(v7);
          uint64_t v3 = v8;
          uint64_t v4 = v9;
          uint64_t v2 = v10;
        }
      }
      v3 += 64;
    }
    while (v4 + 64 != v2);
  }
}

_DWORD *sub_1CC13D728(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    double result = operator new((unint64_t)v4 << 6, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = v5 << 6;
      int64x2_t v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *(int64x2_t *)double result = v7;
        result += 16;
        v6 -= 64;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)double result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void *sub_1CC13D7C0(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  unint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC13D898(a1, v4, &v4[9 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 72 * v10;
    do
    {
      void *result = -4096;
      result += 9;
      v11 -= 72;
    }
    while (v11);
  }
  return result;
}

void sub_1CC13D898(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = 72 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 9;
      v8 -= 72;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v10 = *(_DWORD *)(a1 + 16);
        if (v10)
        {
          int v11 = v10 - 1;
          unsigned int v12 = v11 & ((v9 >> 4) ^ (v9 >> 9));
          uint64_t v13 = *(void *)a1 + 72 * v12;
          uint64_t v14 = *(void *)v13;
          if (v9 != *(void *)v13)
          {
            uint64_t v15 = 0;
            int v16 = 1;
            while (v14 != -4096)
            {
              if (v15) {
                BOOL v21 = 0;
              }
              else {
                BOOL v21 = v14 == -8192;
              }
              if (v21) {
                uint64_t v15 = v13;
              }
              unsigned int v22 = v12 + v16++;
              unsigned int v12 = v22 & v11;
              uint64_t v13 = *(void *)a1 + 72 * v12;
              uint64_t v14 = *(void *)v13;
              if (v9 == *(void *)v13) {
                goto LABEL_12;
              }
            }
            if (v15) {
              uint64_t v13 = v15;
            }
          }
        }
        else
        {
          uint64_t v13 = 0;
        }
LABEL_12:
        int v17 = (void *)(v13 + 40);
        *(void *)uint64_t v13 = v9;
        *(void *)(v13 + 8) = v13 + 40;
        int v18 = (void *)v4[1];
        int v19 = (void *)v4[2];
        if (v19 == v18)
        {
          *(void *)(v13 + 16) = v17;
          uint64_t v20 = *((unsigned int *)v4 + 7);
          int v18 = (void *)v4[2];
          if (v20)
          {
            memmove(v17, v18, 8 * v20);
            int v19 = (void *)v4[1];
            int v18 = (void *)v4[2];
          }
        }
        else
        {
          *(void *)(v13 + 16) = v19;
          v4[2] = (uint64_t)v18;
          int v19 = v18;
        }
        *(void *)(v13 + 24) = v4[3];
        *(_DWORD *)(v13 + 32) = *((_DWORD *)v4 + 8);
        v4[3] = 4;
        *((_DWORD *)v4 + 8) = 0;
        ++*(_DWORD *)(a1 + 8);
        if (v18 != v19) {
          free(v18);
        }
      }
      v4 += 9;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1CC13DA28(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 9) ^ a2);
  int v7 = (void *)(v3 + 96 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -16;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      int v7 = (void *)(v3 + 96 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_17;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void sub_1CC13DAD0(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    int v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40) {
      unsigned int v2 = v6 + 1;
    }
    else {
      unsigned int v2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v18 = *(void *)(a1 + 8);
    unsigned int v19 = *(_DWORD *)(a1 + 16);
    if (v2 > 4)
    {
      *(void *)(a1 + 8) = operator new(96 * v2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CC13DD14(a1, v18, v18 + 96 * v19);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v7 = 0;
  uint64_t v8 = v20;
  do
  {
    uint64_t v9 = a1 + v7;
    uint64_t v10 = *(void *)(a1 + v7 + 8);
    if (v10 != -4 && v10 != -16)
    {
      *(void *)uint64_t v8 = v10;
      long long v12 = *(_OWORD *)(v9 + 16);
      v8[24] = *(unsigned char *)(v9 + 32);
      *(_OWORD *)(v8 + 8) = v12;
      unsigned int v13 = v8 + 64;
      *((void *)v8 + 4) = v8 + 64;
      uint64_t v14 = *(void **)(v9 + 40);
      uint64_t v15 = *(void **)(v9 + 48);
      if (v15 == v14)
      {
        *((void *)v8 + 5) = v13;
        uint64_t v16 = *(unsigned int *)(a1 + v7 + 60);
        uint64_t v14 = *(void **)(v9 + 48);
        if (v16)
        {
          memmove(v13, v14, 8 * v16);
          uint64_t v15 = *(void **)(v9 + 40);
          uint64_t v14 = *(void **)(v9 + 48);
        }
      }
      else
      {
        *((void *)v8 + 5) = v15;
        *(void *)(v9 + 48) = v14;
        uint64_t v15 = v14;
      }
      uint64_t v17 = a1 + v7;
      *((void *)v8 + 6) = *(void *)(a1 + v7 + 56);
      *((_DWORD *)v8 + 14) = *(_DWORD *)(a1 + v7 + 64);
      *(void *)(v17 + 56) = 4;
      *(_DWORD *)(v17 + 64) = 0;
      v8 += 96;
      if (v14 != v15) {
        free(v14);
      }
    }
    v7 += 96;
  }
  while (v7 != 384);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(void *)(a1 + 8) = operator new(96 * v2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v2;
  }
  sub_1CC13DD14(a1, (uint64_t)v20, (uint64_t)v8);
}

void sub_1CC13DD14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  int v6 = *(_DWORD *)a1;
  *(void *)a1 = *(_DWORD *)a1 & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(a1 + 8);
    uint64_t v9 = (void *)(a1 + 392);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    if (!v7) {
      goto LABEL_5;
    }
    uint64_t v8 = *(void **)(a1 + 8);
    uint64_t v9 = &v8[12 * v7];
  }
  do
  {
    *uint64_t v8 = -4;
    v8 += 12;
  }
  while (v8 != v9);
LABEL_5:
  if (a2 != a3)
  {
    do
    {
      unint64_t v10 = *(void *)v4;
      if (*(void *)v4 != -16 && v10 != -4)
      {
        unsigned int v19 = 0;
        sub_1CC13DA28(a1, v10, &v19);
        long long v12 = v19;
        *unsigned int v19 = *(void *)v4;
        long long v13 = *(_OWORD *)(v4 + 8);
        *((unsigned char *)v12 + 24) = *(unsigned char *)(v4 + 24);
        *(_OWORD *)(v12 + 1) = v13;
        uint64_t v14 = v12 + 8;
        v12[4] = v12 + 8;
        uint64_t v16 = *(void *)(v4 + 32);
        uint64_t v15 = *(void *)(v4 + 40);
        if (v15 == v16)
        {
          void v12[5] = v14;
          uint64_t v17 = *(unsigned int *)(v4 + 52);
          if (v17) {
            memmove(v14, *(const void **)(v4 + 40), 8 * v17);
          }
        }
        else
        {
          void v12[5] = v15;
          *(void *)(v4 + 40) = v16;
        }
        v12[6] = *(void *)(v4 + 48);
        *((_DWORD *)v12 + 14) = *(_DWORD *)(v4 + 56);
        *(void *)(v4 + 48) = 4;
        *(_DWORD *)(v4 + 56) = 0;
        *(_DWORD *)a1 += 2;
        uint64_t v18 = *(void **)(v4 + 40);
        if (v18 != *(void **)(v4 + 32)) {
          free(v18);
        }
      }
      v4 += 96;
    }
    while (v4 != a3);
  }
}

void *sub_1CC13DE5C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD4C22E4(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      void *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void *sub_1CC13DF28(uint64_t a1, uint64_t *a2)
{
  int v7 = 0;
  char v4 = sub_1CC136E28(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = sub_1CC136EBC(a1, a2, v7);
    *unint64_t v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CC13DF90(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1CC13E114((uint64_t *)a1, 2 * v6);
    uint64_t v7 = *a2;
    int v9 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
    a3 = (void *)(*(void *)a1 + 56 * v10);
    uint64_t v11 = *a3;
    if (*a2 != *a3)
    {
      long long v12 = 0;
      int v13 = 1;
      while (v11 != -4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == -8192;
        }
        if (v14) {
          long long v12 = a3;
        }
        unsigned int v15 = v10 + v13++;
        unsigned int v10 = v15 & v9;
        a3 = (void *)(*(void *)a1 + 56 * v10);
        uint64_t v11 = *a3;
        if (v7 == *a3) {
          goto LABEL_4;
        }
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      uint64_t v7 = *a3;
      goto LABEL_4;
    }
    sub_1CC13E114((uint64_t *)a1, v6);
    uint64_t v7 = *a2;
    int v16 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v17 = ((*a2 >> 4) ^ (*a2 >> 9)) & v16;
    a3 = (void *)(*(void *)a1 + 56 * v17);
    uint64_t v18 = *a3;
    if (*a2 != *a3)
    {
      long long v12 = 0;
      int v19 = 1;
      while (v18 != -4096)
      {
        if (v12) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v18 == -8192;
        }
        if (v20) {
          long long v12 = a3;
        }
        unsigned int v21 = v17 + v19++;
        unsigned int v17 = v21 & v16;
        a3 = (void *)(*(void *)a1 + 56 * v17);
        uint64_t v18 = *a3;
        if (v7 == *a3) {
          goto LABEL_4;
        }
      }
LABEL_27:
      if (v12) {
        a3 = v12;
      }
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC13E114(uint64_t *a1, int a2)
{
  unsigned int v3 = *((_DWORD *)a1 + 4);
  char v4 = (uint64_t *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  uint64_t result = operator new(56 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v12 = *((unsigned int *)a1 + 4);
    if (v12)
    {
      uint64_t v13 = 56 * v12;
      do
      {
        void *result = -4096;
        result += 7;
        v13 -= 56;
      }
      while (v13);
    }
    if (v3)
    {
      BOOL v14 = &v4[7 * v3];
      unsigned int v15 = v4;
      do
      {
        uint64_t v16 = *v15;
        if ((*v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v17 = *((_DWORD *)a1 + 4) - 1;
          unsigned int v18 = v17 & ((v16 >> 4) ^ (v16 >> 9));
          uint64_t v19 = *a1 + 56 * v18;
          uint64_t v20 = *(void *)v19;
          if (v16 != *(void *)v19)
          {
            uint64_t v21 = 0;
            int v22 = 1;
            while (v20 != -4096)
            {
              if (v21) {
                BOOL v23 = 0;
              }
              else {
                BOOL v23 = v20 == -8192;
              }
              if (v23) {
                uint64_t v21 = v19;
              }
              unsigned int v24 = v18 + v22++;
              unsigned int v18 = v24 & v17;
              uint64_t v19 = *a1 + 56 * v18;
              uint64_t v20 = *(void *)v19;
              if (v16 == *(void *)v19) {
                goto LABEL_27;
              }
            }
            if (v21) {
              uint64_t v19 = v21;
            }
          }
LABEL_27:
          *(void *)(v19 + 8) = v19 + 24;
          *(void *)uint64_t v19 = v16;
          *(void *)(v19 + 16) = 0x200000000;
          unsigned int v25 = *((_DWORD *)v15 + 4);
          uint64_t v26 = (uint64_t *)v15[1];
          if ((uint64_t *)v19 != v15 && v25 != 0)
          {
            if (v26 == v15 + 3)
            {
              if (v25 >= 3) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy((void *)(v19 + 24), v26, 16 * *((unsigned int *)v15 + 4));
              uint64_t v26 = (uint64_t *)v15[1];
              *(_DWORD *)(v19 + 16) = v25;
            }
            else
            {
              *(void *)(v19 + 8) = v26;
              int v28 = *((_DWORD *)v15 + 5);
              *(_DWORD *)(v19 + 16) = v25;
              *(_DWORD *)(v19 + 20) = v28;
              v15[1] = (uint64_t)(v15 + 3);
              *((_DWORD *)v15 + 5) = 0;
              uint64_t v26 = v15 + 3;
            }
            *((_DWORD *)v15 + 4) = 0;
          }
          ++*((_DWORD *)a1 + 2);
          if (v26 != v15 + 3) {
            free(v26);
          }
        }
        v15 += 7;
      }
      while (v15 != v14);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v10 = *((unsigned int *)a1 + 4);
  if (v10)
  {
    uint64_t v11 = 56 * v10;
    do
    {
      void *result = -4096;
      result += 7;
      v11 -= 56;
    }
    while (v11);
  }
  return result;
}

BOOL sub_1CC13E39C(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_1CD497DD0((_DWORD *)a1, a2);
  if (result)
  {
    BOOL result = 0;
    if (a2)
    {
      if (*(unsigned char *)(a2 + 16) == 84)
      {
        uint64_t v5 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 8));
        if (v5)
        {
          **(void **)(a1 + 16) = v5;
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

void sub_1CC13E410()
{
}

__n128 sub_1CC13E424(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x20uLL);
  *(void *)unsigned int v2 = &unk_1F2607680;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CC13E478(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2607680;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CC13E4B0(uint64_t a1, unsigned int *a2)
{
  return llvm::ScalarEvolution::isKnownViaNonRecursiveReasoning(*(llvm::ScalarEvolution **)(a1 + 8), *a2, **(void **)(a1 + 16), **(void **)(a1 + 24));
}

unsigned char *sub_1CC13E4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = (a2 - *(void *)a1) >> 3;
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  if (*(void *)a1 + 8 * v8 == a2)
  {
    if (a3 == a4)
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = a3;
      do
      {
        ++v9;
        uint64_t v10 = *(void *)(v10 + 8);
      }
      while (v10 != a4);
    }
    if (v9 + v8 > (unint64_t)*(unsigned int *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (a3 != a4)
    {
      uint64_t v11 = (void *)(v6 + 8 * v8);
      do
      {
        *v11++ = *(void *)(v5 + 24);
        uint64_t v5 = *(void *)(v5 + 8);
      }
      while (v5 != a4);
      uint64_t v6 = *(void *)a1;
    }
    *(_DWORD *)(a1 + 8) = v8 + v9;
    return (unsigned char *)(v6 + 8 * v7);
  }
  else
  {
    if (a3 == a4)
    {
      unint64_t v13 = 0;
    }
    else
    {
      unint64_t v13 = 0;
      uint64_t v14 = a3;
      do
      {
        ++v13;
        uint64_t v14 = *(void *)(v14 + 8);
      }
      while (v14 != a4);
    }
    if (v13 + v8 > *(unsigned int *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v15 = (char *)(v6 + 8 * v8);
    unint64_t __src = (unsigned char *)(v6 + 8 * v7);
    unint64_t v16 = (v15 - __src) >> 3;
    if (v16 >= v13)
    {
      sub_1CD4570C8(a1, &v15[-8 * v13], (char *)(v6 + 8 * v8));
      if (&v15[-8 * v13] != __src) {
        memmove(&__src[8 * v13], __src, &v15[-8 * v13] - __src);
      }
      if (v5 != a4)
      {
        unsigned int v18 = __src;
        do
        {
          *v18++ = *(void *)(v5 + 24);
          uint64_t v5 = *(void *)(v5 + 8);
        }
        while (v5 != a4);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = v8 + v13;
      if (v7 != v8)
      {
        int v17 = (void *)(v6 + 8 * v7);
        memcpy((void *)(v6 + 8 * (v8 + v13) - 8 * v16), __src, v15 - __src);
        do
        {
          *v17++ = *(void *)(v5 + 24);
          uint64_t v5 = *(void *)(v5 + 8);
          --v16;
        }
        while (v16);
      }
      while (v5 != a4)
      {
        *(void *)unsigned int v15 = *(void *)(v5 + 24);
        v15 += 8;
        uint64_t v5 = *(void *)(v5 + 8);
      }
    }
    return __src;
  }
}

void *sub_1CC13E6C8(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1CC13E84C((uint64_t *)a1, 2 * v6);
    uint64_t v7 = *a2;
    int v9 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
    a3 = (void *)(*(void *)a1 + 40 * v10);
    uint64_t v11 = *a3;
    if (*a2 != *a3)
    {
      uint64_t v12 = 0;
      int v13 = 1;
      while (v11 != -4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == -8192;
        }
        if (v14) {
          uint64_t v12 = a3;
        }
        unsigned int v15 = v10 + v13++;
        unsigned int v10 = v15 & v9;
        a3 = (void *)(*(void *)a1 + 40 * v10);
        uint64_t v11 = *a3;
        if (v7 == *a3) {
          goto LABEL_4;
        }
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      uint64_t v7 = *a3;
      goto LABEL_4;
    }
    sub_1CC13E84C((uint64_t *)a1, v6);
    uint64_t v7 = *a2;
    int v16 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v17 = ((*a2 >> 4) ^ (*a2 >> 9)) & v16;
    a3 = (void *)(*(void *)a1 + 40 * v17);
    uint64_t v18 = *a3;
    if (*a2 != *a3)
    {
      uint64_t v12 = 0;
      int v19 = 1;
      while (v18 != -4096)
      {
        if (v12) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v18 == -8192;
        }
        if (v20) {
          uint64_t v12 = a3;
        }
        unsigned int v21 = v17 + v19++;
        unsigned int v17 = v21 & v16;
        a3 = (void *)(*(void *)a1 + 40 * v17);
        uint64_t v18 = *a3;
        if (v7 == *a3) {
          goto LABEL_4;
        }
      }
LABEL_27:
      if (v12) {
        a3 = v12;
      }
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC13E84C(uint64_t *a1, int a2)
{
  unsigned int v3 = *((_DWORD *)a1 + 4);
  char v4 = (uint64_t *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  __n128 result = operator new(40 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v10 = *((unsigned int *)a1 + 4);
    if (v10)
    {
      uint64_t v11 = 40 * v10;
      do
      {
        void *result = -4096;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = &v4[5 * v3];
      int v13 = v4;
      do
      {
        uint64_t v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v15 = *((_DWORD *)a1 + 4) - 1;
          unsigned int v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
          uint64_t v17 = *a1 + 40 * v16;
          uint64_t v18 = *(void *)v17;
          if (v14 != *(void *)v17)
          {
            uint64_t v19 = 0;
            int v20 = 1;
            while (v18 != -4096)
            {
              if (v19) {
                BOOL v21 = 0;
              }
              else {
                BOOL v21 = v18 == -8192;
              }
              if (v21) {
                uint64_t v19 = v17;
              }
              unsigned int v22 = v16 + v20++;
              unsigned int v16 = v22 & v15;
              uint64_t v17 = *a1 + 40 * v16;
              uint64_t v18 = *(void *)v17;
              if (v14 == *(void *)v17) {
                goto LABEL_23;
              }
            }
            if (v19) {
              uint64_t v17 = v19;
            }
          }
LABEL_23:
          *(void *)(v17 + 8) = v17 + 24;
          *(void *)uint64_t v17 = v14;
          *(void *)(v17 + 16) = 0x200000000;
          unsigned int v23 = *((_DWORD *)v13 + 4);
          unsigned int v24 = (uint64_t *)v13[1];
          if ((uint64_t *)v17 != v13 && v23 != 0)
          {
            if (v24 == v13 + 3)
            {
              if (v23 >= 3) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy((void *)(v17 + 24), v24, 8 * *((unsigned int *)v13 + 4));
              *(_DWORD *)(v17 + 16) = v23;
              unsigned int v24 = (uint64_t *)v13[1];
            }
            else
            {
              *(void *)(v17 + 8) = v24;
              int v26 = *((_DWORD *)v13 + 5);
              *(_DWORD *)(v17 + 16) = v23;
              *(_DWORD *)(v17 + 20) = v26;
              v13[1] = (uint64_t)(v13 + 3);
              *((_DWORD *)v13 + 5) = 0;
              unsigned int v24 = v13 + 3;
            }
            *((_DWORD *)v13 + 4) = 0;
          }
          ++*((_DWORD *)a1 + 2);
          if (v24 != v13 + 3) {
            free(v24);
          }
        }
        v13 += 5;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v27 = *((unsigned int *)a1 + 4);
  if (v27)
  {
    uint64_t v28 = 40 * v27;
    do
    {
      void *result = -4096;
      result += 5;
      v28 -= 40;
    }
    while (v28);
  }
  return result;
}

uint64_t sub_1CC13EAD4(uint64_t result, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(result + 40 * v5);
    uint64_t v7 = *v6;
    if (*v6 != a3)
    {
      unsigned int v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          unsigned int v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        unint64_t v6 = (void *)(result + 40 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_14;
        }
      }
      if (v8) {
        unint64_t v6 = v8;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
  }
LABEL_14:
  *a4 = v6;
  return result;
}

uint64_t *sub_1CC13EB54(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1CC13EC90((uint64_t *)a1, v6);
      unsigned int v16 = 0;
      sub_1CC13EAD4(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
LABEL_4:
    uint64_t v7 = *a3;
    goto LABEL_5;
  }
  sub_1CC13EC90((uint64_t *)a1, 2 * v6);
  uint64_t v7 = *a2;
  int v9 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(void *)a1 + 40 * v10);
  uint64_t v11 = *a3;
  if (*a2 != *a3)
  {
    uint64_t v12 = 0;
    int v13 = 1;
    while (v11 != -4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == -8192;
      }
      if (v14) {
        uint64_t v12 = a3;
      }
      unsigned int v15 = v10 + v13++;
      unsigned int v10 = v15 & v9;
      a3 = (uint64_t *)(*(void *)a1 + 40 * v10);
      uint64_t v11 = *a3;
      if (v7 == *a3) {
        goto LABEL_5;
      }
    }
    if (v12) {
      a3 = v12;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC13EC90(uint64_t *a1, int a2)
{
  unsigned int v3 = *((_DWORD *)a1 + 4);
  int v4 = (uint64_t *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  __n128 result = operator new(40 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v10 = *((unsigned int *)a1 + 4);
    if (v10)
    {
      uint64_t v11 = 40 * v10;
      do
      {
        void *result = -4096;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = &v4[5 * v3];
      int v13 = v4;
      do
      {
        uint64_t v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v15 = *((_DWORD *)a1 + 4) - 1;
          unsigned int v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
          uint64_t v17 = *a1 + 40 * v16;
          uint64_t v18 = *(void *)v17;
          if (v14 != *(void *)v17)
          {
            uint64_t v19 = 0;
            int v20 = 1;
            while (v18 != -4096)
            {
              if (v19) {
                BOOL v21 = 0;
              }
              else {
                BOOL v21 = v18 == -8192;
              }
              if (v21) {
                uint64_t v19 = v17;
              }
              unsigned int v22 = v16 + v20++;
              unsigned int v16 = v22 & v15;
              uint64_t v17 = *a1 + 40 * v16;
              uint64_t v18 = *(void *)v17;
              if (v14 == *(void *)v17) {
                goto LABEL_23;
              }
            }
            if (v19) {
              uint64_t v17 = v19;
            }
          }
LABEL_23:
          *(void *)(v17 + 8) = v17 + 24;
          *(void *)uint64_t v17 = v14;
          *(void *)(v17 + 16) = 0x200000000;
          unsigned int v23 = *((_DWORD *)v13 + 4);
          unsigned int v24 = (uint64_t *)v13[1];
          if ((uint64_t *)v17 != v13 && v23 != 0)
          {
            if (v24 == v13 + 3)
            {
              if (v23 >= 3) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy((void *)(v17 + 24), v24, 8 * *((unsigned int *)v13 + 4));
              *(_DWORD *)(v17 + 16) = v23;
              unsigned int v24 = (uint64_t *)v13[1];
            }
            else
            {
              *(void *)(v17 + 8) = v24;
              int v26 = *((_DWORD *)v13 + 5);
              *(_DWORD *)(v17 + 16) = v23;
              *(_DWORD *)(v17 + 20) = v26;
              v13[1] = (uint64_t)(v13 + 3);
              *((_DWORD *)v13 + 5) = 0;
              unsigned int v24 = v13 + 3;
            }
            *((_DWORD *)v13 + 4) = 0;
          }
          ++*((_DWORD *)a1 + 2);
          if (v24 != v13 + 3) {
            free(v24);
          }
        }
        v13 += 5;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v27 = *((unsigned int *)a1 + 4);
  if (v27)
  {
    uint64_t v28 = 40 * v27;
    do
    {
      void *result = -4096;
      result += 5;
      v28 -= 40;
    }
    while (v28);
  }
  return result;
}