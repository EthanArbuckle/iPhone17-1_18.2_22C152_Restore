uint64_t sub_1CBA954A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  uint64_t v6;

  result = 0;
  v4 = *(unsigned __int16 **)(a2 + 16);
  if ((v4[8] & 0x10) != 0)
  {
    v5 = *(unsigned __int16 **)(a3 + 16);
    if ((*((void *)v5 + 2) & 2) != 0)
    {
      if (*v5 - 1 <= 1 && (*(unsigned char *)(*(void *)(a3 + 32) + 48) & 0x10) != 0) {
        return 0;
      }
      v6 = *((void *)v5 + 1);
      if ((*(_WORD *)(a3 + 44) & 0xC) != 0 && (*(_WORD *)(a3 + 44) & 4) == 0)
      {
        if ((v6 & 0x100000) == 0)
        {
          result = 0;
          while ((*(_WORD *)(a3 + 44) & 8) != 0)
          {
            a3 = *(void *)(a3 + 8);
            if ((*(unsigned char *)(*(void *)(a3 + 16) + 10) & 0x10) != 0) {
              return result;
            }
          }
          return (*(unsigned __int8 *)(*(void *)(a2 + 32) + 32 * sub_1CBC7A3F8(*v4, 0x16u) + 16) >> 3) & 1;
        }
      }
      else if ((v6 & 0x100000) == 0)
      {
        return (*(unsigned __int8 *)(*(void *)(a2 + 32) + 32 * sub_1CBC7A3F8(*v4, 0x16u) + 16) >> 3) & 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CBA9556C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned char *)(*(void *)(a2 + 16) + 16) & 0x10) == 0) {
    return 0;
  }
  if ((*(void *)(*(void *)(a3 + 16) + 16) & 0x10) == 0) {
    return 0;
  }
  int v4 = sub_1CBA95978(a2);
  int v5 = sub_1CBA95978(a3);
  uint64_t result = 1;
  if (v4 != 2 && v4 != v5) {
    return 0;
  }
  return result;
}

BOOL sub_1CBA955D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (a4 - 3) < 3;
}

BOOL sub_1CBA955E4(uint64_t a1, uint64_t a2)
{
  return **(unsigned __int16 **)(a2 + 16) - 797 < 2;
}

BOOL sub_1CBA955FC(uint64_t a1, uint64_t a2)
{
  if (!a2 || (uint64_t v3 = a2, (*(unsigned char *)a2 & 4) == 0))
  {
    uint64_t v3 = a2;
    if ((*(_WORD *)(a2 + 44) & 8) != 0)
    {
      uint64_t v3 = a2;
      do
        uint64_t v3 = *(void *)(v3 + 8);
      while ((*(_WORD *)(v3 + 44) & 8) != 0);
    }
  }
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t v5 = *(void *)(a2 + 24);
  if (v4 != v5 + 48)
  {
    v6 = *(unsigned __int16 **)(v4 + 16);
    int v7 = *v6;
    if (**(unsigned __int16 **)(a2 + 16) - 8267 <= 9 && (v7 - 8267) < 0xA) {
      return 1;
    }
    BOOL v9 = (v7 - 9) > 0x3C || ((1 << (v7 - 9)) & 0x1000000000000605) == 0;
    BOOL v10 = !v9 || v7 == 0;
    if (!v10 && (v6[4] & 0x10) == 0 && (v6[8] & 1) == 0) {
      return 0;
    }
  }
  if (*(void *)(v5 + 56) == a2) {
    return 0;
  }
  v11 = *(unsigned char **)(a2 + 16);
  int v12 = *(unsigned __int16 *)v11;
  BOOL v13 = (v12 - 9) > 0x3C || ((1 << (v12 - 9)) & 0x1000000000000605) == 0;
  BOOL v14 = !v13 || v12 == 0;
  if (!v14 && (v11[8] & 0x10) == 0 && (v11[16] & 1) == 0) {
    return 0;
  }
  if ((v11[9] & 0x20) != 0) {
    return 1;
  }
  unsigned __int16 v15 = v12 - 4566;
  if (v15 < 0x20u && ((0xC0005FFF >> v15) & 1) != 0) {
    return 1;
  }
  uint64_t v16 = (*(uint64_t (**)(void, void))(**(void **)(*(void *)(v5 + 32) + 8) + 16))(*(void *)(*(void *)(v5 + 32) + 8), **(void **)(v5 + 32));
  unint64_t v17 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (!v17 || (*(unsigned char *)v17 & 4) == 0)
  {
    while ((*(_WORD *)(v17 + 44) & 4) != 0)
      unint64_t v17 = *(void *)v17 & 0xFFFFFFFFFFFFFFF8;
  }
  if (*(unsigned char *)(v16 + 318))
  {
    v18 = *(unsigned __int16 **)(v17 + 16);
    int v19 = *v18;
    BOOL v20 = (v19 - 4566) > 0x1F || ((1 << (v19 + 42)) & 0xC0005FFF) == 0;
    if (v20 && (*((unsigned char *)v18 + 9) & 0x20) == 0) {
      return 0;
    }
    BOOL v21 = (v19 - 8188) > 0x1F || ((1 << (v19 + 4)) & 0xC0300C03) == 0;
    unsigned int v22 = v19 - 4596;
    if (!v21 || v22 < 2) {
      return 0;
    }
    int v24 = *(_DWORD *)(*(void *)(v17 + 32) + 4);
    unsigned int NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(a2);
    if (NumExplicitOperands >= 2)
    {
      uint64_t v26 = NumExplicitOperands - 1;
      v27 = (_DWORD *)(*(void *)(a2 + 32) + 36);
      BOOL result = 1;
      while (*((unsigned char *)v27 - 4) || *v27 == v24)
      {
        v27 += 8;
        if (!--v26) {
          return result;
        }
      }
      return 0;
    }
    return 1;
  }
  unsigned int v29 = llvm::MachineInstr::getNumExplicitOperands(a2);
  uint64_t v30 = 0;
  if (v29 <= 1) {
    unsigned int v31 = 1;
  }
  else {
    unsigned int v31 = v29;
  }
  uint64_t v32 = 32 * v31;
  do
  {
    BOOL result = v32 == v30 + 32;
    if (v32 == v30 + 32) {
      break;
    }
    int v33 = *(unsigned __int8 *)(*(void *)(a2 + 32) + v30 + 32);
    v30 += 32;
  }
  while (v33);
  return result;
}

uint64_t sub_1CBA95894()
{
  return 1;
}

uint64_t sub_1CBA9589C()
{
  return 0;
}

uint64_t sub_1CBA958A4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)((*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8), *(void *)a2)+ 299))return 0xFFFFFFFFLL; {
  else
  }
    return 15;
}

uint64_t sub_1CBA958F0()
{
  return 10;
}

uint64_t sub_1CBA958F8()
{
  return 0;
}

BOOL sub_1CBA95900(uint64_t a1, uint64_t a2)
{
  return sub_1CBA95978(a2) == 2;
}

BOOL sub_1CBA95924(uint64_t a1, uint64_t a2)
{
  if (**(unsigned __int16 **)(a2 + 16) - 609 <= 0x1F && (uint64_t v2 = *(void *)(a2 + 32), *(unsigned char *)v2 == 4)) {
    return *(_DWORD *)(*(void *)(v2 + 16) + 24) <= *(_DWORD *)(*(void *)(a2 + 24) + 24);
  }
  else {
    return 0;
  }
}

uint64_t sub_1CBA9596C(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 32) + 16);
}

uint64_t sub_1CBA95978(uint64_t a1)
{
  v1 = *(unsigned __int16 **)(a1 + 16);
  if ((v1[8] & 0x10) == 0) {
    return 0;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 32) + 32 * sub_1CBC7A3F8(*v1, 0x16u) + 16) & 8) != 0) {
    return 2;
  }
  return 1;
}

uint64_t sub_1CBA959D4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a1 + 1 == (uint64_t *)(a1[1] & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v4 = (uint64_t *)a1[2];
    llvm::ilist_traits<llvm::MachineInstr>::addNodeToList(a1, a3);
  }
  else
  {
    uint64_t v4 = *(uint64_t **)(a2 + 8);
    uint64_t v5 = *a1;
    *(void *)(a3 + 24) = *a1;
    uint64_t v6 = *(void *)(v5 + 32);
    uint64_t v7 = *(unsigned int *)(a3 + 40);
    if (v7)
    {
      uint64_t v11 = *(void *)(a3 + 32);
      uint64_t v12 = *(void *)(v6 + 40);
      uint64_t v13 = 32 * v7;
      do
      {
        if (!*(unsigned char *)v11)
        {
          uint64_t v14 = *(unsigned int *)(v11 + 4);
          if ((int)v14 >= 0) {
            unsigned __int16 v15 = (uint64_t *)(*(void *)(v12 + 272) + 8 * v14);
          }
          else {
            unsigned __int16 v15 = (uint64_t *)(*(void *)(v12 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
          }
          uint64_t v16 = *v15;
          if (*v15)
          {
            uint64_t v17 = *(void *)(v16 + 16);
            *(void *)(v16 + 16) = v11;
            *(void *)(v11 + 16) = v17;
            if (*(unsigned char *)(v11 + 3))
            {
              *(void *)(v11 + 24) = v16;
            }
            else
            {
              *(void *)(v11 + 24) = 0;
              unsigned __int16 v15 = (uint64_t *)(v17 + 24);
            }
          }
          else
          {
            *(void *)(v11 + 16) = v11;
            *(void *)(v11 + 24) = 0;
          }
          *unsigned __int16 v15 = v11;
        }
        v11 += 32;
        v13 -= 32;
      }
      while (v13);
    }
    uint64_t v8 = *(void *)(v6 + 728);
    if (v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 24))(v8, a3);
    }
  }
  unint64_t v9 = *v4 & 0xFFFFFFFFFFFFFFF8;
  *(void *)a3 = v9 | *(void *)a3 & 7;
  *(void *)(a3 + 8) = v4;
  *(void *)(v9 + 8) = a3;
  *uint64_t v4 = *v4 & 7 | a3;
  return a3;
}

uint64_t sub_1CBA95B10()
{
  return __cxa_atexit((void (*)(void *))nullsub_233, &off_1EC7DF9E0, &dword_1CB82C000);
}

void sub_1CBA95B34(llvm *a1)
{
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachinePostDominatorTreePass(a1, v2);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  operator new();
}

uint64_t sub_1CBA95BE4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCBFD70;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25F53D8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBFD78, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBA95B34;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCBFD78, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CBA95CDC()
{
}

void sub_1CBA95D18(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBA95DCC(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CBA95E78(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachinePostDominatorTree::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CBA95F3C()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  v840 = v1;
  uint64_t v2 = v0;
  v932[209] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(v0 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::MachineDominatorTree::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  v842 = (void ***)(*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::MachineDominatorTree::ID);
  uint64_t v7 = *(uint64_t **)(v2 + 8);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (v8 == v9)
  {
LABEL_9:
    uint64_t v10 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v8 != &llvm::MachinePostDominatorTree::ID)
    {
      v8 += 16;
      if (v8 == v9) {
        goto LABEL_9;
      }
    }
    uint64_t v10 = *(void *)(v8 + 8);
  }
  uint64_t v847 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v10 + 96))(v10, &llvm::MachinePostDominatorTree::ID);
  uint64_t v11 = *(uint64_t **)(v2 + 8);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  if (v12 == v13)
  {
LABEL_14:
    uint64_t v14 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v12 != &llvm::MachineLoopInfo::ID)
    {
      v12 += 16;
      if (v12 == v13) {
        goto LABEL_14;
      }
    }
    uint64_t v14 = *(void *)(v12 + 8);
  }
  uint64_t v844 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v14 + 96))(v14, &llvm::MachineLoopInfo::ID);
  unsigned __int16 v15 = *(uint64_t **)(v2 + 8);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  if (v16 == v17)
  {
LABEL_19:
    uint64_t v18 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v16 != &llvm::FunctionGroupInfoWrapperPass::ID)
    {
      v16 += 16;
      if (v16 == v17) {
        goto LABEL_19;
      }
    }
    uint64_t v18 = *(void *)(v16 + 8);
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v18 + 96))(v18, &llvm::FunctionGroupInfoWrapperPass::ID);
  unsigned int v20 = ((*(unsigned __int16 *)(*v840 + 18) >> 4) & 0x3FF) - 101;
  BOOL v21 = v20 > 7;
  int v22 = (1 << v20) & 0x8D;
  BOOL v23 = v21 || v22 == 0;
  if (v23) {
    return 0;
  }
  uint64_t v24 = *(void *)(v19 + 32);
  v25 = *(llvm::Module **)(*v840 + 40);
  __s1 = "agx.prid";
  LOWORD(v930[0]) = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v25, (const char **)&__s1);
  if (NamedMetadata && (v27 = *(uint64_t **)(NamedMetadata + 48), uint64_t v28 = *((unsigned int *)v27 + 2), v28))
  {
    unsigned int v29 = 0;
    unsigned int v30 = 0;
    int v31 = 0;
    uint64_t v32 = *v27;
    do
    {
      int v33 = (uint64_t *)(*(void *)v32 - 8 * *(unsigned int *)(*(void *)v32 + 8));
      uint64_t v34 = *v33;
      if (*v33)
      {
        if (!*(unsigned char *)v34)
        {
          uint64_t v35 = *(void *)(v34 + 8);
          if (*(void *)v35 == 5)
          {
            int v36 = *(_DWORD *)(v35 + 24);
            int v37 = *(unsigned __int8 *)(v35 + 28);
            if (v36 == 1702390118 && v37 == 100)
            {
              uint64_t v39 = *(void *)(v33[2] + 128);
              v40 = (void *)(v39 + 24);
              if (*(_DWORD *)(v39 + 32) >= 0x41u) {
                v40 = (void *)*v40;
              }
              uint64_t v41 = *(void *)(v33[4] + 128);
              v42 = (void *)(v41 + 24);
              if (*(_DWORD *)(v41 + 32) >= 0x41u) {
                v42 = (void *)*v42;
              }
              uint64_t v43 = *(void *)(v33[6] + 128);
              v44 = (void *)(v43 + 24);
              if (*(_DWORD *)(v43 + 32) >= 0x41u) {
                v44 = (void *)*v44;
              }
              unsigned int v29 = *(_DWORD *)v40;
              unsigned int v30 = *(_DWORD *)v42;
              int v31 = *(_DWORD *)v44;
            }
          }
        }
      }
      v32 += 8;
      --v28;
    }
    while (v28);
  }
  else
  {
    int v31 = 0;
    unsigned int v30 = 0;
    unsigned int v29 = 0;
  }
  v45 = (unsigned __int8 *)v840[2];
  if (*(_DWORD *)(*(void *)(*(void *)(v847 + 248) + 72) + 32) != 1)
  {
    uint64_t v53 = (*(uint64_t (**)(void))(*(void *)v45 + 104))(v840[2]);
    v54 = (void *)v840[41];
    v55 = (unint64_t *)v54[7];
    uint64_t v56 = *(void *)(v53 + 8) + 231648;
    v57 = (llvm::MachineFunction *)v54[4];
    v897 = 0;
    MachineInstr = llvm::MachineFunction::CreateMachineInstr(v57, v56, (unsigned __int8 **)&v897, 0);
    if (v897)
    {
      int v793 = *(unsigned __int8 *)v897;
      if ((v793 - 4) > 0x1E)
      {
        if ((v793 - 3) >= 0xFFFFFFFE) {
          v814 = v897;
        }
        else {
          v814 = 0;
        }
        if ((v793 - 3) < 0xFFFFFFFE)
        {
          if (v793 == 3) {
            *((void *)v897 + 1) = 0;
          }
          goto LABEL_55;
        }
        unint64_t v795 = (unint64_t)v814 + 8;
      }
      else
      {
        if ((*((unsigned char *)v897 + 1) & 0x7F) != 2 && !*((_DWORD *)v897 + 3)) {
          goto LABEL_55;
        }
        uint64_t v794 = *((void *)v897 + 2);
        if ((v794 & 4) == 0) {
          goto LABEL_55;
        }
        unint64_t v795 = v794 & 0xFFFFFFFFFFFFFFF8;
        if (!v795) {
          goto LABEL_55;
        }
      }
      __s1 = &v897;
      sub_1CC5FA668(v795 + 16, &__s1);
    }
LABEL_55:
    uint64_t v59 = v54[5];
    *((void *)MachineInstr + 3) = v59;
    uint64_t v60 = *(void *)(v59 + 32);
    uint64_t v61 = *((unsigned int *)MachineInstr + 10);
    if (v61)
    {
      uint64_t v272 = *((void *)MachineInstr + 4);
      uint64_t v273 = *(void *)(v60 + 40);
      uint64_t v274 = 32 * v61;
      do
      {
        if (!*(unsigned char *)v272)
        {
          uint64_t v275 = *(unsigned int *)(v272 + 4);
          if ((int)v275 >= 0) {
            v276 = (uint64_t *)(*(void *)(v273 + 272) + 8 * v275);
          }
          else {
            v276 = (uint64_t *)(*(void *)(v273 + 24) + 16 * (v275 & 0x7FFFFFFF) + 8);
          }
          uint64_t v277 = *v276;
          if (*v276)
          {
            uint64_t v278 = *(void *)(v277 + 16);
            *(void *)(v277 + 16) = v272;
            *(void *)(v272 + 16) = v278;
            if (*(unsigned char *)(v272 + 3))
            {
              *(void *)(v272 + 24) = v277;
            }
            else
            {
              *(void *)(v272 + 24) = 0;
              v276 = (uint64_t *)(v278 + 24);
            }
          }
          else
          {
            *(void *)(v272 + 16) = v272;
            *(void *)(v272 + 24) = 0;
          }
          uint64_t *v276 = v272;
        }
        v272 += 32;
        v274 -= 32;
      }
      while (v274);
    }
    uint64_t v62 = *(void *)(v60 + 728);
    if (v62) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v62 + 24))(v62, MachineInstr);
    }
    unint64_t v63 = *v55 & 0xFFFFFFFFFFFFFFF8;
    *(void *)MachineInstr = v63 | *(void *)MachineInstr & 7;
    *((void *)MachineInstr + 1) = v55;
    *(void *)(v63 + 8) = MachineInstr;
    unint64_t *v55 = *v55 & 7 | (unint64_t)MachineInstr;
    uint64_t v64 = 1;
    LODWORD(__s1) = 1;
    v926 = 0;
    uint64_t v927 = 1023;
    llvm::MachineInstr::addOperand(MachineInstr, v57, (const llvm::MachineOperand *)&__s1);
    LODWORD(__s1) = 1;
    v926 = 0;
    uint64_t v927 = 3;
    llvm::MachineInstr::addOperand(MachineInstr, v57, (const llvm::MachineOperand *)&__s1);
    return v64;
  }
  for (uint64_t i = 0; i != 880; i += 80)
  {
    v47 = &v865[i];
    void *v47 = &v865[i + 16];
    v47[1] = 0x400000000;
  }
  unsigned __int8 v871 = 0;
  long long v867 = 0u;
  long long v868 = 0u;
  long long v869 = 0u;
  unsigned int v48 = 62;
  v49 = v840 + 40;
  do
  {
    unsigned int v50 = v48;
    v49 = (void *)v49[1];
    ++v48;
  }
  while (v49 != v840 + 40);
  v845 = v840 + 40;
  unsigned int v51 = v50 - 62;
  unint64_t v52 = v48 >> 6;
  v891 = (char *)v892 + 8;
  DWORD1(v892[0]) = 6;
  if (v52 >= 7)
  {
    LODWORD(v892[0]) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v48 >> 6) {
    bzero((char *)v892 + 8, 8 * v52);
  }
  LODWORD(v892[0]) = v52;
  DWORD2(v893) = v51;
  uint64_t v65 = v840[6];
  if (!v65)
  {
    uint64_t v65 = (*(uint64_t (**)(void, void *, void *))(*(void *)v840[1] + 216))(v840[1], v840 + 16, v840);
    v840[6] = v65;
  }
  if (!*(unsigned char *)(v65 + 432))
  {
    sub_1CD10B93C(*(llvm::Module **)(*v840 + 40), v65 + 384, v65 + 208, v65 + 408);
    *(unsigned char *)(v65 + 432) = 1;
  }
  uint64_t v66 = *(void *)(*v840 + 40);
  v872[1] = 0;
  v872[0] = 0;
  int v873 = 0;
  sub_1CBA9B7F4((uint64_t)v872, v65 + 384);
  v889[1] = 0;
  v889[0] = 0;
  unsigned int v890 = 0;
  uint64_t v888 = 0;
  uint64_t v67 = *(void *)(v65 + 384);
  uint64_t v854 = v65;
  uint64_t v68 = *(unsigned int *)(v65 + 400);
  uint64_t v69 = v67 + (v68 << 6);
  v843 = v45;
  unint64_t v837 = __PAIR64__(v29, v30);
  int v839 = v31;
  uint64_t v838 = v24;
  if (*(_DWORD *)(v65 + 392))
  {
    if (v68)
    {
      uint64_t v70 = v68 << 6;
      uint64_t v71 = *(void *)(v65 + 384);
      while ((*(void *)v71 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v71 += 64;
        v70 -= 64;
        if (!v70) {
          goto LABEL_69;
        }
      }
    }
    else
    {
      uint64_t v71 = *(void *)(v65 + 384);
    }
  }
  else
  {
LABEL_69:
    uint64_t v71 = v67 + (v68 << 6);
  }
  uint64_t v72 = v67 + ((unint64_t)v68 << 6);
  if (v71 != v72)
  {
    uint64_t v859 = v67 + ((unint64_t)v68 << 6);
    while (1)
    {
      v902 = *(unsigned __int8 **)v71;
      v903 = &v905;
      uint64_t v904 = 0x100000000;
      if (*(_DWORD *)(v71 + 16)) {
        sub_1CBA9B97C((uint64_t)&v903, v71 + 8);
      }
      v906 = v908;
      uint64_t v907 = 0x200000000;
      if (*(_DWORD *)(v71 + 40)) {
        sub_1CBA9B97C((uint64_t)&v906, v71 + 32);
      }
      v73 = v902;
      if (!*((void *)v902 + 1)) {
        goto LABEL_161;
      }
      __int16 v887 = 0;
      int v886 = 0;
      if ((v902[34] & 0x40) == 0) {
        goto LABEL_86;
      }
      uint64_t v74 = ***(void ***)v902;
      __s1 = v902;
      int v75 = *(_DWORD *)(v74 + 2520);
      if (!v75) {
        break;
      }
      uint64_t v76 = *(void *)(v74 + 2504);
      int v77 = v75 - 1;
      unsigned int v78 = v77 & ((v902 >> 4) ^ (v902 >> 9));
      v79 = (unsigned __int8 **)(v76 + 24 * v78);
      v80 = *v79;
      if (*v79 != v902)
      {
        v140 = 0;
        int v141 = 1;
        while (v80 != (unsigned __int8 *)-4096)
        {
          if (v140) {
            BOOL v142 = 0;
          }
          else {
            BOOL v142 = v80 == (unsigned __int8 *)-8192;
          }
          if (v142) {
            v140 = v79;
          }
          unsigned int v143 = v78 + v141++;
          unsigned int v78 = v143 & v77;
          v79 = (unsigned __int8 **)(v76 + 24 * v78);
          v80 = *v79;
          if (*v79 == v902) {
            goto LABEL_81;
          }
        }
        if (v140) {
          v152 = v140;
        }
        else {
          v152 = v79;
        }
        goto LABEL_206;
      }
LABEL_81:
      if (v79[2] == (unsigned __int8 *)15)
      {
        v81 = v79[1];
        uint64_t v82 = *(void *)v81;
        uint64_t v83 = *(void *)(v81 + 7);
        if (v82 == 0x625F726566667562 && v83 == 0x73676E69646E6962)
        {
LABEL_172:
          if (v907) {
            int v109 = 3;
          }
          else {
            int v109 = 2;
          }
          goto LABEL_106;
        }
      }
LABEL_86:
      if ((v73[34] & 0x40) == 0) {
        goto LABEL_97;
      }
      uint64_t v85 = ***(void ***)v73;
      __s1 = v73;
      int v86 = *(_DWORD *)(v85 + 2520);
      if (!v86)
      {
        v154 = 0;
LABEL_210:
        v90 = (unsigned __int8 **)sub_1CC5BF31C(v85 + 2504, (uint64_t)&__s1, (uint64_t *)&__s1, v154);
        v155 = (unsigned __int8 *)__s1;
        v90[1] = 0;
        v90[2] = 0;
        *v90 = v155;
        goto LABEL_89;
      }
      uint64_t v87 = *(void *)(v85 + 2504);
      int v88 = v86 - 1;
      unsigned int v89 = v88 & ((v73 >> 4) ^ (v73 >> 9));
      v90 = (unsigned __int8 **)(v87 + 24 * v89);
      v91 = *v90;
      if (*v90 != v73)
      {
        v144 = 0;
        int v145 = 1;
        while (v91 != (unsigned __int8 *)-4096)
        {
          if (v144) {
            BOOL v146 = 0;
          }
          else {
            BOOL v146 = v91 == (unsigned __int8 *)-8192;
          }
          if (v146) {
            v144 = v90;
          }
          unsigned int v147 = v89 + v145++;
          unsigned int v89 = v147 & v88;
          v90 = (unsigned __int8 **)(v87 + 24 * v89);
          v91 = *v90;
          if (*v90 == v73) {
            goto LABEL_89;
          }
        }
        if (v144) {
          v154 = v144;
        }
        else {
          v154 = v90;
        }
        goto LABEL_210;
      }
LABEL_89:
      if (v90[2] == (unsigned __int8 *)19)
      {
        v92 = (uint64_t *)v90[1];
        uint64_t v93 = *v92;
        uint64_t v94 = v92[1];
        uint64_t v95 = *(uint64_t *)((char *)v92 + 11);
        BOOL v96 = v93 == 0x705F726576697264 && v94 == 0x6675625F6D617261;
        if (v96 && v95 == 0x7265666675625F6DLL) {
          goto LABEL_172;
        }
      }
LABEL_97:
      if ((v73[34] & 0x40) == 0) {
        goto LABEL_105;
      }
      uint64_t v98 = ***(void ***)v73;
      __s1 = v73;
      int v99 = *(_DWORD *)(v98 + 2520);
      if (!v99)
      {
        v156 = 0;
LABEL_214:
        v103 = (unsigned __int8 **)sub_1CC5BF31C(v98 + 2504, (uint64_t)&__s1, (uint64_t *)&__s1, v156);
        v157 = (unsigned __int8 *)__s1;
        v103[1] = 0;
        v103[2] = 0;
        *v103 = v157;
        goto LABEL_100;
      }
      uint64_t v100 = *(void *)(v98 + 2504);
      int v101 = v99 - 1;
      unsigned int v102 = v101 & ((v73 >> 4) ^ (v73 >> 9));
      v103 = (unsigned __int8 **)(v100 + 24 * v102);
      v104 = *v103;
      if (*v103 != v73)
      {
        v148 = 0;
        int v149 = 1;
        while (v104 != (unsigned __int8 *)-4096)
        {
          if (v148) {
            BOOL v150 = 0;
          }
          else {
            BOOL v150 = v104 == (unsigned __int8 *)-8192;
          }
          if (v150) {
            v148 = v103;
          }
          unsigned int v151 = v102 + v149++;
          unsigned int v102 = v151 & v101;
          v103 = (unsigned __int8 **)(v100 + 24 * v102);
          v104 = *v103;
          if (*v103 == v73) {
            goto LABEL_100;
          }
        }
        if (v148) {
          v156 = v148;
        }
        else {
          v156 = v103;
        }
        goto LABEL_214;
      }
LABEL_100:
      if (v103[2] != (unsigned __int8 *)11
        || ((v105 = (uint64_t *)v103[1], uint64_t v106 = *v105,
                                        uint64_t v107 = *(uint64_t *)((char *)v105 + 3),
                                        v106 == 0x74735F6567616D69)
          ? (BOOL v108 = v107 == 0x65746174735F6567)
          : (BOOL v108 = 0),
            !v108))
      {
LABEL_105:
        int v109 = 2;
LABEL_106:
        int v886 = v109;
        goto LABEL_107;
      }
      int v886 = 1;
LABEL_107:
      v885[0] = (unsigned __int8 *)v889;
      v885[1] = (unsigned __int8 *)&v886;
      v885[2] = (unsigned __int8 *)&v888 + 4;
      v885[3] = (unsigned __int8 *)&v888;
      v884[0] = (unsigned __int8 *)&v888 + 4;
      v884[1] = (unsigned __int8 *)&v888;
      v884[2] = (unsigned __int8 *)&v887;
      __s1 = v73;
      int v929 = 0;
      v926 = 0;
      uint64_t v927 = 0;
      LOBYTE(v928) = 0;
      v897 = v899;
      uint64_t v898 = 0x400000000;
      sub_1CBA9C1F8((uint64_t *)&v897, 1uLL, (uint64_t)&__s1);
      __s1 = v930;
      v926 = v930;
      uint64_t v927 = 16;
      int v928 = 0;
      unsigned int v110 = v898;
      if (v898)
      {
        while (1)
        {
          uint64_t v883 = 0;
          uint64_t v882 = 0;
          int v881 = 0;
          char v880 = 0;
          unint64_t v879 = 0;
          v111 = (char *)v897 + 32 * v110;
          uint64_t v112 = *((void *)v111 - 4);
          uint64_t v113 = *((void *)v111 - 3);
          int v114 = *((_DWORD *)v111 - 4);
          unsigned int v115 = *((_DWORD *)v111 - 3);
          char v116 = *(v111 - 8);
          LODWORD(v111) = *((_DWORD *)v111 - 1);
          LODWORD(v898) = v110 - 1;
          uint64_t v883 = v112;
          uint64_t v882 = v113;
          int v881 = v114;
          unint64_t v879 = __PAIR64__(v111, v115);
          char v880 = v116;
          v909[0] = (void *)(v66 + 272);
          v909[1] = &v880;
          *(void *)&long long v910 = &v886;
          *((void *)&v910 + 1) = &v881;
          *(void *)&long long v911 = (char *)&v887 + 1;
          *((void *)&v911 + 1) = v885;
          *(void *)&long long v912 = &v882;
          *((void *)&v912 + 1) = &v902;
          v913 = &v879;
          *(void *)&long long v914 = (char *)&v879 + 4;
          *((void *)&v914 + 1) = &v883;
          *(void *)&long long v915 = v884;
          unsigned int v117 = *(unsigned __int8 *)(v112 + 16);
          if (!v112 || (int v118 = v117 - 28, v117 < 0x1C))
          {
            if (!v112 || v117 != 5)
            {
LABEL_114:
              uint64_t v119 = *(void *)(v883 + 8);
              if (!v119) {
                goto LABEL_156;
              }
              while (2)
              {
                uint64_t v122 = *(void *)(v119 + 24);
                v121 = (char *)v926;
                uint64_t v123 = HIDWORD(v927);
                if (v926 == __s1)
                {
                  if (HIDWORD(v927))
                  {
                    v124 = 0;
                    uint64_t v125 = 8 * HIDWORD(v927);
                    v126 = v926;
                    while (*v126 != v122)
                    {
                      if (*v126 == -2) {
                        v124 = v126;
                      }
                      ++v126;
                      v125 -= 8;
                      if (!v125)
                      {
                        if (v124)
                        {
                          void *v124 = v122;
                          --v928;
                          goto LABEL_154;
                        }
                        goto LABEL_130;
                      }
                    }
                    goto LABEL_155;
                  }
LABEL_130:
                  unsigned int v120 = v927;
                  if (HIDWORD(v927) < v927)
                  {
                    ++HIDWORD(v927);
                    *((void *)v926 + v123) = v122;
                    goto LABEL_154;
                  }
                }
                else
                {
                  unsigned int v120 = v927;
                }
                if (3 * v120 <= 4 * (HIDWORD(v927) - v928))
                {
                  if (v120 >= 0x40) {
                    v120 *= 2;
                  }
                  else {
                    unsigned int v120 = 128;
                  }
                }
                else if (v120 - HIDWORD(v927) >= v120 >> 3)
                {
                  goto LABEL_135;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&__s1, v120);
                unsigned int v120 = v927;
                v121 = (char *)v926;
LABEL_135:
                unsigned int v127 = v120 - 1;
                unsigned int v128 = (v120 - 1) & ((v122 >> 4) ^ (v122 >> 9));
                v129 = &v121[8 * v128];
                uint64_t v130 = *(void *)v129;
                if (*(void *)v129 != -1)
                {
                  v131 = 0;
                  int v132 = 1;
                  while (v130 != v122)
                  {
                    if (v131) {
                      BOOL v133 = 0;
                    }
                    else {
                      BOOL v133 = v130 == -2;
                    }
                    if (v133) {
                      v131 = v129;
                    }
                    unsigned int v134 = v128 + v132++;
                    unsigned int v128 = v134 & v127;
                    v129 = &v121[8 * (v134 & v127)];
                    uint64_t v130 = *(void *)v129;
                    if (*(void *)v129 == -1) {
                      goto LABEL_147;
                    }
                  }
                  goto LABEL_155;
                }
                v131 = 0;
LABEL_147:
                if (v131) {
                  v135 = v131;
                }
                else {
                  v135 = v129;
                }
                if (*(void *)v135 == v122)
                {
LABEL_155:
                  uint64_t v119 = *(void *)(v119 + 8);
                  if (!v119) {
                    goto LABEL_156;
                  }
                  continue;
                }
                break;
              }
              if (*(void *)v135 == -2) {
                --v928;
              }
              else {
                ++HIDWORD(v927);
              }
              *(void *)v135 = v122;
LABEL_154:
              v874[0] = v122;
              v874[1] = v883;
              int v875 = v881;
              int v876 = v879;
              char v877 = v880;
              int v878 = HIDWORD(v879);
              v136 = (_OWORD *)sub_1CBA9C894((uint64_t)&v897, (unint64_t)v874, 1);
              v137 = (char *)v897 + 32 * v898;
              long long v138 = v136[1];
              _OWORD *v137 = *v136;
              v137[1] = v138;
              LODWORD(v898) = v898 + 1;
              goto LABEL_155;
            }
            int v118 = *(unsigned __int16 *)(v112 + 18);
          }
          if ((sub_1CBA9BA70((uint64_t)v909, v112, v118) & 1) == 0) {
            goto LABEL_114;
          }
LABEL_156:
          unsigned int v110 = v898;
          if (!v898)
          {
            uint64_t v72 = v859;
            if (v926 != __s1) {
              free(v926);
            }
            break;
          }
        }
      }
      if (v897 != v899) {
        free(v897);
      }
LABEL_161:
      if (v906 != v908) {
        free(v906);
      }
      if (v903 != &v905) {
        free(v903);
      }
      uint64_t v139 = v71 + 64;
      uint64_t v71 = v69;
      if (v139 != v69)
      {
        uint64_t v71 = v139;
        while ((*(void *)v71 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v71 += 64;
          if (v71 == v69)
          {
            uint64_t v71 = v69;
            break;
          }
        }
      }
      if (v71 == v72) {
        goto LABEL_218;
      }
    }
    v152 = 0;
LABEL_206:
    v79 = (unsigned __int8 **)sub_1CC5BF31C(v74 + 2504, (uint64_t)&__s1, (uint64_t *)&__s1, v152);
    v153 = (unsigned __int8 *)__s1;
    v79[1] = 0;
    v79[2] = 0;
    *v79 = v153;
    goto LABEL_81;
  }
LABEL_218:
  MEMORY[0x1D25D9CD0](0, 8);
  uint64_t v158 = v890;
  if (!v890)
  {
    v858 = 0;
    int v168 = HIDWORD(v888);
    int v169 = v888;
LABEL_238:
    uint64_t v173 = v854;
    goto LABEL_239;
  }
  size_t v159 = 40 * v890;
  v858 = (uint64_t (***)(void))operator new(v159, (std::align_val_t)8uLL);
  unint64_t v160 = 0;
  long long v161 = xmmword_1CDB158C0;
  do
  {
    v162 = v889[0];
    v163 = *(uint64_t (***)(void))&v889[0][v160];
    v858[v160 / 8] = v163;
    if (((unint64_t)v163 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v164 = &v858[v160 / 8];
      v165 = (uint64_t (**)(void))&v858[v160 / 8 + 4];
      v858[v160 / 8 + 1] = v165;
      *(_OWORD *)&v858[v160 / 8 + 2] = v161;
      unint64_t v166 = *(void *)&v162[v160 + 16];
      if (v858 != (uint64_t (***)(void))v162 && v166 != 0)
      {
        if (v166 >= 3) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        memcpy(v165, *(const void **)&v162[v160 + 8], 2 * *(void *)&v162[v160 + 16]);
        v164[2] = (uint64_t (**)(void))v166;
        long long v161 = xmmword_1CDB158C0;
      }
    }
    v160 += 40;
  }
  while (v159 != v160);
  int v168 = HIDWORD(v888);
  int v169 = v888;
  if (!v890) {
    goto LABEL_238;
  }
  int v170 = v888;
  uint64_t v171 = 40 * v890;
  v172 = v889[0] + 32;
  uint64_t v173 = v854;
  do
  {
    if ((*((void *)v172 - 4) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v174 = (unsigned __int8 *)*((void *)v172 - 3);
      if (v172 != v174) {
        free(v174);
      }
    }
    v172 += 40;
    v171 -= 40;
  }
  while (v171);
  int v169 = v170;
LABEL_239:
  MEMORY[0x1D25D9CD0](v889[0], 8);
  uint64_t v870 = 0;
  v175 = (void *)v840[41];
  if (v175 != v845)
  {
    uint64_t v848 = 0;
    v849 = (uint64_t *)(v173 + 408);
    int v855 = v158 - 1;
    LODWORD(v859) = v169;
    uint64_t v852 = v158;
    int v851 = v168;
    while (1)
    {
      v176 = v175 + 6;
      v841 = v175;
      uint64_t v177 = v175[7];
      v846 = v175 + 6;
LABEL_242:
      if ((void *)v177 != v176) {
        break;
      }
      v175 = (void *)v841[1];
      if (v175 == v845) {
        goto LABEL_431;
      }
    }
    uint64_t v863 = v177;
    sub_1CBA9C91C((uint64_t *)&v897, v177);
    if (v897)
    {
      int v190 = __clz(__rbit64(~(-1 << ((unint64_t)v897 >> 58)) & ((unint64_t)v897 >> 1)));
      if ((~(-1 << ((unint64_t)v897 >> 58)) & ((unint64_t)v897 >> 1)) != 0) {
        LODWORD(v189) = v190;
      }
      else {
        LODWORD(v189) = -1;
      }
    }
    else
    {
      int v178 = *((_DWORD *)v897 + 16);
      if (v178)
      {
        uint64_t v179 = 0;
        int v180 = v178 - 1;
        v181 = *(uint64_t **)v897;
        unint64_t v182 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v178;
        uint64_t v183 = v180 & 0xFFFFFFC0;
        uint64_t v184 = v863;
        while (1)
        {
          uint64_t v186 = *v181++;
          uint64_t v185 = v186;
          unint64_t v187 = v183 == v179 ? v182 : -1;
          unint64_t v188 = v187 & v185;
          if (v188) {
            break;
          }
          v179 += 64;
          LODWORD(v189) = -1;
          if (v183 + 64 == v179) {
            goto LABEL_257;
          }
        }
        uint64_t v189 = __clz(__rbit64(v188)) + v179;
        goto LABEL_257;
      }
      LODWORD(v189) = -1;
    }
    uint64_t v184 = v863;
LABEL_257:
    LODWORD(v860) = 0;
    LODWORD(v861) = 0;
    unsigned int v191 = 0;
    int v192 = 0;
    int v193 = v189;
    *(void *)&long long v864 = v184 + 48;
    while (2)
    {
      switch(v193)
      {
        case -1:
          uint64_t v246 = 0;
          v247 = &v866;
          uint64_t v248 = v863;
          do
          {
            if (((1 << v246) & v192) != 0)
            {
              int v249 = 2;
            }
            else
            {
              if (((1 << v246) & v191) == 0) {
                goto LABEL_396;
              }
              int v249 = 0;
            }
            unint64_t v250 = *((unsigned int *)v247 - 2);
            if (v250 >= *((unsigned int *)v247 - 1)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v251 = (uint64_t *)(*(v247 - 2) + 16 * v250);
            uint64_t *v251 = v863;
            v251[1] = v249 | (v191 >> v246) & 1;
            ++*((_DWORD *)v247 - 2);
LABEL_396:
            ++v246;
            v247 += 10;
          }
          while (v246 != 11);
          v252 = v897;
          int v169 = v859;
          if ((v897 & 1) == 0 && v897)
          {
            if (*(void **)v897 != (char *)v897 + 16) {
              free(*(void **)v897);
            }
            MEMORY[0x1D25D9CE0](v252, 0x1080C40EF38A13ELL);
            uint64_t v248 = v863;
          }
          int v253 = **(unsigned __int16 **)(v248 + 16);
          BOOL v254 = 1;
          if ((v253 - 8260) >= 2) {
            BOOL v254 = (v253 - 499) < 0xC;
          }
          BOOL v256 = (v253 - 2426) >= 4;
          unsigned int v255 = v253 - 8262;
          BOOL v256 = v256 && v255 >= 3;
          if (!v256)
          {
            int v257 = 1;
            goto LABEL_407;
          }
          BOOL v261 = !v254;
          if (v861 | v860) {
            BOOL v261 = 0;
          }
          uint64_t v260 = v848;
          if (!v261)
          {
            int v257 = 0;
LABEL_407:
            BOOL v258 = !v254;
            if ((_BYTE)v861) {
              BOOL v258 = 0;
            }
            if (!v258)
            {
              sub_1CBA9CC0C(*(void *)(v847 + 248), v248, &v867, (void *)&v868 + 1);
              uint64_t v248 = v863;
            }
            if ((_BYTE)v861) {
              int v259 = 0;
            }
            else {
              int v259 = v257;
            }
            if ((_BYTE)v860 || (uint64_t v260 = v248, v259))
            {
              sub_1CBA9CC0C(*(void *)(v847 + 248), v248, (void *)&v867 + 1, &v869);
              uint64_t v248 = v863;
              uint64_t v260 = v863;
            }
          }
          uint64_t v848 = v260;
          if ((*(unsigned char *)v248 & 4) == 0)
          {
            while ((*(_WORD *)(v248 + 44) & 8) != 0)
              uint64_t v248 = *(void *)(v248 + 8);
          }
          uint64_t v177 = *(void *)(v248 + 8);
          v176 = v846;
          goto LABEL_242;
        case 0:
          if (**(unsigned __int16 **)(v863 + 16) - 4581 <= 0xB
            && (uint64_t v203 = *(void *)(v863 + 32), *(unsigned char *)(v203 + 64) == 1)
            && !*(void *)(v203 + 80))
          {
            unsigned int v191 = 1;
          }
          else
          {
            unsigned int v191 = 1;
            int v192 = 1;
          }
          goto LABEL_384;
        case 1:
          uint64_t v200 = *(void *)v864;
          if (*(void *)v864 < 8uLL) {
            goto LABEL_274;
          }
          if ((v200 & 7) != 0)
          {
            v201 = (int *)(v200 & 0xFFFFFFFFFFFFFFF8);
            if ((*(void *)v864 & 7) != 3 || v201 == 0)
            {
LABEL_274:
              __s1 = &v927;
LABEL_275:
              v192 |= 2u;
              v191 |= 2u;
LABEL_276:
              WORD2(v870) |= (unsigned __int16)v191 | (unsigned __int16)v192;
              goto LABEL_384;
            }
            int v222 = *v201;
            __s1 = &v927;
            v926 = (void *)0x1000000000;
            if (v222 != 1) {
              goto LABEL_275;
            }
          }
          else
          {
            v200 &= 0xFFFFFFFFFFFFFFF8;
            *(void *)long long v864 = v200;
            __s1 = &v927;
            v926 = (void *)0x1000000000;
          }
          if ((v200 & 7) != 0)
          {
            v223 = (void **)((v200 & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          else
          {
            *(void *)long long v864 = v200 & 0xFFFFFFFFFFFFFFF8;
            v223 = (void **)v864;
          }
          uint64_t v224 = *(unsigned int *)(v173 + 216);
          if (!v224)
          {
            int v169 = v859;
            goto LABEL_276;
          }
          v225 = *(void **)(v173 + 208);
          v226 = &v225[2 * v224];
          v227 = (unint64_t *)((**v223 & ((uint64_t)(**v223 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) + 16);
          do
          {
            v909[0] = (void *)1;
            if ((*v225 & 1) == 0) {
              operator new();
            }
            v909[0] = *(void **)v225;
            sub_1CBA7B2F4((unint64_t *)v909, v227);
            v228 = (void **)v909[0];
            if ((uint64_t)v909[0])
            {
              if ((((unint64_t)v909[0] >> 1) & ~(-1 << ((unint64_t)v909[0] >> 58))) == 0) {
                goto LABEL_343;
              }
            }
            else
            {
              uint64_t v229 = *((unsigned int *)v909[0] + 2);
              if (!v229) {
                goto LABEL_343;
              }
              v230 = *(void **)v909[0];
              uint64_t v231 = 8 * v229;
              while (!*v230)
              {
                ++v230;
                v231 -= 8;
                if (!v231) {
                  goto LABEL_343;
                }
              }
            }
            if (v926 >= (unint64_t)HIDWORD(v926)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)__s1 + v926) = v225;
            LODWORD(v926) = v926 + 1;
            v228 = (void **)v909[0];
LABEL_343:
            if ((v228 & 1) == 0 && v228)
            {
              if (*v228 != v228 + 2) {
                free(*v228);
              }
              MEMORY[0x1D25D9CE0](v228, 0x1080C40EF38A13ELL);
            }
            v225 += 2;
          }
          while (v225 != v226);
          if (v926)
          {
            uint64_t v232 = 8 * v926;
            v233 = (uint64_t *)__s1;
            uint64_t v158 = v852;
            uint64_t v173 = v854;
            int v168 = v851;
            int v169 = v859;
            do
            {
              uint64_t v234 = *v233++;
              v192 |= 1 << *(_WORD *)(v234 + 10);
              v191 |= 1 << *(_WORD *)(v234 + 8);
              v232 -= 8;
            }
            while (v232);
          }
          else
          {
            uint64_t v158 = v852;
            uint64_t v173 = v854;
            int v168 = v851;
            int v169 = v859;
          }
          WORD2(v870) |= v191 | (unsigned __int16)v192;
          if (__s1 != &v927) {
            free(__s1);
          }
LABEL_384:
          int v193 = sub_1CB9F9DF0((unint64_t *)&v897, v193);
          continue;
        case 2:
        case 10:
          uint64_t v194 = *(void *)v864;
          if (*(void *)v864 < 8uLL) {
            goto LABEL_266;
          }
          if ((v194 & 7) != 0)
          {
            v195 = (_DWORD *)(v194 & 0xFFFFFFFFFFFFFFF8);
            BOOL v196 = (*(void *)v864 & 7) != 3 || v195 == 0;
            if (v196 || *v195 != 1)
            {
LABEL_266:
              char v197 = 0;
              unint64_t v198 = 0;
              char v199 = 1;
              goto LABEL_286;
            }
          }
          else
          {
            v194 &= 0xFFFFFFFFFFFFFFF8;
            *(void *)long long v864 = v194;
          }
          char v199 = 0;
          if ((v194 & 7) != 0)
          {
            unint64_t v198 = *(void *)((v194 & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          else
          {
            unint64_t v198 = v194 & 0xFFFFFFFFFFFFFFF8;
            *(void *)long long v864 = v194 & 0xFFFFFFFFFFFFFFF8;
          }
          char v197 = 1;
LABEL_286:
          if (v193 == 2)
          {
            if (!v198)
            {
              int v204 = 1;
              goto LABEL_308;
            }
            if ((*(void *)v198 & 4) == 0)
            {
              unint64_t v205 = *(void *)v198 & 0xFFFFFFFFFFFFFFF8;
LABEL_298:
              int v204 = (*(unsigned __int16 *)(v198 + 32) >> 1) & 1;
              if (v158 && v205)
              {
                unsigned int v207 = ((v205 >> 4) ^ (v205 >> 9)) & v855;
                v208 = &v858[5 * v207];
                v209 = *v208;
                if ((uint64_t (**)(void))v205 == *v208)
                {
LABEL_301:
                  if (v207 != v158)
                  {
                    v210 = v208[2];
                    if (v210)
                    {
                      uint64_t v211 = 2 * (void)v210;
                      v212 = (char *)v208[1] + 1;
                      do
                      {
                        v192 |= 1 << *v212;
                        v191 |= 1 << *(v212 - 1);
                        v212 += 2;
                        v211 -= 2;
                      }
                      while (v211);
                    }
                    if ((v199 & 1) == 0) {
                      goto LABEL_311;
                    }
                  }
                }
                else
                {
                  int v244 = 1;
                  while (v209 != (uint64_t (**)(void))-4096)
                  {
                    unsigned int v245 = v207 + v244++;
                    unsigned int v207 = v245 & v855;
                    v208 = &v858[5 * v207];
                    v209 = *v208;
                    if ((uint64_t (**)(void))v205 == *v208) {
                      goto LABEL_301;
                    }
                  }
                }
              }
LABEL_308:
              v192 |= v169;
              v191 |= v168;
              if (v193 != 2) {
                char v197 = 1;
              }
              if ((v197 & 1) == 0)
              {
                v192 |= 4u;
                v191 |= 4u;
                goto LABEL_319;
              }
LABEL_311:
              if (v193 != 2)
              {
LABEL_312:
                if (v193 != 10) {
                  goto LABEL_384;
                }
                int v213 = *(_DWORD *)(v173 + 416);
                uint64_t v214 = v863;
                if (!v213) {
                  goto LABEL_376;
                }
                v215 = *(unsigned __int16 **)(v863 + 16);
                int v216 = *v215;
                if ((v215[8] & 2) == 0 && (v216 - 2970) >= 0x48 && (v216 - 2862) > 0x6B)
                {
                  int v213 = 0;
LABEL_376:
                  v192 |= v213;
                  WORD1(v870) |= (unsigned __int16)v192 | (unsigned __int16)v191;
                  if (v192 | v191) {
                    int v241 = v204;
                  }
                  else {
                    int v241 = 0;
                  }
                  HIBYTE(v870) |= v241;
                  LODWORD(v860) = v241;
                  BOOL v243 = v241 == 1
                      && (int v242 = **(unsigned __int16 **)(v214 + 16), (v242 - 2862) <= 0xB3)
                      && *(void *)(*(void *)(v214 + 32) + 32 * sub_1CBC7A3F8(v242, 0x38u) + 16) < 4uLL;
                  v871 |= v243;
                  goto LABEL_384;
                }
                unsigned int v218 = sub_1CBC7A3F8(v216, 0x39u);
                uint64_t v214 = v863;
                uint64_t v219 = *(void *)(v863 + 32);
                if (*(unsigned char *)(v219 + 32 * v218) == 1)
                {
                  LODWORD(__s1) = *(void *)(v219 + 32 * v218 + 16);
                  v220 = sub_1CBA9CB98(v849, &__s1);
                  if ((int *)(*(void *)(v173 + 408) + 8 * *(unsigned int *)(v173 + 424)) == v220)
                  {
                    int v213 = 0;
                    uint64_t v214 = v863;
                    goto LABEL_376;
                  }
                  int v213 = (1 << *((unsigned char *)v220 + 5));
                  int v221 = (1 << *((unsigned char *)v220 + 4));
                  uint64_t v214 = v863;
                }
                else
                {
                  uint64_t v235 = *(unsigned int *)(v173 + 424);
                  if (v235)
                  {
                    uint64_t v236 = 8 * v235;
                    v237 = *(unsigned int **)(v173 + 408);
                    while (*v237 >= 0xFFFFFFFE)
                    {
                      v237 += 2;
                      v236 -= 8;
                      if (!v236) {
                        goto LABEL_374;
                      }
                    }
                  }
                  else
                  {
                    v237 = *(unsigned int **)(v173 + 408);
                  }
                  uint64_t v238 = *(void *)(v173 + 408) + 8 * v235;
                  if (v237 != (unsigned int *)v238)
                  {
                    int v213 = 0;
                    int v221 = 0;
                    while (1)
                    {
                      v221 |= (1 << *((unsigned char *)v237 + 4));
                      v213 |= (1 << *((unsigned char *)v237 + 5));
                      v239 = v237 + 2;
                      do
                      {
                        if (v239 == (unsigned int *)v238) {
                          goto LABEL_375;
                        }
                        unsigned int v240 = *v239;
                        v239 += 2;
                      }
                      while (v240 > 0xFFFFFFFD);
                      v237 = v239 - 2;
                    }
                  }
LABEL_374:
                  int v221 = 0;
                  int v213 = 0;
                }
LABEL_375:
                v191 |= v221;
                goto LABEL_376;
              }
LABEL_319:
              LOWORD(v870) = v870 | v191 | v192;
              if (v191 | v192) {
                int v217 = v204;
              }
              else {
                int v217 = 0;
              }
              LODWORD(v861) = v217;
              BYTE6(v870) |= v217;
              goto LABEL_384;
            }
          }
          else
          {
            if (!v198)
            {
              int v204 = 1;
              goto LABEL_294;
            }
            if ((*(void *)v198 & 4) == 0)
            {
              int v204 = (*(unsigned __int16 *)(v198 + 32) >> 1) & 1;
LABEL_294:
              v192 |= v169;
              v191 |= v168;
              goto LABEL_312;
            }
            unint64_t v206 = *(void *)v198 & 0xFFFFFFFFFFFFFFF8;
            if (v206)
            {
              unint64_t v205 = *(void *)(v206 + 16);
              goto LABEL_298;
            }
          }
          int v204 = (*(unsigned __int16 *)(v198 + 32) >> 1) & 1;
          goto LABEL_308;
        default:
          goto LABEL_384;
      }
    }
  }
LABEL_431:
  v262 = &unk_1CD91C000;
  if ((void)v867)
  {
    if (*((void *)&v867 + 1)) {
      llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator();
    }
    *(void *)&long long v868 = v867;
    uint64_t v263 = *((void *)&v868 + 1);
  }
  else
  {
    *(void *)&long long v868 = *((void *)&v867 + 1);
    if (!*((void *)&v867 + 1)) {
      goto LABEL_438;
    }
    uint64_t v263 = v869;
  }
  *((void *)&v869 + 1) = v263;
LABEL_438:
  if (v158)
  {
    uint64_t v264 = 40 * v158;
    v265 = v858 + 4;
    do
    {
      if (((unint64_t)*(v265 - 4) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v266 = (uint64_t (***)(void))*(v265 - 3);
        if (v265 != v266) {
          free(v266);
        }
      }
      v265 += 5;
      v264 -= 40;
    }
    while (v264);
  }
  MEMORY[0x1D25D9CD0](v858, 8);
  sub_1CBA6598C((uint64_t)v872);
  MEMORY[0x1D25D9CD0](v872[0], 8);
  if (v891 != (char *)v892 + 8) {
    free(v891);
  }
  uint64_t v267 = (*(uint64_t (**)(uint64_t, void))(*(void *)v838 + 24))(v838, *v840);
  v858 = (uint64_t (***)(void))v267;
  if ((**(uint64_t (***)(void))v267)()
    || (v269 = *(llvm::Module **)(*v840 + 40), ((*(unsigned __int16 *)(*v840 + 18) >> 4) & 0x3FFu) - 103 >= 2)
    && (__s1 = "agx.sample_rate", LOWORD(v930[0]) = 259, !llvm::Module::getNamedMetadata(v269, (const char **)&__s1)))
  {
    BOOL v268 = 0;
  }
  else
  {
    sub_1CD10B764(v269, 0x80u, (uint64_t)&__s1);
    int v270 = v931;
    if (v931 && *(_DWORD *)(*(void *)(*(void *)(v847 + 248) + 72) + 32) == 1)
    {
      uint64_t v271 = (v931 + 63) >> 6;
      v897 = v899;
      HIDWORD(v898) = 6;
      if ((v931 + 63) >= 0x1C0)
      {
        LODWORD(v898) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if ((v931 + 63) >= 0x40) {
        bzero(v899, 8 * v271);
      }
      LODWORD(v898) = v271;
      int v900 = v270;
      if ((void *)v840[41] != v845) {
        llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominates();
      }
      uint64_t v279 = v926;
      if (v926 >= v271) {
        uint64_t v280 = v271;
      }
      else {
        uint64_t v280 = v926;
      }
      if (v280)
      {
        v281 = (uint64_t *)__s1;
        v282 = v899;
        uint64_t v283 = v280;
        do
        {
          uint64_t v284 = *v281++;
          *v282++ &= v284;
          --v283;
        }
        while (v283);
      }
      uint64_t v267 = (uint64_t)v858;
      if (v271 > v279)
      {
        do
        {
          v899[v280] = 0;
          LODWORD(v280) = v280 + 1;
        }
        while (v271 != v280);
      }
      BOOL v268 = v931 == v900 && memcmp(__s1, v899, 8 * v279) == 0;
    }
    else
    {
      BOOL v268 = 0;
      uint64_t v267 = (uint64_t)v858;
    }
    if (__s1 != &v927) {
      free(__s1);
    }
  }
  (*(void (**)(uint64_t, uint64_t, BOOL, uint64_t, void, uint64_t, uint64_t))(*(void *)v267 + 8))(v267, 30, v268, 1, 0, 1, 2);
  v897 = (void *)1;
  for (uint64_t j = 8; j != 1672; j += 104)
    *(void **)((char *)&v897 + j) = (void *)-4096;
  v901[0] = 1;
  for (uint64_t k = 1680; k != 3344; k += 104)
    *(void **)((char *)&v897 + k) = (void *)-4096;
  sub_1CBA9CCC0((uint64_t)&v897, (uint64_t)v840, v847);
  if (!*(unsigned char *)((*(uint64_t (**)(void, void))(*(void *)v840[1] + 16))(v840[1], *v840) + 296))
  {
LABEL_512:
    LODWORD(v301) = 0;
    goto LABEL_513;
  }
  LODWORD(v863) = !v268;
  v874[0] = 0;
  v874[0] = (*(uint64_t (**)(void))(*(void *)v840[2] + 104))(v840[2]);
  v287 = v840 + 40;
  do
  {
    v287 = (void *)*v287;
    if (v287 == v845) {
      goto LABEL_512;
    }
  }
  while (((v287[12] - v287[11]) & 0x7FFFFFFF8) != 0);
  BOOL v853 = v268;
  v288 = (uint64_t *)v840[41];
  if ((*(_WORD *)(*v840 + 18) & 0x3FF0) == 0x6C0) {
    int v289 = 3;
  }
  else {
    int v289 = 0;
  }
  LODWORD(v872[0]) = v289;
  uint64_t FirstInstrTerminator = llvm::MachineBasicBlock::getFirstInstrTerminator((llvm::MachineBasicBlock *)v288);
  v291 = (uint64_t *)FirstInstrTerminator;
  unsigned int v293 = v837;
  unsigned int v292 = HIDWORD(v837);
  if (!v837 || (v294 = (uint64_t *)v288[7], v294 == (uint64_t *)FirstInstrTerminator))
  {
LABEL_1003:
    v294 = v291;
  }
  else
  {
    while (1)
    {
      sub_1CBA9C91C((uint64_t *)&__s1, (uint64_t)v294);
      v295 = __s1;
      if (__s1)
      {
        if ((((unint64_t)__s1 >> 1) & ~(-1 << ((unint64_t)__s1 >> 58))) != 0) {
          goto LABEL_1004;
        }
      }
      else
      {
        v296 = *(unint64_t **)__s1;
        uint64_t v297 = *((unsigned int *)__s1 + 2);
        if (v297)
        {
          unint64_t v298 = 0;
          uint64_t v299 = 8 * v297;
          while (!v296[v298 / 8])
          {
            v298 += 8;
            if (v299 == v298) {
              goto LABEL_504;
            }
          }
          if (__s1)
          {
            if (v296 != (unint64_t *)((char *)__s1 + 16)) {
              free(v296);
            }
            MEMORY[0x1D25D9CE0](v295, 0x1080C40EF38A13ELL);
          }
          goto LABEL_1004;
        }
LABEL_504:
        if (__s1)
        {
          if (v296 != (unint64_t *)((char *)__s1 + 16)) {
            free(v296);
          }
          MEMORY[0x1D25D9CE0](v295, 0x1080C40EF38A13ELL);
        }
      }
      v300 = (uint64_t *)v294[1];
      if ((*(unsigned char *)(v294[2] + 16) & 0x40) != 0) {
        break;
      }
      v294 = (uint64_t *)v294[1];
      if (v300 == v291) {
        goto LABEL_1003;
      }
    }
    if (v300 == v291) {
      goto LABEL_1003;
    }
    v294 = sub_1CBA9DB98(v288, v294, 0);
  }
LABEL_1004:
  v588 = v840;
  v889[0] = 0;
  v589 = v288 + 6;
  if (v294 == v288 + 6)
  {
    v590 = sub_1CBA9DC74(v288);
    v588 = v840;
    v294 = v590;
  }
  if (v294 == v589)
  {
    v592 = v288 + 6;
  }
  else
  {
    v591 = sub_1CBA9DD2C(v294);
    v592 = v591;
    if (v591 + 7 != (uint64_t *)v889)
    {
      v593 = (unsigned __int8 *)v591[7];
      v889[0] = v593;
      v588 = v840;
      if (!v593) {
        goto LABEL_1012;
      }
      llvm::MetadataTracking::track((uint64_t)v889, v593, 2);
    }
    v588 = v840;
  }
LABEL_1012:
  uint64_t v594 = v588[2];
  int v595 = *(unsigned __int8 *)(v594 + 318);
  if (*(unsigned char *)(v594 + 327)) {
    int v596 = 4676;
  }
  else {
    int v596 = 4675;
  }
  if (v595) {
    int v596 = 4674;
  }
  LODWORD(v859) = v596;
  if (v837)
  {
    if (v589 == v592 || v592 == *(uint64_t **)(v592[3] + 56)) {
      goto LABEL_1031;
    }
    unint64_t v597 = *v592 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v598 = *(void *)(*(void *)(v597 + 16) + 8);
    if ((*(_WORD *)(v597 + 44) & 0xC) != 0 && (*(_WORD *)(v597 + 44) & 4) == 0)
    {
      if ((v598 & 0x400) == 0)
      {
        while ((*(_WORD *)(v597 + 44) & 8) != 0)
        {
          unint64_t v597 = *(void *)(v597 + 8);
          if ((*(unsigned char *)(*(void *)(v597 + 16) + 9) & 4) != 0) {
            goto LABEL_1025;
          }
        }
LABEL_1031:
        uint64_t v603 = *(void *)(v874[0] + 8) + 231648;
        v604 = (llvm::MachineFunction *)v288[4];
        v909[0] = v889[0];
        if (v889[0]) {
          llvm::MetadataTracking::track((uint64_t)v909, v889[0], 2);
        }
        v605 = llvm::MachineFunction::CreateMachineInstr(v604, v603, (unsigned __int8 **)v909, 0);
        if (!v909[0]) {
          goto LABEL_1034;
        }
        int v815 = *(unsigned __int8 *)v909[0];
        if ((v815 - 4) > 0x1E)
        {
          if ((v815 - 3) >= 0xFFFFFFFE) {
            v827 = v909[0];
          }
          else {
            v827 = 0;
          }
          if ((v815 - 3) < 0xFFFFFFFE)
          {
            unsigned int v293 = v837;
            unsigned int v292 = HIDWORD(v837);
            if (v815 == 3) {
              *((void *)v909[0] + 1) = 0;
            }
            goto LABEL_1034;
          }
          unint64_t v817 = (unint64_t)v827 + 8;
        }
        else
        {
          unsigned int v293 = v837;
          unsigned int v292 = HIDWORD(v837);
          if ((*((unsigned char *)v909[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v909[0] + 3)) {
            goto LABEL_1034;
          }
          uint64_t v816 = *((void *)v909[0] + 2);
          if ((v816 & 4) == 0) {
            goto LABEL_1034;
          }
          unint64_t v817 = v816 & 0xFFFFFFFFFFFFFFF8;
          if (!v817) {
            goto LABEL_1034;
          }
        }
        __s1 = v909;
        sub_1CC5FA668(v817 + 16, &__s1);
        unsigned int v293 = v837;
        unsigned int v292 = HIDWORD(v837);
LABEL_1034:
        if (v589 != v592 && (*((_WORD *)v592 + 22) & 4) != 0) {
          *((_WORD *)v605 + 22) |= 0xCu;
        }
        sub_1CC31973C(v288 + 5, v592, (uint64_t)v605);
        LODWORD(__s1) = 1;
        v926 = 0;
        uint64_t v927 = v293;
        llvm::MachineInstr::addOperand(v605, v604, (const llvm::MachineOperand *)&__s1);
        LODWORD(__s1) = 1;
        v926 = 0;
        uint64_t v927 = 3;
        llvm::MachineInstr::addOperand(v605, v604, (const llvm::MachineOperand *)&__s1);
        goto LABEL_1038;
      }
    }
    else if ((v598 & 0x400) == 0)
    {
      goto LABEL_1031;
    }
LABEL_1025:
    uint64_t v600 = *(void *)(v874[0] + 8) + 48 * v859;
    v601 = (llvm::MachineFunction *)v288[4];
    v909[0] = v889[0];
    if (v889[0]) {
      llvm::MetadataTracking::track((uint64_t)v909, v889[0], 2);
    }
    v602 = llvm::MachineFunction::CreateMachineInstr(v601, v600, (unsigned __int8 **)v909, 0);
    if (v909[0])
    {
      int v829 = *(unsigned __int8 *)v909[0];
      if ((v829 - 4) > 0x1E)
      {
        if ((v829 - 3) >= 0xFFFFFFFE) {
          v835 = v909[0];
        }
        else {
          v835 = 0;
        }
        if ((v829 - 3) < 0xFFFFFFFE)
        {
          unsigned int v293 = v837;
          unsigned int v292 = HIDWORD(v837);
          if (v829 == 3) {
            *((void *)v909[0] + 1) = 0;
          }
          goto LABEL_1028;
        }
        unint64_t v831 = (unint64_t)v835 + 8;
      }
      else
      {
        unsigned int v293 = v837;
        unsigned int v292 = HIDWORD(v837);
        if ((*((unsigned char *)v909[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v909[0] + 3)) {
          goto LABEL_1028;
        }
        uint64_t v830 = *((void *)v909[0] + 2);
        if ((v830 & 4) == 0) {
          goto LABEL_1028;
        }
        unint64_t v831 = v830 & 0xFFFFFFFFFFFFFFF8;
        if (!v831) {
          goto LABEL_1028;
        }
      }
      __s1 = v909;
      sub_1CC5FA668(v831 + 16, &__s1);
      unsigned int v293 = v837;
      unsigned int v292 = HIDWORD(v837);
    }
LABEL_1028:
    if ((*((_WORD *)v592 + 22) & 4) != 0) {
      *((_WORD *)v602 + 22) |= 0xCu;
    }
    sub_1CC31973C(v288 + 5, v592, (uint64_t)v602);
    goto LABEL_1031;
  }
LABEL_1038:
  if (v292)
  {
    if (v589 == v592 || v592 == *(uint64_t **)(v592[3] + 56)) {
      goto LABEL_1052;
    }
    unint64_t v606 = *v592 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v607 = *(void *)(*(void *)(v606 + 16) + 8);
    if ((*(_WORD *)(v606 + 44) & 0xC) != 0 && (*(_WORD *)(v606 + 44) & 4) == 0)
    {
      if ((v607 & 0x400) == 0)
      {
        while ((*(_WORD *)(v606 + 44) & 8) != 0)
        {
          unint64_t v606 = *(void *)(v606 + 8);
          if ((*(unsigned char *)(*(void *)(v606 + 16) + 9) & 4) != 0) {
            goto LABEL_1046;
          }
        }
LABEL_1052:
        uint64_t v612 = *(void *)(v874[0] + 8) + 231648;
        v613 = (llvm::MachineFunction *)v288[4];
        v909[0] = v889[0];
        if (v889[0]) {
          llvm::MetadataTracking::track((uint64_t)v909, v889[0], 2);
        }
        v614 = llvm::MachineFunction::CreateMachineInstr(v613, v612, (unsigned __int8 **)v909, 0);
        if (!v909[0]) {
          goto LABEL_1055;
        }
        int v818 = *(unsigned __int8 *)v909[0];
        if ((v818 - 4) > 0x1E)
        {
          if ((v818 - 3) >= 0xFFFFFFFE) {
            v828 = v909[0];
          }
          else {
            v828 = 0;
          }
          if ((v818 - 3) < 0xFFFFFFFE)
          {
            unsigned int v292 = HIDWORD(v837);
            if (v818 == 3) {
              *((void *)v909[0] + 1) = 0;
            }
            goto LABEL_1055;
          }
          unint64_t v820 = (unint64_t)v828 + 8;
        }
        else
        {
          unsigned int v292 = HIDWORD(v837);
          if ((*((unsigned char *)v909[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v909[0] + 3)) {
            goto LABEL_1055;
          }
          uint64_t v819 = *((void *)v909[0] + 2);
          if ((v819 & 4) == 0) {
            goto LABEL_1055;
          }
          unint64_t v820 = v819 & 0xFFFFFFFFFFFFFFF8;
          if (!v820) {
            goto LABEL_1055;
          }
        }
        __s1 = v909;
        sub_1CC5FA668(v820 + 16, &__s1);
        unsigned int v292 = HIDWORD(v837);
LABEL_1055:
        if (v589 != v592 && (*((_WORD *)v592 + 22) & 4) != 0) {
          *((_WORD *)v614 + 22) |= 0xCu;
        }
        sub_1CC31973C(v288 + 5, v592, (uint64_t)v614);
        LODWORD(__s1) = 1;
        v926 = 0;
        uint64_t v927 = v292;
        llvm::MachineInstr::addOperand(v614, v613, (const llvm::MachineOperand *)&__s1);
        LODWORD(__s1) = 1;
        uint64_t v927 = 0;
        v926 = 0;
        llvm::MachineInstr::addOperand(v614, v613, (const llvm::MachineOperand *)&__s1);
        goto LABEL_1059;
      }
    }
    else if ((v607 & 0x400) == 0)
    {
      goto LABEL_1052;
    }
LABEL_1046:
    uint64_t v609 = *(void *)(v874[0] + 8) + 48 * v859;
    v610 = (llvm::MachineFunction *)v288[4];
    v909[0] = v889[0];
    if (v889[0]) {
      llvm::MetadataTracking::track((uint64_t)v909, v889[0], 2);
    }
    v611 = llvm::MachineFunction::CreateMachineInstr(v610, v609, (unsigned __int8 **)v909, 0);
    if (v909[0])
    {
      int v832 = *(unsigned __int8 *)v909[0];
      if ((v832 - 4) > 0x1E)
      {
        if ((v832 - 3) >= 0xFFFFFFFE) {
          v836 = v909[0];
        }
        else {
          v836 = 0;
        }
        if ((v832 - 3) < 0xFFFFFFFE)
        {
          unsigned int v292 = HIDWORD(v837);
          if (v832 == 3) {
            *((void *)v909[0] + 1) = 0;
          }
          goto LABEL_1049;
        }
        unint64_t v834 = (unint64_t)v836 + 8;
      }
      else
      {
        unsigned int v292 = HIDWORD(v837);
        if ((*((unsigned char *)v909[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v909[0] + 3)) {
          goto LABEL_1049;
        }
        uint64_t v833 = *((void *)v909[0] + 2);
        if ((v833 & 4) == 0) {
          goto LABEL_1049;
        }
        unint64_t v834 = v833 & 0xFFFFFFFFFFFFFFF8;
        if (!v834) {
          goto LABEL_1049;
        }
      }
      __s1 = v909;
      sub_1CC5FA668(v834 + 16, &__s1);
      unsigned int v292 = HIDWORD(v837);
    }
LABEL_1049:
    if ((*((_WORD *)v592 + 22) & 4) != 0) {
      *((_WORD *)v611 + 22) |= 0xCu;
    }
    sub_1CC31973C(v288 + 5, v592, (uint64_t)v611);
    goto LABEL_1052;
  }
LABEL_1059:
  uint64_t v615 = 0;
  uint64_t v301 = 0;
  v902 = (unsigned __int8 *)v889;
  v903 = v874;
  uint64_t v904 = (uint64_t)v872;
  do
  {
    v616 = &v865[80 * v615];
    unsigned int v617 = 1 << v615;
    uint64_t v618 = *((unsigned int *)v616 + 2);
    if (!v618)
    {
      uint64_t v301 = v617 | v301;
      v262 = (void *)&unk_1CD91C000;
      goto LABEL_1365;
    }
    __s1 = v930;
    v926 = v930;
    uint64_t v927 = 16;
    int v928 = 0;
    v909[0] = &v911;
    v909[1] = &v911;
    *(void *)&long long v910 = 16;
    DWORD2(v910) = 0;
    *(void *)&long long v864 = v615;
    if (((unsigned __int16)v617 & WORD1(v870)) != 0 && ((unsigned __int16)v617 & (unsigned __int16)v870) != 0)
    {
      v619 = (void *)v868;
      uint64_t v620 = *((void *)&v869 + 1);
      if (*((void *)&v869 + 1)) {
        goto LABEL_1071;
      }
    }
    else if (((unsigned __int16)v617 & WORD1(v870)) != 0)
    {
      v619 = (void *)*((void *)&v867 + 1);
      uint64_t v620 = v869;
      if ((void)v869) {
        goto LABEL_1071;
      }
    }
    else
    {
      if (((unsigned __int16)v617 & (unsigned __int16)v870) != 0)
      {
        v619 = (void *)v867;
        uint64_t v620 = *((void *)&v868 + 1);
        if (!*((void *)&v868 + 1)) {
          goto LABEL_1072;
        }
LABEL_1071:
        HIDWORD(v927) = 1;
        v930[0] = v620;
        goto LABEL_1072;
      }
      v619 = 0;
    }
LABEL_1072:
    v621 = 0;
    LODWORD(v862) = v617 & WORD2(v870);
    v622 = *(unsigned char **)v616;
    uint64_t v623 = *(void *)v616 + 16 * v618;
    if (v862) {
      int v624 = v863;
    }
    else {
      int v624 = 1;
    }
    do
    {
      uint64_t v625 = *(void *)v622;
      unint64_t v626 = *(void *)(*(void *)v622 + 48);
      if (v626 >= 8)
      {
        if ((v626 & 7) != 0)
        {
          unint64_t v627 = v626 & 0xFFFFFFFFFFFFFFF8;
          BOOL v628 = (*(void *)(*(void *)v622 + 48) & 7) != 3 || v627 == 0;
          if (v628 || *(_DWORD *)v627 != 1) {
            goto LABEL_1088;
          }
        }
        else
        {
          *(void *)(v625 + 48) = v626 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v625 = *(void *)v622;
          unint64_t v626 = *(void *)(*(void *)v622 + 48);
          unint64_t v627 = v626 & 0xFFFFFFFFFFFFFFF8;
        }
        if ((v626 & 7) != 0)
        {
          unint64_t v627 = *(void *)(v627 + 8);
          if (v627) {
            goto LABEL_1086;
          }
        }
        else
        {
          *(void *)(v625 + 48) = v627;
          if (v627)
          {
LABEL_1086:
            int v629 = (*(unsigned __int16 *)(v627 + 32) >> 1) & 1;
            goto LABEL_1089;
          }
        }
      }
LABEL_1088:
      int v629 = 1;
LABEL_1089:
      uint64_t v630 = *(void *)v622;
      v631 = *(unsigned __int16 **)(*(void *)v622 + 16);
      if ((v631[8] & 2) != 0) {
        int v629 = 0;
      }
      if (*v631 - 4581 <= 0xB && (uint64_t v632 = *(void *)(v630 + 32), *(unsigned char *)(v632 + 64) == 1))
      {
        if (!*(void *)(v632 + 80)) {
          LOBYTE(v629) = 0;
        }
        if ((v629 & 1) == 0)
        {
LABEL_1096:
          char v633 = v622[8];
          if ((v633 & 1) == 0) {
            goto LABEL_1208;
          }
          v634 = *(void **)(v630 + 24);
          if (v619)
          {
            if (v634) {
              llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator();
            }
            v634 = v619;
          }
          v619 = sub_1CBA9DDE8(v634);
          uint64_t v649 = *(void *)v622;
          v650 = (char *)v926;
          uint64_t v651 = HIDWORD(v927);
          if (v926 == __s1)
          {
            if (HIDWORD(v927))
            {
              v652 = 0;
              uint64_t v653 = 8 * HIDWORD(v927);
              v654 = v926;
              while (*v654 != v649)
              {
                if (*v654 == -2) {
                  v652 = v654;
                }
                ++v654;
                v653 -= 8;
                if (!v653)
                {
                  if (!v652) {
                    goto LABEL_1139;
                  }
                  void *v652 = v649;
                  --v928;
                  if ((v633 & 2) != 0) {
                    goto LABEL_1209;
                  }
                  goto LABEL_1245;
                }
              }
LABEL_1208:
              if ((v633 & 2) == 0) {
                goto LABEL_1245;
              }
LABEL_1209:
              uint64_t v683 = *(void *)v622;
              if (v621)
              {
                if (*(void *)(*(void *)v622 + 24))
                {
                  llvm::MachineDominatorTree::applySplitCriticalEdges(v842);
                  llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator();
                }
              }
              else
              {
                v621 = *(void **)(*(void *)v622 + 24);
              }
              v684 = (char *)v909[1];
              uint64_t v685 = DWORD1(v910);
              if (v909[1] != v909[0])
              {
                unsigned int v689 = v910;
                goto LABEL_1224;
              }
              if (!DWORD1(v910))
              {
LABEL_1221:
                unsigned int v689 = v910;
                if (DWORD1(v910) < v910)
                {
                  ++DWORD1(v910);
                  *((void *)v909[1] + v685) = v683;
                  goto LABEL_1245;
                }
LABEL_1224:
                if (3 * v689 <= 4 * (DWORD1(v910) - DWORD2(v910)))
                {
                  if (v689 >= 0x40) {
                    v689 *= 2;
                  }
                  else {
                    unsigned int v689 = 128;
                  }
                }
                else if (v689 - DWORD1(v910) >= v689 >> 3)
                {
                  goto LABEL_1226;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v909, v689);
                unsigned int v689 = v910;
                v684 = (char *)v909[1];
LABEL_1226:
                unsigned int v690 = v689 - 1;
                unsigned int v691 = (v689 - 1) & ((v683 >> 4) ^ (v683 >> 9));
                v692 = &v684[8 * v691];
                uint64_t v693 = *(void *)v692;
                if (*(void *)v692 == -1)
                {
                  v694 = 0;
LABEL_1238:
                  if (v694) {
                    v698 = v694;
                  }
                  else {
                    v698 = v692;
                  }
                  if (*(void *)v698 != v683)
                  {
                    if (*(void *)v698 == -2) {
                      --DWORD2(v910);
                    }
                    else {
                      ++DWORD1(v910);
                    }
                    *(void *)v698 = v683;
                  }
                }
                else
                {
                  v694 = 0;
                  int v695 = 1;
                  while (v693 != v683)
                  {
                    if (v694) {
                      BOOL v696 = 0;
                    }
                    else {
                      BOOL v696 = v693 == -2;
                    }
                    if (v696) {
                      v694 = v692;
                    }
                    unsigned int v697 = v691 + v695++;
                    unsigned int v691 = v697 & v690;
                    v692 = &v684[8 * (v697 & v690)];
                    uint64_t v693 = *(void *)v692;
                    if (*(void *)v692 == -1) {
                      goto LABEL_1238;
                    }
                  }
                }
                goto LABEL_1245;
              }
              v686 = 0;
              uint64_t v687 = 8 * DWORD1(v910);
              v688 = v909[1];
              while (*v688 != v683)
              {
                if (*v688 == -2) {
                  v686 = v688;
                }
                ++v688;
                v687 -= 8;
                if (!v687)
                {
                  if (!v686) {
                    goto LABEL_1221;
                  }
                  void *v686 = v683;
                  --DWORD2(v910);
                  goto LABEL_1245;
                }
              }
              goto LABEL_1245;
            }
LABEL_1139:
            unsigned int v655 = v927;
            if (HIDWORD(v927) < v927)
            {
              ++HIDWORD(v927);
              *((void *)v926 + v651) = v649;
              if ((v633 & 2) == 0) {
                goto LABEL_1245;
              }
              goto LABEL_1209;
            }
          }
          else
          {
            unsigned int v655 = v927;
          }
          if (3 * v655 <= 4 * (HIDWORD(v927) - v928))
          {
            if (v655 >= 0x40) {
              v655 *= 2;
            }
            else {
              unsigned int v655 = 128;
            }
          }
          else if (v655 - HIDWORD(v927) >= v655 >> 3)
          {
            goto LABEL_1145;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&__s1, v655);
          unsigned int v655 = v927;
          v650 = (char *)v926;
LABEL_1145:
          unsigned int v656 = v655 - 1;
          unsigned int v657 = (v655 - 1) & ((v649 >> 4) ^ (v649 >> 9));
          v658 = &v650[8 * v657];
          uint64_t v659 = *(void *)v658;
          if (*(void *)v658 == -1)
          {
            v660 = 0;
LABEL_1201:
            if (v660) {
              v682 = v660;
            }
            else {
              v682 = v658;
            }
            if (*(void *)v682 != v649)
            {
              if (*(void *)v682 == -2) {
                --v928;
              }
              else {
                ++HIDWORD(v927);
              }
              *(void *)v682 = v649;
            }
          }
          else
          {
            v660 = 0;
            int v661 = 1;
            while (v659 != v649)
            {
              if (v660) {
                BOOL v662 = 0;
              }
              else {
                BOOL v662 = v659 == -2;
              }
              if (v662) {
                v660 = v658;
              }
              unsigned int v663 = v657 + v661++;
              unsigned int v657 = v663 & v656;
              v658 = &v650[8 * (v663 & v656)];
              uint64_t v659 = *(void *)v658;
              if (*(void *)v658 == -1) {
                goto LABEL_1201;
              }
            }
          }
          goto LABEL_1208;
        }
      }
      else if (!v629)
      {
        goto LABEL_1096;
      }
      if (!v624) {
        goto LABEL_1164;
      }
      if (v621)
      {
        if (*(void *)(v630 + 24))
        {
          llvm::MachineDominatorTree::applySplitCriticalEdges(v842);
          llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator();
        }
      }
      else
      {
        v621 = *(void **)(v630 + 24);
      }
      v635 = (char *)v909[1];
      uint64_t v636 = DWORD1(v910);
      if (v909[1] != v909[0])
      {
        unsigned int v640 = v910;
LABEL_1117:
        if (3 * v640 <= 4 * (DWORD1(v910) - DWORD2(v910)))
        {
          if (v640 >= 0x40) {
            v640 *= 2;
          }
          else {
            unsigned int v640 = 128;
          }
        }
        else if (v640 - DWORD1(v910) >= v640 >> 3)
        {
          goto LABEL_1119;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v909, v640);
        unsigned int v640 = v910;
        v635 = (char *)v909[1];
LABEL_1119:
        unsigned int v641 = v640 - 1;
        unsigned int v642 = (v640 - 1) & ((v630 >> 4) ^ (v630 >> 9));
        v643 = &v635[8 * v642];
        uint64_t v644 = *(void *)v643;
        if (*(void *)v643 == -1)
        {
          v645 = 0;
LABEL_1157:
          if (v645) {
            v664 = v645;
          }
          else {
            v664 = v643;
          }
          if (*(void *)v664 != v630)
          {
            if (*(void *)v664 == -2) {
              --DWORD2(v910);
            }
            else {
              ++DWORD1(v910);
            }
            *(void *)v664 = v630;
          }
        }
        else
        {
          v645 = 0;
          int v646 = 1;
          while (v644 != v630)
          {
            if (v645) {
              BOOL v647 = 0;
            }
            else {
              BOOL v647 = v644 == -2;
            }
            if (v647) {
              v645 = v643;
            }
            unsigned int v648 = v642 + v646++;
            unsigned int v642 = v648 & v641;
            v643 = &v635[8 * (v648 & v641)];
            uint64_t v644 = *(void *)v643;
            if (*(void *)v643 == -1) {
              goto LABEL_1157;
            }
          }
        }
        goto LABEL_1164;
      }
      if (DWORD1(v910))
      {
        v637 = 0;
        uint64_t v638 = 8 * DWORD1(v910);
        v639 = v909[1];
        while (*v639 != v630)
        {
          if (*v639 == -2) {
            v637 = v639;
          }
          ++v639;
          v638 -= 8;
          if (!v638)
          {
            if (!v637) {
              goto LABEL_1114;
            }
            void *v637 = v630;
            --DWORD2(v910);
            goto LABEL_1164;
          }
        }
        goto LABEL_1164;
      }
LABEL_1114:
      unsigned int v640 = v910;
      if (DWORD1(v910) >= v910) {
        goto LABEL_1117;
      }
      ++DWORD1(v910);
      *((void *)v909[1] + v636) = v630;
LABEL_1164:
      v665 = *(void **)(*(void *)v622 + 24);
      if (v619)
      {
        if (v665) {
          llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator();
        }
        v665 = v619;
      }
      v619 = sub_1CBA9DDE8(v665);
      uint64_t v666 = *(void *)v622;
      v667 = (char *)v926;
      uint64_t v668 = HIDWORD(v927);
      if (v926 != __s1)
      {
        unsigned int v672 = v927;
        goto LABEL_1179;
      }
      if (!HIDWORD(v927))
      {
LABEL_1176:
        unsigned int v672 = v927;
        if (HIDWORD(v927) < v927)
        {
          ++HIDWORD(v927);
          *((void *)v926 + v668) = v666;
          goto LABEL_1245;
        }
LABEL_1179:
        if (3 * v672 <= 4 * (HIDWORD(v927) - v928))
        {
          if (v672 >= 0x40) {
            v672 *= 2;
          }
          else {
            unsigned int v672 = 128;
          }
        }
        else if (v672 - HIDWORD(v927) >= v672 >> 3)
        {
          goto LABEL_1181;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&__s1, v672);
        unsigned int v672 = v927;
        v667 = (char *)v926;
LABEL_1181:
        unsigned int v673 = v672 - 1;
        unsigned int v674 = (v672 - 1) & ((v666 >> 4) ^ (v666 >> 9));
        v675 = &v667[8 * v674];
        uint64_t v676 = *(void *)v675;
        if (*(void *)v675 == -1)
        {
          v677 = 0;
LABEL_1193:
          if (v677) {
            v681 = v677;
          }
          else {
            v681 = v675;
          }
          if (*(void *)v681 != v666)
          {
            if (*(void *)v681 == -2) {
              --v928;
            }
            else {
              ++HIDWORD(v927);
            }
            *(void *)v681 = v666;
          }
        }
        else
        {
          v677 = 0;
          int v678 = 1;
          while (v676 != v666)
          {
            if (v677) {
              BOOL v679 = 0;
            }
            else {
              BOOL v679 = v676 == -2;
            }
            if (v679) {
              v677 = v675;
            }
            unsigned int v680 = v674 + v678++;
            unsigned int v674 = v680 & v673;
            v675 = &v667[8 * (v680 & v673)];
            uint64_t v676 = *(void *)v675;
            if (*(void *)v675 == -1) {
              goto LABEL_1193;
            }
          }
        }
        goto LABEL_1245;
      }
      v669 = 0;
      uint64_t v670 = 8 * HIDWORD(v927);
      v671 = v926;
      while (*v671 != v666)
      {
        if (*v671 == -2) {
          v669 = v671;
        }
        ++v671;
        v670 -= 8;
        if (!v670)
        {
          if (!v669) {
            goto LABEL_1176;
          }
          void *v669 = v666;
          --v928;
          break;
        }
      }
LABEL_1245:
      v622 += 16;
    }
    while (v622 != (unsigned char *)v623);
    uint64_t v615 = v864;
    if (v621)
    {
      int v699 = *(_DWORD *)(v844 + 264);
      if (v699)
      {
        uint64_t v700 = *(void *)(v844 + 248);
        unsigned int v701 = v699 - 1;
        uint64_t v702 = (v699 - 1) & ((v621 >> 4) ^ (v621 >> 9));
        v703 = *(void **)(v700 + 16 * v702);
        if (v621 == v703)
        {
LABEL_1278:
          if (*(void *)(v700 + 16 * v702 + 8)) {
            llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPreheader();
          }
        }
        else
        {
          int v704 = 1;
          while (v703 != (void *)-4096)
          {
            int v705 = v702 + v704++;
            uint64_t v702 = v705 & v701;
            v703 = *(void **)(v700 + 16 * v702);
            if (v621 == v703) {
              goto LABEL_1278;
            }
          }
        }
      }
      v706 = v621 + 6;
      v707 = (void *)v621[7];
      if (v707 != v621 + 6)
      {
        int v708 = v910 - 1;
        if (v909[1] == v909[0]) {
          unsigned int v709 = DWORD1(v910);
        }
        else {
          unsigned int v709 = v910;
        }
        v710 = (char *)v909[1] + 8 * v709;
        v711 = (char *)v909[1];
        while (1)
        {
          if (v711 == v909[0])
          {
            if (DWORD1(v910))
            {
              uint64_t v712 = 0;
              while (*(void **)((char *)v909[0] + v712) != v707)
              {
                v712 += 8;
                if (8 * DWORD1(v910) == v712)
                {
                  int v713 = DWORD1(v910);
                  goto LABEL_1305;
                }
              }
              v722 = (char *)v909[0] + v712;
              int v713 = DWORD1(v910);
              v711 = (char *)v909[0];
            }
            else
            {
              int v713 = 0;
LABEL_1305:
              v711 = (char *)v909[0];
              v722 = (char *)v909[0] + 8 * DWORD1(v910);
            }
          }
          else
          {
            unsigned int v714 = v708 & ((v707 >> 4) ^ (v707 >> 9));
            v715 = (char *)v909[1] + 8 * v714;
            v716 = *(void **)v715;
            if (*(void *)v715 == -1)
            {
              v717 = 0;
LABEL_1307:
              if (v717) {
                v715 = v717;
              }
              v721 = *(void **)v715;
            }
            else
            {
              v717 = 0;
              int v718 = 1;
              while (v716 != v707)
              {
                if (v717) {
                  BOOL v719 = 0;
                }
                else {
                  BOOL v719 = v716 == (void *)-2;
                }
                if (v719) {
                  v717 = v715;
                }
                unsigned int v720 = v714 + v718++;
                unsigned int v714 = v720 & v708;
                v715 = (char *)v909[1] + 8 * (v720 & v708);
                v716 = *(void **)v715;
                if (*(void *)v715 == -1) {
                  goto LABEL_1307;
                }
              }
              v721 = v707;
            }
            v722 = v721 == v707 ? v715 : v710;
            int v713 = DWORD1(v910);
            v711 = (char *)v909[1];
          }
          if (v711 != v909[0]) {
            int v713 = v910;
          }
          if (v722 != &v711[8 * v713]) {
            break;
          }
          v707 = (void *)v707[1];
          if (v707 == v706) {
            goto LABEL_1320;
          }
        }
        v706 = v707;
      }
LABEL_1320:
      sub_1CBA9DE54((uint64_t)&v902, v621, v706, v617, v859);
    }
    if (!v619)
    {
      uint64_t v301 = v617 | v301;
LABEL_1360:
      v262 = (void *)&unk_1CD91C000;
      goto LABEL_1361;
    }
    int v723 = v863;
    if (!v862) {
      int v723 = 1;
    }
    if (v723 != 1) {
      goto LABEL_1360;
    }
    v724 = v619 + 6;
    int v725 = v927 - 1;
    v726 = v619 + 6;
    v262 = (void *)&unk_1CD91C000;
    while (1)
    {
      v726 = (void *)(*v726 & 0xFFFFFFFFFFFFFFF8);
      if (v724 == v726) {
        break;
      }
      if (v926 == __s1)
      {
        if (HIDWORD(v927))
        {
          uint64_t v727 = 0;
          while (*(void **)((char *)v926 + v727) != v726)
          {
            v727 += 8;
            if (8 * HIDWORD(v927) == v727)
            {
              unsigned int v728 = HIDWORD(v927);
              goto LABEL_1347;
            }
          }
          v730 = (char *)v926 + v727;
          unsigned int v728 = HIDWORD(v927);
          v737 = v926;
        }
        else
        {
          unsigned int v728 = 0;
LABEL_1347:
          v737 = v926;
          v730 = (char *)v926 + 8 * HIDWORD(v927);
        }
      }
      else
      {
        unsigned int v729 = v725 & ((v726 >> 4) ^ (v726 >> 9));
        v730 = (char *)v926 + 8 * v729;
        v731 = *(void **)v730;
        if (*(void *)v730 == -1)
        {
          v732 = 0;
LABEL_1349:
          if (v732) {
            v730 = v732;
          }
          v736 = *(void **)v730;
        }
        else
        {
          v732 = 0;
          int v733 = 1;
          while (v731 != v726)
          {
            if (v732) {
              BOOL v734 = 0;
            }
            else {
              BOOL v734 = v731 == (void *)-2;
            }
            if (v734) {
              v732 = v730;
            }
            unsigned int v735 = v729 + v733++;
            unsigned int v729 = v735 & v725;
            v730 = (char *)v926 + 8 * (v735 & v725);
            v731 = *(void **)v730;
            if (*(void *)v730 == -1) {
              goto LABEL_1349;
            }
          }
          v736 = v726;
        }
        if (v736 != v726) {
          v730 = (char *)v926 + 8 * v927;
        }
        unsigned int v728 = HIDWORD(v927);
        v737 = __s1;
      }
      if (v926 != v737) {
        unsigned int v728 = v927;
      }
      v738 = v726;
      if (v730 != (char *)v926 + 8 * v728) {
        goto LABEL_1368;
      }
    }
    v738 = (void *)v619[7];
LABEL_1368:
    if (v738 == v724)
    {
      v884[0] = 0;
    }
    else
    {
      v739 = (unsigned __int8 *)v738[7];
      v884[0] = v739;
      if (v739) {
        llvm::MetadataTracking::track((uint64_t)v884, v739, 2);
      }
    }
    v740 = v738;
    if ((void)v864 == 1)
    {
LABEL_1373:
      if (v724 != v726 && v740 == v738 && v740 != v724) {
        v740 = (void *)v738[1];
      }
      goto LABEL_1418;
    }
    if (v926 == __s1) {
      v741 = (uint64_t *)((char *)&v927 + 4);
    }
    else {
      v741 = &v927;
    }
    uint64_t v742 = *(unsigned int *)v741;
    if (v742)
    {
      uint64_t v743 = 8 * v742;
      v744 = (unint64_t *)v926;
      while (*v744 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v744;
        v743 -= 8;
        if (!v743)
        {
          v740 = v738;
          goto LABEL_1409;
        }
      }
    }
    else
    {
      v744 = (unint64_t *)v926;
    }
    v745 = (unint64_t *)((char *)v926 + 8 * v742);
    v740 = v738;
    if (v744 != v745)
    {
      int v746 = 0;
      unint64_t v747 = *v744;
      v748 = v738;
LABEL_1389:
      if (*(void **)(v747 + 24) != v619) {
        goto LABEL_1404;
      }
      int v749 = **(unsigned __int16 **)(v747 + 16);
      if ((v749 - 4581) < 0xC) {
        goto LABEL_1404;
      }
      v850 = v748;
      LODWORD(v862) = v746;
      unsigned int v857 = v301;
      uint64_t v750 = 0;
      char v751 = 1;
      do
      {
        unsigned int v752 = sub_1CBC7A3F8(v749, (unsigned __int16)word_1CDB158B0[2 * v750]);
        if ((v751 & 1) == 0) {
          break;
        }
        char v751 = 0;
        uint64_t v750 = 1;
      }
      while (v752 == -1);
      uint64_t v301 = v857;
      if (v752 == -1)
      {
        int v746 = v862;
        v748 = v850;
        goto LABEL_1404;
      }
      uint64_t v753 = *(unsigned int *)(*(void *)(v747 + 32) + 32 * v752 + 16);
      v740 = v619 + 6;
      if (v850 != v724)
      {
        v754 = v850;
        while (*(_WORD *)v754[2] != 8277 || *(void *)(v754[4] + 16) != v753)
        {
          v754 = (void *)v754[1];
          if (v754 == v724)
          {
            v740 = v850;
            goto LABEL_1403;
          }
        }
        v740 = (void *)v754[1];
      }
LABEL_1403:
      int v746 = (1 << v753) | v862;
      v748 = v740;
      if (v746 != 3)
      {
LABEL_1404:
        v755 = v744 + 1;
        while (v755 != v745)
        {
          unint64_t v756 = *v755++;
          unint64_t v747 = v756;
          if (v756 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v744 = v755 - 1;
            goto LABEL_1389;
          }
        }
        v740 = v748;
      }
    }
LABEL_1409:
    if (v740 != v724)
    {
      v262 = (void *)&unk_1CD91C000;
      uint64_t v615 = v864;
      while (1)
      {
        unsigned int v757 = *(unsigned __int16 *)v740[2] - 724;
        if (v757 > 4 || v757 == 2) {
          goto LABEL_1373;
        }
        v740 = (void *)v740[1];
        if (v740 == v724)
        {
          v740 = v619 + 6;
          goto LABEL_1418;
        }
      }
    }
    v740 = v619 + 6;
    v262 = (void *)&unk_1CD91C000;
    uint64_t v615 = v864;
LABEL_1418:
    uint64_t v759 = *(void *)(v874[0] + 8);
    v760 = (llvm::MachineFunction *)v619[4];
    v885[0] = v884[0];
    if (v884[0]) {
      llvm::MetadataTracking::track((uint64_t)v885, v884[0], 2);
    }
    v761 = llvm::MachineFunction::CreateMachineInstr(v760, v759 + 231600, v885, 0);
    if (v885[0])
    {
      int v766 = *v885[0];
      if ((v766 - 4) > 0x1E)
      {
        if ((v766 - 3) >= 0xFFFFFFFE) {
          v769 = v885[0];
        }
        else {
          v769 = 0;
        }
        if ((v766 - 3) < 0xFFFFFFFE)
        {
          v262 = (void *)&unk_1CD91C000;
          uint64_t v615 = v864;
          if (v766 == 3) {
            *((void *)v885[0] + 1) = 0;
          }
          goto LABEL_1421;
        }
        unint64_t v768 = (unint64_t)(v769 + 8);
      }
      else
      {
        v262 = (void *)&unk_1CD91C000;
        uint64_t v615 = v864;
        if ((v885[0][1] & 0x7F) != 2 && !*((_DWORD *)v885[0] + 3)) {
          goto LABEL_1421;
        }
        uint64_t v767 = *((void *)v885[0] + 2);
        if ((v767 & 4) == 0) {
          goto LABEL_1421;
        }
        unint64_t v768 = v767 & 0xFFFFFFFFFFFFFFF8;
        if (!v768) {
          goto LABEL_1421;
        }
      }
      v891 = v885;
      sub_1CC5FA668(v768 + 16, &v891);
      v262 = (void *)&unk_1CD91C000;
      uint64_t v615 = v864;
    }
LABEL_1421:
    if (v724 != v740 && (*((_WORD *)v740 + 22) & 4) != 0) {
      *((_WORD *)v761 + 22) |= 0xCu;
    }
    sub_1CC31973C(v619 + 5, v740, (uint64_t)v761);
    LODWORD(v891) = 1;
    *(void *)&v892[0] = 0;
    *((void *)&v892[0] + 1) = 1 << v615;
    llvm::MachineInstr::addOperand(v761, v760, (const llvm::MachineOperand *)&v891);
    if (v884[0])
    {
      int v762 = *v884[0];
      if ((v762 - 4) > 0x1E)
      {
        if ((v762 - 3) >= 0xFFFFFFFE) {
          v765 = v884[0];
        }
        else {
          v765 = 0;
        }
        if ((v762 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v764 = (unint64_t)(v765 + 8);
          goto LABEL_1436;
        }
        if (v762 == 3) {
          *((void *)v884[0] + 1) = 0;
        }
      }
      else if ((v884[0][1] & 0x7F) == 2 || *((_DWORD *)v884[0] + 3))
      {
        uint64_t v763 = *((void *)v884[0] + 2);
        if ((v763 & 4) != 0)
        {
          unint64_t v764 = v763 & 0xFFFFFFFFFFFFFFF8;
          if (v764)
          {
LABEL_1436:
            v891 = v884;
            sub_1CC5FA668(v764 + 16, &v891);
          }
        }
      }
    }
LABEL_1361:
    if (v909[1] != v909[0]) {
      free(v909[1]);
    }
    if (v926 != __s1) {
      free(v926);
    }
LABEL_1365:
    ++v615;
  }
  while (v615 != 10);
  if (v853)
  {
    v770 = (void *)v840[41];
    if (v770 == v845)
    {
      v771 = 0;
    }
    else
    {
      v771 = 0;
      char v772 = BYTE4(v870);
      do
      {
        for (uint64_t m = v770[7]; (void *)m != v770 + 6; uint64_t m = *(void *)(m + 8))
        {
          uint64_t v774 = *(void *)(*(void *)(m + 16) + 16) & 0x800200;
          char v775 = v774 == 8389120;
          if (v772)
          {
            uint64_t v776 = v301;
            sub_1CBA9C91C((uint64_t *)&__s1, m);
            v777 = __s1;
            if (__s1)
            {
              unint64_t v779 = ((unint64_t)__s1 >> 1) & ~(-1 << ((unint64_t)__s1 >> 58));
            }
            else
            {
              v778 = *(unint64_t **)__s1;
              unint64_t v779 = **(void **)__s1;
              if (__s1)
              {
                if (v778 != (unint64_t *)((char *)__s1 + 16)) {
                  free(v778);
                }
                MEMORY[0x1D25D9CE0](v777, 0x1080C40EF38A13ELL);
              }
            }
            char v775 = (v774 == 8389120) | v779;
            v262 = (void *)&unk_1CD91C000;
            uint64_t v301 = v776;
          }
          if (v775)
          {
            v771 = (void *)m;
            goto LABEL_1473;
          }
        }
        v770 = (void *)v770[1];
      }
      while (v770 != v845);
    }
    v770 = 0;
LABEL_1473:
    v780 = sub_1CBA9E42C((uint64_t)&v897, (uint64_t)v770);
    v781 = &v898;
    if (v897)
    {
      unsigned int v782 = 16;
    }
    else
    {
      v781 = (void *)v898;
      unsigned int v782 = v899[0];
    }
    if (&v781[13 * v782] != v780 && *((_DWORD *)v780 + 7) != *((_DWORD *)v780 + 8))
    {
      v770 = (void *)v840[41];
      v771 = v770 + 6;
    }
    if (v770) {
      sub_1CBA9DE54((uint64_t)&v902, v770, v771, WORD2(v870), v859);
    }
  }
  if (v889[0])
  {
    int v783 = *v889[0];
    if ((v783 - 4) > 0x1E)
    {
      if ((v783 - 3) >= 0xFFFFFFFE) {
        v786 = v889[0];
      }
      else {
        v786 = 0;
      }
      if ((v783 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v785 = (unint64_t)(v786 + 8);
        goto LABEL_1493;
      }
      if (v783 == 3) {
        *((void *)v889[0] + 1) = 0;
      }
    }
    else if ((v889[0][1] & 0x7F) == 2 || *((_DWORD *)v889[0] + 3))
    {
      uint64_t v784 = *((void *)v889[0] + 2);
      if ((v784 & 4) != 0)
      {
        unint64_t v785 = v784 & 0xFFFFFFFFFFFFFFF8;
        if (v785)
        {
LABEL_1493:
          __s1 = v889;
          sub_1CC5FA668(v785 + 16, &__s1);
        }
      }
    }
  }
LABEL_513:
  v891 = (void *)1;
  v892[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v892[1] = v892[0];
  v892[2] = v892[0];
  long long v893 = v892[0];
  v894 = v896;
  uint64_t v895 = 0x800000000;
  __s1 = (void *)1;
  for (uint64_t n = 8; n != 1672; n += 104)
    *(void **)((char *)&__s1 + n) = (void *)-4096;
  int v856 = v301;
  v932[0] = 1;
  for (iuint64_t i = 1680; ii != 3344; ii += 104)
    *(void **)((char *)&__s1 + ii) = (void *)-4096;
  sub_1CBA9CCC0((uint64_t)&__s1, (uint64_t)v840, v847);
  v304 = (const llvm::TargetSubtargetInfo *)v840[2];
  (*(void (**)(const llvm::TargetSubtargetInfo *))(*(void *)v304 + 104))(v304);
  long long v911 = xmmword_1CFB28DF0;
  long long v912 = unk_1CFB28E00;
  long long v910 = unk_1CFB28DE0;
  *(_OWORD *)v909 = llvm::MCSchedModel::Default;
  long long v915 = unk_1CFB28DE0;
  long long v916 = xmmword_1CFB28DF0;
  long long v917 = unk_1CFB28E00;
  v913 = 0;
  uint64_t v918 = 0;
  long long v914 = llvm::MCSchedModel::Default;
  long long v921 = 0u;
  long long v920 = 0u;
  long long v919 = 0u;
  v922 = v924;
  uint64_t v923 = v262[24];
  v924[8] = 0;
  llvm::TargetSchedModel::init((llvm::TargetSchedModel *)v909, v304);
  v305 = (void *)v840[41];
  if (v305 != v845)
  {
    uint64_t v863 = (uint64_t)v304;
    do
    {
      uint64_t v862 = (uint64_t)v305;
      uint64_t v307 = v305[6];
      v306 = v305 + 6;
      unint64_t v308 = v307 & 0xFFFFFFFFFFFFFFF8;
      if ((v307 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(unsigned char *)v308 & 4) == 0)
      {
        while ((*(_WORD *)(v308 + 44) & 4) != 0)
          unint64_t v308 = *(void *)v308 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((void *)v308 != v306)
      {
        char v309 = (char)v891;
        unsigned int v310 = v308 >> 4;
        if (v891)
        {
          int v311 = 8;
          v312 = v892;
        }
        else
        {
          int v311 = DWORD2(v892[0]);
          if (!DWORD2(v892[0])) {
            goto LABEL_534;
          }
          v312 = *(_OWORD **)&v892[0];
        }
        int v313 = v311 - 1;
        unsigned int v314 = v313 & (v310 ^ (v308 >> 9));
        uint64_t v315 = *((void *)v312 + v314);
        if (v308 == v315) {
          goto LABEL_699;
        }
        int v316 = 1;
        while (v315 != -4096)
        {
          unsigned int v317 = v314 + v316++;
          unsigned int v314 = v317 & v313;
          uint64_t v315 = *((void *)v312 + v314);
          if (v308 == v315) {
            goto LABEL_699;
          }
        }
LABEL_534:
        int v318 = **(unsigned __int16 **)(v308 + 16);
        if (v318 == 4825)
        {
          unint64_t v321 = *(void *)v308 & 0xFFFFFFFFFFFFFFF8;
          unsigned int v322 = sub_1CBC7A3F8(4825, 0x51u);
          if (!v321 || (*(unsigned char *)v321 & 4) == 0)
          {
            while ((*(_WORD *)(v321 + 44) & 4) != 0)
              unint64_t v321 = *(void *)v321 & 0xFFFFFFFFFFFFFFF8;
          }
          if ((void *)v321 != v306)
          {
            unsigned int v323 = 0;
            uint64_t v324 = v322;
            while (1)
            {
              unint64_t v325 = *(void *)v321 & 0xFFFFFFFFFFFFFFF8;
              if (!v325 || (*(unsigned char *)v325 & 4) == 0)
              {
                while ((*(_WORD *)(v325 + 44) & 4) != 0)
                  unint64_t v325 = *(void *)v325 & 0xFFFFFFFFFFFFFFF8;
              }
              unsigned int v326 = v321 >> 4;
              if (v891)
              {
                int v327 = 8;
                v328 = v892;
              }
              else
              {
                int v327 = DWORD2(v892[0]);
                if (!DWORD2(v892[0])) {
                  goto LABEL_559;
                }
                v328 = *(_OWORD **)&v892[0];
              }
              int v329 = v327 - 1;
              unsigned int v330 = v329 & (v326 ^ (v321 >> 9));
              uint64_t v331 = *((void *)v328 + v330);
              if (v321 != v331) {
                break;
              }
LABEL_588:
              unint64_t v321 = v325;
              if ((void *)v325 == v306)
              {
LABEL_592:
                if (v323)
                {
                  uint64_t v353 = *(void *)(v308 + 32) + 32 * sub_1CBC7A3F8(4825, 0x51u);
                  *(void *)(v353 + 16) = v323 | *(_DWORD *)(v353 + 16);
                }
                goto LABEL_594;
              }
            }
            int v332 = 1;
            while (v331 != -4096)
            {
              unsigned int v333 = v330 + v332++;
              unsigned int v330 = v333 & v329;
              uint64_t v331 = *((void *)v328 + v330);
              if (v321 == v331) {
                goto LABEL_588;
              }
            }
LABEL_559:
            uint64_t v334 = *(void *)(v321 + 16);
            if (*(_WORD *)v334 != 4825) {
              goto LABEL_592;
            }
            uint64_t v335 = *(void *)(v334 + 16);
            uint64_t v336 = ~v335 & 0x800200;
            uint64_t v337 = v335 & 0x800100;
            if (v336) {
              BOOL v338 = v337 == 8388864;
            }
            else {
              BOOL v338 = 1;
            }
            if (v338) {
              goto LABEL_588;
            }
            int v339 = *(_DWORD *)(*(void *)(v321 + 32) + 32 * v324 + 16);
            v902 = (unsigned __int8 *)v321;
            if (v891)
            {
              int v340 = 8;
              v341 = v892;
LABEL_568:
              unsigned int v342 = v326 ^ (v321 >> 9);
              int v343 = v340 - 1;
              unsigned int v344 = (v340 - 1) & v342;
              v345 = (void *)v341 + v344;
              uint64_t v346 = *v345;
              if (v321 != *v345)
              {
                v347 = 0;
                int v348 = 1;
                while (v346 != -4096)
                {
                  if (v347) {
                    BOOL v349 = 0;
                  }
                  else {
                    BOOL v349 = v346 == -8192;
                  }
                  if (v349) {
                    v347 = v345;
                  }
                  unsigned int v350 = v344 + v348++;
                  unsigned int v344 = v350 & v343;
                  v345 = (void *)v341 + v344;
                  uint64_t v346 = *v345;
                  if (v321 == *v345) {
                    goto LABEL_583;
                  }
                }
                if (v347) {
                  v351 = v347;
                }
                else {
                  v351 = v345;
                }
                goto LABEL_581;
              }
            }
            else
            {
              int v340 = DWORD2(v892[0]);
              if (DWORD2(v892[0]))
              {
                v341 = *(_OWORD **)&v892[0];
                goto LABEL_568;
              }
              v351 = 0;
LABEL_581:
              v352 = sub_1CB938A98((uint64_t)&v891, (uint64_t)&v902, &v902, v351);
              void *v352 = v902;
              if (v895 >= (unint64_t)HIDWORD(v895)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v894 + v895) = v902;
              LODWORD(v895) = v895 + 1;
            }
LABEL_583:
            v323 |= v339;
            unint64_t v325 = *(void *)v321 & 0xFFFFFFFFFFFFFFF8;
            if (!v325 || (*(unsigned char *)v325 & 4) == 0)
            {
              while ((*(_WORD *)(v325 + 44) & 4) != 0)
                unint64_t v325 = *(void *)v325 & 0xFFFFFFFFFFFFFFF8;
            }
            goto LABEL_588;
          }
LABEL_594:
          uint64_t v354 = *(void *)(v308 + 24);
          if (v354 != *v845)
          {
            int v355 = *(_DWORD *)(v844 + 264);
            if (!v355) {
              goto LABEL_601;
            }
            uint64_t v356 = *(void *)(v844 + 248);
            unsigned int v357 = v355 - 1;
            uint64_t v358 = (v355 - 1) & ((v354 >> 4) ^ (v354 >> 9));
            uint64_t v359 = *(void *)(v356 + 16 * v358);
            if (v354 == v359)
            {
LABEL_600:
              if (!*(void *)(v356 + 16 * v358 + 8)) {
                goto LABEL_601;
              }
            }
            else
            {
              int v360 = 1;
              while (v359 != -4096)
              {
                int v361 = v358 + v360++;
                uint64_t v358 = v361 & v357;
                uint64_t v359 = *(void *)(v356 + 16 * v358);
                if (v354 == v359) {
                  goto LABEL_600;
                }
              }
LABEL_601:
              v362 = sub_1CBA9E42C((uint64_t)&__s1, v354);
              v363 = (char *)&v926;
              if (__s1)
              {
                unsigned int v364 = 16;
              }
              else
              {
                v363 = (char *)v926;
                unsigned int v364 = v927;
              }
              if (&v363[104 * v364] == (char *)v362 || *((_DWORD *)v362 + 7) == *((_DWORD *)v362 + 8)) {
                goto LABEL_699;
              }
            }
LABEL_606:
            v902 = (unsigned __int8 *)v308;
            if (v891)
            {
              int v365 = 8;
              v366 = v892;
            }
            else
            {
              int v365 = DWORD2(v892[0]);
              if (!DWORD2(v892[0])) {
                goto LABEL_706;
              }
              v366 = *(_OWORD **)&v892[0];
            }
            int v394 = v365 - 1;
            unsigned int v395 = v394 & (v310 ^ (v308 >> 9));
            v396 = (void *)v366 + v395;
            uint64_t v397 = *v396;
            if (v308 == *v396) {
              goto LABEL_699;
            }
            v398 = 0;
            int v399 = 1;
            while (v397 != -4096)
            {
              if (v398) {
                BOOL v400 = 0;
              }
              else {
                BOOL v400 = v397 == -8192;
              }
              if (v400) {
                v398 = v396;
              }
              unsigned int v401 = v395 + v399++;
              unsigned int v395 = v401 & v394;
              v396 = (void *)v366 + v395;
              uint64_t v397 = *v396;
              if (v308 == *v396) {
                goto LABEL_699;
              }
            }
LABEL_694:
            if (v398) {
              v412 = v398;
            }
            else {
              v412 = v396;
            }
            goto LABEL_697;
          }
          unsigned int v382 = 0;
          unint64_t v383 = *(void *)(v354 + 48) & 0xFFFFFFFFFFFFFFF8;
          if (v891) {
            v384 = v892;
          }
          else {
            v384 = *(_OWORD **)&v892[0];
          }
          if (v891) {
            int v385 = 7;
          }
          else {
            int v385 = DWORD2(v892[0]) - 1;
          }
          unint64_t v386 = v308;
          while (1)
          {
LABEL_647:
            if (!v383 || (unint64_t v387 = *(void *)(v354 + 48) & 0xFFFFFFFFFFFFFFF8, (*(unsigned char *)v383 & 4) == 0))
            {
              unint64_t v387 = *(void *)(v354 + 48) & 0xFFFFFFFFFFFFFFF8;
              if ((*(_WORD *)(v383 + 44) & 4) != 0)
              {
                unint64_t v387 = *(void *)(v354 + 48) & 0xFFFFFFFFFFFFFFF8;
                do
                  unint64_t v387 = *(void *)v387 & 0xFFFFFFFFFFFFFFF8;
                while ((*(_WORD *)(v387 + 44) & 4) != 0);
              }
            }
            if (v386 == v387) {
              goto LABEL_606;
            }
            if (!v386 || (*(unsigned char *)v386 & 4) == 0)
            {
              while ((*(_WORD *)(v386 + 44) & 8) != 0)
                unint64_t v386 = *(void *)(v386 + 8);
            }
            unint64_t v386 = *(void *)(v386 + 8);
            if (v891 & 1 | (DWORD2(v892[0]) != 0))
            {
              unsigned int v388 = ((v386 >> 4) ^ (v386 >> 9)) & v385;
              uint64_t v389 = *((void *)v384 + v388);
              if (v386 == v389) {
                continue;
              }
              int v390 = 1;
              while (v389 != -4096)
              {
                unsigned int v391 = v388 + v390++;
                unsigned int v388 = v391 & v385;
                uint64_t v389 = *((void *)v384 + v388);
                if (v386 == v389) {
                  goto LABEL_647;
                }
              }
            }
            v392 = *(_WORD **)(v386 + 16);
            if (*v392 != 4826)
            {
              unsigned int v393 = (unsigned __int16)v392[3];
              if (*(_WORD *)(*((void *)&v911 + 1) + 24 * v393 + 16)) {
                v382 += *(__int16 *)(*(void *)(v863 + 144)
              }
                                   + 4 * *(unsigned __int16 *)(*((void *)&v911 + 1) + 24 * v393 + 14));
              if (v382 < 0x14) {
                continue;
              }
            }
            goto LABEL_699;
          }
        }
        if (v318 != 4826) {
          goto LABEL_699;
        }
        int v319 = sub_1CBC7A3F8(4826, 0x52u);
        if (v319 < 0) {
          int v320 = -1;
        }
        else {
          int v320 = *(_DWORD *)(*(void *)(v308 + 32) + 32 * (unsigned __int16)v319 + 16);
        }
        unint64_t v367 = *(void *)v308 & 0xFFFFFFFFFFFFFFF8;
        if (!v367 || (*(unsigned char *)v367 & 4) == 0)
        {
          while ((*(_WORD *)(v367 + 44) & 4) != 0)
            unint64_t v367 = *(void *)v367 & 0xFFFFFFFFFFFFFFF8;
        }
        if ((void *)v367 == v306) {
          goto LABEL_699;
        }
        v368 = *(_OWORD **)&v892[0];
        int v369 = DWORD2(v892[0]) - 1;
        char v370 = v309 | (DWORD2(v892[0]) != 0);
        if (v309)
        {
          v368 = v892;
          int v369 = 7;
        }
        while (1)
        {
          unint64_t v371 = v367;
          unint64_t v367 = *(void *)v367 & 0xFFFFFFFFFFFFFFF8;
          if (!v367 || (*(unsigned char *)v367 & 4) == 0)
          {
            while ((*(_WORD *)(v367 + 44) & 4) != 0)
              unint64_t v367 = *(void *)v367 & 0xFFFFFFFFFFFFFFF8;
          }
          if ((v370 & 1) == 0) {
            goto LABEL_629;
          }
          unsigned int v372 = ((v371 >> 4) ^ (v371 >> 9)) & v369;
          uint64_t v373 = *((void *)v368 + v372);
          if (v371 != v373) {
            break;
          }
LABEL_638:
          if ((void *)v367 == v306) {
            goto LABEL_699;
          }
        }
        int v374 = 1;
        while (v373 != -4096)
        {
          unsigned int v375 = v372 + v374++;
          unsigned int v372 = v375 & v369;
          uint64_t v373 = *((void *)v368 + v372);
          if (v371 == v373) {
            goto LABEL_638;
          }
        }
LABEL_629:
        uint64_t v376 = *(void *)(v371 + 16);
        if (*(_WORD *)v376 != 4826) {
          goto LABEL_699;
        }
        uint64_t v377 = *(void *)(v376 + 16);
        uint64_t v378 = ~v377 & 0x800200;
        uint64_t v379 = v377 & 0x800100;
        if (v378) {
          BOOL v380 = v379 == 8388864;
        }
        else {
          BOOL v380 = 1;
        }
        if (v380) {
          goto LABEL_638;
        }
        int v381 = v319 < 0 ? -1 : *(_DWORD *)(*(void *)(v371 + 32) + 32 * (unsigned __int16)v319 + 16);
        if (v381 != v320) {
          goto LABEL_638;
        }
        unsigned int v402 = sub_1CBC7A3F8(4826, 0x51u);
        uint64_t v403 = *(void *)(v371 + 32) + 32 * v402;
        *(void *)(v403 + 16) = (*(_DWORD *)(v403 + 16) | *(_DWORD *)(*(void *)(v308 + 32)
                                                                                   + 32 * v402
                                                                                   + 16));
        v902 = (unsigned __int8 *)v308;
        if (v891)
        {
          int v404 = 8;
          v405 = v892;
LABEL_684:
          int v406 = v404 - 1;
          unsigned int v407 = v406 & (v310 ^ (v308 >> 9));
          v396 = (void *)v405 + v407;
          uint64_t v408 = *v396;
          if (v308 == *v396) {
            goto LABEL_699;
          }
          v398 = 0;
          int v409 = 1;
          while (v408 != -4096)
          {
            if (v398) {
              BOOL v410 = 0;
            }
            else {
              BOOL v410 = v408 == -8192;
            }
            if (v410) {
              v398 = v396;
            }
            unsigned int v411 = v407 + v409++;
            unsigned int v407 = v411 & v406;
            v396 = (void *)v405 + v407;
            uint64_t v408 = *v396;
            if (v308 == *v396) {
              goto LABEL_699;
            }
          }
          goto LABEL_694;
        }
        int v404 = DWORD2(v892[0]);
        if (DWORD2(v892[0]))
        {
          v405 = *(_OWORD **)&v892[0];
          goto LABEL_684;
        }
LABEL_706:
        v412 = 0;
LABEL_697:
        v413 = sub_1CB938A98((uint64_t)&v891, (uint64_t)&v902, &v902, v412);
        void *v413 = v902;
        if (v895 >= (unint64_t)HIDWORD(v895)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v894 + v895) = v902;
        LODWORD(v895) = v895 + 1;
LABEL_699:
        unint64_t v308 = *(void *)v308 & 0xFFFFFFFFFFFFFFF8;
        if (!v308 || (*(unsigned char *)v308 & 4) == 0)
        {
          while ((*(_WORD *)(v308 + 44) & 4) != 0)
            unint64_t v308 = *(void *)v308 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      v305 = *(void **)(v862 + 8);
    }
    while (v305 != v845);
  }
  if (v922 != v924) {
    free(v922);
  }
  sub_1CBA9E4F0((uint64_t)v932);
  sub_1CBA9E4F0((uint64_t)&__s1);
  v414 = v843;
  if (v895)
  {
    v415 = (llvm::MachineInstr **)v894;
    uint64_t v416 = 8 * v895;
    do
    {
      v417 = *v415++;
      llvm::MachineInstr::eraseFromParent(v417);
      v416 -= 8;
    }
    while (v416);
  }
  v418 = v858;
  if (BYTE6(v870))
  {
    uint64_t v419 = v867;
    uint64_t v420 = *((void *)&v868 + 1);
    if (*((void *)&v868 + 1))
    {
      if ((**((unsigned char **)&v868 + 1) & 4) == 0)
      {
        while ((*(_WORD *)(v420 + 44) & 8) != 0)
          uint64_t v420 = *(void *)(v420 + 8);
      }
      v421 = (unint64_t **)(v420 + 8);
    }
    else
    {
      v421 = (unint64_t **)(v867 + 56);
    }
    v422 = *v421;
    uint64_t v423 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v843 + 104))(v843);
    v902 = 0;
    uint64_t v424 = 396528;
    if (!v843[327]) {
      uint64_t v424 = 396480;
    }
    uint64_t v425 = *(void *)(v423 + 8) + v424;
    v426 = *(llvm::MachineFunction **)(v419 + 32);
    v909[0] = 0;
    v427 = llvm::MachineFunction::CreateMachineInstr(v426, v425, (unsigned __int8 **)v909, 0);
    if (v909[0])
    {
      int v796 = *(unsigned __int8 *)v909[0];
      if ((v796 - 4) > 0x1E)
      {
        if ((v796 - 3) >= 0xFFFFFFFE) {
          v821 = v909[0];
        }
        else {
          v821 = 0;
        }
        if ((v796 - 3) < 0xFFFFFFFE)
        {
          v414 = v843;
          if (v796 == 3) {
            *((void *)v909[0] + 1) = 0;
          }
          goto LABEL_723;
        }
        unint64_t v798 = (unint64_t)v821 + 8;
      }
      else
      {
        v414 = v843;
        if ((*((unsigned char *)v909[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v909[0] + 3)) {
          goto LABEL_723;
        }
        uint64_t v797 = *((void *)v909[0] + 2);
        if ((v797 & 4) == 0) {
          goto LABEL_723;
        }
        unint64_t v798 = v797 & 0xFFFFFFFFFFFFFFF8;
        if (!v798) {
          goto LABEL_723;
        }
      }
      __s1 = v909;
      sub_1CC5FA668(v798 + 16, &__s1);
      v414 = v843;
    }
LABEL_723:
    uint64_t v428 = *(void *)(v419 + 40);
    *((void *)v427 + 3) = v428;
    uint64_t v429 = *(void *)(v428 + 32);
    uint64_t v430 = *((unsigned int *)v427 + 10);
    if (v430)
    {
      uint64_t v546 = *((void *)v427 + 4);
      uint64_t v547 = *(void *)(v429 + 40);
      uint64_t v548 = 32 * v430;
      do
      {
        if (!*(unsigned char *)v546)
        {
          uint64_t v549 = *(unsigned int *)(v546 + 4);
          if ((int)v549 >= 0) {
            v550 = (uint64_t *)(*(void *)(v547 + 272) + 8 * v549);
          }
          else {
            v550 = (uint64_t *)(*(void *)(v547 + 24) + 16 * (v549 & 0x7FFFFFFF) + 8);
          }
          uint64_t v551 = *v550;
          if (*v550)
          {
            uint64_t v552 = *(void *)(v551 + 16);
            *(void *)(v551 + 16) = v546;
            *(void *)(v546 + 16) = v552;
            if (*(unsigned char *)(v546 + 3))
            {
              *(void *)(v546 + 24) = v551;
            }
            else
            {
              *(void *)(v546 + 24) = 0;
              v550 = (uint64_t *)(v552 + 24);
            }
          }
          else
          {
            *(void *)(v546 + 16) = v546;
            *(void *)(v546 + 24) = 0;
          }
          uint64_t *v550 = v546;
        }
        v546 += 32;
        v548 -= 32;
      }
      while (v548);
    }
    uint64_t v431 = *(void *)(v429 + 728);
    if (v431) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v431 + 24))(v431, v427);
    }
    unint64_t v432 = *v422 & 0xFFFFFFFFFFFFFFF8;
    *(void *)v427 = v432 | *(void *)v427 & 7;
    *((void *)v427 + 1) = v422;
    *(void *)(v432 + 8) = v427;
    unint64_t *v422 = *v422 & 7 | (unint64_t)v427;
    LODWORD(__s1) = 1;
    v926 = 0;
    uint64_t v927 = 1;
    llvm::MachineInstr::addOperand(v427, v426, (const llvm::MachineOperand *)&__s1);
    LODWORD(__s1) = 1;
    v926 = 0;
    uint64_t v927 = 2;
    llvm::MachineInstr::addOperand(v427, v426, (const llvm::MachineOperand *)&__s1);
    v418 = v858;
    if (v902)
    {
      int v433 = *v902;
      if ((v433 - 4) > 0x1E)
      {
        if ((v433 - 3) >= 0xFFFFFFFE) {
          v534 = v902;
        }
        else {
          v534 = 0;
        }
        if ((v433 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v535 = (unint64_t)(v534 + 8);
          goto LABEL_876;
        }
        if (v433 == 3) {
          *((void *)v902 + 1) = 0;
        }
      }
      else if ((v902[1] & 0x7F) == 2 || *((_DWORD *)v902 + 3))
      {
        uint64_t v787 = *((void *)v902 + 2);
        if ((v787 & 4) != 0)
        {
          unint64_t v535 = v787 & 0xFFFFFFFFFFFFFFF8;
          if (v535)
          {
LABEL_876:
            __s1 = &v902;
            sub_1CC5FA668(v535 + 16, &__s1);
          }
        }
      }
    }
  }
  if (HIBYTE(v870))
  {
    uint64_t v434 = *((void *)&v867 + 1);
    uint64_t v435 = v869;
    if ((void)v869)
    {
      if ((*(unsigned char *)v869 & 4) == 0)
      {
        while ((*(_WORD *)(v435 + 44) & 8) != 0)
          uint64_t v435 = *(void *)(v435 + 8);
      }
      v436 = (unint64_t **)(v435 + 8);
    }
    else
    {
      v436 = (unint64_t **)(*((void *)&v867 + 1) + 56);
    }
    v437 = *v436;
    int v438 = v871;
    uint64_t v439 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v414 + 104))(v414);
    uint64_t v440 = v439;
    int v441 = v414[327];
    v902 = 0;
    if (v441) {
      uint64_t v442 = 8263;
    }
    else {
      uint64_t v442 = 8262;
    }
    uint64_t v443 = *(void *)(v439 + 8) + 48 * v442;
    v444 = *(llvm::MachineFunction **)(v434 + 32);
    v909[0] = 0;
    v445 = llvm::MachineFunction::CreateMachineInstr(v444, v443, (unsigned __int8 **)v909, 0);
    if (v909[0])
    {
      int v799 = *(unsigned __int8 *)v909[0];
      if ((v799 - 4) > 0x1E)
      {
        if ((v799 - 3) >= 0xFFFFFFFE) {
          v822 = v909[0];
        }
        else {
          v822 = 0;
        }
        if ((v799 - 3) < 0xFFFFFFFE)
        {
          if (v799 == 3) {
            *((void *)v909[0] + 1) = 0;
          }
          goto LABEL_741;
        }
        unint64_t v801 = (unint64_t)v822 + 8;
      }
      else
      {
        if ((*((unsigned char *)v909[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v909[0] + 3)) {
          goto LABEL_741;
        }
        uint64_t v800 = *((void *)v909[0] + 2);
        if ((v800 & 4) == 0) {
          goto LABEL_741;
        }
        unint64_t v801 = v800 & 0xFFFFFFFFFFFFFFF8;
        if (!v801) {
          goto LABEL_741;
        }
      }
      __s1 = v909;
      sub_1CC5FA668(v801 + 16, &__s1);
    }
LABEL_741:
    uint64_t v446 = *(void *)(v434 + 40);
    *((void *)v445 + 3) = v446;
    uint64_t v447 = *(void *)(v446 + 32);
    uint64_t v448 = *((unsigned int *)v445 + 10);
    if (v448)
    {
      uint64_t v553 = *((void *)v445 + 4);
      uint64_t v554 = *(void *)(v447 + 40);
      uint64_t v555 = 32 * v448;
      do
      {
        if (!*(unsigned char *)v553)
        {
          uint64_t v556 = *(unsigned int *)(v553 + 4);
          if ((int)v556 >= 0) {
            v557 = (uint64_t *)(*(void *)(v554 + 272) + 8 * v556);
          }
          else {
            v557 = (uint64_t *)(*(void *)(v554 + 24) + 16 * (v556 & 0x7FFFFFFF) + 8);
          }
          uint64_t v558 = *v557;
          if (*v557)
          {
            uint64_t v559 = *(void *)(v558 + 16);
            *(void *)(v558 + 16) = v553;
            *(void *)(v553 + 16) = v559;
            if (*(unsigned char *)(v553 + 3))
            {
              *(void *)(v553 + 24) = v558;
            }
            else
            {
              *(void *)(v553 + 24) = 0;
              v557 = (uint64_t *)(v559 + 24);
            }
          }
          else
          {
            *(void *)(v553 + 16) = v553;
            *(void *)(v553 + 24) = 0;
          }
          uint64_t *v557 = v553;
        }
        v553 += 32;
        v555 -= 32;
      }
      while (v555);
    }
    uint64_t v449 = *(void *)(v447 + 728);
    if (v449) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v449 + 24))(v449, v445);
    }
    unint64_t v450 = *v437 & 0xFFFFFFFFFFFFFFF8;
    *(void *)v445 = v450 | *(void *)v445 & 7;
    *((void *)v445 + 1) = v437;
    *(void *)(v450 + 8) = v445;
    unint64_t *v437 = *v437 & 7 | (unint64_t)v445;
    LODWORD(__s1) = 1;
    v926 = 0;
    uint64_t v927 = 2;
    llvm::MachineInstr::addOperand(v445, v444, (const llvm::MachineOperand *)&__s1);
    LODWORD(__s1) = 1;
    v926 = 0;
    uint64_t v927 = 2;
    llvm::MachineInstr::addOperand(v445, v444, (const llvm::MachineOperand *)&__s1);
    if (v902)
    {
      int v451 = *v902;
      if ((v451 - 4) > 0x1E)
      {
        if ((v451 - 3) >= 0xFFFFFFFE) {
          v536 = v902;
        }
        else {
          v536 = 0;
        }
        if ((v451 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v537 = (unint64_t)(v536 + 8);
          goto LABEL_882;
        }
        if (v451 == 3) {
          *((void *)v902 + 1) = 0;
        }
      }
      else if ((v902[1] & 0x7F) == 2 || *((_DWORD *)v902 + 3))
      {
        uint64_t v788 = *((void *)v902 + 2);
        if ((v788 & 4) != 0)
        {
          unint64_t v537 = v788 & 0xFFFFFFFFFFFFFFF8;
          if (v537)
          {
LABEL_882:
            __s1 = &v902;
            sub_1CC5FA668(v537 + 16, &__s1);
          }
        }
      }
    }
    if (v438)
    {
      v902 = 0;
      uint64_t v452 = *(void *)(v440 + 8) + 48 * v442;
      v453 = *(llvm::MachineFunction **)(v434 + 32);
      v909[0] = 0;
      v454 = llvm::MachineFunction::CreateMachineInstr(v453, v452, (unsigned __int8 **)v909, 0);
      if (!v909[0]) {
        goto LABEL_750;
      }
      int v808 = *(unsigned __int8 *)v909[0];
      if ((v808 - 4) > 0x1E)
      {
        if ((v808 - 3) >= 0xFFFFFFFE) {
          v825 = v909[0];
        }
        else {
          v825 = 0;
        }
        if ((v808 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v810 = (unint64_t)v825 + 8;
          goto LABEL_1613;
        }
        if (v808 == 3) {
          *((void *)v909[0] + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v909[0] + 1) & 0x7F) == 2 || *((_DWORD *)v909[0] + 3))
      {
        uint64_t v809 = *((void *)v909[0] + 2);
        if ((v809 & 4) != 0)
        {
          unint64_t v810 = v809 & 0xFFFFFFFFFFFFFFF8;
          if (v810)
          {
LABEL_1613:
            __s1 = v909;
            sub_1CC5FA668(v810 + 16, &__s1);
          }
        }
      }
LABEL_750:
      uint64_t v455 = *(void *)(v434 + 40);
      *((void *)v454 + 3) = v455;
      uint64_t v456 = *(void *)(v455 + 32);
      uint64_t v457 = *((unsigned int *)v454 + 10);
      if (v457)
      {
        uint64_t v574 = *((void *)v454 + 4);
        uint64_t v575 = *(void *)(v456 + 40);
        uint64_t v576 = 32 * v457;
        do
        {
          if (!*(unsigned char *)v574)
          {
            uint64_t v577 = *(unsigned int *)(v574 + 4);
            if ((int)v577 >= 0) {
              v578 = (uint64_t *)(*(void *)(v575 + 272) + 8 * v577);
            }
            else {
              v578 = (uint64_t *)(*(void *)(v575 + 24) + 16 * (v577 & 0x7FFFFFFF) + 8);
            }
            uint64_t v579 = *v578;
            if (*v578)
            {
              uint64_t v580 = *(void *)(v579 + 16);
              *(void *)(v579 + 16) = v574;
              *(void *)(v574 + 16) = v580;
              if (*(unsigned char *)(v574 + 3))
              {
                *(void *)(v574 + 24) = v579;
              }
              else
              {
                *(void *)(v574 + 24) = 0;
                v578 = (uint64_t *)(v580 + 24);
              }
            }
            else
            {
              *(void *)(v574 + 16) = v574;
              *(void *)(v574 + 24) = 0;
            }
            uint64_t *v578 = v574;
          }
          v574 += 32;
          v576 -= 32;
        }
        while (v576);
      }
      uint64_t v458 = *(void *)(v456 + 728);
      if (v458) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v458 + 24))(v458, v454);
      }
      unint64_t v459 = *v437 & 0xFFFFFFFFFFFFFFF8;
      *(void *)v454 = v459 | *(void *)v454 & 7;
      *((void *)v454 + 1) = v437;
      *(void *)(v459 + 8) = v454;
      unint64_t *v437 = *v437 & 7 | (unint64_t)v454;
      LODWORD(__s1) = 1;
      v926 = 0;
      uint64_t v927 = 3;
      llvm::MachineInstr::addOperand(v454, v453, (const llvm::MachineOperand *)&__s1);
      LODWORD(__s1) = 1;
      v926 = 0;
      uint64_t v927 = 2;
      llvm::MachineInstr::addOperand(v454, v453, (const llvm::MachineOperand *)&__s1);
      if (v902)
      {
        int v460 = *v902;
        if ((v460 - 4) > 0x1E)
        {
          if ((v460 - 3) >= 0xFFFFFFFE) {
            v542 = v902;
          }
          else {
            v542 = 0;
          }
          if ((v460 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v543 = (unint64_t)(v542 + 8);
            goto LABEL_904;
          }
          if (v460 == 3) {
            *((void *)v902 + 1) = 0;
          }
        }
        else if ((v902[1] & 0x7F) == 2 || *((_DWORD *)v902 + 3))
        {
          uint64_t v791 = *((void *)v902 + 2);
          if ((v791 & 4) != 0)
          {
            unint64_t v543 = v791 & 0xFFFFFFFFFFFFFFF8;
            if (v543)
            {
LABEL_904:
              __s1 = &v902;
              sub_1CC5FA668(v543 + 16, &__s1);
            }
          }
        }
      }
    }
    v902 = 0;
    uint64_t v461 = 116592;
    if (!v843[327]) {
      uint64_t v461 = 116544;
    }
    uint64_t v462 = *(void *)(v440 + 8) + v461;
    v463 = *(llvm::MachineFunction **)(v434 + 32);
    v909[0] = 0;
    v464 = llvm::MachineFunction::CreateMachineInstr(v463, v462, (unsigned __int8 **)v909, 0);
    if (v909[0])
    {
      int v802 = *(unsigned __int8 *)v909[0];
      if ((v802 - 4) > 0x1E)
      {
        if ((v802 - 3) >= 0xFFFFFFFE) {
          v823 = v909[0];
        }
        else {
          v823 = 0;
        }
        if ((v802 - 3) < 0xFFFFFFFE)
        {
          if (v802 == 3) {
            *((void *)v909[0] + 1) = 0;
          }
          goto LABEL_760;
        }
        unint64_t v804 = (unint64_t)v823 + 8;
      }
      else
      {
        if ((*((unsigned char *)v909[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v909[0] + 3)) {
          goto LABEL_760;
        }
        uint64_t v803 = *((void *)v909[0] + 2);
        if ((v803 & 4) == 0) {
          goto LABEL_760;
        }
        unint64_t v804 = v803 & 0xFFFFFFFFFFFFFFF8;
        if (!v804) {
          goto LABEL_760;
        }
      }
      __s1 = v909;
      sub_1CC5FA668(v804 + 16, &__s1);
    }
LABEL_760:
    uint64_t v465 = *(void *)(v434 + 40);
    *((void *)v464 + 3) = v465;
    uint64_t v466 = *(void *)(v465 + 32);
    uint64_t v467 = *((unsigned int *)v464 + 10);
    if (v467)
    {
      uint64_t v560 = *((void *)v464 + 4);
      uint64_t v561 = *(void *)(v466 + 40);
      uint64_t v562 = 32 * v467;
      do
      {
        if (!*(unsigned char *)v560)
        {
          uint64_t v563 = *(unsigned int *)(v560 + 4);
          if ((int)v563 >= 0) {
            v564 = (uint64_t *)(*(void *)(v561 + 272) + 8 * v563);
          }
          else {
            v564 = (uint64_t *)(*(void *)(v561 + 24) + 16 * (v563 & 0x7FFFFFFF) + 8);
          }
          uint64_t v565 = *v564;
          if (*v564)
          {
            uint64_t v566 = *(void *)(v565 + 16);
            *(void *)(v565 + 16) = v560;
            *(void *)(v560 + 16) = v566;
            if (*(unsigned char *)(v560 + 3))
            {
              *(void *)(v560 + 24) = v565;
            }
            else
            {
              *(void *)(v560 + 24) = 0;
              v564 = (uint64_t *)(v566 + 24);
            }
          }
          else
          {
            *(void *)(v560 + 16) = v560;
            *(void *)(v560 + 24) = 0;
          }
          uint64_t *v564 = v560;
        }
        v560 += 32;
        v562 -= 32;
      }
      while (v562);
    }
    uint64_t v468 = *(void *)(v466 + 728);
    if (v468) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v468 + 24))(v468, v464);
    }
    unint64_t v469 = *v437 & 0xFFFFFFFFFFFFFFF8;
    *(void *)v464 = v469 | *(void *)v464 & 7;
    *((void *)v464 + 1) = v437;
    *(void *)(v469 + 8) = v464;
    unint64_t *v437 = *v437 & 7 | (unint64_t)v464;
    if (v902)
    {
      int v470 = *v902;
      if ((v470 - 4) > 0x1E)
      {
        if ((v470 - 3) >= 0xFFFFFFFE) {
          v538 = v902;
        }
        else {
          v538 = 0;
        }
        if ((v470 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v539 = (unint64_t)(v538 + 8);
          goto LABEL_888;
        }
        if (v470 == 3) {
          *((void *)v902 + 1) = 0;
        }
      }
      else if ((v902[1] & 0x7F) == 2 || *((_DWORD *)v902 + 3))
      {
        uint64_t v789 = *((void *)v902 + 2);
        if ((v789 & 4) != 0)
        {
          unint64_t v539 = v789 & 0xFFFFFFFFFFFFFFF8;
          if (v539)
          {
LABEL_888:
            __s1 = &v902;
            sub_1CC5FA668(v539 + 16, &__s1);
          }
        }
      }
    }
    v902 = 0;
    uint64_t v471 = *(void *)(v440 + 8) + 48 * v442;
    v472 = *(llvm::MachineFunction **)(v434 + 32);
    v909[0] = 0;
    v473 = llvm::MachineFunction::CreateMachineInstr(v472, v471, (unsigned __int8 **)v909, 0);
    if (v909[0])
    {
      int v805 = *(unsigned __int8 *)v909[0];
      if ((v805 - 4) > 0x1E)
      {
        if ((v805 - 3) >= 0xFFFFFFFE) {
          v824 = v909[0];
        }
        else {
          v824 = 0;
        }
        if ((v805 - 3) < 0xFFFFFFFE)
        {
          if (v805 == 3) {
            *((void *)v909[0] + 1) = 0;
          }
          goto LABEL_768;
        }
        unint64_t v807 = (unint64_t)v824 + 8;
      }
      else
      {
        if ((*((unsigned char *)v909[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v909[0] + 3)) {
          goto LABEL_768;
        }
        uint64_t v806 = *((void *)v909[0] + 2);
        if ((v806 & 4) == 0) {
          goto LABEL_768;
        }
        unint64_t v807 = v806 & 0xFFFFFFFFFFFFFFF8;
        if (!v807) {
          goto LABEL_768;
        }
      }
      __s1 = v909;
      sub_1CC5FA668(v807 + 16, &__s1);
    }
LABEL_768:
    uint64_t v474 = *(void *)(v434 + 40);
    *((void *)v473 + 3) = v474;
    uint64_t v475 = *(void *)(v474 + 32);
    uint64_t v476 = *((unsigned int *)v473 + 10);
    v414 = v843;
    if (v476)
    {
      uint64_t v567 = *((void *)v473 + 4);
      uint64_t v568 = *(void *)(v475 + 40);
      uint64_t v569 = 32 * v476;
      do
      {
        if (!*(unsigned char *)v567)
        {
          uint64_t v570 = *(unsigned int *)(v567 + 4);
          if ((int)v570 >= 0) {
            v571 = (uint64_t *)(*(void *)(v568 + 272) + 8 * v570);
          }
          else {
            v571 = (uint64_t *)(*(void *)(v568 + 24) + 16 * (v570 & 0x7FFFFFFF) + 8);
          }
          uint64_t v572 = *v571;
          if (*v571)
          {
            uint64_t v573 = *(void *)(v572 + 16);
            *(void *)(v572 + 16) = v567;
            *(void *)(v567 + 16) = v573;
            if (*(unsigned char *)(v567 + 3))
            {
              *(void *)(v567 + 24) = v572;
            }
            else
            {
              *(void *)(v567 + 24) = 0;
              v571 = (uint64_t *)(v573 + 24);
            }
          }
          else
          {
            *(void *)(v567 + 16) = v567;
            *(void *)(v567 + 24) = 0;
          }
          uint64_t *v571 = v567;
        }
        v567 += 32;
        v569 -= 32;
      }
      while (v569);
    }
    uint64_t v477 = *(void *)(v475 + 728);
    if (v477) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v477 + 24))(v477, v473);
    }
    unint64_t v478 = *v437 & 0xFFFFFFFFFFFFFFF8;
    *(void *)v473 = v478 | *(void *)v473 & 7;
    *((void *)v473 + 1) = v437;
    *(void *)(v478 + 8) = v473;
    unint64_t *v437 = *v437 & 7 | (unint64_t)v473;
    LODWORD(__s1) = 1;
    v926 = 0;
    uint64_t v927 = 2;
    llvm::MachineInstr::addOperand(v473, v472, (const llvm::MachineOperand *)&__s1);
    LODWORD(__s1) = 1;
    v926 = 0;
    uint64_t v927 = 1;
    llvm::MachineInstr::addOperand(v473, v472, (const llvm::MachineOperand *)&__s1);
    v418 = v858;
    if (v902)
    {
      int v479 = *v902;
      if ((v479 - 4) > 0x1E)
      {
        if ((v479 - 3) >= 0xFFFFFFFE) {
          v540 = v902;
        }
        else {
          v540 = 0;
        }
        if ((v479 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v541 = (unint64_t)(v540 + 8);
          goto LABEL_894;
        }
        if (v479 == 3) {
          *((void *)v902 + 1) = 0;
        }
      }
      else if ((v902[1] & 0x7F) == 2 || *((_DWORD *)v902 + 3))
      {
        uint64_t v790 = *((void *)v902 + 2);
        if ((v790 & 4) != 0)
        {
          unint64_t v541 = v790 & 0xFFFFFFFFFFFFFFF8;
          if (v541)
          {
LABEL_894:
            __s1 = &v902;
            sub_1CC5FA668(v541 + 16, &__s1);
          }
        }
      }
    }
  }
  ((void (*)(uint64_t (***)(void), uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*v418)[1])(v418, 1, v856 & ~v839, 1, 0, 1, 1);
  if (v414[295]
    && ((unsigned int (*)(uint64_t (***)(void), uint64_t, void, uint64_t, uint64_t))**v418)(v418, 1, 0, 1, 1))
  {
    uint64_t v480 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v414 + 104))(v414);
    uint64_t v481 = v480;
    v482 = (void *)v840[41];
    v483 = (unint64_t *)v482[7];
    v484 = (unsigned __int8 *)v483[7];
    v902 = v484;
    if (v484)
    {
      llvm::MetadataTracking::track((uint64_t)&v902, v484, 2);
      uint64_t v485 = *(void *)(v481 + 8) + 231600;
      v486 = (llvm::MachineFunction *)v482[4];
      v909[0] = v902;
      if (v902) {
        llvm::MetadataTracking::track((uint64_t)v909, v902, 2);
      }
    }
    else
    {
      uint64_t v485 = *(void *)(v480 + 8) + 231600;
      v486 = (llvm::MachineFunction *)v482[4];
      v909[0] = 0;
    }
    v487 = llvm::MachineFunction::CreateMachineInstr(v486, v485, (unsigned __int8 **)v909, 0);
    if (v909[0])
    {
      int v811 = *(unsigned __int8 *)v909[0];
      if ((v811 - 4) > 0x1E)
      {
        if ((v811 - 3) >= 0xFFFFFFFE) {
          v826 = v909[0];
        }
        else {
          v826 = 0;
        }
        if ((v811 - 3) < 0xFFFFFFFE)
        {
          v414 = v843;
          if (v811 == 3) {
            *((void *)v909[0] + 1) = 0;
          }
          goto LABEL_782;
        }
        unint64_t v813 = (unint64_t)v826 + 8;
      }
      else
      {
        v414 = v843;
        if ((*((unsigned char *)v909[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v909[0] + 3)) {
          goto LABEL_782;
        }
        uint64_t v812 = *((void *)v909[0] + 2);
        if ((v812 & 4) == 0) {
          goto LABEL_782;
        }
        unint64_t v813 = v812 & 0xFFFFFFFFFFFFFFF8;
        if (!v813) {
          goto LABEL_782;
        }
      }
      __s1 = v909;
      sub_1CC5FA668(v813 + 16, &__s1);
      v414 = v843;
    }
LABEL_782:
    uint64_t v488 = v482[5];
    *((void *)v487 + 3) = v488;
    uint64_t v489 = *(void *)(v488 + 32);
    uint64_t v490 = *((unsigned int *)v487 + 10);
    if (v490)
    {
      uint64_t v581 = *((void *)v487 + 4);
      uint64_t v582 = *(void *)(v489 + 40);
      uint64_t v583 = 32 * v490;
      do
      {
        if (!*(unsigned char *)v581)
        {
          uint64_t v584 = *(unsigned int *)(v581 + 4);
          if ((int)v584 >= 0) {
            v585 = (uint64_t *)(*(void *)(v582 + 272) + 8 * v584);
          }
          else {
            v585 = (uint64_t *)(*(void *)(v582 + 24) + 16 * (v584 & 0x7FFFFFFF) + 8);
          }
          uint64_t v586 = *v585;
          if (*v585)
          {
            uint64_t v587 = *(void *)(v586 + 16);
            *(void *)(v586 + 16) = v581;
            *(void *)(v581 + 16) = v587;
            if (*(unsigned char *)(v581 + 3))
            {
              *(void *)(v581 + 24) = v586;
            }
            else
            {
              *(void *)(v581 + 24) = 0;
              v585 = (uint64_t *)(v587 + 24);
            }
          }
          else
          {
            *(void *)(v581 + 16) = v581;
            *(void *)(v581 + 24) = 0;
          }
          uint64_t *v585 = v581;
        }
        v581 += 32;
        v583 -= 32;
      }
      while (v583);
    }
    uint64_t v491 = *(void *)(v489 + 728);
    if (v491) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v491 + 24))(v491, v487);
    }
    unint64_t v492 = *v483 & 0xFFFFFFFFFFFFFFF8;
    *(void *)v487 = v492 | *(void *)v487 & 7;
    *((void *)v487 + 1) = v483;
    *(void *)(v492 + 8) = v487;
    unint64_t *v483 = *v483 & 7 | (unint64_t)v487;
    unsigned int v493 = (**v858)();
    LODWORD(__s1) = 1;
    v926 = 0;
    uint64_t v927 = v493;
    llvm::MachineInstr::addOperand(v487, v486, (const llvm::MachineOperand *)&__s1);
    if (v902)
    {
      int v494 = *v902;
      if ((v494 - 4) > 0x1E)
      {
        if ((v494 - 3) >= 0xFFFFFFFE) {
          v544 = v902;
        }
        else {
          v544 = 0;
        }
        if ((v494 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v545 = (unint64_t)(v544 + 8);
          goto LABEL_910;
        }
        if (v494 == 3) {
          *((void *)v902 + 1) = 0;
        }
      }
      else if ((v902[1] & 0x7F) == 2 || *((_DWORD *)v902 + 3))
      {
        uint64_t v792 = *((void *)v902 + 2);
        if ((v792 & 4) != 0)
        {
          unint64_t v545 = v792 & 0xFFFFFFFFFFFFFFF8;
          if (v545)
          {
LABEL_910:
            __s1 = &v902;
            sub_1CC5FA668(v545 + 16, &__s1);
          }
        }
      }
    }
  }
  if (v414[333])
  {
    uint64_t v495 = (*(uint64_t (**)(void))(*(void *)v840[2] + 104))(v840[2]);
    v496 = (void *)v840[41];
    if (v496 != v845)
    {
      uint64_t v497 = v495;
      do
      {
        v498 = v496 + 6;
        for (juint64_t j = v496[7]; (void *)jj != v498; juint64_t j = *(void *)(jj + 8))
        {
          int v500 = **(unsigned __int16 **)(jj + 16);
          if ((v500 - 4581) >= 4 && (v500 - 743) > 1) {
            goto LABEL_818;
          }
          uint64_t v501 = jj;
          if ((*(unsigned char *)jj & 4) == 0)
          {
            uint64_t v501 = jj;
            if ((*(_WORD *)(jj + 44) & 8) != 0)
            {
              uint64_t v501 = jj;
              do
                uint64_t v501 = *(void *)(v501 + 8);
              while ((*(_WORD *)(v501 + 44) & 8) != 0);
            }
          }
          uint64_t v502 = *(void *)(v501 + 8);
          if ((void *)v502 == v498) {
            goto LABEL_818;
          }
          int v503 = **(unsigned __int16 **)(v502 + 16);
          if (v503 != 8277 && v503 != 4826) {
            goto LABEL_818;
          }
          int v505 = v843[318];
          uint64_t v506 = 4675;
          if (v843[327]) {
            uint64_t v506 = 4676;
          }
          v902 = 0;
          BOOL v23 = v505 == 0;
          uint64_t v507 = 4674;
          if (v23) {
            uint64_t v507 = v506;
          }
          uint64_t v508 = *(void *)(v497 + 8) + 48 * v507;
          v509 = (llvm::MachineFunction *)v496[4];
          v909[0] = 0;
          v510 = llvm::MachineFunction::CreateMachineInstr(v509, v508, (unsigned __int8 **)v909, 0);
          if (v909[0])
          {
            int v527 = *(unsigned __int8 *)v909[0];
            if ((v527 - 4) > 0x1E)
            {
              if ((v527 - 3) >= 0xFFFFFFFE) {
                v530 = v909[0];
              }
              else {
                v530 = 0;
              }
              if ((v527 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v529 = (unint64_t)v530 + 8;
LABEL_857:
                __s1 = v909;
                sub_1CC5FA668(v529 + 16, &__s1);
                goto LABEL_811;
              }
              if (v527 == 3) {
                *((void *)v909[0] + 1) = 0;
              }
            }
            else if ((*((unsigned char *)v909[0] + 1) & 0x7F) == 2 || *((_DWORD *)v909[0] + 3))
            {
              uint64_t v528 = *((void *)v909[0] + 2);
              if ((v528 & 4) != 0)
              {
                unint64_t v529 = v528 & 0xFFFFFFFFFFFFFFF8;
                if (v529) {
                  goto LABEL_857;
                }
              }
            }
          }
LABEL_811:
          uint64_t v511 = v496[5];
          *((void *)v510 + 3) = v511;
          uint64_t v512 = *(void *)(v511 + 32);
          uint64_t v513 = *((unsigned int *)v510 + 10);
          if (v513)
          {
            uint64_t v519 = *((void *)v510 + 4);
            uint64_t v520 = *(void *)(v512 + 40);
            uint64_t v521 = 32 * v513;
            do
            {
              if (!*(unsigned char *)v519)
              {
                uint64_t v522 = *(unsigned int *)(v519 + 4);
                if ((int)v522 >= 0) {
                  v523 = (uint64_t *)(*(void *)(v520 + 272) + 8 * v522);
                }
                else {
                  v523 = (uint64_t *)(*(void *)(v520 + 24) + 16 * (v522 & 0x7FFFFFFF) + 8);
                }
                uint64_t v524 = *v523;
                if (*v523)
                {
                  uint64_t v525 = *(void *)(v524 + 16);
                  *(void *)(v524 + 16) = v519;
                  *(void *)(v519 + 16) = v525;
                  if (*(unsigned char *)(v519 + 3))
                  {
                    *(void *)(v519 + 24) = v524;
                  }
                  else
                  {
                    *(void *)(v519 + 24) = 0;
                    v523 = (uint64_t *)(v525 + 24);
                  }
                }
                else
                {
                  *(void *)(v519 + 16) = v519;
                  *(void *)(v519 + 24) = 0;
                }
                uint64_t *v523 = v519;
              }
              v519 += 32;
              v521 -= 32;
            }
            while (v521);
          }
          uint64_t v514 = *(void *)(v512 + 728);
          if (v514) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v514 + 24))(v514, v510);
          }
          unint64_t v515 = *(void *)v502 & 0xFFFFFFFFFFFFFFF8;
          *(void *)v510 = v515 | *(void *)v510 & 7;
          *((void *)v510 + 1) = v502;
          *(void *)(v515 + 8) = v510;
          *(void *)uint64_t v502 = *(void *)v502 & 7 | (unint64_t)v510;
          if (v902)
          {
            int v516 = *v902;
            if ((v516 - 4) > 0x1E)
            {
              if ((v516 - 3) >= 0xFFFFFFFE) {
                v517 = v902;
              }
              else {
                v517 = 0;
              }
              if ((v516 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v518 = (unint64_t)(v517 + 8);
LABEL_827:
                __s1 = &v902;
                sub_1CC5FA668(v518 + 16, &__s1);
                goto LABEL_818;
              }
              if (v516 == 3) {
                *((void *)v902 + 1) = 0;
              }
            }
            else if ((v902[1] & 0x7F) == 2 || *((_DWORD *)v902 + 3))
            {
              uint64_t v526 = *((void *)v902 + 2);
              if ((v526 & 4) != 0)
              {
                unint64_t v518 = v526 & 0xFFFFFFFFFFFFFFF8;
                if (v518) {
                  goto LABEL_827;
                }
              }
            }
          }
LABEL_818:
          if ((*(unsigned char *)jj & 4) == 0)
          {
            while ((*(_WORD *)(jj + 44) & 8) != 0)
              juint64_t j = *(void *)(jj + 8);
          }
        }
        v496 = (void *)v496[1];
      }
      while (v496 != v845);
    }
  }
  if (v894 != v896) {
    free(v894);
  }
  if ((v891 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)&v892[0], 8);
  }
  sub_1CBA9E4F0((uint64_t)v901);
  sub_1CBA9E4F0((uint64_t)&v897);
  uint64_t v531 = 110;
  do
  {
    v532 = *(uint64_t (*****)(void))&v865[v531 * 8 - 80];
    if (&(&v858)[v531] != v532) {
      free(v532);
    }
    v531 -= 10;
  }
  while (v531 * 8);
  return 0;
}

uint64_t sub_1CBA9B7F4(uint64_t a1, uint64_t a2)
{
  sub_1CBA6598C(a1);
  uint64_t result = MEMORY[0x1D25D9CD0](*(void *)a1, 8);
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if (v5)
  {
    *(void *)a1 = operator new(v5 << 6, (std::align_val_t)8uLL);
    return sub_1CBA9B86C(a1, (uint64_t *)a2);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t sub_1CBA9B86C(uint64_t result, uint64_t *a2)
{
  *(void *)(result + 8) = a2[1];
  if (*(_DWORD *)(result + 16))
  {
    uint64_t v3 = result;
    unint64_t v4 = 0;
    uint64_t v5 = 48;
    do
    {
      *(void *)(*(void *)v3 + v5 - 48) = *(void *)(*a2 + v5 - 48);
      uint64_t v6 = *(void *)v3;
      uint64_t v7 = *(void *)(*(void *)v3 + v5 - 48);
      if (v7 != -4096 && v7 != -8192)
      {
        uint64_t v8 = v6 + v5;
        *(void *)(v6 + v5 - 40) = v6 + v5 - 24;
        uint64_t result = v6 + v5 - 40;
        uint64_t v9 = *a2;
        uint64_t v10 = *a2 + v5;
        *(void *)(v6 + v5 - 32) = 0x100000000;
        if (*(_DWORD *)(v10 - 32)) {
          uint64_t result = sub_1CBA9B97C(result, v10 - 40);
        }
        *(void *)(v8 - 16) = v8;
        *(void *)(v8 - 8) = 0x200000000;
        if (*(_DWORD *)(v10 - 8)) {
          uint64_t result = sub_1CBA9B97C(v8 - 16, v9 + v5 - 16);
        }
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < *(unsigned int *)(v3 + 16));
  }
  return result;
}

uint64_t sub_1CBA9B97C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(unsigned int *)(a2 + 8);
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if (v3) {
        memmove(*(void **)a1, *(const void **)a2, 6 * v3);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v3)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v4)
      {
        uint64_t v8 = *(unsigned int *)(a1 + 8);
        uint64_t v9 = a2;
        memmove(*(void **)a1, *(const void **)a2, 6 * v4);
        uint64_t v5 = v8;
        a2 = v9;
      }
      else
      {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 6 * v5), (const void *)(*(void *)a2 + 6 * v5), *(void *)a2 + 6 * v6 - (*(void *)a2 + 6 * v5));
      }
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t sub_1CBA9BA70(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = 0;
  switch(a3)
  {
    case ' ':
    case '!':
    case '%':
      **(unsigned char **)(a1 + 32) |= sub_1CBA9C308(*(uint64_t **)(a1 + 40), ++**(unsigned char **)(a1 + 8), **(void **)(a1 + 48), (unsigned __int8 **)(*(void *)(a1 + 56) + 8), **(_DWORD **)(a1 + 64), **(_DWORD **)(a1 + 72));
      if (**(_DWORD **)(a1 + 16) == **(unsigned __int8 **)(a1 + 8)) {
        return 1;
      }
      uint64_t v6 = ***(void ***)(a1 + 80);
      unsigned int v7 = *(unsigned __int8 *)(v6 + 8);
      if (v7 > 0x11) {
        goto LABEL_64;
      }
      if (((1 << v7) & 0xAC7F) != 0) {
        goto LABEL_6;
      }
      if (((1 << v7) & 0x30000) != 0) {
        goto LABEL_62;
      }
LABEL_64:
      if ((v7 & 0xFE) != 0x12 && v7 != 21) {
        return 0;
      }
LABEL_62:
      uint64_t result = llvm::Type::isSizedDerivedType(***(void ***)(a1 + 80), 0);
      if (result)
      {
        uint64_t v6 = ***(void ***)(a1 + 80);
LABEL_6:
        uint64_t v8 = *(llvm::DataLayout **)a1;
        goto LABEL_7;
      }
      return result;
    case '""':
      int v29 = sub_1CD10C828(a2, *(llvm::DataLayout **)a1);
      if (**(_DWORD **)(a1 + 16) - 1 == **(unsigned __int8 **)(a1 + 8)) {
        return 0;
      }
      LODWORD(v30) = v29;
      goto LABEL_22;
    case '#':
    case '$':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '9':
    case ':':
    case ';':
    case '<':
      goto LABEL_13;
    case '&':
    case '\'':
    case '(':
    case '/':
    case '0':
    case '1':
    case '2':
      return result;
    case '8':
      if (*(unsigned char *)(a2 + 16) != 84
        || (uint64_t v36 = *(void *)(a2 - 32)) == 0
        || *(unsigned char *)(v36 + 16)
        || *(void *)(v36 + 24) != *(void *)(a2 + 72)
        || (*(unsigned char *)(v36 + 33) & 0x20) == 0)
      {
        uint64_t v15 = *(void *)(a1 + 88);
        uint64_t v37 = *(void *)(a1 + 56);
        uint64_t v38 = *(unsigned int *)(v37 + 16);
        if (v38)
        {
          uint64_t v39 = *(unsigned char **)(v37 + 8);
          v40 = *(_DWORD **)v15;
          uint64_t v41 = *(_DWORD **)(v15 + 8);
          uint64_t v42 = 6 * v38;
          do
          {
            *v40 |= 1 << (*v39 & 0xF);
            unsigned int v43 = *v39;
            v39 += 6;
            *v41 |= 1 << (v43 >> 4);
            v42 -= 6;
          }
          while (v42);
        }
        uint64_t v44 = *(unsigned int *)(v37 + 40);
        if (v44)
        {
          v45 = *(unsigned char **)(v37 + 32);
          v46 = *(_DWORD **)v15;
          v47 = *(_DWORD **)(v15 + 8);
          uint64_t v48 = 6 * v44;
          do
          {
            *v46 |= 1 << (*v45 & 0xF);
            unsigned int v49 = *v45;
            v45 += 6;
            *v47 |= 1 << (v49 >> 4);
            v48 -= 6;
          }
          while (v48);
        }
LABEL_47:
        uint64_t result = 1;
        **(unsigned char **)(v15 + 16) = 1;
        return result;
      }
      int v67 = *(_DWORD *)(v36 + 36);
      if ((v67 - 1282) < 0x190 || (v67 - 2824) < 0xC || (v67 - 1682) <= 0x8B)
      {
        **(unsigned char **)(a1 + 32) |= sub_1CBA9C308(*(uint64_t **)(a1 + 40), ++**(unsigned char **)(a1 + 8), **(void **)(a1 + 48), (unsigned __int8 **)(*(void *)(a1 + 56) + 8), **(_DWORD **)(a1 + 64), **(_DWORD **)(a1 + 72));
        return 1;
      }
      if (v67 > 2629)
      {
        if ((v67 - 2630) > 0x1F)
        {
LABEL_79:
          uint64_t v15 = *(void *)(a1 + 88);
          uint64_t v68 = *(void *)(a1 + 56);
          uint64_t v69 = *(unsigned int *)(v68 + 16);
          if (v69)
          {
            uint64_t v70 = *(unsigned char **)(v68 + 8);
            uint64_t v71 = *(_DWORD **)v15;
            uint64_t v72 = *(_DWORD **)(v15 + 8);
            uint64_t v73 = 6 * v69;
            do
            {
              *v71 |= 1 << (*v70 & 0xF);
              unsigned int v74 = *v70;
              v70 += 6;
              *v72 |= 1 << (v74 >> 4);
              v73 -= 6;
            }
            while (v73);
          }
          uint64_t v75 = *(unsigned int *)(v68 + 40);
          if (v75)
          {
            uint64_t v76 = *(unsigned char **)(v68 + 32);
            int v77 = *(_DWORD **)v15;
            unsigned int v78 = *(_DWORD **)(v15 + 8);
            uint64_t v79 = 6 * v75;
            do
            {
              *v77 |= 1 << (*v76 & 0xF);
              unsigned int v80 = *v76;
              v76 += 6;
              *v78 |= 1 << (v80 >> 4);
              v79 -= 6;
            }
            while (v79);
          }
          goto LABEL_47;
        }
      }
      else if ((v67 - 2376) >= 0x20 && v67 != 2142 && v67 != 2144)
      {
        goto LABEL_79;
      }
      **(unsigned char **)(a1 + 32) |= sub_1CBA9C308(*(uint64_t **)(a1 + 40), ++**(unsigned char **)(a1 + 8), **(void **)(a1 + 48), (unsigned __int8 **)(*(void *)(a1 + 56) + 8), **(_DWORD **)(a1 + 64), **(_DWORD **)(a1 + 72));
      if (**(_DWORD **)(a1 + 16) == **(unsigned __int8 **)(a1 + 8)) {
        return 1;
      }
      uint64_t v8 = *(llvm::DataLayout **)a1;
      uint64_t v6 = ***(void ***)(a1 + 80);
LABEL_7:
      unint64_t v10 = sub_1CB83544C((uint64_t)v8, v6) + 7;
      if (v9 == 1) {
      uint64_t result = 0;
      }
      uint64_t v11 = *(_DWORD **)(a1 + 64);
      **(_DWORD **)(a1 + 72) = v10 >> 3;
      uint64_t v12 = *(_DWORD **)(a1 + 24);
      _DWORD *v11 = *v12;
      *uint64_t v12 = 0;
      return result;
    case '=':
      if (*(unsigned char *)(*(void *)(a2 - 32) + 16) == 16)
      {
        unint64_t v32 = (unint64_t)(sub_1CB83544C(*(void *)a1, *(void *)(**(void **)(a2 - 64) + 24)) + 7) >> 3;
        if (v31 == 1)
        {
          int v81 = v32;
          LODWORD(v32) = v81;
        }
        uint64_t v33 = *(void *)(a2 - 32);
        uint64_t v34 = (void *)(v33 + 24);
        if (*(_DWORD *)(v33 + 32) >= 0x41u) {
          uint64_t v34 = (void *)*v34;
        }
        uint64_t result = 0;
        uint64_t v35 = *(_DWORD **)(a1 + 72);
        **(_DWORD **)(a1 + 64) += *(_DWORD *)v34 * v32;
        *uint64_t v35 = v32;
        return result;
      }
      uint64_t v15 = *(void *)(a1 + 88);
      uint64_t v50 = *(void *)(a1 + 56);
      uint64_t v51 = *(unsigned int *)(v50 + 16);
      if (v51)
      {
        unint64_t v52 = *(unsigned char **)(v50 + 8);
        uint64_t v53 = *(_DWORD **)v15;
        v54 = *(_DWORD **)(v15 + 8);
        uint64_t v55 = 6 * v51;
        do
        {
          *v53 |= 1 << (*v52 & 0xF);
          unsigned int v56 = *v52;
          v52 += 6;
          *v54 |= 1 << (v56 >> 4);
          v55 -= 6;
        }
        while (v55);
      }
      uint64_t v57 = *(unsigned int *)(v50 + 40);
      if (v57)
      {
        v58 = *(unsigned char **)(v50 + 32);
        uint64_t v59 = *(_DWORD **)v15;
        uint64_t v60 = *(_DWORD **)(v15 + 8);
        uint64_t v61 = 6 * v57;
        do
        {
          *v59 |= 1 << (*v58 & 0xF);
          unsigned int v62 = *v58;
          v58 += 6;
          *v60 |= 1 << (v62 >> 4);
          v61 -= 6;
        }
        while (v61);
      }
      goto LABEL_47;
    default:
      if (a3 != 13)
      {
LABEL_13:
        uint64_t v15 = *(void *)(a1 + 88);
        uint64_t v16 = *(void *)(a1 + 56);
        uint64_t v17 = *(unsigned int *)(v16 + 16);
        if (v17)
        {
          uint64_t v18 = *(unsigned char **)(v16 + 8);
          uint64_t v19 = *(_DWORD **)v15;
          unsigned int v20 = *(_DWORD **)(v15 + 8);
          uint64_t v21 = 6 * v17;
          do
          {
            *v19 |= 1 << (*v18 & 0xF);
            unsigned int v22 = *v18;
            v18 += 6;
            *v20 |= 1 << (v22 >> 4);
            v21 -= 6;
          }
          while (v21);
        }
        uint64_t v23 = *(unsigned int *)(v16 + 40);
        if (v23)
        {
          uint64_t v24 = *(unsigned char **)(v16 + 32);
          v25 = *(_DWORD **)v15;
          uint64_t v26 = *(_DWORD **)(v15 + 8);
          uint64_t v27 = 6 * v23;
          do
          {
            *v25 |= 1 << (*v24 & 0xF);
            unsigned int v28 = *v24;
            v24 += 6;
            *v26 |= 1 << (v28 >> 4);
            v27 -= 6;
          }
          while (v27);
        }
        goto LABEL_47;
      }
      int v13 = *(_DWORD *)(a2 + 20);
      if ((v13 & 0x40000000) != 0) {
        uint64_t v14 = *(uint64_t **)(a2 - 8);
      }
      else {
        uint64_t v14 = (uint64_t *)(a2 - 32 * (v13 & 0x7FFFFFF));
      }
      if (**(_DWORD **)(a1 + 16) - 1 == **(unsigned __int8 **)(a1 + 8)) {
        return 0;
      }
      uint64_t v63 = *v14;
      uint64_t v64 = v14[4];
      if (v64 == **(void **)(a1 + 48)) {
        uint64_t v64 = v63;
      }
      if (*(unsigned char *)(v64 + 16) != 16 || v64 == 0)
      {
        if (MEMORY[0x20] > 0x40u) {
          uint64_t v30 = *MEMORY[0x18];
        }
        else {
          uint64_t v30 = (uint64_t)(MEMORY[0x18] << -(uint64_t)MEMORY[0x20]) >> -(uint64_t)MEMORY[0x20];
        }
LABEL_22:
        uint64_t result = 0;
        **(_DWORD **)(a1 + 24) += v30;
      }
      else
      {
        uint64_t result = 0;
        **(_DWORD **)(a1 + 24) = 0;
        **(_DWORD **)(a1 + 72) = -1;
      }
      return result;
  }
}

uint64_t *sub_1CBA9C1F8(uint64_t *result, unint64_t a2, uint64_t a3)
{
  if (*((unsigned int *)result + 3) < a2)
  {
    *((_DWORD *)result + 2) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v3 = result + 1;
  unint64_t v4 = *((unsigned int *)result + 2);
  if (v4 >= a2) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *((unsigned int *)result + 2);
  }
  if (v5)
  {
    uint64_t v10 = *result;
    do
    {
      *(void *)uint64_t v10 = *(void *)a3;
      *(void *)(v10 + 8) = *(void *)(a3 + 8);
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(a3 + 16);
      *(_DWORD *)(v10 + 20) = *(_DWORD *)(a3 + 20);
      *(unsigned char *)(v10 + 24) = *(unsigned char *)(a3 + 24);
      *(_DWORD *)(v10 + 28) = *(_DWORD *)(a3 + 28);
      v10 += 32;
      --v5;
    }
    while (v5);
    unint64_t v4 = *v3;
  }
  unint64_t v6 = v4 - a2;
  if (v4 < a2)
  {
    unsigned int v7 = (_OWORD *)(*result + 32 * v4);
    do
    {
      long long v8 = *(_OWORD *)(a3 + 16);
      *unsigned int v7 = *(_OWORD *)a3;
      v7[1] = v8;
      v7 += 2;
    }
    while (!__CFADD__(v6++, 1));
  }
  *uint64_t v3 = a2;
  return result;
}

uint64_t sub_1CBA9C308(uint64_t *a1, int a2, uint64_t a3, unsigned __int8 **a4, signed int a5, int a6)
{
  uint64_t v12 = *a1;
  uint64_t v57 = 0;
  char v13 = sub_1CBA9C7FC(*(void *)v12, *(_DWORD *)(v12 + 16), a3, &v57);
  uint64_t v14 = v57;
  if (v13) {
    goto LABEL_7;
  }
  v58 = v57;
  int v15 = *(_DWORD *)(v12 + 8);
  uint64_t v16 = *(unsigned int *)(v12 + 16);
  if (4 * v15 + 4 >= (3 * v16))
  {
    int v17 = 2 * v16;
LABEL_48:
    uint64_t v37 = *(void *)v12;
    unint64_t v38 = (v17 - 1) | ((unint64_t)(v17 - 1) >> 1);
    unint64_t v39 = v38 | (v38 >> 2) | ((v38 | (v38 >> 2)) >> 4);
    int v40 = ((v39 | (v39 >> 8)) >> 16) | v39 | (v39 >> 8);
    if ((v40 + 1) > 0x40) {
      unsigned int v41 = v40 + 1;
    }
    else {
      unsigned int v41 = 64;
    }
    *(_DWORD *)(v12 + 16) = v41;
    uint64_t v42 = operator new(40 * v41, (std::align_val_t)8uLL);
    *(void *)uint64_t v12 = v42;
    uint64_t v55 = v37;
    if (v37)
    {
      *(void *)(v12 + 8) = 0;
      uint64_t v43 = *(unsigned int *)(v12 + 16);
      if (v43)
      {
        uint64_t v44 = 40 * v43;
        do
        {
          void *v42 = -4096;
          v42 += 5;
          v44 -= 40;
        }
        while (v44);
      }
      if (v16)
      {
        uint64_t v45 = 40 * v16;
        v46 = (uint64_t *)v37;
        while (1)
        {
          uint64_t v47 = *v46;
          if ((*v46 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            break;
          }
LABEL_68:
          v46 += 5;
          v45 -= 40;
          if (!v45) {
            goto LABEL_69;
          }
        }
        uint64_t v56 = v45;
        uint64_t v59 = 0;
        sub_1CBA9C7FC(*(void *)v12, *(_DWORD *)(v12 + 16), v47, &v59);
        uint64_t v48 = v59;
        *uint64_t v59 = v47;
        v48[1] = (uint64_t)(v48 + 4);
        *((_OWORD *)v48 + 1) = xmmword_1CDB158C0;
        unsigned int v49 = (uint64_t *)v46[1];
        if (v46 != v48)
        {
          unint64_t v50 = v46[2];
          if (v50)
          {
            if (v46 + 4 != v49)
            {
              v48[1] = (uint64_t)v49;
              v48[2] = v50;
              v48[3] = v46[3];
              v46[1] = (uint64_t)(v46 + 4);
              v46[2] = 0;
              v46[3] = 0;
              ++*(_DWORD *)(v12 + 8);
LABEL_67:
              uint64_t v45 = v56;
              goto LABEL_68;
            }
            v54 = v48;
            uint64_t v53 = v46[2];
            if (v50 >= 3) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            memcpy(v48 + 4, v49, 2 * v50);
            unsigned int v49 = (uint64_t *)v46[1];
            v54[2] = v53;
            v46[2] = 0;
          }
        }
        ++*(_DWORD *)(v12 + 8);
        if (v46 + 4 != v49) {
          free(v49);
        }
        goto LABEL_67;
      }
LABEL_69:
      MEMORY[0x1D25D9CD0](v55, 8);
      uint64_t v42 = *(void **)v12;
      LODWORD(v51) = *(_DWORD *)(v12 + 16);
    }
    else
    {
      *(void *)(v12 + 8) = 0;
      uint64_t v51 = *(unsigned int *)(v12 + 16);
      if (v51)
      {
        uint64_t v52 = 0;
        do
        {
          v42[v52] = -4096;
          v52 += 5;
        }
        while (5 * v51 != v52);
      }
    }
    sub_1CBA9C7FC((uint64_t)v42, v51, a3, &v58);
    int v15 = *(_DWORD *)(v12 + 8);
    uint64_t v14 = v58;
    goto LABEL_4;
  }
  int v17 = *(_DWORD *)(v12 + 16);
  if ((int)v16 + ~v15 - *(_DWORD *)(v12 + 12) <= v16 >> 3) {
    goto LABEL_48;
  }
LABEL_4:
  *(_DWORD *)(v12 + 8) = v15 + 1;
  if (*v14 != -4096) {
    --*(_DWORD *)(v12 + 12);
  }
  *uint64_t v14 = a3;
  v14[1] = (uint64_t)(v14 + 4);
  *((_OWORD *)v14 + 1) = xmmword_1CDB158C0;
LABEL_7:
  int v18 = *(_DWORD *)a1[1];
  if (v18 == 3 && a2 == 2)
  {
    uint64_t v20 = *((unsigned int *)a4 + 2);
    if (v20)
    {
      uint64_t v21 = *a4;
      uint64_t v22 = v14[2];
      uint64_t v23 = 6 * v20;
      do
      {
        if (v22 + 1 > (unint64_t)v14[3]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(_WORD *)(v14[1] + 2 * v22) = (*v21 | (unsigned __int16)(16 * *v21)) & 0xFF0F;
        uint64_t v22 = v14[2] + 1;
        v14[2] = v22;
        v21 += 6;
        v23 -= 6;
      }
      while (v23);
      return 1;
    }
  }
  if (v18 != a2) {
    return 0;
  }
  uint64_t v24 = *((unsigned int *)a4 + 8);
  if (!v24)
  {
    uint64_t result = 0;
LABEL_39:
    uint64_t v33 = *((unsigned int *)a4 + 2);
    if (!v33) {
      return result;
    }
    uint64_t v34 = *a4;
    uint64_t v35 = v14[2];
    uint64_t v36 = 6 * v33;
    do
    {
      if (v35 + 1 > (unint64_t)v14[3]) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(_WORD *)(v14[1] + 2 * v35) = (*v34 | (unsigned __int16)(16 * *v34)) & 0xFF0F;
      uint64_t v35 = v14[2] + 1;
      v14[2] = v35;
      v34 += 6;
      v36 -= 6;
    }
    while (v36);
    return 1;
  }
  char v25 = 0;
  uint64_t v26 = a4[3];
  uint64_t v27 = 6 * v24;
  do
  {
    signed int v28 = *((unsigned __int16 *)v26 + 1);
    BOOL v29 = a6 + a5 <= v28 || v28 < a5;
    if (!v29 || (v28 <= a5 ? (BOOL v30 = *((unsigned __int16 *)v26 + 2) + v28 <= a5) : (BOOL v30 = 1), !v30))
    {
      uint64_t v31 = v14[2];
      if (v31 + 1 > (unint64_t)v14[3]) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(_WORD *)(v14[1] + 2 * v31) = (*v26 | (unsigned __int16)(16 * *v26)) & 0xFF0F;
      ++v14[2];
      char v25 = 1;
      *(_DWORD *)a1[2] |= 1 << (*v26 & 0xF);
      *(_DWORD *)a1[3] |= 1 << (*v26 >> 4);
    }
    v26 += 6;
    v27 -= 6;
  }
  while (v27);
  uint64_t result = v25 & 1;
  if (!*((_DWORD *)a4 + 8)) {
    goto LABEL_39;
  }
  return result;
}

uint64_t sub_1CBA9C7FC(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(a1 + 40 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        unint64_t v6 = (void *)(a1 + 40 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        unint64_t v6 = v10;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

unint64_t sub_1CBA9C894(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v5 = *(void *)a1 + 32 * v3;
    if (*(void *)a1 > a2 || v5 <= a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return a2;
}

uint64_t *sub_1CBA9C91C(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *(unsigned __int16 **)(a2 + 16);
  uint64_t v5 = *((void *)v4 + 2);
  uint64_t v6 = v5 & 0x800100;
  uint64_t v7 = v5 & 0x800200;
  unint64_t v8 = *(void *)(a2 + 48);
  if (v8 < 8) {
    goto LABEL_18;
  }
  if ((v8 & 7) != 0)
  {
    uint64_t v9 = (_DWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
    BOOL v10 = (*(void *)(a2 + 48) & 7) != 3 || v9 == 0;
    if (v10 || !*v9) {
      goto LABEL_18;
    }
  }
  else
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + 48) = v8;
  }
  if ((v8 & 7) != 0)
  {
    int v11 = *(uint64_t **)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
    if (!v11) {
      goto LABEL_18;
    }
  }
  else
  {
    int v11 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFF8);
    *(void *)(a2 + 48) = v11;
    if (!v11) {
      goto LABEL_18;
    }
  }
  BOOL v12 = 0;
  uint64_t v13 = *v11;
  if ((v13 & 4) != 0)
  {
    uint64_t result = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF8);
    if ((v13 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if (*((_DWORD *)result + 2) == 7)
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 48))(result);
        BOOL v12 = result == 0;
        int v4 = *(unsigned __int16 **)(v2 + 16);
        goto LABEL_19;
      }
LABEL_18:
      BOOL v12 = 0;
    }
  }
LABEL_19:
  uint64_t v14 = 0x2C00000000000005;
  if (v6 != 8388864 && v7 != 8389120 && !v12)
  {
    int v16 = *v4;
    if ((v16 - 4821) >= 4)
    {
      if ((v16 - 743) < 0xE || (v16 - 4581) < 0xC)
      {
        uint64_t v14 = 0x2C00000000000003;
        goto LABEL_61;
      }
      uint64_t v14 = 0x2C00000000000801;
      if ((v4[8] & 2) == 0 && (v16 - 2970) >= 0x48 && (v16 - 2862) >= 0x6C)
      {
        unint64_t v18 = *(void *)(v2 + 48);
        if (v18 < 8)
        {
LABEL_38:
          __int16 v19 = *(_WORD *)(v2 + 44);
          unint64_t v20 = *((void *)v4 + 1);
          if ((v19 & 0xC) == 0 || (v19 & 4) != 0)
          {
            uint64_t v22 = (v20 >> 7) & 1;
          }
          else if ((v20 & 0x80) != 0)
          {
            LOBYTE(v22) = 1;
          }
          else
          {
            do
            {
              unsigned int v21 = *(unsigned __int16 *)(v2 + 44);
              LODWORD(v22) = (v21 >> 3) & 1;
              if ((v21 & 8) == 0) {
                break;
              }
              uint64_t v2 = *(void *)(v2 + 8);
            }
            while ((*(unsigned char *)(*(void *)(v2 + 16) + 8) & 0x80) == 0);
          }
          if ((v22 & (byte_1EBCBFD30 != 0)) != 0) {
            uint64_t v14 = 0x2C0000000000080FLL;
          }
          else {
            uint64_t v14 = 0x2C00000000000001;
          }
          goto LABEL_61;
        }
        if ((v18 & 7) != 0)
        {
          if ((*(void *)(v2 + 48) & 7) != 3
            || (v18 & 0xFFFFFFFFFFFFFFF8) == 0
            || !*(_DWORD *)(v18 & 0xFFFFFFFFFFFFFFF8))
          {
            goto LABEL_38;
          }
        }
        else
        {
          v18 &= 0xFFFFFFFFFFFFFFF8;
          *(void *)(v2 + 48) = v18;
          if (!v18)
          {
LABEL_60:
            uint64_t v14 = 0x2C00000000000009;
            goto LABEL_61;
          }
        }
        if ((v18 & 7) != 0)
        {
          if ((v18 & 7) != 3 || (v18 & 0xFFFFFFFFFFFFFFF8) == 0 || *(_DWORD *)(v18 & 0xFFFFFFFFFFFFFFF8) != 1) {
            goto LABEL_60;
          }
        }
        else
        {
          v18 &= 0xFFFFFFFFFFFFFFF8;
          *(void *)(v2 + 48) = v18;
        }
        unint64_t v23 = v18 & 0xFFFFFFFFFFFFFFF8;
        if ((v18 & 7) != 0) {
          unint64_t v23 = *(void *)(v23 + 8);
        }
        else {
          *(void *)(v2 + 48) = v23;
        }
        if (v23 && !*(_DWORD *)(v23 + 16))
        {
          uint64_t v14 = 0x2C00000000000001;
          goto LABEL_61;
        }
        goto LABEL_60;
      }
    }
  }
LABEL_61:
  *uint64_t v3 = v14;
  return result;
}

int *sub_1CBA9CB98(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 4);
  if (v3)
  {
    LODWORD(v4) = (37 * *a2) & (v3 - 1);
    uint64_t result = (int *)(v2 + 8 * v4);
    int v6 = *result;
    if (*a2 == *result) {
      return result;
    }
    int v7 = 1;
    while (v6 != -1)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      int v6 = *(_DWORD *)(v2 + 8 * v4);
      if (*a2 == v6) {
        return (int *)(v2 + 8 * v4);
      }
    }
  }
  return (int *)(v2 + 8 * v3);
}

void sub_1CBA9CC0C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5 = (void *)*a3;
  int v6 = *(void **)(a2 + 24);
  if (v5)
  {
    if (v6) {
      llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator();
    }
    int v7 = 0;
    int v6 = v5;
  }
  else
  {
    *a3 = v6;
    int v7 = *(void **)(a2 + 24);
    if (!v6)
    {
      uint64_t v8 = v7[4] + 320;
      int v6 = (void *)v8;
      do
      {
        int v6 = (void *)*v6;
        if (v6 == (void *)v8) {
          llvm::report_fatal_error((llvm *)"Shader has no exit block", (const llvm::Twine *)1);
        }
      }
      while (((v6[12] - v6[11]) & 0x7FFFFFFF8) != 0);
      *a3 = v6;
      int v7 = *(void **)(a2 + 24);
    }
  }
  if (v7 == v6 || v5 == 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = 0;
  }
  *a4 = v10;
}

void sub_1CBA9CCC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a2 + 328);
  uint64_t v113 = (void *)(a2 + 320);
  if (v4 != (void *)(a2 + 320))
  {
    uint64_t v112 = a1 + 1680;
    int v114 = (unsigned char *)(a1 + 1672);
    uint64_t v115 = a1 + 8;
    do
    {
      char v116 = v4;
      unsigned int v6 = v4 >> 4;
      if (*v114)
      {
        int v7 = 16;
        uint64_t v8 = v112;
      }
      else
      {
        int v7 = *(_DWORD *)(a1 + 1688);
        if (!v7)
        {
          int v17 = 0;
          goto LABEL_20;
        }
        uint64_t v8 = *(void *)(a1 + 1680);
      }
      int v9 = v7 - 1;
      unsigned int v10 = v9 & (v6 ^ (v4 >> 9));
      int v11 = (void *)(v8 + 104 * v10);
      BOOL v12 = (void *)*v11;
      if (v4 == (void *)*v11) {
        goto LABEL_21;
      }
      uint64_t v13 = 0;
      int v14 = 1;
      while (v12 != (void *)-4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == (void *)-8192;
        }
        if (v15) {
          uint64_t v13 = v11;
        }
        unsigned int v16 = v10 + v14++;
        unsigned int v10 = v16 & v9;
        int v11 = (void *)(v8 + 104 * v10);
        BOOL v12 = (void *)*v11;
        if (v4 == (void *)*v11) {
          goto LABEL_21;
        }
      }
      if (v13) {
        int v17 = v13;
      }
      else {
        int v17 = v11;
      }
LABEL_20:
      unint64_t v18 = sub_1CBA9D634((uint64_t)v114, (uint64_t)&v116, &v116, v17);
      void *v18 = v116;
      v18[1] = v18 + 5;
      v18[2] = v18 + 5;
      v18[3] = 8;
      *((_DWORD *)v18 + 8) = 0;
LABEL_21:
      char v116 = v4;
      if (*(unsigned char *)a1)
      {
        int v19 = 16;
        uint64_t v20 = v115;
      }
      else
      {
        int v19 = *(_DWORD *)(a1 + 16);
        if (!v19)
        {
          BOOL v29 = 0;
LABEL_38:
          BOOL v30 = sub_1CBA9D634(a1, (uint64_t)&v116, &v116, v29);
          *BOOL v30 = v116;
          v30[1] = v30 + 5;
          v30[2] = v30 + 5;
          v30[3] = 8;
          *((_DWORD *)v30 + 8) = 0;
          goto LABEL_39;
        }
        uint64_t v20 = *(void *)(a1 + 8);
      }
      int v21 = v19 - 1;
      unsigned int v22 = v21 & (v6 ^ (v4 >> 9));
      unint64_t v23 = (void *)(v20 + 104 * v22);
      uint64_t v24 = (void *)*v23;
      if (v4 != (void *)*v23)
      {
        char v25 = 0;
        int v26 = 1;
        while (v24 != (void *)-4096)
        {
          if (v25) {
            BOOL v27 = 0;
          }
          else {
            BOOL v27 = v24 == (void *)-8192;
          }
          if (v27) {
            char v25 = v23;
          }
          unsigned int v28 = v22 + v26++;
          unsigned int v22 = v28 & v21;
          unint64_t v23 = (void *)(v20 + 104 * v22);
          uint64_t v24 = (void *)*v23;
          if (v4 == (void *)*v23) {
            goto LABEL_39;
          }
        }
        if (v25) {
          BOOL v29 = v25;
        }
        else {
          BOOL v29 = v23;
        }
        goto LABEL_38;
      }
LABEL_39:
      if (((v4[12] - v4[11]) & 0x7FFFFFFF0) != 0)
      {
        uint64_t v31 = sub_1CBA9D508(a3, (uint64_t)v4);
        uint64_t v33 = (uint64_t *)v4[11];
        unint64_t v32 = (uint64_t *)v4[12];
        if (v33 != v32)
        {
          uint64_t v34 = **(void **)(v31 + 8);
          unsigned int v35 = v6 ^ (v4 >> 9);
          do
          {
            char v116 = 0;
            for (uint64_t i = *v33; ; uint64_t i = *v64)
            {
              char v116 = (void *)i;
              if (v34 == i) {
                break;
              }
              if (*(unsigned char *)a1)
              {
                int v37 = 16;
                uint64_t v38 = v115;
              }
              else
              {
                int v37 = *(_DWORD *)(a1 + 16);
                if (!v37)
                {
                  uint64_t v47 = 0;
                  goto LABEL_61;
                }
                uint64_t v38 = *(void *)(a1 + 8);
              }
              int v39 = v37 - 1;
              unsigned int v40 = v39 & ((i >> 4) ^ (i >> 9));
              unsigned int v41 = (void *)(v38 + 104 * v40);
              uint64_t v42 = *v41;
              if (i == *v41) {
                goto LABEL_62;
              }
              uint64_t v43 = 0;
              int v44 = 1;
              while (v42 != -4096)
              {
                if (v43) {
                  BOOL v45 = 0;
                }
                else {
                  BOOL v45 = v42 == -8192;
                }
                if (v45) {
                  uint64_t v43 = v41;
                }
                unsigned int v46 = v40 + v44++;
                unsigned int v40 = v46 & v39;
                unsigned int v41 = (void *)(v38 + 104 * v40);
                uint64_t v42 = *v41;
                if (i == *v41) {
                  goto LABEL_62;
                }
              }
              if (v43) {
                uint64_t v47 = v43;
              }
              else {
                uint64_t v47 = v41;
              }
LABEL_61:
              unsigned int v41 = sub_1CBA9D634(a1, (uint64_t)&v116, &v116, v47);
              *unsigned int v41 = v116;
              v41[1] = v41 + 5;
              v41[2] = v41 + 5;
              v41[3] = 8;
              *((_DWORD *)v41 + 8) = 0;
LABEL_62:
              uint64_t v48 = v41[2];
              uint64_t v49 = *((unsigned int *)v41 + 7);
              if (v48 != v41[1])
              {
                unsigned int v53 = *((_DWORD *)v41 + 6);
                goto LABEL_73;
              }
              if (!v49)
              {
LABEL_70:
                unsigned int v53 = *((_DWORD *)v41 + 6);
                if (v49 < v53)
                {
                  *((_DWORD *)v41 + 7) = v49 + 1;
                  *(void *)(v48 + 8 * v49) = v4;
                  goto LABEL_94;
                }
LABEL_73:
                if (3 * v53 <= 4 * ((int)v49 - *((_DWORD *)v41 + 8)))
                {
                  if (v53 >= 0x40) {
                    v53 *= 2;
                  }
                  else {
                    unsigned int v53 = 128;
                  }
                }
                else if (v53 - v49 >= v53 >> 3)
                {
                  goto LABEL_75;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v41 + 1), v53);
                unsigned int v53 = *((_DWORD *)v41 + 6);
                uint64_t v48 = v41[2];
LABEL_75:
                unsigned int v54 = v53 - 1;
                unsigned int v55 = (v53 - 1) & v35;
                uint64_t v56 = (void *)(v48 + 8 * v55);
                uint64_t v57 = (void *)*v56;
                if (*v56 == -1)
                {
                  v58 = 0;
LABEL_87:
                  if (v58) {
                    unsigned int v62 = v58;
                  }
                  else {
                    unsigned int v62 = v56;
                  }
                  if ((void *)*v62 != v4)
                  {
                    if (*v62 == -2) {
                      --*((_DWORD *)v41 + 8);
                    }
                    else {
                      ++*((_DWORD *)v41 + 7);
                    }
                    *unsigned int v62 = v4;
                  }
                }
                else
                {
                  v58 = 0;
                  int v59 = 1;
                  while (v57 != v4)
                  {
                    if (v58) {
                      BOOL v60 = 0;
                    }
                    else {
                      BOOL v60 = v57 == (void *)-2;
                    }
                    if (v60) {
                      v58 = v56;
                    }
                    unsigned int v61 = v55 + v59++;
                    unsigned int v55 = v61 & v54;
                    uint64_t v56 = (void *)(v48 + 8 * (v61 & v54));
                    uint64_t v57 = (void *)*v56;
                    if (*v56 == -1) {
                      goto LABEL_87;
                    }
                  }
                }
                goto LABEL_94;
              }
              unint64_t v50 = 0;
              uint64_t v51 = 8 * v49;
              uint64_t v52 = (void *)v41[2];
              while ((void *)*v52 != v4)
              {
                if (*v52 == -2) {
                  unint64_t v50 = v52;
                }
                ++v52;
                v51 -= 8;
                if (!v51)
                {
                  if (!v50) {
                    goto LABEL_70;
                  }
                  *unint64_t v50 = v4;
                  --*((_DWORD *)v41 + 8);
                  break;
                }
              }
LABEL_94:
              uint64_t v63 = sub_1CBA9D508(a3, (uint64_t)v116);
              if (v63)
              {
                uint64_t v64 = *(uint64_t **)(v63 + 8);
                if (v64) {
                  continue;
                }
              }
              break;
            }
            ++v33;
          }
          while (v33 != v32);
        }
      }
      uint64_t v4 = (void *)v4[1];
    }
    while (v4 != v113);
  }
  int v65 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 <= 1u)
  {
    if (v65)
    {
      uint64_t v110 = a1 + 8;
      unsigned int v111 = 16;
    }
    else
    {
      uint64_t v110 = *(void *)(a1 + 8);
      unsigned int v111 = *(_DWORD *)(a1 + 16);
    }
    uint64_t v68 = (void *)(v110 + 104 * v111);
    int v67 = v68;
  }
  else
  {
    if (v65)
    {
      uint64_t v66 = (void *)(a1 + 8);
      int v67 = (void *)(a1 + 1672);
    }
    else
    {
      uint64_t v66 = *(void **)(a1 + 8);
      unsigned int v109 = *(_DWORD *)(a1 + 16);
      if (!v109)
      {
        unsigned int v70 = 0;
        uint64_t v68 = *(void **)(a1 + 8);
        uint64_t v69 = v68;
        goto LABEL_121;
      }
      int v67 = &v66[13 * v109];
    }
    int v65 = *(_DWORD *)a1 & 1;
    uint64_t v68 = v66;
    while (*v68 == -4096 || *v68 == -8192)
    {
      v68 += 13;
      if (v68 == v67)
      {
        uint64_t v68 = v67;
        break;
      }
    }
  }
  if (v65)
  {
    uint64_t v69 = (void *)(a1 + 8);
    unsigned int v70 = 16;
  }
  else
  {
    uint64_t v69 = *(void **)(a1 + 8);
    unsigned int v70 = *(_DWORD *)(a1 + 16);
  }
  uint64_t v66 = v67;
LABEL_121:
  uint64_t v71 = &v69[13 * v70];
  while (v68 != v71)
  {
    uint64_t v72 = v68[2];
    uint64_t v73 = *v68;
    uint64_t v74 = 24;
    if (v72 == v68[1]) {
      uint64_t v74 = 28;
    }
    uint64_t v75 = *(unsigned int *)((char *)v68 + v74);
    if (v75)
    {
      uint64_t v76 = 8 * v75;
      int v77 = (unint64_t *)v68[2];
      while (*v77 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v77;
        v76 -= 8;
        if (!v76) {
          goto LABEL_192;
        }
      }
    }
    else
    {
      int v77 = (unint64_t *)v68[2];
    }
    unsigned int v78 = (unint64_t *)(v72 + 8 * v75);
    if (v77 == v78) {
      goto LABEL_192;
    }
LABEL_131:
    char v116 = 0;
    uint64_t v79 = (void *)*v77;
    char v116 = (void *)*v77;
    if (*(unsigned char *)(a1 + 1672))
    {
      int v80 = 16;
      uint64_t v81 = a1 + 1680;
    }
    else
    {
      int v80 = *(_DWORD *)(a1 + 1688);
      if (!v80)
      {
        v90 = 0;
        goto LABEL_148;
      }
      uint64_t v81 = *(void *)(a1 + 1680);
    }
    int v82 = v80 - 1;
    unsigned int v83 = v82 & ((v79 >> 4) ^ (v79 >> 9));
    v84 = (void *)(v81 + 104 * v83);
    uint64_t v85 = (void *)*v84;
    if (v79 == (void *)*v84) {
      goto LABEL_149;
    }
    int v86 = 0;
    int v87 = 1;
    while (v85 != (void *)-4096)
    {
      if (v86) {
        BOOL v88 = 0;
      }
      else {
        BOOL v88 = v85 == (void *)-8192;
      }
      if (v88) {
        int v86 = v84;
      }
      unsigned int v89 = v83 + v87++;
      unsigned int v83 = v89 & v82;
      v84 = (void *)(v81 + 104 * v83);
      uint64_t v85 = (void *)*v84;
      if (v79 == (void *)*v84) {
        goto LABEL_149;
      }
    }
    if (v86) {
      v90 = v86;
    }
    else {
      v90 = v84;
    }
LABEL_148:
    v84 = sub_1CBA9D634(a1 + 1672, (uint64_t)&v116, &v116, v90);
    void *v84 = v116;
    v84[1] = v84 + 5;
    v84[2] = v84 + 5;
    v84[3] = 8;
    *((_DWORD *)v84 + 8) = 0;
LABEL_149:
    uint64_t v91 = v84[2];
    uint64_t v92 = *((unsigned int *)v84 + 7);
    if (v91 != v84[1])
    {
      unsigned int v96 = *((_DWORD *)v84 + 6);
LABEL_160:
      if (3 * v96 <= 4 * ((int)v92 - *((_DWORD *)v84 + 8)))
      {
        if (v96 >= 0x40) {
          v96 *= 2;
        }
        else {
          unsigned int v96 = 128;
        }
      }
      else if (v96 - v92 >= v96 >> 3)
      {
        goto LABEL_162;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v84 + 1), v96);
      unsigned int v96 = *((_DWORD *)v84 + 6);
      uint64_t v91 = v84[2];
LABEL_162:
      unsigned int v97 = v96 - 1;
      unsigned int v98 = (v96 - 1) & ((v73 >> 4) ^ (v73 >> 9));
      int v99 = (void *)(v91 + 8 * v98);
      uint64_t v100 = *v99;
      if (*v99 == -1)
      {
        int v101 = 0;
LABEL_174:
        if (v101) {
          v105 = v101;
        }
        else {
          v105 = v99;
        }
        if (*v105 != v73)
        {
          if (*v105 == -2) {
            --*((_DWORD *)v84 + 8);
          }
          else {
            ++*((_DWORD *)v84 + 7);
          }
          void *v105 = v73;
        }
      }
      else
      {
        int v101 = 0;
        int v102 = 1;
        while (v100 != v73)
        {
          if (v101) {
            BOOL v103 = 0;
          }
          else {
            BOOL v103 = v100 == -2;
          }
          if (v103) {
            int v101 = v99;
          }
          unsigned int v104 = v98 + v102++;
          unsigned int v98 = v104 & v97;
          int v99 = (void *)(v91 + 8 * (v104 & v97));
          uint64_t v100 = *v99;
          if (*v99 == -1) {
            goto LABEL_174;
          }
        }
      }
      goto LABEL_181;
    }
    if (v92)
    {
      uint64_t v93 = 0;
      uint64_t v94 = 8 * v92;
      uint64_t v95 = (void *)v84[2];
      while (*v95 != v73)
      {
        if (*v95 == -2) {
          uint64_t v93 = v95;
        }
        ++v95;
        v94 -= 8;
        if (!v94)
        {
          if (!v93) {
            goto LABEL_157;
          }
          *uint64_t v93 = v73;
          --*((_DWORD *)v84 + 8);
          goto LABEL_181;
        }
      }
      goto LABEL_181;
    }
LABEL_157:
    unsigned int v96 = *((_DWORD *)v84 + 6);
    if (v92 >= v96) {
      goto LABEL_160;
    }
    *((_DWORD *)v84 + 7) = v92 + 1;
    *(void *)(v91 + 8 * v92) = v73;
LABEL_181:
    uint64_t v106 = v77 + 1;
    while (v106 != v78)
    {
      unint64_t v107 = *v106++;
      if (v107 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        int v77 = v106 - 1;
        goto LABEL_131;
      }
    }
LABEL_192:
    BOOL v108 = v68 + 13;
    uint64_t v68 = v66;
    if (v108 != v66)
    {
      uint64_t v68 = v108;
      while ((*v68 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v68 += 13;
        if (v68 == v66)
        {
          uint64_t v68 = v66;
          break;
        }
      }
    }
  }
}

uint64_t sub_1CBA9D508(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 248);
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v4 = *(unsigned int *)(v2 + 64);
  if (v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v6 = (uint64_t *)(v3 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a2) {
      goto LABEL_8;
    }
    int v8 = 1;
    while (v7 != -4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & (v4 - 1);
      uint64_t v7 = *(void *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        unsigned int v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_8;
      }
    }
  }
  unsigned int v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_8:
  if (v6 == (uint64_t *)(v3 + 16 * v4)) {
    return 0;
  }
  else {
    return v6[1];
  }
}

uint64_t sub_1CBA9D588(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 104 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    uint64_t result = 1;
  }
  else
  {
    int v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        int v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 104 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_13;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

void *sub_1CBA9D634(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 16;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1CBA9D7B0(a1, 2 * v8);
    uint64_t v11 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v12 = 16;
    }
    else
    {
      int v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        int v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      uint64_t v11 = *(void *)(a1 + 8);
    }
    int v9 = *(_DWORD *)a1 & 1;
    int v13 = v12 - 1;
    unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (void *)(v11 + 104 * v14);
    uint64_t v15 = *a4;
    if (*a3 != *a4)
    {
      unsigned int v16 = 0;
      int v17 = 1;
      while (v15 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -8192;
        }
        if (v18) {
          unsigned int v16 = a4;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        a4 = (void *)(v11 + 104 * v14);
        uint64_t v15 = *a4;
        if (*a3 == *a4) {
          goto LABEL_7;
        }
      }
      if (v16) {
        a4 = v16;
      }
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1CBA9D7B0(a1, v8);
      uint64_t v20 = 0;
      sub_1CBA9D588(a1, a3, &v20);
      a4 = v20;
      int v6 = *(_DWORD *)a1;
    }
    int v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

void sub_1CBA9D7B0(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2;
  v18[208] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x11)
  {
    unint64_t v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    int v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40) {
      unsigned int v2 = v6 + 1;
    }
    else {
      unsigned int v2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v16 = *(uint64_t **)(a1 + 8);
    unsigned int v17 = *(_DWORD *)(a1 + 16);
    if (v2 <= 0x10)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      *(void *)(a1 + 8) = operator new(104 * v2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v2;
    }
    sub_1CBA9D9D8((int *)a1, v16, &v16[13 * v17]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v7 = 0;
  unsigned int v8 = v18;
  do
  {
    uint64_t v9 = a1 + v7;
    uint64_t v10 = *(void *)(a1 + v7 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = v8 + 5;
      *unsigned int v8 = v10;
      v8[1] = (uint64_t)(v8 + 5);
      int v12 = *(void **)(v9 + 16);
      int v13 = *(void **)(v9 + 24);
      if (v13 == v12)
      {
        v8[2] = (uint64_t)v11;
        uint64_t v14 = *(unsigned int *)(a1 + v7 + 36);
        int v12 = *(void **)(v9 + 24);
        if (v14)
        {
          memmove(v11, v12, 8 * v14);
          int v13 = *(void **)(v9 + 16);
          int v12 = *(void **)(v9 + 24);
        }
      }
      else
      {
        v8[2] = (uint64_t)v13;
        *(void *)(v9 + 24) = v12;
        int v13 = v12;
      }
      uint64_t v15 = a1 + v7;
      v8[3] = *(void *)(a1 + v7 + 32);
      *((_DWORD *)v8 + 8) = *(_DWORD *)(a1 + v7 + 40);
      *(void *)(v15 + 32) = 8;
      *(_DWORD *)(v15 + 40) = 0;
      v8 += 13;
      if (v12 != v13) {
        free(v12);
      }
    }
    v7 += 104;
  }
  while (v7 != 1664);
  if (v2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    *(void *)(a1 + 8) = operator new(104 * v2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v2;
  }
  sub_1CBA9D9D8((int *)a1, v18, v8);
}

void sub_1CBA9D9D8(int *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a2;
  int v6 = *a1;
  *(void *)a1 = *a1 & 1;
  uint64_t v7 = a1 + 2;
  if (v6)
  {
    uint64_t v10 = a1 + 418;
    uint64_t v9 = a1 + 2;
  }
  else
  {
    unsigned int v8 = a1[4];
    if (!v8) {
      goto LABEL_5;
    }
    uint64_t v9 = (void *)*((void *)a1 + 1);
    uint64_t v10 = &v9[13 * v8];
  }
  do
  {
    *uint64_t v9 = -4096;
    v9 += 13;
  }
  while (v9 != v10);
LABEL_5:
  if (a2 != a3)
  {
    while (1)
    {
      uint64_t v11 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000) {
        break;
      }
LABEL_27:
      v4 += 13;
      if (v4 == a3) {
        return;
      }
    }
    if (*(unsigned char *)a1)
    {
      int v12 = 16;
      int v13 = v7;
    }
    else
    {
      int v12 = a1[4];
      if (!v12)
      {
        unsigned int v16 = 0;
LABEL_22:
        unsigned int v22 = v16 + 5;
        *unsigned int v16 = v11;
        v16[1] = (uint64_t)(v16 + 5);
        uint64_t v24 = v4[1];
        uint64_t v23 = v4[2];
        if (v23 == v24)
        {
          v16[2] = (uint64_t)v22;
          uint64_t v25 = *((unsigned int *)v4 + 7);
          if (v25) {
            memmove(v22, (const void *)v4[2], 8 * v25);
          }
        }
        else
        {
          v16[2] = v23;
          v4[2] = v24;
        }
        v16[3] = v4[3];
        *((_DWORD *)v16 + 8) = *((_DWORD *)v4 + 8);
        v4[3] = 8;
        *((_DWORD *)v4 + 8) = 0;
        *a1 += 2;
        int v26 = (void *)v4[2];
        if (v26 != (void *)v4[1]) {
          free(v26);
        }
        goto LABEL_27;
      }
      int v13 = (int *)*((void *)a1 + 1);
    }
    int v14 = v12 - 1;
    unsigned int v15 = v14 & ((v11 >> 4) ^ (v11 >> 9));
    unsigned int v16 = (uint64_t *)&v13[26 * v15];
    uint64_t v17 = *v16;
    if (v11 != *v16)
    {
      BOOL v18 = 0;
      int v19 = 1;
      while (v17 != -4096)
      {
        if (v18) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v17 == -8192;
        }
        if (v20) {
          BOOL v18 = v16;
        }
        unsigned int v21 = v15 + v19++;
        unsigned int v15 = v21 & v14;
        unsigned int v16 = (uint64_t *)&v13[26 * v15];
        uint64_t v17 = *v16;
        if (v11 == *v16) {
          goto LABEL_22;
        }
      }
      if (v18) {
        unsigned int v16 = v18;
      }
    }
    goto LABEL_22;
  }
}

void *sub_1CBA9DB98(void *a1, void *a2, unsigned int a3)
{
  uint64_t v3 = a2;
  if (a3 > 0xF) {
    return v3;
  }
  unint64_t v4 = (void *)a1[7];
  if (v4 == a2) {
    return v3;
  }
  uint64_t v3 = a2;
  while (1)
  {
    unint64_t v5 = *v3 & 0xFFFFFFFFFFFFFFF8;
    int v6 = *(unsigned __int16 **)(v5 + 16);
    int v7 = *v6;
    if ((v7 - 9) <= 0x3C && ((1 << (v7 - 9)) & 0x1000000000000605) != 0 || v7 == 0) {
      goto LABEL_18;
    }
    uint64_t v10 = *((void *)v6 + 1);
    if (v10 & 0x10) != 0 || (v6[8]) {
      goto LABEL_18;
    }
    if ((*(_WORD *)(v5 + 44) & 0xC) != 0 && (*(_WORD *)(v5 + 44) & 4) == 0) {
      break;
    }
    if ((v10 & 0x400) == 0) {
      return v3;
    }
LABEL_18:
    if (v4 == (void *)v5)
    {
      if (a1[8] == a1[9]) {
        return (void *)a1[7];
      }
      else {
        return a2;
      }
    }
    ++a3;
    uint64_t v3 = (void *)(*v3 & 0xFFFFFFFFFFFFFFF8);
    if (a3 == 16) {
      return a2;
    }
  }
  if ((v10 & 0x400) != 0) {
    goto LABEL_18;
  }
  unint64_t v12 = *v3 & 0xFFFFFFFFFFFFFFF8;
  while ((*(_WORD *)(v12 + 44) & 8) != 0)
  {
    unint64_t v12 = *(void *)(v12 + 8);
    if ((*(unsigned char *)(*(void *)(v12 + 16) + 9) & 4) != 0) {
      goto LABEL_18;
    }
  }
  return v3;
}

void *sub_1CBA9DC74(void *a1)
{
  v1 = a1 + 6;
  int v2 = -1;
  uint64_t v3 = a1 + 6;
  do
  {
    uint64_t v3 = (void *)v3[1];
    ++v2;
  }
  while (v3 != v1);
  if (!v2) {
    return a1 + 6;
  }
  uint64_t v4 = a1[7];
  unint64_t v5 = a1[6] & 0xFFFFFFFFFFFFFFF8;
  if (v4 != v5)
  {
    unsigned int v6 = 0;
    while (1)
    {
      int v7 = (void *)v5;
      char v8 = *(_WORD *)(v5 + 44);
      int v9 = v8 & 0xC;
      int v10 = v8 & 4;
      uint64_t v11 = v7[2];
      uint64_t v12 = *(void *)(v11 + 8);
      if (v9) {
        BOOL v13 = v10 == 0;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13)
      {
        int v14 = v7;
        if ((v12 & 0x200) == 0)
        {
          while ((*((_WORD *)v14 + 22) & 8) != 0)
          {
            int v14 = (void *)v14[1];
            if ((*(unsigned char *)(v14[2] + 9) & 2) != 0) {
              goto LABEL_12;
            }
          }
LABEL_11:
          if ((*(unsigned char *)(v11 + 16) & 0x40) == 0) {
            goto LABEL_20;
          }
        }
      }
      else if ((v12 & 0x200) == 0)
      {
        goto LABEL_11;
      }
LABEL_12:
      unint64_t v5 = *v7 & 0xFFFFFFFFFFFFFFF8;
      ++v6;
      v1 = v7;
      if (v4 == v5) {
        return sub_1CBA9DB98(a1, v7, v6);
      }
    }
  }
  unsigned int v6 = 0;
LABEL_20:
  int v7 = v1;
  return sub_1CBA9DB98(a1, v7, v6);
}

void *sub_1CBA9DD2C(void *a1)
{
  v1 = a1;
  int v2 = *(void **)(a1[3] + 56);
  if (v2 != a1)
  {
    while (1)
    {
      uint64_t v3 = (void *)(*v1 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v4 = (unsigned __int16 *)v3[2];
      unsigned int v5 = *v4;
      if (v5 - 13 <= 4) {
        break;
      }
LABEL_5:
      if ((v4[8] & 0x10) != 0)
      {
        if ((*(unsigned char *)(v3[4] + 32 * sub_1CBC7A3F8(v5, 0x16u) + 16) & 8) == 0) {
          return v1;
        }
      }
      else if (v5 >> 1 != 2335)
      {
        return v1;
      }
      int v2 = *(void **)(v3[3] + 56);
      v1 = v3;
      if (v3 == v2) {
        return v1;
      }
    }
    while (v3 != v2)
    {
      uint64_t v3 = (void *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v4 = (unsigned __int16 *)v3[2];
      unsigned int v5 = *v4;
      if (v5 - 13 >= 5) {
        goto LABEL_5;
      }
    }
  }
  return v1;
}

void *sub_1CBA9DDE8(void *result)
{
  uint64_t v1 = result[4] + 320;
  if ((void *)v1 != result)
  {
    do
    {
      for (uint64_t i = result[7]; (void *)i != result + 6; uint64_t i = *(void *)(i + 8))
      {
        unsigned int v3 = **(unsigned __int16 **)(i + 16) - 724;
        if (v3 > 4 || v3 == 2) {
          return result;
        }
        if ((*(unsigned char *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            uint64_t i = *(void *)(i + 8);
        }
      }
      uint64_t result = (void *)result[1];
    }
    while (result != (void *)v1);
  }
  return *(void **)v1;
}

void sub_1CBA9DE54(uint64_t a1, void *a2, void *a3, unsigned int a4, unsigned int a5)
{
  int v9 = a2 + 6;
  if (a2 + 6 == a3) {
    a3 = sub_1CBA9DC74(a2);
  }
  if (a3 == v9 || (int v10 = sub_1CBA9DD2C(a3), v9 == v10))
  {
    unsigned int v55 = 0;
    unint64_t v13 = *v9 & 0xFFFFFFFFFFFFFFF8;
    if (v9 == (void *)v13)
    {
      uint64_t v11 = v9;
      goto LABEL_22;
    }
    uint64_t v14 = *(void *)(*(void *)(v13 + 16) + 8);
    if ((*(_WORD *)(v13 + 44) & 0xC) != 0 && (*(_WORD *)(v13 + 44) & 4) == 0)
    {
      if ((v14 & 0x400) == 0)
      {
        while ((*(_WORD *)(v13 + 44) & 8) != 0)
        {
          unint64_t v13 = *(void *)(v13 + 8);
          if ((*(unsigned char *)(*(void *)(v13 + 16) + 9) & 4) != 0) {
            goto LABEL_13;
          }
        }
        goto LABEL_20;
      }
    }
    else if ((v14 & 0x400) == 0)
    {
LABEL_20:
      uint64_t v11 = v9;
      goto LABEL_35;
    }
LABEL_13:
    unsigned int v16 = *(unsigned __int8 ***)a1;
    uint64_t v17 = *(void *)(**(void **)(a1 + 8) + 8) + 48 * a5;
    if ((MEMORY[0x2C] & 4) != 0)
    {
      BOOL v18 = (llvm::MachineFunction *)a2[4];
      int v19 = *v16;
      int v59 = v19;
      if (v19) {
        llvm::MetadataTracking::track((uint64_t)&v59, v19, 2);
      }
      BOOL v20 = llvm::MachineFunction::CreateMachineInstr(v18, v17, &v59, 0);
      if (!v59) {
        goto LABEL_17;
      }
      int v49 = *v59;
      if ((v49 - 4) > 0x1E)
      {
        if ((v49 - 3) >= 0xFFFFFFFE) {
          unsigned int v53 = v59;
        }
        else {
          unsigned int v53 = 0;
        }
        if ((v49 - 3) < 0xFFFFFFFE)
        {
          if (v49 == 3) {
            *((void *)v59 + 1) = 0;
          }
          goto LABEL_17;
        }
        unint64_t v51 = (unint64_t)(v53 + 8);
      }
      else
      {
        if ((v59[1] & 0x7F) != 2 && !*((_DWORD *)v59 + 3)) {
          goto LABEL_17;
        }
        uint64_t v50 = *((void *)v59 + 2);
        if ((v50 & 4) == 0) {
          goto LABEL_17;
        }
        unint64_t v51 = v50 & 0xFFFFFFFFFFFFFFF8;
        if (!v51) {
          goto LABEL_17;
        }
      }
      uint64_t v56 = &v59;
      sub_1CC5FA668(v51 + 16, &v56);
LABEL_17:
      if ((MEMORY[0x2C] & 4) != 0) {
        *((_WORD *)v20 + 22) |= 0xCu;
      }
      sub_1CC31973C(a2 + 5, 0, (uint64_t)v20);
      goto LABEL_20;
    }
    uint64_t v43 = (llvm::MachineFunction *)a2[4];
    int v44 = *v16;
    int v59 = v44;
    if (v44) {
      llvm::MetadataTracking::track((uint64_t)&v59, v44, 2);
    }
    BOOL v45 = llvm::MachineFunction::CreateMachineInstr(v43, v17, &v59, 0);
    if (v59)
    {
      int v46 = *v59;
      if ((v46 - 4) > 0x1E)
      {
        if ((v46 - 3) >= 0xFFFFFFFE) {
          unsigned int v54 = v59;
        }
        else {
          unsigned int v54 = 0;
        }
        if ((v46 - 3) < 0xFFFFFFFE)
        {
          if (v46 == 3) {
            *((void *)v59 + 1) = 0;
          }
          goto LABEL_124;
        }
        unint64_t v48 = (unint64_t)(v54 + 8);
      }
      else
      {
        if ((v59[1] & 0x7F) != 2 && !*((_DWORD *)v59 + 3)) {
          goto LABEL_124;
        }
        uint64_t v47 = *((void *)v59 + 2);
        if ((v47 & 4) == 0) {
          goto LABEL_124;
        }
        unint64_t v48 = v47 & 0xFFFFFFFFFFFFFFF8;
        if (!v48) {
          goto LABEL_124;
        }
      }
      uint64_t v56 = &v59;
      sub_1CC5FA668(v48 + 16, &v56);
    }
LABEL_124:
    llvm::ilist_traits<llvm::MachineInstr>::addNodeToList(a2 + 5, (uint64_t)v45);
    __break(1u);
    return;
  }
  uint64_t v11 = v10;
  uint64_t v12 = (unsigned __int8 *)v10[7];
  unsigned int v55 = v12;
  if (v12) {
    llvm::MetadataTracking::track((uint64_t)&v55, v12, 2);
  }
LABEL_22:
  if (v11 == *(void **)(v11[3] + 56)) {
    goto LABEL_35;
  }
  unint64_t v21 = *v11 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = *(void *)(*(void *)(v21 + 16) + 8);
  if ((*(_WORD *)(v21 + 44) & 0xC) == 0 || (*(_WORD *)(v21 + 44) & 4) != 0)
  {
    if ((v22 & 0x400) == 0) {
      goto LABEL_35;
    }
LABEL_28:
    uint64_t v24 = *(void *)(**(void **)(a1 + 8) + 8) + 48 * a5;
    uint64_t v25 = (llvm::MachineFunction *)a2[4];
    int v26 = **(unsigned __int8 ***)a1;
    int v59 = v26;
    if (v26) {
      llvm::MetadataTracking::track((uint64_t)&v59, v26, 2);
    }
    BOOL v27 = llvm::MachineFunction::CreateMachineInstr(v25, v24, &v59, 0);
    if (!v59) {
      goto LABEL_31;
    }
    int v40 = *v59;
    if ((v40 - 4) > 0x1E)
    {
      if ((v40 - 3) >= 0xFFFFFFFE) {
        uint64_t v52 = v59;
      }
      else {
        uint64_t v52 = 0;
      }
      if ((v40 - 3) < 0xFFFFFFFE)
      {
        if (v40 == 3) {
          *((void *)v59 + 1) = 0;
        }
        goto LABEL_31;
      }
      unint64_t v42 = (unint64_t)(v52 + 8);
    }
    else
    {
      if ((v59[1] & 0x7F) != 2 && !*((_DWORD *)v59 + 3)) {
        goto LABEL_31;
      }
      uint64_t v41 = *((void *)v59 + 2);
      if ((v41 & 4) == 0) {
        goto LABEL_31;
      }
      unint64_t v42 = v41 & 0xFFFFFFFFFFFFFFF8;
      if (!v42) {
        goto LABEL_31;
      }
    }
    uint64_t v56 = &v59;
    sub_1CC5FA668(v42 + 16, &v56);
LABEL_31:
    if (v9 != v11 && (*((_WORD *)v11 + 22) & 4) != 0) {
      *((_WORD *)v27 + 22) |= 0xCu;
    }
    sub_1CC31973C(a2 + 5, v11, (uint64_t)v27);
    goto LABEL_35;
  }
  if ((v22 & 0x400) != 0) {
    goto LABEL_28;
  }
  while ((*(_WORD *)(v21 + 44) & 8) != 0)
  {
    unint64_t v21 = *(void *)(v21 + 8);
    if ((*(unsigned char *)(*(void *)(v21 + 16) + 9) & 4) != 0) {
      goto LABEL_28;
    }
  }
LABEL_35:
  uint64_t v28 = *(void *)(**(void **)(a1 + 8) + 8) + 231648;
  BOOL v29 = (llvm::MachineFunction *)a2[4];
  int v59 = v55;
  if (v55) {
    llvm::MetadataTracking::track((uint64_t)&v59, v55, 2);
  }
  BOOL v30 = llvm::MachineFunction::CreateMachineInstr(v29, v28, &v59, 0);
  if (v59)
  {
    int v36 = *v59;
    if ((v36 - 4) > 0x1E)
    {
      if ((v36 - 3) >= 0xFFFFFFFE) {
        int v39 = v59;
      }
      else {
        int v39 = 0;
      }
      if ((v36 - 3) < 0xFFFFFFFE)
      {
        if (v36 == 3) {
          *((void *)v59 + 1) = 0;
        }
        goto LABEL_38;
      }
      unint64_t v38 = (unint64_t)(v39 + 8);
    }
    else
    {
      if ((v59[1] & 0x7F) != 2 && !*((_DWORD *)v59 + 3)) {
        goto LABEL_38;
      }
      uint64_t v37 = *((void *)v59 + 2);
      if ((v37 & 4) == 0) {
        goto LABEL_38;
      }
      unint64_t v38 = v37 & 0xFFFFFFFFFFFFFFF8;
      if (!v38) {
        goto LABEL_38;
      }
    }
    uint64_t v56 = &v59;
    sub_1CC5FA668(v38 + 16, &v56);
  }
LABEL_38:
  if (v9 != v11 && (*((_WORD *)v11 + 22) & 4) != 0) {
    *((_WORD *)v30 + 22) |= 0xCu;
  }
  sub_1CC31973C(a2 + 5, v11, (uint64_t)v30);
  LODWORD(v56) = 1;
  uint64_t v57 = 0;
  uint64_t v58 = a4;
  llvm::MachineInstr::addOperand(v30, v29, (const llvm::MachineOperand *)&v56);
  uint64_t v31 = **(unsigned int **)(a1 + 16);
  LODWORD(v56) = 1;
  uint64_t v57 = 0;
  uint64_t v58 = v31;
  llvm::MachineInstr::addOperand(v30, v29, (const llvm::MachineOperand *)&v56);
  if (v55)
  {
    int v32 = *v55;
    if ((v32 - 4) > 0x1E)
    {
      if ((v32 - 3) >= 0xFFFFFFFE) {
        uint64_t v33 = v55;
      }
      else {
        uint64_t v33 = 0;
      }
      if ((v32 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v34 = (unint64_t)(v33 + 8);
LABEL_59:
        uint64_t v56 = &v55;
        sub_1CC5FA668(v34 + 16, &v56);
        return;
      }
      if (v32 == 3) {
        *((void *)v55 + 1) = 0;
      }
    }
    else if ((v55[1] & 0x7F) == 2 || *((_DWORD *)v55 + 3))
    {
      uint64_t v35 = *((void *)v55 + 2);
      if ((v35 & 4) != 0)
      {
        unint64_t v34 = v35 & 0xFFFFFFFFFFFFFFF8;
        if (v34) {
          goto LABEL_59;
        }
      }
    }
  }
}

uint64_t *sub_1CBA9E42C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1)
  {
    int v3 = 16;
    uint64_t v2 = a1 + 8;
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 8);
    int v3 = *(_DWORD *)(a1 + 16);
    if (!v3)
    {
      unsigned int v10 = 0;
      return (uint64_t *)(v2 + 104 * v10);
    }
  }
  int v4 = v3 - 1;
  unsigned int v5 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v6 = (uint64_t *)(v2 + 104 * v5);
  uint64_t v7 = *v6;
  if (*v6 == a2) {
    return v6;
  }
  int v8 = 1;
  while (v7 != -4096)
  {
    unsigned int v9 = v5 + v8++;
    unsigned int v5 = v9 & v4;
    unsigned int v6 = (uint64_t *)(v2 + 104 * (v9 & v4));
    uint64_t v7 = *v6;
    if (*v6 == a2) {
      return v6;
    }
  }
  if (*(_DWORD *)a1)
  {
    unsigned int v10 = 16;
    uint64_t v2 = a1 + 8;
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 8);
    unsigned int v10 = *(_DWORD *)(a1 + 16);
  }
  return (uint64_t *)(v2 + 104 * v10);
}

uint64_t sub_1CBA9E4F0(uint64_t a1)
{
  if ((*(unsigned char *)a1 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 8), 8);
  }
  return a1;
}

void sub_1CBA9E530(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v1 = a1 + 8;
    unsigned int v2 = 16;
  }
  else
  {
    unsigned int v2 = *(_DWORD *)(a1 + 16);
    if (!v2) {
      return;
    }
    uint64_t v1 = *(void *)(a1 + 8);
  }
  uint64_t v3 = 104 * v2;
  int v4 = (void **)(v1 + 16);
  do
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    if (v5 != -4096 && v5 != -8192 && *v4 != *(v4 - 1)) {
      free(*v4);
    }
    v4 += 13;
    v3 -= 104;
  }
  while (v3);
}

llvm::cl::Option *sub_1CBA9E5B0(llvm::cl::Option *a1, char *a2, unsigned char **a3, _WORD *a4, __n128 *a5)
{
  uint64_t v10 = sub_1CB883A14((uint64_t)a1, 0, 0);
  *(unsigned char *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = &unk_1F25EDE58;
  *(void *)(v10 + 144) = 0;
  *(void *)uint64_t v10 = &unk_1F26440A0;
  *(void *)(v10 + 152) = &unk_1F2643CC0;
  *(void *)(v10 + 160) = &unk_1F25EDE78;
  *(void *)(v10 + 184) = v10 + 160;
  sub_1CBA9E6A0(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 sub_1CBA9E6A0(uint64_t a1, char *__s, unsigned char **a3, _WORD *a4, __n128 *a5)
{
  size_t v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v10);
  uint64_t v11 = *a3;
  *(unsigned char *)(a1 + 128) = **a3;
  *(unsigned char *)(a1 + 145) = 1;
  *(unsigned char *)(a1 + 144) = *v11;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  __n128 result = *a5;
  *(__n128 *)(a1 + 32) = *a5;
  return result;
}

uint64_t sub_1CBA9E734()
{
  char v3 = 1;
  int v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Assume whether or not unknown functions have side effects";
  v1.n128_u64[1] = 57;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCBFCB0, "agx2-frag-sync-func-calls-side-effects", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCBFCB0, &dword_1CB82C000);
}

void sub_1CBA9E7C0(llvm::Pass *this)
{
  *(void *)this = &unk_1F25F5498;
  int v2 = (char *)*((void *)this + 31);
  if (v2 != (char *)this + 264) {
    free(v2);
  }
  *(void *)this = &unk_1F260E110;
  char v3 = (char *)*((void *)this + 22);
  if (v3 != (char *)this + 192) {
    free(v3);
  }
  int v4 = (char *)*((void *)this + 13);
  if (v4 != (char *)this + 120) {
    free(v4);
  }
  uint64_t v5 = (char *)*((void *)this + 4);
  if (v5 != (char *)this + 48) {
    free(v5);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CBA9E888(llvm::Pass *this)
{
  *(void *)this = &unk_1F25F5498;
  int v2 = (char *)*((void *)this + 31);
  if (v2 != (char *)this + 264) {
    free(v2);
  }
  *(void *)this = &unk_1F260E110;
  char v3 = (char *)*((void *)this + 22);
  if (v3 != (char *)this + 192) {
    free(v3);
  }
  int v4 = (char *)*((void *)this + 13);
  if (v4 != (char *)this + 120) {
    free(v4);
  }
  uint64_t v5 = (char *)*((void *)this + 4);
  if (v5 != (char *)this + 48) {
    free(v5);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBA9E964()
{
  return "AGX2 verifier of memory operands for instructions";
}

uint64_t sub_1CBA9E974(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 256) = 0;
  uint64_t v2 = *(void *)(a2 + 328);
  if (v2 == a2 + 320) {
    return 0;
  }
  do
  {
    for (uint64_t i = *(void *)(v2 + 56); i != v2 + 48; uint64_t i = *(void *)(i + 8))
    {
      if ((*(unsigned char *)(*(void *)(i + 16) + 18) & 0x40) == 0) {
        goto LABEL_15;
      }
      unint64_t v5 = *(void *)(i + 48);
      if (v5 >= 8)
      {
        if ((v5 & 7) == 0)
        {
          *(void *)(i + 48) = v5 & 0xFFFFFFFFFFFFFFF8;
          goto LABEL_15;
        }
        unsigned int v6 = (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
        BOOL v7 = (*(void *)(i + 48) & 7) != 3 || v6 == 0;
        if (!v7 && *v6) {
          goto LABEL_15;
        }
      }
      unint64_t v8 = *(unsigned int *)(a1 + 256);
      if (v8 >= *(unsigned int *)(a1 + 260)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 248) + 8 * v8) = i;
      ++*(_DWORD *)(a1 + 256);
LABEL_15:
      if ((*(unsigned char *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          uint64_t i = *(void *)(i + 8);
      }
    }
    uint64_t v2 = *(void *)(v2 + 8);
  }
  while (v2 != a2 + 320);
  uint64_t v9 = *(unsigned int *)(a1 + 256);
  if (v9)
  {
    size_t v10 = *(llvm::MachineInstr ***)(a1 + 248);
    uint64_t v11 = 8 * v9;
    do
    {
      uint64_t v12 = *v10;
      unint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
      uint64_t v14 = (void *)*((void *)v13 + 4);
      if (*((void *)v13 + 3) - (void)v14 > 0x1EuLL)
      {
        qmemcpy(v14, "Instruction should have MemOp: ", 31);
        *((void *)v13 + 4) += 31;
      }
      else
      {
        llvm::raw_ostream::write(v13, "Instruction should have MemOp: ", 0x1FuLL);
      }
      llvm::MachineInstr::dump(v12);
      ++v10;
      v11 -= 8;
    }
    while (v11);
    if (*(_DWORD *)(a1 + 256)) {
      llvm::report_fatal_error((llvm *)"Some instructions should have memory operands", (const llvm::Twine *)1);
    }
  }
  return 0;
}

void sub_1CBA9EB18()
{
}

uint64_t sub_1CBA9EBB4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCBFD80;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25F5558;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBFD88, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBA9EB18;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCBFD88, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CBA9ECAC()
{
}

void sub_1CBA9ECE8(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  __n128 v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    int v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    unint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  char v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    unsigned int v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBA9ED9C(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  char v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  int v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBA9EE48()
{
  return "AGX2 LR Spill to a reg";
}

void sub_1CBA9EE58(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CBA9EECC(uint64_t a1, uint64_t a2)
{
  v81[4] = *MEMORY[0x1E4F143B8];
  (*(void (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  int v4 = *(void **)(a2 + 328);
  uint64_t v79 = v81;
  uint64_t v80 = 0x400000000;
  if (v4 != (void *)(a2 + 320))
  {
    unsigned int v5 = 0;
    unsigned int v6 = v4;
    do
    {
      unint64_t v7 = v6[6] & 0xFFFFFFFFFFFFFFF8;
      if (v6 + 6 != (void *)v7)
      {
        if (v7 && (*(unsigned char *)v7 & 4) != 0)
        {
          __int16 v8 = *(_WORD *)(v7 + 44);
        }
        else
        {
          while (1)
          {
            __int16 v8 = *(_WORD *)(v7 + 44);
            if ((v8 & 4) == 0) {
              break;
            }
            unint64_t v7 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
          }
        }
        int v9 = v8 & 0xC;
        int v10 = v8 & 4;
        uint64_t v11 = *(void *)(*(void *)(v7 + 16) + 8);
        if (v9) {
          BOOL v12 = v10 == 0;
        }
        else {
          BOOL v12 = 0;
        }
        if (v12)
        {
          while ((v11 & 0x20) == 0)
          {
            if ((*(_WORD *)(v7 + 44) & 8) == 0) {
              goto LABEL_16;
            }
            unint64_t v7 = *(void *)(v7 + 8);
            LOBYTE(v11) = *(unsigned char *)(*(void *)(v7 + 16) + 8);
          }
LABEL_14:
          if (v5 >= HIDWORD(v80)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v79 + v5) = v6;
          unsigned int v5 = v80 + 1;
          LODWORD(v80) = v80 + 1;
          goto LABEL_16;
        }
        if ((v11 & 0x20) != 0) {
          goto LABEL_14;
        }
      }
LABEL_16:
      unsigned int v6 = (void *)v6[1];
    }
    while (v6 != (void *)(a2 + 320));
  }
  BOOL v13 = (*(_WORD *)(*(void *)a2 + 18) & 0x3F70) == 0 || (*(_WORD *)(*(void *)a2 + 18) & 0x3FF0) == 4080;
  int v14 = v13;
  unsigned int v73 = v14;
  if (v13)
  {
    int v15 = llvm::MachineFunction::addLiveIn(a2, 0x39u, (uint64_t)&off_1E66AB080);
    uint64_t v17 = (char *)v4[20];
    unint64_t v16 = v4[21];
    if ((unint64_t)v17 >= v16)
    {
      int v19 = (char *)v4[19];
      uint64_t v20 = (v17 - v19) >> 4;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 60) {
        abort();
      }
      uint64_t v22 = v16 - (void)v19;
      if (v22 >> 3 > v21) {
        unint64_t v21 = v22 >> 3;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 >> 60) {
          sub_1CB833614();
        }
        uint64_t v24 = (char *)operator new(16 * v23);
      }
      else
      {
        uint64_t v24 = 0;
      }
      uint64_t v25 = &v24[16 * v20];
      *(_WORD *)uint64_t v25 = 57;
      *((void *)v25 + 1) = -1;
      BOOL v18 = v25 + 16;
      if (v17 != v19)
      {
        do
        {
          *((_OWORD *)v25 - 1) = *((_OWORD *)v17 - 1);
          v25 -= 16;
          v17 -= 16;
        }
        while (v17 != v19);
        uint64_t v17 = (char *)v4[19];
      }
      v4[19] = v25;
      v4[20] = v18;
      v4[21] = &v24[16 * v23];
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(_WORD *)uint64_t v17 = 57;
      *((void *)v17 + 1) = -1;
      BOOL v18 = v17 + 16;
    }
    v4[20] = v18;
    int v26 = (unint64_t *)v4[7];
    uint64_t v27 = *(void *)(v3 + 8) + 912;
    uint64_t v28 = (llvm::MachineFunction *)v4[4];
    BOOL v29 = (unsigned __int8 *)v26[7];
    uint64_t v74 = v29;
    if (v29) {
      llvm::MetadataTracking::track((uint64_t)&v74, v29, 2);
    }
    BOOL v30 = llvm::MachineFunction::CreateMachineInstr(v28, v27, &v74, 0);
    if (!v74) {
      goto LABEL_51;
    }
    int v69 = *v74;
    if ((v69 - 4) > 0x1E)
    {
      if ((v69 - 3) >= 0xFFFFFFFE) {
        uint64_t v72 = v74;
      }
      else {
        uint64_t v72 = 0;
      }
      if ((v69 - 3) < 0xFFFFFFFE)
      {
        if (v69 == 3) {
          *((void *)v74 + 1) = 0;
        }
        goto LABEL_51;
      }
      unint64_t v71 = (unint64_t)(v72 + 8);
    }
    else
    {
      if ((v74[1] & 0x7F) != 2 && !*((_DWORD *)v74 + 3)) {
        goto LABEL_51;
      }
      uint64_t v70 = *((void *)v74 + 2);
      if ((v70 & 4) == 0) {
        goto LABEL_51;
      }
      unint64_t v71 = v70 & 0xFFFFFFFFFFFFFFF8;
      if (!v71) {
        goto LABEL_51;
      }
    }
    uint64_t v75 = (uint64_t)&v74;
    sub_1CC5FA668(v71 + 16, &v75);
LABEL_51:
    uint64_t v31 = v4[5];
    *((void *)v30 + 3) = v31;
    uint64_t v32 = *(void *)(v31 + 32);
    uint64_t v33 = *((unsigned int *)v30 + 10);
    if (v33)
    {
      uint64_t v62 = *((void *)v30 + 4);
      uint64_t v63 = *(void *)(v32 + 40);
      uint64_t v64 = 32 * v33;
      do
      {
        if (!*(unsigned char *)v62)
        {
          uint64_t v65 = *(unsigned int *)(v62 + 4);
          if ((int)v65 >= 0) {
            uint64_t v66 = (uint64_t *)(*(void *)(v63 + 272) + 8 * v65);
          }
          else {
            uint64_t v66 = (uint64_t *)(*(void *)(v63 + 24) + 16 * (v65 & 0x7FFFFFFF) + 8);
          }
          uint64_t v67 = *v66;
          if (*v66)
          {
            uint64_t v68 = *(void *)(v67 + 16);
            *(void *)(v67 + 16) = v62;
            *(void *)(v62 + 16) = v68;
            if (*(unsigned char *)(v62 + 3))
            {
              *(void *)(v62 + 24) = v67;
            }
            else
            {
              *(void *)(v62 + 24) = 0;
              uint64_t v66 = (uint64_t *)(v68 + 24);
            }
          }
          else
          {
            *(void *)(v62 + 16) = v62;
            *(void *)(v62 + 24) = 0;
          }
          *uint64_t v66 = v62;
        }
        v62 += 32;
        v64 -= 32;
      }
      while (v64);
    }
    uint64_t v34 = *(void *)(v32 + 728);
    if (v34) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v34 + 24))(v34, v30);
    }
    unint64_t v35 = *v26 & 0xFFFFFFFFFFFFFFF8;
    *(void *)BOOL v30 = v35 | *(void *)v30 & 7;
    *((void *)v30 + 1) = v26;
    *(void *)(v35 + 8) = v30;
    *int v26 = *v26 & 7 | (unint64_t)v30;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    LODWORD(v75) = 0x1000000;
    HIDWORD(v75) = v15;
    llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v75);
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    uint64_t v75 = 0x3900000000;
    uint64_t v78 = 0;
    llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v75);
    if (!v80) {
      goto LABEL_91;
    }
    int v36 = (llvm::MachineBasicBlock **)v79;
    uint64_t v37 = (llvm::MachineBasicBlock **)((char *)v79 + 8 * v80);
    do
    {
      unint64_t v38 = *v36;
      FirstTerminator = (void *)llvm::MachineBasicBlock::getFirstTerminator(*v36);
      unint64_t v40 = llvm::MachineBasicBlock::getFirstTerminator(v38);
      uint64_t v41 = *(void *)(v3 + 8);
      unint64_t v42 = (llvm::MachineFunction *)*((void *)v38 + 4);
      uint64_t v43 = *(unsigned __int8 **)(v40 + 56);
      uint64_t v74 = v43;
      if (v43) {
        llvm::MetadataTracking::track((uint64_t)&v74, v43, 2);
      }
      int v44 = llvm::MachineFunction::CreateMachineInstr(v42, v41 + 912, &v74, 0);
      if (!v74) {
        goto LABEL_59;
      }
      int v57 = *v74;
      if ((v57 - 4) > 0x1E)
      {
        if ((v57 - 3) >= 0xFFFFFFFE) {
          BOOL v60 = v74;
        }
        else {
          BOOL v60 = 0;
        }
        if ((v57 - 3) < 0xFFFFFFFE)
        {
          if (v57 == 3) {
            *((void *)v74 + 1) = 0;
          }
          goto LABEL_59;
        }
        unint64_t v59 = (unint64_t)(v60 + 8);
      }
      else
      {
        if ((v74[1] & 0x7F) != 2 && !*((_DWORD *)v74 + 3)) {
          goto LABEL_59;
        }
        uint64_t v58 = *((void *)v74 + 2);
        if ((v58 & 4) == 0) {
          goto LABEL_59;
        }
        unint64_t v59 = v58 & 0xFFFFFFFFFFFFFFF8;
        if (!v59) {
          goto LABEL_59;
        }
      }
      uint64_t v75 = (uint64_t)&v74;
      sub_1CC5FA668(v59 + 16, &v75);
LABEL_59:
      uint64_t v45 = *((void *)v38 + 5);
      *((void *)v44 + 3) = v45;
      uint64_t v46 = *(void *)(v45 + 32);
      uint64_t v47 = *((unsigned int *)v44 + 10);
      if (v47)
      {
        uint64_t v50 = *((void *)v44 + 4);
        uint64_t v51 = *(void *)(v46 + 40);
        uint64_t v52 = 32 * v47;
        do
        {
          if (!*(unsigned char *)v50)
          {
            uint64_t v53 = *(unsigned int *)(v50 + 4);
            if ((int)v53 >= 0) {
              unsigned int v54 = (uint64_t *)(*(void *)(v51 + 272) + 8 * v53);
            }
            else {
              unsigned int v54 = (uint64_t *)(*(void *)(v51 + 24) + 16 * (v53 & 0x7FFFFFFF) + 8);
            }
            uint64_t v55 = *v54;
            if (*v54)
            {
              uint64_t v56 = *(void *)(v55 + 16);
              *(void *)(v55 + 16) = v50;
              *(void *)(v50 + 16) = v56;
              if (*(unsigned char *)(v50 + 3))
              {
                *(void *)(v50 + 24) = v55;
              }
              else
              {
                *(void *)(v50 + 24) = 0;
                unsigned int v54 = (uint64_t *)(v56 + 24);
              }
            }
            else
            {
              *(void *)(v50 + 16) = v50;
              *(void *)(v50 + 24) = 0;
            }
            uint64_t *v54 = v50;
          }
          v50 += 32;
          v52 -= 32;
        }
        while (v52);
      }
      uint64_t v48 = *(void *)(v46 + 728);
      if (v48) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v48 + 24))(v48, v44);
      }
      unint64_t v49 = *FirstTerminator & 0xFFFFFFFFFFFFFFF8;
      *(void *)int v44 = v49 | *(void *)v44 & 7;
      *((void *)v44 + 1) = FirstTerminator;
      *(void *)(v49 + 8) = v44;
      void *FirstTerminator = *FirstTerminator & 7 | (unint64_t)v44;
      uint64_t v76 = 0;
      uint64_t v77 = 0;
      uint64_t v78 = 0;
      uint64_t v75 = 0x3901000000;
      llvm::MachineInstr::addOperand(v44, v42, (const llvm::MachineOperand *)&v75);
      uint64_t v76 = 0;
      LODWORD(v75) = 0;
      HIDWORD(v75) = v15;
      uint64_t v77 = 0;
      uint64_t v78 = 0;
      llvm::MachineInstr::addOperand(v44, v42, (const llvm::MachineOperand *)&v75);
      ++v36;
    }
    while (v36 != v37);
  }
LABEL_91:
  if (v79 != v81) {
    free(v79);
  }
  return v73;
}

uint64_t sub_1CBA9F5DC(int a1)
{
  return dword_1CDB15930[a1 - 9];
}

uint64_t sub_1CBA9F5F0(uint64_t result, unsigned char *a2)
{
  *a2 = 0;
  int v4 = result - 17;
  if (!(!v3 & v2))
  {
    int v5 = 14;
    __n128 result = 1;
    switch(v4)
    {
      case 0:
        return result;
      case 1:
        return 2;
      case 2:
        return 3;
      case 3:
        return 4;
      case 4:
        return 5;
      case 5:
        goto LABEL_7;
      default:
        JUMPOUT(0);
    }
  }
  int v5 = result;
  if ((result - 9) <= 5)
  {
LABEL_7:
    __n128 result = v5 ^ 0xFu;
    *a2 = 1;
  }
  return result;
}

unint64_t sub_1CBA9F684(uint64_t a1, unsigned int a2, int a3, __int16 a4, uint64_t a5)
{
  unint64_t v7 = 0x100000000;
  uint64_t v8 = 0x200000000;
  uint64_t v9 = 0x400000000;
  unsigned int v10 = 15;
  switch(a3)
  {
    case 1:
    case 3:
    case 6:
    case 7:
      goto LABEL_3;
    case 2:
      goto LABEL_34;
    case 8:
      goto LABEL_11;
    case 9:
    case 11:
      __break(1u);
      *(void *)(a5 + 208) += 80;
      uint64_t v22 = *(void *)(a5 + 128);
      if (((v22 + 7) & 0xFFFFFFFFFFFFFFF8) - v22 + 80 > *(void *)(a5 + 136) - v22)
      {
        unsigned int v26 = *(_DWORD *)(a5 + 152) >> 7;
        if (v26 >= 0x1E) {
          LOBYTE(v26) = 30;
        }
        uint64_t v27 = 4096 << v26;
        unint64_t v23 = (unint64_t)operator new(4096 << v26, (std::align_val_t)8uLL);
        unsigned int v28 = *(_DWORD *)(a5 + 152);
        if (v28 >= *(_DWORD *)(a5 + 156)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a5 + 144) + 8 * v28) = v23;
        ++*(_DWORD *)(a5 + 152);
        *(void *)(a5 + 136) = v23 + v27;
      }
      else
      {
        unint64_t v23 = (v22 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(a5 + 128) = v23 + 80;
      *(void *)unint64_t v23 = v6 | 4;
      *(void *)(v23 + 8) = 0;
      *(_DWORD *)(v23 + 16) = 0;
      if (v5) {
        unint64_t v24 = ((((unint64_t)(8 * v5) >> 3) & 0x1FFFFFFF) << 6) | 1;
      }
      else {
        unint64_t v24 = 0;
      }
      *(unsigned char *)(v23 + 20) = 0;
      *(void *)(v23 + 24) = v24;
      *(_WORD *)(v23 + 32) = a4;
      *(unsigned char *)(v23 + 34) = 2;
      *(_OWORD *)(v23 + 40) = 0u;
      *(_OWORD *)(v23 + 56) = 0u;
      *(void *)(v23 + 72) = 0;
      *(_WORD *)(v23 + 36) = 1;
      return v23;
    case 14:
      if (*(unsigned char *)(*(void *)(a5 + 16) + 327)) {
        uint64_t v9 = 0x100000000;
      }
      else {
        uint64_t v9 = 0x200000000;
      }
LABEL_34:
      unsigned int v13 = a3 & 0xFFFFFFFE;
      uint64_t v8 = v9;
      goto LABEL_4;
    default:
      uint64_t v8 = 0x100000000;
LABEL_3:
      unsigned int v13 = a3 & 0xFFFFFFFE;
      if ((a3 & 0xFFFFFFFE) == 0xC)
      {
        unsigned int v10 = 15;
      }
      else
      {
LABEL_4:
        BOOL v14 = v13 != 14 || *(unsigned char *)(*(void *)(a5 + 16) + 327) == 0;
        unsigned int v10 = 15;
        if (v14) {
          unsigned int v10 = a2;
        }
      }
      unint64_t v7 = v8;
LABEL_11:
      unint64_t v15 = HIDWORD(v7);
      unsigned int v16 = __clz(__rbit32(v10)) & 0x1F;
      unsigned int v17 = a1 + v16 * v15;
      int v18 = (32 - __clz(v10) - v16) * v15;
      if ((a1 & 0xFF00000000) != 0) {
        unsigned int v19 = v17;
      }
      else {
        unsigned int v19 = 0;
      }
      if ((a1 & 0xFF00000000) != 0) {
        int v20 = v18;
      }
      else {
        int v20 = 128;
      }
      uint64_t v21 = *(void *)(a5 + 48);
      if (!v21)
      {
        uint64_t v21 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a5 + 8) + 216))(*(void *)(a5 + 8), a5 + 128, a5);
        *(void *)(a5 + 48) = v21;
      }
      sub_1CB9E59E0(v21, v19, v20, a5);
  }
}

uint64_t sub_1CBA9F924(uint64_t a1, void *a2, _DWORD *a3)
{
  *a3 = 0;
  if (!*(unsigned char *)(a1 + 327)) {
    return 0;
  }
  int v5 = *(llvm::Module **)(*a2 + 40);
  uint64_t v25 = "agx.reduce.reg.pressure";
  __int16 v27 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v5, &v25);
  if (NamedMetadata)
  {
    uint64_t v7 = *(void *)(*(void *)(***(void ***)(NamedMetadata + 48)
                               - 8 * *(unsigned int *)(***(void ***)(NamedMetadata + 48) + 8))
                   + 128);
    uint64_t v8 = (void *)(v7 + 24);
    if (*(_DWORD *)(v7 + 32) >= 0x41u) {
      uint64_t v8 = (void *)*v8;
    }
    if (*v8) {
      return 0;
    }
  }
  if ((*(_WORD *)(*a2 + 18) & 0x3FF0) != 0x6A0) {
    return 0;
  }
  uint64_t v9 = *(llvm::Module **)(*a2 + 40);
  unsigned int v10 = (uint64_t (***)(void, uint64_t, void, uint64_t, uint64_t))a2[43];
  uint64_t v11 = sub_1CD113BD0(v9, (uint64_t)v10);
  if ((v11 & 0xFF00000000) == 0) {
    return 0;
  }
  *a3 = v11;
  uint64_t v12 = 1;
  int v13 = (**v10)(v10, 14, 0, 1, 3);
  if (v13)
  {
    uint64_t v25 = "agx.max_work_group_size";
    __int16 v27 = 259;
    uint64_t v14 = llvm::Module::getNamedMetadata(v9, &v25);
    if (!v14) {
      goto LABEL_10;
    }
    uint64_t v23 = *(void *)(*(void *)(***(void ***)(v14 + 48) - 8 * *(unsigned int *)(***(void ***)(v14 + 48) + 8))
                    + 128);
    unint64_t v24 = (unsigned int *)(v23 + 24);
    if (*(_DWORD *)(v23 + 32) >= 0x41u) {
      unint64_t v24 = *(unsigned int **)v24;
    }
    uint64_t v21 = *v24;
    if (!v21)
    {
LABEL_10:
      sub_1CD1157F4(v9, 0, (uint64_t)&v25);
      int v15 = (int)v25;
      if (v25 >= 0x80) {
        int v15 = 128;
      }
      if (v26) {
        unsigned int v16 = v15;
      }
      else {
        unsigned int v16 = 128;
      }
      uint64_t v17 = 896;
      uint64_t v18 = 768;
      uint64_t v19 = 640;
      uint64_t v20 = 384;
      if (v16 < 0x69) {
        uint64_t v20 = 512;
      }
      if (v16 >= 0x51) {
        uint64_t v19 = v20;
      }
      if (v16 >= 0x45) {
        uint64_t v18 = v19;
      }
      if (v16 >= 0x39) {
        uint64_t v17 = v18;
      }
      if (v16 >= 0x35) {
        uint64_t v21 = v17;
      }
      else {
        uint64_t v21 = 1024;
      }
    }
    *a3 += ((unint64_t)(v21 + 31) >> 5) * v13;
    return 1;
  }
  return v12;
}

double sub_1CBA9FB30@<D0>(uint64_t a1@<X0>, void *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  *(_DWORD *)(a4 + 12) = 0;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  *(unsigned char *)(a4 + 8) = 0;
  if (sub_1CBA9F924(a1, a2, a3))
  {
    sub_1CD10A77C(*(llvm::Module **)(*a2 + 40), (uint64_t)&v7);
    double result = *(double *)&v7;
    *(_OWORD *)a4 = v7;
    *(unsigned char *)(a4 + 16) = v8;
  }
  return result;
}

uint64_t sub_1CBA9FB98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v5 = (uint64_t)a4;
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  uint64_t v82 = *(void *)(a1 + 56);
  v84 = 0;
  uint64_t v85 = 0;
  unsigned int v86 = 0;
  BOOL v88 = v90;
  uint64_t v89 = 0x1000000000;
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  uint64_t v91 = &v92;
  uint64_t v6 = *(void *)(a1 + 328);
  uint64_t v81 = a1 + 320;
  if (v6 == a1 + 320)
  {
    unsigned int v49 = 0;
    int32x2_t v48 = 0;
    uint64_t v47 = (int *)(v5 + 16);
    *(void *)uint64_t v5 = v5 + 16;
    *(void *)(v5 + 8) = 0x2000000000;
    goto LABEL_81;
  }
  do
  {
    uint64_t v7 = *(void *)(v6 + 56);
    if (v7 == v6 + 48) {
      goto LABEL_73;
    }
    do
    {
      uint64_t v8 = *(unsigned int *)(v7 + 40);
      if (!v8) {
        goto LABEL_62;
      }
      uint64_t v9 = *(void *)(v7 + 32);
      uint64_t v10 = v9 + 32 * v8;
      do
      {
        if (*(unsigned char *)v9 != 5) {
          goto LABEL_26;
        }
        LODWORD(v87) = *(_DWORD *)(v9 + 16);
        uint64_t v11 = sub_1CBAA0414((uint64_t *)&v84, &v87);
        uint64_t v12 = v11;
        if (v93)
        {
          for (uint64_t i = v92; i; uint64_t i = (void *)*i)
          {
            int v14 = *((_DWORD *)i + 7);
            if ((int)v87 >= v14)
            {
              if (v14 >= (int)v87) {
                goto LABEL_26;
              }
              ++i;
            }
          }
        }
        else if (v89)
        {
          int v15 = v88;
          uint64_t v16 = 4 * v89;
          while (*v15 != v87)
          {
            ++v15;
            v16 -= 4;
            if (!v16) {
              goto LABEL_19;
            }
          }
          if (v16) {
            goto LABEL_26;
          }
        }
LABEL_19:
        unsigned int v17 = **(unsigned __int16 **)(v7 + 16) - 322;
        BOOL v18 = v17 > 0x21;
        uint64_t v19 = (1 << v17) & 0x2E8601743;
        BOOL v20 = v18 || v19 == 0;
        if (!v20 && !*(void *)(*(void *)(v7 + 32) + 144))
        {
          uint64_t v29 = *(void *)(a2 + 248);
          if (v29)
          {
            int v30 = *(_DWORD *)(v29 + 176);
            if (v30)
            {
              uint64_t v31 = *(void *)(v29 + 160);
              unsigned int v32 = v30 - 1;
              uint64_t v33 = (v30 - 1) & ((v6 >> 4) ^ (v6 >> 9));
              uint64_t v34 = *(void *)(v31 + 16 * v33);
              if (v34 == v6)
              {
LABEL_42:
                uint64_t v35 = *(unsigned int *)(v31 + 16 * v33 + 8);
                if (v35 != 0xFFFFFFFFLL)
                {
                  unint64_t v36 = *(void *)(*(void *)(v29 + 8) + 24 * v35 + 16);
LABEL_44:
                  if (&v84[4 * v86] == (unsigned int *)v11)
                  {
                    uint64_t v11 = sub_1CBAA05D4((uint64_t)&v84, &v87);
                    *((void *)v11 + 1) = v36;
                    if (!a3) {
                      goto LABEL_62;
                    }
                  }
                  else
                  {
                    *((void *)v11 + 1) += v36;
                    if (!a3) {
                      goto LABEL_62;
                    }
                  }
                  uint64_t v37 = llvm::dbgs((llvm *)v11);
                  unint64_t v38 = v37;
                  uint64_t v39 = *((void *)v37 + 4);
                  if ((unint64_t)(*((void *)v37 + 3) - v39) > 2)
                  {
                    *(unsigned char *)(v39 + 2) = 35;
                    *(_WORD *)uint64_t v39 = 18758;
                    *((void *)v37 + 4) += 3;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v37, "FI#", 3uLL);
                  }
                  unint64_t v40 = (int)v87;
                  if ((v87 & 0x80000000) != 0)
                  {
                    unint64_t v40 = -(uint64_t)(int)v87;
                    uint64_t v41 = v38;
                    int v42 = 1;
                  }
                  else
                  {
                    uint64_t v41 = v38;
                    int v42 = 0;
                  }
                  sub_1CD098D14(v41, v40, 0, 0, v42);
                  uint64_t v43 = (_OWORD *)*((void *)v38 + 4);
                  if (*((void *)v38 + 3) - (void)v43 > 0xFuLL)
                  {
                    *uint64_t v43 = *(_OWORD *)", ExecutionRate=";
                    *((void *)v38 + 4) += 16;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v38, ", ExecutionRate=", 0x10uLL);
                  }
                  sub_1CD098D14(v38, v36, 0, 0, 0);
                  int v44 = (_WORD *)*((void *)v38 + 4);
                  if (*((void *)v38 + 3) - (void)v44 > 1uLL)
                  {
                    _WORD *v44 = 8250;
                    *((void *)v38 + 4) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v38, ": ", 2uLL);
                  }
                  llvm::MachineInstr::print((llvm::MachineInstr *)v7, v38, (const llvm::TargetRegisterInfo *)1, 0, 0, 1, 0);
                  goto LABEL_62;
                }
              }
              else
              {
                int v45 = 1;
                while (v34 != -4096)
                {
                  int v46 = v33 + v45++;
                  uint64_t v33 = v46 & v32;
                  uint64_t v34 = *(void *)(v31 + 16 * v33);
                  if (v34 == v6) {
                    goto LABEL_42;
                  }
                }
              }
            }
          }
          unint64_t v36 = 0;
          goto LABEL_44;
        }
        uint64_t v21 = (llvm *)sub_1CD41AE70((uint64_t)&v88, (int *)&v87);
        if (&v84[4 * v86] == (unsigned int *)v12)
        {
          if (!a3) {
            goto LABEL_26;
          }
        }
        else
        {
          uint64_t v21 = (llvm *)sub_1CD41AF98((int32x2_t *)&v84, (int)v87);
          if (!a3) {
            goto LABEL_26;
          }
        }
        uint64_t v22 = llvm::dbgs(v21);
        uint64_t v23 = v22;
        uint64_t v24 = *((void *)v22 + 4);
        if ((unint64_t)(*((void *)v22 + 3) - v24) > 2)
        {
          *(unsigned char *)(v24 + 2) = 35;
          *(_WORD *)uint64_t v24 = 18758;
          *((void *)v22 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v22, "FI#", 3uLL);
        }
        unint64_t v25 = (int)v87;
        if ((v87 & 0x80000000) != 0)
        {
          unint64_t v25 = -(uint64_t)(int)v87;
          char v26 = v23;
          int v27 = 1;
        }
        else
        {
          char v26 = v23;
          int v27 = 0;
        }
        sub_1CD098D14(v26, v25, 0, 0, v27);
        uint64_t v28 = *((void *)v23 + 4);
        if ((unint64_t)(*((void *)v23 + 3) - v28) > 0x12)
        {
          *(_DWORD *)(v28 + 15) = 540697971;
          *(_OWORD *)uint64_t v28 = *(_OWORD *)" disqualified use: ";
          *((void *)v23 + 4) += 19;
        }
        else
        {
          llvm::raw_ostream::write(v23, " disqualified use: ", 0x13uLL);
        }
        llvm::MachineInstr::print((llvm::MachineInstr *)v7, v23, (const llvm::TargetRegisterInfo *)1, 0, 0, 1, 0);
LABEL_26:
        v9 += 32;
      }
      while (v9 != v10);
      if (!v7) {
        goto LABEL_65;
      }
LABEL_62:
      if ((*(unsigned char *)v7 & 4) == 0)
      {
LABEL_65:
        while ((*(_WORD *)(v7 + 44) & 8) != 0)
          uint64_t v7 = *(void *)(v7 + 8);
      }
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while (v7 != v6 + 48);
LABEL_73:
    uint64_t v6 = *(void *)(v6 + 8);
  }
  while (v6 != v81);
  uint64_t v5 = (uint64_t)a4;
  uint64_t v47 = (int *)(a4 + 2);
  *a4 = a4 + 2;
  a4[1] = 0x2000000000;
  int32x2_t v48 = (int32x2_t)v84;
  unsigned int v49 = v86;
  if (!v85)
  {
LABEL_81:
    uint64_t v52 = (unsigned int *)(*(void *)&v48 + 16 * v49);
    uint64_t v50 = (uint64_t)v52;
    goto LABEL_82;
  }
  uint64_t v50 = (uint64_t)&v84[4 * v86];
  if (v86)
  {
    uint64_t v51 = 0;
    while (v84[v51] - 0x7FFFFFFF <= 1)
    {
      v51 += 4;
      if (4 * v86 == v51)
      {
        uint64_t v52 = &v84[4 * v86];
        goto LABEL_82;
      }
    }
    uint64_t v52 = &v84[v51];
  }
  else
  {
    uint64_t v52 = v84;
  }
LABEL_82:
  uint64_t v53 = (unsigned int *)(*(void *)&v48 + 16 * v49);
  if (v52 == v53)
  {
    int v87 = (int32x2_t *)&v84;
    BOOL v60 = v47;
LABEL_96:
    uint64_t v62 = 0;
    goto LABEL_97;
  }
  do
  {
    unsigned int v54 = *v52;
    uint64_t v55 = (*(_DWORD *)(*(void *)(v82 + 8) + 40 * (*(_DWORD *)(v82 + 32) + *v52) + 8) + 3) & 0xFFFFFFFC;
    uint64_t v56 = *(unsigned int *)(v5 + 8);
    if (v56 >= *(_DWORD *)(v5 + 12))
    {
      sub_1CD41B1D4(v5, v54, v55);
    }
    else
    {
      int v57 = (unsigned int *)(*(void *)v5 + 8 * v56);
      unsigned int *v57 = v54;
      v57[1] = v55;
      *(_DWORD *)(v5 + 8) = v56 + 1;
    }
    uint64_t v58 = (int *)(v52 + 4);
    while (v58 != (int *)v50)
    {
      int v59 = *v58;
      v58 += 4;
      if ((v59 - 0x7FFFFFFF) >= 2)
      {
        uint64_t v52 = (unsigned int *)(v58 - 4);
        goto LABEL_90;
      }
    }
    uint64_t v52 = (unsigned int *)v50;
LABEL_90:
    ;
  }
  while (v52 != v53);
  BOOL v60 = *(int **)v5;
  unint64_t v61 = *(unsigned int *)(v5 + 8);
  uint64_t v47 = (int *)(*(void *)v5 + 8 * v61);
  int v87 = (int32x2_t *)&v84;
  if (!v61) {
    goto LABEL_96;
  }
  uint64_t v62 = 126 - 2 * __clz(v61);
LABEL_97:
  uint64_t v63 = sub_1CBAA08FC(v60, v47, (uint64_t **)&v87, v62, 1);
  if (a3)
  {
    uint64_t v65 = llvm::dbgs((llvm *)v63);
    uint64_t v66 = (void *)*((void *)v65 + 4);
    if (*((void *)v65 + 3) - (void)v66 > 0x14uLL)
    {
      qmemcpy(v66, "LM Spill candidates:\n", 21);
      *((void *)v65 + 4) += 21;
    }
    else
    {
      uint64_t v65 = llvm::raw_ostream::write(v65, "LM Spill candidates:\n", 0x15uLL);
    }
    uint64_t v67 = *(unsigned int *)(v5 + 8);
    if (v67)
    {
      uint64_t v68 = *(int **)v5;
      int v69 = &v68[2 * v67];
      do
      {
        unint64_t v70 = v68[1];
        unint64_t v71 = *v68;
        uint64_t v72 = llvm::dbgs(v65);
        unsigned int v73 = v72;
        uint64_t v74 = *((void *)v72 + 4);
        if ((unint64_t)(*((void *)v72 + 3) - v74) > 0xA)
        {
          *(_DWORD *)(v74 + 7) = 592004640;
          *(void *)uint64_t v74 = *(void *)"  Spill FI#";
          *((void *)v72 + 4) += 11;
          if ((v71 & 0x80000000) != 0)
          {
LABEL_117:
            unint64_t v76 = -(uint64_t)v71;
            uint64_t v75 = v73;
            int v77 = 1;
            goto LABEL_110;
          }
        }
        else
        {
          llvm::raw_ostream::write(v72, "  Spill FI#", 0xBuLL);
          if ((v71 & 0x80000000) != 0) {
            goto LABEL_117;
          }
        }
        uint64_t v75 = v73;
        unint64_t v76 = v71;
        int v77 = 0;
LABEL_110:
        sub_1CD098D14(v75, v76, 0, 0, v77);
        uint64_t v78 = (void *)*((void *)v73 + 4);
        if (*((void *)v73 + 3) - (void)v78 > 0xCuLL)
        {
          qmemcpy(v78, " (UsageRate: ", 13);
          *((void *)v73 + 4) += 13;
        }
        else
        {
          llvm::raw_ostream::write(v73, " (UsageRate: ", 0xDuLL);
        }
        uint64_t v65 = sub_1CD098D14(v73, v70, 0, 0, 0);
        uint64_t v79 = (_WORD *)*((void *)v73 + 4);
        if (*((void *)v73 + 3) - (void)v79 > 1uLL)
        {
          *uint64_t v79 = 2601;
          *((void *)v73 + 4) += 2;
        }
        else
        {
          uint64_t v65 = llvm::raw_ostream::write(v73, ")\n", 2uLL);
        }
        v68 += 2;
      }
      while (v68 != v69);
    }
  }
  sub_1CD3C5048((uint64_t)&v91, v92);
  if (v88 != v90) {
    free(v88);
  }
  return MEMORY[0x1D25D9CD0](v84, 8);
}

int *sub_1CBAA0414(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 4);
  if (v3)
  {
    LODWORD(v4) = (37 * *a2) & (v3 - 1);
    double result = (int *)(v2 + 16 * v4);
    int v6 = *result;
    if (*a2 == *result) {
      return result;
    }
    int v7 = 1;
    while (v6 != 0x7FFFFFFF)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      int v6 = *(_DWORD *)(v2 + 16 * v4);
      if (*a2 == v6) {
        return (int *)(v2 + 16 * v4);
      }
    }
  }
  return (int *)(v2 + 16 * v3);
}

uint64_t sub_1CBAA048C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2)
  {
    uint64_t v2 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 216))(*(void *)(a1 + 8), a1 + 128, a1);
    *(void *)(a1 + 48) = v2;
  }
  uint64_t result = *(unsigned int *)(v2 + 460);
  if (result == -1)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 176))(*(void *)(a1 + 16));
    uint64_t v5 = *(void *)(v4 + 264)
       + 24 * (*(_DWORD *)(v4 + 272) * ((*(void *)(v4 + 248) - *(void *)(v4 + 240)) >> 3) + 17);
    uint64_t result = llvm::MachineFrameInfo::CreateStackObject(*(unsigned __int8 **)(a1 + 56), (unint64_t)*(unsigned int *)(v5 + 4) >> 3, 63 - __clz((unint64_t)*(unsigned int *)(v5 + 8) >> 3), 0, 0, 0);
    uint64_t v6 = *(void *)(a1 + 48);
    if (!v6)
    {
      unsigned int v7 = result;
      uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 216))(*(void *)(a1 + 8), a1 + 128, a1);
      uint64_t result = v7;
      *(void *)(a1 + 48) = v6;
    }
    *(_DWORD *)(v6 + 460) = result;
  }
  return result;
}

_DWORD *sub_1CBAA05D4(uint64_t a1, _DWORD *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    uint64_t v10 = 0;
LABEL_8:
    uint64_t v6 = sub_1CBAA0698(a1, (uint64_t)a2, a2, v10);
    _DWORD *v6 = *a2;
    *((void *)v6 + 1) = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = (37 * *a2) & (v3 - 1);
  uint64_t v6 = (_DWORD *)(*(void *)a1 + 16 * v5);
  int v7 = *v6;
  if (*a2 != *v6)
  {
    int v8 = 0;
    int v9 = 1;
    while (v7 != 0x7FFFFFFF)
    {
      if (v8) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v7 == 0x80000000;
      }
      if (v12) {
        int v8 = v6;
      }
      unsigned int v13 = v5 + v9++;
      unsigned int v5 = v13 & v4;
      uint64_t v6 = (_DWORD *)(*(void *)a1 + 16 * (v13 & v4));
      int v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v8) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = v6;
    }
    goto LABEL_8;
  }
  return v6;
}

_DWORD *sub_1CBAA0698(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3) {
      goto LABEL_3;
    }
    sub_1CBAA0830(a1, v7);
    int v15 = *(_DWORD *)(a1 + 16);
    if (v15)
    {
      int v16 = v15 - 1;
      unsigned int v17 = (37 * *a3) & v16;
      a4 = (_DWORD *)(*(void *)a1 + 16 * v17);
      int v18 = *a4;
      if (*a3 == *a4) {
        goto LABEL_3;
      }
      unsigned int v13 = 0;
      int v19 = 1;
      while (v18 != 0x7FFFFFFF)
      {
        if (v13) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v18 == 0x80000000;
        }
        if (v20) {
          unsigned int v13 = a4;
        }
        unsigned int v21 = v17 + v19++;
        unsigned int v17 = v21 & v16;
        a4 = (_DWORD *)(*(void *)a1 + 16 * v17);
        int v18 = *a4;
        if (*a3 == *a4) {
          goto LABEL_3;
        }
      }
      goto LABEL_10;
    }
LABEL_24:
    a4 = 0;
    goto LABEL_3;
  }
  sub_1CBAA0830(a1, 2 * v7);
  int v9 = *(_DWORD *)(a1 + 16);
  if (!v9) {
    goto LABEL_24;
  }
  int v10 = v9 - 1;
  unsigned int v11 = (37 * *a3) & v10;
  a4 = (_DWORD *)(*(void *)a1 + 16 * v11);
  int v12 = *a4;
  if (*a3 == *a4) {
    goto LABEL_3;
  }
  unsigned int v13 = 0;
  int v14 = 1;
  while (v12 != 0x7FFFFFFF)
  {
    if (v13) {
      BOOL v22 = 0;
    }
    else {
      BOOL v22 = v12 == 0x80000000;
    }
    if (v22) {
      unsigned int v13 = a4;
    }
    unsigned int v23 = v11 + v14++;
    unsigned int v11 = v23 & v10;
    a4 = (_DWORD *)(*(void *)a1 + 16 * v11);
    int v12 = *a4;
    if (*a3 == *a4) {
      goto LABEL_3;
    }
  }
LABEL_10:
  if (v13) {
    a4 = v13;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != 0x7FFFFFFF) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_DWORD *sub_1CBAA0830(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(int **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD41B0F8(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = 0x7FFFFFFF;
      result += 4;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

int *sub_1CBAA08FC(int *result, int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
  while (2)
  {
    int v178 = a2 - 2;
    v181 = a2;
    uint64_t v173 = a2 - 6;
    v174 = a2 - 4;
    uint64_t j = v10;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v10 = j;
          uint64_t v12 = (char *)a2 - (char *)j;
          uint64_t v13 = ((char *)a2 - (char *)j) >> 3;
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                int v185 = *(a2 - 2);
                int v184 = *v10;
                v90 = sub_1CBAA0414(*a3, &v185);
                uint64_t result = sub_1CBAA0414(*a3, &v184);
                unint64_t v91 = *((void *)v90 + 1);
                unint64_t v92 = *((void *)result + 1);
                if (v91 > v92 || v91 == v92 && v185 < v184)
                {
                  int v93 = *v10;
                  *uint64_t v10 = *(a2 - 2);
                  *(a2 - 2) = v93;
                  int v94 = v10[1];
                  v10[1] = *(a2 - 1);
                  *(a2 - 1) = v94;
                }
                break;
              case 3:
                uint64_t result = sub_1CBAA18D8(v10, v10 + 2, v178, a3);
                break;
              case 4:
                uint64_t result = sub_1CBAA1DD4(v10, v10 + 2, v10 + 4, v178, a3);
                break;
              case 5:
                uint64_t result = sub_1CBAA16CC(v10, v10 + 2, v10 + 4, v10 + 6, v178, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 191)
          {
            uint64_t v95 = v10 + 2;
            BOOL v97 = v10 == a2 || v95 == a2;
            if (a5)
            {
              if (!v97)
              {
                uint64_t v98 = 0;
                int v99 = v10;
                do
                {
                  uint64_t v100 = v99;
                  int v99 = v95;
                  int v185 = v100[2];
                  int v184 = *v100;
                  int v101 = sub_1CBAA0414(*a3, &v185);
                  uint64_t result = sub_1CBAA0414(*a3, &v184);
                  unint64_t v102 = *((void *)v101 + 1);
                  unint64_t v103 = *((void *)result + 1);
                  if (v102 > v103 || v102 == v103 && v185 < v184)
                  {
                    int v104 = v100[2];
                    int v105 = v100[3];
                    int v106 = v100[1];
                    v100[2] = *v100;
                    v99[1] = v106;
                    unint64_t v107 = v10;
                    if (v100 != v10)
                    {
                      uint64_t v108 = v98;
                      while (1)
                      {
                        int v185 = v104;
                        int v184 = *(int *)((char *)v10 + v108 - 8);
                        unsigned int v109 = sub_1CBAA0414(*a3, &v185);
                        uint64_t result = sub_1CBAA0414(*a3, &v184);
                        unint64_t v110 = *((void *)v109 + 1);
                        unint64_t v111 = *((void *)result + 1);
                        if (v110 <= v111 && (v110 != v111 || v185 >= v184)) {
                          break;
                        }
                        *(void *)((char *)v10 + v108) = *(void *)((char *)v10 + v108 - 8);
                        v108 -= 8;
                        if (!v108)
                        {
                          unint64_t v107 = v10;
                          goto LABEL_111;
                        }
                      }
                      unint64_t v107 = (int *)((char *)v10 + v108);
                    }
LABEL_111:
                    *unint64_t v107 = v104;
                    v107[1] = v105;
                    a2 = v181;
                  }
                  uint64_t v95 = v99 + 2;
                  v98 += 8;
                }
                while (v99 + 2 != a2);
              }
            }
            else if (!v97)
            {
              long long v161 = v10 + 1;
              do
              {
                int v185 = v10[2];
                int v162 = *v10;
                uint64_t v10 = v95;
                int v184 = v162;
                v163 = sub_1CBAA0414(*a3, &v185);
                uint64_t result = sub_1CBAA0414(*a3, &v184);
                unint64_t v164 = *((void *)v163 + 1);
                unint64_t v165 = *((void *)result + 1);
                if (v164 > v165 || v164 == v165 && v185 < v184)
                {
                  int v166 = *v10;
                  int v167 = v10[1];
                  for (uint64_t i = v161; ; i -= 2)
                  {
                    int v169 = *i;
                    i[1] = *(i - 1);
                    i[2] = v169;
                    int v185 = v166;
                    int v184 = *(i - 3);
                    int v170 = sub_1CBAA0414(*a3, &v185);
                    uint64_t result = sub_1CBAA0414(*a3, &v184);
                    unint64_t v171 = *((void *)v170 + 1);
                    unint64_t v172 = *((void *)result + 1);
                    if (v171 <= v172 && (v171 != v172 || v185 >= v184)) {
                      break;
                    }
                  }
                  *(i - 1) = v166;
                  *uint64_t i = v167;
                  a2 = v181;
                }
                uint64_t v95 = v10 + 2;
                v161 += 2;
              }
              while (v10 + 2 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v10 != a2)
            {
              int64_t v112 = (unint64_t)(v13 - 2) >> 1;
              int64_t v179 = v112;
              do
              {
                int64_t v113 = v112;
                if (v179 >= v112)
                {
                  uint64_t v114 = (2 * v112) | 1;
                  uint64_t v115 = &v10[2 * v114];
                  if (2 * v112 + 2 < v13)
                  {
                    int v185 = *v115;
                    int v184 = v115[2];
                    char v116 = sub_1CBAA0414(*a3, &v185);
                    unsigned int v117 = sub_1CBAA0414(*a3, &v184);
                    unint64_t v118 = *((void *)v116 + 1);
                    unint64_t v119 = *((void *)v117 + 1);
                    if (v118 > v119 || v118 == v119 && v185 < v184)
                    {
                      v115 += 2;
                      uint64_t v114 = 2 * v113 + 2;
                    }
                  }
                  unsigned int v120 = &v10[2 * v113];
                  int v185 = *v115;
                  int v184 = *v120;
                  v121 = sub_1CBAA0414(*a3, &v185);
                  uint64_t result = sub_1CBAA0414(*a3, &v184);
                  unint64_t v122 = *((void *)v121 + 1);
                  unint64_t v123 = *((void *)result + 1);
                  if (v122 <= v123 && (v122 != v123 || v185 >= v184))
                  {
                    v124 = &v10[2 * v113];
                    int v177 = *v124;
                    int v175 = v124[1];
                    *unsigned int v120 = *v115;
                    v124[1] = v115[1];
                    if (v179 >= v114)
                    {
                      while (1)
                      {
                        uint64_t v126 = 2 * v114;
                        uint64_t v114 = (2 * v114) | 1;
                        uint64_t v125 = &v10[2 * v114];
                        uint64_t v127 = v126 + 2;
                        if (v126 + 2 < v13)
                        {
                          int v185 = *v125;
                          int v184 = v125[2];
                          unsigned int v128 = sub_1CBAA0414(*a3, &v185);
                          v129 = sub_1CBAA0414(*a3, &v184);
                          unint64_t v130 = *((void *)v128 + 1);
                          unint64_t v131 = *((void *)v129 + 1);
                          if (v130 > v131 || v130 == v131 && v185 < v184)
                          {
                            v125 += 2;
                            uint64_t v114 = v127;
                          }
                        }
                        int v132 = *v125;
                        int v184 = v177;
                        int v185 = v132;
                        BOOL v133 = sub_1CBAA0414(*a3, &v185);
                        uint64_t result = sub_1CBAA0414(*a3, &v184);
                        unint64_t v134 = *((void *)v133 + 1);
                        unint64_t v135 = *((void *)result + 1);
                        if (v134 > v135 || v134 == v135 && v185 < v184) {
                          break;
                        }
                        *uint64_t v115 = *v125;
                        v115[1] = v125[1];
                        uint64_t v115 = v125;
                        if (v179 < v114) {
                          goto LABEL_127;
                        }
                      }
                    }
                    uint64_t v125 = v115;
LABEL_127:
                    *uint64_t v125 = v177;
                    v125[1] = v175;
                  }
                }
                int64_t v112 = v113 - 1;
              }
              while (v113);
              v136 = v181;
              do
              {
                uint64_t v137 = 0;
                uint64_t v180 = *(void *)v10;
                unint64_t v182 = v136;
                long long v138 = v10;
                do
                {
                  uint64_t v139 = v138;
                  v138 += 2 * v137 + 2;
                  uint64_t v140 = 2 * v137;
                  uint64_t v137 = (2 * v137) | 1;
                  uint64_t v141 = v140 + 2;
                  if (v140 + 2 < v13)
                  {
                    int v185 = *v138;
                    int v184 = v138[2];
                    BOOL v142 = sub_1CBAA0414(*a3, &v185);
                    uint64_t result = sub_1CBAA0414(*a3, &v184);
                    unint64_t v143 = *((void *)v142 + 1);
                    unint64_t v144 = *((void *)result + 1);
                    if (v143 > v144 || v143 == v144 && v185 < v184)
                    {
                      v138 += 2;
                      uint64_t v137 = v141;
                    }
                  }
                  *uint64_t v139 = *v138;
                  v139[1] = v138[1];
                }
                while (v137 <= (uint64_t)((unint64_t)(v13 - 2) >> 1));
                v136 = v182 - 2;
                if (v138 == v182 - 2)
                {
                  *(void *)long long v138 = v180;
                }
                else
                {
                  *long long v138 = *(v182 - 2);
                  v138[1] = *(v182 - 1);
                  *((void *)v182 - 1) = v180;
                  uint64_t v145 = (char *)v138 - (char *)v10 + 8;
                  if (v145 >= 9)
                  {
                    unint64_t v146 = ((unint64_t)v145 >> 3) - 2;
                    unint64_t v147 = v146 >> 1;
                    v148 = &v10[2 * (v146 >> 1)];
                    int v185 = *v148;
                    int v184 = *v138;
                    int v149 = sub_1CBAA0414(*a3, &v185);
                    uint64_t result = sub_1CBAA0414(*a3, &v184);
                    unint64_t v150 = *((void *)v149 + 1);
                    unint64_t v151 = *((void *)result + 1);
                    if (v150 > v151 || v150 == v151 && v185 < v184)
                    {
                      int v153 = *v138;
                      int v152 = v138[1];
                      *long long v138 = *v148;
                      v138[1] = v10[2 * v147 + 1];
                      int v183 = v152;
                      if (v146 >= 2)
                      {
                        while (1)
                        {
                          unint64_t v155 = v147 - 1;
                          unint64_t v147 = (v147 - 1) >> 1;
                          v154 = &v10[2 * v147];
                          int v156 = *v154;
                          int v184 = v153;
                          int v185 = v156;
                          v157 = sub_1CBAA0414(*a3, &v185);
                          uint64_t result = sub_1CBAA0414(*a3, &v184);
                          unint64_t v158 = *((void *)v157 + 1);
                          unint64_t v159 = *((void *)result + 1);
                          if (v158 <= v159 && (v158 != v159 || v185 >= v184)) {
                            break;
                          }
                          int *v148 = *v154;
                          v148[1] = v10[2 * v147 + 1];
                          v148 = &v10[2 * v147];
                          if (v155 < 2) {
                            goto LABEL_159;
                          }
                        }
                      }
                      v154 = v148;
LABEL_159:
                      int *v154 = v153;
                      v154[1] = v183;
                    }
                  }
                }
              }
              while (v13-- > 2);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          int v15 = &v10[2 * ((unint64_t)v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            sub_1CBAA18D8(v15, v10, v178, a3);
          }
          else
          {
            sub_1CBAA18D8(v10, v15, v178, a3);
            sub_1CBAA18D8(v10 + 2, v15 - 2, v174, a3);
            sub_1CBAA18D8(v10 + 4, &v10[2 * v14 + 2], v173, a3);
            sub_1CBAA18D8(v15 - 2, v15, &v10[2 * v14 + 2], a3);
            uint64_t v16 = *(void *)v10;
            *(void *)uint64_t v10 = *(void *)v15;
            *(void *)int v15 = v16;
          }
          --a4;
          if (a5) {
            break;
          }
          int v185 = *(v10 - 2);
          int v184 = *v10;
          unsigned int v17 = sub_1CBAA0414(*a3, &v185);
          int v18 = sub_1CBAA0414(*a3, &v184);
          unint64_t v19 = *((void *)v17 + 1);
          unint64_t v20 = *((void *)v18 + 1);
          if (v19 > v20 || v19 == v20 && v185 < v184) {
            break;
          }
          int v64 = *v10;
          int v63 = v10[1];
          int v185 = *v10;
          int v184 = *v178;
          uint64_t v65 = sub_1CBAA0414(*a3, &v185);
          uint64_t result = sub_1CBAA0414(*a3, &v184);
          unint64_t v66 = *((void *)v65 + 1);
          unint64_t v67 = *((void *)result + 1);
          if (v66 > v67 || v66 == v67 && v185 < v184)
          {
            int v185 = v64;
            uint64_t j = v10;
            while (1)
            {
              int v68 = j[2];
              j += 2;
              int v184 = v68;
              int v69 = sub_1CBAA0414(*a3, &v185);
              uint64_t result = sub_1CBAA0414(*a3, &v184);
              unint64_t v70 = *((void *)v69 + 1);
              unint64_t v71 = *((void *)result + 1);
              if (v70 > v71 || v70 == v71 && v185 < v184) {
                break;
              }
              int v185 = v64;
            }
          }
          else
          {
            for (uint64_t j = v10 + 2; j < v181; j += 2)
            {
              int v185 = v64;
              int v184 = *j;
              uint64_t v72 = sub_1CBAA0414(*a3, &v185);
              uint64_t result = sub_1CBAA0414(*a3, &v184);
              unint64_t v73 = *((void *)v72 + 1);
              unint64_t v74 = *((void *)result + 1);
              if (v73 > v74 || v73 == v74 && v185 < v184) {
                break;
              }
            }
          }
          uint64_t k = v181;
          if (j < v181)
          {
            for (uint64_t k = v178; ; k -= 2)
            {
              int v185 = v64;
              int v184 = *k;
              unint64_t v76 = sub_1CBAA0414(*a3, &v185);
              uint64_t result = sub_1CBAA0414(*a3, &v184);
              unint64_t v77 = *((void *)v76 + 1);
              unint64_t v78 = *((void *)result + 1);
              if (v77 <= v78 && (v77 != v78 || v185 >= v184)) {
                break;
              }
            }
          }
          while (j < k)
          {
            int v79 = *j;
            *uint64_t j = *k;
            *uint64_t k = v79;
            int v80 = j[1];
            j[1] = k[1];
            k[1] = v80;
            do
            {
              int v185 = v64;
              int v81 = j[2];
              j += 2;
              int v184 = v81;
              uint64_t v82 = sub_1CBAA0414(*a3, &v185);
              unsigned int v83 = sub_1CBAA0414(*a3, &v184);
              unint64_t v84 = *((void *)v82 + 1);
              unint64_t v85 = *((void *)v83 + 1);
            }
            while (v84 <= v85 && (v84 != v85 || v185 >= v184));
            do
            {
              do
              {
                int v185 = v64;
                int v86 = *(k - 2);
                k -= 2;
                int v184 = v86;
                int v87 = sub_1CBAA0414(*a3, &v185);
                uint64_t result = sub_1CBAA0414(*a3, &v184);
                unint64_t v88 = *((void *)v87 + 1);
                unint64_t v89 = *((void *)result + 1);
              }
              while (v88 > v89);
            }
            while (v88 == v89 && v185 < v184);
          }
          BOOL v5 = j - 2 >= v10;
          BOOL v6 = j - 2 == v10;
          if (j - 2 != v10)
          {
            *uint64_t v10 = *(j - 2);
            v10[1] = *(j - 1);
          }
          a5 = 0;
          *(j - 2) = v64;
          *(j - 1) = v63;
          a2 = v181;
        }
        int v21 = *v10;
        int v22 = v10[1];
        for (uint64_t m = 2; ; m += 2)
        {
          int v24 = v10[m];
          int v184 = v21;
          int v185 = v24;
          unint64_t v25 = sub_1CBAA0414(*a3, &v185);
          char v26 = sub_1CBAA0414(*a3, &v184);
          unint64_t v27 = *((void *)v25 + 1);
          unint64_t v28 = *((void *)v26 + 1);
          if (v27 <= v28 && (v27 != v28 || v185 >= v184)) {
            break;
          }
        }
        uint64_t v29 = a4;
        int v30 = &v10[m];
        if (m == 2)
        {
          uint64_t v31 = v181;
          if (v30 < v181)
          {
            uint64_t v31 = v178;
            int v40 = *v178;
            int v184 = v21;
            int v185 = v40;
            uint64_t v41 = sub_1CBAA0414(*a3, &v185);
            int v42 = sub_1CBAA0414(*a3, &v184);
            unint64_t v43 = *((void *)v41 + 1);
            unint64_t v44 = *((void *)v42 + 1);
            if (v43 <= v44)
            {
              uint64_t v31 = v178;
              do
              {
                if (v43 == v44)
                {
                  if (v30 >= v31 || v185 < v184) {
                    break;
                  }
                }
                else if (v30 >= v31)
                {
                  break;
                }
                int v45 = *(v31 - 2);
                v31 -= 2;
                int v184 = v21;
                int v185 = v45;
                int v46 = sub_1CBAA0414(*a3, &v185);
                uint64_t v47 = sub_1CBAA0414(*a3, &v184);
                unint64_t v43 = *((void *)v46 + 1);
                unint64_t v44 = *((void *)v47 + 1);
              }
              while (v43 <= v44);
            }
          }
        }
        else
        {
          uint64_t v31 = v178;
          int v32 = *v178;
          int v184 = v21;
          int v185 = v32;
          uint64_t v33 = sub_1CBAA0414(*a3, &v185);
          uint64_t v34 = sub_1CBAA0414(*a3, &v184);
          unint64_t v35 = *((void *)v33 + 1);
          unint64_t v36 = *((void *)v34 + 1);
          if (v35 <= v36)
          {
            uint64_t v31 = v178;
            do
            {
              if (v35 == v36 && v185 < v184) {
                break;
              }
              int v37 = *(v31 - 2);
              v31 -= 2;
              int v184 = v21;
              int v185 = v37;
              unint64_t v38 = sub_1CBAA0414(*a3, &v185);
              uint64_t v39 = sub_1CBAA0414(*a3, &v184);
              unint64_t v35 = *((void *)v38 + 1);
              unint64_t v36 = *((void *)v39 + 1);
            }
            while (v35 <= v36);
          }
        }
        int v48 = v22;
        uint64_t j = v30;
        if (v30 < v31)
        {
          unsigned int v49 = v31;
          do
          {
            int v50 = *j;
            *uint64_t j = *v49;
            int *v49 = v50;
            int v51 = j[1];
            j[1] = v49[1];
            v49[1] = v51;
            do
            {
              do
              {
                j += 2;
                int v52 = *j;
                int v184 = v21;
                int v185 = v52;
                uint64_t v53 = sub_1CBAA0414(*a3, &v185);
                unsigned int v54 = sub_1CBAA0414(*a3, &v184);
                unint64_t v55 = *((void *)v53 + 1);
                unint64_t v56 = *((void *)v54 + 1);
              }
              while (v55 > v56);
            }
            while (v55 == v56 && v185 < v184);
            do
            {
              int v57 = *(v49 - 2);
              v49 -= 2;
              int v184 = v21;
              int v185 = v57;
              uint64_t v58 = sub_1CBAA0414(*a3, &v185);
              int v59 = sub_1CBAA0414(*a3, &v184);
              unint64_t v60 = *((void *)v58 + 1);
              unint64_t v61 = *((void *)v59 + 1);
            }
            while (v60 <= v61 && (v60 != v61 || v185 >= v184));
          }
          while (j < v49);
        }
        if (j - 2 != v10)
        {
          *uint64_t v10 = *(j - 2);
          v10[1] = *(j - 1);
        }
        *(j - 2) = v21;
        *(j - 1) = v48;
        BOOL v5 = v30 >= v31;
        a2 = v181;
        a4 = v29;
        if (v5) {
          break;
        }
LABEL_51:
        uint64_t result = (int *)sub_1CBAA08FC(v10, j - 2, a3, v29, a5 & 1);
        a5 = 0;
      }
      BOOL v62 = sub_1CBAA1B2C(v10, j - 2, a3);
      uint64_t result = (int *)sub_1CBAA1B2C(j, v181, a3);
      if (result) {
        break;
      }
      if (!v62) {
        goto LABEL_51;
      }
    }
    a2 = j - 2;
    if (!v62) {
      continue;
    }
    return result;
  }
}

int *sub_1CBAA16CC(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t **a6)
{
  sub_1CBAA1DD4(a1, a2, a3, a4, a6);
  int v12 = *a5;
  int v37 = *a4;
  int v38 = v12;
  uint64_t v13 = sub_1CBAA0414(*a6, &v38);
  uint64_t result = sub_1CBAA0414(*a6, &v37);
  unint64_t v15 = *((void *)v13 + 1);
  unint64_t v16 = *((void *)result + 1);
  if (v15 > v16 || v15 == v16 && v38 < v37)
  {
    int v17 = *a4;
    *a4 = *a5;
    *a5 = v17;
    int v18 = a4[1];
    a4[1] = a5[1];
    a5[1] = v18;
    int v19 = *a4;
    int v37 = *a3;
    int v38 = v19;
    unint64_t v20 = sub_1CBAA0414(*a6, &v38);
    uint64_t result = sub_1CBAA0414(*a6, &v37);
    unint64_t v21 = *((void *)v20 + 1);
    unint64_t v22 = *((void *)result + 1);
    if (v21 > v22 || v21 == v22 && v38 < v37)
    {
      int v23 = *a3;
      *a3 = *a4;
      *a4 = v23;
      int v24 = a3[1];
      a3[1] = a4[1];
      a4[1] = v24;
      int v25 = *a3;
      int v37 = *a2;
      int v38 = v25;
      char v26 = sub_1CBAA0414(*a6, &v38);
      uint64_t result = sub_1CBAA0414(*a6, &v37);
      unint64_t v27 = *((void *)v26 + 1);
      unint64_t v28 = *((void *)result + 1);
      if (v27 > v28 || v27 == v28 && v38 < v37)
      {
        int v29 = *a2;
        *a2 = *a3;
        *a3 = v29;
        int v30 = a2[1];
        a2[1] = a3[1];
        a3[1] = v30;
        int v31 = *a2;
        int v37 = *a1;
        int v38 = v31;
        int v32 = sub_1CBAA0414(*a6, &v38);
        uint64_t result = sub_1CBAA0414(*a6, &v37);
        unint64_t v33 = *((void *)v32 + 1);
        unint64_t v34 = *((void *)result + 1);
        if (v33 > v34 || v33 == v34 && v38 < v37)
        {
          int v35 = *a1;
          *a1 = *a2;
          *a2 = v35;
          int v36 = a1[1];
          a1[1] = a2[1];
          a2[1] = v36;
        }
      }
    }
  }
  return result;
}

int *sub_1CBAA18D8(int *a1, int *a2, int *a3, uint64_t **a4)
{
  int v8 = *a2;
  int v39 = *a1;
  int v40 = v8;
  int v9 = sub_1CBAA0414(*a4, &v40);
  uint64_t v10 = sub_1CBAA0414(*a4, &v39);
  unint64_t v11 = *((void *)v9 + 1);
  unint64_t v12 = *((void *)v10 + 1);
  if (v11 > v12 || v11 == v12 && v40 < v39)
  {
    int v13 = *a3;
    int v39 = *a2;
    int v40 = v13;
    unint64_t v14 = sub_1CBAA0414(*a4, &v40);
    uint64_t result = sub_1CBAA0414(*a4, &v39);
    unint64_t v16 = *((void *)v14 + 1);
    unint64_t v17 = *((void *)result + 1);
    if (v16 > v17 || v16 == v17 && v40 < v39)
    {
      int v18 = *a1;
      *a1 = *a3;
      *a3 = v18;
      int v19 = a1[1];
      a1[1] = a3[1];
LABEL_17:
      a3[1] = v19;
      return result;
    }
    int v32 = *a1;
    *a1 = *a2;
    *a2 = v32;
    int v33 = a1[1];
    a1[1] = a2[1];
    a2[1] = v33;
    int v34 = *a3;
    int v39 = *a2;
    int v40 = v34;
    int v35 = sub_1CBAA0414(*a4, &v40);
    uint64_t result = sub_1CBAA0414(*a4, &v39);
    unint64_t v36 = *((void *)v35 + 1);
    unint64_t v37 = *((void *)result + 1);
    if (v36 > v37 || v36 == v37 && v40 < v39)
    {
      int v38 = *a2;
      *a2 = *a3;
      *a3 = v38;
      int v19 = a2[1];
      a2[1] = a3[1];
      goto LABEL_17;
    }
  }
  else
  {
    int v20 = *a3;
    int v39 = *a2;
    int v40 = v20;
    unint64_t v21 = sub_1CBAA0414(*a4, &v40);
    uint64_t result = sub_1CBAA0414(*a4, &v39);
    unint64_t v22 = *((void *)v21 + 1);
    unint64_t v23 = *((void *)result + 1);
    if (v22 > v23 || v22 == v23 && v40 < v39)
    {
      int v24 = *a2;
      *a2 = *a3;
      *a3 = v24;
      int v25 = a2[1];
      a2[1] = a3[1];
      a3[1] = v25;
      int v26 = *a2;
      int v39 = *a1;
      int v40 = v26;
      unint64_t v27 = sub_1CBAA0414(*a4, &v40);
      uint64_t result = sub_1CBAA0414(*a4, &v39);
      unint64_t v28 = *((void *)v27 + 1);
      unint64_t v29 = *((void *)result + 1);
      if (v28 > v29 || v28 == v29 && v40 < v39)
      {
        int v30 = *a1;
        *a1 = *a2;
        *a2 = v30;
        int v31 = a1[1];
        a1[1] = a2[1];
        a2[1] = v31;
      }
    }
  }
  return result;
}

BOOL sub_1CBAA1B2C(int *a1, int *a2, uint64_t **a3)
{
  int v4 = a2;
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v8 = *(a2 - 2);
      int v32 = *a1;
      int v33 = v8;
      int v9 = sub_1CBAA0414(*a3, &v33);
      uint64_t v10 = sub_1CBAA0414(*a3, &v32);
      unint64_t v11 = *((void *)v9 + 1);
      unint64_t v12 = *((void *)v10 + 1);
      if (v11 > v12 || v11 == v12 && v33 < v32)
      {
        int v13 = *a1;
        *a1 = *(v4 - 2);
        *(v4 - 2) = v13;
        int v14 = a1[1];
        a1[1] = *(v4 - 1);
        *(v4 - 1) = v14;
      }
      return 1;
    case 3:
      sub_1CBAA18D8(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      sub_1CBAA1DD4(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      sub_1CBAA16CC(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      unint64_t v15 = a1 + 4;
      sub_1CBAA18D8(a1, a1 + 2, a1 + 4, a3);
      unint64_t v16 = a1 + 6;
      if (a1 + 6 == v4) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      int v31 = v4;
      break;
  }
  while (1)
  {
    int v33 = *v16;
    int v32 = *v15;
    int v19 = sub_1CBAA0414(*a3, &v33);
    int v20 = sub_1CBAA0414(*a3, &v32);
    unint64_t v21 = *((void *)v19 + 1);
    unint64_t v22 = *((void *)v20 + 1);
    if (v21 > v22 || v21 == v22 && v33 < v32)
    {
      int v23 = *v16;
      int v24 = v16[1];
      *unint64_t v16 = *v15;
      v16[1] = v15[1];
      int v25 = a1;
      if (v15 != a1)
      {
        uint64_t v26 = v17;
        while (1)
        {
          int v32 = *(int *)((char *)a1 + v26 + 8);
          int v33 = v23;
          unint64_t v27 = sub_1CBAA0414(*a3, &v33);
          unint64_t v28 = sub_1CBAA0414(*a3, &v32);
          unint64_t v29 = *((void *)v27 + 1);
          unint64_t v30 = *((void *)v28 + 1);
          if (v29 <= v30 && (v29 != v30 || v33 >= v32)) {
            break;
          }
          *(void *)((char *)a1 + v26 + 16) = *(void *)((char *)a1 + v26 + 8);
          v26 -= 8;
          if (v26 == -16)
          {
            int v25 = a1;
            goto LABEL_19;
          }
        }
        int v25 = (int *)((char *)a1 + v26 + 16);
LABEL_19:
        int v4 = v31;
      }
      int *v25 = v23;
      v25[1] = v24;
      if (++v18 == 8) {
        return v16 + 2 == v4;
      }
    }
    unint64_t v15 = v16;
    v17 += 8;
    v16 += 2;
    if (v16 == v4) {
      return 1;
    }
  }
}

int *sub_1CBAA1DD4(int *a1, int *a2, int *a3, int *a4, uint64_t **a5)
{
  sub_1CBAA18D8(a1, a2, a3, a5);
  int v10 = *a4;
  int v29 = *a3;
  int v30 = v10;
  unint64_t v11 = sub_1CBAA0414(*a5, &v30);
  BOOL result = sub_1CBAA0414(*a5, &v29);
  unint64_t v13 = *((void *)v11 + 1);
  unint64_t v14 = *((void *)result + 1);
  if (v13 > v14 || v13 == v14 && v30 < v29)
  {
    int v15 = *a3;
    *a3 = *a4;
    *a4 = v15;
    int v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    int v17 = *a3;
    int v29 = *a2;
    int v30 = v17;
    int v18 = sub_1CBAA0414(*a5, &v30);
    BOOL result = sub_1CBAA0414(*a5, &v29);
    unint64_t v19 = *((void *)v18 + 1);
    unint64_t v20 = *((void *)result + 1);
    if (v19 > v20 || v19 == v20 && v30 < v29)
    {
      int v21 = *a2;
      *a2 = *a3;
      *a3 = v21;
      int v22 = a2[1];
      a2[1] = a3[1];
      a3[1] = v22;
      int v23 = *a2;
      int v29 = *a1;
      int v30 = v23;
      int v24 = sub_1CBAA0414(*a5, &v30);
      BOOL result = sub_1CBAA0414(*a5, &v29);
      unint64_t v25 = *((void *)v24 + 1);
      unint64_t v26 = *((void *)result + 1);
      if (v25 > v26 || v25 == v26 && v30 < v29)
      {
        int v27 = *a1;
        *a1 = *a2;
        *a2 = v27;
        int v28 = a1[1];
        a1[1] = a2[1];
        a2[1] = v28;
      }
    }
  }
  return result;
}

void sub_1CBAA1F64(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  __n128 v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    int v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    BOOL v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBAA2018(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  int v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBAA20C4()
{
  return "AGX2 nopifier pass";
}

void sub_1CBAA20D4(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CBAA2130(uint64_t a1, llvm::MachineFunction *a2)
{
  v201[32] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (unsigned __int8 *)*((void *)a2 + 2);
  int v4 = v3[365];
  int v5 = v3[366];
  int v6 = v3[367];
  int v7 = v3[368];
  unsigned __int8 v8 = v3[369];
  unsigned int v191 = v195;
  int v192 = v195;
  uint64_t v193 = 32;
  int v194 = 0;
  int v187 = v6;
  if (!((v4 | v8 | v5 | v6) | v7)) {
    goto LABEL_424;
  }
  int v9 = a2;
  if ((*(_WORD *)(*(void *)a2 + 18) & 0x3FF0) == 0x640) {
    goto LABEL_424;
  }
  *(void *)(a1 + 248) = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v3 + 104))(v3);
  uint64_t v10 = *((void *)v9 + 5);
  *(void *)(a1 + 256) = v10;
  if (**(unsigned char **)(*(void *)v10 + 360))
  {
    uint64_t v196 = 1;
    uint64_t v35 = 8;
    int64x2_t v36 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(int64x2_t *)((char *)&v196 + v35) = v36;
      v35 += 16;
    }
    while (v35 != 264);
    char v199 = v201;
    uint64_t v200 = 0x2000000000;
    unint64_t v37 = (void *)*((void *)v9 + 41);
    unint64_t v188 = (void *)((char *)v9 + 320);
    if (v37 == (void *)((char *)v9 + 320)) {
      goto LABEL_372;
    }
    uint64_t v186 = v9;
    while (1)
    {
      for (uint64_t i = v37[7]; (void *)i != v37 + 6; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v190 = i;
        int v39 = *(unsigned __int16 **)(i + 16);
        uint64_t v40 = *((void *)v39 + 1);
        if ((*(_WORD *)(i + 44) & 0xC) != 0 && (*(_WORD *)(i + 44) & 4) == 0)
        {
          uint64_t v82 = i;
          if ((v40 & 0x200) == 0)
          {
            while ((*(_WORD *)(v82 + 44) & 8) != 0)
            {
              uint64_t v82 = *(void *)(v82 + 8);
              if ((*(unsigned char *)(*(void *)(v82 + 16) + 9) & 2) != 0) {
                goto LABEL_181;
              }
            }
LABEL_87:
            uint64_t v42 = *((void *)v39 + 2);
            uint64_t v43 = v42 & 0xD00;
            if (v43 == 1280
              || v43 == 2304
              || v43 == 3328
              || (uint64_t v89 = v42 & 0xE00, v89 == 1536)
              || v89 == 2560
              || v89 == 3584
              || (v42 & 2) != 0
              || (v42 & 0x2000000) != 0
              || *v39 - 2970 < 0x48)
            {
              if (*(_DWORD *)(i + 40) >= 4u)
              {
                uint64_t v44 = i;
                uint64_t v45 = 3;
                while (1)
                {
                  uint64_t v46 = *(void *)(v44 + 32);
                  if (!*(unsigned char *)(v46 + 32 * v45)) {
                    break;
                  }
LABEL_98:
                  if (++v45 >= (unint64_t)*(unsigned int *)(v44 + 40)) {
                    goto LABEL_239;
                  }
                }
                uint64_t v47 = *(unsigned int *)(v46 + 32 * v45 + 4);
                uint64_t v189 = 0;
                uint64_t v48 = *(void *)(a1 + 256);
                if ((v47 & 0x80000000) != 0) {
                  unsigned int v49 = (uint64_t *)(*(void *)(v48 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
                }
                else {
                  unsigned int v49 = (uint64_t *)(*(void *)(v48 + 272) + 8 * v47);
                }
                uint64_t v50 = *v49;
                if (!v50) {
                  goto LABEL_97;
                }
                if ((*(unsigned char *)(v50 + 3) & 1) == 0)
                {
                  uint64_t v81 = *(void *)(v50 + 24);
                  if (!v81 || (*(unsigned char *)(v81 + 3) & 1) == 0) {
                    goto LABEL_97;
                  }
                }
                if ((v47 & 0x80000000) != 0) {
                  int v51 = (uint64_t *)(*(void *)(v48 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
                }
                else {
                  int v51 = (uint64_t *)(*(void *)(v48 + 272) + 8 * v47);
                }
                uint64_t v52 = *v51;
                if (v52)
                {
                  if ((*(unsigned char *)(v52 + 3) & 1) == 0)
                  {
                    uint64_t v52 = *(void *)(v52 + 24);
                    if (v52)
                    {
                      if ((*(unsigned char *)(v52 + 3) & 1) == 0) {
                        uint64_t v52 = 0;
                      }
                    }
                  }
                }
                uint64_t v53 = *(void *)(v52 + 8);
                while (1)
                {
                  uint64_t v52 = *(void *)(v52 + 24);
                  if (!v52 || (*(unsigned char *)(v52 + 3) & 1) == 0) {
                    break;
                  }
                  if (*(void *)(v52 + 8) != v53) {
                    goto LABEL_97;
                  }
                }
                uint64_t v189 = v53;
                if (!v53) {
                  goto LABEL_97;
                }
                unsigned int v54 = v192;
                uint64_t v55 = HIDWORD(v193);
                if (v192 == v191)
                {
                  if (HIDWORD(v193))
                  {
                    unint64_t v56 = 0;
                    uint64_t v57 = 8 * HIDWORD(v193);
                    uint64_t v58 = v192;
                    while (*v58 != v53)
                    {
                      if (*v58 == -2) {
                        unint64_t v56 = v58;
                      }
                      ++v58;
                      v57 -= 8;
                      if (!v57)
                      {
                        if (!v56) {
                          goto LABEL_119;
                        }
                        *unint64_t v56 = v53;
                        --v194;
                        break;
                      }
                    }
LABEL_143:
                    if (v196)
                    {
                      int v69 = 32;
                      unint64_t v70 = &v197;
LABEL_147:
                      int v71 = v69 - 1;
                      unsigned int v72 = ((v189 >> 4) ^ (v189 >> 9)) & v71;
                      unint64_t v73 = &v70[v72];
                      uint64_t v74 = *v73;
                      if (v189 != *v73)
                      {
                        uint64_t v75 = 0;
                        int v76 = 1;
                        while (v74 != -4096)
                        {
                          if (v75) {
                            BOOL v77 = 0;
                          }
                          else {
                            BOOL v77 = v74 == -8192;
                          }
                          if (v77) {
                            uint64_t v75 = v73;
                          }
                          unsigned int v78 = v72 + v76++;
                          unsigned int v72 = v78 & v71;
                          unint64_t v73 = &v70[v72];
                          uint64_t v74 = *v73;
                          if (v189 == *v73) {
                            goto LABEL_97;
                          }
                        }
                        if (v75) {
                          int v79 = v75;
                        }
                        else {
                          int v79 = v73;
                        }
                        goto LABEL_160;
                      }
                    }
                    else
                    {
                      int v69 = v198;
                      if (v198)
                      {
                        unint64_t v70 = v197;
                        goto LABEL_147;
                      }
                      int v79 = 0;
LABEL_160:
                      int v80 = sub_1CBAA320C((uint64_t)&v196, (uint64_t)&v189, &v189, v79);
                      void *v80 = v189;
                      if (v200 >= (unint64_t)HIDWORD(v200)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v199 + v200) = v189;
                      LODWORD(v200) = v200 + 1;
                    }
LABEL_97:
                    uint64_t v44 = v190;
                    goto LABEL_98;
                  }
LABEL_119:
                  unsigned int v59 = v193;
                  if (HIDWORD(v193) < v193)
                  {
                    ++HIDWORD(v193);
                    *(void *)&v192[8 * v55] = v53;
                    goto LABEL_143;
                  }
                }
                else
                {
                  unsigned int v59 = v193;
                }
                if (3 * v59 <= 4 * (HIDWORD(v193) - v194))
                {
                  if (v59 >= 0x40) {
                    v59 *= 2;
                  }
                  else {
                    unsigned int v59 = 128;
                  }
                }
                else if (v59 - HIDWORD(v193) >= v59 >> 3)
                {
                  goto LABEL_124;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v191, v59);
                unsigned int v59 = v193;
                unsigned int v54 = v192;
LABEL_124:
                unsigned int v60 = v59 - 1;
                unsigned int v61 = (v59 - 1) & ((v53 >> 4) ^ (v53 >> 9));
                BOOL v62 = &v54[8 * v61];
                uint64_t v63 = *(void *)v62;
                if (*(void *)v62 == -1)
                {
                  int v64 = 0;
LABEL_136:
                  if (v64) {
                    int v68 = v64;
                  }
                  else {
                    int v68 = v62;
                  }
                  if (*(void *)v68 != v53)
                  {
                    if (*(void *)v68 == -2) {
                      --v194;
                    }
                    else {
                      ++HIDWORD(v193);
                    }
                    *(void *)int v68 = v53;
                  }
                }
                else
                {
                  int v64 = 0;
                  int v65 = 1;
                  while (v63 != v53)
                  {
                    if (v64) {
                      BOOL v66 = 0;
                    }
                    else {
                      BOOL v66 = v63 == -2;
                    }
                    if (v66) {
                      int v64 = v62;
                    }
                    unsigned int v67 = v61 + v65++;
                    unsigned int v61 = v67 & v60;
                    BOOL v62 = &v54[8 * (v67 & v60)];
                    uint64_t v63 = *(void *)v62;
                    if (*(void *)v62 == -1) {
                      goto LABEL_136;
                    }
                  }
                }
                goto LABEL_143;
              }
            }
LABEL_240:
            if ((*(unsigned char *)i & 4) != 0) {
              continue;
            }
            goto LABEL_243;
          }
        }
        else if ((v40 & 0x200) == 0)
        {
          goto LABEL_87;
        }
LABEL_181:
        unsigned int v83 = v192;
        uint64_t v84 = HIDWORD(v193);
        if (v192 != v191)
        {
          unsigned int v88 = v193;
          goto LABEL_199;
        }
        if (!HIDWORD(v193))
        {
LABEL_189:
          unsigned int v88 = v193;
          if (HIDWORD(v193) < v193)
          {
            ++HIDWORD(v193);
            *(void *)&v192[8 * v84] = i;
            goto LABEL_220;
          }
LABEL_199:
          if (3 * v88 <= 4 * (HIDWORD(v193) - v194))
          {
            if (v88 >= 0x40) {
              v88 *= 2;
            }
            else {
              unsigned int v88 = 128;
            }
          }
          else if (v88 - HIDWORD(v193) >= v88 >> 3)
          {
            goto LABEL_201;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v191, v88);
          unsigned int v88 = v193;
          unsigned int v83 = v192;
LABEL_201:
          unsigned int v90 = v88 - 1;
          unsigned int v91 = (v88 - 1) & ((i >> 4) ^ (i >> 9));
          unint64_t v92 = &v83[8 * v91];
          uint64_t v93 = *(void *)v92;
          if (*(void *)v92 == -1)
          {
            int v94 = 0;
LABEL_213:
            if (v94) {
              uint64_t v98 = v94;
            }
            else {
              uint64_t v98 = v92;
            }
            if (*(void *)v98 != i)
            {
              if (*(void *)v98 == -2) {
                --v194;
              }
              else {
                ++HIDWORD(v193);
              }
              *(void *)uint64_t v98 = i;
            }
          }
          else
          {
            int v94 = 0;
            int v95 = 1;
            while (v93 != i)
            {
              if (v94) {
                BOOL v96 = 0;
              }
              else {
                BOOL v96 = v93 == -2;
              }
              if (v96) {
                int v94 = v92;
              }
              unsigned int v97 = v91 + v95++;
              unsigned int v91 = v97 & v90;
              unint64_t v92 = &v83[8 * (v97 & v90)];
              uint64_t v93 = *(void *)v92;
              if (*(void *)v92 == -1) {
                goto LABEL_213;
              }
            }
          }
          goto LABEL_220;
        }
        unint64_t v85 = 0;
        uint64_t v86 = 8 * HIDWORD(v193);
        int v87 = v192;
        while (*v87 != i)
        {
          if (*v87 == -2) {
            unint64_t v85 = v87;
          }
          ++v87;
          v86 -= 8;
          if (!v86)
          {
            if (!v85) {
              goto LABEL_189;
            }
            *unint64_t v85 = i;
            --v194;
            break;
          }
        }
LABEL_220:
        if (v196)
        {
          int v99 = 32;
          uint64_t v100 = &v197;
        }
        else
        {
          int v99 = v198;
          if (!v198)
          {
            unsigned int v109 = 0;
            goto LABEL_237;
          }
          uint64_t v100 = v197;
        }
        int v101 = v99 - 1;
        unsigned int v102 = ((v190 >> 4) ^ (v190 >> 9)) & v101;
        unint64_t v103 = &v100[v102];
        uint64_t v104 = *v103;
        if (v190 == *v103) {
          goto LABEL_239;
        }
        int v105 = 0;
        int v106 = 1;
        while (v104 != -4096)
        {
          if (v105) {
            BOOL v107 = 0;
          }
          else {
            BOOL v107 = v104 == -8192;
          }
          if (v107) {
            int v105 = v103;
          }
          unsigned int v108 = v102 + v106++;
          unsigned int v102 = v108 & v101;
          unint64_t v103 = &v100[v102];
          uint64_t v104 = *v103;
          if (v190 == *v103) {
            goto LABEL_239;
          }
        }
        if (v105) {
          unsigned int v109 = v105;
        }
        else {
          unsigned int v109 = v103;
        }
LABEL_237:
        unint64_t v110 = sub_1CBAA320C((uint64_t)&v196, (uint64_t)&v190, &v190, v109);
        *unint64_t v110 = v190;
        if (v200 >= (unint64_t)HIDWORD(v200)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v199 + v200) = v190;
        LODWORD(v200) = v200 + 1;
LABEL_239:
        if (i) {
          goto LABEL_240;
        }
LABEL_243:
        while ((*(_WORD *)(i + 44) & 8) != 0)
          uint64_t i = *(void *)(i + 8);
      }
      unint64_t v37 = (void *)v37[1];
      if (v37 == v188)
      {
        unsigned int v111 = v200;
        if (!v200) {
          goto LABEL_372;
        }
LABEL_255:
        int64_t v112 = (char *)v199 + 8 * v111;
        uint64_t v113 = *((void *)v112 - 1);
        sub_1CBAA360C(&v196, (void *)v112 - 1);
        unsigned int v111 = v200 - 1;
        LODWORD(v200) = v200 - 1;
        unint64_t v114 = *(unsigned __int8 *)(*(void *)(v113 + 16) + 4);
        unint64_t v115 = *(unsigned int *)(v113 + 40);
        if (v115 <= v114) {
          goto LABEL_371;
        }
        while (2)
        {
          uint64_t v116 = *(void *)(v113 + 32);
          if (*(unsigned char *)(v116 + 32 * v114)) {
            goto LABEL_262;
          }
          uint64_t v117 = *(unsigned int *)(v116 + 32 * v114 + 4);
          uint64_t v190 = 0;
          uint64_t v118 = *(void *)(a1 + 256);
          if ((v117 & 0x80000000) != 0) {
            unint64_t v119 = (uint64_t *)(*(void *)(v118 + 24) + 16 * (v117 & 0x7FFFFFFF) + 8);
          }
          else {
            unint64_t v119 = (uint64_t *)(*(void *)(v118 + 272) + 8 * v117);
          }
          uint64_t v120 = *v119;
          if (!v120) {
            goto LABEL_261;
          }
          if ((*(unsigned char *)(v120 + 3) & 1) == 0)
          {
            uint64_t v149 = *(void *)(v120 + 24);
            if (!v149 || (*(unsigned char *)(v149 + 3) & 1) == 0) {
              goto LABEL_261;
            }
          }
          if ((v117 & 0x80000000) != 0) {
            v121 = (uint64_t *)(*(void *)(v118 + 24) + 16 * (v117 & 0x7FFFFFFF) + 8);
          }
          else {
            v121 = (uint64_t *)(*(void *)(v118 + 272) + 8 * v117);
          }
          uint64_t v122 = *v121;
          if (v122 && (*(unsigned char *)(v122 + 3) & 1) == 0)
          {
            uint64_t v122 = *(void *)(v122 + 24);
            if (v122 && (*(unsigned char *)(v122 + 3) & 1) == 0) {
              uint64_t v122 = 0;
            }
            int v9 = v186;
          }
          uint64_t v123 = *(void *)(v122 + 8);
          while (1)
          {
            uint64_t v122 = *(void *)(v122 + 24);
            if (!v122 || (*(unsigned char *)(v122 + 3) & 1) == 0) {
              break;
            }
            if (*(void *)(v122 + 8) != v123) {
              goto LABEL_261;
            }
          }
          uint64_t v190 = v123;
          if (!v123) {
            goto LABEL_261;
          }
          uint64_t v125 = v191;
          v124 = v192;
          if (v192 == v191)
          {
            unsigned int v126 = HIDWORD(v193);
            uint64_t v127 = &v192[8 * HIDWORD(v193)];
            if (HIDWORD(v193))
            {
              uint64_t v128 = 0;
              while (*(void *)&v192[v128] != v123)
              {
                v128 += 8;
                if (8 * HIDWORD(v193) == v128) {
                  goto LABEL_294;
                }
              }
              uint64_t v127 = &v192[v128];
            }
LABEL_294:
            uint64_t v125 = v192;
          }
          else
          {
            int v129 = v193 - 1;
            unsigned int v130 = (v193 - 1) & ((v123 >> 4) ^ (v123 >> 9));
            uint64_t v127 = &v192[8 * v130];
            uint64_t v131 = *(void *)v127;
            if (*(void *)v127 == -1)
            {
              int v132 = 0;
LABEL_323:
              if (v132) {
                uint64_t v127 = v132;
              }
              unsigned int v126 = HIDWORD(v193);
              if (*(void *)v127 != v123) {
                uint64_t v127 = &v192[8 * v193];
              }
            }
            else
            {
              int v132 = 0;
              int v133 = 1;
              while (v131 != v123)
              {
                if (v132) {
                  BOOL v134 = 0;
                }
                else {
                  BOOL v134 = v131 == -2;
                }
                if (v134) {
                  int v132 = v127;
                }
                unsigned int v135 = v130 + v133++;
                unsigned int v130 = v135 & v129;
                uint64_t v127 = &v192[8 * (v135 & v129)];
                uint64_t v131 = *(void *)v127;
                if (*(void *)v127 == -1) {
                  goto LABEL_323;
                }
              }
              unsigned int v126 = HIDWORD(v193);
            }
          }
          unsigned int v136 = v193;
          int v137 = v192 == v125 ? v126 : v193;
          if (v127 != &v192[8 * v137]) {
            goto LABEL_261;
          }
          if (v192 != v125) {
            goto LABEL_309;
          }
          if (v126)
          {
            long long v138 = 0;
            uint64_t v139 = 8 * v126;
            uint64_t v140 = v192;
            do
            {
              if (*v140 == v123) {
                goto LABEL_339;
              }
              if (*v140 == -2) {
                long long v138 = v140;
              }
              ++v140;
              v139 -= 8;
            }
            while (v139);
            if (v138)
            {
              *long long v138 = v123;
              --v194;
              goto LABEL_339;
            }
          }
          if (v193 > v126)
          {
            HIDWORD(v193) = v126 + 1;
            *(void *)&v192[8 * v126] = v123;
            goto LABEL_339;
          }
LABEL_309:
          if (3 * (int)v193 <= 4 * (v126 - v194))
          {
            if (v193 >= 0x40) {
              unsigned int v136 = 2 * v193;
            }
            else {
              unsigned int v136 = 128;
            }
          }
          else if (v193 - v126 >= v193 >> 3)
          {
LABEL_311:
            unsigned int v141 = v136 - 1;
            unsigned int v142 = (v136 - 1) & ((v123 >> 4) ^ (v123 >> 9));
            unint64_t v143 = &v124[8 * v142];
            uint64_t v144 = *(void *)v143;
            if (*(void *)v143 == -1)
            {
              uint64_t v145 = 0;
LABEL_332:
              if (v145) {
                unint64_t v150 = v145;
              }
              else {
                unint64_t v150 = v143;
              }
              if (*(void *)v150 != v123)
              {
                if (*(void *)v150 == -2) {
                  --v194;
                }
                else {
                  ++HIDWORD(v193);
                }
                *(void *)unint64_t v150 = v123;
              }
            }
            else
            {
              uint64_t v145 = 0;
              int v146 = 1;
              while (v144 != v123)
              {
                if (v145) {
                  BOOL v147 = 0;
                }
                else {
                  BOOL v147 = v144 == -2;
                }
                if (v147) {
                  uint64_t v145 = v143;
                }
                unsigned int v148 = v142 + v146++;
                unsigned int v142 = v148 & v141;
                unint64_t v143 = &v124[8 * (v148 & v141)];
                uint64_t v144 = *(void *)v143;
                if (*(void *)v143 == -1) {
                  goto LABEL_332;
                }
              }
            }
LABEL_339:
            if (v196)
            {
              int v151 = 32;
              int v152 = &v197;
LABEL_343:
              int v153 = v151 - 1;
              unsigned int v154 = ((v190 >> 4) ^ (v190 >> 9)) & v153;
              unint64_t v155 = &v152[v154];
              uint64_t v156 = *v155;
              if (v190 != *v155)
              {
                v157 = 0;
                int v158 = 1;
                while (v156 != -4096)
                {
                  if (v157) {
                    BOOL v159 = 0;
                  }
                  else {
                    BOOL v159 = v156 == -8192;
                  }
                  if (v159) {
                    v157 = v155;
                  }
                  unsigned int v160 = v154 + v158++;
                  unsigned int v154 = v160 & v153;
                  unint64_t v155 = &v152[v154];
                  uint64_t v156 = *v155;
                  if (v190 == *v155) {
                    goto LABEL_261;
                  }
                }
                if (v157) {
                  long long v161 = v157;
                }
                else {
                  long long v161 = v155;
                }
                goto LABEL_356;
              }
            }
            else
            {
              int v151 = v198;
              if (v198)
              {
                int v152 = v197;
                goto LABEL_343;
              }
              long long v161 = 0;
LABEL_356:
              int v162 = sub_1CBAA320C((uint64_t)&v196, (uint64_t)&v190, &v190, v161);
              void *v162 = v190;
              if (v200 >= (unint64_t)HIDWORD(v200)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v199 + v200) = v190;
              LODWORD(v200) = v200 + 1;
            }
LABEL_261:
            unint64_t v115 = *(unsigned int *)(v113 + 40);
LABEL_262:
            if (++v114 < v115) {
              continue;
            }
            unsigned int v111 = v200;
LABEL_371:
            if (v111) {
              goto LABEL_255;
            }
LABEL_372:
            v163 = (void *)*((void *)v9 + 41);
            if (v163 == v188) {
              goto LABEL_420;
            }
            unint64_t v165 = v191;
            unint64_t v164 = v192;
            int v166 = v193;
            uint64_t v167 = HIDWORD(v193);
            int v168 = v193 - 1;
            if (v192 == v191) {
              int v169 = HIDWORD(v193);
            }
            else {
              int v169 = v193;
            }
            int v170 = &v192[8 * v169];
            uint64_t v171 = 8 * HIDWORD(v193);
            while (2)
            {
              uint64_t v172 = v163[7];
              uint64_t v173 = v164;
LABEL_378:
              if ((void *)v172 == v163 + 6)
              {
                v163 = (void *)v163[1];
                if (v163 == v188)
                {
LABEL_420:
                  if (v199 != v201) {
                    free(v199);
                  }
                  if ((v196 & 1) == 0) {
                    MEMORY[0x1D25D9CD0](v197, 8);
                  }
                  goto LABEL_424;
                }
                continue;
              }
              break;
            }
            if (v173 == v165)
            {
              if (v167)
              {
                uint64_t v174 = 0;
                while (*(void *)&v165[v174] != v172)
                {
                  v174 += 8;
                  if (v171 == v174)
                  {
                    int v175 = v167;
                    goto LABEL_399;
                  }
                }
                int v184 = &v165[v174];
                int v175 = v167;
                uint64_t v173 = v165;
              }
              else
              {
                int v175 = 0;
LABEL_399:
                uint64_t v173 = v165;
                int v184 = &v165[8 * v167];
              }
            }
            else
            {
              unsigned int v176 = v168 & ((v172 >> 4) ^ (v172 >> 9));
              int v177 = &v164[8 * v176];
              uint64_t v178 = *(void *)v177;
              if (*(void *)v177 == -1)
              {
                int64_t v179 = 0;
LABEL_401:
                if (v179) {
                  int v177 = v179;
                }
                uint64_t v183 = *(void *)v177;
              }
              else
              {
                int64_t v179 = 0;
                int v180 = 1;
                while (v178 != v172)
                {
                  if (v179) {
                    BOOL v181 = 0;
                  }
                  else {
                    BOOL v181 = v178 == -2;
                  }
                  if (v181) {
                    int64_t v179 = v177;
                  }
                  unsigned int v182 = v176 + v180++;
                  unsigned int v176 = v182 & v168;
                  int v177 = &v164[8 * (v182 & v168)];
                  uint64_t v178 = *(void *)v177;
                  if (*(void *)v177 == -1) {
                    goto LABEL_401;
                  }
                }
                uint64_t v183 = v172;
              }
              if (v183 == v172) {
                int v184 = v177;
              }
              else {
                int v184 = v170;
              }
              int v175 = v167;
              uint64_t v173 = v164;
            }
            if (v173 != v165) {
              int v175 = v166;
            }
            if (v184 == &v173[8 * v175])
            {
              *(_WORD *)(v172 + 44) = *(_WORD *)(v172 + 44) & 0xC | 0x80;
            }
            else if (!v172)
            {
              goto LABEL_417;
            }
            if ((*(unsigned char *)v172 & 4) == 0)
            {
LABEL_417:
              while ((*(_WORD *)(v172 + 44) & 8) != 0)
                uint64_t v172 = *(void *)(v172 + 8);
            }
            uint64_t v172 = *(void *)(v172 + 8);
            goto LABEL_378;
          }
          break;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v191, v136);
        unsigned int v136 = v193;
        v124 = v192;
        goto LABEL_311;
      }
    }
  }
  unint64_t v11 = (void *)*((void *)v9 + 41);
  if (v11 != (void *)((char *)v9 + 320))
  {
    char v12 = 0;
    while (1)
    {
      uint64_t v13 = v11[7];
      if ((void *)v13 != v11 + 6) {
        break;
      }
LABEL_74:
      unint64_t v11 = (void *)v11[1];
      if (v11 == (void *)((char *)v9 + 320)) {
        goto LABEL_425;
      }
    }
    while (1)
    {
      if (v13 && (*(unsigned char *)v13 & 4) != 0)
      {
        __int16 v14 = *(_WORD *)(v13 + 44);
      }
      else
      {
        __int16 v14 = *(_WORD *)(v13 + 44);
        if ((v14 & 8) != 0)
        {
          uint64_t v15 = v13;
          do
            uint64_t v15 = *(void *)(v15 + 8);
          while ((*(_WORD *)(v15 + 44) & 8) != 0);
          goto LABEL_15;
        }
      }
      uint64_t v15 = v13;
LABEL_15:
      uint64_t v16 = *(void *)(v15 + 8);
      if ((v14 & 0x80) == 0) {
        goto LABEL_47;
      }
      int v17 = *(unsigned __int16 **)(v13 + 16);
      int v18 = *v17;
      unsigned int v19 = v18 - 9;
      BOOL v20 = (v18 - 9) > 0x3C || ((1 << (v18 - 9)) & 0x1000000000000605) == 0;
      if (!v20 || v18 == 0) {
        goto LABEL_47;
      }
      uint64_t v22 = *((void *)v17 + 1);
      if ((v22 & 0x10) != 0) {
        goto LABEL_47;
      }
      uint64_t v23 = *((void *)v17 + 2);
      if ((v23 & 0x40) != 0) {
        goto LABEL_47;
      }
      if ((v22 & 0x2000) != 0)
      {
        int v24 = *(_DWORD *)(*(void *)(v13 + 32) + 4);
        if (v24 == 56 || v24 == 313) {
          goto LABEL_47;
        }
      }
      uint64_t v25 = *((void *)v17 + 2) & 0xD00;
      if (v5) {
        BOOL v26 = v25 == 1280;
      }
      else {
        BOOL v26 = 0;
      }
      char v27 = v26;
      BOOL v28 = v25 != 2304 || v4 == 0;
      if (!v28 || (v27 & 1) != 0 || v187 && (v23 & 2) != 0)
      {
        unsigned int v29 = *(_DWORD *)(v13 + 40);
        while (v29 > *((unsigned __int8 *)v17 + 4))
        {
          llvm::MachineInstr::removeOperand((char *)v13, v29 - 1);
          unsigned int v29 = *(_DWORD *)(v13 + 40);
          int v17 = *(unsigned __int16 **)(v13 + 16);
        }
        *(void *)(v13 + 16) = *(void *)(*(void *)(a1 + 248) + 8) + 480;
        llvm::MachineInstr::dropMemRefs(v13, v9);
      }
      else
      {
        uint64_t v30 = *((void *)v17 + 2) & 0xE00;
        if (v5) {
          BOOL v31 = v30 == 1536;
        }
        else {
          BOOL v31 = 0;
        }
        char v32 = v31;
        BOOL v33 = v30 != 2560 || v4 == 0;
        if (!v33 || (v32 & 1) != 0 || v187 && (v18 - 2970) <= 0x47)
        {
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v13);
        }
        else
        {
          if (!v7 || (v19 > 0x3C || ((1 << v19) & 0x1000000000000405) == 0) && *v17 && (v23 & 1) == 0)
          {
            *(_WORD *)(v13 + 44) = v14 & 0xFF7F;
            goto LABEL_47;
          }
          unsigned int v34 = *(_DWORD *)(v13 + 40);
          while (v34 > *((unsigned __int8 *)v17 + 4))
          {
            llvm::MachineInstr::removeOperand((char *)v13, v34 - 1);
            unsigned int v34 = *(_DWORD *)(v13 + 40);
            int v17 = *(unsigned __int16 **)(v13 + 16);
          }
          *(void *)(v13 + 16) = *(void *)(*(void *)(a1 + 248) + 8) + 480;
        }
      }
      char v12 = 1;
LABEL_47:
      uint64_t v13 = v16;
      if ((void *)v16 == v11 + 6) {
        goto LABEL_74;
      }
    }
  }
LABEL_424:
  char v12 = 0;
LABEL_425:
  if (v192 != v191) {
    free(v192);
  }
  return v12 & 1;
}

uint64_t sub_1CBAA3164(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 32;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  int v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    uint64_t result = 1;
  }
  else
  {
    int v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        int v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      int v7 = (void *)(v3 + 8 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_13;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

void *sub_1CBAA320C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 32;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1CBAA3384(a1, 2 * v8);
    uint64_t v11 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v12 = 32;
    }
    else
    {
      int v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        int v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      uint64_t v11 = *(void *)(a1 + 8);
    }
    int v9 = *(_DWORD *)a1 & 1;
    int v13 = v12 - 1;
    unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (void *)(v11 + 8 * v14);
    uint64_t v15 = *a4;
    if (*a3 != *a4)
    {
      uint64_t v16 = 0;
      int v17 = 1;
      while (v15 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -8192;
        }
        if (v18) {
          uint64_t v16 = a4;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        a4 = (void *)(v11 + 8 * v14);
        uint64_t v15 = *a4;
        if (*a3 == *a4) {
          goto LABEL_7;
        }
      }
      if (v16) {
        a4 = v16;
      }
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1CBAA3384(a1, v8);
      BOOL v20 = 0;
      sub_1CBAA3164(a1, a3, &v20);
      a4 = v20;
      int v6 = *(_DWORD *)a1;
    }
    int v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

int *sub_1CBAA3384(uint64_t a1, unsigned int a2)
{
  v14[32] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x21)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x20)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CBAA350C((int *)a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  int v6 = v14;
  for (uint64_t i = 8; i != 264; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CBAA350C((int *)a1, v14, v6);
}

int *sub_1CBAA350C(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    int v6 = result + 66;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    int v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v9 = 32;
        uint64_t v8 = result + 2;
      }
      else
      {
        uint64_t v8 = (int *)*((void *)result + 1);
        int v9 = result[4];
      }
      int v10 = v9 - 1;
      unsigned int v11 = (v9 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v12 = &v8[2 * v11];
      uint64_t v13 = *(void *)v12;
      if (v7 != *(void *)v12)
      {
        unsigned int v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            unsigned int v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          uint64_t v12 = &v8[2 * (v17 & v10)];
          uint64_t v13 = *(void *)v12;
          if (v7 == *(void *)v12) {
            goto LABEL_21;
          }
        }
        if (v14) {
          uint64_t v12 = v14;
        }
      }
LABEL_21:
      *(void *)uint64_t v12 = v7;
      *result += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CBAA360C(_DWORD *a1, void *a2)
{
  int v5 = 0;
  uint64_t result = sub_1CBAA3164((uint64_t)a1, a2, &v5);
  if (result)
  {
    *int v5 = -8192;
    int v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

void sub_1CBAA3660()
{
}

uint64_t sub_1CBAA36F8(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCBFD90;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25F56D8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBFD98, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBAA3660;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCBFD98, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CBAA37F0()
{
}

void sub_1CBAA382C(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  __n128 v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    int v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    int v5 = a1;
    free(v2);
    a1 = v5;
  }
  int v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    int v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBAA38E0(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  int v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  int v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBAA398C()
{
  return "AGX2 Repair MatMad pass";
}

void sub_1CBAA399C(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CBAA3A10(uint64_t a1, uint64_t a2)
{
  uint64_t v171 = *MEMORY[0x1E4F143B8];
  int v3 = *(unsigned char **)(a2 + 16);
  if (!v3[395]
    || (*(void *)(a1 + 248) = (*(uint64_t (**)(unsigned char *))(*(void *)v3 + 104))(v3),
        *(void *)(a1 + 256) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16)),
        uint64_t v5 = *(void *)(a2 + 328),
        uint64_t v115 = a2 + 320,
        v5 == a2 + 320))
  {
    char v125 = 0;
  }
  else
  {
    char v125 = 0;
    do
    {
      uint64_t v6 = v5 + 48;
      for (uint64_t i = *(void *)(v5 + 56); i != v6; uint64_t i = *(void *)(i + 8))
      {
        if ((*(unsigned char *)(*(void *)(i + 16) + 20) & 0x10) != 0)
        {
          uint64_t v8 = *(void *)(i + 32);
          uint64_t v9 = *(unsigned int *)(v8 + 4);
          sub_1CBAA46A8((uint64_t)&v127, (llvm::MachineInstr *)i, *(_DWORD *)(v8 + 4), *(void *)(a1 + 256));
          if (v128)
          {
            uint64_t v118 = v8;
            uint64_t v121 = v9;
            v154[3] = 0;
            v155[0] = 0;
            *(void *)((char *)v155 + 5) = 0;
            uint64_t v156 = v158;
            uint64_t v157 = 0x200000000;
            v158[4] = 0;
            BOOL v159 = v161;
            uint64_t v160 = 0x600000000;
            v161[12] = 0;
            int v162 = v164;
            uint64_t v163 = 0x600000000;
            v164[12] = 0;
            unint64_t v165 = v167;
            uint64_t v166 = 0x600000000;
            v167[12] = 0;
            int v168 = v170;
            uint64_t v169 = 0x600000000;
            v170[12] = 0;
            unsigned int v126 = *(llvm::MachineBasicBlock **)(i + 24);
            llvm::RegScavenger::enterBasicBlockEnd((llvm::RegScavenger *)v154, v126);
            while (v155[0] != i)
              llvm::RegScavenger::backward((llvm::RegScavenger *)v154);
            RegClassConstraint = (unsigned __int16 ***)llvm::MachineInstr::getRegClassConstraint((llvm::MachineInstr *)i, 0, *(const llvm::TargetInstrInfo **)(a1 + 248), *(const llvm::TargetRegisterInfo **)(a1 + 256));
            llvm::RegScavenger::getRegsAvailable(v154, RegClassConstraint, (uint64_t)&v150);
            llvm::RegScavenger::backward((llvm::RegScavenger *)v154);
            unsigned int UnusedReg = llvm::RegScavenger::FindUnusedReg((uint64_t)v154, RegClassConstraint);
            sub_1CBAA47EC((uint64_t *)&v147, v9, *(void *)(a1 + 256));
            uint64_t v12 = *(void *)(a1 + 256);
            uint64_t v114 = (uint64_t)RegClassConstraint;
            unsigned int v117 = *(_DWORD *)(*(void *)(v12 + 264)
                             + 24
                             * (*((unsigned __int16 *)*RegClassConstraint + 12)
                              + *(_DWORD *)(v12 + 272)
                              * ((*(void *)(v12 + 248) - *(void *)(v12 + 240)) >> 3)));
            uint64_t v144 = &v146;
            uint64_t v145 = 0x200000000;
            unsigned int v13 = *(_DWORD *)(v12 + 16);
            uint64_t v139 = v142;
            unsigned int v141 = 6;
            if (v13 + 63 >= 0x1C0)
            {
              unsigned int v140 = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v13 + 63 >= 0x40) {
              bzero(v142, 8 * ((v13 + 63) >> 6));
            }
            unsigned int v140 = (v13 + 63) >> 6;
            unsigned int v143 = v13;
            unsigned int v14 = &v127[8 * v129];
            uint64_t v120 = v5;
            unsigned int v116 = UnusedReg;
            if (v128)
            {
              if (v129)
              {
                uint64_t v15 = 32 * v129;
                uint64_t v16 = (uint64_t)v127;
                while (*(_DWORD *)v16 >= 0xFFFFFFFE)
                {
                  v16 += 32;
                  v15 -= 32;
                  if (!v15) {
                    goto LABEL_25;
                  }
                }
              }
              else
              {
                uint64_t v16 = (uint64_t)v127;
              }
            }
            else
            {
LABEL_25:
              uint64_t v16 = (uint64_t)&v127[8 * v129];
            }
            v124 = &v127[8 * v129];
            if ((unsigned int *)v16 == v124)
            {
              int v69 = 0;
              char v66 = 1;
              uint64_t v67 = v9;
              uint64_t v68 = v118;
              unsigned int v65 = v116;
            }
            else
            {
              int v122 = 0;
              char v123 = 1;
              do
              {
                uint64_t v17 = v6;
                uint64_t v18 = llvm::MachineInstr::getRegClassConstraint((llvm::MachineInstr *)i, **(unsigned int **)(v16 + 8), *(const llvm::TargetInstrInfo **)(a1 + 248), *(const llvm::TargetRegisterInfo **)(a1 + 256));
                uint64_t v19 = v18;
                uint64_t v20 = *(unsigned int *)(v16 + 16);
                if (v20)
                {
                  int v21 = *(unsigned int **)(v16 + 8);
                  uint64_t v22 = &v21[v20];
                  do
                  {
                    uint64_t v23 = *(const llvm::TargetRegisterInfo **)(a1 + 256);
                    uint64_t v24 = llvm::MachineInstr::getRegClassConstraint((llvm::MachineInstr *)i, *v21, *(const llvm::TargetInstrInfo **)(a1 + 248), v23);
                    if (v19 == v24)
                    {
                      uint64_t v25 = (unsigned __int16 ***)v19;
                    }
                    else
                    {
                      uint64_t v25 = 0;
                      if (v19 && v24)
                      {
                        uint64_t v26 = *((void *)v23 + 30);
                        unint64_t v27 = (unint64_t)(*((void *)v23 + 31) - v26) >> 3;
                        if (v27)
                        {
                          unsigned int v28 = 0;
                          unsigned int v29 = *(_DWORD **)(v24 + 8);
                          uint64_t v30 = *(_DWORD **)(v19 + 8);
                          while (1)
                          {
                            unsigned int v31 = *v29 & *v30;
                            if (v31) {
                              break;
                            }
                            uint64_t v25 = 0;
                            ++v29;
                            ++v30;
                            v28 += 32;
                            if (v28 >= v27) {
                              goto LABEL_42;
                            }
                          }
                          uint64_t v25 = *(unsigned __int16 ****)(v26 + 8 * (__clz(__rbit32(v31)) + v28));
                        }
                        else
                        {
                          uint64_t v25 = 0;
                        }
                      }
                    }
LABEL_42:
                    ++v21;
                    uint64_t v19 = (uint64_t)v25;
                  }
                  while (v21 != v22);
                }
                else
                {
                  uint64_t v25 = (unsigned __int16 ***)v18;
                }
                llvm::RegScavenger::getRegsAvailable(v154, v25, (uint64_t)&v134);
                uint64_t v32 = v135;
                if (v148 >= v135) {
                  uint64_t v33 = v135;
                }
                else {
                  uint64_t v33 = v148;
                }
                unsigned int v34 = (uint64_t *)v134;
                if (v33)
                {
                  uint64_t v35 = (uint64_t *)v147;
                  int64x2_t v36 = v134;
                  do
                  {
                    uint64_t v37 = *v35++;
                    *v36++ &= ~v37;
                    --v33;
                  }
                  while (v33);
                }
                if (v140 >= v32) {
                  uint64_t v38 = v32;
                }
                else {
                  uint64_t v38 = v140;
                }
                uint64_t v6 = v17;
                if (v38)
                {
                  int v39 = (uint64_t *)v139;
                  uint64_t v40 = v34;
                  do
                  {
                    uint64_t v41 = *v39++;
                    *v40++ &= ~v41;
                    --v38;
                  }
                  while (v38);
                }
                if (v32)
                {
                  unint64_t v42 = 0;
                  uint64_t v43 = 8 * v32;
                  while (!v34[v42 / 8])
                  {
                    v42 += 8;
                    if (v43 == v42) {
                      goto LABEL_61;
                    }
                  }
                  if (v138)
                  {
                    uint64_t v45 = 0;
                    uint64_t v46 = (v138 - 1) & 0xFFFFFFC0;
                    while (1)
                    {
                      uint64_t v48 = *v34++;
                      uint64_t v47 = v48;
                      unint64_t v49 = v46 == v45 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v138 : -1;
                      unint64_t v50 = v49 & v47;
                      if (v50) {
                        break;
                      }
                      v45 += 64;
                      if (v46 + 64 == v45) {
                        goto LABEL_69;
                      }
                    }
                    unsigned int v51 = __clz(__rbit64(v50)) + v45;
                  }
                  else
                  {
LABEL_69:
                    unsigned int v51 = -1;
                  }
                  if (v145 >= (unint64_t)HIDWORD(v145)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_DWORD *)v144 + v145) = v51;
                  LODWORD(v145) = v145 + 1;
                  sub_1CBAA47EC((uint64_t *)&v130, v51, *(void *)(a1 + 256));
                  unsigned int v52 = v133;
                  if (v143 < v133)
                  {
                    uint64_t v53 = v140;
                    if ((v143 & 0x3F) != 0) {
                      *((void *)v139 + v140 - 1) &= ~(-1 << (v143 & 0x3F));
                    }
                    unsigned int v54 = v53;
                    unsigned int v143 = v52;
                    unsigned int v55 = v52 + 63;
                    if (v53 != (v52 + 63) >> 6)
                    {
                      uint64_t v56 = v55 >> 6;
                      if (v53 > v56)
                      {
                        unsigned int v140 = v55 >> 6;
                        unsigned int v54 = v55 >> 6;
                      }
                      else
                      {
                        if (v56 > v141) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        if (v56 != v53) {
                          bzero((char *)v139 + 8 * v53, 8 * (v56 - v53));
                        }
                        unsigned int v54 = v56;
                        unsigned int v140 = v56;
                        LOBYTE(v52) = v143;
                      }
                    }
                    int v57 = v52 & 0x3F;
                    if (v57) {
                      *((void *)v139 + v54 - 1) &= ~(-1 << v57);
                    }
                  }
                  uint64_t v58 = v131;
                  unsigned int v59 = (uint64_t *)v130;
                  if (v131)
                  {
                    unsigned int v60 = v139;
                    unsigned int v61 = (uint64_t *)v130;
                    do
                    {
                      uint64_t v62 = *v61++;
                      *v60++ |= v62;
                      --v58;
                    }
                    while (v58);
                  }
                  if (v59 != &v132) {
                    free(v59);
                  }
                  char v44 = 0;
                  v122 += *(_DWORD *)(*(void *)(*(void *)(a1 + 256) + 264)
                                    + 24
                                    * (*((unsigned __int16 *)*v25 + 12)
                                     + *(_DWORD *)(*(void *)(a1 + 256) + 272)
                                     * ((*(void *)(*(void *)(a1 + 256) + 248)
                                                     - *(void *)(*(void *)(a1 + 256) + 240)) >> 3))) >> 5;
                  unsigned int v34 = (uint64_t *)v134;
                }
                else
                {
LABEL_61:
                  char v123 = 0;
                  char v44 = 1;
                }
                if (v34 != &v136) {
                  free(v34);
                }
                if (v44) {
                  break;
                }
                uint64_t v63 = (unsigned int *)(v16 + 32);
                while (v63 != v14)
                {
                  unsigned int v64 = *v63;
                  v63 += 8;
                  if (v64 <= 0xFFFFFFFD)
                  {
                    uint64_t v16 = (uint64_t)(v63 - 8);
                    goto LABEL_97;
                  }
                }
                uint64_t v16 = (uint64_t)v14;
LABEL_97:
                ;
              }
              while ((unsigned int *)v16 != v124);
              unsigned int v65 = v116;
              char v66 = v123;
              uint64_t v67 = v121;
              uint64_t v68 = v118;
              if (v123 & 1 | (v116 != 0))
              {
                int v69 = v122;
              }
              else
              {
                int v69 = v122;
                if (v151)
                {
                  unint64_t v70 = (uint64_t *)v150;
                  uint64_t v71 = 8 * v151;
                  unsigned int v72 = v150;
                  while (!*v72)
                  {
                    ++v72;
                    v71 -= 8;
                    if (!v71) {
                      goto LABEL_143;
                    }
                  }
                  if (v153)
                  {
                    uint64_t v73 = 0;
                    uint64_t v74 = (v153 - 1) & 0xFFFFFFC0;
                    while (1)
                    {
                      uint64_t v76 = *v70++;
                      uint64_t v75 = v76;
                      unint64_t v77 = v74 + v73 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v153;
                      unint64_t v78 = v77 & v75;
                      if (v78) {
                        break;
                      }
                      v73 -= 64;
                      if (v74 + v73 == -64) {
                        goto LABEL_143;
                      }
                    }
                    int v79 = __clz(__rbit64(v78));
                    if (v79 + 1 != v73)
                    {
                      unsigned int v65 = 0;
                      unsigned int v80 = v79 - v73;
                      while (1)
                      {
                        sub_1CBAA46A8((uint64_t)&v134, (llvm::MachineInstr *)i, v80, *(void *)(a1 + 256));
                        int v81 = (int)v135;
                        sub_1CBAA4B44((uint64_t *)&v134);
                        unsigned int v82 = v81 ? v65 : v80;
                        if (!v81) {
                          break;
                        }
                        unsigned int v83 = v80 + 1;
                        if (v80 + 1 != v153)
                        {
                          unsigned int v84 = v83 >> 6;
                          unsigned int v85 = v153 - 1;
                          if (v83 >> 6 <= (v153 - 1) >> 6)
                          {
                            uint64_t v86 = 0;
                            unsigned int v65 = v82;
                            uint64_t v87 = v85 >> 6;
                            int v89 = v83 & 0x3F;
                            BOOL v88 = v89 == 0;
                            unint64_t v90 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v89;
                            uint64_t v91 = v88 ? -1 : ~v90;
                            unint64_t v92 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v85;
                            unsigned int v93 = v84 << 6;
                            uint64_t v94 = v87 - v84;
                            int v95 = (char *)v150 + 8 * v84;
                            while (1)
                            {
                              uint64_t v96 = v86 ? -1 : v91;
                              unint64_t v97 = v94 == v86 ? v92 : -1;
                              unint64_t v98 = v96 & v97 & *(void *)&v95[8 * v86];
                              if (v98) {
                                break;
                              }
                              v93 += 64;
                              if (v94 + 1 == ++v86) {
                                goto LABEL_140;
                              }
                            }
                            unsigned int v80 = __clz(__rbit64(v98)) + v93;
                            if (v80 != -1) {
                              continue;
                            }
                          }
                        }
LABEL_140:
                        if (v65) {
                          goto LABEL_145;
                        }
                        goto LABEL_143;
                      }
                      unsigned int v65 = v80;
                      if (v80) {
                        goto LABEL_145;
                      }
                    }
                  }
                }
LABEL_143:
                llvm::RegScavenger::forward((uint64_t)v154);
                unsigned int v99 = sub_1CBAA048C(*(void *)(*(void *)(i + 24) + 32));
                if (v157 >= (unint64_t)HIDWORD(v157)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v100 = (char *)v156 + 16 * v157;
                *uint64_t v100 = v99;
                v100[1] = 0;
                LODWORD(v157) = v157 + 1;
                unsigned int v65 = llvm::RegScavenger::scavengeRegisterBackwards(v154, v114, (void *)i, 0, 0, 1);
LABEL_145:
                char v66 = 0;
              }
            }
            BOOL v101 = (int)(v117 >> 5) > v69;
            if ((v66 & (v65 != 0)) == 0) {
              BOOL v101 = v66;
            }
            uint64_t v119 = v6;
            if (v101)
            {
              unsigned int v102 = &v127[8 * v129];
              if (v128)
              {
                if (v129)
                {
                  uint64_t v103 = 32 * v129;
                  uint64_t v104 = v127;
                  while (*v104 >= 0xFFFFFFFE)
                  {
                    v104 += 8;
                    v103 -= 32;
                    if (!v103) {
                      goto LABEL_154;
                    }
                  }
                }
                else
                {
                  uint64_t v104 = v127;
                }
              }
              else
              {
LABEL_154:
                uint64_t v104 = &v127[8 * v129];
              }
              int v105 = &v127[8 * v129];
              if (v104 != v105)
              {
                unsigned int v106 = 0;
                do
                {
                  LODWORD(v134) = *v104;
                  unsigned int v135 = v137;
                  uint64_t v136 = 0x200000000;
                  if (v104[4]) {
                    sub_1CD41B6B0((uint64_t)&v135, (uint64_t)(v104 + 2));
                  }
                  unsigned int v107 = *((_DWORD *)v144 + v106);
                  (*(void (**)(void, llvm::MachineBasicBlock *, uint64_t, uint64_t, void))(**(void **)(a1 + 248) + 400))(*(void *)(a1 + 248), v126, i, i + 56, v107);
                  unsigned int v108 = (unsigned int *)v135;
                  if (v136)
                  {
                    uint64_t v109 = 4 * v136;
                    do
                    {
                      unsigned int v110 = *v108++;
                      llvm::MachineOperand::setReg(*(void *)(i + 32) + 32 * v110, v107);
                      v109 -= 4;
                    }
                    while (v109);
                    unsigned int v108 = (unsigned int *)v135;
                  }
                  if (v108 != (unsigned int *)v137) {
                    free(v108);
                  }
                  ++v106;
                  unsigned int v111 = v104 + 8;
                  while (v111 != v102)
                  {
                    unsigned int v112 = *v111;
                    v111 += 8;
                    if (v112 <= 0xFFFFFFFD)
                    {
                      uint64_t v104 = v111 - 8;
                      goto LABEL_172;
                    }
                  }
                  uint64_t v104 = v102;
LABEL_172:
                  ;
                }
                while (v104 != v105);
              }
            }
            else
            {
              llvm::MachineOperand::setReg(v68, v65);
              (*(void (**)(void, llvm::MachineBasicBlock *, void, uint64_t, uint64_t, void, uint64_t))(**(void **)(a1 + 248) + 400))(*(void *)(a1 + 248), v126, *(void *)(i + 8), i + 56, v67, v65, 1);
            }
            if (v139 != v142) {
              free(v139);
            }
            uint64_t v6 = v119;
            uint64_t v5 = v120;
            if (v144 != &v146) {
              free(v144);
            }
            if (v147 != &v149) {
              free(v147);
            }
            if (v150 != &v152) {
              free(v150);
            }
            if (v168 != v170) {
              free(v168);
            }
            if (v165 != v167) {
              free(v165);
            }
            if (v162 != v164) {
              free(v162);
            }
            if (v159 != v161) {
              free(v159);
            }
            if (v156 != v158) {
              free(v156);
            }
            sub_1CBAA4B44((uint64_t *)&v127);
            char v125 = 1;
          }
          else
          {
            sub_1CBAA4B44((uint64_t *)&v127);
          }
        }
        if ((*(unsigned char *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            uint64_t i = *(void *)(i + 8);
        }
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != v115);
  }
  return v125 & 1;
}

uint64_t sub_1CBAA46A8(uint64_t a1, llvm::MachineInstr *this, unsigned int a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t result = llvm::MachineInstr::getNumExplicitOperands((uint64_t)this);
  if (result != 1)
  {
    uint64_t v9 = 0;
    uint64_t v16 = (void *)(a4 + 8);
    uint64_t v10 = 1;
    uint64_t v11 = result;
    do
    {
      uint64_t v12 = *((void *)this + 4) + v9;
      if (!*(unsigned char *)(v12 + 32))
      {
        unsigned int v13 = *(_DWORD *)(v12 + 36);
        if (v13 && v13 != a3 && a3 - 1 <= 0x3FFFFFFE && v13 - 1 <= 0x3FFFFFFE)
        {
          uint64_t result = llvm::MCRegisterInfo::regsOverlap(v16, a3, v13);
          if (result)
          {
            unsigned int v17 = v13;
            uint64_t result = (uint64_t)sub_1CD41B344(a1, &v17);
            unint64_t v15 = *(unsigned int *)(result + 16);
            if (v15 >= *(unsigned int *)(result + 20)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*(void *)(result + 8) + 4 * v15) = v10;
            ++*(_DWORD *)(result + 16);
          }
        }
      }
      ++v10;
      v9 += 32;
    }
    while (v11 != v10);
  }
  return result;
}

void sub_1CBAA47EC(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a3 + 16);
  uint64_t v7 = (v6 + 63) >> 6;
  *a1 = (uint64_t)(a1 + 2);
  *((_DWORD *)a1 + 3) = 6;
  if ((v6 + 63) >= 0x1C0)
  {
    *((_DWORD *)a1 + 2) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v6 + 63) >= 0x40) {
    bzero(a1 + 2, 8 * v7);
  }
  *((_DWORD *)a1 + 2) = v7;
  *((_DWORD *)a1 + 16) = v6;
  uint64_t v8 = *(void *)(a3 + 8);
  unint64_t v9 = *(unsigned int *)(v8 + 24 * a2 + 16);
  __int16 v10 = v9 & 0xF;
  uint64_t v11 = (v9 >> 3) & 0x1FFFFFFE;
  uint64_t v13 = *(void *)(a3 + 48);
  uint64_t v12 = *(void *)(a3 + 56);
  unsigned int v14 = (_WORD *)(v12 + v11);
  unsigned __int16 v15 = *v14 + v10 * a2;
  do
  {
    int v16 = *(unsigned __int16 *)(v13 + 4 * v15);
    if (*(_WORD *)(v13 + 4 * v15))
    {
      int v17 = *(unsigned __int16 *)(v13 + 4 * v15 + 2);
      uint64_t v18 = *a1;
      do
      {
        int v19 = v16;
        int v16 = v17;
        if (v12)
        {
          uint64_t v20 = (unsigned __int16 *)(v12 + 2 * *(unsigned int *)(v8 + 24 * (unsigned __int16)v19 + 8));
          do
          {
            *(void *)(v18 + 8 * ((unsigned __int16)v19 >> 6)) |= 1 << v19;
            int v21 = *v20++;
            v19 += v21;
          }
          while (v21);
        }
        int v17 = 0;
      }
      while ((_WORD)v16);
    }
    int v22 = (unsigned __int16)v14[1];
    ++v14;
    v15 += v22;
  }
  while (v22);
}

_DWORD *sub_1CBAA492C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(int **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CBAA49F8(a1, v4, &v4[8 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 32 * v10;
    do
    {
      *uint64_t result = -1;
      result += 8;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

void sub_1CBAA49F8(uint64_t a1, int *a2, int *a3)
{
  int v4 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(_DWORD **)a1;
    uint64_t v8 = 32 * v6;
    do
    {
      *int v7 = -1;
      v7 += 8;
      v8 -= 32;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      int v9 = *v4;
      if (*v4 <= 0xFFFFFFFD)
      {
        int v10 = *(_DWORD *)(a1 + 16) - 1;
        uint64_t v11 = v10 & (37 * v9);
        uint64_t v12 = *(void *)a1 + 32 * v11;
        int v13 = *(_DWORD *)v12;
        if (v9 != *(_DWORD *)v12)
        {
          uint64_t v15 = 0;
          int v16 = 1;
          while (v13 != -1)
          {
            if (v15) {
              BOOL v17 = 0;
            }
            else {
              BOOL v17 = v13 == -2;
            }
            if (v17) {
              uint64_t v15 = v12;
            }
            int v18 = v11 + v16++;
            uint64_t v11 = v18 & v10;
            uint64_t v12 = *(void *)a1 + 32 * v11;
            int v13 = *(_DWORD *)v12;
            if (v9 == *(_DWORD *)v12) {
              goto LABEL_7;
            }
          }
          if (v15) {
            uint64_t v12 = v15;
          }
        }
LABEL_7:
        *(_DWORD *)uint64_t v12 = v9;
        *(void *)(v12 + 8) = v12 + 24;
        *(void *)(v12 + 16) = 0x200000000;
        if (v4[4]) {
          sub_1CD41B598(v12 + 8, (uint64_t)(v4 + 2));
        }
        ++*(_DWORD *)(a1 + 8);
        unsigned int v14 = (int *)*((void *)v4 + 1);
        if (v14 != v4 + 6) {
          free(v14);
        }
      }
      v4 += 8;
    }
    while (v4 != a3);
  }
}

uint64_t *sub_1CBAA4B44(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v5 = 32 * v2;
    uint64_t v6 = (void *)(v3 + 24);
    do
    {
      if (*((_DWORD *)v6 - 6) <= 0xFFFFFFFD)
      {
        int v7 = (void *)*(v6 - 2);
        if (v6 != v7)
        {
          uint64_t v8 = v6;
          uint64_t v9 = v5;
          free(v7);
          uint64_t v6 = v8;
          uint64_t v5 = v9;
        }
      }
      v6 += 4;
      v5 -= 32;
    }
    while (v5);
    uint64_t v3 = *a1;
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  return a1;
}

void sub_1CBAA4BCC(uint64_t a1)
{
}

uint64_t sub_1CBAA4C7C(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if ((**(unsigned char **)(a2 + 360) & 0x10) != 0 || !byte_1EBCBFE30) {
    return v2;
  }
  uint64_t v5 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_29:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::TargetPassConfig::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_29;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::TargetPassConfig::ID);
  int v10 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v11 == v12)
  {
LABEL_9:
    uint64_t v13 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v11 != &unk_1EA61EFE3)
    {
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_9;
      }
    }
    uint64_t v13 = *(void *)(v11 + 8);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 96))(v13, &unk_1EA61EFE3);
  if (word_1EBCBFE78)
  {
    if (byte_1EBCBFEF0) {
      goto LABEL_13;
    }
  }
  else if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 280))(v9))
  {
LABEL_13:
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v9 + 288))(&v24, v9);
    if (!*(unsigned char *)(v14 + 624))
    {
      sub_1CC6DE3E0(v14 + 248);
      uint64_t v22 = v24;
      uint64_t v24 = 0;
      uint64_t v23 = *(void *)(v14 + 448);
      *(void *)(v14 + 448) = v22;
      if (v23) {
        (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      }
      sub_1CC6DE1A0((uint64_t *)(v14 + 248), *(void **)(v14 + 616));
      *(unsigned char *)(v14 + 624) = 1;
    }
    uint64_t v15 = v24;
    uint64_t v24 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  if (*(_DWORD *)(*(void *)(a2 + 8) + 552)) {
    llvm::FunctionPass::skipFunction(a1, *(llvm::LLVMContextImpl *****)a2);
  }
  int v16 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  if (v17 == v18)
  {
LABEL_21:
    uint64_t v19 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v17 != &unk_1EA61EFE4)
    {
      v17 += 16;
      if (v17 == v18) {
        goto LABEL_21;
      }
    }
    uint64_t v19 = *(void *)(v17 + 8);
  }
  uint64_t v20 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v19 + 96))(v19, &unk_1EA61EFE4);
  sub_1CBA02330(v20);
  return sub_1CC6EB0C4();
}

uint64_t sub_1CBAA5020(uint64_t a1, llvm::IntegerType *****a2, uint64_t a3, uint64_t a4)
{
  uint64_t v311 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(llvm::IntegerType ******)(a1 + 32);
  uint64_t v8 = *(void *)(a4 + 8);
  uint64_t v9 = *(llvm::IntegerType ******)(v8 + 40);
  v282[0] = (llvm::IntegerType *****)a4;
  v282[1] = v9;
  v282[2] = a2;
  v282[3] = v7;
  v282[4] = 0;
  v282[5] = 0;
  v282[6] = (llvm::IntegerType *****)(*(uint64_t (**)(void))(**(void **)(v8 + 16) + 184))(*(void *)(v8 + 16));
  v282[7] = (llvm::IntegerType *****)(*(uint64_t (**)(void))(**(void **)(*(void *)(a4 + 8) + 16)
                                                                       + 176))(*(void *)(*(void *)(a4 + 8) + 16));
  uint64_t v10 = *(void *)(a4 + 8);
  uint64_t v11 = *(void *)(v10 + 40);
  unsigned int v12 = **(unsigned __int16 **)(a3 + 16);
  if (v12 > 0x106)
  {
    if (v12 - 491 < 8)
    {
      uint64_t v16 = *(void *)(a3 + 32);
      int v17 = *(_DWORD *)(v16 + 64);
      if ((_BYTE)v17) {
        return sub_1CBAB8F90((uint64_t *)v282, (llvm::MachineInstr *)a3);
      }
      uint64_t v18 = *(unsigned int *)(v16 + 68);
      uint64_t v19 = (uint64_t *)((v18 & 0x80000000) != 0
                      ? *(void *)(v11 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8
                      : *(void *)(v11 + 272) + 8 * v18);
      uint64_t v20 = *v19;
      if (!v20) {
        return sub_1CBAB8F90((uint64_t *)v282, (llvm::MachineInstr *)a3);
      }
      if ((*(unsigned char *)(v20 + 3) & 1) == 0)
      {
        uint64_t v20 = *(void *)(v20 + 24);
        if (!v20 || (*(unsigned char *)(v20 + 3) & 1) == 0) {
          return sub_1CBAB8F90((uint64_t *)v282, (llvm::MachineInstr *)a3);
        }
      }
      uint64_t v21 = *(void *)(v20 + 8);
      if (!v21 || **(_WORD **)(v21 + 16) != 19 || *(_DWORD *)(v21 + 40) != 2) {
        return sub_1CBAB8F90((uint64_t *)v282, (llvm::MachineInstr *)a3);
      }
      uint64_t v22 = *(unsigned int *)(*(void *)(v21 + 32) + 36);
      if ((v22 & 0x80000000) != 0) {
        uint64_t v23 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v22 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v23 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v22);
      }
      uint64_t v24 = *v23;
      if ((*(unsigned char *)(v24 + 3) & 1) == 0) {
        uint64_t v24 = *(void *)(v24 + 24);
      }
      uint64_t v25 = *(void *)(v24 + 8);
      if (**(_WORD **)(v25 + 16) != 318) {
        return sub_1CBAB8F90((uint64_t *)v282, (llvm::MachineInstr *)a3);
      }
      uint64_t v26 = *(void *)(v25 + 32);
      int v27 = *(_DWORD *)(v26 + 4);
      if (v27 < 0)
      {
        uint64_t v170 = v27 & 0x7FFFFFFF;
        int v28 = 519;
        if (v170 < *(_DWORD *)(v11 + 432))
        {
          if (*(void *)(*(void *)(v11 + 424) + 8 * v170) == 129) {
            int v28 = 263;
          }
          else {
            int v28 = 519;
          }
        }
      }
      else
      {
        int v28 = 519;
      }
      uint64_t v171 = *(void *)(v26 + 48) / 2;
      uint64_t v172 = *(void *)(v16 + 80);
      if (v172)
      {
        uint64_t v173 = *(void *)(v16 + 72);
        if (v173)
        {
          uint64_t v174 = *(void *)(v173 + 24);
          if (v174)
          {
            uint64_t v175 = *(void *)(v174 + 32);
            if (v175)
            {
              uint64_t v176 = *(void *)(v175 + 40);
              if ((v18 & 0x80000000) != 0) {
                int v177 = (void *)(*(void *)(v176 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
              }
              else {
                int v177 = (void *)(*(void *)(v176 + 272) + 8 * v18);
              }
              uint64_t v178 = *v177;
              uint64_t v179 = *(void *)(v16 + 88);
              if (*v177 == v16 + 64) {
                int v180 = v177;
              }
              else {
                int v180 = (void *)(v172 + 24);
              }
              *int v180 = v179;
              if (v179) {
                uint64_t v181 = v179;
              }
              else {
                uint64_t v181 = v178;
              }
              *(void *)(v181 + 16) = v172;
              *(void *)(v16 + 80) = 0;
              *(void *)(v16 + 88) = 0;
              int v17 = *(_DWORD *)(v16 + 64);
            }
          }
        }
      }
      *(_DWORD *)(v16 + 80) = 64;
      *(_DWORD *)(v16 + 88) = 0;
      *(_DWORD *)(v16 + 64) = v28 | v17 & 0xFFF00000;
      *(_DWORD *)(v16 + 68) = v171;
      return 1;
    }
    if (v12 - 263 < 4)
    {
      int v42 = sub_1CBAA7460(*(void *)(v10 + 40), (void *)a4, *(void *)(a3 + 32) + 32, *(void *)(a3 + 32) + 64, (uint64_t)a2);
      int v43 = v42 | sub_1CBAA7460(v11, (void *)a4, *(void *)(a3 + 32) + 96, *(void *)(a3 + 32) + 128, (uint64_t)a2);
      return v43 | sub_1CBAA7460(v11, (void *)a4, *(void *)(a3 + 32) + 160, *(void *)(a3 + 32) + 192, (uint64_t)a2);
    }
    if (v12 != 336) {
      return sub_1CBAB8F90((uint64_t *)v282, (llvm::MachineInstr *)a3);
    }
  }
  else
  {
    if (**(unsigned __int16 **)(a3 + 16) > 0x76u)
    {
      if (**(unsigned __int16 **)(a3 + 16) <= 0xA2u)
      {
        switch(**(_WORD **)(a3 + 16))
        {
          case 0x77:
            *(void *)(a4 + 40) = *(void *)(a3 + 24);
            *(void *)(a4 + 48) = a3;
            uint64_t v13 = *(void *)(a3 + 32);
            unsigned int v14 = *(_DWORD *)(v13 + 4);
            if ((v14 & 0x80000000) != 0 && (v14 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v11 + 432)) {
              unint64_t v15 = *(void *)(*(void *)(v11 + 424) + 8 * (v14 & 0x7FFFFFFF));
            }
            else {
              unint64_t v15 = 0;
            }
            unint64_t v309 = v15;
            uint64_t v92 = *(unsigned int *)(v13 + 36);
            if ((v92 & 0x80000000) != 0) {
              unsigned int v93 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v92 & 0x7FFFFFFF) + 8);
            }
            else {
              unsigned int v93 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v92);
            }
            uint64_t v94 = *v93;
            if (v94
              && ((*(unsigned char *)(v94 + 3) & 1) != 0 || (uint64_t v94 = *(void *)(v94 + 24)) != 0 && (*(unsigned char *)(v94 + 3) & 1) != 0))
            {
              uint64_t v95 = *(void *)(v94 + 8);
            }
            else
            {
              uint64_t v95 = 0;
            }
            uint64_t v96 = sub_1CB8F1DC4(&v309);
            if (v97 == 1)
            {
              uint64_t v272 = v96;
              uint64_t v96 = v272;
            }
            int v98 = **(unsigned __int16 **)(v95 + 16);
            if (v96 == 16 && v98 == 318)
            {
              LODWORD(v283) = v14;
              LODWORD(v284) = 1;
              unsigned int v99 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void, void, void))(*(void *)a4 + 32))(a4, 318, &v283, 1, 0, 0, 0);
              BOOL v101 = v100;
              uint64_t v102 = *(void *)(*(void *)(v95 + 32) + 48);
              LODWORD(v296) = 1;
              *((void *)&v296 + 1) = 0;
              *(void *)&long long v297 = v102;
              uint64_t v103 = (const llvm::MachineOperand *)&v296;
LABEL_120:
              llvm::MachineInstr::addOperand(v101, v99, v103);
              goto LABEL_296;
            }
            if (v98 != 320) {
              goto LABEL_271;
            }
            if (**(_WORD **)(a3 + 16) != 119) {
              goto LABEL_66;
            }
            if (sub_1CBAB06C0((uint64_t)v282, *(_DWORD *)(*(void *)(a3 + 32) + 36)))
            {
              LODWORD(v296) = v14;
              DWORD2(v296) = 1;
              unsigned int v99 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, void, void, void))(*(void *)a4 + 32))(a4, 320, &v296, 1, 0, 0, 0);
              BOOL v101 = v134;
              uint64_t v103 = (const llvm::MachineOperand *)(*(void *)(v95 + 32) + 32);
              goto LABEL_120;
            }
            int v98 = **(unsigned __int16 **)(v95 + 16);
LABEL_271:
            if (v98 == 116)
            {
              if (sub_1CBAB06C0((uint64_t)v282, *(_DWORD *)(*(void *)(a3 + 32) + 36)))
              {
                uint64_t v205 = *(unsigned int *)(v95 + 40);
                if (v205)
                {
                  uint64_t v206 = 0;
                  unsigned int v207 = *(unsigned __int8 **)(v95 + 32);
                  while (1)
                  {
                    int v208 = *v207;
                    v207 += 32;
                    if (v208 == 17) {
                      break;
                    }
                    if (v205 == ++v206) {
                      goto LABEL_288;
                    }
                  }
                }
                else
                {
LABEL_288:
                  LODWORD(v206) = -1;
                }
                int v209 = *(_DWORD *)(*(void *)(v95 + 32) + 32 * v206 + 16);
                if (v209 == 2579 || v209 == 2488)
                {
                  ((void (*)(llvm::IntegerType *****, uint64_t))(*a2)[4])(a2, v95);
                  llvm::MachineOperand::setReg(*(void *)(v95 + 32), v14);
                  ((void (*)(llvm::IntegerType *****, uint64_t))(*a2)[5])(a2, v95);
                  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
                  return 1;
                }
              }
              goto LABEL_66;
            }
            if (v98 != 313) {
              goto LABEL_66;
            }
            uint64_t v195 = *(unsigned int *)(*(void *)(v95 + 32) + 4);
            uint64_t v196 = (uint64_t *)((v195 & 0x80000000) != 0
                             ? *(void *)(v11 + 24) + 16 * (v195 & 0x7FFFFFFF) + 8
                             : *(void *)(v11 + 272) + 8 * v195);
            uint64_t v197 = *v196;
            if (!v197) {
              goto LABEL_66;
            }
            while ((*(unsigned char *)(v197 + 3) & 1) != 0)
            {
              uint64_t v197 = *(void *)(v197 + 24);
              if (!v197) {
                goto LABEL_66;
              }
            }
            while (1)
            {
              uint64_t v197 = *(void *)(v197 + 24);
              if (!v197) {
                break;
              }
              if ((*(unsigned char *)(v197 + 3) & 1) == 0) {
                goto LABEL_66;
              }
            }
            int v198 = sub_1CBAA7360(&v309, v95, 1u, *(void *)(v11 + 424), *(_DWORD *)(v11 + 432), (void *)a4);
            int v199 = sub_1CBAA7360(&v309, v95, 3u, *(void *)(v11 + 424), *(_DWORD *)(v11 + 432), (void *)a4);
            uint64_t v200 = *(unsigned __int16 *)(v95 + 44) | 0x100000000;
            LODWORD(v283) = v14;
            LODWORD(v284) = 1;
            LODWORD(v296) = v198;
            LODWORD(v297) = 0;
            DWORD2(v297) = v199;
            LODWORD(v299) = 0;
            v201 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)a4 + 32);
            uint64_t v202 = a4;
            uint64_t v203 = 47;
LABEL_282:
            uint64_t v204 = 2;
            goto LABEL_295;
          case 0x7E:
            goto LABEL_65;
          case 0x7F:
            int v81 = *(_DWORD *)(*(void *)(a3 + 32) + 4);
            if (v81 < 0 && (uint64_t v82 = v81 & 0x7FFFFFFF, v82 < *(_DWORD *)(v11 + 432))) {
              unint64_t v83 = *(void *)(*(void *)(v11 + 424) + 8 * v82);
            }
            else {
              unint64_t v83 = 0;
            }
            unint64_t v281 = v83;
            if (sub_1CBAAF87C((uint64_t *)v282, a3, &v281)) {
              return 1;
            }
            uint64_t v104 = *(unsigned int *)(*(void *)(a3 + 32) + 4);
            *(void *)(a4 + 40) = *(void *)(a3 + 24);
            *(void *)(a4 + 48) = a3;
            if ((v104 & 0x80000000) != 0) {
              int v105 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v104 & 0x7FFFFFFF) + 8);
            }
            else {
              int v105 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v104);
            }
            uint64_t v106 = *v105;
            if (!v106) {
              goto LABEL_128;
            }
            while ((*(unsigned char *)(v106 + 3) & 1) != 0)
            {
              uint64_t v106 = *(void *)(v106 + 24);
              if (!v106) {
                goto LABEL_128;
              }
            }
            uint64_t v135 = *(void *)(v106 + 8);
LABEL_159:
            uint64_t v136 = v135;
            if (**(_WORD **)(v135 + 16) == 45)
            {
              uint64_t v137 = *(void *)(v135 + 32);
              uint64_t v138 = *(unsigned int *)(v137 + 36);
              if ((v138 & 0x80000000) != 0) {
                uint64_t v139 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v138 & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v139 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v138);
              }
              uint64_t v140 = *v139;
              if ((*(unsigned char *)(v140 + 3) & 1) == 0) {
                uint64_t v140 = *(void *)(v140 + 24);
              }
              if (**(_WORD **)(*(void *)(v140 + 8) + 16) == 269) {
                goto LABEL_134;
              }
              uint64_t v141 = *(unsigned int *)(v137 + 68);
              if ((v141 & 0x80000000) != 0) {
                unsigned int v142 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v141 & 0x7FFFFFFF) + 8);
              }
              else {
                unsigned int v142 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v141);
              }
              uint64_t v143 = *v142;
              if ((*(unsigned char *)(v143 + 3) & 1) == 0) {
                uint64_t v143 = *(void *)(v143 + 24);
              }
              if (**(_WORD **)(*(void *)(v143 + 8) + 16) == 269) {
                goto LABEL_134;
              }
            }
            while (1)
            {
              uint64_t v106 = *(void *)(v106 + 24);
              if (!v106) {
                break;
              }
              if ((*(unsigned char *)(v106 + 3) & 1) == 0)
              {
                uint64_t v135 = *(void *)(v106 + 8);
                if (v135 != v136) {
                  goto LABEL_159;
                }
              }
            }
LABEL_128:
            unsigned int v107 = (uint64_t *)((v104 & 0x80000000) != 0
                             ? *(void *)(v11 + 24) + 16 * (v104 & 0x7FFFFFFF) + 8
                             : *(void *)(v11 + 272) + 8 * v104);
            uint64_t v108 = *v107;
            if (!v108) {
              goto LABEL_134;
            }
            if ((*(unsigned char *)(v108 + 3) & 1) == 0)
            {
              uint64_t v108 = *(void *)(v108 + 24);
              if (!v108 || (*(unsigned char *)(v108 + 3) & 1) == 0) {
                goto LABEL_134;
              }
            }
            uint64_t v109 = *(void *)(v108 + 8);
            if (!v109) {
              goto LABEL_134;
            }
            if (**(_WORD **)(v109 + 16) != 127) {
              goto LABEL_134;
            }
            if (*(_DWORD *)(v109 + 40) != 3) {
              goto LABEL_134;
            }
            uint64_t v182 = *(void *)(v109 + 32);
            uint64_t v183 = *(unsigned int *)(v182 + 36);
            sub_1CC73C210(*(_DWORD *)(v182 + 68), v11, (uint64_t)&v296);
            if (!(_BYTE)v297) {
              goto LABEL_134;
            }
            if (DWORD2(v296) >= 0x41) {
              goto LABEL_417;
            }
            if ((v183 & 0x80000000) != 0) {
              int v184 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v183 & 0x7FFFFFFF) + 8);
            }
            else {
              int v184 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v183);
            }
            uint64_t v185 = *v184;
            if (!v185) {
              goto LABEL_134;
            }
            while ((*(unsigned char *)(v185 + 3) & 1) != 0)
            {
              uint64_t v185 = *(void *)(v185 + 24);
              if (!v185) {
                goto LABEL_134;
              }
            }
            int64_t v219 = (uint64_t)((void)v296 << -(uint64_t)DWORD2(v296)) >> -(uint64_t)DWORD2(v296);
            while (1)
            {
              uint64_t v185 = *(void *)(v185 + 24);
              if (!v185) {
                break;
              }
              if ((*(unsigned char *)(v185 + 3) & 1) == 0) {
                goto LABEL_134;
              }
            }
            if ((v183 & 0x80000000) != 0) {
              v220 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v183 & 0x7FFFFFFF) + 8);
            }
            else {
              v220 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v183);
            }
            uint64_t v221 = *v220;
            if (!v221) {
              goto LABEL_314;
            }
            if ((*(unsigned char *)(v221 + 3) & 1) == 0)
            {
              uint64_t v221 = *(void *)(v221 + 24);
              if (!v221 || (*(unsigned char *)(v221 + 3) & 1) == 0) {
                goto LABEL_314;
              }
            }
            uint64_t v222 = *(void *)(v221 + 8);
            if (!v222 || **(_WORD **)(v222 + 16) != 45 || *(_DWORD *)(v222 + 40) != 3) {
              goto LABEL_314;
            }
            uint64_t v223 = *(void *)(v222 + 32);
            unsigned int v224 = *(_DWORD *)(v223 + 36);
            sub_1CC73C210(*(_DWORD *)(v223 + 68), v11, (uint64_t)&v296);
            if (!(_BYTE)v297) {
              goto LABEL_313;
            }
            if (DWORD2(v296) < 0x41)
            {
              uint64_t v230 = (uint64_t)((void)v296 << -(uint64_t)DWORD2(v296)) >> -(uint64_t)DWORD2(v296);
              goto LABEL_332;
            }
            if ((void)v296) {
              MEMORY[0x1D25D9CB0](v296, 0x1000C8000313F17);
            }
LABEL_313:
            sub_1CC73C210(*(_DWORD *)(*(void *)(v222 + 32) + 36), v11, (uint64_t)&v296);
            if ((_BYTE)v297)
            {
              if (DWORD2(v296) < 0x41)
              {
                uint64_t v230 = (uint64_t)((void)v296 << -(uint64_t)DWORD2(v296)) >> -(uint64_t)DWORD2(v296);
                unsigned int v224 = *(_DWORD *)(*(void *)(v222 + 32) + 68);
LABEL_332:
                if (v219 > 4) {
                  goto LABEL_134;
                }
                goto LABEL_357;
              }
              if ((void)v296) {
                MEMORY[0x1D25D9CB0](v296, 0x1000C8000313F17);
              }
            }
LABEL_314:
            if ((v183 & 0x80000000) != 0) {
              v225 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v183 & 0x7FFFFFFF) + 8);
            }
            else {
              v225 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v183);
            }
            uint64_t v226 = *v225;
            if (!v226) {
              goto LABEL_134;
            }
            if ((*(unsigned char *)(v226 + 3) & 1) == 0)
            {
              uint64_t v226 = *(void *)(v226 + 24);
              if (!v226 || (*(unsigned char *)(v226 + 3) & 1) == 0) {
                goto LABEL_134;
              }
            }
            uint64_t v227 = *(void *)(v226 + 8);
            if (!v227 || **(_WORD **)(v227 + 16) != 66 || *(_DWORD *)(v227 + 40) != 3) {
              goto LABEL_134;
            }
            uint64_t v228 = *(void *)(v227 + 32);
            unsigned int v224 = *(_DWORD *)(v228 + 36);
            sub_1CC73C210(*(_DWORD *)(v228 + 68), v11, (uint64_t)&v296);
            if (!(_BYTE)v297) {
              goto LABEL_322;
            }
            uint64_t v229 = v11;
            if (DWORD2(v296) >= 0x41)
            {
              if ((void)v296) {
                MEMORY[0x1D25D9CB0](v296, 0x1000C8000313F17);
              }
LABEL_322:
              uint64_t v229 = v11;
              sub_1CC73C210(*(_DWORD *)(*(void *)(v227 + 32) + 36), v11, (uint64_t)&v296);
              if (!(_BYTE)v297) {
                goto LABEL_134;
              }
              if (DWORD2(v296) >= 0x41)
              {
LABEL_417:
                if ((void)v296) {
                  MEMORY[0x1D25D9CB0](v296, 0x1000C8000313F17);
                }
                goto LABEL_134;
              }
              uint64_t v230 = (uint64_t)((void)v296 << -(uint64_t)DWORD2(v296)) >> -(uint64_t)DWORD2(v296);
              unsigned int v224 = *(_DWORD *)(*(void *)(v227 + 32) + 68);
            }
            else
            {
              uint64_t v230 = (uint64_t)((void)v296 << -(uint64_t)DWORD2(v296)) >> -(uint64_t)DWORD2(v296);
            }
            uint64_t v11 = v229;
            if (v219 >= 5) {
              goto LABEL_134;
            }
LABEL_357:
            if ((v224 & 0x80000000) != 0) {
              int v244 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v224 & 0x7FFFFFFF) + 8);
            }
            else {
              int v244 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v224);
            }
            uint64_t v245 = *v244;
            if (!v245) {
              goto LABEL_363;
            }
            if ((*(unsigned char *)(v245 + 3) & 1) == 0)
            {
              uint64_t v245 = *(void *)(v245 + 24);
              if (!v245 || (*(unsigned char *)(v245 + 3) & 1) == 0) {
                goto LABEL_363;
              }
            }
            uint64_t v246 = *(void *)(v245 + 8);
            if (!v246) {
              goto LABEL_363;
            }
            if (**(_WORD **)(v246 + 16) != 127) {
              goto LABEL_363;
            }
            if (*(_DWORD *)(v246 + 40) != 3) {
              goto LABEL_363;
            }
            sub_1CC73C210(*(_DWORD *)(*(void *)(v246 + 32) + 68), v11, (uint64_t)&v296);
            if (!(_BYTE)v297) {
              goto LABEL_363;
            }
            if (DWORD2(v296) >= 0x41)
            {
              if ((void)v296) {
                MEMORY[0x1D25D9CB0](v296, 0x1000C8000313F17);
              }
              goto LABEL_363;
            }
            if (((uint64_t)((void)v296 << -(uint64_t)DWORD2(v296)) >> -(uint64_t)DWORD2(v296)) + v219 <= 4)
            {
LABEL_363:
              *(_WORD *)(a3 + 44) &= 0xE7FFu;
              unint64_t v283 = v281;
              LODWORD(v284) = 0;
              LODWORD(v296) = v224;
              LODWORD(v297) = 0;
              unint64_t v309 = v281;
              int v310 = 0;
              v247 = (llvm::LLVMContext *)(unsigned __int16)(v281 >> 3);
              uint64_t v248 = (llvm::LLVMContext *)(unsigned __int16)(v281 >> 19);
              if ((v281 & 2) == 0) {
                uint64_t v248 = (llvm::LLVMContext *)(v281 >> 19);
              }
              if ((v281 & 4) != 0) {
                v247 = v248;
              }
              if (v281) {
                int v249 = (llvm::LLVMContext *)(v281 >> 3);
              }
              else {
                int v249 = v247;
              }
              unint64_t v250 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), v249);
              v251 = llvm::ConstantInt::get(v250, v219, (const llvm::APInt *)1);
              *((void *)&v297 + 1) = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)a4 + 16))(a4, &v309, v251);
              uint64_t v298 = v252;
              LODWORD(v299) = 1;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 127, &v283, 1, &v296, 2, *(unsigned __int16 *)(a3 + 44) | 0x100000000);
              if ((v183 & 0x80000000) != 0) {
                BOOL v254 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v183 & 0x7FFFFFFF) + 8);
              }
              else {
                BOOL v254 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v183);
              }
              uint64_t v255 = *v254;
              if ((*(unsigned char *)(v255 + 3) & 1) == 0) {
                uint64_t v255 = *(void *)(v255 + 24);
              }
              uint64_t v256 = **(unsigned __int16 **)(*(void *)(v255 + 8) + 16);
              LODWORD(v283) = v104;
              LODWORD(v284) = 1;
              LODWORD(v296) = *(_DWORD *)(*(void *)(v253 + 32) + 4);
              LODWORD(v297) = 0;
              unint64_t v309 = v281;
              int v310 = 0;
              unint64_t v257 = v230 << v219;
              if (v281)
              {
                unint64_t v258 = (v281 >> 3);
              }
              else if ((v281 & 4) != 0)
              {
                if ((v281 & 2) != 0) {
                  unint64_t v258 = (unsigned __int16)(v281 >> 19);
                }
                else {
                  unint64_t v258 = (v281 >> 19);
                }
              }
              else
              {
                unint64_t v258 = (unsigned __int16)(v281 >> 3);
              }
              int v259 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), (llvm::LLVMContext *)v258);
              uint64_t v260 = llvm::ConstantInt::get(v259, v257, (const llvm::APInt *)1);
              *((void *)&v297 + 1) = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)a4 + 16))(a4, &v309, v260);
              uint64_t v298 = v261;
              LODWORD(v299) = 1;
              uint64_t v200 = *(unsigned __int16 *)(a3 + 44) | 0x100000000;
              v201 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)a4 + 32);
              uint64_t v202 = a4;
              uint64_t v203 = v256;
              goto LABEL_282;
            }
LABEL_134:
            if (sub_1CD2C1210(v282, (llvm::MachineInstr *)a3)) {
              return 1;
            }
            break;
          case 0x80:
            if ((sub_1CD2C1210(v282, (llvm::MachineInstr *)a3) & 1) == 0) {
              return sub_1CBAB8F90((uint64_t *)v282, (llvm::MachineInstr *)a3);
            }
            return 1;
          default:
            return sub_1CBAB8F90((uint64_t *)v282, (llvm::MachineInstr *)a3);
        }
        return sub_1CBAB8F90((uint64_t *)v282, (llvm::MachineInstr *)a3);
      }
      if (v12 != 163)
      {
        if (v12 == 193)
        {
          *(void *)(a4 + 40) = *(void *)(a3 + 24);
          *(void *)(a4 + 48) = a3;
          unsigned int v84 = *(_DWORD **)(a3 + 32);
          int v85 = v84[1];
          if (v85 < 0 && (v85 & 0x7FFFFFFFu) < *(_DWORD *)(v11 + 432)) {
            uint64_t v86 = *(void *)(*(void *)(v11 + 424) + 8 * (v85 & 0x7FFFFFFF));
          }
          else {
            uint64_t v86 = 0;
          }
          uint64_t v110 = 0x7FFFFF800000000;
          if ((v86 & 4) == 0) {
            uint64_t v110 = 0x7FFFFF80000;
          }
          if ((v110 & v86) == 0)
          {
            int v111 = v84[17];
            int v112 = v84[9];
            unint64_t v283 = 513;
            LODWORD(v284) = 0;
            LODWORD(v296) = v112;
            LODWORD(v297) = 0;
            uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 80, &v283, 1, &v296, 1, 0);
            unint64_t v283 = 257;
            LODWORD(v284) = 0;
            *(void *)&long long v296 = v113;
            *((void *)&v296 + 1) = v114;
            LODWORD(v297) = 1;
            uint64_t v115 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 119, &v283, 1, &v296, 1, 0);
            uint64_t v117 = v116;
            unint64_t v283 = 257;
            LODWORD(v284) = 0;
            LODWORD(v296) = v111;
            LODWORD(v297) = 0;
            uint64_t v118 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 119, &v283, 1, &v296, 1, 0);
            unint64_t v283 = 257;
            LODWORD(v284) = 0;
            *(void *)&long long v296 = v115;
            *((void *)&v296 + 1) = v117;
            LODWORD(v297) = 1;
            *((void *)&v297 + 1) = v118;
            uint64_t v298 = v119;
            LODWORD(v299) = 1;
            uint64_t v120 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 45, &v283, 1, &v296, 2, 0);
            unint64_t v283 = 513;
            LODWORD(v284) = 0;
            *(void *)&long long v296 = v120;
            *((void *)&v296 + 1) = v121;
            LODWORD(v297) = 1;
            uint64_t v122 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 126, &v283, 1, &v296, 1, 0);
            LODWORD(v283) = v85;
            LODWORD(v284) = 1;
            *(void *)&long long v296 = v122;
            *((void *)&v296 + 1) = v123;
            LODWORD(v297) = 1;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 81, &v283, 1, &v296, 1, 0);
            llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
            return 1;
          }
        }
        else if (v12 == 260)
        {
          *(void *)(a4 + 40) = *(void *)(a3 + 24);
          *(void *)(a4 + 48) = a3;
          uint64_t v45 = *(void *)(a3 + 32);
          unint64_t v46 = *(unsigned int *)(v45 + 36);
          if ((v46 & 0x80000000) != 0) {
            uint64_t v47 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v46 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v47 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v46);
          }
          uint64_t v48 = *v47;
          if (v48)
          {
            if (*(unsigned char *)(v48 + 3) & 1) != 0 || (uint64_t v48 = *(void *)(v48 + 24)) != 0 && (*(unsigned char *)(v48 + 3))
            {
              uint64_t v49 = *(void *)(v48 + 8);
              if (v49)
              {
                if (**(_WORD **)(v49 + 16) == 82 && *(_DWORD *)(v49 + 40) == 2) {
                  unint64_t v46 = *(unsigned int *)(*(void *)(v49 + 32) + 36);
                }
              }
            }
          }
          if (v46 >> 31) {
            unint64_t v50 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v46 & 0x7FFFFFFF) + 8);
          }
          else {
            unint64_t v50 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v46);
          }
          uint64_t v51 = *v50;
          if ((*(unsigned char *)(v51 + 3) & 1) == 0) {
            uint64_t v51 = *(void *)(v51 + 24);
          }
          uint64_t v52 = *(void *)(v51 + 8);
          if (**(_WORD **)(v52 + 16) == 78)
          {
            uint64_t v53 = *(void *)(v45 + 80) + 1;
            if (v53 < *(_DWORD *)(v52 + 40))
            {
              uint64_t v44 = 1;
              LODWORD(v283) = *(_DWORD *)(v45 + 4);
              LODWORD(v284) = 1;
              LODWORD(v296) = *(_DWORD *)(*(void *)(v52 + 32) + 32 * v53 + 4);
LABEL_64:
              LODWORD(v297) = 0;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 19, &v283, 1, &v296, 1, 0);
              llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
              return v44;
            }
          }
        }
        return sub_1CBAB8F90((uint64_t *)v282, (llvm::MachineInstr *)a3);
      }
      if ((sub_1CBAACE74((uint64_t *)v282, a3) & 1) == 0) {
        return sub_1CBAB8F90((uint64_t *)v282, (llvm::MachineInstr *)a3);
      }
      return 1;
    }
    if (**(unsigned __int16 **)(a3 + 16) > 0x33u)
    {
      if (v12 - 52 < 2)
      {
LABEL_65:
        *(void *)(a4 + 40) = *(void *)(a3 + 24);
        *(void *)(a4 + 48) = a3;
LABEL_66:
        if ((sub_1CBAB7848((uint64_t *)v282, a3) & 1) == 0) {
          return sub_1CBAB8F90((uint64_t *)v282, (llvm::MachineInstr *)a3);
        }
        return 1;
      }
      if (v12 != 65)
      {
        if (v12 == 116)
        {
          uint64_t v29 = *(unsigned int *)(a3 + 40);
          uint64_t v30 = *(void *)(a3 + 32);
          if (v29)
          {
            uint64_t v31 = 0;
            uint64_t v32 = *(unsigned __int8 **)(a3 + 32);
            while (1)
            {
              int v33 = *v32;
              v32 += 32;
              if (v33 == 17) {
                break;
              }
              if (v29 == ++v31) {
                goto LABEL_32;
              }
            }
          }
          else
          {
LABEL_32:
            LODWORD(v31) = -1;
          }
          if (*(_DWORD *)(v30 + 32 * v31 + 16) == 2131)
          {
            uint64_t v34 = *(unsigned int *)(v30 + 68);
            if ((v34 & 0x80000000) != 0) {
              uint64_t v35 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v35 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v34);
            }
            uint64_t v36 = *v35;
            if ((*(unsigned char *)(v36 + 3) & 1) == 0) {
              uint64_t v36 = *(void *)(v36 + 24);
            }
            int v37 = *(_DWORD *)(v30 + 4);
            uint64_t v38 = *(void *)(v36 + 8);
            int v39 = **(unsigned __int16 **)(v38 + 16);
            if ((v39 & 0xFFFE) == 0x74)
            {
              uint64_t v40 = *(unsigned int *)(v38 + 40);
              if (v40)
              {
                uint64_t v41 = (_DWORD *)(*(void *)(v38 + 32) + 16);
                while (*((unsigned char *)v41 - 16) != 17)
                {
                  v41 += 8;
                  if (!--v40) {
                    goto LABEL_254;
                  }
                }
                if (*v41 == 2131)
                {
                  *(void *)(a4 + 40) = *(void *)(a3 + 24);
                  *(void *)(a4 + 48) = a3;
                  uint64_t v44 = 1;
                  LODWORD(v283) = v37;
                  LODWORD(v284) = 1;
                  LODWORD(v296) = v34;
                  goto LABEL_64;
                }
              }
            }
LABEL_254:
            if ((v39 | 2) == 0x11E)
            {
              uint64_t v186 = (uint64_t *)((v34 & 0x80000000) != 0
                               ? *(void *)(v11 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8
                               : *(void *)(v11 + 272) + 8 * v34);
              uint64_t v187 = *v186;
              if (v187)
              {
                while ((*(unsigned char *)(v187 + 3) & 1) != 0)
                {
                  uint64_t v187 = *(void *)(v187 + 24);
                  if (!v187) {
                    return sub_1CBAB8F90((uint64_t *)v282, (llvm::MachineInstr *)a3);
                  }
                }
                while (1)
                {
                  uint64_t v187 = *(void *)(v187 + 24);
                  if (!v187) {
                    break;
                  }
                  if ((*(unsigned char *)(v187 + 3) & 1) == 0) {
                    return sub_1CBAB8F90((uint64_t *)v282, (llvm::MachineInstr *)a3);
                  }
                }
                if (v39 == 286) {
                  uint64_t v188 = 287;
                }
                else {
                  uint64_t v188 = 285;
                }
                *(void *)(a4 + 40) = *(void *)(a3 + 24);
                *(void *)(a4 + 48) = a3;
                LODWORD(v296) = v37;
                DWORD2(v296) = 1;
                uint64_t v189 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, void, void, void))(*(void *)a4 + 32))(a4, v188, &v296, 1, 0, 0, 0);
                if (*(_DWORD *)(v38 + 40) >= 2u)
                {
                  unsigned int v191 = (llvm::MachineFunction *)v189;
                  int v192 = v190;
                  unint64_t v193 = 1;
                  uint64_t v194 = 32;
                  do
                  {
                    llvm::MachineInstr::addOperand(v192, v191, (const llvm::MachineOperand *)(*(void *)(v38 + 32) + v194));
                    ++v193;
                    v194 += 32;
                  }
                  while (v193 < *(unsigned int *)(v38 + 40));
                }
LABEL_296:
                llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
                return 1;
              }
            }
          }
        }
        return sub_1CBAB8F90((uint64_t *)v282, (llvm::MachineInstr *)a3);
      }
      *(void *)(a4 + 40) = *(void *)(a3 + 24);
      *(void *)(a4 + 48) = a3;
      uint64_t v87 = *(_DWORD **)(a3 + 32);
      int v88 = v87[1];
      if (v88 < 0 && (v88 & 0x7FFFFFFFu) < *(_DWORD *)(v11 + 432)) {
        unint64_t v89 = *(void *)(*(void *)(v11 + 424) + 8 * (v88 & 0x7FFFFFFF));
      }
      else {
        unint64_t v89 = 0;
      }
      unint64_t v281 = v89;
      uint64_t v124 = v87[9];
      if ((v124 & 0x80000000) != 0) {
        char v125 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v124 & 0x7FFFFFFF) + 8);
      }
      else {
        char v125 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v124);
      }
      uint64_t v126 = *v125;
      if (v126
        && ((*(unsigned char *)(v126 + 3) & 1) != 0 || (uint64_t v126 = *(void *)(v126 + 24)) != 0 && (*(unsigned char *)(v126 + 3) & 1) != 0))
      {
        uint64_t v127 = *(void *)(v126 + 8);
      }
      else
      {
        uint64_t v127 = 0;
      }
      sub_1CC73C210(v87[17], v11, (uint64_t)&v296);
      if ((_BYTE)v297)
      {
        if (DWORD2(v296) >= 0x41)
        {
          if ((void)v296) {
            MEMORY[0x1D25D9CB0](v296, 0x1000C8000313F17);
          }
        }
        else if (v89 == 257)
        {
          unint64_t v128 = (uint64_t)((void)v296 << -(uint64_t)DWORD2(v296)) >> -(uint64_t)DWORD2(v296);
          int v129 = **(unsigned __int16 **)(v127 + 16);
          if (v129 == 318)
          {
            if (v128 == 0xFFFF)
            {
              *(void *)&long long v296 = 129;
              DWORD2(v296) = 0;
              unsigned int v130 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, void, void, void))(*(void *)a4 + 32))(a4, 318, &v296, 1, 0, 0, 0);
LABEL_153:
              uint64_t v132 = v130;
              unsigned int v133 = v131;
              llvm::MachineInstr::addOperand(v131, v130, (const llvm::MachineOperand *)(*(void *)(v127 + 32) + 32));
              LODWORD(v283) = v88;
              LODWORD(v284) = 1;
              *(void *)&long long v296 = v132;
              *((void *)&v296 + 1) = v133;
LABEL_224:
              LODWORD(v297) = 1;
              goto LABEL_294;
            }
            if (v128 <= 0xFFFE)
            {
              *(void *)&long long v296 = 129;
              DWORD2(v296) = 0;
              v210 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, void, void, void))(*(void *)a4 + 32))(a4, 318, &v296, 1, 0, 0, 0);
              v212 = v211;
              llvm::MachineInstr::addOperand(v211, v210, (const llvm::MachineOperand *)(*(void *)(v127 + 32) + 32));
              unint64_t v309 = 129;
              int v310 = 0;
              int v213 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), (llvm::LLVMContext *)0x10);
              uint64_t v214 = llvm::ConstantInt::get(v213, v128, (const llvm::APInt *)1);
              uint64_t v215 = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)a4 + 16))(a4, &v309, v214);
              unint64_t v283 = 129;
              LODWORD(v284) = 0;
              *(void *)&long long v296 = v210;
              *((void *)&v296 + 1) = v212;
              LODWORD(v297) = 1;
              *((void *)&v297 + 1) = v215;
              uint64_t v298 = v216;
              LODWORD(v299) = 1;
              uint64_t v217 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 65, &v283, 1, &v296, 2, 0);
              LODWORD(v283) = v88;
              LODWORD(v284) = 1;
              *(void *)&long long v296 = v217;
              *((void *)&v296 + 1) = v218;
              LODWORD(v297) = 1;
LABEL_294:
              v201 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)a4 + 32);
              uint64_t v202 = a4;
              uint64_t v203 = 126;
              uint64_t v200 = 0;
              uint64_t v204 = 1;
LABEL_295:
              v201(v202, v203, &v283, 1, &v296, v204, v200);
              goto LABEL_296;
            }
          }
          else if (v128 == 0xFFFF)
          {
            if ((v129 - 45) < 3 || v129 == 127)
            {
              if (sub_1CBAB06C0((uint64_t)v282, *(_DWORD *)(*(void *)(v127 + 32) + 4)))
              {
                unint64_t v283 = 129;
                LODWORD(v284) = 0;
                LODWORD(v296) = *(_DWORD *)(*(void *)(v127 + 32) + 36);
                LODWORD(v297) = 0;
                uint64_t v162 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 119, &v283, 1, &v296, 1, 0);
                uint64_t v164 = v163;
                unint64_t v283 = 129;
                LODWORD(v284) = 0;
                LODWORD(v296) = *(_DWORD *)(*(void *)(v127 + 32) + 68);
                LODWORD(v297) = 0;
                uint64_t v165 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 119, &v283, 1, &v296, 1, 0);
                uint64_t v166 = **(unsigned __int16 **)(v127 + 16);
                unint64_t v283 = 129;
                LODWORD(v284) = 0;
                *(void *)&long long v296 = v162;
                *((void *)&v296 + 1) = v164;
                LODWORD(v297) = 1;
                *((void *)&v297 + 1) = v165;
                uint64_t v298 = v167;
                LODWORD(v299) = 1;
                uint64_t v168 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, v166, &v283, 1, &v296, 2, *(unsigned __int16 *)(v127 + 44) | 0x100000000);
                LODWORD(v283) = v88;
                LODWORD(v284) = 1;
                *(void *)&long long v296 = v168;
                *((void *)&v296 + 1) = v169;
                goto LABEL_224;
              }
              int v129 = **(unsigned __int16 **)(v127 + 16);
            }
            if (v129 == 320 && sub_1CBAB06C0((uint64_t)v282, *(_DWORD *)(*(void *)(v127 + 32) + 4)))
            {
              *(void *)&long long v296 = 129;
              DWORD2(v296) = 0;
              unsigned int v130 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, void, void, void))(*(void *)a4 + 32))(a4, 320, &v296, 1, 0, 0, 0);
              goto LABEL_153;
            }
          }
        }
      }
      if ((sub_1CBAAF87C((uint64_t *)v282, a3, &v281) & 1) == 0 && (sub_1CBAB8124((uint64_t *)v282, a3) & 1) == 0) {
        return sub_1CBAB8F90((uint64_t *)v282, (llvm::MachineInstr *)a3);
      }
      return 1;
    }
    if (v12 == 47)
    {
      *(void *)(a4 + 40) = *(void *)(a3 + 24);
      *(void *)(a4 + 48) = a3;
      if (**(_WORD **)(a3 + 16) == 47)
      {
        unsigned int v90 = *(_DWORD *)(*(void *)(a3 + 32) + 68);
        if ((v90 & 0x80000000) == 0
          || (v90 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v11 + 432)
          || *(void *)(*(void *)(v11 + 424) + 8 * (v90 & 0x7FFFFFFF)) != 513)
        {
          uint64_t v91 = sub_1CC73C210(v90, v11, (uint64_t)&v296);
          if ((_BYTE)v297)
          {
            if (DWORD2(v296) >= 0x41)
            {
              if ((void)v296) {
                MEMORY[0x1D25D9CB0](v296, 0x1000C8000313F17);
              }
              return sub_1CBAB8F90((uint64_t *)v282, (llvm::MachineInstr *)a3);
            }
            if (sub_1CD2C1F30(v91, a3, *(_DWORD *)(*(void *)(a3 + 32) + 36), (uint64_t)((void)v296 << -(uint64_t)DWORD2(v296)) >> -(uint64_t)DWORD2(v296), v11, a4))return 1; {
          }
            }
        }
      }
      return sub_1CBAB8F90((uint64_t *)v282, (llvm::MachineInstr *)a3);
    }
    if (v12 != 51) {
      return sub_1CBAB8F90((uint64_t *)v282, (llvm::MachineInstr *)a3);
    }
  }
  *(void *)(a4 + 40) = *(void *)(a3 + 24);
  *(void *)(a4 + 48) = a3;
  unsigned int v54 = *(_DWORD **)(a3 + 32);
  uint64_t v55 = v54[33];
  uint64_t v56 = v54[41];
  if ((v55 & 0x80000000) != 0) {
    int v57 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v55 & 0x7FFFFFFF) + 8);
  }
  else {
    int v57 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v55);
  }
  uint64_t v58 = *v57;
  if (!v58) {
    goto LABEL_391;
  }
  if (*(unsigned char *)(v58 + 3)) {
    goto LABEL_76;
  }
  uint64_t v58 = *(void *)(v58 + 24);
  if (!v58)
  {
    uint64_t v59 = 0;
    goto LABEL_77;
  }
  if (*(unsigned char *)(v58 + 3)) {
LABEL_76:
  }
    uint64_t v59 = *(void *)(v58 + 8);
  else {
LABEL_391:
  }
    uint64_t v59 = 0;
LABEL_77:
  if ((v56 & 0x80000000) != 0) {
    unsigned int v60 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v56 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v60 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v56);
  }
  unsigned int v61 = v54[1];
  uint64_t v62 = *v60;
  if ((*(unsigned char *)(v62 + 3) & 1) == 0) {
    uint64_t v62 = *(void *)(v62 + 24);
  }
  uint64_t v63 = v54[17];
  uint64_t v278 = v54[25];
  int v64 = v54[12];
  uint64_t v65 = **(unsigned __int16 **)(a3 + 16);
  int v66 = **(unsigned __int16 **)(v59 + 16);
  if (v66 != **(unsigned __int16 **)(*(void *)(v62 + 8) + 16) || v66 != 184 && v66 != 177) {
    goto LABEL_194;
  }
  uint64_t v67 = v11;
  uint64_t v274 = v59;
  unsigned int v276 = v61;
  uint64_t v68 = v56;
  uint64_t v69 = v63;
  uint64_t v70 = a3;
  uint64_t v71 = v11;
  uint64_t v72 = *(void *)(v62 + 8);
  char v73 = sub_1CBAA87B0(v61, v67);
  uint64_t v74 = v72;
  uint64_t v11 = v71;
  a3 = v70;
  LODWORD(v56) = v68;
  unsigned int v61 = v276;
  if ((v73 & 1) == 0)
  {
    uint64_t v63 = v69;
    BOOL v147 = (uint64_t *)((v55 & 0x80000000) != 0
                     ? *(void *)(v11 + 24) + 16 * (v55 & 0x7FFFFFFF) + 8
                     : *(void *)(v11 + 272) + 8 * v55);
    uint64_t v148 = *v147;
    if (v148)
    {
      while ((*(unsigned char *)(v148 + 3) & 1) != 0)
      {
        uint64_t v148 = *(void *)(v148 + 24);
        if (!v148) {
          goto LABEL_85;
        }
      }
      while (1)
      {
        uint64_t v148 = *(void *)(v148 + 24);
        if (!v148) {
          break;
        }
        if ((*(unsigned char *)(v148 + 3) & 1) == 0) {
          goto LABEL_85;
        }
      }
      uint64_t v149 = (uint64_t *)((v68 & 0x80000000) != 0
                       ? *(void *)(v11 + 24) + 16 * (v68 & 0x7FFFFFFF) + 8
                       : *(void *)(v11 + 272) + 8 * v68);
      uint64_t v150 = *v149;
      if (v150)
      {
        while ((*(unsigned char *)(v150 + 3) & 1) != 0)
        {
          uint64_t v150 = *(void *)(v150 + 24);
          if (!v150) {
            goto LABEL_85;
          }
        }
        while (1)
        {
          uint64_t v150 = *(void *)(v150 + 24);
          if (!v150) {
            break;
          }
          if ((*(unsigned char *)(v150 + 3) & 1) == 0) {
            goto LABEL_85;
          }
        }
LABEL_194:
        if ((v64 - 32) < 0xA) {
          return sub_1CBAB8F90((uint64_t *)v282, (llvm::MachineInstr *)a3);
        }
        uint64_t v277 = *(unsigned __int16 *)(a3 + 44);
        uint64_t v151 = *(void *)(v10 + 8);
        long long v152 = *(_OWORD *)(v151 + 1024);
        long long v296 = *(_OWORD *)(v151 + 1008);
        long long v297 = v152;
        uint64_t v153 = *(void *)(v151 + 1048);
        uint64_t v298 = *(void *)(v151 + 1040);
        uint64_t v299 = v153;
        uint64_t v154 = *(void *)(v151 + 1056);
        uint64_t v300 = v154;
        if (v154) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v154 + 8), 1uLL, memory_order_relaxed);
        }
        int v273 = v56;
        uint64_t v275 = v63;
        __int16 v301 = *(_WORD *)(v151 + 1064);
        unsigned int v155 = v61;
        if (*(char *)(v151 + 1095) < 0)
        {
          sub_1CB8BDF7C((uint64_t)&v302, *(const void **)(v151 + 1072), *(void *)(v151 + 1080));
        }
        else
        {
          long long v302 = *(_OWORD *)(v151 + 1072);
          uint64_t v303 = *(void *)(v151 + 1088);
        }
        long long v304 = *(_OWORD *)(v151 + 1096);
        long long v305 = *(_OWORD *)(v151 + 1112);
        sub_1CB906B78((uint64_t)&v306, (uint64_t *)(v151 + 1128));
        if (*(char *)(v151 + 1311) < 0)
        {
          sub_1CB8BDF7C((uint64_t)&v307, *(const void **)(v151 + 1288), *(void *)(v151 + 1296));
        }
        else
        {
          long long v307 = *(_OWORD *)(v151 + 1288);
          uint64_t v308 = *(void *)(v151 + 1304);
        }
        int v156 = BYTE12(v296) & 1;
        if (v65 == 51)
        {
          unsigned int v157 = (v277 >> 10) & 1;
          if ((~v277 & 0x3C0) != 0) {
            unsigned int v157 = 0;
          }
          if (!(v157 | v156)) {
            goto LABEL_218;
          }
        }
        else if (!(v156 | v277 & 0x10))
        {
          goto LABEL_218;
        }
        if ((v64 - 7) <= 1)
        {
          if (v64 == 7) {
            int v158 = v55;
          }
          else {
            int v158 = v273;
          }
          LODWORD(v309) = v155;
          int v310 = 1;
          LODWORD(v283) = v158;
          LODWORD(v285) = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)a4 + 32))(a4, 19, &v309, 1, &v283, 1, 0);
          goto LABEL_212;
        }
        if ((v278 & 0x80000000) != 0) {
          BOOL v159 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v278 & 0x7FFFFFFF) + 8);
        }
        else {
          BOOL v159 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v278);
        }
        uint64_t v160 = *v159;
        if ((*(unsigned char *)(v160 + 3) & 1) == 0) {
          uint64_t v160 = *(void *)(v160 + 24);
        }
        uint64_t v161 = *(void *)(v160 + 8);
        if (**(_WORD **)(v161 + 16) == 121)
        {
          uint64_t v231 = *(void *)(*(void *)(v161 + 32) + 48);
          if (v231)
          {
            uint64_t v232 = *(_UNKNOWN **)(v231 + 32) == &unk_1CFB2E344 ? *(void *)(v231 + 40) : v231 + 24;
            if ((*(unsigned char *)(v232 + 28) & 7) == 3)
            {
              v233 = (uint64_t *)((v275 & 0x80000000) != 0
                               ? *(void *)(v11 + 24) + 16 * (v275 & 0x7FFFFFFF) + 8
                               : *(void *)(v11 + 272) + 8 * v275);
              uint64_t v234 = *v233;
              if (v234)
              {
                while ((*(unsigned char *)(v234 + 3) & 1) != 0)
                {
                  uint64_t v234 = *(void *)(v234 + 24);
                  if (!v234) {
                    goto LABEL_218;
                  }
                }
                while (1)
                {
                  uint64_t v234 = *(void *)(v234 + 24);
                  if (!v234) {
                    break;
                  }
                  if ((*(unsigned char *)(v234 + 3) & 1) == 0) {
                    goto LABEL_218;
                  }
                }
                unsigned int v235 = v155;
                int v236 = v64;
                int v280 = 0;
                LODWORD(v281) = 0;
                if ((v275 & 0x80000000) != 0) {
                  v237 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v275 & 0x7FFFFFFF) + 8);
                }
                else {
                  v237 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v275);
                }
                uint64_t v238 = *v237;
                if (v238)
                {
                  if ((*(unsigned char *)(v238 + 3) & 1) != 0
                    || (uint64_t v238 = *(void *)(v238 + 24)) != 0 && (*(unsigned char *)(v238 + 3) & 1) != 0)
                  {
                    uint64_t v239 = *(void *)(v238 + 8);
                    if (v239)
                    {
                      if (**(_WORD **)(v239 + 16) == 163 && *(_DWORD *)(v239 + 40) == 3)
                      {
                        uint64_t v240 = *(void *)(v239 + 32);
                        int v241 = *(_DWORD *)(v240 + 36);
                        int v242 = *(_DWORD *)(v240 + 68);
                        int v280 = v242;
                        LODWORD(v281) = v241;
                        if (v242 < 0 && (v242 & 0x7FFFFFFFu) < *(_DWORD *)(v11 + 432)) {
                          unint64_t v243 = *(void *)(*(void *)(v11 + 424) + 8 * (v242 & 0x7FFFFFFF));
                        }
                        else {
                          unint64_t v243 = 0;
                        }
                        unint64_t v309 = v243;
                        int v310 = 0;
                        LODWORD(v283) = v242;
                        LODWORD(v285) = 0;
                        uint64_t v262 = v277 | 0x100000000;
                        uint64_t v263 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 177, &v309, 1, &v283, 1, v277 | 0x100000000);
                        LODWORD(v309) = v155;
                        int v310 = 1;
                        LODWORD(v283) = v64;
                        LODWORD(v285) = 2;
                        LODWORD(v286) = v281;
                        int v288 = 0;
                        uint64_t v289 = v263;
                        uint64_t v290 = v264;
                        int v291 = 1;
LABEL_448:
                        int v292 = v55;
                        int v293 = 0;
                        int v294 = v273;
                        int v295 = 0;
                        (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 51, &v309, 1, &v283, 5, v262);
LABEL_212:
                        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
                        sub_1CB906D7C((uint64_t)&v296);
                        return 1;
                      }
                    }
                  }
                }
                int v279 = 0;
                unint64_t v283 = (unint64_t)&v281;
                uint64_t v284 = &v280;
                v285 = &v279;
                LODWORD(v309) = v275;
                if (sub_1CBAA89D0((uint64_t)&v283, v11, (unsigned int *)&v309))
                {
                  if ((v281 & 0x80000000) != 0 && (v281 & 0x7FFFFFFF) < *(_DWORD *)(v11 + 432)) {
                    unint64_t v266 = *(void *)(*(void *)(v11 + 424) + 8 * (v281 & 0x7FFFFFFF));
                  }
                  else {
                    unint64_t v266 = 0;
                  }
                  unint64_t v309 = v266;
                  int v310 = 0;
                  LODWORD(v283) = v281;
                  LODWORD(v285) = 0;
                  LODWORD(v286) = v280;
                  int v288 = 0;
                  uint64_t v262 = v277 | 0x100000000;
                  uint64_t v267 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 165, &v309, 1, &v283, 2, v277 | 0x100000000);
                  uint64_t v269 = v268;
                  unint64_t v309 = v266;
                  int v310 = 0;
                  LODWORD(v283) = v279;
                  LODWORD(v285) = 0;
                  uint64_t v270 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 177, &v309, 1, &v283, 1, v277 | 0x100000000);
                  LODWORD(v309) = v235;
                  int v310 = 1;
                  LODWORD(v283) = v236;
                  LODWORD(v285) = 2;
                  uint64_t v286 = v267;
                  uint64_t v287 = v269;
                  int v288 = 1;
                  uint64_t v289 = v270;
                  uint64_t v290 = v271;
                  int v291 = 1;
                  goto LABEL_448;
                }
              }
            }
          }
        }
LABEL_218:
        sub_1CB906D7C((uint64_t)&v296);
        return sub_1CBAB8F90((uint64_t *)v282, (llvm::MachineInstr *)a3);
      }
    }
  }
LABEL_85:
  uint64_t v75 = *(void *)(v70 + 32);
  int v76 = *(_DWORD *)(v75 + 68);
  int v77 = *(_DWORD *)(v75 + 100);
  int v78 = *(_DWORD *)(*(void *)(v274 + 32) + 36);
  int v79 = *(_DWORD *)(*(void *)(v74 + 32) + 36);
  if ((v276 & 0x80000000) != 0 && (v276 & 0x7FFFFFFF) < *(_DWORD *)(v11 + 432)) {
    unint64_t v80 = *(void *)(*(void *)(v11 + 424) + 8 * (v276 & 0x7FFFFFFF));
  }
  else {
    unint64_t v80 = 0;
  }
  unint64_t v283 = v80;
  LODWORD(v284) = 0;
  LODWORD(v296) = v64;
  LODWORD(v297) = 2;
  DWORD2(v297) = v76;
  LODWORD(v299) = 0;
  LODWORD(v300) = v77;
  LODWORD(v302) = 0;
  DWORD2(v302) = v78;
  LODWORD(v304) = 0;
  DWORD2(v304) = v79;
  DWORD2(v305) = 0;
  uint64_t v44 = 1;
  uint64_t v144 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, v65, &v283, 1, &v296, 5, *(unsigned __int16 *)(v70 + 44) | 0x100000000);
  uint64_t v145 = **(unsigned __int16 **)(v274 + 16);
  LODWORD(v283) = v276;
  LODWORD(v284) = 1;
  *(void *)&long long v296 = v144;
  *((void *)&v296 + 1) = v146;
  LODWORD(v297) = 1;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, v145, &v283, 1, &v296, 1, *(unsigned __int16 *)(v274 + 44) | 0x100000000);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v70);
  return v44;
}

uint64_t sub_1CBAA7360(unint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, void *a6)
{
  uint64_t v10 = *(unsigned int *)(*(void *)(a2 + 32) + 32 * a3 + 4);
  if ((v10 & 0x80000000) != 0 && (v10 & 0x7FFFFFFF) < a5) {
    unint64_t v11 = *(void *)(a4 + 8 * (v10 & 0x7FFFFFFF));
  }
  else {
    unint64_t v11 = 0;
  }
  unint64_t v24 = v11;
  uint64_t v12 = sub_1CB8F1DC4(&v24);
  int v14 = v13;
  if (v12 != sub_1CB8F1DC4(a1) || v14 != v15)
  {
    int v16 = *(unsigned __int8 *)(*(void *)(a2 + 32) + 32 * (a3 + 1) + 16);
    if (v16 == 2) {
      unsigned int v17 = 124;
    }
    else {
      unsigned int v17 = 126;
    }
    unint64_t v22 = *a1;
    int v23 = 0;
    if (v16) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 118;
    }
    v21[0] = v10;
    v21[4] = 0;
    sub_1CC738034(a6, v18, &v22, v21);
    return *(unsigned int *)(*(void *)(v19 + 32) + 4);
  }
  return v10;
}

uint64_t sub_1CBAA7460(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v192 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)a3) {
    return 0;
  }
  uint64_t v10 = *(unsigned int *)(a3 + 4);
  if ((v10 & 0x80000000) != 0) {
    unint64_t v11 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v11 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v10);
  }
  uint64_t v12 = *v11;
  if (!v12 || (*(unsigned char *)(v12 + 3) & 1) == 0 && ((uint64_t v12 = *(void *)(v12 + 24)) == 0 || (*(unsigned char *)(v12 + 3) & 1) == 0))
  {
    uint64_t v13 = 0;
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_114;
    }
LABEL_7:
    int v14 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
    goto LABEL_8;
  }
  uint64_t v13 = *(void *)(v12 + 8);
  if ((v10 & 0x80000000) != 0) {
    goto LABEL_7;
  }
LABEL_114:
  int v14 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v10);
LABEL_8:
  uint64_t v15 = *v14;
  if ((*(unsigned char *)(v15 + 3) & 1) == 0) {
    uint64_t v15 = *(void *)(v15 + 24);
  }
  uint64_t v16 = *(void *)(v15 + 8);
  if (**(_WORD **)(v16 + 16) != 77 || *(_DWORD *)(v16 + 40) != 3) {
    goto LABEL_74;
  }
  uint64_t v17 = *(void *)(v16 + 32);
  uint64_t v18 = *(unsigned int *)(v17 + 36);
  if ((v18 & 0x80000000) != 0) {
    uint64_t v19 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v19 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v18);
  }
  uint64_t v20 = *v19;
  if ((*(unsigned char *)(v20 + 3) & 1) == 0) {
    uint64_t v20 = *(void *)(v20 + 24);
  }
  uint64_t v21 = *(void *)(v20 + 8);
  if (**(_WORD **)(v21 + 16) == 121) {
    uint64_t v22 = *(void *)(*(void *)(v21 + 32) + 48);
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = *(unsigned int *)(v17 + 68);
  if ((v23 & 0x80000000) != 0) {
    unint64_t v24 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v24 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v23);
  }
  uint64_t v25 = *v24;
  if ((*(unsigned char *)(v25 + 3) & 1) == 0) {
    uint64_t v25 = *(void *)(v25 + 24);
  }
  uint64_t v26 = *(void *)(v25 + 8);
  if (**(_WORD **)(v26 + 16) == 121)
  {
    uint64_t v27 = *(void *)(*(void *)(v26 + 32) + 48);
    if (!v22) {
      goto LABEL_74;
    }
  }
  else
  {
    uint64_t v27 = 0;
    if (!v22) {
      goto LABEL_74;
    }
  }
  if (v22 != v27) {
    goto LABEL_74;
  }
  if (*(unsigned char *)(*(void *)v22 + 8))
  {
LABEL_48:
    int v39 = *(void **)(v22 + 32);
    uint64_t v38 = (llvm::detail::DoubleAPFloat *)(v22 + 32);
    if (v39 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v38, (llvm::APInt *)&v189);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v38, (uint64_t)&v189);
    }
    uint64_t v40 = (uint64_t *)&v189;
    if (v190 >= 0x41) {
      uint64_t v40 = (uint64_t *)v189;
    }
    uint64_t v41 = *v40;
    if (v41)
    {
      int v42 = 0;
      if ((v41 & 0x7FFFF) != 0 || (unsigned int v43 = (v41 >> 23), v43 - 121 > 0xA))
      {
LABEL_59:
        if (v190 >= 0x41 && v189) {
          MEMORY[0x1D25D9CB0]();
        }
        if (v42)
        {
          if (*(_UNKNOWN **)v38 == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v38, (llvm::APInt *)&v189);
          }
          else {
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v38, (uint64_t)&v189);
          }
          unsigned int v32 = v190;
          int v33 = v189;
          uint64_t v44 = (unsigned int *)&v189;
          if (v190 >= 0x41) {
            uint64_t v44 = (unsigned int *)v189;
          }
          unsigned int v45 = *v44;
          unsigned int v46 = (v45 >> 23);
          unsigned int v37 = (v45 >> 19) & 0xF;
          if (v46 | v37)
          {
            if (v46 <= 0x7C)
            {
              unsigned int v37 = (v37 | 0x10) >> (125 - v46);
              unsigned int v46 = 0;
            }
            else
            {
              v46 -= 124;
            }
          }
          int v47 = (16 * v46) | (v45 >> 31 << 7);
          goto LABEL_98;
        }
LABEL_74:
        if (**(_WORD **)(v13 + 16) != 77) {
          return 0;
        }
        uint64_t v185 = v13;
        uint64_t v48 = *(void *)(v13 + 32);
        uint64_t v49 = v48 + 32;
        uint64_t v50 = v48 + 64;
        uint64_t v51 = *(unsigned int *)(v48 + 36);
        if ((v51 & 0x80000000) != 0) {
          uint64_t v52 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v51 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v52 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v51);
        }
        uint64_t v53 = *v52;
        if (v53
          && ((*(unsigned char *)(v53 + 3) & 1) != 0 || (uint64_t v53 = *(void *)(v53 + 24)) != 0 && (*(unsigned char *)(v53 + 3) & 1) != 0)
          && (uint64_t v54 = *(void *)(v53 + 8)) != 0
          && **(_WORD **)(v54 + 16) == 178
          && *(_DWORD *)(v54 + 40) == 2)
        {
          uint64_t v55 = *(unsigned int *)(*(void *)(v54 + 32) + 36);
          uint64_t v56 = *(unsigned int *)(v48 + 68);
          if ((v56 & 0x80000000) != 0) {
            int v57 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v56 & 0x7FFFFFFF) + 8);
          }
          else {
            int v57 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v56);
          }
          uint64_t v58 = *v57;
          if (v58)
          {
            if (*(unsigned char *)(v58 + 3) & 1) != 0 || (uint64_t v58 = *(void *)(v58 + 24)) != 0 && (*(unsigned char *)(v58 + 3))
            {
              uint64_t v59 = *(void *)(v58 + 8);
              if (v59)
              {
                if (**(_WORD **)(v59 + 16) == 178 && *(_DWORD *)(v59 + 40) == 2)
                {
                  uint64_t v60 = *(unsigned int *)(*(void *)(v59 + 32) + 36);
                  if ((v55 & 0x80000000) != 0) {
                    unsigned int v61 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v55 & 0x7FFFFFFF) + 8);
                  }
                  else {
                    unsigned int v61 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v55);
                  }
                  uint64_t v62 = *v61;
                  if (v62
                    && ((*(unsigned char *)(v62 + 3) & 1) != 0
                     || (uint64_t v62 = *(void *)(v62 + 24)) != 0 && (*(unsigned char *)(v62 + 3) & 1) != 0))
                  {
                    uint64_t v63 = *(void *)(v62 + 8);
                  }
                  else
                  {
                    uint64_t v63 = 0;
                  }
                  unsigned int RegisterDefOperandIdx = llvm::MachineInstr::findRegisterDefOperandIdx(v63, v55, 0, 0, 0);
                  if (RegisterDefOperandIdx == -1) {
                    uint64_t v49 = 0;
                  }
                  else {
                    uint64_t v49 = *(void *)(v63 + 32) + 32 * RegisterDefOperandIdx;
                  }
                  if ((v60 & 0x80000000) != 0) {
                    int v66 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v60 & 0x7FFFFFFF) + 8);
                  }
                  else {
                    int v66 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v60);
                  }
                  uint64_t v67 = *v66;
                  if (v67
                    && ((*(unsigned char *)(v67 + 3) & 1) != 0
                     || (uint64_t v67 = *(void *)(v67 + 24)) != 0 && (*(unsigned char *)(v67 + 3) & 1) != 0))
                  {
                    uint64_t v68 = *(void *)(v67 + 8);
                  }
                  else
                  {
                    uint64_t v68 = 0;
                  }
                  unsigned int v69 = llvm::MachineInstr::findRegisterDefOperandIdx(v68, v60, 0, 0, 0);
                  if (v69 == -1) {
                    uint64_t v50 = 0;
                  }
                  else {
                    uint64_t v50 = *(void *)(v68 + 32) + 32 * v69;
                  }
                  goto LABEL_119;
                }
              }
            }
          }
        }
        else
        {
          LODWORD(v55) = 0;
        }
        LODWORD(v60) = 0;
LABEL_119:
        if (v55) {
          BOOL v70 = v60 == 0;
        }
        else {
          BOOL v70 = 1;
        }
        int v71 = !v70;
        uint64_t v72 = *(unsigned int *)(v49 + 4);
        if ((v72 & 0x80000000) != 0 && (v72 & 0x7FFFFFFF) < *(_DWORD *)(a1 + 432)) {
          uint64_t v73 = *(void *)(*(void *)(a1 + 424) + 8 * (v72 & 0x7FFFFFFF));
        }
        else {
          uint64_t v73 = 0;
        }
        uint64_t v74 = *(unsigned int *)(v50 + 4);
        if ((v74 & 0x80000000) != 0 && (v74 & 0x7FFFFFFF) < *(_DWORD *)(a1 + 432)) {
          uint64_t v75 = *(void *)(*(void *)(a1 + 424) + 8 * (v74 & 0x7FFFFFFF));
        }
        else {
          uint64_t v75 = 0;
        }
        if (v73 == v75)
        {
          if ((v72 & 0x80000000) != 0) {
            int v76 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v72 & 0x7FFFFFFF) + 8);
          }
          else {
            int v76 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v72);
          }
          uint64_t v77 = *v76;
          int v182 = v71;
          if (v77
            && ((*(unsigned char *)(v77 + 3) & 1) != 0 || (uint64_t v77 = *(void *)(v77 + 24)) != 0 && (*(unsigned char *)(v77 + 3) & 1) != 0)
            && (uint64_t v78 = *(void *)(v77 + 8)) != 0
            && **(_WORD **)(v78 + 16) == 258
            && *(_DWORD *)(v78 + 40) == 2
            && ((uint64_t v79 = *(unsigned int *)(*(void *)(v78 + 32) + 36), (v74 & 0x80000000) == 0)
              ? (unint64_t v80 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v74))
              : (unint64_t v80 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v74 & 0x7FFFFFFF) + 8)),
                (uint64_t v81 = *v80) != 0
             && ((*(unsigned char *)(v81 + 3) & 1) != 0 || (uint64_t v81 = *(void *)(v81 + 24)) != 0 && (*(unsigned char *)(v81 + 3) & 1) != 0)
             && (uint64_t v82 = *(void *)(v81 + 8)) != 0
             && **(_WORD **)(v82 + 16) == 258
             && *(_DWORD *)(v82 + 40) == 2))
          {
            uint64_t v83 = *(unsigned int *)(*(void *)(v82 + 32) + 36);
            if ((v79 & 0x80000000) != 0) {
              unsigned int v84 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v79 & 0x7FFFFFFF) + 8);
            }
            else {
              unsigned int v84 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v79);
            }
            uint64_t v85 = *v84;
            if (v85
              && ((*(unsigned char *)(v85 + 3) & 1) != 0 || (uint64_t v85 = *(void *)(v85 + 24)) != 0 && (*(unsigned char *)(v85 + 3) & 1) != 0))
            {
              uint64_t v86 = *(void *)(v85 + 8);
            }
            else
            {
              uint64_t v86 = 0;
            }
            unsigned int v87 = llvm::MachineInstr::findRegisterDefOperandIdx(v86, v79, 0, 0, 0);
            if (v87 == -1) {
              uint64_t v49 = 0;
            }
            else {
              uint64_t v49 = *(void *)(v86 + 32) + 32 * v87;
            }
            if ((v83 & 0x80000000) != 0) {
              int v88 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v83 & 0x7FFFFFFF) + 8);
            }
            else {
              int v88 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v83);
            }
            uint64_t v89 = *v88;
            if (v89
              && ((*(unsigned char *)(v89 + 3) & 1) != 0 || (uint64_t v89 = *(void *)(v89 + 24)) != 0 && (*(unsigned char *)(v89 + 3) & 1) != 0))
            {
              uint64_t v90 = *(void *)(v89 + 8);
            }
            else
            {
              uint64_t v90 = 0;
            }
            unsigned int v91 = llvm::MachineInstr::findRegisterDefOperandIdx(v90, v83, 0, 0, 0);
            if (v91 == -1) {
              uint64_t v50 = 0;
            }
            else {
              uint64_t v50 = *(void *)(v90 + 32) + 32 * v91;
            }
            unsigned int v184 = 1;
          }
          else
          {
            unsigned int v184 = 0;
          }
          uint64_t v92 = *(unsigned int *)(v49 + 4);
          if ((v92 & 0x80000000) != 0) {
            unsigned int v93 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v92 & 0x7FFFFFFF) + 8);
          }
          else {
            unsigned int v93 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v92);
          }
          uint64_t v94 = *v93;
          if (v94)
          {
            if (*(unsigned char *)(v94 + 3) & 1) != 0 || (uint64_t v94 = *(void *)(v94 + 24)) != 0 && (*(unsigned char *)(v94 + 3))
            {
              uint64_t v95 = *(void *)(v94 + 8);
              if (v95 && **(_WORD **)(v95 + 16) == 177 && *(_DWORD *)(v95 + 40) == 2)
              {
                uint64_t v96 = *(unsigned int *)(*(void *)(v95 + 32) + 36);
                uint64_t v97 = *(unsigned int *)(v50 + 4);
                int v98 = (uint64_t *)((v97 & 0x80000000) != 0
                                ? *(void *)(a1 + 24) + 16 * (v97 & 0x7FFFFFFF) + 8
                                : *(void *)(a1 + 272) + 8 * v97);
                uint64_t v99 = *v98;
                if (v99)
                {
                  if ((*(unsigned char *)(v99 + 3) & 1) != 0
                    || (uint64_t v99 = *(void *)(v99 + 24)) != 0 && (*(unsigned char *)(v99 + 3) & 1) != 0)
                  {
                    uint64_t v100 = *(void *)(v99 + 8);
                    if (v100)
                    {
                      if (**(_WORD **)(v100 + 16) == 177 && *(_DWORD *)(v100 + 40) == 2)
                      {
                        uint64_t v101 = *(unsigned int *)(*(void *)(v100 + 32) + 36);
                        if ((v96 & 0x80000000) != 0) {
                          uint64_t v102 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v96 & 0x7FFFFFFF) + 8);
                        }
                        else {
                          uint64_t v102 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v96);
                        }
                        uint64_t v103 = *v102;
                        if (v103
                          && ((*(unsigned char *)(v103 + 3) & 1) != 0
                           || (uint64_t v103 = *(void *)(v103 + 24)) != 0 && (*(unsigned char *)(v103 + 3) & 1) != 0))
                        {
                          uint64_t v104 = *(void *)(v103 + 8);
                        }
                        else
                        {
                          uint64_t v104 = 0;
                        }
                        unsigned int v105 = llvm::MachineInstr::findRegisterDefOperandIdx(v104, v96, 0, 0, 0);
                        if (v105 == -1) {
                          uint64_t v49 = 0;
                        }
                        else {
                          uint64_t v49 = *(void *)(v104 + 32) + 32 * v105;
                        }
                        if ((v101 & 0x80000000) != 0) {
                          uint64_t v106 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v101 & 0x7FFFFFFF) + 8);
                        }
                        else {
                          uint64_t v106 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v101);
                        }
                        uint64_t v107 = *v106;
                        if (v107
                          && ((*(unsigned char *)(v107 + 3) & 1) != 0
                           || (uint64_t v107 = *(void *)(v107 + 24)) != 0 && (*(unsigned char *)(v107 + 3) & 1) != 0))
                        {
                          uint64_t v108 = *(void *)(v107 + 8);
                        }
                        else
                        {
                          uint64_t v108 = 0;
                        }
                        unsigned int v109 = llvm::MachineInstr::findRegisterDefOperandIdx(v108, v101, 0, 0, 0);
                        if (v109 == -1) {
                          uint64_t v50 = 0;
                        }
                        else {
                          uint64_t v50 = *(void *)(v108 + 32) + 32 * v109;
                        }
                        v184 |= 2u;
                        uint64_t v92 = *(unsigned int *)(v49 + 4);
                      }
                    }
                  }
                }
              }
            }
          }
          if ((v92 & 0x80000000) != 0) {
            uint64_t v110 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v92 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v110 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v92);
          }
          uint64_t v111 = *v110;
          if (v111)
          {
            if ((*(unsigned char *)(v111 + 3) & 1) != 0
              || (uint64_t v111 = *(void *)(v111 + 24)) != 0 && (*(unsigned char *)(v111 + 3) & 1) != 0)
            {
              uint64_t v112 = *(void *)(v111 + 8);
              if (v112 && **(_WORD **)(v112 + 16) == 184 && *(_DWORD *)(v112 + 40) == 2)
              {
                uint64_t v113 = *(unsigned int *)(*(void *)(v112 + 32) + 36);
                uint64_t v114 = *(unsigned int *)(v50 + 4);
                uint64_t v115 = (uint64_t *)((v114 & 0x80000000) != 0
                                 ? *(void *)(a1 + 24) + 16 * (v114 & 0x7FFFFFFF) + 8
                                 : *(void *)(a1 + 272) + 8 * v114);
                uint64_t v116 = *v115;
                if (v116)
                {
                  if ((*(unsigned char *)(v116 + 3) & 1) != 0
                    || (uint64_t v116 = *(void *)(v116 + 24)) != 0 && (*(unsigned char *)(v116 + 3) & 1) != 0)
                  {
                    uint64_t v117 = *(void *)(v116 + 8);
                    if (v117)
                    {
                      if (**(_WORD **)(v117 + 16) == 184 && *(_DWORD *)(v117 + 40) == 2)
                      {
                        uint64_t v118 = *(unsigned int *)(*(void *)(v117 + 32) + 36);
                        if ((v113 & 0x80000000) != 0) {
                          uint64_t v119 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v113 & 0x7FFFFFFF) + 8);
                        }
                        else {
                          uint64_t v119 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v113);
                        }
                        uint64_t v120 = *v119;
                        if (v120
                          && ((*(unsigned char *)(v120 + 3) & 1) != 0
                           || (uint64_t v120 = *(void *)(v120 + 24)) != 0 && (*(unsigned char *)(v120 + 3) & 1) != 0))
                        {
                          uint64_t v121 = *(void *)(v120 + 8);
                        }
                        else
                        {
                          uint64_t v121 = 0;
                        }
                        unsigned int v122 = llvm::MachineInstr::findRegisterDefOperandIdx(v121, v113, 0, 0, 0);
                        if (v122 == -1) {
                          uint64_t v49 = 0;
                        }
                        else {
                          uint64_t v49 = *(void *)(v121 + 32) + 32 * v122;
                        }
                        if ((v118 & 0x80000000) != 0) {
                          uint64_t v123 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v118 & 0x7FFFFFFF) + 8);
                        }
                        else {
                          uint64_t v123 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v118);
                        }
                        uint64_t v124 = *v123;
                        if (v124
                          && ((*(unsigned char *)(v124 + 3) & 1) != 0
                           || (uint64_t v124 = *(void *)(v124 + 24)) != 0 && (*(unsigned char *)(v124 + 3) & 1) != 0))
                        {
                          uint64_t v125 = *(void *)(v124 + 8);
                        }
                        else
                        {
                          uint64_t v125 = 0;
                        }
                        unsigned int v126 = llvm::MachineInstr::findRegisterDefOperandIdx(v125, v118, 0, 0, 0);
                        if (v126 == -1) {
                          uint64_t v50 = 0;
                        }
                        else {
                          uint64_t v50 = *(void *)(v125 + 32) + 32 * v126;
                        }
                        v184 |= 4u;
                        LODWORD(v92) = *(_DWORD *)(v49 + 4);
                      }
                    }
                  }
                }
              }
            }
          }
          if ((v92 & 0x80000000) != 0 && (v92 & 0x7FFFFFFF) < *(_DWORD *)(a1 + 432)) {
            uint64_t v127 = *(void *)(*(void *)(a1 + 424) + 8 * (v92 & 0x7FFFFFFF));
          }
          else {
            uint64_t v127 = 0;
          }
          uint64_t v128 = *(unsigned int *)(v50 + 4);
          uint64_t v183 = a4;
          if ((v128 & 0x80000000) != 0 && (v128 & 0x7FFFFFFF) < *(_DWORD *)(a1 + 432)) {
            uint64_t v129 = *(void *)(*(void *)(a1 + 424) + 8 * (v128 & 0x7FFFFFFF));
          }
          else {
            uint64_t v129 = 0;
          }
          uint64_t v130 = v50;
          uint64_t v131 = v49;
          if (v127 == v129)
          {
            uint64_t v132 = (uint64_t *)((v92 & 0x80000000) != 0
                             ? *(void *)(a1 + 24) + 16 * (v92 & 0x7FFFFFFF) + 8
                             : *(void *)(a1 + 272) + 8 * v92);
            uint64_t v133 = *v132;
            uint64_t v130 = v50;
            uint64_t v131 = v49;
            if (v133)
            {
              if ((*(unsigned char *)(v133 + 3) & 1) != 0
                || (v133 = *(void *)(v133 + 24), uint64_t v130 = v50, v131 = v49, v133)
                && (uint64_t v130 = v50, v131 = v49, (*(unsigned char *)(v133 + 3) & 1) != 0))
              {
                uint64_t v134 = *(void *)(v133 + 8);
                uint64_t v130 = v50;
                uint64_t v131 = v49;
                if (v134)
                {
                  uint64_t v130 = v50;
                  uint64_t v131 = v49;
                  if (**(_WORD **)(v134 + 16) == 179)
                  {
                    uint64_t v130 = v50;
                    uint64_t v131 = v49;
                    if (*(_DWORD *)(v134 + 40) == 2)
                    {
                      uint64_t v135 = (uint64_t *)((v128 & 0x80000000) != 0
                                       ? *(void *)(a1 + 24) + 16 * (v128 & 0x7FFFFFFF) + 8
                                       : *(void *)(a1 + 272) + 8 * v128);
                      uint64_t v136 = *v135;
                      uint64_t v130 = v50;
                      uint64_t v131 = v49;
                      if (v136)
                      {
                        uint64_t v137 = *(unsigned int *)(*(void *)(v134 + 32) + 36);
                        if ((*(unsigned char *)(v136 + 3) & 1) != 0
                          || (v136 = *(void *)(v136 + 24), uint64_t v130 = v50, v131 = v49, v136)
                          && (uint64_t v130 = v50, v131 = v49, (*(unsigned char *)(v136 + 3) & 1) != 0))
                        {
                          uint64_t v138 = *(void *)(v136 + 8);
                          uint64_t v130 = v50;
                          uint64_t v131 = v49;
                          if (v138)
                          {
                            uint64_t v130 = v50;
                            uint64_t v131 = v49;
                            if (**(_WORD **)(v138 + 16) == 179)
                            {
                              uint64_t v130 = v50;
                              uint64_t v131 = v49;
                              if (*(_DWORD *)(v138 + 40) == 2)
                              {
                                uint64_t v139 = *(void *)(v138 + 32);
                                if ((v137 & 0x80000000) != 0) {
                                  uint64_t v140 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v137 & 0x7FFFFFFF) + 8);
                                }
                                else {
                                  uint64_t v140 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v137);
                                }
                                uint64_t v141 = *(unsigned int *)(v139 + 36);
                                uint64_t v142 = *v140;
                                if (*v140
                                  && ((*(unsigned char *)(v142 + 3) & 1) != 0
                                   || (uint64_t v142 = *(void *)(v142 + 24)) != 0 && (*(unsigned char *)(v142 + 3) & 1) != 0))
                                {
                                  uint64_t v143 = *(void *)(v142 + 8);
                                }
                                else
                                {
                                  uint64_t v143 = 0;
                                }
                                unsigned int v144 = llvm::MachineInstr::findRegisterDefOperandIdx(v143, v137, 0, 0, 0);
                                if (v144 == -1) {
                                  uint64_t v131 = 0;
                                }
                                else {
                                  uint64_t v131 = *(void *)(v143 + 32) + 32 * v144;
                                }
                                if ((v141 & 0x80000000) != 0) {
                                  uint64_t v145 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v141 & 0x7FFFFFFF) + 8);
                                }
                                else {
                                  uint64_t v145 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v141);
                                }
                                uint64_t v146 = *v145;
                                if (v146
                                  && ((*(unsigned char *)(v146 + 3) & 1) != 0
                                   || (uint64_t v146 = *(void *)(v146 + 24)) != 0 && (*(unsigned char *)(v146 + 3) & 1) != 0))
                                {
                                  uint64_t v147 = *(void *)(v146 + 8);
                                }
                                else
                                {
                                  uint64_t v147 = 0;
                                }
                                unsigned int v148 = llvm::MachineInstr::findRegisterDefOperandIdx(v147, v141, 0, 0, 0);
                                if (v148 == -1) {
                                  uint64_t v130 = 0;
                                }
                                else {
                                  uint64_t v130 = *(void *)(v147 + 32) + 32 * v148;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v189 = 0;
          uint64_t v186 = 0;
          uint64_t v149 = *(void *)(a1 + 24);
          uint64_t v150 = *(void *)(a1 + 272);
          if (!sub_1CBAA8944(&v189, v149, v150, *(_DWORD *)(v131 + 4))
            || !sub_1CBAA8944(&v186, v149, v150, *(_DWORD *)(v130 + 4)))
          {
            goto LABEL_279;
          }
          int v151 = *(_DWORD *)(v131 + 4);
          if (v151 < 0 && (uint64_t v152 = v151 & 0x7FFFFFFF, v152 < *(_DWORD *)(a1 + 432))) {
            unint64_t v153 = *(void *)(*(void *)(a1 + 424) + 8 * v152);
          }
          else {
            unint64_t v153 = 0;
          }
          unint64_t v188 = v153;
          unsigned int v155 = sub_1CB8F1DC4(&v188);
          if (v154 == 1) {
          if ((char *)v189 + (v155 >> 3) == v186)
          }
            unint64_t v156 = v189 | ((unint64_t)v155 << 32);
          else {
LABEL_279:
          }
            unint64_t v156 = -1;
          if (v184) {
            BOOL v157 = 0;
          }
          else {
            BOOL v157 = v156 == 0xFFFFFFFFLL;
          }
          int v158 = v182;
          if (!v157) {
            int v158 = 1;
          }
          if (v158 == 1)
          {
            if (v156 == 0xFFFFFFFFLL)
            {
              int v173 = *(_DWORD *)(v49 + 4);
              if (v173 < 0 && (uint64_t v174 = v173 & 0x7FFFFFFF, v174 < *(_DWORD *)(a1 + 432))) {
                uint64_t v175 = *(void **)(*(void *)(a1 + 424) + 8 * v174);
              }
              else {
                uint64_t v175 = 0;
              }
              uint64_t v189 = v175;
              unsigned int v177 = sub_1CB8F1DC4((unint64_t *)&v189);
              if (v176 == 1) {
              a2[5] = *(void *)(v185 + 24);
              }
              a2[6] = v185;
              uint64_t v186 = (char *)(((unint64_t)v177 << 19) | 0x14);
              int v187 = 0;
              int v178 = *(_DWORD *)(v49 + 4);
              int v179 = *(_DWORD *)(v50 + 4);
              uint64_t v189 = v191;
              v191[0] = v178;
              v191[4] = 0;
              v191[6] = v179;
              v191[10] = 0;
              uint64_t v190 = 0x800000002;
              (*(void (**)(void *, uint64_t, char **, uint64_t, _DWORD *, uint64_t, void))(*a2 + 32))(a2, 77, &v186, 1, v191, 2, 0);
              uint64_t v181 = v180;
              if (v189 != v191) {
                free(v189);
              }
              BOOL v159 = (void *)(a3 + 8);
              (*(void (**)(uint64_t, void))(*(void *)a5 + 32))(a5, *(void *)(a3 + 8));
              llvm::MachineOperand::setReg(a3, *(_DWORD *)(*(void *)(v181 + 32) + 4));
            }
            else
            {
              BOOL v159 = (void *)(a3 + 8);
              (*(void (**)(uint64_t, void))(*(void *)a5 + 32))(a5, *(void *)(a3 + 8));
              HIDWORD(v160) = (((v156 >> 31) & 0xFFFFFFFE) + 7) >> 3;
              LODWORD(v160) = HIDWORD(v160) - 2;
              int v161 = dword_1CDB15960[(int)(v160 >> 1)];
              int v162 = *(_DWORD *)a3;
              if (!*(_DWORD *)a3)
              {
                uint64_t v163 = *(void *)(a3 + 16);
                if (v163)
                {
                  if (*v159)
                  {
                    uint64_t v164 = *(void *)(*v159 + 24);
                    if (v164)
                    {
                      uint64_t v165 = *(void *)(v164 + 32);
                      if (v165)
                      {
                        uint64_t v166 = *(void *)(v165 + 40);
                        uint64_t v167 = *(unsigned int *)(a3 + 4);
                        if ((v167 & 0x80000000) != 0) {
                          uint64_t v168 = (uint64_t *)(*(void *)(v166 + 24) + 16 * (v167 & 0x7FFFFFFF) + 8);
                        }
                        else {
                          uint64_t v168 = (uint64_t *)(*(void *)(v166 + 272) + 8 * v167);
                        }
                        uint64_t v169 = *v168;
                        uint64_t v170 = *(void *)(a3 + 24);
                        if (*v168 != a3) {
                          uint64_t v168 = (uint64_t *)(v163 + 24);
                        }
                        *uint64_t v168 = v170;
                        if (v170) {
                          uint64_t v171 = v170;
                        }
                        else {
                          uint64_t v171 = v169;
                        }
                        *(void *)(v171 + 16) = v163;
                        *(void *)(a3 + 16) = 0;
                        *(void *)(a3 + 24) = 0;
                        int v162 = *(_DWORD *)a3;
                      }
                    }
                  }
                }
              }
              *(_DWORD *)(a3 + 16) = 64;
              *(_DWORD *)(a3 + 24) = 0;
              *(_DWORD *)a3 = v161 | v162 & 0xFFF00000;
              *(_DWORD *)(a3 + 4) = v156 >> 1;
            }
            (*(void (**)(uint64_t, void))(*(void *)a5 + 40))(a5, *v159);
            *(void *)(v183 + 16) |= v184;
            return 1;
          }
        }
        return 0;
      }
      if (v43 <= 0x7C && (((v41 | 0x800000uLL) >> (125 - v43)) & 0x7FFFF) != 0)
      {
        int v42 = 0;
        goto LABEL_59;
      }
    }
    int v42 = 1;
    goto LABEL_59;
  }
  if (*(_UNKNOWN **)(v22 + 32) == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)(v22 + 32), (llvm::APInt *)&v189);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt(v22 + 32, (uint64_t)&v189);
  }
  int v28 = (uint64_t *)&v189;
  if (v190 >= 0x41) {
    int v28 = (uint64_t *)v189;
  }
  uint64_t v29 = *v28;
  if (!v29) {
    goto LABEL_36;
  }
  int v30 = 0;
  if ((v29 & 0x3F) == 0)
  {
    unsigned int v31 = (v29 >> 10) & 0x1F;
    if (v31 - 9 <= 0xA)
    {
      if (v31 <= 0xC && (((v29 | 0x400uLL) >> (13 - v31)) & 0x3F) != 0)
      {
        int v30 = 0;
        goto LABEL_37;
      }
LABEL_36:
      int v30 = 1;
    }
  }
LABEL_37:
  if (v190 >= 0x41 && v189) {
    MEMORY[0x1D25D9CB0]();
  }
  if (!v30) {
    goto LABEL_48;
  }
  if (*(_UNKNOWN **)(v22 + 32) == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)(v22 + 32), (llvm::APInt *)&v189);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt(v22 + 32, (uint64_t)&v189);
  }
  unsigned int v32 = v190;
  int v33 = v189;
  uint64_t v34 = (unsigned int *)&v189;
  if (v190 >= 0x41) {
    uint64_t v34 = (unsigned int *)v189;
  }
  unsigned int v35 = *v34;
  unsigned int v36 = (v35 >> 10) & 0x1F;
  unsigned int v37 = (v35 >> 6) & 0xF;
  if (v36 | v37)
  {
    if (v36 <= 0xC)
    {
      unsigned int v37 = (v37 | 0x10) >> (13 - v36);
      unsigned int v36 = 0;
    }
    else
    {
      v36 -= 12;
    }
  }
  int v47 = (v35 >> 8) & 0x80 | (16 * v36);
LABEL_98:
  unsigned int v65 = v47 | v37;
  if (v32 >= 0x41)
  {
    if (v33) {
      MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
    }
  }
  (*(void (**)(uint64_t, void))(*(void *)a5 + 32))(a5, *(void *)(a3 + 8));
  llvm::MachineOperand::ChangeToImmediate((unsigned int *)a3, v65, 0);
  (*(void (**)(uint64_t, void))(*(void *)a5 + 40))(a5, *(void *)(a3 + 8));
  return 1;
}

uint64_t sub_1CBAA87B0(unsigned int a1, uint64_t a2)
{
  if ((a1 & 0x80000000) != 0) {
    int v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  else {
    int v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
  }
  uint64_t v5 = *v4;
  if (!*v4) {
    return 1;
  }
  while ((*(unsigned char *)(v5 + 3) & 1) != 0)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5) {
      return 1;
    }
  }
  uint64_t v6 = *(void *)(v5 + 8);
LABEL_8:
  int v7 = **(unsigned __int16 **)(v6 + 16);
  if ((v7 & 0xFFFE) == 0xB2)
  {
    uint64_t result = sub_1CBAA87B0(*(unsigned int *)(*(void *)(v6 + 32) + 4), a2);
    if (result)
    {
      uint64_t v10 = *(void *)(v5 + 8);
      goto LABEL_15;
    }
    return result;
  }
  uint64_t result = 0;
  if (**(unsigned __int16 **)(v6 + 16) > 0xA2u)
  {
    if ((v7 - 163) <= 0x38 && ((1 << (v7 + 93)) & 0x18800000038540DLL) != 0) {
      goto LABEL_14;
    }
    uint64_t v12 = (v7 - 314);
    if (v12 > 0x2A) {
      goto LABEL_28;
    }
    if (v12 != 22)
    {
      if (((1 << (v7 - 58)) & 0x40000200003) != 0)
      {
LABEL_14:
        uint64_t v10 = v6;
        goto LABEL_15;
      }
LABEL_28:
      uint64_t v10 = v6;
      if (v7 == 261) {
        goto LABEL_15;
      }
      return result;
    }
    goto LABEL_22;
  }
  if (v7 == 51)
  {
LABEL_22:
    uint64_t v11 = *(void *)(v6 + 32);
    if (*(_DWORD *)(v11 + 132) == a1) {
      return 0;
    }
    uint64_t v10 = v6;
    if (*(_DWORD *)(v11 + 164) == a1) {
      return 0;
    }
LABEL_15:
    while (1)
    {
      uint64_t v5 = *(void *)(v5 + 24);
      if (!v5) {
        return 1;
      }
      if ((*(unsigned char *)(v5 + 3) & 1) == 0)
      {
        uint64_t v6 = *(void *)(v5 + 8);
        if (v6 != v10) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v10 = v6;
  if (v7 == 85) {
    goto LABEL_15;
  }
  return result;
}

const char *sub_1CBAA8934()
{
  return "AGX2PostLegalizerCombiner";
}

uint64_t sub_1CBAA8944(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4 = (uint64_t *)(a2 + 16 * (a4 & 0x7FFFFFFF) + 8);
  if (a4 >= 0) {
    int v4 = (uint64_t *)(a3 + 8 * a4);
  }
  uint64_t v5 = *v4;
  if (!v5) {
    return 0;
  }
  if ((*(unsigned char *)(v5 + 3) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5 || (*(unsigned char *)(v5 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6) {
    return 0;
  }
  if (**(_WORD **)(v6 + 16) != 318) {
    return 0;
  }
  if (*(_DWORD *)(v6 + 40) != 2) {
    return 0;
  }
  uint64_t v8 = *(void *)(v6 + 32);
  if (*(unsigned char *)(v8 + 32) != 1) {
    return 0;
  }
  *a1 = *(void *)(v8 + 48);
  return 1;
}

uint64_t sub_1CBAA89D0(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  if ((v3 & 0x80000000) != 0) {
    int v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  }
  else {
    int v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v3);
  }
  uint64_t v5 = *v4;
  if (!v5) {
    return 0;
  }
  if ((*(unsigned char *)(v5 + 3) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5 || (*(unsigned char *)(v5 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6 || **(_WORD **)(v6 + 16) != 166 || *(_DWORD *)(v6 + 40) != 4) {
    return 0;
  }
  uint64_t v8 = *(_DWORD **)(v6 + 32);
  uint64_t v9 = *(_DWORD **)(a1 + 8);
  **(_DWORD **)a1 = v8[9];
  *uint64_t v9 = v8[17];
  **(_DWORD **)(a1 + 16) = v8[25];
  return 1;
}

uint64_t sub_1CBAA8A70()
{
  int v3 = 1;
  v4.n128_u64[0] = (unint64_t)"Enable the agx2 post legalization machine instruction combiner";
  v4.n128_u64[1] = 62;
  char v1 = 1;
  uint64_t v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCBFDB0, "enable-agx2-postlegalizer-combiner", &v3, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCBFDB0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Should enable CSE in AGX2 Postlegalizer Combiner";
  v4.n128_u64[1] = 48;
  int v3 = 0;
  char v1 = 1;
  uint64_t v2 = &v1;
  sub_1CD40E838((uint64_t)&unk_1EBCBFE70, "enable-cse-in-agx2-postlegalizer-combiner", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCBFE70, &dword_1CB82C000);
}

void sub_1CBAA8B60(uint64_t a1)
{
}

uint64_t sub_1CBAA8C00()
{
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Enable the agx2 post selection machine instruction combiner";
  v3.n128_u64[1] = 59;
  char v1 = 1;
  uint64_t v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCBFF30, "enable-agx2-postselection-combiner", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCBFF30, &dword_1CB82C000);
}

void sub_1CBAA8C8C(uint64_t a1)
{
}

uint64_t sub_1CBAA8D3C(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if ((**(unsigned char **)(a2 + 360) & 0x10) != 0 || !byte_1EBCC0090) {
    return v2;
  }
  uint64_t v5 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_29:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::TargetPassConfig::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_29;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::TargetPassConfig::ID);
  uint64_t v10 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v11 == v12)
  {
LABEL_9:
    uint64_t v13 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v11 != &unk_1EA61EFE3)
    {
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_9;
      }
    }
    uint64_t v13 = *(void *)(v11 + 8);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 96))(v13, &unk_1EA61EFE3);
  if (word_1EBCC00D8)
  {
    if (byte_1EBCC0150) {
      goto LABEL_13;
    }
  }
  else if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 280))(v9))
  {
LABEL_13:
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v9 + 288))(&v24, v9);
    if (!*(unsigned char *)(v14 + 624))
    {
      sub_1CC6DE3E0(v14 + 248);
      uint64_t v22 = v24;
      uint64_t v24 = 0;
      uint64_t v23 = *(void *)(v14 + 448);
      *(void *)(v14 + 448) = v22;
      if (v23) {
        (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      }
      sub_1CC6DE1A0((uint64_t *)(v14 + 248), *(void **)(v14 + 616));
      *(unsigned char *)(v14 + 624) = 1;
    }
    uint64_t v15 = v24;
    uint64_t v24 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  if (*(_DWORD *)(*(void *)(a2 + 8) + 552)) {
    llvm::FunctionPass::skipFunction(a1, *(llvm::LLVMContextImpl *****)a2);
  }
  uint64_t v16 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  if (v17 == v18)
  {
LABEL_21:
    uint64_t v19 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v17 != &unk_1EA61EFE4)
    {
      v17 += 16;
      if (v17 == v18) {
        goto LABEL_21;
      }
    }
    uint64_t v19 = *(void *)(v17 + 8);
  }
  uint64_t v20 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v19 + 96))(v19, &unk_1EA61EFE4);
  sub_1CBA02330(v20);
  return sub_1CC6EB0C4();
}

uint64_t sub_1CBAA90E4(uint64_t a1, llvm::ConstantInt *****a2, uint64_t a3, uint64_t a4)
{
  uint64_t v267 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(llvm::ConstantInt ******)(a1 + 32);
  uint64_t v7 = *(void *)(a4 + 8);
  uint64_t v8 = *(llvm::ConstantInt ******)(v7 + 40);
  v245[0] = (llvm::ConstantInt *****)a4;
  v245[1] = v8;
  v245[2] = a2;
  v245[3] = v6;
  v245[4] = 0;
  v245[5] = 0;
  v245[6] = (llvm::ConstantInt *****)(*(uint64_t (**)(void))(**(void **)(v7 + 16) + 184))(*(void *)(v7 + 16));
  v245[7] = (llvm::ConstantInt *****)(*(uint64_t (**)(void))(**(void **)(*(void *)(a4 + 8) + 16)
                                                                       + 176))(*(void *)(*(void *)(a4 + 8) + 16));
  uint64_t v9 = *(void *)(*(void *)(a4 + 8) + 40);
  *(void *)(a4 + 40) = *(void *)(a3 + 24);
  *(void *)(a4 + 48) = a3;
  unsigned int v10 = **(unsigned __int16 **)(a3 + 16);
  if (v10 <= 0x7D)
  {
    if (**(unsigned __int16 **)(a3 + 16) <= 0x4Cu)
    {
      if (v10 - 61 >= 2)
      {
        if (v10 - 65 < 2)
        {
          uint64_t v11 = *(unsigned int *)(*(void *)(a3 + 32) + 4);
          if ((v11 & 0x80000000) != 0
            && (v11 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v9 + 432))
          {
            uint64_t v12 = *(unsigned __int8 **)(*(void *)(v9 + 424) + 8 * (v11 & 0x7FFFFFFF));
          }
          else
          {
            uint64_t v12 = 0;
          }
          unint64_t v244 = (unint64_t)v12;
          int v243 = 0;
          unint64_t v241 = 0;
          uint64_t v242 = 0;
          uint64_t v246 = &v243;
          uint64_t v247 = (uint64_t)&v242;
          uint64_t v248 = &v241;
          LODWORD(v261) = v11;
          if (sub_1CBAAAD18((uint64_t)&v246, v9, (unsigned int *)&v261))
          {
            unint64_t v54 = __clz(__rbit64(v241));
            if ((v54 - 1) <= 3)
            {
              unint64_t v55 = v241 >> v54;
              if (v241 >> v54)
              {
                if (((v55 + 1) & v55) == 0)
                {
                  unint64_t v239 = v54;
                  unint64_t v56 = v242 + v54;
                  unint64_t v58 = sub_1CB8F1DC4(&v244);
                  if (v57 == 1) {
                  BOOL v59 = v56 >= v58;
                  }
                  unint64_t v60 = v239;
                  if (!v59)
                  {
                    uint64_t v261 = v244;
                    LODWORD(v262) = 0;
                    LODWORD(v246) = v243;
                    LODWORD(v248) = 0;
                    v265 = (unsigned __int8 *)v244;
                    int v266 = 0;
                    unsigned int v61 = (llvm::LLVMContext *)(unsigned __int16)(v244 >> 3);
                    uint64_t v62 = (llvm::LLVMContext *)(unsigned __int16)(v244 >> 19);
                    if ((v244 & 2) == 0) {
                      uint64_t v62 = (llvm::LLVMContext *)(v244 >> 19);
                    }
                    if ((v244 & 4) != 0) {
                      unsigned int v61 = v62;
                    }
                    if (v244) {
                      uint64_t v63 = (llvm::LLVMContext *)(v244 >> 3);
                    }
                    else {
                      uint64_t v63 = v61;
                    }
                    int v64 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), v63);
                    unsigned int v65 = llvm::ConstantInt::get(v64, v56, (const llvm::APInt *)1);
                    uint64_t v249 = (*(uint64_t (**)(uint64_t, unsigned __int8 **, void *))(*(void *)a4 + 16))(a4, &v265, v65);
                    uint64_t v250 = v66;
                    int v251 = 1;
                    uint64_t v67 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 128, &v261, 1, &v246, 2, 0);
                    uint64_t v261 = v244;
                    LODWORD(v262) = 0;
                    uint64_t v246 = v67;
                    uint64_t v247 = v68;
                    LODWORD(v248) = 1;
                    v265 = (unsigned __int8 *)v244;
                    int v266 = 0;
                    if (v244)
                    {
                      unint64_t v69 = (v244 >> 3);
                    }
                    else
                    {
                      if ((v244 & 4) != 0)
                      {
                        if ((v244 & 2) != 0) {
                          unint64_t v69 = (unsigned __int16)(v244 >> 19);
                        }
                        else {
                          unint64_t v69 = (v244 >> 19);
                        }
                      }
                      else
                      {
                        unint64_t v69 = (unsigned __int16)(v244 >> 3);
                      }
                      unint64_t v60 = v239;
                    }
                    BOOL v70 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), (llvm::LLVMContext *)v69);
                    int v71 = llvm::ConstantInt::get(v70, v55, (const llvm::APInt *)1);
                    uint64_t v249 = (*(uint64_t (**)(uint64_t, unsigned __int8 **, void *))(*(void *)a4 + 16))(a4, &v265, v71);
                    uint64_t v250 = v72;
                    int v251 = 1;
                    uint64_t v73 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 65, &v261, 1, &v246, 2, 0);
                    LODWORD(v261) = v11;
                    LODWORD(v262) = 1;
                    uint64_t v246 = v73;
                    uint64_t v247 = v74;
                    LODWORD(v248) = 1;
                    v265 = (unsigned __int8 *)v244;
                    int v266 = 0;
                    if (v244)
                    {
                      unint64_t v75 = (v244 >> 3);
                    }
                    else
                    {
                      if ((v244 & 4) != 0)
                      {
                        if ((v244 & 2) != 0) {
                          unint64_t v75 = (unsigned __int16)(v244 >> 19);
                        }
                        else {
                          unint64_t v75 = (v244 >> 19);
                        }
                      }
                      else
                      {
                        unint64_t v75 = (unsigned __int16)(v244 >> 3);
                      }
                      unint64_t v60 = v239;
                    }
                    int v76 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), (llvm::LLVMContext *)v75);
                    uint64_t v77 = llvm::ConstantInt::get(v76, v60, (const llvm::APInt *)1);
                    uint64_t v249 = (*(uint64_t (**)(uint64_t, unsigned __int8 **, void *))(*(void *)a4 + 16))(a4, &v265, v77);
                    uint64_t v250 = v78;
                    int v251 = 1;
LABEL_204:
                    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 127, &v261, 1, &v246, 2, 0);
                    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
                    return 1;
                  }
                }
              }
            }
          }
          uint64_t v246 = &v243;
          uint64_t v247 = (uint64_t)&v242;
          uint64_t v248 = &v241;
          LODWORD(v261) = v11;
          if (sub_1CBAAB09C((uint64_t)&v246, v9, (unsigned int *)&v261)
            && v242 >= 1
            && (unint64_t)v242 <= 4)
          {
            if ((v11 & 0x80000000) != 0) {
              uint64_t v79 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v11 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v79 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v11);
            }
            uint64_t v80 = *v79;
            if (!v80)
            {
LABEL_189:
              uint64_t v261 = v244;
              LODWORD(v262) = 0;
              LODWORD(v246) = v243;
              LODWORD(v248) = 0;
              v265 = (unsigned __int8 *)v244;
              int v266 = 0;
              unint64_t v134 = v241 >> v242;
              uint64_t v135 = (llvm::LLVMContext *)(unsigned __int16)(v244 >> 3);
              uint64_t v136 = (llvm::LLVMContext *)(unsigned __int16)(v244 >> 19);
              if ((v244 & 2) == 0) {
                uint64_t v136 = (llvm::LLVMContext *)(v244 >> 19);
              }
              if ((v244 & 4) != 0) {
                uint64_t v135 = v136;
              }
              if (v244) {
                uint64_t v137 = (llvm::LLVMContext *)(v244 >> 3);
              }
              else {
                uint64_t v137 = v135;
              }
              uint64_t v138 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), v137);
              uint64_t v139 = llvm::ConstantInt::get(v138, v134, (const llvm::APInt *)1);
              uint64_t v249 = (*(uint64_t (**)(uint64_t, unsigned __int8 **, void *))(*(void *)a4 + 16))(a4, &v265, v139);
              uint64_t v250 = v140;
              int v251 = 1;
              uint64_t v141 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 65, &v261, 1, &v246, 2, 0);
              LODWORD(v261) = v11;
              LODWORD(v262) = 1;
              uint64_t v246 = v141;
              uint64_t v247 = v142;
              LODWORD(v248) = 1;
              v265 = (unsigned __int8 *)v244;
              int v266 = 0;
              unint64_t v143 = v242;
              unsigned int v144 = (llvm::LLVMContext *)(unsigned __int16)(v244 >> 3);
              uint64_t v145 = (llvm::LLVMContext *)(unsigned __int16)(v244 >> 19);
              if ((v244 & 2) == 0) {
                uint64_t v145 = (llvm::LLVMContext *)(v244 >> 19);
              }
              if ((v244 & 4) != 0) {
                unsigned int v144 = v145;
              }
              if (v244) {
                uint64_t v146 = (llvm::LLVMContext *)(v244 >> 3);
              }
              else {
                uint64_t v146 = v144;
              }
              uint64_t v147 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), v146);
              unsigned int v148 = llvm::ConstantInt::get(v147, v143, (const llvm::APInt *)1);
              uint64_t v249 = (*(uint64_t (**)(uint64_t, unsigned __int8 **, void *))(*(void *)a4 + 16))(a4, &v265, v148);
              uint64_t v250 = v149;
              int v251 = 1;
              goto LABEL_204;
            }
            if ((*(unsigned char *)(v80 + 3) & 0x81) != 0)
            {
              do
              {
                uint64_t v80 = *(void *)(v80 + 24);
                if (!v80) {
                  goto LABEL_189;
                }
              }
              while ((*(_DWORD *)v80 & 0x81000000) != 0);
            }
            uint64_t v81 = *(void *)(v80 + 8);
            if (**(_WORD **)(v81 + 16) == 45)
            {
LABEL_93:
              uint64_t v82 = *(void *)(v81 + 32);
              uint64_t v83 = *(unsigned int *)(v82 + 36);
              if ((v83 & 0x80000000) != 0) {
                unsigned int v84 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v83 & 0x7FFFFFFF) + 8);
              }
              else {
                unsigned int v84 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v83);
              }
              uint64_t v85 = *v84;
              if ((*(unsigned char *)(v85 + 3) & 1) == 0) {
                uint64_t v85 = *(void *)(v85 + 24);
              }
              if (**(_WORD **)(*(void *)(v85 + 8) + 16) != 127)
              {
                uint64_t v86 = *(unsigned int *)(v82 + 68);
                if ((v86 & 0x80000000) != 0) {
                  unsigned int v87 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v86 & 0x7FFFFFFF) + 8);
                }
                else {
                  unsigned int v87 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v86);
                }
                uint64_t v88 = *v87;
                if ((*(unsigned char *)(v88 + 3) & 1) == 0) {
                  uint64_t v88 = *(void *)(v88 + 24);
                }
                if (**(_WORD **)(*(void *)(v88 + 8) + 16) != 127)
                {
                  while (1)
                  {
                    uint64_t v80 = *(void *)(v80 + 24);
                    if (!v80) {
                      goto LABEL_189;
                    }
                    if ((*(_DWORD *)v80 & 0x81000000) == 0)
                    {
                      uint64_t v89 = *(void *)(v80 + 8);
                      if (v89 != v81)
                      {
                        uint64_t v81 = *(void *)(v80 + 8);
                        if (**(_WORD **)(v89 + 16) == 45) {
                          goto LABEL_93;
                        }
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
          if (sub_1CBAAFBA4(v245, a3) & 1) != 0 || (sub_1CBAB2604((uint64_t *)v245, a3)) {
            return 1;
          }
        }
        return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
      }
      sub_1CC73C44C(*(_DWORD *)(*(void *)(a3 + 32) + 68), v9, 1, (uint64_t)&v261);
      if (v264)
      {
        unsigned int v43 = v262;
        uint64_t v44 = v261;
        uint64_t v45 = v261;
        if (v262 >= 0x41)
        {
          int v46 = 0;
          int64_t v47 = ((unint64_t)v262 + 63) >> 6;
          do
          {
            if (v47-- < 1) {
              break;
            }
            unint64_t v49 = *(void *)(v261 + 8 * v47);
            v46 += __clz(v49);
          }
          while (!v49);
          int v50 = v262 | 0xFFFFFFC0;
          if ((v262 & 0x3F) == 0) {
            int v50 = 0;
          }
          if ((v262 - v46 - v50) > 0x40) {
            goto LABEL_60;
          }
          uint64_t v45 = *(void *)v261;
        }
        if (!v45)
        {
          int v121 = 2;
          goto LABEL_251;
        }
LABEL_60:
        uint64_t v51 = *(void *)(a3 + 32);
        int v52 = *(_DWORD *)(v51 + 4);
        if (v52 < 0 && (v52 & 0x7FFFFFFFu) < *(_DWORD *)(v9 + 432)) {
          unint64_t v53 = *(void *)(*(void *)(v9 + 424) + 8 * (v52 & 0x7FFFFFFF));
        }
        else {
          unint64_t v53 = 0;
        }
        if (v262 > 0x40) {
          operator new[]();
        }
        uint8x8_t v120 = (uint8x8_t)vcnt_s8((int8x8_t)v261);
        v120.i16[0] = vaddlv_u8(v120);
        if (v120.u32[0] != 1 || (((unint64_t)v261 >> (v262 - 1)) & 1) != 0)
        {
          int v121 = 2;
LABEL_249:
          if (!v264) {
            goto LABEL_254;
          }
          unsigned int v43 = v262;
LABEL_251:
          if (v43 >= 0x41 && v261) {
            MEMORY[0x1D25D9CB0](v261, 0x1000C8000313F17);
          }
LABEL_254:
          if (v121 != 2) {
            return 1;
          }
          return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
        }
        int v240 = *(_DWORD *)(v51 + 36);
        uint64_t v246 = (void *)v53;
        LODWORD(v247) = 0;
        unint64_t v154 = v261 - 1;
        unint64_t v155 = (unsigned __int16)(v53 >> 19);
        if ((v53 & 2) == 0) {
          unint64_t v155 = (v53 >> 19);
        }
        if ((v53 & 4) == 0) {
          unint64_t v155 = (unsigned __int16)(v53 >> 3);
        }
        unint64_t v156 = (v53 >> 3);
        if (v53) {
          unint64_t v157 = (v53 >> 3);
        }
        else {
          unint64_t v157 = v155;
        }
        int v158 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), (llvm::LLVMContext *)v157);
        BOOL v159 = llvm::ConstantInt::get(v158, v154, (const llvm::APInt *)1);
        uint64_t v160 = (*(uint64_t (**)(uint64_t, void **, void *))(*(void *)a4 + 16))(a4, &v246, v159);
        uint64_t v162 = v161;
        if (**(_WORD **)(a3 + 16) == 61)
        {
          v265 = (unsigned __int8 *)v53;
          int v266 = 0;
          LODWORD(v246) = v240;
          LODWORD(v248) = 0;
          uint64_t v249 = v160;
          uint64_t v250 = v161;
          int v251 = 1;
          uint64_t v163 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 **, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 65, &v265, 1, &v246, 2, 0);
          uint64_t v233 = v164;
          uint64_t v234 = v163;
          uint64_t v246 = (void *)v53;
          LODWORD(v247) = 0;
          unint64_t v165 = (unsigned __int16)(v53 >> 19);
          if ((v53 & 2) == 0) {
            unint64_t v165 = (v53 >> 19);
          }
          if ((v53 & 4) == 0) {
            unint64_t v165 = (unsigned __int16)(v53 >> 3);
          }
          if (v53) {
            unint64_t v166 = (v53 >> 3);
          }
          else {
            unint64_t v166 = v165;
          }
          uint64_t v167 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), (llvm::LLVMContext *)v166);
          uint64_t v168 = llvm::ConstantInt::get(v167, -v44, (const llvm::APInt *)1);
          uint64_t v169 = (*(uint64_t (**)(uint64_t, void **, void *))(*(void *)a4 + 16))(a4, &v246, v168);
          v265 = (unsigned __int8 *)v53;
          int v266 = 0;
          LODWORD(v246) = v240;
          LODWORD(v248) = 0;
          uint64_t v249 = v169;
          uint64_t v250 = v170;
          int v251 = 1;
          uint64_t v171 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 **, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 66, &v265, 1, &v246, 2, 0);
          uint64_t v231 = v172;
          uint64_t v232 = v171;
          v265 = (unsigned __int8 *)v53;
          int v266 = 0;
          if ((v53 & 1) == 0)
          {
            if ((v53 & 4) != 0)
            {
              if ((v53 & 2) != 0) {
                unint64_t v156 = (unsigned __int16)(v53 >> 19);
              }
              else {
                unint64_t v156 = (v53 >> 19);
              }
            }
            else
            {
              unint64_t v156 = (unsigned __int16)(v53 >> 3);
            }
          }
          uint64_t v173 = llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), (llvm::LLVMContext *)v156);
          uint64_t v175 = *(llvm::ConstantInt **)v173;
          unsigned int v176 = *(_DWORD *)(v173 + 8);
          LODWORD(v247) = v176 >> 8;
          if (v176 >> 8 >= 0x41) {
            operator new[]();
          }
          uint64_t v246 = 0;
          unsigned int v177 = llvm::ConstantInt::get(v175, (llvm::LLVMContext *)&v246, v174);
          if (v247 >= 0x41 && v246) {
            MEMORY[0x1D25D9CB0](v246, 0x1000C8000313F17);
          }
          uint64_t v178 = (*(uint64_t (**)(uint64_t, unsigned __int8 **, void *))(*(void *)a4 + 16))(a4, &v265, v177);
          uint64_t v236 = v179;
          uint64_t v238 = v178;
          int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v9, "", 0);
          unint64_t v181 = IncompleteVirtualRegister & 0x7FFFFFFF;
          *(void *)(*(void *)(v9 + 24) + 16 * v181) = 4;
          unint64_t v182 = *(unsigned int *)(v9 + 432);
          if (v181 >= v182)
          {
            uint64_t v183 = *(void *)(v9 + 440);
            uint64_t v184 = v181 + 1 - v182;
            if (v181 >= *(unsigned int *)(v9 + 436)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v185 = *(_DWORD *)(v9 + 432);
            if (v184)
            {
              uint64_t v186 = (void *)(*(void *)(v9 + 424) + 8 * *(unsigned int *)(v9 + 432));
              uint64_t v187 = ~v181 + v182;
              do
              {
                *v186++ = v183;
                BOOL v59 = __CFADD__(v187++, 1);
              }
              while (!v59);
              int v185 = *(_DWORD *)(v9 + 432);
            }
            *(_DWORD *)(v9 + 432) = v185 + v184;
          }
          int v235 = v52;
          *(void *)(*(void *)(v9 + 424) + 8 * v181) = v53;
          uint64_t v188 = *(void *)(v9 + 8);
          if (v188)
          {
            int v226 = IncompleteVirtualRegister;
            (*(void (**)(uint64_t))(*(void *)v188 + 24))(v188);
            int IncompleteVirtualRegister = v226;
          }
          LODWORD(v265) = IncompleteVirtualRegister;
          int v266 = 1;
          LODWORD(v246) = 32;
          LODWORD(v248) = 2;
          uint64_t v249 = v234;
          uint64_t v250 = v233;
          int v251 = 1;
          uint64_t v252 = v238;
          uint64_t v253 = v236;
          int v254 = 1;
          uint64_t v255 = v234;
          uint64_t v256 = v233;
          int v257 = 1;
          uint64_t v258 = v232;
          uint64_t v259 = v231;
          int v260 = 1;
          int v189 = IncompleteVirtualRegister;
          (*(void (**)(uint64_t, uint64_t, unsigned __int8 **, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 51, &v265, 1, &v246, 5, 0);
          LODWORD(v265) = v235;
          int v266 = 1;
          LODWORD(v246) = 40;
          LODWORD(v248) = 2;
          LODWORD(v249) = v240;
          int v251 = 0;
          uint64_t v252 = v238;
          uint64_t v253 = v236;
          int v254 = 1;
          LODWORD(v255) = v189;
          int v257 = 0;
          uint64_t v258 = v234;
          uint64_t v259 = v233;
          int v260 = 1;
          (*(void (**)(uint64_t, uint64_t, unsigned __int8 **, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 51, &v265, 1, &v246, 5, 0);
LABEL_248:
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
          int v121 = 1;
          goto LABEL_249;
        }
        uint64_t v190 = *(llvm::MachineFunction **)(a4 + 8);
        uint64_t v191 = *(void *)(*(void *)(a4 + 16) + 8) + 3120;
        uint64_t v192 = *(unsigned __int8 **)(a4 + 32);
        v265 = v192;
        if (v192) {
          llvm::MetadataTracking::track((uint64_t)&v265, v192, 2);
        }
        unint64_t v193 = llvm::MachineFunction::CreateMachineInstr(v190, v191, &v265, 0);
        if (v265)
        {
          int v227 = *v265;
          if ((v227 - 4) > 0x1E)
          {
            if ((v227 - 3) >= 0xFFFFFFFE) {
              uint64_t v230 = v265;
            }
            else {
              uint64_t v230 = 0;
            }
            if ((v227 - 3) < 0xFFFFFFFE)
            {
              if (v227 == 3) {
                *((void *)v265 + 1) = 0;
              }
              goto LABEL_242;
            }
            unint64_t v229 = (unint64_t)(v230 + 8);
          }
          else
          {
            if ((v265[1] & 0x7F) != 2 && !*((_DWORD *)v265 + 3)) {
              goto LABEL_242;
            }
            uint64_t v228 = *((void *)v265 + 2);
            if ((v228 & 4) == 0) {
              goto LABEL_242;
            }
            unint64_t v229 = v228 & 0xFFFFFFFFFFFFFFF8;
            if (!v229) {
              goto LABEL_242;
            }
          }
          uint64_t v246 = &v265;
          sub_1CC5FA668(v229 + 16, &v246);
        }
LABEL_242:
        uint64_t v194 = *(unint64_t **)(a4 + 48);
        uint64_t v195 = *(void *)(*(void *)(a4 + 40) + 40);
        *((void *)v193 + 3) = v195;
        uint64_t v196 = *(void *)(v195 + 32);
        uint64_t v197 = *((unsigned int *)v193 + 10);
        if (v197)
        {
          uint64_t v219 = *((void *)v193 + 4);
          uint64_t v220 = *(void *)(v196 + 40);
          uint64_t v221 = 32 * v197;
          do
          {
            if (!*(unsigned char *)v219)
            {
              uint64_t v222 = *(unsigned int *)(v219 + 4);
              if ((int)v222 >= 0) {
                uint64_t v223 = (uint64_t *)(*(void *)(v220 + 272) + 8 * v222);
              }
              else {
                uint64_t v223 = (uint64_t *)(*(void *)(v220 + 24) + 16 * (v222 & 0x7FFFFFFF) + 8);
              }
              uint64_t v224 = *v223;
              if (*v223)
              {
                uint64_t v225 = *(void *)(v224 + 16);
                *(void *)(v224 + 16) = v219;
                *(void *)(v219 + 16) = v225;
                if (*(unsigned char *)(v219 + 3))
                {
                  *(void *)(v219 + 24) = v224;
                }
                else
                {
                  *(void *)(v219 + 24) = 0;
                  uint64_t v223 = (uint64_t *)(v225 + 24);
                }
              }
              else
              {
                *(void *)(v219 + 16) = v219;
                *(void *)(v219 + 24) = 0;
              }
              *uint64_t v223 = v219;
            }
            v219 += 32;
            v221 -= 32;
          }
          while (v221);
        }
        uint64_t v198 = *(void *)(v196 + 728);
        if (v198) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v198 + 24))(v198, v193);
        }
        unint64_t v199 = *v194 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v193 = v199 | *(void *)v193 & 7;
        *((void *)v193 + 1) = v194;
        *(void *)(v199 + 8) = v193;
        *uint64_t v194 = *v194 & 7 | (unint64_t)v193;
        uint64_t v200 = *(void *)(a4 + 56);
        if (v200) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v200 + 24))(v200, v193);
        }
        uint64_t v247 = 0;
        uint64_t v248 = 0;
        uint64_t v249 = 0;
        LODWORD(v246) = 0x1000000;
        HIDWORD(v246) = v52;
        llvm::MachineInstr::addOperand(v193, v190, (const llvm::MachineOperand *)&v246);
        uint64_t v247 = 0;
        uint64_t v248 = 0;
        LODWORD(v246) = 0;
        HIDWORD(v246) = v240;
        uint64_t v249 = 0;
        llvm::MachineInstr::addOperand(v193, v190, (const llvm::MachineOperand *)&v246);
        int v201 = *(_DWORD *)(*(void *)(v162 + 32) + 4);
        uint64_t v247 = 0;
        uint64_t v248 = 0;
        LODWORD(v246) = 0;
        HIDWORD(v246) = v201;
        uint64_t v249 = 0;
        llvm::MachineInstr::addOperand(v193, v190, (const llvm::MachineOperand *)&v246);
        goto LABEL_248;
      }
      return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
    }
    if (v10 != 77)
    {
      if (v10 != 79)
      {
        if (v10 != 90) {
          return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
        }
        uint64_t v24 = *(void *)(a3 + 32);
        __int32 v25 = *(_DWORD *)(v24 + 4);
        if ((v25 & 0x80000000) == 0 || (v25 & 0x7FFFFFFFu) >= *(_DWORD *)(v9 + 432)) {
          return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
        }
        unint64_t v26 = *(void *)(*(void *)(v9 + 424) + 8 * (v25 & 0x7FFFFFFF));
        if ((v26 & 0xFFFFFFFFFFFFFFF9) == 0
          || (*(void *)(*(void *)(v9 + 424) + 8 * (v25 & 0x7FFFFFFF)) & 6) != 2)
        {
          return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
        }
        char v28 = 35;
        if ((v26 & 4) == 0) {
          char v28 = 19;
        }
        uint64_t v29 = (v26 >> v28) & 0xFFFFFF;
        if (v29 != 3 && v29 != 0) {
          return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
        }
        int v31 = *(_DWORD *)(v24 + 36);
        uint64_t v32 = *(void *)(a3 + 48);
        if ((v32 & 7) != 0)
        {
          unint64_t v33 = *(void *)((v32 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(a3 + 48) = v32 & 0xFFFFFFFFFFFFFFF8;
        }
        MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(*(void *)(*(void *)(a3 + 24) + 32), v33, 0, 257);
        uint64_t v261 = 257;
        LODWORD(v262) = 0;
        LODWORD(v246) = v31;
        LODWORD(v248) = 0;
        uint64_t v206 = sub_1CC737934((void *)a4, 0x5Au, (int *)&v261, (int *)&v246, MachineMemOperand);
        uint64_t v23 = 1;
        LODWORD(v261) = v25;
        LODWORD(v262) = 1;
        uint64_t v246 = v206;
        uint64_t v247 = v207;
        LODWORD(v248) = 1;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 81, &v261, 1, &v246, 1, 0);
LABEL_267:
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
        return v23;
      }
      return sub_1CC6ECA4C((uint64_t *)v245, (llvm::MachineInstr *)a3);
    }
    int v91 = *(_DWORD *)(*(void *)(a3 + 32) + 4);
    if (v91 < 0 && (uint64_t v92 = v91 & 0x7FFFFFFF, v92 < *(_DWORD *)(v9 + 432)))
    {
      unint64_t v93 = *(void *)(*(void *)(v9 + 424) + 8 * v92);
      unint64_t v244 = v93;
      if ((v93 & 2) != 0)
      {
        BOOL v94 = 0;
        goto LABEL_142;
      }
    }
    else
    {
      unint64_t v93 = 0;
      unint64_t v244 = 0;
    }
    char v114 = 3;
    if ((v93 & 1) == 0) {
      char v114 = 19;
    }
    BOOL v94 = (v93 & 0x8000000000000000 | (8 * (v93 >> v114))) == 64;
LABEL_142:
    uint64_t v116 = (llvm::LLVMContext *)sub_1CB8F1DC4(&v244);
    if (v115 == 1)
    {
      if (!v94) {
        return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
      }
    }
    else if (!v94)
    {
      return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
    }
    if ((v116 - 16) <= 0x30 && ((1 << (v116 - 16)) & 0x1000000010001) != 0)
    {
      uint64_t v246 = &v248;
      uint64_t v247 = 0x800000000;
      if (*(_DWORD *)(a3 + 40) >= 2u)
      {
        unint64_t v117 = 1;
        uint64_t v118 = 36;
        do
        {
          sub_1CC73C824(*(_DWORD *)(*(void *)(a3 + 32) + v118), v9, 0, 0, (uint64_t)&v261);
          if (!v264) {
            break;
          }
          if (v262 > 0x40) {
            uint64_t v119 = *(void *)v261;
          }
          else {
            uint64_t v119 = v261 << -(char)v262 >> -(char)v262;
          }
          if (v247 >= (unint64_t)HIDWORD(v247)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v246 + v247) = v119;
          LODWORD(v247) = v247 + 1;
          if (v264 && v262 >= 0x41 && v261) {
            MEMORY[0x1D25D9CB0](v261, 0x1000C8000313F17);
          }
          ++v117;
          v118 += 32;
        }
        while (v117 < *(unsigned int *)(a3 + 40));
      }
      uint64_t v122 = v247;
      unint64_t v123 = v244;
      uint64_t v124 = 0x800000000000000;
      if ((v244 & 2) == 0) {
        uint64_t v124 = 0x8000000000000;
      }
      if ((v124 & v244) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v115);
        unint64_t v123 = v244;
      }
      uint64_t v125 = (unsigned __int16)(v123 >> 3);
      if (v125 == v122)
      {
        uint64_t v237 = v122;
        unint64_t v126 = 0;
        uint64_t v127 = 0;
        unint64_t v128 = 0;
        while (1)
        {
          if ((v123 & 2) != 0) {
            uint64_t v129 = 0x800000000000000;
          }
          else {
            uint64_t v129 = 0x8000000000000;
          }
          if ((v129 & v123) != 0)
          {
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v115);
            unint64_t v123 = v244;
          }
          if (v126 >= (unsigned __int16)(v123 >> 3)) {
            break;
          }
          v128 |= (unint64_t)*((unsigned __int8 *)v246 + v127) << v127;
          v127 += 8;
          ++v126;
        }
        uint64_t v261 = (8 * v116) | 1;
        LODWORD(v262) = 0;
        uint64_t v150 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), v116);
        int v151 = llvm::ConstantInt::get(v150, v128, (const llvm::APInt *)1);
        uint64_t v152 = (*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)a4 + 16))(a4, &v261, v151);
        LODWORD(v265) = *(_DWORD *)(*(void *)(a3 + 32) + 4);
        int v266 = 1;
        uint64_t v261 = v152;
        uint64_t v262 = v153;
        int v263 = 1;
        sub_1CC7382B0(a4);
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
        uint64_t v122 = v237;
      }
      if (v246 != &v248) {
        free(v246);
      }
      if (v125 == v122) {
        return 1;
      }
    }
    return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
  }
  if (**(unsigned __int16 **)(a3 + 16) > 0xB3u)
  {
    if (v10 - 180 < 2)
    {
      uint64_t v34 = *(void *)(a3 + 32);
      uint64_t v35 = *(unsigned int *)(v34 + 36);
      if ((v35 & 0x80000000) != 0) {
        unsigned int v36 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
      }
      else {
        unsigned int v36 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v35);
      }
      uint64_t v37 = *v36;
      if ((*(unsigned char *)(v37 + 3) & 1) == 0) {
        uint64_t v37 = *(void *)(v37 + 24);
      }
      uint64_t v38 = *(void *)(v37 + 8);
      if ((**(_WORD **)(v38 + 16) & 0xFFFE) == 0x74)
      {
        uint64_t v39 = *(unsigned int *)(v38 + 40);
        if (v39)
        {
          uint64_t v40 = *(void *)(v38 + 32);
          uint64_t v41 = (_DWORD *)(v40 + 16);
          uint64_t v42 = v39;
          while (*((unsigned char *)v41 - 16) != 17)
          {
            v41 += 8;
            if (!--v42) {
              goto LABEL_182;
            }
          }
          if (*v41 == 2445)
          {
            uint64_t v130 = 47;
          }
          else
          {
LABEL_182:
            for (uint64_t i = (_DWORD *)(v40 + 16); *((unsigned char *)i - 16) != 17; i += 8)
            {
              if (!--v39) {
                return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
              }
            }
            if (*i != 2446) {
              return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
            }
            uint64_t v130 = 48;
          }
          uint64_t v23 = 1;
          LODWORD(v261) = *(_DWORD *)(v34 + 4);
          LODWORD(v262) = 1;
          uint64_t v132 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void, void, void))(*(void *)a4 + 32))(a4, 320, &v261, 1, 0, 0, 0);
          LODWORD(v246) = 1;
          uint64_t v247 = 0;
          uint64_t v248 = (unint64_t *)v130;
          llvm::MachineInstr::addOperand(v133, v132, (const llvm::MachineOperand *)&v246);
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
          return v23;
        }
      }
      return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
    }
    if (v10 != 206) {
      return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
    }
    return sub_1CC6ECE68((uint64_t *)v245, (llvm::MachineInstr *)a3);
  }
  if (v10 == 126)
  {
    uint64_t v95 = *(void *)(a3 + 32);
    __int32 v96 = *(_DWORD *)(v95 + 4);
    if (v96 < 0)
    {
      unint64_t v97 = *(unsigned int *)(v9 + 432);
      if ((v96 & 0x7FFFFFFFu) < v97)
      {
        uint64_t v98 = *(void *)(v9 + 424);
        if (*(void *)(v98 + 8 * (v96 & 0x7FFFFFFF)) == 513)
        {
          uint64_t v99 = *(unsigned int *)(v95 + 36);
          uint64_t v100 = (uint64_t *)((v99 & 0x80000000) != 0
                           ? *(void *)(v9 + 24) + 16 * (v99 & 0x7FFFFFFF) + 8
                           : *(void *)(v9 + 272) + 8 * v99);
          uint64_t v101 = *v100;
          if (v101)
          {
            if ((*(unsigned char *)(v101 + 3) & 1) != 0
              || (uint64_t v101 = *(void *)(v101 + 24)) != 0 && (*(unsigned char *)(v101 + 3) & 1) != 0)
            {
              uint64_t v102 = *(void *)(v101 + 8);
              if (v102)
              {
                if (**(_WORD **)(v102 + 16) == 119 && *(_DWORD *)(v102 + 40) == 2)
                {
                  int v103 = *(_DWORD *)(*(void *)(v102 + 32) + 36);
                  if ((v99 & 0x80000000) != 0 && (unint64_t v104 = v99 & 0x7FFFFFFF, v104 < v97)) {
                    unsigned int v105 = *(unsigned __int8 **)(v98 + 8 * v104);
                  }
                  else {
                    unsigned int v105 = 0;
                  }
                  unint64_t v244 = (unint64_t)v105;
                  if (v103 < 0 && (v103 & 0x7FFFFFFFu) < v97) {
                    unint64_t v208 = *(void *)(v98 + 8 * (v103 & 0x7FFFFFFF));
                  }
                  else {
                    unint64_t v208 = 0;
                  }
                  unsigned int v210 = sub_1CB8F1DC4(&v244);
                  if (v209 == 1) {
                  if (v210 > 0x40)
                  }
                    operator new[]();
                  if (v210) {
                    unint64_t v211 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v210;
                  }
                  else {
                    unint64_t v211 = 0;
                  }
                  v265 = (unsigned __int8 *)v208;
                  int v266 = 0;
                  if (v208)
                  {
                    unint64_t v212 = (v208 >> 3);
                  }
                  else if ((v208 & 4) != 0)
                  {
                    if ((v208 & 2) != 0) {
                      unint64_t v212 = (unsigned __int16)(v208 >> 19);
                    }
                    else {
                      unint64_t v212 = (v208 >> 19);
                    }
                  }
                  else
                  {
                    unint64_t v212 = (unsigned __int16)(v208 >> 3);
                  }
                  int v213 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), (llvm::LLVMContext *)v212);
                  uint64_t v214 = llvm::ConstantInt::get(v213, v211, (const llvm::APInt *)1);
                  uint64_t v215 = (*(uint64_t (**)(uint64_t, unsigned __int8 **, void *))(*(void *)a4 + 16))(a4, &v265, v214);
                  uint64_t v261 = v208;
                  LODWORD(v262) = 0;
                  LODWORD(v246) = v103;
                  LODWORD(v248) = 0;
                  uint64_t v249 = v215;
                  uint64_t v250 = v216;
                  int v251 = 1;
                  uint64_t v217 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 65, &v261, 1, &v246, 2, 0);
                  LODWORD(v261) = v96;
                  LODWORD(v262) = 1;
                  uint64_t v246 = v217;
                  uint64_t v247 = v218;
                  LODWORD(v248) = 1;
                  sub_1CC738034((void *)a4, 126, (unint64_t *)&v261, (int *)&v246);
                  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
                  return 1;
                }
              }
            }
          }
        }
      }
    }
    return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
  }
  if (v10 == 136)
  {
    uint64_t v106 = *(_DWORD **)(a3 + 32);
    int v107 = v106[1];
    if ((v107 & 0x80000000) == 0) {
      return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
    }
    uint64_t v108 = v107 & 0x7FFFFFFF;
    if (v108 >= *(_DWORD *)(v9 + 432) || *(void *)(*(void *)(v9 + 424) + 8 * v108) != 9) {
      return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
    }
    int v109 = v106[9];
    unsigned int v110 = v106[17];
    int v111 = v106[25];
    sub_1CC73C210(v110, v9, (uint64_t)&v246);
    if ((_BYTE)v248)
    {
      if (v247 > 0x40)
      {
        if (v246) {
          MEMORY[0x1D25D9CB0](v246, 0x1000C8000313F17);
        }
        unint64_t v203 = 0;
        uint64_t v204 = 0;
        uint64_t v112 = 0;
      }
      else
      {
        unint64_t v203 = ((uint64_t)((void)v246 << -(char)v247) >> -(char)v247) & 0xFFFFFFFFFFFFFF00;
        uint64_t v204 = ((uint64_t)((void)v246 << -(char)v247) >> -(char)v247);
        uint64_t v112 = 1;
      }
      unint64_t v113 = v204 | v203;
    }
    else
    {
      uint64_t v112 = 0;
      unint64_t v113 = 0;
    }
    if (v109 != v110 && (!v112 || !v113)) {
      return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
    }
    uint64_t v23 = 1;
    LODWORD(v261) = *(_DWORD *)(*(void *)(a3 + 32) + 4);
    LODWORD(v262) = 1;
    LODWORD(v246) = v109;
    LODWORD(v248) = 0;
    LODWORD(v249) = v111;
    int v251 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 66, &v261, 1, &v246, 2, 0);
    goto LABEL_267;
  }
  if (v10 != 168) {
    return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
  }
  uint64_t v13 = *(_DWORD **)(a3 + 32);
  LODWORD(v261) = v13[1];
  uint64_t v14 = v13[9];
  if ((v14 & 0x80000000) != 0) {
    uint64_t v15 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v15 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v14);
  }
  uint64_t v16 = *v15;
  if ((*(unsigned char *)(v16 + 3) & 1) == 0) {
    uint64_t v16 = *(void *)(v16 + 24);
  }
  uint64_t v17 = *(void *)(v16 + 8);
  if (**(_WORD **)(v17 + 16) != 121) {
    return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
  }
  uint64_t v18 = *(void *)(*(void *)(v17 + 32) + 48);
  if (!v18) {
    return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
  }
  int v19 = v13[17];
  if (!sub_1CB844168(v18, 1.0)) {
    return sub_1CBAB8F90((uint64_t *)v245, (llvm::MachineInstr *)a3);
  }
  uint64_t v20 = sub_1CC7390C0((void *)a4, 253, (int *)&v261, 1, 0);
  uint64_t v22 = v21;
  uint64_t v247 = 0;
  uint64_t v248 = 0;
  LODWORD(v246) = 0;
  HIDWORD(v246) = v19;
  uint64_t v249 = 0;
  llvm::MachineInstr::addOperand(v21, v20, (const llvm::MachineOperand *)&v246);
  *((_WORD *)v22 + 22) = *((_WORD *)v22 + 22) & 0xC | *(_WORD *)(a3 + 44) & 0xFFF3;
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
  return 1;
}

const char *sub_1CBAAAD08()
{
  return "AGX2PreLegalizerCombiner";
}

uint64_t sub_1CBAAAD18(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5 = *a3;
  if ((v5 & 0x80000000) != 0) {
    uint64_t v6 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v6 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v5);
  }
  uint64_t v7 = *v6;
  if (!v7) {
    return 0;
  }
  if ((*(unsigned char *)(v7 + 3) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v7 + 24);
    if (!v7 || (*(unsigned char *)(v7 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(v7 + 8);
  if (!v8 || **(_WORD **)(v8 + 16) != 65 || *(_DWORD *)(v8 + 40) != 3) {
    return 0;
  }
  uint64_t v9 = *(unsigned int *)(*(void *)(v8 + 32) + 36);
  if ((v9 & 0x80000000) != 0) {
    unsigned int v10 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v10 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v9);
  }
  uint64_t v11 = *v10;
  if (!v11) {
    goto LABEL_16;
  }
  while ((*(unsigned char *)(v11 + 3) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v11 + 24);
    if (!v11) {
      goto LABEL_16;
    }
  }
  while (1)
  {
    uint64_t v11 = *(void *)(v11 + 24);
    if (!v11) {
      break;
    }
    if ((*(unsigned char *)(v11 + 3) & 1) == 0) {
      goto LABEL_16;
    }
  }
  uint64_t v13 = (uint64_t *)((v9 & 0x80000000) != 0
                  ? *(void *)(a2 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8
                  : *(void *)(a2 + 272) + 8 * v9);
  uint64_t v14 = *v13;
  if (!v14) {
    goto LABEL_16;
  }
  if ((*(unsigned char *)(v14 + 3) & 1) == 0)
  {
    uint64_t v14 = *(void *)(v14 + 24);
    if (!v14 || (*(unsigned char *)(v14 + 3) & 1) == 0) {
      goto LABEL_16;
    }
  }
  uint64_t v15 = *(void *)(v14 + 8);
  if (!v15) {
    goto LABEL_16;
  }
  if (**(_WORD **)(v15 + 16) != 128) {
    goto LABEL_16;
  }
  if (*(_DWORD *)(v15 + 40) != 3) {
    goto LABEL_16;
  }
  uint64_t v16 = *(void *)(v15 + 32);
  **(_DWORD **)a1 = *(_DWORD *)(v16 + 36);
  sub_1CC73C210(*(_DWORD *)(v16 + 68), a2, (uint64_t)&v18);
  if (!v20) {
    goto LABEL_16;
  }
  if (v19 < 0x41)
  {
    **(void **)(a1 + 8) = v18 << -(char)v19 >> -(char)v19;
    sub_1CC73C210(*(_DWORD *)(*(void *)(v8 + 32) + 68), a2, (uint64_t)&v18);
    if (!v20) {
      goto LABEL_16;
    }
    if (v19 < 0x41)
    {
      **(void **)(a1 + 16) = v18 << -(char)v19 >> -(char)v19;
      return 1;
    }
  }
  if (v18) {
    MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
  }
LABEL_16:
  sub_1CC73C210(*(_DWORD *)(*(void *)(v8 + 32) + 36), a2, (uint64_t)&v18);
  if (!v20) {
    return 0;
  }
  if (v19 >= 0x41)
  {
    if (v18) {
      MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
    }
    return 0;
  }
  **(void **)(a1 + 16) = v18 << -(char)v19 >> -(char)v19;
  unsigned int v17 = *(_DWORD *)(*(void *)(v8 + 32) + 68);

  return sub_1CBAAAFC0(a1, a2, v17);
}

uint64_t sub_1CBAAAFC0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0) {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a3);
  }
  uint64_t v6 = *v5;
  if (!v6) {
    return 0;
  }
  while ((*(unsigned char *)(v6 + 3) & 1) != 0)
  {
    uint64_t v6 = *(void *)(v6 + 24);
    if (!v6) {
      return 0;
    }
  }
  uint64_t result = 0;
  while (1)
  {
    uint64_t v6 = *(void *)(v6 + 24);
    if (!v6) {
      break;
    }
    if ((*(unsigned char *)(v6 + 3) & 1) == 0) {
      return result;
    }
  }
  uint64_t result = llvm::MachineRegisterInfo::getVRegDef(a2, a3);
  if (result)
  {
    if (**(_WORD **)(result + 16) == 128 && *(_DWORD *)(result + 40) == 3)
    {
      uint64_t v8 = *(void *)(result + 32);
      **(_DWORD **)a1 = *(_DWORD *)(v8 + 36);
      unint64_t v9 = sub_1CC73C9C0(*(_DWORD *)(v8 + 68), a2);
      if (v10)
      {
        **(void **)(a1 + 8) = v9;
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CBAAB09C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5 = *a3;
  if ((v5 & 0x80000000) != 0) {
    uint64_t v6 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v6 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v5);
  }
  uint64_t v7 = *v6;
  if (!v7) {
    return 0;
  }
  if ((*(unsigned char *)(v7 + 3) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v7 + 24);
    if (!v7 || (*(unsigned char *)(v7 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(v7 + 8);
  if (!v8 || **(_WORD **)(v8 + 16) != 65 || *(_DWORD *)(v8 + 40) != 3) {
    return 0;
  }
  uint64_t v9 = *(unsigned int *)(*(void *)(v8 + 32) + 36);
  if ((v9 & 0x80000000) != 0) {
    char v10 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  }
  else {
    char v10 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v9);
  }
  uint64_t v11 = *v10;
  if (!v11) {
    goto LABEL_16;
  }
  while ((*(unsigned char *)(v11 + 3) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v11 + 24);
    if (!v11) {
      goto LABEL_16;
    }
  }
  while (1)
  {
    uint64_t v11 = *(void *)(v11 + 24);
    if (!v11) {
      break;
    }
    if ((*(unsigned char *)(v11 + 3) & 1) == 0) {
      goto LABEL_16;
    }
  }
  uint64_t v13 = (uint64_t *)((v9 & 0x80000000) != 0
                  ? *(void *)(a2 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8
                  : *(void *)(a2 + 272) + 8 * v9);
  uint64_t v14 = *v13;
  if (!v14) {
    goto LABEL_16;
  }
  if ((*(unsigned char *)(v14 + 3) & 1) == 0)
  {
    uint64_t v14 = *(void *)(v14 + 24);
    if (!v14 || (*(unsigned char *)(v14 + 3) & 1) == 0) {
      goto LABEL_16;
    }
  }
  uint64_t v15 = *(void *)(v14 + 8);
  if (!v15) {
    goto LABEL_16;
  }
  if (**(_WORD **)(v15 + 16) != 127) {
    goto LABEL_16;
  }
  if (*(_DWORD *)(v15 + 40) != 3) {
    goto LABEL_16;
  }
  uint64_t v16 = *(void *)(v15 + 32);
  **(_DWORD **)a1 = *(_DWORD *)(v16 + 36);
  sub_1CC73C210(*(_DWORD *)(v16 + 68), a2, (uint64_t)&v24);
  if (!v26) {
    goto LABEL_16;
  }
  if (v25 >= 0x41) {
    goto LABEL_57;
  }
  **(void **)(a1 + 8) = v24 << -(char)v25 >> -(char)v25;
  sub_1CC73C210(*(_DWORD *)(*(void *)(v8 + 32) + 68), a2, (uint64_t)&v24);
  if (v26)
  {
    if (v25 < 0x41)
    {
      unint64_t v17 = v24 << -(uint64_t)v25 >> -(uint64_t)v25;
      uint64_t v18 = (unint64_t **)(a1 + 16);
LABEL_47:
      *int *v18 = v17;
      return 1;
    }
LABEL_57:
    if (v24) {
      MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
    }
  }
LABEL_16:
  sub_1CC73C210(*(_DWORD *)(*(void *)(v8 + 32) + 36), a2, (uint64_t)&v24);
  if (!v26) {
    return 0;
  }
  if (v25 >= 0x41)
  {
    if (v24) {
      MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
    }
    return 0;
  }
  **(void **)(a1 + 16) = v24 << -(char)v25 >> -(char)v25;
  uint64_t v19 = *(unsigned int *)(*(void *)(v8 + 32) + 68);
  char v20 = (uint64_t *)((v19 & 0x80000000) != 0
                  ? *(void *)(a2 + 24) + 16 * (v19 & 0x7FFFFFFF) + 8
                  : *(void *)(a2 + 272) + 8 * v19);
  uint64_t v21 = *v20;
  if (!v21) {
    return 0;
  }
  while ((*(unsigned char *)(v21 + 3) & 1) != 0)
  {
    uint64_t v21 = *(void *)(v21 + 24);
    if (!v21) {
      return 0;
    }
  }
  uint64_t result = 0;
  while (1)
  {
    uint64_t v21 = *(void *)(v21 + 24);
    if (!v21) {
      break;
    }
    if ((*(unsigned char *)(v21 + 3) & 1) == 0) {
      return result;
    }
  }
  uint64_t result = llvm::MachineRegisterInfo::getVRegDef(a2, v19);
  if (result)
  {
    if (**(_WORD **)(result + 16) == 127 && *(_DWORD *)(result + 40) == 3)
    {
      uint64_t v22 = *(void *)(result + 32);
      **(_DWORD **)a1 = *(_DWORD *)(v22 + 36);
      unint64_t v17 = sub_1CC73C9C0(*(_DWORD *)(v22 + 68), a2);
      if (v23)
      {
        uint64_t v18 = (unint64_t **)(a1 + 8);
        goto LABEL_47;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CBAAB3C4()
{
  int v3 = 1;
  v4.n128_u64[0] = (unint64_t)"Enable the agx2 pre legalization machine instruction combiner";
  v4.n128_u64[1] = 61;
  char v1 = 1;
  uint64_t v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCC0010, "enable-agx2-prelegalizer-combiner", &v3, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC0010, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Should enable CSE in AGX2 Prelegalizer Combiner";
  v4.n128_u64[1] = 47;
  int v3 = 0;
  char v1 = 1;
  uint64_t v2 = &v1;
  sub_1CD40E838((uint64_t)&unk_1EBCC00D0, "enable-cse-in-agx2-prelegalizer-combiner", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC00D0, &dword_1CB82C000);
}

void sub_1CBAAB4B4(uint64_t a1)
{
}

uint64_t sub_1CBAAB564(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC0190;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25F5A50;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC0198, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBAAB4B4;
    v5[1] = &PassRegistry;
    __n128 v4 = v5;
    std::__call_once(&qword_1EBCC0198, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CBAAB65C()
{
}

void sub_1CBAAB698(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  char v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    __n128 v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  int v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBAAB74C(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  int v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  __n128 v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CBAAB7F8(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
  *(unsigned char *)(a2 + 160) = 1;
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::SlotIndexes::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CBAAB8B0(void *a1, uint64_t a2)
{
  v22[8] = *MEMORY[0x1E4F143B8];
  __n128 v4 = (uint64_t *)a1[1];
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::MachineLoopInfo::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::MachineLoopInfo::ID);
  uint64_t v9 = (uint64_t *)a1[1];
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v10 == v11)
  {
LABEL_9:
    uint64_t v12 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v10 != &llvm::LiveIntervals::ID)
    {
      v10 += 16;
      if (v10 == v11) {
        goto LABEL_9;
      }
    }
    uint64_t v12 = *(void *)(v10 + 8);
  }
  a1[31] = (*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::LiveIntervals::ID);
  a1[32] = *(void *)(a2 + 40);
  a1[33] = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  uint64_t v13 = *(char **)(v8 + 272);
  uint64_t v14 = *(char **)(v8 + 280);
  char v20 = v22;
  uint64_t v21 = 0x800000000;
  sub_1CBAACC38((uint64_t)&v20, v13, v14);
  uint64_t v15 = *(uint64_t **)(v8 + 272);
  uint64_t v16 = *(uint64_t **)(v8 + 280);
  v18[0] = &unk_1F25F5B10;
  v18[1] = &v20;
  uint64_t v19 = v18;
  sub_1CD41C330(v15, v16, (uint64_t)v18);
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void))(*v19 + 40))();
  }
  if (v21)
  {
    LODWORD(v21) = v21 - 1;
    llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPreheader();
  }
  if (v20 != v22) {
    free(v20);
  }
  return 0;
}

uint64_t sub_1CBAAC4A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  v92[2] = *MEMORY[0x1E4F143B8];
  uint64_t v90 = v92;
  uint64_t v91 = 0x200000000;
  unsigned int v10 = *a5;
  if ((*a5 & 0xFFF00) != 0)
  {
    unsigned int v87 = v89;
    uint64_t v88 = 0x200000000;
    uint64_t v76 = *(void *)(a1 + 248);
    unsigned int v77 = a5[1];
    uint64_t v78 = v77 & 0x7FFFFFFF;
    uint64_t v79 = (void *)(v76 + 408);
    uint64_t v80 = *(unsigned int *)(v76 + 416);
    if ((v77 & 0x7FFFFFFF) >= v80)
    {
      sub_1CB9153B8((uint64_t)v79, v78 - v80 + 1, *(void *)(v76 + 424));
    }
    else
    {
      uint64_t v81 = *(void *)(*v79 + 8 * v78);
      if (v81)
      {
        uint64_t v82 = *(void *)(v81 + 104);
        if (v82)
        {
          uint64_t v83 = *(void *)(*(void *)(*(void *)(a1 + 264) + 232) + 8 * ((v10 >> 8) & 0xFFF));
          while (1)
          {
            uint64_t v84 = *(void *)(v82 + 112);
            uint64_t v85 = v84 & v83;
            if ((v84 & v83) != 0 && v85 != v84) {
              break;
            }
            if (v85)
            {
              if (v88 >= (unint64_t)HIDWORD(v88)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v87 + v88) = v82;
              LODWORD(v88) = v88 + 1;
            }
            uint64_t v82 = *(void *)(v82 + 104);
            if (!v82) {
              goto LABEL_107;
            }
          }
          LODWORD(v88) = 0;
        }
LABEL_107:
        sub_1CD41C56C((uint64_t)&v90, (uint64_t)&v87);
        if (v87 != v89) {
          free(v87);
        }
        unsigned int v17 = v91;
        goto LABEL_5;
      }
    }
    operator new();
  }
  uint64_t v11 = *(void *)(a1 + 248);
  unsigned int v12 = a5[1];
  uint64_t v13 = v12 & 0x7FFFFFFF;
  uint64_t v14 = (void *)(v11 + 408);
  uint64_t v15 = *(unsigned int *)(v11 + 416);
  if ((v12 & 0x7FFFFFFF) >= v15)
  {
    sub_1CB9153B8((uint64_t)v14, v13 - v15 + 1, *(void *)(v11 + 424));
LABEL_111:
    operator new();
  }
  uint64_t v16 = *(void *)(*v14 + 8 * v13);
  if (!v16) {
    goto LABEL_111;
  }
  *(void *)uint64_t v90 = v16;
  unsigned int v17 = v91 + 1;
  LODWORD(v91) = v91 + 1;
LABEL_5:
  uint64_t v18 = (uint64_t **)((char *)v90 + 8 * v17);
  if ((*((unsigned char *)a5 + 3) & 1) == 0)
  {
    if (v17)
    {
      unint64_t v19 = a2 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v20 = (a2 >> 1) & 3;
      uint64_t v21 = (uint64_t **)v90;
      while (1)
      {
        unsigned int v22 = *((_DWORD *)*v21 + 2);
        uint64_t v23 = **v21;
        if (!v22) {
          break;
        }
        uint64_t v24 = *(void *)(v23 + 24 * v22 - 16);
        unsigned int v25 = *(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3;
        unsigned int v26 = (v24 >> 1) & 3 | *(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 24);
        unint64_t v27 = *((unsigned int *)*v21 + 2);
        char v28 = (void *)**v21;
        unint64_t v29 = v27;
        if (v25 >= v26) {
          goto LABEL_18;
        }
        do
        {
          unint64_t v30 = v29 >> 1;
          uint64_t v31 = v28[3 * (v29 >> 1) + 1];
          LODWORD(v31) = (v31 >> 1) & 3 | *(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 24);
          v29 -= (v29 >> 1) + 1;
          BOOL v32 = v25 >= v31;
          if (v25 >= v31) {
            unint64_t v33 = v30 + 1;
          }
          else {
            unint64_t v33 = 0;
          }
          v28 += 3 * v33;
          if (!v32) {
            unint64_t v29 = v30;
          }
        }
        while (v29);
        unint64_t v27 = *((unsigned int *)*v21 + 2);
LABEL_19:
        uint64_t v34 = (void *)(v23 + 24 * v27);
        if (v28 == v34 || (*(unsigned char *)(v28[2] + 8) & 6) == 0) {
          goto LABEL_88;
        }
        if (v22)
        {
          unsigned int v35 = *(_DWORD *)(v19 + 24) | v20;
          if (v35 < ((*(v34 - 2) >> 1) & 3 | *(_DWORD *)((*(v34 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
          {
            uint64_t v34 = (void *)**v21;
            do
            {
              unint64_t v36 = v27 >> 1;
              uint64_t v37 = v34[3 * (v27 >> 1) + 1];
              LODWORD(v37) = (v37 >> 1) & 3 | *(_DWORD *)((v37 & 0xFFFFFFFFFFFFFFF8) + 24);
              v27 -= (v27 >> 1) + 1;
              BOOL v38 = v35 >= v37;
              if (v35 >= v37) {
                unint64_t v39 = v36 + 1;
              }
              else {
                unint64_t v39 = 0;
              }
              v34 += 3 * v39;
              if (!v38) {
                unint64_t v27 = v36;
              }
            }
            while (v27);
          }
        }
        if (v34 != v28) {
          goto LABEL_88;
        }
        unsigned int v40 = *(_DWORD *)(v19 + 24) | v20;
        if (((*v28 >> 1) & 3 | *(_DWORD *)((*v28 & 0xFFFFFFFFFFFFFFF8) + 24)) > v40
          || v40 >= ((v28[1] >> 1) & 3 | *(_DWORD *)((v28[1] & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
          goto LABEL_88;
        }
        if (++v21 == v18) {
          goto LABEL_87;
        }
      }
      unint64_t v27 = 0;
LABEL_18:
      char v28 = (void *)(v23 + 24 * v27);
      goto LABEL_19;
    }
LABEL_87:
    uint64_t v74 = 1;
    goto LABEL_89;
  }
  if (!v17) {
    goto LABEL_87;
  }
  uint64_t v41 = (uint64_t ***)v90;
  while (1)
  {
    unsigned int v42 = *((_DWORD *)*v41 + 2);
    if (v42) {
      break;
    }
LABEL_86:
    if (++v41 == (uint64_t ***)v18) {
      goto LABEL_87;
    }
  }
  uint64_t v43 = 0;
  uint64_t v44 = **v41;
  uint64_t v45 = &v44[3 * v42];
  uint64_t v46 = *(void *)(*(void *)(a1 + 248) + 288);
  uint64_t v47 = *(void *)(a3 + 64);
  while (1)
  {
    uint64_t v48 = *v44;
    if ((unint64_t)*v44 >= 8 && (uint64_t v49 = *(void *)((v48 & 0xFFFFFFFFFFFFFFF8) + 16)) != 0)
    {
      int v50 = (uint64_t *)(v49 + 24);
    }
    else
    {
      uint64_t v66 = *(unsigned int *)(v46 + 544);
      if (v66)
      {
        unsigned int v67 = *(_DWORD *)((v48 & 0xFFFFFFFFFFFFFFF8) + 24) | (v48 >> 1) & 3;
        uint64_t v68 = *(void **)(v46 + 536);
        unint64_t v69 = *(unsigned int *)(v46 + 544);
        do
        {
          unint64_t v70 = v69 >> 1;
          int v71 = &v68[2 * (v69 >> 1)];
          uint64_t v73 = *v71;
          uint64_t v72 = v71 + 2;
          v69 += ~(v69 >> 1);
          if (((v73 >> 1) & 3 | *(_DWORD *)((v73 & 0xFFFFFFFFFFFFFFF8) + 24)) < v67) {
            uint64_t v68 = v72;
          }
          else {
            unint64_t v69 = v70;
          }
        }
        while (v69);
        if (v68 == (void *)(*(void *)(v46 + 536) + 16 * v66)
          || ((*v68 >> 1) & 3 | *(_DWORD *)((*v68 & 0xFFFFFFFFFFFFFFF8) + 24)) > v67)
        {
          v68 -= 2;
        }
      }
      else
      {
        uint64_t v68 = *(void **)(v46 + 536);
      }
      int v50 = v68 + 1;
    }
    uint64_t v51 = *v50;
    if (v47 == *(void *)(a3 + 56))
    {
      uint64_t v52 = *(unsigned int *)(a3 + 76);
      unint64_t v53 = (void *)(v47 + 8 * v52);
      if (v52)
      {
        uint64_t v54 = 0;
        uint64_t v55 = 8 * v52;
        while (*(void *)(v47 + v54) != v51)
        {
          v54 += 8;
          if (v55 == v54) {
            goto LABEL_60;
          }
        }
        unint64_t v53 = (void *)(v47 + v54);
      }
LABEL_60:
      uint64_t v64 = *(void *)(a3 + 64);
    }
    else
    {
      uint64_t v56 = *(unsigned int *)(a3 + 72);
      int v57 = v56 - 1;
      unsigned int v58 = (v56 - 1) & ((v51 >> 4) ^ (v51 >> 9));
      unint64_t v53 = (void *)(v47 + 8 * v58);
      uint64_t v59 = *v53;
      if (*v53 == -1)
      {
        unint64_t v60 = 0;
LABEL_62:
        if (v60) {
          unint64_t v53 = v60;
        }
        if (*v53 != v51) {
          unint64_t v53 = (void *)(v47 + 8 * v56);
        }
      }
      else
      {
        unint64_t v60 = 0;
        int v61 = 1;
        while (v59 != v51)
        {
          if (v60) {
            BOOL v62 = 0;
          }
          else {
            BOOL v62 = v59 == -2;
          }
          if (v62) {
            unint64_t v60 = v53;
          }
          unsigned int v63 = v58 + v61++;
          unsigned int v58 = v63 & v57;
          unint64_t v53 = (void *)(v47 + 8 * (v63 & v57));
          uint64_t v59 = *v53;
          if (*v53 == -1) {
            goto LABEL_62;
          }
        }
      }
      uint64_t v64 = *(void *)(a3 + 56);
    }
    if (v47 == v64) {
      unsigned int v65 = (unsigned int *)(a3 + 76);
    }
    else {
      unsigned int v65 = (unsigned int *)(a3 + 72);
    }
    if (v53 == (void *)(v47 + 8 * *v65)) {
      goto LABEL_73;
    }
    if (v43) {
      break;
    }
    uint64_t v43 = v44[2];
LABEL_73:
    v44 += 3;
    if (v44 == v45) {
      goto LABEL_86;
    }
  }
LABEL_88:
  uint64_t v74 = 0;
LABEL_89:
  if (v90 != v92) {
    free(v90);
  }
  return v74;
}

uint64_t sub_1CBAACC38(uint64_t result, char *a2, char *a3)
{
  int v3 = a2;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 + ((a3 - a2) >> 3) > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    uint64_t v5 = (void *)(*(void *)result + 8 * v4);
    do
    {
      uint64_t v6 = *(void *)v3;
      v3 += 8;
      *v5++ = v6;
    }
    while (v3 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + ((unint64_t)(a3 - a2) >> 3);
  return result;
}

void sub_1CBAACCC8()
{
}

void *sub_1CBAACCDC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F5B10;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBAACD24(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F5B10;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBAACD50(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  unsigned int v3 = *(_DWORD *)(v2 + 8);
  if (v3 >= *(_DWORD *)(v2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v2 + 8 * v3) = *a2;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

uint64_t sub_1CBAACDB0(uint64_t result, void *a2, uint64_t a3)
{
  unsigned int v3 = *(void **)(a3 + 8);
  if (v3 == a2)
  {
    unsigned int v3 = a2;
  }
  else if (a2 == &unk_1CFB2E2E0 || a2 == &unk_1CFB2E31C || a2 == &unk_1CFB2E308)
  {
    uint64_t v5 = a3;
    uint64_t v6 = result;
    llvm::APFloat::convert(a3, a2, 1, &v7);
    a3 = v5;
    uint64_t result = v6;
    unsigned int v3 = *(void **)(v5 + 8);
  }
  uint64_t v4 = *(void *)(a3 + 16);
  if (v3 == &unk_1CFB2E344)
  {
    *(void *)(a3 + 16) = 0;
  }
  else
  {
    *(_DWORD *)(result + 24) = *(_DWORD *)(a3 + 24);
    *(unsigned char *)(result + 28) = *(unsigned char *)(result + 28) & 0xF0 | *(unsigned char *)(a3 + 28) & 0xF;
  }
  *(void *)(result + 8) = v3;
  *(void *)(result + 16) = v4;
  *(void *)(a3 + 8) = &unk_1CFB2E394;
  return result;
}

uint64_t sub_1CBAACE74(uint64_t *a1, uint64_t a2)
{
  v198[2] = *MEMORY[0x1E4F143B8];
  if (**(_WORD **)(a2 + 16) == 163)
  {
    uint64_t v4 = *(void *)(*a1 + 8);
    uint64_t v5 = *(void *)(v4 + 40);
    uint64_t v6 = *(void *)(v4 + 8);
    long long v7 = *(_OWORD *)(v6 + 1024);
    v159[0] = *(_OWORD *)(v6 + 1008);
    v159[1] = v7;
    uint64_t v8 = *(void *)(v6 + 1048);
    uint64_t v160 = *(void *)(v6 + 1040);
    uint64_t v161 = v8;
    uint64_t v9 = *(void *)(v6 + 1056);
    uint64_t v162 = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    __int16 v163 = *(_WORD *)(v6 + 1064);
    if (*(char *)(v6 + 1095) < 0)
    {
      sub_1CB8BDF7C((uint64_t)&v164, *(const void **)(v6 + 1072), *(void *)(v6 + 1080));
    }
    else
    {
      long long v164 = *(_OWORD *)(v6 + 1072);
      uint64_t v165 = *(void *)(v6 + 1088);
    }
    long long v166 = *(_OWORD *)(v6 + 1096);
    long long v167 = *(_OWORD *)(v6 + 1112);
    sub_1CB906B78((uint64_t)&v168, (uint64_t *)(v6 + 1128));
    if (*(char *)(v6 + 1311) < 0)
    {
      sub_1CB8BDF7C((uint64_t)&v169, *(const void **)(v6 + 1288), *(void *)(v6 + 1296));
    }
    else
    {
      long long v169 = *(_OWORD *)(v6 + 1288);
      uint64_t v170 = *(void *)(v6 + 1304);
    }
    BOOL v10 = DWORD2(v166) == 0;
    unsigned __int8 v11 = BYTE12(v159[0]);
    uint64_t v157 = 0;
    uint64_t v158 = 0;
    uint64_t v156 = 0;
    uint64_t v12 = *(unsigned int *)(*(void *)(a2 + 32) + 4);
    if ((v12 & 0x80000000) == 0)
    {
      uint64_t v154 = 0;
      uint64_t v13 = *a1;
      *(void *)(v13 + 40) = *(void *)(a2 + 24);
      *(void *)(v13 + 48) = a2;
      uint64_t v14 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v12);
      uint64_t v15 = &unk_1CFB2E308;
      goto LABEL_17;
    }
    if ((v12 & 0x7FFFFFFF) >= *(_DWORD *)(v5 + 432))
    {
      uint64_t v154 = 0;
    }
    else
    {
      uint64_t v154 = *(void *)(*(void *)(v5 + 424) + 8 * (v12 & 0x7FFFFFFF));
      if (v154 == 129)
      {
        uint64_t v15 = &unk_1CFB2E2E0;
        uint64_t v154 = 129;
LABEL_16:
        uint64_t v17 = *a1;
        *(void *)(v17 + 40) = *(void *)(a2 + 24);
        *(void *)(v17 + 48) = a2;
        uint64_t v14 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
LABEL_17:
        uint64_t v18 = *v14;
        if (v18)
        {
          if (*(unsigned char *)(v18 + 3) & 1) != 0 || (uint64_t v18 = *(void *)(v18 + 24)) != 0 && (*(unsigned char *)(v18 + 3))
          {
            uint64_t v19 = *(void *)(v18 + 8);
            if (v19)
            {
              if (**(_WORD **)(v19 + 16) == 163 && *(_DWORD *)(v19 + 40) == 3)
              {
                uint64_t v20 = *(void *)(v19 + 32);
                uint64_t v21 = *(unsigned int *)(v20 + 36);
                HIDWORD(v156) = *(_DWORD *)(v20 + 36);
                uint64_t v22 = *(unsigned int *)(v20 + 68);
                if ((v22 & 0x80000000) != 0) {
                  uint64_t v23 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v22 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v23 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v22);
                }
                uint64_t v24 = *v23;
                if (v24
                  && ((*(unsigned char *)(v24 + 3) & 1) != 0
                   || (uint64_t v24 = *(void *)(v24 + 24)) != 0 && (*(unsigned char *)(v24 + 3) & 1) != 0)
                  && (uint64_t v25 = *(void *)(v24 + 8)) != 0
                  && **(_WORD **)(v25 + 16) == 177
                  && *(_DWORD *)(v25 + 40) == 2)
                {
                  LODWORD(v22) = *(_DWORD *)(*(void *)(v25 + 32) + 36);
                  uint64_t v73 = &v156;
                }
                else
                {
                  if ((v21 & 0x80000000) != 0) {
                    unsigned int v26 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
                  }
                  else {
                    unsigned int v26 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v21);
                  }
                  uint64_t v27 = *v26;
                  if (!v27) {
                    goto LABEL_34;
                  }
                  if ((*(unsigned char *)(v27 + 3) & 1) == 0)
                  {
                    uint64_t v27 = *(void *)(v27 + 24);
                    if (!v27 || (*(unsigned char *)(v27 + 3) & 1) == 0) {
                      goto LABEL_34;
                    }
                  }
                  uint64_t v28 = *(void *)(v27 + 8);
                  if (!v28 || **(_WORD **)(v28 + 16) != 177 || *(_DWORD *)(v28 + 40) != 2) {
                    goto LABEL_34;
                  }
                  LODWORD(v156) = *(_DWORD *)(*(void *)(v28 + 32) + 36);
                  uint64_t v73 = (uint64_t *)((char *)&v156 + 4);
                }
                *(_DWORD *)uint64_t v73 = v22;
                if (HIDWORD(v156) == v156 && ((v11 & 1) != 0 || (*(_WORD *)(a2 + 44) & 0x10) != 0)) {
                  goto LABEL_121;
                }
              }
            }
          }
        }
LABEL_34:
        if ((v12 & 0x80000000) != 0) {
          unint64_t v29 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
        }
        else {
          unint64_t v29 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v12);
        }
        uint64_t v30 = *v29;
        if (v30)
        {
          if (*(unsigned char *)(v30 + 3) & 1) != 0 || (uint64_t v30 = *(void *)(v30 + 24)) != 0 && (*(unsigned char *)(v30 + 3))
          {
            uint64_t v31 = *(void *)(v30 + 8);
            if (v31)
            {
              if (**(_WORD **)(v31 + 16) == 163 && *(_DWORD *)(v31 + 40) == 3)
              {
                uint64_t v32 = *(void *)(v31 + 32);
                uint64_t v33 = *(unsigned int *)(v32 + 36);
                if ((v33 & 0x80000000) != 0) {
                  uint64_t v34 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v33 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v34 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v33);
                }
                uint64_t v35 = *v34;
                if (v35
                  && ((*(unsigned char *)(v35 + 3) & 1) != 0
                   || (uint64_t v35 = *(void *)(v35 + 24)) != 0 && (*(unsigned char *)(v35 + 3) & 1) != 0)
                  && (uint64_t v36 = *(void *)(v35 + 8)) != 0
                  && **(_WORD **)(v36 + 16) == 177
                  && *(_DWORD *)(v36 + 40) == 2)
                {
                  HIDWORD(v156) = *(_DWORD *)(*(void *)(v36 + 32) + 36);
                  uint64_t v74 = &v156;
                  uint64_t v75 = 2;
                }
                else
                {
                  LODWORD(v156) = *(_DWORD *)(v32 + 36);
                  uint64_t v37 = *(unsigned int *)(v32 + 68);
                  if ((v37 & 0x80000000) != 0) {
                    BOOL v38 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v37 & 0x7FFFFFFF) + 8);
                  }
                  else {
                    BOOL v38 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v37);
                  }
                  uint64_t v39 = *v38;
                  if (!v39) {
                    goto LABEL_53;
                  }
                  if ((*(unsigned char *)(v39 + 3) & 1) == 0)
                  {
                    uint64_t v39 = *(void *)(v39 + 24);
                    if (!v39 || (*(unsigned char *)(v39 + 3) & 1) == 0) {
                      goto LABEL_53;
                    }
                  }
                  uint64_t v40 = *(void *)(v39 + 8);
                  if (!v40 || **(_WORD **)(v40 + 16) != 177 || *(_DWORD *)(v40 + 40) != 2) {
                    goto LABEL_53;
                  }
                  uint64_t v32 = *(void *)(v40 + 32);
                  uint64_t v74 = (uint64_t *)((char *)&v156 + 4);
                  uint64_t v75 = 1;
                }
                *(_DWORD *)uint64_t v74 = *(_DWORD *)(v32 + 32 * v75 + 4);
                if (HIDWORD(v156) == v156 && ((v11 & 1) != 0 || (*(_WORD *)(a2 + 44) & 0x10) != 0))
                {
LABEL_121:
                  uint64_t v76 = *a1;
                  uint64_t v16 = 1;
                  LODWORD(v171) = v12;
                  LODWORD(v172) = 1;
                  sub_1CC7374CC(v76, (unint64_t *)&v171, 0.0);
LABEL_122:
                  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
LABEL_290:
                  sub_1CB906D7C((uint64_t)v159);
                  return v16;
                }
              }
            }
          }
        }
LABEL_53:
        if ((v12 & 0x80000000) != 0) {
          uint64_t v41 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v41 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v12);
        }
        uint64_t v42 = *v41;
        if (!v42) {
          goto LABEL_72;
        }
        if ((*(unsigned char *)(v42 + 3) & 1) == 0)
        {
          uint64_t v42 = *(void *)(v42 + 24);
          if (!v42 || (*(unsigned char *)(v42 + 3) & 1) == 0) {
            goto LABEL_72;
          }
        }
        uint64_t v43 = *(void *)(v42 + 8);
        if (!v43 || **(_WORD **)(v43 + 16) != 163 || *(_DWORD *)(v43 + 40) != 3) {
          goto LABEL_72;
        }
        uint64_t v44 = *(void *)(v43 + 32);
        uint64_t v45 = *(unsigned int *)(v44 + 36);
        HIDWORD(v156) = *(_DWORD *)(v44 + 36);
        uint64_t v46 = *(unsigned int *)(v44 + 68);
        if ((v46 & 0x80000000) != 0) {
          uint64_t v47 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v46 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v47 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v46);
        }
        uint64_t v48 = *v47;
        if ((*(unsigned char *)(v48 + 3) & 1) == 0) {
          uint64_t v48 = *(void *)(v48 + 24);
        }
        uint64_t v49 = *(void *)(v48 + 8);
        if (**(_WORD **)(v49 + 16) == 121)
        {
          uint64_t v110 = *(void *)(*(void *)(v49 + 32) + 48);
          uint64_t v158 = v110;
          if (v110) {
            goto LABEL_195;
          }
        }
        else
        {
          uint64_t v158 = 0;
        }
        if ((v45 & 0x80000000) != 0) {
          int v50 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v45 & 0x7FFFFFFF) + 8);
        }
        else {
          int v50 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v45);
        }
        uint64_t v51 = *v50;
        if ((*(unsigned char *)(v51 + 3) & 1) == 0) {
          uint64_t v51 = *(void *)(v51 + 24);
        }
        uint64_t v52 = *(void *)(v51 + 8);
        if (**(_WORD **)(v52 + 16) != 121)
        {
          uint64_t v158 = 0;
          goto LABEL_72;
        }
        uint64_t v110 = *(void *)(*(void *)(v52 + 32) + 48);
        uint64_t v158 = v110;
        if (!v110)
        {
LABEL_72:
          if ((v12 & 0x80000000) != 0) {
            unint64_t v53 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
          }
          else {
            unint64_t v53 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v12);
          }
          uint64_t v54 = *v53;
          if (!v54
            || (*(unsigned char *)(v54 + 3) & 1) == 0 && ((uint64_t v54 = *(void *)(v54 + 24)) == 0 || (*(unsigned char *)(v54 + 3) & 1) == 0)
            || (uint64_t v55 = *(void *)(v54 + 8)) == 0
            || **(_WORD **)(v55 + 16) != 163
            || *(_DWORD *)(v55 + 40) != 3)
          {
LABEL_91:
            long long v155 = 0uLL;
            if ((v11 & 1) == 0 && (~*(unsigned __int16 *)(a2 + 44) & 0x440) != 0) {
              goto LABEL_277;
            }
            uint64_t v171 = (_DWORD *)&v155 + 3;
            uint64_t v172 = (char *)&v158;
            uint64_t v173 = &v157;
            unsigned int v193 = v12;
            if (sub_1CBAC9108((uint64_t)&v171, v5, &v193))
            {
              uint64_t v64 = (const llvm::detail::DoubleAPFloat *)(v158 + 32);
              if (*(_UNKNOWN **)(v158 + 32) == &unk_1CFB2E344) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(&v185, v64);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v185, v64);
              }
              sub_1CBAACDB0((uint64_t)&v193, v15, (uint64_t)v184);
              if ((_UNKNOWN *)v185 == &unk_1CFB2E344)
              {
                sub_1CB845718(&v186);
              }
              else if ((*(_DWORD *)(v185 + 8) - 64) <= 0xFFFFFF7F && v186)
              {
                MEMORY[0x1D25D9CB0](v186, 0x1000C8000313F17);
              }
              unsigned int v65 = (const llvm::detail::DoubleAPFloat *)(v157 + 32);
              if (*(_UNKNOWN **)(v157 + 32) == &unk_1CFB2E344) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(&v182, v65);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v182, v65);
              }
              sub_1CBAACDB0((uint64_t)&v187, v15, (uint64_t)v181);
              if ((_UNKNOWN *)v182 == &unk_1CFB2E344)
              {
                sub_1CB845718(&v183);
              }
              else if ((*(_DWORD *)(v182 + 8) - 64) <= 0xFFFFFF7F && v183)
              {
                MEMORY[0x1D25D9CB0](v183, 0x1000C8000313F17);
              }
              if ((_UNKNOWN *)v194 == &unk_1CFB2E344) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(&v179, (const llvm::detail::DoubleAPFloat *)&v194);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v179, (const llvm::detail::IEEEFloat *)&v194);
              }
              sub_1CB88A708((uint64_t)&v178, (uint64_t)&v187, 1);
              uint64_t v66 = *a1;
              uint64_t v171 = (_DWORD *)v154;
              LODWORD(v172) = 0;
              uint64_t v68 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v4, (llvm::LLVMContext *)&v178, v67);
              uint64_t v69 = (*(uint64_t (**)(uint64_t, _DWORD **, const llvm::detail::DoubleAPFloat *))(*(void *)v66 + 24))(v66, &v171, v68);
              uint64_t v70 = *a1;
              v177[0] = v12;
              v177[2] = 1;
              LODWORD(v171) = HIDWORD(v155);
              LODWORD(v173) = 0;
              uint64_t v174 = (uint64_t *)v69;
              uint64_t v175 = v71;
              int v176 = 1;
              (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD **, uint64_t, uint64_t))(*(void *)v70 + 32))(v70, 163, v177, 1, &v171, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
              llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
              if ((_UNKNOWN *)v179 == &unk_1CFB2E344)
              {
                sub_1CB845718(&v180);
              }
              else if ((*(_DWORD *)(v179 + 8) - 64) <= 0xFFFFFF7F && v180)
              {
                MEMORY[0x1D25D9CB0](v180, 0x1000C8000313F17);
              }
              if ((_UNKNOWN *)v188 == &unk_1CFB2E344)
              {
                sub_1CB845718(v189);
              }
              else if ((*(_DWORD *)(v188 + 8) - 64) <= 0xFFFFFF7F && v189[0])
              {
                MEMORY[0x1D25D9CB0](v189[0], 0x1000C8000313F17);
              }
              uint64_t v72 = v194;
              if ((_UNKNOWN *)v194 == &unk_1CFB2E344)
              {
LABEL_140:
                unsigned int v87 = &v193;
LABEL_141:
                uint64_t v88 = (uint64_t *)(v87 + 4);
LABEL_142:
                sub_1CB845718(v88);
LABEL_216:
                uint64_t v16 = 1;
                goto LABEL_290;
              }
              goto LABEL_215;
            }
            uint64_t v171 = (_DWORD *)&v155 + 3;
            uint64_t v172 = (char *)&v158;
            uint64_t v173 = (uint64_t *)&v155 + 1;
            unsigned int v193 = v12;
            if (sub_1CBAC951C((uint64_t)&v171, v5, &v193) && HIDWORD(v155) == DWORD2(v155))
            {
              unsigned int v77 = (const llvm::detail::DoubleAPFloat *)(v158 + 32);
              if (*(_UNKNOWN **)(v158 + 32) == &unk_1CFB2E344) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(&v194, v77);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v194, v77);
              }
              uint64_t v78 = (void *)v194;
              uint64_t v79 = "1.0";
              goto LABEL_133;
            }
            uint64_t v171 = (_DWORD *)&v155 + 3;
            uint64_t v172 = (char *)&v155 + 8;
            uint64_t v173 = (uint64_t *)((char *)&v155 + 4);
            uint64_t v174 = &v158;
            unsigned int v193 = v12;
            if (sub_1CBAC9878((uint64_t)&v171, v5, &v193)
              && __PAIR64__(HIDWORD(v155), HIDWORD(v155)) == *(void *)((char *)&v155 + 4))
            {
              uint64_t v80 = (const llvm::detail::DoubleAPFloat *)(v158 + 32);
              if (*(_UNKNOWN **)(v158 + 32) == &unk_1CFB2E344) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(&v194, v80);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v194, v80);
              }
              uint64_t v78 = (void *)v194;
              uint64_t v79 = "2.0";
LABEL_133:
              llvm::APFloat::APFloat((uint64_t)&v171, v78, (unsigned __int8 *)v79, 3uLL);
              if ((_UNKNOWN *)v194 == &unk_1CFB2E344) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(&v188, (const llvm::detail::DoubleAPFloat *)&v194);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v188, (const llvm::detail::IEEEFloat *)&v194);
              }
              sub_1CB88A708((uint64_t)&v187, (uint64_t)&v171, 1);
              if (v172 == (char *)&unk_1CFB2E344)
              {
                sub_1CB845718((uint64_t *)&v173);
              }
              else if ((*((_DWORD *)v172 + 2) - 64) <= 0xFFFFFF7F && v173)
              {
                MEMORY[0x1D25D9CB0](v173, 0x1000C8000313F17);
              }
              uint64_t v82 = *a1;
              uint64_t v171 = (_DWORD *)v154;
              LODWORD(v172) = 0;
              uint64_t v83 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v4, (llvm::LLVMContext *)&v187, v81);
              uint64_t v84 = (*(uint64_t (**)(uint64_t, _DWORD **, const llvm::detail::DoubleAPFloat *))(*(void *)v82 + 24))(v82, &v171, v83);
              uint64_t v85 = *a1;
              int v178 = v12;
              LODWORD(v179) = 1;
              LODWORD(v171) = HIDWORD(v155);
              LODWORD(v173) = 0;
              uint64_t v174 = (uint64_t *)v84;
              uint64_t v175 = v86;
              int v176 = 1;
              (*(void (**)(uint64_t, uint64_t, int *, uint64_t, _DWORD **, uint64_t, uint64_t))(*(void *)v85 + 32))(v85, 165, &v178, 1, &v171, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
              llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
              if ((_UNKNOWN *)v188 == &unk_1CFB2E344)
              {
                sub_1CB845718(v189);
              }
              else if ((*(_DWORD *)(v188 + 8) - 64) <= 0xFFFFFF7F && v189[0])
              {
                MEMORY[0x1D25D9CB0](v189[0], 0x1000C8000313F17);
              }
              uint64_t v72 = v194;
              if ((_UNKNOWN *)v194 == &unk_1CFB2E344) {
                goto LABEL_140;
              }
              goto LABEL_215;
            }
            if ((v12 & 0x80000000) != 0) {
              uint64_t v89 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v89 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v12);
            }
            uint64_t v90 = *v89;
            if (v90)
            {
              if ((*(unsigned char *)(v90 + 3) & 1) != 0
                || (uint64_t v90 = *(void *)(v90 + 24)) != 0 && (*(unsigned char *)(v90 + 3) & 1) != 0)
              {
                uint64_t v91 = *(void *)(v90 + 8);
                if (v91)
                {
                  if (**(_WORD **)(v91 + 16) == 163 && *(_DWORD *)(v91 + 40) == 3)
                  {
                    uint64_t v92 = *(void *)(v91 + 32);
                    uint64_t v93 = *(unsigned int *)(v92 + 36);
                    if ((v93 & 0x80000000) != 0) {
                      BOOL v94 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v93 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      BOOL v94 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v93);
                    }
                    uint64_t v95 = *v94;
                    if (v95)
                    {
                      if ((*(unsigned char *)(v95 + 3) & 1) != 0
                        || (uint64_t v95 = *(void *)(v95 + 24)) != 0 && (*(unsigned char *)(v95 + 3) & 1) != 0)
                      {
                        uint64_t v96 = *(void *)(v95 + 8);
                        if (v96)
                        {
                          if (**(_WORD **)(v96 + 16) == 163 && *(_DWORD *)(v96 + 40) == 3)
                          {
                            uint64_t v122 = *(void *)(v96 + 32);
                            int v123 = *(_DWORD *)(v122 + 36);
                            DWORD2(v155) = *(_DWORD *)(v122 + 68);
                            HIDWORD(v155) = v123;
                            uint64_t v124 = (char *)&v155 + 4;
                            goto LABEL_208;
                          }
                        }
                      }
                    }
                    DWORD1(v155) = *(_DWORD *)(v92 + 36);
                    uint64_t v97 = *(unsigned int *)(v92 + 68);
                    if ((v97 & 0x80000000) != 0) {
                      uint64_t v98 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v97 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      uint64_t v98 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v97);
                    }
                    uint64_t v99 = *v98;
                    if (v99)
                    {
                      if ((*(unsigned char *)(v99 + 3) & 1) != 0
                        || (uint64_t v99 = *(void *)(v99 + 24)) != 0 && (*(unsigned char *)(v99 + 3) & 1) != 0)
                      {
                        uint64_t v100 = *(void *)(v99 + 8);
                        if (v100)
                        {
                          if (**(_WORD **)(v100 + 16) == 163 && *(_DWORD *)(v100 + 40) == 3)
                          {
                            uint64_t v92 = *(void *)(v100 + 32);
                            int v123 = *(_DWORD *)(v92 + 36);
                            HIDWORD(v155) = v123;
                            uint64_t v124 = (char *)&v155 + 8;
LABEL_208:
                            *(_DWORD *)uint64_t v124 = *(_DWORD *)(v92 + 68);
                            if (v123 == DWORD2(v155) && v123 == DWORD1(v155))
                            {
                              uint64_t v101 = "3.0";
LABEL_214:
                              llvm::APFloat::APFloat((uint64_t)&v193, v15, (unsigned __int8 *)v101, 3uLL);
                              uint64_t v126 = *a1;
                              uint64_t v171 = (_DWORD *)v154;
                              LODWORD(v172) = 0;
                              unint64_t v128 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v4, (llvm::LLVMContext *)&v193, v127);
                              uint64_t v129 = (*(uint64_t (**)(uint64_t, _DWORD **, const llvm::detail::DoubleAPFloat *))(*(void *)v126 + 24))(v126, &v171, v128);
                              uint64_t v130 = *a1;
                              LODWORD(v187) = v12;
                              LODWORD(v188) = 1;
                              LODWORD(v171) = HIDWORD(v155);
                              LODWORD(v173) = 0;
                              uint64_t v174 = (uint64_t *)v129;
                              uint64_t v175 = v131;
                              int v176 = 1;
                              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _DWORD **, uint64_t, uint64_t))(*(void *)v130 + 32))(v130, 165, &v187, 1, &v171, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
                              llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
                              uint64_t v72 = v194;
                              if ((_UNKNOWN *)v194 == &unk_1CFB2E344)
                              {
                                uint64_t v88 = v195;
                                goto LABEL_142;
                              }
LABEL_215:
                              if ((*(_DWORD *)(v72 + 8) - 64) > 0xFFFFFF7F) {
                                goto LABEL_216;
                              }
                              uint64_t v138 = v195[0];
                              if (!v195[0]) {
                                goto LABEL_216;
                              }
                              goto LABEL_306;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            uint64_t v171 = (_DWORD *)&v155 + 3;
            uint64_t v172 = (char *)&v155 + 8;
            uint64_t v173 = (uint64_t *)((char *)&v155 + 4);
            uint64_t v174 = (uint64_t *)&v155;
            unsigned int v193 = v12;
            if (sub_1CBAC9CCC(&v171, v5, &v193)
              && __PAIR64__(HIDWORD(v155), HIDWORD(v155)) == *(void *)((char *)&v155 + 4)
              && HIDWORD(v155) == v155)
            {
              uint64_t v101 = "4.0";
              goto LABEL_214;
            }
            if ((v12 & 0x80000000) != 0) {
              uint64_t v102 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v102 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v12);
            }
            uint64_t v103 = *v102;
            if (v103)
            {
              if ((*(unsigned char *)(v103 + 3) & 1) != 0
                || (uint64_t v103 = *(void *)(v103 + 24)) != 0 && (*(unsigned char *)(v103 + 3) & 1) != 0)
              {
                uint64_t v104 = *(void *)(v103 + 8);
                if (v104)
                {
                  if (**(_WORD **)(v104 + 16) == 163 && *(_DWORD *)(v104 + 40) == 3)
                  {
                    uint64_t v105 = *(void *)(v104 + 32);
                    int v106 = *(_DWORD *)(v105 + 36);
                    if (v106 == *(_DWORD *)(v105 + 68))
                    {
                      uint64_t v107 = *a1;
                      uint64_t v16 = 1;
                      unsigned int v193 = v12;
                      LODWORD(v194) = 1;
                      LODWORD(v171) = v106;
                      LODWORD(v173) = 0;
                      if (v106 < 0 && (uint64_t v108 = v106 & 0x7FFFFFFF, v108 < *(_DWORD *)(v5 + 432))) {
                        unint64_t v109 = *(void *)(*(void *)(v5 + 424) + 8 * v108);
                      }
                      else {
                        unint64_t v109 = 0;
                      }
                      unint64_t v187 = v109;
                      LODWORD(v188) = 0;
                      uint64_t v174 = (uint64_t *)sub_1CC7374CC(v107, &v187, 2.0);
                      uint64_t v175 = v121;
                      int v176 = 1;
                      (*(void (**)(uint64_t, uint64_t, unsigned int *, uint64_t, _DWORD **, uint64_t, uint64_t))(*(void *)v107 + 32))(v107, 165, &v193, 1, &v171, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
                      goto LABEL_122;
                    }
                  }
                }
              }
            }
LABEL_277:
            char v139 = v10 | v11;
            if (((v10 | v11) & 1) != 0 || (*(_WORD *)(a2 + 44) & 0x100) != 0)
            {
              uint64_t v140 = *(void *)(a2 + 32);
              uint64_t v141 = (const llvm::DILocation *)*(unsigned int *)(v140 + 36);
              uint64_t v142 = (const llvm::DILocation *)*(unsigned int *)(v140 + 68);
              char v143 = 1;
              do
              {
                unsigned int v144 = v142;
                uint64_t v142 = v141;
                char v145 = v143;
                uint64_t v146 = sub_1CBAAE4DC(v154, v141, v144, v5, (llvm::DILocation **)*a1, (unsigned __int8 **)(a2 + 56), v139 & 1, *(unsigned __int16 *)(a2 + 44), 1);
                if (v146)
                {
                  int v151 = (llvm::DILocation **)*a1;
                  uint64_t v16 = 1;
                  unsigned int v193 = v12;
                  goto LABEL_289;
                }
                char v143 = 0;
                uint64_t v141 = v144;
              }
              while ((v145 & 1) != 0);
              unsigned int v153 = v12;
              uint64_t v147 = (llvm::DILocation ***)a1;
              char v148 = 1;
              while (1)
              {
                uint64_t v149 = v144;
                char v150 = v148;
                uint64_t v146 = sub_1CBAAE4DC(v154, v144, v142, v5, *v147, (unsigned __int8 **)(a2 + 56), v139 & 1, *(unsigned __int16 *)(a2 + 44), 0);
                if (v146) {
                  break;
                }
                char v148 = 0;
                uint64_t v16 = 0;
                unsigned int v144 = v142;
                uint64_t v142 = v149;
                if ((v150 & 1) == 0) {
                  goto LABEL_290;
                }
              }
              int v151 = *v147;
              uint64_t v16 = 1;
              unsigned int v193 = v153;
LABEL_289:
              LODWORD(v194) = 1;
              LODWORD(v171) = *(_DWORD *)(*(void *)(v146 + 32) + 4);
              LODWORD(v173) = 0;
              (*((void (**)(llvm::DILocation **, uint64_t, unsigned int *, uint64_t, _DWORD **, uint64_t, void))*v151
               + 4))(v151, 19, &v193, 1, &v171, 1, 0);
              llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
            }
            else
            {
              uint64_t v16 = 0;
            }
            goto LABEL_290;
          }
          uint64_t v56 = *(void *)(v55 + 32);
          uint64_t v57 = *(unsigned int *)(v56 + 36);
          if ((v57 & 0x80000000) != 0) {
            unsigned int v58 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v57 & 0x7FFFFFFF) + 8);
          }
          else {
            unsigned int v58 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v57);
          }
          uint64_t v59 = *v58;
          if ((*(unsigned char *)(v59 + 3) & 1) == 0) {
            uint64_t v59 = *(void *)(v59 + 24);
          }
          uint64_t v60 = *(void *)(v59 + 8);
          if (**(_WORD **)(v60 + 16) == 121)
          {
            uint64_t v111 = *(void *)(*(void *)(v60 + 32) + 48);
            uint64_t v158 = v111;
            if (v111)
            {
              uint64_t v112 = *(unsigned int *)(v56 + 68);
              if ((v112 & 0x80000000) != 0) {
                unint64_t v113 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v112 & 0x7FFFFFFF) + 8);
              }
              else {
                unint64_t v113 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v112);
              }
              uint64_t v114 = *v113;
              if ((*(unsigned char *)(v114 + 3) & 1) == 0) {
                uint64_t v114 = *(void *)(v114 + 24);
              }
              uint64_t v115 = *(void *)(v114 + 8);
              if (**(_WORD **)(v115 + 16) == 121)
              {
                uint64_t v157 = *(void *)(*(void *)(v115 + 32) + 48);
                if (v157) {
                  goto LABEL_222;
                }
              }
              else
              {
                uint64_t v157 = 0;
              }
            }
          }
          else
          {
            uint64_t v158 = 0;
          }
          if ((v57 & 0x80000000) != 0) {
            int v61 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v57 & 0x7FFFFFFF) + 8);
          }
          else {
            int v61 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v57);
          }
          uint64_t v62 = *v61;
          if ((*(unsigned char *)(v62 + 3) & 1) == 0) {
            uint64_t v62 = *(void *)(v62 + 24);
          }
          uint64_t v63 = *(void *)(v62 + 8);
          if (**(_WORD **)(v63 + 16) != 121)
          {
            uint64_t v157 = 0;
            goto LABEL_91;
          }
          uint64_t v157 = *(void *)(*(void *)(v63 + 32) + 48);
          if (!v157) {
            goto LABEL_91;
          }
          uint64_t v116 = *(unsigned int *)(v56 + 68);
          if ((v116 & 0x80000000) != 0) {
            unint64_t v117 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v116 & 0x7FFFFFFF) + 8);
          }
          else {
            unint64_t v117 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v116);
          }
          uint64_t v118 = *v117;
          if ((*(unsigned char *)(v118 + 3) & 1) == 0) {
            uint64_t v118 = *(void *)(v118 + 24);
          }
          uint64_t v119 = *(void *)(v118 + 8);
          if (**(_WORD **)(v119 + 16) != 121)
          {
            uint64_t v158 = 0;
            goto LABEL_91;
          }
          uint64_t v111 = *(void *)(*(void *)(v119 + 32) + 48);
          uint64_t v158 = v111;
          if (!v111) {
            goto LABEL_91;
          }
LABEL_222:
          uint64_t v133 = *(void **)(v111 + 32);
          uint64_t v132 = (const llvm::detail::DoubleAPFloat *)(v111 + 32);
          if (v133 == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v197, v132);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v197, v132);
          }
          sub_1CBAACDB0((uint64_t)&v171, v15, (uint64_t)v196);
          if ((_UNKNOWN *)v197 == &unk_1CFB2E344)
          {
            sub_1CB845718(v198);
          }
          else if ((*(_DWORD *)(v197 + 8) - 64) <= 0xFFFFFF7F && v198[0])
          {
            MEMORY[0x1D25D9CB0](v198[0], 0x1000C8000313F17);
          }
          unint64_t v134 = (const llvm::detail::DoubleAPFloat *)(v157 + 32);
          if (*(_UNKNOWN **)(v157 + 32) == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v191, v134);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v191, v134);
          }
          sub_1CBAACDB0((uint64_t)&v193, v15, (uint64_t)v190);
          if ((_UNKNOWN *)v191 == &unk_1CFB2E344)
          {
            sub_1CB845718(&v192);
          }
          else if ((*(_DWORD *)(v191 + 8) - 64) <= 0xFFFFFF7F && v192)
          {
            MEMORY[0x1D25D9CB0](v192, 0x1000C8000313F17);
          }
          if (v172 == (char *)&unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v188, (const llvm::detail::DoubleAPFloat *)&v172);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v188, (const llvm::detail::IEEEFloat *)&v172);
          }
          sub_1CB88A708((uint64_t)&v187, (uint64_t)&v193, 1);
          uint64_t v135 = (llvm::DILocation **)*a1;
          int v178 = v12;
          LODWORD(v179) = 1;
          uint64_t v137 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v4, (llvm::LLVMContext *)&v187, v136);
          (*((void (**)(llvm::DILocation **, int *, const llvm::detail::DoubleAPFloat *))*v135 + 3))(v135, &v178, v137);
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          if ((_UNKNOWN *)v188 == &unk_1CFB2E344)
          {
            sub_1CB845718(v189);
          }
          else if ((*(_DWORD *)(v188 + 8) - 64) <= 0xFFFFFF7F && v189[0])
          {
            MEMORY[0x1D25D9CB0](v189[0], 0x1000C8000313F17);
          }
          if ((_UNKNOWN *)v194 == &unk_1CFB2E344)
          {
            sub_1CB845718(v195);
          }
          else if ((*(_DWORD *)(v194 + 8) - 64) <= 0xFFFFFF7F && v195[0])
          {
            MEMORY[0x1D25D9CB0](v195[0], 0x1000C8000313F17);
          }
          if (v172 == (char *)&unk_1CFB2E344)
          {
            unsigned int v87 = (unsigned int *)&v171;
            goto LABEL_141;
          }
          if ((*((_DWORD *)v172 + 2) - 64) > 0xFFFFFF7F) {
            goto LABEL_216;
          }
          uint64_t v138 = (uint64_t)v173;
          if (!v173) {
            goto LABEL_216;
          }
LABEL_306:
          MEMORY[0x1D25D9CB0](v138, 0x1000C8000313F17);
          goto LABEL_216;
        }
        HIDWORD(v156) = v46;
        LODWORD(v45) = v46;
LABEL_195:
        if (*(_UNKNOWN **)(v110 + 32) == &unk_1CFB2E344) {
          char v120 = *(unsigned char *)(*(void *)(v110 + 40) + 28);
        }
        else {
          char v120 = *(unsigned char *)(v110 + 52);
        }
        if ((v120 & 7) == 3 && (v120 & 8 | v11 & 1 || (*(_WORD *)(a2 + 44) & 0x40) != 0))
        {
          sub_1CBA0A7C8((void *)v5, (llvm::MachineInstr *)a2, v45, a1[2]);
          goto LABEL_216;
        }
        goto LABEL_72;
      }
    }
    uint64_t v15 = &unk_1CFB2E308;
    goto LABEL_16;
  }
  return 0;
}

uint64_t sub_1CBAAE4DC(uint64_t a1, unsigned int a2, const llvm::DILocation *a3, uint64_t a4, llvm::DILocation **a5, unsigned __int8 **a6, char a7, unsigned int a8, char a9)
{
  LODWORD(v13) = a2;
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  if (a9)
  {
    if ((a2 & 0x80000000) != 0) {
      uint64_t v14 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v14 = (uint64_t *)(*(void *)(a4 + 272) + 8 * a2);
    }
    uint64_t v15 = *v14;
    if (!v15) {
      return 0;
    }
    while ((*(unsigned char *)(v15 + 3) & 1) != 0)
    {
      uint64_t v15 = *(void *)(v15 + 24);
      if (!v15) {
        return 0;
      }
    }
    while (1)
    {
      uint64_t v15 = *(void *)(v15 + 24);
      if (!v15) {
        break;
      }
      if ((*(unsigned char *)(v15 + 3) & 1) == 0) {
        return 0;
      }
    }
  }
  uint64_t v16 = a5 + 4;
  if (a5 + 4 == (llvm::DILocation **)a6) {
    goto LABEL_13;
  }
  uint64_t v17 = *v16;
  if (*v16)
  {
    int v38 = *(unsigned __int8 *)v17;
    if ((v38 - 4) > 0x1E)
    {
      if ((v38 - 3) >= 0xFFFFFFFE) {
        uint64_t v44 = *v16;
      }
      else {
        uint64_t v44 = 0;
      }
      if ((v38 - 3) < 0xFFFFFFFE)
      {
        if (v38 == 3) {
          *((void *)v17 + 1) = 0;
        }
        goto LABEL_12;
      }
      uint64_t v41 = a3;
      uint64_t v42 = a6;
      uint64_t v43 = a1;
      unint64_t v40 = (unint64_t)v44 + 8;
    }
    else
    {
      if ((*((unsigned char *)v17 + 1) & 0x7F) != 2 && !*((_DWORD *)v17 + 3)) {
        goto LABEL_12;
      }
      uint64_t v39 = *((void *)v17 + 2);
      if ((v39 & 4) == 0) {
        goto LABEL_12;
      }
      unint64_t v40 = v39 & 0xFFFFFFFFFFFFFFF8;
      if (!v40) {
        goto LABEL_12;
      }
      uint64_t v41 = a3;
      uint64_t v42 = a6;
      uint64_t v43 = a1;
    }
    v134[0] = a5 + 4;
    sub_1CC5FA668(v40 + 16, v134);
    a1 = v43;
    a6 = v42;
    a3 = v41;
  }
LABEL_12:
  uint64_t v18 = *a6;
  *uint64_t v16 = (llvm::DILocation *)*a6;
  if (v18)
  {
    uint64_t v35 = a1;
    uint64_t v36 = a3;
    uint64_t v37 = a6;
    llvm::MetadataTracking::track((uint64_t)(a5 + 4), v18, 2);
    a3 = v36;
    a6 = v37;
    a1 = v35;
    if ((v13 & 0x80000000) != 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }
LABEL_13:
  if ((v13 & 0x80000000) != 0)
  {
LABEL_14:
    uint64_t v19 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
    goto LABEL_15;
  }
LABEL_42:
  uint64_t v19 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v13);
LABEL_15:
  uint64_t v20 = *v19;
  if (!v20
    || (*(unsigned char *)(v20 + 3) & 1) == 0 && ((uint64_t v20 = *(void *)(v20 + 24)) == 0 || (*(unsigned char *)(v20 + 3) & 1) == 0)
    || (uint64_t v21 = *(void *)(v20 + 8)) == 0
    || **(_WORD **)(v21 + 16) != 177
    || *(_DWORD *)(v21 + 40) != 2)
  {
    int v34 = 0;
    goto LABEL_90;
  }
  uint64_t v22 = a1;
  uint64_t v23 = *(unsigned int *)(*(void *)(v21 + 32) + 36);
  LODWORD(v13) = v23;
  if (a9)
  {
    if ((v23 & 0x80000000) != 0) {
      uint64_t v24 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v24 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v23);
    }
    uint64_t v25 = *v24;
    if (!v25) {
      return 0;
    }
    while ((*(unsigned char *)(v25 + 3) & 1) != 0)
    {
      uint64_t v25 = *(void *)(v25 + 24);
      if (!v25) {
        return 0;
      }
    }
    uint64_t result = 0;
    while (1)
    {
      uint64_t v25 = *(void *)(v25 + 24);
      if (!v25) {
        break;
      }
      if ((*(unsigned char *)(v25 + 3) & 1) == 0) {
        return result;
      }
    }
  }
  if ((v23 & 0x80000000) != 0) {
    uint64_t v27 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v27 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v23);
  }
  uint64_t v28 = *v27;
  unint64_t v29 = a3;
  uint64_t v30 = a6;
  if ((*(unsigned char *)(v28 + 3) & 1) == 0) {
    uint64_t v28 = *(void *)(v28 + 24);
  }
  MergedLocatiouint64_t n = (unsigned __int8 *)llvm::DILocation::getMergedLocation(*v16, *(const llvm::DILocation **)(*(void *)(v28 + 8) + 56), a3);
  uint64_t v140 = MergedLocation;
  if (MergedLocation) {
    llvm::MetadataTracking::track((uint64_t)&v140, MergedLocation, 2);
  }
  if (&v140 == (unsigned __int8 **)v16) {
    goto LABEL_58;
  }
  uint64_t v32 = *v16;
  a1 = v22;
  a6 = v30;
  a3 = v29;
  if (*v16)
  {
    int v48 = *(unsigned __int8 *)v32;
    if ((v48 - 4) > 0x1E)
    {
      if ((v48 - 3) >= 0xFFFFFFFE) {
        uint64_t v51 = *v16;
      }
      else {
        uint64_t v51 = 0;
      }
      if ((v48 - 3) < 0xFFFFFFFE)
      {
        if (v48 == 3) {
          *((void *)v32 + 1) = 0;
        }
        goto LABEL_39;
      }
      unint64_t v50 = (unint64_t)v51 + 8;
    }
    else
    {
      if ((*((unsigned char *)v32 + 1) & 0x7F) != 2 && !*((_DWORD *)v32 + 3)) {
        goto LABEL_39;
      }
      uint64_t v49 = *((void *)v32 + 2);
      if ((v49 & 4) == 0) {
        goto LABEL_39;
      }
      unint64_t v50 = v49 & 0xFFFFFFFFFFFFFFF8;
      if (!v50) {
        goto LABEL_39;
      }
    }
    v134[0] = a5 + 4;
    sub_1CC5FA668(v50 + 16, v134);
    a1 = v22;
    a6 = v30;
    a3 = v29;
  }
LABEL_39:
  uint64_t v33 = v140;
  *uint64_t v16 = (llvm::DILocation *)v140;
  if (!v33) {
    goto LABEL_40;
  }
  unint64_t v29 = a3;
  uint64_t v30 = a6;
  llvm::MetadataTracking::track((uint64_t)(a5 + 4), v33, 2);
LABEL_58:
  a1 = v22;
  a6 = v30;
  a3 = v29;
  if (v140)
  {
    int v45 = *v140;
    if ((v45 - 4) > 0x1E)
    {
      if ((v45 - 3) >= 0xFFFFFFFE) {
        uint64_t v52 = v140;
      }
      else {
        uint64_t v52 = 0;
      }
      if ((v45 - 3) < 0xFFFFFFFE)
      {
        if (v45 == 3) {
          *((void *)v140 + 1) = 0;
        }
        goto LABEL_40;
      }
      unint64_t v47 = (unint64_t)(v52 + 8);
    }
    else
    {
      if ((v140[1] & 0x7F) != 2 && !*((_DWORD *)v140 + 3)) {
        goto LABEL_40;
      }
      uint64_t v46 = *((void *)v140 + 2);
      if ((v46 & 4) == 0) {
        goto LABEL_40;
      }
      unint64_t v47 = v46 & 0xFFFFFFFFFFFFFFF8;
      if (!v47) {
        goto LABEL_40;
      }
    }
    v134[0] = &v140;
    sub_1CC5FA668(v47 + 16, v134);
    a1 = v22;
    a6 = v30;
    a3 = v29;
  }
LABEL_40:
  int v34 = 1;
LABEL_90:
  if (~a8 & 0x7C0) == 0 || (a7)
  {
    while (1)
    {
      unint64_t v53 = v13;
      if ((v13 & 0x80000000) != 0) {
        uint64_t v72 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v72 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v13);
      }
      uint64_t v73 = *v72;
      if (!v73
        || (*(unsigned char *)(v73 + 3) & 1) == 0 && ((uint64_t v73 = *(void *)(v73 + 24)) == 0 || (*(unsigned char *)(v73 + 3) & 1) == 0)
        || (uint64_t v74 = *(void *)(v73 + 8)) == 0
        || **(_WORD **)(v74 + 16) != 179
        || *(_DWORD *)(v74 + 40) != 2)
      {
        uint64_t v75 = (uint64_t *)((v13 & 0x80000000) != 0
                        ? *(void *)(a4 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8
                        : *(void *)(a4 + 272) + 8 * v13);
        uint64_t v76 = *v75;
        if (!v76) {
          goto LABEL_93;
        }
        if ((*(unsigned char *)(v76 + 3) & 1) == 0)
        {
          uint64_t v76 = *(void *)(v76 + 24);
          if (!v76 || (*(unsigned char *)(v76 + 3) & 1) == 0) {
            goto LABEL_93;
          }
        }
        uint64_t v74 = *(void *)(v76 + 8);
        if (!v74 || **(_WORD **)(v74 + 16) != 178 || *(_DWORD *)(v74 + 40) != 2) {
          goto LABEL_93;
        }
      }
      uint64_t v130 = a1;
      uint64_t v13 = *(unsigned int *)(*(void *)(v74 + 32) + 36);
      if (a9)
      {
        if ((v13 & 0x80000000) != 0) {
          unsigned int v77 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
        }
        else {
          unsigned int v77 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v13);
        }
        uint64_t v78 = *v77;
        if (!v78) {
          return 0;
        }
        while ((*(unsigned char *)(v78 + 3) & 1) != 0)
        {
          uint64_t v78 = *(void *)(v78 + 24);
          if (!v78) {
            return 0;
          }
        }
        while (1)
        {
          uint64_t v78 = *(void *)(v78 + 24);
          if (!v78) {
            break;
          }
          uint64_t result = 0;
          if ((*(unsigned char *)(v78 + 3) & 1) == 0) {
            return result;
          }
        }
      }
      if ((v13 & 0x80000000) != 0) {
        uint64_t v79 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v79 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v13);
      }
      uint64_t v80 = *v79;
      int v127 = v34;
      uint64_t v81 = a3;
      uint64_t v82 = a6;
      if ((*(unsigned char *)(v80 + 3) & 1) == 0) {
        uint64_t v80 = *(void *)(v80 + 24);
      }
      uint64_t v83 = (unsigned __int8 *)llvm::DILocation::getMergedLocation(*v16, *(const llvm::DILocation **)(*(void *)(v80 + 8) + 56), a3);
      uint64_t v140 = v83;
      if (v83) {
        llvm::MetadataTracking::track((uint64_t)&v140, v83, 2);
      }
      a3 = v81;
      if (&v140 == (unsigned __int8 **)v16) {
        goto LABEL_162;
      }
      uint64_t v84 = *v16;
      a1 = v130;
      a6 = v82;
      if (*v16)
      {
        int v91 = *(unsigned __int8 *)v84;
        if ((v91 - 4) > 0x1E)
        {
          if ((v91 - 3) >= 0xFFFFFFFE) {
            BOOL v94 = *v16;
          }
          else {
            BOOL v94 = 0;
          }
          if ((v91 - 3) < 0xFFFFFFFE)
          {
            if (v91 == 3) {
              *((void *)v84 + 1) = 0;
            }
            goto LABEL_159;
          }
          unint64_t v93 = (unint64_t)v94 + 8;
        }
        else
        {
          if ((*((unsigned char *)v84 + 1) & 0x7F) != 2 && !*((_DWORD *)v84 + 3)) {
            goto LABEL_159;
          }
          uint64_t v92 = *((void *)v84 + 2);
          if ((v92 & 4) == 0) {
            goto LABEL_159;
          }
          unint64_t v93 = v92 & 0xFFFFFFFFFFFFFFF8;
          if (!v93) {
            goto LABEL_159;
          }
        }
        v134[0] = a5 + 4;
        sub_1CC5FA668(v93 + 16, v134);
        a1 = v130;
        a6 = v82;
        a3 = v81;
      }
LABEL_159:
      uint64_t v85 = v140;
      *uint64_t v16 = (llvm::DILocation *)v140;
      if (!v85) {
        goto LABEL_160;
      }
      uint64_t v82 = a6;
      uint64_t v86 = a3;
      llvm::MetadataTracking::track((uint64_t)(a5 + 4), v85, 2);
      a3 = v86;
LABEL_162:
      a1 = v130;
      a6 = v82;
      if (!v140) {
        goto LABEL_160;
      }
      int v87 = *v140;
      if ((v87 - 4) > 0x1E)
      {
        uint64_t v90 = a3;
        if ((v87 - 3) >= 0xFFFFFFFE) {
          uint64_t v95 = v140;
        }
        else {
          uint64_t v95 = 0;
        }
        if ((v87 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v89 = (unint64_t)(v95 + 8);
          goto LABEL_186;
        }
        a1 = v130;
        if (v87 == 3) {
          *((void *)v140 + 1) = 0;
        }
      }
      else if ((v140[1] & 0x7F) == 2 || *((_DWORD *)v140 + 3))
      {
        uint64_t v88 = *((void *)v140 + 2);
        if ((v88 & 4) != 0)
        {
          unint64_t v89 = v88 & 0xFFFFFFFFFFFFFFF8;
          if (v89)
          {
            uint64_t v90 = a3;
LABEL_186:
            v134[0] = &v140;
            sub_1CC5FA668(v89 + 16, v134);
            a1 = v130;
            a6 = v82;
            a3 = v90;
          }
        }
      }
LABEL_160:
      int v34 = v127;
    }
  }
  unint64_t v53 = v13;
LABEL_93:
  if ((v13 & 0x80000000) != 0
    && (v53 & 0x7FFFFFFF) < *(unsigned int *)(a4 + 432)
    && *(void *)(*(void *)(a4 + 424) + 8 * (v53 & 0x7FFFFFFF)) == 257
    || (a3 & 0x80000000) != 0
    && (a3 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a4 + 432)
    && *(void *)(*(void *)(a4 + 424) + 8 * (a3 & 0x7FFFFFFF)) == 257)
  {
    uint64_t v54 = 257;
    BOOL v55 = a1 == 257;
    if (a1 == 257 || a9) {
      goto LABEL_103;
    }
    return 0;
  }
  BOOL v55 = 1;
  uint64_t v54 = a1;
LABEL_103:
  if (v53 >> 31) {
    uint64_t v56 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v53 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v56 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v53);
  }
  uint64_t v57 = *v56;
  unsigned int v58 = a8;
  if ((*(unsigned char *)(v57 + 3) & 1) == 0) {
    uint64_t v57 = *(void *)(v57 + 24);
  }
  uint64_t v59 = *(void *)(v57 + 8);
  if (**(_WORD **)(v59 + 16) != 165 || (a7 & 1) == 0 && (*(_WORD *)(v59 + 44) & 0x100) == 0) {
    return 0;
  }
  BOOL v131 = v55;
  int v60 = v34;
  int v132 = (int)a3;
  uint64_t v133 = a6;
  uint64_t v129 = (unsigned __int8 *)a1;
  if (!sub_1CBAC7E60(v13, a4)) {
    return 0;
  }
  if ((v13 & 0x80000000) != 0) {
    uint64_t v62 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v53 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v62 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v53);
  }
  uint64_t v63 = *v62;
  if (v63)
  {
    while ((*(unsigned char *)(v63 + 3) & 1) != 0)
    {
      uint64_t v63 = *(void *)(v63 + 24);
      if (!v63) {
        goto LABEL_116;
      }
    }
    do
    {
      uint64_t v63 = *(void *)(v63 + 24);
      BOOL v64 = v63 == 0;
    }
    while (v63 && (*(unsigned char *)(v63 + 3) & 1) != 0);
  }
  else
  {
LABEL_116:
    BOOL v64 = 0;
  }
  uint64_t v65 = *(void *)(v59 + 32);
  int v66 = *(_DWORD *)(v65 + 36);
  int v67 = *(_DWORD *)(v65 + 68);
  uint64_t v68 = (unsigned __int8 *)llvm::DILocation::getMergedLocation(*v16, *(const llvm::DILocation **)(v59 + 56), v61);
  uint64_t v140 = v68;
  if (v68) {
    llvm::MetadataTracking::track((uint64_t)&v140, v68, 2);
  }
  if (&v140 == (unsigned __int8 **)v16) {
    goto LABEL_230;
  }
  uint64_t v69 = *v16;
  if (*v16)
  {
    int v114 = *(unsigned __int8 *)v69;
    if ((v114 - 4) > 0x1E)
    {
      if ((v114 - 3) >= 0xFFFFFFFE) {
        uint64_t v124 = *v16;
      }
      else {
        uint64_t v124 = 0;
      }
      if ((v114 - 3) < 0xFFFFFFFE)
      {
        if (v114 == 3) {
          *((void *)v69 + 1) = 0;
        }
        goto LABEL_123;
      }
      unint64_t v116 = (unint64_t)v124 + 8;
    }
    else
    {
      if ((*((unsigned char *)v69 + 1) & 0x7F) != 2 && !*((_DWORD *)v69 + 3)) {
        goto LABEL_123;
      }
      uint64_t v115 = *((void *)v69 + 2);
      if ((v115 & 4) == 0) {
        goto LABEL_123;
      }
      unint64_t v116 = v115 & 0xFFFFFFFFFFFFFFF8;
      if (!v116) {
        goto LABEL_123;
      }
    }
    v134[0] = a5 + 4;
    sub_1CC5FA668(v116 + 16, v134);
  }
LABEL_123:
  uint64_t v70 = v140;
  *uint64_t v16 = (llvm::DILocation *)v140;
  if (!v70) {
    goto LABEL_124;
  }
  llvm::MetadataTracking::track((uint64_t)(a5 + 4), v70, 2);
LABEL_230:
  if (!v140) {
    goto LABEL_124;
  }
  int v111 = *v140;
  if ((v111 - 4) <= 0x1E)
  {
    if ((v140[1] & 0x7F) != 2 && !*((_DWORD *)v140 + 3)) {
      goto LABEL_124;
    }
    uint64_t v112 = *((void *)v140 + 2);
    if ((v112 & 4) == 0) {
      goto LABEL_124;
    }
    unint64_t v113 = v112 & 0xFFFFFFFFFFFFFFF8;
    if (!v113) {
      goto LABEL_124;
    }
    goto LABEL_260;
  }
  if ((v111 - 3) >= 0xFFFFFFFE) {
    uint64_t v125 = v140;
  }
  else {
    uint64_t v125 = 0;
  }
  if ((v111 - 3) >= 0xFFFFFFFE)
  {
    unint64_t v113 = (unint64_t)(v125 + 8);
LABEL_260:
    v134[0] = &v140;
    sub_1CC5FA668(v113 + 16, v134);
    goto LABEL_124;
  }
  if (v111 == 3) {
    *((void *)v140 + 1) = 0;
  }
LABEL_124:
  if (v66 < 0 && (v66 & 0x7FFFFFFFu) < *(_DWORD *)(a4 + 432)) {
    uint64_t v71 = *(unsigned __int8 **)(*(void *)(a4 + 424) + 8 * (v66 & 0x7FFFFFFF));
  }
  else {
    uint64_t v71 = 0;
  }
  int v128 = v67;
  if (v67 < 0 && (v67 & 0x7FFFFFFFu) < *(_DWORD *)(a4 + 432)) {
    uint64_t v96 = *(void *)(*(void *)(a4 + 424) + 8 * (v67 & 0x7FFFFFFF));
  }
  else {
    uint64_t v96 = 0;
  }
  if (v60)
  {
    uint64_t v140 = v71;
    int v141 = 0;
    LODWORD(v134[0]) = v66;
    int v135 = 0;
    (*((void (**)(llvm::DILocation **, uint64_t, unsigned __int8 **, uint64_t, void *, uint64_t, uint64_t))*a5
     + 4))(a5, 177, &v140, 1, v134, 1, v58 | 0x100000000);
    int v66 = *(_DWORD *)(*(void *)(v97 + 32) + 4);
  }
  if (v71 != (unsigned __int8 *)v54)
  {
    uint64_t v140 = (unsigned __int8 *)v54;
    int v141 = 0;
    LODWORD(v134[0]) = v66;
    int v135 = 0;
    (*((void (**)(llvm::DILocation **, uint64_t, unsigned __int8 **, uint64_t, void *, uint64_t, void))*a5
     + 4))(a5, 178, &v140, 1, v134, 1, 0);
    int v66 = *(_DWORD *)(*(void *)(v98 + 32) + 4);
  }
  if (v96 == v54)
  {
    int v99 = v132;
    int v100 = v128;
    if ((v132 & 0x80000000) == 0) {
      goto LABEL_218;
    }
  }
  else
  {
    uint64_t v140 = (unsigned __int8 *)v54;
    int v141 = 0;
    LODWORD(v134[0]) = v128;
    int v135 = 0;
    (*((void (**)(llvm::DILocation **, uint64_t, unsigned __int8 **, uint64_t, void *, uint64_t, void))*a5
     + 4))(a5, 178, &v140, 1, v134, 1, 0);
    int v100 = *(_DWORD *)(*(void *)(v101 + 32) + 4);
    int v99 = v132;
    if ((v132 & 0x80000000) == 0) {
      goto LABEL_218;
    }
  }
  if ((v99 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a4 + 432))
  {
    uint64_t v102 = *(void *)(*(void *)(a4 + 424) + 8 * (v99 & 0x7FFFFFFF));
    goto LABEL_219;
  }
LABEL_218:
  uint64_t v102 = 0;
LABEL_219:
  if (v102 != v54)
  {
    uint64_t v140 = (unsigned __int8 *)v54;
    int v141 = 0;
    LODWORD(v134[0]) = v99;
    int v135 = 0;
    (*((void (**)(llvm::DILocation **, uint64_t, unsigned __int8 **, uint64_t, void *, uint64_t, void))*a5
     + 4))(a5, 178, &v140, 1, v134, 1, 0);
    int v99 = *(_DWORD *)(*(void *)(v103 + 32) + 4);
  }
  uint64_t v104 = v133;
  char v105 = !v64;
  if (v16 == (llvm::DILocation **)v133) {
    char v105 = 1;
  }
  if (v105) {
    goto LABEL_227;
  }
  int v106 = *v16;
  if (*v16)
  {
    int v119 = *(unsigned __int8 *)v106;
    if ((v119 - 4) > 0x1E)
    {
      if ((v119 - 3) >= 0xFFFFFFFE) {
        uint64_t v126 = *v16;
      }
      else {
        uint64_t v126 = 0;
      }
      if ((v119 - 3) < 0xFFFFFFFE)
      {
        if (v119 == 3) {
          *((void *)v106 + 1) = 0;
        }
        goto LABEL_225;
      }
      int v122 = v100;
      int v123 = v99;
      unint64_t v121 = (unint64_t)v126 + 8;
    }
    else
    {
      if ((*((unsigned char *)v106 + 1) & 0x7F) != 2 && !*((_DWORD *)v106 + 3)) {
        goto LABEL_225;
      }
      uint64_t v120 = *((void *)v106 + 2);
      if ((v120 & 4) == 0) {
        goto LABEL_225;
      }
      unint64_t v121 = v120 & 0xFFFFFFFFFFFFFFF8;
      if (!v121) {
        goto LABEL_225;
      }
      int v122 = v100;
      int v123 = v99;
    }
    v134[0] = a5 + 4;
    sub_1CC5FA668(v121 + 16, v134);
    uint64_t v104 = v133;
    int v99 = v123;
    int v100 = v122;
  }
LABEL_225:
  uint64_t v107 = *v104;
  *uint64_t v16 = (llvm::DILocation *)*v104;
  if (v107)
  {
    int v117 = v100;
    int v118 = v99;
    llvm::MetadataTracking::track((uint64_t)(a5 + 4), v107, 2);
    int v99 = v118;
    int v100 = v117;
  }
LABEL_227:
  uint64_t v140 = (unsigned __int8 *)v54;
  int v141 = 0;
  LODWORD(v134[0]) = v66;
  int v135 = 0;
  int v136 = v100;
  int v137 = 0;
  int v138 = v99;
  int v139 = 0;
  uint64_t v109 = (*((uint64_t (**)(llvm::DILocation **, uint64_t, unsigned __int8 **, uint64_t, void *, uint64_t, uint64_t))*a5
          + 4))(a5, 166, &v140, 1, v134, 3, v58 | 0x100000000);
  uint64_t result = v108;
  if (!v131)
  {
    uint64_t v140 = v129;
    int v141 = 0;
    v134[0] = v109;
    v134[1] = v108;
    int v135 = 1;
    (*((void (**)(llvm::DILocation **, uint64_t, unsigned __int8 **, uint64_t, void *, uint64_t, void))*a5
     + 4))(a5, 179, &v140, 1, v134, 1, 0);
    return v110;
  }
  return result;
}

uint64_t sub_1CBAAF2D4(uint64_t a1, uint64_t a2)
{
  int v2 = **(unsigned __int16 **)(a1 + 16);
  if ((v2 - 134) < 2) {
    return 1;
  }
  if (v2 != 51) {
    return 0;
  }
  sub_1CC73C210(*(_DWORD *)(*(void *)(a1 + 32) + 132), a2, (uint64_t)&v20);
  sub_1CC73C210(*(_DWORD *)(*(void *)(a1 + 32) + 164), a2, (uint64_t)&v17);
  int v6 = v22;
  if (v22 && v19)
  {
    if (v21 > 0x40)
    {
      int v7 = 0;
      int64_t v8 = ((unint64_t)v21 + 63) >> 6;
      do
      {
        BOOL v9 = v8-- < 1;
        if (v9) {
          break;
        }
        unint64_t v10 = *(void *)(v20 + 8 * v8);
        v7 += __clz(v10);
      }
      while (!v10);
      unsigned int v11 = v21 | 0xFFFFFFC0;
      if ((v21 & 0x3F) == 0) {
        unsigned int v11 = 0;
      }
      if (v7 + v11 != v21 - 1) {
        goto LABEL_20;
      }
    }
    else if (v20 != 1)
    {
      goto LABEL_20;
    }
    if (v18 > 0x40)
    {
      int v12 = 0;
      int64_t v13 = ((unint64_t)v18 + 63) >> 6;
      do
      {
        BOOL v9 = v13-- < 1;
        if (v9) {
          break;
        }
        unint64_t v14 = *(void *)(v17 + 8 * v13);
        v12 += __clz(v14);
      }
      while (!v14);
      unsigned int v15 = v18 | 0xFFFFFFC0;
      if ((v18 & 0x3F) == 0) {
        unsigned int v15 = 0;
      }
      if (v12 + v15 != v18) {
        goto LABEL_20;
      }
    }
    else if (v17)
    {
LABEL_20:
      uint64_t v3 = 0;
      goto LABEL_28;
    }
    uint64_t v3 = 1;
    goto LABEL_28;
  }
  uint64_t v3 = 0;
  if (v19)
  {
LABEL_28:
    if (v18 >= 0x41 && v17)
    {
      MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
      int v6 = v22;
    }
  }
  if (v6 && v21 >= 0x41 && v20) {
    MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
  }
  return v3;
}

BOOL sub_1CBAAF488(__int16 a1, _DWORD *a2, uint64_t a3)
{
  if (a1 != 66 && a1 != 45) {
    return 0;
  }
  int v4 = a2[1];
  if (v4 < 0 && (uint64_t v5 = v4 & 0x7FFFFFFF, v5 < *(_DWORD *)(a3 + 432))) {
    unint64_t v6 = *(void *)(*(void *)(a3 + 424) + 8 * v5);
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v41 = v6;
  uint64_t v7 = a2[9];
  unint64_t v8 = a2[17];
  if ((v7 & 0x80000000) != 0) {
    BOOL v9 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
  }
  else {
    BOOL v9 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v7);
  }
  uint64_t v10 = *v9;
  if (!v10) {
    goto LABEL_13;
  }
  if ((*(unsigned char *)(v10 + 3) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v10 + 24);
    if (!v10 || (*(unsigned char *)(v10 + 3) & 1) == 0) {
      goto LABEL_13;
    }
  }
  uint64_t v11 = *(void *)(v10 + 8);
  if (!v11) {
    goto LABEL_13;
  }
  if (**(_WORD **)(v11 + 16) != 127) {
    goto LABEL_13;
  }
  if (*(_DWORD *)(v11 + 40) != 3) {
    goto LABEL_13;
  }
  uint64_t v16 = *(void *)(v11 + 32);
  int v17 = *(_DWORD *)(v16 + 36);
  sub_1CC73C210(*(_DWORD *)(v16 + 68), a3, (uint64_t)&v42);
  if (!v44) {
    goto LABEL_13;
  }
  char v18 = v43;
  if (v43 >= 0x41)
  {
LABEL_59:
    if (v42) {
      MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
    }
    goto LABEL_13;
  }
  if ((v8 & 0x80000000) != 0) {
    char v19 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  }
  else {
    char v19 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v8);
  }
  uint64_t v20 = *v19;
  if (v20)
  {
    uint64_t v21 = v42;
    if (*(unsigned char *)(v20 + 3) & 1) != 0 || (uint64_t v20 = *(void *)(v20 + 24)) != 0 && (*(unsigned char *)(v20 + 3))
    {
      uint64_t v22 = *(void *)(v20 + 8);
      if (v22)
      {
        if (**(_WORD **)(v22 + 16) == 128 && *(_DWORD *)(v22 + 40) == 3)
        {
          uint64_t v23 = *(void *)(v22 + 32);
          int v24 = *(_DWORD *)(v23 + 36);
          sub_1CC73C210(*(_DWORD *)(v23 + 68), a3, (uint64_t)&v42);
          if (v44)
          {
            if (v43 < 0x41)
            {
              if (v17 == v24)
              {
                unint64_t v25 = ((v42 << -(char)v43 >> -(char)v43) & 0xFFFFFFFFFFFFFF00)
                    + (v21 << -v18 >> -v18)
                    + (v42 << -(char)v43 >> -(char)v43);
                uint64_t v26 = sub_1CB8F1DC4(&v41);
                if (v27 == 1)
                {
                  uint64_t v40 = v26;
                  uint64_t v26 = v40;
                }
                if (v25 == v26) {
                  return 1;
                }
              }
              goto LABEL_13;
            }
            goto LABEL_59;
          }
        }
      }
    }
  }
LABEL_13:
  if (v8 >> 31) {
    int v12 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  }
  else {
    int v12 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v8);
  }
  uint64_t v13 = *v12;
  if (!v13) {
    return 0;
  }
  if ((*(unsigned char *)(v13 + 3) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v13 + 24);
    if (!v13 || (*(unsigned char *)(v13 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v14 = *(void *)(v13 + 8);
  if (!v14) {
    return 0;
  }
  if (**(_WORD **)(v14 + 16) != 127) {
    return 0;
  }
  if (*(_DWORD *)(v14 + 40) != 3) {
    return 0;
  }
  uint64_t v28 = *(void *)(v14 + 32);
  int v29 = *(_DWORD *)(v28 + 36);
  sub_1CC73C210(*(_DWORD *)(v28 + 68), a3, (uint64_t)&v42);
  if (!v44) {
    return 0;
  }
  char v30 = v43;
  if (v43 >= 0x41) {
    goto LABEL_61;
  }
  if ((v7 & 0x80000000) != 0) {
    uint64_t v31 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v31 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v7);
  }
  uint64_t v32 = *v31;
  if (!v32) {
    return 0;
  }
  uint64_t v33 = v42;
  if ((*(unsigned char *)(v32 + 3) & 1) == 0)
  {
    uint64_t v32 = *(void *)(v32 + 24);
    if (!v32 || (*(unsigned char *)(v32 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v34 = *(void *)(v32 + 8);
  if (!v34) {
    return 0;
  }
  if (**(_WORD **)(v34 + 16) != 128) {
    return 0;
  }
  if (*(_DWORD *)(v34 + 40) != 3) {
    return 0;
  }
  uint64_t v35 = *(void *)(v34 + 32);
  int v36 = *(_DWORD *)(v35 + 36);
  sub_1CC73C210(*(_DWORD *)(v35 + 68), a3, (uint64_t)&v42);
  if (!v44) {
    return 0;
  }
  if (v43 >= 0x41)
  {
LABEL_61:
    if (v42) {
      MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
    }
    return 0;
  }
  if (v29 != v36) {
    return 0;
  }
  unint64_t v37 = ((v42 << -(char)v43 >> -(char)v43) & 0xFFFFFFFFFFFFFF00)
      + (v33 << -v30 >> -v30)
      + (v42 << -(char)v43 >> -(char)v43);
  uint64_t v39 = sub_1CB8F1DC4(&v41);
  if (v38 == 1) {
  return v37 == v39;
  }
}

uint64_t sub_1CBAAF87C(uint64_t *a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v6 = sub_1CB8F1DC4(a3);
  if (v7 == 1)
  {
    unsigned int v11 = v6;
    unsigned int v6 = v11;
  }
  unsigned int v17 = v6;
  if (v6 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v16);
  }
  unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
  if (!v6) {
    unint64_t v8 = 0;
  }
  unint64_t v16 = v8;
  unsigned int v13 = 1;
  unint64_t v12 = 0;
  unsigned int v15 = 1;
  uint64_t v14 = 0;
  uint64_t v9 = sub_1CBAB2F34(a1, a2, a3, (llvm::APInt *)&v16, &v12, 0, 0);
  if (v15 >= 0x41 && v14) {
    MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41 && v12) {
    MEMORY[0x1D25D9CB0](v12, 0x1000C8000313F17);
  }
  if (v17 >= 0x41 && v16) {
    MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
  }
  return v9;
}

BOOL sub_1CBAAF9D8(unsigned int a1, unsigned int a2, uint64_t a3)
{
  sub_1CC6DEE8C(a3, (const char *)a1, (uint64_t)&__src);
  sub_1CC6DEE8C(a3, (const char *)a2, (uint64_t)&v7);
  if (v12 >= 0x41) {
    operator new[]();
  }
  if (v12) {
    BOOL v5 = (v7 | (unint64_t)__src) == 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
  }
  else {
    BOOL v5 = 1;
  }
  if (v10 >= 0x41 && v9) {
    MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
  }
  if (v8 >= 0x41 && v7) {
    MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
  }
  if (v14 >= 0x41 && v13) {
    MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
  }
  if (v12 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  return v5;
}

uint64_t sub_1CBAAFBA4(llvm::ConstantInt ******a1, uint64_t a2)
{
  if (**(_WORD **)(a2 + 16) != 66) {
    return 0;
  }
  int v4 = *(_DWORD **)(a2 + 32);
  int v5 = v4[1];
  unsigned int v6 = *a1;
  uint64_t v7 = (uint64_t)(*a1)[1][5];
  if (v5 < 0 && (v5 & 0x7FFFFFFFu) < *(_DWORD *)(v7 + 432)) {
    unint64_t v8 = *(void *)(*(void *)(v7 + 424) + 8 * (v5 & 0x7FFFFFFF));
  }
  else {
    unint64_t v8 = 0;
  }
  unint64_t v23 = v8;
  uint64_t v9 = v4[9];
  uint64_t v10 = v4[17];
  v6[5] = *(llvm::ConstantInt *****)(a2 + 24);
  v6[6] = (llvm::ConstantInt ****)a2;
  if (v9 == v10) {
    goto LABEL_22;
  }
  if ((v9 & 0x80000000) != 0) {
    unsigned int v11 = (uint64_t *)(*(void *)(v7 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v11 = (uint64_t *)(*(void *)(v7 + 272) + 8 * v9);
  }
  uint64_t v12 = *v11;
  if ((*(unsigned char *)(v12 + 3) & 1) == 0) {
    uint64_t v12 = *(void *)(v12 + 24);
  }
  if (**(_WORD **)(*(void *)(v12 + 8) + 16) == 68) {
    goto LABEL_28;
  }
  if ((v10 & 0x80000000) != 0) {
    uint64_t v13 = (uint64_t *)(*(void *)(v7 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v13 = (uint64_t *)(*(void *)(v7 + 272) + 8 * v10);
  }
  uint64_t v14 = *v13;
  if ((*(unsigned char *)(v14 + 3) & 1) == 0) {
    uint64_t v14 = *(void *)(v14 + 24);
  }
  if (**(_WORD **)(*(void *)(v14 + 8) + 16) == 68)
  {
LABEL_28:
    char v18 = *a1;
    LODWORD(v24) = v5;
    unsigned int v25 = 1;
    unsigned int v20 = sub_1CB8F1DC4(&v23);
    if (v19 == 1) {
    sub_1CB8F1EEC((uint64_t)&v21, v20, -1);
    }
    sub_1CC737454(v18, (uint64_t)&v24, (llvm::LLVMContext *)&v21);
    if (v22 >= 0x41 && v21) {
      MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
    }
    goto LABEL_24;
  }
  sub_1CC73C5E8(v10, v7, (uint64_t)&v24);
  if (!(_BYTE)v26) {
    return 0;
  }
  if (v25 >= 0x41)
  {
    if (v24) {
      MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
    }
    return 0;
  }
  uint64_t v16 = v24 << -(uint64_t)v25 >> -(uint64_t)v25;
  if (!v16)
  {
LABEL_22:
    unsigned int v17 = *a1;
    LODWORD(v21) = v5;
    unsigned int v22 = 1;
    LODWORD(v24) = v9;
  }
  else
  {
    if (v16 != -1) {
      return 0;
    }
    unsigned int v17 = *a1;
    LODWORD(v21) = v5;
    unsigned int v22 = 1;
    LODWORD(v24) = v10;
  }
  int v26 = 0;
  ((void (*)(llvm::ConstantInt *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*v17)[4])(v17, 19, &v21, 1, &v24, 1, 0);
LABEL_24:
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  return 1;
}

uint64_t sub_1CBAAFE34(void *a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v4 = (void *)*a1;
  v4[5] = *(void *)(a2 + 24);
  v4[6] = a2;
  int v5 = (void *)*a1;
  uint64_t v6 = *(void *)(v5[1] + 40);
  uint64_t v7 = *(_DWORD **)(a2 + 32);
  uint64_t v8 = v7[9];
  uint64_t v9 = v7[17];
  if ((v8 & 0x80000000) != 0) {
    uint64_t v10 = (uint64_t *)(*(void *)(v6 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v10 = (uint64_t *)(*(void *)(v6 + 272) + 8 * v8);
  }
  uint64_t v11 = *v10;
  if (!v11) {
    goto LABEL_6;
  }
  if (*(unsigned char *)(v11 + 3)) {
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(v11 + 24);
  if (v11)
  {
    if (*(unsigned char *)(v11 + 3))
    {
LABEL_5:
      uint64_t v11 = *(void *)(v11 + 8);
      goto LABEL_6;
    }
    uint64_t v11 = 0;
  }
LABEL_6:
  if ((v9 & 0x80000000) != 0) {
    uint64_t v12 = (uint64_t *)(*(void *)(v6 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v12 = (uint64_t *)(*(void *)(v6 + 272) + 8 * v9);
  }
  uint64_t v13 = *v12;
  if (v13 && ((*(unsigned char *)(v13 + 3) & 1) != 0 || (uint64_t v13 = *(void *)(v13 + 24)) != 0 && (*(unsigned char *)(v13 + 3) & 1) != 0)) {
    uint64_t v14 = *(void *)(v13 + 8);
  }
  else {
    uint64_t v14 = 0;
  }
  if (*(_DWORD *)(v11 + 40) != 2) {
    return 0;
  }
  uint64_t v17 = *(void *)(v11 + 32);
  if (*(unsigned char *)(v17 + 32)) {
    return 0;
  }
  int v18 = *(_DWORD *)(v17 + 36);
  if (v18 < 0 && (v18 & 0x7FFFFFFFu) < *(_DWORD *)(v6 + 432)) {
    uint64_t v19 = *(void *)(*(void *)(v6 + 424) + 8 * (v18 & 0x7FFFFFFF));
  }
  else {
    uint64_t v19 = 0;
  }
  int v20 = *(_DWORD *)(*(void *)(v14 + 32) + 36);
  if (v20 < 0 && (v20 & 0x7FFFFFFFu) < *(_DWORD *)(v6 + 432)) {
    uint64_t v21 = *(void *)(*(void *)(v6 + 424) + 8 * (v20 & 0x7FFFFFFF));
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v15 = 0;
  uint64_t v22 = **(unsigned __int16 **)(v11 + 16);
  if ((v22 - 118) <= 8 && ((1 << (v22 - 118)) & 0x141) != 0)
  {
    if (v19 == v21)
    {
      uint64_t v23 = **(unsigned __int16 **)(a2 + 16);
      uint64_t v31 = v19;
      int v32 = 0;
      LODWORD(v27[0]) = v18;
      int v28 = 0;
      int v29 = v20;
      int v30 = 0;
      uint64_t v15 = 1;
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t *, uint64_t, void *, uint64_t, void))(*v5 + 32))(v5, v23, &v31, 1, v27, 2, 0);
      unsigned int v25 = (void *)*a1;
      LODWORD(v31) = v7[1];
      int v32 = 1;
      v27[0] = v24;
      v27[1] = v26;
      int v28 = 1;
      (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, void *, uint64_t, void))(*v25 + 32))(v25, v22, &v31, 1, v27, 1, 0);
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
      return v15;
    }
    return 0;
  }
  return v15;
}

uint64_t sub_1CBAB00C0(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = a4;
  if ((a4 & 0x80000000) != 0) {
    uint64_t v10 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (a4 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v10 = (uint64_t *)(*(void *)(v8 + 272) + 8 * a4);
  }
  uint64_t v11 = *v10;
  if (v11 && ((*(unsigned char *)(v11 + 3) & 1) != 0 || (uint64_t v11 = *(void *)(v11 + 24)) != 0 && (*(unsigned char *)(v11 + 3) & 1) != 0))
  {
    uint64_t v12 = *(void *)(v11 + 8);
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v12 = 0;
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_11;
    }
  }
  if ((a3 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v8 + 432))
  {
    uint64_t v13 = *(void *)(*(void *)(v8 + 424) + 8 * (a3 & 0x7FFFFFFF));
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v13 = 0;
LABEL_12:
  if (*(_DWORD *)(v12 + 40) == 3)
  {
    uint64_t v14 = **(unsigned __int16 **)(v12 + 16);
    if ((a2 - 65) < 2 || a2 == 47)
    {
      if (v14 != a2) {
        goto LABEL_52;
      }
    }
    else if (a2 != 45 || (v14 - 45) >= 2)
    {
      goto LABEL_52;
    }
    int v38 = *(llvm::ConstantInt *******)(a1 + 8);
    sub_1CC73C824(*(_DWORD *)(*(void *)(v12 + 32) + 68), v8, 0, 0, (uint64_t)&v42);
    int v39 = v45;
    if ((_BYTE)v45)
    {
      if (v43 >= 0x41 && v42) {
        MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
      }
      unsigned int v15 = 2;
    }
    else
    {
      sub_1CC73C824(*(_DWORD *)(*(void *)(v12 + 32) + 36), *(void *)a1, 0, 0, (uint64_t)&v42);
      if (!(_BYTE)v45) {
        goto LABEL_52;
      }
      if (v43 >= 0x41 && v42) {
        MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
      }
      unsigned int v15 = 1;
    }
    uint64_t v37 = v15 ^ 3;
    sub_1CC73C210(a3, *(void *)a1, (uint64_t)&v42);
    if ((_BYTE)v44)
    {
      if (v43 < 0x41)
      {
        if (v39) {
          int v25 = v14;
        }
        else {
          int v25 = a2;
        }
        sub_1CC73DA2C(v25, a3, *(_DWORD *)(*(void *)(v12 + 32) + 32 * v15 + 4), *(void *)a1, (uint64_t)&v50);
        if (!v52) {
          goto LABEL_52;
        }
        uint64_t v27 = *v38;
        uint64_t v48 = v13;
        int v49 = 0;
        if (v39)
        {
          LODWORD(v42) = *(_DWORD *)(*(void *)(v12 + 32) + 32 * v37 + 4);
          int v44 = 0;
          uint64_t v40 = v13;
          int v41 = 0;
          int v28 = llvm::ConstantInt::get(***v27[1], (llvm::LLVMContext *)&v50, v26);
          uint64_t v45 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t *, void *))(*v27)[2])(v27, &v40, v28);
          uint64_t v46 = v29;
          int v47 = 1;
          ((void (*)(llvm::ConstantInt *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(*v27)[4])(v27, a2, &v48, 1, &v42, 2, **(unsigned __int16 **)(a1 + 16) | 0x100000000);
        }
        else
        {
          uint64_t v40 = v13;
          int v41 = 0;
          uint64_t v34 = llvm::ConstantInt::get(***v27[1], (llvm::LLVMContext *)&v50, v26);
          uint64_t v42 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t *, void *))(*v27)[2])(v27, &v40, v34);
          uint64_t v43 = v35;
          int v44 = 1;
          LODWORD(v45) = *(_DWORD *)(*(void *)(v12 + 32) + 32 * v37 + 4);
          int v47 = 0;
          ((void (*)(llvm::ConstantInt *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(*v27)[4])(v27, v14, &v48, 1, &v42, 2, **(unsigned __int16 **)(a1 + 16) | 0x100000000);
        }
        int v31 = *(_DWORD *)(*(void *)(v30 + 32) + 4);
        unsigned int v32 = v31 & 0xFFFFFF00;
        if (v52 && v51 >= 0x41 && v50) {
          MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
        }
LABEL_62:
        uint64_t v18 = 0x100000000;
        return v18 | v32 | v31;
      }
      if (v42) {
        MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
      }
    }
    uint64_t v16 = *(void *)a1;
    if ((a4 & 0x80000000) != 0) {
      uint64_t v17 = (uint64_t *)(*(void *)(v16 + 24) + 16 * (a4 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v17 = (uint64_t *)(*(void *)(v16 + 272) + 8 * v9);
    }
    uint64_t v18 = *v17;
    if (!v18) {
      goto LABEL_53;
    }
    while ((*(unsigned char *)(v18 + 3) & 1) != 0)
    {
      uint64_t v18 = *(void *)(v18 + 24);
      if (!v18) {
        goto LABEL_53;
      }
    }
    while (1)
    {
      uint64_t v18 = *(void *)(v18 + 24);
      if (!v18) {
        break;
      }
      if ((*(unsigned char *)(v18 + 3) & 1) == 0) {
        goto LABEL_52;
      }
    }
    if (v14 != 46 || **(unsigned char **)(a1 + 24))
    {
      if (v39) {
        uint64_t v19 = a2;
      }
      else {
        uint64_t v19 = v14;
      }
      int v20 = *v38;
      uint64_t v50 = v13;
      unsigned int v51 = 0;
      LODWORD(v42) = a3;
      int v44 = 0;
      LODWORD(v45) = *(_DWORD *)(*(void *)(v12 + 32) + 32 * v37 + 4);
      int v47 = 0;
      uint64_t v22 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(*v20)[4])(v20, v19, &v50, 1, &v42, 2, *(unsigned __int16 *)(v12 + 44) | 0x100000000);
      uint64_t v23 = *v38;
      uint64_t v50 = v13;
      unsigned int v51 = 0;
      if (v39)
      {
        uint64_t v42 = v22;
        uint64_t v43 = v21;
        int v24 = *(_DWORD *)(*(void *)(v12 + 32) + 68);
        int v44 = 1;
        LODWORD(v45) = v24;
        int v47 = 0;
      }
      else
      {
        LODWORD(v42) = *(_DWORD *)(*(void *)(v12 + 32) + 36);
        int v44 = 0;
        uint64_t v45 = v22;
        uint64_t v46 = v21;
        int v47 = 1;
      }
      ((void (*)(void))(*v23)[4])();
      int v31 = *(_DWORD *)(*(void *)(v36 + 32) + 4);
      unsigned int v32 = v31 & 0xFFFFFF00;
      goto LABEL_62;
    }
  }
LABEL_52:
  uint64_t v18 = 0;
LABEL_53:
  LOBYTE(v31) = 0;
  unsigned int v32 = 0;
  return v18 | v32 | v31;
}

uint64_t sub_1CBAB06C0(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 8) + 40);
  if ((a2 & 0x80000000) != 0) {
    uint64_t v3 = (uint64_t *)(*(void *)(v2 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v3 = (uint64_t *)(*(void *)(v2 + 272) + 8 * a2);
  }
  uint64_t v4 = *v3;
  if (!*v3) {
    return 1;
  }
  while ((*(unsigned char *)(v4 + 3) & 1) != 0)
  {
    uint64_t v4 = *(void *)(v4 + 24);
    if (!v4) {
      return 1;
    }
  }
  uint64_t v7 = (void *)(v4 + 8);
  uint64_t v6 = *(void *)(v4 + 8);
  uint64_t v8 = *(void *)(v6 + 32);
  if (!*(unsigned char *)v8)
  {
LABEL_8:
    int v9 = *(_DWORD *)(v8 + 4);
    if (v9 < 0)
    {
      uint64_t v10 = v9 & 0x7FFFFFFF;
      if (v10 < *(_DWORD *)(v2 + 432))
      {
        int v11 = **(unsigned __int16 **)(v6 + 16);
        unint64_t v19 = *(void *)(*(void *)(v2 + 424) + 8 * v10);
        if ((v19 & 0xFFFFFFFFFFFFFFF9) != 0)
        {
          if (v11 == 119)
          {
            unint64_t v13 = sub_1CB8F1DC4(&v19);
            if (v14 == 1)
            {
              unint64_t v15 = v13;
              unint64_t v13 = v15;
            }
            if (v13 > 0xF) {
              goto LABEL_27;
            }
          }
          uint64_t v18 = 0;
          unsigned int v12 = *(_DWORD *)(v8 + 4);
          uint64_t v17 = &v18;
          unsigned int v20 = v12;
          if (sub_1CBACAADC((uint64_t)v16, v2, &v20))
          {
            if (v18 == 0xFFFF)
            {
LABEL_27:
              while (1)
              {
                uint64_t v4 = *(void *)(v4 + 24);
                if (!v4) {
                  return 1;
                }
                if ((*(unsigned char *)(v4 + 3) & 1) == 0)
                {
                  uint64_t v6 = *(void *)(v4 + 8);
                  if (v6 != *v7)
                  {
                    uint64_t v7 = (void *)(v4 + 8);
                    uint64_t v8 = *(void *)(v6 + 32);
                    if (!*(unsigned char *)v8) {
                      goto LABEL_8;
                    }
                    return 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CBAB0838(uint64_t a1, int a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  unint64_t v23 = a3;
  uint64_t result = sub_1CC73C210(a4, a5, (uint64_t)&v24);
  if (!v26) {
    goto LABEL_2;
  }
  if (v25 >= 0x41)
  {
LABEL_27:
    uint64_t result = v24;
    if (v24) {
      uint64_t result = MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
    }
    goto LABEL_2;
  }
  unint64_t v10 = 0;
  uint64_t v11 = -(uint64_t)v25;
  if ((a4 & 0x80000000) != 0)
  {
    if ((a4 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(a5 + 432)) {
      unint64_t v10 = 0;
    }
    else {
      unint64_t v10 = *(void *)(*(void *)(a5 + 424) + 8 * (a4 & 0x7FFFFFFF));
    }
  }
  uint64_t v12 = v24 << v11;
  unint64_t v22 = v10;
  uint64_t result = sub_1CB8F1DC4(&v22);
  unsigned int v14 = result;
  if (v13 == 1) {
  unsigned int v25 = v14;
  }
  if (v14 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v24);
  }
  unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
  if (!v14) {
    unint64_t v15 = 0;
  }
  unint64_t v24 = v15 & (v12 >> v11);
  if ((a2 - 118) < 2 || a2 == 126)
  {
    unsigned int v19 = sub_1CB8F1DC4(&v23);
    if (v18 == 1) {
    uint64_t result = (uint64_t)llvm::APInt::zextOrTrunc((uint64_t *)&v24, v19, (uint64_t)&v20);
    }
    goto LABEL_22;
  }
  if (a2 != 124)
  {
    if (v25 < 0x41)
    {
LABEL_2:
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 16) = 0;
      return result;
    }
    goto LABEL_27;
  }
  unsigned int v17 = sub_1CB8F1DC4(&v23);
  if (v16 == 1) {
  uint64_t result = llvm::APInt::sextOrTrunc((uint64_t)&v24, v17, (uint64_t)&v20);
  }
LABEL_22:
  *(_DWORD *)(a1 + 8) = v21;
  *(void *)a1 = v20;
  *(unsigned char *)(a1 + 16) = 1;
  if (v25 >= 0x41)
  {
    uint64_t result = v24;
    if (v24) {
      return MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t sub_1CBAB0A3C(uint64_t result, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *(void *)(*(void *)(*a2 + 8) + 40);
  unsigned int v10 = a3[1];
  unsigned int v9 = a3[2];
  if ((v9 & 0x80000000) != 0 && (v9 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v8 + 432)) {
    unint64_t v11 = *(void *)(*(void *)(v8 + 424) + 8 * (v9 & 0x7FFFFFFF));
  }
  else {
    unint64_t v11 = 0;
  }
  int v12 = *a3;
  uint64_t v142 = v11;
  if ((v10 & 0x80000000) != 0 && (v10 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v8 + 432)) {
    uint64_t v13 = *(void *)(*(void *)(v8 + 424) + 8 * (v10 & 0x7FFFFFFF));
  }
  else {
    uint64_t v13 = 0;
  }
  if ((v11 & 1) == 0 || v13 != v11) {
    goto LABEL_14;
  }
  unsigned int v15 = sub_1CB8F1DC4((unint64_t *)&v142);
  if (v14 == 1) {
  sub_1CC73C210(v10, v8, (uint64_t)&__s1);
  }
  if ((_BYTE)v149)
  {
    if (v148 > 0x40)
    {
      if (__s1) {
        MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
      }
      unint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v16 = 0;
    }
    else
    {
      unint64_t v26 = ((uint64_t)((void)__s1 << -(char)v148) >> -(char)v148) & 0xFFFFFFFFFFFFFF00;
      uint64_t v27 = ((uint64_t)((void)__s1 << -(char)v148) >> -(char)v148);
      uint64_t v16 = 1;
    }
    uint64_t v17 = v27 | v26;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  uint64_t result = sub_1CC73C210(v9, v8, (uint64_t)&__s1);
  if (!(_BYTE)v149)
  {
LABEL_14:
    *(unsigned char *)uint64_t v7 = 0;
    *(unsigned char *)(v7 + 32) = 0;
    uint64_t v18 = *(void *)(*(void *)(*a2 + 8) + 40);
    uint64_t v20 = a3[1];
    unsigned int v19 = a3[2];
    int v21 = *a3;
    if ((v19 & 0x80000000) != 0 && (v19 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v18 + 432)) {
      unint64_t v22 = *(void *)(*(void *)(v18 + 424) + 8 * (v19 & 0x7FFFFFFF));
    }
    else {
      unint64_t v22 = 0;
    }
    unint64_t v144 = v22;
    if ((v20 & 0x80000000) != 0 && (v20 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v18 + 432)) {
      unint64_t v23 = *(void **)(*(void *)(v18 + 424) + 8 * (v20 & 0x7FFFFFFF));
    }
    else {
      unint64_t v23 = 0;
    }
    if ((v22 & 1) == 0) {
      goto LABEL_24;
    }
    unsigned int v25 = sub_1CB8F1DC4(&v144);
    if (v24 == 1) {
    uint64_t result = sub_1CC73C210(v19, v18, (uint64_t)&__s1);
    }
    if (!(_BYTE)v149) {
      goto LABEL_24;
    }
    if (v148 >= 0x41)
    {
      uint64_t result = (uint64_t)__s1;
      if (__s1) {
        uint64_t result = MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
      }
      goto LABEL_24;
    }
    uint64_t v32 = (uint64_t)((void)__s1 << -(uint64_t)v148) >> -(uint64_t)v148;
    unsigned int v146 = v25;
    if (v25 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&__s2);
    }
    unint64_t v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
    if (!v25) {
      unint64_t v33 = 0;
    }
    __s2 = (void *)(v33 & v32);
    unsigned int v34 = v21 & 0xFFFFFFFE;
    if ((v21 & 0xFFFFFFFE) != 0x20) {
      goto LABEL_55;
    }
    uint64_t v35 = (uint64_t *)((v20 & 0x80000000) != 0
                    ? *(void *)(v18 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8
                    : *(void *)(v18 + 272) + 8 * v20);
    uint64_t v36 = *v35;
    if (!v36) {
      goto LABEL_55;
    }
    while ((*(unsigned char *)(v36 + 3) & 1) != 0)
    {
      uint64_t v36 = *(void *)(v36 + 24);
      if (!v36) {
        goto LABEL_55;
      }
    }
    while (1)
    {
      uint64_t v36 = *(void *)(v36 + 24);
      if (!v36) {
        break;
      }
      if ((*(unsigned char *)(v36 + 3) & 1) == 0) {
        goto LABEL_55;
      }
    }
    if ((v20 & 0x80000000) != 0) {
      int v47 = (uint64_t *)(*(void *)(v18 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
    }
    else {
      int v47 = (uint64_t *)(*(void *)(v18 + 272) + 8 * v20);
    }
    uint64_t v48 = *v47;
    if (v48)
    {
      if (*(unsigned char *)(v48 + 3) & 1) != 0 || (uint64_t v48 = *(void *)(v48 + 24)) != 0 && (*(unsigned char *)(v48 + 3))
      {
        uint64_t v49 = *(void *)(v48 + 8);
        if (v49)
        {
          if (**(_WORD **)(v49 + 16) == 126 && *(_DWORD *)(v49 + 40) == 2)
          {
            int v94 = *(_DWORD *)(*(void *)(v49 + 32) + 36);
            int v133 = v94;
            uint64_t v137 = (uint64_t)((void)__s1 << -(uint64_t)v148) >> -(uint64_t)v148;
            if (v94 < 0 && (v94 & 0x7FFFFFFFu) < *(_DWORD *)(v18 + 432))
            {
              uint64_t v51 = a4;
              uint64_t v95 = *(void **)(*(void *)(v18 + 424) + 8 * (v94 & 0x7FFFFFFF));
            }
            else
            {
              uint64_t v51 = a4;
              uint64_t v95 = 0;
            }
            uint64_t v53 = v23;
            __s1 = v95;
            unsigned int v25 = sub_1CB8F1DC4((unint64_t *)&__s1);
            if (v96 == 1) {
            int v55 = v21;
            }
            int v56 = v133;
            uint64_t v32 = v137;
            goto LABEL_102;
          }
        }
      }
    }
    if ((v20 & 0x80000000) != 0) {
      uint64_t v50 = (uint64_t *)(*(void *)(v18 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v50 = (uint64_t *)(*(void *)(v18 + 272) + 8 * v20);
    }
    uint64_t v51 = a4;
    uint64_t v52 = *v50;
    if (v52)
    {
      uint64_t v53 = v23;
      if ((*(unsigned char *)(v52 + 3) & 1) == 0)
      {
        int v55 = v21;
        uint64_t v52 = *(void *)(v52 + 24);
        if (!v52 || (*(unsigned char *)(v52 + 3) & 1) == 0) {
          goto LABEL_101;
        }
      }
      uint64_t v54 = *(void *)(v52 + 8);
      if (v54 && **(_WORD **)(v54 + 16) == 124)
      {
        uint64_t v139 = (uint64_t)((void)__s1 << -(uint64_t)v148) >> -(uint64_t)v148;
        int v55 = v21;
        if (*(_DWORD *)(v54 + 40) == 2)
        {
          int v135 = *(_DWORD *)(*(void *)(v54 + 32) + 36);
          if (v135 < 0 && (uint64_t v118 = v135 & 0x7FFFFFFF, v118 < *(_DWORD *)(v18 + 432))) {
            int v119 = *(void **)(*(void *)(v18 + 424) + 8 * v118);
          }
          else {
            int v119 = 0;
          }
          __s1 = v119;
          unsigned int v25 = sub_1CB8F1DC4((unint64_t *)&__s1);
          if (v120 == 1) {
          unsigned int v121 = v146;
          }
          uint64_t result = sub_1CBAB1CB8((llvm::APInt *)&__s2);
          unsigned int v58 = v121 - result + 1;
          int v56 = v135;
          uint64_t v32 = v139;
LABEL_105:
          int v21 = v55;
          unint64_t v23 = v53;
          a4 = v51;
          if (v25 && v25 < v146 && v25 >= v58)
          {
            uint64_t v59 = (8 * v25) | 1;
            uint64_t v60 = *a2;
            *(void *)(v60 + 40) = *(void *)(v51 + 24);
            *(void *)(v60 + 48) = v51;
            int v61 = (void *)*a2;
            uint64_t v142 = v59;
            unsigned int v143 = 0;
            LODWORD(__s1) = v56;
            int v149 = 0;
            sub_1CC738034(v61, 126, (unint64_t *)&v142, (int *)&__s1);
            uint64_t v63 = v62;
            if (v25 == 1)
            {
              unsigned int v65 = v146;
              if (v146 < 0x41
                || v65 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__s2) <= 0x40)
              {
                p_s2 = __s2;
                if (v65 < 0x41) {
                  p_s2 = &__s2;
                }
                if (*p_s2 == 1)
                {
                  uint64_t v131 = *a2;
                  __s1 = (void *)9;
                  unsigned int v148 = 0;
                  uint64_t result = sub_1CC7362A8(v131, (unint64_t *)&__s1, 0);
                  uint64_t v70 = v132;
                  if (v21 == 32) {
                    int v21 = 33;
                  }
                  else {
                    int v21 = 32;
                  }
LABEL_115:
                  int v46 = 0;
                  int v71 = *(_DWORD *)(*(void *)(v63 + 32) + 4);
                  int v72 = *(_DWORD *)(*(void *)(v70 + 32) + 4);
                  *(_DWORD *)uint64_t v7 = v21;
                  *(_DWORD *)(v7 + 4) = v71;
                  *(_DWORD *)(v7 + 8) = v72;
                  *(void *)(v7 + 16) = v59;
LABEL_150:
                  *(_DWORD *)(v7 + 24) = 0;
LABEL_151:
                  *(unsigned char *)(v7 + 32) = 1;
LABEL_142:
                  if (v146 >= 0x41)
                  {
                    uint64_t result = (uint64_t)__s2;
                    if (__s2) {
                      uint64_t result = MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
                    }
                  }
                  if (!v46) {
                    return result;
                  }
LABEL_24:
                  *(unsigned char *)uint64_t v7 = 0;
                  *(unsigned char *)(v7 + 32) = 0;
                  return result;
                }
              }
              uint64_t v64 = *a2;
              __s1 = (void *)9;
              unsigned int v148 = 0;
            }
            else
            {
              uint64_t v64 = *a2;
              __s1 = (void *)((8 * v25) | 1);
              unsigned int v148 = 0;
              unsigned int v65 = v146;
              if (v25 > 0x40)
              {
                if (v146 != v25) {
                  operator new[]();
                }
                sub_1CD0463BC((uint64_t)&v142, (uint64_t)&__s2);
                LOBYTE(v25) = v143;
                if (v143 > 0x40)
                {
                  unint64_t v68 = *(void *)v142;
                  goto LABEL_114;
                }
LABEL_113:
                unint64_t v68 = v142 << -(char)v25 >> -(char)v25;
LABEL_114:
                uint64_t result = sub_1CC7362A8(v64, (unint64_t *)&__s1, v68);
                uint64_t v70 = v69;
                if (v143 >= 0x41)
                {
                  uint64_t result = v142;
                  if (v142) {
                    uint64_t result = MEMORY[0x1D25D9CB0](v142, 0x1000C8000313F17);
                  }
                }
                goto LABEL_115;
              }
            }
            if (v65 >= 0x41) {
              int v66 = (uint64_t *)__s2;
            }
            else {
              int v66 = (uint64_t *)&__s2;
            }
            uint64_t v67 = *v66;
            unsigned int v143 = v25;
            uint64_t v142 = v67 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v25);
            goto LABEL_113;
          }
LABEL_55:
          if ((v20 & 0x80000000) != 0) {
            uint64_t v37 = (uint64_t *)(*(void *)(v18 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v37 = (uint64_t *)(*(void *)(v18 + 272) + 8 * v20);
          }
          uint64_t v38 = *v37;
          if (v38)
          {
            if (*(unsigned char *)(v38 + 3) & 1) != 0 || (uint64_t v38 = *(void *)(v38 + 24)) != 0 && (*(unsigned char *)(v38 + 3))
            {
              uint64_t v39 = *(void *)(v38 + 8);
              if (v39)
              {
                if (**(_WORD **)(v39 + 16) == 126 && *(_DWORD *)(v39 + 40) == 2)
                {
                  int v97 = *(_DWORD *)(*(void *)(v39 + 32) + 36);
                  int v134 = v97;
                  uint64_t v138 = v32;
                  if (v97 < 0 && (v97 & 0x7FFFFFFFu) < *(_DWORD *)(v18 + 432)) {
                    uint64_t v98 = *(void **)(*(void *)(v18 + 424) + 8 * (v97 & 0x7FFFFFFF));
                  }
                  else {
                    uint64_t v98 = 0;
                  }
                  int v141 = v98;
                  uint64_t result = sub_1CB8F1DC4((unint64_t *)&v141);
                  unsigned int v100 = result;
                  if (v99 == 1)
                  {
                    unsigned int v124 = result;
                    unsigned int v100 = v124;
                  }
                  unsigned int v148 = v146;
                  if (v146 > 0x40) {
                    llvm::APInt::initSlowCase((llvm::APInt *)&__s1);
                  }
                  __s1 = 0;
                  if (v100 != v146)
                  {
                    if (v100 > 0x3F)
                    {
                      unsigned int v122 = v100;
                      uint64_t result = (uint64_t)llvm::APInt::setBitsSlowCase(&__s1, v100, v146);
                      unsigned int v100 = v122;
                    }
                    else
                    {
                      __s1 = (void *)((unint64_t)__s1 | (0xFFFFFFFFFFFFFFFFLL >> (v100
                                                                                       - v146) << v100));
                    }
                  }
                  if (v146 > 0x40)
                  {
                    unsigned int v125 = v100;
                    uint64_t result = llvm::APInt::intersectsSlowCase((uint64_t **)&__s2, (uint64_t **)&__s1);
                    unsigned int v100 = v125;
                    BOOL v101 = result;
                  }
                  else
                  {
                    BOOL v101 = ((unint64_t)__s1 & (unint64_t)__s2) != 0;
                  }
                  if (v148 >= 0x41)
                  {
                    uint64_t result = (uint64_t)__s1;
                    if (__s1)
                    {
                      unsigned int v126 = v100;
                      uint64_t result = MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
                      unsigned int v100 = v126;
                    }
                  }
                  if (v101)
                  {
                    switch(v21)
                    {
                      case ' ':
                      case '""':
                      case '#':
                        *(unsigned char *)uint64_t v7 = 0;
                        goto LABEL_292;
                      case '!':
                      case '$':
                      case '%':
                        int v110 = 1;
                        *(unsigned char *)uint64_t v7 = 1;
                        goto LABEL_189;
                      case '&':
                      case '\'':
                        unsigned int v127 = v146 - 1;
                        int v128 = &__s2;
                        if (v146 >= 0x41) {
                          int v128 = (void **)((char *)__s2 + 8 * (v127 >> 6));
                        }
                        uint64_t v129 = (void *)(((unint64_t)*v128 >> v127) & 1);
                        goto LABEL_291;
                      case '(':
                      case ')':
                        unsigned int v130 = v146 - 1;
                        uint64_t v129 = &__s2;
                        if (v146 >= 0x41) {
                          uint64_t v129 = (char *)__s2 + 8 * (v130 >> 6);
                        }
                        LOBYTE(v129) = ((*v129 >> v130) & 1) == 0;
LABEL_291:
                        *(unsigned char *)uint64_t v7 = (_BYTE)v129;
LABEL_292:
                        int v110 = 1;
                        break;
                      default:
                        goto LABEL_281;
                    }
                    goto LABEL_189;
                  }
                  if ((v21 - 32) <= 5)
                  {
                    uint64_t v102 = *a2;
                    *(void *)(v102 + 40) = *(void *)(a4 + 24);
                    *(void *)(v102 + 48) = a4;
                    uint64_t v103 = *a2;
                    __s1 = v141;
                    unsigned int v148 = 0;
                    if (v100 > 0x40)
                    {
                      if (v146 != v100) {
                        operator new[]();
                      }
                      sub_1CD0463BC((uint64_t)&v142, (uint64_t)&__s2);
                      LOBYTE(v100) = v143;
                      if (v143 > 0x40)
                      {
                        unint64_t v107 = *(void *)v142;
LABEL_187:
                        uint64_t result = sub_1CC7362A8(v103, (unint64_t *)&__s1, v107);
                        uint64_t v109 = v108;
                        if (v143 >= 0x41)
                        {
                          uint64_t result = v142;
                          if (v142) {
                            uint64_t result = MEMORY[0x1D25D9CB0](v142, 0x1000C8000313F17);
                          }
                        }
                        int v110 = 0;
                        int v111 = *(_DWORD *)(*(void *)(v109 + 32) + 4);
                        uint64_t v112 = v141;
                        *(_DWORD *)uint64_t v7 = v21;
                        *(_DWORD *)(v7 + 4) = v134;
                        *(_DWORD *)(v7 + 8) = v111;
                        *(void *)(v7 + 16) = v112;
LABEL_189:
                        int v46 = 0;
                        *(_DWORD *)(v7 + 24) = v110;
                        goto LABEL_151;
                      }
                    }
                    else
                    {
                      if (v146 >= 0x41) {
                        uint64_t v104 = (uint64_t *)__s2;
                      }
                      else {
                        uint64_t v104 = (uint64_t *)&__s2;
                      }
                      uint64_t v105 = *v104;
                      unsigned int v143 = v100;
                      unint64_t v106 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v100;
                      if (!v100) {
                        unint64_t v106 = 0;
                      }
                      uint64_t v142 = v106 & v105;
                    }
                    unint64_t v107 = v142 << -(char)v100 >> -(char)v100;
                    goto LABEL_187;
                  }
LABEL_281:
                  uint64_t v32 = v138;
                }
              }
            }
          }
          if (v34 != 32) {
            goto LABEL_141;
          }
          if ((v20 & 0x80000000) != 0) {
            uint64_t v40 = (uint64_t *)(*(void *)(v18 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v40 = (uint64_t *)(*(void *)(v18 + 272) + 8 * v20);
          }
          uint64_t v41 = *v40;
          if (!v41) {
            goto LABEL_70;
          }
          while ((*(unsigned char *)(v41 + 3) & 1) != 0)
          {
            uint64_t v41 = *(void *)(v41 + 24);
            if (!v41) {
              goto LABEL_70;
            }
          }
          while (1)
          {
            uint64_t v41 = *(void *)(v41 + 24);
            if (!v41) {
              break;
            }
            if ((*(unsigned char *)(v41 + 3) & 1) == 0) {
              goto LABEL_70;
            }
          }
          uint64_t v73 = (uint64_t *)((v20 & 0x80000000) != 0
                          ? *(void *)(v18 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8
                          : *(void *)(v18 + 272) + 8 * v20);
          if ((uint64_t v74 = *v73) == 0
            || (*(unsigned char *)(v74 + 3) & 1) == 0 && ((uint64_t v74 = *(void *)(v74 + 24)) == 0 || (*(unsigned char *)(v74 + 3) & 1) == 0)
            || (uint64_t v75 = *(void *)(v74 + 8)) == 0
            || **(_WORD **)(v75 + 16) != 45
            || *(_DWORD *)(v75 + 40) != 3)
          {
LABEL_70:
            if ((v20 & 0x80000000) != 0) {
              uint64_t v42 = (uint64_t *)(*(void *)(v18 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v42 = (uint64_t *)(*(void *)(v18 + 272) + 8 * v20);
            }
            uint64_t v43 = *v42;
            if (v43)
            {
              while ((*(unsigned char *)(v43 + 3) & 1) != 0)
              {
                uint64_t v43 = *(void *)(v43 + 24);
                if (!v43) {
                  goto LABEL_78;
                }
              }
              while (1)
              {
                uint64_t v43 = *(void *)(v43 + 24);
                if (!v43) {
                  break;
                }
                if ((*(unsigned char *)(v43 + 3) & 1) == 0) {
                  goto LABEL_78;
                }
              }
              uint64_t v79 = (uint64_t *)((v20 & 0x80000000) != 0
                              ? *(void *)(v18 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8
                              : *(void *)(v18 + 272) + 8 * v20);
              uint64_t v80 = *v79;
              if (v80)
              {
                if ((*(unsigned char *)(v80 + 3) & 1) != 0
                  || (uint64_t v80 = *(void *)(v80 + 24)) != 0 && (*(unsigned char *)(v80 + 3) & 1) != 0)
                {
                  uint64_t v81 = *(void *)(v80 + 8);
                  if (v81)
                  {
                    if (**(_WORD **)(v81 + 16) == 46 && *(_DWORD *)(v81 + 40) == 3)
                    {
                      uint64_t v82 = v32;
                      uint64_t result = sub_1CC73C210(*(_DWORD *)(*(void *)(v81 + 32) + 36), v18, (uint64_t)&__s1);
                      if ((_BYTE)v149)
                      {
                        if (v148 < 0x41)
                        {
                          uint64_t v113 = (uint64_t)((void)__s1 << -(char)v148) >> -(char)v148;
                          int v114 = *(_DWORD *)(*(void *)(v81 + 32) + 68);
                          uint64_t v115 = *a2;
                          __s1 = v23;
                          unsigned int v148 = 0;
                          uint64_t result = sub_1CC7362A8(v115, (unint64_t *)&__s1, v113 - v82);
                          int v46 = 0;
                          int v90 = *(_DWORD *)(*(void *)(v116 + 32) + 4);
                          *(_DWORD *)uint64_t v7 = v21;
                          *(_DWORD *)(v7 + 4) = v114;
                          goto LABEL_149;
                        }
                        uint64_t result = (uint64_t)__s1;
                        if (__s1) {
                          uint64_t result = MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
                        }
                      }
                      uint64_t v32 = v82;
                    }
                  }
                }
              }
            }
LABEL_78:
            if ((v20 & 0x80000000) != 0) {
              int v44 = (uint64_t *)(*(void *)(v18 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
            }
            else {
              int v44 = (uint64_t *)(*(void *)(v18 + 272) + 8 * v20);
            }
            uint64_t v45 = *v44;
            if (v45)
            {
              while ((*(unsigned char *)(v45 + 3) & 1) != 0)
              {
                uint64_t v45 = *(void *)(v45 + 24);
                if (!v45) {
                  goto LABEL_141;
                }
              }
              int v46 = 1;
              while (1)
              {
                uint64_t v45 = *(void *)(v45 + 24);
                if (!v45) {
                  break;
                }
                if ((*(unsigned char *)(v45 + 3) & 1) == 0) {
                  goto LABEL_142;
                }
              }
              uint64_t v83 = (uint64_t *)((v20 & 0x80000000) != 0
                              ? *(void *)(v18 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8
                              : *(void *)(v18 + 272) + 8 * v20);
              uint64_t v84 = *v83;
              if (v84)
              {
                if ((*(unsigned char *)(v84 + 3) & 1) != 0
                  || (uint64_t v84 = *(void *)(v84 + 24)) != 0 && (*(unsigned char *)(v84 + 3) & 1) != 0)
                {
                  uint64_t v85 = *(void *)(v84 + 8);
                  if (v85)
                  {
                    if (**(_WORD **)(v85 + 16) == 46 && *(_DWORD *)(v85 + 40) == 3)
                    {
                      uint64_t v91 = v32;
                      uint64_t v92 = *(void *)(v85 + 32);
                      int v78 = *(_DWORD *)(v92 + 36);
                      uint64_t result = sub_1CC73C210(*(_DWORD *)(v92 + 68), v18, (uint64_t)&__s1);
                      if ((_BYTE)v149)
                      {
                        if (v148 < 0x41)
                        {
                          uint64_t v87 = *a2;
                          uint64_t v93 = (uint64_t)((void)__s1 << -(uint64_t)v148) >> -(uint64_t)v148;
                          __s1 = v23;
                          unsigned int v148 = 0;
                          unint64_t v88 = v93 + v91;
                          goto LABEL_148;
                        }
                        uint64_t result = (uint64_t)__s1;
                        if (__s1) {
                          uint64_t result = MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_141:
            int v46 = 1;
            goto LABEL_142;
          }
          uint64_t v76 = v32;
          uint64_t v77 = *(void *)(v75 + 32);
          int v78 = *(_DWORD *)(v77 + 36);
          sub_1CC73C210(*(_DWORD *)(v77 + 68), v18, (uint64_t)&__s1);
          if ((_BYTE)v149)
          {
            if (v148 < 0x41)
            {
              uint64_t v86 = (uint64_t)((void)__s1 << -(uint64_t)v148) >> -(uint64_t)v148;
              goto LABEL_147;
            }
            if (__s1) {
              MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
            }
          }
          uint64_t result = sub_1CC73C210(*(_DWORD *)(*(void *)(v75 + 32) + 36), v18, (uint64_t)&__s1);
          if (!(_BYTE)v149)
          {
LABEL_125:
            uint64_t v32 = v76;
            goto LABEL_70;
          }
          if (v148 >= 0x41)
          {
            uint64_t result = (uint64_t)__s1;
            if (__s1) {
              uint64_t result = MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
            }
            goto LABEL_125;
          }
          uint64_t v86 = (uint64_t)((void)__s1 << -(char)v148) >> -(char)v148;
          int v78 = *(_DWORD *)(*(void *)(v75 + 32) + 68);
LABEL_147:
          uint64_t v87 = *a2;
          __s1 = v23;
          unint64_t v88 = v76 - v86;
          unsigned int v148 = 0;
LABEL_148:
          uint64_t result = sub_1CC7362A8(v87, (unint64_t *)&__s1, v88);
          int v46 = 0;
          int v90 = *(_DWORD *)(*(void *)(v89 + 32) + 4);
          *(_DWORD *)uint64_t v7 = v21;
          *(_DWORD *)(v7 + 4) = v78;
LABEL_149:
          *(_DWORD *)(v7 + 8) = v90;
          *(void *)(v7 + 16) = v23;
          goto LABEL_150;
        }
        int v56 = 0;
LABEL_102:
        unsigned int v57 = v146;
        if (v146 > 0x40)
        {
          int v136 = v56;
          uint64_t v140 = v32;
          uint64_t result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__s2);
          int v56 = v136;
          uint64_t v32 = v140;
        }
        else
        {
          uint64_t result = v146 + __clz((unint64_t)__s2) - 64;
        }
        unsigned int v58 = v57 - result;
        goto LABEL_105;
      }
    }
    else
    {
      uint64_t v53 = v23;
    }
    int v55 = v21;
LABEL_101:
    int v56 = 0;
    goto LABEL_102;
  }
  if (v148 >= 0x41)
  {
LABEL_307:
    uint64_t result = (uint64_t)__s1;
    if (__s1) {
      uint64_t result = MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
    }
    goto LABEL_14;
  }
  if (!v16) {
    goto LABEL_14;
  }
  uint64_t v28 = (uint64_t)((void)__s1 << -(uint64_t)v148) >> -(uint64_t)v148;
  sub_1CB8F1EEC((uint64_t)&__s1, v15, v17);
  uint64_t result = sub_1CB8F1EEC((uint64_t)&__s2, v15, v28);
  if (v12 == 33)
  {
    if (v148 > 0x40)
    {
      uint64_t result = memcmp(__s1, __s2, (((unint64_t)v148 + 63) >> 3) & 0x3FFFFFF8);
      BOOL v29 = result == 0;
    }
    else
    {
      BOOL v29 = __s1 == __s2;
    }
    char v30 = v29;
    LOBYTE(v31) = v30 ^ 1;
  }
  else
  {
    switch(v12)
    {
      case ' ':
        if (v148 > 0x40)
        {
          uint64_t result = memcmp(__s1, __s2, (((unint64_t)v148 + 63) >> 3) & 0x3FFFFFF8);
          BOOL v123 = result == 0;
        }
        else
        {
          BOOL v123 = __s1 == __s2;
        }
        LOBYTE(v31) = v123;
        break;
      case '""':
        uint64_t result = llvm::APInt::compare((llvm::APInt *)&__s1, (const llvm::APInt *)&__s2);
        goto LABEL_314;
      case '#':
        uint64_t result = llvm::APInt::compare((llvm::APInt *)&__s1, (const llvm::APInt *)&__s2);
        goto LABEL_316;
      case '$':
        uint64_t result = llvm::APInt::compare((llvm::APInt *)&__s1, (const llvm::APInt *)&__s2);
        goto LABEL_318;
      case '%':
        uint64_t result = llvm::APInt::compare((llvm::APInt *)&__s1, (const llvm::APInt *)&__s2);
        goto LABEL_320;
      case '&':
        uint64_t result = llvm::APInt::compareSigned((llvm::APInt *)&__s1, (const llvm::APInt *)&__s2);
LABEL_314:
        LOBYTE(v31) = (int)result > 0;
        break;
      case '\'':
        uint64_t result = llvm::APInt::compareSigned((llvm::APInt *)&__s1, (const llvm::APInt *)&__s2);
LABEL_316:
        LOBYTE(v31) = (int)result >= 0;
        break;
      case '(':
        uint64_t result = llvm::APInt::compareSigned((llvm::APInt *)&__s1, (const llvm::APInt *)&__s2);
LABEL_318:
        unsigned int v31 = result >> 31;
        break;
      case ')':
        uint64_t result = llvm::APInt::compareSigned((llvm::APInt *)&__s1, (const llvm::APInt *)&__s2);
LABEL_320:
        LOBYTE(v31) = (int)result < 1;
        break;
      default:
        if (v146 >= 0x41)
        {
          uint64_t result = (uint64_t)__s2;
          if (__s2) {
            uint64_t result = MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
          }
        }
        if (v148 >= 0x41) {
          goto LABEL_307;
        }
        goto LABEL_14;
    }
  }
  *(unsigned char *)uint64_t v7 = v31;
  *(_DWORD *)(v7 + 24) = 1;
  *(unsigned char *)(v7 + 32) = 1;
  if (v146 >= 0x41)
  {
    uint64_t result = (uint64_t)__s2;
    if (__s2) {
      uint64_t result = MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
    }
  }
  if (v148 >= 0x41)
  {
    uint64_t result = (uint64_t)__s1;
    if (__s1) {
      return MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
    }
  }
  return result;
}

unint64_t sub_1CBAB1CB8(llvm::APInt *a1)
{
  unsigned int v1 = *((_DWORD *)a1 + 2);
  unsigned int v2 = v1 - 1;
  if (v1 > 0x40)
  {
    if ((*(void *)(*(void *)a1 + 8 * (v2 >> 6)) >> v2)) {
      return llvm::APInt::countLeadingOnesSlowCase(a1);
    }
    else {
      return llvm::APInt::countLeadingZerosSlowCase(a1);
    }
  }
  else
  {
    unint64_t v3 = *(void *)a1;
    if ((*(void *)a1 >> v2))
    {
      if (v1) {
        return __clz(~(v3 << -(char)v1));
      }
      else {
        return 0;
      }
    }
    else
    {
      return v1 + __clz(v3) - 64;
    }
  }
}

void sub_1CBAB1D20(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  unsigned int v9 = (uint64_t *)(a6 + 8 * a4);
  if (a4 < 0) {
    unsigned int v9 = (uint64_t *)(a5 + 16 * (a4 & 0x7FFFFFFF) + 8);
  }
  uint64_t v10 = *v9;
  if ((*(unsigned char *)(v10 + 3) & 1) == 0) {
    uint64_t v10 = *(void *)(v10 + 24);
  }
  uint64_t v11 = *(void *)(v10 + 8);
  if (**(_WORD **)(v11 + 16) == 121 && (uint64_t v12 = *(void *)(*(void *)(v11 + 32) + 48)) != 0)
  {
    unsigned int v14 = *(void **)(v12 + 32);
    uint64_t v13 = (const llvm::detail::DoubleAPFloat *)(v12 + 32);
    if (v14 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(&v39, v13);
    }
    else {
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v39, v13);
    }
    switch(a2)
    {
      case 175:
        llvm::APFloat::convert((uint64_t)v38, &unk_1CFB2E31C, 1, &v31);
        long double v15 = llvm::APFloat::convertToDouble((llvm::APFloat *)v38);
        if (a3 == 257)
        {
          float v16 = v15;
          float v17 = log2f(v16);
          int v37 = 32;
          unint64_t v36 = LODWORD(v17);
          llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v32, (const llvm::APInt **)&v36);
        }
        else
        {
          long double v26 = log2(v15);
          int v37 = 64;
          unint64_t v36 = *(void *)&v26;
          llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v32, (const llvm::APInt **)&v36);
        }
        uint64_t v27 = v32;
        uint64_t v28 = v33;
        char v29 = v35;
        if (v32 != &unk_1CFB2E344)
        {
          *(_DWORD *)(a1 + 24) = v34;
          *(unsigned char *)(a1 + 28) = *(unsigned char *)(a1 + 28) & 0xF0 | v29 & 0xF;
        }
        *(void *)(a1 + 8) = v27;
        *(void *)(a1 + 16) = v28;
        *(unsigned char *)(a1 + 32) = 1;
        goto LABEL_34;
      case 176:
      case 178:
      case 180:
      case 181:
      case 182:
      case 183:
        goto LABEL_21;
      case 177:
        unint64_t v22 = v39;
        if (v39 != &unk_1CFB2E344) {
          goto LABEL_37;
        }
        uint64_t v24 = (uint64_t)v40;
        goto LABEL_29;
      case 179:
        if (a3 != 129) {
          goto LABEL_21;
        }
        llvm::APFloat::convert((uint64_t)v38, &unk_1CFB2E2E0, 0, &v32);
        unint64_t v22 = v39;
        if (v39 != &unk_1CFB2E344) {
          goto LABEL_38;
        }
        uint64_t v23 = (uint64_t)v40;
        uint64_t v40 = 0;
        goto LABEL_39;
      case 184:
        unint64_t v22 = v39;
        uint64_t v24 = (uint64_t)v40;
        unsigned int v25 = v38;
        if (v39 == &unk_1CFB2E344) {
          unsigned int v25 = v40;
        }
        if ((v25[28] & 8) == 0) {
          goto LABEL_25;
        }
        if (v39 == &unk_1CFB2E344)
        {
LABEL_29:
          sub_1CBFC6FB8(v24);
          sub_1CBFC6FB8((uint64_t)(v40 + 32));
          unint64_t v22 = v39;
LABEL_25:
          if (v22 == &unk_1CFB2E344)
          {
            uint64_t v23 = (uint64_t)v40;
            uint64_t v40 = 0;
            unint64_t v22 = &unk_1CFB2E344;
            goto LABEL_39;
          }
        }
        else
        {
LABEL_37:
          v42 ^= 8u;
        }
LABEL_38:
        uint64_t v23 = (uint64_t)v40;
        *(_DWORD *)(a1 + 24) = v41;
        *(unsigned char *)(a1 + 28) = *(unsigned char *)(a1 + 28) & 0xF0 | v42 & 0xF;
LABEL_39:
        *(void *)(a1 + 8) = v22;
        *(void *)(a1 + 16) = v23;
        char v30 = &unk_1CFB2E394;
        uint64_t v39 = &unk_1CFB2E394;
        *(unsigned char *)(a1 + 32) = 1;
LABEL_40:
        if ((v30[2] - 64) <= 0xFFFFFF7F)
        {
          if (v40) {
            MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
          }
        }
        break;
      default:
        if (a2 == 217)
        {
          llvm::APFloat::convert((uint64_t)v38, &unk_1CFB2E31C, 1, &v31);
          *(float *)&unsigned int v18 = sqrt(llvm::APFloat::convertToDouble((llvm::APFloat *)v38));
          int v37 = 32;
          unint64_t v36 = v18;
          llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v32, (const llvm::APInt **)&v36);
          unsigned int v19 = v32;
          uint64_t v20 = v33;
          if (v32 != &unk_1CFB2E344)
          {
            char v21 = v35;
            *(_DWORD *)(a1 + 24) = v34;
            *(unsigned char *)(a1 + 28) = *(unsigned char *)(a1 + 28) & 0xF0 | v21 & 0xF;
          }
          *(void *)(a1 + 8) = v19;
          *(void *)(a1 + 16) = v20;
          *(unsigned char *)(a1 + 32) = 1;
        }
        else
        {
LABEL_21:
          *(unsigned char *)a1 = 0;
          *(unsigned char *)(a1 + 32) = 0;
        }
LABEL_34:
        char v30 = v39;
        if (v39 != &unk_1CFB2E344) {
          goto LABEL_40;
        }
        sub_1CB845718((uint64_t *)&v40);
        return;
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
  }
}

BOOL sub_1CBAB20A8(unsigned int a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x80000000) != 0) {
    unint64_t v3 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v3 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
  }
  uint64_t v4 = *v3;
  if (v4)
  {
    if (*(unsigned char *)(v4 + 3) & 1) != 0 || (uint64_t v4 = *(void *)(v4 + 24)) != 0 && (*(unsigned char *)(v4 + 3))
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5)
      {
        if (**(_WORD **)(v5 + 16) == 165 && *(_DWORD *)(v5 + 40) == 3)
        {
          uint64_t v6 = *(void *)(v5 + 32);
          uint64_t v7 = *(void **)a3;
          **(_DWORD **)(a3 + 8) = *(_DWORD *)(v6 + 36);
          **(_DWORD **)(a3 + 16) = *(_DWORD *)(v6 + 68);
          if ((a1 & 0x80000000) != 0) {
            uint64_t v8 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v8 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
          }
          uint64_t v9 = *v8;
          if (!v9) {
            goto LABEL_13;
          }
          if ((*(unsigned char *)(v9 + 3) & 1) == 0)
          {
            uint64_t v9 = *(void *)(v9 + 24);
            if (!v9) {
              goto LABEL_13;
            }
            if ((*(unsigned char *)(v9 + 3) & 1) == 0)
            {
              uint64_t v9 = 0;
              goto LABEL_13;
            }
          }
          uint64_t v9 = *(void *)(v9 + 8);
LABEL_13:
          *uint64_t v7 = v9;
          return v9 != 0;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CBAB2190(unsigned int a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = a2;
  if ((a1 & 0x80000000) != 0) {
    uint64_t v6 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v6 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
  }
  uint64_t v7 = *v6;
  if (!v7) {
    return 0;
  }
  if ((*(unsigned char *)(v7 + 3) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v7 + 24);
    if (!v7 || (*(unsigned char *)(v7 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(v7 + 8);
  if (!v8) {
    return 0;
  }
  int v9 = **(unsigned __int16 **)(v8 + 16);
  if ((v9 & 0xFFFE) == 0x78) {
    return 1;
  }
  uint64_t v11 = *(unsigned int **)(v8 + 32);
  uint64_t v12 = v11[1];
  if ((v12 & 0x80000000) != 0) {
    uint64_t v13 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v13 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v12);
  }
  uint64_t v14 = *v13;
  if (!v14)
  {
LABEL_13:
    if (a4)
    {
      long double v15 = (uint64_t *)((int)v12 >= 0
                      ? *(void *)(a2 + 272) + 8 * v12
                      : *(void *)(a2 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
      uint64_t v16 = *v15;
      if (v16)
      {
        while ((*(unsigned char *)(v16 + 3) & 1) != 0)
        {
          uint64_t v16 = *(void *)(v16 + 24);
          if (!v16) {
            return 0;
          }
        }
        uint64_t v18 = 0;
LABEL_34:
        ++v18;
        while (1)
        {
          uint64_t v16 = *(void *)(v16 + 24);
          if (!v16) {
            break;
          }
          if ((*(unsigned char *)(v16 + 3) & 1) == 0) {
            goto LABEL_34;
          }
        }
        if (v18 == 2) {
          goto LABEL_23;
        }
      }
    }
    return 0;
  }
  while ((*(unsigned char *)(v14 + 3) & 1) != 0)
  {
    uint64_t v14 = *(void *)(v14 + 24);
    if (!v14) {
      goto LABEL_13;
    }
  }
  while (1)
  {
    uint64_t v14 = *(void *)(v14 + 24);
    if (!v14) {
      break;
    }
    if ((*(unsigned char *)(v14 + 3) & 1) == 0) {
      goto LABEL_13;
    }
  }
LABEL_23:
  if (v9 == 318) {
    char v17 = a3;
  }
  else {
    char v17 = 0;
  }
  uint64_t result = 1;
  if ((v17 & 1) == 0 && (v9 & 0xFFFC) != 0x11C)
  {
    if (**(unsigned __int16 **)(v8 + 16) > 0x104u)
    {
      if (((v9 - 314) > 0x2A || ((1 << (v9 - 58)) & 0x40000200003) == 0)
        && v9 != 261)
      {
        goto LABEL_44;
      }
    }
    else if (((v9 - 163) > 0x38 || ((1 << (v9 + 93)) & 0x18800000038540DLL) == 0) {
           && v9 != 85)
    }
    {
LABEL_44:
      if ((v9 & 0xFFFE) == 0x74)
      {
        uint64_t v19 = *(unsigned int *)(v8 + 40);
        if (v19)
        {
          uint64_t v20 = v11 + 4;
          while (*((unsigned char *)v20 - 16) != 17)
          {
            v20 += 8;
            if (!--v19) {
              goto LABEL_51;
            }
          }
          if (*v20 == 2131) {
            return 1;
          }
        }
      }
LABEL_51:
      switch(v9)
      {
        case 51:
          if (sub_1CBAB2190(v11[33], a2, a3, 0))
          {
            uint64_t v21 = v11[41];
            a2 = v5;
            uint64_t v22 = a3;
LABEL_57:
            if (sub_1CBAB2190(v21, a2, v22, 0)) {
              return 1;
            }
          }
          break;
        case 179:
          if (a3) {
            return 1;
          }
          uint64_t v21 = v11[9];
          uint64_t v22 = 0;
          goto LABEL_57;
        case 178:
          return a3;
        default:
          return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1CBAB2408(unsigned int a1, uint64_t a2)
{
  if ((a1 & 0x80000000) != 0) {
    unint64_t v3 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v3 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
  }
  uint64_t v4 = *v3;
  if (!*v3) {
    return 1;
  }
  while ((*(unsigned char *)(v4 + 3) & 1) != 0)
  {
    uint64_t v4 = *(void *)(v4 + 24);
    if (!v4) {
      return 1;
    }
  }
  uint64_t v6 = *(void *)(v4 + 8);
LABEL_9:
  int v7 = **(unsigned __int16 **)(v6 + 16);
  if ((v7 & 0xFFFE) == 0xB2)
  {
    if ((sub_1CBAB2408(*(unsigned int *)(*(void *)(v6 + 32) + 4), a2) & 1) == 0) {
      return 0;
    }
    goto LABEL_43;
  }
  if (**(unsigned __int16 **)(v6 + 16) > 0x104u)
  {
    BOOL v12 = (v7 - 314) > 0x2A || ((1 << (v7 - 58)) & 0x40000200003) == 0;
    if (!v12 || v7 == 261)
    {
LABEL_43:
      uint64_t v15 = *(void *)(v4 + 8);
      while (1)
      {
        uint64_t v4 = *(void *)(v4 + 24);
        if (!v4) {
          return 1;
        }
        if ((*(unsigned char *)(v4 + 3) & 1) == 0)
        {
          uint64_t v6 = *(void *)(v4 + 8);
          if (v6 != v15) {
            goto LABEL_9;
          }
        }
      }
    }
LABEL_33:
    if ((v7 & 0xFFFE) != 0x74) {
      return 0;
    }
    uint64_t v13 = *(unsigned int *)(v6 + 40);
    if (!v13) {
      return 0;
    }
    for (uint64_t i = (_DWORD *)(*(void *)(v6 + 32) + 16); *((unsigned char *)i - 16) != 17; i += 8)
    {
      uint64_t result = 0;
      if (!--v13) {
        return result;
      }
    }
    if (*i != 2131) {
      return 0;
    }
    goto LABEL_43;
  }
  uint64_t v8 = (v7 - 163);
  if (v8 > 0x38) {
    goto LABEL_32;
  }
  if (((1 << (v7 + 93)) & 0x18800000038140DLL) != 0) {
    goto LABEL_43;
  }
  if (v8 != 14)
  {
LABEL_32:
    if (v7 == 85) {
      goto LABEL_43;
    }
    goto LABEL_33;
  }
  uint64_t v9 = *(unsigned int *)(*(void *)(v6 + 32) + 4);
  if ((v9 & 0x80000000) != 0) {
    uint64_t v10 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v10 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v9);
  }
  uint64_t v11 = *v10;
  if (!v11) {
    goto LABEL_43;
  }
  while ((*(unsigned char *)(v11 + 3) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v11 + 24);
    if (!v11) {
      goto LABEL_43;
    }
  }
  while (1)
  {
    uint64_t v11 = *(void *)(v11 + 24);
    if (!v11) {
      break;
    }
    if ((*(unsigned char *)(v11 + 3) & 1) == 0) {
      goto LABEL_43;
    }
  }
  uint64_t result = sub_1CBAB2408(v9, a2);
  if (result)
  {
    if ((sub_1CBAA87B0(v9, a2) & 1) == 0) {
      return 0;
    }
    goto LABEL_43;
  }
  return result;
}

uint64_t sub_1CBAB2604(uint64_t *a1, uint64_t a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 40) != 3) {
    return 0;
  }
  unint64_t v3 = *(unsigned int **)(a2 + 32);
  uint64_t v4 = v3[1];
  if ((v4 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(*a1 + 8) + 40);
  unint64_t v7 = v4 & 0x7FFFFFFF;
  if (v7 >= *(unsigned int *)(v6 + 432) || *(void *)(*(void *)(v6 + 424) + 8 * v7) != 9) {
    return 0;
  }
  uint64_t v8 = v3[9];
  uint64_t v9 = v3[17];
  if ((v8 & 0x80000000) != 0) {
    uint64_t v10 = (uint64_t *)(*(void *)(v6 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v10 = (uint64_t *)(*(void *)(v6 + 272) + 8 * v8);
  }
  uint64_t v11 = *v10;
  if (!v11 || (*(unsigned char *)(v11 + 3) & 1) == 0 && ((uint64_t v11 = *(void *)(v11 + 24)) == 0 || (*(unsigned char *)(v11 + 3) & 1) == 0))
  {
    uint64_t v12 = 0;
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_98;
    }
LABEL_10:
    uint64_t v13 = (uint64_t *)(*(void *)(v6 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
    goto LABEL_11;
  }
  uint64_t v12 = *(void *)(v11 + 8);
  if ((v9 & 0x80000000) != 0) {
    goto LABEL_10;
  }
LABEL_98:
  uint64_t v13 = (uint64_t *)(*(void *)(v6 + 272) + 8 * v9);
LABEL_11:
  uint64_t v14 = *v13;
  if ((*(unsigned char *)(v14 + 3) & 1) == 0) {
    uint64_t v14 = *(void *)(v14 + 24);
  }
  uint64_t v15 = *(void *)(v14 + 8);
  if (!sub_1CBAAF2D4(v15, v6)) {
    goto LABEL_20;
  }
  if (sub_1CBAAF2D4(v12, v6))
  {
    if ((v9 & 0x80000000) != 0) {
      uint64_t v16 = (uint64_t *)(*(void *)(v6 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v16 = (uint64_t *)(*(void *)(v6 + 272) + 8 * v9);
    }
    uint64_t v17 = *v16;
    if (v17)
    {
      while ((*(unsigned char *)(v17 + 3) & 1) != 0)
      {
        uint64_t v17 = *(void *)(v17 + 24);
        if (!v17) {
          goto LABEL_20;
        }
      }
      do
      {
        uint64_t v17 = *(void *)(v17 + 24);
        if (!v17) {
          goto LABEL_23;
        }
      }
      while ((*(unsigned char *)(v17 + 3) & 1) != 0);
    }
LABEL_20:
    uint64_t v18 = v15;
    int v19 = v9;
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v18 = v12;
  uint64_t v12 = v15;
  int v19 = v8;
  LODWORD(v8) = v9;
LABEL_24:
  uint64_t result = sub_1CBAAF2D4(v12, v6);
  if (!result) {
    return result;
  }
  uint64_t v59 = 0;
  if (!sub_1CBAAF2D4(v12, v6)
    || ((int v21 = **(unsigned __int16 **)(v12 + 16), (v21 - 134) >= 2) && v21 != 51
      ? (uint64_t v22 = 0)
      : (uint64_t v22 = 2),
        (unsigned int v23 = *(_DWORD *)(*(void *)(v12 + 32) + 32 * v22 + 4),
         int v61 = &v59,
         unsigned int v73 = v23,
         !sub_1CBACAADC((uint64_t)&v60, v6, &v73))
     || v59 != 1))
  {
    if (!sub_1CBAAF2D4(v18, v6)
      || ((int v24 = **(unsigned __int16 **)(v18 + 16), (v24 - 134) >= 2) && v24 != 51
        ? (uint64_t v25 = 0)
        : (uint64_t v25 = 2),
          (unsigned int v26 = *(_DWORD *)(*(void *)(v18 + 32) + 32 * v25 + 4),
           int v61 = &v59,
           unsigned int v73 = v26,
           !sub_1CBACAADC((uint64_t)&v60, v6, &v73))
       || v59 != 1))
    {
      int v27 = **(unsigned __int16 **)(v12 + 16);
      unsigned int v28 = v27 - 134;
      if ((v27 - 134) < 2 || v27 == 51) {
        uint64_t v29 = 2;
      }
      else {
        uint64_t v29 = 0;
      }
      if (v28 < 2 || v27 == 51) {
        uint64_t v30 = 3;
      }
      else {
        uint64_t v30 = 0;
      }
      uint64_t v31 = *(void *)(v12 + 32);
      BOOL v32 = v28 < 2 || v27 == 51;
      uint64_t v33 = v31 + 32 * v29;
      uint64_t v34 = v31 + 32 * v30;
      uint64_t v35 = v31 + 32 * v32;
      if ((v8 & 0x80000000) != 0) {
        unint64_t v36 = (uint64_t *)(*(void *)(v6 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
      }
      else {
        unint64_t v36 = (uint64_t *)(*(void *)(v6 + 272) + 8 * v8);
      }
      int v37 = *(_DWORD *)(v33 + 4);
      int v38 = *(_DWORD *)(v34 + 4);
      int v39 = *(_DWORD *)(v35 + 16);
      uint64_t v40 = *v36;
      if (*v36)
      {
        while ((*(unsigned char *)(v40 + 3) & 1) != 0)
        {
          uint64_t v40 = *(void *)(v40 + 24);
          if (!v40) {
            goto LABEL_56;
          }
        }
        do
        {
          uint64_t v40 = *(void *)(v40 + 24);
          if (!v40) {
            goto LABEL_62;
          }
        }
        while ((*(unsigned char *)(v40 + 3) & 1) != 0);
      }
LABEL_56:
      uint64_t v41 = *(void *)(*(void *)(v6 + 24) + 16 * v7 + 8);
      if (!v41)
      {
LABEL_62:
        int v42 = 0;
        uint64_t v43 = v4;
        if ((v4 & 0x80000000) == 0) {
          goto LABEL_79;
        }
LABEL_63:
        for (uint64_t i = (uint64_t *)(*(void *)(v6 + 24) + 16 * (v43 & 0x7FFFFFFF) + 8);
              ;
              uint64_t i = (uint64_t *)(*(void *)(v6 + 272) + 8 * v43))
        {
          uint64_t v45 = *i;
          if (!v45) {
            break;
          }
          while ((*(unsigned char *)(v45 + 3) & 1) != 0)
          {
            uint64_t v45 = *(void *)(v45 + 24);
            if (!v45) {
              goto LABEL_88;
            }
          }
          while (1)
          {
            uint64_t v45 = *(void *)(v45 + 24);
            if (!v45) {
              break;
            }
            if ((*(unsigned char *)(v45 + 3) & 1) == 0) {
              goto LABEL_88;
            }
          }
          if (v42 == 5) {
            break;
          }
          if ((v43 & 0x80000000) != 0) {
            int v46 = (uint64_t *)(*(void *)(v6 + 24) + 16 * (v43 & 0x7FFFFFFF) + 8);
          }
          else {
            int v46 = (uint64_t *)(*(void *)(v6 + 272) + 8 * v43);
          }
          for (uint64_t j = *v46; (*(unsigned char *)(j + 3) & 1) != 0; uint64_t j = *(void *)(j + 24))
            ;
          uint64_t v48 = *(void *)(j + 8);
          int v49 = **(unsigned __int16 **)(v48 + 16);
          if ((v49 - 65) >= 2)
          {
            if (v49 == 136) {
              return 0;
            }
            break;
          }
          uint64_t v43 = *(unsigned int *)(*(void *)(v48 + 32) + 4);
          ++v42;
          if ((v43 & 0x80000000) != 0) {
            goto LABEL_63;
          }
LABEL_79:
          ;
        }
LABEL_88:
        uint64_t v52 = *a1;
        *(void *)(v52 + 40) = *(void *)(a2 + 24);
        *(void *)(v52 + 48) = a2;
        int v53 = **(unsigned __int16 **)(a2 + 16);
        if (v53 == 66)
        {
          uint64_t v54 = *a1;
          unsigned int v73 = v4;
          int v74 = 1;
          int v60 = v39;
          int v62 = 2;
          int v63 = v37;
          int v64 = 0;
          int v65 = v38;
          int v66 = 0;
          unint64_t v57 = 9;
          int v58 = 0;
          uint64_t v67 = sub_1CC7362A8(v54, &v57, 1uLL);
          uint64_t v68 = v56;
          int v69 = 1;
          LODWORD(v70) = v19;
          int v72 = 0;
          goto LABEL_94;
        }
        if (v53 == 65)
        {
          uint64_t v54 = *a1;
          unsigned int v73 = v4;
          int v74 = 1;
          int v60 = v39;
          int v62 = 2;
          int v63 = v37;
          int v64 = 0;
          int v65 = v38;
          int v66 = 0;
          LODWORD(v67) = v19;
          int v69 = 0;
          unint64_t v57 = 9;
          int v58 = 0;
          uint64_t v70 = sub_1CC7362A8(v54, &v57, 0);
          uint64_t v71 = v55;
          int v72 = 1;
LABEL_94:
          (*(void (**)(uint64_t, uint64_t, unsigned int *, uint64_t, int *, uint64_t, void))(*(void *)v54 + 32))(v54, 51, &v73, 1, &v60, 5, 0);
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          return 1;
        }
        return 0;
      }
      while ((*(unsigned char *)(v41 + 3) & 1) != 0)
      {
        uint64_t v41 = *(void *)(v41 + 24);
        if (!v41) {
          goto LABEL_62;
        }
      }
      uint64_t v50 = *(void *)(v41 + 8);
LABEL_81:
      int v51 = **(unsigned __int16 **)(v50 + 16);
      if (v51 != 114 && v51 != 136)
      {
        while (1)
        {
          uint64_t v41 = *(void *)(v41 + 24);
          if (!v41) {
            goto LABEL_62;
          }
          if ((*(unsigned char *)(v41 + 3) & 1) == 0 && *(void *)(v41 + 8) != v50)
          {
            uint64_t v50 = *(void *)(v41 + 8);
            goto LABEL_81;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CBAB2BDC(uint64_t *a1, uint64_t a2, uint64_t a3, int8x8_t a4)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(_DWORD **)(a2 + 32);
  int v5 = v4[1];
  if ((v5 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*a1 + 8) + 40);
  uint64_t v8 = v5 & 0x7FFFFFFF;
  if ((v5 & 0x7FFFFFFFu) >= *(_DWORD *)(v7 + 432)) {
    return 0;
  }
  int v9 = v4[9];
  int v10 = v4[17];
  unint64_t v45 = *(void *)(*(void *)(v7 + 424) + 8 * v8);
  if ((v45 & 1) == 0) {
    return 0;
  }
  uint64_t v13 = *(void *)(*(void *)(v7 + 24) + 16 * v8 + 8);
  if (!v13) {
    return 0;
  }
  while ((*(unsigned char *)(v13 + 3) & 1) != 0)
  {
    uint64_t v13 = *(void *)(v13 + 24);
    if (!v13) {
      return 0;
    }
  }
  while (1)
  {
    uint64_t v13 = *(void *)(v13 + 24);
    if (!v13) {
      break;
    }
    if ((*(unsigned char *)(v13 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v15 = *(unsigned int *)(a3 + 8);
  if (v15 > 0x40)
  {
    int v17 = 0;
    int64_t v18 = (unint64_t)(v15 + 63) >> 6;
    do
    {
      if (v18-- < 1) {
        break;
      }
      unint64_t v20 = *(void *)(*(void *)a3 + 8 * v18);
      v17 += __clz(v20);
    }
    while (!v20);
    int v21 = v15 | 0xFFFFFFC0;
    if ((v15 & 0x3F) == 0) {
      int v21 = 0;
    }
    int v16 = v17 + v21;
  }
  else
  {
    int v16 = v15 + __clz(*(void *)a3) - 64;
  }
  unint64_t v22 = (v15 - v16);
  a4.i32[0] = v15 - v16;
  uint8x8_t v23 = (uint8x8_t)vcnt_s8(a4);
  v23.i16[0] = vaddlv_u8(v23);
  if (v23.i32[0] != 1)
  {
    unint64_t v24 = v22 | (v22 >> 1) | ((v22 | (v22 >> 1)) >> 2);
    unint64_t v25 = v24 | (v24 >> 4) | ((v24 | (v24 >> 4)) >> 8);
    LODWORD(v22) = ((v25 >> 16) | v25) + 1;
  }
  int v27 = sub_1CB8F1DC4(&v45);
  if (v26 == 1) {
  if (v27 != 64 && v27 != 32)
  }
    return 0;
  uint64_t v28 = v22 <= 0x10 ? 16 : v22;
  if (v22 >= 0x11 && v28 != 32) {
    return 0;
  }
  uint64_t v11 = 1;
  uint64_t v29 = (8 * v28) | 1;
  if (v29 == v45) {
    return 0;
  }
  uint64_t v30 = *a1;
  *(void *)(v30 + 40) = *(void *)(a2 + 24);
  *(void *)(v30 + 48) = a2;
  uint64_t v31 = *a1;
  uint64_t v32 = **(unsigned __int16 **)(a2 + 16);
  uint64_t v52 = v29;
  int v53 = 0;
  uint64_t v43 = v29;
  int v44 = 0;
  v42[0] = v9;
  v42[4] = 0;
  uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)v31 + 32))(v31, 119, &v43, 1, v42, 1, 0);
  uint64_t v47 = v33;
  int v48 = 1;
  uint64_t v34 = *a1;
  uint64_t v40 = v29;
  int v41 = 0;
  v39[0] = v10;
  v39[4] = 0;
  uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)v34 + 32))(v34, 119, &v40, 1, v39, 1, 0);
  uint64_t v50 = v35;
  int v51 = 1;
  uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*(void *)v31 + 32))(v31, v32, &v52, 1, &v46, 2, 0);
  uint64_t v37 = *a1;
  v42[0] = v5;
  v42[2] = 1;
  uint64_t v46 = v36;
  uint64_t v47 = v38;
  int v48 = 1;
  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t *, uint64_t, void))(*(void *)v37 + 32))(v37, 118, v42, 1, &v46, 1, 0);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  return v11;
}

uint64_t sub_1CBAB2F34(uint64_t *a1, uint64_t a2, unint64_t *a3, llvm::APInt *a4, unint64_t *a5, int a6, char a7)
{
  uint64_t v392 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)a3 & 1) == 0)
  {
    int v312 = **(unsigned __int16 **)(a2 + 16);
    if (v312 != 193 && v312 != 70) {
      return 0;
    }
  }
  unsigned int v15 = sub_1CB8F1DC4(a3);
  if (v13 == 1) {
  LODWORD(v383) = v15;
  }
  if (v15 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v382);
  }
  LODWORD(v385) = v15;
  unint64_t v382 = 0;
  v384 = 0;
  if (*((_DWORD *)a5 + 2) >= 0x41u && *a5) {
    MEMORY[0x1D25D9CB0](*a5, 0x1000C8000313F17);
  }
  *a5 = v382;
  *((_DWORD *)a5 + 2) = v383;
  LODWORD(v383) = 0;
  v351 = (uint64_t **)(a5 + 2);
  if (*((_DWORD *)a5 + 6) >= 0x41u && *v351) {
    MEMORY[0x1D25D9CB0](*v351, 0x1000C8000313F17);
  }
  a5[2] = (unint64_t)v384;
  *((_DWORD *)a5 + 6) = v385;
  unsigned int v16 = *((_DWORD *)a4 + 2);
  unsigned int v381 = v16;
  if (v16 > 0x40) {
    operator new[]();
  }
  int v17 = *(uint64_t **)a4;
  unint64_t v18 = *(void *)a4;
  unint64_t __src = *(void *)a4;
  size_t v19 = *(void *)(*(void *)(*a1 + 8) + 40);
  uint64_t v20 = *(void *)(a2 + 32);
  int v21 = (const char *)*(unsigned int *)(v20 + 4);
  __uint64_t n = v19;
  if ((v21 & 0x80000000) != 0) {
    unint64_t v22 = (uint64_t *)(*(void *)(v19 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v22 = (uint64_t *)(*(void *)(v19 + 272) + 8 * (void)v21);
  }
  uint64_t v23 = *v22;
  if (v23)
  {
    while ((*(unsigned char *)(v23 + 3) & 1) != 0)
    {
      uint64_t v23 = *(void *)(v23 + 24);
      if (!v23) {
        goto LABEL_13;
      }
    }
    while (1)
    {
      uint64_t v23 = *(void *)(v23 + 24);
      if (!v23) {
        break;
      }
      if ((*(unsigned char *)(v23 + 3) & 1) == 0) {
        goto LABEL_13;
      }
    }
LABEL_31:
    unsigned int v28 = *((_DWORD *)a4 + 2);
    if (v28 >= 0x41)
    {
      if (v28 - llvm::APInt::countLeadingZerosSlowCase(a4) > 0x40)
      {
        BOOL v29 = 0;
        goto LABEL_34;
      }
    }
    else
    {
      int v17 = (uint64_t *)a4;
    }
    BOOL v29 = *v17 == 0;
LABEL_34:
    uint64_t v27 = 0;
    if (a6 != 6 && !v29) {
      goto LABEL_36;
    }
    goto LABEL_68;
  }
LABEL_13:
  if (a7) {
    goto LABEL_31;
  }
  if (!a6) {
    goto LABEL_178;
  }
  uint64_t v24 = *(void *)(a2 + 16);
  unsigned int v25 = *(unsigned __int8 *)(v24 + 4);
  if ((*(unsigned char *)(v24 + 8) & 2) == 0 || (int v156 = *(_DWORD *)(a2 + 40), v156 == v25))
  {
    unsigned int v26 = v25;
  }
  else
  {
    int v157 = v156 - 1;
    unsigned int v26 = v25;
    do
    {
      int v158 = *(_DWORD *)(v20 + 32 * v25);
      if ((v158 & 0x10000FF) != 0x1000000) {
        break;
      }
      v26 += (v158 & 0x2000000) == 0;
      if (v157 == v25) {
        break;
      }
      ++v25;
    }
    while ((v158 & 0x2000000) == 0);
  }
  if (v26 != 1)
  {
LABEL_178:
    LODWORD(v383) = v15;
    if (v15) {
      uint64_t v104 = (uint64_t *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v15);
    }
    else {
      uint64_t v104 = 0;
    }
    unint64_t v382 = (unint64_t)v104;
    unint64_t v18 = (unint64_t)v104;
    unint64_t __src = (unint64_t)v104;
    unsigned int v16 = v383;
    unsigned int v381 = v383;
LABEL_36:
    unsigned int v377 = 1;
    uint64_t v376 = 0;
    unsigned int v379 = 1;
    uint64_t v378 = 0;
    uint64_t v30 = *(unsigned __int16 **)(a2 + 16);
    unsigned int v31 = *v30;
    if (v31 <= 0x42)
    {
      if (v31 - 45 < 3)
      {
LABEL_38:
        uint64_t v32 = *(void *)(a2 + 32);
        uint64_t v33 = *(unsigned int *)(v32 + 36);
        uint64_t v34 = *(unsigned int *)(v32 + 68);
        int v35 = v16 + __clz(v18) - 64;
        unsigned int v373 = v15;
        unsigned int v372 = 0;
        if (v15 != v35)
        {
          if (v15 - v35 > 0x40) {
            llvm::APInt::setBitsSlowCase(&v372, 0, v15 - v35);
          }
          else {
            unsigned int v372 = (void *)((unint64_t)v372 | (0xFFFFFFFFFFFFFFFFLL >> (v35
          }
                                                                             - v15)));
        }
        if ((v33 & 0x80000000) != 0) {
          uint64_t v36 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v33 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v36 = (uint64_t *)(*(void *)(__n + 272) + 8 * v33);
        }
        uint64_t v37 = *v36;
        if (v37
          && ((*(unsigned char *)(v37 + 3) & 1) != 0 || (uint64_t v37 = *(void *)(v37 + 24)) != 0 && (*(unsigned char *)(v37 + 3) & 1) != 0))
        {
          uint64_t v38 = *(void *)(v37 + 8);
        }
        else
        {
          uint64_t v38 = 0;
        }
        if ((v34 & 0x80000000) != 0) {
          int v39 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
        }
        else {
          int v39 = (uint64_t *)(*(void *)(__n + 272) + 8 * v34);
        }
        uint64_t v40 = *v39;
        if (v40
          && ((*(unsigned char *)(v40 + 3) & 1) != 0 || (uint64_t v40 = *(void *)(v40 + 24)) != 0 && (*(unsigned char *)(v40 + 3) & 1) != 0))
        {
          uint64_t v41 = *(void *)(v40 + 8);
        }
        else
        {
          uint64_t v41 = 0;
        }
        if ((v33 & 0x80000000) != 0
          && (v33 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432))
        {
          unint64_t v42 = *(void *)(*(void *)(__n + 424) + 8 * (v33 & 0x7FFFFFFF));
        }
        else
        {
          unint64_t v42 = 0;
        }
        unint64_t v390 = v42;
        if ((sub_1CBAB2F34(a1, v38, &v390, &v372, a5, (a6 + 1), 0) & 1) == 0
          && (sub_1CBAB2F34(a1, v41, &v390, &v372, a5, (a6 + 1), 0) & 1) == 0
          && (sub_1CBAB2BDC(a1, a2, (uint64_t)&__src, v43) & 1) == 0)
        {
          sub_1CC6DEE8C(a1[3], (const char *)*(unsigned int *)(*(void *)(a2 + 32) + 4), (uint64_t)&v382);
          if (*((_DWORD *)a5 + 2) >= 0x41u && *a5) {
            MEMORY[0x1D25D9CB0](*a5, 0x1000C8000313F17);
          }
          *a5 = v382;
          *((_DWORD *)a5 + 2) = v383;
          LODWORD(v383) = 0;
          if (*((_DWORD *)a5 + 6) >= 0x41u && *v351)
          {
            MEMORY[0x1D25D9CB0](*v351, 0x1000C8000313F17);
            unsigned int v300 = v383;
            a5[2] = (unint64_t)v384;
            *((_DWORD *)a5 + 6) = v385;
            LODWORD(v385) = 0;
            if (v300 >= 0x41 && v382) {
LABEL_588:
            }
              MEMORY[0x1D25D9CB0]();
          }
          else
          {
            a5[2] = (unint64_t)v384;
            *((_DWORD *)a5 + 6) = v385;
          }
LABEL_60:
          if (v373 >= 0x41)
          {
            unint64_t v103 = (unint64_t)v372;
            if (v372) {
LABEL_623:
            }
              MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
          }
          goto LABEL_61;
        }
LABEL_88:
        if (v373 >= 0x41)
        {
          unint64_t v237 = (unint64_t)v372;
          if (v372) {
LABEL_791:
          }
            MEMORY[0x1D25D9CB0](v237, 0x1000C8000313F17);
        }
LABEL_89:
        uint64_t v27 = 1;
        goto LABEL_66;
      }
      if (v31 != 65)
      {
        if (v31 != 66)
        {
LABEL_92:
          unsigned int v59 = *((unsigned __int8 *)v30 + 4);
          if ((v30[4] & 2) == 0 || (int v183 = *(_DWORD *)(a2 + 40), v183 == v59))
          {
            unsigned int v60 = v59;
          }
          else
          {
            int v184 = v183 - 1;
            unsigned int v60 = v59;
            do
            {
              int v185 = *(_DWORD *)(*(void *)(a2 + 32) + 32 * v59);
              if ((v185 & 0x10000FF) != 0x1000000) {
                break;
              }
              v60 += (v185 & 0x2000000) == 0;
              if (v184 == v59) {
                break;
              }
              ++v59;
            }
            while ((v185 & 0x2000000) == 0);
          }
          if (v60 != 1) {
            goto LABEL_61;
          }
          sub_1CC6DEE8C(a1[3], (const char *)*(unsigned int *)(*(void *)(a2 + 32) + 4), (uint64_t)&v372);
          if (v373 < v15)
          {
            sub_1CB9F87DC((uint64_t *)&v372, v15, (uint64_t)&v382);
          }
          else if (v373 > v15)
          {
            if (v373 >= 0x41) {
              char v150 = (uint64_t *)v372;
            }
            else {
              char v150 = (uint64_t *)&v372;
            }
            unint64_t v151 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
            unint64_t v152 = v151;
            if (!v15) {
              unint64_t v152 = 0;
            }
            uint64_t v153 = *v150;
            if (v375 >= 0x41) {
              p_s1 = __s1;
            }
            else {
              p_s1 = &__s1;
            }
            if (!v15) {
              unint64_t v151 = 0;
            }
            long long v155 = (void **)(v151 & *p_s1);
            LODWORD(v383) = v15;
            unint64_t v382 = v152 & v153;
            LODWORD(v385) = v15;
            v384 = v155;
          }
          else
          {
            LODWORD(v383) = v373;
            if (v373 > 0x40) {
              operator new[]();
            }
            unint64_t v382 = (unint64_t)v372;
            LODWORD(v385) = v375;
            if (v375 > 0x40) {
              operator new[]();
            }
            v384 = (void **)__s1;
          }
          if (*((_DWORD *)a5 + 2) >= 0x41u && *a5) {
            MEMORY[0x1D25D9CB0](*a5, 0x1000C8000313F17);
          }
          *a5 = v382;
          *((_DWORD *)a5 + 2) = v383;
          LODWORD(v383) = 0;
          if (*((_DWORD *)a5 + 6) >= 0x41u && *v351)
          {
            MEMORY[0x1D25D9CB0](*v351, 0x1000C8000313F17);
            unsigned int v301 = v383;
            a5[2] = (unint64_t)v384;
            *((_DWORD *)a5 + 6) = v385;
            LODWORD(v385) = 0;
            if (v301 >= 0x41 && v382) {
              MEMORY[0x1D25D9CB0](v382, 0x1000C8000313F17);
            }
          }
          else
          {
            a5[2] = (unint64_t)v384;
            *((_DWORD *)a5 + 6) = v385;
            LODWORD(v385) = 0;
          }
          if (v375 < 0x41 || !__s1) {
            goto LABEL_60;
          }
          goto LABEL_588;
        }
        uint64_t v261 = *(_DWORD **)(a2 + 32);
        uint64_t v262 = v261[17];
        if ((v262 & 0x80000000) != 0) {
          int v263 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v262 & 0x7FFFFFFF) + 8);
        }
        else {
          int v263 = (uint64_t *)(*(void *)(__n + 272) + 8 * v262);
        }
        uint64_t v264 = *v263;
        if (v264
          && ((*(unsigned char *)(v264 + 3) & 1) != 0 || (uint64_t v264 = *(void *)(v264 + 24)) != 0 && (*(unsigned char *)(v264 + 3) & 1) != 0))
        {
          uint64_t v265 = *(void *)(v264 + 8);
        }
        else
        {
          uint64_t v265 = 0;
        }
        if ((v262 & 0x80000000) != 0
          && (v262 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432))
        {
          int v266 = *(uint64_t **)(*(void *)(__n + 424) + 8 * (v262 & 0x7FFFFFFF));
        }
        else
        {
          int v266 = 0;
        }
        unint64_t v107 = v261[9];
        int v267 = v261[1];
        uint64_t v268 = (a6 + 1);
        unint64_t v382 = (unint64_t)v266;
        if (sub_1CBAB2F34(a1, v265, &v382, &__src, a5, v268, 0)) {
          goto LABEL_89;
        }
        if ((v107 & 0x80000000) != 0) {
          uint64_t v269 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v107 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v269 = (uint64_t *)(*(void *)(__n + 272) + 8 * v107);
        }
        uint64_t v270 = *v269;
        if (v270
          && ((*(unsigned char *)(v270 + 3) & 1) != 0 || (uint64_t v270 = *(void *)(v270 + 24)) != 0 && (*(unsigned char *)(v270 + 3) & 1) != 0))
        {
          uint64_t v271 = *(void *)(v270 + 8);
        }
        else
        {
          uint64_t v271 = 0;
        }
        if ((v107 & 0x80000000) != 0 && (v107 & 0x7FFFFFFF) < *(unsigned int *)(__n + 432)) {
          uint64_t v272 = *(void **)(*(void *)(__n + 424) + 8 * (v107 & 0x7FFFFFFF));
        }
        else {
          uint64_t v272 = 0;
        }
        unsigned int v372 = v272;
        unsigned int v273 = *((_DWORD *)a5 + 6);
        unsigned int v363 = v273;
        if (v273 > 0x40) {
          operator new[]();
        }
        unint64_t v274 = ~(unint64_t)*v351;
        unint64_t v275 = v273 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v273 : 0;
        unint64_t v362 = v275 & v274;
        unsigned int v363 = 0;
        LODWORD(v383) = v273;
        unint64_t v382 = __src & v275 & v274;
        if (sub_1CBAB2F34(a1, v271, &v372, &v382, &v376, v268, 0)) {
          goto LABEL_89;
        }
        uint64_t v277 = *a1;
        *(void *)(v277 + 40) = *(void *)(a2 + 24);
        *(void *)(v277 + 48) = a2;
        unsigned int v278 = v379;
        if (v379 > 0x40) {
          operator new[]();
        }
        unint64_t v279 = *a5 | (unint64_t)v378;
        LODWORD(v383) = v379;
        unint64_t v382 = v279;
        if (v381 > 0x40) {
          BOOL isSubsetOfSlowCase = llvm::APInt::isSubsetOfSlowCase((uint64_t **)&__src, (uint64_t **)&v382);
        }
        else {
          BOOL isSubsetOfSlowCase = (__src & ~v279) == 0;
        }
        if (v278 >= 0x41 && v279) {
          MEMORY[0x1D25D9CB0](v279, 0x1000C8000313F17);
        }
        if (!isSubsetOfSlowCase)
        {
          if (*((_DWORD *)a5 + 6) > 0x40u) {
            operator new[]();
          }
          unint64_t v281 = (unint64_t)v376 | (unint64_t)*v351;
          LODWORD(v383) = *((_DWORD *)a5 + 6);
          unint64_t v382 = v281;
          if (v381 > 0x40) {
            BOOL v282 = llvm::APInt::isSubsetOfSlowCase((uint64_t **)&__src, (uint64_t **)&v382);
          }
          else {
            BOOL v282 = (__src & ~v281) == 0;
          }
          if (!v282)
          {
            if ((sub_1CBAB2BDC(a1, a2, (uint64_t)&__src, v276) & 1) == 0)
            {
              uint64_t v283 = *((unsigned int *)a5 + 2);
              if (v283 > 0x40)
              {
                int v327 = (void *)*a5;
                v328 = (uint64_t *)v376;
                unint64_t v329 = (unint64_t)(v283 + 63) >> 6;
                do
                {
                  uint64_t v330 = *v328++;
                  *v327++ &= v330;
                  --v329;
                }
                while (v329);
              }
              else
              {
                *a5 &= (unint64_t)v376;
              }
              uint64_t v284 = *((unsigned int *)a5 + 6);
              if (v284 > 0x40)
              {
                uint64_t v331 = *v351;
                int v332 = (uint64_t *)v378;
                unint64_t v333 = (unint64_t)(v284 + 63) >> 6;
                do
                {
                  uint64_t v334 = *v332++;
                  *v331++ |= v334;
                  --v333;
                }
                while (v333);
              }
              else
              {
                void *v351 = (uint64_t *)((unint64_t)*v351 | (unint64_t)v378);
              }
              goto LABEL_61;
            }
            goto LABEL_89;
          }
          uint64_t v241 = *a1;
          uint64_t v27 = 1;
          LODWORD(v372) = v267;
          unsigned int v373 = 1;
          LODWORD(v382) = v262;
          goto LABEL_451;
        }
        uint64_t v287 = *a1;
        LODWORD(v372) = v267;
        goto LABEL_544;
      }
      uint64_t v105 = *(_DWORD **)(a2 + 32);
      int v106 = v105[1];
      unint64_t v107 = v105[9];
      uint64_t v108 = v105[17];
      sub_1CC73C210(v108, __n, (uint64_t)&v382);
      if (!(_BYTE)v384)
      {
LABEL_182:
        if ((v108 & 0x80000000) != 0) {
          uint64_t v109 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v108 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v109 = (uint64_t *)(*(void *)(__n + 272) + 8 * v108);
        }
        uint64_t v110 = *v109;
        if (v110
          && ((*(unsigned char *)(v110 + 3) & 1) != 0 || (uint64_t v110 = *(void *)(v110 + 24)) != 0 && (*(unsigned char *)(v110 + 3) & 1) != 0))
        {
          uint64_t v111 = *(void *)(v110 + 8);
        }
        else
        {
          uint64_t v111 = 0;
        }
        if ((v108 & 0x80000000) != 0
          && (v108 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432))
        {
          uint64_t v112 = *(uint64_t **)(*(void *)(__n + 424) + 8 * (v108 & 0x7FFFFFFF));
        }
        else
        {
          uint64_t v112 = 0;
        }
        unint64_t v382 = (unint64_t)v112;
        uint64_t v113 = (a6 + 1);
        if (sub_1CBAB2F34(a1, v111, &v382, &__src, a5, v113, 0)) {
          goto LABEL_89;
        }
        if ((v107 & 0x80000000) != 0) {
          int v114 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v107 & 0x7FFFFFFF) + 8);
        }
        else {
          int v114 = (uint64_t *)(*(void *)(__n + 272) + 8 * v107);
        }
        uint64_t v115 = *v114;
        if (v115
          && ((*(unsigned char *)(v115 + 3) & 1) != 0 || (uint64_t v115 = *(void *)(v115 + 24)) != 0 && (*(unsigned char *)(v115 + 3) & 1) != 0))
        {
          uint64_t v116 = *(void *)(v115 + 8);
        }
        else
        {
          uint64_t v116 = 0;
        }
        if ((v107 & 0x80000000) != 0 && (v107 & 0x7FFFFFFF) < *(unsigned int *)(__n + 432)) {
          int v117 = *(void **)(*(void *)(__n + 424) + 8 * (v107 & 0x7FFFFFFF));
        }
        else {
          int v117 = 0;
        }
        unsigned int v372 = v117;
        unsigned int v118 = *((_DWORD *)a5 + 2);
        unsigned int v365 = v118;
        if (v118 > 0x40) {
          operator new[]();
        }
        unint64_t v119 = ~*a5;
        unint64_t v120 = v118 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v118 : 0;
        unint64_t v364 = v120 & v119;
        unsigned int v365 = 0;
        LODWORD(v383) = v118;
        unint64_t v382 = __src & v120 & v119;
        if (sub_1CBAB2F34(a1, v116, &v372, &v382, &v376, v113, 0)) {
          goto LABEL_89;
        }
        uint64_t v122 = *a1;
        *(void *)(v122 + 40) = *(void *)(a2 + 24);
        *(void *)(v122 + 48) = a2;
        unsigned int v123 = v377;
        if (v377 > 0x40) {
          operator new[]();
        }
        unint64_t v124 = (unint64_t)*v351 | (unint64_t)v376;
        LODWORD(v383) = v377;
        unint64_t v382 = v124;
        if (v381 > 0x40) {
          BOOL v125 = llvm::APInt::isSubsetOfSlowCase((uint64_t **)&__src, (uint64_t **)&v382);
        }
        else {
          BOOL v125 = (__src & ~v124) == 0;
        }
        if (v123 >= 0x41 && v124) {
          MEMORY[0x1D25D9CB0](v124, 0x1000C8000313F17);
        }
        if (!v125)
        {
          if (*((_DWORD *)a5 + 2) > 0x40u) {
            operator new[]();
          }
          unint64_t v126 = (unint64_t)v378 | *a5;
          LODWORD(v383) = *((_DWORD *)a5 + 2);
          unint64_t v382 = v126;
          if (v381 > 0x40) {
            BOOL v127 = llvm::APInt::isSubsetOfSlowCase((uint64_t **)&__src, (uint64_t **)&v382);
          }
          else {
            BOOL v127 = (__src & ~v126) == 0;
          }
          if (!v127)
          {
            if ((sub_1CBAB2BDC(a1, a2, (uint64_t)&__src, v121) & 1) == 0)
            {
              uint64_t v128 = *((unsigned int *)a5 + 6);
              if (v128 > 0x40)
              {
                int v313 = *v351;
                unsigned int v314 = (uint64_t *)v378;
                unint64_t v315 = (unint64_t)(v128 + 63) >> 6;
                do
                {
                  uint64_t v316 = *v314++;
                  *v313++ &= v316;
                  --v315;
                }
                while (v315);
              }
              else
              {
                void *v351 = (uint64_t *)((unint64_t)*v351 & (unint64_t)v378);
              }
              uint64_t v129 = *((unsigned int *)a5 + 2);
              if (v129 > 0x40)
              {
                unsigned int v317 = (void *)*a5;
                int v318 = (uint64_t *)v376;
                unint64_t v319 = (unint64_t)(v129 + 63) >> 6;
                do
                {
                  uint64_t v320 = *v318++;
                  *v317++ |= v320;
                  --v319;
                }
                while (v319);
              }
              else
              {
                unint64_t v130 = (unint64_t)v376;
LABEL_217:
                *a5 |= v130;
              }
              goto LABEL_61;
            }
            goto LABEL_89;
          }
          uint64_t v241 = *a1;
          uint64_t v27 = 1;
          LODWORD(v372) = v106;
          unsigned int v373 = 1;
          LODWORD(v382) = v108;
LABEL_451:
          LODWORD(v384) = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, void))(*(void *)v241 + 32))(v241, 19, &v372, 1, &v382, 1, 0);
LABEL_854:
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
LABEL_66:
          if (v379 >= 0x41 && v378) {
            MEMORY[0x1D25D9CB0](v378, 0x1000C8000313F17);
          }
          if (v377 >= 0x41 && v376) {
            MEMORY[0x1D25D9CB0](v376, 0x1000C8000313F17);
          }
          goto LABEL_68;
        }
        uint64_t v287 = *a1;
        LODWORD(v372) = v106;
LABEL_544:
        unsigned int v373 = 1;
        LODWORD(v382) = v107;
        LODWORD(v384) = 0;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, void))(*(void *)v287 + 32))(v287, 19, &v372, 1, &v382, 1, 0);
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
        uint64_t v27 = 1;
        goto LABEL_66;
      }
      int v349 = v106;
      char v175 = v383;
      if (v383 >= 0x41)
      {
        if (v382) {
          MEMORY[0x1D25D9CB0](v382, 0x1000C8000313F17);
        }
        goto LABEL_182;
      }
      unint64_t v176 = v382;
      sub_1CC6DEE8C(a1[3], (const char *)v107, (uint64_t)&v382);
      if (v383 < v15)
      {
        sub_1CB9F87DC((uint64_t *)&v382, v15, (uint64_t)&v372);
      }
      else if (v383 > v15)
      {
        if (v383 >= 0x41) {
          uint64_t v216 = (unint64_t *)v382;
        }
        else {
          uint64_t v216 = &v382;
        }
        unint64_t v217 = *v216;
        unint64_t v218 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
        unint64_t v219 = v218;
        if (!v15) {
          unint64_t v219 = 0;
        }
        if (v385 >= 0x41) {
          uint64_t v220 = v384;
        }
        else {
          uint64_t v220 = (void **)&v384;
        }
        if (!v15) {
          unint64_t v218 = 0;
        }
        uint64_t v221 = (void *)(v218 & (unint64_t)*v220);
        unsigned int v373 = v15;
        unsigned int v372 = (void *)(v219 & v217);
        unsigned int v375 = v15;
        __s1 = v221;
      }
      else
      {
        unsigned int v373 = v383;
        if (v383 > 0x40) {
          operator new[]();
        }
        unsigned int v372 = (void *)v382;
        unsigned int v375 = v385;
        if (v385 > 0x40) {
          operator new[]();
        }
        __s1 = v384;
      }
      if (v385 >= 0x41 && v384) {
        MEMORY[0x1D25D9CB0](v384, 0x1000C8000313F17);
      }
      if (v383 >= 0x41 && v382) {
        MEMORY[0x1D25D9CB0](v382, 0x1000C8000313F17);
      }
      unsigned int v391 = v15;
      if (v15) {
        unint64_t v177 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
      }
      else {
        unint64_t v177 = 0;
      }
      unint64_t v390 = v177 & ((uint64_t)(v176 << -v175) >> -v175);
      if (v373 > 0x40) {
        operator new[]();
      }
      unsigned int v178 = v391;
      unsigned int v369 = v391;
      unint64_t v179 = ~v390;
      unint64_t v180 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v391;
      if (!v391) {
        unint64_t v180 = 0;
      }
      unint64_t v368 = v180 & v179;
      unsigned int v369 = 0;
      if ((__src & (unint64_t)v372) == (__src & v180 & v179))
      {
        uint64_t v238 = *a1;
        *(void *)(v238 + 40) = *(void *)(a2 + 24);
        *(void *)(v238 + 48) = a2;
        uint64_t v239 = *a1;
        LODWORD(v388) = v349;
        unsigned int v389 = 1;
        LODWORD(v382) = v107;
        LODWORD(v384) = 0;
        int v240 = *(void (**)(void))(*(void *)v239 + 32);
        goto LABEL_449;
      }
      if ((v107 & 0x80000000) != 0) {
        unint64_t v181 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v107 & 0x7FFFFFFF) + 8);
      }
      else {
        unint64_t v181 = (uint64_t *)(*(void *)(__n + 272) + 8 * v107);
      }
      uint64_t v182 = *v181;
      if (!v182) {
        goto LABEL_397;
      }
      while ((*(unsigned char *)(v182 + 3) & 1) != 0)
      {
        uint64_t v182 = *(void *)(v182 + 24);
        if (!v182) {
          goto LABEL_397;
        }
      }
      while (1)
      {
        uint64_t v182 = *(void *)(v182 + 24);
        if (!v182) {
          break;
        }
        int v212 = 1;
        if ((*(unsigned char *)(v182 + 3) & 1) == 0) {
          goto LABEL_398;
        }
      }
      int v213 = (uint64_t *)((v107 & 0x80000000) != 0
                       ? *(void *)(__n + 24) + 16 * (v107 & 0x7FFFFFFF) + 8
                       : *(void *)(__n + 272) + 8 * v107);
      if ((uint64_t v214 = *v213) == 0
        || (*(unsigned char *)(v214 + 3) & 1) == 0 && ((uint64_t v214 = *(void *)(v214 + 24)) == 0 || (*(unsigned char *)(v214 + 3) & 1) == 0)
        || (uint64_t v215 = *(void *)(v214 + 8)) == 0
        || **(_WORD **)(v215 + 16) != 67)
      {
LABEL_397:
        int v212 = 1;
        goto LABEL_398;
      }
      unint64_t v288 = v390;
      if (*(_DWORD *)(v215 + 40) != 3)
      {
LABEL_555:
        int v212 = 1;
        goto LABEL_398;
      }
      uint64_t v289 = *(void *)(v215 + 32);
      int v348 = *(_DWORD *)(v289 + 36);
      sub_1CC73C210(*(_DWORD *)(v289 + 68), __n, (uint64_t)&v382);
      if ((_BYTE)v384)
      {
        if (v383 < 0x41)
        {
          uint64_t v291 = (uint64_t)(v382 << -(char)v383) >> -(char)v383;
LABEL_567:
          if (v291 != -1) {
            goto LABEL_555;
          }
          unsigned int v367 = v178;
          unint64_t v292 = ~v288;
          if (v178) {
            unint64_t v293 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v178;
          }
          else {
            unint64_t v293 = 0;
          }
          int v294 = (void *)(v293 & v292);
          unint64_t v366 = v293 & v292;
          unsigned int v367 = 0;
          if (v375 > 0x40) {
            BOOL v295 = memcmp(__s1, v294, (((unint64_t)v375 + 63) >> 3) & 0x3FFFFFF8) == 0;
          }
          else {
            BOOL v295 = __s1 == v294;
          }
          int v296 = v295;
          int v212 = 1;
          if (!v296)
          {
LABEL_398:
            if (v375 >= 0x41 && __s1) {
              MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
            }
            int v106 = v349;
            if (v373 >= 0x41 && v372) {
              MEMORY[0x1D25D9CB0](v372, 0x1000C8000313F17);
            }
            if (!v212) {
              goto LABEL_89;
            }
            goto LABEL_182;
          }
          uint64_t v297 = *a1;
          *(void *)(v297 + 40) = *(void *)(a2 + 24);
          *(void *)(v297 + 48) = a2;
          uint64_t v298 = *a1;
          LODWORD(v388) = v349;
          unsigned int v389 = 1;
          LODWORD(v382) = v348;
          LODWORD(v384) = 0;
          LODWORD(v385) = v108;
          int v387 = 0;
          int v240 = *(void (**)(void))(*(void *)v298 + 32);
LABEL_449:
          v240();
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          int v212 = 0;
          goto LABEL_398;
        }
        if (v382) {
          MEMORY[0x1D25D9CB0](v382, 0x1000C8000313F17);
        }
      }
      sub_1CC73C210(*(_DWORD *)(*(void *)(v215 + 32) + 36), __n, (uint64_t)&v382);
      if (!(_BYTE)v384) {
        goto LABEL_555;
      }
      if (v383 >= 0x41)
      {
        if (v382) {
          MEMORY[0x1D25D9CB0](v382, 0x1000C8000313F17);
        }
        goto LABEL_555;
      }
      uint64_t v291 = (uint64_t)(v382 << -(char)v383) >> -(char)v383;
      int v348 = *(_DWORD *)(*(void *)(v215 + 32) + 68);
      goto LABEL_567;
    }
    if (*v30 > 0x75u)
    {
      switch(*v30)
      {
        case 0x76u:
          uint64_t v222 = *(unsigned int *)(*(void *)(a2 + 32) + 36);
          if ((v222 & 0x80000000) != 0
            && (v222 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432))
          {
            uint64_t v223 = *(uint64_t **)(*(void *)(__n + 424) + 8 * (v222 & 0x7FFFFFFF));
          }
          else
          {
            uint64_t v223 = 0;
          }
          unint64_t v382 = (unint64_t)v223;
          unsigned int v225 = sub_1CB8F1DC4(&v382);
          if (v224 == 1) {
          if (v225 > 0x40)
          }
          {
            if (v381 != v225) {
              operator new[]();
            }
            sub_1CD0463BC((uint64_t)&v390, (uint64_t)&__src);
          }
          else
          {
            if (v381 >= 0x41) {
              p_src = (unint64_t *)__src;
            }
            else {
              p_src = &__src;
            }
            unint64_t v227 = *p_src;
            unsigned int v391 = v225;
            if (v225) {
              unint64_t v228 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v225;
            }
            else {
              unint64_t v228 = 0;
            }
            unint64_t v390 = v228 & v227;
          }
          if ((v222 & 0x80000000) != 0) {
            unint64_t v229 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v222 & 0x7FFFFFFF) + 8);
          }
          else {
            unint64_t v229 = (uint64_t *)(*(void *)(__n + 272) + 8 * v222);
          }
          uint64_t v230 = *v229;
          if (v230
            && ((*(unsigned char *)(v230 + 3) & 1) != 0
             || (uint64_t v230 = *(void *)(v230 + 24)) != 0 && (*(unsigned char *)(v230 + 3) & 1) != 0))
          {
            uint64_t v231 = *(void *)(v230 + 8);
          }
          else
          {
            uint64_t v231 = 0;
          }
          if ((v222 & 0x80000000) != 0
            && (v222 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432))
          {
            uint64_t v232 = *(uint64_t **)(*(void *)(__n + 424) + 8 * (v222 & 0x7FFFFFFF));
          }
          else
          {
            uint64_t v232 = 0;
          }
          unint64_t v382 = (unint64_t)v232;
          if (sub_1CBAB2F34(a1, v231, &v382, &v390, a5, (a6 + 1), 0)) {
            goto LABEL_445;
          }
          unint64_t v233 = *a5;
          LODWORD(v383) = v15;
          if (v15)
          {
            unint64_t v96 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
            unint64_t v382 = v96 & v233;
          }
          else
          {
            unint64_t v96 = 0;
            unint64_t v382 = 0;
          }
          unint64_t v99 = (unint64_t)*v351;
          goto LABEL_173;
        case 0x77u:
          uint64_t v85 = *(unsigned int *)(*(void *)(a2 + 32) + 36);
          if ((v85 & 0x80000000) != 0
            && (v85 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432))
          {
            uint64_t v86 = *(uint64_t **)(*(void *)(__n + 424) + 8 * (v85 & 0x7FFFFFFF));
          }
          else
          {
            uint64_t v86 = 0;
          }
          unint64_t v382 = (unint64_t)v86;
          unsigned int v88 = sub_1CB8F1DC4(&v382);
          if (v87 == 1) {
          if (v88 > 0x40)
          }
          {
            if (v381 != v88) {
              operator new[]();
            }
            sub_1CD0463BC((uint64_t)&v390, (uint64_t)&__src);
          }
          else
          {
            unsigned int v391 = v88;
            if (v88) {
              unint64_t v89 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v88;
            }
            else {
              unint64_t v89 = 0;
            }
            unint64_t v390 = v89 & __src;
          }
          if ((v85 & 0x80000000) != 0) {
            int v90 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v85 & 0x7FFFFFFF) + 8);
          }
          else {
            int v90 = (uint64_t *)(*(void *)(__n + 272) + 8 * v85);
          }
          uint64_t v91 = *v90;
          if (v91
            && ((*(unsigned char *)(v91 + 3) & 1) != 0 || (uint64_t v91 = *(void *)(v91 + 24)) != 0 && (*(unsigned char *)(v91 + 3) & 1) != 0))
          {
            uint64_t v92 = *(void *)(v91 + 8);
          }
          else
          {
            uint64_t v92 = 0;
          }
          if ((v85 & 0x80000000) != 0
            && (v85 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432))
          {
            uint64_t v93 = *(uint64_t **)(*(void *)(__n + 424) + 8 * (v85 & 0x7FFFFFFF));
          }
          else
          {
            uint64_t v93 = 0;
          }
          unint64_t v382 = (unint64_t)v93;
          if (sub_1CBAB2F34(a1, v92, &v382, &v390, a5, (a6 + 1), 0))
          {
LABEL_445:
            if (v391 >= 0x41)
            {
              unint64_t v237 = v390;
              if (v390) {
                goto LABEL_791;
              }
            }
            goto LABEL_89;
          }
          int v94 = (uint64_t *)a5;
          if (*((_DWORD *)a5 + 2) >= 0x41u) {
            int v94 = (uint64_t *)*a5;
          }
          uint64_t v95 = *v94;
          LODWORD(v383) = v15;
          unint64_t v96 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
          unint64_t v97 = v96;
          if (!v15) {
            unint64_t v97 = 0;
          }
          unint64_t v382 = v97 & v95;
          uint64_t v98 = (uint64_t *)(a5 + 2);
          if (*((_DWORD *)a5 + 6) >= 0x41u) {
            uint64_t v98 = *v351;
          }
          unint64_t v99 = *v98;
          if (!v15) {
            unint64_t v96 = 0;
          }
LABEL_173:
          unint64_t v100 = v96 & v99;
          int v101 = v383;
          unint64_t v102 = v382;
          if (*((_DWORD *)a5 + 2) >= 0x41u && *a5) {
            MEMORY[0x1D25D9CB0](*a5, 0x1000C8000313F17);
          }
          *a5 = v102;
          *((_DWORD *)a5 + 2) = v101;
          if (*((_DWORD *)a5 + 6) >= 0x41u && *v351) {
            MEMORY[0x1D25D9CB0](*v351, 0x1000C8000313F17);
          }
          a5[2] = v100;
          *((_DWORD *)a5 + 6) = v15;
          if (v391 >= 0x41)
          {
            unint64_t v103 = v390;
            if (v390) {
              goto LABEL_623;
            }
          }
          goto LABEL_61;
        case 0x78u:
          sub_1CC73C210(*(_DWORD *)(*(void *)(a2 + 32) + 4), __n, (uint64_t)&v382);
          if (!(_BYTE)v384) {
            goto LABEL_61;
          }
          if (v383 >= 0x41) {
            goto LABEL_622;
          }
          uint64_t v131 = (uint64_t)(v382 << -(char)v383) >> -(char)v383;
          uint64_t v132 = *((unsigned int *)a5 + 6);
          if (v132 > 0x40)
          {
            *(void *)a5[2] = v131;
            bzero((void *)(a5[2] + 8), (((unint64_t)(v132 + 63) >> 3) - 8) & 0xFFFFFFF8);
            LODWORD(v132) = *((_DWORD *)a5 + 6);
            int v371 = v132;
            if (v132 > 0x40) {
              operator new[]();
            }
            uint64_t v135 = (uint64_t)*v351;
            unint64_t v133 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v132;
          }
          else
          {
            unint64_t v133 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v132;
            unint64_t v134 = v133;
            if (!v132) {
              unint64_t v134 = 0;
            }
            uint64_t v135 = v134 & v131;
            void *v351 = (uint64_t *)v135;
            int v371 = v132;
          }
          uint64_t v136 = ~v135;
          if (!v132) {
            unint64_t v133 = 0;
          }
          unint64_t v137 = v133 & v136;
          unint64_t v370 = v133 & v136;
          int v371 = 0;
          if (*((_DWORD *)a5 + 2) <= 0x40u || !*a5)
          {
            uint64_t v27 = 0;
            *a5 = v137;
            *((_DWORD *)a5 + 2) = v132;
            goto LABEL_66;
          }
          MEMORY[0x1D25D9CB0](*a5, 0x1000C8000313F17);
          *a5 = v137;
          *((_DWORD *)a5 + 2) = v132;
          goto LABEL_65;
        case 0x79u:
        case 0x7Au:
        case 0x7Bu:
        case 0x7Du:
          goto LABEL_92;
        case 0x7Cu:
          uint64_t v186 = *a1;
          *(void *)(v186 + 40) = *(void *)(a2 + 24);
          *(void *)(v186 + 48) = a2;
          uint64_t v187 = *(void *)(a2 + 32);
          uint64_t v188 = *(unsigned int *)(v187 + 36);
          if ((v188 & 0x80000000) != 0
            && (v188 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432))
          {
            int v189 = *(uint64_t **)(*(void *)(__n + 424) + 8 * (v188 & 0x7FFFFFFF));
          }
          else
          {
            int v189 = 0;
          }
          int v350 = *(_DWORD *)(v187 + 4);
          unint64_t v382 = (unint64_t)v189;
          unsigned int v191 = sub_1CB8F1DC4(&v382);
          if (v190 == 1) {
          unsigned int v391 = v15;
          }
          unint64_t v390 = 0;
          if (v191)
          {
            if (v191 > 0x40) {
              llvm::APInt::setBitsSlowCase(&v390, 0, v191);
            }
            else {
              v390 |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v191;
            }
          }
          unsigned int v389 = v15;
          uint64_t v388 = 1 << (v191 - 1);
          unsigned int v357 = v391;
          if (v391 > 0x40) {
            operator new[]();
          }
          unint64_t v192 = ~v390;
          unint64_t v193 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v391;
          if (!v391) {
            unint64_t v193 = 0;
          }
          unint64_t v356 = v193 & v192;
          unsigned int v357 = 0;
          unint64_t v194 = __src & v193 & v192;
          unsigned int v359 = v391;
          unint64_t v358 = v194;
          if (!v194)
          {
            uint64_t v285 = *a1;
            int v204 = 1;
            LODWORD(v372) = v350;
            unsigned int v373 = 1;
            LODWORD(v382) = v188;
            LODWORD(v384) = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, void))(*(void *)v285 + 32))(v285, 118, &v372, 1, &v382, 1, 0);
            llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
            goto LABEL_371;
          }
          unsigned int v355 = v391;
          unint64_t v354 = v388 | __src & v390;
          if (v191 >= 0x41)
          {
            if (v391 != v191) {
              operator new[]();
            }
            sub_1CD0463BC((uint64_t)&v382, (uint64_t)&v354);
          }
          else
          {
            LODWORD(v383) = v191;
            if (v191) {
              unint64_t v195 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v191;
            }
            else {
              unint64_t v195 = 0;
            }
            unint64_t v382 = v195 & (v388 | __src & v390);
          }
          if (v355 >= 0x41 && v354) {
            MEMORY[0x1D25D9CB0](v354, 0x1000C8000313F17);
          }
          unint64_t v354 = v382;
          unsigned int v355 = v383;
          if ((v188 & 0x80000000) != 0) {
            uint64_t v196 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v188 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v196 = (uint64_t *)(*(void *)(__n + 272) + 8 * v188);
          }
          uint64_t v197 = *v196;
          if (v197
            && ((*(unsigned char *)(v197 + 3) & 1) != 0
             || (uint64_t v197 = *(void *)(v197 + 24)) != 0 && (*(unsigned char *)(v197 + 3) & 1) != 0))
          {
            uint64_t v198 = *(void *)(v197 + 8);
          }
          else
          {
            uint64_t v198 = 0;
          }
          if ((v188 & 0x80000000) != 0
            && (v188 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432))
          {
            unint64_t v199 = *(uint64_t **)(*(void *)(__n + 424) + 8 * (v188 & 0x7FFFFFFF));
          }
          else
          {
            unint64_t v199 = 0;
          }
          unint64_t v382 = (unint64_t)v199;
          if (sub_1CBAB2F34(a1, v198, &v382, &v354, a5, (a6 + 1), 0))
          {
            int v204 = 1;
            goto LABEL_370;
          }
          llvm::APInt::sext((uint64_t)a5, v15, (uint64_t)&v382);
          llvm::APInt::sext((uint64_t)v351, v15, (uint64_t)&v372);
          unsigned int v200 = v383;
          unint64_t v201 = v382;
          uint64_t v202 = v373;
          unint64_t v203 = (unint64_t)v372;
          if (*((_DWORD *)a5 + 2) >= 0x41u && *a5) {
            MEMORY[0x1D25D9CB0](*a5, 0x1000C8000313F17);
          }
          *a5 = v201;
          *((_DWORD *)a5 + 2) = v200;
          if (*((_DWORD *)a5 + 6) >= 0x41u && *v351)
          {
            MEMORY[0x1D25D9CB0](*v351, 0x1000C8000313F17);
            unsigned int v200 = *((_DWORD *)a5 + 2);
          }
          a5[2] = v203;
          *((_DWORD *)a5 + 6) = v202;
          if (v200 > 0x40)
          {
            if (!llvm::APInt::intersectsSlowCase((uint64_t **)a5, (uint64_t **)&v388)) {
              goto LABEL_366;
            }
          }
          else if ((v388 & *a5) == 0)
          {
LABEL_366:
            if (v202 <= 0x40)
            {
              if ((v388 & v203) != 0) {
                void *v351 = (uint64_t *)(v194 | v203);
              }
              goto LABEL_369;
            }
            if (!llvm::APInt::intersectsSlowCase(v351, (uint64_t **)&v388))
            {
LABEL_369:
              int v204 = 2;
              goto LABEL_370;
            }
            unint64_t v323 = (unint64_t)(v202 + 63) >> 6;
            uint64_t v324 = (uint64_t *)v194;
            do
            {
              uint64_t v325 = *v324++;
              *(void *)v203 |= v325;
              v203 += 8;
              int v204 = 2;
              --v323;
            }
            while (v323);
LABEL_370:
            if (v355 >= 0x41 && v354) {
              MEMORY[0x1D25D9CB0](v354, 0x1000C8000313F17);
            }
LABEL_371:
            if (v359 >= 0x41 && v194 != 0) {
              MEMORY[0x1D25D9CB0](v194, 0x1000C8000313F17);
            }
            if (v389 >= 0x41 && v388) {
              MEMORY[0x1D25D9CB0](v388, 0x1000C8000313F17);
            }
            if (v391 >= 0x41 && v390) {
              MEMORY[0x1D25D9CB0](v390, 0x1000C8000313F17);
            }
            if (v204 == 2) {
              goto LABEL_61;
            }
            goto LABEL_89;
          }
          uint64_t v321 = *a1;
          *(void *)(v321 + 40) = *(void *)(a2 + 24);
          *(void *)(v321 + 48) = a2;
          uint64_t v322 = *a1;
          int v204 = 1;
          LODWORD(v372) = v350;
          unsigned int v373 = 1;
          LODWORD(v382) = v188;
          LODWORD(v384) = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, void))(*(void *)v322 + 32))(v322, 126, &v372, 1, &v382, 1, 0);
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          goto LABEL_370;
        case 0x7Eu:
          uint64_t v47 = *(void *)(a2 + 32);
          int v48 = *(_DWORD *)(v47 + 36);
          if (v48 < 0 && (v48 & 0x7FFFFFFFu) < *(_DWORD *)(__n + 432)) {
            uint64_t v49 = *(uint64_t **)(*(void *)(__n + 424) + 8 * (v48 & 0x7FFFFFFF));
          }
          else {
            uint64_t v49 = 0;
          }
          int v50 = *(_DWORD *)(v47 + 4);
          unint64_t v382 = (unint64_t)v49;
          unsigned int v52 = sub_1CB8F1DC4(&v382);
          if (v51 == 1) {
          if (v52 > 0x40)
          }
          {
            if (v381 != v52) {
              operator new[]();
            }
            sub_1CD0463BC((uint64_t)&v372, (uint64_t)&__src);
          }
          else
          {
            if (v381 >= 0x41) {
              int v53 = (unint64_t *)__src;
            }
            else {
              int v53 = &__src;
            }
            unint64_t v54 = *v53;
            unsigned int v373 = v52;
            if (v52) {
              unint64_t v55 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v52;
            }
            else {
              unint64_t v55 = 0;
            }
            unsigned int v372 = (void *)(v55 & v54);
          }
          unsigned int v361 = v15;
          unint64_t v360 = 0;
          if (v52 == v15) {
            goto LABEL_557;
          }
          if (v52 > 0x3F)
          {
            llvm::APInt::setBitsSlowCase(&v360, v52, v15);
LABEL_557:
            unint64_t v56 = v360;
          }
          else
          {
            unint64_t v56 = v360 | (0xFFFFFFFFFFFFFFFFLL >> (v52 - v15) << v52);
          }
          unsigned int v391 = v15;
          unsigned int v361 = 0;
          unint64_t v360 = v56 & __src;
          unint64_t v390 = v56 & __src;
          if ((v56 & __src) != 0) {
            goto LABEL_60;
          }
          uint64_t v57 = *a1;
          *(void *)(v57 + 40) = *(void *)(a2 + 24);
          *(void *)(v57 + 48) = a2;
          uint64_t v58 = *a1;
          LODWORD(v388) = v50;
          unsigned int v389 = 1;
          LODWORD(v382) = v48;
          LODWORD(v384) = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v58 + 32))(v58, 118, &v388, 1, &v382, 1, 0);
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          if (v391 >= 0x41 && v390) {
            MEMORY[0x1D25D9CB0](v390, 0x1000C8000313F17);
          }
          goto LABEL_88;
        case 0x7Fu:
          sub_1CC73C210(*(_DWORD *)(*(void *)(a2 + 32) + 68), __n, (uint64_t)&v382);
          if (!(_BYTE)v384) {
            goto LABEL_61;
          }
          if (v383 >= 0x41) {
            goto LABEL_622;
          }
          uint64_t v138 = (uint64_t)(v382 << -(char)v383) >> -(char)v383;
          if (v138 >= v15) {
            goto LABEL_61;
          }
          uint64_t v139 = *(unsigned int *)(*(void *)(a2 + 32) + 36);
          if ((v139 & 0x80000000) != 0) {
            uint64_t v140 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v139 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v140 = (uint64_t *)(*(void *)(__n + 272) + 8 * v139);
          }
          uint64_t v141 = *v140;
          if (v141
            && ((*(unsigned char *)(v141 + 3) & 1) != 0
             || (uint64_t v141 = *(void *)(v141 + 24)) != 0 && (*(unsigned char *)(v141 + 3) & 1) != 0))
          {
            uint64_t v142 = *(void *)(v141 + 8);
          }
          else
          {
            uint64_t v142 = 0;
          }
          LODWORD(v383) = v381;
          if (v381 > 0x40) {
            operator new[]();
          }
          if (v381 == v138) {
            unint64_t v143 = 0;
          }
          else {
            unint64_t v143 = __src >> v138;
          }
          unint64_t v382 = v143;
          if (sub_1CBAB2F34(a1, v142, a3, &v382, a5, (a6 + 1), 0)) {
            goto LABEL_89;
          }
          unsigned int v144 = *((_DWORD *)a5 + 2);
          if (v144 > 0x40)
          {
            llvm::APInt::shlSlowCase((llvm::APInt *)a5, v138);
          }
          else
          {
            unint64_t v145 = *a5 << v138;
            if (v144 && v144 != v138) {
              goto LABEL_244;
            }
            if (v144 == v138) {
              unint64_t v145 = 0;
            }
            if (v144) {
LABEL_244:
            }
              unint64_t v146 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v144;
            else {
              unint64_t v146 = 0;
            }
            *a5 = v146 & v145;
          }
          unsigned int v147 = *((_DWORD *)a5 + 6);
          if (v147 > 0x40)
          {
            llvm::APInt::shlSlowCase((llvm::APInt *)v351, v138);
          }
          else
          {
            uint64_t v148 = (void)*v351 << v138;
            if (v147 && v147 != v138) {
              goto LABEL_249;
            }
            if (v147 == v138) {
              uint64_t v148 = 0;
            }
            if (v147) {
LABEL_249:
            }
              unint64_t v149 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v147;
            else {
              unint64_t v149 = 0;
            }
            void *v351 = (uint64_t *)(v149 & v148);
          }
          if (!v138) {
            goto LABEL_61;
          }
          if (v138 > 0x40)
          {
            llvm::APInt::setBitsSlowCase(a5, 0, v138);
          }
          else
          {
            unint64_t v130 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v138;
            if (*((_DWORD *)a5 + 2) <= 0x40u) {
              goto LABEL_217;
            }
            *(void *)*a5 |= v130;
          }
          goto LABEL_61;
        case 0x80u:
          sub_1CC73C210(*(_DWORD *)(*(void *)(a2 + 32) + 68), __n, (uint64_t)&v382);
          if (!(_BYTE)v384) {
            goto LABEL_61;
          }
          if (v383 >= 0x41) {
            goto LABEL_622;
          }
          uint64_t v159 = (uint64_t)(v382 << -(char)v383) >> -(char)v383;
          if (v159 < v15)
          {
            LODWORD(v383) = v381;
            if (v381 > 0x40) {
              operator new[]();
            }
            unint64_t v160 = __src << v159;
            if (v381)
            {
              if (v381 != v159) {
                goto LABEL_277;
              }
            }
            if (v381 == v159) {
              unint64_t v160 = 0;
            }
            if (v381) {
LABEL_277:
            }
              unint64_t v161 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v381;
            else {
              unint64_t v161 = 0;
            }
            unint64_t v382 = v161 & v160;
            if ((*(_WORD *)(a2 + 44) & 0x2000) != 0 && v159)
            {
              if (v159 > 0x40)
              {
                llvm::APInt::setBitsSlowCase(&v382, 0, v159);
              }
              else
              {
                unint64_t v286 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v159;
                if (v383 > 0x40) {
                  *(void *)v382 |= v286;
                }
                else {
                  v382 |= v286;
                }
              }
            }
            uint64_t v162 = *(unsigned int *)(*(void *)(a2 + 32) + 36);
            if ((v162 & 0x80000000) != 0) {
              __int16 v163 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v162 & 0x7FFFFFFF) + 8);
            }
            else {
              __int16 v163 = (uint64_t *)(*(void *)(__n + 272) + 8 * v162);
            }
            uint64_t v164 = *v163;
            if ((*(unsigned char *)(v164 + 3) & 1) == 0) {
              uint64_t v164 = *(void *)(v164 + 24);
            }
            char v165 = sub_1CBAB2F34(a1, *(void *)(v164 + 8), a3, &v382, a5, (a6 + 1), 0);
            if ((v165 & 1) == 0)
            {
              unsigned int v166 = *((_DWORD *)a5 + 2);
              if (v166 > 0x40)
              {
                llvm::APInt::lshrSlowCase((void **)a5, v159);
              }
              else if (v166 == v159)
              {
                *a5 = 0;
              }
              else
              {
                *a5 >>= v159;
              }
              unsigned int v167 = *((_DWORD *)a5 + 6);
              if (v167 > 0x40) {
                llvm::APInt::lshrSlowCase((void **)v351, v159);
              }
              else {
                void *v351 = v167 == v159 ? 0 : (uint64_t *)((unint64_t)*v351 >> v159);
              }
              if (v159)
              {
                uint64_t v14 = (const llvm::APInt *)*((unsigned int *)a5 + 2);
                unsigned int v168 = v14 - v159;
                if (v14 > 0x40 || v168 > 0x3F) {
                  llvm::APInt::setBitsSlowCase(a5, v168, v14);
                }
                else {
                  *a5 |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v159 << v168;
                }
              }
            }
            if (v383 >= 0x41 && v382) {
              MEMORY[0x1D25D9CB0](v382, 0x1000C8000313F17);
            }
            if (v165) {
              goto LABEL_89;
            }
          }
          goto LABEL_61;
        case 0x81u:
          unsigned int v242 = *(_DWORD *)(*(void *)(a2 + 32) + 68);
          sub_1CC73C210(v242, __n, (uint64_t)&v382);
          if (!(_BYTE)v384) {
            goto LABEL_61;
          }
          if (v383 >= 0x41)
          {
LABEL_622:
            unint64_t v103 = v382;
            if (!v382) {
              goto LABEL_61;
            }
            goto LABEL_623;
          }
          uint64_t v243 = (uint64_t)(v382 << -(char)v383) >> -(char)v383;
          if (v243 >= v15) {
            goto LABEL_61;
          }
          unsigned int v373 = v381;
          if (v381 > 0x40) {
            operator new[]();
          }
          unint64_t v244 = __src << v243;
          if (v381 && v381 != v243) {
            goto LABEL_458;
          }
          if (v381 == v243) {
            unint64_t v244 = 0;
          }
          if (v381) {
LABEL_458:
          }
            unint64_t v245 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v381;
          else {
            unint64_t v245 = 0;
          }
          unsigned int v372 = (void *)(v245 & v244);
          if (v243 && (*(_WORD *)(a2 + 44) & 0x2000) != 0)
          {
            if (v243 > 0x40)
            {
              llvm::APInt::setBitsSlowCase(&v372, 0, v243);
            }
            else
            {
              unint64_t v290 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v243;
              if (v373 > 0x40) {
                *(void *)v372 |= v290;
              }
              else {
                unsigned int v372 = (void *)((unint64_t)v372 | v290);
              }
            }
          }
          if (v381 > 0x40) {
            unsigned int v246 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__src);
          }
          else {
            unsigned int v246 = v381 + __clz(__src) - 64;
          }
          if (v246 < v243)
          {
            uint64_t v247 = 1 << (v373 - 1);
            if (v373 > 0x40) {
              *((void *)v372 + ((v373 - 1) >> 6)) |= v247;
            }
            else {
              unsigned int v372 = (void *)((unint64_t)v372 | v247);
            }
          }
          uint64_t v248 = *(unsigned int *)(*(void *)(a2 + 32) + 36);
          if ((v248 & 0x80000000) != 0) {
            uint64_t v249 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v248 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v249 = (uint64_t *)(*(void *)(__n + 272) + 8 * v248);
          }
          uint64_t v250 = *v249;
          if ((*(unsigned char *)(v250 + 3) & 1) == 0) {
            uint64_t v250 = *(void *)(v250 + 24);
          }
          if (sub_1CBAB2F34(a1, *(void *)(v250 + 8), a3, &v372, a5, (a6 + 1), 0)) {
            goto LABEL_667;
          }
          unsigned int v251 = *((_DWORD *)a5 + 2);
          if (v251 > 0x40)
          {
            llvm::APInt::lshrSlowCase((void **)a5, v243);
          }
          else if (v251 == v243)
          {
            *a5 = 0;
          }
          else
          {
            *a5 >>= v243;
          }
          unsigned int v252 = *((_DWORD *)a5 + 6);
          if (v252 > 0x40)
          {
            llvm::APInt::lshrSlowCase((void **)v351, v243);
          }
          else if (v252 == v243)
          {
            void *v351 = 0;
          }
          else
          {
            void *v351 = (uint64_t *)((unint64_t)*v351 >> v243);
          }
          unsigned int v253 = ~v243 + v15;
          uint64_t v254 = v253 >> 6;
          if (*((_DWORD *)a5 + 2) >= 0x41u) {
            uint64_t v255 = (unint64_t *)(*a5 + 8 * v254);
          }
          else {
            uint64_t v255 = a5;
          }
          uint64_t v256 = 1 << v253;
          if ((*v255 & (1 << v253)) != 0
            || (v381 > 0x40
              ? (unsigned int v257 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__src))
              : (unsigned int v257 = v381 + __clz(__src) - 64),
                v257 >= v243))
          {
            uint64_t v310 = *a1;
            *(void *)(v310 + 40) = *(void *)(a2 + 24);
            *(void *)(v310 + 48) = a2;
            uint64_t v311 = *a1;
            LODWORD(v390) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
            unsigned int v391 = 1;
            LODWORD(v382) = v248;
            LODWORD(v384) = 0;
            LODWORD(v385) = v242;
            int v387 = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v311 + 32))(v311, 128, &v390, 1, &v382, 2, 0x100002000);
          }
          else
          {
            int v258 = sub_1CBAB77A4((unsigned int *)&__src);
            if (v258 < 0
              || ((int v302 = v258, v381 > 0x40)
                ? (unsigned int v303 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__src))
                : (unsigned int v303 = v381 + __clz(__src) - 64),
                  v303 >= v243))
            {
              uint64_t v14 = (const llvm::APInt *)*((unsigned int *)a5 + 6);
              uint64_t v259 = (void *)(a5[2] + 8 * v254);
              if (v14 < 0x41) {
                uint64_t v259 = a5 + 2;
              }
              if ((*v259 & v256) != 0) {
                sub_1CBAB8F38(v351, v14 - v243, v14);
              }
              char v260 = 1;
              goto LABEL_490;
            }
            uint64_t v304 = *a1;
            *(void *)(v304 + 40) = *(void *)(a2 + 24);
            *(void *)(v304 + 48) = a2;
            uint64_t v305 = *a1;
            if ((v242 & 0x80000000) != 0 && (v242 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432)) {
              uint64_t v306 = *(uint64_t **)(*(void *)(__n + 424) + 8 * (v242 & 0x7FFFFFFF));
            }
            else {
              uint64_t v306 = 0;
            }
            unint64_t v382 = (unint64_t)v306;
            LODWORD(v383) = 0;
            uint64_t v307 = sub_1CC7362A8(v305, &v382, ~v302 + v15);
            uint64_t v308 = *a1;
            LODWORD(v390) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
            unsigned int v391 = 1;
            LODWORD(v382) = v248;
            LODWORD(v384) = 0;
            uint64_t v385 = v307;
            uint64_t v386 = v309;
            int v387 = 1;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v308 + 32))(v308, 128, &v390, 1, &v382, 2, 0);
          }
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
LABEL_667:
          char v260 = 0;
LABEL_490:
          if (v373 >= 0x41 && v372) {
            MEMORY[0x1D25D9CB0](v372, 0x1000C8000313F17);
          }
          if (v260) {
            goto LABEL_61;
          }
          goto LABEL_89;
        default:
          if (v31 == 193) {
            goto LABEL_38;
          }
          goto LABEL_92;
      }
    }
    if (v31 == 80)
    {
      uint64_t v169 = *(unsigned int *)(*(void *)(a2 + 32) + 36);
      if ((v169 & 0x80000000) != 0)
      {
        unint64_t v170 = v169 & 0x7FFFFFFF;
        if (v170 >= *(unsigned int *)(__n + 432)) {
          uint64_t v171 = 0;
        }
        else {
          uint64_t v171 = *(void *)(*(void *)(__n + 424) + 8 * v170);
        }
        uint64_t v172 = 0x7FFFFF800000000;
        if ((v171 & 4) == 0) {
          uint64_t v172 = 0x7FFFFF80000;
        }
        if ((v172 & v171) != 0) {
          goto LABEL_61;
        }
        uint64_t v173 = (uint64_t *)(*(void *)(__n + 24) + 16 * v170 + 8);
      }
      else
      {
        uint64_t v173 = (uint64_t *)(*(void *)(__n + 272) + 8 * v169);
      }
      uint64_t v174 = *v173;
      if ((*(unsigned char *)(v174 + 3) & 1) == 0) {
        uint64_t v174 = *(void *)(v174 + 24);
      }
      if (sub_1CBAB2F34(a1, *(void *)(v174 + 8), a3, &__src, a5, (a6 + 1), 0)) {
        goto LABEL_89;
      }
LABEL_61:
      if (*((_DWORD *)a5 + 2) > 0x40u) {
        operator new[]();
      }
      unint64_t v44 = a5[2] | *a5;
      LODWORD(v383) = *((_DWORD *)a5 + 2);
      unint64_t v382 = v44;
      if (v381 > 0x40) {
        BOOL v45 = llvm::APInt::isSubsetOfSlowCase((uint64_t **)&__src, (uint64_t **)&v382);
      }
      else {
        BOOL v45 = (__src & ~v44) == 0;
      }
      if (v45)
      {
        uint64_t v206 = *(unsigned __int16 **)(a2 + 16);
        unsigned int v207 = *((unsigned __int8 *)v206 + 4);
        if ((v206[4] & 2) == 0 || (int v234 = *(_DWORD *)(a2 + 40), v234 == v207))
        {
          int v208 = *((unsigned __int8 *)v206 + 4);
        }
        else
        {
          int v235 = v234 - 1;
          int v208 = *((unsigned __int8 *)v206 + 4);
          do
          {
            int v236 = *(_DWORD *)(*(void *)(a2 + 32) + 32 * v207);
            if ((v236 & 0x10000FF) != 0x1000000) {
              break;
            }
            v208 += (v236 & 0x2000000) == 0;
            if (v235 == v207) {
              break;
            }
            ++v207;
          }
          while ((v236 & 0x2000000) == 0);
        }
        if (v208 == 1)
        {
          uint64_t v209 = *(unsigned int *)(*(void *)(a2 + 32) + 4);
          unsigned int v210 = (uint64_t *)((v209 & 0x80000000) != 0
                           ? *(void *)(__n + 24) + 16 * (v209 & 0x7FFFFFFF) + 8
                           : *(void *)(__n + 272) + 8 * v209);
          uint64_t v211 = *v210;
          if (v211)
          {
            while ((*(unsigned char *)(v211 + 3) & 1) != 0)
            {
              uint64_t v211 = *(void *)(v211 + 24);
              if (!v211) {
                goto LABEL_65;
              }
            }
            while (1)
            {
              uint64_t v211 = *(void *)(v211 + 24);
              if (!v211) {
                break;
              }
              uint64_t v27 = 0;
              if ((*(unsigned char *)(v211 + 3) & 1) == 0) {
                goto LABEL_66;
              }
            }
            int v335 = *v206;
            BOOL v336 = v335 == 69 || v335 == 0;
            uint64_t FirstNonPHI = a2;
            if (!v336) {
              goto LABEL_860;
            }
            if ((v209 & 0x80000000) != 0) {
              unsigned int v344 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v209 & 0x7FFFFFFF) + 8);
            }
            else {
              unsigned int v344 = (uint64_t *)(*(void *)(__n + 272) + 8 * v209);
            }
            for (uint64_t i = *v344; (*(unsigned char *)(i + 3) & 1) != 0; uint64_t i = *(void *)(i + 24))
              ;
            uint64_t v346 = *(void *)(i + 8);
            if (**(_WORD **)(v346 + 16) && **(_WORD **)(v346 + 16) != 69)
            {
              v347 = *(llvm::MachineBasicBlock **)(a2 + 24);
LABEL_869:
              uint64_t FirstNonPHI = llvm::MachineBasicBlock::getFirstNonPHI(v347);
LABEL_860:
              uint64_t v338 = *a1;
              *(void *)(v338 + 40) = *(void *)(a2 + 24);
              *(void *)(v338 + 48) = FirstNonPHI;
              int v339 = (llvm::ConstantInt *****)*a1;
              uint64_t v27 = 1;
              unint64_t v382 = (8 * *((unsigned int *)a5 + 2)) | 1;
              LODWORD(v383) = 0;
              int v340 = llvm::ConstantInt::get(***v339[1], (llvm::LLVMContext *)v351, v14);
              v341 = (uint64_t *)((uint64_t (*)(llvm::ConstantInt *****, unint64_t *, void *))(*v339)[2])(v339, &v382, v340);
              uint64_t v342 = *a1;
              LODWORD(v372) = v209;
              unsigned int v373 = 1;
              unint64_t v382 = (unint64_t)v341;
              uint64_t v383 = v343;
              LODWORD(v384) = 1;
              sub_1CC7382B0(v342);
              goto LABEL_854;
            }
            v347 = *(llvm::MachineBasicBlock **)(a2 + 24);
            if (*(llvm::MachineBasicBlock **)(v346 + 24) != v347) {
              goto LABEL_869;
            }
          }
        }
      }
LABEL_65:
      uint64_t v27 = 0;
      goto LABEL_66;
    }
    if (v31 != 67) {
      goto LABEL_92;
    }
    uint64_t v67 = *(_DWORD **)(a2 + 32);
    uint64_t v68 = v67[17];
    if ((v68 & 0x80000000) != 0) {
      int v69 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v68 & 0x7FFFFFFF) + 8);
    }
    else {
      int v69 = (uint64_t *)(*(void *)(__n + 272) + 8 * v68);
    }
    uint64_t v70 = *v69;
    if (v70 && ((*(unsigned char *)(v70 + 3) & 1) != 0 || (uint64_t v70 = *(void *)(v70 + 24)) != 0 && (*(unsigned char *)(v70 + 3) & 1) != 0)) {
      uint64_t v71 = *(void *)(v70 + 8);
    }
    else {
      uint64_t v71 = 0;
    }
    if ((v68 & 0x80000000) != 0 && (v68 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432)) {
      int v72 = *(uint64_t **)(*(void *)(__n + 424) + 8 * (v68 & 0x7FFFFFFF));
    }
    else {
      int v72 = 0;
    }
    uint64_t v73 = v67[9];
    int v74 = v67[1];
    unint64_t v382 = (unint64_t)v72;
    if (sub_1CBAB2F34(a1, v71, &v382, &__src, a5, (a6 + 1), 0)) {
      goto LABEL_89;
    }
    uint64_t v75 = (uint64_t *)((v73 & 0x80000000) != 0
                    ? *(void *)(__n + 24) + 16 * (v73 & 0x7FFFFFFF) + 8
                    : *(void *)(__n + 272) + 8 * v73);
    uint64_t v76 = *v75;
    if (v76 && ((*(unsigned char *)(v76 + 3) & 1) != 0 || (uint64_t v76 = *(void *)(v76 + 24)) != 0 && (*(unsigned char *)(v76 + 3) & 1) != 0)) {
      uint64_t v77 = *(void *)(v76 + 8);
    }
    else {
      uint64_t v77 = 0;
    }
    int v78 = (v73 & 0x80000000) != 0 && (v73 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432)
        ? *(uint64_t **)(*(void *)(__n + 424) + 8 * (v73 & 0x7FFFFFFF))
        : 0;
    unint64_t v382 = (unint64_t)v78;
    if (sub_1CBAB2F34(a1, v77, &v382, &__src, &v376, (a6 + 1), 0)) {
      goto LABEL_89;
    }
    uint64_t v80 = *a1;
    *(void *)(v80 + 40) = *(void *)(a2 + 24);
    *(void *)(v80 + 48) = a2;
    if (v381 > 0x40)
    {
      if (!llvm::APInt::isSubsetOfSlowCase((uint64_t **)&__src, (uint64_t **)a5))
      {
        if (!llvm::APInt::isSubsetOfSlowCase((uint64_t **)&__src, (uint64_t **)&v376)) {
          goto LABEL_138;
        }
        goto LABEL_804;
      }
    }
    else if ((__src & ~*a5) != 0)
    {
      if ((__src & ~(unint64_t)v376) != 0)
      {
LABEL_138:
        if (sub_1CBAB2BDC(a1, a2, (uint64_t)&__src, v79)) {
          goto LABEL_89;
        }
        if (*((_DWORD *)a5 + 2) > 0x40u) {
          operator new[]();
        }
        unsigned int v81 = *((_DWORD *)a5 + 6);
        if (v81 >= 0x41) {
          operator new[]();
        }
        unint64_t v82 = (unint64_t)v378 & (unint64_t)*v351 | (unint64_t)v376 & *a5;
        if (*((_DWORD *)a5 + 2) > 0x40u) {
          operator new[]();
        }
        unsigned int v83 = *((_DWORD *)a5 + 6);
        if (v83 >= 0x41) {
          operator new[]();
        }
        unint64_t v84 = (unint64_t)v376 & (unint64_t)*v351 | (unint64_t)v378 & *a5;
        if (*((_DWORD *)a5 + 2) >= 0x41u && *a5) {
          MEMORY[0x1D25D9CB0](*a5, 0x1000C8000313F17);
        }
        *a5 = v82;
        *((_DWORD *)a5 + 2) = v81;
        if (*((_DWORD *)a5 + 6) >= 0x41u && *v351) {
          MEMORY[0x1D25D9CB0](*v351, 0x1000C8000313F17);
        }
        a5[2] = v84;
        *((_DWORD *)a5 + 6) = v83;
        goto LABEL_61;
      }
LABEL_804:
      uint64_t v241 = *a1;
      uint64_t v27 = 1;
      LODWORD(v372) = v74;
      unsigned int v373 = 1;
      LODWORD(v382) = v68;
      goto LABEL_451;
    }
    uint64_t v326 = *a1;
    uint64_t v27 = 1;
    LODWORD(v372) = v74;
    unsigned int v373 = 1;
    LODWORD(v382) = v73;
    LODWORD(v384) = 0;
    (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, void))(*(void *)v326 + 32))(v326, 19, &v372, 1, &v382, 1, 0);
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    goto LABEL_66;
  }
  sub_1CC6DEE8C(a1[3], v21, (uint64_t)&v376);
  if (v377 < v15)
  {
    sub_1CB9F87DC((uint64_t *)&v376, v15, (uint64_t)&v382);
  }
  else if (v377 > v15)
  {
    if (v377 >= 0x41) {
      int v61 = (uint64_t *)v376;
    }
    else {
      int v61 = (uint64_t *)&v376;
    }
    unint64_t v62 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
    unint64_t v63 = v62;
    if (!v15) {
      unint64_t v63 = 0;
    }
    uint64_t v64 = *v61;
    if (v379 >= 0x41) {
      int v65 = v378;
    }
    else {
      int v65 = &v378;
    }
    if (!v15) {
      unint64_t v62 = 0;
    }
    int v66 = (void **)(v62 & *v65);
    LODWORD(v383) = v15;
    unint64_t v382 = v63 & v64;
    LODWORD(v385) = v15;
    v384 = v66;
  }
  else
  {
    LODWORD(v383) = v377;
    if (v377 > 0x40) {
      operator new[]();
    }
    unint64_t v382 = (unint64_t)v376;
    LODWORD(v385) = v379;
    if (v379 > 0x40) {
      operator new[]();
    }
    v384 = (void **)v378;
  }
  if (*((_DWORD *)a5 + 2) >= 0x41u && *a5) {
    MEMORY[0x1D25D9CB0](*a5, 0x1000C8000313F17);
  }
  *a5 = v382;
  *((_DWORD *)a5 + 2) = v383;
  LODWORD(v383) = 0;
  if (*((_DWORD *)a5 + 6) >= 0x41u && *v351)
  {
    MEMORY[0x1D25D9CB0](*v351, 0x1000C8000313F17);
    unsigned int v299 = v383;
    a5[2] = (unint64_t)v384;
    *((_DWORD *)a5 + 6) = v385;
    LODWORD(v385) = 0;
    if (v299 >= 0x41 && v382) {
      MEMORY[0x1D25D9CB0](v382, 0x1000C8000313F17);
    }
  }
  else
  {
    a5[2] = (unint64_t)v384;
    *((_DWORD *)a5 + 6) = v385;
    LODWORD(v385) = 0;
  }
  if (v379 >= 0x41 && v378) {
    MEMORY[0x1D25D9CB0](v378, 0x1000C8000313F17);
  }
  if (v377 >= 0x41 && v376) {
    MEMORY[0x1D25D9CB0](v376, 0x1000C8000313F17);
  }
  uint64_t v27 = 0;
LABEL_68:
  if (v381 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  return v27;
}

uint64_t sub_1CBAB77A4(unsigned int *a1)
{
  uint64_t v1 = a1[2];
  if (v1 > 0x40)
  {
    int v5 = 0;
    unsigned int v10 = a1[2];
    unint64_t v6 = (unint64_t)(v1 + 63) >> 6;
    uint64_t v7 = *(int8x8_t **)a1;
    do
    {
      int8x8_t v8 = *v7++;
      uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
      v9.i16[0] = vaddlv_u8(v9);
      v5 += v9.i32[0];
      --v6;
    }
    while (v6);
    if (v5 != 1) {
      return 0xFFFFFFFFLL;
    }
    int v4 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a1);
    LODWORD(v1) = v10;
    return (v1 + ~v4);
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(*(int8x8_t *)a1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] == 1)
  {
    int v4 = v1 + __clz(*(void *)a1) - 64;
    return (v1 + ~v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1CBAB7848(uint64_t *a1, uint64_t a2)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*a1 + 8);
  uint64_t v5 = *(void *)(v4 + 40);
  uint64_t v6 = (*(uint64_t (**)(void, void))(**(void **)(v4 + 8) + 16))(*(void *)(v4 + 8), *(void *)v4);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 168))(v6);
  uint64_t v8 = v7;
  int v9 = **(unsigned __int16 **)(a2 + 16);
  if ((v9 - 118) <= 8 && ((1 << (v9 - 118)) & 0x103) != 0)
  {
    uint64_t v11 = *(void *)(a2 + 32);
    uint64_t v12 = *(unsigned int *)(v11 + 36);
    if ((v12 & 0x80000000) != 0) {
      uint64_t v13 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v13 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v12);
    }
    uint64_t v14 = *v13;
    if (!v14) {
      return 0;
    }
    if ((*(unsigned char *)(v14 + 3) & 1) == 0)
    {
      uint64_t v14 = *(void *)(v14 + 24);
      if (!v14 || (*(unsigned char *)(v14 + 3) & 1) == 0) {
        return 0;
      }
    }
    uint64_t v15 = *(void *)(v14 + 8);
    if (!v15) {
      return 0;
    }
    int v16 = **(unsigned __int16 **)(v15 + 16);
    if ((v16 & 0xFFFE) != 0x34) {
      return 0;
    }
    int v18 = *(_DWORD *)(v11 + 4);
    if (v18 < 0 && (uint64_t v19 = v18 & 0x7FFFFFFF, v19 < *(_DWORD *)(v5 + 432))) {
      uint64_t v20 = *(void *)(*(void *)(v5 + 424) + 8 * v19);
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v106 = v20;
    uint64_t v21 = *(void *)(v15 + 32);
    int v22 = *(_DWORD *)(v21 + 36);
    if (v22 < 0 && (uint64_t v23 = v22 & 0x7FFFFFFF, v23 < *(_DWORD *)(v5 + 432))) {
      uint64_t v24 = *(void *)(*(void *)(v5 + 424) + 8 * v23);
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v107 = v24;
    int v25 = *(_DWORD *)(v21 + 68);
    if (v25 < 0 && (uint64_t v26 = v25 & 0x7FFFFFFF, v26 < *(_DWORD *)(v5 + 432))) {
      uint64_t v27 = *(void *)(*(void *)(v5 + 424) + 8 * v26);
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v108 = v27;
    LODWORD(v101) = v16;
    unint64_t v102 = &v106;
    uint64_t v103 = 3;
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    if (!sub_1CC72D410(v7, (uint64_t)&v101))
    {
      uint64_t v73 = (void *)*a1;
      int v74 = *(llvm::MachineFunction **)(*a1 + 8);
      uint64_t v75 = *(void *)(v73[2] + 8) + 48 * **(unsigned __int16 **)(v15 + 16);
      uint64_t v76 = (unsigned __int8 *)v73[4];
      uint64_t v101 = (uint64_t)v76;
      if (v76) {
        llvm::MetadataTracking::track((uint64_t)&v101, v76, 2);
      }
      MachineInstr = llvm::MachineFunction::CreateMachineInstr(v74, v75, (unsigned __int8 **)&v101, 0);
      if (v101) {
        llvm::MetadataTracking::untrack((uint64_t)&v101, (unsigned __int8 *)v101);
      }
      uint64_t v77 = (unint64_t *)v73[6];
      uint64_t v78 = *(void *)(v73[5] + 40);
      *((void *)MachineInstr + 3) = v78;
      uint64_t v79 = *(void *)(v78 + 32);
      uint64_t v80 = *((unsigned int *)MachineInstr + 10);
      if (v80)
      {
        uint64_t v93 = *((void *)MachineInstr + 4);
        uint64_t v94 = *(void *)(v79 + 40);
        uint64_t v95 = 32 * v80;
        do
        {
          if (!*(unsigned char *)v93)
          {
            uint64_t v96 = *(unsigned int *)(v93 + 4);
            if ((int)v96 >= 0) {
              unint64_t v97 = (uint64_t *)(*(void *)(v94 + 272) + 8 * v96);
            }
            else {
              unint64_t v97 = (uint64_t *)(*(void *)(v94 + 24) + 16 * (v96 & 0x7FFFFFFF) + 8);
            }
            uint64_t v98 = *v97;
            if (*v97)
            {
              uint64_t v99 = *(void *)(v98 + 16);
              *(void *)(v98 + 16) = v93;
              *(void *)(v93 + 16) = v99;
              if (*(unsigned char *)(v93 + 3))
              {
                *(void *)(v93 + 24) = v98;
              }
              else
              {
                *(void *)(v93 + 24) = 0;
                unint64_t v97 = (uint64_t *)(v99 + 24);
              }
            }
            else
            {
              *(void *)(v93 + 16) = v93;
              *(void *)(v93 + 24) = 0;
            }
            *unint64_t v97 = v93;
          }
          v93 += 32;
          v95 -= 32;
        }
        while (v95);
      }
      uint64_t v81 = *(void *)(v79 + 728);
      if (v81) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v81 + 24))(v81, MachineInstr);
      }
      unint64_t v82 = *v77 & 0xFFFFFFFFFFFFFFF8;
      *(void *)MachineInstr = v82 | *(void *)MachineInstr & 7;
      *((void *)MachineInstr + 1) = v77;
      *(void *)(v82 + 8) = MachineInstr;
      *uint64_t v77 = *v77 & 7 | (unint64_t)MachineInstr;
      uint64_t v83 = v73[7];
      if (v83) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v83 + 24))(v83, MachineInstr);
      }
      llvm::MachineInstr::addOperand(MachineInstr, v74, *(const llvm::MachineOperand **)(a2 + 32));
      llvm::MachineInstr::addOperand(MachineInstr, v74, (const llvm::MachineOperand *)(*(void *)(v15 + 32) + 32));
      llvm::MachineInstr::addOperand(MachineInstr, v74, (const llvm::MachineOperand *)(*(void *)(v15 + 32) + 64));
      llvm::MachineInstr::addOperand(MachineInstr, v74, (const llvm::MachineOperand *)(*(void *)(v15 + 32) + 96));
      __int16 v54 = *(_WORD *)(v15 + 44);
      goto LABEL_49;
    }
    int v9 = **(unsigned __int16 **)(a2 + 16);
  }
  if ((v9 & 0xFFFE) != 0x34) {
    return 0;
  }
  unsigned int v28 = *(_DWORD **)(a2 + 32);
  uint64_t v29 = v28[9];
  if ((v29 & 0x80000000) != 0) {
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v29);
  }
  uint64_t v31 = *v30;
  if (v31 && ((*(unsigned char *)(v31 + 3) & 1) != 0 || (uint64_t v31 = *(void *)(v31 + 24)) != 0 && (*(unsigned char *)(v31 + 3) & 1) != 0))
  {
    uint64_t v32 = *(void *)(v31 + 8);
    uint64_t v33 = (const llvm::MachineOperand *)(v28 + 8);
    uint64_t v34 = v28 + 16;
    if (v32 && (**(unsigned __int16 **)(v32 + 16) | 8) == 0x7E)
    {
      int v84 = v28[1];
      if (v84 < 0 && (uint64_t v85 = v84 & 0x7FFFFFFF, v85 < *(_DWORD *)(v5 + 432))) {
        uint64_t v86 = *(void *)(*(void *)(v5 + 424) + 8 * v85);
      }
      else {
        uint64_t v86 = 0;
      }
      uint64_t v106 = v86;
      int v87 = *(_DWORD *)(*(void *)(v32 + 32) + 36);
      if (v87 < 0 && (uint64_t v88 = v87 & 0x7FFFFFFF, v88 < *(_DWORD *)(v5 + 432))) {
        uint64_t v89 = *(void *)(*(void *)(v5 + 424) + 8 * v88);
      }
      else {
        uint64_t v89 = 0;
      }
      uint64_t v107 = v89;
      int v90 = v28[17];
      if (v90 < 0 && (uint64_t v91 = v90 & 0x7FFFFFFF, v91 < *(_DWORD *)(v5 + 432))) {
        uint64_t v92 = *(void *)(*(void *)(v5 + 424) + 8 * v91);
      }
      else {
        uint64_t v92 = 0;
      }
      uint64_t v108 = v92;
      LODWORD(v101) = v9;
      unint64_t v102 = &v106;
      uint64_t v103 = 3;
      uint64_t v104 = 0;
      uint64_t v105 = 0;
      if (!sub_1CC72D410(v8, (uint64_t)&v101))
      {
        int v35 = (const llvm::MachineOperand *)(*(void *)(v32 + 32) + 32);
        goto LABEL_31;
      }
    }
  }
  else
  {
    uint64_t v33 = (const llvm::MachineOperand *)(v28 + 8);
    uint64_t v34 = v28 + 16;
  }
  int v35 = v33;
LABEL_31:
  int v36 = v28[17];
  if ((v36 & 0x80000000) == 0 || (uint64_t v37 = v36 & 0x7FFFFFFF, v37 >= *(_DWORD *)(v5 + 432)))
  {
    unint64_t v100 = 0;
    goto LABEL_51;
  }
  unint64_t v100 = *(void *)(*(void *)(v5 + 424) + 8 * v37);
  uint64_t v38 = v34;
  if (v100)
  {
    unint64_t v40 = sub_1CB8F1DC4(&v100);
    if (v39 == 1) {
    uint64_t v38 = v34;
    }
    if (v40 >= 0x11)
    {
      sub_1CC73C210(v28[17], v5, (uint64_t)&v101);
      if ((_BYTE)v103)
      {
        if (v102 >= 0x41)
        {
          if (v101) {
            MEMORY[0x1D25D9CB0](v101, 0x1000C8000313F17);
          }
        }
        else
        {
          unint64_t v55 = v101 << -(uint64_t)v102 >> -(uint64_t)v102;
          if (!(v55 >> 16))
          {
            uint64_t v56 = *(void *)(a2 + 32);
            int v57 = *(_DWORD *)(v56 + 4);
            if (v57 < 0 && (uint64_t v58 = v57 & 0x7FFFFFFF, v58 < *(_DWORD *)(v5 + 432))) {
              uint64_t v59 = *(void *)(*(void *)(v5 + 424) + 8 * v58);
            }
            else {
              uint64_t v59 = 0;
            }
            int v60 = **(unsigned __int16 **)(a2 + 16);
            uint64_t v106 = v59;
            int v61 = *(_DWORD *)(v56 + 36);
            if (v61 < 0 && (uint64_t v62 = v61 & 0x7FFFFFFF, v62 < *(_DWORD *)(v5 + 432))) {
              uint64_t v63 = *(void *)(*(void *)(v5 + 424) + 8 * v62);
            }
            else {
              uint64_t v63 = 0;
            }
            uint64_t v107 = v63;
            uint64_t v108 = 129;
            LODWORD(v101) = v60;
            unint64_t v102 = &v106;
            uint64_t v103 = 3;
            uint64_t v104 = 0;
            uint64_t v105 = 0;
            uint64_t v38 = v34;
            if (!sub_1CC72D410(v8, (uint64_t)&v101))
            {
              uint64_t v64 = *a1;
              uint64_t v101 = 129;
              LODWORD(v102) = 0;
              sub_1CC7362A8(v64, (unint64_t *)&v101, v55);
              uint64_t v38 = *(_DWORD **)(v65 + 32);
            }
            goto LABEL_37;
          }
        }
      }
LABEL_51:
      uint64_t v38 = v34;
    }
  }
LABEL_37:
  if (v33 == v35 && v34 == v38) {
    return 0;
  }
  uint64_t v41 = (void *)*a1;
  unint64_t v42 = *(llvm::MachineFunction **)(*a1 + 8);
  uint64_t v43 = *(void *)(v41[2] + 8) + 48 * **(unsigned __int16 **)(a2 + 16);
  unint64_t v44 = (unsigned __int8 *)v41[4];
  uint64_t v101 = (uint64_t)v44;
  if (v44) {
    llvm::MetadataTracking::track((uint64_t)&v101, v44, 2);
  }
  MachineInstr = llvm::MachineFunction::CreateMachineInstr(v42, v43, (unsigned __int8 **)&v101, 0);
  if (v101) {
    llvm::MetadataTracking::untrack((uint64_t)&v101, (unsigned __int8 *)v101);
  }
  uint64_t v46 = (unint64_t *)v41[6];
  uint64_t v47 = *(void *)(v41[5] + 40);
  *((void *)MachineInstr + 3) = v47;
  uint64_t v48 = *(void *)(v47 + 32);
  uint64_t v49 = *((unsigned int *)MachineInstr + 10);
  if (v49)
  {
    uint64_t v66 = *((void *)MachineInstr + 4);
    uint64_t v67 = *(void *)(v48 + 40);
    uint64_t v68 = 32 * v49;
    do
    {
      if (!*(unsigned char *)v66)
      {
        uint64_t v69 = *(unsigned int *)(v66 + 4);
        if ((int)v69 >= 0) {
          uint64_t v70 = (uint64_t *)(*(void *)(v67 + 272) + 8 * v69);
        }
        else {
          uint64_t v70 = (uint64_t *)(*(void *)(v67 + 24) + 16 * (v69 & 0x7FFFFFFF) + 8);
        }
        uint64_t v71 = *v70;
        if (*v70)
        {
          uint64_t v72 = *(void *)(v71 + 16);
          *(void *)(v71 + 16) = v66;
          *(void *)(v66 + 16) = v72;
          if (*(unsigned char *)(v66 + 3))
          {
            *(void *)(v66 + 24) = v71;
          }
          else
          {
            *(void *)(v66 + 24) = 0;
            uint64_t v70 = (uint64_t *)(v72 + 24);
          }
        }
        else
        {
          *(void *)(v66 + 16) = v66;
          *(void *)(v66 + 24) = 0;
        }
        *uint64_t v70 = v66;
      }
      v66 += 32;
      v68 -= 32;
    }
    while (v68);
  }
  uint64_t v50 = *(void *)(v48 + 728);
  if (v50) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v50 + 24))(v50, MachineInstr);
  }
  unint64_t v51 = *v46 & 0xFFFFFFFFFFFFFFF8;
  *(void *)MachineInstr = v51 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = v46;
  *(void *)(v51 + 8) = MachineInstr;
  unint64_t *v46 = *v46 & 7 | (unint64_t)MachineInstr;
  uint64_t v52 = v41[7];
  if (v52) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v52 + 24))(v52, MachineInstr);
  }
  llvm::MachineInstr::addOperand(MachineInstr, v42, *(const llvm::MachineOperand **)(a2 + 32));
  llvm::MachineInstr::addOperand(MachineInstr, v42, v35);
  int v53 = v38[1];
  unint64_t v102 = 0;
  uint64_t v103 = 0;
  LODWORD(v101) = 0;
  HIDWORD(v101) = v53;
  uint64_t v104 = 0;
  llvm::MachineInstr::addOperand(MachineInstr, v42, (const llvm::MachineOperand *)&v101);
  llvm::MachineInstr::addOperand(MachineInstr, v42, (const llvm::MachineOperand *)(*(void *)(a2 + 32) + 96));
  __int16 v54 = *(_WORD *)(a2 + 44);
LABEL_49:
  *((_WORD *)MachineInstr + 22) = *((_WORD *)MachineInstr + 22) & 0xC | v54 & 0xFFF3;
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  return 1;
}

uint64_t sub_1CBAB8124(uint64_t *a1, uint64_t a2)
{
  v124[2] = *MEMORY[0x1E4F143B8];
  if (**(_WORD **)(a2 + 16) != 65) {
    return 0;
  }
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 32) || *(unsigned char *)(v3 + 64)) {
    return 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*a1 + 8) + 40);
  uint64_t v8 = *(unsigned int *)(v3 + 36);
  int v9 = (uint64_t *)((v8 & 0x80000000) != 0
                 ? *(void *)(v7 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8
                 : *(void *)(v7 + 272) + 8 * v8);
  uint64_t v10 = *v9;
  if (v10 && ((*(unsigned char *)(v10 + 3) & 1) != 0 || (uint64_t v10 = *(void *)(v10 + 24)) != 0 && (*(unsigned char *)(v10 + 3) & 1) != 0)) {
    uint64_t v11 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(unsigned int *)(v3 + 68);
  uint64_t v13 = (uint64_t *)((v12 & 0x80000000) != 0
                  ? *(void *)(v7 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8
                  : *(void *)(v7 + 272) + 8 * v12);
  uint64_t v14 = *v13;
  if (!v14) {
    return 0;
  }
  if ((*(unsigned char *)(v14 + 3) & 1) == 0)
  {
    uint64_t v14 = *(void *)(v14 + 24);
    if (!v14 || (*(unsigned char *)(v14 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v4 = 0;
  if (!v11) {
    return v4;
  }
  uint64_t v15 = *(void *)(v14 + 8);
  if (!v15) {
    return v4;
  }
  if (**(unsigned __int16 **)(v15 + 16) - 127 <= 1)
  {
    int v16 = **(unsigned __int16 **)(v11 + 16);
    BOOL v17 = v16 == 120;
    if (v16 == 120) {
      uint64_t v18 = v11;
    }
    else {
      uint64_t v18 = v15;
    }
    if (v17) {
      uint64_t v11 = v15;
    }
    uint64_t v15 = v18;
  }
  if (**(unsigned __int16 **)(v11 + 16) - 127 > 1 || **(_WORD **)(v15 + 16) != 120) {
    return 0;
  }
  int v19 = *(_DWORD *)(v3 + 4);
  if (v19 < 0 && (uint64_t v20 = v19 & 0x7FFFFFFF, v20 < *(_DWORD *)(v7 + 432))) {
    unint64_t v21 = *(void *)(*(void *)(v7 + 424) + 8 * v20);
  }
  else {
    unint64_t v21 = 0;
  }
  unint64_t v117 = v21;
  uint64_t v122 = v124;
  long long v123 = xmmword_1CDB15990;
  unsigned int v23 = sub_1CB8F1DC4(&v117);
  if (v22 == 1) {
  sub_1CC73C210(*(_DWORD *)(*(void *)(v15 + 32) + 4), v7, (uint64_t)&v118);
  }
  if ((_BYTE)v120)
  {
    if (v119 > 0x40)
    {
      if (v118) {
        MEMORY[0x1D25D9CB0](v118, 0x1000C8000313F17);
      }
      unint64_t v25 = 0;
      uint64_t v26 = 0;
    }
    else
    {
      unint64_t v25 = ((uint64_t)((void)v118 << -(char)v119) >> -(char)v119) & 0xFFFFFFFFFFFFFF00;
      uint64_t v26 = ((uint64_t)((void)v118 << -(char)v119) >> -(char)v119);
    }
    unint64_t v24 = v26 | v25;
  }
  else
  {
    unint64_t v24 = 0;
  }
  unsigned int v116 = v23;
  if (v23 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src);
  }
  unint64_t v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v23;
  if (!v23) {
    unint64_t v27 = 0;
  }
  unint64_t __src = (void *)(v27 & v24);
  llvm::APInt::toString((unsigned int *)&__src, &v122, 0x10u, 0, 0);
  unsigned __int32 v28 = 0;
  if (**(_WORD **)(v11 + 16) != 127) {
    goto LABEL_59;
  }
  uint64_t v29 = *(unsigned int *)(*(void *)(v11 + 32) + 68);
  if ((v29 & 0x80000000) != 0) {
    uint64_t v30 = (uint64_t *)(*(void *)(v7 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v30 = (uint64_t *)(*(void *)(v7 + 272) + 8 * v29);
  }
  uint64_t v31 = *v30;
  if (!v31) {
    goto LABEL_176;
  }
  if ((*(unsigned char *)(v31 + 3) & 1) == 0)
  {
    uint64_t v31 = *(void *)(v31 + 24);
    if (!v31 || (*(unsigned char *)(v31 + 3) & 1) == 0) {
      goto LABEL_176;
    }
  }
  uint64_t v32 = *(void *)(v31 + 8);
  if (!v32) {
    goto LABEL_176;
  }
  sub_1CC6DEE8C(a1[3], (const char *)*(unsigned int *)(*(void *)(v32 + 32) + 4), (uint64_t)&v118);
  uint64_t v33 = v118;
  unsigned int v34 = v119;
  int v35 = v120;
  unsigned int v36 = v121;
  if (v119 > 0x40)
  {
    __int32 v38 = 0;
    unint64_t v92 = ((unint64_t)v119 + 63) >> 6;
    uint64_t v93 = v118;
    do
    {
      int8x8_t v94 = (int8x8_t)*v93++;
      uint8x8_t v95 = (uint8x8_t)vcnt_s8(v94);
      v95.i16[0] = vaddlv_u8(v95);
      v38 += v95.i32[0];
      --v92;
    }
    while (v92);
  }
  else
  {
    uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v118);
    v37.i16[0] = vaddlv_u8(v37);
    __int32 v38 = v37.i32[0];
  }
  if (v121 < 0x41)
  {
    uint8x8_t v39 = (uint8x8_t)vcnt_s8((int8x8_t)v120);
    v39.i16[0] = vaddlv_u8(v39);
    unsigned __int32 v28 = v120;
    if (v38 + v39.i32[0] != v119)
    {
      unsigned __int32 v28 = 0;
      int v42 = 0;
      goto LABEL_57;
    }
    goto LABEL_50;
  }
  unint64_t v96 = 0;
  int v97 = 0;
  do
  {
    uint8x8_t v98 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v120[v96 / 4]);
    v98.i16[0] = vaddlv_u8(v98);
    v97 += v98.i32[0];
    v96 += 8;
  }
  while (((((unint64_t)v121 + 63) >> 3) & 0x3FFFFFF8) != v96);
  if (v97 + v38 == v119)
  {
    unsigned __int32 v28 = *v120;
LABEL_50:
    unsigned int v40 = v116;
    LODWORD(v119) = v116;
    if (v116 > 0x40) {
      operator new[]();
    }
    if (v116 == v28)
    {
      uint64_t v110 = v118;
      unint64_t v41 = 0;
      if (v28 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      uint64_t v33 = v110;
    }
    else
    {
      unint64_t v41 = (unint64_t)__src >> v28;
    }
    unint64_t __src = (void *)v41;
    unsigned int v116 = v40;
    int v42 = 1;
    goto LABEL_54;
  }
  int v42 = 0;
  unsigned __int32 v28 = 0;
LABEL_54:
  if (v36 >= 0x41)
  {
    uint64_t v99 = v33;
    if (v35) {
      MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
    }
    uint64_t v33 = v99;
  }
LABEL_57:
  if (v34 >= 0x41 && v33)
  {
    MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
    if ((v42 & 1) == 0) {
      goto LABEL_176;
    }
LABEL_59:
    sub_1CC6DEE8C(a1[3], (const char *)*(unsigned int *)(*(void *)(v11 + 32) + 4), (uint64_t)&v118);
    uint64_t v43 = v118;
    int v44 = v119;
    uint64_t v108 = v120;
    unsigned int v109 = v121;
    if (v119 > 0x40) {
      operator new[]();
    }
    if (v119 == v28) {
      unint64_t v45 = 0;
    }
    else {
      unint64_t v45 = (unint64_t)v118 >> v28;
    }
    unsigned int v46 = __clz(__rbit64(~v45));
    if (v46)
    {
      if (v46 > 0x40)
      {
        llvm::APInt::setBitsSlowCase(&__src, 0, v46);
      }
      else
      {
        unint64_t v47 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v46;
        if (v116 > 0x40) {
          *(void *)__src |= v47;
        }
        else {
          unint64_t __src = (void *)((unint64_t)__src | v47);
        }
      }
    }
    uint64_t v48 = v116;
    if (v116 > 0x40)
    {
      int v91 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__src);
      if (v91)
      {
        int v100 = 0;
        int64_t v101 = (unint64_t)(v48 + 63) >> 6;
        do
        {
          BOOL v62 = v101-- < 1;
          if (v62) {
            break;
          }
          unint64_t v102 = *((void *)__src + v101);
          v100 += __clz(v102);
        }
        while (!v102);
        uint64_t v4 = 0;
        int v103 = v48 | 0xFFFFFFC0;
        if ((v48 & 0x3F) == 0) {
          int v103 = 0;
        }
        if (v91 + v100 + v103 == v48)
        {
          LODWORD(v119) = v48;
          operator new[]();
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      goto LABEL_121;
    }
    uint64_t v4 = 0;
    if (!__src || (((unint64_t)__src + 1) & (unint64_t)__src) != 0)
    {
LABEL_121:
      if (v109 >= 0x41 && v108) {
        MEMORY[0x1D25D9CB0](v108, 0x1000C8000313F17);
      }
      goto LABEL_177;
    }
    LODWORD(v119) = v116;
    uint64_t v49 = (void)__src << v28;
    if (v116 == v28) {
      uint64_t v49 = 0;
    }
    if (v116) {
      unint64_t v50 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v116;
    }
    else {
      unint64_t v50 = 0;
    }
    unsigned int v118 = (void **)(v50 & v49);
    llvm::APInt::toString((unsigned int *)&v118, &v122, 0x10u, 0, 0);
    if (v119 >= 0x41 && v118) {
      MEMORY[0x1D25D9CB0](v118, 0x1000C8000313F17);
    }
    int v114 = v44;
    if (v44 == v28) {
      uint64_t v51 = -1;
    }
    else {
      uint64_t v51 = ~((unint64_t)v43 >> v28);
    }
    unint64_t v52 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v44;
    if (!v44) {
      unint64_t v52 = 0;
    }
    unint64_t v53 = v52 & v51;
    unint64_t v113 = v52 & v51;
    int v114 = 0;
    unsigned int v54 = v116;
    if (v116 > 0x40)
    {
      unint64_t v55 = __src;
      unint64_t v56 = ((unint64_t)v116 + 63) >> 6;
      int v57 = (uint64_t *)v53;
      do
      {
        uint64_t v58 = *v57++;
        *v55++ &= v58;
        --v56;
      }
      while (v56);
    }
    else
    {
      unint64_t __src = (void *)((unint64_t)__src & v53);
    }
    if (v54 > 0x40)
    {
      int v60 = 0;
      int64_t v61 = ((unint64_t)v54 + 63) >> 6;
      do
      {
        BOOL v62 = v61-- < 1;
        if (v62) {
          break;
        }
        unint64_t v63 = *((void *)__src + v61);
        v60 += __clz(v63);
      }
      while (!v63);
      unsigned int v64 = v54 | 0xFFFFFFC0;
      if ((v54 & 0x3F) == 0) {
        unsigned int v64 = 0;
      }
      if (v54 != v60 + v64)
      {
        unsigned int v112 = v54;
        llvm::APInt::initSlowCase((llvm::APInt *)&v111);
      }
    }
    else
    {
      int v59 = v54 + __clz((unint64_t)__src) - 64;
      if (v54 != v59)
      {
        unsigned int v112 = v54;
        uint64_t v111 = 0;
        uint64_t v66 = (_DWORD *)(v54 - v59);
        if (v66 > 0x40)
        {
          llvm::APInt::setBitsSlowCase(&v111, 0, v66);
          unsigned int v67 = v112;
          LODWORD(v119) = v112;
          if (v112 > 0x40) {
            operator new[]();
          }
        }
        else
        {
          unsigned int v67 = v112;
          uint64_t v111 = (void *)((unint64_t)v111 | (0xFFFFFFFFFFFFFFFFLL >> -(char)v66));
          LODWORD(v119) = v112;
        }
        uint64_t v68 = v111;
        uint64_t v69 = (void)v111 << v28;
        if (v67 == v28) {
          uint64_t v69 = 0;
        }
        if (v67) {
          unint64_t v70 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v67;
        }
        else {
          unint64_t v70 = 0;
        }
        unsigned int v118 = (void **)(v70 & v69);
        if (v116 >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
        unint64_t __src = v118;
        unsigned int v116 = v119;
        LODWORD(v119) = 0;
        if (v112 >= 0x41 && v68) {
          MEMORY[0x1D25D9CB0](v68, 0x1000C8000313F17);
        }
        llvm::APInt::toString((unsigned int *)&__src, &v122, 0x10u, 0, 0);
        uint64_t v71 = (void *)*a1;
        uint64_t v72 = *(llvm::MachineFunction **)(*a1 + 8);
        uint64_t v73 = 2544;
        if (**(_WORD **)(v11 + 16) == 128) {
          uint64_t v73 = 2496;
        }
        uint64_t v74 = *(void *)(v71[2] + 8) + v73;
        uint64_t v75 = (void *)v71[4];
        uint64_t v111 = v75;
        if (v75) {
          llvm::MetadataTracking::track((uint64_t)&v111, (unsigned __int8 *)v75, 2);
        }
        MachineInstr = llvm::MachineFunction::CreateMachineInstr(v72, v74, (unsigned __int8 **)&v111, 0);
        if (!v111) {
          goto LABEL_114;
        }
        int v104 = *(unsigned __int8 *)v111;
        if ((v104 - 4) > 0x1E)
        {
          if ((v104 - 3) >= 0xFFFFFFFE) {
            uint64_t v107 = v111;
          }
          else {
            uint64_t v107 = 0;
          }
          if ((v104 - 3) < 0xFFFFFFFE)
          {
            if (v104 == 3) {
              *((void *)v111 + 1) = 0;
            }
            goto LABEL_114;
          }
          unint64_t v106 = (unint64_t)v107 + 8;
        }
        else
        {
          if ((*((unsigned char *)v111 + 1) & 0x7F) != 2 && !*((_DWORD *)v111 + 3)) {
            goto LABEL_114;
          }
          uint64_t v105 = *((void *)v111 + 2);
          if ((v105 & 4) == 0) {
            goto LABEL_114;
          }
          unint64_t v106 = v105 & 0xFFFFFFFFFFFFFFF8;
          if (!v106) {
            goto LABEL_114;
          }
        }
        unsigned int v118 = &v111;
        sub_1CC5FA668(v106 + 16, &v118);
LABEL_114:
        uint64_t v77 = (unint64_t *)v71[6];
        uint64_t v78 = *(void *)(v71[5] + 40);
        *((void *)MachineInstr + 3) = v78;
        uint64_t v79 = *(void *)(v78 + 32);
        uint64_t v80 = *((unsigned int *)MachineInstr + 10);
        if (v80)
        {
          uint64_t v84 = *((void *)MachineInstr + 4);
          uint64_t v85 = *(void *)(v79 + 40);
          uint64_t v86 = 32 * v80;
          do
          {
            if (!*(unsigned char *)v84)
            {
              uint64_t v87 = *(unsigned int *)(v84 + 4);
              if ((int)v87 >= 0) {
                uint64_t v88 = (uint64_t *)(*(void *)(v85 + 272) + 8 * v87);
              }
              else {
                uint64_t v88 = (uint64_t *)(*(void *)(v85 + 24) + 16 * (v87 & 0x7FFFFFFF) + 8);
              }
              uint64_t v89 = *v88;
              if (*v88)
              {
                uint64_t v90 = *(void *)(v89 + 16);
                *(void *)(v89 + 16) = v84;
                *(void *)(v84 + 16) = v90;
                if (*(unsigned char *)(v84 + 3))
                {
                  *(void *)(v84 + 24) = v89;
                }
                else
                {
                  *(void *)(v84 + 24) = 0;
                  uint64_t v88 = (uint64_t *)(v90 + 24);
                }
              }
              else
              {
                *(void *)(v84 + 16) = v84;
                *(void *)(v84 + 24) = 0;
              }
              *uint64_t v88 = v84;
            }
            v84 += 32;
            v86 -= 32;
          }
          while (v86);
        }
        uint64_t v81 = *(void *)(v79 + 728);
        if (v81) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v81 + 24))(v81, MachineInstr);
        }
        unint64_t v82 = *v77 & 0xFFFFFFFFFFFFFFF8;
        *(void *)MachineInstr = v82 | *(void *)MachineInstr & 7;
        *((void *)MachineInstr + 1) = v77;
        *(void *)(v82 + 8) = MachineInstr;
        *uint64_t v77 = *v77 & 7 | (unint64_t)MachineInstr;
        uint64_t v83 = v71[7];
        if (v83) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v83 + 24))(v83, MachineInstr);
        }
        llvm::MachineInstr::addOperand(MachineInstr, v72, *(const llvm::MachineOperand **)(a2 + 32));
        llvm::MachineInstr::addOperand(MachineInstr, v72, (const llvm::MachineOperand *)(*(void *)(v11 + 32) + 32));
        llvm::MachineInstr::addOperand(MachineInstr, v72, (const llvm::MachineOperand *)(*(void *)(v11 + 32) + 64));
        LODWORD(v118) = 1;
        uint64_t v119 = 0;
        unint64_t v120 = v66;
        llvm::MachineInstr::addOperand(MachineInstr, v72, (const llvm::MachineOperand *)&v118);
        *((_WORD *)MachineInstr + 22) = *((_WORD *)MachineInstr + 22) & 0xC | *(_WORD *)(v11 + 44) & 0xFFF3;
        goto LABEL_120;
      }
    }
    uint64_t v65 = *a1;
    LODWORD(v118) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
    LODWORD(v119) = 1;
    sub_1CC7362A8(v65, (unint64_t *)&v118, 0);
LABEL_120:
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    uint64_t v4 = 1;
    goto LABEL_121;
  }
  if (v42) {
    goto LABEL_59;
  }
LABEL_176:
  uint64_t v4 = 0;
LABEL_177:
  if (v116 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  if (v122 != v124) {
    free(v122);
  }
  return v4;
}

void *sub_1CBAB8F38(void *this, unsigned int a2, unsigned int a3)
{
  if (a2 != a3)
  {
    if (a2 > 0x3F || a3 > 0x40)
    {
      return llvm::APInt::setBitsSlowCase(this, a2, a3);
    }
    else
    {
      unint64_t v3 = 0xFFFFFFFFFFFFFFFFLL >> (a2 - a3) << a2;
      if (*((_DWORD *)this + 2) > 0x40u) {
        *(void *)*this |= v3;
      }
      else {
        *this |= v3;
      }
    }
  }
  return this;
}

uint64_t sub_1CBAB8F90(uint64_t *a1, llvm::MachineInstr *this)
{
  uint64_t v1847 = *MEMORY[0x1E4F143B8];
  int v4 = **((unsigned __int16 **)this + 2);
  BOOL v5 = (v4 - 45) > 0x16 || ((1 << (v4 - 45)) & 0x73C007) == 0;
  if (!v5 || (v4 - 127) < 3)
  {
    sub_1CC73DA2C(v4, *(_DWORD *)(*((void *)this + 4) + 36), *(_DWORD *)(*((void *)this + 4) + 68), *(void *)(*(void *)(*a1 + 8) + 40), (uint64_t)__s1);
    if ((_BYTE)v1829)
    {
      uint64_t v1392 = *a1;
      *(void *)(v1392 + 40) = *((void *)this + 3);
      *(void *)(v1392 + 48) = this;
      uint64_t v1393 = *a1;
      LODWORD(v1839) = *(_DWORD *)(*((void *)this + 4) + 4);
      LODWORD(v1840) = 1;
      if (LODWORD(__s1[1]) > 0x40) {
        unint64_t v1394 = *(void *)__s1[0];
      }
      else {
        unint64_t v1394 = (uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1]);
      }
      sub_1CC7362A8(v1393, &v1839, v1394);
      llvm::MachineInstr::eraseFromParent(this);
      if (!(_BYTE)v1829) {
        return 1;
      }
      if (LODWORD(__s1[1]) < 0x41) {
        return 1;
      }
      v724 = __s1[0];
      if (!__s1[0]) {
        return 1;
      }
LABEL_1038:
      MEMORY[0x1D25D9CB0](v724, 0x1000C8000313F17);
      return 1;
    }
    int v4 = **((unsigned __int16 **)this + 2);
  }
  if ((v4 - 45) <= 0x16 && ((1 << (v4 - 45)) & 0x700005) != 0)
  {
    unsigned int v93 = *(_DWORD *)(*((void *)this + 4) + 36);
    sub_1CC73C5E8(v93, *(void *)(*(void *)(*a1 + 8) + 40), (uint64_t)__s1);
    if ((_BYTE)v1829)
    {
      if (LODWORD(__s1[1]) < 0x41)
      {
        unsigned int v288 = *(_DWORD *)(*((void *)this + 4) + 68);
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)a1[2] + 32))(a1[2], this);
        llvm::MachineOperand::setReg(*((void *)this + 4) + 32, v288);
        uint64_t v289 = *((void *)this + 4) + 64;
        unsigned int v290 = v93;
LABEL_367:
        llvm::MachineOperand::setReg(v289, v290);
LABEL_368:
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)a1[2] + 40))(a1[2], this);
        return 1;
      }
      if (__s1[0]) {
        MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
      }
    }
    int v4 = **((unsigned __int16 **)this + 2);
  }
  if (v4 > 163)
  {
    if (v4 > 204)
    {
      if (v4 > 271)
      {
        if ((v4 - 272) < 0x10)
        {
          int v114 = (llvm::IntegerType ******)a1;
          uint64_t v115 = this;
          unsigned int v116 = 2;
        }
        else
        {
          if (v4 == 313)
          {
            uint64_t v1139 = *((void *)this + 4);
            int v1140 = *(unsigned __int8 *)(v1139 + 80);
            if (!*(unsigned char *)(v1139 + 80)) {
              goto LABEL_1713;
            }
            uint64_t v1141 = *a1;
            uint64_t v1142 = *(void *)(*(void *)(*a1 + 8) + 40);
            uint64_t v1143 = *(unsigned int *)(v1139 + 36);
            if ((v1143 & 0x80000000) != 0) {
              v1144 = (uint64_t *)(*(void *)(v1142 + 24) + 16 * (v1143 & 0x7FFFFFFF) + 8);
            }
            else {
              v1144 = (uint64_t *)(*(void *)(v1142 + 272) + 8 * v1143);
            }
            uint64_t v1145 = *v1144;
            if ((*(unsigned char *)(v1145 + 3) & 1) == 0) {
              uint64_t v1145 = *(void *)(v1145 + 24);
            }
            uint64_t v1146 = *(void *)(v1145 + 8);
            *(void *)(v1141 + 40) = *((void *)this + 3);
            *(void *)(v1141 + 48) = this;
            int v1147 = **(unsigned __int16 **)(v1146 + 16);
            uint64_t v1148 = v1147 == 124 ? 2 : v1147 == 126;
            if (v1148 && (v1147 != 126 ? (BOOL v1149 = v1148 == v1140) : (BOOL v1149 = 1), v1149))
            {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)a1[2] + 32))(a1[2], this);
              llvm::MachineOperand::setReg(*((void *)this + 4) + 32, *(_DWORD *)(*(void *)(v1146 + 32) + 36));
              if (v1148 != v1140) {
                *(void *)(*((void *)this + 4) + 80) = v1148;
              }
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)a1[2] + 40))(a1[2], this);
              char v1150 = 1;
            }
            else
            {
LABEL_1713:
              char v1150 = 0;
            }
            uint64_t v1174 = *((void *)this + 4);
            int v1175 = *(unsigned __int8 *)(v1174 + 144);
            if (!*(unsigned char *)(v1174 + 144)) {
              goto LABEL_1730;
            }
            uint64_t v1176 = *a1;
            uint64_t v1177 = *(void *)(*(void *)(*a1 + 8) + 40);
            uint64_t v1178 = *(unsigned int *)(v1174 + 100);
            if ((v1178 & 0x80000000) != 0) {
              v1179 = (uint64_t *)(*(void *)(v1177 + 24) + 16 * (v1178 & 0x7FFFFFFF) + 8);
            }
            else {
              v1179 = (uint64_t *)(*(void *)(v1177 + 272) + 8 * v1178);
            }
            uint64_t v1180 = *v1179;
            if ((*(unsigned char *)(v1180 + 3) & 1) == 0) {
              uint64_t v1180 = *(void *)(v1180 + 24);
            }
            uint64_t v1181 = *(void *)(v1180 + 8);
            *(void *)(v1176 + 40) = *((void *)this + 3);
            *(void *)(v1176 + 48) = this;
            int v1182 = **(unsigned __int16 **)(v1181 + 16);
            uint64_t v1183 = v1182 == 124 ? 2 : v1182 == 126;
            if (!v1183 || (v1182 != 126 ? (BOOL v1184 = v1183 == v1175) : (BOOL v1184 = 1), !v1184))
            {
LABEL_1730:
              if (v1150) {
                return 1;
              }
              goto LABEL_840;
            }
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)a1[2] + 32))(a1[2], this);
            llvm::MachineOperand::setReg(*((void *)this + 4) + 96, *(_DWORD *)(*(void *)(v1181 + 32) + 36));
            if (v1183 != v1175) {
              *(void *)(*((void *)this + 4) + 144) = v1183;
            }
            goto LABEL_368;
          }
          if (v4 != 317) {
            goto LABEL_840;
          }
          int v114 = (llvm::IntegerType ******)a1;
          uint64_t v115 = this;
          unsigned int v116 = 1;
        }
        if (sub_1CD2C23BC(v114, (uint64_t)v115, v116)) {
          return 1;
        }
        goto LABEL_840;
      }
      if (v4 != 205)
      {
        if (v4 == 217)
        {
          uint64_t v117 = *a1;
          *(void *)(v117 + 40) = *((void *)this + 3);
          *(void *)(v117 + 48) = this;
          uint64_t v118 = *((void *)this + 4);
          int v119 = *(_DWORD *)(v118 + 4);
          if (v119 < 0)
          {
            uint64_t v120 = *(void *)(*a1 + 8);
            uint64_t v121 = *(void *)(v120 + 40);
            if ((v119 & 0x7FFFFFFFu) < *(_DWORD *)(v121 + 432)
              && *(void *)(*(void *)(v121 + 424) + 8 * (v119 & 0x7FFFFFFF)) == 257)
            {
              int v122 = *(_DWORD *)(v118 + 36);
              uint64_t v123 = *(void *)(v121 + 24);
              uint64_t v124 = *(void *)(v121 + 272);
              int v125 = 217;
LABEL_1613:
              sub_1CBAB1D20((uint64_t)__s1, v125, 257, v122, v123, v124);
              if ((_BYTE)v1830)
              {
                v1104 = ***(llvm::ConstantFP ****)v120;
                uint64_t v1105 = *a1;
                LODWORD(v1839) = v119;
                LODWORD(v1840) = 1;
                v1106 = llvm::ConstantFP::get(v1104, (llvm::LLVMContext *)__s1, v1103);
                (*(void (**)(uint64_t, unint64_t *, const llvm::detail::DoubleAPFloat *))(*(void *)v1105 + 24))(v1105, &v1839, v1106);
                llvm::MachineInstr::eraseFromParent(this);
                if ((_BYTE)v1830) {
                  sub_1CB87DEE4((uint64_t *)&__s1[1]);
                }
                return 1;
              }
            }
          }
        }
        goto LABEL_840;
      }
      uint64_t v66 = *a1;
      *(void *)(v66 + 40) = *((void *)this + 3);
      *(void *)(v66 + 48) = this;
      uint64_t v67 = *(void *)(*(void *)(*a1 + 8) + 40);
      uint64_t v68 = (_DWORD *)*((void *)this + 4);
      int v69 = v68[1];
      unsigned int v70 = v68[9];
      sub_1CC73C210(v68[17], v67, (uint64_t)__s1);
      if (!(_BYTE)v1829) {
        goto LABEL_840;
      }
      if (LODWORD(__s1[1]) >= 0x41)
      {
LABEL_2510:
        if (__s1[0]) {
          MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
        }
        goto LABEL_840;
      }
      uint64_t v71 = *(unsigned int *)(*((void *)this + 4) + 36);
      if ((v71 & 0x80000000) != 0) {
        uint64_t v72 = (uint64_t *)(*(void *)(v67 + 24) + 16 * (v71 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v72 = (uint64_t *)(*(void *)(v67 + 272) + 8 * v71);
      }
      uint64_t v73 = (uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1]);
      uint64_t v74 = *v72;
      if (*v72)
      {
        if (*(unsigned char *)(v74 + 3) & 1) != 0 || (uint64_t v74 = *(void *)(v74 + 24)) != 0 && (*(unsigned char *)(v74 + 3))
        {
          uint64_t v75 = *(void *)(v74 + 8);
          if (v75 && **(_WORD **)(v75 + 16) == 204 && *(_DWORD *)(v75 + 40) == 4)
          {
            v1111 = *(unsigned int **)(v75 + 32);
            uint64_t v1112 = v1111[9];
            v1113 = (uint64_t *)((v1112 & 0x80000000) != 0
                              ? *(void *)(v67 + 24) + 16 * (v1112 & 0x7FFFFFFF) + 8
                              : *(void *)(v67 + 272) + 8 * v1112);
            uint64_t v1114 = *v1113;
            if (v1114)
            {
              if ((*(unsigned char *)(v1114 + 3) & 1) != 0
                || (uint64_t v1114 = *(void *)(v1114 + 24)) != 0 && (*(unsigned char *)(v1114 + 3) & 1) != 0)
              {
                if (*(void *)(v1114 + 8))
                {
                  unsigned int v1115 = v1111[17];
                  sub_1CC73C210(v1111[25], v67, (uint64_t)__s1);
                  if ((_BYTE)v1829)
                  {
                    if (LODWORD(__s1[1]) >= 0x41)
                    {
                      if (__s1[0]) {
                        MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
                      }
                    }
                    else if ((uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1]) == v73)
                    {
                      uint64_t v64 = *a1;
                      LODWORD(v1839) = *(_DWORD *)(*((void *)this + 4) + 4);
                      LODWORD(v1840) = 1;
                      LODWORD(__s1[0]) = v1115;
                      goto LABEL_885;
                    }
                  }
                }
              }
            }
          }
        }
      }
      __s1[0] = &v1829;
      __s1[1] = (void *)0x800000000;
      char v76 = sub_1CBAC8BD8(v70, v67, *a1, (uint64_t)__s1);
      if (v76)
      {
        uint64_t v955 = *a1;
        LODWORD(v1824) = v69;
        LODWORD(v1825) = 1;
        LODWORD(v1839) = *((_DWORD *)__s1[0] + v73);
        DWORD2(v1840) = 0;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, void))(*(void *)v955 + 32))(v955, 19, &v1824, 1, &v1839, 1, 0);
        llvm::MachineInstr::eraseFromParent(this);
      }
      uint64_t v77 = (uint64_t *)__s1[0];
      if (__s1[0] != &v1829) {
LABEL_155:
      }
        free(v77);
LABEL_1002:
      if (v76) {
        return 1;
      }
      goto LABEL_840;
    }
    switch(v4)
    {
      case 164:
        uint64_t v439 = *(void *)(*a1 + 8);
        uint64_t v34 = *(void *)(v439 + 40);
        uint64_t v440 = *(void *)(v439 + 8);
        long long v441 = *(_OWORD *)(v440 + 1024);
        *(_OWORD *)__s1 = *(_OWORD *)(v440 + 1008);
        long long v1829 = v441;
        uint64_t v442 = *(void *)(v440 + 1048);
        unint64_t v1830 = *(void *)(v440 + 1040);
        uint64_t v1831 = v442;
        uint64_t v443 = *(void *)(v440 + 1056);
        uint64_t v1832 = v443;
        if (v443) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v443 + 8), 1uLL, memory_order_relaxed);
        }
        LOWORD(v1833) = *(_WORD *)(v440 + 1064);
        if (*(char *)(v440 + 1095) < 0)
        {
          sub_1CB8BDF7C((uint64_t)v1834, *(const void **)(v440 + 1072), *(void *)(v440 + 1080));
        }
        else
        {
          *(_OWORD *)v1834 = *(_OWORD *)(v440 + 1072);
          *(void *)&v1834[16] = *(void *)(v440 + 1088);
        }
        *(_OWORD *)v1835 = *(_OWORD *)(v440 + 1096);
        *(_OWORD *)&v1835[16] = *(_OWORD *)(v440 + 1112);
        sub_1CB906B78((uint64_t)v1836, (uint64_t *)(v440 + 1128));
        if (*(char *)(v440 + 1311) < 0)
        {
          sub_1CB8BDF7C((uint64_t)&v1837, *(const void **)(v440 + 1288), *(void *)(v440 + 1296));
        }
        else
        {
          long long v1837 = *(_OWORD *)(v440 + 1288);
          uint64_t v1838 = *(void *)(v440 + 1304);
        }
        uint64_t v39 = *(unsigned int *)(*((void *)this + 4) + 4);
        uint64_t v444 = *((unsigned __int16 *)this + 22);
        if ((v39 & 0x80000000) != 0)
        {
          unint64_t v888 = v39 & 0x7FFFFFFF;
          if (v888 < *(unsigned int *)(v34 + 432) && *(void *)(*(void *)(v34 + 424) + 8 * v888) == 129)
          {
            uint64_t v889 = *a1;
            uint64_t v446 = (void *)((char *)this + 24);
            *(void *)(v889 + 40) = *((void *)this + 3);
            *(void *)(v889 + 48) = this;
            uint64_t v448 = &unk_1CFB2E2E0;
          }
          else
          {
            uint64_t v926 = *a1;
            uint64_t v446 = (void *)((char *)this + 24);
            *(void *)(v926 + 40) = *((void *)this + 3);
            *(void *)(v926 + 48) = this;
            uint64_t v448 = &unk_1CFB2E308;
          }
          uint64_t v447 = (uint64_t *)(*(void *)(v34 + 24) + 16 * v888 + 8);
        }
        else
        {
          uint64_t v445 = *a1;
          uint64_t v446 = (void *)((char *)this + 24);
          *(void *)(v445 + 40) = *((void *)this + 3);
          *(void *)(v445 + 48) = this;
          uint64_t v447 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v39);
          uint64_t v448 = &unk_1CFB2E308;
        }
        uint64_t v449 = *v447;
        if (v449)
        {
          if ((*(unsigned char *)(v449 + 3) & 1) != 0
            || (uint64_t v449 = *(void *)(v449 + 24)) != 0 && (*(unsigned char *)(v449 + 3) & 1) != 0)
          {
            uint64_t v450 = *(void *)(v449 + 8);
            if (v450)
            {
              if (**(_WORD **)(v450 + 16) == 164 && *(_DWORD *)(v450 + 40) == 3)
              {
                uint64_t v451 = *(void *)(v450 + 32);
                uint64_t v452 = *(unsigned int *)(v451 + 36);
                if ((v452 & 0x80000000) != 0) {
                  v453 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v452 & 0x7FFFFFFF) + 8);
                }
                else {
                  v453 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v452);
                }
                uint64_t v454 = *v453;
                if ((*(unsigned char *)(v454 + 3) & 1) == 0) {
                  uint64_t v454 = *(void *)(v454 + 24);
                }
                uint64_t v455 = *(void *)(v454 + 8);
                if (**(_WORD **)(v455 + 16) == 121)
                {
                  uint64_t v1237 = *(void *)(*(void *)(v455 + 32) + 48);
                  if (v1237)
                  {
                    uint64_t v1238 = *(unsigned int *)(v451 + 68);
                    if ((v1238 & 0x80000000) != 0) {
                      v1239 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v1238 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      v1239 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v1238);
                    }
                    uint64_t v1240 = *v1239;
                    if ((*(unsigned char *)(v1240 + 3) & 1) == 0) {
                      uint64_t v1240 = *(void *)(v1240 + 24);
                    }
                    uint64_t v1241 = *(void *)(v1240 + 8);
                    if (**(_WORD **)(v1241 + 16) == 121)
                    {
                      uint64_t v1242 = *(void *)(*(void *)(v1241 + 32) + 48);
                      if (v1242)
                      {
                        v1244 = *(void **)(v1237 + 32);
                        v1243 = (const llvm::detail::DoubleAPFloat *)(v1237 + 32);
                        if (v1244 == &unk_1CFB2E344) {
                          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1825, v1243);
                        }
                        else {
                          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1825, v1243);
                        }
                        sub_1CBAACDB0((uint64_t)&v1839, v448, (uint64_t)&v1824);
                        if ((_UNKNOWN *)v1825 == &unk_1CFB2E344)
                        {
                          sub_1CB845718(&v1826);
                        }
                        else if ((*(_DWORD *)(v1825 + 8) - 64) <= 0xFFFFFF7F && v1826)
                        {
                          MEMORY[0x1D25D9CB0](v1826, 0x1000C8000313F17);
                        }
                        v1245 = (const llvm::detail::DoubleAPFloat *)(v1242 + 32);
                        if (*(_UNKNOWN **)(v1242 + 32) == &unk_1CFB2E344) {
                          llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v1819 + 1, v1245);
                        }
                        else {
                          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1819 + 8, v1245);
                        }
                        sub_1CBAACDB0((uint64_t)&v1821, v448, (uint64_t)&v1819);
                        if (*((_UNKNOWN **)&v1819 + 1) == &unk_1CFB2E344)
                        {
                          sub_1CB845718(v1820);
                        }
                        else if ((*(_DWORD *)(*((void *)&v1819 + 1) + 8) - 64) <= 0xFFFFFF7F {
                               && v1820[0])
                        }
                        {
                          MEMORY[0x1D25D9CB0](v1820[0], 0x1000C8000313F17);
                        }
                        if ((_UNKNOWN *)v1840 == &unk_1CFB2E344) {
                          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1817, (const llvm::detail::DoubleAPFloat *)&v1840);
                        }
                        else {
                          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1817, (const llvm::detail::IEEEFloat *)&v1840);
                        }
                        sub_1CB9C2E3C((uint64_t)&v1816, (uint64_t)&v1821, 1);
                        uint64_t v1246 = *a1;
                        LODWORD(v1813) = v39;
                        LODWORD(v1814) = 1;
                        v1248 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v439, (llvm::LLVMContext *)&v1816, v1247);
                        (*(void (**)(uint64_t, unint64_t *, const llvm::detail::DoubleAPFloat *))(*(void *)v1246 + 24))(v1246, &v1813, v1248);
                        llvm::MachineInstr::eraseFromParent(this);
                        if ((_UNKNOWN *)v1817 == &unk_1CFB2E344)
                        {
                          sub_1CB845718(v1818);
                        }
                        else if ((*(_DWORD *)(v1817 + 8) - 64) <= 0xFFFFFF7F && v1818[0])
                        {
                          MEMORY[0x1D25D9CB0](v1818[0], 0x1000C8000313F17);
                        }
                        if (*((_UNKNOWN **)&v1821 + 1) == &unk_1CFB2E344)
                        {
                          sub_1CB845718(&v1822);
                        }
                        else if ((*(_DWORD *)(*((void *)&v1821 + 1) + 8) - 64) <= 0xFFFFFF7F && v1822)
                        {
                          MEMORY[0x1D25D9CB0](v1822, 0x1000C8000313F17);
                        }
                        if ((_UNKNOWN *)v1840 != &unk_1CFB2E344)
                        {
                          if ((*(_DWORD *)(v1840 + 8) - 64) > 0xFFFFFF7F) {
                            goto LABEL_853;
                          }
                          uint64_t v1249 = *((void *)&v1840 + 1);
                          if (!*((void *)&v1840 + 1)) {
                            goto LABEL_853;
                          }
                          goto LABEL_2274;
                        }
                        v1674 = &v1839;
                        goto LABEL_3261;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if ((v39 & 0x80000000) != 0) {
          uint64_t v456 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v456 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v39);
        }
        uint64_t v457 = *v456;
        if (v457)
        {
          if ((*(unsigned char *)(v457 + 3) & 1) != 0
            || (uint64_t v457 = *(void *)(v457 + 24)) != 0 && (*(unsigned char *)(v457 + 3) & 1) != 0)
          {
            uint64_t v458 = *(void *)(v457 + 8);
            if (v458)
            {
              if (**(_WORD **)(v458 + 16) == 164 && *(_DWORD *)(v458 + 40) == 3)
              {
                uint64_t v459 = *(void *)(v458 + 32);
                uint64_t v460 = *(unsigned int *)(v459 + 68);
                if ((v460 & 0x80000000) != 0) {
                  uint64_t v461 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v460 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v461 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v460);
                }
                uint64_t v462 = *v461;
                if ((*(unsigned char *)(v462 + 3) & 1) == 0) {
                  uint64_t v462 = *(void *)(v462 + 24);
                }
                uint64_t v463 = *(void *)(v462 + 8);
                if (**(_WORD **)(v463 + 16) == 121)
                {
                  uint64_t v1250 = *(void *)(*(void *)(v463 + 32) + 48);
                  if (v1250)
                  {
                    unsigned int v639 = *(_DWORD *)(v459 + 36);
                    char v1251 = *(_UNKNOWN **)(v1250 + 32) == &unk_1CFB2E344
                          ? *(unsigned char *)(*(void *)(v1250 + 40) + 28)
                          : *(unsigned char *)(v1250 + 52);
                    if ((v1251 & 7) == 3
                      && ((v1251 & 8) == 0 || (BYTE4(__s1[1]) & 1) != 0 || (*((_WORD *)this + 22) & 0x40) != 0))
                    {
                      goto LABEL_1860;
                    }
                  }
                }
              }
            }
          }
        }
        if ((v39 & 0x80000000) != 0) {
          v464 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
        }
        else {
          v464 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v39);
        }
        uint64_t v465 = *v464;
        if (v465)
        {
          if ((*(unsigned char *)(v465 + 3) & 1) != 0
            || (uint64_t v465 = *(void *)(v465 + 24)) != 0 && (*(unsigned char *)(v465 + 3) & 1) != 0)
          {
            uint64_t v466 = *(void *)(v465 + 8);
            if (v466)
            {
              if (**(_WORD **)(v466 + 16) == 164
                && *(_DWORD *)(v466 + 40) == 3
                && *(_DWORD *)(*(void *)(v466 + 32) + 36) == *(_DWORD *)(*(void *)(v466 + 32) + 68)
                && ((BYTE4(__s1[1]) & 1) != 0 || (*((_WORD *)this + 22) & 0x10) != 0))
              {
                goto LABEL_851;
              }
            }
          }
        }
        if ((v39 & 0x80000000) != 0) {
          uint64_t v467 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v467 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v39);
        }
        uint64_t v468 = *v467;
        if (v468)
        {
          if ((*(unsigned char *)(v468 + 3) & 1) != 0
            || (uint64_t v468 = *(void *)(v468 + 24)) != 0 && (*(unsigned char *)(v468 + 3) & 1) != 0)
          {
            uint64_t v469 = *(void *)(v468 + 8);
            if (v469)
            {
              if (**(_WORD **)(v469 + 16) == 164 && *(_DWORD *)(v469 + 40) == 3)
              {
                uint64_t v470 = *(void *)(v469 + 32);
                uint64_t v471 = *(unsigned int *)(v470 + 36);
                if ((v471 & 0x80000000) != 0) {
                  v472 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v471 & 0x7FFFFFFF) + 8);
                }
                else {
                  v472 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v471);
                }
                uint64_t v473 = *v472;
                if ((*(unsigned char *)(v473 + 3) & 1) == 0) {
                  uint64_t v473 = *(void *)(v473 + 24);
                }
                uint64_t v474 = *(void *)(v473 + 8);
                if (**(_WORD **)(v474 + 16) == 121)
                {
                  uint64_t v1285 = *(void *)(*(void *)(v474 + 32) + 48);
                  if (v1285)
                  {
                    uint64_t v1286 = *(_UNKNOWN **)(v1285 + 32) == &unk_1CFB2E344 ? *(void *)(v1285 + 40) : v1285 + 24;
                    if ((*(unsigned char *)(v1286 + 28) & 7) == 3)
                    {
                      int v1287 = *(_DWORD *)(v470 + 68);
                      if ((BYTE4(__s1[1]) & 0x10) != 0 || (*((_WORD *)this + 22) & 0x40) != 0)
                      {
                        uint64_t v1288 = *a1;
                        *(void *)(v1288 + 40) = *((void *)this + 3);
                        *(void *)(v1288 + 48) = this;
                        uint64_t v516 = *a1;
                        LODWORD(v1821) = v39;
                        DWORD2(v1821) = 1;
                        LODWORD(v1839) = v1287;
                        goto LABEL_1902;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if ((BYTE4(__s1[1]) & 1) != 0 || (~*((unsigned __int16 *)this + 22) & 0x440) == 0)
        {
          uint64_t v475 = (uint64_t *)((v39 & 0x80000000) != 0
                           ? *(void *)(v34 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8
                           : *(void *)(v34 + 272) + 8 * v39);
          uint64_t v476 = *v475;
          if (v476)
          {
            if ((*(unsigned char *)(v476 + 3) & 1) != 0
              || (uint64_t v476 = *(void *)(v476 + 24)) != 0 && (*(unsigned char *)(v476 + 3) & 1) != 0)
            {
              uint64_t v477 = *(void *)(v476 + 8);
              if (v477 && **(_WORD **)(v477 + 16) == 164 && *(_DWORD *)(v477 + 40) == 3)
              {
                uint64_t v478 = *(void *)(v477 + 32);
                uint64_t v479 = *(unsigned int *)(v478 + 68);
                uint64_t v480 = (uint64_t *)((v479 & 0x80000000) != 0
                                 ? *(void *)(v34 + 24) + 16 * (v479 & 0x7FFFFFFF) + 8
                                 : *(void *)(v34 + 272) + 8 * v479);
                uint64_t v481 = *v480;
                if (*v480)
                {
                  int v482 = *(_DWORD *)(v478 + 36);
                  if ((*(unsigned char *)(v481 + 3) & 1) != 0
                    || (uint64_t v481 = *(void *)(v481 + 24)) != 0 && (*(unsigned char *)(v481 + 3) & 1) != 0)
                  {
                    uint64_t v483 = *(void *)(v481 + 8);
                    if (v483 && **(_WORD **)(v483 + 16) == 163 && *(_DWORD *)(v483 + 40) == 3)
                    {
                      uint64_t v1259 = *(void *)(v483 + 32);
                      int v1260 = *(_DWORD *)(v1259 + 36);
                      int v1261 = *(_DWORD *)(v1259 + 68);
                      if (v482 == v1260 && v482 != v1261)
                      {
                        uint64_t v1263 = *(unsigned int *)(*((void *)this + 4) + 68);
                        if ((v1263 & 0x80000000) != 0) {
                          v1264 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v1263 & 0x7FFFFFFF) + 8);
                        }
                        else {
                          v1264 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v1263);
                        }
                        uint64_t v1265 = *v1264;
                        if ((*(unsigned char *)(v1265 + 3) & 1) == 0) {
                          uint64_t v1265 = *(void *)(v1265 + 24);
                        }
                        if (**(_WORD **)(*(void *)(v1265 + 8) + 16) == 163) {
                          goto LABEL_1901;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v484 = (uint64_t *)((v39 & 0x80000000) != 0
                           ? *(void *)(v34 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8
                           : *(void *)(v34 + 272) + 8 * v39);
          uint64_t v485 = *v484;
          if (v485)
          {
            if ((*(unsigned char *)(v485 + 3) & 1) != 0
              || (uint64_t v485 = *(void *)(v485 + 24)) != 0 && (*(unsigned char *)(v485 + 3) & 1) != 0)
            {
              uint64_t v486 = *(void *)(v485 + 8);
              if (v486 && **(_WORD **)(v486 + 16) == 164 && *(_DWORD *)(v486 + 40) == 3)
              {
                uint64_t v487 = *(void *)(v486 + 32);
                uint64_t v488 = *(unsigned int *)(v487 + 68);
                uint64_t v489 = (uint64_t *)((v488 & 0x80000000) != 0
                                 ? *(void *)(v34 + 24) + 16 * (v488 & 0x7FFFFFFF) + 8
                                 : *(void *)(v34 + 272) + 8 * v488);
                uint64_t v490 = *v489;
                if (*v489)
                {
                  int v491 = *(_DWORD *)(v487 + 36);
                  if ((*(unsigned char *)(v490 + 3) & 1) != 0
                    || (uint64_t v490 = *(void *)(v490 + 24)) != 0 && (*(unsigned char *)(v490 + 3) & 1) != 0)
                  {
                    uint64_t v492 = *(void *)(v490 + 8);
                    if (v492 && **(_WORD **)(v492 + 16) == 163 && *(_DWORD *)(v492 + 40) == 3)
                    {
                      uint64_t v1266 = *(void *)(v492 + 32);
                      int v1261 = *(_DWORD *)(v1266 + 36);
                      int v1267 = *(_DWORD *)(v1266 + 68);
                      if (v491 != v1261 && v491 == v1267)
                      {
                        uint64_t v1269 = *(unsigned int *)(*((void *)this + 4) + 68);
                        if ((v1269 & 0x80000000) != 0) {
                          v1270 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v1269 & 0x7FFFFFFF) + 8);
                        }
                        else {
                          v1270 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v1269);
                        }
                        uint64_t v1271 = *v1270;
                        if ((*(unsigned char *)(v1271 + 3) & 1) == 0) {
                          uint64_t v1271 = *(void *)(v1271 + 24);
                        }
                        if (**(_WORD **)(*(void *)(v1271 + 8) + 16) == 163)
                        {
LABEL_1901:
                          uint64_t v516 = *a1;
                          LODWORD(v1821) = v39;
                          DWORD2(v1821) = 1;
                          LODWORD(v1839) = v1261;
LABEL_1902:
                          DWORD2(v1840) = 0;
                          goto LABEL_1903;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        BOOL v493 = (BYTE4(__s1[1]) & 1) != 0 || *(_DWORD *)&v1835[8] == 0;
        int v494 = !v493;
        if (!v493 && (v444 & 0x100) == 0) {
          goto LABEL_839;
        }
        uint64_t v495 = *((void *)this + 4);
        uint64_t v496 = *(unsigned int *)(v495 + 36);
        uint64_t v497 = *(unsigned int *)(v495 + 68);
        if ((v496 & 0x80000000) != 0) {
          v498 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v496 & 0x7FFFFFFF) + 8);
        }
        else {
          v498 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v496);
        }
        uint64_t v499 = *v498;
        if (v499)
        {
          while ((*(unsigned char *)(v499 + 3) & 1) != 0)
          {
            uint64_t v499 = *(void *)(v499 + 24);
            if (!v499) {
              goto LABEL_648;
            }
          }
          do
          {
            uint64_t v499 = *(void *)(v499 + 24);
            BOOL v500 = v499 == 0;
          }
          while (v499 && (*(unsigned char *)(v499 + 3) & 1) != 0);
        }
        else
        {
LABEL_648:
          BOOL v500 = 0;
        }
        if ((v497 & 0x80000000) != 0) {
          uint64_t v501 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v497 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v501 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v497);
        }
        uint64_t v502 = *v501;
        if (v502)
        {
          while ((*(unsigned char *)(v502 + 3) & 1) != 0)
          {
            uint64_t v502 = *(void *)(v502 + 24);
            if (!v502) {
              goto LABEL_656;
            }
          }
          do
          {
            uint64_t v502 = *(void *)(v502 + 24);
            BOOL v503 = v502 == 0;
          }
          while (v502 && (*(unsigned char *)(v502 + 3) & 1) != 0);
        }
        else
        {
LABEL_656:
          BOOL v503 = 0;
        }
        if ((v39 & 0x80000000) != 0
          && (v39 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v34 + 432))
        {
          unint64_t v504 = *(void *)(*(void *)(v34 + 424) + 8 * (v39 & 0x7FFFFFFF));
        }
        else
        {
          unint64_t v504 = 0;
        }
        uint64_t v505 = *a1;
        *(void *)(v505 + 40) = *v446;
        *(void *)(v505 + 48) = this;
        if (v500)
        {
          uint64_t v506 = (uint64_t *)((v496 & 0x80000000) != 0
                           ? *(void *)(v34 + 24) + 16 * (v496 & 0x7FFFFFFF) + 8
                           : *(void *)(v34 + 272) + 8 * v496);
          uint64_t v507 = *v506;
          if (v507)
          {
            if ((*(unsigned char *)(v507 + 3) & 1) != 0
              || (uint64_t v507 = *(void *)(v507 + 24)) != 0 && (*(unsigned char *)(v507 + 3) & 1) != 0)
            {
              uint64_t v508 = *(void *)(v507 + 8);
              if (v508)
              {
                if (**(_WORD **)(v508 + 16) == 165 && *(_DWORD *)(v508 + 40) == 3)
                {
                  uint64_t v509 = *(void *)(v508 + 32);
                  int v510 = *(_DWORD *)(v509 + 36);
                  LODWORD(v509) = *(_DWORD *)(v509 + 68);
                  uint64_t v511 = *a1;
                  LODWORD(v1816) = v39;
                  LODWORD(v1817) = 1;
                  LODWORD(v1839) = v510;
                  DWORD2(v1840) = 0;
                  LODWORD(v1841) = v509;
                  int v1843 = 0;
                  unint64_t v1813 = v504;
                  LODWORD(v1814) = 0;
                  LODWORD(v1821) = v497;
                  LODWORD(v1822) = 0;
                  uint64_t v512 = v444 | 0x100000000;
                  uint64_t v1844 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)v511 + 32))(v511, 177, &v1813, 1, &v1821, 1, v444 | 0x100000000);
                  uint64_t v1845 = v513;
                  int v1846 = 1;
LABEL_670:
                  uint64_t v514 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v511 + 32);
                  unint64_t v515 = &v1816;
                  uint64_t v516 = v511;
                  uint64_t v517 = 166;
                  uint64_t v518 = v512;
                  uint64_t v519 = 3;
                  goto LABEL_671;
                }
              }
            }
          }
        }
        if (v503)
        {
          v1649 = (uint64_t *)((v497 & 0x80000000) != 0
                            ? *(void *)(v34 + 24) + 16 * (v497 & 0x7FFFFFFF) + 8
                            : *(void *)(v34 + 272) + 8 * v497);
          uint64_t v1650 = *v1649;
          if (v1650)
          {
            if ((*(unsigned char *)(v1650 + 3) & 1) != 0
              || (uint64_t v1650 = *(void *)(v1650 + 24)) != 0 && (*(unsigned char *)(v1650 + 3) & 1) != 0)
            {
              uint64_t v1651 = *(void *)(v1650 + 8);
              if (v1651)
              {
                if (**(_WORD **)(v1651 + 16) == 165 && *(_DWORD *)(v1651 + 40) == 3)
                {
                  uint64_t v1652 = *(void *)(v1651 + 32);
                  int v1653 = *(_DWORD *)(v1652 + 36);
                  int v1654 = *(_DWORD *)(v1652 + 68);
                  if (!v494 || (*((_WORD *)this + 22) & 0x400) != 0)
                  {
                    uint64_t v511 = *a1;
                    LODWORD(v1816) = v39;
                    LODWORD(v1817) = 1;
                    unint64_t v1813 = v504;
                    LODWORD(v1814) = 0;
                    LODWORD(v1821) = v1654;
                    LODWORD(v1822) = 0;
                    uint64_t v512 = v444 | 0x100000000;
                    unint64_t v1839 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)v511 + 32))(v511, 177, &v1813, 1, &v1821, 1, v444 | 0x100000000);
                    *(void *)&long long v1840 = v1655;
                    DWORD2(v1840) = 1;
                    LODWORD(v1841) = v1653;
                    int v1843 = 0;
                    LODWORD(v1844) = v496;
                    int v1846 = 0;
                    goto LABEL_670;
                  }
                }
              }
            }
          }
        }
        goto LABEL_839;
      case 165:
        uint64_t v33 = *(void *)(*a1 + 8);
        uint64_t v34 = *(void *)(v33 + 40);
        uint64_t v35 = *(void *)(v33 + 8);
        long long v36 = *(_OWORD *)(v35 + 1024);
        *(_OWORD *)__s1 = *(_OWORD *)(v35 + 1008);
        long long v1829 = v36;
        uint64_t v37 = *(void *)(v35 + 1048);
        unint64_t v1830 = *(void *)(v35 + 1040);
        uint64_t v1831 = v37;
        uint64_t v38 = *(void *)(v35 + 1056);
        uint64_t v1832 = v38;
        if (v38) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
        }
        LOWORD(v1833) = *(_WORD *)(v35 + 1064);
        if (*(char *)(v35 + 1095) < 0)
        {
          sub_1CB8BDF7C((uint64_t)v1834, *(const void **)(v35 + 1072), *(void *)(v35 + 1080));
        }
        else
        {
          *(_OWORD *)v1834 = *(_OWORD *)(v35 + 1072);
          *(void *)&v1834[16] = *(void *)(v35 + 1088);
        }
        *(_OWORD *)v1835 = *(_OWORD *)(v35 + 1096);
        *(_OWORD *)&v1835[16] = *(_OWORD *)(v35 + 1112);
        sub_1CB906B78((uint64_t)v1836, (uint64_t *)(v35 + 1128));
        if (*(char *)(v35 + 1311) < 0)
        {
          sub_1CB8BDF7C((uint64_t)&v1837, *(const void **)(v35 + 1288), *(void *)(v35 + 1296));
        }
        else
        {
          long long v1837 = *(_OWORD *)(v35 + 1288);
          uint64_t v1838 = *(void *)(v35 + 1304);
        }
        uint64_t v39 = *(unsigned int *)(*((void *)this + 4) + 4);
        uint64_t v1803 = 0;
        unint64_t v1804 = 0;
        uint64_t v1802 = 0;
        if ((v39 & 0x80000000) != 0)
        {
          if ((v39 & 0x7FFFFFFF) >= *(_DWORD *)(v34 + 432))
          {
            unsigned int v40 = 0;
          }
          else
          {
            unsigned int v40 = *(uint64_t **)(*(void *)(v34 + 424) + 8 * (v39 & 0x7FFFFFFF));
            if (v40 == (uint64_t *)129)
            {
              unint64_t v41 = &unk_1CFB2E2E0;
              goto LABEL_65;
            }
          }
          unint64_t v41 = &unk_1CFB2E308;
LABEL_65:
          uint64_t v42 = *a1;
          *(void *)(v42 + 40) = *((void *)this + 3);
          *(void *)(v42 + 48) = this;
          uint64_t v43 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
          goto LABEL_66;
        }
        unsigned int v40 = 0;
        uint64_t v1658 = *a1;
        *(void *)(v1658 + 40) = *((void *)this + 3);
        *(void *)(v1658 + 48) = this;
        uint64_t v43 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v39);
        unint64_t v41 = &unk_1CFB2E308;
LABEL_66:
        uint64_t v44 = *v43;
        if (!v44) {
          goto LABEL_765;
        }
        if ((*(unsigned char *)(v44 + 3) & 1) == 0)
        {
          uint64_t v44 = *(void *)(v44 + 24);
          if (!v44 || (*(unsigned char *)(v44 + 3) & 1) == 0) {
            goto LABEL_765;
          }
        }
        uint64_t v45 = *(void *)(v44 + 8);
        if (!v45 || **(_WORD **)(v45 + 16) != 165 || *(_DWORD *)(v45 + 40) != 3) {
          goto LABEL_765;
        }
        uint64_t v46 = *(void *)(v45 + 32);
        uint64_t v47 = *(unsigned int *)(v46 + 36);
        if ((v47 & 0x80000000) != 0) {
          uint64_t v48 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v48 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v47);
        }
        uint64_t v49 = *v48;
        if ((*(unsigned char *)(v49 + 3) & 1) == 0) {
          uint64_t v49 = *(void *)(v49 + 24);
        }
        uint64_t v50 = *(void *)(v49 + 8);
        if (**(_WORD **)(v50 + 16) == 121)
        {
          uint64_t v589 = *(void *)(*(void *)(v50 + 32) + 48);
          uint64_t v1803 = v589;
          if (v589)
          {
            uint64_t v1272 = *(unsigned int *)(v46 + 68);
            if ((v1272 & 0x80000000) != 0) {
              v1273 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v1272 & 0x7FFFFFFF) + 8);
            }
            else {
              v1273 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v1272);
            }
            uint64_t v1274 = *v1273;
            if ((*(unsigned char *)(v1274 + 3) & 1) == 0) {
              uint64_t v1274 = *(void *)(v1274 + 24);
            }
            uint64_t v1275 = *(void *)(v1274 + 8);
            if (**(_WORD **)(v1275 + 16) == 121)
            {
              uint64_t v1802 = *(void *)(*(void *)(v1275 + 32) + 48);
              if (v1802) {
                goto LABEL_2290;
              }
            }
            else
            {
              uint64_t v1802 = 0;
            }
          }
          if ((v47 & 0x80000000) == 0) {
            goto LABEL_77;
          }
        }
        else
        {
          uint64_t v1803 = 0;
          if ((v47 & 0x80000000) == 0)
          {
LABEL_77:
            uint64_t v51 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v47);
LABEL_759:
            uint64_t v590 = *v51;
            if ((*(unsigned char *)(v590 + 3) & 1) == 0) {
              uint64_t v590 = *(void *)(v590 + 24);
            }
            uint64_t v591 = *(void *)(v590 + 8);
            if (**(_WORD **)(v591 + 16) != 121)
            {
              uint64_t v1802 = 0;
              if ((v39 & 0x80000000) == 0)
              {
LABEL_763:
                v592 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v39);
                goto LABEL_767;
              }
LABEL_766:
              v592 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
LABEL_767:
              uint64_t v593 = *v592;
              if (!v593) {
                goto LABEL_784;
              }
              if ((*(unsigned char *)(v593 + 3) & 1) == 0)
              {
                uint64_t v593 = *(void *)(v593 + 24);
                if (!v593 || (*(unsigned char *)(v593 + 3) & 1) == 0) {
                  goto LABEL_784;
                }
              }
              uint64_t v594 = *(void *)(v593 + 8);
              if (!v594 || **(_WORD **)(v594 + 16) != 165 || *(_DWORD *)(v594 + 40) != 3) {
                goto LABEL_784;
              }
              uint64_t v595 = *(void *)(v594 + 32);
              uint64_t v596 = *(unsigned int *)(v595 + 36);
              HIDWORD(v1804) = *(_DWORD *)(v595 + 36);
              uint64_t v597 = *(unsigned int *)(v595 + 68);
              if ((v597 & 0x80000000) != 0) {
                uint64_t v598 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v597 & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v598 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v597);
              }
              uint64_t v599 = *v598;
              if ((*(unsigned char *)(v599 + 3) & 1) == 0) {
                uint64_t v599 = *(void *)(v599 + 24);
              }
              uint64_t v600 = *(void *)(v599 + 8);
              if (**(_WORD **)(v600 + 16) == 121)
              {
                uint64_t v638 = *(void *)(*(void *)(v600 + 32) + 48);
                uint64_t v1803 = v638;
                if (v638) {
                  goto LABEL_844;
                }
              }
              else
              {
                uint64_t v1803 = 0;
              }
              if ((v596 & 0x80000000) != 0) {
                v601 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v596 & 0x7FFFFFFF) + 8);
              }
              else {
                v601 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v596);
              }
              uint64_t v602 = *v601;
              if ((*(unsigned char *)(v602 + 3) & 1) == 0) {
                uint64_t v602 = *(void *)(v602 + 24);
              }
              uint64_t v603 = *(void *)(v602 + 8);
              if (**(_WORD **)(v603 + 16) != 121)
              {
                uint64_t v1803 = 0;
                goto LABEL_784;
              }
              uint64_t v638 = *(void *)(*(void *)(v603 + 32) + 48);
              uint64_t v1803 = v638;
              if (!v638)
              {
LABEL_784:
                if ((v39 & 0x80000000) != 0) {
                  v604 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
                }
                else {
                  v604 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v39);
                }
                uint64_t v605 = *v604;
                if (!v605) {
                  goto LABEL_803;
                }
                if ((*(unsigned char *)(v605 + 3) & 1) == 0)
                {
                  uint64_t v605 = *(void *)(v605 + 24);
                  if (!v605 || (*(unsigned char *)(v605 + 3) & 1) == 0) {
                    goto LABEL_803;
                  }
                }
                uint64_t v606 = *(void *)(v605 + 8);
                if (!v606 || **(_WORD **)(v606 + 16) != 165 || *(_DWORD *)(v606 + 40) != 3) {
                  goto LABEL_803;
                }
                uint64_t v607 = *(void *)(v606 + 32);
                uint64_t v608 = *(unsigned int *)(v607 + 36);
                HIDWORD(v1804) = *(_DWORD *)(v607 + 36);
                uint64_t v609 = *(unsigned int *)(v607 + 68);
                if ((v609 & 0x80000000) != 0) {
                  v610 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v609 & 0x7FFFFFFF) + 8);
                }
                else {
                  v610 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v609);
                }
                uint64_t v611 = *v610;
                if ((*(unsigned char *)(v611 + 3) & 1) == 0) {
                  uint64_t v611 = *(void *)(v611 + 24);
                }
                uint64_t v612 = *(void *)(v611 + 8);
                if (**(_WORD **)(v612 + 16) == 121)
                {
                  uint64_t v640 = *(void *)(*(void *)(v612 + 32) + 48);
                  uint64_t v1803 = v640;
                  if (v640) {
                    goto LABEL_847;
                  }
                }
                else
                {
                  uint64_t v1803 = 0;
                }
                if ((v608 & 0x80000000) != 0) {
                  v613 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v608 & 0x7FFFFFFF) + 8);
                }
                else {
                  v613 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v608);
                }
                uint64_t v614 = *v613;
                if ((*(unsigned char *)(v614 + 3) & 1) == 0) {
                  uint64_t v614 = *(void *)(v614 + 24);
                }
                uint64_t v615 = *(void *)(v614 + 8);
                if (**(_WORD **)(v615 + 16) != 121)
                {
                  uint64_t v1803 = 0;
                  goto LABEL_803;
                }
                uint64_t v640 = *(void *)(*(void *)(v615 + 32) + 48);
                uint64_t v1803 = v640;
                if (!v640)
                {
LABEL_803:
                  if ((BYTE4(__s1[1]) & 1) != 0 || (*((_WORD *)this + 22) & 0x400) != 0)
                  {
                    unint64_t v1839 = (unint64_t)&v1804 + 4;
                    *(void *)&long long v1840 = &v1803;
                    *((void *)&v1840 + 1) = &v1802;
                    LODWORD(v1821) = v39;
                    if (sub_1CBAC9F60((uint64_t)&v1839, v34, (unsigned int *)&v1821))
                    {
                      v1478 = (const llvm::detail::DoubleAPFloat *)(v1803 + 32);
                      if (*(_UNKNOWN **)(v1803 + 32) == &unk_1CFB2E344) {
                        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1814, v1478);
                      }
                      else {
                        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1814, v1478);
                      }
                      sub_1CBAACDB0((uint64_t)&v1821, v41, (uint64_t)&v1813);
                      if ((_UNKNOWN *)v1814 == &unk_1CFB2E344)
                      {
                        sub_1CB845718(v1815);
                      }
                      else if ((*(_DWORD *)(v1814 + 8) - 64) <= 0xFFFFFF7F && v1815[0])
                      {
                        MEMORY[0x1D25D9CB0](v1815[0], 0x1000C8000313F17);
                      }
                      v1479 = (const llvm::detail::DoubleAPFloat *)(v1802 + 32);
                      if (*(_UNKNOWN **)(v1802 + 32) == &unk_1CFB2E344) {
                        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1811, v1479);
                      }
                      else {
                        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1811, v1479);
                      }
                      sub_1CBAACDB0((uint64_t)&v1816, v41, (uint64_t)&v1810);
                      if ((_UNKNOWN *)v1811 == &unk_1CFB2E344)
                      {
                        sub_1CB845718(v1812);
                      }
                      else if ((*(_DWORD *)(v1811 + 8) - 64) <= 0xFFFFFF7F && v1812[0])
                      {
                        MEMORY[0x1D25D9CB0](v1812[0], 0x1000C8000313F17);
                      }
                      if (*((_UNKNOWN **)&v1821 + 1) == &unk_1CFB2E344) {
                        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1808, (const llvm::detail::DoubleAPFloat *)((char *)&v1821 + 8));
                      }
                      else {
                        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1808, (const llvm::detail::IEEEFloat *)((char *)&v1821 + 8));
                      }
                      sub_1CB9C2E60((uint64_t)&v1807, (uint64_t)&v1816, 1);
                      uint64_t v1480 = *a1;
                      unint64_t v1839 = (unint64_t)v40;
                      LODWORD(v1840) = 0;
                      v1482 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v33, (llvm::LLVMContext *)&v1807, v1481);
                      uint64_t v1483 = (*(uint64_t (**)(uint64_t, unint64_t *, const llvm::detail::DoubleAPFloat *))(*(void *)v1480 + 24))(v1480, &v1839, v1482);
                      uint64_t v1484 = *a1;
                      int v1805 = v39;
                      int v1806 = 1;
                      LODWORD(v1839) = HIDWORD(v1804);
                      DWORD2(v1840) = 0;
                      uint64_t v1841 = v1483;
                      uint64_t v1842 = v1485;
                      int v1843 = 1;
                      (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v1484 + 32))(v1484, 165, &v1805, 1, &v1839, 2, *((unsigned __int16 *)this + 22) | 0x100000000);
                      llvm::MachineInstr::eraseFromParent(this);
                      if ((_UNKNOWN *)v1808 == &unk_1CFB2E344)
                      {
                        sub_1CB845718(v1809);
                      }
                      else if ((*(_DWORD *)(v1808 + 8) - 64) <= 0xFFFFFF7F && v1809[0])
                      {
                        MEMORY[0x1D25D9CB0](v1809[0], 0x1000C8000313F17);
                      }
                      if ((_UNKNOWN *)v1817 == &unk_1CFB2E344)
                      {
                        sub_1CB845718(v1818);
                      }
                      else if ((*(_DWORD *)(v1817 + 8) - 64) <= 0xFFFFFF7F && v1818[0])
                      {
                        MEMORY[0x1D25D9CB0](v1818[0], 0x1000C8000313F17);
                      }
                      if (*((_UNKNOWN **)&v1821 + 1) != &unk_1CFB2E344)
                      {
                        if ((*(_DWORD *)(*((void *)&v1821 + 1) + 8) - 64) > 0xFFFFFF7F) {
                          goto LABEL_853;
                        }
                        uint64_t v1249 = v1822;
                        if (!v1822) {
                          goto LABEL_853;
                        }
LABEL_2274:
                        MEMORY[0x1D25D9CB0](v1249, 0x1000C8000313F17);
                        goto LABEL_853;
                      }
                      v1674 = (unint64_t *)&v1821;
LABEL_3261:
                      sub_1CB845718((uint64_t *)v1674 + 2);
                      goto LABEL_853;
                    }
                    unint64_t v1839 = (unint64_t)&v1804 + 4;
                    *(void *)&long long v1840 = &v1804;
                    *((void *)&v1840 + 1) = &v1803;
                    LODWORD(v1821) = v39;
                    if (sub_1CBACA374((uint64_t)&v1839, v34, (unsigned int *)&v1821))
                    {
                      if (HIDWORD(v1804) == v1804)
                      {
                        sub_1CB87DDC4((uint64_t)&v1821 + 8, (uint64_t *)(v1803 + 32));
                        llvm::APFloat::APFloat((uint64_t)&v1839, *((void **)&v1821 + 1), "2.0", 3uLL);
                        sub_1CB87DDC4((uint64_t)&v1817, (uint64_t *)&v1821 + 1);
                        sub_1CB9C2E60((uint64_t)&v1816, (uint64_t)&v1839, 1);
                        sub_1CB87DEE4((uint64_t *)&v1840);
                        uint64_t v927 = *a1;
                        unint64_t v1839 = (unint64_t)v40;
                        LODWORD(v1840) = 0;
                        int v929 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v33, (llvm::LLVMContext *)&v1816, v928);
                        uint64_t v930 = (*(uint64_t (**)(uint64_t, unint64_t *, const llvm::detail::DoubleAPFloat *))(*(void *)v927 + 24))(v927, &v1839, v929);
                        uint64_t v931 = *a1;
                        int v1807 = v39;
                        LODWORD(v1808) = 1;
                        LODWORD(v1839) = HIDWORD(v1804);
                        DWORD2(v1840) = 0;
                        uint64_t v1841 = v930;
                        uint64_t v1842 = v932;
                        int v1843 = 1;
                        (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v931 + 32))(v931, 165, &v1807, 1, &v1839, 2, *((unsigned __int16 *)this + 22) | 0x100000000);
                        llvm::MachineInstr::eraseFromParent(this);
                        sub_1CB87DEE4(&v1817);
                        v933 = (uint64_t *)&v1821 + 1;
LABEL_2291:
                        sub_1CB87DEE4(v933);
                        goto LABEL_853;
                      }
                    }
                  }
                  if ((v39 & 0x80000000) != 0) {
                    v616 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
                  }
                  else {
                    v616 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v39);
                  }
                  uint64_t v617 = *v616;
                  if (!v617) {
                    goto LABEL_826;
                  }
                  if ((*(unsigned char *)(v617 + 3) & 1) == 0)
                  {
                    uint64_t v617 = *(void *)(v617 + 24);
                    if (!v617 || (*(unsigned char *)(v617 + 3) & 1) == 0) {
                      goto LABEL_826;
                    }
                  }
                  uint64_t v618 = *(void *)(v617 + 8);
                  if (!v618 || **(_WORD **)(v618 + 16) != 165 || *(_DWORD *)(v618 + 40) != 3) {
                    goto LABEL_826;
                  }
                  uint64_t v619 = *(void *)(v618 + 32);
                  uint64_t v620 = *(unsigned int *)(v619 + 36);
                  HIDWORD(v1804) = *(_DWORD *)(v619 + 36);
                  uint64_t v621 = *(unsigned int *)(v619 + 68);
                  if ((v621 & 0x80000000) != 0) {
                    v622 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v621 & 0x7FFFFFFF) + 8);
                  }
                  else {
                    v622 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v621);
                  }
                  uint64_t v623 = *v622;
                  if ((*(unsigned char *)(v623 + 3) & 1) == 0) {
                    uint64_t v623 = *(void *)(v623 + 24);
                  }
                  uint64_t v624 = *(void *)(v623 + 8);
                  if (**(_WORD **)(v624 + 16) == 121)
                  {
                    uint64_t v643 = *(void *)(*(void *)(v624 + 32) + 48);
                    uint64_t v1803 = v643;
                    if (v643) {
                      goto LABEL_855;
                    }
                  }
                  else
                  {
                    uint64_t v1803 = 0;
                  }
                  if ((v620 & 0x80000000) != 0) {
                    uint64_t v625 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v620 & 0x7FFFFFFF) + 8);
                  }
                  else {
                    uint64_t v625 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v620);
                  }
                  uint64_t v626 = *v625;
                  if ((*(unsigned char *)(v626 + 3) & 1) == 0) {
                    uint64_t v626 = *(void *)(v626 + 24);
                  }
                  uint64_t v627 = *(void *)(v626 + 8);
                  if (**(_WORD **)(v627 + 16) != 121)
                  {
                    uint64_t v1803 = 0;
LABEL_826:
                    unint64_t v1839 = (unint64_t)&v1804 + 4;
                    *(void *)&long long v1840 = &v1804;
                    LODWORD(v1821) = v39;
                    if (!sub_1CBACA5DC((_DWORD **)&v1839, v34, (unsigned int *)&v1821))
                    {
                      if ((v39 & 0x80000000) != 0) {
                        BOOL v628 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
                      }
                      else {
                        BOOL v628 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v39);
                      }
                      uint64_t v629 = *v628;
                      if (!v629) {
                        goto LABEL_839;
                      }
                      if ((*(unsigned char *)(v629 + 3) & 1) == 0)
                      {
                        uint64_t v629 = *(void *)(v629 + 24);
                        if (!v629 || (*(unsigned char *)(v629 + 3) & 1) == 0) {
                          goto LABEL_839;
                        }
                      }
                      uint64_t v630 = *(void *)(v629 + 8);
                      if (!v630 || **(_WORD **)(v630 + 16) != 165 || *(_DWORD *)(v630 + 40) != 3) {
                        goto LABEL_839;
                      }
                      uint64_t v631 = *(void *)(v630 + 32);
                      unsigned int v632 = *(_DWORD *)(v631 + 36);
                      uint64_t v633 = *(unsigned int *)(v631 + 68);
                      unint64_t v1804 = __PAIR64__(v632, v633);
                      if ((v633 & 0x80000000) != 0) {
                        v634 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v633 & 0x7FFFFFFF) + 8);
                      }
                      else {
                        v634 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v633);
                      }
                      uint64_t v635 = *v634;
                      if ((*(unsigned char *)(v635 + 3) & 1) == 0) {
                        uint64_t v635 = *(void *)(v635 + 24);
                      }
                      uint64_t v636 = *(void *)(v635 + 8);
                      if (**(_WORD **)(v636 + 16) != 136) {
                        goto LABEL_839;
                      }
                      uint64_t v1116 = *(unsigned int *)(*(void *)(v636 + 32) + 36);
                      if ((v1116 & 0x80000000) != 0) {
                        v1117 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v1116 & 0x7FFFFFFF) + 8);
                      }
                      else {
                        v1117 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v1116);
                      }
                      uint64_t v1118 = *v1117;
                      if ((*(unsigned char *)(v1118 + 3) & 1) == 0) {
                        uint64_t v1118 = *(void *)(v1118 + 24);
                      }
                      uint64_t v1119 = *(void *)(v1118 + 8);
                      if (**(_WORD **)(v1119 + 16) != 135) {
                        goto LABEL_839;
                      }
                      uint64_t v1120 = *(unsigned int *)(*(void *)(v1119 + 32) + 100);
                      if ((v1120 & 0x80000000) != 0) {
                        v1121 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v1120 & 0x7FFFFFFF) + 8);
                      }
                      else {
                        v1121 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v1120);
                      }
                      uint64_t v1122 = *v1121;
                      if ((*(unsigned char *)(v1122 + 3) & 1) == 0) {
                        uint64_t v1122 = *(void *)(v1122 + 24);
                      }
                      uint64_t v1123 = *(void *)(v1122 + 8);
                      if (**(_WORD **)(v1123 + 16) != 121) {
                        goto LABEL_839;
                      }
                      uint64_t v1124 = *(void *)(*(void *)(v1123 + 32) + 48);
                      if (!v1124) {
                        goto LABEL_839;
                      }
                      if (!sub_1CB8BE1E4(v1124 + 24, 0.0)) {
                        goto LABEL_839;
                      }
                      uint64_t v1125 = *(void *)(v1119 + 32);
                      if (HIDWORD(v1804) != *(_DWORD *)(v1125 + 68) || (~*((unsigned __int16 *)this + 22) & 0x50) != 0) {
                        goto LABEL_839;
                      }
                      uint64_t v1126 = *(void *)(v636 + 32);
                      uint64_t v1127 = *(unsigned int *)(v1126 + 68);
                      if ((v1127 & 0x80000000) != 0) {
                        v1128 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v1127 & 0x7FFFFFFF) + 8);
                      }
                      else {
                        v1128 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v1127);
                      }
                      uint64_t v1129 = *v1128;
                      if ((*(unsigned char *)(v1129 + 3) & 1) == 0) {
                        uint64_t v1129 = *(void *)(v1129 + 24);
                      }
                      uint64_t v1130 = *(void *)(v1129 + 8);
                      if (**(_WORD **)(v1130 + 16) == 121) {
                        uint64_t v1131 = *(void *)(*(void *)(v1130 + 32) + 48);
                      }
                      else {
                        uint64_t v1131 = 0;
                      }
                      uint64_t v1132 = *(unsigned int *)(v1126 + 100);
                      if ((v1132 & 0x80000000) != 0) {
                        v1133 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v1132 & 0x7FFFFFFF) + 8);
                      }
                      else {
                        v1133 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v1132);
                      }
                      uint64_t v1134 = *v1133;
                      if ((*(unsigned char *)(v1134 + 3) & 1) == 0) {
                        uint64_t v1134 = *(void *)(v1134 + 24);
                      }
                      uint64_t v1135 = *(void *)(v1134 + 8);
                      if (**(_WORD **)(v1135 + 16) != 121) {
                        goto LABEL_839;
                      }
                      if (!v1131) {
                        goto LABEL_839;
                      }
                      uint64_t v1136 = *(void *)(*(void *)(v1135 + 32) + 48);
                      if (!v1136) {
                        goto LABEL_839;
                      }
                      unsigned int v1137 = *(_DWORD *)(v1125 + 48);
                      if (v1137 - 4 >= 2)
                      {
                        if (v1137 > 0xD) {
                          goto LABEL_839;
                        }
                        int v1681 = 1 << v1137;
                        if ((v1681 & 0xC0C) != 0)
                        {
                          uint64_t v1138 = *(void *)(*(void *)(v1135 + 32) + 48);
                          uint64_t v1136 = v1131;
LABEL_1661:
                          if (sub_1CB844168(v1136, -1.0) && sub_1CB844168(v1138, 1.0))
                          {
                            uint64_t v1682 = *a1;
                            *(void *)&long long v1821 = v40;
                            DWORD2(v1821) = 0;
                            LODWORD(v1839) = HIDWORD(v1804);
                            DWORD2(v1840) = 0;
                            v1683 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v1682 + 32))(v1682, 184, &v1821, 1, &v1839, 1, 0);
                            uint64_t v1684 = *a1;
                            LODWORD(v1821) = v39;
                            DWORD2(v1821) = 1;
                            unint64_t v1839 = (unint64_t)v1683;
                            *(void *)&long long v1840 = v1685;
                            DWORD2(v1840) = 1;
                            (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v1684 + 32))(v1684, 177, &v1821, 1, &v1839, 1, *((unsigned __int16 *)this + 22) | 0x100000000);
                            goto LABEL_852;
                          }
                          if (sub_1CB844168(v1136, 1.0) && sub_1CB844168(v1138, -1.0))
                          {
                            uint64_t v516 = *a1;
                            LODWORD(v1821) = v39;
                            DWORD2(v1821) = 1;
                            LODWORD(v1839) = HIDWORD(v1804);
                            DWORD2(v1840) = 0;
                            uint64_t v514 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v516 + 32);
                            unint64_t v515 = (unint64_t *)&v1821;
                            uint64_t v517 = 184;
                            uint64_t v518 = 0;
                            goto LABEL_1904;
                          }
LABEL_839:
                          sub_1CB906D7C((uint64_t)__s1);
                          goto LABEL_840;
                        }
                        if ((v1681 & 0x3000) == 0) {
                          goto LABEL_839;
                        }
                      }
                      uint64_t v1138 = v1131;
                      goto LABEL_1661;
                    }
                    uint64_t v1648 = *a1;
                    LODWORD(v1821) = v39;
                    DWORD2(v1821) = 1;
                    LODWORD(v1839) = HIDWORD(v1804);
                    DWORD2(v1840) = 0;
                    LODWORD(v1841) = v1804;
                    int v1843 = 0;
                    (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v1648 + 32))(v1648, 165, &v1821, 1, &v1839, 2, *((unsigned __int16 *)this + 22) | 0x100000000);
LABEL_852:
                    llvm::MachineInstr::eraseFromParent(this);
                    goto LABEL_853;
                  }
                  uint64_t v643 = *(void *)(*(void *)(v627 + 32) + 48);
                  uint64_t v1803 = v643;
                  if (!v643) {
                    goto LABEL_826;
                  }
                  HIDWORD(v1804) = v621;
LABEL_855:
                  if (sub_1CB8BE1E4(v643 + 24, -1.0))
                  {
                    uint64_t v516 = *a1;
                    LODWORD(v1821) = v39;
                    DWORD2(v1821) = 1;
                    LODWORD(v1839) = HIDWORD(v1804);
                    DWORD2(v1840) = 0;
                    uint64_t v444 = *((unsigned __int16 *)this + 22);
LABEL_1903:
                    uint64_t v518 = v444 | 0x100000000;
                    uint64_t v514 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v516 + 32);
                    unint64_t v515 = (unint64_t *)&v1821;
                    uint64_t v517 = 177;
LABEL_1904:
                    uint64_t v519 = 1;
LABEL_671:
                    v514(v516, v517, v515, 1, &v1839, v519, v518);
                    goto LABEL_852;
                  }
                  goto LABEL_826;
                }
                HIDWORD(v1804) = v609;
LABEL_847:
                if (*(_UNKNOWN **)(v640 + 32) == &unk_1CFB2E344) {
                  uint64_t v641 = *(void *)(v640 + 40);
                }
                else {
                  uint64_t v641 = v640 + 24;
                }
                if ((*(unsigned char *)(v641 + 28) & 7) == 3 && (~*((unsigned __int16 *)this + 22) & 0x70) == 0)
                {
LABEL_851:
                  uint64_t v642 = *a1;
                  LODWORD(v1839) = v39;
                  LODWORD(v1840) = 1;
                  sub_1CC7374CC(v642, &v1839, 0.0);
                  goto LABEL_852;
                }
                goto LABEL_803;
              }
              HIDWORD(v1804) = v597;
LABEL_844:
              if (sub_1CB8BE1E4(v638 + 24, 1.0))
              {
                unsigned int v639 = HIDWORD(v1804);
LABEL_1860:
                sub_1CBA0A7C8((void *)v34, this, v639, a1[2]);
LABEL_853:
                sub_1CB906D7C((uint64_t)__s1);
                return 1;
              }
              goto LABEL_784;
            }
            uint64_t v1802 = *(void *)(*(void *)(v591 + 32) + 48);
            if (!v1802) {
              goto LABEL_765;
            }
            uint64_t v1276 = *(unsigned int *)(v46 + 68);
            if ((v1276 & 0x80000000) != 0) {
              v1277 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v1276 & 0x7FFFFFFF) + 8);
            }
            else {
              v1277 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v1276);
            }
            uint64_t v1278 = *v1277;
            if ((*(unsigned char *)(v1278 + 3) & 1) == 0) {
              uint64_t v1278 = *(void *)(v1278 + 24);
            }
            uint64_t v1279 = *(void *)(v1278 + 8);
            if (**(_WORD **)(v1279 + 16) != 121)
            {
              uint64_t v1803 = 0;
              goto LABEL_765;
            }
            uint64_t v589 = *(void *)(*(void *)(v1279 + 32) + 48);
            uint64_t v1803 = v589;
            if (!v589)
            {
LABEL_765:
              if ((v39 & 0x80000000) == 0) {
                goto LABEL_763;
              }
              goto LABEL_766;
            }
LABEL_2290:
            sub_1CB87DDC4((uint64_t)&v1825, (uint64_t *)(v589 + 32));
            sub_1CBAACDB0((uint64_t)&v1839, v41, (uint64_t)&v1824);
            sub_1CB87DEE4(&v1825);
            sub_1CB87DDC4((uint64_t)&v1819 + 8, (uint64_t *)(v1802 + 32));
            sub_1CBAACDB0((uint64_t)&v1821, v41, (uint64_t)&v1819);
            sub_1CB87DEE4((uint64_t *)&v1819 + 1);
            sub_1CB87DDC4((uint64_t)&v1817, (uint64_t *)&v1840);
            sub_1CB9C2E60((uint64_t)&v1816, (uint64_t)&v1821, 1);
            uint64_t v1487 = *a1;
            int v1807 = v39;
            LODWORD(v1808) = 1;
            v1489 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v33, (llvm::LLVMContext *)&v1816, v1488);
            (*(void (**)(uint64_t, int *, const llvm::detail::DoubleAPFloat *))(*(void *)v1487 + 24))(v1487, &v1807, v1489);
            llvm::MachineInstr::eraseFromParent(this);
            sub_1CB87DEE4(&v1817);
            sub_1CB87DEE4((uint64_t *)&v1821 + 1);
            v933 = (uint64_t *)&v1840;
            goto LABEL_2291;
          }
        }
        uint64_t v51 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
        goto LABEL_759;
      case 166:
        uint64_t v126 = *(void *)(*a1 + 8);
        BOOL v127 = *(void **)(v126 + 40);
        uint64_t v128 = (_DWORD *)*((void *)this + 4);
        uint64_t v129 = (const char *)v128[9];
        int v130 = v128[1];
        if (v130 < 0 && (v130 & 0x7FFFFFFFu) < (unint64_t)*((unsigned int *)v127 + 108)) {
          uint64_t v131 = *(uint64_t **)(v127[53] + 8 * (v130 & 0x7FFFFFFF));
        }
        else {
          uint64_t v131 = 0;
        }
        if ((v129 & 0x80000000) != 0) {
          uint64_t v132 = (uint64_t *)(v127[3] + 16 * (v129 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v132 = (uint64_t *)(v127[34] + 8 * (void)v129);
        }
        unint64_t v133 = (const char *)v128[17];
        uint64_t v134 = *v132;
        if ((*(unsigned char *)(v134 + 3) & 1) == 0) {
          uint64_t v134 = *(void *)(v134 + 24);
        }
        uint64_t v135 = *(void *)(v134 + 8);
        if (**(_WORD **)(v135 + 16) == 121) {
          uint64_t v136 = *(void *)(*(void *)(v135 + 32) + 48);
        }
        else {
          uint64_t v136 = 0;
        }
        if ((v133 & 0x80000000) != 0) {
          unint64_t v137 = (uint64_t *)(v127[3] + 16 * (v133 & 0x7FFFFFFF) + 8);
        }
        else {
          unint64_t v137 = (uint64_t *)(v127[34] + 8 * (void)v133);
        }
        uint64_t v138 = *v137;
        if ((*(unsigned char *)(v138 + 3) & 1) == 0) {
          uint64_t v138 = *(void *)(v138 + 24);
        }
        uint64_t v139 = *(void *)(v138 + 8);
        uint64_t v1772 = v128[1];
        if (**(_WORD **)(v139 + 16) == 121) {
          uint64_t v140 = *(void *)(*(void *)(v139 + 32) + 48);
        }
        else {
          uint64_t v140 = 0;
        }
        uint64_t v1794 = v128[25];
        uint64_t v141 = &unk_1CFB2E308;
        v1758 = *(llvm::ConstantFP *****)(*a1 + 8);
        v1761 = v131;
        uint64_t v142 = *(void *)(v126 + 8);
        if (v131 == (uint64_t *)129) {
          uint64_t v141 = &unk_1CFB2E2E0;
        }
        v1767 = v141;
        long long v143 = *(_OWORD *)(v142 + 1024);
        *(_OWORD *)__s1 = *(_OWORD *)(v142 + 1008);
        long long v1829 = v143;
        uint64_t v144 = *(void *)(v142 + 1048);
        unint64_t v1830 = *(void *)(v142 + 1040);
        uint64_t v1831 = v144;
        uint64_t v145 = *(void *)(v142 + 1056);
        uint64_t v1832 = v145;
        if (v145) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v145 + 8), 1uLL, memory_order_relaxed);
        }
        LOWORD(v1833) = *(_WORD *)(v142 + 1064);
        if (*(char *)(v142 + 1095) < 0)
        {
          sub_1CB8BDF7C((uint64_t)v1834, *(const void **)(v142 + 1072), *(void *)(v142 + 1080));
        }
        else
        {
          *(_OWORD *)v1834 = *(_OWORD *)(v142 + 1072);
          *(void *)&v1834[16] = *(void *)(v142 + 1088);
        }
        *(_OWORD *)v1835 = *(_OWORD *)(v142 + 1096);
        *(_OWORD *)&v1835[16] = *(_OWORD *)(v142 + 1112);
        sub_1CB906B78((uint64_t)v1836, (uint64_t *)(v142 + 1128));
        if (*(char *)(v142 + 1311) < 0)
        {
          sub_1CB8BDF7C((uint64_t)&v1837, *(const void **)(v142 + 1288), *(void *)(v142 + 1296));
        }
        else
        {
          long long v1837 = *(_OWORD *)(v142 + 1288);
          uint64_t v1838 = *(void *)(v142 + 1304);
        }
        char v146 = BYTE4(__s1[1]);
        size_t v1782 = *((unsigned __int16 *)this + 22);
        uint64_t v147 = *a1;
        *(void *)(v147 + 40) = *((void *)this + 3);
        *(void *)(v147 + 48) = this;
        sub_1CC6DEE8C(a1[3], v129, (uint64_t)&v1824);
        sub_1CC6DEE8C(a1[3], v133, (uint64_t)&v1821);
        int v148 = v1825;
        if (!v1825) {
          goto LABEL_946;
        }
        if (v1825 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1824) == v148) {
            goto LABEL_946;
          }
        }
        else if (v1824 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v1825))
        {
          goto LABEL_946;
        }
        int v283 = DWORD2(v1821);
        if (DWORD2(v1821))
        {
          if (DWORD2(v1821) > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1821) != v283) {
              goto LABEL_948;
            }
          }
          else if ((void)v1821 != 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v1821))
          {
LABEL_948:
            if (v136 && v140)
            {
              uint64_t v687 = (const llvm::detail::DoubleAPFloat *)(v136 + 32);
              if (*(_UNKNOWN **)(v136 + 32) == &unk_1CFB2E344) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1817, v687);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1817, v687);
              }
              sub_1CBAACDB0((uint64_t)&v1819, v1767, (uint64_t)&v1816);
              if ((_UNKNOWN *)v1817 == &unk_1CFB2E344)
              {
                sub_1CB845718(v1818);
              }
              else if ((*(_DWORD *)(v1817 + 8) - 64) <= 0xFFFFFF7F && v1818[0])
              {
                MEMORY[0x1D25D9CB0](v1818[0], 0x1000C8000313F17);
              }
              v688 = (const llvm::detail::DoubleAPFloat *)(v140 + 32);
              if (*(_UNKNOWN **)(v140 + 32) == &unk_1CFB2E344) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1811, v688);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1811, v688);
              }
              sub_1CBAACDB0((uint64_t)&v1813, v1767, (uint64_t)&v1810);
              if ((_UNKNOWN *)v1811 == &unk_1CFB2E344)
              {
                sub_1CB845718(v1812);
              }
              else if ((*(_DWORD *)(v1811 + 8) - 64) <= 0xFFFFFF7F && v1812[0])
              {
                MEMORY[0x1D25D9CB0](v1812[0], 0x1000C8000313F17);
              }
              if ((sub_1CB9C2E60((uint64_t)&v1819, (uint64_t)&v1813, 1) & 0x10) == 0)
              {
                uint64_t v690 = *a1;
                unint64_t v1839 = (unint64_t)v1761;
                LODWORD(v1840) = 0;
                unsigned int v691 = llvm::ConstantFP::get(***v1758, (llvm::LLVMContext *)&v1819, v689);
                uint64_t v692 = (*(uint64_t (**)(uint64_t, unint64_t *, const llvm::detail::DoubleAPFloat *))(*(void *)v690 + 24))(v690, &v1839, v691);
                uint64_t v693 = *a1;
                int v1807 = v1772;
                LODWORD(v1808) = 1;
                LODWORD(v1839) = v1794;
                DWORD2(v1840) = 0;
                uint64_t v1841 = v692;
                uint64_t v1842 = v694;
                int v1843 = 1;
                (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, size_t))(*(void *)v693 + 32))(v693, 163, &v1807, 1, &v1839, 2, v1782 | 0x100000000);
                llvm::MachineInstr::eraseFromParent(this);
                if ((_UNKNOWN *)v1814 == &unk_1CFB2E344)
                {
                  sub_1CB845718(v1815);
                }
                else if ((*(_DWORD *)(v1814 + 8) - 64) <= 0xFFFFFF7F && v1815[0])
                {
                  MEMORY[0x1D25D9CB0](v1815[0], 0x1000C8000313F17);
                }
                uint64_t v695 = *((void *)&v1819 + 1);
                if (*((_UNKNOWN **)&v1819 + 1) != &unk_1CFB2E344) {
                  goto LABEL_962;
                }
                goto LABEL_2111;
              }
              if ((_UNKNOWN *)v1814 == &unk_1CFB2E344)
              {
                sub_1CB845718(v1815);
              }
              else if ((*(_DWORD *)(v1814 + 8) - 64) <= 0xFFFFFF7F && v1815[0])
              {
                MEMORY[0x1D25D9CB0](v1815[0], 0x1000C8000313F17);
              }
              if (*((_UNKNOWN **)&v1819 + 1) == &unk_1CFB2E344)
              {
                sub_1CB845718(v1820);
              }
              else if ((*(_DWORD *)(*((void *)&v1819 + 1) + 8) - 64) <= 0xFFFFFF7F && v1820[0])
              {
                MEMORY[0x1D25D9CB0](v1820[0], 0x1000C8000313F17);
              }
              goto LABEL_1010;
            }
            if (v136)
            {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)a1[2] + 32))(a1[2], this);
              llvm::MachineOperand::setReg(*((void *)this + 4) + 32, v133);
              llvm::MachineOperand::setReg(*((void *)this + 4) + 64, v129);
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)a1[2] + 40))(a1[2], this);
              goto LABEL_996;
            }
            if (!v140) {
              goto LABEL_1010;
            }
            uint64_t v841 = v140 + 24;
            if (sub_1CB8BE1E4(v140 + 24, 1.0))
            {
              uint64_t v842 = *a1;
              char v76 = 1;
              LODWORD(v1819) = v1772;
              DWORD2(v1819) = 1;
              LODWORD(v1839) = v129;
              DWORD2(v1840) = 0;
              LODWORD(v1841) = v1794;
              int v1843 = 0;
              (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, size_t))(*(void *)v842 + 32))(v842, 163, &v1819, 1, &v1839, 2, v1782 | 0x100000000);
LABEL_1204:
              llvm::MachineInstr::eraseFromParent(this);
              goto LABEL_997;
            }
            if (sub_1CB8BE1E4(v140 + 24, -1.0))
            {
              uint64_t v1107 = *a1;
              *(void *)&long long v1819 = v1761;
              DWORD2(v1819) = 0;
              LODWORD(v1839) = v129;
              DWORD2(v1840) = 0;
              char v76 = 1;
              v1108 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, size_t))(*(void *)v1107 + 32))(v1107, 177, &v1819, 1, &v1839, 1, v1782 | 0x100000000);
              uint64_t v1109 = *a1;
              LODWORD(v1819) = v1772;
              DWORD2(v1819) = 1;
              unint64_t v1839 = (unint64_t)v1108;
              *(void *)&long long v1840 = v1110;
              DWORD2(v1840) = 1;
              LODWORD(v1841) = v1794;
              int v1843 = 0;
              (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, size_t))(*(void *)v1109 + 32))(v1109, 163, &v1819, 1, &v1839, 2, v1782 | 0x100000000);
              goto LABEL_1204;
            }
            if ((v129 & 0x80000000) != 0) {
              v1204 = (uint64_t *)(v127[3] + 16 * (v129 & 0x7FFFFFFF) + 8);
            }
            else {
              v1204 = (uint64_t *)(v127[34] + 8 * (void)v129);
            }
            uint64_t v1205 = *v1204;
            if ((*(unsigned char *)(v1205 + 3) & 1) == 0) {
              uint64_t v1205 = *(void *)(v1205 + 24);
            }
            uint64_t v1206 = *(void *)(v1205 + 8);
            int v1207 = **(unsigned __int16 **)(v1206 + 16);
            if (v1207 == 177)
            {
              int v1208 = *(_DWORD *)(*(void *)(v1206 + 32) + 36);
              if (v1208 != v1794)
              {
                v1385 = (const llvm::detail::DoubleAPFloat *)(v140 + 32);
                if (*(_UNKNOWN **)(v140 + 32) == &unk_1CFB2E344) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v1819 + 1, v1385);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1819 + 8, v1385);
                }
                llvm::APFloat::APFloat((uint64_t)&v1839, *((void **)&v1819 + 1), "-1.0", 4uLL);
                if (*((_UNKNOWN **)&v1819 + 1) == &unk_1CFB2E344) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1817, (const llvm::detail::DoubleAPFloat *)((char *)&v1819 + 8));
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1817, (const llvm::detail::IEEEFloat *)((char *)&v1819 + 8));
                }
                sub_1CB9C2E60((uint64_t)&v1816, (uint64_t)&v1839, 1);
                if ((_UNKNOWN *)v1840 == &unk_1CFB2E344)
                {
                  sub_1CB845718((uint64_t *)&v1840 + 1);
                }
                else if ((*(_DWORD *)(v1840 + 8) - 64) <= 0xFFFFFF7F && *((void *)&v1840 + 1))
                {
                  MEMORY[0x1D25D9CB0](*((void *)&v1840 + 1), 0x1000C8000313F17);
                }
                uint64_t v1387 = *a1;
                unint64_t v1839 = (unint64_t)v1761;
                LODWORD(v1840) = 0;
                v1388 = llvm::ConstantFP::get(***v1758, (llvm::LLVMContext *)&v1816, v1386);
                uint64_t v1389 = (*(uint64_t (**)(uint64_t, unint64_t *, const llvm::detail::DoubleAPFloat *))(*(void *)v1387 + 24))(v1387, &v1839, v1388);
                uint64_t v1390 = *a1;
                LODWORD(v1813) = v1772;
                LODWORD(v1814) = 1;
                LODWORD(v1839) = v1208;
                DWORD2(v1840) = 0;
                uint64_t v1841 = v1389;
                uint64_t v1842 = v1391;
                int v1843 = 1;
                LODWORD(v1844) = v1794;
                int v1846 = 0;
                (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, size_t))(*(void *)v1390 + 32))(v1390, 166, &v1813, 1, &v1839, 3, v1782 | 0x100000000);
                llvm::MachineInstr::eraseFromParent(this);
                if ((_UNKNOWN *)v1817 == &unk_1CFB2E344)
                {
                  sub_1CB845718(v1818);
                }
                else if ((*(_DWORD *)(v1817 + 8) - 64) <= 0xFFFFFF7F && v1818[0])
                {
                  MEMORY[0x1D25D9CB0](v1818[0], 0x1000C8000313F17);
                }
                uint64_t v695 = *((void *)&v1819 + 1);
                if (*((_UNKNOWN **)&v1819 + 1) != &unk_1CFB2E344) {
                  goto LABEL_962;
                }
                goto LABEL_2111;
              }
            }
            v1209 = (const llvm::detail::DoubleAPFloat *)(v140 + 32);
            v1210 = *(void **)(v140 + 32);
            if (v1210 == &unk_1CFB2E344) {
              uint64_t v841 = *(void *)(v140 + 40);
            }
            if ((*(unsigned char *)(v841 + 28) & 7) == 3 && ((BYTE4(__s1[1]) & 1) != 0 || (v1782 & 0x50) == 0x50))
            {
              uint64_t v1417 = *a1;
              char v76 = 1;
              LODWORD(v1819) = *(_DWORD *)(*((void *)this + 4) + 4);
              DWORD2(v1819) = 1;
              LODWORD(v1839) = v1794;
              DWORD2(v1840) = 0;
              (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v1417 + 32))(v1417, 19, &v1819, 1, &v1839, 1, 0);
              llvm::MachineInstr::eraseFromParent(this);
LABEL_997:
              if (v1823 >= 0x41 && v1822) {
                MEMORY[0x1D25D9CB0](v1822, 0x1000C8000313F17);
              }
              if (DWORD2(v1821) >= 0x41 && (void)v1821) {
                MEMORY[0x1D25D9CB0](v1821, 0x1000C8000313F17);
              }
              if (v1827 >= 0x41 && v1826) {
                MEMORY[0x1D25D9CB0](v1826, 0x1000C8000313F17);
              }
              if (v1825 >= 0x41 && v1824) {
                MEMORY[0x1D25D9CB0](v1824, 0x1000C8000313F17);
              }
              sub_1CB906D7C((uint64_t)__s1);
              goto LABEL_1002;
            }
            if (!(v146 & 1 | ((~v1782 & 0x500) == 0))) {
              goto LABEL_1010;
            }
            if ((v1794 & 0x80000000) != 0) {
              v1211 = (uint64_t *)(v127[3] + 16 * (v1794 & 0x7FFFFFFF) + 8);
            }
            else {
              v1211 = (uint64_t *)(v127[34] + 8 * v1794);
            }
            uint64_t v1212 = *v1211;
            if ((*(unsigned char *)(v1212 + 3) & 1) == 0) {
              uint64_t v1212 = *(void *)(v1212 + 24);
            }
            uint64_t v1213 = *(void *)(v1212 + 8);
            int v1214 = **(unsigned __int16 **)(v1213 + 16);
            if (v1214 == 165)
            {
              uint64_t v1215 = *(void *)(v1213 + 32);
              uint64_t v1216 = *(unsigned int *)(v1215 + 36);
              if ((v1216 & 0x80000000) != 0) {
                v1217 = (uint64_t *)(v127[3] + 16 * (v1216 & 0x7FFFFFFF) + 8);
              }
              else {
                v1217 = (uint64_t *)(v127[34] + 8 * v1216);
              }
              uint64_t v1218 = *(unsigned int *)(v1215 + 68);
              uint64_t v1219 = *v1217;
              if ((*(unsigned char *)(v1219 + 3) & 1) == 0) {
                uint64_t v1219 = *(void *)(v1219 + 24);
              }
              uint64_t v1220 = *(void *)(v1219 + 8);
              if (**(_WORD **)(v1220 + 16) == 121) {
                uint64_t v1221 = *(void *)(*(void *)(v1220 + 32) + 48);
              }
              else {
                uint64_t v1221 = 0;
              }
              if ((v1218 & 0x80000000) != 0) {
                v1222 = (uint64_t *)(v127[3] + 16 * (v1218 & 0x7FFFFFFF) + 8);
              }
              else {
                v1222 = (uint64_t *)(v127[34] + 8 * v1218);
              }
              uint64_t v1223 = *v1222;
              if ((*(unsigned char *)(v1223 + 3) & 1) == 0) {
                uint64_t v1223 = *(void *)(v1223 + 24);
              }
              uint64_t v1224 = *(void *)(v1223 + 8);
              if (**(_WORD **)(v1224 + 16) != 121)
              {
                BOOL v1225 = 0;
                BOOL v1226 = v1221 == 0;
                goto LABEL_1807;
              }
              uint64_t v1547 = *(void *)(*(void *)(v1224 + 32) + 48);
              BOOL v1226 = v1221 == 0;
              BOOL v1225 = v1547 != 0;
              if (v1221 || !v1547)
              {
LABEL_1807:
                if (!v1226 && !v1225 && v129 == v1218)
                {
                  if (v1210 == &unk_1CFB2E344) {
                    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1817, v1209);
                  }
                  else {
                    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1817, v1209);
                  }
                  sub_1CBAACDB0((uint64_t)&v1819, v1767, (uint64_t)&v1816);
                  if ((_UNKNOWN *)v1817 == &unk_1CFB2E344)
                  {
                    sub_1CB845718(v1818);
                  }
                  else if ((*(_DWORD *)(v1817 + 8) - 64) <= 0xFFFFFF7F && v1818[0])
                  {
                    MEMORY[0x1D25D9CB0](v1818[0], 0x1000C8000313F17);
                  }
                  v1227 = *(void **)(v1221 + 32);
                  v1228 = (const llvm::detail::DoubleAPFloat *)(v1221 + 32);
                  goto LABEL_1815;
                }
                goto LABEL_2406;
              }
              if (v129 == v1216)
              {
                if (v1210 == &unk_1CFB2E344) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1817, v1209);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1817, v1209);
                }
                sub_1CBAACDB0((uint64_t)&v1819, v1767, (uint64_t)&v1816);
                if ((_UNKNOWN *)v1817 == &unk_1CFB2E344)
                {
                  sub_1CB845718(v1818);
                }
                else if ((*(_DWORD *)(v1817 + 8) - 64) <= 0xFFFFFF7F && v1818[0])
                {
                  MEMORY[0x1D25D9CB0](v1818[0], 0x1000C8000313F17);
                }
                v1227 = *(void **)(v1547 + 32);
                v1228 = (const llvm::detail::DoubleAPFloat *)(v1547 + 32);
LABEL_1815:
                if (v1227 == &unk_1CFB2E344) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1811, v1228);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1811, v1228);
                }
                sub_1CBAACDB0((uint64_t)&v1813, v1767, (uint64_t)&v1810);
                if ((_UNKNOWN *)v1811 == &unk_1CFB2E344)
                {
                  sub_1CB845718(v1812);
                }
                else if ((*(_DWORD *)(v1811 + 8) - 64) <= 0xFFFFFF7F && v1812[0])
                {
                  MEMORY[0x1D25D9CB0](v1812[0], 0x1000C8000313F17);
                }
                if (*((_UNKNOWN **)&v1819 + 1) == &unk_1CFB2E344) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1808, (const llvm::detail::DoubleAPFloat *)((char *)&v1819 + 8));
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1808, (const llvm::detail::IEEEFloat *)((char *)&v1819 + 8));
                }
                sub_1CB88A708((uint64_t)&v1807, (uint64_t)&v1813, 1);
                uint64_t v1229 = *a1;
                unint64_t v1839 = (unint64_t)v1761;
                LODWORD(v1840) = 0;
                v1231 = llvm::ConstantFP::get(***v1758, (llvm::LLVMContext *)&v1807, v1230);
                uint64_t v1232 = (*(uint64_t (**)(uint64_t, unint64_t *, const llvm::detail::DoubleAPFloat *))(*(void *)v1229 + 24))(v1229, &v1839, v1231);
                uint64_t v1233 = *a1;
                int v1805 = v1772;
                int v1806 = 1;
                LODWORD(v1839) = v129;
                DWORD2(v1840) = 0;
                uint64_t v1841 = v1232;
                uint64_t v1842 = v1234;
                int v1843 = 1;
                (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, size_t))(*(void *)v1233 + 32))(v1233, 165, &v1805, 1, &v1839, 2, v1782 | 0x100000000);
                llvm::MachineInstr::eraseFromParent(this);
                uint64_t v1235 = v1808;
                if ((_UNKNOWN *)v1808 != &unk_1CFB2E344) {
                  goto LABEL_1822;
                }
                goto LABEL_3214;
              }
            }
LABEL_2406:
            if (v1207 == 165)
            {
              uint64_t v1548 = *(void *)(v1206 + 32);
              uint64_t v1549 = *(unsigned int *)(v1548 + 36);
              if ((v1549 & 0x80000000) != 0) {
                uint64_t v1550 = v127[3] + 16 * (v1549 & 0x7FFFFFFF) + 8;
              }
              else {
                uint64_t v1550 = v127[34] + 8 * v1549;
              }
              uint64_t v1551 = *(unsigned int *)(v1548 + 68);
              uint64_t v1552 = *(void *)v1550;
              if ((*(unsigned char *)(*(void *)v1550 + 3) & 1) == 0) {
                uint64_t v1552 = *(void *)(v1552 + 24);
              }
              uint64_t v1553 = *(void *)(v1552 + 8);
              if (**(_WORD **)(v1553 + 16) == 121) {
                uint64_t v1554 = *(void *)(*(void *)(v1553 + 32) + 48);
              }
              else {
                uint64_t v1554 = 0;
              }
              if ((v1551 & 0x80000000) != 0) {
                v1555 = (uint64_t *)(v127[3] + 16 * (v1551 & 0x7FFFFFFF) + 8);
              }
              else {
                v1555 = (uint64_t *)(v127[34] + 8 * v1551);
              }
              uint64_t v1556 = *v1555;
              if ((*(unsigned char *)(v1556 + 3) & 1) == 0) {
                uint64_t v1556 = *(void *)(v1556 + 24);
              }
              uint64_t v1557 = *(void *)(v1556 + 8);
              if (**(_WORD **)(v1557 + 16) == 121)
              {
                uint64_t v1573 = *(void *)(*(void *)(v1557 + 32) + 48);
                BOOL v1559 = v1554 == 0;
                BOOL v1558 = v1573 != 0;
                if (!v1554 && v1573)
                {
                  if (v1549 != v1794)
                  {
                    if (v1210 == &unk_1CFB2E344) {
                      llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1817, v1209);
                    }
                    else {
                      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1817, v1209);
                    }
                    sub_1CBAACDB0((uint64_t)&v1819, v1767, (uint64_t)&v1816);
                    if ((_UNKNOWN *)v1817 == &unk_1CFB2E344)
                    {
                      sub_1CB845718(v1818);
                    }
                    else if ((*(_DWORD *)(v1817 + 8) - 64) <= 0xFFFFFF7F && v1818[0])
                    {
                      MEMORY[0x1D25D9CB0](v1818[0], 0x1000C8000313F17);
                    }
                    v1598 = (const llvm::detail::DoubleAPFloat *)(v1573 + 32);
                    if (*(_UNKNOWN **)(v1573 + 32) == &unk_1CFB2E344) {
                      llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1811, v1598);
                    }
                    else {
                      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1811, v1598);
                    }
                    sub_1CBAACDB0((uint64_t)&v1813, v1767, (uint64_t)&v1810);
                    if ((_UNKNOWN *)v1811 == &unk_1CFB2E344)
                    {
                      sub_1CB845718(v1812);
                    }
                    else if ((*(_DWORD *)(v1811 + 8) - 64) <= 0xFFFFFF7F && v1812[0])
                    {
                      MEMORY[0x1D25D9CB0](v1812[0], 0x1000C8000313F17);
                    }
                    if (*((_UNKNOWN **)&v1819 + 1) == &unk_1CFB2E344) {
                      llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1808, (const llvm::detail::DoubleAPFloat *)((char *)&v1819 + 8));
                    }
                    else {
                      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1808, (const llvm::detail::IEEEFloat *)((char *)&v1819 + 8));
                    }
                    sub_1CB9C2E60((uint64_t)&v1807, (uint64_t)&v1813, 1);
                    uint64_t v1599 = *a1;
                    unint64_t v1839 = (unint64_t)v1761;
                    LODWORD(v1840) = 0;
                    v1601 = llvm::ConstantFP::get(***v1758, (llvm::LLVMContext *)&v1807, v1600);
                    uint64_t v1564 = (*(uint64_t (**)(uint64_t, unint64_t *, const llvm::detail::DoubleAPFloat *))(*(void *)v1599 + 24))(v1599, &v1839, v1601);
                    uint64_t v1566 = *a1;
                    int v1805 = v1772;
                    int v1806 = 1;
                    LODWORD(v1839) = v1549;
LABEL_2433:
                    DWORD2(v1840) = 0;
                    uint64_t v1841 = v1564;
                    uint64_t v1842 = v1565;
                    int v1843 = 1;
                    LODWORD(v1844) = v1794;
                    int v1846 = 0;
                    (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, size_t))(*(void *)v1566 + 32))(v1566, 166, &v1805, 1, &v1839, 3, v1782 | 0x100000000);
                    llvm::MachineInstr::eraseFromParent(this);
                    uint64_t v1235 = v1808;
                    if ((_UNKNOWN *)v1808 != &unk_1CFB2E344)
                    {
LABEL_1822:
                      if ((*(_DWORD *)(v1235 + 8) - 64) <= 0xFFFFFF7F && v1809[0]) {
                        MEMORY[0x1D25D9CB0](v1809[0], 0x1000C8000313F17);
                      }
                      goto LABEL_1823;
                    }
LABEL_3214:
                    sub_1CB845718(v1809);
LABEL_1823:
                    if ((_UNKNOWN *)v1814 != &unk_1CFB2E344)
                    {
                      if ((*(_DWORD *)(v1814 + 8) - 64) > 0xFFFFFF7F) {
                        goto LABEL_2456;
                      }
                      uint64_t v1236 = v1815[0];
                      if (!v1815[0]) {
                        goto LABEL_2456;
                      }
                      goto LABEL_3205;
                    }
                    v1668 = v1815;
                    goto LABEL_3194;
                  }
                  goto LABEL_2446;
                }
              }
              else
              {
                BOOL v1558 = 0;
                BOOL v1559 = v1554 == 0;
              }
              if (!v1559 && !v1558 && v1551 != v1794)
              {
                if (v1210 == &unk_1CFB2E344) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1817, v1209);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1817, v1209);
                }
                sub_1CBAACDB0((uint64_t)&v1819, v1767, (uint64_t)&v1816);
                if ((_UNKNOWN *)v1817 == &unk_1CFB2E344)
                {
                  sub_1CB845718(v1818);
                }
                else if ((*(_DWORD *)(v1817 + 8) - 64) <= 0xFFFFFF7F && v1818[0])
                {
                  MEMORY[0x1D25D9CB0](v1818[0], 0x1000C8000313F17);
                }
                v1560 = (const llvm::detail::DoubleAPFloat *)(v1554 + 32);
                if (*(_UNKNOWN **)(v1554 + 32) == &unk_1CFB2E344) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1811, v1560);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1811, v1560);
                }
                sub_1CBAACDB0((uint64_t)&v1813, v1767, (uint64_t)&v1810);
                if ((_UNKNOWN *)v1811 == &unk_1CFB2E344)
                {
                  sub_1CB845718(v1812);
                }
                else if ((*(_DWORD *)(v1811 + 8) - 64) <= 0xFFFFFF7F && v1812[0])
                {
                  MEMORY[0x1D25D9CB0](v1812[0], 0x1000C8000313F17);
                }
                if (*((_UNKNOWN **)&v1819 + 1) == &unk_1CFB2E344) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1808, (const llvm::detail::DoubleAPFloat *)((char *)&v1819 + 8));
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1808, (const llvm::detail::IEEEFloat *)((char *)&v1819 + 8));
                }
                sub_1CB9C2E60((uint64_t)&v1807, (uint64_t)&v1813, 1);
                uint64_t v1561 = *a1;
                unint64_t v1839 = (unint64_t)v1761;
                LODWORD(v1840) = 0;
                v1563 = llvm::ConstantFP::get(***v1758, (llvm::LLVMContext *)&v1807, v1562);
                uint64_t v1564 = (*(uint64_t (**)(uint64_t, unint64_t *, const llvm::detail::DoubleAPFloat *))(*(void *)v1561 + 24))(v1561, &v1839, v1563);
                uint64_t v1566 = *a1;
                int v1805 = v1772;
                int v1806 = 1;
                LODWORD(v1839) = v1551;
                goto LABEL_2433;
              }
            }
LABEL_2446:
            if (v129 == v1794)
            {
              if (v1210 == &unk_1CFB2E344) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v1819 + 1, v1209);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1819 + 8, v1209);
              }
              llvm::APFloat::APFloat((uint64_t)&v1839, *((void **)&v1819 + 1), "1.0", 3uLL);
              if (*((_UNKNOWN **)&v1819 + 1) == &unk_1CFB2E344) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1817, (const llvm::detail::DoubleAPFloat *)((char *)&v1819 + 8));
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1817, (const llvm::detail::IEEEFloat *)((char *)&v1819 + 8));
              }
              sub_1CB88A708((uint64_t)&v1816, (uint64_t)&v1839, 1);
LABEL_2452:
              if ((_UNKNOWN *)v1840 == &unk_1CFB2E344)
              {
                sub_1CB845718((uint64_t *)&v1840 + 1);
              }
              else if ((*(_DWORD *)(v1840 + 8) - 64) <= 0xFFFFFF7F && *((void *)&v1840 + 1))
              {
                MEMORY[0x1D25D9CB0](*((void *)&v1840 + 1), 0x1000C8000313F17);
              }
              uint64_t v1575 = *a1;
              unint64_t v1839 = (unint64_t)v1761;
              LODWORD(v1840) = 0;
              v1576 = llvm::ConstantFP::get(***v1758, (llvm::LLVMContext *)&v1816, v1574);
              uint64_t v1577 = (*(uint64_t (**)(uint64_t, unint64_t *, const llvm::detail::DoubleAPFloat *))(*(void *)v1575 + 24))(v1575, &v1839, v1576);
              uint64_t v1578 = *a1;
              LODWORD(v1813) = v1772;
              LODWORD(v1814) = 1;
              LODWORD(v1839) = v129;
              DWORD2(v1840) = 0;
              uint64_t v1841 = v1577;
              uint64_t v1842 = v1579;
              int v1843 = 1;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, size_t))(*(void *)v1578 + 32))(v1578, 165, &v1813, 1, &v1839, 2, v1782 | 0x100000000);
              llvm::MachineInstr::eraseFromParent(this);
              if ((_UNKNOWN *)v1817 != &unk_1CFB2E344)
              {
                if ((*(_DWORD *)(v1817 + 8) - 64) > 0xFFFFFF7F || (uint64_t v1236 = v1818[0]) == 0)
                {
LABEL_2456:
                  uint64_t v695 = *((void *)&v1819 + 1);
                  if (*((_UNKNOWN **)&v1819 + 1) != &unk_1CFB2E344)
                  {
LABEL_962:
                    if ((*(_DWORD *)(v695 + 8) - 64) <= 0xFFFFFF7F && v1820[0]) {
                      MEMORY[0x1D25D9CB0](v1820[0], 0x1000C8000313F17);
                    }
                    goto LABEL_996;
                  }
LABEL_2111:
                  sub_1CB845718(v1820);
                  goto LABEL_996;
                }
LABEL_3205:
                MEMORY[0x1D25D9CB0](v1236, 0x1000C8000313F17);
                goto LABEL_2456;
              }
              v1668 = v1818;
LABEL_3194:
              sub_1CB845718(v1668);
              goto LABEL_2456;
            }
            if (v1214 == 177 && v129 == *(_DWORD *)(*(void *)(v1213 + 32) + 36))
            {
              if (v1210 == &unk_1CFB2E344) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v1819 + 1, v1209);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1819 + 8, v1209);
              }
              llvm::APFloat::APFloat((uint64_t)&v1839, *((void **)&v1819 + 1), "1.0", 3uLL);
              if (*((_UNKNOWN **)&v1819 + 1) == &unk_1CFB2E344) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1817, (const llvm::detail::DoubleAPFloat *)((char *)&v1819 + 8));
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1817, (const llvm::detail::IEEEFloat *)((char *)&v1819 + 8));
              }
              sub_1CB9C2E3C((uint64_t)&v1816, (uint64_t)&v1839, 1);
              goto LABEL_2452;
            }
LABEL_1010:
            char v76 = 0;
            goto LABEL_997;
          }
        }
LABEL_946:
        if (BYTE4(__s1[1])) {
          goto LABEL_972;
        }
        if ((v1782 & 0x10) != 0)
        {
          if ((v1782 & 0x40) != 0) {
            goto LABEL_972;
          }
          BOOL v696 = &v1826;
          unsigned int v697 = v1827 - 1;
          if (v1827 >= 0x41) {
            BOOL v696 = (uint64_t *)(v1826 + 8 * (v697 >> 6));
          }
          if (((unint64_t)*v696 >> v697))
          {
            v698 = &v1822;
            unsigned int v699 = v1823 - 1;
            if (v1823 >= 0x41) {
              v698 = (uint64_t *)(v1822 + 8 * (v699 >> 6));
            }
            if (((unint64_t)*v698 >> v699))
            {
LABEL_972:
              sub_1CC6EE548(a1[2], (uint64_t)v127, v1772);
              uint64_t v700 = (*(uint64_t (**)(void))(**(void **)(*v127 + 16) + 176))(*(void *)(*v127 + 16));
              if ((v1772 & 0x80000000) != 0) {
                unsigned int v701 = (uint64_t *)(v127[3] + 16 * (v1772 & 0x7FFFFFFF) + 8);
              }
              else {
                unsigned int v701 = (uint64_t *)(v127[34] + 8 * v1772);
              }
              uint64_t v702 = *v701;
              if (*v701)
              {
                do
                {
                  uint64_t v703 = *(void *)(v702 + 24);
                  if ((v1794 - 1) <= 0x3FFFFFFE) {
                    llvm::MachineOperand::substPhysReg((unsigned int *)v702, v1794, v700);
                  }
                  else {
                    llvm::MachineOperand::setReg(v702, v1794);
                  }
                  uint64_t v702 = v703;
                }
                while (v703);
              }
              uint64_t v704 = a1[2];
              int v705 = *(char **)(v704 + 8);
              v706 = *(char **)(v704 + 16);
              uint64_t v707 = 24;
              if (v706 == v705) {
                uint64_t v707 = 28;
              }
              uint64_t v708 = *(unsigned int *)(v704 + v707);
              unsigned int v709 = *(unint64_t **)(v704 + 16);
              if (v708)
              {
                uint64_t v710 = 0;
                while (*(void *)&v706[v710] >= 0xFFFFFFFFFFFFFFFELL)
                {
                  v710 += 8;
                  if (8 * v708 == v710) {
                    goto LABEL_993;
                  }
                }
                unsigned int v709 = (unint64_t *)&v706[v710];
              }
              v711 = (unint64_t *)&v706[8 * v708];
              if (v709 == v711) {
                goto LABEL_993;
              }
              unint64_t v712 = *v709;
LABEL_988:
              (*(void (**)(uint64_t, unint64_t))(*(void *)v704 + 40))(v704, v712);
              int v713 = v709 + 1;
              while (v713 != v711)
              {
                unint64_t v714 = *v713++;
                unint64_t v712 = v714;
                if (v714 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  unsigned int v709 = v713 - 1;
                  goto LABEL_988;
                }
              }
              int v705 = *(char **)(v704 + 8);
              v706 = *(char **)(v704 + 16);
LABEL_993:
              if (v706 != v705)
              {
                uint64_t v802 = *(unsigned int *)(v704 + 24);
                if (v802 >= 0x21
                  && 4 * (*(_DWORD *)(v704 + 28) - *(_DWORD *)(v704 + 32)) < v802)
                {
                  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(v704 + 8));
                  goto LABEL_995;
                }
                memset(v706, 255, 8 * v802);
              }
              *(_DWORD *)(v704 + 28) = 0;
              *(_DWORD *)(v704 + 32) = 0;
LABEL_995:
              llvm::MachineInstr::eraseFromParent(this);
LABEL_996:
              char v76 = 1;
              goto LABEL_997;
            }
          }
        }
        goto LABEL_948;
      case 167:
      case 168:
      case 169:
      case 170:
      case 171:
      case 172:
      case 173:
      case 174:
      case 176:
      case 180:
      case 181:
      case 186:
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
      case 192:
        goto LABEL_840;
      case 175:
        uint64_t v1100 = *a1;
        *(void *)(v1100 + 40) = *((void *)this + 3);
        *(void *)(v1100 + 48) = this;
        uint64_t v1101 = *((void *)this + 4);
        int v119 = *(_DWORD *)(v1101 + 4);
        if ((v119 & 0x80000000) == 0) {
          goto LABEL_840;
        }
        uint64_t v120 = *(void *)(*a1 + 8);
        uint64_t v1102 = *(void *)(v120 + 40);
        if ((v119 & 0x7FFFFFFFu) >= *(_DWORD *)(v1102 + 432)
          || *(void *)(*(void *)(v1102 + 424) + 8 * (v119 & 0x7FFFFFFF)) != 257)
        {
          goto LABEL_840;
        }
        int v122 = *(_DWORD *)(v1101 + 36);
        uint64_t v123 = *(void *)(v1102 + 24);
        uint64_t v124 = *(void *)(v1102 + 272);
        int v125 = 175;
        goto LABEL_1613;
      case 177:
        uint64_t v264 = *a1;
        *(void *)(v264 + 40) = *((void *)this + 3);
        *(void *)(v264 + 48) = this;
        uint64_t v265 = *(void *)(*a1 + 8);
        uint64_t v266 = *(void *)(v265 + 40);
        uint64_t v267 = *((void *)this + 4);
        unsigned int v268 = *(_DWORD *)(v267 + 4);
        uint64_t v269 = *(unsigned int *)(v267 + 36);
        if ((v269 & 0x80000000) != 0) {
          uint64_t v270 = (uint64_t *)(*(void *)(v266 + 24) + 16 * (v269 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v270 = (uint64_t *)(*(void *)(v266 + 272) + 8 * v269);
        }
        uint64_t v271 = *v270;
        if (v271
          && ((*(unsigned char *)(v271 + 3) & 1) != 0 || (uint64_t v271 = *(void *)(v271 + 24)) != 0 && (*(unsigned char *)(v271 + 3) & 1) != 0))
        {
          uint64_t v272 = *(void *)(v271 + 8);
        }
        else
        {
          uint64_t v272 = 0;
        }
        if ((v268 & 0x80000000) != 0 && (v268 & 0x7FFFFFFF) < *(_DWORD *)(v266 + 432)) {
          uint64_t v273 = *(void *)(*(void *)(v266 + 424) + 8 * (v268 & 0x7FFFFFFF));
        }
        else {
          uint64_t v273 = 0;
        }
        sub_1CBAB1D20((uint64_t)__s1, 177, v273, v269, *(void *)(v266 + 24), *(void *)(v266 + 272));
        if ((_BYTE)v1830)
        {
          v1293 = *(llvm::ConstantFP ****)v265;
          goto LABEL_1952;
        }
        BOOL v275 = (*((_WORD *)this + 22) & 0x40 | *(_WORD *)(*(void *)(v265 + 8) + 1020) & 1) != 0;
        if (!v272) {
          goto LABEL_840;
        }
        int v276 = **(unsigned __int16 **)(v272 + 16);
        if ((v276 - 163) > 3 || v276 == 164) {
          goto LABEL_709;
        }
        if ((v269 & 0x80000000) != 0) {
          uint64_t v277 = (uint64_t *)(*(void *)(v266 + 24) + 16 * (v269 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v277 = (uint64_t *)(*(void *)(v266 + 272) + 8 * v269);
        }
        uint64_t v278 = *v277;
        if (!v278) {
          goto LABEL_706;
        }
        do
        {
          if ((*(unsigned char *)(v278 + 3) & 1) == 0)
          {
            while (1)
            {
              uint64_t v278 = *(void *)(v278 + 24);
              if (!v278) {
                goto LABEL_709;
              }
              if ((*(unsigned char *)(v278 + 3) & 1) == 0) {
                goto LABEL_706;
              }
            }
          }
          uint64_t v278 = *(void *)(v278 + 24);
        }
        while (v278);
LABEL_706:
        if ((sub_1CBAA87B0(v268, v266) & 1) != 0 || !sub_1CBAA87B0(v269, v266)) {
          goto LABEL_840;
        }
        int v276 = **(unsigned __int16 **)(v272 + 16);
LABEL_709:
        if (v276 == 177)
        {
          uint64_t v64 = *a1;
          LODWORD(v1839) = v268;
          LODWORD(v1840) = 1;
          int v65 = *(_DWORD *)(*(void *)(v272 + 32) + 36);
          goto LABEL_884;
        }
        if (v275)
        {
          if ((v269 & 0x80000000) != 0) {
            v533 = (uint64_t *)(*(void *)(v266 + 24) + 16 * (v269 & 0x7FFFFFFF) + 8);
          }
          else {
            v533 = (uint64_t *)(*(void *)(v266 + 272) + 8 * v269);
          }
          uint64_t v534 = *v533;
          if (v534)
          {
            if ((*(unsigned char *)(v534 + 3) & 1) != 0
              || (uint64_t v534 = *(void *)(v534 + 24)) != 0 && (*(unsigned char *)(v534 + 3) & 1) != 0)
            {
              uint64_t v535 = *(void *)(v534 + 8);
              if (v535)
              {
                if (**(_WORD **)(v535 + 16) == 163 && *(_DWORD *)(v535 + 40) == 3)
                {
                  uint64_t v536 = *(void *)(v535 + 32);
                  int v537 = *(_DWORD *)(v536 + 36);
                  int v538 = *(_DWORD *)(v536 + 68);
                  uint64_t v539 = *a1;
                  LODWORD(v1821) = v268;
                  DWORD2(v1821) = 1;
                  *(void *)&long long v1819 = v273;
                  DWORD2(v1819) = 0;
                  LODWORD(v1839) = v537;
                  DWORD2(v1840) = 0;
                  __s1[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v539 + 32))(v539, 177, &v1819, 1, &v1839, 1, *((unsigned __int16 *)this + 22) | 0x100000000);
                  __s1[1] = v540;
                  LODWORD(v1829) = 1;
                  uint64_t v541 = *a1;
                  unint64_t v1816 = v273;
                  LODWORD(v1817) = 0;
                  LODWORD(v1824) = v538;
                  LODWORD(v1826) = 0;
                  *((void *)&v1829 + 1) = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(void *)v541 + 32))(v541, 177, &v1816, 1, &v1824, 1, *((unsigned __int16 *)this + 22) | 0x100000000);
                  unint64_t v1830 = v542;
                  LODWORD(v1831) = 1;
                  int v226 = *(void (**)(void))(*(void *)v539 + 32);
                  goto LABEL_886;
                }
              }
            }
          }
          if ((v269 & 0x80000000) != 0) {
            v1608 = (uint64_t *)(*(void *)(v266 + 24) + 16 * (v269 & 0x7FFFFFFF) + 8);
          }
          else {
            v1608 = (uint64_t *)(*(void *)(v266 + 272) + 8 * v269);
          }
          uint64_t v1609 = *v1608;
          if (v1609)
          {
            if ((*(unsigned char *)(v1609 + 3) & 1) != 0
              || (uint64_t v1609 = *(void *)(v1609 + 24)) != 0 && (*(unsigned char *)(v1609 + 3) & 1) != 0)
            {
              uint64_t v1610 = *(void *)(v1609 + 8);
              if (v1610)
              {
                if (**(_WORD **)(v1610 + 16) == 165 && *(_DWORD *)(v1610 + 40) == 3)
                {
                  uint64_t v1611 = *(void *)(v1610 + 32);
                  int v1612 = *(_DWORD *)(v1611 + 36);
                  LODWORD(v1611) = *(_DWORD *)(v1611 + 68);
                  uint64_t v1613 = *a1;
                  LODWORD(v1824) = v268;
                  LODWORD(v1825) = 1;
                  LODWORD(__s1[0]) = v1612;
                  LODWORD(v1829) = 0;
                  *(void *)&long long v1821 = v273;
                  DWORD2(v1821) = 0;
                  LODWORD(v1839) = v1611;
                  DWORD2(v1840) = 0;
                  *((void *)&v1829 + 1) = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v1613 + 32))(v1613, 177, &v1821, 1, &v1839, 1, *((unsigned __int16 *)this + 22) | 0x100000000);
                  unint64_t v1830 = v1614;
                  LODWORD(v1831) = 1;
                  int v226 = *(void (**)(void))(*(void *)v1613 + 32);
                  goto LABEL_886;
                }
              }
            }
          }
          if (v276 == 166)
          {
            if ((v269 & 0x80000000) != 0) {
              v1643 = (uint64_t *)(*(void *)(v266 + 24) + 16 * (v269 & 0x7FFFFFFF) + 8);
            }
            else {
              v1643 = (uint64_t *)(*(void *)(v266 + 272) + 8 * v269);
            }
            uint64_t v1644 = *v1643;
            if (!v1644) {
              goto LABEL_840;
            }
            while ((*(unsigned char *)(v1644 + 3) & 1) != 0)
            {
              uint64_t v1644 = *(void *)(v1644 + 24);
              if (!v1644) {
                goto LABEL_840;
              }
            }
            while (1)
            {
              uint64_t v1644 = *(void *)(v1644 + 24);
              if (!v1644) {
                break;
              }
              if ((*(unsigned char *)(v1644 + 3) & 1) == 0) {
                goto LABEL_840;
              }
            }
            uint64_t v1686 = *a1;
            LODWORD(v1821) = v268;
            DWORD2(v1821) = 1;
            uint64_t v1687 = *(void *)(v272 + 32);
            LODWORD(__s1[0]) = *(_DWORD *)(v1687 + 36);
            LODWORD(v1829) = 0;
            *(void *)&long long v1819 = v273;
            DWORD2(v1819) = 0;
            LODWORD(v1839) = *(_DWORD *)(v1687 + 68);
            DWORD2(v1840) = 0;
            *((void *)&v1829 + 1) = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v1686 + 32))(v1686, 177, &v1819, 1, &v1839, 1, *((unsigned __int16 *)this + 22) | 0x100000000);
            unint64_t v1830 = v1688;
            LODWORD(v1831) = 1;
            uint64_t v1689 = *a1;
            unint64_t v1816 = v273;
            LODWORD(v1817) = 0;
            LODWORD(v1824) = *(_DWORD *)(*(void *)(v272 + 32) + 100);
            LODWORD(v1826) = 0;
            uint64_t v1832 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(void *)v1689 + 32))(v1689, 177, &v1816, 1, &v1824, 1, *((unsigned __int16 *)this + 22) | 0x100000000);
            uint64_t v1833 = v1690;
            *(_DWORD *)v1834 = 1;
            int v226 = *(void (**)(void))(*(void *)v1686 + 32);
            goto LABEL_886;
          }
        }
        if ((v269 & 0x80000000) != 0) {
          v1621 = (uint64_t *)(*(void *)(v266 + 24) + 16 * (v269 & 0x7FFFFFFF) + 8);
        }
        else {
          v1621 = (uint64_t *)(*(void *)(v266 + 272) + 8 * v269);
        }
        uint64_t v1622 = *v1621;
        if (v1622)
        {
          if ((*(unsigned char *)(v1622 + 3) & 1) != 0
            || (uint64_t v1622 = *(void *)(v1622 + 24)) != 0 && (*(unsigned char *)(v1622 + 3) & 1) != 0)
          {
            uint64_t v1623 = *(void *)(v1622 + 8);
            if (v1623 && **(_WORD **)(v1623 + 16) == 178 && *(_DWORD *)(v1623 + 40) == 2)
            {
              uint64_t v1636 = *(unsigned int *)(*(void *)(v1623 + 32) + 36);
              v1637 = (uint64_t *)((v1636 & 0x80000000) != 0
                                ? *(void *)(v266 + 24) + 16 * (v1636 & 0x7FFFFFFF) + 8
                                : *(void *)(v266 + 272) + 8 * v1636);
              uint64_t v1638 = *v1637;
              if (v1638)
              {
                if ((*(unsigned char *)(v1638 + 3) & 1) != 0
                  || (uint64_t v1638 = *(void *)(v1638 + 24)) != 0 && (*(unsigned char *)(v1638 + 3) & 1) != 0)
                {
                  uint64_t v1639 = *(void *)(v1638 + 8);
                  if (v1639)
                  {
                    if ((v1636 & 0x80000000) != 0) {
                      v1640 = (uint64_t *)(*(void *)(v266 + 24) + 16 * (v1636 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      v1640 = (uint64_t *)(*(void *)(v266 + 272) + 8 * v1636);
                    }
                    uint64_t v1641 = *v1640;
                    if (v1641
                      && ((*(unsigned char *)(v1641 + 3) & 1) != 0
                       || (uint64_t v1641 = *(void *)(v1641 + 24)) != 0 && (*(unsigned char *)(v1641 + 3) & 1) != 0)
                      && (uint64_t v1588 = *(void *)(v1641 + 8)) != 0
                      && **(_WORD **)(v1588 + 16) == 177
                      && *(_DWORD *)(v1588 + 40) == 2)
                    {
LABEL_2789:
                      int v1646 = *(_DWORD *)(*(void *)(v1588 + 32) + 36);
                      uint64_t v1647 = *a1;
                      LODWORD(v1839) = v268;
                      LODWORD(v1840) = 1;
                      LODWORD(__s1[0]) = v1646;
                      LODWORD(v1829) = 0;
                      int v226 = *(void (**)(void))(*(void *)v1647 + 32);
                    }
                    else
                    {
                      uint64_t v1589 = *a1;
                      LODWORD(v1824) = v268;
                      LODWORD(v1825) = 1;
                      if ((v1636 & 0x80000000) != 0 && (v1636 & 0x7FFFFFFF) < *(_DWORD *)(v266 + 432)) {
                        uint64_t v1642 = *(void *)(*(void *)(v266 + 424) + 8 * (v1636 & 0x7FFFFFFF));
                      }
                      else {
                        uint64_t v1642 = 0;
                      }
                      *(void *)&long long v1821 = v1642;
                      DWORD2(v1821) = 0;
                      LODWORD(v1839) = v1636;
                      DWORD2(v1840) = 0;
                      v1591 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v1589 + 32))(v1589, 177, &v1821, 1, &v1839, 1, *(unsigned __int16 *)(v1639 + 44) | 0x100000000);
LABEL_2774:
                      __s1[0] = v1591;
                      __s1[1] = v1592;
                      LODWORD(v1829) = 1;
                      int v226 = *(void (**)(void))(*(void *)v1589 + 32);
                    }
                    goto LABEL_886;
                  }
                }
              }
            }
          }
        }
        if ((v269 & 0x80000000) != 0) {
          v1624 = (uint64_t *)(*(void *)(v266 + 24) + 16 * (v269 & 0x7FFFFFFF) + 8);
        }
        else {
          v1624 = (uint64_t *)(*(void *)(v266 + 272) + 8 * v269);
        }
        uint64_t v1625 = *v1624;
        if (v1625)
        {
          if ((*(unsigned char *)(v1625 + 3) & 1) != 0
            || (uint64_t v1625 = *(void *)(v1625 + 24)) != 0 && (*(unsigned char *)(v1625 + 3) & 1) != 0)
          {
            uint64_t v1626 = *(void *)(v1625 + 8);
            if (v1626 && **(_WORD **)(v1626 + 16) == 179 && *(_DWORD *)(v1626 + 40) == 2)
            {
              uint64_t v1627 = *(unsigned int *)(*(void *)(v1626 + 32) + 36);
              v1628 = (uint64_t *)((v1627 & 0x80000000) != 0
                                ? *(void *)(v266 + 24) + 16 * (v1627 & 0x7FFFFFFF) + 8
                                : *(void *)(v266 + 272) + 8 * v1627);
              uint64_t v1629 = *v1628;
              if (v1629)
              {
                if ((*(unsigned char *)(v1629 + 3) & 1) != 0
                  || (uint64_t v1629 = *(void *)(v1629 + 24)) != 0 && (*(unsigned char *)(v1629 + 3) & 1) != 0)
                {
                  uint64_t v1630 = *(void *)(v1629 + 8);
                  if (v1630)
                  {
                    if ((v1627 & 0x80000000) != 0) {
                      v1631 = (uint64_t *)(*(void *)(v266 + 24) + 16 * (v1627 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      v1631 = (uint64_t *)(*(void *)(v266 + 272) + 8 * v1627);
                    }
                    uint64_t v1632 = *v1631;
                    if (v1632)
                    {
                      if ((*(unsigned char *)(v1632 + 3) & 1) != 0
                        || (uint64_t v1632 = *(void *)(v1632 + 24)) != 0 && (*(unsigned char *)(v1632 + 3) & 1) != 0)
                      {
                        uint64_t v1633 = *(void *)(v1632 + 8);
                        if (v1633)
                        {
                          if (**(_WORD **)(v1633 + 16) == 177 && *(_DWORD *)(v1633 + 40) == 2)
                          {
                            int v1664 = *(_DWORD *)(*(void *)(v1633 + 32) + 36);
                            uint64_t v863 = *a1;
                            LODWORD(v1839) = v268;
                            LODWORD(v1840) = 1;
                            LODWORD(__s1[0]) = v1664;
                            LODWORD(v1829) = 0;
                            goto LABEL_1230;
                          }
                        }
                      }
                    }
                    if ((sub_1CBAA87B0(v268, v266) & 1) == 0)
                    {
                      v1634 = (uint64_t *)((v269 & 0x80000000) != 0
                                        ? *(void *)(v266 + 24) + 16 * (v269 & 0x7FFFFFFF) + 8
                                        : *(void *)(v266 + 272) + 8 * v269);
                      uint64_t v1635 = *v1634;
                      if (v1635)
                      {
                        while ((*(unsigned char *)(v1635 + 3) & 1) != 0)
                        {
                          uint64_t v1635 = *(void *)(v1635 + 24);
                          if (!v1635) {
                            goto LABEL_840;
                          }
                        }
                        while (1)
                        {
                          uint64_t v1635 = *(void *)(v1635 + 24);
                          if (!v1635) {
                            break;
                          }
                          if ((*(unsigned char *)(v1635 + 3) & 1) == 0) {
                            goto LABEL_840;
                          }
                        }
                        uint64_t v1593 = *a1;
                        LODWORD(v1824) = v268;
                        LODWORD(v1825) = 1;
                        if ((v1627 & 0x80000000) != 0 && (v1627 & 0x7FFFFFFF) < *(_DWORD *)(v266 + 432)) {
                          uint64_t v1645 = *(void *)(*(void *)(v266 + 424) + 8 * (v1627 & 0x7FFFFFFF));
                        }
                        else {
                          uint64_t v1645 = 0;
                        }
                        *(void *)&long long v1821 = v1645;
                        DWORD2(v1821) = 0;
                        LODWORD(v1839) = v1627;
                        DWORD2(v1840) = 0;
                        v1595 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v1593 + 32))(v1593, 177, &v1821, 1, &v1839, 1, *(unsigned __int16 *)(v1630 + 44) | 0x100000000);
                        goto LABEL_2505;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_840;
      case 178:
        uint64_t v327 = *a1;
        *(void *)(v327 + 40) = *((void *)this + 3);
        *(void *)(v327 + 48) = this;
        uint64_t v328 = *((void *)this + 4);
        int v329 = *(_DWORD *)(v328 + 4);
        if ((v329 & 0x80000000) == 0) {
          goto LABEL_840;
        }
        uint64_t v330 = *a1;
        uint64_t v331 = *(void *)(*a1 + 8);
        uint64_t v332 = *(void *)(v331 + 40);
        uint64_t v333 = v329 & 0x7FFFFFFF;
        if ((v329 & 0x7FFFFFFFu) >= *(_DWORD *)(v332 + 432) || *(void *)(*(void *)(v332 + 424) + 8 * v333) != 257) {
          goto LABEL_840;
        }
        uint64_t v334 = *(unsigned int *)(v328 + 36);
        if ((v334 & 0x80000000) != 0) {
          int v335 = (uint64_t *)(*(void *)(v332 + 24) + 16 * (v334 & 0x7FFFFFFF) + 8);
        }
        else {
          int v335 = (uint64_t *)(*(void *)(v332 + 272) + 8 * v334);
        }
        uint64_t v336 = *v335;
        if ((*(unsigned char *)(v336 + 3) & 1) == 0) {
          uint64_t v336 = *(void *)(v336 + 24);
        }
        __int16 v337 = *(_WORD *)(*(void *)(v331 + 8) + 1020);
        uint64_t v338 = *(void *)(v336 + 8);
        if (**(_WORD **)(v338 + 16) == 121)
        {
          uint64_t v1185 = *(void *)(*(void *)(v338 + 32) + 48);
          if (v1185)
          {
            v1187 = *(void **)(v1185 + 32);
            v1186 = (const llvm::detail::DoubleAPFloat *)(v1185 + 32);
            if (v1187 == &unk_1CFB2E344) {
              llvm::detail::DoubleAPFloat::DoubleAPFloat(&__s1[1], v1186);
            }
            else {
              llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&__s1[1], v1186);
            }
            v1188 = ***(llvm::ConstantFP ****)v331;
            llvm::APFloat::convert((uint64_t)__s1, &unk_1CFB2E308, 1, &v1824);
            uint64_t v1189 = *a1;
            LODWORD(v1839) = v329;
            LODWORD(v1840) = 1;
            v1191 = llvm::ConstantFP::get(v1188, (llvm::LLVMContext *)__s1, v1190);
            (*(void (**)(uint64_t, unint64_t *, const llvm::detail::DoubleAPFloat *))(*(void *)v1189 + 24))(v1189, &v1839, v1191);
            llvm::MachineInstr::eraseFromParent(this);
            v995 = __s1[1];
            if (__s1[1] == &unk_1CFB2E344)
            {
LABEL_3122:
              sub_1CB845718((uint64_t *)&v1829);
              return 1;
            }
            goto LABEL_1413;
          }
        }
        LODWORD(v1819) = 0;
        if ((v334 & 0x80000000) != 0) {
          int v339 = (uint64_t *)(*(void *)(v332 + 24) + 16 * (v334 & 0x7FFFFFFF) + 8);
        }
        else {
          int v339 = (uint64_t *)(*(void *)(v332 + 272) + 8 * v334);
        }
        uint64_t v340 = *v339;
        if (!v340) {
          goto LABEL_433;
        }
        if ((*(unsigned char *)(v340 + 3) & 1) == 0)
        {
          uint64_t v340 = *(void *)(v340 + 24);
          if (!v340 || (*(unsigned char *)(v340 + 3) & 1) == 0) {
            goto LABEL_433;
          }
        }
        uint64_t v341 = *(void *)(v340 + 8);
        if (!v341 || **(_WORD **)(v341 + 16) != 179 || *(_DWORD *)(v341 + 40) != 2) {
          goto LABEL_433;
        }
        uint64_t v1192 = *(unsigned int *)(*(void *)(v341 + 32) + 36);
        LODWORD(v1819) = v1192;
        v1193 = (uint64_t *)((v1192 & 0x80000000) != 0
                          ? *(void *)(v332 + 24) + 16 * (v1192 & 0x7FFFFFFF) + 8
                          : *(void *)(v332 + 272) + 8 * v1192);
        uint64_t v1194 = *v1193;
        if (!v1194) {
          goto LABEL_433;
        }
        if ((*(unsigned char *)(v1194 + 3) & 1) == 0)
        {
          uint64_t v1194 = *(void *)(v1194 + 24);
          if (!v1194 || (*(unsigned char *)(v1194 + 3) & 1) == 0) {
            goto LABEL_433;
          }
        }
        uint64_t v1195 = *(void *)(v1194 + 8);
        if (!v1195) {
          goto LABEL_433;
        }
        if (**(_WORD **)(v1195 + 16) == 318) {
          goto LABEL_1748;
        }
        uint64_t v1196 = *(void *)(*(void *)(v332 + 24) + 16 * v333 + 8);
        if (v1196)
        {
          while ((*(unsigned char *)(v1196 + 3) & 1) != 0)
          {
            uint64_t v1196 = *(void *)(v1196 + 24);
            if (!v1196) {
              goto LABEL_1747;
            }
          }
          for (uint64_t i = *(void *)(v1196 + 8); ; uint64_t i = *(void *)(v1196 + 8))
          {
            unsigned int v1198 = **(unsigned __int16 **)(i + 16);
            if (v1198 > 0x104)
            {
              uint64_t v1200 = v1198 - 314;
              if (v1200 > 0x2A) {
                goto LABEL_1763;
              }
              if (((1 << (v1198 - 58)) & 0x40000200003) != 0) {
                goto LABEL_1756;
              }
              if (v1200 != 22)
              {
LABEL_1763:
                if (v1198 == 261) {
                  goto LABEL_1756;
                }
                goto LABEL_1748;
              }
              goto LABEL_2193;
            }
            if (v1198 - 163 > 0x38 || ((1 << (v1198 + 93)) & 0x18800000038540DLL) == 0) {
              break;
            }
            do
            {
LABEL_1756:
              uint64_t v1196 = *(void *)(v1196 + 24);
              if (!v1196) {
                goto LABEL_1747;
              }
            }
            while ((*(unsigned char *)(v1196 + 3) & 1) != 0 || *(void *)(v1196 + 8) == i);
          }
          if (v1198 != 51)
          {
            if (v1198 == 85) {
              goto LABEL_1756;
            }
            goto LABEL_1748;
          }
LABEL_2193:
          uint64_t v1448 = *(void *)(i + 32);
          if (*(_DWORD *)(v1448 + 132) != v329 && *(_DWORD *)(v1448 + 164) != v329) {
            goto LABEL_1756;
          }
        }
        else
        {
LABEL_1747:
          if (sub_1CBAB2190(v1192, v332, 1, 0)) {
            goto LABEL_433;
          }
        }
LABEL_1748:
        if (v337)
        {
          LODWORD(v1839) = v329;
          LODWORD(v1840) = 1;
          LODWORD(__s1[0]) = v1192;
          LODWORD(v1829) = 0;
          int v226 = *(void (**)(void))(*(void *)v330 + 32);
          goto LABEL_886;
        }
LABEL_433:
        v1824 = 0;
        __s1[0] = &v1819;
        __s1[1] = &v1819;
        *(void *)&long long v1829 = &v1824;
        LODWORD(v1839) = v334;
        if (sub_1CBACACE8((uint64_t)__s1, v332, (unsigned int *)&v1839))
        {
          int v1449 = v1819;
          v1450 = (uint64_t *)((v1819 & 0x80000000) != 0
                            ? *(void *)(v332 + 24) + 16 * (v1819 & 0x7FFFFFFF) + 8
                            : *(void *)(v332 + 272) + 8 * (unint64_t)v1819);
          uint64_t v1451 = *v1450;
          if (v1451)
          {
            if ((*(unsigned char *)(v1451 + 3) & 1) != 0
              || (uint64_t v1451 = *(void *)(v1451 + 24)) != 0 && (*(unsigned char *)(v1451 + 3) & 1) != 0)
            {
              uint64_t v1452 = *(void *)(v1451 + 8);
              if (v1452)
              {
                if (**(_WORD **)(v1452 + 16) != 318)
                {
                  uint64_t v1453 = *(void *)(*(void *)(v332 + 24) + 16 * v333 + 8);
                  if (v1453)
                  {
                    while ((*(unsigned char *)(v1453 + 3) & 1) != 0)
                    {
                      uint64_t v1453 = *(void *)(v1453 + 24);
                      if (!v1453) {
                        goto LABEL_2205;
                      }
                    }
                    for (uint64_t j = *(void *)(v1453 + 8); ; uint64_t j = *(void *)(v1453 + 8))
                    {
                      unsigned int v1456 = **(unsigned __int16 **)(j + 16);
                      if (v1456 > 0x104)
                      {
                        uint64_t v1458 = v1456 - 314;
                        if (v1458 > 0x2A) {
                          goto LABEL_2221;
                        }
                        if (((1 << (v1456 - 58)) & 0x40000200003) != 0) {
                          goto LABEL_2214;
                        }
                        if (v1458 != 22)
                        {
LABEL_2221:
                          if (v1456 == 261) {
                            goto LABEL_2214;
                          }
                          goto LABEL_2206;
                        }
                        goto LABEL_2322;
                      }
                      if (v1456 - 163 > 0x38 || ((1 << (v1456 + 93)) & 0x18800000038540DLL) == 0) {
                        break;
                      }
                      do
                      {
LABEL_2214:
                        uint64_t v1453 = *(void *)(v1453 + 24);
                        if (!v1453) {
                          goto LABEL_2205;
                        }
                      }
                      while ((*(unsigned char *)(v1453 + 3) & 1) != 0 || *(void *)(v1453 + 8) == j);
                    }
                    if (v1456 != 51)
                    {
                      if (v1456 == 85) {
                        goto LABEL_2214;
                      }
                      goto LABEL_2206;
                    }
LABEL_2322:
                    uint64_t v1494 = *(void *)(j + 32);
                    if (*(_DWORD *)(v1494 + 132) != v329 && *(_DWORD *)(v1494 + 164) != v329) {
                      goto LABEL_2214;
                    }
                  }
                  else
                  {
LABEL_2205:
                    if (sub_1CBAB2190(v1819, v332, 1, 0)) {
                      goto LABEL_434;
                    }
                  }
                }
LABEL_2206:
                if (v337)
                {
                  uint64_t v1454 = *a1;
                  LODWORD(v1839) = v329;
                  LODWORD(v1840) = 1;
                  LODWORD(__s1[0]) = v1449;
                  LODWORD(v1829) = 0;
                  int v226 = *(void (**)(void))(*(void *)v1454 + 32);
                  goto LABEL_886;
                }
              }
            }
          }
        }
LABEL_434:
        if ((v334 & 0x80000000) != 0) {
          uint64_t v342 = (uint64_t *)(*(void *)(v332 + 24) + 16 * (v334 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v342 = (uint64_t *)(*(void *)(v332 + 272) + 8 * v334);
        }
        uint64_t v343 = *v342;
        if ((*(unsigned char *)(v343 + 3) & 1) == 0) {
          uint64_t v343 = *(void *)(v343 + 24);
        }
        uint64_t v344 = *(void *)(v343 + 8);
        if ((**(_WORD **)(v344 + 16) & 0xFFFE) != 0xB6) {
          goto LABEL_840;
        }
        int v345 = *(_DWORD *)(*(void *)(v344 + 32) + 36);
        if (v345 < 0 && (v345 & 0x7FFFFFFFu) < *(_DWORD *)(v332 + 432)) {
          uint64_t v346 = *(void *)(*(void *)(v332 + 424) + 8 * (v345 & 0x7FFFFFFF));
        }
        else {
          uint64_t v346 = 0;
        }
        *(void *)&long long v1821 = v346;
        if ((v337 & 1) == 0)
        {
          uint64_t v348 = sub_1CB8F1DC4((unint64_t *)&v1821);
          if (v347 == 1) {
          if (v348 != 8)
          }
            goto LABEL_840;
          int v345 = *(_DWORD *)(*(void *)(v344 + 32) + 36);
        }
        uint64_t v349 = *a1;
        LODWORD(v1839) = v329;
        LODWORD(v1840) = 1;
        LODWORD(__s1[0]) = v345;
        goto LABEL_448;
      case 179:
        uint64_t v409 = *a1;
        *(void *)(v409 + 40) = *((void *)this + 3);
        *(void *)(v409 + 48) = this;
        uint64_t v410 = *((void *)this + 4);
        unsigned int v268 = *(_DWORD *)(v410 + 4);
        if ((v268 & 0x80000000) == 0) {
          goto LABEL_840;
        }
        uint64_t v411 = *(void *)(*a1 + 8);
        uint64_t v412 = *(void *)(v411 + 40);
        if ((v268 & 0x7FFFFFFF) >= *(_DWORD *)(v412 + 432)
          || *(void *)(*(void *)(v412 + 424) + 8 * (v268 & 0x7FFFFFFF)) != 129)
        {
          goto LABEL_840;
        }
        uint64_t v413 = *(unsigned int *)(v410 + 36);
        sub_1CBAB1D20((uint64_t)__s1, 179, 129, *(_DWORD *)(v410 + 36), *(void *)(v412 + 24), *(void *)(v412 + 272));
        if ((_BYTE)v1830)
        {
          v1293 = *(llvm::ConstantFP ****)v411;
          goto LABEL_1952;
        }
        if ((v413 & 0x80000000) != 0) {
          v414 = (uint64_t *)(*(void *)(v412 + 24) + 16 * (v413 & 0x7FFFFFFF) + 8);
        }
        else {
          v414 = (uint64_t *)(*(void *)(v412 + 272) + 8 * v413);
        }
        uint64_t v415 = *v414;
        if ((*(unsigned char *)(v415 + 3) & 1) == 0) {
          uint64_t v415 = *(void *)(v415 + 24);
        }
        uint64_t v416 = *(void *)(v415 + 8);
        if ((v413 & 0x80000000) != 0) {
          v417 = (uint64_t *)(*(void *)(v412 + 24) + 16 * (v413 & 0x7FFFFFFF) + 8);
        }
        else {
          v417 = (uint64_t *)(*(void *)(v412 + 272) + 8 * v413);
        }
        uint64_t v418 = **(unsigned __int16 **)(v416 + 16);
        uint64_t v419 = *v417;
        if (*v417)
        {
          if ((*(unsigned char *)(v419 + 3) & 1) != 0
            || (uint64_t v419 = *(void *)(v419 + 24)) != 0 && (*(unsigned char *)(v419 + 3) & 1) != 0)
          {
            uint64_t v420 = *(void *)(v419 + 8);
            if (v420)
            {
              if (**(_WORD **)(v420 + 16) == 178 && *(_DWORD *)(v420 + 40) == 2)
              {
                LODWORD(v420) = *(_DWORD *)(*(void *)(v420 + 32) + 36);
                if ((v420 & 0x80000000) != 0
                  && (v420 & 0x7FFFFFFF) < *(_DWORD *)(v412 + 432)
                  && *(void *)(*(void *)(v412 + 424) + 8 * (v420 & 0x7FFFFFFF)) == 129)
                {
                  uint64_t v64 = *a1;
                  LODWORD(v1839) = v268;
LABEL_2309:
                  LODWORD(v1840) = 1;
                  LODWORD(__s1[0]) = v420;
                  goto LABEL_885;
                }
              }
            }
          }
        }
        if ((v413 & 0x80000000) != 0) {
          v421 = (uint64_t *)(*(void *)(v412 + 24) + 16 * (v413 & 0x7FFFFFFF) + 8);
        }
        else {
          v421 = (uint64_t *)(*(void *)(v412 + 272) + 8 * v413);
        }
        uint64_t v422 = *v421;
        if (!v422) {
          goto LABEL_840;
        }
        while ((*(unsigned char *)(v422 + 3) & 1) != 0)
        {
          uint64_t v422 = *(void *)(v422 + 24);
          if (!v422) {
            goto LABEL_840;
          }
        }
        while (1)
        {
          uint64_t v422 = *(void *)(v422 + 24);
          if (!v422) {
            break;
          }
          if ((*(unsigned char *)(v422 + 3) & 1) == 0) {
            goto LABEL_840;
          }
        }
        int v1691 = v418 & 0xFFFE;
        if (v1691 == 284)
        {
          uint64_t v1726 = *a1;
          LODWORD(__s1[0]) = v268;
          LODWORD(__s1[1]) = 1;
          v1727 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void, void, void))(*(void *)v1726 + 32))(v1726, v418, __s1, 1, 0, 0, 0);
          v1729 = v1728;
          llvm::MachineInstr::addOperand(v1728, v1727, (const llvm::MachineOperand *)(*(void *)(v416 + 32) + 32));
          llvm::MachineInstr::addOperand(v1729, v1727, (const llvm::MachineOperand *)(*(void *)(v416 + 32) + 64));
          llvm::MachineInstr::addOperand(v1729, v1727, (const llvm::MachineOperand *)(*(void *)(v416 + 32) + 96));
          llvm::MachineInstr::addOperand(v1729, v1727, (const llvm::MachineOperand *)(*(void *)(v416 + 32) + 128));
          v1730 = (const llvm::MachineOperand *)(*(void *)(v416 + 32) + 160);
        }
        else
        {
          if (v1691 != 286)
          {
            if (**(unsigned __int16 **)(v416 + 16) > 0xAEu)
            {
              if (**(unsigned __int16 **)(v416 + 16) <= 0x139u)
              {
                if (v418 != 175)
                {
                  if ((v418 == 177 || v418 == 184) && sub_1CBAA87B0(v268, v412))
                  {
                    uint64_t v1692 = *a1;
                    unint64_t v1839 = 129;
                    LODWORD(v1840) = 0;
                    LODWORD(__s1[0]) = *(_DWORD *)(*(void *)(v416 + 32) + 36);
                    LODWORD(v1829) = 0;
                    v1693 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(void *)v1692 + 32))(v1692, 179, &v1839, 1, __s1, 1, *(unsigned __int16 *)(v416 + 44) | 0x100000000);
                    uint64_t v1694 = *a1;
                    LODWORD(v1839) = v268;
                    LODWORD(v1840) = 1;
                    __s1[0] = v1693;
                    __s1[1] = v1695;
                    LODWORD(v1829) = 1;
                    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v1694 + 32))(v1694, v418, &v1839, 1, __s1, 1, 0);
                    goto LABEL_887;
                  }
                  goto LABEL_3357;
                }
              }
              else
              {
                if (v418 == 336) {
                  goto LABEL_3376;
                }
                if ((v418 - 314) >= 2 && v418 != 335) {
                  goto LABEL_3357;
                }
              }
            }
            else if (v418 != 173)
            {
              if (v418 != 51) {
                goto LABEL_3357;
              }
LABEL_3376:
              v1699 = *(_DWORD **)(v416 + 32);
              int v1791 = v1699[17];
              int v1780 = v1699[25];
              uint64_t v1700 = v1699[33];
              uint64_t v1801 = v1699[41];
              if (sub_1CBAB2408(v413, v412)) {
                int v1701 = 2;
              }
              else {
                int v1701 = 1;
              }
              unsigned int v1771 = v1701;
              __int16 v1702 = *(_WORD *)(*(void *)(v411 + 8) + 1020);
              if (v418 == 51) {
                int v1703 = v1702 & 1 | ((~*(unsigned __int16 *)(v416 + 44) & 0x7C0) == 0);
              }
              else {
                int v1703 = *(_WORD *)(v416 + 44) & 0x10 | v1702 & 1;
              }
              if ((v1700 & 0x80000000) != 0) {
                v1704 = (uint64_t *)(*(void *)(v412 + 24) + 16 * (v1700 & 0x7FFFFFFF) + 8);
              }
              else {
                v1704 = (uint64_t *)(*(void *)(v412 + 272) + 8 * v1700);
              }
              uint64_t v1705 = *v1704;
              if (v1705
                && ((*(unsigned char *)(v1705 + 3) & 1) != 0
                 || (uint64_t v1705 = *(void *)(v1705 + 24)) != 0 && (*(unsigned char *)(v1705 + 3) & 1) != 0))
              {
                uint64_t v1706 = *(void *)(v1705 + 8);
              }
              else
              {
                uint64_t v1706 = 0;
              }
              if ((v1801 & 0x80000000) != 0) {
                v1707 = (uint64_t *)(*(void *)(v412 + 24) + 16 * (v1801 & 0x7FFFFFFF) + 8);
              }
              else {
                v1707 = (uint64_t *)(*(void *)(v412 + 272) + 8 * v1801);
              }
              uint64_t v1708 = *v1707;
              if (v1708
                && ((*(unsigned char *)(v1708 + 3) & 1) != 0
                 || (uint64_t v1708 = *(void *)(v1708 + 24)) != 0 && (*(unsigned char *)(v1708 + 3) & 1) != 0))
              {
                uint64_t v1766 = *(void *)(v1708 + 8);
              }
              else
              {
                uint64_t v1766 = 0;
              }
              if (v1703
                && (v1700 == v1791 && v1801 == v1780 || v1700 == v1780 && v1801 == v1791)
                && (int v1709 = sub_1CBAB2190(v1700, v412, 1, 1),
                    sub_1CBAB2190(v1801, v412, 1, 1) + v1709 >= v1771))
              {
                uint64_t v1710 = *a1;
                unint64_t v1839 = 129;
                LODWORD(v1840) = 0;
                LODWORD(__s1[0]) = v1791;
                LODWORD(v1829) = 0;
                (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v1710 + 32))(v1710, 179, &v1839, 1, __s1, 1, 0);
                int v1791 = *(_DWORD *)(*(void *)(v1711 + 32) + 4);
                uint64_t v1712 = *a1;
                unint64_t v1839 = 129;
                LODWORD(v1840) = 0;
                LODWORD(__s1[0]) = v1780;
                LODWORD(v1829) = 0;
                (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v1712 + 32))(v1712, 179, &v1839, 1, __s1, 1, 0);
                int v1780 = *(_DWORD *)(*(void *)(v1713 + 32) + 4);
                uint64_t v1714 = *a1;
              }
              else
              {
                if (**(_WORD **)(v1706 + 16) == 177 && *(_DWORD *)(*(void *)(v1706 + 32) + 36) == v1801)
                {
                  v1724 = (uint64_t *)((v1700 & 0x80000000) != 0
                                    ? *(void *)(v412 + 24) + 16 * (v1700 & 0x7FFFFFFF) + 8
                                    : *(void *)(v412 + 272) + 8 * v1700);
                  uint64_t v1725 = *v1724;
                  if (v1725)
                  {
                    while ((*(unsigned char *)(v1725 + 3) & 1) != 0)
                    {
                      uint64_t v1725 = *(void *)(v1725 + 24);
                      if (!v1725) {
                        goto LABEL_3403;
                      }
                    }
                    while (1)
                    {
                      uint64_t v1725 = *(void *)(v1725 + 24);
                      if (!v1725) {
                        break;
                      }
                      if ((*(unsigned char *)(v1725 + 3) & 1) == 0) {
                        goto LABEL_3403;
                      }
                    }
                    if (sub_1CBAB2190(v1801, v412, 1, 1))
                    {
                      uint64_t v1738 = *a1;
                      unint64_t v1839 = 129;
                      LODWORD(v1840) = 0;
                      LODWORD(__s1[0]) = v1801;
                      LODWORD(v1829) = 0;
                      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v1738 + 32))(v1738, 179, &v1839, 1, __s1, 1, 0);
                      int v1720 = *(_DWORD *)(*(void *)(v1739 + 32) + 4);
                      uint64_t v1740 = *a1;
                      unint64_t v1839 = 129;
                      LODWORD(v1840) = 0;
                      LODWORD(__s1[0]) = v1720;
                      LODWORD(v1829) = 0;
                      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(void *)v1740 + 32))(v1740, 177, &v1839, 1, __s1, 1, *(unsigned __int16 *)(v416 + 44) | 0x100000000);
                      int v1716 = *(_DWORD *)(*(void *)(v1741 + 32) + 4);
                      goto LABEL_3398;
                    }
                  }
                }
LABEL_3403:
                if (**(_WORD **)(v1766 + 16) == 177 && *(_DWORD *)(*(void *)(v1766 + 32) + 36) == v1700)
                {
                  uint64_t v1733 = sub_1CBA02BCC(v412, v1801);
                  if (v1733 != v1734)
                  {
                    do
                      uint64_t v1733 = *(void *)(v1733 + 24);
                    while (v1733 && (*(unsigned char *)(v1733 + 3) & 1) != 0);
                    if (v1733 == v1734 && sub_1CBAB2190(v1700, v412, 1, 1))
                    {
                      uint64_t v1735 = *a1;
                      unint64_t v1839 = 129;
                      LODWORD(v1840) = 0;
                      LODWORD(__s1[0]) = v1700;
                      LODWORD(v1829) = 0;
                      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v1735 + 32))(v1735, 179, &v1839, 1, __s1, 1, 0);
                      int v1716 = *(_DWORD *)(*(void *)(v1736 + 32) + 4);
                      uint64_t v1737 = *a1;
                      unint64_t v1839 = 129;
                      LODWORD(v1840) = 0;
                      LODWORD(__s1[0]) = v1716;
                      LODWORD(v1829) = 0;
                      v1718 = *(void (**)(void))(*(void *)v1737 + 32);
                      goto LABEL_3397;
                    }
                  }
                }
                int v1723 = sub_1CBAB2190(v1700, v412, 1, 0);
                if (sub_1CBAB2190(v1801, v412, 1, 0) + v1723 < v1771) {
                  goto LABEL_3357;
                }
                uint64_t v1714 = *a1;
              }
              unint64_t v1839 = 129;
              LODWORD(v1840) = 0;
              LODWORD(__s1[0]) = v1700;
              LODWORD(v1829) = 0;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v1714 + 32))(v1714, 179, &v1839, 1, __s1, 1, 0);
              int v1716 = *(_DWORD *)(*(void *)(v1715 + 32) + 4);
              uint64_t v1717 = *a1;
              unint64_t v1839 = 129;
              LODWORD(v1840) = 0;
              LODWORD(__s1[0]) = v1801;
              LODWORD(v1829) = 0;
              v1718 = *(void (**)(void))(*(void *)v1717 + 32);
LABEL_3397:
              v1718();
              int v1720 = *(_DWORD *)(*(void *)(v1719 + 32) + 4);
LABEL_3398:
              int v1721 = *(_DWORD *)(*(void *)(v416 + 32) + 48);
              uint64_t v1722 = *a1;
              LODWORD(v1839) = v268;
              LODWORD(v1840) = 1;
              LODWORD(__s1[0]) = v1721;
              LODWORD(v1829) = 2;
              DWORD2(v1829) = v1791;
              LODWORD(v1831) = 0;
              LODWORD(v1832) = v1780;
              *(_DWORD *)v1834 = 0;
              *(_DWORD *)&v1834[8] = v1716;
              *(_DWORD *)v1835 = 0;
              *(_DWORD *)&v1835[8] = v1720;
              *(_DWORD *)&v1835[24] = 0;
              int v226 = *(void (**)(void))(*(void *)v1722 + 32);
              goto LABEL_886;
            }
            uint64_t v1696 = *(unsigned int *)(*(void *)(v416 + 32) + 36);
            if ((v1696 & 0x80000000) != 0) {
              v1697 = (uint64_t *)(*(void *)(v412 + 24) + 16 * (v1696 & 0x7FFFFFFF) + 8);
            }
            else {
              v1697 = (uint64_t *)(*(void *)(v412 + 272) + 8 * v1696);
            }
            uint64_t v1698 = *v1697;
            if (v1698)
            {
              if ((*(unsigned char *)(v1698 + 3) & 1) != 0
                || (uint64_t v1698 = *(void *)(v1698 + 24)) != 0 && (*(unsigned char *)(v1698 + 3) & 1) != 0)
              {
                uint64_t v912 = *(void *)(v1698 + 8);
                if (v912)
                {
                  if (**(_WORD **)(v912 + 16) == 178 && *(_DWORD *)(v912 + 40) == 2)
                  {
LABEL_3241:
                    int v1672 = *(_DWORD *)(*(void *)(v912 + 32) + 36);
                    uint64_t v1673 = *a1;
                    LODWORD(v1839) = v268;
                    LODWORD(v1840) = 1;
                    LODWORD(__s1[0]) = v1672;
                    LODWORD(v1829) = 0;
                    int v226 = *(void (**)(void))(*(void *)v1673 + 32);
                    goto LABEL_886;
                  }
                }
              }
            }
LABEL_3357:
            if (v1691 != 182) {
              goto LABEL_840;
            }
            uint64_t v349 = *a1;
            LODWORD(v1839) = v268;
            LODWORD(v1840) = 1;
            LODWORD(__s1[0]) = *(_DWORD *)(*(void *)(v416 + 32) + 36);
LABEL_448:
            LODWORD(v1829) = 0;
            int v226 = *(void (**)(void))(*(void *)v349 + 32);
            goto LABEL_886;
          }
          uint64_t v1731 = *a1;
          LODWORD(__s1[0]) = v268;
          LODWORD(__s1[1]) = 1;
          v1727 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void, void, void))(*(void *)v1731 + 32))(v1731, v418, __s1, 1, 0, 0, 0);
          v1729 = v1732;
          llvm::MachineInstr::addOperand(v1732, v1727, (const llvm::MachineOperand *)(*(void *)(v416 + 32) + 32));
          llvm::MachineInstr::addOperand(v1729, v1727, (const llvm::MachineOperand *)(*(void *)(v416 + 32) + 64));
          llvm::MachineInstr::addOperand(v1729, v1727, (const llvm::MachineOperand *)(*(void *)(v416 + 32) + 96));
          v1730 = (const llvm::MachineOperand *)(*(void *)(v416 + 32) + 128);
        }
        llvm::MachineInstr::addOperand(v1729, v1727, v1730);
        goto LABEL_887;
      case 182:
      case 183:
        uint64_t v725 = *a1;
        *(void *)(v725 + 40) = *((void *)this + 3);
        *(void *)(v725 + 48) = this;
        uint64_t v726 = *(void *)(*a1 + 8);
        uint64_t v727 = *(void *)(v726 + 40);
        uint64_t v728 = *((void *)this + 4);
        int v729 = *(_DWORD *)(v728 + 4);
        uint64_t v730 = *(unsigned int *)(v728 + 36);
        if (v729 < 0 && (v729 & 0x7FFFFFFFu) < *(_DWORD *)(v727 + 432)) {
          v731 = *(void **)(*(void *)(v727 + 424) + 8 * (v729 & 0x7FFFFFFF));
        }
        else {
          v731 = 0;
        }
        *(void *)&long long v1819 = v731;
        if ((v730 & 0x80000000) != 0
          && (v730 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v727 + 432))
        {
          unint64_t v732 = *(void *)(*(void *)(v727 + 424) + 8 * (v730 & 0x7FFFFFFF));
        }
        else
        {
          unint64_t v732 = 0;
        }
        unint64_t v1816 = v732;
        int v733 = **((unsigned __int16 **)this + 2);
        sub_1CC73C210(v730, v727, (uint64_t)__s1);
        if (!(_BYTE)v1829) {
          goto LABEL_1046;
        }
        uint64_t v983 = LODWORD(__s1[1]);
        if (LODWORD(__s1[1]) < 0x41)
        {
          v984 = __s1[0];
          if (v731 == (void *)129) {
            v985 = &unk_1CFB2E2E0;
          }
          else {
            v985 = &unk_1CFB2E308;
          }
          unsigned int v987 = sub_1CB8F1DC4((unint64_t *)&v1819);
          if (v986 == 1) {
          uint64_t v988 = -v983;
          }
          LODWORD(v1840) = v987;
          if (v987 > 0x40) {
            operator new[]();
          }
          unint64_t v1839 = 0;
          llvm::detail::IEEEFloat::initFromAPInt((llvm::detail::IEEEFloat *)&__s1[1], v985, (const llvm::APInt **)&v1839);
          unsigned int v990 = sub_1CB8F1DC4(&v1816);
          if (v989 == 1) {
          LODWORD(v1840) = v990;
          }
          if (v990 > 0x40) {
            operator new[]();
          }
          unint64_t v991 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v990;
          if (!v990) {
            unint64_t v991 = 0;
          }
          unint64_t v1839 = v991 & ((uint64_t)((void)v984 << v988) >> v988);
          sub_1CBA62404((uint64_t)__s1, (uint64_t)&v1839, v733 == 182, 1);
          if (v1840 >= 0x41 && v1839) {
            MEMORY[0x1D25D9CB0](v1839, 0x1000C8000313F17);
          }
          uint64_t v993 = *a1;
          LODWORD(v1839) = v729;
          LODWORD(v1840) = 1;
          v994 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v726, (llvm::LLVMContext *)__s1, v992);
          (*(void (**)(uint64_t, unint64_t *, const llvm::detail::DoubleAPFloat *))(*(void *)v993 + 24))(v993, &v1839, v994);
          llvm::MachineInstr::eraseFromParent(this);
          v995 = __s1[1];
          if (__s1[1] == &unk_1CFB2E344) {
            goto LABEL_3122;
          }
LABEL_1413:
          if ((v995[2] - 64) > 0xFFFFFF7F) {
            return 1;
          }
          v724 = (void *)v1829;
          if (!(void)v1829) {
            return 1;
          }
          goto LABEL_1038;
        }
        if (__s1[0]) {
          MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
        }
LABEL_1046:
        if ((v730 & 0x80000000) != 0) {
          BOOL v734 = (uint64_t *)(*(void *)(v727 + 24) + 16 * (v730 & 0x7FFFFFFF) + 8);
        }
        else {
          BOOL v734 = (uint64_t *)(*(void *)(v727 + 272) + 8 * v730);
        }
        uint64_t v735 = *v734;
        if (v735)
        {
          if ((*(unsigned char *)(v735 + 3) & 1) != 0
            || (uint64_t v735 = *(void *)(v735 + 24)) != 0 && (*(unsigned char *)(v735 + 3) & 1) != 0)
          {
            uint64_t v736 = *(void *)(v735 + 8);
            if (v736)
            {
              if (**(_WORD **)(v736 + 16) == 126 && *(_DWORD *)(v736 + 40) == 2)
              {
                int v1530 = *(_DWORD *)(*(void *)(v736 + 32) + 36);
                uint64_t v1531 = *a1;
                LODWORD(v1839) = v729;
                LODWORD(v1840) = 1;
                LODWORD(__s1[0]) = v1530;
                LODWORD(v1829) = 0;
                int v226 = *(void (**)(void))(*(void *)v1531 + 32);
                goto LABEL_886;
              }
            }
          }
        }
        if ((v730 & 0x80000000) != 0) {
          v737 = (uint64_t *)(*(void *)(v727 + 24) + 16 * (v730 & 0x7FFFFFFF) + 8);
        }
        else {
          v737 = (uint64_t *)(*(void *)(v727 + 272) + 8 * v730);
        }
        uint64_t v738 = *v737;
        if (!v738) {
          goto LABEL_1058;
        }
        if ((*(unsigned char *)(v738 + 3) & 1) == 0)
        {
          uint64_t v738 = *(void *)(v738 + 24);
          if (!v738 || (*(unsigned char *)(v738 + 3) & 1) == 0) {
            goto LABEL_1058;
          }
        }
        uint64_t v739 = *(void *)(v738 + 8);
        if (!v739 || **(_WORD **)(v739 + 16) != 65 || *(_DWORD *)(v739 + 40) != 3) {
          goto LABEL_1058;
        }
        uint64_t v1306 = *(void *)(v739 + 32);
        int v1307 = *(_DWORD *)(v1306 + 36);
        sub_1CC73C210(*(_DWORD *)(v1306 + 68), v727, (uint64_t)__s1);
        if (!(_BYTE)v1829) {
          goto LABEL_1966;
        }
        if (LODWORD(__s1[1]) >= 0x41)
        {
          if (__s1[0]) {
            MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
          }
LABEL_1966:
          sub_1CC73C210(*(_DWORD *)(*(void *)(v739 + 32) + 36), v727, (uint64_t)__s1);
          if (!(_BYTE)v1829)
          {
LABEL_1058:
            if ((v730 & 0x80000000) != 0) {
              v740 = (uint64_t *)(*(void *)(v727 + 24) + 16 * (v730 & 0x7FFFFFFF) + 8);
            }
            else {
              v740 = (uint64_t *)(*(void *)(v727 + 272) + 8 * v730);
            }
            uint64_t v741 = *v740;
            if (v741
              && ((*(unsigned char *)(v741 + 3) & 1) != 0
               || (uint64_t v741 = *(void *)(v741 + 24)) != 0 && (*(unsigned char *)(v741 + 3) & 1) != 0))
            {
              uint64_t v742 = *(void *)(v741 + 8);
            }
            else
            {
              uint64_t v742 = 0;
            }
            uint64_t v744 = sub_1CB8F1DC4(&v1816);
            if (v743 == 1) {
            if (v744 == 1 && (**(_WORD **)(v742 + 16) & 0xFFFE) == 0x86)
            }
            {
              int v745 = *(_DWORD *)(*(void *)(v742 + 32) + 48);
              uint64_t v746 = *a1;
              __s1[0] = v731;
              LODWORD(__s1[1]) = 0;
              uint64_t v747 = sub_1CC7374CC(v746, (unint64_t *)__s1, 0.0);
              uint64_t v749 = v748;
              uint64_t v750 = *a1;
              __s1[0] = v731;
              LODWORD(__s1[1]) = 0;
              double v751 = 1.0;
              if (v733 == 182) {
                double v751 = -1.0;
              }
              uint64_t v752 = sub_1CC7374CC(v750, (unint64_t *)__s1, v751);
              uint64_t v753 = *a1;
              LODWORD(v1839) = v729;
              LODWORD(v1840) = 1;
              LODWORD(__s1[0]) = v745;
              LODWORD(v1829) = 2;
              uint64_t v754 = *(void *)(v742 + 32);
              DWORD2(v1829) = *(_DWORD *)(v754 + 68);
              LODWORD(v1831) = 0;
              LODWORD(v1832) = *(_DWORD *)(v754 + 100);
              *(_DWORD *)v1834 = 0;
              *(void *)&v1834[8] = v752;
              *(void *)&v1834[16] = v755;
              *(_DWORD *)v1835 = 1;
              *(void *)&v1835[8] = v747;
              *(void *)&v1835[16] = v749;
              *(_DWORD *)&v1835[24] = 1;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v753 + 32))(v753, 51, &v1839, 1, __s1, 5, 0);
              goto LABEL_887;
            }
            goto LABEL_840;
          }
          if (LODWORD(__s1[1]) >= 0x41)
          {
            if (__s1[0]) {
              MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
            }
            goto LABEL_1058;
          }
          uint64_t v1308 = (uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1]);
          int v1307 = *(_DWORD *)(*(void *)(v739 + 32) + 68);
        }
        else
        {
          uint64_t v1308 = (uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1]);
        }
        if (v1307 < 0 && (v1307 & 0x7FFFFFFFu) < *(_DWORD *)(v727 + 432)) {
          v1443 = *(void **)(*(void *)(v727 + 424) + 8 * (v1307 & 0x7FFFFFFF));
        }
        else {
          v1443 = 0;
        }
        __s1[0] = v1443;
        unint64_t v1445 = sub_1CB8F1DC4((unint64_t *)__s1);
        if (v1444 == 1) {
        if (v1445 >= 0x11 && v1308 == 0xFFFF)
        }
        {
          uint64_t v1446 = *a1;
          LODWORD(v1824) = v729;
          LODWORD(v1825) = 1;
          *(void *)&long long v1821 = 129;
          DWORD2(v1821) = 0;
          LODWORD(v1839) = v1307;
          DWORD2(v1840) = 0;
          __s1[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v1446 + 32))(v1446, 119, &v1821, 1, &v1839, 1, 0);
          __s1[1] = v1447;
          LODWORD(v1829) = 1;
          int v226 = *(void (**)(void))(*(void *)v1446 + 32);
          goto LABEL_886;
        }
        goto LABEL_1058;
      case 184:
        uint64_t v890 = *a1;
        *(void *)(v890 + 40) = *((void *)this + 3);
        *(void *)(v890 + 48) = this;
        uint64_t v891 = *(void *)(*a1 + 8);
        uint64_t v892 = *(void *)(v891 + 40);
        uint64_t v893 = *((void *)this + 4);
        unsigned int v268 = *(_DWORD *)(v893 + 4);
        uint64_t v18 = *(unsigned int *)(v893 + 36);
        if ((v268 & 0x80000000) != 0 && (v268 & 0x7FFFFFFF) < *(_DWORD *)(v892 + 432)) {
          uint64_t v894 = *(void *)(*(void *)(v892 + 424) + 8 * (v268 & 0x7FFFFFFF));
        }
        else {
          uint64_t v894 = 0;
        }
        sub_1CBAB1D20((uint64_t)__s1, 184, v894, v18, *(void *)(v892 + 24), *(void *)(v892 + 272));
        if ((_BYTE)v1830)
        {
          v1293 = *(llvm::ConstantFP ****)v891;
LABEL_1952:
          v1294 = llvm::ConstantFP::get(**v1293, (llvm::LLVMContext *)__s1, v274);
          uint64_t v1295 = *a1;
          LODWORD(v1839) = v268;
          LODWORD(v1840) = 1;
          (*(void (**)(uint64_t, unint64_t *, const llvm::detail::DoubleAPFloat *))(*(void *)v1295 + 24))(v1295, &v1839, v1294);
          llvm::MachineInstr::eraseFromParent(this);
          if (!(_BYTE)v1830) {
            return 1;
          }
          v995 = __s1[1];
          if (__s1[1] != &unk_1CFB2E344) {
            goto LABEL_1413;
          }
          goto LABEL_3122;
        }
        if ((v18 & 0x80000000) != 0) {
          uint64_t v895 = (uint64_t *)(*(void *)(v892 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v895 = (uint64_t *)(*(void *)(v892 + 272) + 8 * v18);
        }
        uint64_t v896 = *v895;
        if (v896)
        {
          if ((*(unsigned char *)(v896 + 3) & 1) != 0
            || (uint64_t v896 = *(void *)(v896 + 24)) != 0 && (*(unsigned char *)(v896 + 3) & 1) != 0)
          {
            uint64_t v897 = *(void *)(v896 + 8);
            if (v897)
            {
              if (**(_WORD **)(v897 + 16) == 184 && *(_DWORD *)(v897 + 40) == 2)
              {
                uint64_t v64 = *a1;
                LODWORD(v1839) = v268;
LABEL_1767:
                LODWORD(v1840) = 1;
                LODWORD(__s1[0]) = v18;
                goto LABEL_885;
              }
            }
          }
        }
        LODWORD(v1810) = 0;
        int v1807 = 0;
        unint64_t v1813 = 0;
        if ((v18 & 0x80000000) != 0) {
          uint64_t v898 = (uint64_t *)(*(void *)(v892 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v898 = (uint64_t *)(*(void *)(v892 + 272) + 8 * v18);
        }
        uint64_t v899 = *v898;
        if (!v899) {
          goto LABEL_1288;
        }
        while ((*(unsigned char *)(v899 + 3) & 1) != 0)
        {
          uint64_t v899 = *(void *)(v899 + 24);
          if (!v899) {
            goto LABEL_1288;
          }
        }
        while (1)
        {
          uint64_t v899 = *(void *)(v899 + 24);
          if (!v899) {
            break;
          }
          if ((*(unsigned char *)(v899 + 3) & 1) == 0) {
            goto LABEL_1288;
          }
        }
        __s1[0] = &v1813;
        __s1[1] = &v1810;
        *(void *)&long long v1829 = &v1807;
        if (sub_1CBAB20A8(v18, v892, (uint64_t)__s1))
        {
          uint64_t v1080 = *a1;
          LODWORD(v1821) = v268;
          DWORD2(v1821) = 1;
          *(void *)&long long v1819 = v894;
          DWORD2(v1819) = 0;
          LODWORD(v1839) = v1810;
          DWORD2(v1840) = 0;
          __s1[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v1080 + 32))(v1080, 184, &v1819, 1, &v1839, 1, 0);
          __s1[1] = v1081;
          LODWORD(v1829) = 1;
          uint64_t v1082 = *a1;
          unint64_t v1816 = v894;
          LODWORD(v1817) = 0;
          LODWORD(v1824) = v1807;
          LODWORD(v1826) = 0;
          *((void *)&v1829 + 1) = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v1082 + 32))(v1082, 184, &v1816, 1, &v1824, 1, 0);
          unint64_t v1830 = v1083;
          LODWORD(v1831) = 1;
          int v226 = *(void (**)(void))(*(void *)v1080 + 32);
          goto LABEL_886;
        }
LABEL_1288:
        if ((v18 & 0x80000000) != 0) {
          int v900 = (uint64_t *)(*(void *)(v892 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
        }
        else {
          int v900 = (uint64_t *)(*(void *)(v892 + 272) + 8 * v18);
        }
        uint64_t v901 = *v900;
        if (v901)
        {
          if ((*(unsigned char *)(v901 + 3) & 1) != 0
            || (uint64_t v901 = *(void *)(v901 + 24)) != 0 && (*(unsigned char *)(v901 + 3) & 1) != 0)
          {
            uint64_t v902 = *(void *)(v901 + 8);
            if (v902 && **(_WORD **)(v902 + 16) == 178 && *(_DWORD *)(v902 + 40) == 2)
            {
              uint64_t v1582 = *(unsigned int *)(*(void *)(v902 + 32) + 36);
              v1583 = (uint64_t *)((v1582 & 0x80000000) != 0
                                ? *(void *)(v892 + 24) + 16 * (v1582 & 0x7FFFFFFF) + 8
                                : *(void *)(v892 + 272) + 8 * v1582);
              uint64_t v1584 = *v1583;
              if (v1584)
              {
                if ((*(unsigned char *)(v1584 + 3) & 1) != 0
                  || (uint64_t v1584 = *(void *)(v1584 + 24)) != 0 && (*(unsigned char *)(v1584 + 3) & 1) != 0)
                {
                  uint64_t v1585 = *(void *)(v1584 + 8);
                  if (v1585)
                  {
                    if ((v1582 & 0x80000000) != 0) {
                      v1586 = (uint64_t *)(*(void *)(v892 + 24) + 16 * (v1582 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      v1586 = (uint64_t *)(*(void *)(v892 + 272) + 8 * v1582);
                    }
                    uint64_t v1587 = *v1586;
                    if (v1587)
                    {
                      if ((*(unsigned char *)(v1587 + 3) & 1) != 0
                        || (uint64_t v1587 = *(void *)(v1587 + 24)) != 0 && (*(unsigned char *)(v1587 + 3) & 1) != 0)
                      {
                        uint64_t v1588 = *(void *)(v1587 + 8);
                        if (v1588)
                        {
                          if (**(_WORD **)(v1588 + 16) == 184 && *(_DWORD *)(v1588 + 40) == 2) {
                            goto LABEL_2789;
                          }
                        }
                      }
                    }
                    uint64_t v1589 = *a1;
                    LODWORD(v1824) = v268;
                    LODWORD(v1825) = 1;
                    if ((v1582 & 0x80000000) != 0 && (v1582 & 0x7FFFFFFF) < *(_DWORD *)(v892 + 432)) {
                      uint64_t v1590 = *(void *)(*(void *)(v892 + 424) + 8 * (v1582 & 0x7FFFFFFF));
                    }
                    else {
                      uint64_t v1590 = 0;
                    }
                    *(void *)&long long v1821 = v1590;
                    DWORD2(v1821) = 0;
                    LODWORD(v1839) = v1582;
                    DWORD2(v1840) = 0;
                    v1591 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v1589 + 32))(v1589, 184, &v1821, 1, &v1839, 1, *(unsigned __int16 *)(v1585 + 44) | 0x100000000);
                    goto LABEL_2774;
                  }
                }
              }
            }
          }
        }
        if ((v18 & 0x80000000) != 0) {
          v903 = (uint64_t *)(*(void *)(v892 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
        }
        else {
          v903 = (uint64_t *)(*(void *)(v892 + 272) + 8 * v18);
        }
        uint64_t v904 = *v903;
        if (!v904) {
          goto LABEL_840;
        }
        if ((*(unsigned char *)(v904 + 3) & 1) == 0)
        {
          uint64_t v904 = *(void *)(v904 + 24);
          if (!v904 || (*(unsigned char *)(v904 + 3) & 1) == 0) {
            goto LABEL_840;
          }
        }
        uint64_t v905 = *(void *)(v904 + 8);
        if (!v905 || **(_WORD **)(v905 + 16) != 179 || *(_DWORD *)(v905 + 40) != 2) {
          goto LABEL_840;
        }
        uint64_t v906 = *(unsigned int *)(*(void *)(v905 + 32) + 36);
        uint64_t v907 = (uint64_t *)((v906 & 0x80000000) != 0
                         ? *(void *)(v892 + 24) + 16 * (v906 & 0x7FFFFFFF) + 8
                         : *(void *)(v892 + 272) + 8 * v906);
        uint64_t v908 = *v907;
        if (!v908) {
          goto LABEL_840;
        }
        if ((*(unsigned char *)(v908 + 3) & 1) == 0)
        {
          uint64_t v908 = *(void *)(v908 + 24);
          if (!v908 || (*(unsigned char *)(v908 + 3) & 1) == 0) {
            goto LABEL_840;
          }
        }
        uint64_t v909 = *(void *)(v908 + 8);
        if (!v909) {
          goto LABEL_840;
        }
        if ((v906 & 0x80000000) != 0) {
          long long v910 = (uint64_t *)(*(void *)(v892 + 24) + 16 * (v906 & 0x7FFFFFFF) + 8);
        }
        else {
          long long v910 = (uint64_t *)(*(void *)(v892 + 272) + 8 * v906);
        }
        uint64_t v911 = *v910;
        if (v911)
        {
          if ((*(unsigned char *)(v911 + 3) & 1) != 0
            || (uint64_t v911 = *(void *)(v911 + 24)) != 0 && (*(unsigned char *)(v911 + 3) & 1) != 0)
          {
            uint64_t v912 = *(void *)(v911 + 8);
            if (v912)
            {
              if (**(_WORD **)(v912 + 16) == 184 && *(_DWORD *)(v912 + 40) == 2) {
                goto LABEL_3241;
              }
            }
          }
        }
        if (sub_1CBAA87B0(v268, v892)) {
          goto LABEL_840;
        }
        v913 = (uint64_t *)((v18 & 0x80000000) != 0
                         ? *(void *)(v892 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8
                         : *(void *)(v892 + 272) + 8 * v18);
        uint64_t v914 = *v913;
        if (!v914) {
          goto LABEL_840;
        }
        while ((*(unsigned char *)(v914 + 3) & 1) != 0)
        {
          uint64_t v914 = *(void *)(v914 + 24);
          if (!v914) {
            goto LABEL_840;
          }
        }
        while (1)
        {
          uint64_t v914 = *(void *)(v914 + 24);
          if (!v914) {
            break;
          }
          if ((*(unsigned char *)(v914 + 3) & 1) == 0) {
            goto LABEL_840;
          }
        }
        uint64_t v1593 = *a1;
        LODWORD(v1824) = v268;
        LODWORD(v1825) = 1;
        if ((v906 & 0x80000000) != 0 && (v906 & 0x7FFFFFFF) < *(_DWORD *)(v892 + 432)) {
          uint64_t v1594 = *(void *)(*(void *)(v892 + 424) + 8 * (v906 & 0x7FFFFFFF));
        }
        else {
          uint64_t v1594 = 0;
        }
        *(void *)&long long v1821 = v1594;
        DWORD2(v1821) = 0;
        LODWORD(v1839) = v906;
        DWORD2(v1840) = 0;
        v1595 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v1593 + 32))(v1593, 184, &v1821, 1, &v1839, 1, *(unsigned __int16 *)(v909 + 44) | 0x100000000);
LABEL_2505:
        __s1[0] = v1595;
        __s1[1] = v1596;
        LODWORD(v1829) = 1;
        int v226 = *(void (**)(void))(*(void *)v1593 + 32);
        goto LABEL_886;
      case 185:
        uint64_t v1495 = *a1;
        *(void *)(v1495 + 40) = *((void *)this + 3);
        *(void *)(v1495 + 48) = this;
        v1496 = (_DWORD *)*((void *)this + 4);
        uint64_t v1497 = v1496[9];
        uint64_t v1498 = v1496[17];
        uint64_t v1499 = a1[1];
        if ((v1498 & 0x80000000) != 0) {
          v1500 = (uint64_t *)(*(void *)(v1499 + 24) + 16 * (v1498 & 0x7FFFFFFF) + 8);
        }
        else {
          v1500 = (uint64_t *)(*(void *)(v1499 + 272) + 8 * v1498);
        }
        uint64_t v1501 = *v1500;
        if (v1501
          && ((*(unsigned char *)(v1501 + 3) & 1) != 0
           || (uint64_t v1501 = *(void *)(v1501 + 24)) != 0 && (*(unsigned char *)(v1501 + 3) & 1) != 0))
        {
          uint64_t v1502 = *(void *)(v1501 + 8);
        }
        else
        {
          uint64_t v1502 = 0;
        }
        if ((v1497 & 0x80000000) != 0)
        {
          uint64_t v1569 = v1497 & 0x7FFFFFFF;
          if ((v1497 & 0x7FFFFFFF) >= *(_DWORD *)(v1499 + 432)) {
            v1503 = 0;
          }
          else {
            v1503 = *(void **)(*(void *)(v1499 + 424) + 8 * v1569);
          }
          v1504 = (uint64_t *)(*(void *)(v1499 + 24) + 16 * v1569 + 8);
        }
        else
        {
          v1503 = 0;
          v1504 = (uint64_t *)(*(void *)(v1499 + 272) + 8 * v1497);
        }
        uint64_t v1505 = *v1504;
        if ((*(unsigned char *)(v1505 + 3) & 1) == 0) {
          uint64_t v1505 = *(void *)(v1505 + 24);
        }
        uint64_t v1506 = *(void *)(v1505 + 8);
        if (**(_WORD **)(v1506 + 16) != 121) {
          goto LABEL_840;
        }
        uint64_t v1800 = *(void *)(*(void *)(v1506 + 32) + 48);
        if (!v1800) {
          goto LABEL_840;
        }
        int v1770 = v1496[1];
        unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v1499, "", 0);
        unint64_t v1507 = IncompleteVirtualRegister & 0x7FFFFFFF;
        *(void *)(*(void *)(v1499 + 24) + 16 * v1507) = 4;
        unint64_t v1508 = *(unsigned int *)(v1499 + 432);
        if (v1507 >= v1508)
        {
          uint64_t v1777 = *(void *)(v1499 + 440);
          size_t v1789 = v1507 + 1 - v1508;
          if (v1507 >= *(unsigned int *)(v1499 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v1509 = *(_DWORD *)(v1499 + 432);
          if (v1789)
          {
            v1510 = (void *)(*(void *)(v1499 + 424) + 8 * v1508);
            uint64_t v1511 = ~v1507 + v1508;
            do
            {
              *v1510++ = v1777;
              BOOL v801 = __CFADD__(v1511++, 1);
            }
            while (!v801);
            int v1509 = *(_DWORD *)(v1499 + 432);
          }
          *(_DWORD *)(v1499 + 432) = v1509 + v1789;
        }
        *(void *)(*(void *)(v1499 + 424) + 8 * v1507) = v1503;
        uint64_t v1512 = *(void *)(v1499 + 8);
        if (v1512) {
          (*(void (**)(uint64_t, void))(*(void *)v1512 + 24))(v1512, IncompleteVirtualRegister);
        }
        uint64_t v1513 = *a1;
        uint64_t v1514 = *(unsigned __int16 *)(v1502 + 44) | 0x100000000;
        LODWORD(v1839) = IncompleteVirtualRegister;
        LODWORD(v1840) = 1;
        LODWORD(__s1[0]) = v1497;
        LODWORD(v1829) = 0;
        unint64_t v1839 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(void *)v1513 + 32))(v1513, 177, &v1839, 1, __s1, 1, v1514);
        *(void *)&long long v1840 = v1515;
        v1516 = (llvm::ConstantFP *****)*a1;
        __s1[0] = v1503;
        LODWORD(__s1[1]) = 0;
        v1518 = llvm::ConstantFP::get(***v1516[1], (llvm::LLVMContext *)(v1800 + 24), v1517);
        v1824 = (void *)((uint64_t (*)(llvm::ConstantFP *****, void **, const llvm::detail::DoubleAPFloat *))(*v1516)[3])(v1516, __s1, v1518);
        uint64_t v1825 = v1519;
        if (*(_UNKNOWN **)(v1800 + 32) == &unk_1CFB2E344) {
          char v1520 = *(unsigned char *)(*(void *)(v1800 + 40) + 28);
        }
        else {
          char v1520 = *(unsigned char *)(v1800 + 52);
        }
        int v1521 = v1520 & 8;
        v1522 = &v1824;
        if (!v1521) {
          v1522 = (void **)&v1839;
        }
        long long v1821 = *(_OWORD *)v1522;
        BOOL v5 = v1521 == 0;
        v1523 = (void **)&v1839;
        if (v5) {
          v1523 = &v1824;
        }
        long long v1819 = *(_OWORD *)v1523;
        uint64_t v1524 = *a1;
        LODWORD(v1816) = v1770;
        LODWORD(v1817) = 1;
        LODWORD(__s1[0]) = 40;
        LODWORD(v1829) = 2;
        DWORD2(v1829) = v1498;
        LODWORD(v1831) = 0;
        unint64_t v1813 = (unint64_t)v1503;
        LODWORD(v1814) = 0;
        uint64_t v1832 = sub_1CC7362A8(v1524, &v1813, 0);
        uint64_t v1833 = v1525;
        *(_OWORD *)&v1834[8] = v1821;
        *(_DWORD *)v1834 = 1;
        *(_DWORD *)v1835 = 1;
        *(_OWORD *)&v1835[8] = v1819;
        *(_DWORD *)&v1835[24] = 1;
        int v226 = *(void (**)(void))(*(void *)v1524 + 32);
        goto LABEL_886;
      case 193:
        unint64_t v149 = (_DWORD *)*((void *)this + 4);
        int v150 = v149[1];
        if (v150 < 0 && (uint64_t v151 = a1[1], (v150 & 0x7FFFFFFFu) < *(_DWORD *)(v151 + 432))) {
          unint64_t v152 = *(void *)(*(void *)(v151 + 424) + 8 * (v150 & 0x7FFFFFFF));
        }
        else {
          unint64_t v152 = 0;
        }
        v1824 = (void *)v152;
        uint64_t v153 = v149[9];
        unsigned int v154 = v149[17];
        uint64_t v155 = *a1;
        *(void *)(v155 + 40) = *((void *)this + 3);
        *(void *)(v155 + 48) = this;
        char v156 = 35;
        if ((v152 & 4) == 0) {
          char v156 = 19;
        }
        uint64_t v157 = (v152 >> v156) & 0xFFFFFF;
        uint64_t v158 = 257;
        if (v157 != 3 && v157)
        {
          unsigned int v160 = sub_1CB8F1DC4((unint64_t *)&v1824);
          if (v159 == 1) {
          uint64_t v158 = (8 * v160) | 1;
          }
        }
        unsigned int v162 = sub_1CB8F1DC4((unint64_t *)&v1824);
        if (v161 == 1) {
        uint64_t v163 = 0x7FFFFF800000000;
        }
        if ((v1824 & 4) == 0) {
          uint64_t v163 = 0x7FFFFF80000;
        }
        if ((v163 & (unint64_t)v1824) == 0) {
          goto LABEL_719;
        }
        char v164 = 35;
        if ((v1824 & 4) == 0) {
          char v164 = 19;
        }
        if ((((unint64_t)v1824 >> v164) & 0xFFFFFF) - 1 <= 2)
        {
LABEL_719:
          unint64_t v543 = (uint64_t *)((8 * v162) | 1);
          uint64_t v544 = *a1;
          unint64_t v1839 = (unint64_t)v543;
          LODWORD(v1840) = 0;
          LODWORD(__s1[0]) = v153;
          LODWORD(v1829) = 0;
          unint64_t v545 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v544 + 32))(v544, 80, &v1839, 1, __s1, 1, 0);
          uint64_t v546 = (void *)*a1;
          unint64_t v1839 = v158;
          LODWORD(v1840) = 0;
          __s1[0] = v545;
          __s1[1] = v547;
          LODWORD(v1829) = 1;
          uint64_t v548 = (void *)sub_1CC738034(v546, 126, &v1839, (int *)__s1);
          v550 = v549;
          uint64_t v551 = (void *)*a1;
          unint64_t v1839 = v158;
          LODWORD(v1840) = 0;
          LODWORD(__s1[0]) = v154;
          LODWORD(v1829) = 0;
          uint64_t v552 = sub_1CC738034(v551, 126, &v1839, (int *)__s1);
          uint64_t v553 = *a1;
          unint64_t v1839 = v158;
          LODWORD(v1840) = 0;
          __s1[0] = v548;
          __s1[1] = v550;
          LODWORD(v1829) = 1;
          *((void *)&v1829 + 1) = v552;
          unint64_t v1830 = v554;
          LODWORD(v1831) = 1;
          uint64_t v555 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v553 + 32))(v553, 45, &v1839, 1, __s1, 2, 0);
          uint64_t v556 = (void *)*a1;
          unint64_t v1839 = (unint64_t)v543;
          LODWORD(v1840) = 0;
          __s1[0] = v555;
          __s1[1] = v557;
          LODWORD(v1829) = 1;
          uint64_t v558 = (void *)sub_1CC738034(v556, 126, &v1839, (int *)__s1);
          uint64_t v559 = *a1;
          LODWORD(v1839) = v150;
          LODWORD(v1840) = 1;
          __s1[0] = v558;
          __s1[1] = v560;
          LODWORD(v1829) = 1;
          uint64_t v561 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v559 + 32);
          uint64_t v562 = v559;
          uint64_t v563 = 81;
LABEL_720:
          v561(v562, v563, &v1839, 1, __s1, 1, 0);
          goto LABEL_887;
        }
        uint64_t v165 = *(void *)(*(void *)(*a1 + 8) + 40);
        sub_1CC73C210(v154, v165, (uint64_t)__s1);
        if (!(_BYTE)v1829) {
          goto LABEL_840;
        }
        char v166 = (char)__s1[1];
        if (LODWORD(__s1[1]) >= 0x41) {
          goto LABEL_2510;
        }
        if ((v153 & 0x80000000) != 0) {
          unsigned int v167 = (uint64_t *)(*(void *)(v165 + 24) + 16 * (v153 & 0x7FFFFFFF) + 8);
        }
        else {
          unsigned int v167 = (uint64_t *)(*(void *)(v165 + 272) + 8 * v153);
        }
        uint64_t v168 = *v167;
        if (!v168) {
          goto LABEL_840;
        }
        uint64_t v169 = __s1[0];
        if ((*(unsigned char *)(v168 + 3) & 1) == 0)
        {
          uint64_t v168 = *(void *)(v168 + 24);
          if (!v168 || (*(unsigned char *)(v168 + 3) & 1) == 0) {
            goto LABEL_840;
          }
        }
        uint64_t v170 = *(void *)(v168 + 8);
        if (!v170) {
          goto LABEL_840;
        }
        if (**(_WORD **)(v170 + 16) != 81) {
          goto LABEL_840;
        }
        if (*(_DWORD *)(v170 + 40) != 2) {
          goto LABEL_840;
        }
        unint64_t v171 = sub_1CC73C9C0(*(_DWORD *)(*(void *)(v170 + 32) + 36), v165);
        if (!v172) {
          goto LABEL_840;
        }
        unint64_t v173 = v171 + ((uint64_t)((void)v169 << -v166) >> -v166);
        unsigned int v175 = sub_1CB8F1DC4((unint64_t *)&v1824);
        if (v174 == 1) {
        uint64_t v176 = *a1;
        }
        __s1[0] = (void *)((8 * v175) | 1);
        LODWORD(__s1[1]) = 0;
        unint64_t v177 = (void *)sub_1CC7362A8(v176, (unint64_t *)__s1, v173);
        uint64_t v178 = *a1;
        LODWORD(v1839) = v150;
        LODWORD(v1840) = 1;
        __s1[0] = v177;
        __s1[1] = v179;
        LODWORD(v1829) = 1;
        sub_1CC7382B0(v178);
        goto LABEL_887;
      default:
        if (v4 != 204) {
          goto LABEL_840;
        }
        uint64_t v94 = *a1;
        *(void *)(v94 + 40) = *((void *)this + 3);
        *(void *)(v94 + 48) = this;
        uint64_t v95 = *a1;
        uint64_t v96 = *(void *)(*(void *)(*a1 + 8) + 40);
        int v97 = (_DWORD *)*((void *)this + 4);
        int v98 = v97[1];
        unsigned int v99 = v97[25];
        if (v98 < 0 && (v98 & 0x7FFFFFFFu) < *(_DWORD *)(v96 + 432)) {
          unint64_t v100 = *(void *)(*(void *)(v96 + 424) + 8 * (v98 & 0x7FFFFFFF));
        }
        else {
          unint64_t v100 = 0;
        }
        unsigned int v101 = v97[9];
        int v1793 = v97[17];
        uint64_t v102 = 0x8000000000000;
        if ((v100 & 2) != 0) {
          uint64_t v102 = 0x800000000000000;
        }
        unsigned int v103 = v97[25];
        if ((v102 & v100) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)this);
          unsigned int v103 = *(_DWORD *)(*((void *)this + 4) + 100);
        }
        sub_1CC73C210(v103, v96, (uint64_t)__s1);
        if (!(_BYTE)v1829) {
          goto LABEL_143;
        }
        if (LODWORD(__s1[1]) >= 0x41)
        {
          if (__s1[0]) {
            MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
          }
          goto LABEL_143;
        }
        int v934 = (unsigned __int16)(v100 >> 3);
        if ((uint64_t)__s1[0] << -LOBYTE(__s1[1]) >> -LOBYTE(__s1[1]) != v934 - 1) {
          goto LABEL_143;
        }
        v935 = &v1829;
        __s1[0] = &v1829;
        __s1[1] = (void *)0x400000000;
        v936 = this;
        while (2)
        {
          uint64_t v937 = *(unsigned int *)(*((void *)v936 + 4) + 4);
          if ((v937 & 0x80000000) != 0) {
            v938 = (uint64_t *)(*(void *)(v96 + 24) + 16 * (v937 & 0x7FFFFFFF) + 8);
          }
          else {
            v938 = (uint64_t *)(*(void *)(v96 + 272) + 8 * v937);
          }
          uint64_t v939 = *v938;
          if (v939)
          {
            if ((*(unsigned char *)(v939 + 3) & 1) != 0
              || (uint64_t v939 = *(void *)(v939 + 24)) != 0 && (*(unsigned char *)(v939 + 3) & 1) != 0)
            {
              uint64_t v940 = *(void *)(v939 + 8);
              if (v940 && **(_WORD **)(v940 + 16) == 204 && *(_DWORD *)(v940 + 40) == 4)
              {
                size_t v1787 = (size_t)v935;
                v1466 = *(unsigned int **)(v940 + 32);
                uint64_t v1467 = v1466[9];
                v1468 = (uint64_t *)((v1467 & 0x80000000) != 0
                                  ? *(void *)(v96 + 24) + 16 * (v1467 & 0x7FFFFFFF) + 8
                                  : *(void *)(v96 + 272) + 8 * v1467);
                uint64_t v1469 = *v1468;
                if (v1469)
                {
                  if ((*(unsigned char *)(v1469 + 3) & 1) != 0
                    || (uint64_t v1469 = *(void *)(v1469 + 24)) != 0 && (*(unsigned char *)(v1469 + 3) & 1) != 0)
                  {
                    v936 = *(llvm::MachineInstr **)(v1469 + 8);
                    if (v936)
                    {
                      uint64_t v1775 = v1466[17];
                      sub_1CC73C210(v1466[25], v96, (uint64_t)&v1839);
                      if (BYTE8(v1840))
                      {
                        if (v1840 < 0x41)
                        {
                          if (LODWORD(__s1[1]) >= (unint64_t)HIDWORD(__s1[1])) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          v935 = (long long *)v1787;
                          *((void *)__s1[0] + LODWORD(__s1[1])) = v1775 | ((uint64_t)(v1839 << -(char)v1840) >> -(char)v1840 << 32);
                          ++LODWORD(__s1[1]);
                          continue;
                        }
                        if (v1839) {
                          MEMORY[0x1D25D9CB0](v1839, 0x1000C8000313F17);
                        }
                      }
                      v935 = (long long *)v1787;
                    }
                  }
                }
              }
            }
          }
          break;
        }
        unint64_t v941 = v100 >> 3;
        unint64_t v942 = LODWORD(__s1[1]);
        if (LODWORD(__s1[1]) != (unint64_t)(unsigned __int16)v941)
        {
          BOOL v943 = 0;
          goto LABEL_1347;
        }
        size_t v1790 = (size_t)v935;
        unint64_t v1839 = (unint64_t)&v1841;
        long long v1840 = xmmword_1CDB159A0;
        sub_1CBAC7FD0(&v1839, LODWORD(__s1[1]), 0);
        unint64_t v1615 = 126 - 2 * __clz(LODWORD(__s1[1]));
        if (LODWORD(__s1[1])) {
          uint64_t v1616 = v1615;
        }
        else {
          uint64_t v1616 = 0;
        }
        sub_1CBAC8080((int *)__s1[0], (int *)__s1[0] + 2 * LODWORD(__s1[1]), v1616, 1);
        v1778 = __s1[0];
        if (!v934) {
          goto LABEL_3307;
        }
        if (*((_DWORD *)__s1[0] + 1))
        {
          BOOL v943 = 0;
          goto LABEL_2658;
        }
        unint64_t v1675 = 0;
        v1676 = (int *)((char *)__s1[0] + 12);
        while (v942 - 1 != v1675)
        {
          ++v1675;
          int v1677 = *v1676;
          v1676 += 2;
          if (v1675 != v1677)
          {
            BOOL v943 = v1675 >= v942;
            goto LABEL_2658;
          }
        }
LABEL_3307:
        v1824 = &v1826;
        uint64_t v1825 = 0x400000000;
        if (LODWORD(__s1[1]))
        {
          LODWORD(v1678) = 0;
          uint64_t v1679 = 8 * LODWORD(__s1[1]);
          do
          {
            if (v1678 >= HIDWORD(v1825)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v1824 + v1678) = *v1778;
            uint64_t v1678 = (v1825 + 1);
            LODWORD(v1825) = v1825 + 1;
            v1778 += 2;
            v1679 -= 8;
          }
          while (v1679);
          v1680 = (int *)v1824;
        }
        else
        {
          uint64_t v1678 = 0;
          v1680 = (int *)&v1826;
        }
        LODWORD(v1821) = v98;
        DWORD2(v1821) = 1;
        sub_1CC738CA0(v95, (uint64_t)&v1821, v1680, v1678);
        llvm::MachineInstr::eraseFromParent(this);
        if (v1824 != &v1826) {
          free(v1824);
        }
        BOOL v943 = 1;
LABEL_2658:
        if ((uint64_t *)v1839 != &v1841) {
          free((void *)v1839);
        }
        v935 = (long long *)v1790;
LABEL_1347:
        if (__s1[0] != v935) {
          free(__s1[0]);
        }
        if (v943) {
          return 1;
        }
LABEL_143:
        sub_1CC73C210(v99, v96, (uint64_t)__s1);
        if (!(_BYTE)v1829) {
          goto LABEL_840;
        }
        char v104 = (char)__s1[1];
        if (LODWORD(__s1[1]) >= 0x41) {
          goto LABEL_2510;
        }
        uint64_t v105 = __s1[0];
        unint64_t v1839 = (unint64_t)&v1840 + 8;
        *(void *)&long long v1840 = 0x800000000;
        char v76 = sub_1CBAC8BD8(v101, v96, *a1, (uint64_t)&v1839);
        if (v76)
        {
          unint64_t v106 = (int *)v1839;
          *(_DWORD *)(v1839 + 4 * ((uint64_t)((void)v105 << -v104) >> -v104)) = v1793;
          uint64_t v107 = *a1;
          LODWORD(v1824) = v98;
          LODWORD(v1825) = 1;
          int v108 = v1840;
          __s1[0] = &v1829;
          __s1[1] = (void *)0x800000000;
          if (v1840 >= 9) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v1840)
          {
            uint64_t v109 = 0;
            uint64_t v110 = 4 * v1840;
            do
            {
              int v111 = *v106++;
              unsigned int v112 = (_DWORD *)((char *)&v1829 + v109);
              *unsigned int v112 = v111;
              v112[4] = 0;
              v109 += 24;
              v110 -= 4;
            }
            while (v110);
            int v113 = (int)__s1[1];
          }
          else
          {
            int v113 = 0;
          }
          LODWORD(__s1[1]) = v113 + v108;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t))(*(void *)v107 + 32))(v107, 77, &v1824, 1);
          if (__s1[0] != &v1829) {
            free(__s1[0]);
          }
          llvm::MachineInstr::eraseFromParent(this);
        }
        uint64_t v77 = (uint64_t *)v1839;
        if ((long long *)v1839 == (long long *)((char *)&v1840 + 8)) {
          goto LABEL_1002;
        }
        goto LABEL_155;
    }
  }
  if (v4 <= 89)
  {
    switch(v4)
    {
      case '-':
        uint64_t v7 = *(unsigned int *)(*((void *)this + 4) + 4);
        uint64_t v8 = *a1;
        uint64_t v9 = *(void *)(*(void *)(*a1 + 8) + 40);
        *(void *)(v8 + 40) = *((void *)this + 3);
        *(void *)(v8 + 48) = this;
        uint64_t v10 = (_DWORD *)*((void *)this + 4);
        uint64_t v11 = v10[9];
        uint64_t v12 = v10[17];
        if ((v7 & 0x80000000) != 0 && (v7 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v9 + 432)) {
          uint64_t v13 = *(void *)(*(void *)(v9 + 424) + 8 * (v7 & 0x7FFFFFFF));
        }
        else {
          uint64_t v13 = 0;
        }
        *(void *)&long long v1821 = v13;
        if (sub_1CBAAF488(**((_WORD **)this + 2), v10, v9))
        {
          LODWORD(v1819) = 0;
          v1824 = 0;
          __s1[0] = &v1819;
          __s1[1] = &v1824;
          LODWORD(v1839) = v12;
          if ((sub_1CBACA848((uint64_t)__s1, v9, (unsigned int *)&v1839) & 1) == 0)
          {
            __s1[0] = &v1819;
            __s1[1] = &v1824;
            LODWORD(v1839) = v11;
            sub_1CBACA848((uint64_t)__s1, v9, (unsigned int *)&v1839);
          }
          uint64_t v1660 = 16 * sub_1CB8F1DC4((unint64_t *)&v1821);
          if (v1659 == 1) {
          int GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v9, v1660 & 0x7FFFFFFF0 | 1, "", 0);
          }
          uint64_t v1662 = *a1;
          LODWORD(v1839) = GenericVirtualRegister;
          LODWORD(v1840) = 1;
          LODWORD(__s1[0]) = v1819;
          LODWORD(v1829) = 0;
          DWORD2(v1829) = v1819;
          LODWORD(v1831) = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v1662 + 32))(v1662, 76, &v1839, 1, __s1, 2, 0);
          int v839 = (void *)*a1;
          LODWORD(v1839) = v7;
          LODWORD(v1840) = 1;
          LODWORD(__s1[0]) = GenericVirtualRegister;
          LODWORD(v1829) = 0;
          v840 = v1824;
LABEL_1200:
          sub_1CC7383D8(v839, &v1839, (int *)__s1, (uint64_t)v840);
          goto LABEL_887;
        }
        if ((v7 & 0x80000000) != 0) {
          uint64_t v14 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v14 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v7);
        }
        uint64_t v15 = *v14;
        if (!v15) {
          goto LABEL_28;
        }
        if ((*(unsigned char *)(v15 + 3) & 1) == 0)
        {
          uint64_t v15 = *(void *)(v15 + 24);
          if (!v15 || (*(unsigned char *)(v15 + 3) & 1) == 0) {
            goto LABEL_28;
          }
        }
        uint64_t v16 = *(void *)(v15 + 8);
        if (!v16 || **(_WORD **)(v16 + 16) != 45 || *(_DWORD *)(v16 + 40) != 3) {
          goto LABEL_28;
        }
        uint64_t v17 = *(void *)(v16 + 32);
        LODWORD(v18) = *(_DWORD *)(v17 + 36);
        sub_1CC73C210(*(_DWORD *)(v17 + 68), v9, (uint64_t)__s1);
        if (!(_BYTE)v1829) {
          goto LABEL_27;
        }
        if (LODWORD(__s1[1]) < 0x41)
        {
          unint64_t v32 = (uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1]);
          goto LABEL_248;
        }
        if (__s1[0]) {
          MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
        }
LABEL_27:
        sub_1CC73C210(*(_DWORD *)(*(void *)(v16 + 32) + 36), v9, (uint64_t)__s1);
        if (!(_BYTE)v1829) {
          goto LABEL_28;
        }
        if (LODWORD(__s1[1]) >= 0x41)
        {
          if (__s1[0]) {
            MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
          }
LABEL_28:
          if ((v7 & 0x80000000) != 0) {
            int v19 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
          }
          else {
            int v19 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v7);
          }
          uint64_t v20 = *v19;
          if (!v20) {
            goto LABEL_250;
          }
          if ((*(unsigned char *)(v20 + 3) & 1) == 0)
          {
            uint64_t v20 = *(void *)(v20 + 24);
            if (!v20 || (*(unsigned char *)(v20 + 3) & 1) == 0) {
              goto LABEL_250;
            }
          }
          uint64_t v21 = *(void *)(v20 + 8);
          if (!v21 || **(_WORD **)(v21 + 16) != 45 || *(_DWORD *)(v21 + 40) != 3) {
            goto LABEL_250;
          }
          uint64_t v22 = *(void *)(v21 + 32);
          uint64_t v23 = *(unsigned int *)(v22 + 68);
          if ((v23 & 0x80000000) != 0) {
            uint64_t v24 = *(void *)(v9 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8;
          }
          else {
            uint64_t v24 = *(void *)(v9 + 272) + 8 * v23;
          }
          uint64_t v18 = *(unsigned int *)(v22 + 36);
          uint64_t v25 = *(void *)v24;
          if ((*(unsigned char *)(*(void *)v24 + 3) & 1) == 0) {
            uint64_t v25 = *(void *)(v25 + 24);
          }
          uint64_t v26 = *(void *)(v25 + 8);
          if (**(_WORD **)(v26 + 16) != 121 || (uint64_t v30 = *(void *)(*(void *)(v26 + 32) + 48)) == 0)
          {
            if ((v18 & 0x80000000) != 0) {
              unint64_t v27 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
            }
            else {
              unint64_t v27 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v18);
            }
            uint64_t v28 = *v27;
            if ((*(unsigned char *)(v28 + 3) & 1) == 0) {
              uint64_t v28 = *(void *)(v28 + 24);
            }
            uint64_t v29 = *(void *)(v28 + 8);
            if (**(_WORD **)(v29 + 16) != 121) {
              goto LABEL_250;
            }
            uint64_t v30 = *(void *)(*(void *)(v29 + 32) + 48);
            if (!v30) {
              goto LABEL_250;
            }
            LODWORD(v18) = v23;
          }
          sub_1CB867534(v30 + 24, (uint64_t)__s1);
          if (LODWORD(__s1[1]) >= 0x41) {
            uint64_t v31 = (void **)__s1[0];
          }
          else {
            uint64_t v31 = __s1;
          }
          unint64_t v32 = (unint64_t)*v31;
          if (LODWORD(__s1[1]) >= 0x41 && __s1[0]) {
            MEMORY[0x1D25D9CB0]();
          }
        }
        else
        {
          unint64_t v32 = (uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1]);
          LODWORD(v18) = *(_DWORD *)(*(void *)(v16 + 32) + 68);
        }
LABEL_248:
        if (!v32)
        {
          uint64_t v64 = *a1;
          LODWORD(v1839) = v7;
          goto LABEL_1767;
        }
        if (v32 >= 0x8000000000000001)
        {
          uint64_t v576 = *a1;
          if ((v18 & 0x80000000) != 0 && (v18 & 0x7FFFFFFF) < *(_DWORD *)(v9 + 432)) {
            v1348 = *(void **)(*(void *)(v9 + 424) + 8 * (v18 & 0x7FFFFFFF));
          }
          else {
            v1348 = 0;
          }
          v1824 = v1348;
          LODWORD(v1825) = 0;
          uint64_t v1349 = sub_1CC7362A8(v576, (unint64_t *)&v1824, -(uint64_t)v32);
          LODWORD(v1839) = v7;
          LODWORD(v1840) = 1;
          LODWORD(__s1[0]) = v18;
          LODWORD(v1829) = 0;
          *((void *)&v1829 + 1) = v1349;
          unint64_t v1830 = v1350;
          LODWORD(v1831) = 1;
          goto LABEL_2048;
        }
LABEL_250:
        unint64_t v203 = *(void **)(*(void *)(*a1 + 8) + 40);
        LOWORD(v1839) = *((_WORD *)this + 22);
        int v204 = (unsigned int *)*((void *)this + 4);
        uint64_t v205 = v204[1];
        LOBYTE(v1824) = 0;
        if ((v205 & 0x80000000) != 0) {
          uint64_t v206 = (uint64_t *)(v203[3] + 16 * (v205 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v206 = (uint64_t *)(v203[34] + 8 * v205);
        }
        uint64_t v207 = *v206;
        if (!v207) {
          goto LABEL_262;
        }
        while ((*(unsigned char *)(v207 + 3) & 1) != 0)
        {
          uint64_t v207 = *(void *)(v207 + 24);
          if (!v207) {
            goto LABEL_262;
          }
        }
        uint64_t v208 = *(void *)(v207 + 8);
        if (**(_WORD **)(v208 + 16) == 81)
        {
LABEL_261:
          LOBYTE(v1824) = 1;
        }
        else
        {
          while (1)
          {
            uint64_t v207 = *(void *)(v207 + 24);
            if (!v207) {
              break;
            }
            if ((*(unsigned char *)(v207 + 3) & 1) == 0)
            {
              uint64_t v209 = *(void *)(v207 + 8);
              if (v209 != v208)
              {
                uint64_t v208 = *(void *)(v207 + 8);
                if (**(_WORD **)(v209 + 16) == 81) {
                  goto LABEL_261;
                }
              }
            }
          }
        }
LABEL_262:
        __s1[0] = v203;
        __s1[1] = a1;
        *(void *)&long long v1829 = &v1839;
        *((void *)&v1829 + 1) = &v1824;
        uint64_t v210 = **((unsigned __int16 **)this + 2);
        unsigned int v211 = v204[9];
        unsigned int v212 = v204[17];
        unint64_t v213 = sub_1CBAB00C0((uint64_t)__s1, v210, v211, v212);
        if (HIDWORD(v213)
          || (*(unsigned char *)(*((void *)this + 2) + 11) & 2) != 0
          && (unint64_t v213 = sub_1CBAB00C0((uint64_t)__s1, v210, v212, v211), HIDWORD(v213)))
        {
          uint64_t v1327 = *a1;
          LODWORD(v1839) = v7;
          LODWORD(v1840) = 1;
          LODWORD(__s1[0]) = v213;
          LODWORD(v1829) = 0;
          uint64_t v561 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v1327 + 32);
          uint64_t v562 = v1327;
          uint64_t v563 = 19;
          goto LABEL_720;
        }
        char v214 = 1;
        do
        {
          uint64_t v215 = v12;
          uint64_t v12 = v11;
          char v216 = v214;
          if ((v11 & 0x80000000) != 0) {
            unint64_t v217 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v11 & 0x7FFFFFFF) + 8);
          }
          else {
            unint64_t v217 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v11);
          }
          uint64_t v218 = *v217;
          if (v218)
          {
            if ((*(unsigned char *)(v218 + 3) & 1) != 0
              || (uint64_t v218 = *(void *)(v218 + 24)) != 0 && (*(unsigned char *)(v218 + 3) & 1) != 0)
            {
              uint64_t v219 = *(void *)(v218 + 8);
              if (v219)
              {
                if (**(_WORD **)(v219 + 16) == 46 && *(_DWORD *)(v219 + 40) == 3)
                {
                  uint64_t v1203 = *(void *)(v219 + 32);
                  if (v215 == *(_DWORD *)(v1203 + 68))
                  {
                    int v65 = *(_DWORD *)(v1203 + 36);
LABEL_1777:
                    uint64_t v64 = *a1;
                    LODWORD(v1839) = v7;
                    LODWORD(v1840) = 1;
                    goto LABEL_884;
                  }
                }
              }
            }
          }
          if ((v11 & 0x80000000) != 0) {
            uint64_t v220 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v11 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v220 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v11);
          }
          uint64_t v221 = *v220;
          if (v221)
          {
            if ((*(unsigned char *)(v221 + 3) & 1) != 0
              || (uint64_t v221 = *(void *)(v221 + 24)) != 0 && (*(unsigned char *)(v221 + 3) & 1) != 0)
            {
              uint64_t v222 = *(void *)(v221 + 8);
              if (v222)
              {
                if (**(_WORD **)(v222 + 16) == 46 && *(_DWORD *)(v222 + 40) == 3)
                {
                  sub_1CC73C210(*(_DWORD *)(*(void *)(v222 + 32) + 36), v9, (uint64_t)__s1);
                  if ((_BYTE)v1829)
                  {
                    if (LODWORD(__s1[1]) >= 0x41)
                    {
                      if (__s1[0]) {
                        MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
                      }
                    }
                    else if (!((uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1])))
                    {
                      int v1201 = *(_DWORD *)(*(void *)(v222 + 32) + 68);
                      uint64_t v1202 = *a1;
                      LODWORD(v1839) = v7;
                      LODWORD(v1840) = 1;
                      LODWORD(__s1[0]) = v215;
                      LODWORD(v1829) = 0;
                      DWORD2(v1829) = v1201;
                      LODWORD(v1831) = 0;
                      int v226 = *(void (**)(void))(*(void *)v1202 + 32);
                      goto LABEL_886;
                    }
                  }
                }
              }
            }
          }
          char v214 = 0;
          uint64_t v11 = v215;
        }
        while ((v216 & 1) != 0);
        if ((v7 & 0x80000000) != 0 && (v7 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v9 + 432)) {
          uint64_t v223 = *(void **)(*(void *)(v9 + 424) + 8 * (v7 & 0x7FFFFFFF));
        }
        else {
          uint64_t v223 = 0;
        }
        __s1[0] = v223;
        if (sub_1CBAAF87C(a1, (uint64_t)this, (unint64_t *)__s1)) {
          return 1;
        }
        if (!sub_1CBAAF9D8(v215, v12, a1[3])) {
          goto LABEL_840;
        }
        uint64_t v224 = *a1;
        *(void *)(v224 + 40) = *((void *)this + 3);
        *(void *)(v224 + 48) = this;
        uint64_t v225 = *a1;
        LODWORD(v1839) = v7;
        LODWORD(v1840) = 1;
        LODWORD(__s1[0]) = v215;
        LODWORD(v1829) = 0;
        DWORD2(v1829) = v12;
        LODWORD(v1831) = 0;
        int v226 = *(void (**)(void))(*(void *)v225 + 32);
        goto LABEL_886;
      case '.':
        int v564 = *(_DWORD *)(*((void *)this + 4) + 4);
        uint64_t v565 = *a1;
        uint64_t v566 = *(void *)(*(void *)(*a1 + 8) + 40);
        if (v564 < 0 && (v564 & 0x7FFFFFFFu) < *(_DWORD *)(v566 + 432)) {
          uint64_t v567 = *(void **)(*(void *)(v566 + 424) + 8 * (v564 & 0x7FFFFFFF));
        }
        else {
          uint64_t v567 = 0;
        }
        *(void *)(v565 + 40) = *((void *)this + 3);
        *(void *)(v565 + 48) = this;
        uint64_t v568 = *((void *)this + 4);
        uint64_t v18 = *(unsigned int *)(v568 + 36);
        uint64_t v569 = *(unsigned int *)(v568 + 68);
        if (v18 != v569)
        {
          sub_1CC73C5E8(v569, v566, (uint64_t)__s1);
          if ((_BYTE)v1829)
          {
            if (LODWORD(__s1[1]) >= 0x41)
            {
              if (__s1[0]) {
                MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
              }
            }
            else if (!((uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1])))
            {
              goto LABEL_1621;
            }
          }
          if ((v18 & 0x80000000) != 0) {
            uint64_t v570 = (uint64_t *)(*(void *)(v566 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v570 = (uint64_t *)(*(void *)(v566 + 272) + 8 * v18);
          }
          uint64_t v571 = *v570;
          if ((*(unsigned char *)(v571 + 3) & 1) == 0) {
            uint64_t v571 = *(void *)(v571 + 24);
          }
          if (**(_WORD **)(*(void *)(v571 + 8) + 16) != 68)
          {
            if ((v569 & 0x80000000) != 0) {
              uint64_t v572 = (uint64_t *)(*(void *)(v566 + 24) + 16 * (v569 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v572 = (uint64_t *)(*(void *)(v566 + 272) + 8 * v569);
            }
            uint64_t v573 = *v572;
            if ((*(unsigned char *)(v573 + 3) & 1) == 0) {
              uint64_t v573 = *(void *)(v573 + 24);
            }
            if (**(_WORD **)(*(void *)(v573 + 8) + 16) != 68)
            {
              sub_1CC73C210(v18, v566, (uint64_t)__s1);
              if (!(_BYTE)v1829) {
                goto LABEL_840;
              }
              char v574 = (char)__s1[1];
              if (LODWORD(__s1[1]) < 0x41)
              {
                uint64_t v575 = __s1[0];
                LODWORD(v1819) = 0;
                *(void *)&long long v1821 = 0;
                __s1[0] = &v1821;
                __s1[1] = &v1819;
                LODWORD(v1839) = v569;
                if ((sub_1CBACA950((uint64_t)__s1, v566, (unsigned int *)&v1839) & 1) == 0) {
                  goto LABEL_840;
                }
                uint64_t v576 = *a1;
                v1824 = v567;
                LODWORD(v1825) = 0;
                uint64_t v577 = (void *)sub_1CC7362A8(v576, (unint64_t *)&v1824, ((uint64_t)((void)v575 << -v574) >> -v574) - v1821);
                LODWORD(v1839) = v564;
                LODWORD(v1840) = 1;
                __s1[0] = v577;
                __s1[1] = v578;
                LODWORD(v1829) = 1;
                DWORD2(v1829) = v1819;
LABEL_740:
                LODWORD(v1831) = 0;
LABEL_2048:
                int v226 = *(void (**)(void))(*(void *)v576 + 32);
                goto LABEL_886;
              }
              goto LABEL_2510;
            }
            LODWORD(v18) = v569;
          }
LABEL_1621:
          uint64_t v64 = *a1;
          LODWORD(v1839) = v564;
          goto LABEL_1767;
        }
        uint64_t v1656 = *a1;
        LODWORD(v1839) = v564;
        LODWORD(v1840) = 1;
        v1824 = v567;
        LODWORD(v1825) = 0;
        __s1[0] = (void *)sub_1CC7362A8(v1656, (unint64_t *)&v1824, 0);
        __s1[1] = v1657;
        LODWORD(v1829) = 1;
        int v226 = *(void (**)(void))(*(void *)v1656 + 32);
        goto LABEL_886;
      case '/':
        uint64_t v232 = *(unsigned int *)(*((void *)this + 4) + 4);
        uint64_t v233 = *(void *)(*(void *)(*a1 + 8) + 40);
        if ((v232 & 0x80000000) != 0)
        {
          uint64_t v234 = v232 & 0x7FFFFFFF;
          if ((v232 & 0x7FFFFFFF) >= *(_DWORD *)(v233 + 432)) {
            int v235 = 0;
          }
          else {
            int v235 = *(void **)(*(void *)(v233 + 424) + 8 * v234);
          }
          *(void *)&long long v1819 = v235;
          int v236 = (uint64_t *)(*(void *)(v233 + 24) + 16 * v234 + 8);
        }
        else
        {
          int v235 = 0;
          *(void *)&long long v1819 = 0;
          int v236 = (uint64_t *)(*(void *)(v233 + 272) + 8 * v232);
        }
        uint64_t v237 = *v236;
        if (!v237) {
          goto LABEL_840;
        }
        if ((*(unsigned char *)(v237 + 3) & 1) == 0)
        {
          uint64_t v237 = *(void *)(v237 + 24);
          if (!v237 || (*(unsigned char *)(v237 + 3) & 1) == 0) {
            goto LABEL_840;
          }
        }
        uint64_t v238 = *(void *)(v237 + 8);
        if (!v238 || **(_WORD **)(v238 + 16) != 47 || *(_DWORD *)(v238 + 40) != 3) {
          goto LABEL_840;
        }
        uint64_t v239 = *(void *)(v238 + 32);
        int v240 = *(_DWORD *)(v239 + 36);
        sub_1CC73C210(*(_DWORD *)(v239 + 68), v233, (uint64_t)__s1);
        if (!(_BYTE)v1829) {
          goto LABEL_301;
        }
        if (LODWORD(__s1[1]) >= 0x41)
        {
          if (__s1[0]) {
            MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
          }
LABEL_301:
          sub_1CC73C210(*(_DWORD *)(*(void *)(v238 + 32) + 36), v233, (uint64_t)__s1);
          if (!(_BYTE)v1829) {
            goto LABEL_840;
          }
          if (LODWORD(__s1[1]) >= 0x41) {
            goto LABEL_2510;
          }
          uint64_t v241 = (uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1]);
          int v240 = *(_DWORD *)(*(void *)(v238 + 32) + 68);
        }
        else
        {
          uint64_t v241 = (uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1]);
        }
        uint64_t v756 = *a1;
        *(void *)(v756 + 40) = *((void *)this + 3);
        *(void *)(v756 + 48) = this;
        switch(v241)
        {
          case 0:
            uint64_t v357 = *a1;
            LODWORD(__s1[0]) = v232;
            goto LABEL_1918;
          case 1:
            uint64_t v64 = *a1;
            LODWORD(v1839) = v232;
            LODWORD(v1840) = 1;
            LODWORD(__s1[0]) = v240;
            goto LABEL_885;
          case -1:
            uint64_t v576 = *a1;
            v1824 = v235;
            LODWORD(v1825) = 0;
            v1619 = (void *)sub_1CC7362A8(v576, (unint64_t *)&v1824, 0);
            LODWORD(v1839) = v232;
            LODWORD(v1840) = 1;
            __s1[0] = v1619;
            __s1[1] = v1620;
            LODWORD(v1829) = 1;
            DWORD2(v1829) = v240;
            goto LABEL_740;
        }
        if (v241 >= 0) {
          unint64_t v757 = v241;
        }
        else {
          unint64_t v757 = -v241;
        }
        unsigned int v759 = sub_1CB8F1DC4((unint64_t *)&v1819);
        if (v758 == 1) {
        LODWORD(v1825) = v759;
        }
        if (v759 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v1824);
        }
        if (v759) {
          unint64_t v760 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v759;
        }
        else {
          unint64_t v760 = 0;
        }
        unint64_t v761 = v760 & v757;
        v1824 = (void *)(v760 & v757);
        if ((v760 & v757) != 0 && (v761 & (v761 - 1)) == 0 && v757 <= 0x10)
        {
          *((_WORD *)this + 22) &= 0xE7FFu;
          uint64_t v917 = *a1;
          __s1[0] = (void *)v1819;
          LODWORD(__s1[1]) = 0;
          uint64_t v918 = sub_1CC7362A8(v917, (unint64_t *)__s1, v759 + ~(v759 + __clz(v761) - 64));
          uint64_t v919 = *a1;
          unint64_t v1839 = v1819;
          LODWORD(v1840) = 0;
          LODWORD(__s1[0]) = v240;
          LODWORD(v1829) = 0;
          *((void *)&v1829 + 1) = v918;
          unint64_t v1830 = v920;
          LODWORD(v1831) = 1;
          long long v921 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(void *)v919 + 32))(v919, 127, &v1839, 1, __s1, 2, *((unsigned __int16 *)this + 22) | 0x100000000);
          uint64_t v923 = v921;
          unint64_t v924 = (unint64_t)v922;
          uint64_t v925 = *a1;
          if (v241 < 0)
          {
            *(void *)&long long v1821 = v1819;
            DWORD2(v1821) = 0;
            v1532 = (void *)sub_1CC7362A8(v925, (unint64_t *)&v1821, 0);
            uint64_t v1533 = *((unsigned __int16 *)this + 22) | 0x100000000;
            LODWORD(v1839) = v232;
            LODWORD(v1840) = 1;
            __s1[0] = v1532;
            __s1[1] = v1534;
            LODWORD(v1829) = 1;
            *((void *)&v1829 + 1) = v923;
            unint64_t v1830 = v924;
            LODWORD(v1831) = 1;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(void *)v925 + 32))(v925, 46, &v1839, 1, __s1, 2, v1533);
          }
          else
          {
            LODWORD(v1839) = v232;
            LODWORD(v1840) = 1;
            __s1[0] = v921;
            __s1[1] = v922;
            LODWORD(v1829) = 1;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v925 + 32))(v925, 19, &v1839, 1, __s1, 1, 0);
          }
          llvm::MachineInstr::eraseFromParent(this);
          return 1;
        }
        goto LABEL_840;
      case '0':
      case '1':
        goto LABEL_840;
      case '2':
        v384 = (_DWORD *)*((void *)this + 4);
        int v385 = v384[9];
        int v386 = v384[17];
        if (v385 < 0
          && (uint64_t v387 = *(void *)(*(void *)(*a1 + 8) + 40), (v385 & 0x7FFFFFFFu) < *(_DWORD *)(v387 + 432)))
        {
          uint64_t v388 = *(void *)(*(void *)(v387 + 424) + 8 * (v385 & 0x7FFFFFFF));
        }
        else
        {
          uint64_t v388 = 0;
        }
        LODWORD(v1839) = v384[4];
        HIDWORD(v1839) = v385;
        LODWORD(v1840) = v386;
        *((void *)&v1840 + 1) = v388;
        sub_1CBAB0A3C((uint64_t)__s1, a1, (int *)&v1839, (uint64_t)this);
        if (!(_BYTE)v1830 || DWORD2(v1829)) {
          goto LABEL_840;
        }
        int v389 = (int)__s1[0];
        int v390 = HIDWORD(__s1[0]);
        int v391 = (int)__s1[1];
        uint64_t v392 = *a1;
        *(void *)(v392 + 40) = *((void *)this + 3);
        *(void *)(v392 + 48) = this;
        unsigned int v393 = (unsigned __int8 **)((char *)this + 56);
        int v394 = (llvm::MachineInstr *)(*a1 + 32);
        if ((llvm::MachineInstr *)((char *)this + 56) == v394) {
          goto LABEL_503;
        }
        unsigned int v395 = *(unsigned __int8 **)v394;
        if (!*(void *)v394) {
          goto LABEL_501;
        }
        int v1544 = *v395;
        if ((v1544 - 4) > 0x1E)
        {
          if ((v1544 - 3) >= 0xFFFFFFFE) {
            v1597 = *(unsigned __int8 **)v394;
          }
          else {
            v1597 = 0;
          }
          if ((v1544 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1546 = (unint64_t)(v1597 + 8);
LABEL_2517:
            unint64_t v1839 = *a1 + 32;
            sub_1CC5FA668(v1546 + 16, &v1839);
            goto LABEL_501;
          }
          if (v1544 == 3) {
            *((void *)v395 + 1) = 0;
          }
        }
        else if ((v395[1] & 0x7F) == 2 || *((_DWORD *)v395 + 3))
        {
          uint64_t v1545 = *((void *)v395 + 2);
          if ((v1545 & 4) != 0)
          {
            unint64_t v1546 = v1545 & 0xFFFFFFFFFFFFFFF8;
            if (v1546) {
              goto LABEL_2517;
            }
          }
        }
LABEL_501:
        v396 = *v393;
        *(void *)int v394 = *v393;
        if (v396) {
          llvm::MetadataTracking::track((uint64_t)v394, v396, 2);
        }
LABEL_503:
        uint64_t v397 = (void *)*a1;
        v398 = *(llvm::MachineFunction **)(*a1 + 8);
        uint64_t v399 = *(void *)(v397[2] + 8) + 2400;
        BOOL v400 = (uint64_t *)v397[4];
        unint64_t v1839 = (unint64_t)v400;
        if (v400) {
          llvm::MetadataTracking::track((uint64_t)&v1839, (unsigned __int8 *)v400, 2);
        }
        MachineInstr = llvm::MachineFunction::CreateMachineInstr(v398, v399, (unsigned __int8 **)&v1839, 0);
        if (v1839) {
          llvm::MetadataTracking::untrack((uint64_t)&v1839, (unsigned __int8 *)v1839);
        }
        unsigned int v402 = (unint64_t *)v397[6];
        uint64_t v403 = *(void *)(v397[5] + 40);
        *((void *)MachineInstr + 3) = v403;
        uint64_t v404 = *(void *)(v403 + 32);
        uint64_t v405 = *((unsigned int *)MachineInstr + 10);
        if (v405)
        {
          uint64_t v1537 = *((void *)MachineInstr + 4);
          uint64_t v1538 = *(void *)(v404 + 40);
          uint64_t v1539 = 32 * v405;
          do
          {
            if (!*(unsigned char *)v1537)
            {
              uint64_t v1540 = *(unsigned int *)(v1537 + 4);
              if ((int)v1540 >= 0) {
                v1541 = (uint64_t *)(*(void *)(v1538 + 272) + 8 * v1540);
              }
              else {
                v1541 = (uint64_t *)(*(void *)(v1538 + 24) + 16 * (v1540 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1542 = *v1541;
              if (*v1541)
              {
                uint64_t v1543 = *(void *)(v1542 + 16);
                *(void *)(v1542 + 16) = v1537;
                *(void *)(v1537 + 16) = v1543;
                if (*(unsigned char *)(v1537 + 3))
                {
                  *(void *)(v1537 + 24) = v1542;
                }
                else
                {
                  *(void *)(v1537 + 24) = 0;
                  v1541 = (uint64_t *)(v1543 + 24);
                }
              }
              else
              {
                *(void *)(v1537 + 16) = v1537;
                *(void *)(v1537 + 24) = 0;
              }
              uint64_t *v1541 = v1537;
            }
            v1537 += 32;
            v1539 -= 32;
          }
          while (v1539);
        }
        uint64_t v406 = *(void *)(v404 + 728);
        if (v406) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v406 + 24))(v406, MachineInstr);
        }
        unint64_t v407 = *v402 & 0xFFFFFFFFFFFFFFF8;
        *(void *)MachineInstr = v407 | *(void *)MachineInstr & 7;
        *((void *)MachineInstr + 1) = v402;
        *(void *)(v407 + 8) = MachineInstr;
        *unsigned int v402 = *v402 & 7 | (unint64_t)MachineInstr;
        uint64_t v408 = v397[7];
        if (v408) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v408 + 24))(v408, MachineInstr);
        }
        LODWORD(v1839) = 18;
        *(void *)&long long v1840 = 0;
        DWORD2(v1840) = v389;
        llvm::MachineInstr::addOperand(MachineInstr, v398, (const llvm::MachineOperand *)&v1839);
        long long v1840 = 0uLL;
        LODWORD(v1839) = 0;
        HIDWORD(v1839) = v390;
        uint64_t v1841 = 0;
        llvm::MachineInstr::addOperand(MachineInstr, v398, (const llvm::MachineOperand *)&v1839);
        long long v1840 = 0uLL;
        LODWORD(v1839) = 0;
        HIDWORD(v1839) = v391;
        uint64_t v1841 = 0;
        llvm::MachineInstr::addOperand(MachineInstr, v398, (const llvm::MachineOperand *)&v1839);
        llvm::MachineInstr::addOperand(MachineInstr, v398, (const llvm::MachineOperand *)(*((void *)this + 4) + 96));
        *((_WORD *)MachineInstr + 22) = *((_WORD *)MachineInstr + 22) & 0xC | *((_WORD *)this + 22) & 0xFFF3;
        goto LABEL_887;
      case '3':
        uint64_t v255 = (_DWORD *)*((void *)this + 4);
        int v256 = v255[17];
        int v257 = v255[25];
        if (v256 < 0
          && (uint64_t v258 = *(void *)(*(void *)(*a1 + 8) + 40), (v256 & 0x7FFFFFFFu) < *(_DWORD *)(v258 + 432)))
        {
          uint64_t v259 = *(void *)(*(void *)(v258 + 424) + 8 * (v256 & 0x7FFFFFFF));
        }
        else
        {
          uint64_t v259 = 0;
        }
        int v260 = v255[33];
        int v261 = v255[41];
        LODWORD(__s1[0]) = v255[12];
        HIDWORD(__s1[0]) = v256;
        LODWORD(__s1[1]) = v257;
        *(void *)&long long v1829 = v259;
        sub_1CBAB0A3C((uint64_t)&v1839, a1, (int *)__s1, (uint64_t)this);
        if (!(_BYTE)v1842) {
          goto LABEL_840;
        }
        uint64_t v262 = *a1;
        *(void *)(v262 + 40) = *((void *)this + 3);
        *(void *)(v262 + 48) = this;
        if (v1841)
        {
          uint64_t v1617 = *a1;
          LODWORD(v1824) = *(_DWORD *)(*((void *)this + 4) + 4);
          LODWORD(v1825) = 1;
          if ((_BYTE)v1839) {
            int v1618 = v260;
          }
          else {
            int v1618 = v261;
          }
          LODWORD(__s1[0]) = v1618;
          LODWORD(v1829) = 0;
          int v226 = *(void (**)(void))(*(void *)v1617 + 32);
        }
        else
        {
          uint64_t v263 = *a1;
          LODWORD(v1824) = *(_DWORD *)(*((void *)this + 4) + 4);
          LODWORD(v1825) = 1;
          LODWORD(__s1[0]) = v1839;
          LODWORD(v1829) = 2;
          DWORD2(v1829) = HIDWORD(v1839);
          LODWORD(v1831) = 0;
          LODWORD(v1832) = v1840;
          *(_DWORD *)v1834 = 0;
          *(_DWORD *)&v1834[8] = v260;
          *(_DWORD *)v1835 = 0;
          *(_DWORD *)&v1835[8] = v261;
          *(_DWORD *)&v1835[24] = 0;
          int v226 = *(void (**)(void))(*(void *)v263 + 32);
        }
        goto LABEL_886;
      default:
        switch(v4)
        {
          case 'A':
            LODWORD(v7) = *(_DWORD *)(*((void *)this + 4) + 4);
            uint64_t v522 = *a1;
            uint64_t v424 = *(void *)(*(void *)(*a1 + 8) + 40);
            *(void *)(v522 + 40) = *((void *)this + 3);
            *(void *)(v522 + 48) = this;
            uint64_t v523 = *((void *)this + 4);
            uint64_t v524 = *(unsigned int *)(v523 + 36);
            uint64_t v525 = *(unsigned int *)(v523 + 68);
            if ((v524 & 0x80000000) != 0
              && (v524 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v424 + 432))
            {
              uint64_t v526 = *(void *)(*(void *)(v424 + 424) + 8 * (v524 & 0x7FFFFFFF));
            }
            else
            {
              uint64_t v526 = 0;
            }
            *(void *)&long long v1819 = v526;
            sub_1CC73C5E8(v525, v424, (uint64_t)__s1);
            if (!(_BYTE)v1829) {
              goto LABEL_685;
            }
            if (LODWORD(__s1[1]) >= 0x41)
            {
              if (__s1[0]) {
                MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
              }
LABEL_685:
              if (v524 == v525) {
                goto LABEL_2367;
              }
            }
            else
            {
              uint64_t v1084 = (uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1]);
              if (v1084 == -1) {
                goto LABEL_2367;
              }
              if (!v1084)
              {
LABEL_3117:
                uint64_t v357 = *a1;
                LODWORD(__s1[0]) = v7;
                goto LABEL_1918;
              }
              if (v524 == v525) {
                goto LABEL_2367;
              }
              if ((v524 & 0x80000000) != 0) {
                v1085 = (uint64_t *)(*(void *)(v424 + 24) + 16 * (v524 & 0x7FFFFFFF) + 8);
              }
              else {
                v1085 = (uint64_t *)(*(void *)(v424 + 272) + 8 * v524);
              }
              uint64_t v1086 = *v1085;
              if (v1086)
              {
                if ((*(unsigned char *)(v1086 + 3) & 1) != 0
                  || (uint64_t v1086 = *(void *)(v1086 + 24)) != 0 && (*(unsigned char *)(v1086 + 3) & 1) != 0)
                {
                  uint64_t v1087 = *(void *)(v1086 + 8);
                  if (v1087)
                  {
                    if (**(_WORD **)(v1087 + 16) == 118 && *(_DWORD *)(v1087 + 40) == 2)
                    {
                      v1088 = (const char *)*(unsigned int *)(*(void *)(v1087 + 32) + 36);
                      unsigned int v1090 = sub_1CB8F1DC4((unint64_t *)&v1819);
                      if (v1089 == 1) {
                      LODWORD(v1840) = v1090;
                      }
                      if (v1090 > 0x40) {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v1839);
                      }
                      unint64_t v1091 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1090;
                      if (!v1090) {
                        unint64_t v1091 = 0;
                      }
                      unint64_t v1839 = v1091 & v1084;
                      if ((v1088 & 0x80000000) != 0
                        && (v1088 & 0x7FFFFFFF) < *(_DWORD *)(v424 + 432))
                      {
                        unint64_t v1092 = *(void *)(*(void *)(v424 + 424) + 8 * (v1088 & 0x7FFFFFFF));
                      }
                      else
                      {
                        unint64_t v1092 = 0;
                      }
                      unint64_t v1816 = v1092;
                      LODWORD(v1825) = v1840;
                      if (v1840 > 0x40) {
                        operator new[]();
                      }
                      if (v1840) {
                        unint64_t v1093 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1840;
                      }
                      else {
                        unint64_t v1093 = 0;
                      }
                      unint64_t v1839 = v1093 & ~v1839;
                      unsigned int v1095 = sub_1CB8F1DC4(&v1816);
                      if (v1094 == 1) {
                      if (v1095 > 0x40)
                      }
                      {
                        if (v1840 != v1095) {
                          operator new[]();
                        }
                        sub_1CD0463BC((uint64_t)__s1, (uint64_t)&v1839);
                      }
                      else
                      {
                        if (v1840 >= 0x41) {
                          v1096 = (unint64_t *)v1839;
                        }
                        else {
                          v1096 = &v1839;
                        }
                        unint64_t v1097 = *v1096;
                        LODWORD(__s1[1]) = v1095;
                        unint64_t v1098 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1095;
                        if (!v1095) {
                          unint64_t v1098 = 0;
                        }
                        __s1[0] = (void *)(v1098 & v1097);
                      }
                      if (v1840 >= 0x41 && v1839) {
                        MEMORY[0x1D25D9CB0](v1839, 0x1000C8000313F17);
                      }
                      unint64_t v1839 = (unint64_t)__s1[0];
                      LODWORD(v1840) = __s1[1];
                      sub_1CC6DEE8C(a1[3], v1088, (uint64_t)__s1);
                      if (v1840 > 0x40) {
                        BOOL isSubsetOfSlowCase = llvm::APInt::isSubsetOfSlowCase((uint64_t **)&v1839, (uint64_t **)__s1);
                      }
                      else {
                        BOOL isSubsetOfSlowCase = (v1839 & ~(uint64_t)__s1[0]) == 0;
                      }
                      if (DWORD2(v1829) >= 0x41 && (void)v1829) {
                        MEMORY[0x1D25D9CB0](v1829, 0x1000C8000313F17);
                      }
                      if (LODWORD(__s1[1]) >= 0x41 && __s1[0]) {
                        MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
                      }
                      if (isSubsetOfSlowCase)
                      {
                        uint64_t v1580 = *a1;
                        LODWORD(v1821) = v7;
                        DWORD2(v1821) = 1;
                        LODWORD(__s1[0]) = v1088;
                        LODWORD(v1829) = 0;
                        v1059 = *(void (**)(void))(*(void *)v1580 + 32);
                        goto LABEL_1515;
                      }
                      if (v1840 >= 0x41 && v1839) {
                        MEMORY[0x1D25D9CB0](v1839, 0x1000C8000313F17);
                      }
                    }
                  }
                }
              }
            }
            if ((v524 & 0x80000000) != 0) {
              int v527 = (uint64_t *)(*(void *)(v424 + 24) + 16 * (v524 & 0x7FFFFFFF) + 8);
            }
            else {
              int v527 = (uint64_t *)(*(void *)(v424 + 272) + 8 * v524);
            }
            uint64_t v528 = *v527;
            if (!v528) {
              goto LABEL_691;
            }
            if (*(unsigned char *)(v528 + 3)) {
              goto LABEL_690;
            }
            uint64_t v528 = *(void *)(v528 + 24);
            if (v528)
            {
              if (*(unsigned char *)(v528 + 3)) {
LABEL_690:
              }
                uint64_t v528 = *(void *)(v528 + 8);
              else {
                uint64_t v528 = 0;
              }
            }
LABEL_691:
            if ((v525 & 0x80000000) != 0) {
              unint64_t v529 = (uint64_t *)(*(void *)(v424 + 24) + 16 * (v525 & 0x7FFFFFFF) + 8);
            }
            else {
              unint64_t v529 = (uint64_t *)(*(void *)(v424 + 272) + 8 * v525);
            }
            uint64_t v530 = *v529;
            if ((*(unsigned char *)(v530 + 3) & 1) == 0) {
              uint64_t v530 = *(void *)(v530 + 24);
            }
            if (**(unsigned __int16 **)(v528 + 16) == **(unsigned __int16 **)(*(void *)(v530 + 8) + 16)
              && (sub_1CBAAFE34(a1, (uint64_t)this) & 1) != 0)
            {
              return 1;
            }
            if ((v7 & 0x80000000) == 0) {
              goto LABEL_3023;
            }
            unint64_t v438 = v7 & 0x7FFFFFFF;
            if ((v7 & 0x7FFFFFFF) >= *(_DWORD *)(v424 + 432)) {
              goto LABEL_3023;
            }
            goto LABEL_698;
          case 'B':
            uint64_t v804 = *a1;
            uint64_t v805 = *(void *)(*(void *)(*a1 + 8) + 40);
            uint64_t v806 = *((void *)this + 4);
            unint64_t v807 = (const char *)*(unsigned int *)(v806 + 36);
            int v808 = (const char *)*(unsigned int *)(v806 + 68);
            *(void *)(v804 + 40) = *((void *)this + 3);
            *(void *)(v804 + 48) = this;
            if ((v807 & 0x80000000) != 0) {
              uint64_t v809 = (uint64_t *)(*(void *)(v805 + 24) + 16 * (v807 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v809 = (uint64_t *)(*(void *)(v805 + 272) + 8 * (void)v807);
            }
            uint64_t v810 = *v809;
            uint64_t v1796 = v805;
            if (!v810) {
              goto LABEL_2677;
            }
            if (*(unsigned char *)(v810 + 3)) {
              goto LABEL_1163;
            }
            uint64_t v810 = *(void *)(v810 + 24);
            if (v810)
            {
              if (*(unsigned char *)(v810 + 3)) {
LABEL_1163:
              }
                size_t v811 = *(void *)(v810 + 8);
              else {
LABEL_2677:
              }
                size_t v811 = 0;
            }
            else
            {
              size_t v811 = 0;
            }
            if ((v808 & 0x80000000) != 0) {
              uint64_t v812 = (uint64_t *)(*(void *)(v805 + 24) + 16 * (v808 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v812 = (uint64_t *)(*(void *)(v805 + 272) + 8 * (void)v808);
            }
            uint64_t v813 = *v812;
            size_t v1773 = v811;
            if (v813
              && ((*(unsigned char *)(v813 + 3) & 1) != 0
               || (uint64_t v813 = *(void *)(v813 + 24)) != 0 && (*(unsigned char *)(v813 + 3) & 1) != 0))
            {
              size_t v1784 = *(void *)(v813 + 8);
            }
            else
            {
              size_t v1784 = 0;
            }
            if (sub_1CBAAFBA4((llvm::ConstantInt ******)a1, (uint64_t)this)) {
              return 1;
            }
            v814 = (_DWORD *)*((void *)this + 4);
            uint64_t v815 = v814[1];
            if ((v815 & 0x80000000) != 0)
            {
              uint64_t v817 = v1796;
              if ((v815 & 0x7FFFFFFF) >= *(_DWORD *)(v1796 + 432)) {
                uint64_t v816 = 0;
              }
              else {
                uint64_t v816 = *(void **)(*(void *)(v1796 + 424) + 8 * (v815 & 0x7FFFFFFF));
              }
            }
            else
            {
              uint64_t v816 = 0;
              uint64_t v817 = v1796;
            }
            *(void *)&long long v1821 = v816;
            if (sub_1CBAAF488(**((_WORD **)this + 2), v814, v817))
            {
              if ((v808 & 0x80000000) != 0) {
                int v818 = (uint64_t *)(*(void *)(v817 + 24) + 16 * (v808 & 0x7FFFFFFF) + 8);
              }
              else {
                int v818 = (uint64_t *)(*(void *)(v817 + 272) + 8 * (void)v808);
              }
              uint64_t v819 = *v818;
              int v1768 = v815;
              if (!v819) {
                goto LABEL_1179;
              }
              if ((*(unsigned char *)(v819 + 3) & 1) == 0)
              {
                uint64_t v819 = *(void *)(v819 + 24);
                if (!v819)
                {
                  int v821 = 0;
LABEL_2912:
                  uint64_t v817 = v1796;
                  goto LABEL_1180;
                }
                uint64_t v817 = v1796;
                if ((*(unsigned char *)(v819 + 3) & 1) == 0) {
                  goto LABEL_1179;
                }
              }
              uint64_t v820 = *(void *)(v819 + 8);
              if (v820 && **(_WORD **)(v820 + 16) == 128 && *(_DWORD *)(v820 + 40) == 3)
              {
                uint64_t v1346 = *(void *)(v820 + 32);
                int v821 = *(_DWORD *)(v1346 + 36);
                sub_1CC73C210(*(_DWORD *)(v1346 + 68), v817, (uint64_t)__s1);
                if ((_BYTE)v1829)
                {
                  char v1347 = (char)__s1[1];
                  if (LODWORD(__s1[1]) < 0x41)
                  {
LABEL_2043:
                    uint64_t v823 = (uint64_t)__s1[0] << -v1347 >> -v1347;
                    goto LABEL_1187;
                  }
                  if (__s1[0]) {
                    MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
                  }
                  goto LABEL_2912;
                }
              }
              else
              {
LABEL_1179:
                int v821 = 0;
              }
LABEL_1180:
              if ((v807 & 0x80000000) != 0) {
                v822 = (uint64_t *)(*(void *)(v817 + 24) + 16 * (v807 & 0x7FFFFFFF) + 8);
              }
              else {
                v822 = (uint64_t *)(*(void *)(v817 + 272) + 8 * (void)v807);
              }
              uint64_t v823 = *v822;
              if (!v823) {
                goto LABEL_1187;
              }
              if (*(unsigned char *)(v823 + 3)) {
                goto LABEL_1184;
              }
              uint64_t v823 = *(void *)(v823 + 24);
              if (!v823) {
                goto LABEL_2901;
              }
              uint64_t v817 = v1796;
              if (*(unsigned char *)(v823 + 3))
              {
LABEL_1184:
                uint64_t v823 = *(void *)(v823 + 8);
                if (!v823)
                {
LABEL_1187:
                  v1774 = (void *)v823;
                  uint64_t v825 = 16 * sub_1CB8F1DC4((unint64_t *)&v1821);
                  if (v824 == 1) {
                  int v1785 = v821;
                  }
                  uint64_t v826 = v825 & 0x7FFFFFFF0 | 1;
                  unsigned int v827 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v817, "", 0);
                  unint64_t v828 = v827 & 0x7FFFFFFF;
                  *(void *)(*(void *)(v817 + 24) + 16 * v828) = 4;
                  unint64_t v829 = *(unsigned int *)(v817 + 432);
                  if (v828 >= v829)
                  {
                    uint64_t v830 = v817;
                    unint64_t v831 = (void *)(v817 + 424);
                    uint64_t v832 = *(void *)(v830 + 440);
                    uint64_t v833 = v828 + 1 - v829;
                    if (v828 >= *(unsigned int *)(v830 + 436)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    int v834 = v829;
                    if (v833)
                    {
                      v835 = (void *)(*v831 + 8 * v829);
                      uint64_t v836 = ~v828 + v829;
                      do
                      {
                        *v835++ = v832;
                        BOOL v801 = __CFADD__(v836++, 1);
                      }
                      while (!v801);
                      int v834 = *(_DWORD *)(v1796 + 432);
                    }
                    uint64_t v817 = v1796;
                    *(_DWORD *)(v1796 + 432) = v834 + v833;
                  }
                  *(void *)(*(void *)(v817 + 424) + 8 * v828) = v826;
                  uint64_t v837 = *(void *)(v817 + 8);
                  if (v837) {
                    (*(void (**)(uint64_t, void))(*(void *)v837 + 24))(v837, v827);
                  }
                  uint64_t v838 = *a1;
                  LODWORD(v1839) = v827;
                  LODWORD(v1840) = 1;
                  LODWORD(__s1[0]) = v1785;
                  LODWORD(v1829) = 0;
                  DWORD2(v1829) = v1785;
                  LODWORD(v1831) = 0;
                  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v838 + 32))(v838, 76, &v1839, 1, __s1, 2, 0);
                  int v839 = (void *)*a1;
                  v840 = v1774;
                  LODWORD(v1839) = v1768;
                  LODWORD(v1840) = 1;
                  LODWORD(__s1[0]) = v827;
                  LODWORD(v1829) = 0;
                  goto LABEL_1200;
                }
                if (**(_WORD **)(v823 + 16) == 128 && *(_DWORD *)(v823 + 40) == 3)
                {
                  uint64_t v1351 = *(void *)(v823 + 32);
                  int v821 = *(_DWORD *)(v1351 + 36);
                  sub_1CC73C210(*(_DWORD *)(v1351 + 68), v817, (uint64_t)__s1);
                  if ((_BYTE)v1829)
                  {
                    char v1347 = (char)__s1[1];
                    if (LODWORD(__s1[1]) < 0x41) {
                      goto LABEL_2043;
                    }
                    if (__s1[0]) {
                      MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
                    }
                    uint64_t v823 = 0;
LABEL_2901:
                    uint64_t v817 = v1796;
                    goto LABEL_1187;
                  }
                }
              }
              uint64_t v823 = 0;
              goto LABEL_1187;
            }
            if (!sub_1CBAAF9D8(v807, v808, a1[3])) {
              goto LABEL_1440;
            }
            v1000 = (uint64_t *)((v815 & 0x80000000) != 0
                              ? *(void *)(v1796 + 24) + 16 * (v815 & 0x7FFFFFFF) + 8
                              : *(void *)(v1796 + 272) + 8 * v815);
            uint64_t v1001 = *v1000;
            if (!v1001) {
              goto LABEL_1440;
            }
            if ((*(unsigned char *)(v1001 + 3) & 1) == 0)
            {
              uint64_t v1001 = *(void *)(v1001 + 24);
              if (!v1001 || (*(unsigned char *)(v1001 + 3) & 1) == 0) {
                goto LABEL_1440;
              }
            }
            uint64_t v1002 = *(void *)(v1001 + 8);
            if (!v1002 || **(_WORD **)(v1002 + 16) != 66 || *(_DWORD *)(v1002 + 40) != 3) {
              goto LABEL_1440;
            }
            int v1003 = v815;
            uint64_t v1004 = *(void *)(v1002 + 32);
            unsigned int v1005 = *(_DWORD *)(v1004 + 36);
            sub_1CC73C210(*(_DWORD *)(v1004 + 68), v1796, (uint64_t)__s1);
            if (!(_BYTE)v1829) {
              goto LABEL_1438;
            }
            if (LODWORD(__s1[1]) >= 0x41)
            {
              if (__s1[0]) {
                MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
              }
LABEL_1438:
              sub_1CC73C210(*(_DWORD *)(*(void *)(v1002 + 32) + 36), v1796, (uint64_t)__s1);
              if (!(_BYTE)v1829) {
                goto LABEL_1439;
              }
              if (LODWORD(__s1[1]) >= 0x41)
              {
LABEL_2902:
                if (__s1[0]) {
                  MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
                }
LABEL_1439:
                LODWORD(v815) = v1003;
                goto LABEL_1440;
              }
              uint64_t v1309 = (uint64_t)__s1[0] << -LOBYTE(__s1[1]) >> -LOBYTE(__s1[1]);
              unsigned int v1005 = *(_DWORD *)(*(void *)(v1002 + 32) + 68);
            }
            else
            {
              uint64_t v1309 = (uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1]);
            }
            uint64_t v1763 = v1309;
            uint64_t v1310 = v1005;
            if ((v1005 & 0x80000000) != 0) {
              v1311 = (uint64_t *)(*(void *)(v1796 + 24) + 16 * (v1005 & 0x7FFFFFFF) + 8);
            }
            else {
              v1311 = (uint64_t *)(*(void *)(v1796 + 272) + 8 * v1005);
            }
            uint64_t v1312 = *v1311;
            LODWORD(v815) = v1003;
            if (!v1312) {
              goto LABEL_1440;
            }
            if ((*(unsigned char *)(v1312 + 3) & 1) == 0)
            {
              uint64_t v1312 = *(void *)(v1312 + 24);
              if (!v1312 || (*(unsigned char *)(v1312 + 3) & 1) == 0) {
                goto LABEL_1440;
              }
            }
            uint64_t v1313 = *(void *)(v1312 + 8);
            if (!v1313 || **(_WORD **)(v1313 + 16) != 45 || *(_DWORD *)(v1313 + 40) != 3) {
              goto LABEL_1440;
            }
            uint64_t v1314 = *(void *)(v1313 + 32);
            int v1315 = *(_DWORD *)(v1314 + 36);
            sub_1CC73C210(*(_DWORD *)(v1314 + 68), v1796, (uint64_t)__s1);
            if ((_BYTE)v1829)
            {
              if (LODWORD(__s1[1]) < 0x41)
              {
                uint64_t v1316 = (uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1]);
LABEL_2123:
                if ((v1310 & 0x80000000) != 0) {
                  v1395 = (uint64_t *)(*(void *)(v1796 + 24) + 16 * (v1310 & 0x7FFFFFFF) + 8);
                }
                else {
                  v1395 = (uint64_t *)(*(void *)(v1796 + 272) + 8 * v1310);
                }
                uint64_t v1396 = *v1395;
                if (v1396)
                {
                  while ((*(unsigned char *)(v1396 + 3) & 1) != 0)
                  {
                    uint64_t v1396 = *(void *)(v1396 + 24);
                    if (!v1396) {
                      goto LABEL_1440;
                    }
                  }
                  do
                  {
                    uint64_t v1396 = *(void *)(v1396 + 24);
                    if (!v1396)
                    {
                      uint64_t v1397 = *a1;
                      v1824 = v816;
                      LODWORD(v1825) = 0;
                      uint64_t v1398 = sub_1CC7362A8(v1397, (unint64_t *)&v1824, v1316 + v1763);
                      LODWORD(v1839) = v815;
                      LODWORD(v1840) = 1;
                      LODWORD(__s1[0]) = v1315;
                      LODWORD(v1829) = 0;
                      *((void *)&v1829 + 1) = v1398;
                      unint64_t v1830 = v1399;
                      LODWORD(v1831) = 1;
                      int v226 = *(void (**)(void))(*(void *)v1397 + 32);
                      goto LABEL_886;
                    }
                  }
                  while ((*(unsigned char *)(v1396 + 3) & 1) != 0);
                }
LABEL_1440:
                if (**(unsigned __int16 **)(v1773 + 16) == **(unsigned __int16 **)(v1784 + 16)
                  && (sub_1CBAAFE34(a1, (uint64_t)this) & 1) != 0)
                {
                  return 1;
                }
                if (v816 != (void *)257 && v816 != (void *)513) {
                  goto LABEL_840;
                }
                unint64_t v1007 = sub_1CB8F1DC4((unint64_t *)&v1821);
                if (v1006 == 1) {
                uint64_t v1008 = 0;
                }
                *(void *)&long long v1819 = (8 * (v1007 >> 1)) | 1;
                do
                {
                  v1009 = &__s1[v1008];
                  *((_DWORD *)v1009 + 2) = 1;
                  *v1009 = 0;
                  *((_DWORD *)v1009 + 6) = 1;
                  v1009[2] = 0;
                  v1008 += 4;
                }
                while (v1008 != 8);
                sub_1CC6DEE8C(a1[3], v807, (uint64_t)&v1839);
                if (LODWORD(__s1[1]) >= 0x41 && __s1[0]) {
                  MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
                }
                unint64_t v1010 = v1839;
                __s1[0] = (void *)v1839;
                unsigned int v1011 = v1840;
                LODWORD(__s1[1]) = v1840;
                LODWORD(v1840) = 0;
                if (DWORD2(v1829) >= 0x41 && (void)v1829)
                {
                  MEMORY[0x1D25D9CB0](v1829, 0x1000C8000313F17);
                  *(void *)&long long v1829 = *((void *)&v1840 + 1);
                  DWORD2(v1829) = v1841;
                  LODWORD(v1841) = 0;
                  if (v1840 >= 0x41 && v1839) {
                    MEMORY[0x1D25D9CB0](v1839, 0x1000C8000313F17);
                  }
                }
                else
                {
                  *(void *)&long long v1829 = *((void *)&v1840 + 1);
                  DWORD2(v1829) = v1841;
                }
                sub_1CC6DEE8C(a1[3], v808, (uint64_t)&v1839);
                if (v1831 >= 0x41 && v1830) {
                  MEMORY[0x1D25D9CB0](v1830, 0x1000C8000313F17);
                }
                v1759 = (uint64_t *)v1839;
                unint64_t v1830 = v1839;
                unsigned int v1762 = v1840;
                LODWORD(v1831) = v1840;
                LODWORD(v1840) = 0;
                if (v1833 >= 0x41 && v1832)
                {
                  MEMORY[0x1D25D9CB0](v1832, 0x1000C8000313F17);
                  uint64_t v1832 = *((void *)&v1840 + 1);
                  LODWORD(v1833) = v1841;
                  LODWORD(v1841) = 0;
                  if (v1840 >= 0x41 && v1839) {
                    MEMORY[0x1D25D9CB0](v1839, 0x1000C8000313F17);
                  }
                }
                else
                {
                  uint64_t v1832 = *((void *)&v1840 + 1);
                  LODWORD(v1833) = v1841;
                }
                sub_1CC73C210(v808, v1796, (uint64_t)&v1839);
                if (BYTE8(v1840))
                {
                  if (v1840 >= 0x41)
                  {
                    if (v1839) {
                      MEMORY[0x1D25D9CB0](v1839, 0x1000C8000313F17);
                    }
                  }
                  else
                  {
                    char v1757 = v1840;
                    unint64_t v1756 = v1839;
                    int v1281 = sub_1CB8F1DC4((unint64_t *)&v1819);
                    if (v1280 == 1) {
                    LODWORD(v1840) = v1011;
                    }
                    if (v1011 >= 0x41) {
                      operator new[]();
                    }
                    char v1282 = v1281;
                    if (v1011 == v1281) {
                      char v1282 = 63;
                    }
                    uint64_t v1283 = (uint64_t)(v1010 << -(char)v1011) >> -(char)v1011 >> v1282;
                    if (v1011) {
                      unint64_t v1284 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1011;
                    }
                    else {
                      unint64_t v1284 = 0;
                    }
                    unint64_t v1839 = v1284 & v1283;
                    if (!v1011 || v1839 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v1011)
                    {
                      int v1400 = v815;
                      uint64_t v1401 = (uint64_t)(v1756 << -v1757) >> -v1757;
                      char v1403 = sub_1CB8F1DC4((unint64_t *)&v1819);
                      if (v1402 == 1) {
                      uint64_t v1404 = v1401 >> v1403;
                      }
                      char v1406 = sub_1CB8F1DC4((unint64_t *)&v1819);
                      if (v1405 == 1) {
                      uint64_t v815 = v1404 << v1406;
                      }
                      if (v1840 >= 0x41 && v1839) {
                        MEMORY[0x1D25D9CB0](v1839, 0x1000C8000313F17);
                      }
                      BOOL v5 = v815 == v1401;
                      LODWORD(v815) = v1400;
                      if (v5)
                      {
                        uint64_t v1407 = *a1;
                        v1824 = (void *)v1819;
                        LODWORD(v1825) = 0;
                        LODWORD(v1839) = v807;
                        DWORD2(v1840) = 0;
                        char v1324 = 1;
                        v1408 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, void))(*(void *)v1407 + 32))(v1407, 119, &v1824, 1, &v1839, 1, 0);
                        uint64_t v1410 = v1409;
                        uint64_t v1411 = *a1;
                        unint64_t v1839 = v1819;
                        LODWORD(v1840) = 0;
                        char v1413 = sub_1CB8F1DC4((unint64_t *)&v1819);
                        if (v1412 == 1) {
                        uint64_t v1414 = sub_1CC7362A8(v1411, &v1839, v1401 >> v1413);
                        }
                        uint64_t v1415 = *a1;
                        LODWORD(v1824) = v1400;
                        LODWORD(v1825) = 1;
                        unint64_t v1839 = (unint64_t)v1408;
                        *(void *)&long long v1840 = v1410;
                        DWORD2(v1840) = 1;
                        uint64_t v1841 = v1414;
                        uint64_t v1842 = v1416;
                        int v1843 = 1;
                        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, void))(*(void *)v1415 + 32))(v1415, 76, &v1824, 1, &v1839, 2, 0);
                        llvm::MachineInstr::eraseFromParent(this);
LABEL_2006:
                        for (uint64_t k = 0; k != -8; k -= 4)
                        {
                          v1326 = &__s1[k];
                          if (*(_DWORD *)&v1834[k * 8 - 8] >= 0x41u)
                          {
                            uint64_t v1602 = *(uint64_t *)((char *)&v1832 + k * 8);
                            if (v1602) {
                              MEMORY[0x1D25D9CB0](v1602, 0x1000C8000313F17);
                            }
                          }
                          if (*((_DWORD *)v1326 + 10) >= 0x41u)
                          {
                            v1603 = v1326[4];
                            if (v1603) {
                              MEMORY[0x1D25D9CB0](v1603, 0x1000C8000313F17);
                            }
                          }
                        }
                        if (v1324) {
                          return 1;
                        }
                        goto LABEL_840;
                      }
                    }
                  }
                }
                int v1013 = sub_1CB8F1DC4((unint64_t *)&v1819);
                if (v1012 == 1) {
                LODWORD(v1825) = v1011;
                }
                unsigned int v1014 = v1011;
                if (v1011 >= 0x41) {
                  operator new[]();
                }
                char v1015 = v1013;
                if (v1011 == v1013) {
                  char v1015 = 63;
                }
                uint64_t v1016 = (uint64_t)(v1010 << -(char)v1011) >> -(char)v1011 >> v1015;
                if (v1011) {
                  unint64_t v1017 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1011;
                }
                else {
                  unint64_t v1017 = 0;
                }
                uint64_t v1018 = v1796;
                v1824 = (void *)(v1017 & v1016);
                if (v1011 && v1824 != (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v1011)) {
                  goto LABEL_1988;
                }
                if (**(_WORD **)(v1784 + 16) == 127)
                {
                  sub_1CC73C210(*(_DWORD *)(*(void *)(v1784 + 32) + 68), v1796, (uint64_t)&v1839);
                  if (BYTE8(v1840))
                  {
                    int v1418 = v815;
                    if (v1840 < 0x41)
                    {
                      uint64_t v1419 = -(uint64_t)v1840;
                      uint64_t v1420 = v1839 << -(char)v1840;
                      uint64_t v1422 = sub_1CB8F1DC4((unint64_t *)&v1819);
                      if (v1421 == 1) {
                      uint64_t v815 = v1420 >> v1419;
                      }
                      if (v1825 >= 0x41 && v1824) {
                        MEMORY[0x1D25D9CB0](v1824, 0x1000C8000313F17);
                      }
                      BOOL v5 = v815 == v1422;
                      LODWORD(v815) = v1418;
                      uint64_t v1018 = v1796;
                      if (v5)
                      {
                        size_t v1317 = v1784;
                        LODWORD(v808) = v807;
LABEL_1989:
                        int v1319 = sub_1CB8F1DC4((unint64_t *)&v1819);
                        if (v1318 == 1) {
                        LODWORD(v1825) = v1011;
                        }
                        int v1320 = v815;
                        if (v1011 >= 0x41) {
                          operator new[]();
                        }
                        char v1321 = v1319;
                        if (v1011 == v1319) {
                          char v1321 = 63;
                        }
                        uint64_t v1322 = (uint64_t)(v1010 << -(char)v1011) >> -(char)v1011 >> v1321;
                        if (v1011) {
                          unint64_t v1323 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1011;
                        }
                        else {
                          unint64_t v1323 = 0;
                        }
                        v1824 = (void *)(v1323 & v1322);
                        if (!v1011 || v1824 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v1011))
                        {
                          if (**(_WORD **)(v1317 + 16) == 127)
                          {
                            sub_1CC73C210(*(_DWORD *)(*(void *)(v1317 + 32) + 68), v1018, (uint64_t)&v1839);
                            if (BYTE8(v1840))
                            {
                              if (v1840 < 0x41)
                              {
                                uint64_t v1423 = -(uint64_t)v1840;
                                uint64_t v1424 = v1839 << -(char)v1840;
                                uint64_t v1426 = sub_1CB8F1DC4((unint64_t *)&v1819);
                                if (v1425 == 1) {
                                uint64_t v1427 = v1424 >> v1423;
                                }
                                if (v1825 >= 0x41 && v1824) {
                                  MEMORY[0x1D25D9CB0](v1824, 0x1000C8000313F17);
                                }
                                if (v1427 == v1426)
                                {
                                  uint64_t v1428 = *a1;
                                  v1824 = (void *)v1819;
                                  LODWORD(v1825) = 0;
                                  LODWORD(v1839) = v808;
                                  DWORD2(v1840) = 0;
                                  char v1324 = 1;
                                  v1429 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, void))(*(void *)v1428 + 32))(v1428, 119, &v1824, 1, &v1839, 1, 0);
                                  uint64_t v1431 = v1430;
                                  uint64_t v1432 = *a1;
                                  v1824 = (void *)v1819;
                                  LODWORD(v1825) = 0;
                                  LODWORD(v1839) = *(_DWORD *)(*(void *)(v1317 + 32) + 36);
                                  DWORD2(v1840) = 0;
                                  uint64_t v1433 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, void))(*(void *)v1432 + 32))(v1432, 119, &v1824, 1, &v1839, 1, 0);
                                  uint64_t v1434 = *a1;
                                  LODWORD(v1824) = v1320;
                                  LODWORD(v1825) = 1;
                                  unint64_t v1839 = (unint64_t)v1429;
                                  *(void *)&long long v1840 = v1431;
                                  DWORD2(v1840) = 1;
                                  uint64_t v1841 = v1433;
                                  uint64_t v1842 = v1435;
                                  int v1843 = 1;
                                  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, void))(*(void *)v1434 + 32))(v1434, 76, &v1824, 1, &v1839, 2, 0);
                                  llvm::MachineInstr::eraseFromParent(this);
                                  goto LABEL_2006;
                                }
                                goto LABEL_2005;
                              }
                              if (v1839) {
                                MEMORY[0x1D25D9CB0](v1839, 0x1000C8000313F17);
                              }
                            }
                            unsigned int v1011 = v1825;
                          }
                          if (v1011 >= 0x41 && v1824) {
                            MEMORY[0x1D25D9CB0](v1824, 0x1000C8000313F17);
                          }
                        }
LABEL_2005:
                        char v1324 = 0;
                        goto LABEL_2006;
                      }
LABEL_1988:
                      __s1[0] = v1759;
                      unint64_t v1830 = v1010;
                      LODWORD(v1831) = v1011;
                      unint64_t v1010 = (unint64_t)v1759;
                      unsigned int v1011 = v1762;
                      LODWORD(__s1[1]) = v1762;
                      size_t v1317 = v1773;
                      goto LABEL_1989;
                    }
                    if (v1839) {
                      MEMORY[0x1D25D9CB0](v1839, 0x1000C8000313F17);
                    }
                    uint64_t v1018 = v1796;
                  }
                  unsigned int v1014 = v1825;
                }
                if (v1014 >= 0x41 && v1824) {
                  MEMORY[0x1D25D9CB0](v1824, 0x1000C8000313F17);
                }
                goto LABEL_1988;
              }
              if (__s1[0]) {
                MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
              }
              LODWORD(v815) = v1003;
            }
            sub_1CC73C210(*(_DWORD *)(*(void *)(v1313 + 32) + 36), v1796, (uint64_t)__s1);
            if (!(_BYTE)v1829) {
              goto LABEL_1440;
            }
            if (LODWORD(__s1[1]) < 0x41)
            {
              uint64_t v1316 = (uint64_t)__s1[0] << -LOBYTE(__s1[1]) >> -LOBYTE(__s1[1]);
              int v1315 = *(_DWORD *)(*(void *)(v1313 + 32) + 68);
              goto LABEL_2123;
            }
            goto LABEL_2902;
          case 'C':
            uint64_t v968 = *a1;
            uint64_t v969 = *(void *)(*(void *)(*a1 + 8) + 40);
            v970 = (_DWORD *)*((void *)this + 4);
            LODWORD(v7) = v970[1];
            if ((v7 & 0x80000000) != 0 && (v7 & 0x7FFFFFFF) < *(_DWORD *)(v969 + 432)) {
              uint64_t v971 = *(void *)(*(void *)(v969 + 424) + 8 * (v7 & 0x7FFFFFFF));
            }
            else {
              uint64_t v971 = 0;
            }
            *(void *)&long long v1821 = v971;
            uint64_t v524 = v970[9];
            uint64_t v972 = v970[17];
            if ((v524 & 0x80000000) != 0) {
              v973 = (uint64_t *)(*(void *)(v969 + 24) + 16 * (v524 & 0x7FFFFFFF) + 8);
            }
            else {
              v973 = (uint64_t *)(*(void *)(v969 + 272) + 8 * v524);
            }
            uint64_t v974 = *v973;
            if (v974
              && ((*(unsigned char *)(v974 + 3) & 1) != 0
               || (uint64_t v974 = *(void *)(v974 + 24)) != 0 && (*(unsigned char *)(v974 + 3) & 1) != 0))
            {
              uint64_t v975 = *(void *)(v974 + 8);
            }
            else
            {
              uint64_t v975 = 0;
            }
            if ((v972 & 0x80000000) != 0) {
              v976 = (uint64_t *)(*(void *)(v969 + 24) + 16 * (v972 & 0x7FFFFFFF) + 8);
            }
            else {
              v976 = (uint64_t *)(*(void *)(v969 + 272) + 8 * v972);
            }
            uint64_t v977 = *v976;
            if ((*(unsigned char *)(v977 + 3) & 1) == 0) {
              uint64_t v977 = *(void *)(v977 + 24);
            }
            uint64_t v978 = *(void *)(v977 + 8);
            *(void *)(v968 + 40) = *((void *)this + 3);
            *(void *)(v968 + 48) = this;
            int v979 = **(unsigned __int16 **)(v975 + 16);
            int v980 = **(unsigned __int16 **)(v978 + 16);
            if (v979 == 68 && v980 == 68) {
              goto LABEL_3117;
            }
            if (v979 == 68 || v980 == 68)
            {
              if (v979 == 68) {
                int v65 = v524;
              }
              else {
                int v65 = v972;
              }
              goto LABEL_1777;
            }
            sub_1CC73C5E8(v972, v969, (uint64_t)__s1);
            if (!(_BYTE)v1829) {
              goto LABEL_1391;
            }
            if (LODWORD(__s1[1]) >= 0x41)
            {
              if (__s1[0]) {
                MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
              }
            }
            else
            {
              uint64_t v1289 = (uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1]);
              if (!v1289)
              {
LABEL_2367:
                uint64_t v64 = *a1;
                LODWORD(v1839) = v7;
                LODWORD(v1840) = 1;
                LODWORD(__s1[0]) = v524;
                goto LABEL_885;
              }
              unsigned int v1291 = sub_1CB8F1DC4((unint64_t *)&v1821);
              if (v1290 == 1) {
              LODWORD(v1840) = v1291;
              }
              if (v1291 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v1839);
              }
              unint64_t v1292 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1291;
              if (!v1291) {
                unint64_t v1292 = 0;
              }
              unint64_t v1839 = v1292 & v1289;
              if ((v1292 & v1289) == 1 && sub_1CBAAF2D4(v975, v969))
              {
                v1570 = *(int **)(v975 + 32);
                int v1571 = dword_1CDB159B0[v1570[12]];
                uint64_t v1572 = *a1;
                if ((**(_WORD **)(v975 + 16) & 0xFFFE) == 0x86)
                {
                  LODWORD(v1824) = v7;
                  LODWORD(v1825) = 1;
                  LODWORD(__s1[0]) = v1571;
                  LODWORD(v1829) = 2;
                  DWORD2(v1829) = v1570[17];
                  LODWORD(v1831) = 0;
                  LODWORD(v1832) = v1570[25];
                  *(_DWORD *)v1834 = 0;
                }
                else
                {
                  LODWORD(v1824) = v7;
                  LODWORD(v1825) = 1;
                  LODWORD(__s1[0]) = v1571;
                  LODWORD(v1829) = 2;
                  DWORD2(v1829) = v1570[17];
                  LODWORD(v1831) = 0;
                  LODWORD(v1832) = v1570[25];
                  *(_DWORD *)v1834 = 0;
                  *(_DWORD *)&v1834[8] = v1570[33];
                  *(_DWORD *)v1835 = 0;
                  *(_DWORD *)&v1835[8] = v1570[41];
                  *(_DWORD *)&v1835[24] = 0;
                }
                (*(void (**)(void))(*(void *)v1572 + 32))();
                llvm::MachineInstr::eraseFromParent(this);
                return 1;
              }
            }
LABEL_1391:
            if ((v524 & 0x80000000) != 0) {
              v981 = (uint64_t *)(*(void *)(v969 + 24) + 16 * (v524 & 0x7FFFFFFF) + 8);
            }
            else {
              v981 = (uint64_t *)(*(void *)(v969 + 272) + 8 * v524);
            }
            uint64_t v982 = *v981;
            if (!v982) {
              goto LABEL_840;
            }
            while ((*(unsigned char *)(v982 + 3) & 1) != 0)
            {
              uint64_t v982 = *(void *)(v982 + 24);
              if (!v982) {
                goto LABEL_840;
              }
            }
            while (1)
            {
              uint64_t v982 = *(void *)(v982 + 24);
              if (!v982) {
                break;
              }
              if ((*(unsigned char *)(v982 + 3) & 1) == 0) {
                goto LABEL_840;
              }
            }
            v1159 = (uint64_t *)((v524 & 0x80000000) != 0
                              ? *(void *)(v969 + 24) + 16 * (v524 & 0x7FFFFFFF) + 8
                              : *(void *)(v969 + 272) + 8 * v524);
            uint64_t v1160 = *v1159;
            if (!v1160) {
              goto LABEL_840;
            }
            if ((*(unsigned char *)(v1160 + 3) & 1) == 0)
            {
              uint64_t v1160 = *(void *)(v1160 + 24);
              if (!v1160 || (*(unsigned char *)(v1160 + 3) & 1) == 0) {
                goto LABEL_840;
              }
            }
            uint64_t v1161 = *(void *)(v1160 + 8);
            if (!v1161) {
              goto LABEL_840;
            }
            if (**(_WORD **)(v1161 + 16) != 65) {
              goto LABEL_840;
            }
            if (*(_DWORD *)(v1161 + 40) != 3) {
              goto LABEL_840;
            }
            uint64_t v1162 = *(void *)(v1161 + 32);
            if (*(_DWORD *)(v1162 + 68) != v972) {
              goto LABEL_840;
            }
            int v1163 = *(_DWORD *)(v1162 + 36);
            v1164 = (llvm::ConstantInt *****)*a1;
            __s1[0] = (void *)v1821;
            LODWORD(__s1[1]) = 0;
            unsigned int v1166 = sub_1CB8F1DC4((unint64_t *)&v1821);
            if (v1165 == 1) {
            sub_1CB8F1EEC((uint64_t)&v1839, v1166, -1);
            }
            uint64_t v1167 = sub_1CC737454(v1164, (uint64_t)__s1, (llvm::LLVMContext *)&v1839);
            unint64_t v1169 = v1168;
            if (v1840 >= 0x41 && v1839) {
              MEMORY[0x1D25D9CB0](v1839, 0x1000C8000313F17);
            }
            uint64_t v1170 = *a1;
            unint64_t v1839 = v1821;
            LODWORD(v1840) = 0;
            LODWORD(__s1[0]) = v1163;
            LODWORD(v1829) = 0;
            *((void *)&v1829 + 1) = v1167;
            unint64_t v1830 = v1169;
            LODWORD(v1831) = 1;
            v1171 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v1170 + 32))(v1170, 67, &v1839, 1, __s1, 2, 0);
            uint64_t v1172 = *a1;
            LODWORD(v1839) = v7;
            LODWORD(v1840) = 1;
            __s1[0] = v1171;
            __s1[1] = v1173;
            LODWORD(v1829) = 1;
            DWORD2(v1829) = v972;
            LODWORD(v1831) = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v1172 + 32))(v1172, 65, &v1839, 1, __s1, 2, 0);
            goto LABEL_887;
          case 'E':
            uint64_t v78 = *(void *)(*a1 + 24);
            uint64_t v79 = *(unsigned int *)(*((void *)this + 4) + 4);
            if ((v79 & 0x80000000) != 0) {
              uint64_t v80 = (uint64_t *)(*(void *)(v78 + 24) + 16 * (v79 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v80 = (uint64_t *)(*(void *)(v78 + 272) + 8 * v79);
            }
            uint64_t v81 = *v80;
            if (!v81) {
              goto LABEL_887;
            }
            while ((*(unsigned char *)(v81 + 3) & 1) != 0)
            {
              uint64_t v81 = *(void *)(v81 + 24);
              if (!v81) {
                goto LABEL_887;
              }
            }
            goto LABEL_840;
          case 'J':
            uint64_t v664 = *a1;
            *(void *)(v664 + 40) = *((void *)this + 3);
            *(void *)(v664 + 48) = this;
            uint64_t v665 = *(void *)(*(void *)(*a1 + 8) + 40);
            uint64_t v666 = (*((_DWORD *)this + 10) - 1);
            uint64_t v667 = *((void *)this + 4);
            uint64_t v668 = *(unsigned int *)(v667 + 32 * v666 + 4);
            int v669 = *(_DWORD *)(v667 + 4);
            if (v669 < 0 && (uint64_t v670 = v669 & 0x7FFFFFFF, v670 < *(_DWORD *)(v665 + 432))) {
              v671 = *(void **)(*(void *)(v665 + 424) + 8 * v670);
            }
            else {
              v671 = 0;
            }
            v1824 = v671;
            if ((v668 & 0x80000000) != 0) {
              unsigned int v672 = (uint64_t *)(*(void *)(v665 + 24) + 16 * (v668 & 0x7FFFFFFF) + 8);
            }
            else {
              unsigned int v672 = (uint64_t *)(*(void *)(v665 + 272) + 8 * v668);
            }
            uint64_t v673 = *v672;
            if ((*(unsigned char *)(v673 + 3) & 1) == 0) {
              uint64_t v673 = *(void *)(v673 + 24);
            }
            uint64_t v674 = *(void *)(v673 + 8);
            LODWORD(v673) = **(unsigned __int16 **)(v674 + 16);
            if (v673 == 82)
            {
              uint64_t v668 = *(unsigned int *)(*(void *)(v674 + 32) + 36);
              if ((v668 & 0x80000000) != 0) {
                v1079 = (uint64_t *)(*(void *)(v665 + 24) + 16 * (v668 & 0x7FFFFFFF) + 8);
              }
              else {
                v1079 = (uint64_t *)(*(void *)(v665 + 272) + 8 * v668);
              }
              uint64_t v673 = *v1079;
              if ((*(unsigned char *)(v673 + 3) & 1) == 0) {
                uint64_t v673 = *(void *)(v673 + 24);
              }
              uint64_t v674 = *(void *)(v673 + 8);
              LOWORD(v673) = **(_WORD **)(v674 + 16);
            }
            if ((v673 & 0xFFFE) == 0x4C)
            {
              int v1359 = *(_DWORD *)(*(void *)(v674 + 32) + 36);
              if (v1359 < 0 && (uint64_t v1360 = v1359 & 0x7FFFFFFF, v1360 < *(_DWORD *)(v665 + 432))) {
                v1361 = *(void **)(*(void *)(v665 + 424) + 8 * v1360);
              }
              else {
                v1361 = 0;
              }
              if (v1361 == v671)
              {
                if (!v666) {
                  goto LABEL_887;
                }
                uint64_t v1362 = 0;
                while (1)
                {
                  unsigned int v1363 = *(_DWORD *)(*((void *)this + 4) + 32 * v1362 + 4);
                  uint64_t v1364 = v1362 + 1;
                  if (*(void *)(*(void *)(v665 + 24) + 16 * (v1363 & 0x7FFFFFFF)) >= 8uLL
                    && (*(void *)(*(void *)(v665 + 24) + 16 * (v1363 & 0x7FFFFFFF)) & 4) == 0)
                  {
                    uint64_t v1663 = *a1;
                    LODWORD(v1839) = *(_DWORD *)(*((void *)this + 4) + 32 * v1362 + 4);
                    LODWORD(v1840) = 1;
                    LODWORD(__s1[0]) = *(_DWORD *)(*(void *)(v674 + 32) + 32 * v1364 + 4);
                    LODWORD(v1829) = 0;
                    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v1663 + 32))(v1663, 19, &v1839, 1, __s1, 1, 0);
                    goto LABEL_2094;
                  }
                  sub_1CC6EE548(a1[2], v665, v1363);
                  uint64_t v1366 = *(unsigned int *)(*((void *)this + 4) + 32 * v1362 + 4);
                  unsigned int v1367 = *(_DWORD *)(*(void *)(v674 + 32) + 32 * v1364 + 4);
                  uint64_t v1368 = (*(uint64_t (**)(void))(**(void **)(*(void *)v665 + 16) + 176))(*(void *)(*(void *)v665 + 16));
                  if ((v1366 & 0x80000000) != 0) {
                    v1369 = (uint64_t *)(*(void *)(v665 + 24) + 16 * (v1366 & 0x7FFFFFFF) + 8);
                  }
                  else {
                    v1369 = (uint64_t *)(*(void *)(v665 + 272) + 8 * v1366);
                  }
                  uint64_t v1370 = *v1369;
                  if (*v1369)
                  {
                    do
                    {
                      uint64_t v1371 = *(void *)(v1370 + 24);
                      if (v1367 - 1 <= 0x3FFFFFFE) {
                        llvm::MachineOperand::substPhysReg((unsigned int *)v1370, v1367, v1368);
                      }
                      else {
                        llvm::MachineOperand::setReg(v1370, v1367);
                      }
                      uint64_t v1370 = v1371;
                    }
                    while (v1371);
                  }
                  uint64_t v1372 = a1[2];
                  v1373 = *(char **)(v1372 + 8);
                  v1374 = *(char **)(v1372 + 16);
                  uint64_t v1375 = 24;
                  if (v1374 == v1373) {
                    uint64_t v1375 = 28;
                  }
                  uint64_t v1376 = *(unsigned int *)(v1372 + v1375);
                  v1377 = *(unint64_t **)(v1372 + 16);
                  if (v1376)
                  {
                    uint64_t v1378 = 0;
                    while (*(void *)&v1374[v1378] >= 0xFFFFFFFFFFFFFFFELL)
                    {
                      v1378 += 8;
                      if (8 * v1376 == v1378) {
                        goto LABEL_2092;
                      }
                    }
                    v1377 = (unint64_t *)&v1374[v1378];
                  }
                  v1379 = (unint64_t *)&v1374[8 * v1376];
                  if (v1377 != v1379)
                  {
                    unint64_t v1380 = *v1377;
LABEL_2087:
                    (*(void (**)(uint64_t, unint64_t))(*(void *)v1372 + 40))(v1372, v1380);
                    v1381 = v1377 + 1;
                    while (v1381 != v1379)
                    {
                      unint64_t v1382 = *v1381++;
                      unint64_t v1380 = v1382;
                      if (v1382 <= 0xFFFFFFFFFFFFFFFDLL)
                      {
                        v1377 = v1381 - 1;
                        goto LABEL_2087;
                      }
                    }
                    v1373 = *(char **)(v1372 + 8);
                    v1374 = *(char **)(v1372 + 16);
                  }
LABEL_2092:
                  if (v1374 != v1373)
                  {
                    uint64_t v1383 = *(unsigned int *)(v1372 + 24);
                    if (v1383 >= 0x21
                      && 4 * (*(_DWORD *)(v1372 + 28) - *(_DWORD *)(v1372 + 32)) < v1383)
                    {
                      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(v1372 + 8));
                      goto LABEL_2094;
                    }
                    memset(v1374, 255, 8 * v1383);
                  }
                  *(_DWORD *)(v1372 + 28) = 0;
                  *(_DWORD *)(v1372 + 32) = 0;
LABEL_2094:
                  uint64_t v1362 = v1364;
                  if (v1364 == v666) {
                    goto LABEL_887;
                  }
                }
              }
            }
            sub_1CC73C210(v668, v665, (uint64_t)__s1);
            if ((_BYTE)v1829)
            {
              char v956 = (char)__s1[1];
              if (LODWORD(__s1[1]) < 0x41)
              {
                v957 = __s1[0];
                char v959 = sub_1CB8F1DC4((unint64_t *)&v1824);
                if (v958 == 1) {
                int v961 = sub_1CB8F1DC4((unint64_t *)&v1824);
                }
                if (v960 == 1) {
                if (*((_DWORD *)this + 10) != 1)
                }
                {
                  int v962 = 0;
                  unint64_t v963 = 0;
                  uint64_t v964 = (uint64_t)((void)v957 << -v956) >> -v956;
                  uint64_t v965 = ~(-1 << v959);
                  uint64_t v966 = 4;
                  do
                  {
                    uint64_t v967 = *a1;
                    LODWORD(__s1[0]) = *(_DWORD *)(*((void *)this + 4) + v966);
                    LODWORD(__s1[1]) = 1;
                    sub_1CC7362A8(v967, (unint64_t *)__s1, (v965 & (unint64_t)v964) >> v962);
                    v965 <<= v961;
                    ++v963;
                    v962 += v961;
                    v966 += 32;
                  }
                  while (v963 < (*((_DWORD *)this + 10) - 1));
                }
                goto LABEL_887;
              }
              if (__s1[0]) {
                MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
              }
            }
            if (*((_DWORD *)this + 10) != 3) {
              goto LABEL_840;
            }
            v675 = (unsigned int *)*((void *)this + 4);
            uint64_t v676 = v675[1];
            if ((v676 & 0x80000000) != 0) {
              v677 = (uint64_t *)(*(void *)(v665 + 24) + 16 * (v676 & 0x7FFFFFFF) + 8);
            }
            else {
              v677 = (uint64_t *)(*(void *)(v665 + 272) + 8 * v676);
            }
            uint64_t v678 = *v677;
            if (!v678) {
              goto LABEL_929;
            }
            while ((*(unsigned char *)(v678 + 3) & 1) != 0)
            {
              uint64_t v678 = *(void *)(v678 + 24);
              if (!v678) {
                goto LABEL_929;
              }
            }
            uint64_t v944 = v675[9];
            if ((v944 & 0x80000000) != 0) {
              v945 = (uint64_t *)(*(void *)(v665 + 24) + 16 * (v944 & 0x7FFFFFFF) + 8);
            }
            else {
              v945 = (uint64_t *)(*(void *)(v665 + 272) + 8 * v944);
            }
            uint64_t v946 = *v945;
            if (v946)
            {
              while ((*(unsigned char *)(v946 + 3) & 1) != 0)
              {
                uint64_t v946 = *(void *)(v946 + 24);
                if (!v946) {
                  goto LABEL_1356;
                }
              }
LABEL_929:
              if ((v668 & 0x80000000) != 0) {
                BOOL v679 = (uint64_t *)(*(void *)(v665 + 24) + 16 * (v668 & 0x7FFFFFFF) + 8);
              }
              else {
                BOOL v679 = (uint64_t *)(*(void *)(v665 + 272) + 8 * v668);
              }
              uint64_t v680 = *v679;
              if (!v680) {
                goto LABEL_840;
              }
              if ((*(unsigned char *)(v680 + 3) & 1) == 0)
              {
                uint64_t v680 = *(void *)(v680 + 24);
                if (!v680 || (*(unsigned char *)(v680 + 3) & 1) == 0) {
                  goto LABEL_840;
                }
              }
              uint64_t v681 = *(void *)(v680 + 8);
              if (!v681 || **(_WORD **)(v681 + 16) != 126 || *(_DWORD *)(v681 + 40) != 2) {
                goto LABEL_840;
              }
              int v682 = *(_DWORD *)(*(void *)(v681 + 32) + 36);
              if ((v676 & 0x80000000) != 0 && (v676 & 0x7FFFFFFF) < *(_DWORD *)(v665 + 432)) {
                uint64_t v683 = *(uint64_t **)(*(void *)(v665 + 424) + 8 * (v676 & 0x7FFFFFFF));
              }
              else {
                uint64_t v683 = 0;
              }
              if (v682 < 0 && (v682 & 0x7FFFFFFFu) < *(_DWORD *)(v665 + 432)) {
                v684 = *(uint64_t **)(*(void *)(v665 + 424) + 8 * (v682 & 0x7FFFFFFF));
              }
              else {
                v684 = 0;
              }
              unsigned int v685 = v675[9];
              if (v683 != v684)
              {
                uint64_t v1567 = *a1;
                unint64_t v1839 = (unint64_t)v683;
                LODWORD(v1840) = 0;
                LODWORD(__s1[0]) = v682;
                LODWORD(v1829) = 0;
                (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v1567 + 32))(v1567, 126, &v1839, 1, __s1, 1, 0);
                int v682 = *(_DWORD *)(*(void *)(v1568 + 32) + 4);
              }
              uint64_t v686 = *a1;
              LODWORD(v1839) = v676;
              LODWORD(v1840) = 1;
              LODWORD(__s1[0]) = v682;
              LODWORD(v1829) = 0;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v686 + 32))(v686, 19, &v1839, 1, __s1, 1, 0);
              uint64_t v357 = *a1;
              LODWORD(__s1[0]) = v685;
              LODWORD(__s1[1]) = 1;
LABEL_1919:
              unint64_t v588 = 0;
LABEL_755:
              sub_1CC7362A8(v357, (unint64_t *)__s1, v588);
LABEL_887:
              llvm::MachineInstr::eraseFromParent(this);
              return 1;
            }
LABEL_1356:
            unsigned int v947 = v675[17];
            if ((v947 & 0x80000000) != 0 && (uint64_t v948 = v947 & 0x7FFFFFFF, v948 < *(_DWORD *)(v665 + 432)))
            {
              *(void *)&long long v1821 = *(void *)(*(void *)(v665 + 424) + 8 * v948);
              if (v1821)
              {
                v953 = v675 + 16;
LABEL_1362:
                unsigned int v954 = v953[1];
                uint64_t v64 = *a1;
                LODWORD(v1839) = v675[1];
                LODWORD(v1840) = 1;
                LODWORD(__s1[0]) = v954;
                goto LABEL_1422;
              }
            }
            else
            {
              *(void *)&long long v1821 = 0;
            }
            uint64_t v949 = *a1;
            unsigned int v951 = sub_1CB8F1DC4((unint64_t *)&v1821);
            if (v950 == 1) {
            unint64_t v1839 = (8 * v951) | 1;
            }
            LODWORD(v1840) = 0;
            LODWORD(__s1[0]) = *(_DWORD *)(*((void *)this + 4) + 68);
            LODWORD(v1829) = 0;
            sub_1CC7382B0(v949);
            v953 = *(unsigned int **)(v952 + 32);
            v675 = (unsigned int *)*((void *)this + 4);
            goto LABEL_1362;
          case 'P':
            uint64_t v374 = *a1;
            uint64_t v375 = *(void *)(*(void *)(*a1 + 8) + 40);
            uint64_t v376 = *((void *)this + 4);
            uint64_t v377 = *(unsigned int *)(v376 + 36);
            if ((v377 & 0x80000000) != 0) {
              uint64_t v378 = (uint64_t *)(*(void *)(v375 + 24) + 16 * (v377 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v378 = (uint64_t *)(*(void *)(v375 + 272) + 8 * v377);
            }
            uint64_t v379 = *v378;
            if (!v379) {
              goto LABEL_840;
            }
            int v380 = *(_DWORD *)(v376 + 4);
            if ((*(unsigned char *)(v379 + 3) & 1) == 0)
            {
              uint64_t v379 = *(void *)(v379 + 24);
              if (!v379 || (*(unsigned char *)(v379 + 3) & 1) == 0) {
                goto LABEL_840;
              }
            }
            uint64_t v381 = *(void *)(v379 + 8);
            if (!v381 || **(_WORD **)(v381 + 16) != 81 || *(_DWORD *)(v381 + 40) != 2) {
              goto LABEL_840;
            }
            int v382 = *(_DWORD *)(*(void *)(v381 + 32) + 36);
            *(void *)(v374 + 40) = *((void *)this + 3);
            *(void *)(v374 + 48) = this;
            uint64_t v383 = (void *)*a1;
            LODWORD(v1839) = v380;
            LODWORD(v1840) = 1;
            LODWORD(__s1[0]) = v382;
            goto LABEL_492;
          case 'Q':
            uint64_t v192 = *a1;
            uint64_t v193 = *(void *)(*(void *)(*a1 + 8) + 40);
            uint64_t v194 = *((void *)this + 4);
            int v195 = *(_DWORD *)(v194 + 4);
            if (v195 < 0 && (v195 & 0x7FFFFFFFu) < *(_DWORD *)(v193 + 432)) {
              uint64_t v196 = *(void *)(*(void *)(v193 + 424) + 8 * (v195 & 0x7FFFFFFF));
            }
            else {
              uint64_t v196 = 0;
            }
            uint64_t v197 = *(unsigned int *)(v194 + 36);
            if ((v197 & 0x80000000) != 0) {
              uint64_t v198 = (uint64_t *)(*(void *)(v193 + 24) + 16 * (v197 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v198 = (uint64_t *)(*(void *)(v193 + 272) + 8 * v197);
            }
            uint64_t v199 = *v198;
            if (!v199) {
              goto LABEL_840;
            }
            if ((*(unsigned char *)(v199 + 3) & 1) == 0)
            {
              uint64_t v199 = *(void *)(v199 + 24);
              if (!v199 || (*(unsigned char *)(v199 + 3) & 1) == 0) {
                goto LABEL_840;
              }
            }
            uint64_t v200 = *(void *)(v199 + 8);
            if (!v200 || **(_WORD **)(v200 + 16) != 80 || *(_DWORD *)(v200 + 40) != 2) {
              goto LABEL_840;
            }
            int v201 = *(_DWORD *)(*(void *)(v200 + 32) + 36);
            if (v201 < 0 && (v201 & 0x7FFFFFFFu) < *(_DWORD *)(v193 + 432)) {
              uint64_t v202 = *(void *)(*(void *)(v193 + 424) + 8 * (v201 & 0x7FFFFFFF));
            }
            else {
              uint64_t v202 = 0;
            }
            if (v202 != v196) {
              goto LABEL_840;
            }
            *(void *)(v192 + 40) = *((void *)this + 3);
            *(void *)(v192 + 48) = this;
            uint64_t v64 = *a1;
            LODWORD(v1839) = v195;
            LODWORD(v1840) = 1;
            LODWORD(__s1[0]) = v201;
            goto LABEL_885;
          default:
            goto LABEL_840;
        }
    }
  }
  switch(v4)
  {
    case 116:
      uint64_t v227 = *a1;
      *(void *)(v227 + 40) = *((void *)this + 3);
      *(void *)(v227 + 48) = this;
      if ((**((_WORD **)this + 2) & 0xFFFE) != 0x74) {
        goto LABEL_840;
      }
      uint64_t v228 = *((unsigned int *)this + 10);
      if (!v228) {
        goto LABEL_840;
      }
      uint64_t v229 = *(void *)(*(void *)(*a1 + 8) + 40);
      uint64_t v230 = (_DWORD *)*((void *)this + 4);
      uint64_t v231 = v230 + 4;
      while (*((unsigned char *)v231 - 16) != 17)
      {
        v231 += 8;
        if (!--v228) {
          goto LABEL_840;
        }
      }
      if (*v231 != 2131) {
        goto LABEL_840;
      }
      uint64_t v843 = v230[17];
      if ((v843 & 0x80000000) != 0) {
        uint64_t v844 = (uint64_t *)(*(void *)(v229 + 24) + 16 * (v843 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v844 = (uint64_t *)(*(void *)(v229 + 272) + 8 * v843);
      }
      uint64_t v845 = *v844;
      if ((*(unsigned char *)(v845 + 3) & 1) == 0) {
        uint64_t v845 = *(void *)(v845 + 24);
      }
      int v846 = v230[1];
      uint64_t v847 = *(void *)(v845 + 8);
      if (**(_WORD **)(v847 + 16) != 121) {
        goto LABEL_1211;
      }
      v1436 = *(const llvm::detail::DoubleAPFloat **)(*(void *)(v847 + 32) + 48);
      if (!v1436) {
        goto LABEL_1211;
      }
      if ((v843 & 0x80000000) != 0
        && (v843 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v229 + 432))
      {
        v1437 = *(void **)(*(void *)(v229 + 424) + 8 * (v843 & 0x7FFFFFFF));
      }
      else
      {
        v1437 = 0;
      }
      v1438 = ****(llvm::ConstantFP *****)(*((void *)this + 3) + 32);
      v1824 = v1437;
      int v1440 = sub_1CB8F1DC4((unint64_t *)&v1824);
      if (v1439 == 1) {
      if (*((_UNKNOWN **)v1436 + 4) == &unk_1CFB2E344)
      }
        char v1441 = *(unsigned char *)(*((void *)v1436 + 5) + 28);
      else {
        char v1441 = *((unsigned char *)v1436 + 52);
      }
      if ((v1441 & 7) == 1 || (v1441 & 8) != 0)
      {
        v1665 = 0;
LABEL_3190:
        sub_1CC73D93C(v1440, (uint64_t)__s1, v1665);
        v1436 = llvm::ConstantFP::get(v1438, (llvm::LLVMContext *)__s1, v1666);
        goto LABEL_3191;
      }
      if ((v1441 & 7) == 0)
      {
        v1665 = COERCE_CONST_LLVM_APINT_(1.0);
        goto LABEL_3190;
      }
      sub_1CBAC90A0((uint64_t)__s1, 1.0);
      if (v1440 == 16) {
        llvm::APFloat::convert((uint64_t)__s1, &unk_1CFB2E2E0, 1, &v1821);
      }
      if (sub_1CB88A72C((uint64_t)v1436 + 24, (uint64_t)__s1) == 2)
      {
        sub_1CC73D93C(v1440, (uint64_t)&v1839, COERCE_CONST_LLVM_APINT_(1.0));
        v1436 = llvm::ConstantFP::get(v1438, (llvm::LLVMContext *)&v1839, v1442);
        sub_1CB87DEE4((uint64_t *)&v1840);
      }
LABEL_3191:
      sub_1CB87DEE4((uint64_t *)&__s1[1]);
      if (v1436)
      {
        uint64_t v1667 = *a1;
        LODWORD(__s1[0]) = v846;
        LODWORD(__s1[1]) = 1;
        (*(void (**)(uint64_t, void **, const llvm::detail::DoubleAPFloat *))(*(void *)v1667 + 24))(v1667, __s1, v1436);
        goto LABEL_887;
      }
LABEL_1211:
      if ((v843 & 0x80000000) != 0) {
        uint64_t v848 = (uint64_t *)(*(void *)(v229 + 24) + 16 * (v843 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v848 = (uint64_t *)(*(void *)(v229 + 272) + 8 * v843);
      }
      uint64_t v849 = *v848;
      if (v849)
      {
        if (*(unsigned char *)(v849 + 3) & 1) != 0 || (uint64_t v849 = *(void *)(v849 + 24)) != 0 && (*(unsigned char *)(v849 + 3))
        {
          uint64_t v850 = *(void *)(v849 + 8);
          if (v850)
          {
            if (**(_WORD **)(v850 + 16) == 179 && *(_DWORD *)(v850 + 40) == 2)
            {
              unsigned int v851 = *(_DWORD *)(*(void *)(v850 + 32) + 36);
              if (sub_1CBAB2190(v851, v229, 0, 0))
              {
                v1797 = (void *)*a1;
                unsigned int v1786 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v229, "", 0);
                unint64_t v852 = v1786 & 0x7FFFFFFF;
                *(void *)(*(void *)(v229 + 24) + 16 * v852) = 4;
                unint64_t v853 = *(unsigned int *)(v229 + 432);
                if (v852 >= v853)
                {
                  uint64_t v854 = *(void *)(v229 + 440);
                  uint64_t v855 = v852 + 1 - v853;
                  if (v852 >= *(unsigned int *)(v229 + 436)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  int v856 = *(_DWORD *)(v229 + 432);
                  if (v855)
                  {
                    unsigned int v857 = (void *)(*(void *)(v229 + 424) + 8 * *(unsigned int *)(v229 + 432));
                    uint64_t v858 = ~v852 + v853;
                    do
                    {
                      *v857++ = v854;
                      BOOL v801 = __CFADD__(v858++, 1);
                    }
                    while (!v801);
                    int v856 = *(_DWORD *)(v229 + 432);
                  }
                  *(_DWORD *)(v229 + 432) = v856 + v855;
                }
                *(void *)(*(void *)(v229 + 424) + 8 * v852) = 257;
                uint64_t v859 = *(void *)(v229 + 8);
                if (v859) {
                  (*(void (**)(uint64_t, void))(*(void *)v859 + 24))(v859, v1786);
                }
                LODWORD(__s1[0]) = v1786;
                uint64_t v860 = sub_1CC7390C0(v1797, 2131, (int *)__s1, 1, 0);
                uint64_t v862 = v861;
                __s1[1] = 0;
                long long v1829 = 0uLL;
                HIDWORD(__s1[0]) = v851;
                LODWORD(__s1[0]) = 0;
                llvm::MachineInstr::addOperand(v861, v860, (const llvm::MachineOperand *)__s1);
                uint64_t v863 = *a1;
                LODWORD(v1839) = v846;
                LODWORD(v1840) = 1;
                __s1[0] = v860;
                __s1[1] = v862;
                LODWORD(v1829) = 1;
LABEL_1230:
                int v226 = *(void (**)(void))(*(void *)v863 + 32);
                goto LABEL_886;
              }
            }
          }
        }
      }
LABEL_840:
      return sub_1CD2BF2FC((llvm::IntegerType ******)a1, (uint64_t)this);
    case 117:
    case 120:
    case 121:
    case 122:
    case 123:
    case 125:
    case 130:
    case 131:
    case 132:
    case 133:
    case 135:
      goto LABEL_840;
    case 118:
    case 124:
    case 126:
      if (v4 != 126 && v4 != 124 && v4 != 118) {
        goto LABEL_840;
      }
      uint64_t v52 = *a1;
      uint64_t v53 = *(void *)(*(void *)(*a1 + 8) + 40);
      uint64_t v54 = *((void *)this + 4);
      int v55 = *(_DWORD *)(v54 + 4);
      uint64_t v56 = *(unsigned int *)(v54 + 36);
      if ((v56 & 0x80000000) != 0) {
        int v57 = (uint64_t *)(*(void *)(v53 + 24) + 16 * (v56 & 0x7FFFFFFF) + 8);
      }
      else {
        int v57 = (uint64_t *)(*(void *)(v53 + 272) + 8 * v56);
      }
      uint64_t v58 = *v57;
      if (v58
        && ((*(unsigned char *)(v58 + 3) & 1) != 0 || (uint64_t v58 = *(void *)(v58 + 24)) != 0 && (*(unsigned char *)(v58 + 3) & 1) != 0))
      {
        uint64_t v59 = *(void *)(v58 + 8);
      }
      else
      {
        uint64_t v59 = 0;
      }
      if (v55 < 0 && (v55 & 0x7FFFFFFFu) < *(_DWORD *)(v53 + 432)) {
        int v60 = *(void **)(*(void *)(v53 + 424) + 8 * (v55 & 0x7FFFFFFF));
      }
      else {
        int v60 = 0;
      }
      v1824 = v60;
      *(void *)(v52 + 40) = *((void *)this + 3);
      *(void *)(v52 + 48) = this;
      uint64_t v62 = sub_1CB8F1DC4((unint64_t *)&v1824);
      if (v61 == 1) {
      if (v62 == 64)
      }
        goto LABEL_3473;
      uint64_t v280 = sub_1CB8F1DC4((unint64_t *)&v1824);
      if (v279 == 1) {
      if (v280 == 32)
      }
        goto LABEL_3473;
      uint64_t v282 = sub_1CB8F1DC4((unint64_t *)&v1824);
      if (v281 == 1) {
      if (v282 == 16)
      }
      {
LABEL_3473:
        sub_1CBAB0838((uint64_t)__s1, v4, (unint64_t)v1824, v56, v53);
        if ((_BYTE)v1829)
        {
          uint64_t v251 = *a1;
          LODWORD(v1839) = v55;
          goto LABEL_311;
        }
      }
      int v63 = **(unsigned __int16 **)(v59 + 16);
      if (v63 == v4)
      {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)a1[2] + 32))(a1[2], this);
        uint64_t v289 = *((void *)this + 4) + 32;
        unsigned int v290 = *(_DWORD *)(*(void *)(v59 + 32) + 36);
        goto LABEL_367;
      }
      if (v4 != 124 && v4 != 118) {
        goto LABEL_840;
      }
      if ((v63 & 0xFFFFFFFD) == 0x7C)
      {
        uint64_t v1581 = *a1;
        LODWORD(v1839) = v55;
        LODWORD(v1840) = 1;
        LODWORD(__s1[0]) = *(_DWORD *)(*(void *)(v59 + 32) + 36);
        LODWORD(v1829) = 0;
        int v226 = *(void (**)(void))(*(void *)v1581 + 32);
        goto LABEL_886;
      }
      if (v4 == 118)
      {
        LODWORD(v1821) = 0;
        __s1[0] = v1824;
        __s1[1] = &v1821;
        LODWORD(v1839) = v56;
        if (sub_1CBACAC30((uint64_t)__s1, v53, (unsigned int *)&v1839))
        {
          uint64_t v64 = *a1;
          LODWORD(v1839) = v55;
          LODWORD(v1840) = 1;
          int v65 = v1821;
          goto LABEL_884;
        }
      }
      goto LABEL_840;
    case 119:
      uint64_t v242 = *a1;
      uint64_t v243 = *(uint64_t **)(*a1 + 8);
      uint64_t v244 = v243[5];
      uint64_t v245 = *((void *)this + 4);
      unsigned int v246 = *(_DWORD *)(v245 + 4);
      unint64_t v247 = *(unsigned int *)(v245 + 36);
      if ((v246 & 0x80000000) != 0 && (v246 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v244 + 432)) {
        unint64_t v248 = *(void *)(*(void *)(v244 + 424) + 8 * (v246 & 0x7FFFFFFF));
      }
      else {
        unint64_t v248 = 0;
      }
      unint64_t v1810 = v248;
      *(void *)(v242 + 40) = *((void *)this + 3);
      *(void *)(v242 + 48) = this;
      uint64_t v250 = sub_1CB8F1DC4(&v1810);
      if (v249 == 1) {
      if (v250 != 16)
      }
      {
        uint64_t v359 = sub_1CB8F1DC4(&v1810);
        if (v358 == 1) {
        if (v359 != 32)
        }
          goto LABEL_460;
      }
      sub_1CBAB0838((uint64_t)__s1, 119, v1810, v247, v244);
      if ((_BYTE)v1829)
      {
        uint64_t v251 = *a1;
        LODWORD(v1839) = v246;
LABEL_311:
        LODWORD(v1840) = 1;
        unsigned int v252 = __s1[1];
        unsigned int v253 = __s1[0];
        if (LODWORD(__s1[1]) > 0x40) {
          unint64_t v254 = *(void *)__s1[0];
        }
        else {
          unint64_t v254 = (uint64_t)__s1[0] << -LOBYTE(__s1[1]) >> -LOBYTE(__s1[1]);
        }
        sub_1CC7362A8(v251, &v1839, v254);
        llvm::MachineInstr::eraseFromParent(this);
        if (v252 >= 0x41 && v253)
        {
          v724 = v253;
          goto LABEL_1038;
        }
        return 1;
      }
      if ((v247 & 0x80000000) != 0) {
        uint64_t v644 = (uint64_t *)(*(void *)(v244 + 24) + 16 * (v247 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v644 = (uint64_t *)(*(void *)(v244 + 272) + 8 * v247);
      }
      uint64_t v645 = *v644;
      if ((*(unsigned char *)(v645 + 3) & 1) == 0) {
        uint64_t v645 = *(void *)(v645 + 24);
      }
      if (**(_WORD **)(*(void *)(v645 + 8) + 16) == 68)
      {
        uint64_t v646 = *a1;
        LODWORD(__s1[0]) = v246;
        LODWORD(__s1[1]) = 1;
        int v226 = *(void (**)(void))(*(void *)v646 + 32);
        goto LABEL_886;
      }
LABEL_460:
      if (v247 >> 31) {
        unint64_t v360 = (uint64_t *)(*(void *)(v244 + 24) + 16 * (v247 & 0x7FFFFFFF) + 8);
      }
      else {
        unint64_t v360 = (uint64_t *)(*(void *)(v244 + 272) + 8 * v247);
      }
      uint64_t v361 = *v360;
      if (v361)
      {
        if (*(unsigned char *)(v361 + 3) & 1) != 0 || (uint64_t v361 = *(void *)(v361 + 24)) != 0 && (*(unsigned char *)(v361 + 3))
        {
          uint64_t v362 = *(void *)(v361 + 8);
          if (v362)
          {
            if (**(_WORD **)(v362 + 16) == 82 && *(_DWORD *)(v362 + 40) == 2) {
              unint64_t v247 = *(unsigned int *)(*(void *)(v362 + 32) + 36);
            }
          }
        }
      }
      if ((v247 & 0x80000000) != 0) {
        unsigned int v363 = (uint64_t *)(*(void *)(v244 + 24) + 16 * (v247 & 0x7FFFFFFF) + 8);
      }
      else {
        unsigned int v363 = (uint64_t *)(*(void *)(v244 + 272) + 8 * v247);
      }
      uint64_t v364 = *v363;
      if ((*(unsigned char *)(v364 + 3) & 1) == 0) {
        uint64_t v364 = *(void *)(v364 + 24);
      }
      uint64_t v365 = *(void *)(v364 + 8);
      unsigned int v366 = **(unsigned __int16 **)(v365 + 16);
      if (v366 > 0x75)
      {
        if (v366 == 118 || v366 == 124 || v366 == 126)
        {
          int v367 = *(_DWORD *)(*(void *)(v365 + 32) + 36);
          if (v367 < 0 && (v367 & 0x7FFFFFFFu) < *(_DWORD *)(v244 + 432)) {
            unint64_t v368 = *(void **)(*(void *)(v244 + 424) + 8 * (v367 & 0x7FFFFFFF));
          }
          else {
            unint64_t v368 = 0;
          }
          v1824 = v368;
          unint64_t v370 = sub_1CB8F1DC4((unint64_t *)&v1824);
          if (v369 == 1) {
          unint64_t v372 = sub_1CB8F1DC4(&v1810);
          }
          if (v371 == 1) {
          if (v370 < v372)
          }
          {
            uint64_t v373 = *a1;
            LODWORD(v1839) = v246;
            LODWORD(v1840) = 1;
            LODWORD(__s1[0]) = v367;
            LODWORD(v1829) = 0;
            int v226 = *(void (**)(void))(*(void *)v373 + 32);
            goto LABEL_886;
          }
          unint64_t v997 = sub_1CB8F1DC4((unint64_t *)&v1824);
          if (v996 == 1) {
          unint64_t v999 = sub_1CB8F1DC4(&v1810);
          }
          if (v998 == 1) {
          uint64_t v64 = *a1;
          }
          if (v997 > v999)
          {
            LODWORD(v1839) = v246;
            LODWORD(v1840) = 1;
            LODWORD(__s1[0]) = v367;
LABEL_1422:
            LODWORD(v1829) = 0;
            int v226 = *(void (**)(void))(*(void *)v64 + 32);
            goto LABEL_886;
          }
          LODWORD(v1839) = v246;
          LODWORD(v1840) = 1;
          LODWORD(__s1[0]) = v367;
          goto LABEL_885;
        }
        goto LABEL_1537;
      }
      if (v366 == 76)
      {
        int v1066 = *(_DWORD *)(*(void *)(v365 + 32) + 36);
        if (v1066 < 0 && (v1066 & 0x7FFFFFFFu) < *(_DWORD *)(v244 + 432)) {
          v1067 = *(void **)(*(void *)(v244 + 424) + 8 * (v1066 & 0x7FFFFFFF));
        }
        else {
          v1067 = 0;
        }
        int v1798 = *(_DWORD *)(*(void *)(v365 + 32) + 36);
        v1824 = v1067;
        unint64_t v1069 = sub_1CB8F1DC4((unint64_t *)&v1824);
        if (v1068 == 1) {
        unint64_t v1071 = sub_1CB8F1DC4(&v1810);
        }
        if (v1070 == 1) {
        if (v1069 >= v1071)
        }
        {
          uint64_t v383 = (void *)*a1;
          LODWORD(v1839) = v246;
          LODWORD(v1840) = 1;
          LODWORD(__s1[0]) = v1798;
LABEL_492:
          LODWORD(v1829) = 0;
          sub_1CC738034(v383, 126, &v1839, (int *)__s1);
          goto LABEL_887;
        }
      }
      else if (v366 == 78)
      {
        if ((v247 & 0x80000000) != 0 && (v247 & 0x7FFFFFFF) < *(_DWORD *)(v244 + 432))
        {
          unint64_t v869 = *(void *)(*(void *)(v244 + 424) + 8 * (v247 & 0x7FFFFFFF));
          if ((v869 & 2) != 0)
          {
            char v1252 = 35;
            char v1253 = 19;
            if ((v869 & 4) == 0) {
              char v1252 = 19;
            }
            unint64_t v1254 = v869 >> v1252;
            if ((v869 & 4) == 0) {
              char v1253 = 3;
            }
            if (v869) {
              char v1253 = 3;
            }
            unint64_t v871 = (8 * (unsigned __int16)(v869 >> v1253)) & 0xFFFFF8000007FFFFLL | ((v1254 & 0xFFFFFF) << 19) | 2;
LABEL_1246:
            *(void *)&long long v1821 = v871;
            unsigned int v873 = sub_1CB8F1DC4((unint64_t *)&v1821);
            if (v872 == 1) {
            unint64_t v875 = sub_1CB8F1DC4(&v1810);
            }
            if (v874 == 1) {
            __s1[0] = &v1829;
            }
            __s1[1] = (void *)0x400000000;
            uint64_t v876 = (v875 / v873);
            if (v876)
            {
              uint64_t v877 = 0;
              unsigned int v878 = 0;
              do
              {
                if (v878 >= HIDWORD(__s1[1])) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((_DWORD *)__s1[0] + v878) = *(_DWORD *)(*(void *)(v365 + 32) + v877 + 36);
                unsigned int v878 = ++LODWORD(__s1[1]);
                v877 += 32;
              }
              while (32 * v876 != v877);
            }
            unint64_t v879 = (uint64_t *)sub_1CBA5A95C(v876, v1821);
            uint64_t v880 = *a1;
            unint64_t v1839 = (unint64_t)v879;
            LODWORD(v1840) = 0;
            int v881 = (uint64_t *)sub_1CC738E00(v880, (uint64_t)&v1839, (int *)__s1[0], LODWORD(__s1[1]));
            uint64_t v882 = *a1;
            LODWORD(v1824) = v246;
            LODWORD(v1825) = 1;
            unint64_t v1839 = (unint64_t)v881;
            *(void *)&long long v1840 = v883;
            DWORD2(v1840) = 1;
            sub_1CC7382B0(v882);
            llvm::MachineInstr::eraseFromParent(this);
            if (__s1[0] != &v1829) {
              free(__s1[0]);
            }
            return 1;
          }
        }
        else
        {
          unint64_t v869 = 0;
        }
        char v870 = 3;
        if ((v869 & 1) == 0) {
          char v870 = 19;
        }
        unint64_t v871 = v869 & 0x8000000000000000 | (8 * (v869 >> v870)) | 1;
        goto LABEL_1246;
      }
LABEL_1537:
      if ((v247 & 0x80000000) != 0) {
        v1072 = (uint64_t *)(*(void *)(v244 + 24) + 16 * (v247 & 0x7FFFFFFF) + 8);
      }
      else {
        v1072 = (uint64_t *)(*(void *)(v244 + 272) + 8 * v247);
      }
      uint64_t v1073 = *v1072;
      if (!v1073) {
        goto LABEL_1551;
      }
      while ((*(unsigned char *)(v1073 + 3) & 1) != 0)
      {
        uint64_t v1073 = *(void *)(v1073 + 24);
        if (!v1073) {
          goto LABEL_1551;
        }
      }
      while (1)
      {
        uint64_t v1073 = *(void *)(v1073 + 24);
        if (!v1073) {
          break;
        }
        if ((*(unsigned char *)(v1073 + 3) & 1) == 0) {
          goto LABEL_1551;
        }
      }
      v1074 = (uint64_t *)((v247 & 0x80000000) != 0
                        ? *(void *)(v244 + 24) + 16 * (v247 & 0x7FFFFFFF) + 8
                        : *(void *)(v244 + 272) + 8 * v247);
      if ((uint64_t v1075 = *v1074) == 0
        || (*(unsigned char *)(v1075 + 3) & 1) == 0
        && ((uint64_t v1075 = *(void *)(v1075 + 24)) == 0 || (*(unsigned char *)(v1075 + 3) & 1) == 0)
        || (uint64_t v1076 = *(void *)(v1075 + 8)) == 0
        || **(_WORD **)(v1076 + 16) != 127
        || *(_DWORD *)(v1076 + 40) != 3)
      {
LABEL_1551:
        if (v366 != 90) {
          goto LABEL_1561;
        }
        v1077 = (uint64_t *)((v247 & 0x80000000) != 0
                          ? *(void *)(v244 + 24) + 16 * (v247 & 0x7FFFFFFF) + 8
                          : *(void *)(v244 + 272) + 8 * v247);
        uint64_t v1078 = *v1077;
        if (!v1078) {
          goto LABEL_1561;
        }
        while ((*(unsigned char *)(v1078 + 3) & 1) != 0)
        {
          uint64_t v1078 = *(void *)(v1078 + 24);
          if (!v1078) {
            goto LABEL_1561;
          }
        }
        while (1)
        {
          uint64_t v1078 = *(void *)(v1078 + 24);
          if (!v1078) {
            break;
          }
          if ((*(unsigned char *)(v1078 + 3) & 1) == 0) {
            goto LABEL_1561;
          }
        }
        if ((v1810 & 1) == 0) {
          goto LABEL_1561;
        }
        uint64_t v1297 = sub_1CB8F1DC4(&v1810);
        if (v1296 == 1) {
        if (v1297 != 16)
        }
          goto LABEL_1561;
        v1299 = (unint64_t *)(v365 + 48);
        unint64_t v1298 = *(void *)(v365 + 48);
        if (v1298 < 8)
        {
          v1300 = 0;
          goto LABEL_2224;
        }
        if ((v1298 & 7) != 0)
        {
          v1300 = 0;
          if ((*(void *)(v365 + 48) & 7) == 3)
          {
            v1301 = (int *)(v1298 & 0xFFFFFFFFFFFFFFF8);
            if ((v1298 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              uint64_t v1304 = *v1301;
              v1303 = v1301 + 2;
              uint64_t v1302 = v1304;
              if (v1304)
              {
                uint64_t v1305 = (uint64_t)&v1303[2 * v1302];
LABEL_2280:
                v1300 = v1303;
                while ((*(_WORD *)(*(void *)v1300 + 36) & 0xF00) == 0)
                {
                  v1300 += 2;
                  if (v1300 == (int *)v1305)
                  {
                    v1300 = (int *)v1305;
                    break;
                  }
                }
                if (v1298 >= 8) {
                  goto LABEL_2285;
                }
LABEL_2224:
                v1459 = 0;
                uint64_t v1460 = 0;
                goto LABEL_2225;
              }
              v1300 = v1303;
            }
          }
LABEL_2285:
          if ((v1298 & 7) != 0)
          {
            v1459 = 0;
            if ((v1298 & 7) == 3
              && (v1486 = (int *)(v1298 & 0xFFFFFFFFFFFFFFF8), (v1298 & 0xFFFFFFFFFFFFFFF8) != 0))
            {
              uint64_t v1460 = *v1486;
              v1459 = v1486 + 2;
            }
            else
            {
              uint64_t v1460 = 0;
            }
          }
          else
          {
            unint64_t *v1299 = v1298 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1460 = 1;
            v1459 = (int *)(v365 + 48);
          }
LABEL_2225:
          if (v1300 == &v1459[2 * v1460] || !*(void *)v1300)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)a1[2] + 32))(a1[2], v365);
            llvm::MachineOperand::setReg(*(void *)(v365 + 32), v246);
            uint64_t v1461 = *(void *)(v365 + 48);
            if ((v1461 & 7) != 0)
            {
              unint64_t v1462 = *(void *)((v1461 & 0xFFFFFFFFFFFFFFF8) + 8);
            }
            else
            {
              unint64_t v1462 = v1461 & 0xFFFFFFFFFFFFFFF8;
              unint64_t *v1299 = v1461 & 0xFFFFFFFFFFFFFFF8;
            }
            uint64_t v1463 = *(void *)(v1462 + 8);
            unsigned int v1465 = sub_1CB8F1DC4(&v1810);
            if (v1464 == 1) {
            __s1[0] = (void *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v243, v1462, v1463, ((unint64_t)(v1465 >> 3) << 6) | 1);
            }
            llvm::MachineInstr::setMemRefs(v365, v243, __s1, 1);
            (*(void (**)(uint64_t, uint64_t))(*(void *)a1[2] + 40))(a1[2], v365);
            goto LABEL_887;
          }
LABEL_1561:
          if ((v1810 & 1) == 0) {
            goto LABEL_1562;
          }
          uint64_t v1152 = sub_1CB8F1DC4(&v1810);
          if (v1151 == 1) {
          if (v1152 != 16)
          }
            goto LABEL_1562;
          v1153 = (uint64_t *)((v247 & 0x80000000) != 0
                            ? *(void *)(v244 + 24) + 16 * (v247 & 0x7FFFFFFF) + 8
                            : *(void *)(v244 + 272) + 8 * v247);
          uint64_t v1154 = *v1153;
          if (!v1154) {
            goto LABEL_1562;
          }
          if ((*(unsigned char *)(v1154 + 3) & 1) == 0)
          {
            uint64_t v1154 = *(void *)(v1154 + 24);
            if (!v1154 || (*(unsigned char *)(v1154 + 3) & 1) == 0) {
              goto LABEL_1562;
            }
          }
          uint64_t v1155 = *(void *)(v1154 + 8);
          if (!v1155 || **(_WORD **)(v1155 + 16) != 45 || *(_DWORD *)(v1155 + 40) != 3) {
            goto LABEL_1562;
          }
          uint64_t v1156 = *(void *)(v1155 + 32);
          int v1157 = *(_DWORD *)(v1156 + 36);
          sub_1CC73C210(*(_DWORD *)(v1156 + 68), v244, (uint64_t)__s1);
          if ((_BYTE)v1829)
          {
            if (LODWORD(__s1[1]) < 0x41)
            {
              uint64_t v1158 = (uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1]);
              goto LABEL_2058;
            }
            if (__s1[0]) {
              MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
            }
          }
          sub_1CC73C210(*(_DWORD *)(*(void *)(v1155 + 32) + 36), v244, (uint64_t)__s1);
          if (!(_BYTE)v1829) {
            goto LABEL_1562;
          }
          if (LODWORD(__s1[1]) >= 0x41)
          {
            if (__s1[0]) {
              MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
            }
            goto LABEL_1562;
          }
          uint64_t v1158 = (uint64_t)__s1[0] << -LOBYTE(__s1[1]) >> -LOBYTE(__s1[1]);
          int v1157 = *(_DWORD *)(*(void *)(v1155 + 32) + 68);
LABEL_2058:
          if (!(_WORD)v1158 && sub_1CBAB06C0((uint64_t)a1, v247))
          {
            uint64_t v1352 = *a1;
            *(void *)&long long v1821 = v1810;
            DWORD2(v1821) = 0;
            LODWORD(v1839) = v1157;
            DWORD2(v1840) = 0;
            v1353 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v1352 + 32))(v1352, 119, &v1821, 1, &v1839, 1, 0);
            v1355 = v1354;
            uint64_t v1356 = *a1;
            *(void *)&long long v1819 = v1810;
            DWORD2(v1819) = 0;
            uint64_t v1357 = sub_1CC7362A8(v1356, (unint64_t *)&v1819, 0);
            LODWORD(v1824) = v246;
            LODWORD(v1825) = 1;
            __s1[0] = v1353;
            __s1[1] = v1355;
            LODWORD(v1829) = 1;
            *((void *)&v1829 + 1) = v1357;
            unint64_t v1830 = v1358;
            LODWORD(v1831) = 1;
            int v226 = *(void (**)(void))(*(void *)v1352 + 32);
            goto LABEL_886;
          }
LABEL_1562:
          v532 = &v1810;
          goto LABEL_700;
        }
        v1298 &= 0xFFFFFFFFFFFFFFF8;
        *(void *)(v365 + 48) = v1298;
        uint64_t v1305 = v365 + 56;
        v1303 = (int *)(v365 + 48);
        goto LABEL_2280;
      }
      uint64_t v1470 = *(void *)(v1076 + 32);
      uint64_t v1799 = *(unsigned int *)(v1470 + 68);
      if ((v1799 & 0x80000000) != 0) {
        v1471 = (uint64_t *)(*(void *)(v244 + 24) + 16 * (v1799 & 0x7FFFFFFF) + 8);
      }
      else {
        v1471 = (uint64_t *)(*(void *)(v244 + 272) + 8 * v1799);
      }
      uint64_t v1472 = *v1471;
      if ((*(unsigned char *)(v1472 + 3) & 1) == 0) {
        uint64_t v1472 = *(void *)(v1472 + 24);
      }
      int v1769 = *(_DWORD *)(v1470 + 36);
      uint64_t v1776 = *(void *)(v1472 + 8);
      sub_1CC6DEE8C(a1[3], (const char *)*(unsigned int *)(*(void *)(v1776 + 32) + 4), (uint64_t)__s1);
      v1764 = __s1[0];
      unint64_t v1839 = (unint64_t)__s1[0];
      unsigned int v1473 = __s1[1];
      LODWORD(v1840) = __s1[1];
      uint64_t v1760 = v1829;
      *((void *)&v1840 + 1) = v1829;
      unsigned int v1788 = DWORD2(v1829);
      LODWORD(v1841) = DWORD2(v1829);
      unsigned int v1475 = sub_1CB8F1DC4(&v1810);
      if (v1474 == 1) {
      if (v1473 > 0x40)
      }
      {
        int v1476 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v1839);
      }
      else if (v1473)
      {
        int v1476 = __clz(~((void)v1764 << -(char)v1473));
      }
      else
      {
        int v1476 = 0;
      }
      if (v1473 - v1476 > 31 - __clz(v1475))
      {
        if (v1788 >= 0x41 && v1760) {
          MEMORY[0x1D25D9CB0](v1760, 0x1000C8000313F17);
        }
        if (v1473 >= 0x41 && v1764) {
          MEMORY[0x1D25D9CB0](v1764, 0x1000C8000313F17);
        }
        goto LABEL_1551;
      }
      uint64_t v1490 = *a1;
      LODWORD(v1819) = v246;
      DWORD2(v1819) = 1;
      unint64_t v1816 = v1810;
      LODWORD(v1817) = 0;
      LODWORD(v1824) = v1769;
      LODWORD(v1826) = 0;
      __s1[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v1490 + 32))(v1490, 119, &v1816, 1, &v1824, 1, 0);
      __s1[1] = v1491;
      LODWORD(v1829) = 1;
      uint64_t v1492 = *a1;
      unint64_t v1813 = v1810;
      LODWORD(v1814) = 0;
      LODWORD(v1821) = v1799;
      LODWORD(v1822) = 0;
      *((void *)&v1829 + 1) = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v1492 + 32))(v1492, 119, &v1813, 1, &v1821, 1, 0);
      unint64_t v1830 = v1493;
      LODWORD(v1831) = 1;
      (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void **, uint64_t, uint64_t))(*(void *)v1490 + 32))(v1490, 127, &v1819, 1, __s1, 2, *(unsigned __int16 *)(v1776 + 44) | 0x100000000);
      llvm::MachineInstr::eraseFromParent(this);
      if (v1788 >= 0x41 && *((void *)&v1840 + 1)) {
        MEMORY[0x1D25D9CB0](*((void *)&v1840 + 1), 0x1000C8000313F17);
      }
      if (v1473 < 0x41) {
        return 1;
      }
      goto LABEL_2302;
    case 127:
      uint64_t v350 = *a1;
      uint64_t v351 = *(void *)(*(void *)(*a1 + 8) + 40);
      int v352 = *(_DWORD *)(*((void *)this + 4) + 4);
      *(void *)(v350 + 40) = *((void *)this + 3);
      *(void *)(v350 + 48) = this;
      sub_1CC73C210(*(_DWORD *)(*((void *)this + 4) + 68), v351, (uint64_t)__s1);
      if (!(_BYTE)v1829) {
        goto LABEL_450;
      }
      if (LODWORD(__s1[1]) >= 0x41)
      {
        if (__s1[0]) {
          MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
        }
LABEL_450:
        uint64_t v353 = *(unsigned int *)(*((void *)this + 4) + 36);
        if ((v353 & 0x80000000) != 0) {
          unint64_t v354 = (uint64_t *)(*(void *)(v351 + 24) + 16 * (v353 & 0x7FFFFFFF) + 8);
        }
        else {
          unint64_t v354 = (uint64_t *)(*(void *)(v351 + 272) + 8 * v353);
        }
        uint64_t v355 = *v354;
        if ((*(unsigned char *)(v355 + 3) & 1) == 0) {
          uint64_t v355 = *(void *)(v355 + 24);
        }
        uint64_t v356 = *(void *)(v355 + 8);
      }
      else
      {
        uint64_t v648 = (uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1]);
        uint64_t v420 = *(unsigned int *)(*((void *)this + 4) + 36);
        if ((v420 & 0x80000000) != 0) {
          uint64_t v649 = (uint64_t *)(*(void *)(v351 + 24) + 16 * (v420 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v649 = (uint64_t *)(*(void *)(v351 + 272) + 8 * v420);
        }
        uint64_t v650 = *v649;
        if (v650
          && ((*(unsigned char *)(v650 + 3) & 1) != 0 || (uint64_t v650 = *(void *)(v650 + 24)) != 0 && (*(unsigned char *)(v650 + 3) & 1) != 0))
        {
          uint64_t v356 = *(void *)(v650 + 8);
        }
        else
        {
          uint64_t v356 = 0;
        }
        if (!v648)
        {
          uint64_t v64 = *a1;
          LODWORD(v1839) = v352;
          goto LABEL_2309;
        }
        if ((v420 & 0x80000000) != 0) {
          uint64_t v651 = (uint64_t *)(*(void *)(v351 + 24) + 16 * (v420 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v651 = (uint64_t *)(*(void *)(v351 + 272) + 8 * v420);
        }
        uint64_t v652 = *v651;
        if (v652)
        {
          if ((*(unsigned char *)(v652 + 3) & 1) != 0
            || (uint64_t v652 = *(void *)(v652 + 24)) != 0 && (*(unsigned char *)(v652 + 3) & 1) != 0)
          {
            uint64_t v653 = *(void *)(v652 + 8);
            if (v653)
            {
              if (**(_WORD **)(v653 + 16) == 127 && *(_DWORD *)(v653 + 40) == 3)
              {
                uint64_t v654 = *(void *)(v653 + 32);
                int v655 = *(_DWORD *)(v654 + 36);
                sub_1CC73C210(*(_DWORD *)(v654 + 68), v351, (uint64_t)__s1);
                if ((_BYTE)v1829)
                {
                  if (LODWORD(__s1[1]) >= 0x41)
                  {
                    if (__s1[0]) {
                      MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
                    }
                  }
                  else if (v648 >= 1)
                  {
                    uint64_t v656 = (uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1]);
                    if (v656 >= 1)
                    {
                      unint64_t v657 = v656 + v648;
                      if ((unint64_t)(v656 + v648) <= 0x20 && v657 - 17 <= 0xFFFFFFFFFFFFFFF3)
                      {
                        int v658 = *(_DWORD *)(*((void *)this + 4) + 68);
                        if (v658 < 0 && (uint64_t v659 = v658 & 0x7FFFFFFF, v659 < *(_DWORD *)(v351 + 432))) {
                          v660 = *(void **)(*(void *)(v351 + 424) + 8 * v659);
                        }
                        else {
                          v660 = 0;
                        }
                        uint64_t v661 = *a1;
                        __s1[0] = v660;
                        LODWORD(__s1[1]) = 0;
                        sub_1CC7362A8(v661, (unint64_t *)__s1, v657);
                        uint64_t v662 = *a1;
                        LODWORD(v1839) = v352;
                        LODWORD(v1840) = 1;
                        LODWORD(__s1[0]) = v655;
                        LODWORD(v1829) = 0;
                        DWORD2(v1829) = *(_DWORD *)(*(void *)(v663 + 32) + 4);
                        LODWORD(v1831) = 0;
                        int v226 = *(void (**)(void))(*(void *)v662 + 32);
                        goto LABEL_886;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (**(_WORD **)(v356 + 16) != 68) {
        goto LABEL_840;
      }
      uint64_t v357 = *a1;
      LODWORD(__s1[0]) = v352;
LABEL_1918:
      LODWORD(__s1[1]) = 1;
      goto LABEL_1919;
    case 128:
    case 129:
      uint64_t v423 = *a1;
      *(void *)(v423 + 40) = *((void *)this + 3);
      *(void *)(v423 + 48) = this;
      uint64_t v424 = *(void *)(*(void *)(*a1 + 8) + 40);
      uint64_t v425 = (unsigned int *)*((void *)this + 4);
      uint64_t v426 = v425[1];
      if ((v426 & 0x80000000) != 0
        && (v426 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v424 + 432))
      {
        uint64_t v427 = *(void *)(*(void *)(v424 + 424) + 8 * (v426 & 0x7FFFFFFF));
      }
      else
      {
        uint64_t v427 = 0;
      }
      unsigned int v428 = v425[9];
      *(void *)&long long v1821 = v427;
      sub_1CC73C210(v425[17], v424, (uint64_t)__s1);
      if (!(_BYTE)v1829) {
        goto LABEL_537;
      }
      if (LODWORD(__s1[1]) >= 0x41)
      {
        if (__s1[0]) {
          MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
        }
LABEL_537:
        unint64_t v429 = 0;
        char v430 = 1;
      }
      else
      {
        unint64_t v429 = (uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1]);
        if (!v429)
        {
          uint64_t v64 = *a1;
          LODWORD(v1839) = v426;
          LODWORD(v1840) = 1;
          LODWORD(__s1[0]) = v428;
          goto LABEL_885;
        }
        char v430 = 0;
      }
      if ((v426 & 0x80000000) != 0) {
        uint64_t v431 = (uint64_t *)(*(void *)(v424 + 24) + 16 * (v426 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v431 = (uint64_t *)(*(void *)(v424 + 272) + 8 * v426);
      }
      uint64_t v432 = *v431;
      if (!*v431) {
        goto LABEL_543;
      }
      while ((*(unsigned char *)(v432 + 3) & 1) != 0)
      {
        uint64_t v432 = *(void *)(v432 + 24);
        if (!v432) {
          goto LABEL_543;
        }
      }
      uint64_t v521 = (void *)(v432 + 8);
      uint64_t v520 = *(void *)(v432 + 8);
LABEL_673:
      if (sub_1CBAAF488(**(_WORD **)(v520 + 16), *(_DWORD **)(v520 + 32), v424)) {
        goto LABEL_840;
      }
      while (1)
      {
        uint64_t v432 = *(void *)(v432 + 24);
        if (!v432) {
          break;
        }
        if ((*(unsigned char *)(v432 + 3) & 1) == 0)
        {
          uint64_t v520 = *(void *)(v432 + 8);
          if (v520 != *v521)
          {
            uint64_t v521 = (void *)(v432 + 8);
            goto LABEL_673;
          }
        }
      }
LABEL_543:
      unint64_t v434 = sub_1CB8F1DC4((unint64_t *)&v1821);
      if (v433 == 1) {
      *(void *)&long long v1819 = (8 * (v434 >> 1)) | 1;
      }
      if (v430) {
        goto LABEL_552;
      }
      uint64_t v435 = v1821;
      if ((void)v1821 != 257) {
        goto LABEL_551;
      }
      uint64_t v437 = sub_1CB8F1DC4((unint64_t *)&v1819);
      if (v436 == 1) {
      if (v429 == v437)
      }
        goto LABEL_1470;
      uint64_t v435 = v1821;
LABEL_551:
      if (v435 == 513)
      {
        unint64_t v1020 = sub_1CB8F1DC4((unint64_t *)&v1819);
        if (v1019 == 1) {
        if (v429 >= v1020)
        }
        {
LABEL_1470:
          v1021 = (void *)*a1;
          LODWORD(__s1[0]) = *(_DWORD *)(*((void *)this + 4) + 36);
          LODWORD(v1829) = 0;
          sub_1CC7363F0(v1021, v1819, (int *)__s1);
          uint64_t v1022 = *a1;
          uint64_t v1023 = **((unsigned __int16 **)this + 2);
          unint64_t v1839 = v1819;
          LODWORD(v1840) = 0;
          LODWORD(__s1[0]) = *(_DWORD *)(*(void *)(v1024 + 32) + 36);
          LODWORD(v1829) = 0;
          v1824 = (void *)v1819;
          LODWORD(v1825) = 0;
          uint64_t v1026 = sub_1CB8F1DC4((unint64_t *)&v1819);
          if (v1025 == 1) {
          *((void *)&v1829 + 1) = sub_1CC7362A8(v1022, (unint64_t *)&v1824, v429 - v1026);
          }
          unint64_t v1830 = v1027;
          LODWORD(v1831) = 1;
          v1028 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v1022 + 32))(v1022, v1023, &v1839, 1, __s1, 2, 0);
          uint64_t v1030 = *a1;
          if (**((_WORD **)this + 2) == 128) {
            uint64_t v1031 = 126;
          }
          else {
            uint64_t v1031 = 124;
          }
          LODWORD(v1839) = v426;
          LODWORD(v1840) = 1;
          __s1[0] = v1028;
          __s1[1] = v1029;
          LODWORD(v1829) = 1;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v1030 + 32))(v1030, v1031, &v1839, 1, __s1, 1, 0);
          goto LABEL_887;
        }
      }
LABEL_552:
      if ((v426 & 0x80000000) != 0 && (unint64_t v438 = v426 & 0x7FFFFFFF, v438 < *(unsigned int *)(v424 + 432))) {
LABEL_698:
      }
        uint64_t v531 = *(void **)(*(void *)(v424 + 424) + 8 * v438);
      else {
LABEL_3023:
      }
        uint64_t v531 = 0;
      __s1[0] = v531;
      v532 = (unint64_t *)__s1;
LABEL_700:
      if (sub_1CBAAF87C(a1, (uint64_t)this, v532)) {
        return 1;
      }
      goto LABEL_840;
    case 134:
      uint64_t v291 = (_DWORD *)*((void *)this + 4);
      unsigned int v292 = v291[17];
      if ((v292 & 0x80000000) == 0) {
        goto LABEL_840;
      }
      uint64_t v293 = *(void *)(*(void *)(*a1 + 8) + 40);
      if ((v292 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v293 + 432)) {
        goto LABEL_840;
      }
      int v1795 = v291[1];
      int SwappedPredicate = v291[12];
      unsigned int v295 = v291[25];
      *(void *)&long long v1821 = *(void *)(*(void *)(v293 + 424) + 8 * (v292 & 0x7FFFFFFF));
      if ((v1821 & 1) == 0) {
        goto LABEL_840;
      }
      unsigned int v297 = sub_1CB8F1DC4((unint64_t *)&v1821);
      if (v296 == 1) {
      sub_1CC73C210(v292, v293, (uint64_t)__s1);
      }
      if (!(_BYTE)v1829) {
        goto LABEL_375;
      }
      char v579 = (char)__s1[1];
      if (LODWORD(__s1[1]) >= 0x41) {
        goto LABEL_3218;
      }
      uint64_t v580 = __s1[0];
      sub_1CC73C210(v295, v293, (uint64_t)__s1);
      if (!(_BYTE)v1829) {
        goto LABEL_375;
      }
      if (LODWORD(__s1[1]) < 0x41)
      {
        uint64_t v581 = (uint64_t)((void)v580 << -v579) >> -v579;
        uint64_t v582 = (uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1]);
        LODWORD(__s1[1]) = v297;
        if (v297 > 0x40) {
          operator new[]();
        }
        if (v297)
        {
          unint64_t v583 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v297;
          __s1[0] = (void *)(v583 & v581);
        }
        else
        {
          unint64_t v583 = 0;
          __s1[0] = 0;
        }
        LODWORD(v1840) = v297;
        unint64_t v1839 = v583 & v582;
        if (SwappedPredicate == 32)
        {
          if (LODWORD(__s1[1]) > 0x40) {
            BOOL v584 = memcmp(__s1[0], (const void *)v1839, (((unint64_t)LODWORD(__s1[1]) + 63) >> 3) & 0x3FFFFFF8) == 0;
          }
          else {
            BOOL v584 = __s1[0] == (void *)v1839;
          }
          unsigned int v585 = v584;
        }
        else
        {
          switch(SwappedPredicate)
          {
            case '!':
              if (LODWORD(__s1[1]) > 0x40) {
                BOOL v1535 = memcmp(__s1[0], (const void *)v1839, (((unint64_t)LODWORD(__s1[1]) + 63) >> 3) & 0x3FFFFFF8) == 0;
              }
              else {
                BOOL v1535 = __s1[0] == (void *)v1839;
              }
              int v1536 = v1535;
              unsigned int v585 = v1536 ^ 1;
              break;
            case '""':
              int v1669 = llvm::APInt::compare((llvm::APInt *)__s1, (const llvm::APInt *)&v1839);
              goto LABEL_3224;
            case '#':
              int v1670 = llvm::APInt::compare((llvm::APInt *)__s1, (const llvm::APInt *)&v1839);
              goto LABEL_3226;
            case '$':
              unsigned int v1477 = llvm::APInt::compare((llvm::APInt *)__s1, (const llvm::APInt *)&v1839);
              goto LABEL_2255;
            case '%':
              int v1671 = llvm::APInt::compare((llvm::APInt *)__s1, (const llvm::APInt *)&v1839);
              goto LABEL_3229;
            case '&':
              int v1669 = llvm::APInt::compareSigned((llvm::APInt *)__s1, (const llvm::APInt *)&v1839);
LABEL_3224:
              unsigned int v585 = v1669 > 0;
              break;
            case '\'':
              int v1670 = llvm::APInt::compareSigned((llvm::APInt *)__s1, (const llvm::APInt *)&v1839);
LABEL_3226:
              unsigned int v585 = v1670 >= 0;
              break;
            case '(':
              unsigned int v1477 = llvm::APInt::compareSigned((llvm::APInt *)__s1, (const llvm::APInt *)&v1839);
LABEL_2255:
              unsigned int v585 = v1477 >> 31;
              break;
            case ')':
              int v1671 = llvm::APInt::compareSigned((llvm::APInt *)__s1, (const llvm::APInt *)&v1839);
LABEL_3229:
              unsigned int v585 = v1671 < 1;
              break;
            default:
              if (LODWORD(__s1[1]) >= 0x41) {
                goto LABEL_3218;
              }
              goto LABEL_375;
          }
        }
        unint64_t v586 = v585;
        if (LODWORD(__s1[1]) >= 0x41 && __s1[0]) {
          MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
        }
        uint64_t v587 = *a1;
        *(void *)(v587 + 40) = *((void *)this + 3);
        *(void *)(v587 + 48) = this;
        uint64_t v357 = *a1;
        LODWORD(__s1[0]) = v1795;
        LODWORD(__s1[1]) = 1;
        unint64_t v588 = v586;
        goto LABEL_755;
      }
LABEL_3218:
      if (__s1[0]) {
        MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
      }
LABEL_375:
      sub_1CC73C210(v292, v293, (uint64_t)__s1);
      if (!(_BYTE)v1829) {
        goto LABEL_376;
      }
      if (LODWORD(__s1[1]) >= 0x41)
      {
        if (__s1[0]) {
          MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
        }
LABEL_376:
        char v298 = 1;
        unsigned int v299 = v295;
        unsigned int v300 = v295;
      }
      else
      {
        int SwappedPredicate = llvm::CmpInst::getSwappedPredicate(SwappedPredicate);
        char v298 = 0;
        unsigned int v299 = v292;
        unsigned int v300 = v292;
        unsigned int v292 = v295;
      }
      sub_1CC73C210(v299, v293, (uint64_t)__s1);
      if (!(_BYTE)v1829) {
        goto LABEL_378;
      }
      unsigned int v1783 = v300;
      if (LODWORD(__s1[1]) >= 0x41)
      {
        if (__s1[0]) {
          MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
        }
LABEL_378:
        sub_1CC73C210(v299, v293, (uint64_t)__s1);
        if (!(_BYTE)v1829)
        {
LABEL_379:
          if (v298) {
            goto LABEL_840;
          }
          uint64_t v301 = *a1;
          *(void *)(v301 + 40) = *((void *)this + 3);
          *(void *)(v301 + 48) = this;
          uint64_t v302 = *a1;
          LODWORD(v1824) = v1795;
          LODWORD(v1825) = 1;
          LODWORD(__s1[0]) = v292;
          LODWORD(v1829) = 0;
          LODWORD(v1839) = v300;
          DWORD2(v1840) = 0;
          sub_1CC73933C(v302, SwappedPredicate, (uint64_t)&v1824, (long long *)__s1, (long long *)&v1839);
          goto LABEL_887;
        }
        if (LODWORD(__s1[1]) < 0x41)
        {
          if ((SwappedPredicate & 0xFFFFFFFE) != 0x20) {
            goto LABEL_379;
          }
          v722 = (uint64_t *)((v292 & 0x80000000) != 0
                           ? *(void *)(v293 + 24) + 16 * (v292 & 0x7FFFFFFF) + 8
                           : *(void *)(v293 + 272) + 8 * v292);
          uint64_t v723 = *v722;
          if (!v723) {
            goto LABEL_379;
          }
          while ((*(unsigned char *)(v723 + 3) & 1) != 0)
          {
            uint64_t v723 = *(void *)(v723 + 24);
            if (!v723) {
              goto LABEL_379;
            }
          }
          uint64_t v916 = (uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1]);
          while (1)
          {
            uint64_t v723 = *(void *)(v723 + 24);
            if (!v723) {
              break;
            }
            if ((*(unsigned char *)(v723 + 3) & 1) == 0) {
              goto LABEL_379;
            }
          }
          v1060 = (uint64_t *)((v292 & 0x80000000) != 0
                            ? *(void *)(v293 + 24) + 16 * (v292 & 0x7FFFFFFF) + 8
                            : *(void *)(v293 + 272) + 8 * v292);
          uint64_t v1061 = *v1060;
          if (!v1061) {
            goto LABEL_379;
          }
          if ((*(unsigned char *)(v1061 + 3) & 1) == 0)
          {
            uint64_t v1061 = *(void *)(v1061 + 24);
            if (!v1061 || (*(unsigned char *)(v1061 + 3) & 1) == 0) {
              goto LABEL_379;
            }
          }
          uint64_t v1062 = *(void *)(v1061 + 8);
          if (!v1062 || **(_WORD **)(v1062 + 16) != 45 || *(_DWORD *)(v1062 + 40) != 3) {
            goto LABEL_379;
          }
          uint64_t v1063 = *(void *)(v1062 + 32);
          int v1064 = *(_DWORD *)(v1063 + 36);
          sub_1CC73C210(*(_DWORD *)(v1063 + 68), v293, (uint64_t)__s1);
          if ((_BYTE)v1829)
          {
            if (LODWORD(__s1[1]) < 0x41)
            {
              uint64_t v1065 = (uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1]);
LABEL_1875:
              uint64_t v1255 = *a1;
              LODWORD(v1839) = v1795;
              LODWORD(v1840) = 1;
              if (v1064 < 0 && (v1064 & 0x7FFFFFFFu) < *(_DWORD *)(v293 + 432)) {
                v1256 = *(void **)(*(void *)(v293 + 424) + 8 * (v1064 & 0x7FFFFFFF));
              }
              else {
                v1256 = 0;
              }
              v1824 = v1256;
              LODWORD(v1825) = 0;
              uint64_t v1257 = sub_1CC7362A8(v1255, (unint64_t *)&v1824, v916 - v1065);
              LODWORD(__s1[0]) = SwappedPredicate;
              LODWORD(v1829) = 2;
              DWORD2(v1829) = v1064;
              LODWORD(v1831) = 0;
              uint64_t v1832 = v1257;
              uint64_t v1833 = v1258;
              *(_DWORD *)v1834 = 1;
              int v226 = *(void (**)(void))(*(void *)v1255 + 32);
              goto LABEL_886;
            }
            if (__s1[0]) {
              MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
            }
          }
          sub_1CC73C210(*(_DWORD *)(*(void *)(v1062 + 32) + 36), v293, (uint64_t)__s1);
          if (!(_BYTE)v1829) {
            goto LABEL_379;
          }
          if (LODWORD(__s1[1]) < 0x41)
          {
            uint64_t v1065 = (uint64_t)__s1[0] << -LOBYTE(__s1[1]) >> -LOBYTE(__s1[1]);
            int v1064 = *(_DWORD *)(*(void *)(v1062 + 32) + 68);
            goto LABEL_1875;
          }
        }
        if (__s1[0]) {
          MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
        }
        goto LABEL_379;
      }
      uint64_t v715 = -(uint64_t)LODWORD(__s1[1]);
      uint64_t v716 = (uint64_t)__s1[0] << -LOBYTE(__s1[1]);
      unsigned int v718 = sub_1CB8F1DC4((unint64_t *)&v1821);
      if (v717 == 1) {
      LODWORD(v1840) = v718;
      }
      if (v718 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v1839);
      }
      unint64_t v719 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v718;
      if (!v718) {
        unint64_t v719 = 0;
      }
      unint64_t v1839 = v719 & (v716 >> v715);
      unsigned int v300 = v1783;
      if ((SwappedPredicate & 0xFFFFFFFE) != 0x20) {
        goto LABEL_1321;
      }
      unsigned int v720 = (uint64_t *)((v292 & 0x80000000) != 0
                       ? *(void *)(v293 + 24) + 16 * (v292 & 0x7FFFFFFF) + 8
                       : *(void *)(v293 + 272) + 8 * v292);
      uint64_t v721 = *v720;
      if (!v721) {
        goto LABEL_1321;
      }
      while ((*(unsigned char *)(v721 + 3) & 1) != 0)
      {
        uint64_t v721 = *(void *)(v721 + 24);
        if (!v721) {
          goto LABEL_1321;
        }
      }
      while (1)
      {
        uint64_t v721 = *(void *)(v721 + 24);
        if (!v721) {
          break;
        }
        if ((*(unsigned char *)(v721 + 3) & 1) == 0) {
          goto LABEL_1321;
        }
      }
      if ((v292 & 0x80000000) != 0) {
        v1033 = (uint64_t *)(*(void *)(v293 + 24) + 16 * (v292 & 0x7FFFFFFF) + 8);
      }
      else {
        v1033 = (uint64_t *)(*(void *)(v293 + 272) + 8 * v292);
      }
      uint64_t v1034 = *v1033;
      if (v1034)
      {
        if ((*(unsigned char *)(v1034 + 3) & 1) != 0
          || (uint64_t v1034 = *(void *)(v1034 + 24)) != 0 && (*(unsigned char *)(v1034 + 3) & 1) != 0)
        {
          uint64_t v1035 = *(void *)(v1034 + 8);
          if (v1035)
          {
            if (**(_WORD **)(v1035 + 16) == 126 && *(_DWORD *)(v1035 + 40) == 2)
            {
              int v1526 = *(_DWORD *)(*(void *)(v1035 + 32) + 36);
              int v1527 = v1526;
              if (v1526 < 0 && (v1526 & 0x7FFFFFFFu) < *(_DWORD *)(v293 + 432)) {
                v1528 = *(void **)(*(void *)(v293 + 424) + 8 * (v1526 & 0x7FFFFFFF));
              }
              else {
                v1528 = 0;
              }
              __s1[0] = v1528;
              unsigned int v1040 = sub_1CB8F1DC4((unint64_t *)__s1);
              if (v1529 == 1) {
              unsigned int v300 = v1783;
              }
              int v1039 = v1527;
              goto LABEL_1502;
            }
          }
        }
      }
      if ((v292 & 0x80000000) != 0) {
        v1036 = (uint64_t *)(*(void *)(v293 + 24) + 16 * (v292 & 0x7FFFFFFF) + 8);
      }
      else {
        v1036 = (uint64_t *)(*(void *)(v293 + 272) + 8 * v292);
      }
      uint64_t v1037 = *v1036;
      if (!v1037) {
        goto LABEL_1501;
      }
      if (*(unsigned char *)(v1037 + 3)) {
        goto LABEL_1499;
      }
      uint64_t v1037 = *(void *)(v1037 + 24);
      if (!v1037) {
        goto LABEL_2918;
      }
      unsigned int v300 = v1783;
      if ((*(unsigned char *)(v1037 + 3) & 1) == 0) {
        goto LABEL_1501;
      }
LABEL_1499:
      uint64_t v1038 = *(void *)(v1037 + 8);
      if (v1038 && **(_WORD **)(v1038 + 16) == 124)
      {
        if (*(_DWORD *)(v1038 + 40) == 2)
        {
          int v1604 = *(_DWORD *)(*(void *)(v1038 + 32) + 36);
          if (v1604 < 0 && (v1604 & 0x7FFFFFFFu) < *(_DWORD *)(v293 + 432)) {
            v1605 = *(void **)(*(void *)(v293 + 424) + 8 * (v1604 & 0x7FFFFFFF));
          }
          else {
            v1605 = 0;
          }
          __s1[0] = v1605;
          unsigned int v1040 = sub_1CB8F1DC4((unint64_t *)__s1);
          if (v1606 == 1) {
          int v1607 = v1840;
          }
          unsigned int v1043 = v1607 - sub_1CBAB1CB8((llvm::APInt *)&v1839) + 1;
          int v1039 = v1604;
          unsigned int v300 = v1783;
LABEL_1505:
          if (v1040)
          {
            int v1044 = v1039;
            unsigned int v915 = v1840;
            if (v1040 >= v1840)
            {
              unsigned int v300 = v1783;
            }
            else
            {
              unsigned int v300 = v1783;
              if (v1040 >= v1043)
              {
                uint64_t v1045 = *a1;
                *(void *)(v1045 + 40) = *((void *)this + 3);
                *(void *)(v1045 + 48) = this;
                v1046 = (void *)*a1;
                v1824 = (void *)((8 * v1040) | 1);
                LODWORD(v1825) = 0;
                LODWORD(__s1[0]) = v1044;
                LODWORD(v1829) = 0;
                sub_1CC738034(v1046, 126, (unint64_t *)&v1824, (int *)__s1);
                uint64_t v1048 = v1047;
                uint64_t v1049 = *a1;
                __s1[0] = (void *)((8 * v1040) | 1);
                LODWORD(__s1[1]) = 0;
                if (v1040 > 0x40)
                {
                  if (v1840 != v1040) {
                    operator new[]();
                  }
                  sub_1CD0463BC((uint64_t)&v1824, (uint64_t)&v1839);
                  LOBYTE(v1040) = v1825;
                  if (v1825 > 0x40)
                  {
                    unint64_t v1053 = *(void *)v1824;
                    goto LABEL_1513;
                  }
                  unint64_t v1052 = (unint64_t)v1824;
                }
                else
                {
                  if (v1840 >= 0x41) {
                    v1050 = (unint64_t *)v1839;
                  }
                  else {
                    v1050 = &v1839;
                  }
                  unint64_t v1051 = *v1050;
                  LODWORD(v1825) = v1040;
                  unint64_t v1052 = v1051 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v1040);
                  v1824 = (void *)v1052;
                }
                unint64_t v1053 = (uint64_t)(v1052 << -(char)v1040) >> -(char)v1040;
LABEL_1513:
                sub_1CC7362A8(v1049, (unint64_t *)__s1, v1053);
                uint64_t v1055 = v1054;
                if (v1825 >= 0x41 && v1824) {
                  MEMORY[0x1D25D9CB0](v1824, 0x1000C8000313F17);
                }
                uint64_t v1056 = *a1;
                LODWORD(v1824) = v1795;
                LODWORD(v1825) = 1;
                int v1057 = *(_DWORD *)(*(void *)(v1048 + 32) + 4);
                int v1058 = *(_DWORD *)(*(void *)(v1055 + 32) + 4);
                LODWORD(__s1[0]) = SwappedPredicate;
                LODWORD(v1829) = 2;
                DWORD2(v1829) = v1057;
                LODWORD(v1831) = 0;
                LODWORD(v1832) = v1058;
                *(_DWORD *)v1834 = 0;
                v1059 = *(void (**)(void))(*(void *)v1056 + 32);
LABEL_1515:
                v1059();
                llvm::MachineInstr::eraseFromParent(this);
                if (v1840 < 0x41) {
                  return 1;
                }
LABEL_2302:
                v724 = (void *)v1839;
                if (!v1839) {
                  return 1;
                }
                goto LABEL_1038;
              }
            }
          }
          else
          {
LABEL_1321:
            unsigned int v915 = v1840;
          }
          if (v915 >= 0x41 && v1839) {
            MEMORY[0x1D25D9CB0](v1839, 0x1000C8000313F17);
          }
          goto LABEL_378;
        }
LABEL_2918:
        int v1039 = 0;
        unsigned int v1040 = 0;
        unsigned int v300 = v1783;
      }
      else
      {
LABEL_1501:
        int v1039 = 0;
        unsigned int v1040 = 0;
      }
LABEL_1502:
      int v1041 = v1840;
      if (v1840 > 0x40)
      {
        int v1779 = v1039;
        int v1042 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v1839);
        int v1039 = v1779;
      }
      else
      {
        int v1042 = v1840 + __clz(v1839) - 64;
      }
      unsigned int v1043 = v1041 - v1042;
      goto LABEL_1505;
    case 136:
      uint64_t v64 = *a1;
      uint64_t v303 = *(void *)(*(void *)(*a1 + 8) + 40);
      uint64_t v304 = (_DWORD *)*((void *)this + 4);
      uint64_t v305 = v304[9];
      if ((v305 & 0x80000000) != 0) {
        uint64_t v306 = (uint64_t *)(*(void *)(v303 + 24) + 16 * (v305 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v306 = (uint64_t *)(*(void *)(v303 + 272) + 8 * v305);
      }
      uint64_t v307 = v304[17];
      uint64_t v308 = v304[25];
      uint64_t v309 = *v306;
      if ((*(unsigned char *)(v309 + 3) & 1) == 0) {
        uint64_t v309 = *(void *)(v309 + 24);
      }
      if (v307 == v308 || **(_WORD **)(*(void *)(v309 + 8) + 16) == 68) {
        goto LABEL_2313;
      }
      if ((v307 & 0x80000000) != 0) {
        uint64_t v310 = (uint64_t *)(*(void *)(v303 + 24) + 16 * (v307 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v310 = (uint64_t *)(*(void *)(v303 + 272) + 8 * v307);
      }
      uint64_t v311 = *v310;
      if ((*(unsigned char *)(v311 + 3) & 1) == 0) {
        uint64_t v311 = *(void *)(v311 + 24);
      }
      if (**(_WORD **)(*(void *)(v311 + 8) + 16) == 68)
      {
        LODWORD(v307) = v304[25];
      }
      else
      {
        if ((v308 & 0x80000000) != 0) {
          int v312 = (uint64_t *)(*(void *)(v303 + 24) + 16 * (v308 & 0x7FFFFFFF) + 8);
        }
        else {
          int v312 = (uint64_t *)(*(void *)(v303 + 272) + 8 * v308);
        }
        uint64_t v313 = *v312;
        if ((*(unsigned char *)(v313 + 3) & 1) == 0) {
          uint64_t v313 = *(void *)(v313 + 24);
        }
        if (**(_WORD **)(*(void *)(v313 + 8) + 16) != 68)
        {
          sub_1CC73C210(v305, *(void *)(*(void *)(*a1 + 8) + 40), (uint64_t)__s1);
          if (!(_BYTE)v1829) {
            goto LABEL_398;
          }
          if (LODWORD(__s1[1]) >= 0x41)
          {
            if (__s1[0]) {
              MEMORY[0x1D25D9CB0](__s1[0], 0x1000C8000313F17);
            }
LABEL_398:
            if (**((_WORD **)this + 2) != 136) {
              goto LABEL_840;
            }
            unsigned int v314 = (_DWORD *)*((void *)this + 4);
            int v315 = v314[1];
            int v316 = v314[9];
            if (v315 < 0 && (v315 & 0x7FFFFFFFu) < *(_DWORD *)(v303 + 432)) {
              uint64_t v317 = *(void *)(*(void *)(v303 + 424) + 8 * (v315 & 0x7FFFFFFF));
            }
            else {
              uint64_t v317 = 0;
            }
            if ((v316 & 0x80000000) == 0) {
              goto LABEL_840;
            }
            uint64_t v318 = v316 & 0x7FFFFFFF;
            if (v318 >= *(_DWORD *)(v303 + 432)) {
              goto LABEL_840;
            }
            if (*(void *)(*(void *)(v303 + 424) + 8 * v318) != 9) {
              goto LABEL_840;
            }
            unint64_t v319 = *(int **)(*(void *)(v303 + 24) + 16 * v318 + 8);
            if (!v319) {
              goto LABEL_840;
            }
            uint64_t v320 = *a1;
            uint64_t v321 = *((unsigned __int16 *)this + 22);
            int v322 = v314[17];
            int v323 = v314[25];
            uint64_t v324 = v319;
            int v325 = *v319;
            if ((*v319 & 0x1000000) == 0) {
              goto LABEL_410;
            }
            uint64_t v324 = v319;
            do
            {
              uint64_t v324 = (int *)*((void *)v324 + 3);
              if (!v324) {
                goto LABEL_412;
              }
            }
            while ((*((unsigned char *)v324 + 3) & 1) != 0);
LABEL_410:
            while (1)
            {
              uint64_t v324 = (int *)*((void *)v324 + 3);
              if (!v324) {
                break;
              }
              if ((*((unsigned char *)v324 + 3) & 1) == 0) {
                goto LABEL_412;
              }
            }
            long long v864 = v319;
            if ((v325 & 0x1000000) != 0
              || (v864 = (int *)*((void *)v319 + 3), uint64_t v326 = v319, v864)
              && (uint64_t v326 = v319, (*((unsigned char *)v864 + 3) & 1) != 0))
            {
              uint64_t v865 = *((void *)v864 + 1);
              if (v865 && **(_WORD **)(v865 + 16) == 66 && *(_DWORD *)(v865 + 40) == 3)
              {
                uint64_t v866 = *(void *)(v865 + 32);
                int v867 = *(_DWORD *)(v866 + 36);
                LODWORD(v866) = *(_DWORD *)(v866 + 68);
                LODWORD(v1824) = v315;
                LODWORD(v1825) = 1;
                LODWORD(__s1[0]) = v867;
                LODWORD(v1829) = 0;
                DWORD2(v1829) = v322;
                LODWORD(v1831) = 0;
                *(void *)&long long v1821 = v317;
                DWORD2(v1821) = 0;
                LODWORD(v1839) = v866;
                DWORD2(v1840) = 0;
                LODWORD(v1841) = v322;
                int v1843 = 0;
                LODWORD(v1844) = v323;
                int v1846 = 0;
                uint64_t v1832 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v320 + 32))(v320, 136, &v1821, 1, &v1839, 3, v321 | 0x100000000);
                uint64_t v1833 = v868;
                *(_DWORD *)v1834 = 1;
                goto LABEL_1262;
              }
LABEL_412:
              uint64_t v326 = v319;
              if ((v325 & 0x1000000) != 0)
              {
                uint64_t v326 = v319;
                do
                {
                  uint64_t v326 = (int *)*((void *)v326 + 3);
                  if (!v326) {
                    goto LABEL_840;
                  }
                }
                while ((*((unsigned char *)v326 + 3) & 1) != 0);
              }
            }
            while (1)
            {
              uint64_t v326 = (int *)*((void *)v326 + 3);
              if (!v326) {
                break;
              }
              if ((*((unsigned char *)v326 + 3) & 1) == 0) {
                goto LABEL_840;
              }
            }
            if ((v325 & 0x1000000) == 0)
            {
              unint64_t v319 = (int *)*((void *)v319 + 3);
              if (!v319 || (*((unsigned char *)v319 + 3) & 1) == 0) {
                goto LABEL_840;
              }
            }
            uint64_t v884 = *((void *)v319 + 1);
            if (!v884 || **(_WORD **)(v884 + 16) != 65 || *(_DWORD *)(v884 + 40) != 3) {
              goto LABEL_840;
            }
            uint64_t v885 = *(void *)(v884 + 32);
            int v886 = *(_DWORD *)(v885 + 36);
            LODWORD(v885) = *(_DWORD *)(v885 + 68);
            LODWORD(v1824) = v315;
            LODWORD(v1825) = 1;
            LODWORD(__s1[0]) = v886;
            LODWORD(v1829) = 0;
            *(void *)&long long v1821 = v317;
            DWORD2(v1821) = 0;
            LODWORD(v1839) = v885;
            DWORD2(v1840) = 0;
            LODWORD(v1841) = v322;
            int v1843 = 0;
            LODWORD(v1844) = v323;
            int v1846 = 0;
            *((void *)&v1829 + 1) = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v320 + 32))(v320, 136, &v1821, 1, &v1839, 3, v321 | 0x100000000);
            unint64_t v1830 = v887;
            LODWORD(v1831) = 1;
            LODWORD(v1832) = v323;
            *(_DWORD *)v1834 = 0;
LABEL_1262:
            int v226 = *(void (**)(void))(*(void *)v320 + 32);
            goto LABEL_886;
          }
          if ((uint64_t)__s1[0] << -(uint64_t)LODWORD(__s1[1]) >> -(uint64_t)LODWORD(__s1[1])) {
            int v65 = v307;
          }
          else {
            int v65 = v308;
          }
          uint64_t v64 = *a1;
          LODWORD(v1839) = *(_DWORD *)(*((void *)this + 4) + 4);
          LODWORD(v1840) = 1;
LABEL_884:
          LODWORD(__s1[0]) = v65;
LABEL_885:
          LODWORD(v1829) = 0;
          int v226 = *(void (**)(void))(*(void *)v64 + 32);
LABEL_886:
          v226();
          goto LABEL_887;
        }
      }
LABEL_2313:
      LODWORD(v1839) = v304[1];
      LODWORD(v1840) = 1;
      LODWORD(__s1[0]) = v307;
      goto LABEL_885;
    default:
      if (v4 != 90)
      {
        if (v4 != 96) {
          goto LABEL_840;
        }
        uint64_t v1792 = *(void *)(*a1 + 8);
        uint64_t v82 = *(void *)(v1792 + 40);
        size_t v1781 = *((void *)this + 4);
        uint64_t v83 = *(unsigned int *)(v1781 + 4);
        if ((v83 & 0x80000000) != 0
          && (v83 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v82 + 432))
        {
          unint64_t v84 = *(void *)(*(void *)(v82 + 424) + 8 * (v83 & 0x7FFFFFFF));
        }
        else
        {
          unint64_t v84 = 0;
        }
        uint64_t v86 = (unint64_t *)((char *)this + 48);
        unint64_t v85 = *((void *)this + 6);
        if (v85 < 8)
        {
          uint64_t v87 = 0;
          goto LABEL_1091;
        }
        if ((v85 & 7) != 0)
        {
          uint64_t v87 = 0;
          if ((*((void *)this + 6) & 7) == 3)
          {
            uint64_t v88 = (int *)(v85 & 0xFFFFFFFFFFFFFFF8);
            if ((v85 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              uint64_t v91 = *v88;
              uint64_t v90 = (char *)(v88 + 2);
              uint64_t v89 = v91;
              if (v91)
              {
                unint64_t v92 = &v90[8 * v89];
LABEL_1478:
                uint64_t v87 = v90;
                while ((*(_WORD *)(*(void *)v87 + 36) & 0xF00) == 0)
                {
                  v87 += 8;
                  if (v87 == v92)
                  {
                    uint64_t v87 = v92;
                    break;
                  }
                }
                if (v85 >= 8) {
                  goto LABEL_1483;
                }
LABEL_1091:
                uint64_t v763 = 0;
                uint64_t v764 = 0;
                goto LABEL_1092;
              }
              uint64_t v87 = v90;
            }
          }
LABEL_1483:
          if ((v85 & 7) != 0)
          {
            uint64_t v763 = 0;
            if ((v85 & 7) == 3 && (v1032 = (int *)(v85 & 0xFFFFFFFFFFFFFFF8), (v85 & 0xFFFFFFFFFFFFFFF8) != 0))
            {
              uint64_t v764 = *v1032;
              uint64_t v763 = (char *)(v1032 + 2);
            }
            else
            {
              uint64_t v764 = 0;
            }
          }
          else
          {
            v85 &= 0xFFFFFFFFFFFFFFF8;
            *uint64_t v86 = v85;
            uint64_t v764 = 1;
            uint64_t v763 = (char *)this + 48;
          }
LABEL_1092:
          if (v87 == &v763[8 * v764] || !*(void *)v87)
          {
            uint64_t v766 = v84 & 4;
            unint64_t v765 = v84 & 0xFFFFFFFFFFFFFFF9;
            if ((v84 & 0xFFFFFFFFFFFFFFF9) == 0 || (v84 & 4) == 0)
            {
              if ((v85 & 7) != 0)
              {
                unint64_t v793 = *(void *)((v85 & 0xFFFFFFFFFFFFFFF8) + 8);
              }
              else
              {
                unint64_t v793 = v85 & 0xFFFFFFFFFFFFFFF8;
                *uint64_t v86 = v85 & 0xFFFFFFFFFFFFFFF8;
              }
              uint64_t v795 = *(void *)(v793 + 24);
              unint64_t v794 = v793 + 24;
              uint64_t v796 = (1 << *(unsigned char *)(v794 + 10)) | *(void *)(v794 - 16);
              int v797 = __clz(v796 & -v796);
              if ((v795 & 0xFFFFFFFFFFFFFFF9) != 0)
              {
                unint64_t v799 = (unint64_t)(sub_1CB8F1DC4((unint64_t *)v794) + 7) >> 3;
                if (v798 == 1) {
              }
                }
              else
              {
                unint64_t v799 = -1;
              }
              uint64_t v800 = (*(uint64_t (**)(void))(**(void **)(v1792 + 16) + 168))(*(void *)(v1792 + 16));
              if ((63 - v797) <= 1u && (1 << (63 - v797)) % v799)
              {
                BOOL v801 = v797 == 63 || v799 >= 9;
                if (v801)
                {
                  sub_1CBA1C1AC(v800, (uint64_t)this, v82, (llvm::IntegerType *****)*a1);
                  return 1;
                }
              }
            }
          }
          else
          {
            unint64_t v765 = v84 & 0xFFFFFFFFFFFFFFF9;
            uint64_t v766 = v84 & 4;
          }
          if (!v766 || !v765) {
            goto LABEL_840;
          }
          char v767 = 3;
          if ((v84 & 1) == 0) {
            char v767 = 19;
          }
          unint64_t v768 = v84 >> v767;
          if ((v84 & 2) != 0) {
            unint64_t v769 = (v84 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v768) | 2;
          }
          else {
            unint64_t v769 = v84 & 0x8000000000000000 | (8 * v768) | 1;
          }
          *(void *)&long long v1821 = v769;
          if ((v83 & 0x80000000) != 0) {
            v770 = (uint64_t *)(*(void *)(v82 + 24) + 16 * (v83 & 0x7FFFFFFF) + 8);
          }
          else {
            v770 = (uint64_t *)(*(void *)(v82 + 272) + 8 * v83);
          }
          uint64_t v771 = *v770;
          if (v771
            && ((*(unsigned char *)(v771 + 3) & 1) != 0
             || (uint64_t v771 = *(void *)(v771 + 24)) != 0 && (*(unsigned char *)(v771 + 3) & 1) != 0))
          {
            uint64_t v772 = *(void *)(v771 + 8);
          }
          else
          {
            uint64_t v772 = 0;
          }
          int v774 = sub_1CB8F1DC4((unint64_t *)&v1821);
          if (v773 == 1) {
          int v775 = **(unsigned __int16 **)(v772 + 16);
          }
          if (v775 == 68) {
            goto LABEL_1476;
          }
          if (v775 != 77) {
            goto LABEL_840;
          }
          uint64_t v776 = (*(_DWORD *)(v772 + 40) - 1);
          if ((v776 * v774) > 0x80) {
            goto LABEL_840;
          }
          uint64_t v777 = 0x800000000000000;
          if ((v84 & 2) == 0) {
            uint64_t v777 = 0x8000000000000;
          }
          if ((v777 & v84) != 0) {
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v773);
          }
          unint64_t v778 = 0xFFFFFFFFFFFFFFFFLL >> -(unsigned __int16)(v84 >> 3);
          if (!(unsigned __int16)(v84 >> 3)) {
            unint64_t v778 = 0;
          }
          if (v776)
          {
            uint64_t v779 = 0;
            v780 = (unsigned int *)(*(void *)(v772 + 32) + 36);
            do
            {
              unsigned int v782 = *v780;
              v780 += 8;
              uint64_t v781 = v782;
              if ((v782 & 0x80000000) != 0) {
                int v783 = (uint64_t *)(*(void *)(v82 + 24) + 16 * (v781 & 0x7FFFFFFF) + 8);
              }
              else {
                int v783 = (uint64_t *)(*(void *)(v82 + 272) + 8 * v781);
              }
              uint64_t v784 = *v783;
              if ((*(unsigned char *)(v784 + 3) & 1) == 0) {
                uint64_t v784 = *(void *)(v784 + 24);
              }
              uint64_t v785 = v779 + 1;
              if (**(_WORD **)(*(void *)(v784 + 8) + 16) == 68) {
                uint64_t v786 = ~(1 << v779);
              }
              else {
                uint64_t v786 = -1;
              }
              v778 &= v786;
              uint64_t v779 = v785;
            }
            while (v776 != v785);
          }
          if (!v778)
          {
LABEL_1476:
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)a1[2] + 16))(a1[2], this);
            goto LABEL_887;
          }
          int v787 = __clz(v778);
          if (v787 == 63)
          {
            unsigned int v788 = *(_DWORD *)(*(void *)(v772 + 32) + 36);
            LODWORD(v789) = 1;
          }
          else
          {
            unsigned int v1328 = 64 - v787;
            if (v774 != 8 && v787 == 61) {
              unsigned int v1330 = 3;
            }
            else {
              unsigned int v1330 = 65 - v787;
            }
            if (v1328) {
              uint64_t v789 = v1330;
            }
            else {
              uint64_t v789 = v1328;
            }
            BOOL v1331 = v776 <= v789 || v789 > 8;
            if (v1331 || v789 >= 5 && (v1821 & 0x8000000000000000) != 0) {
              goto LABEL_840;
            }
            unsigned int v1332 = 0;
            unint64_t v1839 = (unint64_t)&v1840 + 8;
            *(void *)&long long v1840 = 0x400000000;
            uint64_t v1333 = 36;
            uint64_t v1334 = v789;
            do
            {
              if (v1332 >= DWORD1(v1840)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(_DWORD *)(v1839 + 4 * v1332) = *(_DWORD *)(*(void *)(v772 + 32) + v1333);
              unsigned int v1332 = v1840 + 1;
              LODWORD(v1840) = v1840 + 1;
              v1333 += 32;
              --v1334;
            }
            while (v1334);
            v1335 = (void *)sub_1CBA5A95C(v789, v1821);
            uint64_t v1336 = *a1;
            v1824 = v1335;
            LODWORD(v1825) = 0;
            v1337 = (int *)v1839;
            int v1338 = v1840;
            __s1[0] = &v1829;
            __s1[1] = (void *)0x800000000;
            if (v1840 >= 9) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v1840)
            {
              uint64_t v1339 = 0;
              uint64_t v1340 = 4 * v1840;
              do
              {
                int v1341 = *v1337++;
                v1342 = (_DWORD *)((char *)&v1829 + v1339);
                _DWORD *v1342 = v1341;
                v1342[4] = 0;
                v1339 += 24;
                v1340 -= 4;
              }
              while (v1340);
              int v1343 = (int)__s1[1];
            }
            else
            {
              int v1343 = 0;
            }
            LODWORD(__s1[1]) = v1343 + v1338;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t))(*(void *)v1336 + 32))(v1336, 77, &v1824, 1);
            uint64_t v1345 = v1344;
            if (__s1[0] != &v1829) {
              free(__s1[0]);
            }
            unsigned int v788 = *(_DWORD *)(*(void *)(v1345 + 32) + 4);
            if ((long long *)v1839 != (long long *)((char *)&v1840 + 8)) {
              free((void *)v1839);
            }
          }
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)a1[2] + 32))(a1[2], this);
          llvm::MachineOperand::setReg(v1781, v788);
          uint64_t v790 = *((void *)this + 6);
          if ((v790 & 7) != 0)
          {
            unint64_t v791 = *(void *)((v790 & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          else
          {
            unint64_t v791 = v790 & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 6) = v790 & 0xFFFFFFFFFFFFFFF8;
          }
          int v792 = (unsigned __int16)(v84 >> 19);
          if ((v84 & 2) == 0) {
            int v792 = v84 >> 19;
          }
          if (v84) {
            int v792 = v84 >> 3;
          }
          __s1[0] = (void *)llvm::MachineFunction::getMachineMemOperand(v1792, v791, *(void *)(v791 + 8), ((unint64_t)((v789 * v792) >> 3) << 6) | 1);
          llvm::MachineInstr::setMemRefs((uint64_t)this, (uint64_t *)v1792, __s1, 1);
          goto LABEL_368;
        }
        v85 &= 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 6) = v85;
        unint64_t v92 = (char *)this + 56;
        uint64_t v90 = (char *)this + 48;
        goto LABEL_1478;
      }
      uint64_t v180 = *(void *)(*a1 + 8);
      uint64_t v181 = *(void *)(v180 + 40);
      uint64_t v182 = *(unsigned int *)(*((void *)this + 4) + 4);
      if ((v182 & 0x80000000) != 0
        && (v182 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v181 + 432))
      {
        uint64_t v183 = *(void *)(*(void *)(v181 + 424) + 8 * (v182 & 0x7FFFFFFF));
      }
      else
      {
        uint64_t v183 = 0;
      }
      int v184 = (unint64_t *)((char *)this + 48);
      unint64_t v185 = *((void *)this + 6);
      if (v185 < 8)
      {
        uint64_t v186 = 0;
        goto LABEL_352;
      }
      if ((v185 & 7) != 0)
      {
        uint64_t v186 = 0;
        if ((*((void *)this + 6) & 7) == 3)
        {
          uint64_t v187 = (int *)(v185 & 0xFFFFFFFFFFFFFFF8);
          if ((v185 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v190 = *v187;
            int v189 = (char *)(v187 + 2);
            uint64_t v188 = v190;
            if (v190)
            {
              unsigned int v191 = &v189[8 * v188];
LABEL_870:
              uint64_t v186 = v189;
              while ((*(_WORD *)(*(void *)v186 + 36) & 0xF00) == 0)
              {
                v186 += 8;
                if (v186 == v191)
                {
                  uint64_t v186 = v191;
                  break;
                }
              }
              if (v185 >= 8) {
                goto LABEL_875;
              }
LABEL_352:
              uint64_t v284 = 0;
              uint64_t v285 = 0;
LABEL_353:
              if ((v186 == &v284[8 * v285] || !*(void *)v186)
                && ((v183 & 0xFFFFFFFFFFFFFFF9) == 0 || (v183 & 4) == 0))
              {
                unint64_t v286 = (uint64_t *)((v182 & 0x80000000) != 0
                                 ? *(void *)(v181 + 24) + 16 * (v182 & 0x7FFFFFFF) + 8
                                 : *(void *)(v181 + 272) + 8 * v182);
                uint64_t v287 = *v286;
                if (!v287) {
                  goto LABEL_3451;
                }
                while ((*(unsigned char *)(v287 + 3) & 1) != 0)
                {
                  uint64_t v287 = *(void *)(v287 + 24);
                  if (!v287) {
                    goto LABEL_3451;
                  }
                }
                while (1)
                {
                  uint64_t v287 = *(void *)(v287 + 24);
                  if (!v287) {
                    break;
                  }
                  if ((*(unsigned char *)(v287 + 3) & 1) == 0) {
                    goto LABEL_3451;
                  }
                }
                v1742 = (uint64_t *)((v182 & 0x80000000) != 0
                                  ? *(void *)(v181 + 24) + 16 * (v182 & 0x7FFFFFFF) + 8
                                  : *(void *)(v181 + 272) + 8 * v182);
                for (uint64_t m = *v1742; (*(unsigned char *)(m + 3) & 1) != 0; uint64_t m = *(void *)(m + 24))
                  ;
                uint64_t v1744 = *(void *)(m + 8);
                if (**(_WORD **)(v1744 + 16) != 119
                  || (int v1754 = *(_DWORD *)(*(void *)(v1744 + 32) + 4), (v1754 & 0x80000000) == 0)
                  || (uint64_t v1755 = v1754 & 0x7FFFFFFF, v1755 >= *(_DWORD *)(v181 + 432))
                  || *(void *)(*(void *)(v181 + 424) + 8 * v1755) != 129)
                {
LABEL_3451:
                  if ((v185 & 7) != 0)
                  {
                    unint64_t v1745 = *(void *)((v185 & 0xFFFFFFFFFFFFFFF8) + 8);
                  }
                  else
                  {
                    unint64_t v1745 = v185 & 0xFFFFFFFFFFFFFFF8;
                    *int v184 = v185 & 0xFFFFFFFFFFFFFFF8;
                  }
                  uint64_t v1747 = *(void *)(v1745 + 24);
                  unint64_t v1746 = v1745 + 24;
                  uint64_t v1748 = (1 << *(unsigned char *)(v1746 + 10)) | *(void *)(v1746 - 16);
                  int v1749 = __clz(v1748 & -v1748);
                  if ((v1747 & 0xFFFFFFFFFFFFFFF9) != 0)
                  {
                    unint64_t v1751 = (unint64_t)(sub_1CB8F1DC4((unint64_t *)v1746) + 7) >> 3;
                    if (v1750 == 1) {
                  }
                    }
                  else
                  {
                    unint64_t v1751 = -1;
                  }
                  uint64_t v1752 = (*(uint64_t (**)(void))(**(void **)(v180 + 16) + 168))(*(void *)(v180 + 16));
                  if ((63 - v1749) <= 1u
                    && (1 << (63 - v1749)) % v1751
                    && (v1749 == 63 || v1751 >= 9))
                  {
                    sub_1CBA1B718(v1752, (unint64_t *)this, v181, (llvm::IntegerType *****)*a1);
                    return 1;
                  }
                }
              }
              goto LABEL_840;
            }
            uint64_t v186 = v189;
          }
        }
LABEL_875:
        if ((v185 & 7) != 0)
        {
          uint64_t v284 = 0;
          if ((v185 & 7) == 3 && (BOOL v647 = (int *)(v185 & 0xFFFFFFFFFFFFFFF8), (v185 & 0xFFFFFFFFFFFFFFF8) != 0))
          {
            uint64_t v285 = *v647;
            uint64_t v284 = (char *)(v647 + 2);
          }
          else
          {
            uint64_t v285 = 0;
          }
        }
        else
        {
          v185 &= 0xFFFFFFFFFFFFFFF8;
          *int v184 = v185;
          uint64_t v285 = 1;
          uint64_t v284 = (char *)this + 48;
        }
        goto LABEL_353;
      }
      v185 &= 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 6) = v185;
      unsigned int v191 = (char *)this + 56;
      int v189 = (char *)this + 48;
      goto LABEL_870;
  }
}

uint64_t sub_1CBAC7E60(unsigned int a1, uint64_t a2)
{
  if ((a1 & 0x80000000) != 0) {
    int v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  else {
    int v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
  }
  uint64_t v5 = *v4;
  if (!*v4) {
    return 1;
  }
  while ((*(unsigned char *)(v5 + 3) & 1) != 0)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5) {
      return 1;
    }
  }
  uint64_t v7 = *(void *)(v5 + 8);
LABEL_8:
  uint64_t v8 = v7;
  int v9 = **(unsigned __int16 **)(v7 + 16);
  if ((v9 - 177) <= 7 && ((1 << (v9 + 79)) & 0x87) != 0)
  {
    uint64_t v13 = *(unsigned int **)(v8 + 32);
    goto LABEL_28;
  }
  if (v9 == 51 || v9 == 336)
  {
    uint64_t v13 = *(unsigned int **)(v8 + 32);
    if (v13[17] != a1 && v13[25] != a1)
    {
LABEL_28:
      if (sub_1CBAC7E60(v13[1], a2)) {
        goto LABEL_24;
      }
    }
  }
  else
  {
    if ((v9 & 0xFFFE) == 0x74)
    {
      uint64_t v11 = *(unsigned int *)(v8 + 40);
      if (!v11) {
        return 0;
      }
      uint64_t v12 = (_DWORD *)(*(void *)(v8 + 32) + 16);
      while (*((unsigned char *)v12 - 16) != 17)
      {
        v12 += 8;
        if (!--v11) {
          goto LABEL_22;
        }
      }
      if (*v12 == 2131) {
        goto LABEL_24;
      }
    }
LABEL_22:
    if (v9 == 163 && *(_DWORD *)(*(void *)(v8 + 32) + 36) != *(_DWORD *)(*(void *)(v8 + 32) + 68))
    {
LABEL_24:
      while (1)
      {
        uint64_t v5 = *(void *)(v5 + 24);
        if (!v5) {
          return 1;
        }
        if ((*(unsigned char *)(v5 + 3) & 1) == 0)
        {
          uint64_t v7 = *(void *)(v5 + 8);
          if (v7 != v8) {
            goto LABEL_8;
          }
        }
      }
    }
  }
  return 0;
}

void *sub_1CBAC7FD0(void *result, size_t a2, int __c)
{
  if (result[2] < a2)
  {
    result[1] = 0;
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  uint64_t v5 = (char *)*result;
  uint64_t v6 = result + 1;
  size_t v7 = result[1];
  if (v7 >= a2) {
    size_t v8 = a2;
  }
  else {
    size_t v8 = result[1];
  }
  if (v8) {
    uint64_t result = memset((void *)*result, __c, v8);
  }
  if (a2 > v7) {
    uint64_t result = memset(&v5[v7], __c, a2 - v7);
  }
  size_t *v6 = a2;
  return result;
}

int *sub_1CBAC8080(int *result, int *a2, uint64_t a3, char a4)
{
  int v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = ((char *)a2 - (char *)v10) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                if (*(a2 - 1) < v10[1])
                {
                  int v45 = *v10;
                  *uint64_t v10 = *(a2 - 2);
                  *(a2 - 2) = v45;
                  int v46 = v10[1];
                  v10[1] = *(a2 - 1);
                  *(a2 - 1) = v46;
                }
                break;
              case 3:
                uint64_t result = sub_1CBAC881C(v10, v10 + 2, a2 - 2);
                break;
              case 4:
                uint64_t result = sub_1CBAC8B10(v10, v10 + 2, v10 + 4, a2 - 2);
                break;
              case 5:
                uint64_t result = sub_1CBAC8B10(v10, v10 + 2, v10 + 4, v10 + 6);
                if (*(a2 - 1) < v10[7])
                {
                  int v47 = v10[6];
                  v10[6] = *(a2 - 2);
                  *(a2 - 2) = v47;
                  int v48 = v10[7];
                  v10[7] = *(a2 - 1);
                  *(a2 - 1) = v48;
                  unsigned int v49 = v10[7];
                  unsigned int v50 = v10[5];
                  if (v49 < v50)
                  {
                    int v51 = v10[6];
                    unsigned int v52 = v10[3];
                    int v53 = v10[4];
                    v10[4] = v51;
                    v10[5] = v49;
                    v10[6] = v53;
                    v10[7] = v50;
                    if (v49 < v52)
                    {
                      unsigned int v54 = v10[1];
                      int v55 = v10[2];
                      v10[2] = v51;
                      v10[3] = v49;
                      v10[4] = v55;
                      v10[5] = v52;
                      if (v49 < v54)
                      {
                        int v56 = *v10;
                        *uint64_t v10 = v51;
                        v10[1] = v49;
                        v10[2] = v56;
                        v10[3] = v54;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            int v57 = v10 + 2;
            BOOL v59 = v10 == a2 || v57 == a2;
            if (a4)
            {
              if (!v59)
              {
                uint64_t v60 = 0;
                int64_t v61 = v10;
                do
                {
                  unsigned int v62 = v61[3];
                  unsigned int v63 = v61[1];
                  int64_t v61 = v57;
                  if (v62 < v63)
                  {
                    int v64 = *v57;
                    unsigned int v65 = v61[1];
                    uint64_t v66 = v60;
                    while (1)
                    {
                      uint64_t v67 = (char *)v10 + v66;
                      int v68 = *(int *)((char *)v10 + v66 + 4);
                      *((_DWORD *)v67 + 2) = *(int *)((char *)v10 + v66);
                      *((_DWORD *)v67 + 3) = v68;
                      if (!v66) {
                        break;
                      }
                      v66 -= 8;
                      if (*((_DWORD *)v67 - 1) <= v65)
                      {
                        int v69 = (int *)((char *)v10 + v66 + 8);
                        goto LABEL_83;
                      }
                    }
                    int v69 = v10;
LABEL_83:
                    *int v69 = v64;
                    v69[1] = v65;
                  }
                  int v57 = v61 + 2;
                  v60 += 8;
                }
                while (v61 + 2 != a2);
              }
            }
            else if (!v59)
            {
              int v98 = v10 + 3;
              do
              {
                unsigned int v99 = v9[3];
                unsigned int v100 = v9[1];
                int v9 = v57;
                if (v99 < v100)
                {
                  uint64_t v101 = *(void *)v57;
                  uint64_t v102 = HIDWORD(*(void *)v9);
                  unsigned int v103 = v98;
                  do
                  {
                    char v104 = v103;
                    unsigned int v105 = *(v103 - 4);
                    *(v103 - 1) = *(v103 - 3);
                    int v106 = *(v103 - 2);
                    v103 -= 2;
                    int *v104 = v106;
                  }
                  while (v105 > v102);
                  *(v103 - 1) = v101;
                  *unsigned int v103 = v102;
                }
                int v57 = v9 + 2;
                v98 += 2;
              }
              while (v9 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v70 = (unint64_t)(v12 - 2) >> 1;
              int64_t v71 = v70;
              do
              {
                int64_t v72 = v71;
                if (v70 >= v71)
                {
                  uint64_t v73 = (2 * v71) | 1;
                  uint64_t v74 = &v10[2 * v73];
                  if (2 * v72 + 2 < v12)
                  {
                    unsigned int v75 = v74[1];
                    unsigned int v76 = v74[3];
                    v74 += 2 * (v75 < v76);
                    if (v75 < v76) {
                      uint64_t v73 = 2 * v72 + 2;
                    }
                  }
                  if (v74[1] >= v10[2 * v72 + 1])
                  {
                    uint64_t v77 = &v10[2 * v72];
                    int v78 = *v77;
                    unsigned int v79 = v77[1];
                    do
                    {
                      uint64_t v80 = v77;
                      uint64_t v77 = v74;
                      int *v80 = *v74;
                      v80[1] = v74[1];
                      if (v70 < v73) {
                        break;
                      }
                      uint64_t v81 = (2 * v73) | 1;
                      uint64_t v74 = &v10[2 * v81];
                      uint64_t v82 = 2 * v73 + 2;
                      if (v82 < v12)
                      {
                        unsigned int v83 = v74[1];
                        uint64_t result = (int *)v74[3];
                        v74 += 2 * (v83 < result);
                        if (v83 < result) {
                          uint64_t v81 = v82;
                        }
                      }
                      uint64_t v73 = v81;
                    }
                    while (v74[1] >= v79);
                    *uint64_t v77 = v78;
                    v77[1] = v79;
                  }
                }
                int64_t v71 = v72 - 1;
              }
              while (v72);
              do
              {
                uint64_t v84 = 0;
                uint64_t v85 = *(void *)v10;
                uint64_t v86 = v10;
                do
                {
                  uint64_t v87 = &v86[2 * v84 + 2];
                  uint64_t v88 = (2 * v84) | 1;
                  uint64_t v89 = 2 * v84 + 2;
                  if (v89 < v12)
                  {
                    unsigned int v90 = v87[1];
                    unsigned int v91 = v87[3];
                    v87 += 2 * (v90 < v91);
                    if (v90 < v91) {
                      uint64_t v88 = v89;
                    }
                  }
                  *uint64_t v86 = *v87;
                  v86[1] = v87[1];
                  uint64_t v86 = v87;
                  uint64_t v84 = v88;
                }
                while (v88 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v87 == a2 - 2)
                {
                  *(void *)uint64_t v87 = v85;
                }
                else
                {
                  *uint64_t v87 = *(a2 - 2);
                  v87[1] = *(a2 - 1);
                  *((void *)a2 - 1) = v85;
                  uint64_t v92 = (char *)v87 - (char *)v10 + 8;
                  if (v92 >= 9)
                  {
                    unint64_t v93 = (((unint64_t)v92 >> 3) - 2) >> 1;
                    if (v10[2 * v93 + 1] < v87[1])
                    {
                      int v94 = *v87;
                      unsigned int v95 = v87[1];
                      do
                      {
                        uint64_t v96 = v87;
                        uint64_t v87 = &v10[2 * v93];
                        *uint64_t v96 = *v87;
                        v96[1] = v87[1];
                        if (!v93) {
                          break;
                        }
                        unint64_t v93 = (v93 - 1) >> 1;
                      }
                      while (v10[2 * v93 + 1] < v95);
                      *uint64_t v87 = v94;
                      v87[1] = v95;
                    }
                  }
                }
                a2 -= 2;
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = &v10[2 * ((unint64_t)v12 >> 1)];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1CBAC881C(v9, &v9[2 * ((unint64_t)v12 >> 1)], a2 - 2);
            sub_1CBAC881C(v9 + 2, v14 - 2, a2 - 4);
            sub_1CBAC881C(v9 + 4, &v9[2 * v13 + 2], a2 - 6);
            uint64_t result = sub_1CBAC881C(v14 - 2, v14, &v9[2 * v13 + 2]);
            uint64_t v15 = *(void *)v9;
            *(void *)int v9 = *(void *)v14;
            *(void *)uint64_t v14 = v15;
          }
          else
          {
            uint64_t result = sub_1CBAC881C(&v9[2 * ((unint64_t)v12 >> 1)], v9, a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *(v9 - 1) < v9[1]) {
            break;
          }
          uint64_t v32 = *(void *)v9;
          uint64_t v33 = HIDWORD(*(void *)v9);
          if (*(a2 - 1) <= v33)
          {
            long long v36 = v9 + 2;
            do
            {
              uint64_t v10 = v36;
              if (v36 >= a2) {
                break;
              }
              unsigned int v37 = v36[1];
              v36 += 2;
            }
            while (v37 <= v33);
          }
          else
          {
            uint64_t v34 = v9;
            do
            {
              uint64_t v10 = v34 + 2;
              unsigned int v35 = v34[3];
              v34 += 2;
            }
            while (v35 <= v33);
          }
          uint64_t v38 = a2;
          if (v10 < a2)
          {
            uint64_t v39 = a2;
            do
            {
              uint64_t v38 = v39 - 2;
              unsigned int v40 = *(v39 - 1);
              v39 -= 2;
            }
            while (v40 > v33);
          }
          while (v10 < v38)
          {
            int v41 = *v10;
            *uint64_t v10 = *v38;
            *uint64_t v38 = v41;
            int v42 = v10[1];
            v10[1] = v38[1];
            v38[1] = v42;
            do
            {
              unsigned int v43 = v10[3];
              v10 += 2;
            }
            while (v43 <= v33);
            do
            {
              unsigned int v44 = *(v38 - 1);
              v38 -= 2;
            }
            while (v44 > v33);
          }
          BOOL v4 = v10 - 2 >= v9;
          BOOL v5 = v10 - 2 == v9;
          if (v10 - 2 != v9)
          {
            *int v9 = *(v10 - 2);
            v9[1] = *(v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v32;
          *(v10 - 1) = v33;
        }
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)v9;
        uint64_t v18 = HIDWORD(*(void *)v9);
        do
        {
          unsigned int v19 = v9[v16 + 3];
          v16 += 2;
        }
        while (v19 < v18);
        uint64_t v20 = &v9[v16];
        uint64_t v21 = a2;
        if (v16 == 2)
        {
          uint64_t v24 = a2;
          while (v20 < v24)
          {
            uint64_t v22 = v24 - 2;
            unsigned int v25 = *(v24 - 1);
            v24 -= 2;
            if (v25 < v18) {
              goto LABEL_22;
            }
          }
          uint64_t v22 = v24;
        }
        else
        {
          do
          {
            uint64_t v22 = v21 - 2;
            unsigned int v23 = *(v21 - 1);
            v21 -= 2;
          }
          while (v23 >= v18);
        }
LABEL_22:
        uint64_t v10 = v20;
        if (v20 < v22)
        {
          uint64_t v26 = v22;
          do
          {
            int v27 = *v10;
            *uint64_t v10 = *v26;
            *uint64_t v26 = v27;
            int v28 = v10[1];
            v10[1] = v26[1];
            v26[1] = v28;
            do
            {
              unsigned int v29 = v10[3];
              v10 += 2;
            }
            while (v29 < v18);
            do
            {
              unsigned int v30 = *(v26 - 1);
              v26 -= 2;
            }
            while (v30 >= v18);
          }
          while (v10 < v26);
        }
        if (v10 - 2 != v9)
        {
          *int v9 = *(v10 - 2);
          v9[1] = *(v10 - 1);
        }
        *(v10 - 2) = v17;
        *(v10 - 1) = v18;
        if (v20 >= v22) {
          break;
        }
LABEL_33:
        uint64_t result = (int *)sub_1CBAC8080(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = sub_1CBAC88F8(v9, v10 - 2);
      uint64_t result = (int *)sub_1CBAC88F8(v10, a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 2;
    if (!v31) {
      continue;
    }
    return result;
  }
}

int *sub_1CBAC881C(int *result, int *a2, int *a3)
{
  unint64_t v3 = a2 + 1;
  unsigned int v4 = a2[1];
  BOOL v5 = result + 1;
  unsigned int v6 = a3[1];
  if (v4 < result[1])
  {
    int v7 = *result;
    if (v6 >= v4)
    {
      *uint64_t result = *a2;
      *a2 = v7;
      unsigned int v11 = result[1];
      result[1] = a2[1];
      a2[1] = v11;
      if (a3[1] >= v11) {
        return result;
      }
      int v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      BOOL v5 = a2 + 1;
    }
    else
    {
      *uint64_t result = *a3;
      *a3 = v7;
    }
    unint64_t v3 = a3 + 1;
    goto LABEL_10;
  }
  if (v6 < v4)
  {
    int v8 = *a2;
    *a2 = *a3;
    *a3 = v8;
    int v9 = a2[1];
    a2[1] = a3[1];
    a3[1] = v9;
    if (a2[1] < *v5)
    {
      int v10 = *result;
      *uint64_t result = *a2;
      *a2 = v10;
LABEL_10:
      int v13 = *v5;
      *BOOL v5 = *v3;
      *unint64_t v3 = v13;
    }
  }
  return result;
}

BOOL sub_1CBAC88F8(int *a1, int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1) < a1[1])
      {
        int v6 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v6;
        int v7 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CBAC881C(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1CBAC8B10(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1CBAC8B10(a1, a1 + 2, a1 + 4, a1 + 6);
      if (*(a2 - 1) < a1[7])
      {
        int v18 = a1[6];
        a1[6] = *(a2 - 2);
        *(a2 - 2) = v18;
        int v19 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v19;
        unsigned int v20 = a1[7];
        unsigned int v21 = a1[5];
        if (v20 < v21)
        {
          int v22 = a1[6];
          unsigned int v23 = a1[3];
          int v24 = a1[4];
          a1[4] = v22;
          a1[5] = v20;
          a1[6] = v24;
          a1[7] = v21;
          if (v20 < v23)
          {
            unsigned int v25 = a1[1];
            int v26 = a1[2];
            a1[2] = v22;
            a1[3] = v20;
            a1[4] = v26;
            a1[5] = v23;
            if (v20 < v25)
            {
              int v27 = *a1;
              *a1 = v22;
              a1[1] = v20;
              a1[2] = v27;
              a1[3] = v25;
            }
          }
        }
      }
      return 1;
    default:
      int v8 = a1 + 4;
      sub_1CBAC881C(a1, a1 + 2, a1 + 4);
      int v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (v9[1] < v8[1])
    {
      int v12 = *v9;
      unsigned int v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        uint64_t v15 = (int *)((char *)a1 + v14);
        int v16 = *(int *)((char *)a1 + v14 + 20);
        v15[6] = *(int *)((char *)a1 + v14 + 16);
        v15[7] = v16;
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if (v15[3] <= v13)
        {
          uint64_t v17 = (int *)((char *)a1 + v14 + 24);
          goto LABEL_13;
        }
      }
      uint64_t v17 = a1;
LABEL_13:
      *uint64_t v17 = v12;
      v17[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    int v8 = v9;
    v10 += 8;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

int *sub_1CBAC8B10(int *a1, int *a2, int *a3, int *a4)
{
  BOOL result = sub_1CBAC881C(a1, a2, a3);
  if (a4[1] < a3[1])
  {
    int v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    int v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    if (a3[1] < a2[1])
    {
      int v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      int v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      if (a2[1] < a1[1])
      {
        int v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
        int v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

uint64_t sub_1CBAC8BD8(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if ((a1 & 0x80000000) != 0 && (a1 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a2 + 432))
  {
    unint64_t v7 = *(void *)(*(void *)(a2 + 424) + 8 * (a1 & 0x7FFFFFFF));
    if ((v7 & 2) != 0)
    {
      char v8 = 35;
      char v9 = 19;
      if ((v7 & 4) == 0) {
        char v8 = 19;
      }
      unint64_t v10 = v7 >> v8;
      if ((v7 & 4) == 0) {
        char v9 = 3;
      }
      if (v7) {
        char v9 = 3;
      }
      int v11 = (void *)((8 * (unsigned __int16)(v7 >> v9)) & 0xFFFFF8000007FFFFLL | ((v10 & 0xFFFFFF) << 19) | 2);
      uint64_t v12 = 0x800000000000000;
      goto LABEL_16;
    }
  }
  else
  {
    unint64_t v7 = 0;
  }
  char v13 = 3;
  if ((v7 & 1) == 0) {
    char v13 = 19;
  }
  int v11 = (void *)(v7 & 0x8000000000000000 | (8 * (v7 >> v13)) | 1);
  if ((a1 & 0x80000000) == 0)
  {
    int v14 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
    uint64_t v12 = 0x8000000000000;
    goto LABEL_17;
  }
  uint64_t v12 = 0x8000000000000;
LABEL_16:
  int v14 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
LABEL_17:
  uint64_t v15 = *v14;
  if (v15 && ((*(unsigned char *)(v15 + 3) & 1) != 0 || (uint64_t v15 = *(void *)(v15 + 24)) != 0 && (*(unsigned char *)(v15 + 3) & 1) != 0)) {
    uint64_t v16 = *(void *)(v15 + 8);
  }
  else {
    uint64_t v16 = 0;
  }
  if ((v7 & v12) != 0) {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  }
  int v17 = **(unsigned __int16 **)(v16 + 16);
  if (v17 == 119)
  {
    uint64_t v39 = v41;
    uint64_t v40 = 0x400000000;
    if (sub_1CBAC8BD8(*(unsigned int *)(*(void *)(v16 + 32) + 36), a2, a3, &v39))
    {
      if (v40)
      {
        unint64_t v23 = 0;
        do
        {
          unsigned int v37 = v11;
          int v38 = 0;
          LODWORD(v34) = *((_DWORD *)v39 + v23);
          int v36 = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a3 + 32))(a3, 119, &v37, 1, &v34, 1, 0);
          unint64_t v25 = *(unsigned int *)(a4 + 8);
          if (v25 >= *(unsigned int *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a4 + 4 * v25) = *(_DWORD *)(*(void *)(v24 + 32) + 4);
          ++*(_DWORD *)(a4 + 8);
          ++v23;
        }
        while (v23 < v40);
      }
      if (v39 != v41) {
        free(v39);
      }
      goto LABEL_44;
    }
    if (v39 != v41) {
      free(v39);
    }
    int v17 = **(unsigned __int16 **)(v16 + 16);
  }
  unsigned int v18 = (unsigned __int16)(v7 >> 3);
  if (v17 == 78)
  {
    if (*(_DWORD *)(v16 + 40) == v18 + 1)
    {
      if (v18)
      {
        uint64_t v29 = 0;
        uint64_t v30 = 32 * v18;
        do
        {
          uint64_t v34 = v11;
          int v35 = 0;
          LODWORD(v39) = *(_DWORD *)(*(void *)(v16 + 32) + v29 + 36);
          v41[0] = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a3 + 32))(a3, 119, &v34, 1, &v39, 1, 0);
          unint64_t v32 = *(unsigned int *)(a4 + 8);
          if (v32 >= *(unsigned int *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a4 + 4 * v32) = *(_DWORD *)(*(void *)(v31 + 32) + 4);
          ++*(_DWORD *)(a4 + 8);
          v29 += 32;
        }
        while (v30 != v29);
      }
      goto LABEL_44;
    }
LABEL_60:
    int v19 = 0;
    int v26 = 0;
    return v19 | (v26 << 8);
  }
  if (v17 != 77)
  {
    if (v17 == 68)
    {
      uint64_t v39 = v11;
      LODWORD(v40) = 0;
      int v19 = 1;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void, void, void))(*(void *)a3 + 32))(a3, 68, &v39, 1, 0, 0, 0);
      if (!v18)
      {
LABEL_45:
        int v26 = 1;
        return v19 | (v26 << 8);
      }
      int v21 = *(_DWORD *)(*(void *)(v20 + 32) + 4);
      unsigned int v22 = *(_DWORD *)(a4 + 8);
      do
      {
        if (v22 >= *(_DWORD *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a4 + 4 * v22) = v21;
        unsigned int v22 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v22;
        --v18;
      }
      while (v18);
LABEL_44:
      int v19 = 1;
      goto LABEL_45;
    }
    goto LABEL_60;
  }
  if (*(_DWORD *)(v16 + 40) != v18 + 1) {
    goto LABEL_60;
  }
  if (v18)
  {
    uint64_t v27 = 0;
    unsigned int v28 = *(_DWORD *)(a4 + 8);
    do
    {
      if (v28 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v28) = *(_DWORD *)(*(void *)(v16 + 32) + v27 + 36);
      unsigned int v28 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v28;
      v27 += 32;
    }
    while (32 * v18 != v27);
  }
  int v26 = 0;
  int v19 = 1;
  return v19 | (v26 << 8);
}

uint64_t sub_1CBAC90A0(uint64_t a1, float a2)
{
  int v9 = 32;
  char v8 = (const llvm::APInt *)LODWORD(a2);
  llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)v5, &v8);
  uint64_t v3 = v5[1];
  *(void *)(a1 + 8) = v5[0];
  *(void *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a1 + 28) & 0xF0 | v7 & 0xF;
  return a1;
}

uint64_t sub_1CBAC9108(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  if ((v3 & 0x80000000) != 0) {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v3);
  }
  uint64_t v5 = *v4;
  if (!v5) {
    return 0;
  }
  if ((*(unsigned char *)(v5 + 3) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5 || (*(unsigned char *)(v5 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6 || **(_WORD **)(v6 + 16) != 163 || *(_DWORD *)(v6 + 40) != 3) {
    return 0;
  }
  uint64_t v7 = *(unsigned int *)(*(void *)(v6 + 32) + 36);
  if ((v7 & 0x80000000) != 0) {
    char v8 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
  }
  else {
    char v8 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v7);
  }
  uint64_t v9 = *v8;
  if (!v9) {
    goto LABEL_14;
  }
  if ((*(unsigned char *)(v9 + 3) & 1) == 0)
  {
    uint64_t v9 = *(void *)(v9 + 24);
    if (!v9 || (*(unsigned char *)(v9 + 3) & 1) == 0) {
      goto LABEL_14;
    }
  }
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10 || **(_WORD **)(v10 + 16) != 163 || *(_DWORD *)(v10 + 40) != 3) {
    goto LABEL_14;
  }
  uint64_t v17 = *(void *)(v10 + 32);
  **(_DWORD **)a1 = *(_DWORD *)(v17 + 36);
  uint64_t v18 = *(unsigned int *)(v17 + 68);
  if ((v18 & 0x80000000) != 0) {
    int v19 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
  }
  else {
    int v19 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v18);
  }
  uint64_t v20 = *(void **)(a1 + 8);
  uint64_t v21 = *v19;
  if ((*(unsigned char *)(v21 + 3) & 1) == 0) {
    uint64_t v21 = *(void *)(v21 + 24);
  }
  uint64_t v22 = *(void *)(v21 + 8);
  if (**(_WORD **)(v22 + 16) == 121)
  {
    uint64_t v33 = *(void *)(*(void *)(v22 + 32) + 48);
    *uint64_t v20 = v33;
    if (v33)
    {
LABEL_42:
      uint64_t v34 = *(unsigned int *)(*(void *)(v6 + 32) + 68);
      if ((v34 & 0x80000000) != 0) {
        int v35 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
      }
      else {
        int v35 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v34);
      }
      unint64_t v25 = *(void **)(a1 + 16);
      uint64_t v36 = *v35;
      if ((*(unsigned char *)(v36 + 3) & 1) == 0) {
        uint64_t v36 = *(void *)(v36 + 24);
      }
      uint64_t v37 = *(void *)(v36 + 8);
      if (**(_WORD **)(v37 + 16) == 121)
      {
        uint64_t v38 = *(void *)(*(void *)(v37 + 32) + 48);
        void *v25 = v38;
        if (v38) {
          return 1;
        }
        goto LABEL_14;
      }
      goto LABEL_32;
    }
  }
  else
  {
    *uint64_t v20 = 0;
  }
  uint64_t v23 = *(unsigned int *)(*(void *)(v10 + 32) + 36);
  if ((v23 & 0x80000000) != 0) {
    uint64_t v24 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v24 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v23);
  }
  unint64_t v25 = *(void **)(a1 + 8);
  uint64_t v26 = *v24;
  if ((*(unsigned char *)(v26 + 3) & 1) == 0) {
    uint64_t v26 = *(void *)(v26 + 24);
  }
  uint64_t v27 = *(void *)(v26 + 8);
  if (**(_WORD **)(v27 + 16) == 121)
  {
    uint64_t v50 = *(void *)(*(void *)(v27 + 32) + 48);
    void *v25 = v50;
    if (!v50) {
      goto LABEL_14;
    }
    **(_DWORD **)a1 = *(_DWORD *)(*(void *)(v10 + 32) + 68);
    goto LABEL_42;
  }
LABEL_32:
  void *v25 = 0;
LABEL_14:
  uint64_t v11 = *(unsigned int *)(*(void *)(v6 + 32) + 36);
  if ((v11 & 0x80000000) != 0) {
    uint64_t v12 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v11 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v12 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v11);
  }
  char v13 = *(void **)(a1 + 16);
  uint64_t v14 = *v12;
  if ((*(unsigned char *)(v14 + 3) & 1) == 0) {
    uint64_t v14 = *(void *)(v14 + 24);
  }
  uint64_t v15 = *(void *)(v14 + 8);
  if (**(_WORD **)(v15 + 16) != 121) {
    goto LABEL_19;
  }
  uint64_t v28 = *(void *)(*(void *)(v15 + 32) + 48);
  *char v13 = v28;
  if (!v28) {
    return 0;
  }
  uint64_t v29 = *(unsigned int *)(*(void *)(v6 + 32) + 68);
  uint64_t v30 = (uint64_t *)((v29 & 0x80000000) != 0
                  ? *(void *)(a2 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8
                  : *(void *)(a2 + 272) + 8 * v29);
  uint64_t v31 = *v30;
  if (!v31) {
    return 0;
  }
  if ((*(unsigned char *)(v31 + 3) & 1) == 0)
  {
    uint64_t v31 = *(void *)(v31 + 24);
    if (!v31 || (*(unsigned char *)(v31 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v32 = *(void *)(v31 + 8);
  if (!v32 || **(_WORD **)(v32 + 16) != 163 || *(_DWORD *)(v32 + 40) != 3) {
    return 0;
  }
  uint64_t v39 = *(void *)(v32 + 32);
  **(_DWORD **)a1 = *(_DWORD *)(v39 + 36);
  uint64_t v40 = *(unsigned int *)(v39 + 68);
  if ((v40 & 0x80000000) != 0) {
    int v41 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v40 & 0x7FFFFFFF) + 8);
  }
  else {
    int v41 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v40);
  }
  uint64_t v42 = *(void **)(a1 + 8);
  uint64_t v43 = *v41;
  if ((*(unsigned char *)(v43 + 3) & 1) == 0) {
    uint64_t v43 = *(void *)(v43 + 24);
  }
  uint64_t v44 = *(void *)(v43 + 8);
  if (**(_WORD **)(v44 + 16) == 121)
  {
    uint64_t v51 = *(void *)(*(void *)(v44 + 32) + 48);
    void *v42 = v51;
    if (v51) {
      return 1;
    }
  }
  else
  {
    void *v42 = 0;
  }
  uint64_t v45 = *(unsigned int *)(*(void *)(v32 + 32) + 36);
  if ((v45 & 0x80000000) != 0) {
    int v46 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v45 & 0x7FFFFFFF) + 8);
  }
  else {
    int v46 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v45);
  }
  char v13 = *(void **)(a1 + 8);
  uint64_t v47 = *v46;
  if ((*(unsigned char *)(v47 + 3) & 1) == 0) {
    uint64_t v47 = *(void *)(v47 + 24);
  }
  uint64_t v48 = *(void *)(v47 + 8);
  if (**(_WORD **)(v48 + 16) != 121)
  {
LABEL_19:
    uint64_t result = 0;
    *char v13 = 0;
    return result;
  }
  uint64_t v49 = *(void *)(*(void *)(v48 + 32) + 48);
  *char v13 = v49;
  if (!v49) {
    return 0;
  }
  **(_DWORD **)a1 = *(_DWORD *)(*(void *)(v32 + 32) + 68);
  return 1;
}

uint64_t sub_1CBAC951C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  if ((v3 & 0x80000000) != 0) {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v3);
  }
  uint64_t v5 = *v4;
  if (!v5) {
    return 0;
  }
  if ((*(unsigned char *)(v5 + 3) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5 || (*(unsigned char *)(v5 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6 || **(_WORD **)(v6 + 16) != 163 || *(_DWORD *)(v6 + 40) != 3) {
    return 0;
  }
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v7 = (uint64_t *)(v6 + 32);
  uint64_t v9 = *(unsigned int *)(v8 + 36);
  if ((v9 & 0x80000000) != 0) {
    uint64_t v10 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v10 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v9);
  }
  uint64_t v11 = *v10;
  if (!v11) {
    goto LABEL_14;
  }
  if ((*(unsigned char *)(v11 + 3) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v11 + 24);
    if (!v11 || (*(unsigned char *)(v11 + 3) & 1) == 0) {
      goto LABEL_14;
    }
  }
  uint64_t v12 = *(void *)(v11 + 8);
  if (!v12 || **(_WORD **)(v12 + 16) != 165 || *(_DWORD *)(v12 + 40) != 3) {
    goto LABEL_14;
  }
  uint64_t v19 = *(void *)(v12 + 32);
  **(_DWORD **)a1 = *(_DWORD *)(v19 + 36);
  uint64_t v20 = *(unsigned int *)(v19 + 68);
  if ((v20 & 0x80000000) != 0) {
    uint64_t v21 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v21 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v20);
  }
  uint64_t v22 = *(void **)(a1 + 8);
  uint64_t v23 = *v21;
  if ((*(unsigned char *)(v23 + 3) & 1) == 0) {
    uint64_t v23 = *(void *)(v23 + 24);
  }
  uint64_t v24 = *(void *)(v23 + 8);
  if (**(_WORD **)(v24 + 16) == 121)
  {
    uint64_t v41 = *(void *)(*(void *)(v24 + 32) + 48);
    *uint64_t v22 = v41;
    if (v41) {
      goto LABEL_48;
    }
  }
  else
  {
    *uint64_t v22 = 0;
  }
  uint64_t v25 = *(unsigned int *)(*(void *)(v12 + 32) + 36);
  if ((v25 & 0x80000000) != 0) {
    uint64_t v26 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v26 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v25);
  }
  uint64_t v27 = *(void **)(a1 + 8);
  uint64_t v28 = *v26;
  if ((*(unsigned char *)(v28 + 3) & 1) == 0) {
    uint64_t v28 = *(void *)(v28 + 24);
  }
  uint64_t v29 = *(void *)(v28 + 8);
  if (**(_WORD **)(v29 + 16) == 121)
  {
    uint64_t v43 = *(void *)(*(void *)(v29 + 32) + 48);
    void *v27 = v43;
    if (!v43) {
      goto LABEL_14;
    }
    **(_DWORD **)a1 = *(_DWORD *)(*(void *)(v12 + 32) + 68);
LABEL_48:
    a1 += 16;
    goto LABEL_49;
  }
  void *v27 = 0;
LABEL_14:
  uint64_t v13 = *v7;
  **(_DWORD **)(a1 + 16) = *(_DWORD *)(v13 + 36);
  uint64_t v14 = *(unsigned int *)(v13 + 68);
  if ((v14 & 0x80000000) != 0) {
    uint64_t v15 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v15 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v14);
  }
  uint64_t v16 = *v15;
  if (!v16) {
    return 0;
  }
  if ((*(unsigned char *)(v16 + 3) & 1) == 0)
  {
    uint64_t v16 = *(void *)(v16 + 24);
    if (!v16 || (*(unsigned char *)(v16 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v17 = *(void *)(v16 + 8);
  if (!v17 || **(_WORD **)(v17 + 16) != 165 || *(_DWORD *)(v17 + 40) != 3) {
    return 0;
  }
  uint64_t v30 = *(void *)(v17 + 32);
  uint64_t v7 = (uint64_t *)(v17 + 32);
  **(_DWORD **)a1 = *(_DWORD *)(v30 + 36);
  uint64_t v31 = *(unsigned int *)(v30 + 68);
  if ((v31 & 0x80000000) != 0) {
    uint64_t v32 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v31 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v32 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v31);
  }
  uint64_t v33 = *(void **)(a1 + 8);
  uint64_t v34 = *v32;
  if ((*(unsigned char *)(v34 + 3) & 1) == 0) {
    uint64_t v34 = *(void *)(v34 + 24);
  }
  uint64_t v35 = *(void *)(v34 + 8);
  if (**(_WORD **)(v35 + 16) == 121)
  {
    uint64_t v42 = *(void *)(*(void *)(v35 + 32) + 48);
    *uint64_t v33 = v42;
    if (v42) {
      return 1;
    }
  }
  else
  {
    *uint64_t v33 = 0;
  }
  uint64_t v36 = *(unsigned int *)(*v7 + 36);
  if ((v36 & 0x80000000) != 0) {
    uint64_t v37 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v37 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v36);
  }
  uint64_t v38 = *(void **)(a1 + 8);
  uint64_t v39 = *v37;
  if ((*(unsigned char *)(v39 + 3) & 1) == 0) {
    uint64_t v39 = *(void *)(v39 + 24);
  }
  uint64_t v40 = *(void *)(v39 + 8);
  if (**(_WORD **)(v40 + 16) != 121)
  {
    uint64_t result = 0;
    *uint64_t v38 = 0;
    return result;
  }
  uint64_t v44 = *(void *)(*(void *)(v40 + 32) + 48);
  *uint64_t v38 = v44;
  if (!v44) {
    return 0;
  }
LABEL_49:
  **(_DWORD **)a1 = *(_DWORD *)(*v7 + 68);
  return 1;
}

uint64_t sub_1CBAC9878(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  if ((v3 & 0x80000000) != 0) {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v3);
  }
  uint64_t v5 = *v4;
  if (!v5) {
    return 0;
  }
  if ((*(unsigned char *)(v5 + 3) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5 || (*(unsigned char *)(v5 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6 || **(_WORD **)(v6 + 16) != 163 || *(_DWORD *)(v6 + 40) != 3) {
    return 0;
  }
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(unsigned int *)(v7 + 36);
  if ((v8 & 0x80000000) != 0) {
    uint64_t v9 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v9 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v8);
  }
  uint64_t v10 = *v9;
  if (v10)
  {
    if (*(unsigned char *)(v10 + 3) & 1) != 0 || (uint64_t v10 = *(void *)(v10 + 24)) != 0 && (*(unsigned char *)(v10 + 3))
    {
      uint64_t v11 = *(void *)(v10 + 8);
      if (v11 && **(_WORD **)(v11 + 16) == 163 && *(_DWORD *)(v11 + 40) == 3)
      {
        uint64_t v28 = *(void *)(v11 + 32);
        uint64_t v29 = *(_DWORD **)(a1 + 8);
        **(_DWORD **)a1 = *(_DWORD *)(v28 + 36);
        *uint64_t v29 = *(_DWORD *)(v28 + 68);
        uint64_t v30 = *(unsigned int *)(v7 + 68);
        uint64_t v31 = (uint64_t *)((v30 & 0x80000000) != 0
                        ? *(void *)(a2 + 24) + 16 * (v30 & 0x7FFFFFFF) + 8
                        : *(void *)(a2 + 272) + 8 * v30);
        uint64_t v32 = *v31;
        if (v32)
        {
          if (*(unsigned char *)(v32 + 3) & 1) != 0 || (uint64_t v32 = *(void *)(v32 + 24)) != 0 && (*(unsigned char *)(v32 + 3))
          {
            uint64_t v33 = *(void *)(v32 + 8);
            if (v33)
            {
              if (**(_WORD **)(v33 + 16) == 165 && *(_DWORD *)(v33 + 40) == 3)
              {
                uint64_t v34 = *(void *)(v33 + 32);
                **(_DWORD **)(a1 + 16) = *(_DWORD *)(v34 + 36);
                uint64_t v35 = *(unsigned int *)(v34 + 68);
                if ((v35 & 0x80000000) != 0) {
                  uint64_t v36 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v36 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v35);
                }
                uint64_t v37 = *(void **)(a1 + 24);
                uint64_t v38 = *v36;
                if ((*(unsigned char *)(v38 + 3) & 1) == 0) {
                  uint64_t v38 = *(void *)(v38 + 24);
                }
                uint64_t v39 = *(void *)(v38 + 8);
                if (**(_WORD **)(v39 + 16) == 121)
                {
                  uint64_t v54 = *(void *)(*(void *)(v39 + 32) + 48);
                  *uint64_t v37 = v54;
                  if (v54) {
                    return 1;
                  }
                }
                else
                {
                  *uint64_t v37 = 0;
                }
                uint64_t v40 = *(unsigned int *)(*(void *)(v33 + 32) + 36);
                if ((v40 & 0x80000000) != 0) {
                  uint64_t v41 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v40 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v41 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v40);
                }
                uint64_t v42 = *(void **)(a1 + 24);
                uint64_t v43 = *v41;
                if ((*(unsigned char *)(v43 + 3) & 1) == 0) {
                  uint64_t v43 = *(void *)(v43 + 24);
                }
                uint64_t v44 = *(void *)(v43 + 8);
                if (**(_WORD **)(v44 + 16) == 121)
                {
                  uint64_t v55 = *(void *)(*(void *)(v44 + 32) + 48);
                  void *v42 = v55;
                  if (v55)
                  {
                    uint64_t v51 = (_DWORD **)(a1 + 16);
                    uint64_t v50 = *(void *)(v33 + 32);
                    goto LABEL_63;
                  }
                }
                else
                {
                  void *v42 = 0;
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v12 = *(unsigned int *)(*(void *)(v6 + 32) + 36);
  uint64_t v13 = (uint64_t *)((v12 & 0x80000000) != 0
                  ? *(void *)(a2 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8
                  : *(void *)(a2 + 272) + 8 * v12);
  uint64_t v14 = *v13;
  if (!v14) {
    return 0;
  }
  if ((*(unsigned char *)(v14 + 3) & 1) == 0)
  {
    uint64_t v14 = *(void *)(v14 + 24);
    if (!v14 || (*(unsigned char *)(v14 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v15 = *(void *)(v14 + 8);
  if (!v15 || **(_WORD **)(v15 + 16) != 165 || *(_DWORD *)(v15 + 40) != 3) {
    return 0;
  }
  uint64_t v17 = *(void *)(v15 + 32);
  **(_DWORD **)(a1 + 16) = *(_DWORD *)(v17 + 36);
  uint64_t v18 = *(unsigned int *)(v17 + 68);
  if ((v18 & 0x80000000) != 0) {
    uint64_t v19 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v19 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v18);
  }
  uint64_t v20 = *(void **)(a1 + 24);
  uint64_t v21 = *v19;
  if ((*(unsigned char *)(v21 + 3) & 1) == 0) {
    uint64_t v21 = *(void *)(v21 + 24);
  }
  uint64_t v22 = *(void *)(v21 + 8);
  if (**(_WORD **)(v22 + 16) == 121)
  {
    uint64_t v45 = *(void *)(*(void *)(v22 + 32) + 48);
    *uint64_t v20 = v45;
    if (v45) {
      goto LABEL_55;
    }
  }
  else
  {
    *uint64_t v20 = 0;
  }
  uint64_t v23 = *(unsigned int *)(*(void *)(v15 + 32) + 36);
  if ((v23 & 0x80000000) != 0) {
    uint64_t v24 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v24 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v23);
  }
  uint64_t v25 = *(void **)(a1 + 24);
  uint64_t v26 = *v24;
  if ((*(unsigned char *)(v26 + 3) & 1) == 0) {
    uint64_t v26 = *(void *)(v26 + 24);
  }
  uint64_t v27 = *(void *)(v26 + 8);
  if (**(_WORD **)(v27 + 16) != 121)
  {
    uint64_t result = 0;
    void *v25 = 0;
    return result;
  }
  uint64_t v53 = *(void *)(*(void *)(v27 + 32) + 48);
  void *v25 = v53;
  if (!v53) {
    return 0;
  }
  **(_DWORD **)(a1 + 16) = *(_DWORD *)(*(void *)(v15 + 32) + 68);
LABEL_55:
  uint64_t v46 = *(unsigned int *)(*(void *)(v6 + 32) + 68);
  if ((v46 & 0x80000000) != 0) {
    uint64_t v47 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v46 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v47 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v46);
  }
  uint64_t v48 = *v47;
  if (!v48) {
    return 0;
  }
  if ((*(unsigned char *)(v48 + 3) & 1) == 0)
  {
    uint64_t v48 = *(void *)(v48 + 24);
    if (!v48 || (*(unsigned char *)(v48 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v49 = *(void *)(v48 + 8);
  if (!v49 || **(_WORD **)(v49 + 16) != 163 || *(_DWORD *)(v49 + 40) != 3) {
    return 0;
  }
  uint64_t v50 = *(void *)(v49 + 32);
  unsigned int v52 = *(_DWORD **)a1;
  uint64_t v51 = (_DWORD **)(a1 + 8);
  *unsigned int v52 = *(_DWORD *)(v50 + 36);
LABEL_63:
  **uint64_t v51 = *(_DWORD *)(v50 + 68);
  return 1;
}

uint64_t sub_1CBAC9CCC(_DWORD **a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  if ((v3 & 0x80000000) != 0) {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v3);
  }
  uint64_t v5 = *v4;
  if (!v5) {
    return 0;
  }
  if ((*(unsigned char *)(v5 + 3) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5 || (*(unsigned char *)(v5 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6 || **(_WORD **)(v6 + 16) != 163 || *(_DWORD *)(v6 + 40) != 3) {
    return 0;
  }
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(unsigned int *)(v7 + 36);
  if ((v8 & 0x80000000) != 0) {
    uint64_t v9 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v9 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v8);
  }
  uint64_t v10 = *v9;
  if (!v10) {
    goto LABEL_14;
  }
  if ((*(unsigned char *)(v10 + 3) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v10 + 24);
    if (!v10 || (*(unsigned char *)(v10 + 3) & 1) == 0) {
      goto LABEL_14;
    }
  }
  uint64_t v11 = *(void *)(v10 + 8);
  if (!v11 || **(_WORD **)(v11 + 16) != 163 || *(_DWORD *)(v11 + 40) != 3) {
    goto LABEL_14;
  }
  uint64_t v17 = *(void *)(v11 + 32);
  uint64_t v18 = a1[1];
  **a1 = *(_DWORD *)(v17 + 36);
  _DWORD *v18 = *(_DWORD *)(v17 + 68);
  uint64_t v19 = *(unsigned int *)(v7 + 68);
  uint64_t v20 = (uint64_t *)((v19 & 0x80000000) != 0
                  ? *(void *)(a2 + 24) + 16 * (v19 & 0x7FFFFFFF) + 8
                  : *(void *)(a2 + 272) + 8 * v19);
  if ((uint64_t v21 = *v20) == 0
    || (*(unsigned char *)(v21 + 3) & 1) == 0 && ((uint64_t v21 = *(void *)(v21 + 24)) == 0 || (*(unsigned char *)(v21 + 3) & 1) == 0)
    || (uint64_t v22 = *(void *)(v21 + 8)) == 0
    || **(_WORD **)(v22 + 16) != 163
    || *(_DWORD *)(v22 + 40) != 3)
  {
LABEL_14:
    uint64_t v12 = *(unsigned int *)(v7 + 36);
    if ((v12 & 0x80000000) != 0) {
      uint64_t v13 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v13 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v12);
    }
    uint64_t v14 = *v13;
    if (v14)
    {
      if (*(unsigned char *)(v14 + 3) & 1) != 0 || (uint64_t v14 = *(void *)(v14 + 24)) != 0 && (*(unsigned char *)(v14 + 3))
      {
        uint64_t v15 = *(void *)(v14 + 8);
        if (v15 && **(_WORD **)(v15 + 16) == 163 && *(_DWORD *)(v15 + 40) == 3)
        {
          uint64_t v25 = *(void *)(v15 + 32);
          uint64_t v26 = a1[3];
          *a1[2] = *(_DWORD *)(v25 + 36);
          *uint64_t v26 = *(_DWORD *)(v25 + 68);
          uint64_t v27 = *(unsigned int *)(v7 + 68);
          uint64_t v28 = (uint64_t *)((v27 & 0x80000000) != 0
                          ? *(void *)(a2 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8
                          : *(void *)(a2 + 272) + 8 * v27);
          uint64_t v29 = *v28;
          if (v29)
          {
            if (*(unsigned char *)(v29 + 3) & 1) != 0 || (uint64_t v29 = *(void *)(v29 + 24)) != 0 && (*(unsigned char *)(v29 + 3))
            {
              uint64_t v30 = *(void *)(v29 + 8);
              if (v30)
              {
                if (**(_WORD **)(v30 + 16) == 163 && *(_DWORD *)(v30 + 40) == 3)
                {
                  uint64_t v23 = *(void *)(v30 + 32);
                  uint64_t v31 = *a1;
                  uint64_t v24 = a1 + 1;
                  *uint64_t v31 = *(_DWORD *)(v23 + 36);
                  goto LABEL_39;
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }
  uint64_t v23 = *(void *)(v22 + 32);
  *a1[2] = *(_DWORD *)(v23 + 36);
  uint64_t v24 = a1 + 3;
LABEL_39:
  **uint64_t v24 = *(_DWORD *)(v23 + 68);
  return 1;
}

uint64_t sub_1CBAC9F60(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  if ((v3 & 0x80000000) != 0) {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v3);
  }
  uint64_t v5 = *v4;
  if (!v5) {
    return 0;
  }
  if ((*(unsigned char *)(v5 + 3) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5 || (*(unsigned char *)(v5 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6 || **(_WORD **)(v6 + 16) != 165 || *(_DWORD *)(v6 + 40) != 3) {
    return 0;
  }
  uint64_t v7 = *(unsigned int *)(*(void *)(v6 + 32) + 36);
  if ((v7 & 0x80000000) != 0) {
    uint64_t v8 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v8 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v7);
  }
  uint64_t v9 = *v8;
  if (!v9
    || (*(unsigned char *)(v9 + 3) & 1) == 0 && ((uint64_t v9 = *(void *)(v9 + 24)) == 0 || (*(unsigned char *)(v9 + 3) & 1) == 0)
    || (uint64_t v10 = *(void *)(v9 + 8)) == 0
    || **(_WORD **)(v10 + 16) != 165
    || *(_DWORD *)(v10 + 40) != 3)
  {
LABEL_14:
    uint64_t v11 = *(unsigned int *)(*(void *)(v6 + 32) + 36);
    if ((v11 & 0x80000000) != 0) {
      uint64_t v12 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v11 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v12 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v11);
    }
    uint64_t v13 = *(void **)(a1 + 16);
    uint64_t v14 = *v12;
    if ((*(unsigned char *)(v14 + 3) & 1) == 0) {
      uint64_t v14 = *(void *)(v14 + 24);
    }
    uint64_t v15 = *(void *)(v14 + 8);
    if (**(_WORD **)(v15 + 16) != 121) {
      goto LABEL_19;
    }
    uint64_t v28 = *(void *)(*(void *)(v15 + 32) + 48);
    *uint64_t v13 = v28;
    if (v28)
    {
      uint64_t v36 = *(unsigned int *)(*(void *)(v6 + 32) + 68);
      uint64_t v37 = (uint64_t *)((v36 & 0x80000000) != 0
                      ? *(void *)(a2 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8
                      : *(void *)(a2 + 272) + 8 * v36);
      uint64_t v38 = *v37;
      if (v38)
      {
        if (*(unsigned char *)(v38 + 3) & 1) != 0 || (uint64_t v38 = *(void *)(v38 + 24)) != 0 && (*(unsigned char *)(v38 + 3))
        {
          uint64_t v39 = *(void *)(v38 + 8);
          if (v39)
          {
            if (**(_WORD **)(v39 + 16) == 165 && *(_DWORD *)(v39 + 40) == 3)
            {
              uint64_t v40 = *(void *)(v39 + 32);
              **(_DWORD **)a1 = *(_DWORD *)(v40 + 36);
              uint64_t v41 = *(unsigned int *)(v40 + 68);
              if ((v41 & 0x80000000) != 0) {
                uint64_t v42 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v42 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v41);
              }
              uint64_t v43 = *(void **)(a1 + 8);
              uint64_t v44 = *v42;
              if ((*(unsigned char *)(v44 + 3) & 1) == 0) {
                uint64_t v44 = *(void *)(v44 + 24);
              }
              uint64_t v45 = *(void *)(v44 + 8);
              if (**(_WORD **)(v45 + 16) == 121)
              {
                uint64_t v51 = *(void *)(*(void *)(v45 + 32) + 48);
                *uint64_t v43 = v51;
                if (v51) {
                  return 1;
                }
              }
              else
              {
                *uint64_t v43 = 0;
              }
              uint64_t v46 = *(unsigned int *)(*(void *)(v39 + 32) + 36);
              if ((v46 & 0x80000000) != 0) {
                uint64_t v47 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v46 & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v47 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v46);
              }
              uint64_t v13 = *(void **)(a1 + 8);
              uint64_t v48 = *v47;
              if ((*(unsigned char *)(v48 + 3) & 1) == 0) {
                uint64_t v48 = *(void *)(v48 + 24);
              }
              uint64_t v49 = *(void *)(v48 + 8);
              if (**(_WORD **)(v49 + 16) != 121)
              {
LABEL_19:
                uint64_t result = 0;
                *uint64_t v13 = 0;
                return result;
              }
              uint64_t v50 = *(void *)(*(void *)(v49 + 32) + 48);
              *uint64_t v13 = v50;
              if (v50)
              {
                **(_DWORD **)a1 = *(_DWORD *)(*(void *)(v39 + 32) + 68);
                return 1;
              }
            }
          }
        }
      }
    }
    return 0;
  }
  uint64_t v17 = *(void *)(v10 + 32);
  **(_DWORD **)a1 = *(_DWORD *)(v17 + 36);
  uint64_t v18 = *(unsigned int *)(v17 + 68);
  if ((v18 & 0x80000000) != 0) {
    uint64_t v19 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v19 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v18);
  }
  uint64_t v20 = *(void **)(a1 + 8);
  uint64_t v21 = *v19;
  if ((*(unsigned char *)(v21 + 3) & 1) == 0) {
    uint64_t v21 = *(void *)(v21 + 24);
  }
  uint64_t v22 = *(void *)(v21 + 8);
  if (**(_WORD **)(v22 + 16) == 121)
  {
    uint64_t v29 = *(void *)(*(void *)(v22 + 32) + 48);
    *uint64_t v20 = v29;
    if (v29) {
      goto LABEL_36;
    }
  }
  else
  {
    *uint64_t v20 = 0;
  }
  uint64_t v23 = *(unsigned int *)(*(void *)(v10 + 32) + 36);
  if ((v23 & 0x80000000) != 0) {
    uint64_t v24 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v24 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v23);
  }
  uint64_t v25 = *(void **)(a1 + 8);
  uint64_t v26 = *v24;
  if ((*(unsigned char *)(v26 + 3) & 1) == 0) {
    uint64_t v26 = *(void *)(v26 + 24);
  }
  uint64_t v27 = *(void *)(v26 + 8);
  if (**(_WORD **)(v27 + 16) != 121) {
    goto LABEL_32;
  }
  uint64_t v35 = *(void *)(*(void *)(v27 + 32) + 48);
  void *v25 = v35;
  if (!v35) {
    goto LABEL_14;
  }
  **(_DWORD **)a1 = *(_DWORD *)(*(void *)(v10 + 32) + 68);
LABEL_36:
  uint64_t v30 = *(unsigned int *)(*(void *)(v6 + 32) + 68);
  if ((v30 & 0x80000000) != 0) {
    uint64_t v31 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v30 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v31 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v30);
  }
  uint64_t v25 = *(void **)(a1 + 16);
  uint64_t v32 = *v31;
  if ((*(unsigned char *)(v32 + 3) & 1) == 0) {
    uint64_t v32 = *(void *)(v32 + 24);
  }
  uint64_t v33 = *(void *)(v32 + 8);
  if (**(_WORD **)(v33 + 16) != 121)
  {
LABEL_32:
    void *v25 = 0;
    goto LABEL_14;
  }
  uint64_t v34 = *(void *)(*(void *)(v33 + 32) + 48);
  void *v25 = v34;
  if (!v34) {
    goto LABEL_14;
  }
  return 1;
}

uint64_t sub_1CBACA374(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  if ((v3 & 0x80000000) != 0) {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v3);
  }
  uint64_t v5 = *v4;
  if (!v5) {
    return 0;
  }
  if ((*(unsigned char *)(v5 + 3) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5 || (*(unsigned char *)(v5 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6 || **(_WORD **)(v6 + 16) != 165 || *(_DWORD *)(v6 + 40) != 3) {
    return 0;
  }
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(unsigned int *)(v7 + 36);
  if ((v8 & 0x80000000) != 0) {
    uint64_t v9 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v9 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v8);
  }
  uint64_t v10 = *v9;
  if (!v10) {
    goto LABEL_14;
  }
  if ((*(unsigned char *)(v10 + 3) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v10 + 24);
    if (!v10 || (*(unsigned char *)(v10 + 3) & 1) == 0) {
      goto LABEL_14;
    }
  }
  uint64_t v11 = *(void *)(v10 + 8);
  if (!v11 || **(_WORD **)(v11 + 16) != 163 || *(_DWORD *)(v11 + 40) != 3) {
    goto LABEL_14;
  }
  uint64_t v18 = *(void *)(v11 + 32);
  uint64_t v19 = *(_DWORD **)(a1 + 8);
  **(_DWORD **)a1 = *(_DWORD *)(v18 + 36);
  *uint64_t v19 = *(_DWORD *)(v18 + 68);
  uint64_t v20 = *(unsigned int *)(v7 + 68);
  if ((v20 & 0x80000000) != 0) {
    uint64_t v21 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v21 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v20);
  }
  uint64_t v22 = *(void **)(a1 + 16);
  uint64_t v23 = *v21;
  if ((*(unsigned char *)(v23 + 3) & 1) == 0) {
    uint64_t v23 = *(void *)(v23 + 24);
  }
  uint64_t v24 = *(void *)(v23 + 8);
  if (**(_WORD **)(v24 + 16) != 121)
  {
    *uint64_t v22 = 0;
    goto LABEL_14;
  }
  uint64_t v26 = *(void *)(*(void *)(v24 + 32) + 48);
  *uint64_t v22 = v26;
  if (!v26)
  {
LABEL_14:
    uint64_t v12 = *(unsigned int *)(*(void *)(v6 + 32) + 36);
    if ((v12 & 0x80000000) != 0) {
      uint64_t v13 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v13 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v12);
    }
    uint64_t v14 = *(void **)(a1 + 16);
    uint64_t v15 = *v13;
    if ((*(unsigned char *)(v15 + 3) & 1) == 0) {
      uint64_t v15 = *(void *)(v15 + 24);
    }
    uint64_t v16 = *(void *)(v15 + 8);
    if (**(_WORD **)(v16 + 16) != 121)
    {
      uint64_t result = 0;
      *uint64_t v14 = 0;
      return result;
    }
    uint64_t v25 = *(void *)(*(void *)(v16 + 32) + 48);
    *uint64_t v14 = v25;
    if (v25)
    {
      uint64_t v27 = *(unsigned int *)(*(void *)(v6 + 32) + 68);
      uint64_t v28 = (uint64_t *)((v27 & 0x80000000) != 0
                      ? *(void *)(a2 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8
                      : *(void *)(a2 + 272) + 8 * v27);
      uint64_t v29 = *v28;
      if (v29)
      {
        if (*(unsigned char *)(v29 + 3) & 1) != 0 || (uint64_t v29 = *(void *)(v29 + 24)) != 0 && (*(unsigned char *)(v29 + 3))
        {
          uint64_t v30 = *(void *)(v29 + 8);
          if (v30)
          {
            if (**(_WORD **)(v30 + 16) == 163 && *(_DWORD *)(v30 + 40) == 3)
            {
              uint64_t v31 = *(void *)(v30 + 32);
              uint64_t v32 = *(_DWORD **)(a1 + 8);
              **(_DWORD **)a1 = *(_DWORD *)(v31 + 36);
              *uint64_t v32 = *(_DWORD *)(v31 + 68);
              return 1;
            }
          }
        }
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1CBACA5DC(_DWORD **a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  if ((v3 & 0x80000000) != 0) {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v3);
  }
  uint64_t v5 = *v4;
  if (!v5) {
    return 0;
  }
  if ((*(unsigned char *)(v5 + 3) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5 || (*(unsigned char *)(v5 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6 || **(_WORD **)(v6 + 16) != 165 || *(_DWORD *)(v6 + 40) != 3) {
    return 0;
  }
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(unsigned int *)(v7 + 36);
  uint64_t v9 = (uint64_t *)((v8 & 0x80000000) != 0
                 ? *(void *)(a2 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8
                 : *(void *)(a2 + 272) + 8 * v8);
  uint64_t v10 = *v9;
  if (!v10) {
    goto LABEL_14;
  }
  if ((*(unsigned char *)(v10 + 3) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v10 + 24);
    if (!v10 || (*(unsigned char *)(v10 + 3) & 1) == 0) {
      goto LABEL_14;
    }
  }
  uint64_t v11 = *(void *)(v10 + 8);
  if (!v11 || **(_WORD **)(v11 + 16) != 177 || *(_DWORD *)(v11 + 40) != 2) {
    goto LABEL_14;
  }
  int v17 = *(_DWORD *)(*(void *)(v11 + 32) + 36);
  uint64_t v18 = a1 + 1;
  **a1 = v17;
  uint64_t v19 = *(unsigned int *)(v7 + 68);
  uint64_t v20 = (uint64_t *)((v19 & 0x80000000) != 0
                  ? *(void *)(a2 + 24) + 16 * (v19 & 0x7FFFFFFF) + 8
                  : *(void *)(a2 + 272) + 8 * v19);
  if ((uint64_t v21 = *v20) == 0
    || (*(unsigned char *)(v21 + 3) & 1) == 0 && ((uint64_t v21 = *(void *)(v21 + 24)) == 0 || (*(unsigned char *)(v21 + 3) & 1) == 0)
    || (uint64_t v22 = *(void *)(v21 + 8)) == 0
    || **(_WORD **)(v22 + 16) != 177
    || *(_DWORD *)(v22 + 40) != 2)
  {
LABEL_14:
    uint64_t v12 = *(unsigned int *)(v7 + 36);
    uint64_t v13 = (uint64_t *)((v12 & 0x80000000) != 0
                    ? *(void *)(a2 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8
                    : *(void *)(a2 + 272) + 8 * v12);
    uint64_t v14 = *v13;
    if (!v14) {
      return 0;
    }
    if ((*(unsigned char *)(v14 + 3) & 1) == 0)
    {
      uint64_t v14 = *(void *)(v14 + 24);
      if (!v14 || (*(unsigned char *)(v14 + 3) & 1) == 0) {
        return 0;
      }
    }
    uint64_t v15 = *(void *)(v14 + 8);
    if (!v15 || **(_WORD **)(v15 + 16) != 177 || *(_DWORD *)(v15 + 40) != 2) {
      return 0;
    }
    *a1[1] = *(_DWORD *)(*(void *)(v15 + 32) + 36);
    uint64_t v23 = *(unsigned int *)(v7 + 68);
    uint64_t v24 = (uint64_t *)((v23 & 0x80000000) != 0
                    ? *(void *)(a2 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8
                    : *(void *)(a2 + 272) + 8 * v23);
    uint64_t v25 = *v24;
    if (!v25) {
      return 0;
    }
    if ((*(unsigned char *)(v25 + 3) & 1) == 0)
    {
      uint64_t v25 = *(void *)(v25 + 24);
      if (!v25 || (*(unsigned char *)(v25 + 3) & 1) == 0) {
        return 0;
      }
    }
    uint64_t v22 = *(void *)(v25 + 8);
    if (!v22) {
      return 0;
    }
    if (**(_WORD **)(v22 + 16) != 177) {
      return 0;
    }
    uint64_t v18 = a1;
    if (*(_DWORD *)(v22 + 40) != 2) {
      return 0;
    }
  }
  *_DWORD *v18 = *(_DWORD *)(*(void *)(v22 + 32) + 36);
  return 1;
}

uint64_t sub_1CBACA848(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4 = *a3;
  if ((v4 & 0x80000000) != 0) {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v4 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v4);
  }
  uint64_t v6 = *v5;
  if (v6)
  {
    if (*(unsigned char *)(v6 + 3) & 1) != 0 || (uint64_t v6 = *(void *)(v6 + 24)) != 0 && (*(unsigned char *)(v6 + 3))
    {
      uint64_t v7 = *(void *)(v6 + 8);
      if (v7)
      {
        if (**(_WORD **)(v7 + 16) == 128 && *(_DWORD *)(v7 + 40) == 3)
        {
          uint64_t v9 = *(void *)(v7 + 32);
          **(_DWORD **)a1 = *(_DWORD *)(v9 + 36);
          sub_1CC73C210(*(_DWORD *)(v9 + 68), a2, (uint64_t)&v10);
          if (v12)
          {
            if (v11 < 0x41)
            {
              **(void **)(a1 + 8) = v10 << -(char)v11 >> -(char)v11;
              return 1;
            }
            if (v10) {
              MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CBACA950(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5 = *a3;
  if ((v5 & 0x80000000) != 0) {
    uint64_t v6 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v6 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v5);
  }
  uint64_t v7 = *v6;
  if (!v7) {
    return 0;
  }
  if ((*(unsigned char *)(v7 + 3) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v7 + 24);
    if (!v7 || (*(unsigned char *)(v7 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(v7 + 8);
  if (!v8 || **(_WORD **)(v8 + 16) != 45 || *(_DWORD *)(v8 + 40) != 3) {
    return 0;
  }
  sub_1CC73C210(*(_DWORD *)(*(void *)(v8 + 32) + 36), a2, (uint64_t)&v11);
  if (v13)
  {
    if (v12 < 0x41)
    {
      **(void **)a1 = v11 << -(char)v12 >> -(char)v12;
      **(_DWORD **)(a1 + 8) = *(_DWORD *)(*(void *)(v8 + 32) + 68);
      return 1;
    }
    if (v11) {
      MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
    }
  }
  uint64_t v9 = *(void *)(v8 + 32);
  **(_DWORD **)(a1 + 8) = *(_DWORD *)(v9 + 36);
  sub_1CC73C210(*(_DWORD *)(v9 + 68), a2, (uint64_t)&v11);
  if (v13)
  {
    if (v12 >= 0x41)
    {
      if (v11) {
        MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
      }
      return 0;
    }
    **(void **)a1 = v11 << -(char)v12 >> -(char)v12;
    return 1;
  }
  return 0;
}

uint64_t sub_1CBACAADC(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5 = *a3;
  if ((v5 & 0x80000000) != 0) {
    uint64_t v6 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v6 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v5);
  }
  uint64_t v7 = *v6;
  if (!v7) {
    return 0;
  }
  if ((*(unsigned char *)(v7 + 3) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v7 + 24);
    if (!v7 || (*(unsigned char *)(v7 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(v7 + 8);
  if (!v8 || **(_WORD **)(v8 + 16) != 65 || *(_DWORD *)(v8 + 40) != 3) {
    return 0;
  }
  sub_1CC73C210(*(_DWORD *)(*(void *)(v8 + 32) + 68), a2, (uint64_t)&v11);
  if (v13)
  {
    char v10 = v12;
    if (v12 < 0x41) {
      goto LABEL_16;
    }
    if (v11) {
      MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
    }
  }
  sub_1CC73C210(*(_DWORD *)(*(void *)(v8 + 32) + 36), a2, (uint64_t)&v11);
  if (v13)
  {
    char v10 = v12;
    if (v12 >= 0x41)
    {
      if (v11) {
        MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
      }
      return 0;
    }
LABEL_16:
    **(void **)(a1 + 8) = v11 << -v10 >> -v10;
    return 1;
  }
  return 0;
}

BOOL sub_1CBACAC30(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  if ((v3 & 0x80000000) != 0) {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v3);
  }
  uint64_t v5 = *v4;
  if (!v5) {
    return 0;
  }
  if ((*(unsigned char *)(v5 + 3) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5 || (*(unsigned char *)(v5 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6 || **(_WORD **)(v6 + 16) != 119 || *(_DWORD *)(v6 + 40) != 2) {
    return 0;
  }
  int v8 = *(_DWORD *)(*(void *)(v6 + 32) + 36);
  **(_DWORD **)(a1 + 8) = v8;
  if (v8 < 0 && (uint64_t v9 = v8 & 0x7FFFFFFF, v9 < *(_DWORD *)(a2 + 432))) {
    uint64_t v10 = *(void *)(*(void *)(a2 + 424) + 8 * v9);
  }
  else {
    uint64_t v10 = 0;
  }
  return v10 == *(void *)a1;
}

uint64_t sub_1CBACACE8(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3 = *(void **)(a1 + 16);
  uint64_t v4 = *a3;
  if ((v4 & 0x80000000) != 0) {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v4 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v4);
  }
  uint64_t v6 = *v5;
  if (v6)
  {
    if (*(unsigned char *)(v6 + 3) & 1) != 0 || (uint64_t v6 = *(void *)(v6 + 24)) != 0 && (*(unsigned char *)(v6 + 3))
    {
      uint64_t v7 = *(void *)(v6 + 8);
      *uint64_t v3 = v7;
      if (v7)
      {
        if ((v4 & 0x80000000) != 0) {
          int v8 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v4 & 0x7FFFFFFF) + 8);
        }
        else {
          int v8 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v4);
        }
        uint64_t v9 = *v8;
        if (v9)
        {
          if (*(unsigned char *)(v9 + 3) & 1) != 0 || (uint64_t v9 = *(void *)(v9 + 24)) != 0 && (*(unsigned char *)(v9 + 3))
          {
            uint64_t v10 = *(void *)(v9 + 8);
            if (v10 && **(_WORD **)(v10 + 16) == 184 && *(_DWORD *)(v10 + 40) == 2)
            {
              uint64_t v19 = *(unsigned int *)(*(void *)(v10 + 32) + 36);
              uint64_t v20 = (uint64_t *)((v19 & 0x80000000) != 0
                              ? *(void *)(a2 + 24) + 16 * (v19 & 0x7FFFFFFF) + 8
                              : *(void *)(a2 + 272) + 8 * v19);
              uint64_t v21 = *v20;
              if (v21)
              {
                if ((*(unsigned char *)(v21 + 3) & 1) != 0
                  || (uint64_t v21 = *(void *)(v21 + 24)) != 0 && (*(unsigned char *)(v21 + 3) & 1) != 0)
                {
                  uint64_t v18 = *(void *)(v21 + 8);
                  if (v18)
                  {
                    if (**(_WORD **)(v18 + 16) == 179 && *(_DWORD *)(v18 + 40) == 2)
                    {
                      a1 += 8;
LABEL_27:
                      **(_DWORD **)a1 = *(_DWORD *)(*(void *)(v18 + 32) + 36);
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
        if ((v4 & 0x80000000) != 0) {
          uint64_t v11 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v4 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v11 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v4);
        }
        uint64_t v12 = *v11;
        if (v12)
        {
          if (*(unsigned char *)(v12 + 3) & 1) != 0 || (uint64_t v12 = *(void *)(v12 + 24)) != 0 && (*(unsigned char *)(v12 + 3))
          {
            uint64_t v13 = *(void *)(v12 + 8);
            if (v13 && **(_WORD **)(v13 + 16) == 177 && *(_DWORD *)(v13 + 40) == 2)
            {
              uint64_t v15 = *(unsigned int *)(*(void *)(v13 + 32) + 36);
              uint64_t v16 = (uint64_t *)((v15 & 0x80000000) != 0
                              ? *(void *)(a2 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8
                              : *(void *)(a2 + 272) + 8 * v15);
              uint64_t v17 = *v16;
              if (v17)
              {
                if ((*(unsigned char *)(v17 + 3) & 1) != 0
                  || (uint64_t v17 = *(void *)(v17 + 24)) != 0 && (*(unsigned char *)(v17 + 3) & 1) != 0)
                {
                  uint64_t v18 = *(void *)(v17 + 8);
                  if (v18)
                  {
                    if (**(_WORD **)(v18 + 16) == 179 && *(_DWORD *)(v18 + 40) == 2) {
                      goto LABEL_27;
                    }
                  }
                }
              }
            }
          }
        }
      }
      return 0;
    }
  }
  uint64_t result = 0;
  *uint64_t v3 = 0;
  return result;
}

void sub_1CBACAF20()
{
}

uint64_t sub_1CBACAFBC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC01A0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F25F5B58;
  *(void *)(a1 + 32) = a2;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC01A8, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CBACAF20;
    v6[1] = &PassRegistry;
    uint64_t v5 = v6;
    std::__call_once(&qword_1EBCC01A8, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CBACB070()
{
}

void sub_1CBACB0B4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CBACB0EC(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(*(void *)(a1 + 32) + 1020) & 1) != 0 || (v2 = a2 + 72, uint64_t v3 = *(void *)(a2 + 80), v3 == a2 + 72))
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = v3 - 24;
      if (!v3) {
        uint64_t v5 = 0;
      }
      uint64_t v6 = v5 + 40;
      for (uint64_t i = *(void *)(v5 + 48); i != v6; uint64_t i = *(void *)(i + 8))
      {
        if (i) {
          uint64_t v8 = i - 24;
        }
        else {
          uint64_t v8 = 0;
        }
        if (sub_1CB845E74(v8))
        {
          unsigned int v9 = *(unsigned __int8 *)(v8 + 17);
          if (v9 >= 0xFE)
          {
            *(unsigned char *)(v8 + 17) = v9 & 1 | 0xF2;
            char v4 = 1;
          }
        }
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

uint64_t sub_1CBACB1A8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = a1 + 64;
  *(void *)(a1 + 56) = 0x1000000000;
  *(void *)(a1 + 37) = 0;
  *(void *)a1 = &unk_1F260FA48;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 134) = 0;
  v4[0] = "TopQ";
  __int16 v5 = 259;
  sub_1CBACB320(a1 + 144, 1, (uint64_t)v4);
  v4[0] = "BotQ";
  __int16 v5 = 259;
  sub_1CBACB320(a1 + 848, 2, (uint64_t)v4);
  *(void *)(a1 + 1576) = 0;
  *(void *)(a1 + 1568) = 0;
  *(void *)(a1 + 1582) = 0;
  *(void *)(a1 + 1552) = 0;
  *(_DWORD *)(a1 + 1560) = 0;
  *(void *)(a1 + 1640) = 0;
  *(void *)(a1 + 1624) = 0;
  *(void *)(a1 + 1616) = 0;
  *(void *)(a1 + 1630) = 0;
  *(void *)(a1 + 1600) = 0;
  *(void *)(a1 + 1592) = 0;
  *(_DWORD *)(a1 + 1608) = 0;
  return a1;
}

uint64_t sub_1CBACB290(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 136);
}

uint64_t sub_1CBACB298(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 137);
}

void sub_1CBACB2A0(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 228) & 0x400) == 0)
  {
    llvm::SchedBoundary::releaseNode(a1 + 144, a2, *(_DWORD *)(a2 + 248), 0, 0);
    *(void *)(a1 + 1568) = 0;
  }
}

void sub_1CBACB2E0(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 228) & 0x400) == 0)
  {
    llvm::SchedBoundary::releaseNode(a1 + 848, a2, *(_DWORD *)(a2 + 252), 0, 0);
    *(void *)(a1 + 1616) = 0;
  }
}

uint64_t sub_1CBACB320(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int v6 = *(unsigned __int8 *)(a3 + 32);
  if (v6 == 1)
  {
    uint64_t v15 = ".A";
    __int16 v7 = 259;
    goto LABEL_5;
  }
  if (!*(unsigned char *)(a3 + 32))
  {
    __int16 v7 = 256;
LABEL_5:
    __int16 v18 = v7;
    goto LABEL_6;
  }
  uint64_t v10 = *(void *)(a3 + 8);
  if (*(unsigned char *)(a3 + 33) == 1)
  {
    uint64_t v11 = *(const char **)a3;
  }
  else
  {
    LOBYTE(v6) = 2;
    uint64_t v11 = (const char *)a3;
  }
  uint64_t v15 = v11;
  uint64_t v16 = v10;
  uint64_t v17 = ".A";
  LOBYTE(v18) = v6;
  HIBYTE(v18) = 3;
LABEL_6:
  *(_DWORD *)(a1 + 24) = a2;
  llvm::Twine::str((llvm::Twine *)&v15, (void *)(a1 + 32));
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  int v8 = *(unsigned __int8 *)(a3 + 32);
  if (v8 == 1)
  {
    uint64_t v15 = ".P";
    __int16 v9 = 259;
    goto LABEL_14;
  }
  if (!*(unsigned char *)(a3 + 32))
  {
    __int16 v9 = 256;
LABEL_14:
    __int16 v18 = v9;
    goto LABEL_15;
  }
  uint64_t v13 = *(void *)(a3 + 8);
  if (*(unsigned char *)(a3 + 33) == 1)
  {
    uint64_t v14 = *(const char **)a3;
  }
  else
  {
    LOBYTE(v8) = 2;
    uint64_t v14 = (const char *)a3;
  }
  uint64_t v15 = v14;
  uint64_t v16 = v13;
  uint64_t v17 = ".P";
  LOBYTE(v18) = v8;
  HIBYTE(v18) = 3;
LABEL_15:
  *(_DWORD *)(a1 + 80) = 4 * a2;
  llvm::Twine::str((llvm::Twine *)&v15, (void *)(a1 + 88));
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x1000000000;
  *(void *)(a1 + 272) = a1 + 288;
  *(void *)(a1 + 280) = 0x1000000000;
  *(void *)(a1 + 352) = a1 + 368;
  *(void *)(a1 + 360) = 0x1000000000;
  *(void *)(a1 + 432) = a1 + 448;
  *(void *)(a1 + 440) = 0x1000000000;
  llvm::SchedBoundary::reset((llvm::SchedBoundary *)a1);
  return a1;
}

void *sub_1CBACB4A0(void *a1)
{
  *a1 = &unk_1F260FA48;
  llvm::SchedBoundary::~SchedBoundary((llvm::SchedBoundary *)(a1 + 106));
  llvm::SchedBoundary::~SchedBoundary((llvm::SchedBoundary *)(a1 + 18));
  *a1 = &unk_1F25F5C98;
  uint64_t v2 = (void *)a1[6];
  if (v2 != a1 + 8) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CBACB524()
{
  qword_1EBCC01B0 = 0;
  *(void *)algn_1EBCC01B8 = "agx2-new-scheduler";
  qword_1EBCC01C0 = 18;
  unk_1EBCC01C8 = "New AGX2 scheduler";
  qword_1EBCC01D0 = 18;
  unk_1EBCC01D8 = sub_1CD41C6D0;
  sub_1CB835A84(&llvm::MachineSchedRegistry::Registry, &qword_1EBCC01B0);

  return __cxa_atexit((void (*)(void *))sub_1CB835A50, &qword_1EBCC01B0, &dword_1CB82C000);
}

void sub_1CBACB5B0(llvm *a1, llvm::PassRegistry *a2)
{
}

uint64_t sub_1CBACB64C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC01E0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25F5D30;
  *(_DWORD *)(a1 + 316) = 0;
  *(unsigned char *)(a1 + 320) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 344) = 254;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC01E8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBACB5B0;
    v5[1] = &PassRegistry;
    char v4 = v5;
    std::__call_once(&qword_1EBCC01E8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CBACB76C()
{
}

void sub_1CBACB7A8(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F25F5D30;
  MEMORY[0x1D25D9CD0](*((void *)a1 + 34), 4);
  MEMORY[0x1D25D9CD0](*((void *)a1 + 31), 4);
  *(void *)a1 = &unk_1F260E110;
  uint64_t v2 = (void *)*((void *)a1 + 22);
  if (v2 != (void *)((char *)a1 + 192)) {
    free(v2);
  }
  uint64_t v3 = (void *)*((void *)a1 + 13);
  if (v3 != (void *)((char *)a1 + 120)) {
    free(v3);
  }
  char v4 = (void *)*((void *)a1 + 4);
  if (v4 != (void *)((char *)a1 + 48)) {
    free(v4);
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBACB874(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F25F5D30;
  MEMORY[0x1D25D9CD0](*((void *)a1 + 34), 4);
  MEMORY[0x1D25D9CD0](*((void *)a1 + 31), 4);
  *(void *)a1 = &unk_1F260E110;
  uint64_t v2 = (void *)*((void *)a1 + 22);
  if (v2 != (void *)((char *)a1 + 192)) {
    free(v2);
  }
  uint64_t v3 = (void *)*((void *)a1 + 13);
  if (v3 != (void *)((char *)a1 + 120)) {
    free(v3);
  }
  char v4 = (void *)*((void *)a1 + 4);
  if (v4 != (void *)((char *)a1 + 48)) {
    free(v4);
  }
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBACB954()
{
  return "AGX2 LM spill pass";
}

void sub_1CBACB964(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CBACB9EC(uint64_t a1, void *a2)
{
  uint64_t v2 = (uint64_t)a2;
  uint64_t v172 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2[2];
  uint64_t v136 = (_DWORD *)(a1 + 296);
  sub_1CBA9FB30(v4, a2, (_DWORD *)(a1 + 296), (uint64_t)&v152);
  *(_OWORD *)(a1 + 304) = v152;
  *(unsigned char *)(a1 + 320) = v153;
  unsigned int v5 = *(_DWORD *)(a1 + 308);
  if (!v5) {
    return 0;
  }
  *(_DWORD *)(a1 + 296) = (*(_DWORD *)(a1 + 296) + 3) & 0xFFFFFFFC;
  if (v5 >= *(_DWORD *)(a1 + 344)) {
    unsigned int v5 = *(_DWORD *)(a1 + 344);
  }
  *(_DWORD *)(a1 + 308) = v5;
  *(void *)(a1 + 328) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 104))(v4);
  *(void *)(a1 + 336) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v4);
  int v6 = *(uint64_t **)(a1 + 8);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (v7 == v8)
  {
LABEL_7:
    uint64_t v9 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v7 != &llvm::MachineBlockFrequencyInfo::ID)
    {
      v7 += 16;
      if (v7 == v8) {
        goto LABEL_7;
      }
    }
    uint64_t v9 = *(void *)(v7 + 8);
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 96))(v9, &llvm::MachineBlockFrequencyInfo::ID);
  int v11 = *(_DWORD *)(a1 + 256);
  if (v11 || *(_DWORD *)(a1 + 260))
  {
    uint64_t v12 = *(unsigned int *)(a1 + 264);
    if (v12 <= 4 * v11 || v12 < 0x41)
    {
      if (v12)
      {
        uint64_t v13 = *(_DWORD **)(a1 + 248);
        uint64_t v14 = 8 * v12;
        do
        {
          *uint64_t v13 = -1;
          v13 += 2;
          v14 -= 8;
        }
        while (v14);
      }
      *(void *)(a1 + 256) = 0;
    }
    else
    {
      sub_1CB83872C((_DWORD *)(a1 + 248));
    }
  }
  unint64_t v137 = (_DWORD *)(a1 + 272);
  int v15 = *(_DWORD *)(a1 + 280);
  if (v15 || *(_DWORD *)(a1 + 284))
  {
    uint64_t v16 = *(unsigned int *)(a1 + 288);
    if (v16 <= 4 * v15 || v16 < 0x41)
    {
      if (v16)
      {
        uint64_t v17 = *(_DWORD **)v137;
        uint64_t v18 = 8 * v16;
        do
        {
          *uint64_t v17 = -1;
          v17 += 2;
          v18 -= 8;
        }
        while (v18);
      }
      *(void *)(a1 + 280) = 0;
    }
    else
    {
      sub_1CB83872C(v137);
    }
  }
  sub_1CBA9FB98(v2, v10, 0, &v152);
  uint64_t v19 = (char *)v152;
  if (DWORD2(v152))
  {
    int v20 = 0;
    uint64_t v21 = 8 * DWORD2(v152);
    uint64_t v22 = (int *)(v152 + 4);
    do
    {
      int v23 = *v22;
      if ((*v22 + v20) <= *(_DWORD *)(a1 + 308))
      {
        LODWORD(v144) = *(v22 - 1);
        int v24 = (int)v144;
        sub_1CB9A74A0(a1 + 248, &v144)[1] = v20;
        LODWORD(v144) = v24;
        sub_1CB9A74A0((uint64_t)v137, &v144)[1] = v23;
        v20 += v23;
      }
      v22 += 2;
      v21 -= 8;
    }
    while (v21);
    uint64_t v19 = (char *)v152;
  }
  else
  {
    int v20 = 0;
  }
  *(_DWORD *)(a1 + 300) = v20;
  if (v19 != &v153) {
    free(v19);
  }
  if (!*(_DWORD *)(a1 + 256)) {
    return 0;
  }
  unint64_t v133 = *(unsigned char **)(v2 + 16);
  unsigned int v27 = sub_1CD413B08(*(void *)(a1 + 336), v2);
  if (v27)
  {
    uint64_t v132 = sub_1CBACC958(a1, *(void *)(v2 + 328), 0, v27);
    int v138 = sub_1CBACCC50(a1, v132, v27);
  }
  else
  {
    int v138 = 0;
    uint64_t v132 = 0;
  }
  uint64_t v28 = *(uint64_t **)(v2 + 328);
  uint64_t v129 = (uint64_t *)(v2 + 320);
  if (v28 != (uint64_t *)(v2 + 320))
  {
    uint64_t v131 = v2;
    unsigned int v130 = v27;
    while (1)
    {
      uint64_t v154 = 0;
      v155[0] = 0;
      *(void *)((char *)v155 + 5) = 0;
      char v156 = v158;
      uint64_t v157 = 0x200000000;
      uint64_t v159 = 0;
      unsigned int v160 = v162;
      uint64_t v161 = 0x600000000;
      v162[12] = 0;
      uint64_t v163 = v165;
      uint64_t v164 = 0x600000000;
      v165[12] = 0;
      char v166 = v168;
      uint64_t v167 = 0x600000000;
      v168[12] = 0;
      uint64_t v169 = v171;
      uint64_t v170 = 0x600000000;
      v171[12] = 0;
      if (!v27 || *(unsigned char *)(a1 + 312))
      {
        llvm::RegScavenger::init((llvm::RegScavenger *)&v152, (llvm::MachineBasicBlock *)v28);
        llvm::LiveRegUnits::addLiveIns((llvm::LiveRegUnits *)&v159, (const llvm::MachineFunction **)v28);
      }
      uint64_t v29 = v28[7];
      uint64_t v139 = v28 + 6;
      if ((uint64_t *)v29 != v28 + 6) {
        break;
      }
LABEL_202:
      if (v169 != v171) {
        free(v169);
      }
      if (v166 != v168) {
        free(v166);
      }
      if (v163 != v165) {
        free(v163);
      }
      if (v160 != v162) {
        free(v160);
      }
      if (v156 != v158) {
        free(v156);
      }
      uint64_t v28 = (uint64_t *)v28[1];
      if (v28 == v129) {
        goto LABEL_213;
      }
    }
    uint64_t v134 = v28 + 5;
    uint64_t v135 = v28;
    while (1)
    {
      if (!v29 || (uint64_t v30 = v29, (*(unsigned char *)v29 & 4) == 0))
      {
        uint64_t v30 = v29;
        if ((*(_WORD *)(v29 + 44) & 8) != 0)
        {
          uint64_t v30 = v29;
          do
            uint64_t v30 = *(void *)(v30 + 8);
          while ((*(_WORD *)(v30 + 44) & 8) != 0);
        }
      }
      uint64_t v31 = *(void *)(v30 + 8);
      int v143 = 0;
      if (!(*(unsigned int (**)(void, uint64_t, int *))(**(void **)(a1 + 328) + 96))(*(void *)(a1 + 328), v29, &v143)&& !(*(unsigned int (**)(void, uint64_t, int *))(**(void **)(a1 + 328) + 64))(*(void *)(a1 + 328), v29, &v143))
      {
        goto LABEL_125;
      }
      uint64_t v33 = *(void *)(a1 + 248);
      uint64_t v34 = *(unsigned int *)(a1 + 264);
      if (v34)
      {
        LODWORD(v35) = (v34 - 1) & (37 * v143);
        uint64_t v36 = (int *)(v33 + 8 * v35);
        int v37 = *v36;
        if (v143 == *v36) {
          goto LABEL_60;
        }
        int v100 = 1;
        while (v37 != -1)
        {
          int v101 = v35 + v100++;
          uint64_t v35 = v101 & (v34 - 1);
          int v37 = *(_DWORD *)(v33 + 8 * v35);
          if (v143 == v37)
          {
            uint64_t v36 = (int *)(v33 + 8 * v35);
            goto LABEL_60;
          }
        }
      }
      uint64_t v36 = (int *)(v33 + 8 * v34);
LABEL_60:
      if ((int *)(v33 + 8 * v34) != v36)
      {
        if (!v27)
        {
          unsigned int v38 = sub_1CBACCDE4((uint64_t)&v152, v2, (void *)v29);
          uint64_t v39 = v38;
          uint64_t v132 = sub_1CBACC958(a1, *(void *)(v2 + 328), (unint64_t *)v29, v38);
          int v138 = sub_1CBACCC50(a1, v132, v39);
        }
        if (*(unsigned char *)(a1 + 312))
        {
          int v40 = sub_1CBACCDE4((uint64_t)&v152, v2, (void *)v29);
          v149[0] = 0;
          int v138 = v40;
          uint64_t v41 = sub_1CB84B030((uint64_t)v28, v29, (unsigned __int8 **)v149, *(void *)(*(void *)(a1 + 328) + 8) + 136800, v40);
          uint64_t v43 = v42;
          LODWORD(v144) = 1;
          uint64_t v145 = 0;
          uint64_t v146 = 0;
          llvm::MachineInstr::addOperand(v42, v41, (const llvm::MachineOperand *)&v144);
          int v44 = *(_DWORD *)(*((void *)v132 + 4) + 4);
          uint64_t v145 = 0;
          LODWORD(v144) = 0;
          HIDWORD(v144) = v44;
          uint64_t v146 = 0;
          uint64_t v147 = 0;
          llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v144);
          LODWORD(v144) = 1;
          uint64_t v145 = 0;
          uint64_t v146 = 0;
          llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v144);
          LODWORD(v148) = v143;
          uint64_t v45 = sub_1CB9A74A0((uint64_t)v137, &v148)[1];
          LODWORD(v144) = 1;
          uint64_t v145 = 0;
          uint64_t v146 = v45;
          llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v144);
          LODWORD(v144) = 1;
          uint64_t v145 = 0;
          uint64_t v146 = 0;
          llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v144);
          if (v149[0])
          {
            int v46 = *(unsigned __int8 *)v149[0];
            if ((v46 - 4) > 0x1E)
            {
              if ((v46 - 3) >= 0xFFFFFFFE) {
                unsigned int v91 = v149[0];
              }
              else {
                unsigned int v91 = 0;
              }
              if ((v46 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v92 = (unint64_t)v91 + 8;
                goto LABEL_138;
              }
              if (v46 == 3) {
                *((void *)v149[0] + 1) = 0;
              }
            }
            else if ((*((unsigned char *)v149[0] + 1) & 0x7F) == 2 || *((_DWORD *)v149[0] + 3))
            {
              uint64_t v103 = *((void *)v149[0] + 2);
              if ((v103 & 4) != 0)
              {
                unint64_t v92 = v103 & 0xFFFFFFFFFFFFFFF8;
                if (v92)
                {
LABEL_138:
                  uint64_t v144 = v149;
                  sub_1CC5FA668(v92 + 16, &v144);
                }
              }
            }
          }
        }
        uint64_t v47 = *(unsigned __int16 **)(v29 + 16);
        int v48 = *v47;
        if ((unsigned __int16)(v48 - 1) <= 1u && (*(unsigned char *)(*(void *)(v29 + 32) + 48) & 0x10) != 0)
        {
LABEL_168:
          LODWORD(v51) = 1;
        }
        else
        {
          __int16 v49 = *(_WORD *)(v29 + 44);
          unint64_t v50 = *((void *)v47 + 1);
          if ((v49 & 0xC) != 0 && (v49 & 4) == 0)
          {
            uint64_t v104 = v29;
            if ((v50 & 0x100000) != 0) {
              goto LABEL_168;
            }
            while (1)
            {
              unsigned int v105 = *(unsigned __int16 *)(v104 + 44);
              LODWORD(v51) = (v105 >> 3) & 1;
              if ((v105 & 8) == 0) {
                break;
              }
              uint64_t v104 = *(void *)(v104 + 8);
              uint64_t v28 = v135;
              if ((*(unsigned char *)(*(void *)(v104 + 16) + 10) & 0x10) != 0) {
                goto LABEL_72;
              }
            }
            uint64_t v28 = v135;
          }
          else
          {
            uint64_t v51 = (v50 >> 20) & 1;
          }
        }
LABEL_72:
        unsigned int v52 = v48 - 322;
        if (v52 > 0x21) {
          unsigned int v53 = 0;
        }
        else {
          unsigned int v53 = dword_1CDB15A58[(__int16)v52];
        }
        int v54 = *(_DWORD *)(*(void *)(v29 + 32) + 32 * (v51 ^ 1) + 16);
        unsigned int v55 = v54 & 0xF0;
        int v141 = v54 & 0xF;
        unsigned int v142 = v55;
        if (!(_BYTE)v54)
        {
          sub_1CB954E5C(v53 >> 3, &v142, &v141);
          unsigned int v55 = v142;
        }
        v32.i32[0] = v55 >> 4;
        uint8x8_t v56 = (uint8x8_t)vcnt_s8(v32);
        v56.i16[0] = vaddlv_u8(v56);
        v149[0] = &v150;
        int v57 = &unk_1CD96EEF0;
        if (v53 / v56.i32[0] == 16) {
          int v57 = &unk_1CD96EEE0;
        }
        int v150 = v57[v56.u32[0] - 1];
        uint64_t v151 = 0x100000002;
        v149[1] = (void *)0x300000003;
        if (v51) {
          int v58 = 51;
        }
        else {
          int v58 = 50;
        }
        unsigned int v59 = sub_1CB951118(v58, &v150, 3, v133);
        uint64_t v140 = 0;
        uint64_t v60 = *(void *)(*(void *)(a1 + 328) + 8) + 48 * v59;
        if ((*(_WORD *)(v29 + 44) & 4) == 0)
        {
          int64_t v61 = (llvm::MachineFunction *)v28[4];
          int v148 = 0;
          uint64_t v62 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v61, v60, &v148, 0);
          if (!v148) {
            goto LABEL_85;
          }
          int v106 = *v148;
          if ((v106 - 4) > 0x1E)
          {
            if ((v106 - 3) >= 0xFFFFFFFE) {
              unsigned int v112 = v148;
            }
            else {
              unsigned int v112 = 0;
            }
            if ((v106 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v108 = (unint64_t)(v112 + 8);
              goto LABEL_191;
            }
            if (v106 == 3) {
              *((void *)v148 + 1) = 0;
            }
          }
          else if ((v148[1] & 0x7F) == 2 || *((_DWORD *)v148 + 3))
          {
            uint64_t v107 = *((void *)v148 + 2);
            if ((v107 & 4) != 0)
            {
              unint64_t v108 = v107 & 0xFFFFFFFFFFFFFFF8;
              if (v108)
              {
LABEL_191:
                uint64_t v144 = (void **)&v148;
                sub_1CC5FA668(v108 + 16, &v144);
              }
            }
          }
LABEL_85:
          uint64_t v63 = *v134;
          *(void *)(v62 + 24) = *v134;
          uint64_t v64 = *(void *)(v63 + 32);
          uint64_t v65 = *(unsigned int *)(v62 + 40);
          if (v65)
          {
            uint64_t v93 = *(void *)(v62 + 32);
            uint64_t v94 = *(void *)(v64 + 40);
            uint64_t v95 = 32 * v65;
            do
            {
              if (!*(unsigned char *)v93)
              {
                uint64_t v96 = *(unsigned int *)(v93 + 4);
                if ((int)v96 >= 0) {
                  int v97 = (uint64_t *)(*(void *)(v94 + 272) + 8 * v96);
                }
                else {
                  int v97 = (uint64_t *)(*(void *)(v94 + 24) + 16 * (v96 & 0x7FFFFFFF) + 8);
                }
                uint64_t v98 = *v97;
                if (*v97)
                {
                  uint64_t v99 = *(void *)(v98 + 16);
                  *(void *)(v98 + 16) = v93;
                  *(void *)(v93 + 16) = v99;
                  if (*(unsigned char *)(v93 + 3))
                  {
                    *(void *)(v93 + 24) = v98;
                  }
                  else
                  {
                    *(void *)(v93 + 24) = 0;
                    int v97 = (uint64_t *)(v99 + 24);
                  }
                }
                else
                {
                  *(void *)(v93 + 16) = v93;
                  *(void *)(v93 + 24) = 0;
                }
                *int v97 = v93;
              }
              v93 += 32;
              v95 -= 32;
            }
            while (v95);
          }
          uint64_t v66 = *(void *)(v64 + 728);
          if (v66) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v66 + 24))(v66, v62);
          }
          unint64_t v67 = *(void *)v29 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v62 = v67 | *(void *)v62 & 7;
          *(void *)(v62 + 8) = v29;
          *(void *)(v67 + 8) = v62;
          *(void *)uint64_t v29 = *(void *)v29 & 7 | v62;
LABEL_94:
          if (v140)
          {
            int v68 = *v140;
            if ((v68 - 4) > 0x1E)
            {
              if ((v68 - 3) >= 0xFFFFFFFE) {
                uint64_t v89 = v140;
              }
              else {
                uint64_t v89 = 0;
              }
              if ((v68 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v90 = (unint64_t)(v89 + 8);
                goto LABEL_132;
              }
              if (v68 == 3) {
                *((void *)v140 + 1) = 0;
              }
            }
            else if ((v140[1] & 0x7F) == 2 || *((_DWORD *)v140 + 3))
            {
              uint64_t v102 = *((void *)v140 + 2);
              if ((v102 & 4) != 0)
              {
                unint64_t v90 = v102 & 0xFFFFFFFFFFFFFFF8;
                if (v90)
                {
LABEL_132:
                  uint64_t v144 = (void **)&v140;
                  sub_1CC5FA668(v90 + 16, &v144);
                }
              }
            }
          }
          uint64_t v69 = 64;
          if (!v51) {
            uint64_t v69 = 0;
          }
          int v70 = *(_DWORD *)(*(void *)(v29 + 32) + v69 + 4);
          if ((v51 & 1) == 0)
          {
            uint64_t v145 = 0;
            uint64_t v146 = 0;
            uint64_t v147 = 0;
            LODWORD(v144) = 0x1000000;
            HIDWORD(v144) = v70;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v61, (const llvm::MachineOperand *)&v144);
          }
          int v71 = v141 | v142;
          LODWORD(v144) = 1;
          uint64_t v145 = 0;
          uint64_t v146 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v61, (const llvm::MachineOperand *)&v144);
          LODWORD(v144) = 1;
          uint64_t v145 = 0;
          uint64_t v146 = v71 | 0x1000u;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v61, (const llvm::MachineOperand *)&v144);
          if (v51)
          {
            uint64_t v145 = 0;
            LODWORD(v144) = 0;
            HIDWORD(v144) = v70;
            uint64_t v146 = 0;
            uint64_t v147 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v61, (const llvm::MachineOperand *)&v144);
          }
          int v72 = v36[1];
          uint64_t v2 = v131;
          if (*(unsigned char *)(a1 + 312)) {
            v72 *= *(_DWORD *)(a1 + 304);
          }
          unsigned int v27 = v130;
          int v73 = dword_1CDB15AE0[v71 & 0xF];
          unsigned int v74 = *v136 + v72;
          uint64_t v145 = 0;
          LODWORD(v144) = 0;
          HIDWORD(v144) = v138;
          uint64_t v146 = 0;
          uint64_t v147 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v61, (const llvm::MachineOperand *)&v144);
          LODWORD(v144) = 1;
          uint64_t v145 = 0;
          uint64_t v146 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v61, (const llvm::MachineOperand *)&v144);
          LODWORD(v144) = 1;
          uint64_t v145 = 0;
          uint64_t v146 = v74 >> v73;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v61, (const llvm::MachineOperand *)&v144);
          uint64_t v75 = *(void *)(*(void *)(v29 + 24) + 32);
          uint64_t v28 = v135;
          if (v75)
          {
            uint64_t v76 = *(void *)(v75 + 728);
            if (v76) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v76 + 32))(v76, v29);
            }
            uint64_t v77 = *(unsigned int *)(v29 + 40);
            if (v77)
            {
              uint64_t v78 = *(void *)(v29 + 32);
              uint64_t v79 = *(void *)(v75 + 40);
              uint64_t v80 = 32 * v77;
              do
              {
                if (!*(unsigned char *)v78)
                {
                  uint64_t v81 = *(unsigned int *)(v78 + 4);
                  if ((v81 & 0x80000000) != 0) {
                    uint64_t v82 = (uint64_t *)(*(void *)(v79 + 24) + 16 * (v81 & 0x7FFFFFFF) + 8);
                  }
                  else {
                    uint64_t v82 = (uint64_t *)(*(void *)(v79 + 272) + 8 * v81);
                  }
                  uint64_t v83 = *v82;
                  uint64_t v85 = *(void *)(v78 + 16);
                  uint64_t v84 = *(void *)(v78 + 24);
                  if (v78 != *v82) {
                    uint64_t v82 = (uint64_t *)(v85 + 24);
                  }
                  *uint64_t v82 = v84;
                  if (v84) {
                    uint64_t v86 = v84;
                  }
                  else {
                    uint64_t v86 = v83;
                  }
                  *(void *)(v86 + 16) = v85;
                  *(void *)(v78 + 16) = 0;
                  *(void *)(v78 + 24) = 0;
                }
                v78 += 32;
                v80 -= 32;
              }
              while (v80);
            }
          }
          *(void *)(v29 + 24) = 0;
          uint64_t v87 = *(unint64_t **)(v29 + 8);
          unint64_t v88 = *(void *)v29 & 0xFFFFFFFFFFFFFFF8;
          *uint64_t v87 = v88 | *v87 & 7;
          *(void *)(v88 + 8) = v87;
          *(void *)v29 &= 7uLL;
          *(void *)(v29 + 8) = 0;
          if (v149[0] != &v150) {
            free(v149[0]);
          }
          goto LABEL_125;
        }
        int64_t v61 = (llvm::MachineFunction *)v28[4];
        int v148 = 0;
        uint64_t v62 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v61, v60, &v148, 0);
        if (v148)
        {
          int v109 = *v148;
          if ((v109 - 4) > 0x1E)
          {
            if ((v109 - 3) >= 0xFFFFFFFE) {
              int v113 = v148;
            }
            else {
              int v113 = 0;
            }
            if ((v109 - 3) < 0xFFFFFFFE)
            {
              if (v109 == 3) {
                *((void *)v148 + 1) = 0;
              }
              goto LABEL_90;
            }
            unint64_t v111 = (unint64_t)(v113 + 8);
          }
          else
          {
            if ((v148[1] & 0x7F) != 2 && !*((_DWORD *)v148 + 3)) {
              goto LABEL_90;
            }
            uint64_t v110 = *((void *)v148 + 2);
            if ((v110 & 4) == 0) {
              goto LABEL_90;
            }
            unint64_t v111 = v110 & 0xFFFFFFFFFFFFFFF8;
            if (!v111) {
              goto LABEL_90;
            }
          }
          uint64_t v144 = (void **)&v148;
          sub_1CC5FA668(v111 + 16, &v144);
        }
LABEL_90:
        if (v139 != (void *)v29 && (*(_WORD *)(v29 + 44) & 4) != 0) {
          *(_WORD *)(v62 + 44) |= 0xCu;
        }
        sub_1CC31973C(v134, (uint64_t *)v29, v62);
        goto LABEL_94;
      }
LABEL_125:
      uint64_t v29 = v31;
      if ((void *)v31 == v139) {
        goto LABEL_202;
      }
    }
  }
LABEL_213:
  uint64_t v114 = *(void *)(v2 + 56);
  uint64_t v115 = *(void *)(v114 + 8);
  unint64_t v116 = (unint64_t)(*(void *)(v114 + 16) - v115) >> 3;
  int v117 = *(_DWORD *)(v114 + 32);
  uint64_t v118 = (-858993459 * v116 - v117);
  if ((int)v118 >= 1)
  {
    uint64_t v119 = 0;
    uint64_t v120 = *(void *)(a1 + 248);
    uint64_t v121 = *(unsigned int *)(a1 + 264);
    unsigned int v122 = v121 - 1;
    do
    {
      if (v121)
      {
        LODWORD(v123) = (37 * v119) & v122;
        uint64_t v124 = (unsigned int *)(v120 + 8 * v123);
        uint64_t v125 = *v124;
        if (v119 == v125)
        {
LABEL_217:
          if ((unsigned int *)(v120 + 8 * v121) != v124) {
            *(void *)(v115 + 40 * (v117 + v119) + 8) = -1;
          }
        }
        else
        {
          int v126 = 1;
          while (v125 != -1)
          {
            int v127 = v123 + v126++;
            uint64_t v123 = v127 & v122;
            uint64_t v125 = *(unsigned int *)(v120 + 8 * v123);
            if (v119 == v125)
            {
              uint64_t v124 = (unsigned int *)(v120 + 8 * v123);
              goto LABEL_217;
            }
          }
        }
      }
      ++v119;
    }
    while (v119 != v118);
  }
  uint64_t v128 = *(unsigned int *)(a1 + 300);
  uint64_t v25 = 1;
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(**(void **)(v2 + 344) + 8))(*(void *)(v2 + 344), 13, v128, 1, 0, 1, 3);
  return v25;
}

llvm::MachineInstr *sub_1CBACC958(uint64_t a1, unint64_t a2, unint64_t *a3, int a4)
{
  if (a3)
  {
    unsigned int v5 = a3;
    unint64_t v6 = a3[3];
  }
  else
  {
    unint64_t v6 = a2;
    unsigned int v5 = (unint64_t *)(a2 + 48);
    for (uint64_t i = *(void *)(a2 + 56); (unint64_t *)i != v5; uint64_t i = *(void *)(i + 8))
    {
      if (**(_WORD **)(i + 16) && **(_WORD **)(i + 16) != 69)
      {
        unsigned int v5 = (unint64_t *)i;
        break;
      }
    }
  }
  uint64_t v31 = 0;
  int8x8_t v32 = 0;
  uint64_t v8 = *(llvm::MachineFunction **)(v6 + 32);
  uint64_t v9 = llvm::MachineFunction::CreateMachineInstr(v8, *(void *)(*(void *)(a1 + 328) + 8) + 219504, &v32, 0);
  if (v32)
  {
    int v27 = *v32;
    if ((v27 - 4) > 0x1E)
    {
      if ((v27 - 3) >= 0xFFFFFFFE) {
        uint64_t v30 = v32;
      }
      else {
        uint64_t v30 = 0;
      }
      if ((v27 - 3) < 0xFFFFFFFE)
      {
        if (v27 == 3) {
          *((void *)v32 + 1) = 0;
        }
        goto LABEL_10;
      }
      unint64_t v29 = (unint64_t)(v30 + 8);
    }
    else
    {
      if ((v32[1] & 0x7F) != 2 && !*((_DWORD *)v32 + 3)) {
        goto LABEL_10;
      }
      uint64_t v28 = *((void *)v32 + 2);
      if ((v28 & 4) == 0) {
        goto LABEL_10;
      }
      unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFF8;
      if (!v29) {
        goto LABEL_10;
      }
    }
    uint64_t v33 = (uint64_t)&v32;
    sub_1CC5FA668(v29 + 16, &v33);
  }
LABEL_10:
  uint64_t v10 = *(void *)(v6 + 40);
  *((void *)v9 + 3) = v10;
  uint64_t v11 = *(void *)(v10 + 32);
  uint64_t v12 = *((unsigned int *)v9 + 10);
  if (v12)
  {
    uint64_t v19 = *((void *)v9 + 4);
    uint64_t v20 = *(void *)(v11 + 40);
    uint64_t v21 = 32 * v12;
    do
    {
      if (!*(unsigned char *)v19)
      {
        uint64_t v22 = *(unsigned int *)(v19 + 4);
        if ((int)v22 >= 0) {
          int v23 = (uint64_t *)(*(void *)(v20 + 272) + 8 * v22);
        }
        else {
          int v23 = (uint64_t *)(*(void *)(v20 + 24) + 16 * (v22 & 0x7FFFFFFF) + 8);
        }
        uint64_t v24 = *v23;
        if (*v23)
        {
          uint64_t v25 = *(void *)(v24 + 16);
          *(void *)(v24 + 16) = v19;
          *(void *)(v19 + 16) = v25;
          if (*(unsigned char *)(v19 + 3))
          {
            *(void *)(v19 + 24) = v24;
          }
          else
          {
            *(void *)(v19 + 24) = 0;
            int v23 = (uint64_t *)(v25 + 24);
          }
        }
        else
        {
          *(void *)(v19 + 16) = v19;
          *(void *)(v19 + 24) = 0;
        }
        *int v23 = v19;
      }
      v19 += 32;
      v21 -= 32;
    }
    while (v21);
  }
  uint64_t v13 = *(void *)(v11 + 728);
  if (v13) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v13 + 24))(v13, v9);
  }
  unint64_t v14 = *v5 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v9 = v14 | *(void *)v9 & 7;
  *((void *)v9 + 1) = v5;
  *(void *)(v14 + 8) = v9;
  *unsigned int v5 = *v5 & 7 | (unint64_t)v9;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  LODWORD(v33) = 0x1000000;
  HIDWORD(v33) = a4;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v33);
  LODWORD(v33) = 1;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v33);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0x1900000000;
  uint64_t v36 = 0;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v33);
  if (v31)
  {
    int v15 = *v31;
    if ((v15 - 4) > 0x1E)
    {
      if ((v15 - 3) >= 0xFFFFFFFE) {
        uint64_t v17 = v31;
      }
      else {
        uint64_t v17 = 0;
      }
      if ((v15 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v18 = (unint64_t)(v17 + 8);
LABEL_23:
        uint64_t v33 = (uint64_t)&v31;
        sub_1CC5FA668(v18 + 16, &v33);
        return v9;
      }
      if (v15 == 3) {
        *((void *)v31 + 1) = 0;
      }
    }
    else if ((v31[1] & 0x7F) == 2 || *((_DWORD *)v31 + 3))
    {
      uint64_t v26 = *((void *)v31 + 2);
      if ((v26 & 4) != 0)
      {
        unint64_t v18 = v26 & 0xFFFFFFFFFFFFFFF8;
        if (v18) {
          goto LABEL_23;
        }
      }
    }
  }
  return v9;
}

uint64_t sub_1CBACCC50(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2[4] + 4);
  if (!*(unsigned char *)(a1 + 312))
  {
    uint64_t v6 = a2[3];
    if (a2[1] == v6 + 48) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = a2[1];
    }
    uint64_t v17 = 0;
    uint64_t v8 = sub_1CB84B030(v6, v7, &v17, *(void *)(*(void *)(a1 + 328) + 8) + 136800, a3);
    uint64_t v10 = v9;
    LODWORD(v18) = 1;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v18);
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    LODWORD(v18) = 0;
    HIDWORD(v18) = v3;
    uint64_t v21 = 0;
    llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v18);
    LODWORD(v18) = 1;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v18);
    uint64_t v11 = *(unsigned int *)(a1 + 300);
    LODWORD(v18) = 1;
    uint64_t v19 = 0;
    uint64_t v20 = v11;
    llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v18);
    LODWORD(v18) = 1;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v18);
    if (!v17) {
      return a3;
    }
    int v12 = *v17;
    if ((v12 - 4) > 0x1E)
    {
      if ((v12 - 3) >= 0xFFFFFFFE) {
        unint64_t v14 = v17;
      }
      else {
        unint64_t v14 = 0;
      }
      if ((v12 - 3) < 0xFFFFFFFE)
      {
        if (v12 == 3) {
          *((void *)v17 + 1) = 0;
        }
        return a3;
      }
      unint64_t v15 = (unint64_t)(v14 + 8);
    }
    else
    {
      if ((v17[1] & 0x7F) != 2 && !*((_DWORD *)v17 + 3)) {
        return a3;
      }
      uint64_t v16 = *((void *)v17 + 2);
      if ((v16 & 4) == 0) {
        return a3;
      }
      unint64_t v15 = v16 & 0xFFFFFFFFFFFFFFF8;
      if (!v15) {
        return a3;
      }
    }
    unint64_t v18 = &v17;
    sub_1CC5FA668(v15 + 16, &v18);
    return a3;
  }
  return v3;
}

unint64_t sub_1CBACCDE4(uint64_t a1, uint64_t a2, void *a3)
{
  sub_1CD41C88C(a1, (uint64_t)a3);
  llvm::RegScavenger::backward((llvm::RegScavenger *)a1);
  unint64_t result = llvm::RegScavenger::FindUnusedReg(a1, (unsigned __int16 ***)&off_1E66AB048);
  if (!result)
  {
    llvm::RegScavenger::forward(a1);
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
    uint64_t v8 = *(void *)(v7 + 264)
       + 24 * *(_DWORD *)(v7 + 272) * ((*(void *)(v7 + 248) - *(void *)(v7 + 240)) >> 3);
    unsigned int StackObject = llvm::MachineFrameInfo::CreateStackObject(*(unsigned __int8 **)(a2 + 56), (unint64_t)*(unsigned int *)(v8 + 4) >> 3, 63 - __clz((unint64_t)*(unsigned int *)(v8 + 8) >> 3), 0, 0, 0);
    unsigned int v10 = *(_DWORD *)(a1 + 56);
    if (v10 >= *(_DWORD *)(a1 + 60)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v11 = (void *)(*(void *)(a1 + 48) + 16 * v10);
    void *v11 = StackObject;
    v11[1] = 0;
    ++*(_DWORD *)(a1 + 56);
    unint64_t v12 = llvm::RegScavenger::scavengeRegisterBackwards((void *)a1, (uint64_t)&off_1E66AB048, a3, 0, 0, 1);
    llvm::RegScavenger::backward((llvm::RegScavenger *)a1);
    return v12;
  }
  return result;
}

void sub_1CBACCF38(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t v59 = a1[2];
  v60[0] = v61;
  v61[0] = 0;
  v61[1] = 0;
  v60[1] = (void *)0x600000002;
  int v62 = 128;
  char v63 = 0;
  unint64_t __src = v66;
  uint64_t v65 = 0x600000000;
  int v67 = 0;
  long long v68 = 0u;
  memset(v69, 0, 27);
  if (*(unsigned char *)(v59 + 343))
  {
    uint64_t v3 = *(llvm::Module **)(*a1 + 40);
    uint64_t v4 = a1[43];
    uint64_t v70 = 1;
    for (uint64_t i = 8; i != 264; i += 16)
      *(uint64_t *)((char *)&v70 + i) = -4096;
    v73[0] = "agx.interpolations";
    __int16 v75 = 259;
    uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v3, v73);
    if (NamedMetadata)
    {
      uint64_t v7 = NamedMetadata;
      uint64_t v8 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 8 * v8;
        do
        {
          uint64_t v11 = *(void *)(**(void **)(v7 + 48) + v9);
          uint64_t v12 = *(unsigned int *)(v11 + 8);
          if (*(void *)(v11 - 8 * v12))
          {
            v73[0] = 0;
            v73[0] = *(const char **)(*(void *)(v11 - 8 * v12) + 128);
            sub_1CB91FE08((uint64_t)&v70, v73)[1] = v11;
          }
          v9 += 8;
        }
        while (v10 != v9);
      }
    }
    (*(void (**)(const char **__return_ptr, uint64_t, uint64_t))(*(void *)v4 + 128))(v73, v4, 9);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v4 + 136))(&v58, v4, 9);
    uint64_t v13 = v73[0];
    uint64_t v14 = v58;
    if (v73[0])
    {
      (*(void (**)(const char **__return_ptr, const char *))(*(void *)v73[0] + 16))(v73, v73[0]);
      unint64_t v15 = v73[0];
    }
    else
    {
      unint64_t v15 = 0;
    }
    if (v14)
    {
      (*(void (**)(const char **__return_ptr, uint64_t))(*(void *)v14 + 16))(v73, v14);
      uint64_t v16 = v73[0];
    }
    else
    {
      uint64_t v16 = 0;
    }
    while (((*(uint64_t (**)(const char *, const char *))(*(void *)v15 + 24))(v15, v16) & 1) == 0)
    {
      uint64_t v17 = *(void *)(*(uint64_t (**)(const char *))(*(void *)v15 + 32))(v15);
      LODWORD(v58) = 0;
      LODWORD(v58) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 400))(v4, v17);
      if (v70)
      {
        int v18 = 16;
        uint64_t v19 = &v71;
      }
      else
      {
        int v18 = v72;
        if (!v72) {
          goto LABEL_24;
        }
        uint64_t v19 = v71;
      }
      int v20 = v18 - 1;
      uint64_t v21 = (v18 - 1) & ((v17 >> 4) ^ (v17 >> 9));
      uint64_t v22 = v19[2 * v21];
      if (v17 != v22)
      {
        int v23 = 1;
        while (v22 != -4096)
        {
          int v24 = v21 + v23++;
          uint64_t v21 = v24 & v20;
          uint64_t v22 = v19[2 * v21];
          if (v17 == v22) {
            goto LABEL_21;
          }
        }
LABEL_24:
        uint64_t v25 = 0;
        goto LABEL_25;
      }
LABEL_21:
      uint64_t v25 = v19[2 * v21 + 1];
LABEL_25:
      v73[0] = (const char *)&unk_1F25F63E0;
      v73[1] = (const char *)v60;
      v73[2] = (const char *)&v58;
      unsigned int v74 = v73;
      sub_1CB91FCAC(v25, (uint64_t)v73);
      if (v74 == v73)
      {
        (*((void (**)(const char **))v73[0] + 4))(v73);
      }
      else if (v74)
      {
        (*((void (**)(void))*v74 + 5))();
      }
      (*(void (**)(const char *))(*(void *)v15 + 40))(v15);
    }
    if (v16) {
      (*(void (**)(const char *))(*(void *)v16 + 8))(v16);
    }
    (*(void (**)(const char *))(*(void *)v15 + 8))(v15);
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    if (v13) {
      (*(void (**)(const char *))(*(void *)v13 + 8))(v13);
    }
    if ((v70 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v71, 8);
    }
    int v26 = v62;
    uint64_t v27 = v65;
    if ((v67 & 0x3F) != 0) {
      *((void *)__src + v65 - 1) &= ~(-1 << (v67 & 0x3F));
    }
    unsigned int v28 = v27;
    int v67 = v26;
    unsigned int v29 = v26 + 63;
    if (v27 != (v26 + 63) >> 6)
    {
      uint64_t v30 = v29 >> 6;
      if (v27 > v30)
      {
        LODWORD(v65) = v29 >> 6;
        unsigned int v28 = v29 >> 6;
      }
      else
      {
        if (v30 > HIDWORD(v65)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v30 != v27) {
          bzero((char *)__src + 8 * v27, 8 * (v30 - v27));
        }
        unsigned int v28 = v30;
        LODWORD(v65) = v30;
        LOBYTE(v26) = v67;
      }
    }
    int v31 = v26 & 0x3F;
    if (v31) {
      *((void *)__src + v28 - 1) &= ~(-1 << v31);
    }
  }
  else
  {
    unsigned int v28 = 0;
  }
  int8x8_t v32 = a1 + 40;
  uint64_t v33 = (void *)a1[41];
  if (v33 != a1 + 40)
  {
    int v57 = a1 + 40;
    do
    {
      for (uint64_t j = v33[7]; (void *)j != v33 + 6; uint64_t j = *(void *)(j + 8))
      {
        uint64_t v35 = *(unsigned __int16 **)(j + 16);
        int v36 = *v35;
        BOOL v38 = (v36 - 9) <= 0x3C && ((1 << (v36 - 9)) & 0x1000000000000605) != 0
           || v36 == 0;
        if (!v38 && (v35[4] & 0x10) == 0) {
          ++LODWORD(v69[1]);
        }
        if ((v36 - 419) <= 3)
        {
          BYTE8(v69[1]) = 1;
        }
        else if ((v36 - 6165) <= 1)
        {
          BYTE9(v69[1]) = 1;
        }
        else if ((v36 - 566) <= 2)
        {
          BYTE10(v69[1]) = 1;
        }
        uint64_t v39 = *((void *)v35 + 2);
        BOOL v40 = (v39 & 0x800200) == 8389120;
        BOOL v41 = (v39 & 0x800100) == 8388864;
        if ((v39 & 0x800100) == 0x800100 || (v39 & 0x800200) == 8389120)
        {
          unsigned int v49 = sub_1CBDA6464(v36, 0x2Fu);
          int8x8_t v32 = v57;
          if ((*(unsigned char *)(*(void *)(j + 32) + 32 * v49 + 17) & 4) != 0)
          {
            BOOL v41 = 0;
            BOOL v40 = 0;
          }
        }
        if ((v39 & 0x1D00) == 0x500)
        {
          uint64_t v43 = *(void *)(j + 48);
          if ((v43 & 7) != 0)
          {
            int v44 = *(uint64_t **)((v43 & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          else
          {
            int v44 = (uint64_t *)(v43 & 0xFFFFFFFFFFFFFFF8);
            *(void *)(j + 48) = v44;
          }
          uint64_t v45 = *v44;
          BOOL v41 = 0;
          if ((v45 & 4) != 0)
          {
            unsigned int v52 = (_DWORD *)(v45 & 0xFFFFFFFFFFFFFFF8);
            if ((v45 & 0xFFFFFFFFFFFFFFF8) != 0 && v52[2] >= 7u)
            {
              int v53 = (*(uint64_t (**)(_DWORD *))(*(void *)v52 + 48))(v52);
              int8x8_t v32 = v57;
              if (!v53) {
                BOOL v41 = 1;
              }
            }
          }
        }
        else if ((v39 & 0x1E00) == 0x600)
        {
          uint64_t v46 = *(void *)(j + 48);
          if ((v46 & 7) != 0)
          {
            uint64_t v47 = *(uint64_t **)((v46 & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          else
          {
            uint64_t v47 = (uint64_t *)(v46 & 0xFFFFFFFFFFFFFFF8);
            *(void *)(j + 48) = v47;
          }
          uint64_t v48 = *v47;
          if ((v48 & 4) != 0)
          {
            unsigned int v55 = (_DWORD *)(v48 & 0xFFFFFFFFFFFFFFF8);
            BOOL v40 = (v48 & 0xFFFFFFFFFFFFFFF8) != 0
               && v55[2] >= 7u
               && !(*(unsigned int (**)(_DWORD *))(*(void *)v55 + 48))(v55);
            int8x8_t v32 = v57;
          }
          else
          {
            BOOL v40 = 0;
          }
        }
        if (v41 || v40)
        {
          sub_1CBB34D44(j, (uint64_t)&v70);
          if (!BYTE6(v71)) {
            sub_1CBB34E88((uint64_t)v73);
          }
          if (v40) {
            int v54 = v69;
          }
          else {
            int v54 = &v68;
          }
          *(void *)int v54 = -1;
          *((void *)v54 + 1) = -1;
          int8x8_t v32 = v57;
        }
        if ((*(unsigned char *)j & 4) == 0)
        {
          while ((*(_WORD *)(j + 44) & 8) != 0)
            uint64_t j = *(void *)(j + 8);
        }
      }
      uint64_t v33 = (void *)v33[1];
    }
    while (v33 != v32);
    unsigned int v28 = v65;
  }
  DWORD1(v69[1]) = 0;
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x600000000;
  if (v28) {
    BOOL v50 = &__src == (void **)a2;
  }
  else {
    BOOL v50 = 1;
  }
  if (!v50)
  {
    if (v28 >= 7) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy((void *)(a2 + 16), __src, 8 * v28);
    *(_DWORD *)(a2 + 8) = v28;
  }
  *(_DWORD *)(a2 + 64) = v67;
  long long v51 = v69[0];
  *(_OWORD *)(a2 + 72) = v68;
  *(_OWORD *)(a2 + 88) = v51;
  *(_OWORD *)(a2 + 99) = *(_OWORD *)((char *)v69 + 11);
  if (__src != v66) {
    free(__src);
  }
  if (v60[0] != v61) {
    free(v60[0]);
  }
}

uint64_t sub_1CBACDCDC(uint64_t a1, llvm::Module *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0238, memory_order_acquire) & 1) == 0)
  {
    uint64_t v7 = a2;
    int v8 = __cxa_guard_acquire(&qword_1EBCC0238);
    a2 = v7;
    if (v8)
    {
      byte_1EBCC01F2 = 0;
      __cxa_guard_release(&qword_1EBCC0238);
      a2 = v7;
    }
  }
  if (byte_1EBCC01F2)
  {
    uint64_t v9 = (const void **)a2;
    uint64_t v10 = a1 + 792;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0248, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCC0248))
    {
      qword_1EBCC0240 = 0x4059000000000000;
      __cxa_guard_release(&qword_1EBCC0248);
    }
    double v11 = (*(double (**)(uint64_t))(*(void *)v10 + 744))(a1 + 792);
    a2 = (llvm::Module *)v9;
    if (v11 >= *(double *)&qword_1EBCC0240)
    {
      double v12 = (*(double (**)(uint64_t, const void **))(*(void *)v10 + 744))(a1 + 792, v9);
      double v13 = (*(double (**)(uint64_t))(*(void *)v10 + 736))(a1 + 792);
      double v14 = (*(double (**)(uint64_t))(*(void *)v10 + 744))(a1 + 792);
      double v15 = v14 / (*(double (**)(uint64_t))(*(void *)v10 + 736))(a1 + 792);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0258, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EBCC0258))
      {
        qword_1EBCC0250 = 0x3FF19999A0000000;
        __cxa_guard_release(&qword_1EBCC0258);
      }
      a2 = (llvm::Module *)v9;
      if (v15 >= *(double *)&qword_1EBCC0250)
      {
        double v16 = v12 - v13;
        unsigned int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(a1 + 792);
        unsigned int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(a1 + 792);
        sub_1CBAD7600("\t", v9 + 24, (void **)&v37.__r_.__value_.__l.__data_);
        uint64_t v19 = "Mix\t";
        int v20 = "GLd\t";
        if (v18 <= 2 * v17) {
          int v20 = "Mix\t";
        }
        if (v18 <= v17) {
          int v20 = "Mix\t";
        }
        if (v17 > 2 * v18) {
          uint64_t v19 = "Smp\t";
        }
        if (v17 > v18) {
          uint64_t v21 = v19;
        }
        else {
          uint64_t v21 = v20;
        }
        std::string::append(&v37, v21);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 80))(a1 + 792)) {
          uint64_t v22 = "Yes\t";
        }
        else {
          uint64_t v22 = "No\t";
        }
        int v23 = std::string::append(&v37, v22);
        int v24 = llvm::dbgs((llvm *)v23);
        uint64_t v25 = v24;
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v26 = &v37;
        }
        else {
          int v26 = (std::string *)v37.__r_.__value_.__r.__words[0];
        }
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = *((unsigned char *)&v37.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          size_t size = v37.__r_.__value_.__l.__size_;
        }
        llvm::raw_ostream::write(v24, (const char *)v26, size);
        double v28 = (*(double (**)(uint64_t))(*(void *)v10 + 736))(a1 + 792);
        v36[0] = &unk_1F25F6490;
        v36[1] = "%0.4f\t";
        *(double *)&v36[2] = v28;
        unsigned int v29 = llvm::raw_ostream::operator<<(v25, (uint64_t)v36);
        double v30 = (*(double (**)(uint64_t))(*(void *)v10 + 744))(a1 + 792);
        v35[0] = &unk_1F25F6490;
        v35[1] = "%0.4f\t";
        *(double *)&v35[2] = v30;
        int v31 = llvm::raw_ostream::operator<<(v29, (uint64_t)v35);
        v34[0] = &unk_1F25F6490;
        v34[1] = "%0.4f\t";
        *(double *)&v34[2] = v16;
        int8x8_t v32 = llvm::raw_ostream::operator<<(v31, (uint64_t)v34);
        v33[0] = &unk_1F25F6490;
        v33[1] = "%0.4f\n";
        *(double *)&v33[2] = v15;
        llvm::raw_ostream::operator<<(v32, (uint64_t)v33);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
        a2 = (llvm::Module *)v9;
      }
    }
  }
  uint64_t v3 = sub_1CD2819C0(a1, a2);
  *(_DWORD *)(a1 + 1752) = 0;
  *(_DWORD *)(a1 + 1808) = 0;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1843) = 0u;
  sub_1CC781B2C((void *)(a1 + 1592));
  *(_DWORD *)(a1 + 1672) = 0;
  sub_1CC7614E4((_DWORD *)(a1 + 1872));
  *(_DWORD *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  uint64_t v4 = *(unsigned int *)(a1 + 1168);
  if (v4) {
    bzero(*(void **)(a1 + 1160), 8 * v4);
  }
  *(void *)(a1 + 1240) = 0;
  uint64_t v5 = *(void *)(a1 + 264);
  *(_DWORD *)(v5 + 144) = 0;
  *(unsigned char *)(v5 + 148) = 0;
  return v3;
}

uint64_t sub_1CBACE260(uint64_t a1, const llvm::GlobalValue *a2)
{
  uint64_t result = llvm::Value::getMetadata((uint64_t)a2, "agx.bind", 8uLL);
  if (!result) {
    goto LABEL_2;
  }
  uint64_t v5 = (void *)(result - 8 * *(unsigned int *)(result + 8));
  uint64_t v6 = v5[1];
  if (*(unsigned char *)(*(void *)(*(void *)(*v5 + 128) + 24) + 8) == 17)
  {
    if (*(unsigned char *)v6 != 1 || (uint64_t v7 = *(void *)(v6 + 128), *(unsigned char *)(v7 + 16) != 16))
    {
      int v8 = (void *)(v6 - 8 * *(unsigned int *)(v6 + 8));
      uint64_t v9 = *(void *)(*v8 + 128);
      uint64_t v10 = (void *)(v9 + 24);
      if (*(_DWORD *)(v9 + 32) >= 0x41u) {
        uint64_t v10 = (void *)*v10;
      }
      double v11 = (void *)*v10;
      uint64_t v12 = v8[1];
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 128);
  }
  double v13 = (void *)(v7 + 24);
  if (*(_DWORD *)(v7 + 32) >= 0x41u) {
    double v13 = (void *)*v13;
  }
  double v11 = (void *)*v13;
  uint64_t v12 = v5[2];
LABEL_14:
  uint64_t v14 = *(void *)(v12 + 128);
  double v15 = (void *)(v14 + 24);
  if (*(_DWORD *)(v14 + 32) >= 0x41u) {
    double v15 = (void *)*v15;
  }
  if (v11 == 114 || v11 == 18)
  {
    unsigned int v17 = (void *)*v15;
    uint64_t result = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), a2);
    *(_DWORD *)(result + 16) = v17;
    return result;
  }
LABEL_2:
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFFFFFF00) == 0x200)
  {
    return sub_1CD27B5E4(a1, a2);
  }
  return result;
}

uint64_t sub_1CBACE3A8(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)(*(void *)(a1 + 272) + 16);
  uint64_t v4 = *(void *)(a1 + 248);
  char v5 = *(unsigned char *)(v4 + 519);
  uint64_t v6 = *(void *)(v4 + 504);
  if (v5 >= 0) {
    uint64_t v7 = (unsigned __int16 *)(v4 + 496);
  }
  else {
    uint64_t v7 = *(unsigned __int16 **)(v4 + 496);
  }
  uint64_t v8 = v5 & 0x7F;
  if (v5 < 0) {
    uint64_t v8 = v6;
  }
  switch(v8)
  {
    case 3:
      if (*v7 ^ 0x3167 | *((unsigned __int8 *)v7 + 2) ^ 0x35) {
        uint64_t v2 = 0;
      }
      else {
        uint64_t v2 = 0x100000001;
      }
      break;
    case 4:
      if (*(_DWORD *)v7 != 1731539303) {
        goto LABEL_16;
      }
      goto LABEL_11;
    case 5:
      int v9 = *(_DWORD *)v7;
      int v10 = *((unsigned __int8 *)v7 + 4);
      if (v9 == 926050143 && v10 == 53) {
LABEL_11:
      }
        uint64_t v2 = 0x100000011;
      else {
LABEL_16:
      }
        uint64_t v2 = 0;
      break;
    case 7:
      uint64_t v2 = 0x100000011;
      if (*(_DWORD *)v7 == 1731539303 && *(_DWORD *)((char *)v7 + 3) == 811674983)
      {
        uint64_t v2 = 0x100000004;
      }
      else if (*(_DWORD *)v7 == 1731539303 && *(_DWORD *)((char *)v7 + 3) == 811740519)
      {
        uint64_t v2 = 0x100000005;
      }
      else if (*(_DWORD *)v7 != 1731539303 || *(_DWORD *)((char *)v7 + 3) != 811806055)
      {
        if (*(_DWORD *)v7 == 1932865895 && *(_DWORD *)((char *)v7 + 3) == 811674995)
        {
          uint64_t v2 = 0x100000006;
        }
        else if (*(_DWORD *)v7 == 1932865895 && *(_DWORD *)((char *)v7 + 3) == 811740531)
        {
          uint64_t v2 = 0x100000007;
        }
        else if (*(_DWORD *)v7 == 1932865895 && *(_DWORD *)((char *)v7 + 3) == 828517747)
        {
          uint64_t v2 = 0x10000001ALL;
        }
        else if (*(_DWORD *)v7 == 1664430439 && *(_DWORD *)((char *)v7 + 3) == 811674979)
        {
          uint64_t v2 = 0x100000008;
        }
        else if (*(_DWORD *)v7 == 1664430439 && *(_DWORD *)((char *)v7 + 3) == 811740515)
        {
          uint64_t v2 = 0x100000009;
        }
        else if (*(_DWORD *)v7 == 1882599783 && *(_DWORD *)((char *)v7 + 3) == 811674992)
        {
          uint64_t v2 = 0x10000000ELL;
        }
        else if (*(_DWORD *)v7 == 1882599783 && *(_DWORD *)((char *)v7 + 3) == 811740528)
        {
          uint64_t v2 = 0x10000000FLL;
        }
        else if (*(_DWORD *)v7 == 1882599783 && *(_DWORD *)((char *)v7 + 3) == 828517744)
        {
          uint64_t v2 = 0x10000001BLL;
        }
        else if (*(_DWORD *)v7 == 1731604839 && *(_DWORD *)((char *)v7 + 3) == 811674983)
        {
          uint64_t v2 = 0x100000010;
        }
        else if (*(_DWORD *)v7 == 1731604839 && *(_DWORD *)((char *)v7 + 3) == 811740519)
        {
          uint64_t v2 = 0x100000019;
        }
        else if (*(_DWORD *)v7 == 1932931431 && *(_DWORD *)((char *)v7 + 3) == 811674995)
        {
          uint64_t v2 = 0x100000012;
        }
        else if (*(_DWORD *)v7 == 1932931431 && *(_DWORD *)((char *)v7 + 3) == 811740531)
        {
          uint64_t v2 = 0x10000001DLL;
        }
        else if (*(_DWORD *)v7 == 1664495975 && *(_DWORD *)((char *)v7 + 3) == 811674979)
        {
          uint64_t v2 = 0x100000013;
        }
        else
        {
          uint64_t v2 = 0x100000014;
          if (*(_DWORD *)v7 ^ 0x70373167 | *(_DWORD *)((char *)v7 + 3) ^ 0x30612D70) {
            uint64_t v2 = 0;
          }
        }
      }
      break;
    default:
      break;
  }
  if ((v2 & 0xFF00000000) != 0) {
    uint64_t v28 = v2;
  }
  else {
    uint64_t v28 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 88))(v3, v28);
}

void sub_1CBACE718(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(*(void *)a2 + 32);
  int v7 = *(_DWORD *)(v6 + 32 * a3 + 16) - 81;
  if (*(_DWORD *)(v6 + 32 * a3)) {
    int v8 = (*(_DWORD *)(v6 + 32 * a3) >> 8) & 0xFFF;
  }
  else {
    int v8 = 0;
  }
  if ((v8 & 0x200) != 0) {
    unsigned int v9 = v8 & 0xFFFFFDFF;
  }
  else {
    unsigned int v9 = v8;
  }
  if ((v9 & 0xFFFFFEFF) != 0)
  {
    if (v9) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
  }
  else
  {
    unsigned int v10 = dword_1CDB15B8C[v7];
  }
  BOOL v11 = (v9 & 0xFFFFFEFF) != 0;
  if ((v9 & 0x100) != 0) {
    goto LABEL_15;
  }
  while (2)
  {
    if (v11 && v10 >= dword_1CDB15B8C[v7])
    {
LABEL_15:
      *(unsigned char *)(a1 + 23) = 6;
      strcpy((char *)a1, "Unused");
      return;
    }
    int v12 = 2;
    switch(*(_DWORD *)(v6 + 32 * a3 + 16))
    {
      case 'Q':
        int v13 = *(_DWORD *)(v6 + 32 * a3 + 4);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        std::to_string(&__p, v13);
        uint64_t v14 = std::string::insert(&__p, 0, "ir");
        std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
        v30.__r_.__value_.__r.__words[0] = v14->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
        char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        std::string::size_type v17 = v30.__r_.__value_.__r.__words[0];
        *(void *)a1 = v15;
        *(void *)(a1 + 8) = v17;
        *(void *)(a1 + 15) = *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 7);
        *(unsigned char *)(a1 + 23) = v16;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_42;
      case 'R':
        goto LABEL_25;
      case 'S':
        int v12 = 4;
        goto LABEL_25;
      case 'T':
        int v12 = 8;
        goto LABEL_25;
      case 'U':
        int v12 = 16;
LABEL_25:
        int v18 = *(_DWORD *)(v6 + 32 * a3 + 4);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        std::to_string(&__p, v18);
        uint64_t v19 = std::string::insert(&__p, 0, "{ ir");
        std::string::size_type v20 = v19->__r_.__value_.__r.__words[0];
        v30.__r_.__value_.__r.__words[0] = v19->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
        char v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        std::string::size_type v22 = v30.__r_.__value_.__r.__words[0];
        *(void *)a1 = v20;
        *(void *)(a1 + 8) = v22;
        *(void *)(a1 + 15) = *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 7);
        *(unsigned char *)(a1 + 23) = v21;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        int v23 = v18 + v12;
        int v24 = v18 + 1;
        do
        {
          std::to_string(&v30, v24);
          uint64_t v25 = std::string::insert(&v30, 0, ", ir");
          std::string::size_type v26 = v25->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v26;
          v25->__r_.__value_.__l.__size_ = 0;
          v25->__r_.__value_.__r.__words[2] = 0;
          v25->__r_.__value_.__r.__words[0] = 0;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
          }
          else {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          std::string::append((std::string *)a1, (const std::string::value_type *)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v30.__r_.__value_.__l.__data_);
          }
          ++v24;
        }
        while (v24 < v23);
        std::string::append((std::string *)a1, " }");
LABEL_42:
        if ((*(unsigned char *)(*(void *)(*(void *)a2 + 32) + 32 * (a3 + 1) + 16) & 0x10) != 0) {
          std::string::append((std::string *)a1, ".lu");
        }
        break;
      default:
        unsigned int v10 = 0;
        BOOL v11 = 0;
        continue;
    }
    break;
  }
}

void sub_1CBACEA74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  v110[0] = *(void *)(a1 + 264);
  v110[1] = a1;
  v126[0] = 0;
  v126[1] = 0;
  int v127 = v129;
  uint64_t v128 = 0x800000000;
  v129[128] = 0;
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 344);
  int v5 = **(unsigned __int16 **)(a2 + 16);
  uint64_t v6 = sub_1CBE52E8C(v5);
  if ((v6 & 0xFF00000000) != 0)
  {
    BOOL v7 = v6 == 85 || v6 == 18;
    if (!v7
      || ((*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)v4 + 8))(v4, 39, 1, 1, 0, 1, 2), int v5 = **(unsigned __int16 **)(v2 + 16), v6 = sub_1CBE52E8C(v5), (v6 & 0xFF00000000) != 0))
    {
      if ((v6 - 51) <= 0x18 && ((1 << (v6 - 51)) & 0x1F80007) != 0)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)v4 + 8))(v4, 41, 1, 1, 0, 1, 2);
        int v5 = **(unsigned __int16 **)(v2 + 16);
      }
    }
  }
  int v9 = *(_DWORD *)(a1 + 7952);
  if ((v5 - 542) >= 2)
  {
    if (v5 == 544) {
      int v10 = -*(_DWORD *)(*(void *)(v2 + 32) + 32 * sub_1CBDA6464(544, 0x3Cu) + 16);
    }
    else {
      int v10 = 0;
    }
  }
  else
  {
    int v10 = -1;
  }
  *(_DWORD *)(a1 + 7952) = (v10 + v9) & ~((v10 + v9) >> 31);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 272) + 96))(*(void *)(a1 + 272)))
  {
    uint64_t v123 = v125;
    long long v124 = xmmword_1CD96DBD0;
    LODWORD(v102) = 0;
    char v106 = 0;
    uint64_t v107 = 0;
    int v109 = (std::string::size_type *)&v123;
    int v108 = 0;
    int v101 = &unk_1F2646FA8;
    uint64_t v103 = 0;
    uint64_t v104 = 0;
    unsigned int v105 = 0;
    BOOL v11 = *(unsigned __int16 **)(v2 + 16);
    uint64_t v12 = sub_1CBE52E8C(*v11);
    if ((v12 & 0xFF00000000) == 0) {
      llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
    }
    if (v12 == 80 || v12 == 167 || v12 == 165)
    {
      if (*(_DWORD *)(a1 + 7952))
      {
        int v76 = 0;
        do
        {
          if (v104 == v105) {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v101, "\t", 1uLL);
          }
          else {
            *v105++ = 9;
          }
          ++v76;
        }
        while (v76 != *(_DWORD *)(a1 + 7952));
        __int16 v75 = v104;
        unsigned int v74 = v105;
      }
      else
      {
        unsigned int v74 = 0;
        __int16 v75 = 0;
      }
      if ((unint64_t)(v75 - v74) > 3)
      {
        *(_DWORD *)unsigned int v74 = 539963145;
        v105 += 4;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v101, "\t// ", 4uLL);
      }
      sub_1CD41C9F4(&v130, v2);
      if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v77 = &v130;
      }
      else {
        uint64_t v77 = (std::string *)v130.__r_.__value_.__r.__words[0];
      }
      if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = *((unsigned char *)&v130.__r_.__value_.__s + 23) & 0x7F;
      }
      else {
        size_t size = v130.__r_.__value_.__l.__size_;
      }
      llvm::raw_ostream::write((llvm::raw_ostream *)&v101, (const char *)v77, size);
      if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v130.__r_.__value_.__l.__data_);
      }
      BOOL v11 = *(unsigned __int16 **)(v2 + 16);
    }
    uint64_t v13 = *((void *)v11 + 1);
    if ((v13 & 0x2000) == 0)
    {
      int v14 = *v11;
      if (((v14 - 9) > 0x3C || ((1 << (v14 - 9)) & 0x1000000000000605) == 0)
        && *v11
        && (v13 & 0x10) == 0
        && (v11[8] & 1) == 0)
      {
        if (v14 == 6167)
        {
          unint64_t v15 = *(void *)(*(void *)(v2 + 32) + 48);
          switch(v15)
          {
            case '(':
              char v16 = "rel_preempt";
              goto LABEL_245;
            case ')':
              char v16 = "lock_preempt";
              goto LABEL_245;
            case '*':
            case '+':
            case ',':
            case '-':
            case '.':
            case '/':
              break;
            case '0':
              char v16 = "util_done";
              goto LABEL_245;
            case '1':
              char v16 = "util_fail";
              goto LABEL_245;
            case '2':
              char v16 = "util_unlock";
              goto LABEL_245;
            default:
              if (v15 != 32) {
                break;
              }
              char v16 = "yield";
LABEL_245:
              uint64_t v83 = (llvm::raw_ostream *)(*(uint64_t (**)(void))(**(void **)(a1 + 272) + 120))(*(void *)(a1 + 272));
              uint64_t v84 = v83;
              uint64_t v85 = *((void *)v83 + 4);
              if ((unint64_t)(*((void *)v83 + 3) - v85) > 9)
              {
                *(_WORD *)(v85 + 8) = 30768;
                *(void *)uint64_t v85 = *(void *)"message 0x";
                *((void *)v83 + 4) += 10;
              }
              else
              {
                llvm::raw_ostream::write(v83, "message 0x", 0xAuLL);
              }
              llvm::write_hex(v84, v15, 1, 0, 0);
              uint64_t v86 = *((void *)v84 + 4);
              if ((unint64_t)(*((void *)v84 + 3) - v86) > 2)
              {
                *(unsigned char *)(v86 + 2) = 32;
                *(_WORD *)uint64_t v86 = 15648;
                uint64_t v87 = (unsigned char *)(*((void *)v84 + 4) + 3);
                *((void *)v84 + 4) = v87;
              }
              else
              {
                llvm::raw_ostream::write(v84, " = ", 3uLL);
                uint64_t v87 = (unsigned char *)*((void *)v84 + 4);
              }
              size_t v88 = strlen(v16);
              size_t v89 = v88;
              if (v88 <= *((void *)v84 + 3) - (void)v87)
              {
                if (v88)
                {
                  memcpy(v87, v16, v88);
                  uint64_t v87 = (unsigned char *)(*((void *)v84 + 4) + v89);
                  *((void *)v84 + 4) = v87;
                }
              }
              else
              {
                llvm::raw_ostream::write(v84, v16, v88);
                uint64_t v87 = (unsigned char *)*((void *)v84 + 4);
              }
              if (*((unsigned char **)v84 + 3) == v87)
              {
                llvm::raw_ostream::write(v84, "\n", 1uLL);
              }
              else
              {
                *uint64_t v87 = 10;
                ++*((void *)v84 + 4);
              }
              break;
          }
        }
LABEL_169:
        sub_1CBACFEBC(&__p, v2, 0);
        unint64_t v62 = HIBYTE(v113) & 0x7F;
        if (v113 < 0) {
          unint64_t v62 = (unint64_t)v112;
        }
        if (v62)
        {
          if (*(_DWORD *)(a1 + 7952) != -1)
          {
            int v63 = -1;
            do
            {
              if (v104 == v105) {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v101, "\t", 1uLL);
              }
              else {
                *v105++ = 9;
              }
              ++v63;
            }
            while (v63 != *(_DWORD *)(a1 + 7952));
          }
          uint64_t v64 = v105;
          if ((unint64_t)(v104 - v105) > 0x14)
          {
            *(_OWORD *)unsigned int v105 = *(_OWORD *)"// Read Locations: { ";
            *(void *)(v64 + 13) = *(void *)"ions: { ";
            v105 += 21;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v101, "// Read Locations: { ", 0x15uLL);
          }
          if (v113 >= 0) {
            p_p = (const char *)&__p;
          }
          else {
            p_p = (const char *)__p;
          }
          if (v113 >= 0) {
            size_t v66 = HIBYTE(v113) & 0x7F;
          }
          else {
            size_t v66 = (size_t)v112;
          }
          llvm::raw_ostream::write((llvm::raw_ostream *)&v101, p_p, v66);
          int v67 = v105;
          if ((unint64_t)(v104 - v105) > 2)
          {
            v105[2] = 10;
            *(_WORD *)int v67 = 32032;
            v105 += 3;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v101, " }\n", 3uLL);
          }
        }
        if ((void)v124)
        {
          uint64_t v79 = *(llvm::MCStreamer **)(a1 + 272);
          std::string::size_type v81 = *v109;
          std::string::size_type v80 = v109[1];
          LOWORD(v132) = 261;
          v130.__r_.__value_.__r.__words[0] = v81;
          v130.__r_.__value_.__l.__size_ = v80;
          llvm::MCStreamer::emitRawText(v79, (const llvm::Twine *)&v130);
        }
        if (SHIBYTE(v113) < 0) {
          operator delete(__p);
        }
        int v101 = &unk_1F2646B98;
        if (v108 == 1 && v103) {
          MEMORY[0x1D25D9CB0](v103, 0x1000C8077774924);
        }
        if (v123 != v125) {
          free(v123);
        }
        goto LABEL_196;
      }
      uint64_t v98 = *(void *)(*(void *)(a1 + 280) + 344);
      v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130.__r_.__value_.__r.__words[2];
      v130.__r_.__value_.__l.__size_ = 0x400000000;
      unint64_t v133 = 0;
      uint64_t v134 = 0;
      uint64_t v132 = &v133;
      unsigned int NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(v2);
      std::string::size_type v22 = 0;
      if (NumExplicitOperands < 2)
      {
LABEL_132:
        sub_1CB833A08((uint64_t)&v132, v22);
        if ((std::string::size_type *)v130.__r_.__value_.__l.__data_ != &v130.__r_.__value_.__r.__words[2]) {
          free(v130.__r_.__value_.__l.__data_);
        }
        goto LABEL_169;
      }
      uint64_t v23 = 1;
      uint64_t v99 = v2;
      while (1)
      {
        int v24 = (int *)(*(void *)(v2 + 32) + 32 * v23);
        if (*v24 == 7) {
          break;
        }
LABEL_119:
        if (++v23 >= (unint64_t)llvm::MachineInstr::getNumExplicitOperands(v2))
        {
          std::string::size_type v22 = v133;
          goto LABEL_132;
        }
      }
      int v25 = 0;
      int64_t v26 = v24[1] | ((unint64_t)v24[6] << 32);
      if (v26 >= 0) {
        int64_t v27 = v24[1] | ((unint64_t)v24[6] << 32);
      }
      else {
        int64_t v27 = v26 + 1;
      }
      unsigned int v28 = (*v24 >> 8) & 0xFFF;
      int v29 = 1;
      if (v28 <= 2)
      {
        if (v28 == 1) {
          goto LABEL_57;
        }
        int v30 = 0;
        if (v28 != 2) {
          goto LABEL_59;
        }
      }
      else
      {
        if (v28 == 3)
        {
          int v25 = 0;
          int v29 = 0;
          int v30 = 64;
          goto LABEL_59;
        }
        if (v28 != 15)
        {
          int v30 = 0;
          if (v28 != 14)
          {
LABEL_59:
            unsigned int v100 = 0;
            int v31 = v24[1];
            int v32 = *v24;
            if ((_BYTE)v32) {
              int v33 = (v32 << 8) & 0xFFF0000;
            }
            else {
              int v33 = 0;
            }
            unsigned int v34 = v33 | v31;
            unsigned int v100 = v34;
            if (v134)
            {
              for (uint64_t i = v133; i; uint64_t i = (void *)*i)
              {
                unsigned int v36 = *((_DWORD *)i + 7);
                if (v34 >= v36)
                {
                  if (v36 >= v34) {
                    goto LABEL_118;
                  }
                  ++i;
                }
              }
            }
            else if (LODWORD(v130.__r_.__value_.__r.__words[1]))
            {
              std::string v37 = (_DWORD *)v130.__r_.__value_.__r.__words[0];
              uint64_t v38 = 4 * LODWORD(v130.__r_.__value_.__r.__words[1]);
              while (*v37 != v34)
              {
                ++v37;
                v38 -= 4;
                if (!v38) {
                  goto LABEL_75;
                }
              }
              if (v38) {
                goto LABEL_118;
              }
            }
LABEL_75:
            uint64_t v39 = v27 >> 1;
            uint64_t v40 = (*(uint64_t (**)(uint64_t, int64_t))(*(void *)v98 + 384))(v98, v27 >> 1);
            if ((v40 & 0xFF00000000) == 0)
            {
LABEL_118:
              uint64_t v2 = v99;
              goto LABEL_119;
            }
            int64_t v41 = v26 - (v27 & 0xFFFFFFFE);
            unsigned int v42 = WORD1(v40);
            if (!v41) {
              unsigned int v42 = v40;
            }
            if (v25) {
              unint64_t v43 = (unsigned __int16)v42;
            }
            else {
              unint64_t v43 = v42;
            }
            if (v25) {
              int v44 = &unk_1CFB2E2E0;
            }
            else {
              int v44 = &unk_1CFB2E308;
            }
            unsigned int v121 = v30;
            unint64_t v45 = 0xFFFFFFFFFFFFFFFFLL >> (-(char)v30 & 0x30);
            if (v29) {
              unint64_t v45 = 0;
            }
            uint64_t v120 = (const llvm::APInt *)(v45 & v43);
            llvm::detail::IEEEFloat::initFromAPInt((llvm::detail::IEEEFloat *)&v112, v44, &v120);
            if (v25) {
              llvm::APFloat::convert((uint64_t)&__p, &unk_1CFB2E308, 0, &v120);
            }
            if (LODWORD(v130.__r_.__value_.__r.__words[1]) || v134)
            {
              if ((unint64_t)(v104 - v105) <= 1)
              {
                uint64_t v47 = ", ";
                size_t v48 = 2;
LABEL_101:
                llvm::raw_ostream::write((llvm::raw_ostream *)&v101, v47, v48);
LABEL_102:
                if (v104 == v105) {
                  llvm::raw_ostream::write((llvm::raw_ostream *)&v101, "u", 1uLL);
                }
                else {
                  *v105++ = 117;
                }
                sub_1CD098D14((llvm::raw_ostream *)&v101, v39, 0, 0, 0);
                unsigned int v49 = v105;
                if (v25)
                {
                  if (v41) {
                    BOOL v50 = "h";
                  }
                  else {
                    BOOL v50 = "l";
                  }
                  if (v104 == v105)
                  {
                    llvm::raw_ostream::write((llvm::raw_ostream *)&v101, v50, 1uLL);
                    unsigned int v49 = v105;
                  }
                  else
                  {
                    char *v105 = *v50;
                    unsigned int v49 = ++v105;
                  }
                }
                if ((unint64_t)(v104 - v49) > 2)
                {
                  v49[2] = 32;
                  *(_WORD *)unsigned int v49 = 15648;
                  v105 += 3;
                }
                else
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)&v101, " = ", 3uLL);
                }
                float v51 = llvm::APFloat::convertToFloat((llvm::APFloat *)&__p);
                llvm::write_double((llvm::raw_ostream *)&v101, 0, 0, 0, v51);
                if ((unint64_t)(v104 - v105) > 1)
                {
                  *(_WORD *)unsigned int v105 = 10272;
                  v105 += 2;
                }
                else
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)&v101, " (", 2uLL);
                }
                sub_1CD098D14((llvm::raw_ostream *)&v101, v43, 0, 0, 0);
                if (v104 == v105) {
                  llvm::raw_ostream::write((llvm::raw_ostream *)&v101, ")", 1uLL);
                }
                else {
                  *v105++ = 41;
                }
                sub_1CB918828((uint64_t)&v130, &v100);
                if (v112 == (_DWORD *)&unk_1CFB2E344)
                {
                  sub_1CB845718(&v113);
                }
                else if ((v112[2] - 64) <= 0xFFFFFF7F && v113)
                {
                  MEMORY[0x1D25D9CB0](v113, 0x1000C8000313F17);
                }
                goto LABEL_118;
              }
              *(_WORD *)unsigned int v105 = 8236;
              unsigned int v52 = v105 + 2;
            }
            else
            {
              if (*(_DWORD *)(a1 + 7952))
              {
                int v46 = 0;
                do
                {
                  if (v104 == v105) {
                    llvm::raw_ostream::write((llvm::raw_ostream *)&v101, "\t", 1uLL);
                  }
                  else {
                    *v105++ = 9;
                  }
                  ++v46;
                }
                while (v46 != *(_DWORD *)(a1 + 7952));
              }
              if ((unint64_t)(v104 - v105) <= 3)
              {
                uint64_t v47 = "\t// ";
                size_t v48 = 4;
                goto LABEL_101;
              }
              *(_DWORD *)unsigned int v105 = 539963145;
              unsigned int v52 = v105 + 4;
            }
            unsigned int v105 = v52;
            goto LABEL_102;
          }
LABEL_57:
          int v29 = 0;
          int v30 = 16;
          int v25 = 1;
          goto LABEL_59;
        }
      }
      int v25 = 0;
      int v29 = 0;
      int v30 = 32;
      goto LABEL_59;
    }
    uint64_t v17 = 0;
    LOBYTE(v100) = 0;
    do
    {
      int v18 = (char *)&v120 + v17;
      *((_DWORD *)v18 + 2) = 1;
      *(void *)int v18 = 0;
      v17 += 16;
    }
    while (v17 != 32);
    char v115 = v115 & 0xF0 | 2;
    int v114 = 23;
    unsigned int v112 = &unk_1CFB2E308;
    uint64_t v113 = 0;
    llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)&v112, 1, 0);
    char v119 = v119 & 0xF0 | 2;
    int v118 = 23;
    unint64_t v116 = &unk_1CFB2E308;
    uint64_t v117 = 0;
    llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)&v116, 1, 0);
    int v19 = **(unsigned __int16 **)(v2 + 16);
    if (v19 == 5623)
    {
      int v53 = (const llvm::APInt *)*(unsigned __int16 *)(*(void *)(v2 + 32) + 80);
      if (v121 >= 0x41 && v120) {
        MEMORY[0x1D25D9CB0](v120, 0x1000C8000313F17);
      }
      uint64_t v120 = v53;
      unsigned int v121 = 16;
      llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)&v130.__r_.__value_.__r.__words[1], &v120);
      sub_1CB9190C0((uint64_t *)&v112, (void **)&v130.__r_.__value_.__l.__size_);
      if ((_UNKNOWN *)v130.__r_.__value_.__l.__size_ == &unk_1CFB2E344)
      {
        sub_1CB845718((uint64_t *)&v130.__r_.__value_.__r.__words[2]);
      }
      else if ((*(_DWORD *)(v130.__r_.__value_.__l.__size_ + 8) - 64) <= 0xFFFFFF7F {
             && v130.__r_.__value_.__r.__words[2])
      }
      {
        MEMORY[0x1D25D9CB0](v130.__r_.__value_.__r.__words[2], 0x1000C8000313F17);
      }
      llvm::APFloat::convert((uint64_t)&__p, &unk_1CFB2E308, 0, &v100);
    }
    else
    {
      if (v19 != 5622)
      {
LABEL_157:
        for (uint64_t j = 0; j != -64; j -= 32)
        {
          uint64_t v58 = *(uint64_t *)((char *)&v116 + j);
          if ((_UNKNOWN *)v58 == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)((char *)&v117 + j));
          }
          else if ((*(_DWORD *)(v58 + 8) - 64) <= 0xFFFFFF7F)
          {
            uint64_t v59 = *(uint64_t *)((char *)&v117 + j);
            if (v59) {
              MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
            }
          }
        }
        for (uint64_t k = 0; k != -32; k -= 16)
        {
          if (*(_DWORD *)&v122[k + 8] >= 0x41u)
          {
            uint64_t v61 = *(void *)&v122[k];
            if (v61) {
              MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
            }
          }
        }
        goto LABEL_169;
      }
      std::string::size_type v20 = (const llvm::APInt *)*(unsigned int *)(*(void *)(v2 + 32) + 80);
      if (v121 >= 0x41 && v120) {
        MEMORY[0x1D25D9CB0](v120, 0x1000C8000313F17);
      }
      uint64_t v120 = v20;
      unsigned int v121 = 32;
      llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v130.__r_.__value_.__r.__words[1], &v120);
      sub_1CB9190C0((uint64_t *)&v112, (void **)&v130.__r_.__value_.__l.__size_);
      if ((_UNKNOWN *)v130.__r_.__value_.__l.__size_ == &unk_1CFB2E344)
      {
        sub_1CB845718((uint64_t *)&v130.__r_.__value_.__r.__words[2]);
      }
      else if ((*(_DWORD *)(v130.__r_.__value_.__l.__size_ + 8) - 64) <= 0xFFFFFF7F {
             && v130.__r_.__value_.__r.__words[2])
      }
      {
        MEMORY[0x1D25D9CB0](v130.__r_.__value_.__r.__words[2], 0x1000C8000313F17);
      }
    }
    if (*(_DWORD *)(a1 + 7952))
    {
      int v54 = 0;
      do
      {
        if (v104 == v105) {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v101, "\t", 1uLL);
        }
        else {
          *v105++ = 9;
        }
        ++v54;
      }
      while (v54 != *(_DWORD *)(a1 + 7952));
    }
    if ((unint64_t)(v104 - v105) > 3)
    {
      *(_DWORD *)unsigned int v105 = 539963145;
      v105 += 4;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v101, "\t// ", 4uLL);
    }
    float v55 = llvm::APFloat::convertToFloat((llvm::APFloat *)&__p);
    llvm::write_double((llvm::raw_ostream *)&v101, 0, 0, 0, v55);
    if ((unint64_t)(v104 - v105) > 1)
    {
      *(_WORD *)unsigned int v105 = 10272;
      v105 += 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v101, " (", 2uLL);
    }
    v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
    *(_OWORD *)&v130.__r_.__value_.__r.__words[1] = xmmword_1CDB15B30;
    llvm::APInt::toString((unsigned int *)&v120, &v130, 0xAu, 1, 0);
    llvm::raw_ostream::write((llvm::raw_ostream *)&v101, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
    if ((uint64_t *)v130.__r_.__value_.__l.__data_ != &v131) {
      free(v130.__r_.__value_.__l.__data_);
    }
    if (v104 == v105)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v101, ")", 1uLL);
      uint8x8_t v56 = v105;
    }
    else
    {
      char *v105 = 41;
      uint8x8_t v56 = ++v105;
    }
    if (v104 == v56)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v101, "\n", 1uLL);
    }
    else
    {
      *uint8x8_t v56 = 10;
      ++v105;
    }
    goto LABEL_157;
  }
LABEL_196:
  long long v68 = *(unsigned __int16 **)(v2 + 16);
  if (!byte_1EBCC03B0 || (v68[10] & 4) != 0)
  {
    uint64_t v69 = *v68;
    if (!sub_1CBDA6464(*v68, 3u) && sub_1CBDB2780(v69, 0, 1) == 21) {
      *(void *)(*(void *)(v2 + 32) + 48) |= 0x800uLL;
    }
    sub_1CBBF7B14(v110, v2, (uint64_t)v126);
    (*(void (**)(void))(**(void **)(a1 + 272) + 1192))();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0208, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC0208))
  {
    dword_1EBCC01F8 = 20;
    __cxa_guard_release(&qword_1EBCC0208);
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 272) + 104))(*(void *)(a1 + 272)))
  {
    uint64_t v70 = *(void *)(*(void *)(a1 + 280) + 16);
    if ((*(unsigned char *)(v70 + 308) || *(unsigned char *)(v70 + 309)) && (*(unsigned char *)(*(void *)(v2 + 16) + 20) & 4) == 0)
    {
      uint64_t v82 = (llvm *)sub_1CD41CCA4((uint64_t)&v123, (llvm::MachineInstr *)v2, *(unsigned char *)(v70 + 308) != 0);
      if (*(unsigned char *)(v70 + 308) && dword_1EBCC01F8)
      {
        unint64_t v90 = (llvm::raw_ostream *)llvm::errs(v82);
        unsigned int v91 = sub_1CB8E509C(v90, "AGX_FAIL_BAD_COMPILE_WITH_CODE=");
        unint64_t v92 = sub_1CD41CBBC(v91, dword_1EBCC01F8);
        uint64_t v93 = sub_1CB8E509C(v92, ": ");
        uint64_t v94 = llvm::errs(v93);
        int v101 = &unk_1F26169D0;
        uint64_t v102 = v94;
        uint64_t v95 = (llvm *)sub_1CD41CBC4((uint64_t)&v123, (uint64_t)&v101);
        uint64_t v96 = (llvm::raw_ostream *)llvm::errs(v95);
        int v97 = sub_1CB8E509C(v96, "\n");
        llvm::sys::RunInterruptHandlers(v97);
        exit(dword_1EBCC01F8);
      }
      llvm::LLVMContext::diagnose(****(void ****)(a1 + 280), (const llvm::DiagnosticInfo *)&v123);
      sub_1CD41D084((uint64_t)&v123);
    }
  }
  int v71 = *(_DWORD *)(a1 + 7952);
  int v72 = **(unsigned __int16 **)(v2 + 16);
  if ((v72 - 542) < 2)
  {
    int v73 = 1;
  }
  else if ((v72 - 548) > 1)
  {
    int v73 = 0;
  }
  else
  {
    int v73 = *(_DWORD *)(*(void *)(v2 + 32) + 32 * sub_1CBDA6464(v72, 0x3Cu) + 16);
  }
  *(_DWORD *)(a1 + 7952) = (v73 + v71) & ~((v73 + v71) >> 31);
  if (v127 != v129) {
    free(v127);
  }
}

void sub_1CBACFEBC(void *a1, uint64_t a2, char a3)
{
  v84[6] = *MEMORY[0x1E4F143B8];
  char v75 = a3;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0260, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC0260))
  {
    byte_1EBCC01F3 = 0;
    __cxa_guard_release(&qword_1EBCC0260);
  }
  int v5 = *(unsigned __int16 **)(a2 + 16);
  unsigned int v6 = *v5;
  if (v6 >= 0x100)
  {
    uint64_t v7 = *((void *)v5 + 1) & 8;
    if (byte_1EBCC01F3 && v7 == 0)
    {
      uint64_t v9 = 0;
      unsigned int v10 = 0;
      uint64_t v82 = v84;
      uint64_t v83 = 0xC00000000;
      do
      {
        int v11 = sub_1CBDA6464(v6, (unsigned __int16)word_1CDB15B70[v9]);
        if (v10 >= HIDWORD(v83)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v82[v10] = v11;
        unsigned int v10 = v83 + 1;
        LODWORD(v83) = v83 + 1;
        v9 += 2;
      }
      while (v9 != 14);
      uint64_t v12 = 0;
      unsigned int v13 = 0;
      uint64_t v76 = 0x1C0000001ELL;
      LODWORD(v77) = 71;
      uint64_t v79 = v81;
      uint64_t v80 = 0xC00000000;
      do
      {
        int v14 = sub_1CBDA6464(v6, *(unsigned __int16 *)((char *)&v76 + v12));
        if (v13 >= HIDWORD(v80)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)&v79[4 * v13] = v14;
        unsigned int v13 = v80 + 1;
        LODWORD(v80) = v80 + 1;
        v12 += 4;
      }
      while (v12 != 12);
      char v74 = 1;
      uint64_t v76 = (uint64_t)&v74;
      uint64_t v77 = a1;
      uint64_t v78 = &v75;
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 16);
      unint64_t v45 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 176))(v15);
      if (!llvm::MachineInstr::getNumExplicitOperands(a2))
      {
LABEL_105:
        if (v79 != v81) {
          free(v79);
        }
        if (v82 != (_DWORD *)v84) {
          free(v82);
        }
        return;
      }
      unsigned __int32 v17 = 0;
      while (1)
      {
        int v18 = *(unsigned __int16 **)(a2 + 16);
        if ((word_1CDF77000[dword_1CDF6DEF0[*v18] + (unsigned __int16)v17] & 0xFFFB) == 0x3A) {
          break;
        }
        uint64_t v19 = *(void *)(a2 + 32);
        if ((*(_DWORD *)(v19 + 32 * v17) & 0x10000FF) == 0x1000000)
        {
          unsigned int v22 = *((unsigned __int8 *)v18 + 4);
          if ((v18[4] & 2) == 0 || (int v34 = *(_DWORD *)(a2 + 40), v34 == v22))
          {
            unsigned int v23 = v22;
          }
          else
          {
            int v35 = v34 - 1;
            unsigned int v23 = v22;
            do
            {
              int v36 = *(_DWORD *)(v19 + 32 * v22);
              if ((v36 & 0x10000FF) != 0x1000000) {
                break;
              }
              v23 += (v36 & 0x2000000) == 0;
              if (v35 == v22) {
                break;
              }
              ++v22;
            }
            while ((v36 & 0x2000000) == 0);
          }
          unsigned __int32 v21 = v23 + v17;
LABEL_30:
          if (v21 != -1) {
            goto LABEL_32;
          }
          goto LABEL_31;
        }
        if (*(_DWORD *)(v19 + 32 * v17)) {
          BOOL v20 = *(_DWORD *)(v19 + 32 * v17) == 7;
        }
        else {
          BOOL v20 = 1;
        }
        if (v20)
        {
          unsigned __int32 v21 = v17 + 1;
          goto LABEL_30;
        }
LABEL_31:
        unsigned __int32 v21 = v17;
LABEL_32:
        int v24 = (char *)&v82[v83];
        int v25 = wmemchr(v82, v17, v83);
        if (v25) {
          int64_t v26 = v25;
        }
        else {
          int64_t v26 = (__int32 *)v24;
        }
        if (v26 != &v82[v83]) {
          goto LABEL_36;
        }
        int64_t v27 = &v79[4 * v80];
        unsigned int v28 = wmemchr((__int32 *)v79, v17, v80);
        if (v28) {
          int v29 = v28;
        }
        else {
          int v29 = (__int32 *)v27;
        }
        if (v29 != (__int32 *)&v79[4 * v80])
        {
          uint64_t v30 = sub_1CBE52E8C(v6);
          if ((v30 & 0xFF00000000) == 0) {
            goto LABEL_112;
          }
          if (v30 != 94)
          {
            char v73 = 5;
            strcpy((char *)v72, "coeff");
            char v71 = 7;
            strcpy((char *)v70, "not_gpr");
            sub_1CBAD76F8((uint64_t)&v76, v72, (uint64_t)v70);
            if (v71 < 0) {
              operator delete(v70[0]);
            }
            if ((v73 & 0x80000000) == 0) {
              goto LABEL_36;
            }
            int v33 = (void *)v72[0];
            goto LABEL_96;
          }
        }
        uint64_t v31 = *(void *)(a2 + 32);
        unsigned int v32 = sub_1CBC2D2EC(a2, v17, v45 + 1);
        if (v32 <= 7)
        {
          if (((1 << v32) & 0xAC) != 0) {
            goto LABEL_36;
          }
          if (v32 == 4)
          {
            char v69 = 2;
            strcpy((char *)v68, "ir");
            char v67 = 7;
            strcpy((char *)v66, "not_gpr");
            sub_1CBAD76F8((uint64_t)&v76, v68, (uint64_t)v66);
            if (v67 < 0) {
              operator delete(v66[0]);
            }
            if ((v69 & 0x80000000) == 0) {
              goto LABEL_36;
            }
            int v33 = (void *)v68[0];
            goto LABEL_96;
          }
          if (v32 == 6)
          {
            char v65 = 3;
            LODWORD(v64) = 7042163;
            char v63 = 7;
            strcpy((char *)__p, "not_gpr");
            sub_1CBAD76F8((uint64_t)&v76, (const void **)&v64, (uint64_t)__p);
            if (v63 < 0) {
              operator delete(__p[0]);
            }
            if ((v65 & 0x80000000) == 0) {
              goto LABEL_36;
            }
            int v33 = v64;
            goto LABEL_96;
          }
        }
        int v37 = *(unsigned __int8 *)(v31 + 32 * v17);
        if (v37 == 1)
        {
          char v57 = 3;
          LODWORD(v56) = 7171433;
          char v55 = 7;
          strcpy((char *)v54, "not_gpr");
          sub_1CBAD76F8((uint64_t)&v76, (const void **)&v56, (uint64_t)v54);
          if (v55 < 0) {
            operator delete(v54[0]);
          }
          if ((v57 & 0x80000000) == 0) {
            goto LABEL_36;
          }
          int v33 = v56;
          goto LABEL_96;
        }
        if (v37 != 7 || *(_DWORD *)(v31 + 32 * v17 + 16) != 64)
        {
          if (v32 != 1) {
            goto LABEL_36;
          }
          v50[0] = (void *)(*(uint64_t (**)(void *, void))(*v45 + 512))(v45, *(unsigned int *)(*(void *)(a2 + 32) + 32 * v17 + 4));
          v50[1] = v39;
          llvm::StringRef::lower((llvm::StringRef *)v50, v52);
          v50[0] = 0;
          v50[1] = 0;
          uint64_t v51 = 0;
          unsigned int v40 = (*(_DWORD *)(*(void *)(a2 + 32) + 32 * v21 + 16) >> 14) & 7;
          if (v40 <= 5) {
            MEMORY[0x1D25D9630](v50, off_1E66AB390[v40]);
          }
          if (SHIBYTE(v53) < 0)
          {
            sub_1CB8BDF7C((uint64_t)v48, v52[0], (unint64_t)v52[1]);
          }
          else
          {
            *(_OWORD *)size_t v48 = *(_OWORD *)v52;
            uint64_t v49 = v53;
          }
          if (SHIBYTE(v51) < 0)
          {
            sub_1CB8BDF7C((uint64_t)v46, v50[0], (unint64_t)v50[1]);
          }
          else
          {
            *(_OWORD *)int v46 = *(_OWORD *)v50;
            uint64_t v47 = v51;
          }
          sub_1CBAD76F8((uint64_t)&v76, (const void **)v48, (uint64_t)v46);
          if (SHIBYTE(v47) < 0) {
            operator delete(v46[0]);
          }
          if (SHIBYTE(v49) < 0) {
            operator delete(v48[0]);
          }
          if (SHIBYTE(v51) < 0) {
            operator delete(v50[0]);
          }
          if ((SHIBYTE(v53) & 0x80000000) == 0) {
            goto LABEL_36;
          }
          int v33 = v52[0];
          goto LABEL_96;
        }
        uint64_t v38 = *(void *)(a2 + 32);
        if (*(unsigned char *)(v38 + 32 * v17) != 7 || *(_DWORD *)(v38 + 32 * v17 + 16) != 64) {
          goto LABEL_68;
        }
        int v41 = **(unsigned __int16 **)(a2 + 16);
        unsigned __int32 v44 = sub_1CBDA6464(v41, 0x2Eu);
        int v43 = sub_1CBDA6464(v41, 0x57u);
        uint64_t v42 = sub_1CBE52E8C(v41);
        if ((v42 & 0xFF00000000) == 0) {
LABEL_112:
        }
          llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
        if (((v42 - 190) < 4 || (v42 - 105) <= 1) && v17 == v43 || v17 >= v44)
        {
LABEL_68:
          char v61 = 3;
          LODWORD(v60) = 6909557;
          char v59 = 7;
          strcpy((char *)v58, "not_gpr");
          sub_1CBAD76F8((uint64_t)&v76, (const void **)&v60, (uint64_t)v58);
          if (v59 < 0) {
            operator delete(v58[0]);
          }
          if (v61 < 0)
          {
            int v33 = v60;
LABEL_96:
            operator delete(v33);
          }
        }
LABEL_36:
        unsigned __int32 v17 = v21 + 1;
        if (v21 + 1 >= llvm::MachineInstr::getNumExplicitOperands(a2)) {
          goto LABEL_105;
        }
      }
      unsigned __int32 v21 = v17 + 2;
      goto LABEL_30;
    }
  }
}

uint64_t sub_1CBAD0724(uint64_t a1, void *a2)
{
  *((unsigned char *)a2 + 352) = 6;
  uint64_t v4 = *a2;
  int v5 = *(_WORD *)(*a2 + 18) & 0x3FF0;
  *(unsigned char *)(*(void *)(a1 + 264) + 148) = v5 == 1600;
  unsigned int v6 = (void **)a2[43];
  uint64_t v7 = ((uint64_t (*)(void **))(*v6)[70])(v6);
  if (v5 == 1600 || v4 == v7)
  {
    uint64_t v9 = v7;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0220, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCC0220))
    {
      dword_1EBCC01FC = 0;
      __cxa_guard_release(&qword_1EBCC0220);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0228, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCC0228))
    {
      dword_1EBCC0200 = 0;
      __cxa_guard_release(&qword_1EBCC0228);
    }
    unsigned int v10 = &dword_1EBCC0200;
    if (v4 == v9) {
      unsigned int v10 = &dword_1EBCC01FC;
    }
    int v11 = *v10;
    if (*v10)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0230, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EBCC0230))
      {
        dword_1EBCC0204 = sub_1CBAD1794(a2[2]);
        __cxa_guard_release(&qword_1EBCC0230);
      }
      unsigned int v73 = v11 + dword_1EBCC0204 - 1;
      uint64_t v74 = a2[40];
      unint64_t v75 = *(void *)(v74 + 48) & 0xFFFFFFFFFFFFFFF8;
      if (!v75 || (*(unsigned char *)v75 & 4) == 0)
      {
        while ((*(_WORD *)(v75 + 44) & 4) != 0)
          unint64_t v75 = *(void *)v75 & 0xFFFFFFFFFFFFFFF8;
      }
      if (dword_1EBCC0204 <= v73)
      {
        uint64_t v76 = **(void **)(a2[1] + 576) + 29904;
        uint64_t v77 = (uint64_t *)(v74 + 40);
        if (v73 / dword_1EBCC0204 <= 1) {
          unsigned int v78 = 1;
        }
        else {
          unsigned int v78 = v73 / dword_1EBCC0204;
        }
        do
        {
          uint64_t v79 = *(unsigned __int8 **)(v75 + 56);
          std::string::size_type v81 = v79;
          if (v79) {
            llvm::MetadataTracking::track((uint64_t)&v81, v79, 2);
          }
          uint64_t v80 = llvm::MachineFunction::CreateMachineInstr((llvm::MachineFunction *)a2, v76, &v81, 0);
          if (v81) {
            llvm::MetadataTracking::untrack((uint64_t)&v81, v81);
          }
          sub_1CBA959D4(v77, v75, (uint64_t)v80);
          LODWORD(v105[0]) = 1;
          v105[1] = 0;
          v105[2] = 0;
          llvm::MachineInstr::addOperand(v80, (llvm::MachineFunction *)a2, (const llvm::MachineOperand *)v105);
          --v78;
        }
        while (v78);
      }
    }
  }
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 184))(a1, a2);
  sub_1CD27DA04(a1);
  uint64_t v12 = a2[6];
  if (!v12)
  {
    uint64_t v12 = (*(uint64_t (**)(void, void *, void *))(*(void *)a2[1] + 216))(a2[1], a2 + 16, a2);
    a2[6] = v12;
  }
  uint64_t v13 = a2[7];
  uint64_t v14 = *(void *)(v12 + 552);
  if ((v14 & 0xFF00000000) != 0) {
    uint64_t v15 = (4 * v14 + 4);
  }
  else {
    uint64_t v15 = 0;
  }
  if (*(unsigned char *)(v13 + 62))
  {
    uint64_t v15 = (v15 + 63) & 0xFFFFFFC0;
    uint64_t v16 = *(unsigned int *)(v13 + 48);
    if (v5 != 1600)
    {
      ((void (*)(void **, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*v6)[1])(v6, 16, v16, 1, 0, 1, 3);
      goto LABEL_19;
    }
LABEL_93:
    ((void (*)(void **, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*v6)[1])(v6, 17, v15, 1, 0, 1, 3);
    ((void (*)(void **, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*v6)[1])(v6, 12, v16, 1, 0, 1, 3);
    goto LABEL_22;
  }
  uint64_t v16 = *(unsigned int *)(v13 + 48);
  if (v5 == 1600) {
    goto LABEL_93;
  }
  ((void (*)(void **, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*v6)[1])(v6, 15, v16, 1, 0, 1, 4);
LABEL_19:
  ((void (*)(void **, uint64_t, void, uint64_t, void, uint64_t, void))(*v6)[1])(v6, 11, 0, 1, 0, 1, 0);
  int v17 = ((uint64_t (*)(void **))(*v6)[11])(v6);
  int v18 = (uint64_t (**)(void **, uint64_t, void, uint64_t, uint64_t))*v6;
  if (v17)
  {
    char v67 = (uint64_t *)((uint64_t (*)(void **))v18[12])(v6);
    uint64_t v68 = ((uint64_t (*)(void **))(*v6)[13])(v6);
    if (v67 != (uint64_t *)v68)
    {
      char v69 = (uint64_t *)v68;
      do
      {
        uint64_t v70 = *v67++;
        int v71 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))v70)(v70, 16, 0, 1, 4);
        int v72 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))v70)(v70, 15, 0, 1, 4);
        (*(void (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*(void *)v70 + 8))(v70, 11, (v72 + v71), 1, 0, 1, 3);
      }
      while (v67 != v69);
    }
  }
  else
  {
    int v19 = (*v18)(v6, 16, 0, 1, 4);
    int v20 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**v6)(v6, 15, 0, 1, 4);
    ((void (*)(void **, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*v6)[1])(v6, 11, (v20 + v19), 1, 0, 1, 3);
  }
  ((void (*)(void **, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*v6)[1])(v6, 18, v15, 1, 0, 1, 3);
  (*(void (**)(void *, void, uint64_t))(*v6[1] + 112))(v6[1], *a2, v15);
  (*(void (**)(void *, void, uint64_t))(*v6[1] + 96))(v6[1], *a2, v16);
LABEL_22:
  int v21 = (*(unsigned __int16 *)(*a2 + 18) >> 4) & 0x3FF;
  if (!v21 || v21 == 8 || v21 == 255)
  {
    uint64_t v36 = ((uint64_t (*)(void **, uint64_t))(*v6)[74])(v6, 100);
    uint64_t v37 = ((uint64_t (*)(void **))(*v6)[4])(v6);
    if (v36)
    {
      uint64_t v38 = *(void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v37 + 24))(v37, v36);
      if ((*(unsigned int (**)(void))(v38 + 360))())
      {
        ((void (*)(void **, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*v6)[1])(v6, 12, v16, 1, 0, 1, 3);
        ((void (*)(void **, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*v6)[1])(v6, 17, v15, 1, 0, 1, 3);
      }
    }
  }
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::MachineLoopInfo::ID, 1);
  if (AnalysisPass) {
    unsigned int v23 = (const llvm::MachineLoopInfo *)(*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::MachineLoopInfo::ID);
  }
  else {
    unsigned int v23 = 0;
  }
  llvm::GPUMetadataEmitter::runOnMachineFunction((llvm::GPUMetadataEmitter *)(a1 + 1584), (llvm::MachineFunction *)a2, v23, *(llvm::MCContext **)(a1 + 264), *(llvm::MCStreamer **)(a1 + 272));
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0210, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC0210))
  {
    byte_1EBCC01F0 = 0;
    __cxa_guard_release(&qword_1EBCC0210);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0218, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC0218))
  {
    byte_1EBCC01F1 = 0;
    __cxa_guard_release(&qword_1EBCC0218);
  }
  if (byte_1EBCC01F0 && byte_1EBCC01F1)
  {
    int v25 = *(llvm::Module **)(*a2 + 40);
    v105[0] = "agxcompiler.config";
    __int16 v106 = 259;
    uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v25, v105);
    if (NamedMetadata && (v27 = *(uint64_t **)(NamedMetadata + 48), uint64_t v28 = *((unsigned int *)v27 + 2), v28))
    {
      int v30 = 0;
      LODWORD(v29) = 0;
      uint64_t v58 = *v27;
      do
      {
        char v59 = (void *)(*(void *)v58 - 8 * *(unsigned int *)(*(void *)v58 + 8));
        if (!*(unsigned char *)*v59)
        {
          uint64_t v60 = *(void **)(*v59 + 8);
          if (*v60 == 16)
          {
            uint64_t v62 = v60[3];
            uint64_t v61 = v60[4];
            if (v62 == 0x2E74736575716552 && v61 == 0x4449726564616853)
            {
              uint64_t v64 = v59[1];
              if (*(unsigned char *)v64 == 1)
              {
                uint64_t v65 = *(void *)(v64 + 128);
                if (*(unsigned char *)(v65 + 16) == 16)
                {
                  unsigned int v66 = *(_DWORD *)(v65 + 32);
                  if (v66 > 0x40) {
                    uint64_t v29 = **(void **)(v65 + 24);
                  }
                  else {
                    uint64_t v29 = (uint64_t)(*(void *)(v65 + 24) << -(char)v66) >> -(char)v66;
                  }
                  int v30 = 1;
                }
              }
            }
          }
        }
        v58 += 8;
        --v28;
      }
      while (v28);
    }
    else
    {
      LODWORD(v29) = 0;
      int v30 = 0;
    }
    v104.__val_ = 0;
    v104.__cat_ = std::system_category();
    if (v30)
    {
      std::to_string(&v99, v29);
      __int16 v106 = 260;
      v105[0] = (const char *)&v99;
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      __int16 v106 = 260;
      v105[0] = (const char *)&v99;
    }
    __int16 v86 = 261;
    uint64_t v84 = "readlocs-shaderid";
    uint64_t v85 = 17;
    uint64_t v31 = __p;
    llvm::Twine::str((llvm::Twine *)v105, __p);
    char v32 = v86;
    if (v86 == 1)
    {
      uint64_t v87 = __p;
      __int16 v90 = 260;
      int v33 = 4;
      uint64_t v39 = v88;
    }
    else
    {
      if (!(_BYTE)v86)
      {
        int v33 = 0;
        __int16 v90 = 256;
        int v34 = 1;
        char v35 = 1;
        goto LABEL_50;
      }
      unsigned int v40 = (const char **)v84;
      int v33 = 2;
      if (HIBYTE(v86) != 1)
      {
        char v32 = 2;
        unsigned int v40 = &v84;
      }
      uint64_t v87 = (void **)v40;
      size_t v88 = (void **)v85;
      uint64_t v39 = __p;
      size_t v89 = __p;
      LOBYTE(v90) = v32;
      HIBYTE(v90) = 4;
      uint64_t v31 = (void **)&v87;
    }
    int v34 = 0;
    unsigned int v91 = v31;
    unint64_t v92 = v39;
    uint64_t v93 = "-";
    uint64_t v94 = 1;
    char v35 = 5;
LABEL_50:
    char v95 = v33;
    char v96 = v35;
    int v41 = (uint64_t ***)*a2;
    if ((*(unsigned char *)(*a2 + 23) & 0x10) != 0)
    {
      uint64_t v42 = ***v41;
      uint64_t v43 = *(void *)(v42 + 152);
      uint64_t v44 = *(unsigned int *)(v42 + 168);
      if (v44)
      {
        LODWORD(v45) = (v44 - 1) & ((v41 >> 4) ^ (v41 >> 9));
        int v46 = (uint64_t ****)(v43 + 16 * v45);
        uint64_t v47 = *v46;
        if (*v46 != v41)
        {
          int v48 = 1;
          do
          {
            if (v47 == (uint64_t ***)-4096) {
              goto LABEL_90;
            }
            int v49 = v45 + v48++;
            uint64_t v45 = v49 & (v44 - 1);
            uint64_t v47 = *(uint64_t ****)(v43 + 16 * v45);
          }
          while (v47 != v41);
          int v46 = (uint64_t ****)(v43 + 16 * v45);
        }
      }
      else
      {
LABEL_90:
        int v46 = (uint64_t ****)(v43 + 16 * v44);
      }
      BOOL v50 = v46[1];
      std::string::size_type v53 = (std::string::size_type)*v50;
      unsigned int v52 = (char *)(v50 + 2);
      std::string::size_type v51 = v53;
    }
    else
    {
      std::string::size_type v51 = 0;
      unsigned int v52 = &byte_1CFBCE98E;
    }
    if (v33)
    {
      uint8x8_t v56 = v91;
      BOOL v57 = v34 == 0;
      char v54 = 2;
      if (v57) {
        LOBYTE(v33) = 2;
      }
      if (v57) {
        uint8x8_t v56 = &v91;
      }
      v97[0] = v56;
      v97[1] = v92;
      v97[2] = v52;
      v97[3] = v51;
      LOBYTE(v98) = v33;
      HIBYTE(v98) = 5;
      v99.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
      v99.__r_.__value_.__l.__size_ = v51;
      char v55 = 5;
      v99.__r_.__value_.__r.__words[2] = (std::string::size_type)".json";
      uint64_t v100 = 5;
    }
    else
    {
      char v54 = 0;
      __int16 v98 = 256;
      char v55 = 1;
    }
    char v101 = v54;
    char v102 = v55;
    llvm::Twine::str((llvm::Twine *)&v99, &v103);
    if (v83 < 0) {
      operator delete(__p[0]);
    }
    operator new();
  }
  return 0;
}

uint64_t sub_1CBAD1794(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  if (*(unsigned char *)(a1 + 303) || *(unsigned char *)(a1 + 305)) {
    *(void *)&v10[0] = 0x2700000003;
  }
  uint64_t v5 = 0;
  unsigned int v6 = &unk_1F25FDCB8;
  *(void *)&long long v7 = a1;
  int v8 = &v6;
  unsigned int v1 = sub_1CBD854F8((uint64_t)&v6);
  if (v8 == &v6)
  {
    (*((void (**)(void **))v6 + 4))(&v6);
  }
  else if (v8)
  {
    (*((void (**)(void))*v8 + 5))();
  }
  unsigned int v6 = &v8;
  int v8 = 0;
  v9[0] = 0;
  *(void *)((char *)v9 + 6) = 0;
  long long v7 = xmmword_1CDB15B40;
  v4[0] = 0;
  v4[16] = 0;
  sub_1CBE55A78(v1, (uint64_t)v10, 0x22u, (uint64_t)v4, &v8, (_DWORD *)&v5 + 1, &v5);
  unsigned int v2 = v5;
  if (v6 != &v8) {
    free(v6);
  }
  return v2 >> 1;
}

uint64_t sub_1CBAD1940()
{
  return 1;
}

uint64_t sub_1CBAD1948(void *a1, llvm::Module *a2)
{
  unsigned int v2 = (unsigned int *)a1[33];
  uint64_t v3 = (llvm::MCStreamer *)a1[34];
  a1[142] = v2[36];
  return llvm::GPUMetadataEmitter::emitEndOfAsmFile((llvm::GPUMetadataEmitter *)(a1 + 198), a2, (llvm::MCContext *)v2, v3);
}

void sub_1CBAD195C(int32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (uint64_t **)a2;
  v431[9] = *MEMORY[0x1E4F143B8];
  int v385 = *(llvm::TargetSubtargetInfo **)(a2 + 16);
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v385 + 176))();
  uint64_t v376 = v6;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0268, memory_order_acquire) & 1) == 0)
  {
    uint64_t v6 = __cxa_guard_acquire(&qword_1EBCC0268);
    if (v6)
    {
      byte_1EBCC01F4 = 0;
      __cxa_guard_release(&qword_1EBCC0268);
    }
  }
  v384 = a1;
  if (!byte_1EBCC01F4) {
    goto LABEL_45;
  }
  long long v7 = v4[6];
  if (!v7)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t *, uint64_t **, uint64_t **))(*v4[1] + 216))(v4[1], v4 + 16, v4);
    long long v7 = (uint64_t *)v6;
    v4[6] = (uint64_t *)v6;
  }
  int v8 = *v4;
  uint64_t v9 = (*v4)[5];
  if ((*((unsigned char *)*v4 + 23) & 0x10) != 0)
  {
    uint64_t v10 = **(void **)*v8;
    uint64_t v11 = *(void *)(v10 + 152);
    uint64_t v12 = *(unsigned int *)(v10 + 168);
    if (v12)
    {
      LODWORD(v13) = (v12 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      uint64_t v14 = (uint64_t **)(v11 + 16 * v13);
      uint64_t v15 = *v14;
      if (*v14 == v8) {
        goto LABEL_13;
      }
      int v16 = 1;
      while (v15 != (uint64_t *)-4096)
      {
        int v17 = v13 + v16++;
        uint64_t v13 = v17 & (v12 - 1);
        uint64_t v15 = *(uint64_t **)(v11 + 16 * v13);
        if (v15 == v8)
        {
          uint64_t v14 = (uint64_t **)(v11 + 16 * v13);
          goto LABEL_13;
        }
      }
    }
    uint64_t v14 = (uint64_t **)(v11 + 16 * v12);
LABEL_13:
    int v18 = (unint64_t *)v14[1];
    unint64_t v21 = *v18;
    int v20 = v18 + 2;
    size_t v19 = v21;
    if (v21 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v19 >= 0x17)
    {
      uint64_t v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17) {
        uint64_t v23 = v19 | 7;
      }
      uint64_t v24 = v23 + 1;
      p_dst = (uint64_t *)operator new(v23 + 1);
      BOOL v400 = (void *)v19;
      int64_t v401 = v24 | 0x8000000000000000;
      uint64_t __dst = (uint64_t)p_dst;
    }
    else
    {
      HIBYTE(v401) = v19;
      p_dst = &__dst;
      if (!v19) {
        goto LABEL_21;
      }
    }
    uint64_t v6 = (uint64_t)memmove(p_dst, v20, v19);
LABEL_21:
    a1 = v384;
    goto LABEL_22;
  }
  size_t v19 = 0;
  HIBYTE(v401) = 0;
  p_dst = &__dst;
LABEL_22:
  *((unsigned char *)p_dst + v19) = 0;
  int v25 = (void *)HIBYTE(v401);
  if (v401 < 0) {
    int v25 = v400;
  }
  if (!v25) {
    uint64_t v6 = MEMORY[0x1D25D9630](&__dst, "unnamed");
  }
  int64_t v26 = (const char *)(v9 + 192);
  if (*((unsigned char *)v7 + 496))
  {
    unint64_t v319 = llvm::dbgs((llvm *)v6);
    char v320 = *(unsigned char *)(v9 + 215);
    BOOL v321 = v320 < 0;
    if (v320 >= 0) {
      int v322 = (const char *)(v9 + 192);
    }
    else {
      int v322 = *(const char **)(v9 + 192);
    }
    size_t v323 = v320 & 0x7F;
    if (v321) {
      size_t v324 = *(void *)(v9 + 200);
    }
    else {
      size_t v324 = v323;
    }
    int v325 = llvm::raw_ostream::write(v319, v322, v324);
    uint64_t v326 = (void *)*((void *)v325 + 4);
    if (*((void *)v325 + 3) - (void)v326 > 0x1CuLL)
    {
      qmemcpy(v326, " Indirect branch detected in ", 29);
      *((void *)v325 + 4) += 29;
    }
    else
    {
      int v325 = llvm::raw_ostream::write(v325, " Indirect branch detected in ", 0x1DuLL);
    }
    if (v401 >= 0) {
      uint64_t v327 = (const char *)&__dst;
    }
    else {
      uint64_t v327 = (const char *)__dst;
    }
    if (v401 >= 0) {
      size_t v328 = HIBYTE(v401) & 0x7F;
    }
    else {
      size_t v328 = (size_t)v400;
    }
    uint64_t v6 = (uint64_t)llvm::raw_ostream::write(v325, v327, v328);
    int v329 = *(unsigned char **)(v6 + 32);
    if (*(unsigned char **)(v6 + 24) == v329)
    {
      uint64_t v6 = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)v6, "\n", 1uLL);
    }
    else
    {
      *int v329 = 10;
      ++*(void *)(v6 + 32);
    }
  }
  if (*((unsigned char *)v7 + 498))
  {
    uint64_t v330 = llvm::dbgs((llvm *)v6);
    char v331 = *(unsigned char *)(v9 + 215);
    BOOL v332 = v331 < 0;
    if (v331 >= 0) {
      uint64_t v333 = (const char *)(v9 + 192);
    }
    else {
      uint64_t v333 = *(const char **)(v9 + 192);
    }
    size_t v334 = v331 & 0x7F;
    if (v332) {
      size_t v335 = *(void *)(v9 + 200);
    }
    else {
      size_t v335 = v334;
    }
    uint64_t v336 = llvm::raw_ostream::write(v330, v333, v335);
    __int16 v337 = (void *)*((void *)v336 + 4);
    if (*((void *)v336 + 3) - (void)v337 > 0x1BuLL)
    {
      qmemcpy(v337, " Binary linking detected in ", 28);
      *((void *)v336 + 4) += 28;
    }
    else
    {
      uint64_t v336 = llvm::raw_ostream::write(v336, " Binary linking detected in ", 0x1CuLL);
    }
    if (v401 >= 0) {
      uint64_t v338 = (const char *)&__dst;
    }
    else {
      uint64_t v338 = (const char *)__dst;
    }
    if (v401 >= 0) {
      size_t v339 = HIBYTE(v401) & 0x7F;
    }
    else {
      size_t v339 = (size_t)v400;
    }
    uint64_t v340 = llvm::raw_ostream::write(v336, v338, v339);
    uint64_t v341 = (unsigned char *)*((void *)v340 + 4);
    if (*((unsigned char **)v340 + 3) == v341)
    {
      llvm::raw_ostream::write(v340, "\n", 1uLL);
    }
    else
    {
      unsigned char *v341 = 10;
      ++*((void *)v340 + 4);
    }
  }
  *(void *)&long long v416 = &v417;
  *((void *)&v416 + 1) = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((llvm::Module *)v9, (uint64_t)&v416);
  int64_t v27 = (llvm *)v416;
  if (DWORD2(v416))
  {
    uint64_t v28 = (uint64_t *)(v416 + 16);
    uint64_t v29 = 24 * DWORD2(v416);
    while (1)
    {
      uint64_t v30 = *(void *)(*(v28 - 1) + 8);
      if (*(void *)v30 == 9)
      {
        uint64_t v31 = *(void *)(v30 + 24);
        uint64_t v32 = *(unsigned __int8 *)(v30 + 32);
        BOOL v33 = *(void *)"PIC Level" == v31 && aPicLevel[8] == v32;
        if (v33) {
          break;
        }
      }
      v28 += 3;
      v29 -= 24;
      if (!v29) {
        goto LABEL_39;
      }
    }
    uint64_t v34 = *v28;
  }
  else
  {
LABEL_39:
    uint64_t v34 = 0;
  }
  if ((long long *)v416 != &v417)
  {
    free((void *)v416);
    if (!v34) {
      goto LABEL_42;
    }
LABEL_608:
    uint64_t v307 = *(void *)(v34 + 128);
    char v83 = (void *)(v307 + 24);
    if (*(_DWORD *)(v307 + 32) >= 0x41u) {
LABEL_741:
    }
      char v83 = (void *)*v83;
    if (*(_DWORD *)v83)
    {
      uint64_t v308 = llvm::dbgs(v27);
      char v309 = *(unsigned char *)(v9 + 215);
      BOOL v310 = v309 < 0;
      if (v309 >= 0) {
        uint64_t v311 = v26;
      }
      else {
        uint64_t v311 = *(const char **)(v9 + 192);
      }
      size_t v312 = v309 & 0x7F;
      if (v310) {
        size_t v313 = *(void *)(v9 + 200);
      }
      else {
        size_t v313 = v312;
      }
      unsigned int v314 = llvm::raw_ostream::write(v308, v311, v313);
      int v315 = (void *)*((void *)v314 + 4);
      if (*((void *)v314 + 3) - (void)v315 > 0x1BuLL)
      {
        qmemcpy(v315, " Dylib function detected in ", 28);
        *((void *)v314 + 4) += 28;
      }
      else
      {
        unsigned int v314 = llvm::raw_ostream::write(v314, " Dylib function detected in ", 0x1CuLL);
      }
      if (v401 >= 0) {
        int v316 = (const char *)&__dst;
      }
      else {
        int v316 = (const char *)__dst;
      }
      if (v401 >= 0) {
        size_t v317 = HIBYTE(v401) & 0x7F;
      }
      else {
        size_t v317 = (size_t)v400;
      }
      int64_t v27 = llvm::raw_ostream::write(v314, v316, v317);
      uint64_t v318 = (unsigned char *)*((void *)v27 + 4);
      if (*((unsigned char **)v27 + 3) == v318)
      {
        int64_t v27 = llvm::raw_ostream::write(v27, "\n", 1uLL);
      }
      else
      {
        *uint64_t v318 = 10;
        ++*((void *)v27 + 4);
      }
    }
    goto LABEL_42;
  }
  if (v34) {
    goto LABEL_608;
  }
LABEL_42:
  if (*((unsigned char *)v7 + 497))
  {
    uint64_t v342 = llvm::dbgs(v27);
    char v343 = *(unsigned char *)(v9 + 215);
    BOOL v344 = v343 < 0;
    if (v343 >= 0) {
      int v345 = v26;
    }
    else {
      int v345 = *(const char **)(v9 + 192);
    }
    size_t v346 = v343 & 0x7F;
    if (v344) {
      size_t v347 = *(void *)(v9 + 200);
    }
    else {
      size_t v347 = v346;
    }
    uint64_t v348 = llvm::raw_ostream::write(v342, v345, v347);
    uint64_t v349 = (void *)*((void *)v348 + 4);
    if (*((void *)v348 + 3) - (void)v349 > 0x1DuLL)
    {
      qmemcpy(v349, " Recursive branch detected in ", 30);
      *((void *)v348 + 4) += 30;
    }
    else
    {
      uint64_t v348 = llvm::raw_ostream::write(v348, " Recursive branch detected in ", 0x1EuLL);
    }
    if (v401 >= 0) {
      uint64_t v350 = (const char *)&__dst;
    }
    else {
      uint64_t v350 = (const char *)__dst;
    }
    if (v401 >= 0) {
      size_t v351 = HIBYTE(v401) & 0x7F;
    }
    else {
      size_t v351 = (size_t)v400;
    }
    int v352 = llvm::raw_ostream::write(v348, v350, v351);
    uint64_t v353 = (unsigned char *)*((void *)v352 + 4);
    if (*((unsigned char **)v352 + 3) == v353)
    {
      llvm::raw_ostream::write(v352, "\n", 1uLL);
    }
    else
    {
      *uint64_t v353 = 10;
      ++*((void *)v352 + 4);
    }
  }
  if (SHIBYTE(v401) < 0) {
    operator delete((void *)__dst);
  }
LABEL_45:
  char v35 = v4 + 40;
  uint64_t v36 = v4[41];
  if (v36 == (uint64_t *)(v4 + 40))
  {
    if ((*((_WORD *)*v4 + 9) & 0x3FF0) == 0x640)
    {
LABEL_73:
      a1[25].i32[1] += (*(uint64_t (**)(uint64_t *, uint64_t, void, uint64_t, uint64_t))*v4[43])(v4[43], 12, 0, 1, 3);
      return;
    }
  }
  else
  {
    uint64_t v37 = v4[41];
    do
    {
      for (uint64_t i = v37[7]; (uint64_t *)i != v37 + 6; uint64_t i = *(void *)(i + 8))
      {
        if ((*(unsigned char *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            uint64_t i = *(void *)(i + 8);
        }
      }
      uint64_t v37 = (uint64_t *)v37[1];
    }
    while (v37 != (uint64_t *)v35);
    if ((*((_WORD *)*v4 + 9) & 0x3FF0) == 0x640)
    {
      do
      {
        for (uint64_t j = v36[7]; (uint64_t *)j != v36 + 6; uint64_t j = *(void *)(j + 8))
        {
          unsigned int v40 = *(unsigned __int16 **)(j + 16);
          int v41 = *v40;
          BOOL v43 = (v41 - 9) <= 0x3C && ((1 << (v41 - 9)) & 0x1000000000000605) != 0
             || v41 == 0;
          if (!v43 && (v40[4] & 0x10) == 0) {
            ++a1[24].i32[0];
          }
          if ((*(unsigned char *)j & 4) == 0)
          {
            while ((*(_WORD *)(j + 44) & 8) != 0)
              uint64_t j = *(void *)(j + 8);
          }
        }
        uint64_t v36 = (uint64_t *)v36[1];
      }
      while (v36 != (uint64_t *)v35);
      goto LABEL_73;
    }
  }
  long long v418 = xmmword_1CFB28DF0;
  long long v419 = unk_1CFB28E00;
  long long v416 = llvm::MCSchedModel::Default;
  long long v417 = unk_1CFB28DE0;
  long long v422 = unk_1CFB28DE0;
  long long v423 = xmmword_1CFB28DF0;
  long long v424 = unk_1CFB28E00;
  uint64_t v420 = 0;
  uint64_t v425 = 0;
  long long v421 = llvm::MCSchedModel::Default;
  long long v427 = 0u;
  long long v428 = 0u;
  long long v426 = 0u;
  unint64_t v429 = v431;
  uint64_t v430 = 0x1000000000;
  v431[8] = 0;
  llvm::TargetSchedModel::init((llvm::TargetSchedModel *)&v416, v385);
  uint64_t v44 = v4;
  uint64_t v4 = &v396;
  v396 = 0;
  uint64_t v397 = 0;
  uint64_t v394 = 0;
  unsigned int v395 = &v396;
  uint64_t v392 = &v393;
  unsigned int v393 = 0;
  int v391 = &unk_1F25FDA68;
  uint64_t v370 = (uint64_t)v44;
  uint64_t v45 = v44[41];
  if (v45 == (uint64_t *)v35)
  {
    unsigned int v46 = 0;
    goto LABEL_510;
  }
  char v380 = 0;
  long long v7 = 0;
  unsigned int v383 = 0;
  unsigned int v46 = 0;
  unsigned int v47 = 0;
  uint64_t v9 = 0x1000000000000605;
  int v378 = -1;
  int v379 = -1;
  int v371 = v35;
  do
  {
    uint64_t v48 = *(void *)(a3 + 248);
    unsigned int v49 = v45 >> 4;
    int v50 = *(_DWORD *)(a3 + 264);
    uint64_t v374 = v45;
    if (!byte_1EBD07020) {
      goto LABEL_83;
    }
    if (!v50) {
      goto LABEL_506;
    }
    uint64_t v51 = (v50 - 1) & (v49 ^ (v45 >> 9));
    unsigned int v52 = *(uint64_t **)(v48 + 16 * v51);
    if (v45 == v52)
    {
LABEL_82:
      if (!*(void *)(v48 + 16 * v51 + 8)) {
        goto LABEL_506;
      }
LABEL_83:
      double v55 = 0.0;
      if (v50)
      {
        unsigned int v56 = v49 ^ (v45 >> 9);
        unsigned int v57 = v50 - 1;
        uint64_t v58 = (v50 - 1) & v56;
        char v59 = *(uint64_t **)(v48 + 16 * v58);
        uint64_t v60 = v58;
        if (v45 == v59)
        {
LABEL_88:
          uint64_t v64 = *(void *)(v48 + 16 * v60 + 8);
          if (v64) {
            LODWORD(v64) = **(void **)(v64 + 32) == (void)v45;
          }
        }
        else
        {
          int v61 = 1;
          uint64_t v62 = *(uint64_t **)(v48 + 16 * v58);
          LODWORD(v60) = v58;
          while (v62 != (uint64_t *)-4096)
          {
            int v63 = v60 + v61++;
            uint64_t v60 = v63 & v57;
            uint64_t v62 = *(uint64_t **)(v48 + 16 * v60);
            if (v45 == v62) {
              goto LABEL_88;
            }
          }
          LODWORD(v64) = 0;
        }
        a1[26].i32[1] += v64;
        if (v45 == v59)
        {
LABEL_95:
          char v67 = *(void **)(v48 + 16 * v58 + 8);
          if (v67)
          {
            unsigned int v68 = 0;
            do
            {
              char v67 = (void *)*v67;
              ++v68;
            }
            while (v67);
            if (v68) {
              double v55 = __exp10((double)v68);
            }
          }
        }
        else
        {
          int v65 = 1;
          while (v59 != (uint64_t *)-4096)
          {
            int v66 = v58 + v65++;
            uint64_t v58 = v66 & v57;
            char v59 = *(uint64_t **)(v48 + 16 * v58);
            if (v45 == v59) {
              goto LABEL_95;
            }
          }
        }
      }
      char v69 = v45 + 6;
      uint64_t v70 = v45[7];
      if ((uint64_t *)v70 == v45 + 6) {
        goto LABEL_506;
      }
      uint64_t v71 = v45[7];
      do
      {
        int v72 = *(unsigned __int16 **)(v71 + 16);
        int v73 = *v72;
        BOOL v75 = (v73 - 9) <= 0x3C && ((1 << (v73 - 9)) & 0x1000000000000605) != 0
           || v73 == 0;
        if (!v75 && (v72[4] & 0x10) == 0) {
          a1[27].i32[0] += v55;
        }
        if ((*(unsigned char *)v71 & 4) == 0)
        {
          while ((*(_WORD *)(v71 + 44) & 8) != 0)
            uint64_t v71 = *(void *)(v71 + 8);
        }
        uint64_t v71 = *(void *)(v71 + 8);
      }
      while ((uint64_t *)v71 != v69);
      uint64_t v381 = v45 + 6;
      while (1)
      {
        int64_t v26 = *(const char **)(v70 + 16);
        int v76 = *(unsigned __int16 *)v26;
        if ((unsigned __int16)(v76 - 18) < 0xFFFBu && (unsigned __int16)(v76 - 7) < 0xFFFCu) {
          ++v46;
        }
        unsigned int v78 = v76 - 9;
        if ((v76 - 9) <= 0x3C && ((1 << (v76 - 9)) & 0x1000000000000605) != 0
          || v76 == 0)
        {
          goto LABEL_502;
        }
        if ((unsigned __int16)(v76 - 1) < 2u || (*((void *)v26 + 1) & 0x10) != 0) {
          goto LABEL_502;
        }
        char v82 = 1;
        if ((v78 > 0x3C || ((1 << v78) & 0x1000000000000605) == 0) && *(_WORD *)v26) {
          char v82 = v26[16] & 1;
        }
        if (v380) {
          ++a1[12].i32[1];
        }
        if (v7) {
          ++a1[13].i32[0];
        }
        int64_t v27 = (llvm *)sub_1CBD7C038(v76);
        switch((int)v27)
        {
          case 1:
            ++a1[1].i32[1];
            break;
          case 2:
            ++a1[2].i32[0];
            break;
          case 3:
            ++a1[2].i32[1];
            break;
          case 4:
            ++a1[3].i32[0];
            break;
          case 5:
            ++a1[3].i32[1];
            break;
          case 6:
            ++a1[4].i32[0];
            break;
          case 7:
          case 9:
          case 10:
          case 11:
          case 13:
          case 14:
          case 15:
            __break(1u);
            goto LABEL_741;
          case 8:
            ++a1[4].i32[1];
            break;
          case 12:
            ++a1[5].i32[0];
            break;
          case 16:
            ++a1[5].i32[1];
            break;
          default:
            ++a1[6].i32[0];
            break;
        }
        uint64_t v388 = *((void *)v26 + 2);
        int v84 = sub_1CBDA6464(v76, 0x2Eu);
        unsigned int v85 = *(_DWORD *)(v70 + 40);
        uint64_t v86 = (v84 + 1);
        if (v86 < v85)
        {
          __int32 v87 = a1[10].i32[1];
          unsigned int v88 = ~v84 + v85;
          size_t v89 = (_DWORD *)(*(void *)(v70 + 32) + 32 * v86 + 16);
          while (1)
          {
            int v90 = 0;
            if (*(v89 - 4) != 7 || *v89 != 64) {
              goto LABEL_166;
            }
            int v90 = 0;
            unsigned int v91 = (*(v89 - 4) >> 8) & 0xFFF;
            if (v91 > 2) {
              break;
            }
            if (v91 == 1) {
              goto LABEL_164;
            }
            if (v91 == 2) {
              goto LABEL_163;
            }
LABEL_166:
            v89 += 8;
            v87 += v90;
            a1[10].i32[1] = v87;
            if (!--v88) {
              goto LABEL_167;
            }
          }
          if (v91 == 3)
          {
            int v90 = 8;
            goto LABEL_166;
          }
          if (v91 != 15)
          {
            if (v91 != 14) {
              goto LABEL_166;
            }
LABEL_164:
            int v90 = 2;
            goto LABEL_166;
          }
LABEL_163:
          int v90 = 4;
          goto LABEL_166;
        }
LABEL_167:
        int v382 = (int)v7;
        if (v82)
        {
          unsigned int v386 = v47;
          ++a1[6].i32[1];
          unint64_t v92 = (_WORD *)(*((void *)&v418 + 1) + 24 * *((unsigned __int16 *)v26 + 3));
          if ((v92[4] & 0x1FFF) == 0x1FFE)
          {
            do
              unsigned int v101 = (*(uint64_t (**)(void))(*(void *)v428 + 200))(v428);
            while ((*(_WORD *)(*((void *)&v418 + 1) + 24 * v101 + 8) & 0x1FFF) == 0x1FFE);
            unint64_t v92 = (_WORD *)(*((void *)&v418 + 1) + 24 * v101);
          }
          if ((~(unsigned __int16)v92[4] & 0x1FFF) == 0) {
            ++a1[26].i32[0];
          }
          if ((v388 & 0x200000000000) != 0)
          {
            ++a1[7].i32[1];
          }
          else if ((v388 & 0x100000000000) != 0)
          {
            ++a1[7].i32[0];
          }
          else if ((v388 & 0x40000000000) != 0)
          {
            a1[8] = vadd_s32(a1[8], (int32x2_t)0x100000001);
          }
          else
          {
            ++a1[8].i32[0];
            if ((v388 & 0x80000000000) != 0)
            {
              ++a1[9].i32[0];
            }
            else if ((v388 & 0x4000) != 0)
            {
              if (!*(unsigned char *)(*(void *)(v70 + 16) + 4)) {
                goto LABEL_197;
              }
              unint64_t v94 = *(unsigned int *)(*(void *)(v70 + 32) + 4);
              uint64_t v95 = (*(uint64_t (**)(void))(**(void **)(v370 + 16) + 176))(*(void *)(v370 + 16));
              char v96 = 0;
              int v97 = *(uint64_t ***)(v95 + 248);
              unint64_t v98 = v94 >> 3;
              std::string v99 = *(uint64_t ***)(v95 + 240);
              do
              {
                if ((v94 - 0x40000000) >= 0xC0000001)
                {
                  uint64_t v100 = **v99;
                  if (v98 < *(unsigned __int16 *)(v100 + 22)
                    && ((1 << (v94 & 7)) & *(unsigned __int8 *)(*(void *)(v100 + 8) + v98)) != 0
                    && (!v96
                     || *v99 != v96
                     && ((*(_DWORD *)(v96[1] + ((*(unsigned __int16 *)(v100 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v100 + 24)) & 1) != 0))
                  {
                    char v96 = *v99;
                  }
                }
                ++v99;
              }
              while (v99 != v97);
              int v102 = *(_DWORD *)(*(void *)(v95 + 264)
                               + 24
                               * (*(unsigned __int16 *)(*v96 + 24)
                                + *(_DWORD *)(v95 + 272)
                                * (((unint64_t)v97 - *(void *)(v95 + 240)) >> 3))
                               + 4) >> 3;
              if (v102 == 4)
              {
LABEL_197:
                ++a1[10].i32[0];
              }
              else if (v102 == 2)
              {
                ++a1[9].i32[1];
              }
            }
          }
          if ((~(unsigned __int16)v92[4] & 0x1FFF) != 0 && v92[8]) {
            int v375 = *(__int16 *)(*((void *)v385 + 18) + 4 * (unsigned __int16)v92[7]);
          }
          else {
            int v375 = 0;
          }
          v412[0] = v413;
          v412[1] = (void *)0x1000000000;
          v415[0] = 0;
          v415[1] = 0;
          v414 = v415;
          uint64_t v406 = v408;
          uint64_t v407 = 0x1000000000;
          uint64_t v410 = 0;
          uint64_t v411 = 0;
          uint64_t v409 = &v410;
          v402[0] = v403;
          v402[1] = (void *)0x1000000000;
          v405[0] = 0;
          v405[1] = 0;
          uint64_t v404 = v405;
          uint64_t v103 = 8;
          uint64_t __dst = 1;
          do
          {
            *(_DWORD *)((char *)&__dst + v103) = -1;
            v103 += 8;
          }
          while (v103 != 136);
          uint64_t v104 = v388 & 0x80000000000;
          if (v379 + 1 == v386 && v104)
          {
            ++v386;
            ++a1[12].i32[0];
            ++a1[11].i32[0];
          }
          if ((v388 & 0x200000000000) == 0 && v378 + 1 == v386 && (v388 & 0x40000000000) == 0 && !v104)
          {
            ++v386;
            ++a1[11].i32[0];
          }
          unsigned int v377 = v46;
          if (llvm::MachineInstr::getNumExplicitOperands(v70) != 1)
          {
            unsigned int v105 = 0;
            unint64_t v106 = 0;
            while (1)
            {
              uint64_t v107 = *(void *)(v70 + 32);
              int v108 = (int *)(v107 + 32 * v106);
              unint64_t v109 = v106 + 1;
              uint64_t v110 = (unsigned char *)(v107 + 32 * (v106 + 1));
              int v111 = *v108;
              if (!*v108 && v108[1] == 31 || !*v110 && *(_DWORD *)(v107 + 32 * v109 + 4) == 31)
              {
                a1[41].i32[0] = 1;
                int v111 = *v108;
              }
              if (v111 != 1)
              {
                int v112 = *v110;
                if ((v111 & 0x10000FF) != 0x1000000 && v112 == 1) {
                  break;
                }
              }
LABEL_306:
              int NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(v70);
              unint64_t v106 = v109;
              if (v109 >= (NumExplicitOperands - 1)) {
                goto LABEL_307;
              }
            }
            if ((_BYTE)v111 || (unsigned int v114 = *(_DWORD *)(v107 + 32 * v106 + 4)) == 0)
            {
              ++v105;
              goto LABEL_306;
            }
            uint64_t v387 = (void *)(v107 + 32 * v109 + 16);
            uint64_t v115 = *v387 & 0x30;
            unint64_t v116 = *(unsigned int *)(*(void *)(v376 + 8) + 24 * v114 + 16);
            uint64_t v117 = (_WORD *)(*(void *)(v376 + 56) + ((v116 >> 3) & 0x1FFFFFFE));
            unsigned __int16 v118 = *v117 + (v116 & 0xF) * v114;
            while (2)
            {
              unsigned int v119 = v118;
              LODWORD(v398) = v118;
              sub_1CB8F4B90((uint64_t)&v406, (unsigned int *)&v398);
              if (v115)
              {
                LODWORD(v398) = v119;
                sub_1CB8F4B90((uint64_t)v412, (unsigned int *)&v398);
              }
              if ((~(unsigned __int16)v92[4] & 0x1FFF) != 0 && v92[10])
              {
                uint64_t v120 = (int *)(*((void *)v385 + 19) + 12 * (unsigned __int16)v92[9] + 8);
                uint64_t v121 = 12 * (unsigned __int16)v92[10];
                while (1)
                {
                  unsigned int v122 = *(v120 - 2);
                  if (v122 >= v105)
                  {
                    if (v122 > v105) {
                      goto LABEL_240;
                    }
                    if (!*(v120 - 1)) {
                      break;
                    }
                  }
                  v120 += 3;
                  v121 -= 12;
                  if (!v121) {
                    goto LABEL_240;
                  }
                }
                int v123 = *v120;
              }
              else if ((v388 & 0x40000000000) != 0)
              {
                int v123 = -(*(_DWORD *)v387 & 1);
              }
              else
              {
LABEL_240:
                int v123 = 0;
              }
              long long v124 = v396;
              if (v396)
              {
                uint64_t v125 = &v396;
                do
                {
                  int v126 = v125;
                  int v127 = v124;
                  unsigned int v128 = *((_DWORD *)v124 + 7);
                  uint64_t v129 = (uint64_t **)(v124 + 1);
                  if (v128 >= v119)
                  {
                    uint64_t v129 = (uint64_t **)v127;
                    uint64_t v125 = (uint64_t **)v127;
                  }
                  long long v124 = *v129;
                }
                while (v124);
                if (v125 != &v396)
                {
                  std::string v130 = v128 >= v119 ? v127 : (uint64_t *)v126;
                  if (*((_DWORD *)v130 + 7) <= v119)
                  {
                    if (v128 >= v119) {
                      int v126 = (uint64_t **)v127;
                    }
                    unsigned int v131 = *((_DWORD *)v126 + 8) - v123;
                    if ((*(unsigned char *)v387 & 0x10) != 0)
                    {
                      unsigned int v389 = v119;
                      unsigned int v390 = v131;
                      if (__dst)
                      {
                        int v132 = 16;
                        unint64_t v133 = &v400;
                        goto LABEL_257;
                      }
                      int v132 = v401;
                      if (!v401)
                      {
                        unsigned int v142 = 0;
                        unsigned int v143 = 0;
                        goto LABEL_272;
                      }
                      unint64_t v133 = v400;
LABEL_257:
                      int v134 = v132 - 1;
                      unsigned int v135 = v134 & (37 * v119);
                      uint64_t v136 = (unsigned int *)&v133[v135];
                      unsigned int v137 = *v136;
                      if (*v136 != v119)
                      {
                        int v138 = 0;
                        int v139 = 1;
                        while (v137 != -1)
                        {
                          if (v138) {
                            BOOL v140 = 0;
                          }
                          else {
                            BOOL v140 = v137 == -2;
                          }
                          if (v140) {
                            int v138 = v136;
                          }
                          unsigned int v141 = v135 + v139++;
                          unsigned int v135 = v141 & v134;
                          uint64_t v136 = (unsigned int *)&v133[v135];
                          unsigned int v137 = *v136;
                          if (*v136 == v119) {
                            goto LABEL_277;
                          }
                        }
                        if (v138) {
                          unsigned int v142 = v138;
                        }
                        else {
                          unsigned int v142 = v136;
                        }
                        if (__dst) {
                          unsigned int v143 = 16;
                        }
                        else {
                          unsigned int v143 = v401;
                        }
LABEL_272:
                        if (4 * (__dst >> 1) + 4 >= 3 * v143)
                        {
                          v143 *= 2;
                        }
                        else if (v143 + ~(__dst >> 1) - HIDWORD(__dst) > v143 >> 3)
                        {
                          goto LABEL_274;
                        }
                        sub_1CD3FA074((uint64_t)&__dst, v143);
                        v398 = 0;
                        sub_1CB91F718((uint64_t)&__dst, &v389, &v398);
                        unsigned int v142 = v398;
LABEL_274:
                        LODWORD(__dst) = __dst + 2;
                        if (*v142 != -1) {
                          --HIDWORD(__dst);
                        }
                        *unsigned int v142 = v389;
                        v142[1] = v390;
                      }
                    }
LABEL_277:
                    if (v123)
                    {
                      LODWORD(v398) = v119;
                      sub_1CB8F4B90((uint64_t)v402, (unsigned int *)&v398);
                    }
                    unsigned int v144 = v131 - v386;
                    if (v131 > v386)
                    {
                      v384[11].i32[0] += v144;
                      uint64_t v145 = v393;
                      if (v393)
                      {
                        uint64_t v146 = &v393;
                        do
                        {
                          uint64_t v147 = v146;
                          int v148 = v145;
                          unsigned int v149 = *((_DWORD *)v145 + 8);
                          int v150 = (uint64_t **)(v145 + 1);
                          if (v149 >= v119)
                          {
                            int v150 = (uint64_t **)v148;
                            uint64_t v146 = (uint64_t **)v148;
                          }
                          uint64_t v145 = *v150;
                        }
                        while (v145);
                        if (v146 != &v393)
                        {
                          uint64_t v151 = v149 >= v119 ? v148 : (uint64_t *)v147;
                          if (*((_DWORD *)v151 + 8) <= v119)
                          {
                            if (v149 >= v119) {
                              uint64_t v147 = (uint64_t **)v148;
                            }
                            long long v152 = v147[5];
                            if (((unint64_t)v152 & 0x40000000000) != 0)
                            {
                              v384[11].i32[1] += v144;
                            }
                            else if (((unint64_t)v152 & 0x80000000000) != 0)
                            {
                              v384[12].i32[0] += v144;
                            }
                          }
                        }
                      }
                      unsigned int v386 = v131;
                    }
                  }
                }
              }
              int v153 = (unsigned __int16)v117[1];
              ++v117;
              unsigned __int16 v118 = v153 + v119;
              if (!v153)
              {
                ++v105;
                a1 = v384;
                unsigned int v46 = v377;
                goto LABEL_306;
              }
              continue;
            }
          }
LABEL_307:
          uint64_t v155 = *(_DWORD **)(v70 + 32);
          if ((*v155 & 0x10000FF) == 0x1000000)
          {
            unsigned int v156 = v155[1];
            unint64_t v157 = *(unsigned int *)(*(void *)(v376 + 8) + 24 * v156 + 16);
            uint64_t v158 = (_WORD *)(*(void *)(v376 + 56) + ((v157 >> 3) & 0x1FFFFFFE));
            unsigned __int16 v159 = *v158 + (v157 & 0xF) * v156;
            do
            {
              uint64_t v160 = v159;
              if (v396)
              {
                uint64_t v161 = v396;
                unsigned int v162 = (uint64_t *)&v396;
                do
                {
                  uint64_t v163 = v162;
                  uint64_t v164 = v161;
                  unsigned int v165 = *((_DWORD *)v161 + 7);
                  char v166 = v161 + 1;
                  if (v165 >= v160) {
                    unsigned int v162 = v161;
                  }
                  else {
                    ++v161;
                  }
                  uint64_t v161 = (uint64_t *)*v161;
                }
                while (v161);
                if (v162 != (uint64_t *)&v396)
                {
                  if (v165 < v160) {
                    uint64_t v164 = v163;
                  }
                  if (*((_DWORD *)v164 + 7) <= v160)
                  {
                    uint64_t v167 = v163 + 1;
                    if (v165 >= v160) {
                      uint64_t v167 = v166;
                    }
                    uint64_t v168 = (uint64_t *)*v167;
                    uint64_t v169 = v162;
                    if (*v167)
                    {
                      do
                      {
                        uint64_t v170 = (uint64_t **)v168;
                        uint64_t v168 = (uint64_t *)*v168;
                      }
                      while (v168);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v170 = (uint64_t **)v169[2];
                        BOOL v33 = *v170 == v169;
                        uint64_t v169 = (uint64_t *)v170;
                      }
                      while (!v33);
                    }
                    if (v395 == (uint64_t **)v162) {
                      unsigned int v395 = v170;
                    }
                    --v397;
                    sub_1CB91F7C8(v396, v162);
                    operator delete(v162);
                  }
                }
              }
              if (v393)
              {
                unint64_t v171 = v393;
                uint64_t v172 = (uint64_t *)&v393;
                do
                {
                  unint64_t v173 = v172;
                  uint64_t v174 = v171;
                  unsigned int v175 = *((_DWORD *)v171 + 8);
                  uint64_t v176 = v171 + 1;
                  if (v175 >= v160) {
                    uint64_t v172 = v171;
                  }
                  else {
                    ++v171;
                  }
                  unint64_t v171 = (uint64_t *)*v171;
                }
                while (v171);
                if (v172 != (uint64_t *)&v393)
                {
                  if (v175 < v160) {
                    uint64_t v174 = v173;
                  }
                  if (*((_DWORD *)v174 + 8) <= v160)
                  {
                    unint64_t v177 = v173 + 1;
                    if (v175 >= v160) {
                      unint64_t v177 = v176;
                    }
                    uint64_t v178 = (uint64_t *)*v177;
                    unint64_t v179 = v172;
                    if (*v177)
                    {
                      do
                      {
                        uint64_t v180 = (uint64_t **)v178;
                        uint64_t v178 = (uint64_t *)*v178;
                      }
                      while (v178);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v180 = (uint64_t **)v179[2];
                        BOOL v33 = *v180 == v179;
                        unint64_t v179 = (uint64_t *)v180;
                      }
                      while (!v33);
                    }
                    if (v392 == (uint64_t **)v172) {
                      uint64_t v392 = v180;
                    }
                    --v394;
                    sub_1CB91F7C8(v393, v172);
                    operator delete(v172);
                  }
                }
              }
              uint64_t v181 = v396;
              uint64_t v182 = &v396;
              uint64_t v183 = &v396;
              if (v396)
              {
                do
                {
                  while (1)
                  {
                    uint64_t v183 = (uint64_t **)v181;
                    unsigned int v184 = *((_DWORD *)v181 + 7);
                    if (v184 <= v160) {
                      break;
                    }
                    uint64_t v181 = *v183;
                    uint64_t v182 = v183;
                    if (!*v183) {
                      goto LABEL_355;
                    }
                  }
                  if (v184 >= v160) {
                    goto LABEL_358;
                  }
                  uint64_t v181 = v183[1];
                }
                while (v181);
                uint64_t v182 = v183 + 1;
              }
LABEL_355:
              unint64_t v185 = (uint64_t *)operator new(0x28uLL);
              *(uint64_t *)((char *)v185 + 28) = ((unint64_t)(v386 + v375) << 32) | v160;
              *unint64_t v185 = 0;
              v185[1] = 0;
              v185[2] = (uint64_t)v183;
              *uint64_t v182 = v185;
              if (*v395)
              {
                unsigned int v395 = (uint64_t **)*v395;
                unint64_t v185 = *v182;
              }
              sub_1CB8358B8(v396, v185);
              ++v397;
LABEL_358:
              uint64_t v186 = v393;
              uint64_t v187 = &v393;
LABEL_359:
              uint64_t v188 = v187;
              if (v186)
              {
                do
                {
                  uint64_t v187 = (uint64_t **)v186;
                  unsigned int v189 = *((_DWORD *)v186 + 8);
                  if (v189 > v160)
                  {
                    uint64_t v186 = *v187;
                    goto LABEL_359;
                  }
                  if (v189 >= v160) {
                    goto LABEL_369;
                  }
                  uint64_t v186 = v187[1];
                }
                while (v186);
                uint64_t v188 = v187 + 1;
              }
              uint64_t v190 = operator new(0x30uLL);
              char v190[8] = v160;
              *((void *)v190 + 5) = v388;
              *(void *)uint64_t v190 = 0;
              *((void *)v190 + 1) = 0;
              *((void *)v190 + 2) = v187;
              *uint64_t v188 = (uint64_t *)v190;
              if (*v392)
              {
                uint64_t v392 = (uint64_t **)*v392;
                uint64_t v190 = *v188;
              }
              sub_1CB8358B8(v393, (uint64_t *)v190);
              ++v394;
LABEL_369:
              int v191 = (unsigned __int16)v158[1];
              ++v158;
              unsigned __int16 v159 = v191 + v160;
            }
            while (v191);
            unint64_t v192 = *(unsigned int *)(*(void *)(v376 + 8) + 24 * v156 + 16);
            uint64_t v193 = (_WORD *)(*(void *)(v376 + 56) + ((v192 >> 3) & 0x1FFFFFFE));
            unsigned __int16 v194 = *v193 + (v192 & 0xF) * v156;
            unsigned int v46 = v377;
            do
            {
              unsigned int v195 = v194;
              if (v411)
              {
                for (uint64_t k = v410; k; uint64_t k = (void *)*k)
                {
                  unsigned int v197 = *((_DWORD *)k + 7);
                  if (v197 <= v195)
                  {
                    if (v197 >= v195) {
                      goto LABEL_384;
                    }
                    ++k;
                  }
                }
              }
              else if (v407)
              {
                uint64_t v198 = v406;
                uint64_t v199 = 4 * v407;
                while (*v198 != v195)
                {
                  ++v198;
                  v199 -= 4;
                  if (!v199) {
                    goto LABEL_385;
                  }
                }
                if (v199)
                {
LABEL_384:
                  LODWORD(v398) = v195;
                  sub_1CB8F4B90((uint64_t)v412, (unsigned int *)&v398);
                }
              }
LABEL_385:
              int v200 = (unsigned __int16)v193[1];
              ++v193;
              unsigned __int16 v194 = v200 + v195;
            }
            while (v200);
          }
          int v201 = v378;
          if ((v388 & 0x200000000000) != 0) {
            int v202 = v378;
          }
          else {
            int v202 = v386;
          }
          if ((v388 & 0xC0000000000) == 0) {
            int v201 = v202;
          }
          int v203 = v379;
          if ((v388 & 0x80000000000) != 0) {
            int v203 = v386;
          }
          int v378 = v201;
          int v379 = v203;
          if ((v92[4] & 0x1FFF) == 0x1FFF) {
            int v204 = 0;
          }
          else {
            int v204 = v92[4] & 0x1FFF;
          }
          if ((__dst & 1) == 0) {
            MEMORY[0x1D25D9CD0](v400, 4);
          }
          sub_1CB833A08((uint64_t)&v404, v405[0]);
          if (v402[0] != v403) {
            free(v402[0]);
          }
          sub_1CB833A08((uint64_t)&v409, v410);
          if (v406 != v408) {
            free(v406);
          }
          sub_1CB833A08((uint64_t)&v414, v415[0]);
          if (v412[0] != v413) {
            free(v412[0]);
          }
          unsigned int v93 = v386 + v204;
        }
        else
        {
          sub_1CB833A08((uint64_t)&v395, v396);
          v396 = 0;
          uint64_t v397 = 0;
          unsigned int v395 = &v396;
          sub_1CD40B1BC(v393);
          unsigned int v393 = 0;
          uint64_t v394 = 0;
          unsigned int v93 = v47 + 1;
          uint64_t v392 = &v393;
        }
        unsigned int v205 = v93;
        uint64_t v206 = *(unsigned __int16 **)(v70 + 16);
        int v207 = *v206;
        if (v207 == 6504)
        {
          ++a1[14].i32[0];
          char v380 = 1;
        }
        int v208 = sub_1CBDA6464(v207, 0x2Eu);
        uint64_t v209 = *(_DWORD **)(v70 + 32);
        unint64_t v210 = *(void *)&v209[8 * v208 + 4] & 0x40;
        if (v210) {
          unsigned int v211 = v46;
        }
        else {
          unsigned int v211 = 0;
        }
        uint64_t v212 = sub_1CBE52E8C(v207);
        if ((v212 & 0xFF00000000) != 0 && v212 == 19)
        {
          int v214 = v388;
          if ((*v209 & 0x10000FF) == 0x1000000) {
            ++a1[20].i32[1];
          }
        }
        else
        {
          int v214 = v388;
          if ((v212 & 0xFF00000000) == 0) {
            goto LABEL_421;
          }
        }
        if ((v212 - 51) <= 0x18 && ((1 << (v212 - 51)) & 0x1F80007) != 0) {
          ++a1[15].i32[0];
        }
LABEL_421:
        __int16 v215 = *(_WORD *)(v70 + 44);
        uint64_t v216 = *((void *)v206 + 1);
        uint64_t v9 = 0x1000000000000605;
        unsigned int v47 = v205;
        if ((v215 & 0xC) != 0 && (v215 & 4) == 0)
        {
          uint64_t v217 = v70;
          char v69 = v381;
          int v218 = v382;
          if ((v216 & 0x400) == 0)
          {
            while ((*(_WORD *)(v217 + 44) & 8) != 0)
            {
              uint64_t v217 = *(void *)(v217 + 8);
              if ((*(unsigned char *)(*(void *)(v217 + 16) + 9) & 4) != 0) {
                goto LABEL_428;
              }
            }
            goto LABEL_429;
          }
LABEL_428:
          ++a1[14].i32[1];
          goto LABEL_429;
        }
        char v69 = v381;
        int v218 = v382;
        if ((v216 & 0x400) != 0) {
          goto LABEL_428;
        }
LABEL_429:
        if ((v214 & 2) != 0) {
          ++a1[15].i32[1];
        }
        if ((v214 & 0x4000000) != 0) {
          ++a1[16].i32[0];
        }
        if ((v214 & 0x2001C00) == 0x2000800)
        {
          ++a1[21].i32[1];
        }
        else if ((v214 & 0x2001C00) == 0x2000400)
        {
          ++a1[21].i32[0];
        }
        uint64_t v219 = v214 & 0x1D00;
        if (v219 == 1280) {
          ++a1[16].i32[1];
        }
        uint64_t v220 = v214 & 0x1E00;
        if (v220 == 1536) {
          ++a1[17].i32[0];
        }
        if (v219 == 2304) {
          ++a1[17].i32[1];
        }
        if (v220 == 2560) {
          ++a1[18].i32[0];
        }
        if (v219 == 3328) {
          ++a1[18].i32[1];
        }
        if (v220 == 3584) {
          ++a1[19].i32[0];
        }
        if (v219 == 5376) {
          ++a1[19].i32[1];
        }
        if (v220 == 5632) {
          ++a1[20].i32[0];
        }
        if ((v214 & 0x8000000) != 0) {
          ++a1[22].i32[0];
        }
        v383 += v211;
        long long v7 = (uint64_t *)(v218 + (v210 >> 6));
        ++a1[1].i32[0];
        uint64_t v221 = v395;
        if (v395 != &v396)
        {
          do
          {
            uint64_t v222 = v221;
            uint64_t v223 = v221[1];
            uint64_t v224 = v221;
            if (v223)
            {
              do
              {
                uint64_t v221 = (uint64_t **)v223;
                uint64_t v223 = (uint64_t *)*v223;
              }
              while (v223);
            }
            else
            {
              do
              {
                uint64_t v221 = (uint64_t **)v224[2];
                BOOL v33 = *v221 == (uint64_t *)v224;
                uint64_t v224 = v221;
              }
              while (!v33);
            }
            if (*((_DWORD *)v222 + 8) + 1 <= v47)
            {
              unsigned int v225 = *((_DWORD *)v222 + 7);
              if (v396)
              {
                int v226 = v396;
                uint64_t v227 = (uint64_t *)&v396;
                do
                {
                  uint64_t v228 = v227;
                  uint64_t v229 = v226;
                  unsigned int v230 = *((_DWORD *)v226 + 7);
                  uint64_t v231 = v226 + 1;
                  if (v230 >= v225) {
                    uint64_t v227 = v226;
                  }
                  else {
                    ++v226;
                  }
                  int v226 = (uint64_t *)*v226;
                }
                while (v226);
                if (v227 != (uint64_t *)&v396)
                {
                  if (v230 < v225) {
                    uint64_t v229 = v228;
                  }
                  if (*((_DWORD *)v229 + 7) <= v225)
                  {
                    uint64_t v232 = v228 + 1;
                    if (v230 >= v225) {
                      uint64_t v232 = v231;
                    }
                    uint64_t v233 = (uint64_t *)*v232;
                    uint64_t v234 = v227;
                    if (*v232)
                    {
                      do
                      {
                        int v235 = (uint64_t **)v233;
                        uint64_t v233 = (uint64_t *)*v233;
                      }
                      while (v233);
                    }
                    else
                    {
                      do
                      {
                        int v235 = (uint64_t **)v234[2];
                        BOOL v33 = *v235 == v234;
                        uint64_t v234 = (uint64_t *)v235;
                      }
                      while (!v33);
                    }
                    if (v395 == (uint64_t **)v227) {
                      unsigned int v395 = v235;
                    }
                    --v397;
                    sub_1CB91F7C8(v396, v227);
                    operator delete(v227);
                  }
                }
              }
              if (v393)
              {
                int v236 = v393;
                uint64_t v237 = (uint64_t *)&v393;
                do
                {
                  uint64_t v238 = v237;
                  uint64_t v239 = v236;
                  unsigned int v240 = *((_DWORD *)v236 + 8);
                  uint64_t v241 = v236 + 1;
                  if (v240 >= v225) {
                    uint64_t v237 = v236;
                  }
                  else {
                    ++v236;
                  }
                  int v236 = (uint64_t *)*v236;
                }
                while (v236);
                if (v237 != (uint64_t *)&v393)
                {
                  if (v240 < v225) {
                    uint64_t v239 = v238;
                  }
                  if (*((_DWORD *)v239 + 8) <= v225)
                  {
                    uint64_t v242 = v238 + 1;
                    if (v240 >= v225) {
                      uint64_t v242 = v241;
                    }
                    uint64_t v243 = (uint64_t *)*v242;
                    uint64_t v244 = v237;
                    if (*v242)
                    {
                      do
                      {
                        uint64_t v245 = (uint64_t **)v243;
                        uint64_t v243 = (uint64_t *)*v243;
                      }
                      while (v243);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v245 = (uint64_t **)v244[2];
                        BOOL v33 = *v245 == v244;
                        uint64_t v244 = (uint64_t *)v245;
                      }
                      while (!v33);
                    }
                    if (v392 == (uint64_t **)v237) {
                      uint64_t v392 = v245;
                    }
                    --v394;
                    sub_1CB91F7C8(v393, v237);
                    operator delete(v237);
                  }
                }
              }
            }
          }
          while (v221 != &v396);
          char v69 = v381;
        }
LABEL_502:
        if ((*(unsigned char *)v70 & 4) == 0)
        {
          while ((*(_WORD *)(v70 + 44) & 8) != 0)
            uint64_t v70 = *(void *)(v70 + 8);
        }
        uint64_t v70 = *(void *)(v70 + 8);
        if ((uint64_t *)v70 == v69) {
          goto LABEL_506;
        }
      }
    }
    int v53 = 1;
    while (v52 != (uint64_t *)-4096)
    {
      int v54 = v51 + v53++;
      uint64_t v51 = v54 & (v50 - 1);
      unsigned int v52 = *(uint64_t **)(v48 + 16 * v51);
      if (v45 == v52) {
        goto LABEL_82;
      }
    }
LABEL_506:
    uint64_t v45 = (uint64_t *)v374[1];
  }
  while (v45 != (uint64_t *)v371);
  if (v7) {
    unsigned int v46 = v383 / v7;
  }
LABEL_510:
  a1[13].i32[1] = v46;
  unint64_t v246 = sub_1CBAD7960(v370, 0, 1);
  unint64_t v247 = HIDWORD(v246);
  unsigned int v248 = a1[22].u32[1];
  if (v248 <= v246) {
    unsigned int v248 = v246;
  }
  a1[22].i32[1] = v248;
  if (a1[45].i32[0] > HIDWORD(v246)) {
    LODWORD(v247) = a1[45].i32[0];
  }
  a1[45].i32[0] = v247;
  if (((*(unsigned __int16 *)(*(void *)v370 + 18) >> 4) & 0x3FFu) - 100 > 8) {
    goto LABEL_573;
  }
  uint64_t v249 = *(void *)(v370 + 344);
  uint64_t v250 = (*(uint64_t (**)(uint64_t))(*(void *)v249 + 336))(v249);
  unsigned int v251 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v250 + 24))(v250, 4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v249 + 128))(&__dst, v249, 3);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v249 + 136))(v412, v249, 3);
  uint64_t v252 = __dst;
  unsigned int v253 = v412[0];
  if (__dst)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)__dst + 16))(&__dst, __dst);
    uint64_t v254 = __dst;
    if (v253)
    {
LABEL_517:
      (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v253 + 16))(&__dst, v253);
      uint64_t v255 = __dst;
      goto LABEL_518;
    }
  }
  else
  {
    uint64_t v254 = 0;
    if (v412[0]) {
      goto LABEL_517;
    }
  }
  uint64_t v255 = 0;
LABEL_518:
  unsigned __int32 v256 = 0;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v254 + 24))(v254, v255) & 1) == 0)
  {
    uint64_t v282 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v254 + 32))(v254);
    uint64_t v283 = *v282;
    int v284 = (*(uint64_t (**)(uint64_t, void))(*(void *)v249 + 400))(v249, *v282);
    uint64_t v286 = sub_1CB83544C(a4, *(void *)(v283 + 24));
    if (v285 == 1) {
    if ((v251 - 1 + ((unint64_t)(v286 + 7) >> 3)) / v251 + v284 > v256)
    }
      unsigned __int32 v256 = (v251 - 1 + ((unint64_t)(v286 + 7) >> 3)) / v251 + v284;
    (*(void (**)(uint64_t))(*(void *)v254 + 40))(v254);
  }
  if (v255) {
    (*(void (**)(uint64_t))(*(void *)v255 + 8))(v255);
  }
  (*(void (**)(uint64_t))(*(void *)v254 + 8))(v254);
  if (v253) {
    (*(void (**)(void *))(*(void *)v253 + 8))(v253);
  }
  if (v252) {
    (*(void (**)(uint64_t))(*(void *)v252 + 8))(v252);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v249 + 128))(&__dst, v249, 5);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v249 + 136))(v412, v249, 5);
  uint64_t v257 = __dst;
  uint64_t v258 = v412[0];
  if (__dst)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)__dst + 16))(&__dst, __dst);
    uint64_t v259 = __dst;
    if (v258)
    {
LABEL_527:
      (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v258 + 16))(&__dst, v258);
      uint64_t v260 = __dst;
      goto LABEL_528;
    }
  }
  else
  {
    uint64_t v259 = 0;
    if (v412[0]) {
      goto LABEL_527;
    }
  }
  uint64_t v260 = 0;
LABEL_528:
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v259 + 24))(v259, v260) & 1) == 0)
  {
    uint64_t v287 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v259 + 32))(v259);
    uint64_t v288 = *v287;
    if (((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v249 + 184))(v249, 15, *v287) & 1) == 0)
    {
      int v289 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v249 + 400))(v249, v288);
      uint64_t v291 = sub_1CB83544C(a4, *(void *)(v288 + 24));
      if (v290 == 1) {
      if ((v251 - 1 + ((unint64_t)(v291 + 7) >> 3)) / v251 + v289 > v256)
      }
        unsigned __int32 v256 = (v251 - 1 + ((unint64_t)(v291 + 7) >> 3)) / v251 + v289;
    }
    (*(void (**)(uint64_t))(*(void *)v259 + 40))(v259);
  }
  if (v260) {
    (*(void (**)(uint64_t))(*(void *)v260 + 8))(v260);
  }
  (*(void (**)(uint64_t))(*(void *)v259 + 8))(v259);
  if (v258) {
    (*(void (**)(void *))(*(void *)v258 + 8))(v258);
  }
  if (v257) {
    (*(void (**)(uint64_t))(*(void *)v257 + 8))(v257);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v249 + 128))(&__dst, v249, 4);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v249 + 136))(v412, v249, 4);
  uint64_t v261 = __dst;
  uint64_t v262 = v412[0];
  if (__dst)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)__dst + 16))(&__dst, __dst);
    uint64_t v263 = __dst;
    if (v262)
    {
LABEL_537:
      (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v262 + 16))(&__dst, v262);
      uint64_t v264 = __dst;
      goto LABEL_538;
    }
  }
  else
  {
    uint64_t v263 = 0;
    if (v412[0]) {
      goto LABEL_537;
    }
  }
  uint64_t v264 = 0;
LABEL_538:
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v263 + 24))(v263, v264) & 1) == 0)
  {
    unsigned int v292 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v263 + 32))(v263);
    uint64_t v293 = *v292;
    int v294 = (*(uint64_t (**)(uint64_t, void))(*(void *)v249 + 400))(v249, *v292);
    uint64_t v296 = sub_1CB83544C(a4, *(void *)(v293 + 24));
    if (v295 == 1) {
    if ((v251 - 1 + ((unint64_t)(v296 + 7) >> 3)) / v251 + v294 > v256)
    }
      unsigned __int32 v256 = (v251 - 1 + ((unint64_t)(v296 + 7) >> 3)) / v251 + v294;
    (*(void (**)(uint64_t))(*(void *)v263 + 40))(v263);
  }
  if (v264) {
    (*(void (**)(uint64_t))(*(void *)v264 + 8))(v264);
  }
  (*(void (**)(uint64_t))(*(void *)v263 + 8))(v263);
  if (v262) {
    (*(void (**)(void *))(*(void *)v262 + 8))(v262);
  }
  if (v261) {
    (*(void (**)(uint64_t))(*(void *)v261 + 8))(v261);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v249 + 128))(&__dst, v249, 6);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v249 + 136))(v412, v249, 6);
  uint64_t v265 = __dst;
  uint64_t v266 = v412[0];
  if (__dst)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)__dst + 16))(&__dst, __dst);
    uint64_t v267 = __dst;
    if (v266)
    {
LABEL_547:
      (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v266 + 16))(&__dst, v266);
      uint64_t v268 = __dst;
      goto LABEL_548;
    }
  }
  else
  {
    uint64_t v267 = 0;
    if (v412[0]) {
      goto LABEL_547;
    }
  }
  uint64_t v268 = 0;
LABEL_548:
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v267 + 24))(v267, v268) & 1) == 0)
  {
    unsigned int v297 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v267 + 32))(v267);
    uint64_t v298 = *v297;
    int v299 = (*(uint64_t (**)(uint64_t, void))(*(void *)v249 + 400))(v249, *v297);
    uint64_t v301 = sub_1CB83544C(a4, *(void *)(v298 + 24));
    if (v300 == 1) {
    if ((v251 - 1 + ((unint64_t)(v301 + 7) >> 3)) / v251 + v299 > v256)
    }
      unsigned __int32 v256 = (v251 - 1 + ((unint64_t)(v301 + 7) >> 3)) / v251 + v299;
    (*(void (**)(uint64_t))(*(void *)v267 + 40))(v267);
  }
  if (v268) {
    (*(void (**)(uint64_t))(*(void *)v268 + 8))(v268);
  }
  (*(void (**)(uint64_t))(*(void *)v267 + 8))(v267);
  if (v266) {
    (*(void (**)(void *))(*(void *)v266 + 8))(v266);
  }
  if (v265) {
    (*(void (**)(uint64_t))(*(void *)v265 + 8))(v265);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v249 + 128))(&__dst, v249, 7);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v249 + 136))(v412, v249, 7);
  uint64_t v269 = __dst;
  uint64_t v270 = v412[0];
  if (__dst)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)__dst + 16))(&__dst, __dst);
    uint64_t v271 = __dst;
    if (v270)
    {
LABEL_557:
      (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v270 + 16))(&__dst, v270);
      uint64_t v272 = __dst;
      goto LABEL_558;
    }
  }
  else
  {
    uint64_t v271 = 0;
    if (v412[0]) {
      goto LABEL_557;
    }
  }
  uint64_t v272 = 0;
LABEL_558:
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v271 + 24))(v271, v272) & 1) == 0)
  {
    uint64_t v302 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v271 + 32))(v271);
    uint64_t v303 = *v302;
    int v304 = (*(uint64_t (**)(uint64_t, void))(*(void *)v249 + 400))(v249, *v302);
    uint64_t v306 = sub_1CB83544C(a4, *(void *)(v303 + 24));
    if (v305 == 1) {
    if ((v251 - 1 + ((unint64_t)(v306 + 7) >> 3)) / v251 + v304 > v256)
    }
      unsigned __int32 v256 = (v251 - 1 + ((unint64_t)(v306 + 7) >> 3)) / v251 + v304;
    (*(void (**)(uint64_t))(*(void *)v271 + 40))(v271);
  }
  if (v272) {
    (*(void (**)(uint64_t))(*(void *)v272 + 8))(v272);
  }
  (*(void (**)(uint64_t))(*(void *)v271 + 8))(v271);
  uint64_t v273 = v384;
  if (v270) {
    (*(void (**)(void *))(*(void *)v270 + 8))(v270);
  }
  if (v269) {
    (*(void (**)(uint64_t))(*(void *)v269 + 8))(v269);
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)v249 + 312))(v249))
  {
    unsigned __int32 v274 = (*(uint64_t (**)(uint64_t))(*(void *)v249 + 392))(v249);
    if (v256 <= v274) {
      unsigned __int32 v256 = v274;
    }
  }
  v384[23].i32[0] = v256;
  uint64_t v275 = *(void *)(v370 + 344);
  uint64_t v276 = sub_1CD1138B8(v275, 9, 0);
  uint64_t v277 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v275 + 176))(v275, 20);
  if (v277)
  {
    if (v277 == 1)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v275 + 128))(&__dst, v275, 20);
      uint64_t v354 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)__dst + 32))(__dst);
      uint64_t v355 = __dst;
      uint64_t __dst = 0;
      if (v355) {
        (*(void (**)(uint64_t))(*(void *)v355 + 8))(v355);
      }
      if (!v354) {
        goto LABEL_569;
      }
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v275 + 128))(&__dst, v275, 20);
      uint64_t v354 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)__dst + 32))(__dst);
      uint64_t v366 = __dst;
      uint64_t __dst = 0;
      if (v366) {
        (*(void (**)(uint64_t))(*(void *)v366 + 8))(v366);
      }
      uint64_t v273 = v384;
      if (!v354) {
        goto LABEL_569;
      }
    }
    int v356 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v275 + 400))(v275, v354);
    if (v276 <= v356 + 1) {
      uint64_t v276 = (v356 + 1);
    }
    else {
      uint64_t v276 = v276;
    }
  }
LABEL_569:
  uint64_t v278 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v275 + 176))(v275, 21);
  if (!v278) {
    goto LABEL_570;
  }
  if (v278 == 1)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v275 + 128))(&__dst, v275, 21);
    uint64_t v357 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)__dst + 32))(__dst);
    uint64_t v358 = __dst;
    uint64_t __dst = 0;
    if (v358) {
      (*(void (**)(uint64_t))(*(void *)v358 + 8))(v358);
    }
    if (v357)
    {
LABEL_686:
      int v359 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v275 + 400))(v275, v357);
      if (v276 <= v359 + 1) {
        uint64_t v276 = (v359 + 1);
      }
      else {
        uint64_t v276 = v276;
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v275 + 128))(&__dst, v275, 21);
    uint64_t v357 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)__dst + 32))(__dst);
    uint64_t v367 = __dst;
    uint64_t __dst = 0;
    if (v367) {
      (*(void (**)(uint64_t))(*(void *)v367 + 8))(v367);
    }
    uint64_t v273 = v384;
    if (v357) {
      goto LABEL_686;
    }
  }
LABEL_570:
  uint64_t v279 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v275 + 176))(v275, 22);
  if (!v279) {
    goto LABEL_571;
  }
  if (v279 == 1)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v275 + 128))(&__dst, v275, 22);
    uint64_t v360 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)__dst + 32))(__dst);
    uint64_t v361 = __dst;
    uint64_t __dst = 0;
    if (v361) {
      (*(void (**)(uint64_t))(*(void *)v361 + 8))(v361);
    }
    if (v360)
    {
LABEL_693:
      int v362 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v275 + 400))(v275, v360);
      if (v276 <= v362 + 1) {
        uint64_t v276 = (v362 + 1);
      }
      else {
        uint64_t v276 = v276;
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v275 + 128))(&__dst, v275, 22);
    uint64_t v360 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)__dst + 32))(__dst);
    uint64_t v368 = __dst;
    uint64_t __dst = 0;
    if (v368) {
      (*(void (**)(uint64_t))(*(void *)v368 + 8))(v368);
    }
    uint64_t v273 = v384;
    if (v360) {
      goto LABEL_693;
    }
  }
LABEL_571:
  uint64_t v280 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v275 + 176))(v275, 23);
  if (v280)
  {
    if (v280 == 1)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v275 + 128))(&__dst, v275, 23);
      uint64_t v363 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)__dst + 32))(__dst);
      uint64_t v364 = __dst;
      uint64_t __dst = 0;
      if (v364) {
        (*(void (**)(uint64_t))(*(void *)v364 + 8))(v364);
      }
      if (!v363) {
        goto LABEL_572;
      }
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v275 + 128))(&__dst, v275, 23);
      uint64_t v363 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)__dst + 32))(__dst);
      uint64_t v369 = __dst;
      uint64_t __dst = 0;
      if (v369) {
        (*(void (**)(uint64_t))(*(void *)v369 + 8))(v369);
      }
      uint64_t v273 = v384;
      if (!v363) {
        goto LABEL_572;
      }
    }
    int v365 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v275 + 400))(v275, v363);
    if (v276 <= v365 + 1) {
      uint64_t v276 = (v365 + 1);
    }
    else {
      uint64_t v276 = v276;
    }
  }
LABEL_572:
  uint64_t v281 = sub_1CD1138B8(v275, 13, v276);
  v273[23].i32[1] = sub_1CD1138B8(v275, 12, v281);
LABEL_573:
  sub_1CD40B1BC(v393);
  sub_1CB833A08((uint64_t)&v395, v396);
  if (v429 != v431) {
    free(v429);
  }
}

uint64_t sub_1CBAD4DDC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_1CBAD4DE4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 124);
}

uint64_t sub_1CBAD4DEC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 132);
}

uint64_t sub_1CBAD4DF4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

uint64_t sub_1CBAD4DFC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 132);
}

uint64_t sub_1CBAD4E04(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

uint64_t sub_1CBAD4E0C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 116);
}

uint64_t sub_1CBAD4E14(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t sub_1CBAD4E1C(uint64_t a1, void *a2)
{
  v62[16] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v4 = *(llvm::Module **)(*a2 + 40);
  uint64_t v58 = "tpp_functions";
  LOWORD(v62[0]) = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v4, (const char **)&v58);
  if (NamedMetadata && (v6 = *(uint64_t **)(NamedMetadata + 48), uint64_t v7 = *((unsigned int *)v6 + 2), v7))
  {
    uint64_t v8 = *v6;
    while (*(void *)(*(void *)(*(void *)v8 - 8 * *(unsigned int *)(*(void *)v8 + 8)) + 128) != v3)
    {
      v8 += 8;
      if (!--v7) {
        goto LABEL_6;
      }
    }
    uint64_t v58 = (char *)v62;
    char v59 = (char *)v62;
    LODWORD(v61) = 0;
    uint64_t v21 = a2[41];
    uint64_t v60 = 0x100000010;
    v62[0] = v21;
    uint64_t v22 = *(void *)(*(void *)(v21 + 88) + 8 * (**(void **)(v21 + 88) == *(void *)(v21 + 8)));
    double v55 = v57;
    uint64_t v56 = 0xA00000000;
    sub_1CB91FBE0((uint64_t)&v55, 1uLL, v22);
    unsigned int v23 = v56;
    if (v56)
    {
      while (1)
      {
        uint64_t v24 = *((void *)v55 + v23 - 1);
        LODWORD(v56) = v23 - 1;
        int v25 = v59;
        uint64_t v26 = HIDWORD(v60);
        if (v59 != v58) {
          break;
        }
        if (HIDWORD(v60))
        {
          int64_t v27 = 0;
          uint64_t v28 = 8 * HIDWORD(v60);
          uint64_t v29 = v59;
          while (*(void *)v29 != v24)
          {
            if (*(void *)v29 == -2) {
              int64_t v27 = v29;
            }
            v29 += 8;
            v28 -= 8;
            if (!v28)
            {
              if (!v27) {
                goto LABEL_38;
              }
              *(void *)int64_t v27 = v24;
              LODWORD(v61) = v61 - 1;
              goto LABEL_62;
            }
          }
          goto LABEL_94;
        }
LABEL_38:
        unsigned int v30 = v60;
        if (HIDWORD(v60) >= v60) {
          goto LABEL_41;
        }
        ++HIDWORD(v60);
        *(void *)&v59[8 * v26] = v24;
LABEL_62:
        unsigned int v40 = v59;
        unsigned int v41 = v60;
        int v42 = HIDWORD(v60);
        if (v59 != v58) {
          goto LABEL_72;
        }
        if (HIDWORD(v60))
        {
          BOOL v43 = 0;
          uint64_t v44 = 8 * HIDWORD(v60);
          uint64_t v45 = v59;
          while (*(void *)v45 != v24)
          {
            if (*(void *)v45 == -2) {
              BOOL v43 = v45;
            }
            v45 += 8;
            v44 -= 8;
            if (!v44)
            {
              if (!v43) {
                goto LABEL_70;
              }
              *(void *)BOOL v43 = v24;
              LODWORD(v61) = v61 - 1;
              goto LABEL_93;
            }
          }
          goto LABEL_93;
        }
LABEL_70:
        if (v60 <= HIDWORD(v60))
        {
LABEL_72:
          if (3 * (int)v60 <= (4 * (HIDWORD(v60) - v61)))
          {
            if (v60 >= 0x40) {
              unsigned int v41 = 2 * v60;
            }
            else {
              unsigned int v41 = 128;
            }
          }
          else if ((int)v60 - HIDWORD(v60) >= v60 >> 3)
          {
            goto LABEL_74;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v58, v41);
          unsigned int v41 = v60;
          unsigned int v40 = v59;
LABEL_74:
          unsigned int v46 = v41 - 1;
          unsigned int v47 = (v41 - 1) & ((v24 >> 4) ^ (v24 >> 9));
          uint64_t v48 = &v40[8 * v47];
          uint64_t v49 = *(void *)v48;
          if (*(void *)v48 == -1)
          {
            int v50 = 0;
LABEL_86:
            if (v50) {
              int v54 = v50;
            }
            else {
              int v54 = v48;
            }
            if (*(void *)v54 != v24)
            {
              if (*(void *)v54 == -2) {
                LODWORD(v61) = v61 - 1;
              }
              else {
                ++HIDWORD(v60);
              }
              *(void *)int v54 = v24;
            }
          }
          else
          {
            int v50 = 0;
            int v51 = 1;
            while (v49 != v24)
            {
              if (v50) {
                BOOL v52 = 0;
              }
              else {
                BOOL v52 = v49 == -2;
              }
              if (v52) {
                int v50 = v48;
              }
              unsigned int v53 = v47 + v51++;
              unsigned int v47 = v53 & v46;
              uint64_t v48 = &v40[8 * (v53 & v46)];
              uint64_t v49 = *(void *)v48;
              if (*(void *)v48 == -1) {
                goto LABEL_86;
              }
            }
          }
          goto LABEL_93;
        }
        ++HIDWORD(v60);
        *(void *)&v59[8 * v42] = v24;
LABEL_93:
        sub_1CB91FB58((uint64_t)&v55, *(char **)(v24 + 88), *(char **)(v24 + 96));
LABEL_94:
        unsigned int v23 = v56;
        if (!v56) {
          goto LABEL_108;
        }
      }
      unsigned int v30 = v60;
LABEL_41:
      if (3 * v30 <= 4 * (HIDWORD(v60) - (int)v61))
      {
        if (v30 >= 0x40) {
          v30 *= 2;
        }
        else {
          unsigned int v30 = 128;
        }
      }
      else if (v30 - HIDWORD(v60) >= v30 >> 3)
      {
LABEL_43:
        unsigned int v31 = v30 - 1;
        unsigned int v32 = (v30 - 1) & ((v24 >> 4) ^ (v24 >> 9));
        BOOL v33 = &v25[8 * v32];
        uint64_t v34 = *(void *)v33;
        if (*(void *)v33 != -1)
        {
          char v35 = 0;
          int v36 = 1;
          while (v34 != v24)
          {
            if (v35) {
              BOOL v37 = 0;
            }
            else {
              BOOL v37 = v34 == -2;
            }
            if (v37) {
              char v35 = v33;
            }
            unsigned int v38 = v32 + v36++;
            unsigned int v32 = v38 & v31;
            BOOL v33 = &v25[8 * (v38 & v31)];
            uint64_t v34 = *(void *)v33;
            if (*(void *)v33 == -1) {
              goto LABEL_55;
            }
          }
          goto LABEL_94;
        }
        char v35 = 0;
LABEL_55:
        if (v35) {
          uint64_t v39 = v35;
        }
        else {
          uint64_t v39 = v33;
        }
        if (*(void *)v39 == v24) {
          goto LABEL_94;
        }
        if (*(void *)v39 == -2) {
          LODWORD(v61) = v61 - 1;
        }
        else {
          ++HIDWORD(v60);
        }
        *(void *)uint64_t v39 = v24;
        goto LABEL_62;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v58, v30);
      unsigned int v30 = v60;
      int v25 = v59;
      goto LABEL_43;
    }
LABEL_108:
    unsigned int v9 = sub_1CBAD7960((uint64_t)a2, (uint64_t *)&v58, 0);
    if (v55 != v57) {
      free(v55);
    }
    if (v59 != v58) {
      free(v59);
    }
  }
  else
  {
LABEL_6:
    unsigned int v9 = sub_1CBAD7960((uint64_t)a2, 0, 0);
  }
  uint64_t v10 = *(llvm::Module **)(v3 + 40);
  sub_1CD1157F4(v10, 1, (uint64_t)&v58);
  uint64_t v11 = (char *)a2[2];
  if ((_BYTE)v59)
  {
    unsigned int v12 = v58;
    sub_1CD1157F4(v10, 0, (uint64_t)&v58);
    unsigned int v13 = v58;
    if (!(_BYTE)v59) {
      unsigned int v13 = 0;
    }
    if (v12 < v13) {
      unsigned int v13 = v12;
    }
    if ((_BYTE)v59) {
      unsigned int v14 = v13;
    }
    else {
      unsigned int v14 = v12;
    }
    uint64_t v58 = (char *)&unk_1F25FDCB8;
    char v59 = v11;
    int v61 = (const char **)&v58;
    int v15 = sub_1CBD854F8((uint64_t)&v58);
    if (v61 == (const char **)&v58)
    {
      (*((void (**)(char **))v58 + 4))(&v58);
    }
    else if (v61)
    {
      (*((void (**)(void))*v61 + 5))();
    }
    unsigned int v16 = dword_1CDB15BA0[v15];
    if (v16 >= v14) {
      unsigned int v16 = v14;
    }
    if (v16 > v9) {
      unsigned int v9 = v16;
    }
  }
  uint64_t v58 = (char *)&unk_1F25FDCB8;
  char v59 = v11;
  int v61 = (const char **)&v58;
  int v17 = sub_1CBD854F8((uint64_t)&v58);
  if (v61 == (const char **)&v58)
  {
    (*((void (**)(char **))v58 + 4))(&v58);
  }
  else if (v61)
  {
    (*((void (**)(void))*v61 + 5))();
  }
  unsigned int v18 = dword_1CDB15BA0[v17];
  if (v9 <= 1) {
    unsigned int v19 = 1;
  }
  else {
    unsigned int v19 = v9;
  }
  if (v18 >= v19) {
    return v19;
  }
  else {
    return v18;
  }
}

uint64_t sub_1CBAD5418(uint64_t a1)
{
  return *(unsigned int *)(a1 + 212);
}

uint64_t sub_1CBAD5420(uint64_t a1)
{
  return *(unsigned int *)(a1 + 216);
}

uint64_t sub_1CBAD5428(uint64_t a1, void *a2)
{
  v56[16] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v4 = *(llvm::Module **)(*a2 + 40);
  BOOL v52 = "tpp_functions";
  LOWORD(v56[0]) = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v4, (const char **)&v52);
  if (NamedMetadata && (v6 = *(uint64_t **)(NamedMetadata + 48), uint64_t v7 = *((unsigned int *)v6 + 2), v7))
  {
    uint64_t v8 = *v6;
    while (*(void *)(*(void *)(*(void *)v8 - 8 * *(unsigned int *)(*(void *)v8 + 8)) + 128) != v3)
    {
      v8 += 8;
      if (!--v7) {
        goto LABEL_6;
      }
    }
    BOOL v52 = (char *)v56;
    unsigned int v53 = (char *)v56;
    LODWORD(v55) = 0;
    uint64_t v15 = a2[41];
    uint64_t v54 = 0x100000010;
    v56[0] = v15;
    uint64_t v16 = *(void *)(v15 + 8);
    uint64_t v49 = v51;
    uint64_t v50 = 0xA00000000;
    sub_1CB91FBE0((uint64_t)&v49, 1uLL, v16);
    unsigned int v17 = v50;
    if (v50)
    {
      while (1)
      {
        uint64_t v18 = *((void *)v49 + v17 - 1);
        LODWORD(v50) = v17 - 1;
        unsigned int v19 = v53;
        uint64_t v20 = HIDWORD(v54);
        if (v53 != v52) {
          break;
        }
        if (HIDWORD(v54))
        {
          uint64_t v21 = 0;
          uint64_t v22 = 8 * HIDWORD(v54);
          unsigned int v23 = v53;
          while (*(void *)v23 != v18)
          {
            if (*(void *)v23 == -2) {
              uint64_t v21 = v23;
            }
            v23 += 8;
            v22 -= 8;
            if (!v22)
            {
              if (!v21) {
                goto LABEL_24;
              }
              *(void *)uint64_t v21 = v18;
              LODWORD(v55) = v55 - 1;
              goto LABEL_48;
            }
          }
          goto LABEL_80;
        }
LABEL_24:
        unsigned int v24 = v54;
        if (HIDWORD(v54) >= v54) {
          goto LABEL_27;
        }
        ++HIDWORD(v54);
        *(void *)&v53[8 * v20] = v18;
LABEL_48:
        uint64_t v34 = v53;
        unsigned int v35 = v54;
        int v36 = HIDWORD(v54);
        if (v53 != v52) {
          goto LABEL_58;
        }
        if (HIDWORD(v54))
        {
          BOOL v37 = 0;
          uint64_t v38 = 8 * HIDWORD(v54);
          uint64_t v39 = v53;
          while (*(void *)v39 != v18)
          {
            if (*(void *)v39 == -2) {
              BOOL v37 = v39;
            }
            v39 += 8;
            v38 -= 8;
            if (!v38)
            {
              if (!v37) {
                goto LABEL_56;
              }
              *(void *)BOOL v37 = v18;
              LODWORD(v55) = v55 - 1;
              goto LABEL_79;
            }
          }
          goto LABEL_79;
        }
LABEL_56:
        if (v54 <= HIDWORD(v54))
        {
LABEL_58:
          if (3 * (int)v54 <= (4 * (HIDWORD(v54) - v55)))
          {
            if (v54 >= 0x40) {
              unsigned int v35 = 2 * v54;
            }
            else {
              unsigned int v35 = 128;
            }
          }
          else if ((int)v54 - HIDWORD(v54) >= v54 >> 3)
          {
            goto LABEL_60;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v52, v35);
          unsigned int v35 = v54;
          uint64_t v34 = v53;
LABEL_60:
          unsigned int v40 = v35 - 1;
          unsigned int v41 = (v35 - 1) & ((v18 >> 4) ^ (v18 >> 9));
          int v42 = &v34[8 * v41];
          uint64_t v43 = *(void *)v42;
          if (*(void *)v42 == -1)
          {
            uint64_t v44 = 0;
LABEL_72:
            if (v44) {
              uint64_t v48 = v44;
            }
            else {
              uint64_t v48 = v42;
            }
            if (*(void *)v48 != v18)
            {
              if (*(void *)v48 == -2) {
                LODWORD(v55) = v55 - 1;
              }
              else {
                ++HIDWORD(v54);
              }
              *(void *)uint64_t v48 = v18;
            }
          }
          else
          {
            uint64_t v44 = 0;
            int v45 = 1;
            while (v43 != v18)
            {
              if (v44) {
                BOOL v46 = 0;
              }
              else {
                BOOL v46 = v43 == -2;
              }
              if (v46) {
                uint64_t v44 = v42;
              }
              unsigned int v47 = v41 + v45++;
              unsigned int v41 = v47 & v40;
              int v42 = &v34[8 * (v47 & v40)];
              uint64_t v43 = *(void *)v42;
              if (*(void *)v42 == -1) {
                goto LABEL_72;
              }
            }
          }
          goto LABEL_79;
        }
        ++HIDWORD(v54);
        *(void *)&v53[8 * v36] = v18;
LABEL_79:
        sub_1CB91FB58((uint64_t)&v49, *(char **)(v18 + 88), *(char **)(v18 + 96));
LABEL_80:
        unsigned int v17 = v50;
        if (!v50) {
          goto LABEL_94;
        }
      }
      unsigned int v24 = v54;
LABEL_27:
      if (3 * v24 <= 4 * (HIDWORD(v54) - (int)v55))
      {
        if (v24 >= 0x40) {
          v24 *= 2;
        }
        else {
          unsigned int v24 = 128;
        }
      }
      else if (v24 - HIDWORD(v54) >= v24 >> 3)
      {
LABEL_29:
        unsigned int v25 = v24 - 1;
        unsigned int v26 = (v24 - 1) & ((v18 >> 4) ^ (v18 >> 9));
        int64_t v27 = &v19[8 * v26];
        uint64_t v28 = *(void *)v27;
        if (*(void *)v27 != -1)
        {
          uint64_t v29 = 0;
          int v30 = 1;
          while (v28 != v18)
          {
            if (v29) {
              BOOL v31 = 0;
            }
            else {
              BOOL v31 = v28 == -2;
            }
            if (v31) {
              uint64_t v29 = v27;
            }
            unsigned int v32 = v26 + v30++;
            unsigned int v26 = v32 & v25;
            int64_t v27 = &v19[8 * (v32 & v25)];
            uint64_t v28 = *(void *)v27;
            if (*(void *)v27 == -1) {
              goto LABEL_41;
            }
          }
          goto LABEL_80;
        }
        uint64_t v29 = 0;
LABEL_41:
        if (v29) {
          BOOL v33 = v29;
        }
        else {
          BOOL v33 = v27;
        }
        if (*(void *)v33 == v18) {
          goto LABEL_80;
        }
        if (*(void *)v33 == -2) {
          LODWORD(v55) = v55 - 1;
        }
        else {
          ++HIDWORD(v54);
        }
        *(void *)BOOL v33 = v18;
        goto LABEL_48;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v52, v24);
      unsigned int v24 = v54;
      unsigned int v19 = v53;
      goto LABEL_29;
    }
LABEL_94:
    unsigned int v9 = sub_1CBAD7960((uint64_t)a2, (uint64_t *)&v52, 0);
    if (v49 != v51) {
      free(v49);
    }
    if (v53 != v52) {
      free(v53);
    }
  }
  else
  {
LABEL_6:
    unsigned int v9 = 0;
  }
  uint64_t v10 = (char *)a2[2];
  BOOL v52 = (char *)&unk_1F25FDCB8;
  unsigned int v53 = v10;
  double v55 = (const char **)&v52;
  int v11 = sub_1CBD854F8((uint64_t)&v52);
  if (v55 == (const char **)&v52)
  {
    (*((void (**)(char **))v52 + 4))(&v52);
  }
  else if (v55)
  {
    (*((void (**)(void))*v55 + 5))();
  }
  unsigned int v12 = dword_1CDB15BA0[v11];
  if (v9 <= 1) {
    unsigned int v13 = 1;
  }
  else {
    unsigned int v13 = v9;
  }
  if (v12 >= v13) {
    return v13;
  }
  else {
    return v12;
  }
}

uint64_t sub_1CBAD5910(uint64_t a1)
{
  return *(unsigned int *)(a1 + 192);
}

uint64_t sub_1CBAD5918(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_1CBAD5920(uint64_t a1)
{
  return *(unsigned int *)(a1 + 328);
}

uint64_t sub_1CBAD5928(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_1CBAD5930(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_1CBAD5938(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CBAD5940(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_1CBAD5948(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_1CBAD5950(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_1CBAD5958(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_1CBAD5960(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_1CBAD5968(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_1CBAD5970(uint64_t a1)
{
  return *(unsigned int *)(a1 + 180);
}

uint64_t sub_1CBAD5978(uint64_t a1)
{
  return *(unsigned int *)(a1 + 184);
}

uint64_t sub_1CBAD5980()
{
  return 0;
}

uint64_t sub_1CBAD5988(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t sub_1CBAD5990(uint64_t a1)
{
  return *(unsigned int *)(a1 + 172);
}

uint64_t sub_1CBAD5998(uint64_t a1)
{
  return *(unsigned int *)(a1 + 168);
}

uint64_t sub_1CBAD59A0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 140);
}

uint64_t sub_1CBAD59A8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 132);
}

uint64_t sub_1CBAD59B0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 144);
}

uint64_t sub_1CBAD59B8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

uint64_t sub_1CBAD59C0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 124);
}

uint64_t sub_1CBAD59C8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 176);
}

uint64_t sub_1CBAD59D0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 112);
}

uint64_t sub_1CBAD59D8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t sub_1CBAD59E0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t sub_1CBAD59E8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

uint64_t sub_1CBAD59F0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t sub_1CBAD59F8()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1CBAD5A00()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1CBAD5A08(uint64_t a1)
{
  return *(unsigned int *)(a1 + 164);
}

uint64_t sub_1CBAD5A10(uint64_t a1)
{
  return *(unsigned int *)(a1 + 60);
}

uint64_t sub_1CBAD5A18(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_1CBAD5A20(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_1CBAD5A28(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

uint64_t sub_1CBAD5A30(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t sub_1CBAD5A38(uint64_t a1)
{
  return *(unsigned int *)(a1 + 92);
}

uint64_t sub_1CBAD5A40(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

uint64_t sub_1CBAD5A48(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

uint64_t sub_1CBAD5A50(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_1CBAD5A58(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

uint64_t sub_1CBAD5A60(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

uint64_t sub_1CBAD5A68(uint64_t a1)
{
  return *(unsigned int *)(a1 + 188);
}

uint64_t sub_1CBAD5A70(uint64_t a1)
{
  return *(unsigned int *)(a1 + 360);
}

uint64_t sub_1CBAD5A78(uint64_t a1)
{
  return *(unsigned int *)(a1 + 196);
}

uint64_t sub_1CBAD5A80(uint64_t a1)
{
  return *(unsigned int *)(a1 + 204);
}

uint64_t sub_1CBAD5A88(uint64_t a1)
{
  return *(unsigned int *)(a1 + 200);
}

uint64_t sub_1CBAD5A90(uint64_t a1)
{
  return *(void *)(a1 + 224);
}

double sub_1CBAD5A98(uint64_t a1)
{
  return *(double *)(a1 + 232);
}

double sub_1CBAD5AA0(uint64_t a1)
{
  return *(double *)(a1 + 256);
}

double sub_1CBAD5AA8(uint64_t a1)
{
  return *(double *)(a1 + 240);
}

double sub_1CBAD5AB0(uint64_t a1)
{
  return *(double *)(a1 + 264);
}

uint64_t sub_1CBAD5AB8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 272);
}

uint64_t sub_1CBAD5AC0(uint64_t a1)
{
  return *(void *)(a1 + 280);
}

uint64_t sub_1CBAD5AC8(uint64_t a1)
{
  return *(void *)(a1 + 288);
}

uint64_t sub_1CBAD5AD0(uint64_t a1)
{
  return *(void *)(a1 + 296);
}

uint64_t sub_1CBAD5AD8(uint64_t a1)
{
  return *(void *)(a1 + 304);
}

uint64_t sub_1CBAD5AE0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 312);
}

uint64_t sub_1CBAD5AE8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 332);
}

uint64_t sub_1CBAD5AF0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 336);
}

uint64_t sub_1CBAD5AF8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 352);
}

uint64_t sub_1CBAD5B00(uint64_t a1)
{
  return *(unsigned int *)(a1 + 316);
}

uint64_t sub_1CBAD5B08(uint64_t a1)
{
  return *(unsigned int *)(a1 + 320);
}

uint64_t sub_1CBAD5B10(uint64_t a1)
{
  return *(unsigned int *)(a1 + 324);
}

uint64_t sub_1CBAD5B18(uint64_t a1)
{
  return *(void *)(a1 + 344);
}

uint64_t sub_1CBAD5B20(uint64_t a1)
{
  return *(unsigned int *)(a1 + 356);
}

void sub_1CBAD5B28(_DWORD *a1@<X0>, void *a2@<X8>)
{
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  int v4 = a1[2];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "TotalInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v4;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v5 = a1[3];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A420;
  strcpy((char *)__p[0], "NumFullRateInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v5;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v6 = a1[4];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A420;
  strcpy((char *)__p[0], "NumHalfRateInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v6;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v7 = a1[5];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A410;
  strcpy((char *)__p[0], "NumThirdRateInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v7;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v8 = a1[6];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD96DBE0;
  strcpy((char *)__p[0], "NumQuarterRateInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v8;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v9 = a1[7];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A410;
  strcpy((char *)__p[0], "NumFifthRateInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v9;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v10 = a1[8];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A410;
  strcpy((char *)__p[0], "NumSixthRateInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v10;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v11 = a1[9];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A400;
  strcpy((char *)__p[0], "NumEighthRateInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v11;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v12 = a1[10];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD96DBE0;
  strcpy((char *)__p[0], "NumTwelfthRateInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v12;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v13 = a1[11];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CDB15B50;
  strcpy((char *)__p[0], "NumSixteenthRateInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v13;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v14 = a1[12];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CDB15B60;
  strcpy((char *)__p[0], "NumThirtySecondRateInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v14;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v15 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 216))(a1);
  strcpy((char *)__p, "RateScaledInstructions");
  HIBYTE(__p[2]) = 22;
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v15;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v16 = a1[13];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "DataInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v16;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v17 = a1[14];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "MoveInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v17;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v18 = a1[15];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "ImmInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v18;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v19 = a1[16];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "ALUInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v19;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v20 = a1[17];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "F16Instructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v20;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v21 = a1[18];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "F32Instructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v21;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v22 = a1[19];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "Int16Instructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v22;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v23 = a1[20];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "Int32Instructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v23;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v24 = a1[21];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "UniformReadBytes");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v24;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v25 = a1[22];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "TotalStallCycles");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v25;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v26 = a1[23];
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "F16StallCycles");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v26;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v27 = a1[24];
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "F32StallCycles");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v27;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v28 = a1[25];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A410;
  strcpy((char *)__p[0], "AfterPixwaitInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v28;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v29 = a1[26];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A420;
  strcpy((char *)__p[0], "AfterDis2x2Instructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v29;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v30 = a1[27];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "AvgDis2x2InstID");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v30;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v31 = a1[28];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "PixwaitInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v31;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v32 = a1[29];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "BranchInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v32;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v33 = a1[31];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "SampleInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v33;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v34 = a1[44];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A410;
  strcpy((char *)__p[0], "TextureWriteInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v34;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v35 = a1[32];
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "LoadCoefInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v35;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v36 = a1[33];
  strcpy((char *)__p, "GlobalLoadInstructions");
  HIBYTE(__p[2]) = 22;
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v36;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v37 = a1[34];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A420;
  strcpy((char *)__p[0], "GlobalStoreInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v37;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v38 = a1[35];
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "LocalLoadInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v38;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v39 = a1[36];
  strcpy((char *)__p, "LocalStoreInstructions");
  HIBYTE(__p[2]) = 22;
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v39;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v40 = a1[37];
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "StackLoadInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v40;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v41 = a1[38];
  strcpy((char *)__p, "StackStoreInstructions");
  HIBYTE(__p[2]) = 22;
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v41;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v42 = a1[39];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A420;
  strcpy((char *)__p[0], "GenericLoadInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v42;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v43 = a1[40];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A410;
  strcpy((char *)__p[0], "GenericStoreInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v43;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v44 = a1[42];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A410;
  strcpy((char *)__p[0], "DeviceAtomicInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v44;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v45 = a1[43];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1CD91A430;
  strcpy((char *)__p[0], "ThreadgroupAtomicInstructions");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v45;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v46 = a1[53];
  HIBYTE(__p[2]) = 8;
  strcpy((char *)__p, "NumLoops");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v46;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v47 = a1[54];
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "TotalLoopInsts");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v47;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v48 = a1[45];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "MaxTempRegisterUsed");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v48;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v49 = a1[47];
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "MaxCoeffRegisterUsed");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v49;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v50 = a1[46];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "MaxUniRegisterUsed");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v50;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v51 = a1[49];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "SpillBufferSize");
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v51;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v52 = a1[52];
  strcpy((char *)__p, "InvalidScheduleClasses");
  HIBYTE(__p[2]) = 22;
  uint64_t v54 = __p;
  *((_DWORD *)sub_1CB8356D4((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v54) + 14) = v52;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

uint64_t sub_1CBAD6E34(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2 + 320;
  uint64_t v3 = *(void *)(a2 + 328);
  if (v3 != a2 + 320)
  {
    uint64_t v4 = result;
    do
    {
      for (uint64_t i = *(void *)(v3 + 56); i != v3 + 48; uint64_t i = *(void *)(i + 8))
      {
        if (**(unsigned __int16 **)(i + 16) - 6717 <= 5)
        {
          uint64_t v6 = 35;
          switch(*(_DWORD *)(*(void *)(i + 32) + 68))
          {
            case 5:
              uint64_t v6 = 29;
              break;
            case 6:
              uint64_t v6 = 42;
              break;
            case 7:
              uint64_t v6 = 71;
              break;
            case 8:
              uint64_t v6 = 27;
              break;
            case 0xB:
              uint64_t v6 = 53;
              break;
            case 0xC:
              uint64_t v6 = 54;
              break;
            case 0xD:
              uint64_t v6 = 78;
              break;
            case 0xF:
              uint64_t v6 = 77;
              break;
            case 0x10:
              uint64_t v6 = 63;
              break;
            case 0x11:
              uint64_t v6 = 30;
              break;
            case 0x12:
              uint64_t v6 = 3;
              break;
            case 0x13:
              uint64_t v6 = 13;
              break;
            case 0x14:
              uint64_t v6 = 12;
              break;
            case 0x15:
              uint64_t v6 = 10;
              break;
            case 0x16:
              uint64_t v6 = 11;
              break;
            case 0x17:
              uint64_t v6 = 20;
              break;
            case 0x18:
              uint64_t v6 = 17;
              break;
            case 0x19:
              uint64_t v6 = 18;
              break;
            case 0x1A:
              uint64_t v6 = 19;
              break;
            case 0x1B:
              uint64_t v6 = 75;
              break;
            case 0x1C:
              uint64_t v6 = 74;
              break;
            case 0x1D:
              uint64_t v6 = 73;
              break;
            case 0x1E:
              uint64_t v6 = 72;
              break;
            case 0x1F:
              uint64_t v6 = 14;
              break;
            case 0x20:
              uint64_t v6 = 65;
              break;
            case 0x22:
              uint64_t v6 = 44;
              break;
            case 0x23:
              uint64_t v6 = 23;
              break;
            case 0x24:
              uint64_t v6 = 25;
              break;
            case 0x26:
              uint64_t v6 = 69;
              break;
            case 0x27:
              uint64_t v6 = 68;
              break;
            case 0x29:
              uint64_t v6 = 79;
              break;
            case 0x2B:
              uint64_t v6 = 21;
              break;
            case 0x2C:
              uint64_t v6 = 22;
              break;
            case 0x2D:
              uint64_t v6 = 28;
              break;
            case 0x2E:
              uint64_t v6 = 66;
              break;
            case 0x2F:
              uint64_t v6 = 67;
              break;
            case 0x30:
              uint64_t v6 = 64;
              break;
            case 0x31:
              uint64_t v6 = 7;
              break;
            case 0x32:
              uint64_t v6 = 8;
              break;
            case 0x33:
              uint64_t v6 = 9;
              break;
            case 0x34:
              uint64_t v6 = 0;
              break;
            case 0x35:
              uint64_t v6 = 4;
              break;
            case 0x36:
              uint64_t v6 = 1;
              break;
            case 0x37:
              uint64_t v6 = 5;
              break;
            case 0x38:
              uint64_t v6 = 2;
              break;
            case 0x39:
              uint64_t v6 = 6;
              break;
            case 0x3A:
              uint64_t v6 = 70;
              break;
            case 0x3B:
              break;
            case 0x3C:
              uint64_t v6 = 36;
              break;
            case 0x3D:
              uint64_t v6 = 37;
              break;
            case 0x3F:
              uint64_t v6 = 24;
              break;
            case 0x40:
              uint64_t v6 = 26;
              break;
            case 0x41:
              uint64_t v6 = 60;
              break;
            case 0x42:
              uint64_t v6 = 59;
              break;
            case 0x43:
              uint64_t v6 = 61;
              break;
            case 0x44:
              uint64_t v6 = 62;
              break;
            case 0x45:
              uint64_t v6 = 76;
              break;
            default:
              llvm::report_fatal_error((llvm *)"Special register not implemented yet for G15", (const llvm::Twine *)1);
          }
          uint64_t result = sub_1CBDB241C(v6);
          *(void *)(*(void *)(v4 + 368) + 8 * (result >> 6)) |= 1 << result;
        }
        if ((*(unsigned char *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            uint64_t i = *(void *)(i + 8);
        }
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t sub_1CBAD71F8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x800000000;
  unint64_t v3 = *(unsigned int *)(result + 432);
  if (v3)
  {
    unsigned int v4 = 0;
    for (unint64_t i = 0; i < v3; ++i)
    {
      if ((*(void *)(*(void *)(result + 368) + 8 * (i >> 6)) >> i))
      {
        if (v4 >= *(_DWORD *)(a2 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a2 + 4 * v4) = i;
        unsigned int v4 = *(_DWORD *)(a2 + 8) + 1;
        *(_DWORD *)(a2 + 8) = v4;
        unint64_t v3 = *(unsigned int *)(result + 432);
      }
    }
  }
  return result;
}

uint64_t sub_1CBAD72B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  if (!v2)
  {
    uint64_t v2 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 8) + 216))(*(void *)(a2 + 8), a2 + 128, a2);
    *(void *)(a2 + 48) = v2;
  }
  return *(unsigned int *)(v2 + 488);
}

uint64_t sub_1CBAD731C()
{
  return 0;
}

uint64_t sub_1CBAD7324()
{
  return 0;
}

uint64_t sub_1CBAD732C(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, uint64_t, void, uint64_t, uint64_t))
{
  unsigned int v5 = (**a3)(a3, 11, 0, 1, 4);
  unsigned int v6 = *(_DWORD *)(a1 + 196);
  if (v6 <= v5) {
    unsigned int v6 = v5;
  }
  *(_DWORD *)(a1 + 196) = v6;
  uint64_t result = (**a3)(a3, 18, 0, 1, 4);
  unsigned int v8 = *(_DWORD *)(a1 + 200);
  if (v8 <= result) {
    unsigned int v8 = result;
  }
  *(_DWORD *)(a1 + 200) = v8;
  return result;
}

uint64_t sub_1CBAD73F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  if (!v2)
  {
    uint64_t v2 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 8) + 216))(*(void *)(a2 + 8), a2 + 128, a2);
    *(void *)(a2 + 48) = v2;
  }
  return *(unsigned __int8 *)(v2 + 568);
}

const char *sub_1CBAD745C()
{
  return "AGX3 Assembly Printer";
}

BOOL sub_1CBAD746C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  signed __int8 v2 = a1[23];
  if (v2 >= 0) {
    uint64_t v3 = v2 & 0x7F;
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  signed __int8 v4 = a2[23];
  int v5 = v4;
  uint64_t v6 = v4 & 0x7F;
  if (v5 < 0) {
    uint64_t v6 = *((void *)a2 + 1);
  }
  if (v3 != v6) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((a1[23] & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if ((v2 & 0x7F) == 0) {
    return 1;
  }
  uint64_t v7 = (v2 & 0x7F) - 1;
  do
  {
    int v9 = *a1++;
    int v8 = v9;
    int v11 = *a2++;
    int v10 = v11;
    BOOL v13 = v7-- != 0;
    BOOL v14 = v8 == v10;
    BOOL v15 = v8 == v10;
  }
  while (v14 && v13);
  return v15;
}

void sub_1CBAD751C()
{
}

__n128 sub_1CBAD7530(uint64_t a1)
{
  signed __int8 v2 = (char *)operator new(0x18uLL);
  *(void *)signed __int8 v2 = &unk_1F25F63E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBAD757C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F63E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CBAD75AC(uint64_t result, int *a2, uint64_t a3, int *a4)
{
  int v4 = *a2;
  int v5 = *a4;
  uint64_t v6 = *(unsigned int **)(result + 16);
  unsigned int v7 = *v6;
  *v6 += *a4;
  if (v4 == 1 && v5 != 0)
  {
    uint64_t v9 = **(void **)(result + 8);
    do
    {
      *(void *)(v9 + 8 * (v7 >> 6)) |= 1 << v7;
      ++v7;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1CBAD7600@<X0>(char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  char v6 = *((unsigned char *)a2 + 23);
  int v7 = v6;
  size_t v8 = v6 & 0x7F;
  if (v7 >= 0) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = (size_t)a2[1];
  }
  size_t v10 = strlen(__s);
  uint64_t result = sub_1CB907098((uint64_t)a3, v9 + v10);
  if (*((char *)a3 + 23) < 0) {
    a3 = (void **)*a3;
  }
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0) {
      int v12 = a2;
    }
    else {
      int v12 = *a2;
    }
    uint64_t result = (uint64_t)memmove(a3, v12, v9);
  }
  if (v10) {
    uint64_t result = (uint64_t)memmove((char *)a3 + v9, __s, v10);
  }
  *((unsigned char *)a3 + v9 + v10) = 0;
  return result;
}

uint64_t sub_1CBAD76C0(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16));
}

void sub_1CBAD76F8(uint64_t a1, const void **a2, uint64_t a3)
{
  if (!**(unsigned char **)a1)
  {
    char v6 = *(std::string **)(a1 + 8);
    if (**(unsigned char **)(a1 + 16)) {
      int v7 = ", ";
    }
    else {
      int v7 = " ";
    }
    std::string::append(v6, v7);
  }
  std::operator+<char>();
  size_t v8 = std::string::append(&v39, "\",\"");
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  char v10 = *(unsigned char *)(a3 + 23);
  BOOL v11 = v10 < 0;
  if (v10 >= 0) {
    int v12 = (const std::string::value_type *)a3;
  }
  else {
    int v12 = *(const std::string::value_type **)a3;
  }
  std::string::size_type v13 = v10 & 0x7F;
  if (v11) {
    std::string::size_type v14 = *(void *)(a3 + 8);
  }
  else {
    std::string::size_type v14 = v13;
  }
  BOOL v15 = std::string::append(&v40, v12, v14);
  std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  int v17 = std::string::append(&v41, "\"]");
  std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
  long long v42 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  std::string::size_type v43 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  char v19 = *((unsigned char *)a2 + 23);
  int v20 = v19;
  size_t v21 = v19 & 0x7F;
  if (v20 >= 0) {
    size_t v22 = v21;
  }
  else {
    size_t v22 = (size_t)a2[1];
  }
  int v23 = &v40;
  sub_1CB907098((uint64_t)&v40, v22 + 1);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v23 = (std::string *)v40.__r_.__value_.__r.__words[0];
  }
  if (v22)
  {
    if (*((char *)a2 + 23) >= 0) {
      int v24 = a2;
    }
    else {
      int v24 = *a2;
    }
    memmove(v23, v24, v22);
  }
  *(_WORD *)((char *)&v23->__r_.__value_.__l.__data_ + v22) = 44;
  char v25 = *(unsigned char *)(a3 + 23);
  BOOL v26 = v25 < 0;
  if (v25 >= 0) {
    int v27 = (const std::string::value_type *)a3;
  }
  else {
    int v27 = *(const std::string::value_type **)a3;
  }
  std::string::size_type v28 = v25 & 0x7F;
  if (v26) {
    std::string::size_type v29 = *(void *)(a3 + 8);
  }
  else {
    std::string::size_type v29 = v28;
  }
  int v30 = std::string::append(&v40, v27, v29);
  std::string::size_type v31 = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (**(unsigned char **)(a1 + 16)) {
    int v32 = (std::string *)&v42;
  }
  else {
    int v32 = &v41;
  }
  int v33 = (char *)&v41.__r_.__value_.__r.__words[2] + 7;
  if (**(unsigned char **)(a1 + 16)) {
    int v33 = (char *)&v43 + 7;
  }
  int v34 = *v33;
  p_size_t size = (std::string::size_type *)&v42 + 1;
  if (!**(unsigned char **)(a1 + 16)) {
    p_size_t size = &v41.__r_.__value_.__l.__size_;
  }
  if (v34 >= 0) {
    int v36 = (const std::string::value_type *)v32;
  }
  else {
    int v36 = (const std::string::value_type *)v32->__r_.__value_.__r.__words[0];
  }
  std::string::size_type v37 = *p_size;
  if (v34 >= 0) {
    std::string::size_type v38 = v34 & 0x7F;
  }
  else {
    std::string::size_type v38 = v37;
  }
  std::string::append(*(std::string **)(a1 + 8), v36, v38);
  **(unsigned char **)a1 = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43) < 0) {
    operator delete((void *)v42);
  }
}

uint64_t sub_1CBAD7960(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (a3) {
    unsigned int v6 = 71;
  }
  else {
    unsigned int v6 = 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 176))(*(void *)(a1 + 16));
  int v8 = *(_DWORD *)(v7 + 44);
  if ((v8 + 63) >= 0x1C0) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v8 + 63) >= 0x40) {
    bzero(v52, 8 * ((v8 + 63) >> 6));
  }
  int v53 = v8;
  for (uint64_t i = *(void *)(a1 + 328); i != a1 + 320; uint64_t i = *(void *)(i + 8))
  {
    if (a2)
    {
      uint64_t v10 = *a2;
      uint64_t v11 = a2[1];
      if (v11 == *a2)
      {
        uint64_t v12 = *((unsigned int *)a2 + 5);
        std::string::size_type v13 = (void *)(v11 + 8 * v12);
        if (v12)
        {
          uint64_t v14 = 0;
          uint64_t v15 = 8 * v12;
          while (*(void *)(v11 + v14) != i)
          {
            v14 += 8;
            if (v15 == v14) {
              goto LABEL_28;
            }
          }
          std::string::size_type v13 = (void *)(v11 + v14);
        }
LABEL_28:
        uint64_t v10 = a2[1];
      }
      else
      {
        uint64_t v16 = *((unsigned int *)a2 + 4);
        int v17 = v16 - 1;
        unsigned int v18 = (v16 - 1) & ((i >> 4) ^ (i >> 9));
        std::string::size_type v13 = (void *)(v11 + 8 * v18);
        uint64_t v19 = *v13;
        if (*v13 == -1)
        {
          int v20 = 0;
LABEL_51:
          if (v20) {
            std::string::size_type v13 = v20;
          }
          if (*v13 != i) {
            std::string::size_type v13 = (void *)(v11 + 8 * v16);
          }
        }
        else
        {
          int v20 = 0;
          int v21 = 1;
          while (v19 != i)
          {
            if (v20) {
              BOOL v22 = 0;
            }
            else {
              BOOL v22 = v19 == -2;
            }
            if (v22) {
              int v20 = v13;
            }
            unsigned int v23 = v18 + v21++;
            unsigned int v18 = v23 & v17;
            std::string::size_type v13 = (void *)(v11 + 8 * (v23 & v17));
            uint64_t v19 = *v13;
            if (*v13 == -1) {
              goto LABEL_51;
            }
          }
        }
      }
      int v24 = v11 == v10 ? (unsigned int *)((char *)a2 + 20) : (unsigned int *)(a2 + 2);
      if (v13 == (void *)(v11 + 8 * *v24)) {
        continue;
      }
    }
    for (uint64_t j = *(void *)(i + 56); j != i + 48; uint64_t j = *(void *)(j + 8))
    {
      uint64_t v26 = *(unsigned int *)(j + 40);
      if (v26)
      {
        uint64_t v27 = *(void *)(j + 32);
        uint64_t v28 = v27 + 32 * v26;
        do
        {
          if (!*(unsigned char *)v27)
          {
            unsigned int v29 = *(_DWORD *)(v27 + 4);
            if (v29)
            {
              int v30 = (unsigned __int16 *)(*(void *)(v7 + 56)
                                       + (((unint64_t)*(unsigned int *)(*(void *)(v7 + 8) + 24 * v29 + 16) >> 3) & 0x1FFFFFFE));
              int v32 = *v30;
              std::string::size_type v31 = v30 + 1;
              int v33 = v32 + (*(_DWORD *)(*(void *)(v7 + 8) + 24 * v29 + 16) & 0xF) * v29;
              do
              {
                v52[(unsigned __int16)v33 >> 6] |= 1 << v33;
                int v34 = *v31++;
                v33 += v34;
              }
              while (v34);
            }
          }
          v27 += 32;
        }
        while (v27 != v28);
        if (!j) {
          goto LABEL_46;
        }
      }
      if ((*(unsigned char *)j & 4) == 0)
      {
LABEL_46:
        while ((*(_WORD *)(j + 44) & 8) != 0)
          uint64_t j = *(void *)(j + 8);
      }
    }
  }
  if (v7) {
    int v35 = (uint64_t *)(v7 + 8);
  }
  else {
    int v35 = 0;
  }
  uint64_t v36 = *v35;
  uint64_t v37 = v35[6];
  uint64_t v38 = 230;
  while (2)
  {
    unint64_t v39 = *(unsigned int *)(v36 + 24 * v38 + 16);
    uint64_t v40 = (v39 >> 3) & 0x1FFFFFFE;
    unsigned __int16 v41 = *(_WORD *)(v37 + v40) + (v39 & 0xF) * v38;
    long long v42 = (unsigned __int16 *)(v37 + 2 + v40);
    do
    {
      if ((v52[v41 >> 6] >> v41))
      {
        uint64_t v44 = (v38 - 102);
        goto LABEL_65;
      }
      int v43 = *v42++;
      v41 += v43;
    }
    while (v43);
    if ((unint64_t)--v38 > 0x66) {
      continue;
    }
    break;
  }
  uint64_t v44 = 0;
LABEL_65:
  if (v3)
  {
    for (unsigned int k = 86; k >= v6; --k)
    {
      unint64_t v46 = *(unsigned int *)(v36 + 24 * k + 16);
      uint64_t v47 = (v46 >> 3) & 0x1FFFFFFE;
      unsigned __int16 v48 = *(_WORD *)(v37 + v47) + (v46 & 0xF) * k;
      int v49 = (unsigned __int16 *)(v37 + 2 + v47);
      while (((v52[v48 >> 6] >> v48) & 1) == 0)
      {
        int v50 = *v49++;
        v48 += v50;
        if (!v50) {
          goto LABEL_72;
        }
      }
      uint64_t v3 = k - v6 + 1;
      if (k - v6 != -1) {
        return v44 | (v3 << 32);
      }
LABEL_72:
      ;
    }
    uint64_t v3 = 0;
  }
  return v44 | (v3 << 32);
}

void sub_1CBAD7D28(const char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  size_t v4 = strlen(*a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  std::string::size_type v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4) {
LABEL_8:
  }
    memmove(p_dst, v3, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  std::string::operator=((std::string *)(a2 + 128), &__dst);
  *(unsigned char *)(a2 + 184) = 1;
  std::string::operator=((std::string *)(a2 + 160), &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_1CBAD7E10(int a1, llvm::ToolOutputFile::CleanupInstaller *this)
{
  if (this)
  {
    if (*((unsigned char *)this + 128))
    {
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::ToolOutputFile::CleanupInstaller *)((char *)this + 32));
      *((unsigned char *)this + 128) = 0;
    }
    llvm::ToolOutputFile::CleanupInstaller::~CleanupInstaller(this);
    JUMPOUT(0x1D25D9CE0);
  }
}

uint64_t sub_1CBAD7E74()
{
  *(void *)&long long v3 = "Add more comments.";
  *((void *)&v3 + 1) = 18;
  char v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD41D15C((uint64_t)&unk_1EBCC0270, "print-detailed-asm-comments", &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC0270, &dword_1CB82C000);
  *(void *)&long long v3 = "Do not emit non-G15 instructions";
  *((void *)&v3 + 1) = 32;
  char v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD41D15C((uint64_t)&unk_1EBCC0330, "skip-non-g15", &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC0330, &dword_1CB82C000);
  *(void *)&long long v3 = "Run verifiers along a clique-trace specified";
  *((void *)&v3 + 1) = 44;
  uint64_t v2 = "";
  sub_1CD41D268(&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CD41C8DC, qword_1EBD021B0, &dword_1CB82C000);
}

uint64_t sub_1CBAD7F90(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v4 = sub_1CBE52EB8(**(unsigned __int16 **)(a1 + 16), a2, a3);
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 24) + 32) + 16);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 104))(v5);
  *(void *)(a1 + 16) = *(void *)(result + 8) + 48 * v4;
  return result;
}

uint64_t sub_1CBAD8000(uint64_t a1)
{
  int v1 = a1;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(*(void *)(*(void *)(v2 + 24) + 32) + 16);
  uint64_t v54 = &unk_1F25FDCB8;
  uint64_t v55 = v3;
  unsigned int v57 = &v54;
  unsigned int v4 = sub_1CBD854F8((uint64_t)&v54);
  if (v57 == &v54)
  {
    (*((void (**)(void **))v54 + 4))(&v54);
  }
  else if (v57)
  {
    (*((void (**)(void))*v57 + 5))();
  }
  int v5 = **(unsigned __int16 **)(v2 + 16);
  uint64_t v6 = sub_1CBE52E8C(v5);
  if ((v6 & 0xFF00000000) == 0) {
    goto LABEL_39;
  }
  int v7 = v6;
  unsigned int v8 = v6 - 164;
  if ((v6 - 164) >= 4 && (v6 - 78) >= 3)
  {
    if (v6 == 85)
    {
      if (v4 <= 3) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = 0x100000007;
      }
      uint64_t v34 = v18 & 0x100000000;
      int v33 = 0;
      return v34 & 0x100000000 | v18 | v33 & 0xFFFFFF00;
    }
LABEL_39:
    LOBYTE(v18) = 0;
    uint64_t v34 = 0;
    int v33 = 0;
    return v34 & 0x100000000 | v18 | v33 & 0xFFFFFF00;
  }
  unsigned int v9 = sub_1CBDA6464(v5, 0x2Fu);
  uint64_t v10 = *(void *)(v2 + 32);
  unint64_t v11 = *(void *)(v10 + 32 * v9 + 16);
  if (v7 == 78)
  {
    if (v4 == 5) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = v4;
    }
    sub_1CBE5E838((v11 >> 7) & 7, (v11 >> 23) & 3, (v11 >> 5) & 3, (v11 >> 22) & 1, (uint64_t *)&v54, v12);
    std::string::size_type v13 = (char *)v54;
    if (v55)
    {
      int v14 = 0;
      uint64_t v15 = 96 * v55;
      uint64_t v16 = (int *)((char *)v54 + 4);
      do
      {
        int v17 = *v16;
        v16 += 24;
        v14 |= 1 << v17;
        v15 -= 96;
      }
      while (v15);
      LODWORD(v18) = v14;
      uint64_t v19 = 96 * v55;
      do
      {
        int v20 = *(char **)&v13[v19 - 72];
        if (&v13[v19 - 56] != v20) {
          free(v20);
        }
        v19 -= 96;
      }
      while (v19);
      int v33 = v18 & 0xFFFFFF00;
      uint64_t v34 = 0x100000000;
      std::string::size_type v13 = (char *)v54;
    }
    else
    {
      uint64_t v34 = 0;
      int v33 = 0;
      LOBYTE(v18) = 0;
    }
    if (v13 != (char *)&v56) {
      free(v13);
    }
    return v34 & 0x100000000 | v18 | v33 & 0xFFFFFF00;
  }
  unint64_t v53 = *(void *)(v10 + 32 * v9 + 16);
  int v21 = (unsigned __int16)((v1 - v10) >> 5);
  unsigned __int16 v22 = 61;
  if (v21 != sub_1CBDA6464(v5, 0x3Du))
  {
    if (v21 == sub_1CBDA6464(v5, 0x5Eu)) {
      unsigned __int16 v22 = 94;
    }
    else {
      unsigned __int16 v22 = 95;
    }
  }
  if (v8 < 2)
  {
    int v35 = 1;
    goto LABEL_45;
  }
  if ((v7 - 79) > 1)
  {
    int v35 = 0;
LABEL_45:
    uint64_t v36 = (4 * v11) & 0x300000000 | (v11 >> 2) & 7;
    uint64_t v37 = v11 & 0x300000000 | (v11 >> 7) & 7;
    int v38 = v11 & 3;
    unsigned int v39 = (v11 >> 10) & 1;
    uint64_t v50 = sub_1CBE53724(v36, v37, v38, v39, v4);
    int v51 = v40;
    char v52 = v41;
    sub_1CBE539B8(v35, v36, v37, v38, v39, &v50, v4, v22, &v54, v42);
    uint64_t v26 = (char *)v54;
    if (v55)
    {
      LODWORD(v43) = 0;
      uint64_t v44 = 96 * v55;
      int v45 = (int *)((char *)v54 + 4);
      do
      {
        int v46 = *v45;
        v45 += 24;
        uint64_t v43 = (1 << v46) | v43;
        v44 -= 96;
      }
      while (v44);
      uint64_t v47 = 96 * v55;
      do
      {
        unsigned __int16 v48 = *(char **)&v26[v47 - 72];
        if (&v26[v47 - 56] != v48) {
          free(v48);
        }
        v47 -= 96;
      }
      while (v47);
      uint64_t v18 = v43 | 0x100000000;
      uint64_t v26 = (char *)v54;
    }
    else
    {
      uint64_t v18 = 0;
    }
    goto LABEL_55;
  }
  uint64_t v23 = *(void *)(*(void *)(*(void *)(v2 + 24) + 32) + 16);
  uint64_t v54 = &unk_1F25FDCB8;
  uint64_t v55 = v23;
  unsigned int v57 = &v54;
  unsigned int v24 = sub_1CBD854F8((uint64_t)&v54);
  if (v57 == &v54)
  {
    v25.n128_f64[0] = (*((double (**)(void **))v54 + 4))(&v54);
  }
  else if (v57)
  {
    (*((void (**)(void))*v57 + 5))();
  }
  sub_1CBE53DB4(&v53, v24, v22, (uint64_t *)&v54, v25);
  uint64_t v26 = (char *)v54;
  if (v55)
  {
    LODWORD(v27) = 0;
    uint64_t v28 = 96 * v55;
    unsigned int v29 = (int *)((char *)v54 + 4);
    do
    {
      int v30 = *v29;
      v29 += 24;
      uint64_t v27 = (1 << v30) | v27;
      v28 -= 96;
    }
    while (v28);
    uint64_t v31 = 96 * v55;
    do
    {
      int v32 = *(char **)&v26[v31 - 72];
      if (&v26[v31 - 56] != v32) {
        free(v32);
      }
      v31 -= 96;
    }
    while (v31);
    uint64_t v18 = v27 | 0x100000000;
    uint64_t v26 = (char *)v54;
  }
  else
  {
    uint64_t v18 = 0;
  }
LABEL_55:
  if (v26 != (char *)&v56) {
    free(v26);
  }
  int v33 = v18 & 0xFFFFFF00;
  uint64_t v34 = v18 & 0x100000000;
  return v34 & 0x100000000 | v18 | v33 & 0xFFFFFF00;
}

BOOL sub_1CBAD8504(uint64_t a1, int a2)
{
  int v4 = **(unsigned __int16 **)(a1 + 16);
  uint64_t v5 = sub_1CBE52E8C(v4);
  return (v5 & 0xFF00000000) != 0
      && (v5 == 3 || v5 == 194 || v5 == 151)
      && (a2 & ~*(_DWORD *)(*(void *)(a1 + 32) + 32 * sub_1CBDA6464(v4, 0x2Fu) + 16)) == 0;
}

uint64_t sub_1CBAD858C(uint64_t a1)
{
  int v1 = *(void **)(a1 + 8);
  uint64_t v2 = (unsigned __int16 *)v1[2];
  int v3 = *v2;
  if ((v3 - 9) <= 0x3C && ((1 << (v3 - 9)) & 0x1000000000000605) != 0 || v3 == 0) {
    return 0;
  }
  if ((v2[4] & 0x10) != 0) {
    return 0;
  }
  uint64_t v7 = *(void *)(*(void *)(v1[3] + 32) + 16);
  uint64_t v8 = sub_1CBE52E8C(v3);
  if (v8 & 0xFF00000000) == 0 || (v8 - 51) < 0x19 && ((0x1F80007u >> (v8 - 51))) {
    return 0;
  }
  int v9 = v8 - 26;
  uint64_t result = 0;
  unint64_t v11 = (unint64_t)(a1 - v1[4]) >> 5;
  switch(v9)
  {
    case 0:
    case 1:
    case 10:
    case 11:
    case 130:
    case 131:
    case 132:
    case 133:
      if (sub_1CBDA6464(v3, 0x43u) == (__int16)v11) {
        return 0;
      }
      goto LABEL_19;
    case 2:
    case 3:
    case 14:
    case 15:
      if ((*(unsigned char *)(v7 + 303) || *(unsigned char *)(v7 + 305))
        && ((__int16)v11 == sub_1CBDA6464(v3, 0x11u) || (__int16)v11 == sub_1CBDA6464(v3, 4u)))
      {
        return 0;
      }
      goto LABEL_13;
    case 6:
    case 7:
      if (!*(unsigned char *)(v7 + 303) && !*(unsigned char *)(v7 + 305)) {
        goto LABEL_13;
      }
      int v12 = v3;
      unsigned int v13 = 17;
      goto LABEL_15;
    case 35:
    case 36:
    case 37:
    case 38:
    case 65:
    case 66:
    case 67:
      int v12 = v3;
      unsigned int v13 = 7;
      goto LABEL_15;
    case 53:
    case 54:
    case 138:
    case 139:
    case 140:
    case 141:
      return result;
    case 75:
    case 95:
    case 96:
      goto LABEL_21;
    case 79:
      if (sub_1CBDA6464(v3, 0x57u) == (__int16)v11) {
        return 0;
      }
LABEL_21:
      int v12 = v3;
      unsigned int v13 = 108;
      goto LABEL_15;
    case 80:
    case 164:
    case 165:
    case 166:
    case 167:
      int v12 = v3;
      unsigned int v13 = 87;
      goto LABEL_15;
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
      if (!*(unsigned char *)(v7 + 303) && !*(unsigned char *)(v7 + 305)) {
        goto LABEL_13;
      }
      int v12 = v3;
      unsigned int v13 = 24;
LABEL_15:
      if (sub_1CBDA6464(v12, v13) == (__int16)v11) {
        return 0;
      }
LABEL_13:
      uint64_t result = 1;
      break;
    case 113:
    case 116:
    case 117:
    case 118:
    case 126:
    case 127:
    case 134:
    case 135:
LABEL_19:
      int v12 = v3;
      unsigned int v13 = 66;
      goto LABEL_15;
    default:
      goto LABEL_13;
  }
  return result;
}

uint64_t sub_1CBAD89EC(unsigned int *a1, unsigned __int8 *a2, unsigned __int8 *a3, _DWORD *a4, uint64_t a5)
{
  int v10 = *a3;
  unint64_t v11 = &unk_1CDB15BB8;
  unint64_t v12 = 37;
  BOOL v13 = v10 == 6 || v10 == 11;
  if (!v13 && v10 != 95)
  {
    if (sub_1CB920640(a3))
    {
      unint64_t v11 = &unk_1CDB15BB8;
      unint64_t v12 = 37;
    }
    else
    {
      int v14 = *a3;
      unint64_t v11 = &unk_1CDB15C02;
      unint64_t v12 = 35;
      if (v14 != 7 && v14 != 13)
      {
        uint64_t result = sub_1CD3FA514(a3);
        if (!result) {
          return result;
        }
        unint64_t v11 = &unk_1CDB15C02;
        unint64_t v12 = 35;
      }
    }
  }
  uint64_t result = sub_1CB839270(a5, (uint64_t)v11, v12);
  if (result)
  {
    sub_1CB839378(*(void *)(a5 + 24), *a1 | (unint64_t)(result << 32), (*a2 << 8) | (*a3 << 16) | (4 * (*a4 & 0x3F)));
    return 1;
  }
  return result;
}

unint64_t sub_1CBAD8AE0(unsigned int *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return 0;
  }
  LODWORD(v2) = 0;
  uint64_t v3 = 12 * v1;
  int v4 = (int *)(*(void *)a1 + 4);
  do
  {
    int v6 = *v4;
    v4 += 3;
    int v5 = v6;
    unsigned int v7 = v6 - 103;
    unsigned int v8 = v6 - 1960;
    if ((v6 - 391) >= 0x80) {
      int v9 = -1048;
    }
    else {
      int v9 = -1560;
    }
    if (v8 >= 0x7F) {
      int v10 = v9;
    }
    else {
      int v10 = -7836;
    }
    if (v7 >= 0x80) {
      int v11 = v10;
    }
    else {
      int v11 = -408;
    }
    unsigned int v12 = v11 + 4 * v5;
    if (v2 <= v12) {
      uint64_t v2 = v12;
    }
    else {
      uint64_t v2 = v2;
    }
    v3 -= 12;
  }
  while (v3);
  return (unint64_t)(v2 + 15) >> 4;
}

uint64_t (*sub_1CBAD8B5C(int a1))(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v1 = sub_1CBAD8B9C;
  if (a1 <= 100 || a1 != 101 && a1 != 108) {
    return sub_1CBAD8D4C;
  }
  return (uint64_t (*)(unsigned int, unsigned __int8, unsigned __int8, char, char, uint64_t, uint64_t))v1;
}

BOOL sub_1CBAD8B9C(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  LOBYTE(v8) = a4;
  unsigned __int8 v9 = a3;
  unsigned __int8 v17 = a2;
  unsigned __int8 v16 = a3;
  int v14 = a4;
  unsigned int v15 = a1;
  if (a3 > 0x1Bu)
  {
    if (a3 > 0x4Bu)
    {
      if (a3 != 76)
      {
        if (a3 != 95) {
          return 1;
        }
        return !sub_1CBAD982C(&v15, &v17, &v16, &v14, a7);
      }
    }
    else if (a3 != 28)
    {
      if (a3 != 49) {
        return 1;
      }
      return !sub_1CBAD982C(&v15, &v17, &v16, &v14, a7);
    }
  }
  else
  {
    switch(a3)
    {
      case 2u:
        unsigned __int8 v16 = 4;
        if ((a5 & 2) != 0)
        {
          int v8 = 1;
        }
        else if (a5)
        {
          int v8 = 2;
        }
        else
        {
          int v8 = 3;
        }
        int v14 = v8;
        unsigned __int8 v9 = 4;
        break;
      case 4u:
      case 9u:
        break;
      case 5u:
      case 0xAu:
        goto LABEL_19;
      case 6u:
        return !sub_1CBAD982C(&v15, &v17, &v16, &v14, a7);
      default:
        return 1;
    }
    uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CDB15C48, 0x100uLL);
    if (v12) {
      goto LABEL_20;
    }
    if (v9 == 6) {
      return !sub_1CBAD982C(&v15, &v17, &v16, &v14, a7);
    }
    if (v9 != 5) {
      return 1;
    }
  }
LABEL_19:
  uint64_t v12 = sub_1CB839270(a7, (uint64_t)aGhijklmnopqrst, 0x80uLL);
  if (v12)
  {
LABEL_20:
    sub_1CB839378(*(void *)(a7 + 24), a1 | (unint64_t)(v12 << 32), (unsigned __int16)(a2 << 8) | (v9 << 16) | (4 * (v8 & 0x3F)));
    return 0;
  }
  if (v9 == 49 || v9 == 6) {
    return !sub_1CBAD982C(&v15, &v17, &v16, &v14, a7);
  }
  return 1;
}

uint64_t sub_1CBAD8D4C(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 v28 = a3;
  if ((a3 & 0xFE) == 2)
  {
    unsigned __int8 v28 = 4;
    int v10 = 4;
    if ((a5 & 2) != 0) {
      char v11 = 1;
    }
    else {
      char v11 = a5 & 1 ^ 3;
    }
  }
  else
  {
    char v11 = a4;
    int v10 = a3;
    if (a3 > 0x1Bu || ((1 << a3) & 0x8000310) == 0) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CDB16046, 0x4CuLL);
  if (v12)
  {
LABEL_24:
    uint64_t v18 = a1 | (unint64_t)(v12 << 32);
    int v19 = (a2 << 8) | (v10 << 16) | (4 * (v11 & 0x3F));
LABEL_25:
    sub_1CB839378(*(void *)(a7 + 24), v18, v19);
    return 0;
  }
LABEL_8:
  BOOL v13 = &unk_1CDB1612A;
  unint64_t v14 = 37;
  uint64_t v15 = (v10 - 5);
  if (v15 <= 0x3C)
  {
    if (((1 << (v10 - 5)) & 0x1000501800000000) != 0) {
      goto LABEL_18;
    }
    if (((1 << (v10 - 5)) & 0x200800021) != 0) {
      goto LABEL_15;
    }
    if (v15 == 1) {
      goto LABEL_23;
    }
  }
  char v16 = v10 - 76;
  if ((v10 - 76) > 0x15) {
    goto LABEL_30;
  }
  if (((1 << v16) & 0x20300C) != 0) {
    goto LABEL_18;
  }
  if (((1 << v16) & 0x401) == 0)
  {
    if (v10 != 95) {
      goto LABEL_30;
    }
    goto LABEL_23;
  }
LABEL_15:
  uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CDB160DE, 0x26uLL);
  if (v12) {
    goto LABEL_24;
  }
  if ((v10 - 40) > 0x27 || ((1 << (v10 - 40)) & 0xC002000A03) == 0)
  {
    if (v10 != 6) {
      goto LABEL_30;
    }
    goto LABEL_19;
  }
LABEL_18:
  if (sub_1CB920640(&v28))
  {
LABEL_19:
    BOOL v13 = &unk_1CDB1612A;
    unint64_t v14 = 37;
    goto LABEL_23;
  }
  int v10 = v28;
  unsigned int v17 = v28 - 41;
  if (v17 > 0x38 || ((1 << v17) & 0x100004001000401) == 0) {
    goto LABEL_30;
  }
  BOOL v13 = &unk_1CDB16174;
  unint64_t v14 = 35;
LABEL_23:
  uint64_t v12 = sub_1CB839270(a7, (uint64_t)v13, v14);
  int v10 = v28;
  if (v12) {
    goto LABEL_24;
  }
LABEL_30:
  uint64_t result = 1;
  if (v10 > 37)
  {
    if (v10 <= 75)
    {
      if (v10 == 38) {
        goto LABEL_53;
      }
      if (v10 != 49)
      {
        if (v10 != 51) {
          return result;
        }
LABEL_60:
        uint64_t v21 = (*(_DWORD *)(a7 + 40) + 15) & 0xFFFFFFF0;
        *(_DWORD *)(a7 + 40) = v21 + 16;
        unsigned int v26 = *(unsigned __int8 *)(a7 + 44);
        if (v26 <= 4) {
          LOBYTE(v26) = 4;
        }
        *(unsigned char *)(a7 + 44) = v26;
        if (*(unsigned char *)(a7 + 5)) {
          goto LABEL_69;
        }
        uint64_t v23 = *(void *)(*(void *)(a7 + 8) + 56);
        if (*(unsigned __int8 *)(v23 + 60) > 3u) {
          goto LABEL_69;
        }
        char v24 = 4;
        goto LABEL_71;
      }
    }
    else
    {
      if (v10 <= 94)
      {
        if (v10 != 76 && v10 != 86) {
          return result;
        }
LABEL_53:
        uint64_t v21 = (*(_DWORD *)(a7 + 40) + 3) & 0xFFFFFFFC;
        *(_DWORD *)(a7 + 40) = v21 + 4;
        unsigned int v25 = *(unsigned __int8 *)(a7 + 44);
        if (v25 <= 2) {
          LOBYTE(v25) = 2;
        }
        *(unsigned char *)(a7 + 44) = v25;
        if (*(unsigned char *)(a7 + 5)) {
          goto LABEL_69;
        }
        uint64_t v23 = *(void *)(*(void *)(a7 + 8) + 56);
        if (*(unsigned __int8 *)(v23 + 60) > 1u) {
          goto LABEL_69;
        }
        char v24 = 2;
LABEL_71:
        *(unsigned char *)(v23 + 60) = v24;
LABEL_69:
        uint64_t v18 = a1 | (unint64_t)(v21 << 32);
        int v19 = (a2 << 8) | (v10 << 16) | (4 * (v11 & 0x3F)) | 1;
        goto LABEL_25;
      }
      if (v10 != 95)
      {
        if (v10 != 97) {
          return result;
        }
        goto LABEL_60;
      }
    }
    uint64_t v21 = (*(_DWORD *)(a7 + 40) + 7) & 0xFFFFFFF8;
    *(_DWORD *)(a7 + 40) = v21 + 8;
    unsigned int v27 = *(unsigned __int8 *)(a7 + 44);
    if (v27 <= 3) {
      LOBYTE(v27) = 3;
    }
    *(unsigned char *)(a7 + 44) = v27;
    if (*(unsigned char *)(a7 + 5)) {
      goto LABEL_69;
    }
    uint64_t v23 = *(void *)(*(void *)(a7 + 8) + 56);
    if (*(unsigned __int8 *)(v23 + 60) > 2u) {
      goto LABEL_69;
    }
    char v24 = 3;
    goto LABEL_71;
  }
  if (v10 <= 7)
  {
    if ((v10 - 2) >= 3)
    {
      if (v10 != 5) {
        return result;
      }
      goto LABEL_53;
    }
LABEL_44:
    uint64_t v21 = (*(_DWORD *)(a7 + 40) + 1) & 0xFFFFFFFE;
    *(_DWORD *)(a7 + 40) = v21 + 2;
    unsigned int v22 = *(unsigned __int8 *)(a7 + 44);
    if (v22 <= 1) {
      LOBYTE(v22) = 1;
    }
    *(unsigned char *)(a7 + 44) = v22;
    if (*(unsigned char *)(a7 + 5)) {
      goto LABEL_69;
    }
    uint64_t v23 = *(void *)(*(void *)(a7 + 8) + 56);
    if (*(unsigned char *)(v23 + 60)) {
      goto LABEL_69;
    }
    char v24 = 1;
    goto LABEL_71;
  }
  if ((v10 - 8) < 2) {
    goto LABEL_44;
  }
  if (v10 == 10 || v10 == 28) {
    goto LABEL_53;
  }
  return result;
}

uint64_t (*sub_1CBAD9144(int a1))(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v1 = sub_1CBAD91A0;
  if (!a1) {
    return sub_1CBAD9360;
  }
  if (a1 > 101)
  {
    if (a1 != 102)
    {
      if (a1 == 106) {
        return (uint64_t (*)(unsigned int, unsigned __int8, unsigned __int8, int, char, uint64_t, uint64_t))v1;
      }
      return sub_1CBAD9360;
    }
    return (uint64_t (*)(unsigned int, unsigned __int8, unsigned __int8, int, char, uint64_t, uint64_t))sub_1CBAD91B0;
  }
  if (a1 != 8) {
    return (uint64_t (*)(unsigned int, unsigned __int8, unsigned __int8, int, char, uint64_t, uint64_t))sub_1CBAD91B0;
  }
  return sub_1CBAD9360;
}

BOOL sub_1CBAD91A0(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, unsigned int a6, uint64_t a7)
{
  return sub_1CBAD91B0(a1, a2, a3, a4, a5, a6, a7);
}

BOOL sub_1CBAD91B0(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  LOBYTE(v8) = a4;
  unsigned __int8 v9 = a3;
  unsigned __int8 v17 = a2;
  unsigned __int8 v16 = a3;
  int v14 = a4;
  unsigned int v15 = a1;
  if (a3 > 0x1Bu)
  {
    if (a3 > 0x4Bu)
    {
      if (a3 != 76)
      {
        if (a3 != 95) {
          return 1;
        }
        return !sub_1CBAD982C(&v15, &v17, &v16, &v14, a7);
      }
    }
    else if (a3 != 28)
    {
      if (a3 != 49) {
        return 1;
      }
      return !sub_1CBAD982C(&v15, &v17, &v16, &v14, a7);
    }
  }
  else
  {
    switch(a3)
    {
      case 2u:
        unsigned __int8 v16 = 4;
        if ((a5 & 2) != 0)
        {
          int v8 = 1;
        }
        else if (a5)
        {
          int v8 = 2;
        }
        else
        {
          int v8 = 3;
        }
        int v14 = v8;
        unsigned __int8 v9 = 4;
        break;
      case 4u:
      case 9u:
        break;
      case 5u:
      case 0xAu:
        goto LABEL_19;
      case 6u:
        return !sub_1CBAD982C(&v15, &v17, &v16, &v14, a7);
      default:
        return 1;
    }
    uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CDB161BA, 0x100uLL);
    if (v12) {
      goto LABEL_20;
    }
    if (v9 == 6) {
      return !sub_1CBAD982C(&v15, &v17, &v16, &v14, a7);
    }
    if (v9 != 5) {
      return 1;
    }
  }
LABEL_19:
  uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CDB163BA, 0x80uLL);
  if (v12)
  {
LABEL_20:
    sub_1CB839378(*(void *)(a7 + 24), a1 | (unint64_t)(v12 << 32), (unsigned __int16)(a2 << 8) | (v9 << 16) | (4 * (v8 & 0x3F)));
    return 0;
  }
  if (v9 == 49 || v9 == 6) {
    return !sub_1CBAD982C(&v15, &v17, &v16, &v14, a7);
  }
  return 1;
}

uint64_t sub_1CBAD9360(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 v27 = a2;
  unsigned __int8 v26 = a3;
  int v24 = a4;
  unsigned int v25 = a1;
  if ((a3 & 0xFE) == 2)
  {
    unsigned __int8 v26 = 4;
    if ((a5 & 2) != 0)
    {
      int v10 = 1;
    }
    else if (a5)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = 3;
    }
    int v24 = v10;
    unsigned int v11 = 4;
LABEL_14:
    uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CDB164BA, 0x4CuLL);
    if (v12)
    {
LABEL_24:
      uint64_t v13 = a1 | (unint64_t)(v12 << 32);
      int v14 = (a2 << 8) | (v11 << 16) | (4 * (v10 & 0x3F));
      goto LABEL_25;
    }
    goto LABEL_15;
  }
  LOBYTE(v10) = a4;
  unsigned int v11 = a3;
  if (a3 <= 0x1Bu)
  {
    if (((1 << a3) & 0x8000310) != 0) {
      goto LABEL_14;
    }
    if (a3 == 17)
    {
      unsigned __int8 v26 = 28;
      if ((a5 & 2) != 0)
      {
        int v10 = 1;
      }
      else if (a5)
      {
        int v10 = 2;
      }
      else
      {
        int v10 = 3;
      }
      int v24 = v10;
      unsigned int v11 = 28;
      goto LABEL_23;
    }
  }
LABEL_15:
  if ((v11 > 0x26 || ((1 << v11) & 0x4010000420) == 0) && v11 != 86 && v11 != 76) {
    goto LABEL_28;
  }
LABEL_23:
  uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CDB16552, 0x26uLL);
  if (v12) {
    goto LABEL_24;
  }
LABEL_28:
  if (v11 - 6 <= 0x3A && ((1 << (v11 - 6)) & 0x400080400800021) != 0
    || v11 - 78 <= 0x20 && ((1 << (v11 - 78)) & 0x100020401) != 0)
  {
    if (sub_1CBAD89EC(&v25, &v27, &v26, &v24, a7)) {
      return 0;
    }
    unsigned int v11 = v26;
  }
  if (v11 - 13 <= 0x34 && ((1 << (v11 - 13)) & 0x10004010020001) != 0
    || v11 - 79 <= 0x20 && ((1 << (v11 - 79)) & 0x100040401) != 0)
  {
    if (sub_1CBAD89EC(&v25, &v27, &v26, &v24, a7)) {
      return 0;
    }
    unsigned int v11 = v26;
  }
  uint64_t result = 1;
  switch(v11)
  {
    case 2u:
    case 3u:
    case 4u:
    case 8u:
    case 9u:
      uint64_t v16 = (*(_DWORD *)(a7 + 40) + 1) & 0xFFFFFFFE;
      *(_DWORD *)(a7 + 40) = v16 + 2;
      unsigned int v17 = *(unsigned __int8 *)(a7 + 44);
      if (v17 <= 1) {
        LOBYTE(v17) = 1;
      }
      *(unsigned char *)(a7 + 44) = v17;
      if (*(unsigned char *)(a7 + 5)) {
        goto LABEL_64;
      }
      uint64_t v18 = *(void *)(*(void *)(a7 + 8) + 56);
      if (*(unsigned char *)(v18 + 60)) {
        goto LABEL_64;
      }
      char v19 = 1;
      goto LABEL_66;
    case 5u:
    case 0xAu:
    case 0x1Cu:
    case 0x26u:
      goto LABEL_60;
    case 6u:
    case 0xBu:
    case 0x1Du:
    case 0x28u:
      goto LABEL_54;
    case 7u:
    case 0xCu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x27u:
      return result;
    case 0xDu:
    case 0x1Eu:
    case 0x29u:
      goto LABEL_49;
    default:
      char v20 = v11 - 49;
      if (v11 - 49 > 0x3E) {
        return result;
      }
      if (((1 << v20) & 0x2000408020008001) != 0)
      {
LABEL_54:
        uint64_t v16 = (*(_DWORD *)(a7 + 40) + 7) & 0xFFFFFFF8;
        *(_DWORD *)(a7 + 40) = v16 + 8;
        unsigned int v22 = *(unsigned __int8 *)(a7 + 44);
        if (v22 <= 3) {
          LOBYTE(v22) = 3;
        }
        *(unsigned char *)(a7 + 44) = v22;
        if (!*(unsigned char *)(a7 + 5))
        {
          uint64_t v18 = *(void *)(*(void *)(a7 + 8) + 56);
          if (*(unsigned __int8 *)(v18 + 60) <= 2u)
          {
            char v19 = 3;
            goto LABEL_66;
          }
        }
      }
      else if (((1 << v20) & 0x4001010040010004) != 0)
      {
LABEL_49:
        uint64_t v16 = (*(_DWORD *)(a7 + 40) + 15) & 0xFFFFFFF0;
        *(_DWORD *)(a7 + 40) = v16 + 16;
        unsigned int v21 = *(unsigned __int8 *)(a7 + 44);
        if (v21 <= 4) {
          LOBYTE(v21) = 4;
        }
        *(unsigned char *)(a7 + 44) = v21;
        if (!*(unsigned char *)(a7 + 5))
        {
          uint64_t v18 = *(void *)(*(void *)(a7 + 8) + 56);
          if (*(unsigned __int8 *)(v18 + 60) <= 3u)
          {
            char v19 = 4;
LABEL_66:
            *(unsigned char *)(v18 + 60) = v19;
          }
        }
      }
      else
      {
        if (((1 << v20) & 0x2008000000) == 0) {
          return result;
        }
LABEL_60:
        uint64_t v16 = (*(_DWORD *)(a7 + 40) + 3) & 0xFFFFFFFC;
        *(_DWORD *)(a7 + 40) = v16 + 4;
        unsigned int v23 = *(unsigned __int8 *)(a7 + 44);
        if (v23 <= 2) {
          LOBYTE(v23) = 2;
        }
        *(unsigned char *)(a7 + 44) = v23;
        if (!*(unsigned char *)(a7 + 5))
        {
          uint64_t v18 = *(void *)(*(void *)(a7 + 8) + 56);
          if (*(unsigned __int8 *)(v18 + 60) <= 1u)
          {
            char v19 = 2;
            goto LABEL_66;
          }
        }
      }
LABEL_64:
      uint64_t v13 = a1 | (unint64_t)(v16 << 32);
      int v14 = (a2 << 8) | (v11 << 16) | (4 * (v10 & 0x3F)) | 1;
      break;
  }
LABEL_25:
  sub_1CB839378(*(void *)(a7 + 24), v13, v14);
  return 0;
}

BOOL sub_1CBAD982C(unsigned int *a1, unsigned __int8 *a2, unsigned __int8 *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v10 = sub_1CB839270(a5, (uint64_t)&unk_1CDB15F48, 0x7FuLL);
  int v11 = v10;
  if (v10) {
    sub_1CB839378(*(void *)(a5 + 24), *a1 | (unint64_t)(v10 << 32), (*a2 << 8) | (*a3 << 16) | (4 * (*a4 & 0x3F)));
  }
  return v11 != 0;
}

uint64_t sub_1CBAD98B8(uint64_t a1, void *a2, uint64_t *a3, unsigned char *a4, uint64_t a5)
{
  v83[8] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v9 = (llvm::MachineFunction *)a2[1];
  uint64_t v10 = *(void *)v9;
  uint64_t v58 = *((void *)v9 + 5);
  uint64_t v11 = *(void *)(*(void *)v9 + 40);
  uint64_t v12 = *(void *)(a2[2] + 8) + 26256;
  uint64_t v13 = (void *)a2[4];
  uint64_t v70 = v13;
  if (v13) {
    llvm::MetadataTracking::track((uint64_t)&v70, (unsigned __int8 *)v13, 2);
  }
  MachineInstr = llvm::MachineFunction::CreateMachineInstr(v9, v12, (unsigned __int8 **)&v70, 0);
  if (v70) {
    llvm::MetadataTracking::untrack((uint64_t)&v70, (unsigned __int8 *)v70);
  }
  uint64_t v15 = 1;
  LODWORD(v70) = 1;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  llvm::MachineInstr::addOperand(MachineInstr, v9, (const llvm::MachineOperand *)&v70);
  if (a5)
  {
    int v24 = (llvm::DataLayout *)(v11 + 272);
    unsigned int v25 = sub_1CBAD8B5C((*(unsigned __int16 *)(v10 + 18) >> 4) & 0x3FF);
    uint64_t v26 = *(void *)(a1 + 8);
    std::string::size_type v81 = (char *)v83;
    uint64_t v82 = 0x400000000;
    llvm::ComputeValueVTs(v26, v24, *a3, (uint64_t)&v81, 0, 0, 0);
    uint64_t v56 = *(llvm::LLVMContext **)*a3;
    unsigned int v78 = v80;
    uint64_t v79 = 0x800000000;
    if (v82)
    {
      uint64_t v55 = v25;
      uint64_t v28 = 0;
      unint64_t v29 = 0;
      int v30 = a4;
      do
      {
        llvm::EVT::getTypeForEVT((llvm::EVT *)&v81[v28], v56);
        sub_1CB925510((uint64_t)&v70, v30, 1, v31, 0, 0, 0, 1, 0);
        LODWORD(v59[0]) = *(_DWORD *)&a4[4 * v29];
        sub_1CC6E73A8(a1, (llvm::Type **)&v70, 0, v24, v10);
        uint64_t v32 = (*(unsigned __int16 *)(v10 + 18) >> 4) & 0x3FF;
        int v61 = (void (**)(void **))&unk_1F25F6670;
        uint64_t v62 = a2;
        int v63 = v59;
        uint64_t v64 = (void **)&v61;
        sub_1CBAD9FE0(*(void *)(a1 + 8), (int *)&v70, (uint64_t)&v78, v24, v58, v32, (uint64_t)&v61);
        if (v64 == (void **)&v61)
        {
          v61[4]((void **)&v61);
        }
        else if (v64)
        {
          (*((void (**)(void))*v64 + 5))();
        }
        if (v76 != &v77) {
          free(v76);
        }
        if (v74 != &v75) {
          free(v74);
        }
        if (v71 != &v73) {
          free(v71);
        }
        ++v29;
        v28 += 16;
        v30 += 4;
      }
      while (v29 < v82);
      int v33 = v78;
      uint64_t v70 = &v72;
      uint64_t v71 = (void *)0x1000000000;
      if (v79)
      {
        uint64_t v34 = 152 * v79;
        int v35 = (char *)v78;
        do
        {
          int v61 = (void (**)(void **))&unk_1F25F66B8;
          uint64_t v62 = a2;
          int v63 = v33;
          uint64_t v64 = (void **)&v61;
          sub_1CBADA404((unint64_t)v35, (uint64_t)&v70, v58, (uint64_t)&v61);
          if (v64 == (void **)&v61)
          {
            v61[4]((void **)&v61);
          }
          else if (v64)
          {
            (*((void (**)(void))*v64 + 5))();
          }
          v35 += 152;
          v33 += 19;
          v34 -= 152;
        }
        while (v34);
      }
      unsigned int v25 = v55;
    }
    else
    {
      uint64_t v70 = &v72;
      uint64_t v71 = (void *)0x1000000000;
    }
    v59[2] = v25;
    v59[3] = 0;
    char v60 = 0;
    v59[0] = &unk_1F25EEC88;
    v59[1] = v25;
    uint64_t v62 = a2;
    int v63 = (void *)v58;
    LOBYTE(v64) = 0;
    int v61 = (void (**)(void **))&unk_1F25F6520;
    int v65 = v9;
    int v66 = MachineInstr;
    char v67 = v69;
    uint64_t v68 = 0x800000000;
    uint64_t v15 = sub_1CC6E7788(a1, &v61, (uint64_t)v59, (uint64_t *)&v70, a2, (*(unsigned __int16 *)(v10 + 18) >> 4) & 0x3FF, *(_DWORD *)(*(void *)(v10 + 24) + 8) > 0xFFu, v27, 0, 0);
    int v61 = (void (**)(void **))&unk_1F25F6520;
    if (v67 != v69) {
      free(v67);
    }
    uint64_t v36 = (char *)v70;
    if (v71)
    {
      uint64_t v37 = 152 * v71;
      do
      {
        int v38 = &v36[v37];
        unsigned int v39 = *(char **)&v36[v37 - 40];
        if (&v36[v37 - 24] != v39) {
          free(v39);
        }
        int v40 = (char *)*((void *)v38 - 9);
        if (v38 - 56 != v40) {
          free(v40);
        }
        char v41 = *(char **)&v36[v37 - 144];
        if (&v36[v37 - 128] != v41) {
          free(v41);
        }
        v37 -= 152;
      }
      while (v37);
      uint64_t v36 = (char *)v70;
    }
    if (v36 != (char *)&v72) {
      free(v36);
    }
    __n128 v42 = (char *)v78;
    if (v79)
    {
      uint64_t v43 = 152 * v79;
      do
      {
        uint64_t v44 = &v42[v43];
        int v45 = *(char **)&v42[v43 - 40];
        if (&v42[v43 - 24] != v45) {
          free(v45);
        }
        int v46 = (char *)*((void *)v44 - 9);
        if (v44 - 56 != v46) {
          free(v46);
        }
        uint64_t v47 = *(char **)&v42[v43 - 144];
        if (&v42[v43 - 128] != v47) {
          free(v47);
        }
        v43 -= 152;
      }
      while (v43);
      __n128 v42 = (char *)v78;
    }
    if (v42 != v80) {
      free(v42);
    }
    if (v81 != (char *)v83) {
      free(v81);
    }
  }
  uint64_t v16 = (unint64_t *)a2[6];
  uint64_t v17 = *(void *)(a2[5] + 40);
  *((void *)MachineInstr + 3) = v17;
  uint64_t v18 = *(void *)(v17 + 32);
  uint64_t v19 = *((unsigned int *)MachineInstr + 10);
  if (v19)
  {
    uint64_t v48 = *((void *)MachineInstr + 4);
    uint64_t v49 = *(void *)(v18 + 40);
    uint64_t v50 = 32 * v19;
    do
    {
      if (!*(unsigned char *)v48)
      {
        uint64_t v51 = *(unsigned int *)(v48 + 4);
        if ((int)v51 >= 0) {
          char v52 = (uint64_t *)(*(void *)(v49 + 272) + 8 * v51);
        }
        else {
          char v52 = (uint64_t *)(*(void *)(v49 + 24) + 16 * (v51 & 0x7FFFFFFF) + 8);
        }
        uint64_t v53 = *v52;
        if (*v52)
        {
          uint64_t v54 = *(void *)(v53 + 16);
          *(void *)(v53 + 16) = v48;
          *(void *)(v48 + 16) = v54;
          if (*(unsigned char *)(v48 + 3))
          {
            *(void *)(v48 + 24) = v53;
          }
          else
          {
            *(void *)(v48 + 24) = 0;
            char v52 = (uint64_t *)(v54 + 24);
          }
        }
        else
        {
          *(void *)(v48 + 16) = v48;
          *(void *)(v48 + 24) = 0;
        }
        *char v52 = v48;
      }
      v48 += 32;
      v50 -= 32;
    }
    while (v50);
  }
  uint64_t v20 = *(void *)(v18 + 728);
  if (v20) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v20 + 24))(v20, MachineInstr);
  }
  unint64_t v21 = *v16 & 0xFFFFFFFFFFFFFFF8;
  *(void *)MachineInstr = v21 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = v16;
  *(void *)(v21 + 8) = MachineInstr;
  *uint64_t v16 = *v16 & 7 | (unint64_t)MachineInstr;
  uint64_t v22 = a2[7];
  if (v22) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v22 + 24))(v22, MachineInstr);
  }
  return v15;
}

void sub_1CBAD9FE0(uint64_t a1, int *a2, uint64_t a3, llvm::DataLayout *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v52[8] = *MEMORY[0x1E4F143B8];
  int v8 = *(llvm::LLVMContext ***)a2;
  if (*(unsigned char *)(*(void *)a2 + 8) == 7) {
    return;
  }
  uint64_t v15 = *v8;
  uint64_t v50 = (llvm::EVT *)v52;
  uint64_t v51 = 0x400000000;
  uint64_t v47 = v49;
  uint64_t v48 = 0x400000000;
  llvm::ComputeValueVTs(a1, a4, (uint64_t)v8, (uint64_t)&v50, 0, (uint64_t)&v47, 0);
  if (v51 == 1)
  {
    uint64_t v16 = (unsigned char *)*((void *)a2 + 10);
    llvm::EVT::getTypeForEVT(v50, v15);
    *(void *)&long long v46 = v17;
    sub_1CB923CAC(a3, v16, (uint64_t *)&v46, a2 + 36, (uint64_t)(a2 + 2), (char *)a2 + 72);
LABEL_4:
    if (v47 != v49) {
      free(v47);
    }
    if (v50 != (llvm::EVT *)v52) {
      free(v50);
    }
    return;
  }
  int v38 = *(_DWORD *)(a3 + 8);
  int v40 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, llvm::DataLayout *))(*(void *)a1 + 1912))(a1, *(void *)a2, a6, 0, a4);
  if (v51)
  {
    uint64_t v18 = 0;
    uint64_t v19 = v50;
    unsigned int v39 = (llvm::EVT *)((char *)v50 + 16 * v51);
    do
    {
      long long v46 = *(_OWORD *)v19;
      int v45 = 0;
      llvm::EVT::getTypeForEVT((llvm::EVT *)&v46, v15);
      int v45 = v20;
      if (*(void *)(a7 + 24))
      {
        __n128 v42 = v19;
        uint64_t v43 = v18;
        unint64_t LLTForType = llvm::getLLTForType(v20, a4, v21);
        int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a5, "", 0);
        unint64_t v23 = IncompleteVirtualRegister & 0x7FFFFFFF;
        *(void *)(*(void *)(a5 + 24) + 16 * v23) = 4;
        unint64_t v24 = *(unsigned int *)(a5 + 432);
        if (v23 >= v24)
        {
          unint64_t v25 = v23 + 1;
          uint64_t v26 = *(void *)(a5 + 440);
          if (v23 >= *(unsigned int *)(a5 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v27 = *(_DWORD *)(a5 + 432);
          if (v25 != v24)
          {
            uint64_t v28 = (void *)(*(void *)(a5 + 424) + 8 * *(unsigned int *)(a5 + 432));
            uint64_t v29 = ~v23 + v24;
            do
              *v28++ = v26;
            while (!__CFADD__(v29++, 1));
            int v27 = *(_DWORD *)(a5 + 432);
          }
          *(_DWORD *)(a5 + 432) = v27 + v25 - v24;
        }
        *(void *)(*(void *)(a5 + 424) + 8 * v23) = LLTForType;
        uint64_t v31 = *(void *)(a5 + 8);
        if (v31)
        {
          int v36 = IncompleteVirtualRegister;
          (*(void (**)(uint64_t))(*(void *)v31 + 24))(v31);
          int IncompleteVirtualRegister = v36;
        }
        uint64_t v19 = v42;
        uint64_t v18 = v43;
      }
      else
      {
        int IncompleteVirtualRegister = *(_DWORD *)(*((void *)a2 + 10) + 4 * v18);
      }
      int v44 = IncompleteVirtualRegister;
      sub_1CB923CAC(a3, &v44, (uint64_t *)&v45, a2 + 36, (uint64_t)(a2 + 2), (char *)a2 + 72);
      if (v40)
      {
        uint64_t v37 = *(_DWORD **)(*(void *)a3 + 152 * *(unsigned int *)(a3 + 8) - 144);
        *v37 |= 0x20000000u;
      }
      ++v18;
      uint64_t v19 = (llvm::EVT *)((char *)v19 + 16);
    }
    while (v19 != v39);
  }
  uint64_t v32 = *(_DWORD **)(*(void *)a3 + 152 * *(unsigned int *)(a3 + 8) - 144);
  *v32 |= 0x10000000u;
  if (!*(void *)(a7 + 24) || !v48) {
    goto LABEL_4;
  }
  uint64_t v33 = 0;
  while (1)
  {
    uint64_t v34 = 8 * *((void *)v47 + v33);
    LODWORD(v45) = **(_DWORD **)(*(void *)a3 + 152 * (v38 + v33) + 80);
    *(void *)&long long v46 = v34;
    uint64_t v35 = *(void *)(a7 + 24);
    if (!v35) {
      break;
    }
    (*(void (**)(uint64_t, llvm **, long long *))(*(void *)v35 + 48))(v35, &v45, &v46);
    if (++v33 >= (unint64_t)v48) {
      goto LABEL_4;
    }
  }
  sub_1CB920400();
  sub_1CBADA404();
}

void sub_1CBADA404(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v64[2] = *MEMORY[0x1E4F143B8];
  int v6 = **(_DWORD **)(a1 + 80);
  if ((v6 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  uint64_t v8 = v6 & 0x7FFFFFFF;
  if (v8 >= *(_DWORD *)(a3 + 432)) {
    goto LABEL_8;
  }
  unint64_t v9 = *(void *)(*(void *)(a3 + 424) + 8 * v8);
  if ((v9 & 0xFFFFFFFFFFFFFFF9) == 0 || (*(void *)(*(void *)(a3 + 424) + 8 * v8) & 4) == 0) {
    goto LABEL_8;
  }
  uint64_t v22 = 0x800000000000000;
  if ((v9 & 2) == 0) {
    uint64_t v22 = 0x8000000000000;
  }
  if ((v22 & v9) != 0) {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  }
  if ((v9 & 0x7FFF8) == 0x18)
  {
    char v23 = 3;
    if ((v9 & 1) == 0) {
      char v23 = 19;
    }
    unint64_t v24 = v9 >> v23;
    unint64_t v25 = v9 & 0x8000000000000000 | (8 * v24) | 1;
    uint64_t v26 = (v9 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v24) | 2;
    if ((v9 & 2) == 0) {
      uint64_t v26 = v25;
    }
    uint64_t v53 = v26;
    uint64_t v27 = *(void *)a1;
    uint64_t v51 = a4;
    if ((*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x12) {
      uint64_t v27 = **(void **)(v27 + 16);
    }
    int v28 = 0;
    uint64_t v62 = v64;
    uint64_t v63 = 0x400000000;
    uint64_t v52 = v27;
    do
    {
      unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a3, "", 0);
      unint64_t v30 = IncompleteVirtualRegister & 0x7FFFFFFF;
      *(void *)(*(void *)(a3 + 24) + 16 * v30) = 4;
      unint64_t v31 = *(unsigned int *)(a3 + 432);
      if (v30 >= v31)
      {
        unint64_t v32 = v30 + 1;
        uint64_t v33 = *(void *)(a3 + 440);
        if (v30 >= *(unsigned int *)(a3 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v34 = *(_DWORD *)(a3 + 432);
        if (v32 != v31)
        {
          uint64_t v35 = (void *)(*(void *)(a3 + 424) + 8 * *(unsigned int *)(a3 + 432));
          uint64_t v36 = ~v30 + v31;
          do
            *v35++ = v33;
          while (!__CFADD__(v36++, 1));
          int v34 = *(_DWORD *)(a3 + 432);
        }
        *(_DWORD *)(a3 + 432) = v34 + v32 - v31;
      }
      *(void *)(*(void *)(a3 + 424) + 8 * v30) = v53;
      uint64_t v38 = *(void *)(a3 + 8);
      if (v38) {
        (*(void (**)(uint64_t, void))(*(void *)v38 + 24))(v38, IncompleteVirtualRegister);
      }
      unsigned int v54 = IncompleteVirtualRegister;
      if (v63 >= (unint64_t)HIDWORD(v63)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v62[v63] = IncompleteVirtualRegister;
      LODWORD(v63) = v63 + 1;
      sub_1CB925510((uint64_t)&v55, &v54, 1, v52, *(_DWORD *)(a1 + 144), *(unsigned char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(unsigned char *)(a1 + 72), 0);
      unint64_t v39 = sub_1CB927410(a2, (unint64_t)&v55, 1);
      uint64_t v40 = *(void *)a2;
      unsigned int v41 = *(_DWORD *)(a2 + 8);
      uint64_t v42 = *(void *)a2 + 152 * v41;
      *(void *)uint64_t v42 = *(void *)v39;
      *(void *)(v42 + 8) = v42 + 24;
      *(void *)(v42 + 16) = 0x400000000;
      if (*(_DWORD *)(v39 + 16)) {
        sub_1CB927924(v42 + 8, v39 + 8);
      }
      *(unsigned char *)(v42 + 72) = *(unsigned char *)(v39 + 72);
      uint64_t v43 = v40 + 152 * v41;
      *(void *)(v43 + 80) = v43 + 96;
      uint64_t v44 = v43 + 80;
      *(void *)(v44 + 8) = 0x400000000;
      if (*(_DWORD *)(v39 + 88)) {
        sub_1CB927A18(v44, v39 + 80);
      }
      uint64_t v45 = v40 + 152 * v41;
      *(void *)(v45 + 112) = v45 + 128;
      uint64_t v46 = v45 + 112;
      *(void *)(v46 + 8) = 0x200000000;
      if (*(_DWORD *)(v39 + 120)) {
        sub_1CB927A18(v46, v39 + 112);
      }
      uint64_t v47 = v40 + 152 * v41;
      uint64_t v48 = *(void *)(v39 + 136);
      *(_DWORD *)(v47 + 144) = *(_DWORD *)(v39 + 144);
      *(void *)(v47 + 136) = v48;
      ++*(_DWORD *)(a2 + 8);
      if (v60 != &v61) {
        free(v60);
      }
      if (v58 != &v59) {
        free(v58);
      }
      if (v56 != &v57) {
        free(v56);
      }
      ++v28;
    }
    while (v28 != 3);
    uint64_t v55 = v62;
    uint64_t v56 = (void *)v63;
    uint64_t v49 = *(void *)(v51 + 24);
    if (v49)
    {
      (*(void (**)(uint64_t, void **))(*(void *)v49 + 48))(v49, &v55);
      if (v62 != (_DWORD *)v64) {
        free(v62);
      }
    }
    else
    {
      sub_1CB920400();
      sub_1CBADA944(v50);
    }
  }
  else
  {
LABEL_8:
    unint64_t v11 = sub_1CB927410(a2, a1, 1);
    uint64_t v12 = *(void *)a2;
    unsigned int v13 = *(_DWORD *)(a2 + 8);
    uint64_t v14 = *(void *)a2 + 152 * v13;
    *(void *)uint64_t v14 = *(void *)v11;
    *(void *)(v14 + 8) = v14 + 24;
    *(void *)(v14 + 16) = 0x400000000;
    if (*(_DWORD *)(v11 + 16)) {
      sub_1CB927924(v14 + 8, v11 + 8);
    }
    *(unsigned char *)(v14 + 72) = *(unsigned char *)(v11 + 72);
    uint64_t v15 = v12 + 152 * v13;
    *(void *)(v15 + 80) = v15 + 96;
    uint64_t v16 = v15 + 80;
    *(void *)(v16 + 8) = 0x400000000;
    if (*(_DWORD *)(v11 + 88)) {
      sub_1CB927A18(v16, v11 + 80);
    }
    uint64_t v17 = v12 + 152 * v13;
    *(void *)(v17 + 112) = v17 + 128;
    uint64_t v18 = v17 + 112;
    *(void *)(v18 + 8) = 0x200000000;
    if (*(_DWORD *)(v11 + 120)) {
      sub_1CB927A18(v18, v11 + 112);
    }
    uint64_t v19 = v12 + 152 * v13;
    uint64_t v20 = *(void *)(v11 + 136);
    *(_DWORD *)(v19 + 144) = *(_DWORD *)(v11 + 144);
    *(void *)(v19 + 136) = v20;
    ++*(_DWORD *)(a2 + 8);
  }
}

void *sub_1CBADA944(void *a1)
{
  *a1 = &unk_1F25F6520;
  uint64_t v2 = (void *)a1[6];
  if (v2 != a1 + 8) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CBADA998(llvm *a1, void *a2, uint64_t *a3, unsigned char *a4, uint64_t a5)
{
  int v6 = (llvm::MachineFunction *)a2[1];
  int v7 = (*(unsigned __int16 *)(*(void *)v6 + 18) >> 4) & 0x3FF;
  if ((v7 - 100) < 5) {
    goto LABEL_2;
  }
  if (((*(unsigned __int16 *)(*(void *)v6 + 18) >> 4) & 0x3FFu) <= 0x69)
  {
    if (v7) {
      BOOL v21 = v7 == 8;
    }
    else {
      BOOL v21 = 1;
    }
    if (!v21) {
      goto LABEL_16;
    }
  }
  else
  {
    if ((v7 - 106) < 3)
    {
LABEL_2:
      uint64_t v8 = *(void *)(a2[2] + 8) + 29904;
      unint64_t v9 = (unsigned __int8 *)a2[4];
      v29[0] = v9;
      if (v9) {
        llvm::MetadataTracking::track((uint64_t)v29, v9, 2);
      }
      MachineInstr = llvm::MachineFunction::CreateMachineInstr(v6, v8, v29, 0);
      if (v29[0]) {
        llvm::MetadataTracking::untrack((uint64_t)v29, v29[0]);
      }
      unint64_t v11 = (unint64_t *)a2[6];
      uint64_t v12 = *(void *)(a2[5] + 40);
      *((void *)MachineInstr + 3) = v12;
      uint64_t v13 = *(void *)(v12 + 32);
      uint64_t v14 = *((unsigned int *)MachineInstr + 10);
      if (v14)
      {
        uint64_t v22 = *((void *)MachineInstr + 4);
        uint64_t v23 = *(void *)(v13 + 40);
        uint64_t v24 = 32 * v14;
        do
        {
          if (!*(unsigned char *)v22)
          {
            uint64_t v25 = *(unsigned int *)(v22 + 4);
            if ((int)v25 >= 0) {
              uint64_t v26 = (uint64_t *)(*(void *)(v23 + 272) + 8 * v25);
            }
            else {
              uint64_t v26 = (uint64_t *)(*(void *)(v23 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8);
            }
            uint64_t v27 = *v26;
            if (*v26)
            {
              uint64_t v28 = *(void *)(v27 + 16);
              *(void *)(v27 + 16) = v22;
              *(void *)(v22 + 16) = v28;
              if (*(unsigned char *)(v22 + 3))
              {
                *(void *)(v22 + 24) = v27;
              }
              else
              {
                *(void *)(v22 + 24) = 0;
                uint64_t v26 = (uint64_t *)(v28 + 24);
              }
            }
            else
            {
              *(void *)(v22 + 16) = v22;
              *(void *)(v22 + 24) = 0;
            }
            *uint64_t v26 = v22;
          }
          v22 += 32;
          v24 -= 32;
        }
        while (v24);
      }
      uint64_t v15 = *(void *)(v13 + 728);
      if (v15) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v15 + 24))(v15, MachineInstr);
      }
      unint64_t v16 = *v11 & 0xFFFFFFFFFFFFFFF8;
      *(void *)MachineInstr = v16 | *(void *)MachineInstr & 7;
      *((void *)MachineInstr + 1) = v11;
      *(void *)(v16 + 8) = MachineInstr;
      unint64_t *v11 = *v11 & 7 | (unint64_t)MachineInstr;
      uint64_t v17 = a2[7];
      if (v17) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v17 + 24))(v17, MachineInstr);
      }
      uint64_t v18 = 1;
      LODWORD(v29[0]) = 1;
      v29[1] = 0;
      v29[2] = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v6, (const llvm::MachineOperand *)v29);
      return v18;
    }
    if (v7 != 255)
    {
LABEL_16:
      uint64_t v20 = (llvm::raw_ostream *)llvm::errs(a1);
      sub_1CB8E509C(v20, "Unsupported calling convention\n");
      return 0;
    }
  }

  return sub_1CBAD98B8((uint64_t)a1, a2, a3, a4, a5);
}

uint64_t sub_1CBADABEC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  v88[152] = *MEMORY[0x1E4F143B8];
  if (!a5) {
    return 1;
  }
  uint64_t v12 = a2[1];
  uint64_t v57 = a2[5];
  uint64_t v13 = *(void *)(a3 + 40);
  uint64_t v63 = *(void *)(v12 + 40);
  if (*(void *)(v12 + 48))
  {
    uint64_t v55 = *(void *)(v12 + 48);
  }
  else
  {
    uint64_t v55 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v12 + 8) + 216))(*(void *)(v12 + 8), v12 + 128, v12);
    *(void *)(v12 + 48) = v55;
  }
  uint64_t v86 = v88;
  uint64_t v87 = 0x800000000;
  uint64_t v14 = sub_1CB923B44((llvm::Function *)a3);
  char v60 = v15;
  uint64_t v62 = a1;
  if ((uint64_t *)v14 != v15)
  {
    unint64_t v16 = (uint64_t *)v14;
    unsigned int v17 = 0;
    uint64_t v61 = (llvm::DataLayout *)(v13 + 272);
    uint64_t v58 = (void *)(v63 + 424);
    uint64_t v59 = a4;
    do
    {
      uint64_t v18 = (llvm *)*v16;
      if (sub_1CBADB3B8(*v16)) {
        *(unsigned char *)(v55 + 560) = 1;
      }
      uint64_t v19 = (uint64_t *)(a4 + 16 * v17);
      uint64_t v20 = (unint64_t *)(v19 + 1);
      sub_1CB925510((uint64_t)&v78, (unsigned char *)*v19, v19[1], (uint64_t)v18, v17++, 0, 0, 1, 0);
      sub_1CC6E73A8(a1, (llvm::Type **)&v78, v17, v61, a3);
      unint64_t v71 = 0;
      if (v19[1] == 1)
      {
        int IncompleteVirtualRegister = *(_DWORD *)*v19;
        if (IncompleteVirtualRegister < 0 && (IncompleteVirtualRegister & 0x7FFFFFFFu) < *(_DWORD *)(v63 + 432)) {
          unint64_t v23 = *(void *)(*v58 + 8 * (IncompleteVirtualRegister & 0x7FFFFFFF));
        }
        else {
          unint64_t v23 = 0;
        }
        unint64_t v71 = v23;
      }
      else
      {
        unint64_t LLTForType = llvm::getLLTForType(v18, v61, v21);
        unint64_t v71 = LLTForType;
        int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v63, "", 0);
        unint64_t v44 = IncompleteVirtualRegister & 0x7FFFFFFF;
        *(void *)(*(void *)(v63 + 24) + 16 * v44) = 4;
        unint64_t v45 = *(unsigned int *)(v63 + 432);
        if (v44 >= v45)
        {
          unint64_t v46 = v44 + 1;
          uint64_t v47 = *(void *)(v63 + 440);
          if (v44 >= *(unsigned int *)(v63 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v48 = *(_DWORD *)(v63 + 432);
          if (v46 != v45)
          {
            uint64_t v49 = (void *)(*v58 + 8 * *(unsigned int *)(v63 + 432));
            uint64_t v50 = ~v44 + v45;
            do
              *v49++ = v47;
            while (!__CFADD__(v50++, 1));
            int v48 = *(_DWORD *)(v63 + 432);
          }
          *(_DWORD *)(v63 + 432) = v48 + v46 - v45;
        }
        *(void *)(*(void *)(v63 + 424) + 8 * v44) = LLTForType;
        uint64_t v52 = *(void *)(v63 + 8);
        if (v52) {
          (*(void (**)(uint64_t))(*(void *)v52 + 24))(v52);
        }
      }
      int v70 = IncompleteVirtualRegister;
      char v69 = 0;
      uint64_t v24 = (*(unsigned __int16 *)(a3 + 18) >> 4) & 0x3FF;
      uint64_t v25 = (void **)operator new(0x30uLL);
      char *v25 = &unk_1F25F6700;
      v25[1] = &v69;
      v25[2] = &v70;
      v25[3] = (void *)v63;
      v25[4] = &v71;
      v25[5] = a2;
      uint64_t v75 = v25;
      sub_1CBAD9FE0(*(void *)(v62 + 8), (int *)&v78, (uint64_t)&v86, v61, v63, v24, (uint64_t)&v72);
      (*((void (**)(void **))*v25 + 5))(v25);
      if (v70 != IncompleteVirtualRegister)
      {
        LODWORD(v64) = IncompleteVirtualRegister;
        LODWORD(v65) = 1;
        LODWORD(v72) = v70;
        LODWORD(v74) = 0;
        (*(void (**)(void *, uint64_t, void **, uint64_t, void (***)(void **), uint64_t, void))(*a2 + 32))(a2, 19, &v64, 1, &v72, 1, 0);
      }
      a1 = v62;
      if (*v20 >= 2) {
        sub_1CC6E7650(v62, *v19, *v20, IncompleteVirtualRegister, (uint64_t)v18, (uint64_t)a2);
      }
      a4 = v59;
      if (v84 != &v85) {
        free(v84);
      }
      if (v82 != &v83) {
        free(v82);
      }
      if (v79 != &v81) {
        free(v79);
      }
      v16 += 5;
    }
    while (v16 != v60);
  }
  uint64_t v26 = a2[6];
  if (v57 + 48 != (*(void *)(v57 + 48) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v53 = *(void *)(v57 + 56);
    a2[5] = *(void *)(v53 + 24);
    a2[6] = v53;
  }
  unsigned int v78 = &v80;
  uint64_t v79 = (void *)0x1000000000;
  if (v87)
  {
    uint64_t v27 = (char *)v86;
    uint64_t v28 = 152 * v87;
    uint64_t v29 = (char *)v86;
    do
    {
      uint64_t v72 = (void (**)(void **))&unk_1F25F6748;
      uint64_t v73 = a2;
      uint64_t v74 = v27;
      uint64_t v75 = (void **)&v72;
      sub_1CBADA404((unint64_t)v29, (uint64_t)&v78, v63, (uint64_t)&v72);
      if (v75 == (void **)&v72)
      {
        v72[4]((void **)&v72);
      }
      else if (v75)
      {
        (*((void (**)(void))*v75 + 5))();
      }
      v29 += 152;
      v27 += 152;
      v28 -= 152;
    }
    while (v28);
  }
  if (v57 + 48 != (*(void *)(v57 + 48) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v30 = *(void *)(v57 + 56);
    a2[5] = *(void *)(v30 + 24);
    a2[6] = v30;
  }
  int v66 = sub_1CBAD9144((*(unsigned __int16 *)(a3 + 18) >> 4) & 0x3FF);
  uint64_t v67 = 0;
  char v68 = 1;
  uint64_t v64 = &unk_1F25EECB8;
  int v65 = v66;
  uint64_t v73 = a2;
  uint64_t v74 = (char *)v63;
  LOBYTE(v75) = 1;
  uint64_t v72 = (void (**)(void **))&unk_1F25F6570;
  v76[0] = v77;
  v76[1] = (void *)0x800000000;
  uint64_t v6 = sub_1CC6E7788(v62, &v72, (uint64_t)&v64, (uint64_t *)&v78, a2, (*(unsigned __int16 *)(a3 + 18) >> 4) & 0x3FF, *(_DWORD *)(*(void *)(a3 + 24) + 8) > 0xFFu, v31, 0, 0);
  if (v6)
  {
    a2[5] = v57;
    a2[6] = v26;
    if ((a6 & 1) == 0) {
      *(_DWORD *)(v55 + 488) = 4 * sub_1CBAD8AE0((unsigned int *)v76);
    }
  }
  uint64_t v72 = (void (**)(void **))&unk_1F25F6570;
  if (v76[0] != v77) {
    free(v76[0]);
  }
  unint64_t v32 = (char *)v78;
  if (v79)
  {
    uint64_t v33 = 152 * v79;
    do
    {
      int v34 = &v32[v33];
      uint64_t v35 = *(char **)&v32[v33 - 40];
      if (&v32[v33 - 24] != v35) {
        free(v35);
      }
      uint64_t v36 = (char *)*((void *)v34 - 9);
      if (v34 - 56 != v36) {
        free(v36);
      }
      uint64_t v37 = *(char **)&v32[v33 - 144];
      if (&v32[v33 - 128] != v37) {
        free(v37);
      }
      v33 -= 152;
    }
    while (v33);
    unint64_t v32 = (char *)v78;
  }
  if (v32 != (char *)&v80) {
    free(v32);
  }
  uint64_t v38 = (char *)v86;
  if (v87)
  {
    uint64_t v39 = 152 * v87;
    do
    {
      uint64_t v40 = &v38[v39];
      unsigned int v41 = *(char **)&v38[v39 - 40];
      if (&v38[v39 - 24] != v41) {
        free(v41);
      }
      uint64_t v42 = (char *)*((void *)v40 - 9);
      if (v40 - 56 != v42) {
        free(v42);
      }
      uint64_t v43 = *(char **)&v38[v39 - 144];
      if (&v38[v39 - 128] != v43) {
        free(v43);
      }
      v39 -= 152;
    }
    while (v39);
    uint64_t v38 = (char *)v86;
  }
  if (v38 != (char *)v88) {
    free(v38);
  }
  return v6;
}

uint64_t sub_1CBADB3B8(uint64_t a1)
{
  while (1)
  {
    unsigned int v2 = *(_DWORD *)(a1 + 8);
    if (a1 && v2 == 16)
    {
      uint64_t v3 = *(unsigned int *)(a1 + 12);
      if (v3)
      {
        int v4 = *(void **)(a1 + 16);
        uint64_t v5 = 8 * v3;
        while ((sub_1CBADB3B8(*v4) & 1) == 0)
        {
          ++v4;
          v5 -= 8;
          if (!v5) {
            goto LABEL_7;
          }
        }
        return 1;
      }
      if ((v2 & 0xFE) != 0x12) {
        return 0;
      }
      goto LABEL_15;
    }
LABEL_7:
    if (v2 == 17) {
      goto LABEL_13;
    }
    if ((v2 & 0xFE) != 0x12) {
      break;
    }
LABEL_15:
    uint64_t v6 = (uint64_t *)(a1 + 24);
LABEL_16:
    a1 = *v6;
  }
  if (v2 != 15) {
    return 0;
  }
  if (v2 < 0x100) {
    return 1;
  }
  if (!a1 || *(void *)(a1 + 24))
  {
LABEL_13:
    uint64_t v6 = *(uint64_t **)(a1 + 16);
    goto LABEL_16;
  }
  return 0;
}

void *sub_1CBADB480(void *a1)
{
  *a1 = &unk_1F25F6570;
  unsigned int v2 = (void *)a1[4];
  if (v2 != a1 + 6) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CBADB4D4(llvm *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5 = (*(unsigned __int16 *)(a3 + 18) >> 4) & 0x3FF;
  if (v5 <= 0x63)
  {
    if (v5) {
      BOOL v9 = v5 == 8;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  if (v5 - 100 > 8)
  {
LABEL_17:
    if (v5 != 255)
    {
LABEL_18:
      uint64_t v10 = (llvm::raw_ostream *)llvm::errs(a1);
      sub_1CB8E509C(v10, "Unsupported calling convention\n");
      return 0;
    }
LABEL_16:
    char v7 = 1;
    goto LABEL_5;
  }
  int v6 = 1 << (v5 - 100);
  if ((v6 & 0x45) == 0)
  {
    if ((v6 & 0x19A) != 0) {
      return 1;
    }
    goto LABEL_17;
  }
  char v7 = 0;
LABEL_5:

  return sub_1CBADABEC((uint64_t)a1, a2, a3, a4, a5, v7);
}

uint64_t sub_1CBADB578()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  unsigned int v2 = v1;
  int v4 = v3;
  uint64_t v5 = v0;
  v239[152] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = v3[1];
  uint64_t v7 = *(void *)v6;
  uint64_t v8 = *(void *)(v6 + 56);
  *(unsigned char *)(v8 + 62) = 1;
  uint64_t v9 = *(void *)(v6 + 40);
  int v191 = (uint64_t **)v7;
  uint64_t v10 = (llvm::DataLayout *)(*(void *)(v7 + 40) + 272);
  unint64_t v11 = v1 + 2;
  if (!*((unsigned char *)v1 + 8))
  {
    uint64_t v119 = v1[3];
    uint64_t v120 = (uint64_t *)((v119 & 0x80000000) != 0
                     ? *(void *)(v9 + 24) + 16 * (v119 & 0x7FFFFFFF) + 8
                     : *(void *)(v9 + 272) + 8 * v119);
    uint64_t v121 = *v120;
    if (v121)
    {
      if (*(unsigned char *)(v121 + 3) & 1) != 0 || (uint64_t v121 = *(void *)(v121 + 24)) != 0 && (*(unsigned char *)(v121 + 3))
      {
        uint64_t v122 = *(void *)(v121 + 8);
        if (v122)
        {
          if (**(_WORD **)(v122 + 16) == 19 && *(_DWORD *)(v122 + 40) == 2)
          {
            unsigned int v123 = *(_DWORD *)(*(void *)(v122 + 32) + 36);
            if ((v123 & 0x80000000) != 0)
            {
              uint64_t VRegDef = llvm::MachineRegisterInfo::getVRegDef(v9, v123);
              if (**(_WORD **)(VRegDef + 16) == 71)
              {
                uint64_t v125 = *(void *)(VRegDef + 32);
                long long v126 = *(_OWORD *)(v125 + 48);
                _OWORD *v11 = *(_OWORD *)(v125 + 32);
                v11[1] = v126;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v237 = v239;
  uint64_t v238 = 0x800000000;
  unsigned int v12 = v2[50];
  uint64_t v187 = v8;
  uint64_t v180 = v10;
  if (v12)
  {
    uint64_t v188 = v6;
    uint64_t v13 = (int *)*((void *)v2 + 24);
    uint64_t v14 = 152 * v12;
    do
    {
      uint64_t v15 = *v2;
      v236[1] = 0;
      sub_1CBAD9FE0(*(void *)(v5 + 8), v13, (uint64_t)&v237, v10, v9, v15, (uint64_t)&v234);
      v13 += 38;
      v14 -= 152;
    }
    while (v14);
    uint64_t v16 = v5;
    unsigned int v17 = v11;
    uint64_t v18 = (char *)v237;
    uint64_t v234 = v236;
    uint64_t v235 = 0x1000000000;
    if (v238)
    {
      uint64_t v19 = 152 * v238;
      uint64_t v20 = (char *)v237;
      do
      {
        uint64_t v209 = &unk_1F25F6790;
        uint64_t v210 = (uint64_t)v4;
        unsigned int v211 = v18;
        uint64_t v212 = &v209;
        sub_1CBADA404((unint64_t)v20, (uint64_t)&v234, v9, (uint64_t)&v209);
        if (v212 == &v209)
        {
          (*((void (**)(void **))v209 + 4))(&v209);
        }
        else if (v212)
        {
          (*((void (**)(void))*v212 + 5))();
        }
        v20 += 152;
        v18 += 152;
        v19 -= 152;
      }
      while (v19);
    }
    unint64_t v11 = v17;
    uint64_t v5 = v16;
    uint64_t v6 = v188;
  }
  else
  {
    uint64_t v234 = v236;
    uint64_t v235 = 0x1000000000;
  }
  uint64_t v21 = (*(uint64_t (**)(void, uint64_t **))(**(void **)(v6 + 8) + 16))(*(void *)(v6 + 8), v191);
  uint64_t v185 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 112))(v21);
  unsigned int v189 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v21 + 176))(v21);
  uint64_t v22 = sub_1CBAD9144(*v2);
  unint64_t v23 = (llvm::MachineFunction *)v4[1];
  uint64_t v24 = *(void *)(v4[2] + 8) + 12336;
  uint64_t v25 = (void *)v4[4];
  uint64_t v209 = v25;
  if (v25) {
    llvm::MetadataTracking::track((uint64_t)&v209, (unsigned __int8 *)v25, 2);
  }
  MachineInstr = llvm::MachineFunction::CreateMachineInstr(v23, v24, (unsigned __int8 **)&v209, 0);
  if (v209) {
    llvm::MetadataTracking::untrack((uint64_t)&v209, (unsigned __int8 *)v209);
  }
  uint64_t v27 = (unint64_t *)v4[6];
  uint64_t v28 = *(void *)(v4[5] + 40);
  *((void *)MachineInstr + 3) = v28;
  uint64_t v29 = *(void *)(v28 + 32);
  uint64_t v30 = *((unsigned int *)MachineInstr + 10);
  if (v30)
  {
    uint64_t v137 = *((void *)MachineInstr + 4);
    uint64_t v138 = *(void *)(v29 + 40);
    uint64_t v139 = 32 * v30;
    do
    {
      if (!*(unsigned char *)v137)
      {
        uint64_t v140 = *(unsigned int *)(v137 + 4);
        if ((int)v140 >= 0) {
          unsigned int v141 = (uint64_t *)(*(void *)(v138 + 272) + 8 * v140);
        }
        else {
          unsigned int v141 = (uint64_t *)(*(void *)(v138 + 24) + 16 * (v140 & 0x7FFFFFFF) + 8);
        }
        uint64_t v142 = *v141;
        if (*v141)
        {
          uint64_t v143 = *(void *)(v142 + 16);
          *(void *)(v142 + 16) = v137;
          *(void *)(v137 + 16) = v143;
          if (*(unsigned char *)(v137 + 3))
          {
            *(void *)(v137 + 24) = v142;
          }
          else
          {
            *(void *)(v137 + 24) = 0;
            unsigned int v141 = (uint64_t *)(v143 + 24);
          }
        }
        else
        {
          *(void *)(v137 + 16) = v137;
          *(void *)(v137 + 24) = 0;
        }
        *unsigned int v141 = v137;
      }
      v137 += 32;
      v139 -= 32;
    }
    while (v139);
  }
  uint64_t v31 = *(void *)(v29 + 728);
  if (v31) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v31 + 24))(v31, MachineInstr);
  }
  unint64_t v32 = *v27 & 0xFFFFFFFFFFFFFFF8;
  *(void *)MachineInstr = v32 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = v27;
  *(void *)(v32 + 8) = MachineInstr;
  unint64_t *v27 = *v27 & 7 | (unint64_t)MachineInstr;
  uint64_t v33 = v4[7];
  if (v33) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v33 + 24))(v33, MachineInstr);
  }
  uint64_t v183 = v22;
  unsigned int v184 = MachineInstr;
  uint64_t v186 = v23;
  int v34 = *(unsigned __int8 *)v11;
  if (v34 == 10)
  {
    uint64_t v35 = *((void *)v2 + 3);
    if (*(unsigned char *)(v35 + 16)) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = (uint64_t **)*((void *)v2 + 3);
    }
    if (v36) {
      BOOL v37 = v191 == v36;
    }
    else {
      BOOL v37 = 0;
    }
    char v38 = v37;
    uint64_t v39 = *(llvm::Module **)(v35 + 40);
    uint64_t v209 = &v211;
    uint64_t v210 = 0x800000000;
    llvm::Module::getModuleFlagsMetadata(v39, (uint64_t)&v209);
    if (v210)
    {
      uint64_t v40 = (uint64_t *)((char *)v209 + 16);
      uint64_t v41 = 24 * v210;
      while (1)
      {
        uint64_t v42 = *(void *)(*(v40 - 1) + 8);
        if (*(void *)v42 == 9)
        {
          uint64_t v160 = *(void *)(v42 + 24);
          uint64_t v161 = *(unsigned __int8 *)(v42 + 32);
          if (*(void *)"PIC Level" == v160 && aPicLevel[8] == v161) {
            break;
          }
        }
        v40 += 3;
        v41 -= 24;
        if (!v41) {
          goto LABEL_34;
        }
      }
      uint64_t v43 = *v40;
    }
    else
    {
LABEL_34:
      uint64_t v43 = 0;
    }
    if (v209 != &v211) {
      free(v209);
    }
    if (v43)
    {
      uint64_t v158 = *(void *)(v43 + 128);
      unsigned __int16 v159 = (void *)(v158 + 24);
      if (*(_DWORD *)(v158 + 32) >= 0x41u) {
        unsigned __int16 v159 = (void *)*v159;
      }
      int v44 = *(_DWORD *)v159;
    }
    else
    {
      int v44 = 0;
    }
    BOOL v45 = v44 != 0;
  }
  else
  {
    BOOL v45 = 0;
    char v38 = 0;
  }
  unint64_t v46 = *(unsigned char **)(v6 + 48);
  if (!v46)
  {
    unint64_t v46 = (unsigned char *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 8) + 216))(*(void *)(v6 + 8), v6 + 128, v6);
    *(void *)(v6 + 48) = v46;
  }
  v46[12] = v34 != 0;
  uint64_t v47 = 12480;
  if (!v34) {
    uint64_t v47 = 12528;
  }
  v46[496] = v34 == 0;
  v46[497] = v38;
  v46[498] = v45;
  int v48 = (llvm::MachineFunction *)v4[1];
  uint64_t v49 = *(void *)(v4[2] + 8) + v47;
  uint64_t v50 = (void *)v4[4];
  uint64_t v209 = v50;
  if (v50) {
    llvm::MetadataTracking::track((uint64_t)&v209, (unsigned __int8 *)v50, 2);
  }
  uint64_t v51 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v48, v49, (unsigned __int8 **)&v209, 0);
  if (v209) {
    llvm::MetadataTracking::untrack((uint64_t)&v209, (unsigned __int8 *)v209);
  }
  long long v52 = v11[1];
  uint64_t v181 = v11;
  v200[0] = *v11;
  v200[1] = v52;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v48, (const llvm::MachineOperand *)v200);
  uint64_t v53 = (*(uint64_t (**)(void *, uint64_t, void))(*v189 + 40))(v189, v6, *v2);
  LODWORD(v209) = 12;
  uint64_t v210 = 0;
  unsigned int v211 = (char *)v53;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v48, (const llvm::MachineOperand *)&v209);
  if (!v46[560])
  {
    unsigned int v54 = v2[50];
    if (v54)
    {
      uint64_t v55 = (uint64_t *)*((void *)v2 + 24);
      uint64_t v56 = 152 * v54;
      while (!sub_1CBADB3B8(*v55))
      {
        v55 += 19;
        v56 -= 152;
        if (!v56) {
          goto LABEL_53;
        }
      }
      v46[560] = 1;
    }
  }
LABEL_53:
  v232[0] = v233;
  v232[1] = (void *)0x1000000000;
  llvm::CCState::CCState((uint64_t)v223, *v2, *((unsigned char *)v2 + 5123), v6, (uint64_t)v232, **v191);
  char v199 = 0;
  v197[1] = v183;
  v197[2] = v183;
  uint64_t v198 = 0;
  v197[0] = &unk_1F25EEC88;
  if (!sub_1CC6E7904(v5, (uint64_t)v197, (uint64_t *)&v234))
  {
    uint64_t v85 = 0;
    goto LABEL_80;
  }
  v216[1] = v4;
  v216[2] = v9;
  char v217 = 0;
  int v218 = v48;
  uint64_t v219 = v51;
  uint64_t v220 = v222;
  uint64_t v221 = 0x800000000;
  v216[0] = &unk_1F25F65C8;
  if (sub_1CC6E7C14(v5, v216, (uint64_t)&v234, (uint64_t)v223, (uint64_t *)v232, v4, 0, 0))
  {
    uint64_t v57 = (char *)*((void *)v2 + 636);
    if (v57)
    {
      LODWORD(v209) = 14;
      uint64_t v210 = 0;
      unsigned int v211 = v57;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v48, (const llvm::MachineOperand *)&v209);
    }
    uint64_t v58 = (uint64_t *)v4[6];
    uint64_t v59 = *(void *)(v4[5] + 40);
    *(void *)(v51 + 24) = v59;
    uint64_t v60 = *(void *)(v59 + 32);
    uint64_t v61 = *(unsigned int *)(v51 + 40);
    if (v61)
    {
      uint64_t v144 = *(void *)(v51 + 32);
      uint64_t v145 = *(void *)(v60 + 40);
      uint64_t v146 = 32 * v61;
      do
      {
        if (!*(unsigned char *)v144)
        {
          uint64_t v147 = *(unsigned int *)(v144 + 4);
          if ((int)v147 >= 0) {
            int v148 = (uint64_t *)(*(void *)(v145 + 272) + 8 * v147);
          }
          else {
            int v148 = (uint64_t *)(*(void *)(v145 + 24) + 16 * (v147 & 0x7FFFFFFF) + 8);
          }
          uint64_t v149 = *v148;
          if (*v148)
          {
            uint64_t v150 = *(void *)(v149 + 16);
            *(void *)(v149 + 16) = v144;
            *(void *)(v144 + 16) = v150;
            if (*(unsigned char *)(v144 + 3))
            {
              *(void *)(v144 + 24) = v149;
            }
            else
            {
              *(void *)(v144 + 24) = 0;
              int v148 = (uint64_t *)(v150 + 24);
            }
          }
          else
          {
            *(void *)(v144 + 16) = v144;
            *(void *)(v144 + 24) = 0;
          }
          uint64_t *v148 = v144;
        }
        v144 += 32;
        v146 -= 32;
      }
      while (v146);
    }
    uint64_t v62 = *(void *)(v60 + 728);
    if (v62) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v62 + 24))(v62, v51);
    }
    unint64_t v63 = *v58 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v51 = v63 | *(void *)v51 & 7;
    *(void *)(v51 + 8) = v58;
    *(void *)(v63 + 8) = v51;
    uint64_t *v58 = *v58 & 7 | v51;
    uint64_t v64 = v4[7];
    if (v64) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v64 + 24))(v64, v51);
    }
    if (!*v181)
    {
      uint64_t v65 = *(void *)(v51 + 32);
      uint64_t v66 = (*(uint64_t (**)(void))(**(void **)(v6 + 16) + 104))(*(void *)(v6 + 16));
      uint64_t v67 = (*(uint64_t (**)(void))(**(void **)(v6 + 16) + 184))(*(void *)(v6 + 16));
      unsigned int v68 = sub_1CC73B398(v6, v189, (void *)v9, v66, v67, v51, *(void *)(v51 + 16), (uint64_t)v200, 0);
      llvm::MachineOperand::setReg(v65, v68);
    }
    unsigned int v190 = v198;
    char v69 = sub_1CBAD8B5C(*v2);
    if (!v2[32])
    {
      int v70 = v190;
LABEL_66:
      unsigned int v71 = *(unsigned __int8 *)(v187 + 60);
      unsigned __int8 v72 = 63 - __clz((1 << *(unsigned char *)(v185 + 12)));
      if (v71 <= v72) {
        LOBYTE(v71) = v72;
      }
      LODWORD(v209) = 1;
      uint64_t v73 = (char *)(-(int)(1 << v71) & (v70 + (1 << v71) - 1));
      uint64_t v210 = 0;
      unsigned int v211 = v73;
      llvm::MachineInstr::addOperand(v184, v186, (const llvm::MachineOperand *)&v209);
      LODWORD(v209) = 1;
      unsigned int v211 = 0;
      uint64_t v210 = 0;
      llvm::MachineInstr::addOperand(v184, v186, (const llvm::MachineOperand *)&v209);
      uint64_t v74 = (llvm::MachineFunction *)v4[1];
      uint64_t v75 = *(void *)(v4[2] + 8) + 12288;
      int v76 = (void *)v4[4];
      uint64_t v209 = v76;
      if (v76) {
        llvm::MetadataTracking::track((uint64_t)&v209, (unsigned __int8 *)v76, 2);
      }
      uint64_t v77 = llvm::MachineFunction::CreateMachineInstr(v74, v75, (unsigned __int8 **)&v209, 0);
      if (v209) {
        llvm::MetadataTracking::untrack((uint64_t)&v209, (unsigned __int8 *)v209);
      }
      unsigned int v78 = (unint64_t *)v4[6];
      uint64_t v79 = *(void *)(v4[5] + 40);
      *((void *)v77 + 3) = v79;
      uint64_t v80 = *(void *)(v79 + 32);
      uint64_t v81 = *((unsigned int *)v77 + 10);
      if (v81)
      {
        uint64_t v151 = *((void *)v77 + 4);
        uint64_t v152 = *(void *)(v80 + 40);
        uint64_t v153 = 32 * v81;
        do
        {
          if (!*(unsigned char *)v151)
          {
            uint64_t v154 = *(unsigned int *)(v151 + 4);
            if ((int)v154 >= 0) {
              uint64_t v155 = (uint64_t *)(*(void *)(v152 + 272) + 8 * v154);
            }
            else {
              uint64_t v155 = (uint64_t *)(*(void *)(v152 + 24) + 16 * (v154 & 0x7FFFFFFF) + 8);
            }
            uint64_t v156 = *v155;
            if (*v155)
            {
              uint64_t v157 = *(void *)(v156 + 16);
              *(void *)(v156 + 16) = v151;
              *(void *)(v151 + 16) = v157;
              if (*(unsigned char *)(v151 + 3))
              {
                *(void *)(v151 + 24) = v156;
              }
              else
              {
                *(void *)(v151 + 24) = 0;
                uint64_t v155 = (uint64_t *)(v157 + 24);
              }
            }
            else
            {
              *(void *)(v151 + 16) = v151;
              *(void *)(v151 + 24) = 0;
            }
            uint64_t *v155 = v151;
          }
          v151 += 32;
          v153 -= 32;
        }
        while (v153);
      }
      uint64_t v82 = *(void *)(v80 + 728);
      if (v82) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v82 + 24))(v82, v77);
      }
      unint64_t v83 = *v78 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v77 = v83 | *(void *)v77 & 7;
      *((void *)v77 + 1) = v78;
      *(void *)(v83 + 8) = v77;
      *unsigned int v78 = *v78 & 7 | (unint64_t)v77;
      uint64_t v84 = v4[7];
      if (v84) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v84 + 24))(v84, v77);
      }
      uint64_t v85 = 1;
      LODWORD(v209) = 1;
      uint64_t v210 = 0;
      unsigned int v211 = v73;
      llvm::MachineInstr::addOperand(v77, v74, (const llvm::MachineOperand *)&v209);
      LODWORD(v209) = 1;
      unsigned int v211 = 0;
      uint64_t v210 = 0;
      llvm::MachineInstr::addOperand(v77, v74, (const llvm::MachineOperand *)&v209);
      goto LABEL_78;
    }
    std::string v99 = v69;
    uint64_t v100 = (int *)(v2 + 10);
    if (v238)
    {
      unsigned int v101 = (char *)v237;
      uint64_t v102 = 152 * v238;
      do
      {
        uint64_t v103 = &v101[v102];
        uint64_t v104 = *(char **)&v101[v102 - 40];
        if (&v101[v102 - 24] != v104)
        {
          uint64_t v182 = v100;
          free(v104);
          uint64_t v100 = v182;
        }
        unsigned int v105 = (char *)*((void *)v103 - 9);
        if (v103 - 56 != v105)
        {
          unint64_t v177 = v100;
          free(v105);
          uint64_t v100 = v177;
        }
        unint64_t v106 = *(char **)&v101[v102 - 144];
        if (&v101[v102 - 128] != v106)
        {
          uint64_t v178 = v100;
          free(v106);
          uint64_t v100 = v178;
        }
        v102 -= 152;
      }
      while (v102);
    }
    LODWORD(v238) = 0;
    unint64_t v213 = v215;
    uint64_t v214 = 0x800000000;
    uint64_t v107 = *v2;
    uint64_t v209 = &unk_1F25F67D8;
    uint64_t v210 = (uint64_t)&v213;
    uint64_t v212 = &v209;
    sub_1CBAD9FE0(*(void *)(v5 + 8), v100, (uint64_t)&v237, v180, v9, v107, (uint64_t)&v209);
    if (v212 == &v209)
    {
      (*((void (**)(void **))v209 + 4))(&v209);
    }
    else if (v212)
    {
      (*((void (**)(void))*v212 + 5))();
    }
    uint64_t v209 = &v211;
    uint64_t v210 = 0x1000000000;
    uint64_t v206 = v208;
    uint64_t v207 = 0x400000000;
    if (v238)
    {
      unint64_t v109 = (char *)v237;
      uint64_t v110 = 152 * v238;
      do
      {
        int v111 = operator new(0x20uLL);
        void *v111 = &unk_1F25F6820;
        v111[1] = v4;
        v111[2] = v109;
        v111[3] = &v206;
        int v202 = v111;
        sub_1CBADA404((unint64_t)v109, (uint64_t)&v209, v9, (uint64_t)v201);
        (*(void (**)(void *))(*v111 + 40))(v111);
        v109 += 152;
        v110 -= 152;
      }
      while (v110);
    }
    v194[2] = v99;
    unint64_t v195 = 0;
    char v196 = 0;
    v194[0] = &unk_1F25EEC88;
    v194[1] = v99;
    v201[1] = v4;
    v201[2] = v9;
    LOBYTE(v202) = 1;
    int v203 = v205;
    uint64_t v204 = 0x800000000;
    v201[0] = &unk_1F25F6618;
    v205[12] = v48;
    v205[13] = v51;
    int v112 = sub_1CC6E7788(v5, v201, (uint64_t)v194, (uint64_t *)&v209, v4, *v2, *((unsigned char *)v2 + 5123), v108, 0, 0);
    if (v112)
    {
      if (v207)
      {
        int v127 = (char *)v206;
        unsigned int v128 = (char *)v206 + 16 * v207;
        unint64_t v179 = v128;
        do
        {
          uint64_t v129 = *((void *)v127 + 1);
          std::string v130 = (uint64_t *)v4[6];
          uint64_t v131 = *(void *)(v4[5] + 40);
          *(void *)(v129 + 24) = v131;
          uint64_t v132 = *(void *)(v131 + 32);
          uint64_t v133 = *(unsigned int *)(v129 + 40);
          if (v133)
          {
            uint64_t v170 = *(void *)(v129 + 32);
            uint64_t v171 = *(void *)(v132 + 40);
            uint64_t v172 = 32 * v133;
            do
            {
              if (!*(unsigned char *)v170)
              {
                uint64_t v173 = *(unsigned int *)(v170 + 4);
                if ((int)v173 >= 0) {
                  uint64_t v174 = (uint64_t *)(*(void *)(v171 + 272) + 8 * v173);
                }
                else {
                  uint64_t v174 = (uint64_t *)(*(void *)(v171 + 24) + 16 * (v173 & 0x7FFFFFFF) + 8);
                }
                uint64_t v175 = *v174;
                if (*v174)
                {
                  uint64_t v176 = *(void *)(v175 + 16);
                  *(void *)(v175 + 16) = v170;
                  *(void *)(v170 + 16) = v176;
                  if (*(unsigned char *)(v170 + 3))
                  {
                    *(void *)(v170 + 24) = v175;
                  }
                  else
                  {
                    *(void *)(v170 + 24) = 0;
                    uint64_t v174 = (uint64_t *)(v176 + 24);
                  }
                }
                else
                {
                  *(void *)(v170 + 16) = v170;
                  *(void *)(v170 + 24) = 0;
                }
                uint64_t *v174 = v170;
              }
              v170 += 32;
              v172 -= 32;
            }
            while (v172);
          }
          uint64_t v134 = *(void *)(v132 + 728);
          if (v134)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v134 + 24))(v134, v129);
            unsigned int v128 = v179;
          }
          unint64_t v135 = *v130 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v129 = v135 | *(void *)v129 & 7;
          *(void *)(v129 + 8) = v130;
          *(void *)(v135 + 8) = v129;
          *std::string v130 = *v130 & 7 | v129;
          uint64_t v136 = v4[7];
          if (v136)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v136 + 24))(v136, v129);
            unsigned int v128 = v179;
          }
          v127 += 16;
        }
        while (v127 != v128);
      }
      if (v214)
      {
        uint64_t v163 = 0;
        uint64_t v164 = (char *)v213;
        uint64_t v165 = 4 * v214;
        do
        {
          int v166 = *(_DWORD *)(*((void *)v2 + 15) + v163);
          if (v166 < 0 && (v166 & 0x7FFFFFFFu) < *(_DWORD *)(v9 + 432)) {
            uint64_t v167 = *(void *)(*(void *)(v9 + 424) + 8 * (v166 & 0x7FFFFFFF));
          }
          else {
            uint64_t v167 = 0;
          }
          int v168 = *(_DWORD *)&v164[v163];
          if (v168 < 0 && (v168 & 0x7FFFFFFFu) < *(_DWORD *)(v9 + 432)) {
            uint64_t v169 = *(void *)(*(void *)(v9 + 424) + 8 * (v168 & 0x7FFFFFFF));
          }
          else {
            uint64_t v169 = 0;
          }
          v193[0] = *(_DWORD *)(*((void *)v2 + 15) + v163);
          v193[2] = 1;
          v192[0] = v168;
          v192[4] = 0;
          if (v167 == v169) {
            (*(void (**)(void *, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, void))(*v4 + 32))(v4, 19, v193, 1, v192, 1, 0);
          }
          else {
            sub_1CC7382B0((uint64_t)v4);
          }
          v163 += 4;
        }
        while (v165 != v163);
      }
      if (v195 <= v190) {
        int v70 = v190;
      }
      else {
        int v70 = v195;
      }
    }
    else
    {
      int v70 = v190;
    }
    v201[0] = &unk_1F25F6570;
    if (v203 != v205) {
      free(v203);
    }
    if (v206 != v208) {
      free(v206);
    }
    uint64_t v113 = (char **)v209;
    if (v210)
    {
      uint64_t v114 = 19 * v210;
      do
      {
        uint64_t v115 = (char *)&v113[v114];
        unint64_t v116 = v113[v114 - 5];
        if (&v113[v114 - 3] != (char **)v116) {
          free(v116);
        }
        uint64_t v117 = (char *)*((void *)v115 - 9);
        if (v115 - 56 != v117) {
          free(v117);
        }
        unsigned __int16 v118 = v113[v114 - 18];
        if (&v113[v114 - 16] != (char **)v118) {
          free(v118);
        }
        v114 -= 19;
      }
      while (v114 * 8);
      uint64_t v113 = (char **)v209;
    }
    if (v113 != &v211) {
      free(v113);
    }
    if (v213 != v215) {
      free(v213);
    }
    if (v112) {
      goto LABEL_66;
    }
    uint64_t v85 = 0;
  }
  else
  {
    uint64_t v85 = 0;
  }
LABEL_78:
  v216[0] = &unk_1F25F6520;
  if (v220 != v222) {
    free(v220);
  }
LABEL_80:
  if (v230 != &v231) {
    free(v230);
  }
  if (v228 != &v229) {
    free(v228);
  }
  if (v226 != &v227) {
    free(v226);
  }
  if (v224 != &v225) {
    free(v224);
  }
  if (v232[0] != v233) {
    free(v232[0]);
  }
  uint64_t v86 = (char *)v234;
  if (v235)
  {
    uint64_t v87 = 152 * v235;
    do
    {
      unsigned int v88 = &v86[v87];
      size_t v89 = *(char **)&v86[v87 - 40];
      if (&v86[v87 - 24] != v89) {
        free(v89);
      }
      int v90 = (char *)*((void *)v88 - 9);
      if (v88 - 56 != v90) {
        free(v90);
      }
      unsigned int v91 = *(char **)&v86[v87 - 144];
      if (&v86[v87 - 128] != v91) {
        free(v91);
      }
      v87 -= 152;
    }
    while (v87);
    uint64_t v86 = (char *)v234;
  }
  if (v86 != (char *)v236) {
    free(v86);
  }
  unint64_t v92 = (char *)v237;
  if (v238)
  {
    uint64_t v93 = 152 * v238;
    do
    {
      unint64_t v94 = &v92[v93];
      uint64_t v95 = *(char **)&v92[v93 - 40];
      if (&v92[v93 - 24] != v95) {
        free(v95);
      }
      char v96 = (char *)*((void *)v94 - 9);
      if (v94 - 56 != v96) {
        free(v96);
      }
      int v97 = *(char **)&v92[v93 - 144];
      if (&v92[v93 - 128] != v97) {
        free(v97);
      }
      v93 -= 152;
    }
    while (v93);
    unint64_t v92 = (char *)v237;
  }
  if (v92 != (char *)v239) {
    free(v92);
  }
  return v85;
}

void *sub_1CBADCA38(void *a1)
{
  *a1 = &unk_1F25F6570;
  unsigned int v2 = (void *)a1[4];
  if (v2 != a1 + 6) {
    free(v2);
  }
  return a1;
}

void *sub_1CBADCA8C(void *a1)
{
  *a1 = &unk_1F25F6520;
  unsigned int v2 = (void *)a1[6];
  if (v2 != a1 + 8) {
    free(v2);
  }
  return a1;
}

void sub_1CBADCAE0(void *a1)
{
  *a1 = &unk_1F25F6520;
  unsigned int v2 = (void *)a1[6];
  if (v2 != a1 + 8) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CBADCB54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CB92636C(*(void **)(a1 + 8), *(void *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_1CBADCB6C(void *a1, unsigned int a2, int a3, uint64_t a4, int a5)
{
  uint64_t v14 = a4;
  int v15 = a5;
  uint64_t v8 = (llvm::MachineInstr *)a1[5];
  uint64_t v9 = (llvm::MachineFunction *)a1[4];
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  v16[0] = 0x2000000;
  v16[1] = a3;
  llvm::MachineInstr::addOperand(v8, v9, (const llvm::MachineOperand *)v16);
  int v10 = sub_1CC6EA4B4((uint64_t)a1, a2, (unsigned __int8 *)&v14, 0);
  uint64_t v11 = a1[1];
  v13[0] = a3;
  v13[2] = 1;
  v16[0] = v10;
  LODWORD(v18) = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, void))(*(void *)v11 + 32))(v11, 19, v13, 1, v16, 1, 0);
  return sub_1CB839378((uint64_t)(a1 + 6), v14, v15);
}

llvm::MachineFunction *sub_1CBADCC48(uint64_t a1, unsigned int a2, int a3, unint64_t a4, long long *a5, unsigned __int8 *a6)
{
  unint64_t v34 = a4;
  if ((a6[8] >> 2) - 1 <= 2u)
  {
    LOBYTE(v29) = a6[9];
    uint64_t v11 = sub_1CB87E200((unsigned __int8 *)&v29);
    int v13 = v12;
    if (v11 != sub_1CB8F1DC4(&v34) || v13 != v14) {
      a2 = sub_1CC6EA4B4(a1, a2, a6, 0);
    }
  }
  uint64_t v15 = *(void *)(*(void *)(a1 + 8) + 8);
  long long v32 = *a5;
  uint64_t v33 = *((void *)a5 + 2);
  unint64_t v16 = v34;
  uint64_t v17 = *(llvm::LLVMContext ****)v15;
  uint64_t v18 = (llvm::DataLayout *)(*(void *)(*(void *)v15 + 40) + 272);
  LOBYTE(v29) = a6[9];
  uint64_t v30 = 0;
  llvm::EVT::getTypeForEVT((llvm::EVT *)&v29, **v17);
  char Alignment = llvm::DataLayout::getAlignment(v18, v19, 1);
  *(void *)(v15 + 208) += 80;
  uint64_t v21 = *(void *)(v15 + 128);
  if (((v21 + 7) & 0xFFFFFFFFFFFFFFF8) - v21 + 80 > *(void *)(v15 + 136) - v21)
  {
    unsigned int v25 = *(_DWORD *)(v15 + 152) >> 7;
    if (v25 >= 0x1E) {
      LOBYTE(v25) = 30;
    }
    uint64_t v26 = 4096 << v25;
    unint64_t v22 = (unint64_t)operator new(4096 << v25, (std::align_val_t)8uLL);
    unsigned int v27 = *(_DWORD *)(v15 + 152);
    if (v27 >= *(_DWORD *)(v15 + 156)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v15 + 144) + 8 * v27) = v22;
    ++*(_DWORD *)(v15 + 152);
    *(void *)(v15 + 136) = v22 + v26;
  }
  else
  {
    unint64_t v22 = (v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v15 + 128) = v22 + 80;
  *(_OWORD *)unint64_t v22 = v32;
  *(void *)(v22 + 16) = v33;
  *(void *)(v22 + 24) = v16;
  *(_WORD *)(v22 + 32) = 2;
  *(unsigned char *)(v22 + 34) = Alignment;
  *(_OWORD *)(v22 + 40) = 0u;
  *(_OWORD *)(v22 + 56) = 0u;
  *(void *)(v22 + 72) = 0;
  *(_WORD *)(v22 + 36) = 1;
  unint64_t v23 = *(void **)(a1 + 8);
  unsigned int v29 = a2;
  int v31 = 0;
  v28[0] = a3;
  v28[4] = 0;
  return sub_1CC737D1C(v23, (int *)&v29, v28, (llvm::MachineMemOperand *)v22);
}

void sub_1CBADCE54(void *a1)
{
  *a1 = &unk_1F25F6570;
  unsigned int v2 = (void *)a1[4];
  if (v2 != a1 + 6) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CBADCEC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CB92636C(*(void **)(a1 + 8), *(void *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_1CBADCEE0(void *a1, unsigned int a2, unsigned int a3, uint64_t a4, int a5)
{
  (*(void (**)(void *, void, void))(*a1 + 64))(a1, a3, a2);
  if ((a5 >> 2) - 1 >= 3)
  {
    uint64_t v14 = a1[1];
    LODWORD(v19) = a2;
    int v20 = 1;
    LODWORD(v17[0]) = a3;
    int v18 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void *, uint64_t, void))(*(void *)v14 + 32))(v14, 19, &v19, 1, v17, 1, 0);
  }
  else
  {
    uint64_t v10 = a1[1];
    llvm::LLT::LLT(&v16, BYTE2(a5));
    unint64_t v19 = v16;
    int v20 = 0;
    LODWORD(v17[0]) = a3;
    int v18 = 0;
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void *, uint64_t, void))(*(void *)v10 + 32))(v10, 19, &v19, 1, v17, 1, 0);
    uint64_t v12 = a1[1];
    LODWORD(v19) = a2;
    int v20 = 1;
    v17[0] = v11;
    v17[1] = v13;
    int v18 = 1;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void *, uint64_t, void))(*(void *)v12 + 32))(v12, 119, &v19, 1, v17, 1, 0);
  }
  return sub_1CB839378((uint64_t)(a1 + 4), a4, a5);
}

llvm::MachineFunction *sub_1CBADD088(uint64_t a1, int a2, int a3, unint64_t a4, long long *a5, unsigned __int8 *a6)
{
  uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 8);
  long long v38 = *a5;
  uint64_t v39 = *((void *)a5 + 2);
  unint64_t v40 = a4;
  uint64_t v12 = *(llvm::LLVMContext ****)v11;
  uint64_t v13 = (llvm::DataLayout *)(*(void *)(*(void *)v11 + 40) + 272);
  LOBYTE(v33) = a6[9];
  uint64_t v34 = 0;
  llvm::EVT::getTypeForEVT((llvm::EVT *)&v33, **v12);
  char Alignment = llvm::DataLayout::getAlignment(v13, v14, 1);
  *(void *)(v11 + 208) += 80;
  uint64_t v16 = *(void *)(v11 + 128);
  if (((v16 + 7) & 0xFFFFFFFFFFFFFFF8) - v16 + 80 > *(void *)(v11 + 136) - v16)
  {
    unsigned int v29 = *(_DWORD *)(v11 + 152) >> 7;
    if (v29 >= 0x1E) {
      LOBYTE(v29) = 30;
    }
    uint64_t v30 = 4096 << v29;
    unint64_t v17 = (unint64_t)operator new(4096 << v29, (std::align_val_t)8uLL);
    unsigned int v31 = *(_DWORD *)(v11 + 152);
    if (v31 >= *(_DWORD *)(v11 + 156)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v11 + 144) + 8 * v31) = v17;
    ++*(_DWORD *)(v11 + 152);
    *(void *)(v11 + 136) = v17 + v30;
  }
  else
  {
    unint64_t v17 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v11 + 128) = v17 + 80;
  *(_OWORD *)unint64_t v17 = v38;
  *(void *)(v17 + 16) = v39;
  *(void *)(v17 + 24) = a4;
  *(_WORD *)(v17 + 32) = 33;
  *(unsigned char *)(v17 + 34) = Alignment;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(void *)(v17 + 72) = 0;
  *(_WORD *)(v17 + 36) = 1;
  if ((a6[8] >> 2) - 1 >= 3u)
  {
    uint64_t v24 = *(void **)(a1 + 8);
    LODWORD(v36) = a2;
    int v37 = 1;
    LODWORD(v33) = a3;
    int v35 = 0;
    return sub_1CC737934(v24, 0x5Au, (int *)&v36, (int *)&v33, (llvm::MachineMemOperand *)v17);
  }
  LOBYTE(v33) = a6[9];
  uint64_t v18 = sub_1CB87E200((unsigned __int8 *)&v33);
  int v20 = v19;
  uint64_t v21 = sub_1CB8F1DC4(&v40);
  unint64_t v23 = *(void **)(a1 + 8);
  if (v18 == v21 && v20 == v22)
  {
    LODWORD(v36) = a2;
    int v37 = 1;
    LODWORD(v33) = a3;
    int v35 = 0;
    uint64_t v24 = v23;
    return sub_1CC737934(v24, 0x5Au, (int *)&v36, (int *)&v33, (llvm::MachineMemOperand *)v17);
  }
  llvm::LLT::LLT(&v32, a6[10]);
  unint64_t v36 = v32;
  int v37 = 0;
  LODWORD(v33) = a3;
  int v35 = 0;
  uint64_t v26 = sub_1CC737934(v23, 0x5Au, (int *)&v36, (int *)&v33, (llvm::MachineMemOperand *)v17);
  uint64_t v27 = *(void *)(a1 + 8);
  LODWORD(v36) = a2;
  int v37 = 1;
  uint64_t v33 = v26;
  uint64_t v34 = v28;
  int v35 = 1;
  return (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, llvm::MachineFunction **, uint64_t, void))(*(void *)v27 + 32))(v27, 119, &v36, 1, &v33, 1, 0);
}

void sub_1CBADD33C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void **)(*(void *)(a1 + 8) + 40);
  uint64_t v8 = (char *)v6[20];
  unint64_t v7 = v6[21];
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = (char *)v6[19];
    uint64_t v11 = (v8 - v10) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      goto LABEL_36;
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 60) {
        goto LABEL_37;
      }
      uint64_t v15 = (char *)operator new(16 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[16 * v11];
    *(_WORD *)uint64_t v16 = a2;
    *((void *)v16 + 1) = -1;
    uint64_t v9 = v16 + 16;
    if (v8 != v10)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v8 - 1);
        v16 -= 16;
        v8 -= 16;
      }
      while (v8 != v10);
      uint64_t v8 = (char *)v6[19];
    }
    v6[19] = v16;
    v6[20] = v9;
    v6[21] = &v15[16 * v14];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_WORD *)uint64_t v8 = a2;
    *((void *)v8 + 1) = -1;
    uint64_t v9 = v8 + 16;
  }
  v6[20] = v9;
  unint64_t v17 = *(void **)(*(void *)(*(void *)(a1 + 8) + 8) + 40);
  unint64_t v18 = a2 | (unint64_t)(a3 << 32);
  int v20 = (unint64_t *)v17[58];
  unint64_t v19 = v17[59];
  if ((unint64_t)v20 < v19)
  {
    *int v20 = v18;
    uint64_t v21 = v20 + 1;
    goto LABEL_35;
  }
  int v22 = (void *)v17[57];
  uint64_t v23 = v20 - v22;
  unint64_t v24 = v23 + 1;
  if ((unint64_t)(v23 + 1) >> 61) {
LABEL_36:
  }
    abort();
  uint64_t v25 = v19 - (void)v22;
  if (v25 >> 2 > v24) {
    unint64_t v24 = v25 >> 2;
  }
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v26 = v24;
  }
  if (!v26)
  {
    uint64_t v27 = 0;
    goto LABEL_30;
  }
  if (v26 >> 61) {
LABEL_37:
  }
    sub_1CB833614();
  uint64_t v27 = (char *)operator new(8 * v26);
LABEL_30:
  uint64_t v28 = &v27[8 * v23];
  *(void *)uint64_t v28 = v18;
  uint64_t v21 = v28 + 8;
  if (v20 != v22)
  {
    do
    {
      uint64_t v29 = *--v20;
      *((void *)v28 - 1) = v29;
      v28 -= 8;
    }
    while (v20 != v22);
    int v20 = (unint64_t *)v17[57];
  }
  v17[57] = v28;
  v17[58] = v21;
  v17[59] = &v27[8 * v26];
  if (v20) {
    operator delete(v20);
  }
LABEL_35:
  v17[58] = v21;
}

void sub_1CBADD51C(void *a1)
{
  *a1 = &unk_1F25F6520;
  unsigned int v2 = (void *)a1[6];
  if (v2 != a1 + 8) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CBADD590(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_1CBADD59C(*(void *)(a1 + 8), *(void *)(a1 + 16), a3, a4);
}

uint64_t sub_1CBADD59C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v54 = *(void *)(a1 + 8);
  unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
  unint64_t v8 = IncompleteVirtualRegister & 0x7FFFFFFF;
  *(void *)(*(void *)(a2 + 24) + 16 * v8) = 4;
  uint64_t v53 = (void *)(a2 + 424);
  unint64_t v9 = *(unsigned int *)(a2 + 432);
  if (v8 >= v9)
  {
    uint64_t v10 = *(void *)(a2 + 440);
    uint64_t v11 = v8 + 1 - v9;
    if (v8 >= *(unsigned int *)(a2 + 436)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v12 = *(_DWORD *)(a2 + 432);
    if (v11)
    {
      uint64_t v13 = (void *)(*v53 + 8 * *(unsigned int *)(a2 + 432));
      uint64_t v14 = ~v8 + v9;
      do
      {
        *v13++ = v10;
        BOOL v15 = __CFADD__(v14++, 1);
      }
      while (!v15);
      int v12 = *(_DWORD *)(a2 + 432);
    }
    *(_DWORD *)(a2 + 432) = v12 + v11;
  }
  *(void *)(*(void *)(a2 + 424) + 8 * v8) = 257;
  uint64_t v16 = *(void *)(a2 + 8);
  if (v16) {
    (*(void (**)(uint64_t, void))(*(void *)v16 + 24))(v16, IncompleteVirtualRegister);
  }
  int v60 = IncompleteVirtualRegister;
  int v61 = 1;
  (*(void (**)(void))(**(void **)(v54 + 16) + 176))(*(void *)(v54 + 16));
  v56[0] = 105;
  int v57 = 0;
  (*(void (**)(uint64_t, uint64_t, int *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a1 + 32))(a1, 19, &v60, 1, v56, 1, 0);
  uint64_t v17 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
  unint64_t v18 = v17 & 0x7FFFFFFF;
  *(void *)(*(void *)(a2 + 24) + 16 * v18) = 4;
  unint64_t v19 = *(unsigned int *)(a2 + 432);
  if (v18 >= v19)
  {
    uint64_t v20 = *(void *)(a2 + 440);
    uint64_t v21 = v18 + 1 - v19;
    if (v18 >= *(unsigned int *)(a2 + 436)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v22 = *(_DWORD *)(a2 + 432);
    if (v21)
    {
      uint64_t v23 = (void *)(*v53 + 8 * *(unsigned int *)(a2 + 432));
      uint64_t v24 = ~v18 + v19;
      do
      {
        *v23++ = v20;
        BOOL v15 = __CFADD__(v24++, 1);
      }
      while (!v15);
      int v22 = *(_DWORD *)(a2 + 432);
    }
    *(_DWORD *)(a2 + 432) = v22 + v21;
  }
  *(void *)(*(void *)(a2 + 424) + 8 * v18) = 514;
  uint64_t v25 = *(void *)(a2 + 8);
  if (v25) {
    (*(void (**)(uint64_t, void))(*(void *)v25 + 24))(v25, v17);
  }
  int v60 = v17;
  int v61 = 1;
  v56[0] = IncompleteVirtualRegister;
  int v57 = 0;
  sub_1CC7382B0(a1);
  if (!a3)
  {
    uint64_t v40 = v17;
    goto LABEL_48;
  }
  unsigned int v26 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
  unint64_t v27 = v26 & 0x7FFFFFFF;
  *(void *)(*(void *)(a2 + 24) + 16 * v27) = 4;
  unint64_t v28 = *(unsigned int *)(a2 + 432);
  if (v27 >= v28)
  {
    uint64_t v29 = *(void *)(a2 + 440);
    uint64_t v30 = v27 + 1 - v28;
    if (v27 >= *(unsigned int *)(a2 + 436)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v31 = *(_DWORD *)(a2 + 432);
    if (v30)
    {
      unint64_t v32 = (void *)(*v53 + 8 * *(unsigned int *)(a2 + 432));
      uint64_t v33 = ~v27 + v28;
      do
      {
        *v32++ = v29;
        BOOL v15 = __CFADD__(v33++, 1);
      }
      while (!v15);
      int v31 = *(_DWORD *)(a2 + 432);
    }
    *(_DWORD *)(a2 + 432) = v31 + v30;
  }
  *(void *)(*(void *)(a2 + 424) + 8 * v27) = 513;
  uint64_t v34 = *(void *)(a2 + 8);
  if (v34) {
    (*(void (**)(uint64_t, void))(*(void *)v34 + 24))(v34, v26);
  }
  v56[0] = v26;
  v56[2] = 1;
  uint64_t v52 = a4;
  if ((v26 & 0x80000000) == 0 || (uint64_t v35 = *(void *)(a1 + 24), (v26 & 0x7FFFFFFF) >= *(_DWORD *)(v35 + 432)))
  {
    unint64_t v36 = 0;
LABEL_54:
    unint64_t v37 = (unsigned __int16)(v36 >> 3);
    goto LABEL_36;
  }
  unint64_t v36 = *(void *)(*(void *)(v35 + 424) + 8 * (v26 & 0x7FFFFFFF));
  if ((v36 & 1) == 0)
  {
    if ((v36 & 4) != 0)
    {
      if ((v36 & 2) != 0) {
        unint64_t v37 = (unsigned __int16)(v36 >> 19);
      }
      else {
        unint64_t v37 = (v36 >> 19);
      }
      goto LABEL_36;
    }
    goto LABEL_54;
  }
  unint64_t v37 = (v36 >> 3);
LABEL_36:
  long long v38 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a1 + 8), (llvm::LLVMContext *)v37);
  uint64_t v39 = llvm::ConstantInt::get(v38, a3, (const llvm::APInt *)1);
  (*(void (**)(uint64_t, _DWORD *, void *))(*(void *)a1 + 16))(a1, v56, v39);
  uint64_t v40 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
  unint64_t v41 = v40 & 0x7FFFFFFF;
  *(void *)(*(void *)(a2 + 24) + 16 * v41) = 4;
  unint64_t v42 = *(unsigned int *)(a2 + 432);
  if (v41 >= v42)
  {
    uint64_t v43 = *(void *)(a2 + 440);
    uint64_t v44 = v41 + 1 - v42;
    if (v41 >= *(unsigned int *)(a2 + 436)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v45 = *(_DWORD *)(a2 + 432);
    if (v44)
    {
      unint64_t v46 = (void *)(*v53 + 8 * *(unsigned int *)(a2 + 432));
      uint64_t v47 = ~v41 + v42;
      do
      {
        *v46++ = v43;
        BOOL v15 = __CFADD__(v47++, 1);
      }
      while (!v15);
      int v45 = *(_DWORD *)(a2 + 432);
    }
    *(_DWORD *)(a2 + 432) = v45 + v44;
  }
  *(void *)(*(void *)(a2 + 424) + 8 * v41) = 514;
  uint64_t v48 = *(void *)(a2 + 8);
  if (v48) {
    (*(void (**)(uint64_t, void))(*(void *)v48 + 24))(v48, v40);
  }
  int v60 = v40;
  int v61 = 1;
  v56[0] = v17;
  int v57 = 0;
  unsigned int v58 = v26;
  int v59 = 0;
  (*(void (**)(uint64_t, uint64_t, int *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a1 + 32))(a1, 193, &v60, 1, v56, 2, 0);
  a4 = v52;
LABEL_48:
  uint64_t v49 = *(void *)(v54 + 432);
  uint64_t v50 = (v49 + 8) | 4;
  LODWORD(v49) = *(_DWORD *)(v49 + 20);
  *(void *)a4 = v50;
  *(void *)(a4 + 8) = a3;
  *(_DWORD *)(a4 + 16) = v49;
  *(unsigned char *)(a4 + 20) = 0;
  return v40;
}

void sub_1CBADDBCC(void *a1)
{
  *a1 = &unk_1F25F6570;
  unsigned int v2 = (void *)a1[4];
  if (v2 != a1 + 6) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CBADDC40(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_1CBADD59C(*(void *)(a1 + 8), *(void *)(a1 + 16), a3, a4);
}

void sub_1CBADDC4C(uint64_t a1, int a2)
{
  uint64_t v3 = *(llvm::MachineFunction **)(a1 + 144);
  unsigned int v2 = *(llvm::MachineInstr **)(a1 + 152);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  v4[0] = 50331648;
  v4[1] = a2;
  llvm::MachineInstr::addOperand(v2, v3, (const llvm::MachineOperand *)v4);
}

void sub_1CBADDC90()
{
}

__n128 sub_1CBADDCA4(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x18uLL);
  *(void *)unsigned int v2 = &unk_1F25F6670;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBADDCF0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F6670;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CBADDD20(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  LODWORD(v7) = *a2;
  int v8 = 1;
  int v4 = *(void **)(a1 + 8);
  v6[0] = **(_DWORD **)(a1 + 16);
  v6[4] = 0;
  return sub_1CC7383D8(v4, &v7, v6, v3);
}

void sub_1CBADDD74()
{
}

__n128 sub_1CBADDD88(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x18uLL);
  *(void *)unsigned int v2 = &unk_1F25F66B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBADDDD4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F66B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CBADDE04(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(char **)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  v6[0] = **(_DWORD **)(*(void *)(a1 + 16) + 80);
  v6[4] = 0;
  return sub_1CC738BB8(v4, v3, v2, (uint64_t)v6);
}

void sub_1CBADDE4C()
{
}

__n128 sub_1CBADDE60(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F25F6700;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1CBADDEBC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F6700;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CBADDEFC(uint64_t a1, int *a2, uint64_t *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  int v31 = *a2;
  uint64_t v32 = *a3;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  if (!*v4)
  {
    *uint64_t v4 = 1;
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v6 = **(void **)(a1 + 32);
    unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v5, "", 0);
    unint64_t v8 = IncompleteVirtualRegister & 0x7FFFFFFF;
    *(void *)(*(void *)(v5 + 24) + 16 * v8) = 4;
    unint64_t v9 = *(unsigned int *)(v5 + 432);
    if (v8 >= v9)
    {
      uint64_t v10 = *(void *)(v5 + 440);
      uint64_t v11 = v8 + 1 - v9;
      if (v8 >= *(unsigned int *)(v5 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v12 = *(_DWORD *)(v5 + 432);
      if (v11)
      {
        uint64_t v13 = (void *)(*(void *)(v5 + 424) + 8 * *(unsigned int *)(v5 + 432));
        uint64_t v14 = ~v8 + v9;
        do
        {
          *v13++ = v10;
          BOOL v15 = __CFADD__(v14++, 1);
        }
        while (!v15);
        int v12 = *(_DWORD *)(v5 + 432);
      }
      *(_DWORD *)(v5 + 432) = v12 + v11;
    }
    *(void *)(*(void *)(v5 + 424) + 8 * v8) = v6;
    uint64_t v16 = *(void *)(v5 + 8);
    if (v16) {
      (*(void (**)(uint64_t, void))(*(void *)v16 + 24))(v16, IncompleteVirtualRegister);
    }
    **(_DWORD **)(a1 + 16) = IncompleteVirtualRegister;
    uint64_t v17 = *(void *)(a1 + 40);
    LODWORD(v36) = IncompleteVirtualRegister;
    DWORD2(v36) = 1;
    (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void, void, void))(*(void *)v17 + 32))(v17, 68, &v36, 1, 0, 0, 0);
  }
  uint64_t v18 = *(void *)(a1 + 24);
  uint64_t v19 = **(void **)(a1 + 32);
  unsigned int v20 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v18, "", 0);
  unint64_t v21 = v20 & 0x7FFFFFFF;
  *(void *)(*(void *)(v18 + 24) + 16 * v21) = 4;
  unint64_t v22 = *(unsigned int *)(v18 + 432);
  if (v21 >= v22)
  {
    uint64_t v23 = *(void *)(v18 + 440);
    uint64_t v24 = v21 + 1 - v22;
    if (v21 >= *(unsigned int *)(v18 + 436)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v25 = *(_DWORD *)(v18 + 432);
    if (v24)
    {
      unsigned int v26 = (void *)(*(void *)(v18 + 424) + 8 * *(unsigned int *)(v18 + 432));
      uint64_t v27 = ~v21 + v22;
      do
      {
        *v26++ = v23;
        BOOL v15 = __CFADD__(v27++, 1);
      }
      while (!v15);
      int v25 = *(_DWORD *)(v18 + 432);
    }
    *(_DWORD *)(v18 + 432) = v25 + v24;
  }
  *(void *)(*(void *)(v18 + 424) + 8 * v21) = v19;
  uint64_t v28 = *(void *)(v18 + 8);
  if (v28) {
    (*(void (**)(uint64_t, void))(*(void *)v28 + 24))(v28, v20);
  }
  uint64_t v29 = *(void **)(a1 + 40);
  LODWORD(v34) = v20;
  int v35 = 1;
  LODWORD(v36) = **(_DWORD **)(a1 + 16);
  int v37 = 0;
  v33[0] = v31;
  v33[4] = 0;
  uint64_t result = sub_1CC7388A0(v29, &v34, &v36, v33, v32);
  **(_DWORD **)(a1 + 16) = v20;
  return result;
}

void sub_1CBADE214()
{
}

__n128 sub_1CBADE228(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25F6748;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBADE274(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F6748;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CBADE2A4(uint64_t a1, int **a2)
{
  v12[24] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  long long v3 = a2[1];
  uint64_t v4 = *(void *)(a1 + 8);
  v9[0] = **(_DWORD **)(*(void *)(a1 + 16) + 80);
  v9[2] = 1;
  uint64_t v10 = v12;
  uint64_t v11 = 0x800000000;
  if ((unint64_t)(4 * (void)v3) >= 0x21) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v5 = 0;
  if (v3)
  {
    uint64_t v6 = v12;
    uint64_t v7 = 4 * (void)v3;
    do
    {
      int v8 = *v2++;
      _DWORD *v6 = v8;
      v6[4] = 0;
      v6 += 6;
      v7 -= 4;
    }
    while (v7);
    int v5 = v11;
  }
  LODWORD(v11) = v5 + ((unint64_t)(4 * (void)v3) >> 2);
  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, void *))(*(void *)v4 + 32))(v4, 77, v9, 1, v12);
  if (v10 != v12) {
    free(v10);
  }
}

void sub_1CBADE400()
{
}

__n128 sub_1CBADE414(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25F6790;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBADE460(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F6790;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CBADE490(uint64_t a1, uint64_t a2)
{
  long long v3 = *(char **)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  v6[0] = **(_DWORD **)(*(void *)(a1 + 16) + 80);
  v6[4] = 0;
  return sub_1CC738BB8(v4, v3, v2, (uint64_t)v6);
}

void sub_1CBADE4D8()
{
}

void *sub_1CBADE4EC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25F67D8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBADE534(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F67D8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBADE560(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  unsigned int v3 = *(_DWORD *)(v2 + 8);
  if (v3 >= *(_DWORD *)(v2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)v2 + 4 * v3) = *a2;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

void sub_1CBADE5C4()
{
}

__n128 sub_1CBADE5D8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25F6820;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CBADE62C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F6820;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CBADE664(void *a1, int **a2)
{
  unsigned int v3 = *a2;
  uint64_t v4 = a2[1];
  int v5 = (void *)a1[1];
  uint64_t v6 = (llvm::MachineFunction *)v5[1];
  uint64_t v7 = *(void *)(v5[2] + 8) + 3696;
  int v8 = (unsigned __int8 *)v5[4];
  uint64_t v24 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v24, v8, 2);
  }
  unint64_t v9 = llvm::MachineFunction::CreateMachineInstr(v6, v7, &v24, 0);
  if (v24)
  {
    int v16 = *v24;
    if ((v16 - 4) > 0x1E)
    {
      if ((v16 - 3) >= 0xFFFFFFFE) {
        uint64_t v19 = v24;
      }
      else {
        uint64_t v19 = 0;
      }
      if ((v16 - 3) < 0xFFFFFFFE)
      {
        if (v16 == 3) {
          *((void *)v24 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v18 = (unint64_t)(v19 + 8);
    }
    else
    {
      if ((v24[1] & 0x7F) != 2 && !*((_DWORD *)v24 + 3)) {
        goto LABEL_4;
      }
      uint64_t v17 = *((void *)v24 + 2);
      if ((v17 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v18 = v17 & 0xFFFFFFFFFFFFFFF8;
      if (!v18) {
        goto LABEL_4;
      }
    }
    unsigned int v20 = &v24;
    sub_1CC5FA668(v18 + 16, &v20);
  }
LABEL_4:
  int v10 = **(_DWORD **)(a1[2] + 80);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  LODWORD(v20) = 0x1000000;
  HIDWORD(v20) = v10;
  llvm::MachineInstr::addOperand(v9, v6, (const llvm::MachineOperand *)&v20);
  if (v4)
  {
    uint64_t v11 = 4 * (void)v4;
    do
    {
      int v12 = *v3++;
      uint64_t v21 = 0;
      LODWORD(v20) = 0;
      HIDWORD(v20) = v12;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      llvm::MachineInstr::addOperand(v9, v6, (const llvm::MachineOperand *)&v20);
      v11 -= 4;
    }
    while (v11);
  }
  uint64_t v13 = a1[3];
  unsigned int v14 = *(_DWORD *)(v13 + 8);
  if (v14 >= *(_DWORD *)(v13 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  BOOL v15 = (llvm::MachineFunction **)(*(void *)v13 + 16 * v14);
  *BOOL v15 = v6;
  v15[1] = v9;
  ++*(_DWORD *)(v13 + 8);
}

void sub_1CBADE80C(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v155 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = ((a1[14] - a1[13]) >> 3);
  uint64_t v149 = v151;
  uint64_t v150 = 0;
  *a2 = (uint64_t)(a2 + 2);
  a2[1] = 0;
  sub_1CBADFCEC((uint64_t)a2, v3, (uint64_t)&v149);
  if (v149 != v151) {
    free(v149);
  }
  uint64_t v152 = 1;
  memset_pattern16(&v153, &unk_1CDB165A0, 0x10uLL);
  uint64_t v138 = 0;
  uint64_t v139 = 0;
  uint64_t v137 = &v138;
  uint64_t v4 = a1 + 40;
  uint64_t v132 = a1;
  uint64_t v5 = a1[41];
  unint64_t v135 = v4;
  if ((void *)v5 == v4) {
    goto LABEL_149;
  }
  int v133 = 0;
  do
  {
    if (v138)
    {
      int v6 = *(_DWORD *)(v5 + 24);
      uint64_t v7 = v138;
      int v8 = (uint64_t *)&v138;
      do
      {
        unint64_t v9 = v8;
        int v10 = v7;
        int v11 = *((_DWORD *)v7 + 8);
        int v12 = (uint64_t **)(v7 + 1);
        if (v11 >= v6) {
          int v8 = v7;
        }
        else {
          ++v7;
        }
        uint64_t v7 = (uint64_t *)*v7;
      }
      while (v7);
      if (v8 != (uint64_t *)&v138)
      {
        uint64_t v13 = v11 >= v6 ? v10 : v9;
        if (v6 >= *((_DWORD *)v13 + 8))
        {
          if (v11 < v6) {
            int v12 = (uint64_t **)(v9 + 1);
          }
          unsigned int v14 = *v12;
          BOOL v15 = v8;
          if (*v12)
          {
            do
            {
              int v16 = (uint64_t **)v14;
              unsigned int v14 = (uint64_t *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              int v16 = (uint64_t **)v15[2];
              BOOL v47 = *v16 == v15;
              BOOL v15 = (uint64_t *)v16;
            }
            while (!v47);
          }
          if (v137 == (uint64_t **)v8) {
            uint64_t v137 = v16;
          }
          --v139;
          sub_1CB91F7C8(v138, v8);
          if (v11 >= v6) {
            uint64_t v17 = v10;
          }
          else {
            uint64_t v17 = v9;
          }
          unint64_t v18 = (void *)v17[5];
          uint64_t v19 = v9 + 7;
          if (v11 >= v6) {
            uint64_t v19 = v10 + 7;
          }
          if (v18 != v19) {
            free(v18);
          }
          operator delete(v8);
        }
      }
    }
    uint64_t v20 = *(void *)(v5 + 88);
    uint64_t v21 = *(void *)(v5 + 96);
    int v22 = -1;
    while (v20 != v21)
    {
      int v23 = *(_DWORD *)(*(void *)v20 + 24);
      if (v23 > *(_DWORD *)(v5 + 24))
      {
        if (v22 <= v23) {
          int v22 = *(_DWORD *)(*(void *)v20 + 24);
        }
        LODWORD(v146) = *(_DWORD *)(*(void *)v20 + 24);
        sub_1CBADFFC8((uint64_t)&v149, (uint64_t)&v152, (int *)&v146);
      }
      v20 += 8;
    }
    uint64_t v24 = v138;
    int v25 = &v138;
    if (v138)
    {
      int v25 = &v138;
      do
      {
        int v26 = *((_DWORD *)v24 + 8);
        BOOL v27 = v26 < v22;
        if (v26 >= v22) {
          uint64_t v28 = v24;
        }
        else {
          uint64_t v28 = v24 + 1;
        }
        if (!v27) {
          int v25 = (uint64_t **)v24;
        }
        uint64_t v24 = (uint64_t *)*v28;
      }
      while (*v28);
    }
    uint64_t v29 = v137;
    if (v137 != v25)
    {
      do
      {
        int v34 = *((_DWORD *)v29 + 8);
        if (v152)
        {
          int v35 = 4;
          long long v36 = (llvm **)&v153;
        }
        else
        {
          int v35 = v154;
          if (!v154) {
            goto LABEL_58;
          }
          long long v36 = v153;
        }
        int v37 = v35 - 1;
        unsigned int v38 = v37 & (37 * v34);
        int v39 = *((_DWORD *)v36 + v38);
        if (v34 != v39)
        {
          int v40 = 1;
          while (v39 != 0x7FFFFFFF)
          {
            unsigned int v87 = v38 + v40++;
            unsigned int v38 = v87 & v37;
            int v39 = *((_DWORD *)v36 + v38);
            if (v34 == v39) {
              goto LABEL_61;
            }
          }
LABEL_58:
          uint64_t v41 = *a2 + 16 * *(int *)(v5 + 24);
          unint64_t v42 = *(unsigned int *)(v41 + 8);
          if (v42 >= *(unsigned int *)(v41 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)v41 + 4 * v42) = v34;
          ++*(_DWORD *)(v41 + 8);
        }
LABEL_61:
        uint64_t v43 = v29[1];
        if (v43)
        {
          do
          {
            uint64_t v44 = (uint64_t **)v43;
            uint64_t v43 = (uint64_t *)*v43;
          }
          while (v43);
        }
        else
        {
          do
          {
            uint64_t v44 = (uint64_t **)v29[2];
            BOOL v47 = *v44 == (uint64_t *)v29;
            uint64_t v29 = v44;
          }
          while (!v47);
        }
        uint64_t v29 = v44;
      }
      while (v44 != v25);
    }
    unsigned int v30 = v152;
    if (v152 <= 1)
    {
      if (v152)
      {
        int v45 = (llvm **)&v153;
        uint64_t v46 = 4;
      }
      else
      {
        int v45 = v153;
        uint64_t v46 = v154;
      }
      uint64_t v32 = (llvm **)((char *)v45 + 4 * v46);
      int v33 = v152;
      int v31 = (llvm *)v32;
    }
    else
    {
      int v31 = (llvm *)&v155;
      uint64_t v32 = (llvm **)&v153;
      if ((v152 & 1) == 0)
      {
        uint64_t v32 = v153;
        int v33 = v154;
        if (!v154)
        {
          int v31 = (llvm *)v153;
          goto LABEL_73;
        }
        int v31 = (llvm *)((char *)v153 + 4 * v154);
      }
      int v33 = v152 & 1;
      while ((*(_DWORD *)v32 - 0x7FFFFFFF) <= 1)
      {
        uint64_t v32 = (llvm **)((char *)v32 + 4);
        if (v32 == (llvm **)v31)
        {
          uint64_t v32 = (llvm **)v31;
          break;
        }
      }
    }
LABEL_73:
    BOOL v47 = v33 == 0;
    if (v33) {
      uint64_t v48 = (llvm **)&v153;
    }
    else {
      uint64_t v48 = v153;
    }
    unsigned int v49 = v154;
    if (!v47) {
      unsigned int v49 = 4;
    }
    uint64_t v50 = (llvm **)((char *)v48 + 4 * v49);
    if (v32 != v50)
    {
      do
      {
        int v51 = *(_DWORD *)v32;
        uint64_t v52 = v138;
        uint64_t v53 = &v138;
        uint64_t v54 = &v138;
        if (v138)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v54 = (uint64_t **)v52;
              int v55 = *((_DWORD *)v52 + 8);
              if (v51 >= v55) {
                break;
              }
              uint64_t v52 = *v54;
              uint64_t v53 = v54;
              if (!*v54) {
                goto LABEL_86;
              }
            }
            if (v55 >= v51) {
              break;
            }
            uint64_t v52 = v54[1];
            if (!v52)
            {
              uint64_t v53 = v54 + 1;
              goto LABEL_86;
            }
          }
        }
        else
        {
LABEL_86:
          uint64_t v56 = (uint64_t *)v54;
          uint64_t v54 = (uint64_t **)operator new(0x40uLL);
          *((_DWORD *)v54 + 8) = v51;
          v54[5] = (uint64_t *)(v54 + 7);
          v54[6] = (uint64_t *)0x200000000;
          void *v54 = 0;
          v54[1] = 0;
          v54[2] = v56;
          *uint64_t v53 = (uint64_t *)v54;
          int v57 = (uint64_t *)v54;
          if (*v137)
          {
            uint64_t v137 = (uint64_t **)*v137;
            int v57 = *v53;
          }
          sub_1CB8358B8(v138, v57);
          ++v139;
        }
        unint64_t v58 = *((unsigned int *)v54 + 12);
        if (v58 >= *((unsigned int *)v54 + 13)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v54[5] + v58) = *(_DWORD *)(v5 + 24);
        ++*((_DWORD *)v54 + 12);
        int v59 = (llvm *)((char *)v32 + 4);
        while (v59 != v31)
        {
          int v60 = *(_DWORD *)v59;
          int v59 = (llvm *)((char *)v59 + 4);
          if ((v60 - 0x7FFFFFFF) >= 2)
          {
            uint64_t v32 = (llvm **)((char *)v59 - 4);
            goto LABEL_95;
          }
        }
        uint64_t v32 = (llvm **)v31;
LABEL_95:
        ;
      }
      while (v32 != v50);
      unsigned int v30 = v152;
    }
    if (v30 <= 1 && !HIDWORD(v152)) {
      goto LABEL_103;
    }
    if (v30)
    {
      size_t v61 = 16;
      uint64_t v62 = (llvm **)&v153;
    }
    else
    {
      unsigned int v128 = (2 * v30) & 0xFFFFFFFC;
      unsigned int v63 = v154;
      if (v128 < v154)
      {
        if (v154 > 0x40)
        {
          sub_1CD41DBD0((unsigned int *)&v152);
          goto LABEL_103;
        }
      }
      else if (!v154)
      {
        goto LABEL_102;
      }
      uint64_t v62 = v153;
      size_t v61 = 4 * v154;
    }
    memset_pattern16(v62, &unk_1CDB165A0, v61);
    unsigned int v63 = v152 & 1;
LABEL_102:
    uint64_t v152 = v63;
LABEL_103:
    uint64_t v64 = sub_1CBC2D588(v5);
    if (!v64) {
      goto LABEL_104;
    }
    uint64_t v65 = v64;
    uint64_t v149 = v151;
    uint64_t v150 = 0x400000000;
    uint64_t v146 = 1;
    memset_pattern16(&v147, &unk_1CDB165A0, 0x20uLL);
    uint64_t v66 = v137;
    if (&v138 == v137) {
      goto LABEL_139;
    }
    uint64_t v67 = &v138;
    std::string v130 = v137;
    do
    {
      unsigned int v68 = *v67;
      char v69 = *v67;
      int v70 = v67;
      if (*v67)
      {
        do
        {
          unsigned int v71 = v69;
          char v69 = (uint64_t *)v69[1];
        }
        while (v69);
      }
      else
      {
        do
        {
          unsigned int v71 = v70[2];
          BOOL v47 = *v71 == (void)v70;
          int v70 = (uint64_t **)v71;
        }
        while (v47);
      }
      uint64_t v72 = *((unsigned int *)v71 + 12);
      if (v72)
      {
        uint64_t v73 = (int *)v71[5];
        uint64_t v74 = 4 * v72;
        while (1)
        {
          int v136 = 0;
          int v136 = *v73;
          if (v136 >= *(_DWORD *)(v65 + 24)) {
            break;
          }
LABEL_114:
          ++v73;
          v74 -= 4;
          if (!v74)
          {
            unsigned int v68 = *v67;
            goto LABEL_128;
          }
        }
        if (v150)
        {
          uint64_t v77 = v149;
          int v76 = *((_DWORD *)v71 + 8);
          if (*(_DWORD *)&v149[40 * v150 - 40] == v76)
          {
LABEL_125:
            sub_1CBAE0240((uint64_t)&v146, &v136, (uint64_t)&v142);
            if ((_BYTE)v144)
            {
              uint64_t v80 = &v149[40 * v150];
              unint64_t v81 = *((unsigned int *)v80 - 6);
              if (v81 >= *((unsigned int *)v80 - 5)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(_DWORD *)(*((void *)v80 - 4) + 4 * v81) = v136;
              ++*((_DWORD *)v80 - 6);
              uint64_t v66 = v130;
            }
            goto LABEL_114;
          }
          int v75 = v150;
        }
        else
        {
          int v75 = 0;
          int v76 = *((_DWORD *)v71 + 8);
          uint64_t v77 = v149;
        }
        v140[0] = v141;
        v140[1] = (void *)0x400000000;
        int v142 = v76;
        uint64_t v143 = v145;
        uint64_t v144 = 0x400000000;
        if (v150 >= HIDWORD(v150))
        {
          if (v77 > (char *)&v142 || &v77[40 * v75] <= (char *)&v142) {
            sub_1CD41DCC4();
          }
          sub_1CD41DCC4();
        }
        unsigned int v78 = &v77[40 * v150];
        *(_DWORD *)unsigned int v78 = v142;
        *((void *)v78 + 2) = 0x400000000;
        *((void *)v78 + 1) = v78 + 24;
        uint64_t v79 = (uint64_t)(v78 + 8);
        if (v144) {
          sub_1CD41B598(v79, (uint64_t)&v143);
        }
        LODWORD(v150) = v150 + 1;
        if (v143 != v145) {
          free(v143);
        }
        if (v140[0] != v141) {
          free(v140[0]);
        }
        goto LABEL_125;
      }
LABEL_128:
      if (v68)
      {
        do
        {
          uint64_t v82 = (uint64_t **)v68;
          unsigned int v68 = (uint64_t *)v68[1];
        }
        while (v68);
      }
      else
      {
        do
        {
          uint64_t v82 = (uint64_t **)v67[2];
          BOOL v47 = *v82 == (uint64_t *)v67;
          uint64_t v67 = v82;
        }
        while (v47);
      }
      uint64_t v67 = v82;
    }
    while (v82 != v66);
    uint64_t v83 = v150;
    if ((int)v150 >= 2)
    {
      for (uint64_t i = 0; i != v83 - 1; ++i)
      {
        size_t v89 = &v149[40 * i];
        uint64_t v90 = *((unsigned int *)v89 + 4);
        if (!v90) {
          continue;
        }
        unsigned int v91 = (unsigned int *)*((void *)v89 + 1);
        uint64_t v129 = &v91[v90];
        do
        {
          unint64_t v92 = v91;
          uint64_t v93 = *v91;
          uint64_t v131 = (int)v93;
          uint64_t v94 = *(void *)(v132[13] + 8 * v93);
          uint64_t v95 = *(uint64_t **)(v94 + 88);
          char v96 = *(uint64_t **)(v94 + 96);
          while (v95 != v96)
          {
            uint64_t v97 = *v95++;
            LODWORD(v140[0]) = *(_DWORD *)(v97 + 24);
            sub_1CBADFFC8((uint64_t)&v142, (uint64_t)&v152, (int *)v140);
          }
          uint64_t v98 = v83 - 1;
          int v99 = v133;
          do
          {
            int v100 = *(_DWORD *)&v149[40 * v98];
            if (v152)
            {
              int v101 = 4;
              uint64_t v102 = (llvm **)&v153;
            }
            else
            {
              int v101 = v154;
              if (!v154) {
                goto LABEL_167;
              }
              uint64_t v102 = v153;
            }
            int v103 = v101 - 1;
            unsigned int v104 = v103 & (37 * v100);
            int v105 = *((_DWORD *)v102 + v104);
            if (v100 == v105) {
              goto LABEL_170;
            }
            int v106 = 1;
            while (v105 != 0x7FFFFFFF)
            {
              unsigned int v114 = v104 + v106++;
              unsigned int v104 = v114 & v103;
              int v105 = *((_DWORD *)v102 + v104);
              if (v100 == v105) {
                goto LABEL_170;
              }
            }
LABEL_167:
            uint64_t v107 = *a2 + 16 * v131;
            unint64_t v108 = *(unsigned int *)(v107 + 8);
            if (v108 >= *(unsigned int *)(v107 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*(void *)v107 + 4 * v108) = v100;
            ++*(_DWORD *)(v107 + 8);
            int v99 = 1;
LABEL_170:
            --v98;
          }
          while (v98 > i);
          BOOL v109 = v152 <= 1 && HIDWORD(v152) == 0;
          uint64_t v110 = v92;
          if (!v109)
          {
            if (v152)
            {
              size_t v111 = 16;
              int v112 = (llvm **)&v153;
              goto LABEL_177;
            }
            unsigned int v113 = v154;
            size_t v111 = 4 * v154;
            if (((2 * v152) & 0xFFFFFFFC) < v154)
            {
              if (v154 <= 0x40) {
                goto LABEL_226;
              }
              sub_1CD41DBD0((unsigned int *)&v152);
              uint64_t v110 = v92;
            }
            else
            {
              if (!v154)
              {
                uint64_t v110 = v92;
                goto LABEL_178;
              }
LABEL_226:
              int v112 = v153;
              uint64_t v110 = v92;
LABEL_177:
              memset_pattern16(v112, &unk_1CDB165A0, v111);
              unsigned int v113 = v152 & 1;
LABEL_178:
              uint64_t v152 = v113;
            }
          }
          int v133 = v99;
          unsigned int v91 = v110 + 1;
        }
        while (v91 != v129);
      }
    }
LABEL_139:
    if ((v146 & 1) == 0) {
      llvm::deallocate_buffer(v147, (void *)(4 * v148));
    }
    uint64_t v84 = v149;
    if (v150)
    {
      uint64_t v85 = 40 * v150;
      do
      {
        uint64_t v86 = *(char **)&v84[v85 - 32];
        if (&v84[v85 - 16] != v86) {
          free(v86);
        }
        v85 -= 40;
      }
      while (v85);
      uint64_t v84 = v149;
    }
    if (v84 != v151) {
      free(v84);
    }
LABEL_104:
    uint64_t v5 = *(void *)(v5 + 8);
  }
  while ((void *)v5 != v135);
  if (v133)
  {
    uint64_t v115 = *((unsigned int *)a2 + 2);
    if (v115)
    {
      uint64_t v116 = *a2;
      uint64_t v117 = *a2 + 16 * v115;
      do
      {
        std::__sort<std::__less<int,int> &,int *>();
        unsigned __int16 v118 = *(int **)v116;
        uint64_t v119 = *(unsigned int *)(v116 + 8);
        uint64_t v120 = *(void *)v116 + 4 * v119;
        uint64_t v121 = *(int **)v116;
        if (v119)
        {
          uint64_t v121 = v118 - 1;
          uint64_t v122 = 4 * v119 - 4;
          while (v122)
          {
            int v123 = v121[1];
            int v124 = v121[2];
            ++v121;
            v122 -= 4;
            if (v123 == v124) {
              goto LABEL_188;
            }
          }
        }
        else
        {
LABEL_188:
          if (v121 != (int *)v120)
          {
            uint64_t v125 = v121 + 2;
            if (v121 + 2 != (int *)v120)
            {
              int v126 = *v121;
              do
              {
                int v127 = v126;
                int v126 = *v125;
                if (v127 != *v125)
                {
                  v121[1] = v126;
                  ++v121;
                }
                ++v125;
              }
              while (v125 != (int *)v120);
            }
            uint64_t v120 = (uint64_t)(v121 + 1);
          }
        }
        *(_DWORD *)(v116 + 8) = (unint64_t)(v120 - (void)v118) >> 2;
        v116 += 16;
      }
      while (v116 != v117);
    }
  }
LABEL_149:
  sub_1CBADFF58(v138);
  if ((v152 & 1) == 0) {
    llvm::deallocate_buffer((llvm *)v153, (void *)(4 * v154));
  }
}

void sub_1CBADF470(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = *(unsigned int *)(a1 + 8);
  v13[0] = &v14;
  v13[1] = 0;
  *a2 = a2 + 2;
  a2[1] = 0;
  sub_1CBADFCEC((uint64_t)a2, v4, (uint64_t)v13);
  if (v13[0] != &v14) {
    free(v13[0]);
  }
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if ((int)v5 >= 1)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v7 = *(void *)a1 + 16 * i;
      uint64_t v8 = *(unsigned int *)(v7 + 8);
      if (v8)
      {
        unint64_t v9 = *(int **)v7;
        uint64_t v10 = 4 * v8;
        do
        {
          uint64_t v11 = *a2 + 16 * *v9;
          unint64_t v12 = *(unsigned int *)(v11 + 8);
          if (v12 >= *(unsigned int *)(v11 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)v11 + 4 * v12) = i;
          ++*(_DWORD *)(v11 + 8);
          ++v9;
          v10 -= 4;
        }
        while (v10);
      }
    }
  }
}

void sub_1CBADF584(void *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  Name = llvm::Value::getName(*(llvm::Value **)a2);
  size_t v8 = v6;
  unint64_t v9 = (_WORD *)*((void *)a3 + 4);
  if (v6 <= *((void *)a3 + 3) - (void)v9)
  {
    if (v6)
    {
      memcpy(v9, Name, v6);
      unint64_t v9 = (_WORD *)(*((void *)a3 + 4) + v8);
      *((void *)a3 + 4) = v9;
    }
  }
  else
  {
    llvm::raw_ostream::write(a3, Name, v6);
    unint64_t v9 = (_WORD *)*((void *)a3 + 4);
  }
  if (*((void *)a3 + 3) - (void)v9 > 1uLL)
  {
    *unint64_t v9 = 2618;
    *((void *)a3 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a3, ":\n", 2uLL);
  }
  uint64_t v10 = a2 + 320;
  uint64_t v11 = *(void *)(a2 + 328);
  uint64_t v62 = v10;
  if (v11 != v10)
  {
    while (1)
    {
      uint64_t v12 = *((void *)a3 + 4);
      if ((unint64_t)(*((void *)a3 + 3) - v12) > 2)
      {
        *(unsigned char *)(v12 + 2) = 46;
        *(_WORD *)uint64_t v12 = 25186;
        *((void *)a3 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(a3, "bb.", 3uLL);
      }
      unint64_t v13 = *(int *)(v11 + 24);
      if ((v13 & 0x80000000) != 0)
      {
        unint64_t v13 = -(uint64_t)v13;
        uint64_t v14 = a3;
        int v15 = 1;
      }
      else
      {
        uint64_t v14 = a3;
        int v15 = 0;
      }
      sub_1CD098D14(v14, v13, 0, 0, v15);
      int v16 = *(llvm::Value **)(v11 + 16);
      if (!v16) {
        goto LABEL_19;
      }
      llvm::Value::getName(v16);
      if (v17)
      {
        unint64_t v18 = (unsigned char *)*((void *)a3 + 4);
        if (*((unsigned char **)a3 + 3) == v18)
        {
          llvm::raw_ostream::write(a3, ".", 1uLL);
        }
        else
        {
          unsigned char *v18 = 46;
          ++*((void *)a3 + 4);
        }
      }
      uint64_t v19 = *(llvm::Value **)(v11 + 16);
      if (!v19) {
        goto LABEL_19;
      }
      uint64_t v21 = llvm::Value::getName(v19);
      size_t v22 = v20;
      int v23 = (_WORD *)*((void *)a3 + 4);
      if (v20 > *((void *)a3 + 3) - (void)v23) {
        break;
      }
      if (v20)
      {
        memcpy(v23, v21, v20);
        int v23 = (_WORD *)(*((void *)a3 + 4) + v22);
        *((void *)a3 + 4) = v23;
      }
LABEL_20:
      if (*((void *)a3 + 3) - (void)v23 > 1uLL)
      {
        *int v23 = 2618;
        *((void *)a3 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a3, ":\n", 2uLL);
      }
      if (*(void *)(v11 + 88) != *(void *)(v11 + 96))
      {
        uint64_t v24 = *((void *)a3 + 4);
        if ((unint64_t)(*((void *)a3 + 3) - v24) > 0x12)
        {
          *(_DWORD *)(v24 + 15) = 1936879475;
          *(_OWORD *)uint64_t v24 = *(_OWORD *)"  thread-successors";
          *((void *)a3 + 4) += 19;
        }
        else
        {
          llvm::raw_ostream::write(a3, "  thread-successors", 0x13uLL);
        }
        int v25 = *(uint64_t **)(v11 + 88);
        int v26 = *(uint64_t **)(v11 + 96);
        while (v25 != v26)
        {
          uint64_t v27 = *v25;
          if (*v25 == **(void **)(v11 + 88)) {
            uint64_t v28 = ": ";
          }
          else {
            uint64_t v28 = ", ";
          }
          uint64_t v29 = (_WORD *)*((void *)a3 + 4);
          if (*((void *)a3 + 3) - (void)v29 > 1uLL)
          {
            *uint64_t v29 = *(_WORD *)v28;
            unsigned int v30 = (_DWORD *)(*((void *)a3 + 4) + 2);
            *((void *)a3 + 4) = v30;
          }
          else
          {
            llvm::raw_ostream::write(a3, v28, 2uLL);
            unsigned int v30 = (_DWORD *)*((void *)a3 + 4);
          }
          if (*((void *)a3 + 3) - (void)v30 > 3uLL)
          {
            *unsigned int v30 = 778199589;
            *((void *)a3 + 4) += 4;
          }
          else
          {
            llvm::raw_ostream::write(a3, "%bb.", 4uLL);
          }
          unint64_t v31 = *(int *)(v27 + 24);
          if ((v31 & 0x80000000) != 0)
          {
            unint64_t v31 = -(uint64_t)v31;
            uint64_t v32 = a3;
            int v33 = 1;
          }
          else
          {
            uint64_t v32 = a3;
            int v33 = 0;
          }
          sub_1CD098D14(v32, v31, 0, 0, v33);
          ++v25;
        }
        int v34 = (unsigned char *)*((void *)a3 + 4);
        if (*((unsigned char **)a3 + 3) == v34)
        {
          llvm::raw_ostream::write(a3, "\n", 1uLL);
        }
        else
        {
          *int v34 = 10;
          ++*((void *)a3 + 4);
        }
      }
      if (*(_DWORD *)(*a1 + 16 * *(int *)(v11 + 24) + 8))
      {
        uint64_t v35 = *((void *)a3 + 4);
        if ((unint64_t)(*((void *)a3 + 3) - v35) > 0x10)
        {
          *(unsigned char *)(v35 + 16) = 115;
          *(_OWORD *)uint64_t v35 = *(_OWORD *)"  simd-successors";
          *((void *)a3 + 4) += 17;
        }
        else
        {
          llvm::raw_ostream::write(a3, "  simd-successors", 0x11uLL);
        }
        uint64_t v36 = *a1 + 16 * *(int *)(v11 + 24);
        uint64_t v37 = *(unsigned int *)(v36 + 8);
        if (v37)
        {
          unsigned int v38 = *(int **)v36;
          uint64_t v39 = 4 * v37;
          do
          {
            if (v38 == *(int **)(*a1 + 16 * *(int *)(v11 + 24))) {
              int v40 = ": ";
            }
            else {
              int v40 = ", ";
            }
            uint64_t v41 = (_WORD *)*((void *)a3 + 4);
            if (*((void *)a3 + 3) - (void)v41 > 1uLL)
            {
              *uint64_t v41 = *(_WORD *)v40;
              unint64_t v42 = (_DWORD *)(*((void *)a3 + 4) + 2);
              *((void *)a3 + 4) = v42;
            }
            else
            {
              llvm::raw_ostream::write(a3, v40, 2uLL);
              unint64_t v42 = (_DWORD *)*((void *)a3 + 4);
            }
            if (*((void *)a3 + 3) - (void)v42 > 3uLL)
            {
              _DWORD *v42 = 778199589;
              *((void *)a3 + 4) += 4;
            }
            else
            {
              llvm::raw_ostream::write(a3, "%bb.", 4uLL);
            }
            unint64_t v43 = *v38;
            if ((v43 & 0x80000000) != 0)
            {
              unint64_t v43 = -(uint64_t)v43;
              uint64_t v44 = a3;
              int v45 = 1;
            }
            else
            {
              uint64_t v44 = a3;
              int v45 = 0;
            }
            sub_1CD098D14(v44, v43, 0, 0, v45);
            ++v38;
            v39 -= 4;
          }
          while (v39);
        }
        uint64_t v46 = (unsigned char *)*((void *)a3 + 4);
        if (*((unsigned char **)a3 + 3) == v46)
        {
          llvm::raw_ostream::write(a3, "\n", 1uLL);
        }
        else
        {
          unsigned char *v46 = 10;
          ++*((void *)a3 + 4);
        }
      }
      uint64_t v47 = *(void *)(v11 + 56);
      if (v47 != v11 + 48)
      {
        char v48 = 0;
        do
        {
          __int16 v49 = *(_WORD *)(v47 + 44);
          int v50 = v49 & 0xC;
          if ((v49 & 0xC) != 0 && (v49 & 4) == 0)
          {
            if (llvm::MachineInstr::hasPropertyInBundle(v47, 32, 1)) {
              goto LABEL_97;
            }
            __int16 v49 = *(_WORD *)(v47 + 44);
            int v50 = v49 & 0xC;
          }
          else if ((*(unsigned char *)(*(void *)(v47 + 16) + 8) & 0x20) != 0)
          {
            goto LABEL_97;
          }
          int v52 = v49 & 4;
          if (v50) {
            BOOL v53 = v52 == 0;
          }
          else {
            BOOL v53 = 0;
          }
          if (v53)
          {
            if (llvm::MachineInstr::hasPropertyInBundle(v47, 1024, 1)) {
              goto LABEL_97;
            }
            uint64_t v54 = *(void *)(v47 + 16);
          }
          else
          {
            uint64_t v54 = *(void *)(v47 + 16);
            if ((*(unsigned char *)(v54 + 9) & 4) != 0) {
              goto LABEL_97;
            }
          }
          if ((*(unsigned char *)(v54 + 16) & 0x40) == 0)
          {
            uint64_t v55 = *(unsigned int *)(v47 + 40);
            if (!v55)
            {
LABEL_83:
              if ((v48 & 1) == 0)
              {
                uint64_t v59 = *((void *)a3 + 4);
                if ((unint64_t)(*((void *)a3 + 3) - v59) > 9)
                {
                  *(_WORD *)(v59 + 8) = 2622;
                  *(void *)uint64_t v59 = *(void *)"  ; <...>\n";
                  *((void *)a3 + 4) += 10;
                }
                else
                {
                  llvm::raw_ostream::write(a3, "  ; <...>\n", 0xAuLL);
                }
              }
              char v48 = 1;
              goto LABEL_87;
            }
            uint64_t v56 = 32 * v55;
            int v57 = (unsigned int *)(*(void *)(v47 + 32) + 4);
            while (1)
            {
              if (!*((unsigned char *)v57 - 4))
              {
                unint64_t v58 = *v57;
                if (v58 == 267
                  || (v58 - 1) <= 0x56
                  && ((byte_1CDEF3152[v58 >> 3] >> (v58 & 7)) & 1) != 0)
                {
                  break;
                }
              }
              v57 += 8;
              v56 -= 32;
              if (!v56) {
                goto LABEL_83;
              }
            }
          }
LABEL_97:
          int v60 = (_WORD *)*((void *)a3 + 4);
          if (*((void *)a3 + 3) - (void)v60 > 1uLL)
          {
            *int v60 = 8224;
            *((void *)a3 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(a3, "  ", 2uLL);
          }
          llvm::MachineInstr::print((llvm::MachineInstr *)v47, a3, (const llvm::TargetRegisterInfo *)1, 0, 0, 1, 0);
          char v48 = 0;
LABEL_87:
          if ((*(unsigned char *)v47 & 4) == 0)
          {
            while ((*(_WORD *)(v47 + 44) & 8) != 0)
              uint64_t v47 = *(void *)(v47 + 8);
          }
          uint64_t v47 = *(void *)(v47 + 8);
        }
        while (v47 != v11 + 48);
      }
      size_t v61 = (unsigned char *)*((void *)a3 + 4);
      if (*((unsigned char **)a3 + 3) == v61)
      {
        llvm::raw_ostream::write(a3, "\n", 1uLL);
      }
      else
      {
        *size_t v61 = 10;
        ++*((void *)a3 + 4);
      }
      uint64_t v11 = *(void *)(v11 + 8);
      if (v11 == v62) {
        return;
      }
    }
    llvm::raw_ostream::write(a3, v21, v20);
LABEL_19:
    int v23 = (_WORD *)*((void *)a3 + 4);
    goto LABEL_20;
  }
}

void sub_1CBADFCEC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(unsigned int *)(a1 + 12) >= a2)
  {
    unint64_t v3 = *(unsigned int *)(a1 + 8);
    if (v3 >= a2) {
      unint64_t v4 = a2;
    }
    else {
      unint64_t v4 = *(unsigned int *)(a1 + 8);
    }
    if (v4)
    {
      uint64_t v5 = *(char **)a1;
      do
      {
        sub_1CD41B6B0((uint64_t)v5, a3);
        v5 += 16;
        --v4;
      }
      while (v4);
      unint64_t v3 = *(unsigned int *)(a1 + 8);
    }
    unint64_t v6 = v3 - a2;
    if (v3 >= a2)
    {
      if (v3 > a2)
      {
        uint64_t v10 = *(void *)a1 + 16 * v3;
        uint64_t v11 = 16 * a2 - 16 * v3;
        uint64_t v12 = v10;
        do
        {
          uint64_t v14 = *(void **)(v12 - 16);
          v12 -= 16;
          unint64_t v13 = v14;
          if ((void *)v10 != v14) {
            free(v13);
          }
          uint64_t v10 = v12;
          v11 += 16;
        }
        while (v11);
      }
    }
    else
    {
      uint64_t v7 = (void *)(*(void *)a1 + 16 * v3);
      do
      {
        size_t v8 = v7 + 2;
        *uint64_t v7 = v7 + 2;
        v7[1] = 0;
        if (*(_DWORD *)(a3 + 8)) {
          sub_1CD41B6B0((uint64_t)v7, a3);
        }
        uint64_t v7 = v8;
      }
      while (!__CFADD__(v6++, 1));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
  else
  {
    sub_1CBADFE10((char **)a1, a2, a3);
  }
}

void *sub_1CBADFE10(char **a1, unint64_t a2, uint64_t a3)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v5 = *((unsigned int *)a1 + 3);
  if (v5 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v7 = (2 * v5) | 1;
  if (v7 <= a2) {
    unint64_t v7 = a2;
  }
  if (v7 >= 0xFFFFFFFF) {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v8 = v7;
  }
  __n128 result = malloc_type_malloc(16 * v8, 0x4065EBACuLL);
  if (!result) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  if (a2)
  {
    uint64_t v10 = result;
    unint64_t v11 = a2;
    do
    {
      uint64_t v12 = v10 + 2;
      *uint64_t v10 = v10 + 2;
      v10[1] = 0;
      if (*(_DWORD *)(a3 + 8))
      {
        unint64_t v18 = v11;
        uint64_t v19 = result;
        sub_1CD41B6B0((uint64_t)v10, a3);
        unint64_t v11 = v18;
        __n128 result = v19;
      }
      uint64_t v10 = v12;
      --v11;
    }
    while (v11);
  }
  unint64_t v13 = *a1;
  uint64_t v14 = *((unsigned int *)a1 + 2);
  if (v14)
  {
    size_t v20 = result;
    uint64_t v15 = 16 * v14;
    do
    {
      int v16 = *(char **)&v13[v15 - 16];
      if (&v13[v15] != v16) {
        free(v16);
      }
      v15 -= 16;
    }
    while (v15);
    unint64_t v13 = *a1;
    __n128 result = v20;
  }
  if (v13 != (char *)(a1 + 2))
  {
    uint64_t v17 = result;
    free(v13);
    __n128 result = v17;
  }
  *a1 = (char *)result;
  *((_DWORD *)a1 + 2) = a2;
  *((_DWORD *)a1 + 3) = v8;
  return result;
}

void sub_1CBADFF58(void *a1)
{
  if (a1)
  {
    sub_1CBADFF58(*a1);
    sub_1CBADFF58(a1[1]);
    unint64_t v3 = (void *)a1[5];
    if (v3 != a1 + 7) {
      free(v3);
    }
    operator delete(a1);
  }
}

uint64_t sub_1CBADFFC8(uint64_t result, uint64_t a2, int *a3)
{
  uint64_t v3 = a2 + 8;
  unsigned int v4 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
  {
    int v5 = 4;
    uint64_t v6 = a2 + 8;
  }
  else
  {
    int v5 = *(_DWORD *)(a2 + 16);
    if (!v5)
    {
      unint64_t v9 = 0;
      unsigned int v13 = 0;
      goto LABEL_9;
    }
    uint64_t v6 = *(void *)(a2 + 8);
  }
  int v7 = v5 - 1;
  unsigned int v8 = (37 * *a3) & (v5 - 1);
  unint64_t v9 = (int *)(v6 + 4 * v8);
  int v10 = *v9;
  if (*a3 == *v9)
  {
LABEL_23:
    if (v4)
    {
      uint64_t v20 = 4;
    }
    else
    {
      uint64_t v3 = *(void *)(a2 + 8);
      uint64_t v20 = *(unsigned int *)(a2 + 16);
    }
    char v17 = 0;
    uint64_t v16 = v3 + 4 * v20;
    goto LABEL_16;
  }
  unint64_t v11 = 0;
  int v12 = 1;
  while (v10 != 0x7FFFFFFF)
  {
    if (v11) {
      BOOL v18 = 0;
    }
    else {
      BOOL v18 = v10 == 0x80000000;
    }
    if (v18) {
      unint64_t v11 = v9;
    }
    unsigned int v19 = v8 + v12++;
    unsigned int v8 = v19 & v7;
    unint64_t v9 = (int *)(v6 + 4 * (v19 & v7));
    int v10 = *v9;
    if (*a3 == *v9) {
      goto LABEL_23;
    }
  }
  if ((v4 & 1) != 0 && !v11) {
    goto LABEL_8;
  }
  if (v11) {
    unint64_t v9 = v11;
  }
  if (v4) {
LABEL_8:
  }
    unsigned int v13 = 4;
  else {
    unsigned int v13 = *(_DWORD *)(a2 + 16);
  }
LABEL_9:
  unsigned int v14 = v4 >> 1;
  if (4 * v14 + 4 >= 3 * v13)
  {
    v13 *= 2;
    goto LABEL_35;
  }
  if (v13 + ~v14 - *(_DWORD *)(a2 + 4) <= v13 >> 3)
  {
LABEL_35:
    uint64_t v22 = result;
    uint64_t v24 = a2;
    int v23 = a3;
    uint64_t v21 = a2 + 8;
    sub_1CD41D98C(a2, v13);
    int v25 = 0;
    sub_1CBAE0198(v24, *v23, &v25);
    uint64_t v3 = v21;
    __n128 result = v22;
    a3 = v23;
    a2 = v24;
    unint64_t v9 = v25;
  }
  *(_DWORD *)a2 += 2;
  if (*v9 != 0x7FFFFFFF) {
    --*(_DWORD *)(a2 + 4);
  }
  *unint64_t v9 = *a3;
  if (*(unsigned char *)a2)
  {
    uint64_t v15 = 4;
  }
  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v15 = *(unsigned int *)(a2 + 16);
  }
  uint64_t v16 = v3 + 4 * v15;
  char v17 = 1;
LABEL_16:
  *(void *)__n128 result = v9;
  *(void *)(result + 8) = v16;
  *(unsigned char *)(result + 16) = v17;
  return result;
}

uint64_t sub_1CBAE0198(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & (37 * a2);
  int v7 = (_DWORD *)(v3 + 4 * v6);
  int v8 = *v7;
  if (*v7 == a2)
  {
LABEL_15:
    uint64_t result = 1;
  }
  else
  {
    unint64_t v9 = 0;
    int v10 = 1;
    while (v8 != 0x7FFFFFFF)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == 0x80000000;
      }
      if (v12) {
        unint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      int v7 = (_DWORD *)(v3 + 4 * (v13 & v5));
      int v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_15;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_DWORD *sub_1CBAE0240@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v14 = 0;
  uint64_t result = (_DWORD *)sub_1CBAE02FC(a1, a2, &v14);
  int v7 = v14;
  if (result)
  {
    uint64_t v12 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v13 = 8;
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 8);
      uint64_t v13 = *(unsigned int *)(a1 + 16);
    }
    char v11 = 0;
    uint64_t v10 = v12 + 4 * v13;
  }
  else
  {
    uint64_t result = sub_1CBAE03A8((_DWORD *)a1, (uint64_t)a2, a2, v14);
    int v7 = result;
    *uint64_t result = *a2;
    uint64_t v8 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v9 = 8;
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = *(unsigned int *)(a1 + 16);
    }
    uint64_t v10 = v8 + 4 * v9;
    char v11 = 1;
  }
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v10;
  *(unsigned char *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_1CBAE02FC(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (37 * *a2) & (v4 - 1);
  int v7 = (_DWORD *)(v3 + 4 * v6);
  int v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_17:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != 0x7FFFFFFF)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == 0x80000000;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      int v7 = (_DWORD *)(v3 + 4 * (v13 & v5));
      int v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_17;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_DWORD *sub_1CBAE03A8(_DWORD *a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 8;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1CBAE0470((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CBAE02FC((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != 0x7FFFFFFF) {
    --a1[1];
  }
  return a4;
}

void sub_1CBAE0470(uint64_t a1, unsigned int a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v10 = *(llvm **)(a1 + 8);
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      uint64_t v12 = a2;
      *(void *)(a1 + 8) = llvm::allocate_buffer(4 * a2, (std::align_val_t)4uLL);
      *(void *)(a1 + 16) = v12;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CBAE05F4(a1, v10, (_DWORD *)v10 + v11);
    llvm::deallocate_buffer(v10, (void *)(4 * v11));
  }
  int v6 = v13;
  for (uint64_t i = 8; i != 40; i += 4)
  {
    int v8 = *(_DWORD *)(a1 + i);
    if ((v8 - 0x7FFFFFFF) >= 2) {
      *v6++ = v8;
    }
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = llvm::allocate_buffer(4 * a2, (std::align_val_t)4uLL);
    *(void *)(a1 + 16) = v9;
  }
  sub_1CBAE05F4(a1, v13, v6);
}

void sub_1CBAE05F4(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v6 = *(_DWORD *)a1;
  *(void *)a1 = *(_DWORD *)a1 & 1;
  if (v6)
  {
    int v8 = (void *)(a1 + 8);
    size_t v9 = 32;
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (!v7) {
      goto LABEL_5;
    }
    int v8 = *(void **)(a1 + 8);
    size_t v9 = 4 * v7;
  }
  memset_pattern16(v8, &unk_1CDB165A0, v9);
LABEL_5:
  while (a2 != a3)
  {
    if ((*a2 - 0x7FFFFFFF) >= 2)
    {
      int v10 = 0;
      sub_1CBAE02FC(a1, a2, &v10);
      *int v10 = *a2;
      *(_DWORD *)a1 += 2;
    }
    ++a2;
  }
}

unint64_t sub_1CBAE06B8(void *a1, unint64_t a2, unint64_t a3)
{
  if (a2 - 4 <= 4)
  {
    unint64_t v28 = *(unsigned int *)((char *)a1 + a2 - 4) ^ a3;
    unint64_t v10 = 0x9DDFEA08EB382D69;
    unint64_t v29 = 0x9DDFEA08EB382D69 * ((a2 + 8 * *(unsigned int *)a1) ^ v28);
    unint64_t v11 = v28 ^ (v29 >> 47) ^ v29;
    goto LABEL_6;
  }
  if (a2 - 9 <= 7)
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (*a1 ^ a3 ^ v4)) >> 47) ^ (0x9DDFEA08EB382D69 * (*a1 ^ a3 ^ v4)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (*a1 ^ a3 ^ v4)) >> 47) ^ (0x9DDFEA08EB382D69 * (*a1 ^ a3 ^ v4)))) >> 47))) ^ v3;
  }
  if (a2 - 17 <= 0xF)
  {
    uint64_t v6 = a1[1];
    unint64_t v7 = 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
    uint64_t v8 = __ROR8__(0xB492B66FBE98F273 * *a1 - v6, 43)
       - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)
       + __ROR8__(v7 ^ a3, 30);
    unint64_t v9 = a3 + a2 + __ROR8__(v6 ^ 0xC949D7C7509E6557, 20) - 0x4B6D499041670D8DLL * *a1 - v7;
    unint64_t v10 = 0x9DDFEA08EB382D69;
    unint64_t v11 = v9 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v9)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v9));
LABEL_6:
    unint64_t v12 = 0x9DDFEA08EB382D69 * v11;
    return (v12 ^ (v12 >> 47)) * v10;
  }
  if (a2 >= 0x21)
  {
    uint64_t v13 = *(void *)((char *)a1 + a2 - 16);
    uint64_t v14 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v15 = *a1 - 0x3C5A37A36834CED9 * (v13 + a2);
    uint64_t v17 = a1[2];
    uint64_t v16 = a1[3];
    uint64_t v18 = __ROR8__(v15 + v16, 52);
    uint64_t v19 = v15 + a1[1];
    uint64_t v20 = __ROR8__(v19, 7);
    uint64_t v21 = v19 + v17;
    uint64_t v22 = v20 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v13 + a2), 37) + v18 + __ROR8__(v21, 31);
    uint64_t v23 = *(void *)((char *)a1 + a2 - 32) + v17;
    uint64_t v24 = __ROR8__(v23 + v14, 52);
    uint64_t v25 = *(void *)((char *)a1 + a2 - 24) + v23 + v13;
    uint64_t v26 = v25 + v14;
    unint64_t v10 = 0x9AE16A3B2F90404FLL;
    unint64_t v27 = 0xC3A5C85C97CB3127 * (v26 + v22)
        - 0x651E95C4D06FBFB1
        * (v21 + v16
               + __ROR8__(v23, 37)
               + v24
               + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v23, 7)
               + __ROR8__(v25, 31));
    unint64_t v12 = ((0xC3A5C85C97CB3127 * (v27 ^ (v27 >> 47))) ^ a3) + v22;
    return (v12 ^ (v12 >> 47)) * v10;
  }
  if (!a2) {
    return a3 ^ 0x9AE16A3B2F90404FLL;
  }
  unint64_t v30 = (0x9AE16A3B2F90404FLL * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8))) ^ (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ a3;
  return 0x9AE16A3B2F90404FLL * (v30 ^ (v30 >> 47));
}

uint64_t sub_1CBAE093C()
{
  *(void *)&long long v3 = "Run even expensive verifiers for clique control flow utility functions";
  *((void *)&v3 + 1) = 70;
  char v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD41D15C((uint64_t)&unk_1EBCC03F0, "verify-clique-cfg", &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC03F0, &dword_1CB82C000);
}

void sub_1CBAE09BC(llvm *a1)
{
  llvm::initializeFunctionGroupInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  operator new();
}

void sub_1CBAE0A74()
{
}

uint64_t sub_1CBAE0B2C()
{
  return 0;
}

void sub_1CBAE0B34(llvm::Pass *this)
{
  *(void *)this = &unk_1F25F6868;
  uint64_t v2 = (char *)this + 64;
  long long v3 = (char *)*((void *)this + 11);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = (llvm::Pass *)*((void *)this + 7);
  if (v4 == (llvm::Pass *)((char *)this + 32))
  {
    (*(void (**)(char *))(*((void *)this + 4) + 32))((char *)this + 32);
  }
  else if (v4)
  {
    (*(void (**)(llvm::Pass *))(*(void *)v4 + 40))(v4);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CBAE0C4C(llvm::Pass *this)
{
  *(void *)this = &unk_1F25F6868;
  uint64_t v2 = (char *)this + 64;
  long long v3 = (char *)*((void *)this + 11);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = (llvm::Pass *)*((void *)this + 7);
  if (v4 == (llvm::Pass *)((char *)this + 32))
  {
    (*(void (**)(char *))(*((void *)this + 4) + 32))((char *)this + 32);
  }
  else if (v4)
  {
    (*(void (**)(llvm::Pass *))(*(void *)v4 + 40))(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBAE0D78()
{
  return "AGX3 Specific CodeGen Prepare";
}

void sub_1CBAE0D88(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 112;
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::ScalarEvolutionWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1CBAE0E58(uint64_t a1, uint64_t *a2)
{
  uint64_t v1221 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2[5];
  int v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_4:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::ScalarEvolutionWrapperPass::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_4;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  uint64_t v1167 = *(llvm::ScalarEvolution **)((*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  unint64_t v9 = *(uint64_t **)(a1 + 8);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v10 == v11)
  {
LABEL_9:
    uint64_t v12 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v10 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v10 += 16;
      if (v10 == v11) {
        goto LABEL_9;
      }
    }
    uint64_t v12 = *(void *)(v10 + 8);
  }
  uint64_t v1181 = (void **)(v4 + 272);
  uint64_t v13 = (const llvm::Instruction *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::DominatorTreeWrapperPass::ID)+ 32);
  uint64_t v14 = *(uint64_t **)(a1 + 8);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  if (v15 == v16)
  {
LABEL_14:
    uint64_t v17 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v15 != &llvm::LoopInfoWrapperPass::ID)
    {
      v15 += 16;
      if (v15 == v16) {
        goto LABEL_14;
      }
    }
    uint64_t v17 = *(void *)(v15 + 8);
  }
  uint64_t v18 = (uint64_t *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v17 + 96))(v17, &llvm::LoopInfoWrapperPass::ID)+ 32);
  uint64_t v19 = *(uint64_t **)(a1 + 8);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  if (v20 == v21)
  {
LABEL_19:
    uint64_t v22 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v20 != &llvm::FunctionGroupInfoWrapperPass::ID)
    {
      v20 += 16;
      if (v20 == v21) {
        goto LABEL_19;
      }
    }
    uint64_t v22 = *(void *)(v20 + 8);
  }
  uint64_t v23 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v22 + 96))(v22, &llvm::FunctionGroupInfoWrapperPass::ID);
  uint64_t v24 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(v23 + 32) + 24))(*(void *)(v23 + 32), a2);
  uint64_t v1185 = v1189;
  v1186 = v1189;
  v1187 = (llvm::Type *)8;
  int v1188 = 0;
  int v1214 = v1216;
  uint64_t v1215 = 0x400000000;
  int v25 = sub_1CD1016B0((uint64_t)a2, v1181, v13);
  int v26 = v25 | sub_1CD102C90((uint64_t)a2);
  int v27 = v26 | sub_1CD105194((uint64_t)a2, v13);
  int v28 = v27 | sub_1CD105760((uint64_t)a2, 0, 1u, 1, 1, v18);
  int v29 = v28 | sub_1CD106680((uint64_t)a2, v24, (uint64_t)v13, v18);
  uint64_t v30 = *(void *)(a1 + 88);
  if (v30 && (*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v30 + 48))(v30, a2)) {
    v29 |= sub_1CD107450(a2);
  }
  uint64_t v1158 = a1;
  v1159 = a2;
  unint64_t v31 = (uint64_t *)a2[10];
  unsigned int v1166 = a2 + 9;
  char __p = v29;
  if (v31 != a2 + 9)
  {
    while (1)
    {
      uint64_t v32 = v31 - 3;
      v1164 = v31;
      if (!v31) {
        uint64_t v32 = 0;
      }
      int v33 = v32 + 5;
      int v34 = (uint64_t *)v32[6];
      if (v34 != v32 + 5) {
        break;
      }
LABEL_1801:
      unint64_t v31 = (uint64_t *)v1164[1];
      if (v31 == v1166) {
        goto LABEL_1802;
      }
    }
    unint64_t v1168 = v32 + 5;
    while (1)
    {
      uint64_t v35 = (llvm::ValueAsMetadata *)(v34 - 3);
      if (v34) {
        uint64_t v36 = (llvm::ValueAsMetadata *)(v34 - 3);
      }
      else {
        uint64_t v36 = 0;
      }
      uint64_t v37 = v1185;
      if (v1186 == v1185)
      {
        int v38 = HIDWORD(v1187);
        uint64_t v39 = &v1186[8 * HIDWORD(v1187)];
        if (HIDWORD(v1187))
        {
          uint64_t v40 = 0;
          while (*(llvm::ValueAsMetadata **)&v1186[v40] != v36)
          {
            v40 += 8;
            if (8 * HIDWORD(v1187) == v40) {
              goto LABEL_51;
            }
          }
          uint64_t v39 = &v1186[v40];
        }
LABEL_51:
        uint64_t v37 = v1186;
      }
      else
      {
        int v41 = v1187 - 1;
        unsigned int v42 = (v1187 - 1) & ((v36 >> 4) ^ (v36 >> 9));
        uint64_t v39 = &v1186[8 * v42];
        unint64_t v43 = *(llvm::ValueAsMetadata **)v39;
        if (*(void *)v39 == -1)
        {
          uint64_t v44 = 0;
LABEL_77:
          if (v44) {
            uint64_t v39 = v44;
          }
          int v38 = HIDWORD(v1187);
          if (*(llvm::ValueAsMetadata **)v39 != v36) {
            uint64_t v39 = &v1186[8 * v1187];
          }
        }
        else
        {
          uint64_t v44 = 0;
          int v45 = 1;
          while (v43 != v36)
          {
            if (v44) {
              BOOL v46 = 0;
            }
            else {
              BOOL v46 = v43 == (llvm::ValueAsMetadata *)-2;
            }
            if (v46) {
              uint64_t v44 = v39;
            }
            unsigned int v47 = v42 + v45++;
            unsigned int v42 = v47 & v41;
            uint64_t v39 = &v1186[8 * (v47 & v41)];
            unint64_t v43 = *(llvm::ValueAsMetadata **)v39;
            if (*(void *)v39 == -1) {
              goto LABEL_77;
            }
          }
          int v38 = HIDWORD(v1187);
        }
      }
      char v48 = (void *)v34[1];
      if (v1186 == v37) {
        int v49 = v38;
      }
      else {
        int v49 = (int)v1187;
      }
      if (v39 != &v1186[8 * v49]) {
        goto LABEL_1240;
      }
      int v50 = *((unsigned __int8 *)v36 + 16);
      if (v50 == 85) {
        int v51 = (uint64_t **)v36;
      }
      else {
        int v51 = 0;
      }
      if (v34 && v50 == 85)
      {
        int v52 = *v51;
        if (*((_DWORD *)*v51 + 2) - 7 < 0xFFFFFFFB) {
          goto LABEL_155;
        }
        v1190 = 0;
        v1191 = 0;
        v1190 = (uint64_t **)*(v51 - 8);
        v1191 = (llvm::Value *)*(v51 - 4);
        if (sub_1CB8436A4((uint64_t)&v1190))
        {
          uint64_t v53 = 0;
          uint64_t v54 = **(void **)v36;
          uint64_t v1195 = &v1197;
          uint64_t v1196 = 0x200000000;
          uint64_t v1203 = v54;
          v1204 = &v1212;
          uint64_t v1205 = &v1213;
          uint64_t v1206 = 0;
          int v1207 = 0;
          __int16 v1208 = 512;
          char v1209 = 7;
          int v1201 = 0;
          uint64_t v1202 = 0;
          uint64_t v1210 = 0;
          uint64_t v1211 = 0;
          uint64_t v1212 = &unk_1F2616E88;
          uint64_t v1213 = &unk_1F2617008;
          int v1201 = (void *)*((void *)v36 + 5);
          uint64_t v1202 = (void **)((char *)v36 + 24);
          uint64_t v55 = (unsigned __int8 *)*((void *)v36 + 6);
          v1182[0] = (uint64_t)v55;
          if (v55)
          {
            llvm::MetadataTracking::track((uint64_t)v1182, v55, 2);
            uint64_t v53 = v1182[0];
          }
          sub_1CB8461A4((uint64_t)&v1195, 0, v53);
          if (v1182[0])
          {
            int v163 = *(unsigned __int8 *)v1182[0];
            if ((v163 - 4) > 0x1E)
            {
              if ((v163 - 3) >= 0xFFFFFFFE) {
                uint64_t v496 = v1182[0];
              }
              else {
                uint64_t v496 = 0;
              }
              if ((v163 - 3) < 0xFFFFFFFE)
              {
                if (v163 == 3) {
                  *(void *)(v1182[0] + 8) = 0;
                }
                goto LABEL_66;
              }
              unint64_t v165 = v496 + 8;
            }
            else
            {
              if ((*(unsigned char *)(v1182[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v1182[0] + 12)) {
                goto LABEL_66;
              }
              uint64_t v164 = *(void *)(v1182[0] + 16);
              if ((v164 & 4) == 0) {
                goto LABEL_66;
              }
              unint64_t v165 = v164 & 0xFFFFFFFFFFFFFFF8;
              if (!v165) {
                goto LABEL_66;
              }
            }
            v1217 = (void **)v1182;
            sub_1CC5FA668(v165 + 16, &v1217);
          }
LABEL_66:
          uint64_t v56 = (llvm::Value *)*(v51 - 12);
          __int16 v1220 = 257;
          Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v1195, v56, (llvm::Value *)v1190, v1191, (const llvm::Twine *)&v1217, 0);
          __int16 v1220 = 257;
          unint64_t v58 = sub_1CB843944((uint64_t)&v1195, (uint64_t)Select, v52, (uint64_t)&v1217);
          llvm::Value::doRAUW(v36, v58, (llvm::Value *)1);
          uint64_t v59 = v1186;
          uint64_t v60 = HIDWORD(v1187);
          if (v1186 == v1185)
          {
            if (HIDWORD(v1187))
            {
              size_t v61 = 0;
              uint64_t v62 = 8 * HIDWORD(v1187);
              unsigned int v63 = (llvm::ValueAsMetadata **)v1186;
              while (*v63 != v36)
              {
                if (*v63 == (llvm::ValueAsMetadata *)-2) {
                  size_t v61 = v63;
                }
                ++v63;
                v62 -= 8;
                if (!v62)
                {
                  if (v61) {
                    goto LABEL_1213;
                  }
                  goto LABEL_74;
                }
              }
              goto LABEL_1237;
            }
LABEL_74:
            unsigned int v64 = v1187;
            if (HIDWORD(v1187) < v1187) {
              goto LABEL_737;
            }
          }
          else
          {
            unsigned int v64 = v1187;
          }
          if (3 * v64 <= 4 * (HIDWORD(v1187) - v1188))
          {
            if (v64 >= 0x40) {
              v64 *= 2;
            }
            else {
              unsigned int v64 = 128;
            }
          }
          else if (v64 - HIDWORD(v1187) >= v64 >> 3)
          {
            goto LABEL_119;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v64);
          unsigned int v64 = v1187;
          uint64_t v59 = v1186;
LABEL_119:
          unsigned int v81 = v64 - 1;
          unsigned int v82 = (v64 - 1) & ((v36 >> 4) ^ (v36 >> 9));
          uint64_t v83 = (llvm::ValueAsMetadata **)&v59[v82];
          uint64_t v84 = *v83;
          if (*v83 != (llvm::ValueAsMetadata *)-1)
          {
            uint64_t v85 = 0;
            int v86 = 1;
            while (v84 != v36)
            {
              if (v85) {
                BOOL v87 = 0;
              }
              else {
                BOOL v87 = v84 == (llvm::ValueAsMetadata *)-2;
              }
              if (v87) {
                uint64_t v85 = v83;
              }
              unsigned int v88 = v82 + v86++;
              unsigned int v82 = v88 & v81;
              uint64_t v83 = (llvm::ValueAsMetadata **)&v59[v88 & v81];
              uint64_t v84 = *v83;
              if (*v83 == (llvm::ValueAsMetadata *)-1) {
                goto LABEL_1230;
              }
            }
            goto LABEL_1237;
          }
LABEL_1229:
          uint64_t v85 = 0;
LABEL_1230:
          if (v85) {
            uint64_t v715 = v85;
          }
          else {
            uint64_t v715 = v83;
          }
          if (*v715 != v36)
          {
            if (*v715 == (llvm::ValueAsMetadata *)-2) {
              --v1188;
            }
            else {
              ++HIDWORD(v1187);
            }
            char *v715 = v36;
          }
          goto LABEL_1237;
        }
        int v50 = *((unsigned __int8 *)v36 + 16);
      }
      if (v50 == 62) {
        uint64_t v65 = v36;
      }
      else {
        uint64_t v65 = 0;
      }
      if (!v34 || v50 != 62) {
        goto LABEL_131;
      }
      int v66 = *((_DWORD *)v65 + 5);
      uint64_t v67 = v66 & 0x7FFFFFF;
      unsigned int v68 = (v66 & 0x40000000) != 0
          ? (llvm::ValueAsMetadata *)*((void *)v65 - 1)
          : (llvm::ValueAsMetadata *)((char *)v65 - 32 * v67);
      uint64_t v69 = *((void *)v68 + 4 * (v67 - 1));
      unsigned int v70 = *(unsigned __int8 *)(v69 + 16);
      if (v69 && v70 >= 0x1C)
      {
        if (v70 == 67)
        {
          uint64_t v72 = *(unsigned __int8 **)(v69 - 32);
          unsigned int v70 = v72[16];
          if (v70 < 0x1C) {
            goto LABEL_155;
          }
          int v73 = 0;
        }
        else if (v70 == 68)
        {
          uint64_t v72 = *(unsigned __int8 **)(v69 - 32);
          unsigned int v70 = v72[16];
          if (v70 <= 0x1B) {
            goto LABEL_155;
          }
          int v73 = 1;
        }
        else
        {
          int v73 = 1;
          uint64_t v72 = (unsigned __int8 *)v69;
        }
        BOOL v1011 = v70 > 0x35;
        uint64_t v74 = (1 << v70) & 0x20220000000000;
        if (!v1011 && v74 != 0) {
          break;
        }
      }
LABEL_155:
      uint64_t v1195 = 0;
      v1217 = &v1195;
      if (sub_1CC04C34C(&v1217, (uint64_t)v36))
      {
        int v101 = v1195;
        if (v1195)
        {
          uint64_t v102 = *((void *)v1195 + 1);
          if (v102)
          {
            if (!*(void *)(v102 + 8))
            {
              int v103 = 0;
              uint64_t v104 = **(void **)v36;
              uint64_t v1195 = &v1197;
              uint64_t v1196 = 0x200000000;
              uint64_t v1203 = v104;
              v1204 = &v1212;
              uint64_t v1205 = &v1213;
              uint64_t v1206 = 0;
              int v1207 = 0;
              __int16 v1208 = 512;
              char v1209 = 7;
              int v1201 = 0;
              uint64_t v1202 = 0;
              uint64_t v1210 = 0;
              uint64_t v1211 = 0;
              uint64_t v1212 = &unk_1F2616E88;
              uint64_t v1213 = &unk_1F2617008;
              int v1201 = (void *)*((void *)v36 + 5);
              uint64_t v1202 = (void **)((char *)v36 + 24);
              int v105 = (llvm::Value *)*((void *)v36 + 6);
              v1190 = (uint64_t **)v105;
              if (v105)
              {
                llvm::MetadataTracking::track((uint64_t)&v1190, (unsigned __int8 *)v105, 2);
                int v103 = (llvm::Value *)v1190;
              }
              sub_1CB8461A4((uint64_t)&v1195, 0, (uint64_t)v103);
              if (v1190)
              {
                int v431 = *(unsigned __int8 *)v1190;
                if ((v431 - 4) > 0x1E)
                {
                  if ((v431 - 3) >= 0xFFFFFFFE) {
                    uint64_t v518 = (llvm::Value *)v1190;
                  }
                  else {
                    uint64_t v518 = 0;
                  }
                  if ((v431 - 3) < 0xFFFFFFFE)
                  {
                    if (v431 == 3) {
                      v1190[1] = 0;
                    }
                    goto LABEL_162;
                  }
                  unint64_t v433 = (unint64_t)v518 + 8;
                }
                else
                {
                  if ((*((unsigned char *)v1190 + 1) & 0x7F) != 2 && !*((_DWORD *)v1190 + 3)) {
                    goto LABEL_162;
                  }
                  uint64_t v432 = v1190[2];
                  if ((v432 & 4) == 0) {
                    goto LABEL_162;
                  }
                  unint64_t v433 = (unint64_t)v432 & 0xFFFFFFFFFFFFFFF8;
                  if (!v433) {
                    goto LABEL_162;
                  }
                }
                v1217 = (void **)&v1190;
                sub_1CC5FA668(v433 + 16, &v1217);
              }
LABEL_162:
              int v106 = *((unsigned __int8 *)v101 + 16);
              switch(v106)
              {
                case 5:
                  int v135 = *((unsigned __int16 *)v101 + 9);
                  if (v135 != 21)
                  {
                    if (v135 == 18)
                    {
                      int v136 = (uint64_t *)&v101[-8 * (v101[5] & 0x7FFFFFF)];
                      uint64_t v107 = *v136;
                      if (*v136)
                      {
                        uint64_t v108 = v136[4];
                        if (v108) {
                          goto LABEL_217;
                        }
                      }
                    }
                    goto LABEL_288;
                  }
                  uint64_t v169 = (uint64_t *)&v101[-8 * (v101[5] & 0x7FFFFFF)];
                  uint64_t v133 = *v169;
                  if (!*v169 || (uint64_t v134 = v169[4]) == 0)
                  {
LABEL_288:
                    int v170 = 1;
                    goto LABEL_289;
                  }
                  break;
                case 49:
                  uint64_t v133 = *((void *)v101 - 8);
                  if (!v133) {
                    goto LABEL_288;
                  }
                  uint64_t v134 = *((void *)v101 - 4);
                  if (!v134) {
                    goto LABEL_288;
                  }
                  break;
                case 46:
                  uint64_t v107 = *((void *)v101 - 8);
                  if (!v107) {
                    goto LABEL_288;
                  }
                  uint64_t v108 = *((void *)v101 - 4);
                  if (!v108) {
                    goto LABEL_288;
                  }
LABEL_217:
                  __int16 v1220 = 257;
                  uint64_t v137 = sub_1CB843FF8((uint64_t)&v1195, v107, (uint64_t)&v1217, 0);
                  __int16 v1220 = 257;
                  uint64_t v138 = (llvm::Value *)sub_1CB93098C((uint64_t)&v1195, (uint64_t)v137, v108, (llvm::Instruction *)v101, (uint64_t)&v1217);
                  if (!v138) {
                    goto LABEL_288;
                  }
LABEL_278:
                  llvm::Value::doRAUW(v36, v138, (llvm::Value *)1);
                  uint64_t v172 = v1186;
                  uint64_t v173 = HIDWORD(v1187);
                  if (v1186 == v1185)
                  {
                    if (HIDWORD(v1187))
                    {
                      uint64_t v174 = 0;
                      uint64_t v175 = 8 * HIDWORD(v1187);
                      uint64_t v176 = (llvm::ValueAsMetadata **)v1186;
                      while (*v176 != v36)
                      {
                        if (*v176 == (llvm::ValueAsMetadata *)-2) {
                          uint64_t v174 = v176;
                        }
                        ++v176;
                        v175 -= 8;
                        if (!v175)
                        {
                          if (!v174) {
                            goto LABEL_286;
                          }
                          uint64_t *v174 = v36;
                          --v1188;
                          break;
                        }
                      }
LABEL_814:
                      uint64_t v502 = v1186;
                      uint64_t v503 = HIDWORD(v1187);
                      unsigned int v504 = v1187;
                      if (v1186 == v1185)
                      {
                        if (HIDWORD(v1187))
                        {
                          uint64_t v505 = 0;
                          uint64_t v506 = 8 * HIDWORD(v1187);
                          uint64_t v507 = v1186;
                          while ((_DWORD *)*v507 != v101)
                          {
                            if (*v507 == -2) {
                              uint64_t v505 = v507;
                            }
                            ++v507;
                            v506 -= 8;
                            if (!v506)
                            {
                              if (!v505) {
                                goto LABEL_822;
                              }
                              int v170 = 0;
                              *uint64_t v505 = v101;
                              --v1188;
                              goto LABEL_846;
                            }
                          }
                          goto LABEL_845;
                        }
LABEL_822:
                        if (v1187 > HIDWORD(v1187))
                        {
                          int v170 = 0;
                          ++HIDWORD(v1187);
                          *(void *)&v1186[8 * v503] = v101;
                          goto LABEL_846;
                        }
                      }
                      if (3 * (int)v1187 <= (4 * (HIDWORD(v1187) - v1188)))
                      {
                        if (v1187 >= 0x40) {
                          unsigned int v504 = 2 * v1187;
                        }
                        else {
                          unsigned int v504 = 128;
                        }
                      }
                      else if ((int)v1187 - HIDWORD(v1187) >= v1187 >> 3)
                      {
                        goto LABEL_826;
                      }
                      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v504);
                      unsigned int v504 = v1187;
                      uint64_t v502 = v1186;
LABEL_826:
                      unsigned int v508 = v504 - 1;
                      unsigned int v509 = (v504 - 1) & ((v101 >> 4) ^ (v101 >> 9));
                      int v510 = &v502[8 * v509];
                      uint64_t v511 = *(_DWORD **)v510;
                      if (*(void *)v510 != -1)
                      {
                        uint64_t v512 = 0;
                        int v513 = 1;
                        while (v511 != v101)
                        {
                          if (v512) {
                            BOOL v514 = 0;
                          }
                          else {
                            BOOL v514 = v511 == (_DWORD *)-2;
                          }
                          if (v514) {
                            uint64_t v512 = (void **)v510;
                          }
                          unsigned int v515 = v509 + v513++;
                          unsigned int v509 = v515 & v508;
                          int v510 = &v502[8 * (v515 & v508)];
                          uint64_t v511 = *(_DWORD **)v510;
                          if (*(void *)v510 == -1) {
                            goto LABEL_838;
                          }
                        }
                        goto LABEL_845;
                      }
                      uint64_t v512 = 0;
LABEL_838:
                      if (v512) {
                        uint64_t v516 = v512;
                      }
                      else {
                        uint64_t v516 = (void **)v510;
                      }
                      if (*v516 == v101)
                      {
LABEL_845:
                        int v170 = 0;
                      }
                      else
                      {
                        if (*v516 == (void *)-2) {
                          --v1188;
                        }
                        else {
                          ++HIDWORD(v1187);
                        }
                        int v170 = 0;
                        *uint64_t v516 = v101;
                      }
LABEL_846:
                      char __p = 1;
LABEL_289:
                      if (v1195 == &v1197)
                      {
                        if (!v170) {
                          goto LABEL_1240;
                        }
                      }
                      else
                      {
                        free(v1195);
                        if (!v170) {
                          goto LABEL_1240;
                        }
                      }
                      goto LABEL_291;
                    }
LABEL_286:
                    unsigned int v177 = v1187;
                    if (HIDWORD(v1187) < v1187)
                    {
                      ++HIDWORD(v1187);
                      *(void *)&v1186[8 * v173] = v36;
                      goto LABEL_814;
                    }
                  }
                  else
                  {
                    unsigned int v177 = v1187;
                  }
                  if (3 * v177 <= 4 * (HIDWORD(v1187) - v1188))
                  {
                    if (v177 >= 0x40) {
                      v177 *= 2;
                    }
                    else {
                      unsigned int v177 = 128;
                    }
                  }
                  else if (v177 - HIDWORD(v1187) >= v177 >> 3)
                  {
                    goto LABEL_690;
                  }
                  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v177);
                  unsigned int v177 = v1187;
                  uint64_t v172 = v1186;
LABEL_690:
                  unsigned int v434 = v177 - 1;
                  unsigned int v435 = (v177 - 1) & ((v36 >> 4) ^ (v36 >> 9));
                  v436 = &v172[8 * v435];
                  uint64_t v437 = *(llvm::ValueAsMetadata **)v436;
                  if (*(void *)v436 == -1)
                  {
                    unint64_t v438 = 0;
LABEL_807:
                    if (v438) {
                      uint64_t v501 = (llvm::ValueAsMetadata **)v438;
                    }
                    else {
                      uint64_t v501 = (llvm::ValueAsMetadata **)v436;
                    }
                    if (*v501 != v36)
                    {
                      if (*v501 == (llvm::ValueAsMetadata *)-2) {
                        --v1188;
                      }
                      else {
                        ++HIDWORD(v1187);
                      }
                      *uint64_t v501 = v36;
                    }
                  }
                  else
                  {
                    unint64_t v438 = 0;
                    int v439 = 1;
                    while (v437 != v36)
                    {
                      if (v438) {
                        BOOL v440 = 0;
                      }
                      else {
                        BOOL v440 = v437 == (llvm::ValueAsMetadata *)-2;
                      }
                      if (v440) {
                        unint64_t v438 = v436;
                      }
                      unsigned int v441 = v435 + v439++;
                      unsigned int v435 = v441 & v434;
                      v436 = &v172[8 * (v441 & v434)];
                      uint64_t v437 = *(llvm::ValueAsMetadata **)v436;
                      if (*(void *)v436 == -1) {
                        goto LABEL_807;
                      }
                    }
                  }
                  goto LABEL_814;
                default:
                  goto LABEL_288;
              }
              if (*(unsigned char *)(v133 + 16) != 17 || (sub_1CB844168(v133, 1.0) & 1) == 0)
              {
                __int16 v1220 = 257;
                uint64_t v171 = sub_1CB843FF8((uint64_t)&v1195, v133, (uint64_t)&v1217, 0);
                __int16 v1220 = 257;
                uint64_t v138 = (llvm::Value *)sub_1CB9307D8((uint64_t)&v1195, (uint64_t)v171, v134, (llvm::Instruction *)v101, (uint64_t)&v1217);
                if (!v138) {
                  goto LABEL_288;
                }
                goto LABEL_278;
              }
              int v170 = 1;
              goto LABEL_289;
            }
          }
        }
      }
LABEL_291:
      int v178 = *((unsigned __int8 *)v36 + 16);
      if (v178 == 60) {
        unint64_t v179 = v36;
      }
      else {
        unint64_t v179 = 0;
      }
      if (v34 && v178 == 60)
      {
        uint64_t v180 = **((void **)v179 - 4);
        int v181 = *(_DWORD *)(v180 + 8);
        int v182 = v181;
        if ((v181 & 0xFE) == 0x12) {
          int v182 = *(_DWORD *)(**(void **)(v180 + 16) + 8);
        }
        uint64_t v183 = *(void *)v179;
        if ((v182 & 0xFFFFFF00) == 0x4000)
        {
          uint64_t v185 = sub_1CB83544C((uint64_t)v1181, *(void *)v179);
          if (v184 == 1) {
          if (((v185 + 7) & 0xFFFFFFFFFFFFFFF8) > 0x40)
          }
          {
            unint64_t v1169 = v48;
            uint64_t v187 = sub_1CB83544C((uint64_t)v1181, v183);
            if (v186 == 1) {
            uint64_t v188 = 0;
            }
            uint64_t v189 = **(void **)v36;
            uint64_t v1195 = &v1197;
            uint64_t v1196 = 0x200000000;
            uint64_t v1203 = v189;
            v1204 = &v1212;
            uint64_t v1205 = &v1213;
            uint64_t v1206 = 0;
            int v1207 = 0;
            __int16 v1208 = 512;
            char v1209 = 7;
            int v1201 = 0;
            uint64_t v1202 = 0;
            uint64_t v1210 = 0;
            uint64_t v1211 = 0;
            uint64_t v1212 = &unk_1F2616E88;
            uint64_t v1213 = &unk_1F2617008;
            int v1201 = (void *)*((void *)v36 + 5);
            uint64_t v1202 = (void **)((char *)v36 + 24);
            unsigned int v190 = (llvm::Value *)*((void *)v36 + 6);
            v1190 = (uint64_t **)v190;
            if (v190)
            {
              llvm::MetadataTracking::track((uint64_t)&v1190, (unsigned __int8 *)v190, 2);
              uint64_t v188 = (llvm::Value *)v1190;
            }
            sub_1CB8461A4((uint64_t)&v1195, 0, (uint64_t)v188);
            if (v1190)
            {
              int v428 = *(unsigned __int8 *)v1190;
              if ((v428 - 4) > 0x1E)
              {
                if ((v428 - 3) >= 0xFFFFFFFE) {
                  uint64_t v517 = (llvm::Value *)v1190;
                }
                else {
                  uint64_t v517 = 0;
                }
                if ((v428 - 3) < 0xFFFFFFFE)
                {
                  if (v428 == 3) {
                    v1190[1] = 0;
                  }
                  goto LABEL_307;
                }
                unint64_t v430 = (unint64_t)v517 + 8;
              }
              else
              {
                if ((*((unsigned char *)v1190 + 1) & 0x7F) != 2 && !*((_DWORD *)v1190 + 3)) {
                  goto LABEL_307;
                }
                unint64_t v429 = v1190[2];
                if ((v429 & 4) == 0) {
                  goto LABEL_307;
                }
                unint64_t v430 = (unint64_t)v429 & 0xFFFFFFFFFFFFFFF8;
                if (!v430) {
                  goto LABEL_307;
                }
              }
              v1217 = (void **)&v1190;
              sub_1CC5FA668(v430 + 16, &v1217);
            }
LABEL_307:
            int v191 = (unsigned __int8 *)*((void *)v179 - 4);
            unint64_t v192 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v1203 + 1960), (llvm::Type *)0x40);
            __int16 v1194 = 257;
            if (*(void *)v191 != v192)
            {
              if (v191[16] <= 0x14u)
              {
                uint64_t v271 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v1204 + 28))(v1204, 49, v191, v192);
                int v191 = (unsigned __int8 *)v271;
                if (v271)
                {
                  if (*(unsigned __int8 *)(v271 + 16) >= 0x1Cu)
                  {
                    (*((void (**)(void **, uint64_t, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v271, &v1190, v1201, v1202);
                    if (v1196)
                    {
                      unint64_t v924 = (llvm::MDNode **)v1195;
                      uint64_t v925 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v191, *(_DWORD *)v924, v924[1]);
                        v924 += 2;
                      }
                      while (v924 != v925);
                    }
                  }
                }
              }
              else
              {
                __int16 v1220 = 257;
                int v191 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v191, v192, (const char **)&v1217, 0);
                (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v191, &v1190, v1201, v1202);
                if (v1196)
                {
                  uint64_t v193 = (llvm::MDNode **)v1195;
                  unsigned __int16 v194 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v191, *(_DWORD *)v193, v193[1]);
                    v193 += 2;
                  }
                  while (v193 != v194);
                }
              }
            }
            unint64_t v272 = v187 + 7;
            llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(void *)v1203 + 1960), (llvm::Type *)((unint64_t)(v187 + 7) >> 5));
            uint64_t v275 = (unsigned __int8 *)llvm::UndefValue::get(v273, v274);
            if (((unint64_t)(v187 + 7) >> 5))
            {
              uint64_t v276 = 0;
              uint64_t v277 = (v272 >> 5);
              do
              {
                uint64_t v278 = *(void *)v1203 + 1960;
                __int16 v1220 = 257;
                uint64_t v279 = sub_1CB844364((uint64_t *)&v1195, v278, (const llvm::APInt *)v191, v276, (uint64_t)&v1217);
                uint64_t v280 = (llvm::Type *)(*(void *)v1203 + 1960);
                __int16 v1194 = 257;
                char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v1201[7] + 40) + 272), v280, 1);
                uint64_t v282 = operator new(0x60uLL);
                v282[13] = v282[13] & 0x38000000 | 1;
                uint64_t v283 = (llvm::Instruction *)(v282 + 8);
                *(void *)uint64_t v282 = 0;
                *((void *)v282 + 1) = 0;
                *((void *)v282 + 2) = 0;
                *((void *)v282 + 3) = v282 + 8;
                __int16 v1220 = 257;
                llvm::LoadInst::LoadInst((llvm::Value *)(v282 + 8), (uint64_t)v280, (uint64_t)v279, (const char **)&v1217, 0, Alignment, 0);
                (*((void (**)(void **, llvm::Instruction *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v283, &v1190, v1201, v1202);
                if (v1196)
                {
                  int v289 = (llvm::MDNode **)v1195;
                  unsigned int v290 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                  do
                  {
                    llvm::Instruction::setMetadata(v283, *(_DWORD *)v289, v289[1]);
                    v289 += 2;
                  }
                  while (v289 != v290);
                }
                uint64_t v285 = *(llvm::ConstantInt **)(*(void *)v1203 + 1960);
                unsigned int v286 = *(_DWORD *)(*(void *)v1203 + 1968);
                LODWORD(v1218) = v286 >> 8;
                if (v286 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v286 <= 0xFF) {
                  unint64_t v287 = 0;
                }
                else {
                  unint64_t v287 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v286) + 63);
                }
                v1217 = (void **)(v287 & v276);
                uint64_t v288 = (unsigned __int8 *)llvm::ConstantInt::get(v285, (llvm::LLVMContext *)&v1217, v284);
                if (v1218 >= 0x41 && v1217) {
                  MEMORY[0x1D25D9CB0](v1217, 0x1000C8000313F17);
                }
                __int16 v1220 = 257;
                uint64_t v275 = (unsigned __int8 *)sub_1CB84478C((uint64_t)&v1195, v275, (unsigned __int8 *)v283, v288, (uint64_t)&v1217);
                ++v276;
              }
              while (v276 != v277);
            }
            __int16 v1194 = 257;
            if (*(void *)v275 != v183)
            {
              int v33 = v1168;
              char v48 = v1169;
              if (v275[16] > 0x14u)
              {
                __int16 v1220 = 257;
                uint64_t v275 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v275, v183, (const char **)&v1217, 0);
                (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v275, &v1190, v1201, v1202);
                if (v1196)
                {
                  uint64_t v291 = (llvm::MDNode **)v1195;
                  unsigned int v292 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v275, *(_DWORD *)v291, v291[1]);
                    v291 += 2;
                  }
                  while (v291 != v292);
                }
LABEL_454:
                llvm::Value::doRAUW(v36, (llvm::Value *)v275, (llvm::Value *)1);
                uint64_t v59 = v1186;
                uint64_t v60 = HIDWORD(v1187);
                if (v1186 == v1185)
                {
                  if (HIDWORD(v1187))
                  {
                    size_t v61 = 0;
                    uint64_t v294 = 8 * HIDWORD(v1187);
                    unsigned int v295 = (llvm::ValueAsMetadata **)v1186;
                    while (*v295 != v36)
                    {
                      if (*v295 == (llvm::ValueAsMetadata *)-2) {
                        size_t v61 = v295;
                      }
                      ++v295;
                      v294 -= 8;
                      if (!v294)
                      {
                        if (v61) {
                          goto LABEL_1213;
                        }
                        goto LABEL_462;
                      }
                    }
                    goto LABEL_1237;
                  }
LABEL_462:
                  unsigned int v296 = v1187;
                  if (HIDWORD(v1187) < v1187) {
                    goto LABEL_737;
                  }
                }
                else
                {
                  unsigned int v296 = v1187;
                }
                if (3 * v296 <= 4 * (HIDWORD(v1187) - v1188))
                {
                  if (v296 >= 0x40) {
                    v296 *= 2;
                  }
                  else {
                    unsigned int v296 = 128;
                  }
                }
                else if (v296 - HIDWORD(v1187) >= v296 >> 3)
                {
LABEL_467:
                  unsigned int v297 = v296 - 1;
                  unsigned int v298 = (v296 - 1) & ((v36 >> 4) ^ (v36 >> 9));
                  uint64_t v83 = (llvm::ValueAsMetadata **)&v59[v298];
                  int v299 = *v83;
                  if (*v83 != (llvm::ValueAsMetadata *)-1)
                  {
                    uint64_t v85 = 0;
                    int v300 = 1;
                    while (v299 != v36)
                    {
                      if (v85) {
                        BOOL v301 = 0;
                      }
                      else {
                        BOOL v301 = v299 == (llvm::ValueAsMetadata *)-2;
                      }
                      if (v301) {
                        uint64_t v85 = v83;
                      }
                      unsigned int v302 = v298 + v300++;
                      unsigned int v298 = v302 & v297;
                      uint64_t v83 = (llvm::ValueAsMetadata **)&v59[v302 & v297];
                      int v299 = *v83;
                      if (*v83 == (llvm::ValueAsMetadata *)-1) {
                        goto LABEL_1230;
                      }
                    }
                    goto LABEL_1237;
                  }
                  goto LABEL_1229;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v296);
                unsigned int v296 = v1187;
                uint64_t v59 = v1186;
                goto LABEL_467;
              }
              uint64_t v275 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v1204
                                         + 28))(v1204, 49, v275, v183);
              if (v275) {
                BOOL v293 = v275[16] >= 0x1Cu;
              }
              else {
                BOOL v293 = 0;
              }
              if (!v293) {
                goto LABEL_454;
              }
              (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v275, &v1190, v1201, v1202);
              if (v1196)
              {
                v938 = (llvm::MDNode **)v1195;
                uint64_t v939 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v275, *(_DWORD *)v938, v938[1]);
                  v938 += 2;
                }
                while (v938 != v939);
              }
            }
            int v33 = v1168;
            char v48 = v1169;
            goto LABEL_454;
          }
          uint64_t v180 = **((void **)v179 - 4);
          int v181 = *(_DWORD *)(v180 + 8);
        }
        if ((v181 & 0xFE) == 0x12) {
          int v181 = *(_DWORD *)(**(void **)(v180 + 16) + 8);
        }
        if ((v181 & 0xFFFFFF00) == 0x4000
          && (*(_DWORD *)(v183 + 8) & 0xFE) == 0x12
          && *(_DWORD *)(*(void *)(v183 + 24) + 8) == 2061
          && *(_DWORD *)(v183 + 32) == 3)
        {
          unint64_t v195 = 0;
          uint64_t v196 = **(void **)v36;
          uint64_t v1195 = &v1197;
          uint64_t v1196 = 0x200000000;
          uint64_t v1203 = v196;
          v1204 = &v1212;
          uint64_t v1205 = &v1213;
          uint64_t v1206 = 0;
          int v1207 = 0;
          __int16 v1208 = 512;
          char v1209 = 7;
          int v1201 = 0;
          uint64_t v1202 = 0;
          uint64_t v1210 = 0;
          uint64_t v1211 = 0;
          uint64_t v1212 = &unk_1F2616E88;
          uint64_t v1213 = &unk_1F2617008;
          int v1201 = (void *)*((void *)v36 + 5);
          uint64_t v1202 = (void **)((char *)v36 + 24);
          unsigned int v197 = (llvm::Value *)*((void *)v36 + 6);
          v1190 = (uint64_t **)v197;
          if (v197)
          {
            llvm::MetadataTracking::track((uint64_t)&v1190, (unsigned __int8 *)v197, 2);
            unint64_t v195 = (llvm::Value *)v1190;
          }
          sub_1CB8461A4((uint64_t)&v1195, 0, (uint64_t)v195);
          if (v1190)
          {
            int v548 = *(unsigned __int8 *)v1190;
            if ((v548 - 4) > 0x1E)
            {
              if ((v548 - 3) >= 0xFFFFFFFE) {
                uint64_t v572 = (llvm::Value *)v1190;
              }
              else {
                uint64_t v572 = 0;
              }
              if ((v548 - 3) < 0xFFFFFFFE)
              {
                if (v548 == 3) {
                  v1190[1] = 0;
                }
                goto LABEL_323;
              }
              unint64_t v550 = (unint64_t)v572 + 8;
            }
            else
            {
              if ((*((unsigned char *)v1190 + 1) & 0x7F) != 2 && !*((_DWORD *)v1190 + 3)) {
                goto LABEL_323;
              }
              uint64_t v549 = v1190[2];
              if ((v549 & 4) == 0) {
                goto LABEL_323;
              }
              unint64_t v550 = (unint64_t)v549 & 0xFFFFFFFFFFFFFFF8;
              if (!v550) {
                goto LABEL_323;
              }
            }
            v1217 = (void **)&v1190;
            sub_1CC5FA668(v550 + 16, &v1217);
          }
LABEL_323:
          uint64_t v1170 = v48;
          uint64_t v198 = (llvm::PointerType *)v183;
          if ((*(_DWORD *)(v183 + 8) & 0xFE) == 0x12) {
            uint64_t v198 = **(llvm::PointerType ***)(v183 + 16);
          }
          uint64_t v199 = **((void **)v179 - 4);
          unsigned int v200 = *(_DWORD *)(v199 + 8);
          if ((v200 & 0xFE) == 0x12) {
            unsigned int v200 = *(_DWORD *)(**(void **)(v199 + 16) + 8);
          }
          unint64_t v201 = llvm::PointerType::get(v198, (llvm::Type *)(v200 >> 8));
          int v202 = (unsigned __int8 *)*((void *)v179 - 4);
          __int16 v1194 = 257;
          if (*(void *)v202 == v201) {
            goto LABEL_654;
          }
          if (v202[16] > 0x14u)
          {
            int v203 = (llvm::UndefValue *)v183;
            __int16 v1220 = 257;
            int v202 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v202, v201, (const char **)&v1217, 0);
            (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v202, &v1190, v1201, v1202);
            if (v1196)
            {
              uint64_t v204 = (llvm::MDNode **)v1195;
              unsigned int v205 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v202, *(_DWORD *)v204, v204[1]);
                v204 += 2;
              }
              while (v204 != v205);
            }
            goto LABEL_714;
          }
          uint64_t v425 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v1204 + 28))(v1204, 49, v202, v201);
          int v202 = (unsigned __int8 *)v425;
          if (!v425)
          {
LABEL_654:
            int v203 = (llvm::UndefValue *)v183;
            goto LABEL_714;
          }
          int v203 = (llvm::UndefValue *)v183;
          if (*(unsigned __int8 *)(v425 + 16) >= 0x1Cu)
          {
            (*((void (**)(void **, uint64_t, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v425, &v1190, v1201, v1202);
            if (v1196)
            {
              v936 = (llvm::MDNode **)v1195;
              uint64_t v937 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v202, *(_DWORD *)v936, v936[1]);
                v936 += 2;
              }
              while (v936 != v937);
            }
          }
LABEL_714:
          __int16 v1220 = 257;
          uint64_t v448 = sub_1CB844364((uint64_t *)&v1195, (uint64_t)v198, (const llvm::APInt *)v202, 2, (uint64_t)&v1217);
          __int16 v1194 = 257;
          uint64_t v449 = operator new(0x60uLL);
          v449[13] = v449[13] & 0x38000000 | 1;
          uint64_t v450 = (llvm::Instruction *)(v449 + 8);
          *(void *)uint64_t v449 = 0;
          *((void *)v449 + 1) = 0;
          *((void *)v449 + 2) = 0;
          *((void *)v449 + 3) = v449 + 8;
          __int16 v1220 = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v449 + 8), (uint64_t)v198, (uint64_t)v448, (const char **)&v1217, 0, 0, 0);
          (*((void (**)(void **, llvm::Instruction *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v450, &v1190, v1201, v1202);
          if (v1196)
          {
            uint64_t v519 = (llvm::MDNode **)v1195;
            uint64_t v520 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
            do
            {
              llvm::Instruction::setMetadata(v450, *(_DWORD *)v519, v519[1]);
              v519 += 2;
            }
            while (v519 != v520);
          }
          llvm::FixedVectorType::get(v198, (llvm::Type *)2);
          uint64_t v452 = (uint64_t)v451;
          uint64_t v453 = **((void **)v179 - 4);
          unsigned int v454 = *(_DWORD *)(v453 + 8);
          if ((v454 & 0xFE) == 0x12) {
            unsigned int v454 = *(_DWORD *)(**(void **)(v453 + 16) + 8);
          }
          unint64_t v455 = llvm::PointerType::get(v451, (llvm::Type *)(v454 >> 8));
          uint64_t v456 = (unsigned __int8 *)*((void *)v179 - 4);
          __int16 v1194 = 257;
          if (*(void *)v456 != v455)
          {
            if (v456[16] <= 0x14u)
            {
              uint64_t v456 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v1204
                                         + 28))(v1204, 49, v456, v455);
              if (v456) {
                BOOL v459 = v456[16] >= 0x1Cu;
              }
              else {
                BOOL v459 = 0;
              }
              if (v459)
              {
                (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v456, &v1190, v1201, v1202);
                if (v1196)
                {
                  int v934 = (llvm::MDNode **)v1195;
                  v935 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v456, *(_DWORD *)v934, v934[1]);
                    v934 += 2;
                  }
                  while (v934 != v935);
                }
              }
            }
            else
            {
              __int16 v1220 = 257;
              uint64_t v456 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v456, v455, (const char **)&v1217, 0);
              (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v456, &v1190, v1201, v1202);
              if (v1196)
              {
                uint64_t v457 = (llvm::MDNode **)v1195;
                uint64_t v458 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v456, *(_DWORD *)v457, v457[1]);
                  v457 += 2;
                }
                while (v457 != v458);
              }
            }
          }
          unint64_t v460 = *((unsigned __int16 *)v179 + 9);
          __int16 v1194 = 257;
          uint64_t v461 = operator new(0x60uLL);
          v461[13] = v461[13] & 0x38000000 | 1;
          uint64_t v462 = (llvm::Instruction *)(v461 + 8);
          *(void *)uint64_t v461 = 0;
          *((void *)v461 + 1) = 0;
          *((void *)v461 + 2) = 0;
          *((void *)v461 + 3) = v461 + 8;
          __int16 v1220 = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v461 + 8), v452, (uint64_t)v456, (const char **)&v1217, 0, (v460 >> 1) & 0x3F, 0);
          (*((void (**)(void **, llvm::Instruction *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v462, &v1190, v1201, v1202);
          if (v1196)
          {
            uint64_t v521 = (llvm::MDNode **)v1195;
            uint64_t v522 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
            do
            {
              llvm::Instruction::setMetadata(v462, *(_DWORD *)v521, v521[1]);
              v521 += 2;
            }
            while (v521 != v522);
          }
          uint64_t v463 = (llvm::ConstantInt *)(***(void ***)v36 + 1960);
          v464 = (unsigned __int8 *)llvm::ConstantInt::get(v463, 0, 0);
          __int16 v1220 = 257;
          uint64_t v465 = (unsigned __int8 *)sub_1CB8445F4((uint64_t)&v1195, (unsigned __int8 *)v462, v464, (uint64_t)&v1217);
          uint64_t v466 = (unsigned __int8 *)llvm::ConstantInt::get(v463, 1uLL, 0);
          __int16 v1220 = 257;
          uint64_t v467 = (unsigned __int8 *)sub_1CB8445F4((uint64_t)&v1195, (unsigned __int8 *)v462, v466, (uint64_t)&v1217);
          uint64_t v469 = (unsigned __int8 *)llvm::UndefValue::get(v203, v468);
          __int16 v1220 = 257;
          uint64_t v470 = (unsigned __int8 *)sub_1CB84478C((uint64_t)&v1195, v469, v465, v464, (uint64_t)&v1217);
          __int16 v1220 = 257;
          uint64_t v471 = (unsigned __int8 *)sub_1CB84478C((uint64_t)&v1195, v470, v467, v466, (uint64_t)&v1217);
          v472 = (unsigned __int8 *)llvm::ConstantInt::get(v463, 2uLL, 0);
          __int16 v1220 = 257;
          uint64_t v473 = sub_1CB84478C((uint64_t)&v1195, v471, (unsigned __int8 *)v450, v472, (uint64_t)&v1217);
          llvm::Value::doRAUW(v36, v473, (llvm::Value *)1);
          uint64_t v59 = v1186;
          uint64_t v60 = HIDWORD(v1187);
          if (v1186 == v1185)
          {
            int v33 = v1168;
            char v48 = v1170;
            if (HIDWORD(v1187))
            {
              size_t v61 = 0;
              uint64_t v474 = 8 * HIDWORD(v1187);
              uint64_t v475 = (llvm::ValueAsMetadata **)v1186;
              while (*v475 != v36)
              {
                if (*v475 == (llvm::ValueAsMetadata *)-2) {
                  size_t v61 = v475;
                }
                ++v475;
                v474 -= 8;
                if (!v474)
                {
                  if (v61) {
                    goto LABEL_1213;
                  }
                  goto LABEL_736;
                }
              }
              goto LABEL_1237;
            }
LABEL_736:
            unsigned int v476 = v1187;
            if (HIDWORD(v1187) < v1187) {
              goto LABEL_737;
            }
          }
          else
          {
            unsigned int v476 = v1187;
            int v33 = v1168;
            char v48 = v1170;
          }
          if (3 * v476 <= 4 * (HIDWORD(v1187) - v1188))
          {
            if (v476 >= 0x40) {
              v476 *= 2;
            }
            else {
              unsigned int v476 = 128;
            }
          }
          else if (v476 - HIDWORD(v1187) >= v476 >> 3)
          {
            goto LABEL_741;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v476);
          unsigned int v476 = v1187;
          uint64_t v59 = v1186;
LABEL_741:
          unsigned int v477 = v476 - 1;
          unsigned int v478 = (v476 - 1) & ((v36 >> 4) ^ (v36 >> 9));
          uint64_t v83 = (llvm::ValueAsMetadata **)&v59[v478];
          uint64_t v479 = *v83;
          if (*v83 != (llvm::ValueAsMetadata *)-1)
          {
            uint64_t v85 = 0;
            int v480 = 1;
            while (v479 != v36)
            {
              if (v85) {
                BOOL v481 = 0;
              }
              else {
                BOOL v481 = v479 == (llvm::ValueAsMetadata *)-2;
              }
              if (v481) {
                uint64_t v85 = v83;
              }
              unsigned int v482 = v478 + v480++;
              unsigned int v478 = v482 & v477;
              uint64_t v83 = (llvm::ValueAsMetadata **)&v59[v482 & v477];
              uint64_t v479 = *v83;
              if (*v83 == (llvm::ValueAsMetadata *)-1) {
                goto LABEL_1230;
              }
            }
            goto LABEL_1237;
          }
          goto LABEL_1229;
        }
        if (*(unsigned char *)(*(void *)v179 + 8) == 13)
        {
          uint64_t v207 = sub_1CB83544C((uint64_t)v1181, *(void *)v179);
          if (v206 == 1) {
          if (((v207 + 7) & 0xFFFFFFFFFFFFFFF8) >= 0x41)
          }
          {
            int v208 = 0;
            uint64_t v209 = **(void **)v36;
            uint64_t v1195 = &v1197;
            uint64_t v1196 = 0x200000000;
            uint64_t v1203 = v209;
            v1204 = &v1212;
            uint64_t v1205 = &v1213;
            uint64_t v1206 = 0;
            int v1207 = 0;
            __int16 v1208 = 512;
            char v1209 = 7;
            int v1201 = 0;
            uint64_t v1202 = 0;
            uint64_t v1210 = 0;
            uint64_t v1211 = 0;
            uint64_t v1212 = &unk_1F2616E88;
            uint64_t v1213 = &unk_1F2617008;
            int v1201 = (void *)*((void *)v36 + 5);
            uint64_t v1202 = (void **)((char *)v36 + 24);
            uint64_t v210 = (llvm::Value *)*((void *)v36 + 6);
            v1190 = (uint64_t **)v210;
            if (v210)
            {
              llvm::MetadataTracking::track((uint64_t)&v1190, (unsigned __int8 *)v210, 2);
              int v208 = (llvm::Value *)v1190;
            }
            sub_1CB8461A4((uint64_t)&v1195, 0, (uint64_t)v208);
            if (v1190)
            {
              int v442 = *(unsigned __int8 *)v1190;
              if ((v442 - 4) > 0x1E)
              {
                if ((v442 - 3) >= 0xFFFFFFFE) {
                  uint64_t v531 = (llvm::Value *)v1190;
                }
                else {
                  uint64_t v531 = 0;
                }
                if ((v442 - 3) < 0xFFFFFFFE)
                {
                  if (v442 == 3) {
                    v1190[1] = 0;
                  }
                  goto LABEL_340;
                }
                unint64_t v444 = (unint64_t)v531 + 8;
              }
              else
              {
                if ((*((unsigned char *)v1190 + 1) & 0x7F) != 2 && !*((_DWORD *)v1190 + 3)) {
                  goto LABEL_340;
                }
                uint64_t v443 = v1190[2];
                if ((v443 & 4) == 0) {
                  goto LABEL_340;
                }
                unint64_t v444 = (unint64_t)v443 & 0xFFFFFFFFFFFFFFF8;
                if (!v444) {
                  goto LABEL_340;
                }
              }
              v1217 = (void **)&v1190;
              sub_1CC5FA668(v444 + 16, &v1217);
            }
LABEL_340:
            v1171 = v48;
            unsigned int v211 = *(_DWORD *)(*(void *)v179 + 8) >> 8;
            LODWORD(v212) = 8 * (1 << ((unint64_t)*((unsigned __int16 *)v179 + 9) >> 1));
            if (v212 >= 0x40) {
              unint64_t v212 = 64;
            }
            else {
              unint64_t v212 = v212;
            }
            uint64_t v213 = 1 << ~__clz(v212);
            if (v212) {
              uint64_t v213 = v213;
            }
            else {
              uint64_t v213 = 0;
            }
            do
            {
              uint64_t v214 = (llvm::LLVMContext *)v213;
              __int16 v215 = (llvm::Type *)(v211 / v213);
              unsigned int v216 = v211 % v213;
              if (v213 < 9) {
                break;
              }
              uint64_t v213 = v213 >> 1;
            }
            while (v216);
            if (v216) {
              goto LABEL_664;
            }
            uint64_t v217 = **((void **)v179 - 4);
            unsigned int v218 = *(_DWORD *)(v217 + 8);
            if ((v218 & 0xFE) == 0x12) {
              unsigned int v218 = *(_DWORD *)(**(void **)(v217 + 16) + 8);
            }
            uint64_t v219 = (llvm::Type *)(v218 >> 8);
            uint64_t v220 = (llvm::PointerType *)llvm::IntegerType::get(**(llvm::IntegerType ***)v179, v214);
            unint64_t v221 = llvm::PointerType::get(v220, v219);
            __pa = (uint64_t *)v179;
            uint64_t v222 = (unsigned __int8 *)*((void *)v179 - 4);
            __int16 v1194 = 257;
            if (*(void *)v222 != v221)
            {
              if (v222[16] <= 0x14u)
              {
                uint64_t v222 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v1204
                                           + 28))(v1204, 49, v222, v221);
                if (v222) {
                  BOOL v356 = v222[16] >= 0x1Cu;
                }
                else {
                  BOOL v356 = 0;
                }
                if (v356)
                {
                  (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v222, &v1190, v1201, v1202);
                  if (v1196)
                  {
                    uint64_t v940 = (llvm::MDNode **)v1195;
                    unint64_t v941 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v222, *(_DWORD *)v940, v940[1]);
                      v940 += 2;
                    }
                    while (v940 != v941);
                  }
                }
              }
              else
              {
                __int16 v1220 = 257;
                uint64_t v222 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v222, v221, (const char **)&v1217, 0);
                (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v222, &v1190, v1201, v1202);
                if (v1196)
                {
                  uint64_t v223 = (llvm::MDNode **)v1195;
                  uint64_t v224 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v222, *(_DWORD *)v223, v223[1]);
                    v223 += 2;
                  }
                  while (v223 != v224);
                }
              }
            }
            llvm::FixedVectorType::get(v220, v215);
            int v359 = (unsigned __int8 *)llvm::UndefValue::get(v357, v358);
            if (v214 <= v211)
            {
              uint64_t v363 = 0;
              if (v215 <= 1) {
                uint64_t v364 = 1;
              }
              else {
                uint64_t v364 = v215;
              }
              do
              {
                __int16 v1220 = 257;
                int v365 = sub_1CB930CF4((uint64_t *)&v1195, (uint64_t)v220, (const llvm::APInt *)v222, v363, (uint64_t)&v1217);
                __int16 v1194 = 257;
                char v366 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v1201[7] + 40) + 272), v220, 1);
                uint64_t v367 = operator new(0x60uLL);
                v367[13] = v367[13] & 0x38000000 | 1;
                uint64_t v368 = (llvm::Instruction *)(v367 + 8);
                *(void *)uint64_t v367 = 0;
                *((void *)v367 + 1) = 0;
                *((void *)v367 + 2) = 0;
                *((void *)v367 + 3) = v367 + 8;
                __int16 v1220 = 257;
                llvm::LoadInst::LoadInst((llvm::Value *)(v367 + 8), (uint64_t)v220, (uint64_t)v365, (const char **)&v1217, 0, v366, 0);
                (*((void (**)(void **, llvm::Instruction *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v368, &v1190, v1201, v1202);
                if (v1196)
                {
                  uint64_t v374 = (llvm::MDNode **)v1195;
                  int v375 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                  do
                  {
                    llvm::Instruction::setMetadata(v368, *(_DWORD *)v374, v374[1]);
                    v374 += 2;
                  }
                  while (v374 != v375);
                }
                __int16 v1220 = 257;
                uint64_t v370 = *(llvm::ConstantInt **)(*(void *)v1203 + 1984);
                unsigned int v371 = *(_DWORD *)(*(void *)v1203 + 1992);
                LODWORD(v1191) = v371 >> 8;
                if (v371 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v371 <= 0xFF) {
                  unint64_t v372 = 0;
                }
                else {
                  unint64_t v372 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v371) + 63);
                }
                v1190 = (uint64_t **)(v372 & v363);
                uint64_t v373 = (unsigned __int8 *)llvm::ConstantInt::get(v370, (llvm::LLVMContext *)&v1190, v369);
                if (v1191 >= 0x41 && v1190) {
                  MEMORY[0x1D25D9CB0](v1190, 0x1000C8000313F17);
                }
                int v359 = (unsigned __int8 *)sub_1CB84478C((uint64_t)&v1195, v359, (unsigned __int8 *)v368, v373, (uint64_t)&v1217);
                ++v363;
              }
              while (v363 != v364);
            }
            uint64_t v360 = *__pa;
            __int16 v1194 = 257;
            if (*(void *)v359 != v360)
            {
              int v33 = v1168;
              if (v359[16] > 0x14u)
              {
                __int16 v1220 = 257;
                int v359 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v359, v360, (const char **)&v1217, 0);
                (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v359, &v1190, v1201, v1202);
                if (v1196)
                {
                  uint64_t v361 = (llvm::MDNode **)v1195;
                  int v362 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v359, *(_DWORD *)v361, v361[1]);
                    v361 += 2;
                  }
                  while (v361 != v362);
                }
LABEL_564:
                llvm::Value::doRAUW(v36, (llvm::Value *)v359, (llvm::Value *)1);
                unsigned int v377 = v1186;
                uint64_t v378 = HIDWORD(v1187);
                if (v1186 == v1185)
                {
                  if (HIDWORD(v1187))
                  {
                    int v379 = 0;
                    uint64_t v380 = 8 * HIDWORD(v1187);
                    uint64_t v381 = (llvm::ValueAsMetadata **)v1186;
                    while (*v381 != v36)
                    {
                      if (*v381 == (llvm::ValueAsMetadata *)-2) {
                        int v379 = v381;
                      }
                      ++v381;
                      v380 -= 8;
                      if (!v380)
                      {
                        if (v379) {
                          goto LABEL_865;
                        }
                        goto LABEL_572;
                      }
                    }
                    goto LABEL_663;
                  }
LABEL_572:
                  unsigned int v382 = v1187;
                  if (HIDWORD(v1187) < v1187) {
                    goto LABEL_598;
                  }
                }
                else
                {
                  unsigned int v382 = v1187;
                }
                if (3 * v382 <= 4 * (HIDWORD(v1187) - v1188))
                {
                  if (v382 >= 0x40) {
                    v382 *= 2;
                  }
                  else {
                    unsigned int v382 = 128;
                  }
                }
                else if (v382 - HIDWORD(v1187) >= v382 >> 3)
                {
                  goto LABEL_628;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v382);
                unsigned int v382 = v1187;
                unsigned int v377 = v1186;
LABEL_628:
                unsigned int v411 = v382 - 1;
                unsigned int v412 = (v382 - 1) & ((v36 >> 4) ^ (v36 >> 9));
                uint64_t v413 = (llvm::ValueAsMetadata **)&v377[v412];
                v414 = *v413;
                if (*v413 != (llvm::ValueAsMetadata *)-1)
                {
                  uint64_t v415 = 0;
                  int v416 = 1;
                  while (v414 != v36)
                  {
                    if (v415) {
                      BOOL v417 = 0;
                    }
                    else {
                      BOOL v417 = v414 == (llvm::ValueAsMetadata *)-2;
                    }
                    if (v417) {
                      uint64_t v415 = v413;
                    }
                    unsigned int v418 = v412 + v416++;
                    unsigned int v412 = v418 & v411;
                    uint64_t v413 = (llvm::ValueAsMetadata **)&v377[v418 & v411];
                    v414 = *v413;
                    if (*v413 == (llvm::ValueAsMetadata *)-1) {
                      goto LABEL_656;
                    }
                  }
                  goto LABEL_663;
                }
                goto LABEL_655;
              }
              int v359 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v1204
                                         + 28))(v1204, 49, v359, v360);
              if (v359) {
                BOOL v376 = v359[16] >= 0x1Cu;
              }
              else {
                BOOL v376 = 0;
              }
              if (!v376) {
                goto LABEL_564;
              }
              (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v359, &v1190, v1201, v1202);
              if (v1196)
              {
                unint64_t v942 = (llvm::MDNode **)v1195;
                BOOL v943 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v359, *(_DWORD *)v942, v942[1]);
                  v942 += 2;
                }
                while (v942 != v943);
              }
            }
            int v33 = v1168;
            goto LABEL_564;
          }
        }
      }
      int v225 = *((unsigned __int8 *)v36 + 16);
      if (v225 == 61) {
        int v226 = v36;
      }
      else {
        int v226 = 0;
      }
      if (v34 && v225 == 61)
      {
        uint64_t v227 = **((void **)v226 - 4);
        int v228 = *(_DWORD *)(v227 + 8);
        if ((v228 & 0xFE) == 0x12) {
          int v228 = *(_DWORD *)(**(void **)(v227 + 16) + 8);
        }
        uint64_t v229 = (llvm::Value *)*((void *)v226 - 8);
        uint64_t v230 = *(void *)v229;
        BOOL v231 = (v228 & 0xFFFFFF00) == 0x4000 && (*(_DWORD *)(*(void *)v229 + 8) & 0xFE) == 18;
        if (v231 && *(_DWORD *)(*(void *)(v230 + 24) + 8) == 2061 && *(_DWORD *)(v230 + 32) == 3)
        {
          uint64_t v232 = 0;
          uint64_t v233 = **(void **)v36;
          uint64_t v1195 = &v1197;
          uint64_t v1196 = 0x200000000;
          uint64_t v1203 = v233;
          v1204 = &v1212;
          uint64_t v1205 = &v1213;
          uint64_t v1206 = 0;
          int v1207 = 0;
          __int16 v1208 = 512;
          char v1209 = 7;
          int v1201 = 0;
          uint64_t v1202 = 0;
          uint64_t v1210 = 0;
          uint64_t v1211 = 0;
          uint64_t v1212 = &unk_1F2616E88;
          uint64_t v1213 = &unk_1F2617008;
          int v1201 = (void *)*((void *)v36 + 5);
          uint64_t v1202 = (void **)((char *)v36 + 24);
          uint64_t v234 = (llvm::Value *)*((void *)v36 + 6);
          v1190 = (uint64_t **)v234;
          if (v234)
          {
            llvm::MetadataTracking::track((uint64_t)&v1190, (unsigned __int8 *)v234, 2);
            uint64_t v232 = (llvm::Value *)v1190;
          }
          sub_1CB8461A4((uint64_t)&v1195, 0, (uint64_t)v232);
          if (v1190)
          {
            int v498 = *(unsigned __int8 *)v1190;
            if ((v498 - 4) > 0x1E)
            {
              if ((v498 - 3) >= 0xFFFFFFFE) {
                uint64_t v556 = (llvm::Value *)v1190;
              }
              else {
                uint64_t v556 = 0;
              }
              if ((v498 - 3) < 0xFFFFFFFE)
              {
                if (v498 == 3) {
                  v1190[1] = 0;
                }
                goto LABEL_374;
              }
              unint64_t v500 = (unint64_t)v556 + 8;
            }
            else
            {
              if ((*((unsigned char *)v1190 + 1) & 0x7F) != 2 && !*((_DWORD *)v1190 + 3)) {
                goto LABEL_374;
              }
              uint64_t v499 = v1190[2];
              if ((v499 & 4) == 0) {
                goto LABEL_374;
              }
              unint64_t v500 = (unint64_t)v499 & 0xFFFFFFFFFFFFFFF8;
              if (!v500) {
                goto LABEL_374;
              }
            }
            v1217 = (void **)&v1190;
            sub_1CC5FA668(v500 + 16, &v1217);
          }
LABEL_374:
          if ((*(_DWORD *)(v230 + 8) & 0xFE) == 0x12) {
            uint64_t v230 = **(void **)(v230 + 16);
          }
          uint64_t v235 = **((void **)v226 - 4);
          unsigned int v236 = *(_DWORD *)(v235 + 8);
          if ((v236 & 0xFE) == 0x12) {
            unsigned int v236 = *(_DWORD *)(**(void **)(v235 + 16) + 8);
          }
          unint64_t v237 = llvm::PointerType::get((llvm::PointerType *)v230, (llvm::Type *)(v236 >> 8));
          uint64_t v238 = (unsigned __int8 *)*((void *)v226 - 4);
          __int16 v1194 = 257;
          uint64_t v1172 = v48;
          if (*(void *)v238 != v237)
          {
            if (v238[16] <= 0x14u)
            {
              uint64_t v303 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v1204 + 28))(v1204, 49, v238, v237);
              uint64_t v238 = (unsigned __int8 *)v303;
              if (v303)
              {
                if (*(unsigned __int8 *)(v303 + 16) >= 0x1Cu)
                {
                  (*((void (**)(void **, uint64_t, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v303, &v1190, v1201, v1202);
                  if (v1196)
                  {
                    uint64_t v932 = (llvm::MDNode **)v1195;
                    v933 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v238, *(_DWORD *)v932, v932[1]);
                      v932 += 2;
                    }
                    while (v932 != v933);
                  }
                }
              }
            }
            else
            {
              __int16 v1220 = 257;
              uint64_t v238 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v238, v237, (const char **)&v1217, 0);
              (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v238, &v1190, v1201, v1202);
              if (v1196)
              {
                uint64_t v239 = (llvm::MDNode **)v1195;
                unsigned int v240 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v238, *(_DWORD *)v239, v239[1]);
                  v239 += 2;
                }
                while (v239 != v240);
              }
            }
          }
          __int16 v1220 = 257;
          int v304 = sub_1CB844364((uint64_t *)&v1195, v230, (const llvm::APInt *)v238, 2, (uint64_t)&v1217);
          uint64_t v305 = (llvm::ConstantInt *)(***(void ***)v36 + 1960);
          uint64_t v306 = (unsigned __int8 *)llvm::ConstantInt::get(v305, 2uLL, 0);
          uint64_t v307 = (unsigned __int8 *)*((void *)v226 - 8);
          __int16 v1220 = 257;
          uint64_t v308 = sub_1CB8445F4((uint64_t)&v1195, v307, v306, (uint64_t)&v1217);
          char v309 = (char *)operator new(0x80uLL);
          *((_DWORD *)v309 + 21) = *((_DWORD *)v309 + 21) & 0x38000000 | 2;
          *(void *)char v309 = 0;
          *((void *)v309 + 2) = 0;
          *((void *)v309 + 1) = 0;
          *((void *)v309 + 5) = 0;
          *((void *)v309 + 6) = 0;
          *((void *)v309 + 4) = 0;
          BOOL v310 = (llvm::Instruction **)(v309 + 32);
          *((void *)v309 + 8) = ***(void ***)v308 + 1576;
          uint64_t v311 = (llvm::Instruction *)(v309 + 64);
          *((void *)v309 + 3) = v309 + 64;
          *((void *)v309 + 7) = v309 + 64;
          *((void *)v309 + 9) = 0;
          v309[80] = 61;
          v309[81] = 0;
          *((_WORD *)v309 + 41) = 0;
          *((_DWORD *)v309 + 21) = 2;
          *(_OWORD *)(v309 + 88) = 0u;
          *(_OWORD *)(v309 + 104) = 0u;
          *((_DWORD *)v309 + 30) = 0;
          *(void *)char v309 = v308;
          uint64_t v314 = *((void *)v308 + 1);
          size_t v313 = (void *)((char *)v308 + 8);
          uint64_t v312 = v314;
          *((void *)v309 + 1) = v314;
          if (v314) {
            *(void *)(v312 + 16) = v309 + 8;
          }
          *((void *)v309 + 2) = v313;
          *size_t v313 = v309;
          if (*((void *)v309 + 4))
          {
            **((void **)v309 + 6) = *((void *)v309 + 5);
            uint64_t v922 = *((void *)v309 + 5);
            if (v922) {
              *(void *)(v922 + 16) = *((void *)v309 + 6);
            }
          }
          *BOOL v310 = v304;
          if (v304)
          {
            uint64_t v317 = *((void *)v304 + 1);
            int v316 = (llvm::Instruction ***)((char *)v304 + 8);
            uint64_t v315 = v317;
            *((void *)v309 + 5) = v317;
            if (v317) {
              *(void *)(v315 + 16) = v309 + 40;
            }
            *((void *)v309 + 6) = v316;
            *int v316 = v310;
          }
          *((_WORD *)v309 + 41) = 0;
          v309[124] = 1;
          __int16 v1220 = 257;
          (*((void (**)(void **, llvm::Instruction *, void ***, void *, void **))*v1205 + 2))(v1205, v311, &v1217, v1201, v1202);
          if (v1196)
          {
            uint64_t v552 = (llvm::MDNode **)v1195;
            uint64_t v553 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
            do
            {
              llvm::Instruction::setMetadata(v311, *(_DWORD *)v552, v552[1]);
              v552 += 2;
            }
            while (v552 != v553);
          }
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v230, (llvm::Type *)2);
          unint64_t v319 = v318;
          uint64_t v320 = **((void **)v226 - 4);
          unsigned int v321 = *(_DWORD *)(v320 + 8);
          if ((v321 & 0xFE) == 0x12) {
            unsigned int v321 = *(_DWORD *)(**(void **)(v320 + 16) + 8);
          }
          unint64_t v322 = llvm::PointerType::get(v318, (llvm::Type *)(v321 >> 8));
          size_t v323 = (llvm::Value *)*((void *)v226 - 4);
          __int16 v1194 = 257;
          if (*(void *)v323 != v322)
          {
            if (*((unsigned __int8 *)v323 + 16) <= 0x14u)
            {
              size_t v323 = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, llvm::Value *, unint64_t))*v1204
                                     + 28))(v1204, 49, v323, v322);
              if (v323) {
                BOOL v326 = *((unsigned __int8 *)v323 + 16) >= 0x1Cu;
              }
              else {
                BOOL v326 = 0;
              }
              if (v326)
              {
                (*((void (**)(void **, llvm::Value *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v323, &v1190, v1201, v1202);
                if (v1196)
                {
                  uint64_t v926 = (llvm::MDNode **)v1195;
                  uint64_t v927 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                  do
                  {
                    llvm::Instruction::setMetadata(v323, *(_DWORD *)v926, v926[1]);
                    v926 += 2;
                  }
                  while (v926 != v927);
                }
              }
            }
            else
            {
              __int16 v1220 = 257;
              size_t v323 = llvm::CastInst::Create(49, (uint64_t)v323, v322, (const char **)&v1217, 0);
              (*((void (**)(void **, llvm::Value *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v323, &v1190, v1201, v1202);
              if (v1196)
              {
                size_t v324 = (llvm::MDNode **)v1195;
                int v325 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                do
                {
                  llvm::Instruction::setMetadata(v323, *(_DWORD *)v324, v324[1]);
                  v324 += 2;
                }
                while (v324 != v325);
              }
            }
          }
          uint64_t v327 = (unsigned __int8 *)llvm::ConstantInt::get(v305, 0, 0);
          size_t v328 = (unsigned __int8 *)*((void *)v226 - 8);
          __int16 v1220 = 257;
          int v329 = (unsigned __int8 *)sub_1CB8445F4((uint64_t)&v1195, v328, v327, (uint64_t)&v1217);
          uint64_t v330 = (unsigned __int8 *)llvm::ConstantInt::get(v305, 1uLL, 0);
          char v331 = (unsigned __int8 *)*((void *)v226 - 8);
          __int16 v1220 = 257;
          BOOL v332 = (unsigned __int8 *)sub_1CB8445F4((uint64_t)&v1195, v331, v330, (uint64_t)&v1217);
          size_t v334 = (unsigned __int8 *)llvm::UndefValue::get(v319, v333);
          __int16 v1220 = 257;
          size_t v335 = (unsigned __int8 *)sub_1CB84478C((uint64_t)&v1195, v334, v329, v327, (uint64_t)&v1217);
          __int16 v1220 = 257;
          uint64_t v336 = sub_1CB84478C((uint64_t)&v1195, v335, v332, v330, (uint64_t)&v1217);
          __int16 v337 = *((_WORD *)v226 + 9);
          uint64_t v338 = (char *)operator new(0x80uLL);
          *((_DWORD *)v338 + 21) = *((_DWORD *)v338 + 21) & 0x38000000 | 2;
          *(void *)uint64_t v338 = 0;
          *((void *)v338 + 2) = 0;
          *((void *)v338 + 1) = 0;
          *((void *)v338 + 5) = 0;
          *((void *)v338 + 6) = 0;
          *((void *)v338 + 4) = 0;
          size_t v339 = (llvm::Value **)(v338 + 32);
          *((void *)v338 + 8) = ***(void ***)v336 + 1576;
          uint64_t v340 = (llvm::Instruction *)(v338 + 64);
          *((void *)v338 + 3) = v338 + 64;
          *((void *)v338 + 7) = v338 + 64;
          *((void *)v338 + 9) = 0;
          v338[80] = 61;
          v338[81] = 0;
          *((_WORD *)v338 + 41) = 0;
          *((_DWORD *)v338 + 21) = 2;
          *(_OWORD *)(v338 + 88) = 0u;
          *(_OWORD *)(v338 + 104) = 0u;
          *((_DWORD *)v338 + 30) = 0;
          *(void *)uint64_t v338 = v336;
          uint64_t v343 = *((void *)v336 + 1);
          uint64_t v342 = (void *)((char *)v336 + 8);
          uint64_t v341 = v343;
          *((void *)v338 + 1) = v343;
          if (v343) {
            *(void *)(v341 + 16) = v338 + 8;
          }
          *((void *)v338 + 2) = v342;
          *uint64_t v342 = v338;
          int v33 = v1168;
          if (*((void *)v338 + 4))
          {
            **((void **)v338 + 6) = *((void *)v338 + 5);
            uint64_t v923 = *((void *)v338 + 5);
            if (v923) {
              *(void *)(v923 + 16) = *((void *)v338 + 6);
            }
          }
          *size_t v339 = v323;
          if (v323)
          {
            uint64_t v346 = *((void *)v323 + 1);
            int v345 = (llvm::Value ***)((char *)v323 + 8);
            uint64_t v344 = v346;
            *((void *)v338 + 5) = v346;
            if (v346) {
              *(void *)(v344 + 16) = v338 + 40;
            }
            *((void *)v338 + 6) = v345;
            const char *v345 = v339;
          }
          *((_WORD *)v338 + 41) = v337 & 0x7E;
          v338[124] = 1;
          __int16 v1220 = 257;
          (*((void (**)(void **, llvm::Instruction *, void ***, void *, void **))*v1205 + 2))(v1205, v340, &v1217, v1201, v1202);
          if (v1196)
          {
            unint64_t v554 = (llvm::MDNode **)v1195;
            uint64_t v555 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
            do
            {
              llvm::Instruction::setMetadata(v340, *(_DWORD *)v554, v554[1]);
              v554 += 2;
            }
            while (v554 != v555);
          }
          uint64_t v59 = v1186;
          uint64_t v60 = HIDWORD(v1187);
          char v48 = v1172;
          if (v1186 == v1185)
          {
            if (HIDWORD(v1187))
            {
              size_t v61 = 0;
              uint64_t v347 = 8 * HIDWORD(v1187);
              uint64_t v348 = (llvm::ValueAsMetadata **)v1186;
              while (*v348 != v36)
              {
                if (*v348 == (llvm::ValueAsMetadata *)-2) {
                  size_t v61 = v348;
                }
                ++v348;
                v347 -= 8;
                if (!v347)
                {
                  if (v61) {
                    goto LABEL_1213;
                  }
                  goto LABEL_516;
                }
              }
              goto LABEL_1237;
            }
LABEL_516:
            unsigned int v349 = v1187;
            if (HIDWORD(v1187) < v1187) {
              goto LABEL_737;
            }
          }
          else
          {
            unsigned int v349 = v1187;
          }
          if (3 * v349 <= 4 * (HIDWORD(v1187) - v1188))
          {
            if (v349 >= 0x40) {
              v349 *= 2;
            }
            else {
              unsigned int v349 = 128;
            }
          }
          else if (v349 - HIDWORD(v1187) >= v349 >> 3)
          {
            goto LABEL_521;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v349);
          unsigned int v349 = v1187;
          uint64_t v59 = v1186;
LABEL_521:
          unsigned int v350 = v349 - 1;
          unsigned int v351 = (v349 - 1) & ((v36 >> 4) ^ (v36 >> 9));
          uint64_t v83 = (llvm::ValueAsMetadata **)&v59[v351];
          int v352 = *v83;
          if (*v83 != (llvm::ValueAsMetadata *)-1)
          {
            uint64_t v85 = 0;
            int v353 = 1;
            while (v352 != v36)
            {
              if (v85) {
                BOOL v354 = 0;
              }
              else {
                BOOL v354 = v352 == (llvm::ValueAsMetadata *)-2;
              }
              if (v354) {
                uint64_t v85 = v83;
              }
              unsigned int v355 = v351 + v353++;
              unsigned int v351 = v355 & v350;
              uint64_t v83 = (llvm::ValueAsMetadata **)&v59[v355 & v350];
              int v352 = *v83;
              if (*v83 == (llvm::ValueAsMetadata *)-1) {
                goto LABEL_1230;
              }
            }
            goto LABEL_1237;
          }
          goto LABEL_1229;
        }
        if (*(_DWORD *)(*(void *)v229 + 8) != 13)
        {
          int v33 = v1168;
          goto LABEL_1240;
        }
        unint64_t v242 = sub_1CB83544C((uint64_t)v1181, *(void *)v229);
        if (v241 == 1) {
        if (v242 > 0x40)
        }
        {
          uint64_t v243 = 0;
          uint64_t v244 = **(void **)v36;
          uint64_t v1195 = &v1197;
          uint64_t v1196 = 0x200000000;
          uint64_t v1203 = v244;
          v1204 = &v1212;
          uint64_t v1205 = &v1213;
          uint64_t v1206 = 0;
          int v1207 = 0;
          __int16 v1208 = 512;
          char v1209 = 7;
          int v1201 = 0;
          uint64_t v1202 = 0;
          uint64_t v1210 = 0;
          uint64_t v1211 = 0;
          uint64_t v1212 = &unk_1F2616E88;
          uint64_t v1213 = &unk_1F2617008;
          int v1201 = (void *)*((void *)v36 + 5);
          uint64_t v1202 = (void **)((char *)v36 + 24);
          uint64_t v245 = (llvm::Value *)*((void *)v36 + 6);
          v1190 = (uint64_t **)v245;
          int v33 = v1168;
          if (v245)
          {
            llvm::MetadataTracking::track((uint64_t)&v1190, (unsigned __int8 *)v245, 2);
            uint64_t v243 = (llvm::Value *)v1190;
          }
          sub_1CB8461A4((uint64_t)&v1195, 0, (uint64_t)v243);
          if (v1190)
          {
            int v483 = *(unsigned __int8 *)v1190;
            if ((v483 - 4) > 0x1E)
            {
              if ((v483 - 3) >= 0xFFFFFFFE) {
                uint64_t v551 = (llvm::Value *)v1190;
              }
              else {
                uint64_t v551 = 0;
              }
              if ((v483 - 3) < 0xFFFFFFFE)
              {
                if (v483 == 3) {
                  v1190[1] = 0;
                }
                goto LABEL_391;
              }
              unint64_t v485 = (unint64_t)v551 + 8;
            }
            else
            {
              if ((*((unsigned char *)v1190 + 1) & 0x7F) != 2 && !*((_DWORD *)v1190 + 3)) {
                goto LABEL_391;
              }
              v484 = v1190[2];
              if ((v484 & 4) == 0) {
                goto LABEL_391;
              }
              unint64_t v485 = (unint64_t)v484 & 0xFFFFFFFFFFFFFFF8;
              if (!v485) {
                goto LABEL_391;
              }
            }
            v1217 = (void **)&v1190;
            sub_1CC5FA668(v485 + 16, &v1217);
          }
LABEL_391:
          v1171 = v48;
          unsigned int v246 = *(_DWORD *)(*(void *)v229 + 8) >> 8;
          LODWORD(v247) = 8 * (1 << ((unint64_t)*((unsigned __int16 *)v226 + 9) >> 1));
          if (v247 >= 0x40) {
            unint64_t v247 = 64;
          }
          else {
            unint64_t v247 = v247;
          }
          uint64_t v248 = 1 << ~__clz(v247);
          if (v247) {
            uint64_t v248 = v248;
          }
          else {
            uint64_t v248 = 0;
          }
          do
          {
            uint64_t v249 = (llvm::LLVMContext *)v248;
            uint64_t v250 = (llvm::Type *)(v246 / v248);
            unsigned int v251 = v246 % v248;
            if (v248 < 9) {
              break;
            }
            uint64_t v248 = v248 >> 1;
          }
          while (v251);
          if (v251) {
            goto LABEL_664;
          }
          uint64_t v252 = **((void **)v226 - 4);
          unsigned int v253 = *(_DWORD *)(v252 + 8);
          if ((v253 & 0xFE) == 0x12) {
            unsigned int v253 = *(_DWORD *)(**(void **)(v252 + 16) + 8);
          }
          uint64_t v254 = (llvm::Type *)(v253 >> 8);
          uint64_t v255 = (llvm::FixedVectorType *)llvm::IntegerType::get(**(llvm::IntegerType ***)v226, v249);
          llvm::FixedVectorType::get(v255, v250);
          uint64_t v257 = v256;
          unint64_t v258 = llvm::PointerType::get(v255, v254);
          uint64_t v260 = (unsigned __int8 *)*((void *)v226 - 4);
          __int16 v1194 = 257;
          if (*(void *)v260 != v258)
          {
            if (v260[16] <= 0x14u)
            {
              uint64_t v260 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v1204
                                         + 28))(v1204, 49, v260, v258);
              if (v260) {
                BOOL v383 = v260[16] >= 0x1Cu;
              }
              else {
                BOOL v383 = 0;
              }
              if (v383)
              {
                (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v260, &v1190, v1201, v1202);
                if (v1196)
                {
                  int v928 = (llvm::MDNode **)v1195;
                  int v929 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v260, *(_DWORD *)v928, v928[1]);
                    v928 += 2;
                  }
                  while (v928 != v929);
                }
              }
            }
            else
            {
              __int16 v1220 = 257;
              uint64_t v260 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v260, v258, (const char **)&v1217, 0);
              (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v260, &v1190, v1201, v1202);
              if (v1196)
              {
                uint64_t v261 = (llvm::MDNode **)v1195;
                uint64_t v262 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v260, *(_DWORD *)v261, v261[1]);
                  v261 += 2;
                }
                while (v261 != v262);
              }
            }
          }
          __int16 v1194 = 257;
          if (*(void *)v229 != v257)
          {
            if (*((unsigned __int8 *)v229 + 16) <= 0x14u)
            {
              uint64_t v229 = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, llvm::Value *, uint64_t))*v1204 + 28))(v1204, 49, v229, v257);
              if (v229) {
                BOOL v386 = *((unsigned __int8 *)v229 + 16) >= 0x1Cu;
              }
              else {
                BOOL v386 = 0;
              }
              if (v386)
              {
                (*((void (**)(void **, llvm::Value *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v229, &v1190, v1201, v1202);
                if (v1196)
                {
                  uint64_t v930 = (llvm::MDNode **)v1195;
                  uint64_t v931 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                  do
                  {
                    llvm::Instruction::setMetadata(v229, *(_DWORD *)v930, v930[1]);
                    v930 += 2;
                  }
                  while (v930 != v931);
                }
              }
            }
            else
            {
              __int16 v1220 = 257;
              uint64_t v229 = llvm::CastInst::Create(49, (uint64_t)v229, v257, (const char **)&v1217, 0);
              (*((void (**)(void **, llvm::Value *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v229, &v1190, v1201, v1202);
              if (v1196)
              {
                v384 = (llvm::MDNode **)v1195;
                int v385 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                do
                {
                  llvm::Instruction::setMetadata(v229, *(_DWORD *)v384, v384[1]);
                  v384 += 2;
                }
                while (v384 != v385);
              }
            }
          }
          if (v249 <= v246)
          {
            uint64_t v390 = 0;
            if (v250 <= 1) {
              uint64_t v391 = 1;
            }
            else {
              uint64_t v391 = v250;
            }
            do
            {
              __int16 v1220 = 257;
              uint64_t v392 = *(llvm::ConstantInt **)(*(void *)v1203 + 1984);
              unsigned int v393 = *(_DWORD *)(*(void *)v1203 + 1992);
              LODWORD(v1191) = v393 >> 8;
              if (v393 >> 8 > 0x40) {
                operator new[]();
              }
              if (v393 <= 0xFF) {
                unint64_t v394 = 0;
              }
              else {
                unint64_t v394 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v393) + 63);
              }
              v1190 = (uint64_t **)(v394 & v390);
              unsigned int v395 = (unsigned __int8 *)llvm::ConstantInt::get(v392, (llvm::LLVMContext *)&v1190, v259);
              if (v1191 >= 0x41 && v1190) {
                MEMORY[0x1D25D9CB0](v1190, 0x1000C8000313F17);
              }
              v396 = sub_1CB8445F4((uint64_t)&v1195, (unsigned __int8 *)v229, v395, (uint64_t)&v1217);
              __int16 v1220 = 257;
              uint64_t v397 = sub_1CB930CF4((uint64_t *)&v1195, (uint64_t)v255, (const llvm::APInt *)v260, v390, (uint64_t)&v1217);
              char v398 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v1201[7] + 40) + 272), *(llvm::Type **)v396, 1);
              uint64_t v399 = (char *)operator new(0x80uLL);
              *((_DWORD *)v399 + 21) = *((_DWORD *)v399 + 21) & 0x38000000 | 2;
              *(void *)uint64_t v399 = 0;
              *((void *)v399 + 2) = 0;
              *((void *)v399 + 1) = 0;
              *((void *)v399 + 5) = 0;
              *((void *)v399 + 6) = 0;
              *((void *)v399 + 4) = 0;
              BOOL v400 = (llvm::Instruction **)(v399 + 32);
              *((void *)v399 + 8) = ***(void ***)v396 + 1576;
              int64_t v401 = (llvm::Instruction *)(v399 + 64);
              *((void *)v399 + 3) = v399 + 64;
              *((void *)v399 + 7) = v399 + 64;
              *((void *)v399 + 9) = 0;
              v399[80] = 61;
              v399[81] = 0;
              *((_WORD *)v399 + 41) = 0;
              *((_DWORD *)v399 + 21) = 2;
              *(_OWORD *)(v399 + 88) = 0u;
              *(_OWORD *)(v399 + 104) = 0u;
              *((_DWORD *)v399 + 30) = 0;
              *(void *)uint64_t v399 = v396;
              uint64_t v404 = *((void *)v396 + 1);
              uint64_t v403 = (void *)((char *)v396 + 8);
              uint64_t v402 = v404;
              *((void *)v399 + 1) = v404;
              if (v404) {
                *(void *)(v402 + 16) = v399 + 8;
              }
              *((void *)v399 + 2) = v403;
              *uint64_t v403 = v399;
              if (*((void *)v399 + 4))
              {
                **((void **)v399 + 6) = *((void *)v399 + 5);
                uint64_t v410 = *((void *)v399 + 5);
                if (v410) {
                  *(void *)(v410 + 16) = *((void *)v399 + 6);
                }
              }
              *BOOL v400 = v397;
              if (v397)
              {
                uint64_t v407 = *((void *)v397 + 1);
                uint64_t v406 = (llvm::Instruction ***)((char *)v397 + 8);
                uint64_t v405 = v407;
                *((void *)v399 + 5) = v407;
                if (v407) {
                  *(void *)(v405 + 16) = v399 + 40;
                }
                *((void *)v399 + 6) = v406;
                *uint64_t v406 = v400;
              }
              *((_WORD *)v399 + 41) = 2 * (v398 & 0x3F);
              v399[124] = 1;
              __int16 v1220 = 257;
              (*((void (**)(void **, llvm::Instruction *, void ***, void *, void **))*v1205 + 2))(v1205, v401, &v1217, v1201, v1202);
              if (v1196)
              {
                uint64_t v408 = (llvm::MDNode **)v1195;
                uint64_t v409 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                do
                {
                  llvm::Instruction::setMetadata(v401, *(_DWORD *)v408, v408[1]);
                  v408 += 2;
                }
                while (v408 != v409);
              }
              ++v390;
            }
            while (v390 != v391);
          }
          unsigned int v377 = v1186;
          uint64_t v378 = HIDWORD(v1187);
          if (v1186 == v1185)
          {
            int v33 = v1168;
            if (HIDWORD(v1187))
            {
              int v379 = 0;
              uint64_t v387 = 8 * HIDWORD(v1187);
              uint64_t v388 = (llvm::ValueAsMetadata **)v1186;
              while (*v388 != v36)
              {
                if (*v388 == (llvm::ValueAsMetadata *)-2) {
                  int v379 = v388;
                }
                ++v388;
                v387 -= 8;
                if (!v387)
                {
                  if (!v379) {
                    goto LABEL_597;
                  }
LABEL_865:
                  *int v379 = v36;
                  --v1188;
                  break;
                }
              }
LABEL_663:
              char __p = 1;
LABEL_664:
              if (v1195 != &v1197) {
                free(v1195);
              }
              char v48 = v1171;
              goto LABEL_1240;
            }
LABEL_597:
            unsigned int v389 = v1187;
            if (HIDWORD(v1187) < v1187)
            {
LABEL_598:
              HIDWORD(v1187) = v378 + 1;
              v377[v378] = v36;
              goto LABEL_663;
            }
          }
          else
          {
            unsigned int v389 = v1187;
            int v33 = v1168;
          }
          if (3 * v389 <= 4 * (HIDWORD(v1187) - v1188))
          {
            if (v389 >= 0x40) {
              v389 *= 2;
            }
            else {
              unsigned int v389 = 128;
            }
          }
          else if (v389 - HIDWORD(v1187) >= v389 >> 3)
          {
LABEL_642:
            unsigned int v419 = v389 - 1;
            unsigned int v420 = (v389 - 1) & ((v36 >> 4) ^ (v36 >> 9));
            uint64_t v413 = (llvm::ValueAsMetadata **)&v377[v420];
            long long v421 = *v413;
            if (*v413 != (llvm::ValueAsMetadata *)-1)
            {
              uint64_t v415 = 0;
              int v422 = 1;
              while (v421 != v36)
              {
                if (v415) {
                  BOOL v423 = 0;
                }
                else {
                  BOOL v423 = v421 == (llvm::ValueAsMetadata *)-2;
                }
                if (v423) {
                  uint64_t v415 = v413;
                }
                unsigned int v424 = v420 + v422++;
                unsigned int v420 = v424 & v419;
                uint64_t v413 = (llvm::ValueAsMetadata **)&v377[v424 & v419];
                long long v421 = *v413;
                if (*v413 == (llvm::ValueAsMetadata *)-1) {
                  goto LABEL_656;
                }
              }
              goto LABEL_663;
            }
LABEL_655:
            uint64_t v415 = 0;
LABEL_656:
            if (v415) {
              long long v426 = v415;
            }
            else {
              long long v426 = v413;
            }
            if (*v426 != v36)
            {
              if (*v426 == (llvm::ValueAsMetadata *)-2) {
                --v1188;
              }
              else {
                ++HIDWORD(v1187);
              }
              llvm::MachineFunction *v426 = v36;
            }
            goto LABEL_663;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v389);
          unsigned int v389 = v1187;
          unsigned int v377 = v1186;
          goto LABEL_642;
        }
        int v225 = *((unsigned __int8 *)v36 + 16);
        int v33 = v1168;
      }
      if (v225 != 84) {
        goto LABEL_1240;
      }
      uint64_t v263 = *((void *)v36 - 4);
      if (!v263
        || *(unsigned char *)(v263 + 16)
        || *(void *)(v263 + 24) != *((void *)v36 + 9)
        || (*(unsigned char *)(v263 + 33) & 0x20) == 0)
      {
        goto LABEL_1240;
      }
      int v264 = *(_DWORD *)(*(v34 - 7) + 36);
      if ((v264 - 1282) < 0x190) {
        goto LABEL_416;
      }
      if (v264 > 1265)
      {
        if ((v264 - 2824) >= 0xC)
        {
          if (v264 != 1266)
          {
            if (v264 != 1267) {
              goto LABEL_1240;
            }
            v557 = 0;
            uint64_t v558 = **(void **)v36;
            uint64_t v1195 = &v1197;
            uint64_t v1196 = 0x200000000;
            uint64_t v1203 = v558;
            v1204 = &v1212;
            uint64_t v1205 = &v1213;
            uint64_t v1206 = 0;
            int v1207 = 0;
            __int16 v1208 = 512;
            char v1209 = 7;
            int v1201 = 0;
            uint64_t v1202 = 0;
            uint64_t v1210 = 0;
            uint64_t v1211 = 0;
            uint64_t v1212 = &unk_1F2616E88;
            uint64_t v1213 = &unk_1F2617008;
            int v1201 = (void *)*((void *)v36 + 5);
            uint64_t v1202 = (void **)((char *)v36 + 24);
            uint64_t v559 = (llvm::Value *)*((void *)v36 + 6);
            v1190 = (uint64_t **)v559;
            if (v559)
            {
              llvm::MetadataTracking::track((uint64_t)&v1190, (unsigned __int8 *)v559, 2);
              v557 = (llvm::Value *)v1190;
            }
            sub_1CB8461A4((uint64_t)&v1195, 0, (uint64_t)v557);
            if (v1190)
            {
              int v731 = *(unsigned __int8 *)v1190;
              if ((v731 - 4) > 0x1E)
              {
                if ((v731 - 3) >= 0xFFFFFFFE) {
                  unint64_t v760 = (llvm::Value *)v1190;
                }
                else {
                  unint64_t v760 = 0;
                }
                if ((v731 - 3) < 0xFFFFFFFE)
                {
                  int v33 = v1168;
                  if (v731 == 3) {
                    v1190[1] = 0;
                  }
                  goto LABEL_976;
                }
                unint64_t v733 = (unint64_t)v760 + 8;
              }
              else
              {
                if ((*((unsigned char *)v1190 + 1) & 0x7F) != 2 && !*((_DWORD *)v1190 + 3)) {
                  goto LABEL_976;
                }
                unint64_t v732 = v1190[2];
                if ((v732 & 4) == 0) {
                  goto LABEL_976;
                }
                unint64_t v733 = (unint64_t)v732 & 0xFFFFFFFFFFFFFFF8;
                if (!v733) {
                  goto LABEL_976;
                }
              }
              v1217 = (void **)&v1190;
              sub_1CC5FA668(v733 + 16, &v1217);
              int v33 = v1168;
            }
LABEL_976:
            uint64_t v560 = (char *)v35 - 32 * (*((_DWORD *)v34 - 1) & 0x7FFFFFF);
            uint64_t v561 = (void *)*((void *)v560 + 8);
            uint64_t v562 = *((void *)v560 + 12);
            __int16 v1220 = 257;
            uint64_t v563 = sub_1CB845F20((uint64_t)&v1195, 37, v561, v562, (uint64_t)&v1217);
            int v564 = (char *)v35 - 32 * (*((_DWORD *)v34 - 1) & 0x7FFFFFF);
            uint64_t v565 = (llvm::Value *)*((void *)v564 + 8);
            uint64_t v566 = (llvm::Value *)*((void *)v564 + 16);
            __int16 v1194 = 257;
            uint64_t v567 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v1195, v563, v565, v566, (const llvm::Twine *)&v1190, 0);
            uint64_t v568 = v567;
            uint64_t v569 = *(void *)v1203 + 1984;
            __int16 v1183 = 257;
            if (*(void *)v567 != v569)
            {
              if (*((unsigned __int8 *)v567 + 16) <= 0x14u)
              {
                uint64_t v655 = (*((uint64_t (**)(void **, uint64_t, llvm::Value *, uint64_t))*v1204 + 28))(v1204, 39, v567, v569);
                uint64_t v568 = (llvm::Instruction *)v655;
                if (v655 && *(unsigned __int8 *)(v655 + 16) >= 0x1Cu)
                {
                  (*((void (**)(void **, uint64_t, uint64_t *, void *, void **))*v1205 + 2))(v1205, v655, v1182, v1201, v1202);
                  if (v1196)
                  {
                    uint64_t v948 = (llvm::MDNode **)v1195;
                    uint64_t v949 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                    do
                    {
                      llvm::Instruction::setMetadata(v568, *(_DWORD *)v948, v948[1]);
                      v948 += 2;
                    }
                    while (v948 != v949);
                  }
                  int v33 = v1168;
                }
              }
              else
              {
                __int16 v1220 = 257;
                uint64_t v568 = llvm::CastInst::Create(39, (uint64_t)v567, v569, (const char **)&v1217, 0);
                (*((void (**)(void **, llvm::Instruction *, uint64_t *, void *, void **))*v1205 + 2))(v1205, v568, v1182, v1201, v1202);
                if (v1196)
                {
                  uint64_t v570 = (llvm::MDNode **)v1195;
                  uint64_t v571 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                  do
                  {
                    llvm::Instruction::setMetadata(v568, *(_DWORD *)v570, v570[1]);
                    v570 += 2;
                  }
                  while (v570 != v571);
                }
              }
            }
            uint64_t v656 = (uint64_t *)((void *)v35 - 4 * (*((_DWORD *)v34 - 1) & 0x7FFFFFF))[4];
            uint64_t v657 = *v656;
            int v658 = *(unsigned __int8 *)(*v656 + 8);
            if (*v656) {
              BOOL v659 = v658 == 15;
            }
            else {
              BOOL v659 = 0;
            }
            if (v659 && !*(void *)(v657 + 24))
            {
              uint64_t ParamElementType = llvm::AttributeList::getParamElementType((llvm::AttributeList *)(v34 + 5), 1);
            }
            else
            {
              if ((v658 & 0xFE) == 0x12) {
                uint64_t v657 = **(void **)(v657 + 16);
              }
              uint64_t ParamElementType = **(void **)(v657 + 16);
            }
            __int16 v1220 = 257;
            uint64_t v661 = sub_1CB930F7C((uint64_t *)&v1195, ParamElementType, v656, (const char *)v568, (uint64_t)&v1217);
            uint64_t v662 = (unsigned __int8 *)v661;
            uint64_t v663 = **((void **)v35 - 4 * (*((_DWORD *)v34 - 1) & 0x7FFFFFF));
            __int16 v1194 = 257;
            if (*(void *)v661 != v663)
            {
              if (*((unsigned __int8 *)v661 + 16) <= 0x14u)
              {
                uint64_t v662 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v1204
                                           + 28))(v1204, 49, v661, v663);
                if (v662) {
                  BOOL v666 = v662[16] >= 0x1Cu;
                }
                else {
                  BOOL v666 = 0;
                }
                if (v666)
                {
                  (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v662, &v1190, v1201, v1202);
                  if (v1196)
                  {
                    uint64_t v946 = (llvm::MDNode **)v1195;
                    unsigned int v947 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v662, *(_DWORD *)v946, v946[1]);
                      v946 += 2;
                    }
                    while (v946 != v947);
                  }
                  int v33 = v1168;
                }
              }
              else
              {
                __int16 v1220 = 257;
                uint64_t v662 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v661, v663, (const char **)&v1217, 0);
                (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v662, &v1190, v1201, v1202);
                if (v1196)
                {
                  uint64_t v664 = (llvm::MDNode **)v1195;
                  uint64_t v665 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v662, *(_DWORD *)v664, v664[1]);
                    v664 += 2;
                  }
                  while (v664 != v665);
                }
              }
            }
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v34 - 3), (llvm::Value *)v662, (llvm::Value *)1);
            uint64_t v633 = v1186;
            uint64_t v634 = HIDWORD(v1187);
            if (v1186 != v1185)
            {
              unsigned int v669 = v1187;
              goto LABEL_1161;
            }
            if (!HIDWORD(v1187)) {
              goto LABEL_1158;
            }
            uint64_t v635 = 0;
            uint64_t v667 = 8 * HIDWORD(v1187);
            uint64_t v668 = (llvm::ValueAsMetadata **)v1186;
            do
            {
              if (*v668 == v36) {
                goto LABEL_1251;
              }
              if (*v668 == (llvm::ValueAsMetadata *)-2) {
                uint64_t v635 = v668;
              }
              ++v668;
              v667 -= 8;
            }
            while (v667);
            if (!v635)
            {
LABEL_1158:
              unsigned int v669 = v1187;
              if (HIDWORD(v1187) < v1187)
              {
LABEL_1159:
                HIDWORD(v1187) = v634 + 1;
                v633[v634] = v36;
                goto LABEL_1251;
              }
LABEL_1161:
              if (3 * v669 <= 4 * (HIDWORD(v1187) - v1188))
              {
                if (v669 >= 0x40) {
                  v669 *= 2;
                }
                else {
                  unsigned int v669 = 128;
                }
              }
              else if (v669 - HIDWORD(v1187) >= v669 >> 3)
              {
                goto LABEL_1163;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v669);
              unsigned int v669 = v1187;
              uint64_t v633 = v1186;
LABEL_1163:
              unsigned int v670 = v669 - 1;
              unsigned int v671 = (v669 - 1) & ((v36 >> 4) ^ (v36 >> 9));
              unsigned int v672 = (llvm::ValueAsMetadata **)&v633[v671];
              uint64_t v673 = *v672;
              if (*v672 != (llvm::ValueAsMetadata *)-1)
              {
                uint64_t v674 = 0;
                int v675 = 1;
                while (v673 != v36)
                {
                  if (v674) {
                    BOOL v676 = 0;
                  }
                  else {
                    BOOL v676 = v673 == (llvm::ValueAsMetadata *)-2;
                  }
                  if (v676) {
                    uint64_t v674 = v672;
                  }
                  unsigned int v677 = v671 + v675++;
                  unsigned int v671 = v677 & v670;
                  unsigned int v672 = (llvm::ValueAsMetadata **)&v633[v677 & v670];
                  uint64_t v673 = *v672;
                  if (*v672 == (llvm::ValueAsMetadata *)-1) {
                    goto LABEL_1244;
                  }
                }
                goto LABEL_1251;
              }
LABEL_1243:
              uint64_t v674 = 0;
LABEL_1244:
              if (v674) {
                uint64_t v716 = v674;
              }
              else {
                uint64_t v716 = v672;
              }
              if (*v716 != v36)
              {
                if (*v716 == (llvm::ValueAsMetadata *)-2) {
                  --v1188;
                }
                else {
                  ++HIDWORD(v1187);
                }
                void *v716 = v36;
              }
              goto LABEL_1251;
            }
LABEL_1283:
            char *v635 = v36;
            --v1188;
            goto LABEL_1251;
          }
          uint64_t v625 = 0;
          uint64_t v626 = **(void **)v36;
          uint64_t v1195 = &v1197;
          uint64_t v1196 = 0x200000000;
          uint64_t v1203 = v626;
          v1204 = &v1212;
          uint64_t v1205 = &v1213;
          uint64_t v1206 = 0;
          int v1207 = 0;
          __int16 v1208 = 512;
          char v1209 = 7;
          int v1201 = 0;
          uint64_t v1202 = 0;
          uint64_t v1210 = 0;
          uint64_t v1211 = 0;
          uint64_t v1212 = &unk_1F2616E88;
          uint64_t v1213 = &unk_1F2617008;
          int v1201 = (void *)*((void *)v36 + 5);
          uint64_t v1202 = (void **)((char *)v36 + 24);
          uint64_t v627 = (llvm::Value *)*((void *)v36 + 6);
          v1190 = (uint64_t **)v627;
          if (v627)
          {
            llvm::MetadataTracking::track((uint64_t)&v1190, (unsigned __int8 *)v627, 2);
            uint64_t v625 = (llvm::Value *)v1190;
          }
          sub_1CB8461A4((uint64_t)&v1195, 0, (uint64_t)v625);
          if (v1190)
          {
            int v734 = *(unsigned __int8 *)v1190;
            if ((v734 - 4) > 0x1E)
            {
              if ((v734 - 3) >= 0xFFFFFFFE) {
                unint64_t v761 = (llvm::Value *)v1190;
              }
              else {
                unint64_t v761 = 0;
              }
              if ((v734 - 3) < 0xFFFFFFFE)
              {
                int v33 = v1168;
                if (v734 == 3) {
                  v1190[1] = 0;
                }
                goto LABEL_1105;
              }
              unint64_t v736 = (unint64_t)v761 + 8;
            }
            else
            {
              if ((*((unsigned char *)v1190 + 1) & 0x7F) != 2 && !*((_DWORD *)v1190 + 3)) {
                goto LABEL_1105;
              }
              uint64_t v735 = v1190[2];
              if ((v735 & 4) == 0) {
                goto LABEL_1105;
              }
              unint64_t v736 = (unint64_t)v735 & 0xFFFFFFFFFFFFFFF8;
              if (!v736) {
                goto LABEL_1105;
              }
            }
            v1217 = (void **)&v1190;
            sub_1CC5FA668(v736 + 16, &v1217);
            int v33 = v1168;
          }
LABEL_1105:
          BOOL v628 = (llvm::Value **)((char *)v35 - 32 * (*((_DWORD *)v34 - 1) & 0x7FFFFFF));
          uint64_t v629 = v628[8];
          uint64_t v630 = *v628;
          uint64_t v631 = v628[4];
          __int16 v1220 = 257;
          unsigned int v632 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v1195, v629, v630, v631, (const llvm::Twine *)&v1217, 0);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v34 - 3), v632, (llvm::Value *)1);
          uint64_t v633 = v1186;
          uint64_t v634 = HIDWORD(v1187);
          if (v1186 == v1185)
          {
            if (HIDWORD(v1187))
            {
              uint64_t v635 = 0;
              uint64_t v636 = 8 * HIDWORD(v1187);
              v637 = (llvm::ValueAsMetadata **)v1186;
              do
              {
                if (*v637 == v36) {
                  goto LABEL_1251;
                }
                if (*v637 == (llvm::ValueAsMetadata *)-2) {
                  uint64_t v635 = v637;
                }
                ++v637;
                v636 -= 8;
              }
              while (v636);
              if (v635) {
                goto LABEL_1283;
              }
            }
            unsigned int v638 = v1187;
            if (HIDWORD(v1187) < v1187) {
              goto LABEL_1159;
            }
          }
          else
          {
            unsigned int v638 = v1187;
          }
          if (3 * v638 <= 4 * (HIDWORD(v1187) - v1188))
          {
            if (v638 >= 0x40) {
              v638 *= 2;
            }
            else {
              unsigned int v638 = 128;
            }
          }
          else if (v638 - HIDWORD(v1187) >= v638 >> 3)
          {
LABEL_1177:
            unsigned int v678 = v638 - 1;
            unsigned int v679 = (v638 - 1) & ((v36 >> 4) ^ (v36 >> 9));
            unsigned int v672 = (llvm::ValueAsMetadata **)&v633[v679];
            uint64_t v680 = *v672;
            if (*v672 == (llvm::ValueAsMetadata *)-1) {
              goto LABEL_1243;
            }
            uint64_t v674 = 0;
            int v681 = 1;
            while (v680 != v36)
            {
              if (v674) {
                BOOL v682 = 0;
              }
              else {
                BOOL v682 = v680 == (llvm::ValueAsMetadata *)-2;
              }
              if (v682) {
                uint64_t v674 = v672;
              }
              unsigned int v683 = v679 + v681++;
              unsigned int v679 = v683 & v678;
              unsigned int v672 = (llvm::ValueAsMetadata **)&v633[v683 & v678];
              uint64_t v680 = *v672;
              if (*v672 == (llvm::ValueAsMetadata *)-1) {
                goto LABEL_1244;
              }
            }
LABEL_1251:
            if (v1195 != &v1197) {
              free(v1195);
            }
            goto LABEL_1240;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v638);
          unsigned int v638 = v1187;
          uint64_t v633 = v1186;
          goto LABEL_1177;
        }
LABEL_416:
        if (*(v34 - 2))
        {
          uint64_t v265 = v48;
          int v266 = 1;
          llvm::SampleInfo::SampleInfo((uint64_t)&v1195, v264, 1);
          v1217 = (void **)v1219;
          uint64_t v1218 = 0x400000000;
          uint64_t v268 = *(v34 - 2);
          if (!v268) {
            goto LABEL_899;
          }
          unsigned int v269 = 0;
          do
          {
            if (v269 >= HIDWORD(v1218)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (*(unsigned __int8 *)(*(void *)(v268 + 24) + 16) <= 0x1Bu) {
              uint64_t v270 = 0;
            }
            else {
              uint64_t v270 = *(void **)(v268 + 24);
            }
            v1217[v269] = v270;
            unsigned int v269 = v1218 + 1;
            LODWORD(v1218) = v1218 + 1;
            uint64_t v268 = *(void *)(v268 + 8);
          }
          while (v268);
          if (!v269)
          {
LABEL_777:
            int v266 = 1;
            goto LABEL_899;
          }
          while (2)
          {
            uint64_t v486 = v1217[--v269];
            LODWORD(v1218) = v269;
            if (!v486)
            {
LABEL_898:
              int v266 = 0;
LABEL_899:
              if (v1217 != (void **)v1219) {
                free(v1217);
              }
              if (v266)
              {
                uint64_t v533 = HIDWORD(v1198);
                uint64_t v534 = (_DWORD *)*((void *)v35 + 4 * HIDWORD(v1198) + -4 * (*((_DWORD *)v34 - 1) & 0x7FFFFFF));
                uint64_t v535 = v534 + 6;
                if (v534[8] >= 0x41u) {
                  uint64_t v535 = (void *)*v535;
                }
                unint64_t v536 = *v535 & 0xFFFFFFFFFFFFFFFELL;
                int v537 = *(llvm::Constant ****)v534;
                unint64_t v538 = *(unsigned int *)(*(void *)v534 + 8);
                LODWORD(v1218) = v538 >> 8;
                if (v538 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v538 <= 0xFF) {
                  unint64_t v539 = 0;
                }
                else {
                  unint64_t v539 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v538) + 63);
                }
                v1217 = (void **)(v539 & v536);
                IntegerValue = llvm::Constant::getIntegerValue(v537, (llvm::Type *)&v1217, v267);
                uint64_t v541 = (char *)v35 - 32 * (*((_DWORD *)v34 - 1) & 0x7FFFFFF);
                unint64_t v542 = &v541[32 * v533];
                if (*(void *)v542)
                {
                  **((void **)v542 + 2) = *((void *)v542 + 1);
                  uint64_t v543 = *((void *)v542 + 1);
                  if (v543) {
                    *(void *)(v543 + 16) = *((void *)v542 + 2);
                  }
                }
                *(void *)unint64_t v542 = IntegerValue;
                if (IntegerValue)
                {
                  uint64_t v546 = *((void *)IntegerValue + 1);
                  uint64_t v544 = (char **)((char *)IntegerValue + 8);
                  uint64_t v545 = v546;
                  uint64_t v547 = &v541[32 * v533];
                  *((void *)v547 + 1) = v546;
                  if (v546) {
                    *(void *)(v545 + 16) = v547 + 8;
                  }
                  *((void *)v547 + 2) = v544;
                  unsigned __int8 *v544 = v542;
                }
                if (v1218 >= 0x41 && v1217) {
                  MEMORY[0x1D25D9CB0](v1217, 0x1000C8000313F17);
                }
                llvm::ScalarEvolution::forgetValue(v1167, (llvm::Value *)(v34 - 3));
                char v48 = v265;
              }
              goto LABEL_1240;
            }
            int v266 = 0;
            unsigned int v487 = *((unsigned __int8 *)v486 + 16);
            if (v487 > 0x5B)
            {
              if (v487 != 92)
              {
                if (v487 != 95) {
                  goto LABEL_899;
                }
                goto LABEL_766;
              }
              if (v486[18] > 1u || **((_DWORD **)v486 + 8)) {
                goto LABEL_898;
              }
            }
            else
            {
              if (v487 != 83 && v487 != 85) {
                goto LABEL_899;
              }
LABEL_766:
              for (uint64_t i = *((void *)v486 + 1); i; uint64_t i = *(void *)(i + 8))
              {
                if (v269 >= HIDWORD(v1218)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (*(unsigned __int8 *)(*(void *)(i + 24) + 16) <= 0x1Bu) {
                  uint64_t v489 = 0;
                }
                else {
                  uint64_t v489 = *(void **)(i + 24);
                }
                v1217[v269] = v489;
                unsigned int v269 = v1218 + 1;
                LODWORD(v1218) = v1218 + 1;
              }
            }
            if (!v269) {
              goto LABEL_777;
            }
            continue;
          }
        }
        uint64_t v490 = v1186;
        uint64_t v491 = HIDWORD(v1187);
        if (v1186 != v1185)
        {
          unsigned int v495 = v1187;
          goto LABEL_871;
        }
        if (!HIDWORD(v1187)) {
          goto LABEL_786;
        }
        uint64_t v492 = 0;
        uint64_t v493 = 8 * HIDWORD(v1187);
        int v494 = (llvm::ValueAsMetadata **)v1186;
        do
        {
          if (*v494 == v36) {
            goto LABEL_1239;
          }
          if (*v494 == (llvm::ValueAsMetadata *)-2) {
            uint64_t v492 = v494;
          }
          ++v494;
          v493 -= 8;
        }
        while (v493);
        if (!v492)
        {
LABEL_786:
          unsigned int v495 = v1187;
          if (HIDWORD(v1187) < v1187) {
            goto LABEL_787;
          }
LABEL_871:
          if (3 * v495 <= 4 * (HIDWORD(v1187) - v1188))
          {
            if (v495 >= 0x40) {
              v495 *= 2;
            }
            else {
              unsigned int v495 = 128;
            }
          }
          else if (v495 - HIDWORD(v1187) >= v495 >> 3)
          {
            goto LABEL_873;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v495);
          unsigned int v495 = v1187;
          uint64_t v490 = v1186;
LABEL_873:
          unsigned int v523 = v495 - 1;
          unsigned int v524 = (v495 - 1) & ((v36 >> 4) ^ (v36 >> 9));
          uint64_t v525 = (llvm::ValueAsMetadata **)&v490[v524];
          uint64_t v526 = *v525;
          if (*v525 != (llvm::ValueAsMetadata *)-1)
          {
            int v527 = 0;
            int v528 = 1;
            while (v526 != v36)
            {
              if (v527) {
                BOOL v529 = 0;
              }
              else {
                BOOL v529 = v526 == (llvm::ValueAsMetadata *)-2;
              }
              if (v529) {
                int v527 = v525;
              }
              unsigned int v530 = v524 + v528++;
              unsigned int v524 = v530 & v523;
              uint64_t v525 = (llvm::ValueAsMetadata **)&v490[v530 & v523];
              uint64_t v526 = *v525;
              if (*v525 == (llvm::ValueAsMetadata *)-1) {
                goto LABEL_1707;
              }
            }
            goto LABEL_1239;
          }
LABEL_1706:
          int v527 = 0;
LABEL_1707:
          if (v527) {
            long long v921 = v527;
          }
          else {
            long long v921 = v525;
          }
          if (*v921 != v36)
          {
            if (*v921 == (llvm::ValueAsMetadata *)-2) {
              --v1188;
            }
            else {
              ++HIDWORD(v1187);
            }
            *long long v921 = v36;
          }
          goto LABEL_1239;
        }
LABEL_1691:
        *uint64_t v492 = v36;
LABEL_867:
        --v1188;
        goto LABEL_1239;
      }
      if (v264 <= 166)
      {
        if (v264 != 52)
        {
          if (v264 != 139) {
            goto LABEL_1240;
          }
          uint64_t v579 = *((void *)v35 - 4 * (*((_DWORD *)v34 - 1) & 0x7FFFFFF));
          v1182[0] = 0;
          BOOL v1184 = 0;
          uint64_t v580 = *(void *)(v579 + 8);
          if (!v580 || *(void *)(v580 + 8)) {
            goto LABEL_1240;
          }
          int v581 = *(unsigned __int8 *)(v579 + 16);
          if (v581 == 5)
          {
            if (*(_WORD *)(v579 + 18) != 18) {
              goto LABEL_1240;
            }
            v717 = (uint64_t *)(v579 - 32 * (*(_DWORD *)(v579 + 20) & 0x7FFFFFF));
            if (!*v717) {
              goto LABEL_1240;
            }
            v1182[0] = *v717;
            uint64_t v582 = (llvm::Instruction *)v717[4];
            if (!v582) {
              goto LABEL_1240;
            }
          }
          else
          {
            if (v581 != 46) {
              goto LABEL_1240;
            }
            if (!*(void *)(v579 - 64)) {
              goto LABEL_1240;
            }
            v1182[0] = *(void *)(v579 - 64);
            uint64_t v582 = *(llvm::Instruction **)(v579 - 32);
            if (!v582) {
              goto LABEL_1240;
            }
          }
          unsigned int v718 = 0;
          BOOL v1184 = v582;
          uint64_t v719 = **(void **)v36;
          uint64_t v1195 = &v1197;
          uint64_t v1196 = 0x200000000;
          uint64_t v1203 = v719;
          v1204 = &v1212;
          uint64_t v1205 = &v1213;
          uint64_t v1206 = 0;
          int v1207 = 0;
          __int16 v1208 = 512;
          char v1209 = 7;
          int v1201 = 0;
          uint64_t v1202 = 0;
          uint64_t v1210 = 0;
          uint64_t v1211 = 0;
          uint64_t v1212 = &unk_1F2616E88;
          uint64_t v1213 = &unk_1F2617008;
          int v1201 = (void *)*((void *)v36 + 5);
          uint64_t v1202 = (void **)((char *)v36 + 24);
          unsigned int v720 = (llvm::Value *)*((void *)v36 + 6);
          v1190 = (uint64_t **)v720;
          if (v720)
          {
            llvm::MetadataTracking::track((uint64_t)&v1190, (unsigned __int8 *)v720, 2);
            unsigned int v718 = (llvm::Value *)v1190;
          }
          sub_1CB8461A4((uint64_t)&v1195, 0, (uint64_t)v718);
          if (v1190)
          {
            int v832 = *(unsigned __int8 *)v1190;
            if ((v832 - 4) > 0x1E)
            {
              if ((v832 - 3) >= 0xFFFFFFFE) {
                uint64_t v841 = (llvm::Value *)v1190;
              }
              else {
                uint64_t v841 = 0;
              }
              if ((v832 - 3) < 0xFFFFFFFE)
              {
                int v33 = v1168;
                if (v832 == 3) {
                  v1190[1] = 0;
                }
                goto LABEL_1259;
              }
              unint64_t v834 = (unint64_t)v841 + 8;
            }
            else
            {
              int v33 = v1168;
              if ((*((unsigned char *)v1190 + 1) & 0x7F) != 2 && !*((_DWORD *)v1190 + 3)) {
                goto LABEL_1259;
              }
              uint64_t v833 = v1190[2];
              if ((v833 & 4) == 0) {
                goto LABEL_1259;
              }
              unint64_t v834 = (unint64_t)v833 & 0xFFFFFFFFFFFFFFF8;
              if (!v834) {
                goto LABEL_1259;
              }
            }
            v1217 = (void **)&v1190;
            sub_1CC5FA668(v834 + 16, &v1217);
            int v33 = v1168;
          }
LABEL_1259:
          v1190 = *(uint64_t ***)v579;
          Declaratiouint64_t n = llvm::Intrinsic::getDeclaration((uint64_t **)v1159[5], 139, (uint64_t)&v1190, 1);
          uint64_t v722 = Declaration;
          if (Declaration)
          {
            uint64_t v723 = *(uint64_t ***)(Declaration + 24);
            __int16 v1220 = 257;
            uint64_t v724 = sub_1CB845BAC((uint64_t *)&v1195, v723, (uint64_t **)Declaration, v1182, 1, (uint64_t)&v1217, 0);
            uint64_t v725 = *(uint64_t ***)(v722 + 24);
          }
          else
          {
            __int16 v1220 = 257;
            uint64_t v724 = sub_1CB845BAC((uint64_t *)&v1195, 0, 0, v1182, 1, (uint64_t)&v1217, 0);
            uint64_t v725 = 0;
          }
          __int16 v1220 = 257;
          uint64_t v743 = sub_1CB845BAC((uint64_t *)&v1195, v725, (uint64_t **)v722, (uint64_t *)&v1184, 1, (uint64_t)&v1217, 0);
          __int16 v1220 = 257;
          uint64_t v744 = (llvm::Value *)sub_1CB93098C((uint64_t)&v1195, v724, v743, (llvm::Instruction *)v579, (uint64_t)&v1217);
          llvm::Value::doRAUW(v35, v744, (llvm::Value *)1);
          int v745 = v1186;
          uint64_t v746 = HIDWORD(v1187);
          if (v1186 != v1185)
          {
            unsigned int v750 = v1187;
            goto LABEL_1319;
          }
          if (HIDWORD(v1187))
          {
            uint64_t v747 = 0;
            uint64_t v748 = 8 * HIDWORD(v1187);
            uint64_t v749 = (llvm::ValueAsMetadata **)v1186;
            do
            {
              if (*v749 == v36) {
                goto LABEL_1393;
              }
              if (*v749 == (llvm::ValueAsMetadata *)-2) {
                uint64_t v747 = v749;
              }
              ++v749;
              v748 -= 8;
            }
            while (v748);
            if (v747)
            {
              *uint64_t v747 = v36;
              --v1188;
              goto LABEL_1393;
            }
          }
          unsigned int v750 = v1187;
          if (HIDWORD(v1187) < v1187)
          {
            ++HIDWORD(v1187);
            *(void *)&v1186[8 * v746] = v36;
            goto LABEL_1393;
          }
LABEL_1319:
          if (3 * v750 <= 4 * (HIDWORD(v1187) - v1188))
          {
            if (v750 >= 0x40) {
              v750 *= 2;
            }
            else {
              unsigned int v750 = 128;
            }
          }
          else if (v750 - HIDWORD(v1187) >= v750 >> 3)
          {
LABEL_1321:
            unsigned int v751 = v750 - 1;
            unsigned int v752 = (v750 - 1) & ((v36 >> 4) ^ (v36 >> 9));
            uint64_t v753 = &v745[8 * v752];
            uint64_t v754 = *(llvm::ValueAsMetadata **)v753;
            if (*(void *)v753 == -1)
            {
              uint64_t v755 = 0;
              int v33 = v1168;
LABEL_1386:
              if (v755) {
                uint64_t v779 = (llvm::ValueAsMetadata **)v755;
              }
              else {
                uint64_t v779 = (llvm::ValueAsMetadata **)v753;
              }
              if (*v779 != v36)
              {
                if (*v779 == (llvm::ValueAsMetadata *)-2) {
                  --v1188;
                }
                else {
                  ++HIDWORD(v1187);
                }
                *uint64_t v779 = v36;
                int v33 = v1168;
              }
            }
            else
            {
              uint64_t v755 = 0;
              int v756 = 1;
              int v33 = v1168;
              while (v754 != v36)
              {
                if (v755) {
                  BOOL v757 = 0;
                }
                else {
                  BOOL v757 = v754 == (llvm::ValueAsMetadata *)-2;
                }
                if (v757) {
                  uint64_t v755 = v753;
                }
                unsigned int v758 = v752 + v756++;
                unsigned int v752 = v758 & v751;
                uint64_t v753 = &v745[8 * (v758 & v751)];
                uint64_t v754 = *(llvm::ValueAsMetadata **)v753;
                if (*(void *)v753 == -1) {
                  goto LABEL_1386;
                }
              }
            }
LABEL_1393:
            v780 = v1186;
            uint64_t v781 = HIDWORD(v1187);
            unsigned int v782 = v1187;
            if (v1186 != v1185) {
              goto LABEL_1403;
            }
            if (!HIDWORD(v1187)) {
              goto LABEL_1401;
            }
            int v783 = 0;
            uint64_t v784 = 8 * HIDWORD(v1187);
            uint64_t v785 = v1186;
            do
            {
              if (*v785 == v579) {
                goto LABEL_1237;
              }
              if (*v785 == -2) {
                int v783 = v785;
              }
              ++v785;
              v784 -= 8;
            }
            while (v784);
            if (!v783)
            {
LABEL_1401:
              if (v1187 > HIDWORD(v1187))
              {
                ++HIDWORD(v1187);
                *(void *)&v1186[8 * v781] = v579;
LABEL_1237:
                if (v1195 != &v1197) {
                  free(v1195);
                }
                goto LABEL_1239;
              }
LABEL_1403:
              if (3 * (int)v1187 <= (4 * (HIDWORD(v1187) - v1188)))
              {
                if (v1187 >= 0x40) {
                  unsigned int v782 = 2 * v1187;
                }
                else {
                  unsigned int v782 = 128;
                }
              }
              else if ((int)v1187 - HIDWORD(v1187) >= v1187 >> 3)
              {
                goto LABEL_1405;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v782);
              unsigned int v782 = v1187;
              v780 = v1186;
LABEL_1405:
              unsigned int v786 = v782 - 1;
              unsigned int v787 = (v782 - 1) & ((v579 >> 4) ^ (v579 >> 9));
              unsigned int v788 = &v780[8 * v787];
              uint64_t v789 = *(void *)v788;
              if (*(void *)v788 == -1)
              {
                uint64_t v790 = 0;
                int v33 = v1168;
LABEL_1417:
                if (v790) {
                  unint64_t v794 = v790;
                }
                else {
                  unint64_t v794 = v788;
                }
                if (*(void *)v794 != v579)
                {
                  if (*(void *)v794 == -2) {
                    --v1188;
                  }
                  else {
                    ++HIDWORD(v1187);
                  }
                  *(void *)unint64_t v794 = v579;
                  int v33 = v1168;
                }
              }
              else
              {
                uint64_t v790 = 0;
                int v791 = 1;
                int v33 = v1168;
                while (v789 != v579)
                {
                  if (v790) {
                    BOOL v792 = 0;
                  }
                  else {
                    BOOL v792 = v789 == -2;
                  }
                  if (v792) {
                    uint64_t v790 = v788;
                  }
                  unsigned int v793 = v787 + v791++;
                  unsigned int v787 = v793 & v786;
                  unsigned int v788 = &v780[8 * (v793 & v786)];
                  uint64_t v789 = *(void *)v788;
                  if (*(void *)v788 == -1) {
                    goto LABEL_1417;
                  }
                }
              }
              goto LABEL_1237;
            }
            *int v783 = v579;
LABEL_1214:
            --v1188;
            goto LABEL_1237;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v750);
          unsigned int v750 = v1187;
          int v745 = v1186;
          goto LABEL_1321;
        }
        uint64_t v587 = llvm::ConstantInt::get((llvm::ConstantInt *)(**(void **)*(v34 - 3) + 1888), 1uLL, 0);
        unint64_t v588 = 0;
        uint64_t v589 = (void *)((void *)v35 - 4 * (*((_DWORD *)v34 - 1) & 0x7FFFFFF))[4];
        unint64_t v590 = *(unsigned int *)(*(v34 - 3) + 8);
        uint64_t v591 = **(void **)v36;
        uint64_t v1195 = &v1197;
        uint64_t v1196 = 0x200000000;
        uint64_t v1203 = v591;
        v1204 = &v1212;
        uint64_t v1205 = &v1213;
        uint64_t v1206 = 0;
        int v1207 = 0;
        __int16 v1208 = 512;
        char v1209 = 7;
        int v1201 = 0;
        uint64_t v1202 = 0;
        uint64_t v1210 = 0;
        uint64_t v1211 = 0;
        uint64_t v1212 = &unk_1F2616E88;
        uint64_t v1213 = &unk_1F2617008;
        int v1201 = (void *)*((void *)v36 + 5);
        uint64_t v1202 = (void **)((char *)v36 + 24);
        v592 = (llvm::Value *)*((void *)v36 + 6);
        v1190 = (uint64_t **)v592;
        if (v592)
        {
          llvm::MetadataTracking::track((uint64_t)&v1190, (unsigned __int8 *)v592, 2);
          unint64_t v588 = (llvm::Value *)v1190;
        }
        sub_1CB8461A4((uint64_t)&v1195, 0, (uint64_t)v588);
        if (v1190)
        {
          int v726 = *(unsigned __int8 *)v1190;
          if ((v726 - 4) > 0x1E)
          {
            if ((v726 - 3) >= 0xFFFFFFFE) {
              unsigned int v759 = (llvm::Value *)v1190;
            }
            else {
              unsigned int v759 = 0;
            }
            if ((v726 - 3) < 0xFFFFFFFE)
            {
              int v33 = v1168;
              if (v726 == 3) {
                v1190[1] = 0;
              }
              goto LABEL_1063;
            }
            unint64_t v728 = (unint64_t)v759 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1190 + 1) & 0x7F) != 2 && !*((_DWORD *)v1190 + 3)) {
              goto LABEL_1063;
            }
            uint64_t v727 = v1190[2];
            if ((v727 & 4) == 0) {
              goto LABEL_1063;
            }
            unint64_t v728 = (unint64_t)v727 & 0xFFFFFFFFFFFFFFF8;
            if (!v728) {
              goto LABEL_1063;
            }
          }
          v1217 = (void **)&v1190;
          sub_1CC5FA668(v728 + 16, &v1217);
          int v33 = v1168;
        }
LABEL_1063:
        v1173 = v48;
        if (v590 >> 8 < 0x21)
        {
          uint64_t v639 = ***(void ***)v35;
          uint64_t v640 = ((*(_DWORD *)(*(void *)v35 + 8) >> 8) - 1);
          uint64_t v641 = *(llvm::ConstantInt **)(v639 + 1960);
          unsigned int v642 = *(_DWORD *)(v639 + 1968);
          LODWORD(v1218) = v642 >> 8;
          if (v642 >> 8 > 0x40) {
            operator new[]();
          }
          if (v642 <= 0xFF) {
            unint64_t v643 = 0;
          }
          else {
            unint64_t v643 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v642) + 63);
          }
          v1217 = (void **)(v643 & v640);
          uint64_t v644 = llvm::ConstantInt::get(v641, (llvm::LLVMContext *)&v1217, v593);
          if (v1218 >= 0x41 && v1217) {
            MEMORY[0x1D25D9CB0](v1217, 0x1000C8000313F17);
          }
          uint64_t v645 = (uint64_t **)v1159[5];
          llvm::Intrinsic::getType(*v645, 2168, 0, 0);
          Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v645, 2168, 0, 0);
          llvm::Module::getOrInsertFunction((uint64_t)v645, "llvm.agx2.ft1", (const char *)0xD, Type, 0);
          uint64_t v648 = v647;
          v1190 = 0;
          uint64_t v649 = (unsigned __int8 *)*((void *)v35 - 4 * (*((_DWORD *)v34 - 1) & 0x7FFFFFF));
          uint64_t v650 = ***(void ***)v648 + 1960;
          __int16 v1220 = 257;
          v1190 = (uint64_t **)sub_1CB844B8C((uint64_t)&v1195, v649, v650, (uint64_t)&v1217);
          uint64_t v651 = *(uint64_t ***)(v648 + 24);
          __int16 v1220 = 257;
          uint64_t v652 = sub_1CB845BAC((uint64_t *)&v1195, v651, (uint64_t **)v648, (uint64_t *)&v1190, 1, (uint64_t)&v1217, 0);
          __int16 v1220 = 257;
          uint64_t v653 = sub_1CB84494C((uint64_t)&v1195, (uint64_t)v644, v652, (uint64_t)&v1217, 0, 0);
        }
        else
        {
          uint64_t v1160 = v589;
          __pb = v587;
          uint64_t v594 = *(llvm::ConstantInt **)(*(void *)v1203 + 1960);
          unsigned int v595 = *(_DWORD *)(*(void *)v1203 + 1968);
          LODWORD(v1218) = v595 >> 8;
          if (v595 >> 8 >= 0x41) {
            operator new[]();
          }
          v1217 = 0;
          uint64_t v597 = (unsigned __int8 *)llvm::ConstantInt::get(v594, (llvm::LLVMContext *)&v1217, v593);
          if (v1218 >= 0x41 && v1217) {
            MEMORY[0x1D25D9CB0](v1217, 0x1000C8000313F17);
          }
          uint64_t v598 = *(llvm::ConstantInt **)(*(void *)v1203 + 1960);
          unsigned int v599 = *(_DWORD *)(*(void *)v1203 + 1968);
          LODWORD(v1218) = v599 >> 8;
          if (v599 >> 8 > 0x40) {
            operator new[]();
          }
          if (v599 <= 0xFF) {
            LOBYTE(v600) = 0;
          }
          else {
            unint64_t v600 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v599) + 63);
          }
          v1217 = (void **)(v600 & 1);
          uint64_t v602 = (unsigned __int8 *)llvm::ConstantInt::get(v598, (llvm::LLVMContext *)&v1217, v596);
          if (v1218 >= 0x41 && v1217) {
            MEMORY[0x1D25D9CB0](v1217, 0x1000C8000313F17);
          }
          uint64_t v603 = *(llvm::ConstantInt **)(*(void *)v1203 + 1960);
          unsigned int v604 = *(_DWORD *)(*(void *)v1203 + 1968);
          LODWORD(v1218) = v604 >> 8;
          if (v604 >> 8 > 0x40) {
            operator new[]();
          }
          if (v604 <= 0xFF) {
            LOBYTE(v605) = 0;
          }
          else {
            unint64_t v605 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v604) + 63);
          }
          v1217 = (void **)(v605 & 0x1F);
          uint64_t v607 = llvm::ConstantInt::get(v603, (llvm::LLVMContext *)&v1217, v601);
          if (v1218 >= 0x41 && v1217) {
            MEMORY[0x1D25D9CB0](v1217, 0x1000C8000313F17);
          }
          uint64_t v608 = *(llvm::ConstantInt **)(*(void *)v1203 + 1960);
          unsigned int v609 = *(_DWORD *)(*(void *)v1203 + 1968);
          LODWORD(v1218) = v609 >> 8;
          if (v609 >> 8 > 0x40) {
            operator new[]();
          }
          if (v609 <= 0xFF) {
            LOBYTE(v610) = 0;
          }
          else {
            unint64_t v610 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v609) + 63);
          }
          v1217 = (void **)(v610 & 0x20);
          uint64_t v611 = llvm::ConstantInt::get(v608, (llvm::LLVMContext *)&v1217, v606);
          if (v1218 >= 0x41 && v1217) {
            MEMORY[0x1D25D9CB0](v1217, 0x1000C8000313F17);
          }
          double v613 = llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(void **)*(v34 - 3) + 1960), (llvm::Type *)2);
          uint64_t v614 = (unsigned __int8 *)*((void *)v35 - 4 * (*((_DWORD *)v34 - 1) & 0x7FFFFFF));
          __int16 v1194 = 257;
          if (*(void *)v614 != v612)
          {
            if (v614[16] <= 0x14u)
            {
              uint64_t v684 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t, double))*v1204 + 28))(v1204, 49, v614, v612, v613);
              uint64_t v614 = (unsigned __int8 *)v684;
              if (v684)
              {
                if (*(unsigned __int8 *)(v684 + 16) >= 0x1Cu)
                {
                  (*((void (**)(void **, uint64_t, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v684, &v1190, v1201, v1202);
                  if (v1196)
                  {
                    uint64_t v944 = (llvm::MDNode **)v1195;
                    v945 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v614, *(_DWORD *)v944, v944[1]);
                      v944 += 2;
                    }
                    while (v944 != v945);
                  }
                }
              }
            }
            else
            {
              __int16 v1220 = 257;
              uint64_t v614 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v614, v612, (const char **)&v1217, 0);
              (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1205 + 2))(v1205, v614, &v1190, v1201, v1202);
              if (v1196)
              {
                uint64_t v615 = (llvm::MDNode **)v1195;
                v616 = (llvm::MDNode **)((char *)v1195 + 16 * v1196);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v614, *(_DWORD *)v615, v615[1]);
                  v615 += 2;
                }
                while (v615 != v616);
              }
            }
          }
          v1182[0] = 0;
          __int16 v1220 = 257;
          v1182[0] = (uint64_t)sub_1CB8445F4((uint64_t)&v1195, v614, v597, (uint64_t)&v1217);
          BOOL v1184 = 0;
          __int16 v1220 = 257;
          BOOL v1184 = sub_1CB8445F4((uint64_t)&v1195, v614, v602, (uint64_t)&v1217);
          __int16 v1220 = 257;
          unsigned int v685 = sub_1CB845F20((uint64_t)&v1195, 32, v1184, (uint64_t)v597, (uint64_t)&v1217);
          uint64_t v686 = (uint64_t **)v1159[5];
          llvm::Intrinsic::getType(*v686, 2168, 0, 0);
          uint64_t v687 = (llvm::PointerType *)llvm::Intrinsic::getType(*v686, 2168, 0, 0);
          llvm::Module::getOrInsertFunction((uint64_t)v686, "llvm.agx2.ft1", (const char *)0xD, v687, 0);
          uint64_t v689 = v688;
          if (v688) {
            uint64_t v688 = *(void *)(v688 + 24);
          }
          __int16 v1220 = 257;
          uint64_t v690 = sub_1CB845BAC((uint64_t *)&v1195, (uint64_t **)v688, (uint64_t **)v689, (uint64_t *)&v1184, 1, (uint64_t)&v1217, 0);
          __int16 v1220 = 257;
          unsigned int v691 = sub_1CB84494C((uint64_t)&v1195, (uint64_t)v607, v690, (uint64_t)&v1217, 0, 0);
          if (v689) {
            uint64_t v692 = *(uint64_t ***)(v689 + 24);
          }
          else {
            uint64_t v692 = 0;
          }
          __int16 v1220 = 257;
          uint64_t v693 = sub_1CB845BAC((uint64_t *)&v1195, v692, (uint64_t **)v689, v1182, 1, (uint64_t)&v1217, 0);
          __int16 v1220 = 257;
          uint64_t v694 = sub_1CB84494C((uint64_t)&v1195, (uint64_t)v607, v693, (uint64_t)&v1217, 0, 0);
          __int16 v1220 = 257;
          uint64_t v695 = sub_1CB844A3C((uint64_t)&v1195, v611, (uint64_t)v694, (uint64_t)&v1217, 0, 0);
          __int16 v1220 = 257;
          uint64_t v653 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v1195, v685, v695, v691, (const llvm::Twine *)&v1217, 0);
          if (__pb == v1160)
          {
            int v33 = v1168;
          }
          else
          {
            unint64_t v696 = v590 >> 8;
            __int16 v1220 = 257;
            unsigned int v697 = sub_1CB844AF4((uint64_t)&v1195, v1184, v1182[0], (uint64_t)&v1217);
            __int16 v1194 = 257;
            unsigned int v699 = sub_1CB845F20((uint64_t)&v1195, 32, v697, (uint64_t)v597, (uint64_t)&v1190);
            uint64_t v700 = *(llvm::ConstantInt **)(*(void *)v1203 + 1960);
            unsigned int v701 = *(_DWORD *)(*(void *)v1203 + 1968);
            LODWORD(v1218) = v701 >> 8;
            if (v701 >> 8 > 0x40) {
              operator new[]();
            }
            if (v701 <= 0xFF) {
              unint64_t v702 = 0;
            }
            else {
              unint64_t v702 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v701) + 63);
            }
            v1217 = (void **)(v702 & v696);
            uint64_t v703 = (llvm::Value *)llvm::ConstantInt::get(v700, (llvm::LLVMContext *)&v1217, v698);
            int v33 = v1168;
            if (v1218 >= 0x41 && v1217) {
              MEMORY[0x1D25D9CB0](v1217, 0x1000C8000313F17);
            }
            __int16 v1220 = 257;
            uint64_t v653 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v1195, v699, v703, v653, (const llvm::Twine *)&v1217, 0);
          }
        }
        uint64_t v704 = *(void *)v35;
        __int16 v1220 = 257;
        int v705 = sub_1CB844B8C((uint64_t)&v1195, (unsigned __int8 *)v653, v704, (uint64_t)&v1217);
        llvm::Value::doRAUW(v35, v705, (llvm::Value *)1);
        uint64_t v59 = v1186;
        uint64_t v60 = HIDWORD(v1187);
        if (v1186 != v1185)
        {
          unsigned int v708 = v1187;
          char v48 = v1173;
          goto LABEL_1216;
        }
        char v48 = v1173;
        if (!HIDWORD(v1187)) {
          goto LABEL_1211;
        }
        size_t v61 = 0;
        uint64_t v706 = 8 * HIDWORD(v1187);
        uint64_t v707 = (llvm::ValueAsMetadata **)v1186;
        do
        {
          if (*v707 == v36) {
            goto LABEL_1237;
          }
          if (*v707 == (llvm::ValueAsMetadata *)-2) {
            size_t v61 = v707;
          }
          ++v707;
          v706 -= 8;
        }
        while (v706);
        if (!v61)
        {
LABEL_1211:
          unsigned int v708 = v1187;
          if (HIDWORD(v1187) >= v1187)
          {
LABEL_1216:
            if (3 * v708 <= 4 * (HIDWORD(v1187) - v1188))
            {
              if (v708 >= 0x40) {
                v708 *= 2;
              }
              else {
                unsigned int v708 = 128;
              }
            }
            else if (v708 - HIDWORD(v1187) >= v708 >> 3)
            {
LABEL_1218:
              unsigned int v709 = v708 - 1;
              unsigned int v710 = (v708 - 1) & ((v36 >> 4) ^ (v36 >> 9));
              uint64_t v83 = (llvm::ValueAsMetadata **)&v59[v710];
              v711 = *v83;
              if (*v83 != (llvm::ValueAsMetadata *)-1)
              {
                uint64_t v85 = 0;
                int v712 = 1;
                while (v711 != v36)
                {
                  if (v85) {
                    BOOL v713 = 0;
                  }
                  else {
                    BOOL v713 = v711 == (llvm::ValueAsMetadata *)-2;
                  }
                  if (v713) {
                    uint64_t v85 = v83;
                  }
                  unsigned int v714 = v710 + v712++;
                  unsigned int v710 = v714 & v709;
                  uint64_t v83 = (llvm::ValueAsMetadata **)&v59[v714 & v709];
                  v711 = *v83;
                  if (*v83 == (llvm::ValueAsMetadata *)-1) {
                    goto LABEL_1230;
                  }
                }
                goto LABEL_1237;
              }
              goto LABEL_1229;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v708);
            unsigned int v708 = v1187;
            uint64_t v59 = v1186;
            goto LABEL_1218;
          }
LABEL_737:
          HIDWORD(v1187) = v60 + 1;
          v59[v60] = v36;
          goto LABEL_1237;
        }
LABEL_1213:
        *size_t v61 = v36;
        goto LABEL_1214;
      }
      if ((v264 - 167) >= 2)
      {
        if (v264 != 295) {
          goto LABEL_1240;
        }
        for (uint64_t j = (uint64_t *)v1159[10]; ; uint64_t j = (uint64_t *)j[1])
        {
          if (j == v1166) {
            goto LABEL_1681;
          }
          if (j) {
            BOOL v584 = j - 3;
          }
          else {
            BOOL v584 = 0;
          }
          uint64_t v585 = v584[5];
          if (v585) {
            uint64_t v586 = v585 - 24;
          }
          else {
            uint64_t v586 = 0;
          }
          if (*(unsigned __int8 *)(v586 + 16) - 29 >= 0xB) {
            uint64_t v586 = 0;
          }
          if (*(unsigned char *)(v586 + 16) == 29) {
            break;
          }
        }
        uint64_t v1174 = v48;
        int v729 = (void *)*v33;
        if ((void *)*v33 == v33)
        {
          uint64_t v730 = 0;
        }
        else
        {
          uint64_t v730 = (llvm::Instruction *)(v729 - 3);
          if (v729) {
            v737 = (llvm::Instruction *)(v729 - 3);
          }
          else {
            v737 = 0;
          }
          unsigned int v738 = *((unsigned __int8 *)v737 + 16) - 40;
          if (v738 >= 0xFFFFFFF5) {
            uint64_t v739 = v737;
          }
          else {
            uint64_t v739 = 0;
          }
          if (v729)
          {
            if (*((unsigned char *)v739 + 16) == 30 && v738 >= 0xFFFFFFF5)
            {
              if (*((unsigned char *)v729 - 8) != 30)
              {
                int v842 = 2;
                switch(*((unsigned char *)v729 - 8))
                {
                  case 0x1E:
                    __break(1u);
                    JUMPOUT(0x1CBAE921CLL);
                  case 0x1F:
                    int v842 = (*((_DWORD *)v729 - 1) >> 1) & 0x3FFFFFF;
                    goto LABEL_1533;
                  case 0x20:
                  case 0x26:
                    int v842 = (*((_DWORD *)v729 - 1) & 0x7FFFFFF) - 1;
                    goto LABEL_1533;
                  case 0x21:
                    goto LABEL_1301;
                  case 0x24:
                    int v842 = *((_WORD *)v729 - 3) & 1;
                    goto LABEL_1533;
                  case 0x25:
                    int v842 = 1;
                    goto LABEL_1301;
                  case 0x27:
                    int v842 = *((_DWORD *)v729 + 14) + 1;
LABEL_1533:
                    if (v842) {
                      goto LABEL_1301;
                    }
                    goto LABEL_1355;
                  default:
                    goto LABEL_1355;
                }
              }
              if ((*((_DWORD *)v729 - 1) & 0x7FFFFFF) == 3) {
                int v842 = 2;
              }
              else {
                int v842 = 1;
              }
LABEL_1301:
              for (unsigned int k = 0; k != v842; ++k)
              {
                uint64_t Successor = llvm::Instruction::getSuccessor(v730, k);
                if (v1215 >= (unint64_t)HIDWORD(v1215)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)&v1214[8 * v1215] = Successor;
                LODWORD(v1215) = v1215 + 1;
              }
              uint64_t v730 = v739;
            }
          }
        }
LABEL_1355:
        int v762 = 0;
        uint64_t v763 = **(void **)v36;
        uint64_t v1195 = &v1197;
        uint64_t v1196 = 0x200000000;
        uint64_t v1203 = v763;
        v1204 = &v1212;
        uint64_t v1205 = &v1213;
        uint64_t v1206 = 0;
        int v1207 = 0;
        __int16 v1208 = 512;
        char v1209 = 7;
        int v1201 = 0;
        uint64_t v1202 = 0;
        uint64_t v1210 = 0;
        uint64_t v1211 = 0;
        uint64_t v1212 = &unk_1F2616E88;
        uint64_t v1213 = &unk_1F2617008;
        int v1201 = (void *)*((void *)v36 + 5);
        uint64_t v1202 = (void **)((char *)v36 + 24);
        uint64_t v764 = (llvm::Value *)*((void *)v36 + 6);
        v1190 = (uint64_t **)v764;
        if (v764)
        {
          llvm::MetadataTracking::track((uint64_t)&v1190, (unsigned __int8 *)v764, 2);
          int v762 = (llvm::Value *)v1190;
        }
        sub_1CB8461A4((uint64_t)&v1195, 0, (uint64_t)v762);
        if (v1190)
        {
          int v835 = *(unsigned __int8 *)v1190;
          if ((v835 - 4) > 0x1E)
          {
            if ((v835 - 3) >= 0xFFFFFFFE) {
              uint64_t v843 = (llvm::Value *)v1190;
            }
            else {
              uint64_t v843 = 0;
            }
            if ((v835 - 3) < 0xFFFFFFFE)
            {
              if (v835 == 3) {
                v1190[1] = 0;
              }
              goto LABEL_1358;
            }
            unint64_t v837 = (unint64_t)v843 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1190 + 1) & 0x7F) != 2 && !*((_DWORD *)v1190 + 3)) {
              goto LABEL_1358;
            }
            uint64_t v836 = v1190[2];
            if ((v836 & 4) == 0) {
              goto LABEL_1358;
            }
            unint64_t v837 = (unint64_t)v836 & 0xFFFFFFFFFFFFFFF8;
            if (!v837) {
              goto LABEL_1358;
            }
          }
          v1217 = (void **)&v1190;
          sub_1CC5FA668(v837 + 16, &v1217);
        }
LABEL_1358:
        sub_1CD3FAC20((uint64_t *)&v1195, (llvm::BasicBlock *)(j - 3));
        uint64_t v766 = v1186;
        uint64_t v767 = HIDWORD(v1187);
        if (v1186 != v1185)
        {
          unint64_t v765 = (llvm::Type *)v1187;
          goto LABEL_1369;
        }
        if (HIDWORD(v1187))
        {
          unint64_t v768 = 0;
          uint64_t v769 = 8 * HIDWORD(v1187);
          v770 = (llvm::Instruction **)v1186;
          do
          {
            if (*v770 == v730) {
              goto LABEL_1436;
            }
            if (*v770 == (llvm::Instruction *)-2) {
              unint64_t v768 = v770;
            }
            ++v770;
            v769 -= 8;
          }
          while (v769);
          if (v768)
          {
            *unint64_t v768 = v730;
            --v1188;
            goto LABEL_1436;
          }
        }
        unint64_t v765 = (llvm::Type *)v1187;
        if (HIDWORD(v1187) < v1187)
        {
          ++HIDWORD(v1187);
          *(void *)&v1186[8 * v767] = v730;
          goto LABEL_1436;
        }
LABEL_1369:
        if (3 * (int)v765 <= (4 * (HIDWORD(v1187) - v1188)))
        {
          if (v765 >= 0x40) {
            LODWORD(v765) = 2 * v765;
          }
          else {
            LODWORD(v765) = 128;
          }
        }
        else if ((int)v765 - HIDWORD(v1187) >= v765 >> 3)
        {
LABEL_1371:
          int v771 = v765 - 1;
          unsigned int v772 = (v765 - 1) & ((v730 >> 4) ^ (v730 >> 9));
          v773 = &v766[8 * v772];
          int v774 = *(llvm::Instruction **)v773;
          if (*(void *)v773 == -1)
          {
            int v775 = 0;
LABEL_1429:
            if (v775) {
              uint64_t v795 = v775;
            }
            else {
              uint64_t v795 = (llvm::Instruction **)v773;
            }
            if (*v795 != v730)
            {
              if (*v795 == (llvm::Instruction *)-2) {
                --v1188;
              }
              else {
                ++HIDWORD(v1187);
              }
              *uint64_t v795 = v730;
            }
          }
          else
          {
            int v775 = 0;
            int v776 = 1;
            while (v774 != v730)
            {
              if (v775) {
                BOOL v777 = 0;
              }
              else {
                BOOL v777 = v774 == (llvm::Instruction *)-2;
              }
              if (v777) {
                int v775 = (llvm::Instruction **)v773;
              }
              unsigned int v778 = v772 + v776++;
              unsigned int v772 = v778 & v771;
              v773 = &v766[8 * (v778 & v771)];
              int v774 = *(llvm::Instruction **)v773;
              if (*(void *)v773 == -1) {
                goto LABEL_1429;
              }
            }
          }
LABEL_1436:
          if ((uint64_t *)j[2] != j + 2)
          {
            for (uint64_t m = j[3]; ; uint64_t m = *(void *)(v797 + 32))
            {
              uint64_t v797 = m - 24;
              uint64_t v798 = m ? m - 24 : 0;
              if (!m || *(unsigned char *)(v798 + 16) != 83) {
                break;
              }
              unint64_t v799 = llvm::UndefValue::get(*(llvm::UndefValue **)v797, v765);
              uint64_t v800 = (void *)*((void *)v36 + 5);
              int v801 = *(_DWORD *)(v797 + 20);
              uint64_t v802 = v801 & 0x7FFFFFF;
              if ((v801 & 0x7FFFFFF) == *(_DWORD *)(v797 + 60))
              {
                unsigned int v815 = v802 + (v802 >> 1);
                if (v815 <= 2) {
                  uint64_t v816 = 2;
                }
                else {
                  uint64_t v816 = v815;
                }
                *(_DWORD *)(v797 + 60) = v816;
                if ((v801 & 0x40000000) != 0) {
                  uint64_t v817 = *(uint64_t **)(v797 - 8);
                }
                else {
                  uint64_t v817 = (uint64_t *)(v797 - 32 * v802);
                }
                __pc = v817;
                int v818 = operator new(40 * v816);
                uint64_t v1161 = v816;
                *(void *)(v797 - 8) = v818;
                uint64_t v819 = v818;
                do
                {
                  *uint64_t v819 = 0;
                  v819[1] = 0;
                  v819[2] = 0;
                  v819[3] = v797;
                  v819 += 4;
                }
                while (v819 != &v818[4 * v816]);
                int v820 = *(_DWORD *)(v797 + 20);
                if ((v820 & 0x40000000) != 0) {
                  uint64_t v821 = (uint64_t)v818;
                }
                else {
                  uint64_t v821 = v797 - 32 * (v820 & 0x7FFFFFF);
                }
                sub_1CC5E4108((uint64_t)&v1217, __pc, &__pc[4 * v802], v821);
                if (v802)
                {
                  memmove((void *)(v821 + 32 * v1161), &__pc[4 * v802], 8 * v802);
                  uint64_t v822 = 4 * v802;
                  do
                  {
                    uint64_t v823 = &__pc[v822];
                    if (__pc[v822 - 4])
                    {
                      *(void *)*(v823 - 2) = *(v823 - 3);
                      uint64_t v824 = *(v823 - 3);
                      if (v824) {
                        *(void *)(v824 + 16) = *(v823 - 2);
                      }
                    }
                    v822 -= 4;
                  }
                  while (v822 * 8);
                }
                operator delete(__pc);
                int v801 = *(_DWORD *)(v797 + 20);
              }
              uint64_t v803 = (v801 + 1) & 0x7FFFFFF;
              *(_DWORD *)(v797 + 20) = v801 & 0xF8000000 | (v801 + 1) & 0x7FFFFFF;
              if ((v801 & 0x40000000) != 0) {
                uint64_t v804 = *(void *)(v797 - 8);
              }
              else {
                uint64_t v804 = v797 - 32 * v803;
              }
              uint64_t v805 = (v803 - 1);
              uint64_t v806 = v804 + 32 * v805;
              if (*(void *)v806)
              {
                **(void **)(v806 + 16) = *(void *)(v806 + 8);
                uint64_t v814 = *(void *)(v806 + 8);
                if (v814) {
                  *(void *)(v814 + 16) = *(void *)(v806 + 16);
                }
              }
              *(void *)uint64_t v806 = v799;
              if (v799)
              {
                uint64_t v809 = *((void *)v799 + 1);
                int v808 = (void *)((char *)v799 + 8);
                uint64_t v807 = v809;
                uint64_t v810 = v804 + 32 * v805;
                *(void *)(v810 + 8) = v809;
                if (v809) {
                  *(void *)(v807 + 16) = v810 + 8;
                }
                *(void *)(v810 + 16) = v808;
                *int v808 = v806;
              }
              int v811 = *(_DWORD *)(v797 + 20);
              uint64_t v812 = v811 & 0x7FFFFFF;
              if ((v811 & 0x40000000) != 0) {
                uint64_t v813 = *(void *)(v797 - 8);
              }
              else {
                uint64_t v813 = v797 - 32 * v812;
              }
              *(void *)(v813 + 32 * *(unsigned int *)(v797 + 60) + 8 * (v812 - 1)) = v800;
            }
          }
          for (uint64_t n = (void *)j[3]; ; uint64_t n = (void *)n[1])
          {
            uint64_t v826 = n - 3;
            if (!n) {
              uint64_t v826 = 0;
            }
            if (*((unsigned char *)v826 + 16) != 83) {
              break;
            }
          }
          int v1201 = (void *)n[2];
          uint64_t v1202 = (void **)n;
          unsigned int v827 = (llvm::Value *)n[3];
          v1190 = (uint64_t **)v827;
          if (v827)
          {
            llvm::MetadataTracking::track((uint64_t)&v1190, (unsigned __int8 *)v827, 2);
            unint64_t v828 = (llvm::Value *)v1190;
          }
          else
          {
            unint64_t v828 = 0;
          }
          sub_1CB8461A4((uint64_t)&v1195, 0, (uint64_t)v828);
          if (v1190)
          {
            int v838 = *(unsigned __int8 *)v1190;
            if ((v838 - 4) > 0x1E)
            {
              if ((v838 - 3) >= 0xFFFFFFFE) {
                uint64_t v844 = (llvm::Value *)v1190;
              }
              else {
                uint64_t v844 = 0;
              }
              if ((v838 - 3) < 0xFFFFFFFE)
              {
                if (v838 == 3) {
                  v1190[1] = 0;
                }
                goto LABEL_1484;
              }
              unint64_t v840 = (unint64_t)v844 + 8;
            }
            else
            {
              if ((*((unsigned char *)v1190 + 1) & 0x7F) != 2 && !*((_DWORD *)v1190 + 3)) {
                goto LABEL_1484;
              }
              int v839 = v1190[2];
              if ((v839 & 4) == 0) {
                goto LABEL_1484;
              }
              unint64_t v840 = (unint64_t)v839 & 0xFFFFFFFFFFFFFFF8;
              if (!v840) {
                goto LABEL_1484;
              }
            }
            v1217 = (void **)&v1190;
            sub_1CC5FA668(v840 + 16, &v1217);
          }
LABEL_1484:
          for (iuint64_t i = (uint64_t *)j[3]; ii != j + 2; iuint64_t i = (uint64_t *)ii[1])
          {
            uint64_t v830 = ii - 3;
            if (ii) {
              unint64_t v831 = ii - 3;
            }
            else {
              unint64_t v831 = 0;
            }
            if (*((unsigned char *)v831 + 16) != 83) {
              goto LABEL_1575;
            }
          }
          uint64_t v830 = 0;
LABEL_1575:
          uint64_t v845 = v830 + 3;
          int v846 = j + 2;
          while (v845 != v846)
          {
            if (v845) {
              uint64_t v847 = v845 - 3;
            }
            else {
              uint64_t v847 = 0;
            }
            int v848 = *((_DWORD *)v847 + 5);
            if ((v848 & 0x40000000) != 0)
            {
              uint64_t v850 = (uint64_t **)*(v847 - 1);
              uint64_t v849 = v848 & 0x7FFFFFF;
            }
            else
            {
              uint64_t v849 = v848 & 0x7FFFFFF;
              uint64_t v850 = (uint64_t **)&v847[-4 * v849];
            }
            uint64_t v1162 = (void *)v845[1];
            if (v849)
            {
              unsigned int v851 = &v850[4 * v849];
              do
              {
                unint64_t v852 = *v850;
                if (*v850) {
                  BOOL v853 = *((unsigned __int8 *)*v850 + 16) >= 0x1Cu;
                }
                else {
                  BOOL v853 = 0;
                }
                if (v853 && (uint64_t *)v852[5] != j - 3)
                {
                  uint64_t v854 = *v852;
                  __int16 v1220 = 257;
                  uint64_t v855 = sub_1CB93113C((uint64_t)&v1195, v854, 2, (uint64_t)&v1217);
                  unsigned int v857 = llvm::UndefValue::get(*(llvm::UndefValue **)v855, v856);
                  uint64_t v858 = (void *)*((void *)v36 + 5);
                  int v859 = *((_DWORD *)v855 + 5);
                  uint64_t v860 = v859 & 0x7FFFFFF;
                  if ((v859 & 0x7FFFFFF) == *((_DWORD *)v855 + 15))
                  {
                    LODWORD(v903) = v860 + (v860 >> 1);
                    if (v903 <= 2) {
                      uint64_t v903 = 2;
                    }
                    else {
                      uint64_t v903 = v903;
                    }
                    size_t v1157 = v903;
                    *((_DWORD *)v855 + 15) = v903;
                    if ((v859 & 0x40000000) != 0) {
                      uint64_t v904 = (uint64_t *)*((void *)v855 - 1);
                    }
                    else {
                      uint64_t v904 = (uint64_t *)((char *)v855 - 32 * v860);
                    }
                    __pe = v904;
                    uint64_t v905 = operator new(40 * v903);
                    *((void *)v855 - 1) = v905;
                    uint64_t v906 = v905;
                    do
                    {
                      void *v906 = 0;
                      v906[1] = 0;
                      v906[2] = 0;
                      v906[3] = v855;
                      v906 += 4;
                    }
                    while (v906 != &v905[4 * v1157]);
                    int v907 = *((_DWORD *)v855 + 5);
                    if ((v907 & 0x40000000) != 0) {
                      uint64_t v908 = (uint64_t)v905;
                    }
                    else {
                      uint64_t v908 = (uint64_t)v855 - 32 * (v907 & 0x7FFFFFF);
                    }
                    uint64_t v1155 = v908;
                    sub_1CC5E4108((uint64_t)&v1217, __pe, &__pe[4 * v860], v908);
                    if (v860)
                    {
                      memmove((void *)(v1155 + 32 * v1157), &__pe[4 * v860], 8 * v860);
                      uint64_t v909 = 4 * v860;
                      do
                      {
                        long long v910 = &__pe[v909];
                        if (__pe[v909 - 4])
                        {
                          *(void *)*(v910 - 2) = *(v910 - 3);
                          uint64_t v911 = *(v910 - 3);
                          if (v911) {
                            *(void *)(v911 + 16) = *(v910 - 2);
                          }
                        }
                        v909 -= 4;
                      }
                      while (v909 * 8);
                    }
                    operator delete(__pe);
                    int v859 = *((_DWORD *)v855 + 5);
                  }
                  uint64_t v861 = (v859 + 1) & 0x7FFFFFF;
                  *((_DWORD *)v855 + 5) = v859 & 0xF8000000 | (v859 + 1) & 0x7FFFFFF;
                  if ((v859 & 0x40000000) != 0) {
                    uint64_t v862 = (char *)*((void *)v855 - 1);
                  }
                  else {
                    uint64_t v862 = (char *)v855 - 32 * v861;
                  }
                  uint64_t v863 = (v861 - 1);
                  long long v864 = &v862[32 * v863];
                  if (*(void *)v864)
                  {
                    **((void **)v864 + 2) = *((void *)v864 + 1);
                    uint64_t v902 = *((void *)v864 + 1);
                    if (v902) {
                      *(void *)(v902 + 16) = *((void *)v864 + 2);
                    }
                  }
                  *(void *)long long v864 = v857;
                  if (v857)
                  {
                    uint64_t v867 = *((void *)v857 + 1);
                    uint64_t v866 = (char **)((char *)v857 + 8);
                    uint64_t v865 = v867;
                    uint64_t v868 = &v862[32 * v863];
                    *((void *)v868 + 1) = v867;
                    if (v867) {
                      *(void *)(v865 + 16) = v868 + 8;
                    }
                    *((void *)v868 + 2) = v866;
                    *uint64_t v866 = v864;
                  }
                  int v869 = *((_DWORD *)v855 + 5);
                  uint64_t v870 = v869 & 0x7FFFFFF;
                  if ((v869 & 0x40000000) != 0) {
                    unint64_t v871 = (char *)*((void *)v855 - 1);
                  }
                  else {
                    unint64_t v871 = (char *)v855 - 32 * v870;
                  }
                  uint64_t v872 = *((unsigned int *)v855 + 15);
                  *(void *)&v871[32 * v872 + 8 * (v870 - 1)] = v858;
                  uint64_t v873 = *(j - 2);
                  if (v873)
                  {
                    while (1)
                    {
                      uint64_t v874 = *(void *)(v873 + 24);
                      unsigned int v875 = *(unsigned __int8 *)(v874 + 16);
                      BOOL v876 = v874 && v875 >= 0x1C;
                      if (v876 && v875 - 29 < 0xB) {
                        break;
                      }
                      uint64_t v873 = *(void *)(v873 + 8);
                      if (!v873) {
                        goto LABEL_1611;
                      }
                    }
                    unsigned int v878 = (char **)(v852 + 1);
LABEL_1614:
                    unint64_t v879 = *(void **)(v874 + 40);
                    if (v879 != *((void **)v36 + 5))
                    {
                      int v880 = *((_DWORD *)v855 + 5);
                      if ((v880 & 0x7FFFFFF) == v872)
                      {
                        LODWORD(v893) = v872 + (v872 >> 1);
                        if (v893 <= 2) {
                          uint64_t v893 = 2;
                        }
                        else {
                          uint64_t v893 = v893;
                        }
                        size_t v1156 = v893;
                        *((_DWORD *)v855 + 15) = v893;
                        uint64_t v1154 = v878;
                        if ((v880 & 0x40000000) != 0) {
                          uint64_t v894 = (uint64_t *)*((void *)v855 - 1);
                        }
                        else {
                          uint64_t v894 = (uint64_t *)((char *)v855 - 32 * v872);
                        }
                        __pd = v894;
                        uint64_t v895 = operator new(40 * v893);
                        *((void *)v855 - 1) = v895;
                        uint64_t v896 = v895;
                        do
                        {
                          *uint64_t v896 = 0;
                          v896[1] = 0;
                          v896[2] = 0;
                          v896[3] = v855;
                          v896 += 4;
                        }
                        while (v896 != &v895[4 * v1156]);
                        int v897 = *((_DWORD *)v855 + 5);
                        if ((v897 & 0x40000000) != 0) {
                          uint64_t v898 = (uint64_t)v895;
                        }
                        else {
                          uint64_t v898 = (uint64_t)v855 - 32 * (v897 & 0x7FFFFFF);
                        }
                        uint64_t v1153 = v898;
                        sub_1CC5E4108((uint64_t)&v1217, __pd, &__pd[4 * v872], v898);
                        if (v872)
                        {
                          memmove((void *)(v1153 + 32 * v1156), &__pd[4 * v872], 8 * v872);
                          uint64_t v899 = 4 * v872;
                          do
                          {
                            int v900 = &__pd[v899];
                            if (__pd[v899 - 4])
                            {
                              *(void *)*(v900 - 2) = *(v900 - 3);
                              uint64_t v901 = *(v900 - 3);
                              if (v901) {
                                *(void *)(v901 + 16) = *(v900 - 2);
                              }
                            }
                            v899 -= 4;
                          }
                          while (v899 * 8);
                        }
                        operator delete(__pd);
                        int v880 = *((_DWORD *)v855 + 5);
                        unsigned int v878 = v1154;
                      }
                      uint64_t v881 = (v880 + 1) & 0x7FFFFFF;
                      *((_DWORD *)v855 + 5) = v880 & 0xF8000000 | (v880 + 1) & 0x7FFFFFF;
                      if ((v880 & 0x40000000) != 0) {
                        uint64_t v882 = (char *)*((void *)v855 - 1);
                      }
                      else {
                        uint64_t v882 = (char *)v855 - 32 * v881;
                      }
                      uint64_t v883 = (v881 - 1);
                      uint64_t v884 = &v882[32 * v883];
                      if (*(void *)v884)
                      {
                        **((void **)v884 + 2) = *((void *)v884 + 1);
                        uint64_t v892 = *((void *)v884 + 1);
                        if (v892) {
                          *(void *)(v892 + 16) = *((void *)v884 + 2);
                        }
                      }
                      *(void *)uint64_t v884 = v852;
                      uint64_t v885 = v852[1];
                      *((void *)v884 + 1) = v885;
                      if (v885) {
                        *(void *)(v885 + 16) = v884 + 8;
                      }
                      *(void *)&v882[32 * v883 + 16] = v878;
                      *unsigned int v878 = v884;
                      int v886 = *((_DWORD *)v855 + 5);
                      uint64_t v887 = v886 & 0x7FFFFFF;
                      if ((v886 & 0x40000000) != 0) {
                        unint64_t v888 = (char *)*((void *)v855 - 1);
                      }
                      else {
                        unint64_t v888 = (char *)v855 - 32 * v887;
                      }
                      uint64_t v872 = *((unsigned int *)v855 + 15);
                      *(void *)&v888[32 * v872 + 8 * (v887 - 1)] = v879;
                    }
                    while (1)
                    {
                      uint64_t v873 = *(void *)(v873 + 8);
                      if (!v873) {
                        break;
                      }
                      uint64_t v874 = *(void *)(v873 + 24);
                      unsigned int v889 = *(unsigned __int8 *)(v874 + 16);
                      if (v874) {
                        BOOL v890 = v889 >= 0x1C;
                      }
                      else {
                        BOOL v890 = 0;
                      }
                      if (v890 && v889 - 29 < 0xB) {
                        goto LABEL_1614;
                      }
                    }
                  }
LABEL_1611:
                  sub_1CD114F2C((uint64_t)(j - 3), (llvm::Value *)v852, v855);
                }
                v850 += 4;
              }
              while (v850 != v851);
            }
            int v846 = j + 2;
            uint64_t v845 = v1162;
          }
          if (v1195 != &v1197) {
            free(v1195);
          }
          int v33 = v1168;
          char v48 = v1174;
LABEL_1681:
          uint64_t v490 = v1186;
          uint64_t v491 = HIDWORD(v1187);
          if (v1186 == v1185)
          {
            if (HIDWORD(v1187))
            {
              uint64_t v492 = 0;
              uint64_t v912 = 8 * HIDWORD(v1187);
              v913 = (llvm::ValueAsMetadata **)v1186;
              do
              {
                if (*v913 == v36) {
                  goto LABEL_1239;
                }
                if (*v913 == (llvm::ValueAsMetadata *)-2) {
                  uint64_t v492 = v913;
                }
                ++v913;
                v912 -= 8;
              }
              while (v912);
              if (v492) {
                goto LABEL_1691;
              }
            }
            unsigned int v914 = v1187;
            if (HIDWORD(v1187) < v1187)
            {
LABEL_787:
              HIDWORD(v1187) = v491 + 1;
              v490[v491] = v36;
              goto LABEL_1239;
            }
          }
          else
          {
            unsigned int v914 = v1187;
          }
          if (3 * v914 <= 4 * (HIDWORD(v1187) - v1188))
          {
            if (v914 >= 0x40) {
              v914 *= 2;
            }
            else {
              unsigned int v914 = 128;
            }
          }
          else if (v914 - HIDWORD(v1187) >= v914 >> 3)
          {
LABEL_1695:
            unsigned int v915 = v914 - 1;
            unsigned int v916 = (v914 - 1) & ((v36 >> 4) ^ (v36 >> 9));
            uint64_t v525 = (llvm::ValueAsMetadata **)&v490[v916];
            uint64_t v917 = *v525;
            if (*v525 == (llvm::ValueAsMetadata *)-1) {
              goto LABEL_1706;
            }
            int v527 = 0;
            int v918 = 1;
            while (v917 != v36)
            {
              if (v527) {
                BOOL v919 = 0;
              }
              else {
                BOOL v919 = v917 == (llvm::ValueAsMetadata *)-2;
              }
              if (v919) {
                int v527 = v525;
              }
              unsigned int v920 = v916 + v918++;
              unsigned int v916 = v920 & v915;
              uint64_t v525 = (llvm::ValueAsMetadata **)&v490[v920 & v915];
              uint64_t v917 = *v525;
              if (*v525 == (llvm::ValueAsMetadata *)-1) {
                goto LABEL_1707;
              }
            }
LABEL_1239:
            char __p = 1;
            goto LABEL_1240;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v914);
          unsigned int v914 = v1187;
          uint64_t v490 = v1186;
          goto LABEL_1695;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v765);
        unint64_t v765 = (llvm::Type *)v1187;
        uint64_t v766 = v1186;
        goto LABEL_1371;
      }
      uint64_t v573 = v1186;
      uint64_t v574 = HIDWORD(v1187);
      if (v1186 == v1185)
      {
        if (HIDWORD(v1187))
        {
          uint64_t v575 = 0;
          uint64_t v576 = 8 * HIDWORD(v1187);
          uint64_t v577 = (llvm::ValueAsMetadata **)v1186;
          do
          {
            if (*v577 == v36) {
              goto LABEL_1240;
            }
            if (*v577 == (llvm::ValueAsMetadata *)-2) {
              uint64_t v575 = v577;
            }
            ++v577;
            v576 -= 8;
          }
          while (v576);
          if (v575)
          {
            *uint64_t v575 = v36;
            --v1188;
            goto LABEL_1240;
          }
        }
        unsigned int v578 = v1187;
        if (HIDWORD(v1187) < v1187)
        {
          ++HIDWORD(v1187);
          *(void *)&v1186[8 * v574] = v36;
          goto LABEL_1240;
        }
      }
      else
      {
        unsigned int v578 = v1187;
      }
      if (3 * v578 <= 4 * (HIDWORD(v1187) - v1188))
      {
        if (v578 >= 0x40) {
          v578 *= 2;
        }
        else {
          unsigned int v578 = 128;
        }
      }
      else if (v578 - HIDWORD(v1187) >= v578 >> 3)
      {
        goto LABEL_1087;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v578);
      unsigned int v578 = v1187;
      uint64_t v573 = v1186;
LABEL_1087:
      unsigned int v617 = v578 - 1;
      unsigned int v618 = (v578 - 1) & ((v36 >> 4) ^ (v36 >> 9));
      uint64_t v619 = &v573[8 * v618];
      uint64_t v620 = *(llvm::ValueAsMetadata **)v619;
      if (*(void *)v619 == -1)
      {
        uint64_t v621 = 0;
      }
      else
      {
        uint64_t v621 = 0;
        int v622 = 1;
        do
        {
          if (v620 == v36) {
            goto LABEL_1240;
          }
          if (v621) {
            BOOL v623 = 0;
          }
          else {
            BOOL v623 = v620 == (llvm::ValueAsMetadata *)-2;
          }
          if (v623) {
            uint64_t v621 = v619;
          }
          unsigned int v624 = v618 + v622++;
          unsigned int v618 = v624 & v617;
          uint64_t v619 = &v573[8 * (v624 & v617)];
          uint64_t v620 = *(llvm::ValueAsMetadata **)v619;
        }
        while (*(void *)v619 != -1);
      }
      if (v621) {
        uint64_t v654 = (llvm::ValueAsMetadata **)v621;
      }
      else {
        uint64_t v654 = (llvm::ValueAsMetadata **)v619;
      }
      if (*v654 != v36)
      {
        if (*v654 == (llvm::ValueAsMetadata *)-2) {
          --v1188;
        }
        else {
          ++HIDWORD(v1187);
        }
        void *v654 = v36;
      }
LABEL_1240:
      int v34 = v48;
      if (v48 == v33) {
        goto LABEL_1801;
      }
    }
    if (sub_1CD10DBB4(v72, v1167, v73))
    {
      int v76 = v48;
      uint64_t v77 = sub_1CD10E338((uint64_t)v72, *(void *)v69, v73);
      unsigned int v78 = v77;
      if (v77)
      {
        if (*((unsigned char *)v77 + 16) == 66)
        {
          uint64_t v1195 = &v1197;
          uint64_t v1196 = 0x800000000;
          uint64_t v79 = *(void *)(v69 + 8);
          if (v79)
          {
            LODWORD(v80) = 0;
            do
            {
              if (v80 >= HIDWORD(v1196)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v1195 + v80) = v79;
              uint64_t v80 = (v1196 + 1);
              LODWORD(v1196) = v1196 + 1;
              uint64_t v79 = *(void *)(v79 + 8);
            }
            while (v79);
            uint64_t v139 = (uint64_t **)v1195;
            if (v80)
            {
              uint64_t v140 = 8 * v80;
              do
              {
                unsigned int v141 = *v139;
                uint64_t v142 = (*v139)[3];
                int v143 = *(unsigned __int8 *)(v142 + 16);
                if (v143 == 62 || v143 == 5 && *(_WORD *)(v142 + 18) == 34)
                {
                  uint64_t v144 = *((void *)v78 - 4);
                  if (*v141)
                  {
                    *(void *)v141[2] = v141[1];
                    uint64_t v145 = v141[1];
                    if (v145) {
                      *(void *)(v145 + 16) = v141[2];
                    }
                  }
                  *unsigned int v141 = v144;
                  if (v144)
                  {
                    uint64_t v148 = *(void *)(v144 + 8);
                    uint64_t v146 = (uint64_t **)(v144 + 8);
                    uint64_t v147 = v148;
                    v141[1] = v148;
                    if (v148) {
                      *(void *)(v147 + 16) = v141 + 1;
                    }
                    v141[2] = (uint64_t)v146;
                    *uint64_t v146 = v141;
                  }
                  llvm::ScalarEvolution::forgetValue(v1167, (llvm::Value *)v142);
                }
                ++v139;
                v140 -= 8;
              }
              while (v140);
              uint64_t v139 = (uint64_t **)v1195;
            }
            if (v139 != &v1197) {
              free(v139);
            }
          }
        }
      }
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v69, v78, (llvm::Value *)1);
      uint64_t v149 = v1186;
      uint64_t v150 = HIDWORD(v1187);
      if (v1186 == v1185)
      {
        char v48 = v76;
        if (HIDWORD(v1187))
        {
          uint64_t v151 = 0;
          uint64_t v152 = 8 * HIDWORD(v1187);
          uint64_t v153 = v1186;
          do
          {
            if (*v153 == v69) {
              goto LABEL_1239;
            }
            if (*v153 == -2) {
              uint64_t v151 = v153;
            }
            ++v153;
            v152 -= 8;
          }
          while (v152);
          if (v151)
          {
            *uint64_t v151 = v69;
            goto LABEL_867;
          }
        }
        unsigned int v154 = v1187;
        if (HIDWORD(v1187) < v1187)
        {
          ++HIDWORD(v1187);
          *(void *)&v1186[8 * v150] = v69;
          goto LABEL_1239;
        }
      }
      else
      {
        unsigned int v154 = v1187;
        char v48 = v76;
      }
      if (3 * v154 <= 4 * (HIDWORD(v1187) - v1188))
      {
        if (v154 >= 0x40) {
          v154 *= 2;
        }
        else {
          unsigned int v154 = 128;
        }
      }
      else if (v154 - HIDWORD(v1187) >= v154 >> 3)
      {
        goto LABEL_249;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v154);
      unsigned int v154 = v1187;
      uint64_t v149 = v1186;
LABEL_249:
      unsigned int v155 = v154 - 1;
      unsigned int v156 = (v154 - 1) & ((v69 >> 4) ^ (v69 >> 9));
      uint64_t v157 = &v149[8 * v156];
      uint64_t v158 = *(void *)v157;
      if (*(void *)v157 == -1)
      {
        unsigned __int16 v159 = 0;
LABEL_668:
        if (v159) {
          long long v427 = v159;
        }
        else {
          long long v427 = v157;
        }
        if (*(void *)v427 != v69)
        {
          if (*(void *)v427 == -2) {
            --v1188;
          }
          else {
            ++HIDWORD(v1187);
          }
          *(void *)long long v427 = v69;
        }
      }
      else
      {
        unsigned __int16 v159 = 0;
        int v160 = 1;
        while (v158 != v69)
        {
          if (v159) {
            BOOL v161 = 0;
          }
          else {
            BOOL v161 = v158 == -2;
          }
          if (v161) {
            unsigned __int16 v159 = v157;
          }
          unsigned int v162 = v156 + v160++;
          unsigned int v156 = v162 & v155;
          uint64_t v157 = &v149[8 * (v162 & v155)];
          uint64_t v158 = *(void *)v157;
          if (*(void *)v157 == -1) {
            goto LABEL_668;
          }
        }
      }
      goto LABEL_1239;
    }
    int v50 = *((unsigned __int8 *)v36 + 16);
LABEL_131:
    if (v50 == 82) {
      size_t v89 = v36;
    }
    else {
      size_t v89 = 0;
    }
    if (v34 && v50 == 82)
    {
      if (!*(unsigned char *)(**((void **)v89 - 8) + 8)) {
        goto LABEL_155;
      }
      v1190 = 0;
      v1191 = 0;
      v1190 = (uint64_t **)*((void *)v89 - 8);
      v1191 = (llvm::Value *)*((void *)v89 - 4);
      if (sub_1CB8436A4((uint64_t)&v1190))
      {
        uint64_t v90 = 0;
        uint64_t v91 = **(void **)v36;
        uint64_t v1195 = &v1197;
        uint64_t v1196 = 0x200000000;
        uint64_t v1203 = v91;
        v1204 = &v1212;
        uint64_t v1205 = &v1213;
        uint64_t v1206 = 0;
        int v1207 = 0;
        __int16 v1208 = 512;
        char v1209 = 7;
        int v1201 = 0;
        uint64_t v1202 = 0;
        uint64_t v1210 = 0;
        uint64_t v1211 = 0;
        uint64_t v1212 = &unk_1F2616E88;
        uint64_t v1213 = &unk_1F2617008;
        int v1201 = (void *)*((void *)v36 + 5);
        uint64_t v1202 = (void **)((char *)v36 + 24);
        unint64_t v92 = (unsigned __int8 *)*((void *)v36 + 6);
        v1182[0] = (uint64_t)v92;
        if (v92)
        {
          llvm::MetadataTracking::track((uint64_t)v1182, v92, 2);
          uint64_t v90 = v1182[0];
        }
        sub_1CB8461A4((uint64_t)&v1195, 0, v90);
        if (v1182[0])
        {
          int v445 = *(unsigned __int8 *)v1182[0];
          if ((v445 - 4) > 0x1E)
          {
            if ((v445 - 3) >= 0xFFFFFFFE) {
              uint64_t v532 = v1182[0];
            }
            else {
              uint64_t v532 = 0;
            }
            if ((v445 - 3) < 0xFFFFFFFE)
            {
              if (v445 == 3) {
                *(void *)(v1182[0] + 8) = 0;
              }
              goto LABEL_141;
            }
            unint64_t v447 = v532 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v1182[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v1182[0] + 12)) {
              goto LABEL_141;
            }
            uint64_t v446 = *(void *)(v1182[0] + 16);
            if ((v446 & 4) == 0) {
              goto LABEL_141;
            }
            unint64_t v447 = v446 & 0xFFFFFFFFFFFFFFF8;
            if (!v447) {
              goto LABEL_141;
            }
          }
          v1217 = (void **)v1182;
          sub_1CC5FA668(v447 + 16, &v1217);
        }
LABEL_141:
        uint64_t v93 = *((_WORD *)v89 + 9) & 0x3F;
        __int16 v1220 = 257;
        FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v1195, v93, (uint64_t)v1190, (uint64_t)v1191, (uint64_t)&v1217, 0, 0);
        llvm::Value::doRAUW(v36, FCmpHelper, (llvm::Value *)1);
        uint64_t v59 = v1186;
        uint64_t v60 = HIDWORD(v1187);
        if (v1186 == v1185)
        {
          if (HIDWORD(v1187))
          {
            size_t v61 = 0;
            uint64_t v95 = 8 * HIDWORD(v1187);
            char v96 = (llvm::ValueAsMetadata **)v1186;
            do
            {
              if (*v96 == v36) {
                goto LABEL_1237;
              }
              if (*v96 == (llvm::ValueAsMetadata *)-2) {
                size_t v61 = v96;
              }
              ++v96;
              v95 -= 8;
            }
            while (v95);
            if (v61) {
              goto LABEL_1213;
            }
          }
          unsigned int v97 = v1187;
          if (HIDWORD(v1187) < v1187) {
            goto LABEL_737;
          }
        }
        else
        {
          unsigned int v97 = v1187;
        }
        if (3 * v97 <= 4 * (HIDWORD(v1187) - v1188))
        {
          if (v97 >= 0x40) {
            v97 *= 2;
          }
          else {
            unsigned int v97 = 128;
          }
        }
        else if (v97 - HIDWORD(v1187) >= v97 >> 3)
        {
          goto LABEL_199;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v97);
        unsigned int v97 = v1187;
        uint64_t v59 = v1186;
LABEL_199:
        unsigned int v127 = v97 - 1;
        unsigned int v128 = (v97 - 1) & ((v36 >> 4) ^ (v36 >> 9));
        uint64_t v83 = (llvm::ValueAsMetadata **)&v59[v128];
        uint64_t v129 = *v83;
        if (*v83 != (llvm::ValueAsMetadata *)-1)
        {
          uint64_t v85 = 0;
          int v130 = 1;
          while (v129 != v36)
          {
            if (v85) {
              BOOL v131 = 0;
            }
            else {
              BOOL v131 = v129 == (llvm::ValueAsMetadata *)-2;
            }
            if (v131) {
              uint64_t v85 = v83;
            }
            unsigned int v132 = v128 + v130++;
            unsigned int v128 = v132 & v127;
            uint64_t v83 = (llvm::ValueAsMetadata **)&v59[v132 & v127];
            uint64_t v129 = *v83;
            if (*v83 == (llvm::ValueAsMetadata *)-1) {
              goto LABEL_1230;
            }
          }
          goto LABEL_1237;
        }
        goto LABEL_1229;
      }
      int v50 = *((unsigned __int8 *)v36 + 16);
    }
    if (v50 == 52)
    {
      int v98 = *((_DWORD *)v36 + 5);
      int v99 = v48;
      if ((v98 & 0x40000000) != 0) {
        int v100 = (uint64_t *)*((void *)v36 - 1);
      }
      else {
        int v100 = (uint64_t *)((char *)v36 - 32 * (v98 & 0x7FFFFFF));
      }
      BOOL v109 = 0;
      uint64_t v110 = *v100;
      uint64_t v111 = v100[4];
      uint64_t v112 = **(void **)v36;
      uint64_t v1195 = &v1197;
      uint64_t v1196 = 0x200000000;
      uint64_t v1203 = v112;
      v1204 = &v1212;
      uint64_t v1205 = &v1213;
      uint64_t v1206 = 0;
      int v1207 = 0;
      __int16 v1208 = 512;
      char v1209 = 7;
      int v1201 = 0;
      uint64_t v1202 = 0;
      uint64_t v1210 = 0;
      uint64_t v1211 = 0;
      uint64_t v1212 = &unk_1F2616E88;
      uint64_t v1213 = &unk_1F2617008;
      int v1201 = (void *)*((void *)v36 + 5);
      uint64_t v1202 = (void **)((char *)v36 + 24);
      unsigned int v113 = (llvm::Value *)*((void *)v36 + 6);
      v1190 = (uint64_t **)v113;
      if (v113)
      {
        llvm::MetadataTracking::track((uint64_t)&v1190, (unsigned __int8 *)v113, 2);
        BOOL v109 = (llvm::Value *)v1190;
      }
      sub_1CB8461A4((uint64_t)&v1195, 0, (uint64_t)v109);
      if (v1190)
      {
        int v166 = *(unsigned __int8 *)v1190;
        if ((v166 - 4) > 0x1E)
        {
          if ((v166 - 3) >= 0xFFFFFFFE) {
            uint64_t v497 = (llvm::Value *)v1190;
          }
          else {
            uint64_t v497 = 0;
          }
          if ((v166 - 3) < 0xFFFFFFFE)
          {
            if (v166 == 3) {
              v1190[1] = 0;
            }
            goto LABEL_172;
          }
          unint64_t v168 = (unint64_t)v497 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1190 + 1) & 0x7F) != 2 && !*((_DWORD *)v1190 + 3)) {
            goto LABEL_172;
          }
          uint64_t v167 = v1190[2];
          if ((v167 & 4) == 0) {
            goto LABEL_172;
          }
          unint64_t v168 = (unint64_t)v167 & 0xFFFFFFFFFFFFFFF8;
          if (!v168) {
            goto LABEL_172;
          }
        }
        v1217 = (void **)&v1190;
        sub_1CC5FA668(v168 + 16, &v1217);
      }
LABEL_172:
      __int16 v1220 = 257;
      unsigned int v114 = (llvm::Value *)sub_1CB9307D8((uint64_t)&v1195, v110, v111, v36, (uint64_t)&v1217);
      __int16 v1220 = 257;
      uint64_t UnaryIntrinsic = llvm::IRBuilderBase::CreateUnaryIntrinsic((llvm::IRBuilderBase *)&v1195, 296, v114, v36, (const llvm::Twine *)&v1217);
      __int16 v1220 = 257;
      uint64_t v116 = sub_1CB93098C((uint64_t)&v1195, UnaryIntrinsic, v111, v36, (uint64_t)&v1217);
      __int16 v1220 = 257;
      uint64_t v117 = (llvm::Value *)sub_1CB930B40((uint64_t)&v1195, v110, v116, v36, (uint64_t)&v1217);
      llvm::Value::doRAUW(v36, v117, (llvm::Value *)1);
      uint64_t v59 = v1186;
      uint64_t v60 = HIDWORD(v1187);
      if (v1186 == v1185)
      {
        char v48 = v99;
        if (HIDWORD(v1187))
        {
          size_t v61 = 0;
          uint64_t v118 = 8 * HIDWORD(v1187);
          uint64_t v119 = (llvm::ValueAsMetadata **)v1186;
          do
          {
            if (*v119 == v36) {
              goto LABEL_1237;
            }
            if (*v119 == (llvm::ValueAsMetadata *)-2) {
              size_t v61 = v119;
            }
            ++v119;
            v118 -= 8;
          }
          while (v118);
          if (v61) {
            goto LABEL_1213;
          }
        }
        unsigned int v120 = v1187;
        if (HIDWORD(v1187) < v1187) {
          goto LABEL_737;
        }
      }
      else
      {
        unsigned int v120 = v1187;
        char v48 = v99;
      }
      if (3 * v120 <= 4 * (HIDWORD(v1187) - v1188))
      {
        if (v120 >= 0x40) {
          v120 *= 2;
        }
        else {
          unsigned int v120 = 128;
        }
      }
      else if (v120 - HIDWORD(v1187) >= v120 >> 3)
      {
        goto LABEL_185;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v120);
      unsigned int v120 = v1187;
      uint64_t v59 = v1186;
LABEL_185:
      unsigned int v121 = v120 - 1;
      unsigned int v122 = (v120 - 1) & ((v36 >> 4) ^ (v36 >> 9));
      uint64_t v83 = (llvm::ValueAsMetadata **)&v59[v122];
      int v123 = *v83;
      if (*v83 != (llvm::ValueAsMetadata *)-1)
      {
        uint64_t v85 = 0;
        int v124 = 1;
        while (v123 != v36)
        {
          if (v85) {
            BOOL v125 = 0;
          }
          else {
            BOOL v125 = v123 == (llvm::ValueAsMetadata *)-2;
          }
          if (v125) {
            uint64_t v85 = v83;
          }
          unsigned int v126 = v122 + v124++;
          unsigned int v122 = v126 & v121;
          uint64_t v83 = (llvm::ValueAsMetadata **)&v59[v126 & v121];
          int v123 = *v83;
          if (*v83 == (llvm::ValueAsMetadata *)-1) {
            goto LABEL_1230;
          }
        }
        goto LABEL_1237;
      }
      goto LABEL_1229;
    }
    goto LABEL_155;
  }
LABEL_1802:
  unsigned int v951 = v1185;
  v950 = v1186;
  unsigned int v952 = HIDWORD(v1187);
  unsigned int v953 = v1187;
  if (v1186 == v1185) {
    uint64_t v954 = HIDWORD(v1187);
  }
  else {
    uint64_t v954 = v1187;
  }
  uint64_t v955 = v1186;
  uint64_t v956 = v1158;
  if (v954)
  {
    uint64_t v957 = 0;
    while (*(void *)&v1186[v957] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v957 += 8;
      if (8 * v954 == v957)
      {
        v958 = v1159;
        goto LABEL_1827;
      }
    }
    uint64_t v955 = &v1186[v957];
  }
  char v959 = &v1186[8 * v954];
  v958 = v1159;
  if (v955 != v959)
  {
    unint64_t v960 = *(void *)v955;
LABEL_1813:
    int v961 = *(_DWORD *)(v960 + 20);
    if ((v961 & 0x40000000) != 0)
    {
      unint64_t v963 = *(void *)(v960 - 8);
      uint64_t v962 = v961 & 0x7FFFFFF;
      if (!v962) {
        goto LABEL_1820;
      }
    }
    else
    {
      uint64_t v962 = v961 & 0x7FFFFFF;
      unint64_t v963 = v960 - 32 * v962;
      if (!v962) {
        goto LABEL_1820;
      }
    }
    uint64_t v964 = 32 * v962;
    uint64_t v965 = (void **)(v963 + 16);
    do
    {
      if (*(v965 - 2))
      {
        **uint64_t v965 = *(v965 - 1);
        uint64_t v966 = (uint64_t)*(v965 - 1);
        if (v966) {
          *(void *)(v966 + 16) = *v965;
        }
      }
      *(v965 - 2) = 0;
      v965 += 4;
      v964 -= 32;
    }
    while (v964);
LABEL_1820:
    uint64_t v967 = (unint64_t *)(v955 + 8);
    while (v967 != (unint64_t *)v959)
    {
      unint64_t v968 = *v967++;
      unint64_t v960 = v968;
      if (v968 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v955 = (char *)(v967 - 1);
        goto LABEL_1813;
      }
    }
    unsigned int v951 = v1185;
    v950 = v1186;
    unsigned int v952 = HIDWORD(v1187);
    unsigned int v953 = v1187;
  }
LABEL_1827:
  if (v950 == v951) {
    uint64_t v969 = v952;
  }
  else {
    uint64_t v969 = v953;
  }
  v970 = v950;
  if (v969)
  {
    uint64_t v971 = 0;
    while (*(void *)&v950[v971] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v971 += 8;
      if (8 * v969 == v971) {
        goto LABEL_1838;
      }
    }
    v970 = &v950[v971];
  }
  if (v970 != &v950[8 * v969]) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
LABEL_1838:
  if (v950 != v951)
  {
    if (v1187 >= 0x21 && 4 * (HIDWORD(v1187) - v1188) < v1187)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v1185);
      goto LABEL_1840;
    }
    memset(v950, 255, 8 * v1187);
  }
  int v1188 = 0;
  HIDWORD(v1187) = 0;
LABEL_1840:
  unsigned int v972 = v1215;
  if (v1215 >= 2)
  {
    qsort(v1214, v1215, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CB848318);
    unsigned int v972 = v1215;
  }
  v973 = v1214;
  uint64_t v974 = &v1214[8 * v972];
  uint64_t v975 = v1214;
  if (v972)
  {
    uint64_t v975 = v1214 - 8;
    uint64_t v976 = 8 * v972 - 8;
    while (v976)
    {
      uint64_t v977 = *((void *)v975 + 1);
      uint64_t v978 = *((void *)v975 + 2);
      v975 += 8;
      v976 -= 8;
      if (v977 == v978) {
        goto LABEL_1846;
      }
    }
  }
  else
  {
LABEL_1846:
    if (v975 != v974)
    {
      int v979 = v975 + 16;
      if (v975 + 16 != v974)
      {
        uint64_t v980 = *(void *)v975;
        do
        {
          uint64_t v981 = v980;
          uint64_t v980 = *(void *)v979;
          if (v981 != *(void *)v979)
          {
            *((void *)v975 + 1) = v980;
            v975 += 8;
          }
          v979 += 8;
        }
        while (v979 != v974);
      }
      uint64_t v974 = v975 + 8;
    }
  }
  unint64_t v982 = v974 - v973;
  unint64_t v983 = (unint64_t)(v974 - v973) >> 3;
  LODWORD(v1215) = v983;
  if ((v982 >> 3))
  {
    v984 = &v973[8 * v983];
    do
    {
      uint64_t v985 = *(void *)(*(void *)v973 + 8);
      if (!v985) {
LABEL_1865:
      }
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::eraseNode();
      while (1)
      {
        uint64_t v986 = *(void *)(v985 + 24);
        unsigned int v987 = *(unsigned __int8 *)(v986 + 16);
        BOOL v988 = v986 && v987 >= 0x1C;
        if (v988 && v987 - 29 < 0xB) {
          break;
        }
        uint64_t v985 = *(void *)(v985 + 8);
        if (!v985) {
          goto LABEL_1865;
        }
      }
      v973 += 8;
    }
    while (v973 != v984);
  }
  LODWORD(v1215) = 0;
  unsigned int v990 = (uint64_t *)v958[10];
  if (v990 == v1166) {
    goto LABEL_2142;
  }
  do
  {
    unint64_t v991 = v990 - 3;
    v1165 = v990;
    if (!v990) {
      unint64_t v991 = 0;
    }
    v992 = v991 + 5;
    uint64_t v993 = (uint64_t *)v991[6];
    if (v993 == v991 + 5) {
      goto LABEL_2141;
    }
    int v1163 = v991;
    do
    {
      v994 = v993;
      uint64_t v993 = (uint64_t *)v993[1];
      v995 = v994 - 3;
      if (v994) {
        v996 = (llvm::ValueAsMetadata *)(v994 - 3);
      }
      else {
        v996 = 0;
      }
      int v997 = *((unsigned __int8 *)v996 + 16);
      if (v997 == 67) {
        unint64_t v998 = (unint64_t)v996;
      }
      else {
        unint64_t v998 = 0;
      }
      if (v994 && v997 == 67 && *(_DWORD *)(*(void *)v998 + 8) == 16397)
      {
        unint64_t v999 = (void *)*((void *)v996 + 1);
        if (v999)
        {
          while (*(unsigned char *)(v999[3] + 16) == 62)
          {
            unint64_t v999 = (void *)v999[1];
            if (!v999) {
              goto LABEL_1884;
            }
          }
          goto LABEL_1965;
        }
LABEL_1884:
        uint64_t v1000 = *(void *)(v998 - 32);
        if (!*((void *)v996 + 5))
        {
          if (!v1000
            || *(unsigned __int8 *)(v1000 + 16) < 0x1Cu
            || (v995 = *(uint64_t **)(v998 - 32), !*(void *)(v1000 + 40)))
          {
            v995 = 0;
          }
        }
        uint64_t v1195 = v1181;
        uint64_t v1196 = 0;
        v1197 = v995;
        uint64_t v1198 = 0;
        uint64_t v1199 = 0;
        char v1200 = 1;
        sub_1CC16089C((uint64_t *)v1000, 0, (const llvm::DataLayout **)&v1195, (uint64_t)&v1190);
        uint64_t v1001 = 0;
        unsigned int v1002 = v1191 - 1;
        int v1003 = (llvm::Value **)&v1190;
        if (v1191 >= 0x41) {
          int v1003 = (llvm::Value **)&v1190[v1002 >> 6];
        }
        uint64_t v1004 = *v1003;
        uint64_t v1005 = **(void **)v996;
        uint64_t v1195 = &v1197;
        uint64_t v1196 = 0x200000000;
        uint64_t v1203 = v1005;
        v1204 = &v1212;
        uint64_t v1205 = &v1213;
        uint64_t v1206 = 0;
        int v1207 = 0;
        __int16 v1208 = 512;
        char v1209 = 7;
        int v1201 = 0;
        uint64_t v1202 = 0;
        uint64_t v1210 = 0;
        uint64_t v1211 = 0;
        uint64_t v1212 = &unk_1F2616E88;
        uint64_t v1213 = &unk_1F2617008;
        int v1201 = (void *)*((void *)v996 + 5);
        uint64_t v1202 = (void **)((char *)v996 + 24);
        v1006 = (unsigned __int8 *)*((void *)v996 + 6);
        v1182[0] = (uint64_t)v1006;
        if (v1006)
        {
          llvm::MetadataTracking::track((uint64_t)v1182, v1006, 2);
          uint64_t v1001 = v1182[0];
        }
        sub_1CB8461A4((uint64_t)&v1195, 0, v1001);
        if (v1182[0])
        {
          int v1044 = *(unsigned __int8 *)v1182[0];
          if ((v1044 - 4) > 0x1E)
          {
            if ((v1044 - 3) >= 0xFFFFFFFE) {
              uint64_t v1119 = v1182[0];
            }
            else {
              uint64_t v1119 = 0;
            }
            if ((v1044 - 3) < 0xFFFFFFFE)
            {
              if (v1044 == 3) {
                *(void *)(v1182[0] + 8) = 0;
              }
              goto LABEL_1890;
            }
            unint64_t v1046 = v1119 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v1182[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v1182[0] + 12)) {
              goto LABEL_1890;
            }
            uint64_t v1045 = *(void *)(v1182[0] + 16);
            if ((v1045 & 4) == 0) {
              goto LABEL_1890;
            }
            unint64_t v1046 = v1045 & 0xFFFFFFFFFFFFFFF8;
            if (!v1046) {
              goto LABEL_1890;
            }
          }
          v1217 = (void **)v1182;
          sub_1CC5FA668(v1046 + 16, &v1217);
        }
LABEL_1890:
        unint64_t v1007 = *(unsigned __int8 **)(v998 - 32);
        uint64_t v1008 = *(void *)v998;
        __int16 v1220 = 257;
        v1009 = (unsigned __int8 *)sub_1CB845504((uint64_t)&v1195, v1007, v1008, (uint64_t)&v1217);
        unint64_t v1010 = (llvm::Value *)v1009;
        if (v1009) {
          BOOL v1011 = v1009[16] > 0x1Bu;
        }
        else {
          BOOL v1011 = 0;
        }
        int v1012 = v1011;
        if (!v1011)
        {
          llvm::Value::doRAUW(v996, (llvm::Value *)v1009, (llvm::Value *)1);
          goto LABEL_1960;
        }
        if (((unint64_t)v1004 >> v1002))
        {
LABEL_1899:
          llvm::Value::doRAUW(v996, v1010, (llvm::Value *)1);
          int v1013 = v1186;
          uint64_t v1014 = HIDWORD(v1187);
          if (v1186 == v1185)
          {
            if (HIDWORD(v1187))
            {
              char v1015 = 0;
              uint64_t v1016 = 8 * HIDWORD(v1187);
              unint64_t v1017 = (llvm::ValueAsMetadata **)v1186;
              while (*v1017 != v996)
              {
                if (*v1017 == (llvm::ValueAsMetadata *)-2) {
                  char v1015 = v1017;
                }
                ++v1017;
                v1016 -= 8;
                if (!v1016)
                {
                  if (!v1015) {
                    goto LABEL_1907;
                  }
                  *char v1015 = v996;
                  --v1188;
                  goto LABEL_1959;
                }
              }
              goto LABEL_1959;
            }
LABEL_1907:
            unsigned int v1018 = v1187;
            if (HIDWORD(v1187) < v1187)
            {
              ++HIDWORD(v1187);
              *(void *)&v1186[8 * v1014] = v996;
LABEL_1959:
              char __p = 1;
LABEL_1960:
              if (v1195 != &v1197) {
                free(v1195);
              }
              if (v1193 >= 0x41 && v1192) {
                MEMORY[0x1D25D9CB0](v1192, 0x1000C8000313F17);
              }
              if (v1191 >= 0x41 && v1190) {
                MEMORY[0x1D25D9CB0](v1190, 0x1000C8000313F17);
              }
              if (!v1012) {
                continue;
              }
              goto LABEL_1965;
            }
          }
          else
          {
            unsigned int v1018 = v1187;
          }
          if (3 * v1018 <= 4 * (HIDWORD(v1187) - v1188))
          {
            if (v1018 >= 0x40) {
              v1018 *= 2;
            }
            else {
              unsigned int v1018 = 128;
            }
          }
          else if (v1018 - HIDWORD(v1187) >= v1018 >> 3)
          {
            goto LABEL_1918;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v1018);
          unsigned int v1018 = v1187;
          int v1013 = v1186;
LABEL_1918:
          unsigned int v1027 = v1018 - 1;
          unsigned int v1028 = (v1018 - 1) & ((v996 >> 4) ^ (v996 >> 9));
          v1029 = &v1013[8 * v1028];
          uint64_t v1030 = *(llvm::ValueAsMetadata **)v1029;
          if (*(void *)v1029 == -1)
          {
            uint64_t v1031 = 0;
LABEL_1952:
            if (v1031) {
              uint64_t v1047 = (llvm::ValueAsMetadata **)v1031;
            }
            else {
              uint64_t v1047 = (llvm::ValueAsMetadata **)v1029;
            }
            if (*v1047 != v996)
            {
              if (*v1047 == (llvm::ValueAsMetadata *)-2) {
                --v1188;
              }
              else {
                ++HIDWORD(v1187);
              }
              *uint64_t v1047 = v996;
            }
          }
          else
          {
            uint64_t v1031 = 0;
            int v1032 = 1;
            while (v1030 != v996)
            {
              if (v1031) {
                BOOL v1033 = 0;
              }
              else {
                BOOL v1033 = v1030 == (llvm::ValueAsMetadata *)-2;
              }
              if (v1033) {
                uint64_t v1031 = v1029;
              }
              unsigned int v1034 = v1028 + v1032++;
              unsigned int v1028 = v1034 & v1027;
              v1029 = &v1013[8 * (v1034 & v1027)];
              uint64_t v1030 = *(llvm::ValueAsMetadata **)v1029;
              if (*(void *)v1029 == -1) {
                goto LABEL_1952;
              }
            }
          }
          goto LABEL_1959;
        }
        uint64_t v1019 = *((void *)v1167 + 13);
        unsigned int v1020 = *((_DWORD *)v1167 + 30);
        if (v1020)
        {
          unsigned int v1021 = v1020 - 1;
          unsigned int v1022 = (v1020 - 1) & ((v1009 >> 4) ^ (v1009 >> 9));
          uint64_t v1023 = v1019 + 48 * v1022;
          uint64_t v1024 = *(unsigned __int8 **)(v1023 + 24);
          if (v1024 != v1009)
          {
            int v1025 = 1;
            while (v1024 != (unsigned __int8 *)-4096)
            {
              unsigned int v1026 = v1022 + v1025++;
              unsigned int v1022 = v1026 & v1021;
              uint64_t v1023 = v1019 + 48 * (v1026 & v1021);
              uint64_t v1024 = *(unsigned __int8 **)(v1023 + 24);
              if (v1024 == v1009) {
                goto LABEL_1930;
              }
            }
            goto LABEL_1929;
          }
        }
        else
        {
LABEL_1929:
          uint64_t v1023 = v1019 + 48 * v1020;
        }
LABEL_1930:
        if (v1023 == v1019 + 48 * v1020 || (uint64_t SCEVIter = *(void *)(v1023 + 40)) == 0)
        {
          uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter(v1167, (unint64_t)v1009);
          uint64_t v1019 = *((void *)v1167 + 13);
          unsigned int v1020 = *((_DWORD *)v1167 + 30);
        }
        uint64_t v1036 = v1019 + 48 * v1020;
        if (v1020)
        {
          unsigned int v1037 = v1020 - 1;
          unsigned int v1038 = v1037 & ((v998 >> 4) ^ (v998 >> 9));
          uint64_t v1039 = v1019 + 48 * v1038;
          uint64_t v1040 = *(void *)(v1039 + 24);
          if (v1040 != v998)
          {
            int v1041 = 1;
            while (v1040 != -4096)
            {
              unsigned int v1042 = v1038 + v1041++;
              unsigned int v1038 = v1042 & v1037;
              uint64_t v1039 = v1019 + 48 * v1038;
              uint64_t v1040 = *(void *)(v1039 + 24);
              if (v1040 == v998) {
                goto LABEL_1940;
              }
            }
            goto LABEL_1939;
          }
        }
        else
        {
LABEL_1939:
          uint64_t v1039 = v1036;
        }
LABEL_1940:
        if (v1039 == v1036 || (uint64_t v1043 = *(void *)(v1039 + 40)) == 0) {
          uint64_t v1043 = llvm::ScalarEvolution::createSCEVIter(v1167, v998);
        }
        if (SCEVIter != v1043) {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        goto LABEL_1899;
      }
LABEL_1965:
      if (*(_DWORD *)(*(void *)v996 + 8) != 269) {
        continue;
      }
      uint64_t v1048 = *(void *)(v956 + 56);
      if (!v1048) {
        sub_1CB920400();
      }
      if (!(*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v1048 + 48))(v1048, v958)) {
        continue;
      }
      if (*((unsigned char *)v996 + 16) == 82) {
        continue;
      }
      uint64_t v1049 = (void *)*((void *)v996 + 1);
      if (!v1049) {
        continue;
      }
      int v1050 = 0;
      while (1)
      {
        uint64_t v1051 = v1049[3];
        int v1052 = *(unsigned __int8 *)(v1051 + 16);
        if (v1052 == 30) {
          uint64_t v1053 = v1049[3];
        }
        else {
          uint64_t v1053 = 0;
        }
        if ((!v1051 || v1052 != 85 || *(llvm::ValueAsMetadata **)(v1051 - 96) != v996)
          && (!v1053 || *(llvm::ValueAsMetadata **)(v1053 - 32 * (*(_DWORD *)(v1053 + 20) & 0x7FFFFFF)) != v996))
        {
          goto LABEL_1981;
        }
        if (v1050) {
          break;
        }
        int v1050 = 1;
LABEL_1981:
        uint64_t v1049 = (void *)v1049[1];
        if (!v1049) {
          goto LABEL_2079;
        }
      }
      uint64_t v1054 = (llvm::Value *)llvm::Instruction::clone(v996);
      uint64_t v1055 = 0;
      uint64_t v1056 = **(void **)v996;
      uint64_t v1195 = &v1197;
      uint64_t v1196 = 0x200000000;
      uint64_t v1203 = v1056;
      v1204 = &v1212;
      uint64_t v1205 = &v1213;
      uint64_t v1206 = 0;
      int v1207 = 0;
      __int16 v1208 = 512;
      char v1209 = 7;
      int v1201 = 0;
      uint64_t v1202 = 0;
      uint64_t v1210 = 0;
      uint64_t v1211 = 0;
      uint64_t v1212 = &unk_1F2616E88;
      uint64_t v1213 = &unk_1F2617008;
      int v1201 = (void *)*((void *)v996 + 5);
      uint64_t v1202 = (void **)((char *)v996 + 24);
      int v1057 = (llvm::Value *)*((void *)v996 + 6);
      v1190 = (uint64_t **)v1057;
      if (v1057)
      {
        llvm::MetadataTracking::track((uint64_t)&v1190, (unsigned __int8 *)v1057, 2);
        uint64_t v1055 = (llvm::Value *)v1190;
      }
      sub_1CB8461A4((uint64_t)&v1195, 0, (uint64_t)v1055);
      if (v1190)
      {
        int v1122 = *(unsigned __int8 *)v1190;
        if ((v1122 - 4) > 0x1E)
        {
          if ((v1122 - 3) >= 0xFFFFFFFE) {
            v1128 = (llvm::Value *)v1190;
          }
          else {
            v1128 = 0;
          }
          if ((v1122 - 3) < 0xFFFFFFFE)
          {
            if (v1122 == 3) {
              v1190[1] = 0;
            }
            goto LABEL_1986;
          }
          unint64_t v1124 = (unint64_t)v1128 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1190 + 1) & 0x7F) != 2 && !*((_DWORD *)v1190 + 3)) {
            goto LABEL_1986;
          }
          uint64_t v1123 = v1190[2];
          if ((v1123 & 4) == 0) {
            goto LABEL_1986;
          }
          unint64_t v1124 = (unint64_t)v1123 & 0xFFFFFFFFFFFFFFF8;
          if (!v1124) {
            goto LABEL_1986;
          }
        }
        v1217 = (void **)&v1190;
        sub_1CC5FA668(v1124 + 16, &v1217);
      }
LABEL_1986:
      if (*((unsigned char *)v996 + 16) == 83)
      {
        for (juint64_t j = (void *)v1163[6]; ; juint64_t j = (void *)jj[1])
        {
          v1060 = jj - 3;
          if (!jj) {
            v1060 = 0;
          }
          if (*((unsigned char *)v1060 + 16) != 83) {
            break;
          }
        }
        int v1201 = (void *)jj[2];
        uint64_t v1202 = (void **)jj;
        uint64_t v1061 = (llvm::Value *)jj[3];
        v1190 = (uint64_t **)v1061;
        if (v1061)
        {
          llvm::MetadataTracking::track((uint64_t)&v1190, (unsigned __int8 *)v1061, 2);
          uint64_t v1062 = (llvm::Value *)v1190;
        }
        else
        {
          uint64_t v1062 = 0;
        }
        sub_1CB8461A4((uint64_t)&v1195, 0, (uint64_t)v1062);
        if (v1190)
        {
          int v1125 = *(unsigned __int8 *)v1190;
          if ((v1125 - 4) > 0x1E)
          {
            if ((v1125 - 3) >= 0xFFFFFFFE) {
              uint64_t v1129 = (llvm::Value *)v1190;
            }
            else {
              uint64_t v1129 = 0;
            }
            if ((v1125 - 3) < 0xFFFFFFFE)
            {
              if (v1125 == 3) {
                v1190[1] = 0;
              }
              goto LABEL_1995;
            }
            unint64_t v1127 = (unint64_t)v1129 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1190 + 1) & 0x7F) != 2 && !*((_DWORD *)v1190 + 3)) {
              goto LABEL_1995;
            }
            uint64_t v1126 = v1190[2];
            if ((v1126 & 4) == 0) {
              goto LABEL_1995;
            }
            unint64_t v1127 = (unint64_t)v1126 & 0xFFFFFFFFFFFFFFF8;
            if (!v1127) {
              goto LABEL_1995;
            }
          }
          v1217 = (void **)&v1190;
          sub_1CC5FA668(v1127 + 16, &v1217);
        }
      }
LABEL_1995:
      uint64_t v1063 = (llvm::ConstantFP **)(***(void ***)v996 + 1624);
      int v1064 = llvm::ConstantFP::get(v1063, v1058, 0.0);
      int v1066 = llvm::ConstantFP::get(v1063, v1065, 1.0);
      __int16 v1220 = 257;
      v1067 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v1195, v1054, v1064, v1066, (const llvm::Twine *)&v1217, 0);
      __int16 v1220 = 257;
      v1068 = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v1195, 1, (uint64_t)v1067, (uint64_t)v1064, (uint64_t)&v1217, 0, 0);
      uint64_t v1069 = *((void *)v1067 + 5);
      *((void *)v1054 + 5) = v1069;
      *(_WORD *)(v1069 + 18) &= ~0x8000u;
      if ((*((unsigned char *)v1054 + 23) & 0x10) != 0)
      {
        uint64_t v1120 = *(void *)(v1069 + 56);
        if (v1120)
        {
          v1121 = *(llvm::ValueSymbolTable **)(v1120 + 104);
          if (v1121) {
            llvm::ValueSymbolTable::reinsertValue(v1121, v1054);
          }
        }
      }
      uint64_t v1071 = *((void *)v1067 + 3);
      v1070 = (void *)((char *)v1067 + 24);
      *((void *)v1054 + 3) = v1071;
      *((void *)v1054 + 4) = v1070;
      v1072 = (void *)((char *)v1054 + 24);
      *(void *)(v1071 + 8) = v1072;
      void *v1070 = v1072;
      llvm::Value::doRAUW(v996, v1068, (llvm::Value *)1);
      uint64_t v1073 = v1186;
      uint64_t v1074 = HIDWORD(v1187);
      if (v1186 != v1185)
      {
        unsigned int v1078 = v1187;
        goto LABEL_2007;
      }
      if (!HIDWORD(v1187))
      {
LABEL_2004:
        unsigned int v1078 = v1187;
        if (HIDWORD(v1187) < v1187)
        {
          ++HIDWORD(v1187);
          *(void *)&v1186[8 * v1074] = v996;
          goto LABEL_2028;
        }
LABEL_2007:
        if (3 * v1078 <= 4 * (HIDWORD(v1187) - v1188))
        {
          if (v1078 >= 0x40) {
            v1078 *= 2;
          }
          else {
            unsigned int v1078 = 128;
          }
        }
        else if (v1078 - HIDWORD(v1187) >= v1078 >> 3)
        {
          goto LABEL_2009;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1185, v1078);
        unsigned int v1078 = v1187;
        uint64_t v1073 = v1186;
LABEL_2009:
        unsigned int v1079 = v1078 - 1;
        unsigned int v1080 = (v1078 - 1) & ((v996 >> 4) ^ (v996 >> 9));
        v1081 = &v1073[8 * v1080];
        uint64_t v1082 = *(llvm::ValueAsMetadata **)v1081;
        if (*(void *)v1081 == -1)
        {
          unint64_t v1083 = 0;
LABEL_2021:
          if (v1083) {
            uint64_t v1087 = (llvm::ValueAsMetadata **)v1083;
          }
          else {
            uint64_t v1087 = (llvm::ValueAsMetadata **)v1081;
          }
          if (*v1087 != v996)
          {
            if (*v1087 == (llvm::ValueAsMetadata *)-2) {
              --v1188;
            }
            else {
              ++HIDWORD(v1187);
            }
            *uint64_t v1087 = v996;
          }
        }
        else
        {
          unint64_t v1083 = 0;
          int v1084 = 1;
          while (v1082 != v996)
          {
            if (v1083) {
              BOOL v1085 = 0;
            }
            else {
              BOOL v1085 = v1082 == (llvm::ValueAsMetadata *)-2;
            }
            if (v1085) {
              unint64_t v1083 = v1081;
            }
            unsigned int v1086 = v1080 + v1084++;
            unsigned int v1080 = v1086 & v1079;
            v1081 = &v1073[8 * (v1086 & v1079)];
            uint64_t v1082 = *(llvm::ValueAsMetadata **)v1081;
            if (*(void *)v1081 == -1) {
              goto LABEL_2021;
            }
          }
        }
        goto LABEL_2028;
      }
      uint64_t v1075 = 0;
      uint64_t v1076 = 8 * HIDWORD(v1187);
      v1077 = (llvm::ValueAsMetadata **)v1186;
      while (*v1077 != v996)
      {
        if (*v1077 == (llvm::ValueAsMetadata *)-2) {
          uint64_t v1075 = v1077;
        }
        ++v1077;
        v1076 -= 8;
        if (!v1076)
        {
          if (!v1075) {
            goto LABEL_2004;
          }
          *uint64_t v1075 = v996;
          --v1188;
          break;
        }
      }
LABEL_2028:
      v1088 = (llvm::Value *)*((void *)v1068 + 5);
      v1219[0] = 0;
      v1217 = 0;
      uint64_t v1218 = 0;
      uint64_t v1089 = *((void *)v1068 + 1);
      if (!v1089) {
        goto LABEL_2075;
      }
      while (2)
      {
        unint64_t v1091 = (void *)(v1089 + 8);
        uint64_t v1090 = *(void *)(v1089 + 8);
        uint64_t v1092 = *(void *)(v1089 + 24);
        if (*(unsigned char *)(v1092 + 16) != 83)
        {
          unint64_t v1093 = *(llvm::Value **)(v1092 + 40);
          v1190 = (uint64_t **)v1093;
          if (v1093 != v1088)
          {
            if (!v1219[0])
            {
              uint64_t v1101 = 0;
              goto LABEL_2046;
            }
            unsigned int v1094 = (v1219[0] - 1) & ((v1093 >> 4) ^ (v1093 >> 9));
            unsigned int v1095 = (uint64_t *)&v1217[2 * v1094];
            uint64_t v1096 = *v1095;
            if (v1093 != (llvm::Value *)*v1095)
            {
              unint64_t v1097 = 0;
              int v1098 = 1;
              while (v1096 != -4096)
              {
                if (v1097) {
                  BOOL v1099 = 0;
                }
                else {
                  BOOL v1099 = v1096 == -8192;
                }
                if (v1099) {
                  unint64_t v1097 = v1095;
                }
                unsigned int v1100 = v1094 + v1098++;
                unsigned int v1094 = v1100 & (v1219[0] - 1);
                unsigned int v1095 = (uint64_t *)&v1217[2 * v1094];
                uint64_t v1096 = *v1095;
                if (v1093 == (llvm::Value *)*v1095) {
                  goto LABEL_2047;
                }
              }
              if (v1097) {
                uint64_t v1101 = v1097;
              }
              else {
                uint64_t v1101 = v1095;
              }
LABEL_2046:
              unsigned int v1095 = sub_1CB8463E8((uint64_t)&v1217, (uint64_t)&v1190, (uint64_t *)&v1190, v1101);
              *unsigned int v1095 = (uint64_t)v1190;
              v1095[1] = 0;
            }
LABEL_2047:
            uint64_t v1102 = v1095[1];
            if (!v1102)
            {
              v1103 = (uint64_t *)(v1190 + 5);
              for (kunsigned int k = v1190[6]; kk != v1103; kunsigned int k = (uint64_t *)kk[1])
              {
                uint64_t v1105 = kk - 3;
                if (!kk) {
                  uint64_t v1105 = 0;
                }
                if (*((unsigned char *)v1105 + 16) != 83)
                {
                  unsigned int v1106 = *((unsigned __int8 *)kk - 8) - 38;
                  BOOL v1011 = v1106 > 0x38;
                  uint64_t v1107 = (1 << v1106) & 0x100060000000001;
                  if (v1011 || v1107 == 0) {
                    v1103 = kk;
                  }
                  else {
                    v1103 = (uint64_t *)kk[1];
                  }
                  break;
                }
              }
              uint64_t v1109 = (llvm::Value *)llvm::Instruction::clone(v1068);
              v1095[1] = (uint64_t)v1109;
              uint64_t v1110 = (llvm::Value *)v1190;
              *((void *)v1109 + 5) = v1190;
              *((_WORD *)v1110 + 9) &= ~0x8000u;
              if ((*((unsigned char *)v1109 + 23) & 0x10) != 0)
              {
                uint64_t v1117 = *((void *)v1110 + 7);
                if (v1117)
                {
                  uint64_t v1118 = *(llvm::ValueSymbolTable **)(v1117 + 104);
                  if (v1118) {
                    llvm::ValueSymbolTable::reinsertValue(v1118, v1109);
                  }
                }
              }
              uint64_t v1111 = *v1103;
              *((void *)v1109 + 3) = *v1103;
              *((void *)v1109 + 4) = v1103;
              uint64_t v1112 = (void *)((char *)v1109 + 24);
              *(void *)(v1111 + 8) = v1112;
              uint64_t *v1103 = (uint64_t)v1112;
              uint64_t v1102 = v1095[1];
            }
            if (*(void *)v1089)
            {
              **(void **)(v1089 + 16) = *(void *)(v1089 + 8);
              uint64_t v1113 = *(void *)(v1089 + 8);
              if (v1113) {
                *(void *)(v1113 + 16) = *(void *)(v1089 + 16);
              }
            }
            *(void *)uint64_t v1089 = v1102;
            if (v1102)
            {
              uint64_t v1116 = *(void *)(v1102 + 8);
              uint64_t v1114 = (void *)(v1102 + 8);
              uint64_t v1115 = v1116;
              *unint64_t v1091 = v1116;
              if (v1116) {
                *(void *)(v1115 + 16) = v1091;
              }
              *(void *)(v1089 + 16) = v1114;
              *uint64_t v1114 = v1089;
            }
          }
        }
        uint64_t v1089 = v1090;
        if (v1090) {
          continue;
        }
        break;
      }
      uint64_t v956 = v1158;
      v958 = v1159;
      if (!*((void *)v1068 + 1)) {
LABEL_2075:
      }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      MEMORY[0x1D25D9CD0](v1217, 8);
      if (v1195 != &v1197) {
        free(v1195);
      }
      char __p = 1;
LABEL_2079:
      ;
    }
    while (v993 != v992);
LABEL_2141:
    unsigned int v990 = (uint64_t *)v1165[1];
  }
  while (v990 != v1166);
LABEL_2142:
  uint64_t v1131 = v1185;
  uint64_t v1130 = v1186;
  unsigned int v1132 = HIDWORD(v1187);
  unsigned int v1133 = v1187;
  if (v1186 == v1185) {
    uint64_t v1134 = HIDWORD(v1187);
  }
  else {
    uint64_t v1134 = v1187;
  }
  uint64_t v1135 = v1186;
  if (v1134)
  {
    uint64_t v1136 = 0;
    while (*(void *)&v1186[v1136] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v1136 += 8;
      if (8 * v1134 == v1136) {
        goto LABEL_2167;
      }
    }
    uint64_t v1135 = &v1186[v1136];
  }
  unsigned int v1137 = &v1186[8 * v1134];
  if (v1135 != v1137)
  {
    unint64_t v1138 = *(void *)v1135;
LABEL_2153:
    int v1139 = *(_DWORD *)(v1138 + 20);
    if ((v1139 & 0x40000000) != 0)
    {
      unint64_t v1141 = *(void *)(v1138 - 8);
      uint64_t v1140 = v1139 & 0x7FFFFFF;
      if (v1140) {
        goto LABEL_2155;
      }
    }
    else
    {
      uint64_t v1140 = v1139 & 0x7FFFFFF;
      unint64_t v1141 = v1138 - 32 * v1140;
      if (v1140)
      {
LABEL_2155:
        uint64_t v1142 = 32 * v1140;
        uint64_t v1143 = (void **)(v1141 + 16);
        do
        {
          if (*(v1143 - 2))
          {
            **uint64_t v1143 = *(v1143 - 1);
            uint64_t v1144 = (uint64_t)*(v1143 - 1);
            if (v1144) {
              *(void *)(v1144 + 16) = *v1143;
            }
          }
          *(v1143 - 2) = 0;
          v1143 += 4;
          v1142 -= 32;
        }
        while (v1142);
      }
    }
    uint64_t v1145 = (unint64_t *)(v1135 + 8);
    while (v1145 != (unint64_t *)v1137)
    {
      unint64_t v1146 = *v1145++;
      unint64_t v1138 = v1146;
      if (v1146 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v1135 = (char *)(v1145 - 1);
        goto LABEL_2153;
      }
    }
    uint64_t v1131 = v1185;
    uint64_t v1130 = v1186;
    unsigned int v1132 = HIDWORD(v1187);
    unsigned int v1133 = v1187;
  }
LABEL_2167:
  if (v1130 == v1131) {
    uint64_t v1147 = v1132;
  }
  else {
    uint64_t v1147 = v1133;
  }
  uint64_t v1148 = v1130;
  if (v1147)
  {
    uint64_t v1149 = 0;
    while (*(void *)&v1130[v1149] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v1149 += 8;
      if (8 * v1147 == v1149) {
        goto LABEL_2178;
      }
    }
    uint64_t v1148 = &v1130[v1149];
  }
  if (v1148 != &v1130[8 * v1147]) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
LABEL_2178:
  if (v1130 == v1131)
  {
LABEL_2179:
    int v1188 = 0;
    HIDWORD(v1187) = 0;
  }
  else
  {
    if (v1187 < 0x21 || 4 * (HIDWORD(v1187) - v1188) >= v1187)
    {
      memset(v1130, 255, 8 * v1187);
      goto LABEL_2179;
    }
    llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v1185);
  }
  if (v1214 != v1216) {
    free(v1214);
  }
  if (v1186 != v1185) {
    free(v1186);
  }
  return __p & 1;
}

void sub_1CBAE9248()
{
}

void sub_1CBAE92E8()
{
}

void sub_1CBAE934C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBAE9384()
{
  return "AGX3 Specific CodeGen Prepare: CFG Modifying Part";
}

uint64_t sub_1CBAE9394(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (unint64_t *)v72;
  unsigned int v68 = v72;
  uint64_t v69 = v72;
  uint64_t v70 = 8;
  int v71 = 0;
  uint64_t v4 = a2 + 72;
  uint64_t v5 = *(void *)(a2 + 80);
  if (v5 != a2 + 72)
  {
    int v6 = 0;
    while (1)
    {
      uint64_t v7 = v5 - 24;
      if (!v5) {
        uint64_t v7 = 0;
      }
      uint64_t v8 = v7 + 40;
      uint64_t v9 = *(void *)(v7 + 48);
      if (v9 != v8) {
        break;
      }
LABEL_94:
      uint64_t v5 = *(void *)(v5 + 8);
      if (v5 == v4)
      {
        uint64_t v3 = (unint64_t *)v68;
        BOOL v46 = (unint64_t *)v69;
        unsigned int v48 = v70;
        unsigned int v47 = HIDWORD(v70);
        goto LABEL_97;
      }
    }
    while (1)
    {
      uint64_t v10 = v9 - 24;
      if (!v9) {
        uint64_t v10 = 0;
      }
      uint64_t v11 = v68;
      if (v69 == v68)
      {
        int v12 = HIDWORD(v70);
        uint64_t v13 = &v69[8 * HIDWORD(v70)];
        if (HIDWORD(v70))
        {
          uint64_t v14 = 0;
          while (*(void *)&v69[v14] != v10)
          {
            v14 += 8;
            if (8 * HIDWORD(v70) == v14) {
              goto LABEL_27;
            }
          }
          uint64_t v13 = &v69[v14];
        }
LABEL_27:
        uint64_t v11 = v69;
      }
      else
      {
        int v15 = v70 - 1;
        unsigned int v16 = (v70 - 1) & ((v10 >> 4) ^ (v10 >> 9));
        uint64_t v13 = &v69[8 * v16];
        uint64_t v17 = *(void *)v13;
        if (*(void *)v13 == -1)
        {
          uint64_t v18 = 0;
LABEL_57:
          if (v18) {
            uint64_t v13 = v18;
          }
          int v12 = HIDWORD(v70);
          if (*(void *)v13 != v10) {
            uint64_t v13 = &v69[8 * v70];
          }
        }
        else
        {
          uint64_t v18 = 0;
          int v19 = 1;
          while (v17 != v10)
          {
            if (v18) {
              BOOL v20 = 0;
            }
            else {
              BOOL v20 = v17 == -2;
            }
            if (v20) {
              uint64_t v18 = v13;
            }
            unsigned int v21 = v16 + v19++;
            unsigned int v16 = v21 & v15;
            uint64_t v13 = &v69[8 * (v21 & v15)];
            uint64_t v17 = *(void *)v13;
            if (*(void *)v13 == -1) {
              goto LABEL_57;
            }
          }
          int v12 = HIDWORD(v70);
        }
      }
      uint64_t v22 = *(void *)(v9 + 8);
      if (v69 == v11) {
        int v23 = v12;
      }
      else {
        int v23 = v70;
      }
      if (v13 != &v69[8 * v23]) {
        goto LABEL_86;
      }
      int v24 = *(unsigned __int8 *)(v10 + 16);
      int v25 = v24 == 89 ? (llvm::ValueAsMetadata *)v10 : 0;
      if (!v9 || v24 != 89) {
        goto LABEL_86;
      }
      uint64_t v26 = *((void *)v25 - 4);
      if (v26 && *(unsigned char *)(v26 + 16) == 16)
      {
        int v28 = (unsigned int *)(v26 + 24);
        if (*(_DWORD *)(v26 + 32) >= 0x41u) {
          int v28 = *(unsigned int **)v28;
        }
        ScalarElement = llvm::findScalarElement(*((llvm **)v25 - 8), (llvm::Value *)*v28);
        if (ScalarElement) {
          break;
        }
      }
      int v36 = 0;
LABEL_85:
      v6 |= v36;
LABEL_86:
      uint64_t v9 = v22;
      if (v22 == v8) {
        goto LABEL_94;
      }
    }
    llvm::Value::doRAUW(v25, ScalarElement, (llvm::Value *)1);
    uint64_t v30 = v69;
    uint64_t v31 = HIDWORD(v70);
    if (v69 == v68)
    {
      if (HIDWORD(v70))
      {
        uint64_t v32 = 0;
        uint64_t v33 = 8 * HIDWORD(v70);
        int v34 = (llvm::ValueAsMetadata **)v69;
        while (*v34 != v25)
        {
          if (*v34 == (llvm::ValueAsMetadata *)-2) {
            uint64_t v32 = v34;
          }
          ++v34;
          v33 -= 8;
          if (!v33)
          {
            if (!v32) {
              goto LABEL_53;
            }
            *uint64_t v32 = v25;
            --v71;
            goto LABEL_84;
          }
        }
        goto LABEL_84;
      }
LABEL_53:
      unsigned int v35 = v70;
      if (HIDWORD(v70) < v70)
      {
        ++HIDWORD(v70);
        *(void *)&v69[8 * v31] = v25;
LABEL_84:
        int v36 = 1;
        goto LABEL_85;
      }
    }
    else
    {
      unsigned int v35 = v70;
    }
    if (3 * v35 <= 4 * (HIDWORD(v70) - v71))
    {
      if (v35 >= 0x40) {
        v35 *= 2;
      }
      else {
        unsigned int v35 = 128;
      }
    }
    else if (v35 - HIDWORD(v70) >= v35 >> 3)
    {
      goto LABEL_65;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v68, v35);
    unsigned int v35 = v70;
    uint64_t v30 = v69;
LABEL_65:
    unsigned int v37 = v35 - 1;
    unsigned int v38 = (v35 - 1) & ((v25 >> 4) ^ (v25 >> 9));
    uint64_t v39 = &v30[8 * v38];
    uint64_t v40 = *(llvm::ValueAsMetadata **)v39;
    if (*(void *)v39 == -1)
    {
      int v41 = 0;
LABEL_77:
      if (v41) {
        int v45 = v41;
      }
      else {
        int v45 = (llvm::ValueAsMetadata **)v39;
      }
      if (*v45 != v25)
      {
        if (*v45 == (llvm::ValueAsMetadata *)-2) {
          --v71;
        }
        else {
          ++HIDWORD(v70);
        }
        llvm *v45 = v25;
      }
    }
    else
    {
      int v41 = 0;
      int v42 = 1;
      while (v40 != v25)
      {
        if (v41) {
          BOOL v43 = 0;
        }
        else {
          BOOL v43 = v40 == (llvm::ValueAsMetadata *)-2;
        }
        if (v43) {
          int v41 = (llvm::ValueAsMetadata **)v39;
        }
        unsigned int v44 = v38 + v42++;
        unsigned int v38 = v44 & v37;
        uint64_t v39 = &v30[8 * (v44 & v37)];
        uint64_t v40 = *(llvm::ValueAsMetadata **)v39;
        if (*(void *)v39 == -1) {
          goto LABEL_77;
        }
      }
    }
    goto LABEL_84;
  }
  unsigned int v47 = 0;
  int v6 = 0;
  unsigned int v48 = 8;
  BOOL v46 = (unint64_t *)v72;
LABEL_97:
  if (v46 == v3) {
    uint64_t v49 = v47;
  }
  else {
    uint64_t v49 = v48;
  }
  int v50 = v46;
  if (v49)
  {
    uint64_t v51 = 0;
    while (v46[v51] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v49 == ++v51) {
        goto LABEL_122;
      }
    }
    int v50 = &v46[v51];
  }
  int v52 = &v46[v49];
  if (v50 != v52)
  {
    unint64_t v53 = *v50;
LABEL_108:
    int v54 = *(_DWORD *)(v53 + 20);
    if ((v54 & 0x40000000) != 0)
    {
      unint64_t v56 = *(void *)(v53 - 8);
      uint64_t v55 = v54 & 0x7FFFFFF;
      if (!v55) {
        goto LABEL_115;
      }
    }
    else
    {
      uint64_t v55 = v54 & 0x7FFFFFF;
      unint64_t v56 = v53 - 32 * v55;
      if (!v55) {
        goto LABEL_115;
      }
    }
    uint64_t v57 = 32 * v55;
    unint64_t v58 = (void **)(v56 + 16);
    do
    {
      if (*(v58 - 2))
      {
        *llvm::Instruction *v58 = *(v58 - 1);
        uint64_t v59 = (uint64_t)*(v58 - 1);
        if (v59) {
          *(void *)(v59 + 16) = *v58;
        }
      }
      *(v58 - 2) = 0;
      v58 += 4;
      v57 -= 32;
    }
    while (v57);
LABEL_115:
    uint64_t v60 = v50 + 1;
    while (v60 != v52)
    {
      unint64_t v61 = *v60++;
      unint64_t v53 = v61;
      if (v61 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        int v50 = v60 - 1;
        goto LABEL_108;
      }
    }
    uint64_t v3 = (unint64_t *)v68;
    BOOL v46 = (unint64_t *)v69;
    unsigned int v48 = v70;
    unsigned int v47 = HIDWORD(v70);
  }
LABEL_122:
  if (v46 == v3) {
    uint64_t v62 = v47;
  }
  else {
    uint64_t v62 = v48;
  }
  unsigned int v63 = v46;
  if (v62)
  {
    uint64_t v64 = 0;
    while (v46[v64] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v62 == ++v64) {
        goto LABEL_133;
      }
    }
    unsigned int v63 = &v46[v64];
  }
  if (v63 != &v46[v62]) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
LABEL_133:
  if (v46 == v3) {
    goto LABEL_134;
  }
  if (v70 < 0x21 || 4 * (HIDWORD(v70) - v71) >= v70)
  {
    memset(v46, 255, 8 * v70);
LABEL_134:
    HIDWORD(v70) = 0;
    int v71 = 0;
    goto LABEL_135;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v68);
LABEL_135:
  int v65 = sub_1CD0FFA48(a2, (llvm::BinaryOperator *)1);
  if (v69 != v68) {
    free(v69);
  }
  return (v6 | v65) & 1;
}

void sub_1CBAE98F0()
{
}

uint64_t sub_1CBAE9988(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC04B0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25F69A8;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC04B8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBAE98F0;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCC04B8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CBAE9A88()
{
}

void sub_1CBAE9AC4(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F25F69A8;
  MEMORY[0x1D25D9CD0](*((void *)a1 + 35), 8);
  *(void *)a1 = &unk_1F260E110;
  uint64_t v2 = (void *)*((void *)a1 + 22);
  if (v2 != (void *)((char *)a1 + 192)) {
    free(v2);
  }
  uint64_t v3 = (void *)*((void *)a1 + 13);
  if (v3 != (void *)((char *)a1 + 120)) {
    free(v3);
  }
  uint64_t v4 = (void *)*((void *)a1 + 4);
  if (v4 != (void *)((char *)a1 + 48)) {
    free(v4);
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBAE9B84(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F25F69A8;
  MEMORY[0x1D25D9CD0](*((void *)a1 + 35), 8);
  *(void *)a1 = &unk_1F260E110;
  uint64_t v2 = (void *)*((void *)a1 + 22);
  if (v2 != (void *)((char *)a1 + 192)) {
    free(v2);
  }
  uint64_t v3 = (void *)*((void *)a1 + 13);
  if (v3 != (void *)((char *)a1 + 120)) {
    free(v3);
  }
  uint64_t v4 = (void *)*((void *)a1 + 4);
  if (v4 != (void *)((char *)a1 + 48)) {
    free(v4);
  }
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBAE9C58()
{
  return "AGX3 Common Store Backfiller Pass";
}

void sub_1CBAE9C68(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CBAE9CDC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  v221[21] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2[2];
  *(void *)(a1 + 272) = v4;
  *(void *)(a1 + 248) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 104))(v4);
  *(void *)(a1 + 256) = (*(uint64_t (**)(void))(**(void **)(a1 + 272) + 176))(*(void *)(a1 + 272));
  *(void *)(a1 + 264) = v2[5];
  uint64_t v5 = v2[43];
  if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 88))(v5))
  {
    hasAddressTakeuint64_t n = 0;
  }
  else
  {
    uint64_t v7 = (llvm::Function *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 568))(v5);
    if (v7) {
      hasAddressTakeuint64_t n = llvm::Function::hasAddressTaken(v7, 0, 0, 1, 0, 0);
    }
    else {
      hasAddressTakeuint64_t n = 1;
    }
  }
  sub_1CD3BBE1C(&v201, *(llvm::Module **)(*v2 + 40));
  if (sub_1CD3BBE9C((uint64_t)&v201, *v2)
    || !*(unsigned char *)(*(void *)(a1 + 272) + 311)
    || (*(_DWORD *)(v2[1] + 544) == 1 ? (char v8 = 1) : (char v8 = hasAddressTaken),
        (v8 & 1) != 0 || (*(_WORD *)(*v2 + 18) & 0x3FF0) == 0x640 || sub_1CBAEB42C(a1, *v2)))
  {
    char v195 = 0;
    goto LABEL_15;
  }
  *(void *)&v214[8] = 0;
  *(void *)&v214[16] = 0;
  *(void *)uint64_t v214 = &v214[8];
  unsigned int v82 = v2 + 40;
  uint64_t v83 = (uint64_t *)v2[41];
  unint64_t v192 = v2;
  if (v83 == v2 + 40) {
    goto LABEL_447;
  }
  uint64_t v84 = v2[43];
  int64x2_t v194 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  uint64_t v197 = v84;
  uint64_t v193 = v2 + 40;
  do
  {
    for (uint64_t i = v83[7]; (uint64_t *)i != v83 + 6; uint64_t i = *(void *)(i + 8))
    {
      int v86 = *(unsigned __int16 **)(i + 16);
      if ((*((unsigned char *)v86 + 9) & 0x20) == 0) {
        goto LABEL_222;
      }
      uint64_t v87 = *(void *)(i + 32);
      if ((*(_DWORD *)v87 & 0xFFF00) != 0) {
        goto LABEL_222;
      }
      uint64_t v88 = *(unsigned int *)(v87 + 4);
      uint64_t v89 = *(void *)(a1 + 264);
      uint64_t v90 = (uint64_t *)((v88 & 0x80000000) != 0
                      ? *(void *)(v89 + 24) + 16 * (v88 & 0x7FFFFFFF) + 8
                      : *(void *)(v89 + 272) + 8 * v88);
      uint64_t v91 = *v90;
      if (!v91) {
        goto LABEL_222;
      }
      if ((*(unsigned char *)(v91 + 3) & 1) == 0)
      {
        uint64_t v91 = *(void *)(v91 + 24);
        if (!v91 || (*(unsigned char *)(v91 + 3) & 1) == 0) {
          goto LABEL_222;
        }
      }
      uint64_t v92 = *(void *)(v91 + 24);
      if (v92)
      {
        BOOL v93 = (*(unsigned char *)(v92 + 3) & 1) == 0;
        if ((v88 & 0x80000000) == 0) {
          goto LABEL_222;
        }
      }
      else
      {
        BOOL v93 = 1;
        if ((v88 & 0x80000000) == 0) {
          goto LABEL_222;
        }
      }
      if (!v93 || (unsigned int v94 = *v86 - 517, v94 >= 2) && *(unsigned char *)(v87 + 64) != 1)
      {
LABEL_222:
        if ((*(unsigned char *)i & 4) != 0) {
          continue;
        }
        goto LABEL_330;
      }
      int v207 = 0;
      int v202 = v206;
      int v203 = v206;
      uint64_t v204 = 8;
      unsigned int v205 = 0;
      uint64_t v95 = v88 & 0x7FFFFFFF;
      uint64_t v96 = *(void *)(*(void *)(v89 + 24) + 16 * v95 + 8);
      if (v96)
      {
        while ((*(unsigned char *)(v96 + 3) & 1) != 0)
        {
          uint64_t v96 = *(void *)(v96 + 24);
          if (!v96) {
            goto LABEL_235;
          }
        }
        if (!sub_1CBAEB884(v96, v89, &v207, (uint64_t *)&v202)) {
          goto LABEL_325;
        }
        while (1)
        {
          uint64_t v96 = *(void *)(v96 + 24);
          if (!v96) {
            break;
          }
          if ((*(unsigned char *)(v96 + 3) & 1) == 0
            && (sub_1CBAEB884(v96, *(void *)(a1 + 264), &v207, (uint64_t *)&v202) & 1) == 0)
          {
            goto LABEL_325;
          }
        }
      }
LABEL_235:
      if (v94 >= 2) {
        uint64_t v97 = *(void *)(*(void *)(i + 32) + 80);
      }
      else {
        uint64_t v97 = 0;
      }
      uint64_t v98 = *(void *)(a1 + 256);
      unint64_t v99 = v97 | ((unint64_t)(*(_DWORD *)(*(void *)(v98 + 264)
                                                + 24
                                                * (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 264) + 24)
                                                                                               + 16 * v95) & 0xFFFFFFFFFFFFFFF8)
                                                                       + 24)
                                                 + *(_DWORD *)(v98 + 272)
                                                 * ((*(void *)(v98 + 248) - *(void *)(v98 + 240)) >> 3))) == 32) << 63);
      int v100 = *(void **)&v214[8];
      if (*(void *)&v214[8])
      {
        int v101 = &v214[8];
        do
        {
          uint64_t v102 = v101;
          int v103 = v100;
          unint64_t v104 = v100[4];
          int v105 = v100 + 1;
          if (v104 >= v99)
          {
            int v105 = v103;
            int v101 = v103;
          }
          int v100 = (void *)*v105;
        }
        while (v100);
        if (v101 != &v214[8])
        {
          int v106 = v104 >= v99 ? v103 : v102;
          if (v99 >= v106[4])
          {
            if (v104 >= v99) {
              BOOL v125 = v103;
            }
            else {
              BOOL v125 = v102;
            }
            *((_DWORD *)v125 + 10) += (v207 << 16) + 1;
            if (v104 >= v99) {
              uint64_t v126 = (uint64_t)(v103 + 6);
            }
            else {
              uint64_t v126 = (uint64_t)(v102 + 48);
            }
            *(void *)unsigned int v216 = i;
            unsigned int v127 = v102 + 56;
            if (v104 >= v99) {
              unsigned int v127 = v103 + 7;
            }
            if (v125[48])
            {
              int v129 = 8;
LABEL_306:
              int v130 = v129 - 1;
              unsigned int v131 = v130 & ((i >> 4) ^ (i >> 9));
              unsigned int v132 = &v127[8 * v131];
              uint64_t v133 = *v132;
              if (i != *v132)
              {
                uint64_t v134 = 0;
                int v135 = 1;
                while (v133 != -4096)
                {
                  if (v134) {
                    BOOL v136 = 0;
                  }
                  else {
                    BOOL v136 = v133 == -8192;
                  }
                  if (v136) {
                    uint64_t v134 = v132;
                  }
                  unsigned int v137 = v131 + v135++;
                  unsigned int v131 = v137 & v130;
                  unsigned int v132 = &v127[8 * v131];
                  uint64_t v133 = *v132;
                  if (i == *v132) {
                    goto LABEL_324;
                  }
                }
                if (v134) {
                  uint64_t v138 = v134;
                }
                else {
                  uint64_t v138 = v132;
                }
                goto LABEL_319;
              }
            }
            else
            {
              if (v104 >= v99) {
                unsigned int v128 = v103;
              }
              else {
                unsigned int v128 = v102;
              }
              int v129 = *((_DWORD *)v128 + 16);
              if (v129)
              {
                unsigned int v127 = (unsigned char *)*((void *)v125 + 7);
                goto LABEL_306;
              }
              uint64_t v138 = 0;
LABEL_319:
              uint64_t v139 = sub_1CB938A98(v126, (uint64_t)v216, v216, v138);
              *uint64_t v139 = *(void *)v216;
              if (v104 >= v99) {
                uint64_t v140 = v103;
              }
              else {
                uint64_t v140 = v102;
              }
              unint64_t v141 = *((unsigned int *)v140 + 32);
              if (v141 >= *((unsigned int *)v140 + 33)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*((void *)v140 + 15) + 8 * v141) = *(void *)v216;
              ++*((_DWORD *)v140 + 32);
              unsigned int v82 = v193;
            }
LABEL_324:
            uint64_t v84 = v197;
            goto LABEL_325;
          }
        }
      }
      uint64_t v209 = 1;
      v210[0] = v194;
      v210[1] = v194;
      v210[2] = v194;
      v210[3] = v194;
      unsigned int v211 = v213;
      uint64_t v212 = 0x800000000;
      int v107 = (v207 << 16) | 1;
      LODWORD(v208) = v107;
      *(void *)unsigned int v216 = i;
      unsigned int v108 = ((i >> 4) ^ (i >> 9)) & 7;
      BOOL v109 = (void *)v210 + v108;
      uint64_t v110 = *v109;
      if (i != *v109)
      {
        uint64_t v111 = 0;
        int v112 = 1;
        while (v110 != -4096)
        {
          if (v111) {
            BOOL v113 = 0;
          }
          else {
            BOOL v113 = v110 == -8192;
          }
          if (v113) {
            uint64_t v111 = v109;
          }
          char v114 = v108 + v112++;
          unsigned int v108 = v114 & 7;
          BOOL v109 = (void *)v210 + v108;
          uint64_t v110 = *v109;
          if (i == *v109) {
            goto LABEL_268;
          }
        }
        if (v111) {
          uint64_t v115 = v111;
        }
        else {
          uint64_t v115 = v109;
        }
        uint64_t v116 = sub_1CB938A98((uint64_t)&v209, (uint64_t)v216, v216, v115);
        *uint64_t v116 = *(void *)v216;
        if (v212 >= (unint64_t)HIDWORD(v212)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v211 + v212) = *(void *)v216;
        int v107 = (int)v208;
        LODWORD(v212) = v212 + 1;
      }
LABEL_268:
      *(void *)unsigned int v216 = v99;
      *(_DWORD *)&v216[8] = v107;
      sub_1CB939044((int *)&v216[16], (uint64_t)&v209);
      uint64_t v117 = *(uint64_t **)&v214[8];
      uint64_t v118 = *(void *)v216;
      uint64_t v119 = (uint64_t **)&v214[8];
      unsigned int v120 = (uint64_t **)&v214[8];
      if (*(void *)&v214[8])
      {
        while (1)
        {
          while (1)
          {
            unsigned int v120 = (uint64_t **)v117;
            unint64_t v121 = v117[4];
            if (*(void *)v216 >= v121) {
              break;
            }
            uint64_t v117 = *v120;
            uint64_t v119 = v120;
            if (!*v120) {
              goto LABEL_275;
            }
          }
          if (v121 >= *(void *)v216) {
            break;
          }
          uint64_t v117 = v120[1];
          if (!v117)
          {
            uint64_t v119 = v120 + 1;
            goto LABEL_275;
          }
        }
      }
      else
      {
LABEL_275:
        unsigned int v122 = (char *)operator new(0xC8uLL);
        *(void *)__int16 v215 = v122;
        *(void *)&v215[8] = &v214[8];
        *((void *)v122 + 4) = v118;
        *((_DWORD *)v122 + 10) = *(_DWORD *)&v216[8];
        *((void *)v122 + 6) = 1;
        *(int64x2_t *)(v122 + 56) = v194;
        *(int64x2_t *)(v122 + 72) = v194;
        *(int64x2_t *)(v122 + 88) = v194;
        *(int64x2_t *)(v122 + 104) = v194;
        sub_1CB938F58((unsigned int *)v122 + 12, (unsigned int *)&v216[16]);
        *((void *)v122 + 15) = v122 + 136;
        *((void *)v122 + 16) = 0x800000000;
        unsigned int v123 = v219;
        if (v219)
        {
          if (v218 == v221)
          {
            if (v219 >= 9) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v122 + 136, v221, 8 * v219);
            *((_DWORD *)v122 + 32) = v123;
          }
          else
          {
            *((void *)v122 + 15) = v218;
            int v142 = v220;
            *((_DWORD *)v122 + 32) = v123;
            *((_DWORD *)v122 + 33) = v142;
            unsigned int v218 = v221;
            int v220 = 0;
          }
          unsigned int v219 = 0;
          unsigned int v82 = v193;
        }
        v215[16] = 1;
        int v124 = *(uint64_t **)v215;
        **(void **)__int16 v215 = 0;
        v124[1] = 0;
        v124[2] = (uint64_t)v120;
        *uint64_t v119 = v124;
        if (**(void **)v214)
        {
          *(void *)uint64_t v214 = **(void **)v214;
          int v124 = *v119;
        }
        sub_1CB8358B8(*(uint64_t **)&v214[8], v124);
        ++*(void *)&v214[16];
        *(void *)__int16 v215 = 0;
        sub_1CB938EEC((uint64_t *)v215);
      }
      if (v218 != v221) {
        free(v218);
      }
      uint64_t v84 = v197;
      if ((v216[16] & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)&v216[24], 8);
      }
      if (v211 != v213) {
        free(v211);
      }
      if ((v209 & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)&v210[0], 8);
      }
LABEL_325:
      if (v203 != v202) {
        free(v203);
      }
      if (i) {
        goto LABEL_222;
      }
LABEL_330:
      while ((*(_WORD *)(i + 44) & 8) != 0)
        uint64_t i = *(void *)(i + 8);
    }
    uint64_t v83 = (uint64_t *)v83[1];
  }
  while (v83 != v82);
  if (!*(void *)&v214[16])
  {
LABEL_447:
    char v143 = 0;
    goto LABEL_448;
  }
  char v143 = 0;
  unsigned int v144 = 0;
  int64x2_t v200 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    uint64_t v145 = -1;
    int v208 = (void *)-1;
    uint64_t v209 = -1;
    uint64_t v146 = *(unsigned char **)v214;
    unsigned int __src = v144;
    if (*(unsigned char **)v214 == &v214[8]) {
      goto LABEL_376;
    }
    unsigned int v147 = 0;
    do
    {
      *(void *)unsigned int v216 = *((void *)v146 + 4);
      *(_DWORD *)&v216[8] = *((_DWORD *)v146 + 10);
      sub_1CB939044((int *)&v216[16], (uint64_t)(v146 + 48));
      if (*(_DWORD *)&v216[8] > v147)
      {
        int v208 = *(void **)v216;
        unsigned int v147 = *(_DWORD *)&v216[8];
      }
      if (v218 != v221) {
        free(v218);
      }
      if ((v216[16] & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)&v216[24], 8);
      }
      uint64_t v148 = (void *)*((void *)v146 + 1);
      if (v148)
      {
        do
        {
          uint64_t v149 = v148;
          uint64_t v148 = (void *)*v148;
        }
        while (v148);
      }
      else
      {
        do
        {
          uint64_t v149 = (unsigned char *)*((void *)v146 + 2);
          BOOL v113 = *(void *)v149 == (void)v146;
          uint64_t v146 = v149;
        }
        while (!v113);
      }
      uint64_t v146 = v149;
    }
    while (v149 != &v214[8]);
    uint64_t v145 = (uint64_t)v208;
    if (((unint64_t)v208 & 0x8000000000000000) != 0)
    {
LABEL_376:
      int v154 = 1;
    }
    else
    {
      uint64_t v150 = *(unsigned char **)v214;
      if (*(unsigned char **)v214 != &v214[8])
      {
        unsigned int v151 = 0;
        do
        {
          *(void *)unsigned int v216 = *((void *)v150 + 4);
          *(_DWORD *)&v216[8] = *((_DWORD *)v150 + 10);
          sub_1CB939044((int *)&v216[16], (uint64_t)(v150 + 48));
          if (*(_DWORD *)&v216[8] > v151 && (*(void *)v216 & 0x8000000000000000) == 0 && *(void **)v216 != v208)
          {
            uint64_t v209 = *(void *)v216;
            unsigned int v151 = *(_DWORD *)&v216[8];
          }
          if (v218 != v221) {
            free(v218);
          }
          if ((v216[16] & 1) == 0) {
            MEMORY[0x1D25D9CD0](*(void *)&v216[24], 8);
          }
          uint64_t v152 = (void *)*((void *)v150 + 1);
          if (v152)
          {
            do
            {
              uint64_t v153 = v152;
              uint64_t v152 = (void *)*v152;
            }
            while (v152);
          }
          else
          {
            do
            {
              uint64_t v153 = (unsigned char *)*((void *)v150 + 2);
              BOOL v113 = *(void *)v153 == (void)v150;
              uint64_t v150 = v153;
            }
            while (!v113);
          }
          uint64_t v150 = v153;
        }
        while (v153 != &v214[8]);
      }
      int v154 = 0;
      if (v209 != -1) {
        v145 |= v209 << 16;
      }
    }
    uint64_t v155 = (*(uint64_t (**)(uint64_t, void))(*(void *)v84 + 224))(v84, v145);
    int v156 = v155;
    if ((v155 & 0xFF00000000) == 0)
    {
      uint64_t v157 = (*(uint64_t (**)(uint64_t, void))(*(void *)v84 + 376))(v84, 0);
      if (v157 == -1) {
        break;
      }
      int v156 = v157;
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v84 + 232))(v84, v145, v157);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v84 + 328))(v84, v145);
    }
    uint64_t v158 = 0;
    char v159 = 1;
    do
    {
      char v160 = v159;
      unint64_t v161 = (unint64_t)*(&v208 + v158);
      if (v161 != -1)
      {
        uint64_t v162 = *(void *)&v214[8];
        int v163 = (uint64_t **)&v214[8];
        uint64_t v164 = &v214[8];
        if (*(void *)&v214[8])
        {
          while (1)
          {
            while (1)
            {
              uint64_t v164 = (unsigned char *)v162;
              unint64_t v165 = *(void *)(v162 + 32);
              if (v161 >= v165) {
                break;
              }
              uint64_t v162 = *(void *)v164;
              int v163 = (uint64_t **)v164;
              if (!*(void *)v164) {
                goto LABEL_391;
              }
            }
            if (v165 >= v161) {
              break;
            }
            uint64_t v162 = *((void *)v164 + 1);
            if (!v162)
            {
              int v163 = (uint64_t **)(v164 + 8);
              goto LABEL_391;
            }
          }
        }
        else
        {
LABEL_391:
          int v166 = (char *)operator new(0xC8uLL);
          *(void *)unsigned int v216 = v166;
          *(void *)&v216[8] = &v214[8];
          *((void *)v166 + 4) = v161;
          *(_OWORD *)(v166 + 40) = 0u;
          *(_OWORD *)(v166 + 120) = 0u;
          *(_OWORD *)(v166 + 152) = 0u;
          *(_OWORD *)(v166 + 168) = 0u;
          *(_OWORD *)(v166 + 184) = 0u;
          *(_OWORD *)(v166 + 136) = 0u;
          *((_DWORD *)v166 + 12) = 1;
          *(int64x2_t *)(v166 + 56) = v200;
          *(int64x2_t *)(v166 + 72) = v200;
          *(int64x2_t *)(v166 + 88) = v200;
          *(int64x2_t *)(v166 + 104) = v200;
          *((void *)v166 + 15) = v166 + 136;
          *((void *)v166 + 16) = 0x800000000;
          v216[16] = 1;
          *(void *)int v166 = 0;
          *((void *)v166 + 1) = 0;
          *((void *)v166 + 2) = v164;
          uint64_t *v163 = (uint64_t *)v166;
          if (**(void **)v214)
          {
            *(void *)uint64_t v214 = **(void **)v214;
            uint64_t v167 = *v163;
          }
          else
          {
            uint64_t v167 = (uint64_t *)v166;
          }
          sub_1CB8358B8(*(uint64_t **)&v214[8], v167);
          ++*(void *)&v214[16];
          uint64_t v164 = *(unsigned char **)v216;
          *(void *)unsigned int v216 = 0;
          sub_1CB938EEC((uint64_t *)v216);
        }
        uint64_t v168 = *((unsigned int *)v164 + 32);
        if (v168)
        {
          uint64_t v169 = (llvm::MachineInstr **)*((void *)v164 + 15);
          int v170 = &v169[v168];
          do
          {
            uint64_t v171 = *v169;
            uint64_t v172 = *(unsigned int *)(*((void *)*v169 + 4) + 4);
            uint64_t v173 = *(void *)(a1 + 264);
            if ((v172 & 0x80000000) != 0) {
              uint64_t v174 = (uint64_t *)(*(void *)(v173 + 24) + 16 * (v172 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v174 = (uint64_t *)(*(void *)(v173 + 272) + 8 * v172);
            }
            uint64_t v175 = *v174;
            if (*v174)
            {
              while ((*(unsigned char *)(v175 + 3) & 1) != 0)
              {
                uint64_t v175 = *(void *)(v175 + 24);
                if (!v175) {
                  goto LABEL_409;
                }
              }
              uint64_t v176 = v175;
              while (1)
              {
                uint64_t v176 = *(void *)(v176 + 24);
                if (!v176) {
                  break;
                }
                if ((*(unsigned char *)(v176 + 3) & 1) == 0)
                {
                  sub_1CBAEBC3C((unsigned int *)v175, *(void *)(a1 + 264), v156, v158, v154);
                  uint64_t v175 = v176;
                }
              }
              sub_1CBAEBC3C((unsigned int *)v175, *(void *)(a1 + 264), v156, v158, v154);
            }
LABEL_409:
            llvm::MachineInstr::eraseFromParent(v171);
            ++v169;
          }
          while (v169 != v170);
        }
        if (*(void *)&v214[8])
        {
          unint64_t v177 = (unint64_t)*(&v208 + v158);
          int v178 = *(void **)&v214[8];
          unint64_t v179 = (uint64_t *)&v214[8];
          do
          {
            uint64_t v180 = v179;
            int v181 = v178;
            unint64_t v182 = v178[4];
            uint64_t v183 = (uint64_t **)(v178 + 1);
            if (v182 >= v177) {
              unint64_t v179 = v178;
            }
            else {
              ++v178;
            }
            int v178 = (void *)*v178;
          }
          while (v178);
          if (v179 != (uint64_t *)&v214[8])
          {
            unsigned int v184 = v182 >= v177 ? v181 : v180;
            if (v177 >= v184[4])
            {
              if (v182 < v177) {
                uint64_t v183 = (uint64_t **)(v180 + 1);
              }
              uint64_t v185 = *v183;
              uint64_t v186 = v179;
              if (*v183)
              {
                do
                {
                  uint64_t v187 = v185;
                  uint64_t v185 = (uint64_t *)*v185;
                }
                while (v185);
              }
              else
              {
                do
                {
                  uint64_t v187 = (uint64_t *)v186[2];
                  BOOL v113 = *v187 == (void)v186;
                  uint64_t v186 = v187;
                }
                while (!v113);
              }
              if (*(uint64_t **)v214 == v179) {
                *(void *)uint64_t v214 = v187;
              }
              --*(void *)&v214[16];
              sub_1CB91F7C8(*(uint64_t **)&v214[8], v179);
              if (v182 >= v177) {
                uint64_t v188 = v181;
              }
              else {
                uint64_t v188 = v180;
              }
              uint64_t v189 = (void *)v188[15];
              unsigned int v190 = v180 + 17;
              if (v182 >= v177) {
                unsigned int v190 = v181 + 17;
              }
              if (v189 != v190) {
                free(v189);
              }
              if (v182 >= v177) {
                int v191 = v181;
              }
              else {
                int v191 = v180;
              }
              if ((v191[6] & 1) == 0) {
                MEMORY[0x1D25D9CD0](v191[7], 8);
              }
              operator delete(v179);
            }
          }
        }
      }
      char v159 = 0;
      uint64_t v158 = 1;
    }
    while ((v160 & 1) != 0);
    char v143 = 1;
    if (__src > 0x1E) {
      break;
    }
    unsigned int v144 = __src + 1;
    uint64_t v84 = v197;
  }
  while (*(void *)&v214[16]);
LABEL_448:
  char v195 = v143;
  sub_1CB9391D0(*(void **)&v214[8]);
  uint64_t v2 = v192;
LABEL_15:
  uint64_t v9 = (uint64_t *)v2[41];
  uint64_t v196 = v2 + 40;
  if (v9 != v2 + 40)
  {
    while (1)
    {
      int v208 = v210;
      uint64_t v209 = 0x400000000;
      uint64_t v10 = v9[7];
      if ((uint64_t *)v10 != v9 + 6) {
        break;
      }
LABEL_201:
      if (v208 != v210) {
        free(v208);
      }
      uint64_t v9 = (uint64_t *)v9[1];
      if (v9 == v196) {
        goto LABEL_204;
      }
    }
    unsigned int v199 = 0;
    while (2)
    {
      uint64_t v11 = *(unsigned __int16 **)(v10 + 16);
      unsigned int v12 = *v11;
      if ((unsigned __int16)(v12 - 1) > 1u || (*(unsigned char *)(*(void *)(v10 + 32) + 48) & 8) == 0)
      {
        unsigned int v13 = *(unsigned __int16 *)(v10 + 44);
        BOOL v113 = (v13 & 0xC) == 0;
        int v14 = (v13 >> 2) & 1;
        if (v113) {
          LOBYTE(v14) = 1;
        }
        uint64_t v15 = *((void *)v11 + 1);
        if (v14)
        {
          if ((v15 & 0x80000) != 0) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v47 = v10;
          if ((v15 & 0x80000) != 0) {
            goto LABEL_27;
          }
          while ((*(_WORD *)(v47 + 44) & 8) != 0)
          {
            uint64_t v47 = *(void *)(v47 + 8);
            if ((*(unsigned char *)(*(void *)(v47 + 16) + 10) & 8) != 0) {
              goto LABEL_27;
            }
          }
        }
        if ((unsigned __int16)(v12 - 1) > 1u || (*(unsigned char *)(*(void *)(v10 + 32) + 48) & 0x10) == 0)
        {
          if (v14)
          {
            if ((v15 & 0x100000) != 0) {
              goto LABEL_27;
            }
          }
          else
          {
            uint64_t v48 = v10;
            if ((v15 & 0x100000) != 0) {
              goto LABEL_27;
            }
            while ((*(_WORD *)(v48 + 44) & 8) != 0)
            {
              uint64_t v48 = *(void *)(v48 + 8);
              if ((*(unsigned char *)(*(void *)(v48 + 16) + 10) & 0x10) != 0) {
                goto LABEL_27;
              }
            }
          }
          goto LABEL_34;
        }
      }
LABEL_27:
      uint64_t v16 = sub_1CBE52E8C(v12);
      if ((v16 & 0xFF00000000) == 0) {
        goto LABEL_34;
      }
      int v17 = 0;
      char v18 = v16 - 61;
      if ((v16 - 61) <= 0x2D)
      {
        if (((1 << v18) & 0xC000000000FLL) != 0) {
          goto LABEL_33;
        }
        if (((1 << v18) & 0x220180000000) != 0)
        {
          int v17 = 1;
          goto LABEL_33;
        }
      }
      if ((v16 - 190) >= 2)
      {
LABEL_34:
        if ((*(unsigned char *)v10 & 4) == 0) {
          goto LABEL_63;
        }
        goto LABEL_64;
      }
LABEL_33:
      unsigned int v19 = sub_1CBDA6464(v12, 0x2Bu);
      uint64_t v20 = *(void *)(v10 + 32);
      if (*(unsigned char *)(v20 + 32 * v19)) {
        goto LABEL_34;
      }
      uint64_t v21 = v19;
      uint64_t v22 = v20 + 32 * v19;
      uint64_t v23 = *(unsigned int *)(v22 + 4);
      if (v17)
      {
        sub_1CBAEBE84((uint64_t)v216, *(_DWORD *)(v22 + 4), *(void *)(a1 + 264), 556, 2);
        LOBYTE(v24) = v216[0];
        int v25 = *(_DWORD *)v216 >> 8;
        *(_OWORD *)__int16 v215 = *(_OWORD *)&v216[4];
        *(_OWORD *)&v215[12] = *(_OWORD *)&v216[16];
        if (!v217) {
          goto LABEL_34;
        }
LABEL_45:
        *(void *)unsigned int v216 = &v216[16];
        *(void *)&v216[8] = 0x800000000;
        sub_1CB84ACA0((unsigned int *)v216, (uint64_t)&v216[16], (unsigned char *)(*(void *)(v10 + 32) + 32 * v21), (unsigned char *)(*(void *)(v10 + 32) + 32 * *(unsigned int *)(v10 + 40)));
        uint64_t v29 = *(void *)v216;
        **(_DWORD **)unsigned int v216 = v24 | (v25 << 8);
        *(_OWORD *)(v29 + 4) = *(_OWORD *)v215;
        *(_OWORD *)(v29 + 16) = *(_OWORD *)&v215[12];
        while (1)
        {
          unsigned int v30 = *(_DWORD *)(v10 + 40);
          if (v30 <= v21) {
            break;
          }
          llvm::MachineInstr::removeOperand((char *)v10, v30 - 1);
        }
        uint64_t v31 = *(const llvm::MachineOperand **)v216;
        if (*(_DWORD *)&v216[8])
        {
          uint64_t v32 = 32 * *(unsigned int *)&v216[8];
          do
          {
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, *(llvm::MachineFunction **)(*(void *)(v10 + 24) + 32), v31);
            uint64_t v31 = (const llvm::MachineOperand *)((char *)v31 + 32);
            v32 -= 32;
          }
          while (v32);
          uint64_t v31 = *(const llvm::MachineOperand **)v216;
        }
        if (v31 != (const llvm::MachineOperand *)&v216[16]) {
          free(v31);
        }
        *(void *)(v10 + 16) = *(void *)(*(void *)(a1 + 248) + 8) + 48 * v12;
        uint64_t v33 = *(void *)(a1 + 264);
        if ((v23 & 0x80000000) != 0) {
          int v34 = (uint64_t *)(*(void *)(v33 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
        }
        else {
          int v34 = (uint64_t *)(*(void *)(v33 + 272) + 8 * v23);
        }
        uint64_t v35 = *v34;
        if (v35)
        {
          if (*(unsigned char *)(v35 + 3))
          {
            while (1)
            {
              uint64_t v35 = *(void *)(v35 + 24);
              if (!v35) {
                goto LABEL_66;
              }
              if ((*(unsigned char *)(v35 + 3) & 1) == 0) {
                goto LABEL_60;
              }
            }
          }
          goto LABEL_34;
        }
LABEL_66:
        if ((v23 & 0x80000000) != 0) {
          int v36 = (uint64_t *)(*(void *)(v33 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
        }
        else {
          int v36 = (uint64_t *)(*(void *)(v33 + 272) + 8 * v23);
        }
        uint64_t v41 = *v36;
        if (v41
          && ((*(unsigned char *)(v41 + 3) & 1) != 0 || (uint64_t v46 = *(void *)(v41 + 24)) != 0 && (*(unsigned char *)(v46 + 3) & 1) != 0))
        {
          if ((v23 & 0x80000000) != 0) {
            BOOL v43 = (uint64_t *)(*(void *)(v33 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
          }
          else {
            BOOL v43 = (uint64_t *)(*(void *)(v33 + 272) + 8 * v23);
          }
          uint64_t v44 = *v43;
          if (v44)
          {
            if ((*(unsigned char *)(v44 + 3) & 1) == 0)
            {
              uint64_t v44 = *(void *)(v44 + 24);
              if (v44)
              {
                if ((*(unsigned char *)(v44 + 3) & 1) == 0) {
                  uint64_t v44 = 0;
                }
              }
            }
          }
          uint64_t v45 = *(void *)(v44 + 8);
          while (1)
          {
            uint64_t v44 = *(void *)(v44 + 24);
            if (!v44 || (*(unsigned char *)(v44 + 3) & 1) == 0) {
              break;
            }
            uint64_t v42 = 0;
            if (*(void *)(v44 + 8) != v45) {
              goto LABEL_90;
            }
          }
          uint64_t v42 = v45;
        }
        else
        {
          uint64_t v42 = 0;
        }
LABEL_90:
        if (v209 >= (unint64_t)HIDWORD(v209)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v208 + v209) = v42;
        LODWORD(v209) = v209 + 1;
LABEL_60:
        if (v10) {
          goto LABEL_34;
        }
LABEL_63:
        while ((*(_WORD *)(v10 + 44) & 8) != 0)
          uint64_t v10 = *(void *)(v10 + 8);
LABEL_64:
        uint64_t v10 = *(void *)(v10 + 8);
        if ((uint64_t *)v10 != v9 + 6) {
          continue;
        }
        while (1)
        {
          do
          {
LABEL_200:
            if (!v209) {
              goto LABEL_201;
            }
            uint64_t v49 = (llvm::MachineInstr *)*((void *)v208 + v209 - 1);
            LODWORD(v209) = v209 - 1;
            if (**((_WORD **)v49 + 2) != 18) {
              goto LABEL_159;
            }
            uint64_t v50 = *(void *)(a1 + 264);
            uint64_t v51 = *((void *)v49 + 4);
            uint64_t v52 = *(unsigned int *)(v51 + 36);
            if ((v52 & 0x80000000) != 0) {
              unint64_t v53 = (uint64_t *)(*(void *)(v50 + 24) + 16 * (v52 & 0x7FFFFFFF) + 8);
            }
            else {
              unint64_t v53 = (uint64_t *)(*(void *)(v50 + 272) + 8 * v52);
            }
            uint64_t v54 = *v53;
            if (v54
              && ((*(unsigned char *)(v54 + 3) & 1) != 0 || (uint64_t v74 = *(void *)(v54 + 24)) != 0 && (*(unsigned char *)(v74 + 3) & 1) != 0))
            {
              if ((v52 & 0x80000000) != 0) {
                unsigned int v68 = (uint64_t *)(*(void *)(v50 + 24) + 16 * (v52 & 0x7FFFFFFF) + 8);
              }
              else {
                unsigned int v68 = (uint64_t *)(*(void *)(v50 + 272) + 8 * v52);
              }
              uint64_t v69 = *v68;
              if (v69)
              {
                if ((*(unsigned char *)(v69 + 3) & 1) == 0)
                {
                  uint64_t v69 = *(void *)(v69 + 24);
                  if (v69)
                  {
                    if ((*(unsigned char *)(v69 + 3) & 1) == 0) {
                      uint64_t v69 = 0;
                    }
                  }
                }
              }
              uint64_t v70 = *(llvm::MachineInstr **)(v69 + 8);
              while (1)
              {
                uint64_t v69 = *(void *)(v69 + 24);
                if (!v69 || (*(unsigned char *)(v69 + 3) & 1) == 0) {
                  break;
                }
                uint64_t v55 = 0;
                if (*(llvm::MachineInstr **)(v69 + 8) != v70) {
                  goto LABEL_140;
                }
              }
              uint64_t v55 = v70;
            }
            else
            {
              uint64_t v55 = 0;
            }
LABEL_140:
            uint64_t v56 = *(unsigned int *)(v51 + 100);
            if ((v56 & 0x80000000) != 0) {
              uint64_t v57 = (uint64_t *)(*(void *)(v50 + 24) + 16 * (v56 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v57 = (uint64_t *)(*(void *)(v50 + 272) + 8 * v56);
            }
            uint64_t v58 = *v57;
            if (v58
              && ((*(unsigned char *)(v58 + 3) & 1) != 0 || (uint64_t v75 = *(void *)(v58 + 24)) != 0 && (*(unsigned char *)(v75 + 3) & 1) != 0))
            {
              if ((v56 & 0x80000000) != 0) {
                int v71 = (uint64_t *)(*(void *)(v50 + 24) + 16 * (v56 & 0x7FFFFFFF) + 8);
              }
              else {
                int v71 = (uint64_t *)(*(void *)(v50 + 272) + 8 * v56);
              }
              uint64_t v72 = *v71;
              if (v72)
              {
                if ((*(unsigned char *)(v72 + 3) & 1) == 0)
                {
                  uint64_t v72 = *(void *)(v72 + 24);
                  if (v72)
                  {
                    if ((*(unsigned char *)(v72 + 3) & 1) == 0) {
                      uint64_t v72 = 0;
                    }
                  }
                }
              }
              int v73 = *(llvm::MachineInstr **)(v72 + 8);
              while (1)
              {
                uint64_t v72 = *(void *)(v72 + 24);
                if (!v72 || (*(unsigned char *)(v72 + 3) & 1) == 0) {
                  break;
                }
                uint64_t v59 = 0;
                if (*(llvm::MachineInstr **)(v72 + 8) != v73) {
                  goto LABEL_145;
                }
              }
              uint64_t v59 = v73;
            }
            else
            {
              uint64_t v59 = 0;
            }
LABEL_145:
            llvm::MachineInstr::eraseFromParent(v49);
            if (v55)
            {
              uint64_t v60 = *(void *)(a1 + 264);
              uint64_t v61 = *(unsigned int *)(*((void *)v55 + 4) + 4);
              if ((v61 & 0x80000000) != 0) {
                uint64_t v62 = (uint64_t *)(*(void *)(v60 + 24) + 16 * (v61 & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v62 = (uint64_t *)(*(void *)(v60 + 272) + 8 * v61);
              }
              uint64_t v63 = *v62;
              if (v63)
              {
                while ((*(unsigned char *)(v63 + 3) & 1) != 0)
                {
                  uint64_t v63 = *(void *)(v63 + 24);
                  if (!v63) {
                    goto LABEL_151;
                  }
                }
              }
              else
              {
LABEL_151:
                llvm::MachineInstr::eraseFromParent(v55);
              }
            }
          }
          while (v55 == v59);
          uint64_t v64 = *(void *)(a1 + 264);
          uint64_t v65 = *(unsigned int *)(*((void *)v59 + 4) + 4);
          if ((v65 & 0x80000000) != 0) {
            int v66 = (uint64_t *)(*(void *)(v64 + 24) + 16 * (v65 & 0x7FFFFFFF) + 8);
          }
          else {
            int v66 = (uint64_t *)(*(void *)(v64 + 272) + 8 * v65);
          }
          uint64_t v67 = *v66;
          if (!v67)
          {
LABEL_158:
            uint64_t v49 = v59;
LABEL_159:
            llvm::MachineInstr::eraseFromParent(v49);
            goto LABEL_200;
          }
          while ((*(unsigned char *)(v67 + 3) & 1) != 0)
          {
            uint64_t v67 = *(void *)(v67 + 24);
            if (!v67) {
              goto LABEL_158;
            }
          }
        }
      }
      break;
    }
    uint64_t v26 = *(void *)(a1 + 264);
    if ((v23 & 0x80000000) != 0) {
      int v27 = (uint64_t *)(*(void *)(v26 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
    }
    else {
      int v27 = (uint64_t *)(*(void *)(v26 + 272) + 8 * v23);
    }
    uint64_t v28 = *v27;
    if (v28)
    {
      if ((*(unsigned char *)(v28 + 3) & 1) == 0)
      {
        uint64_t v28 = *(void *)(v28 + 24);
        if (!v28) {
          goto LABEL_43;
        }
        if ((*(unsigned char *)(v28 + 3) & 1) == 0) {
          goto LABEL_105;
        }
      }
      if ((v23 & 0x80000000) != 0) {
        unsigned int v37 = (uint64_t *)(*(void *)(v26 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
      }
      else {
        unsigned int v37 = (uint64_t *)(*(void *)(v26 + 272) + 8 * v23);
      }
      uint64_t v38 = *v37;
      if (v38)
      {
        if ((*(unsigned char *)(v38 + 3) & 1) == 0)
        {
          uint64_t v38 = *(void *)(v38 + 24);
          if (v38)
          {
            if ((*(unsigned char *)(v38 + 3) & 1) == 0) {
              uint64_t v38 = 0;
            }
          }
        }
      }
      uint64_t v39 = *(void *)(v38 + 8);
      while (1)
      {
        uint64_t v38 = *(void *)(v38 + 24);
        if (!v38 || (*(unsigned char *)(v38 + 3) & 1) == 0) {
          break;
        }
        if (*(void *)(v38 + 8) != v39) {
          goto LABEL_105;
        }
      }
      if (!v39 || **(_WORD **)(v39 + 16) != 18 || *(_DWORD *)(v39 + 40) != 5) {
        goto LABEL_105;
      }
      sub_1CBAEBE84((uint64_t)v216, *(_DWORD *)(*(void *)(v39 + 32) + 36), *(void *)(a1 + 264), 552, 4);
      LODWORD(v28) = v217;
      if (!v217) {
        goto LABEL_43;
      }
      uint64_t v40 = *(void *)(v39 + 32);
      if (*(void *)(v40 + 80) != 25) {
        goto LABEL_105;
      }
      sub_1CBAEBE84((uint64_t)&v202, *(_DWORD *)(v40 + 100), v26, 552, 4);
      LODWORD(v28) = v206[0];
      if (!v206[0]) {
        goto LABEL_43;
      }
      if (*(void *)(*(void *)(v39 + 32) + 144) == 26
        && (*(unsigned int *)&v216[4] | ((unint64_t)*(unsigned int *)&v216[24] << 32)) + 2 == (HIDWORD(v202) | ((unint64_t)v205 << 32)))
      {
        *(_OWORD *)uint64_t v214 = *(_OWORD *)&v216[4];
        *(_OWORD *)&v214[12] = *(_OWORD *)&v216[16];
        unsigned int v24 = *(_DWORD *)v216 & 0xFFF000FF | 0x300;
        unsigned int v199 = v24 >> 8;
        LODWORD(v28) = 1;
      }
      else
      {
LABEL_105:
        LOBYTE(v24) = 0;
        LODWORD(v28) = 0;
      }
    }
    else
    {
LABEL_43:
      LOBYTE(v24) = 0;
    }
    *(_OWORD *)__int16 v215 = *(_OWORD *)v214;
    *(_OWORD *)&v215[12] = *(_OWORD *)&v214[12];
    int v25 = v199;
    if (v28) {
      goto LABEL_45;
    }
    goto LABEL_34;
  }
LABEL_204:
  int v76 = *(_DWORD *)(a1 + 288);
  if (v76 || *(_DWORD *)(a1 + 292))
  {
    uint64_t v77 = (_DWORD *)(a1 + 280);
    uint64_t v78 = *(unsigned int *)(a1 + 296);
    if (v78 > 4 * v76 && v78 >= 0x41)
    {
      sub_1CD3C8060(v77);
    }
    else
    {
      if (v78)
      {
        uint64_t v79 = *(void **)v77;
        uint64_t v80 = 16 * v78;
        do
        {
          *uint64_t v79 = -4096;
          v79 += 2;
          v80 -= 16;
        }
        while (v80);
      }
      *(void *)(a1 + 288) = 0;
    }
  }
  return v195 & 1;
}

BOOL sub_1CBAEB42C(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = a2;
  uint64_t v16 = a2;
  uint64_t v4 = (uint64_t *)(a1 + 280);
  v13[0] = 0;
  if (sub_1CBAEB668((uint64_t *)(a1 + 280), &v16, v13)
    && v13[0] != (void *)(*(void *)(a1 + 280) + 16 * *(unsigned int *)(a1 + 296)))
  {
    return *((unsigned char *)v13[0] + 8) != 0;
  }
  sub_1CD3BBE1C(&v16, *(llvm::Module **)(a2 + 40));
  if (sub_1CD3BBE9C((uint64_t)&v16, a2) || (*(_WORD *)(a2 + 18) & 0x3FF0) == 0x640) {
    goto LABEL_6;
  }
  char v14 = 0;
  sub_1CBAEB5D4((uint64_t)v4, &v15, &v14, (uint64_t)v13);
  uint64_t v8 = *(void *)(v15 + 8);
  if (!v8) {
    return 0;
  }
  while (1)
  {
    uint64_t v9 = *(void *)(v8 + 24);
    int v10 = *(unsigned __int8 *)(v9 + 16);
    if (v10 == 84)
    {
      if (sub_1CBAEB42C(a1, *(void *)(*(void *)(v9 + 40) + 56))) {
        goto LABEL_6;
      }
      goto LABEL_21;
    }
    if (v10 != 77 && (v10 != 5 || *(_WORD *)(v9 + 18) != 49)) {
      goto LABEL_6;
    }
    uint64_t v11 = *(void *)(v9 + 8);
    if (v11) {
      break;
    }
LABEL_21:
    BOOL result = 0;
    uint64_t v8 = *(void *)(v8 + 8);
    if (!v8) {
      return result;
    }
  }
  while (1)
  {
    uint64_t v12 = *(void *)(v11 + 24);
    if (!v12 || *(unsigned char *)(v12 + 16) != 84 || (sub_1CBAEB42C(a1, *(void *)(*(void *)(v12 + 40) + 56)) & 1) != 0) {
      break;
    }
    uint64_t v11 = *(void *)(v11 + 8);
    if (!v11) {
      goto LABEL_21;
    }
  }
LABEL_6:
  v13[0] = 0;
  char v6 = sub_1CBAEB668(v4, &v15, v13);
  uint64_t v7 = v13[0];
  if ((v6 & 1) == 0)
  {
    uint64_t v7 = sub_1CBAEB704((uint64_t)v4, (uint64_t)&v15, &v15, v13[0]);
    *uint64_t v7 = v15;
    *((unsigned char *)v7 + 8) = 0;
  }
  BOOL result = 1;
  *((unsigned char *)v7 + 8) = 1;
  return result;
}

uint64_t sub_1CBAEB5D4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v12 = 0;
  uint64_t result = sub_1CBAEB668((uint64_t *)a1, a2, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CBAEB704(a1, (uint64_t)a2, a2, v12);
    uint64_t v9 = (void *)result;
    *(void *)uint64_t result = *a2;
    *(unsigned char *)(result + 8) = *a3;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_1CBAEB668(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v9) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          uint64_t v9 = v7;
        }
        unsigned int v13 = v6 + v10++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 16 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_7;
        }
      }
      uint64_t result = 0;
      if (v9) {
        uint64_t v7 = v9;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void *sub_1CBAEB704(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CBAEB7B8(a1, v7);
  uint64_t v9 = 0;
  sub_1CBAEB668((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CBAEB7B8(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD41E214(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CBAEB884(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (**(_WORD **)(v6 + 16) != 19) {
    goto LABEL_13;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 4);
  uint64_t v9 = (uint64_t *)((v8 & 0x80000000) != 0
                 ? *(void *)(a2 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8
                 : *(void *)(a2 + 272) + 8 * v8);
  uint64_t v10 = *v9;
  if (!v10) {
    goto LABEL_13;
  }
  while ((*(unsigned char *)(v10 + 3) & 1) != 0)
  {
    uint64_t v10 = *(void *)(v10 + 24);
    if (!v10) {
      goto LABEL_13;
    }
  }
  while (1)
  {
    uint64_t v10 = *(void *)(v10 + 24);
    if (!v10) {
      break;
    }
    if ((*(unsigned char *)(v10 + 3) & 1) == 0) {
      goto LABEL_13;
    }
  }
  int v11 = *(_DWORD *)(*(void *)(v6 + 32) + 4);
  if ((v11 & 0x80000000) == 0
    || (uint64_t v12 = v8 & 0x7FFFFFFF,
        uint64_t v13 = *(void *)(a2 + 24),
        (__int16 ***)(*(void *)(v13 + 16 * v12) & 0xFFFFFFFFFFFFFFF8) != &off_1E66ABDD8)
    || (uint64_t v14 = v11 & 0x7FFFFFFF, (__int16 ***)(*(void *)(v13 + 16 * v14) & 0xFFFFFFFFFFFFFFF8) != &off_1E66AF580))
  {
LABEL_13:
    if (sub_1CBAD858C(a1))
    {
      uint64_t v16 = *a4;
      uint64_t v15 = a4[1];
      if (v15 == *a4)
      {
        uint64_t v17 = *((unsigned int *)a4 + 5);
        char v18 = (void *)(v15 + 8 * v17);
        if (v17)
        {
          uint64_t v19 = 0;
          while (*(void *)(v15 + v19) != v6)
          {
            v19 += 8;
            if (8 * v17 == v19) {
              goto LABEL_32;
            }
          }
          char v18 = (void *)(v15 + v19);
        }
LABEL_32:
        uint64_t v16 = a4[1];
        goto LABEL_39;
      }
      uint64_t v20 = *((unsigned int *)a4 + 4);
      int v21 = v20 - 1;
      unsigned int v22 = (v20 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      char v18 = (void *)(v15 + 8 * v22);
      uint64_t v23 = *v18;
      if (*v18 == -1)
      {
        unsigned int v24 = 0;
LABEL_34:
        if (v24) {
          char v18 = v24;
        }
        if (*v18 != v6)
        {
          LODWORD(v17) = *((_DWORD *)a4 + 5);
          char v18 = (void *)(v15 + 8 * v20);
LABEL_39:
          unsigned int v28 = *((_DWORD *)a4 + 4);
          if (v15 == v16) {
            unsigned int v29 = v17;
          }
          else {
            unsigned int v29 = *((_DWORD *)a4 + 4);
          }
          if (v18 != (void *)(v15 + 8 * v29)) {
            return 1;
          }
          if (v15 == v16)
          {
            if (v17)
            {
              unsigned int v30 = 0;
              uint64_t v31 = 8 * v17;
              uint64_t v32 = (void *)a4[1];
              while (*v32 != v6)
              {
                if (*v32 == -2) {
                  unsigned int v30 = v32;
                }
                ++v32;
                v31 -= 8;
                if (!v31)
                {
                  if (!v30) {
                    goto LABEL_51;
                  }
                  *unsigned int v30 = v6;
                  --*((_DWORD *)a4 + 6);
                  goto LABEL_74;
                }
              }
              goto LABEL_74;
            }
LABEL_51:
            if (v28 > v17)
            {
              *((_DWORD *)a4 + 5) = v17 + 1;
              *(void *)(v15 + 8 * v17) = v6;
LABEL_74:
              ++*a3;
              return 1;
            }
          }
          if (3 * v28 <= 4 * ((int)v17 - *((_DWORD *)a4 + 6)))
          {
            if (v28 >= 0x40) {
              v28 *= 2;
            }
            else {
              unsigned int v28 = 128;
            }
          }
          else if (v28 - v17 >= v28 >> 3)
          {
            goto LABEL_55;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v28);
          unsigned int v28 = *((_DWORD *)a4 + 4);
          uint64_t v15 = a4[1];
LABEL_55:
          unsigned int v33 = v28 - 1;
          unsigned int v34 = (v28 - 1) & ((v6 >> 4) ^ (v6 >> 9));
          uint64_t v35 = (void *)(v15 + 8 * v34);
          uint64_t v36 = *v35;
          if (*v35 == -1)
          {
            unsigned int v37 = 0;
LABEL_67:
            if (v37) {
              uint64_t v41 = v37;
            }
            else {
              uint64_t v41 = v35;
            }
            if (*v41 != v6)
            {
              if (*v41 == -2) {
                --*((_DWORD *)a4 + 6);
              }
              else {
                ++*((_DWORD *)a4 + 5);
              }
              *uint64_t v41 = v6;
            }
          }
          else
          {
            unsigned int v37 = 0;
            int v38 = 1;
            while (v36 != v6)
            {
              if (v37) {
                BOOL v39 = 0;
              }
              else {
                BOOL v39 = v36 == -2;
              }
              if (v39) {
                unsigned int v37 = v35;
              }
              unsigned int v40 = v34 + v38++;
              unsigned int v34 = v40 & v33;
              uint64_t v35 = (void *)(v15 + 8 * (v40 & v33));
              uint64_t v36 = *v35;
              if (*v35 == -1) {
                goto LABEL_67;
              }
            }
          }
          goto LABEL_74;
        }
      }
      else
      {
        unsigned int v24 = 0;
        int v25 = 1;
        while (v23 != v6)
        {
          if (v24) {
            BOOL v26 = 0;
          }
          else {
            BOOL v26 = v23 == -2;
          }
          if (v26) {
            unsigned int v24 = v18;
          }
          unsigned int v27 = v22 + v25++;
          unsigned int v22 = v27 & v21;
          char v18 = (void *)(v15 + 8 * (v27 & v21));
          uint64_t v23 = *v18;
          if (*v18 == -1) {
            goto LABEL_34;
          }
        }
      }
      LODWORD(v17) = *((_DWORD *)a4 + 5);
      goto LABEL_39;
    }
    return 0;
  }
  uint64_t v43 = *(void *)(v13 + 16 * v14 + 8);
  if (!v43) {
    return 1;
  }
  while ((*(unsigned char *)(v43 + 3) & 1) != 0)
  {
    uint64_t v43 = *(void *)(v43 + 24);
    if (!v43) {
      return 1;
    }
  }
  if (!sub_1CBAEB884(v43, a2, a3, a4)) {
    return 0;
  }
  do
  {
    uint64_t v43 = *(void *)(v43 + 24);
    BOOL v42 = v43 == 0;
  }
  while (v43 && ((*(unsigned char *)(v43 + 3) & 1) != 0 || (sub_1CBAEB884(v43, a2, a3, a4) & 1) != 0));
  return v42;
}

void sub_1CBAEBC3C(unsigned int *a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5 = *((void *)a1 + 1);
  if (**(_WORD **)(v5 + 16) == 19
    && ((uint64_t v6 = a1[1], (v6 & 0x80000000) == 0)
      ? (int v7 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v6))
      : (int v7 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8)),
        (uint64_t v8 = *v7) != 0))
  {
    while ((*(unsigned char *)(v8 + 3) & 1) != 0)
    {
      uint64_t v8 = *(void *)(v8 + 24);
      if (!v8) {
        goto LABEL_7;
      }
    }
    while (1)
    {
      uint64_t v8 = *(void *)(v8 + 24);
      if (!v8) {
        break;
      }
      if ((*(unsigned char *)(v8 + 3) & 1) == 0) {
        goto LABEL_7;
      }
    }
    uint64_t v24 = v6 & 0x7FFFFFFF;
    uint64_t v25 = *(void *)(a2 + 24);
    if ((__int16 ***)(*(void *)(v25 + 16 * v24) & 0xFFFFFFFFFFFFFFF8) == &off_1E66ABDD8)
    {
      uint64_t v26 = *(unsigned int *)(*(void *)(v5 + 32) + 4);
      if ((__int16 ***)(*(void *)(v25 + 16 * (v26 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E66AF580)
      {
        if ((v26 & 0x80000000) != 0) {
          unsigned int v27 = (uint64_t *)(v25 + 16 * (v26 & 0x7FFFFFFF) + 8);
        }
        else {
          unsigned int v27 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v26);
        }
        uint64_t v28 = *v27;
        if (*v27)
        {
          while ((*(unsigned char *)(v28 + 3) & 1) != 0)
          {
            uint64_t v28 = *(void *)(v28 + 24);
            if (!v28) {
              goto LABEL_47;
            }
          }
          uint64_t v29 = v28;
          while (1)
          {
            uint64_t v29 = *(void *)(v29 + 24);
            if (!v29) {
              break;
            }
            if ((*(unsigned char *)(v29 + 3) & 1) == 0) {
              sub_1CBAEBC3C();
            }
          }
          sub_1CBAEBC3C();
        }
LABEL_47:
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v5);
      }
    }
  }
  else
  {
LABEL_7:
    unsigned int v9 = *a1;
    BOOL v11 = a4 == 1 || (*a1 & 0xFFF00) == 512;
    int v12 = v11 | (2 * a3);
    if (!*a1)
    {
      if (v5)
      {
        uint64_t v13 = *((void *)a1 + 2);
        if (v13)
        {
          uint64_t v14 = *(void *)(v5 + 24);
          if (v14)
          {
            uint64_t v15 = *(void *)(v14 + 32);
            if (v15)
            {
              uint64_t v16 = *(void *)(v15 + 40);
              uint64_t v17 = a1[1];
              if ((v17 & 0x80000000) != 0) {
                char v18 = (uint64_t *)(*(void *)(v16 + 24) + 16 * (v17 & 0x7FFFFFFF) + 8);
              }
              else {
                char v18 = (uint64_t *)(*(void *)(v16 + 272) + 8 * v17);
              }
              uint64_t v19 = (int *)*v18;
              uint64_t v20 = (int *)*((void *)a1 + 3);
              if ((unsigned int *)*v18 != a1) {
                char v18 = (uint64_t *)(v13 + 24);
              }
              uint64_t *v18 = (uint64_t)v20;
              if (v20) {
                int v21 = v20;
              }
              else {
                int v21 = v19;
              }
              *((void *)v21 + 2) = v13;
              *((void *)a1 + 2) = 0;
              *((void *)a1 + 3) = 0;
              unsigned int v9 = *a1;
            }
          }
        }
      }
    }
    a1[4] = 64;
    a1[6] = 0;
    unsigned int v22 = v9 & 0xFFF00000;
    if (a5) {
      int v23 = 519;
    }
    else {
      int v23 = 263;
    }
    *a1 = v23 | v22;
    a1[1] = v12;
  }
}

uint64_t sub_1CBAEBE84(uint64_t result, unsigned int a2, uint64_t a3, int a4, int a5)
{
  if ((a2 & 0x80000000) != 0) {
    uint64_t v5 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v5 = (uint64_t *)(*(void *)(a3 + 272) + 8 * a2);
  }
  uint64_t v6 = *v5;
  if (!v6) {
    goto LABEL_5;
  }
  if ((*(unsigned char *)(v6 + 3) & 1) == 0)
  {
    uint64_t v14 = *(void *)(v6 + 24);
    if (!v14 || (*(unsigned char *)(v14 + 3) & 1) == 0) {
      goto LABEL_5;
    }
  }
  uint64_t v8 = (uint64_t *)((a2 & 0x80000000) != 0
                 ? *(void *)(a3 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8
                 : *(void *)(a3 + 272) + 8 * a2);
  uint64_t v9 = *v8;
  if (v9)
  {
    if ((*(unsigned char *)(v9 + 3) & 1) == 0)
    {
      uint64_t v9 = *(void *)(v9 + 24);
      if (v9)
      {
        if ((*(unsigned char *)(v9 + 3) & 1) == 0) {
          uint64_t v9 = 0;
        }
      }
    }
  }
  uint64_t v10 = *(void *)(v9 + 8);
  while (1)
  {
    uint64_t v9 = *(void *)(v9 + 24);
    if (!v9 || (*(unsigned char *)(v9 + 3) & 1) == 0) {
      break;
    }
    if (*(void *)(v9 + 8) != v10) {
      goto LABEL_5;
    }
  }
  if (!v10) {
    goto LABEL_5;
  }
  if (**(unsigned __int16 **)(v10 + 16) != a4) {
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(v10 + 32);
  if (*(void *)(v11 + 48) || *(_DWORD *)(v11 + 64) != 7 || *(_DWORD *)(v11 + 80) != 64) {
    goto LABEL_5;
  }
  int v12 = 0;
  unsigned int v13 = (*(_DWORD *)(v11 + 64) >> 8) & 0xFFF;
  if (v13 > 2)
  {
    if (v13 == 3)
    {
      int v12 = 8;
      goto LABEL_35;
    }
    if (v13 != 15)
    {
      if (v13 != 14) {
        goto LABEL_35;
      }
      goto LABEL_33;
    }
LABEL_32:
    int v12 = 4;
    goto LABEL_35;
  }
  if (v13 == 1)
  {
LABEL_33:
    int v12 = 2;
    goto LABEL_35;
  }
  if (v13 == 2) {
    goto LABEL_32;
  }
LABEL_35:
  if (v12 == a5 && (a5 != 2 || (*(unsigned char *)(v11 + 68) & 1) == 0))
  {
    long long v15 = *(_OWORD *)(v11 + 80);
    *(_OWORD *)uint64_t result = *(_OWORD *)(v11 + 64);
    *(_OWORD *)(result + 16) = v15;
    char v7 = 1;
    goto LABEL_6;
  }
LABEL_5:
  char v7 = 0;
  *(unsigned char *)uint64_t result = 0;
LABEL_6:
  *(unsigned char *)(result + 32) = v7;
  return result;
}

void sub_1CBAEC000(uint64_t a1)
{
  *(void *)a1 = &unk_1F25F6A68;
  free(*(void **)(a1 + 416));
  uint64_t v2 = *(void **)(a1 + 272);
  if (v2 != (void *)(a1 + 288)) {
    free(v2);
  }
  *(void *)a1 = &unk_1F260E110;
  uint64_t v3 = *(void **)(a1 + 176);
  if (v3 != (void *)(a1 + 192)) {
    free(v3);
  }
  uint64_t v4 = *(void **)(a1 + 104);
  if (v4 != (void *)(a1 + 120)) {
    free(v4);
  }
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5 != (void *)(a1 + 48)) {
    free(v5);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CBAEC0D0(uint64_t a1)
{
  *(void *)a1 = &unk_1F25F6A68;
  free(*(void **)(a1 + 416));
  uint64_t v2 = *(void **)(a1 + 272);
  if (v2 != (void *)(a1 + 288)) {
    free(v2);
  }
  *(void *)a1 = &unk_1F260E110;
  uint64_t v3 = *(void **)(a1 + 176);
  if (v3 != (void *)(a1 + 192)) {
    free(v3);
  }
  uint64_t v4 = *(void **)(a1 + 104);
  if (v4 != (void *)(a1 + 120)) {
    free(v4);
  }
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5 != (void *)(a1 + 48)) {
    free(v5);
  }
  llvm::Pass::~Pass((llvm::Pass *)a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBAEC1B4()
{
  return "AGX3 constant merger pass";
}

void sub_1CBAEC1C4(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CBAEC220(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  v101[8] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 248) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  *(void *)(v3 + 256) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  *(void *)(v3 + 264) = *(void *)(a2 + 40);
  *(_DWORD *)(v3 + 280) = 0;
  if ((*(_DWORD *)(v3 + 424) - 512) >= 0x604)
  {
    free(*(void **)(v3 + 416));
    uint64_t v4 = malloc_type_calloc(0x200uLL, 2uLL, 0x6D9A4F0CuLL);
    if (!v4) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    *(void *)(v3 + 416) = v4;
    *(_DWORD *)(v3 + 424) = 512;
  }
  uint64_t v5 = *(void **)(a2 + 328);
  uint64_t v84 = (void *)(a2 + 320);
  if (v5 == (void *)(a2 + 320))
  {
    LOBYTE(v6) = 0;
    return v6 & 1;
  }
  int v6 = 0;
  char v7 = &v95;
  uint64_t v90 = v3;
  do
  {
    unint64_t v99 = (llvm::MachineInstr **)v101;
    uint64_t v100 = 0x800000000;
    uint64_t v97 = 0;
    uint64_t v98 = 0;
    uint64_t v8 = (llvm::MachineInstr *)(v5 + 6);
    uint64_t v9 = (llvm::MachineInstr *)v5[7];
    if (v9 == (llvm::MachineInstr *)(v5 + 6))
    {
      int v11 = 0;
      goto LABEL_136;
    }
    uint64_t v85 = v5;
    int v86 = v6;
    unsigned int v10 = 0;
    int v11 = 0;
    uint64_t v12 = 0;
    unsigned int v13 = 0;
    uint64_t v87 = v8;
    do
    {
      if (!v9 || (uint64_t v14 = v9, (*(unsigned char *)v9 & 4) == 0))
      {
        uint64_t v14 = v9;
        if ((*((_WORD *)v9 + 22) & 8) != 0)
        {
          uint64_t v14 = v9;
          do
            uint64_t v14 = (llvm::MachineInstr *)*((void *)v14 + 1);
          while ((*((_WORD *)v14 + 22) & 8) != 0);
        }
      }
      long long v15 = (llvm::MachineInstr *)*((void *)v14 + 1);
      int v16 = **((unsigned __int16 **)v9 + 2);
      if (v16 != 518 && v16 != 5626 && v16 != 5623) {
        goto LABEL_49;
      }
      uint64_t v19 = *(void **)(v3 + 264);
      uint64_t v20 = *((void *)v9 + 4);
      uint64_t v21 = *(unsigned int *)(v20 + 4);
      if ((v21 & 0x80000000) != 0) {
        unsigned int v22 = (uint64_t *)(v19[3] + 16 * (v21 & 0x7FFFFFFF) + 8);
      }
      else {
        unsigned int v22 = (uint64_t *)(v19[34] + 8 * v21);
      }
      uint64_t v23 = *v22;
      if (*v22)
      {
        while ((*(unsigned char *)(v23 + 3) & 1) != 0)
        {
          uint64_t v23 = *(void *)(v23 + 24);
          if (!v23) {
            goto LABEL_27;
          }
        }
        uint64_t v26 = v19[3];
        uint64_t v24 = (*(void *)(v26 + 16 * (*(_DWORD *)(v23 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (void)&off_1E66ABC80;
        if (v13) {
          BOOL v27 = (*(void *)(v26 + 16 * (*(_DWORD *)(v23 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (void)&off_1E66ABC80;
        }
        else {
          BOOL v27 = 0;
        }
        if (v27 & v12)
        {
LABEL_35:
          uint64_t v24 = 1;
          goto LABEL_124;
        }
        while (1)
        {
          uint64_t v28 = *(unsigned __int16 **)(*(void *)(v23 + 8) + 16);
          if ((v28[8] & 2) != 0) {
            break;
          }
          unsigned int v29 = *v28;
          BOOL v30 = v29 > 0x13;
          int v31 = (1 << v29) & 0xC0200;
          if (!v30 && v31 != 0) {
            break;
          }
          do
          {
            uint64_t v23 = *(void *)(v23 + 24);
            if (!v23) {
              goto LABEL_28;
            }
          }
          while ((*(unsigned char *)(v23 + 3) & 1) != 0);
          if (v13) {
            BOOL v33 = (*(void *)(v26 + 16 * (*(_DWORD *)(v23 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (void)&off_1E66ABC80;
          }
          else {
            BOOL v33 = 0;
          }
          uint64_t v24 = ((*(void *)(v26 + 16 * (*(_DWORD *)(v23 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (void)&off_1E66ABC80) | v24;
          if (v33 & v12) {
            goto LABEL_35;
          }
        }
LABEL_49:
        uint64_t v24 = v12;
        goto LABEL_124;
      }
LABEL_27:
      uint64_t v24 = 0;
LABEL_28:
      if (!v13)
      {
        uint64_t v97 = v9;
        unsigned int v13 = v9;
        goto LABEL_124;
      }
      uint64_t v98 = v9;
      uint64_t v96 = 0x200000001;
      if (**((_WORD **)v13 + 2) == 518) {
        uint64_t v25 = 0;
      }
      else {
        uint64_t v25 = *(unsigned __int16 *)(*((void *)v13 + 4) + 80);
      }
      if (v16 == 518) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = *(unsigned __int16 *)(v20 + 80);
      }
      uint64_t v88 = v9;
      uint64_t v89 = v15;
      if (v24)
      {
        uint64_t v96 = 0x100000002;
        uint64_t v35 = v25;
      }
      else
      {
        uint64_t v35 = v34;
        uint64_t v34 = v25;
      }
      uint64_t IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)v19, "", 0);
      *(void *)(v19[3] + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66AF580;
      uint64_t v37 = v19[1];
      if (v37) {
        (*(void (**)(uint64_t))(*(void *)v37 + 24))(v37);
      }
      char v38 = 1;
      sub_1CBAECAFC(*(void *)(v3 + 248), *((void *)v13 + 3), (unint64_t *)v13, v34 | (v35 << 16), IncompleteVirtualRegister, 0, 1, (unsigned __int8 **)v13 + 7, 0);
      uint64_t v39 = 0;
      do
      {
        unsigned int v40 = v7;
        uint64_t v41 = IncompleteVirtualRegister;
        char v91 = v38;
        uint64_t v42 = (uint64_t)*(&v97 + v39);
        uint64_t v43 = *(unsigned int *)(*(void *)(v42 + 32) + 4);
        uint64_t v44 = *(void *)(v3 + 264);
        unsigned int v45 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v44, "", 0);
        *(void *)(*(void *)(v44 + 24) + 16 * (v45 & 0x7FFFFFFF)) = &off_1E66AF970;
        uint64_t v46 = *(void *)(v44 + 8);
        if (v46) {
          (*(void (**)(uint64_t, void))(*(void *)v46 + 24))(v46, v45);
        }
        uint64_t v47 = *(void *)(v42 + 24);
        uint64_t v48 = (unsigned __int8 **)(v42 + 56);
        uint64_t v49 = *(void *)(*(void *)(v3 + 248) + 8) + 912;
        if ((*(_WORD *)(v42 + 44) & 4) != 0)
        {
          uint64_t v50 = sub_1CD3C8EB4(*(void *)(v42 + 24), v42, v48, *(void *)(*(void *)(v3 + 248) + 8) + 912, v45);
          uint64_t v52 = v74;
          uint64_t IncompleteVirtualRegister = v41;
          char v7 = v40;
          goto LABEL_71;
        }
        uint64_t v50 = *(llvm::MachineFunction **)(v47 + 32);
        uint64_t v51 = *v48;
        uint64_t v92 = v51;
        if (v51) {
          llvm::MetadataTracking::track((uint64_t)&v92, v51, 2);
        }
        uint64_t v52 = llvm::MachineFunction::CreateMachineInstr(v50, v49, &v92, 0);
        if (v92)
        {
          int v75 = *v92;
          if ((v75 - 4) > 0x1E)
          {
            if ((v75 - 3) >= 0xFFFFFFFE) {
              uint64_t v78 = v92;
            }
            else {
              uint64_t v78 = 0;
            }
            if ((v75 - 3) < 0xFFFFFFFE)
            {
              if (v75 == 3) {
                *((void *)v92 + 1) = 0;
              }
              goto LABEL_67;
            }
            unint64_t v77 = (unint64_t)(v78 + 8);
          }
          else
          {
            if ((v92[1] & 0x7F) != 2 && !*((_DWORD *)v92 + 3)) {
              goto LABEL_67;
            }
            uint64_t v76 = *((void *)v92 + 2);
            if ((v76 & 4) == 0) {
              goto LABEL_67;
            }
            unint64_t v77 = v76 & 0xFFFFFFFFFFFFFFF8;
            if (!v77) {
              goto LABEL_67;
            }
          }
          BOOL v93 = &v92;
          sub_1CC5FA668(v77 + 16, &v93);
        }
LABEL_67:
        uint64_t v53 = *(void *)(v47 + 40);
        *((void *)v52 + 3) = v53;
        uint64_t v54 = *(void *)(v53 + 32);
        uint64_t v55 = *((unsigned int *)v52 + 10);
        uint64_t IncompleteVirtualRegister = v41;
        char v7 = v40;
        if (v55)
        {
          uint64_t v67 = *((void *)v52 + 4);
          uint64_t v68 = *(void *)(v54 + 40);
          uint64_t v69 = 32 * v55;
          do
          {
            if (!*(unsigned char *)v67)
            {
              uint64_t v70 = *(unsigned int *)(v67 + 4);
              if ((int)v70 >= 0) {
                int v71 = (uint64_t *)(*(void *)(v68 + 272) + 8 * v70);
              }
              else {
                int v71 = (uint64_t *)(*(void *)(v68 + 24) + 16 * (v70 & 0x7FFFFFFF) + 8);
              }
              uint64_t v72 = *v71;
              if (*v71)
              {
                uint64_t v73 = *(void *)(v72 + 16);
                *(void *)(v72 + 16) = v67;
                *(void *)(v67 + 16) = v73;
                if (*(unsigned char *)(v67 + 3))
                {
                  *(void *)(v67 + 24) = v72;
                }
                else
                {
                  *(void *)(v67 + 24) = 0;
                  int v71 = (uint64_t *)(v73 + 24);
                }
              }
              else
              {
                *(void *)(v67 + 16) = v67;
                *(void *)(v67 + 24) = 0;
              }
              *int v71 = v67;
            }
            v67 += 32;
            v69 -= 32;
          }
          while (v69);
        }
        uint64_t v56 = *(void *)(v54 + 728);
        if (v56) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v56 + 24))(v56, v52);
        }
        unint64_t v57 = *(void *)v42 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v52 = v57 | *(void *)v52 & 7;
        *((void *)v52 + 1) = v42;
        *(void *)(v57 + 8) = v52;
        *(void *)uint64_t v42 = *(void *)v42 & 7 | (unint64_t)v52;
        uint64_t v94 = 0;
        uint64_t *v40 = 0;
        v40[1] = 0;
        LODWORD(v93) = 0x1000000;
        HIDWORD(v93) = v45;
        llvm::MachineInstr::addOperand(v52, v50, (const llvm::MachineOperand *)&v93);
LABEL_71:
        __int16 v58 = *((_DWORD *)&v96 + v39);
        uint64_t v94 = 0;
        *char v7 = 0;
        v7[1] = 0;
        LODWORD(v93) = (v58 & 0xFFF) << 8;
        HIDWORD(v93) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand(v52, v50, (const llvm::MachineOperand *)&v93);
        BOOL v93 = v7;
        uint64_t v94 = 0x800000000;
        uint64_t v3 = v90;
        uint64_t v59 = *(void *)(v90 + 264);
        if ((v43 & 0x80000000) != 0) {
          uint64_t v60 = (uint64_t *)(*(void *)(v59 + 24) + 16 * (v43 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v60 = (uint64_t *)(*(void *)(v59 + 272) + 8 * v43);
        }
        uint64_t v61 = *v60;
        if (*v60)
        {
          while ((*(unsigned char *)(v61 + 3) & 1) != 0)
          {
            uint64_t v61 = *(void *)(v61 + 24);
            if (!v61) {
              goto LABEL_91;
            }
          }
          LODWORD(v62) = 0;
          unsigned int v63 = 8;
LABEL_79:
          if (v62 >= v63) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v93 + v62) = v61;
          uint64_t v62 = (v94 + 1);
          LODWORD(v94) = v94 + 1;
          while (1)
          {
            uint64_t v61 = *(void *)(v61 + 24);
            if (!v61) {
              break;
            }
            if ((*(unsigned char *)(v61 + 3) & 1) == 0)
            {
              unsigned int v63 = HIDWORD(v94);
              goto LABEL_79;
            }
          }
          uint64_t v64 = (uint64_t *)v93;
          if (v62)
          {
            uint64_t v65 = 8 * v62;
            do
            {
              uint64_t v66 = *v64++;
              llvm::MachineOperand::setReg(v66, v45);
              v65 -= 8;
            }
            while (v65);
            uint64_t v64 = (uint64_t *)v93;
          }
          if (v64 != v7) {
            free(v64);
          }
        }
LABEL_91:
        char v38 = 0;
        uint64_t v39 = 1;
      }
      while ((v91 & 1) != 0);
      long long v15 = v89;
      if (v100 >= (unint64_t)HIDWORD(v100)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v8 = v87;
      v99[v100] = v13;
      unsigned int v79 = v100 + 1;
      LODWORD(v100) = v79;
      if (v79 >= HIDWORD(v100)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v13 = 0;
      uint64_t v24 = 0;
      v99[v79] = v88;
      unsigned int v10 = v100 + 1;
      LODWORD(v100) = v100 + 1;
      uint64_t v97 = 0;
      uint64_t v98 = 0;
      int v11 = 1;
LABEL_124:
      uint64_t v12 = v24;
      uint64_t v9 = v15;
    }
    while (v15 != v8);
    uint64_t v80 = v99;
    if (v10)
    {
      uint64_t v81 = 8 * v10;
      do
      {
        unsigned int v82 = *v80++;
        llvm::MachineInstr::eraseFromParent(v82);
        v81 -= 8;
      }
      while (v81);
      uint64_t v80 = v99;
    }
    if (v80 != v101) {
      free(v80);
    }
    int v6 = v86;
    uint64_t v5 = v85;
LABEL_136:
    v6 |= v11;
    uint64_t v5 = (void *)v5[1];
  }
  while (v5 != v84);
  return v6 & 1;
}

llvm::MachineInstr *sub_1CBAECAFC(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, int a5, int a6, int a7, unsigned __int8 **a8, uint64_t a9)
{
  if (a6) {
    int v13 = 5626;
  }
  else {
    int v13 = 5625;
  }
  if (a6) {
    int v14 = 5623;
  }
  else {
    int v14 = 5622;
  }
  if (a7) {
    int v13 = v14;
  }
  if (a6) {
    int v15 = 518;
  }
  else {
    int v15 = 517;
  }
  if (a4) {
    unsigned int v16 = v13;
  }
  else {
    unsigned int v16 = v15;
  }
  uint64_t v17 = *(void *)(a1 + 8) + 48 * v16;
  char v18 = *(llvm::MachineFunction **)(a2 + 32);
  uint64_t v19 = *a8;
  uint64_t v34 = v19;
  if (v19) {
    llvm::MetadataTracking::track((uint64_t)&v34, v19, 2);
  }
  uint64_t v20 = llvm::MachineFunction::CreateMachineInstr(v18, v17, &v34, 0);
  if (v34) {
    llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
  }
  uint64_t v21 = *(void *)(a2 + 40);
  *((void *)v20 + 3) = v21;
  uint64_t v22 = *(void *)(v21 + 32);
  uint64_t v23 = *((unsigned int *)v20 + 10);
  if (v23)
  {
    uint64_t v27 = *((void *)v20 + 4);
    uint64_t v28 = *(void *)(v22 + 40);
    uint64_t v29 = 32 * v23;
    do
    {
      if (!*(unsigned char *)v27)
      {
        uint64_t v30 = *(unsigned int *)(v27 + 4);
        if ((int)v30 >= 0) {
          int v31 = (uint64_t *)(*(void *)(v28 + 272) + 8 * v30);
        }
        else {
          int v31 = (uint64_t *)(*(void *)(v28 + 24) + 16 * (v30 & 0x7FFFFFFF) + 8);
        }
        uint64_t v32 = *v31;
        if (*v31)
        {
          uint64_t v33 = *(void *)(v32 + 16);
          *(void *)(v32 + 16) = v27;
          *(void *)(v27 + 16) = v33;
          if (*(unsigned char *)(v27 + 3))
          {
            *(void *)(v27 + 24) = v32;
          }
          else
          {
            *(void *)(v27 + 24) = 0;
            int v31 = (uint64_t *)(v33 + 24);
          }
        }
        else
        {
          *(void *)(v27 + 16) = v27;
          *(void *)(v27 + 24) = 0;
        }
        *int v31 = v27;
      }
      v27 += 32;
      v29 -= 32;
    }
    while (v29);
  }
  uint64_t v24 = *(void *)(v22 + 728);
  if (v24) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v24 + 24))(v24, v20);
  }
  unint64_t v25 = *a3 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v20 = v25 | *(void *)v20 & 7;
  *((void *)v20 + 1) = a3;
  *(void *)(v25 + 8) = v20;
  *a3 = *a3 & 7 | (unint64_t)v20;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  v35[0] = 0x1000000;
  v35[1] = a5;
  llvm::MachineInstr::addOperand(v20, v18, (const llvm::MachineOperand *)v35);
  v35[0] = 1;
  uint64_t v36 = 0;
  uint64_t v37 = a9;
  llvm::MachineInstr::addOperand(v20, v18, (const llvm::MachineOperand *)v35);
  if (v16 - 519 <= 0xFFFFFFFD)
  {
    v35[0] = 1;
    uint64_t v36 = 0;
    uint64_t v37 = a4;
    llvm::MachineInstr::addOperand(v20, v18, (const llvm::MachineOperand *)v35);
  }
  return v20;
}

uint64_t sub_1CBAECD28(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *(void *)(result + 280);
  uint64_t v4 = *(void *)(result + 288);
  if (v4 == v5)
  {
    uint64_t v6 = *(unsigned int *)(result + 300);
    char v7 = (void *)(v4 + 8 * v6);
    if (v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 8 * v6;
      while (*(void *)(v4 + v8) != a2)
      {
        v8 += 8;
        if (v9 == v8) {
          goto LABEL_6;
        }
      }
      char v7 = (void *)(v4 + v8);
    }
LABEL_6:
    uint64_t v5 = *(void *)(result + 288);
  }
  else
  {
    uint64_t v25 = *(unsigned int *)(result + 296);
    int v26 = v25 - 1;
    unsigned int v27 = (v25 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    char v7 = (void *)(v4 + 8 * v27);
    uint64_t v28 = *v7;
    if (*v7 == -1)
    {
      uint64_t v29 = 0;
LABEL_58:
      if (v29) {
        char v7 = v29;
      }
      if (*v7 != a2) {
        char v7 = (void *)(v4 + 8 * v25);
      }
    }
    else
    {
      uint64_t v29 = 0;
      int v30 = 1;
      while (v28 != a2)
      {
        if (v29) {
          BOOL v31 = 0;
        }
        else {
          BOOL v31 = v28 == -2;
        }
        if (v31) {
          uint64_t v29 = v7;
        }
        unsigned int v32 = v27 + v30++;
        unsigned int v27 = v32 & v26;
        char v7 = (void *)(v4 + 8 * (v32 & v26));
        uint64_t v28 = *v7;
        if (*v7 == -1) {
          goto LABEL_58;
        }
      }
    }
  }
  uint64_t v10 = 296;
  if (v4 == v5) {
    uint64_t v10 = 300;
  }
  if (v7 == (void *)(v4 + 8 * *(unsigned int *)(result + v10)))
  {
    uint64_t v11 = *(unsigned int *)(result + 300);
    if (v4 == v5)
    {
      if (v11)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 8 * v11;
        int v14 = *(void **)(result + 288);
        while (*v14 != a2)
        {
          if (*v14 == -2) {
            uint64_t v12 = v14;
          }
          ++v14;
          v13 -= 8;
          if (!v13)
          {
            if (!v12) {
              goto LABEL_18;
            }
            *uint64_t v12 = a2;
            --*(_DWORD *)(result + 304);
            goto LABEL_20;
          }
        }
        goto LABEL_20;
      }
LABEL_18:
      unsigned int v15 = *(_DWORD *)(result + 296);
      if (v11 < v15)
      {
        *(_DWORD *)(result + 300) = v11 + 1;
        *(void *)(v4 + 8 * v11) = a2;
LABEL_20:
        uint64_t result = **(unsigned __int16 **)(a2 + 16);
        if (result != 623)
        {
          uint64_t result = sub_1CBDA6464(result, 0x2Eu);
          uint64_t v16 = *(void *)(a2 + 32) + 32 * result;
          *(void *)(v16 + 16) |= 0x40uLL;
        }
        return result;
      }
    }
    else
    {
      unsigned int v15 = *(_DWORD *)(result + 296);
    }
    if (3 * v15 <= 4 * ((int)v11 - *(_DWORD *)(result + 304)))
    {
      if (v15 >= 0x40) {
        v15 *= 2;
      }
      else {
        unsigned int v15 = 128;
      }
    }
    else if (v15 - v11 >= v15 >> 3)
    {
      goto LABEL_26;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(result + 280), v15);
    unsigned int v15 = *(_DWORD *)(v3 + 296);
    uint64_t v4 = *(void *)(v3 + 288);
LABEL_26:
    unsigned int v17 = v15 - 1;
    unsigned int v18 = (v15 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v19 = (void *)(v4 + 8 * v18);
    uint64_t v20 = *v19;
    if (*v19 == -1)
    {
      uint64_t v21 = 0;
LABEL_50:
      if (v21) {
        uint64_t v33 = v21;
      }
      else {
        uint64_t v33 = v19;
      }
      if (*v33 != a2)
      {
        if (*v33 == -2) {
          --*(_DWORD *)(v3 + 304);
        }
        else {
          ++*(_DWORD *)(v3 + 300);
        }
        *uint64_t v33 = a2;
      }
    }
    else
    {
      uint64_t v21 = 0;
      int v22 = 1;
      while (v20 != a2)
      {
        if (v21) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = v20 == -2;
        }
        if (v23) {
          uint64_t v21 = v19;
        }
        unsigned int v24 = v18 + v22++;
        unsigned int v18 = v24 & v17;
        uint64_t v19 = (void *)(v4 + 8 * (v24 & v17));
        uint64_t v20 = *v19;
        if (*v19 == -1) {
          goto LABEL_50;
        }
      }
    }
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_1CBAECFBC(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 24);
  int v3 = 8;
  while (*(unsigned char *)(*(void *)(*(void *)(v2 + 32) + 16) + 378))
  {
    v10[0] = 0;
    uint64_t v11 = v1;
    sub_1CBC2F99C((uint64_t)v10);
    uint64_t v4 = v11;
    BOOL v5 = v10[0] || v11 == 0;
    if (v5 || !sub_1CBC2F8BC(v11)) {
      break;
    }
    uint64_t v6 = *(void *)(v1 + 24);
    uint64_t v2 = *(void *)(v4 + 24);
    if (v6 == v2) {
      return v4;
    }
    if (**(_WORD **)(v1 + 16) == 544)
    {
      uint64_t v8 = v6 + 88;
      char v7 = *(void **)(v6 + 88);
      if (((*(void *)(v8 + 8) - (void)v7) & 0x7FFFFFFF8) == 8 && *v7 == v2)
      {
        uint64_t v1 = v4;
        if (--v3) {
          continue;
        }
      }
    }
    return v1;
  }
  return v1;
}

uint64_t sub_1CBAED08C(uint64_t a1, uint64_t a2)
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  int v4 = (*(unsigned __int16 *)(*(void *)a2 + 18) >> 4) & 0x3FF;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8));
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  char v7 = *(void **)(a1 + 288);
  if (v7 != *(void **)(a1 + 280))
  {
    uint64_t v28 = *(unsigned int *)(a1 + 296);
    if (v28 >= 0x21 && 4 * (*(_DWORD *)(a1 + 300) - *(_DWORD *)(a1 + 304)) < v28)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(a1 + 280));
      goto LABEL_3;
    }
    memset(v7, 255, 8 * v28);
  }
  *(void *)(a1 + 300) = 0;
LABEL_3:
  if ((v4 - 101) > 3 || v4 == 102) {
    return 0;
  }
  if (*(unsigned char *)(v5 + 321))
  {
    uint64_t v97 = *(void *)(a2 + 328);
    uint64_t v98 = *(unint64_t **)(v97 + 56);
    int v106 = 0;
    unint64_t v99 = sub_1CB85AA4C(v97, v98, &v106, *(void *)(v6 + 8) + 47760, 391);
    int v101 = v100;
    LODWORD(v116) = 1;
    uint64_t v117 = 0;
    uint64_t v118 = 0;
    llvm::MachineInstr::addOperand(v100, v99, (const llvm::MachineOperand *)&v116);
    LODWORD(v116) = 1;
    uint64_t v117 = 0;
    uint64_t v118 = 0;
    llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v116);
    LODWORD(v116) = 1;
    uint64_t v117 = 0;
    uint64_t v118 = 0;
    llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v116);
    if (v106) {
      llvm::MetadataTracking::untrack((uint64_t)&v106, v106);
    }
    sub_1CBAECD28(a1, (uint64_t)v101);
    return 1;
  }
  if (!*(unsigned char *)(v5 + 284)) {
    return 0;
  }
  uint64_t v10 = *(uint64_t **)(a1 + 8);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v11 == v12)
  {
LABEL_15:
    uint64_t v13 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v11 != &llvm::SlotIndexes::ID)
    {
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_15;
      }
    }
    uint64_t v13 = *(void *)(v11 + 8);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 96))(v13, &llvm::SlotIndexes::ID);
  unsigned int v15 = *(uint64_t **)(a1 + 8);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  if (v16 == v17)
  {
LABEL_19:
    uint64_t v18 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v16 != &llvm::MachineDominatorTree::ID)
    {
      v16 += 16;
      if (v16 == v17) {
        goto LABEL_19;
      }
    }
    uint64_t v18 = *(void *)(v16 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v18 + 96))(v18, &llvm::MachineDominatorTree::ID);
  uint64_t v19 = *(uint64_t **)(a1 + 8);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  if (v20 == v21)
  {
LABEL_23:
    uint64_t v22 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v20 != &llvm::MachinePostDominatorTree::ID)
    {
      v20 += 16;
      if (v20 == v21) {
        goto LABEL_23;
      }
    }
    uint64_t v22 = *(void *)(v20 + 8);
  }
  uint64_t v23 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v22 + 96))(v22, &llvm::MachinePostDominatorTree::ID);
  unsigned int v24 = *(void **)(a2 + 320);
  if (((v24[12] - v24[11]) & 0x7FFFFFFF8) != 0) {
    return 0;
  }
  unint64_t v25 = v24[6] & 0xFFFFFFFFFFFFFFF8;
  if (v24 + 6 == (void *)v25) {
    return 0;
  }
  if (!v25 || (*(unsigned char *)v25 & 4) == 0)
  {
    while ((*(_WORD *)(v25 + 44) & 4) != 0)
      unint64_t v25 = *(void *)v25 & 0xFFFFFFFFFFFFFFF8;
  }
  if (**(_WORD **)(v25 + 16) != 623) {
    return 0;
  }
  int v26 = (unint64_t *)(v14 + 344);
  unint64_t v27 = *(void *)(v14 + 352) & 0xFFFFFFFFFFFFFFF8;
  while (1)
  {
    unint64_t v27 = *(void *)(v27 + 8);
    if ((unint64_t *)v27 == v26) {
      break;
    }
    if (*(void *)(v27 + 16)) {
      goto LABEL_43;
    }
  }
  unint64_t v27 = *v26;
LABEL_43:
  uint64_t v102 = v23;
  unint64_t v104 = v27 & 0xFFFFFFFFFFFFFFF9;
  uint64_t v29 = *(void *)(a2 + 328);
  LODWORD(v106) = 0;
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  int v109 = 0;
  *(_OWORD *)uint64_t v110 = 0u;
  *(_OWORD *)uint64_t v111 = 0u;
  long long v112 = 0u;
  *(_OWORD *)char __p = 0u;
  uint64_t v114 = 0;
  sub_1CBAEDDA8((int *)&v106, v29);
  sub_1CBAEDFC0((int *)&v106);
  unsigned int v32 = (uint64_t *)v111[1];
  BOOL v31 = (uint64_t *)v112;
  if (v111[1] == (void *)v112) {
    goto LABEL_165;
  }
  int v103 = (void *)(v14 + 344);
  __n128 v30 = (__n128)vdupq_n_s64(0xFFFFFFFFFFFFF000);
  __n128 v105 = v30;
  do
  {
    uint64_t v116 = 1;
    for (uint64_t i = 8; i != 264; i += 16)
      *(__n128 *)((char *)&v116 + i) = v30;
    if (v32 == v31)
    {
LABEL_152:
      int v46 = 1;
      goto LABEL_153;
    }
    do
    {
      uint64_t v115 = 0;
      if (sub_1CBAEE5C4((uint64_t)&v116, *v32, &v115)) {
        goto LABEL_57;
      }
      unsigned int v34 = v116 >> 1;
      if (v116) {
        unsigned int v35 = 32;
      }
      else {
        unsigned int v35 = v118;
      }
      if (4 * v34 + 4 >= 3 * v35)
      {
        v35 *= 2;
LABEL_163:
        sub_1CBAEE668((uint64_t)&v116, v35);
        uint64_t v115 = 0;
        sub_1CBAEE5C4((uint64_t)&v116, *v32, &v115);
        goto LABEL_54;
      }
      if (v35 + ~v34 - HIDWORD(v116) <= v35 >> 3) {
        goto LABEL_163;
      }
LABEL_54:
      LODWORD(v116) = v116 + 2;
      if (*v115 != -4096) {
        --HIDWORD(v116);
      }
      *uint64_t v115 = *v32;
LABEL_57:
      ++v32;
    }
    while (v32 != v31);
    uint64_t v36 = v111[1];
    uint64_t v37 = (void *)v112;
    if (v111[1] == (void *)v112) {
      goto LABEL_152;
    }
    while (2)
    {
      uint64_t v38 = (void *)(*v36 + 48);
      unint64_t v39 = *v38 & 0xFFFFFFFFFFFFFFF8;
      if (!v39 || (*(unsigned char *)v39 & 4) == 0)
      {
        while ((*(_WORD *)(v39 + 44) & 4) != 0)
          unint64_t v39 = *(void *)v39 & 0xFFFFFFFFFFFFFFF8;
      }
LABEL_64:
      if ((void *)v39 == v38)
      {
        ++v36;
        int v46 = 1;
        if (v36 == v37) {
          goto LABEL_153;
        }
        continue;
      }
      break;
    }
    unsigned int v40 = *(unsigned __int16 **)(v39 + 16);
    uint64_t v41 = *((void *)v40 + 2);
    if ((v41 & 2) != 0)
    {
      if (sub_1CBB35008((void *)v39)) {
        goto LABEL_90;
      }
      unsigned int v40 = *(unsigned __int16 **)(v39 + 16);
    }
    else if (v41 & 0x80) != 0 || (byte_1CDB16690[*v40])
    {
LABEL_90:
      __int16 v47 = *(_WORD *)(v39 + 44);
      unint64_t v48 = v39;
      if ((v47 & 4) != 0)
      {
        do
          unint64_t v48 = *(void *)v48 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v48 + 44) & 4) != 0);
      }
      if ((v47 & 8) != 0)
      {
        do
          unint64_t v39 = *(void *)(v39 + 8);
        while ((*(_WORD *)(v39 + 44) & 8) != 0);
      }
      uint64_t v49 = *(void *)(v39 + 8);
      if (v48 != v49)
      {
        while (1)
        {
          unsigned int v50 = **(unsigned __int16 **)(v48 + 16);
          BOOL v51 = v50 > 0x17;
          int v52 = (1 << v50) & 0x83E000;
          if (v51 || v52 == 0) {
            break;
          }
          unint64_t v48 = *(void *)(v48 + 8);
          if (v48 == v49)
          {
            unint64_t v48 = *(void *)(v39 + 8);
            break;
          }
        }
      }
      uint64_t v54 = *(void *)(v14 + 368);
      uint64_t v55 = *(unsigned int *)(v14 + 384);
      if (v55)
      {
        LODWORD(v56) = ((v48 >> 4) ^ (v48 >> 9)) & (v55 - 1);
        unint64_t v57 = (uint64_t *)(v54 + 16 * v56);
        uint64_t v58 = *v57;
        if (v48 == *v57)
        {
LABEL_100:
          unint64_t v59 = v57[1];
          goto LABEL_101;
        }
        int v93 = 1;
        while (v58 != -4096)
        {
          int v94 = v56 + v93++;
          uint64_t v56 = v94 & (v55 - 1);
          uint64_t v58 = *(void *)(v54 + 16 * v56);
          if (v48 == v58)
          {
            unint64_t v57 = (uint64_t *)(v54 + 16 * v56);
            goto LABEL_100;
          }
        }
      }
      unint64_t v57 = (uint64_t *)(v54 + 16 * v55);
      goto LABEL_100;
    }
    uint64_t v42 = *((void *)v40 + 1);
    if ((*(_WORD *)(v39 + 44) & 0xC) == 0 || (*(_WORD *)(v39 + 44) & 4) != 0)
    {
      if ((v42 & 0x80) != 0) {
        goto LABEL_187;
      }
      if ((v42 & 0x800) != 0) {
        goto LABEL_142;
      }
      goto LABEL_74;
    }
    unint64_t v44 = v39;
    if ((v42 & 0x80) == 0)
    {
      while ((*(_WORD *)(v44 + 44) & 8) != 0)
      {
        unint64_t v44 = *(void *)(v44 + 8);
        if ((*(unsigned char *)(*(void *)(v44 + 16) + 8) & 0x80) != 0) {
          goto LABEL_187;
        }
      }
      unint64_t v45 = v39;
      if ((v42 & 0x800) != 0) {
        goto LABEL_142;
      }
      while ((*(_WORD *)(v45 + 44) & 8) != 0)
      {
        unint64_t v45 = *(void *)(v45 + 8);
        if ((*(unsigned char *)(*(void *)(v45 + 16) + 9) & 8) != 0) {
          goto LABEL_142;
        }
      }
LABEL_74:
      unint64_t v39 = *(void *)v39 & 0xFFFFFFFFFFFFFFF8;
      if (!v39 || (*(unsigned char *)v39 & 4) == 0)
      {
        while ((*(_WORD *)(v39 + 44) & 4) != 0)
          unint64_t v39 = *(void *)v39 & 0xFFFFFFFFFFFFFFF8;
      }
      goto LABEL_64;
    }
LABEL_187:
    unint64_t v59 = sub_1CB914F84(v14, v39);
LABEL_101:
    uint64_t v60 = (char *)v111[1];
    if ((unint64_t)v112 - (unint64_t)v111[1] <= 8)
    {
      char v91 = *(void **)(*(void *)v111[1] + 88);
      uint64_t v92 = *(void **)(*(void *)v111[1] + 96);
      if (v91 != v92)
      {
        while (*v91 != *(void *)v111[1])
        {
          if (++v91 == v92)
          {
            char v91 = *(void **)(*(void *)v111[1] + 96);
            break;
          }
        }
      }
      if (v91 == v92)
      {
        unint64_t v89 = v104;
        unsigned int v90 = *(_DWORD *)((v104 & 0xFFFFFFFFFFFFFFF8) + 24) | (v104 >> 1) & 3;
        unsigned int v88 = *(_DWORD *)((v59 & 0xFFFFFFFFFFFFFFF8) + 24) | (v59 >> 1) & 3;
LABEL_149:
        if (v90 < v88) {
          unint64_t v89 = v59;
        }
        unint64_t v104 = v89;
        goto LABEL_152;
      }
    }
    if (v111[1] == (void *)v112) {
      goto LABEL_142;
    }
    unint64_t v61 = *(void *)(v14 + 352) & 0xFFFFFFFFFFFFFFF9;
    unsigned int v63 = &v117;
    if (v116)
    {
      int v64 = 31;
    }
    else
    {
      unsigned int v63 = v117;
      int v64 = v118 - 1;
    }
    unint64_t v59 = *v103 & 0xFFFFFFFFFFFFFFF9;
    while (2)
    {
      uint64_t v65 = *(void *)v60;
      uint64_t v62 = *(void *)(v14 + 392);
      uint64_t v66 = *(void *)(v62 + 16 * *(unsigned int *)(*(void *)v60 + 24));
      if ((*(_DWORD *)((v61 & 0xFFFFFFFFFFFFFFF8) + 24) | (v61 >> 1) & 3) < ((v66 >> 1) & 3 | *(_DWORD *)((v66 & 0xFFFFFFFFFFFFFFF8) + 24))) {
        unint64_t v61 = *(void *)(v62 + 16 * *(unsigned int *)(*(void *)v60 + 24));
      }
      uint64_t v67 = *(uint64_t **)(v65 + 88);
      uint64_t v68 = *(uint64_t **)(v65 + 96);
      while (2)
      {
        if (v67 != v68)
        {
          uint64_t v69 = *v67;
          if (*v67 + 48 == (*(void *)(*v67 + 48) & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_114:
            ++v67;
            continue;
          }
          if (v116 & 1 | (v118 != 0))
          {
            unsigned int v70 = ((v69 >> 4) ^ (v69 >> 9)) & v64;
            uint64_t v71 = v63[v70];
            if (v71 == v69) {
              goto LABEL_114;
            }
            int v72 = 1;
            while (v71 != -4096)
            {
              unsigned int v73 = v70 + v72++;
              unsigned int v70 = v73 & v64;
              uint64_t v71 = v63[v70];
              if (v71 == v69) {
                goto LABEL_114;
              }
            }
          }
          unint64_t v74 = *(void *)(v69 + 56);
          __int16 v75 = *(_WORD *)(v74 + 44);
          unint64_t v76 = v74;
          if ((v75 & 4) != 0)
          {
            do
              unint64_t v76 = *(void *)v76 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v76 + 44) & 4) != 0);
          }
          if ((v75 & 8) != 0)
          {
            do
              unint64_t v74 = *(void *)(v74 + 8);
            while ((*(_WORD *)(v74 + 44) & 8) != 0);
          }
          unint64_t v77 = *(void *)(v74 + 8);
          if (v76 != v77)
          {
            while (1)
            {
              unsigned int v78 = **(unsigned __int16 **)(v76 + 16);
              BOOL v51 = v78 > 0x17;
              int v79 = (1 << v78) & 0x83E000;
              if (v51 || v79 == 0) {
                break;
              }
              unint64_t v76 = *(void *)(v76 + 8);
              if (v76 == v77)
              {
                unint64_t v76 = v77;
                break;
              }
            }
          }
          uint64_t v81 = *(void *)(v14 + 368);
          uint64_t v82 = *(unsigned int *)(v14 + 384);
          if (v82)
          {
            LODWORD(v83) = ((v76 >> 4) ^ (v76 >> 9)) & (v82 - 1);
            uint64_t v84 = (uint64_t *)(v81 + 16 * v83);
            uint64_t v85 = *v84;
            if (v76 == *v84) {
              goto LABEL_129;
            }
            int v86 = 1;
            while (v85 != -4096)
            {
              int v87 = v83 + v86++;
              uint64_t v83 = v87 & (v82 - 1);
              uint64_t v85 = *(void *)(v81 + 16 * v83);
              if (v76 == v85)
              {
                uint64_t v84 = (uint64_t *)(v81 + 16 * v83);
                goto LABEL_129;
              }
            }
          }
          uint64_t v84 = (uint64_t *)(v81 + 16 * v82);
LABEL_129:
          if (((v84[1] >> 1) & 3 | *(_DWORD *)((v84[1] & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v59 & 0xFFFFFFFFFFFFFFF8) + 24) | (v59 >> 1) & 3)) {
            unint64_t v59 = v84[1];
          }
          goto LABEL_114;
        }
        break;
      }
      v60 += 8;
      if (v60 != (char *)v112) {
        continue;
      }
      break;
    }
    if (v59 != (*v103 & 0xFFFFFFFFFFFFFFF9))
    {
      unsigned int v88 = *(_DWORD *)((v59 & 0xFFFFFFFFFFFFFFF8) + 24) | (v59 >> 1) & 3;
      if (v88 > (*(_DWORD *)((v61 & 0xFFFFFFFFFFFFFFF8) + 24) | (v61 >> 1) & 3))
      {
        unint64_t v89 = v104;
        unsigned int v90 = *(_DWORD *)((v104 & 0xFFFFFFFFFFFFFFF8) + 24) | (v104 >> 1) & 3;
        goto LABEL_149;
      }
    }
LABEL_142:
    int v46 = 0;
LABEL_153:
    if ((v116 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v117, 8);
    }
    if (!v46)
    {
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v111[1])
      {
        *(void **)&long long v112 = v111[1];
        operator delete(v111[1]);
      }
      if (v110[0])
      {
        v110[1] = v110[0];
        operator delete(v110[0]);
      }
      MEMORY[0x1D25D9CD0](v107, 8);
      return 0;
    }
    sub_1CBAEDFC0((int *)&v106);
    __n128 v30 = v105;
    unsigned int v32 = (uint64_t *)v111[1];
    BOOL v31 = (uint64_t *)v112;
  }
  while (v111[1] != (void *)v112);
LABEL_165:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
    unsigned int v32 = (uint64_t *)v111[1];
  }
  if (v32)
  {
    *(void *)&long long v112 = v32;
    operator delete(v32);
  }
  if (v110[0])
  {
    v110[1] = v110[0];
    operator delete(v110[0]);
  }
  MEMORY[0x1D25D9CD0](v107, 8, v30);
  if (v104 < 8) {
    return 0;
  }
  uint64_t result = *(void *)((v104 & 0xFFFFFFFFFFFFFFF8) + 16);
  if (result)
  {
    uint64_t v95 = sub_1CBAECFBC(result);
    if (**(_WORD **)(v95 + 16) != 623)
    {
      sub_1CBAECD28(a1, v95);
      uint64_t v96 = *(void *)(*(void *)(v102 + 248) + 72);
      if (*(void *)v96 || *(_DWORD *)(v96 + 32) <= 1u) {
        llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominates();
      }
      return 1;
    }
    return 0;
  }
  return result;
}

void sub_1CBAEDCE8(llvm *a1)
{
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachinePostDominatorTreePass(a1, v2);
  llvm::initializeSlotIndexesPass((uint64_t)a1);
  operator new();
}

const char *sub_1CBAEDD98()
{
  return "AGX3 Dis2x2 pass";
}

void sub_1CBAEDDA8(int *a1, uint64_t a2)
{
  uint64_t v28 = a2;
  int v3 = *a1 + 1;
  *a1 = v3;
  *((_DWORD *)sub_1CBAEE230((uint64_t)(a1 + 2), &v28) + 2) = v3;
  uint64_t v5 = (void *)*((void *)a1 + 5);
  unint64_t v4 = *((void *)a1 + 6);
  if ((unint64_t)v5 < v4)
  {
    *uint64_t v5 = v28;
    uint64_t v13 = v5 + 1;
  }
  else
  {
    uint64_t v6 = (void *)*((void *)a1 + 4);
    uint64_t v7 = v5 - v6;
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 61) {
      goto LABEL_35;
    }
    uint64_t v9 = v4 - (void)v6;
    if (v9 >> 2 > v8) {
      unint64_t v8 = v9 >> 2;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 61) {
        goto LABEL_36;
      }
      uint64_t v11 = (char *)operator new(8 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v12 = &v11[8 * v7];
    *(void *)uint64_t v12 = v28;
    uint64_t v13 = v12 + 8;
    if (v5 != v6)
    {
      do
      {
        uint64_t v14 = *--v5;
        *((void *)v12 - 1) = v14;
        v12 -= 8;
      }
      while (v5 != v6);
      uint64_t v5 = (void *)*((void *)a1 + 4);
    }
    *((void *)a1 + 4) = v12;
    *((void *)a1 + 5) = v13;
    *((void *)a1 + 6) = &v11[8 * v10];
    if (v5) {
      operator delete(v5);
    }
  }
  *((void *)a1 + 5) = v13;
  uint64_t v15 = v28;
  uint64_t v16 = *(void *)(v28 + 88);
  int v17 = *a1;
  uint64_t v19 = (char *)*((void *)a1 + 11);
  unint64_t v18 = *((void *)a1 + 12);
  if ((unint64_t)v19 < v18)
  {
    *(void *)uint64_t v19 = v28;
    *((void *)v19 + 1) = v16;
    int v26 = v19 + 24;
    *((_DWORD *)v19 + 4) = v17;
    goto LABEL_32;
  }
  uint64_t v20 = (unsigned char *)*((void *)a1 + 10);
  unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v20) >> 3) + 1;
  if (v21 > 0xAAAAAAAAAAAAAAALL) {
LABEL_35:
  }
    abort();
  unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)v20) >> 3);
  if (2 * v22 > v21) {
    unint64_t v21 = 2 * v22;
  }
  if (v22 >= 0x555555555555555) {
    unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v23 = v21;
  }
  if (!v23)
  {
    unsigned int v24 = 0;
    goto LABEL_26;
  }
  if (v23 > 0xAAAAAAAAAAAAAAALL) {
LABEL_36:
  }
    sub_1CB833614();
  unsigned int v24 = (char *)operator new(24 * v23);
LABEL_26:
  unint64_t v25 = &v24[8 * ((v19 - v20) >> 3)];
  *(void *)unint64_t v25 = v15;
  *((void *)v25 + 1) = v16;
  *((_DWORD *)v25 + 4) = v17;
  int v26 = v25 + 24;
  if (v19 != v20)
  {
    do
    {
      long long v27 = *(_OWORD *)(v19 - 24);
      *((_DWORD *)v25 - 2) = *((_DWORD *)v19 - 2);
      *(_OWORD *)(v25 - 24) = v27;
      v25 -= 24;
      v19 -= 24;
    }
    while (v19 != v20);
    uint64_t v19 = (char *)*((void *)a1 + 10);
  }
  *((void *)a1 + 10) = v25;
  *((void *)a1 + 11) = v26;
  *((void *)a1 + 12) = &v24[24 * v23];
  if (v19) {
    operator delete(v19);
  }
LABEL_32:
  *((void *)a1 + 11) = v26;
}

int *sub_1CBAEDFC0(int *result)
{
  *((void *)result + 8) = *((void *)result + 7);
  uint64_t v2 = *((void *)result + 10);
  uint64_t v1 = *((void *)result + 11);
  if (v2 != v1)
  {
    int v3 = result;
    uint64_t v4 = (uint64_t)(result + 2);
    while (1)
    {
      uint64_t v5 = (void *)(v1 - 16);
      uint64_t v6 = *(uint64_t **)(v1 - 16);
      if (v6 != *(uint64_t **)(*(void *)(v1 - 24) + 96))
      {
        do
        {
          *uint64_t v5 = v6 + 1;
          uint64_t v7 = *v6;
          uint64_t v22 = *v6;
          uint64_t v23 = 0;
          if (sub_1CBA0E618(v4, &v22, &v23) && v23 != *((void *)v3 + 1) + 16 * v3[6])
          {
            unsigned int v8 = *(_DWORD *)(v23 + 8);
            uint64_t v1 = *((void *)v3 + 11);
            if (*(_DWORD *)(v1 - 8) > v8) {
              *(_DWORD *)(v1 - 8) = v8;
            }
          }
          else
          {
            sub_1CBAEDDA8(v3, v7);
            uint64_t v1 = *((void *)v3 + 11);
          }
          uint64_t v5 = (void *)(v1 - 16);
          uint64_t v6 = *(uint64_t **)(v1 - 16);
        }
        while (v6 != *(uint64_t **)(*(void *)(v1 - 24) + 96));
        uint64_t v2 = *((void *)v3 + 10);
      }
      uint64_t v23 = 0;
      uint64_t v23 = *(void *)(v1 - 24);
      unsigned int v9 = *(_DWORD *)(v1 - 8);
      *((void *)v3 + 11) = v1 - 24;
      if (v2 != v1 - 24 && *(_DWORD *)(v1 - 32) > v9) {
        *(_DWORD *)(v1 - 32) = v9;
      }
      uint64_t result = (int *)sub_1CBAEE230(v4, &v23);
      if (v9 == result[2]) {
        break;
      }
      uint64_t v2 = *((void *)v3 + 10);
      uint64_t v1 = *((void *)v3 + 11);
      if (v2 == v1) {
        return result;
      }
    }
    unint64_t v10 = (void *)*((void *)v3 + 8);
    do
    {
      uint64_t v11 = *((void *)v3 + 5);
      unint64_t v12 = *((void *)v3 + 9);
      if ((unint64_t)v10 >= v12)
      {
        uint64_t v14 = (void *)*((void *)v3 + 7);
        uint64_t v15 = v10 - v14;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61) {
          abort();
        }
        uint64_t v17 = v12 - (void)v14;
        if (v17 >> 2 > v16) {
          unint64_t v16 = v17 >> 2;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          if (v18 >> 61) {
            sub_1CB833614();
          }
          unint64_t v21 = (char *)operator new(8 * v18);
        }
        else
        {
          unint64_t v21 = 0;
        }
        uint64_t v19 = &v21[8 * v15];
        *(void *)uint64_t v19 = *(void *)(v11 - 8);
        uint64_t v13 = v19 + 8;
        if (v10 != v14)
        {
          do
          {
            uint64_t v20 = *--v10;
            *((void *)v19 - 1) = v20;
            v19 -= 8;
          }
          while (v10 != v14);
          unint64_t v10 = (void *)*((void *)v3 + 7);
        }
        *((void *)v3 + 7) = v19;
        *((void *)v3 + 8) = v13;
        *((void *)v3 + 9) = &v21[8 * v18];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *unint64_t v10 = *(void *)(v11 - 8);
        uint64_t v13 = v10 + 1;
      }
      *((void *)v3 + 8) = v13;
      *((void *)v3 + 5) -= 8;
      uint64_t result = (int *)sub_1CBAEE230(v4, v13 - 1);
      result[2] = -1;
      unint64_t v10 = (void *)*((void *)v3 + 8);
    }
    while (*(v10 - 1) != v23);
  }
  return result;
}

void *sub_1CBAEE230(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    unint64_t v12 = 0;
LABEL_15:
    uint64_t v6 = sub_1CBAEE2F0(a1, (uint64_t)a2, a2, v12);
    void *v6 = *a2;
    *((_DWORD *)v6 + 2) = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  uint64_t v6 = (void *)(*(void *)a1 + 16 * v5);
  uint64_t v7 = *v6;
  if (*a2 != *v6)
  {
    unsigned int v8 = 0;
    int v9 = 1;
    while (v7 != -4096)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == -8192;
      }
      if (v10) {
        unsigned int v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      uint64_t v6 = (void *)(*(void *)a1 + 16 * (v11 & v4));
      uint64_t v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v8) {
      unint64_t v12 = v8;
    }
    else {
      unint64_t v12 = v6;
    }
    goto LABEL_15;
  }
  return v6;
}

void *sub_1CBAEE2F0(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CBAEE424(a1, v7);
      uint64_t v17 = 0;
      sub_1CBA0E618(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CBAEE424(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        uint64_t v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 16 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CBAEE424(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CBAEE4F0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CBAEE4F0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    int v4 = *(void **)result;
    uint64_t v5 = 16 * v3;
    do
    {
      *int v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    uint64_t v6 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      int v7 = *(_DWORD *)(result + 16) - 1;
      unsigned int v8 = v7 & ((v6 >> 4) ^ (v6 >> 9));
      uint64_t v9 = *(void *)result + 16 * v8;
      uint64_t v10 = *(void *)v9;
      if (v6 != *(void *)v9)
      {
        uint64_t v11 = 0;
        int v12 = 1;
        while (v10 != -4096)
        {
          if (v11) {
            BOOL v13 = 0;
          }
          else {
            BOOL v13 = v10 == -8192;
          }
          if (v13) {
            uint64_t v11 = v9;
          }
          unsigned int v14 = v8 + v12++;
          unsigned int v8 = v14 & v7;
          uint64_t v9 = *(void *)result + 16 * (v14 & v7);
          uint64_t v10 = *(void *)v9;
          if (v6 == *(void *)v9) {
            goto LABEL_18;
          }
        }
        if (v11) {
          uint64_t v9 = v11;
        }
      }
LABEL_18:
      *(void *)uint64_t v9 = v6;
      *(_DWORD *)(v9 + 8) = *((_DWORD *)a2 + 2);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t sub_1CBAEE5C4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 32;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_15;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_12:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      int v7 = (void *)(v3 + 8 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_12;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1CBAEE668(uint64_t a1, unsigned int a2)
{
  v14[32] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x21)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    BOOL v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x20)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CBAEE7F0(a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  unsigned int v6 = v14;
  for (uint64_t i = 8; i != 264; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CBAEE7F0(a1, v14, v6);
}

uint64_t sub_1CBAEE7F0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 264);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      BOOL v11 = 0;
      uint64_t result = sub_1CBAEE5C4((uint64_t)v5, v10, &v11);
      uint64_t *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CBAEE8AC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC04D0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25F6BE8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC04D8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBAEE9A4;
    v5[1] = &PassRegistry;
    unint64_t v4 = v5;
    std::__call_once(&qword_1EBCC04D8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CBAEE9A4()
{
}

void sub_1CBAEEA40(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  uint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    unint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    int v5 = a1;
    free(v2);
    a1 = v5;
  }
  unint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    int v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBAEEAF4(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  unint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBAEEBA0()
{
  return "AGX3 Drop Stack Initializations of Zero";
}

void sub_1CBAEEBB0(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CBAEEC24(uint64_t a1, llvm::MachineFunction *a2)
{
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*((void *)a2 + 2) + 392)
    && (uint64_t v2 = a2,
        uint64_t v3 = *((void *)a2 + 7),
        uint64_t v4 = *(void *)a2,
        v4 == (*(uint64_t (**)(uint64_t))(**((void **)a2 + 43) + 560))(*((void *)a2 + 43)))
    && *(void *)(v3 + 48))
  {
    llvm::MachineFunction::RenumberBlocks(v2, 0);
    uint64_t v134 = 0;
    uint64_t v135 = 0;
    unsigned int v136 = 0;
    v140[0] = 0;
    v140[1] = 0;
    int v141 = 0;
    long long v138 = 0u;
    int v139 = 0;
    sub_1CBAEFCF8(&v138);
    sub_1CBAEFCF8(v140);
    long long v137 = (unint64_t)v2;
    uint64_t v7 = (*((void *)v2 + 14) - *((void *)v2 + 13)) >> 3;
    uint64_t v8 = v2;
    if (v7)
    {
      unint64_t v9 = (4 * (int)v7 / 3u + 1) | ((unint64_t)(4 * (int)v7 / 3u + 1) >> 1);
      unint64_t v10 = v9 | (v9 >> 2) | ((v9 | (v9 >> 2)) >> 4);
      unsigned int v11 = ((v10 | (v10 >> 8)) >> 16) | v10 | (v10 >> 8);
      uint64_t v8 = v2;
      if (v136 <= v11)
      {
        sub_1CBAEFFD8((uint64_t)&v134, v11 + 1);
        uint64_t v8 = (llvm::MachineFunction *)v137;
      }
    }
    int v129 = v2;
    uint64_t v12 = (char *)v8 + 320;
    uint64_t v13 = *((void *)v8 + 41);
    if ((llvm::MachineFunction *)v13 != (llvm::MachineFunction *)((char *)v8 + 320))
    {
      while (1)
      {
        std::string __dst = &unk_1F25F6D00;
        LOBYTE(v148) = 0;
        char v152 = 0;
        LOBYTE(v153) = 0;
        char v155 = 0;
        LOBYTE(v156) = 0;
        char v158 = 0;
        LOBYTE(v159) = 0;
        char v161 = 0;
        uint64_t v162 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v13 + 32) + 16) + 176))(*(void *)(*(void *)(v13 + 32) + 16));
        int v163 = v165;
        uint64_t v164 = 0x2000000000;
        std::string __dst = &unk_1F25F6CA8;
        int v166 = *(void *)(*(void *)(*(void *)(v13 + 32) + 56) + 48) >> 1;
        char v143 = 0;
        if ((sub_1CBAF00B4(v134, v136, v13, &v143) & 1) == 0) {
          break;
        }
LABEL_26:
        std::string __dst = &unk_1F25F6D00;
        if (v163 != v165) {
          free(v163);
        }
        if (v161)
        {
          if (v159 != &v160) {
            free(v159);
          }
          char v161 = 0;
        }
        if (v158)
        {
          if (v156 != &v157) {
            free(v156);
          }
          char v158 = 0;
        }
        if (v155)
        {
          if (v153 != &v154) {
            free(v153);
          }
          char v155 = 0;
        }
        if (v152 && v148 != &v150) {
          free(v148);
        }
        uint64_t v13 = *(void *)(v13 + 8);
        if ((char *)v13 == v12) {
          goto LABEL_47;
        }
      }
      int v14 = v136;
      if (4 * (int)v135 + 4 >= 3 * v136)
      {
        int v14 = 2 * v136;
      }
      else if (v136 + ~v135 - HIDWORD(v135) > v136 >> 3)
      {
LABEL_13:
        BOOL v15 = v143;
        LODWORD(v135) = v135 + 1;
        if (*v143 != (uint64_t *)-4096) {
          --HIDWORD(v135);
        }
        *char v143 = (uint64_t *)v13;
        v15[1] = (uint64_t *)&unk_1F25F6D00;
        *((unsigned char *)v15 + 16) = 0;
        *((unsigned char *)v15 + 88) = 0;
        if (v152) {
          sub_1CD41E8D8((uint64_t)(v15 + 2), (uint64_t)&v148);
        }
        *((unsigned char *)v15 + 96) = 0;
        *((unsigned char *)v15 + 168) = 0;
        if (v155) {
          sub_1CD41E8D8((uint64_t)(v15 + 12), (uint64_t)&v153);
        }
        *((unsigned char *)v15 + 176) = 0;
        *((unsigned char *)v15 + 248) = 0;
        if (v158) {
          sub_1CD41E8D8((uint64_t)(v15 + 22), (uint64_t)&v156);
        }
        *((unsigned char *)v15 + 256) = 0;
        *((unsigned char *)v15 + 328) = 0;
        if (v161) {
          sub_1CD41E8D8((uint64_t)(v15 + 32), (uint64_t)&v159);
        }
        v15[42] = (uint64_t *)v162;
        v15[43] = (uint64_t *)(v15 + 45);
        v15[44] = (uint64_t *)0x2000000000;
        if (v164) {
          sub_1CD41E954((uint64_t)(v15 + 43), (uint64_t)&v163);
        }
        v15[1] = (uint64_t *)&unk_1F25F6CA8;
        *((_DWORD *)v15 + 218) = v166;
        goto LABEL_26;
      }
      sub_1CBAEFFD8((uint64_t)&v134, v14);
      char v143 = 0;
      sub_1CBAF00B4(v134, v136, v13, &v143);
      goto LABEL_13;
    }
LABEL_47:
    unsigned int v16 = (void *)((char *)v2 + 320);
    uint64_t v17 = *((void *)v2 + 41);
    if ((llvm::MachineFunction *)v17 != (llvm::MachineFunction *)((char *)v2 + 320))
    {
      do
      {
        std::string __dst = 0;
        int v18 = sub_1CBAF1244(v134, v136, v17, &__dst);
        uint64_t v19 = (char *)__dst;
        if (!v18) {
          uint64_t v19 = (char *)(v134 + 880 * v136);
        }
        uint64_t v20 = *(void *)(v17 + 56);
        if (v20 != v17 + 48)
        {
          unint64_t v21 = v19 + 8;
          do
          {
            if ((*(unsigned char *)(*(void *)(v20 + 16) + 20) & 4) != 0) {
              (*(void (**)(char *, uint64_t))(*(void *)v21 + 48))(v21, v20);
            }
            if ((*(unsigned char *)v20 & 4) == 0)
            {
              while ((*(_WORD *)(v20 + 44) & 8) != 0)
                uint64_t v20 = *(void *)(v20 + 8);
            }
            uint64_t v20 = *(void *)(v20 + 8);
          }
          while (v20 != v17 + 48);
        }
        uint64_t v17 = *(void *)(v17 + 8);
      }
      while ((void *)v17 != v16);
    }
    uint64_t v22 = (void *)v137;
    uint64_t v23 = v137 + 320;
    int v130 = (void *)((char *)v2 + 320);
    if (*(void *)(v137 + 320) != (void)v137 + 320)
    {
      unsigned int v144 = 0;
      uint64_t v145 = 0;
      char v143 = &v144;
      uint64_t v24 = *(void *)(v137 + 328);
      if (v24 != v23)
      {
        for (uint64_t i = 0; ; uint64_t i = v144)
        {
          unsigned int v26 = *(_DWORD *)(v24 + 24);
          long long v27 = &v144;
          uint64_t v28 = &v144;
          if (i)
          {
            do
            {
              while (1)
              {
                uint64_t v28 = (uint64_t **)i;
                unsigned int v29 = *((_DWORD *)i + 8);
                if (v26 >= v29) {
                  break;
                }
                uint64_t i = *v28;
                long long v27 = v28;
                if (!*v28) {
                  goto LABEL_68;
                }
              }
              if (v29 >= v26) {
                goto LABEL_71;
              }
              uint64_t i = v28[1];
            }
            while (i);
            long long v27 = v28 + 1;
          }
LABEL_68:
          __n128 v30 = operator new(0x30uLL);
          v30[8] = v26;
          *((void *)v30 + 5) = v24;
          *(void *)__n128 v30 = 0;
          *((void *)v30 + 1) = 0;
          *((void *)v30 + 2) = v28;
          uint64_t *v27 = (uint64_t *)v30;
          if (*v143)
          {
            char v143 = (uint64_t **)*v143;
            __n128 v30 = *v27;
          }
          sub_1CB8358B8(v144, (uint64_t *)v30);
          ++v145;
LABEL_71:
          uint64_t v24 = *(void *)(v24 + 8);
          if (v24 == v23) {
            break;
          }
        }
        uint64_t v22 = (void *)v137;
      }
      uint64_t v31 = *(void *)(v22[7] + 48) >> 1;
      unint64_t v32 = ((v22[14] - v22[13]) >> 3);
      uint64_t v33 = (v31 + 63) >> 6;
      std::string __dst = &v149;
      HIDWORD(v148) = 6;
      if (v33 >= 7)
      {
        LODWORD(v148) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if ((v31 + 63) >> 6) {
        bzero(&v149, 8 * v33);
      }
      LODWORD(v148) = (v31 + 63) >> 6;
      unsigned int v151 = v31;
      sub_1CBAF12DC(v142, v32, (uint64_t)&__dst);
      if (__dst != &v149) {
        free(__dst);
      }
      for (uint64_t j = v145; v145; uint64_t j = v145)
      {
        unsigned int v35 = (uint64_t *)v143;
        uint64_t v36 = v143[1];
        uint64_t v37 = v143;
        if (v36)
        {
          do
          {
            uint64_t v38 = (uint64_t **)v36;
            uint64_t v36 = (uint64_t *)*v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            uint64_t v38 = (uint64_t **)v37[2];
            BOOL v47 = *v38 == (uint64_t *)v37;
            uint64_t v37 = v38;
          }
          while (!v47);
        }
        unint64_t v39 = v143[5];
        char v143 = v38;
        uint64_t v145 = j - 1;
        sub_1CB91F7C8(v144, v35);
        operator delete(v35);
        uint64_t v41 = (uint64_t *)v39[8];
        unsigned int v40 = (uint64_t *)v39[9];
        unsigned int v131 = v40;
        unsigned int v132 = v39;
        while (v41 != v40)
        {
          uint64_t v42 = *v41;
          int v43 = *((_DWORD *)v132 + 6);
          uint64_t v44 = v142[0];
          uint64_t v45 = v142[0] + 72 * v43;
          std::string __dst = &v149;
          uint64_t v148 = (void *)0x600000000;
          unint64_t v46 = *(unsigned int *)(v45 + 8);
          BOOL v47 = &__dst == (void **)v45 || v46 == 0;
          if (!v47)
          {
            if (v46 >= 7) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(&v149, *(const void **)v45, 8 * *(unsigned int *)(v45 + 8));
            LODWORD(v148) = v46;
          }
          uint64_t v48 = v44 + 72 * v43;
          unsigned int v50 = *(_DWORD *)(v48 + 64);
          uint64_t v49 = (unsigned int *)(v48 + 64);
          unsigned int v151 = v50;
          uint64_t v146 = 0;
          if (sub_1CBAF1244(v134, v136, v42, &v146)) {
            uint64_t v51 = v146;
          }
          else {
            uint64_t v51 = v134 + 880 * v136;
          }
          if (!*(unsigned char *)(v51 + 248)) {
            (*(void (**)(void))(*(void *)(v51 + 8) + 40))();
          }
          unsigned int v52 = *v49;
          unsigned int v53 = *(_DWORD *)(v51 + 240);
          if (*v49 < v53)
          {
            int v76 = *v49 & 0x3F;
            uint64_t v77 = *(unsigned int *)(v45 + 8);
            if (v76) {
              *(void *)(*(void *)v45 + 8 * v77 - 8) &= ~(-1 << v76);
            }
            unsigned int v78 = v77;
            unsigned int *v49 = v53;
            unsigned int v79 = v53 + 63;
            if (v77 != (v53 + 63) >> 6)
            {
              uint64_t v80 = v79 >> 6;
              if (v77 > v80)
              {
                *(_DWORD *)(v45 + 8) = v80;
                unsigned int v78 = v79 >> 6;
              }
              else
              {
                if (v80 > *(_DWORD *)(v45 + 12)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v80 != v77) {
                  bzero((void *)(*(void *)v45 + 8 * v77), 8 * (v80 - v77));
                }
                unsigned int v78 = v80;
                *(_DWORD *)(v45 + 8) = v80;
                unsigned int v53 = *v49;
              }
            }
            if ((v53 & 0x3F) != 0) {
              *(void *)(*(void *)v45 + 8 * v78 - 8) &= ~(-1 << (v53 & 0x3F));
            }
            unsigned int v52 = v53;
          }
          uint64_t v54 = *(unsigned int *)(v51 + 184);
          if (v54)
          {
            uint64_t v55 = *(uint64_t **)(v51 + 176);
            uint64_t v56 = *(void **)v45;
            do
            {
              uint64_t v57 = *v55++;
              *v56++ |= v57;
              --v54;
            }
            while (v54);
          }
          uint64_t v58 = v142[0] + 72 * *(int *)(v42 + 24);
          unsigned int v59 = *(_DWORD *)(v58 + 64);
          if (v52 < v59)
          {
            int v81 = v52 & 0x3F;
            uint64_t v82 = *(unsigned int *)(v45 + 8);
            if (v81) {
              *(void *)(*(void *)v45 + 8 * v82 - 8) &= ~(-1 << v81);
            }
            unsigned int v83 = v82;
            unsigned int *v49 = v59;
            unsigned int v84 = v59 + 63;
            if (v82 != (v59 + 63) >> 6)
            {
              uint64_t v85 = v84 >> 6;
              if (v82 > v85)
              {
                *(_DWORD *)(v45 + 8) = v85;
                unsigned int v83 = v84 >> 6;
              }
              else
              {
                if (v85 > *(_DWORD *)(v45 + 12)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v85 != v82) {
                  bzero((void *)(*(void *)v45 + 8 * v82), 8 * (v85 - v82));
                }
                unsigned int v83 = v85;
                *(_DWORD *)(v45 + 8) = v85;
                unsigned int v59 = *v49;
              }
            }
            if ((v59 & 0x3F) != 0) {
              *(void *)(*(void *)v45 + 8 * v83 - 8) &= ~(-1 << (v59 & 0x3F));
            }
          }
          else
          {
            unsigned int v59 = v52;
          }
          uint64_t v60 = *(unsigned int *)(v58 + 8);
          if (v60)
          {
            unint64_t v61 = *(uint64_t **)v58;
            uint64_t v62 = *(void **)v45;
            do
            {
              uint64_t v63 = *v61++;
              *v62++ |= v63;
              --v60;
            }
            while (v60);
          }
          int v64 = (uint64_t *)__dst;
          BOOL v65 = v151 != v59 || memcmp(__dst, *(const void **)v45, 8 * v148) != 0;
          if (v64 != &v149) {
            free(v64);
          }
          if (v65)
          {
            uint64_t v66 = (uint64_t *)v132[11];
            uint64_t v67 = v132[12];
            while (v66 != (uint64_t *)v67)
            {
              uint64_t v68 = *v66;
              unsigned int v69 = *(_DWORD *)(*v66 + 24);
              unsigned int v70 = (uint64_t *)operator new(0x30uLL);
              uint64_t v71 = v70;
              *((_DWORD *)v70 + 8) = v69;
              v70[5] = v68;
              int v72 = v144;
              unsigned int v73 = &v144;
              unint64_t v74 = &v144;
              if (v144)
              {
                while (1)
                {
                  while (1)
                  {
                    unint64_t v74 = (uint64_t **)v72;
                    unsigned int v75 = *((_DWORD *)v72 + 8);
                    if (v69 >= v75) {
                      break;
                    }
                    int v72 = (uint64_t *)*v72;
                    unsigned int v73 = v74;
                    if (!*v74) {
                      goto LABEL_126;
                    }
                  }
                  if (v75 >= v69) {
                    break;
                  }
                  int v72 = (uint64_t *)v72[1];
                  if (!v72)
                  {
                    unsigned int v73 = v74 + 1;
                    goto LABEL_126;
                  }
                }
                operator delete(v70);
              }
              else
              {
LABEL_126:
                *unsigned int v70 = 0;
                v70[1] = 0;
                v70[2] = (uint64_t)v74;
                llvm::MachineInstr *v73 = v70;
                if (*v143)
                {
                  char v143 = (uint64_t **)*v143;
                  uint64_t v71 = *v73;
                }
                sub_1CB8358B8(v144, v71);
                ++v145;
              }
              ++v66;
            }
          }
          ++v41;
          unsigned int v40 = v131;
        }
      }
      uint64_t v86 = v137 + 320;
      uint64_t v87 = *(void *)(v137 + 328);
      if (v87 != (void)v137 + 320)
      {
        do
        {
          std::string __dst = 0;
          if (sub_1CBAF1244(v134, v136, v87, &__dst)) {
            unsigned int v88 = (char *)__dst;
          }
          else {
            unsigned int v88 = (char *)(v134 + 880 * v136);
          }
          if (v88[168]) {
            llvm::report_fatal_error((llvm *)"This should only happen once", (const llvm::Twine *)1);
          }
          uint64_t v89 = v142[0];
          int v90 = *(_DWORD *)(v87 + 24);
          uint64_t v91 = v142[0] + 72 * v90;
          *((void *)v88 + 12) = v88 + 112;
          *((void *)v88 + 13) = 0x600000000;
          unint64_t v92 = *(unsigned int *)(v91 + 8);
          if (v88 + 96 != (char *)v91 && v92 != 0)
          {
            if (v92 >= 7) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v88 + 112, *(const void **)v91, 8 * *(unsigned int *)(v91 + 8));
            *((_DWORD *)v88 + 26) = v92;
          }
          *((_DWORD *)v88 + 40) = *(_DWORD *)(v89 + 72 * v90 + 64);
          v88[168] = 1;
          uint64_t v87 = *(void *)(v87 + 8);
        }
        while (v87 != v86);
      }
      std::string __dst = v142;
      sub_1CB837E88((void ***)&__dst);
      sub_1CD3C5048((uint64_t)&v143, v144);
      uint64_t v2 = v129;
      unsigned int v16 = v130;
    }
    uint64_t v94 = *((void *)v2 + 41);
    if ((void *)v94 != v16)
    {
      char v133 = 0;
      while (1)
      {
        std::string __dst = 0;
        if (sub_1CBAF1244(v134, v136, v94, &__dst)) {
          uint64_t v95 = (unsigned int *)__dst;
        }
        else {
          uint64_t v95 = (unsigned int *)(v134 + 880 * v136);
        }
        std::string __dst = &v149;
        uint64_t v148 = (void *)0x600000000;
        unint64_t v96 = v95[26];
        uint64_t v97 = (void **)(v95 + 24);
        if (v96) {
          BOOL v98 = &__dst == v97;
        }
        else {
          BOOL v98 = 1;
        }
        if (!v98)
        {
          if (v96 >= 7) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(&v149, *v97, 8 * v95[26]);
          LODWORD(v148) = v96;
        }
        unsigned int v151 = v95[40];
        uint64_t v99 = v95[88];
        if (v99) {
          break;
        }
LABEL_215:
        if (__dst != &v149) {
          free(__dst);
        }
        uint64_t v94 = *(void *)(v94 + 8);
        if ((void *)v94 == v130) {
          goto LABEL_220;
        }
      }
      uint64_t v100 = (char *)(v95 + 2);
      int v101 = (uint64_t *)*((void *)v95 + 43);
      uint64_t v102 = &v101[2 * v99];
      while (1)
      {
        unint64_t v103 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v100 + 16))(v100, v101[1]);
        if ((v104 & 0xFF00000000) != 0)
        {
          unint64_t v105 = v103;
          uint64_t v106 = *v101;
          unint64_t v107 = HIDWORD(v103);
          unsigned int v108 = v103 >> 6;
          if (v103 == HIDWORD(v103)) {
            goto LABEL_201;
          }
          unsigned int v109 = HIDWORD(v103) - 1;
          if (v108 > (HIDWORD(v103) - 1) >> 6) {
            goto LABEL_201;
          }
          uint64_t v110 = 0;
          uint64_t v111 = v109 >> 6;
          unint64_t v112 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v109;
          unint64_t v113 = (v103 & 0x3F) != 0 ? ~(0xFFFFFFFFFFFFFFFFLL >> -(v103 & 0x3F)) : -1;
          int v114 = ~(v108 << 6);
          uint64_t v115 = v111 - v108;
          while (1)
          {
            uint64_t v116 = v110 ? -1 : v113;
            unint64_t v117 = v115 == v110 ? v112 : -1;
            unint64_t v118 = v116 & v117 & *((void *)__dst + v108 + v110);
            if (v118) {
              break;
            }
            v114 -= 64;
            if (v115 + 1 == ++v110) {
              goto LABEL_201;
            }
          }
          if (__clz(__rbit64(v118)) == v114)
          {
LABEL_201:
            if ((*(unsigned char *)(*(void *)(v106 + 32)
                           + 32 * sub_1CBDA6464(**(unsigned __int16 **)(v106 + 16), 0x2Eu)
                           + 18) & 2) != 0)
            {
              llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v106);
              char v133 = 1;
              goto LABEL_207;
            }
          }
          if (v105 != v107)
          {
            if (v108 == v107 >> 6)
            {
              uint64_t v119 = (1 << SBYTE4(v105)) + (-1 << v105);
              unsigned int v120 = (char *)__dst + 8 * v108;
            }
            else
            {
              unint64_t v121 = __dst;
              *((void *)__dst + v108) |= -1 << v105;
              unsigned int v122 = (v105 + 63) & 0xFFFFFFC0;
              if (v122 + 64 <= v107)
              {
                do
                {
                  v121[v122 >> 6] = -1;
                  unsigned int v123 = v122 + 64;
                  unsigned int v124 = v122 + 128;
                  v122 += 64;
                }
                while (v124 <= v107);
              }
              else
              {
                unsigned int v123 = (v105 + 63) & 0xFFFFFFC0;
              }
              if (v123 >= v107) {
                goto LABEL_207;
              }
              uint64_t v119 = ~(-1 << SBYTE4(v105));
              unsigned int v120 = &v121[v123 >> 6];
            }
            *v120 |= v119;
          }
        }
LABEL_207:
        v101 += 2;
        if (v101 == v102) {
          goto LABEL_215;
        }
      }
    }
    char v133 = 0;
LABEL_220:
    sub_1CBAEFE80((uint64_t)v140);
    MEMORY[0x1D25D9CD0](v140[0], 8);
    sub_1CBAEFE80((uint64_t)&v138);
    MEMORY[0x1D25D9CD0](v138, 8);
    uint64_t v125 = v134;
    if (v136)
    {
      uint64_t v126 = v134 + 8;
      uint64_t v127 = 880 * v136;
      uint64_t v128 = v134 + 8;
      do
      {
        if ((*(void *)(v128 - 8) | 0x1000) != 0xFFFFFFFFFFFFF000) {
          (*(void (**)(uint64_t))(*(void *)v128 + 24))(v128);
        }
        v128 += 880;
        v126 += 880;
        v127 -= 880;
      }
      while (v127);
      uint64_t v125 = v134;
    }
    MEMORY[0x1D25D9CD0](v125, 8);
    char v5 = v133;
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

_DWORD *sub_1CBAEFC5C(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    uint64_t result = operator new(40 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 40 * v5;
      do
      {
        *(void *)uint64_t result = -4096;
        result += 10;
        v6 -= 40;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void sub_1CBAEFCF8(_DWORD *a1)
{
  int v1 = a1[2];
  if (v1 || a1[3])
  {
    uint64_t v2 = a1[4];
    if (v2 <= 4 * v1 || v2 < 0x41)
    {
      if (v2)
      {
        uint64_t v3 = 40 * v2;
        uint64_t v4 = *(void *)a1 + 24;
        do
        {
          uint64_t v5 = *(void *)(v4 - 24);
          if (v5 != -4096)
          {
            if (v5 != -8192)
            {
              uint64_t v6 = *(void **)(v4 - 16);
              if ((void *)v4 != v6)
              {
                unint64_t v9 = a1;
                uint64_t v7 = v4;
                uint64_t v8 = v3;
                free(v6);
                uint64_t v4 = v7;
                uint64_t v3 = v8;
                a1 = v9;
              }
            }
            *(void *)(v4 - 24) = -4096;
          }
          v4 += 40;
          v3 -= 40;
        }
        while (v3);
      }
      *((void *)a1 + 1) = 0;
    }
    else
    {
      sub_1CBAEFDCC(a1);
    }
  }
}

void sub_1CBAEFDCC(_DWORD *a1)
{
  int v2 = a1[2];
  sub_1CBAEFE80((uint64_t)a1);
  int v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64) {
    int v3 = 64;
  }
  if (v2) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4 == a1[4])
  {
    *((void *)a1 + 1) = 0;
    if (v4)
    {
      uint64_t v5 = *(void **)a1;
      uint64_t v6 = 40 * v4;
      do
      {
        *uint64_t v5 = -4096;
        v5 += 5;
        v6 -= 40;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)a1, 8);
    sub_1CBAEFC5C(a1, v4);
  }
}

void sub_1CBAEFE80(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 40 * v1;
    uint64_t v3 = *(void *)a1 + 24;
    do
    {
      uint64_t v4 = *(void *)(v3 - 24);
      if (v4 != -4096 && v4 != -8192)
      {
        uint64_t v5 = *(void **)(v3 - 16);
        if ((void *)v3 != v5)
        {
          uint64_t v6 = v3;
          uint64_t v7 = v2;
          free(v5);
          uint64_t v3 = v6;
          uint64_t v2 = v7;
        }
      }
      v3 += 40;
      v2 -= 40;
    }
    while (v2);
  }
}

uint64_t sub_1CBAEFEF4(uint64_t a1)
{
  *(void *)a1 = &unk_1F25F6D00;
  uint64_t v2 = *(void **)(a1 + 336);
  if (v2 != (void *)(a1 + 352)) {
    free(v2);
  }
  if (*(unsigned char *)(a1 + 320))
  {
    uint64_t v3 = *(void **)(a1 + 248);
    if (v3 != (void *)(a1 + 264)) {
      free(v3);
    }
    *(unsigned char *)(a1 + 320) = 0;
  }
  if (*(unsigned char *)(a1 + 240))
  {
    uint64_t v4 = *(void **)(a1 + 168);
    if (v4 != (void *)(a1 + 184)) {
      free(v4);
    }
    *(unsigned char *)(a1 + 240) = 0;
  }
  if (*(unsigned char *)(a1 + 160))
  {
    uint64_t v7 = *(void **)(a1 + 88);
    if (v7 != (void *)(a1 + 104)) {
      free(v7);
    }
    *(unsigned char *)(a1 + 160) = 0;
  }
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v6 = *(void **)(a1 + 8);
    if (v6 != (void *)(a1 + 24)) {
      free(v6);
    }
    *(unsigned char *)(a1 + 80) = 0;
  }
  return a1;
}

void *sub_1CBAEFFD8(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(880 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD41E6E0(a1, v4, v4 + 880 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 880 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 110;
      v11 -= 880;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CBAF00B4(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(a1 + 880 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      unsigned int v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          unsigned int v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        unint64_t v6 = (void *)(a1 + 880 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v8) {
        unint64_t v6 = v8;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t result = 0;
  }
  *a4 = v6;
  return result;
}

uint64_t sub_1CBAF0140(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_1F25F6D00;
  *(unsigned char *)(result + 8) = 0;
  *(unsigned char *)(result + 80) = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    uint64_t v2 = a2;
    uint64_t v6 = result;
    sub_1CD41E8D8(result + 8, a2 + 8);
    a2 = v2;
    uint64_t result = v6;
  }
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 160) = 0;
  if (*(unsigned char *)(a2 + 160))
  {
    uint64_t v3 = a2;
    uint64_t v7 = result;
    sub_1CD41E8D8(result + 88, a2 + 88);
    a2 = v3;
    uint64_t result = v7;
  }
  *(unsigned char *)(result + 168) = 0;
  *(unsigned char *)(result + 240) = 0;
  if (*(unsigned char *)(a2 + 240))
  {
    uint64_t v4 = a2;
    uint64_t v8 = result;
    sub_1CD41E8D8(result + 168, a2 + 168);
    a2 = v4;
    uint64_t result = v8;
  }
  *(unsigned char *)(result + 248) = 0;
  *(unsigned char *)(result + 320) = 0;
  if (*(unsigned char *)(a2 + 320))
  {
    uint64_t v5 = a2;
    uint64_t v9 = result;
    sub_1CD41E8D8(result + 248, a2 + 248);
    a2 = v5;
    uint64_t result = v9;
  }
  *(void *)(result + 328) = *(void *)(a2 + 328);
  *(void *)(result + 336) = result + 352;
  *(void *)(result + 344) = 0x2000000000;
  if (*(_DWORD *)(a2 + 344))
  {
    uint64_t v10 = result;
    sub_1CD41E954(result + 336, a2 + 336);
    return v10;
  }
  return result;
}

uint64_t sub_1CBAF0274(uint64_t a1)
{
  return *(unsigned int *)(a1 + 864);
}

uint64_t sub_1CBAF027C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  int v5 = sub_1CBC2D2EC(v4, (unint64_t)(a2 - *(void *)(v4 + 32)) >> 5, (void *)(*(void *)(a1 + 328) + 8));
  uint64_t v6 = sub_1CBE52E8C(**(unsigned __int16 **)(v4 + 16));
  int v8 = v5;
  uint64_t v9 = v6;
  uint64_t v10 = v4;
  if (sub_1CD41EA44((uint64_t)&v8)) {
    return sub_1CBAF0F6C(a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t sub_1CBAF0320(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (sub_1CBC2D2EC(v4, (unint64_t)(a2 - *(void *)(v4 + 32)) >> 5, (void *)(*(void *)(a1 + 328) + 8)) == 7)return sub_1CBAF0F6C(a1, a2); {
  uint64_t v5 = sub_1CBE52E8C(**(unsigned __int16 **)(v4 + 16));
  }
  if ((v5 & 0xFF00000000) == 0) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t result = 0;
  if (v6 == 193) {
    return sub_1CBAF0F6C(a1, a2);
  }
  return result;
}

void sub_1CBAF03C4(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 240) && !*(unsigned char *)(a1 + 320))
  {
    int v2 = (**(uint64_t (***)(uint64_t))a1)(a1);
    unsigned int v3 = v2 + 63;
    uint64_t v4 = (v2 + 63) >> 6;
    uint64_t v23 = v26;
    int v25 = 6;
    if ((v2 + 63) >= 0x1C0)
    {
      unsigned int v24 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v3 >= 0x40) {
      bzero(v26, 8 * v4);
    }
    unsigned int v24 = (v2 + 63) >> 6;
    int v27 = v2;
    if (*(unsigned char *)(a1 + 320))
    {
      sub_1CB837F14(a1 + 248, (uint64_t)&v23);
      *(_DWORD *)(a1 + 312) = v27;
    }
    else
    {
      *(void *)(a1 + 248) = a1 + 264;
      *(void *)(a1 + 256) = 0x600000000;
      if ((void **)(a1 + 248) != &v23 && v3 >= 0x40)
      {
        if (v3 >= 0x1C0) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(a1 + 264), v26, 8 * v4);
        *(_DWORD *)(a1 + 256) = (v2 + 63) >> 6;
        int v2 = v27;
        unsigned int v24 = 0;
      }
      *(_DWORD *)(a1 + 312) = v2;
      *(unsigned char *)(a1 + 320) = 1;
    }
    if (v23 != v26) {
      free(v23);
    }
    int v5 = (**(uint64_t (***)(uint64_t))a1)(a1);
    unsigned int v6 = v5 + 63;
    uint64_t v7 = (v5 + 63) >> 6;
    uint64_t v23 = v26;
    int v25 = 6;
    if ((v5 + 63) >= 0x1C0)
    {
      unsigned int v24 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v6 >= 0x40) {
      bzero(v26, 8 * v7);
    }
    unsigned int v24 = (v5 + 63) >> 6;
    int v27 = v5;
    int v8 = (void **)(a1 + 168);
    if (*(unsigned char *)(a1 + 240))
    {
      sub_1CB837F14(a1 + 168, (uint64_t)&v23);
      *(_DWORD *)(a1 + 232) = v27;
    }
    else
    {
      *(void *)(a1 + 168) = a1 + 184;
      *(void *)(a1 + 176) = 0x600000000;
      if (v8 != &v23 && v6 >= 0x40)
      {
        if (v6 >= 0x1C0) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(a1 + 184), v26, 8 * v7);
        *(_DWORD *)(a1 + 176) = (v5 + 63) >> 6;
        int v5 = v27;
        unsigned int v24 = 0;
      }
      *(_DWORD *)(a1 + 232) = v5;
      *(unsigned char *)(a1 + 240) = 1;
    }
    if (v23 != v26) {
      free(v23);
    }
    uint64_t v9 = *(unsigned int *)(a1 + 344);
    if (v9)
    {
      uint64_t v10 = *(void **)(a1 + 336);
      unsigned int v11 = &v10[2 * v9];
      do
      {
        uint64_t v12 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 16))(a1, v10[1]);
        if ((v13 & 0xFF00000000) != 0)
        {
          uint64_t v14 = v12;
          uint64_t v15 = *v10;
          if ((*(unsigned char *)(*(void *)(v15 + 32)
                         + 32 * sub_1CBDA6464(**(unsigned __int16 **)(*v10 + 16), 0x2Eu)
                         + 18) & 2) == 0
            && v14 != HIDWORD(v14))
          {
            unsigned int v16 = v14 >> 6;
            uint64_t v17 = -1 << v14;
            if (v14 >> 6 == HIDWORD(v14) >> 6)
            {
              uint64_t v18 = (1 << SBYTE4(v14)) + v17;
              uint64_t v19 = *v8;
            }
            else
            {
              uint64_t v19 = *v8;
              *((void *)*v8 + v16) |= v17;
              unsigned int v20 = (v14 + 63) & 0xFFFFFFC0;
              if (v20 + 64 <= HIDWORD(v14))
              {
                do
                {
                  v19[v20 >> 6] = -1;
                  unsigned int v21 = v20 + 64;
                  unsigned int v22 = v20 + 128;
                  v20 += 64;
                }
                while (v22 <= HIDWORD(v14));
              }
              else
              {
                unsigned int v21 = (v14 + 63) & 0xFFFFFFC0;
              }
              if (v21 >= HIDWORD(v14)) {
                goto LABEL_34;
              }
              uint64_t v18 = ~(-1 << SBYTE4(v14));
              unsigned int v16 = v21 >> 6;
            }
            v19[v16] |= v18;
          }
        }
LABEL_34:
        v10 += 2;
      }
      while (v10 != v11);
    }
  }
}

uint64_t sub_1CBAF0864(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40))
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    while ((sub_1CBC2D2EC(a2, v5, (void *)(*(void *)(a1 + 328) + 8)) & 0xFFFFFFFE) != 6)
    {
      ++v5;
      v4 += 32;
      if (v5 >= *(_DWORD *)(a2 + 40)) {
        goto LABEL_7;
      }
    }
    uint64_t v8 = *(void *)(a2 + 32) + v4;
    uint64_t v9 = a2;
    sub_1CBAF10A8(a1 + 336, &v9, &v8);
  }
LABEL_7:
  uint64_t result = sub_1CBE52E8C(**(unsigned __int16 **)(a2 + 16));
  if ((result & 0xFF00000000) != 0)
  {
    if ((int)result > 99)
    {
      if (result != 193 && result != 100) {
        return result;
      }
    }
    else if (result != 4 && result != 11)
    {
      return result;
    }
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v9 = a2;
    return sub_1CBAF10A8(a1 + 336, &v9, &v8);
  }
  return result;
}

void sub_1CBAF0954(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 240) && !*(unsigned char *)(a1 + 320))
  {
    int v2 = (**(uint64_t (***)(uint64_t))a1)(a1);
    unsigned int v3 = v2 + 63;
    uint64_t v4 = (v2 + 63) >> 6;
    uint64_t v36 = v39;
    int v38 = 6;
    if ((v2 + 63) >= 0x1C0)
    {
      unsigned int v37 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v3 >= 0x40) {
      bzero(v39, 8 * v4);
    }
    unsigned int v37 = (v2 + 63) >> 6;
    int v40 = v2;
    unsigned int v5 = (void **)(a1 + 248);
    if (*(unsigned char *)(a1 + 320))
    {
      sub_1CB837F14(a1 + 248, (uint64_t)&v36);
      *(_DWORD *)(a1 + 312) = v40;
    }
    else
    {
      *(void *)(a1 + 248) = a1 + 264;
      *(void *)(a1 + 256) = 0x600000000;
      if (v5 != &v36 && v3 >= 0x40)
      {
        if (v3 >= 0x1C0) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(a1 + 264), v39, 8 * v4);
        *(_DWORD *)(a1 + 256) = (v2 + 63) >> 6;
        int v2 = v40;
        unsigned int v37 = 0;
      }
      *(_DWORD *)(a1 + 312) = v2;
      *(unsigned char *)(a1 + 320) = 1;
    }
    if (v36 != v39) {
      free(v36);
    }
    int v6 = (**(uint64_t (***)(uint64_t))a1)(a1);
    unsigned int v7 = v6 + 63;
    uint64_t v8 = (v6 + 63) >> 6;
    uint64_t v36 = v39;
    int v38 = 6;
    if ((v6 + 63) >= 0x1C0)
    {
      unsigned int v37 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v7 >= 0x40) {
      bzero(v39, 8 * v8);
    }
    unsigned int v37 = (v6 + 63) >> 6;
    int v40 = v6;
    uint64_t v9 = (void **)(a1 + 168);
    if (*(unsigned char *)(a1 + 240))
    {
      sub_1CB837F14(a1 + 168, (uint64_t)&v36);
      *(_DWORD *)(a1 + 232) = v40;
    }
    else
    {
      *(void *)(a1 + 168) = a1 + 184;
      *(void *)(a1 + 176) = 0x600000000;
      if (v9 != &v36 && v7 >= 0x40)
      {
        if (v7 >= 0x1C0) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(a1 + 184), v39, 8 * v8);
        *(_DWORD *)(a1 + 176) = (v6 + 63) >> 6;
        int v6 = v40;
        unsigned int v37 = 0;
      }
      *(_DWORD *)(a1 + 232) = v6;
      *(unsigned char *)(a1 + 240) = 1;
    }
    if (v36 != v39) {
      free(v36);
    }
    uint64_t v10 = *(unsigned int *)(a1 + 344);
    if (v10)
    {
      uint64_t v11 = *(void *)(a1 + 336);
      uint64_t v12 = v11 + 16 * v10;
      do
      {
        uint64_t v13 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 8))(a1, *(void *)(v11 + 8));
        if ((v14 & 0xFF00000000) != 0)
        {
          if (v14)
          {
            if (HIDWORD(v13) != v13)
            {
              int v24 = 0;
              do
              {
                if ((v14 >> v24)) {
                  *((void *)*v5 + ((v13 + v24) >> 6)) |= 1 << (v13
                }
                                                                               + v24);
                ++v24;
              }
              while (HIDWORD(v13) - v13 != v24);
            }
            goto LABEL_41;
          }
          if (HIDWORD(v13) != v13)
          {
            unsigned int v15 = v13 >> 6;
            if (v13 >> 6 == HIDWORD(v13) >> 6)
            {
              uint64_t v16 = (1 << SBYTE4(v13)) + (-1 << v13);
              uint64_t v17 = *v5;
            }
            else
            {
              uint64_t v17 = *v5;
              *((void *)*v5 + v15) |= -1 << v13;
              unsigned int v28 = (v13 + 63) & 0xFFFFFFC0;
              if (v28 + 64 <= HIDWORD(v13))
              {
                do
                {
                  v17[v28 >> 6] = -1;
                  unsigned int v29 = v28 + 64;
                  unsigned int v31 = v28 + 128;
                  v28 += 64;
                }
                while (v31 <= HIDWORD(v13));
              }
              else
              {
                unsigned int v29 = (v13 + 63) & 0xFFFFFFC0;
              }
              if (v29 >= HIDWORD(v13)) {
                goto LABEL_41;
              }
              uint64_t v16 = ~(-1 << SBYTE4(v13));
              unsigned int v15 = v29 >> 6;
            }
            uint64_t v18 = &v17[v15];
            goto LABEL_40;
          }
        }
        else
        {
          uint64_t v19 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 16))(a1, *(void *)(v11 + 8));
          if (v19 != HIDWORD(v19))
          {
            unsigned int v20 = v19 >> 6;
            uint64_t v21 = -1 << v19;
            if (v19 >> 6 == HIDWORD(v19) >> 6)
            {
              uint64_t v22 = ~((1 << SBYTE4(v19)) + v21);
              uint64_t v23 = (char *)*v5 + 8 * v20;
              goto LABEL_37;
            }
            unint64_t v32 = *v5;
            *((void *)*v5 + v20) &= ~(-1 << v19);
            unsigned int v33 = (v19 + 63) & 0xFFFFFFC0;
            if (v33 + 64 <= HIDWORD(v19))
            {
              do
              {
                v32[v33 >> 6] = 0;
                unsigned int v34 = v33 + 64;
                unsigned int v35 = v33 + 128;
                v33 += 64;
              }
              while (v35 <= HIDWORD(v19));
            }
            else
            {
              unsigned int v34 = (v19 + 63) & 0xFFFFFFC0;
            }
            if (v34 < HIDWORD(v19))
            {
              uint64_t v22 = -1 << SBYTE4(v19);
              uint64_t v23 = &v32[v34 >> 6];
LABEL_37:
              *v23 &= v22;
            }
            if (v20 == HIDWORD(v19) >> 6)
            {
              uint64_t v16 = (1 << SBYTE4(v19)) + v21;
              uint64_t v18 = (char *)*v9 + 8 * v20;
            }
            else
            {
              int v25 = *v9;
              *((void *)*v9 + v20) |= v21;
              unsigned int v26 = (v19 + 63) & 0xFFFFFFC0;
              if (v26 + 64 <= HIDWORD(v19))
              {
                do
                {
                  v25[v26 >> 6] = -1;
                  unsigned int v27 = v26 + 64;
                  unsigned int v30 = v26 + 128;
                  v26 += 64;
                }
                while (v30 <= HIDWORD(v19));
              }
              else
              {
                unsigned int v27 = (v19 + 63) & 0xFFFFFFC0;
              }
              if (v27 >= HIDWORD(v19)) {
                goto LABEL_41;
              }
              uint64_t v16 = ~(-1 << SBYTE4(v19));
              uint64_t v18 = &v25[v27 >> 6];
            }
LABEL_40:
            *v18 |= v16;
          }
        }
LABEL_41:
        v11 += 16;
      }
      while (v11 != v12);
    }
  }
}

uint64_t sub_1CBAF0F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  int v5 = sub_1CBC2D2EC(v4, (unint64_t)(a2 - *(void *)(v4 + 32)) >> 5, (void *)(*(void *)(a1 + 328) + 8));
  uint64_t v6 = sub_1CBE52E8C(**(unsigned __int16 **)(v4 + 16));
  if ((v5 - 8) > 0xFFFFFFFD || (v6 & 0xFF00000000) == 0)
  {
    if (*(unsigned char *)a2 == 7) {
      unsigned int v8 = *(_DWORD *)(a2 + 4);
    }
    else {
      unsigned int v8 = *(_DWORD *)(a2 + 16);
    }
    uint64_t v10 = *(void *)(v4 + 48);
    if ((v10 & 7) != 0)
    {
      unint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v4 + 48) = v10 & 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v15 = *(void *)(v11 + 24);
    uint64_t v14 = (unint64_t *)(v11 + 24);
    if ((v15 & 0xFFFFFFFFFFFFFFF9) != 0)
    {
      unint64_t v17 = sub_1CB8F1DC4(v14) + 7;
      if (v16 == 1) {
      uint64_t v18 = (v17 >> 4) & 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v18) = 0x7FFFFFFF;
    }
    uint64_t v13 = v18 + v8;
    uint64_t v12 = v8;
  }
  else
  {
    if ((int)v6 > 99)
    {
      if (v6 != 100 && v6 != 193) {
        goto LABEL_28;
      }
    }
    else if (v6 != 4 && v6 != 11)
    {
LABEL_28:
      llvm::report_fatal_error((llvm *)"Unexpected Opcode", (const llvm::Twine *)1);
    }
    uint64_t v12 = 0;
    uint64_t v13 = *(unsigned int *)(a1 + 864);
  }
  return v12 | (v13 << 32);
}

uint64_t sub_1CBAF10A8(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
    return sub_1CBAF10E4(a1, a2, a3);
  }
  uint64_t v4 = *(void *)a1;
  int v5 = (void *)(*(void *)a1 + 16 * v3);
  *int v5 = *a2;
  v5[1] = *a3;
  unsigned int v6 = v3 + 1;
  *(_DWORD *)(a1 + 8) = v6;
  return v4 + 16 * v6 - 16;
}

uint64_t sub_1CBAF10E4(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v5 = (void *)(*(void *)a1 + 16 * v4);
  *int v5 = *a2;
  v5[1] = v3;
  LODWORD(v5) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  return *(void *)a1 + 16 * v5 - 16;
}

uint64_t sub_1CBAF1160(uint64_t a1)
{
  *(void *)a1 = &unk_1F25F6D00;
  int v2 = *(void **)(a1 + 336);
  if (v2 != (void *)(a1 + 352)) {
    free(v2);
  }
  if (*(unsigned char *)(a1 + 320))
  {
    uint64_t v3 = *(void **)(a1 + 248);
    if (v3 != (void *)(a1 + 264)) {
      free(v3);
    }
    *(unsigned char *)(a1 + 320) = 0;
  }
  if (*(unsigned char *)(a1 + 240))
  {
    unsigned int v4 = *(void **)(a1 + 168);
    if (v4 != (void *)(a1 + 184)) {
      free(v4);
    }
    *(unsigned char *)(a1 + 240) = 0;
  }
  if (*(unsigned char *)(a1 + 160))
  {
    unsigned int v7 = *(void **)(a1 + 88);
    if (v7 != (void *)(a1 + 104)) {
      free(v7);
    }
    *(unsigned char *)(a1 + 160) = 0;
  }
  if (*(unsigned char *)(a1 + 80))
  {
    unsigned int v6 = *(void **)(a1 + 8);
    if (v6 != (void *)(a1 + 24)) {
      free(v6);
    }
    *(unsigned char *)(a1 + 80) = 0;
  }
  return a1;
}

uint64_t sub_1CBAF1244(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unsigned int v6 = (void *)(a1 + 880 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        unsigned int v6 = (void *)(a1 + 880 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        unsigned int v6 = v10;
      }
    }
  }
  else
  {
    unsigned int v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

void *sub_1CBAF12DC(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL) {
      abort();
    }
    uint64_t v5 = 9 * a2;
    uint64_t v6 = 72 * a2;
    uint64_t v7 = operator new(72 * a2);
    *a1 = v7;
    a1[1] = v7;
    uint64_t v8 = (char *)&v7[v5];
    a1[2] = v8;
    do
    {
      *uint64_t v7 = v7 + 2;
      v7[1] = 0x600000000;
      if (v7 != (void *)a3)
      {
        unint64_t v9 = *(unsigned int *)(a3 + 8);
        if (*(_DWORD *)(a3 + 8))
        {
          if (v9 >= 7) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v7 + 2, *(const void **)a3, 8 * *(unsigned int *)(a3 + 8));
          *((_DWORD *)v7 + 2) = v9;
        }
      }
      *((_DWORD *)v7 + 16) = *(_DWORD *)(a3 + 64);
      v7 += 9;
      v6 -= 72;
    }
    while (v6);
    a1[1] = v8;
  }
  return a1;
}

uint64_t sub_1CBAF13E8(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v5) {
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 8 * v5), (const void *)(*(void *)a2 + 8 * v5), *(void *)a2 + 8 * v6 - (*(void *)a2 + 8 * v5));
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1CBAF14B8()
{
}

void sub_1CBAF14F4()
{
}

void sub_1CBAF158C()
{
}

void sub_1CBAF1630(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  uint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  int v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBAF16E4(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  int v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBAF1790()
{
  return "AGX3 expand pseudo inst pass";
}

uint64_t sub_1CBAF17A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v1100 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 248) = (*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8), *(void *)a2);
  *(void *)(v3 + 256) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  *(void *)(v3 + 264) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  *(void *)(v3 + 272) = *(void *)(a2 + 40);
  *(void *)(v3 + 280) = *(void *)(a2 + 344);
  *(_DWORD *)(v3 + 288) = 16843009;
  *(unsigned char *)(v3 + 292) = 0;
  uint64_t v4 = (llvm::MachineBasicBlock *)(a2 + 320);
  uint64_t v1011 = a2;
  uint64_t v5 = *(llvm::MachineBasicBlock **)(a2 + 320);
  uint64_t v1016 = v4;
  uint64_t v1041 = v3;
  if (v5 == v4)
  {
    char v1015 = 0;
    goto LABEL_580;
  }
  char v1015 = 0;
  do
  {
    v1068[0] = &v1069;
    v1068[1] = (void *)0x800000000;
    size_t __sz = *((void *)v5 + 4);
    uint64_t v6 = *((void *)v5 + 7);
    uint64_t v7 = *(void *)(v3 + 264);
    uint64_t v1096 = 0x600000000;
    v1095.i64[1] = (uint64_t)v1097;
    v1095.i64[0] = v7;
    int v8 = *(_DWORD *)(v7 + 44);
    int v1099 = v8;
    unsigned int v9 = v8 + 63;
    if ((v8 + 63) < 0x40)
    {
      unsigned int v11 = 0;
    }
    else
    {
      uint64_t v10 = v9 >> 6;
      if (v9 >= 0x1C0) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      bzero(v1097, 8 * v10);
      unsigned int v11 = v10;
      LODWORD(v1096) = v10;
    }
    if ((v8 & 0x3F) != 0) {
      v1097[v11 - 1] &= ~(-1 << (v8 & 0x3F));
    }
    unint64_t v12 = (unint64_t)v5 + 48;
    llvm::LiveRegUnits::addLiveOuts((llvm::LiveRegUnits *)&v1095, v5);
    if (v1095.i64[0]) {
      unsigned int v13 = (void *)(v1095.i64[0] + 8);
    }
    else {
      unsigned int v13 = 0;
    }
    unint64_t v14 = *(unsigned int *)(*v13 + 6424);
    uint64_t v15 = (_WORD *)(v13[6] + ((v14 >> 3) & 0x1FFFFFFE));
    __int16 v17 = *v15;
    uint64_t v16 = v15 + 1;
    unsigned __int16 v18 = v17 + 267 * (v14 & 0xF);
    do
    {
      uint64_t v19 = (1 << v18) & *(void *)(v1095.i64[1] + 8 * (v18 >> 6));
      if (v19) {
        break;
      }
      int v20 = *v16++;
      v18 += v20;
    }
    while (v20);
    if (v12 == v6)
    {
      char v21 = 0;
      goto LABEL_568;
    }
    char v21 = 0;
    uint64_t v1033 = __sz + 320;
    uint64_t v1039 = (unint64_t *)((char *)v5 + 48);
    do
    {
      unint64_t v22 = v12;
      while (1)
      {
        unint64_t v12 = *(void *)v22 & 0xFFFFFFFFFFFFFFF8;
        if (v12)
        {
          unint64_t v23 = *(void *)v22 & 0xFFFFFFFFFFFFFFF8;
          if ((*(unsigned char *)v12 & 4) != 0) {
            goto LABEL_23;
          }
        }
        else
        {
          unint64_t v23 = 0;
        }
        while ((*(_WORD *)(v23 + 44) & 4) != 0)
          unint64_t v23 = *(void *)v23 & 0xFFFFFFFFFFFFFFF8;
LABEL_23:
        if (**(_WORD **)(v23 + 16) == 264) {
          break;
        }
        llvm::LiveRegUnits::stepBackward((llvm::LiveRegUnits *)&v1095, (const llvm::MachineInstr *)v23);
        unint64_t v22 = *(void *)v22 & 0xFFFFFFFFFFFFFFF8;
        if (!v22 || (*(unsigned char *)v22 & 4) == 0)
        {
          while ((*(_WORD *)(v22 + 44) & 4) != 0)
            unint64_t v22 = *(void *)v22 & 0xFFFFFFFFFFFFFFF8;
        }
        if (v22 == v6) {
          goto LABEL_568;
        }
      }
      if (v19)
      {
        uint64_t v24 = v1095.i64[1];
        if (v1095.i64[0]) {
          int v25 = (void *)(v1095.i64[0] + 8);
        }
        else {
          int v25 = 0;
        }
        unint64_t v26 = *(unsigned int *)(*v25 + 6424);
        unsigned int v27 = (unsigned __int16 *)(v25[6] + ((v26 >> 3) & 0x1FFFFFFE));
        int v29 = *v27;
        unsigned int v28 = v27 + 1;
        int v30 = v29 + 267 * (v26 & 0xF);
        unsigned int v31 = v28;
        unsigned __int16 v32 = v30;
        size_t v33 = __sz;
        while (((*(void *)(v1095.i64[1] + 8 * (v32 >> 6)) >> v32) & 1) == 0)
        {
          int v34 = *v31++;
          v32 += v34;
          if (!v34)
          {
            do
            {
              *(void *)(v24 + 8 * ((unsigned __int16)v30 >> 6)) |= 1 << v30;
              int v35 = *v28++;
              v30 += v35;
            }
            while (v35);
            unint64_t v12 = *(void *)v22 & 0xFFFFFFFFFFFFFFF8;
            break;
          }
        }
        if (!v12)
        {
LABEL_46:
          while ((*(_WORD *)(v12 + 44) & 4) != 0)
            unint64_t v12 = *(void *)v12 & 0xFFFFFFFFFFFFFFF8;
          goto LABEL_47;
        }
      }
      else
      {
        size_t v33 = __sz;
        if (!v12) {
          goto LABEL_46;
        }
      }
      if ((*(unsigned char *)v12 & 4) == 0) {
        goto LABEL_46;
      }
LABEL_47:
      uint64_t v1027 = v19;
      if (LODWORD(v1068[1]) >= (unint64_t)HIDWORD(v1068[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v1068[0] + LODWORD(v1068[1])) = v12;
      ++LODWORD(v1068[1]);
      uint64_t v36 = (const llvm::BasicBlock *)*((void *)v5 + 2);
      unsigned int v37 = *(llvm::MachineBasicBlock **)(v33 + 312);
      if (v37)
      {
        *(void *)(v33 + 312) = *(void *)v37;
      }
      else
      {
        *(void *)(v33 + 208) += 232;
        uint64_t v38 = *(void *)(v33 + 128);
        if (((v38 + 7) & 0xFFFFFFFFFFFFFFF8) - v38 + 232 > *(void *)(v33 + 136) - v38)
        {
          unsigned int v323 = *(_DWORD *)(v33 + 152) >> 7;
          if (v323 >= 0x1E) {
            LOBYTE(v323) = 30;
          }
          size_t v324 = v33;
          uint64_t v325 = 4096 << v323;
          unsigned int v37 = (llvm::MachineBasicBlock *)operator new(4096 << v323, (std::align_val_t)8uLL);
          unint64_t v326 = *(unsigned int *)(v324 + 152);
          if (v326 >= *(unsigned int *)(v324 + 156)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(__sz + 144) + 8 * v326) = v37;
          ++*(_DWORD *)(__sz + 152);
          uint64_t v327 = (char *)v37 + v325;
          size_t v33 = __sz;
          *(void *)(__sz + 128) = (char *)v37 + 232;
          *(void *)(__sz + 136) = v327;
        }
        else
        {
          unsigned int v37 = (llvm::MachineBasicBlock *)((v38 + 7) & 0xFFFFFFFFFFFFFFF8);
          *(void *)(v33 + 128) = (char *)v37 + 232;
        }
      }
      llvm::MachineBasicBlock::MachineBasicBlock(v37, (llvm::MachineFunction *)v33, v36);
      unint64_t v39 = (llvm::MachineBasicBlock **)*((void *)v5 + 1);
      llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v1033, (uint64_t)v37);
      int v40 = *v39;
      *(void *)unsigned int v37 = *v39;
      *((void *)v37 + 1) = v39;
      *((void *)v40 + 1) = v37;
      *unint64_t v39 = v37;
      if ((unint64_t *)v22 != v1039)
      {
        uint64_t v41 = (unint64_t *)*((void *)v37 + 7);
        if (v41 != v1039)
        {
          if (v37 != v5)
          {
            unint64_t v320 = *((void *)v37 + 5);
            unsigned int v321 = (unint64_t *)v22;
            do
            {
              v321[3] = v320;
              unsigned int v321 = (unint64_t *)v321[1];
            }
            while (v321 != v1039);
          }
          unint64_t v42 = *v1039;
          unint64_t v43 = *v1039 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v44 = *(void *)v22 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v44 + 8) = v1039;
          *uint64_t v1039 = v44 | v42 & 7;
          unint64_t v45 = *v41 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v43 + 8) = v41;
          *(void *)unint64_t v22 = v45 | *(void *)v22 & 7;
          *(void *)(v45 + 8) = v22;
          *uint64_t v41 = v42 & 0xFFFFFFFFFFFFFFF8 | *v41 & 7;
        }
      }
      llvm::MachineBasicBlock::transferSuccessorsAndUpdatePHIs((unsigned int *)v37, v5);
      unint64_t v46 = (const llvm::BasicBlock *)*((void *)v5 + 2);
      BOOL v47 = *(llvm::MachineBasicBlock **)(v33 + 312);
      if (v47)
      {
        *(void *)(v33 + 312) = *(void *)v47;
      }
      else
      {
        *(void *)(v33 + 208) += 232;
        uint64_t v48 = *(void *)(v33 + 128);
        if (((v48 + 7) & 0xFFFFFFFFFFFFFFF8) - v48 + 232 > *(void *)(v33 + 136) - v48)
        {
          unsigned int v328 = *(_DWORD *)(v33 + 152) >> 7;
          if (v328 >= 0x1E) {
            LOBYTE(v328) = 30;
          }
          size_t v329 = v33;
          uint64_t v330 = 4096 << v328;
          BOOL v47 = (llvm::MachineBasicBlock *)operator new(4096 << v328, (std::align_val_t)8uLL);
          unint64_t v331 = *(unsigned int *)(v329 + 152);
          if (v331 >= *(unsigned int *)(v329 + 156)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(__sz + 144) + 8 * v331) = v47;
          ++*(_DWORD *)(__sz + 152);
          BOOL v332 = (char *)v47 + v330;
          size_t v33 = __sz;
          *(void *)(__sz + 128) = (char *)v47 + 232;
          *(void *)(__sz + 136) = v332;
        }
        else
        {
          BOOL v47 = (llvm::MachineBasicBlock *)((v48 + 7) & 0xFFFFFFFFFFFFFFF8);
          *(void *)(v33 + 128) = (char *)v47 + 232;
        }
      }
      llvm::MachineBasicBlock::MachineBasicBlock(v47, (llvm::MachineFunction *)v33, v46);
      llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v1033, (uint64_t)v47);
      uint64_t v49 = *(void *)v37;
      *(void *)BOOL v47 = *(void *)v37;
      *((void *)v47 + 1) = v37;
      *(void *)(v49 + 8) = v47;
      *(void *)unsigned int v37 = v47;
      llvm::MachineBasicBlock::addSuccessor(v5, v47, 0);
      llvm::MachineBasicBlock::addSuccessor(v47, v47, 0);
      llvm::MachineBasicBlock::addSuccessor(v47, v37, 0x80000000);
      llvm::MachineBasicBlock::addSuccessor(v5, v37, 0x80000000);
      unsigned int v1028 = *(llvm::MachineFunction **)(v1041 + 264);
      uint64_t v50 = *(void *)(v12 + 24);
      long long v1066 = 0u;
      long long v1067 = 0u;
      long long v1064 = 0u;
      long long v1065 = 0u;
      uint64_t v51 = *(void *)(v50 + 32);
      uint64_t v1063 = &unk_1F261CD58;
      *(void *)&long long v1064 = v51;
      *(void *)&long long v1065 = *(void *)(v51 + 40);
      *((void *)&v1064 + 1) = (*(uint64_t (**)(void))(**(void **)(v51 + 16) + 104))(*(void *)(v51 + 16));
      v1060 = 0;
      if (*((void *)&v1065 + 1))
      {
        int v230 = **((unsigned char **)&v1065 + 1);
        if ((v230 - 4) > 0x1E)
        {
          if ((v230 - 3) >= 0xFFFFFFFE) {
            uint64_t v322 = *((void *)&v1065 + 1);
          }
          else {
            uint64_t v322 = 0;
          }
          if ((v230 - 3) <= 0xFFFFFFFD)
          {
            if (v230 == 3) {
              *(void *)(*((void *)&v1065 + 1) + 8) = 0;
            }
            goto LABEL_59;
          }
          unint64_t v232 = v322 + 8;
        }
        else
        {
          if ((*(unsigned char *)(*((void *)&v1065 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v1065 + 1) + 12)) {
            goto LABEL_59;
          }
          uint64_t v231 = *(void *)(*((void *)&v1065 + 1) + 16);
          if ((v231 & 4) == 0) {
            goto LABEL_59;
          }
          unint64_t v232 = v231 & 0xFFFFFFFFFFFFFFF8;
          if (!v232) {
            goto LABEL_59;
          }
        }
        v1051.i64[0] = (uint64_t)&v1065 + 8;
        sub_1CC5FA668(v232 + 16, &v1051);
        *((void *)&v1065 + 1) = v1060;
        if (v1060) {
          llvm::MetadataTracking::retrack((uint64_t)&v1060, (unsigned __int8 *)v1060, (uint64_t)&v1065 + 8);
        }
      }
      else
      {
LABEL_59:
        *((void *)&v1065 + 1) = 0;
      }
      *(void *)&long long v1067 = 0;
      *((void *)&v1066 + 1) = v12;
      *(void *)&long long v1066 = *(void *)(v12 + 24);
      *((void *)&v1066 + 1) = v12;
      if ((long long *)(v12 + 56) != (long long *)((char *)&v1065 + 8))
      {
        if (!*((void *)&v1065 + 1)) {
          goto LABEL_62;
        }
        int v317 = **((unsigned char **)&v1065 + 1);
        if ((v317 - 4) <= 0x1E)
        {
          if ((*(unsigned char *)(*((void *)&v1065 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v1065 + 1) + 12)) {
            goto LABEL_62;
          }
          uint64_t v318 = *(void *)(*((void *)&v1065 + 1) + 16);
          if ((v318 & 4) == 0) {
            goto LABEL_62;
          }
          unint64_t v319 = v318 & 0xFFFFFFFFFFFFFFF8;
          if (!v319) {
            goto LABEL_62;
          }
          goto LABEL_386;
        }
        if ((v317 - 3) >= 0xFFFFFFFE) {
          uint64_t v333 = *((void *)&v1065 + 1);
        }
        else {
          uint64_t v333 = 0;
        }
        if ((v317 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v319 = v333 + 8;
LABEL_386:
          v1051.i64[0] = (uint64_t)&v1065 + 8;
          sub_1CC5FA668(v319 + 16, &v1051);
          goto LABEL_62;
        }
        if (v317 == 3) {
          *(void *)(*((void *)&v1065 + 1) + 8) = 0;
        }
LABEL_62:
        unsigned int v52 = *(unsigned __int8 **)(v12 + 56);
        *((void *)&v1065 + 1) = v52;
        if (v52) {
          llvm::MetadataTracking::track((uint64_t)&v1065 + 8, v52, 2);
        }
      }
      uint64_t v53 = v1064;
      v1046[0] = v12;
      uint64_t v54 = *(void *)(v12 + 48);
      if ((v54 & 7) != 0)
      {
        unint64_t v55 = *(void *)((v54 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        unint64_t v55 = v54 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v12 + 48) = v54 & 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v56 = *(void *)(*(void *)(v12 + 32)
                      + 32 * sub_1CBDA6464(**(unsigned __int16 **)(v12 + 16), 0xEu)
                      + 16);
      uint64_t v1019 = (llvm::MachineMemOperand *)v55;
      unint64_t MachineMemOperand = llvm::MachineFunction::getMachineMemOperand(v53, v55, v56 / 8, 65);
      v1060 = v1046;
      uint64_t v1061 = v53;
      unint64_t v1062 = MachineMemOperand;
      uint64_t v58 = v1046[0];
      unsigned int v59 = (int *)(*(void *)(v58 + 32)
                  + 32 * sub_1CBDA6464(**(unsigned __int16 **)(v1046[0] + 16), 0xAu));
      int v1018 = v59[4];
      if ((v1018 - 81) > 4)
      {
        unsigned int v1017 = 0;
      }
      else
      {
        int v61 = *v59;
        int v60 = v59[1];
        if ((_BYTE)v61) {
          unsigned int v62 = (v61 << 14) & 0x80000000;
        }
        else {
          unsigned int v62 = 0;
        }
        unsigned int v1017 = v62 | v60;
      }
      *(void *)&long long v1066 = v5;
      *((void *)&v1066 + 1) = (char *)v5 + 48;
      uint64_t v63 = (llvm::MachineFunction *)v1064;
      uint64_t v64 = *(void *)(*((void *)&v1064 + 1) + 8);
      uint64_t v1048 = (void *)*((void *)&v1065 + 1);
      if (*((void *)&v1065 + 1)) {
        llvm::MetadataTracking::track((uint64_t)&v1048, *((unsigned __int8 **)&v1065 + 1), 2);
      }
      MachineInstr = llvm::MachineFunction::CreateMachineInstr(v63, v64 + 26304, (unsigned __int8 **)&v1048, 0);
      if (v1048)
      {
        int v335 = *(unsigned __int8 *)v1048;
        if ((v335 - 4) > 0x1E)
        {
          if ((v335 - 3) >= 0xFFFFFFFE) {
            unsigned int v371 = v1048;
          }
          else {
            unsigned int v371 = 0;
          }
          if ((v335 - 3) < 0xFFFFFFFE)
          {
            if (v335 == 3) {
              *((void *)v1048 + 1) = 0;
            }
            goto LABEL_74;
          }
          unint64_t v337 = (unint64_t)v371 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1048 + 1) & 0x7F) != 2 && !*((_DWORD *)v1048 + 3)) {
            goto LABEL_74;
          }
          uint64_t v336 = *((void *)v1048 + 2);
          if ((v336 & 4) == 0) {
            goto LABEL_74;
          }
          unint64_t v337 = v336 & 0xFFFFFFFFFFFFFFF8;
          if (!v337) {
            goto LABEL_74;
          }
        }
        v1051.i64[0] = (uint64_t)&v1048;
        sub_1CC5FA668(v337 + 16, &v1051);
      }
LABEL_74:
      uint64_t v66 = (unint64_t *)*((void *)&v1066 + 1);
      uint64_t v67 = *(void *)(v1066 + 40);
      *((void *)MachineInstr + 3) = v67;
      uint64_t v68 = *(void *)(v67 + 32);
      uint64_t v69 = *((unsigned int *)MachineInstr + 10);
      if (v69)
      {
        uint64_t v233 = *((void *)MachineInstr + 4);
        uint64_t v234 = *(void *)(v68 + 40);
        uint64_t v235 = 32 * v69;
        do
        {
          if (!*(unsigned char *)v233)
          {
            uint64_t v236 = *(unsigned int *)(v233 + 4);
            if ((int)v236 >= 0) {
              unint64_t v237 = (uint64_t *)(*(void *)(v234 + 272) + 8 * v236);
            }
            else {
              unint64_t v237 = (uint64_t *)(*(void *)(v234 + 24) + 16 * (v236 & 0x7FFFFFFF) + 8);
            }
            uint64_t v238 = *v237;
            if (*v237)
            {
              uint64_t v239 = *(void *)(v238 + 16);
              *(void *)(v238 + 16) = v233;
              *(void *)(v233 + 16) = v239;
              if (*(unsigned char *)(v233 + 3))
              {
                *(void *)(v233 + 24) = v238;
              }
              else
              {
                *(void *)(v233 + 24) = 0;
                unint64_t v237 = (uint64_t *)(v239 + 24);
              }
            }
            else
            {
              *(void *)(v233 + 16) = v233;
              *(void *)(v233 + 24) = 0;
            }
            uint64_t *v237 = v233;
          }
          v233 += 32;
          v235 -= 32;
        }
        while (v235);
      }
      uint64_t v70 = *(void *)(v68 + 728);
      if (v70) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v70 + 24))(v70, MachineInstr);
      }
      unint64_t v71 = *v66 & 0xFFFFFFFFFFFFFFF8;
      *(void *)MachineInstr = v71 | *(void *)MachineInstr & 7;
      *((void *)MachineInstr + 1) = v66;
      *(void *)(v71 + 8) = MachineInstr;
      *uint64_t v66 = *v66 & 7 | (unint64_t)MachineInstr;
      if ((void)v1067) {
        (*(void (**)(void, llvm::MachineInstr *))(*(void *)v1067 + 24))(v1067, MachineInstr);
      }
      v1051.i32[0] = 1;
      v1051.i64[1] = 0;
      uint64_t v1052 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v63, (const llvm::MachineOperand *)&v1051);
      uint64_t v72 = v1046[0];
      __int32 v73 = *(_DWORD *)(*(void *)(v72 + 32)
                      + 32 * sub_1CBDA6464(**(unsigned __int16 **)(v1046[0] + 16), 0xBu)
                      + 4);
      v1051.i64[1] = 0;
      v1051.i32[1] = v73;
      v1051.i32[0] = 0;
      uint64_t v1052 = 0;
      uint64_t v1053 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v63, (const llvm::MachineOperand *)&v1051);
      v1051.i32[0] = 1;
      v1051.i64[1] = 0;
      uint64_t v1052 = 2;
      llvm::MachineInstr::addOperand(MachineInstr, v63, (const llvm::MachineOperand *)&v1051);
      unint64_t v74 = (llvm::MachineFunction *)v1064;
      uint64_t v75 = *(void *)(*((void *)&v1064 + 1) + 8);
      uint64_t v1048 = (void *)*((void *)&v1065 + 1);
      if (*((void *)&v1065 + 1)) {
        llvm::MetadataTracking::track((uint64_t)&v1048, *((unsigned __int8 **)&v1065 + 1), 2);
      }
      int v76 = llvm::MachineFunction::CreateMachineInstr(v74, v75 + 20448, (unsigned __int8 **)&v1048, 0);
      if (v1048)
      {
        int v338 = *(unsigned __int8 *)v1048;
        if ((v338 - 4) > 0x1E)
        {
          if ((v338 - 3) >= 0xFFFFFFFE) {
            unint64_t v372 = v1048;
          }
          else {
            unint64_t v372 = 0;
          }
          if ((v338 - 3) < 0xFFFFFFFE)
          {
            if (v338 == 3) {
              *((void *)v1048 + 1) = 0;
            }
            goto LABEL_82;
          }
          unint64_t v340 = (unint64_t)v372 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1048 + 1) & 0x7F) != 2 && !*((_DWORD *)v1048 + 3)) {
            goto LABEL_82;
          }
          uint64_t v339 = *((void *)v1048 + 2);
          if ((v339 & 4) == 0) {
            goto LABEL_82;
          }
          unint64_t v340 = v339 & 0xFFFFFFFFFFFFFFF8;
          if (!v340) {
            goto LABEL_82;
          }
        }
        v1051.i64[0] = (uint64_t)&v1048;
        sub_1CC5FA668(v340 + 16, &v1051);
      }
LABEL_82:
      uint64_t v77 = (unint64_t *)*((void *)&v1066 + 1);
      uint64_t v78 = *(void *)(v1066 + 40);
      *((void *)v76 + 3) = v78;
      uint64_t v79 = *(void *)(v78 + 32);
      uint64_t v80 = *((unsigned int *)v76 + 10);
      if (v80)
      {
        uint64_t v240 = *((void *)v76 + 4);
        uint64_t v241 = *(void *)(v79 + 40);
        uint64_t v242 = 32 * v80;
        do
        {
          if (!*(unsigned char *)v240)
          {
            uint64_t v243 = *(unsigned int *)(v240 + 4);
            if ((int)v243 >= 0) {
              uint64_t v244 = (uint64_t *)(*(void *)(v241 + 272) + 8 * v243);
            }
            else {
              uint64_t v244 = (uint64_t *)(*(void *)(v241 + 24) + 16 * (v243 & 0x7FFFFFFF) + 8);
            }
            uint64_t v245 = *v244;
            if (*v244)
            {
              uint64_t v246 = *(void *)(v245 + 16);
              *(void *)(v245 + 16) = v240;
              *(void *)(v240 + 16) = v246;
              if (*(unsigned char *)(v240 + 3))
              {
                *(void *)(v240 + 24) = v245;
              }
              else
              {
                *(void *)(v240 + 24) = 0;
                uint64_t v244 = (uint64_t *)(v246 + 24);
              }
            }
            else
            {
              *(void *)(v240 + 16) = v240;
              *(void *)(v240 + 24) = 0;
            }
            *uint64_t v244 = v240;
          }
          v240 += 32;
          v242 -= 32;
        }
        while (v242);
      }
      uint64_t v81 = *(void *)(v79 + 728);
      if (v81) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v81 + 24))(v81, v76);
      }
      unint64_t v82 = *v77 & 0xFFFFFFFFFFFFFFF8;
      *(void *)int v76 = v82 | *(void *)v76 & 7;
      *((void *)v76 + 1) = v77;
      *(void *)(v82 + 8) = v76;
      *uint64_t v77 = *v77 & 7 | (unint64_t)v76;
      if ((void)v1067) {
        (*(void (**)(void, llvm::MachineInstr *))(*(void *)v1067 + 24))(v1067, v76);
      }
      v1051.i32[0] = 1;
      v1051.i64[1] = 0;
      uint64_t v1052 = 0;
      llvm::MachineInstr::addOperand(v76, v74, (const llvm::MachineOperand *)&v1051);
      v1051.i64[1] = 0;
      uint64_t v1052 = (uint64_t)v37;
      v1051.i32[0] = 4;
      llvm::MachineInstr::addOperand(v76, v74, (const llvm::MachineOperand *)&v1051);
      *(void *)&long long v1066 = v47;
      *((void *)&v1066 + 1) = (char *)v47 + 48;
      unsigned int v83 = (llvm::MachineFunction *)v1064;
      uint64_t v84 = *(void *)(*((void *)&v1064 + 1) + 8);
      uint64_t v1048 = (void *)*((void *)&v1065 + 1);
      if (*((void *)&v1065 + 1)) {
        llvm::MetadataTracking::track((uint64_t)&v1048, *((unsigned __int8 **)&v1065 + 1), 2);
      }
      uint64_t v85 = llvm::MachineFunction::CreateMachineInstr(v83, v84 + 272688, (unsigned __int8 **)&v1048, 0);
      if (v1048)
      {
        int v341 = *(unsigned __int8 *)v1048;
        if ((v341 - 4) > 0x1E)
        {
          if ((v341 - 3) >= 0xFFFFFFFE) {
            uint64_t v373 = v1048;
          }
          else {
            uint64_t v373 = 0;
          }
          if ((v341 - 3) < 0xFFFFFFFE)
          {
            if (v341 == 3) {
              *((void *)v1048 + 1) = 0;
            }
            goto LABEL_90;
          }
          unint64_t v343 = (unint64_t)v373 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1048 + 1) & 0x7F) != 2 && !*((_DWORD *)v1048 + 3)) {
            goto LABEL_90;
          }
          uint64_t v342 = *((void *)v1048 + 2);
          if ((v342 & 4) == 0) {
            goto LABEL_90;
          }
          unint64_t v343 = v342 & 0xFFFFFFFFFFFFFFF8;
          if (!v343) {
            goto LABEL_90;
          }
        }
        v1051.i64[0] = (uint64_t)&v1048;
        sub_1CC5FA668(v343 + 16, &v1051);
      }
LABEL_90:
      uint64_t v86 = (unint64_t *)*((void *)&v1066 + 1);
      uint64_t v87 = *(void *)(v1066 + 40);
      *((void *)v85 + 3) = v87;
      uint64_t v88 = *(void *)(v87 + 32);
      uint64_t v89 = *((unsigned int *)v85 + 10);
      if (v89)
      {
        uint64_t v247 = *((void *)v85 + 4);
        uint64_t v248 = *(void *)(v88 + 40);
        uint64_t v249 = 32 * v89;
        do
        {
          if (!*(unsigned char *)v247)
          {
            uint64_t v250 = *(unsigned int *)(v247 + 4);
            if ((int)v250 >= 0) {
              unsigned int v251 = (uint64_t *)(*(void *)(v248 + 272) + 8 * v250);
            }
            else {
              unsigned int v251 = (uint64_t *)(*(void *)(v248 + 24) + 16 * (v250 & 0x7FFFFFFF) + 8);
            }
            uint64_t v252 = *v251;
            if (*v251)
            {
              uint64_t v253 = *(void *)(v252 + 16);
              *(void *)(v252 + 16) = v247;
              *(void *)(v247 + 16) = v253;
              if (*(unsigned char *)(v247 + 3))
              {
                *(void *)(v247 + 24) = v252;
              }
              else
              {
                *(void *)(v247 + 24) = 0;
                unsigned int v251 = (uint64_t *)(v253 + 24);
              }
            }
            else
            {
              *(void *)(v247 + 16) = v247;
              *(void *)(v247 + 24) = 0;
            }
            uint64_t *v251 = v247;
          }
          v247 += 32;
          v249 -= 32;
        }
        while (v249);
      }
      uint64_t v90 = *(void *)(v88 + 728);
      if (v90) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v90 + 24))(v90, v85);
      }
      unint64_t v91 = *v86 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v85 = v91 | *(void *)v85 & 7;
      *((void *)v85 + 1) = v86;
      *(void *)(v91 + 8) = v85;
      *uint64_t v86 = *v86 & 7 | (unint64_t)v85;
      if ((void)v1067) {
        (*(void (**)(void, llvm::MachineInstr *))(*(void *)v1067 + 24))(v1067, v85);
      }
      uint64_t v92 = v1046[0];
      __int32 v93 = *(_DWORD *)(*(void *)(v92 + 32)
                      + 32 * sub_1CBDA6464(**(unsigned __int16 **)(v1046[0] + 16), 8u)
                      + 4);
      v1051.i64[1] = 0;
      uint64_t v1052 = 0;
      uint64_t v1053 = 0;
      v1051.i32[1] = v93;
      v1051.i32[0] = 0x1000000;
      llvm::MachineInstr::addOperand(v85, v83, (const llvm::MachineOperand *)&v1051);
      uint64_t v1048 = v83;
      uint64_t v1049 = (uint64_t)v85;
      sub_1CBAF89E4((uint64_t **)&v1060, (llvm::MachineFunction **)&v1048, 1);
      uint64_t v94 = (llvm::MachineFunction *)v1064;
      uint64_t v95 = *(void *)(*((void *)&v1064 + 1) + 8);
      uint64_t v1055 = (void *)*((void *)&v1065 + 1);
      if (*((void *)&v1065 + 1)) {
        llvm::MetadataTracking::track((uint64_t)&v1055, *((unsigned __int8 **)&v1065 + 1), 2);
      }
      unint64_t v96 = llvm::MachineFunction::CreateMachineInstr(v94, v95 + 18000, (unsigned __int8 **)&v1055, 0);
      if (v1055)
      {
        int v344 = *(unsigned __int8 *)v1055;
        if ((v344 - 4) > 0x1E)
        {
          if ((v344 - 3) >= 0xFFFFFFFE) {
            uint64_t v374 = v1055;
          }
          else {
            uint64_t v374 = 0;
          }
          if ((v344 - 3) < 0xFFFFFFFE)
          {
            if (v344 == 3) {
              *((void *)v1055 + 1) = 0;
            }
            goto LABEL_98;
          }
          unint64_t v346 = (unint64_t)v374 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1055 + 1) & 0x7F) != 2 && !*((_DWORD *)v1055 + 3)) {
            goto LABEL_98;
          }
          uint64_t v345 = *((void *)v1055 + 2);
          if ((v345 & 4) == 0) {
            goto LABEL_98;
          }
          unint64_t v346 = v345 & 0xFFFFFFFFFFFFFFF8;
          if (!v346) {
            goto LABEL_98;
          }
        }
        v1051.i64[0] = (uint64_t)&v1055;
        sub_1CC5FA668(v346 + 16, &v1051);
      }
LABEL_98:
      uint64_t v97 = (unint64_t *)*((void *)&v1066 + 1);
      uint64_t v98 = *(void *)(v1066 + 40);
      *((void *)v96 + 3) = v98;
      uint64_t v99 = *(void *)(v98 + 32);
      uint64_t v100 = *((unsigned int *)v96 + 10);
      if (v100)
      {
        uint64_t v254 = *((void *)v96 + 4);
        uint64_t v255 = *(void *)(v99 + 40);
        uint64_t v256 = 32 * v100;
        do
        {
          if (!*(unsigned char *)v254)
          {
            uint64_t v257 = *(unsigned int *)(v254 + 4);
            if ((int)v257 >= 0) {
              unint64_t v258 = (uint64_t *)(*(void *)(v255 + 272) + 8 * v257);
            }
            else {
              unint64_t v258 = (uint64_t *)(*(void *)(v255 + 24) + 16 * (v257 & 0x7FFFFFFF) + 8);
            }
            uint64_t v259 = *v258;
            if (*v258)
            {
              uint64_t v260 = *(void *)(v259 + 16);
              *(void *)(v259 + 16) = v254;
              *(void *)(v254 + 16) = v260;
              if (*(unsigned char *)(v254 + 3))
              {
                *(void *)(v254 + 24) = v259;
              }
              else
              {
                *(void *)(v254 + 24) = 0;
                unint64_t v258 = (uint64_t *)(v260 + 24);
              }
            }
            else
            {
              *(void *)(v254 + 16) = v254;
              *(void *)(v254 + 24) = 0;
            }
            *unint64_t v258 = v254;
          }
          v254 += 32;
          v256 -= 32;
        }
        while (v256);
      }
      uint64_t v101 = *(void *)(v99 + 728);
      if (v101) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v101 + 24))(v101, v96);
      }
      unint64_t v102 = *v97 & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v96 = v102 | *(void *)v96 & 7;
      *((void *)v96 + 1) = v97;
      *(void *)(v102 + 8) = v96;
      *uint64_t v97 = *v97 & 7 | (unint64_t)v96;
      if ((void)v1067) {
        (*(void (**)(void, llvm::MachineInstr *))(*(void *)v1067 + 24))(v1067, v96);
      }
      uint64_t v103 = v1046[0];
      __int32 v104 = *(_DWORD *)(*(void *)(v103 + 32)
                       + 32 * sub_1CBDA6464(**(unsigned __int16 **)(v1046[0] + 16), 8u)
                       + 4);
      v1051.i64[1] = 0;
      uint64_t v1052 = 0;
      uint64_t v1053 = 0;
      v1051.i32[1] = v104;
      v1051.i32[0] = 0x1000000;
      llvm::MachineInstr::addOperand(v96, v94, (const llvm::MachineOperand *)&v1051);
      v1051.i32[0] = 1;
      v1051.i64[1] = 0;
      uint64_t v1052 = 0;
      llvm::MachineInstr::addOperand(v96, v94, (const llvm::MachineOperand *)&v1051);
      uint64_t v105 = v1046[0];
      __int32 v106 = *(_DWORD *)(*(void *)(v105 + 32)
                       + 32 * sub_1CBDA6464(**(unsigned __int16 **)(v1046[0] + 16), 8u)
                       + 4);
      v1051.i64[1] = 0;
      v1051.i32[1] = v106;
      v1051.i32[0] = 0;
      uint64_t v1052 = 0;
      uint64_t v1053 = 0;
      llvm::MachineInstr::addOperand(v96, v94, (const llvm::MachineOperand *)&v1051);
      v1051.i32[0] = 1;
      v1051.i64[1] = 0;
      uint64_t v1052 = 0;
      llvm::MachineInstr::addOperand(v96, v94, (const llvm::MachineOperand *)&v1051);
      uint64_t v107 = v1046[0];
      char v108 = *(void *)(*(void *)(v107 + 32)
                       + 32 * sub_1CBDA6464(**(unsigned __int16 **)(v1046[0] + 16), 0xEu)
                       + 16) & 7;
      v1051.i32[0] = 1;
      v1051.i64[1] = 0;
      uint64_t v1052 = 1 << v108;
      llvm::MachineInstr::addOperand(v96, v94, (const llvm::MachineOperand *)&v1051);
      unsigned int v109 = (llvm::MachineFunction *)v1064;
      uint64_t v110 = *(void *)(*((void *)&v1064 + 1) + 8);
      uint64_t v1055 = (void *)*((void *)&v1065 + 1);
      if (*((void *)&v1065 + 1)) {
        llvm::MetadataTracking::track((uint64_t)&v1055, *((unsigned __int8 **)&v1065 + 1), 2);
      }
      uint64_t v111 = llvm::MachineFunction::CreateMachineInstr(v109, v110 + 304032, (unsigned __int8 **)&v1055, 0);
      if (v1055)
      {
        int v347 = *(unsigned __int8 *)v1055;
        if ((v347 - 4) > 0x1E)
        {
          if ((v347 - 3) >= 0xFFFFFFFE) {
            int v375 = v1055;
          }
          else {
            int v375 = 0;
          }
          if ((v347 - 3) < 0xFFFFFFFE)
          {
            if (v347 == 3) {
              *((void *)v1055 + 1) = 0;
            }
            goto LABEL_106;
          }
          unint64_t v349 = (unint64_t)v375 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1055 + 1) & 0x7F) != 2 && !*((_DWORD *)v1055 + 3)) {
            goto LABEL_106;
          }
          uint64_t v348 = *((void *)v1055 + 2);
          if ((v348 & 4) == 0) {
            goto LABEL_106;
          }
          unint64_t v349 = v348 & 0xFFFFFFFFFFFFFFF8;
          if (!v349) {
            goto LABEL_106;
          }
        }
        v1051.i64[0] = (uint64_t)&v1055;
        sub_1CC5FA668(v349 + 16, &v1051);
      }
LABEL_106:
      unint64_t v112 = (unint64_t *)*((void *)&v1066 + 1);
      uint64_t v113 = *(void *)(v1066 + 40);
      *((void *)v111 + 3) = v113;
      uint64_t v114 = *(void *)(v113 + 32);
      uint64_t v115 = *((unsigned int *)v111 + 10);
      if (v115)
      {
        uint64_t v261 = *((void *)v111 + 4);
        uint64_t v262 = *(void *)(v114 + 40);
        uint64_t v263 = 32 * v115;
        do
        {
          if (!*(unsigned char *)v261)
          {
            uint64_t v264 = *(unsigned int *)(v261 + 4);
            if ((int)v264 >= 0) {
              uint64_t v265 = (uint64_t *)(*(void *)(v262 + 272) + 8 * v264);
            }
            else {
              uint64_t v265 = (uint64_t *)(*(void *)(v262 + 24) + 16 * (v264 & 0x7FFFFFFF) + 8);
            }
            uint64_t v266 = *v265;
            if (*v265)
            {
              uint64_t v267 = *(void *)(v266 + 16);
              *(void *)(v266 + 16) = v261;
              *(void *)(v261 + 16) = v267;
              if (*(unsigned char *)(v261 + 3))
              {
                *(void *)(v261 + 24) = v266;
              }
              else
              {
                *(void *)(v261 + 24) = 0;
                uint64_t v265 = (uint64_t *)(v267 + 24);
              }
            }
            else
            {
              *(void *)(v261 + 16) = v261;
              *(void *)(v261 + 24) = 0;
            }
            uint64_t *v265 = v261;
          }
          v261 += 32;
          v263 -= 32;
        }
        while (v263);
      }
      uint64_t v116 = *(void *)(v114 + 728);
      if (v116) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v116 + 24))(v116, v111);
      }
      unint64_t v117 = *v112 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v111 = v117 | *(void *)v111 & 7;
      *((void *)v111 + 1) = v112;
      *(void *)(v117 + 8) = v111;
      *unint64_t v112 = *v112 & 7 | (unint64_t)v111;
      if ((void)v1067) {
        (*(void (**)(void, llvm::MachineInstr *))(*(void *)v1067 + 24))(v1067, v111);
      }
      uint64_t v118 = v1046[0];
      unsigned int v119 = sub_1CBDA6464(**(unsigned __int16 **)(v1046[0] + 16), 0xAu);
      llvm::MachineInstr::addOperand(v111, v109, (const llvm::MachineOperand *)(*(void *)(v118 + 32) + 32 * v119));
      v1051.i32[0] = 1;
      v1051.i64[1] = 0;
      uint64_t v1052 = 0;
      llvm::MachineInstr::addOperand(v111, v109, (const llvm::MachineOperand *)&v1051);
      v1051.i32[0] = 1;
      v1051.i64[1] = 0;
      uint64_t v1052 = 0;
      llvm::MachineInstr::addOperand(v111, v109, (const llvm::MachineOperand *)&v1051);
      uint64_t v120 = v1046[0];
      __int32 v121 = *(_DWORD *)(*(void *)(v120 + 32)
                       + 32 * sub_1CBDA6464(**(unsigned __int16 **)(v1046[0] + 16), 0xCu)
                       + 4);
      v1051.i64[1] = 0;
      v1051.i32[1] = v121;
      v1051.i32[0] = 0;
      uint64_t v1052 = 0;
      uint64_t v1053 = 0;
      llvm::MachineInstr::addOperand(v111, v109, (const llvm::MachineOperand *)&v1051);
      v1051.i32[0] = 1;
      v1051.i64[1] = 0;
      uint64_t v1052 = 0;
      llvm::MachineInstr::addOperand(v111, v109, (const llvm::MachineOperand *)&v1051);
      v1051.i32[0] = 1;
      v1051.i64[1] = 0;
      uint64_t v1052 = 0;
      llvm::MachineInstr::addOperand(v111, v109, (const llvm::MachineOperand *)&v1051);
      unsigned int v122 = (llvm::MachineFunction *)v1064;
      uint64_t v123 = *(void *)(*((void *)&v1064 + 1) + 8);
      uint64_t v1055 = (void *)*((void *)&v1065 + 1);
      if (*((void *)&v1065 + 1)) {
        llvm::MetadataTracking::track((uint64_t)&v1055, *((unsigned __int8 **)&v1065 + 1), 2);
      }
      unsigned int v124 = llvm::MachineFunction::CreateMachineInstr(v122, v123 + 437760, (unsigned __int8 **)&v1055, 0);
      if (v1055)
      {
        int v350 = *(unsigned __int8 *)v1055;
        if ((v350 - 4) > 0x1E)
        {
          if ((v350 - 3) >= 0xFFFFFFFE) {
            BOOL v376 = v1055;
          }
          else {
            BOOL v376 = 0;
          }
          if ((v350 - 3) < 0xFFFFFFFE)
          {
            if (v350 == 3) {
              *((void *)v1055 + 1) = 0;
            }
            goto LABEL_114;
          }
          unint64_t v352 = (unint64_t)v376 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1055 + 1) & 0x7F) != 2 && !*((_DWORD *)v1055 + 3)) {
            goto LABEL_114;
          }
          uint64_t v351 = *((void *)v1055 + 2);
          if ((v351 & 4) == 0) {
            goto LABEL_114;
          }
          unint64_t v352 = v351 & 0xFFFFFFFFFFFFFFF8;
          if (!v352) {
            goto LABEL_114;
          }
        }
        v1051.i64[0] = (uint64_t)&v1055;
        sub_1CC5FA668(v352 + 16, &v1051);
      }
LABEL_114:
      uint64_t v125 = (unint64_t *)*((void *)&v1066 + 1);
      uint64_t v126 = *(void *)(v1066 + 40);
      *((void *)v124 + 3) = v126;
      uint64_t v127 = *(void *)(v126 + 32);
      uint64_t v128 = *((unsigned int *)v124 + 10);
      if (v128)
      {
        uint64_t v268 = *((void *)v124 + 4);
        uint64_t v269 = *(void *)(v127 + 40);
        uint64_t v270 = 32 * v128;
        do
        {
          if (!*(unsigned char *)v268)
          {
            uint64_t v271 = *(unsigned int *)(v268 + 4);
            if ((int)v271 >= 0) {
              unint64_t v272 = (uint64_t *)(*(void *)(v269 + 272) + 8 * v271);
            }
            else {
              unint64_t v272 = (uint64_t *)(*(void *)(v269 + 24) + 16 * (v271 & 0x7FFFFFFF) + 8);
            }
            uint64_t v273 = *v272;
            if (*v272)
            {
              uint64_t v274 = *(void *)(v273 + 16);
              *(void *)(v273 + 16) = v268;
              *(void *)(v268 + 16) = v274;
              if (*(unsigned char *)(v268 + 3))
              {
                *(void *)(v268 + 24) = v273;
              }
              else
              {
                *(void *)(v268 + 24) = 0;
                unint64_t v272 = (uint64_t *)(v274 + 24);
              }
            }
            else
            {
              *(void *)(v268 + 16) = v268;
              *(void *)(v268 + 24) = 0;
            }
            *unint64_t v272 = v268;
          }
          v268 += 32;
          v270 -= 32;
        }
        while (v270);
      }
      uint64_t v129 = *(void *)(v127 + 728);
      if (v129) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v129 + 24))(v129, v124);
      }
      unint64_t v130 = *v125 & 0xFFFFFFFFFFFFFFF8;
      *(void *)unsigned int v124 = v130 | *(void *)v124 & 7;
      *((void *)v124 + 1) = v125;
      *(void *)(v130 + 8) = v124;
      *uint64_t v125 = *v125 & 7 | (unint64_t)v124;
      if ((void)v1067) {
        (*(void (**)(void, llvm::MachineInstr *))(*(void *)v1067 + 24))(v1067, v124);
      }
      uint64_t v131 = v1046[0];
      __int32 v132 = *(_DWORD *)(*(void *)(v131 + 32)
                       + 32 * sub_1CBDA6464(**(unsigned __int16 **)(v1046[0] + 16), 8u)
                       + 4);
      v1051.i64[1] = 0;
      v1051.i32[1] = v132;
      v1051.i32[0] = 0;
      uint64_t v1052 = 0;
      uint64_t v1053 = 0;
      llvm::MachineInstr::addOperand(v124, v122, (const llvm::MachineOperand *)&v1051);
      uint64_t v1055 = v122;
      uint64_t v1056 = (uint64_t)v124;
      sub_1CBAF89E4((uint64_t **)&v1060, (llvm::MachineFunction **)&v1055, 2);
      sub_1CBC2E7FC((uint64_t)&v1063, 1u);
      char v133 = (llvm::MachineFunction *)v1064;
      uint64_t v134 = *(void *)(*((void *)&v1064 + 1) + 8);
      v1058[0] = *((void **)&v1065 + 1);
      if (*((void *)&v1065 + 1)) {
        llvm::MetadataTracking::track((uint64_t)v1058, *((unsigned __int8 **)&v1065 + 1), 2);
      }
      uint64_t v135 = llvm::MachineFunction::CreateMachineInstr(v133, v134 + 26400, (unsigned __int8 **)v1058, 0);
      if (v1058[0])
      {
        int v353 = *(unsigned __int8 *)v1058[0];
        if ((v353 - 4) > 0x1E)
        {
          if ((v353 - 3) >= 0xFFFFFFFE) {
            unsigned int v377 = v1058[0];
          }
          else {
            unsigned int v377 = 0;
          }
          if ((v353 - 3) < 0xFFFFFFFE)
          {
            if (v353 == 3) {
              *((void *)v1058[0] + 1) = 0;
            }
            goto LABEL_122;
          }
          unint64_t v355 = (unint64_t)v377 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1058[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1058[0] + 3)) {
            goto LABEL_122;
          }
          uint64_t v354 = *((void *)v1058[0] + 2);
          if ((v354 & 4) == 0) {
            goto LABEL_122;
          }
          unint64_t v355 = v354 & 0xFFFFFFFFFFFFFFF8;
          if (!v355) {
            goto LABEL_122;
          }
        }
        v1051.i64[0] = (uint64_t)v1058;
        sub_1CC5FA668(v355 + 16, &v1051);
      }
LABEL_122:
      unsigned int v136 = (unint64_t *)*((void *)&v1066 + 1);
      uint64_t v137 = *(void *)(v1066 + 40);
      *((void *)v135 + 3) = v137;
      uint64_t v138 = *(void *)(v137 + 32);
      uint64_t v139 = *((unsigned int *)v135 + 10);
      if (v139)
      {
        uint64_t v275 = *((void *)v135 + 4);
        uint64_t v276 = *(void *)(v138 + 40);
        uint64_t v277 = 32 * v139;
        do
        {
          if (!*(unsigned char *)v275)
          {
            uint64_t v278 = *(unsigned int *)(v275 + 4);
            if ((int)v278 >= 0) {
              uint64_t v279 = (uint64_t *)(*(void *)(v276 + 272) + 8 * v278);
            }
            else {
              uint64_t v279 = (uint64_t *)(*(void *)(v276 + 24) + 16 * (v278 & 0x7FFFFFFF) + 8);
            }
            uint64_t v280 = *v279;
            if (*v279)
            {
              uint64_t v281 = *(void *)(v280 + 16);
              *(void *)(v280 + 16) = v275;
              *(void *)(v275 + 16) = v281;
              if (*(unsigned char *)(v275 + 3))
              {
                *(void *)(v275 + 24) = v280;
              }
              else
              {
                *(void *)(v275 + 24) = 0;
                uint64_t v279 = (uint64_t *)(v281 + 24);
              }
            }
            else
            {
              *(void *)(v275 + 16) = v275;
              *(void *)(v275 + 24) = 0;
            }
            *uint64_t v279 = v275;
          }
          v275 += 32;
          v277 -= 32;
        }
        while (v277);
      }
      uint64_t v140 = *(void *)(v138 + 728);
      if (v140) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v140 + 24))(v140, v135);
      }
      unint64_t v141 = *v136 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v135 = v141 | *(void *)v135 & 7;
      *((void *)v135 + 1) = v136;
      *(void *)(v141 + 8) = v135;
      unint64_t *v136 = *v136 & 7 | (unint64_t)v135;
      if ((void)v1067) {
        (*(void (**)(void, llvm::MachineInstr *))(*(void *)v1067 + 24))(v1067, v135);
      }
      v1051.i32[0] = 1;
      v1051.i64[1] = 0;
      uint64_t v1052 = 0;
      llvm::MachineInstr::addOperand(v135, v133, (const llvm::MachineOperand *)&v1051);
      v1051.i32[3] = 0;
      LODWORD(v1052) = v1018;
      LODWORD(v1053) = 0;
      *(uint64_t *)((char *)v1051.i64 + 4) = v1017 & 0x7FFFFFFF;
      v1051.i32[0] = (v1017 >> 14) & 0x20000 | 7;
      llvm::MachineInstr::addOperand(v135, v133, (const llvm::MachineOperand *)&v1051);
      v1051.i32[0] = 1;
      v1051.i64[1] = 0;
      uint64_t v1052 = 0;
      llvm::MachineInstr::addOperand(v135, v133, (const llvm::MachineOperand *)&v1051);
      llvm::MachineInstr::addMemOperand(v135, v133, v1019);
      int v142 = (llvm::MachineFunction *)v1064;
      uint64_t v143 = *(void *)(*((void *)&v1064 + 1) + 8);
      v1058[0] = *((void **)&v1065 + 1);
      if (*((void *)&v1065 + 1)) {
        llvm::MetadataTracking::track((uint64_t)v1058, *((unsigned __int8 **)&v1065 + 1), 2);
      }
      unsigned int v144 = llvm::MachineFunction::CreateMachineInstr(v142, v143 + 272688, (unsigned __int8 **)v1058, 0);
      if (v1058[0])
      {
        int v356 = *(unsigned __int8 *)v1058[0];
        if ((v356 - 4) > 0x1E)
        {
          if ((v356 - 3) >= 0xFFFFFFFE) {
            uint64_t v378 = v1058[0];
          }
          else {
            uint64_t v378 = 0;
          }
          if ((v356 - 3) < 0xFFFFFFFE)
          {
            if (v356 == 3) {
              *((void *)v1058[0] + 1) = 0;
            }
            goto LABEL_130;
          }
          unint64_t v358 = (unint64_t)v378 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1058[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1058[0] + 3)) {
            goto LABEL_130;
          }
          uint64_t v357 = *((void *)v1058[0] + 2);
          if ((v357 & 4) == 0) {
            goto LABEL_130;
          }
          unint64_t v358 = v357 & 0xFFFFFFFFFFFFFFF8;
          if (!v358) {
            goto LABEL_130;
          }
        }
        v1051.i64[0] = (uint64_t)v1058;
        sub_1CC5FA668(v358 + 16, &v1051);
      }
LABEL_130:
      uint64_t v145 = (unint64_t *)*((void *)&v1066 + 1);
      uint64_t v146 = *(void *)(v1066 + 40);
      *((void *)v144 + 3) = v146;
      uint64_t v147 = *(void *)(v146 + 32);
      uint64_t v148 = *((unsigned int *)v144 + 10);
      if (v148)
      {
        uint64_t v282 = *((void *)v144 + 4);
        uint64_t v283 = *(void *)(v147 + 40);
        uint64_t v284 = 32 * v148;
        do
        {
          if (!*(unsigned char *)v282)
          {
            uint64_t v285 = *(unsigned int *)(v282 + 4);
            if ((int)v285 >= 0) {
              unsigned int v286 = (uint64_t *)(*(void *)(v283 + 272) + 8 * v285);
            }
            else {
              unsigned int v286 = (uint64_t *)(*(void *)(v283 + 24) + 16 * (v285 & 0x7FFFFFFF) + 8);
            }
            uint64_t v287 = *v286;
            if (*v286)
            {
              uint64_t v288 = *(void *)(v287 + 16);
              *(void *)(v287 + 16) = v282;
              *(void *)(v282 + 16) = v288;
              if (*(unsigned char *)(v282 + 3))
              {
                *(void *)(v282 + 24) = v287;
              }
              else
              {
                *(void *)(v282 + 24) = 0;
                unsigned int v286 = (uint64_t *)(v288 + 24);
              }
            }
            else
            {
              *(void *)(v282 + 16) = v282;
              *(void *)(v282 + 24) = 0;
            }
            *unsigned int v286 = v282;
          }
          v282 += 32;
          v284 -= 32;
        }
        while (v284);
      }
      uint64_t v149 = *(void *)(v147 + 728);
      if (v149) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v149 + 24))(v149, v144);
      }
      unint64_t v150 = *v145 & 0xFFFFFFFFFFFFFFF8;
      *(void *)unsigned int v144 = v150 | *(void *)v144 & 7;
      *((void *)v144 + 1) = v145;
      *(void *)(v150 + 8) = v144;
      *uint64_t v145 = *v145 & 7 | (unint64_t)v144;
      if ((void)v1067) {
        (*(void (**)(void, llvm::MachineInstr *))(*(void *)v1067 + 24))(v1067, v144);
      }
      uint64_t v151 = v1046[0];
      __int32 v152 = *(_DWORD *)(*(void *)(v151 + 32)
                       + 32 * sub_1CBDA6464(**(unsigned __int16 **)(v1046[0] + 16), 8u)
                       + 4);
      v1051.i64[1] = 0;
      uint64_t v1052 = 0;
      uint64_t v1053 = 0;
      v1051.i32[1] = v152;
      v1051.i32[0] = 0x1000000;
      llvm::MachineInstr::addOperand(v144, v142, (const llvm::MachineOperand *)&v1051);
      uint64_t v1048 = v142;
      uint64_t v1049 = (uint64_t)v144;
      sub_1CBAF89E4((uint64_t **)&v1060, (llvm::MachineFunction **)&v1048, 1);
      uint64_t v153 = (llvm::MachineFunction *)v1064;
      uint64_t v154 = *(void *)(*((void *)&v1064 + 1) + 8);
      v1058[0] = *((void **)&v1065 + 1);
      if (*((void *)&v1065 + 1)) {
        llvm::MetadataTracking::track((uint64_t)v1058, *((unsigned __int8 **)&v1065 + 1), 2);
      }
      char v155 = llvm::MachineFunction::CreateMachineInstr(v153, v154 + 215904, (unsigned __int8 **)v1058, 0);
      if (v1058[0])
      {
        int v359 = *(unsigned __int8 *)v1058[0];
        if ((v359 - 4) > 0x1E)
        {
          if ((v359 - 3) >= 0xFFFFFFFE) {
            int v379 = v1058[0];
          }
          else {
            int v379 = 0;
          }
          if ((v359 - 3) < 0xFFFFFFFE)
          {
            if (v359 == 3) {
              *((void *)v1058[0] + 1) = 0;
            }
            goto LABEL_138;
          }
          unint64_t v361 = (unint64_t)v379 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1058[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1058[0] + 3)) {
            goto LABEL_138;
          }
          uint64_t v360 = *((void *)v1058[0] + 2);
          if ((v360 & 4) == 0) {
            goto LABEL_138;
          }
          unint64_t v361 = v360 & 0xFFFFFFFFFFFFFFF8;
          if (!v361) {
            goto LABEL_138;
          }
        }
        v1051.i64[0] = (uint64_t)v1058;
        sub_1CC5FA668(v361 + 16, &v1051);
      }
LABEL_138:
      int v156 = (unint64_t *)*((void *)&v1066 + 1);
      uint64_t v157 = *(void *)(v1066 + 40);
      *((void *)v155 + 3) = v157;
      uint64_t v158 = *(void *)(v157 + 32);
      uint64_t v159 = *((unsigned int *)v155 + 10);
      if (v159)
      {
        uint64_t v289 = *((void *)v155 + 4);
        uint64_t v290 = *(void *)(v158 + 40);
        uint64_t v291 = 32 * v159;
        do
        {
          if (!*(unsigned char *)v289)
          {
            uint64_t v292 = *(unsigned int *)(v289 + 4);
            if ((int)v292 >= 0) {
              BOOL v293 = (uint64_t *)(*(void *)(v290 + 272) + 8 * v292);
            }
            else {
              BOOL v293 = (uint64_t *)(*(void *)(v290 + 24) + 16 * (v292 & 0x7FFFFFFF) + 8);
            }
            uint64_t v294 = *v293;
            if (*v293)
            {
              uint64_t v295 = *(void *)(v294 + 16);
              *(void *)(v294 + 16) = v289;
              *(void *)(v289 + 16) = v295;
              if (*(unsigned char *)(v289 + 3))
              {
                *(void *)(v289 + 24) = v294;
              }
              else
              {
                *(void *)(v289 + 24) = 0;
                BOOL v293 = (uint64_t *)(v295 + 24);
              }
            }
            else
            {
              *(void *)(v289 + 16) = v289;
              *(void *)(v289 + 24) = 0;
            }
            *BOOL v293 = v289;
          }
          v289 += 32;
          v291 -= 32;
        }
        while (v291);
      }
      uint64_t v160 = *(void *)(v158 + 728);
      if (v160) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v160 + 24))(v160, v155);
      }
      unint64_t v161 = *v156 & 0xFFFFFFFFFFFFFFF8;
      *(void *)char v155 = v161 | *(void *)v155 & 7;
      *((void *)v155 + 1) = v156;
      *(void *)(v161 + 8) = v155;
      *int v156 = *v156 & 7 | (unint64_t)v155;
      if ((void)v1067) {
        (*(void (**)(void, llvm::MachineInstr *))(*(void *)v1067 + 24))(v1067, v155);
      }
      uint64_t v162 = v1046[0];
      __int32 v163 = *(_DWORD *)(*(void *)(v162 + 32)
                       + 32 * sub_1CBDA6464(**(unsigned __int16 **)(v1046[0] + 16), 9u)
                       + 4);
      v1051.i64[1] = 0;
      uint64_t v1052 = 0;
      uint64_t v1053 = 0;
      v1051.i32[1] = v163;
      v1051.i32[0] = 0x1000000;
      llvm::MachineInstr::addOperand(v155, v153, (const llvm::MachineOperand *)&v1051);
      v1051.i32[0] = 1;
      v1051.i64[1] = 0;
      uint64_t v1052 = 0;
      llvm::MachineInstr::addOperand(v155, v153, (const llvm::MachineOperand *)&v1051);
      v1051.i32[0] = 1;
      v1051.i64[1] = 0;
      uint64_t v1052 = 15;
      llvm::MachineInstr::addOperand(v155, v153, (const llvm::MachineOperand *)&v1051);
      uint64_t v164 = v1046[0];
      __int32 v165 = *(_DWORD *)(*(void *)(v164 + 32)
                       + 32 * sub_1CBDA6464(**(unsigned __int16 **)(v1046[0] + 16), 8u)
                       + 4);
      v1051.i64[1] = 0;
      v1051.i32[1] = v165;
      v1051.i32[0] = 0;
      uint64_t v1052 = 0;
      uint64_t v1053 = 0;
      llvm::MachineInstr::addOperand(v155, v153, (const llvm::MachineOperand *)&v1051);
      v1051.i32[0] = 1;
      v1051.i64[1] = 0;
      uint64_t v1052 = 0;
      llvm::MachineInstr::addOperand(v155, v153, (const llvm::MachineOperand *)&v1051);
      uint64_t v166 = v1046[0];
      char v167 = *(void *)(*(void *)(v166 + 32)
                       + 32 * sub_1CBDA6464(**(unsigned __int16 **)(v1046[0] + 16), 0xEu)
                       + 16) & 7;
      v1051.i32[0] = 1;
      v1051.i64[1] = 0;
      uint64_t v1052 = 1 << v167;
      llvm::MachineInstr::addOperand(v155, v153, (const llvm::MachineOperand *)&v1051);
      uint64_t v168 = (llvm::MachineFunction *)v1064;
      uint64_t v169 = *(void *)(*((void *)&v1064 + 1) + 8);
      v1058[0] = *((void **)&v1065 + 1);
      if (*((void *)&v1065 + 1)) {
        llvm::MetadataTracking::track((uint64_t)v1058, *((unsigned __int8 **)&v1065 + 1), 2);
      }
      int v170 = llvm::MachineFunction::CreateMachineInstr(v168, v169 + 26160, (unsigned __int8 **)v1058, 0);
      if (v1058[0])
      {
        int v362 = *(unsigned __int8 *)v1058[0];
        if ((v362 - 4) > 0x1E)
        {
          if ((v362 - 3) >= 0xFFFFFFFE) {
            uint64_t v380 = v1058[0];
          }
          else {
            uint64_t v380 = 0;
          }
          if ((v362 - 3) < 0xFFFFFFFE)
          {
            if (v362 == 3) {
              *((void *)v1058[0] + 1) = 0;
            }
            goto LABEL_146;
          }
          unint64_t v364 = (unint64_t)v380 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1058[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1058[0] + 3)) {
            goto LABEL_146;
          }
          uint64_t v363 = *((void *)v1058[0] + 2);
          if ((v363 & 4) == 0) {
            goto LABEL_146;
          }
          unint64_t v364 = v363 & 0xFFFFFFFFFFFFFFF8;
          if (!v364) {
            goto LABEL_146;
          }
        }
        v1051.i64[0] = (uint64_t)v1058;
        sub_1CC5FA668(v364 + 16, &v1051);
      }
LABEL_146:
      uint64_t v171 = (unint64_t *)*((void *)&v1066 + 1);
      uint64_t v172 = *(void *)(v1066 + 40);
      *((void *)v170 + 3) = v172;
      uint64_t v173 = *(void *)(v172 + 32);
      uint64_t v174 = *((unsigned int *)v170 + 10);
      if (v174)
      {
        uint64_t v296 = *((void *)v170 + 4);
        uint64_t v297 = *(void *)(v173 + 40);
        uint64_t v298 = 32 * v174;
        do
        {
          if (!*(unsigned char *)v296)
          {
            uint64_t v299 = *(unsigned int *)(v296 + 4);
            if ((int)v299 >= 0) {
              int v300 = (uint64_t *)(*(void *)(v297 + 272) + 8 * v299);
            }
            else {
              int v300 = (uint64_t *)(*(void *)(v297 + 24) + 16 * (v299 & 0x7FFFFFFF) + 8);
            }
            uint64_t v301 = *v300;
            if (*v300)
            {
              uint64_t v302 = *(void *)(v301 + 16);
              *(void *)(v301 + 16) = v296;
              *(void *)(v296 + 16) = v302;
              if (*(unsigned char *)(v296 + 3))
              {
                *(void *)(v296 + 24) = v301;
              }
              else
              {
                *(void *)(v296 + 24) = 0;
                int v300 = (uint64_t *)(v302 + 24);
              }
            }
            else
            {
              *(void *)(v296 + 16) = v296;
              *(void *)(v296 + 24) = 0;
            }
            uint64_t *v300 = v296;
          }
          v296 += 32;
          v298 -= 32;
        }
        while (v298);
      }
      uint64_t v175 = *(void *)(v173 + 728);
      if (v175) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v175 + 24))(v175, v170);
      }
      unint64_t v176 = *v171 & 0xFFFFFFFFFFFFFFF8;
      *(void *)int v170 = v176 | *(void *)v170 & 7;
      *((void *)v170 + 1) = v171;
      *(void *)(v176 + 8) = v170;
      *uint64_t v171 = *v171 & 7 | (unint64_t)v170;
      if ((void)v1067) {
        (*(void (**)(void, llvm::MachineInstr *))(*(void *)v1067 + 24))(v1067, v170);
      }
      v1051.i32[0] = 1;
      v1051.i64[1] = 0;
      uint64_t v1052 = 0;
      llvm::MachineInstr::addOperand(v170, v168, (const llvm::MachineOperand *)&v1051);
      uint64_t v177 = v1046[0];
      __int32 v178 = *(_DWORD *)(*(void *)(v177 + 32)
                       + 32 * sub_1CBDA6464(**(unsigned __int16 **)(v1046[0] + 16), 9u)
                       + 4);
      v1051.i64[1] = 0;
      v1051.i32[1] = v178;
      v1051.i32[0] = 0;
      uint64_t v1052 = 0;
      uint64_t v1053 = 0;
      llvm::MachineInstr::addOperand(v170, v168, (const llvm::MachineOperand *)&v1051);
      v1051.i32[0] = 1;
      v1051.i64[1] = 0;
      uint64_t v1052 = 2;
      llvm::MachineInstr::addOperand(v170, v168, (const llvm::MachineOperand *)&v1051);
      unint64_t v179 = (llvm::MachineFunction *)v1064;
      uint64_t v180 = *(void *)(*((void *)&v1064 + 1) + 8);
      v1058[0] = *((void **)&v1065 + 1);
      if (*((void *)&v1065 + 1)) {
        llvm::MetadataTracking::track((uint64_t)v1058, *((unsigned __int8 **)&v1065 + 1), 2);
      }
      int v181 = llvm::MachineFunction::CreateMachineInstr(v179, v180 + 20256, (unsigned __int8 **)v1058, 0);
      unint64_t v182 = v47;
      if (v1058[0])
      {
        int v365 = *(unsigned __int8 *)v1058[0];
        if ((v365 - 4) > 0x1E)
        {
          if ((v365 - 3) >= 0xFFFFFFFE) {
            uint64_t v381 = v1058[0];
          }
          else {
            uint64_t v381 = 0;
          }
          if ((v365 - 3) < 0xFFFFFFFE)
          {
            unint64_t v182 = v47;
            if (v365 == 3) {
              *((void *)v1058[0] + 1) = 0;
            }
            goto LABEL_154;
          }
          unint64_t v367 = (unint64_t)v381 + 8;
        }
        else
        {
          unint64_t v182 = v47;
          if ((*((unsigned char *)v1058[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1058[0] + 3)) {
            goto LABEL_154;
          }
          uint64_t v366 = *((void *)v1058[0] + 2);
          if ((v366 & 4) == 0) {
            goto LABEL_154;
          }
          unint64_t v367 = v366 & 0xFFFFFFFFFFFFFFF8;
          if (!v367) {
            goto LABEL_154;
          }
        }
        v1051.i64[0] = (uint64_t)v1058;
        sub_1CC5FA668(v367 + 16, &v1051);
        unint64_t v182 = v47;
      }
LABEL_154:
      uint64_t v183 = (unint64_t *)*((void *)&v1066 + 1);
      uint64_t v184 = *(void *)(v1066 + 40);
      *((void *)v181 + 3) = v184;
      uint64_t v185 = *(void *)(v184 + 32);
      uint64_t v186 = *((unsigned int *)v181 + 10);
      if (v186)
      {
        uint64_t v303 = *((void *)v181 + 4);
        uint64_t v304 = *(void *)(v185 + 40);
        uint64_t v305 = 32 * v186;
        do
        {
          if (!*(unsigned char *)v303)
          {
            uint64_t v306 = *(unsigned int *)(v303 + 4);
            if ((int)v306 >= 0) {
              uint64_t v307 = (uint64_t *)(*(void *)(v304 + 272) + 8 * v306);
            }
            else {
              uint64_t v307 = (uint64_t *)(*(void *)(v304 + 24) + 16 * (v306 & 0x7FFFFFFF) + 8);
            }
            uint64_t v308 = *v307;
            if (*v307)
            {
              uint64_t v309 = *(void *)(v308 + 16);
              *(void *)(v308 + 16) = v303;
              *(void *)(v303 + 16) = v309;
              if (*(unsigned char *)(v303 + 3))
              {
                *(void *)(v303 + 24) = v308;
              }
              else
              {
                *(void *)(v303 + 24) = 0;
                uint64_t v307 = (uint64_t *)(v309 + 24);
              }
            }
            else
            {
              *(void *)(v303 + 16) = v303;
              *(void *)(v303 + 24) = 0;
            }
            *uint64_t v307 = v303;
          }
          v303 += 32;
          v305 -= 32;
        }
        while (v305);
      }
      uint64_t v187 = *(void *)(v185 + 728);
      if (v187) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v187 + 24))(v187, v181);
      }
      unint64_t v188 = *v183 & 0xFFFFFFFFFFFFFFF8;
      *(void *)int v181 = v188 | *(void *)v181 & 7;
      *((void *)v181 + 1) = v183;
      *(void *)(v188 + 8) = v181;
      *uint64_t v183 = *v183 & 7 | (unint64_t)v181;
      if ((void)v1067) {
        (*(void (**)(void, llvm::MachineInstr *))(*(void *)v1067 + 24))(v1067, v181);
      }
      v1051.i32[0] = 1;
      v1051.i64[1] = 0;
      uint64_t v1052 = 0;
      llvm::MachineInstr::addOperand(v181, v179, (const llvm::MachineOperand *)&v1051);
      v1051.i64[1] = 0;
      uint64_t v1052 = (uint64_t)v182;
      v1051.i32[0] = 4;
      llvm::MachineInstr::addOperand(v181, v179, (const llvm::MachineOperand *)&v1051);
      uint64_t v189 = *((void *)v37 + 7);
      *(void *)&long long v1066 = v37;
      *((void *)&v1066 + 1) = v189;
      unsigned int v190 = (llvm::MachineFunction *)v1064;
      uint64_t v191 = *(void *)(*((void *)&v1064 + 1) + 8);
      v1058[0] = *((void **)&v1065 + 1);
      if (*((void *)&v1065 + 1)) {
        llvm::MetadataTracking::track((uint64_t)v1058, *((unsigned __int8 **)&v1065 + 1), 2);
      }
      unint64_t v192 = llvm::MachineFunction::CreateMachineInstr(v190, v191 + 26112, (unsigned __int8 **)v1058, 0);
      if (v1058[0])
      {
        int v368 = *(unsigned __int8 *)v1058[0];
        if ((v368 - 4) > 0x1E)
        {
          if ((v368 - 3) >= 0xFFFFFFFE) {
            unsigned int v382 = v1058[0];
          }
          else {
            unsigned int v382 = 0;
          }
          if ((v368 - 3) < 0xFFFFFFFE)
          {
            if (v368 == 3) {
              *((void *)v1058[0] + 1) = 0;
            }
            goto LABEL_162;
          }
          unint64_t v370 = (unint64_t)v382 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1058[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1058[0] + 3)) {
            goto LABEL_162;
          }
          uint64_t v369 = *((void *)v1058[0] + 2);
          if ((v369 & 4) == 0) {
            goto LABEL_162;
          }
          unint64_t v370 = v369 & 0xFFFFFFFFFFFFFFF8;
          if (!v370) {
            goto LABEL_162;
          }
        }
        v1051.i64[0] = (uint64_t)v1058;
        sub_1CC5FA668(v370 + 16, &v1051);
      }
LABEL_162:
      uint64_t v193 = (unint64_t *)*((void *)&v1066 + 1);
      uint64_t v194 = *(void *)(v1066 + 40);
      *((void *)v192 + 3) = v194;
      uint64_t v195 = *(void *)(v194 + 32);
      uint64_t v196 = *((unsigned int *)v192 + 10);
      if (v196)
      {
        uint64_t v310 = *((void *)v192 + 4);
        uint64_t v311 = *(void *)(v195 + 40);
        uint64_t v312 = 32 * v196;
        do
        {
          if (!*(unsigned char *)v310)
          {
            uint64_t v313 = *(unsigned int *)(v310 + 4);
            if ((int)v313 >= 0) {
              uint64_t v314 = (uint64_t *)(*(void *)(v311 + 272) + 8 * v313);
            }
            else {
              uint64_t v314 = (uint64_t *)(*(void *)(v311 + 24) + 16 * (v313 & 0x7FFFFFFF) + 8);
            }
            uint64_t v315 = *v314;
            if (*v314)
            {
              uint64_t v316 = *(void *)(v315 + 16);
              *(void *)(v315 + 16) = v310;
              *(void *)(v310 + 16) = v316;
              if (*(unsigned char *)(v310 + 3))
              {
                *(void *)(v310 + 24) = v315;
              }
              else
              {
                *(void *)(v310 + 24) = 0;
                uint64_t v314 = (uint64_t *)(v316 + 24);
              }
            }
            else
            {
              *(void *)(v310 + 16) = v310;
              *(void *)(v310 + 24) = 0;
            }
            *uint64_t v314 = v310;
          }
          v310 += 32;
          v312 -= 32;
        }
        while (v312);
      }
      uint64_t v197 = *(void *)(v195 + 728);
      if (v197) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v197 + 24))(v197, v192);
      }
      unint64_t v198 = *v193 & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v192 = v198 | *(void *)v192 & 7;
      *((void *)v192 + 1) = v193;
      *(void *)(v198 + 8) = v192;
      *uint64_t v193 = *v193 & 7 | (unint64_t)v192;
      if ((void)v1067) {
        (*(void (**)(void, llvm::MachineInstr *))(*(void *)v1067 + 24))(v1067, v192);
      }
      v1051.i32[0] = 1;
      v1051.i64[1] = 0;
      uint64_t v1052 = 0;
      llvm::MachineInstr::addOperand(v192, v190, (const llvm::MachineOperand *)&v1051);
      v1051.i32[0] = 1;
      v1051.i64[1] = 0;
      uint64_t v1052 = 2;
      llvm::MachineInstr::addOperand(v192, v190, (const llvm::MachineOperand *)&v1051);
      sub_1CBAF8B5C(v37, &v1095, v1028);
      uint64_t v199 = v1046[0];
      int v200 = **(unsigned __int16 **)(v1046[0] + 16);
      unsigned int v201 = sub_1CBDA6464(v200, 0xCu);
      uint64_t v202 = *(void *)(v199 + 32);
      uint64_t v203 = v1095.i64[1];
      if (v1095.i64[0]) {
        uint64_t v204 = (uint64_t *)(v1095.i64[0] + 8);
      }
      else {
        uint64_t v204 = 0;
      }
      uint64_t v205 = *v204;
      uint64_t v206 = v204[6];
      int v207 = (unsigned __int16 *)(v206
                                + (((unint64_t)*(unsigned int *)(*v204
                                                                      + 24
                                                                      * (unsigned __int16)*(_DWORD *)(v202 + 32 * v201 + 4)
                                                                      + 16) >> 3) & 0x1FFFFFFE));
      int v209 = *v207;
      int v208 = v207 + 1;
      int v210 = v209
           + (*(_DWORD *)(*v204 + 24 * (unsigned __int16)*(_DWORD *)(v202 + 32 * v201 + 4) + 16) & 0xF)
           * *(_DWORD *)(v202 + 32 * v201 + 4);
      do
      {
        *(void *)(v203 + 8 * ((unsigned __int16)v210 >> 6)) |= 1 << v210;
        int v211 = *v208++;
        v210 += v211;
      }
      while (v211);
      unsigned int v212 = sub_1CBDA6464(v200, 0xDu);
      uint64_t v213 = (unsigned __int16 *)(v206
                                + (((unint64_t)*(unsigned int *)(v205
                                                                      + 24
                                                                      * (unsigned __int16)*(_DWORD *)(v202 + 32 * v212 + 4)
                                                                      + 16) >> 3) & 0x1FFFFFFE));
      int v215 = *v213;
      uint64_t v214 = v213 + 1;
      int v216 = v215
           + (*(_DWORD *)(v205 + 24 * (unsigned __int16)*(_DWORD *)(v202 + 32 * v212 + 4) + 16) & 0xF)
           * *(_DWORD *)(v202 + 32 * v212 + 4);
      do
      {
        *(void *)(v203 + 8 * ((unsigned __int16)v216 >> 6)) |= 1 << v216;
        int v217 = *v214++;
        v216 += v217;
      }
      while (v217);
      sub_1CBAF8B5C(v47, &v1095, v1028);
      uint64_t v218 = v1046[0];
      int v219 = *(_DWORD *)(*(void *)(v218 + 32)
                       + 32 * sub_1CBDA6464(**(unsigned __int16 **)(v1046[0] + 16), 0xBu)
                       + 4);
      uint64_t v220 = v1095.i64[1];
      if (v1095.i64[0]) {
        unint64_t v221 = (void *)(v1095.i64[0] + 8);
      }
      else {
        unint64_t v221 = 0;
      }
      uint64_t v222 = (unsigned __int16 *)(v221[6]
                                + (((unint64_t)*(unsigned int *)(*v221 + 24 * (unsigned __int16)v219 + 16) >> 3) & 0x1FFFFFFE));
      int v224 = *v222;
      uint64_t v223 = v222 + 1;
      int v225 = v224 + (*(_DWORD *)(*v221 + 24 * (unsigned __int16)v219 + 16) & 0xF) * v219;
      do
      {
        *(void *)(v220 + 8 * ((unsigned __int16)v225 >> 6)) |= 1 << v225;
        int v226 = *v223++;
        v225 += v226;
      }
      while (v226);
      uint64_t v19 = v1027;
      uint64_t v1063 = &unk_1F261CD58;
      if (*((void *)&v1065 + 1))
      {
        int v227 = **((unsigned char **)&v1065 + 1);
        if ((v227 - 4) > 0x1E)
        {
          if ((v227 - 3) >= 0xFFFFFFFE) {
            uint64_t v228 = *((void *)&v1065 + 1);
          }
          else {
            uint64_t v228 = 0;
          }
          if ((v227 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v229 = v228 + 8;
            goto LABEL_190;
          }
          if (v227 == 3) {
            *(void *)(*((void *)&v1065 + 1) + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(*((void *)&v1065 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v1065 + 1) + 12))
        {
          uint64_t v334 = *(void *)(*((void *)&v1065 + 1) + 16);
          if ((v334 & 4) != 0)
          {
            unint64_t v229 = v334 & 0xFFFFFFFFFFFFFFF8;
            if (v229)
            {
LABEL_190:
              v1051.i64[0] = (uint64_t)&v1065 + 8;
              sub_1CC5FA668(v229 + 16, &v1051);
            }
          }
        }
      }
      char v21 = 1;
    }
    while (v12 != v6);
LABEL_568:
    if (LODWORD(v1068[1]))
    {
      BOOL v383 = (llvm::MachineInstr **)v1068[0];
      uint64_t v384 = 8 * LODWORD(v1068[1]);
      do
      {
        int v385 = *v383++;
        llvm::MachineInstr::eraseFromParent(v385);
        v384 -= 8;
      }
      while (v384);
    }
    uint64_t v3 = v1041;
    if ((void *)v1095.i64[1] != v1097) {
      free((void *)v1095.i64[1]);
    }
    if (v1068[0] != &v1069) {
      free(v1068[0]);
    }
    v1015 |= v21;
    uint64_t v5 = *(llvm::MachineBasicBlock **)v5;
  }
  while (v5 != v1016);
LABEL_580:
  int v386 = (*(unsigned __int16 *)(*(void *)v1011 + 18) >> 4) & 0x3FF;
  if (*(unsigned char *)(*(void *)(v3 + 248) + 307) && v386 != 107)
  {
    uint64_t v387 = *(void **)(v1011 + 328);
    uint64_t v388 = (unint64_t *)v387[7];
    uint64_t v1063 = 0;
    uint64_t v389 = *(void *)(*(void *)(v3 + 256) + 8) + 298656;
    uint64_t v390 = (llvm::MachineFunction *)v387[4];
    v1095.i64[0] = 0;
    uint64_t v391 = llvm::MachineFunction::CreateMachineInstr(v390, v389, (unsigned __int8 **)&v1095, 0);
    if (!v1095.i64[0]) {
      goto LABEL_583;
    }
    int v1002 = *(unsigned __int8 *)v1095.i64[0];
    if ((v1002 - 4) > 0x1E)
    {
      if ((v1002 - 3) >= 0xFFFFFFFE) {
        uint64_t v1008 = v1095.i64[0];
      }
      else {
        uint64_t v1008 = 0;
      }
      if ((v1002 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v1004 = v1008 + 8;
        goto LABEL_1779;
      }
      uint64_t v3 = v1041;
      if (v1002 == 3) {
        *(void *)(v1095.i64[0] + 8) = 0;
      }
    }
    else
    {
      uint64_t v3 = v1041;
      if ((*(unsigned char *)(v1095.i64[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v1095.i64[0] + 12))
      {
        uint64_t v1003 = *(void *)(v1095.i64[0] + 16);
        if ((v1003 & 4) != 0)
        {
          unint64_t v1004 = v1003 & 0xFFFFFFFFFFFFFFF8;
          if (v1004)
          {
LABEL_1779:
            v1068[0] = &v1095;
            sub_1CC5FA668(v1004 + 16, v1068);
            uint64_t v3 = v1041;
          }
        }
      }
    }
LABEL_583:
    uint64_t v392 = v387[5];
    *((void *)v391 + 3) = v392;
    uint64_t v393 = *(void *)(v392 + 32);
    uint64_t v394 = *((unsigned int *)v391 + 10);
    if (v394)
    {
      uint64_t v926 = *((void *)v391 + 4);
      uint64_t v927 = *(void *)(v393 + 40);
      uint64_t v928 = 32 * v394;
      do
      {
        if (!*(unsigned char *)v926)
        {
          uint64_t v929 = *(unsigned int *)(v926 + 4);
          if ((int)v929 >= 0) {
            uint64_t v930 = (uint64_t *)(*(void *)(v927 + 272) + 8 * v929);
          }
          else {
            uint64_t v930 = (uint64_t *)(*(void *)(v927 + 24) + 16 * (v929 & 0x7FFFFFFF) + 8);
          }
          uint64_t v931 = *v930;
          if (*v930)
          {
            uint64_t v932 = *(void *)(v931 + 16);
            *(void *)(v931 + 16) = v926;
            *(void *)(v926 + 16) = v932;
            if (*(unsigned char *)(v926 + 3))
            {
              *(void *)(v926 + 24) = v931;
            }
            else
            {
              *(void *)(v926 + 24) = 0;
              uint64_t v930 = (uint64_t *)(v932 + 24);
            }
          }
          else
          {
            *(void *)(v926 + 16) = v926;
            *(void *)(v926 + 24) = 0;
          }
          *uint64_t v930 = v926;
        }
        v926 += 32;
        v928 -= 32;
      }
      while (v928);
    }
    uint64_t v395 = *(void *)(v393 + 728);
    if (v395) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v395 + 24))(v395, v391);
    }
    unint64_t v396 = *v388 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v391 = v396 | *(void *)v391 & 7;
    *((void *)v391 + 1) = v388;
    *(void *)(v396 + 8) = v391;
    *uint64_t v388 = *v388 & 7 | (unint64_t)v391;
    LODWORD(v1068[0]) = 1;
    uint64_t v1069 = 0;
    v1068[1] = 0;
    llvm::MachineInstr::addOperand(v391, v390, (const llvm::MachineOperand *)v1068);
    if (v1063)
    {
      int v397 = *(unsigned __int8 *)v1063;
      if ((v397 - 4) > 0x1E)
      {
        if ((v397 - 3) >= 0xFFFFFFFE) {
          long long v910 = v1063;
        }
        else {
          long long v910 = 0;
        }
        if ((v397 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v911 = (unint64_t)v910 + 8;
          goto LABEL_1498;
        }
        if (v397 == 3) {
          *((void *)v1063 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v1063 + 1) & 0x7F) == 2 || *((_DWORD *)v1063 + 3))
      {
        uint64_t v1000 = *((void *)v1063 + 2);
        if ((v1000 & 4) != 0)
        {
          unint64_t v911 = v1000 & 0xFFFFFFFFFFFFFFF8;
          if (v911)
          {
LABEL_1498:
            v1068[0] = &v1063;
            sub_1CC5FA668(v911 + 16, v1068);
          }
        }
      }
    }
    char v1015 = 1;
  }
  char v398 = *(llvm::MachineBasicBlock **)(v1011 + 328);
  int v1010 = v386;
  if (v398 == v1016) {
    goto LABEL_1309;
  }
  uint64_t v399 = *(llvm::MachineBasicBlock **)(v1011 + 328);
  do
  {
    for (uint64_t i = *((void *)v398 + 7);
          (llvm::MachineBasicBlock *)i != (llvm::MachineBasicBlock *)((char *)v398 + 48);
          uint64_t i = *(void *)(i + 8))
    {
      if (**(_WORD **)(i + 16) == 336) {
        *(unsigned char *)(v3 + 292) = 1;
      }
      if ((*(unsigned char *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          uint64_t i = *(void *)(i + 8);
      }
    }
    char v398 = (llvm::MachineBasicBlock *)*((void *)v398 + 1);
  }
  while (v398 != v1016);
  while (2)
  {
    uint64_t v1048 = v1050;
    uint64_t v1049 = 0x400000000;
    uint64_t v1014 = v399;
    uint64_t v401 = *((void *)v399 + 7);
    uint64_t v1040 = (char *)v399 + 48;
    if ((llvm::MachineBasicBlock *)v401 == (llvm::MachineBasicBlock *)((char *)v399 + 48))
    {
      char v800 = 0;
      goto LABEL_1308;
    }
    char v1029 = 0;
    while (2)
    {
      uint64_t v402 = *(void *)(v401 + 24);
      int v1032 = *(llvm::MachineFunction **)(v402 + 32);
      uint64_t v403 = (unsigned char *)*((void *)v1032 + 2);
      int v1044 = (llvm::MachineInstr *)v401;
      if (!v403[360]
        || (int v404 = **(unsigned __int16 **)(v401 + 16), v405 = sub_1CBE52E8C(v404), (v405 & 0xFF00000000) == 0)
        || ((v405 - 61) <= 0x3C
          ? (BOOL v406 = ((1 << (v405 - 61)) & 0x100037B180000007) == 0)
          : (BOOL v406 = 1),
            v406 && ((v405 - 190) <= 3 ? (BOOL v407 = v405 == 191) : (BOOL v407 = 1), v407)))
      {
        BOOL v408 = 0;
        uint64_t v409 = (const llvm::MachineBasicBlock *)v402;
      }
      else
      {
        uint64_t v465 = *(void *)(v3 + 264);
        v1046[0] = v401;
        v1046[1] = v465;
        int v1047 = v404;
        sub_1CBC2E8B4((int *)v1046, (uint64_t)v1068);
        sub_1CBC2EAB8(v1046, (uint64_t)v1068, 0, 0, 0, &v1060);
        if (v1068[0] != &v1069) {
          free(v1068[0]);
        }
        BOOL v1020 = v1061 != 0;
        if (v1061)
        {
          uint64_t v1070 = 0;
          memset(v1071, 0, 13);
          v1072 = v1074;
          uint64_t v1073 = 0x200000000;
          uint64_t v1075 = 0;
          uint64_t v1076 = v1078;
          uint64_t v1077 = 0x600000000;
          int v1082 = 0;
          unint64_t v1083 = v1085;
          uint64_t v1084 = 0x600000000;
          int v1086 = 0;
          uint64_t v1087 = v1089;
          uint64_t v1088 = 0x600000000;
          int v1090 = 0;
          unint64_t v1091 = v1093;
          uint64_t v1092 = 0x600000000;
          int v1094 = 0;
          uint64_t v466 = *(llvm::MachineBasicBlock **)(v401 + 24);
          llvm::RegScavenger::enterBasicBlockEnd((llvm::RegScavenger *)v1068, v466);
          while (v1071[0] != v401)
            llvm::RegScavenger::backward((llvm::RegScavenger *)v1068);
          llvm::RegScavenger::backward((llvm::RegScavenger *)v1068);
          uint64_t v577 = *((void *)v466 + 4);
          uint64_t v578 = *(void *)(v577 + 48);
          if (!v578)
          {
            uint64_t v578 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v577 + 8) + 216))(*(void *)(v577 + 8), v577 + 128, *((void *)v466 + 4));
            *(void *)(v577 + 48) = v578;
          }
          v1058[0] = v1059;
          v1058[1] = (void *)0x300000000;
          if (*(_DWORD *)(v578 + 512)) {
            sub_1CD41B6B0((uint64_t)v1058, v578 + 504);
          }
          uint64_t v1055 = v1057;
          uint64_t v1056 = 0x300000000;
          unsigned int v579 = *(_DWORD *)(*(void *)(v3 + 264) + 16);
          v1095.i64[0] = (uint64_t)&v1096;
          v1095.i32[3] = 6;
          int v1012 = v466;
          uint64_t v1013 = v402;
          if (v579 + 63 >= 0x1C0)
          {
            v1095.i32[2] = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v579 + 63 >= 0x40) {
            bzero(&v1096, 8 * ((v579 + 63) >> 6));
          }
          v1095.i32[2] = (v579 + 63) >> 6;
          unsigned int v1098 = v579;
          if (v1061)
          {
            unsigned int v1025 = 0;
            uint64_t v580 = (char *)v1060;
            uint64_t v1035 = (char *)v1060 + 8 * v1061;
            do
            {
              uint64_t v582 = *(unsigned int *)v580;
              uint64_t v581 = *((unsigned int *)v580 + 1);
              uint64_t RegClassConstraint = llvm::MachineInstr::getRegClassConstraint((llvm::MachineInstr *)v401, v581, *(const llvm::TargetInstrInfo **)(v1041 + 256), *(const llvm::TargetRegisterInfo **)(v1041 + 264));
              BOOL v584 = *(const llvm::TargetRegisterInfo **)(v1041 + 264);
              uint64_t v585 = llvm::MachineInstr::getRegClassConstraint((llvm::MachineInstr *)v401, v581, *(const llvm::TargetInstrInfo **)(v1041 + 256), v584);
              if (RegClassConstraint != v585)
              {
                if (RegClassConstraint) {
                  BOOL v586 = v585 == 0;
                }
                else {
                  BOOL v586 = 1;
                }
                if (v586
                  || (uint64_t v630 = *((void *)v584 + 30),
                      unint64_t v631 = (unint64_t)(*((void *)v584 + 31) - v630) >> 3,
                      !v631))
                {
                  uint64_t RegClassConstraint = 0;
                }
                else
                {
                  unsigned int v632 = 0;
                  uint64_t v633 = *(_DWORD **)(v585 + 8);
                  uint64_t v634 = *(_DWORD **)(RegClassConstraint + 8);
                  while (1)
                  {
                    unsigned int v635 = *v633 & *v634;
                    if (v635) {
                      break;
                    }
                    uint64_t RegClassConstraint = 0;
                    ++v633;
                    ++v634;
                    v632 += 32;
                    if (v632 >= v631) {
                      goto LABEL_838;
                    }
                  }
                  uint64_t RegClassConstraint = *(void *)(v630 + 8 * (__clz(__rbit32(v635)) + v632));
                }
              }
LABEL_838:
              llvm::RegScavenger::getRegsAvailable(v1068, (unsigned __int16 ***)RegClassConstraint, (uint64_t)&v1063);
              uint64_t v587 = v1064;
              if (v1095.i32[2] >= v1064) {
                uint64_t v588 = v1064;
              }
              else {
                uint64_t v588 = v1095.u32[2];
              }
              uint64_t v589 = (uint64_t *)v1063;
              if (v588)
              {
                unint64_t v590 = (uint64_t *)v1095.i64[0];
                uint64_t v591 = v1063;
                do
                {
                  uint64_t v592 = *v590++;
                  *v591++ &= ~v592;
                  --v588;
                }
                while (v588);
              }
              if (v587)
              {
                unint64_t v593 = 0;
                uint64_t v594 = 8 * v587;
                while (!v589[v593 / 8])
                {
                  v593 += 8;
                  if (v594 == v593) {
                    goto LABEL_848;
                  }
                }
              }
              else
              {
LABEL_848:
                llvm::RegScavenger::forward((uint64_t)v1068);
                uint64_t v595 = *((unsigned int *)v1058[0] + v1025);
                if (v1073 >= (unint64_t)HIDWORD(v1073)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                ++v1025;
                uint64_t v596 = (char *)v1072 + 16 * v1073;
                *uint64_t v596 = v595;
                v596[1] = 0;
                LODWORD(v1073) = v1073 + 1;
                unsigned int v597 = llvm::RegScavenger::scavengeRegisterBackwards(v1068, RegClassConstraint, (void *)v401, 0, 0, 1);
                uint64_t v589 = (uint64_t *)v1063;
                *((void *)v1063 + (v597 >> 6)) |= 1 << v597;
              }
              if (DWORD2(v1067))
              {
                uint64_t v598 = 0;
                uint64_t v599 = (DWORD2(v1067) - 1) & 0xFFFFFFC0;
                while (1)
                {
                  uint64_t v601 = *v589++;
                  uint64_t v600 = v601;
                  unint64_t v602 = v599 == v598 ? 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v1067) : -1;
                  unint64_t v603 = v602 & v600;
                  if (v603) {
                    break;
                  }
                  v598 += 64;
                  if (v599 + 64 == v598) {
                    goto LABEL_857;
                  }
                }
                unsigned int v604 = __clz(__rbit64(v603)) + v598;
              }
              else
              {
LABEL_857:
                unsigned int v604 = -1;
              }
              uint64_t v605 = *(void *)(v1041 + 264);
              unsigned int v606 = *(_DWORD *)(v605 + 16);
              uint64_t v607 = (v606 + 63) >> 6;
              v1051.i64[0] = (uint64_t)&v1052;
              v1051.i32[3] = 6;
              if (v606 + 63 >= 0x1C0)
              {
                v1051.i32[2] = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v606 + 63 >= 0x40) {
                bzero(&v1052, 8 * v607);
              }
              v1051.i32[2] = (v606 + 63) >> 6;
              unsigned int v1054 = v606;
              uint64_t v608 = v604;
              uint64_t v609 = *(void *)(v605 + 8);
              unint64_t v610 = *(unsigned int *)(v609 + 24 * v604 + 16);
              __int16 v611 = v610 & 0xF;
              uint64_t v612 = (v610 >> 3) & 0x1FFFFFFE;
              uint64_t v614 = *(void *)(v605 + 48);
              uint64_t v613 = *(void *)(v605 + 56);
              uint64_t v615 = (_WORD *)(v613 + v612);
              unsigned __int16 v616 = *v615 + v611 * v604;
              do
              {
                int v617 = *(unsigned __int16 *)(v614 + 4 * v616);
                if (*(_WORD *)(v614 + 4 * v616))
                {
                  int v618 = *(unsigned __int16 *)(v614 + 4 * v616 + 2);
                  uint64_t v619 = v1051.i64[0];
                  do
                  {
                    int v620 = v617;
                    int v617 = v618;
                    if (v613)
                    {
                      uint64_t v621 = (unsigned __int16 *)(v613
                                                + 2 * *(unsigned int *)(v609 + 24 * (unsigned __int16)v620 + 8));
                      do
                      {
                        *(void *)(v619 + 8 * ((unsigned __int16)v620 >> 6)) |= 1 << v620;
                        int v622 = *v621++;
                        v620 += v622;
                      }
                      while (v622);
                    }
                    int v618 = 0;
                  }
                  while ((_WORD)v617);
                }
                int v623 = (unsigned __int16)v615[1];
                ++v615;
                v616 += v623;
              }
              while (v623);
              if (v1098 < v606)
              {
                uint64_t v624 = v1095.u32[2];
                if ((v1098 & 0x3F) != 0) {
                  *(void *)(v1095.i64[0] + 8 * v1095.u32[2] - 8) &= ~(-1 << (v1098 & 0x3F));
                }
                unsigned int v1098 = v606;
                if (v624 != v607)
                {
                  if (v624 > v607)
                  {
                    v1095.i32[2] = (v606 + 63) >> 6;
                  }
                  else
                  {
                    if (v607 > v1095.i32[3]) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    if (v607 != v624) {
                      bzero((void *)(v1095.i64[0] + 8 * v624), 8 * (v607 - v624));
                    }
                    v1095.i32[2] = (v606 + 63) >> 6;
                    LOBYTE(v606) = v1098;
                  }
                }
                if ((v606 & 0x3F) != 0) {
                  *(void *)(v1095.i64[0] + 8 * v607 - 8) &= ~(-1 << (v606 & 0x3F));
                }
              }
              uint64_t v625 = v1051.u32[2];
              uint64_t v626 = (uint64_t *)v1051.i64[0];
              if (v1051.i32[2])
              {
                uint64_t v627 = (void *)v1095.i64[0];
                BOOL v628 = (uint64_t *)v1051.i64[0];
                do
                {
                  uint64_t v629 = *v628++;
                  *v627++ |= v629;
                  --v625;
                }
                while (v625);
              }
              uint64_t v401 = (uint64_t)v1044;
              if (v626 != &v1052) {
                free(v626);
              }
              if (v1056 >= (unint64_t)HIDWORD(v1056)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v1055 + v1056) = v608 | (v582 << 32);
              LODWORD(v1056) = v1056 + 1;
              llvm::MachineOperand::setReg(*((void *)v1044 + 4) + 32 * v581, v608);
              sub_1CC447034(&v1075, (unsigned __int16)v582, -1);
              if (v1063 != (char *)&v1064 + 8) {
                free(v1063);
              }
              v580 += 8;
            }
            while (v580 != v1035);
          }
          uint64_t v3 = v1041;
          if (v1056)
          {
            uint64_t v636 = (unint64_t *)v1055;
            uint64_t v637 = 8 * v1056;
            do
            {
              unint64_t v638 = *v636++;
              (*(void (**)(void, llvm::MachineBasicBlock *, uint64_t, uint64_t, void, unint64_t, uint64_t))(**(void **)(v1041 + 256) + 400))(*(void *)(v1041 + 256), v1012, v401, v401 + 56, v638, HIDWORD(v638), 1);
              v637 -= 8;
            }
            while (v637);
          }
          uint64_t v402 = v1013;
          if ((uint64_t *)v1095.i64[0] != &v1096) {
            free((void *)v1095.i64[0]);
          }
          if (v1055 != v1057) {
            free(v1055);
          }
          if (v1058[0] != v1059) {
            free(v1058[0]);
          }
          if (v1091 != v1093) {
            free(v1091);
          }
          if (v1087 != v1089) {
            free(v1087);
          }
          if (v1083 != v1085) {
            free(v1083);
          }
          if (v1076 != v1078) {
            free(v1076);
          }
          if (v1072 != v1074) {
            free(v1072);
          }
        }
        if (v1060 != &v1062) {
          free(v1060);
        }
        uint64_t v409 = *(const llvm::MachineBasicBlock **)(v401 + 24);
        uint64_t v403 = *(unsigned char **)(*((void *)v409 + 4) + 16);
        BOOL v408 = v1020;
      }
      if (v403[372])
      {
        int v706 = **(unsigned __int16 **)(v401 + 16);
        uint64_t v707 = sub_1CBE52E8C(v706);
        if ((v707 & 0xFF00000000) == 0
          || (v707 <= 0x25 ? (BOOL v708 = ((1 << v707) & 0x300C000000) == 0) : (BOOL v708 = 1),
              v708
           || (uint64_t v709 = sub_1CBDA6464(v706, 0x43u), v710 = *((void *)v1044 + 4) + 32 * v709,
                                                                *(unsigned char *)v710)))
        {
          BOOL v410 = 0;
        }
        else
        {
          uint64_t v776 = *(unsigned int *)(v710 + 4);
          uint64_t v777 = *(void *)(v1041 + 264);
          v1051.i64[0] = (uint64_t)v1044;
          v1051.i64[1] = v777;
          LODWORD(v1052) = v706;
          sub_1CD42D100(v1051.i32, (uint64_t)v1068);
          uint64_t v1037 = v776;
          BOOL v410 = sub_1CD42D240(v1051.i64, (uint64_t)v1068, v776, 0, 0);
          if (v1068[0] != &v1069) {
            free(v1068[0]);
          }
          if (v410)
          {
            uint64_t v1070 = 0;
            memset(v1071, 0, 13);
            v1072 = v1074;
            uint64_t v1073 = 0x200000000;
            uint64_t v1075 = 0;
            uint64_t v1076 = v1078;
            uint64_t v1077 = 0x600000000;
            int v1082 = 0;
            unint64_t v1083 = v1085;
            uint64_t v1084 = 0x600000000;
            int v1086 = 0;
            uint64_t v1087 = v1089;
            uint64_t v1088 = 0x600000000;
            int v1090 = 0;
            unint64_t v1091 = v1093;
            uint64_t v1092 = 0x600000000;
            int v1094 = 0;
            unsigned int v1026 = (llvm::MachineBasicBlock *)*((void *)v1044 + 3);
            llvm::RegScavenger::enterBasicBlockEnd((llvm::RegScavenger *)v1068, v1026);
            while ((llvm::MachineInstr *)v1071[0] != v1044)
              llvm::RegScavenger::backward((llvm::RegScavenger *)v1068);
            llvm::RegScavenger::backward((llvm::RegScavenger *)v1068);
            unsigned int v778 = *(const llvm::TargetRegisterInfo **)(v1041 + 264);
            unsigned int v779 = *((_DWORD *)v778 + 4);
            v1095.i64[0] = (uint64_t)&v1096;
            v1095.i32[3] = 6;
            if (v779 + 63 >= 0x1C0)
            {
              v1095.i32[2] = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v779 + 63 >= 0x40) {
              bzero(&v1096, 8 * ((v779 + 63) >> 6));
            }
            v1095.i32[2] = (v779 + 63) >> 6;
            unsigned int v1098 = v779;
            unsigned int v782 = (unsigned __int16 ***)llvm::MachineInstr::getRegClassConstraint(v1044, v709, *(const llvm::TargetInstrInfo **)(v1041 + 256), v778);
            llvm::RegScavenger::getRegsAvailable(v1068, v782, (uint64_t)&v1063);
            if (v1064)
            {
              int v783 = (uint64_t *)v1063;
              uint64_t v784 = 8 * v1064;
              uint64_t v785 = v1063;
              while (!*v785)
              {
                ++v785;
                v784 -= 8;
                if (!v784) {
                  goto LABEL_1265;
                }
              }
              if (DWORD2(v1067))
              {
                uint64_t v789 = 0;
                uint64_t v790 = (DWORD2(v1067) - 1) & 0xFFFFFFC0;
                while (1)
                {
                  uint64_t v792 = *v783++;
                  uint64_t v791 = v792;
                  unint64_t v793 = v790 == v789 ? 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v1067) : -1;
                  unint64_t v794 = v793 & v791;
                  if (v794) {
                    break;
                  }
                  v789 += 64;
                  if (v790 + 64 == v789) {
                    goto LABEL_1276;
                  }
                }
                unsigned int v795 = __clz(__rbit64(v794)) + v789;
              }
              else
              {
LABEL_1276:
                unsigned int v795 = -1;
              }
            }
            else
            {
LABEL_1265:
              llvm::RegScavenger::forward((uint64_t)v1068);
              uint64_t v786 = *(void *)(*((void *)v1044 + 3) + 32);
              uint64_t v787 = *(void *)(v786 + 48);
              if (!v787)
              {
                uint64_t v787 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v786 + 8) + 216))(*(void *)(v786 + 8), v786 + 128, v786);
                *(void *)(v786 + 48) = v787;
              }
              if (*(_DWORD *)(v787 + 512)) {
                uint64_t v788 = **(unsigned int **)(v787 + 504);
              }
              else {
                uint64_t v788 = 0;
              }
              if (v1073 >= (unint64_t)HIDWORD(v1073)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v796 = (char *)v1072 + 16 * v1073;
              *uint64_t v796 = v788;
              v796[1] = 0;
              LODWORD(v1073) = v1073 + 1;
              unsigned int v795 = llvm::RegScavenger::scavengeRegisterBackwards(v1068, (uint64_t)v782, v1044, 0, 0, 1);
              llvm::RegScavenger::backward((llvm::RegScavenger *)v1068);
            }
            (*(void (**)(void, llvm::MachineBasicBlock *, llvm::MachineInstr *, uint64_t, void, uint64_t, uint64_t))(**(void **)(v1041 + 256) + 400))(*(void *)(v1041 + 256), v1026, v1044, (uint64_t)v1044 + 56, v795, v1037, 1);
            llvm::MachineOperand::setReg(v710, v795);
            if (v1063 != (char *)&v1064 + 8) {
              free(v1063);
            }
            if ((uint64_t *)v1095.i64[0] != &v1096) {
              free((void *)v1095.i64[0]);
            }
            if (v1091 != v1093) {
              free(v1091);
            }
            if (v1087 != v1089) {
              free(v1087);
            }
            if (v1083 != v1085) {
              free(v1083);
            }
            if (v1076 != v1078) {
              free(v1076);
            }
            if (v1072 != v1074) {
              free(v1072);
            }
          }
          uint64_t v409 = (const llvm::MachineBasicBlock *)*((void *)v1044 + 3);
          uint64_t v403 = *(unsigned char **)(*((void *)v409 + 4) + 16);
        }
        uint64_t v3 = v1041;
      }
      else
      {
        BOOL v410 = 0;
      }
      if (!v403[381])
      {
        int v411 = 0;
        goto LABEL_621;
      }
      BOOL v1023 = v408;
      int v711 = **((unsigned __int16 **)v1044 + 2);
      if ((v711 - 541) > 8 || ((1 << (v711 - 29)) & 0x125) == 0)
      {
        int v411 = 0;
        goto LABEL_1171;
      }
      uint64_t v1036 = *((void *)v1044 + 4) + 32 * sub_1CBDA6464(v711, 0x3Bu);
      unsigned int v713 = *(_DWORD *)(v1036 + 4);
      unsigned int v714 = *(_DWORD **)(v1041 + 264);
      uint64_t v1069 = 0x600000000;
      v1068[1] = &v1070;
      v1068[0] = v714;
      int v715 = v714[11];
      v1074[2] = v715;
      unsigned int v716 = v715 + 63;
      if ((v715 + 63) < 0x40)
      {
        unsigned int v718 = 0;
      }
      else
      {
        uint64_t v717 = v716 >> 6;
        if (v716 >= 0x1C0) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        bzero(&v1070, 8 * v717);
        unsigned int v718 = v717;
        LODWORD(v1069) = v717;
      }
      if ((v715 & 0x3F) != 0) {
        v1071[v718 - 2] &= ~(-1 << (v715 & 0x3F));
      }
      llvm::LiveRegUnits::addLiveOuts((llvm::LiveRegUnits *)v1068, v409);
      if (v1068[0]) {
        uint64_t v719 = (char *)v1068[0] + 8;
      }
      else {
        uint64_t v719 = 0;
      }
      unint64_t v720 = *(unsigned int *)(*v719 + 24 * (unsigned __int16)v713 + 16);
      uint64_t v721 = (_WORD *)(v719[6] + ((v720 >> 3) & 0x1FFFFFFE));
      __int16 v723 = *v721;
      uint64_t v722 = v721 + 1;
      unsigned __int16 v724 = v723 + (v720 & 0xF) * v713;
      while (((*((void *)v1068[1] + (v724 >> 6)) >> v724) & 1) == 0)
      {
        int v725 = *v722++;
        v724 += v725;
        if (!v725)
        {
          uint64_t v727 = *((void *)v409 + 6);
          int v726 = (void *)((char *)v409 + 48);
          unint64_t v728 = v727 & 0xFFFFFFFFFFFFFFF8;
          if ((v727 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(unsigned char *)v728 & 4) == 0)
          {
            while ((*(_WORD *)(v728 + 44) & 4) != 0)
              unint64_t v728 = *(void *)v728 & 0xFFFFFFFFFFFFFFF8;
          }
          if ((llvm::MachineInstr *)v728 == v1044) {
            goto LABEL_1114;
          }
          char v729 = 0;
          do
          {
            BOOL v730 = llvm::MachineInstr::findRegisterDefOperandIdx(v728, v713, 0, 0, *(void *)(v1041 + 264)) == -1;
            int RegisterUseOperandIdx = llvm::MachineInstr::findRegisterUseOperandIdx(v728, v713, 0, *(void *)(v1041 + 264));
            uint64_t v732 = *(void *)v728;
            if (RegisterUseOperandIdx == -1) {
              v729 &= v730;
            }
            else {
              char v729 = 1;
            }
            unint64_t v728 = v732 & 0xFFFFFFFFFFFFFFF8;
            if ((v732 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(unsigned char *)v728 & 4) == 0)
            {
              while ((*(_WORD *)(v728 + 44) & 4) != 0)
                unint64_t v728 = *(void *)v728 & 0xFFFFFFFFFFFFFFF8;
            }
          }
          while ((llvm::MachineInstr *)v728 != v1044);
          if ((v729 & 1) == 0)
          {
LABEL_1114:
            unint64_t v733 = *(void *)v1044 & 0xFFFFFFFFFFFFFFF8;
            if (!v733 || (*(unsigned char *)v733 & 4) == 0)
            {
              while ((*(_WORD *)(v733 + 44) & 4) != 0)
                unint64_t v733 = *(void *)v733 & 0xFFFFFFFFFFFFFFF8;
            }
            while ((void *)v733 != v726)
            {
              if (llvm::MachineInstr::findRegisterDefOperandIdx(v733, v713, 0, 0, *(void *)(v1041 + 264)) != -1)goto LABEL_1098; {
              if (llvm::MachineInstr::findRegisterUseOperandIdx(v733, v713, 0, *(void *)(v1041 + 264)) != -1)
              }
                break;
              unint64_t v733 = *(void *)v733 & 0xFFFFFFFFFFFFFFF8;
              if (!v733 || (*(unsigned char *)v733 & 4) == 0)
              {
                while ((*(_WORD *)(v733 + 44) & 4) != 0)
                  unint64_t v733 = *(void *)v733 & 0xFFFFFFFFFFFFFFF8;
              }
            }
          }
          break;
        }
      }
      unint64_t v733 = 0;
LABEL_1098:
      if (v1068[1] != &v1070) {
        free(v1068[1]);
      }
      uint64_t v3 = v1041;
      if (!v733) {
        goto LABEL_1109;
      }
      uint64_t v734 = **(unsigned __int16 **)(v733 + 16);
      uint64_t v735 = sub_1CBE52E8C(v734);
      if ((v735 & 0xFF00000000) == 0) {
        llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
      }
      int v736 = v735;
      uint64_t v3 = v1041;
      if (v735 != 69 && v735 != 50)
      {
LABEL_1109:
        uint64_t v738 = *((void *)v1044 + 3);
        *(_OWORD *)v1068 = xmmword_1CDB165C0;
        unsigned int v739 = sub_1CBE0418C(148, 4, v1068);
        v1095.i64[0] = 0;
        v740 = sub_1CD3C8EB4(v738, (uint64_t)v1044, (unsigned __int8 **)&v1095, *(void *)(*(void *)(v3 + 256) + 8) + 48 * v739, 74);
        uint64_t v742 = v741;
        LODWORD(v1068[0]) = 1;
        v1068[1] = 0;
        uint64_t v1069 = 0;
        llvm::MachineInstr::addOperand(v741, v740, (const llvm::MachineOperand *)v1068);
        v1068[1] = 0;
        HIDWORD(v1068[0]) = v713;
        LODWORD(v1068[0]) = 0;
        uint64_t v1069 = 0;
        uint64_t v1070 = 0;
        llvm::MachineInstr::addOperand(v742, v740, (const llvm::MachineOperand *)v1068);
        LODWORD(v1068[0]) = 1;
        v1068[1] = 0;
        uint64_t v1069 = 0;
        llvm::MachineInstr::addOperand(v742, v740, (const llvm::MachineOperand *)v1068);
        LODWORD(v1068[0]) = 1;
        v1068[1] = 0;
        uint64_t v1069 = 1;
        llvm::MachineInstr::addOperand(v742, v740, (const llvm::MachineOperand *)v1068);
        if (v1095.i64[0])
        {
          int v743 = *(unsigned __int8 *)v1095.i64[0];
          if ((v743 - 4) > 0x1E)
          {
            if ((v743 - 3) >= 0xFFFFFFFE) {
              uint64_t v780 = v1095.i64[0];
            }
            else {
              uint64_t v780 = 0;
            }
            if ((v743 - 3) < 0xFFFFFFFE)
            {
              if (v743 == 3) {
                *(void *)(v1095.i64[0] + 8) = 0;
              }
              goto LABEL_1113;
            }
            unint64_t v781 = v780 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v1095.i64[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v1095.i64[0] + 12)) {
              goto LABEL_1113;
            }
            uint64_t v797 = *(void *)(v1095.i64[0] + 16);
            if ((v797 & 4) == 0) {
              goto LABEL_1113;
            }
            unint64_t v781 = v797 & 0xFFFFFFFFFFFFFFF8;
            if (!v781) {
              goto LABEL_1113;
            }
          }
          v1068[0] = &v1095;
          sub_1CC5FA668(v781 + 16, v1068);
        }
LABEL_1113:
        llvm::MachineOperand::setReg(v1036, 0x4Au);
        sub_1CBAD7F90((uint64_t)v1044, 8, 12);
        int v411 = 1;
LABEL_1171:
        uint64_t v3 = v1041;
        BOOL v408 = v1023;
        goto LABEL_621;
      }
      if (sub_1CBDB2780(v734, 20, 0) == 13) {
        int v737 = 12;
      }
      else {
        int v737 = 13;
      }
      sub_1CBAD7F90(v733, 20, v737);
      sub_1CBAD7F90((uint64_t)v1044, 8, 12);
      int v411 = 1;
      if (v736 == 50) {
        goto LABEL_1171;
      }
      uint64_t v3 = v1041;
      BOOL v408 = v1023;
      if (v736 != 69) {
        goto LABEL_1109;
      }
LABEL_621:
      unsigned int v412 = v1044;
      unsigned int v413 = **((unsigned __int16 **)v1044 + 2);
      if (v413 > 0x12F)
      {
        if (v413 != 6167)
        {
          if (v413 == 336) {
            goto LABEL_661;
          }
          if (v413 != 304) {
            goto LABEL_679;
          }
LABEL_628:
          if (!*(unsigned char *)(v3 + 289)
            || ((int v414 = (*(unsigned __int16 *)(*(void *)v1032 + 18) >> 4) & 0x3FF) != 0
              ? (BOOL v415 = v414 == 8)
              : (BOOL v415 = 1),
                v415
             || v414 == 255
             || (int v416 = (llvm::MachineFunction **)*((void *)v1032 + 41),
                 v416 != (llvm::MachineFunction **)((char *)v1032 + 320))
             && v416[1] != (llvm::MachineFunction *)((char *)v1032 + 320)))
          {
LABEL_641:
            unsigned int v420 = (llvm::MachineBasicBlock *)*((void *)v1044 + 3);
            unsigned int v1034 = v420;
            if (v413 == 260)
            {
              sub_1CBBFE62C(v420);
              int64x2_t v1095 = 0uLL;
              v1095.i64[0] = sub_1CBAF9204((uint64_t)v420, (unint64_t *)v1044, (unsigned __int8 **)v1044 + 7, *(void *)(v3 + 256));
              v1095.i64[1] = v421;
              uint64_t v422 = *(void *)(*(void *)(v3 + 256) + 8);
              BOOL v423 = (llvm::MachineFunction *)*((void *)v420 + 4);
              unsigned int v424 = (void *)*((void *)v1044 + 7);
              uint64_t v1063 = v424;
              if (v424) {
                llvm::MetadataTracking::track((uint64_t)&v1063, (unsigned __int8 *)v424, 2);
              }
              uint64_t v425 = llvm::MachineFunction::CreateMachineInstr(v423, v422 + 26304, (unsigned __int8 **)&v1063, 0);
              if (!v1063)
              {
LABEL_645:
                uint64_t v426 = *((void *)v420 + 5);
                *((void *)v425 + 3) = v426;
                uint64_t v427 = *(void *)(v426 + 32);
                uint64_t v428 = *((unsigned int *)v425 + 10);
                if (v428)
                {
                  uint64_t v639 = *((void *)v425 + 4);
                  uint64_t v640 = *(void *)(v427 + 40);
                  uint64_t v641 = 32 * v428;
                  do
                  {
                    if (!*(unsigned char *)v639)
                    {
                      uint64_t v642 = *(unsigned int *)(v639 + 4);
                      if ((int)v642 >= 0) {
                        unint64_t v643 = (uint64_t *)(*(void *)(v640 + 272) + 8 * v642);
                      }
                      else {
                        unint64_t v643 = (uint64_t *)(*(void *)(v640 + 24) + 16 * (v642 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v644 = *v643;
                      if (*v643)
                      {
                        uint64_t v645 = *(void *)(v644 + 16);
                        *(void *)(v644 + 16) = v639;
                        *(void *)(v639 + 16) = v645;
                        if (*(unsigned char *)(v639 + 3))
                        {
                          *(void *)(v639 + 24) = v644;
                        }
                        else
                        {
                          *(void *)(v639 + 24) = 0;
                          unint64_t v643 = (uint64_t *)(v645 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v639 + 16) = v639;
                        *(void *)(v639 + 24) = 0;
                      }
                      uint64_t *v643 = v639;
                    }
                    v639 += 32;
                    v641 -= 32;
                  }
                  while (v641);
                }
                uint64_t v429 = *(void *)(v427 + 728);
                if (v429) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v429 + 24))(v429, v425);
                }
                unint64_t v430 = *(void *)v412 & 0xFFFFFFFFFFFFFFF8;
                *(void *)uint64_t v425 = v430 | *(void *)v425 & 7;
                *((void *)v425 + 1) = v412;
                *(void *)(v430 + 8) = v425;
                *(void *)unsigned int v412 = *(void *)v412 & 7 | (unint64_t)v425;
                LODWORD(v1068[0]) = 1;
                v1068[1] = 0;
                uint64_t v1069 = 0;
                llvm::MachineInstr::addOperand(v425, v423, (const llvm::MachineOperand *)v1068);
                v1068[1] = 0;
                v1068[0] = (void *)0x200000000;
                uint64_t v1069 = 0;
                uint64_t v1070 = 0;
                llvm::MachineInstr::addOperand(v425, v423, (const llvm::MachineOperand *)v1068);
                LODWORD(v1068[0]) = 1;
                v1068[1] = 0;
                uint64_t v1069 = 2;
                llvm::MachineInstr::addOperand(v425, v423, (const llvm::MachineOperand *)v1068);
                uint64_t v431 = *(void *)(*(void *)(v3 + 256) + 8);
                uint64_t v432 = (llvm::MachineFunction *)*((void *)v420 + 4);
                unint64_t v433 = (void *)*((void *)v412 + 7);
                uint64_t v1063 = v433;
                if (v433) {
                  llvm::MetadataTracking::track((uint64_t)&v1063, (unsigned __int8 *)v433, 2);
                }
                unsigned int v434 = llvm::MachineFunction::CreateMachineInstr(v432, v431 + 20064, (unsigned __int8 **)&v1063, 0);
                if (!v1063)
                {
LABEL_651:
                  uint64_t v435 = *((void *)v420 + 5);
                  *((void *)v434 + 3) = v435;
                  uint64_t v436 = *(void *)(v435 + 32);
                  uint64_t v437 = *((unsigned int *)v434 + 10);
                  if (v437)
                  {
                    uint64_t v646 = *((void *)v434 + 4);
                    uint64_t v647 = *(void *)(v436 + 40);
                    uint64_t v648 = 32 * v437;
                    do
                    {
                      if (!*(unsigned char *)v646)
                      {
                        uint64_t v649 = *(unsigned int *)(v646 + 4);
                        if ((int)v649 >= 0) {
                          uint64_t v650 = (uint64_t *)(*(void *)(v647 + 272) + 8 * v649);
                        }
                        else {
                          uint64_t v650 = (uint64_t *)(*(void *)(v647 + 24) + 16 * (v649 & 0x7FFFFFFF) + 8);
                        }
                        uint64_t v651 = *v650;
                        if (*v650)
                        {
                          uint64_t v652 = *(void *)(v651 + 16);
                          *(void *)(v651 + 16) = v646;
                          *(void *)(v646 + 16) = v652;
                          if (*(unsigned char *)(v646 + 3))
                          {
                            *(void *)(v646 + 24) = v651;
                          }
                          else
                          {
                            *(void *)(v646 + 24) = 0;
                            uint64_t v650 = (uint64_t *)(v652 + 24);
                          }
                        }
                        else
                        {
                          *(void *)(v646 + 16) = v646;
                          *(void *)(v646 + 24) = 0;
                        }
                        uint64_t *v650 = v646;
                      }
                      v646 += 32;
                      v648 -= 32;
                    }
                    while (v648);
                  }
                  uint64_t v438 = *(void *)(v436 + 728);
                  if (v438) {
                    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v438 + 24))(v438, v434);
                  }
                  unint64_t v439 = *(void *)v412 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)unsigned int v434 = v439 | *(void *)v434 & 7;
                  *((void *)v434 + 1) = v412;
                  *(void *)(v439 + 8) = v434;
                  *(void *)unsigned int v412 = *(void *)v412 & 7 | (unint64_t)v434;
                  LODWORD(v1068[0]) = 1;
                  v1068[1] = 0;
                  uint64_t v1069 = 0;
                  llvm::MachineInstr::addOperand(v434, v432, (const llvm::MachineOperand *)v1068);
                  llvm::MachineInstr::addOperand(v434, v432, *((const llvm::MachineOperand **)v412 + 4));
                  uint64_t v440 = *(void *)(*(void *)(v3 + 256) + 8);
                  unsigned int v441 = (llvm::MachineFunction *)*((void *)v420 + 4);
                  int v442 = (void *)*((void *)v412 + 7);
                  uint64_t v1063 = v442;
                  if (v442) {
                    llvm::MetadataTracking::track((uint64_t)&v1063, (unsigned __int8 *)v442, 2);
                  }
                  uint64_t v443 = llvm::MachineFunction::CreateMachineInstr(v441, v440 + 26112, (unsigned __int8 **)&v1063, 0);
                  if (!v1063) {
                    goto LABEL_657;
                  }
                  int v750 = *(unsigned __int8 *)v1063;
                  if ((v750 - 4) > 0x1E)
                  {
                    if ((v750 - 3) >= 0xFFFFFFFE) {
                      v770 = v1063;
                    }
                    else {
                      v770 = 0;
                    }
                    if ((v750 - 3) < 0xFFFFFFFE)
                    {
                      uint64_t v3 = v1041;
                      unsigned int v412 = v1044;
                      if (v750 == 3) {
                        *((void *)v1063 + 1) = 0;
                      }
                      goto LABEL_657;
                    }
                    unint64_t v752 = (unint64_t)v770 + 8;
                  }
                  else
                  {
                    uint64_t v3 = v1041;
                    unsigned int v412 = v1044;
                    if ((*((unsigned char *)v1063 + 1) & 0x7F) != 2 && !*((_DWORD *)v1063 + 3)) {
                      goto LABEL_657;
                    }
                    uint64_t v751 = *((void *)v1063 + 2);
                    if ((v751 & 4) == 0) {
                      goto LABEL_657;
                    }
                    unint64_t v752 = v751 & 0xFFFFFFFFFFFFFFF8;
                    if (!v752) {
                      goto LABEL_657;
                    }
                  }
                  v1068[0] = &v1063;
                  sub_1CC5FA668(v752 + 16, v1068);
                  uint64_t v3 = v1041;
                  unsigned int v412 = v1044;
LABEL_657:
                  uint64_t v444 = *((void *)v420 + 5);
                  *((void *)v443 + 3) = v444;
                  uint64_t v445 = *(void *)(v444 + 32);
                  uint64_t v446 = *((unsigned int *)v443 + 10);
                  if (v446)
                  {
                    uint64_t v653 = *((void *)v443 + 4);
                    uint64_t v654 = *(void *)(v445 + 40);
                    uint64_t v655 = 32 * v446;
                    do
                    {
                      if (!*(unsigned char *)v653)
                      {
                        uint64_t v656 = *(unsigned int *)(v653 + 4);
                        if ((int)v656 >= 0) {
                          uint64_t v657 = (uint64_t *)(*(void *)(v654 + 272) + 8 * v656);
                        }
                        else {
                          uint64_t v657 = (uint64_t *)(*(void *)(v654 + 24) + 16 * (v656 & 0x7FFFFFFF) + 8);
                        }
                        uint64_t v658 = *v657;
                        if (*v657)
                        {
                          uint64_t v659 = *(void *)(v658 + 16);
                          *(void *)(v658 + 16) = v653;
                          *(void *)(v653 + 16) = v659;
                          if (*(unsigned char *)(v653 + 3))
                          {
                            *(void *)(v653 + 24) = v658;
                          }
                          else
                          {
                            *(void *)(v653 + 24) = 0;
                            uint64_t v657 = (uint64_t *)(v659 + 24);
                          }
                        }
                        else
                        {
                          *(void *)(v653 + 16) = v653;
                          *(void *)(v653 + 24) = 0;
                        }
                        *uint64_t v657 = v653;
                      }
                      v653 += 32;
                      v655 -= 32;
                    }
                    while (v655);
                  }
                  uint64_t v447 = *(void *)(v445 + 728);
                  if (v447) {
                    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v447 + 24))(v447, v443);
                  }
                  unint64_t v448 = *(void *)v412 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)uint64_t v443 = v448 | *(void *)v443 & 7;
                  *((void *)v443 + 1) = v412;
                  *(void *)(v448 + 8) = v443;
                  *(void *)unsigned int v412 = *(void *)v412 & 7 | (unint64_t)v443;
                  LODWORD(v1068[0]) = 1;
                  v1068[1] = 0;
                  uint64_t v1069 = 0;
                  llvm::MachineInstr::addOperand(v443, v441, (const llvm::MachineOperand *)v1068);
                  LODWORD(v1068[0]) = 1;
                  v1068[1] = 0;
                  uint64_t v1069 = 2;
                  llvm::MachineInstr::addOperand(v443, v441, (const llvm::MachineOperand *)v1068);
                  sub_1CBAF92D0(v420, (unint64_t *)v412, *((unsigned __int8 **)v412 + 7), *(void *)(v3 + 256), &v1095);
                  unsigned int k = (unint64_t *)v412;
LABEL_813:
                  llvm::MachineInstr::copyImplicitOps(v434, v1032, (const llvm::MachineInstr *)v412);
                  if (v1049 >= (unint64_t)HIDWORD(v1049)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v1048 + v1049) = v412;
                  LODWORD(v1049) = v1049 + 1;
                  unsigned int v412 = k;
                  goto LABEL_815;
                }
                int v747 = *(unsigned __int8 *)v1063;
                if ((v747 - 4) > 0x1E)
                {
                  if ((v747 - 3) >= 0xFFFFFFFE) {
                    uint64_t v769 = v1063;
                  }
                  else {
                    uint64_t v769 = 0;
                  }
                  if ((v747 - 3) < 0xFFFFFFFE)
                  {
                    uint64_t v3 = v1041;
                    unsigned int v412 = v1044;
                    if (v747 == 3) {
                      *((void *)v1063 + 1) = 0;
                    }
                    goto LABEL_651;
                  }
                  unint64_t v749 = (unint64_t)v769 + 8;
                }
                else
                {
                  uint64_t v3 = v1041;
                  unsigned int v412 = v1044;
                  if ((*((unsigned char *)v1063 + 1) & 0x7F) != 2 && !*((_DWORD *)v1063 + 3)) {
                    goto LABEL_651;
                  }
                  uint64_t v748 = *((void *)v1063 + 2);
                  if ((v748 & 4) == 0) {
                    goto LABEL_651;
                  }
                  unint64_t v749 = v748 & 0xFFFFFFFFFFFFFFF8;
                  if (!v749) {
                    goto LABEL_651;
                  }
                }
                v1068[0] = &v1063;
                sub_1CC5FA668(v749 + 16, v1068);
                uint64_t v3 = v1041;
                unsigned int v412 = v1044;
                goto LABEL_651;
              }
              int v744 = *(unsigned __int8 *)v1063;
              if ((v744 - 4) > 0x1E)
              {
                if ((v744 - 3) >= 0xFFFFFFFE) {
                  unint64_t v768 = v1063;
                }
                else {
                  unint64_t v768 = 0;
                }
                if ((v744 - 3) < 0xFFFFFFFE)
                {
                  uint64_t v3 = v1041;
                  unsigned int v412 = v1044;
                  if (v744 == 3) {
                    *((void *)v1063 + 1) = 0;
                  }
                  goto LABEL_645;
                }
                unint64_t v746 = (unint64_t)v768 + 8;
              }
              else
              {
                uint64_t v3 = v1041;
                unsigned int v412 = v1044;
                if ((*((unsigned char *)v1063 + 1) & 0x7F) != 2 && !*((_DWORD *)v1063 + 3)) {
                  goto LABEL_645;
                }
                uint64_t v745 = *((void *)v1063 + 2);
                if ((v745 & 4) == 0) {
                  goto LABEL_645;
                }
                unint64_t v746 = v745 & 0xFFFFFFFFFFFFFFF8;
                if (!v746) {
                  goto LABEL_645;
                }
              }
              v1068[0] = &v1063;
              sub_1CC5FA668(v746 + 16, v1068);
              uint64_t v3 = v1041;
              unsigned int v412 = v1044;
              goto LABEL_645;
            }
            uint64_t v1030 = (llvm::MachineFunction *)*((void *)v420 + 4);
            v1068[0] = &v1069;
            v1068[1] = (void *)0x1000000000;
            uint64_t v449 = *((void *)v420 + 11);
            uint64_t v450 = *((void *)v420 + 12);
            if (v449 == v450)
            {
              unsigned int v451 = 0;
            }
            else
            {
              unsigned int v451 = 0;
              do
              {
                uint64_t v452 = *(unsigned __int16 **)(*(void *)v449 + 152);
                for (uint64_t j = *(unsigned __int16 **)(*(void *)v449 + 160); v452 != j; v452 += 8)
                {
                  if (v451 >= HIDWORD(v1068[1])) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_DWORD *)v1068[0] + v451) = *v452;
                  unsigned int v451 = ++LODWORD(v1068[1]);
                }
                v449 += 8;
              }
              while (v449 != v450);
            }
            uint64_t v467 = v1044;
            for (unsigned int k = (unint64_t *)((char *)v420 + 48);
                  v467 != (llvm::MachineBasicBlock *)((char *)v420 + 48);
                  uint64_t v467 = (llvm::MachineInstr *)*((void *)v467 + 1))
            {
              uint64_t v468 = *((unsigned int *)v467 + 10);
              if (v468)
              {
                uint64_t v469 = 32 * v468;
                uint64_t v470 = (_DWORD *)(*((void *)v467 + 4) + 4);
                do
                {
                  if ((*(v470 - 1) & 0x10000FF) == 0)
                  {
                    if (v451 >= HIDWORD(v1068[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((_DWORD *)v1068[0] + v451) = *v470;
                    unsigned int v451 = ++LODWORD(v1068[1]);
                  }
                  v470 += 8;
                  v469 -= 32;
                }
                while (v469);
                if (!v467) {
                  goto LABEL_701;
                }
              }
              if ((*(unsigned char *)v467 & 4) == 0)
              {
LABEL_701:
                while ((*((_WORD *)v467 + 22) & 8) != 0)
                  uint64_t v467 = (llvm::MachineInstr *)*((void *)v467 + 1);
              }
            }
            unint64_t v471 = 126 - 2 * __clz(v451);
            if (v451) {
              uint64_t v472 = v471;
            }
            else {
              uint64_t v472 = 0;
            }
            sub_1CB945E18((uint64_t)v1068[0], (unsigned int *)v1068[0] + v451, (uint64_t)&v1095, v472, 1);
            uint64_t v473 = v1068[0];
            uint64_t v474 = (char *)v1068[0] + 4 * LODWORD(v1068[1]);
            if (LODWORD(v1068[1]))
            {
              uint64_t v475 = (char *)v1068[0] - 4;
              uint64_t v476 = 4 * LODWORD(v1068[1]) - 4;
              while (v476)
              {
                int v477 = *((_DWORD *)v475 + 1);
                int v478 = *((_DWORD *)v475 + 2);
                v475 += 4;
                v476 -= 4;
                if (v477 == v478) {
                  goto LABEL_712;
                }
              }
            }
            else
            {
              uint64_t v475 = (char *)v1068[0];
LABEL_712:
              if (v475 != v474)
              {
                uint64_t v479 = v475 + 8;
                if (v475 + 8 != v474)
                {
                  int v480 = *(_DWORD *)v475;
                  do
                  {
                    int v481 = v480;
                    int v480 = *(_DWORD *)v479;
                    if (v481 != *(_DWORD *)v479)
                    {
                      *((_DWORD *)v475 + 1) = v480;
                      v475 += 4;
                    }
                    v479 += 4;
                  }
                  while (v479 != v474);
                }
                uint64_t v474 = v475 + 4;
              }
            }
            LODWORD(v1068[1]) = (unint64_t)(v474 - v473) >> 2;
            unsigned int v482 = (char *)*((void *)v420 + 11);
            int v483 = (char *)*((void *)v420 + 12);
            v1095.i64[0] = (uint64_t)&v1096;
            v1095.i64[1] = 0x800000000;
            unint64_t v484 = v483 - v482;
            if ((unint64_t)(v483 - v482) >= 0x41) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v482 != v483)
            {
              unint64_t v485 = (void *)v1095.i64[0];
              do
              {
                uint64_t v486 = *(void *)v482;
                v482 += 8;
                *v485++ = v486;
              }
              while (v482 != v483);
            }
            v1095.i32[2] = v484 >> 3;
            unsigned int v487 = (const llvm::BasicBlock *)*((void *)v420 + 2);
            uint64_t v488 = v1030;
            uint64_t v489 = (llvm::MachineBasicBlock *)*((void *)v1030 + 39);
            if (v489)
            {
              *((void *)v1030 + 39) = *(void *)v489;
            }
            else
            {
              *((void *)v1030 + 26) += 232;
              uint64_t v490 = *((void *)v1030 + 16);
              if (((v490 + 7) & 0xFFFFFFFFFFFFFFF8) - v490 + 232 > *((void *)v1030 + 17) - v490)
              {
                unsigned int v699 = *((_DWORD *)v1030 + 38) >> 7;
                if (v699 >= 0x1E) {
                  LOBYTE(v699) = 30;
                }
                uint64_t v700 = 4096 << v699;
                uint64_t v489 = (llvm::MachineBasicBlock *)operator new(4096 << v699, (std::align_val_t)8uLL);
                unint64_t v701 = *((unsigned int *)v1030 + 38);
                if (v701 >= *((unsigned int *)v1030 + 39)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v488 = v1030;
                *(void *)(*((void *)v1030 + 18) + 8 * v701) = v489;
                ++*((_DWORD *)v1030 + 38);
                *((void *)v1030 + 16) = (char *)v489 + 232;
                *((void *)v1030 + 17) = (char *)v489 + v700;
              }
              else
              {
                uint64_t v489 = (llvm::MachineBasicBlock *)((v490 + 7) & 0xFFFFFFFFFFFFFFF8);
                *((void *)v1030 + 16) = (char *)v489 + 232;
              }
            }
            llvm::MachineBasicBlock::MachineBasicBlock(v489, v488, v487);
            uint64_t v491 = (llvm::MachineBasicBlock **)*((void *)v420 + 1);
            unsigned int v1021 = (llvm::MachineFunction *)((char *)v488 + 320);
            llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v488 + 320, (uint64_t)v489);
            uint64_t v492 = *v491;
            *(void *)uint64_t v489 = *v491;
            *((void *)v489 + 1) = v491;
            *((void *)v492 + 1) = v489;
            *uint64_t v491 = v489;
            uint64_t v493 = (unint64_t *)*((void *)v489 + 7);
            int v494 = v1044;
            if ((*(unsigned char *)v1044 & 4) == 0)
            {
              int v494 = v1044;
              if ((*((_WORD *)v1044 + 22) & 8) != 0)
              {
                int v494 = v1044;
                do
                  int v494 = (llvm::MachineInstr *)*((void *)v494 + 1);
                while ((*((_WORD *)v494 + 22) & 8) != 0);
              }
            }
            unsigned int v495 = (unint64_t *)*((void *)v494 + 1);
            if (v495 != k && v493 != k)
            {
              if (v489 != v420)
              {
                unint64_t v688 = *((void *)v489 + 5);
                uint64_t v689 = v495;
                do
                {
                  v689[3] = v688;
                  uint64_t v689 = (unint64_t *)v689[1];
                }
                while (v689 != k);
              }
              unint64_t v497 = *k;
              unint64_t v498 = *k & 0xFFFFFFFFFFFFFFF8;
              unint64_t v499 = *v495 & 0xFFFFFFFFFFFFFFF8;
              *(void *)(v499 + 8) = k;
              *unsigned int k = v499 | v497 & 7;
              unint64_t v500 = *v493 & 0xFFFFFFFFFFFFFFF8;
              *(void *)(v498 + 8) = v493;
              *unsigned int v495 = v500 | *v495 & 7;
              *(void *)(v500 + 8) = v495;
              *uint64_t v493 = v497 & 0xFFFFFFFFFFFFFFF8 | *v493 & 7;
            }
            llvm::MachineBasicBlock::transferSuccessorsAndUpdatePHIs((unsigned int *)v489, v420);
            if (LODWORD(v1068[1]))
            {
              uint64_t v501 = (char *)v1068[0];
              uint64_t v502 = (char *)v1068[0] + 4 * LODWORD(v1068[1]);
              do
              {
                int v503 = *(_DWORD *)v501;
                if (*(_DWORD *)v501)
                {
                  uint64_t v505 = (char *)*((void *)v489 + 20);
                  unint64_t v504 = *((void *)v489 + 21);
                  if ((unint64_t)v505 >= v504)
                  {
                    uint64_t v507 = (char *)*((void *)v489 + 19);
                    uint64_t v508 = (v505 - v507) >> 4;
                    unint64_t v509 = v508 + 1;
                    if ((unint64_t)(v508 + 1) >> 60) {
LABEL_1744:
                    }
                      abort();
                    uint64_t v510 = v504 - (void)v507;
                    if (v510 >> 3 > v509) {
                      unint64_t v509 = v510 >> 3;
                    }
                    if ((unint64_t)v510 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v511 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v511 = v509;
                    }
                    if (v511)
                    {
                      if (v511 >> 60) {
LABEL_1747:
                      }
                        sub_1CB833614();
                      uint64_t v512 = (char *)operator new(16 * v511);
                    }
                    else
                    {
                      uint64_t v512 = 0;
                    }
                    int v513 = &v512[16 * v508];
                    *(_WORD *)int v513 = v503;
                    *((void *)v513 + 1) = -1;
                    BOOL v514 = v513;
                    if (v505 != v507)
                    {
                      do
                      {
                        *((_OWORD *)v514 - 1) = *((_OWORD *)v505 - 1);
                        v514 -= 16;
                        v505 -= 16;
                      }
                      while (v505 != v507);
                      uint64_t v505 = (char *)*((void *)v489 + 19);
                    }
                    unsigned int v515 = &v512[16 * v511];
                    uint64_t v506 = v513 + 16;
                    *((void *)v489 + 19) = v514;
                    *((void *)v489 + 20) = v513 + 16;
                    *((void *)v489 + 21) = v515;
                    if (v505) {
                      operator delete(v505);
                    }
                  }
                  else
                  {
                    *(_WORD *)uint64_t v505 = v503;
                    *((void *)v505 + 1) = -1;
                    uint64_t v506 = v505 + 16;
                  }
                  *((void *)v489 + 20) = v506;
                }
                v501 += 4;
              }
              while (v501 != v502);
            }
            uint64_t v516 = v1034;
            uint64_t v517 = (const llvm::BasicBlock *)*((void *)v1034 + 2);
            uint64_t v518 = *((void *)v1030 + 39);
            if (v518)
            {
              *((void *)v1030 + 39) = *(void *)v518;
              uint64_t v520 = (unint64_t *)v1044;
            }
            else
            {
              *((void *)v1030 + 26) += 232;
              uint64_t v519 = *((void *)v1030 + 16);
              uint64_t v520 = (unint64_t *)v1044;
              if (((v519 + 7) & 0xFFFFFFFFFFFFFFF8) - v519 + 232 > *((void *)v1030 + 17) - v519)
              {
                unsigned int v702 = *((_DWORD *)v1030 + 38) >> 7;
                if (v702 >= 0x1E) {
                  LOBYTE(v702) = 30;
                }
                uint64_t v703 = 4096 << v702;
                uint64_t v518 = (uint64_t)operator new(4096 << v702, (std::align_val_t)8uLL);
                unint64_t v704 = *((unsigned int *)v1030 + 38);
                if (v704 >= *((unsigned int *)v1030 + 39)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*((void *)v1030 + 18) + 8 * v704) = v518;
                ++*((_DWORD *)v1030 + 38);
                *((void *)v1030 + 16) = v518 + 232;
                *((void *)v1030 + 17) = v518 + v703;
              }
              else
              {
                uint64_t v518 = (v519 + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)v1030 + 16) = v518 + 232;
              }
            }
            llvm::MachineBasicBlock::MachineBasicBlock((llvm::MachineBasicBlock *)v518, v1030, v517);
            uint64_t v521 = (uint64_t *)*((void *)v1034 + 1);
            llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v1021, v518);
            uint64_t v522 = *v521;
            *(void *)uint64_t v518 = *v521;
            *(void *)(v518 + 8) = v521;
            *(void *)(v522 + 8) = v518;
            *uint64_t v521 = v518;
            sub_1CB9173F0(v518, *(unint64_t **)(v518 + 56), (uint64_t)v1034, v520);
            llvm::MachineBasicBlock::addSuccessor(v1034, (void *)v518, -1);
            uint64_t v1031 = v489;
            if (LODWORD(v1068[1]))
            {
              unsigned int v523 = (char *)v1068[0];
              unsigned int v524 = (char *)v1068[0] + 4 * LODWORD(v1068[1]);
              do
              {
                int v525 = *(_DWORD *)v523;
                if (*(_DWORD *)v523)
                {
                  int v527 = *(char **)(v518 + 160);
                  unint64_t v526 = *(void *)(v518 + 168);
                  if ((unint64_t)v527 >= v526)
                  {
                    uint64_t v529 = v518;
                    unsigned int v530 = *(char **)(v518 + 152);
                    uint64_t v531 = (v527 - v530) >> 4;
                    unint64_t v532 = v531 + 1;
                    if ((unint64_t)(v531 + 1) >> 60) {
                      goto LABEL_1744;
                    }
                    uint64_t v533 = v526 - (void)v530;
                    if (v533 >> 3 > v532) {
                      unint64_t v532 = v533 >> 3;
                    }
                    if ((unint64_t)v533 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v534 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v534 = v532;
                    }
                    if (v534)
                    {
                      if (v534 >> 60) {
                        goto LABEL_1747;
                      }
                      uint64_t v535 = (char *)operator new(16 * v534);
                    }
                    else
                    {
                      uint64_t v535 = 0;
                    }
                    unint64_t v536 = &v535[16 * v531];
                    *(_WORD *)unint64_t v536 = v525;
                    *((void *)v536 + 1) = -1;
                    int v537 = v536;
                    if (v527 == v530)
                    {
                      uint64_t v516 = v1034;
                      uint64_t v518 = v529;
                    }
                    else
                    {
                      uint64_t v516 = v1034;
                      do
                      {
                        *((_OWORD *)v537 - 1) = *((_OWORD *)v527 - 1);
                        v537 -= 16;
                        v527 -= 16;
                      }
                      while (v527 != v530);
                      uint64_t v518 = v529;
                      int v527 = *(char **)(v529 + 152);
                    }
                    unint64_t v538 = &v535[16 * v534];
                    int v528 = v536 + 16;
                    *(void *)(v518 + 152) = v537;
                    *(void *)(v518 + 160) = v536 + 16;
                    *(void *)(v518 + 168) = v538;
                    uint64_t v489 = v1031;
                    if (v527) {
                      operator delete(v527);
                    }
                  }
                  else
                  {
                    *(_WORD *)int v527 = v525;
                    *((void *)v527 + 1) = -1;
                    int v528 = v527 + 16;
                  }
                  *(void *)(v518 + 160) = v528;
                }
                v523 += 4;
              }
              while (v523 != v524);
            }
            llvm::MachineBasicBlock::addSuccessor((void *)v518, (void *)v518, -1);
            unsigned int v1022 = (llvm::MachineMemOperand *)v518;
            llvm::MachineBasicBlock::addSuccessor((void *)v518, v489, -1);
            sub_1CBBFE62C(v516);
            int64x2_t v1051 = 0uLL;
            uint64_t v3 = v1041;
            v1051.i64[0] = sub_1CBAF9204((uint64_t)v516, k, (unsigned __int8 **)v1044 + 7, *(void *)(v1041 + 256));
            v1051.i64[1] = v539;
            uint64_t v540 = *(void *)(*(void *)(v1041 + 256) + 8);
            uint64_t v541 = (llvm::MachineFunction *)*((void *)v516 + 4);
            unint64_t v542 = (void *)*((void *)v1044 + 7);
            v1060 = v542;
            if (v542) {
              llvm::MetadataTracking::track((uint64_t)&v1060, (unsigned __int8 *)v542, 2);
            }
            uint64_t v543 = llvm::MachineFunction::CreateMachineInstr(v541, v540 + 26304, (unsigned __int8 **)&v1060, 0);
            if (!v1060)
            {
LABEL_788:
              uint64_t v544 = *((void *)v516 + 5);
              *((void *)v543 + 3) = v544;
              uint64_t v545 = *(void *)(v544 + 32);
              uint64_t v546 = *((unsigned int *)v543 + 10);
              if (v546)
              {
                uint64_t v660 = *((void *)v543 + 4);
                uint64_t v661 = *(void *)(v545 + 40);
                uint64_t v662 = 32 * v546;
                do
                {
                  if (!*(unsigned char *)v660)
                  {
                    uint64_t v663 = *(unsigned int *)(v660 + 4);
                    if ((int)v663 >= 0) {
                      uint64_t v664 = (uint64_t *)(*(void *)(v661 + 272) + 8 * v663);
                    }
                    else {
                      uint64_t v664 = (uint64_t *)(*(void *)(v661 + 24) + 16 * (v663 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v665 = *v664;
                    if (*v664)
                    {
                      uint64_t v666 = *(void *)(v665 + 16);
                      *(void *)(v665 + 16) = v660;
                      *(void *)(v660 + 16) = v666;
                      if (*(unsigned char *)(v660 + 3))
                      {
                        *(void *)(v660 + 24) = v665;
                      }
                      else
                      {
                        *(void *)(v660 + 24) = 0;
                        uint64_t v664 = (uint64_t *)(v666 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v660 + 16) = v660;
                      *(void *)(v660 + 24) = 0;
                    }
                    uint64_t *v664 = v660;
                  }
                  v660 += 32;
                  v662 -= 32;
                }
                while (v662);
              }
              uint64_t v547 = *(void *)(v545 + 728);
              if (v547) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v547 + 24))(v547, v543);
              }
              unint64_t v548 = *k & 0xFFFFFFFFFFFFFFF8;
              *(void *)uint64_t v543 = v548 | *(void *)v543 & 7;
              *((void *)v543 + 1) = k;
              *(void *)(v548 + 8) = v543;
              *unsigned int k = *k & 7 | (unint64_t)v543;
              LODWORD(v1063) = 1;
              long long v1064 = 0uLL;
              llvm::MachineInstr::addOperand(v543, v541, (const llvm::MachineOperand *)&v1063);
              long long v1064 = 0uLL;
              uint64_t v1063 = (void *)0x200000000;
              *(void *)&long long v1065 = 0;
              llvm::MachineInstr::addOperand(v543, v541, (const llvm::MachineOperand *)&v1063);
              LODWORD(v1063) = 1;
              *(void *)&long long v1064 = 0;
              *((void *)&v1064 + 1) = 2;
              llvm::MachineInstr::addOperand(v543, v541, (const llvm::MachineOperand *)&v1063);
              uint64_t v549 = (unint64_t *)*((void *)v489 + 7);
              uint64_t v550 = *(void *)(*(void *)(v3 + 256) + 8);
              uint64_t v551 = (llvm::MachineFunction *)*((void *)v489 + 4);
              uint64_t v552 = (void *)*((void *)v1044 + 7);
              v1060 = v552;
              if (v552) {
                llvm::MetadataTracking::track((uint64_t)&v1060, (unsigned __int8 *)v552, 2);
              }
              uint64_t v553 = llvm::MachineFunction::CreateMachineInstr(v551, v550 + 26112, (unsigned __int8 **)&v1060, 0);
              if (!v1060)
              {
LABEL_794:
                uint64_t v554 = *((void *)v489 + 5);
                *((void *)v553 + 3) = v554;
                uint64_t v555 = *(void *)(v554 + 32);
                uint64_t v556 = *((unsigned int *)v553 + 10);
                if (v556)
                {
                  uint64_t v667 = *((void *)v553 + 4);
                  uint64_t v668 = *(void *)(v555 + 40);
                  uint64_t v669 = 32 * v556;
                  do
                  {
                    if (!*(unsigned char *)v667)
                    {
                      uint64_t v670 = *(unsigned int *)(v667 + 4);
                      if ((int)v670 >= 0) {
                        unsigned int v671 = (uint64_t *)(*(void *)(v668 + 272) + 8 * v670);
                      }
                      else {
                        unsigned int v671 = (uint64_t *)(*(void *)(v668 + 24) + 16 * (v670 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v672 = *v671;
                      if (*v671)
                      {
                        uint64_t v673 = *(void *)(v672 + 16);
                        *(void *)(v672 + 16) = v667;
                        *(void *)(v667 + 16) = v673;
                        if (*(unsigned char *)(v667 + 3))
                        {
                          *(void *)(v667 + 24) = v672;
                        }
                        else
                        {
                          *(void *)(v667 + 24) = 0;
                          unsigned int v671 = (uint64_t *)(v673 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v667 + 16) = v667;
                        *(void *)(v667 + 24) = 0;
                      }
                      uint64_t *v671 = v667;
                    }
                    v667 += 32;
                    v669 -= 32;
                  }
                  while (v669);
                }
                uint64_t v557 = *(void *)(v555 + 728);
                if (v557) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v557 + 24))(v557, v553);
                }
                unint64_t v558 = *v549 & 0xFFFFFFFFFFFFFFF8;
                *(void *)uint64_t v553 = v558 | *(void *)v553 & 7;
                *((void *)v553 + 1) = v549;
                *(void *)(v558 + 8) = v553;
                *uint64_t v549 = *v549 & 7 | (unint64_t)v553;
                LODWORD(v1063) = 1;
                long long v1064 = 0uLL;
                llvm::MachineInstr::addOperand(v553, v551, (const llvm::MachineOperand *)&v1063);
                LODWORD(v1063) = 1;
                *(void *)&long long v1064 = 0;
                *((void *)&v1064 + 1) = 2;
                llvm::MachineInstr::addOperand(v553, v551, (const llvm::MachineOperand *)&v1063);
                unsigned int v412 = v1044;
                sub_1CBAF92D0(v489, v549, *((unsigned __int8 **)v1044 + 7), *(void *)(v3 + 256), &v1051);
                int v559 = *(_DWORD *)(*((void *)v1044 + 4) + 4);
                uint64_t v560 = *(void *)(*(void *)(v3 + 256) + 8);
                uint64_t v561 = (llvm::MachineFunction *)*((void *)v1022 + 4);
                uint64_t v562 = (void *)*((void *)v1044 + 7);
                v1060 = v562;
                if (v562) {
                  llvm::MetadataTracking::track((uint64_t)&v1060, (unsigned __int8 *)v562, 2);
                }
                unsigned int v434 = llvm::MachineFunction::CreateMachineInstr(v561, v560 + 25824, (unsigned __int8 **)&v1060, 0);
                if (!v1060)
                {
LABEL_800:
                  uint64_t v563 = *((void *)v1022 + 5);
                  *((void *)v434 + 3) = v563;
                  uint64_t v564 = *(void *)(v563 + 32);
                  uint64_t v565 = *((unsigned int *)v434 + 10);
                  if (v565)
                  {
                    uint64_t v674 = *((void *)v434 + 4);
                    uint64_t v675 = *(void *)(v564 + 40);
                    uint64_t v676 = 32 * v565;
                    do
                    {
                      if (!*(unsigned char *)v674)
                      {
                        uint64_t v677 = *(unsigned int *)(v674 + 4);
                        if ((int)v677 >= 0) {
                          unsigned int v678 = (uint64_t *)(*(void *)(v675 + 272) + 8 * v677);
                        }
                        else {
                          unsigned int v678 = (uint64_t *)(*(void *)(v675 + 24) + 16 * (v677 & 0x7FFFFFFF) + 8);
                        }
                        uint64_t v679 = *v678;
                        if (*v678)
                        {
                          uint64_t v680 = *(void *)(v679 + 16);
                          *(void *)(v679 + 16) = v674;
                          *(void *)(v674 + 16) = v680;
                          if (*(unsigned char *)(v674 + 3))
                          {
                            *(void *)(v674 + 24) = v679;
                          }
                          else
                          {
                            *(void *)(v674 + 24) = 0;
                            unsigned int v678 = (uint64_t *)(v680 + 24);
                          }
                        }
                        else
                        {
                          *(void *)(v674 + 16) = v674;
                          *(void *)(v674 + 24) = 0;
                        }
                        *unsigned int v678 = v674;
                      }
                      v674 += 32;
                      v676 -= 32;
                    }
                    while (v676);
                  }
                  uint64_t v566 = *(void *)(v564 + 728);
                  if (v566) {
                    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v566 + 24))(v566, v434);
                  }
                  unint64_t v567 = *(void *)v412 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)unsigned int v434 = v567 | *(void *)v434 & 7;
                  *((void *)v434 + 1) = v412;
                  *(void *)(v567 + 8) = v434;
                  *(void *)unsigned int v412 = *(void *)v412 & 7 | (unint64_t)v434;
                  LODWORD(v1063) = 1;
                  long long v1064 = 0uLL;
                  llvm::MachineInstr::addOperand(v434, v561, (const llvm::MachineOperand *)&v1063);
                  long long v1064 = 0uLL;
                  HIDWORD(v1063) = v559;
                  LODWORD(v1063) = 0;
                  *(void *)&long long v1065 = 0;
                  llvm::MachineInstr::addOperand(v434, v561, (const llvm::MachineOperand *)&v1063);
                  LODWORD(v1063) = 1;
                  long long v1064 = 0uLL;
                  llvm::MachineInstr::addOperand(v434, v561, (const llvm::MachineOperand *)&v1063);
                  uint64_t v568 = *(void *)(*(void *)(v3 + 256) + 8);
                  uint64_t v569 = (llvm::MachineFunction *)*((void *)v1022 + 4);
                  uint64_t v570 = (void *)*((void *)v412 + 7);
                  v1060 = v570;
                  if (v570) {
                    llvm::MetadataTracking::track((uint64_t)&v1060, (unsigned __int8 *)v570, 2);
                  }
                  uint64_t v571 = llvm::MachineFunction::CreateMachineInstr(v569, v568 + 20256, (unsigned __int8 **)&v1060, 0);
                  if (!v1060) {
                    goto LABEL_806;
                  }
                  int v762 = *(unsigned __int8 *)v1060;
                  if ((v762 - 4) > 0x1E)
                  {
                    if ((v762 - 3) >= 0xFFFFFFFE) {
                      int v774 = v1060;
                    }
                    else {
                      int v774 = 0;
                    }
                    if ((v762 - 3) < 0xFFFFFFFE)
                    {
                      uint64_t v3 = v1041;
                      unsigned int v412 = v1044;
                      if (v762 == 3) {
                        *((void *)v1060 + 1) = 0;
                      }
                      goto LABEL_806;
                    }
                    unint64_t v764 = (unint64_t)v774 + 8;
                  }
                  else
                  {
                    uint64_t v3 = v1041;
                    unsigned int v412 = v1044;
                    if ((*((unsigned char *)v1060 + 1) & 0x7F) != 2 && !*((_DWORD *)v1060 + 3)) {
                      goto LABEL_806;
                    }
                    uint64_t v763 = *((void *)v1060 + 2);
                    if ((v763 & 4) == 0) {
                      goto LABEL_806;
                    }
                    unint64_t v764 = v763 & 0xFFFFFFFFFFFFFFF8;
                    if (!v764) {
                      goto LABEL_806;
                    }
                  }
                  uint64_t v1063 = &v1060;
                  sub_1CC5FA668(v764 + 16, &v1063);
                  uint64_t v3 = v1041;
                  unsigned int v412 = v1044;
LABEL_806:
                  uint64_t v572 = *((void *)v1022 + 5);
                  *((void *)v571 + 3) = v572;
                  uint64_t v573 = *(void *)(v572 + 32);
                  uint64_t v574 = *((unsigned int *)v571 + 10);
                  if (v574)
                  {
                    uint64_t v681 = *((void *)v571 + 4);
                    uint64_t v682 = *(void *)(v573 + 40);
                    uint64_t v683 = 32 * v574;
                    do
                    {
                      if (!*(unsigned char *)v681)
                      {
                        uint64_t v684 = *(unsigned int *)(v681 + 4);
                        if ((int)v684 >= 0) {
                          unsigned int v685 = (uint64_t *)(*(void *)(v682 + 272) + 8 * v684);
                        }
                        else {
                          unsigned int v685 = (uint64_t *)(*(void *)(v682 + 24) + 16 * (v684 & 0x7FFFFFFF) + 8);
                        }
                        uint64_t v686 = *v685;
                        if (*v685)
                        {
                          uint64_t v687 = *(void *)(v686 + 16);
                          *(void *)(v686 + 16) = v681;
                          *(void *)(v681 + 16) = v687;
                          if (*(unsigned char *)(v681 + 3))
                          {
                            *(void *)(v681 + 24) = v686;
                          }
                          else
                          {
                            *(void *)(v681 + 24) = 0;
                            unsigned int v685 = (uint64_t *)(v687 + 24);
                          }
                        }
                        else
                        {
                          *(void *)(v681 + 16) = v681;
                          *(void *)(v681 + 24) = 0;
                        }
                        *unsigned int v685 = v681;
                      }
                      v681 += 32;
                      v683 -= 32;
                    }
                    while (v683);
                  }
                  uint64_t v575 = *(void *)(v573 + 728);
                  if (v575) {
                    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v575 + 24))(v575, v571);
                  }
                  unint64_t v576 = *(void *)v412 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)uint64_t v571 = v576 | *(void *)v571 & 7;
                  *((void *)v571 + 1) = v412;
                  *(void *)(v576 + 8) = v571;
                  *(void *)unsigned int v412 = *(void *)v412 & 7 | (unint64_t)v571;
                  LODWORD(v1063) = 1;
                  long long v1064 = 0uLL;
                  llvm::MachineInstr::addOperand(v571, v569, (const llvm::MachineOperand *)&v1063);
                  *(void *)&long long v1064 = 0;
                  *((void *)&v1064 + 1) = v1022;
                  LODWORD(v1063) = 4;
                  llvm::MachineInstr::addOperand(v571, v569, (const llvm::MachineOperand *)&v1063);
                  if ((uint64_t *)v1095.i64[0] != &v1096) {
                    free((void *)v1095.i64[0]);
                  }
                  if (v1068[0] != &v1069) {
                    free(v1068[0]);
                  }
                  goto LABEL_813;
                }
                int v759 = *(unsigned __int8 *)v1060;
                if ((v759 - 4) > 0x1E)
                {
                  if ((v759 - 3) >= 0xFFFFFFFE) {
                    v773 = v1060;
                  }
                  else {
                    v773 = 0;
                  }
                  if ((v759 - 3) < 0xFFFFFFFE)
                  {
                    uint64_t v3 = v1041;
                    unsigned int v412 = v1044;
                    if (v759 == 3) {
                      *((void *)v1060 + 1) = 0;
                    }
                    goto LABEL_800;
                  }
                  unint64_t v761 = (unint64_t)v773 + 8;
                }
                else
                {
                  uint64_t v3 = v1041;
                  unsigned int v412 = v1044;
                  if ((*((unsigned char *)v1060 + 1) & 0x7F) != 2 && !*((_DWORD *)v1060 + 3)) {
                    goto LABEL_800;
                  }
                  uint64_t v760 = *((void *)v1060 + 2);
                  if ((v760 & 4) == 0) {
                    goto LABEL_800;
                  }
                  unint64_t v761 = v760 & 0xFFFFFFFFFFFFFFF8;
                  if (!v761) {
                    goto LABEL_800;
                  }
                }
                uint64_t v1063 = &v1060;
                sub_1CC5FA668(v761 + 16, &v1063);
                uint64_t v3 = v1041;
                unsigned int v412 = v1044;
                goto LABEL_800;
              }
              int v756 = *(unsigned __int8 *)v1060;
              if ((v756 - 4) > 0x1E)
              {
                if ((v756 - 3) >= 0xFFFFFFFE) {
                  unsigned int v772 = v1060;
                }
                else {
                  unsigned int v772 = 0;
                }
                if ((v756 - 3) < 0xFFFFFFFE)
                {
                  uint64_t v3 = v1041;
                  uint64_t v489 = v1031;
                  if (v756 == 3) {
                    *((void *)v1060 + 1) = 0;
                  }
                  goto LABEL_794;
                }
                unint64_t v758 = (unint64_t)v772 + 8;
              }
              else
              {
                uint64_t v3 = v1041;
                uint64_t v489 = v1031;
                if ((*((unsigned char *)v1060 + 1) & 0x7F) != 2 && !*((_DWORD *)v1060 + 3)) {
                  goto LABEL_794;
                }
                uint64_t v757 = *((void *)v1060 + 2);
                if ((v757 & 4) == 0) {
                  goto LABEL_794;
                }
                unint64_t v758 = v757 & 0xFFFFFFFFFFFFFFF8;
                if (!v758) {
                  goto LABEL_794;
                }
              }
              uint64_t v1063 = &v1060;
              sub_1CC5FA668(v758 + 16, &v1063);
              uint64_t v3 = v1041;
              uint64_t v489 = v1031;
              goto LABEL_794;
            }
            int v753 = *(unsigned __int8 *)v1060;
            if ((v753 - 4) > 0x1E)
            {
              if ((v753 - 3) >= 0xFFFFFFFE) {
                int v771 = v1060;
              }
              else {
                int v771 = 0;
              }
              if ((v753 - 3) < 0xFFFFFFFE)
              {
                uint64_t v3 = v1041;
                uint64_t v516 = v1034;
                uint64_t v489 = v1031;
                if (v753 == 3) {
                  *((void *)v1060 + 1) = 0;
                }
                goto LABEL_788;
              }
              unint64_t v755 = (unint64_t)v771 + 8;
            }
            else
            {
              uint64_t v3 = v1041;
              uint64_t v516 = v1034;
              uint64_t v489 = v1031;
              if ((*((unsigned char *)v1060 + 1) & 0x7F) != 2 && !*((_DWORD *)v1060 + 3)) {
                goto LABEL_788;
              }
              uint64_t v754 = *((void *)v1060 + 2);
              if ((v754 & 4) == 0) {
                goto LABEL_788;
              }
              unint64_t v755 = v754 & 0xFFFFFFFFFFFFFFF8;
              if (!v755) {
                goto LABEL_788;
              }
            }
            uint64_t v1063 = &v1060;
            sub_1CC5FA668(v755 + 16, &v1063);
            uint64_t v3 = v1041;
            uint64_t v516 = v1034;
            uint64_t v489 = v1031;
            goto LABEL_788;
          }
          uint64_t v417 = *(void *)(v3 + 256);
          BOOL v418 = *((void *)v1044 + 7) != 0;
          v1095.i64[0] = 0;
          sub_1CBAECAFC(v417, v402, (unint64_t *)v1044, 0, 267, 1, v418, (unsigned __int8 **)&v1095, 0);
          if (v1095.i64[0])
          {
            int v419 = *(unsigned __int8 *)v1095.i64[0];
            if ((v419 - 4) > 0x1E)
            {
              if ((v419 - 3) >= 0xFFFFFFFE) {
                uint64_t v697 = v1095.i64[0];
              }
              else {
                uint64_t v697 = 0;
              }
              if ((v419 - 3) < 0xFFFFFFFE)
              {
                if (v419 == 3) {
                  *(void *)(v1095.i64[0] + 8) = 0;
                }
                goto LABEL_640;
              }
              unint64_t v698 = v697 + 8;
            }
            else
            {
              if ((*(unsigned char *)(v1095.i64[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v1095.i64[0] + 12)) {
                goto LABEL_640;
              }
              uint64_t v705 = *(void *)(v1095.i64[0] + 16);
              if ((v705 & 4) == 0) {
                goto LABEL_640;
              }
              unint64_t v698 = v705 & 0xFFFFFFFFFFFFFFF8;
              if (!v698) {
                goto LABEL_640;
              }
            }
            v1068[0] = &v1095;
            sub_1CC5FA668(v698 + 16, v1068);
          }
LABEL_640:
          *(unsigned char *)(v3 + 289) = 0;
          unsigned int v413 = **((unsigned __int16 **)v1044 + 2);
          goto LABEL_641;
        }
        uint64_t v454 = *(void *)(*(void *)(v3 + 256) + 8);
        uint64_t v455 = *(unsigned __int8 *)(v454 + 296021);
        uint64_t v456 = *(unsigned __int8 *)(v454 + 20405);
        uint64_t v457 = *(llvm::MachineFunction **)(v402 + 32);
        uint64_t v458 = (unsigned __int8 *)*((void *)v1044 + 7);
        v1095.i64[0] = (uint64_t)v458;
        if (v458) {
          llvm::MetadataTracking::track((uint64_t)&v1095, v458, 2);
        }
        BOOL v459 = llvm::MachineFunction::CreateMachineInstr(v457, v454 + 20400, (unsigned __int8 **)&v1095, 0);
        if (v1095.i64[0])
        {
          int v765 = *(unsigned __int8 *)v1095.i64[0];
          if ((v765 - 4) > 0x1E)
          {
            if ((v765 - 3) >= 0xFFFFFFFE) {
              uint64_t v775 = v1095.i64[0];
            }
            else {
              uint64_t v775 = 0;
            }
            if ((v765 - 3) < 0xFFFFFFFE)
            {
              uint64_t v3 = v1041;
              unsigned int v412 = v1044;
              if (v765 == 3) {
                *(void *)(v1095.i64[0] + 8) = 0;
              }
              goto LABEL_675;
            }
            unint64_t v767 = v775 + 8;
          }
          else
          {
            uint64_t v3 = v1041;
            unsigned int v412 = v1044;
            if ((*(unsigned char *)(v1095.i64[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v1095.i64[0] + 12)) {
              goto LABEL_675;
            }
            uint64_t v766 = *(void *)(v1095.i64[0] + 16);
            if ((v766 & 4) == 0) {
              goto LABEL_675;
            }
            unint64_t v767 = v766 & 0xFFFFFFFFFFFFFFF8;
            if (!v767) {
              goto LABEL_675;
            }
          }
          v1068[0] = &v1095;
          sub_1CC5FA668(v767 + 16, v1068);
          uint64_t v3 = v1041;
          unsigned int v412 = v1044;
        }
LABEL_675:
        uint64_t v460 = *(void *)(v402 + 40);
        *((void *)v459 + 3) = v460;
        uint64_t v461 = *(void *)(v460 + 32);
        uint64_t v462 = *((unsigned int *)v459 + 10);
        if (v462)
        {
          uint64_t v690 = *((void *)v459 + 4);
          uint64_t v691 = *(void *)(v461 + 40);
          uint64_t v692 = 32 * v462;
          do
          {
            if (!*(unsigned char *)v690)
            {
              uint64_t v693 = *(unsigned int *)(v690 + 4);
              if ((int)v693 >= 0) {
                uint64_t v694 = (uint64_t *)(*(void *)(v691 + 272) + 8 * v693);
              }
              else {
                uint64_t v694 = (uint64_t *)(*(void *)(v691 + 24) + 16 * (v693 & 0x7FFFFFFF) + 8);
              }
              uint64_t v695 = *v694;
              if (*v694)
              {
                uint64_t v696 = *(void *)(v695 + 16);
                *(void *)(v695 + 16) = v690;
                *(void *)(v690 + 16) = v696;
                if (*(unsigned char *)(v690 + 3))
                {
                  *(void *)(v690 + 24) = v695;
                }
                else
                {
                  *(void *)(v690 + 24) = 0;
                  uint64_t v694 = (uint64_t *)(v696 + 24);
                }
              }
              else
              {
                *(void *)(v690 + 16) = v690;
                *(void *)(v690 + 24) = 0;
              }
              uint64_t *v694 = v690;
            }
            v690 += 32;
            v692 -= 32;
          }
          while (v692);
        }
        uint64_t v463 = *(void *)(v461 + 728);
        if (v463) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v463 + 24))(v463, v459);
        }
        unint64_t v464 = *(void *)v412 & 0xFFFFFFFFFFFFFFF8;
        *(void *)BOOL v459 = v464 | *(void *)v459 & 7;
        *((void *)v459 + 1) = v412;
        *(void *)(v464 + 8) = v459;
        *(void *)unsigned int v412 = *(void *)v412 & 7 | (unint64_t)v459;
        LODWORD(v1068[0]) = 1;
        v1068[1] = 0;
        uint64_t v1069 = 0;
        llvm::MachineInstr::addOperand(v459, v457, (const llvm::MachineOperand *)v1068);
        LODWORD(v1068[0]) = 1;
        v1068[1] = 0;
        uint64_t v1069 = v456 + v455;
        llvm::MachineInstr::addOperand(v459, v457, (const llvm::MachineOperand *)v1068);
        goto LABEL_815;
      }
      if (v413 - 260 < 2) {
        goto LABEL_628;
      }
      if (v413 != 266)
      {
LABEL_679:
        if (((v408 || v410) | v411) != 1) {
          goto LABEL_816;
        }
        goto LABEL_815;
      }
LABEL_661:
      if (v1049 >= (unint64_t)HIDWORD(v1049)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v1048 + v1049) = v1044;
      LODWORD(v1049) = v1049 + 1;
LABEL_815:
      char v1029 = 1;
      if (v412 == v1040) {
        break;
      }
LABEL_816:
      if ((*(unsigned char *)v412 & 4) == 0)
      {
        while ((*((_WORD *)v412 + 22) & 8) != 0)
          unsigned int v412 = (void *)*((void *)v412 + 1);
      }
      uint64_t v401 = *((void *)v412 + 1);
      if ((void *)v401 != v1040) {
        continue;
      }
      break;
    }
    uint64_t v798 = (llvm::MachineInstr **)v1048;
    if (v1049)
    {
      uint64_t v799 = 8 * v1049;
      char v800 = v1029;
      do
      {
        int v801 = *v798++;
        llvm::MachineInstr::eraseFromParent(v801);
        v799 -= 8;
      }
      while (v799);
      uint64_t v798 = (llvm::MachineInstr **)v1048;
    }
    else
    {
      char v800 = v1029;
    }
    if (v798 != (llvm::MachineInstr **)v1050) {
      free(v798);
    }
LABEL_1308:
    v1015 |= v800;
    uint64_t v399 = (llvm::MachineBasicBlock *)*((void *)v1014 + 1);
    if (v399 != v1016) {
      continue;
    }
    break;
  }
LABEL_1309:
  uint64_t v802 = *(void *)(v1011 + 48);
  if (!v802)
  {
    uint64_t v802 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v1011 + 8) + 216))(*(void *)(v1011 + 8), v1011 + 128, v1011);
    *(void *)(v1011 + 48) = v802;
  }
  int v803 = *(_DWORD *)(v802 + 564);
  if (v803)
  {
    v1068[0] = (void *)((uint64_t)(v803 + (v803 < 0 ? 3 : 0)) >> 2);
    v1068[1] = 0;
    uint64_t v804 = *(void *)(v1011 + 328);
    uint64_t v805 = *(unint64_t **)(v804 + 56);
    uint64_t v1063 = 0;
    sub_1CBAF8720(v804, v805, 0, *(void *)(v3 + 256), (uint64_t *)v1068);
    if (v1063)
    {
      int v806 = *(unsigned __int8 *)v1063;
      if ((v806 - 4) > 0x1E)
      {
        if ((v806 - 3) >= 0xFFFFFFFE) {
          uint64_t v908 = v1063;
        }
        else {
          uint64_t v908 = 0;
        }
        if ((v806 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v909 = (unint64_t)v908 + 8;
          goto LABEL_1492;
        }
        if (v806 == 3) {
          *((void *)v1063 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v1063 + 1) & 0x7F) == 2 || *((_DWORD *)v1063 + 3))
      {
        uint64_t v999 = *((void *)v1063 + 2);
        if ((v999 & 4) != 0)
        {
          unint64_t v909 = v999 & 0xFFFFFFFFFFFFFFF8;
          if (v909)
          {
LABEL_1492:
            v1095.i64[0] = (uint64_t)&v1063;
            sub_1CC5FA668(v909 + 16, &v1095);
          }
        }
      }
    }
    char v1015 = 1;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC04E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC04E8))
  {
    byte_1EBCC04E0 = 1;
    __cxa_guard_release(&qword_1EBCC04E8);
  }
  if ((byte_1EBCC04E0 & 1) != 0 || (v1010 - 101) > 3 || v1010 == 102) {
    goto LABEL_1331;
  }
  uint64_t v807 = *(void *)(v3 + 248);
  if (*(unsigned char *)(v807 + 321))
  {
    int v808 = *(void **)(v1011 + 328);
    uint64_t v809 = (uint64_t *)v808[7];
    uint64_t v1063 = 0;
    uint64_t v810 = *(void *)(*(void *)(v3 + 256) + 8) + 47760;
    int v811 = (llvm::MachineFunction *)v808[4];
    v1095.i64[0] = 0;
    uint64_t v812 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v811, v810, (unsigned __int8 **)&v1095, 0);
    if (!v1095.i64[0]) {
      goto LABEL_1323;
    }
    int v1005 = *(unsigned __int8 *)v1095.i64[0];
    if ((v1005 - 4) > 0x1E)
    {
      if ((v1005 - 3) >= 0xFFFFFFFE) {
        uint64_t v1009 = v1095.i64[0];
      }
      else {
        uint64_t v1009 = 0;
      }
      if ((v1005 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v1007 = v1009 + 8;
        goto LABEL_1787;
      }
      uint64_t v3 = v1041;
      if (v1005 == 3) {
        *(void *)(v1095.i64[0] + 8) = 0;
      }
    }
    else
    {
      uint64_t v3 = v1041;
      if ((*(unsigned char *)(v1095.i64[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v1095.i64[0] + 12))
      {
        uint64_t v1006 = *(void *)(v1095.i64[0] + 16);
        if ((v1006 & 4) != 0)
        {
          unint64_t v1007 = v1006 & 0xFFFFFFFFFFFFFFF8;
          if (v1007)
          {
LABEL_1787:
            v1068[0] = &v1095;
            sub_1CC5FA668(v1007 + 16, v1068);
            uint64_t v3 = v1041;
          }
        }
      }
    }
LABEL_1323:
    uint64_t v813 = v808[5];
    *(void *)(v812 + 24) = v813;
    uint64_t v814 = *(void *)(v813 + 32);
    uint64_t v815 = *(unsigned int *)(v812 + 40);
    if (v815)
    {
      uint64_t v986 = *(void *)(v812 + 32);
      uint64_t v987 = *(void *)(v814 + 40);
      uint64_t v988 = 32 * v815;
      do
      {
        if (!*(unsigned char *)v986)
        {
          uint64_t v989 = *(unsigned int *)(v986 + 4);
          if ((int)v989 >= 0) {
            unsigned int v990 = (uint64_t *)(*(void *)(v987 + 272) + 8 * v989);
          }
          else {
            unsigned int v990 = (uint64_t *)(*(void *)(v987 + 24) + 16 * (v989 & 0x7FFFFFFF) + 8);
          }
          uint64_t v991 = *v990;
          if (*v990)
          {
            uint64_t v992 = *(void *)(v991 + 16);
            *(void *)(v991 + 16) = v986;
            *(void *)(v986 + 16) = v992;
            if (*(unsigned char *)(v986 + 3))
            {
              *(void *)(v986 + 24) = v991;
            }
            else
            {
              *(void *)(v986 + 24) = 0;
              unsigned int v990 = (uint64_t *)(v992 + 24);
            }
          }
          else
          {
            *(void *)(v986 + 16) = v986;
            *(void *)(v986 + 24) = 0;
          }
          *unsigned int v990 = v986;
        }
        v986 += 32;
        v988 -= 32;
      }
      while (v988);
    }
    uint64_t v816 = *(void *)(v814 + 728);
    if (v816) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v816 + 24))(v816, v812);
    }
    unint64_t v817 = *v809 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v812 = v817 | *(void *)v812 & 7;
    *(void *)(v812 + 8) = v809;
    *(void *)(v817 + 8) = v812;
    *uint64_t v809 = *v809 & 7 | v812;
    uint64_t v1069 = 0;
    v1068[1] = 0;
    uint64_t v1070 = 0;
    v1068[0] = (void *)0x18701000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v812, v811, (const llvm::MachineOperand *)v1068);
    LODWORD(v1068[0]) = 1;
    uint64_t v1069 = 0;
    v1068[1] = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v812, v811, (const llvm::MachineOperand *)v1068);
    LODWORD(v1068[0]) = 1;
    uint64_t v1069 = 0;
    v1068[1] = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v812, v811, (const llvm::MachineOperand *)v1068);
    LODWORD(v1068[0]) = 1;
    uint64_t v1069 = 0;
    v1068[1] = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v812, v811, (const llvm::MachineOperand *)v1068);
    if (v1063)
    {
      int v818 = *(unsigned __int8 *)v1063;
      if ((v818 - 4) > 0x1E)
      {
        if ((v818 - 3) >= 0xFFFFFFFE) {
          uint64_t v912 = v1063;
        }
        else {
          uint64_t v912 = 0;
        }
        if ((v818 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v913 = (unint64_t)v912 + 8;
          goto LABEL_1508;
        }
        if (v818 == 3) {
          *((void *)v1063 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v1063 + 1) & 0x7F) == 2 || *((_DWORD *)v1063 + 3))
      {
        uint64_t v1001 = *((void *)v1063 + 2);
        if ((v1001 & 4) != 0)
        {
          unint64_t v913 = v1001 & 0xFFFFFFFFFFFFFFF8;
          if (v913)
          {
LABEL_1508:
            v1068[0] = &v1063;
            sub_1CC5FA668(v913 + 16, v1068);
          }
        }
      }
    }
    sub_1CBAF8970(v812);
    char v1015 = 1;
    goto LABEL_1331;
  }
  if (!*(unsigned char *)(v807 + 284)) {
    goto LABEL_1331;
  }
  uint64_t v905 = *(unint64_t **)(v1011 + 320);
  uint64_t v904 = *(unint64_t **)(v1011 + 328);
  v1095.i64[0] = 0;
  if (v905 == v904)
  {
    uint64_t v906 = v905;
  }
  else
  {
    do
    {
      uint64_t v906 = v905;
      uint64_t v905 = (unint64_t *)*v905;
    }
    while (((v906[12] - v906[11]) & 0x7FFFFFFF8) != 0 && v905 != v904);
  }
  unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)v906);
  if (((v906[12] - v906[11]) & 0x7FFFFFFF8) != 0 || v906 + 6 == (unint64_t *)FirstTerminator) {
    goto LABEL_1725;
  }
  unint64_t v916 = FirstTerminator;
  uint64_t v917 = v906 + 7;
  while (v916 != *v917)
  {
    int v918 = *(unsigned __int16 **)(v916 + 16);
    uint64_t v919 = *((void *)v918 + 2);
    if ((v919 & 0x2000) != 0)
    {
      if ((v919 & 2) != 0)
      {
        if (sub_1CBB35008((void *)v916)) {
          goto LABEL_1561;
        }
        int v918 = *(unsigned __int16 **)(v916 + 16);
      }
      else if (v919 & 0x80) != 0 || (byte_1CDB16690[*v918])
      {
LABEL_1561:
        sub_1CBAF8970(v916);
        goto LABEL_1562;
      }
    }
    if (*v918 != 623)
    {
      __int16 v920 = *(_WORD *)(v916 + 44);
      uint64_t v921 = *((void *)v918 + 1);
      if ((v920 & 0xC) != 0 && (v920 & 4) == 0)
      {
        unint64_t v923 = v916;
        if ((v921 & 0x80) != 0) {
          goto LABEL_1740;
        }
        while ((*(_WORD *)(v923 + 44) & 8) != 0)
        {
          unint64_t v923 = *(void *)(v923 + 8);
          if ((*(unsigned char *)(*(void *)(v923 + 16) + 8) & 0x80) != 0) {
            goto LABEL_1740;
          }
        }
        if ((v921 & 0x20) != 0) {
          goto LABEL_1740;
        }
        unint64_t v924 = v916;
        while ((*(_WORD *)(v924 + 44) & 8) != 0)
        {
          unint64_t v924 = *(void *)(v924 + 8);
          if ((*(unsigned char *)(*(void *)(v924 + 16) + 8) & 0x20) != 0) {
            goto LABEL_1740;
          }
        }
        if ((v921 & 0x800) != 0)
        {
LABEL_1740:
          if ((v920 & 8) != 0)
          {
            uint64_t v3 = v1041;
            if ((*(void *)v916 & 4) == 0)
            {
              do
                unint64_t v916 = *(void *)(v916 + 8);
              while ((*(_WORD *)(v916 + 44) & 8) != 0);
            }
          }
          else
          {
            uint64_t v3 = v1041;
          }
          uint64_t v917 = (unint64_t *)(v916 + 8);
LABEL_1716:
          unint64_t v916 = *v917;
LABEL_1722:
          while (v916 != llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)v906))
          {
            if ((*(unsigned char *)(*(void *)(v916 + 16) + 17) & 0x20) != 0)
            {
              sub_1CBAF8970(v916);
              goto LABEL_1725;
            }
            if ((*(unsigned char *)v916 & 4) == 0)
            {
              while ((*(_WORD *)(v916 + 44) & 8) != 0)
                unint64_t v916 = *(void *)(v916 + 8);
            }
            unint64_t v916 = *(void *)(v916 + 8);
          }
          goto LABEL_1725;
        }
        unint64_t v925 = v916;
        while ((*(_WORD *)(v925 + 44) & 8) != 0)
        {
          unint64_t v925 = *(void *)(v925 + 8);
          if ((*(unsigned char *)(*(void *)(v925 + 16) + 9) & 8) != 0) {
            goto LABEL_1740;
          }
        }
      }
      else if ((v921 & 0x8A0) != 0)
      {
        goto LABEL_1740;
      }
    }
    unint64_t v916 = *(void *)v916 & 0xFFFFFFFFFFFFFFF8;
    if (!v916 || (*(unsigned char *)v916 & 4) == 0)
    {
      while ((*(_WORD *)(v916 + 44) & 4) != 0)
        unint64_t v916 = *(void *)v916 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  uint64_t v3 = v1041;
  if (v905 == v904) {
    goto LABEL_1722;
  }
  uint64_t v933 = 0;
  unint64_t v934 = 0;
  int v935 = 0;
  v936 = (unint64_t *)*v906;
  unint64_t v937 = *v906 + 48;
  v1068[0] = v1071;
  v1068[1] = v1071;
  LODWORD(v1070) = 0;
  uint64_t v1069 = 0x100000010;
  v1071[0] = v906;
  v938 = byte_1CDB16690;
  while (2)
  {
    while (2)
    {
      unint64_t v939 = v904[7];
      if (v937 == v939) {
        goto LABEL_1713;
      }
      if (v937 == v936[7])
      {
        uint64_t v940 = (char *)v1068[1];
        uint64_t v941 = HIDWORD(v1069);
        if (v1068[1] == v1068[0])
        {
          if (HIDWORD(v1069))
          {
            unint64_t v942 = 0;
            uint64_t v943 = 8 * HIDWORD(v1069);
            uint64_t v944 = (unint64_t **)v1068[1];
            while (*v944 != v936)
            {
              if (*v944 == (unint64_t *)-2) {
                unint64_t v942 = v944;
              }
              ++v944;
              v943 -= 8;
              if (!v943)
              {
                if (!v942) {
                  goto LABEL_1577;
                }
                *unint64_t v942 = v936;
                LODWORD(v1070) = v1070 - 1;
                goto LABEL_1601;
              }
            }
            goto LABEL_1601;
          }
LABEL_1577:
          unsigned int v945 = v1069;
          if (HIDWORD(v1069) < v1069)
          {
            ++HIDWORD(v1069);
            *((void *)v1068[1] + v941) = v936;
LABEL_1601:
            v936 = (unint64_t *)*v936;
            unint64_t v937 = (unint64_t)(v936 + 6);
            continue;
          }
        }
        else
        {
          unsigned int v945 = v1069;
        }
        if (3 * v945 <= 4 * (HIDWORD(v1069) - (int)v1070))
        {
          if (v945 >= 0x40) {
            v945 *= 2;
          }
          else {
            unsigned int v945 = 128;
          }
        }
        else if (v945 - HIDWORD(v1069) >= v945 >> 3)
        {
          goto LABEL_1582;
        }
        unsigned int v972 = v938;
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v1068, v945);
        v938 = v972;
        unsigned int v945 = v1069;
        uint64_t v940 = (char *)v1068[1];
LABEL_1582:
        unsigned int v946 = v945 - 1;
        unsigned int v947 = (v945 - 1) & ((v936 >> 4) ^ (v936 >> 9));
        uint64_t v948 = &v940[8 * v947];
        uint64_t v949 = *(unint64_t **)v948;
        if (*(void *)v948 == -1)
        {
          v950 = 0;
LABEL_1594:
          if (v950) {
            uint64_t v954 = v950;
          }
          else {
            uint64_t v954 = v948;
          }
          if (*(unint64_t **)v954 != v936)
          {
            if (*(void *)v954 == -2) {
              LODWORD(v1070) = v1070 - 1;
            }
            else {
              ++HIDWORD(v1069);
            }
            *(void *)uint64_t v954 = v936;
          }
        }
        else
        {
          v950 = 0;
          int v951 = 1;
          while (v949 != v936)
          {
            if (v950) {
              BOOL v952 = 0;
            }
            else {
              BOOL v952 = v949 == (unint64_t *)-2;
            }
            if (v952) {
              v950 = v948;
            }
            unsigned int v953 = v947 + v951++;
            unsigned int v947 = v953 & v946;
            uint64_t v948 = &v940[8 * (v953 & v946)];
            uint64_t v949 = *(unint64_t **)v948;
            if (*(void *)v948 == -1) {
              goto LABEL_1594;
            }
          }
        }
        goto LABEL_1601;
      }
      break;
    }
    unint64_t v937 = *(void *)v937 & 0xFFFFFFFFFFFFFFF8;
    if (!v937 || (*(unsigned char *)v937 & 4) == 0)
    {
      while ((*(_WORD *)(v937 + 44) & 4) != 0)
        unint64_t v937 = *(void *)v937 & 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v955 = *(unsigned __int16 **)(v937 + 16);
    uint64_t v956 = *v955;
    if (v956 == 623)
    {
LABEL_1613:
      if (v937 != v939)
      {
        uint64_t v959 = *((void *)v955 + 2);
        if ((v959 & 2) == 0)
        {
          int v960 = 1;
          if (v959 & 0x80) != 0 || (v938[v956]) {
            goto LABEL_1669;
          }
LABEL_1617:
          __int16 v961 = *(_WORD *)(v937 + 44);
          uint64_t v955 = *(unsigned __int16 **)(v937 + 16);
          uint64_t v962 = *((void *)v955 + 1);
          if ((v961 & 0xC) == 0 || (v961 & 4) != 0)
          {
            if ((v962 & 0x400) == 0)
            {
LABEL_1639:
              int v960 = 0;
              goto LABEL_1669;
            }
          }
          else
          {
            unint64_t v963 = v937;
            if ((v962 & 0x400) == 0)
            {
              while ((*(_WORD *)(v963 + 44) & 8) != 0)
              {
                unint64_t v963 = *(void *)(v963 + 8);
                if ((*(unsigned char *)(*(void *)(v963 + 16) + 9) & 4) != 0) {
                  goto LABEL_1640;
                }
              }
              goto LABEL_1639;
            }
          }
LABEL_1640:
          uint64_t v967 = *(void *)(*(void *)(v937 + 32) + 32 * sub_1CBDA6464(*v955, 0x24u) + 16);
          unint64_t v968 = v1068[0];
          if (v1068[1] == v1068[0])
          {
            unsigned int v969 = HIDWORD(v1069);
            v970 = (char *)v1068[1] + 8 * HIDWORD(v1069);
            if (HIDWORD(v1069))
            {
              uint64_t v971 = 0;
              v938 = byte_1CDB16690;
              while (*(void *)((char *)v1068[1] + v971) != v967)
              {
                v971 += 8;
                if (8 * HIDWORD(v1069) == v971) {
                  goto LABEL_1664;
                }
              }
              v970 = (char *)v1068[1] + v971;
LABEL_1664:
              unint64_t v968 = v1068[1];
              goto LABEL_1687;
            }
            unint64_t v968 = v1068[1];
          }
          else
          {
            int v973 = v1069 - 1;
            unsigned int v974 = (v1069 - 1) & ((v967 >> 4) ^ (v967 >> 9));
            v970 = (char *)v1068[1] + 8 * v974;
            uint64_t v975 = *(void *)v970;
            if (*(void *)v970 == -1)
            {
              uint64_t v976 = 0;
LABEL_1682:
              if (v976) {
                v970 = v976;
              }
              unsigned int v969 = HIDWORD(v1069);
              if (*(void *)v970 != v967) {
                v970 = (char *)v1068[1] + 8 * v1069;
              }
            }
            else
            {
              uint64_t v976 = 0;
              int v977 = 1;
              while (v975 != v967)
              {
                if (v976) {
                  BOOL v978 = 0;
                }
                else {
                  BOOL v978 = v975 == -2;
                }
                if (v978) {
                  uint64_t v976 = v970;
                }
                unsigned int v979 = v974 + v977++;
                unsigned int v974 = v979 & v973;
                v970 = (char *)v1068[1] + 8 * (v979 & v973);
                uint64_t v975 = *(void *)v970;
                if (*(void *)v970 == -1) {
                  goto LABEL_1682;
                }
              }
              unsigned int v969 = HIDWORD(v1069);
            }
          }
          v938 = byte_1CDB16690;
LABEL_1687:
          int v960 = 0;
          if (v1068[1] == v968) {
            unsigned int v985 = v969;
          }
          else {
            unsigned int v985 = v1069;
          }
          if (v970 == (char *)v1068[1] + 8 * v985) {
            int v935 = 1;
          }
LABEL_1669:
          if (v935) {
            unint64_t v982 = v933;
          }
          else {
            unint64_t v982 = v937;
          }
          uint64_t v983 = *((void *)v955 + 2) & 0x2000;
          if (v983) {
            uint64_t v933 = v982;
          }
          if (v935) {
            BOOL v984 = v983 == 0;
          }
          else {
            BOOL v984 = 1;
          }
          if (!v984) {
            unint64_t v934 = v937;
          }
          if (v960) {
            goto LABEL_1705;
          }
          continue;
        }
        uint64_t v980 = v938;
        BOOL v981 = sub_1CBB35008((void *)v937);
        v938 = v980;
        if (!v981) {
          goto LABEL_1617;
        }
        uint64_t v955 = *(unsigned __int16 **)(v937 + 16);
      }
      int v960 = 1;
      goto LABEL_1669;
    }
    break;
  }
  uint64_t v957 = *((void *)v955 + 1);
  if ((*(_WORD *)(v937 + 44) & 0xC) == 0 || (*(_WORD *)(v937 + 44) & 4) != 0)
  {
    if ((v957 & 0x8A0) != 0) {
      goto LABEL_1705;
    }
    goto LABEL_1613;
  }
  unint64_t v964 = v937;
  if ((v957 & 0x80) == 0)
  {
    while ((*(_WORD *)(v964 + 44) & 8) != 0)
    {
      unint64_t v964 = *(void *)(v964 + 8);
      if ((*(unsigned char *)(*(void *)(v964 + 16) + 8) & 0x80) != 0) {
        goto LABEL_1705;
      }
    }
    if ((v957 & 0x20) == 0)
    {
      unint64_t v965 = v937;
      while ((*(_WORD *)(v965 + 44) & 8) != 0)
      {
        unint64_t v965 = *(void *)(v965 + 8);
        if ((*(unsigned char *)(*(void *)(v965 + 16) + 8) & 0x20) != 0) {
          goto LABEL_1705;
        }
      }
      if ((v957 & 0x800) == 0)
      {
        unint64_t v966 = v937;
        while ((*(_WORD *)(v966 + 44) & 8) != 0)
        {
          unint64_t v966 = *(void *)(v966 + 8);
          if ((*(unsigned char *)(*(void *)(v966 + 16) + 9) & 8) != 0) {
            goto LABEL_1705;
          }
        }
        goto LABEL_1613;
      }
    }
  }
LABEL_1705:
  if (v936 == v904) {
    uint64_t v993 = v934;
  }
  else {
    uint64_t v993 = v933;
  }
  if (v934) {
    uint64_t v994 = v993;
  }
  else {
    uint64_t v994 = v933;
  }
  if (!v994 || (sub_1CBAF8970(v994), *(unint64_t **)(v994 + 24) != v904))
  {
LABEL_1713:
    if (v1068[1] != v1068[0]) {
      free(v1068[1]);
    }
    uint64_t v3 = v1041;
    goto LABEL_1716;
  }
  if (v1068[1] != v1068[0]) {
    free(v1068[1]);
  }
LABEL_1562:
  uint64_t v3 = v1041;
LABEL_1725:
  if (v1095.i64[0])
  {
    int v995 = *(unsigned __int8 *)v1095.i64[0];
    if ((v995 - 4) > 0x1E)
    {
      if ((v995 - 3) >= 0xFFFFFFFE) {
        uint64_t v998 = v1095.i64[0];
      }
      else {
        uint64_t v998 = 0;
      }
      if ((v995 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v997 = v998 + 8;
        goto LABEL_1737;
      }
      if (v995 == 3) {
        *(void *)(v1095.i64[0] + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(v1095.i64[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v1095.i64[0] + 12))
    {
      uint64_t v996 = *(void *)(v1095.i64[0] + 16);
      if ((v996 & 4) != 0)
      {
        unint64_t v997 = v996 & 0xFFFFFFFFFFFFFFF8;
        if (v997)
        {
LABEL_1737:
          v1068[0] = &v1095;
          sub_1CC5FA668(v997 + 16, v1068);
        }
      }
    }
  }
LABEL_1331:
  uint64_t v819 = *(void *)(v3 + 248);
  if (!*(unsigned char *)(v819 + 333)) {
    goto LABEL_1387;
  }
  uint64_t v821 = *(void *)(v3 + 256);
  uint64_t v820 = *(void *)(v3 + 264);
  v1068[0] = &v1069;
  v1068[1] = (void *)0x2000000000;
  uint64_t v822 = *(llvm::MachineBasicBlock **)(*(void *)(v1011 + 328) + 8);
  if (v822 != v1016)
  {
    if (v820) {
      uint64_t v823 = (void *)(v820 + 8);
    }
    else {
      uint64_t v823 = 0;
    }
    do
    {
      for (uint64_t m = *((void *)v822 + 7);
            (llvm::MachineBasicBlock *)m != (llvm::MachineBasicBlock *)((char *)v822 + 48);
            uint64_t m = *(void *)(m + 8))
      {
        if ((*(unsigned char *)(*(void *)(m + 16) + 16) & 2) != 0 && sub_1CBB35008((void *)m))
        {
          unsigned int v825 = *(_DWORD *)(*(void *)(m + 32)
                           + 32 * sub_1CBDA6464(**(unsigned __int16 **)(m + 16), 0x18u)
                           + 4);
          unint64_t v826 = *(unsigned int *)(*v823 + 24 * v825 + 16);
          unsigned int v827 = (_WORD *)(v823[6] + ((v826 >> 3) & 0x1FFFFFFE));
          __int16 v829 = *v827;
          unint64_t v828 = v827 + 1;
          unsigned __int16 v830 = v829 + (v826 & 0xF) * v825;
          unsigned int v831 = v1068[1];
          do
          {
            if (v831 >= HIDWORD(v1068[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v1068[0] + v831) = *(unsigned __int16 *)(v823[5] + 4 * v830);
            unsigned int v831 = ++LODWORD(v1068[1]);
            int v832 = *v828++;
            v830 += v832;
          }
          while (v832);
        }
        if ((*(unsigned char *)m & 4) == 0)
        {
          while ((*(_WORD *)(m + 44) & 8) != 0)
            uint64_t m = *(void *)(m + 8);
        }
      }
      uint64_t v822 = (llvm::MachineBasicBlock *)*((void *)v822 + 1);
    }
    while (v822 != v1016);
    uint64_t v3 = v1041;
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  uint64_t v833 = (uint64_t *)v1068[0];
  unint64_t v834 = (char *)v1068[0] + 4 * LODWORD(v1068[1]);
  int v835 = (char *)v1068[0];
  if (LODWORD(v1068[1]))
  {
    int v835 = (char *)v1068[0] - 4;
    uint64_t v836 = 4 * LODWORD(v1068[1]) - 4;
    while (v836)
    {
      int v837 = *((_DWORD *)v835 + 1);
      int v838 = *((_DWORD *)v835 + 2);
      v835 += 4;
      v836 -= 4;
      if (v837 == v838) {
        goto LABEL_1355;
      }
    }
  }
  else
  {
LABEL_1355:
    if (v835 != v834)
    {
      int v839 = v835 + 8;
      if (v835 + 8 != v834)
      {
        int v840 = *(_DWORD *)v835;
        do
        {
          int v841 = v840;
          int v840 = *(_DWORD *)v839;
          if (v841 != *(_DWORD *)v839)
          {
            *((_DWORD *)v835 + 1) = v840;
            v835 += 4;
          }
          v839 += 4;
        }
        while (v839 != v834);
      }
      unint64_t v834 = v835 + 4;
    }
  }
  LODWORD(v1068[1]) = (unint64_t)(v834 - (char *)v833) >> 2;
  if (!LODWORD(v1068[1])) {
    goto LABEL_1384;
  }
  uint64_t v842 = *(void *)(v1011 + 328);
  uint64_t v843 = *(unint64_t **)(v842 + 56);
  uint64_t v844 = 4 * LODWORD(v1068[1]);
  while (2)
  {
    unint64_t v845 = *(unsigned int *)v833;
    if ((v845 - 1) > 0x206) {
      int v846 = 0;
    }
    else {
      int v846 = (byte_1CDEF2F4C[v845 >> 3] >> (v845 & 7)) & 1;
    }
    uint64_t v1063 = 0;
    sub_1CBAECAFC(v821, v842, v843, 0, v845, v846, 0, (unsigned __int8 **)&v1063, 0);
    if (v1063)
    {
      int v847 = *(unsigned __int8 *)v1063;
      if ((v847 - 4) > 0x1E)
      {
        if ((v847 - 3) >= 0xFFFFFFFE) {
          int v848 = v1063;
        }
        else {
          int v848 = 0;
        }
        if ((v847 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v849 = (unint64_t)v848 + 8;
          goto LABEL_1378;
        }
        if (v847 == 3) {
          *((void *)v1063 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v1063 + 1) & 0x7F) == 2 || *((_DWORD *)v1063 + 3))
      {
        uint64_t v850 = *((void *)v1063 + 2);
        if ((v850 & 4) != 0)
        {
          unint64_t v849 = v850 & 0xFFFFFFFFFFFFFFF8;
          if (v849)
          {
LABEL_1378:
            v1095.i64[0] = (uint64_t)&v1063;
            sub_1CC5FA668(v849 + 16, &v1095);
          }
        }
      }
    }
    uint64_t v833 = (uint64_t *)((char *)v833 + 4);
    v844 -= 4;
    if (v844) {
      continue;
    }
    break;
  }
  uint64_t v833 = (uint64_t *)v1068[0];
  uint64_t v3 = v1041;
LABEL_1384:
  if (v833 != &v1069) {
    free(v833);
  }
  uint64_t v819 = *(void *)(v3 + 248);
LABEL_1387:
  if (*(unsigned char *)(v819 + 334))
  {
    uint64_t v851 = *(void *)(v3 + 264);
    uint64_t v1038 = *(void *)(v3 + 256);
    v1095.i64[0] = (uint64_t)&v1096;
    v1095.i64[1] = 0x2000000000;
    v1068[0] = &v1069;
    v1068[1] = (void *)0x2000000000;
    uint64_t v1081 = 0;
    unsigned int v1080 = 0;
    unsigned int v1079 = &v1080;
    unint64_t v852 = *(void **)(v1011 + 40);
    BOOL v853 = *(llvm::MachineBasicBlock **)(v1011 + 328);
    uint64_t v854 = (unsigned __int16 *)*((void *)v853 + 19);
    uint64_t v855 = (unsigned __int16 *)*((void *)v853 + 20);
    if (v855 != v854)
    {
      if (v851) {
        int v856 = (void *)(v851 + 8);
      }
      else {
        int v856 = 0;
      }
      do
      {
        unsigned int v857 = (unsigned __int16 *)(v856[6]
                                  + (((unint64_t)*(unsigned int *)(*v856 + 24 * *v854 + 16) >> 3) & 0x1FFFFFFE));
        int v859 = *v857;
        uint64_t v858 = v857 + 1;
        int v860 = v859 + (*(_DWORD *)(*v856 + 24 * *v854 + 16) & 0xF) * *v854;
        do
        {
          LODWORD(v1063) = (unsigned __int16)v860;
          sub_1CB946958((uint64_t)v1068, (unsigned int *)&v1063);
          int v861 = *v858++;
          v860 += v861;
        }
        while (v861);
        v854 += 8;
      }
      while (v854 != v855);
      BOOL v853 = *(llvm::MachineBasicBlock **)(v1011 + 328);
    }
    if (v853 != v1016)
    {
      if (v851) {
        uint64_t v862 = (void *)(v851 + 8);
      }
      else {
        uint64_t v862 = 0;
      }
      do
      {
        uint64_t v863 = (llvm::MachineBasicBlock *)((char *)v853 + 48);
        unsigned int v1042 = v853;
        uint64_t v864 = *((void *)v853 + 7);
        uint64_t v1045 = (llvm::MachineBasicBlock *)((char *)v853 + 48);
        while ((llvm::MachineInstr *)v864 != v863)
        {
          uint64_t v865 = *(unsigned int *)(v864 + 40);
          if (!v865) {
            goto LABEL_1430;
          }
          uint64_t v866 = *(_DWORD **)(v864 + 32);
          uint64_t v867 = &v866[8 * v865];
          do
          {
            if ((*v866 & 0x10000FF) == 0)
            {
              unsigned int v868 = v866[1];
              unint64_t v869 = *(unsigned int *)(*v862 + 24 * v868 + 16);
              uint64_t v870 = (_WORD *)(v862[6] + ((v869 >> 3) & 0x1FFFFFFE));
              unsigned __int16 v871 = *v870 + (v869 & 0xF) * v868;
              do
              {
                uint64_t v872 = v871;
                if (v1081)
                {
                  for (uint64_t n = v1080; n; uint64_t n = (void *)*n)
                  {
                    unsigned int v874 = *((_DWORD *)n + 7);
                    if (v874 <= v872)
                    {
                      if (v874 >= v872) {
                        goto LABEL_1427;
                      }
                      ++n;
                    }
                  }
                }
                else if (LODWORD(v1068[1]))
                {
                  unsigned int v875 = v1068[0];
                  uint64_t v876 = 4 * LODWORD(v1068[1]);
                  while (*v875 != v872)
                  {
                    ++v875;
                    v876 -= 4;
                    if (!v876) {
                      goto LABEL_1419;
                    }
                  }
                  if (v876) {
                    goto LABEL_1427;
                  }
                }
LABEL_1419:
                uint64_t v877 = v862[5];
                uint64_t v878 = 4 * v872;
                unsigned int v879 = *(unsigned __int16 *)(v877 + v878);
                if (*(_WORD *)(v877 + v878))
                {
                  unsigned int v880 = *(unsigned __int16 *)(v877 + 4 * v872 + 2);
                  do
                  {
                    unsigned int v881 = v880;
                    if (sub_1CB946A80(v852, v879))
                    {
                      if (v1095.u32[2] >= (unint64_t)v1095.u32[3]) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *(_DWORD *)(v1095.i64[0] + 4 * v1095.u32[2]) = v879;
                      ++v1095.i32[2];
                    }
                    unsigned int v880 = 0;
                    unsigned int v879 = v881;
                  }
                  while (v881);
                }
LABEL_1427:
                int v882 = (unsigned __int16)v870[1];
                ++v870;
                unsigned __int16 v871 = v882 + v872;
              }
              while (v882);
            }
            v866 += 8;
          }
          while (v866 != v867);
          if (v864)
          {
LABEL_1430:
            if ((*(unsigned char *)v864 & 4) != 0) {
              goto LABEL_1434;
            }
          }
          while ((*(_WORD *)(v864 + 44) & 8) != 0)
            uint64_t v864 = *(void *)(v864 + 8);
LABEL_1434:
          uint64_t v864 = *(void *)(v864 + 8);
          uint64_t v863 = v1045;
        }
        BOOL v853 = (llvm::MachineBasicBlock *)*((void *)v1042 + 1);
      }
      while (v853 != v1016);
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    uint64_t v883 = (unsigned int *)v1095.i64[0];
    uint64_t v884 = v1095.i64[0] + 4 * v1095.u32[2];
    uint64_t v885 = (int *)v1095.i64[0];
    if (v1095.i32[2])
    {
      uint64_t v885 = (int *)(v1095.i64[0] - 4);
      uint64_t v886 = 4 * v1095.u32[2] - 4;
      while (v886)
      {
        int v887 = v885[1];
        int v888 = v885[2];
        ++v885;
        v886 -= 4;
        if (v887 == v888) {
          goto LABEL_1440;
        }
      }
    }
    else
    {
LABEL_1440:
      if (v885 != (int *)v884)
      {
        unsigned int v889 = v885 + 2;
        if (v885 + 2 != (int *)v884)
        {
          int v890 = *v885;
          do
          {
            int v891 = v890;
            int v890 = *v889;
            if (v891 != *v889)
            {
              v885[1] = v890;
              ++v885;
            }
            ++v889;
          }
          while (v889 != (int *)v884);
        }
        uint64_t v884 = (uint64_t)(v885 + 1);
      }
    }
    v1095.i32[2] = (unint64_t)(v884 - (void)v883) >> 2;
    if (v1095.i32[2])
    {
      uint64_t v892 = *(void *)(v1011 + 328);
      uint64_t v893 = *(unint64_t **)(v892 + 56);
      for (iuint64_t i = 4 * v1095.u32[2]; ii; ii -= 4)
      {
        unint64_t v895 = *v883;
        if ((v895 - 1) <= 0x3FFFFFFE)
        {
          unint64_t v896 = v895 >> 3;
          if (v895 <= 0x57)
          {
            int v897 = 1 << (v895 & 7);
            if ((v897 & byte_1CDEF3152[v896]) != 0) {
              goto LABEL_1461;
            }
            goto LABEL_1455;
          }
          if (v895 <= 0x207)
          {
            unint64_t v896 = v896;
            int v897 = 1 << (v895 & 7);
LABEL_1455:
            BOOL v898 = (v897 & byte_1CDEF2F4C[v896]) != 0;
            goto LABEL_1457;
          }
        }
        BOOL v898 = 0;
LABEL_1457:
        v1051.i64[0] = 0;
        sub_1CBAECAFC(v1038, v892, v893, 0, v895, v898, 0, (unsigned __int8 **)&v1051, 0);
        if (v1051.i64[0])
        {
          int v899 = *(unsigned __int8 *)v1051.i64[0];
          if ((v899 - 4) > 0x1E)
          {
            if ((v899 - 3) >= 0xFFFFFFFE) {
              uint64_t v900 = v1051.i64[0];
            }
            else {
              uint64_t v900 = 0;
            }
            if ((v899 - 3) < 0xFFFFFFFE)
            {
              if (v899 == 3) {
                *(void *)(v1051.i64[0] + 8) = 0;
              }
              goto LABEL_1461;
            }
            unint64_t v901 = v900 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v1051.i64[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v1051.i64[0] + 12)) {
              goto LABEL_1461;
            }
            uint64_t v902 = *(void *)(v1051.i64[0] + 16);
            if ((v902 & 4) == 0) {
              goto LABEL_1461;
            }
            unint64_t v901 = v902 & 0xFFFFFFFFFFFFFFF8;
            if (!v901) {
              goto LABEL_1461;
            }
          }
          uint64_t v1063 = &v1051;
          sub_1CC5FA668(v901 + 16, &v1063);
        }
LABEL_1461:
        ++v883;
      }
    }
    sub_1CB833A08((uint64_t)&v1079, v1080);
    if (v1068[0] != &v1069) {
      free(v1068[0]);
    }
    if ((uint64_t *)v1095.i64[0] != &v1096) {
      free((void *)v1095.i64[0]);
    }
  }
  return v1015 & 1;
}

void sub_1CBAF8720(uint64_t a1, unint64_t *a2, unsigned __int8 *a3, uint64_t a4, uint64_t *a5)
{
  if (*(_OWORD *)a5 == 0) {
    return;
  }
  uint64_t v8 = *(void *)(a4 + 8) + 239136;
  unsigned int v9 = *(llvm::MachineFunction **)(a1 + 32);
  unsigned __int16 v32 = a3;
  if (a3) {
    llvm::MetadataTracking::track((uint64_t)&v32, a3, 2);
  }
  uint64_t v10 = llvm::MachineFunction::CreateMachineInstr(v9, v8, &v32, 0);
  if (v32)
  {
    int v25 = *v32;
    if ((v25 - 4) > 0x1E)
    {
      if ((v25 - 3) >= 0xFFFFFFFE) {
        unsigned int v28 = v32;
      }
      else {
        unsigned int v28 = 0;
      }
      if ((v25 - 3) < 0xFFFFFFFE)
      {
        if (v25 == 3) {
          *((void *)v32 + 1) = 0;
        }
        goto LABEL_5;
      }
      unint64_t v27 = (unint64_t)(v28 + 8);
    }
    else
    {
      if ((v32[1] & 0x7F) != 2 && !*((_DWORD *)v32 + 3)) {
        goto LABEL_5;
      }
      uint64_t v26 = *((void *)v32 + 2);
      if ((v26 & 4) == 0) {
        goto LABEL_5;
      }
      unint64_t v27 = v26 & 0xFFFFFFFFFFFFFFF8;
      if (!v27) {
        goto LABEL_5;
      }
    }
    int v29 = &v32;
    sub_1CC5FA668(v27 + 16, &v29);
  }
LABEL_5:
  uint64_t v11 = *(void *)(a1 + 40);
  *((void *)v10 + 3) = v11;
  uint64_t v12 = *(void *)(v11 + 32);
  uint64_t v13 = *((unsigned int *)v10 + 10);
  if (v13)
  {
    uint64_t v18 = *((void *)v10 + 4);
    uint64_t v19 = *(void *)(v12 + 40);
    uint64_t v20 = 32 * v13;
    do
    {
      if (!*(unsigned char *)v18)
      {
        uint64_t v21 = *(unsigned int *)(v18 + 4);
        if ((int)v21 >= 0) {
          unint64_t v22 = (uint64_t *)(*(void *)(v19 + 272) + 8 * v21);
        }
        else {
          unint64_t v22 = (uint64_t *)(*(void *)(v19 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
        }
        uint64_t v23 = *v22;
        if (*v22)
        {
          uint64_t v24 = *(void *)(v23 + 16);
          *(void *)(v23 + 16) = v18;
          *(void *)(v18 + 16) = v24;
          if (*(unsigned char *)(v18 + 3))
          {
            *(void *)(v18 + 24) = v23;
          }
          else
          {
            *(void *)(v18 + 24) = 0;
            unint64_t v22 = (uint64_t *)(v24 + 24);
          }
        }
        else
        {
          *(void *)(v18 + 16) = v18;
          *(void *)(v18 + 24) = 0;
        }
        *unint64_t v22 = v18;
      }
      v18 += 32;
      v20 -= 32;
    }
    while (v20);
  }
  uint64_t v14 = *(void *)(v12 + 728);
  if (v14) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v14 + 24))(v14, v10);
  }
  unint64_t v15 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v10 = v15 | *(void *)v10 & 7;
  *((void *)v10 + 1) = a2;
  *(void *)(v15 + 8) = v10;
  *a2 = *a2 & 7 | (unint64_t)v10;
  LODWORD(v29) = 1;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  llvm::MachineInstr::addOperand(v10, v9, (const llvm::MachineOperand *)&v29);
  uint64_t v16 = *a5;
  LODWORD(v29) = 1;
  uint64_t v30 = 0;
  uint64_t v31 = v16;
  llvm::MachineInstr::addOperand(v10, v9, (const llvm::MachineOperand *)&v29);
  uint64_t v17 = a5[1];
  LODWORD(v29) = 1;
  uint64_t v30 = 0;
  uint64_t v31 = v17;
  llvm::MachineInstr::addOperand(v10, v9, (const llvm::MachineOperand *)&v29);
}

uint64_t sub_1CBAF8970(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 **)(a1 + 16);
  uint64_t v2 = *((void *)v1 + 2);
  uint64_t v3 = *(void *)(a1 + 32);
  if ((v2 & 0x400000000) != 0)
  {
    int v4 = *v1;
    goto LABEL_5;
  }
  int v4 = *v1;
  if ((v2 & 0x4000002) == 0)
  {
LABEL_5:
    uint64_t result = sub_1CBDA6464(v4, 0x2Eu);
    uint64_t v6 = 64;
    goto LABEL_6;
  }
  uint64_t result = sub_1CBDA6464(v4, 0x2Fu);
  uint64_t v6 = 0x4000000000000000;
LABEL_6:
  *(void *)(v3 + 32 * result + 16) |= v6;
  return result;
}

void sub_1CBAF89E4(uint64_t **a1, llvm::MachineFunction **a2, __int16 a3)
{
  uint64_t v6 = **a1;
  uint64_t v7 = *(void *)(*(void *)(v6 + 32) + 32 * sub_1CBDA6464(**(unsigned __int16 **)(v6 + 16), 0xEu) + 16);
  uint64_t v8 = v7 + 7;
  uint64_t v10 = *a2;
  unsigned int v9 = a2[1];
  v27[0] = 1;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  llvm::MachineInstr::addOperand(v9, v10, (const llvm::MachineOperand *)v27);
  uint64_t v12 = *a2;
  uint64_t v11 = a2[1];
  v27[0] = 1;
  uint64_t v28 = 0;
  uint64_t v29 = 2064;
  llvm::MachineInstr::addOperand(v11, v12, (const llvm::MachineOperand *)v27);
  uint64_t v13 = **a1;
  int v14 = *(_DWORD *)(*(void *)(v13 + 32)
                  + 32 * sub_1CBDA6464(**(unsigned __int16 **)(v13 + 16), 0xDu)
                  + 4);
  uint64_t v16 = *a2;
  unint64_t v15 = a2[1];
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  v27[0] = 0;
  v27[1] = v14;
  uint64_t v30 = 0;
  llvm::MachineInstr::addOperand(v15, v16, (const llvm::MachineOperand *)v27);
  uint64_t v18 = *a2;
  uint64_t v17 = a2[1];
  v27[0] = 1;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  llvm::MachineInstr::addOperand(v17, v18, (const llvm::MachineOperand *)v27);
  if (v7 >= 0) {
    uint64_t v8 = v7;
  }
  uint64_t v20 = *a2;
  uint64_t v19 = a2[1];
  v27[0] = 1;
  uint64_t v28 = 0;
  uint64_t v29 = v7 / 128;
  llvm::MachineInstr::addOperand(v19, v20, (const llvm::MachineOperand *)v27);
  unint64_t v22 = *a2;
  uint64_t v21 = a2[1];
  if (v8 >> 3 <= 0) {
    uint64_t v23 = -(-(v8 >> 3) & 0xF);
  }
  else {
    uint64_t v23 = (v8 >> 3) & 0xF;
  }
  v27[0] = 1;
  uint64_t v28 = 0;
  uint64_t v29 = v23;
  llvm::MachineInstr::addOperand(v21, v22, (const llvm::MachineOperand *)v27);
  int v25 = *a2;
  uint64_t v24 = a2[1];
  v27[0] = 1;
  uint64_t v28 = 0;
  uint64_t v29 = 16;
  llvm::MachineInstr::addOperand(v24, v25, (const llvm::MachineOperand *)v27);
  unint64_t MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)a1[1], (long long *)a1[2], a3);
  llvm::MachineInstr::addMemOperand(a2[1], *a2, MachineMemOperand);
}

void sub_1CBAF8B5C(void *a1, void *a2, void *a3)
{
  uint64_t v5 = &word_1CDEF3132;
  do
  {
    __int16 v6 = *v5;
    if (*a2) {
      uint64_t v7 = (void *)(*a2 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    unint64_t v8 = *(unsigned int *)(*v7 + 24 * (unsigned __int16)*v5 + 16);
    unsigned int v9 = (_WORD *)(v7[6] + ((v8 >> 3) & 0x1FFFFFFE));
    __int16 v11 = *v9;
    uint64_t v10 = v9 + 1;
    unsigned __int16 v12 = v11 + (v8 & 0xF) * v6;
    while (((*(void *)(a2[1] + 8 * (v12 >> 6)) >> v12) & 1) == 0)
    {
      int v13 = *v10++;
      v12 += v13;
      if (!v13) {
        goto LABEL_27;
      }
    }
    unint64_t v15 = (char *)a1[20];
    unint64_t v14 = a1[21];
    if ((unint64_t)v15 >= v14)
    {
      uint64_t v17 = (char *)a1[19];
      uint64_t v18 = (v15 - v17) >> 4;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 60) {
        goto LABEL_134;
      }
      uint64_t v20 = v14 - (void)v17;
      if (v20 >> 3 > v19) {
        unint64_t v19 = v20 >> 3;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        if (v21 >> 60) {
          goto LABEL_135;
        }
        unint64_t v22 = (char *)operator new(16 * v21);
      }
      else
      {
        unint64_t v22 = 0;
      }
      uint64_t v23 = &v22[16 * v18];
      *(_WORD *)uint64_t v23 = v6;
      *((void *)v23 + 1) = -1;
      uint64_t v24 = v23;
      if (v15 != v17)
      {
        do
        {
          *((_OWORD *)v24 - 1) = *((_OWORD *)v15 - 1);
          v24 -= 16;
          v15 -= 16;
        }
        while (v15 != v17);
        unint64_t v15 = (char *)a1[19];
      }
      uint64_t v16 = v23 + 16;
      a1[19] = v24;
      a1[20] = v23 + 16;
      a1[21] = &v22[16 * v21];
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(_WORD *)unint64_t v15 = v6;
      *((void *)v15 + 1) = -1;
      uint64_t v16 = v15 + 16;
    }
    a1[20] = v16;
LABEL_27:
    ++v5;
  }
  while (v5 != (__int16 *)&unk_1CDEF3152);
  int v25 = &word_1CDEF35D2;
  uint64_t v26 = a3;
  do
  {
    __int16 v27 = *v25;
    uint64_t v28 = a2[1];
    if (*a2) {
      uint64_t v29 = (uint64_t *)(*a2 + 8);
    }
    else {
      uint64_t v29 = 0;
    }
    uint64_t v30 = *v29;
    unint64_t v31 = *(unsigned int *)(*v29 + 24 * (unsigned __int16)*v25 + 16);
    __int16 v32 = v31 & 0xF;
    uint64_t v33 = v29[6];
    int v34 = (_WORD *)(v33 + ((v31 >> 3) & 0x1FFFFFFE));
    __int16 v36 = *v34;
    int v35 = v34 + 1;
    unsigned __int16 v37 = v36 + v32 * v27;
    while (((*(void *)(v28 + 8 * (v37 >> 6)) >> v37) & 1) == 0)
    {
      int v38 = *v35++;
      v37 += v38;
      if (!v38) {
        goto LABEL_100;
      }
    }
    uint64_t v39 = v26[1];
    uint64_t v40 = v26[7];
    uint64_t v41 = *(unsigned int *)(v39 + 24 * (unsigned __int16)*v25 + 4);
    __int16 v42 = *(_WORD *)(v40 + 2 * v41);
    if (!v42) {
      goto LABEL_57;
    }
    unsigned __int16 v43 = v42 + v27;
    unint64_t v44 = (_WORD *)(v26[11] + 2 * *(unsigned int *)(v39 + 24 * (unsigned __int16)*v25 + 12));
    unint64_t v45 = (unsigned __int16 *)(v40 + 2 * v41 + 2);
    unint64_t v46 = v45;
    BOOL v47 = v44;
    unsigned __int16 v48 = v42 + v27;
    while (*v47 != 1)
    {
      int v49 = *v46++;
      v48 += v49;
      ++v47;
      if (!v49)
      {
        unsigned int v50 = 0;
        goto LABEL_42;
      }
    }
    unsigned int v50 = v48;
LABEL_42:
    while (*v44 != 2)
    {
      int v51 = *v45++;
      v43 += v51;
      ++v44;
      if (!v51) {
        goto LABEL_57;
      }
    }
    if (!v50 || !v43)
    {
LABEL_57:
      int v60 = (char *)a1[20];
      unint64_t v68 = a1[21];
      if ((unint64_t)v60 < v68)
      {
        *(_WORD *)int v60 = v27;
        goto LABEL_59;
      }
      uint64_t v70 = (unsigned char *)a1[19];
      uint64_t v71 = (v60 - v70) >> 4;
      unint64_t v72 = v71 + 1;
      if (!((unint64_t)(v71 + 1) >> 60))
      {
        uint64_t v73 = v68 - (void)v70;
        if (v73 >> 3 > v72) {
          unint64_t v72 = v73 >> 3;
        }
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v74 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v74 = v72;
        }
        if (v74)
        {
          if (v74 >> 60) {
            goto LABEL_135;
          }
          uint64_t v75 = (char *)operator new(16 * v74);
        }
        else
        {
          uint64_t v75 = 0;
        }
        int v76 = &v75[16 * v71];
        *(_WORD *)int v76 = v27;
        *((void *)v76 + 1) = -1;
        uint64_t v77 = v76;
        if (v60 != v70)
        {
          do
          {
            *((_OWORD *)v77 - 1) = *((_OWORD *)v60 - 1);
            v77 -= 16;
            v60 -= 16;
          }
          while (v60 != v70);
          goto LABEL_94;
        }
        goto LABEL_95;
      }
LABEL_134:
      abort();
    }
    unint64_t v52 = *(unsigned int *)(v30 + 24 * v43 + 16);
    __int16 v53 = v52 & 0xF;
    uint64_t v54 = (_WORD *)(v33 + ((v52 >> 3) & 0x1FFFFFFE));
    __int16 v56 = *v54;
    unint64_t v55 = v54 + 1;
    unsigned __int16 v57 = v56 + v53 * v43;
    do
    {
      if ((*(void *)(v28 + 8 * (v57 >> 6)) >> v57))
      {
        unint64_t v61 = *(unsigned int *)(v30 + 24 * v50 + 16);
        unsigned int v62 = (_WORD *)(v33 + ((v61 >> 3) & 0x1FFFFFFE));
        __int16 v64 = *v62;
        uint64_t v63 = v62 + 1;
        unsigned __int16 v65 = v64 + (v61 & 0xF) * v50;
        do
        {
          if ((*(void *)(v28 + 8 * (v65 >> 6)) >> v65)) {
            goto LABEL_57;
          }
          int v66 = *v63++;
          v65 += v66;
        }
        while (v66);
        int v60 = (char *)a1[20];
        unint64_t v67 = a1[21];
        if ((unint64_t)v60 < v67)
        {
          *(_WORD *)int v60 = v43;
LABEL_59:
          *((void *)v60 + 1) = -1;
          uint64_t v69 = v60 + 16;
          goto LABEL_99;
        }
        unint64_t v82 = (unsigned char *)a1[19];
        uint64_t v83 = (v60 - v82) >> 4;
        unint64_t v84 = v83 + 1;
        if (!((unint64_t)(v83 + 1) >> 60))
        {
          uint64_t v85 = v67 - (void)v82;
          if (v85 >> 3 > v84) {
            unint64_t v84 = v85 >> 3;
          }
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v86 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v86 = v84;
          }
          if (v86)
          {
            if (v86 >> 60) {
              goto LABEL_135;
            }
            uint64_t v87 = (char *)operator new(16 * v86);
          }
          else
          {
            uint64_t v87 = 0;
          }
          int v76 = &v87[16 * v83];
          *(_WORD *)int v76 = v43;
          *((void *)v76 + 1) = -1;
          uint64_t v77 = v76;
          if (v60 != v82)
          {
            do
            {
              *((_OWORD *)v77 - 1) = *((_OWORD *)v60 - 1);
              v77 -= 16;
              v60 -= 16;
            }
            while (v60 != v82);
            int v60 = (char *)a1[19];
          }
          uint64_t v88 = &v87[16 * v86];
          goto LABEL_96;
        }
        goto LABEL_134;
      }
      int v58 = *v55++;
      v57 += v58;
    }
    while (v58);
    int v60 = (char *)a1[20];
    unint64_t v59 = a1[21];
    if ((unint64_t)v60 < v59)
    {
      *(_WORD *)int v60 = v50;
      goto LABEL_59;
    }
    uint64_t v78 = (unsigned char *)a1[19];
    uint64_t v79 = (v60 - v78) >> 4;
    unint64_t v80 = v79 + 1;
    if ((unint64_t)(v79 + 1) >> 60) {
      goto LABEL_134;
    }
    uint64_t v81 = v59 - (void)v78;
    if (v81 >> 3 > v80) {
      unint64_t v80 = v81 >> 3;
    }
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v74 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v74 = v80;
    }
    if (v74)
    {
      if (!(v74 >> 60))
      {
        uint64_t v75 = (char *)operator new(16 * v74);
        goto LABEL_92;
      }
LABEL_135:
      sub_1CB833614();
    }
    uint64_t v75 = 0;
LABEL_92:
    int v76 = &v75[16 * v79];
    *(_WORD *)int v76 = v50;
    *((void *)v76 + 1) = -1;
    uint64_t v77 = v76;
    if (v60 != v78)
    {
      do
      {
        *((_OWORD *)v77 - 1) = *((_OWORD *)v60 - 1);
        v77 -= 16;
        v60 -= 16;
      }
      while (v60 != v78);
LABEL_94:
      int v60 = (char *)a1[19];
    }
LABEL_95:
    uint64_t v88 = &v75[16 * v74];
LABEL_96:
    uint64_t v69 = v76 + 16;
    a1[19] = v77;
    a1[20] = v76 + 16;
    a1[21] = v88;
    if (v60) {
      operator delete(v60);
    }
    uint64_t v26 = a3;
LABEL_99:
    a1[20] = v69;
LABEL_100:
    ++v25;
  }
  while (v25 != (__int16 *)&unk_1CDEF36D2);
  uint64_t v89 = &word_1CDEF3848;
  do
  {
    __int16 v90 = *v89;
    if (*a2) {
      unint64_t v91 = (void *)(*a2 + 8);
    }
    else {
      unint64_t v91 = 0;
    }
    unint64_t v92 = *(unsigned int *)(*v91 + 24 * (unsigned __int16)*v89 + 16);
    __int32 v93 = (_WORD *)(v91[6] + ((v92 >> 3) & 0x1FFFFFFE));
    __int16 v95 = *v93;
    uint64_t v94 = v93 + 1;
    unsigned __int16 v96 = v95 + (v92 & 0xF) * v90;
    while (((*(void *)(a2[1] + 8 * (v96 >> 6)) >> v96) & 1) == 0)
    {
      int v97 = *v94++;
      v96 += v97;
      if (!v97) {
        goto LABEL_132;
      }
    }
    uint64_t v99 = (char *)a1[20];
    unint64_t v98 = a1[21];
    if ((unint64_t)v99 >= v98)
    {
      uint64_t v101 = (char *)a1[19];
      uint64_t v102 = (v99 - v101) >> 4;
      unint64_t v103 = v102 + 1;
      if ((unint64_t)(v102 + 1) >> 60) {
        goto LABEL_134;
      }
      uint64_t v104 = v98 - (void)v101;
      if (v104 >> 3 > v103) {
        unint64_t v103 = v104 >> 3;
      }
      if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v105 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v105 = v103;
      }
      if (v105)
      {
        if (v105 >> 60) {
          goto LABEL_135;
        }
        __int32 v106 = (char *)operator new(16 * v105);
      }
      else
      {
        __int32 v106 = 0;
      }
      uint64_t v107 = &v106[16 * v102];
      *(_WORD *)uint64_t v107 = v90;
      *((void *)v107 + 1) = -1;
      char v108 = v107;
      if (v99 != v101)
      {
        do
        {
          *((_OWORD *)v108 - 1) = *((_OWORD *)v99 - 1);
          v108 -= 16;
          v99 -= 16;
        }
        while (v99 != v101);
        uint64_t v99 = (char *)a1[19];
      }
      uint64_t v100 = v107 + 16;
      a1[19] = v108;
      a1[20] = v107 + 16;
      a1[21] = &v106[16 * v105];
      if (v99) {
        operator delete(v99);
      }
    }
    else
    {
      *(_WORD *)uint64_t v99 = v90;
      *((void *)v99 + 1) = -1;
      uint64_t v100 = v99 + 16;
    }
    a1[20] = v100;
LABEL_132:
    ++v89;
  }
  while (v89 != (__int16 *)&unk_1CDEF38D0);
}

uint64_t sub_1CBAF9204(uint64_t a1, unint64_t *a2, unsigned __int8 **a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(v8 + 48);
  uint64_t v10 = *(void *)(*(void *)(v8 + 56) + 48) >> 2;
  v14[0] = v10;
  if (!v9)
  {
    uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v8 + 8) + 216))(*(void *)(v8 + 8), v8 + 128, v8);
    *(void *)(v8 + 48) = v9;
  }
  uint64_t v11 = *(void *)(v9 + 552);
  if ((v11 & 0xFF00000000) != 0) {
    uint64_t v12 = ((v11 + 1) + 15) & 0x1FFFFFFF0;
  }
  else {
    uint64_t v12 = 0;
  }
  v14[1] = v12;
  sub_1CBAF8720(a1, a2, *a3, a4, v14);
  return v10;
}

void sub_1CBAF92D0(llvm::MachineBasicBlock *a1, unint64_t *a2, unsigned __int8 *a3, uint64_t a4, int64x2_t *a5)
{
  int64x2_t v10 = vnegq_s64(*a5);
  sub_1CBAF8720((uint64_t)a1, a2, a3, a4, v10.i64);
  if ((*(_DWORD *)(*(void *)(*((void *)a1 + 4) + 56) + 72) + 1) >= 2)
  {
    unsigned int v9 = 4 * a5->i32[0];
    sub_1CBB316C4(a4, v9, a1, a2);
  }
}

BOOL sub_1CBAF9370(void *a1, unsigned int a2)
{
  if (*a1) {
    uint64_t v2 = (void *)(*a1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  unint64_t v3 = *(unsigned int *)(*v2 + 24 * a2 + 16);
  int v4 = (_WORD *)(v2[6] + ((v3 >> 3) & 0x1FFFFFFE));
  __int16 v6 = *v4;
  uint64_t v5 = v4 + 1;
  unsigned __int16 v7 = v6 + (v3 & 0xF) * a2;
  do
  {
    uint64_t v8 = (1 << v7) & *(void *)(a1[1] + 8 * (v7 >> 6));
    if (v8) {
      break;
    }
    int v9 = *v5++;
    v7 += v9;
  }
  while (v9);
  return v8 == 0;
}

double sub_1CBAF93DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v10 = 0;
  if (sub_1CBB11974(a2, a3, a4, &v10))
  {
    uint64_t v5 = v10;
    *(void *)a1 = a1 + 16;
    *(void *)&double result = 0x600000000;
    *(void *)(a1 + 8) = 0x600000000;
    unsigned int v7 = *(_DWORD *)(v5 + 16);
    uint64_t v8 = (const void **)(v5 + 8);
    if (v7) {
      BOOL v9 = v8 == (const void **)a1;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      if (v7 >= 7) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a1 + 16), *v8, 8 * *(unsigned int *)(v5 + 16));
      *(_DWORD *)(a1 + 8) = v7;
    }
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(v5 + 72);
  }
  else
  {
    *(void *)a1 = a1 + 16;
    *(void *)&double result = 0x600000000;
    *(void *)(a1 + 8) = 0x600000000;
    *(_DWORD *)(a1 + 64) = 0;
  }
  return result;
}

void sub_1CBAF94C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 16;
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x600000000;
  *(_DWORD *)(a1 + 64) = 0;
  uint64_t v7 = *(void *)(a3 + 64);
  uint64_t v8 = *(void *)(a3 + 72);
  if (v7 == v8)
  {
    unsigned int v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(a2 + 16) + 304 * *(int *)(*(void *)v7 + 24);
      uint64_t v12 = *(unsigned int *)(v11 + 224);
      if (v10 < v12)
      {
        int v17 = v10 & 0x3F;
        if (v17) {
          *(void *)(*(void *)a1 + 8 * v9 - 8) &= ~(-1 << v17);
        }
        *(_DWORD *)(a1 + 64) = v12;
        unsigned int v18 = v12 + 63;
        if (v9 != (v12 + 63) >> 6)
        {
          uint64_t v19 = v18 >> 6;
          if (v9 > v19)
          {
            *(_DWORD *)(a1 + 8) = v19;
            unsigned int v9 = v18 >> 6;
          }
          else
          {
            uint64_t v46 = v6;
            if (v19 > *(_DWORD *)(a1 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v19 != v9) {
              bzero((void *)(*(void *)a1 + 8 * v9), 8 * (v19 - v9));
            }
            unsigned int v9 = v19;
            *(_DWORD *)(a1 + 8) = v19;
            uint64_t v12 = *(unsigned int *)(a1 + 64);
            uint64_t v6 = v46;
          }
        }
        if ((v12 & 0x3F) != 0) {
          *(void *)(*(void *)a1 + 8 * v9 - 8) &= ~(-1 << (v12 & 0x3F));
        }
        uint64_t v10 = v12;
      }
      uint64_t v13 = *(unsigned int *)(v11 + 168);
      if (v13)
      {
        unint64_t v14 = *(uint64_t **)(v11 + 160);
        unint64_t v15 = *(void **)a1;
        do
        {
          uint64_t v16 = *v14++;
          *v15++ |= v16;
          --v13;
        }
        while (v13);
      }
      v7 += 8;
    }
    while (v7 != v8);
  }
  uint64_t v20 = **(void **)(a2 + 40) + 16 * *(int *)(a3 + 24);
  uint64_t v21 = *(unsigned int *)(v20 + 8);
  if (v21)
  {
    unint64_t v22 = *(int **)v20;
    uint64_t v23 = *(void *)v20 + 4 * v21;
    do
    {
      int v24 = *v22;
      uint64_t v25 = *(void *)(a2 + 16);
      uint64_t v26 = v25 + 304 * *v22;
      uint64_t v27 = *(unsigned int *)(v26 + 224);
      if (v10 < v27)
      {
        int v37 = v10 & 0x3F;
        unsigned int v38 = v9;
        if (v37) {
          *(void *)(*(void *)a1 + 8 * v9 - 8) &= ~(-1 << v37);
        }
        *(_DWORD *)(a1 + 64) = v27;
        unsigned int v39 = v27 + 63;
        if (v9 != (v27 + 63) >> 6)
        {
          uint64_t v40 = v39 >> 6;
          if (v9 > v40)
          {
            *(_DWORD *)(a1 + 8) = v40;
            unsigned int v9 = v39 >> 6;
          }
          else
          {
            if (v40 > *(_DWORD *)(a1 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v40 != v9)
            {
              uint64_t v41 = v6;
              bzero((void *)(*(void *)a1 + 8 * v9), 8 * (v40 - v9));
              uint64_t v6 = v41;
              unsigned int v38 = v9;
            }
            v9 += v40 - v38;
            *(_DWORD *)(a1 + 8) = v9;
            uint64_t v27 = *(unsigned int *)(a1 + 64);
          }
        }
        if ((v27 & 0x3F) != 0) {
          *(void *)(*(void *)a1 + 8 * v9 - 8) &= ~(-1 << (v27 & 0x3F));
        }
      }
      else
      {
        uint64_t v27 = v10;
      }
      uint64_t v28 = *(unsigned int *)(v26 + 168);
      if (v28)
      {
        uint64_t v29 = *(uint64_t **)(v26 + 160);
        uint64_t v30 = *(void **)a1;
        do
        {
          uint64_t v31 = *v29++;
          *v30++ |= v31;
          --v28;
        }
        while (v28);
      }
      uint64_t v32 = v25 + 304 * v24;
      uint64_t v10 = *(unsigned int *)(v32 + 296);
      if (v27 < v10)
      {
        int v42 = v27 & 0x3F;
        if (v42) {
          *(void *)(*(void *)a1 + 8 * v9 - 8) &= ~(-1 << v42);
        }
        *(_DWORD *)(a1 + 64) = v10;
        unsigned int v43 = v10 + 63;
        if (v9 != (v10 + 63) >> 6)
        {
          uint64_t v44 = v43 >> 6;
          if (v9 > v44)
          {
            *(_DWORD *)(a1 + 8) = v44;
            unsigned int v9 = v43 >> 6;
          }
          else
          {
            if (v44 > *(_DWORD *)(a1 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v44 != v9)
            {
              uint64_t v45 = v6;
              bzero((void *)(*(void *)a1 + 8 * v9), 8 * (v44 - v9));
              uint64_t v6 = v45;
            }
            unsigned int v9 = v44;
            *(_DWORD *)(a1 + 8) = v44;
            uint64_t v10 = *(unsigned int *)(a1 + 64);
          }
        }
        if ((v10 & 0x3F) != 0) {
          *(void *)(*(void *)a1 + 8 * v9 - 8) &= ~(-1 << (v10 & 0x3F));
        }
      }
      else
      {
        uint64_t v10 = v27;
      }
      uint64_t v33 = *(unsigned int *)(v32 + 240);
      if (v33)
      {
        int v34 = *(uint64_t **)(v32 + 232);
        int v35 = *(void **)a1;
        do
        {
          uint64_t v36 = *v34++;
          *v35++ |= v36;
          --v33;
        }
        while (v33);
      }
      ++v22;
    }
    while (v22 != (int *)v23);
  }
}

void sub_1CBAF993C(std::string *a1, uint64_t a2)
{
  int v4 = (char *)*(unsigned int *)(a2 + 24);
  v22[0] = "bb.";
  uint64_t v23 = v4;
  __int16 v25 = 2307;
  llvm::Twine::str((llvm::Twine *)v22, a1);
  uint64_t v5 = *(uint64_t ****)(a2 + 16);
  if (!v5) {
    return;
  }
  if ((*((unsigned char *)v5 + 23) & 0x10) == 0)
  {
    uint64_t v16 = 0;
    unint64_t v15 = &byte_1CFBCE98E;
    goto LABEL_11;
  }
  uint64_t v6 = ***v5;
  uint64_t v7 = *(void *)(v6 + 152);
  uint64_t v8 = *(unsigned int *)(v6 + 168);
  if (!v8) {
    goto LABEL_9;
  }
  LODWORD(v9) = (v8 - 1) & ((v5 >> 4) ^ (v5 >> 9));
  uint64_t v10 = (uint64_t ****)(v7 + 16 * v9);
  uint64_t v11 = *v10;
  if (*v10 != v5)
  {
    int v12 = 1;
    while (v11 != (uint64_t ***)-4096)
    {
      int v13 = v9 + v12++;
      uint64_t v9 = v13 & (v8 - 1);
      uint64_t v11 = *(uint64_t ****)(v7 + 16 * v9);
      if (v11 == v5)
      {
        uint64_t v10 = (uint64_t ****)(v7 + 16 * v9);
        goto LABEL_10;
      }
    }
LABEL_9:
    uint64_t v10 = (uint64_t ****)(v7 + 16 * v8);
  }
LABEL_10:
  unint64_t v14 = v10[1];
  int v17 = *v14;
  unint64_t v15 = (char *)(v14 + 2);
  uint64_t v16 = v17;
LABEL_11:
  __int16 v25 = 1283;
  v22[0] = ".";
  uint64_t v23 = v15;
  int v24 = v16;
  llvm::Twine::str((llvm::Twine *)v22, __p);
  if (v21 >= 0) {
    unsigned int v18 = __p;
  }
  else {
    unsigned int v18 = (void **)__p[0];
  }
  if (v21 >= 0) {
    std::string::size_type v19 = v21 & 0x7F;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v18, v19);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1CBAF9A80(uint64_t a1)
{
}

_DWORD *sub_1CBAF9B1C(_DWORD *a1, void *a2, unsigned int a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = a2[4];
  uint64_t v12 = a3;
  uint64_t v13 = v11 + 32 * a3;
  int v14 = sub_1CBC2D2EC((uint64_t)a2, a3, (void *)(a4 + 8));
  if ((v14 - 1) < 3)
  {
    unint64_t v15 = *(unsigned int *)(v13 + 4);
    *a1 = 0;
    unsigned int v16 = *(unsigned __int16 *)(*(void *)(a4 + 112) + 2 * v15);
    int v17 = (void *)(a4 + 648);
    if (*(void *)(a4 + 656) <= v15)
    {
      unsigned int v35 = *(unsigned __int16 *)(*(void *)(a4 + 112) + 2 * v15);
      unint64_t v36 = v15;
      sub_1CBAF9DF4(v17, (v15 + 1));
      unint64_t v15 = v36;
      unsigned int v16 = v35;
    }
    else
    {
      unsigned int v18 = *(unsigned __int16 *)(*v17 + 2 * v15);
      if (*(_WORD *)(*v17 + 2 * v15))
      {
LABEL_4:
        unsigned int v19 = v16 + (v18 >> 4);
        a1[1] = v16;
        a1[2] = v19;
        if (((a5 & 1) != 0 || a6)
          && ((a6 & 1) != 0 || *(unsigned char *)(*(void *)(*(void *)(a2[3] + 32) + 16) + 356)))
        {
          a1[1] = v16 >> 1;
          a1[2] = (v19 + 1) >> 1;
        }
        return a1;
      }
    }
    int v37 = 0;
    unsigned int v38 = *(uint64_t ***)(a4 + 248);
    unsigned int v39 = v15 - 0x40000000;
    unint64_t v40 = v15 >> 3;
    unint64_t v41 = v15;
    int v42 = 1 << (v15 & 7);
    unsigned int v43 = *(uint64_t ***)(a4 + 240);
    do
    {
      if (v39 >= 0xC0000001)
      {
        uint64_t v44 = **v43;
        if (v40 < *(unsigned __int16 *)(v44 + 22)
          && (v42 & *(unsigned char *)(*(void *)(v44 + 8) + v40)) != 0
          && (!v37
           || *v43 != v37
           && ((*(_DWORD *)(v37[1] + ((*(unsigned __int16 *)(v44 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v44 + 24)) & 1) != 0))
        {
          int v37 = *v43;
        }
      }
      ++v43;
    }
    while (v43 != v38);
    unsigned int v18 = *(_DWORD *)(*(void *)(a4 + 264)
                    + 24
                    * (*(unsigned __int16 *)(*v37 + 24)
                     + *(_DWORD *)(a4 + 272) * (((unint64_t)v38 - *(void *)(a4 + 240)) >> 3)));
    *(_WORD *)(*(void *)(a4 + 648) + 2 * v41) = v18;
    goto LABEL_4;
  }
  if (v14)
  {
    if ((v14 - 4) >= 2)
    {
      if ((v14 - 6) >= 2) {
        return a1;
      }
      *a1 = 2;
      if (*(unsigned char *)v13 == 7) {
        LODWORD(v27) = *(_DWORD *)(v11 + 32 * v12 + 4);
      }
      else {
        uint64_t v27 = *(void *)(v11 + 32 * v12 + 16);
      }
      a1[1] = v27;
      uint64_t v28 = a2[6];
      if ((v28 & 7) != 0)
      {
        unint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFF8;
        a2[6] = v28 & 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v31 = *(void *)(v29 + 24);
      uint64_t v30 = (unint64_t *)(v29 + 24);
      if ((v31 & 0xFFFFFFFFFFFFFFF9) != 0)
      {
        unint64_t v33 = sub_1CB8F1DC4(v30) + 7;
        if (v32 == 1) {
        uint64_t v34 = (v33 >> 4) & 0x7FFFFFFF;
        }
      }
      else
      {
        LODWORD(v34) = 0x7FFFFFFF;
      }
      int v26 = a1[1] + v34;
    }
    else
    {
      uint64_t v21 = v11 + 32 * v12;
      int v22 = *(_DWORD *)(v21 + 16) - 81;
      if (v22 > 4)
      {
        int v25 = 0;
      }
      else
      {
        int v23 = *(_DWORD *)(v21 + 4);
        if (*(_DWORD *)v13) {
          unsigned int v24 = (*(_DWORD *)v13 << 14) & 0x80000000;
        }
        else {
          unsigned int v24 = 0;
        }
        int v25 = v24 | v23;
      }
      *a1 = 1;
      a1[1] = v25;
      int v26 = dword_1CDB165F0[v22] + v25;
    }
    a1[2] = v26;
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
  }
  return a1;
}

void *sub_1CBAF9DF4(void *result, unint64_t a2)
{
  unint64_t v2 = result[1];
  if (v2 > a2)
  {
LABEL_2:
    result[1] = a2;
    return result;
  }
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      unint64_t v3 = result;
      unint64_t v4 = a2;
      if (result[2] < a2) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (a2 != v2)
      {
        bzero((void *)(*result + 2 * v2), 2 * (a2 - v2));
        double result = v3;
        a2 = v4;
      }
    }
    goto LABEL_2;
  }
  return result;
}

void sub_1CBAF9E94()
{
}

void sub_1CBAF9F38(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  uint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    unint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  unint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  unint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBAF9FEC(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  unint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  unint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBAFA098()
{
  return "AGX3 Fence Placement Pass";
}

void sub_1CBAFA0A8(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 112;
  v6[0] = &unk_1F2617E40;
  v6[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v6);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::MachineLoopInfo::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

void sub_1CBAFA14C()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  int v17 = v1;
  v40[248] = *(void **)MEMORY[0x1E4F143B8];
  unint64_t v2 = *(uint64_t **)(v0 + 8);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (v3 == v4)
  {
LABEL_4:
    uint64_t v5 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v3 != &llvm::MachineLoopInfo::ID)
    {
      v3 += 16;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    uint64_t v5 = *(void *)(v3 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v5 + 96))(v5, &llvm::MachineLoopInfo::ID);
  llvm::MachineFunction::RenumberBlocks(v17, 0);
  if (byte_1EBCC05C0) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = word_1EBCC0548 == 0;
  }
  int v7 = v6;
  v19[0] = &v20;
  v19[1] = 0;
  v18[0] = v19;
  uint64_t v8 = v17;
  v18[1] = 0;
  if (byte_1EBCC0980) {
    int v9 = v7;
  }
  else {
    int v9 = 0;
  }
  if (v9 == 1)
  {
    sub_1CBADE80C(v17, (uint64_t *)&v21);
    sub_1CBB03B10(v19, (uint64_t)&v21);
    uint64_t v10 = (void **)v21;
    if (v22)
    {
      uint64_t v11 = 2 * v22;
      do
      {
        uint64_t v12 = (void **)v10[v11 - 2];
        if (&v10[v11] != v12) {
          free(v12);
        }
        v11 -= 2;
      }
      while (v11 * 8);
      uint64_t v10 = (void **)v21;
    }
    if (v10 != v23) {
      free(v10);
    }
    sub_1CBADF470((uint64_t)v19, &v21);
    sub_1CBB03B10(v18, (uint64_t)&v21);
    uint64_t v13 = (void **)v21;
    if (v22)
    {
      uint64_t v14 = 2 * v22;
      uint64_t v8 = v17;
      do
      {
        unint64_t v15 = (void **)v13[v14 - 2];
        if (&v13[v14] != v15)
        {
          free(v15);
          uint64_t v8 = v17;
        }
        v14 -= 2;
      }
      while (v14 * 8);
      uint64_t v13 = (void **)v21;
    }
    else
    {
      uint64_t v8 = v17;
    }
    if (v13 != v23)
    {
      free(v13);
      uint64_t v8 = v17;
    }
  }
  uint64_t v16 = (*((void *)v8 + 14) - *((void *)v8 + 13)) >> 3;
  uint64_t v21 = v23;
  uint64_t v22 = 0;
  v23[0] = v24;
  v23[1] = 0;
  v24[0] = &v25;
  v24[1] = 0;
  int v25 = 0;
  uint64_t v26 = 0;
  char v27 = 0;
  uint64_t v28 = v31;
  int v30 = 128;
  if (v16 >= 0x81)
  {
    int v29 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v16) {
    bzero(v31, 8 * v16);
  }
  int v29 = v16;
  v31[64] = 0u;
  uint64_t v32 = &v34;
  uint64_t v33 = 0x400000000;
  long long v37 = 0u;
  unsigned int v35 = &v37;
  uint64_t v36 = 0;
  unsigned int v38 = v40;
  uint64_t v39 = 0;
  llvm::SmallVectorBase<unsigned int>::grow_pod();
}

void **sub_1CBB03B10(void **result, uint64_t a2)
{
  if (result != (void **)a2)
  {
    unint64_t v2 = (_DWORD *)(a2 + 8);
    uint64_t v3 = (void **)*result;
    uint64_t v4 = *((unsigned int *)result + 2);
    if (*(_DWORD *)(a2 + 8))
    {
      if (v4)
      {
        uint64_t v10 = a2;
        uint64_t v12 = (_DWORD *)(a2 + 8);
        unint64_t v15 = result;
        unsigned int v18 = (char *)*result;
        uint64_t v7 = 16 * v4;
        do
        {
          uint64_t v8 = *(char **)&v18[v7 - 16];
          if (&v18[v7] != v8) {
            free(v8);
          }
          v7 -= 16;
        }
        while (v7);
        unint64_t v2 = v12;
        double result = v15;
        uint64_t v3 = (void **)*v15;
        a2 = v10;
      }
      if (v3 != result + 2)
      {
        uint64_t v13 = v2;
        uint64_t v16 = result;
        uint64_t v9 = a2;
        free(v3);
        unint64_t v2 = v13;
        double result = v16;
        a2 = v9;
      }
      *double result = *(void **)a2;
      result[1] = *(void **)(a2 + 8);
      *(void *)a2 = a2 + 16;
      *(_DWORD *)(a2 + 12) = 0;
    }
    else
    {
      uint64_t v11 = result + 1;
      uint64_t v14 = result;
      int v17 = (char *)*result;
      if (v4)
      {
        uint64_t v5 = 16 * v4;
        do
        {
          BOOL v6 = *(char **)&v17[v5 - 16];
          if (&v17[v5] != v6) {
            free(v6);
          }
          v5 -= 16;
        }
        while (v5);
      }
      unint64_t v2 = v11;
      double result = v14;
    }
    *unint64_t v2 = 0;
  }
  return result;
}

BOOL sub_1CBB03C18(uint64_t a1, uint64_t *a2)
{
  sub_1CBB074A8(a1, a2, (uint64_t)&v8);
  int v4 = v9;
  if (v9)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = *(_DWORD *)(a1 + 144);
    if (v6 >= *(_DWORD *)(a1 + 148)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 136) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 144);
  }
  return v4 != 0;
}

void sub_1CBB03CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(unsigned int *)(a1 + 1216);
  uint64_t v5 = (void *)(a1 + 1208);
  char __p = 0;
  uint64_t v39 = 0;
  unint64_t v40 = 0;
  if (v4)
  {
    unsigned int v6 = (char *)operator new(4 * v4);
    char __p = v6;
    unint64_t v40 = &v6[4 * v4];
    bzero(v6, 4 * v4);
    uint64_t v39 = v40;
    if (v4 != 1)
    {
      int v7 = 0;
      for (uint64_t i = 1; i != v4; ++i)
      {
        int v9 = sub_1CBB0CF44(v5, i);
        int v10 = *(_DWORD *)&v6[4 * v9];
        if (!v10)
        {
          int v10 = v7 + 1;
          *(_DWORD *)&v6[4 * v9] = ++v7;
        }
        *(_DWORD *)&v6[4 * i] = v10;
      }
LABEL_10:
      uint64_t v11 = *(void *)(a1 + 1248);
      uint64_t v12 = *(unsigned int *)(a1 + 1264);
      uint64_t v13 = v11 + 16 * v12;
      if (*(_DWORD *)(a1 + 1256))
      {
        if (v12)
        {
          uint64_t v14 = 16 * v12;
          uint64_t v15 = *(void *)(a1 + 1248);
          while ((*(void *)v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v15 += 16;
            v14 -= 16;
            if (!v14) {
              goto LABEL_15;
            }
          }
        }
        else
        {
          uint64_t v15 = *(void *)(a1 + 1248);
        }
      }
      else
      {
LABEL_15:
        uint64_t v15 = v11 + 16 * v12;
      }
      uint64_t v16 = v11 + 16 * v12;
LABEL_18:
      while (v15 != v16)
      {
        uint64_t v17 = *(unsigned int *)(v15 + 12);
        *(_DWORD *)(v15 + 8) = *(_DWORD *)&v6[4 * *(unsigned int *)(v15 + 8)];
        *(_DWORD *)(v15 + 12) = *(_DWORD *)&v6[4 * v17];
        uint64_t v18 = v15 + 16;
        uint64_t v15 = v13;
        if (v18 != v13)
        {
          uint64_t v15 = v18;
          do
          {
            if ((*(void *)v15 | 0x1000) != 0xFFFFFFFFFFFFF000) {
              goto LABEL_18;
            }
            v15 += 16;
          }
          while (v15 != v13);
          uint64_t v15 = v13;
        }
      }
      uint64_t v19 = *(void *)(a1 + 1224);
      uint64_t v20 = *(unsigned int *)(a1 + 1240);
      uint64_t v21 = v19 + 16 * v20;
      if (*(_DWORD *)(a1 + 1232))
      {
        if (v20)
        {
          uint64_t v22 = 16 * v20;
          uint64_t v23 = *(void *)(a1 + 1224);
          while ((*(void *)v23 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v23 += 16;
            v22 -= 16;
            if (!v22) {
              goto LABEL_29;
            }
          }
        }
        else
        {
          uint64_t v23 = *(void *)(a1 + 1224);
        }
      }
      else
      {
LABEL_29:
        uint64_t v23 = v19 + 16 * v20;
      }
      uint64_t v24 = v19 + 16 * v20;
      while (1)
      {
        do
        {
LABEL_32:
          if (v23 == v24)
          {
            *(_DWORD *)(a1 + 1288) = *(_DWORD *)&v6[4 * *(unsigned int *)(a1 + 1288)];
            if (*(unsigned char *)(a1 + 1841))
            {
              uint64_t v27 = *(unsigned int *)(a3 + 8);
              if (v27)
              {
                uint64_t v28 = *(uint64_t **)a3;
                uint64_t v29 = 8 * v27;
                do
                {
                  unint64_t v30 = sub_1CBB07BD8(a1, *v28);
                  unint64_t v41 = &unk_1F25F6ED8;
                  p_p = &__p;
                  unsigned int v43 = &v41;
                  sub_1CBB0D590(v30, (uint64_t)&v41);
                  if (v43 == &v41)
                  {
                    (*((void (**)(void **))v41 + 4))(&v41);
                  }
                  else if (v43)
                  {
                    (*((void (**)(void))*v43 + 5))();
                  }
                  ++v28;
                  v29 -= 8;
                }
                while (v29);
              }
            }
            else
            {
              unint64_t v41 = &unk_1F25F6ED8;
              p_p = &__p;
              unsigned int v43 = &v41;
              sub_1CBB0D590(a1 + 1368, (uint64_t)&v41);
              if (v43 == &v41)
              {
                (*((void (**)(void **))v41 + 4))(&v41);
              }
              else if (v43)
              {
                (*((void (**)(void))*v43 + 5))();
              }
            }
            if (__p)
            {
              uint64_t v39 = __p;
              operator delete(__p);
            }
            *(_DWORD *)(a1 + 1216) = 0;
            if (*(_DWORD *)(a1 + 1220))
            {
              **(void **)(a1 + 1208) = 0;
              unsigned int v31 = *(_DWORD *)(a1 + 1216) + 1;
              *(_DWORD *)(a1 + 1216) = v31;
              uint64_t v32 = (v7 + 1);
              unsigned int v33 = *(_DWORD *)(a1 + 1280);
              if (v33 != v32)
              {
                if (v33 <= v32)
                {
                  if (*(_DWORD *)(a1 + 1284) < v32) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v33 != v32) {
                    bzero((void *)(*(void *)(a1 + 1272) + 4 * v33), 4 * (v32 - v33));
                  }
                }
                *(_DWORD *)(a1 + 1280) = v32;
                unsigned int v31 = *(_DWORD *)(a1 + 1216);
              }
              if (v31 != v32)
              {
                if (v31 <= v32)
                {
                  if (*(_DWORD *)(a1 + 1220) < v32) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v31 != v32) {
                    bzero((void *)(*v5 + 8 * v31), 8 * (v32 - v31));
                  }
                }
                *(_DWORD *)(a1 + 1216) = v32;
              }
              uint64_t v34 = 0;
              if (v32 <= 1) {
                uint64_t v35 = 1;
              }
              else {
                uint64_t v35 = v32;
              }
              uint64_t v36 = (_DWORD *)(*v5 + 4);
              do
              {
                *(v36 - 1) = v34;
                *uint64_t v36 = 0;
                ++v34;
                v36 += 2;
              }
              while (v35 != v34);
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v25 = *(unsigned int *)(v23 + 12);
          *(_DWORD *)(v23 + 8) = *(_DWORD *)&v6[4 * *(unsigned int *)(v23 + 8)];
          *(_DWORD *)(v23 + 12) = *(_DWORD *)&v6[4 * v25];
          uint64_t v26 = v23 + 16;
          uint64_t v23 = v21;
        }
        while (v26 == v21);
        uint64_t v23 = v26;
        do
        {
          if ((*(void *)v23 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_32;
          }
          v23 += 16;
        }
        while (v23 != v21);
        uint64_t v23 = v21;
      }
    }
  }
  else
  {
    unsigned int v6 = 0;
  }
  int v7 = 0;
  goto LABEL_10;
}

void sub_1CBB07160(uint64_t a1)
{
  *(_DWORD *)(a1 + 1288) = 0;
  uint64_t v2 = a1 + 1248;
  int v3 = *(_DWORD *)(a1 + 1256);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 1264);
    if (v4 > 4 * v3 && v4 >= 0x41)
    {
      uint64_t v5 = *(void **)v2;
      int v6 = 1 << (33 - __clz(v3 - 1));
      if (v6 <= 64) {
        int v7 = 64;
      }
      else {
        int v7 = v6;
      }
      if (v7 == v4)
      {
        *(void *)(a1 + 1256) = 0;
        uint64_t v8 = 16 * v4;
        do
        {
          *uint64_t v5 = -4096;
          v5 += 2;
          v8 -= 16;
        }
        while (v8);
      }
      else
      {
        MEMORY[0x1D25D9CD0](v5, 8);
        unint64_t v25 = (4 * v7 / 3u + 1) | ((unint64_t)(4 * v7 / 3u + 1) >> 1);
        unint64_t v26 = v25 | (v25 >> 2) | ((v25 | (v25 >> 2)) >> 4);
        LODWORD(v26) = (((v26 | (v26 >> 8)) >> 16) | v26 | (v26 >> 8)) + 1;
        *(_DWORD *)(a1 + 1264) = v26;
        uint64_t v27 = operator new(16 * v26, (std::align_val_t)8uLL);
        *(void *)(a1 + 1248) = v27;
        *(void *)(a1 + 1256) = 0;
        uint64_t v28 = *(unsigned int *)(a1 + 1264);
        if (v28)
        {
          uint64_t v29 = 16 * v28;
          do
          {
            void *v27 = -4096;
            v27 += 2;
            v29 -= 16;
          }
          while (v29);
        }
      }
      goto LABEL_18;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 1260)) {
      goto LABEL_18;
    }
    LODWORD(v4) = *(_DWORD *)(a1 + 1264);
    if (v4 > 0x40)
    {
      MEMORY[0x1D25D9CD0](*(void *)v2, 8);
      *(void *)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      goto LABEL_18;
    }
  }
  if (v4)
  {
    int v9 = *(void **)v2;
    uint64_t v10 = 16 * v4;
    do
    {
      *int v9 = -4096;
      v9 += 2;
      v10 -= 16;
    }
    while (v10);
  }
  *(void *)(a1 + 1256) = 0;
LABEL_18:
  uint64_t v11 = (void *)(a1 + 1224);
  int v12 = *(_DWORD *)(a1 + 1232);
  if (v12)
  {
    uint64_t v13 = *(unsigned int *)(a1 + 1240);
    if (v13 > 4 * v12 && v13 >= 0x41)
    {
      uint64_t v14 = (void *)*v11;
      int v15 = 1 << (33 - __clz(v12 - 1));
      if (v15 <= 64) {
        int v16 = 64;
      }
      else {
        int v16 = v15;
      }
      if (v16 == v13)
      {
        *(void *)(a1 + 1232) = 0;
        uint64_t v17 = 16 * v13;
        do
        {
          *uint64_t v14 = -4096;
          v14 += 2;
          v17 -= 16;
        }
        while (v17);
      }
      else
      {
        MEMORY[0x1D25D9CD0](v14, 8);
        unint64_t v30 = (4 * v16 / 3u + 1) | ((unint64_t)(4 * v16 / 3u + 1) >> 1);
        unint64_t v31 = v30 | (v30 >> 2) | ((v30 | (v30 >> 2)) >> 4);
        LODWORD(v31) = (((v31 | (v31 >> 8)) >> 16) | v31 | (v31 >> 8)) + 1;
        *(_DWORD *)(a1 + 1240) = v31;
        uint64_t v32 = operator new(16 * v31, (std::align_val_t)8uLL);
        *(void *)(a1 + 1224) = v32;
        *(void *)(a1 + 1232) = 0;
        uint64_t v33 = *(unsigned int *)(a1 + 1240);
        if (v33)
        {
          uint64_t v34 = 16 * v33;
          do
          {
            *uint64_t v32 = -4096;
            v32 += 2;
            v34 -= 16;
          }
          while (v34);
        }
      }
      goto LABEL_35;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 1236)) {
      goto LABEL_35;
    }
    LODWORD(v13) = *(_DWORD *)(a1 + 1240);
    if (v13 > 0x40)
    {
      MEMORY[0x1D25D9CD0](*v11, 8);
      void *v11 = 0;
      *(void *)(a1 + 1232) = 0;
      *(_DWORD *)(a1 + 1240) = 0;
      goto LABEL_35;
    }
  }
  if (v13)
  {
    uint64_t v18 = (void *)*v11;
    uint64_t v19 = 16 * v13;
    do
    {
      void *v18 = -4096;
      v18 += 2;
      v19 -= 16;
    }
    while (v19);
  }
  *(void *)(a1 + 1232) = 0;
LABEL_35:
  *(_DWORD *)(a1 + 1280) = 0;
  *(_DWORD *)(a1 + 1376) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  int v20 = *(_DWORD *)(a1 + 1712);
  if (v20 || *(_DWORD *)(a1 + 1716))
  {
    uint64_t v21 = (_DWORD *)(a1 + 1704);
    uint64_t v22 = *(unsigned int *)(a1 + 1720);
    if (v22 > 4 * v20 && v22 >= 0x41)
    {
      sub_1CD414440(v21);
    }
    else
    {
      if (v22)
      {
        uint64_t v23 = *(_DWORD **)v21;
        uint64_t v24 = 8 * v22;
        do
        {
          *uint64_t v23 = -1;
          v23 += 2;
          v24 -= 8;
        }
        while (v24);
      }
      *(void *)(a1 + 1712) = 0;
    }
  }
  *(_DWORD *)(a1 + 1792) = 0;
  sub_1CB833A08(a1 + 1816, *(void **)(a1 + 1824));
  *(void *)(a1 + 1816) = a1 + 1824;
  *(void *)(a1 + 1832) = 0;
  *(void *)(a1 + 1824) = 0;
  *(_DWORD *)(a1 + 1736) = 0;
  sub_1CB833A08(a1 + 1760, *(void **)(a1 + 1768));
  *(void *)(a1 + 1760) = a1 + 1768;
  *(void *)(a1 + 1776) = 0;
  *(void *)(a1 + 1768) = 0;
  *(unsigned char *)(a1 + 1840) = *(unsigned char *)(*(void *)(a1 + 1408) + 356);
}

void *sub_1CBB074A8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = 0;
  double result = (void *)sub_1CBB07564(a1, a2, &v14);
  int v7 = v14;
  if (result)
  {
    uint64_t v12 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v13 = 16;
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 8);
      uint64_t v13 = *(unsigned int *)(a1 + 16);
    }
    char v11 = 0;
    uint64_t v10 = v12 + 8 * v13;
  }
  else
  {
    double result = sub_1CBB0760C((_DWORD *)a1, (uint64_t)a2, a2, v14);
    int v7 = result;
    *double result = *a2;
    uint64_t v8 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v9 = 16;
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = *(unsigned int *)(a1 + 16);
    }
    uint64_t v10 = v8 + 8 * v9;
    char v11 = 1;
  }
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v10;
  *(unsigned char *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_1CBB07564(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  int v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      int v7 = (void *)(v3 + 8 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_13;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

void *sub_1CBB0760C(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 16;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1CBB076CC((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CBB07564((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

uint64_t sub_1CBB076CC(uint64_t a1, unsigned int a2)
{
  v14[16] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x11)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v10 = *(void **)(a1 + 8);
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x10)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v12 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v12;
    }
    sub_1CBB07854(a1, v10, &v10[v11]);
    JUMPOUT(0x1D25D9CD0);
  }
  int v6 = v14;
  for (uint64_t i = 8; i != 136; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v13 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v13;
  }
  return sub_1CBB07854(a1, v14, v6);
}

uint64_t sub_1CBB07854(uint64_t result, void *a2, void *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 136);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_11;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_11:
  while (a2 != a3)
  {
    if (*a2 != -8192 && *a2 != -4096)
    {
      int v10 = 0;
      uint64_t result = sub_1CBB07564((uint64_t)v5, a2, &v10);
      *int v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CBB07920(unsigned __int16 *a1)
{
  unint64_t v1 = *((void *)a1 + 2);
  if ((v1 & 0x400000000) == 0) {
    return 0;
  }
  uint64_t v3 = sub_1CBE52E8C(*a1);
  if ((v3 & 0xFF00000000) == 0) {
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
  }
  unsigned int v4 = v3;
  uint64_t result = 1;
  if (v4 > 0x29 || ((1 << v4) & 0x30030000000) == 0)
  {
    if (v4 - 164 >= 4) {
      return (v1 >> 7) & 1;
    }
    else {
      return 1;
    }
  }
  return result;
}

uint64_t sub_1CBB079A4(uint64_t result, unsigned __int16 *a2)
{
  uint64_t v2 = (void *)result;
  if ((a2[8] & 2) != 0)
  {
    int v5 = *a2;
    unsigned __int16 v6 = sub_1CBDA6464(v5, 0x59u);
    unsigned __int16 v7 = sub_1CBDA6464(v5, 0x5Au);
    unsigned __int16 v8 = sub_1CBDA6464(v5, 0x74u);
    uint64_t result = sub_1CBDA6464(v5, 0x75u);
    v2[3] = ((unint64_t)v8 << 32) | (result << 48) | ((unint64_t)v7 << 16) | v6;
    unsigned int v4 = v2 + 3;
    uint64_t v3 = 4;
  }
  else
  {
    uint64_t v3 = 0;
    unsigned int v4 = (void *)(result + 24);
  }
  *uint64_t v2 = v4;
  v2[1] = v3;
  v2[2] = 4;
  return result;
}

_DWORD *sub_1CBB07A54(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unsigned int v4 = *(int **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = 8 * v12;
      uint64_t v14 = result;
      do
      {
        *uint64_t v14 = -1;
        v14 += 2;
        v13 -= 8;
      }
      while (v13);
    }
    if (v3)
    {
      int v15 = 0;
      int v16 = v12 - 1;
      uint64_t v17 = v4;
      do
      {
        int v18 = *v17;
        if (*v17 <= 0xFFFFFFFD)
        {
          unsigned int v19 = (37 * v18) & v16;
          int v20 = &result[2 * v19];
          int v21 = *v20;
          if (v18 != *v20)
          {
            uint64_t v22 = 0;
            int v23 = 1;
            while (v21 != -1)
            {
              if (v22) {
                BOOL v25 = 0;
              }
              else {
                BOOL v25 = v21 == -2;
              }
              if (v25) {
                uint64_t v22 = v20;
              }
              unsigned int v26 = v19 + v23++;
              unsigned int v19 = v26 & v16;
              int v20 = &result[2 * (v26 & v16)];
              int v21 = *v20;
              if (v18 == *v20) {
                goto LABEL_20;
              }
            }
            if (v22) {
              int v20 = v22;
            }
          }
LABEL_20:
          int v24 = v17[1];
          *int v20 = v18;
          v20[1] = v24;
          *(_DWORD *)(a1 + 8) = ++v15;
        }
        v17 += 2;
      }
      while (v17 != &v4[2 * v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *uint64_t result = -1;
      result += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1CBB07BD8(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 1841)) {
    return 0;
  }
  uint64_t v4 = *(int *)(a2 + 24);
  unint64_t result = *(void *)(*(void *)(a1 + 72) + 8 * v4);
  if (!result)
  {
    *(void *)(a1 + 1192) += 96;
    uint64_t v6 = *(void *)(a1 + 1112);
    if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) - v6 + 96 > *(void *)(a1 + 1120) - v6)
    {
      unsigned int v7 = *(_DWORD *)(a1 + 1136) >> 7;
      if (v7 >= 0x1E) {
        LOBYTE(v7) = 30;
      }
      uint64_t v8 = 4096 << v7;
      unint64_t result = (unint64_t)operator new(4096 << v7, (std::align_val_t)8uLL);
      unsigned int v9 = *(_DWORD *)(a1 + 1136);
      if (v9 >= *(_DWORD *)(a1 + 1140)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 1128) + 8 * v9) = result;
      ++*(_DWORD *)(a1 + 1136);
      *(void *)(a1 + 1120) = result + v8;
      uint64_t v4 = *(int *)(a2 + 24);
    }
    else
    {
      unint64_t result = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(a1 + 1112) = result + 96;
    *(_WORD *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = result + 16;
    *(void *)(result + 8) = 0;
    *(void *)(result + 40) = result + 56;
    *(void *)(result + 48) = 0x100000000;
    *(void *)(result + 72) = 0;
    *(void *)(result + 80) = 0;
    *(void *)(result + 64) = 0;
    *(unsigned char *)(result + 88) = 0;
    *(void *)(*(void *)(a1 + 72) + 8 * v4) = result;
  }
  return result;
}

uint64_t sub_1CBB07D28(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t *sub_1CBB07DF4(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 136);
    if (v3 != *(void **)(v2 + 128)) {
      free(v3);
    }
    uint64_t v4 = *(void **)(v2 + 72);
    if (v4 != *(void **)(v2 + 64)) {
      free(v4);
    }
    sub_1CBB07F10(*(void *)(v2 + 48), *(void *)(v2 + 48) + 104 * *(unsigned int *)(v2 + 56));
    if (*(void *)(v2 + 48) != v2 + 64) {
      free(*(void **)(v2 + 48));
    }
    sub_1CBB07F70(*(char **)(v2 + 32), (char *)(*(void *)(v2 + 32) + 96 * *(unsigned int *)(v2 + 40)));
    if (*(void *)(v2 + 32) != v2 + 48) {
      free(*(void **)(v2 + 32));
    }
    unint64_t v5 = *(char **)(v2 + 16);
    uint64_t v6 = *(unsigned int *)(v2 + 24);
    if (v6)
    {
      uint64_t v7 = 32 * v6;
      do
      {
        uint64_t v8 = *(char **)&v5[v7 - 24];
        if (&v5[v7 - 8] != v8) {
          free(v8);
        }
        v7 -= 32;
      }
      while (v7);
      unint64_t v5 = *(char **)(v2 + 16);
    }
    if (v5 != (char *)(v2 + 32)) {
      free(v5);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

void sub_1CBB07F10(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v4 = *(void **)(v2 - 64);
      if (v4 != *(void **)(v2 - 72)) {
        free(v4);
      }
      unint64_t v5 = *(void **)(v2 - 96);
      if ((void *)(v2 - 80) != v5) {
        free(v5);
      }
      v2 -= 104;
    }
    while (v2 != a1);
  }
}

void sub_1CBB07F70(char *a1, char *a2)
{
  if (a2 != a1)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v4 = (void *)*((void *)v2 - 8);
      unint64_t v5 = v2 - 72;
      if (v4 != *((void **)v2 - 9)) {
        free(v4);
      }
      uint64_t v6 = (char *)*((void *)v2 - 11);
      if (v5 != v6) {
        free(v6);
      }
      v2 -= 96;
    }
    while (v5 - 24 != a1);
  }
}

uint64_t sub_1CBB07FD8(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1CBB08284((_DWORD *)a1, a2);
  if (v4)
  {
    unint64_t v5 = *(void **)(a1 + 136);
    uint64_t v6 = *(unsigned int *)(a1 + 144);
    uint64_t v7 = &v5[v6];
    if (v6)
    {
      uint64_t v8 = 8 * v6;
      while (*v5 != *a2)
      {
        ++v5;
        v8 -= 8;
        if (!v8)
        {
          unint64_t v5 = v7;
          break;
        }
      }
    }
    if (v7 != v5 + 1)
    {
      memmove(v5, v5 + 1, (char *)v7 - (char *)(v5 + 1));
      LODWORD(v6) = *(_DWORD *)(a1 + 144);
    }
    *(_DWORD *)(a1 + 144) = v6 - 1;
  }
  return v4;
}

uint64_t sub_1CBB08064(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v5)
      {
        uint64_t v9 = *(unsigned int *)(a1 + 8);
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
        uint64_t v6 = v9;
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v7 = *(unsigned int *)(a2 + 8);
      if (v6 != v7) {
        memcpy((void *)(*(void *)a1 + 8 * v6), (const void *)(*(void *)a2 + 8 * v6), *(void *)a2 + 8 * v7 - (*(void *)a2 + 8 * v6));
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t sub_1CBB08144(uint64_t a1, const void **a2)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v4 = a2 + 2;
    uint64_t v3 = *a2;
    if (*a2 == a2 + 2)
    {
      uint64_t v6 = a2 + 1;
      uint64_t v5 = *((unsigned int *)a2 + 2);
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7 >= v5)
      {
        if (v5) {
          memmove(*(void **)a1, *a2, 8 * v5);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v7)
        {
          uint64_t v13 = *(unsigned int *)(a1 + 8);
          uint64_t v14 = a2;
          memmove(*(void **)a1, v3, 8 * v7);
          uint64_t v8 = v13;
          a2 = v14;
        }
        else
        {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *v6;
        if (v8 != v9) {
          memcpy((void *)(*(void *)a1 + 8 * v8), (char *)*a2 + 8 * v8, (unsigned char *)*a2 + 8 * v9 - ((unsigned char *)*a2 + 8 * v8));
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
    }
    else
    {
      uint64_t v11 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        uint64_t v12 = a2;
        free(v11);
        a2 = v12;
        uint64_t v3 = *v12;
      }
      *(void *)a1 = v3;
      uint64_t v6 = a2 + 1;
      *(void *)(a1 + 8) = a2[1];
      *a2 = v4;
      *((_DWORD *)a2 + 3) = 0;
    }
    _DWORD *v6 = 0;
  }
  return a1;
}

uint64_t sub_1CBB08284(_DWORD *a1, void *a2)
{
  uint64_t v5 = 0;
  uint64_t result = sub_1CBB07564((uint64_t)a1, a2, &v5);
  if (result)
  {
    *uint64_t v5 = -8192;
    int v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_1CBB082D8(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v5 = (void *)(a1 + 32 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a3)
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v7 = 0;
      int v8 = 1;
      while (v6 != -4096)
      {
        if (v7) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v6 == -8192;
        }
        if (v11) {
          uint64_t v7 = v5;
        }
        int v12 = v4 + v8++;
        uint64_t v4 = v12 & (a2 - 1);
        uint64_t v5 = (void *)(a1 + 32 * v4);
        uint64_t v6 = *v5;
        uint64_t v9 = 1;
        if (*v5 == a3) {
          goto LABEL_7;
        }
      }
      uint64_t v9 = 0;
      if (v7) {
        uint64_t v5 = v7;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v9 = 0;
  }
LABEL_7:
  *a4 = v5;
  return v9;
}

void *sub_1CBB0836C(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CBB08424(a1, v6);
  int v8 = 0;
  sub_1CBB082D8(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CBB08424(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD41F6C8(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 32 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CBB084F0(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = HIDWORD(a2);
  unint64_t v4 = *(unsigned int *)(a1 + 8);
  uint64_t v5 = HIDWORD(a2) + 1;
  unint64_t v6 = (HIDWORD(a2) + 1);
  if (HIDWORD(a2) >= v4 && v6 != v4)
  {
    if (v6 >= v4)
    {
      if (v6 > *(unsigned int *)(a1 + 12))
      {
        sub_1CBB085E4(a1, (HIDWORD(a2) + 1));
        unint64_t v4 = *(unsigned int *)(a1 + 8);
      }
      if (v6 != v4)
      {
        uint64_t v8 = *(void *)a1 + 104 * v6;
        uint64_t v9 = *(void *)a1 + 104 * v4;
        do
        {
          *(_OWORD *)uint64_t v9 = 0uLL;
          *(_OWORD *)(v9 + 16) = 0uLL;
          *(_OWORD *)(v9 + 32) = 0uLL;
          *(_OWORD *)(v9 + 48) = 0uLL;
          *(void *)(v9 + 96) = 0;
          *(_OWORD *)(v9 + 80) = 0uLL;
          *(_OWORD *)(v9 + 64) = 0uLL;
          *(unsigned char *)uint64_t v9 = 1;
          *(void *)(v9 + 8) = v9 + 24;
          *(_DWORD *)(v9 + 20) = 1;
          *(void *)(v9 + 32) = v9 + 64;
          *(void *)(v9 + 40) = v9 + 64;
          *(_DWORD *)(v9 + 48) = 4;
          v9 += 104;
        }
        while (v9 != v8);
      }
    }
    else
    {
      sub_1CBB07F10(*(void *)a1 + 104 * v6, *(void *)a1 + 104 * v4);
    }
    *(_DWORD *)(a1 + 8) = v5;
  }
  return *(void *)a1 + 104 * v3;
}

void sub_1CBB085E4(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  unint64_t v6 = (char *)malloc_type_malloc(104 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  int v7 = v6;
  uint64_t v8 = *(unsigned char **)a1;
  unsigned int v9 = *(_DWORD *)(a1 + 8);
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 104 * v9;
    do
    {
      int v12 = &v7[v10];
      uint64_t v13 = &v8[v10];
      *(_WORD *)int v12 = *(_WORD *)&v8[v10];
      uint64_t v14 = &v7[v10 + 24];
      *(void *)&v7[v10 + 8] = v14;
      *((void *)v12 + 2) = 0x100000000;
      unsigned int v15 = *(_DWORD *)&v8[v10 + 16];
      if (v15) {
        BOOL v16 = v13 == v12;
      }
      else {
        BOOL v16 = 1;
      }
      if (!v16)
      {
        uint64_t v17 = (char *)*((void *)v13 + 1);
        if (v13 + 24 == v17)
        {
          if (v15 >= 2) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v14, v17, 4 * *(unsigned int *)&v8[v10 + 16]);
          *((_DWORD *)v12 + 4) = v15;
        }
        else
        {
          *(void *)&v7[v10 + 8] = v17;
          int v24 = *(_DWORD *)&v8[v10 + 20];
          *((_DWORD *)v12 + 4) = v15;
          *((_DWORD *)v12 + 5) = v24;
          *((void *)v13 + 1) = v13 + 24;
          *(_DWORD *)&v8[v10 + 20] = 0;
        }
        *((_DWORD *)v13 + 4) = 0;
      }
      int v18 = v12 + 64;
      *((void *)v12 + 4) = v12 + 64;
      uint64_t v20 = *((void *)v13 + 4);
      uint64_t v19 = *((void *)v13 + 5);
      if (v19 == v20)
      {
        *((void *)v12 + 5) = v18;
        uint64_t v21 = *(unsigned int *)&v8[v10 + 52];
        if (v21) {
          memmove(v18, *((const void **)v13 + 5), 8 * v21);
        }
      }
      else
      {
        *((void *)v12 + 5) = v19;
        *((void *)v13 + 5) = v20;
      }
      uint64_t v22 = &v8[v10];
      int v23 = &v7[v10];
      *((void *)v23 + 6) = *(void *)&v8[v10 + 48];
      *((_DWORD *)v23 + 14) = *(_DWORD *)&v8[v10 + 56];
      *((void *)v22 + 6) = 4;
      *((_DWORD *)v22 + 14) = 0;
      v23[96] = v8[v10 + 96];
      v10 += 104;
    }
    while (v11 != v10);
    uint64_t v8 = *(unsigned char **)a1;
    int v25 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    int v25 = 0;
  }
  sub_1CBB07F10((uint64_t)v8, (uint64_t)&v8[104 * v25]);
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

void sub_1CBB08814(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v5 = a2;
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = *((_DWORD *)a2 + 2);
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  if (!v9) {
    goto LABEL_50;
  }
  for (uint64_t i = 0; i != v9; ++i)
  {
    if (!a3)
    {
LABEL_20:
      uint64_t v16 = *(void *)a1;
      uint64_t v17 = *(void *)a1 + 32 * i;
      uint64_t v18 = *v5 + 32 * i;
      uint64_t v19 = *(unsigned int *)(v18 + 16);
      if (v19)
      {
        if (!*(_DWORD *)(v17 + 16) || (char v20 = *(unsigned char *)v17) != 0)
        {
          char v20 = a4;
          if (*(unsigned char *)v18) {
            char v20 = 1;
          }
        }
        *(unsigned char *)uint64_t v17 = v20;
        uint64_t v21 = v16 + 32 * i;
        uint64_t v22 = v21 + 8;
        int v23 = *(void **)(v18 + 8);
        unsigned int v24 = *(_DWORD *)(v21 + 16);
        uint64_t v25 = 8 * v19;
        do
        {
          if (v24 >= *(_DWORD *)(v22 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)v22 + 8 * v24) = *v23;
          unsigned int v24 = *(_DWORD *)(v22 + 8) + 1;
          *(_DWORD *)(v22 + 8) = v24;
          ++v23;
          v25 -= 8;
        }
        while (v25);
        uint64_t v5 = a2;
      }
      else
      {
        uint64_t v22 = v17 + 8;
        unsigned int v24 = *(_DWORD *)(v17 + 16);
      }
      uint64_t v26 = v16 + 32 * i;
      unint64_t v27 = 126 - 2 * __clz(v24);
      if (v24) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      sub_1CBB09C2C(*(unint64_t **)v22, (unint64_t *)(*(void *)v22 + 8 * v24), v28, 1);
      unsigned int v31 = *(_DWORD *)(v26 + 16);
      unint64_t v30 = (_DWORD *)(v26 + 16);
      uint64_t v29 = v31;
      uint64_t v32 = *(unint64_t **)v22;
      uint64_t v33 = *(void *)v22 + 8 * v31;
      uint64_t v34 = *(unint64_t **)v22;
      if (v31)
      {
        unint64_t v35 = 0;
        uint64_t v36 = 8 * v29 - 8;
        while (v36 != v35)
        {
          unint64_t v38 = v32[v35 / 8];
          unint64_t v37 = v32[v35 / 8 + 1];
          v35 += 8;
          if (v38 == v37)
          {
            uint64_t v34 = &v32[v35 / 8 - 1];
            goto LABEL_39;
          }
        }
      }
      else
      {
LABEL_39:
        if (v34 != (unint64_t *)v33)
        {
          uint64_t v39 = v34 + 2;
          if (v34 + 2 != (unint64_t *)v33)
          {
            unint64_t v40 = *v34;
            do
            {
              unint64_t v41 = v40;
              unint64_t v40 = *v39;
              if (v41 != *v39)
              {
                v34[1] = v40;
                ++v34;
              }
              ++v39;
            }
            while (v39 != (unint64_t *)v33);
            uint64_t v32 = *(unint64_t **)v22;
          }
          uint64_t v33 = (uint64_t)(v34 + 1);
        }
      }
      *unint64_t v30 = (unint64_t)(v33 - (void)v32) >> 3;
      continue;
    }
    if (*(void *)(a3 + 48))
    {
      for (uint64_t j = *(uint64_t **)(a3 + 40); j; uint64_t j = (uint64_t *)*j)
      {
        unsigned int v12 = *((_DWORD *)j + 7);
        if (v12 <= i)
        {
          if (v12 >= i) {
            goto LABEL_20;
          }
          ++j;
        }
      }
    }
    else
    {
      uint64_t v13 = *(unsigned int *)(a3 + 8);
      if (v13)
      {
        uint64_t v14 = *(_DWORD **)a3;
        uint64_t v15 = 4 * v13;
        while (*v14 != i)
        {
          ++v14;
          v15 -= 4;
          if (!v15) {
            goto LABEL_48;
          }
        }
        if (v15) {
          goto LABEL_20;
        }
      }
    }
LABEL_48:
    ;
  }
  unsigned int v8 = *((_DWORD *)v5 + 2);
LABEL_50:
  if (v9 < v8)
  {
    unint64_t v42 = v8;
    if (a3)
    {
      do
      {
        unint64_t v43 = v42 - 1;
        if (*(void *)(a3 + 48))
        {
          for (unsigned int k = *(uint64_t **)(a3 + 40); k; unsigned int k = (uint64_t *)*k)
          {
            unsigned int v45 = *((_DWORD *)k + 7);
            if (v45 <= v43)
            {
              if (v45 >= v43) {
                goto LABEL_65;
              }
              ++k;
            }
          }
        }
        else
        {
          uint64_t v46 = *(unsigned int *)(a3 + 8);
          if (v46)
          {
            BOOL v47 = *(_DWORD **)a3;
            uint64_t v48 = 4 * v46;
            while (*v47 != v43)
            {
              ++v47;
              v48 -= 4;
              if (!v48) {
                goto LABEL_77;
              }
            }
            if (v48)
            {
LABEL_65:
              if (v43 >= *(unsigned int *)(a1 + 8)) {
                sub_1CBB09B64(a1, v42);
              }
              uint64_t v49 = *v5;
              unsigned int v50 = (unsigned char *)(*v5 + 32 * v43);
              uint64_t v51 = *(void *)a1;
              unint64_t v52 = (unsigned char *)(*(void *)a1 + 32 * v43);
              char v54 = *v50;
              __int16 v53 = (const void **)(v50 + 8);
              *unint64_t v52 = v54;
              unint64_t v55 = v52 + 8;
              if (v51 != v49)
              {
                uint64_t v56 = *((unsigned int *)v53 + 2);
                uint64_t v57 = *((unsigned int *)v55 + 2);
                if (v57 >= v56)
                {
                  if (v56) {
                    memmove(*(void **)v55, *v53, 8 * v56);
                  }
                }
                else
                {
                  if (*((_DWORD *)v55 + 3) < v56)
                  {
                    *((_DWORD *)v55 + 2) = 0;
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v57) {
                    memmove(*(void **)v55, *v53, 8 * v57);
                  }
                  else {
                    uint64_t v57 = 0;
                  }
                  uint64_t v58 = *((unsigned int *)v53 + 2);
                  if (v57 != v58) {
                    memcpy((void *)(*(void *)v55 + 8 * v57), (char *)*v53 + 8 * v57, (unsigned char *)*v53 + 8 * v58 - ((unsigned char *)*v53 + 8 * v57));
                  }
                }
                *((_DWORD *)v55 + 2) = v56;
              }
            }
          }
        }
LABEL_77:
        unint64_t v42 = v43;
      }
      while (v43 != v9);
      unsigned int v59 = *(_DWORD *)(a1 + 8);
    }
    else
    {
      unsigned int v59 = *(_DWORD *)(a1 + 8);
      uint64_t v65 = *v5 + 32 * v9;
      uint64_t v66 = 32 * v42 - 32 * v9;
      unint64_t v67 = v65;
      do
      {
        unint64_t v68 = *(void *)a1;
        unint64_t v69 = v67;
        if (v59 >= *(_DWORD *)(a1 + 12))
        {
          unint64_t v74 = v59 + 1;
          unint64_t v75 = v68 + 32 * v59;
          if (v68 <= v67 && v75 > v67)
          {
            unint64_t v77 = v65 - v68;
            sub_1CBB0A6D4(a1, v74);
            unint64_t v68 = *(void *)a1;
            unint64_t v69 = *(void *)a1 + v77;
          }
          else
          {
            sub_1CBB0A6D4(a1, v74);
            unint64_t v68 = *(void *)a1;
            unint64_t v69 = v67;
          }
        }
        unint64_t v70 = v68 + 32 * *(unsigned int *)(a1 + 8);
        *(unsigned char *)unint64_t v70 = *(unsigned char *)v69;
        uint64_t v71 = (void *)(v70 + 24);
        *(void *)(v70 + 16) = 0x100000000;
        *(void *)(v70 + 8) = v70 + 24;
        unint64_t v72 = v70 + 8;
        unsigned int v73 = *(_DWORD *)(v69 + 16);
        if (v73 && v72 != v69 + 8)
        {
          if (v73 >= 2)
          {
            *(_DWORD *)(v72 + 8) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v71, *(const void **)(v69 + 8), 8 * *(unsigned int *)(v69 + 16));
          *(_DWORD *)(v72 + 8) = v73;
        }
        unsigned int v59 = *(_DWORD *)(a1 + 8) + 1;
        *(_DWORD *)(a1 + 8) = v59;
        v67 += 32;
        v65 += 32;
        v66 -= 32;
      }
      while (v66);
    }
    if (v9 < v59)
    {
      while (2)
      {
        if (a3)
        {
          if (*(void *)(a3 + 48))
          {
            for (uint64_t m = *(uint64_t **)(a3 + 40); m; uint64_t m = (uint64_t *)*m)
            {
              unsigned int v61 = *((_DWORD *)m + 7);
              if (v61 <= v9)
              {
                if (v61 >= v9) {
                  goto LABEL_90;
                }
                ++m;
              }
            }
            goto LABEL_99;
          }
          uint64_t v62 = *(unsigned int *)(a3 + 8);
          if (!v62) {
            goto LABEL_99;
          }
          uint64_t v63 = *(_DWORD **)a3;
          uint64_t v64 = 4 * v62;
          while (*v63 != v9)
          {
            ++v63;
            v64 -= 4;
            if (!v64) {
              goto LABEL_99;
            }
          }
          if (!v64 || (a4 & 1) == 0)
          {
LABEL_99:
            if (++v9 == v59) {
              return;
            }
            continue;
          }
        }
        else
        {
LABEL_90:
          if (!a4) {
            goto LABEL_99;
          }
        }
        break;
      }
      *(unsigned char *)(*(void *)a1 + 32 * v9) = 1;
      goto LABEL_99;
    }
  }
}

void sub_1CBB08D74(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  unsigned int v4 = *((_DWORD *)a2 + 2);
  if (v4 >= v3) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v86 = v5;
  if (v5)
  {
    uint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)a1;
      unsigned int v8 = (char *)(*(void *)a1 + 104 * v6);
      uint64_t v9 = *a2;
      uint64_t v10 = *a2 + 104 * v6;
      if (*v8) {
        BOOL v11 = *(unsigned char *)v10 == 0;
      }
      else {
        BOOL v11 = 1;
      }
      char v12 = !v11;
      *unsigned int v8 = v12;
      uint64_t v13 = v8 + 8;
      uint64_t v14 = *(unsigned int *)(v10 + 16);
      if (v14)
      {
        uint64_t v15 = *(_DWORD **)(v10 + 8);
        unsigned int v16 = *((_DWORD *)v13 + 2);
        uint64_t v17 = 4 * v14;
        do
        {
          if (v16 >= *((_DWORD *)v13 + 3)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)v13 + 4 * v16) = *v15;
          unsigned int v16 = *((_DWORD *)v13 + 2) + 1;
          *((_DWORD *)v13 + 2) = v16;
          ++v15;
          v17 -= 4;
        }
        while (v17);
      }
      unint64_t v18 = v7 + 104 * v6;
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
      unsigned int v21 = *(_DWORD *)(v18 + 16);
      char v20 = (_DWORD *)(v18 + 16);
      uint64_t v19 = v21;
      uint64_t v22 = *(void *)v13;
      uint64_t v23 = *(void *)v13 + 4 * v21;
      if (v21)
      {
        unsigned int v24 = (int *)(v22 - 4);
        uint64_t v25 = 4 * v19 - 4;
        uint64_t v5 = v86;
        while (v25)
        {
          int v26 = v24[1];
          int v27 = v24[2];
          ++v24;
          v25 -= 4;
          if (v26 == v27) {
            goto LABEL_24;
          }
        }
      }
      else
      {
        unsigned int v24 = *(int **)v13;
        uint64_t v5 = v86;
LABEL_24:
        if (v24 != (int *)v23)
        {
          uint64_t v28 = v24 + 2;
          if (v24 + 2 != (int *)v23)
          {
            int v29 = *v24;
            do
            {
              int v30 = v29;
              int v29 = *v28;
              if (v30 != *v28)
              {
                v24[1] = v29;
                ++v24;
              }
              ++v28;
            }
            while (v28 != (int *)v23);
          }
          uint64_t v23 = (uint64_t)(v24 + 1);
        }
      }
      *char v20 = (unint64_t)(v23 - v22) >> 2;
      uint64_t v31 = v9 + 104 * v6;
      uint64_t v33 = *(unint64_t **)(v31 + 32);
      uint64_t v32 = *(unint64_t **)(v31 + 40);
      uint64_t v34 = (unsigned int *)(v31 + 52);
      unint64_t v35 = (unsigned int *)(v31 + 48);
      if (v32 == v33) {
        unint64_t v35 = v34;
      }
      uint64_t v36 = *v35;
      if (v36)
      {
        uint64_t v37 = 8 * v36;
        unint64_t v38 = v32;
        while (*v38 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v38;
          v37 -= 8;
          if (!v37) {
            goto LABEL_40;
          }
        }
      }
      else
      {
        unint64_t v38 = v32;
      }
      uint64_t v39 = &v32[v36];
      if (v38 == v39) {
        goto LABEL_40;
      }
      uint64_t v40 = v7 + 104 * v6 + 32;
      unint64_t v42 = *(unint64_t **)v40;
      unint64_t v41 = *(unint64_t **)(v7 + 104 * v6 + 40);
      unint64_t v43 = *v38;
LABEL_43:
      uint64_t v44 = *(unsigned int *)(v40 + 20);
      if (v41 != v42) {
        break;
      }
      if (v44)
      {
        unsigned int v45 = 0;
        uint64_t v46 = 8 * v44;
        BOOL v47 = v42;
        while (*v47 != v43)
        {
          if (*v47 == -2) {
            unsigned int v45 = v47;
          }
          ++v47;
          v46 -= 8;
          if (!v46)
          {
            if (!v45) {
              goto LABEL_51;
            }
            unint64_t *v45 = v43;
            --*(_DWORD *)(v40 + 24);
            goto LABEL_75;
          }
        }
        goto LABEL_75;
      }
LABEL_51:
      unsigned int v48 = *(_DWORD *)(v40 + 16);
      if (v44 >= v48) {
        goto LABEL_54;
      }
      *(_DWORD *)(v40 + 20) = v44 + 1;
      v42[v44] = v43;
LABEL_75:
      unint64_t v42 = *(unint64_t **)v40;
      unint64_t v41 = *(unint64_t **)(v40 + 8);
      uint64_t v58 = v38 + 1;
      while (v58 != v39)
      {
        unint64_t v59 = *v58++;
        unint64_t v43 = v59;
        if (v59 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v38 = v58 - 1;
          goto LABEL_43;
        }
      }
LABEL_40:
      if (++v6 == v5)
      {
        unsigned int v4 = *((_DWORD *)a2 + 2);
        goto LABEL_85;
      }
    }
    unsigned int v48 = *(_DWORD *)(v40 + 16);
LABEL_54:
    if (3 * v48 <= 4 * ((int)v44 - *(_DWORD *)(v40 + 24)))
    {
      if (v48 >= 0x40) {
        v48 *= 2;
      }
      else {
        unsigned int v48 = 128;
      }
    }
    else if (v48 - v44 >= v48 >> 3)
    {
      goto LABEL_56;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v40, v48);
    unsigned int v48 = *(_DWORD *)(v40 + 16);
    unint64_t v41 = *(unint64_t **)(v40 + 8);
LABEL_56:
    unsigned int v49 = v48 - 1;
    unsigned int v50 = (v48 - 1) & ((v43 >> 4) ^ (v43 >> 9));
    uint64_t v51 = &v41[v50];
    unint64_t v52 = *v51;
    if (*v51 == -1)
    {
      __int16 v53 = 0;
LABEL_68:
      if (v53) {
        uint64_t v57 = v53;
      }
      else {
        uint64_t v57 = v51;
      }
      if (*v57 != v43)
      {
        if (*v57 == -2) {
          --*(_DWORD *)(v40 + 24);
        }
        else {
          ++*(_DWORD *)(v40 + 20);
        }
        unint64_t *v57 = v43;
      }
    }
    else
    {
      __int16 v53 = 0;
      int v54 = 1;
      while (v52 != v43)
      {
        if (v53) {
          BOOL v55 = 0;
        }
        else {
          BOOL v55 = v52 == -2;
        }
        if (v55) {
          __int16 v53 = v51;
        }
        unsigned int v56 = v50 + v54++;
        unsigned int v50 = v56 & v49;
        uint64_t v51 = &v41[v56 & v49];
        unint64_t v52 = *v51;
        if (*v51 == -1) {
          goto LABEL_68;
        }
      }
    }
    goto LABEL_75;
  }
LABEL_85:
  if (v5 < v4)
  {
    uint64_t v60 = *a2 + 104 * v5;
    LODWORD(v61) = *(_DWORD *)(a1 + 8);
    uint64_t v62 = 104 * v4 - 104 * v5;
    unint64_t v63 = v60;
    do
    {
      unint64_t v64 = *(void *)a1;
      unint64_t v65 = v63;
      if (v61 >= *(_DWORD *)(a1 + 12))
      {
        unint64_t v80 = v61 + 1;
        unint64_t v81 = v64 + 104 * v61;
        if (v64 <= v63 && v81 > v63)
        {
          unint64_t v83 = v60 - v64;
          sub_1CBB085E4(a1, v80);
          unint64_t v64 = *(void *)a1;
          unint64_t v65 = *(void *)a1 + v83;
        }
        else
        {
          sub_1CBB085E4(a1, v80);
          unint64_t v64 = *(void *)a1;
          unint64_t v65 = v63;
        }
      }
      unsigned int v66 = *(_DWORD *)(a1 + 8);
      unint64_t v67 = v64 + 104 * v66;
      *(_WORD *)unint64_t v67 = *(_WORD *)v65;
      unint64_t v68 = (void *)(v67 + 24);
      *(void *)(v67 + 16) = 0x100000000;
      *(void *)(v67 + 8) = v67 + 24;
      unint64_t v69 = v67 + 8;
      unsigned int v70 = *(_DWORD *)(v65 + 16);
      if (v70 && v69 != v65 + 8)
      {
        if (v70 >= 2)
        {
          *(_DWORD *)(v69 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v68, *(const void **)(v65 + 8), 4 * *(unsigned int *)(v65 + 16));
        *(_DWORD *)(v69 + 8) = v70;
      }
      unint64_t v71 = v64 + 104 * v66;
      unint64_t v72 = (void *)(v71 + 64);
      *(void *)(v71 + 32) = v71 + 64;
      unint64_t v73 = v71 + 32;
      unint64_t v74 = *(const void **)(v65 + 40);
      if (v74 == *(const void **)(v65 + 32))
      {
        *(void *)(v73 + 8) = v72;
      }
      else
      {
        uint64_t v79 = *(unsigned int *)(v65 + 48);
        unint64_t v72 = malloc_type_malloc(8 * v79, 0x4065EBACuLL);
        if (!v72 && (v79 || (unint64_t v72 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        }
        *(void *)(v73 + 8) = v72;
        unint64_t v74 = *(const void **)(v65 + 32);
      }
      *(_DWORD *)(v73 + 16) = *(_DWORD *)(v65 + 48);
      unint64_t v75 = *(const void **)(v65 + 40);
      int v76 = *(_DWORD *)(v65 + 52);
      if (v75 == v74) {
        unsigned int v77 = *(_DWORD *)(v65 + 52);
      }
      else {
        unsigned int v77 = *(_DWORD *)(v65 + 48);
      }
      if (v77)
      {
        memmove(v72, v75, 8 * v77);
        int v76 = *(_DWORD *)(v65 + 52);
      }
      int v78 = *(_DWORD *)(v65 + 56);
      *(_DWORD *)(v73 + 20) = v76;
      *(_DWORD *)(v73 + 24) = v78;
      *(unsigned char *)(v64 + 104 * v66 + 96) = *(unsigned char *)(v65 + 96);
      uint64_t v61 = (*(_DWORD *)(a1 + 8) + 1);
      *(_DWORD *)(a1 + 8) = v61;
      v63 += 104;
      v60 += 104;
      v62 -= 104;
    }
    while (v62);
    if (v86 < v61)
    {
      uint64_t v84 = v61 - v86;
      uint64_t v85 = (unsigned char *)(*(void *)a1 + 104 * v86 + 96);
      do
      {
        *uint64_t v85 = 1;
        v85 += 104;
        --v84;
      }
      while (v84);
    }
  }
}

void sub_1CBB09314(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  unsigned int v5 = *((_DWORD *)a2 + 2);
  if (v5 >= v4) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v5;
  }
  if (!v6)
  {
    uint64_t v8 = a3;
    goto LABEL_107;
  }
  uint64_t v7 = 0;
  uint64_t v8 = a3;
  do
  {
    if (!v8) {
      goto LABEL_20;
    }
    if (*(void *)(v8 + 48))
    {
      for (uint64_t i = *(uint64_t **)(v8 + 40); i; uint64_t i = (uint64_t *)*i)
      {
        unsigned int v10 = *((_DWORD *)i + 7);
        if (v10 <= v7)
        {
          if (v10 >= v7) {
            goto LABEL_20;
          }
          ++i;
        }
      }
      goto LABEL_61;
    }
    uint64_t v11 = *(unsigned int *)(v8 + 8);
    if (v11)
    {
      char v12 = *(_DWORD **)v8;
      uint64_t v13 = 4 * v11;
      while (*v12 != v7)
      {
        ++v12;
        v13 -= 4;
        if (!v13) {
          goto LABEL_61;
        }
      }
      if (v13)
      {
LABEL_20:
        uint64_t v14 = *(void *)v3;
        uint64_t v15 = *a2;
        uint64_t v16 = *(void *)v3 + 96 * v7;
        uint64_t v17 = *a2 + 96 * v7;
        if (*(unsigned char *)(v16 + 4)) {
          BOOL v18 = *(unsigned char *)(v17 + 4) == 0;
        }
        else {
          BOOL v18 = 1;
        }
        char v19 = !v18;
        *(unsigned char *)(v16 + 4) = v19;
        uint64_t v20 = v16 + 8;
        uint64_t v21 = *(unsigned int *)(v17 + 16);
        if (v21)
        {
          uint64_t v22 = *(void **)(v17 + 8);
          unsigned int v23 = *(_DWORD *)(v20 + 8);
          uint64_t v24 = 8 * v21;
          do
          {
            if (v23 >= *(_DWORD *)(v20 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)v20 + 8 * v23) = *v22;
            unsigned int v23 = *(_DWORD *)(v20 + 8) + 1;
            *(_DWORD *)(v20 + 8) = v23;
            ++v22;
            v24 -= 8;
          }
          while (v24);
        }
        else
        {
          unsigned int v23 = *(_DWORD *)(v14 + 96 * v7 + 16);
        }
        uint64_t v25 = v14 + 96 * v7;
        unint64_t v26 = 126 - 2 * __clz(v23);
        if (v23) {
          uint64_t v27 = v26;
        }
        else {
          uint64_t v27 = 0;
        }
        sub_1CBB09C2C(*(unint64_t **)v20, (unint64_t *)(*(void *)v20 + 8 * v23), v27, 1);
        unsigned int v30 = *(_DWORD *)(v25 + 16);
        int v29 = (_DWORD *)(v25 + 16);
        uint64_t v28 = v30;
        uint64_t v31 = *(unint64_t **)v20;
        uint64_t v32 = *(void *)v20 + 8 * v30;
        uint64_t v33 = *(unint64_t **)v20;
        if (v30)
        {
          unint64_t v34 = 0;
          uint64_t v35 = 8 * v28 - 8;
          uint64_t v8 = a3;
          while (v35 != v34)
          {
            unint64_t v37 = v31[v34 / 8];
            unint64_t v36 = v31[v34 / 8 + 1];
            v34 += 8;
            if (v37 == v36)
            {
              uint64_t v33 = &v31[v34 / 8 - 1];
              goto LABEL_41;
            }
          }
        }
        else
        {
LABEL_41:
          if (v33 != (unint64_t *)v32)
          {
            unint64_t v38 = v33 + 2;
            uint64_t v8 = a3;
            if (v33 + 2 == (unint64_t *)v32)
            {
              uint64_t v3 = a1;
            }
            else
            {
              unint64_t v39 = *v33;
              uint64_t v3 = a1;
              do
              {
                unint64_t v40 = v39;
                unint64_t v39 = *v38;
                if (v40 != *v38)
                {
                  v33[1] = v39;
                  ++v33;
                }
                ++v38;
              }
              while (v38 != (unint64_t *)v32);
              uint64_t v31 = *(unint64_t **)v20;
            }
            uint64_t v32 = (uint64_t)(v33 + 1);
LABEL_52:
            *int v29 = (unint64_t)(v32 - (void)v31) >> 3;
            uint64_t v41 = v15 + 96 * v7;
            unint64_t v43 = *(unint64_t **)(v41 + 24);
            unint64_t v42 = *(unint64_t **)(v41 + 32);
            uint64_t v44 = (unsigned int *)(v41 + 44);
            unsigned int v45 = (unsigned int *)(v41 + 40);
            if (v42 == v43) {
              unsigned int v45 = v44;
            }
            uint64_t v46 = *v45;
            if (v46)
            {
              uint64_t v47 = 8 * v46;
              unsigned int v48 = v42;
              while (*v48 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v48;
                v47 -= 8;
                if (!v47) {
                  goto LABEL_61;
                }
              }
            }
            else
            {
              unsigned int v48 = v42;
            }
            unsigned int v49 = &v42[v46];
            if (v48 != v49)
            {
              uint64_t v50 = v14 + 96 * v7 + 24;
              unint64_t v52 = *(unint64_t **)v50;
              uint64_t v51 = *(unint64_t **)(v14 + 96 * v7 + 32);
              unint64_t v53 = *v48;
LABEL_64:
              uint64_t v54 = *(unsigned int *)(v50 + 20);
              if (v51 == v52)
              {
                if (v54)
                {
                  BOOL v55 = 0;
                  uint64_t v56 = 8 * v54;
                  uint64_t v57 = v52;
                  while (*v57 != v53)
                  {
                    if (*v57 == -2) {
                      BOOL v55 = v57;
                    }
                    ++v57;
                    v56 -= 8;
                    if (!v56)
                    {
                      if (!v55) {
                        goto LABEL_72;
                      }
                      unint64_t *v55 = v53;
                      --*(_DWORD *)(v50 + 24);
                      goto LABEL_96;
                    }
                  }
                  goto LABEL_96;
                }
LABEL_72:
                unsigned int v58 = *(_DWORD *)(v50 + 16);
                if (v54 < v58)
                {
                  *(_DWORD *)(v50 + 20) = v54 + 1;
                  v52[v54] = v53;
LABEL_96:
                  unint64_t v52 = *(unint64_t **)v50;
                  uint64_t v51 = *(unint64_t **)(v50 + 8);
                  unint64_t v68 = v48 + 1;
                  while (v68 != v49)
                  {
                    unint64_t v69 = *v68++;
                    unint64_t v53 = v69;
                    if (v69 <= 0xFFFFFFFFFFFFFFFDLL)
                    {
                      unsigned int v48 = v68 - 1;
                      goto LABEL_64;
                    }
                  }
                  goto LABEL_61;
                }
              }
              else
              {
                unsigned int v58 = *(_DWORD *)(v50 + 16);
              }
              if (3 * v58 <= 4 * ((int)v54 - *(_DWORD *)(v50 + 24)))
              {
                if (v58 >= 0x40) {
                  v58 *= 2;
                }
                else {
                  unsigned int v58 = 128;
                }
              }
              else if (v58 - v54 >= v58 >> 3)
              {
                goto LABEL_77;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v50, v58);
              uint64_t v8 = a3;
              unsigned int v58 = *(_DWORD *)(v50 + 16);
              uint64_t v51 = *(unint64_t **)(v50 + 8);
LABEL_77:
              unsigned int v59 = v58 - 1;
              unsigned int v60 = (v58 - 1) & ((v53 >> 4) ^ (v53 >> 9));
              uint64_t v61 = &v51[v60];
              unint64_t v62 = *v61;
              if (*v61 == -1)
              {
                unint64_t v63 = 0;
LABEL_89:
                if (v63) {
                  unint64_t v67 = v63;
                }
                else {
                  unint64_t v67 = v61;
                }
                if (*v67 != v53)
                {
                  if (*v67 == -2) {
                    --*(_DWORD *)(v50 + 24);
                  }
                  else {
                    ++*(_DWORD *)(v50 + 20);
                  }
                  *unint64_t v67 = v53;
                }
              }
              else
              {
                unint64_t v63 = 0;
                int v64 = 1;
                while (v62 != v53)
                {
                  if (v63) {
                    BOOL v65 = 0;
                  }
                  else {
                    BOOL v65 = v62 == -2;
                  }
                  if (v65) {
                    unint64_t v63 = v61;
                  }
                  unsigned int v66 = v60 + v64++;
                  unsigned int v60 = v66 & v59;
                  uint64_t v61 = &v51[v66 & v59];
                  unint64_t v62 = *v61;
                  if (*v61 == -1) {
                    goto LABEL_89;
                  }
                }
              }
              goto LABEL_96;
            }
            goto LABEL_61;
          }
          uint64_t v8 = a3;
        }
        uint64_t v3 = a1;
        goto LABEL_52;
      }
    }
LABEL_61:
    ++v7;
  }
  while (v7 != v6);
  unsigned int v5 = *((_DWORD *)a2 + 2);
LABEL_107:
  if (v6 < v5)
  {
    unint64_t v70 = v5;
    if (v8)
    {
      do
      {
        unint64_t v71 = v70 - 1;
        if (*(void *)(v8 + 48))
        {
          for (uint64_t j = *(uint64_t **)(v8 + 40); j; uint64_t j = (uint64_t *)*j)
          {
            unsigned int v73 = *((_DWORD *)j + 7);
            if (v73 <= v71)
            {
              if (v73 >= v71) {
                goto LABEL_122;
              }
              ++j;
            }
          }
        }
        else
        {
          uint64_t v74 = *(unsigned int *)(v8 + 8);
          if (v74)
          {
            unint64_t v75 = *(_DWORD **)v8;
            uint64_t v76 = 4 * v74;
            while (*v75 != v71)
            {
              ++v75;
              v76 -= 4;
              if (!v76) {
                goto LABEL_135;
              }
            }
            if (v76)
            {
LABEL_122:
              if (v71 >= *(unsigned int *)(v3 + 8))
              {
                sub_1CBB0A8B0(v3, v70);
                uint64_t v8 = a3;
              }
              uint64_t v77 = *a2;
              uint64_t v78 = *a2 + 96 * v71;
              uint64_t v79 = *(void *)v3;
              int v80 = *(_DWORD *)v78;
              uint64_t v81 = *(void *)v3 + 96 * v71;
              *(unsigned char *)(v81 + 4) = *(unsigned char *)(v78 + 4);
              *(_DWORD *)uint64_t v81 = v80;
              if (v79 != v77)
              {
                unint64_t v82 = (void **)(v81 + 8);
                unint64_t v83 = (const void **)(v78 + 8);
                uint64_t v84 = *(unsigned int *)(v78 + 16);
                uint64_t v85 = *(unsigned int *)(v81 + 16);
                if (v85 >= v84)
                {
                  if (v84) {
                    memmove(*v82, *v83, 8 * v84);
                  }
                }
                else
                {
                  if (*(_DWORD *)(v81 + 20) < v84)
                  {
                    *(_DWORD *)(v81 + 16) = 0;
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v85) {
                    memmove(*v82, *v83, 8 * v85);
                  }
                  else {
                    uint64_t v85 = 0;
                  }
                  uint64_t v86 = *(unsigned int *)(v78 + 16);
                  if (v85 != v86) {
                    memcpy((char *)*v82 + 8 * v85, (char *)*v83 + 8 * v85, (unsigned char *)*v83 + 8 * v86 - ((unsigned char *)*v83 + 8 * v85));
                  }
                }
                *(_DWORD *)(v81 + 16) = v84;
                llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)(v79 + 96 * v71 + 24), (const llvm::SmallPtrSetImplBase *)(v77 + 96 * v71 + 24));
                uint64_t v8 = a3;
              }
              *(unsigned char *)(v81 + 88) = *(unsigned char *)(v78 + 88);
              uint64_t v3 = a1;
            }
          }
        }
LABEL_135:
        unint64_t v70 = v71;
      }
      while (v71 != v6);
      unsigned int v87 = *(_DWORD *)(v3 + 8);
    }
    else
    {
      unsigned int v87 = *(_DWORD *)(v3 + 8);
      uint64_t v94 = *a2 + 96 * v6;
      uint64_t v95 = 96 * v70 - 96 * v6;
      unint64_t v96 = v94;
      do
      {
        unint64_t v97 = *(void *)v3;
        unint64_t v98 = v96;
        if (v87 >= *(_DWORD *)(v3 + 12))
        {
          unint64_t v112 = v87 + 1;
          unint64_t v113 = v97 + 96 * v87;
          if (v97 <= v96 && v113 > v96)
          {
            unint64_t v115 = v94 - v97;
            sub_1CBB0A978(v3, v112);
            unint64_t v97 = *(void *)v3;
            unint64_t v98 = *(void *)v3 + v115;
          }
          else
          {
            sub_1CBB0A978(v3, v112);
            unint64_t v97 = *(void *)v3;
            unint64_t v98 = v96;
          }
        }
        unsigned int v99 = *(_DWORD *)(v3 + 8);
        unint64_t v117 = v97;
        unint64_t v100 = v97 + 96 * v99;
        int v101 = *(_DWORD *)v98;
        *(unsigned char *)(v100 + 4) = *(unsigned char *)(v98 + 4);
        *(_DWORD *)unint64_t v100 = v101;
        unint64_t v102 = v100 + 24;
        *(void *)(v100 + 16) = 0;
        *(void *)(v100 + 8) = v100 + 24;
        unint64_t v103 = v100 + 8;
        if (*(_DWORD *)(v98 + 16) && v103 != v98 + 8)
        {
          *(_DWORD *)(v103 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unint64_t v104 = v97;
        unint64_t v105 = (void *)(v97 + 96 * v99 + 56);
        *(void *)unint64_t v102 = v105;
        __int32 v106 = *(const void **)(v98 + 32);
        if (v106 == *(const void **)(v98 + 24))
        {
          *(void *)(v102 + 8) = v105;
        }
        else
        {
          uint64_t v111 = *(unsigned int *)(v98 + 40);
          unint64_t v105 = malloc_type_malloc(8 * v111, 0x4065EBACuLL);
          if (!v105)
          {
            if (v111 || (v105 = malloc_type_malloc(1uLL, 0x4065EBACuLL), unint64_t v104 = v117, !v105)) {
              llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
            }
          }
          *(void *)(v102 + 8) = v105;
          __int32 v106 = *(const void **)(v98 + 24);
        }
        *(_DWORD *)(v102 + 16) = *(_DWORD *)(v98 + 40);
        uint64_t v107 = *(const void **)(v98 + 32);
        int v108 = *(_DWORD *)(v98 + 44);
        if (v107 == v106) {
          unsigned int v109 = *(_DWORD *)(v98 + 44);
        }
        else {
          unsigned int v109 = *(_DWORD *)(v98 + 40);
        }
        uint64_t v3 = a1;
        if (v109)
        {
          memmove(v105, v107, 8 * v109);
          int v108 = *(_DWORD *)(v98 + 44);
        }
        int v110 = *(_DWORD *)(v98 + 48);
        *(_DWORD *)(v102 + 20) = v108;
        *(_DWORD *)(v102 + 24) = v110;
        *(unsigned char *)(v104 + 96 * v99 + 88) = *(unsigned char *)(v98 + 88);
        unsigned int v87 = *(_DWORD *)(a1 + 8) + 1;
        *(_DWORD *)(a1 + 8) = v87;
        v96 += 96;
        v94 += 96;
        v95 -= 96;
      }
      while (v95);
    }
    if (v6 < v87)
    {
      while (2)
      {
        if (a3)
        {
          if (*(void *)(a3 + 48))
          {
            for (unsigned int k = *(uint64_t **)(a3 + 40); k; unsigned int k = (uint64_t *)*k)
            {
              unsigned int v89 = *((_DWORD *)k + 7);
              if (v89 <= v6)
              {
                if (v89 >= v6) {
                  goto LABEL_154;
                }
                ++k;
              }
            }
            goto LABEL_155;
          }
          uint64_t v90 = *(unsigned int *)(a3 + 8);
          if (!v90) {
            goto LABEL_155;
          }
          unint64_t v91 = *(_DWORD **)a3;
          uint64_t v92 = 4 * v90;
          while (*v91 != v6)
          {
            ++v91;
            v92 -= 4;
            if (!v92) {
              goto LABEL_155;
            }
          }
          if (!v92)
          {
LABEL_155:
            if (++v6 == v87) {
              return;
            }
            continue;
          }
        }
        break;
      }
LABEL_154:
      uint64_t v93 = *(void *)v3 + 96 * v6;
      *(unsigned char *)(v93 + 88) = 1;
      *(_DWORD *)uint64_t v93 = 0;
      goto LABEL_155;
    }
  }
}

void sub_1CBB09B64(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_1CBB0A6D4(a1, a2);
        unint64_t v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
      {
        uint64_t v8 = *(void *)a1 + 32 * a2;
        uint64_t v9 = *(void *)a1 + 32 * v2;
        do
        {
          *(_OWORD *)uint64_t v9 = 0uLL;
          *(_OWORD *)(v9 + 16) = 0uLL;
          *(void *)(v9 + 8) = v9 + 24;
          *(_DWORD *)(v9 + 20) = 1;
          v9 += 32;
        }
        while (v9 != v8);
      }
    }
    else
    {
      uint64_t v5 = *(void *)a1 + 32 * v2 - 8;
      uint64_t v6 = 32 * a2 - 32 * v2;
      do
      {
        uint64_t v7 = *(void **)(v5 - 16);
        if ((void *)v5 != v7) {
          free(v7);
        }
        v5 -= 32;
        v6 += 32;
      }
      while (v6);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

unint64_t *sub_1CBB09C2C(unint64_t *result, unint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v7 = result;
LABEL_2:
  uint64_t v8 = a2 - 1;
  uint64_t v9 = v7;
  while (2)
  {
    uint64_t v10 = (char *)a2 - (char *)v9;
    unint64_t v11 = a2 - v9;
    if (v11 < 2) {
      return result;
    }
    uint64_t v7 = v9;
    switch(v11)
    {
      case 2uLL:
        unint64_t v19 = *v9;
        if (*v8 < *v9)
        {
          *uint64_t v9 = *v8;
          *uint64_t v8 = v19;
        }
        return result;
      case 3uLL:
        return sub_1CBB0A088(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return sub_1CBB0A328(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        return sub_1CBB0A3A8(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v10 <= 191)
        {
          uint64_t v20 = v9 + 1;
          BOOL v22 = v9 == a2 || v20 == a2;
          if (a4)
          {
            if (!v22)
            {
              uint64_t v23 = 8;
              uint64_t v24 = v9;
              do
              {
                unint64_t v26 = *v24;
                unint64_t v25 = v24[1];
                uint64_t v24 = v20;
                if (v25 < v26)
                {
                  uint64_t v27 = v23;
                  while (1)
                  {
                    *(unint64_t *)((char *)v9 + v27) = v26;
                    uint64_t v28 = v27 - 8;
                    if (v27 == 8) {
                      break;
                    }
                    unint64_t v26 = *(unint64_t *)((char *)v9 + v27 - 16);
                    v27 -= 8;
                    if (v25 >= v26)
                    {
                      int v29 = (unint64_t *)((char *)v9 + v28);
                      goto LABEL_31;
                    }
                  }
                  int v29 = v9;
LABEL_31:
                  *int v29 = v25;
                }
                uint64_t v20 = v24 + 1;
                v23 += 8;
              }
              while (v24 + 1 != a2);
            }
          }
          else if (!v22)
          {
            do
            {
              unint64_t v38 = *v7;
              unint64_t v37 = v7[1];
              uint64_t v7 = v20;
              if (v37 < v38)
              {
                do
                {
                  *uint64_t v20 = v38;
                  unint64_t v38 = *(v20 - 2);
                  --v20;
                }
                while (v37 < v38);
                *uint64_t v20 = v37;
              }
              uint64_t v20 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            return (unint64_t *)sub_1CBB0A44C((uint64_t)v9, a2, a2);
          }
          return result;
        }
        unint64_t v30 = v11 >> 1;
        uint64_t v31 = &v9[v11 >> 1];
        if ((unint64_t)v10 >= 0x401)
        {
          sub_1CBB0A088(v9, &v9[v11 >> 1], a2 - 1);
          sub_1CBB0A088(v9 + 1, v31 - 1, a2 - 2);
          sub_1CBB0A088(v9 + 2, &v9[v30 + 1], a2 - 3);
          sub_1CBB0A088(v31 - 1, v31, &v9[v30 + 1]);
          unint64_t v41 = *v9;
          *uint64_t v9 = *v31;
          *uint64_t v31 = v41;
        }
        else
        {
          sub_1CBB0A088(&v9[v11 >> 1], v9, a2 - 1);
        }
        --a3;
        unint64_t v32 = *v9;
        if ((a4 & 1) == 0 && *(v9 - 1) >= v32)
        {
          uint64_t result = sub_1CBB0A0F8(v9, (uint64_t *)a2);
          uint64_t v9 = result;
          continue;
        }
        uint64_t v33 = 0;
        do
          unint64_t v12 = v9[++v33];
        while (v12 < v32);
        unint64_t v34 = &v9[v33];
        uint64_t v35 = a2;
        if (v33 == 1)
        {
          uint64_t v35 = a2;
          do
          {
            if (v34 >= v35) {
              break;
            }
            unint64_t v40 = *--v35;
          }
          while (v40 >= v32);
        }
        else
        {
          do
            unint64_t v36 = *--v35;
          while (v36 >= v32);
        }
        if (v34 >= v35)
        {
          BOOL v18 = v34 - 1;
        }
        else
        {
          unint64_t v16 = *v35;
          uint64_t v13 = &v9[v33];
          uint64_t v15 = v35;
          do
          {
            *uint64_t v13 = v16;
            *uint64_t v15 = v12;
            do
            {
              unint64_t v14 = v13[1];
              ++v13;
              unint64_t v12 = v14;
            }
            while (v14 < v32);
            do
            {
              unint64_t v17 = *--v15;
              unint64_t v16 = v17;
            }
            while (v17 >= v32);
          }
          while (v13 < v15);
          BOOL v18 = v13 - 1;
        }
        if (v18 != v9) {
          *uint64_t v9 = *v18;
        }
        unint64_t *v18 = v32;
        if (v34 < v35)
        {
LABEL_55:
          uint64_t result = (unint64_t *)sub_1CBB09C2C(v7, v18, a3, a4 & 1);
          a4 = 0;
          uint64_t v9 = v18 + 1;
          continue;
        }
        BOOL v39 = sub_1CBB0A1A8(v9, v18);
        uint64_t v9 = v18 + 1;
        uint64_t result = (unint64_t *)sub_1CBB0A1A8(v18 + 1, a2);
        if (!result)
        {
          if (!v39) {
            goto LABEL_55;
          }
          continue;
        }
        a2 = v18;
        if (!v39) {
          goto LABEL_2;
        }
        return result;
    }
  }
}

unint64_t *sub_1CBB0A088(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *result;
  unint64_t v5 = *a3;
  if (*a2 >= *result)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      unint64_t v6 = *result;
      if (*a2 < *result)
      {
        *uint64_t result = *a2;
        *a2 = v6;
      }
    }
  }
  else
  {
    if (v5 >= v3)
    {
      *uint64_t result = v3;
      *a2 = v4;
      if (*a3 >= v4) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *uint64_t result = v5;
    }
    *a3 = v4;
  }
  return result;
}

unint64_t *sub_1CBB0A0F8(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    unint64_t v5 = (uint64_t *)(a1 + 1);
    do
    {
      unint64_t v3 = (unint64_t *)v5;
      if (v5 >= a2) {
        break;
      }
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    unint64_t v3 = a1;
    do
    {
      unint64_t v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < (unint64_t *)a2)
  {
    do
      unint64_t v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < (unint64_t *)a2)
  {
    unint64_t v7 = *v3;
    unint64_t v8 = *a2;
    do
    {
      *unint64_t v3 = v8;
      *a2 = v7;
      do
      {
        unint64_t v9 = v3[1];
        ++v3;
        unint64_t v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        unint64_t v10 = *--a2;
        unint64_t v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < (unint64_t *)a2);
  }
  if (v3 - 1 != a1) {
    *a1 = *(v3 - 1);
  }
  *(v3 - 1) = v2;
  return v3;
}

BOOL sub_1CBB0A1A8(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 1);
      unint64_t v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CBB0A088(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CBB0A328(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1CBB0A3A8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v8 = a1 + 2;
      sub_1CBB0A088(a1, a1 + 1, a1 + 2);
      unint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    unint64_t v13 = *v8;
    if (*v9 < *v8)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        unint64_t v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          unint64_t v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      *unint64_t v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

unint64_t *sub_1CBB0A328(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  BOOL result = sub_1CBB0A088(a1, a2, a3);
  unint64_t v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    unint64_t v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      unint64_t v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

unint64_t *sub_1CBB0A3A8(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  BOOL result = sub_1CBB0A328(a1, a2, a3, a4);
  unint64_t v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    unint64_t v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      unint64_t v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        unint64_t v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CBB0A44C(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  if ((unint64_t *)result != a2)
  {
    uint64_t v4 = a2;
    unint64_t v5 = (unint64_t *)result;
    uint64_t v6 = (uint64_t)a2 - result;
    uint64_t v7 = ((uint64_t)a2 - result) >> 3;
    if ((uint64_t)a2 - result >= 9)
    {
      unint64_t v8 = (unint64_t)(v7 - 2) >> 1;
      unint64_t v9 = v8 + 1;
      unint64_t v10 = (unint64_t *)(result + 8 * v8);
      do
      {
        BOOL result = sub_1CBB0A610((uint64_t)v5, v7, v10--);
        --v9;
      }
      while (v9);
    }
    if (v4 != a3)
    {
      unint64_t v11 = v4;
      do
      {
        unint64_t v12 = *v11;
        if (*v11 < *v5)
        {
          unint64_t *v11 = *v5;
          *unint64_t v5 = v12;
          BOOL result = sub_1CBB0A610((uint64_t)v5, v7, v5);
        }
        ++v11;
      }
      while (v11 != a3);
    }
    if (v6 >= 9)
    {
      do
      {
        uint64_t v13 = 0;
        unint64_t v14 = *v5;
        uint64_t v15 = v5;
        do
        {
          unint64_t v16 = &v15[v13 + 1];
          uint64_t v17 = (2 * v13) | 1;
          uint64_t v13 = 2 * v13 + 2;
          if (v13 >= v7)
          {
            unint64_t v18 = *v16;
            uint64_t v13 = v17;
          }
          else
          {
            unint64_t v18 = *v16;
            if (*v16 >= v16[1])
            {
              uint64_t v13 = v17;
            }
            else
            {
              unint64_t v18 = v16[1];
              ++v16;
            }
          }
          *uint64_t v15 = v18;
          uint64_t v15 = v16;
        }
        while (v13 <= (uint64_t)((unint64_t)(v7 - 2) >> 1));
        if (v16 == --v4)
        {
          *unint64_t v16 = v14;
        }
        else
        {
          *unint64_t v16 = *v4;
          *uint64_t v4 = v14;
          uint64_t v19 = (char *)v16 - (char *)v5 + 8;
          if (v19 >= 9)
          {
            unint64_t v20 = (((unint64_t)v19 >> 3) - 2) >> 1;
            uint64_t v21 = &v5[v20];
            unint64_t v22 = *v21;
            unint64_t v23 = *v16;
            if (*v21 < *v16)
            {
              do
              {
                *unint64_t v16 = v22;
                unint64_t v16 = v21;
                if (!v20) {
                  break;
                }
                unint64_t v20 = (v20 - 1) >> 1;
                uint64_t v21 = &v5[v20];
                unint64_t v22 = *v21;
              }
              while (*v21 < v23);
              *unint64_t v16 = v23;
            }
          }
        }
      }
      while (v7-- > 2);
    }
  }
  return result;
}

uint64_t sub_1CBB0A610(uint64_t result, uint64_t a2, unint64_t *a3)
{
  if (a2 >= 2)
  {
    uint64_t v3 = (uint64_t)a3 - result;
    int64_t v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 3)
    {
      uint64_t v5 = v3 >> 2;
      uint64_t v6 = (v3 >> 2) + 1;
      uint64_t v7 = (unint64_t *)(result + 8 * v6);
      uint64_t v8 = v5 + 2;
      if (v8 >= a2)
      {
        unint64_t v9 = *v7;
      }
      else
      {
        unint64_t v9 = *v7;
        if (*v7 < v7[1])
        {
          unint64_t v9 = v7[1];
          ++v7;
          uint64_t v6 = v8;
        }
      }
      unint64_t v10 = *a3;
      if (v9 >= *a3)
      {
        do
        {
          *a3 = v9;
          a3 = v7;
          if (v4 < v6) {
            break;
          }
          uint64_t v11 = (2 * v6) | 1;
          uint64_t v7 = (unint64_t *)(result + 8 * v11);
          uint64_t v6 = 2 * v6 + 2;
          if (v6 >= a2)
          {
            unint64_t v9 = *v7;
            uint64_t v6 = v11;
          }
          else
          {
            unint64_t v9 = *v7;
            if (*v7 >= v7[1])
            {
              uint64_t v6 = v11;
            }
            else
            {
              unint64_t v9 = v7[1];
              ++v7;
            }
          }
        }
        while (v9 >= v10);
        *a3 = v10;
      }
    }
  }
  return result;
}

void sub_1CBB0A6D4(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = (char *)malloc_type_malloc(32 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(unsigned char **)a1;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 32 * v9;
    do
    {
      unint64_t v12 = &v7[v10];
      uint64_t v13 = &v8[v10];
      *unint64_t v12 = v8[v10];
      unint64_t v14 = &v7[v10 + 24];
      *(void *)&v7[v10 + 8] = v14;
      *((void *)v12 + 2) = 0x100000000;
      unsigned int v15 = *(_DWORD *)&v8[v10 + 16];
      if (v15) {
        BOOL v16 = v13 == v12;
      }
      else {
        BOOL v16 = 1;
      }
      if (!v16)
      {
        uint64_t v17 = (char *)*((void *)v13 + 1);
        if (v13 + 24 == v17)
        {
          if (v15 >= 2) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v14, v17, 8 * *(unsigned int *)&v8[v10 + 16]);
          *((_DWORD *)v12 + 4) = v15;
        }
        else
        {
          *(void *)&v7[v10 + 8] = v17;
          int v18 = *(_DWORD *)&v8[v10 + 20];
          *((_DWORD *)v12 + 4) = v15;
          *((_DWORD *)v12 + 5) = v18;
          *((void *)v13 + 1) = v13 + 24;
          *(_DWORD *)&v8[v10 + 20] = 0;
        }
        *((_DWORD *)v13 + 4) = 0;
      }
      v10 += 32;
    }
    while (v11 != v10);
    uint64_t v8 = *(unsigned char **)a1;
    uint64_t v19 = *(unsigned int *)(a1 + 8);
    if (v19)
    {
      uint64_t v20 = 32 * v19;
      do
      {
        uint64_t v21 = *(char **)&v8[v20 - 24];
        if (&v8[v20 - 8] != v21) {
          free(v21);
        }
        v20 -= 32;
      }
      while (v20);
      uint64_t v8 = *(unsigned char **)a1;
    }
  }
  if (v8 != (unsigned char *)(a1 + 16)) {
    free(v8);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

void sub_1CBB0A8B0(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_1CBB0A978(a1, a2);
        unint64_t v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
      {
        uint64_t v5 = *(void *)a1 + 96 * a2;
        uint64_t v6 = *(void *)a1 + 96 * v2;
        do
        {
          *(_OWORD *)uint64_t v6 = 0uLL;
          *(_OWORD *)(v6 + 16) = 0uLL;
          *(_OWORD *)(v6 + 64) = 0uLL;
          *(_OWORD *)(v6 + 80) = 0uLL;
          *(_OWORD *)(v6 + 32) = 0uLL;
          *(_OWORD *)(v6 + 48) = 0uLL;
          *(void *)(v6 + 24) = v6 + 56;
          *(unsigned char *)(v6 + 4) = 1;
          *(void *)(v6 + 8) = v6 + 24;
          *(void *)(v6 + 32) = v6 + 56;
          *(_DWORD *)(v6 + 40) = 4;
          v6 += 96;
        }
        while (v6 != v5);
      }
    }
    else
    {
      sub_1CBB07F70((char *)(*(void *)a1 + 96 * a2), (char *)(*(void *)a1 + 96 * v2));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void sub_1CBB0A978(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = (char *)malloc_type_malloc(96 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(char **)a1;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (v9)
  {
    int v27 = v5;
    uint64_t v10 = 0;
    uint64_t v11 = 96 * v9;
    do
    {
      unint64_t v12 = &v8[v10];
      uint64_t v13 = &v7[v10];
      int v14 = *(_DWORD *)&v8[v10];
      _DWORD v13[4] = v8[v10 + 4];
      unsigned int v15 = &v7[v10 + 24];
      *(void *)&v7[v10 + 8] = v15;
      *(_DWORD *)uint64_t v13 = v14;
      *((void *)v13 + 2) = 0;
      int v16 = *(_DWORD *)&v8[v10 + 16];
      if (v16) {
        BOOL v17 = v12 == v13;
      }
      else {
        BOOL v17 = 1;
      }
      if (!v17)
      {
        int v18 = (char *)*((void *)v12 + 1);
        if (v12 + 24 == v18) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v13 + 1) = v18;
        int v25 = *(_DWORD *)&v8[v10 + 20];
        *((_DWORD *)v13 + 4) = v16;
        *((_DWORD *)v13 + 5) = v25;
        *((void *)v12 + 1) = v12 + 24;
        *(_DWORD *)&v8[v10 + 20] = 0;
        *((_DWORD *)v12 + 4) = 0;
      }
      uint64_t v19 = v13 + 56;
      *(void *)unsigned int v15 = v13 + 56;
      uint64_t v21 = *((void *)v12 + 3);
      uint64_t v20 = *((void *)v12 + 4);
      if (v20 == v21)
      {
        *((void *)v13 + 4) = v19;
        uint64_t v22 = *(unsigned int *)&v8[v10 + 44];
        if (v22) {
          memmove(v19, *((const void **)v12 + 4), 8 * v22);
        }
      }
      else
      {
        *((void *)v13 + 4) = v20;
        *((void *)v12 + 4) = v21;
      }
      unint64_t v23 = &v8[v10];
      uint64_t v24 = &v7[v10];
      *((void *)v24 + 5) = *(void *)&v8[v10 + 40];
      *((_DWORD *)v24 + 12) = *(_DWORD *)&v8[v10 + 48];
      *((void *)v23 + 5) = 4;
      *((_DWORD *)v23 + 12) = 0;
      v24[88] = v8[v10 + 88];
      v10 += 96;
    }
    while (v11 != v10);
    uint64_t v8 = *(char **)a1;
    int v26 = *(_DWORD *)(a1 + 8);
    LODWORD(v5) = v27;
  }
  else
  {
    int v26 = 0;
  }
  sub_1CBB07F70(v8, &v8[96 * v26]);
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

void sub_1CBB0ABA4(uint64_t a1, unint64_t a2, void *a3, unsigned int a4)
{
  uint64_t v7 = a4;
  uint64_t v8 = a3[3];
  uint64_t v9 = a3[4];
  uint64_t v10 = v9 + 32 * a4;
  unsigned int v11 = sub_1CBC2D2EC((uint64_t)a3, a4, (void *)(*(void *)(a1 + 1416) + 8));
  if (a2 == 2)
  {
    unsigned int v47 = sub_1CBC2CCF8(*(void **)(v10 + 8), *(void *)(a1 + 1416));
    unsigned int v48 = (unsigned __int8 *)sub_1CBB084F0(a1 + 32, a2);
    unsigned int v49 = v48;
    if (v11 == 6)
    {
      uint64_t v50 = *((unsigned int *)v48 + 4);
      if (v50)
      {
        unsigned int v182 = v47;
        uint64_t v51 = (unsigned int *)*((void *)v48 + 1);
        uint64_t v52 = 4 * v50;
        do
        {
          uint64_t v53 = *v51;
          uint64_t v185 = v10;
          uint64_t v54 = sub_1CBB0CAA8(a1 + 1248, &v185);
          uint64_t v55 = *(unsigned int *)v54;
          if (v55) {
            LODWORD(v53) = sub_1CBB0CCF4((uint64_t *)(a1 + 1208), v53, v55);
          }
          *(_DWORD *)uint64_t v54 = v53;
          ++v51;
          v52 -= 4;
        }
        while (v52);
        uint64_t v56 = (int *)*((void *)v49 + 1);
        int v57 = *v56;
        *((_DWORD *)v49 + 4) = 0;
        if (!*((_DWORD *)v49 + 5)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v47 = v182;
        *uint64_t v56 = v57;
        ++*((_DWORD *)v49 + 4);
      }
      uint64_t v79 = *((void *)v49 + 5);
      uint64_t v80 = *((unsigned int *)v49 + 13);
      if (v79 == *((void *)v49 + 4))
      {
        if (v80)
        {
          uint64_t v81 = 0;
          uint64_t v82 = 8 * v80;
          unint64_t v83 = (uint64_t *)*((void *)v49 + 5);
          while (*v83 != v10)
          {
            if (*v83 == -2) {
              uint64_t v81 = v83;
            }
            ++v83;
            v82 -= 8;
            if (!v82)
            {
              if (!v81) {
                goto LABEL_76;
              }
              uint64_t *v81 = v10;
              --*((_DWORD *)v49 + 14);
              goto LABEL_188;
            }
          }
          goto LABEL_188;
        }
LABEL_76:
        unsigned int v84 = *((_DWORD *)v49 + 12);
        if (v80 < v84)
        {
          *((_DWORD *)v49 + 13) = v80 + 1;
          *(void *)(v79 + 8 * v80) = v10;
LABEL_188:
          *(_WORD *)unsigned int v49 = 1;
          v49[96] = 0;
LABEL_309:
          if (v47 == 5)
          {
            uint64_t v175 = 63;
          }
          else
          {
            if (v47 >= 6) {
              abort();
            }
            uint64_t v175 = 1 << v47;
          }
          if ((*(void *)(a1 + 56) & v175) != 0)
          {
            uint64_t v176 = *(unsigned int *)(a1 + 48);
            uint64_t v185 = v10;
            uint64_t v177 = sub_1CBB0CAA8(a1 + 1248, &v185);
            uint64_t v178 = *(unsigned int *)v177;
            if (v178) {
              LODWORD(v176) = sub_1CBB0CCF4((uint64_t *)(a1 + 1208), v176, v178);
            }
            *(_DWORD *)uint64_t v177 = v176;
            sub_1CBB0CF88(a1 + 48, v47);
          }
          return;
        }
      }
      else
      {
        unsigned int v84 = *((_DWORD *)v49 + 12);
      }
      if (3 * v84 <= 4 * ((int)v80 - *((_DWORD *)v49 + 14)))
      {
        if (v84 >= 0x40) {
          v84 *= 2;
        }
        else {
          unsigned int v84 = 128;
        }
      }
      else if (v84 - v80 >= v84 >> 3)
      {
        goto LABEL_81;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v49 + 32), v84);
      unsigned int v84 = *((_DWORD *)v49 + 12);
      uint64_t v79 = *((void *)v49 + 5);
LABEL_81:
      unsigned int v85 = v84 - 1;
      unsigned int v86 = (v84 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      unsigned int v87 = (uint64_t *)(v79 + 8 * v86);
      uint64_t v88 = *v87;
      if (*v87 == -1)
      {
        unsigned int v89 = 0;
LABEL_181:
        if (v89) {
          uint64_t v137 = v89;
        }
        else {
          uint64_t v137 = v87;
        }
        if (*v137 != v10)
        {
          if (*v137 == -2) {
            --*((_DWORD *)v49 + 14);
          }
          else {
            ++*((_DWORD *)v49 + 13);
          }
          uint64_t *v137 = v10;
        }
      }
      else
      {
        unsigned int v89 = 0;
        int v90 = 1;
        while (v88 != v10)
        {
          if (v89) {
            BOOL v91 = 0;
          }
          else {
            BOOL v91 = v88 == -2;
          }
          if (v91) {
            unsigned int v89 = v87;
          }
          unsigned int v92 = v86 + v90++;
          unsigned int v86 = v92 & v85;
          unsigned int v87 = (uint64_t *)(v79 + 8 * (v92 & v85));
          uint64_t v88 = *v87;
          if (*v87 == -1) {
            goto LABEL_181;
          }
        }
      }
      goto LABEL_188;
    }
    int v64 = *v48;
    *unsigned int v48 = 0;
    v48[96] = 0;
    v48[1] = (*(void *)(*(void *)(*(void *)(v10 + 8) + 16) + 16) & 0x2001C00) == 33555456;
    LODWORD(v65) = *((_DWORD *)v48 + 13);
    if (v65 == *((_DWORD *)v48 + 14)) {
      goto LABEL_300;
    }
    unint64_t v67 = (char *)*((void *)v48 + 4);
    unsigned int v66 = (char *)*((void *)v48 + 5);
    if (v66 == v67) {
      uint64_t v65 = v65;
    }
    else {
      uint64_t v65 = *((unsigned int *)v49 + 12);
    }
    unint64_t v68 = (uint64_t *)*((void *)v49 + 5);
    if (v65)
    {
      uint64_t v69 = 0;
      while (*(void *)&v66[v69] >= 0xFFFFFFFFFFFFFFFELL)
      {
        v69 += 8;
        if (8 * v65 == v69) {
          goto LABEL_176;
        }
      }
      unint64_t v68 = (uint64_t *)&v66[v69];
    }
    __int32 v132 = &v66[8 * v65];
    if (v68 != (uint64_t *)v132)
    {
      uint64_t v133 = *v68;
LABEL_171:
      sub_1CBB0BED4(a1, v133, v10);
      uint64_t v134 = (unint64_t *)(v68 + 1);
      while (v134 != (unint64_t *)v132)
      {
        unint64_t v135 = *v134++;
        uint64_t v133 = v135;
        if (v135 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v68 = (uint64_t *)(v134 - 1);
          goto LABEL_171;
        }
      }
      unint64_t v67 = (char *)*((void *)v49 + 4);
      unsigned int v66 = (char *)*((void *)v49 + 5);
    }
LABEL_176:
    if (v66 != v67)
    {
      uint64_t v161 = *((unsigned int *)v49 + 12);
      if (v161 >= 0x21 && 4 * (*((_DWORD *)v49 + 13) - *((_DWORD *)v49 + 14)) < v161)
      {
        llvm::SmallPtrSetImplBase::shrink_and_clear((void **)v49 + 4);
        if (v64) {
          goto LABEL_178;
        }
        goto LABEL_300;
      }
      memset(v66, 255, 8 * v161);
    }
    *((_DWORD *)v49 + 13) = 0;
    *((_DWORD *)v49 + 14) = 0;
    if (v64)
    {
LABEL_178:
      int v136 = sub_1CBB0BE3C(a1, v10);
      *((_DWORD *)v49 + 4) = 0;
      if (!*((_DWORD *)v49 + 5)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      **((_DWORD **)v49 + 1) = v136;
LABEL_308:
      ++*((_DWORD *)v49 + 4);
      goto LABEL_309;
    }
LABEL_300:
    unsigned int v184 = v47;
    uint64_t v168 = (unsigned int *)*((void *)v49 + 1);
    uint64_t v169 = *((unsigned int *)v49 + 4);
    if (v169)
    {
      uint64_t v170 = 4 * v169;
      do
      {
        uint64_t v171 = *v168;
        uint64_t v185 = v10;
        uint64_t v172 = sub_1CBB0CAA8(a1 + 1248, &v185);
        uint64_t v173 = *(unsigned int *)v172;
        if (v173) {
          LODWORD(v171) = sub_1CBB0CCF4((uint64_t *)(a1 + 1208), v171, v173);
        }
        *(_DWORD *)uint64_t v172 = v171;
        ++v168;
        v170 -= 4;
      }
      while (v170);
    }
    int v174 = sub_1CBB0BE3C(a1, v10);
    *((_DWORD *)v49 + 4) = 0;
    if (!*((_DWORD *)v49 + 5)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v47 = v184;
    **((_DWORD **)v49 + 1) = v174;
    goto LABEL_308;
  }
  unint64_t v12 = HIDWORD(a2);
  if (a2 == 1)
  {
    if (v12 >= *(unsigned int *)(a1 + 24)) {
      sub_1CBB0A8B0(a1 + 16, (HIDWORD(a2) + 1));
    }
    uint64_t v26 = *(void *)(a1 + 16);
    if (v11 == 4)
    {
      uint64_t v27 = v9 + 32 * v7;
      if ((*(_DWORD *)(v27 + 16) - 81) > 4) {
        char v28 = 0;
      }
      else {
        char v28 = *(_DWORD *)(v27 + 4);
      }
      uint64_t v29 = sub_1CBAD8000(v10);
      if ((v29 & 0xFF00000000) != 0 && ((1 << (BYTE4(a2) - v28)) & v29) == 0) {
        return;
      }
      uint64_t v30 = v26;
      uint64_t v31 = v26 + 96 * HIDWORD(a2);
      unint64_t v34 = *(uint64_t **)(v31 + 8);
      unint64_t v32 = (uint64_t **)(v31 + 8);
      uint64_t v33 = v34;
      uint64_t v35 = *((unsigned int *)v32 + 2);
      if (v35)
      {
        uint64_t v36 = 8 * v35;
        do
        {
          uint64_t v37 = *v33++;
          sub_1CBB0BED4(a1, v37, v10);
          v36 -= 8;
        }
        while (v36);
      }
      uint64_t v38 = v30 + 96 * HIDWORD(a2);
      uint64_t v40 = *(void *)(v38 + 24);
      uint64_t v39 = v38 + 24;
      *(unsigned char *)(v39 - 20) = 1;
      *(unsigned char *)(v39 + 64) = 0;
      uint64_t v41 = *(void *)(v39 + 8);
      uint64_t v42 = *(unsigned int *)(v39 + 20);
      if (v41 == v40)
      {
        if (v42)
        {
          unint64_t v43 = 0;
          uint64_t v44 = 8 * v42;
          unsigned int v45 = *(uint64_t **)(v39 + 8);
          while (*v45 != v10)
          {
            if (*v45 == -2) {
              unint64_t v43 = v45;
            }
            ++v45;
            v44 -= 8;
            if (!v44)
            {
              if (!v43) {
                goto LABEL_38;
              }
              *unint64_t v43 = v10;
              --*(_DWORD *)(v39 + 24);
              goto LABEL_227;
            }
          }
          goto LABEL_227;
        }
LABEL_38:
        unsigned int v46 = *(_DWORD *)(v39 + 16);
        if (v42 < v46)
        {
          *(_DWORD *)(v39 + 20) = v42 + 1;
          *(void *)(v41 + 8 * v42) = v10;
LABEL_227:
          if (*((_DWORD *)v32 + 2))
          {
            uint64_t v151 = *v32;
            uint64_t v152 = **v32;
            *((_DWORD *)v32 + 2) = 0;
            if (!*((_DWORD *)v32 + 3)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *uint64_t v151 = v152;
            ++*((_DWORD *)v32 + 2);
          }
          return;
        }
      }
      else
      {
        unsigned int v46 = *(_DWORD *)(v39 + 16);
      }
      if (3 * v46 <= 4 * ((int)v42 - *(_DWORD *)(v39 + 24)))
      {
        if (v46 >= 0x40) {
          v46 *= 2;
        }
        else {
          unsigned int v46 = 128;
        }
      }
      else if (v46 - v42 >= v46 >> 3)
      {
        goto LABEL_95;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v39, v46);
      unsigned int v46 = *(_DWORD *)(v39 + 16);
      uint64_t v41 = *(void *)(v39 + 8);
LABEL_95:
      unsigned int v93 = v46 - 1;
      unsigned int v94 = (v46 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      uint64_t v95 = (uint64_t *)(v41 + 8 * v94);
      uint64_t v96 = *v95;
      if (*v95 == -1)
      {
        unint64_t v97 = 0;
LABEL_220:
        if (v97) {
          unint64_t v150 = v97;
        }
        else {
          unint64_t v150 = v95;
        }
        if (*v150 != v10)
        {
          if (*v150 == -2) {
            --*(_DWORD *)(v39 + 24);
          }
          else {
            ++*(_DWORD *)(v39 + 20);
          }
          *unint64_t v150 = v10;
        }
      }
      else
      {
        unint64_t v97 = 0;
        int v98 = 1;
        while (v96 != v10)
        {
          if (v97) {
            BOOL v99 = 0;
          }
          else {
            BOOL v99 = v96 == -2;
          }
          if (v99) {
            unint64_t v97 = v95;
          }
          unsigned int v100 = v94 + v98++;
          unsigned int v94 = v100 & v93;
          uint64_t v95 = (uint64_t *)(v41 + 8 * (v100 & v93));
          uint64_t v96 = *v95;
          if (*v95 == -1) {
            goto LABEL_220;
          }
        }
      }
      goto LABEL_227;
    }
    uint64_t v58 = v26 + 96 * HIDWORD(a2);
    int v61 = *(_DWORD *)(v58 + 44);
    unsigned int v60 = (_DWORD *)(v58 + 44);
    LODWORD(v59) = v61;
    unint64_t v62 = (uint64_t **)(v60 - 5);
    int v181 = (unsigned int *)(v26 + 96 * HIDWORD(a2));
    uint64_t v183 = (void **)(v60 - 5);
    if (v61 == v60[1])
    {
      unsigned int v63 = 0;
      goto LABEL_128;
    }
    uint64_t v179 = *(void *)(a1 + 16);
    uint64_t v70 = v26 + 96 * HIDWORD(a2);
    unsigned int v73 = *(_DWORD *)(v70 + 40);
    unint64_t v72 = (_DWORD *)(v70 + 40);
    unsigned int v71 = v73;
    uint64_t v74 = (uint64_t *)*((void *)v72 - 1);
    unint64_t v75 = *v62;
    if (v74 == *v62) {
      uint64_t v76 = v59;
    }
    else {
      uint64_t v76 = v71;
    }
    uint64_t v77 = (uint64_t *)*((void *)v72 - 1);
    if (v76)
    {
      uint64_t v78 = 0;
      while ((unint64_t)v74[v78] >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (v76 == ++v78) {
          goto LABEL_114;
        }
      }
      uint64_t v77 = &v74[v78];
    }
    int v101 = &v74[v76];
    if (v77 != v101)
    {
      uint64_t v102 = *v77;
LABEL_109:
      sub_1CBB0BED4(a1, v102, v10);
      unint64_t v103 = (unint64_t *)(v77 + 1);
      while (v103 != (unint64_t *)v101)
      {
        unint64_t v104 = *v103++;
        uint64_t v102 = v104;
        if (v104 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v77 = (uint64_t *)(v103 - 1);
          goto LABEL_109;
        }
      }
      uint64_t v74 = (uint64_t *)*((void *)v72 - 1);
      unint64_t v75 = (uint64_t *)*v183;
      LODWORD(v59) = *v60;
      unsigned int v71 = *v72;
    }
LABEL_114:
    if (v74 == v75) {
      uint64_t v59 = v59;
    }
    else {
      uint64_t v59 = v71;
    }
    if (v59)
    {
      uint64_t v105 = 8 * v59;
      __int32 v106 = &v74[v59];
      uint64_t v26 = v179;
      while ((unint64_t)*v74 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v74;
        v105 -= 8;
        if (!v105)
        {
          uint64_t v74 = v106;
          break;
        }
      }
    }
    else
    {
      uint64_t v26 = v179;
    }
    unsigned int v63 = sub_1CBB0BE3C(a1, *v74);
    uint64_t v107 = v60 - 5;
    int v108 = *(void **)(v60 - 3);
    if (v108 != *v183)
    {
      uint64_t v159 = *(v60 - 1);
      if (v159 >= 0x21 && 4 * (*v60 - v60[1]) < v159)
      {
        llvm::SmallPtrSetImplBase::shrink_and_clear(v183);
LABEL_125:
        if (*(unsigned char *)(v26 + 96 * HIDWORD(a2) + 4))
        {
          uint64_t v109 = v26 + 96 * HIDWORD(a2);
          *(_DWORD *)(v109 + 16) = 0;
          int v110 = (_DWORD *)(v109 + 16);
          if (!v110[1]) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          **((void **)v110 - 1) = v10;
          ++*v110;
          unsigned int *v181 = v63;
          goto LABEL_286;
        }
LABEL_128:
        uint64_t v111 = v26 + 96 * HIDWORD(a2);
        unsigned int v114 = *(_DWORD *)(v111 + 16);
        unint64_t v113 = (_DWORD *)(v111 + 16);
        uint64_t v112 = v114;
        unint64_t v115 = (uint64_t **)(v113 - 2);
        if (v114)
        {
          int v116 = *(_DWORD *)(v9 + 32 * v7 + 16);
          unsigned int v180 = v63;
          if ((v116 - 81) > 4)
          {
            unsigned int v119 = 0;
          }
          else
          {
            if (*(_DWORD *)v10) {
              __int16 v117 = (*(_DWORD *)v10 >> 8) & 0xFFF;
            }
            else {
              __int16 v117 = 0;
            }
            if ((v117 & 0x200) != 0) {
              v117 &= 0xCFFu;
            }
            BOOL v91 = (v117 & 0xEFF) == 0;
            unsigned int v118 = ((v117 & 0xEFFu) - 129) >> 1;
            if (v91) {
              unsigned int v119 = 0;
            }
            else {
              unsigned int v119 = v118;
            }
          }
          uint64_t v120 = *v115;
          uint64_t v121 = **v115;
          BOOL v123 = v116 == 81 || *(unsigned char *)(v26 + 96 * v12 + 88) == 0;
          if (v116 == *(_DWORD *)(v121 + 16) && v123)
          {
            if (!*(unsigned char *)(v26 + 96 * v12 + 88))
            {
              uint64_t v146 = 8 * v112;
              while (1)
              {
                uint64_t v147 = (_DWORD *)*v120;
                if ((*(_DWORD *)(*v120 + 16) - 81) > 4)
                {
                  unsigned int v149 = 0;
                }
                else
                {
                  if (*v147) {
                    int v148 = (*v147 >> 8) & 0xFFF;
                  }
                  else {
                    int v148 = 0;
                  }
                  if ((v148 & 0x200) != 0) {
                    v148 &= 0xCFFu;
                  }
                  unsigned int v149 = v148 & 0xFFFFFEFF;
                  if (v149) {
                    unsigned int v149 = (v149 - 129) >> 1;
                  }
                }
                if ((v149 ^ v119) <= 1) {
                  break;
                }
                ++v120;
                v146 -= 8;
                if (!v146)
                {
                  uint64_t v164 = *v181;
                  if (v164)
                  {
                    uint64_t v185 = v10;
                    __int32 v165 = sub_1CBB0CAA8(a1 + 1248, &v185);
                    uint64_t v166 = *(unsigned int *)v165;
                    if (v166) {
                      LODWORD(v164) = sub_1CBB0CCF4((uint64_t *)(a1 + 1208), v164, v166);
                    }
                    *(_DWORD *)__int32 v165 = v164;
                    if (v180) {
                      sub_1CBB0CCF4((uint64_t *)(a1 + 1208), v180, *v181);
                    }
                  }
                  else if (v180)
                  {
                    unsigned int *v181 = v180;
                  }
                  if (*v113 >= *(_DWORD *)(v26 + 96 * v12 + 20)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  (*v115)[*v113] = v10;
                  goto LABEL_285;
                }
              }
              sub_1CBB0BE3C(a1, (uint64_t)v147);
              *uint64_t v120 = v10;
              if (v180) {
                unsigned int *v181 = v180;
              }
              goto LABEL_286;
            }
            unsigned int v124 = &v120[v112];
            uint64_t v125 = 8 * v112 - 8;
            while (1)
            {
              uint64_t v126 = (_DWORD *)*v120;
              if ((*(_DWORD *)(*v120 + 16) - 81) > 4)
              {
                unsigned int v128 = 0;
              }
              else
              {
                if (*v126) {
                  int v127 = (*v126 >> 8) & 0xFFF;
                }
                else {
                  int v127 = 0;
                }
                if ((v127 & 0x200) != 0) {
                  v127 &= 0xCFFu;
                }
                unsigned int v128 = v127 & 0xFFFFFEFF;
                if (v128) {
                  unsigned int v128 = (v128 - 129) >> 1;
                }
              }
              if ((v128 ^ v119) <= 1) {
                break;
              }
              ++v120;
              v125 -= 8;
              if (v120 == v124) {
                goto LABEL_247;
              }
            }
            sub_1CBB0BE3C(a1, (uint64_t)v126);
            if (v120 + 1 != v124)
            {
              uint64_t v153 = 1;
              uint64_t v154 = v120;
              do
              {
                char v155 = (_DWORD *)v120[v153];
                if ((v155[4] - 81) > 4)
                {
                  unsigned int v157 = 0;
                }
                else
                {
                  if (*v155) {
                    int v156 = (*v155 >> 8) & 0xFFF;
                  }
                  else {
                    int v156 = 0;
                  }
                  if ((v156 & 0x200) != 0) {
                    v156 &= 0xCFFu;
                  }
                  unsigned int v157 = v156 & 0xFFFFFEFF;
                  if (v157) {
                    unsigned int v157 = (v157 - 129) >> 1;
                  }
                }
                if ((v157 ^ v119) > 1) {
                  *v154++ = (uint64_t)v155;
                }
                else {
                  sub_1CBB0BE3C(a1, (uint64_t)v155);
                }
                ++v153;
                v125 -= 8;
              }
              while (v125);
            }
LABEL_247:
            if (v180) {
              unsigned int *v181 = v180;
            }
            uint64_t v158 = (uint64_t *)*((void *)v113 - 1);
            *unint64_t v113 = 0;
            if (!*(_DWORD *)(v26 + 96 * v12 + 20)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *uint64_t v158 = v10;
            goto LABEL_285;
          }
          uint64_t v129 = 8 * v112;
          do
          {
            uint64_t v130 = *v120++;
            sub_1CBB0BED4(a1, v130, v10);
            v129 -= 8;
          }
          while (v129);
          uint64_t v131 = sub_1CBB0BE3C(a1, v121);
          unsigned int *v181 = v131;
          if (v180) {
            sub_1CBB0CCF4((uint64_t *)(a1 + 1208), v180, v131);
          }
          *unint64_t v113 = 0;
          if (*(_DWORD *)(v26 + 96 * v12 + 20))
          {
LABEL_167:
            **unint64_t v115 = v10;
LABEL_285:
            ++*v113;
LABEL_286:
            uint64_t v167 = v26 + 96 * v12;
            *(unsigned char *)(v167 + 4) = 0;
            *(unsigned char *)(v167 + 88) = 0;
            return;
          }
        }
        else if (*(_DWORD *)(v26 + 96 * v12 + 20))
        {
          goto LABEL_167;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memset(v108, 255, 8 * v159);
      uint64_t v107 = v60 - 5;
    }
    v107[5] = 0;
    v107[6] = 0;
    goto LABEL_125;
  }
  if (!a2)
  {
    if (v12 >= *(unsigned int *)(a1 + 8)) {
      sub_1CBB09B64(a1, (HIDWORD(a2) + 1));
    }
    uint64_t v13 = *(void *)a1 + 32 * v12;
    sub_1CBB0BB70(a1, v13);
    sub_1CBB0BD18(a1, v8, a3, v7 | 0x100000000, v11 | 0x100000000, v13);
    if (v11 == 3)
    {
      sub_1CBB0BE3C(a1, v10);
      unsigned int v14 = *(_DWORD *)(v13 + 16);
      if (v14 >= *(_DWORD *)(v13 + 20)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v13 + 8) + 8 * v14) = v10;
      ++*(_DWORD *)(v13 + 16);
      unint64_t v15 = sub_1CBB07BD8(a1, v8);
      if (!v15) {
        goto LABEL_272;
      }
      uint64_t v16 = sub_1CBB07D28(v15);
      if ((*(unsigned char *)(a3[2] + 16) & 2) == 0) {
        goto LABEL_272;
      }
      uint64_t v17 = v16;
      uint64_t v20 = *(uint64_t **)(v16 + 128);
      uint64_t v19 = *(uint64_t **)(v16 + 136);
      int v18 = (unsigned int *)(v16 + 128);
      uint64_t v21 = v18[5];
      if (v19 == v20)
      {
        if (v21)
        {
          uint64_t v22 = 0;
          uint64_t v23 = 8 * v21;
          uint64_t v24 = v19;
          while (*v24 != v10)
          {
            if (*v24 == -2) {
              uint64_t v22 = v24;
            }
            ++v24;
            v23 -= 8;
            if (!v23)
            {
              if (!v22) {
                goto LABEL_18;
              }
              *uint64_t v22 = v10;
              --*(_DWORD *)(v17 + 152);
              goto LABEL_272;
            }
          }
          goto LABEL_272;
        }
LABEL_18:
        unsigned int v25 = *(_DWORD *)(v17 + 144);
        if (v21 < v25)
        {
          *(_DWORD *)(v17 + 148) = v21 + 1;
          v19[v21] = v10;
LABEL_272:
          *(unsigned char *)uint64_t v13 = 0;
          return;
        }
      }
      else
      {
        unsigned int v25 = *(_DWORD *)(v17 + 144);
      }
      if (3 * v25 <= 4 * ((int)v21 - *(_DWORD *)(v17 + 152)))
      {
        if (v25 >= 0x40) {
          v25 *= 2;
        }
        else {
          unsigned int v25 = 128;
        }
      }
      else if (v25 - v21 >= v25 >> 3)
      {
        goto LABEL_192;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v18, v25);
      unsigned int v25 = *(_DWORD *)(v17 + 144);
      uint64_t v19 = *(uint64_t **)(v17 + 136);
LABEL_192:
      unsigned int v138 = v25 - 1;
      unsigned int v139 = (v25 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      uint64_t v140 = &v19[v139];
      uint64_t v141 = *v140;
      if (*v140 == -1)
      {
        int v142 = 0;
LABEL_265:
        if (v142) {
          __int32 v163 = v142;
        }
        else {
          __int32 v163 = v140;
        }
        if (*v163 != v10)
        {
          if (*v163 == -2) {
            --*(_DWORD *)(v17 + 152);
          }
          else {
            ++*(_DWORD *)(v17 + 148);
          }
          uint64_t *v163 = v10;
        }
      }
      else
      {
        int v142 = 0;
        int v143 = 1;
        while (v141 != v10)
        {
          if (v142) {
            BOOL v144 = 0;
          }
          else {
            BOOL v144 = v141 == -2;
          }
          if (v144) {
            int v142 = v140;
          }
          unsigned int v145 = v139 + v143++;
          unsigned int v139 = v145 & v138;
          uint64_t v140 = &v19[v145 & v138];
          uint64_t v141 = *v140;
          if (*v140 == -1) {
            goto LABEL_265;
          }
        }
      }
      goto LABEL_272;
    }
  }
}